{"nodes":[{"pos":[12,60],"content":"CMFCToolBarComboBoxButton Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCToolBarComboBoxButton Class | Microsoft Docs","pos":[0,48]}]},{"content":"CMFCToolBarComboBoxButton Class","pos":[649,680]},{"pos":[681,793],"content":"A toolbar button that contains a combo box control ( <bpt id=\"p1\">[</bpt>CComboBox Class<ept id=\"p1\">](../../mfc/reference/ccombobox-class.md)</ept>).","source":"A toolbar button that contains a combo box control ( [CComboBox Class](../../mfc/reference/ccombobox-class.md))."},{"content":"Syntax","pos":[802,808]},{"content":"Members","pos":[893,900]},{"content":"Public Constructors","pos":[910,929]},{"content":"Name","pos":[936,940]},{"content":"Description","pos":[941,952]},{"content":"CMFCToolBarComboBoxButton::CMFCToolBarComboBoxButton","pos":[991,1043]},{"pos":[1100,1141],"content":"Constructs a <ph id=\"ph1\">`CMFCToolBarComboBoxButton`</ph>.","source":"Constructs a `CMFCToolBarComboBoxButton`."},{"content":"Public Methods","pos":[1152,1166]},{"content":"Name","pos":[1173,1177]},{"content":"Description","pos":[1178,1189]},{"content":"CMFCToolBarComboBoxButton::AddItem","pos":[1228,1262]},{"content":"Adds an item to the end of the combo box list.","pos":[1301,1347]},{"content":"CMFCToolBarComboBoxButton::AddSortedItem","pos":[1353,1393]},{"content":"Adds an item to the combo box list.","pos":[1438,1473]},{"content":"The order of items in the list is specified by <ph id=\"ph1\">`Compare`</ph>.","pos":[1474,1531],"source":" The order of items in the list is specified by `Compare`."},{"content":"CMFCToolBarComboBoxButton::Compare","pos":[1537,1571]},{"content":"Compares two items.","pos":[1610,1629]},{"content":"Called to sort items that <ph id=\"ph1\">`AddSortedItems`</ph> adds to the combo box list.","pos":[1630,1700],"source":" Called to sort items that `AddSortedItems` adds to the combo box list."},{"content":"CMFCToolBarComboBoxButton::CreateEdit","pos":[1706,1743]},{"content":"Creates a new edit control for the combo box button.","pos":[1785,1837]},{"content":"CMFCToolBarComboBoxButton::DeleteItem","pos":[1843,1880]},{"content":"Deletes an item from the combo box list.","pos":[1922,1962]},{"content":"CMFCToolBarComboBoxButton::FindItem","pos":[1968,2003]},{"content":"Returns the index of the item that contains a specified string.","pos":[2043,2106]},{"content":"CMFCToolBarComboBoxButton::GetByCmd","pos":[2112,2147]},{"content":"Returns a pointer to the combo box button with a specified command ID.","pos":[2187,2257]},{"content":"CMFCToolBarComboBoxButton::GetComboBox","pos":[2263,2301]},{"content":"Returns a pointer to the combo box control that is embedded in the combo box button.","pos":[2344,2428]},{"content":"CMFCToolBarComboBoxButton::GetCount","pos":[2434,2469]},{"content":"Returns the number of items in the combo box list.","pos":[2509,2559]},{"content":"CMFCToolBarComboBoxButton::GetCountAll","pos":[2565,2603]},{"content":"Finds the combo box button that has a specified command ID.","pos":[2646,2705]},{"content":"Returns the number of items in the combo box list of that button.","pos":[2706,2771]},{"content":"CMFCToolBarComboBoxButton::GetCurSel","pos":[2777,2813]},{"content":"Returns the index of the selected item in the combo box list.","pos":[2854,2915]},{"content":"CMFCToolBarComboBoxButton::GetCurSelAll","pos":[2921,2960]},{"content":"Finds the combo box button that has a specified command ID, and returns the index of the selected item in the combo box list of that button.","pos":[3004,3144]},{"content":"CMFCToolBarComboBoxButton::GetEditCtrl","pos":[3150,3188]},{"content":"Returns a pointer to the edit control that is embedded in the combo box button.","pos":[3231,3310]},{"content":"CMFCToolBarComboBoxButton::GetItem","pos":[3316,3350]},{"content":"Returns the string that is associated with a specified index in the combo box list.","pos":[3389,3472]},{"content":"CMFCToolBarComboBoxButton::GetItemAll","pos":[3478,3515]},{"content":"Finds the combo box button that has a specified command ID, and returns the string that is associated with an index in the combo box list of that button.","pos":[3557,3710]},{"content":"CMFCToolBarComboBoxButton::GetItemData","pos":[3716,3754]},{"content":"Returns the 32-bit value that is associated with a specified index in the combo box list.","pos":[3797,3886]},{"content":"CMFCToolBarComboBoxButton::GetItemDataAll","pos":[3892,3933]},{"content":"Finds the combo box button that has a specified command ID, and returns the 32-bit value that is associated with an index in the combo box list of that button.","pos":[3979,4138]},{"content":"CMFCToolBarComboBoxButton::GetItemDataPtrAll","pos":[4144,4188]},{"content":"Finds the combo box button that has a specified command ID.","pos":[4237,4296]},{"content":"Retrieves the 32-bit value that is associated an index in the combo box list of that button, and returns the 32-bit value as a pointer.","pos":[4297,4432]},{"content":"CMFCToolBarComboBoxButton::GetText","pos":[4438,4472]},{"content":"Returns the text from the edit control of the combo box.","pos":[4511,4567]},{"content":"CMFCToolBarComboBoxButton::GetTextAll","pos":[4573,4610]},{"content":"Finds the combo box button that has a specified command ID, and returns the text from edit control of that button.","pos":[4652,4766]},{"content":"CMFCToolBarComboBoxButton::IsCenterVert","pos":[4772,4811]},{"content":"Determines whether combo box buttons in the application are centered or aligned with the top of the toolbar.","pos":[4855,4963]},{"content":"CMFCToolBarComboBoxButton::IsFlatMode","pos":[4969,5006]},{"content":"Determines whether combo box buttons in the application have a flat appearance.","pos":[5048,5127]},{"content":"CMFCToolBarComboBoxButton::RemoveAllItems","pos":[5133,5174]},{"content":"Removes all items from the list box and edit control of the combo box.","pos":[5220,5290]},{"content":"CMFCToolBarComboBoxButton::SelectItem","pos":[5296,5333]},{"content":"Selects an item in the combo box according to its index, 32-bit value, or string, and notifies the combo box control about the selection.","pos":[5375,5512]},{"content":"CMFCToolBarComboBoxButton::SelectItemAll","pos":[5518,5558]},{"content":"Finds the combo box button that has a specified command ID.","pos":[5603,5662]},{"content":"Calls <ph id=\"ph1\">`SelectItem`</ph> to select an item in the combo box of that button according to its string, index, or 32-bit value.","pos":[5663,5780],"source":" Calls `SelectItem` to select an item in the combo box of that button according to its string, index, or 32-bit value."},{"content":"CMFCToolBarComboBoxButton::SetCenterVert","pos":[5786,5826]},{"content":"Specifies whether combo box buttons in the application are centered vertically or aligned with the top of the toolbar.","pos":[5871,5989]},{"content":"CMFCToolBarComboBoxButton::SetDropDownHeight","pos":[5995,6039]},{"content":"Sets the height of the drop-down list box.","pos":[6088,6130]},{"content":"CMFCToolBarComboBoxButton::SetFlatMode","pos":[6136,6174]},{"content":"Specifies whether combo box buttons in the application have a flat appearance.","pos":[6217,6295]},{"content":"Remarks","pos":[6305,6312]},{"content":"To add a combo box button to a toolbar, follow these steps:","pos":[6316,6375]},{"content":"Reserve a dummy resource ID for the button in the parent toolbar resource.","pos":[6385,6459]},{"pos":[6469,6516],"content":"Construct a <ph id=\"ph1\">`CMFCToolBarComboBoxButton`</ph> object.","source":"Construct a `CMFCToolBarComboBoxButton` object."},{"pos":[6526,6761],"content":"In the message handler that processes the <ph id=\"ph1\">`AFX_WM_RESETTOOLBAR`</ph> message, replace the dummy button with the new combo box button by using <bpt id=\"p1\">[</bpt>CMFCToolBar::ReplaceButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__replacebutton)</ept>.","source":"In the message handler that processes the `AFX_WM_RESETTOOLBAR` message, replace the dummy button with the new combo box button by using [CMFCToolBar::ReplaceButton](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__replacebutton)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Walkthrough: Putting Controls On Toolbars<ept id=\"p1\">](../../mfc/walkthrough-putting-controls-on-toolbars.md)</ept>.","pos":[6768,6893],"source":"For more information, see [Walkthrough: Putting Controls On Toolbars](../../mfc/walkthrough-putting-controls-on-toolbars.md)."},{"content":"For an example of a combo box toolbar button, see the example project VisualStudioDemo.","pos":[6894,6981]},{"content":"Example","pos":[6990,6997]},{"content":"The following example demonstrates how to use various methods in the <ph id=\"ph1\">`CMFCToolBarComboBoxButton`</ph> class.","pos":[7001,7104],"source":"The following example demonstrates how to use various methods in the `CMFCToolBarComboBoxButton` class."},{"content":"The example shows how to enable the edit and combo boxes, set the vertical position of combo box buttons in the application, set the height of the list box when it is dropped down, set the flat style appearance of combo box buttons in the application, and set the text in the edit box of the combo box button.","pos":[7105,7414]},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Visual Studio Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[7415,7505],"source":" This code snippet is part of the [Visual Studio Demo sample](../../visual-cpp-samples.md)."},{"content":"NVC_MFC_VisualStudioDemo#36","pos":[7523,7550]},{"content":"NVC_MFC_VisualStudioDemo#37","pos":[7631,7658]},{"content":"Inheritance Hierarchy","pos":[7734,7755]},{"content":"CObject","pos":[7760,7767]},{"content":"CMFCToolBarButton","pos":[7814,7831]},{"content":"CMFCToolBarComboBoxButton","pos":[7888,7913]},{"content":"Requirements","pos":[7979,7991]},{"pos":[7995,8033],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxtoolbarcomboboxbutton.h","source":"**Header:** afxtoolbarcomboboxbutton.h"},{"pos":[8094,8128],"content":"CMFCToolBarComboBoxButton::AddItem"},{"content":"Appends a unique item to the list box.","pos":[8132,8170]},{"content":"Parameters","pos":[8269,8279]},{"content":"[in]","pos":[8283,8287]},{"content":"The text of the item to add to the list box.","pos":[8302,8346]},{"content":"[in]","pos":[8353,8357]},{"content":"The data associated with the item to add to the list box.","pos":[8370,8427]},{"content":"Return Value","pos":[8437,8449]},{"content":"The index of the last item in the list box.","pos":[8453,8496]},{"content":"Remarks","pos":[8506,8513]},{"content":"Do not use this method when the list box style is sorted.","pos":[8517,8574]},{"content":"If the item text is already in the list box, the new data is stored with the existing item.","pos":[8581,8672]},{"content":"The search for the item is case sensitive.","pos":[8673,8715]},{"pos":[8782,8822],"content":"CMFCToolBarComboBoxButton::AddSortedItem"},{"pos":[8826,8945],"content":"Adds an item to the list box in the order that is defined by the <bpt id=\"p1\">[</bpt>Compare<ept id=\"p1\">](#cmfctoolbarcomboboxbutton__compare)</ept> method.","source":"Adds an item to the list box in the order that is defined by the [Compare](#cmfctoolbarcomboboxbutton__compare) method."},{"content":"Parameters","pos":[9050,9060]},{"content":"[in]","pos":[9064,9068]},{"content":"The text of the item to add to the list box.","pos":[9083,9127]},{"content":"[in]","pos":[9134,9138]},{"content":"The data associated with the item to add to the list box.","pos":[9151,9208]},{"content":"Return Value","pos":[9218,9230]},{"content":"Index of the item that was added to the list box.","pos":[9234,9283]},{"content":"Remarks","pos":[9293,9300]},{"content":"Use this function to add items to the list box in a specific order.","pos":[9304,9371]},{"pos":[9439,9480],"content":"CMFCToolBarComboBoxButton::CanBeStretched"},{"content":"Indicates whether the combo box button size can change.","pos":[9484,9539]},{"content":"Return Value","pos":[9604,9616]},{"pos":[9620,9635],"content":"Returns <ph id=\"ph1\">`TRUE`</ph>.","source":"Returns `TRUE`."},{"pos":[9714,9766],"content":"CMFCToolBarComboBoxButton::CMFCToolBarComboBoxButton"},{"pos":[9770,9874],"content":"Constructs a <bpt id=\"p1\">[</bpt>CMFCToolBarComboBoxButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md)</ept> object.","source":"Constructs a [CMFCToolBarComboBoxButton](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md) object."},{"content":"Parameters","pos":[10018,10028]},{"content":"[in]","pos":[10032,10036]},{"content":"The command ID of the new button.","pos":[10047,10080]},{"content":"[in]","pos":[10087,10091]},{"content":"The image index of the image associated with the new button.","pos":[10104,10164]},{"content":"[in]","pos":[10171,10175]},{"content":"The style of the new button.","pos":[10189,10217]},{"content":"[in]","pos":[10224,10228]},{"content":"The width, in pixels, of the new button.","pos":[10241,10281]},{"content":"Remarks","pos":[10291,10298]},{"content":"The default width is 150 pixels.","pos":[10302,10334]},{"pos":[10341,10452],"content":"For a list of toolbar button styles see <bpt id=\"p1\">[</bpt>ToolBar Control Styles<ept id=\"p1\">](../../mfc/reference/toolbar-control-styles.md)</ept>","source":"For a list of toolbar button styles see [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md)"},{"pos":[10515,10551],"content":"CMFCToolBarComboBoxButton::ClearData"},{"content":"Deletes user-defined data.","pos":[10555,10581]},{"content":"Remarks","pos":[10632,10639]},{"content":"By default this method does nothing.","pos":[10643,10679]},{"content":"Override this method in a derived class if you want to delete any user-defined data.","pos":[10680,10764]},{"pos":[10825,10859],"content":"CMFCToolBarComboBoxButton::Compare"},{"content":"Compares two strings.","pos":[10863,10884]},{"content":"Parameters","pos":[10979,10989]},{"content":"[in]","pos":[10993,10997]},{"content":"The first string to compare.","pos":[11013,11041]},{"content":"[in]","pos":[11048,11052]},{"content":"The second string to compare.","pos":[11068,11097]},{"content":"Return Value","pos":[11107,11119]},{"content":"A value that indicates the case-sensitive lexicographic relationship between the strings.","pos":[11123,11212]},{"content":"The following table lists the possible values:","pos":[11213,11259]},{"content":"Value","pos":[11266,11271]},{"content":"Description","pos":[11272,11283]},{"content":"0","pos":[11324,11325]},{"content":"The first string is less than the second.","pos":[11326,11367]},{"content":"0","pos":[11372,11373]},{"content":"The first string equals the second.","pos":[11374,11409]},{"content":"&gt;0","pos":[11414,11416],"source":">0"},{"content":"The first string is greater than the second.","pos":[11417,11461]},{"content":"Remarks","pos":[11472,11479]},{"content":"Override this method to change how items are sorted in the list box.","pos":[11483,11551]},{"content":"The comparison is case-sensitive.","pos":[11558,11591]},{"pos":[11598,11700],"content":"This method is called only from the <bpt id=\"p1\">[</bpt>AddSortedItem<ept id=\"p1\">](#cmfctoolbarcomboboxbutton__addsorteditem)</ept> method.","source":"This method is called only from the [AddSortedItem](#cmfctoolbarcomboboxbutton__addsorteditem) method."},{"pos":[11762,11797],"content":"CMFCToolBarComboBoxButton::CopyFrom"},{"pos":[11801,11885],"content":"Copies the state of the specified <ph id=\"ph1\">`CMFCToolBarComboBoxButton`</ph> to the current object.","source":"Copies the state of the specified `CMFCToolBarComboBoxButton` to the current object."},{"content":"Parameters","pos":[11963,11973]},{"content":"[in]","pos":[11977,11981]},{"content":"The source <ph id=\"ph1\">`CMFCToolBarComboBoxButton`</ph> object.","pos":[11991,12037],"source":" The source `CMFCToolBarComboBoxButton` object."},{"pos":[12102,12140],"content":"CMFCToolBarComboBoxButton::CreateCombo"},{"content":"Creates a new combo box for the combo box button.","pos":[12144,12193]},{"content":"Parameters","pos":[12298,12308]},{"content":"[in]","pos":[12312,12316]},{"content":"A pointer to the parent window of the button.","pos":[12333,12378]},{"content":"[in]","pos":[12385,12389]},{"content":"Bounding rectangle of the combo box.","pos":[12400,12436]},{"content":"Return Value","pos":[12446,12458]},{"pos":[12462,12541],"content":"A pointer to the new combo box if the method was successful; otherwise, <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the new combo box if the method was successful; otherwise, `NULL`."},{"pos":[12605,12642],"content":"CMFCToolBarComboBoxButton::CreateEdit"},{"content":"Creates a new edit box for the combo box button.","pos":[12646,12694]},{"content":"Parameters","pos":[12837,12847]},{"content":"[in]","pos":[12851,12855]},{"content":"A pointer to the parent window of the button.","pos":[12872,12917]},{"content":"[in]","pos":[12924,12928]},{"content":"Bounding rectangle of the new edit box.","pos":[12939,12978]},{"content":"[in]","pos":[12985,12989]},{"content":"Control style of the new edit box.","pos":[13007,13041]},{"content":"Return Value","pos":[13051,13063]},{"pos":[13067,13145],"content":"A pointer to the new edit box if the method was successful; otherwise, <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the new edit box if the method was successful; otherwise, `NULL`."},{"content":"Remarks","pos":[13155,13162]},{"content":"The framework calls this method when it creates a new edit box for a combo box button.","pos":[13166,13252]},{"content":"Override this method to change how <bpt id=\"p1\">[</bpt>CMFCToolBarComboBoxEdit<ept id=\"p1\">](../../mfc/reference/cmfctoolbarcomboboxedit-class.md)</ept> is created.","pos":[13253,13379],"source":" Override this method to change how [CMFCToolBarComboBoxEdit](../../mfc/reference/cmfctoolbarcomboboxedit-class.md) is created."},{"pos":[13443,13480],"content":"CMFCToolBarComboBoxButton::DeleteItem"},{"content":"Deletes a specified item from the list box.","pos":[13484,13527]},{"content":"Parameters","pos":[13657,13667]},{"content":"[in]","pos":[13671,13675]},{"content":"The zero-based index of the item to be deleted.","pos":[13688,13735]},{"content":"[in]","pos":[13742,13746]},{"content":"The data associated with the item to be deleted.","pos":[13759,13807]},{"content":"[in]","pos":[13814,13818]},{"content":"The text of the item to be deleted.","pos":[13833,13868]},{"content":"If there are multiple items with the same text, the first item is deleted.","pos":[13869,13943]},{"content":"Return Value","pos":[13953,13965]},{"pos":[13976,14045],"content":"if the item was located and successfully deleted; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the item was located and successfully deleted; otherwise, `FALSE`."},{"content":"Remarks","pos":[14055,14062]},{"pos":[14129,14169],"content":"CMFCToolBarComboBoxButton::DuplicateData"},{"content":"Duplicates user-defined data.","pos":[14173,14202]},{"content":"Remarks","pos":[14257,14264]},{"content":"By default this method does nothing.","pos":[14268,14304]},{"content":"Override this method in a derived class if you want to copy any user-defined data.","pos":[14305,14387]},{"pos":[14453,14492],"content":"CMFCToolBarComboBoxButton::EnableWindow"},{"content":"Enables or disables the edit and combo boxes.","pos":[14496,14541]},{"content":"Parameters","pos":[14614,14624]},{"content":"[in]","pos":[14628,14632]},{"content":"to enable the edit and combo boxes; <ph id=\"ph1\">`FALSE`</ph> to disable the edit and combo boxes.","pos":[14653,14733],"source":" to enable the edit and combo boxes; `FALSE` to disable the edit and combo boxes."},{"content":"Remarks","pos":[14743,14750]},{"content":"When disabled, the controls cannot become active and cannot accept user input.","pos":[14754,14832]},{"pos":[14904,14949],"content":"CMFCToolBarComboBoxButton::ExportToMenuButton"},{"content":"Copies a string from the application string table to the specified menu using the combo box button command ID.","pos":[14953,15063]},{"content":"Parameters","pos":[15165,15175]},{"content":"[out]","pos":[15179,15184]},{"content":"Reference to a menu button.","pos":[15201,15228]},{"content":"Return Value","pos":[15238,15250]},{"pos":[15254,15268],"content":"Always <ph id=\"ph1\">`TRUE`</ph>.","source":"Always `TRUE`."},{"pos":[15330,15365],"content":"CMFCToolBarComboBoxButton::FindItem"},{"content":"Returns the index of the first item in the list box that contains a specified string.","pos":[15369,15454]},{"content":"Parameters","pos":[15520,15530]},{"content":"[in]","pos":[15534,15538]},{"content":"The text for which to search in the list box.","pos":[15553,15598]},{"content":"Return Value","pos":[15608,15620]},{"pos":[15624,15684],"content":"The index of the item; or <ph id=\"ph1\">`CB_ERR`</ph> if the item is not found.","source":"The index of the item; or `CB_ERR` if the item is not found."},{"content":"Remarks","pos":[15694,15701]},{"pos":[15763,15798],"content":"CMFCToolBarComboBoxButton::GetByCmd"},{"content":"Gets a pointer to the combo box button that has a specified command ID.","pos":[15802,15873]},{"content":"Parameters","pos":[15986,15996]},{"content":"[in]","pos":[16000,16004]},{"content":"The command ID of a combo box button.","pos":[16016,16053]},{"content":"[in]","pos":[16060,16064]},{"content":"to search only focused buttons; <ph id=\"ph1\">`FALSE`</ph> to search all buttons.","pos":[16086,16148],"source":" to search only focused buttons; `FALSE` to search all buttons."},{"content":"Return Value","pos":[16158,16170]},{"pos":[16174,16244],"content":"A pointer to a combo box button; or <ph id=\"ph1\">`NULL`</ph> if the button is not found.","source":"A pointer to a combo box button; or `NULL` if the button is not found."},{"content":"Remarks","pos":[16254,16261]},{"pos":[16326,16364],"content":"CMFCToolBarComboBoxButton::GetComboBox"},{"content":"Returns a pointer to the combo box in the combo box button.","pos":[16368,16427]},{"content":"Return Value","pos":[16487,16499]},{"pos":[16503,16632],"content":"A pointer to the <bpt id=\"p1\">[</bpt>CComboBox Class<ept id=\"p1\">](../../mfc/reference/ccombobox-class.md)</ept> object if the method was successful; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the [CComboBox Class](../../mfc/reference/ccombobox-class.md) object if the method was successful; otherwise `NULL`."},{"content":"Remarks","pos":[16642,16649]},{"pos":[16719,16762],"content":"CMFCToolBarComboBoxButton::GetContextMenuID"},{"content":"Gets the shortcut menu resource ID for the combo box button.","pos":[16766,16826]},{"content":"Return Value","pos":[16876,16888]},{"content":"The shortcut menu resource ID.","pos":[16892,16922]},{"pos":[16984,17019],"content":"CMFCToolBarComboBoxButton::GetCount"},{"content":"Returns the number of items in the list box.","pos":[17023,17067]},{"content":"Return Value","pos":[17121,17133]},{"content":"The number of items in the list box.","pos":[17137,17173]},{"content":"Remarks","pos":[17183,17190]},{"pos":[17255,17293],"content":"CMFCToolBarComboBoxButton::GetCountAll"},{"content":"Gets the number of items in the list box of a combo box button that has a specified command ID.","pos":[17297,17392]},{"content":"Parameters","pos":[17453,17463]},{"content":"[in]","pos":[17467,17471]},{"content":"The command ID of a combo box button.","pos":[17483,17520]},{"content":"Return Value","pos":[17530,17542]},{"pos":[17546,17640],"content":"The number of items in the list box; otherwise, <ph id=\"ph1\">`CB_ERR`</ph> if the combo box button is not found.","source":"The number of items in the list box; otherwise, `CB_ERR` if the combo box button is not found."},{"content":"Remarks","pos":[17650,17657]},{"pos":[17720,17756],"content":"CMFCToolBarComboBoxButton::GetCurSel"},{"content":"Gets the index of the currently selected item in the list box.","pos":[17760,17822]},{"content":"Return Value","pos":[17873,17885]},{"pos":[17889,17982],"content":"The index of the currently selected item in the list box; or <ph id=\"ph1\">`CB_ERR`</ph> if no item is selected.","source":"The index of the currently selected item in the list box; or `CB_ERR` if no item is selected."},{"content":"Remarks","pos":[17992,17999]},{"content":"The list box index is zero-based.","pos":[18003,18036]},{"pos":[18102,18141],"content":"CMFCToolBarComboBoxButton::GetCurSelAll"},{"content":"Returns the index of the currently selected item in the list box of a combo box button that has a specified command ID.","pos":[18145,18264]},{"content":"Parameters","pos":[18326,18336]},{"content":"[in]","pos":[18340,18344]},{"content":"The command ID of a combo box button.","pos":[18356,18393]},{"content":"Return Value","pos":[18403,18415]},{"pos":[18419,18555],"content":"The index of the currently selected item in the list box; otherwise, <ph id=\"ph1\">`CB_ERR`</ph> if no item is selected or a combo box button is not found.","source":"The index of the currently selected item in the list box; otherwise, `CB_ERR` if no item is selected or a combo box button is not found."},{"content":"Remarks","pos":[18565,18572]},{"content":"The list box index is zero-based.","pos":[18576,18609]},{"pos":[18674,18712],"content":"CMFCToolBarComboBoxButton::GetEditCtrl"},{"content":"Returns a pointer to the edit box in the combo box button.","pos":[18716,18774]},{"content":"Return Value","pos":[18829,18841]},{"pos":[18845,18919],"content":"A pointer to the edit box if the method was successful; otherwise, <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the edit box if the method was successful; otherwise, `NULL`."},{"content":"Remarks","pos":[18929,18936]},{"pos":[18997,19031],"content":"CMFCToolBarComboBoxButton::GetHwnd"},{"content":"Returns the window handle for the combo box.","pos":[19035,19079]},{"content":"Return Value","pos":[19128,19140]},{"pos":[19144,19229],"content":"The window handle, or <ph id=\"ph1\">`NULL`</ph> if the combo box is not associated with a window object.","source":"The window handle, or `NULL` if the combo box is not associated with a window object."},{"pos":[19290,19324],"content":"CMFCToolBarComboBoxButton::GetItem"},{"content":"Returns the string associated with an item at a specified index in the list box.","pos":[19328,19408]},{"content":"Parameters","pos":[19474,19484]},{"content":"[in]","pos":[19488,19492]},{"content":"Zero-based index of an item in the list box.","pos":[19505,19549]},{"content":"Return Value","pos":[19559,19571]},{"pos":[19575,19765],"content":"A pointer to the string that is associated with the item; otherwise, <ph id=\"ph1\">`NULL`</ph> if the index parameter is invalid, or if the index parameter is -1 and there is no selected item in the combo box.","source":"A pointer to the string that is associated with the item; otherwise, `NULL` if the index parameter is invalid, or if the index parameter is -1 and there is no selected item in the combo box."},{"content":"Remarks","pos":[19775,19782]},{"content":"An index parameter of -1 returns the string of the item that is currently selected.","pos":[19786,19869]},{"pos":[19933,19970],"content":"CMFCToolBarComboBoxButton::GetItemAll"},{"content":"Returns the string associated with an item at a specified index in the list box of a combo box button that has a specified command ID.","pos":[19974,20108]},{"content":"Parameters","pos":[20198,20208]},{"content":"[in]","pos":[20212,20216]},{"content":"The command ID of a combo box button.","pos":[20228,20265]},{"content":"[in]","pos":[20272,20276]},{"content":"The zero-based index of an item in the list box.","pos":[20289,20337]},{"content":"Return Value","pos":[20347,20359]},{"pos":[20363,20565],"content":"A pointer to the item's string if the method was successful; otherwise, <ph id=\"ph1\">`NULL`</ph> if the index is invalid, a combo box button is not found, or if index is -1 and there is no selected item in the combo box.","source":"A pointer to the item's string if the method was successful; otherwise, `NULL` if the index is invalid, a combo box button is not found, or if index is -1 and there is no selected item in the combo box."},{"content":"Remarks","pos":[20575,20582]},{"content":"An index value of -1 returns the string of the item that is currently selected.","pos":[20586,20665]},{"pos":[20730,20768],"content":"CMFCToolBarComboBoxButton::GetItemData"},{"content":"Returns the data associated with an item at a specific index in the list box.","pos":[20772,20849]},{"content":"Parameters","pos":[20921,20931]},{"content":"[in]","pos":[20935,20939]},{"content":"The zero-based index of an item in the list box.","pos":[20952,21000]},{"content":"Return Value","pos":[21010,21022]},{"content":"The data associated with the item; or 0 if the item does not exist.","pos":[21026,21093]},{"content":"Remarks","pos":[21103,21110]},{"content":"An index parameter of -1 returns the data associated with the currently selected item.","pos":[21114,21200]},{"pos":[21268,21309],"content":"CMFCToolBarComboBoxButton::GetItemDataAll"},{"content":"Returns the data associated with an item at a specific index in the list box of a combo box button that has a specific command ID.","pos":[21313,21443]},{"content":"Parameters","pos":[21539,21549]},{"content":"[in]","pos":[21553,21557]},{"content":"The command ID of a combo box button.","pos":[21569,21606]},{"content":"[in]","pos":[21613,21617]},{"content":"The zero-based index of an item in the list box.","pos":[21630,21678]},{"content":"Return Value","pos":[21688,21700]},{"content":"The data associated with the item if the method was successful; otherwise, 0 if the specified index is not valid, or CB_ERR if the combo box button is not found.","pos":[21704,21865]},{"content":"Remarks","pos":[21875,21882]},{"content":"An index parameter of -1 returns the data associated with the currently selected item.","pos":[21886,21972]},{"pos":[22043,22087],"content":"CMFCToolBarComboBoxButton::GetItemDataPtrAll"},{"content":"Returns the data associated with an item at a specific index in the list box of a combo box button that has a specific command ID.","pos":[22091,22221]},{"content":"This data is returned as a pointer.","pos":[22222,22257]},{"content":"Parameters","pos":[22352,22362]},{"content":"[in]","pos":[22366,22370]},{"content":"The command ID of the combo box button.","pos":[22382,22421]},{"content":"[in]","pos":[22428,22432]},{"content":"The zero-based index of an item in the list box.","pos":[22445,22493]},{"content":"Return Value","pos":[22503,22515]},{"pos":[22519,22665],"content":"A pointer associated with the item if the method was successful; otherwise, -1 if an error occurs, or <ph id=\"ph1\">`NULL`</ph> if the combo box button is not found.","source":"A pointer associated with the item if the method was successful; otherwise, -1 if an error occurs, or `NULL` if the combo box button is not found."},{"content":"Remarks","pos":[22675,22682]},{"pos":[22745,22781],"content":"CMFCToolBarComboBoxButton::GetPrompt"},{"content":"Returns the prompt string for the combo box button.","pos":[22785,22836]},{"content":"Return Value","pos":[22899,22911]},{"content":"The prompt string.","pos":[22915,22933]},{"content":"Remarks","pos":[22943,22950]},{"content":"This method is currently not implemented.","pos":[22954,22995]},{"pos":[23056,23090],"content":"CMFCToolBarComboBoxButton::GetText"},{"content":"Gets the text in the edit box.","pos":[23094,23124]},{"content":"Return Value","pos":[23177,23189]},{"content":"The text in the edit box.","pos":[23193,23218]},{"content":"Remarks","pos":[23228,23235]},{"pos":[23299,23336],"content":"CMFCToolBarComboBoxButton::GetTextAll"},{"content":"Gets the text in the edit box of a combo box button that has a specified command ID.","pos":[23340,23424]},{"content":"Parameters","pos":[23488,23498]},{"content":"[in]","pos":[23502,23506]},{"content":"The command ID of a specific combo box button.","pos":[23518,23564]},{"content":"Return Value","pos":[23574,23586]},{"pos":[23590,23663],"content":"The text in the edit box if the method was successful; otherwise, <ph id=\"ph1\">`NULL`</ph>.","source":"The text in the edit box if the method was successful; otherwise, `NULL`."},{"content":"Remarks","pos":[23673,23680]},{"pos":[23742,23777],"content":"CMFCToolBarComboBoxButton::HasFocus"},{"content":"Indicates whether the combo box currently has the focus.","pos":[23781,23837]},{"content":"Return Value","pos":[23896,23908]},{"pos":[23919,23980],"content":"if the combo box currently has the focus; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the combo box currently has the focus; otherwise, `FALSE`."},{"content":"Remarks","pos":[23990,23997]},{"pos":[24001,24094],"content":"This method also returns <ph id=\"ph1\">`TRUE`</ph> if any child window of the combo box currently has the focus.","source":"This method also returns `TRUE` if any child window of the combo box currently has the focus."},{"pos":[24160,24199],"content":"CMFCToolBarComboBoxButton::IsCenterVert"},{"content":"Returns the vertical position of combo box buttons in the application.","pos":[24203,24273]},{"content":"Return Value","pos":[24326,24338]},{"pos":[24349,24424],"content":"if the buttons are centered; <ph id=\"ph1\">`FALSE`</ph> if the buttons are aligned at the top.","source":" if the buttons are centered; `FALSE` if the buttons are aligned at the top."},{"content":"Remarks","pos":[24434,24441]},{"pos":[24505,24542],"content":"CMFCToolBarComboBoxButton::IsFlatMode"},{"content":"Returns the flat style appearance of combo box buttons in the application.","pos":[24546,24620]},{"content":"Return Value","pos":[24671,24683]},{"pos":[24694,24747],"content":"if the buttons have a flat style; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the buttons have a flat style; otherwise, `FALSE`."},{"content":"Remarks","pos":[24757,24764]},{"pos":[24768,24815],"content":"The default flat style for combo box buttons is"},{"pos":[24887,24923],"content":"CMFCToolBarComboBoxButton::IsOwnerOf"},{"content":"Indicates whether the specified handle is associated with the combo box button, or one of its children.","pos":[24927,25030]},{"content":"Parameters","pos":[25090,25100]},{"content":"[in]","pos":[25104,25108]},{"content":"A window handle.","pos":[25119,25135]},{"content":"Return Value","pos":[25145,25157]},{"pos":[25168,25265],"content":"if the handle is assocated with the combo box button, or one of its children; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the handle is assocated with the combo box button, or one of its children; otherwise, `FALSE`."},{"pos":[25333,25374],"content":"CMFCToolBarComboBoxButton::IsRibbonButton"},{"content":"Indicates whether the combo box button resides on a ribbon panel.","pos":[25378,25443]},{"content":"Return Value","pos":[25500,25512]},{"pos":[25516,25531],"content":"Always <ph id=\"ph1\">`FALSE`</ph>.","source":"Always `FALSE`."},{"content":"Remarks","pos":[25541,25548]},{"pos":[25552,25670],"content":"By default, this method always returns <ph id=\"ph1\">`FALSE`</ph>, which means the combo box button is never displayed on a ribbon panel.","source":"By default, this method always returns `FALSE`, which means the combo box button is never displayed on a ribbon panel."},{"pos":[25739,25781],"content":"CMFCToolBarComboBoxButton::IsWindowVisible"},{"content":"Returns the visibility state of the combo box button.","pos":[25785,25838]},{"content":"Return Value","pos":[25895,25907]},{"content":"The visibility state of the combo box button.","pos":[25911,25956]},{"pos":[26023,26063],"content":"CMFCToolBarComboBoxButton::NotifyCommand"},{"content":"Indicates whether the combo box button processes the  message.","pos":[26067,26129]},{"content":"Parameters","pos":[26199,26209]},{"content":"[in]","pos":[26213,26217]},{"content":"The notification message that is associated with the command.","pos":[26235,26296]},{"content":"Return Value","pos":[26306,26318]},{"content":"Whether the combo box button processes the  message.","pos":[26322,26374]},{"pos":[26448,26495],"content":"CMFCToolBarComboBoxButton::OnAddToCustomizePage"},{"pos":[26499,26580],"content":"Called by the framework when the button is added to the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box.","source":"Called by the framework when the button is added to the **Customize** dialog box."},{"pos":[26701,26743],"content":"CMFCToolBarComboBoxButton::OnCalculateSize"},{"content":"Called by the framework to calculate the size of the button.","pos":[26747,26807]},{"content":"Parameters","pos":[26927,26937]},{"content":"[in]","pos":[26941,26945]},{"content":"The device context that displays the combo box button.","pos":[26955,27009]},{"content":"[in]","pos":[27016,27020]},{"content":"The default size of the combo box button.","pos":[27038,27079]},{"content":"[in]","pos":[27086,27090]},{"content":"The dock state of the parent toolbar.","pos":[27102,27139]},{"content":"when the toolbar is docked horizontally and <ph id=\"ph1\">`FALSE`</ph> when the toolbar is docked vertically.","pos":[27147,27237],"source":" when the toolbar is docked horizontally and `FALSE` when the toolbar is docked vertically."},{"content":"Return Value","pos":[27247,27259]},{"pos":[27263,27346],"content":"A <ph id=\"ph1\">`SIZE`</ph> structure that contains the dimensions of the combo box button, in pixels.","source":"A `SIZE` structure that contains the dimensions of the combo box button, in pixels."},{"pos":[27417,27461],"content":"CMFCToolBarComboBoxButton::OnChangeParentWnd"},{"content":"Called by the framework when the combo box button is inserted into a new toolbar.","pos":[27465,27546]},{"content":"Parameters","pos":[27621,27631]},{"content":"[in]","pos":[27635,27639]},{"content":"Pointer to the new parent toolbar.","pos":[27656,27690]},{"pos":[27751,27785],"content":"CMFCToolBarComboBoxButton::OnClick"},{"content":"Called by the framework when the user clicks the combo box button.","pos":[27789,27855]},{"content":"Parameters","pos":[27945,27955]},{"content":"[in]","pos":[27959,27963]},{"content":"Pointer to the parent window of the combo box button.","pos":[27974,28027]},{"content":"[in]","pos":[28034,28038]},{"content":"Reserved for use in a derived class.","pos":[28051,28087]},{"content":"Return Value","pos":[28097,28109]},{"pos":[28120,28172],"content":"if the method handles the event; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the method handles the event; otherwise, `FALSE`."},{"pos":[28236,28273],"content":"CMFCToolBarComboBoxButton::OnCtlColor"},{"content":"Called by the framework when the user changes the parent toolbar color to set the combo box button color.","pos":[28277,28382]},{"content":"Parameters","pos":[28471,28481]},{"content":"[in]","pos":[28485,28489]},{"content":"The device context that displays the combo box button.","pos":[28499,28553]},{"content":"[in]","pos":[28560,28564]},{"content":"Unused.","pos":[28580,28587]},{"content":"Return Value","pos":[28597,28609]},{"content":"Handle to the brush that the framework uses to paint the background of the combo box button.","pos":[28613,28705]},{"content":"Remarks","pos":[28715,28722]},{"content":"This method also sets the combo box button text color.","pos":[28726,28780]},{"pos":[28840,28873],"content":"CMFCToolBarComboBoxButton::OnDraw"},{"content":"Called by the framework to draw the combo box button by using the specified styles and options.","pos":[28877,28972]},{"content":"Parameters","pos":[29254,29264]},{"content":"[in]","pos":[29268,29272]},{"content":"The device context that displays the button.","pos":[29282,29326]},{"content":"[in]","pos":[29333,29337]},{"content":"The bounding rectangle of the button.","pos":[29348,29385]},{"content":"[in]","pos":[29392,29396]},{"content":"The collection of images that is associated with the button.","pos":[29410,29470]},{"content":"[in]","pos":[29477,29481]},{"content":"The dock state of the parent toolbar.","pos":[29493,29530]},{"content":"when the toolbar is docked horizontally and <ph id=\"ph1\">`FALSE`</ph> when the toolbar is docked vertically.","pos":[29538,29628],"source":" when the toolbar is docked horizontally and `FALSE` when the toolbar is docked vertically."},{"content":"[in]","pos":[29635,29639]},{"content":"Whether the application is in customization mode.","pos":[29660,29709]},{"content":"[in]","pos":[29716,29720]},{"content":"Whether to draw the combo box button highlighted.","pos":[29737,29786]},{"content":"[in]","pos":[29793,29797]},{"content":"Whether to draw the combo box button with a border.","pos":[29815,29866]},{"content":"[in]","pos":[29873,29877]},{"content":"to draw shaded disabled buttons; <ph id=\"ph1\">`FALSE`</ph> to use the disabled images collection.","pos":[29911,29990],"source":" to draw shaded disabled buttons; `FALSE` to use the disabled images collection."},{"pos":[30065,30113],"content":"CMFCToolBarComboBoxButton::OnDrawOnCustomizeList"},{"pos":[30117,30227],"content":"Called by the framework to draw the combo box button in the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> pane of the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> dialog box.","source":"Called by the framework to draw the combo box button in the **Commands** pane of the **Customize** dialog box."},{"content":"Parameters","pos":[30349,30359]},{"content":"[in]","pos":[30363,30367]},{"content":"The device context that displays the combo box button.","pos":[30377,30431]},{"content":"[in]","pos":[30438,30442]},{"content":"The bounding rectangle of the combo box button.","pos":[30453,30500]},{"content":"[in]","pos":[30507,30511]},{"content":"if the combo box button is selected; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[30534,30590],"source":" if the combo box button is selected; otherwise, `FALSE`."},{"content":"Return Value","pos":[30600,30612]},{"content":"The width, in pixels, of the combo box button.","pos":[30616,30662]},{"pos":[30736,30783],"content":"CMFCToolBarComboBoxButton::OnGlobalFontsChanged"},{"content":"Called by the framework to set the combo box button font when the application font changes.","pos":[30787,30878]},{"pos":[30990,31023],"content":"CMFCToolBarComboBoxButton::OnMove"},{"content":"Called by the framework to change the location of the combo box button when the parent toolbar moves.","pos":[31027,31128]},{"pos":[31226,31259],"content":"CMFCToolBarComboBoxButton::OnShow"},{"content":"Called by the framework when the combo box button is hidden or displayed.","pos":[31263,31336]},{"content":"Parameters","pos":[31394,31404]},{"content":"[in]","pos":[31408,31412]},{"content":"Whether to hide or display the combo box button.","pos":[31424,31472]},{"pos":[31532,31565],"content":"CMFCToolBarComboBoxButton::OnSize"},{"content":"Called by the framework to change the size of the combo box button when the parent toolbar changes size.","pos":[31569,31673]},{"content":"Parameters","pos":[31730,31740]},{"content":"[in]","pos":[31744,31748]},{"content":"The new width of the combo box button.","pos":[31760,31798]},{"pos":[31867,31909],"content":"CMFCToolBarComboBoxButton::OnUpdateToolTip"},{"content":"Called by the framework when the user changes the tool tip for the combo box button.","pos":[31913,31997]},{"content":"Parameters","pos":[32151,32161]},{"content":"[in]","pos":[32165,32169]},{"content":"Pointer to the parent window for the combo box button.","pos":[32186,32240]},{"content":"[in]","pos":[32247,32251]},{"content":"ID of the combo box button.","pos":[32270,32297]},{"content":"[in]","pos":[32304,32308]},{"content":"The tool tip to associate with the combo box button.","pos":[32325,32377]},{"content":"[in]","pos":[32384,32388]},{"content":"The tool tip text.","pos":[32398,32416]},{"content":"Return Value","pos":[32426,32438]},{"pos":[32449,32501],"content":"if the method handles the event; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the method handles the event; otherwise, `FALSE`."},{"pos":[32569,32610],"content":"CMFCToolBarComboBoxButton::RemoveAllItems"},{"content":"Deletes all items from the list and edit boxes.","pos":[32614,32661]},{"content":"Remarks","pos":[32709,32716]},{"content":"Removes all items from the list box and edit control of a combo box.","pos":[32720,32788]},{"pos":[32852,32889],"content":"CMFCToolBarComboBoxButton::SelectItem"},{"content":"Selects an item in the list box.","pos":[32893,32925]},{"content":"Parameters","pos":[33095,33105]},{"content":"[in]","pos":[33109,33113]},{"content":"The zero-based index of an item in the list box.","pos":[33126,33174]},{"content":"[in]","pos":[33181,33185]},{"content":"to notify the combo box button of the selection; otherwise <ph id=\"ph1\">`FALSE`</ph>.","pos":[33206,33273],"source":" to notify the combo box button of the selection; otherwise `FALSE`."},{"content":"[in]","pos":[33280,33284]},{"content":"The data associated with an item in the list box.","pos":[33297,33346]},{"content":"[in]","pos":[33353,33357]},{"content":"The text of an item in the list box.","pos":[33372,33408]},{"content":"Return Value","pos":[33418,33430]},{"pos":[33441,33489],"content":"if the method was successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the method was successful; otherwise `FALSE`."},{"content":"Remarks","pos":[33499,33506]},{"pos":[33573,33613],"content":"CMFCToolBarComboBoxButton::SelectItemAll"},{"content":"Selects an item in the list box of a combo box button that has a specified command ID.","pos":[33617,33703]},{"content":"Parameters","pos":[33932,33942]},{"content":"[in]","pos":[33946,33950]},{"content":"The command ID of the combo box button that contains the list box.","pos":[33962,34028]},{"content":"[in]","pos":[34035,34039]},{"content":"The zero-based index of the item in the list box.","pos":[34052,34101]},{"content":"A value of -1 removes any current selection in the list box and clears the edit box.","pos":[34102,34186]},{"content":"[in]","pos":[34193,34197]},{"content":"The data of an item in the list box.","pos":[34210,34246]},{"content":"[in]","pos":[34253,34257]},{"content":"The text of an item in the list box.","pos":[34272,34308]},{"content":"Return Value","pos":[34318,34330]},{"pos":[34341,34389],"content":"if the method was successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the method was successful; otherwise `FALSE`."},{"content":"Remarks","pos":[34399,34406]},{"pos":[34469,34505],"content":"CMFCToolBarComboBoxButton::Serialize"},{"content":"Reads this object from an archive or writes it to an archive.","pos":[34509,34570]},{"content":"Parameters","pos":[34633,34643]},{"content":"[in, out]","pos":[34647,34656]},{"content":"The <ph id=\"ph1\">`CArchive`</ph> object to serialize.","pos":[34665,34700],"source":" The `CArchive` object to serialize."},{"content":"Remarks","pos":[34710,34717]},{"pos":[34721,34816],"content":"Settings in the <ph id=\"ph1\">`CArchive`</ph> object determine whether this method reads or writes to the archive.","source":"Settings in the `CArchive` object determine whether this method reads or writes to the archive."},{"pos":[34880,34917],"content":"CMFCToolBarComboBoxButton::SetACCData"},{"pos":[34921,35027],"content":"Populates the specified <ph id=\"ph1\">`CAccessibilityData`</ph> object by using accessibility data from the combo box button.","source":"Populates the specified `CAccessibilityData` object by using accessibility data from the combo box button."},{"content":"Parameters","pos":[35129,35139]},{"content":"[in]","pos":[35143,35147]},{"content":"The parent window of the combo box button.","pos":[35161,35203]},{"content":"[out]","pos":[35210,35215]},{"content":"A <ph id=\"ph1\">`CAccessibilityData`</ph> object that receives the accessibility data from the combo box button.","pos":[35226,35319],"source":" A `CAccessibilityData` object that receives the accessibility data from the combo box button."},{"content":"Return Value","pos":[35329,35341]},{"pos":[35352,35400],"content":"if the method was successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the method was successful; otherwise `FALSE`."},{"pos":[35467,35507],"content":"CMFCToolBarComboBoxButton::SetCenterVert"},{"content":"Sets the vertical position of combo box buttons in the application.","pos":[35511,35578]},{"content":"Parameters","pos":[35653,35663]},{"content":"[in]","pos":[35667,35671]},{"content":"to center the combo box button in the toolbar; <ph id=\"ph1\">`FALSE`</ph> to align the combo box button to the top of the toolbar.","pos":[35696,35807],"source":" to center the combo box button in the toolbar; `FALSE` to align the combo box button to the top of the toolbar."},{"content":"Remarks","pos":[35817,35824]},{"content":"By default, combo box buttons are aligned to the top.","pos":[35828,35881]},{"pos":[35951,35994],"content":"CMFCToolBarComboBoxButton::SetContextMenuID"},{"content":"Sets the shortcut menu resource ID for the combo box button.","pos":[35998,36058]},{"content":"Parameters","pos":[36120,36130]},{"content":"[in]","pos":[36134,36138]},{"content":"The shortcut menu resource ID.","pos":[36152,36182]},{"pos":[36253,36297],"content":"CMFCToolBarComboBoxButton::SetDropDownHeight"},{"content":"Sets the height of the list box when it is dropped down.","pos":[36301,36357]},{"content":"Parameters","pos":[36419,36429]},{"content":"[in]","pos":[36433,36437]},{"content":"The height, in pixels, of the list box.","pos":[36451,36490]},{"content":"Remarks","pos":[36500,36507]},{"content":"The default height is 150 pixels.","pos":[36511,36544]},{"pos":[36609,36647],"content":"CMFCToolBarComboBoxButton::SetFlatMode"},{"content":"Sets the flat style appearance of combo box buttons in the application.","pos":[36651,36722]},{"content":"Parameters","pos":[36789,36799]},{"content":"[in]","pos":[36803,36807]},{"content":"for a flat style appearance; otherwise <ph id=\"ph1\">`FALSE`</ph>.","pos":[36826,36873],"source":" for a flat style appearance; otherwise `FALSE`."},{"content":"Remarks","pos":[36883,36890]},{"pos":[36894,36950],"content":"The default flat style for combo box buttons is <ph id=\"ph1\">`FALSE`</ph>.","source":"The default flat style for combo box buttons is `FALSE`."},{"pos":[37012,37047],"content":"CMFCToolBarComboBoxButton::SetStyle"},{"content":"Sets the specified style for the combo box button and redraws the control if it is not disabled.","pos":[37051,37147]},{"content":"Parameters","pos":[37208,37218]},{"content":"[in]","pos":[37222,37226]},{"content":"A bitwise combination (OR) of toolbar styles.","pos":[37239,37284]},{"content":"Remarks","pos":[37294,37301]},{"pos":[37305,37416],"content":"For a list of toolbar button styles see <bpt id=\"p1\">[</bpt>ToolBar Control Styles<ept id=\"p1\">](../../mfc/reference/toolbar-control-styles.md)</ept>","source":"For a list of toolbar button styles see [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md)"},{"pos":[37477,37511],"content":"CMFCToolBarComboBoxButton::SetText"},{"content":"Sets the text in the edit box of the combo box button.","pos":[37515,37569]},{"content":"Parameters","pos":[37626,37636]},{"content":"[in]","pos":[37640,37644]},{"content":"Pointer to a string that that contains the text for the edit box.","pos":[37659,37724]},{"content":"See Also","pos":[37733,37741]},{"content":"Hierarchy Chart","pos":[37746,37761]},{"content":"Classes","pos":[37798,37805]},{"content":"CMFCToolBarButton Class","pos":[37848,37871]},{"content":"CComboBox Class","pos":[37926,37941]},{"content":"CMFCToolBar::ReplaceButton","pos":[37988,38014]},{"content":"Walkthrough: Putting Controls On Toolbars","pos":[38090,38131]}],"content":"---\ntitle: \"CMFCToolBarComboBoxButton Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCToolBarComboBoxButton\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCToolBarComboBoxButton class\"\nms.assetid: 32fa39f7-8e4e-4f0a-a31d-7b540d969a6c\ncaps.latest.revision: 30\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCToolBarComboBoxButton Class\nA toolbar button that contains a combo box control ( [CComboBox Class](../../mfc/reference/ccombobox-class.md)).  \n  \n## Syntax  \n  \n```  \nclass CMFCToolBarComboBoxButton : public CMFCToolBarButton  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarComboBoxButton::CMFCToolBarComboBoxButton](#cmfctoolbarcomboboxbutton__cmfctoolbarcomboboxbutton)|Constructs a `CMFCToolBarComboBoxButton`.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarComboBoxButton::AddItem](#cmfctoolbarcomboboxbutton__additem)|Adds an item to the end of the combo box list.|  \n|[CMFCToolBarComboBoxButton::AddSortedItem](#cmfctoolbarcomboboxbutton__addsorteditem)|Adds an item to the combo box list. The order of items in the list is specified by `Compare`.|  \n|[CMFCToolBarComboBoxButton::Compare](#cmfctoolbarcomboboxbutton__compare)|Compares two items. Called to sort items that `AddSortedItems` adds to the combo box list.|  \n|[CMFCToolBarComboBoxButton::CreateEdit](#cmfctoolbarcomboboxbutton__createedit)|Creates a new edit control for the combo box button.|  \n|[CMFCToolBarComboBoxButton::DeleteItem](#cmfctoolbarcomboboxbutton__deleteitem)|Deletes an item from the combo box list.|  \n|[CMFCToolBarComboBoxButton::FindItem](#cmfctoolbarcomboboxbutton__finditem)|Returns the index of the item that contains a specified string.|  \n|[CMFCToolBarComboBoxButton::GetByCmd](#cmfctoolbarcomboboxbutton__getbycmd)|Returns a pointer to the combo box button with a specified command ID.|  \n|[CMFCToolBarComboBoxButton::GetComboBox](#cmfctoolbarcomboboxbutton__getcombobox)|Returns a pointer to the combo box control that is embedded in the combo box button.|  \n|[CMFCToolBarComboBoxButton::GetCount](#cmfctoolbarcomboboxbutton__getcount)|Returns the number of items in the combo box list.|  \n|[CMFCToolBarComboBoxButton::GetCountAll](#cmfctoolbarcomboboxbutton__getcountall)|Finds the combo box button that has a specified command ID. Returns the number of items in the combo box list of that button.|  \n|[CMFCToolBarComboBoxButton::GetCurSel](#cmfctoolbarcomboboxbutton__getcursel)|Returns the index of the selected item in the combo box list.|  \n|[CMFCToolBarComboBoxButton::GetCurSelAll](#cmfctoolbarcomboboxbutton__getcurselall)|Finds the combo box button that has a specified command ID, and returns the index of the selected item in the combo box list of that button.|  \n|[CMFCToolBarComboBoxButton::GetEditCtrl](#cmfctoolbarcomboboxbutton__geteditctrl)|Returns a pointer to the edit control that is embedded in the combo box button.|  \n|[CMFCToolBarComboBoxButton::GetItem](#cmfctoolbarcomboboxbutton__getitem)|Returns the string that is associated with a specified index in the combo box list.|  \n|[CMFCToolBarComboBoxButton::GetItemAll](#cmfctoolbarcomboboxbutton__getitemall)|Finds the combo box button that has a specified command ID, and returns the string that is associated with an index in the combo box list of that button.|  \n|[CMFCToolBarComboBoxButton::GetItemData](#cmfctoolbarcomboboxbutton__getitemdata)|Returns the 32-bit value that is associated with a specified index in the combo box list.|  \n|[CMFCToolBarComboBoxButton::GetItemDataAll](#cmfctoolbarcomboboxbutton__getitemdataall)|Finds the combo box button that has a specified command ID, and returns the 32-bit value that is associated with an index in the combo box list of that button.|  \n|[CMFCToolBarComboBoxButton::GetItemDataPtrAll](#cmfctoolbarcomboboxbutton__getitemdataptrall)|Finds the combo box button that has a specified command ID. Retrieves the 32-bit value that is associated an index in the combo box list of that button, and returns the 32-bit value as a pointer.|  \n|[CMFCToolBarComboBoxButton::GetText](#cmfctoolbarcomboboxbutton__gettext)|Returns the text from the edit control of the combo box.|  \n|[CMFCToolBarComboBoxButton::GetTextAll](#cmfctoolbarcomboboxbutton__gettextall)|Finds the combo box button that has a specified command ID, and returns the text from edit control of that button.|  \n|[CMFCToolBarComboBoxButton::IsCenterVert](#cmfctoolbarcomboboxbutton__iscentervert)|Determines whether combo box buttons in the application are centered or aligned with the top of the toolbar.|  \n|[CMFCToolBarComboBoxButton::IsFlatMode](#cmfctoolbarcomboboxbutton__isflatmode)|Determines whether combo box buttons in the application have a flat appearance.|  \n|[CMFCToolBarComboBoxButton::RemoveAllItems](#cmfctoolbarcomboboxbutton__removeallitems)|Removes all items from the list box and edit control of the combo box.|  \n|[CMFCToolBarComboBoxButton::SelectItem](#cmfctoolbarcomboboxbutton__selectitem)|Selects an item in the combo box according to its index, 32-bit value, or string, and notifies the combo box control about the selection.|  \n|[CMFCToolBarComboBoxButton::SelectItemAll](#cmfctoolbarcomboboxbutton__selectitemall)|Finds the combo box button that has a specified command ID. Calls `SelectItem` to select an item in the combo box of that button according to its string, index, or 32-bit value.|  \n|[CMFCToolBarComboBoxButton::SetCenterVert](#cmfctoolbarcomboboxbutton__setcentervert)|Specifies whether combo box buttons in the application are centered vertically or aligned with the top of the toolbar.|  \n|[CMFCToolBarComboBoxButton::SetDropDownHeight](#cmfctoolbarcomboboxbutton__setdropdownheight)|Sets the height of the drop-down list box.|  \n|[CMFCToolBarComboBoxButton::SetFlatMode](#cmfctoolbarcomboboxbutton__setflatmode)|Specifies whether combo box buttons in the application have a flat appearance.|  \n  \n## Remarks  \n To add a combo box button to a toolbar, follow these steps:  \n  \n 1. Reserve a dummy resource ID for the button in the parent toolbar resource.  \n  \n 2. Construct a `CMFCToolBarComboBoxButton` object.  \n  \n 3. In the message handler that processes the `AFX_WM_RESETTOOLBAR` message, replace the dummy button with the new combo box button by using [CMFCToolBar::ReplaceButton](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__replacebutton).  \n  \n For more information, see [Walkthrough: Putting Controls On Toolbars](../../mfc/walkthrough-putting-controls-on-toolbars.md). For an example of a combo box toolbar button, see the example project VisualStudioDemo.  \n  \n## Example  \n The following example demonstrates how to use various methods in the `CMFCToolBarComboBoxButton` class. The example shows how to enable the edit and combo boxes, set the vertical position of combo box buttons in the application, set the height of the list box when it is dropped down, set the flat style appearance of combo box buttons in the application, and set the text in the edit box of the combo box button. This code snippet is part of the [Visual Studio Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_VisualStudioDemo#36](../../mfc/codesnippet/cpp/cmfctoolbarcomboboxbutton-class_1.cpp)]  \n[!code-cpp[NVC_MFC_VisualStudioDemo#37](../../mfc/codesnippet/cpp/cmfctoolbarcomboboxbutton-class_2.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md)  \n  \n [CMFCToolBarComboBoxButton](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md)  \n  \n## Requirements  \n **Header:** afxtoolbarcomboboxbutton.h  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__additem\"></a>  CMFCToolBarComboBoxButton::AddItem  \n Appends a unique item to the list box.  \n  \n```  \nvirtual INT_PTR AddItem(\n    LPCTSTR lpszItem,  \n    DWORD_PTR dwData=0);\n```  \n  \n### Parameters  \n [in] `lpszItem`  \n The text of the item to add to the list box.  \n  \n [in] `dwData`  \n The data associated with the item to add to the list box.  \n  \n### Return Value  \n The index of the last item in the list box.  \n  \n### Remarks  \n Do not use this method when the list box style is sorted.  \n  \n If the item text is already in the list box, the new data is stored with the existing item. The search for the item is case sensitive.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__addsorteditem\"></a>  CMFCToolBarComboBoxButton::AddSortedItem  \n Adds an item to the list box in the order that is defined by the [Compare](#cmfctoolbarcomboboxbutton__compare) method.  \n  \n```  \nvirtual INT_PTR AddSortedItem(\n    LPCTSTR lpszItem,  \n    DWORD_PTR dwData=0);\n```  \n  \n### Parameters  \n [in] `lpszItem`  \n The text of the item to add to the list box.  \n  \n [in] `dwData`  \n The data associated with the item to add to the list box.  \n  \n### Return Value  \n Index of the item that was added to the list box.  \n  \n### Remarks  \n Use this function to add items to the list box in a specific order.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__canbestretched\"></a>  CMFCToolBarComboBoxButton::CanBeStretched  \n Indicates whether the combo box button size can change.  \n  \n```  \nvirtual BOOL CanBeStretched() const;\n\n \n```  \n  \n### Return Value  \n Returns `TRUE`.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__cmfctoolbarcomboboxbutton\"></a>  CMFCToolBarComboBoxButton::CMFCToolBarComboBoxButton  \n Constructs a [CMFCToolBarComboBoxButton](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md) object.  \n  \n```  \nCMFCToolBarComboBoxButton(\n    UINT uiID,  \n    int iImage,  \n    DWORD dwStyle=CBS_DROPDOWNLIST,  \n    int iWidth=0);\n```  \n  \n### Parameters  \n [in] `uiID`  \n The command ID of the new button.  \n  \n [in] `iImage`  \n The image index of the image associated with the new button.  \n  \n [in] `dwStyle`  \n The style of the new button.  \n  \n [in] `iWidth`  \n The width, in pixels, of the new button.  \n  \n### Remarks  \n The default width is 150 pixels.  \n  \n For a list of toolbar button styles see [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md)  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__cleardata\"></a>  CMFCToolBarComboBoxButton::ClearData  \n Deletes user-defined data.  \n  \n```  \nvirtual void ClearData();\n```  \n  \n### Remarks  \n By default this method does nothing. Override this method in a derived class if you want to delete any user-defined data.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__compare\"></a>  CMFCToolBarComboBoxButton::Compare  \n Compares two strings.  \n  \n```  \nvirtual int Compare(\n    LPCTSTR lpszItem1,  \n    LPCTSTR lpszItem2);\n```  \n  \n### Parameters  \n [in] `lpszItem1`  \n The first string to compare.  \n  \n [in] `lpszItem2`  \n The second string to compare.  \n  \n### Return Value  \n A value that indicates the case-sensitive lexicographic relationship between the strings. The following table lists the possible values:  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|\\<0|The first string is less than the second.|  \n|0|The first string equals the second.|  \n|>0|The first string is greater than the second.|  \n  \n### Remarks  \n Override this method to change how items are sorted in the list box.  \n  \n The comparison is case-sensitive.  \n  \n This method is called only from the [AddSortedItem](#cmfctoolbarcomboboxbutton__addsorteditem) method.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__copyfrom\"></a>  CMFCToolBarComboBoxButton::CopyFrom  \n Copies the state of the specified `CMFCToolBarComboBoxButton` to the current object.  \n  \n```  \nvirtual void CopyFrom(const CMFCToolBarButton& src);\n```  \n  \n### Parameters  \n [in] `src`  \n The source `CMFCToolBarComboBoxButton` object.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__createcombo\"></a>  CMFCToolBarComboBoxButton::CreateCombo  \n Creates a new combo box for the combo box button.  \n  \n```  \nvirtual CComboBox* CreateCombo(\n    CWnd* pWndParent,  \n    const CRect& rect);\n```  \n  \n### Parameters  \n [in] `pWndParent`  \n A pointer to the parent window of the button.  \n  \n [in] `rect`  \n Bounding rectangle of the combo box.  \n  \n### Return Value  \n A pointer to the new combo box if the method was successful; otherwise, `NULL`.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__createedit\"></a>  CMFCToolBarComboBoxButton::CreateEdit  \n Creates a new edit box for the combo box button.  \n  \n```  \nvirtual CMFCToolBarComboBoxEdit* CreateEdit(\n    CWnd* pWndParent,  \n    const CRect& rect,  \n    DWORD dwEditStyle);\n```  \n  \n### Parameters  \n [in] `pWndParent`  \n A pointer to the parent window of the button.  \n  \n [in] `rect`  \n Bounding rectangle of the new edit box.  \n  \n [in] `dwEditStyle`  \n Control style of the new edit box.  \n  \n### Return Value  \n A pointer to the new edit box if the method was successful; otherwise, `NULL`.  \n  \n### Remarks  \n The framework calls this method when it creates a new edit box for a combo box button. Override this method to change how [CMFCToolBarComboBoxEdit](../../mfc/reference/cmfctoolbarcomboboxedit-class.md) is created.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__deleteitem\"></a>  CMFCToolBarComboBoxButton::DeleteItem  \n Deletes a specified item from the list box.  \n  \n```  \nBOOL DeleteItem(int iIndex);\n\n \nBOOL DeleteItem(DWORD_PTR dwData);\n\n \nBOOL DeleteItem(LPCTSTR lpszText);\n```  \n  \n### Parameters  \n [in] `iIndex`  \n The zero-based index of the item to be deleted.  \n  \n [in] `dwData`  \n The data associated with the item to be deleted.  \n  \n [in] `lpszText`  \n The text of the item to be deleted. If there are multiple items with the same text, the first item is deleted.  \n  \n### Return Value  \n `TRUE` if the item was located and successfully deleted; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__duplicatedata\"></a>  CMFCToolBarComboBoxButton::DuplicateData  \n Duplicates user-defined data.  \n  \n```  \nvirtual void DuplicateData();\n```  \n  \n### Remarks  \n By default this method does nothing. Override this method in a derived class if you want to copy any user-defined data.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__enablewindow\"></a>  CMFCToolBarComboBoxButton::EnableWindow  \n Enables or disables the edit and combo boxes.  \n  \n```  \nvirtual void EnableWindow(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable the edit and combo boxes; `FALSE` to disable the edit and combo boxes.  \n  \n### Remarks  \n When disabled, the controls cannot become active and cannot accept user input.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__exporttomenubutton\"></a>  CMFCToolBarComboBoxButton::ExportToMenuButton  \n Copies a string from the application string table to the specified menu using the combo box button command ID.  \n  \n```  \nvirtual BOOL ExportToMenuButton(CMFCToolBarMenuButton& menuButton) const;\n\n \n```  \n  \n### Parameters  \n [out] `menuButton`  \n Reference to a menu button.  \n  \n### Return Value  \n Always `TRUE`.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__finditem\"></a>  CMFCToolBarComboBoxButton::FindItem  \n Returns the index of the first item in the list box that contains a specified string.  \n  \n```  \nint FindItem(LPCTSTR lpszText) const;\n\n \n```  \n  \n### Parameters  \n [in] `lpszText`  \n The text for which to search in the list box.  \n  \n### Return Value  \n The index of the item; or `CB_ERR` if the item is not found.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__getbycmd\"></a>  CMFCToolBarComboBoxButton::GetByCmd  \n Gets a pointer to the combo box button that has a specified command ID.  \n  \n```  \nstatic CMFCToolBarComboBoxButton* GetByCmd(\n    UINT uiCmd,  \n    BOOL bIsFocus=FALSE);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The command ID of a combo box button.  \n  \n [in] `bIsFocus`  \n `TRUE` to search only focused buttons; `FALSE` to search all buttons.  \n  \n### Return Value  \n A pointer to a combo box button; or `NULL` if the button is not found.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__getcombobox\"></a>  CMFCToolBarComboBoxButton::GetComboBox  \n Returns a pointer to the combo box in the combo box button.  \n  \n```  \nCComboBox* GetComboBox() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the [CComboBox Class](../../mfc/reference/ccombobox-class.md) object if the method was successful; otherwise `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__getcontextmenuid\"></a>  CMFCToolBarComboBoxButton::GetContextMenuID  \n Gets the shortcut menu resource ID for the combo box button.  \n  \n```  \nUINT GetContextMenuID();\n```  \n  \n### Return Value  \n The shortcut menu resource ID.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__getcount\"></a>  CMFCToolBarComboBoxButton::GetCount  \n Returns the number of items in the list box.  \n  \n```  \nINT_PTR GetCount() const;\n\n \n```  \n  \n### Return Value  \n The number of items in the list box.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__getcountall\"></a>  CMFCToolBarComboBoxButton::GetCountAll  \n Gets the number of items in the list box of a combo box button that has a specified command ID.  \n  \n```  \nstatic int GetCountAll(UINT uiCmd);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The command ID of a combo box button.  \n  \n### Return Value  \n The number of items in the list box; otherwise, `CB_ERR` if the combo box button is not found.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__getcursel\"></a>  CMFCToolBarComboBoxButton::GetCurSel  \n Gets the index of the currently selected item in the list box.  \n  \n```  \nint GetCurSel() const;\n\n \n```  \n  \n### Return Value  \n The index of the currently selected item in the list box; or `CB_ERR` if no item is selected.  \n  \n### Remarks  \n The list box index is zero-based.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__getcurselall\"></a>  CMFCToolBarComboBoxButton::GetCurSelAll  \n Returns the index of the currently selected item in the list box of a combo box button that has a specified command ID.  \n  \n```  \nstatic int GetCurSelAll(UINT uiCmd);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The command ID of a combo box button.  \n  \n### Return Value  \n The index of the currently selected item in the list box; otherwise, `CB_ERR` if no item is selected or a combo box button is not found.  \n  \n### Remarks  \n The list box index is zero-based.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__geteditctrl\"></a>  CMFCToolBarComboBoxButton::GetEditCtrl  \n Returns a pointer to the edit box in the combo box button.  \n  \n```  \nvirtual CEdit* GetEditCtrl();\n```  \n  \n### Return Value  \n A pointer to the edit box if the method was successful; otherwise, `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__gethwnd\"></a>  CMFCToolBarComboBoxButton::GetHwnd  \n Returns the window handle for the combo box.  \n  \n```  \nvirtual HWND GetHwnd();\n```  \n  \n### Return Value  \n The window handle, or `NULL` if the combo box is not associated with a window object.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__getitem\"></a>  CMFCToolBarComboBoxButton::GetItem  \n Returns the string associated with an item at a specified index in the list box.  \n  \n```  \nLPCTSTR GetItem(int iIndex=-1) const;\n\n \n```  \n  \n### Parameters  \n [in] `iIndex`  \n Zero-based index of an item in the list box.  \n  \n### Return Value  \n A pointer to the string that is associated with the item; otherwise, `NULL` if the index parameter is invalid, or if the index parameter is -1 and there is no selected item in the combo box.  \n  \n### Remarks  \n An index parameter of -1 returns the string of the item that is currently selected.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__getitemall\"></a>  CMFCToolBarComboBoxButton::GetItemAll  \n Returns the string associated with an item at a specified index in the list box of a combo box button that has a specified command ID.  \n  \n```  \nstatic LPCTSTR GetItemAll(\n    UINT uiCmd,  \n    int iIndex=-1);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The command ID of a combo box button.  \n  \n [in] `iIndex`  \n The zero-based index of an item in the list box.  \n  \n### Return Value  \n A pointer to the item's string if the method was successful; otherwise, `NULL` if the index is invalid, a combo box button is not found, or if index is -1 and there is no selected item in the combo box.  \n  \n### Remarks  \n An index value of -1 returns the string of the item that is currently selected.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__getitemdata\"></a>  CMFCToolBarComboBoxButton::GetItemData  \n Returns the data associated with an item at a specific index in the list box.  \n  \n```  \nDWORD_PTR GetItemData(int iIndex=-1) const;\n\n \n```  \n  \n### Parameters  \n [in] `iIndex`  \n The zero-based index of an item in the list box.  \n  \n### Return Value  \n The data associated with the item; or 0 if the item does not exist.  \n  \n### Remarks  \n An index parameter of -1 returns the data associated with the currently selected item.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__getitemdataall\"></a>  CMFCToolBarComboBoxButton::GetItemDataAll  \n Returns the data associated with an item at a specific index in the list box of a combo box button that has a specific command ID.  \n  \n```  \nstatic DWORD_PTR GetItemDataAll(\n    UINT uiCmd,  \n    int iIndex=-1);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The command ID of a combo box button.  \n  \n [in] `iIndex`  \n The zero-based index of an item in the list box.  \n  \n### Return Value  \n The data associated with the item if the method was successful; otherwise, 0 if the specified index is not valid, or CB_ERR if the combo box button is not found.  \n  \n### Remarks  \n An index parameter of -1 returns the data associated with the currently selected item.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__getitemdataptrall\"></a>  CMFCToolBarComboBoxButton::GetItemDataPtrAll  \n Returns the data associated with an item at a specific index in the list box of a combo box button that has a specific command ID. This data is returned as a pointer.  \n  \n```  \nstatic void* GetItemDataPtrAll(\n    UINT uiCmd,  \n    int iIndex=-1);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The command ID of the combo box button.  \n  \n [in] `iIndex`  \n The zero-based index of an item in the list box.  \n  \n### Return Value  \n A pointer associated with the item if the method was successful; otherwise, -1 if an error occurs, or `NULL` if the combo box button is not found.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__getprompt\"></a>  CMFCToolBarComboBoxButton::GetPrompt  \n Returns the prompt string for the combo box button.  \n  \n```  \nvirtual CString GetPrompt() const;\n\n \n```  \n  \n### Return Value  \n The prompt string.  \n  \n### Remarks  \n This method is currently not implemented.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__gettext\"></a>  CMFCToolBarComboBoxButton::GetText  \n Gets the text in the edit box.  \n  \n```  \nLPCTSTR GetText() const;\n\n \n```  \n  \n### Return Value  \n The text in the edit box.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__gettextall\"></a>  CMFCToolBarComboBoxButton::GetTextAll  \n Gets the text in the edit box of a combo box button that has a specified command ID.  \n  \n```  \nstatic LPCTSTR GetTextAll(UINT uiCmd);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The command ID of a specific combo box button.  \n  \n### Return Value  \n The text in the edit box if the method was successful; otherwise, `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__hasfocus\"></a>  CMFCToolBarComboBoxButton::HasFocus  \n Indicates whether the combo box currently has the focus.  \n  \n```  \nvirtual BOOL HasFocus() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the combo box currently has the focus; otherwise, `FALSE`.  \n  \n### Remarks  \n This method also returns `TRUE` if any child window of the combo box currently has the focus.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__iscentervert\"></a>  CMFCToolBarComboBoxButton::IsCenterVert  \n Returns the vertical position of combo box buttons in the application.  \n  \n```  \nstatic BOOL IsCenterVert();\n```  \n  \n### Return Value  \n `TRUE` if the buttons are centered; `FALSE` if the buttons are aligned at the top.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__isflatmode\"></a>  CMFCToolBarComboBoxButton::IsFlatMode  \n Returns the flat style appearance of combo box buttons in the application.  \n  \n```  \nstatic BOOL IsFlatMode();\n```  \n  \n### Return Value  \n `TRUE` if the buttons have a flat style; otherwise, `FALSE`.  \n  \n### Remarks  \n The default flat style for combo box buttons is `FALSE.`  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__isownerof\"></a>  CMFCToolBarComboBoxButton::IsOwnerOf  \n Indicates whether the specified handle is associated with the combo box button, or one of its children.  \n  \n```  \nvirtual BOOL IsOwnerOf(HWND hwnd);\n```  \n  \n### Parameters  \n [in] `hwnd`  \n A window handle.  \n  \n### Return Value  \n `TRUE` if the handle is assocated with the combo box button, or one of its children; otherwise, `FALSE`.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__isribbonbutton\"></a>  CMFCToolBarComboBoxButton::IsRibbonButton  \n Indicates whether the combo box button resides on a ribbon panel.  \n  \n```  \nBOOL IsRibbonButton() const;\n\n \n```  \n  \n### Return Value  \n Always `FALSE`.  \n  \n### Remarks  \n By default, this method always returns `FALSE`, which means the combo box button is never displayed on a ribbon panel.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__iswindowvisible\"></a>  CMFCToolBarComboBoxButton::IsWindowVisible  \n Returns the visibility state of the combo box button.  \n  \n```  \nvirtual BOOL IsWindowVisible();\n```  \n  \n### Return Value  \n The visibility state of the combo box button.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__notifycommand\"></a>  CMFCToolBarComboBoxButton::NotifyCommand  \n Indicates whether the combo box button processes the  message.  \n  \n```  \nvirtual BOOL NotifyCommand(int iNotifyCode);\n```  \n  \n### Parameters  \n [in] `iNotifyCode`  \n The notification message that is associated with the command.  \n  \n### Return Value  \n Whether the combo box button processes the  message.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__onaddtocustomizepage\"></a>  CMFCToolBarComboBoxButton::OnAddToCustomizePage  \n Called by the framework when the button is added to the **Customize** dialog box.  \n  \n```  \nvirtual void OnAddToCustomizePage();\n```  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__oncalculatesize\"></a>  CMFCToolBarComboBoxButton::OnCalculateSize  \n Called by the framework to calculate the size of the button.  \n  \n```  \nvirtual SIZE OnCalculateSize(\n    CDC* pDC,  \n    const CSize& sizeDefault,  \n    BOOL bHorz);\n```  \n  \n### Parameters  \n [in] `pDC`  \n The device context that displays the combo box button.  \n  \n [in] `sizeDefault`  \n The default size of the combo box button.  \n  \n [in] `bHorz`  \n The dock state of the parent toolbar. `TRUE` when the toolbar is docked horizontally and `FALSE` when the toolbar is docked vertically.  \n  \n### Return Value  \n A `SIZE` structure that contains the dimensions of the combo box button, in pixels.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__onchangeparentwnd\"></a>  CMFCToolBarComboBoxButton::OnChangeParentWnd  \n Called by the framework when the combo box button is inserted into a new toolbar.  \n  \n```  \nvirtual void OnChangeParentWnd(CWnd* pWndParent);\n```  \n  \n### Parameters  \n [in] `pWndParent`  \n Pointer to the new parent toolbar.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__onclick\"></a>  CMFCToolBarComboBoxButton::OnClick  \n Called by the framework when the user clicks the combo box button.  \n  \n```  \nvirtual BOOL OnClick(\n    CWnd* pWnd,  \n    BOOL bDelay = TRUE);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n Pointer to the parent window of the combo box button.  \n  \n [in] `bDelay`  \n Reserved for use in a derived class.  \n  \n### Return Value  \n `TRUE` if the method handles the event; otherwise, `FALSE`.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__onctlcolor\"></a>  CMFCToolBarComboBoxButton::OnCtlColor  \n Called by the framework when the user changes the parent toolbar color to set the combo box button color.  \n  \n```  \nvirtual HBRUSH OnCtlColor(\n    CDC* pDC,  \n    UINT nCtlColor);\n```  \n  \n### Parameters  \n [in] `pDC`  \n The device context that displays the combo box button.  \n  \n [in] `nCtlColor`  \n Unused.  \n  \n### Return Value  \n Handle to the brush that the framework uses to paint the background of the combo box button.  \n  \n### Remarks  \n This method also sets the combo box button text color.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__ondraw\"></a>  CMFCToolBarComboBoxButton::OnDraw  \n Called by the framework to draw the combo box button by using the specified styles and options.  \n  \n```  \nvirtual void OnDraw(\n    CDC* pDC,  \n    const CRect& rect,  \n    CMFCToolBarImages* pImages,  \n    BOOL bHorz = TRUE,  \n    BOOL bCustomizeMode = FALSE,  \n    BOOL bHighlight = FALSE,  \n    BOOL bDrawBorder = TRUE,  \n    BOOL bGrayDisabledButtons = TRUE);\n```  \n  \n### Parameters  \n [in] `Pdc`  \n The device context that displays the button.  \n  \n [in] `rect`  \n The bounding rectangle of the button.  \n  \n [in] `pImages`  \n The collection of images that is associated with the button.  \n  \n [in] `bHorz`  \n The dock state of the parent toolbar. `TRUE` when the toolbar is docked horizontally and `FALSE` when the toolbar is docked vertically.  \n  \n [in] `bCustomizeMode`  \n Whether the application is in customization mode.  \n  \n [in] `bHighlight`  \n Whether to draw the combo box button highlighted.  \n  \n [in] `bDrawBorder`  \n Whether to draw the combo box button with a border.  \n  \n [in] `bGrayDisabledButtons`  \n `TRUE` to draw shaded disabled buttons; `FALSE` to use the disabled images collection.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__ondrawoncustomizelist\"></a>  CMFCToolBarComboBoxButton::OnDrawOnCustomizeList  \n Called by the framework to draw the combo box button in the **Commands** pane of the **Customize** dialog box.  \n  \n```  \nvirtual int OnDrawOnCustomizeList(\n    CDC* pDC,  \n    const CRect& rect,  \n    BOOL bSelected);\n```  \n  \n### Parameters  \n [in] `pDC`  \n The device context that displays the combo box button.  \n  \n [in] `rect`  \n The bounding rectangle of the combo box button.  \n  \n [in] `bSelected`  \n `TRUE` if the combo box button is selected; otherwise, `FALSE`.  \n  \n### Return Value  \n The width, in pixels, of the combo box button.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__onglobalfontschanged\"></a>  CMFCToolBarComboBoxButton::OnGlobalFontsChanged  \n Called by the framework to set the combo box button font when the application font changes.  \n  \n```  \nvirtual void OnGlobalFontsChanged();\n```  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__onmove\"></a>  CMFCToolBarComboBoxButton::OnMove  \n Called by the framework to change the location of the combo box button when the parent toolbar moves.  \n  \n```  \nvirtual void OnMove();\n```  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__onshow\"></a>  CMFCToolBarComboBoxButton::OnShow  \n Called by the framework when the combo box button is hidden or displayed.  \n  \n```  \nvirtual void OnShow(BOOL bShow);\n```  \n  \n### Parameters  \n [in] `bShow`  \n Whether to hide or display the combo box button.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__onsize\"></a>  CMFCToolBarComboBoxButton::OnSize  \n Called by the framework to change the size of the combo box button when the parent toolbar changes size.  \n  \n```  \nvirtual void OnSize(int iSize);\n```  \n  \n### Parameters  \n [in] `iSize`  \n The new width of the combo box button.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__onupdatetooltip\"></a>  CMFCToolBarComboBoxButton::OnUpdateToolTip  \n Called by the framework when the user changes the tool tip for the combo box button.  \n  \n```  \nvirtual BOOL OnUpdateToolTip(\n    CWnd* pWndParent,  \n    int iButtonIndex,  \n    CToolTipCtrl& wndToolTip,  \n    CString& str);\n```  \n  \n### Parameters  \n [in] `pWndParent`  \n Pointer to the parent window for the combo box button.  \n  \n [in] `iButtonIndex`  \n ID of the combo box button.  \n  \n [in] `wndToolTip`  \n The tool tip to associate with the combo box button.  \n  \n [in] `str`  \n The tool tip text.  \n  \n### Return Value  \n `TRUE` if the method handles the event; otherwise, `FALSE`.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__removeallitems\"></a>  CMFCToolBarComboBoxButton::RemoveAllItems  \n Deletes all items from the list and edit boxes.  \n  \n```  \nvoid RemoveAllItems();\n```  \n  \n### Remarks  \n Removes all items from the list box and edit control of a combo box.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__selectitem\"></a>  CMFCToolBarComboBoxButton::SelectItem  \n Selects an item in the list box.  \n  \n```  \nBOOL SelectItem(\n    int iIndex,  \n    BOOL bNotify=TRUE);\n\n \nBOOL SelectItem(\n    DWORD_PTR dwData);\n\n \nBOOL SelectItem(\n    LPCTSTR lpszText);\n```  \n  \n### Parameters  \n [in] `iIndex`  \n The zero-based index of an item in the list box.  \n  \n [in] `bNotify`  \n `TRUE` to notify the combo box button of the selection; otherwise `FALSE`.  \n  \n [in] `dwData`  \n The data associated with an item in the list box.  \n  \n [in] `lpszText`  \n The text of an item in the list box.  \n  \n### Return Value  \n `TRUE` if the method was successful; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__selectitemall\"></a>  CMFCToolBarComboBoxButton::SelectItemAll  \n Selects an item in the list box of a combo box button that has a specified command ID.  \n  \n```  \nstatic BOOL SelectItemAll(\n    UINT uiCmd,  \n    int iIndex);\n\n \nstatic BOOL SelectItemAll(\n    UINT uiCmd,  \n    DWORD_PTR dwData);\n\n \nstatic BOOL SelectItemAll(\n    UINT uiCmd,  \n    LPCTSTR lpszText);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The command ID of the combo box button that contains the list box.  \n  \n [in] `iIndex`  \n The zero-based index of the item in the list box. A value of -1 removes any current selection in the list box and clears the edit box.  \n  \n [in] `dwData`  \n The data of an item in the list box.  \n  \n [in] `lpszText`  \n The text of an item in the list box.  \n  \n### Return Value  \n `TRUE` if the method was successful; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__serialize\"></a>  CMFCToolBarComboBoxButton::Serialize  \n Reads this object from an archive or writes it to an archive.  \n  \n```  \nvirtual void Serialize(CArchive& ar);\n```  \n  \n### Parameters  \n [in, out] `ar`  \n The `CArchive` object to serialize.  \n  \n### Remarks  \n Settings in the `CArchive` object determine whether this method reads or writes to the archive.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__setaccdata\"></a>  CMFCToolBarComboBoxButton::SetACCData  \n Populates the specified `CAccessibilityData` object by using accessibility data from the combo box button.  \n  \n```  \nvirtual BOOL SetACCData(\n    CWnd* pParent,  \n    CAccessibilityData& data);\n```  \n  \n### Parameters  \n [in] `pParent`  \n The parent window of the combo box button.  \n  \n [out] `data`  \n A `CAccessibilityData` object that receives the accessibility data from the combo box button.  \n  \n### Return Value  \n `TRUE` if the method was successful; otherwise `FALSE`.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__setcentervert\"></a>  CMFCToolBarComboBoxButton::SetCenterVert  \n Sets the vertical position of combo box buttons in the application.  \n  \n```  \nstatic void SetCenterVert(BOOL bCenterVert=TRUE);\n```  \n  \n### Parameters  \n [in] `bCenterVert`  \n `TRUE` to center the combo box button in the toolbar; `FALSE` to align the combo box button to the top of the toolbar.  \n  \n### Remarks  \n By default, combo box buttons are aligned to the top.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__setcontextmenuid\"></a>  CMFCToolBarComboBoxButton::SetContextMenuID  \n Sets the shortcut menu resource ID for the combo box button.  \n  \n```  \nvoid SetContextMenuID(UINT uiResID);\n```  \n  \n### Parameters  \n [in] `uiResID`  \n The shortcut menu resource ID.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__setdropdownheight\"></a>  CMFCToolBarComboBoxButton::SetDropDownHeight  \n Sets the height of the list box when it is dropped down.  \n  \n```  \nvoid SetDropDownHeight(int nHeight);\n```  \n  \n### Parameters  \n [in] `nHeight`  \n The height, in pixels, of the list box.  \n  \n### Remarks  \n The default height is 150 pixels.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__setflatmode\"></a>  CMFCToolBarComboBoxButton::SetFlatMode  \n Sets the flat style appearance of combo box buttons in the application.  \n  \n```  \nstatic void SetFlatMode(BOOL bFlat=TRUE);\n```  \n  \n### Parameters  \n [in] `bFlat`  \n `TRUE` for a flat style appearance; otherwise `FALSE`.  \n  \n### Remarks  \n The default flat style for combo box buttons is `FALSE`.  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__setstyle\"></a>  CMFCToolBarComboBoxButton::SetStyle  \n Sets the specified style for the combo box button and redraws the control if it is not disabled.  \n  \n```  \nvirtual void SetStyle(UINT nStyle);\n```  \n  \n### Parameters  \n [in] `nStyle`  \n A bitwise combination (OR) of toolbar styles.  \n  \n### Remarks  \n For a list of toolbar button styles see [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md)  \n  \n##  <a name=\"cmfctoolbarcomboboxbutton__settext\"></a>  CMFCToolBarComboBoxButton::SetText  \n Sets the text in the edit box of the combo box button.  \n  \n```  \nvoid SetText(LPCTSTR lpszText);\n```  \n  \n### Parameters  \n [in] `lpszText`  \n Pointer to a string that that contains the text for the edit box.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md)   \n [CComboBox Class](../../mfc/reference/ccombobox-class.md)   \n [CMFCToolBar::ReplaceButton](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__replacebutton)   \n [Walkthrough: Putting Controls On Toolbars](../../mfc/walkthrough-putting-controls-on-toolbars.md)\n\n\n\n"}