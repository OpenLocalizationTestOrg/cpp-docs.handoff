{"nodes":[{"pos":[12,40],"content":"CTime Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CTime Class | Microsoft Docs","pos":[0,28]}]},{"content":"CTime Class","pos":[650,661]},{"content":"Represents an absolute time and date.","pos":[662,699]},{"content":"Syntax","pos":[708,714]},{"content":"Members","pos":[752,759]},{"content":"Public Constructors","pos":[769,788]},{"content":"Name","pos":[795,799]},{"content":"Description","pos":[800,811]},{"content":"CTime::CTime","pos":[850,862]},{"pos":[879,922],"content":"Constructs <ph id=\"ph1\">`CTime`</ph> objects in various ways.","source":"Constructs `CTime` objects in various ways."},{"content":"Public Methods","pos":[933,947]},{"content":"Name","pos":[954,958]},{"content":"Description","pos":[959,970]},{"content":"CTime::Format","pos":[1009,1022]},{"pos":[1040,1121],"content":"Converts a <ph id=\"ph1\">`CTime`</ph> object into a formatted string — based on the local time zone.","source":"Converts a `CTime` object into a formatted string — based on the local time zone."},{"content":"CTime::FormatGmt","pos":[1127,1143]},{"pos":[1164,1229],"content":"Converts a <ph id=\"ph1\">`CTime`</ph> object into a formatted string — based on UTC.","source":"Converts a `CTime` object into a formatted string — based on UTC."},{"content":"CTime::GetAsDBTIMESTAMP","pos":[1235,1258]},{"pos":[1286,1389],"content":"Converts the time information stored in the <ph id=\"ph1\">`CTime`</ph> object to a Win32-compatible DBTIMESTAMP structure.","source":"Converts the time information stored in the `CTime` object to a Win32-compatible DBTIMESTAMP structure."},{"content":"CTime::GetAsSystemTime","pos":[1395,1417]},{"pos":[1444,1608],"content":"Converts the time information stored in the <ph id=\"ph1\">`CTime`</ph> object to a Win32-compatible <bpt id=\"p1\">[</bpt>SYSTEMTIME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724950)</ept> structure.","source":"Converts the time information stored in the `CTime` object to a Win32-compatible [SYSTEMTIME](http://msdn.microsoft.com/library/windows/desktop/ms724950) structure."},{"content":"CTime::GetCurrentTime","pos":[1614,1635]},{"pos":[1661,1744],"content":"Creates a <ph id=\"ph1\">`CTime`</ph> object that represents the current time (static member function).","source":"Creates a `CTime` object that represents the current time (static member function)."},{"content":"CTime::GetDay","pos":[1750,1763]},{"pos":[1781,1829],"content":"Returns the day represent by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the day represent by the `CTime` object."},{"content":"CTime::GetDayOfWeek","pos":[1835,1854]},{"pos":[1878,1940],"content":"Returns the day of the week represented by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the day of the week represented by the `CTime` object."},{"content":"CTime::GetGmtTm","pos":[1946,1961]},{"pos":[1981,2041],"content":"Breaks down a <ph id=\"ph1\">`CTime`</ph> object into components — based on UTC.","source":"Breaks down a `CTime` object into components — based on UTC."},{"content":"CTime::GetHour","pos":[2047,2061]},{"pos":[2080,2131],"content":"Returns the hour represented by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the hour represented by the `CTime` object."},{"content":"CTime::GetLocalTm","pos":[2137,2154]},{"pos":[2176,2252],"content":"Breaks down a <ph id=\"ph1\">`CTime`</ph> object into components — based on the local time zone.","source":"Breaks down a `CTime` object into components — based on the local time zone."},{"content":"CTime::GetMinute","pos":[2258,2274]},{"pos":[2295,2348],"content":"Returns the minute represented by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the minute represented by the `CTime` object."},{"content":"CTime::GetMonth","pos":[2354,2369]},{"pos":[2389,2441],"content":"Returns the month represented by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the month represented by the `CTime` object."},{"content":"CTime::GetSecond","pos":[2447,2463]},{"pos":[2484,2537],"content":"Returns the second represented by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the second represented by the `CTime` object."},{"content":"CTime::GetTime","pos":[2543,2557]},{"pos":[2576,2636],"content":"Returns a <bpt id=\"p1\">**</bpt>__time64_t<ept id=\"p1\">**</ept> value for the given <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns a **__time64_t** value for the given `CTime` object."},{"content":"CTime::GetYear","pos":[2642,2656]},{"pos":[2675,2726],"content":"Returns the year represented by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the year represented by the `CTime` object."},{"content":"CTime::Serialize64","pos":[2732,2750]},{"content":"Serializes data to or from an archive.","pos":[2773,2811]},{"content":"Operators","pos":[2822,2831]},{"content":"operator + –","pos":[2853,2865]},{"pos":[2892,2957],"content":"These operators add and subtract <ph id=\"ph1\">`CTimeSpan`</ph> and <ph id=\"ph2\">`CTime`</ph> objects.","source":"These operators add and subtract `CTimeSpan` and `CTime` objects."},{"content":"operator +=, –=","pos":[2963,2978]},{"pos":[3011,3097],"content":"These operators add and subtract a <ph id=\"ph1\">`CTimeSpan`</ph> object to and from this <ph id=\"ph2\">`CTime`</ph> object.","source":"These operators add and subtract a `CTimeSpan` object to and from this `CTime` object."},{"content":"operator =","pos":[3103,3113]},{"content":"The assignment operator.","pos":[3137,3161]},{"content":"operator ==, &lt; , etc.","pos":[3167,3188],"source":"operator ==, < , etc."},{"content":"Comparison operators.","pos":[3219,3240]},{"content":"Remarks","pos":[3250,3257]},{"pos":[3269,3296],"content":"does not have a base class."},{"content":"values are based on coordinated universal time (UTC), which is equivalent to Coordinated Universal time (Greenwich Mean Time, GMT).","pos":[3311,3442]},{"content":"See <bpt id=\"p1\">[</bpt>Time Management<ept id=\"p1\">](../../c-runtime-library/time-management.md)</ept> for information about how the time zone is determined.","pos":[3443,3563],"source":" See [Time Management](../../c-runtime-library/time-management.md) for information about how the time zone is determined."},{"content":"When you create a <ph id=\"ph1\">`CTime`</ph> object, set the <ph id=\"ph2\">`nDST`</ph> parameter to 0 to indicate that standard time is in effect, or to a value larger than 0 to indicate that daylight saving time is in effect, or to a value less than zero to have the C run-time library code compute whether standard time or daylight saving time is in effect.","pos":[3570,3891],"source":"When you create a `CTime` object, set the `nDST` parameter to 0 to indicate that standard time is in effect, or to a value larger than 0 to indicate that daylight saving time is in effect, or to a value less than zero to have the C run-time library code compute whether standard time or daylight saving time is in effect."},{"content":"is a required field.","pos":[3903,3923]},{"content":"If not set, its value is undefined and the return value from <bpt id=\"p1\">[</bpt>mktime<ept id=\"p1\">](../../c-runtime-library/reference/mktime-mktime32-mktime64.md)</ept> is unpredictable.","pos":[3924,4074],"source":" If not set, its value is undefined and the return value from [mktime](../../c-runtime-library/reference/mktime-mktime32-mktime64.md) is unpredictable."},{"content":"If <ph id=\"ph1\">`timeptr`</ph> points to a tm structure returned by a previous call to <bpt id=\"p1\">[</bpt>asctime_s<ept id=\"p1\">](../../c-runtime-library/reference/asctime-s-wasctime-s.md)</ept>, <bpt id=\"p2\">[</bpt>_gmtime_s<ept id=\"p2\">](../../c-runtime-library/reference/gmtime-s-gmtime32-s-gmtime64-s.md)</ept>, or <bpt id=\"p3\">[</bpt>localtime_s<ept id=\"p3\">](../../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md)</ept>, the <ph id=\"ph2\">`tm_isdst`</ph> field contains the correct value.","pos":[4075,4442],"source":" If `timeptr` points to a tm structure returned by a previous call to [asctime_s](../../c-runtime-library/reference/asctime-s-wasctime-s.md), [_gmtime_s](../../c-runtime-library/reference/gmtime-s-gmtime32-s-gmtime64-s.md), or [localtime_s](../../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md), the `tm_isdst` field contains the correct value."},{"pos":[4449,4559],"content":"A companion class, <bpt id=\"p1\">[</bpt>CTimeSpan<ept id=\"p1\">](../../atl-mfc-shared/reference/ctimespan-class.md)</ept>, represents a time interval.","source":"A companion class, [CTimeSpan](../../atl-mfc-shared/reference/ctimespan-class.md), represents a time interval."},{"content":"The <ph id=\"ph1\">`CTime`</ph> and <ph id=\"ph2\">`CTimeSpan`</ph> classes are not designed for derivation.","pos":[4566,4634],"source":"The `CTime` and `CTimeSpan` classes are not designed for derivation."},{"content":"Because there are no virtual functions, the size of <ph id=\"ph1\">`CTime`</ph> and <ph id=\"ph2\">`CTimeSpan`</ph> objects is exactly 8 bytes.","pos":[4635,4738],"source":" Because there are no virtual functions, the size of `CTime` and `CTimeSpan` objects is exactly 8 bytes."},{"content":"Most member functions are inline.","pos":[4739,4772]},{"pos":[4780,4871],"content":"[!NOTE]\n The upper date limit is 12/31/3000. The lower limit is 1/1/1970 12:00:00 AM GMT.","leadings":["","> "],"nodes":[{"content":" The upper date limit is 12/31/3000. The lower limit is 1/1/1970 12:00:00 AM GMT.","pos":[8,89],"nodes":[{"content":"The upper date limit is 12/31/3000.","pos":[1,36]},{"content":"The lower limit is 1/1/1970 12:00:00 AM GMT.","pos":[37,81]}]}]},{"pos":[4878,5093],"content":"For more information about using <ph id=\"ph1\">`CTime`</ph>, see the articles <bpt id=\"p1\">[</bpt>Date and Time<ept id=\"p1\">](../../atl-mfc-shared/date-and-time.md)</ept>, and <bpt id=\"p2\">[</bpt>Time Management<ept id=\"p2\">](../../c-runtime-library/time-management.md)</ept> in the Run-Time Library Reference.","source":"For more information about using `CTime`, see the articles [Date and Time](../../atl-mfc-shared/date-and-time.md), and [Time Management](../../c-runtime-library/time-management.md) in the Run-Time Library Reference."},{"pos":[5101,5330],"content":"[!NOTE]\n The `CTime` structure changed from MFC 7.1 to MFC 8.0. If you serialize a `CTime` structure by using the `operator <<` under MFC 8.0 or a later version, the resulting file will not be readable on older versions of MFC.","leadings":["","> "],"nodes":[{"content":" The `CTime` structure changed from MFC 7.1 to MFC 8.0. If you serialize a `CTime` structure by using the `operator <<` under MFC 8.0 or a later version, the resulting file will not be readable on older versions of MFC.","pos":[8,227],"nodes":[{"content":"The <ph id=\"ph1\">`CTime`</ph> structure changed from MFC 7.1 to MFC 8.0.","pos":[1,55],"source":" The `CTime` structure changed from MFC 7.1 to MFC 8.0."},{"content":"If you serialize a <ph id=\"ph1\">`CTime`</ph> structure by using the <ph id=\"ph2\">`operator &lt;&lt;`</ph> under MFC 8.0 or a later version, the resulting file will not be readable on older versions of MFC.","pos":[56,219],"source":" If you serialize a `CTime` structure by using the `operator <<` under MFC 8.0 or a later version, the resulting file will not be readable on older versions of MFC."}]}]},{"content":"Requirements","pos":[5339,5351]},{"pos":[5355,5376],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atltime.h","source":"**Header:** atltime.h"},{"pos":[5429,5455],"content":"CTime Comparison Operators"},{"content":"Comparison operators.","pos":[5459,5480]},{"content":"Parameters","pos":[5799,5809]},{"content":"The <ph id=\"ph1\">`CTime`</ph> object to be compared.","pos":[5823,5857],"source":" The `CTime` object to be compared."},{"content":"Return Value","pos":[5867,5879]},{"pos":[5883,5992],"content":"These operators compare two absolute times and return <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the condition is true; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"These operators compare two absolute times and return **true** if the condition is true; otherwise **false**."},{"content":"Example","pos":[6002,6009]},{"pos":[6024,6048],"content":"NVC_ATLMFC_Utilities#161"},{"pos":[6145,6157],"content":"CTime::CTime"},{"pos":[6161,6226],"content":"Creates a new <ph id=\"ph1\">`CTime`</ph> object initialized with the specified time.","source":"Creates a new `CTime` object initialized with the specified time."},{"content":"Parameters","pos":[6712,6722]},{"content":"Indicates a <ph id=\"ph1\">`CTime`</ph> object that already exists.","pos":[6739,6786],"source":" Indicates a `CTime` object that already exists."},{"content":"A <bpt id=\"p1\">**</bpt>__time64_t<ept id=\"p1\">**</ept> time value, which is the number of seconds after January 1, 1970 UTC.","pos":[6803,6889],"source":" A **__time64_t** time value, which is the number of seconds after January 1, 1970 UTC."},{"content":"Note that this will be adjusted to your local time.","pos":[6890,6941]},{"content":"For example, if you are in New York and create a <ph id=\"ph1\">`CTime`</ph> object by passing a parameter of 0, <bpt id=\"p1\">[</bpt>CTime::GetMonth<ept id=\"p1\">](#ctime__getmonth)</ept> will return 12.","pos":[6942,7086],"source":" For example, if you are in New York and create a `CTime` object by passing a parameter of 0, [CTime::GetMonth](#ctime__getmonth) will return 12."},{"content":"In Visual C++ versions 6.0 and earlier, <ph id=\"ph1\">`time`</ph> was a value of <ph id=\"ph2\">`time_t`</ph>.","pos":[7093,7164],"source":"In Visual C++ versions 6.0 and earlier, `time` was a value of `time_t`."},{"content":"Visual C++ .NET and later converts a <ph id=\"ph1\">`time_t`</ph> parameter to <bpt id=\"p1\">**</bpt>__time64_t<ept id=\"p1\">**</ept>.","pos":[7165,7239],"source":" Visual C++ .NET and later converts a `time_t` parameter to **__time64_t**."},{"content":", <ph id=\"ph1\">`nMonth`</ph>, <ph id=\"ph2\">`nDay`</ph>, <ph id=\"ph3\">`nHour`</ph>, <ph id=\"ph4\">`nMin`</ph>,","pos":[7253,7289],"source":", `nMonth`, `nDay`, `nHour`, `nMin`, "},{"content":"Indicates the date and time values to be copied into the new <ph id=\"ph1\">`CTime`</ph> object.","pos":[7300,7376],"source":" Indicates the date and time values to be copied into the new `CTime` object."},{"content":"Indicates whether daylight savings time is in effect.","pos":[7393,7446]},{"content":"Can have one of three values:","pos":[7447,7476]},{"pos":[7491,7526],"content":"set to 0Standard time is in effect."},{"pos":[7541,7605],"content":"set to a value greater than 0Daylight savings time is in effect."},{"content":"set to a value less than 0The default.","pos":[7620,7658]},{"content":"Automatically computes whether standard time or daylight savings time is in effect.","pos":[7659,7742]},{"pos":[7749,7879],"content":"`wDosDate`, `wDosTime`  \nMS-DOS date and time values to be converted to a date/time value and copied into the new `CTime` object.","leadings":[""," "],"nodes":[{"content":",","pos":[10,11]},{"content":"MS-DOS date and time values to be converted to a date/time value and copied into the new <ph id=\"ph1\">`CTime`</ph> object.","pos":[25,129],"source":"MS-DOS date and time values to be converted to a date/time value and copied into the new `CTime` object."}]},{"pos":[7886,8231],"content":"`st`  \nA [SYSTEMTIME](https://www.microsoftonedoc.com/#/organizations/e6f6a65cf14f462597b64ac058dbe1d0/projects/3fedad16-eaf1-41a6-8f96-0c1949c68f32/containers/a3daf831-1c5f-4bbe-964d-503870caf874/tocpaths/d6609fff-1931-4818-8a26-f042630af0b0/locales/en-us) structure to be converted to a date/time value and copied into the new `CTime` object.","leadings":[""," "],"nodes":[{"content":"A <bpt id=\"p1\">[</bpt>SYSTEMTIME<ept id=\"p1\">](https://www.microsoftonedoc.com/#/organizations/e6f6a65cf14f462597b64ac058dbe1d0/projects/3fedad16-eaf1-41a6-8f96-0c1949c68f32/containers/a3daf831-1c5f-4bbe-964d-503870caf874/tocpaths/d6609fff-1931-4818-8a26-f042630af0b0/locales/en-us)</ept> structure to be converted to a date/time value and copied into the new <ph id=\"ph1\">`CTime`</ph> object.","pos":[7,344],"source":"A [SYSTEMTIME](https://www.microsoftonedoc.com/#/organizations/e6f6a65cf14f462597b64ac058dbe1d0/projects/3fedad16-eaf1-41a6-8f96-0c1949c68f32/containers/a3daf831-1c5f-4bbe-964d-503870caf874/tocpaths/d6609fff-1931-4818-8a26-f042630af0b0/locales/en-us) structure to be converted to a date/time value and copied into the new `CTime` object."}]},{"pos":[8238,8581],"content":"`ft`  \nA [FILETIME](https://www.microsoftonedoc.com/#/organizations/e6f6a65cf14f462597b64ac058dbe1d0/projects/3fedad16-eaf1-41a6-8f96-0c1949c68f32/containers/a3daf831-1c5f-4bbe-964d-503870caf874/tocpaths/979ce746-dc17-4147-89f8-41d05c5fcc5f/locales/en-us) structure to be converted to a date/time value and copied into the new `CTime` object.","leadings":[""," "],"nodes":[{"content":"A <bpt id=\"p1\">[</bpt>FILETIME<ept id=\"p1\">](https://www.microsoftonedoc.com/#/organizations/e6f6a65cf14f462597b64ac058dbe1d0/projects/3fedad16-eaf1-41a6-8f96-0c1949c68f32/containers/a3daf831-1c5f-4bbe-964d-503870caf874/tocpaths/979ce746-dc17-4147-89f8-41d05c5fcc5f/locales/en-us)</ept> structure to be converted to a date/time value and copied into the new <ph id=\"ph1\">`CTime`</ph> object.","pos":[7,342],"source":"A [FILETIME](https://www.microsoftonedoc.com/#/organizations/e6f6a65cf14f462597b64ac058dbe1d0/projects/3fedad16-eaf1-41a6-8f96-0c1949c68f32/containers/a3daf831-1c5f-4bbe-964d-503870caf874/tocpaths/979ce746-dc17-4147-89f8-41d05c5fcc5f/locales/en-us) structure to be converted to a date/time value and copied into the new `CTime` object."}]},{"pos":[8588,8669],"content":"dbts  \nA reference to a DBTIMESTAMP structure containing the current local time.","leadings":[""," "],"nodes":[{"content":"dbts","pos":[0,4]},{"content":"A reference to a DBTIMESTAMP structure containing the current local time.","pos":[7,80]}]},{"content":"Remarks","pos":[8679,8686]},{"content":"Each constructor is described below:","pos":[8690,8726]},{"content":"<bpt id=\"p1\">**</bpt>CTime( );<ept id=\"p1\">**</ept>Constructs an uninitialized <ph id=\"ph1\">`CTime`</ph> object.","pos":[8734,8790],"source":"**CTime( );**Constructs an uninitialized `CTime` object."},{"content":"This constructor allows you to define <ph id=\"ph1\">`CTime`</ph> object arrays.","pos":[8791,8851],"source":" This constructor allows you to define `CTime` object arrays."},{"content":"You should initialize such arrays with valid times before using.","pos":[8852,8916]},{"pos":[8924,9005],"content":"<bpt id=\"p1\">**</bpt>CTime( const CTime&amp; );<ept id=\"p1\">**</ept>Constructs a <ph id=\"ph1\">`CTime`</ph> object from another <ph id=\"ph2\">`CTime`</ph> value.","source":"**CTime( const CTime& );**Constructs a `CTime` object from another `CTime` value."},{"content":"<bpt id=\"p1\">**</bpt>CTime( __time64_t );<ept id=\"p1\">**</ept>Constructs a <ph id=\"ph1\">`CTime`</ph> object from a <bpt id=\"p2\">**</bpt>__time64_t<ept id=\"p2\">**</ept> type.","pos":[9013,9092],"source":"**CTime( __time64_t );**Constructs a `CTime` object from a **__time64_t** type."},{"content":"This constructor expects a UTC time and converts the result to a local time before storing the result.","pos":[9093,9195]},{"pos":[9203,9340],"content":"<bpt id=\"p1\">**</bpt>CTime( int, int, ...);<ept id=\"p1\">**</ept>Constructs a <ph id=\"ph1\">`CTime`</ph> object from local time components with each component constrained to the following ranges:","source":"**CTime( int, int, ...);**Constructs a `CTime` object from local time components with each component constrained to the following ranges:"},{"content":"Component","pos":[9351,9360]},{"content":"Range","pos":[9361,9366]},{"content":"1970–3000","pos":[9419,9428]},{"content":"1–12","pos":[9446,9450]},{"content":"1–31","pos":[9466,9470]},{"content":"0-23","pos":[9487,9491]},{"content":"0-59","pos":[9507,9511]},{"content":"0-59","pos":[9527,9531]},{"content":"This constructor makes the appropriate conversion to UTC.","pos":[9543,9600]},{"content":"The Debug version of the Microsoft Foundation Class Library asserts if one or more of the time components are out of range.","pos":[9601,9724]},{"content":"You must validate the arguments before calling.","pos":[9725,9772]},{"content":"This constructor expects a local time.","pos":[9773,9811]},{"content":"( <bpt id=\"p1\">**</bpt>WORD, WORD<ept id=\"p1\">**</ept> ) <bpt id=\"p2\">**</bpt>;<ept id=\"p2\">**</ept>Constructs a <ph id=\"ph1\">`CTime`</ph> object from the specified MS-DOS date and time values.","pos":[9826,9925],"source":"( **WORD, WORD** ) **;**Constructs a `CTime` object from the specified MS-DOS date and time values."},{"content":"This constructor expects a local time.","pos":[9926,9964]},{"content":"( <bpt id=\"p1\">**</bpt>const SYSTEMTIME&amp;<ept id=\"p1\">**</ept> ) <bpt id=\"p2\">**</bpt>;<ept id=\"p2\">**</ept>Constructs a <ph id=\"ph1\">`CTime`</ph> object from a <ph id=\"ph2\">`SYSTEMTIME`</ph> structure.","pos":[9979,10068],"source":"( **const SYSTEMTIME&** ) **;**Constructs a `CTime` object from a `SYSTEMTIME` structure."},{"content":"This constructor expects a local time.","pos":[10069,10107]},{"content":"( <bpt id=\"p1\">**</bpt>const FILETIME&amp;<ept id=\"p1\">**</ept> ) <bpt id=\"p2\">**</bpt>;<ept id=\"p2\">**</ept>Constructs a <ph id=\"ph1\">`CTime`</ph> object from a <ph id=\"ph2\">`FILETIME`</ph> structure.","pos":[10122,10207],"source":"( **const FILETIME&** ) **;**Constructs a `CTime` object from a `FILETIME` structure."},{"content":"You most likely will not use <ph id=\"ph1\">`CTime``FILETIME`</ph> initialization directly.","pos":[10208,10279],"source":" You most likely will not use `CTime``FILETIME` initialization directly."},{"content":"If you use a <ph id=\"ph1\">`CFile`</ph> object to manipulate a file, <ph id=\"ph2\">`CFile::GetStatus`</ph> retrieves the file time stamp for you through a <ph id=\"ph3\">`CTime`</ph> object initialized with a <ph id=\"ph4\">`FILETIME`</ph> structure.","pos":[10280,10452],"source":" If you use a `CFile` object to manipulate a file, `CFile::GetStatus` retrieves the file time stamp for you through a `CTime` object initialized with a `FILETIME` structure."},{"content":"This constructor assumes a time based on UTC and automatically converts the value to local time before storing the result.","pos":[10453,10575]},{"pos":[10587,10693],"content":"[!NOTE]\n The constructor using **DBTIMESTAMP** parameter is only available when OLEDB.h is included.","leadings":["","    > "],"nodes":[{"content":"The constructor using <bpt id=\"p1\">**</bpt>DBTIMESTAMP<ept id=\"p1\">**</ept> parameter is only available when OLEDB.h is included.","pos":[9,100],"source":" The constructor using **DBTIMESTAMP** parameter is only available when OLEDB.h is included."}]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>SYSTEMTIME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724950)</ept> and <bpt id=\"p2\">[</bpt>FILETIME<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms724284)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[10700,10947],"source":"For more information, see the [SYSTEMTIME](http://msdn.microsoft.com/library/windows/desktop/ms724950) and [FILETIME](http://msdn.microsoft.com/library/windows/desktop/ms724284) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Also see the <bpt id=\"p1\">[</bpt>MS-DOS Date and Time<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724503)</ept> entry in the <ph id=\"ph1\">[!INCLUDE[winsdkshort](../../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.","pos":[10948,11140],"source":" Also see the [MS-DOS Date and Time](http://msdn.microsoft.com/library/windows/desktop/ms724503) entry in the [!INCLUDE[winsdkshort](../../atl-mfc-shared/reference/includes/winsdkshort_md.md)]."},{"content":"Example","pos":[11150,11157]},{"pos":[11172,11196],"content":"NVC_ATLMFC_Utilities#148"},{"pos":[11294,11307],"content":"CTime::Format"},{"content":"Call this member function to create a formatted representation of the date-time value.","pos":[11311,11397]},{"content":"Parameters","pos":[11507,11517]},{"content":"A formatting string similar to the <ph id=\"ph1\">`printf`</ph> formatting string.","pos":[11536,11598],"source":" A formatting string similar to the `printf` formatting string."},{"content":"Formatting codes, preceded by a percent ( <ph id=\"ph1\">`%`</ph>) sign, are replaced by the corresponding <ph id=\"ph2\">`CTime`</ph> component.","pos":[11599,11704],"source":" Formatting codes, preceded by a percent ( `%`) sign, are replaced by the corresponding `CTime` component."},{"content":"Other characters in the formatting string are copied unchanged to the returned string.","pos":[11705,11791]},{"content":"See the run-time function <bpt id=\"p1\">[</bpt>strftime<ept id=\"p1\">](../../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md)</ept> for a list of formatting codes.","pos":[11792,11938],"source":" See the run-time function [strftime](../../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for a list of formatting codes."},{"content":"The ID of the string that identifies this format.","pos":[11960,12009]},{"content":"Return Value","pos":[12019,12031]},{"pos":[12035,12130],"content":"A <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> that contains the formatted time.","source":"A [CString](../../atl-mfc-shared/reference/cstringt-class.md) that contains the formatted time."},{"content":"Remarks","pos":[12140,12147]},{"pos":[12151,12233],"content":"If the status of this <ph id=\"ph1\">`CTime`</ph> object is null, the return value is an empty string.","source":"If the status of this `CTime` object is null, the return value is an empty string."},{"content":"This method throws an exception if the date-time value to format does not range from midnight, January 1, 1970 through December 31, 3000 Universal Coordinated Time (UTC).","pos":[12240,12410]},{"content":"Example","pos":[12420,12427]},{"pos":[12442,12466],"content":"NVC_ATLMFC_Utilities#149"},{"pos":[12567,12583],"content":"CTime::FormatGmt"},{"pos":[12587,12656],"content":"Generates a formatted string that corresponds to this <ph id=\"ph1\">`CTime`</ph> object.","source":"Generates a formatted string that corresponds to this `CTime` object."},{"content":"Parameters","pos":[12772,12782]},{"content":"Specifies a formatting string similar to the <ph id=\"ph1\">`printf`</ph> formatting string.","pos":[12801,12873],"source":" Specifies a formatting string similar to the `printf` formatting string."},{"content":"See the run-time function <bpt id=\"p1\">[</bpt>strftime<ept id=\"p1\">](../../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md)</ept> for details.","pos":[12874,13001],"source":" See the run-time function [strftime](../../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for details."},{"content":"The ID of the string that identifies this format.","pos":[13023,13072]},{"content":"Return Value","pos":[13082,13094]},{"pos":[13098,13193],"content":"A <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> that contains the formatted time.","source":"A [CString](../../atl-mfc-shared/reference/cstringt-class.md) that contains the formatted time."},{"content":"Remarks","pos":[13203,13210]},{"content":"The time value is not converted and thus reflects UTC.","pos":[13214,13268]},{"content":"This method throws an exception if the date-time value to format does not range from midnight, January 1, 1970 through December 31, 3000 Universal Coordinated Time (UTC).","pos":[13275,13445]},{"content":"Example","pos":[13455,13462]},{"pos":[13466,13518],"content":"See the example for <bpt id=\"p1\">[</bpt>CTime::Format<ept id=\"p1\">](#ctime__format)</ept>.","source":"See the example for [CTime::Format](#ctime__format)."},{"pos":[13568,13591],"content":"CTime::GetAsDBTIMESTAMP"},{"pos":[13595,13726],"content":"Call this member function to convert the time information stored in the <ph id=\"ph1\">`CTime`</ph> object to a Win32–compatible DBTIMESTAMP structure.","source":"Call this member function to convert the time information stored in the `CTime` object to a Win32–compatible DBTIMESTAMP structure."},{"content":"Parameters","pos":[13807,13817]},{"content":"A reference to a DBTIMESTAMP structure containing the current local time.","pos":[13831,13904]},{"content":"Return Value","pos":[13914,13926]},{"content":"Nonzero if successful; otherwise 0.","pos":[13930,13965]},{"content":"Remarks","pos":[13975,13982]},{"content":"Stores the resulting time in the referenced <ph id=\"ph1\">`dbts`</ph> structure.","pos":[13986,14047],"source":"Stores the resulting time in the referenced `dbts` structure."},{"content":"The <bpt id=\"p1\">**</bpt>DBTIMESTAMP<ept id=\"p1\">**</ept> data structure initialized by this function will have its <bpt id=\"p2\">**</bpt>fraction<ept id=\"p2\">**</ept> member set to zero.","pos":[14048,14158],"source":" The **DBTIMESTAMP** data structure initialized by this function will have its **fraction** member set to zero."},{"content":"Example","pos":[14168,14175]},{"pos":[14190,14214],"content":"NVC_ATLMFC_Utilities#150"},{"pos":[14321,14343],"content":"CTime::GetAsSystemTime"},{"pos":[14347,14539],"content":"Call this member function to convert the time information stored in the <ph id=\"ph1\">`CTime`</ph> object to a Win32–compatible <bpt id=\"p1\">[</bpt>SYSTEMTIME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724950)</ept> structure.","source":"Call this member function to convert the time information stored in the `CTime` object to a Win32–compatible [SYSTEMTIME](http://msdn.microsoft.com/library/windows/desktop/ms724950) structure."},{"content":"Parameters","pos":[14616,14626]},{"content":"timeDest","pos":[14631,14639]},{"content":"A reference to a <bpt id=\"p1\">[</bpt>SYSTEMTIME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724950)</ept> structure that will hold the converted date/time value of the <ph id=\"ph1\">`CTime`</ph> object.","pos":[14644,14811],"source":" A reference to a [SYSTEMTIME](http://msdn.microsoft.com/library/windows/desktop/ms724950) structure that will hold the converted date/time value of the `CTime` object."},{"content":"Return Value","pos":[14821,14833]},{"content":"True if successful; otherwise false.","pos":[14837,14873]},{"content":"Remarks","pos":[14883,14890]},{"content":"stores the resulting time in the referenced <bpt id=\"p1\">*</bpt>timeDest<ept id=\"p1\">*</ept> structure.","pos":[14912,14977],"source":" stores the resulting time in the referenced *timeDest* structure."},{"content":"The <ph id=\"ph1\">`SYSTEMTIME`</ph> data structure initialized by this function will have its <bpt id=\"p1\">**</bpt>wMilliseconds<ept id=\"p1\">**</ept> member set to zero.","pos":[14978,15090],"source":" The `SYSTEMTIME` data structure initialized by this function will have its **wMilliseconds** member set to zero."},{"content":"Example","pos":[15100,15107]},{"pos":[15122,15146],"content":"NVC_ATLMFC_Utilities#151"},{"pos":[15252,15273],"content":"CTime::GetCurrentTime"},{"pos":[15277,15335],"content":"Returns a <ph id=\"ph1\">`CTime`</ph> object that represents the current time.","source":"Returns a `CTime` object that represents the current time."},{"content":"Remarks","pos":[15422,15429]},{"content":"Returns the current system date and time in Coordinated Universal Time (UTC).","pos":[15433,15510]},{"content":"Example","pos":[15520,15527]},{"pos":[15542,15566],"content":"NVC_ATLMFC_Utilities#152"},{"pos":[15664,15677],"content":"CTime::GetDay"},{"pos":[15681,15729],"content":"Returns the day represent by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the day represent by the `CTime` object."},{"content":"Return Value","pos":[15791,15803]},{"content":"Returns the day of the month, based on local time, in the range 1 through 31.","pos":[15807,15884]},{"content":"Remarks","pos":[15894,15901]},{"content":"This function calls <ph id=\"ph1\">`GetLocalTm`</ph>, which uses an internal, statically allocated buffer.","pos":[15905,15991],"source":"This function calls `GetLocalTm`, which uses an internal, statically allocated buffer."},{"content":"The data in this buffer is overwritten because of calls to other <ph id=\"ph1\">`CTime`</ph> member functions.","pos":[15992,16082],"source":" The data in this buffer is overwritten because of calls to other `CTime` member functions."},{"content":"Example","pos":[16092,16099]},{"pos":[16114,16138],"content":"NVC_ATLMFC_Utilities#153"},{"pos":[16242,16261],"content":"CTime::GetDayOfWeek"},{"pos":[16265,16327],"content":"Returns the day of the week represented by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the day of the week represented by the `CTime` object."},{"content":"Return Value","pos":[16395,16407]},{"content":"Returns the day of the week based on local time; 1 = Sunday, 2 = Monday, to 7 = Saturday.","pos":[16411,16500]},{"content":"Remarks","pos":[16510,16517]},{"content":"This function calls <ph id=\"ph1\">`GetLocalTm`</ph>, which uses an internal statically allocated buffer.","pos":[16521,16606],"source":"This function calls `GetLocalTm`, which uses an internal statically allocated buffer."},{"content":"The data in this buffer is overwritten because of calls to other <ph id=\"ph1\">`CTime`</ph> member functions.","pos":[16607,16697],"source":" The data in this buffer is overwritten because of calls to other `CTime` member functions."},{"content":"Example","pos":[16707,16714]},{"pos":[16729,16753],"content":"NVC_ATLMFC_Utilities#154"},{"pos":[16853,16868],"content":"CTime::GetGmtTm"},{"pos":[16872,16968],"content":"Gets a <bpt id=\"p1\">**</bpt>struct tm<ept id=\"p1\">**</ept> that contains a decomposition of the time contained in this <ph id=\"ph1\">`CTime`</ph> object.","source":"Gets a **struct tm** that contains a decomposition of the time contained in this `CTime` object."},{"content":"Parameters","pos":[17063,17073]},{"content":"Points to a buffer that will receive the time data.","pos":[17086,17137]},{"content":"If this pointer is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, an exception is thrown.","pos":[17138,17190],"source":" If this pointer is **NULL**, an exception is thrown."},{"content":"Return Value","pos":[17200,17212]},{"content":"A pointer to a filled-in <bpt id=\"p1\">**</bpt>struct tm<ept id=\"p1\">**</ept> as defined in the include file TIME.H.","pos":[17216,17293],"source":"A pointer to a filled-in **struct tm** as defined in the include file TIME.H."},{"content":"See <bpt id=\"p1\">[</bpt>gmtime, _gmtime32, _gmtime64<ept id=\"p1\">](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md)</ept> for the structure layout.","pos":[17294,17417],"source":" See [gmtime, _gmtime32, _gmtime64](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md) for the structure layout."},{"content":"Remarks","pos":[17427,17434]},{"pos":[17449,17461],"content":"returns UTC."},{"content":"cannot be <ph id=\"ph1\">`NULL`</ph>.","pos":[17474,17491],"source":" cannot be `NULL`."},{"content":"If you want to revert to the old behavior, in which <ph id=\"ph1\">`ptm`</ph> could be <ph id=\"ph2\">`NULL`</ph> to indicate that an internal, statically allocated buffer should be used, then undefine <ph id=\"ph3\">`_SECURE_ATL`</ph>.","pos":[17492,17668],"source":" If you want to revert to the old behavior, in which `ptm` could be `NULL` to indicate that an internal, statically allocated buffer should be used, then undefine `_SECURE_ATL`."},{"content":"Example","pos":[17678,17685]},{"pos":[17700,17724],"content":"NVC_ATLMFC_Utilities#155"},{"pos":[17823,17837],"content":"CTime::GetHour"},{"pos":[17841,17892],"content":"Returns the hour represented by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the hour represented by the `CTime` object."},{"content":"Return Value","pos":[17955,17967]},{"content":"Returns the hour, based on local time, in the range 0 through 23.","pos":[17971,18036]},{"content":"Remarks","pos":[18046,18053]},{"content":"This function calls <ph id=\"ph1\">`GetLocalTm`</ph>, which uses an internal statically allocated buffer.","pos":[18057,18142],"source":"This function calls `GetLocalTm`, which uses an internal statically allocated buffer."},{"content":"The data in this buffer is overwritten because of calls to other <ph id=\"ph1\">`CTime`</ph> member functions.","pos":[18143,18233],"source":" The data in this buffer is overwritten because of calls to other `CTime` member functions."},{"content":"Example","pos":[18243,18250]},{"pos":[18265,18289],"content":"NVC_ATLMFC_Utilities#156"},{"pos":[18392,18409],"content":"CTime::GetLocalTm"},{"pos":[18413,18506],"content":"Gets a <bpt id=\"p1\">**</bpt>struct tm<ept id=\"p1\">**</ept> containing a decomposition of the time contained in this <ph id=\"ph1\">`CTime`</ph> object.","source":"Gets a **struct tm** containing a decomposition of the time contained in this `CTime` object."},{"content":"Parameters","pos":[18603,18613]},{"content":"Points to a buffer that will receive the time data.","pos":[18626,18677]},{"content":"If this pointer is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, an exception is thrown.","pos":[18678,18730],"source":" If this pointer is **NULL**, an exception is thrown."},{"content":"Return Value","pos":[18740,18752]},{"content":"A pointer to a filled-in <bpt id=\"p1\">**</bpt>struct tm<ept id=\"p1\">**</ept> as defined in the include file TIME.H.","pos":[18756,18833],"source":"A pointer to a filled-in **struct tm** as defined in the include file TIME.H."},{"content":"See <bpt id=\"p1\">[</bpt>gmtime, _gmtime32, _gmtime64<ept id=\"p1\">](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md)</ept> for the structure layout.","pos":[18834,18957],"source":" See [gmtime, _gmtime32, _gmtime64](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md) for the structure layout."},{"content":"Remarks","pos":[18967,18974]},{"pos":[18991,19010],"content":"returns local time."},{"content":"cannot be <ph id=\"ph1\">`NULL`</ph>.","pos":[19023,19040],"source":" cannot be `NULL`."},{"content":"If you want to revert to the old behavior, in which <ph id=\"ph1\">`ptm`</ph> could be <ph id=\"ph2\">`NULL`</ph> to indicate that an internal, statically allocated buffer should be used, then undefine <ph id=\"ph3\">`_SECURE_ATL`</ph>.","pos":[19041,19217],"source":" If you want to revert to the old behavior, in which `ptm` could be `NULL` to indicate that an internal, statically allocated buffer should be used, then undefine `_SECURE_ATL`."},{"content":"Example","pos":[19227,19234]},{"pos":[19249,19273],"content":"NVC_ATLMFC_Utilities#157"},{"pos":[19375,19391],"content":"CTime::GetMinute"},{"pos":[19395,19448],"content":"Returns the minute represented by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the minute represented by the `CTime` object."},{"content":"Return Value","pos":[19513,19525]},{"content":"Returns the minute, based on local time, in the range 0 through 59.","pos":[19529,19596]},{"content":"Remarks","pos":[19606,19613]},{"content":"This function calls <ph id=\"ph1\">`GetLocalTm`</ph>, which uses an internal statically allocated buffer.","pos":[19617,19702],"source":"This function calls `GetLocalTm`, which uses an internal statically allocated buffer."},{"content":"The data in this buffer is overwritten because of calls to other <ph id=\"ph1\">`CTime`</ph> member functions.","pos":[19703,19793],"source":" The data in this buffer is overwritten because of calls to other `CTime` member functions."},{"content":"Example","pos":[19803,19810]},{"pos":[19814,19861],"content":"See the example for <bpt id=\"p1\">[</bpt>GetHour<ept id=\"p1\">](#ctime__gethour)</ept>.","source":"See the example for [GetHour](#ctime__gethour)."},{"pos":[19903,19918],"content":"CTime::GetMonth"},{"pos":[19922,19974],"content":"Returns the month represented by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the month represented by the `CTime` object."},{"content":"Return Value","pos":[20038,20050]},{"content":"Returns the month, based on local time, in the range 1 through 12 (1 = January).","pos":[20054,20134]},{"content":"Remarks","pos":[20144,20151]},{"content":"This function calls <ph id=\"ph1\">`GetLocalTm`</ph>, which uses an internal statically allocated buffer.","pos":[20155,20240],"source":"This function calls `GetLocalTm`, which uses an internal statically allocated buffer."},{"content":"The data in this buffer is overwritten because of calls to other <ph id=\"ph1\">`CTime`</ph> member functions.","pos":[20241,20331],"source":" The data in this buffer is overwritten because of calls to other `CTime` member functions."},{"content":"Example","pos":[20341,20348]},{"pos":[20352,20397],"content":"See the example for <bpt id=\"p1\">[</bpt>GetDay<ept id=\"p1\">](#ctime__getday)</ept>.","source":"See the example for [GetDay](#ctime__getday)."},{"pos":[20440,20456],"content":"CTime::GetSecond"},{"pos":[20460,20513],"content":"Returns the second represented by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the second represented by the `CTime` object."},{"content":"Return Value","pos":[20578,20590]},{"content":"Returns the second, based on local time, in the range 0 through 59.","pos":[20594,20661]},{"content":"Remarks","pos":[20671,20678]},{"content":"This function calls <ph id=\"ph1\">`GetLocalTm`</ph>, which uses an internal statically allocated buffer.","pos":[20682,20767],"source":"This function calls `GetLocalTm`, which uses an internal statically allocated buffer."},{"content":"The data in this buffer is overwritten because of calls to other <ph id=\"ph1\">`CTime`</ph> member functions.","pos":[20768,20858],"source":" The data in this buffer is overwritten because of calls to other `CTime` member functions."},{"content":"Example","pos":[20868,20875]},{"pos":[20879,20926],"content":"See the example for <bpt id=\"p1\">[</bpt>GetHour<ept id=\"p1\">](#ctime__gethour)</ept>.","source":"See the example for [GetHour](#ctime__gethour)."},{"pos":[20967,20981],"content":"CTime::GetTime"},{"pos":[20985,21045],"content":"Returns a <bpt id=\"p1\">**</bpt>__time64_t<ept id=\"p1\">**</ept> value for the given <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns a **__time64_t** value for the given `CTime` object."},{"content":"Return Value","pos":[21115,21127]},{"pos":[21131,21232],"content":"<bpt id=\"p1\">**</bpt>GetTime<ept id=\"p1\">**</ept> will return the number of seconds between the current <ph id=\"ph1\">`CTime`</ph> object and January 1, 1970.","source":"**GetTime** will return the number of seconds between the current `CTime` object and January 1, 1970."},{"content":"Example","pos":[21242,21249]},{"pos":[21264,21288],"content":"NVC_ATLMFC_Utilities#158"},{"pos":[21388,21402],"content":"CTime::GetYear"},{"pos":[21406,21457],"content":"Returns the year represented by the <ph id=\"ph1\">`CTime`</ph> object.","source":"Returns the year represented by the `CTime` object."},{"content":"Return Value","pos":[21497,21509]},{"content":"Returns the year, based on local time, in the range January 1,1970, to January 18, 2038 (inclusive).","pos":[21513,21613]},{"content":"Remarks","pos":[21623,21630]},{"content":"This function calls <ph id=\"ph1\">`GetLocalTm`</ph>, which uses an internal statically allocated buffer.","pos":[21634,21719],"source":"This function calls `GetLocalTm`, which uses an internal statically allocated buffer."},{"content":"The data in this buffer is overwritten because of calls to other <ph id=\"ph1\">`CTime`</ph> member functions.","pos":[21720,21810],"source":" The data in this buffer is overwritten because of calls to other `CTime` member functions."},{"content":"Example","pos":[21820,21827]},{"pos":[21831,21876],"content":"See the example for <bpt id=\"p1\">[</bpt>GetDay<ept id=\"p1\">](#ctime__getday)</ept>.","source":"See the example for [GetDay](#ctime__getday)."},{"pos":[21922,21939],"content":"CTime::operator ="},{"content":"The assignment operator.","pos":[21943,21967]},{"content":"Parameters","pos":[22035,22045]},{"content":"The new date/time value.","pos":[22059,22083]},{"content":"Return Value","pos":[22093,22105]},{"pos":[22109,22136],"content":"The updated <ph id=\"ph1\">`CTime`</ph> object.","source":"The updated `CTime` object."},{"content":"Remarks","pos":[22146,22153]},{"content":"This overloaded assignment operator copies the source time into this <ph id=\"ph1\">`CTime`</ph> object.","pos":[22157,22241],"source":"This overloaded assignment operator copies the source time into this `CTime` object."},{"content":"The internal time storage in a <ph id=\"ph1\">`CTime`</ph> object is independent of time zone.","pos":[22242,22316],"source":" The internal time storage in a `CTime` object is independent of time zone."},{"content":"Time zone conversion is not necessary during assignment.","pos":[22317,22373]},{"pos":[22422,22442],"content":"CTime::operator +, -"},{"pos":[22446,22511],"content":"These operators add and subtract <ph id=\"ph1\">`CTimeSpan`</ph> and <ph id=\"ph2\">`CTime`</ph> objects.","source":"These operators add and subtract `CTimeSpan` and `CTime` objects."},{"content":"Parameters","pos":[22702,22712]},{"content":"timeSpan","pos":[22717,22725]},{"content":"The <ph id=\"ph1\">`CTimeSpan`</ph> object to be added or subtracted.","pos":[22730,22779],"source":" The `CTimeSpan` object to be added or subtracted."},{"content":"The <ph id=\"ph1\">`CTime`</ph> object to be subtracted.","pos":[22796,22832],"source":" The `CTime` object to be subtracted."},{"content":"Return Value","pos":[22842,22854]},{"pos":[22858,22931],"content":"A <ph id=\"ph1\">`CTime`</ph> or <ph id=\"ph2\">`CTimeSpan`</ph> object representing the result of the operation.","source":"A `CTime` or `CTimeSpan` object representing the result of the operation."},{"content":"Remarks","pos":[22941,22948]},{"content":"objects represent absolute time, <ph id=\"ph1\">`CTimeSpan`</ph> objects represent relative time.","pos":[22960,23037],"source":" objects represent absolute time, `CTimeSpan` objects represent relative time."},{"content":"The first two operators allow you to add and subtract <ph id=\"ph1\">`CTimeSpan`</ph> objects to and from <ph id=\"ph2\">`CTime`</ph> objects.","pos":[23038,23140],"source":" The first two operators allow you to add and subtract `CTimeSpan` objects to and from `CTime` objects."},{"content":"The third operator allows you to subtract one <ph id=\"ph1\">`CTime`</ph> object from another to yield a <ph id=\"ph2\">`CTimeSpan`</ph> object.","pos":[23141,23245],"source":" The third operator allows you to subtract one `CTime` object from another to yield a `CTimeSpan` object."},{"content":"Example","pos":[23255,23262]},{"pos":[23277,23301],"content":"NVC_ATLMFC_Utilities#159"},{"pos":[23415,23437],"content":"CTime::operator +=, -="},{"pos":[23441,23527],"content":"These operators add and subtract a <ph id=\"ph1\">`CTimeSpan`</ph> object to and from this <ph id=\"ph2\">`CTime`</ph> object.","source":"These operators add and subtract a `CTimeSpan` object to and from this `CTime` object."},{"content":"Parameters","pos":[23645,23655]},{"content":"The <ph id=\"ph1\">`CTimeSpan`</ph> object to be added or subtracted.","pos":[23669,23718],"source":" The `CTimeSpan` object to be added or subtracted."},{"content":"Return Value","pos":[23728,23740]},{"pos":[23744,23771],"content":"The updated <ph id=\"ph1\">`CTime`</ph> object.","source":"The updated `CTime` object."},{"content":"Remarks","pos":[23781,23788]},{"pos":[23792,23891],"content":"These operators allow you to add and subtract a <ph id=\"ph1\">`CTimeSpan`</ph> object to and from this <ph id=\"ph2\">`CTime`</ph> object.","source":"These operators allow you to add and subtract a `CTimeSpan` object to and from this `CTime` object."},{"content":"Example","pos":[23901,23908]},{"pos":[23923,23947],"content":"NVC_ATLMFC_Utilities#160"},{"pos":[24051,24069],"content":"CTime::Serialize64"},{"pos":[24077,24134],"content":"[!NOTE]\n This method is only available in MFC projects.","leadings":["","> "],"nodes":[{"content":"This method is only available in MFC projects.","pos":[9,55]}]},{"content":"Serializes the data associated with the member variable to or from an archive.","pos":[24141,24219]},{"content":"Parameters","pos":[24281,24291]},{"content":"The <ph id=\"ph1\">`CArchive`</ph> object that you want to update.","pos":[24303,24349],"source":" The `CArchive` object that you want to update."},{"content":"Return Value","pos":[24359,24371]},{"pos":[24375,24405],"content":"The updated <ph id=\"ph1\">`CArchive`</ph> object.","source":"The updated `CArchive` object."},{"content":"See Also","pos":[24414,24422]},{"content":"asctime_s, _wasctime_s","pos":[24427,24449]},{"content":"_ftime_s, _ftime32_s, _ftime64_s","pos":[24515,24547]},{"content":"gmtime_s, _gmtime32_s, _gmtime64_s","pos":[24620,24654]},{"content":"localtime_s, _localtime32_s, _localtime64_s","pos":[24730,24773]},{"content":"strftime, wcsftime, _strftime_l, _wcsftime_l","pos":[24858,24902]},{"content":"time, _time32, _time64","pos":[24987,25009]},{"content":"CTimeSpan Class","pos":[25073,25088]},{"content":"Hierarchy Chart","pos":[25146,25161]},{"content":"ATL/MFC Shared Classes","pos":[25198,25220]}],"content":"---\ntitle: \"CTime Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CTime\"\n  - \"CTime\"\n  - \"ATL::CTime\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CTime class\"\n  - \"shared classes, CTime\"\nms.assetid: 0a299544-485b-48dc-9d3c-fdc30f57d612\ncaps.latest.revision: 30\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CTime Class\nRepresents an absolute time and date.  \n  \n## Syntax  \n  \n```  \nclass CTime  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CTime::CTime](#ctime__ctime)|Constructs `CTime` objects in various ways.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CTime::Format](#ctime__format)|Converts a `CTime` object into a formatted string — based on the local time zone.|  \n|[CTime::FormatGmt](#ctime__formatgmt)|Converts a `CTime` object into a formatted string — based on UTC.|  \n|[CTime::GetAsDBTIMESTAMP](#ctime__getasdbtimestamp)|Converts the time information stored in the `CTime` object to a Win32-compatible DBTIMESTAMP structure.|  \n|[CTime::GetAsSystemTime](#ctime__getassystemtime)|Converts the time information stored in the `CTime` object to a Win32-compatible [SYSTEMTIME](http://msdn.microsoft.com/library/windows/desktop/ms724950) structure.|  \n|[CTime::GetCurrentTime](#ctime__getcurrenttime)|Creates a `CTime` object that represents the current time (static member function).|  \n|[CTime::GetDay](#ctime__getday)|Returns the day represent by the `CTime` object.|  \n|[CTime::GetDayOfWeek](#ctime__getdayofweek)|Returns the day of the week represented by the `CTime` object.|  \n|[CTime::GetGmtTm](#ctime__getgmttm)|Breaks down a `CTime` object into components — based on UTC.|  \n|[CTime::GetHour](#ctime__gethour)|Returns the hour represented by the `CTime` object.|  \n|[CTime::GetLocalTm](#ctime__getlocaltm)|Breaks down a `CTime` object into components — based on the local time zone.|  \n|[CTime::GetMinute](#ctime__getminute)|Returns the minute represented by the `CTime` object.|  \n|[CTime::GetMonth](#ctime__getmonth)|Returns the month represented by the `CTime` object.|  \n|[CTime::GetSecond](#ctime__getsecond)|Returns the second represented by the `CTime` object.|  \n|[CTime::GetTime](#ctime__gettime)|Returns a **__time64_t** value for the given `CTime` object.|  \n|[CTime::GetYear](#ctime__getyear)|Returns the year represented by the `CTime` object.|  \n|[CTime::Serialize64](#ctime__serialize64)|Serializes data to or from an archive.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator + –](#ctime__operator__add_-)|These operators add and subtract `CTimeSpan` and `CTime` objects.|  \n|[operator +=, –=](#ctime__operator__add_eq_-_eq)|These operators add and subtract a `CTimeSpan` object to and from this `CTime` object.|  \n|[operator =](#ctime__operator__eq)|The assignment operator.|  \n|[operator ==, < , etc.](#ctime_comparison_operators)|Comparison operators.|  \n  \n## Remarks  \n `CTime` does not have a base class.  \n  \n `CTime` values are based on coordinated universal time (UTC), which is equivalent to Coordinated Universal time (Greenwich Mean Time, GMT). See [Time Management](../../c-runtime-library/time-management.md) for information about how the time zone is determined.  \n  \n When you create a `CTime` object, set the `nDST` parameter to 0 to indicate that standard time is in effect, or to a value larger than 0 to indicate that daylight saving time is in effect, or to a value less than zero to have the C run-time library code compute whether standard time or daylight saving time is in effect. `tm_isdst` is a required field. If not set, its value is undefined and the return value from [mktime](../../c-runtime-library/reference/mktime-mktime32-mktime64.md) is unpredictable. If `timeptr` points to a tm structure returned by a previous call to [asctime_s](../../c-runtime-library/reference/asctime-s-wasctime-s.md), [_gmtime_s](../../c-runtime-library/reference/gmtime-s-gmtime32-s-gmtime64-s.md), or [localtime_s](../../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md), the `tm_isdst` field contains the correct value.  \n  \n A companion class, [CTimeSpan](../../atl-mfc-shared/reference/ctimespan-class.md), represents a time interval.  \n  \n The `CTime` and `CTimeSpan` classes are not designed for derivation. Because there are no virtual functions, the size of `CTime` and `CTimeSpan` objects is exactly 8 bytes. Most member functions are inline.  \n  \n> [!NOTE]\n>  The upper date limit is 12/31/3000. The lower limit is 1/1/1970 12:00:00 AM GMT.  \n  \n For more information about using `CTime`, see the articles [Date and Time](../../atl-mfc-shared/date-and-time.md), and [Time Management](../../c-runtime-library/time-management.md) in the Run-Time Library Reference.  \n  \n> [!NOTE]\n>  The `CTime` structure changed from MFC 7.1 to MFC 8.0. If you serialize a `CTime` structure by using the `operator <<` under MFC 8.0 or a later version, the resulting file will not be readable on older versions of MFC.  \n  \n## Requirements  \n **Header:** atltime.h  \n  \n##  <a name=\"ctime_comparison_operators\"></a>  CTime Comparison Operators  \n Comparison operators.  \n  \n```  \nbool operator==(CTime time) const throw();\n\n \n    bool operator!=(CTime time) const throw();\n\n \n    bool operator<(CTime time) const throw();\n\n \n    bool operator>(CTime time) const throw();\n\n \n    bool operator<=(CTime time) const throw();\n\n \n    bool operator>=(CTime time) const throw();\n\n \n```  \n  \n### Parameters  \n `time`  \n The `CTime` object to be compared.  \n  \n### Return Value  \n These operators compare two absolute times and return **true** if the condition is true; otherwise **false**.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#161](../../atl-mfc-shared/codesnippet/cpp/ctime-class_1.cpp)]  \n  \n##  <a name=\"ctime__ctime\"></a>  CTime::CTime  \n Creates a new `CTime` object initialized with the specified time.  \n  \n```  \nCTime() throw();\n\n \n    CTime(\n __time64_t  time) throw();\n\n \n    CTime(\n int  nYear,  \n    int nMonth,  \n    int nDay,  \n    int nHour,  \n    int nMin,  \n    int nSec,  \n    int nDST = -1);\n\n \n    CTime(\n WORD  wDosDate,  \n    WORD wDosTime,  \n    int nDST = -1);\n\n \n    CTime(\n const SYSTEMTIME& st,  \n    int nDST = - 1) throw();\n\n \n    CTime(\n const FILETIME& ft,  \n    int nDST = - 1);\n\n \n    CTime(\n const DBTIMESTAMP& dbts,  \n    int nDST = -1) throw();\n```  \n  \n### Parameters  \n `timeSrc`  \n Indicates a `CTime` object that already exists.  \n  \n `time`  \n A **__time64_t** time value, which is the number of seconds after January 1, 1970 UTC. Note that this will be adjusted to your local time. For example, if you are in New York and create a `CTime` object by passing a parameter of 0, [CTime::GetMonth](#ctime__getmonth) will return 12.  \n  \n In Visual C++ versions 6.0 and earlier, `time` was a value of `time_t`. Visual C++ .NET and later converts a `time_t` parameter to **__time64_t**.  \n  \n `nYear`, `nMonth`, `nDay`, `nHour`, `nMin`, `nSec`  \n Indicates the date and time values to be copied into the new `CTime` object.  \n  \n `nDST`  \n Indicates whether daylight savings time is in effect. Can have one of three values:  \n  \n- `nDST` set to 0Standard time is in effect.  \n  \n- `nDST` set to a value greater than 0Daylight savings time is in effect.  \n  \n- `nDST` set to a value less than 0The default. Automatically computes whether standard time or daylight savings time is in effect.  \n  \n `wDosDate`, `wDosTime`  \n MS-DOS date and time values to be converted to a date/time value and copied into the new `CTime` object.  \n  \n `st`  \n A [SYSTEMTIME](https://www.microsoftonedoc.com/#/organizations/e6f6a65cf14f462597b64ac058dbe1d0/projects/3fedad16-eaf1-41a6-8f96-0c1949c68f32/containers/a3daf831-1c5f-4bbe-964d-503870caf874/tocpaths/d6609fff-1931-4818-8a26-f042630af0b0/locales/en-us) structure to be converted to a date/time value and copied into the new `CTime` object.  \n  \n `ft`  \n A [FILETIME](https://www.microsoftonedoc.com/#/organizations/e6f6a65cf14f462597b64ac058dbe1d0/projects/3fedad16-eaf1-41a6-8f96-0c1949c68f32/containers/a3daf831-1c5f-4bbe-964d-503870caf874/tocpaths/979ce746-dc17-4147-89f8-41d05c5fcc5f/locales/en-us) structure to be converted to a date/time value and copied into the new `CTime` object.  \n  \n dbts  \n A reference to a DBTIMESTAMP structure containing the current local time.  \n  \n### Remarks  \n Each constructor is described below:  \n  \n- **CTime( );**Constructs an uninitialized `CTime` object. This constructor allows you to define `CTime` object arrays. You should initialize such arrays with valid times before using.  \n  \n- **CTime( const CTime& );**Constructs a `CTime` object from another `CTime` value.  \n  \n- **CTime( __time64_t );**Constructs a `CTime` object from a **__time64_t** type. This constructor expects a UTC time and converts the result to a local time before storing the result.  \n  \n- **CTime( int, int, ...);**Constructs a `CTime` object from local time components with each component constrained to the following ranges:  \n  \n    |Component|Range|  \n    |---------------|-----------|  \n    |`nYear`|1970–3000|  \n    |`nMonth`|1–12|  \n    |`nDay`|1–31|  \n    |`nHour`|0-23|  \n    |`nMin`|0-59|  \n    |`nSec`|0-59|  \n  \n     This constructor makes the appropriate conversion to UTC. The Debug version of the Microsoft Foundation Class Library asserts if one or more of the time components are out of range. You must validate the arguments before calling. This constructor expects a local time.  \n  \n- `CTime`( **WORD, WORD** ) **;**Constructs a `CTime` object from the specified MS-DOS date and time values. This constructor expects a local time.  \n  \n- `CTime`( **const SYSTEMTIME&** ) **;**Constructs a `CTime` object from a `SYSTEMTIME` structure. This constructor expects a local time.  \n  \n- `CTime`( **const FILETIME&** ) **;**Constructs a `CTime` object from a `FILETIME` structure. You most likely will not use `CTime``FILETIME` initialization directly. If you use a `CFile` object to manipulate a file, `CFile::GetStatus` retrieves the file time stamp for you through a `CTime` object initialized with a `FILETIME` structure. This constructor assumes a time based on UTC and automatically converts the value to local time before storing the result.  \n  \n    > [!NOTE]\n    >  The constructor using **DBTIMESTAMP** parameter is only available when OLEDB.h is included.  \n  \n For more information, see the [SYSTEMTIME](http://msdn.microsoft.com/library/windows/desktop/ms724950) and [FILETIME](http://msdn.microsoft.com/library/windows/desktop/ms724284) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. Also see the [MS-DOS Date and Time](http://msdn.microsoft.com/library/windows/desktop/ms724503) entry in the [!INCLUDE[winsdkshort](../../atl-mfc-shared/reference/includes/winsdkshort_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#148](../../atl-mfc-shared/codesnippet/cpp/ctime-class_2.cpp)]  \n  \n##  <a name=\"ctime__format\"></a>  CTime::Format  \n Call this member function to create a formatted representation of the date-time value.  \n  \n```  \nCString Format(LPCTSTR pszFormat) const;\n\n \nCString Format(UINT nFormatID) const;\n\n \n```  \n  \n### Parameters  \n `pszFormat`  \n A formatting string similar to the `printf` formatting string. Formatting codes, preceded by a percent ( `%`) sign, are replaced by the corresponding `CTime` component. Other characters in the formatting string are copied unchanged to the returned string. See the run-time function [strftime](../../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for a list of formatting codes.  \n  \n `nFormatID`  \n The ID of the string that identifies this format.  \n  \n### Return Value  \n A [CString](../../atl-mfc-shared/reference/cstringt-class.md) that contains the formatted time.  \n  \n### Remarks  \n If the status of this `CTime` object is null, the return value is an empty string.  \n  \n This method throws an exception if the date-time value to format does not range from midnight, January 1, 1970 through December 31, 3000 Universal Coordinated Time (UTC).  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#149](../../atl-mfc-shared/codesnippet/cpp/ctime-class_3.cpp)]  \n  \n##  <a name=\"ctime__formatgmt\"></a>  CTime::FormatGmt  \n Generates a formatted string that corresponds to this `CTime` object.  \n  \n```  \nCString FormatGmt(LPCTSTR pszFormat) const;\n\n \nCString FormatGmt(UINT nFormatID) const;\n\n \n```  \n  \n### Parameters  \n `pszFormat`  \n Specifies a formatting string similar to the `printf` formatting string. See the run-time function [strftime](../../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md) for details.  \n  \n `nFormatID`  \n The ID of the string that identifies this format.  \n  \n### Return Value  \n A [CString](../../atl-mfc-shared/reference/cstringt-class.md) that contains the formatted time.  \n  \n### Remarks  \n The time value is not converted and thus reflects UTC.  \n  \n This method throws an exception if the date-time value to format does not range from midnight, January 1, 1970 through December 31, 3000 Universal Coordinated Time (UTC).  \n  \n### Example  \n See the example for [CTime::Format](#ctime__format).  \n  \n##  <a name=\"ctime__getasdbtimestamp\"></a>  CTime::GetAsDBTIMESTAMP  \n Call this member function to convert the time information stored in the `CTime` object to a Win32–compatible DBTIMESTAMP structure.  \n  \n```  \nbool GetAsDBTIMESTAMP(DBTIMESTAMP& dbts) const throw();\n```  \n  \n### Parameters  \n `dbts`  \n A reference to a DBTIMESTAMP structure containing the current local time.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Stores the resulting time in the referenced `dbts` structure. The **DBTIMESTAMP** data structure initialized by this function will have its **fraction** member set to zero.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#150](../../atl-mfc-shared/codesnippet/cpp/ctime-class_4.cpp)]  \n  \n##  <a name=\"ctime__getassystemtime\"></a>  CTime::GetAsSystemTime  \n Call this member function to convert the time information stored in the `CTime` object to a Win32–compatible [SYSTEMTIME](http://msdn.microsoft.com/library/windows/desktop/ms724950) structure.  \n  \n```  \nbool GetAsSystemTime(SYSTEMTIME& st) const throw();\n```  \n  \n### Parameters  \n *timeDest*  \n A reference to a [SYSTEMTIME](http://msdn.microsoft.com/library/windows/desktop/ms724950) structure that will hold the converted date/time value of the `CTime` object.  \n  \n### Return Value  \n True if successful; otherwise false.  \n  \n### Remarks  \n `GetAsSystemTime` stores the resulting time in the referenced *timeDest* structure. The `SYSTEMTIME` data structure initialized by this function will have its **wMilliseconds** member set to zero.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#151](../../atl-mfc-shared/codesnippet/cpp/ctime-class_5.cpp)]  \n  \n##  <a name=\"ctime__getcurrenttime\"></a>  CTime::GetCurrentTime  \n Returns a `CTime` object that represents the current time.  \n  \n```  \nstatic  \n    CTime \n    WINAPI \n    GetCurrentTime() throw();\n```  \n  \n### Remarks  \n Returns the current system date and time in Coordinated Universal Time (UTC).  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#152](../../atl-mfc-shared/codesnippet/cpp/ctime-class_6.cpp)]  \n  \n##  <a name=\"ctime__getday\"></a>  CTime::GetDay  \n Returns the day represent by the `CTime` object.  \n  \n```  \nint  \n    GetDay() const throw();\n\n \n```  \n  \n### Return Value  \n Returns the day of the month, based on local time, in the range 1 through 31.  \n  \n### Remarks  \n This function calls `GetLocalTm`, which uses an internal, statically allocated buffer. The data in this buffer is overwritten because of calls to other `CTime` member functions.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#153](../../atl-mfc-shared/codesnippet/cpp/ctime-class_7.cpp)]  \n  \n##  <a name=\"ctime__getdayofweek\"></a>  CTime::GetDayOfWeek  \n Returns the day of the week represented by the `CTime` object.  \n  \n```  \nint  \n    GetDayOfWeek() const throw();\n\n \n```  \n  \n### Return Value  \n Returns the day of the week based on local time; 1 = Sunday, 2 = Monday, to 7 = Saturday.  \n  \n### Remarks  \n This function calls `GetLocalTm`, which uses an internal statically allocated buffer. The data in this buffer is overwritten because of calls to other `CTime` member functions.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#154](../../atl-mfc-shared/codesnippet/cpp/ctime-class_8.cpp)]  \n  \n##  <a name=\"ctime__getgmttm\"></a>  CTime::GetGmtTm  \n Gets a **struct tm** that contains a decomposition of the time contained in this `CTime` object.  \n  \n```  \nstruct  \n    tm* \n    GetGmtTm(struct   \n    tm* ptm)  \n    const;\n\n \n```  \n  \n### Parameters  \n `ptm`  \n Points to a buffer that will receive the time data. If this pointer is **NULL**, an exception is thrown.  \n  \n### Return Value  \n A pointer to a filled-in **struct tm** as defined in the include file TIME.H. See [gmtime, _gmtime32, _gmtime64](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md) for the structure layout.  \n  \n### Remarks  \n `GetGmtTm` returns UTC.  \n  \n `ptm` cannot be `NULL`. If you want to revert to the old behavior, in which `ptm` could be `NULL` to indicate that an internal, statically allocated buffer should be used, then undefine `_SECURE_ATL`.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#155](../../atl-mfc-shared/codesnippet/cpp/ctime-class_9.cpp)]  \n  \n##  <a name=\"ctime__gethour\"></a>  CTime::GetHour  \n Returns the hour represented by the `CTime` object.  \n  \n```  \nint  \n    GetHour() const throw();\n\n \n```  \n  \n### Return Value  \n Returns the hour, based on local time, in the range 0 through 23.  \n  \n### Remarks  \n This function calls `GetLocalTm`, which uses an internal statically allocated buffer. The data in this buffer is overwritten because of calls to other `CTime` member functions.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#156](../../atl-mfc-shared/codesnippet/cpp/ctime-class_10.cpp)]  \n  \n##  <a name=\"ctime__getlocaltm\"></a>  CTime::GetLocalTm  \n Gets a **struct tm** containing a decomposition of the time contained in this `CTime` object.  \n  \n```  \nstruct  \n    tm* \n    GetLocalTm(struct   \n    tm* ptm)  \n    const;\n\n \n```  \n  \n### Parameters  \n `ptm`  \n Points to a buffer that will receive the time data. If this pointer is **NULL**, an exception is thrown.  \n  \n### Return Value  \n A pointer to a filled-in **struct tm** as defined in the include file TIME.H. See [gmtime, _gmtime32, _gmtime64](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md) for the structure layout.  \n  \n### Remarks  \n `GetLocalTm` returns local time.  \n  \n `ptm` cannot be `NULL`. If you want to revert to the old behavior, in which `ptm` could be `NULL` to indicate that an internal, statically allocated buffer should be used, then undefine `_SECURE_ATL`.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#157](../../atl-mfc-shared/codesnippet/cpp/ctime-class_11.cpp)]  \n  \n##  <a name=\"ctime__getminute\"></a>  CTime::GetMinute  \n Returns the minute represented by the `CTime` object.  \n  \n```  \nint  \n    GetMinute() const throw();\n\n \n```  \n  \n### Return Value  \n Returns the minute, based on local time, in the range 0 through 59.  \n  \n### Remarks  \n This function calls `GetLocalTm`, which uses an internal statically allocated buffer. The data in this buffer is overwritten because of calls to other `CTime` member functions.  \n  \n### Example  \n See the example for [GetHour](#ctime__gethour).  \n  \n##  <a name=\"ctime__getmonth\"></a>  CTime::GetMonth  \n Returns the month represented by the `CTime` object.  \n  \n```  \nint  \n    GetMonth() const throw();\n\n \n```  \n  \n### Return Value  \n Returns the month, based on local time, in the range 1 through 12 (1 = January).  \n  \n### Remarks  \n This function calls `GetLocalTm`, which uses an internal statically allocated buffer. The data in this buffer is overwritten because of calls to other `CTime` member functions.  \n  \n### Example  \n See the example for [GetDay](#ctime__getday).  \n  \n##  <a name=\"ctime__getsecond\"></a>  CTime::GetSecond  \n Returns the second represented by the `CTime` object.  \n  \n```  \nint  \n    GetSecond() const throw();\n\n \n```  \n  \n### Return Value  \n Returns the second, based on local time, in the range 0 through 59.  \n  \n### Remarks  \n This function calls `GetLocalTm`, which uses an internal statically allocated buffer. The data in this buffer is overwritten because of calls to other `CTime` member functions.  \n  \n### Example  \n See the example for [GetHour](#ctime__gethour).  \n  \n##  <a name=\"ctime__gettime\"></a>  CTime::GetTime  \n Returns a **__time64_t** value for the given `CTime` object.  \n  \n```  \n__time64_t  \n    GetTime() const throw();\n\n \n```  \n  \n### Return Value  \n **GetTime** will return the number of seconds between the current `CTime` object and January 1, 1970.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#158](../../atl-mfc-shared/codesnippet/cpp/ctime-class_12.cpp)]  \n  \n##  <a name=\"ctime__getyear\"></a>  CTime::GetYear  \n Returns the year represented by the `CTime` object.  \n  \n```  \nint GetYear();\n```  \n  \n### Return Value  \n Returns the year, based on local time, in the range January 1,1970, to January 18, 2038 (inclusive).  \n  \n### Remarks  \n This function calls `GetLocalTm`, which uses an internal statically allocated buffer. The data in this buffer is overwritten because of calls to other `CTime` member functions.  \n  \n### Example  \n See the example for [GetDay](#ctime__getday).  \n  \n##  <a name=\"ctime__operator__eq\"></a>  CTime::operator =  \n The assignment operator.  \n  \n```  \nCTime& operator=(__time64_t time) throw();\n```  \n  \n### Parameters  \n `time`  \n The new date/time value.  \n  \n### Return Value  \n The updated `CTime` object.  \n  \n### Remarks  \n This overloaded assignment operator copies the source time into this `CTime` object. The internal time storage in a `CTime` object is independent of time zone. Time zone conversion is not necessary during assignment.  \n  \n##  <a name=\"ctime__operator__add_-\"></a>  CTime::operator +, -  \n These operators add and subtract `CTimeSpan` and `CTime` objects.  \n  \n```  \nCTime operator+(CTimeSpan timeSpan) const throw();\n\n \n    CTime operator-(CTimeSpan timeSpan) const throw();\n\n \n    CTimeSpan operator-(CTime time) const throw();\n\n \n```  \n  \n### Parameters  \n *timeSpan*  \n The `CTimeSpan` object to be added or subtracted.  \n  \n `time`  \n The `CTime` object to be subtracted.  \n  \n### Return Value  \n A `CTime` or `CTimeSpan` object representing the result of the operation.  \n  \n### Remarks  \n `CTime` objects represent absolute time, `CTimeSpan` objects represent relative time. The first two operators allow you to add and subtract `CTimeSpan` objects to and from `CTime` objects. The third operator allows you to subtract one `CTime` object from another to yield a `CTimeSpan` object.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#159](../../atl-mfc-shared/codesnippet/cpp/ctime-class_13.cpp)]  \n  \n##  <a name=\"ctime__operator__add_eq_-_eq\"></a>  CTime::operator +=, -=  \n These operators add and subtract a `CTimeSpan` object to and from this `CTime` object.  \n  \n```  \nCTime& operator+=(CTimeSpan span) throw();\n\n \n    CTime& operator-=(CTimeSpan span) throw();\n```  \n  \n### Parameters  \n `span`  \n The `CTimeSpan` object to be added or subtracted.  \n  \n### Return Value  \n The updated `CTime` object.  \n  \n### Remarks  \n These operators allow you to add and subtract a `CTimeSpan` object to and from this `CTime` object.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#160](../../atl-mfc-shared/codesnippet/cpp/ctime-class_14.cpp)]  \n  \n##  <a name=\"ctime__serialize64\"></a>  CTime::Serialize64  \n  \n> [!NOTE]\n>  This method is only available in MFC projects.  \n  \n Serializes the data associated with the member variable to or from an archive.  \n  \n```  \nCArchive& Serialize64(CArchive& ar);\n```  \n  \n### Parameters  \n `ar`  \n The `CArchive` object that you want to update.  \n  \n### Return Value  \n The updated `CArchive` object.  \n  \n## See Also  \n [asctime_s, _wasctime_s](../../c-runtime-library/reference/asctime-s-wasctime-s.md)   \n [_ftime_s, _ftime32_s, _ftime64_s](../../c-runtime-library/reference/ftime-s-ftime32-s-ftime64-s.md)   \n [gmtime_s, _gmtime32_s, _gmtime64_s](../../c-runtime-library/reference/gmtime-s-gmtime32-s-gmtime64-s.md)   \n [localtime_s, _localtime32_s, _localtime64_s](../../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md)   \n [strftime, wcsftime, _strftime_l, _wcsftime_l](../../c-runtime-library/reference/strftime-wcsftime-strftime-l-wcsftime-l.md)   \n [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md)   \n [CTimeSpan Class](../../atl-mfc-shared/reference/ctimespan-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [ATL/MFC Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md)\n\n\n"}