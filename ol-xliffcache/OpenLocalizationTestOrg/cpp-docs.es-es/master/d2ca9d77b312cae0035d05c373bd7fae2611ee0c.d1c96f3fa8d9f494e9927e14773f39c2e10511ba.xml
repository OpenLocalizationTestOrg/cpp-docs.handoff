{"nodes":[{"pos":[12,41],"content":"bitset Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"bitset Class | Microsoft Docs","pos":[0,29]}]},{"pos":[650,662],"content":"bitset Class","linkify":"bitset Class","nodes":[{"content":"bitset Class","pos":[0,12]}]},{"content":"Describes a type of object that stores a sequence consisting of a fixed number of bits that provide a compact way of keeping flags for a set of items or conditions.","pos":[663,827]},{"content":"The bitset class supports operations on objects of type bitset that contain a collection of bits and provide constant-time access to each bit.","pos":[828,970]},{"pos":[979,985],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1053,1063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept>","pos":[1067,1070],"source":"*N*"},{"content":"Specifies the number of bits in the bitset object with a nonzero integer of type <bpt id=\"p1\">**</bpt>size_t<ept id=\"p1\">**</ept> that must be known at compile time.","pos":[1074,1201],"source":" Specifies the number of bits in the bitset object with a nonzero integer of type **size_t** that must be known at compile time."},{"pos":[1210,1217],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Unlike the similar <bpt id=\"p1\">[</bpt>vector<ph id=\"ph1\">\\&lt;</ph>bool&gt; Class<ept id=\"p1\">](../standard-library/vector-bool-class.md)</ept>, the bitset class does not have iterators and is not an Standard Template Library container.","pos":[1221,1396],"source":"Unlike the similar [vector\\<bool> Class](../standard-library/vector-bool-class.md), the bitset class does not have iterators and is not an Standard Template Library container."},{"content":"It also differs from vector<ph id=\"ph1\">\\&lt;</ph>bool&gt; by being of some specific size that is fixed at compile time in accordance with the size specified by the template parameter <bpt id=\"p1\">**</bpt>N<ept id=\"p1\">**</ept> when the <bpt id=\"p2\">**</bpt>bitset<ph id=\"ph2\">\\&lt;</ph>N<ph id=\"ph3\">\\&gt;</ph><ept id=\"p2\">**</ept> is declared.","pos":[1397,1600],"source":" It also differs from vector\\<bool> by being of some specific size that is fixed at compile time in accordance with the size specified by the template parameter **N** when the **bitset\\<N\\>** is declared."},{"content":"A bit is set if its value is 1 and reset if its value is 0.","pos":[1607,1666]},{"content":"To flip or toggle a bit is to change its value from 1 to 0 or from 0 to 1.","pos":[1667,1741]},{"content":"The <bpt id=\"p1\">**</bpt>N<ept id=\"p1\">**</ept> bits in a bitset are indexed by integer values from 0 to <bpt id=\"p2\">**</bpt>N<ept id=\"p2\">**</ept>Â -Â 1, where 0 indexes the first bit position and <bpt id=\"p3\">**</bpt>N<ept id=\"p3\">**</ept><bpt id=\"p4\">*</bpt>Â<ept id=\"p4\">*</ept> -Â 1 the final bit position.","pos":[1742,1902],"source":" The **N** bits in a bitset are indexed by integer values from 0 to **N**Â -Â 1, where 0 indexes the first bit position and **N***Â* -Â 1 the final bit position."},{"pos":[1912,1924],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[1945,1970],"content":"<bpt id=\"p1\">[</bpt>bitset<ept id=\"p1\">](#bitset__bitset)</ept>","source":"[bitset](#bitset__bitset)"},{"pos":[1971,2123],"content":"Constructs an object of class <ph id=\"ph1\">`bitset\\&lt;N&gt;`</ph> and initializes the bits to zero, to some specified value, or to values obtained from characters in a string.","source":"Constructs an object of class `bitset\\<N>` and initializes the bits to zero, to some specified value, or to values obtained from characters in a string."},{"pos":[2134,2142],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"pos":[2163,2200],"content":"<bpt id=\"p1\">[</bpt>element_type<ept id=\"p1\">](#bitset__element_type)</ept>","source":"[element_type](#bitset__element_type)"},{"pos":[2201,2307],"content":"A type that is a synonym for the data type <ph id=\"ph1\">`bool`</ph> and can be used to reference element bits in a <ph id=\"ph2\">`bitset`</ph>.","source":"A type that is a synonym for the data type `bool` and can be used to reference element bits in a `bitset`."},{"pos":[2318,2334],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[2355,2374],"content":"<bpt id=\"p1\">[</bpt>all<ept id=\"p1\">](#bitset__all)</ept>","source":"[all](#bitset__all)"},{"pos":[2375,2462],"content":"Tests all of the bits in this <ph id=\"ph1\">`bitset`</ph> to determine whether they are all set to <ph id=\"ph2\">`true`</ph>.","source":"Tests all of the bits in this `bitset` to determine whether they are all set to `true`."},{"pos":[2467,2486],"content":"<bpt id=\"p1\">[</bpt>any<ept id=\"p1\">](#bitset__any)</ept>","source":"[any](#bitset__any)"},{"content":"The member function tests whether any bit in the sequence is set to 1.","pos":[2487,2557]},{"pos":[2562,2585],"content":"<bpt id=\"p1\">[</bpt>count<ept id=\"p1\">](#bitset__count)</ept>","source":"[count](#bitset__count)"},{"content":"The member function returns the number of bits set in the bit sequence.","pos":[2586,2657]},{"pos":[2662,2683],"content":"<bpt id=\"p1\">[</bpt>flip<ept id=\"p1\">](#bitset__flip)</ept>","source":"[flip](#bitset__flip)"},{"pos":[2684,2780],"content":"Toggles the value of all the bits in a <ph id=\"ph1\">`bitset`</ph> or toggles a single bit at a specified position.","source":"Toggles the value of all the bits in a `bitset` or toggles a single bit at a specified position."},{"pos":[2785,2806],"content":"<bpt id=\"p1\">[</bpt>none<ept id=\"p1\">](#bitset__none)</ept>","source":"[none](#bitset__none)"},{"pos":[2807,2862],"content":"Tests if no bit has been set to 1 in a <ph id=\"ph1\">`bitset`</ph> object.","source":"Tests if no bit has been set to 1 in a `bitset` object."},{"pos":[2867,2890],"content":"<bpt id=\"p1\">[</bpt>reset<ept id=\"p1\">](#bitset__reset)</ept>","source":"[reset](#bitset__reset)"},{"pos":[2891,2975],"content":"Resets all the bits in a <ph id=\"ph1\">`bitset`</ph> to 0 or resets a bit at a specified position to 0.","source":"Resets all the bits in a `bitset` to 0 or resets a bit at a specified position to 0."},{"pos":[2980,2999],"content":"<bpt id=\"p1\">[</bpt>set<ept id=\"p1\">](#bitset__set)</ept>","source":"[set](#bitset__set)"},{"pos":[3000,3080],"content":"Sets all the bits in a <ph id=\"ph1\">`bitset`</ph> to 1 or sets a bit at a specified position to 1.","source":"Sets all the bits in a `bitset` to 1 or sets a bit at a specified position to 1."},{"pos":[3085,3106],"content":"<bpt id=\"p1\">[</bpt>size<ept id=\"p1\">](#bitset__size)</ept>","source":"[size](#bitset__size)"},{"pos":[3107,3155],"content":"Returns the number of bits in a <ph id=\"ph1\">`bitset`</ph> object.","source":"Returns the number of bits in a `bitset` object."},{"pos":[3160,3181],"content":"<bpt id=\"p1\">[</bpt>test<ept id=\"p1\">](#bitset__test)</ept>","source":"[test](#bitset__test)"},{"pos":[3182,3254],"content":"Tests whether the bit at a specified position in a <ph id=\"ph1\">`bitset`</ph> is set to 1.","source":"Tests whether the bit at a specified position in a `bitset` is set to 1."},{"pos":[3259,3290],"content":"<bpt id=\"p1\">[</bpt>to_string<ept id=\"p1\">](#bitset__to_string)</ept>","source":"[to_string](#bitset__to_string)"},{"pos":[3291,3345],"content":"Converts a <ph id=\"ph1\">`bitset`</ph> object to a string representation.","source":"Converts a `bitset` object to a string representation."},{"pos":[3350,3381],"content":"<bpt id=\"p1\">[</bpt>to_ullong<ept id=\"p1\">](#bitset__to_ullong)</ept>","source":"[to_ullong](#bitset__to_ullong)"},{"pos":[3382,3459],"content":"Returns the sum of the bit values in the <ph id=\"ph1\">`bitset`</ph> as an <ph id=\"ph2\">`unsigned long long`</ph>.","source":"Returns the sum of the bit values in the `bitset` as an `unsigned long long`."},{"pos":[3464,3493],"content":"<bpt id=\"p1\">[</bpt>to_ulong<ept id=\"p1\">](#bitset__to_ulong)</ept>","source":"[to_ulong](#bitset__to_ulong)"},{"pos":[3494,3630],"content":"Converts a <ph id=\"ph1\">`bitset`</ph> object to the <ph id=\"ph2\">`unsigned long`</ph> that would generate the sequence of bits contained if used to initialize the <ph id=\"ph3\">`bitset`</ph>.","source":"Converts a `bitset` object to the `unsigned long` that would generate the sequence of bits contained if used to initialize the `bitset`."},{"pos":[3641,3655],"content":"Member Classes","linkify":"Member Classes","nodes":[{"content":"Member Classes","pos":[0,14]}]},{"pos":[3676,3707],"content":"<bpt id=\"p1\">[</bpt>reference<ept id=\"p1\">](#bitset__reference)</ept>","source":"[reference](#bitset__reference)"},{"pos":[3708,3894],"content":"A proxy class that provides references to bits contained in a <ph id=\"ph1\">`bitset`</ph> that is used to access and manipulate the individual bits as a helper class for the <ph id=\"ph2\">`operator[]`</ph> of class <ph id=\"ph3\">`bitset`</ph>.","source":"A proxy class that provides references to bits contained in a `bitset` that is used to access and manipulate the individual bits as a helper class for the `operator[]` of class `bitset`."},{"pos":[3905,3914],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"pos":[3935,3970],"content":"<bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#bitset__operator_neq)</ept>","source":"[operator!=](#bitset__operator_neq)"},{"pos":[3971,4036],"content":"Tests a target <ph id=\"ph1\">`bitset`</ph> for inequality with a specified <ph id=\"ph2\">`bitset`</ph>.","source":"Tests a target `bitset` for inequality with a specified `bitset`."},{"pos":[4041,4080],"content":"<bpt id=\"p1\">[</bpt>operator&amp;=<ept id=\"p1\">](#bitset__operator_amp__eq)</ept>","source":"[operator&=](#bitset__operator_amp__eq)"},{"pos":[4081,4156],"content":"Performs a bitwise combination of bitsets with the logical <ph id=\"ph1\">`AND`</ph> operation.","source":"Performs a bitwise combination of bitsets with the logical `AND` operation."},{"pos":[4161,4200],"content":"<bpt id=\"p1\">[</bpt>operator&lt;&lt;<ept id=\"p1\">](#bitset__operator_lt__lt_)</ept>","source":"[operator<<](#bitset__operator_lt__lt_)"},{"pos":[4201,4316],"content":"Shifts the bits in a <ph id=\"ph1\">`bitset`</ph> to the left a specified number of positions and returns the result to a new <ph id=\"ph2\">`bitset`</ph>.","source":"Shifts the bits in a `bitset` to the left a specified number of positions and returns the result to a new `bitset`."},{"pos":[4321,4364],"content":"<bpt id=\"p1\">[</bpt>operator&lt;&lt;=<ept id=\"p1\">](#bitset__operator_lt__lt__eq)</ept>","source":"[operator<<=](#bitset__operator_lt__lt__eq)"},{"pos":[4365,4487],"content":"Shifts the bits in a <ph id=\"ph1\">`bitset`</ph> to the left a specified number of positions and returns the result to the targeted <ph id=\"ph2\">`bitset`</ph>.","source":"Shifts the bits in a `bitset` to the left a specified number of positions and returns the result to the targeted `bitset`."},{"pos":[4492,4529],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#bitset__operator_eq_eq)</ept>","source":"[operator==](#bitset__operator_eq_eq)"},{"pos":[4530,4593],"content":"Tests a target <ph id=\"ph1\">`bitset`</ph> for equality with a specified <ph id=\"ph2\">`bitset`</ph>.","source":"Tests a target `bitset` for equality with a specified `bitset`."},{"pos":[4598,4637],"content":"<bpt id=\"p1\">[</bpt>operator&gt;&gt;<ept id=\"p1\">](#bitset__operator_gt__gt_)</ept>","source":"[operator>>](#bitset__operator_gt__gt_)"},{"pos":[4638,4754],"content":"Shifts the bits in a <ph id=\"ph1\">`bitset`</ph> to the right a specified number of positions and returns the result to a new <ph id=\"ph2\">`bitset`</ph>.","source":"Shifts the bits in a `bitset` to the right a specified number of positions and returns the result to a new `bitset`."},{"pos":[4759,4802],"content":"<bpt id=\"p1\">[</bpt>operator&gt;&gt;=<ept id=\"p1\">](#bitset__operator_gt__gt__eq)</ept>","source":"[operator>>=](#bitset__operator_gt__gt__eq)"},{"pos":[4803,4926],"content":"Shifts the bits in a <ph id=\"ph1\">`bitset`</ph> to the right a specified number of positions and returns the result to the targeted <ph id=\"ph2\">`bitset`</ph>.","source":"Shifts the bits in a `bitset` to the right a specified number of positions and returns the result to the targeted `bitset`."},{"pos":[4931,4973],"content":"<bpt id=\"p1\">[</bpt>operator&amp;#91;&amp;#93;<ept id=\"p1\">](#bitset__operator_at)</ept>","source":"[operator&#91;&#93;](#bitset__operator_at)"},{"pos":[4974,5132],"content":"Returns a reference to a bit at a specified position in a <ph id=\"ph1\">`bitset`</ph> if the <ph id=\"ph2\">`bitset`</ph> is modifiable; otherwise, it returns the value of the bit at that position.","source":"Returns a reference to a bit at a specified position in a `bitset` if the `bitset` is modifiable; otherwise, it returns the value of the bit at that position."},{"pos":[5137,5175],"content":"<bpt id=\"p1\">[</bpt>operator^=<ept id=\"p1\">](#bitset__operator_xor_eq)</ept>","source":"[operator^=](#bitset__operator_xor_eq)"},{"pos":[5176,5252],"content":"Performs a bitwise combination of bitsets with the exclusive <ph id=\"ph1\">`OR`</ph> operation.","source":"Performs a bitwise combination of bitsets with the exclusive `OR` operation."},{"pos":[5257,5300],"content":"<bpt id=\"p1\">[</bpt>operator&amp;#124;=<ept id=\"p1\">](#bitset__operator_or_eq')</ept>","source":"[operator&#124;=](#bitset__operator_or_eq')"},{"pos":[5301,5377],"content":"Performs a bitwise combination of bitsets with the inclusive <ph id=\"ph1\">`OR`</ph> operation.","source":"Performs a bitwise combination of bitsets with the inclusive `OR` operation."},{"pos":[5382,5417],"content":"<bpt id=\"p1\">[</bpt>operator~<ept id=\"p1\">](#bitset__operator_dtor)</ept>","source":"[operator~](#bitset__operator_dtor)"},{"pos":[5418,5483],"content":"Toggles all the bits in a target <ph id=\"ph1\">`bitset`</ph> and returns the result.","source":"Toggles all the bits in a target `bitset` and returns the result."},{"pos":[5493,5505],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5509,5530],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>bitset&gt;","source":"**Header:** \\<bitset>"},{"pos":[5537,5555],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5565,5604],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__all\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::all","linkify":"<a name=\"bitset__all\"></a>  bitset::all","source":"<a name=\"bitset__all\"></a>  bitset::all"},{"content":"Tests all of the bits in this bitset to determine if they are all set to true.","pos":[5608,5686]},{"pos":[5731,5743],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns true if all bits in this set are true.","pos":[5747,5793]},{"content":"Returns <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> if one or more bits are false.","pos":[5794,5842],"source":" Returns **false** if one or more bits are false."},{"pos":[5852,5891],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__any\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::any","linkify":"<a name=\"bitset__any\"></a>  bitset::any","source":"<a name=\"bitset__any\"></a>  bitset::any"},{"content":"Tests whether any bit in the sequence is set to 1.","pos":[5895,5945]},{"pos":[5990,6002],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6006,6085],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if any bit in the bitset is set to 1; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if all the bits are 0.","source":"**true** if any bit in the bitset is set to 1; **false** if all the bits are 0."},{"pos":[6095,6102],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7177,7222],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__bitset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::bitset","linkify":"<a name=\"bitset__bitset\"></a>  bitset::bitset","source":"<a name=\"bitset__bitset\"></a>  bitset::bitset"},{"pos":[7226,7381],"content":"Constructs an object of class <ph id=\"ph1\">`bitset\\&lt;N&gt;`</ph> and initializes the bits to zero, or to some specified value, or to values obtained from characters in a string.","source":"Constructs an object of class `bitset\\<N>` and initializes the bits to zero, or to some specified value, or to values obtained from characters in a string."},{"pos":[8122,8132],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The unsigned integer whose base two representation is used to initialize the bits in the bitset being constructed.","pos":[8146,8260]},{"content":"The string of zeros and ones used to initialize the bitset bit values.","pos":[8277,8347]},{"content":"A C-style string of zeros and ones used to initialize the bitset bit values.","pos":[8365,8441]},{"content":"The position of the character in the string, counting from left to right and starting with zero, used to initialize the first bit in the bitset.","pos":[8458,8602]},{"content":"The number of characters in the string that is used to provide initial values for the bits in the bitset.","pos":[8621,8726]},{"content":"The character that is used to represent a zero.","pos":[8744,8791]},{"content":"The default is '0'.","pos":[8792,8811]},{"content":"The character that is used to represent a one.","pos":[8828,8874]},{"content":"The default is '1'.","pos":[8875,8894]},{"pos":[8904,8911],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8915,8988],"content":"Three constructors can be used to construct obects of class <ph id=\"ph1\">`bitset\\&lt;N&gt;`</ph>:","source":"Three constructors can be used to construct obects of class `bitset\\<N>`:"},{"pos":[8998,9140],"content":"The first constructor accepts no parameters, constructs an object of class <ph id=\"ph1\">`bitset\\&lt;N&gt;`</ph> and initializes all N bits to a default value of zero.","source":"The first constructor accepts no parameters, constructs an object of class `bitset\\<N>` and initializes all N bits to a default value of zero."},{"pos":[9150,9292],"content":"The second constructor constructs an object of class <ph id=\"ph1\">`bitset\\&lt;N&gt;`</ph> and initializes the bits by using the single <ph id=\"ph2\">`unsigned long long`</ph> parameter.","source":"The second constructor constructs an object of class `bitset\\<N>` and initializes the bits by using the single `unsigned long long` parameter."},{"content":"The third constructor constructs an object of class <ph id=\"ph1\">`bitset\\&lt;N&gt;`</ph>, initializing the N bits to values that correspond to the characters provided in a c-style character string of zeros and ones.","pos":[9302,9493],"source":"The third constructor constructs an object of class `bitset\\<N>`, initializing the N bits to values that correspond to the characters provided in a c-style character string of zeros and ones."},{"content":"You call the constructor without casting the string into a string type: <ph id=\"ph1\">`bitset&lt;5&gt; b5(\"01011\");`</ph>","pos":[9494,9590],"source":" You call the constructor without casting the string into a string type: `bitset<5> b5(\"01011\");`"},{"content":"There are also two constructor templates provided:","pos":[9597,9647]},{"content":"The first constructor template constructs an object of class <ph id=\"ph1\">`bitset\\&lt;N&gt;`</ph> and initializes bits from the characters provided in a string of zeros and ones.","pos":[9657,9811],"source":"The first constructor template constructs an object of class `bitset\\<N>` and initializes bits from the characters provided in a string of zeros and ones."},{"content":"If any characters of the string are other than 0 or 1, the constructor throws an object of class <bpt id=\"p1\">[</bpt>invalid argument<ept id=\"p1\">](../standard-library/invalid-argument-class.md)</ept>.","pos":[9812,9975],"source":" If any characters of the string are other than 0 or 1, the constructor throws an object of class [invalid argument](../standard-library/invalid-argument-class.md)."},{"content":"If the position specified ( <ph id=\"ph1\">`_Pos`</ph>) is beyond the length of the string, then the constructor throws an object of class <bpt id=\"p1\">[</bpt>out_of_range<ept id=\"p1\">](../standard-library/out-of-range-class.md)</ept>.","pos":[9976,10153],"source":" If the position specified ( `_Pos`) is beyond the length of the string, then the constructor throws an object of class [out_of_range](../standard-library/out-of-range-class.md)."},{"content":"The constructor sets only those bits at position <bpt id=\"p1\">*</bpt>j<ept id=\"p1\">*</ept> in the bitset for which the character in the string at position <ph id=\"ph1\">`_PosÂ +Â j`</ph> is 1.","pos":[10154,10289],"source":" The constructor sets only those bits at position *j* in the bitset for which the character in the string at position `_PosÂ +Â j` is 1."},{"content":"By default, <ph id=\"ph1\">`_Pos`</ph> is 0.","pos":[10290,10314],"source":" By default, `_Pos` is 0."},{"content":"The second constructor template is similar to the first, but includes an additional parameter ( <ph id=\"ph1\">` count`</ph>) that is used to specify the number of bits to initialize.","pos":[10324,10487],"source":"The second constructor template is similar to the first, but includes an additional parameter ( ` count`) that is used to specify the number of bits to initialize."},{"content":"It also has two optional parameters, <ph id=\"ph1\">`_Zero`</ph> and <ph id=\"ph2\">`_One`</ph>, which indicate what character in <ph id=\"ph3\">` str`</ph> is to be interpreted to mean a 0 bit and a 1 bit, respectively.","pos":[10488,10648],"source":" It also has two optional parameters, `_Zero` and `_One`, which indicate what character in ` str` is to be interpreted to mean a 0 bit and a 1 bit, respectively."},{"pos":[10658,10665],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13276,13319],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__count\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::count","linkify":"<a name=\"bitset__count\"></a>  bitset::count","source":"<a name=\"bitset__count\"></a>  bitset::count"},{"content":"Returns the number of bits set in the bit sequence.","pos":[13323,13374]},{"pos":[13423,13435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of bits set in the bit sequence.","pos":[13439,13482]},{"pos":[13492,13499],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the use of the bitset::count member function.","pos":[13504,13584]},{"pos":[14580,14637],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__element_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::element_type","linkify":"<a name=\"bitset__element_type\"></a>  bitset::element_type","source":"<a name=\"bitset__element_type\"></a>  bitset::element_type"},{"pos":[14641,14745],"content":"A type that is a synonym for the data type <ph id=\"ph1\">`bool`</ph> and can be used to reference element bits in a bitset.","source":"A type that is a synonym for the data type `bool` and can be used to reference element bits in a bitset."},{"pos":[14801,14808],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15993,16034],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__flip\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::flip","linkify":"<a name=\"bitset__flip\"></a>  bitset::flip","source":"<a name=\"bitset__flip\"></a>  bitset::flip"},{"content":"Toggles the value of all the bits in a bitset or toggles a single bit at a specified position.","pos":[16038,16132]},{"pos":[16213,16223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position of the bit whose value is to be toggled.","pos":[16237,16290]},{"pos":[16300,16312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A copy of the modified bitset for which the member function was invoked.","pos":[16316,16388]},{"pos":[16398,16405],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16409,16634],"content":"The second member function throws an <bpt id=\"p1\">[</bpt>out_of_range<ept id=\"p1\">](../standard-library/out-of-range-class.md)</ept> exception if the position specified as a parameter is greater than the size <bpt id=\"p2\">*</bpt>N<ept id=\"p2\">*</ept> of the <bpt id=\"p3\">**</bpt>bitset<ph id=\"ph1\">\\&lt;</ph><ept id=\"p3\">**</ept><bpt id=\"p4\">*</bpt>N<ept id=\"p4\">*</ept><bpt id=\"p5\">**</bpt><ph id=\"ph2\">&gt;</ph><ept id=\"p5\">**</ept> whose bit was toggled.","source":"The second member function throws an [out_of_range](../standard-library/out-of-range-class.md) exception if the position specified as a parameter is greater than the size *N* of the **bitset\\<***N***>** whose bit was toggled."},{"pos":[16644,16651],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17877,17918],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__none\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::none","linkify":"<a name=\"bitset__none\"></a>  bitset::none","source":"<a name=\"bitset__none\"></a>  bitset::none"},{"content":"Tests if no bit has been set to 1 in a bitset object.","pos":[17922,17975]},{"pos":[18021,18033],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18037,18137],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if no bit in the bitset has been set to 1; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if at least one bit has been set to 1.","source":"**true** if no bit in the bitset has been set to 1; **false** if at least one bit has been set to 1."},{"pos":[18147,18154],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19103,19158],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::operator!=","linkify":"<a name=\"bitset__operator_neq\"></a>  bitset::operator!=","source":"<a name=\"bitset__operator_neq\"></a>  bitset::operator!="},{"content":"Tests a target bitset for inequality with a specified bitset.","pos":[19162,19223]},{"pos":[19303,19313],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The bitset that is to be compared to the target bitset for inequality.","pos":[19329,19399]},{"pos":[19409,19421],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19425,19495],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the bitsets are different; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if they are the same.","source":"**true** if the bitsets are different; **false** if they are the same."},{"pos":[19505,19512],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Bitsets must be of the same size to be tested for inequality by the member operator function.","pos":[19516,19609]},{"pos":[19619,19626],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20591,20654],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__operator_amp__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::operator<ph id=\"ph1\">&amp;amp;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"bitset__operator_amp__eq\"></a>  bitset::operator&amp;=","source":"<a name=\"bitset__operator_amp__eq\"></a>  bitset::operator&amp;="},{"pos":[20658,20735],"content":"Performs a bitwise combination of bitsets with the logical <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> operation.","source":"Performs a bitwise combination of bitsets with the logical **AND** operation."},{"pos":[20816,20826],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The bitset that is to be combined bitwise with the target bitset.","pos":[20842,20907]},{"pos":[20917,20929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20933,21049],"content":"The modified target bitset that results from the bitwise <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> operation with the bitset specified as a parameter.","source":"The modified target bitset that results from the bitwise **AND** operation with the bitset specified as a parameter."},{"pos":[21059,21066],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21070,21196],"content":"Two bits combined by the <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> operator return <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept> if each bit is true; otherwise, their combination returns <bpt id=\"p3\">**</bpt>false<ept id=\"p3\">**</ept>.","source":"Two bits combined by the **AND** operator return **true** if each bit is true; otherwise, their combination returns **false**."},{"pos":[21203,21317],"content":"Bitsets must be of the same size to be combined bitwise with the <bpt id=\"p1\">**</bpt>AND<ept id=\"p1\">**</ept> operator by the member operator function.","source":"Bitsets must be of the same size to be combined bitwise with the **AND** operator by the member operator function."},{"pos":[21327,21334],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22410,22475],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__operator_lt__lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph>","linkify":"<a name=\"bitset__operator_lt__lt_\"></a>  bitset::operator&lt;&lt;","source":"<a name=\"bitset__operator_lt__lt_\"></a>  bitset::operator&lt;&lt;"},{"content":"Shifts the bits in a bitset to the left a specified number of positions and returns the result to a new bitset.","pos":[22479,22590]},{"pos":[22657,22667],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of positions to the left that the bits in the bitset are to be shifted.","pos":[22681,22763]},{"pos":[22773,22785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The modified bitset with the bits shifted to the left the required number of positions.","pos":[22789,22876]},{"pos":[22886,22893],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22897,23131],"content":"The member operator function returns <bpt id=\"p1\">**</bpt>bitset<ept id=\"p1\">**</ept>( <bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p2\">**</ept>) <bpt id=\"p3\">**</bpt>&lt;&lt;= pos,<ept id=\"p3\">**</ept> where <bpt id=\"p4\">[</bpt><ph id=\"ph2\">&lt;&lt;=</ph><ept id=\"p4\">](#bitset__operator_lt__lt__eq)</ept> shifts the bits in a bitset to the left a specified number of positions and returns the result to the targeted bitset.","source":"The member operator function returns **bitset**( **\\*this**) **<<= pos,** where [<<=](#bitset__operator_lt__lt__eq) shifts the bits in a bitset to the left a specified number of positions and returns the result to the targeted bitset."},{"pos":[23141,23148],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[23758,23827],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__operator_lt__lt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph><ph id=\"ph3\">=</ph>","linkify":"<a name=\"bitset__operator_lt__lt__eq\"></a>  bitset::operator&lt;&lt;=","source":"<a name=\"bitset__operator_lt__lt__eq\"></a>  bitset::operator&lt;&lt;="},{"content":"Shifts the bits in a bitset to the left a specified number of positions and returns the result to the targeted bitset.","pos":[23831,23949]},{"pos":[24012,24022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of positions to the left the bits in the bitset are to be shifted.","pos":[24036,24113]},{"pos":[24123,24135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The targeted bitset modified so that the bits have been shifted to the left the required number of positions.","pos":[24139,24248]},{"pos":[24258,24265],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If no element exists to shift into the position, the function clears the bit to a value of 0.","pos":[24269,24362]},{"pos":[24372,24379],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24957,25014],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::operator==","linkify":"<a name=\"bitset__operator_eq_eq\"></a>  bitset::operator==","source":"<a name=\"bitset__operator_eq_eq\"></a>  bitset::operator=="},{"content":"Tests a target bitset for equality with a specified bitset.","pos":[25018,25077]},{"pos":[25157,25167],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The bitset that is to be compared to the target bitset for equality.","pos":[25183,25251]},{"pos":[25261,25273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25277,25347],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the bitsets are the same; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if they are different.","source":"**true** if the bitsets are the same; **false** if they are different."},{"pos":[25357,25364],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Bitsets must be of the same size to be tested for equality by the member operator function.","pos":[25368,25459]},{"pos":[25469,25476],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[26439,26504],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__operator_gt__gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">&amp;gt;</ph>","linkify":"<a name=\"bitset__operator_gt__gt_\"></a>  bitset::operator&gt;&gt;","source":"<a name=\"bitset__operator_gt__gt_\"></a>  bitset::operator&gt;&gt;"},{"content":"Shifts the bits in a bitset to the right a specified number of positions and returns the result to a new bitset.","pos":[26508,26620]},{"pos":[26687,26697],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of positions to the right the bits in the bitset are to be shifted.","pos":[26711,26789]},{"pos":[26799,26811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A new bitset where the bits have been shifted to the right the required number of positions relative to the targeted bitset.","pos":[26815,26939]},{"pos":[26949,26956],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[27775,27844],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__operator_gt__gt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">&amp;gt;</ph><ph id=\"ph3\">=</ph>","linkify":"<a name=\"bitset__operator_gt__gt__eq\"></a>  bitset::operator&gt;&gt;=","source":"<a name=\"bitset__operator_gt__gt__eq\"></a>  bitset::operator&gt;&gt;="},{"content":"Shifts the bits in a bitset to the right a specified number of positions and returns the result to the targeted bitset.","pos":[27848,27967]},{"pos":[28030,28040],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of positions to the right the bits in the bitset are to be shifted.","pos":[28054,28132]},{"pos":[28142,28154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The targeted bitset modified so that the bits have been shifted to the right the required number of positions.","pos":[28158,28268]},{"pos":[28278,28285],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If no element exists to shift into the position, the function clears the bit to a value of 0.","pos":[28289,28382]},{"pos":[28392,28399],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28983,29037],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__operator_at\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::operator[]","linkify":"<a name=\"bitset__operator_at\"></a>  bitset::operator[]","source":"<a name=\"bitset__operator_at\"></a>  bitset::operator[]"},{"content":"Returns a reference to a bit at a specified position in a bitset if the bitset is modifiable; otherwise, it returns the value of the bit at that position.","pos":[29041,29195]},{"pos":[29294,29304],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position locating the bit within the bitset.","pos":[29318,29366]},{"pos":[29376,29383],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element outside the bounds of the bitset.","pos":[29387,29518]},{"content":"See <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept> for more information.","pos":[29520,29607],"source":"  See [Checked Iterators](../standard-library/checked-iterators.md) for more information."},{"pos":[29617,29624],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30088,30146],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__operator_xor_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::operator^=","linkify":"<a name=\"bitset__operator_xor_eq\"></a>  bitset::operator^=","source":"<a name=\"bitset__operator_xor_eq\"></a>  bitset::operator^="},{"pos":[30150,30226],"content":"Performs a bitwise combination of bitsets with the exclusive <ph id=\"ph1\">`OR`</ph> operation.","source":"Performs a bitwise combination of bitsets with the exclusive `OR` operation."},{"pos":[30307,30317],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The bitset that is to be combined bitwise with the target bitset.","pos":[30333,30398]},{"pos":[30408,30420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30424,30547],"content":"The modified target bitset that results from the bitwise exclusive <ph id=\"ph1\">`OR`</ph> operation with the bitset specified as a parameter.","source":"The modified target bitset that results from the bitwise exclusive `OR` operation with the bitset specified as a parameter."},{"pos":[30557,30564],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30568,30738],"content":"Two bits combined by the exclusive <bpt id=\"p1\">**</bpt>OR<ept id=\"p1\">**</ept> operator return <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept> if at least one, but not both, of the bits is <bpt id=\"p3\">**</bpt>true<ept id=\"p3\">**</ept>; otherwise, their combination returns <bpt id=\"p4\">**</bpt>false<ept id=\"p4\">**</ept>.","source":"Two bits combined by the exclusive **OR** operator return **true** if at least one, but not both, of the bits is **true**; otherwise, their combination returns **false**."},{"pos":[30745,30866],"content":"Bitsets must be of the same size to be combined bitwise with the exclusive <ph id=\"ph1\">`OR`</ph> operator by the member operator function.","source":"Bitsets must be of the same size to be combined bitwise with the exclusive `OR` operator by the member operator function."},{"pos":[30876,30883],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31976,32038],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__operator_or_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::operator&amp;#124;=","linkify":"<a name=\"bitset__operator_or_eq\"></a>  bitset::operator&#124;=","source":"<a name=\"bitset__operator_or_eq\"></a>  bitset::operator&#124;="},{"pos":[32042,32118],"content":"Performs a bitwise combination of bitsets with the inclusive <ph id=\"ph1\">`OR`</ph> operation.","source":"Performs a bitwise combination of bitsets with the inclusive `OR` operation."},{"pos":[32199,32209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The bitset that is to be combined bitwise with the target bitset.","pos":[32225,32290]},{"pos":[32300,32312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[32316,32439],"content":"The modified target bitset that results from the bitwise inclusive <ph id=\"ph1\">`OR`</ph> operation with the bitset specified as a parameter.","source":"The modified target bitset that results from the bitwise inclusive `OR` operation with the bitset specified as a parameter."},{"pos":[32449,32456],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32460,32630],"content":"Two bits combined by the inclusive <ph id=\"ph1\">`OR`</ph> operator return <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if at least one of the bits is <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>; if both bits are <bpt id=\"p3\">**</bpt>false<ept id=\"p3\">**</ept>, their combination returns <bpt id=\"p4\">**</bpt>false<ept id=\"p4\">**</ept>.","source":"Two bits combined by the inclusive `OR` operator return **true** if at least one of the bits is **true**; if both bits are **false**, their combination returns **false**."},{"pos":[32637,32758],"content":"Bitsets must be of the same size to be combined bitwise with the inclusive <ph id=\"ph1\">`OR`</ph> operator by the member operator function.","source":"Bitsets must be of the same size to be combined bitwise with the inclusive `OR` operator by the member operator function."},{"pos":[32768,32775],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33865,33920],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__operator_dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::operator~","linkify":"<a name=\"bitset__operator_dtor\"></a>  bitset::operator~","source":"<a name=\"bitset__operator_dtor\"></a>  bitset::operator~"},{"content":"Toggles all the bits in a target bitset and returns the result.","pos":[33924,33987]},{"pos":[34042,34054],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The bitset with all its bits toggled with respect to the targeted bitset.","pos":[34058,34131]},{"pos":[34141,34148],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[34826,34877],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::reference","linkify":"<a name=\"bitset__reference\"></a>  bitset::reference","source":"<a name=\"bitset__reference\"></a>  bitset::reference"},{"pos":[34881,35063],"content":"A proxy class that provides references to bits contained in a bitset that is used to access and manipulate the individual bits as a helper class for the <ph id=\"ph1\">`operator[]`</ph> of class bitset.","source":"A proxy class that provides references to bits contained in a bitset that is used to access and manipulate the individual bits as a helper class for the `operator[]` of class bitset."},{"content":"class reference {","pos":[35069,35086]},{"content":"friend class bitset<ph id=\"ph1\">\\&lt;</ph>N&gt;;","pos":[35092,35116],"source":"   friend class bitset\\<N>;"},{"content":"public: reference&amp; operator=( bool val); reference&amp; operator=( const reference&amp; _Bitref); bool operator~() const; operator bool() const; reference&amp; flip(); };","pos":[35122,35305],"source":"   public: \n   reference& operator=(\n   bool val);\n   reference& operator=(\n   const reference& _Bitref);\n   bool operator~() const;\n   operator bool() const;\n   reference& flip();\n   };"},{"pos":[35315,35325],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The value of the object of type <ph id=\"ph1\">`bool`</ph> to be assigned to a bit in a bitset.","pos":[35339,35414],"source":" The value of the object of type `bool` to be assigned to a bit in a bitset."},{"content":"A reference of the form <bpt id=\"p1\">*</bpt>x [ i ]<ept id=\"p1\">*</ept> to the bit at position <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept> in bitset <bpt id=\"p3\">*</bpt>x<ept id=\"p3\">*</ept>.","pos":[35434,35509],"source":" A reference of the form *x [ i ]* to the bit at position *i* in bitset *x*."},{"pos":[35519,35531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35535,35820],"content":"A reference to the bit in the bitset specified by the argument position for the first, second, and fifth member functions of class reference, and <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>, to reflect the value of the modified bit in the bitset for the third and fourth member functions of class reference.","source":"A reference to the bit in the bitset specified by the argument position for the first, second, and fifth member functions of class reference, and **true** or **false**, to reflect the value of the modified bit in the bitset for the third and fourth member functions of class reference."},{"pos":[35830,35837],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The class reference exists only as a helper class for the bitset <ph id=\"ph1\">`operator[]`</ph>.","pos":[35841,35919],"source":"The class reference exists only as a helper class for the bitset `operator[]`."},{"content":"The member class describes an object that can access an individual bit within a bitset.","pos":[35920,36007]},{"content":"Let <bpt id=\"p1\">*</bpt>b<ept id=\"p1\">*</ept> be an object of type <ph id=\"ph1\">`bool`</ph>, <bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>y<ept id=\"p3\">*</ept> objects of type <bpt id=\"p4\">**</bpt>bitset<ph id=\"ph2\">\\&lt;</ph><ept id=\"p4\">**</ept><bpt id=\"p5\">*</bpt>N<ept id=\"p5\">*</ept><bpt id=\"p6\">**</bpt><ph id=\"ph3\">&gt;</ph><ept id=\"p6\">**</ept>, and <bpt id=\"p7\">*</bpt>i<ept id=\"p7\">*</ept> and <bpt id=\"p8\">*</bpt>j<ept id=\"p8\">*</ept> valid positions within such an object.","pos":[36008,36149],"source":" Let *b* be an object of type `bool`, *x* and *y* objects of type **bitset\\<***N***>**, and *i* and *j* valid positions within such an object."},{"content":"The notation <bpt id=\"p1\">*</bpt>x [i]<ept id=\"p1\">*</ept> references the bit at position <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept> in bitset <bpt id=\"p3\">*</bpt>x<ept id=\"p3\">*</ept>.","pos":[36150,36220],"source":" The notation *x [i]* references the bit at position *i* in bitset *x*."},{"content":"The member functions of class reference provide, in order, the following operations:","pos":[36221,36305]},{"content":"Operation","pos":[36312,36321]},{"content":"Definition","pos":[36322,36332]},{"pos":[36374,36389],"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>[ <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept>] = <bpt id=\"p3\">*</bpt>b<ept id=\"p3\">*</ept>","source":"*x*[ *i*] = *b*"},{"pos":[36390,36448],"content":"Stores <ph id=\"ph1\">`bool`</ph> value <bpt id=\"p1\">*</bpt>b<ept id=\"p1\">*</ept> at bit position <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept> in bitset <bpt id=\"p3\">*</bpt>x<ept id=\"p3\">*</ept>.","source":"Stores `bool` value *b* at bit position *i* in bitset *x*."},{"pos":[36453,36474],"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>[ <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept>] = <bpt id=\"p3\">*</bpt>y<ept id=\"p3\">*</ept>[ <bpt id=\"p4\">*</bpt>j<ept id=\"p4\">*</ept>]","source":"*x*[ *i*] = *y*[ *j*]"},{"pos":[36475,36547],"content":"Stores the value of the bit <bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>[ <bpt id=\"p2\">*</bpt>j<ept id=\"p2\">*</ept>] at bit position <bpt id=\"p3\">*</bpt>i<ept id=\"p3\">*</ept> in bitset <bpt id=\"p4\">*</bpt>x<ept id=\"p4\">*</ept>.","source":"Stores the value of the bit *y*[ *j*] at bit position *i* in bitset *x*."},{"pos":[36552,36569],"content":"<bpt id=\"p1\">*</bpt>b<ept id=\"p1\">*</ept> = ~ <bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept>[ <bpt id=\"p3\">*</bpt>i<ept id=\"p3\">*</ept>]","source":"*b* = ~ *x*[ *i*]"},{"pos":[36570,36631],"content":"Stores the flipped value of the bit <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>[ <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept>] in <ph id=\"ph1\">`bool`</ph>Â <bpt id=\"p3\">*</bpt>b<ept id=\"p3\">*</ept>.","source":"Stores the flipped value of the bit *x*[ *i*] in `bool`Â *b*."},{"pos":[36636,36651],"content":"<bpt id=\"p1\">*</bpt>b<ept id=\"p1\">*</ept><ph id=\"ph1\"> = </ph><bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept>[ <bpt id=\"p3\">*</bpt>i<ept id=\"p3\">*</ept>]","source":"*b* = *x*[ *i*]"},{"pos":[36652,36705],"content":"Stores the value of the bit <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>[ <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept>] in <ph id=\"ph1\">`bool`</ph>Â <bpt id=\"p3\">*</bpt>b<ept id=\"p3\">*</ept>.","source":"Stores the value of the bit *x*[ *i*] in `bool`Â *b*."},{"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>[ <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept>].","pos":[36710,36720],"source":"*x*[ *i*]."},{"content":"<ph id=\"ph1\">`flip`</ph>( )","pos":[36721,36730],"source":"`flip`( )"},{"pos":[36731,36809],"content":"Stores the flipped value of the bit <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>[ <bpt id=\"p2\">*</bpt>i<ept id=\"p2\">*</ept>] back at bit position <bpt id=\"p3\">*</bpt>i<ept id=\"p3\">*</ept> in <bpt id=\"p4\">*</bpt>x<ept id=\"p4\">*</ept>.","source":"Stores the flipped value of the bit *x*[ *i*] back at bit position *i* in *x*."},{"pos":[36820,36827],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[39867,39910],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__reset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::reset","linkify":"<a name=\"bitset__reset\"></a>  bitset::reset","source":"<a name=\"bitset__reset\"></a>  bitset::reset"},{"content":"Resets all the bits in a bitset to 0 or resets a bit at a specified position to 0.","pos":[39914,39996]},{"pos":[40079,40089],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position of the bit in the bitset to be reset to 0.","pos":[40103,40158]},{"pos":[40168,40180],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A copy of the bitset for which the member function was invoked.","pos":[40184,40247]},{"pos":[40257,40264],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40268,40438],"content":"The second member function throws an <bpt id=\"p1\">[</bpt>out_of_range<ept id=\"p1\">](../standard-library/out-of-range-class.md)</ept> exception if the position specified is greater than the size of the bitset.","source":"The second member function throws an [out_of_range](../standard-library/out-of-range-class.md) exception if the position specified is greater than the size of the bitset."},{"pos":[40448,40455],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[41405,41444],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__set\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::set","linkify":"<a name=\"bitset__set\"></a>  bitset::set","source":"<a name=\"bitset__set\"></a>  bitset::set"},{"content":"Sets all the bits in a bitset to 1 or sets a bit at a specified position to 1.","pos":[41448,41526]},{"pos":[41640,41650],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position of the bit in the bitset to be set to assigned a value.","pos":[41664,41732]},{"content":"The value to be assigned to the bit at the position specified.","pos":[41749,41811]},{"pos":[41821,41833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A copy of the bitset for which the member function was invoked.","pos":[41837,41900]},{"pos":[41910,41917],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41921,42091],"content":"The second member function throws an <bpt id=\"p1\">[</bpt>out_of_range<ept id=\"p1\">](../standard-library/out-of-range-class.md)</ept> exception if the position specified is greater than the size of the bitset.","source":"The second member function throws an [out_of_range](../standard-library/out-of-range-class.md) exception if the position specified is greater than the size of the bitset."},{"pos":[42101,42108],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[43043,43084],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__size\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::size","linkify":"<a name=\"bitset__size\"></a>  bitset::size","source":"<a name=\"bitset__size\"></a>  bitset::size"},{"content":"Returns the number of bits in a bitset object.","pos":[43088,43134]},{"pos":[43184,43196],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43200,43251],"content":"The number of bits, <bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept>, in a <bpt id=\"p2\">**</bpt>bitset<ph id=\"ph1\">\\&lt;</ph><ept id=\"p2\">**</ept><bpt id=\"p3\">*</bpt>N<ept id=\"p3\">*</ept><bpt id=\"p4\">**</bpt><ph id=\"ph2\">&gt;</ph><ept id=\"p4\">**</ept>.","source":"The number of bits, *N*, in a **bitset\\<***N***>**."},{"pos":[43261,43268],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the use of the bitset::size member function.","pos":[43273,43352]},{"pos":[43881,43922],"content":"<bpt id=\"p1\">&lt;a name=\"bitset__test\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  bitset::test","linkify":"<a name=\"bitset__test\"></a>  bitset::test","source":"<a name=\"bitset__test\"></a>  bitset::test"},{"content":"Tests whether the bit at a specified position in a bitset is set to 1.","pos":[43926,43996]},{"pos":[44057,44067],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The position of the bit in the bitset to be tested for its value.","pos":[44081,44146]},{"pos":[44156,44168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44172,44261],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the bit specified by the argument position is set to 1; otherwise, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the bit specified by the argument position is set to 1; otherwise, **false**."},{"pos":[44271,44278],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44282,44369],"content":"The member function throws an <bpt id=\"p1\">[</bpt>out_of_range<ept id=\"p1\">](../standard-library/out-of-range-class.md)</ept>","source":"The member function throws an [out_of_range](../standard-library/out-of-range-class.md)"}],"content":"---\ntitle: \"bitset Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"bitset/std::bitset\"\n  - \"std::bitset\"\n  - \"std.bitset\"\n  - \"bitset\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"bitset class\"\nms.assetid: 28b86964-87b4-429c-8124-b6c251b6c50b\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# bitset Class\nDescribes a type of object that stores a sequence consisting of a fixed number of bits that provide a compact way of keeping flags for a set of items or conditions. The bitset class supports operations on objects of type bitset that contain a collection of bits and provide constant-time access to each bit.  \n  \n## Syntax  \n  \n```  \n \ntemplate <size_t   \nN>  \nclass bitset  \n```  \n  \n#### Parameters  \n *N*  \n Specifies the number of bits in the bitset object with a nonzero integer of type **size_t** that must be known at compile time.  \n  \n## Remarks  \n Unlike the similar [vector\\<bool> Class](../standard-library/vector-bool-class.md), the bitset class does not have iterators and is not an Standard Template Library container. It also differs from vector\\<bool> by being of some specific size that is fixed at compile time in accordance with the size specified by the template parameter **N** when the **bitset\\<N\\>** is declared.  \n  \n A bit is set if its value is 1 and reset if its value is 0. To flip or toggle a bit is to change its value from 1 to 0 or from 0 to 1. The **N** bits in a bitset are indexed by integer values from 0 to **N**Â -Â 1, where 0 indexes the first bit position and **N***Â* -Â 1 the final bit position.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[bitset](#bitset__bitset)|Constructs an object of class `bitset\\<N>` and initializes the bits to zero, to some specified value, or to values obtained from characters in a string.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[element_type](#bitset__element_type)|A type that is a synonym for the data type `bool` and can be used to reference element bits in a `bitset`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[all](#bitset__all)|Tests all of the bits in this `bitset` to determine whether they are all set to `true`.|  \n|[any](#bitset__any)|The member function tests whether any bit in the sequence is set to 1.|  \n|[count](#bitset__count)|The member function returns the number of bits set in the bit sequence.|  \n|[flip](#bitset__flip)|Toggles the value of all the bits in a `bitset` or toggles a single bit at a specified position.|  \n|[none](#bitset__none)|Tests if no bit has been set to 1 in a `bitset` object.|  \n|[reset](#bitset__reset)|Resets all the bits in a `bitset` to 0 or resets a bit at a specified position to 0.|  \n|[set](#bitset__set)|Sets all the bits in a `bitset` to 1 or sets a bit at a specified position to 1.|  \n|[size](#bitset__size)|Returns the number of bits in a `bitset` object.|  \n|[test](#bitset__test)|Tests whether the bit at a specified position in a `bitset` is set to 1.|  \n|[to_string](#bitset__to_string)|Converts a `bitset` object to a string representation.|  \n|[to_ullong](#bitset__to_ullong)|Returns the sum of the bit values in the `bitset` as an `unsigned long long`.|  \n|[to_ulong](#bitset__to_ulong)|Converts a `bitset` object to the `unsigned long` that would generate the sequence of bits contained if used to initialize the `bitset`.|  \n  \n### Member Classes  \n  \n|||  \n|-|-|  \n|[reference](#bitset__reference)|A proxy class that provides references to bits contained in a `bitset` that is used to access and manipulate the individual bits as a helper class for the `operator[]` of class `bitset`.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator!=](#bitset__operator_neq)|Tests a target `bitset` for inequality with a specified `bitset`.|  \n|[operator&=](#bitset__operator_amp__eq)|Performs a bitwise combination of bitsets with the logical `AND` operation.|  \n|[operator<<](#bitset__operator_lt__lt_)|Shifts the bits in a `bitset` to the left a specified number of positions and returns the result to a new `bitset`.|  \n|[operator<<=](#bitset__operator_lt__lt__eq)|Shifts the bits in a `bitset` to the left a specified number of positions and returns the result to the targeted `bitset`.|  \n|[operator==](#bitset__operator_eq_eq)|Tests a target `bitset` for equality with a specified `bitset`.|  \n|[operator>>](#bitset__operator_gt__gt_)|Shifts the bits in a `bitset` to the right a specified number of positions and returns the result to a new `bitset`.|  \n|[operator>>=](#bitset__operator_gt__gt__eq)|Shifts the bits in a `bitset` to the right a specified number of positions and returns the result to the targeted `bitset`.|  \n|[operator&#91;&#93;](#bitset__operator_at)|Returns a reference to a bit at a specified position in a `bitset` if the `bitset` is modifiable; otherwise, it returns the value of the bit at that position.|  \n|[operator^=](#bitset__operator_xor_eq)|Performs a bitwise combination of bitsets with the exclusive `OR` operation.|  \n|[operator&#124;=](#bitset__operator_or_eq')|Performs a bitwise combination of bitsets with the inclusive `OR` operation.|  \n|[operator~](#bitset__operator_dtor)|Toggles all the bits in a target `bitset` and returns the result.|  \n  \n## Requirements  \n **Header:** \\<bitset>  \n  \n **Namespace:** std  \n  \n##  <a name=\"bitset__all\"></a>  bitset::all  \n Tests all of the bits in this bitset to determine if they are all set to true.  \n  \n```  \n \nbool all() const;\n```  \n  \n### Return Value  \n Returns true if all bits in this set are true. Returns **false** if one or more bits are false.  \n  \n##  <a name=\"bitset__any\"></a>  bitset::any  \n Tests whether any bit in the sequence is set to 1.  \n  \n```  \n \nbool any() const;\n```  \n  \n### Return Value  \n **true** if any bit in the bitset is set to 1; **false** if all the bits are 0.  \n  \n### Example  \n  \n```cpp  \n// bitset_any.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   bitset<5> b1 ( 6 );  \n   bool b, rb;  \n  \n   cout << \"The original bitset b1( 6 ) is: ( \"<< b1 << \" )\"  \n        << endl;  \n  \n   b = b1.any ( );  \n  \n   if ( b )  \n      cout << \"At least one of the bits in bitset is set to 1.\"  \n           << endl;  \n   else  \n      cout << \"None of the bits in bitset are set to 1.\"  \n           << endl;  \n  \n   bitset<5> rb1;  \n   rb1 = b1.reset ( );  \n  \n   cout << \"The reset bitset is: ( \"<< b1 << \" )\"  \n        << endl;  \n  \n   rb = rb1.any ( );  \n  \n   if ( rb )  \n      cout << \"At least one of the bits in the reset bitset \"  \n           << \"are set to 1.\" << endl;  \n   else  \n      cout << \"None of the bits in bitset b1 are set to 1.\"  \n           << endl;  \n}  \n```  \n  \n```Output  \nThe original bitset b1( 6 ) is: ( 00110 )  \nAt least one of the bits in bitset is set to 1.  \nThe reset bitset is: ( 00000 )  \nNone of the bits in bitset b1 are set to 1.  \n```  \n  \n##  <a name=\"bitset__bitset\"></a>  bitset::bitset  \n Constructs an object of class `bitset\\<N>` and initializes the bits to zero, or to some specified value, or to values obtained from characters in a string.  \n  \n```  \nbitset();\n\nbitset(\n    unsigned long long val);\n\nexplicit bitset(\n    const char* _CStr);\n\ntemplate <class CharType,   \n    class Traits,   \n    class Allocator>  \nexplicit bitset(\n    const basic_string<CharType, Traits, Allocator>& str,  \n    typename basic_string<\n    CharType, Traits, Allocator>::size_type _Pos = 0);\n\ntemplate <class CharType,  \n    class Traits,  \n    class Allocator>  \nexplicit bitset(\n    const basic_string<CharType, Traits, Allocator>& str,  \n    typename basic_string<\n    CharType, Traits, Allocator>::size_type _Pos,  \n    typename basic_string<\n    CharType, Traits, Allocator>::size_type count,  \n    CharType _Zero = CharType (â€™0â€™),   \n    CharType _One = CharType (â€™1â€™));\n```  \n  \n### Parameters  \n ` val`  \n The unsigned integer whose base two representation is used to initialize the bits in the bitset being constructed.  \n  \n ` str`  \n The string of zeros and ones used to initialize the bitset bit values.  \n  \n `_CStr`  \n A C-style string of zeros and ones used to initialize the bitset bit values.  \n  \n `_Pos`  \n The position of the character in the string, counting from left to right and starting with zero, used to initialize the first bit in the bitset.  \n  \n ` count`  \n The number of characters in the string that is used to provide initial values for the bits in the bitset.  \n  \n `_Zero`  \n The character that is used to represent a zero. The default is '0'.  \n  \n `_One`  \n The character that is used to represent a one. The default is '1'.  \n  \n### Remarks  \n Three constructors can be used to construct obects of class `bitset\\<N>`:  \n  \n-   The first constructor accepts no parameters, constructs an object of class `bitset\\<N>` and initializes all N bits to a default value of zero.  \n  \n-   The second constructor constructs an object of class `bitset\\<N>` and initializes the bits by using the single `unsigned long long` parameter.  \n  \n-   The third constructor constructs an object of class `bitset\\<N>`, initializing the N bits to values that correspond to the characters provided in a c-style character string of zeros and ones. You call the constructor without casting the string into a string type: `bitset<5> b5(\"01011\");`  \n  \n There are also two constructor templates provided:  \n  \n-   The first constructor template constructs an object of class `bitset\\<N>` and initializes bits from the characters provided in a string of zeros and ones. If any characters of the string are other than 0 or 1, the constructor throws an object of class [invalid argument](../standard-library/invalid-argument-class.md). If the position specified ( `_Pos`) is beyond the length of the string, then the constructor throws an object of class [out_of_range](../standard-library/out-of-range-class.md). The constructor sets only those bits at position *j* in the bitset for which the character in the string at position `_PosÂ +Â j` is 1. By default, `_Pos` is 0.  \n  \n-   The second constructor template is similar to the first, but includes an additional parameter ( ` count`) that is used to specify the number of bits to initialize. It also has two optional parameters, `_Zero` and `_One`, which indicate what character in ` str` is to be interpreted to mean a 0 bit and a 1 bit, respectively.  \n  \n### Example  \n  \n```cpp  \n// bitset_bitset.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   // Using the default constructor  \n   using namespace std;  \n   bitset<2> b0;  \n   cout << \"The set of bits in bitset<2> b0 is: ( \"  \n        << b0 << \" ).\" << endl;  \n  \n   // Using the second member function  \n   bitset<5> b1 ( 6 );  \n   cout << \"The set of bits in bitset<5> b1( 6 ) is: ( \"  \n        << b1 << \" ).\" << endl;  \n  \n   // The template parameter N can be an expresssion  \n   bitset< 2 * sizeof ( int ) > b2;  \n   cout << \"The set of bits in bitset<2 * sizeof ( int ) > b2 is: ( \"  \n        << b2 << \" ).\" << endl;  \n  \n   // The base two representation will be truncated  \n   // if its length exceeds the size of the bitset  \n   bitset<3> b3 ( 6 );  \n   cout << \"The set of bits in bitset<3> b3( 6 ) is ( \"  \n        << b3 << \" ).\" << endl;  \n  \n   // Using a c-style string to initialize the bitset  \n    bitset<7> b3andahalf ( \"1001001\" );  \n    cout << \"The set of bits in bitset<7> b3andahalf ( \\\"1001001\\\" )\"  \n         << \" is ( \" << b3andahalf << \" ).\" << endl;   \n  \n   // Using the fifth member function with the first parameter  \n   string bitval4 ( \"10011\" );  \n   bitset<5> b4 ( bitval4 );  \n   cout << \"The set of bits in bitset<5> b4( bitval4 ) is ( \"  \n        << b4 << \" ).\" << endl;  \n  \n   // Only part of the string may be used for initialization  \n  \n   // Starting at position 3 for a length of 6 (100110)  \n   string bitval5 (\"11110011011\");  \n   bitset<6> b5 ( bitval5, 3, 6 );  \n   cout << \"The set of bits in bitset<11> b5( bitval, 3, 6 ) is ( \"  \n        << b5 << \" ).\" << endl;  \n  \n   // The bits not initialized with part of the string  \n   // will default to zero  \n   bitset<11> b6 ( bitval5, 3, 5 );  \n   cout << \"The set of bits in bitset<11> b6( bitval5, 3, 5 ) is ( \"  \n        << b6 << \" ).\" << endl;  \n  \n   // Starting at position 2 and continue to the end of the string  \n   bitset<9> b7 ( bitval5, 2 );  \n   cout << \"The set of bits in bitset<9> b7( bitval, 2 ) is ( \"  \n        << b7 << \" ).\" << endl;  \n}  \n```  \n  \n```Output  \nThe set of bits in bitset<2> b0 is: ( 00 ).  \nThe set of bits in bitset<5> b1( 6 ) is: ( 00110 ).  \nThe set of bits in bitset<2 * sizeof ( int ) > b2 is: ( 00000000 ).  \nThe set of bits in bitset<3> b3( 6 ) is ( 110 ).  \nThe set of bits in bitset<5> b4( bitval4 ) is ( 10011 ).  \nThe set of bits in bitset<11> b5( bitval, 3, 6 ) is ( 100110 ).  \nThe set of bits in bitset<11> b6( bitval5, 3, 5 ) is ( 00000010011 ).  \nThe set of bits in bitset<9> b7( bitval, 2 ) is ( 110011011 ).  \n```  \n  \n##  <a name=\"bitset__count\"></a>  bitset::count  \n Returns the number of bits set in the bit sequence.  \n  \n```  \n \nsize_t count() const;\n```  \n  \n### Return Value  \n The number of bits set in the bit sequence.  \n  \n### Example  \n  The following example demonstrates the use of the bitset::count member function.  \n  \n```  \n// bitset_count.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n    using namespace std;  \n  \n    bitset<5> b1(4);  \n  \n    cout << \"The collection of bits in the original bitset is: ( \"  \n         << b1 << \" )\" << endl;  \n  \n    size_t i;  \n    i = b1.count();  \n    cout << \"The number of bits in the bitset set to 1 is: \"  \n         << i << \".\" << endl;  \n  \n    bitset<5> fb1;  \n    fb1 = b1.flip();  \n  \n    cout << \"The collection of flipped bits in the modified bitset \"  \n         << \"is: ( \" << b1 << \" )\" << endl;  \n  \n    size_t ii;  \n    ii = fb1.count();  \n    cout << \"The number of bits in the bitset set to 1 is: \"  \n         << ii << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe collection of bits in the original bitset is: ( 00100 )  \nThe number of bits in the bitset set to 1 is: 1.  \nThe collection of flipped bits in the modified bitset is: ( 11011 )  \nThe number of bits in the bitset set to 1 is: 4.  \n```  \n  \n##  <a name=\"bitset__element_type\"></a>  bitset::element_type  \n A type that is a synonym for the data type `bool` and can be used to reference element bits in a bitset.  \n  \n```  \n \ntypedef bool element_type;  \n```  \n  \n### Example  \n  \n```cpp  \n// bitset_elem_type.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   bitset<3> b1 ( 2 );  \n   cout << \"Original bitset b1(6) is: ( \"<< b1 << \" )\"  \n        << endl;  \n  \n   //Compare two ways to reference bits in a bitset  \n   bool b;  \n   bitset<5>::element_type e;  \n  \n   b = b1.test ( 2 );  \n   if ( b )  \n      cout << \"The bit at position 2 of bitset b1\"  \n           << \"has a value of 1.\" << endl;  \n   else  \n      cout << \"The bit at position 2 of bitset b1\"  \n           << \"has a value of 0.\" << endl;  \n   b1[2] = 1;  \n   cout << \"Bitset b1 modified by b1[2] = 1 is: ( \"<< b1 << \" )\"  \n        << endl;  \n  \n   e = b1.test ( 2 );  \n   if ( e )  \n      cout << \"The bit at position 2 of bitset b1\"  \n           << \"has a value of 1.\" << endl;  \n   else  \n      cout << \"The bit at position 2 of bitset b1\"  \n           << \"has a value of 0.\" << endl;  \n}  \n```  \n  \n```Output  \nOriginal bitset b1(6) is: ( 010 )  \nThe bit at position 2 of bitset b1has a value of 0.  \nBitset b1 modified by b1[2] = 1 is: ( 110 )  \nThe bit at position 2 of bitset b1has a value of 1.  \n```  \n  \n##  <a name=\"bitset__flip\"></a>  bitset::flip  \n Toggles the value of all the bits in a bitset or toggles a single bit at a specified position.  \n  \n```  \n \nbitset\\<N>& flip();Â  \nbitset\\<N>& flip(size_t _Pos);\n```  \n  \n### Parameters  \n `_Pos`  \n The position of the bit whose value is to be toggled.  \n  \n### Return Value  \n A copy of the modified bitset for which the member function was invoked.  \n  \n### Remarks  \n The second member function throws an [out_of_range](../standard-library/out-of-range-class.md) exception if the position specified as a parameter is greater than the size *N* of the **bitset\\<***N***>** whose bit was toggled.  \n  \n### Example  \n  \n```cpp  \n// bitset_flip.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   bitset<5> b1 ( 6 );  \n  \n   cout << \"The collection of bits in the original bitset is: ( \"  \n        << b1 << \" )\" << endl;  \n  \n   bitset<5> fb1;  \n   fb1 = b1.flip ( );  \n  \n   cout << \"After flipping all the bits, the bitset becomes: ( \"  \n        << fb1 << \" )\" << endl;  \n  \n   bitset<5> f3b1;  \n   f3b1 = b1.flip ( 3 );  \n  \n   cout << \"After flipping the fourth bit, the bitset becomes: ( \"  \n        << f3b1 << \" )\" << endl << endl;  \n  \n   bitset<5> b2;  \n   int i;  \n   for ( i = 0 ; i <= 4 ; i++ )  \n   {  \n      b2.flip(i);  \n      cout << b2 << \"  The bit flipped is in position \"  \n           << i << \".\\n\";  \n   }  \n}  \n```  \n  \n```Output  \nThe collection of bits in the original bitset is: ( 00110 )  \nAfter flipping all the bits, the bitset becomes: ( 11001 )  \nAfter flipping the fourth bit, the bitset becomes: ( 10001 )  \n  \n00001  The bit flipped is in position 0.  \n00011  The bit flipped is in position 1.  \n00111  The bit flipped is in position 2.  \n01111  The bit flipped is in position 3.  \n11111  The bit flipped is in position 4.  \n```  \n  \n##  <a name=\"bitset__none\"></a>  bitset::none  \n Tests if no bit has been set to 1 in a bitset object.  \n  \n```  \n \nbool none() const;\n```  \n  \n### Return Value  \n **true** if no bit in the bitset has been set to 1; **false** if at least one bit has been set to 1.  \n  \n### Example  \n  \n```cpp  \n// bitset_none.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   bitset<5> b1 ( 6 );  \n   bool b, rb;  \n  \n   cout << \"Original bitset b1(6) is: ( \" << b1 << \" )\"  \n        << endl;  \n  \n   b = b1.none ( );  \n  \n   if ( b )  \n      cout << \"None of the bits in bitset b1 are set to 1.\"  \n           << endl;  \n   else  \n      cout << \"At least one of the bits in bitset b1 is set to 1.\"  \n           << endl;  \n  \n   bitset<5> rb1;  \n   rb1 = b1.reset ( );  \n   rb = rb1.none ( );  \n   if ( rb )  \n      cout << \"None of the bits in bitset b1 are set to 1.\"  \n           << endl;  \n   else  \n      cout << \"At least one of the bits in bitset b1 is set to 1.\"  \n           << endl;  \n}  \n```  \n  \n```Output  \nOriginal bitset b1(6) is: ( 00110 )  \nAt least one of the bits in bitset b1 is set to 1.  \nNone of the bits in bitset b1 are set to 1.  \n```  \n  \n##  <a name=\"bitset__operator_neq\"></a>  bitset::operator!=  \n Tests a target bitset for inequality with a specified bitset.  \n  \n```  \n \nbool operator!=(const bitset\\<N>& \n    right) const;\n```  \n  \n### Parameters  \n ` right`  \n The bitset that is to be compared to the target bitset for inequality.  \n  \n### Return Value  \n **true** if the bitsets are different; **false** if they are the same.  \n  \n### Remarks  \n Bitsets must be of the same size to be tested for inequality by the member operator function.  \n  \n### Example  \n  \n```cpp  \n// bitset_op_NE.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   bitset<5> b1 ( 7 );  \n   bitset<5> b2 ( 7 );  \n   bitset<5> b3 ( 2 );  \n   bitset<4> b4 ( 7 );  \n  \n   if ( b1 != b2 )  \n      cout << \"Bitset b1 is different from bitset b2.\" << endl;  \n   else  \n      cout << \"Bitset b1 is the same as bitset b2.\" << endl;  \n  \n   if ( b1 != b3 )  \n      cout << \"Bitset b1 is different from bitset b3.\" << endl;  \n   else  \n      cout << \"Bitset b1 is the same as bitset b3.\" << endl;  \n  \n   // This would cause an error because bitsets must have the  \n   // same size to be tested  \n   // if ( b1 != b4 )  \n   //   cout << \"Bitset b1 is different from bitset b4.\" << endl;  \n   // else  \n   //   cout << \"Bitset b1 is the same as bitset b4.\" << endl;  \n}  \n```  \n  \n```Output  \nBitset b1 is the same as bitset b2.  \nBitset b1 is different from bitset b3.  \n```  \n  \n##  <a name=\"bitset__operator_amp__eq\"></a>  bitset::operator&amp;=  \n Performs a bitwise combination of bitsets with the logical **AND** operation.  \n  \n```  \n \nbitset\\<N>& operator&=(const bitset\\<N>& \n    right);\n```  \n  \n### Parameters  \n ` right`  \n The bitset that is to be combined bitwise with the target bitset.  \n  \n### Return Value  \n The modified target bitset that results from the bitwise **AND** operation with the bitset specified as a parameter.  \n  \n### Remarks  \n Two bits combined by the **AND** operator return **true** if each bit is true; otherwise, their combination returns **false**.  \n  \n Bitsets must be of the same size to be combined bitwise with the **AND** operator by the member operator function.  \n  \n### Example  \n  \n```cpp  \n// bitset_op_bitwise.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   bitset<5> b1 ( 7 );  \n   bitset<5> b2 ( 11 );  \n   bitset<4> b3 ( 7 );  \n  \n   cout << \"The target bitset b1 is:    ( \"<< b1 << \" ).\" << endl;  \n   cout << \"The parameter bitset b2 is: ( \"<< b2 << \" ).\" << endl;  \n   cout << endl;  \n  \n   b1 &= b2;  \n   cout << \"After bitwise AND combination,\\n\"  \n        << \" the target bitset b1 becomes:   ( \"<< b1 << \" ).\"   \n        << endl;  \n  \n   // Note that the parameter-specified bitset is unchanged  \n   cout << \"The parameter bitset b2 remains: ( \"<< b2 << \" ).\"   \n        << endl;  \n  \n   // The following would cause an error because the bisets   \n   // must be of the same size to be combined  \n   // b1 &= b3;  \n}  \n```  \n  \n```Output  \nThe target bitset b1 is:    ( 00111 ).  \nThe parameter bitset b2 is: ( 01011 ).  \n  \nAfter bitwise AND combination,  \n the target bitset b1 becomes:   ( 00011 ).  \nThe parameter bitset b2 remains: ( 01011 ).  \n```  \n  \n##  <a name=\"bitset__operator_lt__lt_\"></a>  bitset::operator&lt;&lt;  \n Shifts the bits in a bitset to the left a specified number of positions and returns the result to a new bitset.  \n  \n```  \nbitset\\<N> operator<<(size_t _Pos) const;\n```  \n  \n### Parameters  \n `_Pos`  \n The number of positions to the left that the bits in the bitset are to be shifted.  \n  \n### Return Value  \n The modified bitset with the bits shifted to the left the required number of positions.  \n  \n### Remarks  \n The member operator function returns **bitset**( **\\*this**) **<<= pos,** where [<<=](#bitset__operator_lt__lt__eq) shifts the bits in a bitset to the left a specified number of positions and returns the result to the targeted bitset.  \n  \n### Example  \n  \n```cpp  \n// bitset_op_LS.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   bitset<5> b1 ( 7 );  \n  \n   cout << \"The bitset b1 is: ( \"<< b1 << \" ).\" << endl;  \n  \n   bitset<5> b2;  \n   b2 = b1 << 2;  \n  \n   cout << \"After shifting the bits 2 positions to the left,\\n\"  \n        << \" the bitset b2 is: ( \"<< b2 << \" ).\"  \n        << endl;  \n  \n   bitset<5> b3 = b2 >> 1;  \n  \n   cout << \"After shifting the bits 1 position to the right,\\n\"  \n        << \" the bitset b3 is: ( \" << b3 << \" ).\"  \n        << endl;  \n}  \n```  \n  \n##  <a name=\"bitset__operator_lt__lt__eq\"></a>  bitset::operator&lt;&lt;=  \n Shifts the bits in a bitset to the left a specified number of positions and returns the result to the targeted bitset.  \n  \n```  \nbitset\\<N>& operator<<=(size_t _Pos);\n```  \n  \n### Parameters  \n `_Pos`  \n The number of positions to the left the bits in the bitset are to be shifted.  \n  \n### Return Value  \n The targeted bitset modified so that the bits have been shifted to the left the required number of positions.  \n  \n### Remarks  \n If no element exists to shift into the position, the function clears the bit to a value of 0.  \n  \n### Example  \n  \n```cpp  \n// bitset_op_LSE.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   bitset<5> b1 ( 7 );  \n   cout << \"The target bitset b1 is: ( \"<< b1 << \" ).\" << endl;  \n   b1 <<= 2;  \n   cout << \"After shifting the bits 2 positions to the left,\\n\"  \n        << \" the target bitset b1 becomes: ( \"<< b1 << \" ).\"   \n        << endl;  \n}  \n```  \n  \n```Output  \nThe target bitset b1 is: ( 00111 ).  \nAfter shifting the bits 2 positions to the left,  \n the target bitset b1 becomes: ( 11100 ).  \n```  \n  \n##  <a name=\"bitset__operator_eq_eq\"></a>  bitset::operator==  \n Tests a target bitset for equality with a specified bitset.  \n  \n```  \n \nbool operator==(const bitset\\<N>& \n    right) const;\n```  \n  \n### Parameters  \n ` right`  \n The bitset that is to be compared to the target bitset for equality.  \n  \n### Return Value  \n **true** if the bitsets are the same; **false** if they are different.  \n  \n### Remarks  \n Bitsets must be of the same size to be tested for equality by the member operator function.  \n  \n### Example  \n  \n```cpp  \n// bitset_op_EQ.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   bitset<5> b1 ( 7 );  \n   bitset<5> b2 ( 7 );  \n   bitset<5> b3 ( 2 );  \n   bitset<4> b4 ( 7 );  \n  \n   if ( b1 == b2 )  \n      cout << \"Bitset b1 is the same as bitset b2.\" << endl;  \n   else  \n      cout << \"Bitset b1 is different from bitset b2.\" << endl;  \n  \n   if ( b1 == b3 )  \n      cout << \"Bitset b1 is the same as bitset b3.\" << endl;  \n   else  \n      cout << \"Bitset b1 is different from bitset b3.\" << endl;  \n  \n   // This would cause an error because bitsets must have the   \n   // same size to be tested  \n   // if ( b1 == b4 )  \n   //   cout << \"Bitset b1 is the same as bitset b4.\" << endl;  \n   // else  \n   //   cout << \"Bitset b1 is different from bitset b4.\" << endl;  \n}  \n```  \n  \n```Output  \nBitset b1 is the same as bitset b2.  \nBitset b1 is different from bitset b3.  \n```  \n  \n##  <a name=\"bitset__operator_gt__gt_\"></a>  bitset::operator&gt;&gt;  \n Shifts the bits in a bitset to the right a specified number of positions and returns the result to a new bitset.  \n  \n```  \nbitset\\<N> operator>>(size_t _Pos) const;\n```  \n  \n### Parameters  \n `_Pos`  \n The number of positions to the right the bits in the bitset are to be shifted.  \n  \n### Return Value  \n A new bitset where the bits have been shifted to the right the required number of positions relative to the targeted bitset.  \n  \n### Example  \n  \n```cpp  \n// bitset_op_RS.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   bitset<5> b1 ( 7 );  \n   cout << \"The bitset b1 is: ( \"<< b1 << \" ).\" << endl;  \n  \n   bitset<5> b2;  \n   b2 = b1 << 2;  \n  \n   cout << \"After shifting the bits 2 positions to the left,\\n\"  \n        << \" the bitset b2 is: ( \"<< b2 << \" ).\"  \n        << endl;  \n   bitset<5> b3 = b2 >> 1;  \n  \n   cout << \"After shifting the bits 1 position to the right,\\n\"  \n        << \" the bitset b3 is: ( \" << b3 << \" ).\"  \n        << endl;  \n}  \n```  \n  \n```Output  \nThe bitset b1 is: ( 00111 ).  \nAfter shifting the bits 2 positions to the left,  \n the bitset b2 is: ( 11100 ).  \nAfter shifting the bits 1 position to the right,  \n the bitset b3 is: ( 01110 ).  \n```  \n  \n##  <a name=\"bitset__operator_gt__gt__eq\"></a>  bitset::operator&gt;&gt;=  \n Shifts the bits in a bitset to the right a specified number of positions and returns the result to the targeted bitset.  \n  \n```  \nbitset\\<N>& operator>>=(size_t _Pos);\n```  \n  \n### Parameters  \n `_Pos`  \n The number of positions to the right the bits in the bitset are to be shifted.  \n  \n### Return Value  \n The targeted bitset modified so that the bits have been shifted to the right the required number of positions.  \n  \n### Remarks  \n If no element exists to shift into the position, the function clears the bit to a value of 0.  \n  \n### Example  \n  \n```cpp  \n// bitset_op_RSE.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   bitset<5> b1 ( 28 );  \n   cout << \"The target bitset b1 is: ( \"<< b1 << \" ).\" << endl;  \n  \n   b1 >>= 2;  \n   cout << \"After shifting the bits 2 positions to the right,\\n\"  \n        << \" the target bitset b1 becomes: ( \"<< b1 << \" ).\"   \n        << endl;  \n}  \n```  \n  \n```Output  \nThe target bitset b1 is: ( 11100 ).  \nAfter shifting the bits 2 positions to the right,  \n the target bitset b1 becomes: ( 00111 ).  \n```  \n  \n##  <a name=\"bitset__operator_at\"></a>  bitset::operator[]  \n Returns a reference to a bit at a specified position in a bitset if the bitset is modifiable; otherwise, it returns the value of the bit at that position.  \n  \n```  \nbool operator[](size_t _Pos) const;\n\n \nreference operator[](size_t _Pos);\n```  \n  \n### Parameters  \n `_Pos`  \n The position locating the bit within the bitset.  \n  \n### Remarks  \n When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element outside the bounds of the bitset.  See [Checked Iterators](../standard-library/checked-iterators.md) for more information.  \n  \n### Example  \n  \n```cpp  \n// bitset_op_REF.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   bool b;  \n   bitset<5> b1 ( 6 );  \n   cout << \"The initialized bitset<5> b1( 2 ) is: ( \"<< b1 << \" ).\"  \n        << endl;  \n  \n   int i;  \n   for ( i = 0 ; i <= 4 ; i++ )  \n   {  \n      b = b1[ i ];  \n      cout << \"  The bit in position \"  \n           << i << \" is \" << b << \".\\n\";  \n   }  \n}  \n```  \n  \n##  <a name=\"bitset__operator_xor_eq\"></a>  bitset::operator^=  \n Performs a bitwise combination of bitsets with the exclusive `OR` operation.  \n  \n```  \n \nbitset\\<N>& operator^=(const bitset\\<N>& \n    right);\n```  \n  \n### Parameters  \n ` right`  \n The bitset that is to be combined bitwise with the target bitset.  \n  \n### Return Value  \n The modified target bitset that results from the bitwise exclusive `OR` operation with the bitset specified as a parameter.  \n  \n### Remarks  \n Two bits combined by the exclusive **OR** operator return **true** if at least one, but not both, of the bits is **true**; otherwise, their combination returns **false**.  \n  \n Bitsets must be of the same size to be combined bitwise with the exclusive `OR` operator by the member operator function.  \n  \n### Example  \n  \n```cpp  \n// bitset_op_bitwiseOR.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   bitset<5> b1 ( 7 );  \n   bitset<5> b2 ( 11 );  \n   bitset<4> b3 ( 7 );  \n  \n   cout << \"The target bitset b1 is:    ( \"<< b1 << \" ).\" << endl;  \n   cout << \"The parameter bitset b2 is: ( \"<< b2 << \" ).\" << endl;  \n   cout << endl;  \n  \n   b1 ^= b2;  \n   cout << \"After bitwise exclusive OR combination,\\n\"  \n        << \" the target bitset b1 becomes:   ( \"<< b1 << \" ).\"   \n        << endl;  \n  \n   // Note that the parameter-specified bitset in unchanged  \n   cout << \"The parameter bitset b2 remains: ( \"<< b2 << \" ).\"   \n        << endl;  \n  \n   // The following would cause an error because the bisets   \n   // must be of the same size to be combined  \n   // b1 |= b3;  \n}  \n```  \n  \n```Output  \nThe target bitset b1 is:    ( 00111 ).  \nThe parameter bitset b2 is: ( 01011 ).  \n  \nAfter bitwise exclusive OR combination,  \n the target bitset b1 becomes:   ( 01100 ).  \nThe parameter bitset b2 remains: ( 01011 ).  \n```  \n  \n##  <a name=\"bitset__operator_or_eq\"></a>  bitset::operator&#124;=  \n Performs a bitwise combination of bitsets with the inclusive `OR` operation.  \n  \n```  \n \nbitset\\<N>& operator|=(const bitset\\<N>& \n    right);\n```  \n  \n### Parameters  \n ` right`  \n The bitset that is to be combined bitwise with the target bitset.  \n  \n### Return Value  \n The modified target bitset that results from the bitwise inclusive `OR` operation with the bitset specified as a parameter.  \n  \n### Remarks  \n Two bits combined by the inclusive `OR` operator return **true** if at least one of the bits is **true**; if both bits are **false**, their combination returns **false**.  \n  \n Bitsets must be of the same size to be combined bitwise with the inclusive `OR` operator by the member operator function.  \n  \n### Example  \n  \n```cpp  \n// bitset_op_BIO.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   bitset<5> b1 ( 7 );  \n   bitset<5> b2 ( 11 );  \n   bitset<4> b3 ( 7 );  \n  \n   cout << \"The target bitset b1 is:    ( \"<< b1 << \" ).\" << endl;  \n   cout << \"The parameter bitset b2 is: ( \"<< b2 << \" ).\" << endl;  \n   cout << endl;  \n  \n   b1 |= b2;  \n   cout << \"After bitwise inclusive OR combination,\\n\"  \n        << \" the target bitset b1 becomes:   ( \"<< b1 << \" ).\"   \n        << endl;  \n  \n   // Note that the parameter-specified bitset in unchanged  \n   cout << \"The parameter bitset b2 remains: ( \"<< b2 << \" ).\"   \n        << endl;  \n  \n   // The following would cause an error because the bisets   \n   // must be of the same size to be combined  \n   // b1 |= b3;  \n}  \n```  \n  \n```Output  \nThe target bitset b1 is:    ( 00111 ).  \nThe parameter bitset b2 is: ( 01011 ).  \n  \nAfter bitwise inclusive OR combination,  \n the target bitset b1 becomes:   ( 01111 ).  \nThe parameter bitset b2 remains: ( 01011 ).  \n```  \n  \n##  <a name=\"bitset__operator_dtor\"></a>  bitset::operator~  \n Toggles all the bits in a target bitset and returns the result.  \n  \n```  \nbitset\\<N> operator~() const;\n```  \n  \n### Return Value  \n The bitset with all its bits toggled with respect to the targeted bitset.  \n  \n### Example  \n  \n```cpp  \n// bitset_op_toggle.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <string>  \n#include <bitset>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   bitset<5> b1 ( 7 );  \n   bitset<5> b2;  \n   b2 = ~b1;  \n  \n   cout << \"Bitset b1 is: ( \"<< b1 << \" ).\" << endl;  \n   cout << \"Bitset b2 = ~b1 is: ( \"<< b2 << \" ).\" << endl;  \n  \n   // These bits could also be flipped using the flip member function  \n   bitset<5> b3;  \n   b3 = b1.flip( );  \n   cout << \"Bitset b3 = b1.flip( ) is: ( \"<< b2 << \" ).\" << endl;  \n}  \n```  \n  \n```Output  \nBitset b1 is: ( 00111 ).  \nBitset b2 = ~b1 is: ( 11000 ).  \nBitset b3 = b1.flip( ) is: ( 11000 ).  \n```  \n  \n##  <a name=\"bitset__reference\"></a>  bitset::reference  \n A proxy class that provides references to bits contained in a bitset that is used to access and manipulate the individual bits as a helper class for the `operator[]` of class bitset.  \n  \nclass reference {  \n   friend class bitset\\<N>;  \n   public: \n   reference& operator=(\n   bool val);\n   reference& operator=(\n   const reference& _Bitref);\n   bool operator~() const;\n   operator bool() const;\n   reference& flip();\n   };  \n  \n### Parameters  \n ` val`  \n The value of the object of type `bool` to be assigned to a bit in a bitset.  \n  \n `_Bitref`  \n A reference of the form *x [ i ]* to the bit at position *i* in bitset *x*.  \n  \n### Return Value  \n A reference to the bit in the bitset specified by the argument position for the first, second, and fifth member functions of class reference, and **true** or **false**, to reflect the value of the modified bit in the bitset for the third and fourth member functions of class reference.  \n  \n### Remarks  \n The class reference exists only as a helper class for the bitset `operator[]`. The member class describes an object that can access an individual bit within a bitset. Let *b* be an object of type `bool`, *x* and *y* objects of type **bitset\\<***N***>**, and *i* and *j* valid positions within such an object. The notation *x [i]* references the bit at position *i* in bitset *x*. The member functions of class reference provide, in order, the following operations:  \n  \n|Operation|Definition|  \n|---------------|----------------|  \n|*x*[ *i*] = *b*|Stores `bool` value *b* at bit position *i* in bitset *x*.|  \n|*x*[ *i*] = *y*[ *j*]|Stores the value of the bit *y*[ *j*] at bit position *i* in bitset *x*.|  \n|*b* = ~ *x*[ *i*]|Stores the flipped value of the bit *x*[ *i*] in `bool`Â *b*.|  \n|*b* = *x*[ *i*]|Stores the value of the bit *x*[ *i*] in `bool`Â *b*.|  \n|*x*[ *i*]. `flip`( )|Stores the flipped value of the bit *x*[ *i*] back at bit position *i* in *x*.|  \n  \n### Example  \n  \n```cpp  \n// bitset_reference.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   bitset<5> b1 ( 2 );  \n   bitset<5> b2 ( 6 );  \n   cout << \"The initialized bitset<5> b1( 2 ) is: ( \"<< b1 << \" ).\"  \n        << endl;  \n   cout << \"The initialized bitset<5> b2( 6 ) is: ( \"<< b2 << \" ).\"  \n        << endl;  \n  \n   // Example of x [i] = b storing bool b at bit position i  \n   // in bitset x  \n   b1[ 0 ] = true;  \n   cout << \"The bitset<5> b1 with the bit at position 0 set to 1\"  \n        << \" is: ( \"<< b1 << \" )\" << endl;  \n  \n   // Example of x [i] = y [j] storing the bool value of the  \n   // bit at position j in bitset y at bit position i in bitset x  \n   b2 [4] = b1 [0];      // b1 [0] = true  \n   cout << \"The bitset<5> b2 with the bit at position 4 set to the \"  \n        << \"value\\n of the bit at position 0 of the bit in \"  \n        << \"bitset<5> b1 is: ( \"<<  b2  << \" )\" << endl;  \n  \n   // Example of b = ~x [i] flipping the value of the bit at  \n   // position i of bitset x and storing the value in an   \n   // object b of type bool  \n   bool b = ~b2 [4];      // b2 [4] = false  \n   if ( b )  \n      cout << \"The value of the object b = ~b2 [4] \"  \n           << \"of type bool is true.\" << endl;  \n   else  \n      cout << \"The value of the object b = ~b2 [4] \"  \n           << \"of type bool is false.\" << endl;  \n  \n   // Example of b = x [i] storing the value of the bit at  \n   // position i of bitset x in the object b of type bool  \n   b = b2 [4];  \n   if ( b )  \n      cout << \"The value of the object b = b2 [4] \"  \n           << \"of type bool is true.\" << endl;  \n   else  \n      cout << \"The value of the object b = b2 [4] \"  \n           << \"of type bool is false.\" << endl;  \n  \n   // Example of x [i] . flip ( ) toggling the value of the bit at  \n   // position i of bitset x  \n   cout << \"Before flipping the value of the bit at position 4 in \"  \n        << \"bitset b2,\\n it is ( \"<<  b2  << \" ).\" << endl;  \n   b2 [4].flip( );  \n   cout << \"After flipping the value of the bit at position 4 in \"  \n        << \"bitset b2,\\n it becomes ( \"<<  b2  << \" ).\" << endl;  \n   bool c;  \n   c = b2 [4].flip( );  \n   cout << \"After a second toggle, the value of the position 4\"  \n        << \" bit in b2 is now: \" << c << \".\";  \n}  \n```  \n  \n```Output  \nThe initialized bitset<5> b1( 2 ) is: ( 00010 ).  \nThe initialized bitset<5> b2( 6 ) is: ( 00110 ).  \nThe bitset<5> b1 with the bit at position 0 set to 1 is: ( 00011 )  \nThe bitset<5> b2 with the bit at position 4 set to the value  \n of the bit at position 0 of the bit in bitset<5> b1 is: ( 10110 )  \nThe value of the object b = ~b2 [4] of type bool is false.  \nThe value of the object b = b2 [4] of type bool is true.  \nBefore flipping the value of the bit at position 4 in bitset b2,  \n it is ( 10110 ).  \nAfter flipping the value of the bit at position 4 in bitset b2,  \n it becomes ( 00110 ).  \nAfter a second toggle, the value of the position 4 bit in b2 is now: 1.  \n```  \n  \n##  <a name=\"bitset__reset\"></a>  bitset::reset  \n Resets all the bits in a bitset to 0 or resets a bit at a specified position to 0.  \n  \n```  \n \nbitset\\<N>& reset();Â  \nbitset\\<N>& reset(size_t _Pos);\n```  \n  \n### Parameters  \n `_Pos`  \n The position of the bit in the bitset to be reset to 0.  \n  \n### Return Value  \n A copy of the bitset for which the member function was invoked.  \n  \n### Remarks  \n The second member function throws an [out_of_range](../standard-library/out-of-range-class.md) exception if the position specified is greater than the size of the bitset.  \n  \n### Example  \n  \n```cpp  \n// bitset_reset.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   bitset<5> b1 ( 13 );  \n   cout << \"The set of bits in bitset<5> b1(13) is: ( \"<< b1 << \" )\"  \n        << endl;  \n  \n   bitset<5> b1r3;  \n   b1r3 = b1.reset( 2 );  \n   cout << \"The collecion of bits obtained from resetting the\\n\"  \n        << \" third bit of bitset b1 is: ( \"<< b1r3 << \" )\"   \n        << endl;  \n  \n   bitset<5> b1r;  \n   b1r = b1.reset( );  \n   cout << \"The collecion of bits obtained from resetting all\\n\"  \n        << \" the elements of the bitset b1 is: ( \"<< b1r << \" )\"  \n        << endl;  \n}  \n```  \n  \n```Output  \nThe set of bits in bitset<5> b1(13) is: ( 01101 )  \nThe collecion of bits obtained from resetting the  \n third bit of bitset b1 is: ( 01001 )  \nThe collecion of bits obtained from resetting all  \n the elements of the bitset b1 is: ( 00000 )  \n```  \n  \n##  <a name=\"bitset__set\"></a>  bitset::set  \n Sets all the bits in a bitset to 1 or sets a bit at a specified position to 1.  \n  \n```  \n \nbitset\\<N>& set();\n\nbitset\\<N>& set(\n    size_t \n_Pos  ,   \n    bool \n    val = true);\n```  \n  \n### Parameters  \n `_Pos`  \n The position of the bit in the bitset to be set to assigned a value.  \n  \n ` val`  \n The value to be assigned to the bit at the position specified.  \n  \n### Return Value  \n A copy of the bitset for which the member function was invoked.  \n  \n### Remarks  \n The second member function throws an [out_of_range](../standard-library/out-of-range-class.md) exception if the position specified is greater than the size of the bitset.  \n  \n### Example  \n  \n```cpp  \n// bitset_set.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   bitset<5> b1 ( 6 );  \n   cout << \"The set of bits in bitset<5> b1(6) is: ( \"<< b1 << \" )\"  \n        << endl;  \n  \n   bitset<5> b1s0;  \n   b1s0 = b1.set( 0 );  \n   cout << \"The collecion of bits obtained from setting the\\n\"  \n        << \" zeroth bit of bitset b1 is: ( \"<< b1s0 << \" )\"   \n        << endl;  \n  \n   bitset<5> bs1;  \n   bs1 = b1.set( );  \n   cout << \"The collecion of bits obtained from setting all the\\n\"  \n        << \" elements of the bitset b1 is: ( \"<< bs1 << \" )\"  \n        << endl;  \n}  \n```  \n  \n```Output  \nThe set of bits in bitset<5> b1(6) is: ( 00110 )  \nThe collecion of bits obtained from setting the  \n zeroth bit of bitset b1 is: ( 00111 )  \nThe collecion of bits obtained from setting all the  \n elements of the bitset b1 is: ( 11111 )  \n```  \n  \n##  <a name=\"bitset__size\"></a>  bitset::size  \n Returns the number of bits in a bitset object.  \n  \n```  \n \nsize_t  \nsize() const;\n```  \n  \n### Return Value  \n The number of bits, *N*, in a **bitset\\<***N***>**.  \n  \n### Example  \n  The following example demonstrates the use of the bitset::size member function.  \n  \n```  \n// bitset_size.cpp  \n// compile with: /EHsc  \n#include <bitset>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n  \n    bitset<5> b1(6);  \n    size_t i;  \n  \n    cout << \"The set of bits in bitset<5> b1( 6 ) is: ( \"<< b1 << \" )\"  \n         << endl;  \n  \n    i = b1.size();  \n  \n    cout << \"The number of bits in bitset b1 is: \" << i << \".\"  \n         << endl;  \n}  \n```  \n  \n```Output  \nThe set of bits in bitset<5> b1( 6 ) is: ( 00110 )  \nThe number of bits in bitset b1 is: 5.  \n```  \n  \n##  <a name=\"bitset__test\"></a>  bitset::test  \n Tests whether the bit at a specified position in a bitset is set to 1.  \n  \n```  \nbool test(\n    size_t _Pos,) const;\n```  \n  \n### Parameters  \n `_Pos`  \n The position of the bit in the bitset to be tested for its value.  \n  \n### Return Value  \n **true** if the bit specified by the argument position is set to 1; otherwise, **false**.  \n  \n### Remarks  \n The member function throws an [out_of_range](../standard-library/out-of-range-class.md)\n\n"}