{"nodes":[{"pos":[12,59],"content":"&lt;system_error&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>system_error<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,47],"source":"&lt;system_error&gt; operators | Microsoft Docs"}]},{"pos":[262,292],"content":"&lt;system_error&gt; operators","linkify":"&lt;system_error&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>system_error<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,30],"source":"&lt;system_error&gt; operators"}]},{"pos":[311,338],"content":"<bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#operator_neq)</ept>","source":"[operator!=](#operator_neq)"},{"pos":[339,368],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt_)</ept>","source":"[operator&lt;](#operator_lt_)"},{"pos":[369,398],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[operator==](#operator_eq_eq)"},{"pos":[409,450],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator==","linkify":"<a name=\"operator_eq_eq\"></a>  operator==","source":"<a name=\"operator_eq_eq\"></a>  operator=="},{"content":"Tests if the object on the left side of the operator is equal to the object on the right side.","pos":[454,548]},{"pos":[722,732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[739,748]},{"content":"Description","pos":[749,760]},{"content":"The object to be tested for equality.","pos":[810,847]},{"content":"The object to be tested for equality.","pos":[860,897]},{"pos":[908,920],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[924,994],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the objects are equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if objects are not equal.","source":"**true** if the objects are equal; **false** if objects are not equal."},{"pos":[1004,1011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1015,1108],"content":"This function returns <ph id=\"ph1\">`left.category() == right.category() &amp;&amp; left.value() == right.value()`</ph>.","source":"This function returns `left.category() == right.category() && left.value() == right.value()`."},{"pos":[1118,1157],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator!=","linkify":"<a name=\"operator_neq\"></a>  operator!=","source":"<a name=\"operator_neq\"></a>  operator!="},{"content":"Tests if the object on the left side of the operator is not equal to the object on the right side.","pos":[1161,1259]},{"pos":[1433,1443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1450,1459]},{"content":"Description","pos":[1460,1471]},{"content":"The object to be tested for inequality.","pos":[1521,1560]},{"content":"The object to be tested for inequality.","pos":[1573,1612]},{"pos":[1623,1635],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1639,1745],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the object passed in <ph id=\"ph1\">`left`</ph> is not equal to the object passed in <ph id=\"ph2\">`right`</ph>; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the object passed in `left` is not equal to the object passed in `right`; otherwise **false**."},{"pos":[1755,1762],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1766,1807],"content":"This function returns <ph id=\"ph1\">`!(left == right)`</ph>.","source":"This function returns `!(left == right)`."},{"pos":[1817,1858],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt_\"></a>  operator&lt;","source":"<a name=\"operator_lt_\"></a>  operator&lt;"},{"content":"Tests if an object is less than the object passed in for comparison.","pos":[1862,1930]},{"pos":[2600,2610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[2617,2626]},{"content":"Description","pos":[2627,2638]},{"content":"The object to be compared.","pos":[2688,2714]},{"content":"The object to be compared.","pos":[2727,2753]},{"pos":[2764,2776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2780,2884],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the object passed in <ph id=\"ph1\">`left`</ph> is less than the object passed in <ph id=\"ph2\">`right`</ph>; Otherwise, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the object passed in `left` is less than the object passed in `right`; Otherwise, **false**."},{"pos":[2894,2901],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function tests the error order.","pos":[2905,2941]},{"pos":[2950,2958],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2962,3015],"content":"<bpt id=\"p1\">[</bpt>&lt;system_error&gt;<ept id=\"p1\">](../standard-library/system-error.md)</ept>","source":"[<system_error>](../standard-library/system-error.md)"}],"content":"---\ntitle: \"&lt;system_error&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: c14edefb-bd8a-4e90-88d3-c59c98e6f73c\ncaps.latest.revision: 11\nmanager: \"ghogen\"\n---\n# &lt;system_error&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator&lt;](#operator_lt_)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests if the object on the left side of the operator is equal to the object on the right side.  \n  \n```\nbool operator==(const error_code& left,\n    const error_condition& right);\n\nbool operator==(const error_condition& left,\n    const error_code& right);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`left`|The object to be tested for equality.|  \n|`right`|The object to be tested for equality.|  \n  \n### Return Value  \n **true** if the objects are equal; **false** if objects are not equal.  \n  \n### Remarks  \n This function returns `left.category() == right.category() && left.value() == right.value()`.  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests if the object on the left side of the operator is not equal to the object on the right side.  \n  \n```\nbool operator!=(const error_code& left,\n    const error_condition& right);\n\nbool operator!=(const error_condition& left,\n    const error_code& right);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`left`|The object to be tested for inequality.|  \n|`right`|The object to be tested for inequality.|  \n  \n### Return Value  \n **true** if the object passed in `left` is not equal to the object passed in `right`; otherwise **false**.  \n  \n### Remarks  \n This function returns `!(left == right)`.  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Tests if an object is less than the object passed in for comparison.  \n  \n```\ntemplate <class _Enum>  \ninline bool operator<(\n    _Enum left,\n    typename enable_if<is_error_code_enum<_Enum>::value,\n    const error_code&>::type right);\n\ntemplate <class _Enum>  \ninline bool operator<(\n    typename enable_if<is_error_code_enum<_Enum>::value,\n    const error_code&>::type left, _Enum right);\n\ntemplate <class _Enum>  \ninline bool operator<(\n    _Enum left,\n    typename enable_if<is_error_condition_enum<_Enum>::value,\n    const error_condition&>::type right);\n\ntemplate <class _Enum>  \ninline bool operator<(\n    typename enable_if<is_error_condition_enum<_Enum>::value,\n    const error_condition&>::type left, _Enum right);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`left`|The object to be compared.|  \n|`right`|The object to be compared.|  \n  \n### Return Value  \n **true** if the object passed in `left` is less than the object passed in `right`; Otherwise, **false**.  \n  \n### Remarks  \n This function tests the error order.  \n  \n## See Also  \n [<system_error>](../standard-library/system-error.md)\n\n\n\n"}