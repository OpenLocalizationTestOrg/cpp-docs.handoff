{"nodes":[{"pos":[12,44],"content":"Compiler Limits | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Limits | Microsoft Docs","pos":[0,32]}]},{"content":"Compiler Limits","pos":[611,626]},{"content":"The C++ standard recommends limits for various language constructs.","pos":[627,694]},{"content":"The following is a list of cases where the Visual C++ compiler does not implement the recommended limits.","pos":[695,800]},{"content":"The first number is the limit that is established in the ISO C++ 11 standard (INCITS/ISO/IEC 14882-2011[2012], Annex B) and the second number is the limit implemented by Visual C++:","pos":[801,982]},{"content":"Nesting levels of compound statements, iteration control structures, and selection control structures [C++ standard: 256] (Visual C++ compiler: depends on the combination of statements that are nested, but generally between 100 and 110).","pos":[992,1229]},{"content":"Parameters in one macro definition [C++ standard: 256] (Visual C++ compiler: 127).","pos":[1239,1321]},{"content":"Arguments in one macro invocation [C++ standard: 256] (Visual C++ compiler 127).","pos":[1331,1411]},{"pos":[1421,1681],"content":"Characters in a character string literal or wide string literal (after concatenation) [C++ standard: 65536] (Visual C++ compiler: 65535 single-byte characters, including the <ph id=\"ph1\">`null`</ph> terminator, and 32767 double-byte characters, including the <ph id=\"ph2\">`null`</ph> terminator).","source":"Characters in a character string literal or wide string literal (after concatenation) [C++ standard: 65536] (Visual C++ compiler: 65535 single-byte characters, including the `null` terminator, and 32767 double-byte characters, including the `null` terminator)."},{"pos":[1691,1831],"content":"Levels of nested class, structure, or union definitions in a single <ph id=\"ph1\">`struct-declaration-list`</ph> [C++ standard: 256] (Visual C++ compiler: 16).","source":"Levels of nested class, structure, or union definitions in a single `struct-declaration-list` [C++ standard: 256] (Visual C++ compiler: 16)."},{"content":"Member initializers in a constructor definition [C++ standard: 6144] (Visual C++ compiler: at least 6144).","pos":[1841,1947]},{"content":"Scope qualifications of one identifier [C++ standard: 256] (Visual C++ compiler: 127).","pos":[1957,2043]},{"pos":[2053,2270],"content":"Nested <ph id=\"ph1\">`extern`</ph> specifications [C++ standard: 1024] (Visual C++ compiler: 9 (not counting the implicit <ph id=\"ph2\">`extern`</ph> specification in global scope, or 10, if you count the implicit <ph id=\"ph3\">`extern`</ph> specification in global scope.).","source":"Nested `extern` specifications [C++ standard: 1024] (Visual C++ compiler: 9 (not counting the implicit `extern` specification in global scope, or 10, if you count the implicit `extern` specification in global scope.)."},{"content":"Template arguments in a template declaration [C++ standard: 1024] (Visual C++ compiler: 2046).","pos":[2280,2374]},{"content":"See Also","pos":[2383,2391]},{"content":"Nonstandard Behavior","pos":[2396,2416]}],"content":"---\ntitle: \"Compiler Limits | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"cl.exe compiler, limits for language constructs\"\nms.assetid: f1fa59c6-55b4-414b-80c5-3df72952160d\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Limits\nThe C++ standard recommends limits for various language constructs. The following is a list of cases where the Visual C++ compiler does not implement the recommended limits. The first number is the limit that is established in the ISO C++ 11 standard (INCITS/ISO/IEC 14882-2011[2012], Annex B) and the second number is the limit implemented by Visual C++:  \n  \n-   Nesting levels of compound statements, iteration control structures, and selection control structures [C++ standard: 256] (Visual C++ compiler: depends on the combination of statements that are nested, but generally between 100 and 110).  \n  \n-   Parameters in one macro definition [C++ standard: 256] (Visual C++ compiler: 127).  \n  \n-   Arguments in one macro invocation [C++ standard: 256] (Visual C++ compiler 127).  \n  \n-   Characters in a character string literal or wide string literal (after concatenation) [C++ standard: 65536] (Visual C++ compiler: 65535 single-byte characters, including the `null` terminator, and 32767 double-byte characters, including the `null` terminator).  \n  \n-   Levels of nested class, structure, or union definitions in a single `struct-declaration-list` [C++ standard: 256] (Visual C++ compiler: 16).  \n  \n-   Member initializers in a constructor definition [C++ standard: 6144] (Visual C++ compiler: at least 6144).  \n  \n-   Scope qualifications of one identifier [C++ standard: 256] (Visual C++ compiler: 127).  \n  \n-   Nested `extern` specifications [C++ standard: 1024] (Visual C++ compiler: 9 (not counting the implicit `extern` specification in global scope, or 10, if you count the implicit `extern` specification in global scope.).  \n  \n-   Template arguments in a template declaration [C++ standard: 1024] (Visual C++ compiler: 2046).  \n  \n## See Also  \n [Nonstandard Behavior](../cpp/nonstandard-behavior.md)"}