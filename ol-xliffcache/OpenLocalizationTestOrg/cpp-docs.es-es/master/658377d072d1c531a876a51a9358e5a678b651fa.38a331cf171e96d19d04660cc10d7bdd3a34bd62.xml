{"nodes":[{"pos":[12,59],"content":"Generic Delegates (Visual C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Generic Delegates (Visual C++) | Microsoft Docs","pos":[0,47]}]},{"content":"Generic Delegates (Visual C++)","pos":[628,658]},{"content":"You can use generic type parameters with delegates.","pos":[659,710]},{"content":"For more information on delegates, see <bpt id=\"p1\">[</bpt>delegate  (C++ Component Extensions)<ept id=\"p1\">](../windows/delegate-cpp-component-extensions.md)</ept>.","pos":[711,838],"source":" For more information on delegates, see [delegate  (C++ Component Extensions)](../windows/delegate-cpp-component-extensions.md)."},{"content":"Syntax","pos":[847,853]},{"content":"Parameters","pos":[1080,1090]},{"content":"(Optional)","pos":[1107,1117]},{"content":"Additional declarative information.","pos":[1121,1156]},{"content":"For more information on attributes and attribute classes, see Attributes.","pos":[1157,1230]},{"content":"type-parameter-identifier(s)","pos":[1238,1266]},{"content":"Comma-separated list of identifiers for the type parameters.","pos":[1271,1331]},{"content":"Takes the form specified in <bpt id=\"p1\">[</bpt>Constraints on Generic Type Parameters (C++/CLI)<ept id=\"p1\">](../windows/constraints-on-generic-type-parameters-cpp-cli.md)</ept>","pos":[1378,1518],"source":" Takes the form specified in [Constraints on Generic Type Parameters (C++/CLI)](../windows/constraints-on-generic-type-parameters-cpp-cli.md)"},{"content":"<bpt id=\"p1\">*</bpt>accessibility-modifiers<ept id=\"p1\">*</ept> (Optional)","pos":[1525,1561],"source":"*accessibility-modifiers* (Optional)"},{"content":"Accessibility modifiers (e.g. <bpt id=\"p1\">**</bpt>public<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`private`</ph>).","pos":[1565,1618],"source":" Accessibility modifiers (e.g. **public**, `private`)."},{"content":"result-type","pos":[1626,1637]},{"content":"The return type of the delegate.","pos":[1642,1674]},{"content":"identifier","pos":[1682,1692]},{"content":"The name of the delegate.","pos":[1697,1722]},{"content":"<bpt id=\"p1\">*</bpt>formal-parameters<ept id=\"p1\">*</ept> (Optional)","pos":[1729,1759],"source":"*formal-parameters* (Optional)"},{"content":"The parameter list of the delegate.","pos":[1763,1798]},{"content":"Example","pos":[1807,1814]},{"content":"The delegate type parameters are specified at the point where a delegate object is created.","pos":[1818,1909]},{"content":"Both the delegate and method associated with it must have the same signature.","pos":[1910,1987]},{"content":"The following is an example of a generic delegate declaration.","pos":[1988,2050]},{"content":"Example","pos":[2225,2232]},{"content":"The following sample shows that","pos":[2236,2267]},{"content":"You cannot use the same delegate object with different constructed types.","pos":[2277,2350]},{"content":"Create different delegate objects for different types.","pos":[2351,2405]},{"content":"A generic delegate can be associated with a generic method.","pos":[2415,2474]},{"content":"When a generic method is called without specifying type arguments, the compiler tries to infer the type arguments for the call.","pos":[2484,2611]},{"content":"Example","pos":[3557,3564]},{"content":"The following example declares a generic delegate <ph id=\"ph1\">`GenDelegate&lt;ItemType&gt;`</ph>, and then instantiates it by associating it to the method <ph id=\"ph2\">`MyMethod`</ph> that uses the type parameter <ph id=\"ph3\">`ItemType`</ph>.","pos":[3568,3751],"source":"The following example declares a generic delegate `GenDelegate<ItemType>`, and then instantiates it by associating it to the method `MyMethod` that uses the type parameter `ItemType`."},{"content":"Two instances of the delegate (an integer and a double) are created and invoked.","pos":[3752,3832]},{"content":"See Also","pos":[5259,5267]},{"content":"Generics","pos":[5272,5280]}],"content":"---\ntitle: \"Generic Delegates (Visual C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"generic delegates\"\n  - \"delegates, generic [C++]\"\nms.assetid: 09d430b2-1aef-4fbc-87f9-9d7b8185d798\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Generic Delegates (Visual C++)\nYou can use generic type parameters with delegates. For more information on delegates, see [delegate  (C++ Component Extensions)](../windows/delegate-cpp-component-extensions.md).  \n  \n## Syntax  \n  \n```  \n[attributes]   \ngeneric < [class | typename] type-parameter-identifiers >  \n[type-parameter-constraints-clauses]  \n[accessibility-modifiers] delegate result-type identifier   \n([formal-parameters]);  \n```  \n  \n#### Parameters  \n `attributes` (Optional)  \n Additional declarative information. For more information on attributes and attribute classes, see Attributes.  \n  \n *type-parameter-identifier(s)*  \n Comma-separated list of identifiers for the type parameters.  \n  \n `type-parameter-constraints-clauses`  \n Takes the form specified in [Constraints on Generic Type Parameters (C++/CLI)](../windows/constraints-on-generic-type-parameters-cpp-cli.md)  \n  \n *accessibility-modifiers* (Optional)  \n Accessibility modifiers (e.g. **public**, `private`).  \n  \n *result-type*  \n The return type of the delegate.  \n  \n *identifier*  \n The name of the delegate.  \n  \n *formal-parameters* (Optional)  \n The parameter list of the delegate.  \n  \n## Example  \n The delegate type parameters are specified at the point where a delegate object is created. Both the delegate and method associated with it must have the same signature. The following is an example of a generic delegate declaration.  \n  \n```  \n// generics_generic_delegate1.cpp  \n// compile with: /clr /c  \ngeneric < class ItemType>  \ndelegate ItemType GenDelegate(ItemType p1, ItemType% p2);  \n```  \n  \n## Example  \n The following sample shows that  \n  \n-   You cannot use the same delegate object with different constructed types. Create different delegate objects for different types.  \n  \n-   A generic delegate can be associated with a generic method.  \n  \n-   When a generic method is called without specifying type arguments, the compiler tries to infer the type arguments for the call.  \n  \n```  \n// generics_generic_delegate2.cpp  \n// compile with: /clr  \ngeneric < class ItemType>  \ndelegate ItemType GenDelegate(ItemType p1, ItemType% p2);  \n  \ngeneric < class ItemType>  \nref struct MyGenClass {  \n   ItemType MyMethod(ItemType i, ItemType % j) {  \n      return ItemType();  \n   }  \n};  \n  \nref struct MyClass {  \n   generic < class ItemType>  \n   static ItemType MyStaticMethod(ItemType i, ItemType % j) {  \n      return ItemType();  \n   }  \n};  \n  \nint main() {  \n   MyGenClass<int> ^ myObj1 = gcnew MyGenClass<int>();  \n   MyGenClass<double> ^ myObj2 = gcnew MyGenClass<double>();  \n   GenDelegate<int>^ myDelegate1 =  \n      gcnew GenDelegate<int>(myObj1, &MyGenClass<int>::MyMethod);  \n  \n   GenDelegate<double>^ myDelegate2 =   \n      gcnew GenDelegate<double>(myObj2, &MyGenClass<double>::MyMethod);  \n  \n   GenDelegate<int>^ myDelegate =  \n      gcnew GenDelegate<int>(&MyClass::MyStaticMethod<int>);  \n}  \n```  \n  \n## Example  \n The following example declares a generic delegate `GenDelegate<ItemType>`, and then instantiates it by associating it to the method `MyMethod` that uses the type parameter `ItemType`. Two instances of the delegate (an integer and a double) are created and invoked.  \n  \n```  \n// generics_generic_delegate.cpp  \n// compile with: /clr  \nusing namespace System;  \n  \n// declare generic delegate  \ngeneric <typename ItemType>  \ndelegate ItemType GenDelegate (ItemType p1, ItemType% p2);  \n  \n// Declare a generic class:  \ngeneric <typename ItemType>  \nref class MyGenClass {  \npublic:  \n   ItemType MyMethod(ItemType p1, ItemType% p2) {  \n      p2 = p1;  \n      return p1;  \n    }  \n};  \n  \nint main() {  \n   int i = 0, j = 0;   \n   double m = 0.0, n = 0.0;  \n  \n   MyGenClass<int>^ myObj1 = gcnew MyGenClass<int>();  \n   MyGenClass<double>^ myObj2 = gcnew MyGenClass<double>();   \n  \n   // Instantiate a delegate using int.  \n   GenDelegate<int>^ MyDelegate1 =   \n      gcnew GenDelegate<int>(myObj1, &MyGenClass<int>::MyMethod);  \n  \n   // Invoke the integer delegate using MyMethod.  \n   i = MyDelegate1(123, j);  \n  \n   Console::WriteLine(  \n      \"Invoking the integer delegate: i = {0}, j = {1}\", i, j);  \n  \n   // Instantiate a delegate using double.  \n   GenDelegate<double>^ MyDelegate2 =   \n      gcnew GenDelegate<double>(myObj2, &MyGenClass<double>::MyMethod);  \n  \n   // Invoke the integer delegate using MyMethod.  \n   m = MyDelegate2(0.123, n);  \n  \n   Console::WriteLine(  \n      \"Invoking the double delegate: m = {0}, n = {1}\", m, n);  \n}  \n```  \n  \n```Output  \nInvoking the integer delegate: i = 123, j = 123  \nInvoking the double delegate: m = 0.123, n = 0.123  \n```  \n  \n## See Also  \n [Generics](../windows/generics-cpp-component-extensions.md)"}