{"nodes":[{"pos":[12,74],"content":"Static Const Int Linkage Is No Longer Literal | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Static Const Int Linkage Is No Longer Literal | Microsoft Docs","pos":[0,62]}]},{"content":"Static Const Int Linkage Is No Longer Literal","pos":[669,714]},{"pos":[715,878],"content":"Declaration of a constant member of a class has changed from Managed Extensions for C++ to <ph id=\"ph1\">[!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]</ph>.","source":"Declaration of a constant member of a class has changed from Managed Extensions for C++ to [!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]."},{"content":"Although <ph id=\"ph1\">`static const`</ph> integral members are still supported, their linkage attribute has changed.","pos":[885,983],"source":"Although `static const` integral members are still supported, their linkage attribute has changed."},{"content":"Their former linkage attribute is now carried in a literal integral member.","pos":[984,1059]},{"content":"For example, consider the following Managed Extensions class:","pos":[1060,1121]},{"content":"This generates the following underlying CIL attributes for the field (note the literal attribute):","pos":[1227,1325]},{"content":"While this still compiles under the new syntax:","pos":[1488,1535]},{"content":"it no longer emits the literal attribute, and therefore is not viewed as a constant by the CLR runtime:","pos":[1640,1743]},{"pos":[1895,2046],"content":"In order to have the same inter-language literal attribute, the declaration should be changed to the newly supported <ph id=\"ph1\">`literal`</ph> data member, as follows,","source":"In order to have the same inter-language literal attribute, the declaration should be changed to the newly supported `literal` data member, as follows,"},{"content":"See Also","pos":[2148,2156]},{"content":"Member Declarations within a Class or Interface (C++/CLI)","pos":[2161,2218]},{"content":"literal","pos":[2295,2302]}],"content":"---\ntitle: \"Static Const Int Linkage Is No Longer Literal | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"literal attribute [C++]\"\n  - \"constants, declaring\"\n  - \"integral constant expressions\"\nms.assetid: d2a5e3d2-ffb0-4b61-8114-bec5993a1195\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Static Const Int Linkage Is No Longer Literal\nDeclaration of a constant member of a class has changed from Managed Extensions for C++ to [!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)].  \n  \n Although `static const` integral members are still supported, their linkage attribute has changed. Their former linkage attribute is now carried in a literal integral member. For example, consider the following Managed Extensions class:  \n  \n```  \npublic __gc class Constants {  \npublic:  \n   static const int LOG_DEBUG = 4;  \n};  \n```  \n  \n This generates the following underlying CIL attributes for the field (note the literal attribute):  \n  \n```  \n.field public static literal int32   \nmodopt([Microsoft.VisualC]Microsoft.VisualC.IsConstModifier) STANDARD_CLIENT_PRX = int32(0x00000004)  \n```  \n  \n While this still compiles under the new syntax:  \n  \n```  \npublic ref class Constants {  \npublic:  \n   static const int LOG_DEBUG = 4;  \n};  \n```  \n  \n it no longer emits the literal attribute, and therefore is not viewed as a constant by the CLR runtime:  \n  \n```  \n.field public static int32 modopt([Microsoft.VisualC]Microsoft.VisualC.IsConstModifier) STANDARD_CLIENT_PRX = int32(0x00000004)  \n```  \n  \n In order to have the same inter-language literal attribute, the declaration should be changed to the newly supported `literal` data member, as follows,  \n  \n```  \npublic ref class Constants {  \npublic:  \n   literal int LOG_DEBUG = 4;  \n};  \n```  \n  \n## See Also  \n [Member Declarations within a Class or Interface (C++/CLI)](../dotnet/member-declarations-within-a-class-or-interface-cpp-cli.md)   \n [literal](../windows/literal-cpp-component-extensions.md)"}