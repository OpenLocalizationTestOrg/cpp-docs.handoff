{"nodes":[{"pos":[12,44],"content":"CListCtrl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CListCtrl Class | Microsoft Docs","pos":[0,32]}]},{"pos":[782,797],"content":"CListCtrl Class","linkify":"CListCtrl Class","nodes":[{"content":"CListCtrl Class","pos":[0,15]}]},{"content":"Encapsulates the functionality of a \"list view control,\" which displays a collection of items each consisting of an icon (from an image list) and a label.","pos":[798,952]},{"pos":[961,967],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1023,1030],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1040,1059],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1066,1070]},{"content":"Description","pos":[1071,1082]},{"pos":[1120,1165],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::CListCtrl<ept id=\"p1\">](#clistctrl__clistctrl)</ept>","source":"[CListCtrl::CListCtrl](#clistctrl__clistctrl)"},{"pos":[1166,1198],"content":"Constructs a <ph id=\"ph1\">`CListCtrl`</ph> object.","source":"Constructs a `CListCtrl` object."},{"pos":[1209,1223],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1230,1234]},{"content":"Description","pos":[1235,1246]},{"pos":[1284,1349],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::ApproximateViewRect<ept id=\"p1\">](#clistctrl__approximateviewrect)</ept>","source":"[CListCtrl::ApproximateViewRect](#clistctrl__approximateviewrect)"},{"content":"Determines the width and height required to display the items of a list view control.","pos":[1350,1435]},{"pos":[1440,1481],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::Arrange<ept id=\"p1\">](#clistctrl__arrange)</ept>","source":"[CListCtrl::Arrange](#clistctrl__arrange)"},{"content":"Aligns items on a grid.","pos":[1482,1505]},{"pos":[1510,1567],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::CancelEditLabel<ept id=\"p1\">](#clistctrl__canceleditlabel)</ept>","source":"[CListCtrl::CancelEditLabel](#clistctrl__canceleditlabel)"},{"content":"Cancels item text editing operation.","pos":[1568,1604]},{"pos":[1609,1648],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::Create<ept id=\"p1\">](#clistctrl__create)</ept>","source":"[CListCtrl::Create](#clistctrl__create)"},{"pos":[1649,1712],"content":"Creates a list control and attaches it to a <ph id=\"ph1\">`CListCtrl`</ph> object.","source":"Creates a list control and attaches it to a `CListCtrl` object."},{"pos":[1717,1774],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::CreateDragImage<ept id=\"p1\">](#clistctrl__createdragimage)</ept>","source":"[CListCtrl::CreateDragImage](#clistctrl__createdragimage)"},{"content":"Creates a drag image list for a specified item.","pos":[1775,1822]},{"pos":[1827,1870],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::CreateEx<ept id=\"p1\">](#clistctrl__createex)</ept>","source":"[CListCtrl::CreateEx](#clistctrl__createex)"},{"pos":[1871,1977],"content":"Creates a list control with the specified Windows extended styles and attaches it to a <ph id=\"ph1\">`CListCtrl`</ph> object.","source":"Creates a list control with the specified Windows extended styles and attaches it to a `CListCtrl` object."},{"pos":[1982,2037],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::DeleteAllItems<ept id=\"p1\">](#clistctrl__deleteallitems)</ept>","source":"[CListCtrl::DeleteAllItems](#clistctrl__deleteallitems)"},{"content":"Deletes all items from the control.","pos":[2038,2073]},{"pos":[2078,2129],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::DeleteColumn<ept id=\"p1\">](#clistctrl__deletecolumn)</ept>","source":"[CListCtrl::DeleteColumn](#clistctrl__deletecolumn)"},{"content":"Deletes a column from the list view control.","pos":[2130,2174]},{"pos":[2179,2226],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::DeleteItem<ept id=\"p1\">](#clistctrl__deleteitem)</ept>","source":"[CListCtrl::DeleteItem](#clistctrl__deleteitem)"},{"content":"Deletes an item from the control.","pos":[2227,2260]},{"pos":[2265,2308],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::DrawItem<ept id=\"p1\">](#clistctrl__drawitem)</ept>","source":"[CListCtrl::DrawItem](#clistctrl__drawitem)"},{"content":"Called when a visual aspect of an owner-draw control changes.","pos":[2309,2370]},{"pos":[2375,2420],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::EditLabel<ept id=\"p1\">](#clistctrl__editlabel)</ept>","source":"[CListCtrl::EditLabel](#clistctrl__editlabel)"},{"content":"Begins in-place editing of an item's text.","pos":[2421,2463]},{"pos":[2468,2525],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::EnableGroupView<ept id=\"p1\">](#clistctrl__enablegroupview)</ept>","source":"[CListCtrl::EnableGroupView](#clistctrl__enablegroupview)"},{"content":"Enables or disables whether the items in a list view control display as a group.","pos":[2526,2606]},{"pos":[2611,2664],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::EnsureVisible<ept id=\"p1\">](#clistctrl__ensurevisible)</ept>","source":"[CListCtrl::EnsureVisible](#clistctrl__ensurevisible)"},{"content":"Ensures that an item is visible.","pos":[2665,2697]},{"pos":[2702,2745],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::FindItem<ept id=\"p1\">](#clistctrl__finditem)</ept>","source":"[CListCtrl::FindItem](#clistctrl__finditem)"},{"content":"Searches for a list view item having specified characteristics.","pos":[2746,2809]},{"pos":[2814,2861],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetBkColor<ept id=\"p1\">](#clistctrl__getbkcolor)</ept>","source":"[CListCtrl::GetBkColor](#clistctrl__getbkcolor)"},{"content":"Retrieves the background color of a list view control.","pos":[2862,2916]},{"pos":[2921,2968],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetBkImage<ept id=\"p1\">](#clistctrl__getbkimage)</ept>","source":"[CListCtrl::GetBkImage](#clistctrl__getbkimage)"},{"content":"Retrieves the current background image of a list view control.","pos":[2969,3031]},{"pos":[3036,3093],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetCallbackMask<ept id=\"p1\">](#clistctrl__getcallbackmask)</ept>","source":"[CListCtrl::GetCallbackMask](#clistctrl__getcallbackmask)"},{"content":"Retrieves the callback mask for a list view control.","pos":[3094,3146]},{"pos":[3151,3194],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetCheck<ept id=\"p1\">](#clistctrl__getcheck)</ept>","source":"[CListCtrl::GetCheck](#clistctrl__getcheck)"},{"content":"Retrieves the current display status of the state image associated with an item.","pos":[3195,3275]},{"pos":[3280,3325],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetColumn<ept id=\"p1\">](#clistctrl__getcolumn)</ept>","source":"[CListCtrl::GetColumn](#clistctrl__getcolumn)"},{"content":"Retrieves the attributes of a control's column.","pos":[3326,3373]},{"pos":[3378,3443],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetColumnOrderArray<ept id=\"p1\">](#clistctrl__getcolumnorderarray)</ept>","source":"[CListCtrl::GetColumnOrderArray](#clistctrl__getcolumnorderarray)"},{"content":"Retrieves the column order (left to right) of a list view control.","pos":[3444,3510]},{"pos":[3515,3570],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetColumnWidth<ept id=\"p1\">](#clistctrl__getcolumnwidth)</ept>","source":"[CListCtrl::GetColumnWidth](#clistctrl__getcolumnwidth)"},{"content":"Retrieves the width of a column in report view or list view.","pos":[3571,3631]},{"pos":[3636,3693],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetCountPerPage<ept id=\"p1\">](#clistctrl__getcountperpage)</ept>","source":"[CListCtrl::GetCountPerPage](#clistctrl__getcountperpage)"},{"content":"Calculates the number of items that can fit vertically in a list view control.","pos":[3694,3772]},{"pos":[3777,3832],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetEditControl<ept id=\"p1\">](#clistctrl__geteditcontrol)</ept>","source":"[CListCtrl::GetEditControl](#clistctrl__geteditcontrol)"},{"content":"Retrieves the handle of the edit control used to edit an item's text.","pos":[3833,3902]},{"pos":[3907,3958],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetEmptyText<ept id=\"p1\">](#clistctrl__getemptytext)</ept>","source":"[CListCtrl::GetEmptyText](#clistctrl__getemptytext)"},{"content":"Retrieves the string to display if the current list-view control is empty.","pos":[3959,4033]},{"pos":[4038,4097],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetExtendedStyle<ept id=\"p1\">](#clistctrl__getextendedstyle)</ept>","source":"[CListCtrl::GetExtendedStyle](#clistctrl__getextendedstyle)"},{"content":"Retrieves the current extended styles of a list view control.","pos":[4098,4159]},{"pos":[4164,4247],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetFirstSelectedItemPosition<ept id=\"p1\">](#clistctrl__getfirstselecteditemposition)</ept>","source":"[CListCtrl::GetFirstSelectedItemPosition](#clistctrl__getfirstselecteditemposition)"},{"content":"Retrieves the position of the first selected list view item in a list view control.","pos":[4248,4331]},{"pos":[4336,4393],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetFocusedGroup<ept id=\"p1\">](#clistctrl__getfocusedgroup)</ept>","source":"[CListCtrl::GetFocusedGroup](#clistctrl__getfocusedgroup)"},{"content":"Retrieves the group that has the keyboard focus in the current list-view control.","pos":[4394,4475]},{"pos":[4480,4533],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetGroupCount<ept id=\"p1\">](#clistctrl__getgroupcount)</ept>","source":"[CListCtrl::GetGroupCount](#clistctrl__getgroupcount)"},{"content":"Retrieves the number of groups in the current list-view control.","pos":[4534,4598]},{"pos":[4603,4654],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetGroupInfo<ept id=\"p1\">](#clistctrl__getgroupinfo)</ept>","source":"[CListCtrl::GetGroupInfo](#clistctrl__getgroupinfo)"},{"content":"Gets the information for a specified group of the list view control.","pos":[4655,4723]},{"pos":[4728,4793],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetGroupInfoByIndex<ept id=\"p1\">](#clistctrl__getgroupinfobyindex)</ept>","source":"[CListCtrl::GetGroupInfoByIndex](#clistctrl__getgroupinfobyindex)"},{"content":"Retrieves information about a specified group in the current list-view control.","pos":[4794,4873]},{"pos":[4878,4935],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetGroupMetrics<ept id=\"p1\">](#clistctrl__getgroupmetrics)</ept>","source":"[CListCtrl::GetGroupMetrics](#clistctrl__getgroupmetrics)"},{"content":"Retrieves the metrics of a group.","pos":[4936,4969]},{"pos":[4974,5025],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetGroupRect<ept id=\"p1\">](#clistctrl__getgrouprect)</ept>","source":"[CListCtrl::GetGroupRect](#clistctrl__getgrouprect)"},{"content":"Retrieves the bounding rectangle for a specified group in the current list-view control.","pos":[5026,5114]},{"pos":[5119,5172],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetGroupState<ept id=\"p1\">](#clistctrl__getgroupstate)</ept>","source":"[CListCtrl::GetGroupState](#clistctrl__getgroupstate)"},{"content":"Retrieves the state for a specified group in the current list-view control.","pos":[5173,5248]},{"pos":[5253,5306],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetHeaderCtrl<ept id=\"p1\">](#clistctrl__getheaderctrl)</ept>","source":"[CListCtrl::GetHeaderCtrl](#clistctrl__getheaderctrl)"},{"content":"Retrieves the header control of a list view control.","pos":[5307,5359]},{"pos":[5364,5415],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetHotCursor<ept id=\"p1\">](#clistctrl__gethotcursor)</ept>","source":"[CListCtrl::GetHotCursor](#clistctrl__gethotcursor)"},{"content":"Retrieves the cursor used when hot tracking is enabled for a list view control.","pos":[5416,5495]},{"pos":[5500,5547],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetHotItem<ept id=\"p1\">](#clistctrl__gethotitem)</ept>","source":"[CListCtrl::GetHotItem](#clistctrl__gethotitem)"},{"content":"Retrieves the list view item currently under the cursor.","pos":[5548,5604]},{"pos":[5609,5660],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetHoverTime<ept id=\"p1\">](#clistctrl__gethovertime)</ept>","source":"[CListCtrl::GetHoverTime](#clistctrl__gethovertime)"},{"content":"Retrieves the current hover time of a list view control.","pos":[5661,5717]},{"pos":[5722,5773],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetImageList<ept id=\"p1\">](#clistctrl__getimagelist)</ept>","source":"[CListCtrl::GetImageList](#clistctrl__getimagelist)"},{"content":"Retrieves the handle of an image list used for drawing list view items.","pos":[5774,5845]},{"pos":[5850,5903],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetInsertMark<ept id=\"p1\">](#clistctrl__getinsertmark)</ept>","source":"[CListCtrl::GetInsertMark](#clistctrl__getinsertmark)"},{"content":"Retrieves the current position of the insertion mark.","pos":[5904,5957]},{"pos":[5962,6025],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetInsertMarkColor<ept id=\"p1\">](#clistctrl__getinsertmarkcolor)</ept>","source":"[CListCtrl::GetInsertMarkColor](#clistctrl__getinsertmarkcolor)"},{"content":"Retrieves the current color of the insertion mark.","pos":[6026,6076]},{"pos":[6081,6142],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetInsertMarkRect<ept id=\"p1\">](#clistctrl__getinsertmarkrect)</ept>","source":"[CListCtrl::GetInsertMarkRect](#clistctrl__getinsertmarkrect)"},{"content":"Retrieves the rectangle that bounds the insertion point.","pos":[6143,6199]},{"pos":[6204,6245],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetItem<ept id=\"p1\">](#clistctrl__getitem)</ept>","source":"[CListCtrl::GetItem](#clistctrl__getitem)"},{"content":"Retrieves a list view item's attributes.","pos":[6246,6286]},{"pos":[6291,6342],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetItemCount<ept id=\"p1\">](#clistctrl__getitemcount)</ept>","source":"[CListCtrl::GetItemCount](#clistctrl__getitemcount)"},{"content":"Retrieves the number of items in a list view control.","pos":[6343,6396]},{"pos":[6401,6450],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetItemData<ept id=\"p1\">](#clistctrl__getitemdata)</ept>","source":"[CListCtrl::GetItemData](#clistctrl__getitemdata)"},{"content":"Retrieves the application-specific value associated with an item.","pos":[6451,6516]},{"pos":[6521,6580],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetItemIndexRect<ept id=\"p1\">](#clistctrl__getitemindexrect)</ept>","source":"[CListCtrl::GetItemIndexRect](#clistctrl__getitemindexrect)"},{"content":"Retrieves the bounding rectangle for all or part of a subitem in the current list-view control.","pos":[6581,6676]},{"pos":[6681,6738],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetItemPosition<ept id=\"p1\">](#clistctrl__getitemposition)</ept>","source":"[CListCtrl::GetItemPosition](#clistctrl__getitemposition)"},{"content":"Retrieves the position of a list view item.","pos":[6739,6782]},{"pos":[6787,6836],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetItemRect<ept id=\"p1\">](#clistctrl__getitemrect)</ept>","source":"[CListCtrl::GetItemRect](#clistctrl__getitemrect)"},{"content":"Retrieves the bounding rectangle for an item.","pos":[6837,6882]},{"pos":[6887,6942],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetItemSpacing<ept id=\"p1\">](#clistctrl__getitemspacing)</ept>","source":"[CListCtrl::GetItemSpacing](#clistctrl__getitemspacing)"},{"content":"Calculates the spacing between items in the current list-view control.","pos":[6943,7013]},{"pos":[7018,7069],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetItemState<ept id=\"p1\">](#clistctrl__getitemstate)</ept>","source":"[CListCtrl::GetItemState](#clistctrl__getitemstate)"},{"content":"Retrieves the state of a list view item.","pos":[7070,7110]},{"pos":[7115,7164],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetItemText<ept id=\"p1\">](#clistctrl__getitemtext)</ept>","source":"[CListCtrl::GetItemText](#clistctrl__getitemtext)"},{"content":"Retrieves the text of a list view item or subitem.","pos":[7165,7215]},{"pos":[7220,7269],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetNextItem<ept id=\"p1\">](#clistctrl__getnextitem)</ept>","source":"[CListCtrl::GetNextItem](#clistctrl__getnextitem)"},{"content":"Searches for a list view item with specified properties and with specified relationship to a given item.","pos":[7270,7374]},{"pos":[7379,7438],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetNextItemIndex<ept id=\"p1\">](#clistctrl__getnextitemindex)</ept>","source":"[CListCtrl::GetNextItemIndex](#clistctrl__getnextitemindex)"},{"content":"Retrieves the index of the item in the current list-view control that has a specified set of properties.","pos":[7439,7543]},{"pos":[7548,7613],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetNextSelectedItem<ept id=\"p1\">](#clistctrl__getnextselecteditem)</ept>","source":"[CListCtrl::GetNextSelectedItem](#clistctrl__getnextselecteditem)"},{"content":"Retrieves the index of a list view item position, and the position of the next selected list view item for iterating.","pos":[7614,7731]},{"pos":[7736,7803],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetNumberOfWorkAreas<ept id=\"p1\">](#clistctrl__getnumberofworkareas)</ept>","source":"[CListCtrl::GetNumberOfWorkAreas](#clistctrl__getnumberofworkareas)"},{"content":"Retrieves the current number of working areas for a list view control.","pos":[7804,7874]},{"pos":[7879,7924],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetOrigin<ept id=\"p1\">](#clistctrl__getorigin)</ept>","source":"[CListCtrl::GetOrigin](#clistctrl__getorigin)"},{"content":"Retrieves the current view origin for a list view control.","pos":[7925,7983]},{"pos":[7988,8045],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetOutlineColor<ept id=\"p1\">](#clistctrl__getoutlinecolor)</ept>","source":"[CListCtrl::GetOutlineColor](#clistctrl__getoutlinecolor)"},{"content":"Retrieves the color of the border of a list view control.","pos":[8046,8103]},{"pos":[8108,8169],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetSelectedColumn<ept id=\"p1\">](#clistctrl__getselectedcolumn)</ept>","source":"[CListCtrl::GetSelectedColumn](#clistctrl__getselectedcolumn)"},{"content":"Retrieves the index of the currently selected column in the list control.","pos":[8170,8243]},{"pos":[8248,8307],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetSelectedCount<ept id=\"p1\">](#clistctrl__getselectedcount)</ept>","source":"[CListCtrl::GetSelectedCount](#clistctrl__getselectedcount)"},{"content":"Retrieves the number of selected items in the list view control.","pos":[8308,8372]},{"pos":[8377,8436],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetSelectionMark<ept id=\"p1\">](#clistctrl__getselectionmark)</ept>","source":"[CListCtrl::GetSelectionMark](#clistctrl__getselectionmark)"},{"content":"Retrieves the selection mark of a list view control.","pos":[8437,8489]},{"pos":[8494,8549],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetStringWidth<ept id=\"p1\">](#clistctrl__getstringwidth)</ept>","source":"[CListCtrl::GetStringWidth](#clistctrl__getstringwidth)"},{"content":"Determines the minimum column width necessary to display all of a given string.","pos":[8550,8629]},{"pos":[8634,8689],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetSubItemRect<ept id=\"p1\">](#clistctrl__getsubitemrect)</ept>","source":"[CListCtrl::GetSubItemRect](#clistctrl__getsubitemrect)"},{"content":"Retrieves the bounding rectangle of an item in a list view control.","pos":[8690,8757]},{"pos":[8762,8817],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetTextBkColor<ept id=\"p1\">](#clistctrl__gettextbkcolor)</ept>","source":"[CListCtrl::GetTextBkColor](#clistctrl__gettextbkcolor)"},{"content":"Retrieves the text background color of a list view control.","pos":[8818,8877]},{"pos":[8882,8933],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetTextColor<ept id=\"p1\">](#clistctrl__gettextcolor)</ept>","source":"[CListCtrl::GetTextColor](#clistctrl__gettextcolor)"},{"content":"Retrieves the text color of a list view control.","pos":[8934,8982]},{"pos":[8987,9036],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetTileInfo<ept id=\"p1\">](#clistctrl__gettileinfo)</ept>","source":"[CListCtrl::GetTileInfo](#clistctrl__gettileinfo)"},{"content":"Retrieves information about a tile in a list view control.","pos":[9037,9095]},{"pos":[9100,9157],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetTileViewInfo<ept id=\"p1\">](#clistctrl__gettileviewinfo)</ept>","source":"[CListCtrl::GetTileViewInfo](#clistctrl__gettileviewinfo)"},{"content":"Retrieves information about a list view control in tile view.","pos":[9158,9219]},{"pos":[9224,9273],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetToolTips<ept id=\"p1\">](#clistctrl__gettooltips)</ept>","source":"[CListCtrl::GetToolTips](#clistctrl__gettooltips)"},{"content":"Retrieves the tooltip control that the list view control uses to display tooltips.","pos":[9274,9356]},{"pos":[9361,9410],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetTopIndex<ept id=\"p1\">](#clistctrl__gettopindex)</ept>","source":"[CListCtrl::GetTopIndex](#clistctrl__gettopindex)"},{"content":"Retrieves the index of the topmost visible item.","pos":[9411,9459]},{"pos":[9464,9505],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetView<ept id=\"p1\">](#clistctrl__getview)</ept>","source":"[CListCtrl::GetView](#clistctrl__getview)"},{"content":"Gets the view of the list view control.","pos":[9506,9545]},{"pos":[9550,9599],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetViewRect<ept id=\"p1\">](#clistctrl__getviewrect)</ept>","source":"[CListCtrl::GetViewRect](#clistctrl__getviewrect)"},{"content":"Retrieves the bounding rectangle of all items in the list view control.","pos":[9600,9671]},{"pos":[9676,9727],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::GetWorkAreas<ept id=\"p1\">](#clistctrl__getworkareas)</ept>","source":"[CListCtrl::GetWorkAreas](#clistctrl__getworkareas)"},{"content":"Retrieves the current working areas of a list view control.","pos":[9728,9787]},{"pos":[9792,9835],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::HasGroup<ept id=\"p1\">](#clistctrl__hasgroup)</ept>","source":"[CListCtrl::HasGroup](#clistctrl__hasgroup)"},{"content":"Determines if the list view control has the specified group.","pos":[9836,9896]},{"pos":[9901,9942],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::HitTest<ept id=\"p1\">](#clistctrl__hittest)</ept>","source":"[CListCtrl::HitTest](#clistctrl__hittest)"},{"content":"Determines which list view item is at a specified position.","pos":[9943,10002]},{"pos":[10007,10058],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::InsertColumn<ept id=\"p1\">](#clistctrl__insertcolumn)</ept>","source":"[CListCtrl::InsertColumn](#clistctrl__insertcolumn)"},{"content":"Inserts a new column in a list view control.","pos":[10059,10103]},{"pos":[10108,10157],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::InsertGroup<ept id=\"p1\">](#clistctrl__insertgroup)</ept>","source":"[CListCtrl::InsertGroup](#clistctrl__insertgroup)"},{"content":"Inserts a group into the list view control.","pos":[10158,10201]},{"pos":[10206,10267],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::InsertGroupSorted<ept id=\"p1\">](#clistctrl__insertgroupsorted)</ept>","source":"[CListCtrl::InsertGroupSorted](#clistctrl__insertgroupsorted)"},{"content":"Inserts the specified group into an ordered list of groups.","pos":[10268,10327]},{"pos":[10332,10379],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::InsertItem<ept id=\"p1\">](#clistctrl__insertitem)</ept>","source":"[CListCtrl::InsertItem](#clistctrl__insertitem)"},{"content":"Inserts a new item in a list view control.","pos":[10380,10422]},{"pos":[10427,10488],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::InsertMarkHitTest<ept id=\"p1\">](#clistctrl__insertmarkhittest)</ept>","source":"[CListCtrl::InsertMarkHitTest](#clistctrl__insertmarkhittest)"},{"content":"Retrieves the insertion point closest to a specified point.","pos":[10489,10548]},{"pos":[10553,10616],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::IsGroupViewEnabled<ept id=\"p1\">](#clistctrl__isgroupviewenabled)</ept>","source":"[CListCtrl::IsGroupViewEnabled](#clistctrl__isgroupviewenabled)"},{"content":"Determines whether group view is enabled for a list view control.","pos":[10617,10682]},{"pos":[10687,10740],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::IsItemVisible<ept id=\"p1\">](#clistctrl__isitemvisible)</ept>","source":"[CListCtrl::IsItemVisible](#clistctrl__isitemvisible)"},{"content":"Indicates whether a specified item in the current list-view control is visible.","pos":[10741,10820]},{"pos":[10825,10876],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::MapIDToIndex<ept id=\"p1\">](#clistctrl__mapidtoindex)</ept>","source":"[CListCtrl::MapIDToIndex](#clistctrl__mapidtoindex)"},{"content":"Maps the unique ID of an item in the current list-view control to an index.","pos":[10877,10952]},{"pos":[10957,11008],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::MapIndexToID<ept id=\"p1\">](#clistctrl__mapindextoid)</ept>","source":"[CListCtrl::MapIndexToID](#clistctrl__mapindextoid)"},{"content":"Maps the index of an item in the current list-view control to a unique ID.","pos":[11009,11083]},{"pos":[11088,11133],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::MoveGroup<ept id=\"p1\">](#clistctrl__movegroup)</ept>","source":"[CListCtrl::MoveGroup](#clistctrl__movegroup)"},{"content":"Moves the specified group.","pos":[11134,11160]},{"pos":[11165,11222],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::MoveItemToGroup<ept id=\"p1\">](#clistctrl__moveitemtogroup)</ept>","source":"[CListCtrl::MoveItemToGroup](#clistctrl__moveitemtogroup)"},{"content":"Moves the specified group to the specified zero based index of the list view control.","pos":[11223,11308]},{"pos":[11313,11362],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::RedrawItems<ept id=\"p1\">](#clistctrl__redrawitems)</ept>","source":"[CListCtrl::RedrawItems](#clistctrl__redrawitems)"},{"content":"Forces a list view control to repaint a range of items.","pos":[11363,11418]},{"pos":[11423,11480],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::RemoveAllGroups<ept id=\"p1\">](#clistctrl__removeallgroups)</ept>","source":"[CListCtrl::RemoveAllGroups](#clistctrl__removeallgroups)"},{"content":"Removes all groups from a list view control.","pos":[11481,11525]},{"pos":[11530,11579],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::RemoveGroup<ept id=\"p1\">](#clistctrl__removegroup)</ept>","source":"[CListCtrl::RemoveGroup](#clistctrl__removegroup)"},{"content":"Removes the specified group from the list view control.","pos":[11580,11635]},{"pos":[11640,11679],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::Scroll<ept id=\"p1\">](#clistctrl__scroll)</ept>","source":"[CListCtrl::Scroll](#clistctrl__scroll)"},{"content":"Scrolls the content of a list view control.","pos":[11680,11723]},{"pos":[11728,11775],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetBkColor<ept id=\"p1\">](#clistctrl__setbkcolor)</ept>","source":"[CListCtrl::SetBkColor](#clistctrl__setbkcolor)"},{"content":"Sets the background color of the list view control.","pos":[11776,11827]},{"pos":[11832,11879],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetBkImage<ept id=\"p1\">](#clistctrl__setbkimage)</ept>","source":"[CListCtrl::SetBkImage](#clistctrl__setbkimage)"},{"content":"Sets the current background image of a list view control.","pos":[11880,11937]},{"pos":[11942,11999],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetCallbackMask<ept id=\"p1\">](#clistctrl__setcallbackmask)</ept>","source":"[CListCtrl::SetCallbackMask](#clistctrl__setcallbackmask)"},{"content":"Sets the callback mask for a list view control.","pos":[12000,12047]},{"pos":[12052,12095],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetCheck<ept id=\"p1\">](#clistctrl__setcheck)</ept>","source":"[CListCtrl::SetCheck](#clistctrl__setcheck)"},{"content":"Sets the current display status of the state image associated with an item.","pos":[12096,12171]},{"pos":[12176,12221],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetColumn<ept id=\"p1\">](#clistctrl__setcolumn)</ept>","source":"[CListCtrl::SetColumn](#clistctrl__setcolumn)"},{"content":"Sets the attributes of a list view column.","pos":[12222,12264]},{"pos":[12269,12334],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetColumnOrderArray<ept id=\"p1\">](#clistctrl__setcolumnorderarray)</ept>","source":"[CListCtrl::SetColumnOrderArray](#clistctrl__setcolumnorderarray)"},{"content":"Sets the column order (left to right) of a list view control.","pos":[12335,12396]},{"pos":[12401,12456],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetColumnWidth<ept id=\"p1\">](#clistctrl__setcolumnwidth)</ept>","source":"[CListCtrl::SetColumnWidth](#clistctrl__setcolumnwidth)"},{"content":"Changes the width of a column in report view or list view.","pos":[12457,12515]},{"pos":[12520,12579],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetExtendedStyle<ept id=\"p1\">](#clistctrl__setextendedstyle)</ept>","source":"[CListCtrl::SetExtendedStyle](#clistctrl__setextendedstyle)"},{"content":"Sets the current extended styles of a list view control.","pos":[12580,12636]},{"pos":[12641,12692],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetGroupInfo<ept id=\"p1\">](#clistctrl__setgroupinfo)</ept>","source":"[CListCtrl::SetGroupInfo](#clistctrl__setgroupinfo)"},{"content":"Sets the information for the specified group of a list view control.","pos":[12693,12761]},{"pos":[12766,12823],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetGroupMetrics<ept id=\"p1\">](#clistctrl__setgroupmetrics)</ept>","source":"[CListCtrl::SetGroupMetrics](#clistctrl__setgroupmetrics)"},{"content":"Sets the group metrics of a list view control.","pos":[12824,12870]},{"pos":[12875,12926],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetHotCursor<ept id=\"p1\">](#clistctrl__sethotcursor)</ept>","source":"[CListCtrl::SetHotCursor](#clistctrl__sethotcursor)"},{"content":"Sets the cursor used when hot tracking is enabled for a list view control.","pos":[12927,13001]},{"pos":[13006,13053],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetHotItem<ept id=\"p1\">](#clistctrl__sethotitem)</ept>","source":"[CListCtrl::SetHotItem](#clistctrl__sethotitem)"},{"content":"Sets the current hot item of a list view control.","pos":[13054,13103]},{"pos":[13108,13159],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetHoverTime<ept id=\"p1\">](#clistctrl__sethovertime)</ept>","source":"[CListCtrl::SetHoverTime](#clistctrl__sethovertime)"},{"content":"Sets the current hover time of a list view control.","pos":[13160,13211]},{"pos":[13216,13271],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetIconSpacing<ept id=\"p1\">](#clistctrl__seticonspacing)</ept>","source":"[CListCtrl::SetIconSpacing](#clistctrl__seticonspacing)"},{"content":"Sets the spacing between icons in a list view control.","pos":[13272,13326]},{"pos":[13331,13382],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetImageList<ept id=\"p1\">](#clistctrl__setimagelist)</ept>","source":"[CListCtrl::SetImageList](#clistctrl__setimagelist)"},{"content":"Assigns an image list to a list view control.","pos":[13383,13428]},{"pos":[13433,13480],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetInfoTip<ept id=\"p1\">](#clistctrl__setinfotip)</ept>","source":"[CListCtrl::SetInfoTip](#clistctrl__setinfotip)"},{"content":"Sets the tooltip text.","pos":[13481,13503]},{"pos":[13508,13561],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetInsertMark<ept id=\"p1\">](#clistctrl__setinsertmark)</ept>","source":"[CListCtrl::SetInsertMark](#clistctrl__setinsertmark)"},{"content":"Sets the insertion point to the defined position.","pos":[13562,13611]},{"pos":[13616,13679],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetInsertMarkColor<ept id=\"p1\">](#clistctrl__setinsertmarkcolor)</ept>","source":"[CListCtrl::SetInsertMarkColor](#clistctrl__setinsertmarkcolor)"},{"content":"Sets the color of the insertion point.","pos":[13680,13718]},{"pos":[13723,13764],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetItem<ept id=\"p1\">](#clistctrl__setitem)</ept>","source":"[CListCtrl::SetItem](#clistctrl__setitem)"},{"content":"Sets some or all of a list view item's attributes.","pos":[13765,13815]},{"pos":[13820,13871],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetItemCount<ept id=\"p1\">](#clistctrl__setitemcount)</ept>","source":"[CListCtrl::SetItemCount](#clistctrl__setitemcount)"},{"content":"Prepares a list view control for adding a large number of items.","pos":[13872,13936]},{"pos":[13941,13996],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetItemCountEx<ept id=\"p1\">](#clistctrl__setitemcountex)</ept>","source":"[CListCtrl::SetItemCountEx](#clistctrl__setitemcountex)"},{"content":"Sets the item count for a virtual list view control.","pos":[13997,14049]},{"pos":[14054,14103],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetItemData<ept id=\"p1\">](#clistctrl__setitemdata)</ept>","source":"[CListCtrl::SetItemData](#clistctrl__setitemdata)"},{"content":"Sets the item's application-specific value.","pos":[14104,14147]},{"pos":[14152,14213],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetItemIndexState<ept id=\"p1\">](#clistctrl__setitemindexstate)</ept>","source":"[CListCtrl::SetItemIndexState](#clistctrl__setitemindexstate)"},{"content":"Sets the state of an item in the current list-view control.","pos":[14214,14273]},{"pos":[14278,14335],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetItemPosition<ept id=\"p1\">](#clistctrl__setitemposition)</ept>","source":"[CListCtrl::SetItemPosition](#clistctrl__setitemposition)"},{"content":"Moves an item to a specified position in a list view control.","pos":[14336,14397]},{"pos":[14402,14453],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetItemState<ept id=\"p1\">](#clistctrl__setitemstate)</ept>","source":"[CListCtrl::SetItemState](#clistctrl__setitemstate)"},{"content":"Changes the state of an item in a list view control.","pos":[14454,14506]},{"pos":[14511,14560],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetItemText<ept id=\"p1\">](#clistctrl__setitemtext)</ept>","source":"[CListCtrl::SetItemText](#clistctrl__setitemtext)"},{"content":"Changes the text of a list view item or subitem.","pos":[14561,14609]},{"pos":[14614,14671],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetOutlineColor<ept id=\"p1\">](#clistctrl__setoutlinecolor)</ept>","source":"[CListCtrl::SetOutlineColor](#clistctrl__setoutlinecolor)"},{"content":"Sets the color of the border of a list view control.","pos":[14672,14724]},{"pos":[14729,14790],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetSelectedColumn<ept id=\"p1\">](#clistctrl__setselectedcolumn)</ept>","source":"[CListCtrl::SetSelectedColumn](#clistctrl__setselectedcolumn)"},{"content":"Sets the selected column of the list view control.","pos":[14791,14841]},{"pos":[14846,14905],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetSelectionMark<ept id=\"p1\">](#clistctrl__setselectionmark)</ept>","source":"[CListCtrl::SetSelectionMark](#clistctrl__setselectionmark)"},{"content":"Sets the selection mark of a list view control.","pos":[14906,14953]},{"pos":[14958,15013],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetTextBkColor<ept id=\"p1\">](#clistctrl__settextbkcolor)</ept>","source":"[CListCtrl::SetTextBkColor](#clistctrl__settextbkcolor)"},{"content":"Sets the background color of text in a list view control.","pos":[15014,15071]},{"pos":[15076,15127],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetTextColor<ept id=\"p1\">](#clistctrl__settextcolor)</ept>","source":"[CListCtrl::SetTextColor](#clistctrl__settextcolor)"},{"content":"Sets the text color of a list view control.","pos":[15128,15171]},{"pos":[15176,15225],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetTileInfo<ept id=\"p1\">](#clistctrl__settileinfo)</ept>","source":"[CListCtrl::SetTileInfo](#clistctrl__settileinfo)"},{"content":"Sets the information for a tile of the list view control.","pos":[15226,15283]},{"pos":[15288,15345],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetTileViewInfo<ept id=\"p1\">](#clistctrl__settileviewinfo)</ept>","source":"[CListCtrl::SetTileViewInfo](#clistctrl__settileviewinfo)"},{"content":"Sets information that a list view control uses in tile view.","pos":[15346,15406]},{"pos":[15411,15460],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetToolTips<ept id=\"p1\">](#clistctrl__settooltips)</ept>","source":"[CListCtrl::SetToolTips](#clistctrl__settooltips)"},{"content":"Sets the tooltip control that the list view control will use to display tooltips.","pos":[15461,15542]},{"pos":[15547,15588],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetView<ept id=\"p1\">](#clistctrl__setview)</ept>","source":"[CListCtrl::SetView](#clistctrl__setview)"},{"content":"Sets the view of the list view control.","pos":[15589,15628]},{"pos":[15633,15684],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SetWorkAreas<ept id=\"p1\">](#clistctrl__setworkareas)</ept>","source":"[CListCtrl::SetWorkAreas](#clistctrl__setworkareas)"},{"content":"Sets the area where icons can be displayed in a list view control.","pos":[15685,15751]},{"pos":[15756,15803],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SortGroups<ept id=\"p1\">](#clistctrl__sortgroups)</ept>","source":"[CListCtrl::SortGroups](#clistctrl__sortgroups)"},{"content":"Sorts the groups of a list view control with a user-defined function.","pos":[15804,15873]},{"pos":[15878,15923],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SortItems<ept id=\"p1\">](#clistctrl__sortitems)</ept>","source":"[CListCtrl::SortItems](#clistctrl__sortitems)"},{"content":"Sorts list view items using an application-defined comparison function.","pos":[15924,15995]},{"pos":[16000,16049],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SortItemsEx<ept id=\"p1\">](#clistctrl__sortitemsex)</ept>","source":"[CListCtrl::SortItemsEx](#clistctrl__sortitemsex)"},{"content":"Sorts list view items using an application-defined comparison function.","pos":[16050,16121]},{"pos":[16126,16181],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::SubItemHitTest<ept id=\"p1\">](#clistctrl__subitemhittest)</ept>","source":"[CListCtrl::SubItemHitTest](#clistctrl__subitemhittest)"},{"content":"Determines which list view item, if any, is at a given position.","pos":[16182,16246]},{"pos":[16251,16290],"content":"<bpt id=\"p1\">[</bpt>CListCtrl::Update<ept id=\"p1\">](#clistctrl__update)</ept>","source":"[CListCtrl::Update](#clistctrl__update)"},{"content":"Forces the control to repaint a specified item.","pos":[16291,16338]},{"pos":[16348,16355],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In addition to an icon and label, each item can have information displayed in columns to the right of the icon and label.","pos":[16359,16480]},{"content":"This control (and therefore the <ph id=\"ph1\">`CListCtrl`</ph> class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later.","pos":[16481,16628],"source":" This control (and therefore the `CListCtrl` class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later."},{"content":"The following is a brief overview of the <ph id=\"ph1\">`CListCtrl`</ph> class.","pos":[16635,16694],"source":"The following is a brief overview of the `CListCtrl` class."},{"content":"For a detailed, conceptual discussion, see <bpt id=\"p1\">[</bpt>Using CListCtrl<ept id=\"p1\">](../../mfc/using-clistctrl.md)</ept> and <bpt id=\"p2\">[</bpt>Controls<ept id=\"p2\">](../../mfc/controls-mfc.md)</ept>.","pos":[16695,16828],"source":" For a detailed, conceptual discussion, see [Using CListCtrl](../../mfc/using-clistctrl.md) and [Controls](../../mfc/controls-mfc.md)."},{"pos":[16837,16842],"content":"Views","linkify":"Views","nodes":[{"content":"Views","pos":[0,5]}]},{"content":"List view controls can display their contents in four different ways, called \"views.\"","pos":[16846,16931]},{"content":"Icon view","pos":[16941,16950]},{"content":"Each item appears as a full-sized icon (32 x 32 pixels) with a label below it.","pos":[16961,17039]},{"content":"The user can drag the items to any location in the list view window.","pos":[17040,17108]},{"content":"Small icon view","pos":[17118,17133]},{"content":"Each item appears as a small icon (16 x 16 pixels) with the label to the right of it.","pos":[17144,17229]},{"content":"The user can drag the items to any location in the list view window.","pos":[17230,17298]},{"content":"List view","pos":[17308,17317]},{"content":"Each item appears as a small icon with a label to the right of it.","pos":[17328,17394]},{"content":"Items are arranged in columns and cannot be dragged to any location in the list view window.","pos":[17395,17487]},{"content":"Report view","pos":[17497,17508]},{"content":"Each item appears on its own line, with additional information arranged in columns to the right.","pos":[17519,17615]},{"content":"The leftmost column contains the small icon and label, and subsequent columns contain subitems as specified by the application.","pos":[17616,17743]},{"content":"An embedded header control (class <bpt id=\"p1\">[</bpt>CHeaderCtrl<ept id=\"p1\">](../../mfc/reference/cheaderctrl-class.md)</ept>) implements these columns.","pos":[17744,17860],"source":" An embedded header control (class [CHeaderCtrl](../../mfc/reference/cheaderctrl-class.md)) implements these columns."},{"content":"For more information on the header control and columns in a report view, see <bpt id=\"p1\">[</bpt>Using CListCtrl: Adding Columns to the Control (Report View)<ept id=\"p1\">](../../mfc/adding-columns-to-the-control-report-view.md)</ept>.","pos":[17861,18057],"source":" For more information on the header control and columns in a report view, see [Using CListCtrl: Adding Columns to the Control (Report View)](../../mfc/adding-columns-to-the-control-report-view.md)."},{"content":"Also see:","pos":[18064,18073]},{"content":"Knowledge Base article Q250614: HOWTO: Sort Items in a CListCtrl in Report View","pos":[18083,18162]},{"content":"Knowledge Base article Q200054: PRB: OnTimer() Is Not Called Repeatedly for a List Control","pos":[18172,18262]},{"content":"The style of the control's current list view determines the current view.","pos":[18269,18342]},{"content":"For more information on these styles and their usage, see <bpt id=\"p1\">[</bpt>Using CListCtrl: Changing List Control Styles<ept id=\"p1\">](../../mfc/changing-list-control-styles.md)</ept>.","pos":[18343,18492],"source":" For more information on these styles and their usage, see [Using CListCtrl: Changing List Control Styles](../../mfc/changing-list-control-styles.md)."},{"pos":[18501,18516],"content":"Extended Styles","linkify":"Extended Styles","nodes":[{"content":"Extended Styles","pos":[0,15]}]},{"content":"In addition to the standard list styles, class <ph id=\"ph1\">`CListCtrl`</ph> supports a large set of extended styles, providing enriched functionality.","pos":[18520,18653],"source":"In addition to the standard list styles, class `CListCtrl` supports a large set of extended styles, providing enriched functionality."},{"content":"Some examples of this functionality include:","pos":[18654,18698]},{"content":"Hover selection","pos":[18708,18723]},{"content":"When enabled, allows automatic selection of an item when the cursor remains over the item for a certain period of time.","pos":[18734,18853]},{"content":"Virtual list views","pos":[18863,18881]},{"content":"When enabled, allows the control to support up to <ph id=\"ph1\">`DWORD`</ph> items.","pos":[18892,18956],"source":"When enabled, allows the control to support up to `DWORD` items."},{"content":"This is possible by placing the overhead of managing item data on the application.","pos":[18957,19039]},{"content":"Except for the item selection and focus information, all item information must be managed by the application.","pos":[19040,19149]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using CListCtrl: Virtual List Controls<ept id=\"p1\">](../../mfc/virtual-list-controls.md)</ept>.","pos":[19150,19253],"source":" For more information, see [Using CListCtrl: Virtual List Controls](../../mfc/virtual-list-controls.md)."},{"content":"One– and two– click activation","pos":[19263,19293]},{"content":"When enabled, allows hot tracking (automatic highlighting of the item text) and one– or two– click activation of the highlighted item.","pos":[19304,19438]},{"content":"Drag and drop column ordering","pos":[19448,19477]},{"content":"When enabled, allows drag-and-drop reordering of columns in a list view control.","pos":[19488,19568]},{"content":"Only available in report view.","pos":[19569,19599]},{"pos":[19606,19753],"content":"For information on using these new extended styles, see <bpt id=\"p1\">[</bpt>Using CListCtrl: Changing List Control Styles<ept id=\"p1\">](../../mfc/changing-list-control-styles.md)</ept>.","source":"For information on using these new extended styles, see [Using CListCtrl: Changing List Control Styles](../../mfc/changing-list-control-styles.md)."},{"pos":[19762,19780],"content":"Items and Subitems","linkify":"Items and Subitems","nodes":[{"content":"Items and Subitems","pos":[0,18]}]},{"content":"Each item in a list view control consists of an icon (from an image list), a label, a current state, and an application-defined value (referred to as \"item data\").","pos":[19784,19947]},{"content":"One or more subitems can also be associated with each item.","pos":[19948,20007]},{"content":"A \"subitem\" is a string that, in report view, can be displayed in a column to the right of an item's icon and label.","pos":[20008,20124]},{"content":"All items in a list view control must have the same number of subitems.","pos":[20125,20196]},{"content":"Class <bpt id=\"p1\">**</bpt>CListCtrl<ept id=\"p1\">**</ept> provides several functions for inserting, deleting, finding, and modifying these items.","pos":[20203,20310],"source":"Class **CListCtrl** provides several functions for inserting, deleting, finding, and modifying these items."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CListCtrl::GetItem<ept id=\"p1\">](#clistctrl__getitem)</ept>, <bpt id=\"p2\">[</bpt>CListCtrl::InsertItem<ept id=\"p2\">](#clistctrl__insertitem)</ept>, and <bpt id=\"p3\">[</bpt>CListCtrl::FindItem<ept id=\"p3\">](#clistctrl__finditem)</ept>, <bpt id=\"p4\">[</bpt>Adding Items to the Control<ept id=\"p4\">](../adding-items-to-the-control.md)</ept>, and <bpt id=\"p5\">[</bpt>Scrolling, Arranging, Sorting, and Finding in list controls<ept id=\"p5\">](../scrolling-arranging-sorting-and-finding-in-list-controls.md)</ept>.","pos":[20311,20674],"source":" For more information, see [CListCtrl::GetItem](#clistctrl__getitem), [CListCtrl::InsertItem](#clistctrl__insertitem), and [CListCtrl::FindItem](#clistctrl__finditem), [Adding Items to the Control](../adding-items-to-the-control.md), and [Scrolling, Arranging, Sorting, and Finding in list controls](../scrolling-arranging-sorting-and-finding-in-list-controls.md)."},{"content":"By default, the list view control is responsible for storing an item's icon and text attributes.","pos":[20681,20777]},{"content":"However, in addition to these item types, class <ph id=\"ph1\">`CListCtrl`</ph> supports \"callback items.\"","pos":[20778,20864],"source":" However, in addition to these item types, class `CListCtrl` supports \"callback items.\""},{"content":"A \"callback item\" is a list view item for which the application — rather than the control — stores the text, icon, or both.","pos":[20865,20988]},{"content":"A callback mask is used to specify which item attributes (text and/or icon) are supplied by the application.","pos":[20989,21097]},{"content":"If an application uses callback items, it must be able to supply the text and/or icon attributes on demand.","pos":[21098,21205]},{"content":"Callback items are helpful when your application already maintains some of this information.","pos":[21206,21298]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using CListCtrl: Callback Items and the Callback Mask<ept id=\"p1\">](../callback-items-and-the-callback-mask.md)</ept>.","pos":[21299,21425],"source":" For more information, see [Using CListCtrl: Callback Items and the Callback Mask](../callback-items-and-the-callback-mask.md)."},{"pos":[21434,21445],"content":"Image Lists","linkify":"Image Lists","nodes":[{"content":"Image Lists","pos":[0,11]}]},{"content":"The icons, header item images, and application– defined states for list view items are contained in several image lists (implemented by class <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](cimagelist-class.md)</ept>), which you create and assign to the list view control.","pos":[21449,21680],"source":"The icons, header item images, and application– defined states for list view items are contained in several image lists (implemented by class [CImageList](cimagelist-class.md)), which you create and assign to the list view control."},{"content":"Each list view control can have up to four different types of image lists:","pos":[21681,21755]},{"content":"Large icon","pos":[21765,21775]},{"content":"Used in the icon view for full-sized icons.","pos":[21786,21829]},{"content":"Small icon","pos":[21839,21849]},{"content":"Used in the small icon, list, and report views for smaller versions of the icons used in the icon view.","pos":[21860,21963]},{"content":"Application-defined state","pos":[21973,21998]},{"content":"Contains state images, which are displayed next to an item's icon to indicate an application-defined state.","pos":[22009,22116]},{"content":"Header item","pos":[22126,22137]},{"content":"Used in the report view for small images that appear in each header control item.","pos":[22148,22229]},{"content":"By default, a list view control destroys the image lists assigned to it when it is destroyed; however, the developer can customize this behavior by destroying each image list when it is no longer used, as determined by the application.","pos":[22236,22471]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using CListCtrl: List Items and Image Lists<ept id=\"p1\">](../list-items-and-image-lists.md)</ept>.","pos":[22472,22578],"source":" For more information, see [Using CListCtrl: List Items and Image Lists](../list-items-and-image-lists.md)."},{"pos":[22587,22608],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[22612,22639],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](cobject-class.md)</ept>","source":"[CObject](cobject-class.md)"},{"pos":[22646,22679],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](ccmdtarget-class.md)</ept>","source":"[CCmdTarget](ccmdtarget-class.md)"},{"pos":[22686,22707],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](cwnd-class.md)</ept>","source":"[CWnd](cwnd-class.md)"},{"pos":[22734,22746],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[22750,22770],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcmn.h","source":"**Header:** afxcmn.h"},{"pos":[22780,22857],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__approximateviewrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::ApproximateViewRect","linkify":"<a name=\"clistctrl__approximateviewrect\"></a>  CListCtrl::ApproximateViewRect","source":"<a name=\"clistctrl__approximateviewrect\"></a>  CListCtrl::ApproximateViewRect"},{"content":"Determines the width and height required to display the items of a list view control.","pos":[22861,22946]},{"pos":[23064,23074],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The proposed dimensions of the control, in pixels.","pos":[23086,23136]},{"content":"If dimensions are not specified, the framework uses the current width or height values of the control.","pos":[23137,23239]},{"content":"Number of items to be displayed in the control.","pos":[23258,23305]},{"content":"If this parameter is -1, the framework uses the total number of items currently in the control.","pos":[23306,23401]},{"pos":[23411,23423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23427,23530],"content":"A <ph id=\"ph1\">`CSize`</ph> object that contains the approximate width and height needed to display the items, in pixels.","source":"A `CSize` object that contains the approximate width and height needed to display the items, in pixels."},{"pos":[23540,23547],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23551,23772],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_ApproximateViewRect<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761231)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_ApproximateViewRect](http://msdn.microsoft.com/library/windows/desktop/bb761231), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[23782,23835],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__arrange\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::Arrange","linkify":"<a name=\"clistctrl__arrange\"></a>  CListCtrl::Arrange","source":"<a name=\"clistctrl__arrange\"></a>  CListCtrl::Arrange"},{"content":"Repositions items in an icon view so that they align on a grid.","pos":[23839,23902]},{"pos":[23953,23963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the alignment style for the items.","pos":[23978,24022]},{"content":"It can be one of the following values:","pos":[24023,24061]},{"pos":[24069,24132],"content":"<ph id=\"ph1\">`LVA_ALIGNLEFT`</ph> Aligns items along the left edge of the window.","source":"`LVA_ALIGNLEFT` Aligns items along the left edge of the window."},{"pos":[24140,24201],"content":"<ph id=\"ph1\">`LVA_ALIGNTOP`</ph> Aligns items along the top edge of the window.","source":"`LVA_ALIGNTOP` Aligns items along the top edge of the window."},{"pos":[24209,24310],"content":"<ph id=\"ph1\">`LVA_DEFAULT`</ph> Aligns items according to the list view's current alignment styles (the default value).","source":"`LVA_DEFAULT` Aligns items according to the list view's current alignment styles (the default value)."},{"pos":[24318,24380],"content":"<ph id=\"ph1\">`LVA_SNAPTOGRID`</ph> Snaps all icons to the nearest grid position.","source":"`LVA_SNAPTOGRID` Snaps all icons to the nearest grid position."},{"pos":[24390,24402],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[24406,24444]},{"pos":[24454,24461],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24465,24517],"content":"The <ph id=\"ph1\">`nCode`</ph> parameter specifies the alignment style.","source":"The `nCode` parameter specifies the alignment style."},{"pos":[24527,24534],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24752,24821],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__canceleditlabel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::CancelEditLabel","linkify":"<a name=\"clistctrl__canceleditlabel\"></a>  CListCtrl::CancelEditLabel","source":"<a name=\"clistctrl__canceleditlabel\"></a>  CListCtrl::CancelEditLabel"},{"content":"Cancels item text editing operation.","pos":[24825,24861]},{"pos":[24910,24917],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24921,25131],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_CANCELEDITLABEL<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774886)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_CANCELEDITLABEL](http://msdn.microsoft.com/library/windows/desktop/bb774886) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[25141,25198],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__clistctrl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::CListCtrl","linkify":"<a name=\"clistctrl__clistctrl\"></a>  CListCtrl::CListCtrl","source":"<a name=\"clistctrl__clistctrl\"></a>  CListCtrl::CListCtrl"},{"pos":[25202,25234],"content":"Constructs a <ph id=\"ph1\">`CListCtrl`</ph> object.","source":"Constructs a `CListCtrl` object."},{"pos":[25272,25323],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::Create","linkify":"<a name=\"clistctrl__create\"></a>  CListCtrl::Create","source":"<a name=\"clistctrl__create\"></a>  CListCtrl::Create"},{"pos":[25327,25390],"content":"Creates a list control and attaches it to a <ph id=\"ph1\">`CListCtrl`</ph> object.","source":"Creates a list control and attaches it to a `CListCtrl` object."},{"pos":[25520,25530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the list control's style.","pos":[25547,25582]},{"content":"Apply any combination of list control styles to the control.","pos":[25583,25643]},{"content":"See <bpt id=\"p1\">[</bpt>List view window styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774739)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph> for a complete list of these styles.","pos":[25644,25821],"source":" See [List view window styles](http://msdn.microsoft.com/library/windows/desktop/bb774739) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] for a complete list of these styles."},{"content":"Set extended styles specific to a control using <bpt id=\"p1\">[</bpt>SetExtendedStyle<ept id=\"p1\">](#clistctrl__setextendedstyle)</ept>.","pos":[25822,25919],"source":" Set extended styles specific to a control using [SetExtendedStyle](#clistctrl__setextendedstyle)."},{"content":"Specifies the list control's size and position.","pos":[25936,25983]},{"content":"It can be either a <ph id=\"ph1\">`CRect`</ph> object or a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.","pos":[25984,26100],"source":" It can be either a `CRect` object or a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure."},{"content":"Specifies the list control's parent window, usually a <ph id=\"ph1\">`CDialog`</ph>.","pos":[26123,26187],"source":" Specifies the list control's parent window, usually a `CDialog`."},{"content":"It must not be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[26188,26212],"source":" It must not be **NULL**."},{"content":"Specifies the list control's ID.","pos":[26228,26260]},{"pos":[26270,26282],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[26286,26324]},{"pos":[26334,26341],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You construct a <ph id=\"ph1\">`CListCtrl`</ph> in two steps.","pos":[26345,26386],"source":"You construct a `CListCtrl` in two steps."},{"content":"First, call the constructor and then call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, which creates the list view control and attaches it to the <ph id=\"ph1\">`CListCtrl`</ph> object.","pos":[26387,26519],"source":" First, call the constructor and then call **Create**, which creates the list view control and attaches it to the `CListCtrl` object."},{"pos":[26526,26647],"content":"To apply extended Windows styles to the list control object, call <bpt id=\"p1\">[</bpt>CreateEx<ept id=\"p1\">](#clistctrl__createex)</ept> instead of <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>.","source":"To apply extended Windows styles to the list control object, call [CreateEx](#clistctrl__createex) instead of **Create**."},{"pos":[26657,26664],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[26839,26894],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__createex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::CreateEx","linkify":"<a name=\"clistctrl__createex\"></a>  CListCtrl::CreateEx","source":"<a name=\"clistctrl__createex\"></a>  CListCtrl::CreateEx"},{"pos":[26898,26979],"content":"Creates a control (a child window) and associates it with the <ph id=\"ph1\">`CListCtrl`</ph> object.","source":"Creates a control (a child window) and associates it with the `CListCtrl` object."},{"pos":[27134,27144],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the extended style of the control being created.","pos":[27163,27221]},{"content":"For a list of extended Windows styles, see the <ph id=\"ph1\">`dwExStyle`</ph> parameter for <bpt id=\"p1\">[</bpt>CreateWindowEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[27222,27423],"source":" For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"Specifies the list control's style.","pos":[27443,27478]},{"content":"Apply any combination of list control styles to the control.","pos":[27479,27539]},{"content":"For a complete list of these styles, see <bpt id=\"p1\">[</bpt>List view window styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774739)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[27540,27718],"source":" For a complete list of these styles, see [List view window styles](http://msdn.microsoft.com/library/windows/desktop/bb774739) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"A reference to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure describing the size and position of the window to be created, in client coordinates of <ph id=\"ph1\">`pParentWnd`</ph>.","pos":[27735,27929],"source":" A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`."},{"content":"A pointer to the window that is the control's parent.","pos":[27952,28005]},{"content":"The control's child-window ID.","pos":[28021,28051]},{"pos":[28061,28073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[28077,28112]},{"pos":[28122,28129],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28133,28281],"content":"Use <ph id=\"ph1\">`CreateEx`</ph> instead of <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#clistctrl__create)</ept> to apply extended Windows styles, specified by the Windows extended style preface <bpt id=\"p2\">**</bpt>WS_EX_<ept id=\"p2\">**</ept>.","source":"Use `CreateEx` instead of [Create](#clistctrl__create) to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**."},{"content":"<ph id=\"ph1\">`CreateEx`</ph> creates the control with the extended Windows styles specified by <ph id=\"ph2\">`dwExStyle`</ph>.","pos":[28288,28377],"source":"`CreateEx` creates the control with the extended Windows styles specified by `dwExStyle`."},{"content":"To set extended styles specific to a control, call <bpt id=\"p1\">[</bpt>SetExtendedStyle<ept id=\"p1\">](#clistctrl__setextendedstyle)</ept>.","pos":[28378,28478],"source":" To set extended styles specific to a control, call [SetExtendedStyle](#clistctrl__setextendedstyle)."},{"content":"For example, use <ph id=\"ph1\">`CreateEx`</ph> to set such styles as <bpt id=\"p1\">**</bpt>WS_EX_CONTEXTHELP<ept id=\"p1\">**</ept>, but use <ph id=\"ph2\">`SetExtendedStyle`</ph> to set such styles as <bpt id=\"p2\">**</bpt>LVS_EX_FULLROWSELECT<ept id=\"p2\">**</ept>.","pos":[28479,28626],"source":" For example, use `CreateEx` to set such styles as **WS_EX_CONTEXTHELP**, but use `SetExtendedStyle` to set such styles as **LVS_EX_FULLROWSELECT**."},{"content":"For more information, see the styles described in the topic <bpt id=\"p1\">[</bpt>Extended List View Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774732)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[28627,28826],"source":" For more information, see the styles described in the topic [Extended List View Styles](http://msdn.microsoft.com/library/windows/desktop/bb774732) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[28836,28905],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__createdragimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::CreateDragImage","linkify":"<a name=\"clistctrl__createdragimage\"></a>  CListCtrl::CreateDragImage","source":"<a name=\"clistctrl__createdragimage\"></a>  CListCtrl::CreateDragImage"},{"pos":[28909,28969],"content":"Creates a drag image list for the item specified by <ph id=\"ph1\">`nItem`</ph>.","source":"Creates a drag image list for the item specified by `nItem`."},{"pos":[29062,29072],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the item whose drag image list is to be created.","pos":[29087,29144]},{"content":"Address of a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure that receives the initial location of the upper-left corner of the image, in view coordinates.","pos":[29164,29349],"source":" Address of a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that receives the initial location of the upper-left corner of the image, in view coordinates."},{"pos":[29359,29371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29375,29442],"content":"A pointer to the drag image list if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A pointer to the drag image list if successful; otherwise **NULL**."},{"pos":[29452,29459],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`CImageList`</ph> object is permanent, and you must delete it when finished.","pos":[29463,29538],"source":"The `CImageList` object is permanent, and you must delete it when finished."},{"content":"For example:","pos":[29539,29551]},{"pos":[29708,29775],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__deleteallitems\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::DeleteAllItems","linkify":"<a name=\"clistctrl__deleteallitems\"></a>  CListCtrl::DeleteAllItems","source":"<a name=\"clistctrl__deleteallitems\"></a>  CListCtrl::DeleteAllItems"},{"content":"Deletes all items from the list view control.","pos":[29779,29824]},{"pos":[29872,29884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[29888,29926]},{"pos":[29936,29943],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30106,30169],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__deletecolumn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::DeleteColumn","linkify":"<a name=\"clistctrl__deletecolumn\"></a>  CListCtrl::DeleteColumn","source":"<a name=\"clistctrl__deletecolumn\"></a>  CListCtrl::DeleteColumn"},{"content":"Deletes a column from the list view control.","pos":[30173,30217]},{"pos":[30271,30281],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the column to be deleted.","pos":[30295,30329]},{"pos":[30339,30351],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[30355,30393]},{"pos":[30403,30410],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30652,30711],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__deleteitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::DeleteItem","linkify":"<a name=\"clistctrl__deleteitem\"></a>  CListCtrl::DeleteItem","source":"<a name=\"clistctrl__deleteitem\"></a>  CListCtrl::DeleteItem"},{"content":"Deletes an item from a list view control.","pos":[30715,30756]},{"pos":[30809,30819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the index of the item to be deleted.","pos":[30834,30880]},{"pos":[30890,30902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[30906,30944]},{"pos":[30954,30961],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31196,31251],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__drawitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::DrawItem","linkify":"<a name=\"clistctrl__drawitem\"></a>  CListCtrl::DrawItem","source":"<a name=\"clistctrl__drawitem\"></a>  CListCtrl::DrawItem"},{"content":"Called by the framework when a visual aspect of an owner-draw list view control changes.","pos":[31255,31343]},{"pos":[31426,31436],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A long pointer to a <ph id=\"ph1\">`DRAWITEMSTRUCT`</ph> structure that contains information about the type of drawing required.","pos":[31462,31570],"source":" A long pointer to a `DRAWITEMSTRUCT` structure that contains information about the type of drawing required."},{"pos":[31580,31587],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31591,31762],"content":"The <bpt id=\"p1\">**</bpt>itemAction<ept id=\"p1\">**</ept> member of the <bpt id=\"p2\">[</bpt>DRAWITEMSTRUCT<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775802)</ept> structure defines the drawing action that is to be performed.","source":"The **itemAction** member of the [DRAWITEMSTRUCT](http://msdn.microsoft.com/library/windows/desktop/bb775802) structure defines the drawing action that is to be performed."},{"content":"By default, this member function does nothing.","pos":[31769,31815]},{"content":"Override this member function to implement drawing for an owner-draw <ph id=\"ph1\">`CListCtrl`</ph> object.","pos":[31816,31904],"source":" Override this member function to implement drawing for an owner-draw `CListCtrl` object."},{"pos":[31911,32089],"content":"The application should restore all graphics device interface (GDI) objects selected for the display context supplied in <ph id=\"ph1\">`lpDrawItemStruct`</ph> before this member function terminates.","source":"The application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct` before this member function terminates."},{"pos":[32099,32156],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__editlabel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::EditLabel","linkify":"<a name=\"clistctrl__editlabel\"></a>  CListCtrl::EditLabel","source":"<a name=\"clistctrl__editlabel\"></a>  CListCtrl::EditLabel"},{"content":"Begins in-place editing of an item's text.","pos":[32160,32202]},{"pos":[32256,32266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the list view item that is to be edited.","pos":[32281,32330]},{"pos":[32340,32352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[32356,32458],"content":"If successful, a pointer to the <ph id=\"ph1\">`CEdit`</ph> object that is used to edit the item text; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If successful, a pointer to the `CEdit` object that is used to edit the item text; otherwise **NULL**."},{"pos":[32468,32475],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A list view control that has the <ph id=\"ph1\">`LVS_EDITLABELS`</ph> window style enables a user to edit item labels in place.","pos":[32479,32586],"source":"A list view control that has the `LVS_EDITLABELS` window style enables a user to edit item labels in place."},{"content":"The user begins editing by clicking the label of an item that has the focus.","pos":[32587,32663]},{"content":"Use this function to begin in-place editing of the specified list view item's text.","pos":[32670,32753]},{"pos":[32763,32770],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33076,33145],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__enablegroupview\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::EnableGroupView","linkify":"<a name=\"clistctrl__enablegroupview\"></a>  CListCtrl::EnableGroupView","source":"<a name=\"clistctrl__enablegroupview\"></a>  CListCtrl::EnableGroupView"},{"content":"Enables or disables whether the items in a list view control display as a group.","pos":[33149,33229]},{"pos":[33293,33303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Indicates whether to enable a listview control to group displayed items.","pos":[33320,33392]},{"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> to enable grouping; <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> to disable it.","pos":[33393,33446],"source":"**TRUE** to enable grouping; **FALSE** to disable it."},{"pos":[33456,33468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns one of the following values:","pos":[33472,33508]},{"pos":[33516,33603],"content":"<bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept> The ability to display list view items as a group is already enabled or disabled.","source":"**0** The ability to display list view items as a group is already enabled or disabled."},{"pos":[33611,33667],"content":"<bpt id=\"p1\">**</bpt>1<ept id=\"p1\">**</ept> The state of the control was successfully changed.","source":"**1** The state of the control was successfully changed."},{"pos":[33675,33703],"content":"<bpt id=\"p1\">**</bpt>-1<ept id=\"p1\">**</ept> The operation failed.","source":"**-1** The operation failed."},{"pos":[33713,33720],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33724,33934],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_ENABLEGROUPVIEW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774900)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_ENABLEGROUPVIEW](http://msdn.microsoft.com/library/windows/desktop/bb774900) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[33944,34009],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__ensurevisible\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::EnsureVisible","linkify":"<a name=\"clistctrl__ensurevisible\"></a>  CListCtrl::EnsureVisible","source":"<a name=\"clistctrl__ensurevisible\"></a>  CListCtrl::EnsureVisible"},{"content":"Ensures that a list view item is at least partially visible.","pos":[34013,34073]},{"pos":[34157,34167],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the list view item that is to be visible.","pos":[34182,34232]},{"content":"Specifies whether partial visibility is acceptable.","pos":[34255,34306]},{"pos":[34316,34328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[34332,34370]},{"pos":[34380,34387],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The list view control is scrolled if necessary.","pos":[34391,34438]},{"content":"If the <ph id=\"ph1\">`bPartialOK`</ph> parameter is nonzero, no scrolling occurs if the item is partially visible.","pos":[34439,34534],"source":" If the `bPartialOK` parameter is nonzero, no scrolling occurs if the item is partially visible."},{"pos":[34544,34551],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[34753,34808],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__finditem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::FindItem","linkify":"<a name=\"clistctrl__finditem\"></a>  CListCtrl::FindItem","source":"<a name=\"clistctrl__finditem\"></a>  CListCtrl::FindItem"},{"content":"Searches for a list view item having specified characteristics.","pos":[34812,34875]},{"pos":[34974,34984],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>LVFINDINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774745)</ept> structure containing information about the item to be searched for.","pos":[35003,35159],"source":" A pointer to an [LVFINDINFO](http://msdn.microsoft.com/library/windows/desktop/bb774745) structure containing information about the item to be searched for."},{"content":"Index of the item to begin the search with, or -1 to start from the beginning.","pos":[35178,35256]},{"content":"The item at <ph id=\"ph1\">`nStart`</ph> is excluded from the search if <ph id=\"ph2\">`nStart`</ph> is not equal to -1.","pos":[35257,35337],"source":" The item at `nStart` is excluded from the search if `nStart` is not equal to -1."},{"pos":[35347,35359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the item if successful or -1 otherwise.","pos":[35363,35415]},{"pos":[35425,35432],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35436,35564],"content":"The <ph id=\"ph1\">`pFindInfo`</ph> parameter points to an <bpt id=\"p1\">**</bpt>LVFINDINFO<ept id=\"p1\">**</ept> structure, which contains information used to search for a list view item.","source":"The `pFindInfo` parameter points to an **LVFINDINFO** structure, which contains information used to search for a list view item."},{"pos":[35574,35581],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[35919,35978],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getbkcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetBkColor","linkify":"<a name=\"clistctrl__getbkcolor\"></a>  CListCtrl::GetBkColor","source":"<a name=\"clistctrl__getbkcolor\"></a>  CListCtrl::GetBkColor"},{"content":"Retrieves the background color of a list view control.","pos":[35982,36036]},{"pos":[36093,36105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A 32-bit value used to specify an RGB color.","pos":[36109,36153]},{"pos":[36163,36170],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[36175,36243],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::SetBkColor<ept id=\"p1\">](#clistctrl__setbkcolor)</ept>.","source":"See the example for [CListCtrl::SetBkColor](#clistctrl__setbkcolor)."},{"pos":[36253,36312],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getbkimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetBkImage","linkify":"<a name=\"clistctrl__getbkimage\"></a>  CListCtrl::GetBkImage","source":"<a name=\"clistctrl__getbkimage\"></a>  CListCtrl::GetBkImage"},{"content":"Retrieves the current background image of a list view control.","pos":[36316,36378]},{"pos":[36452,36462],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <bpt id=\"p1\">**</bpt>LVBKIMAGE<ept id=\"p1\">**</ept> structure containing the current background image of the list view.","pos":[36482,36579],"source":" A pointer to an **LVBKIMAGE** structure containing the current background image of the list view."},{"pos":[36589,36601],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns nonzero if successful, or zero otherwise.","pos":[36605,36654]},{"pos":[36664,36671],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36675,36878],"content":"This method implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_GetBkImage<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761246)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This method implements the behavior of the Win32 macro, [ListView_GetBkImage](http://msdn.microsoft.com/library/windows/desktop/bb761246), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[36888,36895],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[37331,37400],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getcallbackmask\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetCallbackMask","linkify":"<a name=\"clistctrl__getcallbackmask\"></a>  CListCtrl::GetCallbackMask","source":"<a name=\"clistctrl__getcallbackmask\"></a>  CListCtrl::GetCallbackMask"},{"content":"Retrieves the callback mask for a list view control.","pos":[37404,37456]},{"pos":[37514,37526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The list view control's callback mask.","pos":[37530,37568]},{"pos":[37578,37585],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A \"callback item\" is a list view item for which the application — rather than the control — stores the text, icon, or both.","pos":[37589,37712]},{"content":"Although a list view control can store these attributes for you, you may want to use callback items if your application already maintains some of this information.","pos":[37713,37876]},{"content":"The callback mask specifies which item state bits are maintained by the application, and it applies to the whole control rather than to a specific item.","pos":[37877,38029]},{"content":"The callback mask is zero by default, meaning that the control tracks all item states.","pos":[38030,38116]},{"content":"If an application uses callback items or specifies a nonzero callback mask, it must be able to supply list view item attributes on demand.","pos":[38117,38255]},{"pos":[38265,38272],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[38277,38355],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::SetCallbackMask<ept id=\"p1\">](#clistctrl__setcallbackmask)</ept>.","source":"See the example for [CListCtrl::SetCallbackMask](#clistctrl__setcallbackmask)."},{"pos":[38365,38420],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getcheck\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetCheck","linkify":"<a name=\"clistctrl__getcheck\"></a>  CListCtrl::GetCheck","source":"<a name=\"clistctrl__getcheck\"></a>  CListCtrl::GetCheck"},{"content":"Retrieves the current display status of the state image that is associated with an item.","pos":[38424,38512]},{"pos":[38572,38582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The zero-based index of a list control item.","pos":[38597,38641]},{"pos":[38651,38663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the item is selected, otherwise 0.","pos":[38667,38712]},{"pos":[38722,38729],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38733,38948],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_GetCheckState<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761250)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_GetCheckState](http://msdn.microsoft.com/library/windows/desktop/bb761250), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[38958,38965],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[38970,39034],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::SetCheck<ept id=\"p1\">](#clistctrl__setcheck)</ept>.","source":"See the example for [CListCtrl::SetCheck](#clistctrl__setcheck)."},{"pos":[39044,39101],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getcolumn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetColumn","linkify":"<a name=\"clistctrl__getcolumn\"></a>  CListCtrl::GetColumn","source":"<a name=\"clistctrl__getcolumn\"></a>  CListCtrl::GetColumn"},{"content":"Retrieves the attributes of a list view control's column.","pos":[39105,39162]},{"pos":[39252,39262],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the column whose attributes are to be retrieved.","pos":[39276,39333]},{"content":"Address of an <bpt id=\"p1\">[</bpt>LVCOLUMN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774743)</ept> structure that specifies the information to retrieve and receives information about the column.","pos":[39353,39533],"source":" Address of an [LVCOLUMN](http://msdn.microsoft.com/library/windows/desktop/bb774743) structure that specifies the information to retrieve and receives information about the column."},{"content":"The <bpt id=\"p1\">**</bpt>mask<ept id=\"p1\">**</ept> member specifies which column attributes to retrieve.","pos":[39534,39600],"source":" The **mask** member specifies which column attributes to retrieve."},{"content":"If the <bpt id=\"p1\">**</bpt>mask<ept id=\"p1\">**</ept> member specifies the <ph id=\"ph1\">`LVCF_TEXT`</ph> value, the <bpt id=\"p2\">**</bpt>pszText<ept id=\"p2\">**</ept> member must contain the address of the buffer that receives the item text and the <bpt id=\"p3\">**</bpt>cchTextMax<ept id=\"p3\">**</ept> member must specify the size of the buffer.","pos":[39601,39813],"source":" If the **mask** member specifies the `LVCF_TEXT` value, the **pszText** member must contain the address of the buffer that receives the item text and the **cchTextMax** member must specify the size of the buffer."},{"pos":[39823,39835],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[39839,39877]},{"pos":[39887,39894],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39898,39976],"content":"The <bpt id=\"p1\">**</bpt>LVCOLUMN<ept id=\"p1\">**</ept> structure contains information about a column in report view.","source":"The **LVCOLUMN** structure contains information about a column in report view."},{"pos":[39986,39993],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[40262,40339],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getcolumnorderarray\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetColumnOrderArray","linkify":"<a name=\"clistctrl__getcolumnorderarray\"></a>  CListCtrl::GetColumnOrderArray","source":"<a name=\"clistctrl__getcolumnorderarray\"></a>  CListCtrl::GetColumnOrderArray"},{"content":"Retrieves the column order (left to right) of a list view control.","pos":[40343,40409]},{"pos":[40503,40513],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a buffer that will contain the index values of the columns in the list view control.","pos":[40530,40627]},{"content":"The buffer must be large enough to contain the total number of columns in the list view control.","pos":[40628,40724]},{"content":"Number of columns in the list view control.","pos":[40743,40786]},{"content":"If this parameter is -1, the number of columns is automatically retrieved by the framework.","pos":[40787,40878]},{"pos":[40888,40900],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[40904,40942]},{"pos":[40952,40959],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40963,41184],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_GetColumnOrderArray<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761254)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_GetColumnOrderArray](http://msdn.microsoft.com/library/windows/desktop/bb761254), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[41194,41201],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[42081,42148],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getcolumnwidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetColumnWidth","linkify":"<a name=\"clistctrl__getcolumnwidth\"></a>  CListCtrl::GetColumnWidth","source":"<a name=\"clistctrl__getcolumnwidth\"></a>  CListCtrl::GetColumnWidth"},{"content":"Retrieves the width of a column in report view or list view.","pos":[42152,42212]},{"pos":[42276,42286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the index of the column whose width is to be retrieved.","pos":[42300,42365]},{"pos":[42375,42387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42391,42447],"content":"The width, in pixels, of the column specified by <ph id=\"ph1\">`nCol`</ph>.","source":"The width, in pixels, of the column specified by `nCol`."},{"pos":[42457,42464],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[42658,42727],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getcountperpage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetCountPerPage","linkify":"<a name=\"clistctrl__getcountperpage\"></a>  CListCtrl::GetCountPerPage","source":"<a name=\"clistctrl__getcountperpage\"></a>  CListCtrl::GetCountPerPage"},{"content":"Calculates the number of items that can fit vertically in the visible area of a list view control when in list view or report view.","pos":[42731,42862]},{"pos":[42919,42931],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of items that can fit vertically in the visible area of a list view control when in list view or report view.","pos":[42935,43055]},{"pos":[43065,43072],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[43077,43147],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetTopIndex<ept id=\"p1\">](#clistctrl__gettopindex)</ept>.","source":"See the example for [CListCtrl::GetTopIndex](#clistctrl__gettopindex)."},{"pos":[43157,43224],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__geteditcontrol\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetEditControl","linkify":"<a name=\"clistctrl__geteditcontrol\"></a>  CListCtrl::GetEditControl","source":"<a name=\"clistctrl__geteditcontrol\"></a>  CListCtrl::GetEditControl"},{"content":"Retrieves the handle of the edit control used to edit a list view item's text.","pos":[43228,43306]},{"pos":[43365,43377],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43381,43499],"content":"If successful, a pointer to the <bpt id=\"p1\">[</bpt>CEdit<ept id=\"p1\">](cedit-class.md)</ept> object that is used to edit the item text; otherwise <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","source":"If successful, a pointer to the [CEdit](cedit-class.md) object that is used to edit the item text; otherwise **NULL**."},{"pos":[43509,43516],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[43872,43935],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getemptytext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetEmptyText","linkify":"<a name=\"clistctrl__getemptytext\"></a>  CListCtrl::GetEmptyText","source":"<a name=\"clistctrl__getemptytext\"></a>  CListCtrl::GetEmptyText"},{"content":"Retrieves the string to display if the current list-view control is empty.","pos":[43939,44013]},{"pos":[44071,44083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44087,44207],"content":"A <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> that contains the text to display if the control is empty.","source":"A [CString](../../atl-mfc-shared/reference/cstringt-class.md) that contains the text to display if the control is empty."},{"pos":[44217,44224],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44228,44408],"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_GETEMPTYTEXT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774921)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This method sends the [LVM_GETEMPTYTEXT](http://msdn.microsoft.com/library/windows/desktop/bb774921) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[44418,44489],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getextendedstyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetExtendedStyle","linkify":"<a name=\"clistctrl__getextendedstyle\"></a>  CListCtrl::GetExtendedStyle","source":"<a name=\"clistctrl__getextendedstyle\"></a>  CListCtrl::GetExtendedStyle"},{"content":"Retrieves the current extended styles of a list view control.","pos":[44493,44554]},{"pos":[44605,44617],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A combination of the extended styles currently in use by the list view control.","pos":[44621,44700]},{"content":"For a descriptive list of these extended styles, see the <bpt id=\"p1\">[</bpt>Extended List View Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774732)</ept> topic in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[44701,44903],"source":" For a descriptive list of these extended styles, see the [Extended List View Styles](http://msdn.microsoft.com/library/windows/desktop/bb774732) topic in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[44913,44920],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44924,45150],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_GetExtendedListViewStyle<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761264)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_GetExtendedListViewStyle](http://msdn.microsoft.com/library/windows/desktop/bb761264), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[45160,45167],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[45172,45252],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::SetExtendedStyle<ept id=\"p1\">](#clistctrl__setextendedstyle)</ept>.","source":"See the example for [CListCtrl::SetExtendedStyle](#clistctrl__setextendedstyle)."},{"pos":[45262,45357],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getfirstselecteditemposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetFirstSelectedItemPosition","linkify":"<a name=\"clistctrl__getfirstselecteditemposition\"></a>  CListCtrl::GetFirstSelectedItemPosition","source":"<a name=\"clistctrl__getfirstselecteditemposition\"></a>  CListCtrl::GetFirstSelectedItemPosition"},{"content":"Gets the position of the first selected item in the list view control.","pos":[45361,45431]},{"pos":[45506,45518],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45522,45637],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if no items are selected.","source":"A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if no items are selected."},{"pos":[45647,45654],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code sample demonstrates the usage of this function.","pos":[45658,45724]},{"pos":[46194,46263],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getfocusedgroup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetFocusedGroup","linkify":"<a name=\"clistctrl__getfocusedgroup\"></a>  CListCtrl::GetFocusedGroup","source":"<a name=\"clistctrl__getfocusedgroup\"></a>  CListCtrl::GetFocusedGroup"},{"content":"Retrieves the group that has the keyboard focus in the current list-view control.","pos":[46267,46348]},{"pos":[46405,46417],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[46421,46515],"content":"The index of the group whose state is <ph id=\"ph1\">`LVGS_FOCUSED`</ph>, if there is such a group; otherwise, -1.","source":"The index of the group whose state is `LVGS_FOCUSED`, if there is such a group; otherwise, -1."},{"pos":[46525,46532],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_GETFOCUSEDGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774925)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[46536,46719],"source":"This method sends the [LVM_GETFOCUSEDGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774925) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"For more information, see the <ph id=\"ph1\">`LVGS_FOCUSED`</ph> value of the <ph id=\"ph2\">`state`</ph> member of the <bpt id=\"p1\">[</bpt>LVGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774769)</ept> structure.","pos":[46720,46880],"source":" For more information, see the `LVGS_FOCUSED` value of the `state` member of the [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure."},{"pos":[46890,46955],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getgroupcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetGroupCount","linkify":"<a name=\"clistctrl__getgroupcount\"></a>  CListCtrl::GetGroupCount","source":"<a name=\"clistctrl__getgroupcount\"></a>  CListCtrl::GetGroupCount"},{"content":"Retrieves the number of groups in the current list-view control.","pos":[46959,47023]},{"pos":[47077,47089],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of groups in the list-view control.","pos":[47093,47139]},{"pos":[47149,47156],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47160,47345],"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_GETGROUPCOUNT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774931)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph> --&gt;.","source":"This method sends the [LVM_GETGROUPCOUNT](http://msdn.microsoft.com/library/windows/desktop/bb774931) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] -->."},{"pos":[47355,47418],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getgroupinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetGroupInfo","linkify":"<a name=\"clistctrl__getgroupinfo\"></a>  CListCtrl::GetGroupInfo","source":"<a name=\"clistctrl__getgroupinfo\"></a>  CListCtrl::GetGroupInfo"},{"content":"Gets the information for a specified group of the list view control.","pos":[47422,47490]},{"pos":[47582,47592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The identifier of the group whose information is to be retrieved.","pos":[47610,47675]},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>LVGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774769)</ept> containing information on the group specified.","pos":[47692,47825],"source":" A pointer to the [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) containing information on the group specified."},{"pos":[47835,47847],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the ID of the group if successful, or -1 otherwise.","pos":[47851,47910]},{"pos":[47920,47927],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47931,48138],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_GETGROUPINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774932)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_GETGROUPINFO](http://msdn.microsoft.com/library/windows/desktop/bb774932) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[48148,48225],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getgroupinfobyindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetGroupInfoByIndex","linkify":"<a name=\"clistctrl__getgroupinfobyindex\"></a>  CListCtrl::GetGroupInfoByIndex","source":"<a name=\"clistctrl__getgroupinfobyindex\"></a>  CListCtrl::GetGroupInfoByIndex"},{"content":"Retrieves information about a specified group in the current list-view control.","pos":[48229,48308]},{"pos":[48409,48419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[48426,48435]},{"content":"Description","pos":[48436,48447]},{"pos":[48490,48503],"content":"[in] <ph id=\"ph1\">`iIndex`</ph>","source":"[in] `iIndex`"},{"content":"Zero-based index of a group.","pos":[48504,48532]},{"pos":[48537,48551],"content":"[out] <ph id=\"ph1\">`pGroup`</ph>","source":"[out] `pGroup`"},{"content":"Pointer to an <bpt id=\"p1\">[</bpt>LVGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774769)</ept> structure that receives information about the group specified by the <ph id=\"ph1\">`iIndex`</ph> parameter.","pos":[48552,48724],"source":"Pointer to an [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure that receives information about the group specified by the `iIndex` parameter."},{"content":"The caller is responsible for initializing the members of the <bpt id=\"p1\">[</bpt>LVGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774769)</ept> structure.","pos":[48737,48879],"source":" The caller is responsible for initializing the members of the [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure."},{"content":"Set the <ph id=\"ph1\">`cbSize`</ph> member to the size of the structure, and the flags of the <ph id=\"ph2\">`mask`</ph> member to specify the information to retrieve.","pos":[48880,49008],"source":" Set the `cbSize` member to the size of the structure, and the flags of the `mask` member to specify the information to retrieve."},{"pos":[49019,49031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49035,49091],"content":"<ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method is successful; otherwise, `false`."},{"pos":[49101,49108],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[49112,49303],"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_GETGROUPINFOBYINDEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774933)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph> --&gt;.","source":"This method sends the [LVM_GETGROUPINFOBYINDEX](http://msdn.microsoft.com/library/windows/desktop/bb774933) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] -->."},{"pos":[49313,49320],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_listCtrl`</ph>, that is used to access the current list-view control.","pos":[49324,49438],"source":"The following code example defines a variable, `m_listCtrl`, that is used to access the current list-view control."},{"content":"This variable is used in the next example.","pos":[49439,49481]},{"pos":[49588,49595],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example demonstrates the <ph id=\"ph1\">`GetGroupInfoByIndex`</ph> method.","pos":[49599,49672],"source":"The following code example demonstrates the `GetGroupInfoByIndex` method."},{"content":"In an earlier section of this code example we created a list-view control that displays two columns titled \"ClientID\" and \"Grade\" in a report view.","pos":[49673,49820]},{"content":"The following code example retrieves information about the group whose index is 0, if such a group exists.","pos":[49821,49927]},{"pos":[50755,50824],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getgroupmetrics\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetGroupMetrics","linkify":"<a name=\"clistctrl__getgroupmetrics\"></a>  CListCtrl::GetGroupMetrics","source":"<a name=\"clistctrl__getgroupmetrics\"></a>  CListCtrl::GetGroupMetrics"},{"content":"Retrieves the metrics of a group.","pos":[50828,50861]},{"pos":[50948,50958],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>LVGROUPMETRICS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774752)</ept> containing the group metrics information.","pos":[50981,51114],"source":" A pointer to a [LVGROUPMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb774752) containing the group metrics information."},{"pos":[51124,51131],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51135,51345],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_GETGROUPMETRICS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774934)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_GETGROUPMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb774934) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[51355,51418],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getgrouprect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetGroupRect","linkify":"<a name=\"clistctrl__getgrouprect\"></a>  CListCtrl::GetGroupRect","source":"<a name=\"clistctrl__getgrouprect\"></a>  CListCtrl::GetGroupRect"},{"content":"Retrieves the bounding rectangle for a specified group in the current list-view control.","pos":[51422,51510]},{"pos":[51638,51648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[51655,51664]},{"content":"Description","pos":[51665,51676]},{"pos":[51719,51734],"content":"[in] <ph id=\"ph1\">`iGroupId`</ph>","source":"[in] `iGroupId`"},{"content":"Specifies a group.","pos":[51735,51753]},{"pos":[51758,51776],"content":"[in, out] <ph id=\"ph1\">`lpRect`</ph>","source":"[in, out] `lpRect`"},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.","pos":[51777,51867],"source":"Pointer to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure."},{"content":"If this method is successful, the structure receives the rectangle coordinates of the group that is specified by <ph id=\"ph1\">`iGroupId`</ph>.","pos":[51868,51992],"source":" If this method is successful, the structure receives the rectangle coordinates of the group that is specified by `iGroupId`."},{"pos":[51997,52011],"content":"[in] <ph id=\"ph1\">`iCoords`</ph>","source":"[in] `iCoords`"},{"content":"Specifies the rectangle coordinates to retrieve.","pos":[52012,52060]},{"content":"Use one of these values:","pos":[52061,52085]},{"content":"<ph id=\"ph1\"> - </ph><ph id=\"ph2\">`LVGGR_GROUP`</ph> - (Default) Coordinates of the entire expanded group.","pos":[52097,52167],"source":" - `LVGGR_GROUP` - (Default) Coordinates of the entire expanded group."},{"content":"<ph id=\"ph1\">- </ph><ph id=\"ph2\">`LVGGR_HEADER`</ph> - Coordinates of only the header (collapsed group).","pos":[52173,52241],"source":"- `LVGGR_HEADER` - Coordinates of only the header (collapsed group)."},{"content":"<ph id=\"ph1\">- </ph><ph id=\"ph2\">`LVGGR_SUBSETLINK`</ph> - Coordinates of only the subset link (markup subset).","pos":[52247,52322],"source":"- `LVGGR_SUBSETLINK` - Coordinates of only the subset link (markup subset)."},{"pos":[52333,52345],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52349,52405],"content":"<ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method is successful; otherwise, `false`."},{"pos":[52415,52422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52426,52584],"content":"The caller is responsible for allocating the <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure pointed to by the <ph id=\"ph1\">`pRect`</ph> parameter.","source":"The caller is responsible for allocating the [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure pointed to by the `pRect` parameter."},{"pos":[52591,52771],"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_GETGROUPRECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774935)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This method sends the [LVM_GETGROUPRECT](http://msdn.microsoft.com/library/windows/desktop/bb774935) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[52781,52788],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_listCtrl`</ph>, that is used to access the current list-view control.","pos":[52792,52906],"source":"The following code example defines a variable, `m_listCtrl`, that is used to access the current list-view control."},{"content":"This variable is used in the next example.","pos":[52907,52949]},{"pos":[53064,53071],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example demonstrates the <ph id=\"ph1\">`GetGroupRect`</ph> method.","pos":[53075,53141],"source":"The following code example demonstrates the `GetGroupRect` method."},{"content":"In an earlier section of this code example, we created a list-view control that displays two columns titled \"ClientID\" and \"Grade\" in a report view.","pos":[53142,53290]},{"content":"The following code example draws a 3D rectangle around the group whose index is 0, if such a group exists.","pos":[53291,53397]},{"pos":[53844,53909],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getgroupstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetGroupState","linkify":"<a name=\"clistctrl__getgroupstate\"></a>  CListCtrl::GetGroupState","source":"<a name=\"clistctrl__getgroupstate\"></a>  CListCtrl::GetGroupState"},{"content":"Retrieves the state for a specified group in the current list-view control.","pos":[53913,53988]},{"pos":[54082,54092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[54099,54108]},{"content":"Description","pos":[54109,54120]},{"pos":[54163,54178],"content":"[in] <ph id=\"ph1\">`iGroupId`</ph>","source":"[in] `iGroupId`"},{"content":"Zero-based index of a group.","pos":[54179,54207]},{"pos":[54212,54225],"content":"[in] <ph id=\"ph1\">`dwMask`</ph>","source":"[in] `dwMask`"},{"content":"Mask that specifies the state value to retrieve for the specified group.","pos":[54226,54298]},{"content":"For more information, see the <ph id=\"ph1\">`mask`</ph> member of the <bpt id=\"p1\">[</bpt>LVGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774769)</ept> structure.","pos":[54299,54430],"source":" For more information, see the `mask` member of the [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure."},{"pos":[54441,54453],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The requested state for the specified group, or 0 if the group cannot be found.","pos":[54457,54536]},{"pos":[54546,54553],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[54557,54809],"content":"The return value is the result of a bitwise AND operation on the <ph id=\"ph1\">`dwMask`</ph> parameter and the value of the <ph id=\"ph2\">`state`</ph> member of an <bpt id=\"p1\">[</bpt>LVGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774769)</ept> structure that represents the current list-view control.","source":"The return value is the result of a bitwise AND operation on the `dwMask` parameter and the value of the `state` member of an [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure that represents the current list-view control."},{"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_GETGROUPSTATE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774936)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[54816,54997],"source":"This method sends the [LVM_GETGROUPSTATE](http://msdn.microsoft.com/library/windows/desktop/bb774936) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>ListView_GetGroupState<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761288)</ept> macro.","pos":[54998,55119],"source":" For more information, see the [ListView_GetGroupState](http://msdn.microsoft.com/library/windows/desktop/bb761288) macro."},{"pos":[55129,55194],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getheaderctrl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetHeaderCtrl","linkify":"<a name=\"clistctrl__getheaderctrl\"></a>  CListCtrl::GetHeaderCtrl","source":"<a name=\"clistctrl__getheaderctrl\"></a>  CListCtrl::GetHeaderCtrl"},{"content":"Retrieves the header control of a list view control.","pos":[55198,55250]},{"pos":[55305,55317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the header control, used by the list view control.","pos":[55321,55384]},{"pos":[55394,55401],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[55405,55616],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_GetHeader<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761290)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_GetHeader](http://msdn.microsoft.com/library/windows/desktop/bb761290), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[55626,55633],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[55638,55724],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetColumnOrderArray<ept id=\"p1\">](#clistctrl__getcolumnorderarray)</ept>.","source":"See the example for [CListCtrl::GetColumnOrderArray](#clistctrl__getcolumnorderarray)."},{"pos":[55734,55797],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__gethotcursor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetHotCursor","linkify":"<a name=\"clistctrl__gethotcursor\"></a>  CListCtrl::GetHotCursor","source":"<a name=\"clistctrl__gethotcursor\"></a>  CListCtrl::GetHotCursor"},{"content":"Retrieves the cursor used when hot tracking is enabled for a list view control.","pos":[55801,55880]},{"pos":[55929,55941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle to the current hot cursor resource being used by the list view control.","pos":[55945,56027]},{"pos":[56037,56044],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_GetHotCursor<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761292)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[56048,56262],"source":"This member function implements the behavior of the Win32 macro, [ListView_GetHotCursor](http://msdn.microsoft.com/library/windows/desktop/bb761292), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"The hot cursor, only visible when hover selection is enabled, appears when the cursor passes over any list view item.","pos":[56263,56380]},{"content":"Hover selection is enabled by setting the <bpt id=\"p1\">**</bpt>LVS_EX_TRACKSELECT<ept id=\"p1\">**</ept> extended style.","pos":[56381,56461],"source":" Hover selection is enabled by setting the **LVS_EX_TRACKSELECT** extended style."},{"pos":[56471,56478],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[56737,56796],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__gethotitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetHotItem","linkify":"<a name=\"clistctrl__gethotitem\"></a>  CListCtrl::GetHotItem","source":"<a name=\"clistctrl__gethotitem\"></a>  CListCtrl::GetHotItem"},{"content":"Retrieves the list view item currently under the cursor.","pos":[56800,56856]},{"pos":[56899,56911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the current hot item of the list view control.","pos":[56915,56974]},{"pos":[56984,56991],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_GetHotItem<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761294)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[56995,57207],"source":"This member function implements the behavior of the Win32 macro, [ListView_GetHotItem](http://msdn.microsoft.com/library/windows/desktop/bb761294), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"The hot item is defined as the currently selected item when hot tracking (and hover selection) is enabled.","pos":[57208,57314]},{"content":"If hot tracking is enabled, when a user pauses over a list view item, the item label is automatically highlighted without the use of a mouse button.","pos":[57321,57469]},{"pos":[57479,57486],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[57679,57742],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__gethovertime\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetHoverTime","linkify":"<a name=\"clistctrl__gethovertime\"></a>  CListCtrl::GetHoverTime","source":"<a name=\"clistctrl__gethovertime\"></a>  CListCtrl::GetHoverTime"},{"content":"Retrieves the current hover time of a list view control.","pos":[57746,57802]},{"pos":[57858,57870],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the delay, in milliseconds, which the mouse cursor must hover over an item before it is selected.","pos":[57874,57979]},{"content":"If the return value is -1, then the hover time is the default hover time.","pos":[57980,58053]},{"pos":[58063,58070],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[58074,58288],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_GetHoverTime<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761296)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_GetHoverTime](http://msdn.microsoft.com/library/windows/desktop/bb761296), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[58298,58305],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[58514,58577],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getimagelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetImageList","linkify":"<a name=\"clistctrl__getimagelist\"></a>  CListCtrl::GetImageList","source":"<a name=\"clistctrl__getimagelist\"></a>  CListCtrl::GetImageList"},{"content":"Retrieves the handle of an image list used for drawing list view items.","pos":[58581,58652]},{"pos":[58728,58738],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Value specifying which image list to retrieve.","pos":[58758,58804]},{"content":"It can be one of these values:","pos":[58805,58835]},{"pos":[58843,58886],"content":"<ph id=\"ph1\">`LVSIL_NORMAL`</ph> Image list with large icons.","source":"`LVSIL_NORMAL` Image list with large icons."},{"pos":[58894,58936],"content":"<ph id=\"ph1\">`LVSIL_SMALL`</ph> Image list with small icons.","source":"`LVSIL_SMALL` Image list with small icons."},{"pos":[58944,58987],"content":"<ph id=\"ph1\">`LVSIL_STATE`</ph> Image list with state images.","source":"`LVSIL_STATE` Image list with state images."},{"pos":[58997,59009],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the image list used for drawing list view items.","pos":[59013,59074]},{"pos":[59084,59091],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[59325,59390],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getinsertmark\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetInsertMark","linkify":"<a name=\"clistctrl__getinsertmark\"></a>  CListCtrl::GetInsertMark","source":"<a name=\"clistctrl__getinsertmark\"></a>  CListCtrl::GetInsertMark"},{"content":"Retrieves the current position of the insertion mark.","pos":[59394,59447]},{"pos":[59522,59532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>LVINSERTMARK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774758)</ept> structure containing the information for the insert mark.","pos":[59546,59694],"source":" A pointer to an [LVINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb774758) structure containing the information for the insert mark."},{"pos":[59704,59716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if successful, or <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> otherwise.","pos":[59720,59775],"source":"Returns **TRUE** if successful, or **FALSE** otherwise."},{"content":"<bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> is returned if the size in the <ph id=\"ph1\">`cbSize`</ph> member of the <bpt id=\"p2\">**</bpt>LVINSERTMARK<ept id=\"p2\">**</ept> structure does not equal the actual size of the structure.","pos":[59776,59915],"source":"**FALSE** is returned if the size in the `cbSize` member of the **LVINSERTMARK** structure does not equal the actual size of the structure."},{"pos":[59925,59932],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[59936,60144],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_GETINSERTMARK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774945)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_GETINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb774945) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[60154,60229],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getinsertmarkcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetInsertMarkColor","linkify":"<a name=\"clistctrl__getinsertmarkcolor\"></a>  CListCtrl::GetInsertMarkColor","source":"<a name=\"clistctrl__getinsertmarkcolor\"></a>  CListCtrl::GetInsertMarkColor"},{"content":"Retrieves the current color of the insertion mark.","pos":[60233,60283]},{"pos":[60348,60360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60364,60502],"content":"Returns a <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> structure that contains the color of the insertion point.","source":"Returns a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) structure that contains the color of the insertion point."},{"pos":[60512,60519],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[60523,60736],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_GETINSERTMARKCOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774947)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_GETINSERTMARKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb774947) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[60746,60819],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getinsertmarkrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetInsertMarkRect","linkify":"<a name=\"clistctrl__getinsertmarkrect\"></a>  CListCtrl::GetInsertMarkRect","source":"<a name=\"clistctrl__getinsertmarkrect\"></a>  CListCtrl::GetInsertMarkRect"},{"content":"Retrieves the rectangle that bounds the insertion point.","pos":[60823,60879]},{"pos":[60950,60960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to a <ph id=\"ph1\">`RECT`</ph> structure that contains the coordinates of a rectangle that bounds the insertion point.","pos":[60975,61082],"source":" Pointer to a `RECT` structure that contains the coordinates of a rectangle that bounds the insertion point."},{"pos":[61092,61104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns one of the following values:","pos":[61108,61144]},{"pos":[61152,61183],"content":"<bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept> No insertion point found.","source":"**0** No insertion point found."},{"pos":[61191,61219],"content":"<bpt id=\"p1\">**</bpt>1<ept id=\"p1\">**</ept> Insertion point found.","source":"**1** Insertion point found."},{"pos":[61229,61236],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[61240,61452],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_GETINSERTMARKRECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774949)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_GETINSERTMARKRECT](http://msdn.microsoft.com/library/windows/desktop/bb774949) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[61462,61515],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetItem","linkify":"<a name=\"clistctrl__getitem\"></a>  CListCtrl::GetItem","source":"<a name=\"clistctrl__getitem\"></a>  CListCtrl::GetItem"},{"content":"Retrieves some or all of a list view item's attributes.","pos":[61519,61574]},{"pos":[61637,61647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to an <bpt id=\"p1\">[</bpt>LVITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> structure that receives the item's attributes.","pos":[61662,61791],"source":" Pointer to an [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure that receives the item's attributes."},{"pos":[61801,61813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[61817,61855]},{"pos":[61865,61872],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[61876,61958],"content":"The <bpt id=\"p1\">**</bpt>LVITEM<ept id=\"p1\">**</ept> structure specifies or receives the attributes of a list view item.","source":"The **LVITEM** structure specifies or receives the attributes of a list view item."},{"pos":[61968,62031],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getitemcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetItemCount","linkify":"<a name=\"clistctrl__getitemcount\"></a>  CListCtrl::GetItemCount","source":"<a name=\"clistctrl__getitemcount\"></a>  CListCtrl::GetItemCount"},{"content":"Retrieves the number of items in a list view control.","pos":[62035,62088]},{"pos":[62142,62154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of items in the list view control.","pos":[62158,62203]},{"pos":[62213,62220],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[62225,62293],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::DeleteItem<ept id=\"p1\">](#clistctrl__deleteitem)</ept>.","source":"See the example for [CListCtrl::DeleteItem](#clistctrl__deleteitem)."},{"pos":[62303,62364],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getitemdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetItemData","linkify":"<a name=\"clistctrl__getitemdata\"></a>  CListCtrl::GetItemData","source":"<a name=\"clistctrl__getitemdata\"></a>  CListCtrl::GetItemData"},{"pos":[62368,62462],"content":"Retrieves the 32-bit application-specific value associated with the item specified by <ph id=\"ph1\">`nItem`</ph>.","source":"Retrieves the 32-bit application-specific value associated with the item specified by `nItem`."},{"pos":[62530,62540],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the list item whose data is to be retrieved.","pos":[62555,62608]},{"pos":[62618,62630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A 32-bit application-specific value associated with the specified item.","pos":[62634,62705]},{"pos":[62715,62722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[62726,62912],"content":"This value is the <bpt id=\"p1\">**</bpt>lParam<ept id=\"p1\">**</ept> member of the <bpt id=\"p2\">[</bpt>LVITEM<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> structure, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>","source":"This value is the **lParam** member of the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]"},{"pos":[62922,62929],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[63203,63274],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getitemindexrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetItemIndexRect","linkify":"<a name=\"clistctrl__getitemindexrect\"></a>  CListCtrl::GetItemIndexRect","source":"<a name=\"clistctrl__getitemindexrect\"></a>  CListCtrl::GetItemIndexRect"},{"content":"Retrieves the bounding rectangle for all or part of a subitem in the current list-view control.","pos":[63278,63373]},{"pos":[63522,63532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[63539,63548]},{"content":"Description","pos":[63549,63560]},{"pos":[63603,63620],"content":"[in] <ph id=\"ph1\">`pItemIndex`</ph>","source":"[in] `pItemIndex`"},{"content":"Pointer to an <bpt id=\"p1\">[</bpt>LVITEMINDEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774762)</ept> structure for the parent item of the subitem.","pos":[63621,63754],"source":"Pointer to an [LVITEMINDEX](http://msdn.microsoft.com/library/windows/desktop/bb774762) structure for the parent item of the subitem."},{"content":"The caller is responsible for allocating and setting the members of the <bpt id=\"p1\">[</bpt>LVITEMINDEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774762)</ept> structure.","pos":[63767,63923],"source":" The caller is responsible for allocating and setting the members of the [LVITEMINDEX](http://msdn.microsoft.com/library/windows/desktop/bb774762) structure."},{"content":"This parameter cannot be <ph id=\"ph1\">`NULL`</ph>.","pos":[63924,63956],"source":" This parameter cannot be `NULL`."},{"pos":[63961,63975],"content":"[in] <ph id=\"ph1\">`iColumn`</ph>","source":"[in] `iColumn`"},{"content":"Zero-based index of a column in the control.","pos":[63976,64020]},{"pos":[64025,64040],"content":"[in] <ph id=\"ph1\">`rectType`</ph>","source":"[in] `rectType`"},{"content":"Portion of the list-view subitem for which the bounding rectangle is retrieved.","pos":[64041,64120]},{"content":"Specify one of the following values:","pos":[64121,64157]},{"content":"<ph id=\"ph1\">`LVIR_BOUNDS`</ph> - Returns the bounding rectangle of the entire subitem, including the icon and label.","pos":[64170,64269],"source":"`LVIR_BOUNDS` - Returns the bounding rectangle of the entire subitem, including the icon and label."},{"content":"<ph id=\"ph1\">`LVIR_ICON`</ph> - Returns the bounding rectangle of the icon or small icon of the subitem.","pos":[64282,64368],"source":"`LVIR_ICON` - Returns the bounding rectangle of the icon or small icon of the subitem."},{"content":"<ph id=\"ph1\">`LVIR_LABEL`</ph> - Returns the bounding rectangle of the subitem text.","pos":[64381,64447],"source":"`LVIR_LABEL` - Returns the bounding rectangle of the subitem text."},{"pos":[64452,64465],"content":"[out] <ph id=\"ph1\">`pRect`</ph>","source":"[out] `pRect`"},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure that receives information about the bounding rectangle of the subitem.","pos":[64466,64626],"source":"Pointer to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure that receives information about the bounding rectangle of the subitem."},{"content":"The caller is responsible for allocating the <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.","pos":[64639,64761],"source":" The caller is responsible for allocating the [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure."},{"content":"This parameter cannot be <ph id=\"ph1\">`NULL`</ph>.","pos":[64762,64794],"source":" This parameter cannot be `NULL`."},{"pos":[64805,64817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64821,64877],"content":"<ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method is successful; otherwise, `false`."},{"pos":[64887,64894],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_GETITEMINDEXRECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761046)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[64898,65082],"source":"This method sends the [LVM_GETITEMINDEXRECT](http://msdn.microsoft.com/library/windows/desktop/bb761046) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>ListView_GetItemIndexRect Macro<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774959)</ept>.","pos":[65083,65203],"source":" For more information, see [ListView_GetItemIndexRect Macro](http://msdn.microsoft.com/library/windows/desktop/bb774959)."},{"pos":[65213,65220],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_listCtrl`</ph>, that is used to access the current list-view control.","pos":[65224,65338],"source":"The following code example defines a variable, `m_listCtrl`, that is used to access the current list-view control."},{"content":"This variable is used in the next example.","pos":[65339,65381]},{"pos":[65496,65503],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example demonstrates the <ph id=\"ph1\">`GetGroupRect`</ph> method.","pos":[65507,65573],"source":"The following code example demonstrates the `GetGroupRect` method."},{"content":"Prior to entering this code example we created a list-view control that displays two columns titled \"ClientID\" and \"Grade\" in a report view.","pos":[65574,65714]},{"content":"The following code example draws a 3D rectangle around the second subitem in both columns.","pos":[65715,65805]},{"pos":[66244,66313],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getitemposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetItemPosition","linkify":"<a name=\"clistctrl__getitemposition\"></a>  CListCtrl::GetItemPosition","source":"<a name=\"clistctrl__getitemposition\"></a>  CListCtrl::GetItemPosition"},{"content":"Retrieves the position of a list view item.","pos":[66317,66360]},{"pos":[66455,66465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index of the item whose position is to be retrieved.","pos":[66480,66536]},{"content":"Address of a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure that receives the position of the item's upper-left corner, in view coordinates.","pos":[66556,66727],"source":" Address of a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that receives the position of the item's upper-left corner, in view coordinates."},{"pos":[66737,66749],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[66753,66791]},{"pos":[66801,66808],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[67163,67224],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getitemrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetItemRect","linkify":"<a name=\"clistctrl__getitemrect\"></a>  CListCtrl::GetItemRect","source":"<a name=\"clistctrl__getitemrect\"></a>  CListCtrl::GetItemRect"},{"content":"Retrieves the bounding rectangle for all or part of an item in the current view.","pos":[67228,67308]},{"pos":[67415,67425],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index of the item whose position is to be retrieved.","pos":[67440,67496]},{"content":"Address of a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure that receives the bounding rectangle.","pos":[67515,67642],"source":" Address of a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure that receives the bounding rectangle."},{"content":"Portion of the list view item for which to retrieve the bounding rectangle.","pos":[67660,67735]},{"content":"It can be one of these values:","pos":[67736,67766]},{"pos":[67774,67868],"content":"<ph id=\"ph1\">`LVIR_BOUNDS`</ph> Returns the bounding rectangle of the entire item, including the icon and label.","source":"`LVIR_BOUNDS` Returns the bounding rectangle of the entire item, including the icon and label."},{"pos":[67876,67945],"content":"<ph id=\"ph1\">`LVIR_ICON`</ph> Returns the bounding rectangle of the icon or small icon.","source":"`LVIR_ICON` Returns the bounding rectangle of the icon or small icon."},{"pos":[67953,68014],"content":"<ph id=\"ph1\">`LVIR_LABEL`</ph> Returns the bounding rectangle of the item text.","source":"`LVIR_LABEL` Returns the bounding rectangle of the item text."},{"pos":[68024,68036],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[68040,68078]},{"pos":[68088,68095],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[69440,69507],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getitemspacing\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetItemSpacing","linkify":"<a name=\"clistctrl__getitemspacing\"></a>  CListCtrl::GetItemSpacing","source":"<a name=\"clistctrl__getitemspacing\"></a>  CListCtrl::GetItemSpacing"},{"content":"Calculates the spacing between items in the current list-view control.","pos":[69511,69581]},{"pos":[69708,69718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[69725,69734]},{"content":"Description","pos":[69735,69746]},{"pos":[69789,69802],"content":"[in] <ph id=\"ph1\">`fSmall`</ph>","source":"[in] `fSmall`"},{"content":"View for which to retrieve the item spacing.","pos":[69803,69847]},{"content":"Specify <ph id=\"ph1\">`true`</ph> for small icon view, or <ph id=\"ph2\">`false`</ph> for icon view.","pos":[69848,69909],"source":" Specify `true` for small icon view, or `false` for icon view."},{"pos":[69914,69935],"content":"[out] <ph id=\"ph1\">`pnHorzSpacing`</ph>","source":"[out] `pnHorzSpacing`"},{"content":"Contains the horizontal spacing between items.","pos":[69936,69982]},{"pos":[69987,70008],"content":"[out] <ph id=\"ph1\">`pnVertSpacing`</ph>","source":"[out] `pnVertSpacing`"},{"content":"Contains the vertical spacing between items.","pos":[70009,70053]},{"pos":[70064,70076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70080,70136],"content":"<ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method is successful; otherwise, `false`."},{"pos":[70146,70153],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[70157,70339],"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_GETITEMSPACING<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761051)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This method sends the [LVM_GETITEMSPACING](http://msdn.microsoft.com/library/windows/desktop/bb761051) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[70349,70412],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getitemstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetItemState","linkify":"<a name=\"clistctrl__getitemstate\"></a>  CListCtrl::GetItemState","source":"<a name=\"clistctrl__getitemstate\"></a>  CListCtrl::GetItemState"},{"content":"Retrieves the state of a list view item.","pos":[70416,70456]},{"pos":[70543,70553],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index of the item whose state is to be retrieved.","pos":[70568,70621]},{"content":"Mask specifying which of the item's state flags to return.","pos":[70639,70697]},{"pos":[70707,70719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The state flags for the specified list view item.","pos":[70723,70772]},{"pos":[70782,70789],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An item's state is specified by the <bpt id=\"p1\">**</bpt>state<ept id=\"p1\">**</ept> member of the <bpt id=\"p2\">[</bpt>LVITEM<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> structure, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[70793,70997],"source":"An item's state is specified by the **state** member of the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"When you specify or change an item's state, the <bpt id=\"p1\">**</bpt>stateMask<ept id=\"p1\">**</ept> member specifies which state bits you want to change.","pos":[70998,71113],"source":" When you specify or change an item's state, the **stateMask** member specifies which state bits you want to change."},{"pos":[71123,71130],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[71135,71205],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetTopIndex<ept id=\"p1\">](#clistctrl__gettopindex)</ept>.","source":"See the example for [CListCtrl::GetTopIndex](#clistctrl__gettopindex)."},{"pos":[71215,71276],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getitemtext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetItemText","linkify":"<a name=\"clistctrl__getitemtext\"></a>  CListCtrl::GetItemText","source":"<a name=\"clistctrl__getitemtext\"></a>  CListCtrl::GetItemText"},{"content":"Retrieves the text of a list view item or subitem.","pos":[71280,71330]},{"pos":[71524,71534],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index of the item whose text is to be retrieved.","pos":[71549,71601]},{"content":"Specifies the subitem whose text is to be retrieved.","pos":[71622,71674]},{"content":"Pointer to a string that is to receive the item text.","pos":[71695,71748]},{"content":"Length of the buffer pointed to by <ph id=\"ph1\">`lpszText`</ph>.","pos":[71765,71811],"source":" Length of the buffer pointed to by `lpszText`."},{"pos":[71821,71833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71837,71908],"content":"The version returning <ph id=\"ph1\">`int`</ph> returns the length of the retrieved string.","source":"The version returning `int` returns the length of the retrieved string."},{"pos":[71915,71971],"content":"The version returning a <ph id=\"ph1\">`CString`</ph> returns the item text.","source":"The version returning a `CString` returns the item text."},{"pos":[71981,71988],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <ph id=\"ph1\">`nSubItem`</ph> is zero, this function retrieves the item label; if <ph id=\"ph2\">`nSubItem`</ph> is nonzero, it retrieves the text of the subitem.","pos":[71992,72118],"source":"If `nSubItem` is zero, this function retrieves the item label; if `nSubItem` is nonzero, it retrieves the text of the subitem."},{"content":"For more information on the subitem argument, see the discussion of the <bpt id=\"p1\">[</bpt>LVITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[72119,72321],"source":" For more information on the subitem argument, see the discussion of the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[72331,72392],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getnextitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetNextItem","linkify":"<a name=\"clistctrl__getnextitem\"></a>  CListCtrl::GetNextItem","source":"<a name=\"clistctrl__getnextitem\"></a>  CListCtrl::GetNextItem"},{"content":"Searches for a list view item that has the specified properties and that bears the specified relationship to a given item.","pos":[72396,72518]},{"pos":[72603,72613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the item to begin the searching with, or -1 to find the first item that matches the specified flags.","pos":[72628,72737]},{"content":"The specified item itself is excluded from the search.","pos":[72738,72792]},{"content":"Geometric relation of the requested item to the specified item, and the state of the requested item.","pos":[72811,72911]},{"content":"The geometric relation can be one of these values:","pos":[72912,72962]},{"pos":[72970,73037],"content":"<ph id=\"ph1\">`LVNI_ABOVE`</ph> Searches for an item that is above the specified item.","source":"`LVNI_ABOVE` Searches for an item that is above the specified item."},{"pos":[73045,73116],"content":"<ph id=\"ph1\">`LVNI_ALL`</ph> Searches for a subsequent item by index (the default value).","source":"`LVNI_ALL` Searches for a subsequent item by index (the default value)."},{"pos":[73124,73191],"content":"<ph id=\"ph1\">`LVNI_BELOW`</ph> Searches for an item that is below the specified item.","source":"`LVNI_BELOW` Searches for an item that is below the specified item."},{"pos":[73199,73268],"content":"<ph id=\"ph1\">`LVNI_TOLEFT`</ph> Searches for an item to the left of the specified item.","source":"`LVNI_TOLEFT` Searches for an item to the left of the specified item."},{"pos":[73276,73347],"content":"<ph id=\"ph1\">`LVNI_TORIGHT`</ph> Searches for an item to the right of the specified item.","source":"`LVNI_TORIGHT` Searches for an item to the right of the specified item."},{"content":"The state can be zero, or it can be one or more of these values:","pos":[73354,73418]},{"pos":[73426,73496],"content":"<ph id=\"ph1\">`LVNI_DROPHILITED`</ph> The item has the <ph id=\"ph2\">`LVIS_DROPHILITED`</ph> state flag set.","source":"`LVNI_DROPHILITED` The item has the `LVIS_DROPHILITED` state flag set."},{"pos":[73504,73566],"content":"<ph id=\"ph1\">`LVNI_FOCUSED`</ph> The item has the <ph id=\"ph2\">`LVIS_FOCUSED`</ph> state flag set.","source":"`LVNI_FOCUSED` The item has the `LVIS_FOCUSED` state flag set."},{"pos":[73574,73638],"content":"<ph id=\"ph1\">`LVNI_SELECTED`</ph> The item has the <ph id=\"ph2\">`LVIS_SELECTED`</ph> state flag set.","source":"`LVNI_SELECTED` The item has the `LVIS_SELECTED` state flag set."},{"content":"If an item does not have all of the specified state flags set, the search continues with the next item.","pos":[73645,73748]},{"pos":[73758,73770],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the next item if successful, or -1 otherwise.","pos":[73774,73832]},{"pos":[73842,73913],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getnextitemindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetNextItemIndex","linkify":"<a name=\"clistctrl__getnextitemindex\"></a>  CListCtrl::GetNextItemIndex","source":"<a name=\"clistctrl__getnextitemindex\"></a>  CListCtrl::GetNextItemIndex"},{"content":"Retrieves the index of the item in the current list-view control that has a specified set of properties.","pos":[73917,74021]},{"pos":[74127,74137],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[74144,74153]},{"content":"Description","pos":[74154,74165]},{"pos":[74208,74230],"content":"[in, out] <ph id=\"ph1\">`pItemIndex`</ph>","source":"[in, out] `pItemIndex`"},{"content":"Pointer to the <bpt id=\"p1\">[</bpt>LVITEMINDEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774762)</ept> structure that describes the item where the search begins, or -1 to find the first item that matches the flags in the <ph id=\"ph1\">`nFlags`</ph> parameter.","pos":[74231,74457],"source":"Pointer to the [LVITEMINDEX](http://msdn.microsoft.com/library/windows/desktop/bb774762) structure that describes the item where the search begins, or -1 to find the first item that matches the flags in the `nFlags` parameter."},{"content":"If this method is successful, the <ph id=\"ph1\">`LVITEMINDEX`</ph> structure describes the item found by the search.","pos":[74470,74567],"source":" If this method is successful, the `LVITEMINDEX` structure describes the item found by the search."},{"pos":[74572,74585],"content":"[in] <ph id=\"ph1\">`nFlags`</ph>","source":"[in] `nFlags`"},{"content":"A bitwise combination (OR) of flags that specify how to perform the search.","pos":[74586,74661]},{"content":"The search can depend on the index, state, or appearance of the target item, or the target item's physical position relative to the item specified by the <ph id=\"ph1\">`pItemIndex`</ph> parameter.","pos":[74674,74851],"source":" The search can depend on the index, state, or appearance of the target item, or the target item's physical position relative to the item specified by the `pItemIndex` parameter."},{"content":"For more information, see the <ph id=\"ph1\">`flags`</ph> parameter in the <bpt id=\"p1\">[</bpt>LVM_GETNEXTITEMINDEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761059)</ept> message.","pos":[74852,74998],"source":" For more information, see the `flags` parameter in the [LVM_GETNEXTITEMINDEX](http://msdn.microsoft.com/library/windows/desktop/bb761059) message."},{"pos":[75009,75021],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75025,75081],"content":"<ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method is successful; otherwise, `false`."},{"pos":[75091,75098],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[75102,75239],"content":"The caller is responsible for allocating and setting the members of the <ph id=\"ph1\">`LVITEMINDEX`</ph> structure pointed to by the <ph id=\"ph2\">`pItemIndex`</ph> parameter.","source":"The caller is responsible for allocating and setting the members of the `LVITEMINDEX` structure pointed to by the `pItemIndex` parameter."},{"pos":[75246,75398],"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_GETNEXTITEMINDEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761059)</ept> message, which is described in the Windows SDK.","source":"This method sends the [LVM_GETNEXTITEMINDEX](http://msdn.microsoft.com/library/windows/desktop/bb761059) message, which is described in the Windows SDK."},{"pos":[75408,75485],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getnextselecteditem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetNextSelectedItem","linkify":"<a name=\"clistctrl__getnextselecteditem\"></a>  CListCtrl::GetNextSelectedItem","source":"<a name=\"clistctrl__getnextselecteditem\"></a>  CListCtrl::GetNextSelectedItem"},{"pos":[75489,75584],"content":"Gets the index of the list item identified by <ph id=\"ph1\">`pos`</ph>, then sets <bpt id=\"p1\">*</bpt>pos<ept id=\"p1\">*</ept> to the <bpt id=\"p2\">**</bpt>POSITION<ept id=\"p2\">**</ept> value.","source":"Gets the index of the list item identified by `pos`, then sets *pos* to the **POSITION** value."},{"pos":[75658,75668],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous call to <ph id=\"ph1\">`GetNextSelectedItem`</ph> or <ph id=\"ph2\">`GetFirstSelectedItemPosition`</ph>.","pos":[75681,75804],"source":" A reference to a **POSITION** value returned by a previous call to `GetNextSelectedItem` or `GetFirstSelectedItemPosition`."},{"content":"The value is updated to the next position by this call.","pos":[75805,75860]},{"pos":[75870,75882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75886,75933],"content":"The index of the list item identified by <ph id=\"ph1\">`pos`</ph>.","source":"The index of the list item identified by `pos`."},{"pos":[75943,75950],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[75954,76100],"content":"You can use <ph id=\"ph1\">`GetNextSelectedItem`</ph> in a forward iteration loop if you establish the initial position with a call to <ph id=\"ph2\">`GetFirstSelectedItemPosition`</ph>.","source":"You can use `GetNextSelectedItem` in a forward iteration loop if you establish the initial position with a call to `GetFirstSelectedItemPosition`."},{"content":"You must ensure that your <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value is valid.","pos":[76107,76161],"source":"You must ensure that your **POSITION** value is valid."},{"content":"If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[76162,76253]},{"pos":[76263,76270],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code sample demonstrates the usage of this function.","pos":[76274,76340]},{"pos":[76815,76894],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getnumberofworkareas\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetNumberOfWorkAreas","linkify":"<a name=\"clistctrl__getnumberofworkareas\"></a>  CListCtrl::GetNumberOfWorkAreas","source":"<a name=\"clistctrl__getnumberofworkareas\"></a>  CListCtrl::GetNumberOfWorkAreas"},{"content":"Retrieves the current number of working areas for a list view control.","pos":[76898,76968]},{"pos":[77031,77043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Not used at this time.","pos":[77047,77069]},{"pos":[77079,77086],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[77090,77312],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_GetNumberOfWorkAreas<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774988)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_GetNumberOfWorkAreas](http://msdn.microsoft.com/library/windows/desktop/bb774988), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[77322,77329],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[78067,78136],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getoutlinecolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetOutlineColor","linkify":"<a name=\"clistctrl__getoutlinecolor\"></a>  CListCtrl::GetOutlineColor","source":"<a name=\"clistctrl__getoutlinecolor\"></a>  CListCtrl::GetOutlineColor"},{"content":"Retrieves the color of the border of a list view control.","pos":[78140,78197]},{"pos":[78259,78271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78275,78395],"content":"Returns a <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> structure containing the outline color.","source":"Returns a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) structure containing the outline color."},{"pos":[78405,78412],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[78416,78626],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_GETOUTLINECOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761065)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_GETOUTLINECOLOR](http://msdn.microsoft.com/library/windows/desktop/bb761065) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[78636,78693],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getorigin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetOrigin","linkify":"<a name=\"clistctrl__getorigin\"></a>  CListCtrl::GetOrigin","source":"<a name=\"clistctrl__getorigin\"></a>  CListCtrl::GetOrigin"},{"content":"Retrieves the current view origin for a list view control.","pos":[78697,78755]},{"pos":[78822,78832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Address of a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure that receives the view origin.","pos":[78849,78970],"source":" Address of a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that receives the view origin."},{"pos":[78980,78992],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[78996,79034]},{"content":"However, if the control is in report view, the return value is always zero.","pos":[79035,79110]},{"pos":[79120,79193],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getselectedcolumn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetSelectedColumn","linkify":"<a name=\"clistctrl__getselectedcolumn\"></a>  CListCtrl::GetSelectedColumn","source":"<a name=\"clistctrl__getselectedcolumn\"></a>  CListCtrl::GetSelectedColumn"},{"content":"Retrieves the index of the currently-selected column in the list control.","pos":[79197,79270]},{"pos":[79330,79342],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the selected column.","pos":[79346,79379]},{"pos":[79389,79396],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[79400,79612],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_GETSELECTEDCOLUMN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761067)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_GETSELECTEDCOLUMN](http://msdn.microsoft.com/library/windows/desktop/bb761067) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[79622,79693],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getselectedcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetSelectedCount","linkify":"<a name=\"clistctrl__getselectedcount\"></a>  CListCtrl::GetSelectedCount","source":"<a name=\"clistctrl__getselectedcount\"></a>  CListCtrl::GetSelectedCount"},{"content":"Retrieves the number of selected items in the list view control.","pos":[79697,79761]},{"pos":[79820,79832],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of selected items in the list view control.","pos":[79836,79890]},{"pos":[79900,79907],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[80353,80424],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getselectionmark\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetSelectionMark","linkify":"<a name=\"clistctrl__getselectionmark\"></a>  CListCtrl::GetSelectionMark","source":"<a name=\"clistctrl__getselectionmark\"></a>  CListCtrl::GetSelectionMark"},{"content":"Retrieves the selection mark of a list view control.","pos":[80428,80480]},{"pos":[80529,80541],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based selection mark, or -1 if there is no selection mark.","pos":[80545,80612]},{"pos":[80622,80629],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[80633,80851],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_GetSelectionMark<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774998)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_GetSelectionMark](http://msdn.microsoft.com/library/windows/desktop/bb774998), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[80861,80868],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[81071,81138],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getstringwidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetStringWidth","linkify":"<a name=\"clistctrl__getstringwidth\"></a>  CListCtrl::GetStringWidth","source":"<a name=\"clistctrl__getstringwidth\"></a>  CListCtrl::GetStringWidth"},{"content":"Determines the minimum column width necessary to display all of a given string.","pos":[81142,81221]},{"pos":[81289,81299],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Address of a null-terminated string whose width is to be determined.","pos":[81313,81381]},{"pos":[81391,81403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81407,81464],"content":"The width, in pixels, of the string pointed to by <ph id=\"ph1\">`lpsz`</ph>.","source":"The width, in pixels, of the string pointed to by `lpsz`."},{"pos":[81474,81481],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned width takes into account the control's current font and column margins, but not the width of a small icon.","pos":[81485,81604]},{"pos":[81614,81621],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[82077,82144],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getsubitemrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetSubItemRect","linkify":"<a name=\"clistctrl__getsubitemrect\"></a>  CListCtrl::GetSubItemRect","source":"<a name=\"clistctrl__getsubitemrect\"></a>  CListCtrl::GetSubItemRect"},{"content":"Retrieves the bounding rectangle of an item in a list view control.","pos":[82148,82215]},{"pos":[82332,82342],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>iItem<ept id=\"p1\">*</ept>","pos":[82346,82353],"source":"*iItem*"},{"content":"Index of the subitem's parent item.","pos":[82357,82392]},{"content":"<bpt id=\"p1\">*</bpt>iSubItem<ept id=\"p1\">*</ept>","pos":[82399,82409],"source":"*iSubItem*"},{"content":"The one-based index of the subitem.","pos":[82413,82448]},{"content":"<bpt id=\"p1\">*</bpt>nArea<ept id=\"p1\">*</ept>","pos":[82455,82462],"source":"*nArea*"},{"content":"Determines the portion of the bounding rectangle (of the list view subitem) to be retrieved.","pos":[82466,82558]},{"content":"The portion (icon, label, or both) of the bounding rectangle is specified by applying the bitwise OR operator to one or more of the following values:","pos":[82559,82708]},{"pos":[82716,82810],"content":"<ph id=\"ph1\">`LVIR_BOUNDS`</ph> Returns the bounding rectangle of the entire item, including the icon and label.","source":"`LVIR_BOUNDS` Returns the bounding rectangle of the entire item, including the icon and label."},{"pos":[82818,82887],"content":"<ph id=\"ph1\">`LVIR_ICON`</ph> Returns the bounding rectangle of the icon or small icon.","source":"`LVIR_ICON` Returns the bounding rectangle of the icon or small icon."},{"content":"<ph id=\"ph1\">`LVIR_LABEL`</ph> Returns the bounding rectangle of the entire item, including the icon and label.","pos":[82895,82988],"source":"`LVIR_LABEL` Returns the bounding rectangle of the entire item, including the icon and label."},{"content":"This is identical to <ph id=\"ph1\">`LVIR_BOUNDS`</ph>.","pos":[82989,83024],"source":" This is identical to `LVIR_BOUNDS`."},{"pos":[83031,83183],"content":"`ref`  \nReference to a [CRect](../../atl-mfc-shared/reference/crect-class.md) object that contains the coordinates of the subitem's bounding rectangle.","leadings":[""," "],"nodes":[{"content":"Reference to a <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that contains the coordinates of the subitem's bounding rectangle.","pos":[8,151],"source":"Reference to a [CRect](../../atl-mfc-shared/reference/crect-class.md) object that contains the coordinates of the subitem's bounding rectangle."}]},{"pos":[83193,83205],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[83209,83247]},{"pos":[83257,83264],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[83268,83484],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_GetSubItemRect<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775004)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_GetSubItemRect](http://msdn.microsoft.com/library/windows/desktop/bb775004), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[83494,83561],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__gettextbkcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetTextBkColor","linkify":"<a name=\"clistctrl__gettextbkcolor\"></a>  CListCtrl::GetTextBkColor","source":"<a name=\"clistctrl__gettextbkcolor\"></a>  CListCtrl::GetTextBkColor"},{"content":"Retrieves the text background color of a list view control.","pos":[83565,83624]},{"pos":[83685,83697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A 32-bit value used to specify an RGB color.","pos":[83701,83745]},{"pos":[83755,83762],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[83767,83843],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::SetTextBkColor<ept id=\"p1\">](#clistctrl__settextbkcolor)</ept>.","source":"See the example for [CListCtrl::SetTextBkColor](#clistctrl__settextbkcolor)."},{"pos":[83853,83916],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__gettextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetTextColor","linkify":"<a name=\"clistctrl__gettextcolor\"></a>  CListCtrl::GetTextColor","source":"<a name=\"clistctrl__gettextcolor\"></a>  CListCtrl::GetTextColor"},{"content":"Retrieves the text color of a list view control.","pos":[83920,83968]},{"pos":[84027,84039],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A 32-bit value used to specify an RGB color.","pos":[84043,84087]},{"pos":[84097,84104],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[84109,84181],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::SetTextColor<ept id=\"p1\">](#clistctrl__settextcolor)</ept>.","source":"See the example for [CListCtrl::SetTextColor](#clistctrl__settextcolor)."},{"pos":[84191,84252],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__gettileinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetTileInfo","linkify":"<a name=\"clistctrl__gettileinfo\"></a>  CListCtrl::GetTileInfo","source":"<a name=\"clistctrl__gettileinfo\"></a>  CListCtrl::GetTileInfo"},{"content":"Retrieves information about a tile in a list view control.","pos":[84256,84314]},{"pos":[84383,84393],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pti<ept id=\"p1\">*</ept>","pos":[84397,84402],"source":"*pti*"},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>LVTILEINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774766)</ept> structure that receives the tile information.","pos":[84406,84540],"source":" A pointer to an [LVTILEINFO](http://msdn.microsoft.com/library/windows/desktop/bb774766) structure that receives the tile information."},{"pos":[84550,84562],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The return value is not used.","pos":[84566,84595]},{"pos":[84605,84612],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[84616,84822],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_GETTILEINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761081)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_GETTILEINFO](http://msdn.microsoft.com/library/windows/desktop/bb761081) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[84832,84901],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__gettileviewinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetTileViewInfo","linkify":"<a name=\"clistctrl__gettileviewinfo\"></a>  CListCtrl::GetTileViewInfo","source":"<a name=\"clistctrl__gettileviewinfo\"></a>  CListCtrl::GetTileViewInfo"},{"content":"Retrieves information about a list view control in tile view.","pos":[84905,84966]},{"pos":[85044,85054],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>LVTILEVIEWINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774768)</ept> structure that receives the retrieved information.","pos":[85068,85211],"source":" A pointer to an [LVTILEVIEWINFO](http://msdn.microsoft.com/library/windows/desktop/bb774768) structure that receives the retrieved information."},{"pos":[85221,85233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The return value is not used.","pos":[85237,85266]},{"pos":[85276,85283],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[85287,85497],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_GETTILEVIEWINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761083)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_GETTILEVIEWINFO](http://msdn.microsoft.com/library/windows/desktop/bb761083) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[85507,85568],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__gettooltips\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetToolTips","linkify":"<a name=\"clistctrl__gettooltips\"></a>  CListCtrl::GetToolTips","source":"<a name=\"clistctrl__gettooltips\"></a>  CListCtrl::GetToolTips"},{"content":"Retrieves the tooltip control that the list view control uses to display tooltips.","pos":[85572,85654]},{"pos":[85717,85729],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CToolTipCtrl<ept id=\"p1\">](ctooltipctrl-class.md)</ept> object to be used by the list control.","pos":[85733,85824],"source":"A pointer to a [CToolTipCtrl](ctooltipctrl-class.md) object to be used by the list control."},{"content":"If the <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#clistctrl__create)</ept> member function uses the style <bpt id=\"p2\">**</bpt>LVS_NOTOOLTIPS<ept id=\"p2\">**</ept>, no tooltips are used, and <bpt id=\"p3\">**</bpt>NULL<ept id=\"p3\">**</ept> is returned.","pos":[85825,85959],"source":" If the [Create](#clistctrl__create) member function uses the style **LVS_NOTOOLTIPS**, no tooltips are used, and **NULL** is returned."},{"pos":[85969,85976],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>LVM_GETTOOLTIPS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761085)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[85980,86189],"source":"This member function implements the behavior of the Win32 message [LVM_GETTOOLTIPS](http://msdn.microsoft.com/library/windows/desktop/bb761085), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"The MFC implementation of <ph id=\"ph1\">`GetToolTips`</ph> returns a <ph id=\"ph2\">`CToolTipCtrl`</ph> object, which is used by the list control, rather than a handle to a tooltip control.","pos":[86190,86340],"source":" The MFC implementation of `GetToolTips` returns a `CToolTipCtrl` object, which is used by the list control, rather than a handle to a tooltip control."},{"pos":[86350,86357],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[86587,86648],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__gettopindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetTopIndex","linkify":"<a name=\"clistctrl__gettopindex\"></a>  CListCtrl::GetTopIndex","source":"<a name=\"clistctrl__gettopindex\"></a>  CListCtrl::GetTopIndex"},{"content":"Retrieves the index of the topmost visible item when in list view or report view.","pos":[86652,86733]},{"pos":[86786,86798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the topmost visible item.","pos":[86802,86840]},{"pos":[86850,86857],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[87351,87404],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getview\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetView","linkify":"<a name=\"clistctrl__getview\"></a>  CListCtrl::GetView","source":"<a name=\"clistctrl__getview\"></a>  CListCtrl::GetView"},{"content":"Gets the view of the list view control.","pos":[87408,87447]},{"pos":[87498,87510],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current view of the list view control.","pos":[87514,87556]},{"pos":[87566,87573],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[87577,87779],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_GETVIEW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761091)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_GETVIEW](http://msdn.microsoft.com/library/windows/desktop/bb761091) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[87789,87850],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getviewrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetViewRect","linkify":"<a name=\"clistctrl__getviewrect\"></a>  CListCtrl::GetViewRect","source":"<a name=\"clistctrl__getviewrect\"></a>  CListCtrl::GetViewRect"},{"content":"Retrieves the bounding rectangle of all items in the list view control.","pos":[87854,87925]},{"pos":[87992,88002],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Address of a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure.","pos":[88018,88108],"source":" Address of a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure."},{"pos":[88118,88130],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[88134,88172]},{"pos":[88182,88189],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The list view must be in icon view or small icon view.","pos":[88193,88247]},{"pos":[88257,88320],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__getworkareas\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::GetWorkAreas","linkify":"<a name=\"clistctrl__getworkareas\"></a>  CListCtrl::GetWorkAreas","source":"<a name=\"clistctrl__getworkareas\"></a>  CListCtrl::GetWorkAreas"},{"content":"Retrieves the current working areas of a list view control.","pos":[88324,88383]},{"pos":[88475,88485],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of <ph id=\"ph1\">`RECT`</ph> structures contained in the <bpt id=\"p1\">*</bpt>prc<ept id=\"p1\">*</ept> array.","pos":[88505,88566],"source":" The number of `RECT` structures contained in the *prc* array."},{"content":"A pointer to an array of <ph id=\"ph1\">`RECT`</ph> structures (or <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> objects) that receive the working areas of the list view control.","pos":[88582,88749],"source":" A pointer to an array of `RECT` structures (or [CRect](../../atl-mfc-shared/reference/crect-class.md) objects) that receive the working areas of the list view control."},{"content":"Values in these structures are in client coordinates.","pos":[88750,88803]},{"pos":[88813,88820],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[88824,89038],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_GetWorkAreas<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775024)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_GetWorkAreas](http://msdn.microsoft.com/library/windows/desktop/bb775024), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[89048,89055],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[89060,89148],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetNumberOfWorkAreas<ept id=\"p1\">](#clistctrl__getnumberofworkareas)</ept>.","source":"See the example for [CListCtrl::GetNumberOfWorkAreas](#clistctrl__getnumberofworkareas)."},{"pos":[89158,89213],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__hasgroup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::HasGroup","linkify":"<a name=\"clistctrl__hasgroup\"></a>  CListCtrl::HasGroup","source":"<a name=\"clistctrl__hasgroup\"></a>  CListCtrl::HasGroup"},{"content":"Determines if the list view control has the specified group.","pos":[89217,89277]},{"pos":[89340,89350],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The identifier of the group being requested.","pos":[89368,89412]},{"pos":[89422,89434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89438,89488],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[89498,89505],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[89509,89712],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_HASGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761097)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_HASGROUP](http://msdn.microsoft.com/library/windows/desktop/bb761097) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[89722,89775],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__hittest\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::HitTest","linkify":"<a name=\"clistctrl__hittest\"></a>  CListCtrl::HitTest","source":"<a name=\"clistctrl__hittest\"></a>  CListCtrl::HitTest"},{"content":"Determines which list view item, if any, is at a specified position.","pos":[89779,89847]},{"pos":[89995,90005],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Address of an <bpt id=\"p1\">**</bpt>LVHITTESTINFO<ept id=\"p1\">**</ept> structure that contains the position to hit test and that receives information about the results of the hit test.","pos":[90027,90172],"source":" Address of an **LVHITTESTINFO** structure that contains the position to hit test and that receives information about the results of the hit test."},{"content":"Point to be tested.","pos":[90187,90206]},{"content":"Pointer to an integer that receives information about the results of the test.","pos":[90225,90303]},{"content":"See the explanation of the <bpt id=\"p1\">**</bpt>flags<ept id=\"p1\">**</ept> member of the <bpt id=\"p2\">[</bpt>LVHITTESTINFO<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb774754)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[90304,90492],"source":" See the explanation of the **flags** member of the [LVHITTESTINFO](http://msdn.microsoft.com/library/windows/desktop/bb774754) structure in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[90502,90514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90518,90609],"content":"The index of the item at the position specified by <ph id=\"ph1\">`pHitTestInfo`</ph>, if any, or -1 otherwise.","source":"The index of the item at the position specified by `pHitTestInfo`, if any, or -1 otherwise."},{"pos":[90619,90626],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can use the <ph id=\"ph1\">`LVHT_ABOVE`</ph>, <ph id=\"ph2\">`LVHT_BELOW`</ph>, <ph id=\"ph3\">`LVHT_TOLEFT`</ph>, and <ph id=\"ph4\">`LVHT_TORIGHT`</ph> values of the structure's <bpt id=\"p1\">**</bpt>flag<ept id=\"p1\">**</ept> member to determine whether to scroll the contents of a list view control.","pos":[90630,90817],"source":"You can use the `LVHT_ABOVE`, `LVHT_BELOW`, `LVHT_TOLEFT`, and `LVHT_TORIGHT` values of the structure's **flag** member to determine whether to scroll the contents of a list view control."},{"content":"Two of these flags can be combined, for example, if the position is above and to the left of the client area.","pos":[90818,90927]},{"content":"You can test for the <bpt id=\"p1\">**</bpt>LVHT_ONITEM<ept id=\"p1\">**</ept> value of the structure's <bpt id=\"p2\">**</bpt>flag<ept id=\"p2\">**</ept> member to determine whether a given position is over a list view item.","pos":[90934,91075],"source":"You can test for the **LVHT_ONITEM** value of the structure's **flag** member to determine whether a given position is over a list view item."},{"content":"This value is a bitwise-OR operation on the <ph id=\"ph1\">`LVHT_ONITEMICON`</ph>, <ph id=\"ph2\">`LVHT_ONITEMLABEL`</ph>, and <ph id=\"ph3\">`LVHT_ONITEMSTATEICON`</ph> values of the structure's <bpt id=\"p1\">**</bpt>flag<ept id=\"p1\">**</ept> member.","pos":[91076,91228],"source":" This value is a bitwise-OR operation on the `LVHT_ONITEMICON`, `LVHT_ONITEMLABEL`, and `LVHT_ONITEMSTATEICON` values of the structure's **flag** member."},{"pos":[91238,91245],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[91709,91772],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__insertcolumn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::InsertColumn","linkify":"<a name=\"clistctrl__insertcolumn\"></a>  CListCtrl::InsertColumn","source":"<a name=\"clistctrl__insertcolumn\"></a>  CListCtrl::InsertColumn"},{"content":"Inserts a new column in a list view control.","pos":[91776,91820]},{"pos":[92059,92069],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index of the new column.","pos":[92083,92111]},{"content":"Address of an <bpt id=\"p1\">**</bpt>LVCOLUMN<ept id=\"p1\">**</ept> structure that contains the attributes of the new column.","pos":[92131,92215],"source":" Address of an **LVCOLUMN** structure that contains the attributes of the new column."},{"content":"<bpt id=\"p1\">*</bpt>lpszColumnHeading<ept id=\"p1\">*</ept>","pos":[92222,92241],"source":"*lpszColumnHeading*"},{"content":"Address of a string containing the column's heading.","pos":[92245,92297]},{"content":"Integer specifying the alignment of the column.","pos":[92317,92364]},{"content":"It can be one of these values: <bpt id=\"p1\">**</bpt>LVCFMT_LEFT<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>LVCFMT_RIGHT<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>LVCFMT_CENTER<ept id=\"p3\">**</ept>.","pos":[92365,92452],"source":" It can be one of these values: **LVCFMT_LEFT**, **LVCFMT_RIGHT**, or **LVCFMT_CENTER**."},{"content":"Width of the column, in pixels.","pos":[92471,92502]},{"content":"If this parameter is -1, the column width is not set.","pos":[92503,92556]},{"content":"Index of the subitem associated with the column.","pos":[92577,92625]},{"content":"If this parameter is -1, no subitem is associated with the column.","pos":[92626,92692]},{"pos":[92702,92714],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the new column if successful or -1 otherwise.","pos":[92718,92776]},{"pos":[92786,92793],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The leftmost column in a list view control must be left-aligned.","pos":[92797,92861]},{"content":"The <bpt id=\"p1\">[</bpt>LVCOLUMN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774743)</ept> structure contains the attributes of a column in report view.","pos":[92868,93004],"source":"The [LVCOLUMN](http://msdn.microsoft.com/library/windows/desktop/bb774743) structure contains the attributes of a column in report view."},{"content":"It is also used to receive information about a column.","pos":[93005,93059]},{"content":"This structure is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[93060,93139],"source":" This structure is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[93149,93210],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__insertgroup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::InsertGroup","linkify":"<a name=\"clistctrl__insertgroup\"></a>  CListCtrl::InsertGroup","source":"<a name=\"clistctrl__insertgroup\"></a>  CListCtrl::InsertGroup"},{"content":"Inserts a group into the list view control.","pos":[93214,93257]},{"pos":[93340,93350],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>","pos":[93354,93361],"source":"*index*"},{"content":"The index of the item where the group is to be inserted.","pos":[93365,93421]},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>LVGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774769)</ept> structure containing the group to be added.","pos":[93438,93567],"source":" A pointer to an [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure containing the group to be added."},{"pos":[93577,93589],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the index of the item that the group was added to, or -1 if the operation failed.","pos":[93593,93682]},{"pos":[93692,93699],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[93703,93909],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_INSERTGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761103)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_INSERTGROUP](http://msdn.microsoft.com/library/windows/desktop/bb761103) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[93919,93992],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__insertgroupsorted\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::InsertGroupSorted","linkify":"<a name=\"clistctrl__insertgroupsorted\"></a>  CListCtrl::InsertGroupSorted","source":"<a name=\"clistctrl__insertgroupsorted\"></a>  CListCtrl::InsertGroupSorted"},{"content":"Inserts the specified group into an ordered list of groups.","pos":[93996,94055]},{"pos":[94143,94153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pStructInsert<ept id=\"p1\">*</ept>","pos":[94157,94172],"source":"*pStructInsert*"},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>LVINSERTGROUPSORTED<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774756)</ept> structure that contains the group to insert.","pos":[94176,94318],"source":" A pointer to an [LVINSERTGROUPSORTED](http://msdn.microsoft.com/library/windows/desktop/bb774756) structure that contains the group to insert."},{"pos":[94328,94340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The return value is not used.","pos":[94344,94373]},{"pos":[94383,94390],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[94394,94606],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_INSERTGROUPSORTED<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761105)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_INSERTGROUPSORTED](http://msdn.microsoft.com/library/windows/desktop/bb761105) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[94616,94675],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__insertitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::InsertItem","linkify":"<a name=\"clistctrl__insertitem\"></a>  CListCtrl::InsertItem","source":"<a name=\"clistctrl__insertitem\"></a>  CListCtrl::InsertItem"},{"content":"Inserts an item into the list view control.","pos":[94679,94722]},{"pos":[95083,95093],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to an <bpt id=\"p1\">[</bpt>LVITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> structure that specifies the item's attributes, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[95108,95303],"source":" Pointer to an [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure that specifies the item's attributes, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"Index of the item to be inserted.","pos":[95321,95354]},{"content":"Address of a string containing the item's label, or <ph id=\"ph1\">`LPSTR_TEXTCALLBACK`</ph> if the item is a callback item.","pos":[95375,95479],"source":" Address of a string containing the item's label, or `LPSTR_TEXTCALLBACK` if the item is a callback item."},{"content":"For information on callback items, see <bpt id=\"p1\">[</bpt>CListCtrl::GetCallbackMask<ept id=\"p1\">](#clistctrl__getcallbackmask)</ept>.","pos":[95480,95577],"source":" For information on callback items, see [CListCtrl::GetCallbackMask](#clistctrl__getcallbackmask)."},{"content":"Index of the item's image, or <ph id=\"ph1\">`I_IMAGECALLBACK`</ph> if the item is a callback item.","pos":[95596,95675],"source":" Index of the item's image, or `I_IMAGECALLBACK` if the item is a callback item."},{"content":"For information on callback items, see <bpt id=\"p1\">[</bpt>CListCtrl::GetCallbackMask<ept id=\"p1\">](#clistctrl__getcallbackmask)</ept>.","pos":[95676,95773],"source":" For information on callback items, see [CListCtrl::GetCallbackMask](#clistctrl__getcallbackmask)."},{"content":"The <ph id=\"ph1\">`nMask`</ph> parameter specifies which item attributes passed as parameters are valid.","pos":[95791,95876],"source":" The `nMask` parameter specifies which item attributes passed as parameters are valid."},{"content":"It can be one or more of the mask values described in <bpt id=\"p1\">[</bpt>LVITEM Structure<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[95877,96061],"source":" It can be one or more of the mask values described in [LVITEM Structure](http://msdn.microsoft.com/library/windows/desktop/bb774760) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"The valid values can be combined with the bitwise OR operator.","pos":[96062,96124]},{"content":"Indicates the item's state, state image, and overlay image.","pos":[96143,96202]},{"content":"See the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph> topics <bpt id=\"p1\">[</bpt>LVITEM Structure<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> for more information and <bpt id=\"p2\">[</bpt>List-View Item States<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb774733)</ept> for a list of valid flags.","pos":[96203,96476],"source":" See the [!INCLUDE[winSDK](./includes/winsdk_md.md)] topics [LVITEM Structure](http://msdn.microsoft.com/library/windows/desktop/bb774760) for more information and [List-View Item States](http://msdn.microsoft.com/library/windows/desktop/bb774733) for a list of valid flags."},{"content":"Indicates which bits of the state member will be retrieved or modified.","pos":[96499,96570]},{"content":"See <bpt id=\"p1\">[</bpt>LVITEM Structure<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph> for more information.","pos":[96571,96726],"source":" See [LVITEM Structure](http://msdn.microsoft.com/library/windows/desktop/bb774760) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] for more information."},{"content":"A 32-bit application-specific value associated with the item.","pos":[96745,96806]},{"content":"If this parameter is specified, you must set the <ph id=\"ph1\">`nMask`</ph> attribute <ph id=\"ph2\">`LVIF_PARAM`</ph>.","pos":[96807,96887],"source":" If this parameter is specified, you must set the `nMask` attribute `LVIF_PARAM`."},{"pos":[96897,96909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the new item if successful or -1 otherwise.","pos":[96913,96969]},{"pos":[96979,96986],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calling this method may cause the <bpt id=\"p1\">**</bpt>LVM_INSERTITEM<ept id=\"p1\">**</ept> message to be sent to your control window.","pos":[96990,97085],"source":"Calling this method may cause the **LVM_INSERTITEM** message to be sent to your control window."},{"content":"The associated message handler for the control may fail to set the item text under certain conditions (such as using window styles such as <bpt id=\"p1\">**</bpt>LVS_OWNERDRAW<ept id=\"p1\">**</ept>).","pos":[97086,97244],"source":" The associated message handler for the control may fail to set the item text under certain conditions (such as using window styles such as **LVS_OWNERDRAW**)."},{"content":"For more information on these conditions, refer to <bpt id=\"p1\">[</bpt>LVM_INSERTITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761107)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[97245,97424],"source":" For more information on these conditions, refer to [LVM_INSERTITEM](http://msdn.microsoft.com/library/windows/desktop/bb761107) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[97434,97441],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[98175,98248],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__insertmarkhittest\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::InsertMarkHitTest","linkify":"<a name=\"clistctrl__insertmarkhittest\"></a>  CListCtrl::InsertMarkHitTest","source":"<a name=\"clistctrl__insertmarkhittest\"></a>  CListCtrl::InsertMarkHitTest"},{"content":"Retrieves the insertion point closest to a specified point.","pos":[98252,98311]},{"pos":[98416,98426],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure that contains the hit test coordinates, relative to the client area of the list control.","pos":[98442,98623],"source":" A pointer to a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that contains the hit test coordinates, relative to the client area of the list control."},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>LVINSERTMARK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774758)</ept> structure that specifies the insertion point closest to the coordinates defined by the point parameter.","pos":[98640,98834],"source":" A pointer to an [LVINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb774758) structure that specifies the insertion point closest to the coordinates defined by the point parameter."},{"pos":[98844,98856],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The insertion point closest to the specified point.","pos":[98860,98911]},{"pos":[98921,98928],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[98932,99144],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_INSERTMARKHITTEST<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761131)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_INSERTMARKHITTEST](http://msdn.microsoft.com/library/windows/desktop/bb761131) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[99154,99229],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__isgroupviewenabled\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::IsGroupViewEnabled","linkify":"<a name=\"clistctrl__isgroupviewenabled\"></a>  CListCtrl::IsGroupViewEnabled","source":"<a name=\"clistctrl__isgroupviewenabled\"></a>  CListCtrl::IsGroupViewEnabled"},{"content":"Determines whether group view is enabled for a list view control.","pos":[99233,99298]},{"pos":[99359,99371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[99375,99441],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if group view is enabled, or <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> otherwise.","source":"Returns **TRUE** if group view is enabled, or **FALSE** otherwise."},{"pos":[99451,99458],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[99462,99675],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_ISGROUPVIEWENABLED<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761133)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_ISGROUPVIEWENABLED](http://msdn.microsoft.com/library/windows/desktop/bb761133) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[99685,99750],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__isitemvisible\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::IsItemVisible","linkify":"<a name=\"clistctrl__isitemvisible\"></a>  CListCtrl::IsItemVisible","source":"<a name=\"clistctrl__isitemvisible\"></a>  CListCtrl::IsItemVisible"},{"content":"Indicates whether a specified item in the current list-view control is visible.","pos":[99754,99833]},{"pos":[99898,99908],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[99915,99924]},{"content":"Description","pos":[99925,99936]},{"pos":[99979,99991],"content":"[in] <ph id=\"ph1\">`index`</ph>","source":"[in] `index`"},{"content":"Zero-based index of an item in the current list-view control.","pos":[99992,100053]},{"pos":[100064,100076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[100080,100139],"content":"<ph id=\"ph1\">`true`</ph> if the specified item is visible;otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the specified item is visible;otherwise, `false`."},{"pos":[100149,100156],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[100160,100341],"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_ISITEMVISIBLE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761135)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This method sends the [LVM_ISITEMVISIBLE](http://msdn.microsoft.com/library/windows/desktop/bb761135) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[100351,100414],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__mapidtoindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::MapIDToIndex","linkify":"<a name=\"clistctrl__mapidtoindex\"></a>  CListCtrl::MapIDToIndex","source":"<a name=\"clistctrl__mapidtoindex\"></a>  CListCtrl::MapIDToIndex"},{"content":"Maps the unique ID of an item in the current list-view control to an index.","pos":[100418,100493]},{"pos":[100555,100565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[100572,100581]},{"content":"Description","pos":[100582,100593]},{"pos":[100636,100645],"content":"[in] <ph id=\"ph1\">`id`</ph>","source":"[in] `id`"},{"content":"The unique ID of an item.","pos":[100646,100671]},{"pos":[100682,100694],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current index for the specified ID.","pos":[100698,100737]},{"pos":[100747,100754],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A list-view control internally tracks items by index.","pos":[100758,100811]},{"content":"This can present problems because indexes can change during the control's lifetime.","pos":[100812,100895]},{"content":"The list-view control can tag an item with an ID when the item is created and you can use this ID to guarantee uniqueness during the lifetime of the list-view control.","pos":[100896,101063]},{"content":"Note that in a multithreaded environment the index is guaranteed only on the thread that hosts the list-view control, not on background threads.","pos":[101070,101214]},{"pos":[101221,101401],"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_MAPIDTOINDEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761137)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This method sends the [LVM_MAPIDTOINDEX](http://msdn.microsoft.com/library/windows/desktop/bb761137) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[101411,101474],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__mapindextoid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::MapIndexToID","linkify":"<a name=\"clistctrl__mapindextoid\"></a>  CListCtrl::MapIndexToID","source":"<a name=\"clistctrl__mapindextoid\"></a>  CListCtrl::MapIndexToID"},{"content":"Maps the index of an item in the current list-view control to a unique ID.","pos":[101478,101552]},{"pos":[101617,101627],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[101634,101643]},{"content":"Description","pos":[101644,101655]},{"pos":[101698,101710],"content":"[in] <ph id=\"ph1\">`index`</ph>","source":"[in] `index`"},{"content":"The zero-based index of an item.","pos":[101711,101743]},{"pos":[101754,101766],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A unique ID for the specified item.","pos":[101770,101805]},{"pos":[101815,101822],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A list-view control internally tracks items by index.","pos":[101826,101879]},{"content":"This can present problems because indexes can change during the control's lifetime.","pos":[101880,101963]},{"content":"The list-view control can tag an item with an ID when the item is created.","pos":[101964,102038]},{"content":"You can use this ID to access a specific item for the lifetime of the list-view control.","pos":[102039,102127]},{"content":"Note that in a multithreaded environment the index is guaranteed only on the thread that hosts the list-view control, not on background threads.","pos":[102134,102278]},{"pos":[102285,102465],"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_MAPINDEXTOID<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761139)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This method sends the [LVM_MAPINDEXTOID](http://msdn.microsoft.com/library/windows/desktop/bb761139) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[102475,102482],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_listCtrl`</ph>, that is used to access the current list-view control.","pos":[102486,102600],"source":"The following code example defines a variable, `m_listCtrl`, that is used to access the current list-view control."},{"content":"This variable is used in the next example.","pos":[102601,102643]},{"pos":[102755,102762],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example demonstrates the <ph id=\"ph1\">`MapIndexToID`</ph> method.","pos":[102766,102832],"source":"The following code example demonstrates the `MapIndexToID` method."},{"content":"In an earlier section of this code example, we created a list-view control that displays two columns titled \"ClientID\" and \"Grade\" in a report view.","pos":[102833,102981]},{"content":"The following example maps the index of each list-view item to an identification number, and then retrieves the index for each identification number.","pos":[102982,103131]},{"content":"Finally, the example reports whether the original indexes were retrieved.","pos":[103132,103205]},{"pos":[103975,104032],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__movegroup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::MoveGroup","linkify":"<a name=\"clistctrl__movegroup\"></a>  CListCtrl::MoveGroup","source":"<a name=\"clistctrl__movegroup\"></a>  CListCtrl::MoveGroup"},{"content":"Moves the specified group to the specified zero based index of the list view control.","pos":[104036,104121]},{"pos":[104203,104213],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The identifier of the group to be moved.","pos":[104231,104271]},{"content":"The zero-based index where the group is to be moved.","pos":[104291,104343]},{"pos":[104353,104365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The return value is not used.","pos":[104369,104398]},{"pos":[104408,104415],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[104419,104623],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_MOVEGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761141)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_MOVEGROUP](http://msdn.microsoft.com/library/windows/desktop/bb761141) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[104633,104702],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__moveitemtogroup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::MoveItemToGroup","linkify":"<a name=\"clistctrl__moveitemtogroup\"></a>  CListCtrl::MoveItemToGroup","source":"<a name=\"clistctrl__moveitemtogroup\"></a>  CListCtrl::MoveItemToGroup"},{"content":"Moves the specified item into the specified group.","pos":[104706,104756]},{"pos":[104845,104855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`idItemFrom`</ph>","pos":[104859,104876],"source":"[in] `idItemFrom`"},{"content":"The index of the item to be moved.","pos":[104880,104914]},{"content":"[in] <ph id=\"ph1\">`idGroupTo`</ph>","pos":[104921,104937],"source":"[in] `idGroupTo`"},{"content":"The identifier of the group the item will be moved to.","pos":[104941,104995]},{"pos":[105005,105012],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[105020,105072],"content":"[!NOTE]\n This method currently is not implemented.","leadings":["","> "],"nodes":[{"content":"This method currently is not implemented.","pos":[9,50]}]},{"pos":[105079,105280],"content":"This method emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_MOVEITEMTOGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761143)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This method emulates the functionality of the [LVM_MOVEITEMTOGROUP](http://msdn.microsoft.com/library/windows/desktop/bb761143) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[105290,105351],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__redrawitems\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::RedrawItems","linkify":"<a name=\"clistctrl__redrawitems\"></a>  CListCtrl::RedrawItems","source":"<a name=\"clistctrl__redrawitems\"></a>  CListCtrl::RedrawItems"},{"content":"Forces a list view control to repaint a range of items.","pos":[105355,105410]},{"pos":[105487,105497],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the first item to be repainted.","pos":[105513,105553]},{"content":"Index of the last item to be repainted.","pos":[105571,105610]},{"pos":[105620,105632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[105636,105674]},{"pos":[105684,105691],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The specified items are not actually repainted until the list view window receives a <ph id=\"ph1\">`WM_PAINT`</ph> message.","pos":[105695,105799],"source":"The specified items are not actually repainted until the list view window receives a `WM_PAINT` message."},{"content":"To repaint immediately, call the Windows <bpt id=\"p1\">[</bpt>UpdateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145167)</ept> function after using this function.","pos":[105800,105951],"source":" To repaint immediately, call the Windows [UpdateWindow](http://msdn.microsoft.com/library/windows/desktop/dd145167) function after using this function."},{"pos":[105961,106030],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__removeallgroups\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::RemoveAllGroups","linkify":"<a name=\"clistctrl__removeallgroups\"></a>  CListCtrl::RemoveAllGroups","source":"<a name=\"clistctrl__removeallgroups\"></a>  CListCtrl::RemoveAllGroups"},{"content":"Removes all groups from a list view control.","pos":[106034,106078]},{"pos":[106127,106134],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[106138,106348],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_REMOVEALLGROUPS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761147)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_REMOVEALLGROUPS](http://msdn.microsoft.com/library/windows/desktop/bb761147) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[106358,106419],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__removegroup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::RemoveGroup","linkify":"<a name=\"clistctrl__removegroup\"></a>  CListCtrl::RemoveGroup","source":"<a name=\"clistctrl__removegroup\"></a>  CListCtrl::RemoveGroup"},{"content":"Removes the specified group from the list view control.","pos":[106423,106478]},{"pos":[106538,106548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The identifier of the group to be removed.","pos":[106566,106608]},{"pos":[106618,106630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the index of the group if successful, or -1 otherwise.","pos":[106634,106696]},{"pos":[106706,106713],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[106717,106923],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_REMOVEGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761149)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_REMOVEGROUP](http://msdn.microsoft.com/library/windows/desktop/bb761149) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[106933,106984],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__scroll\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::Scroll","linkify":"<a name=\"clistctrl__scroll\"></a>  CListCtrl::Scroll","source":"<a name=\"clistctrl__scroll\"></a>  CListCtrl::Scroll"},{"content":"Scrolls the content of a list view control.","pos":[106988,107031]},{"pos":[107081,107091],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CSize`</ph> object specifying the amount of horizontal and vertical scrolling, in pixels.","pos":[107105,107192],"source":" A `CSize` object specifying the amount of horizontal and vertical scrolling, in pixels."},{"content":"The <bpt id=\"p1\">**</bpt>y<ept id=\"p1\">**</ept> member of <ph id=\"ph1\">`size`</ph> is divided by the height, in pixels, of the list view control's line, and the control is scrolled by the resulting number of lines.","pos":[107193,107351],"source":" The **y** member of `size` is divided by the height, in pixels, of the list view control's line, and the control is scrolled by the resulting number of lines."},{"pos":[107361,107373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[107377,107415]},{"pos":[107425,107484],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setbkcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetBkColor","linkify":"<a name=\"clistctrl__setbkcolor\"></a>  CListCtrl::SetBkColor","source":"<a name=\"clistctrl__setbkcolor\"></a>  CListCtrl::SetBkColor"},{"content":"Sets the background color of the list view control.","pos":[107488,107539]},{"pos":[107594,107604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Background color to set, or the <ph id=\"ph1\">`CLR_NONE`</ph> value for no background color.","pos":[107616,107689],"source":" Background color to set, or the `CLR_NONE` value for no background color."},{"content":"List view controls with background colors redraw themselves significantly faster than those without background colors.","pos":[107690,107808]},{"content":"For information, see <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[107809,107952],"source":" For information, see [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[107962,107974],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[107978,108016]},{"pos":[108026,108033],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[108276,108335],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setbkimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetBkImage","linkify":"<a name=\"clistctrl__setbkimage\"></a>  CListCtrl::SetBkImage","source":"<a name=\"clistctrl__setbkimage\"></a>  CListCtrl::SetBkImage"},{"content":"Sets the background image of a list view control.","pos":[108339,108388]},{"pos":[108706,108716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Address of an <bpt id=\"p1\">**</bpt>LVBKIMAGE<ept id=\"p1\">**</ept> structure, containing the new background image information.","pos":[108736,108823],"source":" Address of an **LVBKIMAGE** structure, containing the new background image information."},{"content":"Handle to a bitmap.","pos":[108839,108858]},{"content":"A <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>-terminated string that contains the URL of the background image.","pos":[108877,108952],"source":" A **NULL**-terminated string that contains the URL of the background image."},{"content":"<bpt id=\"p1\">*</bpt>fTile<ept id=\"p1\">*</ept>","pos":[108959,108966],"source":"*fTile*"},{"content":"Nonzero if the image is to be tiled in the background of the list view control; otherwise 0.","pos":[108970,109062]},{"content":"<bpt id=\"p1\">*</bpt>xOffsetPercent<ept id=\"p1\">*</ept>","pos":[109069,109085],"source":"*xOffsetPercent*"},{"content":"The offset, in pixels, of the image's left edge, from origin of the list view control.","pos":[109089,109175]},{"content":"<bpt id=\"p1\">*</bpt>yOffsetPercent<ept id=\"p1\">*</ept>","pos":[109182,109198],"source":"*yOffsetPercent*"},{"content":"The offset, in pixels, of the image's top edge, from origin of the list view control.","pos":[109202,109287]},{"pos":[109297,109309],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns nonzero if successful, or zero otherwise.","pos":[109313,109362]},{"pos":[109372,109379],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[109387,109820],"content":"[!NOTE]\n Because `CListCtrl::SetBkImage` makes use of OLE COM functionality, the OLE libraries must be initialized before using `SetBkImage`. It is best to initialize the COM libraries when the application is initialized and uninitialize the libraries when the application terminates. This is automatically done in MFC applications that make use of ActiveX technology, OLE Automation, OLE Linking/Embedding, or ODBC/DAO operations.","leadings":["","> "],"nodes":[{"content":" Because `CListCtrl::SetBkImage` makes use of OLE COM functionality, the OLE libraries must be initialized before using `SetBkImage`. It is best to initialize the COM libraries when the application is initialized and uninitialize the libraries when the application terminates. This is automatically done in MFC applications that make use of ActiveX technology, OLE Automation, OLE Linking/Embedding, or ODBC/DAO operations.","pos":[8,431],"nodes":[{"content":"Because <ph id=\"ph1\">`CListCtrl::SetBkImage`</ph> makes use of OLE COM functionality, the OLE libraries must be initialized before using <ph id=\"ph2\">`SetBkImage`</ph>.","pos":[1,133],"source":" Because `CListCtrl::SetBkImage` makes use of OLE COM functionality, the OLE libraries must be initialized before using `SetBkImage`."},{"content":"It is best to initialize the COM libraries when the application is initialized and uninitialize the libraries when the application terminates.","pos":[134,276]},{"content":"This is automatically done in MFC applications that make use of ActiveX technology, OLE Automation, OLE Linking/Embedding, or ODBC/DAO operations.","pos":[277,423]}]}]},{"pos":[109830,109837],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[109842,109910],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetBkImage<ept id=\"p1\">](#clistctrl__getbkimage)</ept>.","source":"See the example for [CListCtrl::GetBkImage](#clistctrl__getbkimage)."},{"pos":[109920,109989],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setcallbackmask\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetCallbackMask","linkify":"<a name=\"clistctrl__setcallbackmask\"></a>  CListCtrl::SetCallbackMask","source":"<a name=\"clistctrl__setcallbackmask\"></a>  CListCtrl::SetCallbackMask"},{"content":"Sets the callback mask for a list view control.","pos":[109993,110040]},{"pos":[110099,110109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"New value of the callback mask.","pos":[110124,110155]},{"pos":[110165,110177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[110181,110219]},{"pos":[110229,110236],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[110513,110568],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setcheck\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetCheck","linkify":"<a name=\"clistctrl__setcheck\"></a>  CListCtrl::SetCheck","source":"<a name=\"clistctrl__setcheck\"></a>  CListCtrl::SetCheck"},{"content":"Determines if the state image of a list control item is visible.","pos":[110572,110636]},{"pos":[110718,110728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The zero-based index of a list control item.","pos":[110743,110787]},{"content":"Specifies whether the state image of the item should be visible or not.","pos":[110806,110877]},{"content":"By default, <bpt id=\"p1\">*</bpt>fCheck<ept id=\"p1\">*</ept> is <bpt id=\"p2\">**</bpt>TRUE<ept id=\"p2\">**</ept> and the state image is visible.","pos":[110878,110942],"source":" By default, *fCheck* is **TRUE** and the state image is visible."},{"content":"If <ph id=\"ph1\">`fCheck`</ph> is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, it is not visible.","pos":[110943,110987],"source":" If `fCheck` is **FALSE**, it is not visible."},{"pos":[110997,111009],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the item is checked, otherwise 0.","pos":[111013,111057]},{"pos":[111067,111074],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[111529,111586],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setcolumn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetColumn","linkify":"<a name=\"clistctrl__setcolumn\"></a>  CListCtrl::SetColumn","source":"<a name=\"clistctrl__setcolumn\"></a>  CListCtrl::SetColumn"},{"content":"Sets the attributes of a list view column.","pos":[111590,111632]},{"pos":[111719,111729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the column whose attributes are to be set.","pos":[111743,111794]},{"content":"Address of an <bpt id=\"p1\">[</bpt>LVCOLUMN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774743)</ept> structure that contains the new column attributes, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[111814,112014],"source":" Address of an [LVCOLUMN](http://msdn.microsoft.com/library/windows/desktop/bb774743) structure that contains the new column attributes, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"The structure's <bpt id=\"p1\">**</bpt>mask<ept id=\"p1\">**</ept> member specifies which column attributes to set.","pos":[112015,112088],"source":" The structure's **mask** member specifies which column attributes to set."},{"content":"If the <bpt id=\"p1\">**</bpt>mask<ept id=\"p1\">**</ept> member specifies the <ph id=\"ph1\">`LVCF_TEXT`</ph> value, the structure's <bpt id=\"p2\">**</bpt>pszText<ept id=\"p2\">**</ept> member is the address of a null-terminated string and the structure's <bpt id=\"p3\">**</bpt>cchTextMax<ept id=\"p3\">**</ept> member is ignored.","pos":[112089,112276],"source":" If the **mask** member specifies the `LVCF_TEXT` value, the structure's **pszText** member is the address of a null-terminated string and the structure's **cchTextMax** member is ignored."},{"pos":[112286,112298],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[112302,112340]},{"pos":[112350,112357],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[112362,112428],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetColumn<ept id=\"p1\">](#clistctrl__getcolumn)</ept>.","source":"See the example for [CListCtrl::GetColumn](#clistctrl__getcolumn)."},{"pos":[112438,112515],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setcolumnorderarray\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetColumnOrderArray","linkify":"<a name=\"clistctrl__setcolumnorderarray\"></a>  CListCtrl::SetColumnOrderArray","source":"<a name=\"clistctrl__setcolumnorderarray\"></a>  CListCtrl::SetColumnOrderArray"},{"content":"Sets the column order (left to right) of a list view control.","pos":[112519,112580]},{"pos":[112669,112679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a buffer containing the index values of the columns in the list view control (from left to right).","pos":[112696,112807]},{"content":"The buffer must be large enough to contain the total number of columns in the list view control.","pos":[112808,112904]},{"content":"Number of columns in the list view control.","pos":[112923,112966]},{"pos":[112976,112988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[112992,113030]},{"pos":[113040,113047],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[113051,113272],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_SetColumnOrderArray<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775072)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_SetColumnOrderArray](http://msdn.microsoft.com/library/windows/desktop/bb775072), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[113282,113289],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[113294,113380],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetColumnOrderArray<ept id=\"p1\">](#clistctrl__getcolumnorderarray)</ept>.","source":"See the example for [CListCtrl::GetColumnOrderArray](#clistctrl__getcolumnorderarray)."},{"pos":[113390,113457],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setcolumnwidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetColumnWidth","linkify":"<a name=\"clistctrl__setcolumnwidth\"></a>  CListCtrl::SetColumnWidth","source":"<a name=\"clistctrl__setcolumnwidth\"></a>  CListCtrl::SetColumnWidth"},{"content":"Changes the width of a column in report view or list view.","pos":[113461,113519]},{"pos":[113594,113604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the column for which the width is to be set.","pos":[113618,113671]},{"content":"In list view, this parameter must be 0.","pos":[113672,113711]},{"content":"The new width of the column.","pos":[113726,113754]},{"content":"Can be either <bpt id=\"p1\">**</bpt>LVSCW_AUTOSIZE<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>LVSCW_AUTOSIZE_USEHEADER<ept id=\"p2\">**</ept>, as described in <bpt id=\"p3\">[</bpt>LVM_SETCOLUMNWIDTH<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/bb761163)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[113755,113969],"source":" Can be either **LVSCW_AUTOSIZE** or **LVSCW_AUTOSIZE_USEHEADER**, as described in [LVM_SETCOLUMNWIDTH](http://msdn.microsoft.com/library/windows/desktop/bb761163) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[113979,113991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[113995,114033]},{"pos":[114043,114114],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setextendedstyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetExtendedStyle","linkify":"<a name=\"clistctrl__setextendedstyle\"></a>  CListCtrl::SetExtendedStyle","source":"<a name=\"clistctrl__setextendedstyle\"></a>  CListCtrl::SetExtendedStyle"},{"content":"Sets the current extended styles of a list view control.","pos":[114118,114174]},{"pos":[114241,114251],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A combination of extended styles to be used by the list view control.","pos":[114271,114340]},{"content":"For a descriptive list of these styles, see the <bpt id=\"p1\">[</bpt>Extended List View Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774732)</ept> topic in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[114341,114534],"source":" For a descriptive list of these styles, see the [Extended List View Styles](http://msdn.microsoft.com/library/windows/desktop/bb774732) topic in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[114544,114556],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A combination of the previous extended styles used by the list view control.","pos":[114560,114636]},{"pos":[114646,114653],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[114657,114883],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_SetExtendedListViewStyle<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775076)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_SetExtendedListViewStyle](http://msdn.microsoft.com/library/windows/desktop/bb775076), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[114893,114900],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[115089,115152],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setgroupinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetGroupInfo","linkify":"<a name=\"clistctrl__setgroupinfo\"></a>  CListCtrl::SetGroupInfo","source":"<a name=\"clistctrl__setgroupinfo\"></a>  CListCtrl::SetGroupInfo"},{"content":"Sets the information that describes the specified group of the current list-view control.","pos":[115156,115245]},{"pos":[115328,115338],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The identifier of the group whose information is set.","pos":[115356,115409]},{"content":"Pointer to an <bpt id=\"p1\">[</bpt>LVGROUP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774769)</ept> structure that contains the information to set.","pos":[115426,115557],"source":" Pointer to an [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure that contains the information to set."},{"content":"The caller is responsible for allocating this structure and setting its members.","pos":[115558,115638]},{"pos":[115648,115660],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the group if the method is successful; otherwise, -1.","pos":[115664,115727]},{"pos":[115737,115744],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[115748,115928],"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_SETGROUPINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761167)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This method sends the [LVM_SETGROUPINFO](http://msdn.microsoft.com/library/windows/desktop/bb761167) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[115938,116007],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setgroupmetrics\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetGroupMetrics","linkify":"<a name=\"clistctrl__setgroupmetrics\"></a>  CListCtrl::SetGroupMetrics","source":"<a name=\"clistctrl__setgroupmetrics\"></a>  CListCtrl::SetGroupMetrics"},{"content":"Sets the group metrics of a list view control.","pos":[116011,116057]},{"pos":[116135,116145],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>LVGROUPMETRICS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774752)</ept> structure containing the group metrics information to be set.","pos":[116168,116322],"source":" A pointer to an [LVGROUPMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb774752) structure containing the group metrics information to be set."},{"pos":[116332,116339],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[116343,116553],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_SETGROUPMETRICS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761168)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_SETGROUPMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb761168) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[116563,116626],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__sethotcursor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetHotCursor","linkify":"<a name=\"clistctrl__sethotcursor\"></a>  CListCtrl::SetHotCursor","source":"<a name=\"clistctrl__sethotcursor\"></a>  CListCtrl::SetHotCursor"},{"content":"Sets the cursor used when hot tracking is enabled for a list view control.","pos":[116630,116704]},{"pos":[116763,116773],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>hc<ept id=\"p1\">*</ept>","pos":[116777,116781],"source":"*hc*"},{"content":"A handle to a cursor resource, used to represent the hot cursor.","pos":[116785,116849]},{"pos":[116859,116871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle to the previous hot cursor resource being used by the list view control.","pos":[116875,116958]},{"pos":[116968,116975],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[116979,117193],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_SetHotCursor<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775082)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_SetHotCursor](http://msdn.microsoft.com/library/windows/desktop/bb775082), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"The hot cursor, only visible when hover selection is enabled, appears as the cursor passes over any list view item.","pos":[117200,117315]},{"content":"Hover selection is enabled by setting the <bpt id=\"p1\">**</bpt>LVS_EX_TRACKSELECT<ept id=\"p1\">**</ept> extended style.","pos":[117316,117396],"source":" Hover selection is enabled by setting the **LVS_EX_TRACKSELECT** extended style."},{"pos":[117406,117413],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[117418,117490],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetHotCursor<ept id=\"p1\">](#clistctrl__gethotcursor)</ept>.","source":"See the example for [CListCtrl::GetHotCursor](#clistctrl__gethotcursor)."},{"pos":[117500,117559],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__sethotitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetHotItem","linkify":"<a name=\"clistctrl__sethotitem\"></a>  CListCtrl::SetHotItem","source":"<a name=\"clistctrl__sethotitem\"></a>  CListCtrl::SetHotItem"},{"content":"Sets the current hot item of a list view control.","pos":[117563,117612]},{"pos":[117665,117675],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Zero-based index of the item to be set as the hot item.","pos":[117691,117746]},{"pos":[117756,117768],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of the previously hot item.","pos":[117772,117820]},{"pos":[117830,117837],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[117841,118053],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_SetHotItem<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775083)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_SetHotItem](http://msdn.microsoft.com/library/windows/desktop/bb775083), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[118063,118070],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[118075,118143],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetHotItem<ept id=\"p1\">](#clistctrl__gethotitem)</ept>.","source":"See the example for [CListCtrl::GetHotItem](#clistctrl__gethotitem)."},{"pos":[118153,118216],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__sethovertime\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetHoverTime","linkify":"<a name=\"clistctrl__sethovertime\"></a>  CListCtrl::SetHoverTime","source":"<a name=\"clistctrl__sethovertime\"></a>  CListCtrl::SetHoverTime"},{"content":"Sets the current hover time of a list view control.","pos":[118220,118271]},{"pos":[118347,118357],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>dwHoverTime<ept id=\"p1\">*</ept>","pos":[118361,118374],"source":"*dwHoverTime*"},{"content":"The new delay, in milliseconds, which the mouse cursor must hover over an item before it is selected.","pos":[118378,118479]},{"content":"If the default value is passed, the time is set to the default hover time.","pos":[118480,118554]},{"pos":[118564,118576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The previous hover time, in milliseconds.","pos":[118580,118621]},{"pos":[118631,118638],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[118642,118856],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_SetHoverTime<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775084)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_SetHoverTime](http://msdn.microsoft.com/library/windows/desktop/bb775084), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[118866,118873],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[118878,118950],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetHoverTime<ept id=\"p1\">](#clistctrl__gethovertime)</ept>.","source":"See the example for [CListCtrl::GetHoverTime](#clistctrl__gethovertime)."},{"pos":[118960,119027],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__seticonspacing\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetIconSpacing","linkify":"<a name=\"clistctrl__seticonspacing\"></a>  CListCtrl::SetIconSpacing","source":"<a name=\"clistctrl__seticonspacing\"></a>  CListCtrl::SetIconSpacing"},{"content":"Sets the spacing between icons in a list view control.","pos":[119031,119085]},{"pos":[119201,119211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The distance (in pixels) between icons on the x-axis.","pos":[119223,119276]},{"content":"The distance (in pixels) between icons on the y-axis.","pos":[119291,119344]},{"content":"A <ph id=\"ph1\">`CSize`</ph> object specifying the distance (in pixels) between icons on the x- and y-axes.","pos":[119361,119449],"source":" A `CSize` object specifying the distance (in pixels) between icons on the x- and y-axes."},{"pos":[119459,119471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[119475,119587],"content":"A <bpt id=\"p1\">[</bpt>CSize<ept id=\"p1\">](../../atl-mfc-shared/reference/csize-class.md)</ept> object containing the previous values for icon spacing.","source":"A [CSize](../../atl-mfc-shared/reference/csize-class.md) object containing the previous values for icon spacing."},{"pos":[119597,119604],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[119608,119824],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_SetIconSpacing<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775085)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_SetIconSpacing](http://msdn.microsoft.com/library/windows/desktop/bb775085), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[119834,119841],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[119958,120021],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setimagelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetImageList","linkify":"<a name=\"clistctrl__setimagelist\"></a>  CListCtrl::SetImageList","source":"<a name=\"clistctrl__setimagelist\"></a>  CListCtrl::SetImageList"},{"content":"Assigns an image list to a list view control.","pos":[120025,120070]},{"pos":[120176,120186],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the image list to assign.","pos":[120206,120242]},{"content":"Type of image list.","pos":[120269,120288]},{"content":"It can be one of these values:","pos":[120289,120319]},{"pos":[120327,120370],"content":"<ph id=\"ph1\">`LVSIL_NORMAL`</ph> Image list with large icons.","source":"`LVSIL_NORMAL` Image list with large icons."},{"pos":[120378,120420],"content":"<ph id=\"ph1\">`LVSIL_SMALL`</ph> Image list with small icons.","source":"`LVSIL_SMALL` Image list with small icons."},{"pos":[120428,120471],"content":"<ph id=\"ph1\">`LVSIL_STATE`</ph> Image list with state images.","source":"`LVSIL_STATE` Image list with state images."},{"pos":[120481,120493],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the previous image list.","pos":[120497,120534]},{"pos":[120544,120551],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[120556,120628],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetImageList<ept id=\"p1\">](#clistctrl__getimagelist)</ept>.","source":"See the example for [CListCtrl::GetImageList](#clistctrl__getimagelist)."},{"pos":[120638,120697],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setinfotip\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetInfoTip","linkify":"<a name=\"clistctrl__setinfotip\"></a>  CListCtrl::SetInfoTip","source":"<a name=\"clistctrl__setinfotip\"></a>  CListCtrl::SetInfoTip"},{"content":"Sets the tooltip text.","pos":[120701,120723]},{"pos":[120791,120801],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>plvInfoTip<ept id=\"p1\">*</ept>","pos":[120805,120817],"source":"*plvInfoTip*"},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>LVFSETINFOTIP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774764)</ept> structure containing the information to be set.","pos":[120821,120960],"source":" A pointer to an [LVFSETINFOTIP](http://msdn.microsoft.com/library/windows/desktop/bb774764) structure containing the information to be set."},{"pos":[120970,120982],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[120986,121036],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[121046,121053],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[121057,121262],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_SETINFOTIP<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761180)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_SETINFOTIP](http://msdn.microsoft.com/library/windows/desktop/bb761180) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[121272,121337],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setinsertmark\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetInsertMark","linkify":"<a name=\"clistctrl__setinsertmark\"></a>  CListCtrl::SetInsertMark","source":"<a name=\"clistctrl__setinsertmark\"></a>  CListCtrl::SetInsertMark"},{"content":"Sets the insertion point to the defined position.","pos":[121341,121390]},{"pos":[121456,121466],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>LVINSERTMARK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774758)</ept> structure specifying where to set the insertion point.","pos":[121480,121625],"source":" A pointer to an [LVINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb774758) structure specifying where to set the insertion point."},{"pos":[121635,121647],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if successful, or <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> otherwise.","pos":[121651,121706],"source":"Returns **TRUE** if successful, or **FALSE** otherwise."},{"content":"<bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> is returned if the size in the <ph id=\"ph1\">`cbSize`</ph> member of the <bpt id=\"p2\">**</bpt>LVINSERTMARK<ept id=\"p2\">**</ept> structure does not equal the actual size of the structure, or when an insertion point does not apply in the current view.","pos":[121707,121909],"source":"**FALSE** is returned if the size in the `cbSize` member of the **LVINSERTMARK** structure does not equal the actual size of the structure, or when an insertion point does not apply in the current view."},{"pos":[121919,121926],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[121930,122138],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_SETINSERTMARK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761182)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_SETINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb761182) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[122148,122223],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setinsertmarkcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetInsertMarkColor","linkify":"<a name=\"clistctrl__setinsertmarkcolor\"></a>  CListCtrl::SetInsertMarkColor","source":"<a name=\"clistctrl__setinsertmarkcolor\"></a>  CListCtrl::SetInsertMarkColor"},{"content":"Sets the color of the insertion point.","pos":[122227,122265]},{"pos":[122335,122345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> structure specifying the color to set the insertion point.","pos":[122360,122491],"source":" A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) structure specifying the color to set the insertion point."},{"pos":[122501,122513],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[122517,122580],"content":"Returns a <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> structure containing the previous color.","source":"Returns a **COLORREF** structure containing the previous color."},{"pos":[122590,122597],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[122601,122814],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_SETINSERTMARKCOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761184)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_SETINSERTMARKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb761184) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[122824,122877],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetItem","linkify":"<a name=\"clistctrl__setitem\"></a>  CListCtrl::SetItem","source":"<a name=\"clistctrl__setitem\"></a>  CListCtrl::SetItem"},{"content":"Sets some or all of a list view item's attributes.","pos":[122881,122931]},{"pos":[123367,123377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Address of an <bpt id=\"p1\">[</bpt>LVITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> structure that contains the new item attributes, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[123392,123588],"source":" Address of an [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure that contains the new item attributes, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"The structure's <bpt id=\"p1\">**</bpt>iItem<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>iSubItem<ept id=\"p2\">**</ept> members identify the item or subitem, and the structure's <bpt id=\"p3\">**</bpt>mask<ept id=\"p3\">**</ept> member specifies which attributes to set.","pos":[123589,123740],"source":" The structure's **iItem** and **iSubItem** members identify the item or subitem, and the structure's **mask** member specifies which attributes to set."},{"content":"For more information on the <bpt id=\"p1\">**</bpt>mask<ept id=\"p1\">**</ept> member, see the <bpt id=\"p2\">**</bpt>Remarks<ept id=\"p2\">**</ept>.","pos":[123741,123806],"source":" For more information on the **mask** member, see the **Remarks**."},{"content":"Index of the item whose attributes are to be set.","pos":[123824,123873]},{"content":"Index of the subitem whose attributes are to be set.","pos":[123894,123946]},{"content":"Specifies which attributes are to be set (see the Remarks).","pos":[123964,124023]},{"content":"Address of a null-terminated string specifying the item's label.","pos":[124044,124108]},{"content":"Index of the item's image within the image list.","pos":[124127,124175]},{"content":"Specifies values for states to be changed (see the Remarks).","pos":[124194,124254]},{"content":"Specifies which states are to be changed (see the Remarks).","pos":[124277,124336]},{"content":"A 32-bit application-specific value to be associated with the item.","pos":[124355,124422]},{"content":"Width, in pixels, of the indentation.","pos":[124442,124479]},{"content":"If <ph id=\"ph1\">`nIndent`</ph> is less than the system-defined minimum width, the new width is set to the system-defined minimum","pos":[124480,124590],"source":" If `nIndent` is less than the system-defined minimum width, the new width is set to the system-defined minimum"},{"pos":[124600,124612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[124616,124654]},{"pos":[124664,124671],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[124675,124845],"content":"The <bpt id=\"p1\">**</bpt>iItem<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>iSubItem<ept id=\"p2\">**</ept> members of the <bpt id=\"p3\">**</bpt>LVITEM<ept id=\"p3\">**</ept> structure and the <ph id=\"ph1\">`nItem`</ph> and <ph id=\"ph2\">`nSubItem`</ph> parameters identify the item and subitem whose attributes are to be set.","source":"The **iItem** and **iSubItem** members of the **LVITEM** structure and the `nItem` and `nSubItem` parameters identify the item and subitem whose attributes are to be set."},{"pos":[124852,124970],"content":"The <bpt id=\"p1\">**</bpt>mask<ept id=\"p1\">**</ept> member of the <bpt id=\"p2\">**</bpt>LVITEM<ept id=\"p2\">**</ept> structure and the <ph id=\"ph1\">`nMask`</ph> parameter specify which item attributes are to be set:","source":"The **mask** member of the **LVITEM** structure and the `nMask` parameter specify which item attributes are to be set:"},{"pos":[124978,125122],"content":"<ph id=\"ph1\">`LVIF_TEXT`</ph> The <bpt id=\"p1\">**</bpt>pszText<ept id=\"p1\">**</ept> member or the <ph id=\"ph2\">`lpszItem`</ph> parameter is the address of a null-terminated string; the <bpt id=\"p2\">**</bpt>cchTextMax<ept id=\"p2\">**</ept> member is ignored.","source":"`LVIF_TEXT` The **pszText** member or the `lpszItem` parameter is the address of a null-terminated string; the **cchTextMax** member is ignored."},{"pos":[125130,125316],"content":"<ph id=\"ph1\">`LVIF_STATE`</ph> The <bpt id=\"p1\">**</bpt>stateMask<ept id=\"p1\">**</ept> member or <ph id=\"ph2\">`nStateMask`</ph> parameter specifies which item states to change and the <bpt id=\"p2\">**</bpt>state<ept id=\"p2\">**</ept> member or <ph id=\"ph3\">`nState`</ph> parameter contains the values for those states.","source":"`LVIF_STATE` The **stateMask** member or `nStateMask` parameter specifies which item states to change and the **state** member or `nState` parameter contains the values for those states."},{"pos":[125326,125333],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[125338,125400],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::HitTest<ept id=\"p1\">](#clistctrl__hittest)</ept>.","source":"See the example for [CListCtrl::HitTest](#clistctrl__hittest)."},{"pos":[125410,125473],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setitemcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetItemCount","linkify":"<a name=\"clistctrl__setitemcount\"></a>  CListCtrl::SetItemCount","source":"<a name=\"clistctrl__setitemcount\"></a>  CListCtrl::SetItemCount"},{"content":"Prepares a list view control for adding a large number of items.","pos":[125477,125541]},{"pos":[125597,125607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Number of items that the control will ultimately contain.","pos":[125623,125680]},{"pos":[125690,125697],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[125701,125816],"content":"To set the item count for a virtual list view control, see <bpt id=\"p1\">[</bpt>CListCtrl::SetItemCountEx<ept id=\"p1\">](#clistctrl__setitemcountex)</ept>.","source":"To set the item count for a virtual list view control, see [CListCtrl::SetItemCountEx](#clistctrl__setitemcountex)."},{"pos":[125826,125833],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[125837,126051],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_SetItemCount<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775093)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_SetItemCount](http://msdn.microsoft.com/library/windows/desktop/bb775093), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[126061,126068],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[126357,126424],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setitemcountex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetItemCountEx","linkify":"<a name=\"clistctrl__setitemcountex\"></a>  CListCtrl::SetItemCountEx","source":"<a name=\"clistctrl__setitemcountex\"></a>  CListCtrl::SetItemCountEx"},{"content":"Sets the item count for a virtual list view control.","pos":[126428,126480]},{"pos":[126589,126599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Number of items that the control will ultimately contain.","pos":[126615,126672]},{"content":"Specifies the behavior of the list view control after resetting the item count.","pos":[126692,126771]},{"content":"This value can be a combination of the following:","pos":[126772,126821]},{"content":"<bpt id=\"p1\">**</bpt>LVSICF_NOINVALIDATEALL<ept id=\"p1\">**</ept> The list view control will not repaint unless affected items are currently in view.","pos":[126829,126939],"source":"**LVSICF_NOINVALIDATEALL** The list view control will not repaint unless affected items are currently in view."},{"content":"This is the default value.","pos":[126940,126966]},{"pos":[126974,127080],"content":"<bpt id=\"p1\">**</bpt>LVSICF_NOSCROLL<ept id=\"p1\">**</ept> The list view control will not change the scroll position when the item count changes.","source":"**LVSICF_NOSCROLL** The list view control will not change the scroll position when the item count changes."},{"pos":[127090,127102],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[127106,127144]},{"pos":[127154,127161],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[127165,127429],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_SetItemCountEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775095)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>and should only be called for virtual list views.","source":"This member function implements the behavior of the Win32 macro, [ListView_SetItemCountEx](http://msdn.microsoft.com/library/windows/desktop/bb775095), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]and should only be called for virtual list views."},{"pos":[127439,127446],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[127908,127969],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setitemdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetItemData","linkify":"<a name=\"clistctrl__setitemdata\"></a>  CListCtrl::SetItemData","source":"<a name=\"clistctrl__setitemdata\"></a>  CListCtrl::SetItemData"},{"pos":[127973,128062],"content":"Sets the 32-bit application-specific value associated with the item specified by <ph id=\"ph1\">`nItem`</ph>.","source":"Sets the 32-bit application-specific value associated with the item specified by `nItem`."},{"pos":[128139,128149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the list item whose data is to be set.","pos":[128164,128211]},{"content":"A 32-bit value to be associated with the item.","pos":[128230,128276]},{"pos":[128286,128298],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[128302,128337]},{"pos":[128347,128354],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[128358,128545],"content":"This value is the <bpt id=\"p1\">**</bpt>lParam<ept id=\"p1\">**</ept> member of the <bpt id=\"p2\">[</bpt>LVITEM<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> structure, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This value is the **lParam** member of the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[128555,128562],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[128756,128829],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setitemindexstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetItemIndexState","linkify":"<a name=\"clistctrl__setitemindexstate\"></a>  CListCtrl::SetItemIndexState","source":"<a name=\"clistctrl__setitemindexstate\"></a>  CListCtrl::SetItemIndexState"},{"content":"Sets the state of an item in the current list-view control.","pos":[128833,128892]},{"pos":[129023,129033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[129040,129049]},{"content":"Description","pos":[129050,129061]},{"pos":[129104,129121],"content":"[in] <ph id=\"ph1\">`pItemIndex`</ph>","source":"[in] `pItemIndex`"},{"content":"Pointer to an <bpt id=\"p1\">[</bpt>LVITEMINDEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774762)</ept> structure that describes an item.","pos":[129122,129243],"source":"Pointer to an [LVITEMINDEX](http://msdn.microsoft.com/library/windows/desktop/bb774762) structure that describes an item."},{"content":"The caller is responsible for allocating this structure and setting its members.","pos":[129244,129324]},{"pos":[129329,129343],"content":"[in] <ph id=\"ph1\">`dwState`</ph>","source":"[in] `dwState`"},{"content":"The state to set the item, which is a bitwise combination of <bpt id=\"p1\">[</bpt>list view item states<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774733)</ept>.","pos":[129344,129489],"source":"The state to set the item, which is a bitwise combination of [list view item states](http://msdn.microsoft.com/library/windows/desktop/bb774733)."},{"content":"Specify zero to reset, or one to set, a state.","pos":[129490,129536]},{"pos":[129541,129554],"content":"[in] <ph id=\"ph1\">`dwMask`</ph>","source":"[in] `dwMask`"},{"content":"A mask of the valid bits of the state specified by the <ph id=\"ph1\">`dwState`</ph> parameter.","pos":[129555,129630],"source":"A mask of the valid bits of the state specified by the `dwState` parameter."},{"content":"Specify a bitwise combination (OR) of <bpt id=\"p1\">[</bpt>list view item states<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774733)</ept>.","pos":[129631,129753],"source":" Specify a bitwise combination (OR) of [list view item states](http://msdn.microsoft.com/library/windows/desktop/bb774733)."},{"pos":[129764,129776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[129780,129836],"content":"<ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method is successful; otherwise, `false`."},{"pos":[129846,129853],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[129857,129997],"content":"For more information about the <ph id=\"ph1\">`dwState`</ph> parameter, see <bpt id=\"p1\">[</bpt>List View Item States<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774733)</ept>.","source":"For more information about the `dwState` parameter, see [List View Item States](http://msdn.microsoft.com/library/windows/desktop/bb774733)."},{"pos":[130004,130168],"content":"For more information about the <ph id=\"ph1\">`dwMask`</ph> parameter, see the <ph id=\"ph2\">`stateMask`</ph> member of the <bpt id=\"p1\">[</bpt>LVITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> structure.","source":"For more information about the `dwMask` parameter, see the `stateMask` member of the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure."},{"pos":[130175,130360],"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_SETITEMINDEXSTATE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761190)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This method sends the [LVM_SETITEMINDEXSTATE](http://msdn.microsoft.com/library/windows/desktop/bb761190) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[130370,130439],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setitemposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetItemPosition","linkify":"<a name=\"clistctrl__setitemposition\"></a>  CListCtrl::SetItemPosition","source":"<a name=\"clistctrl__setitemposition\"></a>  CListCtrl::SetItemPosition"},{"content":"Moves an item to a specified position in a list view control.","pos":[130443,130504]},{"pos":[130583,130593],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the item whose position is to be set.","pos":[130608,130654]},{"content":"A <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure specifying the new position, in view coordinates, of the item's upper-left corner.","pos":[130669,130831],"source":" A [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure specifying the new position, in view coordinates, of the item's upper-left corner."},{"pos":[130841,130853],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[130857,130895]},{"pos":[130905,130912],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The control must be in icon or small icon view.","pos":[130916,130963]},{"pos":[130970,131092],"content":"If the list view control has the <ph id=\"ph1\">`LVS_AUTOARRANGE`</ph> style, the list view is arranged after the position of the item is set.","source":"If the list view control has the `LVS_AUTOARRANGE` style, the list view is arranged after the position of the item is set."},{"pos":[131102,131109],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[131114,131192],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetItemPosition<ept id=\"p1\">](#clistctrl__getitemposition)</ept>.","source":"See the example for [CListCtrl::GetItemPosition](#clistctrl__getitemposition)."},{"pos":[131202,131265],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setitemstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetItemState","linkify":"<a name=\"clistctrl__setitemstate\"></a>  CListCtrl::SetItemState","source":"<a name=\"clistctrl__setitemstate\"></a>  CListCtrl::SetItemState"},{"content":"Changes the state of an item in a list view control.","pos":[131269,131321]},{"pos":[131477,131487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the item whose state is to be set.","pos":[131502,131545]},{"content":"Address of an <bpt id=\"p1\">[</bpt>LVITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> structure, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[131563,131721],"source":" Address of an [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"The structure's <bpt id=\"p1\">**</bpt>stateMask<ept id=\"p1\">**</ept> member specifies which state bits to change, and the structure's <bpt id=\"p2\">**</bpt>state<ept id=\"p2\">**</ept> member contains the new values for those bits.","pos":[131722,131873],"source":" The structure's **stateMask** member specifies which state bits to change, and the structure's **state** member contains the new values for those bits."},{"content":"The other members are ignored.","pos":[131874,131904]},{"content":"New values for the state bits.","pos":[131923,131953]},{"content":"For a list of possible values, see <bpt id=\"p1\">[</bpt>CListCtrl::GetNextItem<ept id=\"p1\">](#clistctrl__getnextitem)</ept> and the <bpt id=\"p2\">[</bpt>LVITEM<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> state member.","pos":[131954,132129],"source":" For a list of possible values, see [CListCtrl::GetNextItem](#clistctrl__getnextitem) and the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) state member."},{"content":"Mask specifying which state bits to change.","pos":[132147,132190]},{"content":"This value corresponds to the stateMask member of  the <bpt id=\"p1\">[</bpt>LVITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> structure.","pos":[132191,132325],"source":" This value corresponds to the stateMask member of  the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure."},{"pos":[132335,132347],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[132351,132389]},{"pos":[132399,132406],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An item's \"state\" is a value that specifies the item's availability, indicates user actions, or otherwise reflects the item's status.","pos":[132410,132543]},{"content":"A list view control changes some state bits, such as when the user selects an item.","pos":[132544,132627]},{"content":"An application might change other state bits to disable or hide the item, or to specify an overlay image or state image.","pos":[132628,132748]},{"pos":[132758,132765],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[132770,132840],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetTopIndex<ept id=\"p1\">](#clistctrl__gettopindex)</ept>.","source":"See the example for [CListCtrl::GetTopIndex](#clistctrl__gettopindex)."},{"pos":[132850,132911],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setitemtext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetItemText","linkify":"<a name=\"clistctrl__setitemtext\"></a>  CListCtrl::SetItemText","source":"<a name=\"clistctrl__setitemtext\"></a>  CListCtrl::SetItemText"},{"content":"Changes the text of a list view item or subitem.","pos":[132915,132963]},{"pos":[133066,133076],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the item whose text is to be set.","pos":[133091,133133]},{"content":"Index of the subitem, or zero to set the item label.","pos":[133154,133206]},{"content":"Pointer to a string that contains the new item text.","pos":[133227,133279]},{"pos":[133289,133301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[133305,133343]},{"pos":[133353,133360],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is not intended for use with controls containing the LVS_OWNERDATA window style (in fact, this will cause an assertion in Debug builds).","pos":[133364,133512]},{"content":"For more information about this list control style, see <bpt id=\"p1\">[</bpt>List-View Controls Overview<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774735)</ept>.","pos":[133513,133659],"source":" For more information about this list control style, see [List-View Controls Overview](http://msdn.microsoft.com/library/windows/desktop/bb774735)."},{"pos":[133669,133676],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[133681,133749],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::InsertItem<ept id=\"p1\">](#clistctrl__insertitem)</ept>.","source":"See the example for [CListCtrl::InsertItem](#clistctrl__insertitem)."},{"pos":[133759,133828],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setoutlinecolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetOutlineColor","linkify":"<a name=\"clistctrl__setoutlinecolor\"></a>  CListCtrl::SetOutlineColor","source":"<a name=\"clistctrl__setoutlinecolor\"></a>  CListCtrl::SetOutlineColor"},{"pos":[133832,134002],"content":"Sets the color of the border of a list-view control if the <bpt id=\"p1\">[</bpt>LVS_EX_BORDERSELECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774739)</ept> extended window style is set.","source":"Sets the color of the border of a list-view control if the [LVS_EX_BORDERSELECT](http://msdn.microsoft.com/library/windows/desktop/bb774739) extended window style is set."},{"pos":[134069,134079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> structure containing the outline color.","pos":[134094,134212],"source":" The new [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) structure containing the outline color."},{"pos":[134222,134234],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[134238,134302],"content":"The previous <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> structure containing the outline color","source":"The previous **COLORREF** structure containing the outline color"},{"pos":[134312,134319],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[134323,134533],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_SETOUTLINECOLOR<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761200)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_SETOUTLINECOLOR](http://msdn.microsoft.com/library/windows/desktop/bb761200) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[134543,134616],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setselectedcolumn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetSelectedColumn","linkify":"<a name=\"clistctrl__setselectedcolumn\"></a>  CListCtrl::SetSelectedColumn","source":"<a name=\"clistctrl__setselectedcolumn\"></a>  CListCtrl::SetSelectedColumn"},{"content":"Sets the selected column of the list view control.","pos":[134620,134670]},{"pos":[134732,134742],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>iCol<ept id=\"p1\">*</ept>","pos":[134746,134752],"source":"*iCol*"},{"content":"The index of the column to be selected.","pos":[134756,134795]},{"pos":[134805,134817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The return value is not used.","pos":[134821,134850]},{"pos":[134860,134867],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[134871,135083],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_SETSELECTEDCOLUMN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761202)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_SETSELECTEDCOLUMN](http://msdn.microsoft.com/library/windows/desktop/bb761202) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[135093,135164],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setselectionmark\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetSelectionMark","linkify":"<a name=\"clistctrl__setselectionmark\"></a>  CListCtrl::SetSelectionMark","source":"<a name=\"clistctrl__setselectionmark\"></a>  CListCtrl::SetSelectionMark"},{"content":"Sets the selection mark of a list view control.","pos":[135168,135215]},{"pos":[135274,135284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The zero-based index of the first item in a multiple selection.","pos":[135300,135363]},{"pos":[135373,135385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The previous selection mark, or -1 if there was no selection mark.","pos":[135389,135455]},{"pos":[135465,135472],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[135476,135694],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_SetSelectionMark<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775112)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_SetSelectionMark](http://msdn.microsoft.com/library/windows/desktop/bb775112), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[135704,135711],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[135716,135796],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetSelectionMark<ept id=\"p1\">](#clistctrl__getselectionmark)</ept>.","source":"See the example for [CListCtrl::GetSelectionMark](#clistctrl__getselectionmark)."},{"pos":[135806,135873],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__settextbkcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetTextBkColor","linkify":"<a name=\"clistctrl__settextbkcolor\"></a>  CListCtrl::SetTextBkColor","source":"<a name=\"clistctrl__settextbkcolor\"></a>  CListCtrl::SetTextBkColor"},{"content":"Sets the background color of text in a list view control.","pos":[135877,135934]},{"pos":[135993,136003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> specifying the new text background color.","pos":[136015,136071],"source":" A **COLORREF** specifying the new text background color."},{"content":"For information, see <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[136072,136215],"source":" For information, see [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[136225,136237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[136241,136279]},{"pos":[136289,136296],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[136547,136610],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__settextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetTextColor","linkify":"<a name=\"clistctrl__settextcolor\"></a>  CListCtrl::SetTextColor","source":"<a name=\"clistctrl__settextcolor\"></a>  CListCtrl::SetTextColor"},{"content":"Sets the text color of a list view control.","pos":[136614,136657]},{"pos":[136714,136724],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">**</bpt>COLORREF<ept id=\"p1\">**</ept> specifying the new text color.","pos":[136736,136781],"source":" A **COLORREF** specifying the new text color."},{"content":"For information, see <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[136782,136925],"source":" For information, see [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[136935,136947],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[136951,136989]},{"pos":[136999,137006],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[137275,137336],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__settileinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetTileInfo","linkify":"<a name=\"clistctrl__settileinfo\"></a>  CListCtrl::SetTileInfo","source":"<a name=\"clistctrl__settileinfo\"></a>  CListCtrl::SetTileInfo"},{"content":"Sets the information for a tile of the list view control.","pos":[137340,137397]},{"pos":[137457,137467],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pti<ept id=\"p1\">*</ept>","pos":[137471,137476],"source":"*pti*"},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>LVTILEINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774766)</ept> structure containing the information to be set.","pos":[137480,137616],"source":" A pointer to an [LVTILEINFO](http://msdn.microsoft.com/library/windows/desktop/bb774766) structure containing the information to be set."},{"pos":[137626,137638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137642,137692],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[137702,137709],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[137713,137919],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_SETTILEINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761210)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_SETTILEINFO](http://msdn.microsoft.com/library/windows/desktop/bb761210) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[137929,137998],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__settileviewinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetTileViewInfo","linkify":"<a name=\"clistctrl__settileviewinfo\"></a>  CListCtrl::SetTileViewInfo","source":"<a name=\"clistctrl__settileviewinfo\"></a>  CListCtrl::SetTileViewInfo"},{"content":"Sets information that a list view control uses in tile view.","pos":[138002,138062]},{"pos":[138131,138141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>LVTILEVIEWINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774768)</ept> structure containing the information to set.","pos":[138155,138292],"source":" A pointer to an [LVTILEVIEWINFO](http://msdn.microsoft.com/library/windows/desktop/bb774768) structure containing the information to set."},{"pos":[138302,138314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138318,138368],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[138378,138385],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[138389,138599],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_SETTILEVIEWINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761212)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_SETTILEVIEWINFO](http://msdn.microsoft.com/library/windows/desktop/bb761212) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[138609,138670],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__settooltips\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetToolTips","linkify":"<a name=\"clistctrl__settooltips\"></a>  CListCtrl::SetToolTips","source":"<a name=\"clistctrl__settooltips\"></a>  CListCtrl::SetToolTips"},{"content":"Sets the tooltip control that the list view control will use to display tooltips.","pos":[138674,138755]},{"pos":[138830,138840],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <ph id=\"ph1\">`CToolTipCtrl`</ph> object that the list control will use.","pos":[138857,138925],"source":" A pointer to a `CToolTipCtrl` object that the list control will use."},{"pos":[138935,138947],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138951,139112],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CToolTipCtrl<ept id=\"p1\">](ctooltipctrl-class.md)</ept> object containing the tooltip previously used by the control, or <ph id=\"ph1\">`NULL`</ph> if no tooltips were used previously.","source":"A pointer to a [CToolTipCtrl](ctooltipctrl-class.md) object containing the tooltip previously used by the control, or `NULL` if no tooltips were used previously."},{"pos":[139122,139129],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[139133,139342],"content":"This member function implements the behavior of the Win32 message <bpt id=\"p1\">[</bpt>LVM_SETTOOLTIPS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761216)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 message [LVM_SETTOOLTIPS](http://msdn.microsoft.com/library/windows/desktop/bb761216), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[139349,139445],"content":"To not use tooltips, indicate the <ph id=\"ph1\">`LVS_NOTOOLTIPS`</ph> style when you create the <ph id=\"ph2\">`CListCtrl`</ph> object.","source":"To not use tooltips, indicate the `LVS_NOTOOLTIPS` style when you create the `CListCtrl` object."},{"pos":[139455,139508],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setview\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetView","linkify":"<a name=\"clistctrl__setview\"></a>  CListCtrl::SetView","source":"<a name=\"clistctrl__setview\"></a>  CListCtrl::SetView"},{"content":"Sets the view of the list view control.","pos":[139512,139551]},{"pos":[139602,139612],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>iView<ept id=\"p1\">*</ept>","pos":[139616,139623],"source":"*iView*"},{"content":"The view to be selected.","pos":[139627,139651]},{"pos":[139661,139673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns 1 if successful, or -1 otherwise.","pos":[139677,139718]},{"content":"For example, -1 is returned if the view is invalid.","pos":[139719,139770]},{"pos":[139780,139787],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[139791,139993],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_SETVIEW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761220)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_SETVIEW](http://msdn.microsoft.com/library/windows/desktop/bb761220) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[140003,140066],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__setworkareas\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SetWorkAreas","linkify":"<a name=\"clistctrl__setworkareas\"></a>  CListCtrl::SetWorkAreas","source":"<a name=\"clistctrl__setworkareas\"></a>  CListCtrl::SetWorkAreas"},{"content":"Sets the area where icons can be displayed in a list view control.","pos":[140070,140136]},{"pos":[140222,140232],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of <ph id=\"ph1\">`RECT`</ph> structures (or <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> objects) in the array pointed to by <ph id=\"ph2\">`lpRect`</ph>.","pos":[140252,140388],"source":" The number of `RECT` structures (or [CRect](../../atl-mfc-shared/reference/crect-class.md) objects) in the array pointed to by `lpRect`."},{"content":"The address of an array of <ph id=\"ph1\">`RECT`</ph> structures (or <ph id=\"ph2\">`CRect`</ph> objects) that specify the new work areas of the list view control.","pos":[140407,140530],"source":" The address of an array of `RECT` structures (or `CRect` objects) that specify the new work areas of the list view control."},{"content":"These areas must be specified in client coordinates.","pos":[140531,140583]},{"content":"If this parameter is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the working area will be set to the client area of the control.","pos":[140584,140678],"source":" If this parameter is **NULL**, the working area will be set to the client area of the control."},{"pos":[140688,140695],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[140699,140913],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_SetWorkAreas<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775128)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_SetWorkAreas](http://msdn.microsoft.com/library/windows/desktop/bb775128), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[140923,140930],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[141028,141087],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__sortgroups\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SortGroups","linkify":"<a name=\"clistctrl__sortgroups\"></a>  CListCtrl::SortGroups","source":"<a name=\"clistctrl__sortgroups\"></a>  CListCtrl::SortGroups"},{"content":"Uses an application-defined comparison function to sort groups by ID within a list view control.","pos":[141091,141187]},{"pos":[141289,141299],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the group comparison function.","pos":[141325,141368]},{"content":"A void pointer.","pos":[141385,141400]},{"pos":[141410,141422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141426,141472],"content":"Returns <ph id=\"ph1\">`true`</ph> on success, <ph id=\"ph2\">`false`</ph> on failure.","source":"Returns `true` on success, `false` on failure."},{"pos":[141482,141489],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[141493,141698],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>LVM_SORTGROUPS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761225)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [LVM_SORTGROUPS](http://msdn.microsoft.com/library/windows/desktop/bb761225) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[141708,141765],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__sortitems\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SortItems","linkify":"<a name=\"clistctrl__sortitems\"></a>  CListCtrl::SortItems","source":"<a name=\"clistctrl__sortitems\"></a>  CListCtrl::SortItems"},{"content":"Sorts list view items by using an application-defined comparison function.","pos":[141769,141843]},{"pos":[141938,141948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pfnCompare`</ph>","pos":[141952,141969],"source":"[in] `pfnCompare`"},{"content":"Address of the application-defined comparison function.","pos":[141973,142028]},{"content":"The sort operation calls the comparison function each time the relative order of two list items needs to be determined.","pos":[142035,142154]},{"content":"The comparison function must be either a static member of a class or a stand-alone function that is not a member of any class.","pos":[142155,142281]},{"content":"[in] <ph id=\"ph1\">`dwData`</ph>","pos":[142288,142301],"source":"[in] `dwData`"},{"content":"Application-defined value that is passed to the comparison function.","pos":[142305,142373]},{"pos":[142383,142395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[142399,142450],"content":"<ph id=\"ph1\">`true`</ph> if the method successful; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the method successful; otherwise `false`."},{"pos":[142460,142467],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method changes the index of each item to reflect the new sequence.","pos":[142471,142542]},{"pos":[142549,142611],"content":"The comparison function, <ph id=\"ph1\">`pfnCompare`</ph>, has the following form:","source":"The comparison function, `pfnCompare`, has the following form:"},{"content":"The comparison function must return a negative value if the first item should precede the second, a positive value if the first item should follow the second, or zero if the two items are equal.","pos":[142718,142912]},{"content":"The <ph id=\"ph1\">`lParam1`</ph> parameter is the 32-bit value associated with the first item that is compared, and the <ph id=\"ph2\">`lParam2`</ph> parameter is the value associated with the second item.","pos":[142919,143085],"source":"The `lParam1` parameter is the 32-bit value associated with the first item that is compared, and the `lParam2` parameter is the value associated with the second item."},{"content":"These are the values that were specified in the <ph id=\"ph1\">`lParam`</ph> member of the items' <bpt id=\"p1\">[</bpt>LVITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774760)</ept> structure when they were inserted into the list.","pos":[143086,143281],"source":" These are the values that were specified in the `lParam` member of the items' [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure when they were inserted into the list."},{"content":"The <ph id=\"ph1\">`lParamSort`</ph> parameter is the same as the <ph id=\"ph2\">`dwData`</ph> value.","pos":[143282,143343],"source":" The `lParamSort` parameter is the same as the `dwData` value."},{"pos":[143350,143527],"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_SORTITEMS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761227)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This method sends the [LVM_SORTITEMS](http://msdn.microsoft.com/library/windows/desktop/bb761227) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[143537,143544],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[143548,143654],"content":"The following is a simple comparison function that results in items being sorted by their <ph id=\"ph1\">`lParam`</ph> values.","source":"The following is a simple comparison function that results in items being sorted by their `lParam` values."},{"pos":[144054,144115],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__sortitemsex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SortItemsEx","linkify":"<a name=\"clistctrl__sortitemsex\"></a>  CListCtrl::SortItemsEx","source":"<a name=\"clistctrl__sortitemsex\"></a>  CListCtrl::SortItemsEx"},{"content":"Sorts the items of the current list-view control by using an application-defined comparison function.","pos":[144119,144220]},{"pos":[144318,144328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[144335,144344]},{"content":"Description","pos":[144345,144356]},{"pos":[144399,144416],"content":"[in] <ph id=\"ph1\">`pfnCompare`</ph>","source":"[in] `pfnCompare`"},{"content":"Address of the application-defined comparison function.","pos":[144417,144472]},{"content":"The sort operation calls the comparison function each time the relative order of two list items needs to be determined.","pos":[144485,144604]},{"content":"The comparison function must be either a static member of a class or a stand-alone function that is not a member of any class.","pos":[144605,144731]},{"pos":[144736,144749],"content":"[in] <ph id=\"ph1\">`dwData`</ph>","source":"[in] `dwData`"},{"content":"Application-defined value passed to the comparison function.","pos":[144750,144810]},{"pos":[144821,144833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[144837,144893],"content":"<ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method is successful; otherwise, `false`."},{"pos":[144903,144910],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method changes the index of each item to reflect the new sequence.","pos":[144914,144985]},{"pos":[144992,145054],"content":"The comparison function, <ph id=\"ph1\">`pfnCompare`</ph>, has the following form:","source":"The comparison function, `pfnCompare`, has the following form:"},{"content":"This message is like <bpt id=\"p1\">[</bpt>LVM_SORTITEMS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761227)</ept>, except for the type of information passed to the comparison function.","pos":[145161,145328],"source":"This message is like [LVM_SORTITEMS](http://msdn.microsoft.com/library/windows/desktop/bb761227), except for the type of information passed to the comparison function."},{"content":"In <bpt id=\"p1\">[</bpt>LVM_SORTITEMS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761227)</ept>, <ph id=\"ph1\">`lParam1`</ph> and <ph id=\"ph2\">`lParam2`</ph> are the values of the items to compare.","pos":[145329,145472],"source":" In [LVM_SORTITEMS](http://msdn.microsoft.com/library/windows/desktop/bb761227), `lParam1` and `lParam2` are the values of the items to compare."},{"content":"In <bpt id=\"p1\">[</bpt>LVM_SORTITEMSEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761228)</ept>, <ph id=\"ph1\">`lParam1`</ph> is the current index of the first item to compare and <ph id=\"ph2\">`lParam2`</ph> is the current index of the second item.","pos":[145473,145669],"source":" In [LVM_SORTITEMSEX](http://msdn.microsoft.com/library/windows/desktop/bb761228), `lParam1` is the current index of the first item to compare and `lParam2` is the current index of the second item."},{"content":"You can send an <bpt id=\"p1\">[</bpt>LVM_GETITEMTEXT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761055)</ept> message to retrieve more information about an item.","pos":[145670,145815],"source":" You can send an [LVM_GETITEMTEXT](http://msdn.microsoft.com/library/windows/desktop/bb761055) message to retrieve more information about an item."},{"content":"The comparison function must return a negative value if the first item should precede the second, a positive value if the first item should follow the second, or zero if the two items are equal.","pos":[145822,146016]},{"pos":[146024,146285],"content":"[!NOTE]\n During the sorting process, the list-view contents are unstable. If the callback function sends any messages to the list-view control other than [LVM_GETITEM](http://msdn.microsoft.com/library/windows/desktop/bb774953), the results are unpredictable.","leadings":["","> "],"nodes":[{"content":" During the sorting process, the list-view contents are unstable. If the callback function sends any messages to the list-view control other than [LVM_GETITEM](http://msdn.microsoft.com/library/windows/desktop/bb774953), the results are unpredictable.","pos":[8,259],"nodes":[{"content":"During the sorting process, the list-view contents are unstable.","pos":[1,65]},{"content":"If the callback function sends any messages to the list-view control other than <bpt id=\"p1\">[</bpt>LVM_GETITEM<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774953)</ept>, the results are unpredictable.","pos":[66,251],"source":" If the callback function sends any messages to the list-view control other than [LVM_GETITEM](http://msdn.microsoft.com/library/windows/desktop/bb774953), the results are unpredictable."}]}]},{"pos":[146292,146471],"content":"This method sends the <bpt id=\"p1\">[</bpt>LVM_SORTITEMSEX<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb761228)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This method sends the [LVM_SORTITEMSEX](http://msdn.microsoft.com/library/windows/desktop/bb761228) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[146481,146488],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines a variable, <ph id=\"ph1\">`m_listCtrl`</ph>, that is used to access the current list-view control.","pos":[146492,146606],"source":"The following code example defines a variable, `m_listCtrl`, that is used to access the current list-view control."},{"content":"This variable is used in the next example.","pos":[146607,146649]},{"pos":[146758,146765],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example demonstrates the <ph id=\"ph1\">`SortItemEx`</ph> method.","pos":[146769,146833],"source":"The following code example demonstrates the `SortItemEx` method."},{"content":"In an earlier section of this code example, we created a list-view control that displays two columns titled \"ClientID\" and \"Grade\" in a report view.","pos":[146834,146982]},{"content":"The following code example sorts the table by using the values in the \"Grade\" column.","pos":[146983,147068]},{"pos":[147940,148007],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__subitemhittest\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::SubItemHitTest","linkify":"<a name=\"clistctrl__subitemhittest\"></a>  CListCtrl::SubItemHitTest","source":"<a name=\"clistctrl__subitemhittest\"></a>  CListCtrl::SubItemHitTest"},{"content":"Determines which list view item, if any, is at a given position.","pos":[148011,148075]},{"pos":[148143,148153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>LVHITTESTINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774754)</ept> structure.","pos":[148168,148271],"source":" A pointer to the [LVHITTESTINFO](http://msdn.microsoft.com/library/windows/desktop/bb774754) structure."},{"pos":[148281,148293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The one-based index of the item, or subitem, being tested (if any), or -1 otherwise.","pos":[148297,148381]},{"pos":[148391,148398],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[148402,148618],"content":"This member function implements the behavior of the Win32 macro, <bpt id=\"p1\">[</bpt>ListView_SubItemHitTest<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775135)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 macro, [ListView_SubItemHitTest](http://msdn.microsoft.com/library/windows/desktop/bb775135), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[148628,148635],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[149084,149135],"content":"<bpt id=\"p1\">&lt;a name=\"clistctrl__update\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CListCtrl::Update","linkify":"<a name=\"clistctrl__update\"></a>  CListCtrl::Update","source":"<a name=\"clistctrl__update\"></a>  CListCtrl::Update"},{"pos":[149139,149209],"content":"Forces the list view control to repaint the item specified by <ph id=\"ph1\">`nItem`</ph>.","source":"Forces the list view control to repaint the item specified by `nItem`."},{"pos":[149258,149268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index of the item to be updated.","pos":[149283,149315]},{"pos":[149325,149337],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[149341,149379]},{"pos":[149389,149396],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[149400,149488],"content":"This function also arranges the list view control if it has the <ph id=\"ph1\">`LVS_AUTOARRANGE`</ph> style.","source":"This function also arranges the list view control if it has the `LVS_AUTOARRANGE` style."},{"pos":[149498,149505],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[149510,149590],"content":"See the example for <bpt id=\"p1\">[</bpt>CListCtrl::GetSelectedCount<ept id=\"p1\">](#clistctrl__getselectedcount)</ept>.","source":"See the example for [CListCtrl::GetSelectedCount](#clistctrl__getselectedcount)."},{"pos":[149599,149607],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample ROWLIST<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[149611,149661],"source":"[MFC Sample ROWLIST](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWnd Class<ept id=\"p1\">](cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[149664,149693],"source":" [CWnd Class](cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[149696,149738],"source":" [Hierarchy Chart](../hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CImageList Class<ept id=\"p1\">](cimagelist-class.md)</ept>","pos":[149741,149781],"source":" [CImageList Class](cimagelist-class.md)"}],"content":"---\ntitle: \"CListCtrl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CListCtrl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CListCtrl class\"\n  - \"LVS_REPORT\"\n  - \"LVS_LIST\"\n  - \"LVS_ICON\"\n  - \"list view controls\"\n  - \"list view controls, CListCtrl class\"\n  - \"Windows common controls [C++], CListCtrl\"\n  - \"LVS_SMALLICON\"\nms.assetid: fe08a1ca-4b05-4ff7-a12a-ee4c765a2197\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CListCtrl Class\nEncapsulates the functionality of a \"list view control,\" which displays a collection of items each consisting of an icon (from an image list) and a label.  \n  \n## Syntax  \n  \n```  \nclass CListCtrl : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CListCtrl::CListCtrl](#clistctrl__clistctrl)|Constructs a `CListCtrl` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CListCtrl::ApproximateViewRect](#clistctrl__approximateviewrect)|Determines the width and height required to display the items of a list view control.|  \n|[CListCtrl::Arrange](#clistctrl__arrange)|Aligns items on a grid.|  \n|[CListCtrl::CancelEditLabel](#clistctrl__canceleditlabel)|Cancels item text editing operation.|  \n|[CListCtrl::Create](#clistctrl__create)|Creates a list control and attaches it to a `CListCtrl` object.|  \n|[CListCtrl::CreateDragImage](#clistctrl__createdragimage)|Creates a drag image list for a specified item.|  \n|[CListCtrl::CreateEx](#clistctrl__createex)|Creates a list control with the specified Windows extended styles and attaches it to a `CListCtrl` object.|  \n|[CListCtrl::DeleteAllItems](#clistctrl__deleteallitems)|Deletes all items from the control.|  \n|[CListCtrl::DeleteColumn](#clistctrl__deletecolumn)|Deletes a column from the list view control.|  \n|[CListCtrl::DeleteItem](#clistctrl__deleteitem)|Deletes an item from the control.|  \n|[CListCtrl::DrawItem](#clistctrl__drawitem)|Called when a visual aspect of an owner-draw control changes.|  \n|[CListCtrl::EditLabel](#clistctrl__editlabel)|Begins in-place editing of an item's text.|  \n|[CListCtrl::EnableGroupView](#clistctrl__enablegroupview)|Enables or disables whether the items in a list view control display as a group.|  \n|[CListCtrl::EnsureVisible](#clistctrl__ensurevisible)|Ensures that an item is visible.|  \n|[CListCtrl::FindItem](#clistctrl__finditem)|Searches for a list view item having specified characteristics.|  \n|[CListCtrl::GetBkColor](#clistctrl__getbkcolor)|Retrieves the background color of a list view control.|  \n|[CListCtrl::GetBkImage](#clistctrl__getbkimage)|Retrieves the current background image of a list view control.|  \n|[CListCtrl::GetCallbackMask](#clistctrl__getcallbackmask)|Retrieves the callback mask for a list view control.|  \n|[CListCtrl::GetCheck](#clistctrl__getcheck)|Retrieves the current display status of the state image associated with an item.|  \n|[CListCtrl::GetColumn](#clistctrl__getcolumn)|Retrieves the attributes of a control's column.|  \n|[CListCtrl::GetColumnOrderArray](#clistctrl__getcolumnorderarray)|Retrieves the column order (left to right) of a list view control.|  \n|[CListCtrl::GetColumnWidth](#clistctrl__getcolumnwidth)|Retrieves the width of a column in report view or list view.|  \n|[CListCtrl::GetCountPerPage](#clistctrl__getcountperpage)|Calculates the number of items that can fit vertically in a list view control.|  \n|[CListCtrl::GetEditControl](#clistctrl__geteditcontrol)|Retrieves the handle of the edit control used to edit an item's text.|  \n|[CListCtrl::GetEmptyText](#clistctrl__getemptytext)|Retrieves the string to display if the current list-view control is empty.|  \n|[CListCtrl::GetExtendedStyle](#clistctrl__getextendedstyle)|Retrieves the current extended styles of a list view control.|  \n|[CListCtrl::GetFirstSelectedItemPosition](#clistctrl__getfirstselecteditemposition)|Retrieves the position of the first selected list view item in a list view control.|  \n|[CListCtrl::GetFocusedGroup](#clistctrl__getfocusedgroup)|Retrieves the group that has the keyboard focus in the current list-view control.|  \n|[CListCtrl::GetGroupCount](#clistctrl__getgroupcount)|Retrieves the number of groups in the current list-view control.|  \n|[CListCtrl::GetGroupInfo](#clistctrl__getgroupinfo)|Gets the information for a specified group of the list view control.|  \n|[CListCtrl::GetGroupInfoByIndex](#clistctrl__getgroupinfobyindex)|Retrieves information about a specified group in the current list-view control.|  \n|[CListCtrl::GetGroupMetrics](#clistctrl__getgroupmetrics)|Retrieves the metrics of a group.|  \n|[CListCtrl::GetGroupRect](#clistctrl__getgrouprect)|Retrieves the bounding rectangle for a specified group in the current list-view control.|  \n|[CListCtrl::GetGroupState](#clistctrl__getgroupstate)|Retrieves the state for a specified group in the current list-view control.|  \n|[CListCtrl::GetHeaderCtrl](#clistctrl__getheaderctrl)|Retrieves the header control of a list view control.|  \n|[CListCtrl::GetHotCursor](#clistctrl__gethotcursor)|Retrieves the cursor used when hot tracking is enabled for a list view control.|  \n|[CListCtrl::GetHotItem](#clistctrl__gethotitem)|Retrieves the list view item currently under the cursor.|  \n|[CListCtrl::GetHoverTime](#clistctrl__gethovertime)|Retrieves the current hover time of a list view control.|  \n|[CListCtrl::GetImageList](#clistctrl__getimagelist)|Retrieves the handle of an image list used for drawing list view items.|  \n|[CListCtrl::GetInsertMark](#clistctrl__getinsertmark)|Retrieves the current position of the insertion mark.|  \n|[CListCtrl::GetInsertMarkColor](#clistctrl__getinsertmarkcolor)|Retrieves the current color of the insertion mark.|  \n|[CListCtrl::GetInsertMarkRect](#clistctrl__getinsertmarkrect)|Retrieves the rectangle that bounds the insertion point.|  \n|[CListCtrl::GetItem](#clistctrl__getitem)|Retrieves a list view item's attributes.|  \n|[CListCtrl::GetItemCount](#clistctrl__getitemcount)|Retrieves the number of items in a list view control.|  \n|[CListCtrl::GetItemData](#clistctrl__getitemdata)|Retrieves the application-specific value associated with an item.|  \n|[CListCtrl::GetItemIndexRect](#clistctrl__getitemindexrect)|Retrieves the bounding rectangle for all or part of a subitem in the current list-view control.|  \n|[CListCtrl::GetItemPosition](#clistctrl__getitemposition)|Retrieves the position of a list view item.|  \n|[CListCtrl::GetItemRect](#clistctrl__getitemrect)|Retrieves the bounding rectangle for an item.|  \n|[CListCtrl::GetItemSpacing](#clistctrl__getitemspacing)|Calculates the spacing between items in the current list-view control.|  \n|[CListCtrl::GetItemState](#clistctrl__getitemstate)|Retrieves the state of a list view item.|  \n|[CListCtrl::GetItemText](#clistctrl__getitemtext)|Retrieves the text of a list view item or subitem.|  \n|[CListCtrl::GetNextItem](#clistctrl__getnextitem)|Searches for a list view item with specified properties and with specified relationship to a given item.|  \n|[CListCtrl::GetNextItemIndex](#clistctrl__getnextitemindex)|Retrieves the index of the item in the current list-view control that has a specified set of properties.|  \n|[CListCtrl::GetNextSelectedItem](#clistctrl__getnextselecteditem)|Retrieves the index of a list view item position, and the position of the next selected list view item for iterating.|  \n|[CListCtrl::GetNumberOfWorkAreas](#clistctrl__getnumberofworkareas)|Retrieves the current number of working areas for a list view control.|  \n|[CListCtrl::GetOrigin](#clistctrl__getorigin)|Retrieves the current view origin for a list view control.|  \n|[CListCtrl::GetOutlineColor](#clistctrl__getoutlinecolor)|Retrieves the color of the border of a list view control.|  \n|[CListCtrl::GetSelectedColumn](#clistctrl__getselectedcolumn)|Retrieves the index of the currently selected column in the list control.|  \n|[CListCtrl::GetSelectedCount](#clistctrl__getselectedcount)|Retrieves the number of selected items in the list view control.|  \n|[CListCtrl::GetSelectionMark](#clistctrl__getselectionmark)|Retrieves the selection mark of a list view control.|  \n|[CListCtrl::GetStringWidth](#clistctrl__getstringwidth)|Determines the minimum column width necessary to display all of a given string.|  \n|[CListCtrl::GetSubItemRect](#clistctrl__getsubitemrect)|Retrieves the bounding rectangle of an item in a list view control.|  \n|[CListCtrl::GetTextBkColor](#clistctrl__gettextbkcolor)|Retrieves the text background color of a list view control.|  \n|[CListCtrl::GetTextColor](#clistctrl__gettextcolor)|Retrieves the text color of a list view control.|  \n|[CListCtrl::GetTileInfo](#clistctrl__gettileinfo)|Retrieves information about a tile in a list view control.|  \n|[CListCtrl::GetTileViewInfo](#clistctrl__gettileviewinfo)|Retrieves information about a list view control in tile view.|  \n|[CListCtrl::GetToolTips](#clistctrl__gettooltips)|Retrieves the tooltip control that the list view control uses to display tooltips.|  \n|[CListCtrl::GetTopIndex](#clistctrl__gettopindex)|Retrieves the index of the topmost visible item.|  \n|[CListCtrl::GetView](#clistctrl__getview)|Gets the view of the list view control.|  \n|[CListCtrl::GetViewRect](#clistctrl__getviewrect)|Retrieves the bounding rectangle of all items in the list view control.|  \n|[CListCtrl::GetWorkAreas](#clistctrl__getworkareas)|Retrieves the current working areas of a list view control.|  \n|[CListCtrl::HasGroup](#clistctrl__hasgroup)|Determines if the list view control has the specified group.|  \n|[CListCtrl::HitTest](#clistctrl__hittest)|Determines which list view item is at a specified position.|  \n|[CListCtrl::InsertColumn](#clistctrl__insertcolumn)|Inserts a new column in a list view control.|  \n|[CListCtrl::InsertGroup](#clistctrl__insertgroup)|Inserts a group into the list view control.|  \n|[CListCtrl::InsertGroupSorted](#clistctrl__insertgroupsorted)|Inserts the specified group into an ordered list of groups.|  \n|[CListCtrl::InsertItem](#clistctrl__insertitem)|Inserts a new item in a list view control.|  \n|[CListCtrl::InsertMarkHitTest](#clistctrl__insertmarkhittest)|Retrieves the insertion point closest to a specified point.|  \n|[CListCtrl::IsGroupViewEnabled](#clistctrl__isgroupviewenabled)|Determines whether group view is enabled for a list view control.|  \n|[CListCtrl::IsItemVisible](#clistctrl__isitemvisible)|Indicates whether a specified item in the current list-view control is visible.|  \n|[CListCtrl::MapIDToIndex](#clistctrl__mapidtoindex)|Maps the unique ID of an item in the current list-view control to an index.|  \n|[CListCtrl::MapIndexToID](#clistctrl__mapindextoid)|Maps the index of an item in the current list-view control to a unique ID.|  \n|[CListCtrl::MoveGroup](#clistctrl__movegroup)|Moves the specified group.|  \n|[CListCtrl::MoveItemToGroup](#clistctrl__moveitemtogroup)|Moves the specified group to the specified zero based index of the list view control.|  \n|[CListCtrl::RedrawItems](#clistctrl__redrawitems)|Forces a list view control to repaint a range of items.|  \n|[CListCtrl::RemoveAllGroups](#clistctrl__removeallgroups)|Removes all groups from a list view control.|  \n|[CListCtrl::RemoveGroup](#clistctrl__removegroup)|Removes the specified group from the list view control.|  \n|[CListCtrl::Scroll](#clistctrl__scroll)|Scrolls the content of a list view control.|  \n|[CListCtrl::SetBkColor](#clistctrl__setbkcolor)|Sets the background color of the list view control.|  \n|[CListCtrl::SetBkImage](#clistctrl__setbkimage)|Sets the current background image of a list view control.|  \n|[CListCtrl::SetCallbackMask](#clistctrl__setcallbackmask)|Sets the callback mask for a list view control.|  \n|[CListCtrl::SetCheck](#clistctrl__setcheck)|Sets the current display status of the state image associated with an item.|  \n|[CListCtrl::SetColumn](#clistctrl__setcolumn)|Sets the attributes of a list view column.|  \n|[CListCtrl::SetColumnOrderArray](#clistctrl__setcolumnorderarray)|Sets the column order (left to right) of a list view control.|  \n|[CListCtrl::SetColumnWidth](#clistctrl__setcolumnwidth)|Changes the width of a column in report view or list view.|  \n|[CListCtrl::SetExtendedStyle](#clistctrl__setextendedstyle)|Sets the current extended styles of a list view control.|  \n|[CListCtrl::SetGroupInfo](#clistctrl__setgroupinfo)|Sets the information for the specified group of a list view control.|  \n|[CListCtrl::SetGroupMetrics](#clistctrl__setgroupmetrics)|Sets the group metrics of a list view control.|  \n|[CListCtrl::SetHotCursor](#clistctrl__sethotcursor)|Sets the cursor used when hot tracking is enabled for a list view control.|  \n|[CListCtrl::SetHotItem](#clistctrl__sethotitem)|Sets the current hot item of a list view control.|  \n|[CListCtrl::SetHoverTime](#clistctrl__sethovertime)|Sets the current hover time of a list view control.|  \n|[CListCtrl::SetIconSpacing](#clistctrl__seticonspacing)|Sets the spacing between icons in a list view control.|  \n|[CListCtrl::SetImageList](#clistctrl__setimagelist)|Assigns an image list to a list view control.|  \n|[CListCtrl::SetInfoTip](#clistctrl__setinfotip)|Sets the tooltip text.|  \n|[CListCtrl::SetInsertMark](#clistctrl__setinsertmark)|Sets the insertion point to the defined position.|  \n|[CListCtrl::SetInsertMarkColor](#clistctrl__setinsertmarkcolor)|Sets the color of the insertion point.|  \n|[CListCtrl::SetItem](#clistctrl__setitem)|Sets some or all of a list view item's attributes.|  \n|[CListCtrl::SetItemCount](#clistctrl__setitemcount)|Prepares a list view control for adding a large number of items.|  \n|[CListCtrl::SetItemCountEx](#clistctrl__setitemcountex)|Sets the item count for a virtual list view control.|  \n|[CListCtrl::SetItemData](#clistctrl__setitemdata)|Sets the item's application-specific value.|  \n|[CListCtrl::SetItemIndexState](#clistctrl__setitemindexstate)|Sets the state of an item in the current list-view control.|  \n|[CListCtrl::SetItemPosition](#clistctrl__setitemposition)|Moves an item to a specified position in a list view control.|  \n|[CListCtrl::SetItemState](#clistctrl__setitemstate)|Changes the state of an item in a list view control.|  \n|[CListCtrl::SetItemText](#clistctrl__setitemtext)|Changes the text of a list view item or subitem.|  \n|[CListCtrl::SetOutlineColor](#clistctrl__setoutlinecolor)|Sets the color of the border of a list view control.|  \n|[CListCtrl::SetSelectedColumn](#clistctrl__setselectedcolumn)|Sets the selected column of the list view control.|  \n|[CListCtrl::SetSelectionMark](#clistctrl__setselectionmark)|Sets the selection mark of a list view control.|  \n|[CListCtrl::SetTextBkColor](#clistctrl__settextbkcolor)|Sets the background color of text in a list view control.|  \n|[CListCtrl::SetTextColor](#clistctrl__settextcolor)|Sets the text color of a list view control.|  \n|[CListCtrl::SetTileInfo](#clistctrl__settileinfo)|Sets the information for a tile of the list view control.|  \n|[CListCtrl::SetTileViewInfo](#clistctrl__settileviewinfo)|Sets information that a list view control uses in tile view.|  \n|[CListCtrl::SetToolTips](#clistctrl__settooltips)|Sets the tooltip control that the list view control will use to display tooltips.|  \n|[CListCtrl::SetView](#clistctrl__setview)|Sets the view of the list view control.|  \n|[CListCtrl::SetWorkAreas](#clistctrl__setworkareas)|Sets the area where icons can be displayed in a list view control.|  \n|[CListCtrl::SortGroups](#clistctrl__sortgroups)|Sorts the groups of a list view control with a user-defined function.|  \n|[CListCtrl::SortItems](#clistctrl__sortitems)|Sorts list view items using an application-defined comparison function.|  \n|[CListCtrl::SortItemsEx](#clistctrl__sortitemsex)|Sorts list view items using an application-defined comparison function.|  \n|[CListCtrl::SubItemHitTest](#clistctrl__subitemhittest)|Determines which list view item, if any, is at a given position.|  \n|[CListCtrl::Update](#clistctrl__update)|Forces the control to repaint a specified item.|  \n  \n## Remarks  \n In addition to an icon and label, each item can have information displayed in columns to the right of the icon and label. This control (and therefore the `CListCtrl` class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later.  \n  \n The following is a brief overview of the `CListCtrl` class. For a detailed, conceptual discussion, see [Using CListCtrl](../../mfc/using-clistctrl.md) and [Controls](../../mfc/controls-mfc.md).  \n  \n## Views  \n List view controls can display their contents in four different ways, called \"views.\"  \n  \n-   Icon view  \n  \n     Each item appears as a full-sized icon (32 x 32 pixels) with a label below it. The user can drag the items to any location in the list view window.  \n  \n-   Small icon view  \n  \n     Each item appears as a small icon (16 x 16 pixels) with the label to the right of it. The user can drag the items to any location in the list view window.  \n  \n-   List view  \n  \n     Each item appears as a small icon with a label to the right of it. Items are arranged in columns and cannot be dragged to any location in the list view window.  \n  \n-   Report view  \n  \n     Each item appears on its own line, with additional information arranged in columns to the right. The leftmost column contains the small icon and label, and subsequent columns contain subitems as specified by the application. An embedded header control (class [CHeaderCtrl](../../mfc/reference/cheaderctrl-class.md)) implements these columns. For more information on the header control and columns in a report view, see [Using CListCtrl: Adding Columns to the Control (Report View)](../../mfc/adding-columns-to-the-control-report-view.md).  \n  \n Also see:  \n  \n-   Knowledge Base article Q250614: HOWTO: Sort Items in a CListCtrl in Report View  \n  \n-   Knowledge Base article Q200054: PRB: OnTimer() Is Not Called Repeatedly for a List Control  \n  \n The style of the control's current list view determines the current view. For more information on these styles and their usage, see [Using CListCtrl: Changing List Control Styles](../../mfc/changing-list-control-styles.md).  \n  \n## Extended Styles  \n In addition to the standard list styles, class `CListCtrl` supports a large set of extended styles, providing enriched functionality. Some examples of this functionality include:  \n  \n-   Hover selection  \n  \n     When enabled, allows automatic selection of an item when the cursor remains over the item for a certain period of time.  \n  \n-   Virtual list views  \n  \n     When enabled, allows the control to support up to `DWORD` items. This is possible by placing the overhead of managing item data on the application. Except for the item selection and focus information, all item information must be managed by the application. For more information, see [Using CListCtrl: Virtual List Controls](../../mfc/virtual-list-controls.md).  \n  \n-   One– and two– click activation  \n  \n     When enabled, allows hot tracking (automatic highlighting of the item text) and one– or two– click activation of the highlighted item.  \n  \n-   Drag and drop column ordering  \n  \n     When enabled, allows drag-and-drop reordering of columns in a list view control. Only available in report view.  \n  \n For information on using these new extended styles, see [Using CListCtrl: Changing List Control Styles](../../mfc/changing-list-control-styles.md).  \n  \n## Items and Subitems  \n Each item in a list view control consists of an icon (from an image list), a label, a current state, and an application-defined value (referred to as \"item data\"). One or more subitems can also be associated with each item. A \"subitem\" is a string that, in report view, can be displayed in a column to the right of an item's icon and label. All items in a list view control must have the same number of subitems.  \n  \n Class **CListCtrl** provides several functions for inserting, deleting, finding, and modifying these items. For more information, see [CListCtrl::GetItem](#clistctrl__getitem), [CListCtrl::InsertItem](#clistctrl__insertitem), and [CListCtrl::FindItem](#clistctrl__finditem), [Adding Items to the Control](../adding-items-to-the-control.md), and [Scrolling, Arranging, Sorting, and Finding in list controls](../scrolling-arranging-sorting-and-finding-in-list-controls.md).  \n  \n By default, the list view control is responsible for storing an item's icon and text attributes. However, in addition to these item types, class `CListCtrl` supports \"callback items.\" A \"callback item\" is a list view item for which the application — rather than the control — stores the text, icon, or both. A callback mask is used to specify which item attributes (text and/or icon) are supplied by the application. If an application uses callback items, it must be able to supply the text and/or icon attributes on demand. Callback items are helpful when your application already maintains some of this information. For more information, see [Using CListCtrl: Callback Items and the Callback Mask](../callback-items-and-the-callback-mask.md).  \n  \n## Image Lists  \n The icons, header item images, and application– defined states for list view items are contained in several image lists (implemented by class [CImageList](cimagelist-class.md)), which you create and assign to the list view control. Each list view control can have up to four different types of image lists:  \n  \n-   Large icon  \n  \n     Used in the icon view for full-sized icons.  \n  \n-   Small icon  \n  \n     Used in the small icon, list, and report views for smaller versions of the icons used in the icon view.  \n  \n-   Application-defined state  \n  \n     Contains state images, which are displayed next to an item's icon to indicate an application-defined state.  \n  \n-   Header item  \n  \n     Used in the report view for small images that appear in each header control item.  \n  \n By default, a list view control destroys the image lists assigned to it when it is destroyed; however, the developer can customize this behavior by destroying each image list when it is no longer used, as determined by the application. For more information, see [Using CListCtrl: List Items and Image Lists](../list-items-and-image-lists.md).  \n  \n## Inheritance Hierarchy  \n [CObject](cobject-class.md)  \n  \n [CCmdTarget](ccmdtarget-class.md)  \n  \n [CWnd](cwnd-class.md)  \n  \n `CListCtrl`  \n  \n## Requirements  \n **Header:** afxcmn.h  \n  \n##  <a name=\"clistctrl__approximateviewrect\"></a>  CListCtrl::ApproximateViewRect  \n Determines the width and height required to display the items of a list view control.  \n  \n```  \nCSize ApproximateViewRect(\n    CSize sz = CSize(-1,  \n -1),  \n    int iCount = -1) const;\n\n \n```  \n  \n### Parameters  \n `sz`  \n The proposed dimensions of the control, in pixels. If dimensions are not specified, the framework uses the current width or height values of the control.  \n  \n `iCount`  \n Number of items to be displayed in the control. If this parameter is -1, the framework uses the total number of items currently in the control.  \n  \n### Return Value  \n A `CSize` object that contains the approximate width and height needed to display the items, in pixels.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_ApproximateViewRect](http://msdn.microsoft.com/library/windows/desktop/bb761231), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__arrange\"></a>  CListCtrl::Arrange  \n Repositions items in an icon view so that they align on a grid.  \n  \n```  \nBOOL Arrange(UINT nCode);\n```  \n  \n### Parameters  \n `nCode`  \n Specifies the alignment style for the items. It can be one of the following values:  \n  \n- `LVA_ALIGNLEFT` Aligns items along the left edge of the window.  \n  \n- `LVA_ALIGNTOP` Aligns items along the top edge of the window.  \n  \n- `LVA_DEFAULT` Aligns items according to the list view's current alignment styles (the default value).  \n  \n- `LVA_SNAPTOGRID` Snaps all icons to the nearest grid position.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n The `nCode` parameter specifies the alignment style.  \n  \n### Example  \n\n   \n\n```cpp\n    // Align all of the list view control items along the top\n    // of the window (the list view control must be in icon or\n    // small icon mode).\n    m_myListCtrl.Arrange(LVA_ALIGNTOP);\n```\n\n  \n##  <a name=\"clistctrl__canceleditlabel\"></a>  CListCtrl::CancelEditLabel  \n Cancels item text editing operation.  \n  \n```  \nvoid CancelEditLabel();\n```  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_CANCELEDITLABEL](http://msdn.microsoft.com/library/windows/desktop/bb774886) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__clistctrl\"></a>  CListCtrl::CListCtrl  \n Constructs a `CListCtrl` object.  \n  \n```  \nCListCtrl();\n```  \n  \n##  <a name=\"clistctrl__create\"></a>  CListCtrl::Create  \n Creates a list control and attaches it to a `CListCtrl` object.  \n  \n```  \nvirtual BOOL Create(\n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwStyle`  \n Specifies the list control's style. Apply any combination of list control styles to the control. See [List view window styles](http://msdn.microsoft.com/library/windows/desktop/bb774739) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] for a complete list of these styles. Set extended styles specific to a control using [SetExtendedStyle](#clistctrl__setextendedstyle).  \n  \n `rect`  \n Specifies the list control's size and position. It can be either a `CRect` object or a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure.  \n  \n `pParentWnd`  \n Specifies the list control's parent window, usually a `CDialog`. It must not be **NULL**.  \n  \n `nID`  \n Specifies the list control's ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n You construct a `CListCtrl` in two steps. First, call the constructor and then call **Create**, which creates the list view control and attaches it to the `CListCtrl` object.  \n  \n To apply extended Windows styles to the list control object, call [CreateEx](#clistctrl__createex) instead of **Create**.  \n  \n### Example  \n\n```cpp\n    m_myListCtrl.Create(\n        WS_CHILD|WS_VISIBLE|WS_BORDER|LVS_REPORT|LVS_EDITLABELS,\n        CRect(10,10,400,200), pParentWnd, IDD_MYLISTCTRL);   \n```\n\n  \n##  <a name=\"clistctrl__createex\"></a>  CListCtrl::CreateEx  \n Creates a control (a child window) and associates it with the `CListCtrl` object.  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwExStyle,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwExStyle`  \n Specifies the extended style of the control being created. For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n `dwStyle`  \n Specifies the list control's style. Apply any combination of list control styles to the control. For a complete list of these styles, see [List view window styles](http://msdn.microsoft.com/library/windows/desktop/bb774739) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n `rect`  \n A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`.  \n  \n `pParentWnd`  \n A pointer to the window that is the control's parent.  \n  \n `nID`  \n The control's child-window ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Use `CreateEx` instead of [Create](#clistctrl__create) to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**.  \n  \n `CreateEx` creates the control with the extended Windows styles specified by `dwExStyle`. To set extended styles specific to a control, call [SetExtendedStyle](#clistctrl__setextendedstyle). For example, use `CreateEx` to set such styles as **WS_EX_CONTEXTHELP**, but use `SetExtendedStyle` to set such styles as **LVS_EX_FULLROWSELECT**. For more information, see the styles described in the topic [Extended List View Styles](http://msdn.microsoft.com/library/windows/desktop/bb774732) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__createdragimage\"></a>  CListCtrl::CreateDragImage  \n Creates a drag image list for the item specified by `nItem`.  \n  \n```  \nCImageList* CreateDragImage(\n    int nItem,  \n    LPPOINT lpPoint);\n```  \n  \n### Parameters  \n `nItem`  \n Index of the item whose drag image list is to be created.  \n  \n `lpPoint`  \n Address of a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that receives the initial location of the upper-left corner of the image, in view coordinates.  \n  \n### Return Value  \n A pointer to the drag image list if successful; otherwise **NULL**.  \n  \n### Remarks  \n The `CImageList` object is permanent, and you must delete it when finished. For example:  \n  \n\n```cpp\n        CImageList* pImageList = m_myListCtrl.CreateDragImage(nItem, &point);\n\n        // do something\n\n        delete pImageList;\n```\n\n  \n##  <a name=\"clistctrl__deleteallitems\"></a>  CListCtrl::DeleteAllItems  \n Deletes all items from the list view control.  \n  \n```  \nBOOL DeleteAllItems();\n```  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Example  \n\n```cpp\n    // Delete all of the items from the list view control.\n    m_myListCtrl.DeleteAllItems();\n    ASSERT(m_myListCtrl.GetItemCount() == 0);\n```\n\n  \n##  <a name=\"clistctrl__deletecolumn\"></a>  CListCtrl::DeleteColumn  \n Deletes a column from the list view control.  \n  \n```  \nBOOL DeleteColumn(int nCol);\n```  \n  \n### Parameters  \n `nCol`  \n Index of the column to be deleted.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Example  \n\n```cpp\n        int nColumnCount = m_myListCtrl.GetHeaderCtrl()->GetItemCount();\n\n        // Delete all of the columns.\n        for (int i=0; i < nColumnCount; i++)\n        {\n            m_myListCtrl.DeleteColumn(0);\n        }\n```\n\n  \n##  <a name=\"clistctrl__deleteitem\"></a>  CListCtrl::DeleteItem  \n Deletes an item from a list view control.  \n  \n```  \nBOOL DeleteItem(int nItem);\n```  \n  \n### Parameters  \n `nItem`  \n Specifies the index of the item to be deleted.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Example  \n```cpp\n        int nCount = m_myListCtrl.GetItemCount();\n\n        // Delete all of the items from the list view control.\n        for (int i=0; i < nCount; i++)\n        {\n            m_myListCtrl.DeleteItem(0);\n        }\n```\n\n  \n##  <a name=\"clistctrl__drawitem\"></a>  CListCtrl::DrawItem  \n Called by the framework when a visual aspect of an owner-draw list view control changes.  \n  \n```  \nvirtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);\n```  \n  \n### Parameters  \n `lpDrawItemStruct`  \n A long pointer to a `DRAWITEMSTRUCT` structure that contains information about the type of drawing required.  \n  \n### Remarks  \n The **itemAction** member of the [DRAWITEMSTRUCT](http://msdn.microsoft.com/library/windows/desktop/bb775802) structure defines the drawing action that is to be performed.  \n  \n By default, this member function does nothing. Override this member function to implement drawing for an owner-draw `CListCtrl` object.  \n  \n The application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct` before this member function terminates.  \n  \n##  <a name=\"clistctrl__editlabel\"></a>  CListCtrl::EditLabel  \n Begins in-place editing of an item's text.  \n  \n```  \nCEdit* EditLabel(int nItem);\n```  \n  \n### Parameters  \n `nItem`  \n Index of the list view item that is to be edited.  \n  \n### Return Value  \n If successful, a pointer to the `CEdit` object that is used to edit the item text; otherwise **NULL**.  \n  \n### Remarks  \n A list view control that has the `LVS_EDITLABELS` window style enables a user to edit item labels in place. The user begins editing by clicking the label of an item that has the focus.  \n  \n Use this function to begin in-place editing of the specified list view item's text.  \n  \n### Example  \n```cpp\n        // Make sure the focus is set to the list view control.\n        m_myListCtrl.SetFocus();\n\n        // Show the edit control on the label of the first\n        // item in the list view control.\n        CEdit* pmyEdit = m_myListCtrl.EditLabel(1);\n        ASSERT(pmyEdit != NULL);\n```\n\n  \n##  <a name=\"clistctrl__enablegroupview\"></a>  CListCtrl::EnableGroupView  \n Enables or disables whether the items in a list view control display as a group.  \n  \n```  \nLRESULT EnableGroupView(BOOL fEnable);\n```  \n  \n### Parameters  \n `fEnable`  \n Indicates whether to enable a listview control to group displayed items. **TRUE** to enable grouping; **FALSE** to disable it.  \n  \n### Return Value  \n Returns one of the following values:  \n  \n- **0** The ability to display list view items as a group is already enabled or disabled.  \n  \n- **1** The state of the control was successfully changed.  \n  \n- **-1** The operation failed.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_ENABLEGROUPVIEW](http://msdn.microsoft.com/library/windows/desktop/bb774900) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__ensurevisible\"></a>  CListCtrl::EnsureVisible  \n Ensures that a list view item is at least partially visible.  \n  \n```  \nBOOL EnsureVisible(\n    int nItem,  \n    BOOL bPartialOK);\n```  \n  \n### Parameters  \n `nItem`  \n Index of the list view item that is to be visible.  \n  \n `bPartialOK`  \n Specifies whether partial visibility is acceptable.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n The list view control is scrolled if necessary. If the `bPartialOK` parameter is nonzero, no scrolling occurs if the item is partially visible.  \n  \n### Example  \n```cpp\n        // Ensure that the last item is visible.\n        int nCount = m_myListCtrl.GetItemCount();\n        if (nCount > 0)\n            m_myListCtrl.EnsureVisible(nCount-1, FALSE);\n```\n\n  \n##  <a name=\"clistctrl__finditem\"></a>  CListCtrl::FindItem  \n Searches for a list view item having specified characteristics.  \n  \n```  \nint FindItem(\n    LVFINDINFO* pFindInfo,  \n    int nStart = -1) const;\n\n \n```  \n  \n### Parameters  \n `pFindInfo`  \n A pointer to an [LVFINDINFO](http://msdn.microsoft.com/library/windows/desktop/bb774745) structure containing information about the item to be searched for.  \n  \n `nStart`  \n Index of the item to begin the search with, or -1 to start from the beginning. The item at `nStart` is excluded from the search if `nStart` is not equal to -1.  \n  \n### Return Value  \n The index of the item if successful or -1 otherwise.  \n  \n### Remarks  \n The `pFindInfo` parameter points to an **LVFINDINFO** structure, which contains information used to search for a list view item.  \n  \n### Example  \n\n```cpp\n        LVFINDINFO info;\n        int nIndex;\n\n        info.flags = LVFI_PARTIAL|LVFI_STRING;\n        info.psz = _T(\"item\");\n\n        // Delete all of the items that begin with the string.\n        while ((nIndex = m_myListCtrl.FindItem(&info)) != -1)\n        {\n            m_myListCtrl.DeleteItem(nIndex);\n        }\n```\n\n  \n##  <a name=\"clistctrl__getbkcolor\"></a>  CListCtrl::GetBkColor  \n Retrieves the background color of a list view control.  \n  \n```  \nCOLORREF GetBkColor() const;\n\n \n```  \n  \n### Return Value  \n A 32-bit value used to specify an RGB color.  \n  \n### Example  \n  See the example for [CListCtrl::SetBkColor](#clistctrl__setbkcolor).  \n  \n##  <a name=\"clistctrl__getbkimage\"></a>  CListCtrl::GetBkImage  \n Retrieves the current background image of a list view control.  \n  \n```  \nBOOL GetBkImage(LVBKIMAGE* plvbkImage) const;\n\n \n```  \n  \n### Parameters  \n `plvbkImage`  \n A pointer to an **LVBKIMAGE** structure containing the current background image of the list view.  \n  \n### Return Value  \n Returns nonzero if successful, or zero otherwise.  \n  \n### Remarks  \n This method implements the behavior of the Win32 macro, [ListView_GetBkImage](http://msdn.microsoft.com/library/windows/desktop/bb761246), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n\n```cpp\n        LVBKIMAGE bki;\n\n        // If no background image is set for the list view control use\n        // the Microsoft homepage image as the background image.\n        if (m_myListCtrl.GetBkImage(&bki) && (bki.ulFlags == LVBKIF_SOURCE_NONE))\n        {\n            m_myListCtrl.SetBkImage(\n                _T(\"http://www.microsoft.com/library/images/gifs/homepage/microsoft.gif\"),\n                TRUE);\n        }\n```\n\n  \n##  <a name=\"clistctrl__getcallbackmask\"></a>  CListCtrl::GetCallbackMask  \n Retrieves the callback mask for a list view control.  \n  \n```  \nUINT GetCallbackMask() const;\n\n \n```  \n  \n### Return Value  \n The list view control's callback mask.  \n  \n### Remarks  \n A \"callback item\" is a list view item for which the application — rather than the control — stores the text, icon, or both. Although a list view control can store these attributes for you, you may want to use callback items if your application already maintains some of this information. The callback mask specifies which item state bits are maintained by the application, and it applies to the whole control rather than to a specific item. The callback mask is zero by default, meaning that the control tracks all item states. If an application uses callback items or specifies a nonzero callback mask, it must be able to supply list view item attributes on demand.  \n  \n### Example  \n  See the example for [CListCtrl::SetCallbackMask](#clistctrl__setcallbackmask).  \n  \n##  <a name=\"clistctrl__getcheck\"></a>  CListCtrl::GetCheck  \n Retrieves the current display status of the state image that is associated with an item.  \n  \n```  \nBOOL GetCheck(int nItem) const;\n\n \n```  \n  \n### Parameters  \n `nItem`  \n The zero-based index of a list control item.  \n  \n### Return Value  \n Nonzero if the item is selected, otherwise 0.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_GetCheckState](http://msdn.microsoft.com/library/windows/desktop/bb761250), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CListCtrl::SetCheck](#clistctrl__setcheck).  \n  \n##  <a name=\"clistctrl__getcolumn\"></a>  CListCtrl::GetColumn  \n Retrieves the attributes of a list view control's column.  \n  \n```  \nBOOL GetColumn(\n    int nCol,  \n    LVCOLUMN* pColumn) const;\n\n \n```  \n  \n### Parameters  \n `nCol`  \n Index of the column whose attributes are to be retrieved.  \n  \n `pColumn`  \n Address of an [LVCOLUMN](http://msdn.microsoft.com/library/windows/desktop/bb774743) structure that specifies the information to retrieve and receives information about the column. The **mask** member specifies which column attributes to retrieve. If the **mask** member specifies the `LVCF_TEXT` value, the **pszText** member must contain the address of the buffer that receives the item text and the **cchTextMax** member must specify the size of the buffer.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n The **LVCOLUMN** structure contains information about a column in report view.  \n  \n### Example  \n\n```cpp\n        LVCOLUMN col;\n\n        col.mask = LVCF_WIDTH;\n\n        // Double the column width of the first column.\n        if (m_myListCtrl.GetColumn(0, &col))\n        {\n            col.cx *= 2;\n            m_myListCtrl.SetColumn(0, &col);\n        }\n```\n\n  \n##  <a name=\"clistctrl__getcolumnorderarray\"></a>  CListCtrl::GetColumnOrderArray  \n Retrieves the column order (left to right) of a list view control.  \n  \n```  \nBOOL GetColumnOrderArray(\n    LPINT piArray,  \n    int iCount = -1);\n```  \n  \n### Parameters  \n `piArray`  \n A pointer to a buffer that will contain the index values of the columns in the list view control. The buffer must be large enough to contain the total number of columns in the list view control.  \n  \n `iCount`  \n Number of columns in the list view control. If this parameter is -1, the number of columns is automatically retrieved by the framework.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_GetColumnOrderArray](http://msdn.microsoft.com/library/windows/desktop/bb761254), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n\n```cpp\n        // Reverse the order of the columns in the list view control\n        // (i.e. make the first column the last, the last column\n        // the first, and so on...).\n        CHeaderCtrl* pHeaderCtrl = m_myListCtrl.GetHeaderCtrl();\n\n        if (pHeaderCtrl != NULL)\n        {\n            int  nColumnCount = pHeaderCtrl->GetItemCount();\n            LPINT pnOrder = (LPINT) malloc(nColumnCount*sizeof(int));\n            ASSERT(pnOrder != NULL);\n\n            m_myListCtrl.GetColumnOrderArray(pnOrder, nColumnCount);\n\n            int i, j, nTemp;\n            for (i = 0, j = nColumnCount-1; i < j; i++, j--)\n            {\n                nTemp = pnOrder[i];\n                pnOrder[i] = pnOrder[j];\n                pnOrder[j] = nTemp;\n            }\n\n            m_myListCtrl.SetColumnOrderArray(nColumnCount, pnOrder);\n            free(pnOrder);\n        }\n```\n\n  \n##  <a name=\"clistctrl__getcolumnwidth\"></a>  CListCtrl::GetColumnWidth  \n Retrieves the width of a column in report view or list view.  \n  \n```  \nint GetColumnWidth(int nCol) const;\n\n \n```  \n  \n### Parameters  \n `nCol`  \n Specifies the index of the column whose width is to be retrieved.  \n  \n### Return Value  \n The width, in pixels, of the column specified by `nCol`.  \n  \n### Example  \n\n```cpp\n        // Increase the column width of the second column by 20.\n        int nWidth = m_myListCtrl.GetColumnWidth(1);\n        m_myListCtrl.SetColumnWidth(1, 20 + nWidth);\n```\n\n  \n##  <a name=\"clistctrl__getcountperpage\"></a>  CListCtrl::GetCountPerPage  \n Calculates the number of items that can fit vertically in the visible area of a list view control when in list view or report view.  \n  \n```  \nint GetCountPerPage() const;\n\n \n```  \n  \n### Return Value  \n The number of items that can fit vertically in the visible area of a list view control when in list view or report view.  \n  \n### Example  \n  See the example for [CListCtrl::GetTopIndex](#clistctrl__gettopindex).  \n  \n##  <a name=\"clistctrl__geteditcontrol\"></a>  CListCtrl::GetEditControl  \n Retrieves the handle of the edit control used to edit a list view item's text.  \n  \n```  \nCEdit* GetEditControl() const;\n\n \n```  \n  \n### Return Value  \n If successful, a pointer to the [CEdit](cedit-class.md) object that is used to edit the item text; otherwise **NULL**.  \n  \n### Example  \n\n```cpp\n        // The string replacing the text in the edit control.\n        LPCTSTR lpszmyString = _T(\"custom label!\");\n\n        // If possible, replace the text in the label edit control.\n        CEdit* pEdit = m_myListCtrl.GetEditControl();\n\n        if (pEdit != NULL)\n        {\n            pEdit->SetWindowText(lpszmyString);\n        }\n```\n\n  \n##  <a name=\"clistctrl__getemptytext\"></a>  CListCtrl::GetEmptyText  \n Retrieves the string to display if the current list-view control is empty.  \n  \n```  \nCString GetEmptyText() const;\n\n \n```  \n  \n### Return Value  \n A [CString](../../atl-mfc-shared/reference/cstringt-class.md) that contains the text to display if the control is empty.  \n  \n### Remarks  \n This method sends the [LVM_GETEMPTYTEXT](http://msdn.microsoft.com/library/windows/desktop/bb774921) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__getextendedstyle\"></a>  CListCtrl::GetExtendedStyle  \n Retrieves the current extended styles of a list view control.  \n  \n```  \nDWORD GetExtendedStyle();\n```  \n  \n### Return Value  \n A combination of the extended styles currently in use by the list view control. For a descriptive list of these extended styles, see the [Extended List View Styles](http://msdn.microsoft.com/library/windows/desktop/bb774732) topic in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_GetExtendedListViewStyle](http://msdn.microsoft.com/library/windows/desktop/bb761264), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CListCtrl::SetExtendedStyle](#clistctrl__setextendedstyle).  \n  \n##  <a name=\"clistctrl__getfirstselecteditemposition\"></a>  CListCtrl::GetFirstSelectedItemPosition  \n Gets the position of the first selected item in the list view control.  \n  \n```  \nPOSITION GetFirstSelectedItemPosition() const;\n\n \n```  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if no items are selected.  \n  \n### Example  \n The following code sample demonstrates the usage of this function.  \n  \n\n```cpp\n        POSITION pos = m_myListCtrl.GetFirstSelectedItemPosition();\n        if (pos == NULL)\n        {\n            TRACE(_T(\"No items were selected!\\n\"));\n        }\n        else\n        {\n            while (pos)\n            {\n                int nItem = m_myListCtrl.GetNextSelectedItem(pos);\n                TRACE(_T(\"Item %d was selected!\\n\"), nItem);\n                // you could do your own processing on nItem here\n            }\n        }\n```\n\n  \n##  <a name=\"clistctrl__getfocusedgroup\"></a>  CListCtrl::GetFocusedGroup  \n Retrieves the group that has the keyboard focus in the current list-view control.  \n  \n```  \nint GetFocusedGroup() const;\n\n \n```  \n  \n### Return Value  \n The index of the group whose state is `LVGS_FOCUSED`, if there is such a group; otherwise, -1.  \n  \n### Remarks  \n This method sends the [LVM_GETFOCUSEDGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774925) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]. For more information, see the `LVGS_FOCUSED` value of the `state` member of the [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure.  \n  \n##  <a name=\"clistctrl__getgroupcount\"></a>  CListCtrl::GetGroupCount  \n Retrieves the number of groups in the current list-view control.  \n  \n```  \nint GetGroupCount()const;\n\n \n```  \n  \n### Return Value  \n The number of groups in the list-view control.  \n  \n### Remarks  \n This method sends the [LVM_GETGROUPCOUNT](http://msdn.microsoft.com/library/windows/desktop/bb774931) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] -->.  \n  \n##  <a name=\"clistctrl__getgroupinfo\"></a>  CListCtrl::GetGroupInfo  \n Gets the information for a specified group of the list view control.  \n  \n```  \nint GetGroupInfo(\n    int iGroupId,  \n    PLVGROUP pgrp) const;\n\n \n```  \n  \n### Parameters  \n `iGroupId`  \n The identifier of the group whose information is to be retrieved.  \n  \n `pgrp`  \n A pointer to the [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) containing information on the group specified.  \n  \n### Return Value  \n Returns the ID of the group if successful, or -1 otherwise.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_GETGROUPINFO](http://msdn.microsoft.com/library/windows/desktop/bb774932) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__getgroupinfobyindex\"></a>  CListCtrl::GetGroupInfoByIndex  \n Retrieves information about a specified group in the current list-view control.  \n  \n```  \nBOOL GetGroupInfoByIndex(\n    int iIndex,   \n    PLVGROUP pGroup) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `iIndex`|Zero-based index of a group.|  \n|[out] `pGroup`|Pointer to an [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure that receives information about the group specified by the `iIndex` parameter.<br /><br /> The caller is responsible for initializing the members of the [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure. Set the `cbSize` member to the size of the structure, and the flags of the `mask` member to specify the information to retrieve.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This method sends the [LVM_GETGROUPINFOBYINDEX](http://msdn.microsoft.com/library/windows/desktop/bb774933) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] -->.  \n  \n### Example  \n The following code example defines a variable, `m_listCtrl`, that is used to access the current list-view control. This variable is used in the next example.  \n\n```cpp\npublic:\n    // Variable used to access the list control.\n    CListCtrl m_listCtrl; \n```\n\n  \n### Example  \n The following code example demonstrates the `GetGroupInfoByIndex` method. In an earlier section of this code example we created a list-view control that displays two columns titled \"ClientID\" and \"Grade\" in a report view. The following code example retrieves information about the group whose index is 0, if such a group exists.  \n  \n\n \n```cpp\n    // GetGroupInfoByIndex\n    const int GROUP_HEADER_BUFFER_SIZE = 40;\n\n// Initialize the structure \n    LVGROUP gInfo = {0};\n    gInfo.cbSize = sizeof(LVGROUP);\n    wchar_t wstrHeadGet[GROUP_HEADER_BUFFER_SIZE] = {0};\n    gInfo.cchHeader = GROUP_HEADER_BUFFER_SIZE;\n    gInfo.pszHeader = wstrHeadGet;\n    gInfo.mask = (LVGF_ALIGN | LVGF_STATE | LVGF_HEADER | LVGF_GROUPID);\n    gInfo.state = LVGS_NORMAL;\n    gInfo.uAlign  = LVGA_HEADER_LEFT;\n\n    BOOL bRet = m_listCtrl.GetGroupInfoByIndex( 0, &gInfo );\n    if (bRet == TRUE) {\n        CString strHeader = CString( gInfo.pszHeader );\n        CString str;\n        str.Format(_T(\"Header: '%s'\"), strHeader);\n        AfxMessageBox(str, MB_ICONINFORMATION);\n    }\n    else\n    {\n        AfxMessageBox(_T(\"No group information was retrieved.\"));\n    }\n```\n\n  \n##  <a name=\"clistctrl__getgroupmetrics\"></a>  CListCtrl::GetGroupMetrics  \n Retrieves the metrics of a group.  \n  \n```  \nvoid GetGroupMetrics(PLVGROUPMETRICS pGroupMetrics) const;\n\n \n```  \n  \n### Parameters  \n `pGroupMetrics`  \n A pointer to a [LVGROUPMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb774752) containing the group metrics information.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_GETGROUPMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb774934) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__getgrouprect\"></a>  CListCtrl::GetGroupRect  \n Retrieves the bounding rectangle for a specified group in the current list-view control.  \n  \n```  \nBOOL GetGroupRect(\n    int iGroupId,   \n    LPRECT lpRect,   \n    int iCoords = LVGGR_GROUP) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `iGroupId`|Specifies a group.|  \n|[in, out] `lpRect`|Pointer to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure. If this method is successful, the structure receives the rectangle coordinates of the group that is specified by `iGroupId`.|  \n|[in] `iCoords`|Specifies the rectangle coordinates to retrieve. Use one of these values:<br /><br /> - `LVGGR_GROUP` - (Default) Coordinates of the entire expanded group.<br />- `LVGGR_HEADER` - Coordinates of only the header (collapsed group).<br />- `LVGGR_SUBSETLINK` - Coordinates of only the subset link (markup subset).|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n The caller is responsible for allocating the [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure pointed to by the `pRect` parameter.  \n  \n This method sends the [LVM_GETGROUPRECT](http://msdn.microsoft.com/library/windows/desktop/bb774935) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines a variable, `m_listCtrl`, that is used to access the current list-view control. This variable is used in the next example.  \n  \n\n   \n\n```cpp\npublic:\n    // Variable used to access the list control.\n    CListCtrl m_listCtrl; \n```\n\n  \n### Example  \n The following code example demonstrates the `GetGroupRect` method. In an earlier section of this code example, we created a list-view control that displays two columns titled \"ClientID\" and \"Grade\" in a report view. The following code example draws a 3D rectangle around the group whose index is 0, if such a group exists.  \n  \n\n \n```cpp\n    // GetGroupRect\n\n    // Get the graphics rectangle that surrounds group 0.\n    CRect rect;\n    BOOL bRet = m_listCtrl.GetGroupRect( 0, &rect, LVGGR_GROUP); \n    // Draw a blue rectangle around group 0.\n    if (bRet == TRUE) {\n        m_listCtrl.GetDC()->Draw3dRect( &rect, RGB(0, 0, 255), RGB(0, 0, 255));\n    }\n    else {\n        AfxMessageBox(_T(\"No group information was retrieved.\"), MB_ICONINFORMATION);\n    }\n```\n\n  \n##  <a name=\"clistctrl__getgroupstate\"></a>  CListCtrl::GetGroupState  \n Retrieves the state for a specified group in the current list-view control.  \n  \n```  \nUINT GetGroupState(\n    int iGroupId,   \n    DWORD dwMask) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `iGroupId`|Zero-based index of a group.|  \n|[in] `dwMask`|Mask that specifies the state value to retrieve for the specified group. For more information, see the `mask` member of the [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure.|  \n  \n### Return Value  \n The requested state for the specified group, or 0 if the group cannot be found.  \n  \n### Remarks  \n The return value is the result of a bitwise AND operation on the `dwMask` parameter and the value of the `state` member of an [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure that represents the current list-view control.  \n  \n This method sends the [LVM_GETGROUPSTATE](http://msdn.microsoft.com/library/windows/desktop/bb774936) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]. For more information, see the [ListView_GetGroupState](http://msdn.microsoft.com/library/windows/desktop/bb761288) macro.  \n  \n##  <a name=\"clistctrl__getheaderctrl\"></a>  CListCtrl::GetHeaderCtrl  \n Retrieves the header control of a list view control.  \n  \n```  \nCHeaderCtrl* GetHeaderCtrl();\n```  \n  \n### Return Value  \n A pointer to the header control, used by the list view control.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_GetHeader](http://msdn.microsoft.com/library/windows/desktop/bb761290), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CListCtrl::GetColumnOrderArray](#clistctrl__getcolumnorderarray).  \n  \n##  <a name=\"clistctrl__gethotcursor\"></a>  CListCtrl::GetHotCursor  \n Retrieves the cursor used when hot tracking is enabled for a list view control.  \n  \n```  \nHCURSOR GetHotCursor();\n```  \n  \n### Return Value  \n The handle to the current hot cursor resource being used by the list view control.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_GetHotCursor](http://msdn.microsoft.com/library/windows/desktop/bb761292), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]. The hot cursor, only visible when hover selection is enabled, appears when the cursor passes over any list view item. Hover selection is enabled by setting the **LVS_EX_TRACKSELECT** extended style.  \n  \n### Example  \n\n   \n\n```cpp\n        // Set the hot cursor to be the system app starting cursor.\n        HCURSOR hCursor = ::LoadCursor(NULL, IDC_APPSTARTING);\n        m_myListCtrl.SetHotCursor(hCursor);\n        ASSERT(m_myListCtrl.GetHotCursor() == hCursor);\n```\n\n  \n##  <a name=\"clistctrl__gethotitem\"></a>  CListCtrl::GetHotItem  \n Retrieves the list view item currently under the cursor.  \n  \n```  \nint GetHotItem();\n```  \n  \n### Return Value  \n The index of the current hot item of the list view control.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_GetHotItem](http://msdn.microsoft.com/library/windows/desktop/bb761294), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]. The hot item is defined as the currently selected item when hot tracking (and hover selection) is enabled.  \n  \n If hot tracking is enabled, when a user pauses over a list view item, the item label is automatically highlighted without the use of a mouse button.  \n  \n### Example  \n\n   \n\n```cpp\n    // Set the hot item to the first item only if no other item is \n    // highlighted.\n    if (m_myListCtrl.GetHotItem() == -1)\n        m_myListCtrl.SetHotItem(0);\n```\n\n  \n##  <a name=\"clistctrl__gethovertime\"></a>  CListCtrl::GetHoverTime  \n Retrieves the current hover time of a list view control.  \n  \n```  \nDWORD GetHoverTime() const;\n\n \n```  \n  \n### Return Value  \n Returns the delay, in milliseconds, which the mouse cursor must hover over an item before it is selected. If the return value is -1, then the hover time is the default hover time.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_GetHoverTime](http://msdn.microsoft.com/library/windows/desktop/bb761296), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n\n   \n\n```cpp\n        // If the hover time is the default set to 1 sec.\n        DWORD dwTime = m_myListCtrl.GetHoverTime();\n        if (dwTime == -1)\n            m_myListCtrl.SetHoverTime(1000);\n```\n\n  \n##  <a name=\"clistctrl__getimagelist\"></a>  CListCtrl::GetImageList  \n Retrieves the handle of an image list used for drawing list view items.  \n  \n```  \nCImageList* GetImageList(int nImageList) const;\n\n \n```  \n  \n### Parameters  \n `nImageList`  \n Value specifying which image list to retrieve. It can be one of these values:  \n  \n- `LVSIL_NORMAL` Image list with large icons.  \n  \n- `LVSIL_SMALL` Image list with small icons.  \n  \n- `LVSIL_STATE` Image list with state images.  \n  \n### Return Value  \n A pointer to the image list used for drawing list view items.  \n  \n### Example  \n\n   \n\n```cpp\n        ASSERT(m_myListCtrl.GetImageList(LVSIL_NORMAL) == NULL);\n\n        m_myListCtrl.SetImageList(&m_lcImageList, LVSIL_NORMAL);\n        ASSERT(m_myListCtrl.GetImageList(LVSIL_NORMAL) == &m_lcImageList);\n```\n\n  \n##  <a name=\"clistctrl__getinsertmark\"></a>  CListCtrl::GetInsertMark  \n Retrieves the current position of the insertion mark.  \n  \n```  \nBOOL GetInsertMark(LPLVINSERTMARK lvim) const;\n\n \n```  \n  \n### Parameters  \n `lvim`  \n A pointer to an [LVINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb774758) structure containing the information for the insert mark.  \n  \n### Return Value  \n Returns **TRUE** if successful, or **FALSE** otherwise. **FALSE** is returned if the size in the `cbSize` member of the **LVINSERTMARK** structure does not equal the actual size of the structure.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_GETINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb774945) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__getinsertmarkcolor\"></a>  CListCtrl::GetInsertMarkColor  \n Retrieves the current color of the insertion mark.  \n  \n```  \nCOLORREF GetInsertMarkColor() const;\n\n \n```  \n  \n### Return Value  \n Returns a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) structure that contains the color of the insertion point.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_GETINSERTMARKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb774947) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__getinsertmarkrect\"></a>  CListCtrl::GetInsertMarkRect  \n Retrieves the rectangle that bounds the insertion point.  \n  \n```  \nint GetInsertMarkRect(LPRECT pRect) const;\n\n \n```  \n  \n### Parameters  \n `pRect`  \n Pointer to a `RECT` structure that contains the coordinates of a rectangle that bounds the insertion point.  \n  \n### Return Value  \n Returns one of the following values:  \n  \n- **0** No insertion point found.  \n  \n- **1** Insertion point found.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_GETINSERTMARKRECT](http://msdn.microsoft.com/library/windows/desktop/bb774949) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__getitem\"></a>  CListCtrl::GetItem  \n Retrieves some or all of a list view item's attributes.  \n  \n```  \nBOOL GetItem(LVITEM* pItem) const;\n\n \n```  \n  \n### Parameters  \n `pItem`  \n Pointer to an [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure that receives the item's attributes.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n The **LVITEM** structure specifies or receives the attributes of a list view item.  \n  \n##  <a name=\"clistctrl__getitemcount\"></a>  CListCtrl::GetItemCount  \n Retrieves the number of items in a list view control.  \n  \n```  \nint GetItemCount() const;\n\n \n```  \n  \n### Return Value  \n The number of items in the list view control.  \n  \n### Example  \n  See the example for [CListCtrl::DeleteItem](#clistctrl__deleteitem).  \n  \n##  <a name=\"clistctrl__getitemdata\"></a>  CListCtrl::GetItemData  \n Retrieves the 32-bit application-specific value associated with the item specified by `nItem`.  \n  \n```  \nDWORD_PTR GetItemData(int nItem) const;\n\n \n```  \n  \n### Parameters  \n `nItem`  \n Index of the list item whose data is to be retrieved.  \n  \n### Return Value  \n A 32-bit application-specific value associated with the specified item.  \n  \n### Remarks  \n This value is the **lParam** member of the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]  \n  \n### Example  \n\n```cpp\n    // If any item's data is equal to zero then reset it to -1.\n    for (int i=0; i < m_myListCtrl.GetItemCount(); i++)\n    {\n        if (m_myListCtrl.GetItemData(i) == 0)\n        {\n            m_myListCtrl.SetItemData(i, (DWORD) -1);\n        }\n    }\n```\n\n  \n##  <a name=\"clistctrl__getitemindexrect\"></a>  CListCtrl::GetItemIndexRect  \n Retrieves the bounding rectangle for all or part of a subitem in the current list-view control.  \n  \n```  \nBOOL GetItemIndexRect(\n    PLVITEMINDEX pItemIndex,   \n    int iColumn,   \n    int rectType,   \n    LPRECT pRect) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `pItemIndex`|Pointer to an [LVITEMINDEX](http://msdn.microsoft.com/library/windows/desktop/bb774762) structure for the parent item of the subitem.<br /><br /> The caller is responsible for allocating and setting the members of the [LVITEMINDEX](http://msdn.microsoft.com/library/windows/desktop/bb774762) structure. This parameter cannot be `NULL`.|  \n|[in] `iColumn`|Zero-based index of a column in the control.|  \n|[in] `rectType`|Portion of the list-view subitem for which the bounding rectangle is retrieved. Specify one of the following values:<br /><br /> `LVIR_BOUNDS` - Returns the bounding rectangle of the entire subitem, including the icon and label.<br /><br /> `LVIR_ICON` - Returns the bounding rectangle of the icon or small icon of the subitem.<br /><br /> `LVIR_LABEL` - Returns the bounding rectangle of the subitem text.|  \n|[out] `pRect`|Pointer to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure that receives information about the bounding rectangle of the subitem.<br /><br /> The caller is responsible for allocating the [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure. This parameter cannot be `NULL`.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This method sends the [LVM_GETITEMINDEXRECT](http://msdn.microsoft.com/library/windows/desktop/bb761046) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]. For more information, see [ListView_GetItemIndexRect Macro](http://msdn.microsoft.com/library/windows/desktop/bb774959).  \n  \n### Example  \n The following code example defines a variable, `m_listCtrl`, that is used to access the current list-view control. This variable is used in the next example.  \n  \n\n   \n\n```cpp\npublic:\n    // Variable used to access the list control.\n    CListCtrl m_listCtrl; \n```\n\n  \n### Example  \n The following code example demonstrates the `GetGroupRect` method. Prior to entering this code example we created a list-view control that displays two columns titled \"ClientID\" and \"Grade\" in a report view. The following code example draws a 3D rectangle around the second subitem in both columns.  \n  \n\n \n```cpp\n    // GetItemIndexRect\n    // Get the rectangle that bounds the second item in the first group.\n    LVITEMINDEX lvItemIndex;\n    lvItemIndex.iGroup = 0;\n    lvItemIndex.iItem = 1;\n    CRect rect;\n    BOOL bRet = m_listCtrl.GetItemIndexRect(\n        &lvItemIndex, 0, LVIR_BOUNDS, &rect);\n\n    // Draw a red rectangle around the item.\n    m_listCtrl.GetDC()->Draw3dRect( &rect, RGB(255, 0, 0), RGB(255, 0, 0) );\n```\n\n  \n##  <a name=\"clistctrl__getitemposition\"></a>  CListCtrl::GetItemPosition  \n Retrieves the position of a list view item.  \n  \n```  \nBOOL GetItemPosition(\n    int nItem,  \n    LPPOINT lpPoint) const;\n\n \n```  \n  \n### Parameters  \n `nItem`  \n The index of the item whose position is to be retrieved.  \n  \n `lpPoint`  \n Address of a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that receives the position of the item's upper-left corner, in view coordinates.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Example  \n\n   \n\n```cpp\n        POINT pt;\n\n        // Move all items in the list control 100 pixels to the right.\n        UINT i, nCount = m_myListCtrl.GetItemCount();\n\n        for (i=0; i < nCount; i++)\n        {\n            m_myListCtrl.GetItemPosition(i, &pt);\n            pt.x += 100;\n            m_myListCtrl.SetItemPosition(i, pt);\n        }   \n```\n\n  \n##  <a name=\"clistctrl__getitemrect\"></a>  CListCtrl::GetItemRect  \n Retrieves the bounding rectangle for all or part of an item in the current view.  \n  \n```  \nBOOL GetItemRect(\n    int nItem,  \n    LPRECT lpRect,  \n    UINT nCode) const;\n\n \n```  \n  \n### Parameters  \n `nItem`  \n The index of the item whose position is to be retrieved.  \n  \n `lpRect`  \n Address of a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure that receives the bounding rectangle.  \n  \n `nCode`  \n Portion of the list view item for which to retrieve the bounding rectangle. It can be one of these values:  \n  \n- `LVIR_BOUNDS` Returns the bounding rectangle of the entire item, including the icon and label.  \n  \n- `LVIR_ICON` Returns the bounding rectangle of the icon or small icon.  \n  \n- `LVIR_LABEL` Returns the bounding rectangle of the item text.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Example  \n\n   \n\n```cpp\n// OnClick is the handler for the NM_CLICK notification\nvoid CListCtrlDlg::OnClick(NMHDR* pNMHDR, LRESULT* pResult)\n{\n    UNREFERENCED_PARAMETER(pResult);\n\n    LPNMITEMACTIVATE pia = (LPNMITEMACTIVATE)pNMHDR;\n\n    // Get the current mouse location and convert it to client\n    // coordinates.\n    CPoint pos( ::GetMessagePos() ); \n    ScreenToClient(&pos);\n\n    // Get indexes of the first and last visible items in \n    // the listview control.\n    int index = m_myListCtrl.GetTopIndex();\n    int last_visible_index = index + m_myListCtrl.GetCountPerPage();\n    if (last_visible_index > m_myListCtrl.GetItemCount())\n        last_visible_index = m_myListCtrl.GetItemCount();\n\n    // Loop until number visible items has been reached.\n    while (index <= last_visible_index)\n    {\n        // Get the bounding rectangle of an item. If the mouse\n        // location is within the bounding rectangle of the item,\n        // you know you have found the item that was being clicked.\n        CRect r;\n        m_myListCtrl.GetItemRect(index, &r, LVIR_BOUNDS);\n        if (r.PtInRect(pia->ptAction))\n        {\n            UINT flag = LVIS_SELECTED | LVIS_FOCUSED;\n            m_myListCtrl.SetItemState(index, flag, flag);\n            break;\n        }\n\n        // Get the next item in listview control.\n        index++;\n    }\n}\n```\n\n  \n##  <a name=\"clistctrl__getitemspacing\"></a>  CListCtrl::GetItemSpacing  \n Calculates the spacing between items in the current list-view control.  \n  \n```  \nBOOL GetItemSpacing(\n    BOOL fSmall,   \n    int* pnHorzSpacing,   \n    int* pnVertSpacing) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `fSmall`|View for which to retrieve the item spacing. Specify `true` for small icon view, or `false` for icon view.|  \n|[out] `pnHorzSpacing`|Contains the horizontal spacing between items.|  \n|[out] `pnVertSpacing`|Contains the vertical spacing between items.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This method sends the [LVM_GETITEMSPACING](http://msdn.microsoft.com/library/windows/desktop/bb761051) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__getitemstate\"></a>  CListCtrl::GetItemState  \n Retrieves the state of a list view item.  \n  \n```  \nUINT GetItemState(\n    int nItem,  \n    UINT nMask) const;\n\n \n```  \n  \n### Parameters  \n `nItem`  \n The index of the item whose state is to be retrieved.  \n  \n `nMask`  \n Mask specifying which of the item's state flags to return.  \n  \n### Return Value  \n The state flags for the specified list view item.  \n  \n### Remarks  \n An item's state is specified by the **state** member of the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]. When you specify or change an item's state, the **stateMask** member specifies which state bits you want to change.  \n  \n### Example  \n  See the example for [CListCtrl::GetTopIndex](#clistctrl__gettopindex).  \n  \n##  <a name=\"clistctrl__getitemtext\"></a>  CListCtrl::GetItemText  \n Retrieves the text of a list view item or subitem.  \n  \n```  \nint GetItemText(\n    int nItem,  \n    int nSubItem,  \n    LPTSTR lpszText,  \n    int nLen) const;\n\n \n \nCString GetItemText(\n    int nItem,  \n    int nSubItem) const;\n\n \n```  \n  \n### Parameters  \n `nItem`  \n The index of the item whose text is to be retrieved.  \n  \n `nSubItem`  \n Specifies the subitem whose text is to be retrieved.  \n  \n `lpszText`  \n Pointer to a string that is to receive the item text.  \n  \n `nLen`  \n Length of the buffer pointed to by `lpszText`.  \n  \n### Return Value  \n The version returning `int` returns the length of the retrieved string.  \n  \n The version returning a `CString` returns the item text.  \n  \n### Remarks  \n If `nSubItem` is zero, this function retrieves the item label; if `nSubItem` is nonzero, it retrieves the text of the subitem. For more information on the subitem argument, see the discussion of the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__getnextitem\"></a>  CListCtrl::GetNextItem  \n Searches for a list view item that has the specified properties and that bears the specified relationship to a given item.  \n  \n```  \nint GetNextItem(\n    int nItem,  \n    int nFlags) const;\n\n \n```  \n  \n### Parameters  \n `nItem`  \n Index of the item to begin the searching with, or -1 to find the first item that matches the specified flags. The specified item itself is excluded from the search.  \n  \n `nFlags`  \n Geometric relation of the requested item to the specified item, and the state of the requested item. The geometric relation can be one of these values:  \n  \n- `LVNI_ABOVE` Searches for an item that is above the specified item.  \n  \n- `LVNI_ALL` Searches for a subsequent item by index (the default value).  \n  \n- `LVNI_BELOW` Searches for an item that is below the specified item.  \n  \n- `LVNI_TOLEFT` Searches for an item to the left of the specified item.  \n  \n- `LVNI_TORIGHT` Searches for an item to the right of the specified item.  \n  \n The state can be zero, or it can be one or more of these values:  \n  \n- `LVNI_DROPHILITED` The item has the `LVIS_DROPHILITED` state flag set.  \n  \n- `LVNI_FOCUSED` The item has the `LVIS_FOCUSED` state flag set.  \n  \n- `LVNI_SELECTED` The item has the `LVIS_SELECTED` state flag set.  \n  \n If an item does not have all of the specified state flags set, the search continues with the next item.  \n  \n### Return Value  \n The index of the next item if successful, or -1 otherwise.  \n  \n##  <a name=\"clistctrl__getnextitemindex\"></a>  CListCtrl::GetNextItemIndex  \n Retrieves the index of the item in the current list-view control that has a specified set of properties.  \n  \n```  \nBOOL GetNextItemIndex(\n    PLVITEMINDEX pItemIndex,   \n    int nFlags) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in, out] `pItemIndex`|Pointer to the [LVITEMINDEX](http://msdn.microsoft.com/library/windows/desktop/bb774762) structure that describes the item where the search begins, or -1 to find the first item that matches the flags in the `nFlags` parameter.<br /><br /> If this method is successful, the `LVITEMINDEX` structure describes the item found by the search.|  \n|[in] `nFlags`|A bitwise combination (OR) of flags that specify how to perform the search.<br /><br /> The search can depend on the index, state, or appearance of the target item, or the target item's physical position relative to the item specified by the `pItemIndex` parameter. For more information, see the `flags` parameter in the [LVM_GETNEXTITEMINDEX](http://msdn.microsoft.com/library/windows/desktop/bb761059) message.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n The caller is responsible for allocating and setting the members of the `LVITEMINDEX` structure pointed to by the `pItemIndex` parameter.  \n  \n This method sends the [LVM_GETNEXTITEMINDEX](http://msdn.microsoft.com/library/windows/desktop/bb761059) message, which is described in the Windows SDK.  \n  \n##  <a name=\"clistctrl__getnextselecteditem\"></a>  CListCtrl::GetNextSelectedItem  \n Gets the index of the list item identified by `pos`, then sets *pos* to the **POSITION** value.  \n  \n```  \nint GetNextSelectedItem(POSITION& pos) const;\n\n \n```  \n  \n### Parameters  \n `pos`  \n A reference to a **POSITION** value returned by a previous call to `GetNextSelectedItem` or `GetFirstSelectedItemPosition`. The value is updated to the next position by this call.  \n  \n### Return Value  \n The index of the list item identified by `pos`.  \n  \n### Remarks  \n You can use `GetNextSelectedItem` in a forward iteration loop if you establish the initial position with a call to `GetFirstSelectedItemPosition`.  \n  \n You must ensure that your **POSITION** value is valid. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.  \n  \n### Example  \n The following code sample demonstrates the usage of this function.  \n  \n\n   \n\n```cpp\n        POSITION pos = m_myListCtrl.GetFirstSelectedItemPosition();\n        if (pos == NULL)\n        {\n            TRACE(_T(\"No items were selected!\\n\"));\n        }\n        else\n        {\n            while (pos)\n            {\n                int nItem = m_myListCtrl.GetNextSelectedItem(pos);\n                TRACE(_T(\"Item %d was selected!\\n\"), nItem);\n                // you could do your own processing on nItem here\n            }\n        }\n```\n\n  \n##  <a name=\"clistctrl__getnumberofworkareas\"></a>  CListCtrl::GetNumberOfWorkAreas  \n Retrieves the current number of working areas for a list view control.  \n  \n```  \nUINT GetNumberOfWorkAreas() const;\n\n \n```  \n  \n### Return Value  \n Not used at this time.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_GetNumberOfWorkAreas](http://msdn.microsoft.com/library/windows/desktop/bb774988), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n\n   \n\n```cpp\n        UINT i, uCount = m_myListCtrl.GetNumberOfWorkAreas();\n        LPRECT lpRects = (LPRECT) malloc(uCount*sizeof(RECT));\n\n        if (lpRects != NULL)\n        {\n            // Dump all of the work area dimensions.\n            m_myListCtrl.GetWorkAreas(uCount, lpRects);\n\n            for (i=0; i < uCount; i++)\n            {\n                TRACE(_T(\"Work area %d; left = %d, top = %d, right = %d, \")\n                    _T(\"bottom = %d\\r\\n\"),\n                    i, lpRects[i].left, lpRects[i].top, lpRects[i].right, \n                    lpRects[i].bottom);\n            }\n\n            free(lpRects);\n        }\n        else\n        {\n            TRACE(_T(\"Couldn't allocate enough memory!\"));   \n        }\n\n```\n\n  \n##  <a name=\"clistctrl__getoutlinecolor\"></a>  CListCtrl::GetOutlineColor  \n Retrieves the color of the border of a list view control.  \n  \n```  \nCOLORREF GetOutlineColor() const;\n\n \n```  \n  \n### Return Value  \n Returns a [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) structure containing the outline color.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_GETOUTLINECOLOR](http://msdn.microsoft.com/library/windows/desktop/bb761065) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__getorigin\"></a>  CListCtrl::GetOrigin  \n Retrieves the current view origin for a list view control.  \n  \n```  \nBOOL GetOrigin(LPPOINT lpPoint) const;\n\n \n```  \n  \n### Parameters  \n `lpPoint`  \n Address of a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that receives the view origin.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero. However, if the control is in report view, the return value is always zero.  \n  \n##  <a name=\"clistctrl__getselectedcolumn\"></a>  CListCtrl::GetSelectedColumn  \n Retrieves the index of the currently-selected column in the list control.  \n  \n```  \nUINT GetSelectedColumn() const;\n\n \n```  \n  \n### Return Value  \n The index of the selected column.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_GETSELECTEDCOLUMN](http://msdn.microsoft.com/library/windows/desktop/bb761067) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__getselectedcount\"></a>  CListCtrl::GetSelectedCount  \n Retrieves the number of selected items in the list view control.  \n  \n```  \nUINT GetSelectedCount() const;\n\n \n```  \n  \n### Return Value  \n The number of selected items in the list view control.  \n  \n### Example  \n\n   \n\n```cpp\n        UINT i, uSelectedCount = m_myListCtrl.GetSelectedCount();\n        int  nItem = -1;\n\n        // Update all of the selected items.\n        if (uSelectedCount > 0)\n        {\n            for (i=0; i < uSelectedCount; i++)\n            {\n                nItem = m_myListCtrl.GetNextItem(nItem, LVNI_SELECTED);\n                ASSERT(nItem != -1);\n                m_myListCtrl.Update(nItem); \n            }\n        }\n```\n\n  \n##  <a name=\"clistctrl__getselectionmark\"></a>  CListCtrl::GetSelectionMark  \n Retrieves the selection mark of a list view control.  \n  \n```  \nint GetSelectionMark();\n```  \n  \n### Return Value  \n The zero-based selection mark, or -1 if there is no selection mark.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_GetSelectionMark](http://msdn.microsoft.com/library/windows/desktop/bb774998), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n\n```cpp\n    // Set the selection mark to the first item only if no other item is \n    // selected.\n    if (m_myListCtrl.GetSelectionMark() == -1)\n        m_myListCtrl.SetSelectionMark(0);\n```\n\n  \n##  <a name=\"clistctrl__getstringwidth\"></a>  CListCtrl::GetStringWidth  \n Determines the minimum column width necessary to display all of a given string.  \n  \n```  \nint GetStringWidth(LPCTSTR lpsz) const;\n\n \n```  \n  \n### Parameters  \n `lpsz`  \n Address of a null-terminated string whose width is to be determined.  \n  \n### Return Value  \n The width, in pixels, of the string pointed to by `lpsz`.  \n  \n### Remarks  \n The returned width takes into account the control's current font and column margins, but not the width of a small icon.  \n  \n### Example  \n\n```cpp\n        CString strColumn;\n        int nWidth;\n\n        // Insert six columns in the list view control. Make the width of\n        // the column be the width of the column header plus 50%.\n        for (int i = 0; i < 6; i++)\n        {\n            strColumn.Format(_T(\"column %d\"), i);\n            nWidth = 3*m_myListCtrl.GetStringWidth(strColumn)/2;\n            m_myListCtrl.InsertColumn(i, strColumn, LVCFMT_LEFT, nWidth);\n        }\n```\n\n  \n##  <a name=\"clistctrl__getsubitemrect\"></a>  CListCtrl::GetSubItemRect  \n Retrieves the bounding rectangle of an item in a list view control.  \n  \n```  \nBOOL GetSubItemRect(\n    int iItem,  \n    int iSubItem,  \n    int nArea,  \n    CRect& ref);\n```  \n  \n### Parameters  \n *iItem*  \n Index of the subitem's parent item.  \n  \n *iSubItem*  \n The one-based index of the subitem.  \n  \n *nArea*  \n Determines the portion of the bounding rectangle (of the list view subitem) to be retrieved. The portion (icon, label, or both) of the bounding rectangle is specified by applying the bitwise OR operator to one or more of the following values:  \n  \n- `LVIR_BOUNDS` Returns the bounding rectangle of the entire item, including the icon and label.  \n  \n- `LVIR_ICON` Returns the bounding rectangle of the icon or small icon.  \n  \n- `LVIR_LABEL` Returns the bounding rectangle of the entire item, including the icon and label. This is identical to `LVIR_BOUNDS`.  \n  \n `ref`  \n Reference to a [CRect](../../atl-mfc-shared/reference/crect-class.md) object that contains the coordinates of the subitem's bounding rectangle.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_GetSubItemRect](http://msdn.microsoft.com/library/windows/desktop/bb775004), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__gettextbkcolor\"></a>  CListCtrl::GetTextBkColor  \n Retrieves the text background color of a list view control.  \n  \n```  \nCOLORREF GetTextBkColor() const;\n\n \n```  \n  \n### Return Value  \n A 32-bit value used to specify an RGB color.  \n  \n### Example  \n  See the example for [CListCtrl::SetTextBkColor](#clistctrl__settextbkcolor).  \n  \n##  <a name=\"clistctrl__gettextcolor\"></a>  CListCtrl::GetTextColor  \n Retrieves the text color of a list view control.  \n  \n```  \nCOLORREF GetTextColor() const;\n\n \n```  \n  \n### Return Value  \n A 32-bit value used to specify an RGB color.  \n  \n### Example  \n  See the example for [CListCtrl::SetTextColor](#clistctrl__settextcolor).  \n  \n##  <a name=\"clistctrl__gettileinfo\"></a>  CListCtrl::GetTileInfo  \n Retrieves information about a tile in a list view control.  \n  \n```  \nBOOL GetTileInfo(PLVTILEINFO pti) const;\n\n \n```  \n  \n### Parameters  \n *pti*  \n A pointer to an [LVTILEINFO](http://msdn.microsoft.com/library/windows/desktop/bb774766) structure that receives the tile information.  \n  \n### Return Value  \n The return value is not used.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_GETTILEINFO](http://msdn.microsoft.com/library/windows/desktop/bb761081) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__gettileviewinfo\"></a>  CListCtrl::GetTileViewInfo  \n Retrieves information about a list view control in tile view.  \n  \n```  \nBOOL GetTileViewInfo(PLVTILEVIEWINFO ptvi) const;\n\n \n```  \n  \n### Parameters  \n `ptvi`  \n A pointer to an [LVTILEVIEWINFO](http://msdn.microsoft.com/library/windows/desktop/bb774768) structure that receives the retrieved information.  \n  \n### Return Value  \n The return value is not used.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_GETTILEVIEWINFO](http://msdn.microsoft.com/library/windows/desktop/bb761083) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__gettooltips\"></a>  CListCtrl::GetToolTips  \n Retrieves the tooltip control that the list view control uses to display tooltips.  \n  \n```  \nCToolTipCtrl* GetToolTips() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a [CToolTipCtrl](ctooltipctrl-class.md) object to be used by the list control. If the [Create](#clistctrl__create) member function uses the style **LVS_NOTOOLTIPS**, no tooltips are used, and **NULL** is returned.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [LVM_GETTOOLTIPS](http://msdn.microsoft.com/library/windows/desktop/bb761085), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]. The MFC implementation of `GetToolTips` returns a `CToolTipCtrl` object, which is used by the list control, rather than a handle to a tooltip control.  \n  \n### Example  \n\n```cpp\n        CToolTipCtrl* pTip = m_myListCtrl.GetToolTips();\n        if (NULL != pTip)\n        {\n            pTip->UpdateTipText(_T(\"I'm a list view!\"), &m_myListCtrl,\n                IDD_MYLISTCTRL);\n        }\n```\n\n  \n##  <a name=\"clistctrl__gettopindex\"></a>  CListCtrl::GetTopIndex  \n Retrieves the index of the topmost visible item when in list view or report view.  \n  \n```  \nint GetTopIndex() const;\n\n \n```  \n  \n### Return Value  \n The index of the topmost visible item.  \n  \n### Example  \n\n \n```cpp\n        // Make sure the focus is set to the list view control.\n        m_myListCtrl.SetFocus();\n\n        // Select all of the items that are completely visible.\n        int n = m_myListCtrl.GetTopIndex();\n        int nLast = n + m_myListCtrl.GetCountPerPage();\n\n        for (; n < nLast; n++)\n        {\n            m_myListCtrl.SetItemState(n, LVIS_SELECTED, LVIS_SELECTED);\n            ASSERT(m_myListCtrl.GetItemState(n, LVIS_SELECTED) == LVIS_SELECTED); \n        }\n```\n\n  \n##  <a name=\"clistctrl__getview\"></a>  CListCtrl::GetView  \n Gets the view of the list view control.  \n  \n```  \nDWORD GetView() const;\n\n \n```  \n  \n### Return Value  \n The current view of the list view control.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_GETVIEW](http://msdn.microsoft.com/library/windows/desktop/bb761091) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__getviewrect\"></a>  CListCtrl::GetViewRect  \n Retrieves the bounding rectangle of all items in the list view control.  \n  \n```  \nBOOL GetViewRect(LPRECT lpRect) const;\n\n \n```  \n  \n### Parameters  \n `lpRect`  \n Address of a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n The list view must be in icon view or small icon view.  \n  \n##  <a name=\"clistctrl__getworkareas\"></a>  CListCtrl::GetWorkAreas  \n Retrieves the current working areas of a list view control.  \n  \n```  \nvoid GetWorkAreas(\n    int nWorkAreas,  \n    LPRECT prc) const;\n\n \n```  \n  \n### Parameters  \n `nWorkAreas`  \n The number of `RECT` structures contained in the *prc* array.  \n  \n `prc`  \n A pointer to an array of `RECT` structures (or [CRect](../../atl-mfc-shared/reference/crect-class.md) objects) that receive the working areas of the list view control. Values in these structures are in client coordinates.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_GetWorkAreas](http://msdn.microsoft.com/library/windows/desktop/bb775024), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CListCtrl::GetNumberOfWorkAreas](#clistctrl__getnumberofworkareas).  \n  \n##  <a name=\"clistctrl__hasgroup\"></a>  CListCtrl::HasGroup  \n Determines if the list view control has the specified group.  \n  \n```  \nBOOL HasGroup(int iGroupId) const;\n\n \n```  \n  \n### Parameters  \n `iGroupId`  \n The identifier of the group being requested.  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_HASGROUP](http://msdn.microsoft.com/library/windows/desktop/bb761097) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__hittest\"></a>  CListCtrl::HitTest  \n Determines which list view item, if any, is at a specified position.  \n  \n```  \nint HitTest(\n    LVHITTESTINFO* pHitTestInfo) const;\n\n \n \nint HitTest(\n    CPoint pt,  \n    UINT* pFlags = NULL) const;\n\n \n```  \n  \n### Parameters  \n `pHitTestInfo`  \n Address of an **LVHITTESTINFO** structure that contains the position to hit test and that receives information about the results of the hit test.  \n  \n `pt`  \n Point to be tested.  \n  \n `pFlags`  \n Pointer to an integer that receives information about the results of the test. See the explanation of the **flags** member of the [LVHITTESTINFO](http://msdn.microsoft.com/library/windows/desktop/bb774754) structure in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Return Value  \n The index of the item at the position specified by `pHitTestInfo`, if any, or -1 otherwise.  \n  \n### Remarks  \n You can use the `LVHT_ABOVE`, `LVHT_BELOW`, `LVHT_TOLEFT`, and `LVHT_TORIGHT` values of the structure's **flag** member to determine whether to scroll the contents of a list view control. Two of these flags can be combined, for example, if the position is above and to the left of the client area.  \n  \n You can test for the **LVHT_ONITEM** value of the structure's **flag** member to determine whether a given position is over a list view item. This value is a bitwise-OR operation on the `LVHT_ONITEMICON`, `LVHT_ONITEMLABEL`, and `LVHT_ONITEMSTATEICON` values of the structure's **flag** member.  \n  \n### Example  \n\n```cpp\nvoid CListCtrlDlg::OnRClick(NMHDR* pNMHDR, LRESULT* pResult)\n{\n    LPNMITEMACTIVATE pia = (LPNMITEMACTIVATE)pNMHDR;\n    CPoint point(pia->ptAction);\n\n    // Select the item the user clicked on.\n    UINT uFlags;\n    int nItem = m_myListCtrl.HitTest(point, &uFlags);\n\n    if (uFlags & LVHT_ONITEMLABEL)\n    {\n        m_myListCtrl.SetItem(nItem, 0, LVIF_STATE, NULL, 0, LVIS_SELECTED, \n            LVIS_SELECTED, 0);\n    }\n\n    *pResult = 0;\n}\n```\n\n  \n##  <a name=\"clistctrl__insertcolumn\"></a>  CListCtrl::InsertColumn  \n Inserts a new column in a list view control.  \n  \n```  \nint InsertColumn(\n    int nCol,  \n    const LVCOLUMN* pColumn);\n\n \nint InsertColumn(\n    int nCol,  \n    LPCTSTR lpszColumnHeading,  \n    int nFormat = LVCFMT_LEFT,  \n    int nWidth = -1,  \n    int nSubItem = -1);\n```  \n  \n### Parameters  \n `nCol`  \n The index of the new column.  \n  \n `pColumn`  \n Address of an **LVCOLUMN** structure that contains the attributes of the new column.  \n  \n *lpszColumnHeading*  \n Address of a string containing the column's heading.  \n  \n `nFormat`  \n Integer specifying the alignment of the column. It can be one of these values: **LVCFMT_LEFT**, **LVCFMT_RIGHT**, or **LVCFMT_CENTER**.  \n  \n `nWidth`  \n Width of the column, in pixels. If this parameter is -1, the column width is not set.  \n  \n `nSubItem`  \n Index of the subitem associated with the column. If this parameter is -1, no subitem is associated with the column.  \n  \n### Return Value  \n The index of the new column if successful or -1 otherwise.  \n  \n### Remarks  \n The leftmost column in a list view control must be left-aligned.  \n  \n The [LVCOLUMN](http://msdn.microsoft.com/library/windows/desktop/bb774743) structure contains the attributes of a column in report view. It is also used to receive information about a column. This structure is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__insertgroup\"></a>  CListCtrl::InsertGroup  \n Inserts a group into the list view control.  \n  \n```  \nLRESULT InsertGroup(\n    int index,  \n    PLVGROUP pgrp);\n```  \n  \n### Parameters  \n *index*  \n The index of the item where the group is to be inserted.  \n  \n `pgrp`  \n A pointer to an [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure containing the group to be added.  \n  \n### Return Value  \n Returns the index of the item that the group was added to, or -1 if the operation failed.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_INSERTGROUP](http://msdn.microsoft.com/library/windows/desktop/bb761103) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__insertgroupsorted\"></a>  CListCtrl::InsertGroupSorted  \n Inserts the specified group into an ordered list of groups.  \n  \n```  \nLRESULT InsertGroupSorted(PLVINSERTGROUPSORTED pStructInsert);\n```  \n  \n### Parameters  \n *pStructInsert*  \n A pointer to an [LVINSERTGROUPSORTED](http://msdn.microsoft.com/library/windows/desktop/bb774756) structure that contains the group to insert.  \n  \n### Return Value  \n The return value is not used.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_INSERTGROUPSORTED](http://msdn.microsoft.com/library/windows/desktop/bb761105) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__insertitem\"></a>  CListCtrl::InsertItem  \n Inserts an item into the list view control.  \n  \n```  \nint InsertItem(\n    const LVITEM* pItem);\n\n \nint InsertItem(\n    int nItem,  \n    LPCTSTR lpszItem);\n\n \nint InsertItem(\n    int nItem,  \n    LPCTSTR lpszItem,  \n    int nImage);\n\n \nint InsertItem(\n    UINT nMask,  \n    int nItem,  \n    LPCTSTR lpszItem,  \n    UINT nState,  \n    UINT nStateMask,  \n    int nImage,  \n    LPARAM lParam);\n```  \n  \n### Parameters  \n `pItem`  \n Pointer to an [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure that specifies the item's attributes, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n `nItem`  \n Index of the item to be inserted.  \n  \n `lpszItem`  \n Address of a string containing the item's label, or `LPSTR_TEXTCALLBACK` if the item is a callback item. For information on callback items, see [CListCtrl::GetCallbackMask](#clistctrl__getcallbackmask).  \n  \n `nImage`  \n Index of the item's image, or `I_IMAGECALLBACK` if the item is a callback item. For information on callback items, see [CListCtrl::GetCallbackMask](#clistctrl__getcallbackmask).  \n  \n `nMask`  \n The `nMask` parameter specifies which item attributes passed as parameters are valid. It can be one or more of the mask values described in [LVITEM Structure](http://msdn.microsoft.com/library/windows/desktop/bb774760) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]. The valid values can be combined with the bitwise OR operator.  \n  \n `nState`  \n Indicates the item's state, state image, and overlay image. See the [!INCLUDE[winSDK](./includes/winsdk_md.md)] topics [LVITEM Structure](http://msdn.microsoft.com/library/windows/desktop/bb774760) for more information and [List-View Item States](http://msdn.microsoft.com/library/windows/desktop/bb774733) for a list of valid flags.  \n  \n `nStateMask`  \n Indicates which bits of the state member will be retrieved or modified. See [LVITEM Structure](http://msdn.microsoft.com/library/windows/desktop/bb774760) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] for more information.  \n  \n `lParam`  \n A 32-bit application-specific value associated with the item. If this parameter is specified, you must set the `nMask` attribute `LVIF_PARAM`.  \n  \n### Return Value  \n The index of the new item if successful or -1 otherwise.  \n  \n### Remarks  \n Calling this method may cause the **LVM_INSERTITEM** message to be sent to your control window. The associated message handler for the control may fail to set the item text under certain conditions (such as using window styles such as **LVS_OWNERDRAW**). For more information on these conditions, refer to [LVM_INSERTITEM](http://msdn.microsoft.com/library/windows/desktop/bb761107) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n\n```cpp\n        CString strText;\n        int nColumnCount = m_myListCtrl.GetHeaderCtrl()->GetItemCount();\n\n        // Insert 10 items in the list view control.\n        for (int i = 0; i < 10; i++)\n        {\n            strText.Format(TEXT(\"item %d\"), i);\n\n            // Insert the item, select every other item.\n            m_myListCtrl.InsertItem(LVIF_TEXT | LVIF_STATE, i, strText, \n                (i % 2) == 0 ? LVIS_SELECTED : 0, LVIS_SELECTED, 0, 0);\n\n            // Initialize the text of the subitems.\n            for (int j = 1; j < nColumnCount; j++)\n            {\n                strText.Format(TEXT(\"sub-item %d %d\"), i, j);\n                m_myListCtrl.SetItemText(i, j, strText);\n            }\n        }\n```\n\n  \n##  <a name=\"clistctrl__insertmarkhittest\"></a>  CListCtrl::InsertMarkHitTest  \n Retrieves the insertion point closest to a specified point.  \n  \n```  \nint InsertMarkHitTest(\n    LPPOINT pPoint,  \n    LPLVINSERTMARK lvim) const;\n\n \n```  \n  \n### Parameters  \n `pPoint`  \n A pointer to a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that contains the hit test coordinates, relative to the client area of the list control.  \n  \n `lvim`  \n A pointer to an [LVINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb774758) structure that specifies the insertion point closest to the coordinates defined by the point parameter.  \n  \n### Return Value  \n The insertion point closest to the specified point.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_INSERTMARKHITTEST](http://msdn.microsoft.com/library/windows/desktop/bb761131) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__isgroupviewenabled\"></a>  CListCtrl::IsGroupViewEnabled  \n Determines whether group view is enabled for a list view control.  \n  \n```  \nBOOL IsGroupViewEnabled() const;\n\n \n```  \n  \n### Return Value  \n Returns **TRUE** if group view is enabled, or **FALSE** otherwise.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_ISGROUPVIEWENABLED](http://msdn.microsoft.com/library/windows/desktop/bb761133) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__isitemvisible\"></a>  CListCtrl::IsItemVisible  \n Indicates whether a specified item in the current list-view control is visible.  \n  \n```  \nBOOL IsItemVisible(int index) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `index`|Zero-based index of an item in the current list-view control.|  \n  \n### Return Value  \n `true` if the specified item is visible;otherwise, `false`.  \n  \n### Remarks  \n This method sends the [LVM_ISITEMVISIBLE](http://msdn.microsoft.com/library/windows/desktop/bb761135) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__mapidtoindex\"></a>  CListCtrl::MapIDToIndex  \n Maps the unique ID of an item in the current list-view control to an index.  \n  \n```  \nUINT MapIDToIndex(UINT id) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `id`|The unique ID of an item.|  \n  \n### Return Value  \n The current index for the specified ID.  \n  \n### Remarks  \n A list-view control internally tracks items by index. This can present problems because indexes can change during the control's lifetime. The list-view control can tag an item with an ID when the item is created and you can use this ID to guarantee uniqueness during the lifetime of the list-view control.  \n  \n Note that in a multithreaded environment the index is guaranteed only on the thread that hosts the list-view control, not on background threads.  \n  \n This method sends the [LVM_MAPIDTOINDEX](http://msdn.microsoft.com/library/windows/desktop/bb761137) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__mapindextoid\"></a>  CListCtrl::MapIndexToID  \n Maps the index of an item in the current list-view control to a unique ID.  \n  \n```  \nUINT MapIndexToID(UINT index) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `index`|The zero-based index of an item.|  \n  \n### Return Value  \n A unique ID for the specified item.  \n  \n### Remarks  \n A list-view control internally tracks items by index. This can present problems because indexes can change during the control's lifetime. The list-view control can tag an item with an ID when the item is created. You can use this ID to access a specific item for the lifetime of the list-view control.  \n  \n Note that in a multithreaded environment the index is guaranteed only on the thread that hosts the list-view control, not on background threads.  \n  \n This method sends the [LVM_MAPINDEXTOID](http://msdn.microsoft.com/library/windows/desktop/bb761139) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines a variable, `m_listCtrl`, that is used to access the current list-view control. This variable is used in the next example.  \n  \n\n \n```cpp\npublic:\n    // Variable used to access the list control.\n    CListCtrl m_listCtrl; \n```\n\n  \n### Example  \n The following code example demonstrates the `MapIndexToID` method. In an earlier section of this code example, we created a list-view control that displays two columns titled \"ClientID\" and \"Grade\" in a report view. The following example maps the index of each list-view item to an identification number, and then retrieves the index for each identification number. Finally, the example reports whether the original indexes were retrieved.  \n  \n\n   \n\n```cpp\n    // MapIndexToID\n    int iCount = m_listCtrl.GetItemCount();\n    UINT nId = 0;\n    UINT nIndex = 0;\n    for (int iIndexOriginal = 0; iIndexOriginal < iCount; iIndexOriginal++)\n    {\n        // Map index to ID.\n        nId = m_listCtrl.MapIndexToID((UINT)iIndexOriginal);\n\n        // Map ID to index.\n        nIndex = m_listCtrl.MapIDToIndex(nId);\n\n        if (nIndex != (UINT)(iIndexOriginal))\n        {\n            CString str;\n            str.Format(_T(\"Mapped index (%d) is not equal to original index (%d)\"),\n                nIndex, (UINT)(iIndexOriginal));\n            AfxMessageBox(str);\n            return;\n        }\n    }\n    AfxMessageBox(_T(\"The mapped indexes and original indexes are equal.\"), \n        MB_ICONINFORMATION);\n```\n\n  \n##  <a name=\"clistctrl__movegroup\"></a>  CListCtrl::MoveGroup  \n Moves the specified group to the specified zero based index of the list view control.  \n  \n```  \nLRESULT MoveGroup(\n    int iGroupId,  \n    int toIndex);\n```  \n  \n### Parameters  \n `iGroupId`  \n The identifier of the group to be moved.  \n  \n `toIndex`  \n The zero-based index where the group is to be moved.  \n  \n### Return Value  \n The return value is not used.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_MOVEGROUP](http://msdn.microsoft.com/library/windows/desktop/bb761141) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__moveitemtogroup\"></a>  CListCtrl::MoveItemToGroup  \n Moves the specified item into the specified group.  \n  \n```  \nvoid MoveItemToGroup(\n    int idItemFrom,  \n    int idGroupTo);\n```  \n  \n### Parameters  \n [in] `idItemFrom`  \n The index of the item to be moved.  \n  \n [in] `idGroupTo`  \n The identifier of the group the item will be moved to.  \n  \n### Remarks  \n  \n> [!NOTE]\n>  This method currently is not implemented.  \n  \n This method emulates the functionality of the [LVM_MOVEITEMTOGROUP](http://msdn.microsoft.com/library/windows/desktop/bb761143) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__redrawitems\"></a>  CListCtrl::RedrawItems  \n Forces a list view control to repaint a range of items.  \n  \n```  \nBOOL RedrawItems(\n    int nFirst,  \n    int nLast);\n```  \n  \n### Parameters  \n `nFirst`  \n Index of the first item to be repainted.  \n  \n `nLast`  \n Index of the last item to be repainted.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n The specified items are not actually repainted until the list view window receives a `WM_PAINT` message. To repaint immediately, call the Windows [UpdateWindow](http://msdn.microsoft.com/library/windows/desktop/dd145167) function after using this function.  \n  \n##  <a name=\"clistctrl__removeallgroups\"></a>  CListCtrl::RemoveAllGroups  \n Removes all groups from a list view control.  \n  \n```  \nvoid RemoveAllGroups();\n```  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_REMOVEALLGROUPS](http://msdn.microsoft.com/library/windows/desktop/bb761147) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__removegroup\"></a>  CListCtrl::RemoveGroup  \n Removes the specified group from the list view control.  \n  \n```  \nLRESULT RemoveGroup(int iGroupId);\n```  \n  \n### Parameters  \n `iGroupId`  \n The identifier of the group to be removed.  \n  \n### Return Value  \n Returns the index of the group if successful, or -1 otherwise.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_REMOVEGROUP](http://msdn.microsoft.com/library/windows/desktop/bb761149) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__scroll\"></a>  CListCtrl::Scroll  \n Scrolls the content of a list view control.  \n  \n```  \nBOOL Scroll(CSize size);\n```  \n  \n### Parameters  \n `size`  \n A `CSize` object specifying the amount of horizontal and vertical scrolling, in pixels. The **y** member of `size` is divided by the height, in pixels, of the list view control's line, and the control is scrolled by the resulting number of lines.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n##  <a name=\"clistctrl__setbkcolor\"></a>  CListCtrl::SetBkColor  \n Sets the background color of the list view control.  \n  \n```  \nBOOL SetBkColor(COLORREF cr);\n```  \n  \n### Parameters  \n `cr`  \n Background color to set, or the `CLR_NONE` value for no background color. List view controls with background colors redraw themselves significantly faster than those without background colors. For information, see [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Example  \n\n \n```cpp\n        // Use the 3D button face color for the background.\n        COLORREF crBkColor = ::GetSysColor(COLOR_3DFACE);\n        m_myListCtrl.SetBkColor(crBkColor);\n        ASSERT(m_myListCtrl.GetBkColor() == crBkColor);\n```\n\n  \n##  <a name=\"clistctrl__setbkimage\"></a>  CListCtrl::SetBkImage  \n Sets the background image of a list view control.  \n  \n```  \nBOOL SetBkImage(\n    LVBKIMAGE* plvbkImage);\n\n \nBOOL SetBkImage(\n    HBITMAP hbm,  \n    BOOL fTile = TRUE,  \n    int xOffsetPercent = 0,  \n    int yOffsetPercent = 0);\n\n \nBOOL SetBkImage(\n    LPTSTR pszUrl,  \n    BOOL fTile = TRUE,  \n    int xOffsetPercent = 0,  \n    int yOffsetPercent = 0);\n```  \n  \n### Parameters  \n `plvbkImage`  \n Address of an **LVBKIMAGE** structure, containing the new background image information.  \n  \n `hbm`  \n Handle to a bitmap.  \n  \n `pszUrl`  \n A **NULL**-terminated string that contains the URL of the background image.  \n  \n *fTile*  \n Nonzero if the image is to be tiled in the background of the list view control; otherwise 0.  \n  \n *xOffsetPercent*  \n The offset, in pixels, of the image's left edge, from origin of the list view control.  \n  \n *yOffsetPercent*  \n The offset, in pixels, of the image's top edge, from origin of the list view control.  \n  \n### Return Value  \n Returns nonzero if successful, or zero otherwise.  \n  \n### Remarks  \n  \n> [!NOTE]\n>  Because `CListCtrl::SetBkImage` makes use of OLE COM functionality, the OLE libraries must be initialized before using `SetBkImage`. It is best to initialize the COM libraries when the application is initialized and uninitialize the libraries when the application terminates. This is automatically done in MFC applications that make use of ActiveX technology, OLE Automation, OLE Linking/Embedding, or ODBC/DAO operations.  \n  \n### Example  \n  See the example for [CListCtrl::GetBkImage](#clistctrl__getbkimage).  \n  \n##  <a name=\"clistctrl__setcallbackmask\"></a>  CListCtrl::SetCallbackMask  \n Sets the callback mask for a list view control.  \n  \n```  \nBOOL SetCallbackMask(UINT nMask);\n```  \n  \n### Parameters  \n `nMask`  \n New value of the callback mask.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Example  \n\n \n```cpp\n    // Set the callback mask so that only the selected and focused states\n    // are stored for each item.\n    m_myListCtrl.SetCallbackMask(LVIS_SELECTED|LVIS_FOCUSED);\n    ASSERT(m_myListCtrl.GetCallbackMask() == \n        (LVIS_SELECTED|LVIS_FOCUSED));\n```\n\n\n##  <a name=\"clistctrl__setcheck\"></a>  CListCtrl::SetCheck  \n Determines if the state image of a list control item is visible.  \n  \n```  \nBOOL SetCheck(\n    int nItem,  \n    BOOL fCheck = TRUE);\n```  \n  \n### Parameters  \n `nItem`  \n The zero-based index of a list control item.  \n  \n `fCheck`  \n Specifies whether the state image of the item should be visible or not. By default, *fCheck* is **TRUE** and the state image is visible. If `fCheck` is **FALSE**, it is not visible.  \n  \n### Return Value  \n Nonzero if the item is checked, otherwise 0.  \n  \n### Example  \n\n \n```cpp\n        int nCount = m_myListCtrl.GetItemCount();\n        BOOL fCheck = FALSE;\n\n        // Set the check state of every other item to TRUE and \n        // all others to FALSE.\n        for (int i = 0; i < nCount; i++)\n        {\n            m_myListCtrl.SetCheck(i, fCheck);\n            ASSERT((m_myListCtrl.GetCheck(i) && fCheck) || \n                (!m_myListCtrl.GetCheck(i) && !fCheck));\n            fCheck = !fCheck;\n        }\n```\n\n  \n##  <a name=\"clistctrl__setcolumn\"></a>  CListCtrl::SetColumn  \n Sets the attributes of a list view column.  \n  \n```  \nBOOL SetColumn(\n    int nCol,  \n    const LVCOLUMN* pColumn);\n```  \n  \n### Parameters  \n `nCol`  \n Index of the column whose attributes are to be set.  \n  \n `pColumn`  \n Address of an [LVCOLUMN](http://msdn.microsoft.com/library/windows/desktop/bb774743) structure that contains the new column attributes, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]. The structure's **mask** member specifies which column attributes to set. If the **mask** member specifies the `LVCF_TEXT` value, the structure's **pszText** member is the address of a null-terminated string and the structure's **cchTextMax** member is ignored.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Example  \n  See the example for [CListCtrl::GetColumn](#clistctrl__getcolumn).  \n  \n##  <a name=\"clistctrl__setcolumnorderarray\"></a>  CListCtrl::SetColumnOrderArray  \n Sets the column order (left to right) of a list view control.  \n  \n```  \nBOOL SetColumnOrderArray(\n    int iCount,  \n    LPINT piArray);\n```  \n  \n### Parameters  \n `piArray`  \n A pointer to a buffer containing the index values of the columns in the list view control (from left to right). The buffer must be large enough to contain the total number of columns in the list view control.  \n  \n `iCount`  \n Number of columns in the list view control.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_SetColumnOrderArray](http://msdn.microsoft.com/library/windows/desktop/bb775072), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CListCtrl::GetColumnOrderArray](#clistctrl__getcolumnorderarray).  \n  \n##  <a name=\"clistctrl__setcolumnwidth\"></a>  CListCtrl::SetColumnWidth  \n Changes the width of a column in report view or list view.  \n  \n```  \nBOOL SetColumnWidth(\n    int nCol,  \n    int cx);\n```  \n  \n### Parameters  \n `nCol`  \n Index of the column for which the width is to be set. In list view, this parameter must be 0.  \n  \n `cx`  \n The new width of the column. Can be either **LVSCW_AUTOSIZE** or **LVSCW_AUTOSIZE_USEHEADER**, as described in [LVM_SETCOLUMNWIDTH](http://msdn.microsoft.com/library/windows/desktop/bb761163) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n##  <a name=\"clistctrl__setextendedstyle\"></a>  CListCtrl::SetExtendedStyle  \n Sets the current extended styles of a list view control.  \n  \n```  \nDWORD SetExtendedStyle(DWORD dwNewStyle);\n```  \n  \n### Parameters  \n `dwNewStyle`  \n A combination of extended styles to be used by the list view control. For a descriptive list of these styles, see the [Extended List View Styles](http://msdn.microsoft.com/library/windows/desktop/bb774732) topic in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Return Value  \n A combination of the previous extended styles used by the list view control.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_SetExtendedListViewStyle](http://msdn.microsoft.com/library/windows/desktop/bb775076), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n\n \n```cpp\n    // Allow the header controls item to be movable by the user.\n    m_myListCtrl.SetExtendedStyle\n        (m_myListCtrl.GetExtendedStyle()|LVS_EX_HEADERDRAGDROP);\n```\n\n  \n##  <a name=\"clistctrl__setgroupinfo\"></a>  CListCtrl::SetGroupInfo  \n Sets the information that describes the specified group of the current list-view control.  \n  \n```  \nint SetGroupInfo(\n    int iGroupId,  \n    PLVGROUP pgrp);\n```  \n  \n### Parameters  \n `iGroupId`  \n The identifier of the group whose information is set.  \n  \n `pgrp`  \n Pointer to an [LVGROUP](http://msdn.microsoft.com/library/windows/desktop/bb774769) structure that contains the information to set. The caller is responsible for allocating this structure and setting its members.  \n  \n### Return Value  \n The ID of the group if the method is successful; otherwise, -1.  \n  \n### Remarks  \n This method sends the [LVM_SETGROUPINFO](http://msdn.microsoft.com/library/windows/desktop/bb761167) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__setgroupmetrics\"></a>  CListCtrl::SetGroupMetrics  \n Sets the group metrics of a list view control.  \n  \n```  \nvoid SetGroupMetrics(PLVGROUPMETRICS pGroupMetrics);\n```  \n  \n### Parameters  \n `pGroupMetrics`  \n A pointer to an [LVGROUPMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb774752) structure containing the group metrics information to be set.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_SETGROUPMETRICS](http://msdn.microsoft.com/library/windows/desktop/bb761168) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__sethotcursor\"></a>  CListCtrl::SetHotCursor  \n Sets the cursor used when hot tracking is enabled for a list view control.  \n  \n```  \nHCURSOR SetHotCursor(HCURSOR hc);\n```  \n  \n### Parameters  \n *hc*  \n A handle to a cursor resource, used to represent the hot cursor.  \n  \n### Return Value  \n The handle to the previous hot cursor resource being used by the list view control.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_SetHotCursor](http://msdn.microsoft.com/library/windows/desktop/bb775082), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n The hot cursor, only visible when hover selection is enabled, appears as the cursor passes over any list view item. Hover selection is enabled by setting the **LVS_EX_TRACKSELECT** extended style.  \n  \n### Example  \n  See the example for [CListCtrl::GetHotCursor](#clistctrl__gethotcursor).  \n  \n##  <a name=\"clistctrl__sethotitem\"></a>  CListCtrl::SetHotItem  \n Sets the current hot item of a list view control.  \n  \n```  \nint SetHotItem(int iIndex);\n```  \n  \n### Parameters  \n `iIndex`  \n Zero-based index of the item to be set as the hot item.  \n  \n### Return Value  \n The zero-based index of the previously hot item.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_SetHotItem](http://msdn.microsoft.com/library/windows/desktop/bb775083), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CListCtrl::GetHotItem](#clistctrl__gethotitem).  \n  \n##  <a name=\"clistctrl__sethovertime\"></a>  CListCtrl::SetHoverTime  \n Sets the current hover time of a list view control.  \n  \n```  \nDWORD SetHoverTime(DWORD dwHoverTime = (DWORD)-1);\n```  \n  \n### Parameters  \n *dwHoverTime*  \n The new delay, in milliseconds, which the mouse cursor must hover over an item before it is selected. If the default value is passed, the time is set to the default hover time.  \n  \n### Return Value  \n The previous hover time, in milliseconds.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_SetHoverTime](http://msdn.microsoft.com/library/windows/desktop/bb775084), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CListCtrl::GetHoverTime](#clistctrl__gethovertime).  \n  \n##  <a name=\"clistctrl__seticonspacing\"></a>  CListCtrl::SetIconSpacing  \n Sets the spacing between icons in a list view control.  \n  \n```  \nCSize SetIconSpacing(\n    int cx,  \n    int cy);\n\n \nCSize SetIconSpacing(\n    CSize size);\n```  \n  \n### Parameters  \n `cx`  \n The distance (in pixels) between icons on the x-axis.  \n  \n `cy`  \n The distance (in pixels) between icons on the y-axis.  \n  \n `size`  \n A `CSize` object specifying the distance (in pixels) between icons on the x- and y-axes.  \n  \n### Return Value  \n A [CSize](../../atl-mfc-shared/reference/csize-class.md) object containing the previous values for icon spacing.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_SetIconSpacing](http://msdn.microsoft.com/library/windows/desktop/bb775085), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n\n \n```cpp\n    // Leave lots of space between icons.\n    m_myListCtrl.SetIconSpacing(CSize(100, 100));\n```\n\n  \n##  <a name=\"clistctrl__setimagelist\"></a>  CListCtrl::SetImageList  \n Assigns an image list to a list view control.  \n  \n```  \nCImageList* SetImageList(\n    CImageList* pImageList,  \n    int nImageListType);\n```  \n  \n### Parameters  \n `pImageList`  \n Pointer to the image list to assign.  \n  \n `nImageListType`  \n Type of image list. It can be one of these values:  \n  \n- `LVSIL_NORMAL` Image list with large icons.  \n  \n- `LVSIL_SMALL` Image list with small icons.  \n  \n- `LVSIL_STATE` Image list with state images.  \n  \n### Return Value  \n A pointer to the previous image list.  \n  \n### Example  \n  See the example for [CListCtrl::GetImageList](#clistctrl__getimagelist).  \n  \n##  <a name=\"clistctrl__setinfotip\"></a>  CListCtrl::SetInfoTip  \n Sets the tooltip text.  \n  \n```  \nBOOL SetInfoTip(PLVSETINFOTIP plvInfoTip);\n```  \n  \n### Parameters  \n *plvInfoTip*  \n A pointer to an [LVFSETINFOTIP](http://msdn.microsoft.com/library/windows/desktop/bb774764) structure containing the information to be set.  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_SETINFOTIP](http://msdn.microsoft.com/library/windows/desktop/bb761180) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__setinsertmark\"></a>  CListCtrl::SetInsertMark  \n Sets the insertion point to the defined position.  \n  \n```  \nBOOL SetInsertMark(LPLVINSERTMARK lvim);\n```  \n  \n### Parameters  \n `lvim`  \n A pointer to an [LVINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb774758) structure specifying where to set the insertion point.  \n  \n### Return Value  \n Returns **TRUE** if successful, or **FALSE** otherwise. **FALSE** is returned if the size in the `cbSize` member of the **LVINSERTMARK** structure does not equal the actual size of the structure, or when an insertion point does not apply in the current view.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_SETINSERTMARK](http://msdn.microsoft.com/library/windows/desktop/bb761182) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__setinsertmarkcolor\"></a>  CListCtrl::SetInsertMarkColor  \n Sets the color of the insertion point.  \n  \n```  \nCOLORREF SetInsertMarkColor(COLORREF color);\n```  \n  \n### Parameters  \n `color`  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) structure specifying the color to set the insertion point.  \n  \n### Return Value  \n Returns a **COLORREF** structure containing the previous color.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_SETINSERTMARKCOLOR](http://msdn.microsoft.com/library/windows/desktop/bb761184) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__setitem\"></a>  CListCtrl::SetItem  \n Sets some or all of a list view item's attributes.  \n  \n```  \nBOOL SetItem(\n    const LVITEM* pItem);\n\n \nBOOL SetItem(\n    int nItem,  \n    int nSubItem,  \n    UINT nMask,  \n    LPCTSTR lpszItem,  \n    int nImage,  \n    UINT nState,  \n    UINT nStateMask,  \n    LPARAM lParam);\n\n \nBOOL SetItem(\n    int nItem,  \n    int nSubItem,  \n    UINT nMask,  \n    LPCTSTR lpszItem,  \n    int nImage,  \n    UINT nState,  \n    UINT nStateMask,  \n    LPARAM lParam,  \n    int nIndent);\n```  \n  \n### Parameters  \n `pItem`  \n Address of an [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure that contains the new item attributes, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]. The structure's **iItem** and **iSubItem** members identify the item or subitem, and the structure's **mask** member specifies which attributes to set. For more information on the **mask** member, see the **Remarks**.  \n  \n `nItem`  \n Index of the item whose attributes are to be set.  \n  \n `nSubItem`  \n Index of the subitem whose attributes are to be set.  \n  \n `nMask`  \n Specifies which attributes are to be set (see the Remarks).  \n  \n `lpszItem`  \n Address of a null-terminated string specifying the item's label.  \n  \n `nImage`  \n Index of the item's image within the image list.  \n  \n `nState`  \n Specifies values for states to be changed (see the Remarks).  \n  \n `nStateMask`  \n Specifies which states are to be changed (see the Remarks).  \n  \n `lParam`  \n A 32-bit application-specific value to be associated with the item.  \n  \n `nIndent`  \n Width, in pixels, of the indentation. If `nIndent` is less than the system-defined minimum width, the new width is set to the system-defined minimum  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n The **iItem** and **iSubItem** members of the **LVITEM** structure and the `nItem` and `nSubItem` parameters identify the item and subitem whose attributes are to be set.  \n  \n The **mask** member of the **LVITEM** structure and the `nMask` parameter specify which item attributes are to be set:  \n  \n- `LVIF_TEXT` The **pszText** member or the `lpszItem` parameter is the address of a null-terminated string; the **cchTextMax** member is ignored.  \n  \n- `LVIF_STATE` The **stateMask** member or `nStateMask` parameter specifies which item states to change and the **state** member or `nState` parameter contains the values for those states.  \n  \n### Example  \n  See the example for [CListCtrl::HitTest](#clistctrl__hittest).  \n  \n##  <a name=\"clistctrl__setitemcount\"></a>  CListCtrl::SetItemCount  \n Prepares a list view control for adding a large number of items.  \n  \n```  \nvoid SetItemCount(int nItems);\n```  \n  \n### Parameters  \n `nItems`  \n Number of items that the control will ultimately contain.  \n  \n### Remarks  \n To set the item count for a virtual list view control, see [CListCtrl::SetItemCountEx](#clistctrl__setitemcountex).  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_SetItemCount](http://msdn.microsoft.com/library/windows/desktop/bb775093), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n\n \n```cpp\n        CString str;\n\n        // Add 1024 items to the list view control.\n        m_myListCtrl.SetItemCount(1024);\n\n        for (int i = 0; i < 1024; i++)\n        {\n            str.Format(TEXT(\"item %d\"), i);\n            m_myListCtrl.InsertItem(i, str);\n        }\n```\n\n  \n##  <a name=\"clistctrl__setitemcountex\"></a>  CListCtrl::SetItemCountEx  \n Sets the item count for a virtual list view control.  \n  \n```  \nBOOL SetItemCountEx(\n    int iCount,  \n    DWORD dwFlags = LVSICF_NOINVALIDATEALL);\n```  \n  \n### Parameters  \n `iCount`  \n Number of items that the control will ultimately contain.  \n  \n `dwFlags`  \n Specifies the behavior of the list view control after resetting the item count. This value can be a combination of the following:  \n  \n- **LVSICF_NOINVALIDATEALL** The list view control will not repaint unless affected items are currently in view. This is the default value.  \n  \n- **LVSICF_NOSCROLL** The list view control will not change the scroll position when the item count changes.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_SetItemCountEx](http://msdn.microsoft.com/library/windows/desktop/bb775095), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]and should only be called for virtual list views.  \n  \n### Example  \n\n \n```cpp\n        CString str;\n\n        // Add 1024 items to the list view control.\n\n        // Force my virtual list view control to allocate \n        // enough memory for my 1024 items.\n        m_myVirtualListCtrl.SetItemCountEx(1024, LVSICF_NOSCROLL|\n            LVSICF_NOINVALIDATEALL);\n\n        for (int i = 0; i < 1024; i++)\n        {\n            str.Format(TEXT(\"item %d\"), i);\n            m_myVirtualListCtrl.InsertItem(i, str);\n        }\n```\n\n  \n##  <a name=\"clistctrl__setitemdata\"></a>  CListCtrl::SetItemData  \n Sets the 32-bit application-specific value associated with the item specified by `nItem`.  \n  \n```  \nBOOL SetItemData(\n    int nItem, DWORD_PTR dwData);\n```  \n  \n### Parameters  \n `nItem`  \n Index of the list item whose data is to be set.  \n  \n `dwData`  \n A 32-bit value to be associated with the item.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This value is the **lParam** member of the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n\n \n```cpp\n    // Set the data of each item to be equal to its index.\n    for (int i = 0; i < m_myListCtrl.GetItemCount(); i++)\n    {\n        m_myListCtrl.SetItemData(i, i);\n    }\n```\n\n  \n##  <a name=\"clistctrl__setitemindexstate\"></a>  CListCtrl::SetItemIndexState  \n Sets the state of an item in the current list-view control.  \n  \n```  \nBOOL SetItemIndexState(\n    PLVITEMINDEX pItemIndex,   \n    DWORD dwState,   \n    DWORD dwMask) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `pItemIndex`|Pointer to an [LVITEMINDEX](http://msdn.microsoft.com/library/windows/desktop/bb774762) structure that describes an item. The caller is responsible for allocating this structure and setting its members.|  \n|[in] `dwState`|The state to set the item, which is a bitwise combination of [list view item states](http://msdn.microsoft.com/library/windows/desktop/bb774733). Specify zero to reset, or one to set, a state.|  \n|[in] `dwMask`|A mask of the valid bits of the state specified by the `dwState` parameter. Specify a bitwise combination (OR) of [list view item states](http://msdn.microsoft.com/library/windows/desktop/bb774733).|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n For more information about the `dwState` parameter, see [List View Item States](http://msdn.microsoft.com/library/windows/desktop/bb774733).  \n  \n For more information about the `dwMask` parameter, see the `stateMask` member of the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure.  \n  \n This method sends the [LVM_SETITEMINDEXSTATE](http://msdn.microsoft.com/library/windows/desktop/bb761190) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__setitemposition\"></a>  CListCtrl::SetItemPosition  \n Moves an item to a specified position in a list view control.  \n  \n```  \nBOOL SetItemPosition(\n    int nItem,  \n    POINT pt);\n```  \n  \n### Parameters  \n `nItem`  \n Index of the item whose position is to be set.  \n  \n `pt`  \n A [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure specifying the new position, in view coordinates, of the item's upper-left corner.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n The control must be in icon or small icon view.  \n  \n If the list view control has the `LVS_AUTOARRANGE` style, the list view is arranged after the position of the item is set.  \n  \n### Example  \n  See the example for [CListCtrl::GetItemPosition](#clistctrl__getitemposition).  \n  \n##  <a name=\"clistctrl__setitemstate\"></a>  CListCtrl::SetItemState  \n Changes the state of an item in a list view control.  \n  \n```  \nBOOL SetItemState(\n    int nItem,  \n    LVITEM* pItem);\n\n \nBOOL SetItemState(\n    int nItem,  \n    UINT nState,  \n    UINT nMask);\n```  \n  \n### Parameters  \n `nItem`  \n Index of the item whose state is to be set.  \n  \n `pItem`  \n Address of an [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]. The structure's **stateMask** member specifies which state bits to change, and the structure's **state** member contains the new values for those bits. The other members are ignored.  \n  \n `nState`  \n New values for the state bits. For a list of possible values, see [CListCtrl::GetNextItem](#clistctrl__getnextitem) and the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) state member.  \n  \n `nMask`  \n Mask specifying which state bits to change. This value corresponds to the stateMask member of  the [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n An item's \"state\" is a value that specifies the item's availability, indicates user actions, or otherwise reflects the item's status. A list view control changes some state bits, such as when the user selects an item. An application might change other state bits to disable or hide the item, or to specify an overlay image or state image.  \n  \n### Example  \n  See the example for [CListCtrl::GetTopIndex](#clistctrl__gettopindex).  \n  \n##  <a name=\"clistctrl__setitemtext\"></a>  CListCtrl::SetItemText  \n Changes the text of a list view item or subitem.  \n  \n```  \nBOOL SetItemText(\n    int nItem,  \n    int nSubItem,  \n    LPCTSTR lpszText);\n```  \n  \n### Parameters  \n `nItem`  \n Index of the item whose text is to be set.  \n  \n `nSubItem`  \n Index of the subitem, or zero to set the item label.  \n  \n `lpszText`  \n Pointer to a string that contains the new item text.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n This method is not intended for use with controls containing the LVS_OWNERDATA window style (in fact, this will cause an assertion in Debug builds). For more information about this list control style, see [List-View Controls Overview](http://msdn.microsoft.com/library/windows/desktop/bb774735).  \n  \n### Example  \n  See the example for [CListCtrl::InsertItem](#clistctrl__insertitem).  \n  \n##  <a name=\"clistctrl__setoutlinecolor\"></a>  CListCtrl::SetOutlineColor  \n Sets the color of the border of a list-view control if the [LVS_EX_BORDERSELECT](http://msdn.microsoft.com/library/windows/desktop/bb774739) extended window style is set.  \n  \n```  \nCOLORREF SetOutlineColor(COLORREF color);\n```  \n  \n### Parameters  \n `color`  \n The new [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) structure containing the outline color.  \n  \n### Return Value  \n The previous **COLORREF** structure containing the outline color  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_SETOUTLINECOLOR](http://msdn.microsoft.com/library/windows/desktop/bb761200) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__setselectedcolumn\"></a>  CListCtrl::SetSelectedColumn  \n Sets the selected column of the list view control.  \n  \n```  \nLRESULT SetSelectedColumn(int iCol);\n```  \n  \n### Parameters  \n *iCol*  \n The index of the column to be selected.  \n  \n### Return Value  \n The return value is not used.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_SETSELECTEDCOLUMN](http://msdn.microsoft.com/library/windows/desktop/bb761202) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__setselectionmark\"></a>  CListCtrl::SetSelectionMark  \n Sets the selection mark of a list view control.  \n  \n```  \nint SetSelectionMark(int iIndex);\n```  \n  \n### Parameters  \n `iIndex`  \n The zero-based index of the first item in a multiple selection.  \n  \n### Return Value  \n The previous selection mark, or -1 if there was no selection mark.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_SetSelectionMark](http://msdn.microsoft.com/library/windows/desktop/bb775112), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CListCtrl::GetSelectionMark](#clistctrl__getselectionmark).  \n  \n##  <a name=\"clistctrl__settextbkcolor\"></a>  CListCtrl::SetTextBkColor  \n Sets the background color of text in a list view control.  \n  \n```  \nBOOL SetTextBkColor(COLORREF cr);\n```  \n  \n### Parameters  \n `cr`  \n A **COLORREF** specifying the new text background color. For information, see [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Example  \n\n \n```cpp\n        // Use the 3D button face color for the background.\n        COLORREF crBkColor = ::GetSysColor(COLOR_3DFACE);\n        m_myListCtrl.SetTextBkColor(crBkColor);\n        ASSERT(m_myListCtrl.GetTextBkColor() == crBkColor);\n```\n\n  \n##  <a name=\"clistctrl__settextcolor\"></a>  CListCtrl::SetTextColor  \n Sets the text color of a list view control.  \n  \n```  \nBOOL SetTextColor(COLORREF cr);\n```  \n  \n### Parameters  \n `cr`  \n A **COLORREF** specifying the new text color. For information, see [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Example  \n\n \n```cpp\n    // Use the window text color for\n    // the item text of the list view control.\n    COLORREF crTextColor = ::GetSysColor(COLOR_WINDOWTEXT);\n    m_myListCtrl.SetTextColor(crTextColor);\n    ASSERT(m_myListCtrl.GetTextColor() == crTextColor);\n```\n\n  \n##  <a name=\"clistctrl__settileinfo\"></a>  CListCtrl::SetTileInfo  \n Sets the information for a tile of the list view control.  \n  \n```  \nBOOL SetTileInfo(PLVTILEINFO pti);\n```  \n  \n### Parameters  \n *pti*  \n A pointer to an [LVTILEINFO](http://msdn.microsoft.com/library/windows/desktop/bb774766) structure containing the information to be set.  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_SETTILEINFO](http://msdn.microsoft.com/library/windows/desktop/bb761210) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__settileviewinfo\"></a>  CListCtrl::SetTileViewInfo  \n Sets information that a list view control uses in tile view.  \n  \n```  \nBOOL SetTileViewInfo(PLVTILEVIEWINFO ptvi);\n```  \n  \n### Parameters  \n `ptvi`  \n A pointer to an [LVTILEVIEWINFO](http://msdn.microsoft.com/library/windows/desktop/bb774768) structure containing the information to set.  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_SETTILEVIEWINFO](http://msdn.microsoft.com/library/windows/desktop/bb761212) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__settooltips\"></a>  CListCtrl::SetToolTips  \n Sets the tooltip control that the list view control will use to display tooltips.  \n  \n```  \nCToolTipCtrl* SetToolTips(CToolTipCtrl* pWndTip);\n```  \n  \n### Parameters  \n `pWndTip`  \n A pointer to a `CToolTipCtrl` object that the list control will use.  \n  \n### Return Value  \n A pointer to a [CToolTipCtrl](ctooltipctrl-class.md) object containing the tooltip previously used by the control, or `NULL` if no tooltips were used previously.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 message [LVM_SETTOOLTIPS](http://msdn.microsoft.com/library/windows/desktop/bb761216), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n To not use tooltips, indicate the `LVS_NOTOOLTIPS` style when you create the `CListCtrl` object.  \n  \n##  <a name=\"clistctrl__setview\"></a>  CListCtrl::SetView  \n Sets the view of the list view control.  \n  \n```  \nDWORD SetView(int iView);\n```  \n  \n### Parameters  \n *iView*  \n The view to be selected.  \n  \n### Return Value  \n Returns 1 if successful, or -1 otherwise. For example, -1 is returned if the view is invalid.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_SETVIEW](http://msdn.microsoft.com/library/windows/desktop/bb761220) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__setworkareas\"></a>  CListCtrl::SetWorkAreas  \n Sets the area where icons can be displayed in a list view control.  \n  \n```  \nvoid SetWorkAreas(\n    int nWorkAreas,  \n    LPRECT lpRect);\n```  \n  \n### Parameters  \n `nWorkAreas`  \n The number of `RECT` structures (or [CRect](../../atl-mfc-shared/reference/crect-class.md) objects) in the array pointed to by `lpRect`.  \n  \n `lpRect`  \n The address of an array of `RECT` structures (or `CRect` objects) that specify the new work areas of the list view control. These areas must be specified in client coordinates. If this parameter is **NULL**, the working area will be set to the client area of the control.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_SetWorkAreas](http://msdn.microsoft.com/library/windows/desktop/bb775128), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n\n \n```cpp\n    // Remove all working areas.\n    m_myListCtrl.SetWorkAreas(0, NULL);\n```\n\n  \n##  <a name=\"clistctrl__sortgroups\"></a>  CListCtrl::SortGroups  \n Uses an application-defined comparison function to sort groups by ID within a list view control.  \n  \n```  \nBOOL SortGroups(\n    PFNLVGROUPCOMPARE _pfnGroupCompare,  \n    LPVOID _plv);\n```  \n  \n### Parameters  \n `_pfnGroupCompare`  \n A pointer to the group comparison function.  \n  \n `_plv`  \n A void pointer.  \n  \n### Return Value  \n Returns `true` on success, `false` on failure.  \n  \n### Remarks  \n This member function emulates the functionality of the [LVM_SORTGROUPS](http://msdn.microsoft.com/library/windows/desktop/bb761225) message, as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"clistctrl__sortitems\"></a>  CListCtrl::SortItems  \n Sorts list view items by using an application-defined comparison function.  \n  \n```  \nBOOL SortItems(\n    PFNLVCOMPARE pfnCompare,  \n    DWORD_PTR dwData);\n```  \n  \n### Parameters  \n [in] `pfnCompare`  \n Address of the application-defined comparison function.  \n  \n The sort operation calls the comparison function each time the relative order of two list items needs to be determined. The comparison function must be either a static member of a class or a stand-alone function that is not a member of any class.  \n  \n [in] `dwData`  \n Application-defined value that is passed to the comparison function.  \n  \n### Return Value  \n `true` if the method successful; otherwise `false`.  \n  \n### Remarks  \n This method changes the index of each item to reflect the new sequence.  \n  \n The comparison function, `pfnCompare`, has the following form:  \n  \n```  \nint CALLBACK CompareFunc(LPARAM lParam1,\n    LPARAM lParam2,\n    LPARAM lParamSort);\n```  \n  \n The comparison function must return a negative value if the first item should precede the second, a positive value if the first item should follow the second, or zero if the two items are equal.  \n  \n The `lParam1` parameter is the 32-bit value associated with the first item that is compared, and the `lParam2` parameter is the value associated with the second item. These are the values that were specified in the `lParam` member of the items' [LVITEM](http://msdn.microsoft.com/library/windows/desktop/bb774760) structure when they were inserted into the list. The `lParamSort` parameter is the same as the `dwData` value.  \n  \n This method sends the [LVM_SORTITEMS](http://msdn.microsoft.com/library/windows/desktop/bb761227) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n The following is a simple comparison function that results in items being sorted by their `lParam` values.  \n  \n```cpp\n// Sort items by associated lParam\nint CALLBACK CListCtrlDlg::MyCompareProc(LPARAM lParam1, LPARAM lParam2, \n    LPARAM lParamSort)\n{\n    UNREFERENCED_PARAMETER(lParamSort);\n\n    return (int)(lParam1 - lParam2);\n}\n```\n  \n```cpp\n// Sort the items by passing in the comparison function.\nvoid CListCtrlDlg::Sort()\n{\n    m_myListCtrl.SortItems(&CListCtrlDlg::MyCompareProc, 0);\n}\n```\n  \n##  <a name=\"clistctrl__sortitemsex\"></a>  CListCtrl::SortItemsEx  \n Sorts the items of the current list-view control by using an application-defined comparison function.  \n  \n```  \nBOOL SortItemsEx(\n    PFNLVCOMPARE pfnCompare,   \n    DWORD_PTR dwData);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `pfnCompare`|Address of the application-defined comparison function.<br /><br /> The sort operation calls the comparison function each time the relative order of two list items needs to be determined. The comparison function must be either a static member of a class or a stand-alone function that is not a member of any class.|  \n|[in] `dwData`|Application-defined value passed to the comparison function.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This method changes the index of each item to reflect the new sequence.  \n  \n The comparison function, `pfnCompare`, has the following form:  \n  \n```  \nint CALLBACK CompareFunc(LPARAM lParam1,\n    LPARAM lParam2,\n    LPARAM lParamSort);\n```  \n  \n This message is like [LVM_SORTITEMS](http://msdn.microsoft.com/library/windows/desktop/bb761227), except for the type of information passed to the comparison function. In [LVM_SORTITEMS](http://msdn.microsoft.com/library/windows/desktop/bb761227), `lParam1` and `lParam2` are the values of the items to compare. In [LVM_SORTITEMSEX](http://msdn.microsoft.com/library/windows/desktop/bb761228), `lParam1` is the current index of the first item to compare and `lParam2` is the current index of the second item. You can send an [LVM_GETITEMTEXT](http://msdn.microsoft.com/library/windows/desktop/bb761055) message to retrieve more information about an item.  \n  \n The comparison function must return a negative value if the first item should precede the second, a positive value if the first item should follow the second, or zero if the two items are equal.  \n  \n> [!NOTE]\n>  During the sorting process, the list-view contents are unstable. If the callback function sends any messages to the list-view control other than [LVM_GETITEM](http://msdn.microsoft.com/library/windows/desktop/bb774953), the results are unpredictable.  \n  \n This method sends the [LVM_SORTITEMSEX](http://msdn.microsoft.com/library/windows/desktop/bb761228) message, which is described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines a variable, `m_listCtrl`, that is used to access the current list-view control. This variable is used in the next example.  \n  \n```cpp\npublic:\n    // Variable used to access the list control.\n    CListCtrl m_listCtrl; \n```\n\n  \n### Example  \n The following code example demonstrates the `SortItemEx` method. In an earlier section of this code example, we created a list-view control that displays two columns titled \"ClientID\" and \"Grade\" in a report view. The following code example sorts the table by using the values in the \"Grade\" column.  \n  \n\n```cpp\n// The ListCompareFunc() method is a global function used by SortItemEx().\nint CALLBACK ListCompareFunc(\n                             LPARAM lParam1, \n                             LPARAM lParam2, \n                             LPARAM lParamSort)\n{\n    CListCtrl* pListCtrl = (CListCtrl*) lParamSort;\n    CString    strItem1 = pListCtrl->GetItemText(static_cast<int>(lParam1), 1);\n    CString    strItem2 = pListCtrl->GetItemText(static_cast<int>(lParam2), 1);\n\n    int x1 = _tstoi(strItem1.GetBuffer());\n    int x2 = _tstoi(strItem2.GetBuffer());\n    int result = 0;\n    if ((x1 - x2) < 0)\n        result = -1;\n    else if ((x1 - x2) == 0)\n        result = 0;\n    else\n        result = 1;\n\n    return result;\n}\n\nvoid CCListCtrl_s2Dlg::OnBnClickedButton1()\n{\n    // SortItemsEx\n    m_listCtrl.SortItemsEx( ListCompareFunc, (LPARAM)&m_listCtrl );\n}\n```\n\n  \n##  <a name=\"clistctrl__subitemhittest\"></a>  CListCtrl::SubItemHitTest  \n Determines which list view item, if any, is at a given position.  \n  \n```  \nint SubItemHitTest(LPLVHITTESTINFO pInfo);\n```  \n  \n### Parameters  \n `pInfo`  \n A pointer to the [LVHITTESTINFO](http://msdn.microsoft.com/library/windows/desktop/bb774754) structure.  \n  \n### Return Value  \n The one-based index of the item, or subitem, being tested (if any), or -1 otherwise.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 macro, [ListView_SubItemHitTest](http://msdn.microsoft.com/library/windows/desktop/bb775135), as described in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Example  \n\n```cpp\nvoid CListCtrlDlg::OnDblClk(NMHDR* pNMHDR, LRESULT* pResult)\n{\n    UNREFERENCED_PARAMETER(pResult);\n\n    LPNMITEMACTIVATE pia = (LPNMITEMACTIVATE)pNMHDR;\n    LVHITTESTINFO lvhti;\n\n    // Clear the subitem text the user clicked on.\n    lvhti.pt = pia->ptAction;\n    m_myListCtrl.SubItemHitTest(&lvhti);\n\n    if (lvhti.flags & LVHT_ONITEMLABEL)\n    {\n        m_myListCtrl.SetItemText(lvhti.iItem, lvhti.iSubItem, NULL);\n    }\n}\n```\n\n  \n##  <a name=\"clistctrl__update\"></a>  CListCtrl::Update  \n Forces the list view control to repaint the item specified by `nItem`.  \n  \n```  \nBOOL Update(int nItem);\n```  \n  \n### Parameters  \n `nItem`  \n Index of the item to be updated.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n This function also arranges the list view control if it has the `LVS_AUTOARRANGE` style.  \n  \n### Example  \n  See the example for [CListCtrl::GetSelectedCount](#clistctrl__getselectedcount).  \n  \n## See Also  \n [MFC Sample ROWLIST](../../visual-cpp-samples.md)   \n [CWnd Class](cwnd-class.md)   \n [Hierarchy Chart](../hierarchy-chart.md)   \n [CImageList Class](cimagelist-class.md)\n\n"}