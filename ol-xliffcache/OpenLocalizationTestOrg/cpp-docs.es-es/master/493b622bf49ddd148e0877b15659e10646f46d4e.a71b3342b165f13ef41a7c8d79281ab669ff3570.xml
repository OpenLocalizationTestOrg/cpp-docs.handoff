{"nodes":[{"pos":[12,44],"content":"chrono literals | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"chrono literals | Microsoft Docs","pos":[0,32]}]},{"pos":[525,540],"content":"chrono literals","linkify":"chrono literals","nodes":[{"content":"chrono literals","pos":[0,15]}]},{"content":"(C++14) The <ph id=\"ph1\">\\&lt;</ph>chrono&gt; header defines 12 <bpt id=\"p1\">[</bpt>user-defined literals<ept id=\"p1\">](../cpp/user-defined-literals-cpp.md)</ept> to facilitate using literals that represent hours, minutes, seconds, milliseconds, microseconds, and nanoseconds.","pos":[541,755],"source":"(C++14) The \\<chrono> header defines 12 [user-defined literals](../cpp/user-defined-literals-cpp.md) to facilitate using literals that represent hours, minutes, seconds, milliseconds, microseconds, and nanoseconds."},{"content":"Each user-defined literal has an integral and a floating-point overload.","pos":[756,828]},{"content":"The literals are defined in the literals::chrono_literals inline namespace which is brought into scope automatically when std::chrono is in scope.","pos":[829,975]},{"pos":[984,990],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2503,2515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The literals that take a <ph id=\"ph1\">`long long`</ph> argument return a value or the corresponding type.","pos":[2519,2606],"source":"The literals that take a `long long` argument return a value or the corresponding type."},{"content":"The literals that take a floating point argument return a <bpt id=\"p1\">[</bpt>duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept>.","pos":[2607,2715],"source":" The literals that take a floating point argument return a [duration](../standard-library/duration-class.md)."},{"pos":[2724,2731],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following examples sow how to use the chrono literals.","pos":[2735,2793]},{"pos":[2923,2935],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2939,2960],"content":"<bpt id=\"p1\">**</bpt>Header<ept id=\"p1\">**</ept>: <ph id=\"ph1\">\\&lt;</ph>chrono&gt;","source":"**Header**: \\<chrono>"},{"pos":[2967,3012],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept>: std::literals::chrono_literals","source":"**Namespace**: std::literals::chrono_literals"},{"pos":[3021,3029],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3033,3075],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>chrono&gt;<ept id=\"p1\">](../standard-library/chrono.md)</ept>","source":"[\\<chrono>](../standard-library/chrono.md)"}],"content":"---\ntitle: \"chrono literals | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 1a9e23b1-256f-4570-8226-5fa7364fb032\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# chrono literals\n(C++14) The \\<chrono> header defines 12 [user-defined literals](../cpp/user-defined-literals-cpp.md) to facilitate using literals that represent hours, minutes, seconds, milliseconds, microseconds, and nanoseconds. Each user-defined literal has an integral and a floating-point overload. The literals are defined in the literals::chrono_literals inline namespace which is brought into scope automatically when std::chrono is in scope.  \n  \n## Syntax  \n  \n```  \ninline namespace literals {  \n    inline namespace chrono_literals {  \n // return integral hours  \n    constexpr chrono::hours operator\"\" h(unsigned long long Val);\n\n // return floating-point hours  \n    constexpr chrono::duration<double, ratio<3600>> operator\"\" h(long double Val);\n\n // return integral minutes  \n    constexpr chrono::minutes(operator\"\" min)(unsigned long long Val);\n\n // return floating-point minutes  \n    constexpr chrono::duration<double, ratio<60>>(operator\"\" min)(long double Val);\n\n // return integral seconds  \n    constexpr chrono::seconds operator\"\" s(unsigned long long Val);\n\n // return floating-point seconds  \n    constexpr chrono::duration<double> operator\"\" s(long double Val);\n\n // return integral milliseconds  \n    constexpr chrono::milliseconds operator\"\" ms(unsigned long long Val);\n\n // return floating-point milliseconds  \n    constexpr chrono::duration<double, milli> operator\"\" ms(long double Val);\n\n // return integral microseconds      \n    constexpr chrono::microseconds operator\"\" us(unsigned long long Val);\n\n // return floating-point microseconds  \n    inline constexpr chrono::duration<double, micro> operator\"\" us(long double Val);\n\n // return integral nanoseconds  \n    inline constexpr chrono::nanoseconds operator\"\" ns(unsigned long long Val);\n\n // return floating-point nanoseconds  \n    constexpr chrono::duration<double, nano> operator\"\" ns(long double Val);\n\n }// inline namespace chrono_literals  \n}// inline namespace literals  \n```  \n  \n## Return Value  \n The literals that take a `long long` argument return a value or the corresponding type. The literals that take a floating point argument return a [duration](../standard-library/duration-class.md).  \n  \n## Example  \n The following examples sow how to use the chrono literals.  \n  \n```cpp  \nconstexpr auto day = 24h;  \nconstexpr auto week = 24h* 7;  \nconstexpr auto my_duration_unit = 108ms;  \n```  \n  \n## Requirements  \n **Header**: \\<chrono>  \n  \n **Namespace**: std::literals::chrono_literals  \n  \n## See Also  \n [\\<chrono>](../standard-library/chrono.md)\n\n"}