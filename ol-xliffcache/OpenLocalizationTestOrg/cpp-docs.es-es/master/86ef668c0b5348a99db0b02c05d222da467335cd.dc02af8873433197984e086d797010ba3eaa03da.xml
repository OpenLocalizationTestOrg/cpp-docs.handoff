{"nodes":[{"pos":[12,74],"content":"How to: Access Characters in a System::String | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Access Characters in a System::String | Microsoft Docs","pos":[0,62]}]},{"content":"How to: Access Characters in a System::String","pos":[713,758]},{"content":"You can access characters of a &lt;xref:System.String&gt; object for high-performance calls to unmanaged functions that take <ph id=\"ph1\">`wchar_t*`</ph> strings.","pos":[759,897],"source":"You can access characters of a <xref:System.String> object for high-performance calls to unmanaged functions that take `wchar_t*` strings."},{"content":"The method yields an interior pointer to the first character of the &lt;xref:System.String&gt; object.","pos":[898,994],"source":" The method yields an interior pointer to the first character of the <xref:System.String> object."},{"content":"This pointer can be manipulated directly or pinned and passed to a function expecting an ordinary <ph id=\"ph1\">`wchar_t`</ph> string.","pos":[995,1110],"source":" This pointer can be manipulated directly or pinned and passed to a function expecting an ordinary `wchar_t` string."},{"content":"Example","pos":[1119,1126]},{"content":"returns a &lt;xref:System.Char&gt;, which is an interior pointer (also known as a <ph id=\"ph1\">`byref`</ph>).","pos":[1149,1234],"source":" returns a <xref:System.Char>, which is an interior pointer (also known as a `byref`)."},{"content":"As such, it is subject to garbage collection.","pos":[1235,1280]},{"content":"You don't have to pin this pointer unless you're going to pass it to a native function.","pos":[1281,1368]},{"content":"Consider the following code.","pos":[1375,1403]},{"content":"Pinning is not needed because <ph id=\"ph1\">`ppchar`</ph> is an interior pointer, and if the garbage collector moves the string it points to, it will also update <ph id=\"ph2\">`ppchar`</ph>.","pos":[1405,1557],"source":"  Pinning is not needed because `ppchar` is an interior pointer, and if the garbage collector moves the string it points to, it will also update `ppchar`."},{"content":"Without a <bpt id=\"p1\">[</bpt>pin_ptr (C++/CLI)<ept id=\"p1\">](../windows/pin-ptr-cpp-cli.md)</ept>, the code will work and not have the potential performance hit caused by pinning.","pos":[1558,1700],"source":" Without a [pin_ptr (C++/CLI)](../windows/pin-ptr-cpp-cli.md), the code will work and not have the potential performance hit caused by pinning."},{"pos":[1707,1876],"content":"If you pass <ph id=\"ph1\">`ppchar`</ph> to a native function, then it must be a pinning pointer; the garbage collector will not be able to update any pointers on the unmanaged stack frame.","source":"If you pass `ppchar` to a native function, then it must be a pinning pointer; the garbage collector will not be able to update any pointers on the unmanaged stack frame."},{"content":"Example","pos":[2235,2242]},{"content":"This example shows where pinning is needed.","pos":[2246,2289]},{"content":"Example","pos":[2878,2885]},{"content":"An interior pointer has all the properties of a native C++ pointer.","pos":[2889,2956]},{"content":"For example, you can use it to walk a linked data structure and do insertions and deletions using only one pointer:","pos":[2957,3072]},{"content":"See Also","pos":[3582,3590]},{"content":"Using C++ Interop (Implicit PInvoke)","pos":[3595,3631]}],"content":"---\ntitle: \"How to: Access Characters in a System::String | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"get-started-article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"characters [C++], accessing in System::String\"\n  - \"examples [C++], strings\"\n  - \"strings [C++], accessing characters\"\nms.assetid: cfc89756-aef3-4988-907e-fb236dcb7087\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Access Characters in a System::String\nYou can access characters of a <xref:System.String> object for high-performance calls to unmanaged functions that take `wchar_t*` strings. The method yields an interior pointer to the first character of the <xref:System.String> object. This pointer can be manipulated directly or pinned and passed to a function expecting an ordinary `wchar_t` string.  \n  \n## Example  \n `PtrToStringChars` returns a <xref:System.Char>, which is an interior pointer (also known as a `byref`). As such, it is subject to garbage collection. You don't have to pin this pointer unless you're going to pass it to a native function.  \n  \n Consider the following code.  Pinning is not needed because `ppchar` is an interior pointer, and if the garbage collector moves the string it points to, it will also update `ppchar`. Without a [pin_ptr (C++/CLI)](../windows/pin-ptr-cpp-cli.md), the code will work and not have the potential performance hit caused by pinning.  \n  \n If you pass `ppchar` to a native function, then it must be a pinning pointer; the garbage collector will not be able to update any pointers on the unmanaged stack frame.  \n  \n```  \n// PtrToStringChars.cpp  \n// compile with: /clr  \n#include<vcclr.h>  \nusing namespace System;  \n  \nint main() {  \n   String ^ mystring = \"abcdefg\";  \n  \n   interior_ptr<const Char> ppchar = PtrToStringChars( mystring );  \n  \n   for ( ; *ppchar != L'\\0'; ++ppchar )  \n      Console::Write(*ppchar);  \n}  \n```  \n  \n```Output  \nabcdefg  \n```  \n  \n## Example  \n This example shows where pinning is needed.  \n  \n```  \n// PtrToStringChars_2.cpp  \n// compile with: /clr  \n#include <string.h>  \n#include <vcclr.h>  \n// using namespace System;  \n  \nsize_t getlen(System::String ^ s) {  \n   // Since this is an outside string, we want to be secure.  \n   // To be secure, we need a maximum size.  \n   size_t maxsize = 256;  \n   // make sure it doesn't move during the unmanaged call  \n   pin_ptr<const wchar_t> pinchars = PtrToStringChars(s);  \n   return wcsnlen(pinchars, maxsize);  \n};  \n  \nint main() {  \n   System::Console::WriteLine(getlen(\"testing\"));  \n}  \n```  \n  \n```Output  \n7  \n```  \n  \n## Example  \n An interior pointer has all the properties of a native C++ pointer. For example, you can use it to walk a linked data structure and do insertions and deletions using only one pointer:  \n  \n```  \n// PtrToStringChars_3.cpp  \n// compile with: /clr /LD  \nusing namespace System;  \nref struct ListNode {  \n   Int32 elem;   \n   ListNode ^ Next;  \n};  \n  \nvoid deleteNode( ListNode ^ list, Int32 e ) {   \n   interior_ptr<ListNode ^> ptrToNext = &list;  \n   while (*ptrToNext != nullptr) {  \n      if ( (*ptrToNext) -> elem == e )  \n         *ptrToNext = (*ptrToNext) -> Next;   // delete node  \n      else  \n         ptrToNext = &(*ptrToNext) -> Next;   // move to next node  \n   }  \n}  \n```  \n  \n## See Also  \n [Using C++ Interop (Implicit PInvoke)](../dotnet/using-cpp-interop-implicit-pinvoke.md)"}