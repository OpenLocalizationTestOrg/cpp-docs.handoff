{"nodes":[{"pos":[12,54],"content":"Private Virtual Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Private Virtual Functions | Microsoft Docs","pos":[0,42]}]},{"content":"Private Virtual Functions","pos":[722,747]},{"pos":[748,932],"content":"The way private virtual functions are handled in derived classes has changed from Managed Extensions for C++ to <ph id=\"ph1\">[!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]</ph>.","source":"The way private virtual functions are handled in derived classes has changed from Managed Extensions for C++ to [!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]."},{"content":"In Managed Extensions, the access level of a virtual function does not constrain its ability to be overridden within a derived class.","pos":[939,1072]},{"content":"In the new syntax, a virtual function cannot override a base class virtual function that it cannot access.","pos":[1073,1179]},{"content":"For example:","pos":[1180,1192]},{"content":"There is no real mapping of this sort of design onto the new syntax.","pos":[1542,1610]},{"content":"One simply has to make the base class members accessible – that is, non-private.","pos":[1611,1691]},{"content":"The inherited methods do not have to bear the same access.","pos":[1692,1750]},{"content":"In this example, the least invasive change is to make the MyBaseClass member <ph id=\"ph1\">`protected`</ph>.","pos":[1751,1840],"source":" In this example, the least invasive change is to make the MyBaseClass member `protected`."},{"content":"This way the general program's access to the method through MyBaseClass is still prohibited.","pos":[1841,1933]},{"pos":[2115,2240],"content":"Note that the absence of the explicit <ph id=\"ph1\">`virtual`</ph> keyword in the base class, under the new syntax, generates a warning message.","source":"Note that the absence of the explicit `virtual` keyword in the base class, under the new syntax, generates a warning message."},{"content":"See Also","pos":[2249,2257]},{"content":"Member Declarations within a Class or Interface (C++/CLI)","pos":[2262,2319]}],"content":"---\ntitle: \"Private Virtual Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"virtual functions, private\"\n  - \"derived classes, virtual functions\"\n  - \"access modifiers [C++], for class members\"\n  - \"member access [C++], virtual members\"\nms.assetid: 04448086-bf72-44be-9c1f-dfda1744949e\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Private Virtual Functions\nThe way private virtual functions are handled in derived classes has changed from Managed Extensions for C++ to [!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)].  \n  \n In Managed Extensions, the access level of a virtual function does not constrain its ability to be overridden within a derived class. In the new syntax, a virtual function cannot override a base class virtual function that it cannot access. For example:  \n  \n```  \n__gc class MyBaseClass {  \n   // inaccessible to a derived class   \n   virtual void g();  \n};  \n  \n__gc class MyDerivedClass : public MyBaseClass {  \npublic:  \n   // okay in Managed Extensions; g() overrides MyBaseClass::g()  \n   // error in new syntax; cannot override: MyBaseClass::g() is inaccessible …  \n   void g();  \n};  \n```  \n  \n There is no real mapping of this sort of design onto the new syntax. One simply has to make the base class members accessible – that is, non-private. The inherited methods do not have to bear the same access. In this example, the least invasive change is to make the MyBaseClass member `protected`. This way the general program's access to the method through MyBaseClass is still prohibited.  \n  \n```  \nref class MyBaseClass {  \nprotected:  \n   virtual void g();  \n};  \n  \nref class MyDerivedClass : MyBaseClass {  \npublic:  \n   virtual void g() override;  \n};  \n```  \n  \n Note that the absence of the explicit `virtual` keyword in the base class, under the new syntax, generates a warning message.  \n  \n## See Also  \n [Member Declarations within a Class or Interface (C++/CLI)](../dotnet/member-declarations-within-a-class-or-interface-cpp-cli.md)   \n "}