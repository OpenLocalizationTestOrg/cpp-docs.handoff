{"nodes":[{"pos":[12,50],"content":"complex&lt;double&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"complex<ph id=\"ph1\">&amp;lt;</ph>double<ph id=\"ph2\">&amp;gt;</ph> | Microsoft Docs","pos":[0,38],"source":"complex&lt;double&gt; | Microsoft Docs"}]},{"content":"complex<ph id=\"ph1\">&amp;lt;</ph>double","pos":[673,690],"source":"complex&lt;double"},{"pos":[695,885],"content":"Describes an object that stores an ordered pair of objects both of type <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept><bpt id=\"p2\">*</bpt>,<ept id=\"p2\">*</ept> the first representing the real part of a complex number and the second representing the imaginary part.","source":"Describes an object that stores an ordered pair of objects both of type **double***,* the first representing the real part of a complex number and the second representing the imaginary part."},{"content":"Syntax","pos":[894,900]},{"content":"Parameters","pos":[1206,1216]},{"content":"The value of type <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept> for the real part of the complex number being constructed.","pos":[1233,1320],"source":" The value of type **double** for the real part of the complex number being constructed."},{"content":"The value of type <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept> for the imaginary part of the complex number being constructed.","pos":[1340,1432],"source":" The value of type **double** for the imaginary part of the complex number being constructed."},{"content":"The complex number of type <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> or of type <ph id=\"ph1\">`long double`</ph> whose real and imaginary parts are used to initialize a complex number of type <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept> being constructed.","pos":[1456,1626],"source":" The complex number of type **float** or of type `long double` whose real and imaginary parts are used to initialize a complex number of type **double** being constructed."},{"content":"Return Value","pos":[1635,1647]},{"pos":[1651,1687],"content":"A complex number of type <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept>.","source":"A complex number of type **double**."},{"content":"Remarks","pos":[1696,1703]},{"content":"The explicit specialization of the template class complex to a complex class of type <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept> differs from the template class only in the constructors it defines.","pos":[1707,1871],"source":"The explicit specialization of the template class complex to a complex class of type **double** differs from the template class only in the constructors it defines."},{"content":"The conversion from <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept> is allowed to be implicit, but the conversion from <ph id=\"ph1\">`long double`</ph> to <bpt id=\"p3\">**</bpt>double<ept id=\"p3\">**</ept> is required to be <bpt id=\"p4\">**</bpt>explicit<ept id=\"p4\">**</ept>.","pos":[1872,2026],"source":" The conversion from **float** to **double** is allowed to be implicit, but the conversion from `long double` to **double** is required to be **explicit**."},{"content":"The use of <bpt id=\"p1\">**</bpt>explicit<ept id=\"p1\">**</ept> rules out the initiation with type conversion using assignment syntax.","pos":[2027,2121],"source":" The use of **explicit** rules out the initiation with type conversion using assignment syntax."},{"content":"For more information on the template class <ph id=\"ph1\">`complex`</ph>, see <bpt id=\"p1\">[</bpt>complex Class<ept id=\"p1\">](../standard-library/complex-class.md)</ept>.","pos":[2128,2240],"source":"For more information on the template class `complex`, see [complex Class](../standard-library/complex-class.md)."},{"content":"For a list of members of the template class <ph id=\"ph1\">`complex`</ph>, see .","pos":[2241,2301],"source":" For a list of members of the template class `complex`, see ."},{"content":"Example","pos":[2310,2317]},{"content":"Requirements","pos":[4347,4359]},{"pos":[4363,4385],"content":"<bpt id=\"p1\">**</bpt>Header<ept id=\"p1\">**</ept>: <ph id=\"ph1\">\\&lt;</ph>complex&gt;","source":"**Header**: \\<complex>"},{"pos":[4392,4410],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[4419,4427]},{"content":"complex Class","pos":[4432,4445]},{"content":"Thread Safety in the C++ Standard Library","pos":[4490,4531]}],"content":"---\ntitle: \"complex&lt;double&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.complex<double>\"\n  - \"complex<double>\"\n  - \"std::complex<double>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"complex<double> function\"\nms.assetid: 0d0b9d2a-9b9b-410b-82a0-86b6df127e47\ncaps.latest.revision: 23\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# complex&lt;double&gt;\nDescribes an object that stores an ordered pair of objects both of type **double***,* the first representing the real part of a complex number and the second representing the imaginary part.  \n  \n## Syntax  \n  \n```\ntemplate <>\nclass complex<double> {\npublic:\n    constexpr complex(\n    double RealVal = 0,\n    double ImagVal = 0);\n\nconstexpr complex(const complex<double>& complexNum);\n\nconstexpr explicit complex(const complex<long double>& complexNum);\n// rest same as template class complex\n};\n```  \n  \n#### Parameters  \n `RealVal`  \n The value of type **double** for the real part of the complex number being constructed.  \n  \n `ImagVal`  \n The value of type **double** for the imaginary part of the complex number being constructed.  \n  \n ` complexNum`  \n The complex number of type **float** or of type `long double` whose real and imaginary parts are used to initialize a complex number of type **double** being constructed.  \n  \n## Return Value  \n A complex number of type **double**.  \n  \n## Remarks  \n The explicit specialization of the template class complex to a complex class of type **double** differs from the template class only in the constructors it defines. The conversion from **float** to **double** is allowed to be implicit, but the conversion from `long double` to **double** is required to be **explicit**. The use of **explicit** rules out the initiation with type conversion using assignment syntax.  \n  \n For more information on the template class `complex`, see [complex Class](../standard-library/complex-class.md). For a list of members of the template class `complex`, see .  \n  \n## Example  \n  \n```cpp  \n// complex_comp_dbl.cpp  \n// compile with: /EHsc  \n#include <complex>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   double pi = 3.14159265359;  \n  \n   // The first constructor specifies real & imaginary parts  \n   complex <double> c1 ( 4.0 , 5.0 );  \n   cout << \"Specifying initial real & imaginary parts,\\n\"  \n        << \" as type double gives c1 = \" << c1 << endl;  \n  \n   // The second constructor initializes values of the real &  \n   // imaginary parts using those of complex number of type float  \n   complex <float> c2float ( 4.0 , 5.0 );  \n   complex <double> c2double ( c2float );  \n   cout << \"Implicit conversion from type float to type double,\"  \n        << \"\\n gives c2double = \" << c2double << endl;  \n  \n   // The third constructor initializes values of the real &  \n   // imaginary parts using those of a complex number  \n   // of type long double  \n   complex <long double> c3longdouble ( 4.0 , 5.0 );  \n   complex <double> c3double ( c3longdouble );  \n   cout << \"Explicit conversion from type float to type double,\"  \n        << \"\\n gives c3longdouble = \" << c3longdouble << endl;  \n  \n   // The modulus and argument of a complex number can be recovered  \n   double absc3 = abs ( c3longdouble );  \n   double argc3 = arg ( c3longdouble );  \n   cout << \"The modulus of c3 is recovered from c3 using: abs ( c3 ) = \"  \n        << absc3 << endl;  \n   cout << \"Argument of c3 is recovered from c3 using:\\n arg ( c3 ) = \"  \n        << argc3 << \" radians, which is \" << argc3 * 180 / pi  \n        << \" degrees.\" << endl;  \n}  \n\\* Output:   \nSpecifying initial real & imaginary parts,  \n as type double gives c1 = (4,5)  \nImplicit conversion from type float to type double,  \n gives c2double = (4,5)  \nExplicit conversion from type float to type double,  \n gives c3longdouble = (4,5)  \nThe modulus of c3 is recovered from c3 using: abs ( c3 ) = 6.40312  \nArgument of c3 is recovered from c3 using:  \n arg ( c3 ) = 0.896055 radians, which is 51.3402 degrees.  \n*\\  \n```  \n  \n## Requirements  \n **Header**: \\<complex>  \n  \n **Namespace:** std  \n  \n## See Also  \n [complex Class](../standard-library/complex-class.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n\n\n"}