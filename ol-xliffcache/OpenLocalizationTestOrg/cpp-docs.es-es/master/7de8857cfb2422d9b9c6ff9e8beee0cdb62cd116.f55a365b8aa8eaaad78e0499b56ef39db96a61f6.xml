{"nodes":[{"pos":[12,47],"content":"auto_handle::reset | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"auto_handle::reset | Microsoft Docs","pos":[0,35]}]},{"content":"auto_handle::reset","pos":[702,720]},{"content":"Destroy the current owned object and optionally take possession of a new object.","pos":[721,801]},{"content":"Syntax","pos":[810,816]},{"content":"Parameters","pos":[907,917]},{"content":"(Optional) The new object.","pos":[935,961]},{"content":"Example","pos":[970,977]},{"content":"Requirements","pos":[2008,2020]},{"pos":[2024,2062],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\auto_handle.h&gt;","source":"**Header file** \\<msclr\\auto_handle.h>"},{"pos":[2069,2088],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr","source":"**Namespace** msclr"},{"content":"See Also","pos":[2097,2105]},{"content":"auto_handle Members","pos":[2110,2129]},{"content":"auto_handle::release","pos":[2170,2190]}],"content":"---\ntitle: \"auto_handle::reset | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"auto_handle.reset\"\n  - \"msclr::auto_handle::reset\"\n  - \"auto_handle::reset\"\n  - \"msclr.auto_handle.reset\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"auto_handle::reset\"\nms.assetid: 32dc3a83-80fd-45c9-8f79-8c4096c30f57\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# auto_handle::reset\nDestroy the current owned object and optionally take possession of a new object.  \n  \n## Syntax  \n  \n```  \nvoid reset(  \n   _element_type ^ _new_ptr  \n);  \nvoid reset();  \n```  \n  \n#### Parameters  \n `_new_ptr`  \n (Optional) The new object.  \n  \n## Example  \n  \n```  \n// msl_auto_handle_reset.cpp  \n// compile with: /clr  \n#include <msclr\\auto_handle.h>  \n  \nusing namespace System;  \nusing namespace msclr;  \n  \nref class ClassA {  \n   String^ m_s;  \npublic:  \n   ClassA( String^ s ) : m_s( s ) {  \n      Console::WriteLine( \"ClassA constructor: \" + m_s );  \n   }  \n   ~ClassA() {  \n      Console::WriteLine( \"ClassA destructor: \" + m_s );  \n   }  \n  \n   void PrintHello() {  \n      Console::WriteLine( \"Hello from {0} A!\", m_s );  \n   }  \n};  \n  \nint main()  \n{  \n   auto_handle<ClassA> agc1 = gcnew ClassA( \"first\" );  \n   agc1->PrintHello();  \n  \n   ClassA^ ha = gcnew ClassA( \"second\" );  \n   agc1.reset( ha ); // release first object, reference second  \n   agc1->PrintHello();  \n  \n   agc1.reset(); // release second object, set to nullptr  \n  \n   Console::WriteLine( \"done\" );  \n}  \n```  \n  \n```Output  \nClassA constructor: first  \nHello from first A!  \nClassA constructor: second  \nClassA destructor: first  \nHello from second A!  \nClassA destructor: second  \ndone  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\auto_handle.h>  \n  \n **Namespace** msclr  \n  \n## See Also  \n [auto_handle Members](../dotnet/auto-handle-members.md)   \n [auto_handle::release](../dotnet/auto-handle-release.md)"}