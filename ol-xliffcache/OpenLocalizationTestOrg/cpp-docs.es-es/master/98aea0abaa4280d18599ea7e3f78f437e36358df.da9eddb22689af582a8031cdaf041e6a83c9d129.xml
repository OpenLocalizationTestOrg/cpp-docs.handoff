{"nodes":[{"pos":[12,91],"content":"_itoa_s, _i64toa_s, _ui64toa_s, _itow_s, _i64tow_s, _ui64tow_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_itoa_s, _i64toa_s, _ui64toa_s, _itow_s, _i64tow_s, _ui64tow_s | Microsoft Docs","pos":[0,79]}]},{"pos":[1691,1753],"content":"_itoa_s, _i64toa_s, _ui64toa_s, _itow_s, _i64tow_s, _ui64tow_s","linkify":"_itoa_s, _i64toa_s, _ui64toa_s, _itow_s, _i64tow_s, _ui64tow_s","nodes":[{"content":"_itoa_s, _i64toa_s, _ui64toa_s, _itow_s, _i64tow_s, _ui64tow_s","pos":[0,62]}]},{"content":"Converts an integer to a string.","pos":[1754,1786]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>_itoa, _i64toa, _ui64toa, _itow, _i64tow, _ui64tow<ept id=\"p1\">](../../c-runtime-library/reference/itoa-i64toa-ui64toa-itow-i64tow-ui64tow.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1787,2071],"source":" These are versions of [_itoa, _i64toa, _ui64toa, _itow, _i64tow, _ui64tow](../../c-runtime-library/reference/itoa-i64toa-ui64toa-itow-i64tow-ui64tow.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[2080,2086],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3037,3047],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`value`</ph>","pos":[3051,3063],"source":"[in] `value`"},{"content":"Number to be converted.","pos":[3067,3090]},{"content":"[out] <ph id=\"ph1\">`buffer`</ph>","pos":[3097,3111],"source":"[out] `buffer`"},{"content":"Filled with the result of the conversion.","pos":[3115,3156]},{"content":"[in] <ph id=\"ph1\">`sizeInCharacters`</ph>","pos":[3163,3186],"source":"[in] `sizeInCharacters`"},{"content":"Size of the buffer in single-byte characters or wide characters.","pos":[3190,3254]},{"content":"[in] <ph id=\"ph1\">`radix`</ph>","pos":[3261,3273],"source":"[in] `radix`"},{"content":"Base of <ph id=\"ph1\">`value`</ph>; which must be in the range 2–36.","pos":[3277,3326],"source":" Base of `value`; which must be in the range 2–36."},{"pos":[3335,3347],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if successful; an error code on failure.","pos":[3351,3396]},{"content":"If any of the following conditions applies, the function invokes an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3397,3580],"source":" If any of the following conditions applies, the function invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"pos":[3590,3606],"content":"Error Conditions","linkify":"Error Conditions","nodes":[{"content":"Error Conditions","pos":[0,16]}]},{"content":"value","pos":[3613,3618]},{"content":"buffer","pos":[3619,3625]},{"content":"sizeInCharacters","pos":[3626,3642]},{"content":"radix","pos":[3643,3648]},{"content":"Return","pos":[3649,3655]},{"content":"any","pos":[3737,3740]},{"content":"any","pos":[3748,3751]},{"content":"any","pos":[3752,3755]},{"content":"any","pos":[3769,3772]},{"content":"any","pos":[3773,3776]},{"content":"&lt;=0","pos":[3777,3780],"source":"<=0"},{"content":"any","pos":[3781,3784]},{"content":"any","pos":[3798,3801]},{"content":"any","pos":[3802,3805]},{"content":"&lt;= length of the result string required","pos":[3806,3845],"source":"<= length of the result string required"},{"content":"any","pos":[3846,3849]},{"content":"any","pos":[3863,3866]},{"content":"any","pos":[3867,3870]},{"content":"any","pos":[3871,3874]},{"pos":[3875,3902],"content":"<ph id=\"ph1\">`radix`</ph> &lt; 2 or <ph id=\"ph2\">`radix`</ph> &gt; 36","source":"`radix` < 2 or `radix` > 36"},{"pos":[3919,3938],"content":"<bpt id=\"p1\">**</bpt>Security Issues<ept id=\"p1\">**</ept>","source":"**Security Issues**"},{"pos":[3945,4132],"content":"These functions can generate an access violation if <ph id=\"ph1\">`buffer`</ph> does not point to valid memory and is not <ph id=\"ph2\">`NULL`</ph>, or if the length of the buffer is not long enough to hold the result string.","source":"These functions can generate an access violation if `buffer` does not point to valid memory and is not `NULL`, or if the length of the buffer is not long enough to hold the result string."},{"pos":[4141,4148],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4152,4285],"content":"Except for the parameters and return value, the <ph id=\"ph1\">`_itoa_s`</ph> functions have the same behavior as the corresponding less secure versions.","source":"Except for the parameters and return value, the `_itoa_s` functions have the same behavior as the corresponding less secure versions."},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.","pos":[4292,4562]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[4563,4671],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"The debug versions of these functions first fill the buffer with 0xFD.","pos":[4678,4748]},{"content":"To disable this behavior, use <bpt id=\"p1\">[</bpt>_CrtSetDebugFillThreshold<ept id=\"p1\">](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)</ept>.","pos":[4749,4870],"source":" To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)."},{"pos":[4880,4909],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"Tchar.h routine","pos":[4916,4931]},{"content":"_UNICODE and _MBCS not defined","pos":[4932,4962]},{"content":"_MBCS defined","pos":[4963,4976]},{"content":"_UNICODE defined","pos":[4977,4993]},{"pos":[5265,5277],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[5284,5291]},{"content":"Required header","pos":[5292,5307]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[5362,5373],"source":"\\<stdlib.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[5390,5401],"source":"\\<stdlib.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[5419,5430],"source":"\\<stdlib.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[5445,5470],"source":"\\<stdlib.h> or \\<wchar.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[5487,5512],"source":"\\<stdlib.h> or \\<wchar.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[5530,5555],"source":"\\<stdlib.h> or \\<wchar.h>"},{"pos":[5563,5681],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[5690,5697],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6447,6453],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[7744,7769],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[7773,7871],"content":"<bpt id=\"p1\">[</bpt>System::Convert::ToString<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.convert.tostring.aspx)</ept>","source":"[System::Convert::ToString](https://msdn.microsoft.com/en-us/library/system.convert.tostring.aspx)"},{"pos":[7880,7888],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Data Conversion<ept id=\"p1\">](../../c-runtime-library/data-conversion.md)</ept><ph id=\"ph1\"> </ph>","pos":[7892,7954],"source":"[Data Conversion](../../c-runtime-library/data-conversion.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_ltoa, _ltow<ept id=\"p1\">](../../c-runtime-library/reference/ltoa-ltow.md)</ept><ph id=\"ph1\"> </ph>","pos":[7957,8021],"source":" [_ltoa, _ltow](../../c-runtime-library/reference/ltoa-ltow.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_ultoa, _ultow<ept id=\"p1\">](../../c-runtime-library/reference/ultoa-ultow.md)</ept>","pos":[8024,8091],"source":" [_ultoa, _ultow](../../c-runtime-library/reference/ultoa-ultow.md)"}],"content":"---\ntitle: \"_itoa_s, _i64toa_s, _ui64toa_s, _itow_s, _i64tow_s, _ui64tow_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_ui64tow_s\"\n  - \"_itoa_s\"\n  - \"_itow_s\"\n  - \"_ui64toa_s\"\n  - \"_i64tow_s\"\n  - \"_i64toa_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"i64tot_s\"\n  - \"itow_s\"\n  - \"_ui64tow_s\"\n  - \"_itow_s\"\n  - \"ui64tot_s\"\n  - \"_ui64toa_s\"\n  - \"itoa_s\"\n  - \"_i64tow_s\"\n  - \"_i64tot_s\"\n  - \"_itot_s\"\n  - \"_i64toa_s\"\n  - \"_itoa_s\"\n  - \"ui64toa_s\"\n  - \"i64toa_s\"\n  - \"_ui64tot_s\"\n  - \"i64tow_s\"\n  - \"itot_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_ui64toa_s function\"\n  - \"_itow_s function\"\n  - \"_i64tow_s function\"\n  - \"_itot_s function\"\n  - \"converting integers\"\n  - \"itow_s function\"\n  - \"i64toa_s function\"\n  - \"_ui64tow_s function\"\n  - \"integers, converting\"\n  - \"_i64tot_s function\"\n  - \"itoa_s function\"\n  - \"_itoa_s function\"\n  - \"ui64toa_s function\"\n  - \"i64tow_s function\"\n  - \"converting numbers, to strings\"\n  - \"_ui64tot_s function\"\n  - \"_i64toa_s function\"\nms.assetid: eb746581-bff3-48b5-a973-bfc0a4478ecf\ncaps.latest.revision: 28\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _itoa_s, _i64toa_s, _ui64toa_s, _itow_s, _i64tow_s, _ui64tow_s\nConverts an integer to a string. These are versions of [_itoa, _i64toa, _ui64toa, _itow, _i64tow, _ui64tow](../../c-runtime-library/reference/itoa-i64toa-ui64toa-itow-i64tow-ui64tow.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t _itoa_s(  \n   int value,  \n   char *buffer,  \n   size_t sizeInCharacters,  \n   int radix   \n);  \nerrno_t _i64toa_s(  \n   __int64 value,  \n   char *buffer,  \n   size_t sizeInCharacters,  \n   int radix   \n);  \nerrno_t _ui64toa_s(  \n   unsigned _int64 value,  \n   char *buffer,  \n   size_t sizeInCharacters,  \n   int radix   \n);  \nerrno_t _itow_s(  \n   int value,  \n   wchar_t *buffer,  \n   size_t sizeInCharacters,  \n   int radix   \n);  \nerrno_t _i64tow_s(  \n   __int64 value,  \n   wchar_t *buffer,  \n   size_t sizeInCharacters,  \n   int radix   \n);  \nerrno_t _ui64tow_s(  \n   unsigned __int64 value,  \n   wchar_t *buffer,  \n   size_t sizeInCharacters,  \n   int radix   \n);  \ntemplate <size_t size>  \nerrno_t _itoa_s(  \n   int value,  \n   char (&buffer)[size],  \n   int radix   \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _itow_s(  \n   int value,  \n   wchar_t (&buffer)[size],  \n   int radix   \n); // C++ only  \n```  \n  \n#### Parameters  \n [in] `value`  \n Number to be converted.  \n  \n [out] `buffer`  \n Filled with the result of the conversion.  \n  \n [in] `sizeInCharacters`  \n Size of the buffer in single-byte characters or wide characters.  \n  \n [in] `radix`  \n Base of `value`; which must be in the range 2–36.  \n  \n## Return Value  \n Zero if successful; an error code on failure. If any of the following conditions applies, the function invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md).  \n  \n### Error Conditions  \n  \n|value|buffer|sizeInCharacters|radix|Return|  \n|-----------|------------|----------------------|-----------|------------|  \n|any|`NULL`|any|any|`EINVAL`|  \n|any|any|<=0|any|`EINVAL`|  \n|any|any|<= length of the result string required|any|`EINVAL`|  \n|any|any|any|`radix` < 2 or `radix` > 36|`EINVAL`|  \n  \n **Security Issues**  \n  \n These functions can generate an access violation if `buffer` does not point to valid memory and is not `NULL`, or if the length of the buffer is not long enough to hold the result string.  \n  \n## Remarks  \n Except for the parameters and return value, the `_itoa_s` functions have the same behavior as the corresponding less secure versions.  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n The debug versions of these functions first fill the buffer with 0xFD. To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_itot_s`|`_itoa_s`|`_itoa_s`|`_itow_s`|  \n|`_i64tot_s`|`_i64toa_s`|`_i64toa_s`|`_i64tow_s`|  \n|`_ui64tot_s`|`_ui64toa_s`|`_ui64toa_s`|`_ui64tow_s`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_itoa_s`|\\<stdlib.h>|  \n|`_i64toa_s`|\\<stdlib.h>|  \n|`_ui64toa_s`|\\<stdlib.h>|  \n|`_itow_s`|\\<stdlib.h> or \\<wchar.h>|  \n|`_i64tow_s`|\\<stdlib.h> or \\<wchar.h>|  \n|`_ui64tow_s`|\\<stdlib.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_itoa_s.c  \n#include <stdlib.h>  \n#include <string.h>  \n  \nint main( void )  \n{  \n    char buffer[65];  \n    int r;  \n    for( r=10; r>=2; --r )  \n    {  \n       _itoa_s( -1, buffer, 65, r );  \n       printf( \"base %d: %s (%d chars)\\n\", r, buffer, strnlen(buffer, _countof(buffer)) );  \n    }  \n    printf( \"\\n\" );  \n    for( r=10; r>=2; --r )  \n    {  \n       _i64toa_s( -1L, buffer, 65, r );  \n       printf( \"base %d: %s (%d chars)\\n\", r, buffer, strnlen(buffer, _countof(buffer)) );  \n    }  \n    printf( \"\\n\" );  \n    for( r=10; r>=2; --r )  \n    {  \n       _ui64toa_s( 0xffffffffffffffffL, buffer, 65, r );  \n       printf( \"base %d: %s (%d chars)\\n\", r, buffer, strnlen(buffer, _countof(buffer)) );  \n    }  \n}  \n```  \n  \n## Output  \n  \n```  \nbase 10: -1 (2 chars)  \nbase 9: 12068657453 (11 chars)  \nbase 8: 37777777777 (11 chars)  \nbase 7: 211301422353 (12 chars)  \nbase 6: 1550104015503 (13 chars)  \nbase 5: 32244002423140 (14 chars)  \nbase 4: 3333333333333333 (16 chars)  \nbase 3: 102002022201221111210 (21 chars)  \nbase 2: 11111111111111111111111111111111 (32 chars)  \n  \nbase 10: -1 (2 chars)  \nbase 9: 145808576354216723756 (21 chars)  \nbase 8: 1777777777777777777777 (22 chars)  \nbase 7: 45012021522523134134601 (23 chars)  \nbase 6: 3520522010102100444244423 (25 chars)  \nbase 5: 2214220303114400424121122430 (28 chars)  \nbase 4: 33333333333333333333333333333333 (32 chars)  \nbase 3: 11112220022122120101211020120210210211220 (41 chars)  \nbase 2: 1111111111111111111111111111111111111111111111111111111111111111 (64 chars)  \n  \nbase 10: 18446744073709551615 (20 chars)  \nbase 9: 145808576354216723756 (21 chars)  \nbase 8: 1777777777777777777777 (22 chars)  \nbase 7: 45012021522523134134601 (23 chars)  \nbase 6: 3520522010102100444244423 (25 chars)  \nbase 5: 2214220303114400424121122430 (28 chars)  \nbase 4: 33333333333333333333333333333333 (32 chars)  \nbase 3: 11112220022122120101211020120210210211220 (41 chars)  \nbase 2: 1111111111111111111111111111111111111111111111111111111111111111 (64 chars)  \n```  \n  \n## .NET Framework Equivalent  \n [System::Convert::ToString](https://msdn.microsoft.com/en-us/library/system.convert.tostring.aspx)  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [_ltoa, _ltow](../../c-runtime-library/reference/ltoa-ltow.md)   \n [_ultoa, _ultow](../../c-runtime-library/reference/ultoa-ultow.md)"}