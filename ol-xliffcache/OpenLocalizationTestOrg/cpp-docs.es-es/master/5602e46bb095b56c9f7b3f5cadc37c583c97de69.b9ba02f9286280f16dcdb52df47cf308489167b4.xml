{"nodes":[{"pos":[12,57],"content":"student_t_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"student_t_distribution Class | Microsoft Docs","pos":[0,45]}]},{"pos":[827,855],"content":"student_t_distribution Class","linkify":"student_t_distribution Class","nodes":[{"content":"student_t_distribution Class","pos":[0,28]}]},{"pos":[856,895],"content":"Generates a Student's <bpt id=\"p1\">*</bpt>t<ept id=\"p1\">*</ept>-distribution.","source":"Generates a Student's *t*-distribution."},{"pos":[904,910],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1582,1592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The floating-point result type, defaults to <ph id=\"ph1\">`double`</ph>.","pos":[1610,1663],"source":" The floating-point result type, defaults to `double`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1664,1731],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"pos":[1740,1747],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class describes a distribution that produces values of a user-specified integral type, or type <ph id=\"ph1\">`double`</ph> if none is provided, distributed according to the Student's <bpt id=\"p1\">*</bpt>t<ept id=\"p1\">*</ept>-Distribution.","pos":[1751,1945],"source":"The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Student's *t*-Distribution."},{"content":"The following table links to articles about individual members.","pos":[1946,2009]},{"pos":[2033,2130],"content":"<bpt id=\"p1\">[</bpt>student_t_distribution::student_t_distribution<ept id=\"p1\">](#student_t_distribution__student_t_distribution)</ept>","source":"[student_t_distribution::student_t_distribution](#student_t_distribution__student_t_distribution)"},{"pos":[2233,2306],"content":"<bpt id=\"p1\">[</bpt>student_t_distribution::param_type<ept id=\"p1\">](#student_t_distribution__param_type)</ept>","source":"[student_t_distribution::param_type](#student_t_distribution__param_type)"},{"pos":[2314,2402],"content":"The property function <ph id=\"ph1\">`n()`</ph> returns the value for the stored distribution parameter <ph id=\"ph2\">`n`</ph>.","source":"The property function `n()` returns the value for the stored distribution parameter `n`."},{"pos":[2409,2523],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2530,2699],"content":"For detailed information about the Student's <bpt id=\"p1\">*</bpt>t<ept id=\"p1\">*</ept>-distribution, see the Wolfram MathWorld article <bpt id=\"p2\">[</bpt>Students t-Distribution<ept id=\"p2\">](http://go.microsoft.com/fwlink/LinkId=401094)</ept>.","source":"For detailed information about the Student's *t*-distribution, see the Wolfram MathWorld article [Students t-Distribution](http://go.microsoft.com/fwlink/LinkId=401094)."},{"pos":[2708,2715],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4338,4344],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[4912,4924],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4928,4949],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[4956,4974],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[4984,5093],"content":"<bpt id=\"p1\">&lt;a name=\"student_t_distribution__student_t_distribution\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  student_t_distribution::student_t_distribution","linkify":"<a name=\"student_t_distribution__student_t_distribution\"></a>  student_t_distribution::student_t_distribution","source":"<a name=\"student_t_distribution__student_t_distribution\"></a>  student_t_distribution::student_t_distribution"},{"content":"Constructs the distribution.","pos":[5097,5125]},{"pos":[5261,5271],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`n`</ph> distribution parameter.","pos":[5282,5313],"source":" The `n` distribution parameter."},{"content":"The parameter package used to construct the distribution.","pos":[5330,5387]},{"pos":[5397,5404],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5408,5435],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; n`</ph>","source":"**Precondition:** `0.0 < n`"},{"pos":[5442,5528],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`n`</ph> value holds the value <ph id=\"ph2\">`n`</ph>.","source":"The first constructor constructs an object whose stored `n` value holds the value `n`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[5535,5631],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[5632,5747],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[5757,5842],"content":"<bpt id=\"p1\">&lt;a name=\"student_t_distribution__param_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  student_t_distribution::param_type","linkify":"<a name=\"student_t_distribution__param_type\"></a>  student_t_distribution::param_type","source":"<a name=\"student_t_distribution__param_type\"></a>  student_t_distribution::param_type"},{"content":"Stores all the parameters of the distribution.","pos":[5846,5892]},{"pos":[6180,6190],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[6194,6295],"content":"See parent topic <bpt id=\"p1\">[</bpt>student_t_distribution Class<ept id=\"p1\">](../standard-library/student-t-distribution-class.md)</ept>.","source":"See parent topic [student_t_distribution Class](../standard-library/student-t-distribution-class.md)."},{"pos":[6305,6312],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6316,6343],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; n`</ph>","source":"**Precondition:** `0.0 < n`"},{"pos":[6350,6593],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"pos":[6602,6610],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6614,6656],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>","source":"[\\<random>](../standard-library/random.md)"}],"content":"---\ntitle: \"student_t_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::tr1::student_t_distribution\"\n  - \"tr1::student_t_distribution\"\n  - \"std.tr1.student_t_distribution\"\n  - \"random/std::tr1::student_t_distribution\"\n  - \"tr1.student_t_distribution\"\n  - \"student_t_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"student_t_distribution class\"\nms.assetid: 87b48127-9311-4d07-95df-833ed46bf0b1\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# student_t_distribution Class\nGenerates a Student's *t*-distribution.  \n  \n## Syntax  \n```  \nclass student_t_distribution  \n   {  \n   public:  // types  \n   typedef RealType result_type;  \n   struct param_type;  // constructor and reset functions  \n   explicit student_t_distribution(RealType n = 1.0);\n   explicit student_t_distribution(const param_type& parm);\n   void reset();\n   // generating functions  \n   template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   // property functions  \n   RealType n() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;\n   };  \n```  \n#### Parameters  \n `RealType`  \n The floating-point result type, defaults to `double`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Student's *t*-Distribution. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[student_t_distribution::student_t_distribution](#student_t_distribution__student_t_distribution)|`student_t_distribution::n`|`student_t_distribution::param`|  \n|`student_t_distribution::operator()`||[student_t_distribution::param_type](#student_t_distribution__param_type)|  \n  \n The property function `n()` returns the value for the stored distribution parameter `n`.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the Student's *t*-distribution, see the Wolfram MathWorld article [Students t-Distribution](http://go.microsoft.com/fwlink/LinkId=401094).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const double n, const int s) {  \n  \n    // uncomment to use a non-deterministic generator  \n    //    std::random_device gen;  \n    std::mt19937 gen(1701);  \n  \n    std::student_t_distribution<> distr(n);  \n  \n    std::cout << std::endl;  \n    std::cout << \"min() == \" << distr.min() << std::endl;  \n    std::cout << \"max() == \" << distr.max() << std::endl;  \n    std::cout << \"n() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.n() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<double, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Distribution for \" << s << \" samples:\" << std::endl;  \n    int counter = 0;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::fixed << std::setw(11) << ++counter << \": \"  \n            << std::setw(14) << std::setprecision(10) << elem.first << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    double n_dist = 0.5;  \n    int samples = 10;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter a floating point value for the 'n' distribution parameter (must be greater than zero): \";  \n    std::cin >> n_dist;  \n    std::cout << \"Enter an integer value for the sample count: \";  \n    std::cin >> samples;  \n  \n    test(n_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'n' distribution parameter (must be greater than zero): 1  \nEnter an integer value for the sample count: 10  \n \nmin() == -1.79769e+308  \nmax() == 1.79769e+308  \nn() == 1.0000000000  \nDistribution for 10 samples:  \n    1: -1.3084956212  \n    2: -1.0899518684  \n    3: -0.9568771388  \n    4: -0.9372088821  \n    5: -0.7381334669  \n    6: -0.2488074854  \n    7: -0.2028714601  \n    8: 1.4013074495  \n    9: 5.3244792236  \n    10: 92.7084335614  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"student_t_distribution__student_t_distribution\"></a>  student_t_distribution::student_t_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit student_t_distribution(RealType n = 1.0);\n\n \nexplicit student_t_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `n`  \n The `n` distribution parameter.  \n  \n `parm`  \n The parameter package used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 < n`  \n  \n The first constructor constructs an object whose stored `n` value holds the value `n`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"student_t_distribution__param_type\"></a>  student_t_distribution::param_type  \n Stores all the parameters of the distribution.  \n```cpp    \nstruct param_type {  \n   typedef student_t_distribution<RealType> distribution_type;  \n   param_type(RealType n = 1.0);\n   RealType n() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```  \n### Parameters  \n See parent topic [student_t_distribution Class](../standard-library/student-t-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 < n`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n\n"}