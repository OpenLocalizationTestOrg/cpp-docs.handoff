{"nodes":[{"pos":[12,67],"content":"collection_adapter::key_type (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"collection_adapter::key_type (STL-CLR) | Microsoft Docs","pos":[0,55]}]},{"content":"collection_adapter::key_type (STL/CLR)","pos":[660,698]},{"content":"The type of a dictionary key.","pos":[699,728]},{"content":"Syntax","pos":[737,743]},{"content":"Remarks","pos":[791,798]},{"pos":[802,949],"content":"The type is a synonym for the template parameter <ph id=\"ph1\">`Key`</ph>, in a specialization for <ph id=\"ph2\">`IDictionary`</ph> or <ph id=\"ph3\">`IDictionary&lt;Value&gt;`</ph>; otherwise it is not defined.","source":"The type is a synonym for the template parameter `Key`, in a specialization for `IDictionary` or `IDictionary<Value>`; otherwise it is not defined."},{"content":"Example","pos":[958,965]},{"content":"Requirements","pos":[1920,1932]},{"pos":[1936,1965],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/adapter&gt;","source":"**Header:** \\<cliext/adapter>"},{"pos":[1972,1993],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2002,2010]},{"content":"collection_adapter (STL/CLR)","pos":[2015,2043]},{"content":"collection_adapter::mapped_type (STL/CLR)","pos":[2091,2132]}],"content":"---\ntitle: \"collection_adapter::key_type (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::collection_adapter::key_type\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"key_type member [STL/CLR]\"\nms.assetid: 71ed32b0-af5b-4bac-ae09-2f5d08f0a79b\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# collection_adapter::key_type (STL/CLR)\nThe type of a dictionary key.  \n  \n## Syntax  \n  \n```  \ntypedef Key key_type;  \n```  \n  \n## Remarks  \n The type is a synonym for the template parameter `Key`, in a specialization for `IDictionary` or `IDictionary<Value>`; otherwise it is not defined.  \n  \n## Example  \n  \n```  \n// cliext_collection_adapter_key_type.cpp   \n// compile with: /clr   \n#include <cliext/adapter>   \n#include <cliext/map>   \n  \ntypedef cliext::map<wchar_t, int> Mymap;   \ntypedef cliext::collection_adapter<   \n    System::Collections::Generic::IDictionary<wchar_t, int>> Mycoll;   \ntypedef System::Collections::Generic::KeyValuePair<wchar_t,int> Mypair;   \nint main()   \n    {   \n    Mymap d1;   \n    d1.insert(Mymap::make_value(L'a', 1));   \n    d1.insert(Mymap::make_value(L'b', 2));   \n    d1.insert(Mymap::make_value(L'c', 3));   \n    Mycoll c1(%d1);   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Mypair elem in c1)   \n        {   \n        Mycoll::key_type key = elem.Key;   \n        Mycoll::mapped_type value = elem.Value;   \n        System::Console::Write(\" [{0} {1}]\", key, value);   \n        }   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n[a 1] [b 2] [c 3]  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/adapter>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [collection_adapter (STL/CLR)](../dotnet/collection-adapter-stl-clr.md)   \n [collection_adapter::mapped_type (STL/CLR)](../dotnet/collection-adapter-mapped-type-stl-clr.md)"}