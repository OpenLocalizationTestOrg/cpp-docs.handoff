{"nodes":[{"pos":[12,40],"content":"_expand_dbg | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_expand_dbg | Microsoft Docs","pos":[0,28]}]},{"pos":[987,998],"content":"_expand_dbg","linkify":"_expand_dbg","nodes":[{"content":"_expand_dbg","pos":[0,11]}]},{"content":"Resizes a specified block of memory in the heap by expanding or contracting the block (debug version only).","pos":[999,1106]},{"pos":[1115,1121],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1284,1294],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the previously allocated memory block.","pos":[1312,1361]},{"content":"Requested new size for the block (in bytes).","pos":[1381,1425]},{"content":"Requested type for resized block: <ph id=\"ph1\">`_CLIENT_BLOCK`</ph> or <ph id=\"ph2\">`_NORMAL_BLOCK`</ph>.","pos":[1447,1516],"source":" Requested type for resized block: `_CLIENT_BLOCK` or `_NORMAL_BLOCK`."},{"content":"Pointer to the name of the source file that requested expand operation or <ph id=\"ph1\">`NULL`</ph>.","pos":[1537,1618],"source":" Pointer to the name of the source file that requested expand operation or `NULL`."},{"content":"Line number in the source file where the expand operation was requested or <ph id=\"ph1\">`NULL`</ph>.","pos":[1641,1723],"source":" Line number in the source file where the expand operation was requested or `NULL`."},{"pos":[1730,1949],"content":"The <ph id=\"ph1\">`filename`</ph> and <ph id=\"ph2\">`linenumber`</ph> parameters are only available when <ph id=\"ph3\">`_expand_dbg`</ph> has been called explicitly or the <bpt id=\"p1\">[</bpt>_CRTDBG_MAP_ALLOC<ept id=\"p1\">](../../c-runtime-library/crtdbg-map-alloc.md)</ept> preprocessor constant has been defined.","source":"The `filename` and `linenumber` parameters are only available when `_expand_dbg` has been called explicitly or the [_CRTDBG_MAP_ALLOC](../../c-runtime-library/crtdbg-map-alloc.md) preprocessor constant has been defined."},{"pos":[1958,1970],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"On successful completion, <ph id=\"ph1\">`_expand_dbg`</ph> returns a pointer to the resized memory block.","pos":[1974,2060],"source":"On successful completion, `_expand_dbg` returns a pointer to the resized memory block."},{"content":"Because the memory is not moved, the address is the same as the userData.","pos":[2061,2134]},{"content":"If an error occurred or the block could not be expanded to the requested size, it returns <ph id=\"ph1\">`NULL`</ph>.","pos":[2135,2232],"source":" If an error occurred or the block could not be expanded to the requested size, it returns `NULL`."},{"content":"If a failure occurs, <ph id=\"ph1\">`errno`</ph> is with information from the operating system about the nature of the failure.","pos":[2233,2340],"source":" If a failure occurs, `errno` is with information from the operating system about the nature of the failure."},{"content":"For more information about <ph id=\"ph1\">`errno`</ph>, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[2341,2497],"source":" For more information about `errno`, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2506,2513],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_expand_dbg`</ph> function is a debug version of the _<bpt id=\"p1\">[</bpt>expand<ept id=\"p1\">](../../c-runtime-library/reference/expand.md)</ept> function.","pos":[2517,2634],"source":"The `_expand_dbg` function is a debug version of the _[expand](../../c-runtime-library/reference/expand.md) function."},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, each call to <ph id=\"ph1\">`_expand_dbg`</ph> is reduced to a call to <ph id=\"ph2\">`_expand`</ph>.","pos":[2635,2760],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, each call to `_expand_dbg` is reduced to a call to `_expand`."},{"content":"Both <ph id=\"ph1\">`_expand`</ph> and <ph id=\"ph2\">`_expand_dbg`</ph> resize a memory block in the base heap, but <ph id=\"ph3\">`_expand_dbg`</ph> accommodates several debugging features: buffers on either side of the user portion of the block to test for leaks, a block type parameter to track specific allocation types, and <ph id=\"ph4\">`filename`</ph><ph id=\"ph5\">/</ph><ph id=\"ph6\">`linenumber`</ph> information to determine the origin of allocation requests.","pos":[2761,3114],"source":" Both `_expand` and `_expand_dbg` resize a memory block in the base heap, but `_expand_dbg` accommodates several debugging features: buffers on either side of the user portion of the block to test for leaks, a block type parameter to track specific allocation types, and `filename`/`linenumber` information to determine the origin of allocation requests."},{"content":"<ph id=\"ph1\">`_expand_dbg`</ph> resizes the specified memory block with slightly more space than the requested <ph id=\"ph2\">`newSize`</ph>.","pos":[3121,3224],"source":"`_expand_dbg` resizes the specified memory block with slightly more space than the requested `newSize`."},{"content":"<ph id=\"ph1\">`newSize`</ph> might be greater or less than the size of the originally allocated memory block.","pos":[3225,3315],"source":"`newSize` might be greater or less than the size of the originally allocated memory block."},{"content":"The additional space is used by the debug heap manager to link the debug memory blocks and to provide the application with debug header information and overwrite buffers.","pos":[3316,3486]},{"content":"The resize is accomplished by either expanding or contracting the original memory block.","pos":[3487,3575]},{"content":"<ph id=\"ph1\">`_expand_dbg`</ph> does not move the memory block, as does the <bpt id=\"p1\">[</bpt>_realloc_dbg<ept id=\"p1\">](../../c-runtime-library/reference/realloc-dbg.md)</ept> function.","pos":[3576,3708],"source":"`_expand_dbg` does not move the memory block, as does the [_realloc_dbg](../../c-runtime-library/reference/realloc-dbg.md) function."},{"content":"When <ph id=\"ph1\">`newSize`</ph> is greater than the original block size, the memory block is expanded.","pos":[3715,3800],"source":"When `newSize` is greater than the original block size, the memory block is expanded."},{"content":"During an expansion, if the memory block cannot be expanded to accommodate the requested size, <ph id=\"ph1\">`NULL`</ph> is returned.","pos":[3801,3915],"source":" During an expansion, if the memory block cannot be expanded to accommodate the requested size, `NULL` is returned."},{"content":"When <ph id=\"ph1\">`newSize`</ph> is less than the original block size, the memory block is contracted until the new size is obtained.","pos":[3916,4031],"source":" When `newSize` is less than the original block size, the memory block is contracted until the new size is obtained."},{"content":"For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <bpt id=\"p1\">[</bpt>CRT Debug Heap Details<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[4038,4233],"source":"For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"For information about the allocation block types and how they are used, see <bpt id=\"p1\">[</bpt>Types of blocks on the debug heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[4234,4393],"source":" For information about the allocation block types and how they are used, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"For information about the differences between calling a standard heap function and its debug version in a debug build of an application, see <bpt id=\"p1\">[</bpt>Debug Versions of Heap Allocation Functions<ept id=\"p1\">](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)</ept>.","pos":[4394,4649],"source":" For information about the differences between calling a standard heap function and its debug version in a debug build of an application, see [Debug Versions of Heap Allocation Functions](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)."},{"content":"This function validates its parameters.","pos":[4656,4695]},{"content":"If <ph id=\"ph1\">`memblock`</ph> is a null pointer, or if size is greater than <ph id=\"ph2\">`_HEAP_MAXREQ`</ph>, this function invokes an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[4696,4912],"source":" If `memblock` is a null pointer, or if size is greater than `_HEAP_MAXREQ`, this function invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and the function returns <ph id=\"ph3\">`NULL`</ph>.","pos":[4913,5009],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns `NULL`."},{"pos":[5018,5030],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[5037,5044]},{"content":"Required header","pos":[5045,5060]},{"content":"<ph id=\"ph1\">\\&lt;</ph>crtdbg.h&gt;","pos":[5119,5130],"source":"\\<crtdbg.h>"},{"pos":[5138,5236],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[5245,5254],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[5258,5353],"content":"Debug versions of <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"pos":[5362,5369],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6924,6931],"content":"Comment","linkify":"Comment","nodes":[{"content":"Comment","pos":[0,7]}]},{"content":"The output of this program depends on your computer's ability to expand all the sections.","pos":[6935,7024]},{"content":"If all sections are expanded, the output is reflected in the Output section.","pos":[7025,7101]},{"pos":[7110,7135],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[7139,7154]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[7155,7202],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[7203,7328],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[7337,7345],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Debug Routines<ept id=\"p1\">](../../c-runtime-library/debug-routines.md)</ept><ph id=\"ph1\"> </ph>","pos":[7349,7409],"source":"[Debug Routines](../../c-runtime-library/debug-routines.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_malloc_dbg<ept id=\"p1\">](../../c-runtime-library/reference/malloc-dbg.md)</ept>","pos":[7412,7475],"source":" [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md)"}],"content":"---\ntitle: \"_expand_dbg | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_expand_dbg\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"expand_dbg\"\n  - \"_expand_dbg\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"memory blocks, changing size\"\n  - \"expand_dbg function\"\n  - \"_expand_dbg function\"\nms.assetid: dc58c91f-72a8-48c6-b643-fe130fb6c1fd\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _expand_dbg\nResizes a specified block of memory in the heap by expanding or contracting the block (debug version only).  \n  \n## Syntax  \n  \n```  \nvoid *_expand_dbg(   \n   void *userData,  \n   size_t newSize,  \n   int blockType,  \n   const char *filename,  \n   int linenumber   \n);  \n```  \n  \n#### Parameters  \n `userData`  \n Pointer to the previously allocated memory block.  \n  \n `newSize`  \n Requested new size for the block (in bytes).  \n  \n `blockType`  \n Requested type for resized block: `_CLIENT_BLOCK` or `_NORMAL_BLOCK`.  \n  \n `filename`  \n Pointer to the name of the source file that requested expand operation or `NULL`.  \n  \n `linenumber`  \n Line number in the source file where the expand operation was requested or `NULL`.  \n  \n The `filename` and `linenumber` parameters are only available when `_expand_dbg` has been called explicitly or the [_CRTDBG_MAP_ALLOC](../../c-runtime-library/crtdbg-map-alloc.md) preprocessor constant has been defined.  \n  \n## Return Value  \n On successful completion, `_expand_dbg` returns a pointer to the resized memory block. Because the memory is not moved, the address is the same as the userData. If an error occurred or the block could not be expanded to the requested size, it returns `NULL`. If a failure occurs, `errno` is with information from the operating system about the nature of the failure. For more information about `errno`, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `_expand_dbg` function is a debug version of the _[expand](../../c-runtime-library/reference/expand.md) function. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, each call to `_expand_dbg` is reduced to a call to `_expand`. Both `_expand` and `_expand_dbg` resize a memory block in the base heap, but `_expand_dbg` accommodates several debugging features: buffers on either side of the user portion of the block to test for leaks, a block type parameter to track specific allocation types, and `filename`/`linenumber` information to determine the origin of allocation requests.  \n  \n `_expand_dbg` resizes the specified memory block with slightly more space than the requested `newSize`. `newSize` might be greater or less than the size of the originally allocated memory block. The additional space is used by the debug heap manager to link the debug memory blocks and to provide the application with debug header information and overwrite buffers. The resize is accomplished by either expanding or contracting the original memory block. `_expand_dbg` does not move the memory block, as does the [_realloc_dbg](../../c-runtime-library/reference/realloc-dbg.md) function.  \n  \n When `newSize` is greater than the original block size, the memory block is expanded. During an expansion, if the memory block cannot be expanded to accommodate the requested size, `NULL` is returned. When `newSize` is less than the original block size, the memory block is contracted until the new size is obtained.  \n  \n For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details). For information about the allocation block types and how they are used, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details). For information about the differences between calling a standard heap function and its debug version in a debug build of an application, see [Debug Versions of Heap Allocation Functions](/visualstudio/debugger/debug-versions-of-heap-allocation-functions).  \n  \n This function validates its parameters. If `memblock` is a null pointer, or if size is greater than `_HEAP_MAXREQ`, this function invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns `NULL`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_expand_dbg`|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Libraries  \n Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n## Example  \n  \n```  \n// crt_expand_dbg.c  \n//  \n// This program allocates a block of memory using _malloc_dbg  \n// and then calls _msize_dbg to display the size of that block.  \n// Next, it uses _expand_dbg to expand the amount of  \n// memory used by the buffer and then calls _msize_dbg again to  \n// display the new amount of memory allocated to the buffer.  \n//  \n  \n#include <stdio.h>  \n#include <malloc.h>  \n#include <stdlib.h>  \n#include <crtdbg.h>  \n  \nint main( void )  \n{  \n   long *buffer;  \n   size_t size;  \n  \n   // Call _malloc_dbg to include the filename and line number  \n   // of our allocation request in the header  \n   buffer = (long *)_malloc_dbg( 40 * sizeof(long),  \n                                 _NORMAL_BLOCK, __FILE__, __LINE__ );  \n   if( buffer == NULL )  \n      exit( 1 );  \n  \n   // Get the size of the buffer by calling _msize_dbg  \n   size = _msize_dbg( buffer, _NORMAL_BLOCK );  \n   printf( \"Size of block after _malloc_dbg of 40 longs: %u\\n\", size );  \n  \n   // Expand the buffer using _expand_dbg and show the new size  \n   buffer = (long *)_expand_dbg( buffer, size + sizeof(long),  \n                                 _NORMAL_BLOCK, __FILE__, __LINE__ );  \n  \n   if( buffer == NULL )  \n      exit( 1 );  \n   size = _msize_dbg( buffer, _NORMAL_BLOCK );  \n   printf( \"Size of block after _expand_dbg of 1 more long: %u\\n\",  \n           size );  \n  \n   free( buffer );  \n   exit( 0 );  \n}  \n```  \n  \n```Output  \nSize of block after _malloc_dbg of 40 longs: 160  \nSize of block after _expand_dbg of 1 more long: 164  \n```  \n  \n## Comment  \n The output of this program depends on your computer's ability to expand all the sections. If all sections are expanded, the output is reflected in the Output section.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)   \n [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md)"}