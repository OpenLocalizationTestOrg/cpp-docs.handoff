{"nodes":[{"pos":[12,40],"content":"decay Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"decay Class | Microsoft Docs","pos":[0,28]}]},{"pos":[696,707],"content":"decay Class","linkify":"decay Class","nodes":[{"content":"decay Class","pos":[0,11]}]},{"content":"Produces the type as passed by value.","pos":[708,745]},{"content":"Makes the type non-reference, non-const, non-volatile, or makes a pointer to the type from a function or an array type.","pos":[746,865]},{"pos":[874,880],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1000,1010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type to modify.","pos":[1021,1040]},{"pos":[1049,1056],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the decay template to produce the resulting type as if the type was passed by value as an argument.","pos":[1060,1163]},{"content":"The template class member typedef <ph id=\"ph1\">`type`</ph> holds a modified type that is defined in the following stages:","pos":[1164,1267],"source":" The template class member typedef `type` holds a modified type that is defined in the following stages:"},{"pos":[1277,1332],"content":"The type <ph id=\"ph1\">`U`</ph> is defined as <ph id=\"ph2\">`remove_reference&lt;T&gt;::type`</ph>.","source":"The type `U` is defined as `remove_reference<T>::type`."},{"pos":[1342,1430],"content":"If <ph id=\"ph1\">`is_array&lt;U&gt;::value`</ph> is true, the modified type <ph id=\"ph2\">`type`</ph> is <ph id=\"ph3\">`remove_extent&lt;U&gt;::type *`</ph>.","source":"If `is_array<U>::value` is true, the modified type `type` is `remove_extent<U>::type *`."},{"pos":[1440,1538],"content":"Otherwise, if <ph id=\"ph1\">`is_function&lt;U&gt;::value`</ph> is true, the modified type <ph id=\"ph2\">`type`</ph> is <ph id=\"ph3\">`add_pointer&lt;U&gt;::type`</ph>.","source":"Otherwise, if `is_function<U>::value` is true, the modified type `type` is `add_pointer<U>::type`."},{"pos":[1548,1608],"content":"Otherwise, the modified type <ph id=\"ph1\">`type`</ph> is <ph id=\"ph2\">`remove_cv&lt;U&gt;::type`</ph>.","source":"Otherwise, the modified type `type` is `remove_cv<U>::type`."},{"pos":[1617,1629],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1633,1658],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[1665,1683],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1692,1700],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1704,1755],"content":"<bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept>","source":"[<type_traits>](../standard-library/type-traits.md)"}],"content":"---\ntitle: \"decay Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"decay\"\n  - \"std.tr1.decay\"\n  - \"std::tr1::decay\"\n  - \"std.decay\"\n  - \"std::decay\"\n  - \"type_traits/std::decay\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"decay class[TR1]\"\nms.assetid: 96baa2fd-c8e0-49af-be91-ba375ba7f9dc\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# decay Class\nProduces the type as passed by value. Makes the type non-reference, non-const, non-volatile, or makes a pointer to the type from a function or an array type.  \n  \n## Syntax  \n  \n```\ntemplate <class T>\nstruct decay;\n\ntemplate <class T>  \nusing decay_t = typename decay<T>::type;\n```  \n  \n#### Parameters  \n `T`  \n The type to modify.  \n  \n## Remarks  \n Use the decay template to produce the resulting type as if the type was passed by value as an argument. The template class member typedef `type` holds a modified type that is defined in the following stages:  \n  \n-   The type `U` is defined as `remove_reference<T>::type`.  \n  \n-   If `is_array<U>::value` is true, the modified type `type` is `remove_extent<U>::type *`.  \n  \n-   Otherwise, if `is_function<U>::value` is true, the modified type `type` is `add_pointer<U>::type`.  \n  \n-   Otherwise, the modified type `type` is `remove_cv<U>::type`.  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)\n\n\n\n"}