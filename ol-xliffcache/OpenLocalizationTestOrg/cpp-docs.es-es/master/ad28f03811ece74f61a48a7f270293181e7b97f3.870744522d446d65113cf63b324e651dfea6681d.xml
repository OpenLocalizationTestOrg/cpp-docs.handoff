{"nodes":[{"pos":[12,52],"content":"CRuntimeClass Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CRuntimeClass Structure | Microsoft Docs","pos":[0,40]}]},{"content":"CRuntimeClass Structure","pos":[732,755]},{"pos":[756,922],"content":"Each class derived from <ph id=\"ph1\">`CObject`</ph> is associated with a <ph id=\"ph2\">`CRuntimeClass`</ph> structure that you can use to obtain information about an object or its base class at run time.","source":"Each class derived from `CObject` is associated with a `CRuntimeClass` structure that you can use to obtain information about an object or its base class at run time."},{"content":"Syntax","pos":[931,937]},{"content":"Members","pos":[984,991]},{"content":"Public Methods","pos":[1001,1015]},{"content":"Name","pos":[1022,1026]},{"content":"Description","pos":[1027,1038]},{"content":"CRuntimeClass::CreateObject","pos":[1077,1104]},{"content":"Creates an object during run time.","pos":[1136,1170]},{"content":"CRuntimeClass::FromName","pos":[1176,1199]},{"content":"Creates an object during run time using the familiar class name.","pos":[1227,1291]},{"content":"CRuntimeClass::IsDerivedFrom","pos":[1297,1325]},{"content":"Determines if the class is derived from the specified class.","pos":[1358,1418]},{"content":"Public Data Members","pos":[1429,1448]},{"content":"Name","pos":[1455,1459]},{"content":"Description","pos":[1460,1471]},{"content":"CRuntimeClass::m_lpszClassName","pos":[1510,1540]},{"content":"The name of the class.","pos":[1575,1597]},{"content":"CRuntimeClass::m_nObjectSize","pos":[1603,1631]},{"content":"The size of the object in bytes.","pos":[1664,1696]},{"content":"CRuntimeClass::m_pBaseClass","pos":[1702,1729]},{"pos":[1761,1822],"content":"A pointer to the <ph id=\"ph1\">`CRuntimeClass`</ph> structure of the base class.","source":"A pointer to the `CRuntimeClass` structure of the base class."},{"content":"CRuntimeClass::m_pfnCreateObject","pos":[1828,1860]},{"content":"A pointer to the function that dynamically creates the object.","pos":[1897,1959]},{"content":"CRuntimeClass::m_pfnGetBaseClass","pos":[1965,1997]},{"pos":[2034,2113],"content":"Returns the <ph id=\"ph1\">`CRuntimeClass`</ph> structure (only available when dynamically linked).","source":"Returns the `CRuntimeClass` structure (only available when dynamically linked)."},{"content":"CRuntimeClass::m_wSchema","pos":[2119,2143]},{"content":"The schema number of the class.","pos":[2172,2203]},{"content":"Remarks","pos":[2213,2220]},{"pos":[2240,2296],"content":"is a structure and therefore does not have a base class."},{"content":"The ability to determine the class of an object at run time is useful when extra type checking of function arguments is needed, or when you must write special-purpose code based on the class of an object.","pos":[2303,2507]},{"content":"Run-time class information is not supported directly by the C++ language.","pos":[2508,2581]},{"content":"provides information on the related C++ object, such as a pointer to the <ph id=\"ph1\">`CRuntimeClass`</ph> of the base class and the ASCII class name of the related class.","pos":[2604,2757],"source":" provides information on the related C++ object, such as a pointer to the `CRuntimeClass` of the base class and the ASCII class name of the related class."},{"content":"This structure also implements various functions that can be used to dynamically create objects, specifying the type of object by using a familiar name, and determining if the related class is derived from a specific class.","pos":[2758,2981]},{"pos":[2988,3141],"content":"For more information on using <ph id=\"ph1\">`CRuntimeClass`</ph>, see the article <bpt id=\"p1\">[</bpt>Accessing Run-Time Class Information<ept id=\"p1\">](../../mfc/accessing-run-time-class-information.md)</ept>.","source":"For more information on using `CRuntimeClass`, see the article [Accessing Run-Time Class Information](../../mfc/accessing-run-time-class-information.md)."},{"content":"Inheritance Hierarchy","pos":[3150,3171]},{"content":"Requirements","pos":[3199,3211]},{"pos":[3215,3232],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afx.h","source":"**Header:** afx.h"},{"pos":[3286,3313],"content":"CRuntimeClass::CreateObject"},{"content":"Call this function to dynamically create the specified class during run time.","pos":[3317,3394]},{"content":"Parameters","pos":[3569,3579]},{"content":"The familiar name of the class to be created.","pos":[3602,3647]},{"content":"Return Value","pos":[3657,3669]},{"pos":[3673,3808],"content":"A pointer to the newly created object, or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the class name is not found or there is insufficient memory to create the object.","source":"A pointer to the newly created object, or **NULL** if the class name is not found or there is insufficient memory to create the object."},{"content":"Remarks","pos":[3818,3825]},{"content":"Classes derived from <ph id=\"ph1\">`CObject`</ph> can support dynamic creation, which is the ability to create an object of a specified class at run time.","pos":[3829,3964],"source":"Classes derived from `CObject` can support dynamic creation, which is the ability to create an object of a specified class at run time."},{"content":"Document, view, and frame classes, for example, should support dynamic creation.","pos":[3965,4045]},{"content":"For more information on dynamic creation and the <ph id=\"ph1\">`CreateObject`</ph> member, see <bpt id=\"p1\">[</bpt>CObject Class<ept id=\"p1\">](../../mfc/using-cobject.md)</ept> and <bpt id=\"p2\">[</bpt>CObject Class: Specifying Levels of Functionality<ept id=\"p2\">](../../mfc/specifying-levels-of-functionality.md)</ept>.","pos":[4046,4271],"source":" For more information on dynamic creation and the `CreateObject` member, see [CObject Class](../../mfc/using-cobject.md) and [CObject Class: Specifying Levels of Functionality](../../mfc/specifying-levels-of-functionality.md)."},{"content":"Example","pos":[4281,4288]},{"pos":[4293,4360],"content":"See the example for <bpt id=\"p1\">[</bpt>IsDerivedFrom<ept id=\"p1\">](#cruntimeclass__isderivedfrom)</ept>.","source":"See the example for [IsDerivedFrom](#cruntimeclass__isderivedfrom)."},{"pos":[4410,4433],"content":"CRuntimeClass::FromName"},{"pos":[4437,4532],"content":"Call this function to retrieve the <ph id=\"ph1\">`CRuntimeClass`</ph> structure associated with the familiar name.","source":"Call this function to retrieve the `CRuntimeClass` structure associated with the familiar name."},{"content":"Parameters","pos":[4683,4693]},{"content":"The familiar name of a class derived from <ph id=\"ph1\">`CObject`</ph>.","pos":[4716,4768],"source":" The familiar name of a class derived from `CObject`."},{"content":"Return Value","pos":[4778,4790]},{"content":"A pointer to a <ph id=\"ph1\">`CRuntimeClass`</ph> object, corresponding to the name as passed in <ph id=\"ph2\">`lpszClassName`</ph>.","pos":[4794,4888],"source":"A pointer to a `CRuntimeClass` object, corresponding to the name as passed in `lpszClassName`."},{"content":"The function returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no matching class name was found.","pos":[4889,4955],"source":" The function returns **NULL** if no matching class name was found."},{"content":"Example","pos":[4965,4972]},{"pos":[4987,5010],"content":"NVC_MFCCObjectSample#17"},{"pos":[5124,5152],"content":"CRuntimeClass::IsDerivedFrom"},{"pos":[5156,5275],"content":"Call this function to determine if the calling class is derived from the class specified in the <bpt id=\"p1\">*</bpt>pBaseClass<ept id=\"p1\">*</ept> parameter.","source":"Call this function to determine if the calling class is derived from the class specified in the *pBaseClass* parameter."},{"content":"Parameters","pos":[5362,5372]},{"content":"pBaseClass","pos":[5377,5387]},{"content":"The familiar name of a class derived from <ph id=\"ph1\">`CObject`</ph>.","pos":[5392,5444],"source":" The familiar name of a class derived from `CObject`."},{"content":"Return Value","pos":[5454,5466]},{"pos":[5470,5624],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the class calling <ph id=\"ph1\">`IsDerivedFrom`</ph> is derived from the base class whose <ph id=\"ph2\">`CRuntimeClass`</ph> structure is given as a parameter; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if the class calling `IsDerivedFrom` is derived from the base class whose `CRuntimeClass` structure is given as a parameter; otherwise **FALSE**."},{"content":"Remarks","pos":[5634,5641]},{"content":"The relationship is determined by \"walking\" from the member's class up the chain of derived classes all the way to the top.","pos":[5645,5768]},{"content":"This function only returns <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> if no match is found for the base class.","pos":[5769,5846],"source":" This function only returns **FALSE** if no match is found for the base class."},{"pos":[5854,6090],"content":"[!NOTE]\n To use the `CRuntimeClass` structure, you must include the `IMPLEMENT_DYNAMIC`, `IMPLEMENT_DYNCREATE`, or `IMPLEMENT_SERIAL` macro in the implementation of the class for which you want to retrieve run-time object information.","leadings":["","> "],"nodes":[{"content":"To use the <ph id=\"ph1\">`CRuntimeClass`</ph> structure, you must include the <ph id=\"ph2\">`IMPLEMENT_DYNAMIC`</ph>, <ph id=\"ph3\">`IMPLEMENT_DYNCREATE`</ph>, or <ph id=\"ph4\">`IMPLEMENT_SERIAL`</ph> macro in the implementation of the class for which you want to retrieve run-time object information.","pos":[9,234],"source":" To use the `CRuntimeClass` structure, you must include the `IMPLEMENT_DYNAMIC`, `IMPLEMENT_DYNCREATE`, or `IMPLEMENT_SERIAL` macro in the implementation of the class for which you want to retrieve run-time object information."}]},{"pos":[6097,6265],"content":"For more information on using <ph id=\"ph1\">`CRuntimeClass`</ph>, see the article <bpt id=\"p1\">[</bpt>CObject Class: Accessing Run-Time Class Information<ept id=\"p1\">](../../mfc/accessing-run-time-class-information.md)</ept>.","source":"For more information on using `CRuntimeClass`, see the article [CObject Class: Accessing Run-Time Class Information](../../mfc/accessing-run-time-class-information.md)."},{"content":"Example","pos":[6275,6282]},{"pos":[6297,6320],"content":"NVC_MFCCObjectSample#18"},{"pos":[6436,6466],"content":"CRuntimeClass::m_lpszClassName"},{"content":"A null-terminated string containing the ASCII class name.","pos":[6470,6527]},{"content":"Remarks","pos":[6537,6544]},{"pos":[6548,6642],"content":"This name can be used to create an instance of the class using the <ph id=\"ph1\">`FromName`</ph> member function.","source":"This name can be used to create an instance of the class using the `FromName` member function."},{"content":"Example","pos":[6652,6659]},{"pos":[6664,6731],"content":"See the example for <bpt id=\"p1\">[</bpt>IsDerivedFrom<ept id=\"p1\">](#cruntimeclass__isderivedfrom)</ept>.","source":"See the example for [IsDerivedFrom](#cruntimeclass__isderivedfrom)."},{"pos":[6786,6814],"content":"CRuntimeClass::m_nObjectSize"},{"content":"The size of the object, in bytes.","pos":[6818,6851]},{"content":"Remarks","pos":[6861,6868]},{"content":"If the object has data members that point to allocated memory, the size of that memory is not included.","pos":[6872,6975]},{"content":"Example","pos":[6985,6992]},{"pos":[6997,7064],"content":"See the example for <bpt id=\"p1\">[</bpt>IsDerivedFrom<ept id=\"p1\">](#cruntimeclass__isderivedfrom)</ept>.","source":"See the example for [IsDerivedFrom](#cruntimeclass__isderivedfrom)."},{"pos":[7118,7145],"content":"CRuntimeClass::m_pBaseClass"},{"pos":[7149,7281],"content":"If your application statically links to MFC, this data member contains a pointer to the <ph id=\"ph1\">`CRuntimeClass`</ph> structure of the base class.","source":"If your application statically links to MFC, this data member contains a pointer to the `CRuntimeClass` structure of the base class."},{"content":"Remarks","pos":[7291,7298]},{"pos":[7302,7419],"content":"If your application dynamically links to the MFC library, see <bpt id=\"p1\">[</bpt>m_pfnGetBaseClass<ept id=\"p1\">](#cruntimeclass__m_pfngetbaseclass)</ept>.","source":"If your application dynamically links to the MFC library, see [m_pfnGetBaseClass](#cruntimeclass__m_pfngetbaseclass)."},{"content":"Example","pos":[7429,7436]},{"pos":[7441,7508],"content":"See the example for <bpt id=\"p1\">[</bpt>IsDerivedFrom<ept id=\"p1\">](#cruntimeclass__isderivedfrom)</ept>.","source":"See the example for [IsDerivedFrom](#cruntimeclass__isderivedfrom)."},{"pos":[7567,7599],"content":"CRuntimeClass::m_pfnCreateObject"},{"content":"A function pointer to the default constructor that creates an object of your class.","pos":[7603,7686]},{"content":"Remarks","pos":[7696,7703]},{"pos":[7707,7815],"content":"This pointer is only valid if the class supports dynamic creation; otherwise, the function returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"This pointer is only valid if the class supports dynamic creation; otherwise, the function returns **NULL**."},{"pos":[7874,7906],"content":"CRuntimeClass::m_pfnGetBaseClass"},{"pos":[7910,8067],"content":"If your application uses the MFC library as a shared DLL, this data member points to a function that returns the <ph id=\"ph1\">`CRuntimeClass`</ph> structure of the base class.","source":"If your application uses the MFC library as a shared DLL, this data member points to a function that returns the `CRuntimeClass` structure of the base class."},{"content":"Remarks","pos":[8077,8084]},{"pos":[8088,8194],"content":"If your application statically links to the MFC library, see <bpt id=\"p1\">[</bpt>m_pBaseClass<ept id=\"p1\">](#cruntimeclass__m_pbaseclass)</ept>.","source":"If your application statically links to the MFC library, see [m_pBaseClass](#cruntimeclass__m_pbaseclass)."},{"content":"Example","pos":[8204,8211]},{"pos":[8216,8283],"content":"See the example for <bpt id=\"p1\">[</bpt>IsDerivedFrom<ept id=\"p1\">](#cruntimeclass__isderivedfrom)</ept>.","source":"See the example for [IsDerivedFrom](#cruntimeclass__isderivedfrom)."},{"pos":[8334,8358],"content":"CRuntimeClass::m_wSchema"},{"content":"The schema number ( -1 for nonserializable classes).","pos":[8362,8414]},{"content":"Remarks","pos":[8424,8431]},{"pos":[8435,8560],"content":"For more information on schema numbers, see the <bpt id=\"p1\">[</bpt>IMPLEMENT_SERIAL<ept id=\"p1\">](run-time-object-model-services.md#implement_serial)</ept> macro.","source":"For more information on schema numbers, see the [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro."},{"content":"Example","pos":[8570,8577]},{"pos":[8582,8649],"content":"See the example for <bpt id=\"p1\">[</bpt>IsDerivedFrom<ept id=\"p1\">](#cruntimeclass__isderivedfrom)</ept>.","source":"See the example for [IsDerivedFrom](#cruntimeclass__isderivedfrom)."},{"content":"See Also","pos":[8658,8666]},{"content":"Hierarchy Chart","pos":[8671,8686]},{"content":"CObject::GetRuntimeClass","pos":[8723,8747]},{"content":"CObject::IsKindOf","pos":[8817,8834]},{"content":"RUNTIME_CLASS","pos":[8897,8910]},{"content":"IMPLEMENT_DYNAMIC","pos":[8966,8983]},{"content":"IMPLEMENT_DYNCREATE","pos":[9043,9062]},{"content":"IMPLEMENT_SERIAL","pos":[9124,9140]}],"content":"---\ntitle: \"CRuntimeClass Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CRuntimeClass\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CRuntimeClass structure\"\n  - \"dynamic class information\"\n  - \"runtime, class information\"\n  - \"run-time class, CRuntimeClass structure\"\nms.assetid: de62b6ef-90d4-420f-8c70-f58b36976a2b\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CRuntimeClass Structure\nEach class derived from `CObject` is associated with a `CRuntimeClass` structure that you can use to obtain information about an object or its base class at run time.  \n  \n## Syntax  \n  \n```  \nstruct CRuntimeClass  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRuntimeClass::CreateObject](#cruntimeclass__createobject)|Creates an object during run time.|  \n|[CRuntimeClass::FromName](#cruntimeclass__fromname)|Creates an object during run time using the familiar class name.|  \n|[CRuntimeClass::IsDerivedFrom](#cruntimeclass__isderivedfrom)|Determines if the class is derived from the specified class.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRuntimeClass::m_lpszClassName](#cruntimeclass__m_lpszclassname)|The name of the class.|  \n|[CRuntimeClass::m_nObjectSize](#cruntimeclass__m_nobjectsize)|The size of the object in bytes.|  \n|[CRuntimeClass::m_pBaseClass](#cruntimeclass__m_pbaseclass)|A pointer to the `CRuntimeClass` structure of the base class.|  \n|[CRuntimeClass::m_pfnCreateObject](#cruntimeclass__m_pfncreateobject)|A pointer to the function that dynamically creates the object.|  \n|[CRuntimeClass::m_pfnGetBaseClass](#cruntimeclass__m_pfngetbaseclass)|Returns the `CRuntimeClass` structure (only available when dynamically linked).|  \n|[CRuntimeClass::m_wSchema](#cruntimeclass__m_wschema)|The schema number of the class.|  \n  \n## Remarks  \n `CRuntimeClass` is a structure and therefore does not have a base class.  \n  \n The ability to determine the class of an object at run time is useful when extra type checking of function arguments is needed, or when you must write special-purpose code based on the class of an object. Run-time class information is not supported directly by the C++ language.  \n  \n `CRuntimeClass` provides information on the related C++ object, such as a pointer to the `CRuntimeClass` of the base class and the ASCII class name of the related class. This structure also implements various functions that can be used to dynamically create objects, specifying the type of object by using a familiar name, and determining if the related class is derived from a specific class.  \n  \n For more information on using `CRuntimeClass`, see the article [Accessing Run-Time Class Information](../../mfc/accessing-run-time-class-information.md).  \n  \n## Inheritance Hierarchy  \n `CRuntimeClass`  \n  \n## Requirements  \n **Header:** afx.h  \n  \n##  <a name=\"cruntimeclass__createobject\"></a>  CRuntimeClass::CreateObject  \n Call this function to dynamically create the specified class during run time.  \n  \n```  \nCObject* CreateObject();\n\n \nstatic CObject* PASCAL CreateObject(LPCSTR lpszClassName);\n\n \nstatic CObject* PASCAL CreateObject(LPCWSTR lpszClassName);\n```  \n  \n### Parameters  \n `lpszClassName`  \n The familiar name of the class to be created.  \n  \n### Return Value  \n A pointer to the newly created object, or **NULL** if the class name is not found or there is insufficient memory to create the object.  \n  \n### Remarks  \n Classes derived from `CObject` can support dynamic creation, which is the ability to create an object of a specified class at run time. Document, view, and frame classes, for example, should support dynamic creation. For more information on dynamic creation and the `CreateObject` member, see [CObject Class](../../mfc/using-cobject.md) and [CObject Class: Specifying Levels of Functionality](../../mfc/specifying-levels-of-functionality.md).  \n  \n### Example  \n  See the example for [IsDerivedFrom](#cruntimeclass__isderivedfrom).  \n  \n##  <a name=\"cruntimeclass__fromname\"></a>  CRuntimeClass::FromName  \n Call this function to retrieve the `CRuntimeClass` structure associated with the familiar name.  \n  \n```  \nstatic CRuntimeClass* PASCAL FromName(LPCSTR lpszClassName);\n\n \nstatic CRuntimeClass* PASCAL FromName(LPCWSTR lpszClassName);\n```  \n  \n### Parameters  \n `lpszClassName`  \n The familiar name of a class derived from `CObject`.  \n  \n### Return Value  \n A pointer to a `CRuntimeClass` object, corresponding to the name as passed in `lpszClassName`. The function returns **NULL** if no matching class name was found.  \n  \n### Example  \n [!code-cpp[NVC_MFCCObjectSample#17](../../mfc/codesnippet/cpp/cruntimeclass-structure_1.cpp)]  \n  \n##  <a name=\"cruntimeclass__isderivedfrom\"></a>  CRuntimeClass::IsDerivedFrom  \n Call this function to determine if the calling class is derived from the class specified in the *pBaseClass* parameter.  \n  \n```  \nBOOL IsDerivedFrom(const CRuntimeClass* pBaseClass) const;\n\n \n```  \n  \n### Parameters  \n *pBaseClass*  \n The familiar name of a class derived from `CObject`.  \n  \n### Return Value  \n **TRUE** if the class calling `IsDerivedFrom` is derived from the base class whose `CRuntimeClass` structure is given as a parameter; otherwise **FALSE**.  \n  \n### Remarks  \n The relationship is determined by \"walking\" from the member's class up the chain of derived classes all the way to the top. This function only returns **FALSE** if no match is found for the base class.  \n  \n> [!NOTE]\n>  To use the `CRuntimeClass` structure, you must include the `IMPLEMENT_DYNAMIC`, `IMPLEMENT_DYNCREATE`, or `IMPLEMENT_SERIAL` macro in the implementation of the class for which you want to retrieve run-time object information.  \n  \n For more information on using `CRuntimeClass`, see the article [CObject Class: Accessing Run-Time Class Information](../../mfc/accessing-run-time-class-information.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCCObjectSample#18](../../mfc/codesnippet/cpp/cruntimeclass-structure_2.cpp)]  \n  \n##  <a name=\"cruntimeclass__m_lpszclassname\"></a>  CRuntimeClass::m_lpszClassName  \n A null-terminated string containing the ASCII class name.  \n  \n### Remarks  \n This name can be used to create an instance of the class using the `FromName` member function.  \n  \n### Example  \n  See the example for [IsDerivedFrom](#cruntimeclass__isderivedfrom).  \n  \n##  <a name=\"cruntimeclass__m_nobjectsize\"></a>  CRuntimeClass::m_nObjectSize  \n The size of the object, in bytes.  \n  \n### Remarks  \n If the object has data members that point to allocated memory, the size of that memory is not included.  \n  \n### Example  \n  See the example for [IsDerivedFrom](#cruntimeclass__isderivedfrom).  \n  \n##  <a name=\"cruntimeclass__m_pbaseclass\"></a>  CRuntimeClass::m_pBaseClass  \n If your application statically links to MFC, this data member contains a pointer to the `CRuntimeClass` structure of the base class.  \n  \n### Remarks  \n If your application dynamically links to the MFC library, see [m_pfnGetBaseClass](#cruntimeclass__m_pfngetbaseclass).  \n  \n### Example  \n  See the example for [IsDerivedFrom](#cruntimeclass__isderivedfrom).  \n  \n##  <a name=\"cruntimeclass__m_pfncreateobject\"></a>  CRuntimeClass::m_pfnCreateObject  \n A function pointer to the default constructor that creates an object of your class.  \n  \n### Remarks  \n This pointer is only valid if the class supports dynamic creation; otherwise, the function returns **NULL**.  \n  \n##  <a name=\"cruntimeclass__m_pfngetbaseclass\"></a>  CRuntimeClass::m_pfnGetBaseClass  \n If your application uses the MFC library as a shared DLL, this data member points to a function that returns the `CRuntimeClass` structure of the base class.  \n  \n### Remarks  \n If your application statically links to the MFC library, see [m_pBaseClass](#cruntimeclass__m_pbaseclass).  \n  \n### Example  \n  See the example for [IsDerivedFrom](#cruntimeclass__isderivedfrom).  \n  \n##  <a name=\"cruntimeclass__m_wschema\"></a>  CRuntimeClass::m_wSchema  \n The schema number ( -1 for nonserializable classes).  \n  \n### Remarks  \n For more information on schema numbers, see the [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro.  \n  \n### Example  \n  See the example for [IsDerivedFrom](#cruntimeclass__isderivedfrom).  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CObject::GetRuntimeClass](../../mfc/reference/cobject-class.md#cobject__getruntimeclass)   \n [CObject::IsKindOf](../../mfc/reference/cobject-class.md#cobject__iskindof)   \n [RUNTIME_CLASS](run-time-object-model-services.md#runtime_class)   \n [IMPLEMENT_DYNAMIC](run-time-object-model-services.md#implement_dynamic)   \n [IMPLEMENT_DYNCREATE](run-time-object-model-services.md#implement_dyncreate)   \n [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial)\n\n\n\n"}