{"nodes":[{"pos":[12,35],"content":"rewind | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"rewind | Microsoft Docs","pos":[0,23]}]},{"content":"rewind","pos":[1002,1008]},{"content":"Repositions the file pointer to the beginning of a file.","pos":[1009,1065]},{"content":"Syntax","pos":[1074,1080]},{"content":"Parameters","pos":[1154,1164]},{"content":"Pointer to <bpt id=\"p1\">**</bpt>FILE<ept id=\"p1\">**</ept> structure.","pos":[1180,1210],"source":" Pointer to **FILE** structure."},{"content":"Remarks","pos":[1219,1226]},{"content":"The <bpt id=\"p1\">**</bpt>rewind<ept id=\"p1\">**</ept> function repositions the file pointer associated with <ph id=\"ph1\">`stream`</ph> to the beginning of the file.","pos":[1230,1337],"source":"The **rewind** function repositions the file pointer associated with `stream` to the beginning of the file."},{"content":"A call to <bpt id=\"p1\">**</bpt>rewind<ept id=\"p1\">**</ept> is similar to","pos":[1338,1372],"source":" A call to **rewind** is similar to"},{"pos":[1379,1432],"content":"<bpt id=\"p1\">**</bpt>(void) fseek(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`stream`</ph><bpt id=\"p2\">**</bpt>, 0L,<ept id=\"p2\">**</ept> <ph id=\"ph2\">`SEEK_SET`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**(void) fseek(** `stream`**, 0L,** `SEEK_SET` **);**"},{"content":"However, unlike <ph id=\"ph1\">`fseek`</ph>, <bpt id=\"p1\">**</bpt>rewind<ept id=\"p1\">**</ept> clears the error indicators for the stream as well as the end-of-file indicator.","pos":[1439,1555],"source":"However, unlike `fseek`, **rewind** clears the error indicators for the stream as well as the end-of-file indicator."},{"content":"Also, unlike <ph id=\"ph1\">`fseek`</ph>, <bpt id=\"p1\">**</bpt>rewind<ept id=\"p1\">**</ept> does not return a value to indicate whether the pointer was successfully moved.","pos":[1556,1668],"source":" Also, unlike `fseek`, **rewind** does not return a value to indicate whether the pointer was successfully moved."},{"pos":[1675,1794],"content":"To clear the keyboard buffer, use <bpt id=\"p1\">**</bpt>rewind<ept id=\"p1\">**</ept> with the stream <ph id=\"ph1\">`stdin`</ph>, which is associated with the keyboard by default.","source":"To clear the keyboard buffer, use **rewind** with the stream `stdin`, which is associated with the keyboard by default."},{"content":"If stream is a <ph id=\"ph1\">`NULL`</ph> pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1801,1962],"source":"If stream is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function returns and <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[1963,2053],"source":" If execution is allowed to continue, this function returns and `errno` is set to `EINVAL`."},{"pos":[2060,2228],"content":"For information on these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Requirements","pos":[2237,2249]},{"content":"Routine","pos":[2256,2263]},{"content":"Required header","pos":[2264,2279]},{"content":"rewind","pos":[2326,2332]},{"content":"stdio.h&gt;","pos":[2337,2345],"source":"stdio.h>"},{"pos":[2353,2477],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[2486,2495]},{"pos":[2499,2591],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"content":"Example","pos":[2600,2607]},{"content":"Output","pos":[3416,3422]},{"content":".NET Framework Equivalent","pos":[3515,3540]},{"content":"Not applicable.","pos":[3544,3559]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3560,3607],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3608,3733],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[3742,3750]},{"content":"Stream I/O","pos":[3755,3765]}],"content":"---\ntitle: \"rewind | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"rewind\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"rewind\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"rewind function\"\n  - \"repositioning file pointers\"\n  - \"file pointers [C++], repositioning\"\n  - \"file pointers [C++]\"\nms.assetid: 1a460ce1-28d8-4b5e-83a6-633dca29c28a\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# rewind\nRepositions the file pointer to the beginning of a file.  \n  \n## Syntax  \n  \n```  \n  \n      void rewind(  \n   FILE *stream   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to **FILE** structure.  \n  \n## Remarks  \n The **rewind** function repositions the file pointer associated with `stream` to the beginning of the file. A call to **rewind** is similar to  \n  \n **(void) fseek(** `stream`**, 0L,** `SEEK_SET` **);**  \n  \n However, unlike `fseek`, **rewind** clears the error indicators for the stream as well as the end-of-file indicator. Also, unlike `fseek`, **rewind** does not return a value to indicate whether the pointer was successfully moved.  \n  \n To clear the keyboard buffer, use **rewind** with the stream `stdin`, which is associated with the keyboard by default.  \n  \n If stream is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function returns and `errno` is set to `EINVAL`.  \n  \n For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|**rewind**|\\<stdio.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_rewind.c  \n/* This program first opens a file named  \n * crt_rewind.out for input and output and writes two  \n * integers to the file. Next, it uses rewind to  \n * reposition the file pointer to the beginning of  \n * the file and reads the data back in.  \n */  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   FILE *stream;  \n   int data1, data2;  \n  \n   data1 = 1;  \n   data2 = -37;  \n  \n   fopen_s( &stream, \"crt_rewind.out\", \"w+\" );  \n   if( stream != NULL )  \n   {  \n      fprintf( stream, \"%d %d\", data1, data2 );  \n      printf( \"The values written are: %d and %d\\n\", data1, data2 );  \n      rewind( stream );  \n      fscanf_s( stream, \"%d %d\", &data1, &data2 );  \n      printf( \"The values read are: %d and %d\\n\", data1, data2 );  \n      fclose( stream );  \n   }  \n}  \n```  \n  \n## Output  \n  \n```  \nThe values written are: 1 and -37  \nThe values read are: 1 and -37  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)"}