{"nodes":[{"pos":[12,67],"content":"sscanf, _sscanf_l, swscanf, _swscanf_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"sscanf, _sscanf_l, swscanf, _swscanf_l | Microsoft Docs","pos":[0,55]}]},{"pos":[1338,1376],"content":"sscanf, _sscanf_l, swscanf, _swscanf_l","linkify":"sscanf, _sscanf_l, swscanf, _swscanf_l","nodes":[{"content":"sscanf, _sscanf_l, swscanf, _swscanf_l","pos":[0,38]}]},{"content":"Read formatted data from a string.","pos":[1377,1411]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)</ept>.","pos":[1412,1600],"source":" More secure versions of these functions are available; see [sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)."},{"pos":[1609,1615],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2073,2083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Stored data","pos":[2099,2110]},{"content":"Format-control string.","pos":[2129,2151]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)</ept>.","pos":[2152,2285],"source":" For more information, see [Format Specifications](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md)."},{"content":"Optional arguments","pos":[2306,2324]},{"content":"The locale to use","pos":[2343,2360]},{"pos":[2369,2381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Each of these functions returns the number of fields successfully converted and assigned; the return value does not include fields that were read but not assigned.","pos":[2385,2548]},{"content":"A return value of 0 indicates that no fields were assigned.","pos":[2549,2608]},{"content":"The return value is <ph id=\"ph1\">`EOF`</ph> for an error or if the end of the string is reached before the first conversion.","pos":[2609,2715],"source":" The return value is `EOF` for an error or if the end of the string is reached before the first conversion."},{"content":"If <ph id=\"ph1\">`buffer`</ph> or <ph id=\"ph2\">`format`</ph> is a <ph id=\"ph3\">`NULL`</ph> pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2722,2897],"source":"If `buffer` or `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[2898,2989],"source":" If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`."},{"pos":[2996,3164],"content":"For information on these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[3173,3180],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`sscanf`</ph> function reads data from <ph id=\"ph2\">`buffer`</ph> into the location given by each <ph id=\"ph3\">`argument`</ph>.","pos":[3184,3274],"source":"The `sscanf` function reads data from `buffer` into the location given by each `argument`."},{"content":"Every <ph id=\"ph1\">`argument`</ph> must be a pointer to a variable with a type that corresponds to a type specifier in <ph id=\"ph2\">`format`</ph>.","pos":[3275,3385],"source":" Every `argument` must be a pointer to a variable with a type that corresponds to a type specifier in `format`."},{"content":"The <ph id=\"ph1\">`format`</ph> argument controls the interpretation of the input fields and has the same form and function as the <ph id=\"ph2\">`format`</ph> argument for the <ph id=\"ph3\">`scanf`</ph> function.","pos":[3386,3541],"source":" The `format` argument controls the interpretation of the input fields and has the same form and function as the `format` argument for the `scanf` function."},{"content":"If copying takes place between strings that overlap, the behavior is undefined.","pos":[3542,3621]},{"pos":[3629,3840],"content":"[!IMPORTANT]\n When reading a string with `sscanf`, always specify a width for the `%s` format (for example, `\"%32s\"` instead of `\"%s\"`); otherwise, improperly formatted input can easily cause a buffer overrun.","leadings":["","> "],"nodes":[{"content":"When reading a string with <ph id=\"ph1\">`sscanf`</ph>, always specify a width for the <ph id=\"ph2\">`%s`</ph> format (for example, <ph id=\"ph3\">`\"%32s\"`</ph> instead of <ph id=\"ph4\">`\"%s\"`</ph>); otherwise, improperly formatted input can easily cause a buffer overrun.","pos":[14,209],"source":" When reading a string with `sscanf`, always specify a width for the `%s` format (for example, `\"%32s\"` instead of `\"%s\"`); otherwise, improperly formatted input can easily cause a buffer overrun."}]},{"content":"<ph id=\"ph1\">`swscanf`</ph> is a wide-character version of <ph id=\"ph2\">`sscanf`</ph>; the arguments to <ph id=\"ph3\">`swscanf`</ph> are wide-character strings.","pos":[3847,3952],"source":"`swscanf` is a wide-character version of `sscanf`; the arguments to `swscanf` are wide-character strings."},{"content":"<ph id=\"ph1\">`sscanf`</ph>does not handle multibyte hexadecimal characters.","pos":[3953,4010],"source":"`sscanf`does not handle multibyte hexadecimal characters."},{"content":"<ph id=\"ph1\">`swscanf`</ph> does not handle Unicode full-width hexadecimal or \"compatibility zone\" characters.","pos":[4011,4103],"source":"`swscanf` does not handle Unicode full-width hexadecimal or \"compatibility zone\" characters."},{"content":"Otherwise, <ph id=\"ph1\">`swscanf`</ph> and <ph id=\"ph2\">`sscanf`</ph> behave identically.","pos":[4104,4157],"source":" Otherwise, `swscanf` and `sscanf` behave identically."},{"pos":[4164,4320],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[4330,4359],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[4366,4381]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[4382,4410],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[4411,4424]},{"content":"_UNICODE defined","pos":[4425,4441]},{"pos":[4656,4668],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4675,4682]},{"content":"Required header","pos":[4683,4698]},{"pos":[4743,4764],"content":"<ph id=\"ph1\">`sscanf`</ph>, <ph id=\"ph2\">`_sscanf_l`</ph>","source":"`sscanf`, `_sscanf_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[4765,4775],"source":"\\<stdio.h>"},{"pos":[4780,4803],"content":"<ph id=\"ph1\">`swscanf`</ph>, <ph id=\"ph2\">`_swscanf_l`</ph>","source":"`swscanf`, `_swscanf_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[4804,4828],"source":"\\<stdio.h> or \\<wchar.h>"},{"pos":[4836,4960],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4969,4976],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5926,5951],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[5955,6075],"content":"See <ph id=\"ph1\">`Parse`</ph> methods, such as <bpt id=\"p1\">[</bpt>System::Double::Parse<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)</ept>.","source":"See `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx)."},{"pos":[6084,6092],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[6096,6148],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fscanf, _fscanf_l, fwscanf, _fwscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[6151,6265],"source":" [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>scanf, _scanf_l, wscanf, _wscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[6268,6374],"source":" [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)</ept><ph id=\"ph2\"> </ph>","pos":[6377,6525],"source":" [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>snprintf, _snprintf, _snprintf_l, _snwprintf, _snwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md)</ept>","pos":[6528,6678],"source":" [snprintf, _snprintf, _snprintf_l, _snwprintf, _snwprintf_l](../../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md)"}],"content":"---\ntitle: \"sscanf, _sscanf_l, swscanf, _swscanf_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"swscanf\"\n  - \"sscanf\"\n  - \"_sscanf_l\"\n  - \"_swscanf_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_sscanf_l\"\n  - \"_stscanf\"\n  - \"swscanf\"\n  - \"_stscanf_l\"\n  - \"sscanf\"\n  - \"_swscanf_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"swscanf function\"\n  - \"_stscanf function\"\n  - \"sscanf function\"\n  - \"_stscanf_l function\"\n  - \"_sscanf_l function\"\n  - \"_swscanf_l function\"\n  - \"swscanf_l function\"\n  - \"strings [C++], reading data from\"\n  - \"stscanf function\"\n  - \"reading data, strings\"\n  - \"strings [C++], reading\"\n  - \"sscanf_l function\"\n  - \"stscanf_l function\"\nms.assetid: c2dcf0d2-9798-499f-a4a8-06f7e2b9a80c\ncaps.latest.revision: 26\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# sscanf, _sscanf_l, swscanf, _swscanf_l\nRead formatted data from a string. More secure versions of these functions are available; see [sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md).  \n  \n## Syntax  \n  \n```  \nint sscanf(  \n   const char *buffer,  \n   const char *format [,  \n   argument ] ...   \n);  \nint _sscanf_l(  \n   const char *buffer,  \n   const char *format,  \n   locale_t locale [,  \n   argument ] ...   \n);  \nint swscanf(  \n   const wchar_t *buffer,  \n   const wchar_t *format [,  \n   argument ] ...   \n);  \nint _swscanf_l(  \n   const wchar_t *buffer,  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument ] ...   \n);  \n```  \n  \n#### Parameters  \n `buffer`  \n Stored data  \n  \n `format`  \n Format-control string. For more information, see [Format Specifications](../../c-runtime-library/format-specification-fields-scanf-and-wscanf-functions.md).  \n  \n `argument`  \n Optional arguments  \n  \n `locale`  \n The locale to use  \n  \n## Return Value  \n Each of these functions returns the number of fields successfully converted and assigned; the return value does not include fields that were read but not assigned. A return value of 0 indicates that no fields were assigned. The return value is `EOF` for an error or if the end of the string is reached before the first conversion.  \n  \n If `buffer` or `format` is a `NULL` pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`.  \n  \n For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `sscanf` function reads data from `buffer` into the location given by each `argument`. Every `argument` must be a pointer to a variable with a type that corresponds to a type specifier in `format`. The `format` argument controls the interpretation of the input fields and has the same form and function as the `format` argument for the `scanf` function. If copying takes place between strings that overlap, the behavior is undefined.  \n  \n> [!IMPORTANT]\n>  When reading a string with `sscanf`, always specify a width for the `%s` format (for example, `\"%32s\"` instead of `\"%s\"`); otherwise, improperly formatted input can easily cause a buffer overrun.  \n  \n `swscanf` is a wide-character version of `sscanf`; the arguments to `swscanf` are wide-character strings. `sscanf`does not handle multibyte hexadecimal characters. `swscanf` does not handle Unicode full-width hexadecimal or \"compatibility zone\" characters. Otherwise, `swscanf` and `sscanf` behave identically.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_stscanf`|`sscanf`|`sscanf`|`swscanf`|  \n|`_stscanf_l`|`_sscanf_l`|`_sscanf_l`|`_swscanf_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`sscanf`, `_sscanf_l`|\\<stdio.h>|  \n|`swscanf`, `_swscanf_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_sscanf.c  \n// compile with: /W3  \n// This program uses sscanf to read data items  \n// from a string named tokenstring, then displays them.  \n  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   char  tokenstring[] = \"15 12 14...\";  \n   char  s[81];  \n   char  c;  \n   int   i;  \n   float fp;  \n  \n   // Input various data from tokenstring:  \n   // max 80 character string:  \n   sscanf( tokenstring, \"%80s\", s ); // C4996  \n   sscanf( tokenstring, \"%c\", &c );  // C4996  \n   sscanf( tokenstring, \"%d\", &i );  // C4996  \n   sscanf( tokenstring, \"%f\", &fp ); // C4996  \n   // Note: sscanf is deprecated; consider using sscanf_s instead  \n  \n   // Output the data read  \n   printf( \"String    = %s\\n\", s );  \n   printf( \"Character = %c\\n\", c );  \n   printf( \"Integer:  = %d\\n\", i );  \n   printf( \"Real:     = %f\\n\", fp );  \n}  \n```  \n  \n```Output  \nString    = 15  \nCharacter = 1  \nInteger:  = 15  \nReal:     = 15.000000  \n```  \n  \n## .NET Framework Equivalent  \n See `Parse` methods, such as [System::Double::Parse](https://msdn.microsoft.com/en-us/library/system.double.parse.aspx).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)   \n [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [snprintf, _snprintf, _snprintf_l, _snwprintf, _snwprintf_l](../../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md)"}