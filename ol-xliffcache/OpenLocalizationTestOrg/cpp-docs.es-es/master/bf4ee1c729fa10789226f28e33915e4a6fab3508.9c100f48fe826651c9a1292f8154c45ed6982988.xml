{"nodes":[{"pos":[12,46],"content":"vprintf Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vprintf Functions | Microsoft Docs","pos":[0,34]}]},{"content":"vprintf Functions","pos":[789,806]},{"content":"Each of the <ph id=\"ph1\">`vprintf`</ph> functions takes a pointer to an argument list, then formats and writes the given data to a particular destination.","pos":[807,943],"source":"Each of the `vprintf` functions takes a pointer to an argument list, then formats and writes the given data to a particular destination."},{"content":"The functions differ in the parameter validation performed, whether the functions take wide or single-byte character strings, the output destination, and the support for specifying the order in which parameters are used in the format string.","pos":[944,1185]},{"content":"_vcprintf, _vcwprintf","pos":[1207,1228]},{"content":"vfprintf, vfwprintf","pos":[1308,1327]},{"content":"_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l","pos":[1411,1467]},{"content":"vfprintf_s, _vfprintf_s_l, vfwprintf_s, _vfwprintf_s_l","pos":[1555,1609]},{"content":"vprintf, vwprintf","pos":[1701,1718]},{"content":"_vprintf_p, _vprintf_p_l, _vwprintf_p, _vwprintf_p_l","pos":[1794,1846]},{"content":"vprintf_s, _vprintf_s_l, vwprintf_s, _vwprintf_s_l","pos":[1934,1984]},{"content":"vsprintf, vswprintf","pos":[2068,2087]},{"content":"_vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l","pos":[2183,2239]},{"content":"vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l","pos":[2327,2381]},{"content":"_vscprintf, _vscprintf_l, _vscwprintf, _vscwprintf_l","pos":[2473,2525]},{"content":"_vsnprintf, _vsnwprintf","pos":[2609,2632]},{"content":"Remarks","pos":[2734,2741]},{"content":"The <ph id=\"ph1\">`vprintf`</ph> functions are similar to their counterpart functions as listed in the following table.","pos":[2745,2845],"source":"The `vprintf` functions are similar to their counterpart functions as listed in the following table."},{"content":"However, each <ph id=\"ph1\">`vprintf`</ph> function accepts a pointer to an argument list, whereas each of the counterpart functions accepts an argument list.","pos":[2846,2985],"source":" However, each `vprintf` function accepts a pointer to an argument list, whereas each of the counterpart functions accepts an argument list."},{"content":"These functions format data for output to destinations as follows.","pos":[2992,3058]},{"content":"Function","pos":[3065,3073]},{"content":"Counterpart function","pos":[3074,3094]},{"content":"Output destination","pos":[3095,3113]},{"content":"Parameter Validation","pos":[3114,3134]},{"content":"Positional Parameter Support","pos":[3135,3163]},{"content":"_cprintf","pos":[3314,3322]},{"content":"console","pos":[3397,3404]},{"content":"Check for null.","pos":[3405,3420]},{"content":"no","pos":[3421,3423]},{"content":"_cwprintf","pos":[3442,3451]},{"content":"console","pos":[3526,3533]},{"content":"Check for null.","pos":[3534,3549]},{"content":"no","pos":[3550,3552]},{"content":"fprintf","pos":[3569,3576]},{"content":"Stream","pos":[3652,3658]},{"content":"Check for null.","pos":[3660,3675]},{"content":"no","pos":[3676,3678]},{"content":"vfprintf_p","pos":[3685,3695]},{"content":"fprintf_p","pos":[3699,3708]},{"content":"Stream","pos":[3792,3798]},{"content":"Check for null and valid format.","pos":[3800,3832]},{"content":"yes","pos":[3833,3836]},{"content":"fprintf_s","pos":[3855,3864]},{"content":"Stream","pos":[3948,3954]},{"content":"Check for null and valid format.","pos":[3956,3988]},{"content":"no","pos":[3989,3991]},{"content":"fwprintf","pos":[4009,4017]},{"content":"Stream","pos":[4093,4099]},{"content":"Check for null.","pos":[4101,4116]},{"content":"no","pos":[4117,4119]},{"content":"vfwprintf_p","pos":[4126,4137]},{"content":"fwprintf_p","pos":[4141,4151]},{"content":"Stream","pos":[4235,4241]},{"content":"Check for null and valid format.","pos":[4243,4275]},{"content":"yes","pos":[4276,4279]},{"content":"fwprintf_s","pos":[4299,4309]},{"content":"Stream","pos":[4393,4399]},{"content":"Check for null and valid format.","pos":[4401,4433]},{"content":"no","pos":[4434,4436]},{"content":"printf","pos":[4452,4458]},{"content":"Check for null.","pos":[4538,4553]},{"content":"no","pos":[4554,4556]},{"content":"vprintf_p","pos":[4563,4572]},{"content":"printf_p","pos":[4576,4584]},{"content":"Check for null and valid format.","pos":[4672,4704]},{"content":"yes","pos":[4705,4708]},{"content":"printf_s","pos":[4726,4734]},{"content":"Check for null and valid format.","pos":[4822,4854]},{"content":"no","pos":[4855,4857]},{"content":"wprintf","pos":[4874,4881]},{"content":"Check for null.","pos":[4961,4976]},{"content":"no","pos":[4977,4979]},{"content":"vwprintf_p","pos":[4986,4996]},{"content":"wprintf_p","pos":[5000,5009]},{"content":"Check for null and valid format.","pos":[5097,5129]},{"content":"yes","pos":[5130,5133]},{"content":"wprintf_s","pos":[5152,5161]},{"content":"Check for null and valid format.","pos":[5249,5281]},{"content":"no","pos":[5282,5284]},{"content":"vsprintf","pos":[5291,5299]},{"content":"sprintf","pos":[5303,5310]},{"pos":[5396,5425],"content":"memory pointed to by <bpt id=\"p1\">*</bpt>buffer<ept id=\"p1\">*</ept>","source":"memory pointed to by *buffer*"},{"content":"Check for null.","pos":[5426,5441]},{"content":"no","pos":[5442,5444]},{"content":"vsprintf_p","pos":[5451,5461]},{"content":"sprintf_p","pos":[5465,5474]},{"pos":[5557,5586],"content":"memory pointed to by <bpt id=\"p1\">*</bpt>buffer<ept id=\"p1\">*</ept>","source":"memory pointed to by *buffer*"},{"content":"Check for null and valid format.","pos":[5587,5619]},{"content":"yes","pos":[5620,5623]},{"content":"sprintf_s","pos":[5642,5651]},{"pos":[5734,5763],"content":"memory pointed to by <bpt id=\"p1\">*</bpt>buffer<ept id=\"p1\">*</ept>","source":"memory pointed to by *buffer*"},{"content":"Check for null and valid format.","pos":[5764,5796]},{"content":"no","pos":[5797,5799]},{"content":"swprintf","pos":[5817,5825]},{"pos":[5911,5940],"content":"memory pointed to by <bpt id=\"p1\">*</bpt>buffer<ept id=\"p1\">*</ept>","source":"memory pointed to by *buffer*"},{"content":"Check for null.","pos":[5941,5956]},{"content":"no","pos":[5957,5959]},{"content":"vswprintf_p","pos":[5966,5977]},{"content":"swprintf_p","pos":[5981,5991]},{"pos":[6074,6103],"content":"memory pointed to by <bpt id=\"p1\">*</bpt>buffer<ept id=\"p1\">*</ept>","source":"memory pointed to by *buffer*"},{"content":"Check for null and valid format.","pos":[6104,6136]},{"content":"yes","pos":[6137,6140]},{"content":"swprintf_s","pos":[6160,6170]},{"pos":[6253,6282],"content":"memory pointed to by <bpt id=\"p1\">*</bpt>buffer<ept id=\"p1\">*</ept>","source":"memory pointed to by *buffer*"},{"content":"Check for null and valid format.","pos":[6283,6315]},{"content":"no","pos":[6316,6318]},{"content":"_vscprintf","pos":[6337,6347]},{"pos":[6430,6459],"content":"memory pointed to by <bpt id=\"p1\">*</bpt>buffer<ept id=\"p1\">*</ept>","source":"memory pointed to by *buffer*"},{"content":"Check for null.","pos":[6460,6475]},{"content":"no","pos":[6476,6478]},{"content":"_vscwprintf","pos":[6498,6509]},{"pos":[6592,6621],"content":"memory pointed to by <bpt id=\"p1\">*</bpt>buffer<ept id=\"p1\">*</ept>","source":"memory pointed to by *buffer*"},{"content":"Check for null.","pos":[6622,6637]},{"content":"no","pos":[6638,6640]},{"content":"_snprintf","pos":[6659,6668]},{"pos":[6756,6785],"content":"memory pointed to by <bpt id=\"p1\">*</bpt>buffer<ept id=\"p1\">*</ept>","source":"memory pointed to by *buffer*"},{"content":"Check for null.","pos":[6786,6801]},{"content":"no","pos":[6802,6804]},{"content":"_snwprintf","pos":[6824,6834]},{"pos":[6922,6951],"content":"memory pointed to by <bpt id=\"p1\">*</bpt>buffer<ept id=\"p1\">*</ept>","source":"memory pointed to by *buffer*"},{"content":"Check for null.","pos":[6952,6967]},{"content":"no","pos":[6968,6970]},{"content":"The <ph id=\"ph1\">`argptr`</ph> argument has type <ph id=\"ph2\">`va_list`</ph>, which is defined in VARARGS.H and STDARG.H.","pos":[6978,7063],"source":"The `argptr` argument has type `va_list`, which is defined in VARARGS.H and STDARG.H."},{"content":"The <ph id=\"ph1\">`argptr`</ph> variable must be initialized by <bpt id=\"p1\">**</bpt>va_start,<ept id=\"p1\">**</ept> and may be reinitialized by subsequent <ph id=\"ph2\">`va_arg`</ph> calls; <ph id=\"ph3\">`argptr`</ph> then points to the beginning of a list of arguments that are converted and transmitted for output according to the corresponding specifications in the <bpt id=\"p2\">*</bpt>format<ept id=\"p2\">*</ept> argument.","pos":[7064,7356],"source":" The `argptr` variable must be initialized by **va_start,** and may be reinitialized by subsequent `va_arg` calls; `argptr` then points to the beginning of a list of arguments that are converted and transmitted for output according to the corresponding specifications in the *format* argument."},{"content":"<bpt id=\"p1\">*</bpt>format<ept id=\"p1\">*</ept> has the same form and function as the <bpt id=\"p2\">*</bpt>format<ept id=\"p2\">*</ept> argument for <bpt id=\"p3\">[</bpt>printf<ept id=\"p3\">](../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept>.","pos":[7357,7504],"source":"*format* has the same form and function as the *format* argument for [printf](../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)."},{"content":"None of these functions invokes <ph id=\"ph1\">`va_end`</ph>.","pos":[7505,7546],"source":" None of these functions invokes `va_end`."},{"content":"For a more complete description of each <ph id=\"ph1\">`vprintf`</ph> function, see the description of its counterpart function as listed in the preceding table.","pos":[7547,7688],"source":" For a more complete description of each `vprintf` function, see the description of its counterpart function as listed in the preceding table."},{"pos":[7708,7791],"content":"differs from <bpt id=\"p1\">**</bpt>vsprintf<ept id=\"p1\">**</ept> in that it writes no more than <bpt id=\"p2\">*</bpt>count<ept id=\"p2\">*</ept> bytes to <bpt id=\"p3\">*</bpt>buffer<ept id=\"p3\">*</ept>.","source":" differs from **vsprintf** in that it writes no more than *count* bytes to *buffer*."},{"content":"The versions of these functions with the <bpt id=\"p1\">**</bpt>w<ept id=\"p1\">**</ept> infix in the name are wide-character versions of the corresponding functions without the <bpt id=\"p2\">**</bpt>w<ept id=\"p2\">**</ept> infix; in each of these wide-character functions, <bpt id=\"p3\">*</bpt>buffer<ept id=\"p3\">*</ept> and <bpt id=\"p4\">*</bpt>format<ept id=\"p4\">*</ept> are wide-character strings.","pos":[7798,8039],"source":"The versions of these functions with the **w** infix in the name are wide-character versions of the corresponding functions without the **w** infix; in each of these wide-character functions, *buffer* and *format* are wide-character strings."},{"content":"Otherwise, each wide-character function behaves identically to its SBCS counterpart function.","pos":[8040,8133]},{"content":"The versions of these functions with <bpt id=\"p1\">**</bpt>_s<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>_p<ept id=\"p2\">**</ept> suffixes are the more secure versions.","pos":[8140,8233],"source":"The versions of these functions with **_s** and **_p** suffixes are the more secure versions."},{"content":"These versions validate the format strings and will generate an exception if the format string is not well formed (for example, if invalid formatting characters are used).","pos":[8234,8405]},{"content":"The versions of these functions with the <bpt id=\"p1\">**</bpt>_p<ept id=\"p1\">**</ept> suffix provide the ability to specify the order in which the supplied arguments are substituted in the format string.","pos":[8412,8577],"source":"The versions of these functions with the **_p** suffix provide the ability to specify the order in which the supplied arguments are substituted in the format string."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>printf_p Positional Parameters<ept id=\"p1\">](../c-runtime-library/printf-p-positional-parameters.md)</ept>.","pos":[8578,8693],"source":" For more information, see [printf_p Positional Parameters](../c-runtime-library/printf-p-positional-parameters.md)."},{"pos":[8700,8837],"content":"For <bpt id=\"p1\">**</bpt>vsprintf<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`vswprintf`</ph>, <ph id=\"ph2\">`_vsnprintf`</ph> and <ph id=\"ph3\">`_vsnwprintf`</ph>, if copying occurs between strings that overlap, the behavior is undefined.","source":"For **vsprintf**, `vswprintf`, `_vsnprintf` and `_vsnwprintf`, if copying occurs between strings that overlap, the behavior is undefined."},{"pos":[8845,9256],"content":"[!IMPORTANT]\n Ensure that *format* is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795). If using the secure versions of these functions (either the **_s** or **_p** suffixes), a user-supplied format string could trigger an invalid parameter exception if the user-supplied string contains invalid formatting characters.","leadings":["","> "],"nodes":[{"content":" Ensure that *format* is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795). If using the secure versions of these functions (either the **_s** or **_p** suffixes), a user-supplied format string could trigger an invalid parameter exception if the user-supplied string contains invalid formatting characters.","pos":[13,409],"nodes":[{"content":"Ensure that <bpt id=\"p1\">*</bpt>format<ept id=\"p1\">*</ept> is not a user-defined string.","pos":[1,51],"source":" Ensure that *format* is not a user-defined string."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[52,165],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."},{"content":"If using the secure versions of these functions (either the <bpt id=\"p1\">**</bpt>_s<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>_p<ept id=\"p2\">**</ept> suffixes), a user-supplied format string could trigger an invalid parameter exception if the user-supplied string contains invalid formatting characters.","pos":[166,396],"source":" If using the secure versions of these functions (either the **_s** or **_p** suffixes), a user-supplied format string could trigger an invalid parameter exception if the user-supplied string contains invalid formatting characters."}]}]},{"content":"See Also","pos":[9265,9273]},{"content":"Stream I/O","pos":[9278,9288]},{"content":"fprintf, _fprintf_l, fwprintf, _fwprintf_l","pos":[9331,9373]},{"content":"printf, _printf_l, wprintf, _wprintf_l","pos":[9453,9491]},{"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l","pos":[9567,9624],"source":"sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l"},{"content":"va_arg, va_copy, va_end, va_start","pos":[9715,9748]}],"content":"---\ntitle: \"vprintf Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napilocation: \n  - \"msvcr110.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr80.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"vprintf\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"vprintf function\"\n  - \"formatted text [C++]\"\nms.assetid: 02ac7c51-eab1-4bf0-bf4c-77065e3fa744\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vprintf Functions\nEach of the `vprintf` functions takes a pointer to an argument list, then formats and writes the given data to a particular destination. The functions differ in the parameter validation performed, whether the functions take wide or single-byte character strings, the output destination, and the support for specifying the order in which parameters are used in the format string.  \n  \n|||  \n|-|-|  \n|[_vcprintf, _vcwprintf](../c-runtime-library/reference/vcprintf-vcprintf-l-vcwprintf-vcwprintf-l.md)|[vfprintf, vfwprintf](../c-runtime-library/reference/vfprintf-vfprintf-l-vfwprintf-vfwprintf-l.md)|  \n|[_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l](../c-runtime-library/reference/vfprintf-p-vfprintf-p-l-vfwprintf-p-vfwprintf-p-l.md)|[vfprintf_s, _vfprintf_s_l, vfwprintf_s, _vfwprintf_s_l](../c-runtime-library/reference/vfprintf-s-vfprintf-s-l-vfwprintf-s-vfwprintf-s-l.md)|  \n|[vprintf, vwprintf](../c-runtime-library/reference/vprintf-vprintf-l-vwprintf-vwprintf-l.md)|[_vprintf_p, _vprintf_p_l, _vwprintf_p, _vwprintf_p_l](../c-runtime-library/reference/vprintf-p-vprintf-p-l-vwprintf-p-vwprintf-p-l.md)|  \n|[vprintf_s, _vprintf_s_l, vwprintf_s, _vwprintf_s_l](../c-runtime-library/reference/vprintf-s-vprintf-s-l-vwprintf-s-vwprintf-s-l.md)|[vsprintf, vswprintf](../c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l.md)|  \n|[_vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l](../c-runtime-library/reference/vsprintf-p-vsprintf-p-l-vswprintf-p-vswprintf-p-l.md)|[vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l](../c-runtime-library/reference/vsprintf-s-vsprintf-s-l-vswprintf-s-vswprintf-s-l.md)|  \n|[_vscprintf, _vscprintf_l, _vscwprintf, _vscwprintf_l](../c-runtime-library/reference/vscprintf-vscprintf-l-vscwprintf-vscwprintf-l.md)|[_vsnprintf, _vsnwprintf](../c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l.md)|  \n  \n## Remarks  \n The `vprintf` functions are similar to their counterpart functions as listed in the following table. However, each `vprintf` function accepts a pointer to an argument list, whereas each of the counterpart functions accepts an argument list.  \n  \n These functions format data for output to destinations as follows.  \n  \n|Function|Counterpart function|Output destination|Parameter Validation|Positional Parameter Support|  \n|--------------|--------------------------|------------------------|--------------------------|----------------------------------|  \n|`_vcprintf`|[_cprintf](../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md)|console|Check for null.|no|  \n|`_vcwprintf`|[_cwprintf](../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md)|console|Check for null.|no|  \n|`vfprintf`|[fprintf](../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)|*Stream*|Check for null.|no|  \n|**vfprintf_p**|[fprintf_p](../c-runtime-library/reference/fprintf-p-fprintf-p-l-fwprintf-p-fwprintf-p-l.md)|*Stream*|Check for null and valid format.|yes|  \n|`vfprintf_s`|[fprintf_s](../c-runtime-library/reference/fprintf-s-fprintf-s-l-fwprintf-s-fwprintf-s-l.md)|*Stream*|Check for null and valid format.|no|  \n|`vfwprintf`|[fwprintf](../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)|*Stream*|Check for null.|no|  \n|**vfwprintf_p**|[fwprintf_p](../c-runtime-library/reference/fprintf-p-fprintf-p-l-fwprintf-p-fwprintf-p-l.md)|*Stream*|Check for null and valid format.|yes|  \n|`vfwprintf_s`|[fwprintf_s](../c-runtime-library/reference/fprintf-s-fprintf-s-l-fwprintf-s-fwprintf-s-l.md)|*Stream*|Check for null and valid format.|no|  \n|`vprintf`|[printf](../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)|`Stdout`|Check for null.|no|  \n|**vprintf_p**|[printf_p](../c-runtime-library/reference/printf-p-printf-p-l-wprintf-p-wprintf-p-l.md)|`Stdout`|Check for null and valid format.|yes|  \n|`vprintf_s`|[printf_s](../c-runtime-library/reference/printf-s-printf-s-l-wprintf-s-wprintf-s-l.md)|`Stdout`|Check for null and valid format.|no|  \n|`vwprintf`|[wprintf](../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)|`Stdout`|Check for null.|no|  \n|**vwprintf_p**|[wprintf_p](../c-runtime-library/reference/printf-p-printf-p-l-wprintf-p-wprintf-p-l.md)|`Stdout`|Check for null and valid format.|yes|  \n|`vwprintf_s`|[wprintf_s](../c-runtime-library/reference/printf-s-printf-s-l-wprintf-s-wprintf-s-l.md)|`Stdout`|Check for null and valid format.|no|  \n|**vsprintf**|[sprintf](../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)|memory pointed to by *buffer*|Check for null.|no|  \n|**vsprintf_p**|[sprintf_p](../c-runtime-library/reference/sprintf-p-sprintf-p-l-swprintf-p-swprintf-p-l.md)|memory pointed to by *buffer*|Check for null and valid format.|yes|  \n|`vsprintf_s`|[sprintf_s](../c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l.md)|memory pointed to by *buffer*|Check for null and valid format.|no|  \n|`vswprintf`|[swprintf](../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)|memory pointed to by *buffer*|Check for null.|no|  \n|**vswprintf_p**|[swprintf_p](../c-runtime-library/reference/sprintf-p-sprintf-p-l-swprintf-p-swprintf-p-l.md)|memory pointed to by *buffer*|Check for null and valid format.|yes|  \n|`vswprintf_s`|[swprintf_s](../c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l.md)|memory pointed to by *buffer*|Check for null and valid format.|no|  \n|`_vscprintf`|[_vscprintf](../c-runtime-library/reference/vscprintf-vscprintf-l-vscwprintf-vscwprintf-l.md)|memory pointed to by *buffer*|Check for null.|no|  \n|`_vscwprintf`|[_vscwprintf](../c-runtime-library/reference/vscprintf-vscprintf-l-vscwprintf-vscwprintf-l.md)|memory pointed to by *buffer*|Check for null.|no|  \n|`_vsnprintf`|[_snprintf](../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md)|memory pointed to by *buffer*|Check for null.|no|  \n|`_vsnwprintf`|[_snwprintf](../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md)|memory pointed to by *buffer*|Check for null.|no|  \n  \n The `argptr` argument has type `va_list`, which is defined in VARARGS.H and STDARG.H. The `argptr` variable must be initialized by **va_start,** and may be reinitialized by subsequent `va_arg` calls; `argptr` then points to the beginning of a list of arguments that are converted and transmitted for output according to the corresponding specifications in the *format* argument. *format* has the same form and function as the *format* argument for [printf](../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md). None of these functions invokes `va_end`. For a more complete description of each `vprintf` function, see the description of its counterpart function as listed in the preceding table.  \n  \n `_vsnprintf` differs from **vsprintf** in that it writes no more than *count* bytes to *buffer*.  \n  \n The versions of these functions with the **w** infix in the name are wide-character versions of the corresponding functions without the **w** infix; in each of these wide-character functions, *buffer* and *format* are wide-character strings. Otherwise, each wide-character function behaves identically to its SBCS counterpart function.  \n  \n The versions of these functions with **_s** and **_p** suffixes are the more secure versions. These versions validate the format strings and will generate an exception if the format string is not well formed (for example, if invalid formatting characters are used).  \n  \n The versions of these functions with the **_p** suffix provide the ability to specify the order in which the supplied arguments are substituted in the format string. For more information, see [printf_p Positional Parameters](../c-runtime-library/printf-p-positional-parameters.md).  \n  \n For **vsprintf**, `vswprintf`, `_vsnprintf` and `_vsnwprintf`, if copying occurs between strings that overlap, the behavior is undefined.  \n  \n> [!IMPORTANT]\n>  Ensure that *format* is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795). If using the secure versions of these functions (either the **_s** or **_p** suffixes), a user-supplied format string could trigger an invalid parameter exception if the user-supplied string contains invalid formatting characters.  \n  \n## See Also  \n [Stream I/O](../c-runtime-library/stream-i-o.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [va_arg, va_copy, va_end, va_start](../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)"}