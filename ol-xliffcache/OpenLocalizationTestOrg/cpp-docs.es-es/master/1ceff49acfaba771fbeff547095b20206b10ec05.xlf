<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ceff49acfaba771fbeff547095b20206b10ec05</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\fdopen-wfdopen.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa47d1bf9b1b8172672534eb1a4b485e47b9017e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3cfb4355aa2ad6cfcde8253b10119764c44fdbd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_fdopen, _wfdopen | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_fdopen, _wfdopen</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Associates a stream with a file that was previously opened for low-level I/O.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>File descriptor of the open file.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Type of file access.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each of these functions returns a pointer to the open stream.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A null pointer value indicates an error.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When an error occurs, the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, <ph id="ph1">`errno`</ph> is set either to <ph id="ph2">`EBADF`</ph>, which indicates a bad file descriptor, or <ph id="ph3">`EINVAL`</ph>, which indicates that <ph id="ph4">`mode`</ph> was a null pointer.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about these and other error codes, see <bpt id="p1">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_fdopen`</ph> function associates an I/O stream with the file that is identified by <ph id="ph2">`fd`</ph>, and thus allows a file that is opened for low-level I/O to be buffered and formatted.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>is a wide-character version of <ph id="ph1">`_fdopen`</ph>; the <ph id="ph2">`mode`</ph> argument to <ph id="ph3">`_wfdopen`</ph> is a wide-character string.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_fdopen`</ph> otherwise behave identically.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Tchar.h routine</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>_UNICODE and _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mode`</ph> character string specifies the type of file and file access.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The character string <ph id="ph1">`mode`</ph> specifies the type of access requested for the file, as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Opens for reading.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the file does not exist or cannot be found, the <ph id="ph1">`fopen`</ph> call fails.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Opens an empty file for writing.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the given file exists, its contents are destroyed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Opens for writing, at the end of the file (appending).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Creates the file if it does not exist.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Opens for both reading and writing.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>(The file must exist.)</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Opens an empty file for both reading and writing.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the given file exists, its contents are destroyed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Opens for reading and appending.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Creates the file if it does not exist.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When a file is opened with the <ph id="ph1">`"a"`</ph> or <ph id="ph2">`"a+"`</ph> access type, all write operations occur at the end of the file.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The file pointer can be repositioned by using <ph id="ph1">`fseek`</ph> or <ph id="ph2">`rewind`</ph>, but it is always moved back to the end of the file before any write operation is carried out.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Thus, existing data cannot be overwritten.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`"r+"`</ph>, <ph id="ph2">`"w+"`</ph>, or <ph id="ph3">`"a+"`</ph> access type is specified, both reading and writing are allowed (the file is said to be open for "update").</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, when you switch between reading and writing, there must be an intervening <ph id="ph1">`fflush`</ph>, <ph id="ph2">`fsetpos`</ph>, <ph id="ph3">`fseek`</ph>, or <ph id="ph4">`rewind`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can specify the current position for the <ph id="ph1">`fsetpos`</ph> or <ph id="ph2">`fseek`</ph> operation, if you want to.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In addition to the above values, the following characters can also be included in <ph id="ph1">`mode`</ph> to specify the translation mode for newline characters.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Open in text (translated) mode.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In this mode, carriage return-line feed (CR-LF) combinations are translated into one-line feeds (LF) on input, and LF characters are translated to CR-LF combinations on output.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Also, Ctrl+Z is interpreted as an end-of-file character on input.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In files opened for reading/writing, <ph id="ph1">`fopen`</ph> checks for a Ctrl+Z at the end of the file and removes it, if possible.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This is done because using the <ph id="ph1">`fseek`</ph> and <ph id="ph2">`ftell`</ph> functions to move within a file that ends with a Ctrl+Z might cause <ph id="ph3">`fseek`</ph> to behave incorrectly near the end of the file.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Open in binary (untranslated) mode.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Any translations from <ph id="ph1">`t`</ph> mode are suppressed.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Enable the commit flag for the associated <ph id="ph1">`filename`</ph> so that the contents of the file buffer are written directly to disk if either <ph id="ph2">`fflush`</ph> or <ph id="ph3">`_flushall`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Reset the commit flag for the associated <ph id="ph1">`filename`</ph> to "no-commit."</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This is the default.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It also overrides the global commit flag if you link your program with Commode.obj.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The global commit flag default is "no-commit" unless you explicitly link your program with Commode.obj.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`t`</ph>, <ph id="ph2">`c`</ph>, and <ph id="ph3">`n`</ph> <ph id="ph4">`mode`</ph> options are Microsoft extensions for <ph id="ph5">`fopen`</ph> and <ph id="ph6">`_fdopen`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Do not use them if you want to preserve ANSI portability.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`t`</ph> or <ph id="ph2">`b`</ph> is not given in <ph id="ph3">`mode`</ph>, the default translation mode is defined by the global variable <bpt id="p1">[</bpt>_fmode<ept id="p1">](../../c-runtime-library/fmode.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`t`</ph> or <ph id="ph2">`b`</ph> is prefixed to the argument, the function fails and returns <ph id="ph3">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For a discussion of text and binary modes, see <bpt id="p1">[</bpt>Text and Binary Mode File I/O<ept id="p1">](../../c-runtime-library/text-and-binary-mode-file-i-o.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Valid characters for the <ph id="ph1">`mode`</ph> string used in <ph id="ph2">`fopen`</ph> and <ph id="ph3">`_fdopen`</ph> correspond to <ph id="ph4">`oflag`</ph> arguments used in <bpt id="p1">[</bpt>_open<ept id="p1">](../../c-runtime-library/reference/open-wopen.md)</ept> and <bpt id="p2">[</bpt>_sopen<ept id="p2">](../../c-runtime-library/reference/sopen-wsopen.md)</ept>, as follows.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Characters in <ph id="ph1">`mode`</ph> string</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Equivalent <ph id="ph1">`oflag`</ph>value for</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>(usually <ph id="ph1">`_O_WRONLY &amp;#124; _O_CREAT &amp;#124; _O_APPEND`</ph>)</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>(usually <ph id="ph1">`_O_RDWR &amp;#124; _O_APPEND &amp;#124; _O_CREAT`</ph> )</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>(usually <ph id="ph1">`_O_WRONLY &amp;#124; _O_CREAT &amp;#124; _O_TRUNC`</ph>)</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>(usually <ph id="ph1">`_O_RDWR &amp;#124; _O_CREAT &amp;#124; _O_TRUNC`</ph>)</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>stdio.h&gt;</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>stdio.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Input: crt_fdopen.txt</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.%23ctor%2A&gt;</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Stream I/O</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>_dup, _dup2</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>fclose, _fcloseall</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>fopen, _wfopen</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>freopen, _wfreopen</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>_open, _wopen</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>