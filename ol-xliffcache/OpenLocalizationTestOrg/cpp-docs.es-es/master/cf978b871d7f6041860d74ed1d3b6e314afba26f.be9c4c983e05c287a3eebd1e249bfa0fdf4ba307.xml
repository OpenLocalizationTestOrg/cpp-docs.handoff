{"nodes":[{"pos":[12,44],"content":"_query_new_mode | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_query_new_mode | Microsoft Docs","pos":[0,32]}]},{"content":"_query_new_mode","pos":[1007,1022]},{"pos":[1023,1110],"content":"Returns an integer indicating the new handler mode set by <ph id=\"ph1\">`_set_new_mode`</ph> for <ph id=\"ph2\">`malloc`</ph>.","source":"Returns an integer indicating the new handler mode set by `_set_new_mode` for `malloc`."},{"content":"Syntax","pos":[1119,1125]},{"content":"Return Value","pos":[1197,1209]},{"content":"Returns the current new handler mode, namely 0 or 1, for <ph id=\"ph1\">`malloc`</ph>.","pos":[1213,1279],"source":"Returns the current new handler mode, namely 0 or 1, for `malloc`."},{"content":"A return value of 1 indicates that, on failure to allocate memory, <ph id=\"ph1\">`malloc`</ph> calls the new handler routine; a return value of 0 indicates that it does not.","pos":[1280,1434],"source":" A return value of 1 indicates that, on failure to allocate memory, `malloc` calls the new handler routine; a return value of 0 indicates that it does not."},{"content":"Remarks","pos":[1443,1450]},{"content":"The C++ <ph id=\"ph1\">`_query_new_mode`</ph> function returns an integer that indicates the new handler mode that is set by the C++ <bpt id=\"p1\">[</bpt>_set_new_mode<ept id=\"p1\">](../../c-runtime-library/reference/set-new-mode.md)</ept> function for <bpt id=\"p2\">[</bpt>malloc<ept id=\"p2\">](../../c-runtime-library/reference/malloc.md)</ept>.","pos":[1454,1701],"source":"The C++ `_query_new_mode` function returns an integer that indicates the new handler mode that is set by the C++ [_set_new_mode](../../c-runtime-library/reference/set-new-mode.md) function for [malloc](../../c-runtime-library/reference/malloc.md)."},{"content":"The new handler mode indicates whether, on failure to allocate memory, <ph id=\"ph1\">`malloc`</ph> is to call the new handler routine as set by <bpt id=\"p1\">[</bpt>_set_new_handler<ept id=\"p1\">](../../c-runtime-library/reference/set-new-handler.md)</ept>.","pos":[1702,1900],"source":" The new handler mode indicates whether, on failure to allocate memory, `malloc` is to call the new handler routine as set by [_set_new_handler](../../c-runtime-library/reference/set-new-handler.md)."},{"content":"By default, <ph id=\"ph1\">`malloc`</ph> does not call the new handler routine on failure.","pos":[1901,1971],"source":" By default, `malloc` does not call the new handler routine on failure."},{"content":"You can use <ph id=\"ph1\">`_set_new_mode`</ph> to override this behavior so that on failure <ph id=\"ph2\">`malloc`</ph> calls the new handler routine in the same way that the <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> operator does when it fails to allocate memory.","pos":[1972,2164],"source":" You can use `_set_new_mode` to override this behavior so that on failure `malloc` calls the new handler routine in the same way that the **new** operator does when it fails to allocate memory."},{"content":"For more information, see the discussion of the <bpt id=\"p1\">[</bpt>new and delete operators<ept id=\"p1\">](../../cpp/new-and-delete-operators.md)</ept> in the C++ Language Reference.","pos":[2165,2309],"source":" For more information, see the discussion of the [new and delete operators](../../cpp/new-and-delete-operators.md) in the C++ Language Reference."},{"content":"Requirements","pos":[2318,2330]},{"content":"Routine","pos":[2337,2344]},{"content":"Required header","pos":[2345,2360]},{"content":"new.h&gt;","pos":[2425,2431],"source":"new.h>"},{"pos":[2439,2557],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[2566,2575]},{"pos":[2579,2671],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"content":".NET Framework Equivalent","pos":[2680,2705]},{"content":"Not applicable.","pos":[2709,2724]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[2725,2772],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[2773,2898],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[2907,2915]},{"content":"Memory Allocation","pos":[2920,2937]},{"content":"calloc","pos":[2990,2996]},{"content":"free","pos":[3048,3052]},{"content":"realloc","pos":[3102,3109]},{"content":"_query_new_handler","pos":[3162,3180]}],"content":"---\ntitle: \"_query_new_mode | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_query_new_mode\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-heap-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"query_new_mode\"\n  - \"_query_new_mode\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"query_new_mode function\"\n  - \"handler modes\"\n  - \"_query_new_mode function\"\nms.assetid: e185c5f9-b73b-4257-8eff-b47648374768\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _query_new_mode\nReturns an integer indicating the new handler mode set by `_set_new_mode` for `malloc`.  \n  \n## Syntax  \n  \n```  \n  \n      int _query_new_mode(  \n   void   \n);  \n```  \n  \n## Return Value  \n Returns the current new handler mode, namely 0 or 1, for `malloc`. A return value of 1 indicates that, on failure to allocate memory, `malloc` calls the new handler routine; a return value of 0 indicates that it does not.  \n  \n## Remarks  \n The C++ `_query_new_mode` function returns an integer that indicates the new handler mode that is set by the C++ [_set_new_mode](../../c-runtime-library/reference/set-new-mode.md) function for [malloc](../../c-runtime-library/reference/malloc.md). The new handler mode indicates whether, on failure to allocate memory, `malloc` is to call the new handler routine as set by [_set_new_handler](../../c-runtime-library/reference/set-new-handler.md). By default, `malloc` does not call the new handler routine on failure. You can use `_set_new_mode` to override this behavior so that on failure `malloc` calls the new handler routine in the same way that the **new** operator does when it fails to allocate memory. For more information, see the discussion of the [new and delete operators](../../cpp/new-and-delete-operators.md) in the C++ Language Reference.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_query_new_mode`|\\<new.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Memory Allocation](../../c-runtime-library/memory-allocation.md)   \n [calloc](../../c-runtime-library/reference/calloc.md)   \n [free](../../c-runtime-library/reference/free.md)   \n [realloc](../../c-runtime-library/reference/realloc.md)   \n [_query_new_handler](../../c-runtime-library/reference/query-new-handler.md)"}