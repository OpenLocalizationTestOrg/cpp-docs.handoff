{"nodes":[{"pos":[12,73],"content":"-Os, -Ot (Favor Small Code, Favor Fast Code) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-Os, -Ot (Favor Small Code, Favor Fast Code) | Microsoft Docs","pos":[0,61]}]},{"content":"/Os, /Ot (Favor Small Code, Favor Fast Code)","pos":[1025,1069]},{"content":"Minimizes or maximizes the size of EXEs and DLLs.","pos":[1070,1119]},{"content":"Syntax","pos":[1128,1134]},{"content":"Remarks","pos":[1170,1177]},{"content":"<bpt id=\"p1\">**</bpt>/Os<ept id=\"p1\">**</ept> (Favor Small Code) minimizes the size of EXEs and DLLs by instructing the compiler to favor size over speed.","pos":[1181,1297],"source":"**/Os** (Favor Small Code) minimizes the size of EXEs and DLLs by instructing the compiler to favor size over speed."},{"content":"The compiler can reduce many C and C++ constructs to functionally similar sequences of machine code.","pos":[1298,1398]},{"content":"Occasionally these differences offer tradeoffs of size versus speed.","pos":[1399,1467]},{"content":"The <bpt id=\"p1\">**</bpt>/Os<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>/Ot<ept id=\"p2\">**</ept> options allow you to specify a preference for one over the other:","pos":[1468,1557],"source":" The **/Os** and **/Ot** options allow you to specify a preference for one over the other:"},{"content":"<bpt id=\"p1\">**</bpt>/Ot<ept id=\"p1\">**</ept> (Favor Fast Code) maximizes the speed of EXEs and DLLs by instructing the compiler to favor speed over size.","pos":[1564,1680],"source":"**/Ot** (Favor Fast Code) maximizes the speed of EXEs and DLLs by instructing the compiler to favor speed over size."},{"content":"(This is the default.) The compiler can reduce many C and C++ constructs to functionally similar sequences of machine code.","pos":[1681,1804]},{"content":"Occasionally, these differences offer tradeoffs of size versus speed.","pos":[1805,1874]},{"content":"The /Ot option is implied by the Maximize Speed (<bpt id=\"p1\">[</bpt>/O2<ept id=\"p1\">](../../build/reference/o1-o2-minimize-size-maximize-speed.md)</ept>) option.","pos":[1875,1999],"source":" The /Ot option is implied by the Maximize Speed ([/O2](../../build/reference/o1-o2-minimize-size-maximize-speed.md)) option."},{"content":"The <bpt id=\"p1\">**</bpt>/O2<ept id=\"p1\">**</ept> option combines several options to produce very fast code.","pos":[2000,2070],"source":" The **/O2** option combines several options to produce very fast code."},{"pos":[2077,2212],"content":"If you use <bpt id=\"p1\">**</bpt>/Os<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>/Ot<ept id=\"p2\">**</ept>, then you must also specify <bpt id=\"p3\">[</bpt>/Og<ept id=\"p3\">](../../build/reference/og-global-optimizations.md)</ept> to optimize the code.","source":"If you use **/Os** or **/Ot**, then you must also specify [/Og](../../build/reference/og-global-optimizations.md) to optimize the code."},{"pos":[2220,2500],"content":"[!NOTE]\n Information that is gathered from profiling test runs will override optimizations that would otherwise be in effect if you specify **/Ob**, **/Os**, or **/Ot**. For more information, [Profile-Guided Optimizations](../../build/reference/profile-guided-optimizations.md).","leadings":["","> "],"nodes":[{"content":" Information that is gathered from profiling test runs will override optimizations that would otherwise be in effect if you specify **/Ob**, **/Os**, or **/Ot**. For more information, [Profile-Guided Optimizations](../../build/reference/profile-guided-optimizations.md).","pos":[8,278],"nodes":[{"content":"Information that is gathered from profiling test runs will override optimizations that would otherwise be in effect if you specify <bpt id=\"p1\">**</bpt>/Ob<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>/Os<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>/Ot<ept id=\"p3\">**</ept>.","pos":[1,161],"source":" Information that is gathered from profiling test runs will override optimizations that would otherwise be in effect if you specify **/Ob**, **/Os**, or **/Ot**."},{"content":"For more information, <bpt id=\"p1\">[</bpt>Profile-Guided Optimizations<ept id=\"p1\">](../../build/reference/profile-guided-optimizations.md)</ept>.","pos":[162,270],"source":" For more information, [Profile-Guided Optimizations](../../build/reference/profile-guided-optimizations.md)."}]}]},{"content":"x86 Specific","pos":[2509,2521]},{"pos":[2530,2673],"content":"The following example code demonstrates the difference between the Favor Small Code (<bpt id=\"p1\">**</bpt>/Os<ept id=\"p1\">**</ept>) options and the Favor Fast Code (<bpt id=\"p2\">**</bpt>/Ot<ept id=\"p2\">**</ept>) option:","source":"The following example code demonstrates the difference between the Favor Small Code (**/Os**) options and the Favor Fast Code (**/Ot**) option:"},{"pos":[2681,2877],"content":"[!NOTE]\n The following describes the expected behavior when using **/Os** or **/Ot**. However, compiler behavior from release to release may result in different optimizations for the code below.","leadings":["","> "],"nodes":[{"content":" The following describes the expected behavior when using **/Os** or **/Ot**. However, compiler behavior from release to release may result in different optimizations for the code below.","pos":[8,194],"nodes":[{"content":"The following describes the expected behavior when using <bpt id=\"p1\">**</bpt>/Os<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>/Ot<ept id=\"p2\">**</ept>.","pos":[1,77],"source":" The following describes the expected behavior when using **/Os** or **/Ot**."},{"content":"However, compiler behavior from release to release may result in different optimizations for the code below.","pos":[78,186]}]}]},{"pos":[3165,3403],"content":"As shown in the fragment of machine code below, when DIFFER.c is compiled for size (<bpt id=\"p1\">**</bpt>/Os<ept id=\"p1\">**</ept>), the compiler implements the multiply expression in the return statement explicitly as a multiply to produce a short but slower sequence of code:","source":"As shown in the fragment of machine code below, when DIFFER.c is compiled for size (**/Os**), the compiler implements the multiply expression in the return statement explicitly as a multiply to produce a short but slower sequence of code:"},{"pos":[3504,3726],"content":"Alternately, when DIFFER.c is compiled for speed (<bpt id=\"p1\">**</bpt>/Ot<ept id=\"p1\">**</ept>), the compiler implements the multiply expression in the return statement as a series of shift and <ph id=\"ph1\">`LEA`</ph> instructions to produce a fast but longer sequence of code:","source":"Alternately, when DIFFER.c is compiled for speed (**/Ot**), the compiler implements the multiply expression in the return statement as a series of shift and `LEA` instructions to produce a fast but longer sequence of code:"},{"content":"END x86 Specific","pos":[3871,3887]},{"content":"To set this compiler option in the Visual Studio development environment","pos":[3899,3971]},{"content":"Open the project's <bpt id=\"p1\">**</bpt>Property Pages<ept id=\"p1\">**</ept> dialog box.","pos":[3981,4030],"source":"Open the project's **Property Pages** dialog box."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Working with Project Properties<ept id=\"p1\">](../../ide/working-with-project-properties.md)</ept>.","pos":[4031,4128],"source":" For details, see [Working with Project Properties](../../ide/working-with-project-properties.md)."},{"pos":[4138,4165],"content":"Click the <bpt id=\"p1\">**</bpt>C/C++<ept id=\"p1\">**</ept> folder.","source":"Click the **C/C++** folder."},{"pos":[4175,4216],"content":"Click the <bpt id=\"p1\">**</bpt>Optimization<ept id=\"p1\">**</ept> property page.","source":"Click the **Optimization** property page."},{"pos":[4226,4270],"content":"Modify the <bpt id=\"p1\">**</bpt>Favor Size or Speed<ept id=\"p1\">**</ept> property.","source":"Modify the **Favor Size or Speed** property."},{"content":"To set this compiler option programmatically","pos":[4280,4324]},{"content":"See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.FavorSizeOrSpeed%2A&gt;.","pos":[4334,4421],"source":"See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.FavorSizeOrSpeed%2A>."},{"content":"See Also","pos":[4430,4438]},{"content":"/O Options (Optimize Code)","pos":[4443,4469]},{"content":"Compiler Options","pos":[4526,4542]},{"content":"Setting Compiler Options","pos":[4592,4616]}],"content":"---\ntitle: \"-Os, -Ot (Favor Small Code, Favor Fast Code) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"VC.Project.VCCLWCECompilerTool.FavorSizeOrSpeed\"\n  - \"/os\"\n  - \"VC.Project.VCCLCompilerTool.FavorSizeOrSpeed\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"favor fast code compiler option [C++]\"\n  - \"/Os compiler option [C++]\"\n  - \"Ot compiler option [C++]\"\n  - \"/Ot compiler option [C++]\"\n  - \"small machine code\"\n  - \"-Ot compiler option [C++]\"\n  - \"fast code\"\n  - \"favor small code compiler option [C++]\"\n  - \"Os compiler option [C++]\"\n  - \"-Os compiler option [C++]\"\nms.assetid: 9a340806-fa15-4308-892c-355d83cac0f2\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# /Os, /Ot (Favor Small Code, Favor Fast Code)\nMinimizes or maximizes the size of EXEs and DLLs.  \n  \n## Syntax  \n  \n```  \n/Os  \n/Ot  \n```  \n  \n## Remarks  \n **/Os** (Favor Small Code) minimizes the size of EXEs and DLLs by instructing the compiler to favor size over speed. The compiler can reduce many C and C++ constructs to functionally similar sequences of machine code. Occasionally these differences offer tradeoffs of size versus speed. The **/Os** and **/Ot** options allow you to specify a preference for one over the other:  \n  \n **/Ot** (Favor Fast Code) maximizes the speed of EXEs and DLLs by instructing the compiler to favor speed over size. (This is the default.) The compiler can reduce many C and C++ constructs to functionally similar sequences of machine code. Occasionally, these differences offer tradeoffs of size versus speed. The /Ot option is implied by the Maximize Speed ([/O2](../../build/reference/o1-o2-minimize-size-maximize-speed.md)) option. The **/O2** option combines several options to produce very fast code.  \n  \n If you use **/Os** or **/Ot**, then you must also specify [/Og](../../build/reference/og-global-optimizations.md) to optimize the code.  \n  \n> [!NOTE]\n>  Information that is gathered from profiling test runs will override optimizations that would otherwise be in effect if you specify **/Ob**, **/Os**, or **/Ot**. For more information, [Profile-Guided Optimizations](../../build/reference/profile-guided-optimizations.md).  \n  \n **x86 Specific**  \n  \n The following example code demonstrates the difference between the Favor Small Code (**/Os**) options and the Favor Fast Code (**/Ot**) option:  \n  \n> [!NOTE]\n>  The following describes the expected behavior when using **/Os** or **/Ot**. However, compiler behavior from release to release may result in different optimizations for the code below.  \n  \n```  \n/* differ.c  \n  This program implements a multiplication operator  \n  Compile with /Os to implement multiply explicitly as multiply.  \n  Compile with /Ot to implement as a series of shift and LEA instructions.  \n*/  \nint differ(int x)  \n{  \n    return x * 71;  \n}  \n```  \n  \n As shown in the fragment of machine code below, when DIFFER.c is compiled for size (**/Os**), the compiler implements the multiply expression in the return statement explicitly as a multiply to produce a short but slower sequence of code:  \n  \n```  \nmov    eax, DWORD PTR _x$[ebp]  \nimul   eax, 71                  ; 00000047H  \n```  \n  \n Alternately, when DIFFER.c is compiled for speed (**/Ot**), the compiler implements the multiply expression in the return statement as a series of shift and `LEA` instructions to produce a fast but longer sequence of code:  \n  \n```  \nmov    eax, DWORD PTR _x$[ebp]  \nmov    ecx, eax  \nshl    eax, 3  \nlea    eax, DWORD PTR [eax+eax*8]  \nsub    eax, ecx  \n```  \n  \n **END x86 Specific**  \n  \n### To set this compiler option in the Visual Studio development environment  \n  \n1.  Open the project's **Property Pages** dialog box. For details, see [Working with Project Properties](../../ide/working-with-project-properties.md).  \n  \n2.  Click the **C/C++** folder.  \n  \n3.  Click the **Optimization** property page.  \n  \n4.  Modify the **Favor Size or Speed** property.  \n  \n### To set this compiler option programmatically  \n  \n-   See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.FavorSizeOrSpeed%2A>.  \n  \n## See Also  \n [/O Options (Optimize Code)](../../build/reference/o-options-optimize-code.md)   \n [Compiler Options](../../build/reference/compiler-options.md)   \n [Setting Compiler Options](../../build/reference/setting-compiler-options.md)"}