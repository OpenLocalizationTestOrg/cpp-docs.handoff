{"nodes":[{"pos":[12,72],"content":"Storing and Loading CObjects via an Archive | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Storing and Loading CObjects via an Archive | Microsoft Docs","pos":[0,60]}]},{"content":"Storing and Loading CObjects via an Archive","pos":[794,837]},{"content":"Storing and loading <ph id=\"ph1\">`CObject`</ph>s via an archive requires extra consideration.","pos":[838,913],"source":"Storing and loading `CObject`s via an archive requires extra consideration."},{"content":"In certain cases, you should call the <ph id=\"ph1\">`Serialize`</ph> function of the object, where the <ph id=\"ph2\">`CArchive`</ph> object is a parameter of the <ph id=\"ph3\">`Serialize`</ph> call, as opposed to using the <bpt id=\"p1\">**</bpt><ph id=\"ph4\">&lt;\\&lt;</ph><ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt><ph id=\"ph5\">&gt;&gt;</ph><ept id=\"p2\">**</ept> operator of the <ph id=\"ph6\">`CArchive`</ph>.","pos":[914,1125],"source":" In certain cases, you should call the `Serialize` function of the object, where the `CArchive` object is a parameter of the `Serialize` call, as opposed to using the **<\\<** or **>>** operator of the `CArchive`."},{"content":"The important fact to keep in mind is that the <ph id=\"ph1\">`CArchive`</ph> <bpt id=\"p1\">**</bpt><ph id=\"ph2\">&gt;&gt;</ph><ept id=\"p1\">**</ept> operator constructs the <ph id=\"ph3\">`CObject`</ph> in memory based on <ph id=\"ph4\">`CRuntimeClass`</ph> information previously written to the file by the storing archive.","pos":[1126,1326],"source":" The important fact to keep in mind is that the `CArchive` **>>** operator constructs the `CObject` in memory based on `CRuntimeClass` information previously written to the file by the storing archive."},{"content":"Therefore, whether you use the <ph id=\"ph1\">`CArchive`</ph> <bpt id=\"p1\">**</bpt><ph id=\"ph2\">&lt;\\&lt;</ph><ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt><ph id=\"ph3\">&gt;&gt;</ph><ept id=\"p2\">**</ept> operators, versus calling <ph id=\"ph4\">`Serialize`</ph>, depends on whether you <bpt id=\"p3\">*</bpt>need<ept id=\"p3\">*</ept> the loading archive to dynamically reconstruct the object based on previously stored <ph id=\"ph5\">`CRuntimeClass`</ph> information.","pos":[1333,1576],"source":"Therefore, whether you use the `CArchive` **<\\<** and **>>** operators, versus calling `Serialize`, depends on whether you *need* the loading archive to dynamically reconstruct the object based on previously stored `CRuntimeClass` information."},{"content":"Use the <ph id=\"ph1\">`Serialize`</ph> function in the following cases:","pos":[1577,1629],"source":" Use the `Serialize` function in the following cases:"},{"content":"When deserializing the object, you know the exact class of the object beforehand.","pos":[1639,1720]},{"content":"When deserializing the object, you already have memory allocated for it.","pos":[1730,1802]},{"pos":[1810,2122],"content":"[!CAUTION]\n If you load the object using the `Serialize` function, you must also store the object using the `Serialize` function. Don't store using the `CArchive` **<<** operator and then load using the `Serialize` function, or store using the `Serialize` function and then load using **CArchive >>** operator.","leadings":["","> "],"nodes":[{"content":" If you load the object using the `Serialize` function, you must also store the object using the `Serialize` function. Don't store using the `CArchive` **<<** operator and then load using the `Serialize` function, or store using the `Serialize` function and then load using **CArchive >>** operator.","pos":[11,310],"nodes":[{"content":"If you load the object using the <ph id=\"ph1\">`Serialize`</ph> function, you must also store the object using the <ph id=\"ph2\">`Serialize`</ph> function.","pos":[1,118],"source":" If you load the object using the `Serialize` function, you must also store the object using the `Serialize` function."},{"content":"Don't store using the <ph id=\"ph1\">`CArchive`</ph> <bpt id=\"p1\">**</bpt><ph id=\"ph2\">&lt;&lt;</ph><ept id=\"p1\">**</ept> operator and then load using the <ph id=\"ph3\">`Serialize`</ph> function, or store using the <ph id=\"ph4\">`Serialize`</ph> function and then load using <bpt id=\"p2\">**</bpt>CArchive &gt;&gt;<ept id=\"p2\">**</ept> operator.","pos":[119,299],"source":" Don't store using the `CArchive` **<<** operator and then load using the `Serialize` function, or store using the `Serialize` function and then load using **CArchive >>** operator."}]}]},{"content":"The following example illustrates the cases:","pos":[2129,2173]},{"pos":[2191,2214],"content":"NVC_MFCSerialization#36"},{"pos":[2306,2329],"content":"NVC_MFCSerialization#37"},{"content":"In summary, if your serializable class defines an embedded <bpt id=\"p1\">**</bpt>CObjec<ept id=\"p1\">**</ept>t as a member, you should <bpt id=\"p2\">*</bpt>not<ept id=\"p2\">*</ept> use the <ph id=\"ph1\">`CArchive`</ph> <bpt id=\"p3\">**</bpt><ph id=\"ph2\">&lt;\\&lt;</ph><ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt><ph id=\"ph3\">&gt;&gt;</ph><ept id=\"p4\">**</ept> operators for that object, but should call the <ph id=\"ph4\">`Serialize`</ph> function instead.","pos":[2412,2627],"source":"In summary, if your serializable class defines an embedded **CObjec**t as a member, you should *not* use the `CArchive` **<\\<** and **>>** operators for that object, but should call the `Serialize` function instead."},{"content":"Also, if your serializable class defines a pointer to a <ph id=\"ph1\">`CObject`</ph> (or an object derived from <ph id=\"ph2\">`CObject`</ph>) as a member, but constructs this other object in its own constructor, you should also call <ph id=\"ph3\">`Serialize`</ph>.","pos":[2628,2835],"source":" Also, if your serializable class defines a pointer to a `CObject` (or an object derived from `CObject`) as a member, but constructs this other object in its own constructor, you should also call `Serialize`."},{"content":"See Also","pos":[2844,2852]},{"content":"Serialization: Serializing an Object","pos":[2857,2893]}],"content":"---\ntitle: \"Storing and Loading CObjects via an Archive | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"CObject\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CObjects, loading through archives\"\n  - \"CArchive class, storing and loading objects\"\n  - \"Serialize method, vs. CArchive operators\"\n  - \"CObject class, CArchive objects\"\n  - \"CObjects\"\nms.assetid: a829b6dd-bc31-47e0-8108-fbb946722db9\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Storing and Loading CObjects via an Archive\nStoring and loading `CObject`s via an archive requires extra consideration. In certain cases, you should call the `Serialize` function of the object, where the `CArchive` object is a parameter of the `Serialize` call, as opposed to using the **<\\<** or **>>** operator of the `CArchive`. The important fact to keep in mind is that the `CArchive` **>>** operator constructs the `CObject` in memory based on `CRuntimeClass` information previously written to the file by the storing archive.  \n  \n Therefore, whether you use the `CArchive` **<\\<** and **>>** operators, versus calling `Serialize`, depends on whether you *need* the loading archive to dynamically reconstruct the object based on previously stored `CRuntimeClass` information. Use the `Serialize` function in the following cases:  \n  \n-   When deserializing the object, you know the exact class of the object beforehand.  \n  \n-   When deserializing the object, you already have memory allocated for it.  \n  \n> [!CAUTION]\n>  If you load the object using the `Serialize` function, you must also store the object using the `Serialize` function. Don't store using the `CArchive` **<<** operator and then load using the `Serialize` function, or store using the `Serialize` function and then load using **CArchive >>** operator.  \n  \n The following example illustrates the cases:  \n  \n [!code-cpp[NVC_MFCSerialization#36](../mfc/codesnippet/cpp/storing-and-loading-cobjects-via-an-archive_1.h)]  \n  \n [!code-cpp[NVC_MFCSerialization#37](../mfc/codesnippet/cpp/storing-and-loading-cobjects-via-an-archive_2.cpp)]  \n  \n In summary, if your serializable class defines an embedded **CObjec**t as a member, you should *not* use the `CArchive` **<\\<** and **>>** operators for that object, but should call the `Serialize` function instead. Also, if your serializable class defines a pointer to a `CObject` (or an object derived from `CObject`) as a member, but constructs this other object in its own constructor, you should also call `Serialize`.  \n  \n## See Also  \n [Serialization: Serializing an Object](../mfc/serialization-serializing-an-object.md)\n\n"}