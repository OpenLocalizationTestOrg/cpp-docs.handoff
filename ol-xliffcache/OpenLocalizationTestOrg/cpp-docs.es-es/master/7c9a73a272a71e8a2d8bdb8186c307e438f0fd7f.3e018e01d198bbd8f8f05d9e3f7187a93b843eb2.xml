{"nodes":[{"pos":[12,43],"content":"ios_base Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ios_base Class | Microsoft Docs","pos":[0,31]}]},{"content":"ios_base Class","pos":[664,678]},{"content":"The class describes the storage and member functions common to both input and output streams that do not depend on the template parameters.","pos":[679,818]},{"content":"(The template class <bpt id=\"p1\">[</bpt>basic_ios<ept id=\"p1\">](../standard-library/basic-ios-class.md)</ept> describes what is common and is dependent on template parameters.)","pos":[819,957],"source":" (The template class [basic_ios](../standard-library/basic-ios-class.md) describes what is common and is dependent on template parameters.)"},{"content":"An object of class ios_base stores formatting information, which consists of:","pos":[964,1041]},{"pos":[1051,1117],"content":"Format flags in an object of type <bpt id=\"p1\">[</bpt>fmtflags<ept id=\"p1\">](#ios_base__fmtflags)</ept>.","source":"Format flags in an object of type [fmtflags](#ios_base__fmtflags)."},{"pos":[1127,1196],"content":"An exception mask in an object of type <bpt id=\"p1\">[</bpt>iostate<ept id=\"p1\">](#ios_base__iostate)</ept>.","source":"An exception mask in an object of type [iostate](#ios_base__iostate)."},{"pos":[1206,1249],"content":"A field width in an object of type <ph id=\"ph1\">`int`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","source":"A field width in an object of type `int`*.*"},{"pos":[1259,1306],"content":"A display precision in an object of type <ph id=\"ph1\">`int`</ph>.","source":"A display precision in an object of type `int`."},{"pos":[1316,1364],"content":"A locale object in an object of type <bpt id=\"p1\">**</bpt>locale<ept id=\"p1\">**</ept>.","source":"A locale object in an object of type **locale**."},{"pos":[1374,1447],"content":"Two extensible arrays, with elements of type <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`void`</ph> pointer.","source":"Two extensible arrays, with elements of type **long** and `void` pointer."},{"pos":[1454,1593],"content":"An object of class ios_base also stores stream state information, in an object of type <bpt id=\"p1\">[</bpt>iostate<ept id=\"p1\">](#ios_base__iostate)</ept>, and a callback stack.","source":"An object of class ios_base also stores stream state information, in an object of type [iostate](#ios_base__iostate), and a callback stack."},{"content":"Constructors","pos":[1603,1615]},{"content":"ios_base","pos":[1637,1645]},{"pos":[1668,1698],"content":"Constructs <ph id=\"ph1\">`ios_base`</ph> objects.","source":"Constructs `ios_base` objects."},{"content":"Typedefs","pos":[1709,1717]},{"content":"event_callback","pos":[1739,1753]},{"pos":[1782,1859],"content":"Describes a function passed to <bpt id=\"p1\">[</bpt>register_call<ept id=\"p1\">](#ios_base__register_callback)</ept>.","source":"Describes a function passed to [register_call](#ios_base__register_callback)."},{"content":"fmtflags","pos":[1865,1873]},{"content":"Constants to specify the appearance of output.","pos":[1896,1942]},{"content":"iostate","pos":[1948,1955]},{"content":"Defines constants describing the state of a stream.","pos":[1977,2028]},{"content":"openmode","pos":[2034,2042]},{"content":"Describes how to interact with a stream.","pos":[2065,2105]},{"content":"seekdir","pos":[2111,2118]},{"content":"Specifies starting point for offset operations.","pos":[2140,2187]},{"content":"Enums","pos":[2198,2203]},{"content":"event","pos":[2225,2230]},{"content":"Specifies event types.","pos":[2250,2272]},{"content":"Constants","pos":[2283,2292]},{"content":"adjustfield","pos":[2314,2325]},{"pos":[2348,2409],"content":"A bitmask defined as <ph id=\"ph1\">`internal`</ph> &amp;#124; <ph id=\"ph2\">`left`</ph> &amp;#124; <ph id=\"ph3\">`right`</ph>.","source":"A bitmask defined as `internal` &#124; `left` &#124; `right`."},{"content":"app","pos":[2415,2418]},{"content":"Specifies seeking to the end of a stream before each insertion.","pos":[2441,2504]},{"content":"ate","pos":[2510,2513]},{"content":"Specifies seeking to the end of a stream when its controlling object is first created.","pos":[2536,2622]},{"content":"badbit","pos":[2628,2634]},{"content":"Records a loss of integrity of the stream buffer.","pos":[2656,2705]},{"content":"basefield","pos":[2711,2720]},{"pos":[2743,2796],"content":"A bitmask defined as <ph id=\"ph1\">`dec`</ph> &amp;#124; <ph id=\"ph2\">`hex`</ph> &amp;#124; <ph id=\"ph3\">`oct`</ph>.","source":"A bitmask defined as `dec` &#124; `hex` &#124; `oct`."},{"content":"beg","pos":[2802,2805]},{"content":"Specifies seeking relative to the beginning of a sequence.","pos":[2827,2885]},{"content":"binary","pos":[2891,2897]},{"content":"Specifies that a file should be read as a binary stream, rather than as a text stream.","pos":[2920,3006]},{"content":"boolalpha","pos":[3012,3021]},{"pos":[3044,3172],"content":"Specifies insertion or extraction of objects of type <ph id=\"ph1\">`bool`</ph> as names (such as <ph id=\"ph2\">`true`</ph> and <ph id=\"ph3\">`false`</ph>) rather than as numeric values.","source":"Specifies insertion or extraction of objects of type `bool` as names (such as `true` and `false`) rather than as numeric values."},{"content":"cur","pos":[3178,3181]},{"content":"Specifies seeking relative to the current position within a sequence.","pos":[3203,3272]},{"content":"dec","pos":[3278,3281]},{"content":"Specifies insertion or extraction of integer values in decimal format.","pos":[3304,3374]},{"content":"end","pos":[3380,3383]},{"content":"Specifies seeking relative to the end of a sequence.","pos":[3405,3457]},{"content":"eofbit","pos":[3463,3469]},{"content":"Records end-of-file while extracting from a stream.","pos":[3491,3542]},{"content":"failbit","pos":[3548,3555]},{"content":"Records a failure to extract a valid field from a stream.","pos":[3577,3634]},{"content":"fixed","pos":[3640,3645]},{"content":"Specifies insertion of floating-point values in fixed-point format (with no exponent field).","pos":[3668,3760]},{"content":"floatfield","pos":[3766,3776]},{"pos":[3799,3834],"content":"A bitmask defined as <ph id=\"ph1\">`fixed`</ph> &amp;#124;","source":"A bitmask defined as `fixed` &#124; "},{"content":"goodbit","pos":[3853,3860]},{"content":"All state bits clear.","pos":[3882,3903]},{"content":"hex","pos":[3909,3912]},{"content":"Specifies insertion or extraction of integer values in hexadecimal format.","pos":[3935,4009]},{"content":"in","pos":[4015,4017]},{"content":"Specifies extraction from a stream.","pos":[4040,4075]},{"content":"internal","pos":[4081,4089]},{"content":"Pads to a field width by inserting fill characters at a point internal to a generated numeric field.","pos":[4112,4212]},{"content":"left","pos":[4218,4222]},{"content":"Specifies left justification.","pos":[4245,4274]},{"content":"oct","pos":[4280,4283]},{"content":"Specifies insertion or extraction of integer values in octal format.","pos":[4306,4374]},{"content":"out","pos":[4380,4383]},{"content":"Specifies insertion to a stream.","pos":[4406,4438]},{"content":"right","pos":[4444,4449]},{"content":"Specifies right justification.","pos":[4472,4502]},{"content":"scientific","pos":[4508,4518]},{"content":"Specifies insertion of floating-point values in scientific format (with an exponent field).","pos":[4541,4632]},{"content":"showbase","pos":[4638,4646]},{"content":"Specifies insertion of a prefix that reveals the base of a generated integer field.","pos":[4669,4752]},{"content":"showpoint","pos":[4758,4767]},{"content":"Specifies unconditional insertion of a decimal point in a generated floating-point field.","pos":[4790,4879]},{"content":"showpos","pos":[4885,4892]},{"content":"Specifies insertion of a plus sign in a nonnegative generated numeric field.","pos":[4915,4991]},{"content":"skipws","pos":[4997,5003]},{"content":"Specifies skipping leading white space before certain extractions.","pos":[5026,5092]},{"content":"trunc","pos":[5098,5103]},{"content":"Specifies deleting contents of an existing file when its controlling object is created.","pos":[5126,5213]},{"content":"unitbuf","pos":[5219,5226]},{"content":"Causes output to be flushed after each insertion.","pos":[5249,5298]},{"content":"uppercase","pos":[5304,5313]},{"content":"Specifies insertion of uppercase equivalents of lowercase letters in certain insertions.","pos":[5336,5424]},{"content":"Member Functions","pos":[5435,5451]},{"content":"failure","pos":[5473,5480]},{"pos":[5502,5728],"content":"The member class serves as the base class for all exceptions thrown by the member function <bpt id=\"p1\">[</bpt>clear<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__clear)</ept> in template class <bpt id=\"p2\">[</bpt>basic_ios<ept id=\"p2\">](../standard-library/basic-ios-class.md)</ept>.","source":"The member class serves as the base class for all exceptions thrown by the member function [clear](../standard-library/basic-ios-class.md#basic_ios__clear) in template class [basic_ios](../standard-library/basic-ios-class.md)."},{"content":"flags","pos":[5734,5739]},{"content":"Sets or returns the current flag settings.","pos":[5759,5801]},{"content":"getloc","pos":[5807,5813]},{"content":"Returns the stored locale object.","pos":[5834,5867]},{"content":"imbue","pos":[5873,5878]},{"content":"Changes the locale.","pos":[5898,5917]},{"content":"Init","pos":[5923,5927]},{"content":"Creates the standard iostream objects when constructed.","pos":[5946,6001]},{"content":"iword","pos":[6007,6012]},{"pos":[6032,6075],"content":"Assigns a value to be stored as an <ph id=\"ph1\">`iword`</ph>.","source":"Assigns a value to be stored as an `iword`."},{"content":"precision","pos":[6081,6090]},{"content":"Specifies the number of digits to display in a floating-point number.","pos":[6114,6183]},{"content":"pword","pos":[6189,6194]},{"pos":[6214,6256],"content":"Assigns a value to be stored as a <ph id=\"ph1\">`pword`</ph>.","source":"Assigns a value to be stored as a `pword`."},{"content":"register_callback","pos":[6262,6279]},{"content":"Specifies a callback function.","pos":[6311,6341]},{"content":"setf","pos":[6347,6351]},{"content":"Sets the specified flags.","pos":[6370,6395]},{"content":"sync_with_stdio","pos":[6401,6416]},{"content":"Ensures that iostream and C run-time library operations occur in the order that they appear in source code.","pos":[6446,6553]},{"content":"unsetf","pos":[6559,6565]},{"content":"Causes the specified flags to be off.","pos":[6586,6623]},{"content":"width","pos":[6629,6634]},{"content":"Sets the length of the output stream.","pos":[6654,6691]},{"content":"xalloc","pos":[6697,6703]},{"content":"Specifies that a variable shall be part of the stream.","pos":[6724,6778]},{"content":"Operators","pos":[6789,6798]},{"content":"operator=","pos":[6820,6829]},{"pos":[6855,6902],"content":"The assignment operator for <ph id=\"ph1\">`ios_base`</ph> objects.","source":"The assignment operator for `ios_base` objects."},{"content":"Requirements","pos":[6912,6924]},{"pos":[6928,6946],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>ios&gt;","source":"**Header:** \\<ios>"},{"pos":[6953,6971],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[7013,7028],"content":"ios_base::event"},{"content":"Specifies event types.","pos":[7032,7054]},{"content":"Remarks","pos":[7143,7150]},{"content":"The type is an enumerated type that describes an object that can store the callback event used as an argument to a function registered with <bpt id=\"p1\">[</bpt>register_callback<ept id=\"p1\">](#ios_base__register_callback)</ept>.","pos":[7154,7344],"source":"The type is an enumerated type that describes an object that can store the callback event used as an argument to a function registered with [register_callback](#ios_base__register_callback)."},{"content":"The distinct event values are:","pos":[7345,7375]},{"pos":[7383,7615],"content":"<bpt id=\"p1\">**</bpt>copyfmt_event<ept id=\"p1\">**</ept>, to identify a callback that occurs near the end of a call to <bpt id=\"p2\">[</bpt>copyfmt<ept id=\"p2\">](../standard-library/basic-ios-class.md#basic_ios__copyfmt)</ept>, just before the <bpt id=\"p3\">[</bpt>exception mask<ept id=\"p3\">](../standard-library/ios-base-class.md)</ept> is copied.","source":"**copyfmt_event**, to identify a callback that occurs near the end of a call to [copyfmt](../standard-library/basic-ios-class.md#basic_ios__copyfmt), just before the [exception mask](../standard-library/ios-base-class.md) is copied."},{"pos":[7623,7838],"content":"<bpt id=\"p1\">**</bpt>erase_event<ept id=\"p1\">**</ept>, to identify a callback that occurs at the beginning of a call to <bpt id=\"p2\">[</bpt>copyfmt<ept id=\"p2\">](../standard-library/basic-ios-class.md#basic_ios__copyfmt)</ept>, or at the beginning of a call to the destructor for <bpt id=\"p3\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p3\">**</ept>.","source":"**erase_event**, to identify a callback that occurs at the beginning of a call to [copyfmt](../standard-library/basic-ios-class.md#basic_ios__copyfmt), or at the beginning of a call to the destructor for **\\*this**."},{"pos":[7846,7982],"content":"<bpt id=\"p1\">**</bpt>imbue_event<ept id=\"p1\">**</ept>, to identify a callback that occurs at the end of a call to <bpt id=\"p2\">[</bpt>imbue<ept id=\"p2\">](#ios_base__imbue)</ept>, just before the function returns.","source":"**imbue_event**, to identify a callback that occurs at the end of a call to [imbue](#ios_base__imbue), just before the function returns."},{"content":"Example","pos":[7992,7999]},{"pos":[8004,8073],"content":"See <bpt id=\"p1\">[</bpt>register_callback<ept id=\"p1\">](#ios_base__register_callback)</ept> for an example.","source":"See [register_callback](#ios_base__register_callback) for an example."},{"pos":[8124,8148],"content":"ios_base::event_callback"},{"pos":[8152,8229],"content":"Describes a function passed to <bpt id=\"p1\">[</bpt>register_call<ept id=\"p1\">](#ios_base__register_callback)</ept>.","source":"Describes a function passed to [register_call](#ios_base__register_callback)."},{"content":"Parameters","pos":[8369,8379]},{"content":"_E","pos":[8384,8386]},{"content":"The <bpt id=\"p1\">[</bpt>event<ept id=\"p1\">](#ios_base__event)</ept>.","pos":[8391,8421],"source":" The [event](#ios_base__event)."},{"content":"The stream in which the event was called.","pos":[8439,8480]},{"content":"_I","pos":[8488,8490]},{"content":"A user-defined number.","pos":[8495,8517]},{"content":"Remarks","pos":[8527,8534]},{"content":"The type describes a pointer to a function that can be registered with <bpt id=\"p1\">[</bpt>register_callback<ept id=\"p1\">](#ios_base__register_callback)</ept>.","pos":[8538,8659],"source":"The type describes a pointer to a function that can be registered with [register_callback](#ios_base__register_callback)."},{"content":"This type of function must not throw an exception.","pos":[8660,8710]},{"content":"Example","pos":[8720,8727]},{"pos":[8732,8824],"content":"See <bpt id=\"p1\">[</bpt>register_call<ept id=\"p1\">](#ios_base__register_callback)</ept> for an example that uses <ph id=\"ph1\">`event_callback`</ph>.","source":"See [register_call](#ios_base__register_callback) for an example that uses `event_callback`."},{"pos":[8868,8885],"content":"ios_base::failure"},{"pos":[8889,9082],"content":"The class <ph id=\"ph1\">`failure`</ph> defines the base class for the types of all objects thrown as exceptions, by functions in the <ph id=\"ph2\">`iostreams`</ph> library, to report errors detected during stream buffer operations.","source":"The class `failure` defines the base class for the types of all objects thrown as exceptions, by functions in the `iostreams` library, to report errors detected during stream buffer operations."},{"content":"Remarks","pos":[9353,9360]},{"content":"The value returned by <ph id=\"ph1\">`what``()`</ph> is a copy of <ph id=\"ph2\">`_Message`</ph>, possibly augmented with a test based on <ph id=\"ph3\">`_Code`</ph>.","pos":[9364,9470],"source":"The value returned by `what``()` is a copy of `_Message`, possibly augmented with a test based on `_Code`."},{"content":"If <ph id=\"ph1\">`_Code`</ph> is not specified, the default value is <ph id=\"ph2\">`make_error_code``(io_errc::stream)`</ph>.","pos":[9471,9558],"source":" If `_Code` is not specified, the default value is `make_error_code``(io_errc::stream)`."},{"content":"Example","pos":[9568,9575]},{"pos":[10086,10101],"content":"ios_base::flags"},{"content":"Sets or returns the current flag settings.","pos":[10105,10147]},{"content":"Parameters","pos":[10233,10243]},{"content":"The new <ph id=\"ph1\">`fmtflags`</ph> setting.","pos":[10258,10285],"source":" The new `fmtflags` setting."},{"content":"Return Value","pos":[10295,10307]},{"pos":[10311,10354],"content":"The previous or current <ph id=\"ph1\">`fmtflags`</ph> setting.","source":"The previous or current `fmtflags` setting."},{"content":"Remarks","pos":[10364,10371]},{"pos":[10375,10445],"content":"See <bpt id=\"p1\">[</bpt>ios_base::fmtflags<ept id=\"p1\">](#ios_base__fmtflags)</ept> for a list of the flags.","source":"See [ios_base::fmtflags](#ios_base__fmtflags) for a list of the flags."},{"content":"The first member function returns the stored format flags.","pos":[10452,10510]},{"content":"The second member function stores <ph id=\"ph1\">`fmtfl`</ph> in the format flags and returns its previous stored value.","pos":[10511,10611],"source":" The second member function stores `fmtfl` in the format flags and returns its previous stored value."},{"content":"Example","pos":[10621,10628]},{"pos":[10980,10998],"content":"ios_base::fmtflags"},{"content":"Constants to specify the appearance of output.","pos":[11002,11048]},{"content":"class ios_base {","pos":[11054,11070]},{"content":"public:","pos":[11076,11083]},{"content":"typedef implementation-defined-bitmask-type fmtflags;","pos":[11089,11142]},{"content":"static const fmtflags boolalpha;","pos":[11148,11180]},{"content":"static const fmtflags dec;","pos":[11186,11212]},{"content":"static const fmtflags fixed;","pos":[11218,11246]},{"content":"static const fmtflags hex;","pos":[11252,11278]},{"content":"static const fmtflags internal;","pos":[11284,11315]},{"content":"static const fmtflags left;","pos":[11321,11348]},{"content":"static const fmtflags oct;","pos":[11354,11380]},{"content":"static const fmtflags right;","pos":[11386,11414]},{"content":"static const fmtflags scientific;","pos":[11420,11453]},{"content":"static const fmtflags showbase;","pos":[11459,11490]},{"content":"static const fmtflags showpoint;","pos":[11496,11528]},{"content":"static const fmtflags showpos;","pos":[11534,11564]},{"content":"static const fmtflags skipws;","pos":[11570,11599]},{"content":"static const fmtflags unitbuf;","pos":[11605,11635]},{"content":"static const fmtflags uppercase;","pos":[11641,11673]},{"content":"static const fmtflags adjustfield;","pos":[11679,11713]},{"content":"static const fmtflags basefield;","pos":[11719,11751]},{"content":"static const fmtflags floatfield;","pos":[11757,11790]},{"content":"...","pos":[11796,11799]},{"content":"};","pos":[11805,11807]},{"content":"Remarks","pos":[11817,11824]},{"pos":[11828,11891],"content":"Supports the manipulators in <bpt id=\"p1\">[</bpt>ios<ept id=\"p1\">](../standard-library/ios.md)</ept>.","source":"Supports the manipulators in [ios](../standard-library/ios.md)."},{"content":"The type is a bitmask type that describes an object that can store format flags.","pos":[11898,11978]},{"content":"The distinct flag values (elements) are:","pos":[11979,12019]},{"pos":[12032,12088],"content":", to insert or extract integer values in decimal format."},{"pos":[12101,12161],"content":", to insert or extract integer values in hexadecimal format."},{"pos":[12174,12228],"content":", to insert or extract integer values in octal format."},{"pos":[12246,12318],"content":", to insert a prefix that reveals the base of a generated integer field."},{"content":", to pad to a field width as needed by inserting fill characters at a point internal to a generated numeric field.","pos":[12336,12450]},{"content":"(For information on setting the field width, see <bpt id=\"p1\">[</bpt>setw<ept id=\"p1\">](../standard-library/iomanip-functions.md#setw)</ept>).","pos":[12451,12555],"source":" (For information on setting the field width, see [setw](../standard-library/iomanip-functions.md#setw))."},{"pos":[12569,12687],"content":", to pad to a field width as needed by inserting fill characters at the end of a generated field (left justification)."},{"pos":[12702,12827],"content":", to pad to a field width as needed by inserting fill characters at the beginning of a generated field (right justification)."},{"pos":[12846,12960],"content":", to insert or extract objects of type <ph id=\"ph1\">`bool`</ph> as names (such as <ph id=\"ph2\">`true`</ph> and <ph id=\"ph3\">`false`</ph>) rather than as numeric values.","source":", to insert or extract objects of type `bool` as names (such as `true` and `false`) rather than as numeric values."},{"pos":[12975,13056],"content":", to insert floating-point values in fixed-point format (with no exponent field)."},{"pos":[13076,13156],"content":", to insert floating-point values in scientific format (with an exponent field)."},{"pos":[13175,13255],"content":", to insert a decimal point unconditionally in a generated floating-point field."},{"pos":[13272,13337],"content":", to insert a plus sign in a nonnegative generated numeric field."},{"pos":[13353,13410],"content":", to skip leading white space before certain extractions."},{"pos":[13427,13466],"content":", to flush output after each insertion."},{"pos":[13485,13562],"content":", to insert uppercase equivalents of lowercase letters in certain insertions."},{"content":"In addition, several useful values are:","pos":[13569,13608]},{"pos":[13629,13683],"content":", a bitmask defined as <ph id=\"ph1\">`internal`</ph> &amp;#124; <ph id=\"ph2\">`left`</ph> &amp;#124;","source":", a bitmask defined as `internal` &#124; `left` &#124; "},{"pos":[13710,13748],"content":", defined as <ph id=\"ph1\">`dec`</ph> &amp;#124; <ph id=\"ph2\">`hex`</ph> &amp;#124;","source":", defined as `dec` &#124; `hex` &#124; "},{"pos":[13774,13801],"content":", defined as <ph id=\"ph1\">`fixed`</ph> &amp;#124;","source":", defined as `fixed` &#124; "},{"pos":[13821,13928],"content":"For examples of functions that modify these format flags, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>iomanip&gt;<ept id=\"p1\">](../standard-library/iomanip.md)</ept>.","source":"For examples of functions that modify these format flags, see [\\<iomanip>](../standard-library/iomanip.md)."},{"pos":[13971,13987],"content":"ios_base::getloc"},{"content":"Returns the stored locale object.","pos":[13991,14024]},{"content":"Return Value","pos":[14074,14086]},{"content":"The stored locale object.","pos":[14090,14115]},{"content":"Example","pos":[14125,14132]},{"pos":[14395,14410],"content":"ios_base::imbue"},{"content":"Changes the locale.","pos":[14414,14433]},{"content":"Parameters","pos":[14494,14504]},{"content":"The new locale setting.","pos":[14518,14541]},{"content":"Return Value","pos":[14551,14563]},{"content":"The previous locale.","pos":[14567,14587]},{"content":"Remarks","pos":[14597,14604]},{"content":"The member function stores <ph id=\"ph1\">`_Loc`</ph> in the locale object and then reports the callback event and <ph id=\"ph2\">`imbue_event`</ph>.","pos":[14608,14717],"source":"The member function stores `_Loc` in the locale object and then reports the callback event and `imbue_event`."},{"content":"It returns the previous stored value.","pos":[14718,14755]},{"content":"Example","pos":[14765,14772]},{"pos":[14777,14870],"content":"See <bpt id=\"p1\">[</bpt>basic_ios::imbue<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__imbue)</ept> for a sample.","source":"See [basic_ios::imbue](../standard-library/basic-ios-class.md#basic_ios__imbue) for a sample."},{"pos":[14911,14925],"content":"ios_base::Init"},{"content":"Creates the standard iostream objects when constructed.","pos":[14929,14984]},{"content":"class Init { };","pos":[14990,15005]},{"content":"Remarks","pos":[15015,15022]},{"content":"The nested class describes an object whose construction ensures that the standard iostreams objects are properly constructed, even before the execution of a constructor for an arbitrary static object.","pos":[15026,15226]},{"pos":[15271,15289],"content":"ios_base::ios_base"},{"content":"Constructs ios_base objects.","pos":[15293,15321]},{"content":"Remarks","pos":[15366,15373]},{"content":"The (protected) constructor does nothing.","pos":[15377,15418]},{"content":"A later call to <bpt id=\"p1\">**</bpt>basic_ios::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>init<ept id=\"p2\">](../standard-library/basic-ios-class.md#basic_ios__init)</ept> must initialize the object before it can be safely destroyed.","pos":[15419,15574],"source":" A later call to **basic_ios::**[init](../standard-library/basic-ios-class.md#basic_ios__init) must initialize the object before it can be safely destroyed."},{"content":"Thus, the only safe use for class ios_base is as a base class for template class <bpt id=\"p1\">[</bpt>basic_ios<ept id=\"p1\">](../standard-library/basic-ios-class.md)</ept>.","pos":[15575,15708],"source":" Thus, the only safe use for class ios_base is as a base class for template class [basic_ios](../standard-library/basic-ios-class.md)."},{"pos":[15752,15769],"content":"ios_base::iostate"},{"content":"The type of constants that describe the state of a stream.","pos":[15773,15831]},{"content":"class ios_base {","pos":[15837,15853]},{"content":"public:","pos":[15859,15866]},{"content":"typedef implementation-defined-bitmask-type iostate;","pos":[15872,15924]},{"content":"static const iostate badbit;","pos":[15930,15958]},{"content":"static const iostate eofbit;","pos":[15964,15992]},{"content":"static const iostate failbit;","pos":[15998,16027]},{"content":"static const iostate goodbit;","pos":[16033,16062]},{"content":"...","pos":[16068,16071]},{"content":"};","pos":[16077,16079]},{"content":"Remarks","pos":[16089,16096]},{"content":"The type is a bitmask type that describes an object that can store stream state information.","pos":[16100,16192]},{"content":"The distinct flag values (elements) are:","pos":[16193,16233]},{"pos":[16249,16302],"content":", to record a loss of integrity of the stream buffer."},{"pos":[16318,16373],"content":", to record end-of-file while extracting from a stream."},{"pos":[16390,16451],"content":", to record a failure to extract a valid field from a stream."},{"pos":[16458,16590],"content":"In addition, a useful value is <ph id=\"ph1\">`goodbit`</ph>, where none of the previously mentioned bits are set ( <ph id=\"ph2\">`goodbit`</ph> is guaranteed to be zero).","source":"In addition, a useful value is `goodbit`, where none of the previously mentioned bits are set ( `goodbit` is guaranteed to be zero)."},{"pos":[16632,16647],"content":"ios_base::iword"},{"pos":[16651,16694],"content":"Assigns a value to be stored as an <ph id=\"ph1\">`iword`</ph>.","source":"Assigns a value to be stored as an `iword`."},{"content":"Parameters","pos":[16743,16753]},{"content":"The index of the value to store as an <ph id=\"ph1\">`iword`</ph>.","pos":[16766,16812],"source":" The index of the value to store as an `iword`."},{"content":"Remarks","pos":[16822,16829]},{"content":"The member function returns a reference to element <ph id=\"ph1\">`idx`</ph> of the extensible array with elements of type <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>.","pos":[16833,16945],"source":"The member function returns a reference to element `idx` of the extensible array with elements of type **long**."},{"content":"All elements are effectively present and initially store the value zero.","pos":[16946,17018]},{"content":"The returned reference is invalid after the next call to <ph id=\"ph1\">`iword`</ph> for the object, after the object is altered by a call to <bpt id=\"p1\">**</bpt>basic_ios::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>copyfmt<ept id=\"p2\">](../standard-library/basic-ios-class.md#basic_ios__copyfmt)</ept>, or after the object is destroyed.","pos":[17019,17259],"source":" The returned reference is invalid after the next call to `iword` for the object, after the object is altered by a call to **basic_ios::**[copyfmt](../standard-library/basic-ios-class.md#basic_ios__copyfmt), or after the object is destroyed."},{"pos":[17266,17491],"content":"If <ph id=\"ph1\">`idx`</ph> is negative or if unique storage is unavailable for the element, the function calls <bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept><bpt id=\"p2\">**</bpt>(badbit)<ept id=\"p2\">**</ept> and returns a reference that might not be unique.","source":"If `idx` is negative or if unique storage is unavailable for the element, the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)**(badbit)** and returns a reference that might not be unique."},{"pos":[17498,17604],"content":"To obtain a unique index, for use across all objects of type <ph id=\"ph1\">`ios_base`</ph>, call <bpt id=\"p1\">[</bpt>xalloc<ept id=\"p1\">](#ios_base__xalloc)</ept>.","source":"To obtain a unique index, for use across all objects of type `ios_base`, call [xalloc](#ios_base__xalloc)."},{"content":"Example","pos":[17614,17621]},{"pos":[17626,17693],"content":"See <bpt id=\"p1\">[</bpt>xalloc<ept id=\"p1\">](#ios_base__xalloc)</ept> for a sample of how to use <ph id=\"ph1\">`iword`</ph>.","source":"See [xalloc](#ios_base__xalloc) for a sample of how to use `iword`."},{"pos":[17738,17756],"content":"ios_base::openmode"},{"content":"Describes how to interact with a stream.","pos":[17760,17800]},{"content":"class ios_base {","pos":[17806,17822]},{"content":"public:","pos":[17828,17835]},{"content":"typedef implementation-defined-bitmask-type iostate;","pos":[17841,17893]},{"content":"static const iostate badbit;","pos":[17899,17927]},{"content":"static const iostate eofbit;","pos":[17933,17961]},{"content":"static const iostate failbit;","pos":[17967,17996]},{"content":"static const iostate goodbit;","pos":[18002,18031]},{"content":"...","pos":[18037,18040]},{"content":"};","pos":[18046,18048]},{"content":"Remarks","pos":[18058,18065]},{"content":"The type is a <ph id=\"ph1\">`bitmask type`</ph> that describes an object that can store the opening mode for several iostreams objects.","pos":[18069,18185],"source":"The type is a `bitmask type` that describes an object that can store the opening mode for several iostreams objects."},{"content":"The distinct flag values (elements) are:","pos":[18186,18226]},{"pos":[18234,18296],"content":"<bpt id=\"p1\">**</bpt>app<ept id=\"p1\">**</ept>, to seek to the end of a stream before each insertion.","source":"**app**, to seek to the end of a stream before each insertion."},{"pos":[18304,18389],"content":"<bpt id=\"p1\">**</bpt>ate<ept id=\"p1\">**</ept>, to seek to the end of a stream when its controlling object is first created.","source":"**ate**, to seek to the end of a stream when its controlling object is first created."},{"pos":[18397,18473],"content":"<bpt id=\"p1\">**</bpt>binary<ept id=\"p1\">**</ept>, to read a file as a binary stream, rather than as a text stream.","source":"**binary**, to read a file as a binary stream, rather than as a text stream."},{"pos":[18481,18524],"content":"<bpt id=\"p1\">**</bpt>in<ept id=\"p1\">**</ept>, to permit extraction from a stream.","source":"**in**, to permit extraction from a stream."},{"pos":[18532,18573],"content":"<bpt id=\"p1\">**</bpt>out<ept id=\"p1\">**</ept>, to permit insertion to a stream.","source":"**out**, to permit insertion to a stream."},{"pos":[18581,18670],"content":"<bpt id=\"p1\">**</bpt>trunc<ept id=\"p1\">**</ept>, to delete contents of an existing file when its controlling object is created.","source":"**trunc**, to delete contents of an existing file when its controlling object is created."},{"content":"Example","pos":[18680,18687]},{"pos":[19001,19020],"content":"ios_base::operator="},{"content":"The assignment operator for ios_base objects.","pos":[19024,19069]},{"content":"Parameters","pos":[19157,19167]},{"content":"An object of type <ph id=\"ph1\">`ios_base`</ph>.","pos":[19183,19212],"source":" An object of type `ios_base`."},{"content":"Return Value","pos":[19222,19234]},{"content":"The object being assigned to.","pos":[19238,19267]},{"content":"Remarks","pos":[19277,19284]},{"content":"The operator copies the stored formatting information, making a new copy of any extensible arrays.","pos":[19288,19386]},{"content":"It then returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[19387,19414],"source":" It then returns **\\*this**."},{"content":"Note that the callback stack is not copied.","pos":[19415,19458]},{"pos":[19465,19527],"content":"This operator is only used by classes derived from <ph id=\"ph1\">`ios_base`</ph>.","source":"This operator is only used by classes derived from `ios_base`."},{"pos":[19573,19592],"content":"ios_base::precision"},{"content":"Specifies the number of digits to display in a floating-point number.","pos":[19596,19665]},{"content":"Parameters","pos":[19765,19775]},{"content":"The number of significant digits to display, or the number of digits after the decimal point in fixed notation.","pos":[19790,19901]},{"content":"Return Value","pos":[19911,19923]},{"content":"The first member function returns the stored <bpt id=\"p1\">[</bpt>display precision<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>.","pos":[19927,20031],"source":"The first member function returns the stored [display precision](../standard-library/ios-base-class.md)."},{"content":"The second member function stores <ph id=\"ph1\">`_Prec`</ph> in the display precision and returns its previous stored value.","pos":[20032,20137],"source":" The second member function stores `_Prec` in the display precision and returns its previous stored value."},{"content":"Remarks","pos":[20147,20154]},{"pos":[20158,20270],"content":"Floating-point numbers are displayed in fixed notation with <bpt id=\"p1\">[</bpt>fixed<ept id=\"p1\">](../standard-library/ios-functions.md#fixed)</ept>.","source":"Floating-point numbers are displayed in fixed notation with [fixed](../standard-library/ios-functions.md#fixed)."},{"content":"Example","pos":[20280,20287]},{"pos":[20713,20728],"content":"ios_base::pword"},{"pos":[20732,20774],"content":"Assigns a value to be stored as a <ph id=\"ph1\">`pword`</ph>.","source":"Assigns a value to be stored as a `pword`."},{"content":"Parameters","pos":[20826,20836]},{"content":"The index of the value to store as a <ph id=\"ph1\">`pword`</ph>.","pos":[20850,20895],"source":" The index of the value to store as a `pword`."},{"content":"Remarks","pos":[20905,20912]},{"content":"The member function returns a reference to element _ <bpt id=\"p1\">*</bpt>Idx<ept id=\"p1\">*</ept> of the extensible array with elements of type <ph id=\"ph1\">`void`</ph> pointer.","pos":[20916,21036],"source":"The member function returns a reference to element _ *Idx* of the extensible array with elements of type `void` pointer."},{"content":"All elements are effectively present and initially store the null pointer.","pos":[21037,21111]},{"content":"The returned reference is invalid after the next call to <ph id=\"ph1\">`pword`</ph> for the object, after the object is altered by a call to <bpt id=\"p1\">**</bpt>basic_ios::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>copyfmt<ept id=\"p2\">](../standard-library/basic-ios-class.md#basic_ios__copyfmt)</ept>, or after the object is destroyed.","pos":[21112,21352],"source":" The returned reference is invalid after the next call to `pword` for the object, after the object is altered by a call to **basic_ios::**[copyfmt](../standard-library/basic-ios-class.md#basic_ios__copyfmt), or after the object is destroyed."},{"pos":[21359,21587],"content":"If _ <bpt id=\"p1\">*</bpt>Idx<ept id=\"p1\">*</ept> is negative, or if unique storage is unavailable for the element, the function calls <bpt id=\"p2\">[</bpt>setstate<ept id=\"p2\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept><bpt id=\"p3\">**</bpt>(badbit)<ept id=\"p3\">**</ept> and returns a reference that might not be unique.","source":"If _ *Idx* is negative, or if unique storage is unavailable for the element, the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)**(badbit)** and returns a reference that might not be unique."},{"pos":[21594,21700],"content":"To obtain a unique index, for use across all objects of type <ph id=\"ph1\">`ios_base`</ph>, call <bpt id=\"p1\">[</bpt>xalloc<ept id=\"p1\">](#ios_base__xalloc)</ept>.","source":"To obtain a unique index, for use across all objects of type `ios_base`, call [xalloc](#ios_base__xalloc)."},{"content":"Example","pos":[21710,21717]},{"pos":[21722,21786],"content":"See <bpt id=\"p1\">[</bpt>xalloc<ept id=\"p1\">](#ios_base__xalloc)</ept> for an example of using <ph id=\"ph1\">`pword`</ph>.","source":"See [xalloc](#ios_base__xalloc) for an example of using `pword`."},{"pos":[21840,21867],"content":"ios_base::register_callback"},{"content":"Specifies a callback function.","pos":[21871,21901]},{"content":"Parameters","pos":[22008,22018]},{"content":"Pointer to the callback function.","pos":[22031,22064]},{"content":"A user-defined number.","pos":[22080,22102]},{"content":"Remarks","pos":[22112,22119]},{"content":"The member function pushes the pair <ph id=\"ph1\">`{``pfn`</ph>, <ph id=\"ph2\">`idx``}`</ph> onto the stored callback stack <bpt id=\"p1\">[</bpt>callback stack<ept id=\"p1\">](../standard-library/ios-base-class.md)</ept>.","pos":[22123,22265],"source":"The member function pushes the pair `{``pfn`, `idx``}` onto the stored callback stack [callback stack](../standard-library/ios-base-class.md)."},{"content":"When a callback event <bpt id=\"p1\">**</bpt>ev<ept id=\"p1\">**</ept> is reported, the functions are called, in reverse order of registry, by the expression ( <bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\*</ph><ept id=\"p2\">**</ept><ph id=\"ph2\">`pfn`</ph>)( <bpt id=\"p3\">**</bpt>ev<ept id=\"p3\">**</ept>, ``<bpt id=\"p4\">**</bpt><ph id=\"ph3\">\\*</ph>this<ept id=\"p4\">**</ept>, ```idx`).","pos":[22266,22429],"source":" When a callback event **ev** is reported, the functions are called, in reverse order of registry, by the expression ( **\\***`pfn`)( **ev**, ``**\\*this**, ```idx`)."},{"content":"Example","pos":[22438,22445]},{"pos":[24243,24260],"content":"ios_base::seekdir"},{"content":"Remarks","pos":[24545,24552]},{"pos":[24753,24890],"content":"<bpt id=\"p1\">**</bpt>beg<ept id=\"p1\">**</ept>,   to seek (alter the current read or write position) relative to the beginning of a sequence (array,   stream,   or file).","leadings":["","  ","  ","  "],"source":"**beg**,\n  to seek (alter the current read or write position) relative to the beginning of a sequence (array,\n  stream,\n  or file)."},{"pos":[24897,24969],"content":"<bpt id=\"p1\">**</bpt>cur<ept id=\"p1\">**</ept>,   to seek relative to the current position within a sequence.","leadings":["","  "],"source":"**cur**,\n  to seek relative to the current position within a sequence."},{"pos":[24976,25031],"content":"<bpt id=\"p1\">**</bpt>end<ept id=\"p1\">**</ept>,   to seek relative to the end of a sequence.","leadings":["","  "],"source":"**end**,\n  to seek relative to the end of a sequence."},{"content":"Example","pos":[25040,25047]},{"pos":[25443,25457],"content":"ios_base::setf"},{"content":"Parameters","pos":[25613,25623]},{"content":"The flags to turn on.","pos":[25641,25662]},{"pos":[25668,25704],"content":"<bpt id=\"p1\">*</bpt>_Unset<ept id=\"p1\">*</ept><ph id=\"ph1\"> \n</ph>    The flags to turn off.","source":"*_Unset* \n    The flags to turn off."},{"content":"Return Value","pos":[25713,25725]},{"content":"Remarks","pos":[25766,25773]},{"content":"Example","pos":[26126,26133]},{"pos":[26560,26585],"content":"ios_base::sync_with_stdio"},{"content":"Parameters","pos":[26801,26811]},{"content":"Whether all streams are in sync with <bpt id=\"p1\">**</bpt>stdio<ept id=\"p1\">**</ept>.","pos":[26829,26876],"source":"    Whether all streams are in sync with **stdio**."},{"content":"Return Value","pos":[26885,26897]},{"content":"Remarks","pos":[26948,26955]},{"pos":[27579,27595],"content":"ios_base::unsetf"},{"content":"Parameters","pos":[27709,27719]},{"content":"The flags that you want off.","pos":[27737,27765]},{"content":"Remarks","pos":[27774,27781]},{"content":"Example","pos":[27907,27914]},{"pos":[28030,28045],"content":"ios_base::width"},{"content":"Parameters","pos":[28195,28205]},{"content":"The desired size of the output stream.","pos":[28223,28261]},{"content":"Return Value","pos":[28270,28282]},{"content":"Remarks","pos":[28324,28331]},{"content":"Example","pos":[28504,28511]},{"pos":[28809,28825],"content":"ios_base::xalloc"},{"content":"Return Value","pos":[28931,28943]},{"content":"Remarks","pos":[29050,29057]},{"content":"Example","pos":[29218,29225]},{"content":"See Also","pos":[29767,29775]},{"content":"Thread Safety in the C++ Standard Library","pos":[29780,29821]},{"content":"iostream Programming","pos":[29894,29914]},{"content":"iostreams Conventions","pos":[29966,29987]}],"content":"---\ntitle: \"ios_base Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ios_base\"\n  - \"std.ios_base\"\n  - \"std::ios_base\"\n  - \"xiosbase/std::ios_base\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ios_base class\"\nms.assetid: 0f9e0abc-f70f-49bc-aa1f-003859f56cfe\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ios_base Class\nThe class describes the storage and member functions common to both input and output streams that do not depend on the template parameters. (The template class [basic_ios](../standard-library/basic-ios-class.md) describes what is common and is dependent on template parameters.)  \n  \n An object of class ios_base stores formatting information, which consists of:  \n  \n-   Format flags in an object of type [fmtflags](#ios_base__fmtflags).  \n  \n-   An exception mask in an object of type [iostate](#ios_base__iostate).  \n  \n-   A field width in an object of type `int`*.*  \n  \n-   A display precision in an object of type `int`.  \n  \n-   A locale object in an object of type **locale**.  \n  \n-   Two extensible arrays, with elements of type **long** and `void` pointer.  \n  \n An object of class ios_base also stores stream state information, in an object of type [iostate](#ios_base__iostate), and a callback stack.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[ios_base](#ios_base__ios_base)|Constructs `ios_base` objects.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[event_callback](#ios_base__event_callback)|Describes a function passed to [register_call](#ios_base__register_callback).|  \n|[fmtflags](#ios_base__fmtflags)|Constants to specify the appearance of output.|  \n|[iostate](#ios_base__iostate)|Defines constants describing the state of a stream.|  \n|[openmode](#ios_base__openmode)|Describes how to interact with a stream.|  \n|[seekdir](#ios_base__seekdir)|Specifies starting point for offset operations.|  \n  \n### Enums  \n  \n|||  \n|-|-|  \n|[event](#ios_base__event)|Specifies event types.|  \n  \n### Constants  \n  \n|||  \n|-|-|  \n|[adjustfield](#ios_base__fmtflags)|A bitmask defined as `internal` &#124; `left` &#124; `right`.|  \n|[app](#ios_base__openmode)|Specifies seeking to the end of a stream before each insertion.|  \n|[ate](#ios_base__openmode)|Specifies seeking to the end of a stream when its controlling object is first created.|  \n|[badbit](#ios_base__iostate)|Records a loss of integrity of the stream buffer.|  \n|[basefield](#ios_base__fmtflags)|A bitmask defined as `dec` &#124; `hex` &#124; `oct`.|  \n|[beg](#ios_base__seekdir)|Specifies seeking relative to the beginning of a sequence.|  \n|[binary](#ios_base__openmode)|Specifies that a file should be read as a binary stream, rather than as a text stream.|  \n|[boolalpha](#ios_base__fmtflags)|Specifies insertion or extraction of objects of type `bool` as names (such as `true` and `false`) rather than as numeric values.|  \n|[cur](#ios_base__seekdir)|Specifies seeking relative to the current position within a sequence.|  \n|[dec](#ios_base__fmtflags)|Specifies insertion or extraction of integer values in decimal format.|  \n|[end](#ios_base__seekdir)|Specifies seeking relative to the end of a sequence.|  \n|[eofbit](#ios_base__iostate)|Records end-of-file while extracting from a stream.|  \n|[failbit](#ios_base__iostate)|Records a failure to extract a valid field from a stream.|  \n|[fixed](#ios_base__fmtflags)|Specifies insertion of floating-point values in fixed-point format (with no exponent field).|  \n|[floatfield](#ios_base__fmtflags)|A bitmask defined as `fixed` &#124; `scientific`|  \n|[goodbit](#ios_base__iostate)|All state bits clear.|  \n|[hex](#ios_base__fmtflags)|Specifies insertion or extraction of integer values in hexadecimal format.|  \n|[in](#ios_base__openmode)|Specifies extraction from a stream.|  \n|[internal](#ios_base__fmtflags)|Pads to a field width by inserting fill characters at a point internal to a generated numeric field.|  \n|[left](#ios_base__fmtflags)|Specifies left justification.|  \n|[oct](#ios_base__fmtflags)|Specifies insertion or extraction of integer values in octal format.|  \n|[out](#ios_base__openmode)|Specifies insertion to a stream.|  \n|[right](#ios_base__fmtflags)|Specifies right justification.|  \n|[scientific](#ios_base__fmtflags)|Specifies insertion of floating-point values in scientific format (with an exponent field).|  \n|[showbase](#ios_base__fmtflags)|Specifies insertion of a prefix that reveals the base of a generated integer field.|  \n|[showpoint](#ios_base__fmtflags)|Specifies unconditional insertion of a decimal point in a generated floating-point field.|  \n|[showpos](#ios_base__fmtflags)|Specifies insertion of a plus sign in a nonnegative generated numeric field.|  \n|[skipws](#ios_base__fmtflags)|Specifies skipping leading white space before certain extractions.|  \n|[trunc](#ios_base__openmode)|Specifies deleting contents of an existing file when its controlling object is created.|  \n|[unitbuf](#ios_base__fmtflags)|Causes output to be flushed after each insertion.|  \n|[uppercase](#ios_base__fmtflags)|Specifies insertion of uppercase equivalents of lowercase letters in certain insertions.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[failure](#ios_base__failure)|The member class serves as the base class for all exceptions thrown by the member function [clear](../standard-library/basic-ios-class.md#basic_ios__clear) in template class [basic_ios](../standard-library/basic-ios-class.md).|  \n|[flags](#ios_base__flags)|Sets or returns the current flag settings.|  \n|[getloc](#ios_base__getloc)|Returns the stored locale object.|  \n|[imbue](#ios_base__imbue)|Changes the locale.|  \n|[Init](#ios_base__init)|Creates the standard iostream objects when constructed.|  \n|[iword](#ios_base__iword)|Assigns a value to be stored as an `iword`.|  \n|[precision](#ios_base__precision)|Specifies the number of digits to display in a floating-point number.|  \n|[pword](#ios_base__pword)|Assigns a value to be stored as a `pword`.|  \n|[register_callback](#ios_base__register_callback)|Specifies a callback function.|  \n|[setf](#ios_base__setf)|Sets the specified flags.|  \n|[sync_with_stdio](#ios_base__sync_with_stdio)|Ensures that iostream and C run-time library operations occur in the order that they appear in source code.|  \n|[unsetf](#ios_base__unsetf)|Causes the specified flags to be off.|  \n|[width](#ios_base__width)|Sets the length of the output stream.|  \n|[xalloc](#ios_base__xalloc)|Specifies that a variable shall be part of the stream.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator=](#ios_base__operator_eq)|The assignment operator for `ios_base` objects.|  \n  \n## Requirements  \n **Header:** \\<ios>  \n  \n **Namespace:** std  \n  \n##  <a name=\"ios_base__event\"></a>  ios_base::event  \n Specifies event types.  \n  \n```  \nenum event {erase_event,\n    imbue_event,\n    copyfmt_event};  \n```  \n  \n### Remarks  \n The type is an enumerated type that describes an object that can store the callback event used as an argument to a function registered with [register_callback](#ios_base__register_callback). The distinct event values are:  \n  \n- **copyfmt_event**, to identify a callback that occurs near the end of a call to [copyfmt](../standard-library/basic-ios-class.md#basic_ios__copyfmt), just before the [exception mask](../standard-library/ios-base-class.md) is copied.  \n  \n- **erase_event**, to identify a callback that occurs at the beginning of a call to [copyfmt](../standard-library/basic-ios-class.md#basic_ios__copyfmt), or at the beginning of a call to the destructor for **\\*this**.  \n  \n- **imbue_event**, to identify a callback that occurs at the end of a call to [imbue](#ios_base__imbue), just before the function returns.  \n  \n### Example  \n  See [register_callback](#ios_base__register_callback) for an example.  \n  \n##  <a name=\"ios_base__event_callback\"></a>  ios_base::event_callback  \n Describes a function passed to [register_call](#ios_base__register_callback).  \n  \n```  \n \ntypedef void (\n__  \ncdecl *event  \n_  \ncallback)(\n    event \n_E  ,  \n    ios \n_  \nbase& \n_Base  ,  \n    int _I);\n```  \n  \n### Parameters  \n *_E*  \n The [event](#ios_base__event).  \n  \n `_Base`  \n The stream in which the event was called.  \n  \n *_I*  \n A user-defined number.  \n  \n### Remarks  \n The type describes a pointer to a function that can be registered with [register_callback](#ios_base__register_callback). This type of function must not throw an exception.  \n  \n### Example  \n  See [register_call](#ios_base__register_callback) for an example that uses `event_callback`.  \n  \n##  <a name=\"ios_base__failure\"></a>  ios_base::failure  \n The class `failure` defines the base class for the types of all objects thrown as exceptions, by functions in the `iostreams` library, to report errors detected during stream buffer operations.  \n  \n```  \n \nnamespace std {  \nclass failure : public system_error {  \npublic:  \nexplicit failure(\nconst string& _Message,  \nconst error_code& _Code = io_errc::stream);\n\nexplicit failure(\nconst char* str,  \nconst error_code& _Code = io_errc::stream);\n\n};  \n```  \n  \n### Remarks  \n The value returned by `what``()` is a copy of `_Message`, possibly augmented with a test based on `_Code`. If `_Code` is not specified, the default value is `make_error_code``(io_errc::stream)`.  \n  \n### Example  \n  \n```cpp  \n  \n// ios_base_failure.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nint main ( )  \n{  \nusing namespace std;  \nfstream file;  \nfile.exceptions(ios::failbit);  \ntry  \n{  \nfile.open( \"rm.txt\", ios_base::in );  \n// Opens nonexistent file for reading  \n}  \ncatch( ios_base::failure f )  \n{  \ncout << \"Caught an exception: \" << f.what() << endl;  \n}  \n}  \n  \n```  \n  \n```Output  \nCaught an exception: ios_base::failbit set  \n```  \n  \n##  <a name=\"ios_base__flags\"></a>  ios_base::flags  \n Sets or returns the current flag settings.  \n  \n```  \n \nfmtflags flags() const;\n\n \nfmtflags flags(fmtflags fmtfl);\n```  \n  \n### Parameters  \n `fmtfl`  \n The new `fmtflags` setting.  \n  \n### Return Value  \n The previous or current `fmtflags` setting.  \n  \n### Remarks  \n See [ios_base::fmtflags](#ios_base__fmtflags) for a list of the flags.  \n  \n The first member function returns the stored format flags. The second member function stores `fmtfl` in the format flags and returns its previous stored value.  \n  \n### Example  \n  \n```cpp  \n  \n// ios_base_flags.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nint main ( )  \n{  \nusing namespace std;  \ncout << cout.flags( ) << endl;  \ncout.flags( ios::dec | ios::boolalpha );  \ncout << cout.flags( );  \n}  \n  \n```  \n  \n```Output  \n  \n513  \n16896  \n  \n```  \n  \n##  <a name=\"ios_base__fmtflags\"></a>  ios_base::fmtflags  \n Constants to specify the appearance of output.  \n  \nclass ios_base {  \n   public:  \n   typedef implementation-defined-bitmask-type fmtflags;  \n   static const fmtflags boolalpha;  \n   static const fmtflags dec;  \n   static const fmtflags fixed;  \n   static const fmtflags hex;  \n   static const fmtflags internal;  \n   static const fmtflags left;  \n   static const fmtflags oct;  \n   static const fmtflags right;  \n   static const fmtflags scientific;  \n   static const fmtflags showbase;  \n   static const fmtflags showpoint;  \n   static const fmtflags showpos;  \n   static const fmtflags skipws;  \n   static const fmtflags unitbuf;  \n   static const fmtflags uppercase;  \n   static const fmtflags adjustfield;  \n   static const fmtflags basefield;  \n   static const fmtflags floatfield;  \n   ...  \n   };  \n  \n### Remarks  \n Supports the manipulators in [ios](../standard-library/ios.md).  \n  \n The type is a bitmask type that describes an object that can store format flags. The distinct flag values (elements) are:  \n  \n- `dec`, to insert or extract integer values in decimal format.  \n  \n- `hex`, to insert or extract integer values in hexadecimal format.  \n  \n- `oct`, to insert or extract integer values in octal format.  \n  \n- `showbase`, to insert a prefix that reveals the base of a generated integer field.  \n  \n- `internal`, to pad to a field width as needed by inserting fill characters at a point internal to a generated numeric field. (For information on setting the field width, see [setw](../standard-library/iomanip-functions.md#setw)).  \n  \n- `left`, to pad to a field width as needed by inserting fill characters at the end of a generated field (left justification).  \n  \n- `right`, to pad to a field width as needed by inserting fill characters at the beginning of a generated field (right justification).  \n  \n- `boolalpha`, to insert or extract objects of type `bool` as names (such as `true` and `false`) rather than as numeric values.  \n  \n- `fixed`, to insert floating-point values in fixed-point format (with no exponent field).  \n  \n- `scientific`, to insert floating-point values in scientific format (with an exponent field).  \n  \n- `showpoint`, to insert a decimal point unconditionally in a generated floating-point field.  \n  \n- `showpos`, to insert a plus sign in a nonnegative generated numeric field.  \n  \n- `skipws`, to skip leading white space before certain extractions.  \n  \n- `unitbuf`, to flush output after each insertion.  \n  \n- `uppercase`, to insert uppercase equivalents of lowercase letters in certain insertions.  \n  \n In addition, several useful values are:  \n  \n- `adjustfield`, a bitmask defined as `internal` &#124; `left` &#124; `right`  \n  \n- `basefield`, defined as `dec` &#124; `hex` &#124; `oct`  \n  \n- `floatfield`, defined as `fixed` &#124; `scientific`  \n  \n For examples of functions that modify these format flags, see [\\<iomanip>](../standard-library/iomanip.md).  \n  \n##  <a name=\"ios_base__getloc\"></a>  ios_base::getloc  \n Returns the stored locale object.  \n  \n```  \n \nlocale getloc() const;\n```  \n  \n### Return Value  \n The stored locale object.  \n  \n### Example  \n  \n```cpp  \n  \n// ios_base_getlock.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )  \n{  \nusing namespace std;  \ncout << cout.getloc( ).name( ).c_str( ) << endl;  \n}  \n  \n```  \n  \n```Output  \nC  \n```  \n  \n##  <a name=\"ios_base__imbue\"></a>  ios_base::imbue  \n Changes the locale.  \n  \n```  \n \nlocale imbue(const locale& _Loc);\n```  \n  \n### Parameters  \n `_Loc`  \n The new locale setting.  \n  \n### Return Value  \n The previous locale.  \n  \n### Remarks  \n The member function stores `_Loc` in the locale object and then reports the callback event and `imbue_event`. It returns the previous stored value.  \n  \n### Example  \n  See [basic_ios::imbue](../standard-library/basic-ios-class.md#basic_ios__imbue) for a sample.  \n  \n##  <a name=\"ios_base__init\"></a>  ios_base::Init  \n Creates the standard iostream objects when constructed.  \n  \nclass Init { };  \n  \n### Remarks  \n The nested class describes an object whose construction ensures that the standard iostreams objects are properly constructed, even before the execution of a constructor for an arbitrary static object.  \n  \n##  <a name=\"ios_base__ios_base\"></a>  ios_base::ios_base  \n Constructs ios_base objects.  \n  \n```  \n \nios  \n_  \nbase();\n```  \n  \n### Remarks  \n The (protected) constructor does nothing. A later call to **basic_ios::**[init](../standard-library/basic-ios-class.md#basic_ios__init) must initialize the object before it can be safely destroyed. Thus, the only safe use for class ios_base is as a base class for template class [basic_ios](../standard-library/basic-ios-class.md).  \n  \n##  <a name=\"ios_base__iostate\"></a>  ios_base::iostate  \n The type of constants that describe the state of a stream.  \n  \nclass ios_base {  \n   public:  \n   typedef implementation-defined-bitmask-type iostate;  \n   static const iostate badbit;  \n   static const iostate eofbit;  \n   static const iostate failbit;  \n   static const iostate goodbit;  \n   ...  \n   };  \n  \n### Remarks  \n The type is a bitmask type that describes an object that can store stream state information. The distinct flag values (elements) are:  \n  \n- `badbit`, to record a loss of integrity of the stream buffer.  \n  \n- `eofbit`, to record end-of-file while extracting from a stream.  \n  \n- `failbit`, to record a failure to extract a valid field from a stream.  \n  \n In addition, a useful value is `goodbit`, where none of the previously mentioned bits are set ( `goodbit` is guaranteed to be zero).  \n  \n##  <a name=\"ios_base__iword\"></a>  ios_base::iword  \n Assigns a value to be stored as an `iword`.  \n  \n```  \n \nlong& iword(int idx);\n```  \n  \n### Parameters  \n `idx`  \n The index of the value to store as an `iword`.  \n  \n### Remarks  \n The member function returns a reference to element `idx` of the extensible array with elements of type **long**. All elements are effectively present and initially store the value zero. The returned reference is invalid after the next call to `iword` for the object, after the object is altered by a call to **basic_ios::**[copyfmt](../standard-library/basic-ios-class.md#basic_ios__copyfmt), or after the object is destroyed.  \n  \n If `idx` is negative or if unique storage is unavailable for the element, the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)**(badbit)** and returns a reference that might not be unique.  \n  \n To obtain a unique index, for use across all objects of type `ios_base`, call [xalloc](#ios_base__xalloc).  \n  \n### Example  \n  See [xalloc](#ios_base__xalloc) for a sample of how to use `iword`.  \n  \n##  <a name=\"ios_base__openmode\"></a>  ios_base::openmode  \n Describes how to interact with a stream.  \n  \nclass ios_base {  \n   public:  \n   typedef implementation-defined-bitmask-type iostate;  \n   static const iostate badbit;  \n   static const iostate eofbit;  \n   static const iostate failbit;  \n   static const iostate goodbit;  \n   ...  \n   };  \n  \n### Remarks  \n The type is a `bitmask type` that describes an object that can store the opening mode for several iostreams objects. The distinct flag values (elements) are:  \n  \n- **app**, to seek to the end of a stream before each insertion.  \n  \n- **ate**, to seek to the end of a stream when its controlling object is first created.  \n  \n- **binary**, to read a file as a binary stream, rather than as a text stream.  \n  \n- **in**, to permit extraction from a stream.  \n  \n- **out**, to permit insertion to a stream.  \n  \n- **trunc**, to delete contents of an existing file when its controlling object is created.  \n  \n### Example  \n  \n```cpp  \n  \n// ios_base_openmode.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nint main ( )  \n{  \nusing namespace std;  \nfstream file;  \nfile.open( \"rm.txt\", ios_base::out | ios_base::trunc );  \n  \nfile << \"testing\";  \n}  \n  \n```  \n  \n##  <a name=\"ios_base__operator_eq\"></a>  ios_base::operator=  \n The assignment operator for ios_base objects.  \n  \n```  \n \nios  \n_  \nbase& operator=(const ios  \n_  \nbase& \n    right);\n```  \n  \n### Parameters  \n ` right`  \n An object of type `ios_base`.  \n  \n### Return Value  \n The object being assigned to.  \n  \n### Remarks  \n The operator copies the stored formatting information, making a new copy of any extensible arrays. It then returns **\\*this**. Note that the callback stack is not copied.  \n  \n This operator is only used by classes derived from `ios_base`.  \n  \n##  <a name=\"ios_base__precision\"></a>  ios_base::precision  \n Specifies the number of digits to display in a floating-point number.  \n  \n```  \n \nstreamsize precision() const;\n\n \nstreamsize precision(streamsize _Prec);\n```  \n  \n### Parameters  \n `_Prec`  \n The number of significant digits to display, or the number of digits after the decimal point in fixed notation.  \n  \n### Return Value  \n The first member function returns the stored [display precision](../standard-library/ios-base-class.md). The second member function stores `_Prec` in the display precision and returns its previous stored value.  \n  \n### Remarks  \n Floating-point numbers are displayed in fixed notation with [fixed](../standard-library/ios-functions.md#fixed).  \n  \n### Example  \n  \n```cpp  \n  \n// ios_base_precision.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )  \n{  \nusing namespace std;  \nfloat i = 31.31234F;  \n  \ncout.precision( 3 );  \ncout << i << endl;          // display three significant digits  \ncout << fixed << i << endl; // display three digits after decimal  \n// point  \n}  \n  \n```  \n  \n```Output  \n  \n31.3  \n31.312  \n  \n```  \n  \n##  <a name=\"ios_base__pword\"></a>  ios_base::pword  \n Assigns a value to be stored as a `pword`.  \n  \n```  \n \nvoid *& pword(int _Idx);\n```  \n  \n### Parameters  \n `_Idx`  \n The index of the value to store as a `pword`.  \n  \n### Remarks  \n The member function returns a reference to element _ *Idx* of the extensible array with elements of type `void` pointer. All elements are effectively present and initially store the null pointer. The returned reference is invalid after the next call to `pword` for the object, after the object is altered by a call to **basic_ios::**[copyfmt](../standard-library/basic-ios-class.md#basic_ios__copyfmt), or after the object is destroyed.  \n  \n If _ *Idx* is negative, or if unique storage is unavailable for the element, the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)**(badbit)** and returns a reference that might not be unique.  \n  \n To obtain a unique index, for use across all objects of type `ios_base`, call [xalloc](#ios_base__xalloc).  \n  \n### Example  \n  See [xalloc](#ios_base__xalloc) for an example of using `pword`.  \n  \n##  <a name=\"ios_base__register_callback\"></a>  ios_base::register_callback  \n Specifies a callback function.  \n  \n```  \n \nvoid register  \n_  \ncallback(\n    event \n_  \ncallback   \npfn  ,  \n    int idx);\n```  \n  \n### Parameters  \n `pfn`  \n Pointer to the callback function.  \n  \n `idx`  \n A user-defined number.  \n  \n### Remarks  \n The member function pushes the pair `{``pfn`, `idx``}` onto the stored callback stack [callback stack](../standard-library/ios-base-class.md). When a callback event **ev** is reported, the functions are called, in reverse order of registry, by the expression ( **\\***`pfn`)( **ev**, ``**\\*this**, ```idx`).  \n \n### Example  \n```  \n  \n// ios_base_register_callback.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nusing namespace std;  \n  \nvoid callback1( ios_base::event e, ios_base& stream, int arg )  \n{  \ncout << \"in callback1\" << endl;  \nswitch ( e )  \n{  \ncase ios_base::erase_event:  \ncout << \"an erase event\" << endl;  \nbreak;  \ncase ios_base::imbue_event:  \ncout << \"an imbue event\" << endl;  \nbreak;  \ncase ios_base::copyfmt_event:  \ncout << \"an copyfmt event\" << endl;  \nbreak;  \n};  \n}  \n  \nvoid callback2( ios_base::event e, ios_base& stream, int arg )  \n{  \ncout << \"in callback2\" << endl;  \nswitch ( e )  \n{  \ncase ios_base::erase_event:  \ncout << \"an erase event\" << endl;  \nbreak;  \ncase ios_base::imbue_event:  \ncout << \"an imbue event\" << endl;  \nbreak;  \ncase ios_base::copyfmt_event:  \ncout << \"an copyfmt event\" << endl;  \nbreak;  \n};  \n}  \n  \nint main( )  \n{  \n// Make sure the imbue will not throw an exception  \n// assert( setlocale( LC_ALL, \"german\" )!=NULL );  \n  \ncout.register_callback( callback1, 0 );  \ncin.register_callback( callback2, 0 );  \n  \ntry  \n{  \n// If no exception because the locale's not found,  \n// generate an imbue_event on callback1  \ncout.imbue(locale(\"german\"));  \n}  \ncatch(...)  \n{  \ncout << \"exception\" << endl;  \n}  \n  \n// This will  \n// (1) erase_event on callback1  \n// (2) copyfmt_event on callback2  \ncout.copyfmt(cin);  \n  \n// We get two erase events from callback2 at the end because  \n// both cin and cout have callback2 registered when cin and cout  \n// are destroyed at the end of program.  \n}  \n  \n```  \n```Output  \n  \nin callback1  \nan imbue event  \nin callback1  \nan erase event  \nin callback2  \nan copyfmt event  \nin callback2  \nan erase event  \nin callback2  \nan erase event  \n  \n```  \n \n##  <a name=\"ios_base__seekdir\"></a> ios_base::seekdir  \n    Specifies starting point for offset operations.  \n```  \n  \nnamespace std {  \nclass ios_base {  \npublic:  \ntypedef implementation-defined-enumerated-type seekdir;  \nstatic const seekdir beg;  \nstatic const seekdir cur;  \nstatic const seekdir end;  \n...  \n};  \n}  \n  \n```  \n \n### Remarks  \n    The type is an enumerated type that describes an object that can store the seek mode used as an argument to the member functions of several iostream classes. The distinct flag values are:  \n \n- **beg**,\n    to seek (alter the current read or write position) relative to the beginning of a sequence (array,\n    stream,\n    or file).  \n \n- **cur**,\n    to seek relative to the current position within a sequence.  \n \n- **end**,\n    to seek relative to the end of a sequence.  \n \n### Example  \n```  \n  \n// ios_base_seekdir.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nint main ( )  \n{  \nusing namespace std;  \nfstream file;  \nfile.open( \"rm.txt\", ios_base::out | ios_base::trunc );  \n  \nfile << \"testing\";  \nfile.seekp( 0, ios_base::beg );  \nfile << \"a\";  \nfile.seekp( 0, ios_base::end );  \nfile << \"a\";  \n}  \n  \n```  \n \n##  <a name=\"ios_base__setf\"></a> ios_base::setf  \n    Sets the specified flags.  \n```  \n  \nfmtflags setf(  \nfmtflags _Mask  \n);  \nfmtflags setf(  \nfmtflags _Mask,  \nfmtflags _Unset  \n);  \n  \n```  \n \n### Parameters  \n `_Mask`  \n    The flags to turn on.  \n \n *_Unset* \n    The flags to turn off.  \n \n### Return Value  \n    The previous format flags  \n \n### Remarks  \n    The first member function effectively calls [flags](#ios_base__flags)(_ *Mask* &#124; \\_ *Flags*) (set selected bits) and then returns the previous format flags. The second member function effectively calls **flags**(\\_ *Mask* **& fmtfl, flags& ~**`_Mask`) (replace selected bits under a mask) and then returns the previous format flags.  \n \n### Example  \n```  \n  \n// ios_base_setf.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( )  \n{  \nusing namespace std;  \nint i = 10;  \ncout << i << endl;  \n  \ncout.unsetf( ios_base::dec );  \ncout.setf( ios_base::hex );  \ncout << i << endl;  \n  \ncout.setf( ios_base::dec );  \ncout << i << endl;  \ncout.setf( ios_base::hex, ios_base::dec );  \ncout << i << endl;  \n}  \n  \n```  \n \n##  <a name=\"ios_base__sync_with_stdio\"></a> ios_base::sync_with_stdio  \n    Ensures that iostream and C run-time library operations occur in the order that they appear in source code.  \n```  \n  \nstatic bool sync  \n_  \nwith  \n_  \nstdio(  \n   bool   \n_Sync  \n=true  \n);  \n  \n```  \n \n### Parameters  \n `_Sync`  \n    Whether all streams are in sync with **stdio**.  \n \n### Return Value  \n    Previous setting for this function.  \n \n### Remarks  \n    The static member function stores a **stdio** sync flag, which is initially **true**. When **true**, this flag ensures that operations on the same file are properly synchronized between the [iostreams](../standard-library/iostreams-conventions.md) functions and those defined in the Standard C++ Library. Otherwise, synchronization may or may not be guaranteed, but performance may be improved. The function stores `_Sync` in the **stdio** sync flag and returns its previous stored value. You can call it reliably only before performing any operations on the standard streams.  \n \n##  <a name=\"ios_base__unsetf\"></a> ios_base::unsetf  \n    Causes the specified flags to be off.  \n```  \n  \nvoid unsetf(  \n   fmtflags   \n_Mask  \n);  \n  \n```  \n \n### Parameters  \n `_Mask`  \n    The flags that you want off.  \n \n### Remarks  \n    The member function effectively calls [flags](#ios_base__flags)(`~`*_Mask* **& flags**) (clear selected bits).  \n \n### Example  \n    See [ios_base::setf](#ios_base__setf) for a sample of using `unsetf`.  \n \n##  <a name=\"ios_base__width\"></a> ios_base::width  \n    Sets the length of the output stream.  \n```  \n  \nstreamsize width( ) const;  \nstreamsize width(  \n   streamsize   \n_Wide  \n);  \n  \n```  \n \n### Parameters  \n `_Wide`  \n    The desired size of the output stream.  \n \n### Return Value  \n    The current width setting.  \n \n### Remarks  \n    The first member function returns the stored field width. The second member function stores `_Wide` in the field width and returns its previous stored value.  \n \n### Example  \n```  \n  \n// ios_base_width.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint main( ) {  \nusing namespace std;  \n  \ncout.width( 20 );  \ncout << cout.width( ) << endl;  \ncout << cout.width( ) << endl;  \n}  \n  \n```  \n```Output  \n  \n20  \n0  \n  \n```  \n \n##  <a name=\"ios_base__xalloc\"></a> ios_base::xalloc  \n    Specifies that a variable is part of the stream.  \n```  \n  \nstatic int xalloc( );  \n  \n```  \n \n### Return Value  \n    The static member function returns a stored static value, which it increments on each call.  \n \n### Remarks  \n    You can use the return value as a unique index argument when calling the member functions [iword](#ios_base__iword) or [pword](#ios_base__pword).  \n \n### Example  \n```  \n  \n// ios_base_xalloc.cpp  \n// compile with: /EHsc  \n// Lets you store user-defined information.  \n// iword, jword, xalloc  \n#include <iostream>  \n  \nint main( )  \n{  \nusing namespace std;  \n  \nstatic const int i = ios_base::xalloc();  \nstatic const int j = ios_base::xalloc();  \ncout.iword( i ) = 11;  \ncin.iword( i ) = 13;  \ncin.pword( j ) = \"testing\";  \ncout << cout.iword( i ) << endl;  \ncout << cin.iword( i ) << endl;  \ncout << ( char * )cin.pword( j ) << endl;  \n}  \n  \n```  \n```Output  \n  \n11  \n13  \ntesting  \n  \n```  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [iostream Programming](../standard-library/iostream-programming.md)   \n [iostreams Conventions](../standard-library/iostreams-conventions.md)\n\n\n\n\n"}