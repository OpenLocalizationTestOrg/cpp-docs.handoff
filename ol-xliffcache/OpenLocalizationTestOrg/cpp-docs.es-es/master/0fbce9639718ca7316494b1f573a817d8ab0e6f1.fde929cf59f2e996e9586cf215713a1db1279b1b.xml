{"nodes":[{"pos":[12,50],"content":"expm1, expm1f, expm1l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"expm1, expm1f, expm1l | Microsoft Docs","pos":[0,38]}]},{"content":"expm1, expm1f, expm1l","pos":[999,1020]},{"content":"Computes the base-e exponential of a value, minus one.","pos":[1021,1075]},{"content":"Syntax","pos":[1084,1090]},{"content":"Parameters","pos":[1337,1347]},{"content":"The floating-point exponential value.","pos":[1358,1395]},{"content":"Return Value","pos":[1404,1416]},{"content":"The <ph id=\"ph1\">`expm1`</ph> functions return a floating-point value that represents e<ph id=\"ph2\">&lt;sup&gt;</ph>x<ph id=\"ph3\">&lt;/sup&gt;</ph> – 1, if successful.","pos":[1420,1521],"source":"The `expm1` functions return a floating-point value that represents e<sup>x</sup> – 1, if successful."},{"content":"On overflow, <ph id=\"ph1\">`expm1`</ph> returns <ph id=\"ph2\">`HUGE_VAL`</ph>, <ph id=\"ph3\">`expm1f`</ph> returns <ph id=\"ph4\">`HUGE_VALF`</ph>, <ph id=\"ph5\">`expm1l`</ph> returns <ph id=\"ph6\">`HUGE_VALL`</ph>, and <ph id=\"ph7\">`errno`</ph> is set to <ph id=\"ph8\">`ERANGE`</ph>.","pos":[1522,1654],"source":" On overflow, `expm1` returns `HUGE_VAL`, `expm1f` returns `HUGE_VALF`, `expm1l` returns `HUGE_VALL`, and `errno` is set to `ERANGE`."},{"content":"For more information about return codes, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[1655,1816],"source":" For more information about return codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[1825,1832]},{"content":"Because C++ allows overloading, you can call overloads of <ph id=\"ph1\">`expm1`</ph> that take and return <ph id=\"ph2\">`float`</ph> and <ph id=\"ph3\">`long double`</ph> values.","pos":[1836,1956],"source":"Because C++ allows overloading, you can call overloads of `expm1` that take and return `float` and `long double` values."},{"content":"In a C program, <ph id=\"ph1\">`expm1`</ph> always takes and returns a <ph id=\"ph2\">`double`</ph>.","pos":[1957,2017],"source":" In a C program, `expm1` always takes and returns a `double`."},{"content":"Requirements","pos":[2026,2038]},{"content":"Routine","pos":[2045,2052]},{"content":"Required header","pos":[2053,2068]},{"pos":[2120,2131],"content":", <ph id=\"ph1\">`expm1f`</ph>,","source":", `expm1f`, "},{"content":"math.h&gt;","pos":[2143,2150],"source":"math.h>"},{"pos":[2158,2262],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":".NET Framework Equivalent","pos":[2271,2296]},{"content":"Not applicable.","pos":[2300,2315]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[2316,2363],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[2364,2489],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[2498,2506]},{"content":"Floating-Point Support","pos":[2511,2533]},{"content":"exp2, exp2f, exp2l","pos":[2591,2609]},{"content":"pow, powf, powl","pos":[2686,2701]}],"content":"---\ntitle: \"expm1, expm1f, expm1l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"expm1l\"\n  - \"expm1\"\n  - \"expm1f\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"expm1l\"\n  - \"expm1\"\n  - \"expm1f\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"expm1f function\"\n  - \"expm1l function\"\n  - \"expm1 function\"\nms.assetid: 2a4dd2d9-370c-42b0-9067-0625efa272e0\ncaps.latest.revision: 4\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# expm1, expm1f, expm1l\nComputes the base-e exponential of a value, minus one.  \n  \n## Syntax  \n  \n```  \ndouble expm1(   \n   double x   \n);  \nfloat expm1(  \n   float x  \n);  // C++ only  \nlong double expm1(  \n   long double x  \n);  // C++ only  \nfloat expm1f(  \n   float x  \n);  \nlong double expm1l(  \n   long double x  \n);  \n```  \n  \n#### Parameters  \n `x`  \n The floating-point exponential value.  \n  \n## Return Value  \n The `expm1` functions return a floating-point value that represents e<sup>x</sup> – 1, if successful. On overflow, `expm1` returns `HUGE_VAL`, `expm1f` returns `HUGE_VALF`, `expm1l` returns `HUGE_VALL`, and `errno` is set to `ERANGE`. For more information about return codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Because C++ allows overloading, you can call overloads of `expm1` that take and return `float` and `long double` values. In a C program, `expm1` always takes and returns a `double`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`expm1`, `expm1f`, `expm1l`|\\<math.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [exp2, exp2f, exp2l](http://msdn.microsoft.com/en-us/a7974629-be1e-4196-a562-6624a0732003)   \n [pow, powf, powl](../../c-runtime-library/reference/pow-powf-powl.md)"}