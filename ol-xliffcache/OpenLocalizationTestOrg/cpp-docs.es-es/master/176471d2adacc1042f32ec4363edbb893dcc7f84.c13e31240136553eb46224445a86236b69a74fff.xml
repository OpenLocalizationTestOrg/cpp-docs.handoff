{"nodes":[{"pos":[12,57],"content":"collection_adapter (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"collection_adapter (STL-CLR) | Microsoft Docs","pos":[0,45]}]},{"content":"collection_adapter (STL/CLR)","pos":[650,678]},{"content":"Wraps a .NET collection for use as an STL/CLR container.","pos":[679,735]},{"content":"A <ph id=\"ph1\">`collection_adapter`</ph> is a template class that describes a simple STL/CLR container object.","pos":[736,828],"source":" A `collection_adapter` is a template class that describes a simple STL/CLR container object."},{"content":"It wraps a Base Class Library (BCL) interface, and returns an iterator pair that you use to manipulate the controlled sequence.","pos":[829,956]},{"content":"Syntax","pos":[965,971]},{"content":"Parameters","pos":[1947,1957]},{"content":"Coll","pos":[1961,1965]},{"content":"The type of the wrapped collection.","pos":[1969,2004]},{"content":"Specializations","pos":[2013,2028]},{"content":"Specialization","pos":[2035,2049]},{"content":"Description","pos":[2050,2061]},{"content":"IEnumerable","pos":[2109,2120]},{"content":"Sequences through elements.","pos":[2121,2148]},{"content":"ICollection","pos":[2153,2164]},{"content":"Maintains a group of elements.","pos":[2165,2195]},{"content":"IList","pos":[2200,2205]},{"content":"Maintains an ordered group of elements.","pos":[2206,2245]},{"content":"IDictionary","pos":[2250,2261]},{"content":"Maintain a set of {key, value} pairs.","pos":[2262,2299]},{"content":"IEnumerable<ph id=\"ph1\">\\&lt;</ph>Value&gt;","pos":[2304,2323],"source":"IEnumerable\\<Value>"},{"content":"Sequences through typed elements.","pos":[2324,2357]},{"content":"ICollection<ph id=\"ph1\">\\&lt;</ph>Value&gt;","pos":[2362,2381],"source":"ICollection\\<Value>"},{"content":"Maintains a group of typed elements.","pos":[2382,2418]},{"content":"IList<ph id=\"ph1\">\\&lt;</ph>Value&gt;","pos":[2423,2436],"source":"IList\\<Value>"},{"content":"Maintains an ordered group of typed elements.","pos":[2437,2482]},{"content":"IDictionary<ph id=\"ph1\">\\&lt;</ph>Value&gt;","pos":[2487,2506],"source":"IDictionary\\<Value>"},{"content":"Maintains a set of typed {key, value} pairs.","pos":[2507,2551]},{"content":"Members","pos":[2561,2568]},{"content":"Type Definition","pos":[2575,2590]},{"content":"Description","pos":[2591,2602]},{"content":"collection_adapter::difference_type (STL/CLR)","pos":[2652,2697]},{"content":"The type of a signed distance between two elements.","pos":[2756,2807]},{"content":"collection_adapter::iterator (STL/CLR)","pos":[2813,2851]},{"content":"The type of an iterator for the controlled sequence.","pos":[2903,2955]},{"content":"collection_adapter::key_type (STL/CLR)","pos":[2961,2999]},{"content":"The type of a dictionary key.","pos":[3051,3080]},{"content":"collection_adapter::mapped_type (STL/CLR)","pos":[3086,3127]},{"content":"The type of a dictionary value.","pos":[3182,3213]},{"content":"collection_adapter::reference (STL/CLR)","pos":[3219,3258]},{"content":"The type of a reference to an element.","pos":[3311,3349]},{"content":"collection_adapter::size_type (STL/CLR)","pos":[3355,3394]},{"content":"The type of a signed distance between two elements.","pos":[3447,3498]},{"content":"collection_adapter::value_type (STL/CLR)","pos":[3504,3544]},{"content":"The type of an element.","pos":[3598,3621]},{"content":"Member Function","pos":[3629,3644]},{"content":"Description","pos":[3645,3656]},{"content":"collection_adapter::base (STL/CLR)","pos":[3706,3740]},{"content":"Designates the wrapped BCL interface.","pos":[3788,3825]},{"content":"collection_adapter::begin (STL/CLR)","pos":[3831,3866]},{"content":"Designates the beginning of the controlled sequence.","pos":[3915,3967]},{"content":"collection_adapter::collection_adapter (STL/CLR)","pos":[3973,4021]},{"content":"Constructs an adapter object.","pos":[4083,4112]},{"content":"collection_adapter::end (STL/CLR)","pos":[4118,4151]},{"content":"Designates the end of the controlled sequence.","pos":[4198,4244]},{"content":"collection_adapter::size (STL/CLR)","pos":[4250,4284]},{"content":"Counts the number of elements.","pos":[4332,4362]},{"content":"collection_adapter::swap (STL/CLR)","pos":[4368,4402]},{"content":"Swaps the contents of two containers.","pos":[4450,4487]},{"content":"Operator","pos":[4495,4503]},{"content":"Description","pos":[4504,4515]},{"content":"collection_adapter::operator= (STL/CLR)","pos":[4558,4597]},{"content":"Replaces the stored BCL handle.","pos":[4656,4687]},{"content":"Remarks","pos":[4697,4704]},{"content":"You use this template class to manipulate a BCL container as a STL/CLR container.","pos":[4708,4789]},{"content":"The <ph id=\"ph1\">`collection_adapter`</ph> stores a handle to a BCL interface, which in turn controls a sequence of elements.","pos":[4790,4897],"source":" The `collection_adapter` stores a handle to a BCL interface, which in turn controls a sequence of elements."},{"content":"A <ph id=\"ph1\">`collection_adapter`</ph> object <ph id=\"ph2\">`X`</ph> returns a pair of input iterators <ph id=\"ph3\">`X.begin()`</ph> and <ph id=\"ph4\">`X.end()`</ph> that you use to visit the elements, in order.","pos":[4898,5037],"source":" A `collection_adapter` object `X` returns a pair of input iterators `X.begin()` and `X.end()` that you use to visit the elements, in order."},{"content":"Some of the specializations also let you write <ph id=\"ph1\">`X.size()`</ph> to determine the length of the controlled sequence.","pos":[5038,5147],"source":" Some of the specializations also let you write `X.size()` to determine the length of the controlled sequence."},{"content":"Requirements","pos":[5156,5168]},{"pos":[5172,5201],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/adapter&gt;","source":"**Header:** \\<cliext/adapter>"},{"pos":[5208,5229],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[5238,5246]},{"content":"range_adapter (STL/CLR)","pos":[5251,5274]},{"content":"make_collection (STL/CLR)","pos":[5317,5342]}],"content":"---\ntitle: \"collection_adapter (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::collection_adapter\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"collection_adapter class [STL/CLR]\"\nms.assetid: 31964058-1f50-48bf-82c2-b0b3cc8a7887\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# collection_adapter (STL/CLR)\nWraps a .NET collection for use as an STL/CLR container. A `collection_adapter` is a template class that describes a simple STL/CLR container object. It wraps a Base Class Library (BCL) interface, and returns an iterator pair that you use to manipulate the controlled sequence.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Coll>  \n    ref class collection_adapter;  \n  \ntemplate<>  \n    ref class collection_adapter<  \n        System::Collections::ICollection>;  \ntemplate<>  \n    ref class collection_adapter<  \n        System::Collections::IEnumerable>;  \ntemplate<>  \n    ref class collection_adapter<  \n        System::Collections::IList>;  \ntemplate<>  \n    ref class collection_adapter<  \n        System::Collections::IDictionary>;  \ntemplate<typename Value>  \n    ref class collection_adapter<  \n        System::Collections::Generic::ICollection<Value>>;  \ntemplate<typename Value>  \n    ref class collection_adapter<  \n        System::Collections::Generic::IEnumerable<Value>>;  \ntemplate<typename Value>  \n    ref class collection_adapter<  \n        System::Collections::Generic::IList<Value>>;  \ntemplate<typename Key,  \n    typename Value>  \n    ref class collection_adapter<  \n        System::Collections::Generic::IDictionary<Key, Value>>;  \n```  \n  \n#### Parameters  \n Coll  \n The type of the wrapped collection.  \n  \n## Specializations  \n  \n|Specialization|Description|  \n|--------------------|-----------------|  \n|IEnumerable|Sequences through elements.|  \n|ICollection|Maintains a group of elements.|  \n|IList|Maintains an ordered group of elements.|  \n|IDictionary|Maintain a set of {key, value} pairs.|  \n|IEnumerable\\<Value>|Sequences through typed elements.|  \n|ICollection\\<Value>|Maintains a group of typed elements.|  \n|IList\\<Value>|Maintains an ordered group of typed elements.|  \n|IDictionary\\<Value>|Maintains a set of typed {key, value} pairs.|  \n  \n## Members  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|[collection_adapter::difference_type (STL/CLR)](../dotnet/collection-adapter-difference-type-stl-clr.md)|The type of a signed distance between two elements.|  \n|[collection_adapter::iterator (STL/CLR)](../dotnet/collection-adapter-iterator-stl-clr.md)|The type of an iterator for the controlled sequence.|  \n|[collection_adapter::key_type (STL/CLR)](../dotnet/collection-adapter-key-type-stl-clr.md)|The type of a dictionary key.|  \n|[collection_adapter::mapped_type (STL/CLR)](../dotnet/collection-adapter-mapped-type-stl-clr.md)|The type of a dictionary value.|  \n|[collection_adapter::reference (STL/CLR)](../dotnet/collection-adapter-reference-stl-clr.md)|The type of a reference to an element.|  \n|[collection_adapter::size_type (STL/CLR)](../dotnet/collection-adapter-size-type-stl-clr.md)|The type of a signed distance between two elements.|  \n|[collection_adapter::value_type (STL/CLR)](../dotnet/collection-adapter-value-type-stl-clr.md)|The type of an element.|  \n  \n|Member Function|Description|  \n|---------------------|-----------------|  \n|[collection_adapter::base (STL/CLR)](../dotnet/collection-adapter-base-stl-clr.md)|Designates the wrapped BCL interface.|  \n|[collection_adapter::begin (STL/CLR)](../dotnet/collection-adapter-begin-stl-clr.md)|Designates the beginning of the controlled sequence.|  \n|[collection_adapter::collection_adapter (STL/CLR)](../dotnet/collection-adapter-collection-adapter-stl-clr.md)|Constructs an adapter object.|  \n|[collection_adapter::end (STL/CLR)](../dotnet/collection-adapter-end-stl-clr.md)|Designates the end of the controlled sequence.|  \n|[collection_adapter::size (STL/CLR)](../dotnet/collection-adapter-size-stl-clr.md)|Counts the number of elements.|  \n|[collection_adapter::swap (STL/CLR)](../dotnet/collection-adapter-swap-stl-clr.md)|Swaps the contents of two containers.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|[collection_adapter::operator= (STL/CLR)](../dotnet/collection-adapter-operator-assign-stl-clr.md)|Replaces the stored BCL handle.|  \n  \n## Remarks  \n You use this template class to manipulate a BCL container as a STL/CLR container. The `collection_adapter` stores a handle to a BCL interface, which in turn controls a sequence of elements. A `collection_adapter` object `X` returns a pair of input iterators `X.begin()` and `X.end()` that you use to visit the elements, in order. Some of the specializations also let you write `X.size()` to determine the length of the controlled sequence.  \n  \n## Requirements  \n **Header:** \\<cliext/adapter>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [range_adapter (STL/CLR)](../dotnet/range-adapter-stl-clr.md)   \n [make_collection (STL/CLR)](../dotnet/make-collection-stl-clr.md)"}