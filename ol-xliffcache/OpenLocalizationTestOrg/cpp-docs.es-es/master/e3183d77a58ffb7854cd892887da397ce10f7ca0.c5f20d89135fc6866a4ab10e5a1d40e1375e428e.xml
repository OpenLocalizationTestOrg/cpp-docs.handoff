{"nodes":[{"pos":[12,54],"content":"Command Object Interfaces | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Command Object Interfaces | Microsoft Docs","pos":[0,42]}]},{"content":"Command Object Interfaces","pos":[672,697]},{"content":"The command object uses the <ph id=\"ph1\">`IAccessor`</ph> interface to specify parameter bindings.","pos":[698,778],"source":"The command object uses the `IAccessor` interface to specify parameter bindings."},{"content":"The consumer calls <ph id=\"ph1\">`IAccessor::CreateAccessor`</ph>, passing it an array of <ph id=\"ph2\">`DBBINDING`</ph> structures.","pos":[779,873],"source":" The consumer calls `IAccessor::CreateAccessor`, passing it an array of `DBBINDING` structures."},{"content":"contains information about the column bindings (such as type and length).","pos":[886,959]},{"content":"The provider receives the structures and determines how the data should be transferred and whether conversions are necessary.","pos":[960,1085]},{"content":"The <ph id=\"ph1\">`ICommandText`</ph> interface provides a way to specify a text command.","pos":[1092,1162],"source":"The `ICommandText` interface provides a way to specify a text command."},{"content":"The <ph id=\"ph1\">`ICommandProperties`</ph> interface handles all the command properties.","pos":[1163,1233],"source":" The `ICommandProperties` interface handles all the command properties."},{"content":"See Also","pos":[1242,1250]},{"content":"OLE DB Provider Template Architecture","pos":[1255,1292]}],"content":"---\ntitle: \"Command Object Interfaces | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"command object interfaces [C++]\"\n  - \"command objects [OLE DB]\"\n  - \"OLE DB [C++], command object interfaces\"\nms.assetid: dacff5ae-252c-4f20-9ad7-4e602cc48536\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Command Object Interfaces\nThe command object uses the `IAccessor` interface to specify parameter bindings. The consumer calls `IAccessor::CreateAccessor`, passing it an array of `DBBINDING` structures. `DBBINDING` contains information about the column bindings (such as type and length). The provider receives the structures and determines how the data should be transferred and whether conversions are necessary.  \n  \n The `ICommandText` interface provides a way to specify a text command. The `ICommandProperties` interface handles all the command properties.  \n  \n## See Also  \n [OLE DB Provider Template Architecture](../../data/oledb/ole-db-provider-template-architecture.md)"}