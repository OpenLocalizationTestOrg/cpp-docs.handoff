<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd6438c08058c1aad17d841b7c84f7ed081ef76f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\stricmp-wcsicmp-mbsicmp-stricmp-l-wcsicmp-l-mbsicmp-l.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2316b19d3e0ffacdafb0e8b58f4bebb08a0c9fc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a7257ebe1bf1348595cdf2ac56f47a70dfaa012</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_stricmp, _wcsicmp, _mbsicmp, _stricmp_l, _wcsicmp_l, _mbsicmp_l | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_stricmp, _wcsicmp, _mbsicmp, _stricmp_l, _wcsicmp_l, _mbsicmp_l</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Performs a case-insensitive comparison of strings.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_mbsicmp_l`</ph> cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CRT functions not supported with /ZW<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Null-terminated strings to compare.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Locale to use.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The return value indicates the relation of <ph id="ph1">`string1`</ph> to <ph id="ph2">`string2`</ph> as follows.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>&lt; 0</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>less than</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>identical to</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>&gt; 0</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>greater than</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>On an error, <ph id="ph1">`_mbsicmp`</ph> returns <ph id="ph2">`_NLSCMPERROR`</ph>, which is defined in <ph id="ph3">\&lt;</ph>string.h&gt; and <ph id="ph4">\&lt;</ph>mbstring.h&gt;.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_stricmp`</ph> function ordinally compares <ph id="ph2">`string1`</ph> and <ph id="ph3">`string2`</ph> after converting each character to lowercase, and returns a value indicating their relationship.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>differs from <ph id="ph1">`_stricoll`</ph> in that the <ph id="ph2">`_stricmp`</ph> comparison is only affected by <ph id="ph3">`LC_CTYPE`</ph>, which determines which characters are upper and lowercase.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_stricoll`</ph> function compares strings according to both the <ph id="ph2">`LC_CTYPE`</ph> and <ph id="ph3">`LC_COLLATE`</ph> categories of the locale, which includes both the case and the collation order.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`LC_COLLATE`</ph> category, see <bpt id="p1">[</bpt>setlocale<ept id="p1">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept> and <bpt id="p2">[</bpt>Locale Categories<ept id="p2">](../../c-runtime-library/locale-categories.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The versions of these functions without the <ph id="ph1">`_l`</ph> suffix use the current locale for locale-dependent behavior.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The versions with the suffix are identical except that they use the locale passed in instead.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the locale has not been set, the C locale is used.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Locale<ept id="p1">](../../c-runtime-library/locale.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>is equivalent to <ph id="ph1">`_strcmpi`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>They can be used interchangeably but <ph id="ph1">`_stricmp`</ph> is the preferred standard.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_strcmpi`</ph> function is equivalent to <ph id="ph2">`_stricmp`</ph> and is provided for backward compatibility only.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`_stricmp`</ph> does lowercase comparisons, it may result in unexpected behavior.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To illustrate when case conversion by <ph id="ph1">`_stricmp`</ph> affects the outcome of a comparison, assume that you have the two strings JOHNSTON and JOHN_HENRY.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The string JOHN_HENRY will be considered less than JOHNSTON because the "_" has a lower ASCII value than a lowercase S. In fact, any character that has an ASCII value between 91 and 96 will be considered less than any letter.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">[</bpt>strcmp<ept id="p1">](../../c-runtime-library/reference/strcmp-wcscmp-mbscmp.md)</ept> function is used instead of <ph id="ph1">`_stricmp`</ph>, JOHN_HENRY will be greater than JOHNSTON.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_mbsicmp`</ph> are wide-character and multibyte-character versions of <ph id="ph2">`_stricmp`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The arguments and return value of <ph id="ph1">`_wcsicmp`</ph> are wide-character strings; those of <ph id="ph2">`_mbsicmp`</ph> are multibyte-character strings.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>recognizes multibyte-character sequences according to the current multibyte code page and returns <ph id="ph1">`_NLSCMPERROR`</ph> on an error.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Code Pages<ept id="p1">](../../c-runtime-library/code-pages.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>These three functions behave identically otherwise.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`wcscmp`</ph> behave identically except that <ph id="ph2">`wcscmp`</ph> does not convert its arguments to lowercase before comparing them.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_mbscmp`</ph> behave identically except that <ph id="ph2">`_mbscmp`</ph> does not convert its arguments to lowercase before comparing them.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You will need to call <bpt id="p1">[</bpt>setlocale<ept id="p1">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept> for <ph id="ph1">`_wcsicmp`</ph> to work with Latin 1 characters.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The C locale is in effect by default, so, for example, ä will not compare equal to Ä.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`setlocale`</ph> with any locale other than the C locale before the call to <ph id="ph2">`_wcsicmp`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following sample demonstrates how <ph id="ph1">`_wcsicmp`</ph> is sensitive to the locale:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An alternative is to call <bpt id="p1">[</bpt>_create_locale, _wcreate_locale<ept id="p1">](../../c-runtime-library/reference/create-locale-wcreate-locale.md)</ept> and pass the returned locale object as a parameter to <ph id="ph1">`_wcsicmp_l`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>All of these functions validate their parameters.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If either <ph id="ph1">`string1`</ph> or <ph id="ph2">`string2`</ph> are null pointers, the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept> .</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, these functions return <ph id="ph1">`_NLSCMPERROR`</ph> and set <ph id="ph2">`errno`</ph> to <ph id="ph3">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>string.h&gt;</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>string.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>mbstring.h&gt;</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>System::String::Compare</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>String Manipulation</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>memcmp, wmemcmp</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>_memicmp, _memicmp_l</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>strcmp, wcscmp, _mbscmp</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>strcoll Functions</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>strncmp, wcsncmp, _mbsncmp, _mbsncmp_l</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>strrchr, wcsrchr, _mbsrchr, _mbsrchr_l</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>_strset, _strset_l, _wcsset, _wcsset_l, _mbsset, _mbsset_l</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>strspn, wcsspn, _mbsspn, _mbsspn_l</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>