<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">20b5c5b7f47889c14bb3fcc2ce98b568aa88555e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\exporting-from-a-dll-using-declspec-dllexport.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4fc246eac7e5a7d1e2c99cec6ee007cb7c4232ee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d13bff15f4ca6b0094dcca67ff8aab5656425fcd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exporting from a DLL Using __declspec(dllexport) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exporting from a DLL Using __declspec(dllexport)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft introduced <bpt id="p1">**</bpt>__export<ept id="p1">**</ept> in the 16-bit compiler version of Visual C++ to allow the compiler to generate the export names automatically and place them in a .lib file.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This .lib file can then be used just like a static .lib to link with a DLL.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In newer compiler versions, you can export data, functions, classes, or class member functions from a DLL using the <bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept> adds the export directive to the object file so you do not need to use a .def file.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This convenience is most apparent when trying to export decorated C++ function names.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because there is no standard specification for name decoration, the name of an exported function might change between compiler versions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you use <bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept>, recompiling the DLL and dependent .exe files is necessary only to account for any naming convention changes.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Many export directives, such as ordinals, NONAME, and PRIVATE, can be made only in a .def file, and there is no way to specify these attributes without a .def file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, using <bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept> in addition to using a .def file does not cause build errors.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To export functions, the <bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept> keyword must appear to the left of the calling-convention keyword, if a keyword is specified.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To export all of the public data members and member functions in a class, the keyword must appear to the left of the class name as follows:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>cannot be applied to a function with the <ph id="ph1">`__clrcall`</ph> calling convention.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When building your DLL, you typically create a header file that contains the function prototypes and/or classes you are exporting and add <bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept> to the declarations in the header file.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To make your code more readable, define a macro for <bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept> and use the macro with each symbol you are exporting:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept> stores function names in the DLL's export table.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you want to optimize the table's size, see <bpt id="p1">[</bpt>Exporting Functions from a DLL by Ordinal Rather Than by Name<ept id="p1">](../build/exporting-functions-from-a-dll-by-ordinal-rather-than-by-name.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When porting DLL source code from Win16 to Win32, replace each instance of <bpt id="p1">**</bpt>__export<ept id="p1">**</ept> with <bpt id="p2">**</bpt>__declspec(dllexport)<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As a reference, search through the Win32 Winbase.h header file.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It contains examples of <bpt id="p1">**</bpt>__declspec(dllimport)<ept id="p1">**</ept> usage.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>What do you want to do?</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Export from a DLL using .def files</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Export and import using AFX_EXT_CLASS</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Export C++ functions for use in C-language executables</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Export C functions for use in C or C++-language executables</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Determine which exporting method to use</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Import into an application using __declspec(dllimport)</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Initialize a DLL</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>What do you want to know more about?</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The __declspec keyword</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Importing and exporting inline functions</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Mutual imports</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Exporting from a DLL</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>