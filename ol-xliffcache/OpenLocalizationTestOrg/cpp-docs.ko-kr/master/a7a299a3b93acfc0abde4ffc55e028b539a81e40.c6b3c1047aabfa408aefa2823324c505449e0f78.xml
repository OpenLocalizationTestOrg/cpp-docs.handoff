{"nodes":[{"pos":[12,51],"content":"C++ Language Reference | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C++ Language Reference | Microsoft Docs","pos":[0,39]}]},{"content":"C++ Language Reference","pos":[711,733]},{"content":"This reference explains the C++ programming language as implemented in Microsoft Visual C++.","pos":[734,826]},{"content":"The organization is based on <bpt id=\"p1\">*</bpt>The Annotated C++ Reference Manual<ept id=\"p1\">*</ept> by Margaret Ellis and Bjarne Stroustrup and on the ANSI/ISO C++ International Standard (ISO/IEC FDIS 14882).","pos":[827,1001],"source":" The organization is based on *The Annotated C++ Reference Manual* by Margaret Ellis and Bjarne Stroustrup and on the ANSI/ISO C++ International Standard (ISO/IEC FDIS 14882)."},{"content":"Microsoft-specific implementations of C++ language features are included.","pos":[1002,1075]},{"pos":[1079,1193],"content":"For an overview of Modern C++ programming practices, see <bpt id=\"p1\">[</bpt>Welcome Back to C++<ept id=\"p1\">](welcome-back-to-cpp-modern-cpp.md)</ept>.","source":"For an overview of Modern C++ programming practices, see [Welcome Back to C++](welcome-back-to-cpp-modern-cpp.md)."},{"content":"See the following tables to quickly find a keyword or operator:","pos":[1198,1261]},{"content":"C++ Keywords","pos":[1272,1284]},{"content":"C++ Operators","pos":[1320,1333]},{"content":"In This Section","pos":[1406,1421]},{"content":"Lexical Conventions","pos":[1427,1446]},{"content":"Fundamental lexical elements of a C++ program: tokens, comments, operators, keywords, punctuators, literals.","pos":[1482,1590]},{"content":"Also, file translation, operator precedence/associativity.","pos":[1591,1649]},{"content":"Basic Concepts","pos":[1657,1671]},{"content":"Scope, linkage, program startup and termination, storage classes, and types.","pos":[1706,1782]},{"content":"Standard Conversions","pos":[1790,1810]},{"content":"Type conversions between built-in, or \"fundamental,\" types.","pos":[1847,1906]},{"content":"Also, arithmetic conversions and conversions among pointer, reference, and pointer-to-member types.","pos":[1907,2006]},{"content":"Operators, Precedence and Associativity","pos":[2014,2053]},{"content":"The operators in C++.","pos":[2121,2142]},{"content":"Expressions","pos":[2150,2161]},{"content":"Types of expressions, semantics of expressions, reference topics on operators, casting and casting operators, run-time type information.","pos":[2193,2329]},{"content":"Lambda Expressions","pos":[2337,2355]},{"content":"A programming technique that implicitly defines a function object class and constructs a function object of that class type.","pos":[2397,2521]},{"content":"Statements","pos":[2529,2539]},{"content":"Expression, null, compound, selection, iteration, jump, and declaration statements.","pos":[2570,2653]},{"content":"Declarations and Definitions","pos":[2661,2689]},{"content":"Storage-class specifiers, function definitions, initializations, enumerations, class, struct, and union declarations, and typedef declarations.","pos":[2731,2874]},{"content":"Also, inline functions, const keyword, namespaces.","pos":[2875,2925]},{"content":"Declarators","pos":[2933,2944]},{"content":"The portion of a declaration statement that names an object, type, or function.","pos":[3019,3098]},{"content":"Abstract declarators, type names, initializers, function declarations and definitions, arrays, references.","pos":[3099,3205]},{"content":"Classes, Structures, and Unions","pos":[3213,3244]},{"content":"Introduction to classes, structures, and unions.","pos":[3284,3332]},{"content":"Also, member functions, data members, bit fields, this pointer, nested classes.","pos":[3333,3412]},{"content":"Derived Classes","pos":[3420,3435]},{"content":"Single and multiple inheritance, virtual functions, multiple base classes, abstract classes, scope rules.","pos":[3467,3572]},{"content":"Also, the __super and <ph id=\"ph1\">\\_</ph>_interface keywords.","pos":[3573,3617],"source":" Also, the __super and \\__interface keywords."},{"content":"Member-Access Control","pos":[3625,3646]},{"content":"Controlling access to class members: public, private, and protected keywords.","pos":[3688,3765]},{"content":"Friend functions and classes.","pos":[3766,3795]},{"content":"Special Member Functions","pos":[3803,3827]},{"content":"Special functions unique to class types: constructors, destructors, conversion functions, assignment operator, operator new and operator delete functions.","pos":[3873,4027]},{"content":"Overloading","pos":[4035,4046]},{"content":"Overloaded operators, rules for operator overloading.","pos":[4076,4129]},{"content":"Exception Handling","pos":[4137,4155]},{"content":"C++ exception handling, structured exception handling (SEH), keywords used in writing exception handling statements.","pos":[4204,4320]},{"content":"Assertion and User-Supplied Messages","pos":[4328,4364]},{"content":"directive, the <ph id=\"ph1\">`static_assert`</ph> keyword, the <ph id=\"ph2\">`assert`</ph> macro.","pos":[4430,4489],"source":" directive, the `static_assert` keyword, the `assert` macro."},{"content":"Templates","pos":[4497,4506]},{"content":"Template specifications, function templates, class templates, typename keyword, templates vs. macros, templates and smart pointers.","pos":[4536,4667]},{"content":"Event Handling","pos":[4675,4689]},{"content":"Declaring events and event handlers.","pos":[4720,4756]},{"content":"Microsoft-Specific Modifiers","pos":[4764,4792]},{"content":"Modifiers specific to Microsoft C++.","pos":[4837,4873]},{"content":"Memory addressing, calling conventions, naked functions, extended storage-class attributes (__declspec), <ph id=\"ph1\">\\_</ph>_w64.","pos":[4874,4986],"source":" Memory addressing, calling conventions, naked functions, extended storage-class attributes (__declspec), \\__w64."},{"content":"Inline Assembler","pos":[4994,5010]},{"content":"Using assembly language and C++ in __asm blocks.","pos":[5056,5104]},{"content":"Compiler COM Support","pos":[5112,5132]},{"content":"A reference to Microsoft-specific classes and global functions used to support COM types.","pos":[5169,5258]},{"content":"Microsoft Extensions","pos":[5266,5286]},{"content":"Microsoft extensions to C++.","pos":[5323,5351]},{"content":"Nonstandard Behavior","pos":[5359,5379]},{"content":"Information about nonstandard behavior of the Visual C++ compiler.","pos":[5416,5482]},{"pos":[5487,5642],"content":"<bpt id=\"p1\">[</bpt>Welcome Back to C++<ept id=\"p1\">](welcome-back-to-cpp-modern-cpp.md)</ept><ph id=\"ph1\">\n</ph> An overview of modern C++ programming practices for writing safe, correct and efficient programs.","source":"[Welcome Back to C++](welcome-back-to-cpp-modern-cpp.md)\n An overview of modern C++ programming practices for writing safe, correct and efficient programs."},{"content":"Related Sections","pos":[5649,5665]},{"content":"Component Extensions for Runtime Platforms","pos":[5670,5712]},{"content":"Reference material on using Visual C++ to target the common language runtime.","pos":[5775,5852]},{"content":"C/C++ Building Reference","pos":[5860,5884]},{"content":"Compiler options, linker options, and other build tools.","pos":[5937,5993]},{"content":"C/C++ Preprocessor Reference","pos":[6001,6029]},{"content":"Reference material on pragmas, preprocessor directives, predefined macros, and the preprocessor.","pos":[6083,6179]},{"content":"Visual C++ Libraries","pos":[6187,6207]},{"content":"A list of links to the reference start pages for the various Visual C++ libraries.","pos":[6267,6349]},{"content":"See Also","pos":[6358,6366]},{"content":"C Language Reference","pos":[6371,6391]}],"content":"---\ntitle: \"C++ Language Reference | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"index-page \"\nf1_keywords: \n  - \"c++\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"language reference\"\n  - \"C++, language reference\"\n  - \"language reference, Visual C++\"\n  - \"Visual C++, language reference\"\nms.assetid: 4be9cacb-c862-4391-894a-3a118c9c93ce\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C++ Language Reference\nThis reference explains the C++ programming language as implemented in Microsoft Visual C++. The organization is based on *The Annotated C++ Reference Manual* by Margaret Ellis and Bjarne Stroustrup and on the ANSI/ISO C++ International Standard (ISO/IEC FDIS 14882). Microsoft-specific implementations of C++ language features are included.  \n\nFor an overview of Modern C++ programming practices, see [Welcome Back to C++](welcome-back-to-cpp-modern-cpp.md).\n  \n See the following tables to quickly find a keyword or operator:  \n  \n-   [C++ Keywords](../cpp/keywords-cpp.md)  \n  \n-   [C++ Operators](../cpp/cpp-built-in-operators-precedence-and-associativity.md)  \n  \n## In This Section  \n\n [Lexical Conventions](../cpp/lexical-conventions.md)  \n Fundamental lexical elements of a C++ program: tokens, comments, operators, keywords, punctuators, literals. Also, file translation, operator precedence/associativity.  \n  \n [Basic Concepts](../cpp/basic-concepts-cpp.md)  \n Scope, linkage, program startup and termination, storage classes, and types.  \n  \n [Standard Conversions](../cpp/standard-conversions.md)  \n Type conversions between built-in, or \"fundamental,\" types. Also, arithmetic conversions and conversions among pointer, reference, and pointer-to-member types.  \n  \n [Operators, Precedence and Associativity](../cpp/cpp-built-in-operators-precedence-and-associativity.md)  \n The operators in C++.  \n  \n [Expressions](../cpp/expressions-cpp.md)  \n Types of expressions, semantics of expressions, reference topics on operators, casting and casting operators, run-time type information.  \n  \n [Lambda Expressions](../cpp/lambda-expressions-in-cpp.md)  \n A programming technique that implicitly defines a function object class and constructs a function object of that class type.  \n  \n [Statements](../cpp/statements-cpp.md)  \n Expression, null, compound, selection, iteration, jump, and declaration statements.  \n  \n [Declarations and Definitions](declarations-and-definitions-cpp.md)  \n Storage-class specifiers, function definitions, initializations, enumerations, class, struct, and union declarations, and typedef declarations. Also, inline functions, const keyword, namespaces.  \n  \n [Declarators](http://msdn.microsoft.com/en-us/8a7b9b51-92bd-4ac0-b3fe-0c4abe771838)  \n The portion of a declaration statement that names an object, type, or function. Abstract declarators, type names, initializers, function declarations and definitions, arrays, references.  \n  \n [Classes, Structures, and Unions](../cpp/classes-and-structs-cpp.md)  \n Introduction to classes, structures, and unions. Also, member functions, data members, bit fields, this pointer, nested classes.  \n  \n [Derived Classes](../cpp/inheritance-cpp.md)  \n Single and multiple inheritance, virtual functions, multiple base classes, abstract classes, scope rules. Also, the __super and \\__interface keywords.  \n  \n [Member-Access Control](../cpp/member-access-control-cpp.md)  \n Controlling access to class members: public, private, and protected keywords. Friend functions and classes.  \n  \n [Special Member Functions](../misc/special-member-functions-cpp.md)  \n Special functions unique to class types: constructors, destructors, conversion functions, assignment operator, operator new and operator delete functions.  \n  \n [Overloading](operator-overloading.md)  \n Overloaded operators, rules for operator overloading.  \n  \n [Exception Handling](../cpp/exception-handling-in-visual-cpp.md)  \n C++ exception handling, structured exception handling (SEH), keywords used in writing exception handling statements.  \n  \n [Assertion and User-Supplied Messages](../cpp/assertion-and-user-supplied-messages-cpp.md)  \n `#error` directive, the `static_assert` keyword, the `assert` macro.  \n  \n [Templates](../cpp/templates-cpp.md)  \n Template specifications, function templates, class templates, typename keyword, templates vs. macros, templates and smart pointers.  \n  \n [Event Handling](../cpp/event-handling.md)  \n Declaring events and event handlers.  \n  \n [Microsoft-Specific Modifiers](../cpp/microsoft-specific-modifiers.md)  \n Modifiers specific to Microsoft C++. Memory addressing, calling conventions, naked functions, extended storage-class attributes (__declspec), \\__w64.  \n  \n [Inline Assembler](../assembler/inline/inline-assembler.md)  \n Using assembly language and C++ in __asm blocks.  \n  \n [Compiler COM Support](../cpp/compiler-com-support.md)  \n A reference to Microsoft-specific classes and global functions used to support COM types.  \n  \n [Microsoft Extensions](../cpp/microsoft-extensions.md)  \n Microsoft extensions to C++.  \n  \n [Nonstandard Behavior](../cpp/nonstandard-behavior.md)  \n Information about nonstandard behavior of the Visual C++ compiler.  \n\n [Welcome Back to C++](welcome-back-to-cpp-modern-cpp.md)\n An overview of modern C++ programming practices for writing safe, correct and efficient programs.\n  \n## Related Sections  \n [Component Extensions for Runtime Platforms](../windows/component-extensions-for-runtime-platforms.md)  \n Reference material on using Visual C++ to target the common language runtime.  \n  \n [C/C++ Building Reference](../build/reference/c-cpp-building-reference.md)  \n Compiler options, linker options, and other build tools.  \n  \n [C/C++ Preprocessor Reference](../preprocessor/c-cpp-preprocessor-reference.md)  \n Reference material on pragmas, preprocessor directives, predefined macros, and the preprocessor.  \n  \n [Visual C++ Libraries](../standard-library/cpp-standard-library-reference.md)  \n A list of links to the reference start pages for the various Visual C++ libraries.  \n  \n## See Also  \n [C Language Reference](../c-language/c-language-reference.md)"}