{"nodes":[{"pos":[12,68],"content":"Using a Dialog Bar with a Rebar Control | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using a Dialog Bar with a Rebar Control | Microsoft Docs","pos":[0,56]}]},{"content":"Using a Dialog Bar with a Rebar Control","pos":[715,754]},{"content":"As mentioned in <bpt id=\"p1\">[</bpt>Rebar Controls and Bands<ept id=\"p1\">](../mfc/rebar-controls-and-bands.md)</ept>, each band can contain only one child window (or control).","pos":[755,892],"source":"As mentioned in [Rebar Controls and Bands](../mfc/rebar-controls-and-bands.md), each band can contain only one child window (or control)."},{"content":"This might be a limitation if you want to have more than one child window per band.","pos":[893,976]},{"content":"A convenient workaround is to create a dialog bar resource with multiple controls and then add a rebar band (containing the dialog bar) to the rebar control.","pos":[977,1134]},{"content":"Normally, if you wanted the dialog bar band to appear transparent, you would set the <bpt id=\"p1\">**</bpt>WS_EX_TRANSPARENT<ept id=\"p1\">**</ept> extended style for the dialog bar object.","pos":[1141,1289],"source":"Normally, if you wanted the dialog bar band to appear transparent, you would set the **WS_EX_TRANSPARENT** extended style for the dialog bar object."},{"content":"However, because <bpt id=\"p1\">**</bpt>WS_EX_TRANSPARENT<ept id=\"p1\">**</ept> has some issues with properly painting the background of a dialog bar, you will need to do a little extra work to achieve the desired effect.","pos":[1290,1470],"source":" However, because **WS_EX_TRANSPARENT** has some issues with properly painting the background of a dialog bar, you will need to do a little extra work to achieve the desired effect."},{"pos":[1477,1608],"content":"The following procedure details the steps necessary to achieve transparency without using the <bpt id=\"p1\">**</bpt>WS_EX_TRANSPARENT<ept id=\"p1\">**</ept> extended style.","source":"The following procedure details the steps necessary to achieve transparency without using the **WS_EX_TRANSPARENT** extended style."},{"content":"To implement a transparent dialog bar in a rebar band","pos":[1618,1671]},{"pos":[1681,1838],"content":"Using the <bpt id=\"p1\">[</bpt>Add Class dialog box<ept id=\"p1\">](../mfc/reference/adding-an-mfc-class.md)</ept>, add a new class (for example, <ph id=\"ph1\">`CMyDlgBar`</ph>) that implements your dialog bar object.","source":"Using the [Add Class dialog box](../mfc/reference/adding-an-mfc-class.md), add a new class (for example, `CMyDlgBar`) that implements your dialog bar object."},{"pos":[1848,1894],"content":"Add a handler for the <ph id=\"ph1\">`WM_ERASEBKGND`</ph> message.","source":"Add a handler for the `WM_ERASEBKGND` message."},{"content":"In the new handler, modify the existing code to match the following example:","pos":[1904,1980]},{"pos":[2002,2030],"content":"NVC_MFCControlLadenDialog#29"},{"pos":[2112,2152],"content":"Add a handler for the <ph id=\"ph1\">`WM_MOVE`</ph> message.","source":"Add a handler for the `WM_MOVE` message."},{"content":"In the new handler, modify the existing code to match the following example:","pos":[2162,2238]},{"pos":[2260,2288],"content":"NVC_MFCControlLadenDialog#30"},{"pos":[2367,2555],"content":"The new handlers simulate the transparency of the dialog bar by forwarding the <ph id=\"ph1\">`WM_ERASEBKGND`</ph> message to the parent window and forcing a repaint every time the dialog bar object is moved.","source":"The new handlers simulate the transparency of the dialog bar by forwarding the `WM_ERASEBKGND` message to the parent window and forcing a repaint every time the dialog bar object is moved."},{"content":"See Also","pos":[2564,2572]},{"content":"Using CReBarCtrl","pos":[2577,2593]},{"content":"Controls","pos":[2628,2636]}],"content":"---\ntitle: \"Using a Dialog Bar with a Rebar Control | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"WM_EX_TRANSPARENT\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"WS_EX_TRANSPARENT style\"\n  - \"rebar controls, dialog bars\"\n  - \"dialog bars, using with rebar bands\"\nms.assetid: e528cea0-6b81-4bdf-9643-7c03b6176590\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using a Dialog Bar with a Rebar Control\nAs mentioned in [Rebar Controls and Bands](../mfc/rebar-controls-and-bands.md), each band can contain only one child window (or control). This might be a limitation if you want to have more than one child window per band. A convenient workaround is to create a dialog bar resource with multiple controls and then add a rebar band (containing the dialog bar) to the rebar control.  \n  \n Normally, if you wanted the dialog bar band to appear transparent, you would set the **WS_EX_TRANSPARENT** extended style for the dialog bar object. However, because **WS_EX_TRANSPARENT** has some issues with properly painting the background of a dialog bar, you will need to do a little extra work to achieve the desired effect.  \n  \n The following procedure details the steps necessary to achieve transparency without using the **WS_EX_TRANSPARENT** extended style.  \n  \n### To implement a transparent dialog bar in a rebar band  \n  \n1.  Using the [Add Class dialog box](../mfc/reference/adding-an-mfc-class.md), add a new class (for example, `CMyDlgBar`) that implements your dialog bar object.  \n  \n2.  Add a handler for the `WM_ERASEBKGND` message.  \n  \n3.  In the new handler, modify the existing code to match the following example:  \n  \n     [!code-cpp[NVC_MFCControlLadenDialog#29](../mfc/codesnippet/cpp/using-a-dialog-bar-with-a-rebar-control_1.cpp)]  \n  \n4.  Add a handler for the `WM_MOVE` message.  \n  \n5.  In the new handler, modify the existing code to match the following example:  \n  \n     [!code-cpp[NVC_MFCControlLadenDialog#30](../mfc/codesnippet/cpp/using-a-dialog-bar-with-a-rebar-control_2.cpp)]  \n  \n The new handlers simulate the transparency of the dialog bar by forwarding the `WM_ERASEBKGND` message to the parent window and forcing a repaint every time the dialog bar object is moved.  \n  \n## See Also  \n [Using CReBarCtrl](../mfc/using-crebarctrl.md)   \n [Controls](../mfc/controls-mfc.md)\n\n"}