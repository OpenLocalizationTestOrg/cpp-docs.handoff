{"nodes":[{"pos":[12,49],"content":"Compiler Error C3867 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error C3867 | Microsoft Docs","pos":[0,37]}]},{"content":"Compiler Error C3867","pos":[598,618]},{"content":"'func': function call missing argument list; use '&amp;func' to create a pointer to member","pos":[619,705],"source":"'func': function call missing argument list; use '&func' to create a pointer to member"},{"content":"You tried to take the address of a member function without qualifying the member function with its class name and the address-of operator.","pos":[712,850]},{"content":"This error can also be generated as a result of compiler conformance work that was done for Visual C++ 2005: enhanced pointer-to-member conformance.","pos":[857,1005]},{"content":"Code that compiled prior to Visual C++ 2005 will now generate C3867.","pos":[1006,1074]},{"content":"Example","pos":[1083,1090]},{"content":"C3867 can be issued from the compiler with a misleading suggested resolution.","pos":[1094,1171]},{"content":"Whenever possible, use the most derived class.","pos":[1172,1218]},{"content":"The following sample generates C3867 and shows how to fix it.","pos":[1225,1286]},{"content":"Example","pos":[1574,1581]},{"content":"The following sample generates C3867 and shows how to fix it.","pos":[1585,1646]},{"content":"Example","pos":[2025,2032]},{"content":"The following sample generates C3867 and shows how to fix it.","pos":[2036,2097]},{"content":"Example","pos":[2321,2328]},{"content":"The following sample generates C3867.","pos":[2332,2369]},{"content":"Example","pos":[2631,2638]},{"content":"The following sample generates C3867.","pos":[2642,2679]}],"content":"---\ntitle: \"Compiler Error C3867 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C3867\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C3867\"\nms.assetid: bc5de03f-e01a-4407-88c3-2c63f0016a1e\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error C3867\n'func': function call missing argument list; use '&func' to create a pointer to member  \n  \n You tried to take the address of a member function without qualifying the member function with its class name and the address-of operator.  \n  \n This error can also be generated as a result of compiler conformance work that was done for Visual C++ 2005: enhanced pointer-to-member conformance. Code that compiled prior to Visual C++ 2005 will now generate C3867.  \n  \n## Example  \n C3867 can be issued from the compiler with a misleading suggested resolution. Whenever possible, use the most derived class.  \n  \n The following sample generates C3867 and shows how to fix it.  \n  \n```  \n// C3867_1.cpp  \n// compile with: /c  \nstruct Base {   \nprotected:   \n   void Test() {}  \n};  \n  \nclass Derived : public Base {   \n   virtual void Bar();  \n};  \n  \nvoid Derived::Bar() {  \n   void (Base::*p1)() = Test;   // C3867  \n   &Derived::Test;   // OK  \n}  \n```  \n  \n## Example  \n The following sample generates C3867 and shows how to fix it.  \n  \n```  \n// C3867_2.cpp  \n#include<stdio.h>  \n  \nstruct S {  \n   char *func() {  \n      return \"message\";  \n   }  \n};  \n  \nclass X {  \npublic:  \n   void f() {}  \n};  \n  \nint main() {  \n   X::f;   // C3867  \n  \n   // OK  \n   X * myX = new X;  \n   myX->f();  \n  \n   S s;  \n   printf_s(\"test %s\", s.func);   // C3867  \n   printf_s(\"test %s\", s.func());   // OK  \n}  \n```  \n  \n## Example  \n The following sample generates C3867 and shows how to fix it.  \n  \n```  \n// C3867_3.cpp  \nclass X {  \npublic:  \n   void mf(){}  \n};  \n  \nint main() {  \n   void (X::*pmf)() = X::mf;   // C3867  \n  \n   // try the following line instead  \n   void (X::*pmf2)() = &X::mf;  \n}  \n```  \n  \n## Example  \n The following sample generates C3867.  \n  \n```  \n// C3867_4.cpp  \n// compile with: /c  \nclass A {  \npublic:  \n   void f(int) {}  \n  \n   typedef void (A::*TAmtd)(int);  \n  \n   struct B {  \n      TAmtd p;  \n   };  \n  \n   void g() {  \n      B b1;  \n      b1.p = f;   // C3867  \n   }  \n};  \n```  \n  \n## Example  \n The following sample generates C3867.  \n  \n```  \n// C3867_5.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nclass Testpm {  \npublic:  \n   void m_func1() {  \n      std::cout << m_num << \"\\tm_func1\\n\";   \n    }  \n  \n   int m_num;  \n   typedef void (Testpm::*pmfn1)();  \n   void func(Testpm* p);  \n};  \n  \nvoid Testpm::func(Testpm* p) {  \n   pmfn1 s = m_func1;   // C3867  \n   pmfn1 s2 = &Testpm::m_func1;   // OK  \n   (p->*s2)();  \n}  \n  \nint main() {  \n   Testpm *pTestpm = new Testpm;  \n   pTestpm->m_num = 10;  \n  \n   pTestpm->func(pTestpm);  \n}  \n```"}