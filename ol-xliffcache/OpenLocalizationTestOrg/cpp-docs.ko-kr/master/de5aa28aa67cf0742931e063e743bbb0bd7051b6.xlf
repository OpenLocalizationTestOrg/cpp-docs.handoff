<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de5aa28aa67cf0742931e063e743bbb0bd7051b6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\c-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3944840e3f94d4f05c280abf0bc2df5128edcc7c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">731bd15b0492d0b1708be601a88e78fb378157f3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Operators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The C operators are a subset of the <bpt id="p1">[</bpt>C++ built-in operators<ept id="p1">](../cpp/cpp-built-in-operators-precedence-and-associativity.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There are three types of operators.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A unary expression consists of either a unary operator prepended to an operand, or the <ph id="ph1">`sizeof`</ph> keyword followed by an expression.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The expression can be either the name of a variable or a cast expression.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If the expression is a cast expression, it must be enclosed in parentheses.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A binary expression consists of two operands joined by a binary operator.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A ternary expression consists of three operands joined by the conditional-expression operator.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>C includes the following unary operators:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Symbol</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>– ~ !</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Negation and complement operators</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Indirection and address-of operators</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Size operator</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Unary plus operator</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>++ ––</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Unary increment and decrement operators</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Binary operators associate from left to right.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>C provides the following binary operators:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Symbol</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>/ %</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Multiplicative operators</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>+ –</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Additive operators</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Shift operators</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>=   &gt;=   ==   !=</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Relational operators</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>&amp;   &amp;#124; ^</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Bitwise operators</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>&amp;&amp;   &amp;#124;&amp;#124;</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Logical operators</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Sequential-evaluation operator</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The base operator (<bpt id="p1">**</bpt>:&gt;<ept id="p1">**</ept>), supported by previous versions of the Microsoft 16-bit C compiler, is described in <bpt id="p2">[</bpt>C Language Syntax Summary<ept id="p2">](../c-language/c-language-syntax-summary.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The conditional-expression operator has lower precedence than binary expressions and differs from them in being right associative.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Expressions with operators also include assignment expressions, which use unary or binary assignment operators.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The unary assignment operators are the increment (<ph id="ph1">`++`</ph>) and decrement (<bpt id="p1">**</bpt>––<ept id="p1">**</ept>) operators; the binary assignment operators are the simple-assignment operator (<bpt id="p2">**</bpt><ph id="ph2">=</ph><ept id="p2">**</ept>) and the compound-assignment operators.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Each compound-assignment operator is a combination of another binary operator with the simple-assignment operator.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Expressions and Assignments</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>