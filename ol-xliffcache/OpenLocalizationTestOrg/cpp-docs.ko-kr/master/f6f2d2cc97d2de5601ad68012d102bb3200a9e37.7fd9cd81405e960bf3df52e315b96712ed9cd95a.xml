{"nodes":[{"pos":[12,52],"content":"Support for Using wmain | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Support for Using wmain | Microsoft Docs","pos":[0,40]}]},{"content":"Support for Using wmain","pos":[669,692]},{"content":"Visual C++ supports defining a <bpt id=\"p1\">**</bpt>wmain<ept id=\"p1\">**</ept> function and passing wide-character arguments to your Unicode application.","pos":[693,808],"source":"Visual C++ supports defining a **wmain** function and passing wide-character arguments to your Unicode application."},{"content":"You declare formal parameters to <bpt id=\"p1\">**</bpt>wmain<ept id=\"p1\">**</ept>, using a format similar to <bpt id=\"p2\">**</bpt>main<ept id=\"p2\">**</ept>.","pos":[809,888],"source":" You declare formal parameters to **wmain**, using a format similar to **main**."},{"content":"You can then pass wide-character arguments and, optionally, a wide-character environment pointer to the program.","pos":[889,1001]},{"content":"The <ph id=\"ph1\">`argv`</ph> and <ph id=\"ph2\">`envp`</ph> parameters to <bpt id=\"p1\">**</bpt>wmain<ept id=\"p1\">**</ept> are of type <ph id=\"ph3\">`wchar_t*`</ph>.","pos":[1002,1071],"source":" The `argv` and `envp` parameters to **wmain** are of type `wchar_t*`."},{"content":"For example:","pos":[1072,1084]},{"pos":[1163,1412],"content":"[!NOTE]\n MFC Unicode applications use **wWinMain** as the entry point. In this case, `CWinApp::m_lpCmdLine` is a Unicode string. Be sure to set **wWinMainCRTStartup** with the [/ENTRY](../build/reference/entry-entry-point-symbol.md) linker option.","leadings":["","> "],"nodes":[{"content":" MFC Unicode applications use **wWinMain** as the entry point. In this case, `CWinApp::m_lpCmdLine` is a Unicode string. Be sure to set **wWinMainCRTStartup** with the [/ENTRY](../build/reference/entry-entry-point-symbol.md) linker option.","pos":[8,247],"nodes":[{"content":"MFC Unicode applications use <bpt id=\"p1\">**</bpt>wWinMain<ept id=\"p1\">**</ept> as the entry point.","pos":[1,62],"source":" MFC Unicode applications use **wWinMain** as the entry point."},{"content":"In this case, <ph id=\"ph1\">`CWinApp::m_lpCmdLine`</ph> is a Unicode string.","pos":[63,120],"source":" In this case, `CWinApp::m_lpCmdLine` is a Unicode string."},{"content":"Be sure to set <bpt id=\"p1\">**</bpt>wWinMainCRTStartup<ept id=\"p1\">**</ept> with the <bpt id=\"p2\">[</bpt>/ENTRY<ept id=\"p2\">](../build/reference/entry-entry-point-symbol.md)</ept> linker option.","pos":[121,239],"source":" Be sure to set **wWinMainCRTStartup** with the [/ENTRY](../build/reference/entry-entry-point-symbol.md) linker option."}]}]},{"content":"If your program uses a <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> function, the multibyte-character environment is created by the run-time library at program startup.","pos":[1419,1551],"source":"If your program uses a **main** function, the multibyte-character environment is created by the run-time library at program startup."},{"content":"A wide-character copy of the environment is created only when needed (for example, by a call to the <ph id=\"ph1\">`_wgetenv`</ph> or <ph id=\"ph2\">`_wputenv`</ph> functions).","pos":[1552,1688],"source":" A wide-character copy of the environment is created only when needed (for example, by a call to the `_wgetenv` or `_wputenv` functions)."},{"content":"On the first call to <ph id=\"ph1\">`_wputenv`</ph>, or on the first call to <ph id=\"ph2\">`_wgetenv`</ph> if an MBCS environment already exists, a corresponding wide-character string environment is created.","pos":[1689,1857],"source":" On the first call to `_wputenv`, or on the first call to `_wgetenv` if an MBCS environment already exists, a corresponding wide-character string environment is created."},{"content":"The environment is then pointed to by the <ph id=\"ph1\">`_wenviron`</ph> global variable, which is a wide-character version of the <ph id=\"ph2\">`_environ`</ph> global variable.","pos":[1858,1997],"source":" The environment is then pointed to by the `_wenviron` global variable, which is a wide-character version of the `_environ` global variable."},{"content":"At this point, two copies of the environment (MBCS and Unicode) exist simultaneously and are maintained by the run-time system throughout the life of the program.","pos":[1998,2160]},{"content":"Similarly, if your program uses a <bpt id=\"p1\">**</bpt>wmain<ept id=\"p1\">**</ept> function, a wide-character environment is created at program startup and is pointed to by the <ph id=\"ph1\">`_wenviron`</ph> global variable.","pos":[2167,2333],"source":"Similarly, if your program uses a **wmain** function, a wide-character environment is created at program startup and is pointed to by the `_wenviron` global variable."},{"content":"An MBCS (ASCII) environment is created on the first call to <ph id=\"ph1\">`_putenv`</ph> or <ph id=\"ph2\">`getenv`</ph> and is pointed to by the <ph id=\"ph3\">`_environ`</ph> global variable.","pos":[2334,2468],"source":" An MBCS (ASCII) environment is created on the first call to `_putenv` or `getenv` and is pointed to by the `_environ` global variable."},{"content":"See Also","pos":[2477,2485]},{"content":"Support for Unicode","pos":[2490,2509]},{"content":"Unicode Programming Summary","pos":[2548,2575]},{"content":"WinMain Function","pos":[2622,2638]}],"content":"---\ntitle: \"Support for Using wmain | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"wWinMain\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"wide characters [C++], wmain function\"\n  - \"wWinMain function\"\n  - \"wmain function\"\nms.assetid: 41213c41-668c-40a4-8a1e-77d9eded720d\ncaps.latest.revision: 9\nauthor: \"ghogen\"\nms.author: \"ghogen\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Support for Using wmain\nVisual C++ supports defining a **wmain** function and passing wide-character arguments to your Unicode application. You declare formal parameters to **wmain**, using a format similar to **main**. You can then pass wide-character arguments and, optionally, a wide-character environment pointer to the program. The `argv` and `envp` parameters to **wmain** are of type `wchar_t*`. For example:  \n  \n```  \nwmain( int argc, wchar_t *argv[ ], wchar_t *envp[ ] )  \n```  \n  \n> [!NOTE]\n>  MFC Unicode applications use **wWinMain** as the entry point. In this case, `CWinApp::m_lpCmdLine` is a Unicode string. Be sure to set **wWinMainCRTStartup** with the [/ENTRY](../build/reference/entry-entry-point-symbol.md) linker option.  \n  \n If your program uses a **main** function, the multibyte-character environment is created by the run-time library at program startup. A wide-character copy of the environment is created only when needed (for example, by a call to the `_wgetenv` or `_wputenv` functions). On the first call to `_wputenv`, or on the first call to `_wgetenv` if an MBCS environment already exists, a corresponding wide-character string environment is created. The environment is then pointed to by the `_wenviron` global variable, which is a wide-character version of the `_environ` global variable. At this point, two copies of the environment (MBCS and Unicode) exist simultaneously and are maintained by the run-time system throughout the life of the program.  \n  \n Similarly, if your program uses a **wmain** function, a wide-character environment is created at program startup and is pointed to by the `_wenviron` global variable. An MBCS (ASCII) environment is created on the first call to `_putenv` or `getenv` and is pointed to by the `_environ` global variable.  \n  \n## See Also  \n [Support for Unicode](../text/support-for-unicode.md)   \n [Unicode Programming Summary](../text/unicode-programming-summary.md)   \n [WinMain Function](http://msdn.microsoft.com/library/windows/desktop/ms633559)"}