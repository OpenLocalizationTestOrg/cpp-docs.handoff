{"nodes":[{"pos":[12,70],"content":"Casting Integers to Floating-Point Values | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Casting Integers to Floating-Point Values | Microsoft Docs","pos":[0,58]}]},{"content":"Casting Integers to Floating-Point Values","pos":[629,670]},{"pos":[671,828],"content":"<bpt id=\"p1\">**</bpt>ANSI 3.2.1.3<ept id=\"p1\">**</ept> The direction of truncation when an integral number is converted to a floating-point number that cannot exactly represent the original value","source":"**ANSI 3.2.1.3** The direction of truncation when an integral number is converted to a floating-point number that cannot exactly represent the original value"},{"content":"When an integral number is cast to a floating-point value that cannot exactly represent the value, the value is rounded (up or down) to the nearest suitable value.","pos":[835,998]},{"content":"For example, casting an <bpt id=\"p1\">**</bpt>unsigned long<ept id=\"p1\">**</ept> (with 32 bits of precision) to a <bpt id=\"p2\">**</bpt>float<ept id=\"p2\">**</ept> (whose mantissa has 23 bits of precision) rounds the number to the nearest multiple of 256.","pos":[1005,1181],"source":"For example, casting an **unsigned long** (with 32 bits of precision) to a **float** (whose mantissa has 23 bits of precision) rounds the number to the nearest multiple of 256."},{"content":"The <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept> values 4,294,966,913 to 4,294,967,167 are all rounded to the <bpt id=\"p2\">**</bpt>float<ept id=\"p2\">**</ept> value 4,294,967,040.","pos":[1182,1286],"source":" The **long** values 4,294,966,913 to 4,294,967,167 are all rounded to the **float** value 4,294,967,040."},{"content":"See Also","pos":[1295,1303]},{"content":"Floating-Point Math","pos":[1308,1327]}],"content":"---\ntitle: \"Casting Integers to Floating-Point Values | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"integers, casting to floating-point values\"\nms.assetid: 81fd5b7d-15eb-4c11-a8c8-e1621ff54fd3\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Casting Integers to Floating-Point Values\n**ANSI 3.2.1.3** The direction of truncation when an integral number is converted to a floating-point number that cannot exactly represent the original value  \n  \n When an integral number is cast to a floating-point value that cannot exactly represent the value, the value is rounded (up or down) to the nearest suitable value.  \n  \n For example, casting an **unsigned long** (with 32 bits of precision) to a **float** (whose mantissa has 23 bits of precision) rounds the number to the nearest multiple of 256. The **long** values 4,294,966,913 to 4,294,967,167 are all rounded to the **float** value 4,294,967,040.  \n  \n## See Also  \n [Floating-Point Math](../c-language/floating-point-math.md)"}