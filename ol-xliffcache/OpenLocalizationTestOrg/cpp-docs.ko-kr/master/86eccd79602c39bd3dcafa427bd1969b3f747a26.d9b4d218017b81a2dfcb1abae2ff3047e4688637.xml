{"nodes":[{"pos":[12,49],"content":"Based Pointers (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Based Pointers (C++) | Microsoft Docs","pos":[0,37]}]},{"content":"Based Pointers (C++)","pos":[680,700]},{"content":"Microsoft Specific","pos":[703,721]},{"pos":[730,852],"content":"The <ph id=\"ph1\">`__based`</ph> keyword allows you to declare pointers based on pointers (pointers that are offsets from existing pointers).","source":"The `__based` keyword allows you to declare pointers based on pointers (pointers that are offsets from existing pointers)."},{"content":"Syntax","pos":[861,867]},{"content":"Remarks","pos":[929,936]},{"content":"Pointers based on pointer addresses are the only form of the <ph id=\"ph1\">`__based`</ph> keyword valid in 32-bit or 64-bit compilations.","pos":[940,1058],"source":"Pointers based on pointer addresses are the only form of the `__based` keyword valid in 32-bit or 64-bit compilations."},{"content":"For the Microsoft 32-bit C/C++ compiler, a based pointer is a 32-bit offset from a 32-bit pointer base.","pos":[1059,1162]},{"content":"A similar restriction holds for 64-bit environments, where a based pointer is a 64-bit offset from the 64-bit base.","pos":[1163,1278]},{"content":"One use for pointers based on pointers is for persistent identifiers that contain pointers.","pos":[1285,1376]},{"content":"A linked list that consists of pointers based on a pointer can be saved to disk, then reloaded to another place in memory, with the pointers remaining valid.","pos":[1377,1534]},{"content":"For example:","pos":[1535,1547]},{"content":"The pointer <ph id=\"ph1\">`vpBuffer`</ph> is assigned the address of memory allocated at some later point in the program.","pos":[1746,1848],"source":"The pointer `vpBuffer` is assigned the address of memory allocated at some later point in the program."},{"content":"The linked list is relocated relative to the value of <ph id=\"ph1\">`vpBuffer`</ph>.","pos":[1849,1914],"source":" The linked list is relocated relative to the value of `vpBuffer`."},{"pos":[1922,2092],"content":"[!NOTE]\n Persisting identifiers containing pointers can also be accomplished by using [memory-mapped files](http://msdn.microsoft.com/library/windows/desktop/aa366556).","leadings":["","> "],"nodes":[{"content":"Persisting identifiers containing pointers can also be accomplished by using <bpt id=\"p1\">[</bpt>memory-mapped files<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa366556)</ept>.","pos":[9,168],"source":" Persisting identifiers containing pointers can also be accomplished by using [memory-mapped files](http://msdn.microsoft.com/library/windows/desktop/aa366556)."}]},{"content":"When dereferencing a based pointer, the base must be either explicitly specified or implicitly known through the declaration.","pos":[2099,2224]},{"pos":[2231,2311],"content":"For compatibility with previous versions, <bpt id=\"p1\">**</bpt>_based<ept id=\"p1\">**</ept> is a synonym for <ph id=\"ph1\">`__based`</ph>.","source":"For compatibility with previous versions, **_based** is a synonym for `__based`."},{"content":"Example","pos":[2320,2327]},{"content":"The following code demonstrates changing a based pointer by changing its base.","pos":[2331,2409]},{"content":"See Also","pos":[2892,2900]},{"content":"Keywords","pos":[2905,2913]},{"content":"alloc_text","pos":[2944,2954]}],"content":"---\ntitle: \"Based Pointers (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__based\"\n  - \"__based_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__based keyword [C++]\"\n  - \"based pointers\"\n  - \"pointers, based\"\nms.assetid: 1e5f2e96-c52e-4738-8e14-87278681205e\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Based Pointers (C++)\n**Microsoft Specific**  \n  \n The `__based` keyword allows you to declare pointers based on pointers (pointers that are offsets from existing pointers).  \n  \n## Syntax  \n  \n```  \n  \ntype __based( base ) declarator   \n```  \n  \n## Remarks  \n Pointers based on pointer addresses are the only form of the `__based` keyword valid in 32-bit or 64-bit compilations. For the Microsoft 32-bit C/C++ compiler, a based pointer is a 32-bit offset from a 32-bit pointer base. A similar restriction holds for 64-bit environments, where a based pointer is a 64-bit offset from the 64-bit base.  \n  \n One use for pointers based on pointers is for persistent identifiers that contain pointers. A linked list that consists of pointers based on a pointer can be saved to disk, then reloaded to another place in memory, with the pointers remaining valid. For example:  \n  \n```  \n// based_pointers1.cpp  \n// compile with: /c  \nvoid *vpBuffer;  \nstruct llist_t {  \n   void __based( vpBuffer ) *vpData;  \n   struct llist_t __based( vpBuffer ) *llNext;  \n};  \n```  \n  \n The pointer `vpBuffer` is assigned the address of memory allocated at some later point in the program. The linked list is relocated relative to the value of `vpBuffer`.  \n  \n> [!NOTE]\n>  Persisting identifiers containing pointers can also be accomplished by using [memory-mapped files](http://msdn.microsoft.com/library/windows/desktop/aa366556).  \n  \n When dereferencing a based pointer, the base must be either explicitly specified or implicitly known through the declaration.  \n  \n For compatibility with previous versions, **_based** is a synonym for `__based`.  \n  \n## Example  \n The following code demonstrates changing a based pointer by changing its base.  \n  \n```  \n// based_pointers2.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nint a1[] = { 1,2,3 };  \nint a2[] = { 10,11,12 };  \nint *pBased;  \n  \ntypedef int __based(pBased) * pBasedPtr;  \n  \nusing namespace std;  \nint main() {  \n   pBased = &a1[0];  \n   pBasedPtr pb = 0;  \n  \n   cout << *pb << endl;  \n   cout << *(pb+1) << endl;  \n  \n   pBased = &a2[0];  \n  \n   cout << *pb << endl;  \n   cout << *(pb+1) << endl;  \n}  \n```  \n  \n```Output  \n1  \n2  \n10  \n11  \n```  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)   \n [alloc_text](../preprocessor/alloc-text.md)"}