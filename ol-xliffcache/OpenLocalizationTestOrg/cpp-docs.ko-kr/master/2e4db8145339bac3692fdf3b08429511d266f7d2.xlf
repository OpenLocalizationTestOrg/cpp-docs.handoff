<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e4db8145339bac3692fdf3b08429511d266f7d2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\calls-with-a-variable-number-of-arguments.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02e48a5d7828d6b9e533611a4334a58e50644624</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51004ae3b48b69fed2f9f6eb2c46d87db0361cbb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Calls with a Variable Number of Arguments | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Calls with a Variable Number of Arguments</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A partial parameter list can be terminated by the ellipsis notation, a comma followed by three periods (<bpt id="p1">**</bpt>, ...<ept id="p1">**</ept>), to indicate that there may be more arguments passed to the function, but no more information is given about them.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Type checking is not performed on such arguments.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>At least one parameter must precede the ellipsis notation and the ellipsis notation must be the last token in the parameter list.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Without the ellipsis notation, the behavior of a function is undefined if it receives parameters in addition to those declared in the parameter list.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To call a function with a variable number of arguments, simply specify any number of arguments in the function call.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An example is the <ph id="ph1">`printf`</ph> function from the C run-time library.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The function call must include one argument for each type name declared in the parameter list or the list of argument types.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>All the arguments specified in the function call are placed on the stack unless the <ph id="ph1">`__fastcall`</ph> calling convention is specified.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The number of parameters declared for the function determines how many of the arguments are taken from the stack and assigned to the parameters.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You are responsible for retrieving any additional arguments from the stack and for determining how many arguments are present.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The STDARG.H file contains ANSI-style macros for accessing arguments of functions which take a variable number of arguments.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Also, the XENIX-style macros in VARARGS.H are still supported.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This sample declaration is for a function that calls a variable number of arguments:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Function Calls</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>