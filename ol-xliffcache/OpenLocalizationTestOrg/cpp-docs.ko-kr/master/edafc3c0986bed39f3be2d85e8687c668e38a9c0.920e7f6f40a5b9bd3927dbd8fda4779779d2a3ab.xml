{"nodes":[{"pos":[12,71],"content":"ref new, gcnew  (C++ Component Extensions) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ref new, gcnew  (C++ Component Extensions) | Microsoft Docs","pos":[0,59]}]},{"content":"ref new, gcnew  (C++ Component Extensions)","pos":[695,737]},{"pos":[738,992],"content":"The <ph id=\"ph1\">`ref new`</ph> aggregate keyword allocates an instance of a type that is garbage collected when the object becomes inaccessible, and that returns a handle (<bpt id=\"p1\">[</bpt><ph id=\"ph2\">^</ph><ept id=\"p1\">](../windows/handle-to-object-operator-hat-cpp-component-extensions.md)</ept>) to the allocated object.","source":"The `ref new` aggregate keyword allocates an instance of a type that is garbage collected when the object becomes inaccessible, and that returns a handle ([^](../windows/handle-to-object-operator-hat-cpp-component-extensions.md)) to the allocated object."},{"content":"All Runtimes","pos":[1001,1013]},{"pos":[1017,1110],"content":"Memory for an instance of a type that is allocated by <ph id=\"ph1\">`ref new`</ph> is deallocated automatically.","source":"Memory for an instance of a type that is allocated by `ref new` is deallocated automatically."},{"pos":[1117,1204],"content":"A <ph id=\"ph1\">`ref new`</ph> operation throws <ph id=\"ph2\">`OutOfMemoryException`</ph> if it is unable to allocate memory.","source":"A `ref new` operation throws `OutOfMemoryException` if it is unable to allocate memory."},{"pos":[1211,1371],"content":"For more information about how memory for native C++ types is allocated and deallocated, see <bpt id=\"p1\">[</bpt>the new and delete operators<ept id=\"p1\">](../cpp/new-and-delete-operators.md)</ept>.","source":"For more information about how memory for native C++ types is allocated and deallocated, see [the new and delete operators](../cpp/new-and-delete-operators.md)."},{"content":"Use <ph id=\"ph1\">`ref new`</ph> to allocate memory for Windows Runtime objects whose lifetime you want to administer automatically.","pos":[1436,1549],"source":"Use `ref new` to allocate memory for Windows Runtime objects whose lifetime you want to administer automatically."},{"content":"The object is automatically deallocated when its reference count goes to zero, which occurs after the last copy of the reference has gone out of scope.","pos":[1550,1701]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Ref classes and structs<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/hh699870.aspx)</ept>.","pos":[1702,1816],"source":" For more information, see [Ref classes and structs](http://msdn.microsoft.com/library/windows/apps/hh699870.aspx)."},{"content":"Requirements","pos":[1826,1838]},{"pos":[1842,1866],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/ZW<ept id=\"p1\">**</ept>","source":"Compiler option: **/ZW**"},{"pos":[1950,2071],"content":"Memory for a managed type (reference or value type) is allocated by <ph id=\"ph1\">`gcnew`</ph>, and deallocated by using garbage collection.","source":"Memory for a managed type (reference or value type) is allocated by `gcnew`, and deallocated by using garbage collection."},{"content":"Requirements","pos":[2081,2093]},{"pos":[2097,2122],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>","source":"Compiler option: **/clr**"},{"content":"Examples","pos":[2132,2140]},{"content":"Example","pos":[2146,2153]},{"pos":[2162,2226],"content":"The following example uses <ph id=\"ph1\">`gcnew`</ph> to allocate a Message object.","source":"The following example uses `gcnew` to allocate a Message object."},{"content":"Example","pos":[2487,2494]},{"pos":[2503,2597],"content":"The following example uses <ph id=\"ph1\">`gcnew`</ph> to create a boxed value type for use like a reference type.","source":"The following example uses `gcnew` to create a boxed value type for use like a reference type."},{"content":"Output","pos":[2883,2889]},{"content":"See Also","pos":[2926,2934]},{"content":"Component Extensions for Runtime Platforms","pos":[2939,2981]}],"content":"---\ntitle: \"ref new, gcnew  (C++ Component Extensions) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"gcnew\"\n  - \"ref new\"\n  - \"gcnew_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ref new keyword (C++)\"\n  - \"gcnew keyword [C++]\"\nms.assetid: 388a62da-c2df-4a94-a9a2-205b53e577da\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ref new, gcnew  (C++ Component Extensions)\nThe `ref new` aggregate keyword allocates an instance of a type that is garbage collected when the object becomes inaccessible, and that returns a handle ([^](../windows/handle-to-object-operator-hat-cpp-component-extensions.md)) to the allocated object.  \n  \n## All Runtimes  \n Memory for an instance of a type that is allocated by `ref new` is deallocated automatically.  \n  \n A `ref new` operation throws `OutOfMemoryException` if it is unable to allocate memory.  \n  \n For more information about how memory for native C++ types is allocated and deallocated, see [the new and delete operators](../cpp/new-and-delete-operators.md).  \n  \n## [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]  \n Use `ref new` to allocate memory for Windows Runtime objects whose lifetime you want to administer automatically. The object is automatically deallocated when its reference count goes to zero, which occurs after the last copy of the reference has gone out of scope. For more information, see [Ref classes and structs](http://msdn.microsoft.com/library/windows/apps/hh699870.aspx).  \n  \n### Requirements  \n Compiler option: **/ZW**  \n  \n## [!INCLUDE[clr_for_headings](../dotnet/includes/clr_for_headings_md.md)]  \n Memory for a managed type (reference or value type) is allocated by `gcnew`, and deallocated by using garbage collection.  \n  \n### Requirements  \n Compiler option: **/clr**  \n  \n### Examples  \n **Example**  \n  \n The following example uses `gcnew` to allocate a Message object.  \n  \n```  \n// mcppv2_gcnew_1.cpp  \n// compile with: /clr  \nref struct Message {  \n   System::String^ sender;  \n   System::String^ receiver;  \n   System::String^ data;  \n};  \n  \nint main() {  \n   Message^ h_Message  = gcnew Message;  \n  //...  \n}  \n```  \n  \n **Example**  \n  \n The following example uses `gcnew` to create a boxed value type for use like a reference type.  \n  \n```  \n// example2.cpp : main project file.  \n// compile with /clr  \nusing namespace System;  \nvalue class Boxed {  \n    public:  \n        int i;  \n};  \nint main()  \n{  \n    Boxed^ y = gcnew Boxed;  \n    y->i = 32;  \n    Console::WriteLine(y->i);  \n    return 0;  \n}  \n```  \n  \n **Output**  \n  \n```Output  \n32  \n```  \n  \n## See Also  \n [Component Extensions for Runtime Platforms](../windows/component-extensions-for-runtime-platforms.md)"}