{"nodes":[{"pos":[12,43],"content":"&lt;limits&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>limits<ph id=\"ph2\">&amp;gt;</ph> | Microsoft Docs","pos":[0,31],"source":"&lt;limits&gt; | Microsoft Docs"}]},{"pos":[661,675],"content":"&lt;limits&gt;","linkify":"&lt;limits&gt;","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>limits<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,14],"source":"&lt;limits&gt;"}]},{"pos":[676,796],"content":"Defines the template class <ph id=\"ph1\">`numeric_limits`</ph> and two enumerations concerning floating-point representations and rounding.","source":"Defines the template class `numeric_limits` and two enumerations concerning floating-point representations and rounding."},{"pos":[805,811],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[858,865],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Explicit specializations of the <ph id=\"ph1\">`numeric_limits`</ph> class describe many properties of the fundamental types, including the character, integer, and floating-point types and <ph id=\"ph2\">`bool`</ph> that are implementation defined rather than fixed by the rules of the C++ language.","pos":[869,1128],"source":"Explicit specializations of the `numeric_limits` class describe many properties of the fundamental types, including the character, integer, and floating-point types and `bool` that are implementation defined rather than fixed by the rules of the C++ language."},{"content":"Properties described in <ph id=\"ph1\">\\&lt;</ph>limits&gt; include accuracy, minimum and maximum sized representations, rounding, and signaling type errors.","pos":[1129,1260],"source":" Properties described in \\<limits> include accuracy, minimum and maximum sized representations, rounding, and signaling type errors."},{"pos":[1270,1282],"content":"Enumerations","linkify":"Enumerations","nodes":[{"content":"Enumerations","pos":[0,12]}]},{"pos":[1303,1391],"content":"<bpt id=\"p1\">[</bpt>float_denorm_style<ept id=\"p1\">](../standard-library/limits-enums.md#float_denorm_style_enumeration)</ept>","source":"[float_denorm_style](../standard-library/limits-enums.md#float_denorm_style_enumeration)"},{"content":"The enumeration describes the various methods that an implementation can choose for representing a denormalized floating-point value — one too small to represent as a normalized value:","pos":[1392,1576]},{"pos":[1581,1667],"content":"<bpt id=\"p1\">[</bpt>float_round_style<ept id=\"p1\">](../standard-library/limits-enums.md#float_round_style_enumeration)</ept>","source":"[float_round_style](../standard-library/limits-enums.md#float_round_style_enumeration)"},{"content":"The enumeration describes the various methods that an implementation can choose for rounding a floating-point value to an integer value.","pos":[1668,1804]},{"pos":[1815,1822],"content":"Classes","linkify":"Classes","nodes":[{"content":"Classes","pos":[0,7]}]},{"pos":[1843,1910],"content":"<bpt id=\"p1\">[</bpt>numeric_limits Class<ept id=\"p1\">](../standard-library/numeric-limits-class.md)</ept>","source":"[numeric_limits Class](../standard-library/numeric-limits-class.md)"},{"content":"The template class describes arithmetic properties of built-in numerical types.","pos":[1911,1990]},{"pos":[2000,2008],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Header Files Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-header-files.md)</ept><ph id=\"ph1\"> </ph>","pos":[2012,2095],"source":"[Header Files Reference](../standard-library/cpp-standard-library-header-files.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept>","pos":[2098,2208],"source":" [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)"}],"content":"---\ntitle: \"&lt;limits&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.<limits>\"\n  - \"std::<limits>\"\n  - \"limits/std::<limits>\"\n  - \"<limits>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"limits header\"\nms.assetid: e07d6379-5b00-4a3d-a789-40d41538b59e\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;limits&gt;\nDefines the template class `numeric_limits` and two enumerations concerning floating-point representations and rounding.  \n  \n## Syntax  \n  \n```  \n#include <limits>  \n  \n```  \n  \n## Remarks  \n Explicit specializations of the `numeric_limits` class describe many properties of the fundamental types, including the character, integer, and floating-point types and `bool` that are implementation defined rather than fixed by the rules of the C++ language. Properties described in \\<limits> include accuracy, minimum and maximum sized representations, rounding, and signaling type errors.  \n  \n### Enumerations  \n  \n|||  \n|-|-|  \n|[float_denorm_style](../standard-library/limits-enums.md#float_denorm_style_enumeration)|The enumeration describes the various methods that an implementation can choose for representing a denormalized floating-point value — one too small to represent as a normalized value:|  \n|[float_round_style](../standard-library/limits-enums.md#float_round_style_enumeration)|The enumeration describes the various methods that an implementation can choose for rounding a floating-point value to an integer value.|  \n  \n### Classes  \n  \n|||  \n|-|-|  \n|[numeric_limits Class](../standard-library/numeric-limits-class.md)|The template class describes arithmetic properties of built-in numerical types.|  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n\n\n"}