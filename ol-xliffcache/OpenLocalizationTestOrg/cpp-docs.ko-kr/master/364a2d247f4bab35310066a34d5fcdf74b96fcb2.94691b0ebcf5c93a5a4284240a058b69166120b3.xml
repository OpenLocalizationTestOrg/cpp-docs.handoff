{"nodes":[{"pos":[12,51],"content":"time, _time32, _time64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"time, _time32, _time64 | Microsoft Docs","pos":[0,39]}]},{"content":"time, _time32, _time64","pos":[1129,1151]},{"content":"Get the system time.","pos":[1152,1172]},{"content":"Syntax","pos":[1181,1187]},{"content":"Parameters","pos":[1355,1365]},{"content":"Pointer to the storage location for time.","pos":[1380,1421]},{"content":"Return Value","pos":[1430,1442]},{"content":"Return the time as seconds elapsed since midnight, January 1, 1970, or -1 in the case of an error.","pos":[1446,1544]},{"content":"Remarks","pos":[1553,1560]},{"content":"The <ph id=\"ph1\">`time`</ph> function returns the number of seconds elapsed since midnight (00:00:00), January 1, 1970, Coordinated Universal Time (UTC), according to the system clock.","pos":[1564,1730],"source":"The `time` function returns the number of seconds elapsed since midnight (00:00:00), January 1, 1970, Coordinated Universal Time (UTC), according to the system clock."},{"content":"The return value is stored in the location given by <ph id=\"ph1\">`timer`</ph>.","pos":[1731,1791],"source":" The return value is stored in the location given by `timer`."},{"content":"This parameter may be <ph id=\"ph1\">`NULL`</ph>, in which case the return value is not stored.","pos":[1792,1867],"source":" This parameter may be `NULL`, in which case the return value is not stored."},{"content":"is a wrapper for <ph id=\"ph1\">`_time64`</ph> and <ph id=\"ph2\">`time_t`</ph> is, by default, equivalent to <ph id=\"ph3\">`__time64_t`</ph>.","pos":[1881,1964],"source":" is a wrapper for `_time64` and `time_t` is, by default, equivalent to `__time64_t`."},{"content":"If you need to force the compiler to interpret <ph id=\"ph1\">`time_t`</ph> as the old 32-bit <ph id=\"ph2\">`time_t`</ph>, you can define <ph id=\"ph3\">`_USE_32BIT_TIME_T`</ph>.","pos":[1965,2084],"source":" If you need to force the compiler to interpret `time_t` as the old 32-bit `time_t`, you can define `_USE_32BIT_TIME_T`."},{"content":"This is not recommended because your application may fail after January 18, 2038; the use of this macro is not allowed on 64-bit platforms.","pos":[2085,2224]},{"content":"Requirements","pos":[2233,2245]},{"content":"Routine","pos":[2252,2259]},{"content":"Required header","pos":[2260,2275]},{"pos":[2326,2338],"content":", <ph id=\"ph1\">`_time32`</ph>,","source":", `_time32`, "},{"content":"C: <ph id=\"ph1\">\\&lt;</ph>time.h&gt;, C++: <ph id=\"ph2\">\\&lt;</ph>ctime&gt; or <ph id=\"ph3\">\\&lt;</ph>time.h&gt;","pos":[2349,2389],"source":"C: \\<time.h>, C++: \\<ctime> or \\<time.h>"},{"pos":[2397,2521],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[2530,2537]},{"content":".NET Framework Equivalent","pos":[7222,7247]},{"content":"Not applicable.","pos":[7251,7266]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[7267,7314],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[7315,7440],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[7449,7457]},{"content":"Time Management","pos":[7462,7477]},{"content":"asctime, _wasctime","pos":[7528,7546]},{"content":"asctime_s, _wasctime_s","pos":[7608,7630]},{"content":"_ftime, _ftime32, _ftime64","pos":[7696,7722]},{"content":"gmtime, _gmtime32, _gmtime64","pos":[7789,7817]},{"content":"gmtime_s, _gmtime32_s, _gmtime64_s","pos":[7887,7921]},{"content":"localtime, _localtime32, _localtime64","pos":[7997,8034]},{"content":"localtime_s, _localtime32_s, _localtime64_s","pos":[8113,8156]},{"content":"_utime, _utime32, _utime64, _wutime, _wutime32, _wutime64","pos":[8241,8298]}],"content":"---\ntitle: \"time, _time32, _time64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"time\"\n  - \"_time64\"\n  - \"_time32\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-time-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"time\"\n  - \"_time64\"\n  - \"time/time\"\n  - \"time/_time32\"\n  - \"time/_time64\"\n  - \"_time32\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"time32 function\"\n  - \"_time32 function\"\n  - \"_time64 function\"\n  - \"time functions\"\n  - \"system time\"\n  - \"time64 function\"\nms.assetid: 280e00f2-2b93-4ece-94cd-e048484c6cc7\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# time, _time32, _time64\nGet the system time.  \n  \n## Syntax  \n  \n```  \ntime_t time(  \n   time_t *timer   \n);  \n__time32_t _time32(  \n   __time32_t *timer   \n);  \n__time64_t _time64(  \n   __time64_t *timer   \n);  \n```  \n  \n#### Parameters  \n `timer`  \n Pointer to the storage location for time.  \n  \n## Return Value  \n Return the time as seconds elapsed since midnight, January 1, 1970, or -1 in the case of an error.  \n  \n## Remarks  \n The `time` function returns the number of seconds elapsed since midnight (00:00:00), January 1, 1970, Coordinated Universal Time (UTC), according to the system clock. The return value is stored in the location given by `timer`. This parameter may be `NULL`, in which case the return value is not stored.  \n  \n `time` is a wrapper for `_time64` and `time_t` is, by default, equivalent to `__time64_t`. If you need to force the compiler to interpret `time_t` as the old 32-bit `time_t`, you can define `_USE_32BIT_TIME_T`. This is not recommended because your application may fail after January 18, 2038; the use of this macro is not allowed on 64-bit platforms.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`time`, `_time32`, `_time64`|C: \\<time.h>, C++: \\<ctime> or \\<time.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```c  \n// crt_times.c  \n// compile with: /W3  \n// This program demonstrates these time and date functions:  \n//      time         _ftime    ctime_s     asctime_s  \n//      _localtime64_s    _gmtime64_s    mktime    _tzset  \n//      _strtime_s     _strdate_s  strftime  \n//  \n// Also the global variable:  \n//      _tzname  \n//  \n// Turn off deprecated unsafe CRT function warnings  \n#define _CRT_SECURE_NO_WARNINGS 1  \n  \n#include <time.h>  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <sys/types.h>  \n#include <sys/timeb.h>  \n#include <string.h>  \n  \nint main()  \n{  \n    char tmpbuf[128], timebuf[26], ampm[] = \"AM\";  \n    time_t ltime;  \n    struct _timeb tstruct;  \n    struct tm today, gmt, xmas = { 0, 0, 12, 25, 11, 93 };  \n    errno_t err;  \n  \n    // Set time zone from TZ environment variable. If TZ is not set,  \n    // the operating system is queried to obtain the default value   \n    // for the variable.   \n    //  \n    _tzset();  \n  \n    // Display operating system-style date and time.   \n    _strtime_s( tmpbuf, 128 );  \n    printf( \"OS time:\\t\\t\\t\\t%s\\n\", tmpbuf );  \n    _strdate_s( tmpbuf, 128 );  \n    printf( \"OS date:\\t\\t\\t\\t%s\\n\", tmpbuf );  \n  \n    // Get UNIX-style time and display as number and string.   \n    time( &ltime );  \n    printf( \"Time in seconds since UTC 1/1/70:\\t%lld\\n\", (long long)ltime );  \n    err = ctime_s(timebuf, 26, &ltime);  \n    if (err)  \n    {  \n       printf(\"ctime_s failed due to an invalid argument.\");  \n       exit(1);  \n    }  \n    printf( \"UNIX time and date:\\t\\t\\t%s\", timebuf );  \n  \n    // Display UTC.   \n    err = _gmtime64_s( &gmt, &ltime );  \n    if (err)  \n    {  \n       printf(\"_gmtime64_s failed due to an invalid argument.\");  \n    }  \n    err = asctime_s(timebuf, 26, &gmt);  \n    if (err)  \n    {  \n       printf(\"asctime_s failed due to an invalid argument.\");  \n       exit(1);  \n    }  \n    printf( \"Coordinated universal time:\\t\\t%s\", timebuf );  \n  \n    // Convert to time structure and adjust for PM if necessary.   \n    err = _localtime64_s( &today, &ltime );  \n    if (err)  \n    {  \n       printf(\"_localtime64_s failed due to an invalid argument.\");  \n       exit(1);  \n    }  \n    if( today.tm_hour >= 12 )  \n    {  \n   strcpy_s( ampm, sizeof(ampm), \"PM\" );  \n   today.tm_hour -= 12;  \n    }  \n    if( today.tm_hour == 0 )  // Adjust if midnight hour.  \n   today.tm_hour = 12;  \n  \n    // Convert today into an ASCII string   \n    err = asctime_s(timebuf, 26, &today);  \n    if (err)  \n    {  \n       printf(\"asctime_s failed due to an invalid argument.\");  \n       exit(1);  \n    }  \n  \n    // Note how pointer addition is used to skip the first 11   \n    // characters and printf is used to trim off terminating   \n    // characters.  \n    //  \n    printf( \"12-hour time:\\t\\t\\t\\t%.8s %s\\n\",  \n       timebuf + 11, ampm );  \n  \n    // Print additional time information.   \n    _ftime( &tstruct ); // C4996  \n    // Note: _ftime is deprecated; consider using _ftime_s instead  \n    printf( \"Plus milliseconds:\\t\\t\\t%u\\n\", tstruct.millitm );  \n    printf( \"Zone difference in hours from UTC:\\t%u\\n\",   \n             tstruct.timezone/60 );  \n    printf( \"Time zone name:\\t\\t\\t\\t%s\\n\", _tzname[0] ); //C4996  \n    // Note: _tzname is deprecated; consider using _get_tzname  \n    printf( \"Daylight savings:\\t\\t\\t%s\\n\",   \n             tstruct.dstflag ? \"YES\" : \"NO\" );  \n  \n    // Make time for noon on Christmas, 1993.   \n    if( mktime( &xmas ) != (time_t)-1 )  \n    {  \n       err = asctime_s(timebuf, 26, &xmas);  \n       if (err)  \n       {  \n          printf(\"asctime_s failed due to an invalid argument.\");  \n          exit(1);  \n       }  \n       printf( \"Christmas\\t\\t\\t\\t%s\\n\", timebuf );  \n    }  \n  \n    // Use time structure to build a customized time string.   \n    err = _localtime64_s( &today, &ltime );  \n    if (err)  \n    {  \n        printf(\" _localtime64_s failed due to invalid arguments.\");  \n        exit(1);  \n    }  \n  \n    // Use strftime to build a customized time string.   \n    strftime( tmpbuf, 128,  \n         \"Today is %A, day %d of %B in the year %Y.\\n\", &today );  \n    printf( tmpbuf );  \n}  \n```  \n  \n```Output  \nOS time:            13:51:23  \nOS date:            04/25/03  \nTime in seconds since UTC 1/1/70:   1051303883  \nUNIX time and date:         Fri Apr 25 13:51:23 2003  \nCoordinated universal time:      Fri Apr 25 20:51:23 2003  \n12-hour time:            01:51:23 PM  \nPlus milliseconds:         552  \nZone difference in hours from UTC:   8  \nTime zone name:            Pacific Standard Time  \nDaylight savings:         YES  \nChristmas            Sat Dec 25 12:00:00 1993  \n  \nToday is Friday, day 25 of April in the year 2003.  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Time Management](../../c-runtime-library/time-management.md)   \n [asctime, _wasctime](../../c-runtime-library/reference/asctime-wasctime.md)   \n [asctime_s, _wasctime_s](../../c-runtime-library/reference/asctime-s-wasctime-s.md)   \n [_ftime, _ftime32, _ftime64](../../c-runtime-library/reference/ftime-ftime32-ftime64.md)   \n [gmtime, _gmtime32, _gmtime64](../../c-runtime-library/reference/gmtime-gmtime32-gmtime64.md)   \n [gmtime_s, _gmtime32_s, _gmtime64_s](../../c-runtime-library/reference/gmtime-s-gmtime32-s-gmtime64-s.md)   \n [localtime, _localtime32, _localtime64](../../c-runtime-library/reference/localtime-localtime32-localtime64.md)   \n [localtime_s, _localtime32_s, _localtime64_s](../../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md)   \n [_utime, _utime32, _utime64, _wutime, _wutime32, _wutime64](../../c-runtime-library/reference/utime-utime32-utime64-wutime-wutime32-wutime64.md)"}