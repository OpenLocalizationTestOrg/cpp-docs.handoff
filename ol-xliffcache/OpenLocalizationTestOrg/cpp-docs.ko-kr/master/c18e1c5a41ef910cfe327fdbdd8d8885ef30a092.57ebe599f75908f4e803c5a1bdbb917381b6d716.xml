{"nodes":[{"pos":[12,53],"content":"_ATL_FUNC_INFO Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_ATL_FUNC_INFO Structure | Microsoft Docs","pos":[0,41]}]},{"pos":[703,727],"content":"_ATL_FUNC_INFO Structure","linkify":"_ATL_FUNC_INFO Structure","nodes":[{"content":"_ATL_FUNC_INFO Structure","pos":[0,24]}]},{"content":"Contains type information used to describe a method or property on a dispinterface.","pos":[728,811]},{"pos":[820,826],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[975,982],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"content":"<bpt id=\"p1\">**</bpt>cc<ept id=\"p1\">**</ept>","pos":[986,992],"source":"**cc**"},{"content":"The calling convention.","pos":[996,1019]},{"content":"When using this structure with the <bpt id=\"p1\">[</bpt>IDispEventSimpleImpl<ept id=\"p1\">](../../atl/reference/idispeventsimpleimpl-class.md)</ept> class, this member must be <bpt id=\"p2\">**</bpt>CC_STDCALL<ept id=\"p2\">**</ept>.","pos":[1020,1171],"source":" When using this structure with the [IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md) class, this member must be **CC_STDCALL**."},{"content":"<ph id=\"ph1\">`CC_CDECL`</ph> is the only option supported in Windows CE for the <ph id=\"ph2\">`CALLCONV`</ph> field of the <ph id=\"ph3\">`_ATL_FUNC_INFO`</ph> structure.","pos":[1172,1285],"source":"`CC_CDECL` is the only option supported in Windows CE for the `CALLCONV` field of the `_ATL_FUNC_INFO` structure."},{"content":"Any other value is unsupported thus its behavior undefined.","pos":[1286,1345]},{"content":"<bpt id=\"p1\">**</bpt>vtReturn<ept id=\"p1\">**</ept>","pos":[1352,1364],"source":"**vtReturn**"},{"content":"The variant type of the function return value.","pos":[1368,1414]},{"content":"<bpt id=\"p1\">**</bpt>nParams<ept id=\"p1\">**</ept>","pos":[1421,1432],"source":"**nParams**"},{"content":"The number of function parameters.","pos":[1436,1470]},{"content":"<bpt id=\"p1\">**</bpt>pVarTypes<ept id=\"p1\">**</ept>","pos":[1477,1490],"source":"**pVarTypes**"},{"content":"An array of variant types of the function parameters.","pos":[1494,1547]},{"pos":[1556,1563],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Internally, ATL uses this structure to hold information obtained from a type library.","pos":[1567,1652]},{"content":"You may need to manipulate this structure directly if you provide type information for an event handler used with the <bpt id=\"p1\">[</bpt>IDispEventSimpleImpl<ept id=\"p1\">](../../atl/reference/idispeventsimpleimpl-class.md)</ept> class and <bpt id=\"p2\">[</bpt>SINK_ENTRY_INFO<ept id=\"p2\">](http://msdn.microsoft.com/library/1a0ae260-2c82-4926-a537-db01e5f206a7)</ept> macro.","pos":[1653,1951],"source":" You may need to manipulate this structure directly if you provide type information for an event handler used with the [IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md) class and [SINK_ENTRY_INFO](http://msdn.microsoft.com/library/1a0ae260-2c82-4926-a537-db01e5f206a7) macro."},{"pos":[1960,1967],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Given a dispinterface method defined in IDL:","pos":[1971,2015]},{"pos":[2022,2113],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#139<ept id=\"p2\">](../../atl/codesnippet/cpp/atl-func-info-structure_1.idl)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#139](../../atl/codesnippet/cpp/atl-func-info-structure_1.idl)]"},{"pos":[2120,2167],"content":"you would define an <ph id=\"ph1\">`_ATL_FUNC_INFO`</ph> structure:","source":"you would define an `_ATL_FUNC_INFO` structure:"},{"pos":[2174,2263],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Windowing#140<ept id=\"p2\">](../../atl/codesnippet/cpp/atl-func-info-structure_2.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Windowing#140](../../atl/codesnippet/cpp/atl-func-info-structure_2.h)]"},{"pos":[2272,2284],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2288,2308],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcom.h","source":"**Header:** atlcom.h"},{"pos":[2317,2325],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Structures<ept id=\"p1\">](../../atl/reference/atl-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[2329,2381],"source":"[Structures](../../atl/reference/atl-structures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>IDispEventSimpleImpl Class<ept id=\"p1\">](../../atl/reference/idispeventsimpleimpl-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[2384,2465],"source":" [IDispEventSimpleImpl Class](../../atl/reference/idispeventsimpleimpl-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>SINK_ENTRY_INFO<ept id=\"p1\">](http://msdn.microsoft.com/library/1a0ae260-2c82-4926-a537-db01e5f206a7)</ept>","pos":[2468,2558],"source":" [SINK_ENTRY_INFO](http://msdn.microsoft.com/library/1a0ae260-2c82-4926-a537-db01e5f206a7)"}],"content":"---\ntitle: \"_ATL_FUNC_INFO Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_ATL_FUNC_INFO\"\n  - \"ATL::_ATL_FUNC_INFO\"\n  - \"ATL._ATL_FUNC_INFO\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"_ATL_FUNC_INFO structure\"\n  - \"ATL_FUNC_INFO structure\"\nms.assetid: 441ebe2c-f971-47de-9f52-a258e8d6f88e\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _ATL_FUNC_INFO Structure\nContains type information used to describe a method or property on a dispinterface.  \n  \n## Syntax  \n  \n```\nstruct _ATL_FUNC_INFO {\n    CALLCONV cc;\n    VARTYPE vtReturn;\n    SHORT nParams;\n    VARTYPE pVarTypes[_ATL_MAX_VARTYPES];\n};\n```  \n  \n## Members  \n **cc**  \n The calling convention. When using this structure with the [IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md) class, this member must be **CC_STDCALL**. `CC_CDECL` is the only option supported in Windows CE for the `CALLCONV` field of the `_ATL_FUNC_INFO` structure. Any other value is unsupported thus its behavior undefined.  \n  \n **vtReturn**  \n The variant type of the function return value.  \n  \n **nParams**  \n The number of function parameters.  \n  \n **pVarTypes**  \n An array of variant types of the function parameters.  \n  \n## Remarks  \n Internally, ATL uses this structure to hold information obtained from a type library. You may need to manipulate this structure directly if you provide type information for an event handler used with the [IDispEventSimpleImpl](../../atl/reference/idispeventsimpleimpl-class.md) class and [SINK_ENTRY_INFO](http://msdn.microsoft.com/library/1a0ae260-2c82-4926-a537-db01e5f206a7) macro.  \n  \n## Example  \n Given a dispinterface method defined in IDL:  \n  \n [!code-cpp[NVC_ATL_Windowing#139](../../atl/codesnippet/cpp/atl-func-info-structure_1.idl)]  \n  \n you would define an `_ATL_FUNC_INFO` structure:  \n  \n [!code-cpp[NVC_ATL_Windowing#140](../../atl/codesnippet/cpp/atl-func-info-structure_2.h)]  \n  \n## Requirements  \n **Header:** atlcom.h  \n  \n## See Also  \n [Structures](../../atl/reference/atl-structures.md)   \n [IDispEventSimpleImpl Class](../../atl/reference/idispeventsimpleimpl-class.md)   \n [SINK_ENTRY_INFO](http://msdn.microsoft.com/library/1a0ae260-2c82-4926-a537-db01e5f206a7)\n\n\n\n\n\n"}