{"nodes":[{"pos":[12,44],"content":"money_get Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"money_get Class | Microsoft Docs","pos":[0,32]}]},{"content":"money_get Class","pos":[669,684]},{"pos":[685,831],"content":"The template class describes an object that can serve as a locale facet to control conversions of sequences of type <ph id=\"ph1\">`CharType`</ph> to monetary values.","source":"The template class describes an object that can serve as a locale facet to control conversions of sequences of type `CharType` to monetary values."},{"content":"Syntax","pos":[840,846]},{"content":"Parameters","pos":[991,1001]},{"content":"The type used within a program to encode characters in a locale.","pos":[1019,1083]},{"content":"The type of iterator from which the get functions read their input.","pos":[1109,1176]},{"content":"Remarks","pos":[1185,1192]},{"content":"As with any locale facet, the static object ID has an initial stored value of zero.","pos":[1196,1279]},{"content":"The first attempt to access its stored value stores a unique positive value in <bpt id=\"p1\">**</bpt>id.<ept id=\"p1\">**</ept>","pos":[1280,1366],"source":" The first attempt to access its stored value stores a unique positive value in **id.**"},{"content":"Constructors","pos":[1376,1388]},{"content":"money_get","pos":[1410,1419]},{"pos":[1444,1578],"content":"The constructor for objects of type <ph id=\"ph1\">`money_get`</ph> that are used to extract numerical values from sequences representing monetary values.","source":"The constructor for objects of type `money_get` that are used to extract numerical values from sequences representing monetary values."},{"content":"Typedefs","pos":[1589,1597]},{"content":"char_type","pos":[1619,1628]},{"content":"A type that is used to describe a character used by a locale.","pos":[1653,1714]},{"content":"iter_type","pos":[1720,1729]},{"content":"A type that describes an input iterator.","pos":[1754,1794]},{"content":"string_type","pos":[1800,1811]},{"pos":[1838,1910],"content":"A type that describes a string containing characters of type <ph id=\"ph1\">`CharType`</ph>.","source":"A type that describes a string containing characters of type `CharType`."},{"content":"Member Functions","pos":[1921,1937]},{"content":"do_get","pos":[1959,1965]},{"content":"A virtual function called to extracts a numerical value from a character sequence that represents a monetary value.","pos":[1987,2102]},{"content":"get","pos":[2108,2111]},{"content":"Extracts a numerical value from a character sequence that represents a monetary value.","pos":[2130,2216]},{"content":"Requirements","pos":[2226,2238]},{"pos":[2242,2263],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>locale&gt;","source":"**Header:** \\<locale>"},{"pos":[2270,2288],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2335,2355],"content":"money_get::char_type"},{"content":"A type that is used to describe a character used by a locale.","pos":[2359,2420]},{"content":"Remarks","pos":[2471,2478]},{"pos":[2482,2544],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **CharType**."},{"pos":[2588,2605],"content":"money_get::do_get"},{"content":"Virtual function called to extracts a numerical value from a character sequence that represents a monetary value.","pos":[2609,2722]},{"content":"Parameters","pos":[3061,3071]},{"content":"Input iterator addressing the beginning of the sequence to be converted.","pos":[3086,3158]},{"content":"Input iterator addressing the end of the sequence to be converted.","pos":[3175,3241]},{"content":"A Boolean value indicating the type of currency symbol expected in the sequence: <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if international, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if domestic.","pos":[3258,3388],"source":" A Boolean value indicating the type of currency symbol expected in the sequence: **true** if international, **false** if domestic."},{"content":"A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.","pos":[3408,3511]},{"content":"Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded or not.","pos":[3529,3641]},{"content":"A string storing the converted sequence.","pos":[3657,3697]},{"content":"Return Value","pos":[3707,3719]},{"content":"An input iterator addressing the first element beyond the monetary input field.","pos":[3723,3802]},{"content":"Remarks","pos":[3812,3819]},{"content":"The first virtual protected member function tries to match sequential elements beginning at first in the sequence [ <ph id=\"ph1\">`first`</ph>, <ph id=\"ph2\">`last`</ph>) until it has recognized a complete, nonempty monetary input field.","pos":[3823,4022],"source":"The first virtual protected member function tries to match sequential elements beginning at first in the sequence [ `first`, `last`) until it has recognized a complete, nonempty monetary input field."},{"content":"If successful, it converts this field to a sequence of one or more decimal digits, optionally preceded by a minus sign ( <ph id=\"ph1\">`–`</ph>), to represent the amount and stores the result in the <bpt id=\"p1\">[</bpt>string_type<ept id=\"p1\">](#money_get__string_type)</ept> object <ph id=\"ph2\">`val`</ph>.","pos":[4023,4255],"source":" If successful, it converts this field to a sequence of one or more decimal digits, optionally preceded by a minus sign ( `–`), to represent the amount and stores the result in the [string_type](#money_get__string_type) object `val`."},{"content":"It returns an iterator designating the first element beyond the monetary input field.","pos":[4256,4341]},{"content":"Otherwise, the function stores an empty sequence in <ph id=\"ph1\">`val`</ph> and sets <ph id=\"ph2\">`ios_base::failbit`</ph> in <ph id=\"ph3\">`State`</ph>.","pos":[4342,4440],"source":" Otherwise, the function stores an empty sequence in `val` and sets `ios_base::failbit` in `State`."},{"content":"It returns an iterator designating the first element beyond any prefix of a valid monetary input field.","pos":[4441,4544]},{"content":"In either case, if the return value equals <ph id=\"ph1\">`last`</ph>, the function sets <ph id=\"ph2\">`ios_base::eofbit`</ph> in <ph id=\"ph3\">`State`</ph>.","pos":[4545,4644],"source":" In either case, if the return value equals `last`, the function sets `ios_base::eofbit` in `State`."},{"pos":[4651,4866],"content":"The second virtual protected member function behaves the same as the first, except that if successful it converts the optionally signed digit sequence to a value of type <ph id=\"ph1\">`long double`</ph> and stores that value in <ph id=\"ph2\">`val`</ph>.","source":"The second virtual protected member function behaves the same as the first, except that if successful it converts the optionally signed digit sequence to a value of type `long double` and stores that value in `val`."},{"content":"The format of a monetary input field is determined by the <bpt id=\"p1\">[</bpt>locale facet<ept id=\"p1\">](../standard-library/locale-class.md#facet_class)</ept><bpt id=\"p2\">**</bpt>fac<ept id=\"p2\">**</ept> returned by the effective call <bpt id=\"p3\">[</bpt>use_facet<ept id=\"p3\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\"> &lt; </ph><bpt id=\"p4\">[</bpt>moneypunct<ept id=\"p4\">](../standard-library/moneypunct-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p5\">**</bpt>CharType<ept id=\"p5\">**</ept>, <bpt id=\"p6\">**</bpt>intl<ept id=\"p6\">**</ept>&gt;&gt;( <bpt id=\"p7\">**</bpt>iosbase<ept id=\"p7\">**</ept>.","pos":[4873,5192],"source":"The format of a monetary input field is determined by the [locale facet](../standard-library/locale-class.md#facet_class)**fac** returned by the effective call [use_facet](../standard-library/locale-functions.md#use_facet) < [moneypunct](../standard-library/moneypunct-class.md)\\< **CharType**, **intl**>>( **iosbase**."},{"content":"<bpt id=\"p1\">[</bpt>getloc<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>).","pos":[5193,5259],"source":"[getloc](../standard-library/ios-base-class.md#ios_base__getloc))."},{"content":"Specifically:","pos":[5266,5279]},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[5287,5295],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>neg_format<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__neg_format)</ept> determines the order in which components of the field occur.","pos":[5296,5433],"source":"[neg_format](../standard-library/moneypunct-class.md#moneypunct__neg_format) determines the order in which components of the field occur."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[5441,5449],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>curr_symbol<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__curr_symbol)</ept> determines the sequence of elements that constitutes a currency symbol.","pos":[5450,5600],"source":"[curr_symbol](../standard-library/moneypunct-class.md#moneypunct__curr_symbol) determines the sequence of elements that constitutes a currency symbol."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[5608,5616],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>positive_sign<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__positive_sign)</ept> determines the sequence of elements that constitutes a positive sign.","pos":[5617,5769],"source":"[positive_sign](../standard-library/moneypunct-class.md#moneypunct__positive_sign) determines the sequence of elements that constitutes a positive sign."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[5777,5785],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>negative_sign<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__negative_sign)</ept> determines the sequence of elements that constitutes a negative sign.","pos":[5786,5938],"source":"[negative_sign](../standard-library/moneypunct-class.md#moneypunct__negative_sign) determines the sequence of elements that constitutes a negative sign."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[5946,5954],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>grouping<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__grouping)</ept> determines how digits are grouped to the left of any decimal point.","pos":[5955,6095],"source":"[grouping](../standard-library/moneypunct-class.md#moneypunct__grouping) determines how digits are grouped to the left of any decimal point."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[6103,6111],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>thousands_sep<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__thousands_sep)</ept> determines the element that separates groups of digits to the left of any decimal point.","pos":[6112,6283],"source":"[thousands_sep](../standard-library/moneypunct-class.md#moneypunct__thousands_sep) determines the element that separates groups of digits to the left of any decimal point."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[6291,6299],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>decimal_point<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__decimal_point)</ept> determines the element that separates the integer digits from the fraction digits.","pos":[6300,6465],"source":"[decimal_point](../standard-library/moneypunct-class.md#moneypunct__decimal_point) determines the element that separates the integer digits from the fraction digits."},{"content":"<bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[6473,6481],"source":"**fac**."},{"content":"<bpt id=\"p1\">[</bpt>frac_digits<ept id=\"p1\">](../standard-library/moneypunct-class.md#moneypunct__frac_digits)</ept> determines the number of significant fraction digits to the right of any decimal point.","pos":[6482,6648],"source":"[frac_digits](../standard-library/moneypunct-class.md#moneypunct__frac_digits) determines the number of significant fraction digits to the right of any decimal point."},{"content":"When parsing a monetary amount with more fraction digits than are called for by <ph id=\"ph1\">`frac_digits`</ph>, <ph id=\"ph2\">`do_get`</ph> stops parsing after consuming at most <ph id=\"ph3\">`frac_digits`</ph> characters.","pos":[6649,6816],"source":" When parsing a monetary amount with more fraction digits than are called for by `frac_digits`, `do_get` stops parsing after consuming at most `frac_digits` characters."},{"content":"If the sign string ( <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[6823,6852],"source":"If the sign string ( **fac**."},{"content":"or <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[6869,6880],"source":" or **fac**."},{"content":") has more than one element, only the first element is matched where the element equal to <bpt id=\"p1\">**</bpt>money_base::sign<ept id=\"p1\">**</ept> appears in the format pattern ( <bpt id=\"p2\">**</bpt>fac<ept id=\"p2\">**</ept>.","pos":[6896,7047],"source":") has more than one element, only the first element is matched where the element equal to **money_base::sign** appears in the format pattern ( **fac**."},{"content":").","pos":[7060,7062]},{"content":"Any remaining elements are matched at the end of the monetary input field.","pos":[7063,7137]},{"content":"If neither string has a first element that matches the next element in the monetary input field, the sign string is taken as empty and the sign is positive.","pos":[7138,7294]},{"content":"If <bpt id=\"p1\">**</bpt>iosbase<ept id=\"p1\">**</ept>.","pos":[7301,7316],"source":"If **iosbase**."},{"content":"<bpt id=\"p1\">[</bpt>flags<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__flags)</ept><ph id=\"ph1\"> &amp; </ph><bpt id=\"p2\">[</bpt>showbase<ept id=\"p2\">](../standard-library/ios-functions.md#showbase)</ept> is nonzero, the string <bpt id=\"p3\">**</bpt>fac<ept id=\"p3\">**</ept>.","pos":[7317,7471],"source":"[flags](../standard-library/ios-base-class.md#ios_base__flags) & [showbase](../standard-library/ios-functions.md#showbase) is nonzero, the string **fac**."},{"content":"must match where the element equal to <bpt id=\"p1\">**</bpt>money_base::symbol<ept id=\"p1\">**</ept> appears in the format pattern.","pos":[7486,7577],"source":" must match where the element equal to **money_base::symbol** appears in the format pattern."},{"content":"Otherwise, if <bpt id=\"p1\">**</bpt>money_base::symbol<ept id=\"p1\">**</ept> occurs at the end of the format pattern, and if no elements of the sign string remain to be matched, the currency symbol is not matched.","pos":[7578,7751],"source":" Otherwise, if **money_base::symbol** occurs at the end of the format pattern, and if no elements of the sign string remain to be matched, the currency symbol is not matched."},{"content":"Otherwise, the currency symbol is optionally matched.","pos":[7752,7805]},{"content":"If no instances of <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[7812,7839],"source":"If no instances of **fac**."},{"content":"occur in the value portion of the monetary input field (where the element equal to <bpt id=\"p1\">**</bpt>money_base::value<ept id=\"p1\">**</ept> appears in the format pattern), no grouping constraint is imposed.","pos":[7856,8027],"source":" occur in the value portion of the monetary input field (where the element equal to **money_base::value** appears in the format pattern), no grouping constraint is imposed."},{"content":"Otherwise, any grouping constraints imposed by <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[8028,8083],"source":" Otherwise, any grouping constraints imposed by **fac**."},{"content":"<bpt id=\"p1\">**</bpt>grouping<ept id=\"p1\">**</ept> is enforced.","pos":[8084,8109],"source":"**grouping** is enforced."},{"content":"Note that the resulting digit sequence represents an integer whose low-order <bpt id=\"p1\">**</bpt>fac<ept id=\"p1\">**</ept>.","pos":[8110,8195],"source":" Note that the resulting digit sequence represents an integer whose low-order **fac**."},{"content":"decimal digits are considered to the right of the decimal point.","pos":[8210,8274]},{"content":"Arbitrary white space is matched where the element equal to <bpt id=\"p1\">**</bpt>money_base::space<ept id=\"p1\">**</ept> appears in the format pattern, if it appears other than at the end of the format pattern.","pos":[8281,8452],"source":"Arbitrary white space is matched where the element equal to **money_base::space** appears in the format pattern, if it appears other than at the end of the format pattern."},{"content":"Otherwise, no internal white space is matched.","pos":[8453,8499]},{"content":"An element <bpt id=\"p1\">*</bpt>ch<ept id=\"p1\">*</ept> is considered white space if <bpt id=\"p2\">[</bpt>use_facet<ept id=\"p2\">](../standard-library/locale-functions.md#use_facet)</ept><ph id=\"ph1\"> &lt; </ph><bpt id=\"p3\">[</bpt>ctype<ept id=\"p3\">](../standard-library/ctype-class.md)</ept><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p4\">**</bpt>CharType<ept id=\"p4\">**</ept>&gt; &gt;( <bpt id=\"p5\">**</bpt>iosbase<ept id=\"p5\">**</ept>.","pos":[8500,8685],"source":" An element *ch* is considered white space if [use_facet](../standard-library/locale-functions.md#use_facet) < [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( **iosbase**."},{"content":"<bpt id=\"p1\">[</bpt>getloc<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>).","pos":[8686,8752],"source":"[getloc](../standard-library/ios-base-class.md#ios_base__getloc))."},{"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../standard-library/ctype-class.md#ctype__is)</ept>( <bpt id=\"p2\">**</bpt>ctype_base::space<ept id=\"p2\">**</ept>, <bpt id=\"p3\">*</bpt>ch<ept id=\"p3\">*</ept>) is <bpt id=\"p4\">**</bpt>true<ept id=\"p4\">**</ept>.","pos":[8753,8846],"source":"[is](../standard-library/ctype-class.md#ctype__is)( **ctype_base::space**, *ch*) is **true**."},{"content":"Example","pos":[8856,8863]},{"pos":[8868,8933],"content":"See the example for <bpt id=\"p1\">[</bpt>get<ept id=\"p1\">](#money_get__get)</ept>, which calls <ph id=\"ph1\">`do_get`</ph>.","source":"See the example for [get](#money_get__get), which calls `do_get`."},{"pos":[8974,8988],"content":"money_get::get"},{"content":"Extracts a numerical value from a character sequence that represents a monetary value.","pos":[8992,9078]},{"content":"Parameters","pos":[9398,9408]},{"content":"Input iterator addressing the beginning of the sequence to be converted.","pos":[9423,9495]},{"content":"Input iterator addressing the end of the sequence to be converted.","pos":[9512,9578]},{"content":"A Boolean value indicating the type of currency symbol expected in the sequence: <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if international, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if domestic.","pos":[9595,9725],"source":" A Boolean value indicating the type of currency symbol expected in the sequence: **true** if international, **false** if domestic."},{"content":"A format flag which when set indicates that the currency symbol is optional; otherwise, it is required","pos":[9745,9847]},{"content":"Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.","pos":[9865,9970]},{"content":"A string storing the converted sequence.","pos":[9986,10026]},{"content":"Return Value","pos":[10036,10048]},{"content":"An input iterator addressing the first element beyond the monetary input field.","pos":[10052,10131]},{"content":"Remarks","pos":[10141,10148]},{"pos":[10152,10267],"content":"Both member functions return <bpt id=\"p1\">[</bpt>do_get<ept id=\"p1\">](#money_get__do_get)</ept>( <ph id=\"ph1\">`first``,`</ph> <ph id=\"ph2\">`last``,`</ph> <ph id=\"ph3\">`Intl`</ph>, <ph id=\"ph4\">`Iosbase`</ph>, <ph id=\"ph5\">`State`</ph>, <ph id=\"ph6\">`val`</ph>).","source":"Both member functions return [do_get](#money_get__do_get)( `first``,` `last``,` `Intl`, `Iosbase`, `State`, `val`)."},{"content":"Example","pos":[10277,10284]},{"pos":[11793,11813],"content":"money_get::iter_type"},{"content":"A type that describes an input iterator.","pos":[11817,11857]},{"content":"Remarks","pos":[11913,11920]},{"pos":[11924,11991],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>InputIterator<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **InputIterator**."},{"pos":[12038,12058],"content":"money_get::money_get"},{"pos":[12062,12196],"content":"The constructor for objects of type <ph id=\"ph1\">`money_get`</ph> that are used to extract numerical values from sequences representing monetary values.","source":"The constructor for objects of type `money_get` that are used to extract numerical values from sequences representing monetary values."},{"content":"Parameters","pos":[12257,12267]},{"content":"Integer value used to specify the type of memory management for the object.","pos":[12282,12357]},{"content":"Remarks","pos":[12367,12374]},{"pos":[12378,12451],"content":"The possible values for the <ph id=\"ph1\">`_Refs`</ph> parameter and their significance are:","source":"The possible values for the `_Refs` parameter and their significance are:"},{"content":"0: The lifetime of the object is managed by the locales that contain it.","pos":[12461,12533]},{"content":"1: The lifetime of the object must be manually managed.","pos":[12543,12598]},{"content":"0: These values are not defined.","pos":[12611,12643]},{"content":"No direct examples are possible, because the destructor is protected.","pos":[12650,12719]},{"pos":[12726,12858],"content":"The constructor initializes its base object with <bpt id=\"p1\">**</bpt>locale::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>facet<ept id=\"p2\">](../standard-library/locale-class.md#facet_class)</ept>( <bpt id=\"p3\">**</bpt>_<ept id=\"p3\">**</ept><bpt id=\"p4\">*</bpt>Refs<ept id=\"p4\">*</ept>).","source":"The constructor initializes its base object with **locale::**[facet](../standard-library/locale-class.md#facet_class)( **_***Refs*)."},{"pos":[12907,12929],"content":"money_get::string_type"},{"pos":[12933,13007],"content":"A type that describes a string containing characters of type <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"A type that describes a string containing characters of type **CharType**."},{"content":"Remarks","pos":[13093,13100]},{"pos":[13104,13216],"content":"The type describes a specialization of template class <bpt id=\"p1\">[</bpt>basic_string<ept id=\"p1\">](../standard-library/basic-string-class.md)</ept>.","source":"The type describes a specialization of template class [basic_string](../standard-library/basic-string-class.md)."},{"content":"See Also","pos":[13225,13233]},{"content":"locale&gt;","pos":[13240,13247],"source":"locale>"},{"content":"facet Class","pos":[13285,13296]},{"content":"Thread Safety in the C++ Standard Library","pos":[13352,13393]}],"content":"---\ntitle: \"money_get Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"xlocmon/std::money_get\"\n  - \"money_get\"\n  - \"std.money_get\"\n  - \"std::money_get\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"money_get class\"\nms.assetid: 692d3374-3fe7-4b46-8aeb-f8d91ed66b2e\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# money_get Class\nThe template class describes an object that can serve as a locale facet to control conversions of sequences of type `CharType` to monetary values.  \n  \n## Syntax  \n  \n```\ntemplate <class CharType, class InputIterator = istreambuf_iterator<CharType>>  \nclass money_get : public locale::facet;\n```  \n  \n#### Parameters  \n `CharType`  \n The type used within a program to encode characters in a locale.  \n  \n `InputIterator`  \n The type of iterator from which the get functions read their input.  \n  \n## Remarks  \n As with any locale facet, the static object ID has an initial stored value of zero. The first attempt to access its stored value stores a unique positive value in **id.**  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[money_get](#money_get__money_get)|The constructor for objects of type `money_get` that are used to extract numerical values from sequences representing monetary values.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#money_get__char_type)|A type that is used to describe a character used by a locale.|  \n|[iter_type](#money_get__iter_type)|A type that describes an input iterator.|  \n|[string_type](#money_get__string_type)|A type that describes a string containing characters of type `CharType`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[do_get](#money_get__do_get)|A virtual function called to extracts a numerical value from a character sequence that represents a monetary value.|  \n|[get](#money_get__get)|Extracts a numerical value from a character sequence that represents a monetary value.|  \n  \n## Requirements  \n **Header:** \\<locale>  \n  \n **Namespace:** std  \n  \n##  <a name=\"money_get__char_type\"></a>  money_get::char_type  \n A type that is used to describe a character used by a locale.  \n  \n```\ntypedef CharType char_type;\n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **CharType**.  \n  \n##  <a name=\"money_get__do_get\"></a>  money_get::do_get  \n Virtual function called to extracts a numerical value from a character sequence that represents a monetary value.  \n  \n```\nvirtual iter_type do_get(iter_type first,\n    iter_type last,\n    bool Intl,\n    ios_base& Iosbase,\n    ios_base::iostate& State,\n    long double& val) const virtual iter_type do_get(iter_type first,\n    iter_type last,\n    bool Intl,\n    ios_base& Iosbase,\n    ios_base::iostate& State,\n    string_type& val) const\n```  \n  \n### Parameters  \n `first`  \n Input iterator addressing the beginning of the sequence to be converted.  \n  \n `last`  \n Input iterator addressing the end of the sequence to be converted.  \n  \n `Intl`  \n A Boolean value indicating the type of currency symbol expected in the sequence: **true** if international, **false** if domestic.  \n  \n `Iosbase`  \n A format flag which when set indicates that the currency symbol is optional; otherwise, it is required.  \n  \n `State`  \n Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded or not.  \n  \n `val`  \n A string storing the converted sequence.  \n  \n### Return Value  \n An input iterator addressing the first element beyond the monetary input field.  \n  \n### Remarks  \n The first virtual protected member function tries to match sequential elements beginning at first in the sequence [ `first`, `last`) until it has recognized a complete, nonempty monetary input field. If successful, it converts this field to a sequence of one or more decimal digits, optionally preceded by a minus sign ( `–`), to represent the amount and stores the result in the [string_type](#money_get__string_type) object `val`. It returns an iterator designating the first element beyond the monetary input field. Otherwise, the function stores an empty sequence in `val` and sets `ios_base::failbit` in `State`. It returns an iterator designating the first element beyond any prefix of a valid monetary input field. In either case, if the return value equals `last`, the function sets `ios_base::eofbit` in `State`.  \n  \n The second virtual protected member function behaves the same as the first, except that if successful it converts the optionally signed digit sequence to a value of type `long double` and stores that value in `val`.  \n  \n The format of a monetary input field is determined by the [locale facet](../standard-library/locale-class.md#facet_class)**fac** returned by the effective call [use_facet](../standard-library/locale-functions.md#use_facet) < [moneypunct](../standard-library/moneypunct-class.md)\\< **CharType**, **intl**>>( **iosbase**. [getloc](../standard-library/ios-base-class.md#ios_base__getloc)).  \n  \n Specifically:  \n  \n- **fac**. [neg_format](../standard-library/moneypunct-class.md#moneypunct__neg_format) determines the order in which components of the field occur.  \n  \n- **fac**. [curr_symbol](../standard-library/moneypunct-class.md#moneypunct__curr_symbol) determines the sequence of elements that constitutes a currency symbol.  \n  \n- **fac**. [positive_sign](../standard-library/moneypunct-class.md#moneypunct__positive_sign) determines the sequence of elements that constitutes a positive sign.  \n  \n- **fac**. [negative_sign](../standard-library/moneypunct-class.md#moneypunct__negative_sign) determines the sequence of elements that constitutes a negative sign.  \n  \n- **fac**. [grouping](../standard-library/moneypunct-class.md#moneypunct__grouping) determines how digits are grouped to the left of any decimal point.  \n  \n- **fac**. [thousands_sep](../standard-library/moneypunct-class.md#moneypunct__thousands_sep) determines the element that separates groups of digits to the left of any decimal point.  \n  \n- **fac**. [decimal_point](../standard-library/moneypunct-class.md#moneypunct__decimal_point) determines the element that separates the integer digits from the fraction digits.  \n  \n- **fac**. [frac_digits](../standard-library/moneypunct-class.md#moneypunct__frac_digits) determines the number of significant fraction digits to the right of any decimal point. When parsing a monetary amount with more fraction digits than are called for by `frac_digits`, `do_get` stops parsing after consuming at most `frac_digits` characters.  \n  \n If the sign string ( **fac**. `negative_sign` or **fac**. `positive_sign`) has more than one element, only the first element is matched where the element equal to **money_base::sign** appears in the format pattern ( **fac**. `neg_format`). Any remaining elements are matched at the end of the monetary input field. If neither string has a first element that matches the next element in the monetary input field, the sign string is taken as empty and the sign is positive.  \n  \n If **iosbase**. [flags](../standard-library/ios-base-class.md#ios_base__flags) & [showbase](../standard-library/ios-functions.md#showbase) is nonzero, the string **fac**. `curr_symbol` must match where the element equal to **money_base::symbol** appears in the format pattern. Otherwise, if **money_base::symbol** occurs at the end of the format pattern, and if no elements of the sign string remain to be matched, the currency symbol is not matched. Otherwise, the currency symbol is optionally matched.  \n  \n If no instances of **fac**. `thousands_sep` occur in the value portion of the monetary input field (where the element equal to **money_base::value** appears in the format pattern), no grouping constraint is imposed. Otherwise, any grouping constraints imposed by **fac**. **grouping** is enforced. Note that the resulting digit sequence represents an integer whose low-order **fac**. `frac_digits` decimal digits are considered to the right of the decimal point.  \n  \n Arbitrary white space is matched where the element equal to **money_base::space** appears in the format pattern, if it appears other than at the end of the format pattern. Otherwise, no internal white space is matched. An element *ch* is considered white space if [use_facet](../standard-library/locale-functions.md#use_facet) < [ctype](../standard-library/ctype-class.md)\\< **CharType**> >( **iosbase**. [getloc](../standard-library/ios-base-class.md#ios_base__getloc)). [is](../standard-library/ctype-class.md#ctype__is)( **ctype_base::space**, *ch*) is **true**.  \n  \n### Example  \n  See the example for [get](#money_get__get), which calls `do_get`.  \n  \n##  <a name=\"money_get__get\"></a>  money_get::get  \n Extracts a numerical value from a character sequence that represents a monetary value.  \n  \n```\niter_type get(iter_type first,\n    iter_type last,\n    bool Intl,\n    ios_base& Iosbase,\n    ios_base::iostate& State,\n    long double& val) const;\n\niter_type get(iter_type first,\n    iter_type last,\n    bool Intl,\n    ios_base& Iosbase,\n    ios_base::iostate& State,\n    string_type& val) const;\n```  \n  \n### Parameters  \n `first`  \n Input iterator addressing the beginning of the sequence to be converted.  \n  \n `last`  \n Input iterator addressing the end of the sequence to be converted.  \n  \n `Intl`  \n A Boolean value indicating the type of currency symbol expected in the sequence: **true** if international, **false** if domestic.  \n  \n `Iosbase`  \n A format flag which when set indicates that the currency symbol is optional; otherwise, it is required  \n  \n `State`  \n Sets the appropriate bitmask elements for the stream state according to whether the operations succeeded.  \n  \n `val`  \n A string storing the converted sequence.  \n  \n### Return Value  \n An input iterator addressing the first element beyond the monetary input field.  \n  \n### Remarks  \n Both member functions return [do_get](#money_get__do_get)( `first``,` `last``,` `Intl`, `Iosbase`, `State`, `val`).  \n  \n### Example  \n  \n```cpp  \n// money_get_get.cpp  \n// compile with: /EHsc  \n#include <locale>  \n#include <iostream>  \n#include <sstream>  \nusing namespace std;  \n  \nint main( )  \n{  \n   locale loc( \"german_germany\" );  \n  \n   basic_stringstream< char > psz;  \n   psz << use_facet<moneypunct<char, 1> >(loc).curr_symbol() << \"-1.000,56\";  \n   basic_stringstream< char > psz2;  \n   psz2 << \"-100056\" << use_facet<moneypunct<char, 1> >(loc).curr_symbol();  \n  \n   ios_base::iostate st = 0;  \n   long double fVal;  \n  \n   psz.flags( psz.flags( )|ios_base::showbase );   \n   // Which forced the READING the currency symbol  \n   psz.imbue(loc);  \n   use_facet < money_get < char > >( loc ).  \n      get( basic_istream<char>::_Iter( psz.rdbuf( ) ),     \n           basic_istream<char>::_Iter( 0 ), true, psz, st, fVal );  \n  \n   if ( st & ios_base::failbit )  \n      cout << \"money_get(\" << psz.str( ) << \", intl = 1) FAILED\"  \n           << endl;  \n   else  \n      cout << \"money_get(\" << psz.str( ) << \", intl = 1) = \"   \n           << fVal/100.0 << endl;  \n  \n   use_facet < money_get < char > >( loc ).  \n      get(basic_istream<char>::_Iter(psz2.rdbuf( )),     \n          basic_istream<char>::_Iter(0), false, psz2, st, fVal);  \n  \n   if ( st & ios_base::failbit )  \n      cout << \"money_get(\" << psz2.str( ) << \", intl = 0) FAILED\"   \n           << endl;  \n   else  \n      cout << \"money_get(\" << psz2.str( ) << \", intl = 0) = \"   \n           << fVal/100.0 << endl;  \n};  \n```  \n  \n##  <a name=\"money_get__iter_type\"></a>  money_get::iter_type  \n A type that describes an input iterator.  \n  \n```\ntypedef InputIterator iter_type;\n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **InputIterator**.  \n  \n##  <a name=\"money_get__money_get\"></a>  money_get::money_get  \n The constructor for objects of type `money_get` that are used to extract numerical values from sequences representing monetary values.  \n  \n```\nexplicit money_get(size_t _Refs = 0);\n```  \n  \n### Parameters  \n `_Refs`  \n Integer value used to specify the type of memory management for the object.  \n  \n### Remarks  \n The possible values for the `_Refs` parameter and their significance are:  \n  \n-   0: The lifetime of the object is managed by the locales that contain it.  \n  \n-   1: The lifetime of the object must be manually managed.  \n  \n-   \\> 0: These values are not defined.  \n  \n No direct examples are possible, because the destructor is protected.  \n  \n The constructor initializes its base object with **locale::**[facet](../standard-library/locale-class.md#facet_class)( **_***Refs*).  \n  \n##  <a name=\"money_get__string_type\"></a>  money_get::string_type  \n A type that describes a string containing characters of type **CharType**.  \n  \n```\ntypedef basic_string<CharType, Traits, Allocator> string_type;\n```  \n  \n### Remarks  \n The type describes a specialization of template class [basic_string](../standard-library/basic-string-class.md).  \n  \n## See Also  \n [\\<locale>](../standard-library/locale.md)   \n [facet Class](../standard-library/locale-class.md#facet_class)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n\n\n"}