{"nodes":[{"pos":[12,48],"content":"Function Call (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Function Call (C++) | Microsoft Docs","pos":[0,36]}]},{"content":"Function Call (C++)","pos":[858,877]},{"content":"The function-call operator, invoked using parentheses, is a binary operator.","pos":[878,954]},{"content":"Syntax","pos":[963,969]},{"content":"Remarks","pos":[1037,1044]},{"content":"In this context, <ph id=\"ph1\">`primary-expression`</ph> is the first operand, and <ph id=\"ph2\">`expression-list`</ph>, a possibly empty list of arguments, is the second operand.","pos":[1048,1189],"source":"In this context, `primary-expression` is the first operand, and `expression-list`, a possibly empty list of arguments, is the second operand."},{"content":"The function-call operator is used for operations that require a number of parameters.","pos":[1190,1276]},{"content":"This works because <ph id=\"ph1\">`expression-list`</ph> is a list instead of a single operand.","pos":[1277,1352],"source":" This works because `expression-list` is a list instead of a single operand."},{"content":"The function-call operator must be a nonstatic member function.","pos":[1353,1416]},{"content":"The function-call operator, when overloaded, does not modify how functions are called; rather, it modifies how the operator is to be interpreted when applied to objects of a given class type.","pos":[1423,1614]},{"content":"For example, the following code would usually be meaningless:","pos":[1615,1676]},{"content":"Given an appropriate overloaded function-call operator, however, this syntax can be used to offset the <ph id=\"ph1\">`x`</ph> coordinate 3 units and the <ph id=\"ph2\">`y`</ph> coordinate 2 units.","pos":[1724,1881],"source":"Given an appropriate overloaded function-call operator, however, this syntax can be used to offset the `x` coordinate 3 units and the `y` coordinate 2 units."},{"content":"The following code shows such a definition:","pos":[1882,1925]},{"content":"Note that the function-call operator is applied to the name of an object, not the name of a function.","pos":[2209,2310]},{"content":"You can also overload the function call operator using a pointer to a function (rather than the function itself).","pos":[2317,2430]},{"content":"See Also","pos":[2654,2662]},{"content":"Operator Overloading","pos":[2667,2687]}],"content":"---\ntitle: \"Function Call (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"function calls, C++ functions\"\n  - \"functions [C++], calling\"\n  - \"operator overloading, function calls\"\n  - \"function overloading, function-call operator\"\n  - \"function calls, operator\"\n  - \"operators [C++], overloading\"\n  - \"operator overloading, examples\"\n  - \"function call operator ( )\"\nms.assetid: 5094254a-045b-46f7-8653-69bc91e80dce\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Function Call (C++)\nThe function-call operator, invoked using parentheses, is a binary operator.  \n  \n## Syntax  \n  \n```  \n  \nprimary-expression ( expression-list )  \n```  \n  \n## Remarks  \n In this context, `primary-expression` is the first operand, and `expression-list`, a possibly empty list of arguments, is the second operand. The function-call operator is used for operations that require a number of parameters. This works because `expression-list` is a list instead of a single operand. The function-call operator must be a nonstatic member function.  \n  \n The function-call operator, when overloaded, does not modify how functions are called; rather, it modifies how the operator is to be interpreted when applied to objects of a given class type. For example, the following code would usually be meaningless:  \n  \n```  \nPoint pt;  \npt( 3, 2 );  \n```  \n  \n Given an appropriate overloaded function-call operator, however, this syntax can be used to offset the `x` coordinate 3 units and the `y` coordinate 2 units. The following code shows such a definition:  \n  \n```  \n// function_call.cpp  \nclass Point  \n{  \npublic:  \n    Point() { _x = _y = 0; }  \n    Point &operator()( int dx, int dy )  \n        { _x += dx; _y += dy; return *this; }  \nprivate:  \n    int _x, _y;  \n};  \n  \nint main()  \n{  \n   Point pt;  \n   pt( 3, 2 );  \n}  \n```  \n  \n Note that the function-call operator is applied to the name of an object, not the name of a function.  \n  \n You can also overload the function call operator using a pointer to a function (rather than the function itself).  \n  \n```cpp  \ntypedef void(*ptf)();  \nvoid func()  \n{  \n}  \nstruct S  \n{  \n   operator ptf()  \n   {  \n      return func;  \n   }  \n};  \n  \nint main()  \n{  \n   S s;  \n   s();//operates as s.operator ptf()()  \n}  \n```  \n  \n## See Also  \n [Operator Overloading](../cpp/operator-overloading.md)"}