{"nodes":[{"pos":[12,42],"content":"Context Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Context Class | Microsoft Docs","pos":[0,30]}]},{"pos":[613,626],"content":"Context Class","linkify":"Context Class","nodes":[{"content":"Context Class","pos":[0,13]}]},{"content":"Represents an abstraction for an execution context.","pos":[627,678]},{"pos":[687,693],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[730,737],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[747,769],"content":"Protected Constructors","linkify":"Protected Constructors","nodes":[{"content":"Protected Constructors","pos":[0,22]}]},{"content":"Name","pos":[776,780]},{"content":"Description","pos":[781,792]},{"pos":[830,867],"content":"<bpt id=\"p1\">[</bpt>Context::~Context Destructor<ept id=\"p1\">](#dtor)</ept>","source":"[Context::~Context Destructor](#dtor)"},{"pos":[879,893],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[900,904]},{"content":"Description","pos":[905,916]},{"pos":[954,985],"content":"<bpt id=\"p1\">[</bpt>Context::Block Method<ept id=\"p1\">](#block)</ept>","source":"[Context::Block Method](#block)"},{"content":"Blocks the current context.","pos":[986,1013]},{"pos":[1018,1067],"content":"<bpt id=\"p1\">[</bpt>Context::CurrentContext Method<ept id=\"p1\">](#currentcontext)</ept>","source":"[Context::CurrentContext Method](#currentcontext)"},{"content":"Returns a pointer to the current context.","pos":[1068,1109]},{"pos":[1114,1145],"content":"<bpt id=\"p1\">[</bpt>Context::GetId Method<ept id=\"p1\">](#getid)</ept>","source":"[Context::GetId Method](#getid)"},{"content":"Returns an identifier for the context that is unique within the scheduler to which the context belongs.","pos":[1146,1249]},{"pos":[1254,1311],"content":"<bpt id=\"p1\">[</bpt>Context::GetScheduleGroupId Method<ept id=\"p1\">](#getschedulegroupid)</ept>","source":"[Context::GetScheduleGroupId Method](#getschedulegroupid)"},{"content":"Returns an identifier for the schedule group that the context is currently working on.","pos":[1312,1398]},{"pos":[1403,1466],"content":"<bpt id=\"p1\">[</bpt>Context::GetVirtualProcessorId Method<ept id=\"p1\">](#getvirtualprocessorid)</ept>","source":"[Context::GetVirtualProcessorId Method](#getvirtualprocessorid)"},{"content":"Returns an identifier for the virtual processor that the context is currently executing on.","pos":[1467,1558]},{"pos":[1563,1588],"content":"<bpt id=\"p1\">[</bpt>Context::Id Method<ept id=\"p1\">](#id)</ept>","source":"[Context::Id Method](#id)"},{"content":"Returns an identifier for the current context that is unique within the scheduler to which the current context belongs.","pos":[1589,1708]},{"pos":[1713,1798],"content":"<bpt id=\"p1\">[</bpt>Context::IsCurrentTaskCollectionCanceling Method<ept id=\"p1\">](#iscurrenttaskcollectioncanceling)</ept>","source":"[Context::IsCurrentTaskCollectionCanceling Method](#iscurrenttaskcollectioncanceling)"},{"content":"Returns an indication of whether the task collection which is currently executing inline on the current context is in the midst of an active cancellation (or will be shortly).","pos":[1799,1974]},{"pos":[1979,2044],"content":"<bpt id=\"p1\">[</bpt>Context::IsSynchronouslyBlocked Method<ept id=\"p1\">](#issynchronouslyblocked)</ept>","source":"[Context::IsSynchronouslyBlocked Method](#issynchronouslyblocked)"},{"content":"Determines whether or not the context is synchronously blocked.","pos":[2045,2108]},{"content":"A context is considered to be synchronously blocked if it explicitly performed an action which led to blocking.","pos":[2109,2220]},{"pos":[2225,2272],"content":"<bpt id=\"p1\">[</bpt>Context::Oversubscribe Method<ept id=\"p1\">](#oversubscribe)</ept>","source":"[Context::Oversubscribe Method](#oversubscribe)"},{"content":"Injects an additional virtual processor into a scheduler for the duration of a block of code when invoked on a context executing on one of the virtual processors in that scheduler.","pos":[2273,2453]},{"pos":[2458,2509],"content":"<bpt id=\"p1\">[</bpt>Context::ScheduleGroupId Method<ept id=\"p1\">](#schedulegroupid)</ept>","source":"[Context::ScheduleGroupId Method](#schedulegroupid)"},{"content":"Returns an identifier for the schedule group that the current context is working on.","pos":[2510,2594]},{"pos":[2599,2634],"content":"<bpt id=\"p1\">[</bpt>Context::Unblock Method<ept id=\"p1\">](#unblock)</ept>","source":"[Context::Unblock Method](#unblock)"},{"content":"Unblocks the context and causes it to become runnable.","pos":[2635,2689]},{"pos":[2694,2751],"content":"<bpt id=\"p1\">[</bpt>Context::VirtualProcessorId Method<ept id=\"p1\">](#virtualprocessorid)</ept>","source":"[Context::VirtualProcessorId Method](#virtualprocessorid)"},{"content":"Returns an identifier for the virtual processor that the current context is executing on.","pos":[2752,2841]},{"pos":[2846,2877],"content":"<bpt id=\"p1\">[</bpt>Context::Yield Method<ept id=\"p1\">](#yield)</ept>","source":"[Context::Yield Method](#yield)"},{"content":"Yields execution so that another context can execute.","pos":[2878,2931]},{"content":"If no other context is available to yield to, the scheduler can yield to another operating system thread.","pos":[2932,3037]},{"pos":[3047,3054],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Concurrency Runtime scheduler (see <bpt id=\"p1\">[</bpt>Scheduler<ept id=\"p1\">](scheduler-class.md)</ept>) uses execution contexts to execute the work queued to it by your application.","pos":[3058,3207],"source":"The Concurrency Runtime scheduler (see [Scheduler](scheduler-class.md)) uses execution contexts to execute the work queued to it by your application."},{"content":"A Win32 thread is an example of an execution context on a Windows operating system.","pos":[3208,3291]},{"content":"At any time, the concurrency level of a scheduler is equal to the number of virtual processors granted to it by the Resource Manager.","pos":[3298,3431]},{"content":"A virtual processor is an abstraction for a processing resource and maps to a hardware thread on the underlying system.","pos":[3432,3551]},{"content":"Only a single scheduler context can execute on a virtual processor at a given time.","pos":[3552,3635]},{"content":"The scheduler is cooperative in nature and an executing context can yield its virtual processor to a different context at any time if it wishes to enter a wait state.","pos":[3642,3808]},{"content":"When its wait it satisfied, it cannot resume until an available virtual processor from the scheduler begins executing it.","pos":[3809,3930]},{"pos":[3939,3960],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3982,3994],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3998,4018],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concrt.h","source":"**Header:** concrt.h"},{"pos":[4025,4051],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[4061,4104],"content":"<bpt id=\"p1\">&lt;a name=\"block\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::Block Method","linkify":"<a name=\"block\"></a>  Context::Block Method","source":"<a name=\"block\"></a>  Context::Block Method"},{"content":"Blocks the current context.","pos":[4108,4135]},{"pos":[4187,4194],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method will result in the process' default scheduler being created and/or attached to the calling context if there is no scheduler currently associated with the calling context.","pos":[4198,4380]},{"content":"If the calling context is running on a virtual processor, the virtual processor will find another runnable context to execute or can potentially create a new one.","pos":[4387,4549]},{"content":"After the <ph id=\"ph1\">`Block`</ph> method has been called or will be called, you must pair it with a call to the <bpt id=\"p1\">[</bpt>Unblock<ept id=\"p1\">](#unblock)</ept> method from another execution context in order for it to run again.","pos":[4556,4739],"source":"After the `Block` method has been called or will be called, you must pair it with a call to the [Unblock](#unblock) method from another execution context in order for it to run again."},{"content":"Be aware that there is a critical period between the point where your code publishes its context for another thread to be able to call the <ph id=\"ph1\">`Unblock`</ph> method and the point where the actual method call to <ph id=\"ph2\">`Block`</ph> is made.","pos":[4740,4958],"source":" Be aware that there is a critical period between the point where your code publishes its context for another thread to be able to call the `Unblock` method and the point where the actual method call to `Block` is made."},{"content":"During this period, you must not call any method which can in turn block and unblock for its own reasons (for example, acquiring a lock).","pos":[4959,5096]},{"content":"Calls to the <ph id=\"ph1\">`Block`</ph> and <ph id=\"ph2\">`Unblock`</ph> method do not track the reason for the blocking and unblocking.","pos":[5097,5195],"source":" Calls to the `Block` and `Unblock` method do not track the reason for the blocking and unblocking."},{"content":"Only one object should have ownership of a <ph id=\"ph1\">`Block`</ph><ph id=\"ph2\">- </ph><ph id=\"ph3\">`Unblock`</ph> pair.","pos":[5196,5263],"source":" Only one object should have ownership of a `Block`- `Unblock` pair."},{"pos":[5270,5411],"content":"This method can throw a variety of exceptions, including <bpt id=\"p1\">[</bpt>scheduler_resource_allocation_error<ept id=\"p1\">](scheduler-resource-allocation-error-class.md)</ept>.","source":"This method can throw a variety of exceptions, including [scheduler_resource_allocation_error](scheduler-resource-allocation-error-class.md)."},{"pos":[5421,5470],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::~Context Destructor","linkify":"<a name=\"dtor\"></a>  Context::~Context Destructor","source":"<a name=\"dtor\"></a>  Context::~Context Destructor"},{"pos":[5513,5574],"content":"<bpt id=\"p1\">&lt;a name=\"currentcontext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::CurrentContext Method","linkify":"<a name=\"currentcontext\"></a>  Context::CurrentContext Method","source":"<a name=\"currentcontext\"></a>  Context::CurrentContext Method"},{"content":"Returns a pointer to the current context.","pos":[5578,5619]},{"pos":[5684,5696],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the current context.","pos":[5700,5733]},{"pos":[5743,5750],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method will result in the process' default scheduler being created and/or attached to the calling context if there is no scheduler currently associated with the calling context.","pos":[5754,5936]},{"pos":[5946,5989],"content":"<bpt id=\"p1\">&lt;a name=\"getid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::GetId Method","linkify":"<a name=\"getid\"></a>  Context::GetId Method","source":"<a name=\"getid\"></a>  Context::GetId Method"},{"content":"Returns an identifier for the context that is unique within the scheduler to which the context belongs.","pos":[5993,6096]},{"pos":[6159,6171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An identifier for the context that is unique within the scheduler to which the context belongs.","pos":[6175,6270]},{"pos":[6280,6349],"content":"<bpt id=\"p1\">&lt;a name=\"getschedulegroupid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::GetScheduleGroupId Method","linkify":"<a name=\"getschedulegroupid\"></a>  Context::GetScheduleGroupId Method","source":"<a name=\"getschedulegroupid\"></a>  Context::GetScheduleGroupId Method"},{"content":"Returns an identifier for the schedule group that the context is currently working on.","pos":[6353,6439]},{"pos":[6515,6527],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An identifier for the schedule group the context is currently working on.","pos":[6531,6604]},{"pos":[6614,6621],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The return value from this method is an instantaneous sampling of the schedule group that the context is executing on.","pos":[6625,6743]},{"content":"If this method is called on a context other than the current context, the value can be stale the moment it is returned and cannot be relied upon.","pos":[6744,6889]},{"content":"Typically, this method is used for debugging or tracing purposes only.","pos":[6890,6960]},{"pos":[6970,7045],"content":"<bpt id=\"p1\">&lt;a name=\"getvirtualprocessorid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::GetVirtualProcessorId Method","linkify":"<a name=\"getvirtualprocessorid\"></a>  Context::GetVirtualProcessorId Method","source":"<a name=\"getvirtualprocessorid\"></a>  Context::GetVirtualProcessorId Method"},{"content":"Returns an identifier for the virtual processor that the context is currently executing on.","pos":[7049,7140]},{"pos":[7219,7231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7235,7407],"content":"If the context is currently executing on a virtual processor, an identifier for the virtual processor that the context is currently executing on; otherwise, the value <ph id=\"ph1\">`-1`</ph>.","source":"If the context is currently executing on a virtual processor, an identifier for the virtual processor that the context is currently executing on; otherwise, the value `-1`."},{"pos":[7417,7424],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The return value from this method is an instantaneous sampling of the virtual processor that the context is executing on.","pos":[7428,7549]},{"content":"This value can be stale the moment it is returned and cannot be relied upon.","pos":[7550,7626]},{"content":"Typically, this method is used for debugging or tracing purposes only.","pos":[7627,7697]},{"pos":[7707,7744],"content":"<bpt id=\"p1\">&lt;a name=\"id\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::Id Method","linkify":"<a name=\"id\"></a>  Context::Id Method","source":"<a name=\"id\"></a>  Context::Id Method"},{"content":"Returns an identifier for the current context that is unique within the scheduler to which the current context belongs.","pos":[7748,7867]},{"pos":[7924,7936],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7940,8129],"content":"If the current context is attached to a scheduler, an identifier for the current context that is unique within the scheduler to which the current context belongs; otherwise, the value <ph id=\"ph1\">`-1`</ph>.","source":"If the current context is attached to a scheduler, an identifier for the current context that is unique within the scheduler to which the current context belongs; otherwise, the value `-1`."},{"pos":[8139,8236],"content":"<bpt id=\"p1\">&lt;a name=\"iscurrenttaskcollectioncanceling\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::IsCurrentTaskCollectionCanceling Method","linkify":"<a name=\"iscurrenttaskcollectioncanceling\"></a>  Context::IsCurrentTaskCollectionCanceling Method","source":"<a name=\"iscurrenttaskcollectioncanceling\"></a>  Context::IsCurrentTaskCollectionCanceling Method"},{"content":"Returns an indication of whether the task collection which is currently executing inline on the current context is in the midst of an active cancellation (or will be shortly).","pos":[8240,8415]},{"pos":[8494,8506],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8510,8755],"content":"If a scheduler is attached to the calling context and a task group is executing a task inline on that context, an indication of whether that task group is in the midst of an active cancellation (or will be shortly); otherwise, the value <ph id=\"ph1\">`false`</ph>.","source":"If a scheduler is attached to the calling context and a task group is executing a task inline on that context, an indication of whether that task group is in the midst of an active cancellation (or will be shortly); otherwise, the value `false`."},{"pos":[8765,8842],"content":"<bpt id=\"p1\">&lt;a name=\"issynchronouslyblocked\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::IsSynchronouslyBlocked Method","linkify":"<a name=\"issynchronouslyblocked\"></a>  Context::IsSynchronouslyBlocked Method","source":"<a name=\"issynchronouslyblocked\"></a>  Context::IsSynchronouslyBlocked Method"},{"content":"Determines whether or not the context is synchronously blocked.","pos":[8846,8909]},{"content":"A context is considered to be synchronously blocked if it explicitly performed an action which led to blocking.","pos":[8910,9021]},{"pos":[9093,9105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Whether the context is synchronously blocked.","pos":[9109,9154]},{"pos":[9164,9171],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A context is considered to be synchronously blocked if it explicitly performed an action which led to blocking.","pos":[9175,9286]},{"content":"On the thread scheduler, this would indicate a direct call to the <ph id=\"ph1\">`Context::Block`</ph> method or a synchronization object which was built using the <ph id=\"ph2\">`Context::Block`</ph> method.","pos":[9287,9455],"source":" On the thread scheduler, this would indicate a direct call to the `Context::Block` method or a synchronization object which was built using the `Context::Block` method."},{"content":"The return value from this method is an instantaneous sample of whether the context is synchronously blocked.","pos":[9462,9571]},{"content":"This value may be stale the moment it is returned and can only be used under very specific circumstances.","pos":[9572,9677]},{"pos":[9687,9752],"content":"<bpt id=\"p1\">&lt;a name=\"operator_delete\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::operator delete Operator","linkify":"<a name=\"operator_delete\"></a>  Context::operator delete Operator","source":"<a name=\"operator_delete\"></a>  Context::operator delete Operator"},{"content":"A <ph id=\"ph1\">`Context`</ph> object is destroyed internally by the runtime.","pos":[9756,9814],"source":"A `Context` object is destroyed internally by the runtime."},{"content":"It can not be explicitly deleted.","pos":[9815,9848]},{"pos":[9909,9919],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the object to be deleted.","pos":[9937,9975]},{"pos":[9985,10044],"content":"<bpt id=\"p1\">&lt;a name=\"oversubscribe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::Oversubscribe Method","linkify":"<a name=\"oversubscribe\"></a>  Context::Oversubscribe Method","source":"<a name=\"oversubscribe\"></a>  Context::Oversubscribe Method"},{"content":"Injects an additional virtual processor into a scheduler for the duration of a block of code when invoked on a context executing on one of the virtual processors in that scheduler.","pos":[10048,10228]},{"pos":[10315,10325],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"If <ph id=\"ph1\">`true`</ph>, an indication that an extra virtual processor should be added for the duration of the oversubscription.","pos":[10357,10471],"source":" If `true`, an indication that an extra virtual processor should be added for the duration of the oversubscription."},{"content":"If <ph id=\"ph1\">`false`</ph>, an indication that the oversubscription should end and the previously added virtual processor should be removed.","pos":[10472,10596],"source":" If `false`, an indication that the oversubscription should end and the previously added virtual processor should be removed."},{"pos":[10606,10669],"content":"<bpt id=\"p1\">&lt;a name=\"schedulegroupid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::ScheduleGroupId Method","linkify":"<a name=\"schedulegroupid\"></a>  Context::ScheduleGroupId Method","source":"<a name=\"schedulegroupid\"></a>  Context::ScheduleGroupId Method"},{"content":"Returns an identifier for the schedule group that the current context is working on.","pos":[10673,10757]},{"pos":[10827,10839],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10843,11030],"content":"If the current context is attached to a scheduler and working on a schedule group, an identifier for the scheduler group that the current context is working on; otherwise, the value <ph id=\"ph1\">`-1`</ph>.","source":"If the current context is attached to a scheduler and working on a schedule group, an identifier for the scheduler group that the current context is working on; otherwise, the value `-1`."},{"pos":[11040,11087],"content":"<bpt id=\"p1\">&lt;a name=\"unblock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::Unblock Method","linkify":"<a name=\"unblock\"></a>  Context::Unblock Method","source":"<a name=\"unblock\"></a>  Context::Unblock Method"},{"content":"Unblocks the context and causes it to become runnable.","pos":[11091,11145]},{"pos":[11196,11203],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It is perfectly legal for a call to the <ph id=\"ph1\">`Unblock`</ph> method to come before a corresponding call to the <bpt id=\"p1\">[</bpt>Block<ept id=\"p1\">](#block)</ept> method.","pos":[11207,11330],"source":"It is perfectly legal for a call to the `Unblock` method to come before a corresponding call to the [Block](#block) method."},{"content":"As long as calls to the <ph id=\"ph1\">`Block`</ph> and <ph id=\"ph2\">`Unblock`</ph> methods are properly paired, the runtime properly handles the natural race of either ordering.","pos":[11331,11471],"source":" As long as calls to the `Block` and `Unblock` methods are properly paired, the runtime properly handles the natural race of either ordering."},{"content":"An <ph id=\"ph1\">`Unblock`</ph> call coming before a <ph id=\"ph2\">`Block`</ph> call simply negates the effect of the <ph id=\"ph3\">`Block`</ph> call.","pos":[11472,11565],"source":" An `Unblock` call coming before a `Block` call simply negates the effect of the `Block` call."},{"content":"There are several exceptions which can be thrown from this method.","pos":[11572,11638]},{"content":"If a context attempts to call the <ph id=\"ph1\">`Unblock`</ph> method on itself, a <bpt id=\"p1\">[</bpt>context_self_unblock<ept id=\"p1\">](context-self-unblock-class.md)</ept> exception will be thrown.","pos":[11639,11782],"source":" If a context attempts to call the `Unblock` method on itself, a [context_self_unblock](context-self-unblock-class.md) exception will be thrown."},{"content":"If calls to <ph id=\"ph1\">`Block`</ph> and <ph id=\"ph2\">`Unblock`</ph> are not properly paired (for example, two calls to <ph id=\"ph3\">`Unblock`</ph> are made for a context which is currently running), a <bpt id=\"p1\">[</bpt>context_unblock_unbalanced<ept id=\"p1\">](context-unblock-unbalanced-class.md)</ept> exception will be thrown.","pos":[11783,12023],"source":" If calls to `Block` and `Unblock` are not properly paired (for example, two calls to `Unblock` are made for a context which is currently running), a [context_unblock_unbalanced](context-unblock-unbalanced-class.md) exception will be thrown."},{"content":"Be aware that there is a critical period between the point where your code publishes its context for another thread to be able to call the <ph id=\"ph1\">`Unblock`</ph> method and the point where the actual method call to <ph id=\"ph2\">`Block`</ph> is made.","pos":[12030,12248],"source":"Be aware that there is a critical period between the point where your code publishes its context for another thread to be able to call the `Unblock` method and the point where the actual method call to `Block` is made."},{"content":"During this period, you must not call any method which can in turn block and unblock for its own reasons (for example, acquiring a lock).","pos":[12249,12386]},{"content":"Calls to the <ph id=\"ph1\">`Block`</ph> and <ph id=\"ph2\">`Unblock`</ph> method do not track the reason for the blocking and unblocking.","pos":[12387,12485],"source":" Calls to the `Block` and `Unblock` method do not track the reason for the blocking and unblocking."},{"content":"Only one object should have ownership of a <ph id=\"ph1\">`Block`</ph> and <ph id=\"ph2\">`Unblock`</ph> pair.","pos":[12486,12556],"source":" Only one object should have ownership of a `Block` and `Unblock` pair."},{"pos":[12566,12635],"content":"<bpt id=\"p1\">&lt;a name=\"virtualprocessorid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::VirtualProcessorId Method","linkify":"<a name=\"virtualprocessorid\"></a>  Context::VirtualProcessorId Method","source":"<a name=\"virtualprocessorid\"></a>  Context::VirtualProcessorId Method"},{"content":"Returns an identifier for the virtual processor that the current context is executing on.","pos":[12639,12728]},{"pos":[12801,12813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12817,12976],"content":"If the current context is attached to a scheduler, an identifier for the virtual processor that the current context is executing on; otherwise, the value <ph id=\"ph1\">`-1`</ph>.","source":"If the current context is attached to a scheduler, an identifier for the virtual processor that the current context is executing on; otherwise, the value `-1`."},{"pos":[12986,12993],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The return value from this method is an instantaneous sampling of the virtual processor that the current context is executing on.","pos":[12997,13126]},{"content":"This value can be stale the moment it is returned and cannot be relied upon.","pos":[13127,13203]},{"content":"Typically, this method is used for debugging or tracing purposes only.","pos":[13204,13274]},{"pos":[13284,13327],"content":"<bpt id=\"p1\">&lt;a name=\"yield\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::Yield Method","linkify":"<a name=\"yield\"></a>  Context::Yield Method","source":"<a name=\"yield\"></a>  Context::Yield Method"},{"content":"Yields execution so that another context can execute.","pos":[13331,13384]},{"content":"If no other context is available to yield to, the scheduler can yield to another operating system thread.","pos":[13385,13490]},{"pos":[13542,13549],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method will result in the process' default scheduler being created and/or attached to the calling context if there is no scheduler currently associated with the calling context.","pos":[13553,13735]},{"pos":[13745,13806],"content":"<bpt id=\"p1\">&lt;a name=\"yieldexecution\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  Context::YieldExecution Method","linkify":"<a name=\"yieldexecution\"></a>  Context::YieldExecution Method","source":"<a name=\"yieldexecution\"></a>  Context::YieldExecution Method"},{"content":"Yields execution so that another context can execute.","pos":[13810,13863]},{"content":"If no other context is available to yield to, the scheduler can yield to another operating system thread.","pos":[13864,13969]},{"pos":[14030,14037],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method will result in the process' default scheduler being created and/or attached to the calling context if there is no scheduler currently associated with the calling context.","pos":[14041,14223]},{"pos":[14230,14418],"content":"This function is new in <ph id=\"ph1\">[!INCLUDE[vs_dev14](../../../ide/includes/vs_dev14_md.md)]</ph> and is identical to the <bpt id=\"p1\">[</bpt>Yield<ept id=\"p1\">](#yield)</ept> function but does not conflict with the Yield macro in Windows.h.","source":"This function is new in [!INCLUDE[vs_dev14](../../../ide/includes/vs_dev14_md.md)] and is identical to the [Yield](#yield) function but does not conflict with the Yield macro in Windows.h."},{"pos":[14427,14435],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept><ph id=\"ph1\"> </ph>","pos":[14439,14489],"source":"[concurrency Namespace](concurrency-namespace.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Scheduler Class<ept id=\"p1\">](scheduler-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[14492,14531],"source":" [Scheduler Class](scheduler-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Task Scheduler<ept id=\"p1\">](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)</ept>","pos":[14534,14615],"source":" [Task Scheduler](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)"}],"content":"---\ntitle: \"Context Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concrt/concurrency::Context\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Context class\"\nms.assetid: c0d553f3-961d-4ecd-9a29-4fa4351673b8\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Context Class\nRepresents an abstraction for an execution context.  \n  \n## Syntax  \n  \n```\nclass Context;\n```  \n  \n## Members  \n  \n### Protected Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[Context::~Context Destructor](#dtor)||  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[Context::Block Method](#block)|Blocks the current context.|  \n|[Context::CurrentContext Method](#currentcontext)|Returns a pointer to the current context.|  \n|[Context::GetId Method](#getid)|Returns an identifier for the context that is unique within the scheduler to which the context belongs.|  \n|[Context::GetScheduleGroupId Method](#getschedulegroupid)|Returns an identifier for the schedule group that the context is currently working on.|  \n|[Context::GetVirtualProcessorId Method](#getvirtualprocessorid)|Returns an identifier for the virtual processor that the context is currently executing on.|  \n|[Context::Id Method](#id)|Returns an identifier for the current context that is unique within the scheduler to which the current context belongs.|  \n|[Context::IsCurrentTaskCollectionCanceling Method](#iscurrenttaskcollectioncanceling)|Returns an indication of whether the task collection which is currently executing inline on the current context is in the midst of an active cancellation (or will be shortly).|  \n|[Context::IsSynchronouslyBlocked Method](#issynchronouslyblocked)|Determines whether or not the context is synchronously blocked. A context is considered to be synchronously blocked if it explicitly performed an action which led to blocking.|  \n|[Context::Oversubscribe Method](#oversubscribe)|Injects an additional virtual processor into a scheduler for the duration of a block of code when invoked on a context executing on one of the virtual processors in that scheduler.|  \n|[Context::ScheduleGroupId Method](#schedulegroupid)|Returns an identifier for the schedule group that the current context is working on.|  \n|[Context::Unblock Method](#unblock)|Unblocks the context and causes it to become runnable.|  \n|[Context::VirtualProcessorId Method](#virtualprocessorid)|Returns an identifier for the virtual processor that the current context is executing on.|  \n|[Context::Yield Method](#yield)|Yields execution so that another context can execute. If no other context is available to yield to, the scheduler can yield to another operating system thread.|  \n  \n## Remarks  \n The Concurrency Runtime scheduler (see [Scheduler](scheduler-class.md)) uses execution contexts to execute the work queued to it by your application. A Win32 thread is an example of an execution context on a Windows operating system.  \n  \n At any time, the concurrency level of a scheduler is equal to the number of virtual processors granted to it by the Resource Manager. A virtual processor is an abstraction for a processing resource and maps to a hardware thread on the underlying system. Only a single scheduler context can execute on a virtual processor at a given time.  \n  \n The scheduler is cooperative in nature and an executing context can yield its virtual processor to a different context at any time if it wishes to enter a wait state. When its wait it satisfied, it cannot resume until an available virtual processor from the scheduler begins executing it.  \n  \n## Inheritance Hierarchy  \n `Context`  \n  \n## Requirements  \n **Header:** concrt.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"block\"></a>  Context::Block Method  \n Blocks the current context.  \n  \n```\nstatic void __cdecl Block();\n```  \n  \n### Remarks  \n This method will result in the process' default scheduler being created and/or attached to the calling context if there is no scheduler currently associated with the calling context.  \n  \n If the calling context is running on a virtual processor, the virtual processor will find another runnable context to execute or can potentially create a new one.  \n  \n After the `Block` method has been called or will be called, you must pair it with a call to the [Unblock](#unblock) method from another execution context in order for it to run again. Be aware that there is a critical period between the point where your code publishes its context for another thread to be able to call the `Unblock` method and the point where the actual method call to `Block` is made. During this period, you must not call any method which can in turn block and unblock for its own reasons (for example, acquiring a lock). Calls to the `Block` and `Unblock` method do not track the reason for the blocking and unblocking. Only one object should have ownership of a `Block`- `Unblock` pair.  \n  \n This method can throw a variety of exceptions, including [scheduler_resource_allocation_error](scheduler-resource-allocation-error-class.md).  \n  \n##  <a name=\"dtor\"></a>  Context::~Context Destructor  \n  \n```\nvirtual ~Context();\n```  \n  \n##  <a name=\"currentcontext\"></a>  Context::CurrentContext Method  \n Returns a pointer to the current context.  \n  \n```\nstatic Context* __cdecl CurrentContext();\n```  \n  \n### Return Value  \n A pointer to the current context.  \n  \n### Remarks  \n This method will result in the process' default scheduler being created and/or attached to the calling context if there is no scheduler currently associated with the calling context.  \n  \n##  <a name=\"getid\"></a>  Context::GetId Method  \n Returns an identifier for the context that is unique within the scheduler to which the context belongs.  \n  \n```\nvirtual unsigned int GetId() const = 0;\n```  \n  \n### Return Value  \n An identifier for the context that is unique within the scheduler to which the context belongs.  \n  \n##  <a name=\"getschedulegroupid\"></a>  Context::GetScheduleGroupId Method  \n Returns an identifier for the schedule group that the context is currently working on.  \n  \n```\nvirtual unsigned int GetScheduleGroupId() const = 0;\n```  \n  \n### Return Value  \n An identifier for the schedule group the context is currently working on.  \n  \n### Remarks  \n The return value from this method is an instantaneous sampling of the schedule group that the context is executing on. If this method is called on a context other than the current context, the value can be stale the moment it is returned and cannot be relied upon. Typically, this method is used for debugging or tracing purposes only.  \n  \n##  <a name=\"getvirtualprocessorid\"></a>  Context::GetVirtualProcessorId Method  \n Returns an identifier for the virtual processor that the context is currently executing on.  \n  \n```\nvirtual unsigned int GetVirtualProcessorId() const = 0;\n```  \n  \n### Return Value  \n If the context is currently executing on a virtual processor, an identifier for the virtual processor that the context is currently executing on; otherwise, the value `-1`.  \n  \n### Remarks  \n The return value from this method is an instantaneous sampling of the virtual processor that the context is executing on. This value can be stale the moment it is returned and cannot be relied upon. Typically, this method is used for debugging or tracing purposes only.  \n  \n##  <a name=\"id\"></a>  Context::Id Method  \n Returns an identifier for the current context that is unique within the scheduler to which the current context belongs.  \n  \n```\nstatic unsigned int __cdecl Id();\n```  \n  \n### Return Value  \n If the current context is attached to a scheduler, an identifier for the current context that is unique within the scheduler to which the current context belongs; otherwise, the value `-1`.  \n  \n##  <a name=\"iscurrenttaskcollectioncanceling\"></a>  Context::IsCurrentTaskCollectionCanceling Method  \n Returns an indication of whether the task collection which is currently executing inline on the current context is in the midst of an active cancellation (or will be shortly).  \n  \n```\nstatic bool __cdecl IsCurrentTaskCollectionCanceling();\n```  \n  \n### Return Value  \n If a scheduler is attached to the calling context and a task group is executing a task inline on that context, an indication of whether that task group is in the midst of an active cancellation (or will be shortly); otherwise, the value `false`.  \n  \n##  <a name=\"issynchronouslyblocked\"></a>  Context::IsSynchronouslyBlocked Method  \n Determines whether or not the context is synchronously blocked. A context is considered to be synchronously blocked if it explicitly performed an action which led to blocking.  \n  \n```\nvirtual bool IsSynchronouslyBlocked() const = 0;\n```  \n  \n### Return Value  \n Whether the context is synchronously blocked.  \n  \n### Remarks  \n A context is considered to be synchronously blocked if it explicitly performed an action which led to blocking. On the thread scheduler, this would indicate a direct call to the `Context::Block` method or a synchronization object which was built using the `Context::Block` method.  \n  \n The return value from this method is an instantaneous sample of whether the context is synchronously blocked. This value may be stale the moment it is returned and can only be used under very specific circumstances.  \n  \n##  <a name=\"operator_delete\"></a>  Context::operator delete Operator  \n A `Context` object is destroyed internally by the runtime. It can not be explicitly deleted.  \n  \n```\nvoid operator delete(void* _PObject);\n```  \n  \n### Parameters  \n `_PObject`  \n A pointer to the object to be deleted.  \n  \n##  <a name=\"oversubscribe\"></a>  Context::Oversubscribe Method  \n Injects an additional virtual processor into a scheduler for the duration of a block of code when invoked on a context executing on one of the virtual processors in that scheduler.  \n  \n```\nstatic void __cdecl Oversubscribe(bool _BeginOversubscription);\n```  \n  \n### Parameters  \n `_BeginOversubscription`  \n If `true`, an indication that an extra virtual processor should be added for the duration of the oversubscription. If `false`, an indication that the oversubscription should end and the previously added virtual processor should be removed.  \n  \n##  <a name=\"schedulegroupid\"></a>  Context::ScheduleGroupId Method  \n Returns an identifier for the schedule group that the current context is working on.  \n  \n```\nstatic unsigned int __cdecl ScheduleGroupId();\n```  \n  \n### Return Value  \n If the current context is attached to a scheduler and working on a schedule group, an identifier for the scheduler group that the current context is working on; otherwise, the value `-1`.  \n  \n##  <a name=\"unblock\"></a>  Context::Unblock Method  \n Unblocks the context and causes it to become runnable.  \n  \n```\nvirtual void Unblock() = 0;\n```  \n  \n### Remarks  \n It is perfectly legal for a call to the `Unblock` method to come before a corresponding call to the [Block](#block) method. As long as calls to the `Block` and `Unblock` methods are properly paired, the runtime properly handles the natural race of either ordering. An `Unblock` call coming before a `Block` call simply negates the effect of the `Block` call.  \n  \n There are several exceptions which can be thrown from this method. If a context attempts to call the `Unblock` method on itself, a [context_self_unblock](context-self-unblock-class.md) exception will be thrown. If calls to `Block` and `Unblock` are not properly paired (for example, two calls to `Unblock` are made for a context which is currently running), a [context_unblock_unbalanced](context-unblock-unbalanced-class.md) exception will be thrown.  \n  \n Be aware that there is a critical period between the point where your code publishes its context for another thread to be able to call the `Unblock` method and the point where the actual method call to `Block` is made. During this period, you must not call any method which can in turn block and unblock for its own reasons (for example, acquiring a lock). Calls to the `Block` and `Unblock` method do not track the reason for the blocking and unblocking. Only one object should have ownership of a `Block` and `Unblock` pair.  \n  \n##  <a name=\"virtualprocessorid\"></a>  Context::VirtualProcessorId Method  \n Returns an identifier for the virtual processor that the current context is executing on.  \n  \n```\nstatic unsigned int __cdecl VirtualProcessorId();\n```  \n  \n### Return Value  \n If the current context is attached to a scheduler, an identifier for the virtual processor that the current context is executing on; otherwise, the value `-1`.  \n  \n### Remarks  \n The return value from this method is an instantaneous sampling of the virtual processor that the current context is executing on. This value can be stale the moment it is returned and cannot be relied upon. Typically, this method is used for debugging or tracing purposes only.  \n  \n##  <a name=\"yield\"></a>  Context::Yield Method  \n Yields execution so that another context can execute. If no other context is available to yield to, the scheduler can yield to another operating system thread.  \n  \n```\nstatic void __cdecl Yield();\n```  \n  \n### Remarks  \n This method will result in the process' default scheduler being created and/or attached to the calling context if there is no scheduler currently associated with the calling context.  \n  \n##  <a name=\"yieldexecution\"></a>  Context::YieldExecution Method  \n Yields execution so that another context can execute. If no other context is available to yield to, the scheduler can yield to another operating system thread.  \n  \n```\nstatic void __cdecl YieldExecution();\n```  \n  \n### Remarks  \n This method will result in the process' default scheduler being created and/or attached to the calling context if there is no scheduler currently associated with the calling context.  \n  \n This function is new in [!INCLUDE[vs_dev14](../../../ide/includes/vs_dev14_md.md)] and is identical to the [Yield](#yield) function but does not conflict with the Yield macro in Windows.h.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [Scheduler Class](scheduler-class.md)   \n [Task Scheduler](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)\n\n\n\n"}