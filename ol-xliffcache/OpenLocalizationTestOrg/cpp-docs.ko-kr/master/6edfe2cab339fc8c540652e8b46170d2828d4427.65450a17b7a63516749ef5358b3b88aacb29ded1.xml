{"nodes":[{"pos":[12,61],"content":"Bitwise Inclusive OR Operator: | | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Bitwise Inclusive OR Operator: | | Microsoft Docs","pos":[0,49]}]},{"content":"Bitwise Inclusive OR Operator: |","pos":[727,759]},{"content":"Syntax","pos":[763,769]},{"content":"Remarks","pos":[831,838]},{"content":"The bitwise inclusive OR operator (<bpt id=\"p1\">**</bpt>&amp;#124;<ept id=\"p1\">**</ept>) compares each bit of its first operand to the corresponding bit of its second operand.","pos":[842,975],"source":"The bitwise inclusive OR operator (**&#124;**) compares each bit of its first operand to the corresponding bit of its second operand."},{"content":"If either bit is 1, the corresponding result bit is set to 1.","pos":[976,1037]},{"content":"Otherwise, the corresponding result bit is set to 0.","pos":[1038,1090]},{"content":"Both operands to the bitwise inclusive OR operator must be of integral types.","pos":[1097,1174]},{"content":"The usual arithmetic conversions covered in <bpt id=\"p1\">[</bpt>Standard Conversions<ept id=\"p1\">](standard-conversions.md)</ept> are applied to the operands.","pos":[1175,1295],"source":" The usual arithmetic conversions covered in [Standard Conversions](standard-conversions.md) are applied to the operands."},{"content":"Operator Keyword for &amp;#124;","pos":[1304,1331],"source":"Operator Keyword for &#124;"},{"content":"The <ph id=\"ph1\">`bitor`</ph> operator is the text equivalent of <bpt id=\"p1\">**</bpt>&amp;#124;<ept id=\"p1\">**</ept>.","pos":[1335,1393],"source":"The `bitor` operator is the text equivalent of **&#124;**."},{"content":"There are two ways to access the <ph id=\"ph1\">`bitor`</ph> operator in your programs: include the header file <ph id=\"ph2\">`iso646.h`</ph>, or compile with the <bpt id=\"p1\">[</bpt>/Za<ept id=\"p1\">](../build/reference/za-ze-disable-language-extensions.md)</ept> (Disable language extensions) compiler option.","pos":[1394,1627],"source":" There are two ways to access the `bitor` operator in your programs: include the header file `iso646.h`, or compile with the [/Za](../build/reference/za-ze-disable-language-extensions.md) (Disable language extensions) compiler option."},{"content":"Example","pos":[1636,1643]},{"content":"See Also","pos":[2035,2043]},{"content":"C++ Built-in Operators, Precedence and Associativity","pos":[2048,2100]},{"content":"C Bitwise Operators","pos":[2170,2189]}],"content":"---\ntitle: \"Bitwise Inclusive OR Operator: | | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"bitor\"\n  - \"|\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"OR operator, bitwise inclusive\"\n  - \"bitwise operators, OR operator\"\n  - \"inclusive OR operator\"\n  - \"| operator\"\nms.assetid: 4c8a6a68-d828-447d-875a-aedb4ce3aa9a\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Bitwise Inclusive OR Operator: |\n## Syntax  \n  \n```  \n  \nexpression   \n|  \n expression  \n  \n```  \n  \n## Remarks  \n The bitwise inclusive OR operator (**&#124;**) compares each bit of its first operand to the corresponding bit of its second operand. If either bit is 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.  \n  \n Both operands to the bitwise inclusive OR operator must be of integral types. The usual arithmetic conversions covered in [Standard Conversions](standard-conversions.md) are applied to the operands.  \n  \n## Operator Keyword for &#124;  \n The `bitor` operator is the text equivalent of **&#124;**. There are two ways to access the `bitor` operator in your programs: include the header file `iso646.h`, or compile with the [/Za](../build/reference/za-ze-disable-language-extensions.md) (Disable language extensions) compiler option.  \n  \n## Example  \n  \n```  \n// expre_Bitwise_Inclusive_OR_Operator.cpp  \n// compile with: /EHsc  \n// Demonstrate bitwise inclusive OR  \n#include <iostream>  \nusing namespace std;  \n  \nint main() {  \n   unsigned short a = 0x5555;      // pattern 0101 ...  \n   unsigned short b = 0xAAAA;      // pattern 1010 ...  \n  \n   cout  << hex << ( a | b ) << endl;   // prints \"ffff\" pattern 1111 ...  \n}  \n```  \n  \n## See Also  \n [C++ Built-in Operators, Precedence and Associativity](../cpp/cpp-built-in-operators-precedence-and-associativity.md)   \n [C Bitwise Operators](../c-language/c-bitwise-operators.md)\n\n"}