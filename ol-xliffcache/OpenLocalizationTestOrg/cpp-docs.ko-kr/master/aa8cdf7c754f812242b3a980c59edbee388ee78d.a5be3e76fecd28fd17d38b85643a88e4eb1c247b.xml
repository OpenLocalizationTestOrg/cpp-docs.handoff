{"nodes":[{"pos":[12,39],"content":"_get_errno | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_get_errno | Microsoft Docs","pos":[0,27]}]},{"content":"_get_errno","pos":[972,982]},{"content":"Gets the current value of the errno global variable.","pos":[983,1035]},{"content":"Syntax","pos":[1044,1050]},{"content":"Parameters","pos":[1123,1133]},{"content":"[out]","pos":[1137,1142]},{"content":"A pointer to an integer to be filled with the current value of the <ph id=\"ph1\">`errno`</ph> variable.","pos":[1155,1239],"source":" A pointer to an integer to be filled with the current value of the `errno` variable."},{"content":"Return Value","pos":[1248,1260]},{"content":"Returns zero if successful; an error code on failure.","pos":[1264,1317]},{"content":"If <ph id=\"ph1\">`pValue`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1318,1470],"source":" If `pValue` is `NULL`, the invalid parameter handler is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns <ph id=\"ph3\">`EINVAL`</ph>.","pos":[1471,1568],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `EINVAL`."},{"content":"Remarks","pos":[1577,1584]},{"content":"Possible values of <ph id=\"ph1\">`errno`</ph> are defined in Errno.h.","pos":[1588,1638],"source":"Possible values of `errno` are defined in Errno.h."},{"content":"Also, see <bpt id=\"p1\">[</bpt>errno Constants<ept id=\"p1\">](../../c-runtime-library/errno-constants.md)</ept>.","pos":[1639,1711],"source":" Also, see [errno Constants](../../c-runtime-library/errno-constants.md)."},{"content":"Example","pos":[1720,1727]},{"content":"Requirements","pos":[2170,2182]},{"content":"Routine","pos":[2189,2196]},{"content":"Required header","pos":[2197,2212]},{"content":"Optional header","pos":[2213,2228]},{"content":"stdlib.h&gt;","pos":[2310,2319],"source":"stdlib.h>"},{"content":"errno.h&gt;","pos":[2322,2330],"source":"errno.h>"},{"pos":[2338,2456],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"NET Framework Equivalent","pos":[2465,2489]},{"content":"Not applicable.","pos":[2493,2508]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[2509,2556],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[2557,2682],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[2691,2699]},{"content":"_set_errno","pos":[2704,2714]},{"content":"errno, _doserrno, _sys_errlist, and _sys_nerr","pos":[2769,2814]}],"content":"---\ntitle: \"_get_errno | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_get_errno\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_get_errno\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"get_errno function\"\n  - \"errno global variable\"\n  - \"_get_errno function\"\nms.assetid: b3fd5ebc-f41b-4314-a2f4-2f2d79d6e740\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _get_errno\nGets the current value of the errno global variable.  \n  \n## Syntax  \n  \n```  \nerrno_t _get_errno(   \n   int * pValue   \n);  \n```  \n  \n#### Parameters  \n [out] `pValue`  \n A pointer to an integer to be filled with the current value of the `errno` variable.  \n  \n## Return Value  \n Returns zero if successful; an error code on failure. If `pValue` is `NULL`, the invalid parameter handler is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `EINVAL`.  \n  \n## Remarks  \n Possible values of `errno` are defined in Errno.h. Also, see [errno Constants](../../c-runtime-library/errno-constants.md).  \n  \n## Example  \n  \n```  \n// crt_get_errno.c  \n#include <stdio.h>  \n#include <fcntl.h>  \n#include <sys/stat.h>  \n#include <share.h>  \n#include <errno.h>  \n  \nint main()  \n{  \n   errno_t err;  \n   int pfh;  \n   _sopen_s( &pfh, \"nonexistent.file\", _O_WRONLY, _SH_DENYNO, _S_IWRITE );  \n   _get_errno( &err );  \n   printf( \"errno = %d\\n\", err );  \n   printf( \"fyi, ENOENT = %d\\n\", ENOENT );  \n}  \n```  \n  \n```Output  \nerrno = 2  \nfyi, ENOENT = 2  \n```  \n  \n## Requirements  \n  \n|Routine|Required header|Optional header|  \n|-------------|---------------------|---------------------|  \n|`_get_errno`|\\<stdlib.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [_set_errno](../../c-runtime-library/reference/set-errno.md)   \n [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)"}