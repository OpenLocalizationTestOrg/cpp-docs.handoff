{"nodes":[{"pos":[12,84],"content":"How to: Iterate Over a Generic Collection with for each | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Iterate Over a Generic Collection with for each | Microsoft Docs","pos":[0,72]}]},{"content":"How to: Iterate Over a Generic Collection with for each","pos":[630,685]},{"pos":[686,813],"content":"The <bpt id=\"p1\">[</bpt>Generics<ept id=\"p1\">](../windows/generics-cpp-component-extensions.md)</ept> feature of Visual C++ allows you to create generic collections.","source":"The [Generics](../windows/generics-cpp-component-extensions.md) feature of Visual C++ allows you to create generic collections."},{"content":"Example","pos":[822,829]},{"pos":[833,917],"content":"This sample shows how to use <ph id=\"ph1\">`for each`</ph> with a simple generic value type collection.","source":"This sample shows how to use `for each` with a simple generic value type collection."},{"content":"See Also","pos":[2560,2568]},{"content":"for each, in","pos":[2573,2585]}],"content":"---\ntitle: \"How to: Iterate Over a Generic Collection with for each | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"generic collection, iterating over\"\nms.assetid: 00288d53-3d41-44d0-be5b-b3033456ceaa\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Iterate Over a Generic Collection with for each\nThe [Generics](../windows/generics-cpp-component-extensions.md) feature of Visual C++ allows you to create generic collections.  \n  \n## Example  \n This sample shows how to use `for each` with a simple generic value type collection.  \n  \n```  \n// for_each_generics.cpp  \n// compile with: /clr  \nusing namespace System;  \nusing namespace System::Collections::Generic;  \n  \ngeneric <class T>  \npublic value struct MyArray : public IEnumerable<T> {     \n  \n   MyArray( array<T>^ d ) {  \n      data = d;  \n   }  \n  \n   ref struct enumerator : IEnumerator<T> {  \n      enumerator( MyArray^ myArr ) {  \n         colInst = myArr;  \n         currentIndex = -1;  \n      }  \n  \n      virtual bool MoveNext() = IEnumerator<T>::MoveNext {  \n         if ( currentIndex < colInst->data->Length - 1 ) {  \n            currentIndex++;  \n            return true;  \n         }  \n  \n         return false;  \n      }  \n  \n      virtual property T Current {  \n         T get() {  \n            return colInst->data[currentIndex];  \n         }  \n      };  \n  \n      property Object^ CurrentNonGeneric {  \n         virtual Object^ get() = System::Collections::IEnumerator::Current::get {  \n            return colInst->data[currentIndex];  \n         }  \n      };  \n  \n      virtual void Reset() {}  \n      ~enumerator() {}  \n  \n      MyArray^ colInst;  \n      int currentIndex;  \n   };  \n  \n   array<T>^ data;  \n  \n   virtual IEnumerator<T>^ GetEnumerator() {  \n      return gcnew enumerator(*this);  \n   }  \n   virtual System::Collections::IEnumerator^ GetEnumeratorNonGeneric() = System::Collections::IEnumerable::GetEnumerator {  \n      return gcnew enumerator(*this);  \n   }  \n};  \n  \nint main() {  \n   MyArray<int> col = MyArray<int>( gcnew array<int>{10, 20, 30 } );  \n  \n   for each ( Object^ c in col )  \n      Console::WriteLine((int)c);  \n}  \n```  \n  \n```Output  \n10  \n20  \n30  \n```  \n  \n## See Also  \n [for each, in](../dotnet/for-each-in.md)"}