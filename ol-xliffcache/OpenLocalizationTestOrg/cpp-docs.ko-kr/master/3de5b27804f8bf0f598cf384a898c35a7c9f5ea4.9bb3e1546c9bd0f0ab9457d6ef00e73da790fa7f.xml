{"nodes":[{"pos":[12,39],"content":"CPen Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CPen Class | Microsoft Docs","pos":[0,27]}]},{"pos":[624,634],"content":"CPen Class","linkify":"CPen Class","nodes":[{"content":"CPen Class","pos":[0,10]}]},{"content":"Encapsulates a Windows graphics device interface (GDI) pen.","pos":[635,694]},{"pos":[703,709],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[766,773],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[783,802],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[809,813]},{"content":"Description","pos":[814,825]},{"pos":[863,888],"content":"<bpt id=\"p1\">[</bpt>CPen::CPen<ept id=\"p1\">](#cpen__cpen)</ept>","source":"[CPen::CPen](#cpen__cpen)"},{"pos":[889,916],"content":"Constructs a <ph id=\"ph1\">`CPen`</ph> object.","source":"Constructs a `CPen` object."},{"pos":[927,941],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[948,952]},{"content":"Description","pos":[953,964]},{"pos":[1002,1037],"content":"<bpt id=\"p1\">[</bpt>CPen::CreatePen<ept id=\"p1\">](#cpen__createpen)</ept>","source":"[CPen::CreatePen](#cpen__createpen)"},{"pos":[1038,1174],"content":"Creates a logical cosmetic or geometric pen with the specified style, width, and brush attributes, and attaches it to the <ph id=\"ph1\">`CPen`</ph> object.","source":"Creates a logical cosmetic or geometric pen with the specified style, width, and brush attributes, and attaches it to the `CPen` object."},{"pos":[1179,1230],"content":"<bpt id=\"p1\">[</bpt>CPen::CreatePenIndirect<ept id=\"p1\">](#cpen__createpenindirect)</ept>","source":"[CPen::CreatePenIndirect](#cpen__createpenindirect)"},{"pos":[1231,1406],"content":"Creates a pen with the style, width, and color given in a <bpt id=\"p1\">[</bpt>LOGPEN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145041)</ept> structure, and attaches it to the <ph id=\"ph1\">`CPen`</ph> object.","source":"Creates a pen with the style, width, and color given in a [LOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd145041) structure, and attaches it to the `CPen` object."},{"pos":[1411,1448],"content":"<bpt id=\"p1\">[</bpt>CPen::FromHandle<ept id=\"p1\">](#cpen__fromhandle)</ept>","source":"[CPen::FromHandle](#cpen__fromhandle)"},{"pos":[1449,1514],"content":"Returns a pointer to a <ph id=\"ph1\">`CPen`</ph> object when given a Windows <ph id=\"ph2\">`HPEN`</ph>.","source":"Returns a pointer to a `CPen` object when given a Windows `HPEN`."},{"pos":[1519,1560],"content":"<bpt id=\"p1\">[</bpt>CPen::GetExtLogPen<ept id=\"p1\">](#cpen__getextlogpen)</ept>","source":"[CPen::GetExtLogPen](#cpen__getextlogpen)"},{"pos":[1561,1662],"content":"Gets an <bpt id=\"p1\">[</bpt>EXTLOGPEN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162711)</ept> underlying structure.","source":"Gets an [EXTLOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd162711) underlying structure."},{"pos":[1667,1702],"content":"<bpt id=\"p1\">[</bpt>CPen::GetLogPen<ept id=\"p1\">](#cpen__getlogpen)</ept>","source":"[CPen::GetLogPen](#cpen__getlogpen)"},{"pos":[1703,1800],"content":"Gets a <bpt id=\"p1\">[</bpt>LOGPEN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145041)</ept> underlying structure.","source":"Gets a [LOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd145041) underlying structure."},{"pos":[1811,1827],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1834,1838]},{"content":"Description","pos":[1839,1850]},{"pos":[1888,1931],"content":"<bpt id=\"p1\">[</bpt>CPen::operator HPEN<ept id=\"p1\">](#cpen__operator_hpen)</ept>","source":"[CPen::operator HPEN](#cpen__operator_hpen)"},{"pos":[1932,1989],"content":"Returns the Windows handle attached to the <ph id=\"ph1\">`CPen`</ph> object.","source":"Returns the Windows handle attached to the `CPen` object."},{"pos":[1999,2006],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2010,2100],"content":"For more information on using <ph id=\"ph1\">`CPen`</ph>, see <bpt id=\"p1\">[</bpt>Graphic Objects<ept id=\"p1\">](../../mfc/graphic-objects.md)</ept>.","source":"For more information on using `CPen`, see [Graphic Objects](../../mfc/graphic-objects.md)."},{"pos":[2109,2130],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2134,2181],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[2188,2241],"content":"<bpt id=\"p1\">[</bpt>CGdiObject<ept id=\"p1\">](../../mfc/reference/cgdiobject-class.md)</ept>","source":"[CGdiObject](../../mfc/reference/cgdiobject-class.md)"},{"pos":[2263,2275],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2279,2299],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[2309,2346],"content":"<bpt id=\"p1\">&lt;a name=\"cpen__cpen\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPen::CPen","linkify":"<a name=\"cpen__cpen\"></a>  CPen::CPen","source":"<a name=\"cpen__cpen\"></a>  CPen::CPen"},{"pos":[2350,2377],"content":"Constructs a <ph id=\"ph1\">`CPen`</ph> object.","source":"Constructs a `CPen` object."},{"pos":[2623,2633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the pen style.","pos":[2652,2676]},{"content":"This parameter in the first version of the constructor can be one of the following values:","pos":[2677,2767]},{"pos":[2775,2808],"content":"<bpt id=\"p1\">**</bpt>PS_SOLID<ept id=\"p1\">**</ept> Creates a solid pen.","source":"**PS_SOLID** Creates a solid pen."},{"content":"<bpt id=\"p1\">**</bpt>PS_DASH<ept id=\"p1\">**</ept> Creates a dashed pen.","pos":[2816,2849],"source":"**PS_DASH** Creates a dashed pen."},{"content":"Valid only when the pen width is 1 or less, in device units.","pos":[2850,2910]},{"content":"<bpt id=\"p1\">**</bpt>PS_DOT<ept id=\"p1\">**</ept> Creates a dotted pen.","pos":[2918,2950],"source":"**PS_DOT** Creates a dotted pen."},{"content":"Valid only when the pen width is 1 or less, in device units.","pos":[2951,3011]},{"content":"<bpt id=\"p1\">**</bpt>PS_DASHDOT<ept id=\"p1\">**</ept> Creates a pen with alternating dashes and dots.","pos":[3019,3081],"source":"**PS_DASHDOT** Creates a pen with alternating dashes and dots."},{"content":"Valid only when the pen width is 1 or less, in device units.","pos":[3082,3142]},{"content":"<bpt id=\"p1\">**</bpt>PS_DASHDOTDOT<ept id=\"p1\">**</ept> Creates a pen with alternating dashes and double dots.","pos":[3150,3222],"source":"**PS_DASHDOTDOT** Creates a pen with alternating dashes and double dots."},{"content":"Valid only when the pen width is 1 or less, in device units.","pos":[3223,3283]},{"pos":[3291,3322],"content":"<bpt id=\"p1\">**</bpt>PS_NULL<ept id=\"p1\">**</ept> Creates a null pen.","source":"**PS_NULL** Creates a null pen."},{"content":"<bpt id=\"p1\">**</bpt>PS_INSIDEFRAME<ept id=\"p1\">**</ept> Creates a pen that draws a line inside the frame of closed shapes produced by the Windows GDI output functions that specify a bounding rectangle (for example, the <bpt id=\"p2\">**</bpt>Ellipse<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Rectangle<ept id=\"p3\">**</ept>, <ph id=\"ph1\">`RoundRect`</ph>, <ph id=\"ph2\">`Pie`</ph>, and <ph id=\"ph3\">`Chord`</ph> member functions).","pos":[3330,3590],"source":"**PS_INSIDEFRAME** Creates a pen that draws a line inside the frame of closed shapes produced by the Windows GDI output functions that specify a bounding rectangle (for example, the **Ellipse**, **Rectangle**, `RoundRect`, `Pie`, and `Chord` member functions)."},{"content":"When this style is used with Windows GDI output functions that do not specify a bounding rectangle (for example, the <ph id=\"ph1\">`LineTo`</ph> member function), the drawing area of the pen is not limited by a frame.","pos":[3591,3789],"source":" When this style is used with Windows GDI output functions that do not specify a bounding rectangle (for example, the `LineTo` member function), the drawing area of the pen is not limited by a frame."},{"content":"The second version of the <ph id=\"ph1\">`CPen`</ph> constructor specifies a combination of type, style, end cap, and join attributes.","pos":[3796,3910],"source":"The second version of the `CPen` constructor specifies a combination of type, style, end cap, and join attributes."},{"content":"The values from each category should be combined by using the bitwise OR operator (&amp;#124;).","pos":[3911,4002],"source":" The values from each category should be combined by using the bitwise OR operator (&#124;)."},{"content":"The pen type can be one of the following values:","pos":[4003,4051]},{"pos":[4059,4100],"content":"<bpt id=\"p1\">**</bpt>PS_GEOMETRIC<ept id=\"p1\">**</ept> Creates a geometric pen.","source":"**PS_GEOMETRIC** Creates a geometric pen."},{"pos":[4108,4147],"content":"<bpt id=\"p1\">**</bpt>PS_COSMETIC<ept id=\"p1\">**</ept> Creates a cosmetic pen.","source":"**PS_COSMETIC** Creates a cosmetic pen."},{"pos":[4158,4249],"content":"The second version of the <ph id=\"ph1\">`CPen`</ph> constructor adds the following pen styles for <ph id=\"ph2\">`nPenStyle`</ph>:","source":"The second version of the `CPen` constructor adds the following pen styles for `nPenStyle`:"},{"content":"<bpt id=\"p1\">**</bpt>PS_ALTERNATE<ept id=\"p1\">**</ept> Creates a pen that sets every other pixel.","pos":[4257,4316],"source":"**PS_ALTERNATE** Creates a pen that sets every other pixel."},{"content":"(This style is applicable only for cosmetic pens.)","pos":[4317,4367]},{"pos":[4375,4453],"content":"<bpt id=\"p1\">**</bpt>PS_USERSTYLE<ept id=\"p1\">**</ept> Creates a pen that uses a styling array supplied by the user.","source":"**PS_USERSTYLE** Creates a pen that uses a styling array supplied by the user."},{"content":"The end cap can be one of the following values:","pos":[4464,4511]},{"pos":[4519,4558],"content":"<bpt id=\"p1\">**</bpt>PS_ENDCAP_ROUND<ept id=\"p1\">**</ept> End caps are round.","source":"**PS_ENDCAP_ROUND** End caps are round."},{"pos":[4566,4607],"content":"<bpt id=\"p1\">**</bpt>PS_ENDCAP_SQUARE<ept id=\"p1\">**</ept> End caps are square.","source":"**PS_ENDCAP_SQUARE** End caps are square."},{"pos":[4615,4652],"content":"<bpt id=\"p1\">**</bpt>PS_ENDCAP_FLAT<ept id=\"p1\">**</ept> End caps are flat.","source":"**PS_ENDCAP_FLAT** End caps are flat."},{"content":"The join can be one of the following values:","pos":[4663,4707]},{"pos":[4715,4751],"content":"<bpt id=\"p1\">**</bpt>PS_JOIN_BEVEL<ept id=\"p1\">**</ept> Joins are beveled.","source":"**PS_JOIN_BEVEL** Joins are beveled."},{"content":"<bpt id=\"p1\">**</bpt>PS_JOIN_MITER<ept id=\"p1\">**</ept> Joins are mitered when they are within the current limit set by the <bpt id=\"p2\">[</bpt>SetMiterLimit<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd145076)</ept> function.","pos":[4759,4930],"source":"**PS_JOIN_MITER** Joins are mitered when they are within the current limit set by the [SetMiterLimit](http://msdn.microsoft.com/library/windows/desktop/dd145076) function."},{"content":"If the join exceeds this limit, it is beveled.","pos":[4931,4977]},{"pos":[4985,5019],"content":"<bpt id=\"p1\">**</bpt>PS_JOIN_ROUND<ept id=\"p1\">**</ept> Joins are round.","source":"**PS_JOIN_ROUND** Joins are round."},{"pos":[5026,5069],"content":"`nWidth`  \nSpecifies the width of the pen.","leadings":[""," "],"nodes":[{"content":"Specifies the width of the pen.","pos":[11,42]}]},{"content":"For the first version of the constructor, if this value is 0, the width in device units is always 1 pixel, regardless of the mapping mode.","pos":[5079,5217]},{"content":"For the second version of the constructor, if <ph id=\"ph1\">`nPenStyle`</ph> is <bpt id=\"p1\">**</bpt>PS_GEOMETRIC<ept id=\"p1\">**</ept>, the width is given in logical units.","pos":[5227,5342],"source":"For the second version of the constructor, if `nPenStyle` is **PS_GEOMETRIC**, the width is given in logical units."},{"content":"If <ph id=\"ph1\">`nPenStyle`</ph> is <bpt id=\"p1\">**</bpt>PS_COSMETIC<ept id=\"p1\">**</ept>, the width must be set to 1.","pos":[5343,5405],"source":" If `nPenStyle` is **PS_COSMETIC**, the width must be set to 1."},{"pos":[5412,5459],"content":"`crColor`  \nContains an RGB color for the pen.","leadings":[""," "],"nodes":[{"content":"Contains an RGB color for the pen.","pos":[12,46]}]},{"pos":[5466,5816],"content":"`pLogBrush`  \nPoints to a `LOGBRUSH` structure. If `nPenStyle` is **PS_COSMETIC**, the `lbColor` member of the `LOGBRUSH` structure specifies the color of the pen and the `lbStyle` member of the `LOGBRUSH` structure must be set to **BS_SOLID**. If `nPenStyle` is **PS_GEOMETRIC**, all members must be used to specify the brush attributes of the pen.","leadings":[""," "],"nodes":[{"content":"Points to a `LOGBRUSH` structure. If `nPenStyle` is **PS_COSMETIC**, the `lbColor` member of the `LOGBRUSH` structure specifies the color of the pen and the `lbStyle` member of the `LOGBRUSH` structure must be set to **BS_SOLID**. If `nPenStyle` is **PS_GEOMETRIC**, all members must be used to specify the brush attributes of the pen.","pos":[14,349],"nodes":[{"content":"Points to a <ph id=\"ph1\">`LOGBRUSH`</ph> structure.","pos":[0,33],"source":"Points to a `LOGBRUSH` structure."},{"content":"If <ph id=\"ph1\">`nPenStyle`</ph> is <bpt id=\"p1\">**</bpt>PS_COSMETIC<ept id=\"p1\">**</ept>, the <ph id=\"ph2\">`lbColor`</ph> member of the <ph id=\"ph3\">`LOGBRUSH`</ph> structure specifies the color of the pen and the <ph id=\"ph4\">`lbStyle`</ph> member of the <ph id=\"ph5\">`LOGBRUSH`</ph> structure must be set to <bpt id=\"p2\">**</bpt>BS_SOLID<ept id=\"p2\">**</ept>.","pos":[34,230],"source":" If `nPenStyle` is **PS_COSMETIC**, the `lbColor` member of the `LOGBRUSH` structure specifies the color of the pen and the `lbStyle` member of the `LOGBRUSH` structure must be set to **BS_SOLID**."},{"content":"If <ph id=\"ph1\">`nPenStyle`</ph> is <bpt id=\"p1\">**</bpt>PS_GEOMETRIC<ept id=\"p1\">**</ept>, all members must be used to specify the brush attributes of the pen.","pos":[231,335],"source":" If `nPenStyle` is **PS_GEOMETRIC**, all members must be used to specify the brush attributes of the pen."}]}]},{"pos":[5823,5970],"content":"`nStyleCount`  \nSpecifies the length, in doubleword units, of the `lpStyle` array. This value must be zero if `nPenStyle` is not **PS_USERSTYLE**.","leadings":[""," "],"nodes":[{"content":"Specifies the length, in doubleword units, of the `lpStyle` array. This value must be zero if `nPenStyle` is not **PS_USERSTYLE**.","pos":[16,146],"nodes":[{"content":"Specifies the length, in doubleword units, of the <ph id=\"ph1\">`lpStyle`</ph> array.","pos":[0,66],"source":"Specifies the length, in doubleword units, of the `lpStyle` array."},{"content":"This value must be zero if <ph id=\"ph1\">`nPenStyle`</ph> is not <bpt id=\"p1\">**</bpt>PS_USERSTYLE<ept id=\"p1\">**</ept>.","pos":[67,130],"source":" This value must be zero if `nPenStyle` is not **PS_USERSTYLE**."}]}]},{"pos":[5977,6249],"content":"`lpStyle`  \nPoints to an array of doubleword values. The first value specifies the length of the first dash in a user-defined style, the second value specifies the length of the first space, and so on. This pointer must be **NULL** if `nPenStyle` is not **PS_USERSTYLE**.","leadings":[""," "],"nodes":[{"content":"Points to an array of doubleword values. The first value specifies the length of the first dash in a user-defined style, the second value specifies the length of the first space, and so on. This pointer must be **NULL** if `nPenStyle` is not **PS_USERSTYLE**.","pos":[12,271],"nodes":[{"content":"Points to an array of doubleword values.","pos":[0,40]},{"content":"The first value specifies the length of the first dash in a user-defined style, the second value specifies the length of the first space, and so on.","pos":[41,189]},{"content":"This pointer must be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`nPenStyle`</ph> is not <bpt id=\"p2\">**</bpt>PS_USERSTYLE<ept id=\"p2\">**</ept>.","pos":[190,259],"source":" This pointer must be **NULL** if `nPenStyle` is not **PS_USERSTYLE**."}]}]},{"pos":[6259,6266],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6270,6447],"content":"If you use the constructor with no arguments, you must initialize the resulting <ph id=\"ph1\">`CPen`</ph> object with the <ph id=\"ph2\">`CreatePen`</ph>, <ph id=\"ph3\">`CreatePenIndirect`</ph>, or <ph id=\"ph4\">`CreateStockObject`</ph> member functions.","source":"If you use the constructor with no arguments, you must initialize the resulting `CPen` object with the `CreatePen`, `CreatePenIndirect`, or `CreateStockObject` member functions."},{"content":"If you use the constructor that takes arguments, then no further initialization is necessary.","pos":[6454,6547]},{"content":"The constructor with arguments can throw an exception if errors are encountered, while the constructor with no arguments will always succeed.","pos":[6548,6689]},{"pos":[6699,6706],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6710,6784],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#99<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpen-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#99](../../mfc/codesnippet/cpp/cpen-class_1.cpp)]"},{"pos":[6794,6841],"content":"<bpt id=\"p1\">&lt;a name=\"cpen__createpen\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPen::CreatePen","linkify":"<a name=\"cpen__createpen\"></a>  CPen::CreatePen","source":"<a name=\"cpen__createpen\"></a>  CPen::CreatePen"},{"pos":[6845,6981],"content":"Creates a logical cosmetic or geometric pen with the specified style, width, and brush attributes, and attaches it to the <ph id=\"ph1\">`CPen`</ph> object.","source":"Creates a logical cosmetic or geometric pen with the specified style, width, and brush attributes, and attaches it to the `CPen` object."},{"pos":[7236,7246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the style for the pen.","pos":[7265,7297]},{"content":"For a list of possible values, see the <ph id=\"ph1\">`nPenStyle`</ph> parameter in the <bpt id=\"p1\">[</bpt>CPen<ept id=\"p1\">](#cpen__cpen)</ept> constructor.","pos":[7298,7398],"source":" For a list of possible values, see the `nPenStyle` parameter in the [CPen](#cpen__cpen) constructor."},{"content":"Specifies the width of the pen.","pos":[7417,7448]},{"pos":[7458,7592],"content":"For the first version of <ph id=\"ph1\">`CreatePen`</ph>, if this value is 0, the width in device units is always 1 pixel, regardless of the mapping mode.","source":"For the first version of `CreatePen`, if this value is 0, the width in device units is always 1 pixel, regardless of the mapping mode."},{"content":"For the second version of <ph id=\"ph1\">`CreatePen`</ph>, if <ph id=\"ph2\">`nPenStyle`</ph> is <bpt id=\"p1\">**</bpt>PS_GEOMETRIC<ept id=\"p1\">**</ept>, the width is given in logical units.","pos":[7602,7713],"source":"For the second version of `CreatePen`, if `nPenStyle` is **PS_GEOMETRIC**, the width is given in logical units."},{"content":"If <ph id=\"ph1\">`nPenStyle`</ph> is <bpt id=\"p1\">**</bpt>PS_COSMETIC<ept id=\"p1\">**</ept>, the width must be set to 1.","pos":[7714,7776],"source":" If `nPenStyle` is **PS_COSMETIC**, the width must be set to 1."},{"pos":[7783,7830],"content":"`crColor`  \nContains an RGB color for the pen.","leadings":[""," "],"nodes":[{"content":"Contains an RGB color for the pen.","pos":[12,46]}]},{"pos":[7837,8251],"content":"`pLogBrush`  \nPoints to a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure. If `nPenStyle` is **PS_COSMETIC**, the **lbColor** member of the `LOGBRUSH` structure specifies the color of the pen and the `lbStyle` member of the `LOGBRUSH` structure must be set to **BS_SOLID**. If **nPenStyle** is **PS_GEOMETRIC**, all members must be used to specify the brush attributes of the pen.","leadings":[""," "],"nodes":[{"content":"Points to a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure. If `nPenStyle` is **PS_COSMETIC**, the **lbColor** member of the `LOGBRUSH` structure specifies the color of the pen and the `lbStyle` member of the `LOGBRUSH` structure must be set to **BS_SOLID**. If **nPenStyle** is **PS_GEOMETRIC**, all members must be used to specify the brush attributes of the pen.","pos":[14,413],"nodes":[{"content":"Points to a <bpt id=\"p1\">[</bpt>LOGBRUSH<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145035)</ept> structure.","pos":[0,93],"source":"Points to a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure."},{"content":"If <ph id=\"ph1\">`nPenStyle`</ph> is <bpt id=\"p1\">**</bpt>PS_COSMETIC<ept id=\"p1\">**</ept>, the <bpt id=\"p2\">**</bpt>lbColor<ept id=\"p2\">**</ept> member of the <ph id=\"ph2\">`LOGBRUSH`</ph> structure specifies the color of the pen and the <ph id=\"ph3\">`lbStyle`</ph> member of the <ph id=\"ph4\">`LOGBRUSH`</ph> structure must be set to <bpt id=\"p3\">**</bpt>BS_SOLID<ept id=\"p3\">**</ept>.","pos":[94,292],"source":" If `nPenStyle` is **PS_COSMETIC**, the **lbColor** member of the `LOGBRUSH` structure specifies the color of the pen and the `lbStyle` member of the `LOGBRUSH` structure must be set to **BS_SOLID**."},{"content":"If <bpt id=\"p1\">**</bpt>nPenStyle<ept id=\"p1\">**</ept> is <bpt id=\"p2\">**</bpt>PS_GEOMETRIC<ept id=\"p2\">**</ept>, all members must be used to specify the brush attributes of the pen.","pos":[293,399],"source":" If **nPenStyle** is **PS_GEOMETRIC**, all members must be used to specify the brush attributes of the pen."}]}]},{"pos":[8258,8405],"content":"`nStyleCount`  \nSpecifies the length, in doubleword units, of the `lpStyle` array. This value must be zero if `nPenStyle` is not **PS_USERSTYLE**.","leadings":[""," "],"nodes":[{"content":"Specifies the length, in doubleword units, of the `lpStyle` array. This value must be zero if `nPenStyle` is not **PS_USERSTYLE**.","pos":[16,146],"nodes":[{"content":"Specifies the length, in doubleword units, of the <ph id=\"ph1\">`lpStyle`</ph> array.","pos":[0,66],"source":"Specifies the length, in doubleword units, of the `lpStyle` array."},{"content":"This value must be zero if <ph id=\"ph1\">`nPenStyle`</ph> is not <bpt id=\"p1\">**</bpt>PS_USERSTYLE<ept id=\"p1\">**</ept>.","pos":[67,130],"source":" This value must be zero if `nPenStyle` is not **PS_USERSTYLE**."}]}]},{"pos":[8412,8684],"content":"`lpStyle`  \nPoints to an array of doubleword values. The first value specifies the length of the first dash in a user-defined style, the second value specifies the length of the first space, and so on. This pointer must be **NULL** if `nPenStyle` is not **PS_USERSTYLE**.","leadings":[""," "],"nodes":[{"content":"Points to an array of doubleword values. The first value specifies the length of the first dash in a user-defined style, the second value specifies the length of the first space, and so on. This pointer must be **NULL** if `nPenStyle` is not **PS_USERSTYLE**.","pos":[12,271],"nodes":[{"content":"Points to an array of doubleword values.","pos":[0,40]},{"content":"The first value specifies the length of the first dash in a user-defined style, the second value specifies the length of the first space, and so on.","pos":[41,189]},{"content":"This pointer must be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`nPenStyle`</ph> is not <bpt id=\"p2\">**</bpt>PS_USERSTYLE<ept id=\"p2\">**</ept>.","pos":[190,259],"source":" This pointer must be **NULL** if `nPenStyle` is not **PS_USERSTYLE**."}]}]},{"pos":[8694,8706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful, or zero if the method fails.","pos":[8710,8761]},{"pos":[8771,8778],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first version of <ph id=\"ph1\">`CreatePen`</ph> initializes a pen with the specified style, width, and color.","pos":[8782,8876],"source":"The first version of `CreatePen` initializes a pen with the specified style, width, and color."},{"content":"The pen can be subsequently selected as the current pen for any device context.","pos":[8877,8956]},{"pos":[8963,9092],"content":"Pens that have a width greater than 1 pixel should always have either the <bpt id=\"p1\">**</bpt>PS_NULL<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>PS_SOLID<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>PS_INSIDEFRAME<ept id=\"p3\">**</ept> style.","source":"Pens that have a width greater than 1 pixel should always have either the **PS_NULL**, **PS_SOLID**, or **PS_INSIDEFRAME** style."},{"content":"If a pen has the <bpt id=\"p1\">**</bpt>PS_INSIDEFRAME<ept id=\"p1\">**</ept> style and a color that does not match a color in the logical color table, the pen is drawn with a dithered color.","pos":[9099,9248],"source":"If a pen has the **PS_INSIDEFRAME** style and a color that does not match a color in the logical color table, the pen is drawn with a dithered color."},{"content":"The <bpt id=\"p1\">**</bpt>PS_SOLID<ept id=\"p1\">**</ept> pen style cannot be used to create a pen with a dithered color.","pos":[9249,9329],"source":" The **PS_SOLID** pen style cannot be used to create a pen with a dithered color."},{"content":"The style <bpt id=\"p1\">**</bpt>PS_INSIDEFRAME<ept id=\"p1\">**</ept> is identical to <bpt id=\"p2\">**</bpt>PS_SOLID<ept id=\"p2\">**</ept> if the pen width is less than or equal to 1.","pos":[9330,9432],"source":" The style **PS_INSIDEFRAME** is identical to **PS_SOLID** if the pen width is less than or equal to 1."},{"content":"The second version of <ph id=\"ph1\">`CreatePen`</ph> initializes a logical cosmetic or geometric pen that has the specified style, width, and brush attributes.","pos":[9439,9579],"source":"The second version of `CreatePen` initializes a logical cosmetic or geometric pen that has the specified style, width, and brush attributes."},{"content":"The width of a cosmetic pen is always 1; the width of a geometric pen is always specified in world units.","pos":[9580,9685]},{"content":"After an application creates a logical pen, it can select that pen into a device context by calling the <bpt id=\"p1\">[</bpt>CDC::SelectObject<ept id=\"p1\">](../../mfc/reference/cdc-class.md#cdc__selectobject)</ept> function.","pos":[9686,9871],"source":" After an application creates a logical pen, it can select that pen into a device context by calling the [CDC::SelectObject](../../mfc/reference/cdc-class.md#cdc__selectobject) function."},{"content":"After a pen is selected into a device context, it can be used to draw lines and curves.","pos":[9872,9959]},{"content":"If <ph id=\"ph1\">`nPenStyle`</ph> is <bpt id=\"p1\">**</bpt>PS_COSMETIC<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>PS_USERSTYLE<ept id=\"p2\">**</ept>, the entries in the <ph id=\"ph2\">`lpStyle`</ph> array specify lengths of dashes and spaces in style units.","pos":[9969,10112],"source":"If `nPenStyle` is **PS_COSMETIC** and **PS_USERSTYLE**, the entries in the `lpStyle` array specify lengths of dashes and spaces in style units."},{"content":"A style unit is defined by the device in which the pen is used to draw a line.","pos":[10113,10191]},{"pos":[10201,10347],"content":"If <ph id=\"ph1\">`nPenStyle`</ph> is <bpt id=\"p1\">**</bpt>PS_GEOMETRIC<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>PS_USERSTYLE<ept id=\"p2\">**</ept>, the entries in the <ph id=\"ph2\">`lpStyle`</ph> array specify lengths of dashes and spaces in logical units.","source":"If `nPenStyle` is **PS_GEOMETRIC** and **PS_USERSTYLE**, the entries in the `lpStyle` array specify lengths of dashes and spaces in logical units."},{"pos":[10357,10448],"content":"If <ph id=\"ph1\">`nPenStyle`</ph> is <bpt id=\"p1\">**</bpt>PS_ALTERNATE<ept id=\"p1\">**</ept>, the style unit is ignored and every other pixel is set.","source":"If `nPenStyle` is **PS_ALTERNATE**, the style unit is ignored and every other pixel is set."},{"content":"When an application no longer requires a given pen, it should call the <bpt id=\"p1\">[</bpt>CGdiObject::DeleteObject<ept id=\"p1\">](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject)</ept> member function or destroy the <ph id=\"ph1\">`CPen`</ph> object so the resource is no longer in use.","pos":[10455,10700],"source":"When an application no longer requires a given pen, it should call the [CGdiObject::DeleteObject](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject) member function or destroy the `CPen` object so the resource is no longer in use."},{"content":"An application should not delete a pen when the pen is selected in a device context.","pos":[10701,10785]},{"pos":[10795,10802],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10806,10881],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#100<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpen-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#100](../../mfc/codesnippet/cpp/cpen-class_2.cpp)]"},{"pos":[10891,10954],"content":"<bpt id=\"p1\">&lt;a name=\"cpen__createpenindirect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPen::CreatePenIndirect","linkify":"<a name=\"cpen__createpenindirect\"></a>  CPen::CreatePenIndirect","source":"<a name=\"cpen__createpenindirect\"></a>  CPen::CreatePenIndirect"},{"pos":[10958,11061],"content":"Initializes a pen that has the style, width, and color given in the structure pointed to by <ph id=\"ph1\">`lpLogPen`</ph>.","source":"Initializes a pen that has the style, width, and color given in the structure pointed to by `lpLogPen`."},{"pos":[11129,11139],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the Windows <bpt id=\"p1\">[</bpt>LOGPEN<ept id=\"p1\">](../../mfc/reference/logpen-structure.md)</ept> structure that contains information about the pen.","pos":[11157,11279],"source":" Points to the Windows [LOGPEN](../../mfc/reference/logpen-structure.md) structure that contains information about the pen."},{"pos":[11289,11301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the function is successful; otherwise 0.","pos":[11305,11356]},{"pos":[11366,11373],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11377,11506],"content":"Pens that have a width greater than 1 pixel should always have either the <bpt id=\"p1\">**</bpt>PS_NULL<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>PS_SOLID<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>PS_INSIDEFRAME<ept id=\"p3\">**</ept> style.","source":"Pens that have a width greater than 1 pixel should always have either the **PS_NULL**, **PS_SOLID**, or **PS_INSIDEFRAME** style."},{"content":"If a pen has the <bpt id=\"p1\">**</bpt>PS_INSIDEFRAME<ept id=\"p1\">**</ept> style and a color that does not match a color in the logical color table, the pen is drawn with a dithered color.","pos":[11513,11662],"source":"If a pen has the **PS_INSIDEFRAME** style and a color that does not match a color in the logical color table, the pen is drawn with a dithered color."},{"content":"The <bpt id=\"p1\">**</bpt>PS_INSIDEFRAME<ept id=\"p1\">**</ept> style is identical to <bpt id=\"p2\">**</bpt>PS_SOLID<ept id=\"p2\">**</ept> if the pen width is less than or equal to 1.","pos":[11663,11765],"source":" The **PS_INSIDEFRAME** style is identical to **PS_SOLID** if the pen width is less than or equal to 1."},{"pos":[11775,11782],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11786,11861],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#101<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpen-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#101](../../mfc/codesnippet/cpp/cpen-class_3.cpp)]"},{"pos":[11871,11920],"content":"<bpt id=\"p1\">&lt;a name=\"cpen__fromhandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPen::FromHandle","linkify":"<a name=\"cpen__fromhandle\"></a>  CPen::FromHandle","source":"<a name=\"cpen__fromhandle\"></a>  CPen::FromHandle"},{"pos":[11924,12004],"content":"Returns a pointer to a <ph id=\"ph1\">`CPen`</ph> object given a handle to a Windows GDI pen object.","source":"Returns a pointer to a `CPen` object given a handle to a Windows GDI pen object."},{"pos":[12072,12082],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>hPen<ept id=\"p1\">*</ept>","pos":[12086,12092],"source":"*hPen*"},{"content":"<ph id=\"ph1\"> `HPEN`</ph> handle to Windows GDI pen.","pos":[12095,12129],"source":" `HPEN` handle to Windows GDI pen."},{"pos":[12139,12151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12155,12218],"content":"A pointer to a <ph id=\"ph1\">`CPen`</ph> object if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A pointer to a `CPen` object if successful; otherwise **NULL**."},{"pos":[12228,12235],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If a <ph id=\"ph1\">`CPen`</ph> object is not attached to the handle, a temporary <ph id=\"ph2\">`CPen`</ph> object is created and attached.","pos":[12239,12339],"source":"If a `CPen` object is not attached to the handle, a temporary `CPen` object is created and attached."},{"content":"This temporary <ph id=\"ph1\">`CPen`</ph> object is valid only until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted.","pos":[12340,12508],"source":" This temporary `CPen` object is valid only until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted."},{"content":"In other words, the temporary object is only valid during the processing of one window message.","pos":[12509,12604]},{"pos":[12614,12621],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12625,12700],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#105<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpen-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#105](../../mfc/codesnippet/cpp/cpen-class_4.cpp)]"},{"pos":[12710,12763],"content":"<bpt id=\"p1\">&lt;a name=\"cpen__getextlogpen\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPen::GetExtLogPen","linkify":"<a name=\"cpen__getextlogpen\"></a>  CPen::GetExtLogPen","source":"<a name=\"cpen__getextlogpen\"></a>  CPen::GetExtLogPen"},{"pos":[12767,12810],"content":"Gets an <bpt id=\"p1\">**</bpt>EXTLOGPEN<ept id=\"p1\">**</ept> underlying structure.","source":"Gets an **EXTLOGPEN** underlying structure."},{"pos":[12873,12883],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to an <bpt id=\"p1\">[</bpt>EXTLOGPEN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162711)</ept> structure that contains information about the pen.","pos":[12900,13035],"source":" Points to an [EXTLOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd162711) structure that contains information about the pen."},{"pos":[13045,13057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[13061,13096]},{"pos":[13106,13113],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">**</bpt>EXTLOGPEN<ept id=\"p1\">**</ept> structure defines the style, width, and brush attributes of a pen.","pos":[13117,13201],"source":"The **EXTLOGPEN** structure defines the style, width, and brush attributes of a pen."},{"content":"For example, call <ph id=\"ph1\">`GetExtLogPen`</ph> to match the particular style of a pen.","pos":[13202,13274],"source":" For example, call `GetExtLogPen` to match the particular style of a pen."},{"pos":[13281,13402],"content":"See the following topics in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for information about pen attributes:","source":"See the following topics in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for information about pen attributes:"},{"pos":[13410,13481],"content":"<bpt id=\"p1\">[</bpt>GetObject<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144904)</ept>","source":"[GetObject](http://msdn.microsoft.com/library/windows/desktop/dd144904)"},{"pos":[13489,13560],"content":"<bpt id=\"p1\">[</bpt>EXTLOGPEN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162711)</ept>","source":"[EXTLOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd162711)"},{"pos":[13568,13636],"content":"<bpt id=\"p1\">[</bpt>LOGPEN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145041)</ept>","source":"[LOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd145041)"},{"pos":[13644,13718],"content":"<bpt id=\"p1\">[</bpt>ExtCreatePen<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162705)</ept>","source":"[ExtCreatePen](http://msdn.microsoft.com/library/windows/desktop/dd162705)"},{"pos":[13728,13735],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13739,13890],"content":"The following code example demonstrates calling <ph id=\"ph1\">`GetExtLogPen`</ph> to retrieve a pen's attributes, and then create a new, cosmetic pen with the same color.","source":"The following code example demonstrates calling `GetExtLogPen` to retrieve a pen's attributes, and then create a new, cosmetic pen with the same color."},{"pos":[13897,13972],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#102<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpen-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#102](../../mfc/codesnippet/cpp/cpen-class_5.cpp)]"},{"pos":[13982,14029],"content":"<bpt id=\"p1\">&lt;a name=\"cpen__getlogpen\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPen::GetLogPen","linkify":"<a name=\"cpen__getlogpen\"></a>  CPen::GetLogPen","source":"<a name=\"cpen__getlogpen\"></a>  CPen::GetLogPen"},{"pos":[14033,14070],"content":"Gets a <ph id=\"ph1\">`LOGPEN`</ph> underlying structure.","source":"Gets a `LOGPEN` underlying structure."},{"pos":[14127,14137],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to a <bpt id=\"p1\">[</bpt>LOGPEN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145041)</ept> structure to contain information about the pen.","pos":[14154,14282],"source":" Points to a [LOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd145041) structure to contain information about the pen."},{"pos":[14292,14304],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[14308,14343]},{"pos":[14353,14360],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14364,14434],"content":"The <ph id=\"ph1\">`LOGPEN`</ph> structure defines the style, color, and pattern of a pen.","source":"The `LOGPEN` structure defines the style, color, and pattern of a pen."},{"pos":[14441,14508],"content":"For example, call <ph id=\"ph1\">`GetLogPen`</ph> to match the particular style of pen.","source":"For example, call `GetLogPen` to match the particular style of pen."},{"pos":[14515,14636],"content":"See the following topics in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for information about pen attributes:","source":"See the following topics in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for information about pen attributes:"},{"pos":[14644,14715],"content":"<bpt id=\"p1\">[</bpt>GetObject<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144904)</ept>","source":"[GetObject](http://msdn.microsoft.com/library/windows/desktop/dd144904)"},{"pos":[14723,14791],"content":"<bpt id=\"p1\">[</bpt>LOGPEN<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145041)</ept>","source":"[LOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd145041)"},{"pos":[14801,14808],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14812,14954],"content":"The following code example demonstrates calling <ph id=\"ph1\">`GetLogPen`</ph> to retrieve a pen character, and then create a new, solid pen with the same color.","source":"The following code example demonstrates calling `GetLogPen` to retrieve a pen character, and then create a new, solid pen with the same color."},{"pos":[14961,15036],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#103<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpen-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#103](../../mfc/codesnippet/cpp/cpen-class_6.cpp)]"},{"pos":[15046,15101],"content":"<bpt id=\"p1\">&lt;a name=\"cpen__operator_hpen\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPen::operator HPEN","linkify":"<a name=\"cpen__operator_hpen\"></a>  CPen::operator HPEN","source":"<a name=\"cpen__operator_hpen\"></a>  CPen::operator HPEN"},{"pos":[15105,15163],"content":"Gets the attached Windows GDI handle of the <ph id=\"ph1\">`CPen`</ph> object.","source":"Gets the attached Windows GDI handle of the `CPen` object."},{"pos":[15214,15226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15230,15333],"content":"If successful, a handle to the Windows GDI object represented by the <ph id=\"ph1\">`CPen`</ph> object; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If successful, a handle to the Windows GDI object represented by the `CPen` object; otherwise **NULL**."},{"pos":[15343,15350],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15354,15437],"content":"This operator is a casting operator, which supports direct use of an <ph id=\"ph1\">`HPEN`</ph> object.","source":"This operator is a casting operator, which supports direct use of an `HPEN` object."},{"pos":[15444,15643],"content":"For more information about using graphic objects, see the article <bpt id=\"p1\">[</bpt>Graphic Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd144962)</ept> in <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information about using graphic objects, see the article [Graphic Objects](http://msdn.microsoft.com/library/windows/desktop/dd144962) in [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[15653,15660],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15664,15739],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCDocView#104<ept id=\"p2\">](../../mfc/codesnippet/cpp/cpen-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCDocView#104](../../mfc/codesnippet/cpp/cpen-class_7.cpp)]"},{"pos":[15748,15756],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CGdiObject Class<ept id=\"p1\">](../../mfc/reference/cgdiobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[15760,15820],"source":"[CGdiObject Class](../../mfc/reference/cgdiobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[15823,15872],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CBrush Class<ept id=\"p1\">](../../mfc/reference/cbrush-class.md)</ept>","pos":[15875,15927],"source":" [CBrush Class](../../mfc/reference/cbrush-class.md)"}],"content":"---\ntitle: \"CPen Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"HPEN\"\n  - \"CPen\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"HPEN\"\n  - \"CPen class\"\n  - \"pens, MFC\"\nms.assetid: 93175a3a-d46c-4768-be8d-863254f97a5f\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CPen Class\nEncapsulates a Windows graphics device interface (GDI) pen.  \n  \n## Syntax  \n  \n```  \nclass CPen : public CGdiObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPen::CPen](#cpen__cpen)|Constructs a `CPen` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPen::CreatePen](#cpen__createpen)|Creates a logical cosmetic or geometric pen with the specified style, width, and brush attributes, and attaches it to the `CPen` object.|  \n|[CPen::CreatePenIndirect](#cpen__createpenindirect)|Creates a pen with the style, width, and color given in a [LOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd145041) structure, and attaches it to the `CPen` object.|  \n|[CPen::FromHandle](#cpen__fromhandle)|Returns a pointer to a `CPen` object when given a Windows `HPEN`.|  \n|[CPen::GetExtLogPen](#cpen__getextlogpen)|Gets an [EXTLOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd162711) underlying structure.|  \n|[CPen::GetLogPen](#cpen__getlogpen)|Gets a [LOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd145041) underlying structure.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPen::operator HPEN](#cpen__operator_hpen)|Returns the Windows handle attached to the `CPen` object.|  \n  \n## Remarks  \n For more information on using `CPen`, see [Graphic Objects](../../mfc/graphic-objects.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CGdiObject](../../mfc/reference/cgdiobject-class.md)  \n  \n `CPen`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cpen__cpen\"></a>  CPen::CPen  \n Constructs a `CPen` object.  \n  \n```  \nCPen();\n\n \nCPen(\n    int nPenStyle,  \n    int nWidth,  \n    COLORREF crColor);\n\n \nCPen(\n    int nPenStyle,  \n    int nWidth,  \n    const LOGBRUSH* pLogBrush,  \n    int nStyleCount = 0,  \n    const DWORD* lpStyle = NULL);\n```  \n  \n### Parameters  \n `nPenStyle`  \n Specifies the pen style. This parameter in the first version of the constructor can be one of the following values:  \n  \n- **PS_SOLID** Creates a solid pen.  \n  \n- **PS_DASH** Creates a dashed pen. Valid only when the pen width is 1 or less, in device units.  \n  \n- **PS_DOT** Creates a dotted pen. Valid only when the pen width is 1 or less, in device units.  \n  \n- **PS_DASHDOT** Creates a pen with alternating dashes and dots. Valid only when the pen width is 1 or less, in device units.  \n  \n- **PS_DASHDOTDOT** Creates a pen with alternating dashes and double dots. Valid only when the pen width is 1 or less, in device units.  \n  \n- **PS_NULL** Creates a null pen.  \n  \n- **PS_INSIDEFRAME** Creates a pen that draws a line inside the frame of closed shapes produced by the Windows GDI output functions that specify a bounding rectangle (for example, the **Ellipse**, **Rectangle**, `RoundRect`, `Pie`, and `Chord` member functions). When this style is used with Windows GDI output functions that do not specify a bounding rectangle (for example, the `LineTo` member function), the drawing area of the pen is not limited by a frame.  \n  \n The second version of the `CPen` constructor specifies a combination of type, style, end cap, and join attributes. The values from each category should be combined by using the bitwise OR operator (&#124;). The pen type can be one of the following values:  \n  \n- **PS_GEOMETRIC** Creates a geometric pen.  \n  \n- **PS_COSMETIC** Creates a cosmetic pen.  \n  \n     The second version of the `CPen` constructor adds the following pen styles for `nPenStyle`:  \n  \n- **PS_ALTERNATE** Creates a pen that sets every other pixel. (This style is applicable only for cosmetic pens.)  \n  \n- **PS_USERSTYLE** Creates a pen that uses a styling array supplied by the user.  \n  \n     The end cap can be one of the following values:  \n  \n- **PS_ENDCAP_ROUND** End caps are round.  \n  \n- **PS_ENDCAP_SQUARE** End caps are square.  \n  \n- **PS_ENDCAP_FLAT** End caps are flat.  \n  \n     The join can be one of the following values:  \n  \n- **PS_JOIN_BEVEL** Joins are beveled.  \n  \n- **PS_JOIN_MITER** Joins are mitered when they are within the current limit set by the [SetMiterLimit](http://msdn.microsoft.com/library/windows/desktop/dd145076) function. If the join exceeds this limit, it is beveled.  \n  \n- **PS_JOIN_ROUND** Joins are round.  \n  \n `nWidth`  \n Specifies the width of the pen.  \n  \n-   For the first version of the constructor, if this value is 0, the width in device units is always 1 pixel, regardless of the mapping mode.  \n  \n-   For the second version of the constructor, if `nPenStyle` is **PS_GEOMETRIC**, the width is given in logical units. If `nPenStyle` is **PS_COSMETIC**, the width must be set to 1.  \n  \n `crColor`  \n Contains an RGB color for the pen.  \n  \n `pLogBrush`  \n Points to a `LOGBRUSH` structure. If `nPenStyle` is **PS_COSMETIC**, the `lbColor` member of the `LOGBRUSH` structure specifies the color of the pen and the `lbStyle` member of the `LOGBRUSH` structure must be set to **BS_SOLID**. If `nPenStyle` is **PS_GEOMETRIC**, all members must be used to specify the brush attributes of the pen.  \n  \n `nStyleCount`  \n Specifies the length, in doubleword units, of the `lpStyle` array. This value must be zero if `nPenStyle` is not **PS_USERSTYLE**.  \n  \n `lpStyle`  \n Points to an array of doubleword values. The first value specifies the length of the first dash in a user-defined style, the second value specifies the length of the first space, and so on. This pointer must be **NULL** if `nPenStyle` is not **PS_USERSTYLE**.  \n  \n### Remarks  \n If you use the constructor with no arguments, you must initialize the resulting `CPen` object with the `CreatePen`, `CreatePenIndirect`, or `CreateStockObject` member functions.  \n  \n If you use the constructor that takes arguments, then no further initialization is necessary. The constructor with arguments can throw an exception if errors are encountered, while the constructor with no arguments will always succeed.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#99](../../mfc/codesnippet/cpp/cpen-class_1.cpp)]  \n  \n##  <a name=\"cpen__createpen\"></a>  CPen::CreatePen  \n Creates a logical cosmetic or geometric pen with the specified style, width, and brush attributes, and attaches it to the `CPen` object.  \n  \n```  \nBOOL CreatePen(\n    int nPenStyle,  \n    int nWidth,  \n    COLORREF crColor);\n\n \nBOOL CreatePen(\n    int nPenStyle,  \n    int nWidth,  \n    const LOGBRUSH* pLogBrush,  \n    int nStyleCount = 0,  \n    const DWORD* lpStyle = NULL);\n```  \n  \n### Parameters  \n `nPenStyle`  \n Specifies the style for the pen. For a list of possible values, see the `nPenStyle` parameter in the [CPen](#cpen__cpen) constructor.  \n  \n `nWidth`  \n Specifies the width of the pen.  \n  \n-   For the first version of `CreatePen`, if this value is 0, the width in device units is always 1 pixel, regardless of the mapping mode.  \n  \n-   For the second version of `CreatePen`, if `nPenStyle` is **PS_GEOMETRIC**, the width is given in logical units. If `nPenStyle` is **PS_COSMETIC**, the width must be set to 1.  \n  \n `crColor`  \n Contains an RGB color for the pen.  \n  \n `pLogBrush`  \n Points to a [LOGBRUSH](http://msdn.microsoft.com/library/windows/desktop/dd145035) structure. If `nPenStyle` is **PS_COSMETIC**, the **lbColor** member of the `LOGBRUSH` structure specifies the color of the pen and the `lbStyle` member of the `LOGBRUSH` structure must be set to **BS_SOLID**. If **nPenStyle** is **PS_GEOMETRIC**, all members must be used to specify the brush attributes of the pen.  \n  \n `nStyleCount`  \n Specifies the length, in doubleword units, of the `lpStyle` array. This value must be zero if `nPenStyle` is not **PS_USERSTYLE**.  \n  \n `lpStyle`  \n Points to an array of doubleword values. The first value specifies the length of the first dash in a user-defined style, the second value specifies the length of the first space, and so on. This pointer must be **NULL** if `nPenStyle` is not **PS_USERSTYLE**.  \n  \n### Return Value  \n Nonzero if successful, or zero if the method fails.  \n  \n### Remarks  \n The first version of `CreatePen` initializes a pen with the specified style, width, and color. The pen can be subsequently selected as the current pen for any device context.  \n  \n Pens that have a width greater than 1 pixel should always have either the **PS_NULL**, **PS_SOLID**, or **PS_INSIDEFRAME** style.  \n  \n If a pen has the **PS_INSIDEFRAME** style and a color that does not match a color in the logical color table, the pen is drawn with a dithered color. The **PS_SOLID** pen style cannot be used to create a pen with a dithered color. The style **PS_INSIDEFRAME** is identical to **PS_SOLID** if the pen width is less than or equal to 1.  \n  \n The second version of `CreatePen` initializes a logical cosmetic or geometric pen that has the specified style, width, and brush attributes. The width of a cosmetic pen is always 1; the width of a geometric pen is always specified in world units. After an application creates a logical pen, it can select that pen into a device context by calling the [CDC::SelectObject](../../mfc/reference/cdc-class.md#cdc__selectobject) function. After a pen is selected into a device context, it can be used to draw lines and curves.  \n  \n-   If `nPenStyle` is **PS_COSMETIC** and **PS_USERSTYLE**, the entries in the `lpStyle` array specify lengths of dashes and spaces in style units. A style unit is defined by the device in which the pen is used to draw a line.  \n  \n-   If `nPenStyle` is **PS_GEOMETRIC** and **PS_USERSTYLE**, the entries in the `lpStyle` array specify lengths of dashes and spaces in logical units.  \n  \n-   If `nPenStyle` is **PS_ALTERNATE**, the style unit is ignored and every other pixel is set.  \n  \n When an application no longer requires a given pen, it should call the [CGdiObject::DeleteObject](../../mfc/reference/cgdiobject-class.md#cgdiobject__deleteobject) member function or destroy the `CPen` object so the resource is no longer in use. An application should not delete a pen when the pen is selected in a device context.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#100](../../mfc/codesnippet/cpp/cpen-class_2.cpp)]  \n  \n##  <a name=\"cpen__createpenindirect\"></a>  CPen::CreatePenIndirect  \n Initializes a pen that has the style, width, and color given in the structure pointed to by `lpLogPen`.  \n  \n```  \nBOOL CreatePenIndirect(LPLOGPEN lpLogPen);\n```  \n  \n### Parameters  \n `lpLogPen`  \n Points to the Windows [LOGPEN](../../mfc/reference/logpen-structure.md) structure that contains information about the pen.  \n  \n### Return Value  \n Nonzero if the function is successful; otherwise 0.  \n  \n### Remarks  \n Pens that have a width greater than 1 pixel should always have either the **PS_NULL**, **PS_SOLID**, or **PS_INSIDEFRAME** style.  \n  \n If a pen has the **PS_INSIDEFRAME** style and a color that does not match a color in the logical color table, the pen is drawn with a dithered color. The **PS_INSIDEFRAME** style is identical to **PS_SOLID** if the pen width is less than or equal to 1.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#101](../../mfc/codesnippet/cpp/cpen-class_3.cpp)]  \n  \n##  <a name=\"cpen__fromhandle\"></a>  CPen::FromHandle  \n Returns a pointer to a `CPen` object given a handle to a Windows GDI pen object.  \n  \n```  \nstatic CPen* PASCAL FromHandle(HPEN hPen);\n```  \n  \n### Parameters  \n *hPen*  \n `HPEN` handle to Windows GDI pen.  \n  \n### Return Value  \n A pointer to a `CPen` object if successful; otherwise **NULL**.  \n  \n### Remarks  \n If a `CPen` object is not attached to the handle, a temporary `CPen` object is created and attached. This temporary `CPen` object is valid only until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted. In other words, the temporary object is only valid during the processing of one window message.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#105](../../mfc/codesnippet/cpp/cpen-class_4.cpp)]  \n  \n##  <a name=\"cpen__getextlogpen\"></a>  CPen::GetExtLogPen  \n Gets an **EXTLOGPEN** underlying structure.  \n  \n```  \nint GetExtLogPen(EXTLOGPEN* pLogPen);\n```  \n  \n### Parameters  \n `pLogPen`  \n Points to an [EXTLOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd162711) structure that contains information about the pen.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The **EXTLOGPEN** structure defines the style, width, and brush attributes of a pen. For example, call `GetExtLogPen` to match the particular style of a pen.  \n  \n See the following topics in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for information about pen attributes:  \n  \n- [GetObject](http://msdn.microsoft.com/library/windows/desktop/dd144904)  \n  \n- [EXTLOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd162711)  \n  \n- [LOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd145041)  \n  \n- [ExtCreatePen](http://msdn.microsoft.com/library/windows/desktop/dd162705)  \n  \n### Example  \n The following code example demonstrates calling `GetExtLogPen` to retrieve a pen's attributes, and then create a new, cosmetic pen with the same color.  \n  \n [!code-cpp[NVC_MFCDocView#102](../../mfc/codesnippet/cpp/cpen-class_5.cpp)]  \n  \n##  <a name=\"cpen__getlogpen\"></a>  CPen::GetLogPen  \n Gets a `LOGPEN` underlying structure.  \n  \n```  \nint GetLogPen(LOGPEN* pLogPen);\n```  \n  \n### Parameters  \n `pLogPen`  \n Points to a [LOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd145041) structure to contain information about the pen.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The `LOGPEN` structure defines the style, color, and pattern of a pen.  \n  \n For example, call `GetLogPen` to match the particular style of pen.  \n  \n See the following topics in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for information about pen attributes:  \n  \n- [GetObject](http://msdn.microsoft.com/library/windows/desktop/dd144904)  \n  \n- [LOGPEN](http://msdn.microsoft.com/library/windows/desktop/dd145041)  \n  \n### Example  \n The following code example demonstrates calling `GetLogPen` to retrieve a pen character, and then create a new, solid pen with the same color.  \n  \n [!code-cpp[NVC_MFCDocView#103](../../mfc/codesnippet/cpp/cpen-class_6.cpp)]  \n  \n##  <a name=\"cpen__operator_hpen\"></a>  CPen::operator HPEN  \n Gets the attached Windows GDI handle of the `CPen` object.  \n  \n```  \noperator HPEN() const;\n\n \n```  \n  \n### Return Value  \n If successful, a handle to the Windows GDI object represented by the `CPen` object; otherwise **NULL**.  \n  \n### Remarks  \n This operator is a casting operator, which supports direct use of an `HPEN` object.  \n  \n For more information about using graphic objects, see the article [Graphic Objects](http://msdn.microsoft.com/library/windows/desktop/dd144962) in [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#104](../../mfc/codesnippet/cpp/cpen-class_7.cpp)]  \n  \n## See Also  \n [CGdiObject Class](../../mfc/reference/cgdiobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CBrush Class](../../mfc/reference/cbrush-class.md)\n"}