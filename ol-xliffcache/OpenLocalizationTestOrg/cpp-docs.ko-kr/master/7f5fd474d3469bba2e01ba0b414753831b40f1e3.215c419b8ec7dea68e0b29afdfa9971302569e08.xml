{"nodes":[{"pos":[12,52],"content":"single_assignment Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"single_assignment Class | Microsoft Docs","pos":[0,40]}]},{"content":"single_assignment Class","pos":[643,666]},{"pos":[667,815],"content":"A <ph id=\"ph1\">`single_assignment`</ph> messaging block is a multi-target, multi-source, ordered <ph id=\"ph2\">`propagator_block`</ph> capable of storing a single, write-once <ph id=\"ph3\">`message`</ph>.","source":"A `single_assignment` messaging block is a multi-target, multi-source, ordered `propagator_block` capable of storing a single, write-once `message`."},{"content":"Syntax","pos":[824,830]},{"content":"Parameters","pos":[989,999]},{"content":"The payload type of the message stored and propagated by the buffer.","pos":[1010,1078]},{"content":"Members","pos":[1087,1094]},{"content":"Public Constructors","pos":[1104,1123]},{"content":"Name","pos":[1130,1134]},{"content":"Description","pos":[1135,1146]},{"content":"single_assignment::single_assignment Constructor","pos":[1185,1233]},{"content":"Overloaded.","pos":[1242,1253]},{"content":"Constructs a <ph id=\"ph1\">`single_assignment`</ph> messaging block.","pos":[1254,1303],"source":" Constructs a `single_assignment` messaging block."},{"content":"single_assignment::~single_assignment Destructor","pos":[1309,1357]},{"pos":[1366,1415],"content":"Destroys the <ph id=\"ph1\">`single_assignment`</ph> messaging block.","source":"Destroys the `single_assignment` messaging block."},{"content":"Public Methods","pos":[1426,1440]},{"content":"Name","pos":[1447,1451]},{"content":"Description","pos":[1452,1463]},{"content":"single_assignment::has_value Method","pos":[1502,1537]},{"pos":[1551,1645],"content":"Checks whether this <ph id=\"ph1\">`single_assignment`</ph> messaging block has been initialized with a value yet.","source":"Checks whether this `single_assignment` messaging block has been initialized with a value yet."},{"content":"single_assignment::value Method","pos":[1651,1682]},{"pos":[1692,1803],"content":"Gets a reference to the current payload of the message being stored in the <ph id=\"ph1\">`single_assignment`</ph> messaging block.","source":"Gets a reference to the current payload of the message being stored in the `single_assignment` messaging block."},{"content":"Protected Methods","pos":[1814,1831]},{"content":"Name","pos":[1838,1842]},{"content":"Description","pos":[1843,1854]},{"content":"single_assignment::accept_message Method","pos":[1893,1933]},{"pos":[1952,2078],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`single_assignment`</ph> messaging block, returning a copy of the message to the caller.","source":"Accepts a message that was offered by this `single_assignment` messaging block, returning a copy of the message to the caller."},{"content":"single_assignment::consume_message Method","pos":[2084,2125]},{"pos":[2145,2284],"content":"Consumes a message previously offered by the <ph id=\"ph1\">`single_assignment`</ph> and reserved by the target, returning a copy of the message to the caller.","source":"Consumes a message previously offered by the `single_assignment` and reserved by the target, returning a copy of the message to the caller."},{"content":"single_assignment::link_target_notification Method","pos":[2290,2340]},{"pos":[2369,2472],"content":"A callback that notifies that a new target has been linked to this <ph id=\"ph1\">`single_assignment`</ph> messaging block.","source":"A callback that notifies that a new target has been linked to this `single_assignment` messaging block."},{"content":"single_assignment::propagate_message Method","pos":[2478,2521]},{"content":"Asynchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`single_assignment`</ph> messaging block.","pos":[2543,2643],"source":"Asynchronously passes a message from an `ISource` block to this `single_assignment` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`propagate`</ph> method, when called by a source block.","pos":[2644,2715],"source":" It is invoked by the `propagate` method, when called by a source block."},{"content":"single_assignment::propagate_to_any_targets Method","pos":[2721,2771]},{"pos":[2800,2919],"content":"Places the <ph id=\"ph1\">`message``_PMessage`</ph> in this <ph id=\"ph2\">`single_assignment`</ph> messaging block and offers it to all of the linked targets.","source":"Places the `message``_PMessage` in this `single_assignment` messaging block and offers it to all of the linked targets."},{"content":"single_assignment::release_message Method","pos":[2925,2966]},{"content":"Releases a previous message reservation.","pos":[2986,3026]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>source_block::release_message<ept id=\"p1\">](source-block-class.md#release_message)</ept>.)","pos":[3027,3110],"source":" (Overrides [source_block::release_message](source-block-class.md#release_message).)"},{"content":"single_assignment::reserve_message Method","pos":[3116,3157]},{"content":"Reserves a message previously offered by this <ph id=\"ph1\">`single_assignment`</ph> messaging block.","pos":[3177,3259],"source":"Reserves a message previously offered by this `single_assignment` messaging block."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>source_block::reserve_message<ept id=\"p1\">](source-block-class.md#reserve_message)</ept>.)","pos":[3260,3343],"source":" (Overrides [source_block::reserve_message](source-block-class.md#reserve_message).)"},{"content":"single_assignment::resume_propagation Method","pos":[3349,3393]},{"content":"Resumes propagation after a reservation has been released.","pos":[3416,3474]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>source_block::resume_propagation<ept id=\"p1\">](source-block-class.md#resume_propagation)</ept>.)","pos":[3475,3564],"source":" (Overrides [source_block::resume_propagation](source-block-class.md#resume_propagation).)"},{"content":"single_assignment::send_message Method","pos":[3570,3608]},{"content":"Synchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`single_assignment`</ph> messaging block.","pos":[3625,3724],"source":"Synchronously passes a message from an `ISource` block to this `single_assignment` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`send`</ph> method, when called by a source block.","pos":[3725,3791],"source":" It is invoked by the `send` method, when called by a source block."},{"content":"Remarks","pos":[3801,3808]},{"pos":[3812,3902],"content":"A <ph id=\"ph1\">`single_assignment`</ph> messaging block propagates out copies of its message to each target.","source":"A `single_assignment` messaging block propagates out copies of its message to each target."},{"pos":[3909,4022],"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Message Blocks<ept id=\"p1\">](../../../parallel/concrt/asynchronous-message-blocks.md)</ept>.","source":"For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md)."},{"content":"Inheritance Hierarchy","pos":[4031,4052]},{"content":"ISource","pos":[4057,4064]},{"content":"ITarget","pos":[4091,4098]},{"content":"source_block","pos":[4125,4137]},{"content":"propagator_block","pos":[4169,4185]},{"content":"Requirements","pos":[4248,4260]},{"pos":[4264,4284],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[4291,4317],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[4358,4398],"content":"single_assignment::accept_message Method"},{"pos":[4402,4528],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`single_assignment`</ph> messaging block, returning a copy of the message to the caller.","source":"Accepts a message that was offered by this `single_assignment` messaging block, returning a copy of the message to the caller."},{"content":"Parameters","pos":[4619,4629]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the offered <ph id=\"ph2\">`message`</ph> object.","pos":[4645,4707],"source":" The `runtime_object_identity` of the offered `message` object."},{"content":"Return Value","pos":[4717,4729]},{"pos":[4733,4804],"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object that the caller now has ownership of.","source":"A pointer to the `message` object that the caller now has ownership of."},{"content":"Remarks","pos":[4814,4821]},{"pos":[4825,4976],"content":"The <ph id=\"ph1\">`single_assignment`</ph> messaging block returns copies of the message to its targets, rather than transferring ownership of the currently held message.","source":"The `single_assignment` messaging block returns copies of the message to its targets, rather than transferring ownership of the currently held message."},{"pos":[5018,5059],"content":"single_assignment::consume_message Method"},{"pos":[5063,5202],"content":"Consumes a message previously offered by the <ph id=\"ph1\">`single_assignment`</ph> and reserved by the target, returning a copy of the message to the caller.","source":"Consumes a message previously offered by the `single_assignment` and reserved by the target, returning a copy of the message to the caller."},{"content":"Parameters","pos":[5294,5304]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being consumed.","pos":[5320,5389],"source":" The `runtime_object_identity` of the `message` object being consumed."},{"content":"Return Value","pos":[5399,5411]},{"pos":[5415,5486],"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object that the caller now has ownership of.","source":"A pointer to the `message` object that the caller now has ownership of."},{"content":"Remarks","pos":[5496,5503]},{"pos":[5507,5574],"content":"Similar to <ph id=\"ph1\">`accept`</ph>, but is always preceded by a call to <ph id=\"ph2\">`reserve`</ph>.","source":"Similar to `accept`, but is always preceded by a call to `reserve`."},{"pos":[5610,5645],"content":"single_assignment::has_value Method"},{"pos":[5649,5743],"content":"Checks whether this <ph id=\"ph1\">`single_assignment`</ph> messaging block has been initialized with a value yet.","source":"Checks whether this `single_assignment` messaging block has been initialized with a value yet."},{"content":"Return Value","pos":[5790,5802]},{"pos":[5813,5866],"content":"if the block has received a value, <ph id=\"ph1\">`false`</ph> otherwise.","source":" if the block has received a value, `false` otherwise."},{"pos":[5917,5967],"content":"single_assignment::link_target_notification Method"},{"pos":[5971,6074],"content":"A callback that notifies that a new target has been linked to this <ph id=\"ph1\">`single_assignment`</ph> messaging block.","source":"A callback that notifies that a new target has been linked to this `single_assignment` messaging block."},{"content":"Parameters","pos":[6166,6176]},{"content":"A pointer to the newly linked target.","pos":[6194,6231]},{"pos":[6275,6318],"content":"single_assignment::propagate_message Method"},{"content":"Asynchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`single_assignment`</ph> messaging block.","pos":[6322,6422],"source":"Asynchronously passes a message from an `ISource` block to this `single_assignment` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`propagate`</ph> method, when called by a source block.","pos":[6423,6494],"source":" It is invoked by the `propagate` method, when called by a source block."},{"content":"Parameters","pos":[6629,6639]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[6658,6692],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[6713,6764]},{"content":"Return Value","pos":[6774,6786]},{"pos":[6790,6902],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"pos":[6953,7003],"content":"single_assignment::propagate_to_any_targets Method"},{"pos":[7007,7126],"content":"Places the <ph id=\"ph1\">`message``_PMessage`</ph> in this <ph id=\"ph2\">`single_assignment`</ph> messaging block and offers it to all of the linked targets.","source":"Places the `message``_PMessage` in this `single_assignment` messaging block and offers it to all of the linked targets."},{"content":"Parameters","pos":[7223,7233]},{"content":"A pointer to a <ph id=\"ph1\">`message`</ph> that this <ph id=\"ph2\">`single_assignment`</ph> messaging block has taken ownership of.","pos":[7252,7346],"source":" A pointer to a `message` that this `single_assignment` messaging block has taken ownership of."},{"pos":[7388,7429],"content":"single_assignment::release_message Method"},{"content":"Releases a previous message reservation.","pos":[7433,7473]},{"content":"Parameters","pos":[7558,7568]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being released.","pos":[7584,7653],"source":" The `runtime_object_identity` of the `message` object being released."},{"pos":[7695,7736],"content":"single_assignment::reserve_message Method"},{"pos":[7740,7822],"content":"Reserves a message previously offered by this <ph id=\"ph1\">`single_assignment`</ph> messaging block.","source":"Reserves a message previously offered by this `single_assignment` messaging block."},{"content":"Parameters","pos":[7907,7917]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being reserved.","pos":[7933,8002],"source":" The `runtime_object_identity` of the `message` object being reserved."},{"content":"Return Value","pos":[8012,8024]},{"pos":[8035,8095],"content":"if the message was successfully reserved, <ph id=\"ph1\">`false`</ph> otherwise.","source":" if the message was successfully reserved, `false` otherwise."},{"content":"Remarks","pos":[8105,8112]},{"pos":[8116,8261],"content":"After <ph id=\"ph1\">`reserve`</ph> is called, if it returns <ph id=\"ph2\">`true`</ph>, either <ph id=\"ph3\">`consume`</ph> or <ph id=\"ph4\">`release`</ph> must be called to either take or release ownership of the message.","source":"After `reserve` is called, if it returns `true`, either `consume` or `release` must be called to either take or release ownership of the message."},{"pos":[8306,8350],"content":"single_assignment::resume_propagation Method"},{"content":"Resumes propagation after a reservation has been released.","pos":[8354,8412]},{"pos":[8499,8537],"content":"single_assignment::send_message Method"},{"content":"Synchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`single_assignment`</ph> messaging block.","pos":[8541,8640],"source":"Synchronously passes a message from an `ISource` block to this `single_assignment` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`send`</ph> method, when called by a source block.","pos":[8641,8707],"source":" It is invoked by the `send` method, when called by a source block."},{"content":"Parameters","pos":[8837,8847]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[8866,8900],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[8921,8972]},{"content":"Return Value","pos":[8982,8994]},{"pos":[8998,9110],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"pos":[9141,9189],"content":"single_assignment::single_assignment Constructor"},{"pos":[9193,9242],"content":"Constructs a <ph id=\"ph1\">`single_assignment`</ph> messaging block.","source":"Constructs a `single_assignment` messaging block."},{"content":"Parameters","pos":[9621,9631]},{"content":"A filter function which determines whether offered messages should be accepted.","pos":[9648,9727]},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object within which the propagation task for the <ph id=\"ph2\">`single_assignment`</ph> messaging block is scheduled.","pos":[9751,9865],"source":" The `Scheduler` object within which the propagation task for the `single_assignment` messaging block is scheduled."},{"content":"The <ph id=\"ph1\">`ScheduleGroup`</ph> object within which the propagation task for the <ph id=\"ph2\">`single_assignment`</ph> messaging block is scheduled.","pos":[9893,10011],"source":" The `ScheduleGroup` object within which the propagation task for the `single_assignment` messaging block is scheduled."},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object used is implied by the schedule group.","pos":[10012,10073],"source":" The `Scheduler` object used is implied by the schedule group."},{"content":"Remarks","pos":[10083,10090]},{"pos":[10094,10205],"content":"The runtime uses the default scheduler if you do not specify the <ph id=\"ph1\">`_PScheduler`</ph> or <ph id=\"ph2\">`_PScheduleGroup`</ph> parameters.","source":"The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PScheduleGroup` parameters."},{"pos":[10212,10409],"content":"The type <ph id=\"ph1\">`filter_method`</ph> is a functor with signature <ph id=\"ph2\">`bool (T const &amp;)`</ph> which is invoked by this <ph id=\"ph3\">`single_assignment`</ph> messaging block to determine whether or not it should accept an offered message.","source":"The type `filter_method` is a functor with signature `bool (T const &)` which is invoked by this `single_assignment` messaging block to determine whether or not it should accept an offered message."},{"pos":[10440,10488],"content":"single_assignment::~single_assignment Destructor"},{"pos":[10492,10541],"content":"Destroys the <ph id=\"ph1\">`single_assignment`</ph> messaging block.","source":"Destroys the `single_assignment` messaging block."},{"pos":[10608,10639],"content":"single_assignment::value Method"},{"pos":[10643,10754],"content":"Gets a reference to the current payload of the message being stored in the <ph id=\"ph1\">`single_assignment`</ph> messaging block.","source":"Gets a reference to the current payload of the message being stored in the `single_assignment` messaging block."},{"content":"Return Value","pos":[10795,10807]},{"content":"The payload of the stored message.","pos":[10811,10845]},{"content":"Remarks","pos":[10855,10862]},{"pos":[10866,10989],"content":"This method will wait until a message arrives if no message is currently stored in the <ph id=\"ph1\">`single_assignment`</ph> messaging block.","source":"This method will wait until a message arrives if no message is currently stored in the `single_assignment` messaging block."},{"content":"See Also","pos":[10998,11006]},{"content":"concurrency Namespace","pos":[11011,11032]},{"content":"overwrite_buffer Class","pos":[11065,11087]},{"content":"unbounded_buffer Class","pos":[11121,11143]}],"content":"---\ntitle: \"single_assignment Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::single_assignment\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"single_assignment class\"\nms.assetid: ccc34728-8de9-4e07-b83d-a36a58d9d2b9\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# single_assignment Class\nA `single_assignment` messaging block is a multi-target, multi-source, ordered `propagator_block` capable of storing a single, write-once `message`.  \n  \n## Syntax  \n  \n```\ntemplate<class T>\nclass single_assignment : public propagator_block<multi_link_registry<ITarget<T>>, multi_link_registry<ISource<T>>>;\n```  \n  \n#### Parameters  \n `T`  \n The payload type of the message stored and propagated by the buffer.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[single_assignment::single_assignment Constructor](#ctor)|Overloaded. Constructs a `single_assignment` messaging block.|  \n|[single_assignment::~single_assignment Destructor](#dtor)|Destroys the `single_assignment` messaging block.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[single_assignment::has_value Method](#has_value)|Checks whether this `single_assignment` messaging block has been initialized with a value yet.|  \n|[single_assignment::value Method](#value)|Gets a reference to the current payload of the message being stored in the `single_assignment` messaging block.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[single_assignment::accept_message Method](#accept_message)|Accepts a message that was offered by this `single_assignment` messaging block, returning a copy of the message to the caller.|  \n|[single_assignment::consume_message Method](#consume_message)|Consumes a message previously offered by the `single_assignment` and reserved by the target, returning a copy of the message to the caller.|  \n|[single_assignment::link_target_notification Method](#link_target_notification)|A callback that notifies that a new target has been linked to this `single_assignment` messaging block.|  \n|[single_assignment::propagate_message Method](#propagate_message)|Asynchronously passes a message from an `ISource` block to this `single_assignment` messaging block. It is invoked by the `propagate` method, when called by a source block.|  \n|[single_assignment::propagate_to_any_targets Method](#propagate_to_any_targets)|Places the `message``_PMessage` in this `single_assignment` messaging block and offers it to all of the linked targets.|  \n|[single_assignment::release_message Method](#release_message)|Releases a previous message reservation. (Overrides [source_block::release_message](source-block-class.md#release_message).)|  \n|[single_assignment::reserve_message Method](#reserve_message)|Reserves a message previously offered by this `single_assignment` messaging block. (Overrides [source_block::reserve_message](source-block-class.md#reserve_message).)|  \n|[single_assignment::resume_propagation Method](#resume_propagation)|Resumes propagation after a reservation has been released. (Overrides [source_block::resume_propagation](source-block-class.md#resume_propagation).)|  \n|[single_assignment::send_message Method](#send_message)|Synchronously passes a message from an `ISource` block to this `single_assignment` messaging block. It is invoked by the `send` method, when called by a source block.|  \n  \n## Remarks  \n A `single_assignment` messaging block propagates out copies of its message to each target.  \n  \n For more information, see [Asynchronous Message Blocks](../../../parallel/concrt/asynchronous-message-blocks.md).  \n  \n## Inheritance Hierarchy  \n [ISource](isource-class.md)  \n  \n [ITarget](itarget-class.md)  \n  \n [source_block](source-block-class.md)  \n  \n [propagator_block](propagator-block-class.md)  \n  \n `single_assignment`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"accept_message\"></a>  single_assignment::accept_message Method  \n Accepts a message that was offered by this `single_assignment` messaging block, returning a copy of the message to the caller.  \n  \n```\nvirtual message<T>* accept_message(runtime_object_identity _MsgId);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the offered `message` object.  \n  \n### Return Value  \n A pointer to the `message` object that the caller now has ownership of.  \n  \n### Remarks  \n The `single_assignment` messaging block returns copies of the message to its targets, rather than transferring ownership of the currently held message.  \n  \n##  <a name=\"consume_message\"></a>  single_assignment::consume_message Method  \n Consumes a message previously offered by the `single_assignment` and reserved by the target, returning a copy of the message to the caller.  \n  \n```\nvirtual message<T>* consume_message(runtime_object_identity _MsgId);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being consumed.  \n  \n### Return Value  \n A pointer to the `message` object that the caller now has ownership of.  \n  \n### Remarks  \n Similar to `accept`, but is always preceded by a call to `reserve`.  \n  \n##  <a name=\"has_value\"></a>  single_assignment::has_value Method  \n Checks whether this `single_assignment` messaging block has been initialized with a value yet.  \n  \n```\nbool has_value() const;\n```  \n  \n### Return Value  \n `true` if the block has received a value, `false` otherwise.  \n  \n##  <a name=\"link_target_notification\"></a>  single_assignment::link_target_notification Method  \n A callback that notifies that a new target has been linked to this `single_assignment` messaging block.  \n  \n```\nvirtual void link_target_notification(_Inout_ ITarget<T>* _PTarget);\n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to the newly linked target.  \n  \n##  <a name=\"propagate_message\"></a>  single_assignment::propagate_message Method  \n Asynchronously passes a message from an `ISource` block to this `single_assignment` messaging block. It is invoked by the `propagate` method, when called by a source block.  \n  \n```\nvirtual message_status propagate_message(\n    _Inout_ message<T>* _PMessage,\n    _Inout_ ISource<T>* _PSource);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n##  <a name=\"propagate_to_any_targets\"></a>  single_assignment::propagate_to_any_targets Method  \n Places the `message``_PMessage` in this `single_assignment` messaging block and offers it to all of the linked targets.  \n  \n```\nvirtual void propagate_to_any_targets(_Inout_opt_ message<T>* _PMessage);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to a `message` that this `single_assignment` messaging block has taken ownership of.  \n  \n##  <a name=\"release_message\"></a>  single_assignment::release_message Method  \n Releases a previous message reservation.  \n  \n```\nvirtual void release_message(runtime_object_identity _MsgId);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being released.  \n  \n##  <a name=\"reserve_message\"></a>  single_assignment::reserve_message Method  \n Reserves a message previously offered by this `single_assignment` messaging block.  \n  \n```\nvirtual bool reserve_message(runtime_object_identity _MsgId);\n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being reserved.  \n  \n### Return Value  \n `true` if the message was successfully reserved, `false` otherwise.  \n  \n### Remarks  \n After `reserve` is called, if it returns `true`, either `consume` or `release` must be called to either take or release ownership of the message.  \n  \n##  <a name=\"resume_propagation\"></a>  single_assignment::resume_propagation Method  \n Resumes propagation after a reservation has been released.  \n  \n```\nvirtual void resume_propagation();\n```  \n  \n##  <a name=\"send_message\"></a>  single_assignment::send_message Method  \n Synchronously passes a message from an `ISource` block to this `single_assignment` messaging block. It is invoked by the `send` method, when called by a source block.  \n  \n```\nvirtual message_status send_message(\n    _Inout_ message<T>* _PMessage,\n    _Inout_ ISource<T>* _PSource);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n##  <a name=\"ctor\"></a>  single_assignment::single_assignment Constructor  \n Constructs a `single_assignment` messaging block.  \n  \n```\nsingle_assignment();\n\nsingle_assignment(\n    filter_method const& _Filter);\n\nsingle_assignment(\n    Scheduler& _PScheduler);\n\nsingle_assignment(\n    Scheduler& _PScheduler,\n    filter_method const& _Filter);\n\nsingle_assignment(\n    ScheduleGroup& _PScheduleGroup);\n\nsingle_assignment(\n    ScheduleGroup& _PScheduleGroup,\n    filter_method const& _Filter);\n```  \n  \n### Parameters  \n `_Filter`  \n A filter function which determines whether offered messages should be accepted.  \n  \n `_PScheduler`  \n The `Scheduler` object within which the propagation task for the `single_assignment` messaging block is scheduled.  \n  \n `_PScheduleGroup`  \n The `ScheduleGroup` object within which the propagation task for the `single_assignment` messaging block is scheduled. The `Scheduler` object used is implied by the schedule group.  \n  \n### Remarks  \n The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PScheduleGroup` parameters.  \n  \n The type `filter_method` is a functor with signature `bool (T const &)` which is invoked by this `single_assignment` messaging block to determine whether or not it should accept an offered message.  \n  \n##  <a name=\"dtor\"></a>  single_assignment::~single_assignment Destructor  \n Destroys the `single_assignment` messaging block.  \n  \n```\n~single_assignment();\n```  \n  \n##  <a name=\"value\"></a>  single_assignment::value Method  \n Gets a reference to the current payload of the message being stored in the `single_assignment` messaging block.  \n  \n```\nT const& value();\n```  \n  \n### Return Value  \n The payload of the stored message.  \n  \n### Remarks  \n This method will wait until a message arrives if no message is currently stored in the `single_assignment` messaging block.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [overwrite_buffer Class](overwrite-buffer-class.md)   \n [unbounded_buffer Class](unbounded-buffer-class.md)\n\n"}