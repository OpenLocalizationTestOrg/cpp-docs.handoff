<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">334ac1933ec3cffd02d07473722f7d914d027f02</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\reference\gd-gr-gv-gz-calling-convention.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3badc6668c9bdd3c69c5641262a9854267d7abf3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c14073ac89d7943dbe8918792b54ce18ff5dc624</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>-Gd, -Gr, -Gv, -Gz (Calling Convention) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>/Gd, /Gr, /Gv, /Gz (Calling Convention)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These options determine the order in which function arguments are pushed onto the stack, whether the caller function or called function removes the arguments from the stack at the end of the call, and the name-decorating convention that the compiler uses to identify individual functions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/Gd<ept id="p1">**</ept>, the default setting, specifies the <bpt id="p2">[</bpt>__cdecl<ept id="p2">](../../cpp/cdecl.md)</ept> calling convention for all functions except C++ member functions and functions that are marked <bpt id="p3">[</bpt>__stdcall<ept id="p3">](../../cpp/stdcall.md)</ept>, <bpt id="p4">[</bpt>__fastcall<ept id="p4">](../../cpp/fastcall.md)</ept>, or <bpt id="p5">[</bpt>__vectorcall<ept id="p5">](../../cpp/vectorcall.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/Gr<ept id="p1">**</ept> specifies the <ph id="ph1">`__fastcall`</ph> calling convention for all functions except C++ member functions, functions named <ph id="ph2">`main`</ph>, and functions that are marked <ph id="ph3">`__cdecl`</ph>, <ph id="ph4">`__stdcall`</ph>, or <ph id="ph5">`__vectorcall`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">`__fastcall`</ph> functions must have prototypes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This calling convention is only available in compilers that target x86, and is ignored by compilers that target other architectures.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/Gz<ept id="p1">**</ept> specifies the <ph id="ph1">`__stdcall`</ph> calling convention for all functions except C++ member functions, functions named <ph id="ph2">`main`</ph>, and functions that are marked <ph id="ph3">`__cdecl`</ph>, <ph id="ph4">`__fastcall`</ph>, or <ph id="ph5">`__vectorcall`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">`__stdcall`</ph> functions must have prototypes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This calling convention is only available in compilers that target x86, and is ignored by compilers that target other architectures.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/Gv<ept id="p1">**</ept> specifies the <ph id="ph1">`__vectorcall`</ph> calling convention for all functions except C++ member functions, functions named main, functions with a <ph id="ph2">`vararg`</ph> variable argument list, or functions that are marked with a conflicting <ph id="ph3">`__cdecl`</ph>, <ph id="ph4">`__stdcall`</ph>, or <ph id="ph5">`__fastcall`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This calling convention is only available on x86 and x64 architectures that support /arch:SSE2 and above, and is ignored by compilers that target the ARM architecture.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Functions that take a variable number of arguments must be marked <ph id="ph1">`__cdecl`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/Gd<ept id="p1">**</ept>, <bpt id="p2">**</bpt>/Gr<ept id="p2">**</ept>, <bpt id="p3">**</bpt>/Gv<ept id="p3">**</ept> and <bpt id="p4">**</bpt>/Gz<ept id="p4">**</ept> are not compatible with <bpt id="p5">[</bpt>/clr:safe<ept id="p5">](../../build/reference/clr-common-language-runtime-compilation.md)</ept> or <bpt id="p6">**</bpt>/clr:pure<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By default for x86 processors, C++ member functions use <bpt id="p1">[</bpt>__thiscall<ept id="p1">](../../cpp/thiscall.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For all processors, a member function that is explicitly marked as <ph id="ph1">`__cdecl`</ph>, <ph id="ph2">`__fastcall`</ph>, <ph id="ph3">`__vectorcall`</ph>, or <ph id="ph4">`__stdcall`</ph> uses the specified calling convention if it is not ignored on that architecture.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A member function that takes a variable number of arguments always uses the <ph id="ph1">`__cdecl`</ph> calling convention.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These compiler options have no effect on the name decoration of C++ methods and functions.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Unless declared as <ph id="ph1">`extern "C"`</ph>, C++ methods and functions use a different name-decorating scheme.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Decorated Names<ept id="p1">](../../build/reference/decorated-names.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information about calling conventions, see <bpt id="p1">[</bpt>Calling Conventions<ept id="p1">](../../cpp/calling-conventions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>__cdecl Specifics</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>On x86 processors, all function arguments are passed on the stack from right to left.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>On ARM and x64 architectures, some arguments are passed by register and the rest are passed on the stack from right to left.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The calling routine pops the arguments from the stack.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For C, the <ph id="ph1">`__cdecl`</ph> naming convention uses the function name preceded by an underscore ( <ph id="ph2">`_`</ph> ); no case translation is performed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Unless declared as <ph id="ph1">`extern "C"`</ph>, C++ functions use a different name-decorating scheme.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Decorated Names<ept id="p1">](../../build/reference/decorated-names.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>__fastcall Specifics</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Some of a <ph id="ph1">`__fastcall`</ph> function's arguments are passed in registers (for x86 processors, ECX, and EDX), and the rest are pushed onto the stack from right to left.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The called routine pops these arguments from the stack before it returns.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Typically, <bpt id="p1">**</bpt>/Gr<ept id="p1">**</ept> decreases execution time.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Be careful when you use the <ph id="ph1">`__fastcall`</ph> calling convention for any function that's written in inline assembly language.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Your use of registers could conflict with the compiler's use.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For C, the <ph id="ph1">`__fastcall`</ph> naming convention uses the function name preceded by an at sign (<ph id="ph2">`@`</ph>) followed by the size of the function's arguments in bytes.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>No case translation is done.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The compiler uses this template for the naming convention:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When you use the <ph id="ph1">`__fastcall`</ph> naming convention, use the standard include files.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Otherwise, you will get unresolved external references.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>__stdcall Specifics</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`__stdcall`</ph> function's arguments are pushed onto the stack from right to left, and the called function pops these arguments from the stack before it returns.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For C, the <ph id="ph1">`__stdcall`</ph> naming convention uses the function name preceded by an underscore ( <ph id="ph2">`_`</ph> ) and followed by an at sign (@) and the size of the function's arguments in bytes.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>No case translation is performed.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The compiler uses this template for the naming convention:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>__vectorcall Specifics</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`__vectorcall`</ph> function’s integer arguments are passed by value, using up to two (on x86) or four (on x64) integer registers, and up to six XMM registers for floating-point and vector values, and the rest are passed on the stack from right to left.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The called function cleans off the stack before it returns.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Vector and floating-point return values are returned in XMM0.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For C, the <ph id="ph1">`__vectorcall`</ph> naming convention uses the function name followed by two at signs (@@) and the size of the function's arguments in bytes.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>No case translation is performed.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The compiler uses this template for the naming convention:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To set this compiler option in the Visual Studio development environment</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Open the project's <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Working with Project Properties<ept id="p1">](../../ide/working-with-project-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>C/C++<ept id="p1">**</ept> folder.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Advanced<ept id="p1">**</ept> property page.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Modify the <bpt id="p1">**</bpt>Calling Convention<ept id="p1">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To set this compiler option programmatically</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.CallingConvention%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Compiler Options</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Setting Compiler Options</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>