{"nodes":[{"pos":[12,49],"content":"Property Declaration | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Property Declaration | Microsoft Docs","pos":[0,37]}]},{"content":"Property Declaration","pos":[637,657]},{"pos":[658,826],"content":"The way to declare a property in a managed class has changed from Managed Extensions for C++ to <ph id=\"ph1\">[!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]</ph>.","source":"The way to declare a property in a managed class has changed from Managed Extensions for C++ to [!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]."},{"content":"In the Managed Extensions design, each <ph id=\"ph1\">`set`</ph> or <ph id=\"ph2\">`get`</ph> property accessor is specified as an independent method.","pos":[833,943],"source":"In the Managed Extensions design, each `set` or `get` property accessor is specified as an independent method."},{"content":"The declaration of each method is prefixed with the <ph id=\"ph1\">`__property`</ph> keyword.","pos":[944,1017],"source":" The declaration of each method is prefixed with the `__property` keyword."},{"content":"The method name begins with either <ph id=\"ph1\">`set_`</ph> or <ph id=\"ph2\">`get_`</ph> followed by the actual name of the property (as visible to the user).","pos":[1018,1139],"source":" The method name begins with either `set_` or `get_` followed by the actual name of the property (as visible to the user)."},{"content":"Thus, a <ph id=\"ph1\">`Vector`</ph> providing an <ph id=\"ph2\">`x`</ph> coordinate <ph id=\"ph3\">`get`</ph> property would name it <ph id=\"ph4\">`get_x`</ph> and the user would invoke it as <ph id=\"ph5\">`x`</ph>.","pos":[1140,1258],"source":" Thus, a `Vector` providing an `x` coordinate `get` property would name it `get_x` and the user would invoke it as `x`."},{"content":"This naming convention and separate specification of methods actually reflects the underlying runtime implementation of the property.","pos":[1259,1392]},{"content":"For example, here is our <ph id=\"ph1\">`Vector`</ph> with a set of coordinate properties:","pos":[1393,1463],"source":" For example, here is our `Vector` with a set of coordinate properties:"},{"content":"This spreads out the functionality associated with a property and requires the user to lexically unify the associated sets and gets.","pos":[1844,1976]},{"content":"Moreover, it is verbose.","pos":[1977,2001]},{"content":"In the new syntax, which is more like that of C#, the <ph id=\"ph1\">`property`</ph> keyword is followed by the type of the property and its unadorned name.","pos":[2002,2138],"source":" In the new syntax, which is more like that of C#, the `property` keyword is followed by the type of the property and its unadorned name."},{"content":"The <ph id=\"ph1\">`set`</ph> and <ph id=\"ph2\">`get`</ph> access methods are placed within a block following the property name.","pos":[2139,2228],"source":" The `set` and `get` access methods are placed within a block following the property name."},{"content":"Note that unlike C#, the signature of the access method is specified.","pos":[2229,2298]},{"content":"For example, here is the code example above translated into the new syntax.","pos":[2299,2374]},{"content":"If the access methods of the property reflect distinct access levels – such as a <ph id=\"ph1\">`public``get`</ph> and a <ph id=\"ph2\">`private`</ph> or <ph id=\"ph3\">`protected``set`</ph>, an explicit access label can be specified.","pos":[2626,2800],"source":"If the access methods of the property reflect distinct access levels – such as a `public``get` and a `private` or `protected``set`, an explicit access label can be specified."},{"content":"By default, the access level of the property reflects that of the enclosing access level.","pos":[2801,2890]},{"content":"For example, in the above definition of <ph id=\"ph1\">`Vector`</ph>, both the <ph id=\"ph2\">`get`</ph> and <ph id=\"ph3\">`set`</ph> methods are <ph id=\"ph4\">`public`</ph>.","pos":[2891,2987],"source":" For example, in the above definition of `Vector`, both the `get` and `set` methods are `public`."},{"content":"To make the <ph id=\"ph1\">`set`</ph> method <ph id=\"ph2\">`protected`</ph> or <ph id=\"ph3\">`private`</ph>, the definition would be revised as follows:","pos":[2988,3082],"source":" To make the `set` method `protected` or `private`, the definition would be revised as follows:"},{"content":"The scope of an access keyword within a property extends until either the closing brace of the property or the specification of an additional access keyword.","pos":[3467,3624]},{"content":"It does not extend beyond the definition of the property to the enclosing access level within which the property is defined.","pos":[3625,3749]},{"content":"In the above declaration, for example, <ph id=\"ph1\">`Vector::dot()`</ph> is a public method.","pos":[3750,3824],"source":" In the above declaration, for example, `Vector::dot()` is a public method."},{"pos":[3831,3918],"content":"Writing the set/get properties for the three <ph id=\"ph1\">`Vector`</ph> coordinates involves three steps:","source":"Writing the set/get properties for the three `Vector` coordinates involves three steps:"},{"content":"declare a private state member of the appropriate type.","pos":[3928,3983]},{"content":"return it when the user wishes to get its value.","pos":[3993,4041]},{"content":"assign it the new value.","pos":[4051,4075]},{"content":"In the new syntax, a shorthand property syntax is available which automates this usage pattern:","pos":[4082,4177]},{"content":"The interesting side effect of the shorthand property syntax is that although the backstage state member is generated by the compiler, it is not accessible within the class except through the set/get accessors.","pos":[4368,4578]},{"content":"See Also","pos":[4587,4595]},{"content":"Member Declarations within a Class or Interface (C++/CLI)","pos":[4600,4657]},{"content":"property","pos":[4734,4742]}],"content":"---\ntitle: \"Property Declaration | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__property keyword\"\n  - \"declaring properties, C++\"\n  - \"property keyword [C++]\"\nms.assetid: de169378-a8b8-49f4-a586-76bffc9b5c9f\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Property Declaration\nThe way to declare a property in a managed class has changed from Managed Extensions for C++ to [!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)].  \n  \n In the Managed Extensions design, each `set` or `get` property accessor is specified as an independent method. The declaration of each method is prefixed with the `__property` keyword. The method name begins with either `set_` or `get_` followed by the actual name of the property (as visible to the user). Thus, a `Vector` providing an `x` coordinate `get` property would name it `get_x` and the user would invoke it as `x`. This naming convention and separate specification of methods actually reflects the underlying runtime implementation of the property. For example, here is our `Vector` with a set of coordinate properties:  \n  \n```  \npublic __gc __sealed class Vector {  \npublic:  \n   __property double get_x(){ return _x; }  \n   __property double get_y(){ return _y; }  \n   __property double get_z(){ return _z; }  \n  \n   __property void set_x( double newx ){ _x = newx; }  \n   __property void set_y( double newy ){ _y = newy; }  \n   __property void set_z( double newz ){ _z = newz; }  \n};  \n```  \n  \n This spreads out the functionality associated with a property and requires the user to lexically unify the associated sets and gets. Moreover, it is verbose. In the new syntax, which is more like that of C#, the `property` keyword is followed by the type of the property and its unadorned name. The `set` and `get` access methods are placed within a block following the property name. Note that unlike C#, the signature of the access method is specified. For example, here is the code example above translated into the new syntax.  \n  \n```  \npublic ref class Vector sealed {   \npublic:  \n   property double x {  \n      double get() {  \n         return _x;  \n      }  \n  \n      void set( double newx ) {  \n         _x = newx;  \n      }  \n   } // Note: no semi-colon  \n};  \n```  \n  \n If the access methods of the property reflect distinct access levels – such as a `public``get` and a `private` or `protected``set`, an explicit access label can be specified. By default, the access level of the property reflects that of the enclosing access level. For example, in the above definition of `Vector`, both the `get` and `set` methods are `public`. To make the `set` method `protected` or `private`, the definition would be revised as follows:  \n  \n```  \npublic ref class Vector sealed {   \npublic:  \n   property double x {  \n      double get() {  \n         return _x;  \n      }  \n  \n   private:  \n      void set( double newx ) {  \n         _x = newx;  \n      }  \n  \n   } // note: extent of private culminates here …  \n  \n// note: dot is a public method of Vector  \ndouble dot( const Vector^ wv );  \n  \n// etc.  \n};  \n```  \n  \n The scope of an access keyword within a property extends until either the closing brace of the property or the specification of an additional access keyword. It does not extend beyond the definition of the property to the enclosing access level within which the property is defined. In the above declaration, for example, `Vector::dot()` is a public method.  \n  \n Writing the set/get properties for the three `Vector` coordinates involves three steps:  \n  \n1.  declare a private state member of the appropriate type.  \n  \n2.  return it when the user wishes to get its value.  \n  \n3.  assign it the new value.  \n  \n In the new syntax, a shorthand property syntax is available which automates this usage pattern:  \n  \n```  \npublic ref class Vector sealed {   \npublic:  \n   // equivalent shorthand property syntax  \n   property double x;   \n   property double y;  \n   property double z;  \n};  \n```  \n  \n The interesting side effect of the shorthand property syntax is that although the backstage state member is generated by the compiler, it is not accessible within the class except through the set/get accessors.  \n  \n## See Also  \n [Member Declarations within a Class or Interface (C++/CLI)](../dotnet/member-declarations-within-a-class-or-interface-cpp-cli.md)   \n [property](../windows/property-cpp-component-extensions.md)"}