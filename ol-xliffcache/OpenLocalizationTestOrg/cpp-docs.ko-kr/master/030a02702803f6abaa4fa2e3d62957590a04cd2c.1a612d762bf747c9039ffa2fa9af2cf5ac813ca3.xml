{"nodes":[{"pos":[12,34],"content":"_getw | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_getw | Microsoft Docs","pos":[0,22]}]},{"pos":[954,959],"content":"_getw","linkify":"_getw","nodes":[{"content":"_getw","pos":[0,5]}]},{"content":"Gets an integer from a stream.","pos":[960,990]},{"pos":[999,1005],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1069,1079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1095,1127],"source":" Pointer to the `FILE` structure."},{"pos":[1136,1148],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`_getw`</ph> returns the integer value read.","pos":[1152,1191],"source":"`_getw` returns the integer value read."},{"content":"A return value of <ph id=\"ph1\">`EOF`</ph> indicates either an error or end of file.","pos":[1192,1257],"source":" A return value of `EOF` indicates either an error or end of file."},{"content":"However, because the <ph id=\"ph1\">`EOF`</ph> value is also a legitimate integer value, use <ph id=\"ph2\">`feof`</ph> or <ph id=\"ph3\">`ferror`</ph> to verify an end-of-file or error condition.","pos":[1258,1394],"source":" However, because the `EOF` value is also a legitimate integer value, use `feof` or `ferror` to verify an end-of-file or error condition."},{"content":"If <ph id=\"ph1\">`stream`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1395,1548],"source":" If `stream` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and the function returns <ph id=\"ph3\">`EOF`</ph>.","pos":[1549,1644],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns `EOF`."},{"pos":[1653,1660],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_getw`</ph> function reads the next binary value of type <ph id=\"ph2\">`int`</ph> from the file associated with <ph id=\"ph3\">`stream`</ph> and increments the associated file pointer (if there is one) to point to the next unread character.","pos":[1664,1865],"source":"The `_getw` function reads the next binary value of type `int` from the file associated with `stream` and increments the associated file pointer (if there is one) to point to the next unread character."},{"content":"<ph id=\"ph1\">`_getw`</ph> does not assume any special alignment of items in the stream.","pos":[1866,1935],"source":"`_getw` does not assume any special alignment of items in the stream."},{"content":"Problems with porting can occur with <ph id=\"ph1\">`_getw`</ph> because the size of the <ph id=\"ph2\">`int`</ph> type and the ordering of bytes within the <ph id=\"ph3\">`int`</ph> type differ across systems.","pos":[1936,2086],"source":" Problems with porting can occur with `_getw` because the size of the `int` type and the ordering of bytes within the `int` type differ across systems."},{"pos":[2095,2107],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2114,2121]},{"content":"Required header","pos":[2122,2137]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[2190,2200],"source":"\\<stdio.h>"},{"pos":[2208,2326],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2335,2342],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3034,3053],"content":"Input: crt_getw.txt","linkify":"Input: crt_getw.txt","nodes":[{"content":"Input: crt_getw.txt","pos":[0,19]}]},{"pos":[3102,3108],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[3170,3195],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3199,3214]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3215,3262],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3263,3388],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3397,3405],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[3409,3461],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_putw<ept id=\"p1\">](../../c-runtime-library/reference/putw.md)</ept>","pos":[3464,3515],"source":" [_putw](../../c-runtime-library/reference/putw.md)"}],"content":"---\ntitle: \"_getw | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_getw\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_getw\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_getw function\"\n  - \"integers, getting from streams\"\n  - \"getw function\"\nms.assetid: ef75facc-b84e-470f-9f5f-8746c90822a0\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _getw\nGets an integer from a stream.  \n  \n## Syntax  \n  \n```  \nint _getw(   \n   FILE *stream   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to the `FILE` structure.  \n  \n## Return Value  \n `_getw` returns the integer value read. A return value of `EOF` indicates either an error or end of file. However, because the `EOF` value is also a legitimate integer value, use `feof` or `ferror` to verify an end-of-file or error condition. If `stream` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EINVAL` and the function returns `EOF`.  \n  \n## Remarks  \n The `_getw` function reads the next binary value of type `int` from the file associated with `stream` and increments the associated file pointer (if there is one) to point to the next unread character. `_getw` does not assume any special alignment of items in the stream. Problems with porting can occur with `_getw` because the size of the `int` type and the ordering of bytes within the `int` type differ across systems.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_getw`|\\<stdio.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_getw.c  \n// This program uses _getw to read a word  \n// from a stream, then performs an error check.  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n  \nint main( void )  \n{  \n   FILE *stream;  \n   int i;  \n  \n   if( fopen_s( &stream, \"crt_getw.txt\", \"rb\" ) )  \n      printf( \"Couldn't open file\\n\" );  \n   else  \n   {  \n      // Read a word from the stream:  \n      i = _getw( stream );  \n  \n      // If there is an error...  \n      if( ferror( stream ) )  \n      {  \n         printf( \"_getw failed\\n\" );  \n         clearerr_s( stream );  \n      }  \n      else  \n         printf( \"First data word in file: 0x%.4x\\n\", i );  \n      fclose( stream );  \n   }  \n}  \n```  \n  \n## Input: crt_getw.txt  \n  \n```  \nLine one.  \nLine two.  \n```  \n  \n### Output  \n  \n```  \nFirst data word in file: 0x656e694c  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_putw](../../c-runtime-library/reference/putw.md)"}