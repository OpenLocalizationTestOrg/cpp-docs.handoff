{"nodes":[{"pos":[12,59],"content":"hash_multimap::erase (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_multimap::erase (STL-CLR) | Microsoft Docs","pos":[0,47]}]},{"content":"hash_multimap::erase (STL/CLR)","pos":[642,672]},{"content":"Removes elements at specified positions.","pos":[673,713]},{"content":"Syntax","pos":[722,728]},{"content":"Parameters","pos":[864,874]},{"content":"first","pos":[878,883]},{"content":"Beginning of range to erase.","pos":[887,915]},{"content":"key","pos":[922,925]},{"content":"Key value to erase.","pos":[929,948]},{"content":"last","pos":[955,959]},{"content":"End of range to erase.","pos":[963,985]},{"content":"where","pos":[992,997]},{"content":"Element to erase.","pos":[1001,1018]},{"content":"Remarks","pos":[1027,1034]},{"content":"The first member function removes the element of the controlled sequence pointed to by <ph id=\"ph1\">`where`</ph>, and returns an iterator that designates the first element remaining beyond the element removed, or <bpt id=\"p1\">[</bpt>hash_multimap::end (STL/CLR)<ept id=\"p1\">](../dotnet/hash-multimap-end-stl-clr.md)</ept><ph id=\"ph2\">`()`</ph> if no such element exists.","pos":[1038,1334],"source":"The first member function removes the element of the controlled sequence pointed to by `where`, and returns an iterator that designates the first element remaining beyond the element removed, or [hash_multimap::end (STL/CLR)](../dotnet/hash-multimap-end-stl-clr.md)`()` if no such element exists."},{"content":"You use it to remove a single element.","pos":[1335,1373]},{"content":"The second member function removes the elements of the controlled sequence in the range <ph id=\"ph1\">`[``first``,`</ph> <ph id=\"ph2\">`last``)`</ph>, and returns an iterator that designates the first element remaining beyond any elements removed, or <ph id=\"ph3\">`end()`</ph> if no such element exists..","pos":[1380,1628],"source":"The second member function removes the elements of the controlled sequence in the range `[``first``,` `last``)`, and returns an iterator that designates the first element remaining beyond any elements removed, or `end()` if no such element exists.."},{"content":"You use it to remove zero or more contiguous elements.","pos":[1629,1683]},{"content":"The third member function removes any element of the controlled sequence whose key has equivalent ordering to <ph id=\"ph1\">`key`</ph>, and returns a count of the number of elements removed.","pos":[1690,1861],"source":"The third member function removes any element of the controlled sequence whose key has equivalent ordering to `key`, and returns a count of the number of elements removed."},{"content":"You use it to remove and count all elements that match a specified key.","pos":[1862,1933]},{"content":"Each element erasure takes time proportional to the logarithm of the number of elements in the controlled sequence.","pos":[1940,2055]},{"content":"Example","pos":[2064,2071]},{"content":"Requirements","pos":[4035,4047]},{"pos":[4051,4081],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_map&gt;","source":"**Header:** \\<cliext/hash_map>"},{"pos":[4088,4109],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[4118,4126]},{"content":"hash_multimap (STL/CLR)","pos":[4131,4154]},{"content":"hash_multimap::clear (STL/CLR)","pos":[4197,4227]}],"content":"---\ntitle: \"hash_multimap::erase (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_multimap::erase\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"erase member [STL/CLR]\"\nms.assetid: 663c67f6-8070-47db-abdc-58f7ace69736\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_multimap::erase (STL/CLR)\nRemoves elements at specified positions.  \n  \n## Syntax  \n  \n```  \niterator erase(iterator where);  \niterator erase(iterator first, iterator last);  \nbool erase(key_type key)  \n```  \n  \n#### Parameters  \n first  \n Beginning of range to erase.  \n  \n key  \n Key value to erase.  \n  \n last  \n End of range to erase.  \n  \n where  \n Element to erase.  \n  \n## Remarks  \n The first member function removes the element of the controlled sequence pointed to by `where`, and returns an iterator that designates the first element remaining beyond the element removed, or [hash_multimap::end (STL/CLR)](../dotnet/hash-multimap-end-stl-clr.md)`()` if no such element exists. You use it to remove a single element.  \n  \n The second member function removes the elements of the controlled sequence in the range `[``first``,` `last``)`, and returns an iterator that designates the first element remaining beyond any elements removed, or `end()` if no such element exists.. You use it to remove zero or more contiguous elements.  \n  \n The third member function removes any element of the controlled sequence whose key has equivalent ordering to `key`, and returns a count of the number of elements removed. You use it to remove and count all elements that match a specified key.  \n  \n Each element erasure takes time proportional to the logarithm of the number of elements in the controlled sequence.  \n  \n## Example  \n  \n```  \n// cliext_hash_multimap_erase.cpp   \n// compile with: /clr   \n#include <cliext/hash_map>   \n  \ntypedef cliext::hash_multimap<wchar_t, int> Myhash_multimap;   \nint main()   \n    {   \n    cliext::hash_multimap<wchar_t, int> c1;   \n    c1.insert(cliext::hash_multimap<wchar_t, int>::make_value(L'a', 1));   \n    c1.insert(cliext::hash_multimap<wchar_t, int>::make_value(L'b', 2));   \n    c1.insert(cliext::hash_multimap<wchar_t, int>::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (cliext::hash_multimap<wchar_t, int>::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// erase an element and reinspect   \n    cliext::hash_multimap<wchar_t, int>::iterator it =   \n        c1.erase(c1.begin());   \n    System::Console::WriteLine(\"erase(begin()) = [{0} {1}]\",   \n        it->first, it->second);   \n  \n// add elements and display \" b c d e\"   \n    c1.insert(cliext::hash_multimap<wchar_t, int>::make_value(L'd', 4));   \n    c1.insert(cliext::hash_multimap<wchar_t, int>::make_value(L'e', 5));   \n    for each (cliext::hash_multimap<wchar_t, int>::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// erase all but end   \n    it = c1.end();   \n    it = c1.erase(c1.begin(), --it);   \n    System::Console::WriteLine(\"erase(begin(), end()-1) = [{0} {1}]\",   \n        it->first, it->second);   \n    System::Console::WriteLine(\"size() = {0}\", c1.size());   \n  \n// erase end   \n    System::Console::WriteLine(\"erase(L'x') = {0}\", c1.erase(L'x'));   \n    System::Console::WriteLine(\"erase(L'e') = {0}\", c1.erase(L'e'));   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [a 1] [b 2] [c 3]  \nerase(begin()) = [b 2]  \n [b 2] [c 3] [d 4] [e 5]  \nerase(begin(), end()-1) = [e 5]  \nsize() = 1  \nerase(L'x') = 0  \nerase(L'e') = 1  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_multimap (STL/CLR)](../dotnet/hash-multimap-stl-clr.md)   \n [hash_multimap::clear (STL/CLR)](../dotnet/hash-multimap-clear-stl-clr.md)"}