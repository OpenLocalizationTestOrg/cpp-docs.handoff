{"nodes":[{"pos":[12,46],"content":"_spawnl, _wspawnl | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_spawnl, _wspawnl | Microsoft Docs","pos":[0,34]}]},{"content":"_spawnl, _wspawnl","pos":[1123,1140]},{"content":"Creates and executes a new process.","pos":[1141,1176]},{"pos":[1184,1404],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[1413,1419]},{"content":"Parameters","pos":[1758,1768]},{"content":"Execution mode for the calling process.","pos":[1782,1821]},{"content":"Path of the file to be executed.","pos":[1841,1873]},{"content":"List of pointers to arguments.","pos":[1906,1936]},{"content":"The <ph id=\"ph1\">`arg0`</ph> argument is usually a pointer to <ph id=\"ph2\">`cmdname`</ph>.","pos":[1937,1991],"source":" The `arg0` argument is usually a pointer to `cmdname`."},{"content":"The arguments <ph id=\"ph1\">`arg1`</ph> through <ph id=\"ph2\">`argn`</ph> are pointers to the character strings forming the new argument list.","pos":[1992,2096],"source":" The arguments `arg1` through `argn` are pointers to the character strings forming the new argument list."},{"content":"Following <ph id=\"ph1\">`argn`</ph>, there must be a <ph id=\"ph2\">`NULL`</ph> pointer to mark the end of the argument list.","pos":[2097,2183],"source":" Following `argn`, there must be a `NULL` pointer to mark the end of the argument list."},{"content":"Return Value","pos":[2192,2204]},{"content":"The return value from a synchronous <ph id=\"ph1\">`_spawnl`</ph> or <ph id=\"ph2\">`_wspawnl`</ph> (<ph id=\"ph3\">`_P_WAIT`</ph> specified for <ph id=\"ph4\">`mode`</ph>) is the exit status of the new process.","pos":[2208,2339],"source":"The return value from a synchronous `_spawnl` or `_wspawnl` (`_P_WAIT` specified for `mode`) is the exit status of the new process."},{"content":"The return value from an asynchronous <ph id=\"ph1\">`_spawnl`</ph> or <ph id=\"ph2\">`_wspawnl`</ph> (<ph id=\"ph3\">`_P_NOWAIT`</ph> or <ph id=\"ph4\">`_P_NOWAITO`</ph> specified for <ph id=\"ph5\">`mode`</ph>) is the process handle.","pos":[2340,2475],"source":" The return value from an asynchronous `_spawnl` or `_wspawnl` (`_P_NOWAIT` or `_P_NOWAITO` specified for `mode`) is the process handle."},{"content":"The exit status is 0 if the process terminated normally.","pos":[2476,2532]},{"content":"You can set the exit status to a nonzero value if the spawned process specifically calls the <ph id=\"ph1\">`exit`</ph> routine with a nonzero argument.","pos":[2533,2665],"source":" You can set the exit status to a nonzero value if the spawned process specifically calls the `exit` routine with a nonzero argument."},{"content":"If the new process did not explicitly set a positive exit status, a positive exit status indicates an abnormal exit with an abort or an interrupt.","pos":[2666,2812]},{"content":"A return value of â€“1 indicates an error (the new process is not started).","pos":[2813,2886]},{"content":"In this case, <ph id=\"ph1\">`errno`</ph> is set to one of the following values.","pos":[2887,2947],"source":" In this case, `errno` is set to one of the following values."},{"content":"Argument list exceeds 1024 bytes.","pos":[2965,2998]},{"content":"argument is invalid.","pos":[3024,3044]},{"content":"File or path is not found.","pos":[3063,3089]},{"content":"Specified file is not executable or has invalid executable-file format.","pos":[3109,3180]},{"content":"Not enough memory is available to execute the new process.","pos":[3199,3257]},{"pos":[3264,3441],"content":"For more information about these and other return codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"These functions validate their parameters.","pos":[3448,3490]},{"content":"If either <ph id=\"ph1\">`cmdname`</ph> or <ph id=\"ph2\">`arg0`</ph> is an empty string or a null pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3491,3689],"source":" If either `cmdname` or `arg0` is an empty string or a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>, and return -1.","pos":[3690,3782],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL`, and return -1."},{"content":"No new process is spawned.","pos":[3783,3809]},{"content":"Remarks","pos":[3818,3825]},{"content":"Each of these functions creates and executes a new process, passing each command-line argument as a separate parameter.","pos":[3829,3948]},{"content":"Requirements","pos":[3957,3969]},{"content":"Routine","pos":[3976,3983]},{"content":"Required header","pos":[3984,3999]},{"content":"process.h&gt;","pos":[4056,4066],"source":"process.h>"},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4084,4106],"source":"stdio.h> or \\<wchar.h>"},{"pos":[4114,4212],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[4221,4228]},{"pos":[4232,4330],"content":"See the example in <bpt id=\"p1\">[</bpt>_spawn, _wspawn Functions<ept id=\"p1\">](../../c-runtime-library/spawn-wspawn-functions.md)</ept>.","source":"See the example in [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)."},{"content":".NET Framework Equivalent","pos":[4339,4364]},{"content":"System::Diagnostics::Process Class","pos":[4375,4409]},{"content":"System::Diagnostics::ProcessStartInfo Class","pos":[4495,4538]},{"content":"See Also","pos":[4631,4639]},{"content":"Process and Environment Control","pos":[4644,4675]},{"content":"_spawn, _wspawn Functions","pos":[4742,4767]},{"content":"abort","pos":[4825,4830]},{"content":"atexit","pos":[4881,4887]},{"content":"_exec, _wexec Functions","pos":[4939,4962]},{"content":"exit, _Exit, _exit","pos":[5018,5036]},{"content":"_flushall","pos":[5096,5105]},{"content":"_getmbcp","pos":[5159,5167]},{"content":"_onexit, _onexit_m","pos":[5220,5238]},{"content":"_setmbcp","pos":[5299,5307]},{"content":"system, _wsystem","pos":[5360,5376]}],"content":"---\ntitle: \"_spawnl, _wspawnl | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wspawnl\"\n  - \"_spawnl\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-process-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"spawnl\"\n  - \"wspawnl\"\n  - \"_wspawnl\"\n  - \"_spawnl\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"spawnl function\"\n  - \"processes, creating\"\n  - \"_spawnl function\"\n  - \"processes, executing new\"\n  - \"_wspawnl function\"\n  - \"wspawnl function\"\n  - \"process creation\"\nms.assetid: dd4584c9-7173-4fc5-b93a-6e7d3c2316d7\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _spawnl, _wspawnl\nCreates and executes a new process.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nintptr_t _spawnl(  \n   int mode,  \n   const char *cmdname,  \n   const char *arg0,  \n   const char *arg1,  \n   ... const char *argn,  \n   NULL   \n);  \nintptr_t _wspawnl(  \n   int mode,  \n   const wchar_t *cmdname,  \n   const wchar_t *arg0,  \n   const wchar_t *arg1,  \n   ... const wchar_t *argn,  \n   NULL   \n);  \n```  \n  \n#### Parameters  \n `mode`  \n Execution mode for the calling process.  \n  \n `cmdname`  \n Path of the file to be executed.  \n  \n `arg0, arg1, ... argn`  \n List of pointers to arguments. The `arg0` argument is usually a pointer to `cmdname`. The arguments `arg1` through `argn` are pointers to the character strings forming the new argument list. Following `argn`, there must be a `NULL` pointer to mark the end of the argument list.  \n  \n## Return Value  \n The return value from a synchronous `_spawnl` or `_wspawnl` (`_P_WAIT` specified for `mode`) is the exit status of the new process. The return value from an asynchronous `_spawnl` or `_wspawnl` (`_P_NOWAIT` or `_P_NOWAITO` specified for `mode`) is the process handle. The exit status is 0 if the process terminated normally. You can set the exit status to a nonzero value if the spawned process specifically calls the `exit` routine with a nonzero argument. If the new process did not explicitly set a positive exit status, a positive exit status indicates an abnormal exit with an abort or an interrupt. A return value of â€“1 indicates an error (the new process is not started). In this case, `errno` is set to one of the following values.  \n  \n `E2BIG`  \n Argument list exceeds 1024 bytes.  \n  \n `EINVAL`  \n `mode` argument is invalid.  \n  \n `ENOENT`  \n File or path is not found.  \n  \n `ENOEXEC`  \n Specified file is not executable or has invalid executable-file format.  \n  \n `ENOMEM`  \n Not enough memory is available to execute the new process.  \n  \n For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n These functions validate their parameters. If either `cmdname` or `arg0` is an empty string or a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL`, and return -1. No new process is spawned.  \n  \n## Remarks  \n Each of these functions creates and executes a new process, passing each command-line argument as a separate parameter.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_spawnl`|\\<process.h>|  \n|`_wspawnl`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n See the example in [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md).  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Diagnostics::Process Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)  \n  \n-   [System::Diagnostics::ProcessStartInfo Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)   \n [abort](../../c-runtime-library/reference/abort.md)   \n [atexit](../../c-runtime-library/reference/atexit.md)   \n [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md)   \n [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md)   \n [_flushall](../../c-runtime-library/reference/flushall.md)   \n [_getmbcp](../../c-runtime-library/reference/getmbcp.md)   \n [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md)   \n [_setmbcp](../../c-runtime-library/reference/setmbcp.md)   \n [system, _wsystem](../../c-runtime-library/reference/system-wsystem.md)"}