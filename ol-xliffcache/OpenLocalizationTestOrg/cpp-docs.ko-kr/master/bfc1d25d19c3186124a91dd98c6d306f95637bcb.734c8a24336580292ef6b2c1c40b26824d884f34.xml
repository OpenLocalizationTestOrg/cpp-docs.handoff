{"nodes":[{"pos":[12,50],"content":"WeakRef::AsIID Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"WeakRef::AsIID Method | Microsoft Docs","pos":[0,38]}]},{"content":"WeakRef::AsIID Method","pos":[657,678]},{"content":"Sets the specified ComPtr pointer parameter to represent the specified interface ID.","pos":[679,763]},{"content":"Syntax","pos":[772,778]},{"content":"Parameters","pos":[881,891]},{"content":"An interface ID.","pos":[905,921]},{"content":"When this operation completes, an object that represents parameter <ph id=\"ph1\">`riid`</ph>.","pos":[937,1011],"source":" When this operation completes, an object that represents parameter `riid`."},{"content":"Return Value","pos":[1020,1032]},{"pos":[1042,1175],"content":"S_OK if this operation succeeds; otherwise, an HRESULT that indicates the reason the operation failed, and <ph id=\"ph1\">`ptr`</ph> is set to <ph id=\"ph2\">`nullptr`</ph>.","source":"S_OK if this operation succeeds; otherwise, an HRESULT that indicates the reason the operation failed, and `ptr` is set to `nullptr`."},{"content":"S_OK if this operation succeeds, but the current WeakRef object has already been released.","pos":[1185,1275]},{"content":"Parameter <ph id=\"ph1\">`ptr`</ph> is set to <ph id=\"ph2\">`nullptr`</ph>.","pos":[1276,1312],"source":" Parameter `ptr` is set to `nullptr`."},{"content":"S_OK if this operation succeeds, but the current WeakRef object is not derived from parameter <ph id=\"ph1\">`riid`</ph>.","pos":[1322,1423],"source":"S_OK if this operation succeeds, but the current WeakRef object is not derived from parameter `riid`."},{"content":"Parameter <ph id=\"ph1\">`ptr`</ph> is set to <ph id=\"ph2\">`nullptr`</ph>.","pos":[1424,1460],"source":" Parameter `ptr` is set to `nullptr`."},{"content":"(For more information, see Remarks.)","pos":[1461,1497]},{"content":"Remarks","pos":[1506,1513]},{"content":"An error is emitted if parameter <ph id=\"ph1\">`riid`</ph> is not derived from IInspectable.","pos":[1517,1590],"source":"An error is emitted if parameter `riid` is not derived from IInspectable."},{"content":"This error supersedes the return value.","pos":[1591,1630]},{"content":"The first template is the form that you should use in your code.","pos":[1637,1701]},{"content":"The second template (not shown here, but declared in the header file) is an internal, helper specialization that supports C++ language features such as the <bpt id=\"p1\">[</bpt>auto<ept id=\"p1\">](../cpp/auto-cpp.md)</ept> type deduction keyword.","pos":[1702,1908],"source":" The second template (not shown here, but declared in the header file) is an internal, helper specialization that supports C++ language features such as the [auto](../cpp/auto-cpp.md) type deduction keyword."},{"content":"Starting in the Windows 10 SDK, this method does not set the WeakRef instance to <ph id=\"ph1\">`nullptr`</ph> if the weak reference could not be obtained, so you should avoid error-checking code that checks the WeakRef for <ph id=\"ph2\">`nullptr`</ph>.","pos":[1915,2129],"source":"Starting in the Windows 10 SDK, this method does not set the WeakRef instance to `nullptr` if the weak reference could not be obtained, so you should avoid error-checking code that checks the WeakRef for `nullptr`."},{"content":"Instead, check <ph id=\"ph1\">`ptr`</ph> for <ph id=\"ph2\">`nullptr`</ph>.","pos":[2130,2165],"source":" Instead, check `ptr` for `nullptr`."},{"content":"Requirements","pos":[2174,2186]},{"pos":[2190,2210],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> client.h","source":"**Header:** client.h"},{"pos":[2217,2246],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::WRL","source":"**Namespace:** Microsoft::WRL"},{"content":"See Also","pos":[2255,2263]},{"content":"WeakRef Class","pos":[2268,2281]}],"content":"---\ntitle: \"WeakRef::AsIID Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"client/Microsoft::WRL::WeakRef::AsIID\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"AsIID method\"\nms.assetid: 94e87309-32da-4dbb-8233-e77313a1f448\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# WeakRef::AsIID Method\nSets the specified ComPtr pointer parameter to represent the specified interface ID.  \n  \n## Syntax  \n  \n```  \nHRESULT AsIID(  \n   REFIID riid,  \n   _Out_ ComPtr<IInspectable>* ptr  \n);  \n```  \n  \n#### Parameters  \n `riid`  \n An interface ID.  \n  \n `ptr`  \n When this operation completes, an object that represents parameter `riid`.  \n  \n## Return Value  \n  \n-   S_OK if this operation succeeds; otherwise, an HRESULT that indicates the reason the operation failed, and `ptr` is set to `nullptr`.  \n  \n-   S_OK if this operation succeeds, but the current WeakRef object has already been released. Parameter `ptr` is set to `nullptr`.  \n  \n-   S_OK if this operation succeeds, but the current WeakRef object is not derived from parameter `riid`. Parameter `ptr` is set to `nullptr`. (For more information, see Remarks.)  \n  \n## Remarks  \n An error is emitted if parameter `riid` is not derived from IInspectable. This error supersedes the return value.  \n  \n The first template is the form that you should use in your code. The second template (not shown here, but declared in the header file) is an internal, helper specialization that supports C++ language features such as the [auto](../cpp/auto-cpp.md) type deduction keyword.  \n  \n Starting in the Windows 10 SDK, this method does not set the WeakRef instance to `nullptr` if the weak reference could not be obtained, so you should avoid error-checking code that checks the WeakRef for `nullptr`. Instead, check `ptr` for `nullptr`.  \n  \n## Requirements  \n **Header:** client.h  \n  \n **Namespace:** Microsoft::WRL  \n  \n## See Also  \n [WeakRef Class](../windows/weakref-class.md)"}