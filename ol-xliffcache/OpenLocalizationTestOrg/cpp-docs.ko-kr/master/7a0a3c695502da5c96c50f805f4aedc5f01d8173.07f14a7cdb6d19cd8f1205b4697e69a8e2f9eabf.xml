{"nodes":[{"pos":[12,49],"content":"getenv_s, _wgetenv_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"getenv_s, _wgetenv_s | Microsoft Docs","pos":[0,37]}]},{"pos":[1108,1128],"content":"getenv_s, _wgetenv_s","linkify":"getenv_s, _wgetenv_s","nodes":[{"content":"getenv_s, _wgetenv_s","pos":[0,20]}]},{"content":"Gets a value from the current environment.","pos":[1129,1171]},{"content":"These versions of <bpt id=\"p1\">[</bpt>getenv, _wgetenv<ept id=\"p1\">](../../c-runtime-library/reference/getenv-wgetenv.md)</ept> have security enhancements, as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1172,1394],"source":" These versions of [getenv, _wgetenv](../../c-runtime-library/reference/getenv-wgetenv.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1402,1662],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,258],"nodes":[{"content":"This API cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[1,117],"source":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[118,245],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"pos":[1671,1677],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2261,2271],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The buffer size that's required, or 0 if the variable is not found.","pos":[2293,2360]},{"content":"Buffer to store the value of the environment variable.","pos":[2379,2433]},{"content":"Size of <ph id=\"ph1\">`buffer`</ph>.","pos":[2462,2479],"source":" Size of `buffer`."},{"content":"Environment variable name.","pos":[2499,2525]},{"pos":[2534,2546],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if successful; otherwise, an error code on failure.","pos":[2550,2606]},{"pos":[2616,2632],"content":"Error Conditions","linkify":"Error Conditions","nodes":[{"content":"Error Conditions","pos":[0,16]}]},{"content":"Return Value","pos":[2692,2704]},{"content":"any","pos":[2816,2819]},{"content":"any","pos":[2820,2823]},{"content":"any","pos":[2824,2827]},{"content":"any","pos":[2841,2844]},{"content":"&gt;0","pos":[2852,2854],"source":">0"},{"content":"any","pos":[2855,2858]},{"content":"any","pos":[2872,2875]},{"content":"any","pos":[2876,2879]},{"content":"any","pos":[2880,2883]},{"content":"Any of these error conditions invokes an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2907,3063],"source":"Any of these error conditions invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return <ph id=\"ph3\">`EINVAL`</ph>.","pos":[3064,3159],"source":" If execution is allowed to continue, the functions set `errno` to `EINVAL` and return `EINVAL`."},{"content":"Also, if the buffer is too small, these functions return <ph id=\"ph1\">`ERANGE`</ph>.","pos":[3166,3232],"source":"Also, if the buffer is too small, these functions return `ERANGE`."},{"content":"They do not invoke an invalid parameter handler.","pos":[3233,3281]},{"content":"They write out the required buffer size in <ph id=\"ph1\">`pReturnValue`</ph>, and thereby enable programs to call the function again with a larger buffer.","pos":[3282,3417],"source":" They write out the required buffer size in `pReturnValue`, and thereby enable programs to call the function again with a larger buffer."},{"pos":[3426,3433],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`getenv_s`</ph> function searches the list of environment variables for <ph id=\"ph2\">`varname`</ph>.","pos":[3437,3518],"source":"The `getenv_s` function searches the list of environment variables for `varname`."},{"content":"<ph id=\"ph1\">`getenv_s`</ph> is not case sensitive in the Windows operating system.","pos":[3519,3584],"source":"`getenv_s` is not case sensitive in the Windows operating system."},{"content":"<ph id=\"ph1\">`getenv_s`</ph> and <ph id=\"ph2\">`_putenv_s`</ph> use the copy of the environment that's pointed to by the global variable <ph id=\"ph3\">`_environ`</ph> to access the environment.","pos":[3585,3722],"source":"`getenv_s` and `_putenv_s` use the copy of the environment that's pointed to by the global variable `_environ` to access the environment."},{"content":"<ph id=\"ph1\">`getenv_s`</ph> operates only on the data structures that are accessible to the run-time library and not on the environment \"segment\" that's created for the process by the operating system.","pos":[3723,3907],"source":"`getenv_s` operates only on the data structures that are accessible to the run-time library and not on the environment \"segment\" that's created for the process by the operating system."},{"content":"Therefore, programs that use the <ph id=\"ph1\">`envp`</ph> argument to <bpt id=\"p1\">[</bpt>main<ept id=\"p1\">](../../cpp/main-program-startup.md)</ept> or <bpt id=\"p2\">[</bpt>wmain<ept id=\"p2\">](../../cpp/main-program-startup.md)</ept> might retrieve invalid information.","pos":[3908,4083],"source":" Therefore, programs that use the `envp` argument to [main](../../cpp/main-program-startup.md) or [wmain](../../cpp/main-program-startup.md) might retrieve invalid information."},{"content":"<ph id=\"ph1\">`_wgetenv_s`</ph> is a wide-character version of <ph id=\"ph2\">`getenv_s`</ph>; the argument and return value of <ph id=\"ph3\">`_wgetenv_s`</ph> are wide-character strings.","pos":[4090,4219],"source":"`_wgetenv_s` is a wide-character version of `getenv_s`; the argument and return value of `_wgetenv_s` are wide-character strings."},{"content":"The <ph id=\"ph1\">`_wenviron`</ph> global variable is a wide-character version of <ph id=\"ph2\">`_environ`</ph>.","pos":[4220,4294],"source":" The `_wenviron` global variable is a wide-character version of `_environ`."},{"content":"In an MBCS program (for example, in an SBCS ASCII program), <ph id=\"ph1\">`_wenviron`</ph> is initially <ph id=\"ph2\">`NULL`</ph> because the environment is composed of multibyte-character strings.","pos":[4301,4460],"source":"In an MBCS program (for example, in an SBCS ASCII program), `_wenviron` is initially `NULL` because the environment is composed of multibyte-character strings."},{"content":"Then, on the first call to <ph id=\"ph1\">`_wputenv`</ph>, or on the first call to <ph id=\"ph2\">`_wgetenv_s`</ph>, if an (MBCS) environment already exists, a corresponding wide-character string environment is created and is then pointed to by <ph id=\"ph3\">`_wenviron`</ph>.","pos":[4461,4678],"source":" Then, on the first call to `_wputenv`, or on the first call to `_wgetenv_s`, if an (MBCS) environment already exists, a corresponding wide-character string environment is created and is then pointed to by `_wenviron`."},{"content":"Similarly in a Unicode <ph id=\"ph1\">`(_wmain`</ph>) program, <ph id=\"ph2\">`_environ`</ph> is initially <ph id=\"ph3\">`NULL`</ph> because the environment is composed of wide-character strings.","pos":[4685,4821],"source":"Similarly in a Unicode `(_wmain`) program, `_environ` is initially `NULL` because the environment is composed of wide-character strings."},{"content":"Then, on the first call to <ph id=\"ph1\">`_putenv`</ph>, or on the first call to <ph id=\"ph2\">`getenv_s`</ph> if a (Unicode) environment already exists, a corresponding MBCS environment is created and is then pointed to by <ph id=\"ph3\">`_environ`</ph>.","pos":[4822,5019],"source":" Then, on the first call to `_putenv`, or on the first call to `getenv_s` if a (Unicode) environment already exists, a corresponding MBCS environment is created and is then pointed to by `_environ`."},{"content":"When two copies of the environment (MBCS and Unicode) exist simultaneously in a program, the run-time system must maintain both copies, and this causes slower execution time.","pos":[5026,5200]},{"content":"For example, when you call <ph id=\"ph1\">`_putenv`</ph>, a call to <ph id=\"ph2\">`_wputenv`</ph> is also executed automatically so that the two environment strings correspond.","pos":[5201,5338],"source":" For example, when you call `_putenv`, a call to `_wputenv` is also executed automatically so that the two environment strings correspond."},{"pos":[5346,5838],"content":"[!CAUTION]\n In rare instances, when the run-time system is maintaining both a Unicode version and a multibyte version of the environment, the two environment versions may not correspond exactly. This happens because, although any unique multibyte-character string maps to a unique Unicode string, the mapping from a unique Unicode string to a multibyte-character string is not necessarily unique. For more information, see [_environ, _wenviron](../../c-runtime-library/environ-wenviron.md).","leadings":["","> "],"nodes":[{"content":" In rare instances, when the run-time system is maintaining both a Unicode version and a multibyte version of the environment, the two environment versions may not correspond exactly. This happens because, although any unique multibyte-character string maps to a unique Unicode string, the mapping from a unique Unicode string to a multibyte-character string is not necessarily unique. For more information, see [_environ, _wenviron](../../c-runtime-library/environ-wenviron.md).","pos":[11,490],"nodes":[{"content":"In rare instances, when the run-time system is maintaining both a Unicode version and a multibyte version of the environment, the two environment versions may not correspond exactly.","pos":[1,183]},{"content":"This happens because, although any unique multibyte-character string maps to a unique Unicode string, the mapping from a unique Unicode string to a multibyte-character string is not necessarily unique.","pos":[184,385]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>_environ, _wenviron<ept id=\"p1\">](../../c-runtime-library/environ-wenviron.md)</ept>.","pos":[386,479],"source":" For more information, see [_environ, _wenviron](../../c-runtime-library/environ-wenviron.md)."}]}]},{"pos":[5846,6108],"content":"[!NOTE]\n The `_putenv_s` and `_getenv_s` families of functions are not thread-safe. `_getenv_s` could return a string pointer while `_putenv_s` is modifying the string and thereby cause random failures. Make sure that calls to these functions are synchronized.","leadings":["","> "],"nodes":[{"content":" The `_putenv_s` and `_getenv_s` families of functions are not thread-safe. `_getenv_s` could return a string pointer while `_putenv_s` is modifying the string and thereby cause random failures. Make sure that calls to these functions are synchronized.","pos":[8,260],"nodes":[{"content":"The <ph id=\"ph1\">`_putenv_s`</ph> and <ph id=\"ph2\">`_getenv_s`</ph> families of functions are not thread-safe.","pos":[1,75],"source":" The `_putenv_s` and `_getenv_s` families of functions are not thread-safe."},{"content":"<ph id=\"ph1\">`_getenv_s`</ph> could return a string pointer while <ph id=\"ph2\">`_putenv_s`</ph> is modifying the string and thereby cause random failures.","pos":[76,194],"source":"`_getenv_s` could return a string pointer while `_putenv_s` is modifying the string and thereby cause random failures."},{"content":"Make sure that calls to these functions are synchronized.","pos":[195,252]}]}]},{"content":"In C++, use of these functions is simplified by template overloads; the overloads can infer buffer length automatically and thereby eliminate the need to specify a size argument.","pos":[6115,6293]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[6294,6402],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"pos":[6412,6441],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[6448,6463]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[6464,6492],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[6493,6506]},{"content":"_UNICODE defined","pos":[6507,6523]},{"content":"To check or change the value of the <ph id=\"ph1\">`TZ`</ph> environment variable, use <ph id=\"ph2\">`getenv_s`</ph>, <ph id=\"ph3\">`_putenv`</ph>, and <ph id=\"ph4\">`_tzset`</ph>, as required.","pos":[6691,6807],"source":"To check or change the value of the `TZ` environment variable, use `getenv_s`, `_putenv`, and `_tzset`, as required."},{"content":"For more information about <ph id=\"ph1\">`TZ`</ph>, see <bpt id=\"p1\">[</bpt>_tzset<ept id=\"p1\">](../../c-runtime-library/reference/tzset.md)</ept> and <bpt id=\"p2\">[</bpt>_daylight, _dstbias, _timezone, and _tzname<ept id=\"p2\">](../../c-runtime-library/daylight-dstbias-timezone-and-tzname.md)</ept>.","pos":[6808,7013],"source":" For more information about `TZ`, see [_tzset](../../c-runtime-library/reference/tzset.md) and [_daylight, _dstbias, _timezone, and _tzname](../../c-runtime-library/daylight-dstbias-timezone-and-tzname.md)."},{"pos":[7022,7034],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[7041,7048]},{"content":"Required header","pos":[7049,7064]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[7120,7131],"source":"\\<stdlib.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[7149,7174],"source":"\\<stdlib.h> or \\<wchar.h>"},{"pos":[7182,7286],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[7295,7302],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8986,9011],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[9015,9149],"content":"<bpt id=\"p1\">[</bpt>System::Environment::GetEnvironmentVariable<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.environment.getenvironmentvariable.aspx)</ept>","source":"[System::Environment::GetEnvironmentVariable](https://msdn.microsoft.com/en-us/library/system.environment.getenvironmentvariable.aspx)"},{"pos":[9158,9166],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Process and Environment Control<ept id=\"p1\">](../../c-runtime-library/process-and-environment-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[9170,9264],"source":"[Process and Environment Control](../../c-runtime-library/process-and-environment-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Environmental Constants<ept id=\"p1\">](../../c-runtime-library/environmental-constants.md)</ept><ph id=\"ph1\"> </ph>","pos":[9267,9346],"source":" [Environmental Constants](../../c-runtime-library/environmental-constants.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_putenv, _wputenv<ept id=\"p1\">](../../c-runtime-library/reference/putenv-wputenv.md)</ept><ph id=\"ph1\"> </ph>","pos":[9349,9423],"source":" [_putenv, _wputenv](../../c-runtime-library/reference/putenv-wputenv.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_dupenv_s, _wdupenv_s<ept id=\"p1\">](../../c-runtime-library/reference/dupenv-s-wdupenv-s.md)</ept>","pos":[9426,9507],"source":" [_dupenv_s, _wdupenv_s](../../c-runtime-library/reference/dupenv-s-wdupenv-s.md)"}],"content":"---\ntitle: \"getenv_s, _wgetenv_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"getenv_s\"\n  - \"_wgetenv_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-environment-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"getenv_s\"\n  - \"_tgetenv_s\"\n  - \"_wgetenv_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_tgetenv_s function\"\n  - \"wgetenv_s function\"\n  - \"_wgetenv_s function\"\n  - \"getenv_s function\"\n  - \"environment variables\"\n  - \"tgetenv_s function\"\nms.assetid: c3ae1ffe-d4cd-4bae-bcb1-3afa754c613a\ncaps.latest.revision: 42\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# getenv_s, _wgetenv_s\nGets a value from the current environment. These versions of [getenv, _wgetenv](../../c-runtime-library/reference/getenv-wgetenv.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nerrno_t getenv_s(   \n   size_t *pReturnValue,  \n   char* buffer,  \n   size_t numberOfElements,  \n   const char *varname   \n);  \nerrno_t _wgetenv_s(   \n   size_t *pReturnValue,  \n   wchar_t *buffer,  \n   size_t numberOfElements,  \n   const wchar_t *varname   \n);  \ntemplate <size_t size>  \nerrno_t getenv_s(   \n   size_t *pReturnValue,  \n   char (&buffer)[size],  \n   const char *varname   \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _wgetenv_s(   \n   size_t *pReturnValue,  \n   wchar_t (&buffer)[size],  \n   const wchar_t *varname   \n); // C++ only  \n```  \n  \n#### Parameters  \n `pReturnValue`  \n The buffer size that's required, or 0 if the variable is not found.  \n  \n `buffer`  \n Buffer to store the value of the environment variable.  \n  \n `numberOfElements`  \n Size of `buffer`.  \n  \n `varname`  \n Environment variable name.  \n  \n## Return Value  \n Zero if successful; otherwise, an error code on failure.  \n  \n### Error Conditions  \n  \n|`pReturnValue`|`buffer`|`numberOfElements`|`varname`|Return Value|  \n|--------------------|--------------|------------------------|---------------|------------------|  \n|`NULL`|any|any|any|`EINVAL`|  \n|any|`NULL`|>0|any|`EINVAL`|  \n|any|any|any|`NULL`|`EINVAL`|  \n  \n Any of these error conditions invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions set `errno` to `EINVAL` and return `EINVAL`.  \n  \n Also, if the buffer is too small, these functions return `ERANGE`. They do not invoke an invalid parameter handler. They write out the required buffer size in `pReturnValue`, and thereby enable programs to call the function again with a larger buffer.  \n  \n## Remarks  \n The `getenv_s` function searches the list of environment variables for `varname`. `getenv_s` is not case sensitive in the Windows operating system. `getenv_s` and `_putenv_s` use the copy of the environment that's pointed to by the global variable `_environ` to access the environment. `getenv_s` operates only on the data structures that are accessible to the run-time library and not on the environment \"segment\" that's created for the process by the operating system. Therefore, programs that use the `envp` argument to [main](../../cpp/main-program-startup.md) or [wmain](../../cpp/main-program-startup.md) might retrieve invalid information.  \n  \n `_wgetenv_s` is a wide-character version of `getenv_s`; the argument and return value of `_wgetenv_s` are wide-character strings. The `_wenviron` global variable is a wide-character version of `_environ`.  \n  \n In an MBCS program (for example, in an SBCS ASCII program), `_wenviron` is initially `NULL` because the environment is composed of multibyte-character strings. Then, on the first call to `_wputenv`, or on the first call to `_wgetenv_s`, if an (MBCS) environment already exists, a corresponding wide-character string environment is created and is then pointed to by `_wenviron`.  \n  \n Similarly in a Unicode `(_wmain`) program, `_environ` is initially `NULL` because the environment is composed of wide-character strings. Then, on the first call to `_putenv`, or on the first call to `getenv_s` if a (Unicode) environment already exists, a corresponding MBCS environment is created and is then pointed to by `_environ`.  \n  \n When two copies of the environment (MBCS and Unicode) exist simultaneously in a program, the run-time system must maintain both copies, and this causes slower execution time. For example, when you call `_putenv`, a call to `_wputenv` is also executed automatically so that the two environment strings correspond.  \n  \n> [!CAUTION]\n>  In rare instances, when the run-time system is maintaining both a Unicode version and a multibyte version of the environment, the two environment versions may not correspond exactly. This happens because, although any unique multibyte-character string maps to a unique Unicode string, the mapping from a unique Unicode string to a multibyte-character string is not necessarily unique. For more information, see [_environ, _wenviron](../../c-runtime-library/environ-wenviron.md).  \n  \n> [!NOTE]\n>  The `_putenv_s` and `_getenv_s` families of functions are not thread-safe. `_getenv_s` could return a string pointer while `_putenv_s` is modifying the string and thereby cause random failures. Make sure that calls to these functions are synchronized.  \n  \n In C++, use of these functions is simplified by template overloads; the overloads can infer buffer length automatically and thereby eliminate the need to specify a size argument. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tgetenv_s`|`getenv_s`|`getenv_s`|`_wgetenv_s`|  \n  \n To check or change the value of the `TZ` environment variable, use `getenv_s`, `_putenv`, and `_tzset`, as required. For more information about `TZ`, see [_tzset](../../c-runtime-library/reference/tzset.md) and [_daylight, _dstbias, _timezone, and _tzname](../../c-runtime-library/daylight-dstbias-timezone-and-tzname.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`getenv_s`|\\<stdlib.h>|  \n|`_wgetenv_s`|\\<stdlib.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n  \n      // crt_getenv_s.c  \n// This program uses getenv_s to retrieve  \n// the LIB environment variable and then uses  \n// _putenv to change it to a new value.  \n  \n#include <stdlib.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   char* libvar;  \n   size_t requiredSize;  \n  \n   getenv_s( &requiredSize, NULL, 0, \"LIB\");  \n   if (requiredSize == 0)  \n   {  \n      printf(\"LIB doesn't exist!\\n\");  \n      exit(1);  \n   }  \n  \n   libvar = (char*) malloc(requiredSize * sizeof(char));  \n   if (!libvar)  \n   {  \n      printf(\"Failed to allocate memory!\\n\");  \n      exit(1);  \n   }  \n  \n   // Get the value of the LIB environment variable.  \n   getenv_s( &requiredSize, libvar, requiredSize, \"LIB\" );  \n  \n   printf( \"Original LIB variable is: %s\\n\", libvar );  \n  \n   // Attempt to change path. Note that this only affects  \n   // the environment variable of the current process. The command  \n   // processor's environment is not changed.  \n   _putenv_s( \"LIB\", \"c:\\\\mylib;c:\\\\yourlib\" );  \n  \n   getenv_s( &requiredSize, NULL, 0, \"LIB\");  \n  \n   libvar = (char*) realloc(libvar, requiredSize * sizeof(char));  \n   if (!libvar)  \n   {  \n      printf(\"Failed to allocate memory!\\n\");  \n      exit(1);  \n   }  \n  \n   // Get the new value of the LIB environment variable.   \n   getenv_s( &requiredSize, libvar, requiredSize, \"LIB\" );  \n  \n   printf( \"New LIB variable is: %s\\n\", libvar );  \n  \n   free(libvar);  \n}  \n```  \n  \n```Output  \nOriginal LIB variable is: c:\\vctools\\lib;c:\\vctools\\atlmfc\\lib;c:\\vctools\\PlatformSDK\\lib;c:\\vctools\\Visual Studio SDKs\\DIA Sdk\\lib;c:\\vctools\\Visual Studio SDKs\\BSC Sdk\\lib  \nNew LIB variable is: c:\\mylib;c:\\yourlib  \n```  \n  \n## .NET Framework Equivalent  \n [System::Environment::GetEnvironmentVariable](https://msdn.microsoft.com/en-us/library/system.environment.getenvironmentvariable.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [Environmental Constants](../../c-runtime-library/environmental-constants.md)   \n [_putenv, _wputenv](../../c-runtime-library/reference/putenv-wputenv.md)   \n [_dupenv_s, _wdupenv_s](../../c-runtime-library/reference/dupenv-s-wdupenv-s.md)"}