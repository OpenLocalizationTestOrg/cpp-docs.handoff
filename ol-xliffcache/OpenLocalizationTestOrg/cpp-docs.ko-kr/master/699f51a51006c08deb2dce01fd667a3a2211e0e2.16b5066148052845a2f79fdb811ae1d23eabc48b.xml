{"nodes":[{"pos":[12,44],"content":"CBasePane Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CBasePane Class | Microsoft Docs","pos":[0,32]}]},{"content":"CBasePane Class","pos":[2473,2488]},{"content":"Base class for all panes in MFC.","pos":[2489,2521]},{"content":"Syntax","pos":[2530,2536]},{"content":"Members","pos":[2592,2599]},{"content":"Public Constructors","pos":[2609,2628]},{"content":"Name","pos":[2635,2639]},{"content":"Description","pos":[2640,2651]},{"content":"Default constructor.","pos":[2712,2732]},{"content":"Destructor.","pos":[2761,2772]},{"content":"Public Methods","pos":[2783,2797]},{"content":"Name","pos":[2804,2808]},{"content":"Description","pos":[2809,2820]},{"content":"Called by the framework to retrieve the child element or child object at a given point on the screen.","pos":[2882,2983]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::accHitTest<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__acchittest)</ept>.)","pos":[2984,3067],"source":" (Overrides [CWnd::accHitTest](../../mfc/reference/cwnd-class.md#cwnd__acchittest).)"},{"content":"Called by the framework to retrieve the current screen location for the specified object.","pos":[3097,3186]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::accLocation<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__acclocation)</ept>.)","pos":[3187,3272],"source":" (Overrides [CWnd::accLocation](../../mfc/reference/cwnd-class.md#cwnd__acclocation).)"},{"content":"CBasePane::AccNotifyObjectFocusEvent","pos":[3278,3314]},{"pos":[3367,3392],"content":"does not use this method."},{"content":"Called by the framework to modify the selection or move the keyboard focus of the specified object.","pos":[3420,3519]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::accSelect<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__accselect)</ept>.)","pos":[3520,3601],"source":" (Overrides [CWnd::accSelect](../../mfc/reference/cwnd-class.md#cwnd__accselect).)"},{"content":"CBasePane::AddPane","pos":[3607,3625]},{"content":"Adds a pane to the docking manager.","pos":[3648,3683]},{"content":"CBasePane::AdjustDockingLayout","pos":[3689,3719]},{"content":"Redirects a call to the docking manager to adjust the docking layout.","pos":[3754,3823]},{"content":"CBasePane::AdjustLayout","pos":[3829,3852]},{"content":"Called by the framework when the pane should adjust its internal layout.","pos":[3880,3952]},{"content":"CBasePane::CalcFixedLayout","pos":[3958,3984]},{"content":"Calculates the horizontal size of a control bar.","pos":[4015,4063]},{"content":"CBasePane::CanAcceptPane","pos":[4069,4093]},{"content":"Determines whether another pane can be docked to the pane.","pos":[4122,4180]},{"content":"CBasePane::CanAutoHide","pos":[4186,4208]},{"content":"Determines whether the pane supports auto-hide mode.","pos":[4235,4287]},{"content":"CBasePane::CanBeAttached","pos":[4293,4317]},{"content":"Determines whether the pane can be docked to another pane.","pos":[4346,4404]},{"content":"CBasePane::CanBeClosed","pos":[4410,4432]},{"content":"Determines whether the pane can be closed.","pos":[4459,4501]},{"content":"CBasePane::CanBeDocked","pos":[4507,4529]},{"content":"Determines whether the pane can be docked to another pane.","pos":[4556,4614]},{"content":"CBasePane::CanBeResized","pos":[4620,4643]},{"content":"Determines whether the pane can be resized.","pos":[4671,4714]},{"content":"CBasePane::CanBeTabbedDocument","pos":[4720,4750]},{"content":"Specifies whether the pane can be converted to an MDI tabbed document.","pos":[4785,4855]},{"content":"CBasePane::CanFloat","pos":[4861,4880]},{"content":"Determines whether the pane can float.","pos":[4904,4942]},{"content":"CBasePane::CanFocus","pos":[4948,4967]},{"content":"Specifies whether the pane can receive focus.","pos":[4991,5036]},{"content":"CBasePane::CopyState","pos":[5042,5062]},{"content":"Copies the state of a given pane.","pos":[5087,5120]},{"content":"CBasePane::CreateDefaultMiniframe","pos":[5126,5159]},{"content":"If the pane can float, creates a mini-frame window.","pos":[5197,5248]},{"content":"CBasePane::CreateEx","pos":[5254,5273]},{"content":"Creates the pane control.","pos":[5297,5322]},{"content":"CBasePane::DockPane","pos":[5328,5347]},{"content":"Docks a pane to another pane or to a frame window.","pos":[5371,5421]},{"content":"CBasePane::DockPaneUsingRTTI","pos":[5427,5455]},{"content":"Docks the pane by using run-time type information.","pos":[5488,5538]},{"content":"CBasePane::DockToFrameWindow","pos":[5544,5572]},{"content":"Docks a dockable pane to a frame.","pos":[5605,5638]},{"content":"CBasePane::DoesAllowDynInsertBefore","pos":[5644,5679]},{"content":"Determines whether another pane can be dynamically inserted between this pane and the parent frame.","pos":[5719,5818]},{"content":"CBasePane::EnableDocking","pos":[5824,5848]},{"content":"Enables docking of the pane to the main frame.","pos":[5877,5923]},{"content":"CBasePane::EnableGripper","pos":[5929,5953]},{"content":"Enables or disables the gripper.","pos":[5982,6014]},{"content":"If the gripper is enabled, the user can drag it to reposition the pane.","pos":[6015,6086]},{"content":"Used internally.","pos":[6119,6135]},{"content":"CBasePane::FloatPane","pos":[6141,6161]},{"content":"Floats the pane.","pos":[6186,6202]},{"content":"Called by the framework to retrieve the address of an <ph id=\"ph1\">`IDispatch`</ph> interface for the specified child.","pos":[6233,6333],"source":"Called by the framework to retrieve the address of an `IDispatch` interface for the specified child."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accChild<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_accchild)</ept>.)","pos":[6334,6421],"source":" (Overrides [CWnd::get_accChild](../../mfc/reference/cwnd-class.md#cwnd__get_accchild).)"},{"content":"Called by the framework to retrieve the number of children that belong to this object.","pos":[6457,6543]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accChildCount<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_accchildcount)</ept>.)","pos":[6544,6641],"source":" (Overrides [CWnd::get_accChildCount](../../mfc/reference/cwnd-class.md#cwnd__get_accchildcount).)"},{"content":"Called by the framework to retrieve a string that describes the default action for the object.","pos":[6680,6774]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accDefaultAction<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_accdefaultaction)</ept>.)","pos":[6775,6878],"source":" (Overrides [CWnd::get_accDefaultAction](../../mfc/reference/cwnd-class.md#cwnd__get_accdefaultaction).)"},{"content":"Called by framework to retrieve a string that describes the visual appearance of the specified object.","pos":[6915,7017]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accDescription<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_accdescription)</ept>.)","pos":[7018,7117],"source":" (Overrides [CWnd::get_accDescription](../../mfc/reference/cwnd-class.md#cwnd__get_accdescription).)"},{"content":"Called by the framework to retrieve the object that has the keyboard focus.","pos":[7148,7223]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accFocus<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_accfocus)</ept>.)","pos":[7224,7311],"source":" (Overrides [CWnd::get_accFocus](../../mfc/reference/cwnd-class.md#cwnd__get_accfocus).)"},{"content":"Called by the framework to retrieve a  Help property string for the object.","pos":[7341,7416]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accHelp<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_acchelp)</ept>.)","pos":[7417,7502],"source":" (Overrides [CWnd::get_accHelp](../../mfc/reference/cwnd-class.md#cwnd__get_acchelp).)"},{"content":"CBasePane::get_accHelpTopic","pos":[7508,7535]},{"content":"Called by the framework to retrieve the full path of the WinHelp file that is associated with the specified object and the identifier of the appropriate topic in that file.","pos":[7567,7739]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accHelpTopic<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_acchelptopic)</ept>.)","pos":[7740,7835],"source":" (Overrides [CWnd::get_accHelpTopic](../../mfc/reference/cwnd-class.md#cwnd__get_acchelptopic).)"},{"content":"Called by the framework to retrieve the specified shortcut key for the object.","pos":[7877,7955]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accKeyboardShortcut<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_acckeyboardshortcut)</ept>.)","pos":[7956,8065],"source":" (Overrides [CWnd::get_accKeyboardShortcut](../../mfc/reference/cwnd-class.md#cwnd__get_acckeyboardshortcut).)"},{"content":"Called by the framework to retrieve the name of the specified object.","pos":[8095,8164]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accName<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_accname)</ept>.)","pos":[8165,8250],"source":" (Overrides [CWnd::get_accName](../../mfc/reference/cwnd-class.md#cwnd__get_accname).)"},{"content":"Called by the framework to retrieve the <ph id=\"ph1\">`IDispatch`</ph> interface for the parent of the object.","pos":[8282,8373],"source":"Called by the framework to retrieve the `IDispatch` interface for the parent of the object."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accParent<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_accparent)</ept>.)","pos":[8374,8463],"source":" (Overrides [CWnd::get_accParent](../../mfc/reference/cwnd-class.md#cwnd__get_accparent).)"},{"content":"Called by the framework to retrieve information that describes the role of the specified object.","pos":[8493,8589]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accRole<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_accrole)</ept>.)","pos":[8590,8675],"source":" (Overrides [CWnd::get_accRole](../../mfc/reference/cwnd-class.md#cwnd__get_accrole).)"},{"content":"CBasePane::get_accSelection","pos":[8681,8708]},{"content":"Called by the framework to retrieve the selected children of this object.","pos":[8740,8813]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accSelection<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_accselection)</ept>.)","pos":[8814,8909],"source":" (Overrides [CWnd::get_accSelection](../../mfc/reference/cwnd-class.md#cwnd__get_accselection).)"},{"content":"Called by the framework to retrieve the current state of the specified object.","pos":[8940,9018]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accState<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_accstate)</ept>.)","pos":[9019,9106],"source":" (Overrides [CWnd::get_accState](../../mfc/reference/cwnd-class.md#cwnd__get_accstate).)"},{"content":"Called by the framework to retrieve the value of the specified object.","pos":[9137,9207]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::get_accValue<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__get_accvalue)</ept>.)","pos":[9208,9295],"source":" (Overrides [CWnd::get_accValue](../../mfc/reference/cwnd-class.md#cwnd__get_accvalue).)"},{"content":"CBasePane::GetCaptionHeight","pos":[9301,9328]},{"content":"Returns the caption height.","pos":[9360,9387]},{"content":"CBasePane::GetControlBarStyle","pos":[9393,9422]},{"content":"Returns the control bar style.","pos":[9456,9486]},{"content":"CBasePane::GetCurrentAlignment","pos":[9492,9522]},{"content":"Returns the current pane alignment.","pos":[9557,9592]},{"content":"CBasePane::GetDockingMode","pos":[9598,9623]},{"content":"Returns the current docking mode for the pane.","pos":[9653,9699]},{"content":"CBasePane::GetDockSiteFrameWnd","pos":[9705,9735]},{"content":"Returns a pointer to the window that is the dock site for the pane.","pos":[9770,9837]},{"content":"CBasePane::GetEnabledAlignment","pos":[9843,9873]},{"content":"Returns the CBRS_ALIGN_ styles that are applied to the pane.","pos":[9908,9968]},{"content":"CBasePane::GetMFCStyle","pos":[9974,9996]},{"content":"Returns the pane styles specific to MFC.","pos":[10023,10063]},{"content":"CBasePane::GetPaneIcon","pos":[10069,10091]},{"content":"Returns a handle to the pane icon.","pos":[10118,10152]},{"content":"Used internally.","pos":[10182,10198]},{"content":"CBasePane::GetPaneRow","pos":[10204,10225]},{"pos":[10251,10373],"content":"Returns a pointer to the <bpt id=\"p1\">[</bpt>CDockingPanesRow<ept id=\"p1\">](../../mfc/reference/cdockingpanesrow-class.md)</ept>object where the pane is docked.","source":"Returns a pointer to the [CDockingPanesRow](../../mfc/reference/cdockingpanesrow-class.md)object where the pane is docked."},{"content":"CBasePane::GetPaneStyle","pos":[10379,10402]},{"content":"Returns the pane style.","pos":[10430,10453]},{"content":"CBasePane::GetParentDockSite","pos":[10459,10487]},{"content":"Returns a pointer to the parent dock site.","pos":[10520,10562]},{"content":"CBasePane::GetParentMiniFrame","pos":[10568,10597]},{"content":"Returns a pointer to the parent mini-frame window.","pos":[10631,10681]},{"content":"CBasePane::GetParentTabbedPane","pos":[10687,10717]},{"content":"Returns a pointer to the parent tabbed pane.","pos":[10752,10796]},{"content":"CBasePane::GetParentTabWnd","pos":[10802,10828]},{"content":"Returns a pointer to the parent window that is inside a tab.","pos":[10859,10919]},{"content":"CBasePane::GetRecentVisibleState","pos":[10925,10957]},{"content":"The framework calls this method when a pane is restored from an archive.","pos":[10994,11066]},{"content":"CBasePane::HideInPrintPreviewMode","pos":[11072,11105]},{"content":"Specifies whether the pane is hidden in print preview.","pos":[11143,11197]},{"content":"CBasePane::InsertPane","pos":[11203,11224]},{"content":"Registers the specified pane with the docking manager.","pos":[11250,11304]},{"content":"CBasePane::IsAccessibilityCompatible","pos":[11310,11346]},{"content":"Specifies whether the pane supports Active Accessibility.","pos":[11387,11444]},{"content":"CBasePane::IsAutoHideMode","pos":[11450,11475]},{"content":"Determines whether a pane is in auto-hide mode.","pos":[11505,11552]},{"content":"CBasePane::IsDialogControl","pos":[11558,11584]},{"content":"Specifies whether the pane is a dialog control.","pos":[11615,11662]},{"content":"CBasePane::IsDocked","pos":[11668,11687]},{"content":"Determines whether the pane is docked.","pos":[11711,11749]},{"content":"CBasePane::IsFloating","pos":[11755,11776]},{"content":"Determines whether the pane is floating.","pos":[11802,11842]},{"content":"CBasePane::IsHorizontal","pos":[11848,11871]},{"content":"Determines whether the pane is docked horizontally.","pos":[11899,11950]},{"content":"CBasePane::IsInFloatingMultiPaneFrameWnd","pos":[11956,11996]},{"content":"Specifies whether the pane is in a multi-pane frame window.","pos":[12041,12100]},{"content":"CBasePane::IsMDITabbed","pos":[12106,12128]},{"content":"Determines whether the pane has been added to an MDI child window as a tabbed document.","pos":[12155,12242]},{"content":"CBasePane::IsPaneVisible","pos":[12248,12272]},{"pos":[12301,12361],"content":"Specifies whether the <ph id=\"ph1\">`WS_VISIBLE`</ph> flag is set for the pane.","source":"Specifies whether the `WS_VISIBLE` flag is set for the pane."},{"content":"CBasePane::IsPointNearDockSite","pos":[12367,12397]},{"content":"Determines whether a specified point is near the dock site.","pos":[12432,12491]},{"content":"CBasePane::IsResizable","pos":[12497,12519]},{"content":"Determines whether the pane can be resized.","pos":[12546,12589]},{"content":"CBasePane::IsRestoredFromRegistry","pos":[12595,12628]},{"content":"Determines whether the pane is restored from the registry.","pos":[12666,12724]},{"content":"CBasePane::IsTabbed","pos":[12730,12749]},{"content":"Determines whether the pane has been inserted in the tab control of a tabbed window.","pos":[12773,12857]},{"content":"Used internally.","pos":[12892,12908]},{"content":"CBasePane::IsVisible","pos":[12914,12934]},{"content":"Determines whether the pane is visible.","pos":[12959,12998]},{"content":"CBasePane::LoadState","pos":[13004,13024]},{"content":"Loads the pane state from the registry.","pos":[13049,13088]},{"content":"CBasePane::MoveWindow","pos":[13094,13115]},{"content":"Moves the pane.","pos":[13141,13156]},{"content":"CBasePane::OnAfterChangeParent","pos":[13162,13192]},{"content":"Called by the framework when the pane's parent has been changed.","pos":[13227,13291]},{"content":"CBasePane::OnBeforeChangeParent","pos":[13297,13328]},{"content":"Called by the framework just before the pane changes its parent window.","pos":[13364,13435]},{"content":"CBasePane::OnDrawCaption","pos":[13441,13465]},{"content":"The framework calls this method when the caption is drawn.","pos":[13494,13552]},{"content":"CBasePane::OnMovePaneDivider","pos":[13558,13586]},{"content":"This method is currently not used.","pos":[13619,13653]},{"content":"CBasePane::OnPaneContextMenu","pos":[13659,13687]},{"content":"Called by the framework when it builds a menu that has a list of panes.","pos":[13720,13791]},{"content":"CBasePane::OnRemoveFromMiniFrame","pos":[13797,13829]},{"content":"Called by the framework when a pane is removed from its parent mini frame window.","pos":[13866,13947]},{"content":"CBasePane::OnSetAccData","pos":[13953,13976]},{"pos":[14016,14041],"content":"does not use this method."},{"content":"Used internally.","pos":[14073,14089]},{"content":"CBasePane::PaneFromPoint","pos":[14095,14119]},{"content":"Returns the pane that contains the given point.","pos":[14148,14195]},{"content":"Used by class <bpt id=\"p1\">[</bpt>CWinApp<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md)</ept> to translate window messages before they are dispatched to the <bpt id=\"p2\">[</bpt>TranslateMessage<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id=\"p3\">[</bpt>DispatchMessage<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept> Windows functions.","pos":[14233,14537],"source":"Used by class [CWinApp](../../mfc/reference/cwinapp-class.md) to translate window messages before they are dispatched to the [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934) Windows functions."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::PreTranslateMessage<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__pretranslatemessage)</ept>.)","pos":[14538,14639],"source":" (Overrides [CWnd::PreTranslateMessage](../../mfc/reference/cwnd-class.md#cwnd__pretranslatemessage).)"},{"content":"CBasePane::RecalcLayout","pos":[14645,14668]},{"pos":[14708,14733],"content":"does not use this method."},{"content":"CBasePane::RemovePaneFromDockManager","pos":[14739,14775]},{"content":"Unregisters a pane and removes it from the list in the docking manager.","pos":[14816,14887]},{"content":"CBasePane::SaveState","pos":[14893,14913]},{"content":"Saves the pane's state to the registry.","pos":[14938,14977]},{"content":"CBasePane::SelectDefaultFont","pos":[14983,15011]},{"content":"Selects the default font for a given device context.","pos":[15044,15096]},{"content":"Reads or writes this object from or to an archive.","pos":[15124,15174]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CObject::Serialize<ept id=\"p1\">](../../mfc/reference/cobject-class.md#cobject__serialize)</ept>.)","pos":[15175,15265],"source":" (Overrides [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize).)"},{"content":"CBasePane::SetControlBarStyle","pos":[15271,15300]},{"content":"Sets the control bar style.","pos":[15334,15361]},{"content":"CBasePane::SetDockingMode","pos":[15367,15392]},{"content":"Sets the docking mode for the pane.","pos":[15422,15457]},{"content":"Used internally.","pos":[15488,15504]},{"content":"CBasePane::SetPaneAlignment","pos":[15510,15537]},{"content":"Sets the alignment for the pane.","pos":[15569,15601]},{"content":"Used internally.","pos":[15631,15647]},{"content":"CBasePane::SetPaneStyle","pos":[15653,15676]},{"content":"Sets the style of the pane.","pos":[15704,15731]},{"content":"Used internally.","pos":[15773,15789]},{"content":"CBasePane::SetWindowPos","pos":[15795,15818]},{"content":"Changes the size, position, and Z-order of a pane.","pos":[15846,15896]},{"content":"CBasePane::ShowPane","pos":[15902,15921]},{"content":"Shows or hides the pane.","pos":[15945,15969]},{"content":"CBasePane::StretchPane","pos":[15975,15997]},{"content":"Stretches a pane vertically or horizontally.","pos":[16024,16068]},{"content":"CBasePane::UndockPane","pos":[16074,16095]},{"content":"Removes the pane from the dock site, default slider, or mini-frame window where it is currently docked.","pos":[16121,16224]},{"content":"Protected Methods","pos":[16235,16252]},{"content":"Name","pos":[16259,16263]},{"content":"Description","pos":[16264,16275]},{"content":"CBasePane::DoPaint","pos":[16314,16332]},{"content":"Fills the background of the pane.","pos":[16355,16388]},{"content":"Remarks","pos":[16398,16405]},{"pos":[16409,16600],"content":"If you want to create a pane class that supports the extended docking features available in MFC, you must derive it from <ph id=\"ph1\">`CBasePane`</ph> or from <bpt id=\"p1\">[</bpt>CPane Class<ept id=\"p1\">](../../mfc/reference/cpane-class.md)</ept>.","source":"If you want to create a pane class that supports the extended docking features available in MFC, you must derive it from `CBasePane` or from [CPane Class](../../mfc/reference/cpane-class.md)."},{"content":"Customization Tips","pos":[16609,16627]},{"pos":[16631,16774],"content":"The following customization tips pertain to the <bpt id=\"p1\">[</bpt>CBasePane Class<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md)</ept> and any classes that inherit from it:","source":"The following customization tips pertain to the [CBasePane Class](../../mfc/reference/cbasepane-class.md) and any classes that inherit from it:"},{"content":"When you create a pane, you can apply several new styles:","pos":[16784,16841]},{"pos":[16870,16891],"content":"makes the pane float."},{"pos":[16923,16946],"content":"enables auto-hide mode."},{"pos":[16975,17014],"content":"enables the pane to be closed (hidden)."},{"content":"These are flags that you can combine with a bitwise-OR operation.","pos":[17025,17090]},{"content":"implements the following virtual Boolean methods to reflect these flags: <bpt id=\"p1\">[</bpt>CBasePane::CanBeClosed<ept id=\"p1\">](#cbasepane__canbeclosed)</ept>, <bpt id=\"p2\">[</bpt>CBasePane::CanAutoHide<ept id=\"p2\">](#cbasepane__canautohide)</ept>, <bpt id=\"p3\">[</bpt>CBasePane::CanFloat<ept id=\"p3\">](#cbasepane__canfloat)</ept>.","pos":[17109,17328],"source":" implements the following virtual Boolean methods to reflect these flags: [CBasePane::CanBeClosed](#cbasepane__canbeclosed), [CBasePane::CanAutoHide](#cbasepane__canautohide), [CBasePane::CanFloat](#cbasepane__canfloat)."},{"content":"You can override them in derived classes to customize their behavior.","pos":[17329,17398]},{"content":"You can customize docking behavior by overriding <bpt id=\"p1\">[</bpt>CBasePane::CanAcceptPane<ept id=\"p1\">](#cbasepane__canacceptpane)</ept>.","pos":[17408,17511],"source":"You can customize docking behavior by overriding [CBasePane::CanAcceptPane](#cbasepane__canacceptpane)."},{"content":"Have your pane return <ph id=\"ph1\">`FALSE`</ph> from this method to prevent another pane from docking to it.","pos":[17512,17602],"source":" Have your pane return `FALSE` from this method to prevent another pane from docking to it."},{"content":"If you want to create a static pane that cannot float and that prevents any other pane from docking before it (similar to the Outlook bar in the OutlookDemo example), create it as non-floating and override <bpt id=\"p1\">[</bpt>CBasePane::DoesAllowDynInsertBefore<ept id=\"p1\">](#cbasepane__doesallowdyninsertbefore)</ept> to return <ph id=\"ph1\">`FALSE`</ph>.","pos":[17612,17912],"source":"If you want to create a static pane that cannot float and that prevents any other pane from docking before it (similar to the Outlook bar in the OutlookDemo example), create it as non-floating and override [CBasePane::DoesAllowDynInsertBefore](#cbasepane__doesallowdyninsertbefore) to return `FALSE`."},{"content":"The default implementation returns <ph id=\"ph1\">`FALSE`</ph> if the pane is created without the <ph id=\"ph2\">`AFX_CBRS_FLOAT`</ph> style.","pos":[17913,18014],"source":" The default implementation returns `FALSE` if the pane is created without the `AFX_CBRS_FLOAT` style."},{"content":"Create all panes with IDs other than -1.","pos":[18024,18064]},{"content":"To determine pane visibility, use <bpt id=\"p1\">[</bpt>CBasePane::IsVisible<ept id=\"p1\">](#cbasepane__isvisible)</ept>.","pos":[18074,18154],"source":"To determine pane visibility, use [CBasePane::IsVisible](#cbasepane__isvisible)."},{"content":"It correctly handles the visibility state in tabbed and auto-hide modes.","pos":[18155,18227]},{"pos":[18237,18438],"content":"If you want to create a non-floating resizable pane, create it without the <ph id=\"ph1\">`AFX_CBRS_FLOAT`</ph> style and call <bpt id=\"p1\">[</bpt>CFrameWnd::DockControlBar<ept id=\"p1\">](../../mfc/reference/cframewnd-class.md#cframewnd__dockcontrolbar)</ept>.","source":"If you want to create a non-floating resizable pane, create it without the `AFX_CBRS_FLOAT` style and call [CFrameWnd::DockControlBar](../../mfc/reference/cframewnd-class.md#cframewnd__dockcontrolbar)."},{"content":"To exclude a pane from a docking layout or to remove a toolbar from its dock bar, call <bpt id=\"p1\">[</bpt>CBasePane::UndockPane<ept id=\"p1\">](#cbasepane__undockpane)</ept>.","pos":[18448,18583],"source":"To exclude a pane from a docking layout or to remove a toolbar from its dock bar, call [CBasePane::UndockPane](#cbasepane__undockpane)."},{"content":"Do not call this method for panes in auto-hide mode or for panes that reside in tabs of tabbed windows.","pos":[18584,18687]},{"pos":[18697,19032],"content":"If you want to float or undock a pane that is in auto-hide mode, you must call <bpt id=\"p1\">[</bpt>CDockablePane::SetAutoHideMode<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md#cdockablepane__setautohidemode)</ept> with <ph id=\"ph1\">`FALSE`</ph> as the first argument before you call <bpt id=\"p2\">[</bpt>CBasePane::FloatPane<ept id=\"p2\">](#cbasepane__floatpane)</ept> or <bpt id=\"p3\">[</bpt>CBasePane::UndockPane<ept id=\"p3\">](#cbasepane__undockpane)</ept>.","source":"If you want to float or undock a pane that is in auto-hide mode, you must call [CDockablePane::SetAutoHideMode](../../mfc/reference/cdockablepane-class.md#cdockablepane__setautohidemode) with `FALSE` as the first argument before you call [CBasePane::FloatPane](#cbasepane__floatpane) or [CBasePane::UndockPane](#cbasepane__undockpane)."},{"content":"Example","pos":[19041,19048]},{"content":"The following example demonstrates how to use various methods in the <ph id=\"ph1\">`CBasePane`</ph> class.","pos":[19052,19139],"source":"The following example demonstrates how to use various methods in the `CBasePane` class."},{"content":"The example demonstrates how to retrieve a pane from the <ph id=\"ph1\">`CFrameWndEx`</ph> class and how to set the docking mode, the pane alignment, and the pane style.","pos":[19140,19289],"source":" The example demonstrates how to retrieve a pane from the `CFrameWndEx` class and how to set the docking mode, the pane alignment, and the pane style."},{"content":"The code is from the <bpt id=\"p1\">[</bpt>Word Pad sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[19290,19358],"source":" The code is from the [Word Pad sample](../../visual-cpp-samples.md)."},{"pos":[19376,19393],"content":"NVC_MFC_WordPad#2"},{"content":"Inheritance Hierarchy","pos":[19463,19484]},{"content":"CObject","pos":[19489,19496]},{"content":"CCmdTarget","pos":[19543,19553]},{"content":"CWnd","pos":[19603,19607]},{"content":"CBasePane","pos":[19651,19660]},{"content":"Requirements","pos":[19710,19722]},{"pos":[19726,19751],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxbasepane.h","source":"**Header:** afxbasepane.h"},{"pos":[19814,19850],"content":"CBasePane::AccNotifyObjectFocusEvent"},{"pos":[19866,19891],"content":"does not use this method."},{"content":"Parameters","pos":[19961,19971]},{"content":"[in]","pos":[19975,19979]},{"content":"Not used.","pos":[19989,19998]},{"pos":[20043,20061],"content":"CBasePane::AddPane"},{"content":"Adds a pane to the docking manager.","pos":[20065,20100]},{"content":"Parameters","pos":[20156,20166]},{"content":"[in]","pos":[20170,20174]},{"content":"A pointer to a pane to add.","pos":[20185,20212]},{"content":"Remarks","pos":[20222,20229]},{"content":"This is a convenience method that adds a pane to a docking manager.","pos":[20233,20300]},{"content":"By using this method, you do not have to write code that analyzes the type of the parent frame.","pos":[20301,20396]},{"pos":[20403,20598],"content":"For more information, see <bpt id=\"p1\">[</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept> and <bpt id=\"p2\">[</bpt>CMDIFrameWndEx::AddPane<ept id=\"p2\">](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__addpane)</ept>.","source":"For more information, see [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) and [CMDIFrameWndEx::AddPane](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__addpane)."},{"pos":[20655,20685],"content":"CBasePane::AdjustDockingLayout"},{"content":"Redirects a call to the docking manager to adjust the docking layout.","pos":[20689,20758]},{"content":"Parameters","pos":[20833,20843]},{"content":"[out]","pos":[20847,20852]},{"content":"A handle to a structure containing multiple window positions.","pos":[20863,20924]},{"content":"Remarks","pos":[20934,20941]},{"content":"This is a convenience method that adjusts the docking layout.","pos":[20945,21006]},{"content":"By using this method, you do not have to write code that analyzes the type of the parent frame.","pos":[21007,21102]},{"pos":[21109,21256],"content":"For more information, see <bpt id=\"p1\">[</bpt>CDockingManager::AdjustDockingLayout<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__adjustdockinglayout)</ept>","source":"For more information, see [CDockingManager::AdjustDockingLayout](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__adjustdockinglayout)"},{"pos":[21306,21329],"content":"CBasePane::AdjustLayout"},{"content":"Called by the framework to adjust the internal layout of a pane.","pos":[21333,21397]},{"content":"Remarks","pos":[21451,21458]},{"content":"The framework calls this method when a pane has to adjust its internal layout.","pos":[21462,21540]},{"content":"The base implementation does nothing.","pos":[21541,21578]},{"pos":[21631,21657],"content":"CBasePane::CalcFixedLayout"},{"content":"Calculates the horizontal size of a control bar.","pos":[21661,21709]},{"content":"Parameters","pos":[21803,21813]},{"content":"[in]","pos":[21817,21821]},{"content":"Indicates whether the bar should be stretched to the size of the frame.","pos":[21836,21907]},{"content":"The <ph id=\"ph1\">`bStretch`</ph> parameter is nonzero when the bar is not a docking bar (not available for docking) and is 0 when it is docked or floating (available for docking).","pos":[21908,22069],"source":" The `bStretch` parameter is nonzero when the bar is not a docking bar (not available for docking) and is 0 when it is docked or floating (available for docking)."},{"content":"[in]","pos":[22076,22080]},{"content":"Indicates that the bar is horizontally or vertically oriented.","pos":[22092,22154]},{"content":"The <ph id=\"ph1\">`bHorz`</ph> parameter is nonzero if the bar is horizontally oriented and is 0 if it is vertically oriented.","pos":[22155,22262],"source":" The `bHorz` parameter is nonzero if the bar is horizontally oriented and is 0 if it is vertically oriented."},{"content":"Return Value","pos":[22272,22284]},{"pos":[22288,22341],"content":"The control bar size, in pixels, of a <ph id=\"ph1\">`CSize`</ph> object.","source":"The control bar size, in pixels, of a `CSize` object."},{"content":"Remarks","pos":[22351,22358]},{"pos":[22362,22490],"content":"See the remarks section in <bpt id=\"p1\">[</bpt>CControlBar::CalcFixedLayout<ept id=\"p1\">](../../mfc/reference/ccontrolbar-class.md#ccontrolbar__calcfixedlayout)</ept>","source":"See the remarks section in [CControlBar::CalcFixedLayout](../../mfc/reference/ccontrolbar-class.md#ccontrolbar__calcfixedlayout)"},{"pos":[22541,22565],"content":"CBasePane::CanAcceptPane"},{"content":"Determines whether another pane can be docked to the pane.","pos":[22569,22627]},{"content":"Parameters","pos":[22712,22722]},{"content":"[in]","pos":[22726,22730]},{"content":"A pointer to the pane to dock.","pos":[22741,22771]},{"content":"Return Value","pos":[22781,22793]},{"pos":[22804,22855],"content":"if another pane can be accepted; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if another pane can be accepted; otherwise `FALSE`."},{"content":"Remarks","pos":[22865,22872]},{"pos":[22876,22973],"content":"The framework calls this method before it docks the pane specified by <ph id=\"ph1\">`pBar`</ph> to the current pane.","source":"The framework calls this method before it docks the pane specified by `pBar` to the current pane."},{"pos":[22980,23122],"content":"Use this method and the <bpt id=\"p1\">[</bpt>CBasePane::CanBeDocked<ept id=\"p1\">](#cbasepane__canbedocked)</ept> method to control how panes dock to other panes in your application.","source":"Use this method and the [CBasePane::CanBeDocked](#cbasepane__canbedocked) method to control how panes dock to other panes in your application."},{"pos":[23129,23172],"content":"The default implementation returns <ph id=\"ph1\">`FALSE`</ph>.","source":"The default implementation returns `FALSE`."},{"pos":[23221,23243],"content":"CBasePane::CanAutoHide"},{"content":"Determines whether the pane supports auto-hide mode.","pos":[23247,23299]},{"content":"Return Value","pos":[23361,23373]},{"pos":[23384,23440],"content":"if this pane supports auto-hide mode; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if this pane supports auto-hide mode; otherwise `FALSE`."},{"content":"Remarks","pos":[23450,23457]},{"content":"The framework calls this function to determine whether the pane supports auto-hide mode.","pos":[23461,23549]},{"pos":[23556,23689],"content":"During construction, you can set this ability by passing the <ph id=\"ph1\">`AFX_CBRS_AUTOHIDE`</ph> flag to <bpt id=\"p1\">[</bpt>CBasePane::CreateEx<ept id=\"p1\">](#cbasepane__createex)</ept>.","source":"During construction, you can set this ability by passing the `AFX_CBRS_AUTOHIDE` flag to [CBasePane::CreateEx](#cbasepane__createex)."},{"content":"The default implementation checks for the <ph id=\"ph1\">`AFX_CBRS_AUTOHIDE`</ph> flag.","pos":[23696,23763],"source":"The default implementation checks for the `AFX_CBRS_AUTOHIDE` flag."},{"content":"Override this method in a derived class to customize this behavior.","pos":[23764,23831]},{"pos":[23882,23906],"content":"CBasePane::CanBeAttached"},{"content":"Determines whether the pane can be docked to another pane or frame window.","pos":[23910,23984]},{"content":"Return Value","pos":[24048,24060]},{"pos":[24071,24148],"content":"if the pane can be docked to another pane or frame window; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane can be docked to another pane or frame window; otherwise `FALSE`."},{"content":"Remarks","pos":[24158,24165]},{"content":"The default implementation returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[24169,24212],"source":"The default implementation returns `FALSE`."},{"content":"Override this method in a derived class to enable or disable the ability to dock without calling <bpt id=\"p1\">[</bpt>CBasePane::EnableDocking<ept id=\"p1\">](#cbasepane__enabledocking)</ept>.","pos":[24213,24364],"source":" Override this method in a derived class to enable or disable the ability to dock without calling [CBasePane::EnableDocking](#cbasepane__enabledocking)."},{"pos":[24413,24435],"content":"CBasePane::CanBeClosed"},{"content":"Determines whether the pane can be closed.","pos":[24439,24481]},{"content":"Return Value","pos":[24543,24555]},{"pos":[24566,24611],"content":"if the pane can be closed; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane can be closed; otherwise `FALSE`."},{"content":"Remarks","pos":[24621,24628]},{"content":"The framework calls this method to determine whether the pane can be closed.","pos":[24632,24708]},{"content":"If the method returns <ph id=\"ph1\">`TRUE`</ph>, a <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button is added to the pane's title bar or, if the pane is floating, to the title bar of the pane's miniframe window.","pos":[24709,24868],"source":" If the method returns `TRUE`, a **Close** button is added to the pane's title bar or, if the pane is floating, to the title bar of the pane's miniframe window."},{"pos":[24875,25005],"content":"During construction, you can set this ability by passing the <ph id=\"ph1\">`AFX_CBRS_CLOSE`</ph> flag to <bpt id=\"p1\">[</bpt>CBasePane::CreateEx<ept id=\"p1\">](#cbasepane__createex)</ept>.","source":"During construction, you can set this ability by passing the `AFX_CBRS_CLOSE` flag to [CBasePane::CreateEx](#cbasepane__createex)."},{"pos":[25012,25076],"content":"The default implementation checks for the <ph id=\"ph1\">`AFX_CBRS_CLOSE`</ph> flag.","source":"The default implementation checks for the `AFX_CBRS_CLOSE` flag."},{"pos":[25125,25147],"content":"CBasePane::CanBeDocked"},{"content":"Determines whether the pane can be docked to another pane.","pos":[25151,25209]},{"content":"Parameters","pos":[25290,25300]},{"content":"[in]","pos":[25304,25308]},{"content":"A pointer to another pane.","pos":[25323,25349]},{"content":"Return Value","pos":[25359,25371]},{"pos":[25382,25444],"content":"if this pane can be docked to another pane; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if this pane can be docked to another pane; otherwise `FALSE`."},{"content":"Remarks","pos":[25454,25461]},{"pos":[25465,25566],"content":"The framework calls this method before it docks the pane specified by <ph id=\"ph1\">`pDockBar`</ph> to the current pane.","source":"The framework calls this method before it docks the pane specified by `pDockBar` to the current pane."},{"pos":[25573,25719],"content":"Use this method and the <bpt id=\"p1\">[</bpt>CBasePane::CanAcceptPane<ept id=\"p1\">](#cbasepane__canacceptpane)</ept> method to control how panes dock to other panes in your application.","source":"Use this method and the [CBasePane::CanAcceptPane](#cbasepane__canacceptpane) method to control how panes dock to other panes in your application."},{"pos":[25726,25769],"content":"The default implementation returns <ph id=\"ph1\">`FALSE`</ph>.","source":"The default implementation returns `FALSE`."},{"pos":[25819,25842],"content":"CBasePane::CanBeResized"},{"content":"Determines whether the pane can be resized.","pos":[25846,25889]},{"content":"Return Value","pos":[25952,25964]},{"pos":[25975,26022],"content":"if the pane can be resized; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane can be resized; otherwise, `FALSE`."},{"content":"Remarks","pos":[26032,26039]},{"content":"This method checks for the <ph id=\"ph1\">`AFX_CBRS_RESIZE`</ph> flag, which is specified by default in <ph id=\"ph2\">`CBasePane::OnCreate`</ph>.","pos":[26043,26149],"source":"This method checks for the `AFX_CBRS_RESIZE` flag, which is specified by default in `CBasePane::OnCreate`."},{"content":"If this flag is not specified, the docking manager flags the pane internally as immovable instead of docking it.","pos":[26150,26262]},{"pos":[26319,26349],"content":"CBasePane::CanBeTabbedDocument"},{"content":"Specifies whether the pane can be converted to an MDI tabbed document.","pos":[26353,26423]},{"content":"Return Value","pos":[26493,26505]},{"content":"if the pane can be converted to a tabbed document; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[26516,26586],"source":" if the pane can be converted to a tabbed document; otherwise, `FALSE`."},{"content":"always returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[26620,26643],"source":" always returns `FALSE`."},{"content":"Remarks","pos":[26653,26660]},{"pos":[26664,26831],"content":"Only objects of certain <ph id=\"ph1\">`CBasePane`</ph>-derived types, such as the <bpt id=\"p1\">[</bpt>CDockablePane Class<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept>, can be converted to tabbed documents.","source":"Only objects of certain `CBasePane`-derived types, such as the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md), can be converted to tabbed documents."},{"pos":[26877,26896],"content":"CBasePane::CanFloat"},{"content":"Determines whether the pane can float.","pos":[26900,26938]},{"content":"Return Value","pos":[26997,27009]},{"pos":[27020,27061],"content":"if the pane can float; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane can float; otherwise `FALSE`."},{"content":"Remarks","pos":[27071,27078]},{"content":"The framework calls this method to determine whether the pane can float.","pos":[27082,27154]},{"pos":[27161,27291],"content":"During construction, you can set this ability by passing the <ph id=\"ph1\">`AFX_CBRS_FLOAT`</ph> flag to <bpt id=\"p1\">[</bpt>CBasePane::CreateEx<ept id=\"p1\">](#cbasepane__createex)</ept>.","source":"During construction, you can set this ability by passing the `AFX_CBRS_FLOAT` flag to [CBasePane::CreateEx](#cbasepane__createex)."},{"pos":[27299,27490],"content":"[!NOTE]\n The framework assumes that non-floating panes are static and that their docking state cannot change. Therefore, the framework does not save the docking state of non-floating panes.","leadings":["","> "],"nodes":[{"content":" The framework assumes that non-floating panes are static and that their docking state cannot change. Therefore, the framework does not save the docking state of non-floating panes.","pos":[8,189],"nodes":[{"content":"The framework assumes that non-floating panes are static and that their docking state cannot change.","pos":[1,101]},{"content":"Therefore, the framework does not save the docking state of non-floating panes.","pos":[102,181]}]}]},{"pos":[27497,27562],"content":"The default implementation checks for the <ph id=\"ph1\">`AFX_CBRS_FLOAT`</ph> style.","source":"The default implementation checks for the `AFX_CBRS_FLOAT` style."},{"pos":[27608,27627],"content":"CBasePane::CanFocus"},{"content":"Specifies whether the pane can receive focus.","pos":[27631,27676]},{"content":"Return Value","pos":[27735,27747]},{"pos":[27758,27807],"content":"if the pane can receive focus; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane can receive focus; otherwise `FALSE`."},{"content":"Remarks","pos":[27817,27824]},{"content":"Override this method in a derived class to control focus.","pos":[27828,27885]},{"content":"For example, because toolbars cannot receive focus, this method returns <ph id=\"ph1\">`FALSE`</ph> when it is called on toolbar objects.","pos":[27886,28003],"source":" For example, because toolbars cannot receive focus, this method returns `FALSE` when it is called on toolbar objects."},{"content":"The framework tries to set the input focus when a pane is docked or floated.","pos":[28010,28086]},{"pos":[28133,28153],"content":"CBasePane::CopyState"},{"content":"Copies the state of a given pane.","pos":[28157,28190]},{"content":"Parameters","pos":[28259,28269]},{"content":"[in]","pos":[28273,28277]},{"content":"A pointer to another pane.","pos":[28291,28317]},{"content":"Remarks","pos":[28327,28334]},{"pos":[28338,28395],"content":"This method copies the state from <ph id=\"ph1\">`pOrgBar`</ph> to this pane.","source":"This method copies the state from `pOrgBar` to this pane."},{"pos":[28455,28488],"content":"CBasePane::CreateDefaultMiniframe"},{"content":"If the pane can float, this method creates a mini-frame window for it.","pos":[28492,28562]},{"content":"Parameters","pos":[28653,28663]},{"content":"[in]","pos":[28667,28671]},{"content":"Specifies the initial coordinates of the mini-frame window.","pos":[28689,28748]},{"content":"Return Value","pos":[28758,28770]},{"pos":[28774,28846],"content":"A pointer to the new mini-frame window or <ph id=\"ph1\">`NULL`</ph> if the creation failed.","source":"A pointer to the new mini-frame window or `NULL` if the creation failed."},{"content":"Remarks","pos":[28856,28863]},{"content":"The framework calls this method when a pane switches to a floating state.","pos":[28867,28940]},{"content":"The method creates a mini-frame window and attaches the pane to this window.","pos":[28941,29017]},{"pos":[29024,29066],"content":"The default implementation returns <ph id=\"ph1\">`NULL`</ph>.","source":"The default implementation returns `NULL`."},{"pos":[29112,29131],"content":"CBasePane::CreateEx"},{"content":"Creates the pane control.","pos":[29135,29160]},{"content":"Parameters","pos":[29444,29454]},{"content":"[in]","pos":[29458,29462]},{"content":"The extended styles (see <bpt id=\"p1\">[</bpt>CWnd::CreateEx<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__createex)</ept> for more information).","pos":[29478,29592],"source":" The extended styles (see [CWnd::CreateEx](../../mfc/reference/cwnd-class.md#cwnd__createex) for more information)."},{"content":"[in]","pos":[29599,29603]},{"content":"The window class name.","pos":[29623,29645]},{"content":"[in]","pos":[29652,29656]},{"content":"The window name.","pos":[29677,29693]},{"content":"[in]","pos":[29700,29704]},{"content":"The window style (see <bpt id=\"p1\">[</bpt>CWnd::CreateEx<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__createex)</ept>).","pos":[29718,29808],"source":" The window style (see [CWnd::CreateEx](../../mfc/reference/cwnd-class.md#cwnd__createex))."},{"content":"[in]","pos":[29815,29819]},{"content":"The initial rectangle.","pos":[29830,29852]},{"content":"[in]","pos":[29859,29863]},{"content":"A pointer to the parent window.","pos":[29880,29911]},{"content":"[in]","pos":[29918,29922]},{"content":"Specifies the pane ID.","pos":[29932,29954]},{"content":"Must be unique.","pos":[29955,29970]},{"content":"[in]","pos":[29977,29981]},{"content":"Style flags for panes.","pos":[30005,30027]},{"content":"[in]","pos":[30034,30038]},{"content":"A pointer to","pos":[30053,30065]},{"content":"Return Value","pos":[30092,30104]},{"pos":[30115,30170],"content":"if the pane is created successfully; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane is created successfully; otherwise `FALSE`."},{"content":"Remarks","pos":[30180,30187]},{"content":"Creates a window of class <ph id=\"ph1\">`lpszClassName`</ph>.","pos":[30191,30233],"source":"Creates a window of class `lpszClassName`."},{"content":"If you specify <ph id=\"ph1\">`WS_CAPTION`</ph>, this method clears the <ph id=\"ph2\">`WS_CAPTION`</ph> style bit and sets <ph id=\"ph3\">`CBasePane::m_bHasCaption`</ph> to <ph id=\"ph4\">`TRUE`</ph>, because the library does not support panes with captions.","pos":[30234,30413],"source":" If you specify `WS_CAPTION`, this method clears the `WS_CAPTION` style bit and sets `CBasePane::m_bHasCaption` to `TRUE`, because the library does not support panes with captions."},{"content":"You can use any combination of child window styles and MFC control bar (CBRS_) styles.","pos":[30420,30506]},{"content":"The library adds several new styles for panes.","pos":[30513,30559]},{"content":"The following table describes the new styles:","pos":[30560,30605]},{"content":"Style","pos":[30612,30617]},{"content":"Description","pos":[30618,30629]},{"content":"The pane can float.","pos":[30685,30704]},{"content":"The pane supports auto-hide mode","pos":[30729,30761]},{"content":"The pane can be resized.","pos":[30784,30808]},{"content":"<bpt id=\"p1\">**</bpt>Important:<ept id=\"p1\">**</ept>  This style is not implemented.","pos":[30809,30855],"source":"**Important:**  This style is not implemented."},{"content":"The pane can be closed.","pos":[30877,30900]},{"content":"The pane can be rolled up when it floats.","pos":[30928,30969]},{"content":"When one pane docks to another pane that has this style, a regular tabbed window is created.","pos":[30998,31090]},{"content":"(For more information, see <bpt id=\"p1\">[</bpt>CTabbedPane Class<ept id=\"p1\">](../../mfc/reference/ctabbedpane-class.md)</ept>.)","pos":[31091,31181],"source":" (For more information, see [CTabbedPane Class](../../mfc/reference/ctabbedpane-class.md).)"},{"content":"When one pane docks to another pane that has this style, an Outlook-style tabbed window is created.","pos":[31210,31309]},{"content":"(For more information, see <bpt id=\"p1\">[</bpt>CMFCOutlookBar Class<ept id=\"p1\">](../../mfc/reference/cmfcoutlookbar-class.md)</ept>.)","pos":[31310,31406],"source":" (For more information, see [CMFCOutlookBar Class](../../mfc/reference/cmfcoutlookbar-class.md).)"},{"pos":[31414,31473],"content":"To use the new styles, specify them in <ph id=\"ph1\">`dwControlBarStyle`</ph>.","source":"To use the new styles, specify them in `dwControlBarStyle`."},{"pos":[31519,31538],"content":"CBasePane::DockPane"},{"content":"Docks a pane to another pane or to a frame window.","pos":[31542,31592]},{"content":"Parameters","pos":[31722,31732]},{"content":"[in]","pos":[31736,31740]},{"content":"A pointer to another pane.","pos":[31755,31781]},{"content":"[in]","pos":[31788,31792]},{"content":"Specifies the destination rectangle.","pos":[31805,31841]},{"content":"[in]","pos":[31848,31852]},{"content":"Specifies the docking method.","pos":[31869,31898]},{"content":"Return Value","pos":[31908,31920]},{"pos":[31931,31994],"content":"if the control bar was docked successfully; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the control bar was docked successfully; otherwise, `FALSE`."},{"content":"Remarks","pos":[32004,32011]},{"pos":[32015,32216],"content":"Call this function to dock a pane to another pane or a dock bar ( <bpt id=\"p1\">[</bpt>CDockSite Class<ept id=\"p1\">](../../mfc/reference/cdocksite-class.md)</ept>) that is specified by <ph id=\"ph1\">`pDockBar`</ph>, or to a main frame if <ph id=\"ph2\">`pDockBar`</ph> is <ph id=\"ph3\">`NULL`</ph>.","source":"Call this function to dock a pane to another pane or a dock bar ( [CDockSite Class](../../mfc/reference/cdocksite-class.md)) that is specified by `pDockBar`, or to a main frame if `pDockBar` is `NULL`."},{"content":"specifies how the pane is docked.","pos":[32236,32269]},{"content":"See <bpt id=\"p1\">[</bpt>CPane::DockPane<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__dockpane)</ept> for a list of possible values.","pos":[32270,32374],"source":" See [CPane::DockPane](../../mfc/reference/cpane-class.md#cpane__dockpane) for a list of possible values."},{"pos":[32429,32457],"content":"CBasePane::DockPaneUsingRTTI"},{"content":"Docks the pane by using run-time type information.","pos":[32461,32511]},{"content":"Parameters","pos":[32579,32589]},{"content":"[in]","pos":[32593,32597]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, dock to the docking site.","pos":[32616,32652],"source":" If `TRUE`, dock to the docking site."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, dock to the parent frame.","pos":[32653,32690],"source":" If `FALSE`, dock to the parent frame."},{"pos":[32745,32773],"content":"CBasePane::DockToFrameWindow"},{"content":"Docks a dockable pane to a frame.","pos":[32777,32810]},{"content":"Parameters","pos":[33060,33070]},{"content":"[in]","pos":[33074,33078]},{"content":"The side of the parent frame that you want to dock the pane to.","pos":[33096,33159]},{"content":"[in]","pos":[33166,33170]},{"content":"The desired size.","pos":[33183,33200]},{"content":"[in]","pos":[33207,33211]},{"content":"Ignored.","pos":[33229,33237]},{"content":"[in]","pos":[33244,33248]},{"content":"Ignored.","pos":[33267,33275]},{"content":"[in]","pos":[33282,33286]},{"content":"Ignored.","pos":[33307,33315]},{"content":"[in]","pos":[33322,33326]},{"content":"If <ph id=\"ph1\">`TRUE`</ph> and there are other dockable panes at the side specified by <ph id=\"ph2\">`dwAlignment`</ph>, the pane is docked outside the other panes, closer to the edge of the parent frame.","pos":[33343,33511],"source":" If `TRUE` and there are other dockable panes at the side specified by `dwAlignment`, the pane is docked outside the other panes, closer to the edge of the parent frame."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, the pane is docked closer to the center of the client area.","pos":[33512,33583],"source":" If `FALSE`, the pane is docked closer to the center of the client area."},{"content":"Return Value","pos":[33593,33605]},{"pos":[33616,33664],"content":"if the method was successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the method was successful; otherwise `FALSE`."},{"content":"Remarks","pos":[33674,33681]},{"content":"This method fails if a pane divider ( <bpt id=\"p1\">[</bpt>CPaneDivider Class<ept id=\"p1\">](../../mfc/reference/cpanedivider-class.md)</ept>) cannot be created.","pos":[33685,33806],"source":"This method fails if a pane divider ( [CPaneDivider Class](../../mfc/reference/cpanedivider-class.md)) cannot be created."},{"content":"Otherwise, it always returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[33807,33843],"source":" Otherwise, it always returns `TRUE`."},{"pos":[33905,33940],"content":"CBasePane::DoesAllowDynInsertBefore"},{"content":"Determines whether another pane can be dynamically inserted between this pane and the parent frame.","pos":[33944,34043]},{"content":"Return Value","pos":[34118,34130]},{"pos":[34141,34194],"content":"if a user can insert another pane; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if a user can insert another pane; otherwise `FALSE`."},{"content":"Remarks","pos":[34204,34211]},{"content":"The framework calls this method to determine whether a user can dynamically insert a pane before this pane.","pos":[34215,34322]},{"content":"For example, suppose your application creates a pane docked at the left side of the frame (such as the Outlook bar).","pos":[34329,34445]},{"content":"To prevent the user from docking another pane to the left of the first pane, override this method and return <ph id=\"ph1\">`FALSE`</ph>.","pos":[34446,34563],"source":" To prevent the user from docking another pane to the left of the first pane, override this method and return `FALSE`."},{"pos":[34570,34734],"content":"We recommend that you override this method and return <ph id=\"ph1\">`FALSE`</ph> for non-floating panes derived from <bpt id=\"p1\">[</bpt>CDockablePane Class<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept>.","source":"We recommend that you override this method and return `FALSE` for non-floating panes derived from [CDockablePane Class](../../mfc/reference/cdockablepane-class.md)."},{"pos":[34741,34783],"content":"The default implementation returns <ph id=\"ph1\">`TRUE`</ph>.","source":"The default implementation returns `TRUE`."},{"pos":[34828,34846],"content":"CBasePane::DoPaint"},{"content":"Fills the background of the pane.","pos":[34850,34883]},{"content":"Parameters","pos":[34940,34950]},{"content":"[in]","pos":[34954,34958]},{"content":"A pointer to a device context.","pos":[34968,34998]},{"content":"Remarks","pos":[35008,35015]},{"pos":[35019,35233],"content":"The default implementation calls the current visual manager to fill the background ( <bpt id=\"p1\">[</bpt>CMFCVisualManager::OnFillBarBackground<ept id=\"p1\">](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__onfillbarbackground)</ept>).","source":"The default implementation calls the current visual manager to fill the background ( [CMFCVisualManager::OnFillBarBackground](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__onfillbarbackground))."},{"pos":[35284,35308],"content":"CBasePane::EnableDocking"},{"content":"Enables docking of the pane to the main frame.","pos":[35312,35358]},{"content":"Parameters","pos":[35430,35440]},{"content":"[in]","pos":[35444,35448]},{"content":"Specifies the docking alignment to enable.","pos":[35466,35508]},{"content":"Remarks","pos":[35518,35525]},{"content":"Call this method to enable docking alignment to the main frame.","pos":[35529,35592]},{"content":"You can pass a combination of <ph id=\"ph1\">`CBRS_ALIGN_`</ph> flags (for more information, see <bpt id=\"p1\">[</bpt>CControlBar::EnableDocking<ept id=\"p1\">](../../mfc/reference/ccontrolbar-class.md#ccontrolbar__enabledocking)</ept>).","pos":[35593,35769],"source":" You can pass a combination of `CBRS_ALIGN_` flags (for more information, see [CControlBar::EnableDocking](../../mfc/reference/ccontrolbar-class.md#ccontrolbar__enabledocking))."},{"pos":[35792,35906],"content":"sets the internal flag <ph id=\"ph1\">`CBasePane::m_dwEnabledAlignment`</ph> and the framework checks this flag when a pane is docked.","source":" sets the internal flag `CBasePane::m_dwEnabledAlignment` and the framework checks this flag when a pane is docked."},{"pos":[35913,36030],"content":"Call <bpt id=\"p1\">[</bpt>CBasePane::GetEnabledAlignment<ept id=\"p1\">](#cbasepane__getenabledalignment)</ept> to determine the docking alignment for a pane.","source":"Call [CBasePane::GetEnabledAlignment](#cbasepane__getenabledalignment) to determine the docking alignment for a pane."},{"pos":[36081,36105],"content":"CBasePane::EnableGripper"},{"content":"Enables or disables the gripper.","pos":[36109,36141]},{"content":"If the gripper is enabled, the user can drag it to reposition the pane.","pos":[36142,36213]},{"content":"Parameters","pos":[36280,36290]},{"content":"[in]","pos":[36294,36298]},{"content":"to enable the gripper; <ph id=\"ph1\">`FALSE`</ph> to disable it.","pos":[36319,36364],"source":" to enable the gripper; `FALSE` to disable it."},{"content":"Remarks","pos":[36374,36381]},{"pos":[36385,36476],"content":"The framework uses this method to enable a gripper instead of using the <ph id=\"ph1\">`WS_CAPTION`</ph> style.","source":"The framework uses this method to enable a gripper instead of using the `WS_CAPTION` style."},{"pos":[36523,36543],"content":"CBasePane::FloatPane"},{"content":"Floats the pane.","pos":[36547,36563]},{"content":"Parameters","pos":[36702,36712]},{"content":"[in]","pos":[36716,36720]},{"content":"Specifies the screen coordinates where the floating pane appears.","pos":[36736,36801]},{"content":"[in]","pos":[36808,36812]},{"content":"Specifies the dock method to use to float the pane.","pos":[36829,36880]},{"content":"[in]","pos":[36887,36891]},{"content":"Specifies whether the floating pane is visible ( <ph id=\"ph1\">`TRUE`</ph>) or hidden ( <ph id=\"ph2\">`FALSE`</ph>).","pos":[36903,36981],"source":" Specifies whether the floating pane is visible ( `TRUE`) or hidden ( `FALSE`)."},{"content":"Return Value","pos":[36991,37003]},{"pos":[37014,37070],"content":"if the pane was floated successfully; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane was floated successfully; otherwise `FALSE`."},{"content":"Remarks","pos":[37080,37087]},{"pos":[37091,37172],"content":"Call this method to float a pane at the screen position specified by <ph id=\"ph1\">`rectFloat`</ph>.","source":"Call this method to float a pane at the screen position specified by `rectFloat`."},{"pos":[37226,37253],"content":"CBasePane::get_accHelpTopic"},{"pos":[37257,37439],"content":"The framework calls this method to retrieve the full path of the <ph id=\"ph1\">`WinHelp`</ph> file that is associated with the specified object and the identifier of the appropriate topic in that file.","source":"The framework calls this method to retrieve the full path of the `WinHelp` file that is associated with the specified object and the identifier of the appropriate topic in that file."},{"content":"Parameters","pos":[37568,37578]},{"content":"[in]","pos":[37582,37586]},{"content":"Address of a <ph id=\"ph1\">`BSTR`</ph> that receives the full path of the <ph id=\"ph2\">`WinHelp`</ph> file that is associated with the specified object, if any.","pos":[37604,37727],"source":" Address of a `BSTR` that receives the full path of the `WinHelp` file that is associated with the specified object, if any."},{"content":"[in]","pos":[37734,37738]},{"content":"Specifies whether the Help topic to be retrieved is that of the object or one of the child elements of the object.","pos":[37753,37867]},{"content":"This parameter can be either <ph id=\"ph1\">`CHILDID_SELF`</ph> (to obtain a Help topic for the object) or a child ID (to obtain a Help topic for one of the child elements of the object).","pos":[37868,38035],"source":" This parameter can be either `CHILDID_SELF` (to obtain a Help topic for the object) or a child ID (to obtain a Help topic for one of the child elements of the object)."},{"content":"[in]","pos":[38042,38046]},{"content":"Identifies the <ph id=\"ph1\">`Help`</ph> file topic that is associated with the specified object.","pos":[38061,38139],"source":" Identifies the `Help` file topic that is associated with the specified object."},{"content":"Return Value","pos":[38149,38161]},{"content":"does not implement this method.","pos":[38177,38208]},{"content":"Therefore, <ph id=\"ph1\">`CBasePane::get_accHelpTopic`</ph> always returns <ph id=\"ph2\">`S_FALSE`</ph>.","pos":[38209,38275],"source":" Therefore, `CBasePane::get_accHelpTopic` always returns `S_FALSE`."},{"content":"Remarks","pos":[38285,38292]},{"content":"This function is part of the Active Accessibility support in MFC.","pos":[38296,38361]},{"content":"Override this function in a derived class to provide help information about your object.","pos":[38362,38450]},{"pos":[38504,38531],"content":"CBasePane::get_accSelection"},{"content":"The framework calls this method to retrieve the selected children of this object.","pos":[38535,38616]},{"content":"Parameters","pos":[38698,38708]},{"content":"[in]","pos":[38712,38716]},{"content":"Receives information that identifies the selected children.","pos":[38735,38794]},{"content":"Return Value","pos":[38804,38816]},{"content":"does not implement this method.","pos":[38832,38863]},{"content":"If <ph id=\"ph1\">`pvarChildren`</ph> is <ph id=\"ph2\">`NULL`</ph>, this method returns <ph id=\"ph3\">`E_INVALIDARG`</ph>.","pos":[38864,38928],"source":" If `pvarChildren` is `NULL`, this method returns `E_INVALIDARG`."},{"content":"Otherwise, this method returns <ph id=\"ph1\">`DISP_E_MEMBERNOTFOUND`</ph>.","pos":[38929,38984],"source":" Otherwise, this method returns `DISP_E_MEMBERNOTFOUND`."},{"content":"Remarks","pos":[38994,39001]},{"content":"This function is part of the Active Accessibility support in MFC.","pos":[39005,39070]},{"content":"Override this function in a derived class if you have non-windowed user interface elements other than windowless ActiveX controls.","pos":[39071,39201]},{"pos":[39255,39282],"content":"CBasePane::GetCaptionHeight"},{"content":"Returns the caption height.","pos":[39286,39313]},{"content":"Return Value","pos":[39379,39391]},{"content":"The caption height.","pos":[39395,39414]},{"pos":[39470,39499],"content":"CBasePane::GetControlBarStyle"},{"content":"Returns the control bar style.","pos":[39503,39533]},{"content":"Return Value","pos":[39600,39612]},{"content":"A bitwise-OR combination of AFX_CBRS_ flags.","pos":[39616,39660]},{"content":"Remarks","pos":[39670,39677]},{"content":"The return value is a combination of the following possible values.","pos":[39681,39748]},{"content":"Style","pos":[39755,39760]},{"content":"Description","pos":[39761,39772]},{"content":"Makes the control bar float.","pos":[39828,39856]},{"content":"Enables auto-hide mode.","pos":[39881,39904]},{"content":"Enables resizing of the control bar.","pos":[39927,39963]},{"content":"When this flag is set, the control bar can be placed in a dockable pane.","pos":[39964,40036]},{"content":"Enables hiding of the control bar.","pos":[40058,40092]},{"pos":[40150,40180],"content":"CBasePane::GetCurrentAlignment"},{"content":"Returns the current pane alignment.","pos":[40184,40219]},{"content":"Return Value","pos":[40290,40302]},{"content":"The current alignment of the control bar.","pos":[40306,40347]},{"content":"The following table shows the possible values:","pos":[40348,40394]},{"content":"Value","pos":[40401,40406]},{"content":"Alignment","pos":[40407,40416]},{"content":"Left alignment.","pos":[40471,40486]},{"content":"Right alignment.","pos":[40510,40526]},{"content":"Top alignment.","pos":[40548,40562]},{"content":"Bottom alignment.","pos":[40587,40604]},{"pos":[40657,40682],"content":"CBasePane::GetDockingMode"},{"content":"Returns the current docking mode for the pane.","pos":[40686,40732]},{"content":"Return Value","pos":[40806,40818]},{"content":"DT_STANDARD if dragging the pane is indicated on the screen by a drag rectangle.","pos":[40822,40902]},{"content":"DT_IMMEDIATE if the contents of the pane are dragged.","pos":[40903,40956]},{"content":"Remarks","pos":[40966,40973]},{"content":"The framework calls this method to determine the current docking mode of the pane.","pos":[40977,41059]},{"pos":[41066,41221],"content":"If <ph id=\"ph1\">`CBasePane::m_dockMode`</ph> is undefined (DT_UNDEFINED), then the docking mode is taken from the global docking mode ( <ph id=\"ph2\">`AFX_GLOBAL_DATA::m_dockModeGlobal`</ph>).","source":"If `CBasePane::m_dockMode` is undefined (DT_UNDEFINED), then the docking mode is taken from the global docking mode ( `AFX_GLOBAL_DATA::m_dockModeGlobal`)."},{"pos":[41228,41330],"content":"By setting <ph id=\"ph1\">`m_dockMode`</ph> or overriding <ph id=\"ph2\">`GetDockingMode`</ph> you can control the docking mode for each pane.","source":"By setting `m_dockMode` or overriding `GetDockingMode` you can control the docking mode for each pane."},{"pos":[41387,41417],"content":"CBasePane::GetDockSiteFrameWnd"},{"pos":[41421,41543],"content":"Returns a pointer to the <bpt id=\"p1\">[</bpt>CDockingPanesRow<ept id=\"p1\">](../../mfc/reference/cdockingpanesrow-class.md)</ept>object where the pane is docked.","source":"Returns a pointer to the [CDockingPanesRow](../../mfc/reference/cdockingpanesrow-class.md)object where the pane is docked."},{"content":"Return Value","pos":[41614,41626]},{"content":"A pointer to the dock site of the pane.","pos":[41630,41669]},{"content":"Remarks","pos":[41679,41686]},{"content":"Call this method to retrieve a pointer to the dock site of the pane.","pos":[41690,41758]},{"content":"The dock site can be either a main frame window if the pane is docked to the main frame, or a mini-frame window if the pane is floating.","pos":[41759,41895]},{"pos":[41952,41982],"content":"CBasePane::GetEnabledAlignment"},{"content":"Returns the CBRS_ALIGN_ styles that are applied to the pane.","pos":[41986,42046]},{"content":"Return Value","pos":[42117,42129]},{"content":"A combination of CBRS_ALIGN_ styles.","pos":[42133,42169]},{"content":"The following table shows the possible styles:","pos":[42170,42216]},{"content":"Flag","pos":[42223,42227]},{"content":"Enabled alignment","pos":[42228,42245]},{"content":"Left.","pos":[42307,42312]},{"content":"Right.","pos":[42336,42342]},{"content":"Top.","pos":[42364,42368]},{"content":"Bottom.","pos":[42393,42400]},{"content":"Combination of all flags.","pos":[42422,42447]},{"content":"Remarks","pos":[42458,42465]},{"content":"Call this method to determine the enabled alignment for the pane.","pos":[42469,42534]},{"content":"Enabled alignment means the sides of the main frame window that a pane can be docked to.","pos":[42535,42623]},{"pos":[42630,42718],"content":"Enable docking alignment by using <bpt id=\"p1\">[</bpt>CBasePane::EnableDocking<ept id=\"p1\">](#cbasepane__enabledocking)</ept>.","source":"Enable docking alignment by using [CBasePane::EnableDocking](#cbasepane__enabledocking)."},{"pos":[42767,42789],"content":"CBasePane::GetMFCStyle"},{"content":"Returns the pane styles that are specific to MFC.","pos":[42793,42842]},{"content":"Return Value","pos":[42905,42917]},{"content":"A combination of library-specific (AFX_CBRS_) pane styles.","pos":[42921,42979]},{"pos":[43028,43050],"content":"CBasePane::GetPaneIcon"},{"content":"Returns a handle to the pane icon.","pos":[43054,43088]},{"content":"Parameters","pos":[43155,43165]},{"content":"[in]","pos":[43169,43173]},{"content":"Specifies a 32 pixel by 32 pixel icon if <ph id=\"ph1\">`TRUE`</ph>; specifies a 16 pixel by 16 pixel icon if <ph id=\"ph2\">`FALSE`</ph>.","pos":[43188,43286],"source":" Specifies a 32 pixel by 32 pixel icon if `TRUE`; specifies a 16 pixel by 16 pixel icon if `FALSE`."},{"content":"Return Value","pos":[43296,43308]},{"content":"A handle to the pane icon.","pos":[43312,43338]},{"content":"If unsuccessful, returns <ph id=\"ph1\">`NULL`</ph>.","pos":[43339,43371],"source":" If unsuccessful, returns `NULL`."},{"content":"Remarks","pos":[43381,43388]},{"pos":[43392,43490],"content":"The default implementation calls <bpt id=\"p1\">[</bpt>CWnd::GetIcon<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__geticon)</ept>.","source":"The default implementation calls [CWnd::GetIcon](../../mfc/reference/cwnd-class.md#cwnd__geticon)."},{"pos":[43538,43559],"content":"CBasePane::GetPaneRow"},{"pos":[43563,43685],"content":"Returns a pointer to the <bpt id=\"p1\">[</bpt>CDockingPanesRow<ept id=\"p1\">](../../mfc/reference/cdockingpanesrow-class.md)</ept>object where the pane is docked.","source":"Returns a pointer to the [CDockingPanesRow](../../mfc/reference/cdockingpanesrow-class.md)object where the pane is docked."},{"content":"Return Value","pos":[43742,43754]},{"pos":[43758,43841],"content":"A pointer to <ph id=\"ph1\">`CDockingPanesRow`</ph> if the pane is docked, or <ph id=\"ph2\">`NULL`</ph> if it is floating.","source":"A pointer to `CDockingPanesRow` if the pane is docked, or `NULL` if it is floating."},{"content":"Remarks","pos":[43851,43858]},{"content":"Call this method to access the row where a pane is docked.","pos":[43862,43920]},{"content":"For example, to arrange the panes in a particular row, call <ph id=\"ph1\">`GetPaneRow`</ph> and then call <bpt id=\"p1\">[</bpt>CDockingPanesRow::ArrangePanes<ept id=\"p1\">](../../mfc/reference/cdockingpanesrow-class.md#cdockingpanesrow__arrangepanes)</ept>.","pos":[43921,44119],"source":" For example, to arrange the panes in a particular row, call `GetPaneRow` and then call [CDockingPanesRow::ArrangePanes](../../mfc/reference/cdockingpanesrow-class.md#cdockingpanesrow__arrangepanes)."},{"pos":[44169,44192],"content":"CBasePane::GetPaneStyle"},{"content":"Returns the pane style.","pos":[44196,44219]},{"content":"Return Value","pos":[44283,44295]},{"pos":[44299,44456],"content":"A combination of control bar styles (including CBRS_ styles) that was set by the <bpt id=\"p1\">[</bpt>CBasePane::SetPaneStyle<ept id=\"p1\">](#cbasepane__setpanestyle)</ept> method at creation time.","source":"A combination of control bar styles (including CBRS_ styles) that was set by the [CBasePane::SetPaneStyle](#cbasepane__setpanestyle) method at creation time."},{"pos":[44511,44539],"content":"CBasePane::GetParentDockSite"},{"content":"Returns a pointer to the parent dock site.","pos":[44543,44585]},{"content":"Return Value","pos":[44659,44671]},{"content":"The parent dock site.","pos":[44675,44696]},{"pos":[44752,44781],"content":"CBasePane::GetParentMiniFrame"},{"content":"Returns a pointer to the parent mini-frame window.","pos":[44785,44835]},{"content":"Parameters","pos":[44934,44944]},{"content":"[in]","pos":[44948,44952]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, this method does not check for non-valid pointers.","pos":[44968,45029],"source":" If `TRUE`, this method does not check for non-valid pointers."},{"content":"If you call this method when your application exits, set this parameter to <ph id=\"ph1\">`TRUE`</ph>.","pos":[45030,45112],"source":" If you call this method when your application exits, set this parameter to `TRUE`."},{"content":"Return Value","pos":[45122,45134]},{"pos":[45138,45228],"content":"A valid pointer to the parent mini-frame window if the pane is floating; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A valid pointer to the parent mini-frame window if the pane is floating; otherwise `NULL`."},{"content":"Remarks","pos":[45238,45245]},{"content":"Call this function to retrieve a pointer to the parent mini-frame window.","pos":[45249,45322]},{"content":"This method iterates through all parents and checks for an object derived from <bpt id=\"p1\">[</bpt>CPaneFrameWnd Class<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept>.","pos":[45323,45468],"source":" This method iterates through all parents and checks for an object derived from [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md)."},{"pos":[45475,45542],"content":"Use <ph id=\"ph1\">`GetParentMiniFrame`</ph> to determine whether the pane is floating.","source":"Use `GetParentMiniFrame` to determine whether the pane is floating."},{"pos":[45599,45629],"content":"CBasePane::GetParentTabbedPane"},{"content":"Returns a pointer to the parent tabbed pane.","pos":[45633,45677]},{"content":"Return Value","pos":[45751,45763]},{"pos":[45767,45834],"content":"A pointer to the parent tabbed pane if it exists; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the parent tabbed pane if it exists; otherwise `NULL`."},{"pos":[45887,45913],"content":"CBasePane::GetParentTabWnd"},{"content":"Returns a pointer to the parent window that is inside a tab.","pos":[45917,45977]},{"content":"Parameters","pos":[46060,46070]},{"content":"[out]","pos":[46074,46079]},{"content":"If the return value is not <ph id=\"ph1\">`NULL`</ph>, this parameter contains the handle to the parent tabbed window.","pos":[46093,46191],"source":" If the return value is not `NULL`, this parameter contains the handle to the parent tabbed window."},{"content":"Return Value","pos":[46201,46213]},{"pos":[46217,46271],"content":"A valid pointer to the parent tabbed window or <ph id=\"ph1\">`NULL`</ph>.","source":"A valid pointer to the parent tabbed window or `NULL`."},{"content":"Remarks","pos":[46281,46288]},{"content":"Use this function to retrieve a pointer to the parent tabbed window.","pos":[46292,46360]},{"content":"Sometimes it is not enough to call <ph id=\"ph1\">`GetParent`</ph>, because a pane may be inside a docking wrapper ( <bpt id=\"p1\">[</bpt>CDockablePaneAdapter Class<ept id=\"p1\">](../../mfc/reference/cdockablepaneadapter-class.md)</ept>) or inside a pane adapter ( <bpt id=\"p2\">[</bpt>CDockablePaneAdapter Class<ept id=\"p2\">](../../mfc/reference/cdockablepaneadapter-class.md)</ept>).","pos":[46361,46647],"source":" Sometimes it is not enough to call `GetParent`, because a pane may be inside a docking wrapper ( [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md)) or inside a pane adapter ( [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md))."},{"content":"By using <ph id=\"ph1\">`GetParentTabWnd`</ph> you will be able to retrieve a valid pointer in those cases (assuming that the parent is a tabbed window).","pos":[46648,46781],"source":" By using `GetParentTabWnd` you will be able to retrieve a valid pointer in those cases (assuming that the parent is a tabbed window)."},{"pos":[46840,46872],"content":"CBasePane::GetRecentVisibleState"},{"content":"The framework calls this method when a pane is restored from an archive.","pos":[46876,46948]},{"content":"Return Value","pos":[47020,47032]},{"content":"A <ph id=\"ph1\">`BOOL`</ph> that specifies the recent visible state.","pos":[47036,47085],"source":"A `BOOL` that specifies the recent visible state."},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the pane was visible when serialized and should be visible when restored.","pos":[47086,47170],"source":" If `TRUE`, the pane was visible when serialized and should be visible when restored."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, the pane was hidden when serialized and should be hidden when restored.","pos":[47171,47254],"source":" If `FALSE`, the pane was hidden when serialized and should be hidden when restored."},{"pos":[47314,47347],"content":"CBasePane::HideInPrintPreviewMode"},{"content":"Specifies whether the pane is hidden in print preview.","pos":[47351,47405]},{"content":"Return Value","pos":[47478,47490]},{"pos":[47501,47563],"content":"if the pane is not shown in print preview; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane is not shown in print preview; otherwise, `FALSE`."},{"content":"Remarks","pos":[47573,47580]},{"content":"Base panes are not shown in print preview.","pos":[47584,47626]},{"content":"Therefore, this method always returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[47627,47672],"source":" Therefore, this method always returns `TRUE`."},{"pos":[47720,47741],"content":"CBasePane::InsertPane"},{"content":"Registers the specified pane with the docking manager.","pos":[47745,47799]},{"content":"Parameters","pos":[47922,47932]},{"content":"[in]","pos":[47936,47940]},{"content":"A pointer to the pane to insert.","pos":[47958,47990]},{"content":"[in]","pos":[47997,48001]},{"content":"A pointer to the adjacent pane.","pos":[48015,48046]},{"content":"[in]","pos":[48053,48057]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, <ph id=\"ph2\">`pControlBar`</ph> is inserted after <ph id=\"ph3\">`pTarget`</ph>.","pos":[48070,48123],"source":" If `TRUE`, `pControlBar` is inserted after `pTarget`."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, <ph id=\"ph2\">`pControlBar`</ph> is inserted before <ph id=\"ph3\">`pTarget`</ph>.","pos":[48124,48179],"source":" If `FALSE`, `pControlBar` is inserted before `pTarget`."},{"content":"Return Value","pos":[48189,48201]},{"pos":[48212,48254],"content":"if the method succeeds, <ph id=\"ph1\">`FALSE`</ph> otherwise.","source":" if the method succeeds, `FALSE` otherwise."},{"pos":[48317,48353],"content":"CBasePane::IsAccessibilityCompatible"},{"content":"Specifies whether the pane supports Active Accessibility.","pos":[48357,48414]},{"content":"Return Value","pos":[48481,48493]},{"pos":[48504,48566],"content":"if the pane supports Active Accessibility; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane supports Active Accessibility; otherwise, `FALSE`."},{"pos":[48618,48643],"content":"CBasePane::IsAutoHideMode"},{"content":"Determines whether a pane is in auto-hide mode.","pos":[48647,48694]},{"content":"Return Value","pos":[48759,48771]},{"pos":[48782,48835],"content":"if the pane is in auto-hide mode; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane is in auto-hide mode; otherwise, `FALSE`."},{"content":"Remarks","pos":[48845,48852]},{"content":"Base panes cannot auto-hide.","pos":[48856,48884]},{"content":"This method always returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[48885,48920],"source":" This method always returns `FALSE`."},{"pos":[48973,48999],"content":"CBasePane::IsDialogControl"},{"content":"Specifies whether the pane is a dialog box control.","pos":[49003,49054]},{"content":"Return Value","pos":[49112,49124]},{"pos":[49135,49191],"content":"if the pane is a dialog box control; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane is a dialog box control; otherwise, `FALSE`."},{"content":"Remarks","pos":[49201,49208]},{"content":"The framework uses this method to ensure layout consistency for all panes.","pos":[49212,49286]},{"pos":[49332,49351],"content":"CBasePane::IsDocked"},{"content":"Determines whether the pane is docked.","pos":[49355,49393]},{"content":"Return Value","pos":[49452,49464]},{"pos":[49475,49602],"content":"if the parent of the pane is not a mini-frame or if the pane is floating in a mini-frame with another pane; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the parent of the pane is not a mini-frame or if the pane is floating in a mini-frame with another pane; otherwise, `FALSE`."},{"pos":[49650,49671],"content":"CBasePane::IsFloating"},{"content":"Determines whether the pane is floating.","pos":[49675,49715]},{"content":"Return Value","pos":[49776,49788]},{"pos":[49799,49843],"content":"if the pane is floating; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane is floating; otherwise, `FALSE`."},{"content":"Remarks","pos":[49853,49860]},{"pos":[49864,49950],"content":"This method returns the opposite value of <bpt id=\"p1\">[</bpt>CBasePane::IsDocked<ept id=\"p1\">](#cbasepane__isdocked)</ept>.","source":"This method returns the opposite value of [CBasePane::IsDocked](#cbasepane__isdocked)."},{"pos":[50000,50023],"content":"CBasePane::IsHorizontal"},{"content":"Determines whether the pane is docked horizontally.","pos":[50027,50078]},{"content":"Return Value","pos":[50141,50153]},{"pos":[50164,50218],"content":"if the pane is docked horizontally; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane is docked horizontally; otherwise `FALSE`."},{"content":"Remarks","pos":[50228,50235]},{"pos":[50239,50326],"content":"The default implementation checks the current docking alignment for <ph id=\"ph1\">`CBRS_ORIENT_HORZ`</ph>.","source":"The default implementation checks the current docking alignment for `CBRS_ORIENT_HORZ`."},{"pos":[50393,50433],"content":"CBasePane::IsInFloatingMultiPaneFrameWnd"},{"pos":[50437,50575],"content":"Specifies whether the pane is in a multi-pane frame window ( <bpt id=\"p1\">[</bpt>CMultiPaneFrameWnd Class<ept id=\"p1\">](../../mfc/reference/cmultipaneframewnd-class.md)</ept>).","source":"Specifies whether the pane is in a multi-pane frame window ( [CMultiPaneFrameWnd Class](../../mfc/reference/cmultipaneframewnd-class.md))."},{"content":"Return Value","pos":[50655,50667]},{"pos":[50678,50742],"content":"if the pane is in a multi-pane frame window; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane is in a multi-pane frame window; otherwise, `FALSE`."},{"content":"Remarks","pos":[50752,50759]},{"content":"Only dockable panes can float in a multi-pane frame window.","pos":[50763,50822]},{"content":"Therefore, <ph id=\"ph1\">`CBasePane::IsInFloatingMultiPaneFrameWnd`</ph> always returns <ph id=\"ph2\">`FALSE`</ph>.","pos":[50823,50900],"source":" Therefore, `CBasePane::IsInFloatingMultiPaneFrameWnd` always returns `FALSE`."},{"pos":[50949,50971],"content":"CBasePane::IsMDITabbed"},{"content":"Determines whether the pane has been added to an MDI child window as a tabbed document.","pos":[50975,51062]},{"content":"Return Value","pos":[51124,51136]},{"pos":[51147,51233],"content":"if the pane was added to an MDI child window as a tabbed document; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane was added to an MDI child window as a tabbed document; otherwise, `FALSE`."},{"pos":[51284,51308],"content":"CBasePane::IsPaneVisible"},{"pos":[51312,51372],"content":"Specifies whether the <ph id=\"ph1\">`WS_VISIBLE`</ph> flag is set for the pane.","source":"Specifies whether the `WS_VISIBLE` flag is set for the pane."},{"content":"Return Value","pos":[51428,51440]},{"pos":[51451,51494],"content":"if <ph id=\"ph1\">`WS_VISIBLE`</ph> is set; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":" if `WS_VISIBLE` is set; otherwise, `FALSE`."},{"content":"Remarks","pos":[51504,51511]},{"pos":[51515,51594],"content":"Use <bpt id=\"p1\">[</bpt>CBasePane::IsVisible<ept id=\"p1\">](#cbasepane__isvisible)</ept> to determine pane visibility.","source":"Use [CBasePane::IsVisible](#cbasepane__isvisible) to determine pane visibility."},{"pos":[51651,51681],"content":"CBasePane::IsPointNearDockSite"},{"content":"Determines whether a specified point is near the dock site.","pos":[51685,51744]},{"content":"Parameters","pos":[51876,51886]},{"content":"[in]","pos":[51890,51894]},{"content":"The specified point.","pos":[51906,51926]},{"content":"[out]","pos":[51933,51938]},{"content":"Specifies which edge the point is near.","pos":[51959,51998]},{"content":"Possible values are <ph id=\"ph1\">`CBRS_ALIGN_LEFT`</ph>, <ph id=\"ph2\">`CBRS_ALIGN_RIGHT`</ph>, <ph id=\"ph3\">`CBRS_ALIGN_TOP`</ph>, and","pos":[51999,52079],"source":" Possible values are `CBRS_ALIGN_LEFT`, `CBRS_ALIGN_RIGHT`, `CBRS_ALIGN_TOP`, and "},{"content":"[out]","pos":[52106,52111]},{"content":"if the point is near the outer border of the dock site; <ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[52135,52209],"source":" if the point is near the outer border of the dock site; `FALSE` otherwise."},{"content":"Return Value","pos":[52219,52231]},{"pos":[52242,52296],"content":"if the point is near the dock site; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the point is near the dock site; otherwise `FALSE`."},{"content":"Remarks","pos":[52306,52313]},{"content":"The point is near the dock site when it is within the sensitivity set in the docking manager.","pos":[52317,52410]},{"content":"The default sensitivity is 15 pixels.","pos":[52411,52448]},{"pos":[52497,52519],"content":"CBasePane::IsResizable"},{"content":"Determines whether the pane can be resized.","pos":[52523,52566]},{"content":"Return Value","pos":[52628,52640]},{"pos":[52651,52710],"content":"if the pane can be resized by the user; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane can be resized by the user; otherwise, `FALSE`."},{"content":"Remarks","pos":[52720,52727]},{"pos":[52731,52821],"content":"Panes of <bpt id=\"p1\">[</bpt>CDockablePane Class<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept> can be resized.","source":"Panes of [CDockablePane Class](../../mfc/reference/cdockablepane-class.md) can be resized."},{"pos":[52828,53008],"content":"The status bar ( <bpt id=\"p1\">[</bpt>CMFCStatusBar Class<ept id=\"p1\">](../../mfc/reference/cmfcstatusbar-class.md)</ept>) and the dock bar ( <bpt id=\"p2\">[</bpt>CDockSite Class<ept id=\"p2\">](../../mfc/reference/cdocksite-class.md)</ept>) cannot be resized.","source":"The status bar ( [CMFCStatusBar Class](../../mfc/reference/cmfcstatusbar-class.md)) and the dock bar ( [CDockSite Class](../../mfc/reference/cdocksite-class.md)) cannot be resized."},{"pos":[53068,53101],"content":"CBasePane::IsRestoredFromRegistry"},{"content":"Determines whether the pane is restored from the registry.","pos":[53105,53163]},{"content":"Return Value","pos":[53236,53248]},{"pos":[53259,53321],"content":"if the pane is restored from the registry; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane is restored from the registry; otherwise, `FALSE`."},{"pos":[53367,53386],"content":"CBasePane::IsTabbed"},{"content":"Determines whether the pane has been inserted in the tab control of a tabbed window.","pos":[53390,53474]},{"content":"Return Value","pos":[53533,53545]},{"pos":[53556,53634],"content":"if the control bar is inserted in a tab of a tabbed window; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the control bar is inserted in a tab of a tabbed window; otherwise `FALSE`."},{"content":"Remarks","pos":[53644,53651]},{"pos":[53655,53829],"content":"This method retrieves a pointer to the immediate parent and determines if the parent's runtime class is <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>.","source":"This method retrieves a pointer to the immediate parent and determines if the parent's runtime class is [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md)."},{"pos":[53876,53896],"content":"CBasePane::IsVisible"},{"content":"Determines whether the pane is visible.","pos":[53900,53939]},{"content":"Return Value","pos":[53999,54011]},{"pos":[54022,54064],"content":"if the pane is visible; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane is visible; otherwise `FALSE`."},{"content":"Remarks","pos":[54074,54081]},{"content":"Use this method to determine the visibility of a pane.","pos":[54085,54139]},{"content":"Do not use <ph id=\"ph1\">`::IsWindowVisible`</ph>.","pos":[54140,54171],"source":" Do not use `::IsWindowVisible`."},{"content":"If the pane is not tabbed (see <bpt id=\"p1\">[</bpt>CBasePane::IsTabbed<ept id=\"p1\">](#cbasepane__istabbed)</ept>), this method checks for the <ph id=\"ph1\">`WS_VISIBLE`</ph> style.","pos":[54178,54301],"source":"If the pane is not tabbed (see [CBasePane::IsTabbed](#cbasepane__istabbed)), this method checks for the `WS_VISIBLE` style."},{"content":"If the pane is tabbed, this method checks the visibility of the parent tabbed window.","pos":[54302,54387]},{"content":"If the parent window is visible, the function checks the visibility of the pane tab using <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsTabVisible<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md#cmfcbasetabctrl__istabvisible)</ept>.","pos":[54388,54586],"source":" If the parent window is visible, the function checks the visibility of the pane tab using [CMFCBaseTabCtrl::IsTabVisible](../../mfc/reference/cmfcbasetabctrl-class.md#cmfcbasetabctrl__istabvisible)."},{"pos":[54633,54653],"content":"CBasePane::LoadState"},{"content":"Loads the pane's state from the registry.","pos":[54657,54698]},{"content":"Parameters","pos":[54829,54839]},{"content":"[in]","pos":[54843,54847]},{"content":"Profile name.","pos":[54869,54882]},{"content":"[in]","pos":[54889,54893]},{"content":"Profile index.","pos":[54906,54920]},{"content":"[in]","pos":[54927,54931]},{"content":"Pane ID.","pos":[54942,54950]},{"content":"Return Value","pos":[54960,54972]},{"pos":[54983,55044],"content":"if the pane state was loaded successfully; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pane state was loaded successfully; otherwise `FALSE`."},{"content":"Remarks","pos":[55054,55061]},{"content":"The framework calls this method to load the pane state from the registry.","pos":[55065,55138]},{"content":"Override it in a derived class to load additional information saved by <bpt id=\"p1\">[</bpt>CBasePane::SaveState<ept id=\"p1\">](#cbasepane__savestate)</ept>.","pos":[55139,55256],"source":" Override it in a derived class to load additional information saved by [CBasePane::SaveState](#cbasepane__savestate)."},{"pos":[55304,55325],"content":"CBasePane::MoveWindow"},{"content":"Moves the pane.","pos":[55329,55344]},{"content":"Parameters","pos":[55464,55474]},{"content":"[in]","pos":[55478,55482]},{"content":"A rectangle specifying the new location and size of the pane.","pos":[55493,55554]},{"content":"[in]","pos":[55561,55565]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the pane is repainted.","pos":[55580,55613],"source":" If `TRUE`, the pane is repainted."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, the pane is not repainted.","pos":[55614,55652],"source":" If `FALSE`, the pane is not repainted."},{"content":"[in]","pos":[55659,55663]},{"content":"Handle to a deferred window position structure.","pos":[55674,55721]},{"content":"Return Value","pos":[55731,55743]},{"pos":[55747,55807],"content":"A handle to a deferred window position structure, or <ph id=\"ph1\">`NULL`</ph>.","source":"A handle to a deferred window position structure, or `NULL`."},{"content":"Remarks","pos":[55817,55824]},{"content":"If you pass <ph id=\"ph1\">`NULL`</ph> as the <ph id=\"ph2\">`hdwp`</ph> parameter, this method moves the window normally.","pos":[55828,55910],"source":"If you pass `NULL` as the `hdwp` parameter, this method moves the window normally."},{"content":"If you pass a handle, this method performs a deferred window move.","pos":[55911,55977]},{"content":"You can obtain a handle by calling <bpt id=\"p1\">[</bpt>BeginDeferWindowPos<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632672)</ept> or by storing the return value of a previous call to this method.","pos":[55978,56160],"source":" You can obtain a handle by calling [BeginDeferWindowPos](http://msdn.microsoft.com/library/windows/desktop/ms632672) or by storing the return value of a previous call to this method."},{"pos":[56217,56247],"content":"CBasePane::OnAfterChangeParent"},{"content":"Called by the framework after the pane's parent changes.","pos":[56251,56307]},{"content":"Parameters","pos":[56387,56397]},{"content":"[in]","pos":[56401,56405]},{"content":"A pointer to the previous parent.","pos":[56425,56458]},{"content":"Remarks","pos":[56468,56475]},{"content":"The framework calls this method after the pane's parent changes, usually because of a docking or floating operation.","pos":[56479,56595]},{"content":"The default implementation does nothing.","pos":[56602,56642]},{"pos":[56700,56731],"content":"CBasePane::OnBeforeChangeParent"},{"content":"Called by the framework just before the pane changes its parent window.","pos":[56735,56806]},{"content":"Parameters","pos":[56917,56927]},{"content":"[in]","pos":[56931,56935]},{"content":"A pointer to a new parent window.","pos":[56955,56988]},{"content":"[in]","pos":[56995,56999]},{"content":"Specifies whether layout adjustments must be delayed.","pos":[57012,57065]},{"content":"Remarks","pos":[57075,57082]},{"content":"The framework calls this method just before the pane's parent changes, usually because of a docking, floating, or auto-hide operation.","pos":[57086,57220]},{"content":"The default implementation does nothing.","pos":[57227,57267]},{"pos":[57318,57342],"content":"CBasePane::OnDrawCaption"},{"content":"The framework calls this method when the caption is drawn.","pos":[57346,57404]},{"content":"Remarks","pos":[57459,57466]},{"pos":[57470,57529],"content":"This method has no functionality for the <ph id=\"ph1\">`CBasePane`</ph> class.","source":"This method has no functionality for the `CBasePane` class."},{"pos":[57584,57612],"content":"CBasePane::OnMovePaneDivider"},{"content":"This method is currently not used.","pos":[57616,57650]},{"content":"Parameters","pos":[57722,57732]},{"content":"[in]","pos":[57736,57740]},{"content":"Not used.","pos":[57760,57769]},{"pos":[57824,57852],"content":"CBasePane::OnPaneContextMenu"},{"content":"Called by the framework when it builds a menu that has a list of panes.","pos":[57856,57927]},{"content":"Parameters","pos":[58029,58039]},{"content":"[in]","pos":[58043,58047]},{"content":"A pointer to the parent frame.","pos":[58066,58096]},{"content":"[in]","pos":[58103,58107]},{"content":"Specifies the location of the shortcut menu.","pos":[58119,58163]},{"content":"Remarks","pos":[58173,58180]},{"content":"calls the docking manager, which maintains the list of panes that belong to the current frame window.","pos":[58204,58305]},{"content":"This method adds the names of the panes to a shortcut menu and displays it.","pos":[58306,58381]},{"content":"The commands on the menu show or hide individual panes.","pos":[58382,58437]},{"content":"Override this method to customize this behavior.","pos":[58444,58492]},{"pos":[58551,58583],"content":"CBasePane::OnRemoveFromMiniFrame"},{"content":"Called by the framework when a pane is removed from its parent mini frame window.","pos":[58587,58668]},{"content":"Parameters","pos":[58756,58766]},{"content":"[in]","pos":[58770,58774]},{"content":"A pointer to a mini-frame window from which the pane is removed.","pos":[58791,58855]},{"content":"Remarks","pos":[58865,58872]},{"content":"The framework calls this method when a pane is removed from its parent mini-frame window (as a result of docking, for example).","pos":[58876,59003]},{"content":"The default implementation does nothing.","pos":[59010,59050]},{"pos":[59100,59123],"content":"CBasePane::OnSetAccData"},{"pos":[59139,59164],"content":"does not use this method."},{"content":"Parameters","pos":[59227,59237]},{"content":"[in]","pos":[59241,59245]},{"content":"Not used.","pos":[59256,59265]},{"content":"Return Value","pos":[59275,59287]},{"pos":[59291,59325],"content":"This method always returns <ph id=\"ph1\">`TRUE`</ph>.","source":"This method always returns `TRUE`."},{"content":"Remarks","pos":[59335,59342]},{"pos":[59393,59417],"content":"CBasePane::PaneFromPoint"},{"content":"Returns the pane that contains the given point.","pos":[59421,59468]},{"content":"Parameters","pos":[59642,59652]},{"content":"[in]","pos":[59656,59660]},{"content":"Specifies the point, in screen coordinates, to check.","pos":[59672,59725]},{"content":"[in]","pos":[59732,59736]},{"content":"Increase the search area by this amount.","pos":[59755,59795]},{"content":"A pane will satisfy the search criteria if the given point falls in the increased area.","pos":[59796,59883]},{"content":"[in]","pos":[59890,59894]},{"content":"to ignore the <ph id=\"ph1\">`nSensitivity`</ph> parameter; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[59917,59976],"source":" to ignore the `nSensitivity` parameter; otherwise, `FALSE`."},{"content":"[in]","pos":[59983,59987]},{"content":"If not <ph id=\"ph1\">`NULL`</ph>, the method searches only panes of the specified type.","pos":[60005,60073],"source":" If not `NULL`, the method searches only panes of the specified type."},{"content":"Return Value","pos":[60083,60095]},{"pos":[60099,60192],"content":"The <ph id=\"ph1\">`CBasePane`</ph>-derived object that contains the given point, or <ph id=\"ph2\">`NULL`</ph> if no pane was found.","source":"The `CBasePane`-derived object that contains the given point, or `NULL` if no pane was found."},{"pos":[60242,60265],"content":"CBasePane::RecalcLayout"},{"pos":[60281,60306],"content":"does not use this method."},{"pos":[60413,60449],"content":"CBasePane::RemovePaneFromDockManager"},{"content":"Unregisters a pane and removes it from the list in the docking manager.","pos":[60453,60524]},{"content":"Parameters","pos":[60736,60746]},{"content":"[in]","pos":[60750,60754]},{"content":"A pointer to a pane to be removed.","pos":[60765,60799]},{"content":"[in]","pos":[60806,60810]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the removed pane is destroyed.","pos":[60825,60866],"source":" If `TRUE`, the removed pane is destroyed."},{"content":"[in]","pos":[60873,60877]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, adjust the docking layout immediately.","pos":[60897,60946],"source":" If `TRUE`, adjust the docking layout immediately."},{"content":"[in]","pos":[60953,60957]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the docking layout is related to the list of autohide bars.","pos":[60973,61043],"source":" If `TRUE`, the docking layout is related to the list of autohide bars."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, the docking layout is related to the list of regular panes.","pos":[61044,61115],"source":" If `FALSE`, the docking layout is related to the list of regular panes."},{"content":"[in]","pos":[61122,61126]},{"content":"A pointer to a pane that replaces the removed pane.","pos":[61148,61199]},{"pos":[61246,61266],"content":"CBasePane::SaveState"},{"content":"Saves the pane's state to the registry.","pos":[61270,61309]},{"content":"Parameters","pos":[61440,61450]},{"content":"[in]","pos":[61454,61458]},{"content":"Profile name.","pos":[61480,61493]},{"content":"[in]","pos":[61500,61504]},{"content":"Profile index.","pos":[61517,61531]},{"content":"[in]","pos":[61538,61542]},{"content":"Pane ID.","pos":[61553,61561]},{"content":"Return Value","pos":[61571,61583]},{"pos":[61594,61649],"content":"if the state was saved successfully; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the state was saved successfully; otherwise `FALSE`."},{"content":"Remarks","pos":[61659,61666]},{"content":"The framework calls this method when it saves the pane's state to the registry.","pos":[61670,61749]},{"content":"Override <ph id=\"ph1\">`SaveState`</ph> in a derived class to store additional information.","pos":[61750,61822],"source":" Override `SaveState` in a derived class to store additional information."},{"pos":[61877,61905],"content":"CBasePane::SelectDefaultFont"},{"content":"Selects the default font for a given device context.","pos":[61909,61961]},{"content":"Parameters","pos":[62022,62032]},{"content":"[in]","pos":[62036,62040]},{"content":"A device context.","pos":[62050,62067]},{"content":"Return Value","pos":[62077,62089]},{"pos":[62093,62175],"content":"A pointer to the default <bpt id=\"p1\">[</bpt>CFont Class<ept id=\"p1\">](../../mfc/reference/cfont-class.md)</ept> object.","source":"A pointer to the default [CFont Class](../../mfc/reference/cfont-class.md) object."},{"pos":[62231,62260],"content":"CBasePane::SetControlBarStyle"},{"content":"Sets the control bar style.","pos":[62264,62291]},{"content":"Parameters","pos":[62367,62377]},{"content":"[in]","pos":[62381,62385]},{"content":"A bitwise-OR combination of the following possible values.","pos":[62402,62460]},{"content":"Style","pos":[62467,62472]},{"content":"Description","pos":[62473,62484]},{"content":"Makes the control bar float.","pos":[62540,62568]},{"content":"Enables auto-hide mode.","pos":[62593,62616]},{"content":"Enables resizing of the control bar.","pos":[62639,62675]},{"content":"When this flag is set, the control bar can be placed in a dockable pane.","pos":[62676,62748]},{"content":"Enables hiding of the control bar.","pos":[62770,62804]},{"pos":[62857,62882],"content":"CBasePane::SetDockingMode"},{"content":"Sets the docking mode for the pane.","pos":[62886,62921]},{"content":"Parameters","pos":[62994,63004]},{"content":"[in]","pos":[63008,63012]},{"content":"Specifies the new docking mode for the pane.","pos":[63030,63074]},{"content":"Remarks","pos":[63084,63091]},{"content":"The framework supports two docking modes: standard and immediate.","pos":[63095,63160]},{"content":"In the standard docking mode, panes and mini-frame windows are moved around using a drag rectangle.","pos":[63167,63266]},{"content":"In the immediate docking mode, control bars and mini-frame windows are moved immediately with their context.","pos":[63267,63375]},{"content":"Initially, the docking mode is defined globally by <bpt id=\"p1\">[</bpt>CDockingManager::m_dockModeGlobal<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__m_dockmodeglobal)</ept>.","pos":[63382,63549],"source":"Initially, the docking mode is defined globally by [CDockingManager::m_dockModeGlobal](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__m_dockmodeglobal)."},{"content":"You can set the docking mode for each pane individually using the <ph id=\"ph1\">`SetDockingMode`</ph> method.","pos":[63550,63640],"source":" You can set the docking mode for each pane individually using the `SetDockingMode` method."},{"pos":[63694,63721],"content":"CBasePane::SetPaneAlignment"},{"content":"Sets the alignment for the pane.","pos":[63725,63757]},{"content":"Parameters","pos":[63832,63842]},{"content":"[in]","pos":[63846,63850]},{"content":"Specifies the new alignment.","pos":[63868,63896]},{"content":"Remarks","pos":[63906,63913]},{"content":"Usually, the framework calls this method when a pane is docked from one side of the main frame to another.","pos":[63917,64023]},{"pos":[64030,64094],"content":"The following table shows the possible values for <ph id=\"ph1\">`dwAlignment`</ph>:","source":"The following table shows the possible values for `dwAlignment`:"},{"content":"Value","pos":[64101,64106]},{"content":"Alignment","pos":[64107,64116]},{"content":"Left alignment.","pos":[64171,64186]},{"content":"Right alignment.","pos":[64210,64226]},{"content":"Top alignment.","pos":[64248,64262]},{"content":"Bottom alignment.","pos":[64287,64304]},{"pos":[64355,64378],"content":"CBasePane::SetPaneStyle"},{"content":"Sets the style of the pane.","pos":[64382,64409]},{"content":"Parameters","pos":[64479,64489]},{"content":"[in]","pos":[64493,64497]},{"content":"Specifies the new style to set.","pos":[64514,64545]},{"content":"Remarks","pos":[64555,64562]},{"content":"This method can be used to set any of the CBRS_ styles that are defined in afxres.h.","pos":[64566,64650]},{"content":"Because pane style and pane alignment are stored together, set the new style by combining it with the current alignment as follows.","pos":[64651,64782]},{"pos":[64908,64931],"content":"CBasePane::SetWindowPos"},{"content":"Changes the size, position, and Z-order of a pane.","pos":[64935,64985]},{"content":"Parameters","pos":[65168,65178]},{"content":"[in]","pos":[65182,65186]},{"content":"Identifies the <ph id=\"ph1\">`CWnd`</ph> object that comes before this <ph id=\"ph2\">`CWnd`</ph> object in the Z-order.","pos":[65208,65289],"source":" Identifies the `CWnd` object that comes before this `CWnd` object in the Z-order."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CWnd::SetWindowPos<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__setwindowpos)</ept>.","pos":[65290,65391],"source":" For more information, see [CWnd::SetWindowPos](../../mfc/reference/cwnd-class.md#cwnd__setwindowpos)."},{"content":"[in]","pos":[65398,65402]},{"content":"Specifies the position of the left side of the window.","pos":[65410,65464]},{"content":"[in]","pos":[65471,65475]},{"content":"Specifies the position of the top of the window.","pos":[65483,65531]},{"content":"[in]","pos":[65538,65542]},{"content":"Specifies the width of the window.","pos":[65551,65585]},{"content":"[in]","pos":[65592,65596]},{"content":"Specifies the height of the window.","pos":[65605,65640]},{"content":"[in]","pos":[65647,65651]},{"content":"Specifies size and position options.","pos":[65664,65700]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CWnd::SetWindowPos<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__setwindowpos)</ept>.","pos":[65701,65802],"source":" For more information, see [CWnd::SetWindowPos](../../mfc/reference/cwnd-class.md#cwnd__setwindowpos)."},{"content":"[in]","pos":[65809,65813]},{"content":"Handle to a structure that contains size and position information for one or more windows.","pos":[65824,65914]},{"content":"Return Value","pos":[65924,65936]},{"pos":[65940,66009],"content":"A handle to an updated deferred window position structure, or <ph id=\"ph1\">`NULL`</ph>.","source":"A handle to an updated deferred window position structure, or `NULL`."},{"content":"Remarks","pos":[66019,66026]},{"content":"If <ph id=\"ph1\">`pWndInsertAfter`</ph> is <ph id=\"ph2\">`NULL`</ph>, this method calls <bpt id=\"p1\">[</bpt>CWnd::SetWindowPos<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__setwindowpos)</ept>.","pos":[66030,66155],"source":"If `pWndInsertAfter` is `NULL`, this method calls [CWnd::SetWindowPos](../../mfc/reference/cwnd-class.md#cwnd__setwindowpos)."},{"content":"If <ph id=\"ph1\">`pWndInsertAfter`</ph> is non- <ph id=\"ph2\">`NULL`</ph>, this method calls <ph id=\"ph3\">`DeferWindowPos`</ph>.","pos":[66156,66228],"source":" If `pWndInsertAfter` is non- `NULL`, this method calls `DeferWindowPos`."},{"pos":[66274,66293],"content":"CBasePane::ShowPane"},{"content":"Shows or hides the pane.","pos":[66297,66321]},{"content":"Parameters","pos":[66427,66437]},{"content":"[in]","pos":[66441,66445]},{"content":"Specifies whether to show ( <ph id=\"ph1\">`TRUE`</ph>) or hide ( <ph id=\"ph2\">`FALSE`</ph>) a pane.","pos":[66457,66519],"source":" Specifies whether to show ( `TRUE`) or hide ( `FALSE`) a pane."},{"content":"[in]","pos":[66526,66530]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, recalculating the docking layout is delayed.","pos":[66543,66598],"source":" If `TRUE`, recalculating the docking layout is delayed."},{"content":"[in]","pos":[66605,66609]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the pane is active when shown.","pos":[66625,66666],"source":" If `TRUE`, the pane is active when shown."},{"content":"Remarks","pos":[66676,66683]},{"content":"This method shows or hides a pane.","pos":[66687,66721]},{"content":"Use this method instead of <ph id=\"ph1\">`ShowWindow`</ph> because this method notifies the relevant docking managers about changes in the pane's visibility.","pos":[66722,66860],"source":" Use this method instead of `ShowWindow` because this method notifies the relevant docking managers about changes in the pane's visibility."},{"pos":[66867,66963],"content":"Use <bpt id=\"p1\">[</bpt>CBasePane::IsVisible<ept id=\"p1\">](#cbasepane__isvisible)</ept> to determine the current visibility of a pane.","source":"Use [CBasePane::IsVisible](#cbasepane__isvisible) to determine the current visibility of a pane."},{"pos":[67012,67034],"content":"CBasePane::StretchPane"},{"content":"Stretches a pane vertically or horizontally.","pos":[67038,67082]},{"content":"Parameters","pos":[67170,67180]},{"content":"[in]","pos":[67184,67188]},{"content":"The length by which to stretch the pane.","pos":[67202,67242]},{"content":"[in]","pos":[67249,67253]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, stretch the pane vertically.","pos":[67265,67304],"source":" If `TRUE`, stretch the pane vertically."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, stretch the pane horizontally.","pos":[67305,67347],"source":" If `FALSE`, stretch the pane horizontally."},{"content":"Return Value","pos":[67357,67369]},{"content":"The size of the stretched pane.","pos":[67373,67404]},{"pos":[67452,67473],"content":"CBasePane::UndockPane"},{"content":"Removes the pane from the dock site, default slider, or mini-frame window where it is currently docked.","pos":[67477,67580]},{"content":"Parameters","pos":[67649,67659]},{"content":"If TRUE, the docking layout is not recalculated immediately.","pos":[67675,67735]},{"content":"Remarks","pos":[67745,67752]},{"content":"Call this method to manipulate the pane state or exclude the pane from the docking layout.","pos":[67756,67846]},{"pos":[67853,68027],"content":"If you want to continue to use this pane, call either <bpt id=\"p1\">[</bpt>CBasePane::DockPane<ept id=\"p1\">](#cbasepane__dockpane)</ept> or <bpt id=\"p2\">[</bpt>CBasePane::FloatPane<ept id=\"p2\">](#cbasepane__floatpane)</ept> before calling this method.","source":"If you want to continue to use this pane, call either [CBasePane::DockPane](#cbasepane__dockpane) or [CBasePane::FloatPane](#cbasepane__floatpane) before calling this method."},{"content":"See Also","pos":[68036,68044]},{"content":"Hierarchy Chart","pos":[68049,68064]},{"content":"Classes","pos":[68101,68108]},{"content":"CPane","pos":[68151,68156]},{"content":"CWnd Class","pos":[68203,68213]}],"content":"---\ntitle: \"CBasePane Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CBasePane::get_accKeyboardShortcut\"\n  - \"CBasePane.get_accKeyboardShortcut\"\n  - \"CBasePane.accSelect\"\n  - \"get_accDefaultAction\"\n  - \"accSelect\"\n  - \"CBasePane.accHitTest\"\n  - \"CBasePane.get_accRole\"\n  - \"get_accKeyboardShortcut\"\n  - \"CBasePane::Serialize\"\n  - \"CBasePane\"\n  - \"CBasePane::get_accDefaultAction\"\n  - \"get_accParent\"\n  - \"CBasePane::accSelect\"\n  - \"accLocation\"\n  - \"CBasePane.get_accDescription\"\n  - \"get_accName\"\n  - \"CBasePane::get_accChildCount\"\n  - \"CBasePane.get_accChild\"\n  - \"CBasePane::accHitTest\"\n  - \"accHitTest\"\n  - \"get_accHelp\"\n  - \"CBasePane.get_accChildCount\"\n  - \"CBasePane.get_accValue\"\n  - \"CBasePane::get_accDescription\"\n  - \"get_accChildCount\"\n  - \"CBasePane.accLocation\"\n  - \"CBasePane.PreTranslateMessage\"\n  - \"CBasePane.get_accName\"\n  - \"PreTranslateMessage\"\n  - \"CBasePane::get_accFocus\"\n  - \"get_accDescription\"\n  - \"CBasePane::get_accRole\"\n  - \"get_accValue\"\n  - \"CBasePane.Serialize\"\n  - \"CBasePane::accLocation\"\n  - \"get_accRole\"\n  - \"CBasePane::get_accChild\"\n  - \"get_accFocus\"\n  - \"CBasePane::get_accHelp\"\n  - \"CBasePane.get_accDefaultAction\"\n  - \"CBasePane.get_accHelp\"\n  - \"CBasePane::PreTranslateMessage\"\n  - \"CBasePane::get_accState\"\n  - \"CBasePane.get_accParent\"\n  - \"CBasePane::get_accParent\"\n  - \"get_accChild\"\n  - \"CBasePane::get_accValue\"\n  - \"Serialize\"\n  - \"get_accState\"\n  - \"CBasePane.get_accState\"\n  - \"CBasePane.get_accFocus\"\n  - \"CBasePane::get_accName\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"get_accState method\"\n  - \"get_accHelp method\"\n  - \"CBasePane class\"\n  - \"accLocation method\"\n  - \"accHitTest method\"\n  - \"get_accDescription method\"\n  - \"get_accDefaultAction method\"\n  - \"get_accName method\"\n  - \"get_accFocus method\"\n  - \"get_accRole method\"\n  - \"get_accValue method\"\n  - \"get_accChild method\"\n  - \"accSelect method\"\n  - \"get_accKeyboardShortcut method\"\n  - \"get_accChildCount method\"\n  - \"Serialize method\"\n  - \"PreTranslateMessage method\"\n  - \"get_accParent method\"\nms.assetid: 8163dd51-d7c7-4def-9c74-61f8ecdfad82\ncaps.latest.revision: 43\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CBasePane Class\nBase class for all panes in MFC.  \n  \n## Syntax  \n  \n```  \nclass CBasePane : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`CBasePane::CBasePane`|Default constructor.|  \n|`CBasePane::~CBasePane`|Destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`CBasePane::accHitTest`|Called by the framework to retrieve the child element or child object at a given point on the screen. (Overrides [CWnd::accHitTest](../../mfc/reference/cwnd-class.md#cwnd__acchittest).)|  \n|`CBasePane::accLocation`|Called by the framework to retrieve the current screen location for the specified object. (Overrides [CWnd::accLocation](../../mfc/reference/cwnd-class.md#cwnd__acclocation).)|  \n|[CBasePane::AccNotifyObjectFocusEvent](#cbasepane__accnotifyobjectfocusevent)|`CBasePane` does not use this method.|  \n|`CBasePane::accSelect`|Called by the framework to modify the selection or move the keyboard focus of the specified object. (Overrides [CWnd::accSelect](../../mfc/reference/cwnd-class.md#cwnd__accselect).)|  \n|[CBasePane::AddPane](#cbasepane__addpane)|Adds a pane to the docking manager.|  \n|[CBasePane::AdjustDockingLayout](#cbasepane__adjustdockinglayout)|Redirects a call to the docking manager to adjust the docking layout.|  \n|[CBasePane::AdjustLayout](#cbasepane__adjustlayout)|Called by the framework when the pane should adjust its internal layout.|  \n|[CBasePane::CalcFixedLayout](#cbasepane__calcfixedlayout)|Calculates the horizontal size of a control bar.|  \n|[CBasePane::CanAcceptPane](#cbasepane__canacceptpane)|Determines whether another pane can be docked to the pane.|  \n|[CBasePane::CanAutoHide](#cbasepane__canautohide)|Determines whether the pane supports auto-hide mode.|  \n|[CBasePane::CanBeAttached](#cbasepane__canbeattached)|Determines whether the pane can be docked to another pane.|  \n|[CBasePane::CanBeClosed](#cbasepane__canbeclosed)|Determines whether the pane can be closed.|  \n|[CBasePane::CanBeDocked](#cbasepane__canbedocked)|Determines whether the pane can be docked to another pane.|  \n|[CBasePane::CanBeResized](#cbasepane__canberesized)|Determines whether the pane can be resized.|  \n|[CBasePane::CanBeTabbedDocument](#cbasepane__canbetabbeddocument)|Specifies whether the pane can be converted to an MDI tabbed document.|  \n|[CBasePane::CanFloat](#cbasepane__canfloat)|Determines whether the pane can float.|  \n|[CBasePane::CanFocus](#cbasepane__canfocus)|Specifies whether the pane can receive focus.|  \n|[CBasePane::CopyState](#cbasepane__copystate)|Copies the state of a given pane.|  \n|[CBasePane::CreateDefaultMiniframe](#cbasepane__createdefaultminiframe)|If the pane can float, creates a mini-frame window.|  \n|[CBasePane::CreateEx](#cbasepane__createex)|Creates the pane control.|  \n|[CBasePane::DockPane](#cbasepane__dockpane)|Docks a pane to another pane or to a frame window.|  \n|[CBasePane::DockPaneUsingRTTI](#cbasepane__dockpaneusingrtti)|Docks the pane by using run-time type information.|  \n|[CBasePane::DockToFrameWindow](#cbasepane__docktoframewindow)|Docks a dockable pane to a frame.|  \n|[CBasePane::DoesAllowDynInsertBefore](#cbasepane__doesallowdyninsertbefore)|Determines whether another pane can be dynamically inserted between this pane and the parent frame.|  \n|[CBasePane::EnableDocking](#cbasepane__enabledocking)|Enables docking of the pane to the main frame.|  \n|[CBasePane::EnableGripper](#cbasepane__enablegripper)|Enables or disables the gripper. If the gripper is enabled, the user can drag it to reposition the pane.|  \n|`CBasePane::FillWindowRect`|Used internally.|  \n|[CBasePane::FloatPane](#cbasepane__floatpane)|Floats the pane.|  \n|`CBasePane::get_accChild`|Called by the framework to retrieve the address of an `IDispatch` interface for the specified child. (Overrides [CWnd::get_accChild](../../mfc/reference/cwnd-class.md#cwnd__get_accchild).)|  \n|`CBasePane::get_accChildCount`|Called by the framework to retrieve the number of children that belong to this object. (Overrides [CWnd::get_accChildCount](../../mfc/reference/cwnd-class.md#cwnd__get_accchildcount).)|  \n|`CBasePane::get_accDefaultAction`|Called by the framework to retrieve a string that describes the default action for the object. (Overrides [CWnd::get_accDefaultAction](../../mfc/reference/cwnd-class.md#cwnd__get_accdefaultaction).)|  \n|`CBasePane::get_accDescription`|Called by framework to retrieve a string that describes the visual appearance of the specified object. (Overrides [CWnd::get_accDescription](../../mfc/reference/cwnd-class.md#cwnd__get_accdescription).)|  \n|`CBasePane::get_accFocus`|Called by the framework to retrieve the object that has the keyboard focus. (Overrides [CWnd::get_accFocus](../../mfc/reference/cwnd-class.md#cwnd__get_accfocus).)|  \n|`CBasePane::get_accHelp`|Called by the framework to retrieve a  Help property string for the object. (Overrides [CWnd::get_accHelp](../../mfc/reference/cwnd-class.md#cwnd__get_acchelp).)|  \n|[CBasePane::get_accHelpTopic](#cbasepane__get_acchelptopic)|Called by the framework to retrieve the full path of the WinHelp file that is associated with the specified object and the identifier of the appropriate topic in that file. (Overrides [CWnd::get_accHelpTopic](../../mfc/reference/cwnd-class.md#cwnd__get_acchelptopic).)|  \n|`CBasePane::get_accKeyboardShortcut`|Called by the framework to retrieve the specified shortcut key for the object. (Overrides [CWnd::get_accKeyboardShortcut](../../mfc/reference/cwnd-class.md#cwnd__get_acckeyboardshortcut).)|  \n|`CBasePane::get_accName`|Called by the framework to retrieve the name of the specified object. (Overrides [CWnd::get_accName](../../mfc/reference/cwnd-class.md#cwnd__get_accname).)|  \n|`CBasePane::get_accParent`|Called by the framework to retrieve the `IDispatch` interface for the parent of the object. (Overrides [CWnd::get_accParent](../../mfc/reference/cwnd-class.md#cwnd__get_accparent).)|  \n|`CBasePane::get_accRole`|Called by the framework to retrieve information that describes the role of the specified object. (Overrides [CWnd::get_accRole](../../mfc/reference/cwnd-class.md#cwnd__get_accrole).)|  \n|[CBasePane::get_accSelection](#cbasepane__get_accselection)|Called by the framework to retrieve the selected children of this object. (Overrides [CWnd::get_accSelection](../../mfc/reference/cwnd-class.md#cwnd__get_accselection).)|  \n|`CBasePane::get_accState`|Called by the framework to retrieve the current state of the specified object. (Overrides [CWnd::get_accState](../../mfc/reference/cwnd-class.md#cwnd__get_accstate).)|  \n|`CBasePane::get_accValue`|Called by the framework to retrieve the value of the specified object. (Overrides [CWnd::get_accValue](../../mfc/reference/cwnd-class.md#cwnd__get_accvalue).)|  \n|[CBasePane::GetCaptionHeight](#cbasepane__getcaptionheight)|Returns the caption height.|  \n|[CBasePane::GetControlBarStyle](#cbasepane__getcontrolbarstyle)|Returns the control bar style.|  \n|[CBasePane::GetCurrentAlignment](#cbasepane__getcurrentalignment)|Returns the current pane alignment.|  \n|[CBasePane::GetDockingMode](#cbasepane__getdockingmode)|Returns the current docking mode for the pane.|  \n|[CBasePane::GetDockSiteFrameWnd](#cbasepane__getdocksiteframewnd)|Returns a pointer to the window that is the dock site for the pane.|  \n|[CBasePane::GetEnabledAlignment](#cbasepane__getenabledalignment)|Returns the CBRS_ALIGN_ styles that are applied to the pane.|  \n|[CBasePane::GetMFCStyle](#cbasepane__getmfcstyle)|Returns the pane styles specific to MFC.|  \n|[CBasePane::GetPaneIcon](#cbasepane__getpaneicon)|Returns a handle to the pane icon.|  \n|`CBasePane::GetPaneRect`|Used internally.|  \n|[CBasePane::GetPaneRow](#cbasepane__getpanerow)|Returns a pointer to the [CDockingPanesRow](../../mfc/reference/cdockingpanesrow-class.md)object where the pane is docked.|  \n|[CBasePane::GetPaneStyle](#cbasepane__getpanestyle)|Returns the pane style.|  \n|[CBasePane::GetParentDockSite](#cbasepane__getparentdocksite)|Returns a pointer to the parent dock site.|  \n|[CBasePane::GetParentMiniFrame](#cbasepane__getparentminiframe)|Returns a pointer to the parent mini-frame window.|  \n|[CBasePane::GetParentTabbedPane](#cbasepane__getparenttabbedpane)|Returns a pointer to the parent tabbed pane.|  \n|[CBasePane::GetParentTabWnd](#cbasepane__getparenttabwnd)|Returns a pointer to the parent window that is inside a tab.|  \n|[CBasePane::GetRecentVisibleState](#cbasepane__getrecentvisiblestate)|The framework calls this method when a pane is restored from an archive.|  \n|[CBasePane::HideInPrintPreviewMode](#cbasepane__hideinprintpreviewmode)|Specifies whether the pane is hidden in print preview.|  \n|[CBasePane::InsertPane](#cbasepane__insertpane)|Registers the specified pane with the docking manager.|  \n|[CBasePane::IsAccessibilityCompatible](#cbasepane__isaccessibilitycompatible)|Specifies whether the pane supports Active Accessibility.|  \n|[CBasePane::IsAutoHideMode](#cbasepane__isautohidemode)|Determines whether a pane is in auto-hide mode.|  \n|[CBasePane::IsDialogControl](#cbasepane__isdialogcontrol)|Specifies whether the pane is a dialog control.|  \n|[CBasePane::IsDocked](#cbasepane__isdocked)|Determines whether the pane is docked.|  \n|[CBasePane::IsFloating](#cbasepane__isfloating)|Determines whether the pane is floating.|  \n|[CBasePane::IsHorizontal](#cbasepane__ishorizontal)|Determines whether the pane is docked horizontally.|  \n|[CBasePane::IsInFloatingMultiPaneFrameWnd](#cbasepane__isinfloatingmultipaneframewnd)|Specifies whether the pane is in a multi-pane frame window.|  \n|[CBasePane::IsMDITabbed](#cbasepane__ismditabbed)|Determines whether the pane has been added to an MDI child window as a tabbed document.|  \n|[CBasePane::IsPaneVisible](#cbasepane__ispanevisible)|Specifies whether the `WS_VISIBLE` flag is set for the pane.|  \n|[CBasePane::IsPointNearDockSite](#cbasepane__ispointneardocksite)|Determines whether a specified point is near the dock site.|  \n|[CBasePane::IsResizable](#cbasepane__isresizable)|Determines whether the pane can be resized.|  \n|[CBasePane::IsRestoredFromRegistry](#cbasepane__isrestoredfromregistry)|Determines whether the pane is restored from the registry.|  \n|[CBasePane::IsTabbed](#cbasepane__istabbed)|Determines whether the pane has been inserted in the tab control of a tabbed window.|  \n|`CBasePane::IsTooltipTopmost`|Used internally.|  \n|[CBasePane::IsVisible](#cbasepane__isvisible)|Determines whether the pane is visible.|  \n|[CBasePane::LoadState](#cbasepane__loadstate)|Loads the pane state from the registry.|  \n|[CBasePane::MoveWindow](#cbasepane__movewindow)|Moves the pane.|  \n|[CBasePane::OnAfterChangeParent](#cbasepane__onafterchangeparent)|Called by the framework when the pane's parent has been changed.|  \n|[CBasePane::OnBeforeChangeParent](#cbasepane__onbeforechangeparent)|Called by the framework just before the pane changes its parent window.|  \n|[CBasePane::OnDrawCaption](#cbasepane__ondrawcaption)|The framework calls this method when the caption is drawn.|  \n|[CBasePane::OnMovePaneDivider](#cbasepane__onmovepanedivider)|This method is currently not used.|  \n|[CBasePane::OnPaneContextMenu](#cbasepane__onpanecontextmenu)|Called by the framework when it builds a menu that has a list of panes.|  \n|[CBasePane::OnRemoveFromMiniFrame](#cbasepane__onremovefromminiframe)|Called by the framework when a pane is removed from its parent mini frame window.|  \n|[CBasePane::OnSetAccData](#cbasepane__onsetaccdata)|`CBasePane` does not use this method.|  \n|`CBasePane::OnUpdateCmdUI`|Used internally.|  \n|[CBasePane::PaneFromPoint](#cbasepane__panefrompoint)|Returns the pane that contains the given point.|  \n|`CBasePane::PreTranslateMessage`|Used by class [CWinApp](../../mfc/reference/cwinapp-class.md) to translate window messages before they are dispatched to the [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934) Windows functions. (Overrides [CWnd::PreTranslateMessage](../../mfc/reference/cwnd-class.md#cwnd__pretranslatemessage).)|  \n|[CBasePane::RecalcLayout](#cbasepane__recalclayout)|`CBasePane` does not use this method.|  \n|[CBasePane::RemovePaneFromDockManager](#cbasepane__removepanefromdockmanager)|Unregisters a pane and removes it from the list in the docking manager.|  \n|[CBasePane::SaveState](#cbasepane__savestate)|Saves the pane's state to the registry.|  \n|[CBasePane::SelectDefaultFont](#cbasepane__selectdefaultfont)|Selects the default font for a given device context.|  \n|`CBasePane::Serialize`|Reads or writes this object from or to an archive. (Overrides [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize).)|  \n|[CBasePane::SetControlBarStyle](#cbasepane__setcontrolbarstyle)|Sets the control bar style.|  \n|[CBasePane::SetDockingMode](#cbasepane__setdockingmode)|Sets the docking mode for the pane.|  \n|`CBasePane::SetMDITabbed`|Used internally.|  \n|[CBasePane::SetPaneAlignment](#cbasepane__setpanealignment)|Sets the alignment for the pane.|  \n|`CBasePane::SetPaneRect`|Used internally.|  \n|[CBasePane::SetPaneStyle](#cbasepane__setpanestyle)|Sets the style of the pane.|  \n|`CBasePane::SetRestoredFromRegistry`|Used internally.|  \n|[CBasePane::SetWindowPos](#cbasepane__setwindowpos)|Changes the size, position, and Z-order of a pane.|  \n|[CBasePane::ShowPane](#cbasepane__showpane)|Shows or hides the pane.|  \n|[CBasePane::StretchPane](#cbasepane__stretchpane)|Stretches a pane vertically or horizontally.|  \n|[CBasePane::UndockPane](#cbasepane__undockpane)|Removes the pane from the dock site, default slider, or mini-frame window where it is currently docked.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CBasePane::DoPaint](#cbasepane__dopaint)|Fills the background of the pane.|  \n  \n## Remarks  \n If you want to create a pane class that supports the extended docking features available in MFC, you must derive it from `CBasePane` or from [CPane Class](../../mfc/reference/cpane-class.md).  \n  \n## Customization Tips  \n The following customization tips pertain to the [CBasePane Class](../../mfc/reference/cbasepane-class.md) and any classes that inherit from it:  \n  \n-   When you create a pane, you can apply several new styles:  \n  \n    - `AFX_CBRS_FLOAT` makes the pane float.  \n  \n    - `AFX_CBRS_AUTOHIDE` enables auto-hide mode.  \n  \n    - `AFX_CBRS_CLOSE` enables the pane to be closed (hidden).  \n  \n     These are flags that you can combine with a bitwise-OR operation.  \n  \n `CBasePane` implements the following virtual Boolean methods to reflect these flags: [CBasePane::CanBeClosed](#cbasepane__canbeclosed), [CBasePane::CanAutoHide](#cbasepane__canautohide), [CBasePane::CanFloat](#cbasepane__canfloat). You can override them in derived classes to customize their behavior.  \n  \n-   You can customize docking behavior by overriding [CBasePane::CanAcceptPane](#cbasepane__canacceptpane). Have your pane return `FALSE` from this method to prevent another pane from docking to it.  \n  \n-   If you want to create a static pane that cannot float and that prevents any other pane from docking before it (similar to the Outlook bar in the OutlookDemo example), create it as non-floating and override [CBasePane::DoesAllowDynInsertBefore](#cbasepane__doesallowdyninsertbefore) to return `FALSE`. The default implementation returns `FALSE` if the pane is created without the `AFX_CBRS_FLOAT` style.  \n  \n-   Create all panes with IDs other than -1.  \n  \n-   To determine pane visibility, use [CBasePane::IsVisible](#cbasepane__isvisible). It correctly handles the visibility state in tabbed and auto-hide modes.  \n  \n-   If you want to create a non-floating resizable pane, create it without the `AFX_CBRS_FLOAT` style and call [CFrameWnd::DockControlBar](../../mfc/reference/cframewnd-class.md#cframewnd__dockcontrolbar).  \n  \n-   To exclude a pane from a docking layout or to remove a toolbar from its dock bar, call [CBasePane::UndockPane](#cbasepane__undockpane). Do not call this method for panes in auto-hide mode or for panes that reside in tabs of tabbed windows.  \n  \n-   If you want to float or undock a pane that is in auto-hide mode, you must call [CDockablePane::SetAutoHideMode](../../mfc/reference/cdockablepane-class.md#cdockablepane__setautohidemode) with `FALSE` as the first argument before you call [CBasePane::FloatPane](#cbasepane__floatpane) or [CBasePane::UndockPane](#cbasepane__undockpane).  \n  \n## Example  \n The following example demonstrates how to use various methods in the `CBasePane` class. The example demonstrates how to retrieve a pane from the `CFrameWndEx` class and how to set the docking mode, the pane alignment, and the pane style. The code is from the [Word Pad sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_WordPad#2](../../mfc/reference/codesnippet/cpp/cbasepane-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CBasePane](../../mfc/reference/cbasepane-class.md)  \n  \n## Requirements  \n **Header:** afxbasepane.h  \n  \n##  <a name=\"cbasepane__accnotifyobjectfocusevent\"></a>  CBasePane::AccNotifyObjectFocusEvent  \n `CBasePane` does not use this method.  \n  \n```  \nvirtual void AccNotifyObjectFocusEvent(int);\n```  \n  \n### Parameters  \n [in] `int`  \n Not used.  \n  \n##  <a name=\"cbasepane__addpane\"></a>  CBasePane::AddPane  \n Adds a pane to the docking manager.  \n  \n```  \nvoid AddPane(CBasePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to a pane to add.  \n  \n### Remarks  \n This is a convenience method that adds a pane to a docking manager. By using this method, you do not have to write code that analyzes the type of the parent frame.  \n  \n For more information, see [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) and [CMDIFrameWndEx::AddPane](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__addpane).  \n  \n##  <a name=\"cbasepane__adjustdockinglayout\"></a>  CBasePane::AdjustDockingLayout  \n Redirects a call to the docking manager to adjust the docking layout.  \n  \n```  \nvirtual void AdjustDockingLayout(HDWP hdwp=NULL);\n```  \n  \n### Parameters  \n [out] `hdwp`  \n A handle to a structure containing multiple window positions.  \n  \n### Remarks  \n This is a convenience method that adjusts the docking layout. By using this method, you do not have to write code that analyzes the type of the parent frame.  \n  \n For more information, see [CDockingManager::AdjustDockingLayout](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__adjustdockinglayout)  \n  \n##  <a name=\"cbasepane__adjustlayout\"></a>  CBasePane::AdjustLayout  \n Called by the framework to adjust the internal layout of a pane.  \n  \n```  \nvirtual void AdjustLayout();\n```  \n  \n### Remarks  \n The framework calls this method when a pane has to adjust its internal layout. The base implementation does nothing.  \n  \n##  <a name=\"cbasepane__calcfixedlayout\"></a>  CBasePane::CalcFixedLayout  \n Calculates the horizontal size of a control bar.  \n  \n```  \nvirtual CSize CalcFixedLayout(\n    BOOL bStretch,  \n    BOOL bHorz);\n```  \n  \n### Parameters  \n [in] `bStretch`  \n Indicates whether the bar should be stretched to the size of the frame. The `bStretch` parameter is nonzero when the bar is not a docking bar (not available for docking) and is 0 when it is docked or floating (available for docking).  \n  \n [in] `bHorz`  \n Indicates that the bar is horizontally or vertically oriented. The `bHorz` parameter is nonzero if the bar is horizontally oriented and is 0 if it is vertically oriented.  \n  \n### Return Value  \n The control bar size, in pixels, of a `CSize` object.  \n  \n### Remarks  \n See the remarks section in [CControlBar::CalcFixedLayout](../../mfc/reference/ccontrolbar-class.md#ccontrolbar__calcfixedlayout)  \n  \n##  <a name=\"cbasepane__canacceptpane\"></a>  CBasePane::CanAcceptPane  \n Determines whether another pane can be docked to the pane.  \n  \n```  \nvirtual BOOL CanAcceptPane(const CBasePane* pBar) const;\n\n \n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to the pane to dock.  \n  \n### Return Value  \n `TRUE` if another pane can be accepted; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method before it docks the pane specified by `pBar` to the current pane.  \n  \n Use this method and the [CBasePane::CanBeDocked](#cbasepane__canbedocked) method to control how panes dock to other panes in your application.  \n  \n The default implementation returns `FALSE`.  \n  \n##  <a name=\"cbasepane__canautohide\"></a>  CBasePane::CanAutoHide  \n Determines whether the pane supports auto-hide mode.  \n  \n```  \nvirtual BOOL CanAutoHide() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if this pane supports auto-hide mode; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this function to determine whether the pane supports auto-hide mode.  \n  \n During construction, you can set this ability by passing the `AFX_CBRS_AUTOHIDE` flag to [CBasePane::CreateEx](#cbasepane__createex).  \n  \n The default implementation checks for the `AFX_CBRS_AUTOHIDE` flag. Override this method in a derived class to customize this behavior.  \n  \n##  <a name=\"cbasepane__canbeattached\"></a>  CBasePane::CanBeAttached  \n Determines whether the pane can be docked to another pane or frame window.  \n  \n```  \nvirtual BOOL CanBeAttached() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane can be docked to another pane or frame window; otherwise `FALSE`.  \n  \n### Remarks  \n The default implementation returns `FALSE`. Override this method in a derived class to enable or disable the ability to dock without calling [CBasePane::EnableDocking](#cbasepane__enabledocking).  \n  \n##  <a name=\"cbasepane__canbeclosed\"></a>  CBasePane::CanBeClosed  \n Determines whether the pane can be closed.  \n  \n```  \nvirtual BOOL CanBeClosed() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane can be closed; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method to determine whether the pane can be closed. If the method returns `TRUE`, a **Close** button is added to the pane's title bar or, if the pane is floating, to the title bar of the pane's miniframe window.  \n  \n During construction, you can set this ability by passing the `AFX_CBRS_CLOSE` flag to [CBasePane::CreateEx](#cbasepane__createex).  \n  \n The default implementation checks for the `AFX_CBRS_CLOSE` flag.  \n  \n##  <a name=\"cbasepane__canbedocked\"></a>  CBasePane::CanBeDocked  \n Determines whether the pane can be docked to another pane.  \n  \n```  \nvirtual BOOL CanBeDocked(CBasePane* pDockBar) const;\n\n \n```  \n  \n### Parameters  \n [in] `pDockBar`  \n A pointer to another pane.  \n  \n### Return Value  \n `TRUE` if this pane can be docked to another pane; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method before it docks the pane specified by `pDockBar` to the current pane.  \n  \n Use this method and the [CBasePane::CanAcceptPane](#cbasepane__canacceptpane) method to control how panes dock to other panes in your application.  \n  \n The default implementation returns `FALSE`.  \n  \n##  <a name=\"cbasepane__canberesized\"></a>  CBasePane::CanBeResized  \n Determines whether the pane can be resized.  \n  \n```  \nvirtual BOOL CanBeResized() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane can be resized; otherwise, `FALSE`.  \n  \n### Remarks  \n This method checks for the `AFX_CBRS_RESIZE` flag, which is specified by default in `CBasePane::OnCreate`. If this flag is not specified, the docking manager flags the pane internally as immovable instead of docking it.  \n  \n##  <a name=\"cbasepane__canbetabbeddocument\"></a>  CBasePane::CanBeTabbedDocument  \n Specifies whether the pane can be converted to an MDI tabbed document.  \n  \n```  \nvirtual BOOL CanBeTabbedDocument() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane can be converted to a tabbed document; otherwise, `FALSE`. `CBasePane::CanBeTabbedDocument` always returns `FALSE`.  \n  \n### Remarks  \n Only objects of certain `CBasePane`-derived types, such as the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md), can be converted to tabbed documents.  \n  \n##  <a name=\"cbasepane__canfloat\"></a>  CBasePane::CanFloat  \n Determines whether the pane can float.  \n  \n```  \nvirtual BOOL CanFloat() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane can float; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method to determine whether the pane can float.  \n  \n During construction, you can set this ability by passing the `AFX_CBRS_FLOAT` flag to [CBasePane::CreateEx](#cbasepane__createex).  \n  \n> [!NOTE]\n>  The framework assumes that non-floating panes are static and that their docking state cannot change. Therefore, the framework does not save the docking state of non-floating panes.  \n  \n The default implementation checks for the `AFX_CBRS_FLOAT` style.  \n  \n##  <a name=\"cbasepane__canfocus\"></a>  CBasePane::CanFocus  \n Specifies whether the pane can receive focus.  \n  \n```  \nvirtual BOOL CanFocus() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane can receive focus; otherwise `FALSE`.  \n  \n### Remarks  \n Override this method in a derived class to control focus. For example, because toolbars cannot receive focus, this method returns `FALSE` when it is called on toolbar objects.  \n  \n The framework tries to set the input focus when a pane is docked or floated.  \n  \n##  <a name=\"cbasepane__copystate\"></a>  CBasePane::CopyState  \n Copies the state of a given pane.  \n  \n```  \nvirtual void CopyState(CBasePane* pOrgBar);\n```  \n  \n### Parameters  \n [in] `pOrgBar`  \n A pointer to another pane.  \n  \n### Remarks  \n This method copies the state from `pOrgBar` to this pane.  \n  \n##  <a name=\"cbasepane__createdefaultminiframe\"></a>  CBasePane::CreateDefaultMiniframe  \n If the pane can float, this method creates a mini-frame window for it.  \n  \n```  \nvirtual CPaneFrameWnd* CreateDefaultMiniframe(CRect rectInitial);\n```  \n  \n### Parameters  \n [in] `rectInitial`  \n Specifies the initial coordinates of the mini-frame window.  \n  \n### Return Value  \n A pointer to the new mini-frame window or `NULL` if the creation failed.  \n  \n### Remarks  \n The framework calls this method when a pane switches to a floating state. The method creates a mini-frame window and attaches the pane to this window.  \n  \n The default implementation returns `NULL`.  \n  \n##  <a name=\"cbasepane__createex\"></a>  CBasePane::CreateEx  \n Creates the pane control.  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwStyleEx,  \n    LPCTSTR lpszClassName,  \n    LPCTSTR lpszWindowName,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID,  \n    DWORD dwControlBarStyle=0,  \n    CCreateContext* pContext=NULL);\n```  \n  \n### Parameters  \n [in] `dwStyleEx`  \n The extended styles (see [CWnd::CreateEx](../../mfc/reference/cwnd-class.md#cwnd__createex) for more information).  \n  \n [in] `lpszClassName`  \n The window class name.  \n  \n [in] `lpszWindowName`  \n The window name.  \n  \n [in] `dwStyle`  \n The window style (see [CWnd::CreateEx](../../mfc/reference/cwnd-class.md#cwnd__createex)).  \n  \n [in] `rect`  \n The initial rectangle.  \n  \n [in] `pParentWnd`  \n A pointer to the parent window.  \n  \n [in] `nID`  \n Specifies the pane ID. Must be unique.  \n  \n [in] `dwControlBarStyle`  \n Style flags for panes.  \n  \n [in] `pContext`  \n A pointer to `CcreateContext`  \n  \n### Return Value  \n `TRUE` if the pane is created successfully; otherwise `FALSE`.  \n  \n### Remarks  \n Creates a window of class `lpszClassName`. If you specify `WS_CAPTION`, this method clears the `WS_CAPTION` style bit and sets `CBasePane::m_bHasCaption` to `TRUE`, because the library does not support panes with captions.  \n  \n You can use any combination of child window styles and MFC control bar (CBRS_) styles.  \n  \n The library adds several new styles for panes. The following table describes the new styles:  \n  \n|Style|Description|  \n|-----------|-----------------|  \n|`AFX_CBRS_FLOAT`|The pane can float.|  \n|`AFX_CBRS_AUTOHIDE`|The pane supports auto-hide mode|  \n|`AFX_CBRS_RESIZE`|The pane can be resized. **Important:**  This style is not implemented.|  \n|`AFX_CBRS_CLOSE`|The pane can be closed.|  \n|`AFX_CBRS_AUTO_ROLLUP`|The pane can be rolled up when it floats.|  \n|`AFX_CBRS_REGULAR_TABS`|When one pane docks to another pane that has this style, a regular tabbed window is created. (For more information, see [CTabbedPane Class](../../mfc/reference/ctabbedpane-class.md).)|  \n|`AFX_CBRS_OUTLOOK_TABS`|When one pane docks to another pane that has this style, an Outlook-style tabbed window is created. (For more information, see [CMFCOutlookBar Class](../../mfc/reference/cmfcoutlookbar-class.md).)|  \n  \n To use the new styles, specify them in `dwControlBarStyle`.  \n  \n##  <a name=\"cbasepane__dockpane\"></a>  CBasePane::DockPane  \n Docks a pane to another pane or to a frame window.  \n  \n```  \nvirtual BOOL DockPane(\n    CBasePane* pDockBar,  \n    LPCRECT lpRect,  \n    AFX_DOCK_METHOD dockMethod);\n```  \n  \n### Parameters  \n [in] `pDockBar`  \n A pointer to another pane.  \n  \n [in] `lpRect`  \n Specifies the destination rectangle.  \n  \n [in] `dockMethod`  \n Specifies the docking method.  \n  \n### Return Value  \n `TRUE` if the control bar was docked successfully; otherwise, `FALSE`.  \n  \n### Remarks  \n Call this function to dock a pane to another pane or a dock bar ( [CDockSite Class](../../mfc/reference/cdocksite-class.md)) that is specified by `pDockBar`, or to a main frame if `pDockBar` is `NULL`.  \n  \n `dockMethod` specifies how the pane is docked. See [CPane::DockPane](../../mfc/reference/cpane-class.md#cpane__dockpane) for a list of possible values.  \n  \n##  <a name=\"cbasepane__dockpaneusingrtti\"></a>  CBasePane::DockPaneUsingRTTI  \n Docks the pane by using run-time type information.  \n  \n```  \nvoid DockPaneUsingRTTI(BOOL bUseDockSite);\n```  \n  \n### Parameters  \n [in] `bUseDockSite`  \n If `TRUE`, dock to the docking site. If `FALSE`, dock to the parent frame.  \n  \n##  <a name=\"cbasepane__docktoframewindow\"></a>  CBasePane::DockToFrameWindow  \n Docks a dockable pane to a frame.  \n  \n```  \nvirtual BOOL DockToFrameWindow(\n    DWORD dwAlignment,  \n    LPCRECT lpRect = NULL,  \n    DWORD dwDockFlags = DT_DOCK_LAST,  \n    CBasePane* pRelativeBar = NULL,  \n    int nRelativeIndex = -1,  \n    BOOL bOuterEdge = FALSE);\n```  \n  \n### Parameters  \n [in] `dwAlignment`  \n The side of the parent frame that you want to dock the pane to.  \n  \n [in] `lpRect`  \n The desired size.  \n  \n [in] `dwDockFlags`  \n Ignored.  \n  \n [in] `pRelativeBar`  \n Ignored.  \n  \n [in] `nRelativeIndex`  \n Ignored.  \n  \n [in] `bOuterEdge`  \n If `TRUE` and there are other dockable panes at the side specified by `dwAlignment`, the pane is docked outside the other panes, closer to the edge of the parent frame. If `FALSE`, the pane is docked closer to the center of the client area.  \n  \n### Return Value  \n `TRUE` if the method was successful; otherwise `FALSE`.  \n  \n### Remarks  \n This method fails if a pane divider ( [CPaneDivider Class](../../mfc/reference/cpanedivider-class.md)) cannot be created. Otherwise, it always returns `TRUE`.  \n  \n##  <a name=\"cbasepane__doesallowdyninsertbefore\"></a>  CBasePane::DoesAllowDynInsertBefore  \n Determines whether another pane can be dynamically inserted between this pane and the parent frame.  \n  \n```  \nvirtual BOOL DoesAllowDynInsertBefore() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if a user can insert another pane; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method to determine whether a user can dynamically insert a pane before this pane.  \n  \n For example, suppose your application creates a pane docked at the left side of the frame (such as the Outlook bar). To prevent the user from docking another pane to the left of the first pane, override this method and return `FALSE`.  \n  \n We recommend that you override this method and return `FALSE` for non-floating panes derived from [CDockablePane Class](../../mfc/reference/cdockablepane-class.md).  \n  \n The default implementation returns `TRUE`.  \n  \n##  <a name=\"cbasepane__dopaint\"></a>  CBasePane::DoPaint  \n Fills the background of the pane.  \n  \n```  \nvirtual void DoPaint(CDC* pDC);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n### Remarks  \n The default implementation calls the current visual manager to fill the background ( [CMFCVisualManager::OnFillBarBackground](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__onfillbarbackground)).  \n  \n##  <a name=\"cbasepane__enabledocking\"></a>  CBasePane::EnableDocking  \n Enables docking of the pane to the main frame.  \n  \n```  \nvirtual void EnableDocking(DWORD dwAlignment);\n```  \n  \n### Parameters  \n [in] `dwAlignment`  \n Specifies the docking alignment to enable.  \n  \n### Remarks  \n Call this method to enable docking alignment to the main frame. You can pass a combination of `CBRS_ALIGN_` flags (for more information, see [CControlBar::EnableDocking](../../mfc/reference/ccontrolbar-class.md#ccontrolbar__enabledocking)).  \n  \n `EnableDocking` sets the internal flag `CBasePane::m_dwEnabledAlignment` and the framework checks this flag when a pane is docked.  \n  \n Call [CBasePane::GetEnabledAlignment](#cbasepane__getenabledalignment) to determine the docking alignment for a pane.  \n  \n##  <a name=\"cbasepane__enablegripper\"></a>  CBasePane::EnableGripper  \n Enables or disables the gripper. If the gripper is enabled, the user can drag it to reposition the pane.  \n  \n```  \nvirtual void EnableGripper(BOOL bEnable);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable the gripper; `FALSE` to disable it.  \n  \n### Remarks  \n The framework uses this method to enable a gripper instead of using the `WS_CAPTION` style.  \n  \n##  <a name=\"cbasepane__floatpane\"></a>  CBasePane::FloatPane  \n Floats the pane.  \n  \n```  \nvirtual BOOL FloatPane(\n    CRect rectFloat,  \n    AFX_DOCK_METHOD dockMethod=DM_UNKNOWN,  \n    bool bShow=true);\n```  \n  \n### Parameters  \n [in] `rectFloat`  \n Specifies the screen coordinates where the floating pane appears.  \n  \n [in] `dockMethod`  \n Specifies the dock method to use to float the pane.  \n  \n [in] `bShow`  \n Specifies whether the floating pane is visible ( `TRUE`) or hidden ( `FALSE`).  \n  \n### Return Value  \n `TRUE` if the pane was floated successfully; otherwise `FALSE`.  \n  \n### Remarks  \n Call this method to float a pane at the screen position specified by `rectFloat`.  \n  \n##  <a name=\"cbasepane__get_acchelptopic\"></a>  CBasePane::get_accHelpTopic  \n The framework calls this method to retrieve the full path of the `WinHelp` file that is associated with the specified object and the identifier of the appropriate topic in that file.  \n  \n```  \nvirtual HRESULT get_accHelpTopic(\n    BSTR* pszHelpFile,  \n    VARIANT varChild,  \n    long* pidTopic);\n```  \n  \n### Parameters  \n [in] `pszHelpFile`  \n Address of a `BSTR` that receives the full path of the `WinHelp` file that is associated with the specified object, if any.  \n  \n [in] `varChild`  \n Specifies whether the Help topic to be retrieved is that of the object or one of the child elements of the object. This parameter can be either `CHILDID_SELF` (to obtain a Help topic for the object) or a child ID (to obtain a Help topic for one of the child elements of the object).  \n  \n [in] `pidTopic`  \n Identifies the `Help` file topic that is associated with the specified object.  \n  \n### Return Value  \n `CBasePane` does not implement this method. Therefore, `CBasePane::get_accHelpTopic` always returns `S_FALSE`.  \n  \n### Remarks  \n This function is part of the Active Accessibility support in MFC. Override this function in a derived class to provide help information about your object.  \n  \n##  <a name=\"cbasepane__get_accselection\"></a>  CBasePane::get_accSelection  \n The framework calls this method to retrieve the selected children of this object.  \n  \n```  \nvirtual HRESULT get_accSelection(VARIANT* pvarChildren);\n```  \n  \n### Parameters  \n [in] `pvarChildren`  \n Receives information that identifies the selected children.  \n  \n### Return Value  \n `CBasePane` does not implement this method. If `pvarChildren` is `NULL`, this method returns `E_INVALIDARG`. Otherwise, this method returns `DISP_E_MEMBERNOTFOUND`.  \n  \n### Remarks  \n This function is part of the Active Accessibility support in MFC. Override this function in a derived class if you have non-windowed user interface elements other than windowless ActiveX controls.  \n  \n##  <a name=\"cbasepane__getcaptionheight\"></a>  CBasePane::GetCaptionHeight  \n Returns the caption height.  \n  \n```  \nvirtual int GetCaptionHeight() const;\n\n \n```  \n  \n### Return Value  \n The caption height.  \n  \n##  <a name=\"cbasepane__getcontrolbarstyle\"></a>  CBasePane::GetControlBarStyle  \n Returns the control bar style.  \n  \n```  \nvirtual DWORD GetControlBarStyle() const \n```  \n  \n### Return Value  \n A bitwise-OR combination of AFX_CBRS_ flags.  \n  \n### Remarks  \n The return value is a combination of the following possible values.  \n  \n|Style|Description|  \n|-----------|-----------------|  \n|`AFX_CBRS_FLOAT`|Makes the control bar float.|  \n|`AFX_CBRS_AUTOHIDE`|Enables auto-hide mode.|  \n|`AFX_CBRS_RESIZE`|Enables resizing of the control bar. When this flag is set, the control bar can be placed in a dockable pane.|  \n|`AFX_CBRS_CLOSE`|Enables hiding of the control bar.|  \n  \n##  <a name=\"cbasepane__getcurrentalignment\"></a>  CBasePane::GetCurrentAlignment  \n Returns the current pane alignment.  \n  \n```  \nvirtual DWORD GetCurrentAlignment() const;\n\n \n```  \n  \n### Return Value  \n The current alignment of the control bar. The following table shows the possible values:  \n  \n|Value|Alignment|  \n|-----------|---------------|  \n|`CBRS_ALIGN_LEFT`|Left alignment.|  \n|`CBRS_ALIGN_RIGHT`|Right alignment.|  \n|`CBRS_ALIGN_TOP`|Top alignment.|  \n|`CBRS_ALIGN_BOTTOM`|Bottom alignment.|  \n  \n##  <a name=\"cbasepane__getdockingmode\"></a>  CBasePane::GetDockingMode  \n Returns the current docking mode for the pane.  \n  \n```  \nvirtual AFX_DOCK_TYPE GetDockingMode() const;\n\n \n```  \n  \n### Return Value  \n DT_STANDARD if dragging the pane is indicated on the screen by a drag rectangle. DT_IMMEDIATE if the contents of the pane are dragged.  \n  \n### Remarks  \n The framework calls this method to determine the current docking mode of the pane.  \n  \n If `CBasePane::m_dockMode` is undefined (DT_UNDEFINED), then the docking mode is taken from the global docking mode ( `AFX_GLOBAL_DATA::m_dockModeGlobal`).  \n  \n By setting `m_dockMode` or overriding `GetDockingMode` you can control the docking mode for each pane.  \n  \n##  <a name=\"cbasepane__getdocksiteframewnd\"></a>  CBasePane::GetDockSiteFrameWnd  \n Returns a pointer to the [CDockingPanesRow](../../mfc/reference/cdockingpanesrow-class.md)object where the pane is docked.  \n  \n```  \nvirtual CWnd* GetDockSiteFrameWnd() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the dock site of the pane.  \n  \n### Remarks  \n Call this method to retrieve a pointer to the dock site of the pane. The dock site can be either a main frame window if the pane is docked to the main frame, or a mini-frame window if the pane is floating.  \n  \n##  <a name=\"cbasepane__getenabledalignment\"></a>  CBasePane::GetEnabledAlignment  \n Returns the CBRS_ALIGN_ styles that are applied to the pane.  \n  \n```  \nvirtual DWORD GetEnabledAlignment() const;\n\n \n```  \n  \n### Return Value  \n A combination of CBRS_ALIGN_ styles. The following table shows the possible styles:  \n  \n|Flag|Enabled alignment|  \n|----------|-----------------------|  \n|`CBRS_ALIGN_LEFT`|Left.|  \n|`CBRS_ALIGN_RIGHT`|Right.|  \n|`CBRS_ALIGN_TOP`|Top.|  \n|`CBRS_ALIGN_BOTTOM`|Bottom.|  \n|`CBRS_ALIGN_ANY`|Combination of all flags.|  \n  \n### Remarks  \n Call this method to determine the enabled alignment for the pane. Enabled alignment means the sides of the main frame window that a pane can be docked to.  \n  \n Enable docking alignment by using [CBasePane::EnableDocking](#cbasepane__enabledocking).  \n  \n##  <a name=\"cbasepane__getmfcstyle\"></a>  CBasePane::GetMFCStyle  \n Returns the pane styles that are specific to MFC.  \n  \n```  \nvirtual DWORD GetMFCStyle() const;\n\n \n```  \n  \n### Return Value  \n A combination of library-specific (AFX_CBRS_) pane styles.  \n  \n##  <a name=\"cbasepane__getpaneicon\"></a>  CBasePane::GetPaneIcon  \n Returns a handle to the pane icon.  \n  \n```  \nvirtual HICON GetPaneIcon(BOOL bBigIcon);\n```  \n  \n### Parameters  \n [in] `bBigIcon`  \n Specifies a 32 pixel by 32 pixel icon if `TRUE`; specifies a 16 pixel by 16 pixel icon if `FALSE`.  \n  \n### Return Value  \n A handle to the pane icon. If unsuccessful, returns `NULL`.  \n  \n### Remarks  \n The default implementation calls [CWnd::GetIcon](../../mfc/reference/cwnd-class.md#cwnd__geticon).  \n  \n##  <a name=\"cbasepane__getpanerow\"></a>  CBasePane::GetPaneRow  \n Returns a pointer to the [CDockingPanesRow](../../mfc/reference/cdockingpanesrow-class.md)object where the pane is docked.  \n  \n```  \nCDockingPanesRow* GetPaneRow();\n```  \n  \n### Return Value  \n A pointer to `CDockingPanesRow` if the pane is docked, or `NULL` if it is floating.  \n  \n### Remarks  \n Call this method to access the row where a pane is docked. For example, to arrange the panes in a particular row, call `GetPaneRow` and then call [CDockingPanesRow::ArrangePanes](../../mfc/reference/cdockingpanesrow-class.md#cdockingpanesrow__arrangepanes).  \n  \n##  <a name=\"cbasepane__getpanestyle\"></a>  CBasePane::GetPaneStyle  \n Returns the pane style.  \n  \n```  \nvirtual DWORD GetPaneStyle() const;\n\n \n```  \n  \n### Return Value  \n A combination of control bar styles (including CBRS_ styles) that was set by the [CBasePane::SetPaneStyle](#cbasepane__setpanestyle) method at creation time.  \n  \n##  <a name=\"cbasepane__getparentdocksite\"></a>  CBasePane::GetParentDockSite  \n Returns a pointer to the parent dock site.  \n  \n```  \nvirtual CDockSite* GetParentDockSite() const;\n\n \n```  \n  \n### Return Value  \n The parent dock site.  \n  \n##  <a name=\"cbasepane__getparentminiframe\"></a>  CBasePane::GetParentMiniFrame  \n Returns a pointer to the parent mini-frame window.  \n  \n```  \nvirtual CPaneFrameWnd* GetParentMiniFrame(BOOL bNoAssert=FALSE) const;\n\n \n```  \n  \n### Parameters  \n [in] `bNoAssert`  \n If `TRUE`, this method does not check for non-valid pointers. If you call this method when your application exits, set this parameter to `TRUE`.  \n  \n### Return Value  \n A valid pointer to the parent mini-frame window if the pane is floating; otherwise `NULL`.  \n  \n### Remarks  \n Call this function to retrieve a pointer to the parent mini-frame window. This method iterates through all parents and checks for an object derived from [CPaneFrameWnd Class](../../mfc/reference/cpaneframewnd-class.md).  \n  \n Use `GetParentMiniFrame` to determine whether the pane is floating.  \n  \n##  <a name=\"cbasepane__getparenttabbedpane\"></a>  CBasePane::GetParentTabbedPane  \n Returns a pointer to the parent tabbed pane.  \n  \n```  \nCBaseTabbedPane* GetParentTabbedPane() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the parent tabbed pane if it exists; otherwise `NULL`.  \n  \n##  <a name=\"cbasepane__getparenttabwnd\"></a>  CBasePane::GetParentTabWnd  \n Returns a pointer to the parent window that is inside a tab.  \n  \n```  \nCMFCBaseTabCtrl* GetParentTabWnd(HWND& hWndTab) const;\n\n \n```  \n  \n### Parameters  \n [out] `hWndTab`  \n If the return value is not `NULL`, this parameter contains the handle to the parent tabbed window.  \n  \n### Return Value  \n A valid pointer to the parent tabbed window or `NULL`.  \n  \n### Remarks  \n Use this function to retrieve a pointer to the parent tabbed window. Sometimes it is not enough to call `GetParent`, because a pane may be inside a docking wrapper ( [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md)) or inside a pane adapter ( [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md)). By using `GetParentTabWnd` you will be able to retrieve a valid pointer in those cases (assuming that the parent is a tabbed window).  \n  \n##  <a name=\"cbasepane__getrecentvisiblestate\"></a>  CBasePane::GetRecentVisibleState  \n The framework calls this method when a pane is restored from an archive.  \n  \n```  \nvirtual BOOL GetRecentVisibleState() const;\n\n \n```  \n  \n### Return Value  \n A `BOOL` that specifies the recent visible state. If `TRUE`, the pane was visible when serialized and should be visible when restored. If `FALSE`, the pane was hidden when serialized and should be hidden when restored.  \n  \n##  <a name=\"cbasepane__hideinprintpreviewmode\"></a>  CBasePane::HideInPrintPreviewMode  \n Specifies whether the pane is hidden in print preview.  \n  \n```  \nvirtual BOOL HideInPrintPreviewMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is not shown in print preview; otherwise, `FALSE`.  \n  \n### Remarks  \n Base panes are not shown in print preview. Therefore, this method always returns `TRUE`.  \n  \n##  <a name=\"cbasepane__insertpane\"></a>  CBasePane::InsertPane  \n Registers the specified pane with the docking manager.  \n  \n```  \nBOOL InsertPane(\n    CBasePane* pControlBar,  \n    CBasePane* pTarget,  \n    BOOL bAfter = TRUE);\n```  \n  \n### Parameters  \n [in] `pControlBar`  \n A pointer to the pane to insert.  \n  \n [in] `pTarget`  \n A pointer to the adjacent pane.  \n  \n [in] `bAfter`  \n If `TRUE`, `pControlBar` is inserted after `pTarget`. If `FALSE`, `pControlBar` is inserted before `pTarget`.  \n  \n### Return Value  \n `TRUE` if the method succeeds, `FALSE` otherwise.  \n  \n##  <a name=\"cbasepane__isaccessibilitycompatible\"></a>  CBasePane::IsAccessibilityCompatible  \n Specifies whether the pane supports Active Accessibility.  \n  \n```  \nvirtual BOOL IsAccessibilityCompatible();\n```  \n  \n### Return Value  \n `TRUE` if the pane supports Active Accessibility; otherwise, `FALSE`.  \n  \n##  <a name=\"cbasepane__isautohidemode\"></a>  CBasePane::IsAutoHideMode  \n Determines whether a pane is in auto-hide mode.  \n  \n```  \nvirtual BOOL IsAutoHideMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is in auto-hide mode; otherwise, `FALSE`.  \n  \n### Remarks  \n Base panes cannot auto-hide. This method always returns `FALSE`.  \n  \n##  <a name=\"cbasepane__isdialogcontrol\"></a>  CBasePane::IsDialogControl  \n Specifies whether the pane is a dialog box control.  \n  \n```  \nBOOL IsDialogControl() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is a dialog box control; otherwise, `FALSE`.  \n  \n### Remarks  \n The framework uses this method to ensure layout consistency for all panes.  \n  \n##  <a name=\"cbasepane__isdocked\"></a>  CBasePane::IsDocked  \n Determines whether the pane is docked.  \n  \n```  \nvirtual BOOL IsDocked() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the parent of the pane is not a mini-frame or if the pane is floating in a mini-frame with another pane; otherwise, `FALSE`.  \n  \n##  <a name=\"cbasepane__isfloating\"></a>  CBasePane::IsFloating  \n Determines whether the pane is floating.  \n  \n```  \nvirtual BOOL IsFloating() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is floating; otherwise, `FALSE`.  \n  \n### Remarks  \n This method returns the opposite value of [CBasePane::IsDocked](#cbasepane__isdocked).  \n  \n##  <a name=\"cbasepane__ishorizontal\"></a>  CBasePane::IsHorizontal  \n Determines whether the pane is docked horizontally.  \n  \n```  \nvirtual BOOL IsHorizontal() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is docked horizontally; otherwise `FALSE`.  \n  \n### Remarks  \n The default implementation checks the current docking alignment for `CBRS_ORIENT_HORZ`.  \n  \n##  <a name=\"cbasepane__isinfloatingmultipaneframewnd\"></a>  CBasePane::IsInFloatingMultiPaneFrameWnd  \n Specifies whether the pane is in a multi-pane frame window ( [CMultiPaneFrameWnd Class](../../mfc/reference/cmultipaneframewnd-class.md)).  \n  \n```  \nvirtual BOOL IsInFloatingMultiPaneFrameWnd() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is in a multi-pane frame window; otherwise, `FALSE`.  \n  \n### Remarks  \n Only dockable panes can float in a multi-pane frame window. Therefore, `CBasePane::IsInFloatingMultiPaneFrameWnd` always returns `FALSE`.  \n  \n##  <a name=\"cbasepane__ismditabbed\"></a>  CBasePane::IsMDITabbed  \n Determines whether the pane has been added to an MDI child window as a tabbed document.  \n  \n```  \nvirtual BOOL IsMDITabbed() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane was added to an MDI child window as a tabbed document; otherwise, `FALSE`.  \n  \n##  <a name=\"cbasepane__ispanevisible\"></a>  CBasePane::IsPaneVisible  \n Specifies whether the `WS_VISIBLE` flag is set for the pane.  \n  \n```  \nBOOL IsPaneVisible() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if `WS_VISIBLE` is set; otherwise, `FALSE`.  \n  \n### Remarks  \n Use [CBasePane::IsVisible](#cbasepane__isvisible) to determine pane visibility.  \n  \n##  <a name=\"cbasepane__ispointneardocksite\"></a>  CBasePane::IsPointNearDockSite  \n Determines whether a specified point is near the dock site.  \n  \n```  \nBOOL IsPointNearDockSite(\n    CPoint point,  \n    DWORD& dwBarAlignment,  \n    BOOL& bOuterEdge) const;\n\n \n```  \n  \n### Parameters  \n [in] `point`  \n The specified point.  \n  \n [out] `dwBarAlignment`  \n Specifies which edge the point is near. Possible values are `CBRS_ALIGN_LEFT`, `CBRS_ALIGN_RIGHT`, `CBRS_ALIGN_TOP`, and `CBRS_ALIGN_BOTTOM`  \n  \n [out] `bOuterEdge`  \n `TRUE` if the point is near the outer border of the dock site; `FALSE` otherwise.  \n  \n### Return Value  \n `TRUE` if the point is near the dock site; otherwise `FALSE`.  \n  \n### Remarks  \n The point is near the dock site when it is within the sensitivity set in the docking manager. The default sensitivity is 15 pixels.  \n  \n##  <a name=\"cbasepane__isresizable\"></a>  CBasePane::IsResizable  \n Determines whether the pane can be resized.  \n  \n```  \nvirtual BOOL IsResizable() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane can be resized by the user; otherwise, `FALSE`.  \n  \n### Remarks  \n Panes of [CDockablePane Class](../../mfc/reference/cdockablepane-class.md) can be resized.  \n  \n The status bar ( [CMFCStatusBar Class](../../mfc/reference/cmfcstatusbar-class.md)) and the dock bar ( [CDockSite Class](../../mfc/reference/cdocksite-class.md)) cannot be resized.  \n  \n##  <a name=\"cbasepane__isrestoredfromregistry\"></a>  CBasePane::IsRestoredFromRegistry  \n Determines whether the pane is restored from the registry.  \n  \n```  \nvirtual BOOL IsRestoredFromRegistry() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is restored from the registry; otherwise, `FALSE`.  \n  \n##  <a name=\"cbasepane__istabbed\"></a>  CBasePane::IsTabbed  \n Determines whether the pane has been inserted in the tab control of a tabbed window.  \n  \n```  \nvirtual BOOL IsTabbed() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the control bar is inserted in a tab of a tabbed window; otherwise `FALSE`.  \n  \n### Remarks  \n This method retrieves a pointer to the immediate parent and determines if the parent's runtime class is [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md).  \n  \n##  <a name=\"cbasepane__isvisible\"></a>  CBasePane::IsVisible  \n Determines whether the pane is visible.  \n  \n```  \nvirtual BOOL IsVisible() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is visible; otherwise `FALSE`.  \n  \n### Remarks  \n Use this method to determine the visibility of a pane. Do not use `::IsWindowVisible`.  \n  \n If the pane is not tabbed (see [CBasePane::IsTabbed](#cbasepane__istabbed)), this method checks for the `WS_VISIBLE` style. If the pane is tabbed, this method checks the visibility of the parent tabbed window. If the parent window is visible, the function checks the visibility of the pane tab using [CMFCBaseTabCtrl::IsTabVisible](../../mfc/reference/cmfcbasetabctrl-class.md#cmfcbasetabctrl__istabvisible).  \n  \n##  <a name=\"cbasepane__loadstate\"></a>  CBasePane::LoadState  \n Loads the pane's state from the registry.  \n  \n```  \nvirtual BOOL LoadState(\n    LPCTSTR lpszProfileName=NULL,  \n    int nIndex=-1,  \n    UINT uiID=(UINT)-1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n Profile name.  \n  \n [in] `nIndex`  \n Profile index.  \n  \n [in] `uiID`  \n Pane ID.  \n  \n### Return Value  \n `TRUE` if the pane state was loaded successfully; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method to load the pane state from the registry. Override it in a derived class to load additional information saved by [CBasePane::SaveState](#cbasepane__savestate).  \n  \n##  <a name=\"cbasepane__movewindow\"></a>  CBasePane::MoveWindow  \n Moves the pane.  \n  \n```  \nvirtual HDWP MoveWindow(\n    CRect& rect,  \n    BOOL bRepaint = TRUE,  \n    HDWP hdwp = NULL);\n```  \n  \n### Parameters  \n [in] `rect`  \n A rectangle specifying the new location and size of the pane.  \n  \n [in] `bRepaint`  \n If `TRUE`, the pane is repainted. If `FALSE`, the pane is not repainted.  \n  \n [in] `hdwp`  \n Handle to a deferred window position structure.  \n  \n### Return Value  \n A handle to a deferred window position structure, or `NULL`.  \n  \n### Remarks  \n If you pass `NULL` as the `hdwp` parameter, this method moves the window normally. If you pass a handle, this method performs a deferred window move. You can obtain a handle by calling [BeginDeferWindowPos](http://msdn.microsoft.com/library/windows/desktop/ms632672) or by storing the return value of a previous call to this method.  \n  \n##  <a name=\"cbasepane__onafterchangeparent\"></a>  CBasePane::OnAfterChangeParent  \n Called by the framework after the pane's parent changes.  \n  \n```  \nvirtual void OnAfterChangeParent(CWnd* pWndOldParent);\n```  \n  \n### Parameters  \n [in] `pWndOldParent`  \n A pointer to the previous parent.  \n  \n### Remarks  \n The framework calls this method after the pane's parent changes, usually because of a docking or floating operation.  \n  \n The default implementation does nothing.  \n  \n##  <a name=\"cbasepane__onbeforechangeparent\"></a>  CBasePane::OnBeforeChangeParent  \n Called by the framework just before the pane changes its parent window.  \n  \n```  \nvirtual void OnBeforeChangeParent(\n    CWnd* pWndNewParent,  \n    BOOL bDelay=FALSE);\n```  \n  \n### Parameters  \n [in] `pWndNewParent`  \n A pointer to a new parent window.  \n  \n [in] `bDelay`  \n Specifies whether layout adjustments must be delayed.  \n  \n### Remarks  \n The framework calls this method just before the pane's parent changes, usually because of a docking, floating, or auto-hide operation.  \n  \n The default implementation does nothing.  \n  \n##  <a name=\"cbasepane__ondrawcaption\"></a>  CBasePane::OnDrawCaption  \n The framework calls this method when the caption is drawn.  \n  \n```  \nvirtual void OnDrawCaption();\n```  \n  \n### Remarks  \n This method has no functionality for the `CBasePane` class.  \n  \n##  <a name=\"cbasepane__onmovepanedivider\"></a>  CBasePane::OnMovePaneDivider  \n This method is currently not used.  \n  \n```  \nvirtual void OnMovePaneDivider(CPaneDivider*);\n```  \n  \n### Parameters  \n [in] `CPaneDivider*`  \n Not used.  \n  \n##  <a name=\"cbasepane__onpanecontextmenu\"></a>  CBasePane::OnPaneContextMenu  \n Called by the framework when it builds a menu that has a list of panes.  \n  \n```  \nvirtual void OnPaneContextMenu(\n    CWnd* pParentFrame,  \n    CPoint point);\n```  \n  \n### Parameters  \n [in] `pParentFrame`  \n A pointer to the parent frame.  \n  \n [in] `point`  \n Specifies the location of the shortcut menu.  \n  \n### Remarks  \n `OnPaneContextMenu` calls the docking manager, which maintains the list of panes that belong to the current frame window. This method adds the names of the panes to a shortcut menu and displays it. The commands on the menu show or hide individual panes.  \n  \n Override this method to customize this behavior.  \n  \n##  <a name=\"cbasepane__onremovefromminiframe\"></a>  CBasePane::OnRemoveFromMiniFrame  \n Called by the framework when a pane is removed from its parent mini frame window.  \n  \n```  \nvirtual void OnRemoveFromMiniFrame(CPaneFrameWnd* pMiniFrame);\n```  \n  \n### Parameters  \n [in] `pMiniFrame`  \n A pointer to a mini-frame window from which the pane is removed.  \n  \n### Remarks  \n The framework calls this method when a pane is removed from its parent mini-frame window (as a result of docking, for example).  \n  \n The default implementation does nothing.  \n  \n##  <a name=\"cbasepane__onsetaccdata\"></a>  CBasePane::OnSetAccData  \n `CBasePane` does not use this method.  \n  \n```  \nvirtual BOOL OnSetAccData(long lVal);\n```  \n  \n### Parameters  \n [in] `lVal`  \n Not used.  \n  \n### Return Value  \n This method always returns `TRUE`.  \n  \n### Remarks  \n  \n##  <a name=\"cbasepane__panefrompoint\"></a>  CBasePane::PaneFromPoint  \n Returns the pane that contains the given point.  \n  \n```  \nCBasePane* PaneFromPoint(\n    CPoint point,  \n    int nSensitivity,  \n    bool bExactBar = false,  \n    CRuntimeClass* pRTCBarType = NULL) const;\n\n \n```  \n  \n### Parameters  \n [in] `point`  \n Specifies the point, in screen coordinates, to check.  \n  \n [in] `nSensitivity`  \n Increase the search area by this amount. A pane will satisfy the search criteria if the given point falls in the increased area.  \n  \n [in] `bExactBar`  \n `TRUE` to ignore the `nSensitivity` parameter; otherwise, `FALSE`.  \n  \n [in] `pRTCBarType`  \n If not `NULL`, the method searches only panes of the specified type.  \n  \n### Return Value  \n The `CBasePane`-derived object that contains the given point, or `NULL` if no pane was found.  \n  \n##  <a name=\"cbasepane__recalclayout\"></a>  CBasePane::RecalcLayout  \n `CBasePane` does not use this method.  \n  \n```  \nvirtual void RecalcLayout();\n```  \n  \n##  <a name=\"cbasepane__removepanefromdockmanager\"></a>  CBasePane::RemovePaneFromDockManager  \n Unregisters a pane and removes it from the list in the docking manager.  \n  \n```  \nvoid RemovePaneFromDockManager(\n    CBasePane* pBar,  \n    BOOL bDestroy = TRUE,  \n    BOOL bAdjustLayout = FALSE,  \n    BOOL bAutoHide = FALSE,  \n    CBasePane* pBarReplacement = NULL);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to a pane to be removed.  \n  \n [in] `bDestroy`  \n If `TRUE`, the removed pane is destroyed.  \n  \n [in] `bAdjustLayout`  \n If `TRUE`, adjust the docking layout immediately.  \n  \n [in] `bAutoHide`  \n If `TRUE`, the docking layout is related to the list of autohide bars. If `FALSE`, the docking layout is related to the list of regular panes.  \n  \n [in] `pBarReplacement`  \n A pointer to a pane that replaces the removed pane.  \n  \n##  <a name=\"cbasepane__savestate\"></a>  CBasePane::SaveState  \n Saves the pane's state to the registry.  \n  \n```  \nvirtual BOOL SaveState(\n    LPCTSTR lpszProfileName=NULL,  \n    int nIndex=-1,  \n    UINT uiID=(UINT)-1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n Profile name.  \n  \n [in] `nIndex`  \n Profile index.  \n  \n [in] `uiID`  \n Pane ID.  \n  \n### Return Value  \n `TRUE` if the state was saved successfully; otherwise `FALSE`.  \n  \n### Remarks  \n The framework calls this method when it saves the pane's state to the registry. Override `SaveState` in a derived class to store additional information.  \n  \n##  <a name=\"cbasepane__selectdefaultfont\"></a>  CBasePane::SelectDefaultFont  \n Selects the default font for a given device context.  \n  \n```  \nCFont* SelectDefaultFont(CDC* pDC);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A device context.  \n  \n### Return Value  \n A pointer to the default [CFont Class](../../mfc/reference/cfont-class.md) object.  \n  \n##  <a name=\"cbasepane__setcontrolbarstyle\"></a>  CBasePane::SetControlBarStyle  \n Sets the control bar style.  \n  \n```  \nvirtual void SetControlBarStyle(DWORD dwNewStyle);\n```  \n  \n### Parameters  \n [in] `dwNewStyle`  \n A bitwise-OR combination of the following possible values.  \n  \n|Style|Description|  \n|-----------|-----------------|  \n|`AFX_CBRS_FLOAT`|Makes the control bar float.|  \n|`AFX_CBRS_AUTOHIDE`|Enables auto-hide mode.|  \n|`AFX_CBRS_RESIZE`|Enables resizing of the control bar. When this flag is set, the control bar can be placed in a dockable pane.|  \n|`AFX_CBRS_CLOSE`|Enables hiding of the control bar.|  \n  \n##  <a name=\"cbasepane__setdockingmode\"></a>  CBasePane::SetDockingMode  \n Sets the docking mode for the pane.  \n  \n```  \nvoid SetDockingMode(AFX_DOCK_TYPE dockModeNew);\n```  \n  \n### Parameters  \n [in] `dockModeNew`  \n Specifies the new docking mode for the pane.  \n  \n### Remarks  \n The framework supports two docking modes: standard and immediate.  \n  \n In the standard docking mode, panes and mini-frame windows are moved around using a drag rectangle. In the immediate docking mode, control bars and mini-frame windows are moved immediately with their context.  \n  \n Initially, the docking mode is defined globally by [CDockingManager::m_dockModeGlobal](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__m_dockmodeglobal). You can set the docking mode for each pane individually using the `SetDockingMode` method.  \n  \n##  <a name=\"cbasepane__setpanealignment\"></a>  CBasePane::SetPaneAlignment  \n Sets the alignment for the pane.  \n  \n```  \nvirtual void SetPaneAlignment(DWORD dwAlignment);\n```  \n  \n### Parameters  \n [in] `dwAlignment`  \n Specifies the new alignment.  \n  \n### Remarks  \n Usually, the framework calls this method when a pane is docked from one side of the main frame to another.  \n  \n The following table shows the possible values for `dwAlignment`:  \n  \n|Value|Alignment|  \n|-----------|---------------|  \n|`CBRS_ALIGN_LEFT`|Left alignment.|  \n|`CBRS_ALIGN_RIGHT`|Right alignment.|  \n|`CBRS_ALIGN_TOP`|Top alignment.|  \n|`CBRS_ALIGN_BOTTOM`|Bottom alignment.|  \n  \n##  <a name=\"cbasepane__setpanestyle\"></a>  CBasePane::SetPaneStyle  \n Sets the style of the pane.  \n  \n```  \nvirtual void SetPaneStyle(DWORD dwNewStyle);\n```  \n  \n### Parameters  \n [in] `dwNewStyle`  \n Specifies the new style to set.  \n  \n### Remarks  \n This method can be used to set any of the CBRS_ styles that are defined in afxres.h. Because pane style and pane alignment are stored together, set the new style by combining it with the current alignment as follows.  \n  \n `pPane->SetPaneStyle (pPane->GetCurrentAlignment() | CBRS_TOOLTIPS);`  \n  \n##  <a name=\"cbasepane__setwindowpos\"></a>  CBasePane::SetWindowPos  \n Changes the size, position, and Z-order of a pane.  \n  \n```  \nvirtual HDWP SetWindowPos(\n    const CWnd* pWndInsertAfter,  \n    int x,  \n    int y,  \n    int cx,  \n    int cy,  \n    UINT nFlags,  \n    HDWP hdwp = NULL);\n```  \n  \n### Parameters  \n [in] `pWndInsertAfter`  \n Identifies the `CWnd` object that comes before this `CWnd` object in the Z-order. For more information, see [CWnd::SetWindowPos](../../mfc/reference/cwnd-class.md#cwnd__setwindowpos).  \n  \n [in] `x`  \n Specifies the position of the left side of the window.  \n  \n [in] `y`  \n Specifies the position of the top of the window.  \n  \n [in] `cx`  \n Specifies the width of the window.  \n  \n [in] `cy`  \n Specifies the height of the window.  \n  \n [in] `nFlags`  \n Specifies size and position options. For more information, see [CWnd::SetWindowPos](../../mfc/reference/cwnd-class.md#cwnd__setwindowpos).  \n  \n [in] `hdwp`  \n Handle to a structure that contains size and position information for one or more windows.  \n  \n### Return Value  \n A handle to an updated deferred window position structure, or `NULL`.  \n  \n### Remarks  \n If `pWndInsertAfter` is `NULL`, this method calls [CWnd::SetWindowPos](../../mfc/reference/cwnd-class.md#cwnd__setwindowpos). If `pWndInsertAfter` is non- `NULL`, this method calls `DeferWindowPos`.  \n  \n##  <a name=\"cbasepane__showpane\"></a>  CBasePane::ShowPane  \n Shows or hides the pane.  \n  \n```  \nvirtual void ShowPane(\n    BOOL bShow,  \n    BOOL bDelay,  \n    BOOL bActivate);\n```  \n  \n### Parameters  \n [in] `bShow`  \n Specifies whether to show ( `TRUE`) or hide ( `FALSE`) a pane.  \n  \n [in] `bDelay`  \n If `TRUE`, recalculating the docking layout is delayed.  \n  \n [in] `bActivate`  \n If `TRUE`, the pane is active when shown.  \n  \n### Remarks  \n This method shows or hides a pane. Use this method instead of `ShowWindow` because this method notifies the relevant docking managers about changes in the pane's visibility.  \n  \n Use [CBasePane::IsVisible](#cbasepane__isvisible) to determine the current visibility of a pane.  \n  \n##  <a name=\"cbasepane__stretchpane\"></a>  CBasePane::StretchPane  \n Stretches a pane vertically or horizontally.  \n  \n```  \nvirtual CSize StretchPane(\n    int nLength,  \n    BOOL bVert);\n```  \n  \n### Parameters  \n [in] `nLength`  \n The length by which to stretch the pane.  \n  \n [in] `bVert`  \n If `TRUE`, stretch the pane vertically. If `FALSE`, stretch the pane horizontally.  \n  \n### Return Value  \n The size of the stretched pane.  \n  \n##  <a name=\"cbasepane__undockpane\"></a>  CBasePane::UndockPane  \n Removes the pane from the dock site, default slider, or mini-frame window where it is currently docked.  \n  \n```  \nvirtual void UndockPane(BOOL bDelay=FALSE);\n```  \n  \n### Parameters  \n `bDelay`  \n If TRUE, the docking layout is not recalculated immediately.  \n  \n### Remarks  \n Call this method to manipulate the pane state or exclude the pane from the docking layout.  \n  \n If you want to continue to use this pane, call either [CBasePane::DockPane](#cbasepane__dockpane) or [CBasePane::FloatPane](#cbasepane__floatpane) before calling this method.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CPane](../../mfc/reference/cbasepane-class.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)\n"}