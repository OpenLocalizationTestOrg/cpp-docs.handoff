{"nodes":[{"pos":[12,57],"content":"hash_set::key_type (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_set::key_type (STL-CLR) | Microsoft Docs","pos":[0,45]}]},{"content":"hash_set::key_type (STL/CLR)","pos":[641,669]},{"content":"The type of an ordering key.","pos":[670,698]},{"content":"Syntax","pos":[707,713]},{"content":"Remarks","pos":[761,768]},{"pos":[772,827],"content":"The type is a synonym for the template parameter <ph id=\"ph1\">`Key`</ph>.","source":"The type is a synonym for the template parameter `Key`."},{"content":"Example","pos":[836,843]},{"content":"Requirements","pos":[1502,1514]},{"pos":[1518,1548],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_set&gt;","source":"**Header:** \\<cliext/hash_set>"},{"pos":[1555,1576],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1585,1593]},{"content":"hash_set (STL/CLR)","pos":[1598,1616]},{"content":"hash_set::key_compare (STL/CLR)","pos":[1654,1685]},{"content":"hash_set::value_type (STL/CLR)","pos":[1735,1765]}],"content":"---\ntitle: \"hash_set::key_type (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_set::key_type\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"key_type member [STL/CLR]\"\nms.assetid: e79180b5-4fea-4884-93a7-1738d15c6126\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_set::key_type (STL/CLR)\nThe type of an ordering key.  \n  \n## Syntax  \n  \n```  \ntypedef Key key_type;  \n```  \n  \n## Remarks  \n The type is a synonym for the template parameter `Key`.  \n  \n## Example  \n  \n```  \n// cliext_hash_set_key_type.cpp   \n// compile with: /clr   \n#include <cliext/hash_set>   \n  \ntypedef cliext::hash_set<wchar_t> Myhash_set;   \nint main()   \n    {   \n    Myhash_set c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display contents \" a b c\" using key_type   \n    for (Myhash_set::iterator it = c1.begin(); it != c1.end(); ++it)   \n        {   // store element in key_type object   \n        Myhash_set::key_type val = *it;   \n  \n        System::Console::Write(\" {0}\", val);   \n        }   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \na b c  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_set (STL/CLR)](../dotnet/hash-set-stl-clr.md)   \n [hash_set::key_compare (STL/CLR)](../dotnet/hash-set-key-compare-stl-clr.md)   \n [hash_set::value_type (STL/CLR)](../dotnet/hash-set-value-type-stl-clr.md)"}