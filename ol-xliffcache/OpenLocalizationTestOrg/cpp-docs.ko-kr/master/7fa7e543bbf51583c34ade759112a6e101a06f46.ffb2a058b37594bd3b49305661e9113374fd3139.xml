{"nodes":[{"pos":[12,51],"content":"binary_function Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"binary_function Struct | Microsoft Docs","pos":[0,39]}]},{"pos":[709,731],"content":"binary_function Struct","linkify":"binary_function Struct","nodes":[{"content":"binary_function Struct","pos":[0,22]}]},{"content":"An empty base struct that defines types that may be inherited by derived classes that provides a binary function object.","pos":[732,852]},{"pos":[861,867],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1031,1038],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template struct serves as a base for classes that define a member function of the form:","pos":[1042,1133]},{"pos":[1140,1198],"content":"<bpt id=\"p1\">**</bpt>result_type operator()<ept id=\"p1\">**</ept>( <bpt id=\"p2\">**</bpt>constfirst_argument_type&amp;<ept id=\"p2\">**</ept>,","source":"**result_type operator()**( **constfirst_argument_type&**,"},{"pos":[1205,1248],"content":"<bpt id=\"p1\">**</bpt>const second_argument_type&amp;<ept id=\"p1\">**</ept> ) <bpt id=\"p2\">**</bpt>const<ept id=\"p2\">**</ept>","source":"**const second_argument_type&** ) **const**"},{"pos":[1255,1447],"content":"All such binary functions can refer to their first argument type as <bpt id=\"p1\">**</bpt>first_argument_type<ept id=\"p1\">**</ept>, their second argument type as <bpt id=\"p2\">**</bpt>second_argument_type<ept id=\"p2\">**</ept>, and their return type as <bpt id=\"p3\">***</bpt>result_type<ept id=\"p3\">***</ept>.","source":"All such binary functions can refer to their first argument type as **first_argument_type**, their second argument type as **second_argument_type**, and their return type as ***result_type***."},{"pos":[1456,1463],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3053,3065],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3069,3094],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[3101,3119],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3128,3136],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[3140,3250],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[3253,3341],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"binary_function Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.binary_function\"\n  - \"functional/std::binary_function\"\n  - \"std::binary_function\"\n  - \"binary_function\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"binary_function class\"\nms.assetid: 79b6d53d-644c-4add-b0ba-3a5f40f69c60\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# binary_function Struct\nAn empty base struct that defines types that may be inherited by derived classes that provides a binary function object.  \n  \n## Syntax  \n```    \nstruct binary_function {\n   typedef Arg1 first_argument_type;\n   typedef Arg2 second_argument_type;\n   typedef Result result_type;    \n   };  \n ```  \n## Remarks  \n The template struct serves as a base for classes that define a member function of the form:  \n  \n **result_type operator()**( **constfirst_argument_type&**,  \n  \n **const second_argument_type&** ) **const**  \n  \n All such binary functions can refer to their first argument type as **first_argument_type**, their second argument type as **second_argument_type**, and their return type as ***result_type***.  \n  \n## Example  \n  \n```cpp  \n// functional_binary_function.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <functional>  \n#include <algorithm>  \n#include <iostream>  \n  \nusing namespace std;  \n  \ntemplate <class Type> class average:   \nbinary_function<Type, Type, Type>   \n{  \npublic:  \n   result_type operator( ) ( first_argument_type a,   \n                 second_argument_type b )  \n   {  \n      return (result_type) ( ( a + b ) / 2 );  \n   }  \n};  \n  \nint main( )  \n{  \n   vector <double> v1, v2, v3 ( 6 );  \n   vector <double>::iterator Iter1, Iter2, Iter3;  \n  \n   for ( int i = 1 ; i <= 6 ; i++ )  \n      v1.push_back( 11.0 / i );  \n  \n   for ( int j = 0 ; j <= 5 ; j++ )  \n      v2.push_back( -2.0 * j );  \n  \n   cout << \"The vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   cout << \"The vector v2 = ( \" ;  \n   for ( Iter2 = v2.begin( ) ; Iter2 != v2.end( ) ; Iter2++ )  \n      cout << *Iter2 << \" \";  \n   cout << \")\" << endl;  \n  \n   // Finding the element-wise averages of the elements of v1 & v2  \n   transform ( v1.begin( ),  v1.end( ), v2.begin( ), v3.begin ( ),   \n      average<double>( ) );  \n  \n   cout << \"The element-wise averages are: ( \" ;  \n   for ( Iter3 = v3.begin( ) ; Iter3 != v3.end( ) ; Iter3++ )  \n      cout << *Iter3 << \" \";  \n   cout << \")\" << endl;  \n}  \n\\* Output:   \nThe vector v1 = ( 11 5.5 3.66667 2.75 2.2 1.83333 )  \nThe vector v2 = ( -0 -2 -4 -6 -8 -10 )  \nThe element-wise averages are: ( 5.5 1.75 -0.166667 -1.625 -2.9 -4.08333 )  \n*\\  \n  \n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}