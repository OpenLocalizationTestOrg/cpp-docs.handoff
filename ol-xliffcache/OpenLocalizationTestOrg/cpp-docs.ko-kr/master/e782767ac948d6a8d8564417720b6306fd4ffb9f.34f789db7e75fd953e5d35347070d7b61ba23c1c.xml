{"nodes":[{"pos":[12,54],"content":"Inline Assembler Overview | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Inline Assembler Overview | Microsoft Docs","pos":[0,42]}]},{"content":"Inline Assembler Overview","pos":[704,729]},{"content":"Microsoft Specific","pos":[732,750]},{"content":"The inline assembler lets you embed assembly-language instructions in your C and C++ source programs without extra assembly and link steps.","pos":[759,898]},{"content":"The inline assembler is built into the compiler — you don't need a separate assembler such as the Microsoft Macro Assembler (MASM).","pos":[899,1030]},{"content":"Because the inline assembler doesn't require separate assembly and link steps, it is more convenient than a separate assembler.","pos":[1037,1164]},{"content":"Inline assembly code can use any C or C++ variable or function name that is in scope, so it is easy to integrate it with your program's C and C++ code.","pos":[1165,1316]},{"content":"And because the assembly code can be mixed with C and C++ statements, it can do tasks that are cumbersome or impossible in C or C++ alone.","pos":[1317,1455]},{"content":"The <bpt id=\"p1\">[</bpt>__asm<ept id=\"p1\">](../../assembler/inline/asm.md)</ept> keyword invokes the inline assembler and can appear wherever a C or C++ statement is legal.","pos":[1462,1596],"source":"The [__asm](../../assembler/inline/asm.md) keyword invokes the inline assembler and can appear wherever a C or C++ statement is legal."},{"content":"It cannot appear by itself.","pos":[1597,1624]},{"content":"It must be followed by an assembly instruction, a group of instructions enclosed in braces, or, at the very least, an empty pair of braces.","pos":[1625,1764]},{"content":"The term \"<ph id=\"ph1\">`__asm`</ph> block\" here refers to any instruction or group of instructions, whether or not in braces.","pos":[1765,1872],"source":" The term \"`__asm` block\" here refers to any instruction or group of instructions, whether or not in braces."},{"content":"The following code is a simple <ph id=\"ph1\">`__asm`</ph> block enclosed in braces.","pos":[1879,1943],"source":"The following code is a simple `__asm` block enclosed in braces."},{"content":"(The code is a custom function prolog sequence.)","pos":[1944,1992]},{"pos":[2331,2404],"content":"Alternatively, you can put <ph id=\"ph1\">`__asm`</ph> in front of each assembly instruction:","source":"Alternatively, you can put `__asm` in front of each assembly instruction:"},{"pos":[2496,2604],"content":"Since the <ph id=\"ph1\">`__asm`</ph> keyword is a statement separator, you can also put assembly instructions on the same line:","source":"Since the `__asm` keyword is a statement separator, you can also put assembly instructions on the same line:"},{"content":"END Microsoft Specific","pos":[2698,2720]},{"content":"See Also","pos":[2731,2739]},{"content":"Inline Assembler","pos":[2744,2760]}],"content":"---\ntitle: \"Inline Assembler Overview | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"inline assembler\"\n  - \"__asm keyword [C++], invoking inline assembler\"\n  - \"invoking inline assembler\"\n  - \"inline assembly, inline assembler\"\nms.assetid: d990331a-0e33-4760-8d7a-b720b0288335\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Inline Assembler Overview\n**Microsoft Specific**  \n  \n The inline assembler lets you embed assembly-language instructions in your C and C++ source programs without extra assembly and link steps. The inline assembler is built into the compiler — you don't need a separate assembler such as the Microsoft Macro Assembler (MASM).  \n  \n Because the inline assembler doesn't require separate assembly and link steps, it is more convenient than a separate assembler. Inline assembly code can use any C or C++ variable or function name that is in scope, so it is easy to integrate it with your program's C and C++ code. And because the assembly code can be mixed with C and C++ statements, it can do tasks that are cumbersome or impossible in C or C++ alone.  \n  \n The [__asm](../../assembler/inline/asm.md) keyword invokes the inline assembler and can appear wherever a C or C++ statement is legal. It cannot appear by itself. It must be followed by an assembly instruction, a group of instructions enclosed in braces, or, at the very least, an empty pair of braces. The term \"`__asm` block\" here refers to any instruction or group of instructions, whether or not in braces.  \n  \n The following code is a simple `__asm` block enclosed in braces. (The code is a custom function prolog sequence.)  \n  \n```  \n// asm_overview.cpp  \n// processor: x86  \nvoid __declspec(naked) main()  \n{  \n    // Naked functions must provide their own prolog...  \n    __asm {  \n        push ebp  \n        mov ebp, esp  \n        sub esp, __LOCAL_SIZE  \n    }  \n  \n    // ... and epilog  \n    __asm {  \n        pop ebp  \n        ret  \n    }  \n}  \n```  \n  \n Alternatively, you can put `__asm` in front of each assembly instruction:  \n  \n```  \n__asm push ebp  \n__asm mov  ebp, esp  \n__asm sub  esp, __LOCAL_SIZE  \n```  \n  \n Since the `__asm` keyword is a statement separator, you can also put assembly instructions on the same line:  \n  \n```  \n__asm push ebp   __asm mov  ebp, esp   __asm sub  esp, __LOCAL_SIZE  \n```  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Inline Assembler](../../assembler/inline/inline-assembler.md)"}