{"nodes":[{"pos":[12,48],"content":"shared_future Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"shared_future Class | Microsoft Docs","pos":[0,36]}]},{"pos":[575,594],"content":"shared_future Class","linkify":"shared_future Class","nodes":[{"content":"shared_future Class","pos":[0,19]}]},{"content":"Describes an <bpt id=\"p1\">*</bpt>asynchronous return object<ept id=\"p1\">*</ept>.","pos":[595,637],"source":"Describes an *asynchronous return object*."},{"content":"In contrast with a <bpt id=\"p1\">[</bpt>future<ept id=\"p1\">](../standard-library/future-class.md)</ept> object, an <bpt id=\"p2\">*</bpt>asynchronous provider<ept id=\"p2\">*</ept> can be associated with any number of <ph id=\"ph1\">`shared_future`</ph> objects.","pos":[638,799],"source":" In contrast with a [future](../standard-library/future-class.md) object, an *asynchronous provider* can be associated with any number of `shared_future` objects."},{"pos":[808,814],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[877,884],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[888,1007],"content":"Do not call any methods other than <ph id=\"ph1\">`valid`</ph>, <ph id=\"ph2\">`operator=`</ph>, and the destructor on a <ph id=\"ph3\">`shared_future`</ph> object that's <bpt id=\"p1\">*</bpt>empty<ept id=\"p1\">*</ept>.","source":"Do not call any methods other than `valid`, `operator=`, and the destructor on a `shared_future` object that's *empty*."},{"content":"<ph id=\"ph1\">`shared_future`</ph> objects are not synchronized.","pos":[1014,1059],"source":"`shared_future` objects are not synchronized."},{"content":"Calling methods on the same object from multiple threads introduces a data race that has unpredictable results.","pos":[1060,1171]},{"pos":[1180,1187],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1197,1216],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1223,1227]},{"content":"Description","pos":[1228,1239]},{"pos":[1277,1362],"content":"<bpt id=\"p1\">[</bpt>shared_future::shared_future Constructor<ept id=\"p1\">](#shared_future__shared_future_constructor)</ept>","source":"[shared_future::shared_future Constructor](#shared_future__shared_future_constructor)"},{"pos":[1363,1399],"content":"Constructs a <ph id=\"ph1\">`shared_future`</ph> object.","source":"Constructs a `shared_future` object."},{"pos":[1410,1424],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1431,1435]},{"content":"Description","pos":[1436,1447]},{"pos":[1485,1540],"content":"<bpt id=\"p1\">[</bpt>shared_future::get Method<ept id=\"p1\">](#shared_future__get_method)</ept>","source":"[shared_future::get Method](#shared_future__get_method)"},{"pos":[1541,1615],"content":"Retrieves the result that's stored in the <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept>.","source":"Retrieves the result that's stored in the *associated asynchronous state*."},{"pos":[1620,1679],"content":"<bpt id=\"p1\">[</bpt>shared_future::valid Method<ept id=\"p1\">](#shared_future__valid_method)</ept>","source":"[shared_future::valid Method](#shared_future__valid_method)"},{"content":"Specifies whether the object is not empty.","pos":[1680,1722]},{"pos":[1727,1784],"content":"<bpt id=\"p1\">[</bpt>shared_future::wait Method<ept id=\"p1\">](#shared_future__wait_method)</ept>","source":"[shared_future::wait Method](#shared_future__wait_method)"},{"content":"Blocks the current thread until the associated asynchronous state is ready.","pos":[1785,1860]},{"pos":[1865,1930],"content":"<bpt id=\"p1\">[</bpt>shared_future::wait_for Method<ept id=\"p1\">](#shared_future__wait_for_method)</ept>","source":"[shared_future::wait_for Method](#shared_future__wait_for_method)"},{"content":"Blocks until the associated asynchronous state is ready or until the specified time has elapsed.","pos":[1931,2027]},{"pos":[2032,2101],"content":"<bpt id=\"p1\">[</bpt>shared_future::wait_until Method<ept id=\"p1\">](#shared_future__wait_until_method)</ept>","source":"[shared_future::wait_until Method](#shared_future__wait_until_method)"},{"content":"Blocks until the associated asynchronous state is ready or until a specified point in time.","pos":[2102,2193]},{"pos":[2204,2220],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[2227,2231]},{"content":"Description","pos":[2232,2243]},{"pos":[2281,2336],"content":"<bpt id=\"p1\">[</bpt>shared_future::operator=<ept id=\"p1\">](#shared_future__operator_eq)</ept>","source":"[shared_future::operator=](#shared_future__operator_eq)"},{"content":"Assigns a new associated asynchronous state.","pos":[2337,2381]},{"pos":[2391,2403],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2407,2425],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> future","source":"**Header:** future"},{"pos":[2432,2450],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2460,2527],"content":"<bpt id=\"p1\">&lt;a name=\"shared_future__get_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  shared_future::get Method","linkify":"<a name=\"shared_future__get_method\"></a>  shared_future::get Method","source":"<a name=\"shared_future__get_method\"></a>  shared_future::get Method"},{"pos":[2531,2605],"content":"Retrieves the result that's stored in the <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept>.","source":"Retrieves the result that's stored in the *associated asynchronous state*."},{"pos":[2688,2695],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the result is an exception, the method rethrows it.","pos":[2699,2753]},{"content":"Otherwise, the result is returned.","pos":[2754,2788]},{"content":"Before it retrieves the result, this method blocks the current thread until the associated asynchronous state is ready.","pos":[2795,2914]},{"pos":[2921,3099],"content":"For the partial specialization <ph id=\"ph1\">`shared_future&lt;Ty&amp;&gt;`</ph>, the stored value is effectively a reference to the object that was passed to the <bpt id=\"p1\">*</bpt>asynchronous provider<ept id=\"p1\">*</ept> as the return value.","source":"For the partial specialization `shared_future<Ty&>`, the stored value is effectively a reference to the object that was passed to the *asynchronous provider* as the return value."},{"pos":[3106,3209],"content":"Because no stored value exists for the specialization <ph id=\"ph1\">`shared_future&lt;void&gt;`</ph>, the method returns <ph id=\"ph2\">`void`</ph>.","source":"Because no stored value exists for the specialization `shared_future<void>`, the method returns `void`."},{"pos":[3219,3286],"content":"<bpt id=\"p1\">&lt;a name=\"shared_future__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  shared_future::operator=","linkify":"<a name=\"shared_future__operator_eq\"></a>  shared_future::operator=","source":"<a name=\"shared_future__operator_eq\"></a>  shared_future::operator="},{"pos":[3290,3359],"content":"Transfers an <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept> from a specified object.","source":"Transfers an *associated asynchronous state* from a specified object."},{"pos":[3494,3504],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`shared_future`</ph> object.","pos":[3519,3544],"source":" A `shared_future` object."},{"pos":[3554,3566],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3587,3594],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3598,3697],"content":"For the first operator, <ph id=\"ph1\">`Right`</ph> no longer has an associated asynchronous state after the operation.","source":"For the first operator, `Right` no longer has an associated asynchronous state after the operation."},{"pos":[3704,3779],"content":"For the second method, <ph id=\"ph1\">`Right`</ph> maintains its associated asynchronous state.","source":"For the second method, `Right` maintains its associated asynchronous state."},{"pos":[3789,3886],"content":"<bpt id=\"p1\">&lt;a name=\"shared_future__shared_future_constructor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  shared_future::shared_future Constructor","linkify":"<a name=\"shared_future__shared_future_constructor\"></a>  shared_future::shared_future Constructor","source":"<a name=\"shared_future__shared_future_constructor\"></a>  shared_future::shared_future Constructor"},{"pos":[3890,3926],"content":"Constructs a <ph id=\"ph1\">`shared_future`</ph> object.","source":"Constructs a `shared_future` object."},{"pos":[4109,4119],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>future<ept id=\"p1\">](../standard-library/future-class.md)</ept> or <ph id=\"ph1\">`shared_future`</ph> object.","pos":[4134,4208],"source":" A [future](../standard-library/future-class.md) or `shared_future` object."},{"pos":[4218,4225],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4229,4331],"content":"The first constructor constructs a <ph id=\"ph1\">`shared_future`</ph> object that has no <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept>.","source":"The first constructor constructs a `shared_future` object that has no *associated asynchronous state*."},{"content":"The second and third constructors construct a <ph id=\"ph1\">`shared_future`</ph> object and transfer the associated asynchronous state from <ph id=\"ph2\">`Right`</ph>.","pos":[4338,4467],"source":"The second and third constructors construct a `shared_future` object and transfer the associated asynchronous state from `Right`."},{"content":"<ph id=\"ph1\">`Right`</ph> no longer has an associated asynchronous state.","pos":[4468,4523],"source":"`Right` no longer has an associated asynchronous state."},{"pos":[4530,4648],"content":"The fourth constructor constructs a <ph id=\"ph1\">`shared_future`</ph> object that has the same associated asynchronous state as <ph id=\"ph2\">`Right`</ph>.","source":"The fourth constructor constructs a `shared_future` object that has the same associated asynchronous state as `Right`."},{"pos":[4658,4729],"content":"<bpt id=\"p1\">&lt;a name=\"shared_future__valid_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  shared_future::valid Method","linkify":"<a name=\"shared_future__valid_method\"></a>  shared_future::valid Method","source":"<a name=\"shared_future__valid_method\"></a>  shared_future::valid Method"},{"pos":[4733,4801],"content":"Specifies whether the object has an <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept>.","source":"Specifies whether the object has an *associated asynchronous state*."},{"pos":[4847,4859],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4863,4941],"content":"<ph id=\"ph1\">`true`</ph> if the object has an associated asynchronous state; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the object has an associated asynchronous state; otherwise, `false`."},{"pos":[4951,5020],"content":"<bpt id=\"p1\">&lt;a name=\"shared_future__wait_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  shared_future::wait Method","linkify":"<a name=\"shared_future__wait_method\"></a>  shared_future::wait Method","source":"<a name=\"shared_future__wait_method\"></a>  shared_future::wait Method"},{"pos":[5024,5103],"content":"Blocks the current thread until the <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept> is <bpt id=\"p2\">*</bpt>ready<ept id=\"p2\">*</ept>.","source":"Blocks the current thread until the *associated asynchronous state* is *ready*."},{"pos":[5145,5152],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An associated asynchronous state is ready only if its asynchronous provider has stored a return value or stored an exception.","pos":[5156,5281]},{"pos":[5291,5368],"content":"<bpt id=\"p1\">&lt;a name=\"shared_future__wait_for_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  shared_future::wait_for Method","linkify":"<a name=\"shared_future__wait_for_method\"></a>  shared_future::wait_for Method","source":"<a name=\"shared_future__wait_for_method\"></a>  shared_future::wait_for Method"},{"pos":[5372,5487],"content":"Blocks the current thread until the associated asynchronous state is <bpt id=\"p1\">*</bpt>ready<ept id=\"p1\">*</ept> or until a specified time has elapsed.","source":"Blocks the current thread until the associated asynchronous state is *ready* or until a specified time has elapsed."},{"pos":[5627,5637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>chrono::duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> object that specifies a maximum time interval that the thread blocks.","pos":[5655,5784],"source":" A [chrono::duration](../standard-library/duration-class.md) object that specifies a maximum time interval that the thread blocks."},{"pos":[5794,5806],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5810,5931],"content":"A <bpt id=\"p1\">[</bpt>future_status<ept id=\"p1\">](../standard-library/future-enums.md#future_status_enumeration)</ept> that indicates the reason for returning.","source":"A [future_status](../standard-library/future-enums.md#future_status_enumeration) that indicates the reason for returning."},{"pos":[5941,5948],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5952,6079],"content":"An associated asynchronous state is <bpt id=\"p1\">*</bpt>ready<ept id=\"p1\">*</ept> only if its asynchronous provider has stored a return value or stored an exception.","source":"An associated asynchronous state is *ready* only if its asynchronous provider has stored a return value or stored an exception."},{"pos":[6089,6170],"content":"<bpt id=\"p1\">&lt;a name=\"shared_future__wait_until_method\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  shared_future::wait_until Method","linkify":"<a name=\"shared_future__wait_until_method\"></a>  shared_future::wait_until Method","source":"<a name=\"shared_future__wait_until_method\"></a>  shared_future::wait_until Method"},{"pos":[6174,6289],"content":"Blocks the current thread until the associated asynchronous state is <bpt id=\"p1\">*</bpt>ready<ept id=\"p1\">*</ept> or until after a specified time point.","source":"Blocks the current thread until the associated asynchronous state is *ready* or until after a specified time point."},{"pos":[6441,6451],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">[</bpt>chrono::time_point<ept id=\"p1\">](../standard-library/time-point-class.md)</ept> object that specifies a time after which the thread can unblock.","pos":[6469,6597],"source":" A [chrono::time_point](../standard-library/time-point-class.md) object that specifies a time after which the thread can unblock."},{"pos":[6607,6619],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6623,6744],"content":"A <bpt id=\"p1\">[</bpt>future_status<ept id=\"p1\">](../standard-library/future-enums.md#future_status_enumeration)</ept> that indicates the reason for returning.","source":"A [future_status](../standard-library/future-enums.md#future_status_enumeration) that indicates the reason for returning."},{"pos":[6754,6761],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An associated asynchronous state is ready only if its asynchronous provider has stored a return value or stored an exception.","pos":[6765,6890]},{"pos":[6899,6907],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Header Files Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-header-files.md)</ept><ph id=\"ph1\"> </ph>","pos":[6911,6994],"source":"[Header Files Reference](../standard-library/cpp-standard-library-header-files.md) "},{"content":"<bpt id=\"p1\"> [</bpt><ph id=\"ph1\">\\&lt;</ph>future&gt;<ept id=\"p1\">](../standard-library/future.md)</ept>","pos":[6997,7040],"source":" [\\<future>](../standard-library/future.md)"}],"content":"---\ntitle: \"shared_future Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"future/std::shared_future\"\ndev_langs: \n  - \"C++\"\nms.assetid: 454ebedd-f42b-405f-99a5-a25cc9ad7c90\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# shared_future Class\nDescribes an *asynchronous return object*. In contrast with a [future](../standard-library/future-class.md) object, an *asynchronous provider* can be associated with any number of `shared_future` objects.  \n  \n## Syntax  \n  \n```\ntemplate <class Ty>\nclass shared_future;\n```  \n  \n## Remarks  \n Do not call any methods other than `valid`, `operator=`, and the destructor on a `shared_future` object that's *empty*.  \n  \n `shared_future` objects are not synchronized. Calling methods on the same object from multiple threads introduces a data race that has unpredictable results.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[shared_future::shared_future Constructor](#shared_future__shared_future_constructor)|Constructs a `shared_future` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[shared_future::get Method](#shared_future__get_method)|Retrieves the result that's stored in the *associated asynchronous state*.|  \n|[shared_future::valid Method](#shared_future__valid_method)|Specifies whether the object is not empty.|  \n|[shared_future::wait Method](#shared_future__wait_method)|Blocks the current thread until the associated asynchronous state is ready.|  \n|[shared_future::wait_for Method](#shared_future__wait_for_method)|Blocks until the associated asynchronous state is ready or until the specified time has elapsed.|  \n|[shared_future::wait_until Method](#shared_future__wait_until_method)|Blocks until the associated asynchronous state is ready or until a specified point in time.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[shared_future::operator=](#shared_future__operator_eq)|Assigns a new associated asynchronous state.|  \n  \n## Requirements  \n **Header:** future  \n  \n **Namespace:** std  \n  \n##  <a name=\"shared_future__get_method\"></a>  shared_future::get Method  \n Retrieves the result that's stored in the *associated asynchronous state*.  \n  \n```\nconst Ty& get() const;\n\nTy& get() const;\n\nvoid get() const;\n```  \n  \n### Remarks  \n If the result is an exception, the method rethrows it. Otherwise, the result is returned.  \n  \n Before it retrieves the result, this method blocks the current thread until the associated asynchronous state is ready.  \n  \n For the partial specialization `shared_future<Ty&>`, the stored value is effectively a reference to the object that was passed to the *asynchronous provider* as the return value.  \n  \n Because no stored value exists for the specialization `shared_future<void>`, the method returns `void`.  \n  \n##  <a name=\"shared_future__operator_eq\"></a>  shared_future::operator=  \n Transfers an *associated asynchronous state* from a specified object.  \n  \n```\nshared_future& operator=(shared_future&& Right) noexcept;\nshared_future& operator=(const shared_future& Right);\n```  \n  \n### Parameters  \n `Right`  \n A `shared_future` object.  \n  \n### Return Value  \n `*this`  \n  \n### Remarks  \n For the first operator, `Right` no longer has an associated asynchronous state after the operation.  \n  \n For the second method, `Right` maintains its associated asynchronous state.  \n  \n##  <a name=\"shared_future__shared_future_constructor\"></a>  shared_future::shared_future Constructor  \n Constructs a `shared_future` object.  \n  \n```\nshared_future() noexcept;\nshared_future(future<Ty>&& Right) noexcept;\nshared_future(shared_future&& Right) noexcept;\nshared_future(const shared_future& Right);\n```  \n  \n### Parameters  \n `Right`  \n A [future](../standard-library/future-class.md) or `shared_future` object.  \n  \n### Remarks  \n The first constructor constructs a `shared_future` object that has no *associated asynchronous state*.  \n  \n The second and third constructors construct a `shared_future` object and transfer the associated asynchronous state from `Right`. `Right` no longer has an associated asynchronous state.  \n  \n The fourth constructor constructs a `shared_future` object that has the same associated asynchronous state as `Right`.  \n  \n##  <a name=\"shared_future__valid_method\"></a>  shared_future::valid Method  \n Specifies whether the object has an *associated asynchronous state*.  \n  \n```\nbool valid() noexcept;\n```  \n  \n### Return Value  \n `true` if the object has an associated asynchronous state; otherwise, `false`.  \n  \n##  <a name=\"shared_future__wait_method\"></a>  shared_future::wait Method  \n Blocks the current thread until the *associated asynchronous state* is *ready*.  \n  \n```\nvoid wait() const;\n```  \n  \n### Remarks  \n An associated asynchronous state is ready only if its asynchronous provider has stored a return value or stored an exception.  \n  \n##  <a name=\"shared_future__wait_for_method\"></a>  shared_future::wait_for Method  \n Blocks the current thread until the associated asynchronous state is *ready* or until a specified time has elapsed.  \n  \n```\ntemplate <class Rep, class Period>\nfuture_status wait_for(\n    const chrono::duration<Rep, Period>& Rel_time) const;\n```  \n  \n### Parameters  \n `Rel_time`  \n A [chrono::duration](../standard-library/duration-class.md) object that specifies a maximum time interval that the thread blocks.  \n  \n### Return Value  \n A [future_status](../standard-library/future-enums.md#future_status_enumeration) that indicates the reason for returning.  \n  \n### Remarks  \n An associated asynchronous state is *ready* only if its asynchronous provider has stored a return value or stored an exception.  \n  \n##  <a name=\"shared_future__wait_until_method\"></a>  shared_future::wait_until Method  \n Blocks the current thread until the associated asynchronous state is *ready* or until after a specified time point.  \n  \n```\ntemplate <class Clock, class Duration>\nfuture_status wait_until(\n    const chrono::time_point<Clock, Duration>& Abs_time) const;\n```  \n  \n### Parameters  \n `Abs_time`  \n A [chrono::time_point](../standard-library/time-point-class.md) object that specifies a time after which the thread can unblock.  \n  \n### Return Value  \n A [future_status](../standard-library/future-enums.md#future_status_enumeration) that indicates the reason for returning.  \n  \n### Remarks  \n An associated asynchronous state is ready only if its asynchronous provider has stored a return value or stored an exception.  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [\\<future>](../standard-library/future.md)\n\n\n\n"}