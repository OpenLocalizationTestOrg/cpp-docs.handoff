{"nodes":[{"pos":[12,45],"content":"CWordArray Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CWordArray Class | Microsoft Docs","pos":[0,33]}]},{"pos":[695,711],"content":"CWordArray Class","linkify":"CWordArray Class","nodes":[{"content":"CWordArray Class","pos":[0,16]}]},{"content":"Supports arrays of 16-bit words.","pos":[712,744]},{"pos":[753,759],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[819,826],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"content":"The member functions of <ph id=\"ph1\">`CWordArray`</ph> are similar to the member functions of class <bpt id=\"p1\">[</bpt>CObArray<ept id=\"p1\">](../../mfc/reference/cobarray-class.md)</ept>.","pos":[830,962],"source":"The member functions of `CWordArray` are similar to the member functions of class [CObArray](../../mfc/reference/cobarray-class.md)."},{"content":"Because of this similarity, you can use the <ph id=\"ph1\">`CObArray`</ph> reference documentation for member function specifics.","pos":[963,1072],"source":" Because of this similarity, you can use the `CObArray` reference documentation for member function specifics."},{"content":"Wherever you see a <bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept> pointer as a function parameter or return value, substitute a <bpt id=\"p2\">**</bpt>WORD<ept id=\"p2\">**</ept>.","pos":[1073,1211],"source":" Wherever you see a [CObject](../../mfc/reference/cobject-class.md) pointer as a function parameter or return value, substitute a **WORD**."},{"content":"for example, translates to","pos":[1274,1300]},{"pos":[1364,1383],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1390,1394]},{"content":"Description","pos":[1395,1406]},{"pos":[1444,1522],"content":"<bpt id=\"p1\">[</bpt>CObArray::CObArray<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__cobarray)</ept>","source":"[CObArray::CObArray](../../mfc/reference/cobarray-class.md#cobarray__cobarray)"},{"content":"Constructs an empty array.","pos":[1523,1549]},{"pos":[1560,1574],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1581,1585]},{"content":"Description","pos":[1586,1597]},{"pos":[1635,1703],"content":"<bpt id=\"p1\">[</bpt>CObArray::Add<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__add)</ept>","source":"[CObArray::Add](../../mfc/reference/cobarray-class.md#cobarray__add)"},{"content":"Adds an element to the end of the array; grows the array if necessary.","pos":[1704,1774]},{"pos":[1779,1853],"content":"<bpt id=\"p1\">[</bpt>CObArray::Append<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__append)</ept>","source":"[CObArray::Append](../../mfc/reference/cobarray-class.md#cobarray__append)"},{"content":"Appends another array to the array; grows the array if necessary.","pos":[1854,1919]},{"pos":[1924,1994],"content":"<bpt id=\"p1\">[</bpt>CObArray::Copy<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__copy)</ept>","source":"[CObArray::Copy](../../mfc/reference/cobarray-class.md#cobarray__copy)"},{"content":"Copies another array to the array; grows the array if necessary.","pos":[1995,2059]},{"pos":[2064,2144],"content":"<bpt id=\"p1\">[</bpt>CObArray::ElementAt<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__elementat)</ept>","source":"[CObArray::ElementAt](../../mfc/reference/cobarray-class.md#cobarray__elementat)"},{"content":"Returns a temporary reference to the element pointer within the array.","pos":[2145,2215]},{"pos":[2220,2300],"content":"<bpt id=\"p1\">[</bpt>CObArray::FreeExtra<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__freeextra)</ept>","source":"[CObArray::FreeExtra](../../mfc/reference/cobarray-class.md#cobarray__freeextra)"},{"content":"Frees all unused memory above the current upper bound.","pos":[2301,2355]},{"pos":[2360,2432],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetAt<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__getat)</ept>","source":"[CObArray::GetAt](../../mfc/reference/cobarray-class.md#cobarray__getat)"},{"content":"Returns the value at a given index.","pos":[2433,2468]},{"pos":[2473,2551],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetCount<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__getcount)</ept>","source":"[CObArray::GetCount](../../mfc/reference/cobarray-class.md#cobarray__getcount)"},{"content":"Gets the number of elements in this array.","pos":[2552,2594]},{"pos":[2599,2675],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetData<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__getdata)</ept>","source":"[CObArray::GetData](../../mfc/reference/cobarray-class.md#cobarray__getdata)"},{"content":"Allows access to elements in the array.","pos":[2676,2715]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[2716,2732],"source":" Can be **NULL**."},{"pos":[2737,2813],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetSize<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__getsize)</ept>","source":"[CObArray::GetSize](../../mfc/reference/cobarray-class.md#cobarray__getsize)"},{"content":"Gets the number of elements in this array.","pos":[2814,2856]},{"pos":[2861,2949],"content":"<bpt id=\"p1\">[</bpt>CObArray::GetUpperBound<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__getupperbound)</ept>","source":"[CObArray::GetUpperBound](../../mfc/reference/cobarray-class.md#cobarray__getupperbound)"},{"content":"Returns the largest valid index.","pos":[2950,2982]},{"pos":[2987,3065],"content":"<bpt id=\"p1\">[</bpt>CObArray::InsertAt<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__insertat)</ept>","source":"[CObArray::InsertAt](../../mfc/reference/cobarray-class.md#cobarray__insertat)"},{"content":"Inserts an element (or all the elements in another array) at a specified index.","pos":[3066,3145]},{"pos":[3150,3226],"content":"<bpt id=\"p1\">[</bpt>CObArray::IsEmpty<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__isempty)</ept>","source":"[CObArray::IsEmpty](../../mfc/reference/cobarray-class.md#cobarray__isempty)"},{"content":"Determines if the array is empty.","pos":[3227,3260]},{"pos":[3265,3345],"content":"<bpt id=\"p1\">[</bpt>CObArray::RemoveAll<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__removeall)</ept>","source":"[CObArray::RemoveAll](../../mfc/reference/cobarray-class.md#cobarray__removeall)"},{"content":"Removes all the elements from this array.","pos":[3346,3387]},{"pos":[3392,3470],"content":"<bpt id=\"p1\">[</bpt>CObArray::RemoveAt<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__removeat)</ept>","source":"[CObArray::RemoveAt](../../mfc/reference/cobarray-class.md#cobarray__removeat)"},{"content":"Removes an element at a specific index.","pos":[3471,3510]},{"pos":[3515,3587],"content":"<bpt id=\"p1\">[</bpt>CObArray::SetAt<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__setat)</ept>","source":"[CObArray::SetAt](../../mfc/reference/cobarray-class.md#cobarray__setat)"},{"content":"Sets the value for a given index; array not allowed to grow.","pos":[3588,3648]},{"pos":[3653,3733],"content":"<bpt id=\"p1\">[</bpt>CObArray::SetAtGrow<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__setatgrow)</ept>","source":"[CObArray::SetAtGrow](../../mfc/reference/cobarray-class.md#cobarray__setatgrow)"},{"content":"Sets the value for a given index; grows the array if necessary.","pos":[3734,3797]},{"pos":[3802,3878],"content":"<bpt id=\"p1\">[</bpt>CObArray::SetSize<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__setsize)</ept>","source":"[CObArray::SetSize](../../mfc/reference/cobarray-class.md#cobarray__setsize)"},{"content":"Sets the number of elements to be contained in this array.","pos":[3879,3937]},{"pos":[3948,3964],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[3971,3975]},{"content":"Description","pos":[3976,3987]},{"pos":[4025,4117],"content":"<bpt id=\"p1\">[</bpt>CObArray::operator &amp;#91;&amp;#93;<ept id=\"p1\">](../../mfc/reference/cobarray-class.md#cobarray__operator_at)</ept>","source":"[CObArray::operator &#91;&#93;](../../mfc/reference/cobarray-class.md#cobarray__operator_at)"},{"content":"Sets or gets the element at the specified index.","pos":[4118,4166]},{"pos":[4176,4183],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CWordArray`</ph> incorporates the <bpt id=\"p1\">[</bpt>IMPLEMENT_SERIAL<ept id=\"p1\">](run-time-object-model-services.md#implement_serial)</ept> macro to support serialization and dumping of its elements.","pos":[4187,4347],"source":"`CWordArray` incorporates the [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro to support serialization and dumping of its elements."},{"content":"If an array of words is stored to an archive, either with an overloaded insertion operator or with the <bpt id=\"p1\">[</bpt>CObject::Serialize<ept id=\"p1\">](../../mfc/reference/cobject-class.md#cobject__serialize)</ept> member function, each element is, in turn, serialized.","pos":[4348,4583],"source":" If an array of words is stored to an archive, either with an overloaded insertion operator or with the [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize) member function, each element is, in turn, serialized."},{"pos":[4591,4873],"content":"[!NOTE]\n Before using an array, use `SetSize` to establish its size and allocate memory for it. If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.","leadings":["","> "],"nodes":[{"content":" Before using an array, use `SetSize` to establish its size and allocate memory for it. If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.","pos":[8,280],"nodes":[{"content":"Before using an array, use <ph id=\"ph1\">`SetSize`</ph> to establish its size and allocate memory for it.","pos":[1,87],"source":" Before using an array, use `SetSize` to establish its size and allocate memory for it."},{"content":"If you do not use <ph id=\"ph1\">`SetSize`</ph>, adding elements to your array causes it to be frequently reallocated and copied.","pos":[88,197],"source":" If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied."},{"content":"Frequent reallocation and copying are inefficient and can fragment memory.","pos":[198,272]}]}]},{"content":"If you need a dump of individual elements in the array, you must set the depth of the dump context to 1 or greater.","pos":[4880,4995]},{"pos":[5002,5102],"content":"For more information on using <ph id=\"ph1\">`CWordArray`</ph>, see the article <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept>.","source":"For more information on using `CWordArray`, see the article [Collections](../../mfc/collections.md)."},{"pos":[5111,5132],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[5136,5183],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[5211,5223],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5227,5248],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcoll.h","source":"**Header:** afxcoll.h"},{"pos":[5258,5323],"content":"<bpt id=\"p1\">&lt;a name=\"icommandsource_interface\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandSource Interface","linkify":"<a name=\"icommandsource_interface\"></a>  ICommandSource Interface","source":"<a name=\"icommandsource_interface\"></a>  ICommandSource Interface"},{"content":"Manages commands sent from a command source object to a user control.","pos":[5327,5396]},{"pos":[5454,5461],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When you host a user control in an MFC View, <bpt id=\"p1\">[</bpt>CWinFormsView Class<ept id=\"p1\">](../../mfc/reference/cwinformsview-class.md)</ept> routes commands and update command UI messages to the user control to allow it to handle MFC commands (for example, frame menu items and toolbar buttons).","pos":[5465,5730],"source":"When you host a user control in an MFC View, [CWinFormsView Class](../../mfc/reference/cwinformsview-class.md) routes commands and update command UI messages to the user control to allow it to handle MFC commands (for example, frame menu items and toolbar buttons)."},{"content":"By implementing  , you give the user control a reference to the <ph id=\"ph1\">`ICommandSource`</ph> object.","pos":[5731,5819],"source":" By implementing  , you give the user control a reference to the `ICommandSource` object."},{"pos":[5826,6008],"content":"See <bpt id=\"p1\">[</bpt>How to: Add Command Routing to the Windows Forms Control<ept id=\"p1\">](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md)</ept> for an example of how to use <ph id=\"ph1\">`ICommandTarget`</ph>.","source":"See [How to: Add Command Routing to the Windows Forms Control](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md) for an example of how to use `ICommandTarget`."},{"pos":[6015,6165],"content":"For more information on using Windows Forms, see <bpt id=\"p1\">[</bpt>Using a Windows Form User Control in MFC<ept id=\"p1\">](../../dotnet/using-a-windows-form-user-control-in-mfc.md)</ept>.","source":"For more information on using Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md)."},{"pos":[6175,6258],"content":"<bpt id=\"p1\">&lt;a name=\"icommandsource__addcommandhandler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandSource::AddCommandHandler","linkify":"<a name=\"icommandsource__addcommandhandler\"></a>  ICommandSource::AddCommandHandler","source":"<a name=\"icommandsource__addcommandhandler\"></a>  ICommandSource::AddCommandHandler"},{"content":"Adds a command handler to a command source object.","pos":[6262,6312]},{"pos":[6420,6430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The command ID.","pos":[6445,6460]},{"content":"A handle to the command handler method.","pos":[6483,6522]},{"pos":[6532,6539],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6543,6654],"content":"This method adds the command handler <ph id=\"ph1\">`cmdHandler`</ph> to the command source object and maps the handler to <ph id=\"ph2\">`cmdID`</ph>.","source":"This method adds the command handler `cmdHandler` to the command source object and maps the handler to `cmdID`."},{"pos":[6661,6846],"content":"See <bpt id=\"p1\">[</bpt>How to: Add Command Routing to the Windows Forms Control<ept id=\"p1\">](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md)</ept> for an example of how to use <ph id=\"ph1\">`AddCommandHandler`</ph>.","source":"See [How to: Add Command Routing to the Windows Forms Control](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md) for an example of how to use `AddCommandHandler`."},{"pos":[6856,6949],"content":"<bpt id=\"p1\">&lt;a name=\"icommandsource__addcommandrangehandler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandSource::AddCommandRangeHandler","linkify":"<a name=\"icommandsource__addcommandrangehandler\"></a>  ICommandSource::AddCommandRangeHandler","source":"<a name=\"icommandsource__addcommandrangehandler\"></a>  ICommandSource::AddCommandRangeHandler"},{"content":"Adds a group of command handlers to a command source object.","pos":[6953,7013]},{"pos":[7158,7168],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The beginning index of the command ID range.","pos":[7186,7230]},{"content":"The ending index of the command ID range.","pos":[7251,7292]},{"content":"A handle to the message handler method to which the commands are mapped.","pos":[7315,7387]},{"pos":[7397,7404],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method maps a contiguous range of command IDs to a single message handler and adds it to the command source object.","pos":[7408,7528]},{"content":"This is used for handling a group of related buttons with one method.","pos":[7529,7598]},{"pos":[7608,7705],"content":"<bpt id=\"p1\">&lt;a name=\"icommandsource__addcommandrangeuihandler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandSource::AddCommandRangeUIHandler","linkify":"<a name=\"icommandsource__addcommandrangeuihandler\"></a>  ICommandSource::AddCommandRangeUIHandler","source":"<a name=\"icommandsource__addcommandrangeuihandler\"></a>  ICommandSource::AddCommandRangeUIHandler"},{"content":"Adds a group of user interface command message handlers to a command source object.","pos":[7709,7792]},{"pos":[7945,7955],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The beginning index of the command ID range.","pos":[7973,8017]},{"content":"The ending index of the command ID range.","pos":[8038,8079]},{"content":"A handle to the message handler method to which the commands are mapped.","pos":[8102,8174]},{"pos":[8184,8191],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method maps a contiguous range of command IDs to a single user interface command message handler and adds it to the command source object.","pos":[8195,8338]},{"content":"This is used for handling a group of related buttons with one method.","pos":[8339,8408]},{"pos":[8418,8505],"content":"<bpt id=\"p1\">&lt;a name=\"icommandsource__addcommanduihandler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandSource::AddCommandUIHandler","linkify":"<a name=\"icommandsource__addcommanduihandler\"></a>  ICommandSource::AddCommandUIHandler","source":"<a name=\"icommandsource__addcommanduihandler\"></a>  ICommandSource::AddCommandUIHandler"},{"content":"Adds a user interface command message handler to a command source object.","pos":[8509,8582]},{"pos":[8697,8707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The command ID.","pos":[8722,8737]},{"content":"A handle to the user interface command message handler method.","pos":[8762,8824]},{"pos":[8834,8841],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8845,8979],"content":"This method adds the user interface command message handler <ph id=\"ph1\">`cmdHandler`</ph> to the command source object and maps the handler to <ph id=\"ph2\">`cmdID`</ph>.","source":"This method adds the user interface command message handler `cmdHandler` to the command source object and maps the handler to `cmdID`."},{"pos":[8989,9060],"content":"<bpt id=\"p1\">&lt;a name=\"icommandsource__postcommand\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandSource::PostCommand","linkify":"<a name=\"icommandsource__postcommand\"></a>  ICommandSource::PostCommand","source":"<a name=\"icommandsource__postcommand\"></a>  ICommandSource::PostCommand"},{"content":"Posts a message without waiting for it to be processed.","pos":[9064,9119]},{"pos":[9184,9194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The command ID of the message to be posted.","pos":[9211,9254]},{"pos":[9264,9271],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method asynchronously posts the message mapped to the ID specified by <ph id=\"ph1\">`command`</ph>.","pos":[9275,9360],"source":"This method asynchronously posts the message mapped to the ID specified by `command`."},{"content":"It calls <bpt id=\"p1\">[</bpt>CWnd::PostMessage<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__postmessage)</ept> to place the message in the window's message queue and then returns without waiting for the corresponding window to process the message.","pos":[9361,9579],"source":" It calls [CWnd::PostMessage](../../mfc/reference/cwnd-class.md#cwnd__postmessage) to place the message in the window's message queue and then returns without waiting for the corresponding window to process the message."},{"pos":[9589,9678],"content":"<bpt id=\"p1\">&lt;a name=\"icommandsource__removecommandhandler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandSource::RemoveCommandHandler","linkify":"<a name=\"icommandsource__removecommandhandler\"></a>  ICommandSource::RemoveCommandHandler","source":"<a name=\"icommandsource__removecommandhandler\"></a>  ICommandSource::RemoveCommandHandler"},{"content":"Removes a command handler from a command source object.","pos":[9682,9737]},{"pos":[9809,9819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The command ID.","pos":[9834,9849]},{"pos":[9859,9866],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9870,9959],"content":"This method removes the command handler mapped to <ph id=\"ph1\">`cmdID`</ph> from the command source object.","source":"This method removes the command handler mapped to `cmdID` from the command source object."},{"pos":[9969,10068],"content":"<bpt id=\"p1\">&lt;a name=\"icommandsource__removecommandrangehandler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandSource::RemoveCommandRangeHandler","linkify":"<a name=\"icommandsource__removecommandrangehandler\"></a>  ICommandSource::RemoveCommandRangeHandler","source":"<a name=\"icommandsource__removecommandrangehandler\"></a>  ICommandSource::RemoveCommandRangeHandler"},{"content":"Removes a group of command handlers from a command source object.","pos":[10072,10137]},{"pos":[10253,10263],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The beginning index of the command ID range.","pos":[10281,10325]},{"content":"The ending index of the command ID range.","pos":[10346,10387]},{"pos":[10397,10404],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10408,10553],"content":"This method removes a group of message handlers, mapped to the command IDs specifed by <ph id=\"ph1\">`cmdIDMin`</ph> and <ph id=\"ph2\">`cmdIDMax`</ph>, from the command source object.","source":"This method removes a group of message handlers, mapped to the command IDs specifed by `cmdIDMin` and `cmdIDMax`, from the command source object."},{"pos":[10563,10666],"content":"<bpt id=\"p1\">&lt;a name=\"icommandsource__removecommandrangeuihandler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandSource::RemoveCommandRangeUIHandler","linkify":"<a name=\"icommandsource__removecommandrangeuihandler\"></a>  ICommandSource::RemoveCommandRangeUIHandler","source":"<a name=\"icommandsource__removecommandrangeuihandler\"></a>  ICommandSource::RemoveCommandRangeUIHandler"},{"content":"Removes a group of user interface command message handlers from a command source object.","pos":[10670,10758]},{"pos":[10874,10884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The beginning index of the command ID range.","pos":[10902,10946]},{"content":"The ending index of the command ID range.","pos":[10967,11008]},{"pos":[11018,11025],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11029,11197],"content":"This method removes a group of user interface command message handlers, mapped to the command IDs specifed by <ph id=\"ph1\">`cmdIDMin`</ph> and <ph id=\"ph2\">`cmdIDMax`</ph>, from the command source object.","source":"This method removes a group of user interface command message handlers, mapped to the command IDs specifed by `cmdIDMin` and `cmdIDMax`, from the command source object."},{"pos":[11207,11300],"content":"<bpt id=\"p1\">&lt;a name=\"icommandsource__removecommanduihandler\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandSource::RemoveCommandUIHandler","linkify":"<a name=\"icommandsource__removecommanduihandler\"></a>  ICommandSource::RemoveCommandUIHandler","source":"<a name=\"icommandsource__removecommanduihandler\"></a>  ICommandSource::RemoveCommandUIHandler"},{"content":"Removes a user interface command message handler from a command source object.","pos":[11304,11382]},{"pos":[11456,11466],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The command ID.","pos":[11481,11496]},{"pos":[11506,11513],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11517,11629],"content":"This method removes the user interface command message handler mapped to <ph id=\"ph1\">`cmdID`</ph> from the command source object.","source":"This method removes the user interface command message handler mapped to `cmdID` from the command source object."},{"pos":[11639,11710],"content":"<bpt id=\"p1\">&lt;a name=\"icommandsource__sendcommand\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandSource::SendCommand","linkify":"<a name=\"icommandsource__sendcommand\"></a>  ICommandSource::SendCommand","source":"<a name=\"icommandsource__sendcommand\"></a>  ICommandSource::SendCommand"},{"content":"Sends a message and waits for it to be processed before returning.","pos":[11714,11780]},{"pos":[11845,11855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The command ID of the message to be sent.","pos":[11872,11913]},{"pos":[11923,11930],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method synchronously sends the message mapped to the ID specified by <ph id=\"ph1\">`command`</ph>.","pos":[11934,12018],"source":"This method synchronously sends the message mapped to the ID specified by `command`."},{"content":"It calls <bpt id=\"p1\">[</bpt>CWnd::SendMessage<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__sendmessage)</ept> to place the message in the window's message queue and waits until that window procedure has processed the message before returning.","pos":[12019,12233],"source":" It calls [CWnd::SendMessage](../../mfc/reference/cwnd-class.md#cwnd__sendmessage) to place the message in the window's message queue and waits until that window procedure has processed the message before returning."},{"pos":[12243,12308],"content":"<bpt id=\"p1\">&lt;a name=\"icommandtarget_interface\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandTarget Interface","linkify":"<a name=\"icommandtarget_interface\"></a>  ICommandTarget Interface","source":"<a name=\"icommandtarget_interface\"></a>  ICommandTarget Interface"},{"content":"Provides a user control with an interface to receive commands from a command source object.","pos":[12312,12403]},{"pos":[12461,12468],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When you host a user control in an MFC View, <bpt id=\"p1\">[</bpt>CWinFormsView<ept id=\"p1\">](../../mfc/reference/cwinformsview-class.md)</ept> routes commands and update command UI messages to the user control to allow it to handle MFC commands (for example, frame menu items and toolbar buttons).","pos":[12472,12731],"source":"When you host a user control in an MFC View, [CWinFormsView](../../mfc/reference/cwinformsview-class.md) routes commands and update command UI messages to the user control to allow it to handle MFC commands (for example, frame menu items and toolbar buttons)."},{"content":"By implementing <ph id=\"ph1\">`ICommandTarget`</ph>, you give the user control a reference to the  object.","pos":[12732,12819],"source":" By implementing `ICommandTarget`, you give the user control a reference to the  object."},{"pos":[12826,13008],"content":"See <bpt id=\"p1\">[</bpt>How to: Add Command Routing to the Windows Forms Control<ept id=\"p1\">](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md)</ept> for an example of how to use <ph id=\"ph1\">`ICommandTarget`</ph>.","source":"See [How to: Add Command Routing to the Windows Forms Control](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md) for an example of how to use `ICommandTarget`."},{"pos":[13015,13165],"content":"For more information on using Windows Forms, see <bpt id=\"p1\">[</bpt>Using a Windows Form User Control in MFC<ept id=\"p1\">](../../dotnet/using-a-windows-form-user-control-in-mfc.md)</ept>.","source":"For more information on using Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md)."},{"pos":[13175,13244],"content":"<bpt id=\"p1\">&lt;a name=\"icommandtarget__initialize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandTarget::Initialize","linkify":"<a name=\"icommandtarget__initialize\"></a>  ICommandTarget::Initialize","source":"<a name=\"icommandtarget__initialize\"></a>  ICommandTarget::Initialize"},{"content":"Initializes the command target object.","pos":[13248,13286]},{"pos":[13355,13365],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A handle to the command source object.","pos":[13384,13422]},{"pos":[13432,13439],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13443,13650],"content":"When you host a user control in an MFC View, <bpt id=\"p1\">[</bpt>CWinFormsView<ept id=\"p1\">](../../mfc/reference/cwinformsview-class.md)</ept> routes commands and update command UI messages to the user control to allow it to handle MFC commands.","source":"When you host a user control in an MFC View, [CWinFormsView](../../mfc/reference/cwinformsview-class.md) routes commands and update command UI messages to the user control to allow it to handle MFC commands."},{"content":"This method initializes the command target object and associates it with the specified command source object <ph id=\"ph1\">`cmdSource`</ph>.","pos":[13657,13778],"source":"This method initializes the command target object and associates it with the specified command source object `cmdSource`."},{"content":"It should be called in the user control class implementation.","pos":[13779,13840]},{"content":"At initialization, you should register command handlers with the command source object by calling <bpt id=\"p1\">[</bpt>ICommandSource::AddCommandHandler<ept id=\"p1\">](../../mfc/reference/icommandsource-interface.md)</ept> in the <ph id=\"ph1\">`Initialize`</ph> implementation.","pos":[13841,14059],"source":" At initialization, you should register command handlers with the command source object by calling [ICommandSource::AddCommandHandler](../../mfc/reference/icommandsource-interface.md) in the `Initialize` implementation."},{"content":"See <bpt id=\"p1\">[</bpt>How to: Add Command Routing to the Windows Forms Control<ept id=\"p1\">](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md)</ept> for an example of how to use <ph id=\"ph1\">`Initialize`</ph> to do this.","pos":[14060,14249],"source":" See [How to: Add Command Routing to the Windows Forms Control](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md) for an example of how to use `Initialize` to do this."},{"pos":[14259,14316],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui_interface\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandUI Interface","linkify":"<a name=\"icommandui_interface\"></a>  ICommandUI Interface","source":"<a name=\"icommandui_interface\"></a>  ICommandUI Interface"},{"content":"Manages user interface commands.","pos":[14320,14352]},{"pos":[14406,14413],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This interface provides methods and properties that manage user interface commands.","pos":[14417,14500]},{"content":"<ph id=\"ph1\">`ICommandUI`</ph> is similar to <bpt id=\"p1\">[</bpt>CCmdUI Class<ept id=\"p1\">](../../mfc/reference/ccmdui-class.md)</ept>, except that <ph id=\"ph2\">`ICommandUI`</ph> is used for MFC applications that interoperate with .NET components.","pos":[14501,14674],"source":"`ICommandUI` is similar to [CCmdUI Class](../../mfc/reference/ccmdui-class.md), except that `ICommandUI` is used for MFC applications that interoperate with .NET components."},{"content":"<ph id=\"ph1\">`ICommandUI`</ph> is used within an <ph id=\"ph2\">`ON_UPDATE_COMMAND_UI`</ph> handler in an  -derived class.","pos":[14681,14765],"source":"`ICommandUI` is used within an `ON_UPDATE_COMMAND_UI` handler in an  -derived class."},{"content":"When a user of an application activates (selects or clicks) a menu, each menu item is displayed as enabled or disabled.","pos":[14766,14885]},{"content":"The target of each menu command provides this information by implementing an <ph id=\"ph1\">`ON_UPDATE_COMMAND_UI`</ph> handler.","pos":[14886,14994],"source":" The target of each menu command provides this information by implementing an `ON_UPDATE_COMMAND_UI` handler."},{"content":"For each of the command user interface objects in your application, use the Properties window to create a message-map entry and function prototype for each handler.","pos":[14995,15159]},{"pos":[15166,15385],"content":"For more information on how the <ph id=\"ph1\">`ICommandUI`</ph> interface is used in command routing, see <bpt id=\"p1\">[</bpt>How to: Add Command Routing to the Windows Forms Control<ept id=\"p1\">](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md)</ept>.","source":"For more information on how the `ICommandUI` interface is used in command routing, see [How to: Add Command Routing to the Windows Forms Control](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md)."},{"pos":[15392,15542],"content":"For more information on using Windows Forms, see <bpt id=\"p1\">[</bpt>Using a Windows Form User Control in MFC<ept id=\"p1\">](../../dotnet/using-a-windows-form-user-control-in-mfc.md)</ept>.","source":"For more information on using Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md)."},{"pos":[15549,15677],"content":"For more information on how user interface commands are managed in MFC, see <bpt id=\"p1\">[</bpt>CCmdUI Class<ept id=\"p1\">](../../mfc/reference/ccmdui-class.md)</ept>.","source":"For more information on how user interface commands are managed in MFC, see [CCmdUI Class](../../mfc/reference/ccmdui-class.md)."},{"pos":[15687,15738],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__check\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandUI::Check","linkify":"<a name=\"icommandui__check\"></a>  ICommandUI::Check","source":"<a name=\"icommandui__check\"></a>  ICommandUI::Check"},{"content":"Sets the user interface item for this command to the appropriate check state.","pos":[15742,15819]},{"pos":[15875,15882],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property sets the user interface item for this command to the appropriate check state.","pos":[15886,15977]},{"content":"Set <ph id=\"ph1\">`Check`</ph> to the following values:","pos":[15978,16014],"source":" Set `Check` to the following values:"},{"content":"Term","pos":[16021,16025]},{"content":"Definition","pos":[16026,16036]},{"content":"0","pos":[16073,16074]},{"content":"Uncheck","pos":[16075,16082]},{"content":"1","pos":[16087,16088]},{"content":"Check","pos":[16089,16094]},{"content":"2","pos":[16099,16100]},{"content":"Set indeterminate","pos":[16101,16118]},{"pos":[16129,16200],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__continuerouting\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandUI::ContinueRouting","linkify":"<a name=\"icommandui__continuerouting\"></a>  ICommandUI::ContinueRouting","source":"<a name=\"icommandui__continuerouting\"></a>  ICommandUI::ContinueRouting"},{"content":"Tells the command routing mechanism to continue routing the current message down the chain of handlers.","pos":[16204,16307]},{"pos":[16356,16363],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This is an advanced member function that should be used in conjunction with an <bpt id=\"p1\">[</bpt>ON_COMMAND_EX<ept id=\"p1\">](http://msdn.microsoft.com/library/0bb49090-aee8-4203-87c8-dd001d3dd26e)</ept> handler that returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[16367,16563],"source":"This is an advanced member function that should be used in conjunction with an [ON_COMMAND_EX](http://msdn.microsoft.com/library/0bb49090-aee8-4203-87c8-dd001d3dd26e) handler that returns `FALSE`."},{"content":"For more information, see Technical Note <bpt id=\"p1\">[</bpt>TN006: Message Maps<ept id=\"p1\">](../../mfc/tn006-message-maps.md)</ept>.","pos":[16564,16660],"source":" For more information, see Technical Note [TN006: Message Maps](../../mfc/tn006-message-maps.md)."},{"pos":[16670,16725],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__enabled\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandUI::Enabled","linkify":"<a name=\"icommandui__enabled\"></a>  ICommandUI::Enabled","source":"<a name=\"icommandui__enabled\"></a>  ICommandUI::Enabled"},{"content":"Enables or disables the user interface item for this command.","pos":[16729,16790]},{"pos":[16840,16847],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property enables or disables the user interface item for this command.","pos":[16851,16926]},{"content":"Set <ph id=\"ph1\">`Enabled`</ph> to <ph id=\"ph2\">`TRUE`</ph> to enable the item, <ph id=\"ph3\">`FALSE`</ph> to disable it.","pos":[16927,16993],"source":" Set `Enabled` to `TRUE` to enable the item, `FALSE` to disable it."},{"pos":[17003,17048],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__id\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandUI::ID","linkify":"<a name=\"icommandui__id\"></a>  ICommandUI::ID","source":"<a name=\"icommandui__id\"></a>  ICommandUI::ID"},{"pos":[17052,17132],"content":"Gets the ID of the user interface object represented by the <ph id=\"ph1\">`ICommandUI`</ph> object.","source":"Gets the ID of the user interface object represented by the `ICommandUI` object."},{"pos":[17185,17192],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17196,17337],"content":"This property gets the ID (a handle) of the menu item, toolbar button, or other user interface object represented by the <ph id=\"ph1\">`ICommandUI`</ph> object.","source":"This property gets the ID (a handle) of the menu item, toolbar button, or other user interface object represented by the `ICommandUI` object."},{"pos":[17347,17398],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__index\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandUI::Index","linkify":"<a name=\"icommandui__index\"></a>  ICommandUI::Index","source":"<a name=\"icommandui__index\"></a>  ICommandUI::Index"},{"pos":[17402,17485],"content":"Gets the index of the user interface object represented by the <ph id=\"ph1\">`ICommandUI`</ph> object.","source":"Gets the index of the user interface object represented by the `ICommandUI` object."},{"pos":[17541,17548],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17552,17696],"content":"This property gets the index (a handle) of the menu item, toolbar button, or other user interface object represented by the <ph id=\"ph1\">`ICommandUI`</ph> object.","source":"This property gets the index (a handle) of the menu item, toolbar button, or other user interface object represented by the `ICommandUI` object."},{"pos":[17706,17757],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__radio\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandUI::Radio","linkify":"<a name=\"icommandui__radio\"></a>  ICommandUI::Radio","source":"<a name=\"icommandui__radio\"></a>  ICommandUI::Radio"},{"content":"Sets the user interface item for this command to the appropriate check state.","pos":[17761,17838]},{"pos":[17886,17893],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property sets the user interface item for this command to the appropriate check state.","pos":[17897,17988]},{"content":"Set <ph id=\"ph1\">`Radio`</ph> to <ph id=\"ph2\">`TRUE`</ph> to enable the item; otherwise <ph id=\"ph3\">`FALSE`</ph>.","pos":[17989,18049],"source":" Set `Radio` to `TRUE` to enable the item; otherwise `FALSE`."},{"pos":[18059,18108],"content":"<bpt id=\"p1\">&lt;a name=\"icommandui__text\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ICommandUI::Text","linkify":"<a name=\"icommandui__text\"></a>  ICommandUI::Text","source":"<a name=\"icommandui__text\"></a>  ICommandUI::Text"},{"content":"Sets the text of the user interface item for this command.","pos":[18112,18170]},{"pos":[18220,18227],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property sets the text of the user interface item for this command.","pos":[18231,18303]},{"content":"Set <ph id=\"ph1\">`Text`</ph> to a text string handle.","pos":[18304,18339],"source":" Set `Text` to a text string handle."},{"pos":[18349,18396],"content":"<bpt id=\"p1\">&lt;a name=\"iview_interface\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IView Interface","linkify":"<a name=\"iview_interface\"></a>  IView Interface","source":"<a name=\"iview_interface\"></a>  IView Interface"},{"pos":[18400,18545],"content":"Implements several methods that <bpt id=\"p1\">[</bpt>CWinFormsView<ept id=\"p1\">](../../mfc/reference/cwinformsview-class.md)</ept> uses to send view notifications to a managed control.","source":"Implements several methods that [CWinFormsView](../../mfc/reference/cwinformsview-class.md) uses to send view notifications to a managed control."},{"pos":[18594,18601],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`IView`</ph> implements several methods that <ph id=\"ph2\">`CWinFormsView`</ph> uses to forward common view notifications to a hosted managed control.","pos":[18605,18731],"source":"`IView` implements several methods that `CWinFormsView` uses to forward common view notifications to a hosted managed control."},{"content":"These are <bpt id=\"p1\">[</bpt>OnInitialUpdate<ept id=\"p1\">](../../mfc/reference/iview-interface.md)</ept>, <bpt id=\"p2\">[</bpt>OnUpdate<ept id=\"p2\">](../../mfc/reference/iview-interface.md)</ept> and <bpt id=\"p3\">[</bpt>OnActivateView<ept id=\"p3\">](../../mfc/reference/iview-interface.md)</ept>.","pos":[18732,18913],"source":" These are [OnInitialUpdate](../../mfc/reference/iview-interface.md), [OnUpdate](../../mfc/reference/iview-interface.md) and [OnActivateView](../../mfc/reference/iview-interface.md)."},{"pos":[18920,19036],"content":"<ph id=\"ph1\">`IView`</ph> is similar to <bpt id=\"p1\">[</bpt>CView<ept id=\"p1\">](../../mfc/reference/cview-class.md)</ept>, but is used only with managed views and controls.","source":"`IView` is similar to [CView](../../mfc/reference/cview-class.md), but is used only with managed views and controls."},{"pos":[19043,19193],"content":"For more information on using Windows Forms, see <bpt id=\"p1\">[</bpt>Using a Windows Form User Control in MFC<ept id=\"p1\">](../../dotnet/using-a-windows-form-user-control-in-mfc.md)</ept>.","source":"For more information on using Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md)."},{"pos":[19203,19262],"content":"<bpt id=\"p1\">&lt;a name=\"iview__onactivateview\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IView::OnActivateView","linkify":"<a name=\"iview__onactivateview\"></a>  IView::OnActivateView","source":"<a name=\"iview__onactivateview\"></a>  IView::OnActivateView"},{"content":"Called by MFC when a view is activated or deactivated.","pos":[19266,19320]},{"pos":[19381,19391],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Indicates whether the view is being activated or deactivated.","pos":[19409,19470]},{"pos":[19480,19541],"content":"<bpt id=\"p1\">&lt;a name=\"iview__oninitialupdate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IView::OnInitialUpdate","linkify":"<a name=\"iview__oninitialupdate\"></a>  IView::OnInitialUpdate","source":"<a name=\"iview__oninitialupdate\"></a>  IView::OnInitialUpdate"},{"content":"Called by the framework after the view is first attached to the document, but before the view is initially displayed.","pos":[19545,19662]},{"pos":[19711,19758],"content":"<bpt id=\"p1\">&lt;a name=\"iview__onupdate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IView::OnUpdate","linkify":"<a name=\"iview__onupdate\"></a>  IView::OnUpdate","source":"<a name=\"iview__onupdate\"></a>  IView::OnUpdate"},{"content":"Called by MFC after the view's document has been modified.","pos":[19762,19820]},{"pos":[19862,19869],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function allows the view to update its display to reflect modifications.","pos":[19873,19950]},{"pos":[19959,19967],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample COLLECT<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[19971,20021],"source":"[MFC Sample COLLECT](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[20024,20079],"source":" [CObject Class](../../mfc/reference/cobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept>","pos":[20082,20130],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md)"}],"content":"---\ntitle: \"CWordArray Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CWordArray\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"INT\"\n  - \"UINT\"\n  - \"indexed arrays\"\n  - \"arrays [C++], indexed\"\n  - \"WORD data type\"\n  - \"CWordArray class\"\nms.assetid: 2ba2c194-2c6c-40ff-9db4-e9dbe57e1f57\ncaps.latest.revision: 26\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CWordArray Class\nSupports arrays of 16-bit words.  \n  \n## Syntax  \n  \n```  \nclass CWordArray : public CObject  \n```  \n  \n## Members  \n The member functions of `CWordArray` are similar to the member functions of class [CObArray](../../mfc/reference/cobarray-class.md). Because of this similarity, you can use the `CObArray` reference documentation for member function specifics. Wherever you see a [CObject](../../mfc/reference/cobject-class.md) pointer as a function parameter or return value, substitute a **WORD**.  \n  \n `CObject* CObArray::GetAt( int <nIndex> ) const;`  \n  \n for example, translates to  \n  \n `WORD CWordArray::GetAt( int <nIndex> ) const;`  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObArray::CObArray](../../mfc/reference/cobarray-class.md#cobarray__cobarray)|Constructs an empty array.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObArray::Add](../../mfc/reference/cobarray-class.md#cobarray__add)|Adds an element to the end of the array; grows the array if necessary.|  \n|[CObArray::Append](../../mfc/reference/cobarray-class.md#cobarray__append)|Appends another array to the array; grows the array if necessary.|  \n|[CObArray::Copy](../../mfc/reference/cobarray-class.md#cobarray__copy)|Copies another array to the array; grows the array if necessary.|  \n|[CObArray::ElementAt](../../mfc/reference/cobarray-class.md#cobarray__elementat)|Returns a temporary reference to the element pointer within the array.|  \n|[CObArray::FreeExtra](../../mfc/reference/cobarray-class.md#cobarray__freeextra)|Frees all unused memory above the current upper bound.|  \n|[CObArray::GetAt](../../mfc/reference/cobarray-class.md#cobarray__getat)|Returns the value at a given index.|  \n|[CObArray::GetCount](../../mfc/reference/cobarray-class.md#cobarray__getcount)|Gets the number of elements in this array.|  \n|[CObArray::GetData](../../mfc/reference/cobarray-class.md#cobarray__getdata)|Allows access to elements in the array. Can be **NULL**.|  \n|[CObArray::GetSize](../../mfc/reference/cobarray-class.md#cobarray__getsize)|Gets the number of elements in this array.|  \n|[CObArray::GetUpperBound](../../mfc/reference/cobarray-class.md#cobarray__getupperbound)|Returns the largest valid index.|  \n|[CObArray::InsertAt](../../mfc/reference/cobarray-class.md#cobarray__insertat)|Inserts an element (or all the elements in another array) at a specified index.|  \n|[CObArray::IsEmpty](../../mfc/reference/cobarray-class.md#cobarray__isempty)|Determines if the array is empty.|  \n|[CObArray::RemoveAll](../../mfc/reference/cobarray-class.md#cobarray__removeall)|Removes all the elements from this array.|  \n|[CObArray::RemoveAt](../../mfc/reference/cobarray-class.md#cobarray__removeat)|Removes an element at a specific index.|  \n|[CObArray::SetAt](../../mfc/reference/cobarray-class.md#cobarray__setat)|Sets the value for a given index; array not allowed to grow.|  \n|[CObArray::SetAtGrow](../../mfc/reference/cobarray-class.md#cobarray__setatgrow)|Sets the value for a given index; grows the array if necessary.|  \n|[CObArray::SetSize](../../mfc/reference/cobarray-class.md#cobarray__setsize)|Sets the number of elements to be contained in this array.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObArray::operator &#91;&#93;](../../mfc/reference/cobarray-class.md#cobarray__operator_at)|Sets or gets the element at the specified index.|  \n  \n## Remarks  \n `CWordArray` incorporates the [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro to support serialization and dumping of its elements. If an array of words is stored to an archive, either with an overloaded insertion operator or with the [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize) member function, each element is, in turn, serialized.  \n  \n> [!NOTE]\n>  Before using an array, use `SetSize` to establish its size and allocate memory for it. If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.  \n  \n If you need a dump of individual elements in the array, you must set the depth of the dump context to 1 or greater.  \n  \n For more information on using `CWordArray`, see the article [Collections](../../mfc/collections.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CWordArray`  \n  \n## Requirements  \n **Header:** afxcoll.h  \n  \n##  <a name=\"icommandsource_interface\"></a>  ICommandSource Interface  \n Manages commands sent from a command source object to a user control.  \n  \n```  \ninterface class ICommandSource  \n```  \n  \n### Remarks  \n When you host a user control in an MFC View, [CWinFormsView Class](../../mfc/reference/cwinformsview-class.md) routes commands and update command UI messages to the user control to allow it to handle MFC commands (for example, frame menu items and toolbar buttons). By implementing  , you give the user control a reference to the `ICommandSource` object.  \n  \n See [How to: Add Command Routing to the Windows Forms Control](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md) for an example of how to use `ICommandTarget`.  \n  \n For more information on using Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md).  \n  \n##  <a name=\"icommandsource__addcommandhandler\"></a>  ICommandSource::AddCommandHandler  \n Adds a command handler to a command source object.  \n  \n```  \nvoid AddCommandHandler(\n    unsigned int cmdID,  \n    CommandHandler^ cmdHandler);\n```  \n  \n### Parameters  \n `cmdID`  \n The command ID.  \n  \n `cmdHandler`  \n A handle to the command handler method.  \n  \n### Remarks  \n This method adds the command handler `cmdHandler` to the command source object and maps the handler to `cmdID`.  \n  \n See [How to: Add Command Routing to the Windows Forms Control](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md) for an example of how to use `AddCommandHandler`.  \n  \n##  <a name=\"icommandsource__addcommandrangehandler\"></a>  ICommandSource::AddCommandRangeHandler  \n Adds a group of command handlers to a command source object.  \n  \n```  \nvoid AddCommandRangeHandler(\n    unsigned int cmdIDMin,  \n    unsigned int cmdIDMax,  \n    CommandHandler^ cmdHandler);\n```  \n  \n### Parameters  \n `cmdIDMin`  \n The beginning index of the command ID range.  \n  \n `cmdIDMax`  \n The ending index of the command ID range.  \n  \n `cmdHandler`  \n A handle to the message handler method to which the commands are mapped.  \n  \n### Remarks  \n This method maps a contiguous range of command IDs to a single message handler and adds it to the command source object. This is used for handling a group of related buttons with one method.  \n  \n##  <a name=\"icommandsource__addcommandrangeuihandler\"></a>  ICommandSource::AddCommandRangeUIHandler  \n Adds a group of user interface command message handlers to a command source object.  \n  \n```  \nvoid AddCommandRangeUIHandler(\n    unsigned int cmdIDMin,   \n    unsigned int cmdIDMax,   \n    CommandUIHandler^ cmdUIHandler);\n```  \n  \n### Parameters  \n `cmdIDMin`  \n The beginning index of the command ID range.  \n  \n `cmdIDMax`  \n The ending index of the command ID range.  \n  \n `cmdHandler`  \n A handle to the message handler method to which the commands are mapped.  \n  \n### Remarks  \n This method maps a contiguous range of command IDs to a single user interface command message handler and adds it to the command source object. This is used for handling a group of related buttons with one method.  \n  \n##  <a name=\"icommandsource__addcommanduihandler\"></a>  ICommandSource::AddCommandUIHandler  \n Adds a user interface command message handler to a command source object.  \n  \n```  \nvoid AddCommandUIHandler(\n    unsigned int cmdID,   \n    CommandUIHandler^ cmdUIHandler);\n```  \n  \n### Parameters  \n `cmdID`  \n The command ID.  \n  \n `cmdUIHandler`  \n A handle to the user interface command message handler method.  \n  \n### Remarks  \n This method adds the user interface command message handler `cmdHandler` to the command source object and maps the handler to `cmdID`.  \n  \n##  <a name=\"icommandsource__postcommand\"></a>  ICommandSource::PostCommand  \n Posts a message without waiting for it to be processed.  \n  \n```  \nvoid PostCommand(unsigned int command);\n```  \n  \n### Parameters  \n `command`  \n The command ID of the message to be posted.  \n  \n### Remarks  \n This method asynchronously posts the message mapped to the ID specified by `command`. It calls [CWnd::PostMessage](../../mfc/reference/cwnd-class.md#cwnd__postmessage) to place the message in the window's message queue and then returns without waiting for the corresponding window to process the message.  \n  \n##  <a name=\"icommandsource__removecommandhandler\"></a>  ICommandSource::RemoveCommandHandler  \n Removes a command handler from a command source object.  \n  \n```  \nvoid RemoveCommandHandler(unsigned int cmdID);\n```  \n  \n### Parameters  \n `cmdID`  \n The command ID.  \n  \n### Remarks  \n This method removes the command handler mapped to `cmdID` from the command source object.  \n  \n##  <a name=\"icommandsource__removecommandrangehandler\"></a>  ICommandSource::RemoveCommandRangeHandler  \n Removes a group of command handlers from a command source object.  \n  \n```  \nvoid RemoveCommandRangeUIHandler(\n    unsigned int cmdIDMin,  \n    unsigned int cmdIDMax);\n```  \n  \n### Parameters  \n `cmdIDMin`  \n The beginning index of the command ID range.  \n  \n `cmdIDMax`  \n The ending index of the command ID range.  \n  \n### Remarks  \n This method removes a group of message handlers, mapped to the command IDs specifed by `cmdIDMin` and `cmdIDMax`, from the command source object.  \n  \n##  <a name=\"icommandsource__removecommandrangeuihandler\"></a>  ICommandSource::RemoveCommandRangeUIHandler  \n Removes a group of user interface command message handlers from a command source object.  \n  \n```  \nvoid RemoveCommandRangeUIHandler(\n    unsigned int cmdIDMin,  \n    unsigned int cmdIDMax);\n```  \n  \n### Parameters  \n `cmdIDMin`  \n The beginning index of the command ID range.  \n  \n `cmdIDMax`  \n The ending index of the command ID range.  \n  \n### Remarks  \n This method removes a group of user interface command message handlers, mapped to the command IDs specifed by `cmdIDMin` and `cmdIDMax`, from the command source object.  \n  \n##  <a name=\"icommandsource__removecommanduihandler\"></a>  ICommandSource::RemoveCommandUIHandler  \n Removes a user interface command message handler from a command source object.  \n  \n```  \nvoid RemoveCommandUIHandler(unsigned int cmdID);\n```  \n  \n### Parameters  \n `cmdID`  \n The command ID.  \n  \n### Remarks  \n This method removes the user interface command message handler mapped to `cmdID` from the command source object.  \n  \n##  <a name=\"icommandsource__sendcommand\"></a>  ICommandSource::SendCommand  \n Sends a message and waits for it to be processed before returning.  \n  \n```  \nvoid SendCommand(unsigned int command);\n```  \n  \n### Parameters  \n `command`  \n The command ID of the message to be sent.  \n  \n### Remarks  \n This method synchronously sends the message mapped to the ID specified by `command`. It calls [CWnd::SendMessage](../../mfc/reference/cwnd-class.md#cwnd__sendmessage) to place the message in the window's message queue and waits until that window procedure has processed the message before returning.  \n  \n##  <a name=\"icommandtarget_interface\"></a>  ICommandTarget Interface  \n Provides a user control with an interface to receive commands from a command source object.  \n  \n```  \ninterface class ICommandTarget  \n```  \n  \n### Remarks  \n When you host a user control in an MFC View, [CWinFormsView](../../mfc/reference/cwinformsview-class.md) routes commands and update command UI messages to the user control to allow it to handle MFC commands (for example, frame menu items and toolbar buttons). By implementing `ICommandTarget`, you give the user control a reference to the  object.  \n  \n See [How to: Add Command Routing to the Windows Forms Control](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md) for an example of how to use `ICommandTarget`.  \n  \n For more information on using Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md).  \n  \n##  <a name=\"icommandtarget__initialize\"></a>  ICommandTarget::Initialize  \n Initializes the command target object.  \n  \n```  \nvoid Initialize(ICommandSource^ cmdSource);\n```  \n  \n### Parameters  \n `cmdSource`  \n A handle to the command source object.  \n  \n### Remarks  \n When you host a user control in an MFC View, [CWinFormsView](../../mfc/reference/cwinformsview-class.md) routes commands and update command UI messages to the user control to allow it to handle MFC commands.  \n  \n This method initializes the command target object and associates it with the specified command source object `cmdSource`. It should be called in the user control class implementation. At initialization, you should register command handlers with the command source object by calling [ICommandSource::AddCommandHandler](../../mfc/reference/icommandsource-interface.md) in the `Initialize` implementation. See [How to: Add Command Routing to the Windows Forms Control](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md) for an example of how to use `Initialize` to do this.  \n  \n##  <a name=\"icommandui_interface\"></a>  ICommandUI Interface  \n Manages user interface commands.  \n  \n```  \ninterface class ICommandUI  \n```  \n  \n### Remarks  \n This interface provides methods and properties that manage user interface commands. `ICommandUI` is similar to [CCmdUI Class](../../mfc/reference/ccmdui-class.md), except that `ICommandUI` is used for MFC applications that interoperate with .NET components.  \n  \n `ICommandUI` is used within an `ON_UPDATE_COMMAND_UI` handler in an  -derived class. When a user of an application activates (selects or clicks) a menu, each menu item is displayed as enabled or disabled. The target of each menu command provides this information by implementing an `ON_UPDATE_COMMAND_UI` handler. For each of the command user interface objects in your application, use the Properties window to create a message-map entry and function prototype for each handler.  \n  \n For more information on how the `ICommandUI` interface is used in command routing, see [How to: Add Command Routing to the Windows Forms Control](../../dotnet/how-to-add-command-routing-to-the-windows-forms-control.md).  \n  \n For more information on using Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md).  \n  \n For more information on how user interface commands are managed in MFC, see [CCmdUI Class](../../mfc/reference/ccmdui-class.md).  \n  \n##  <a name=\"icommandui__check\"></a>  ICommandUI::Check  \n Sets the user interface item for this command to the appropriate check state.  \n  \n```  \nproperty UICheckState Check;  \n```  \n  \n### Remarks  \n This property sets the user interface item for this command to the appropriate check state. Set `Check` to the following values:  \n  \n|Term|Definition|  \n|----------|----------------|  \n|0|Uncheck|  \n|1|Check|  \n|2|Set indeterminate|  \n  \n##  <a name=\"icommandui__continuerouting\"></a>  ICommandUI::ContinueRouting  \n Tells the command routing mechanism to continue routing the current message down the chain of handlers.  \n  \n```  \nvoid ContinueRouting();\n```  \n  \n### Remarks  \n This is an advanced member function that should be used in conjunction with an [ON_COMMAND_EX](http://msdn.microsoft.com/library/0bb49090-aee8-4203-87c8-dd001d3dd26e) handler that returns `FALSE`. For more information, see Technical Note [TN006: Message Maps](../../mfc/tn006-message-maps.md).  \n  \n##  <a name=\"icommandui__enabled\"></a>  ICommandUI::Enabled  \n Enables or disables the user interface item for this command.  \n  \n```  \nproperty bool Enabled;  \n```  \n  \n### Remarks  \n This property enables or disables the user interface item for this command. Set `Enabled` to `TRUE` to enable the item, `FALSE` to disable it.  \n  \n##  <a name=\"icommandui__id\"></a>  ICommandUI::ID  \n Gets the ID of the user interface object represented by the `ICommandUI` object.  \n  \n```  \nproperty unsigned int ID;  \n```  \n  \n### Remarks  \n This property gets the ID (a handle) of the menu item, toolbar button, or other user interface object represented by the `ICommandUI` object.  \n  \n##  <a name=\"icommandui__index\"></a>  ICommandUI::Index  \n Gets the index of the user interface object represented by the `ICommandUI` object.  \n  \n```  \nproperty unsigned int Index;  \n```  \n  \n### Remarks  \n This property gets the index (a handle) of the menu item, toolbar button, or other user interface object represented by the `ICommandUI` object.  \n  \n##  <a name=\"icommandui__radio\"></a>  ICommandUI::Radio  \n Sets the user interface item for this command to the appropriate check state.  \n  \n```  \nproperty bool Radio;  \n```  \n  \n### Remarks  \n This property sets the user interface item for this command to the appropriate check state. Set `Radio` to `TRUE` to enable the item; otherwise `FALSE`.  \n  \n##  <a name=\"icommandui__text\"></a>  ICommandUI::Text  \n Sets the text of the user interface item for this command.  \n  \n```  \nproperty String^ Text;  \n```  \n  \n### Remarks  \n This property sets the text of the user interface item for this command. Set `Text` to a text string handle.  \n  \n##  <a name=\"iview_interface\"></a>  IView Interface  \n Implements several methods that [CWinFormsView](../../mfc/reference/cwinformsview-class.md) uses to send view notifications to a managed control.  \n  \n```  \ninterface class IView  \n```  \n  \n### Remarks  \n `IView` implements several methods that `CWinFormsView` uses to forward common view notifications to a hosted managed control. These are [OnInitialUpdate](../../mfc/reference/iview-interface.md), [OnUpdate](../../mfc/reference/iview-interface.md) and [OnActivateView](../../mfc/reference/iview-interface.md).  \n  \n `IView` is similar to [CView](../../mfc/reference/cview-class.md), but is used only with managed views and controls.  \n  \n For more information on using Windows Forms, see [Using a Windows Form User Control in MFC](../../dotnet/using-a-windows-form-user-control-in-mfc.md).  \n  \n##  <a name=\"iview__onactivateview\"></a>  IView::OnActivateView  \n Called by MFC when a view is activated or deactivated.  \n  \n```  \nvoid OnActivateView(bool activate);\n```  \n  \n### Parameters  \n `activate`  \n Indicates whether the view is being activated or deactivated.  \n  \n##  <a name=\"iview__oninitialupdate\"></a>  IView::OnInitialUpdate  \n Called by the framework after the view is first attached to the document, but before the view is initially displayed.  \n  \n```  \nvoid OnInitialUpdate();\n```  \n  \n##  <a name=\"iview__onupdate\"></a>  IView::OnUpdate  \n Called by MFC after the view's document has been modified.  \n  \n```  \nvoid OnUpdate();\n```  \n  \n### Remarks  \n This function allows the view to update its display to reflect modifications.  \n  \n## See Also  \n [MFC Sample COLLECT](../../visual-cpp-samples.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}