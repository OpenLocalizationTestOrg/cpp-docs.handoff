{"nodes":[{"pos":[12,44],"content":"rts_alloc Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"rts_alloc Class | Microsoft Docs","pos":[0,32]}]},{"content":"rts_alloc Class","pos":[681,696]},{"pos":[697,935],"content":"The rts_alloc template class describes a <bpt id=\"p1\">[</bpt>filter<ept id=\"p1\">](../standard-library/allocators-header.md)</ept> that holds an array of cache instances and determines which instance to use for allocation and deallocation at runtime instead of at compile time.","source":"The rts_alloc template class describes a [filter](../standard-library/allocators-header.md) that holds an array of cache instances and determines which instance to use for allocation and deallocation at runtime instead of at compile time."},{"content":"Syntax","pos":[944,950]},{"content":"Parameters","pos":[1015,1025]},{"content":"Parameter","pos":[1032,1041]},{"content":"Description","pos":[1042,1053]},{"content":"The type of cache instances contained in the array.","pos":[1104,1155]},{"content":"This can be <bpt id=\"p1\">[</bpt>cache_chunklist Class<ept id=\"p1\">](../standard-library/cache-chunklist-class.md)</ept>, <bpt id=\"p2\">[</bpt>cache_freelist<ept id=\"p2\">](../standard-library/cache-freelist-class.md)</ept>, or <bpt id=\"p3\">[</bpt>cache_suballoc<ept id=\"p3\">](../standard-library/cache-suballoc-class.md)</ept>.","pos":[1156,1367],"source":" This can be [cache_chunklist Class](../standard-library/cache-chunklist-class.md), [cache_freelist](../standard-library/cache-freelist-class.md), or [cache_suballoc](../standard-library/cache-suballoc-class.md)."},{"content":"Remarks","pos":[1377,1384]},{"content":"This template class holds multiple block allocator instances and determines which instance to use for allocation or deallocation at runtime instead of at compile time.","pos":[1388,1555]},{"content":"It is used with compilers that cannot compile rebind.","pos":[1556,1609]},{"content":"Member Functions","pos":[1619,1635]},{"content":"allocate","pos":[1657,1665]},{"content":"Allocates a block of memory.","pos":[1689,1717]},{"content":"deallocate","pos":[1723,1733]},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[1759,1842]},{"content":"equals","pos":[1848,1854]},{"content":"Compares two caches for equality.","pos":[1876,1909]},{"content":"Requirements","pos":[1919,1931]},{"pos":[1935,1960],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>allocators&gt;","source":"**Header:** \\<allocators>"},{"pos":[1967,1988],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[2034,2053],"content":"rts_alloc::allocate"},{"content":"Allocates a block of memory.","pos":[2057,2085]},{"content":"Parameters","pos":[2143,2153]},{"content":"Parameter","pos":[2160,2169]},{"content":"Description","pos":[2170,2181]},{"content":"The number of elements in the array to be allocated.","pos":[2232,2284]},{"content":"Return Value","pos":[2295,2307]},{"content":"A pointer to the allocated object.","pos":[2311,2345]},{"content":"Remarks","pos":[2355,2362]},{"content":"The member function returns <ph id=\"ph1\">`caches[_IDX].allocate(count)`</ph>, where the index <ph id=\"ph2\">`_IDX`</ph> is determined by the requested block size <ph id=\"ph3\">`count`</ph>, or, if <ph id=\"ph4\">`count`</ph> is too large, it returns <ph id=\"ph5\">`operator new(count)`</ph>.","pos":[2366,2562],"source":"The member function returns `caches[_IDX].allocate(count)`, where the index `_IDX` is determined by the requested block size `count`, or, if `count` is too large, it returns `operator new(count)`."},{"content":", which represents the cache object.","pos":[2570,2606]},{"pos":[2654,2675],"content":"rts_alloc::deallocate"},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[2679,2762]},{"content":"Parameters","pos":[2832,2842]},{"content":"Parameter","pos":[2849,2858]},{"content":"Description","pos":[2859,2870]},{"content":"A pointer to the first object to be deallocated from storage.","pos":[2919,2980]},{"content":"The number of objects to be deallocated from storage.","pos":[2993,3046]},{"content":"Remarks","pos":[3057,3064]},{"pos":[3068,3270],"content":"The member function calls <ph id=\"ph1\">`caches[_IDX].deallocate(ptr, count)`</ph>, where the index <ph id=\"ph2\">`_IDX`</ph> is determined by the requested block size <ph id=\"ph3\">`count`</ph>, or, if <ph id=\"ph4\">`count`</ph> is too large, it returns <ph id=\"ph5\">`operator delete(ptr)`</ph>.","source":"The member function calls `caches[_IDX].deallocate(ptr, count)`, where the index `_IDX` is determined by the requested block size `count`, or, if `count` is too large, it returns `operator delete(ptr)`."},{"pos":[3314,3331],"content":"rts_alloc::equals"},{"content":"Compares two caches for equality.","pos":[3335,3368]},{"content":"Parameters","pos":[3438,3448]},{"content":"Parameter","pos":[3455,3464]},{"content":"Description","pos":[3465,3476]},{"content":"The cache object associated with the filter.","pos":[3528,3572]},{"content":"The cache object to compare for equality.","pos":[3586,3627]},{"content":"Remarks","pos":[3638,3645]},{"content":"if the result of <ph id=\"ph1\">`caches[0].equals(other.caches[0])`</ph>; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[3656,3729],"source":" if the result of `caches[0].equals(other.caches[0])`; otherwise, `false`."},{"content":"represents the array of cache objects.","pos":[3739,3777]},{"content":"See Also","pos":[3786,3794]},{"content":"ALLOCATOR_DECL","pos":[3799,3813]},{"content":"allocators&gt;","pos":[3882,3893],"source":"allocators>"}],"content":"---\ntitle: \"rts_alloc Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"stdext::rts_alloc\"\n  - \"allocators/stdext::rts_alloc\"\n  - \"rts_alloc\"\n  - \"stdext.rts_alloc\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"rts_alloc class\"\nms.assetid: ab41bffa-83d1-4a1c-87b9-5707d516931f\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# rts_alloc Class\nThe rts_alloc template class describes a [filter](../standard-library/allocators-header.md) that holds an array of cache instances and determines which instance to use for allocation and deallocation at runtime instead of at compile time.  \n  \n## Syntax  \n  \n```\ntemplate <class Cache>  \nclass rts_alloc\n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Cache`|The type of cache instances contained in the array. This can be [cache_chunklist Class](../standard-library/cache-chunklist-class.md), [cache_freelist](../standard-library/cache-freelist-class.md), or [cache_suballoc](../standard-library/cache-suballoc-class.md).|  \n  \n## Remarks  \n This template class holds multiple block allocator instances and determines which instance to use for allocation or deallocation at runtime instead of at compile time. It is used with compilers that cannot compile rebind.  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[allocate](#rts_alloc__allocate)|Allocates a block of memory.|  \n|[deallocate](#rts_alloc__deallocate)|Frees a specified number of objects from storage beginning at a specified position.|  \n|[equals](#rts_alloc__equals)|Compares two caches for equality.|  \n  \n## Requirements  \n **Header:** \\<allocators>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"rts_alloc__allocate\"></a>  rts_alloc::allocate  \n Allocates a block of memory.  \n  \n```\nvoid *allocate(std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`count`|The number of elements in the array to be allocated.|  \n  \n### Return Value  \n A pointer to the allocated object.  \n  \n### Remarks  \n The member function returns `caches[_IDX].allocate(count)`, where the index `_IDX` is determined by the requested block size `count`, or, if `count` is too large, it returns `operator new(count)`. `cache`, which represents the cache object.  \n  \n##  <a name=\"rts_alloc__deallocate\"></a>  rts_alloc::deallocate  \n Frees a specified number of objects from storage beginning at a specified position.  \n  \n```\nvoid deallocate(void* ptr, std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`ptr`|A pointer to the first object to be deallocated from storage.|  \n|`count`|The number of objects to be deallocated from storage.|  \n  \n### Remarks  \n The member function calls `caches[_IDX].deallocate(ptr, count)`, where the index `_IDX` is determined by the requested block size `count`, or, if `count` is too large, it returns `operator delete(ptr)`.  \n  \n##  <a name=\"rts_alloc__equals\"></a>  rts_alloc::equals  \n Compares two caches for equality.  \n  \n```\nbool equals(const sync<_Cache>& _Other) const;\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`_Cache`|The cache object associated with the filter.|  \n|`_Other`|The cache object to compare for equality.|  \n  \n### Remarks  \n `true` if the result of `caches[0].equals(other.caches[0])`; otherwise, `false`. `caches` represents the array of cache objects.  \n  \n## See Also  \n [ALLOCATOR_DECL](../standard-library/allocators-functions.md#allocator_decl)   \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n"}