{"nodes":[{"pos":[12,60],"content":"multiset::lower_bound (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"multiset::lower_bound (STL-CLR) | Microsoft Docs","pos":[0,48]}]},{"content":"multiset::lower_bound (STL/CLR)","pos":[650,681]},{"content":"Finds beginning of range that matches a specified key.","pos":[682,736]},{"content":"Syntax","pos":[745,751]},{"content":"Parameters","pos":[815,825]},{"content":"key","pos":[829,832]},{"content":"Key value to search for.","pos":[836,860]},{"content":"Remarks","pos":[869,876]},{"content":"The member function determines the first element <ph id=\"ph1\">`X`</ph> in the controlled sequence that has equivalent ordering to <ph id=\"ph2\">`key`</ph>.","pos":[880,998],"source":"The member function determines the first element `X` in the controlled sequence that has equivalent ordering to `key`."},{"content":"If no such element exists, it returns <bpt id=\"p1\">[</bpt>multiset::end (STL/CLR)<ept id=\"p1\">](../dotnet/multiset-end-stl-clr.md)</ept><ph id=\"ph1\">`()`</ph>; otherwise it returns an iterator that designates <ph id=\"ph2\">`X`</ph>.","pos":[999,1156],"source":" If no such element exists, it returns [multiset::end (STL/CLR)](../dotnet/multiset-end-stl-clr.md)`()`; otherwise it returns an iterator that designates `X`."},{"content":"You use it to locate the beginning of a sequence of elements currently in the controlled sequence that match a specified key.","pos":[1157,1282]},{"content":"Example","pos":[1291,1298]},{"content":"Requirements","pos":[2203,2215]},{"pos":[2219,2244],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/set&gt;","source":"**Header:** \\<cliext/set>"},{"pos":[2251,2272],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2281,2289]},{"content":"multiset (STL/CLR)","pos":[2294,2312]},{"content":"multiset::count (STL/CLR)","pos":[2350,2375]},{"content":"multiset::equal_range (STL/CLR)","pos":[2419,2450]},{"content":"multiset::find (STL/CLR)","pos":[2500,2524]},{"content":"multiset::upper_bound (STL/CLR)","pos":[2567,2598]}],"content":"---\ntitle: \"multiset::lower_bound (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::multiset::lower_bound\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"lower_bound member [STL/CLR]\"\nms.assetid: 5e3d1ba0-8b03-436e-b502-dbdb764f452b\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# multiset::lower_bound (STL/CLR)\nFinds beginning of range that matches a specified key.  \n  \n## Syntax  \n  \n```  \niterator lower_bound(key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n The member function determines the first element `X` in the controlled sequence that has equivalent ordering to `key`. If no such element exists, it returns [multiset::end (STL/CLR)](../dotnet/multiset-end-stl-clr.md)`()`; otherwise it returns an iterator that designates `X`. You use it to locate the beginning of a sequence of elements currently in the controlled sequence that match a specified key.  \n  \n## Example  \n  \n```  \n// cliext_multiset_lower_bound.cpp   \n// compile with: /clr   \n#include <cliext/set>   \n  \ntypedef cliext::multiset<wchar_t> Mymultiset;   \nint main()   \n    {   \n    Mymultiset c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display initial contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"lower_bound(L'x')==end() = {0}\",   \n        c1.lower_bound(L'x') == c1.end());   \n  \n    System::Console::WriteLine(\"*lower_bound(L'a') = {0}\",   \n        *c1.lower_bound(L'a'));   \n    System::Console::WriteLine(\"*lower_bound(L'b') = {0}\",   \n        *c1.lower_bound(L'b'));   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \nlower_bound(L'x')==end() = True  \n*lower_bound(L'a') = a  \n*lower_bound(L'b') = b  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [multiset (STL/CLR)](../dotnet/multiset-stl-clr.md)   \n [multiset::count (STL/CLR)](../dotnet/multiset-count-stl-clr.md)   \n [multiset::equal_range (STL/CLR)](../dotnet/multiset-equal-range-stl-clr.md)   \n [multiset::find (STL/CLR)](../dotnet/multiset-find-stl-clr.md)   \n [multiset::upper_bound (STL/CLR)](../dotnet/multiset-upper-bound-stl-clr.md)"}