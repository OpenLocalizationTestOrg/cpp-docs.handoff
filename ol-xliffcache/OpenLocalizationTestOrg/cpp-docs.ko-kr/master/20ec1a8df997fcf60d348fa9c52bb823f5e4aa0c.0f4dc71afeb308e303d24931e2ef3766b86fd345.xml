{"nodes":[{"pos":[12,87],"content":"snprintf, _snprintf, _snprintf_l, _snwprintf, _snwprintf_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"snprintf, _snprintf, _snprintf_l, _snwprintf, _snwprintf_l | Microsoft Docs","pos":[0,75]}]},{"content":"snprintf, _snprintf, _snprintf_l, _snwprintf, _snwprintf_l","pos":[1499,1557]},{"content":"Writes formatted data to a string.","pos":[1558,1592]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>_snprintf_s, _snprintf_s_l, _snwprintf_s, _snwprintf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/snprintf-s-snprintf-s-l-snwprintf-s-snwprintf-s-l.md)</ept>.","pos":[1593,1799],"source":" More secure versions of these functions are available; see [_snprintf_s, _snprintf_s_l, _snwprintf_s, _snwprintf_s_l](../../c-runtime-library/reference/snprintf-s-snprintf-s-l-snwprintf-s-snwprintf-s-l.md)."},{"content":"Syntax","pos":[1808,1814]},{"content":"Parameters","pos":[3106,3116]},{"content":"Storage location for the output.","pos":[3132,3164]},{"content":"Maximum number of characters to store.","pos":[3182,3220]},{"content":"Format-control string.","pos":[3239,3261]},{"content":"Optional arguments.","pos":[3282,3301]},{"content":"The locale to use.","pos":[3320,3338]},{"pos":[3345,3516],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specification Syntax: printf and wprintf Functions<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"content":"Return Value","pos":[3525,3537]},{"content":"Let <ph id=\"ph1\">`len`</ph> be the length of the formatted data string, not including the terminating null.","pos":[3541,3630],"source":"Let `len` be the length of the formatted data string, not including the terminating null."},{"content":"Both <ph id=\"ph1\">`len`</ph> and <ph id=\"ph2\">`count`</ph> are in bytes for <ph id=\"ph3\">`snprintf`</ph> and <ph id=\"ph4\">`_snprintf`</ph>, wide characters for <ph id=\"ph5\">`_snwprintf`</ph>.","pos":[3631,3732],"source":" Both `len` and `count` are in bytes for `snprintf` and `_snprintf`, wide characters for `_snwprintf`."},{"pos":[3739,3872],"content":"For all functions, if <ph id=\"ph1\">`len` &lt; `count`</ph>, <ph id=\"ph2\">`len`</ph> characters are stored in <ph id=\"ph3\">`buffer`</ph>, a null-terminator is appended, and <ph id=\"ph4\">`len`</ph> is returned.","source":"For all functions, if `len` < `count`, `len` characters are stored in `buffer`, a null-terminator is appended, and `len` is returned."},{"content":"The <ph id=\"ph1\">`snprintf`</ph> function truncates the output when <ph id=\"ph2\">`len`</ph> is greater than or equal to <ph id=\"ph3\">`count`</ph>, by placing a null-terminator at <ph id=\"ph4\">`buffer[count-1]`</ph>.","pos":[3879,4022],"source":"The `snprintf` function truncates the output when `len` is greater than or equal to `count`, by placing a null-terminator at `buffer[count-1]`."},{"content":"The value returned is <ph id=\"ph1\">`len`</ph>, the number of characters that would have been output if <ph id=\"ph2\">`count`</ph> was large enough.","pos":[4023,4133],"source":" The value returned is `len`, the number of characters that would have been output if `count` was large enough."},{"content":"The <ph id=\"ph1\">`snprintf`</ph> function returns a negative value if an encoding error occurs.","pos":[4134,4211],"source":" The `snprintf` function returns a negative value if an encoding error occurs."},{"content":"For all functions other than <ph id=\"ph1\">`snprintf`</ph>, if <ph id=\"ph2\">`len` = `count`</ph>, <ph id=\"ph3\">`len`</ph> characters are stored in <ph id=\"ph4\">`buffer`</ph>, no null-terminator is appended, and <ph id=\"ph5\">`len`</ph> is returned.","pos":[4218,4374],"source":"For all functions other than `snprintf`, if `len` = `count`, `len` characters are stored in `buffer`, no null-terminator is appended, and `len` is returned."},{"content":"If <ph id=\"ph1\">`len` &gt; `count`</ph>, <ph id=\"ph2\">`count`</ph> characters are stored in <ph id=\"ph3\">`buffer`</ph>, no null-terminator is appended, and a negative value is returned.","pos":[4375,4503],"source":" If `len` > `count`, `count` characters are stored in `buffer`, no null-terminator is appended, and a negative value is returned."},{"content":"If <ph id=\"ph1\">`buffer`</ph> is a null pointer and <ph id=\"ph2\">`count`</ph> is zero, <ph id=\"ph3\">`len`</ph> is returned as the count of characters required to format the output, not including the terminating null.","pos":[4510,4672],"source":"If `buffer` is a null pointer and `count` is zero, `len` is returned as the count of characters required to format the output, not including the terminating null."},{"content":"To make a successful call with the same <ph id=\"ph1\">`argument`</ph> and <ph id=\"ph2\">`locale`</ph> parameters, allocate a buffer holding at least <ph id=\"ph3\">`len`</ph> + 1 characters.","pos":[4673,4805],"source":" To make a successful call with the same `argument` and `locale` parameters, allocate a buffer holding at least `len` + 1 characters."},{"content":"If <ph id=\"ph1\">`buffer`</ph> is a null pointer and <ph id=\"ph2\">`count`</ph> is nonzero, or if <ph id=\"ph3\">`format`</ph> is a null pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[4812,5030],"source":"If `buffer` is a null pointer and `count` is nonzero, or if `format` is a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[5031,5122],"source":" If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`."},{"pos":[5129,5300],"content":"For information about these and other error codes, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information about these and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[5309,5316]},{"content":"The <ph id=\"ph1\">`snprintf`</ph> function and the <ph id=\"ph2\">`_snprintf`</ph> family of functions format and store <ph id=\"ph3\">`count`</ph> or fewer characters in <ph id=\"ph4\">`buffer`</ph>.","pos":[5320,5441],"source":"The `snprintf` function and the `_snprintf` family of functions format and store `count` or fewer characters in `buffer`."},{"content":"The <ph id=\"ph1\">`snprintf`</ph> function always stores a terminating null character, truncating the output if necessary.","pos":[5442,5545],"source":" The `snprintf` function always stores a terminating null character, truncating the output if necessary."},{"content":"The <ph id=\"ph1\">`_snprintf`</ph> family of functions only appends a terminating null character if the formatted string length is strictly less than <ph id=\"ph2\">`count`</ph> characters.","pos":[5546,5696],"source":" The `_snprintf` family of functions only appends a terminating null character if the formatted string length is strictly less than `count` characters."},{"content":"Each <ph id=\"ph1\">`argument`</ph> (if any) is converted and is output according to the corresponding format specification in <ph id=\"ph2\">`format`</ph>.","pos":[5697,5813],"source":" Each `argument` (if any) is converted and is output according to the corresponding format specification in `format`."},{"content":"The format consists of ordinary characters and has the same form and function as the <ph id=\"ph1\">`format`</ph> argument for <bpt id=\"p1\">[</bpt>printf<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept>.","pos":[5814,6002],"source":" The format consists of ordinary characters and has the same form and function as the `format` argument for [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)."},{"content":"If copying occurs between strings that overlap, the behavior is undefined.","pos":[6003,6077]},{"pos":[6085,6453],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string. Because the `_snprintf` functions do not guarantee NULL termination—in particular, when the return value is `count`—make sure that they are followed by code that adds the null terminator. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","leadings":["","> "],"nodes":[{"content":" Ensure that `format` is not a user-defined string. Because the `_snprintf` functions do not guarantee NULL termination—in particular, when the return value is `count`—make sure that they are followed by code that adds the null terminator. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","pos":[13,366],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[1,51],"source":" Ensure that `format` is not a user-defined string."},{"content":"Because the <ph id=\"ph1\">`_snprintf`</ph> functions do not guarantee NULL termination—in particular, when the return value is <ph id=\"ph2\">`count`</ph>—make sure that they are followed by code that adds the null terminator.","pos":[52,239],"source":" Because the `_snprintf` functions do not guarantee NULL termination—in particular, when the return value is `count`—make sure that they are followed by code that adds the null terminator."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[240,353],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."}]}]},{"content":"Beginning with the UCRT in Visual Studio 2015 and Windows 10, <ph id=\"ph1\">`snprintf`</ph> is no longer identical to <ph id=\"ph2\">`_snprintf`</ph>.","pos":[6460,6571],"source":"Beginning with the UCRT in Visual Studio 2015 and Windows 10, `snprintf` is no longer identical to `_snprintf`."},{"content":"The <ph id=\"ph1\">`snprintf`</ph> function behavior is now C99 standard compliant.","pos":[6572,6635],"source":" The `snprintf` function behavior is now C99 standard compliant."},{"content":"is a wide-character version of <ph id=\"ph1\">`_snprintf`</ph>; the pointer arguments to <ph id=\"ph2\">`_snwprintf`</ph> are wide-character strings.","pos":[6655,6764],"source":" is a wide-character version of `_snprintf`; the pointer arguments to `_snwprintf` are wide-character strings."},{"content":"Detection of encoding errors in <ph id=\"ph1\">`_snwprintf`</ph> might differ from that in <ph id=\"ph2\">`_snprintf`</ph>.","pos":[6765,6848],"source":" Detection of encoding errors in `_snwprintf` might differ from that in `_snprintf`."},{"content":", just like <ph id=\"ph1\">`swprintf`</ph>, writes output to a string instead of a destination of type <ph id=\"ph2\">`FILE`</ph>.","pos":[6861,6951],"source":", just like `swprintf`, writes output to a string instead of a destination of type `FILE`."},{"pos":[6958,7119],"content":"The versions of these functions that have the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions that have the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"content":"In C++, these functions have template overloads that invoke their newer, more secure counterparts.","pos":[7126,7224]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[7225,7333],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Generic-Text Routine Mappings","pos":[7343,7372]},{"content":"Tchar.h routine","pos":[7379,7394]},{"content":"_UNICODE and _MBCS not defined","pos":[7395,7425]},{"content":"_MBCS defined","pos":[7426,7439]},{"content":"_UNICODE defined","pos":[7440,7456]},{"content":"Requirements","pos":[7692,7704]},{"content":"Routine","pos":[7711,7718]},{"content":"Required header","pos":[7719,7734]},{"pos":[7789,7803],"content":", <ph id=\"ph1\">`_snprintf`</ph>,","source":", `_snprintf`,  "},{"content":"stdio.h&gt;","pos":[7821,7829],"source":"stdio.h>"},{"pos":[7846,7847],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[7865,7887],"source":"stdio.h> or \\<wchar.h>"},{"pos":[7895,7993],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[8002,8009]},{"content":"See Also","pos":[11531,11539]},{"content":"Stream I/O","pos":[11544,11554]},{"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l","pos":[11600,11657],"source":"sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l"},{"content":"fprintf, _fprintf_l, fwprintf, _fwprintf_l","pos":[11751,11793]},{"content":"printf, _printf_l, wprintf, _wprintf_l","pos":[11876,11914]},{"content":"scanf, _scanf_l, wscanf, _wscanf_l","pos":[11993,12027]},{"content":"sscanf, _sscanf_l, swscanf, _swscanf_l","pos":[12102,12140]},{"content":"vprintf Functions","pos":[12219,12236]}],"content":"---\ntitle: \"snprintf, _snprintf, _snprintf_l, _snwprintf, _snwprintf_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_snwprintf\"\n  - \"_snprintf\"\n  - \"_snprintf_l\"\n  - \"_snwprintf_l\"\n  - \"snprintf\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_snprintf\"\n  - \"snprintf_l\"\n  - \"snwprintf_l\"\n  - \"sntprintf\"\n  - \"snprintf\"\n  - \"_sntprintf\"\n  - \"_sntprintf_l\"\n  - \"sntprintf_l\"\n  - \"snwprintf\"\n  - \"_snprintf_l\"\n  - \"_snwprintf\"\n  - \"_snwprintf_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"snwprintf_l function\"\n  - \"sntprintf_l function\"\n  - \"snprintf_l function\"\n  - \"_snwprintf_l function\"\n  - \"_sntprintf_l function\"\n  - \"_snwprintf function\"\n  - \"_snprintf function\"\n  - \"_sntprintf function\"\n  - \"_snprintf_l function\"\n  - \"snwprintf function\"\n  - \"snprintf function\"\n  - \"sntprintf function\"\n  - \"formatted text [C++]\"\nms.assetid: 5976c9c8-876e-4ac9-a515-39f3f7fd0925\ncaps.latest.revision: 35\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# snprintf, _snprintf, _snprintf_l, _snwprintf, _snwprintf_l\nWrites formatted data to a string. More secure versions of these functions are available; see [_snprintf_s, _snprintf_s_l, _snwprintf_s, _snwprintf_s_l](../../c-runtime-library/reference/snprintf-s-snprintf-s-l-snwprintf-s-snwprintf-s-l.md).  \n  \n## Syntax  \n  \n```  \nint snprintf(  \n   char *buffer,  \n   size_t count,  \n   const char *format [,  \n   argument] ...   \n);  \nint _snprintf(  \n   char *buffer,  \n   size_t count,  \n   const char *format [,  \n   argument] ...   \n);  \nint _snprintf_l(  \n   char *buffer,  \n   size_t count,  \n   const char *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \nint _snwprintf(  \n   wchar_t *buffer,  \n   size_t count,  \n   const wchar_t *format [,  \n   argument] ...   \n);  \nint _snwprintf_l(  \n   wchar_t *buffer,  \n   size_t count,  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \ntemplate <size_t size>  \nint _snprintf(  \n   char (&buffer)[size],  \n   size_t count,  \n   const char *format [,  \n   argument] ...   \n); // C++ only  \ntemplate <size_t size>  \nint _snprintf_l(  \n   char (&buffer)[size],  \n   size_t count,  \n   const char *format,  \n   locale_t locale [,  \n   argument] ...   \n); // C++ only  \ntemplate <size_t size>  \nint _snwprintf(  \n   wchar_t (&buffer)[size],  \n   size_t count,  \n   const wchar_t *format [,  \n   argument] ...   \n); // C++ only  \ntemplate <size_t size>  \nint _snwprintf_l(  \n   wchar_t (&buffer)[size],  \n   size_t count,  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument] ...   \n); // C++ only  \n```  \n  \n#### Parameters  \n `buffer`  \n Storage location for the output.  \n  \n `count`  \n Maximum number of characters to store.  \n  \n `format`  \n Format-control string.  \n  \n `argument`  \n Optional arguments.  \n  \n `locale`  \n The locale to use.  \n  \n For more information, see [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n## Return Value  \n Let `len` be the length of the formatted data string, not including the terminating null. Both `len` and `count` are in bytes for `snprintf` and `_snprintf`, wide characters for `_snwprintf`.  \n  \n For all functions, if `len` < `count`, `len` characters are stored in `buffer`, a null-terminator is appended, and `len` is returned.  \n  \n The `snprintf` function truncates the output when `len` is greater than or equal to `count`, by placing a null-terminator at `buffer[count-1]`. The value returned is `len`, the number of characters that would have been output if `count` was large enough. The `snprintf` function returns a negative value if an encoding error occurs.  \n  \n For all functions other than `snprintf`, if `len` = `count`, `len` characters are stored in `buffer`, no null-terminator is appended, and `len` is returned. If `len` > `count`, `count` characters are stored in `buffer`, no null-terminator is appended, and a negative value is returned.  \n  \n If `buffer` is a null pointer and `count` is zero, `len` is returned as the count of characters required to format the output, not including the terminating null. To make a successful call with the same `argument` and `locale` parameters, allocate a buffer holding at least `len` + 1 characters.  \n  \n If `buffer` is a null pointer and `count` is nonzero, or if `format` is a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`.  \n  \n For information about these and other error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `snprintf` function and the `_snprintf` family of functions format and store `count` or fewer characters in `buffer`. The `snprintf` function always stores a terminating null character, truncating the output if necessary. The `_snprintf` family of functions only appends a terminating null character if the formatted string length is strictly less than `count` characters. Each `argument` (if any) is converted and is output according to the corresponding format specification in `format`. The format consists of ordinary characters and has the same form and function as the `format` argument for [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md). If copying occurs between strings that overlap, the behavior is undefined.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string. Because the `_snprintf` functions do not guarantee NULL termination—in particular, when the return value is `count`—make sure that they are followed by code that adds the null terminator. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n Beginning with the UCRT in Visual Studio 2015 and Windows 10, `snprintf` is no longer identical to `_snprintf`. The `snprintf` function behavior is now C99 standard compliant.  \n  \n `_snwprintf` is a wide-character version of `_snprintf`; the pointer arguments to `_snwprintf` are wide-character strings. Detection of encoding errors in `_snwprintf` might differ from that in `_snprintf`. `_snwprintf`, just like `swprintf`, writes output to a string instead of a destination of type `FILE`.  \n  \n The versions of these functions that have the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n In C++, these functions have template overloads that invoke their newer, more secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_sntprintf`|`_snprintf`|`_snprintf`|`_snwprintf`|  \n|`_sntprintf_l`|`_snprintf_l`|`_snprintf_l`|`_snwprintf_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`snprintf`, `_snprintf`,  `_snprintf_l`|\\<stdio.h>|  \n|`_snwprintf`, `_snwprintf_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```c  \n// crt_snprintf.c  \n// compile with: /W3  \n#include <stdio.h>  \n#include <stdlib.h>  \n  \n#if !defined(__cplusplus)  \ntypedef int bool;  \nconst bool true = 1;  \nconst bool false = 0;  \n#endif  \n  \n#define FAIL 0 // change to 1 and see what happens  \n  \nint main(void)  \n{  \n   char buffer[200];  \n   const static char s[] = \"computer\"  \n#if FAIL  \n\"computercomputercomputercomputercomputercomputercomputercomputer\"  \n\"computercomputercomputercomputercomputercomputercomputercomputer\"  \n\"computercomputercomputercomputercomputercomputercomputercomputer\"  \n\"computercomputercomputercomputercomputercomputercomputercomputer\"  \n#endif  \n   ;  \n   const char c = 'l';   \n   const int i = 35;  \n#if FAIL  \n   const double fp = 1e300; // doesn't fit in the buffer  \n#else  \n   const double fp = 1.7320534;  \n#endif  \n   /* !subtract one to prevent \"squeezing out\" the terminal nul! */  \n   const int bufferSize = sizeof(buffer)/sizeof(buffer[0]) - 1;  \n   int bufferUsed = 0;  \n   int bufferLeft = bufferSize - bufferUsed;  \n   bool bSuccess = true;  \n   buffer[0] = 0;  \n  \n   /* Format and print various data: */  \n  \n   if (bufferLeft > 0)  \n   {  \n      int perElementBufferUsed = _snprintf(&buffer[bufferUsed],   \n      bufferLeft, \"   String: %s\\n\", s ); // C4996  \n      // Note: _snprintf is deprecated; consider _snprintf_s instead  \n      if (bSuccess = (perElementBufferUsed >= 0))  \n      {  \n         bufferUsed += perElementBufferUsed;  \n         bufferLeft -= perElementBufferUsed;  \n         if (bufferLeft > 0)  \n         {  \n            int perElementBufferUsed = _snprintf(&buffer[bufferUsed],   \n            bufferLeft, \"   Character: %c\\n\", c ); // C4996  \n            if (bSuccess = (perElementBufferUsed >= 0))  \n            {  \n               bufferUsed += perElementBufferUsed;  \n               bufferLeft -= perElementBufferUsed;  \n               if (bufferLeft > 0)  \n               {  \n                  int perElementBufferUsed = _snprintf(&buffer  \n                  [bufferUsed], bufferLeft, \"   Integer: %d\\n\", i ); // C4996  \n                  if (bSuccess = (perElementBufferUsed >= 0))  \n                  {  \n                     bufferUsed += perElementBufferUsed;  \n                     bufferLeft -= perElementBufferUsed;  \n                     if (bufferLeft > 0)  \n                     {  \n                        int perElementBufferUsed = _snprintf(&buffer  \n                        [bufferUsed], bufferLeft, \"   Real: %f\\n\", fp ); // C4996  \n                        if (bSuccess = (perElementBufferUsed >= 0))  \n                        {  \n                           bufferUsed += perElementBufferUsed;  \n                        }  \n                     }  \n                  }  \n               }  \n            }  \n         }  \n      }  \n   }  \n  \n   if (!bSuccess)  \n   {  \n      printf(\"%s\\n\", \"failure\");  \n   }  \n   else  \n   {  \n      /* !store nul because _snprintf doesn't necessarily (if the string   \n       * fits without the terminal nul, but not with it)!  \n       * bufferUsed might be as large as bufferSize, which normally is   \n       * like going one element beyond a buffer, but in this case   \n       * subtracted one from bufferSize, so we're ok.  \n       */  \n      buffer[bufferUsed] = 0;  \n      printf( \"Output:\\n%s\\ncharacter count = %d\\n\", buffer, bufferUsed );  \n   }  \n   return EXIT_SUCCESS;  \n}  \n```  \n  \n```Output  \nOutput:  \n   String: computer  \n   Character: l  \n   Integer: 35  \n   Real: 1.732053  \n  \ncharacter count = 69  \n```  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)   \n [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)"}