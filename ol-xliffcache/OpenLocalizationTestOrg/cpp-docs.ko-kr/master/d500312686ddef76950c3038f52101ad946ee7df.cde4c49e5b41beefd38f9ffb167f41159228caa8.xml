{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 1) C4407 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 1) C4407 | Microsoft Docs","pos":[0,49]}]},{"content":"Compiler Warning (level 1) C4407","pos":[610,642]},{"content":"cast between different pointer to member representations, compiler may generate incorrect code","pos":[643,737]},{"content":"An incorrect cast was detected.","pos":[744,775]},{"content":"C4407 can be generated because of compiler conformance work that was done in Visual C++ 2005.","pos":[782,875]},{"content":"Pointer-to-member now requires a qualified name and the address-of operator (&amp;).","pos":[876,956],"source":" Pointer-to-member now requires a qualified name and the address-of operator (&)."},{"content":"C4407 can occur if you cast between a multiple inheritance pointer-to-member to a single inheritance pointer-to-member.","pos":[963,1082]},{"content":"Sometimes this can work, but sometimes it can’t because the single inheritance pointer-to-member representation doesn’t hold sufficient information.","pos":[1083,1231]},{"content":"Compiling with the <bpt id=\"p1\">**</bpt>/vmm<ept id=\"p1\">**</ept> might help (for more information, see <bpt id=\"p2\">[</bpt>/vmm, /vms, /vmv (General Purpose Representation)<ept id=\"p2\">](../../build/reference/vmm-vms-vmv-general-purpose-representation.md)</ept>).","pos":[1232,1420],"source":" Compiling with the **/vmm** might help (for more information, see [/vmm, /vms, /vmv (General Purpose Representation)](../../build/reference/vmm-vms-vmv-general-purpose-representation.md))."},{"content":"You can also try rearranging your base classes; the compiler is detecting a loss of information in the conversion because a base class is at a non-zero offset from the derived.","pos":[1421,1597]},{"content":"The following sample generates C4407:","pos":[1604,1641]}],"content":"---\ntitle: \"Compiler Warning (level 1) C4407 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4407\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4407\"\nms.assetid: 32bc2c21-363a-4bb8-b486-725faeaededc\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Warning (level 1) C4407\ncast between different pointer to member representations, compiler may generate incorrect code  \n  \n An incorrect cast was detected.  \n  \n C4407 can be generated because of compiler conformance work that was done in Visual C++ 2005. Pointer-to-member now requires a qualified name and the address-of operator (&).  \n  \n C4407 can occur if you cast between a multiple inheritance pointer-to-member to a single inheritance pointer-to-member. Sometimes this can work, but sometimes it can’t because the single inheritance pointer-to-member representation doesn’t hold sufficient information. Compiling with the **/vmm** might help (for more information, see [/vmm, /vms, /vmv (General Purpose Representation)](../../build/reference/vmm-vms-vmv-general-purpose-representation.md)). You can also try rearranging your base classes; the compiler is detecting a loss of information in the conversion because a base class is at a non-zero offset from the derived.  \n  \n The following sample generates C4407:  \n  \n```  \n// C4407.cpp  \n// compile with: /W1 /c  \nstruct C1 {};  \nstruct C2 {};  \nstruct C3 : C1, C2 {};  \n  \ntypedef void(C3::*PMF_C3)();  \ntypedef void(C2::*PMF_C2)();  \n  \nPMF_C2 f1(PMF_C3 pmf) {  \n   return (PMF_C2)pmf;   // C4407, change type of cast,  \n   // or reverse base class inheritance of C3 (i.e. : C2, C1)  \n}  \n```"}