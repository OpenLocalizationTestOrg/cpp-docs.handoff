{"nodes":[{"pos":[12,46],"content":"CFileDialog Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CFileDialog Class | Microsoft Docs","pos":[0,34]}]},{"content":"CFileDialog Class","pos":[665,682]},{"content":"Encapsulates the common dialog box that is used for file open or file save operations.","pos":[683,769]},{"content":"Syntax","pos":[778,784]},{"content":"Members","pos":[851,858]},{"content":"Public Constructors","pos":[868,887]},{"content":"Name","pos":[894,898]},{"content":"Description","pos":[899,910]},{"content":"CFileDialog::CFileDialog","pos":[949,973]},{"pos":[1002,1036],"content":"Constructs a <ph id=\"ph1\">`CFileDialog`</ph> object.","source":"Constructs a `CFileDialog` object."},{"content":"Public Methods","pos":[1047,1061]},{"content":"Name","pos":[1068,1072]},{"content":"Description","pos":[1073,1084]},{"content":"CFileDialog::AddCheckButton","pos":[1123,1150]},{"content":"Adds a check button to the dialog.","pos":[1182,1216]},{"content":"CFileDialog::AddComboBox","pos":[1222,1246]},{"content":"Adds a combo box to the dialog.","pos":[1275,1306]},{"content":"CFileDialog::AddControlItem","pos":[1312,1339]},{"content":"Adds an item to a container control in the dialog.","pos":[1371,1421]},{"content":"CFileDialog::AddEditBox","pos":[1427,1450]},{"content":"Adds an edit box to the dialog.","pos":[1478,1509]},{"content":"CFileDialog::AddMenu","pos":[1515,1535]},{"content":"Adds a menu to the dialog.","pos":[1560,1586]},{"content":"CFileDialog::AddPlace","pos":[1592,1613]},{"content":"Overloaded.","pos":[1639,1650]},{"content":"Adds a folder to the list of places available for the user to open or save items.","pos":[1651,1732]},{"content":"CFileDialog::AddPushButton","pos":[1738,1764]},{"content":"Adds a button to the dialog.","pos":[1795,1823]},{"content":"CFileDialog::AddRadioButtonList","pos":[1829,1860]},{"content":"Adds an option button (also known as radio button) group to the dialog.","pos":[1896,1967]},{"content":"CFileDialog::AddSeparator","pos":[1973,1998]},{"content":"Adds a separator to the dialog.","pos":[2028,2059]},{"content":"CFileDialog::AddText","pos":[2065,2085]},{"content":"Adds text content to the dialog.","pos":[2110,2142]},{"content":"CFileDialog::ApplyOFNToShellDialog","pos":[2148,2182]},{"pos":[2221,2332],"content":"Updates the state of the <ph id=\"ph1\">`CFileDialog`</ph> to match the parameters and flags stored in the <ph id=\"ph2\">`m_ofn`</ph> member variable.","source":"Updates the state of the `CFileDialog` to match the parameters and flags stored in the `m_ofn` member variable."},{"content":"CFileDialog::DoModal","pos":[2338,2358]},{"content":"Displays the dialog box and enables the user to make a selection.","pos":[2383,2448]},{"content":"CFileDialog::EnableOpenDropDown","pos":[2454,2485]},{"pos":[2521,2595],"content":"Enables a drop-down list on the <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Save<ept id=\"p2\">**</ept> button in the dialog.","source":"Enables a drop-down list on the **Open** or **Save** button in the dialog."},{"content":"CFileDialog::EndVisualGroup","pos":[2601,2628]},{"content":"Stops the addition of elements to a visual group in the dialog.","pos":[2660,2723]},{"content":"CFileDialog::GetCheckButtonState","pos":[2729,2761]},{"content":"Gets the current state of a check button (check box) in the dialog.","pos":[2798,2865]},{"content":"CFileDialog::GetControlItemState","pos":[2871,2903]},{"content":"Gets the current state of an item in a container control found in the dialog.","pos":[2940,3017]},{"content":"CFileDialog::GetControlState","pos":[3023,3051]},{"content":"Gets the current visibility and enabled states of a given control.","pos":[3084,3150]},{"content":"CFileDialog::GetEditBoxText","pos":[3156,3183]},{"content":"Gets the current text in an edit box control.","pos":[3215,3260]},{"content":"CFileDialog::GetFileExt","pos":[3266,3289]},{"content":"Returns the extension of the selected file.","pos":[3317,3360]},{"content":"CFileDialog::GetFileName","pos":[3366,3390]},{"content":"Returns the file name of the selected file.","pos":[3419,3462]},{"content":"CFileDialog::GetFileTitle","pos":[3468,3493]},{"content":"Returns the title of the selected file.","pos":[3523,3562]},{"content":"CFileDialog::GetFolderPath","pos":[3568,3594]},{"pos":[3625,3750],"content":"Retrieves the path of the currently open folder or directory for an Explorer-style <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Save As<ept id=\"p2\">**</ept> common dialog box.","source":"Retrieves the path of the currently open folder or directory for an Explorer-style **Open** or **Save As** common dialog box."},{"content":"CFileDialog::GetIFileDialogCustomize","pos":[3756,3792]},{"pos":[3833,3905],"content":"Retrieves the internal COM object for a customized <ph id=\"ph1\">`CFileDialog`</ph> object.","source":"Retrieves the internal COM object for a customized `CFileDialog` object."},{"content":"CFileDialog::GetIFileOpenDialog","pos":[3911,3942]},{"pos":[3978,4076],"content":"Retrieves the internal COM object for a <ph id=\"ph1\">`CFileDialog`</ph> that is used as an <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> file dialog box.","source":"Retrieves the internal COM object for a `CFileDialog` that is used as an **Open** file dialog box."},{"content":"CFileDialog::GetIFileSaveDialog","pos":[4082,4113]},{"pos":[4149,4246],"content":"Retrieves the internal COM object for a <ph id=\"ph1\">`CFileDialog`</ph> that is used as a <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept> file dialog box.","source":"Retrieves the internal COM object for a `CFileDialog` that is used as a **Save** file dialog box."},{"content":"CFileDialog::GetNextPathName","pos":[4252,4280]},{"content":"Returns the full path of the next selected file.","pos":[4313,4361]},{"content":"CFileDialog::GetOFN","pos":[4367,4386]},{"pos":[4410,4477],"content":"Retrieves the <ph id=\"ph1\">`OPENFILENAME`</ph> structure of the <ph id=\"ph2\">`CFileDialog`</ph> object.","source":"Retrieves the `OPENFILENAME` structure of the `CFileDialog` object."},{"content":"CFileDialog::GetPathName","pos":[4483,4507]},{"content":"Returns the full path of the selected file.","pos":[4536,4579]},{"content":"CFileDialog::GetReadOnlyPref","pos":[4585,4613]},{"content":"Returns the read-only status of the selected file.","pos":[4646,4696]},{"content":"CFileDialog::GetResult","pos":[4702,4724]},{"content":"Gets the choice that the user made in the dialog.","pos":[4751,4800]},{"content":"CFileDialog::GetResults","pos":[4806,4829]},{"content":"Gets the user's choices in a dialog that allows multiple selection.","pos":[4857,4924]},{"content":"CFileDialog::GetSelectedControlItem","pos":[4930,4965]},{"content":"Gets a particular item from specified container controls in the dialog.","pos":[5005,5076]},{"content":"CFileDialog::GetStartPosition","pos":[5082,5111]},{"content":"Returns the position of the first element of the file name list.","pos":[5145,5209]},{"content":"CFileDialog::HideControl","pos":[5215,5239]},{"pos":[5268,5359],"content":"Hides the specified control in an Explorer-style <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Save As<ept id=\"p2\">**</ept> common dialog box.","source":"Hides the specified control in an Explorer-style **Open** or **Save As** common dialog box."},{"content":"CFileDialog::IsPickFoldersMode","pos":[5365,5395]},{"content":"Determines if the current dialog in folder picker mode.","pos":[5430,5485]},{"content":"CFileDialog::MakeProminent","pos":[5491,5517]},{"content":"Places a control in the dialog so that it stands out compared to other added controls.","pos":[5548,5634]},{"content":"CFileDialog::RemoveControlItem","pos":[5640,5670]},{"content":"Removes an item from a container control in the dialog.","pos":[5705,5760]},{"content":"CFileDialog::SetCheckButtonState","pos":[5766,5798]},{"content":"Sets the current state of a check button (check box) in the dialog.","pos":[5835,5902]},{"content":"CFileDialog::SetControlItemState","pos":[5908,5940]},{"content":"Sets the current state of an item in a container control found in the dialog.","pos":[5977,6054]},{"content":"CFileDialog::SetControlItemText","pos":[6060,6091]},{"content":"Sets the text of a control item.","pos":[6127,6159]},{"content":"For example, the text that accompanies a radio button or an item in a menu.","pos":[6160,6235]},{"content":"CFileDialog::SetControlLabel","pos":[6241,6269]},{"content":"Sets the text associated with a control, such as button text or an edit box label.","pos":[6302,6384]},{"content":"CFileDialog::SetControlState","pos":[6390,6418]},{"content":"Sets the current visibility and enabled states of a given control.","pos":[6451,6517]},{"content":"CFileDialog::SetControlText","pos":[6523,6550]},{"pos":[6582,6685],"content":"Sets the text for the specified control in an Explorer-style <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Save As<ept id=\"p2\">**</ept> common dialog box.","source":"Sets the text for the specified control in an Explorer-style **Open** or **Save As** common dialog box."},{"content":"CFileDialog::SetDefExt","pos":[6691,6713]},{"pos":[6740,6841],"content":"Sets the default file name extension for an Explorer-style <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Save As<ept id=\"p2\">**</ept> common dialog box.","source":"Sets the default file name extension for an Explorer-style **Open** or **Save As** common dialog box."},{"content":"CFileDialog::SetEditBoxText","pos":[6847,6874]},{"content":"Sets the current text in an edit box control.","pos":[6906,6951]},{"content":"CFileDialog::SetProperties","pos":[6957,6983]},{"content":"Provides a property store that defines the default values to be used for the item being saved.","pos":[7014,7108]},{"content":"CFileDialog::SetSelectedControlItem","pos":[7114,7149]},{"content":"Sets the selected state of a particular item in an option button group or a combo box found in the dialog.","pos":[7189,7295]},{"content":"CFileDialog::SetTemplate","pos":[7301,7325]},{"pos":[7354,7412],"content":"Sets the dialog box template for the <ph id=\"ph1\">`CFileDialog`</ph> object.","source":"Sets the dialog box template for the `CFileDialog` object."},{"content":"CFileDialog::StartVisualGroup","pos":[7418,7447]},{"content":"Declares a visual group in the dialog.","pos":[7481,7519]},{"content":"Subsequent calls to any \"add\" method add those elements to this group.","pos":[7520,7590]},{"content":"CFileDialog::UpdateOFNFromShellDialog","pos":[7596,7633]},{"pos":[7675,7780],"content":"Updates the data stored in the <ph id=\"ph1\">`m_ofn`</ph> member variable to match the current state of the file dialog box.","source":"Updates the data stored in the `m_ofn` member variable to match the current state of the file dialog box."},{"content":"Protected Methods","pos":[7791,7808]},{"content":"Name","pos":[7815,7819]},{"content":"Description","pos":[7820,7831]},{"content":"CFileDialog::OnButtonClicked","pos":[7870,7898]},{"content":"Called when the button is clicked.","pos":[7931,7965]},{"content":"CFileDialog::OnCheckButtonToggled","pos":[7971,8004]},{"content":"Called when the check box is checked/unchecked.","pos":[8042,8089]},{"content":"CFileDialog::OnControlActivating","pos":[8095,8127]},{"content":"Called when the control is being active.","pos":[8164,8204]},{"content":"CFileDialog::OnFileNameChange","pos":[8210,8239]},{"pos":[8273,8319],"content":"Handles the <ph id=\"ph1\">`WM_NOTIFY CDN_SELCHANGE`</ph> message.","source":"Handles the `WM_NOTIFY CDN_SELCHANGE` message."},{"content":"CFileDialog::OnFileNameOK","pos":[8325,8350]},{"content":"Validates the file name entered in the dialog box.","pos":[8380,8430]},{"content":"CFileDialog::OnFolderChange","pos":[8436,8463]},{"pos":[8495,8544],"content":"Handles the <ph id=\"ph1\">`WM_NOTIFY CDN_FOLDERCHANGE`</ph> message.","source":"Handles the `WM_NOTIFY CDN_FOLDERCHANGE` message."},{"content":"CFileDialog::OnInitDone","pos":[8550,8573]},{"pos":[8601,8646],"content":"Handles the <ph id=\"ph1\">`WM_NOTIFY CDN_INITDONE`</ph> message.","source":"Handles the `WM_NOTIFY CDN_INITDONE` message."},{"content":"CFileDialog::OnItemSelected","pos":[8652,8679]},{"content":"Called when the container item is being selected.","pos":[8711,8760]},{"content":"CFileDialog::OnLBSelChangedNotify","pos":[8766,8799]},{"content":"Allows you to perform custom actions when the file selection changes.","pos":[8837,8906]},{"content":"CFileDialog::OnShareViolation","pos":[8912,8941]},{"content":"Handles share violations.","pos":[8975,9000]},{"content":"CFileDialog::OnTypeChange","pos":[9006,9031]},{"pos":[9061,9108],"content":"Handles the <ph id=\"ph1\">`WM_NOTIFY CDN_TYPECHANGE`</ph> message.","source":"Handles the `WM_NOTIFY CDN_TYPECHANGE` message."},{"content":"Public Data Members","pos":[9119,9138]},{"content":"Name","pos":[9145,9149]},{"content":"Description","pos":[9150,9161]},{"content":"CFileDialog::m_ofn","pos":[9200,9218]},{"content":"The Windows <ph id=\"ph1\">`OPENFILENAME`</ph> structure.","pos":[9241,9278],"source":"The Windows `OPENFILENAME` structure."},{"content":"Provides access to basic file dialog box parameters.","pos":[9279,9331]},{"content":"Remarks","pos":[9341,9348]},{"pos":[9352,9522],"content":"Common file dialog boxes let you implement file-selection dialog boxes, for example, <bpt id=\"p1\">**</bpt>Open File<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Save As<ept id=\"p2\">**</ept>, in a manner that is consistent with Windows standards.","source":"Common file dialog boxes let you implement file-selection dialog boxes, for example, **Open File** and **Save As**, in a manner that is consistent with Windows standards."},{"content":"You can use <bpt id=\"p1\">[</bpt>CFileDialog<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept> as is with the constructor provided, or you can derive your own dialog box class from <ph id=\"ph1\">`CFileDialog`</ph> and write a constructor to suit your needs.","pos":[9529,9740],"source":"You can use [CFileDialog](../../mfc/reference/cfiledialog-class.md) as is with the constructor provided, or you can derive your own dialog box class from `CFileDialog` and write a constructor to suit your needs."},{"content":"In either case, these dialog boxes will behave like standard MFC dialog boxes because they are derived from the <bpt id=\"p1\">[</bpt>CCommonDialog Class<ept id=\"p1\">](../../mfc/reference/ccommondialog-class.md)</ept>.","pos":[9741,9919],"source":" In either case, these dialog boxes will behave like standard MFC dialog boxes because they are derived from the [CCommonDialog Class](../../mfc/reference/ccommondialog-class.md)."},{"content":"relies on the COMMDLG.DLL file that is included in Windows.","pos":[9934,9993]},{"content":"Both the appearance and the functionality of the <ph id=\"ph1\">`CFileDialog`</ph> with <ph id=\"ph2\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> differ from the earlier versions of Windows.","pos":[10000,10194],"source":"Both the appearance and the functionality of the `CFileDialog` with [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] differ from the earlier versions of Windows."},{"content":"The default <ph id=\"ph1\">`CFileDialog`</ph> automatically uses the new <ph id=\"ph2\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style without code changes if a program is compiled and run under <ph id=\"ph3\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.","pos":[10195,10478],"source":" The default `CFileDialog` automatically uses the new [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style without code changes if a program is compiled and run under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]."},{"content":"Use the <ph id=\"ph1\">`bVistaStyle`</ph> parameter in the constructor to manually override this automatic update.","pos":[10479,10573],"source":" Use the `bVistaStyle` parameter in the constructor to manually override this automatic update."},{"content":"The exception to the automatic update is customized dialog boxes.","pos":[10574,10639]},{"content":"They will not be converted to the new style.","pos":[10640,10684]},{"content":"For more information about the constructor, see <bpt id=\"p1\">[</bpt>CFileDialog::CFileDialog<ept id=\"p1\">](#cfiledialog__cfiledialog)</ept>.","pos":[10685,10787],"source":" For more information about the constructor, see [CFileDialog::CFileDialog](#cfiledialog__cfiledialog)."},{"pos":[10795,11117],"content":"[!NOTE]\n The control ID system differs in [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] from earlier versions of Windows when you use a `CFileDialog`. You must update all references to `CFileDialog` controls in code before you can port your project from an earlier version of Windows.","leadings":["","> "],"nodes":[{"content":" The control ID system differs in [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] from earlier versions of Windows when you use a `CFileDialog`. You must update all references to `CFileDialog` controls in code before you can port your project from an earlier version of Windows.","pos":[8,320],"nodes":[{"content":"The control ID system differs in <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> from earlier versions of Windows when you use a <ph id=\"ph2\">`CFileDialog`</ph>.","pos":[1,178],"source":" The control ID system differs in [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] from earlier versions of Windows when you use a `CFileDialog`."},{"content":"You must update all references to <ph id=\"ph1\">`CFileDialog`</ph> controls in code before you can port your project from an earlier version of Windows.","pos":[179,312],"source":" You must update all references to `CFileDialog` controls in code before you can port your project from an earlier version of Windows."}]}]},{"content":"Some <ph id=\"ph1\">`CFileDialog`</ph> methods are not supported under <ph id=\"ph2\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.","pos":[11124,11257],"source":"Some `CFileDialog` methods are not supported under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]."},{"content":"Check the individual method topic for information about whether the method is supported.","pos":[11258,11346]},{"content":"In addition, the following inherited functions are not supported under <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>:","pos":[11347,11500],"source":" In addition, the following inherited functions are not supported under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]:"},{"content":"CDialog::OnInitDialog","pos":[11509,11530]},{"content":"CDialog::OnSetFont","pos":[11600,11618]},{"content":"The windows messages for the <ph id=\"ph1\">`CFileDialog`</ph> class vary based on what operating system you are using.","pos":[11683,11782],"source":"The windows messages for the `CFileDialog` class vary based on what operating system you are using."},{"content":"For example, Windows XP does not support <bpt id=\"p1\">[</bpt>CDialog::OnCancel<ept id=\"p1\">](../../mfc/reference/cdialog-class.md#cdialog__oncancel)</ept> and <bpt id=\"p2\">[</bpt>CDialog::OnOK<ept id=\"p2\">](../../mfc/reference/cdialog-class.md#cdialog__onok)</ept> for the <ph id=\"ph1\">`CFileDialog`</ph> class.","pos":[11783,12000],"source":" For example, Windows XP does not support [CDialog::OnCancel](../../mfc/reference/cdialog-class.md#cdialog__oncancel) and [CDialog::OnOK](../../mfc/reference/cdialog-class.md#cdialog__onok) for the `CFileDialog` class."},{"content":"However, <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> does support them.","pos":[12001,12110],"source":" However, [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] does support them."},{"content":"For more information about the different messages that are generated and the order in which they are received, see <bpt id=\"p1\">[</bpt>CFileDialog Sample: Logging Event Order<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[12111,12297],"source":" For more information about the different messages that are generated and the order in which they are received, see [CFileDialog Sample: Logging Event Order](../../visual-cpp-samples.md)."},{"content":"To use a <ph id=\"ph1\">`CFileDialog`</ph> object, first create the object by using the <ph id=\"ph2\">`CFileDialog`</ph> constructor.","pos":[12304,12398],"source":"To use a `CFileDialog` object, first create the object by using the `CFileDialog` constructor."},{"content":"After the dialog box has been constructed, you can set or modify any values in the <bpt id=\"p1\">[</bpt>CFileDialog::m_ofn<ept id=\"p1\">](#cfiledialog__m_ofn)</ept> structure to initialize the values or states of the dialog box controls.","pos":[12399,12596],"source":" After the dialog box has been constructed, you can set or modify any values in the [CFileDialog::m_ofn](#cfiledialog__m_ofn) structure to initialize the values or states of the dialog box controls."},{"content":"The <ph id=\"ph1\">`m_ofn`</ph> structure is of type <ph id=\"ph2\">`OPENFILENAME`</ph>.","pos":[12597,12645],"source":" The `m_ofn` structure is of type `OPENFILENAME`."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>OPENFILENAME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[12646,12820],"source":" For more information, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"After you initialize the dialog box controls, call the <bpt id=\"p1\">[</bpt>CFileDialog::DoModal<ept id=\"p1\">](#cfiledialog__domodal)</ept> method to display the dialog box so that the user can type the path and file name.","pos":[12827,13010],"source":"After you initialize the dialog box controls, call the [CFileDialog::DoModal](#cfiledialog__domodal) method to display the dialog box so that the user can type the path and file name."},{"content":"returns whether the user clicked the OK (IDOK) or the Cancel (IDCANCEL) button.","pos":[13021,13100]},{"content":"If <ph id=\"ph1\">`DoModal`</ph> returns IDOK, you can use one of the <ph id=\"ph2\">`CFileDialog`</ph> public member functions to retrieve the information put in by the user.","pos":[13101,13236],"source":" If `DoModal` returns IDOK, you can use one of the `CFileDialog` public member functions to retrieve the information put in by the user."},{"pos":[13244,13888],"content":"[!NOTE]\n Under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], multiple calls to [IFileDialog::SetFileTypes](http://msdn.microsoft.com/library/windows/desktop/bb775980) causes an error. The second call to `SetFileTypes` for any instance of a `CFileDialog` will return `E_UNEXPECTED` in [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]. Some `CFileDialog` method functions call `SetFileTypes`. For example, two calls to `CFileDialog::DoModal` for the same instance of a `CFileDialog` generates [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c).","leadings":["","> "],"nodes":[{"content":" Under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], multiple calls to [IFileDialog::SetFileTypes](http://msdn.microsoft.com/library/windows/desktop/bb775980) causes an error. The second call to `SetFileTypes` for any instance of a `CFileDialog` will return `E_UNEXPECTED` in [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]. Some `CFileDialog` method functions call `SetFileTypes`. For example, two calls to `CFileDialog::DoModal` for the same instance of a `CFileDialog` generates [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c).","pos":[8,642],"nodes":[{"content":"Under <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, multiple calls to <bpt id=\"p1\">[</bpt>IFileDialog::SetFileTypes<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775980)</ept> causes an error.","pos":[1,212],"source":" Under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], multiple calls to [IFileDialog::SetFileTypes](http://msdn.microsoft.com/library/windows/desktop/bb775980) causes an error."},{"content":"The second call to <ph id=\"ph1\">`SetFileTypes`</ph> for any instance of a <ph id=\"ph2\">`CFileDialog`</ph> will return <ph id=\"ph3\">`E_UNEXPECTED`</ph> in <ph id=\"ph4\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.","pos":[213,395],"source":" The second call to `SetFileTypes` for any instance of a `CFileDialog` will return `E_UNEXPECTED` in [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]."},{"content":"Some <ph id=\"ph1\">`CFileDialog`</ph> method functions call <ph id=\"ph2\">`SetFileTypes`</ph>.","pos":[396,452],"source":" Some `CFileDialog` method functions call `SetFileTypes`."},{"content":"For example, two calls to <ph id=\"ph1\">`CFileDialog::DoModal`</ph> for the same instance of a <ph id=\"ph2\">`CFileDialog`</ph> generates <bpt id=\"p1\">[</bpt>ASSERT<ept id=\"p1\">](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)</ept>.","pos":[453,634],"source":" For example, two calls to `CFileDialog::DoModal` for the same instance of a `CFileDialog` generates [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c)."}]}]},{"content":"includes several protected members that let you do custom handling of share violations, file name validation, and list-box change notification.","pos":[13909,14052]},{"content":"These protected members are callback functions that most applications do not have to use because default handling is performed automatically.","pos":[14053,14194]},{"content":"Message-map entries for these functions are not required because they are standard virtual functions.","pos":[14195,14296]},{"pos":[14303,14532],"content":"You can use the Windows <bpt id=\"p1\">[</bpt>CommDlgExtendedError<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646916)</ept> function to determine whether an error occurred during initialization of the dialog box and to learn more about the error.","source":"You can use the Windows [CommDlgExtendedError](http://msdn.microsoft.com/library/windows/desktop/ms646916) function to determine whether an error occurred during initialization of the dialog box and to learn more about the error."},{"content":"The destruction of <ph id=\"ph1\">`CFileDialog`</ph> objects is handled automatically.","pos":[14539,14605],"source":"The destruction of `CFileDialog` objects is handled automatically."},{"content":"You do not have to call <bpt id=\"p1\">[</bpt>CDialog::EndDialog<ept id=\"p1\">](../../mfc/reference/cdialog-class.md#cdialog__enddialog)</ept>.","pos":[14606,14708],"source":" You do not have to call [CDialog::EndDialog](../../mfc/reference/cdialog-class.md#cdialog__enddialog)."},{"content":"To let the user select multiple files, set the <ph id=\"ph1\">`OFN_ALLOWMULTISELECT`</ph> flag before you call <ph id=\"ph2\">`DoModal`</ph>.","pos":[14715,14816],"source":"To let the user select multiple files, set the `OFN_ALLOWMULTISELECT` flag before you call `DoModal`."},{"content":"You must supply your own file name buffer to accommodate the returned list of multiple file names.","pos":[14817,14915]},{"content":"Do this by replacing <ph id=\"ph1\">`m_ofn.lpstrFile`</ph> with a pointer to a buffer you have allocated, after you construct the <ph id=\"ph2\">`CFileDialog`</ph>, but before you call <ph id=\"ph3\">`DoModal`</ph>.","pos":[14916,15071],"source":" Do this by replacing `m_ofn.lpstrFile` with a pointer to a buffer you have allocated, after you construct the `CFileDialog`, but before you call `DoModal`."},{"content":"Additionally, you must set <ph id=\"ph1\">`m_ofn.nMaxFile`</ph> by using the number of characters in the buffer pointed to by <ph id=\"ph2\">`m_ofn.lpstrFile`</ph>.","pos":[15078,15202],"source":"Additionally, you must set `m_ofn.nMaxFile` by using the number of characters in the buffer pointed to by `m_ofn.lpstrFile`."},{"content":"If you set the maximum number of files to be selected to <ph id=\"ph1\">`n`</ph>, the required buffer size is <ph id=\"ph2\">`n * (_MAX_PATH + 1) + 1`</ph>.","pos":[15203,15319],"source":" If you set the maximum number of files to be selected to `n`, the required buffer size is `n * (_MAX_PATH + 1) + 1`."},{"content":"The first item returned in the buffer is the path to the folder where the files were selected.","pos":[15320,15414]},{"content":"For <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>-style dialog boxes, the directory and file name strings are null-terminated, with an extra null character after the last file name.","pos":[15415,15632],"source":" For [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]-style dialog boxes, the directory and file name strings are null-terminated, with an extra null character after the last file name."},{"content":"This format enables the Explorer-style dialog boxes to return long file names that include spaces.","pos":[15633,15731]},{"content":"For old-style dialog boxes, the directory and file name strings are separated by spaces and the function uses short file names for file names with spaces.","pos":[15732,15886]},{"content":"The following example demonstrates how to use a buffer to retrieve and list multiple file names.","pos":[15893,15989]},{"pos":[16007,16022],"content":"NVC_MFCFiles#23"},{"pos":[16103,16319],"content":"To change the buffer size in response to the user selecting multiple file names, you must derive a new class from <ph id=\"ph1\">`CFileDialog`</ph> and override the <bpt id=\"p1\">[</bpt>CFileDialog::OnFileNameChange<ept id=\"p1\">](#cfiledialog__onfilenamechange)</ept> method.","source":"To change the buffer size in response to the user selecting multiple file names, you must derive a new class from `CFileDialog` and override the [CFileDialog::OnFileNameChange](#cfiledialog__onfilenamechange) method."},{"content":"If you derive a new class from <ph id=\"ph1\">`CFileDialog`</ph>, you can use a message map to handle any messages.","pos":[16326,16421],"source":"If you derive a new class from `CFileDialog`, you can use a message map to handle any messages."},{"content":"To extend the default message handling, derive a class from <ph id=\"ph1\">`CFileDialog`</ph>, add a message map to the new class, and provide member functions for the new messages.","pos":[16422,16583],"source":" To extend the default message handling, derive a class from `CFileDialog`, add a message map to the new class, and provide member functions for the new messages."},{"content":"You do not have to provide a hook function to customize the dialog box.","pos":[16584,16655]},{"content":"To customize the dialog box, derive a class from <ph id=\"ph1\">`CFileDialog`</ph>, provide a custom dialog box template, and add a message map to process the notification messages from the extended controls.","pos":[16662,16850],"source":"To customize the dialog box, derive a class from `CFileDialog`, provide a custom dialog box template, and add a message map to process the notification messages from the extended controls."},{"content":"Pass any unprocessed messages to the base class.","pos":[16851,16899]},{"content":"You do not have to customize the hook function.","pos":[16900,16947]},{"content":"When you are using the <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style of the <ph id=\"ph2\">`CFileDialog`</ph>, you cannot use message maps and dialog box templates.","pos":[16954,17140],"source":"When you are using the [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style of the `CFileDialog`, you cannot use message maps and dialog box templates."},{"content":"Instead, you must use the COM interfaces for similar functionality.","pos":[17141,17208]},{"pos":[17215,17332],"content":"For more information about how to use <ph id=\"ph1\">`CFileDialog`</ph>, see <bpt id=\"p1\">[</bpt>Common Dialog Classes<ept id=\"p1\">](../../mfc/common-dialog-classes.md)</ept>.","source":"For more information about how to use `CFileDialog`, see [Common Dialog Classes](../../mfc/common-dialog-classes.md)."},{"content":"Inheritance Hierarchy","pos":[17341,17362]},{"content":"CObject","pos":[17367,17374]},{"content":"CCmdTarget","pos":[17421,17431]},{"content":"CWnd","pos":[17481,17485]},{"content":"CDialog","pos":[17529,17536]},{"content":"CCommonDialog","pos":[17583,17596]},{"content":"Requirements","pos":[17670,17682]},{"pos":[17686,17707],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxdlgs.h","source":"**Header:** afxdlgs.h"},{"pos":[17761,17788],"content":"CFileDialog::AddCheckButton"},{"content":"Adds a check button to the dialog.","pos":[17792,17826]},{"content":"Parameters","pos":[17947,17957]},{"content":"The ID of the check button to add.","pos":[17974,18008]},{"content":"The check button name.","pos":[18029,18051]},{"content":"A Boolean indicating the current state of the check button.","pos":[18072,18131]},{"content":"if checked; <ph id=\"ph1\">`FALSE`</ph> otherwise","pos":[18139,18168],"source":" if checked; `FALSE` otherwise"},{"content":"Remarks","pos":[18178,18185]},{"pos":[18236,18260],"content":"CFileDialog::AddComboBox"},{"content":"Adds a combo box to the dialog.","pos":[18264,18295]},{"content":"Parameters","pos":[18356,18366]},{"content":"The ID of the combo box to add.","pos":[18383,18414]},{"content":"Remarks","pos":[18424,18431]},{"pos":[18485,18512],"content":"CFileDialog::AddControlItem"},{"content":"Adds an item to a container control in the dialog.","pos":[18516,18566]},{"content":"Parameters","pos":[18688,18698]},{"content":"The ID of the container control to add the item to.","pos":[18715,18766]},{"content":"The ID of the item.","pos":[18787,18806]},{"content":"Item's text.","pos":[18827,18839]},{"content":"Remarks","pos":[18849,18856]},{"pos":[18906,18929],"content":"CFileDialog::AddEditBox"},{"content":"Adds an edit box to the dialog.","pos":[18933,18964]},{"content":"Parameters","pos":[19059,19069]},{"content":"The ID of the edit box to add.","pos":[19086,19116]},{"content":"The edit box name.","pos":[19136,19154]},{"content":"Remarks","pos":[19164,19171]},{"pos":[19218,19238],"content":"CFileDialog::AddMenu"},{"content":"Adds a menu to the dialog.","pos":[19242,19268]},{"content":"Parameters","pos":[19361,19371]},{"content":"The ID of the menu to add.","pos":[19388,19414]},{"content":"The menu name.","pos":[19435,19449]},{"content":"Remarks","pos":[19459,19466]},{"pos":[19514,19535],"content":"CFileDialog::AddPlace"},{"content":"Adds a folder to the list of places available for the user to open or save items.","pos":[19539,19620]},{"content":"Parameters","pos":[19797,19807]},{"content":"A path to the folder to be made available to the user.","pos":[19827,19881]},{"content":"This can only be a folder.","pos":[19882,19908]},{"content":"Specifies where the folder is placed within the list.","pos":[19925,19978]},{"content":"A pointer to an IShellItem that represents the folder to be made available to the user.","pos":[19994,20081]},{"content":"This can only be a folder.","pos":[20082,20108]},{"content":"Remarks","pos":[20118,20125]},{"pos":[20178,20204],"content":"CFileDialog::AddPushButton"},{"content":"Adds a button to the dialog.","pos":[20208,20236]},{"content":"Parameters","pos":[20335,20345]},{"content":"The ID of the button to add.","pos":[20362,20390]},{"content":"The button name.","pos":[20411,20427]},{"content":"Remarks","pos":[20437,20444]},{"pos":[20502,20533],"content":"CFileDialog::AddRadioButtonList"},{"content":"Adds an option button (also known as radio button) group to the dialog.","pos":[20537,20608]},{"content":"Parameters","pos":[20676,20686]},{"content":"The ID of the option button group to add.","pos":[20703,20744]},{"content":"Remarks","pos":[20754,20761]},{"pos":[20813,20838],"content":"CFileDialog::AddSeparator"},{"content":"Adds a separator to the dialog.","pos":[20842,20873]},{"content":"Parameters","pos":[20935,20945]},{"content":"The ID of the separator add.","pos":[20962,20990]},{"content":"Remarks","pos":[21000,21007]},{"pos":[21054,21074],"content":"CFileDialog::AddText"},{"content":"Adds text to the dialog.","pos":[21078,21102]},{"content":"Parameters","pos":[21194,21204]},{"content":"The ID of the text to add.","pos":[21221,21247]},{"content":"The text name.","pos":[21267,21281]},{"content":"Remarks","pos":[21291,21298]},{"pos":[21359,21393],"content":"CFileDialog::ApplyOFNToShellDialog"},{"pos":[21397,21543],"content":"Updates the current state of the <bpt id=\"p1\">[</bpt>CFileDialog<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept> based on the values stored in the <ph id=\"ph1\">`m_ofn`</ph> data structure.","source":"Updates the current state of the [CFileDialog](../../mfc/reference/cfiledialog-class.md) based on the values stored in the `m_ofn` data structure."},{"content":"Remarks","pos":[21598,21605]},{"content":"In versions of Windows before <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, the member <bpt id=\"p1\">[</bpt>OPENFILENAME<ept id=\"p1\">](https://msdn.microsoft.com/library/ms911906.aspx)</ept> data structure was continuously synchronized with the state of the <ph id=\"ph2\">`CFileDialog`</ph>.","pos":[21609,21879],"source":"In versions of Windows before [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], the member [OPENFILENAME](https://msdn.microsoft.com/library/ms911906.aspx) data structure was continuously synchronized with the state of the `CFileDialog`."},{"content":"Any changes to the <bpt id=\"p1\">[</bpt>m_ofn<ept id=\"p1\">](#cfiledialog__m_ofn)</ept> member variable were immediately reflected in the state of the dialog box.","pos":[21880,22002],"source":" Any changes to the [m_ofn](#cfiledialog__m_ofn) member variable were immediately reflected in the state of the dialog box."},{"content":"Also, any changes to the state of the dialog box immediately update the <ph id=\"ph1\">`m_ofn`</ph> member variable.","pos":[22003,22099],"source":" Also, any changes to the state of the dialog box immediately update the `m_ofn` member variable."},{"content":"In <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, the values in the <ph id=\"ph2\">`m_ofn`</ph> member variable and state of the <ph id=\"ph3\">`CFileDialog`</ph> are not guaranteed to be synchronized.","pos":[22106,22303],"source":"In [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], the values in the `m_ofn` member variable and state of the `CFileDialog` are not guaranteed to be synchronized."},{"content":"This function forces the state of the <ph id=\"ph1\">`CFileDialog`</ph> to be updated to match the <ph id=\"ph2\">`m_ofn`</ph> structure.","pos":[22304,22401],"source":" This function forces the state of the `CFileDialog` to be updated to match the `m_ofn` structure."},{"content":"Windows calls this function automatically during <bpt id=\"p1\">[</bpt>CFileDialog::DoModal<ept id=\"p1\">](#cfiledialog__domodal)</ept>.","pos":[22402,22497],"source":" Windows calls this function automatically during [CFileDialog::DoModal](#cfiledialog__domodal)."},{"pos":[22504,22721],"content":"For more information about how to use the <ph id=\"ph1\">`CFileDialog`</ph> class under <ph id=\"ph2\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, see <bpt id=\"p1\">[</bpt>CFileDialog Class<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept>.","source":"For more information about how to use the `CFileDialog` class under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], see [CFileDialog Class](../../mfc/reference/cfiledialog-class.md)."},{"content":"Example","pos":[22731,22738]},{"pos":[22743,22843],"content":"See the example for <bpt id=\"p1\">[</bpt>CFileDialog::UpdateOFNFromShellDialog<ept id=\"p1\">](#cfiledialog__updateofnfromshelldialog)</ept>.","source":"See the example for [CFileDialog::UpdateOFNFromShellDialog](#cfiledialog__updateofnfromshelldialog)."},{"pos":[22894,22918],"content":"CFileDialog::CFileDialog"},{"content":"Call this function to construct a standard Windows file dialog box.","pos":[22922,22989]},{"content":"Parameters","pos":[23312,23322]},{"content":"[in]","pos":[23326,23330]},{"content":"The parameter that specifies what type of dialog box to create.","pos":[23352,23415]},{"content":"Set it to <ph id=\"ph1\">`TRUE`</ph> to construct a <bpt id=\"p1\">**</bpt>File Open<ept id=\"p1\">**</ept> dialog box.","pos":[23416,23473],"source":" Set it to `TRUE` to construct a **File Open** dialog box."},{"content":"Set it to <ph id=\"ph1\">`FALSE`</ph> to construct a <bpt id=\"p1\">**</bpt>File Save As<ept id=\"p1\">**</ept> dialog box.","pos":[23474,23535],"source":" Set it to `FALSE` to construct a **File Save As** dialog box."},{"content":"[in]","pos":[23542,23546]},{"content":"The default file name extension.","pos":[23563,23595]},{"content":"If the user does not include a known extension (one that has an association on the user’s computer) in the Filename box, the extension specified by <ph id=\"ph1\">`lpszDefExt`</ph> is automatically appended to the file name.","pos":[23596,23800],"source":" If the user does not include a known extension (one that has an association on the user’s computer) in the Filename box, the extension specified by `lpszDefExt` is automatically appended to the file name."},{"content":"If this parameter is <ph id=\"ph1\">`NULL`</ph>, no extension is appended.","pos":[23801,23855],"source":" If this parameter is `NULL`, no extension is appended."},{"content":"[in]","pos":[23862,23866]},{"content":"The initial file name that appears in the Filename box.","pos":[23885,23940]},{"content":"If <ph id=\"ph1\">`NULL`</ph>, no initial file name appears.","pos":[23941,23981],"source":" If `NULL`, no initial file name appears."},{"content":"[in]","pos":[23988,23992]},{"content":"A combination of one or more flags that you can use to customize the dialog box.","pos":[24006,24086]},{"content":"For a description of these flags, see the <bpt id=\"p1\">[</bpt>OPENFILENAME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[24087,24273],"source":" For a description of these flags, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"If you modify the <ph id=\"ph1\">`m_ofn.Flags`</ph> structure member, use a bitwise-OR operator in your changes to keep the default behavior intact.","pos":[24274,24402],"source":" If you modify the `m_ofn.Flags` structure member, use a bitwise-OR operator in your changes to keep the default behavior intact."},{"content":"[in]","pos":[24409,24413]},{"content":"A series of string pairs that specify filters you can apply to the file.","pos":[24430,24502]},{"content":"If you specify file filters, only files that match filter criteria will appear in the Files list.","pos":[24503,24600]},{"content":"See the Remarks section for more information about how to work with file filters.","pos":[24601,24682]},{"content":"[in]","pos":[24689,24693]},{"content":"A pointer to the parent or owner window of the file dialog box.","pos":[24710,24773]},{"content":"[in]","pos":[24780,24784]},{"content":"The size of the <ph id=\"ph1\">`OPENFILENAME`</ph> structure.","pos":[24797,24838],"source":" The size of the `OPENFILENAME` structure."},{"content":"This value depends on the operating system version.","pos":[24839,24890]},{"content":"MFC used this parameter to determine the appropriate kind of dialog box to create (for example, new <ph id=\"ph1\">[!INCLUDE[Win2kFamily](../../c-runtime-library/includes/win2kfamily_md.md)]</ph> dialog boxes instead of NT4 dialog boxes).","pos":[24891,25109],"source":" MFC used this parameter to determine the appropriate kind of dialog box to create (for example, new [!INCLUDE[Win2kFamily](../../c-runtime-library/includes/win2kfamily_md.md)] dialog boxes instead of NT4 dialog boxes)."},{"content":"The default size of 0 means that the MFC code will determine the correct dialog box size to use based on the operating system version on which the program is run.","pos":[25110,25272]},{"content":"[in]","pos":[25279,25283]},{"content":"<bpt id=\"p1\"> **</bpt>Note<ept id=\"p1\">**</ept> This parameter is available in Visual Studio 2008 and later and is will cause the new-style dialog to be used only if you are running in <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> or later.","pos":[25300,25538],"source":" **Note** This parameter is available in Visual Studio 2008 and later and is will cause the new-style dialog to be used only if you are running in [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] or later."},{"content":"The parameter that specifies the style of the file dialog.","pos":[25545,25603]},{"content":"Set it to <ph id=\"ph1\">`TRUE`</ph> to use the new Vista style file dialogs.","pos":[25604,25661],"source":" Set it to `TRUE` to use the new Vista style file dialogs."},{"content":"Otherwise, the old style of dialog boxes will be used.","pos":[25662,25716]},{"content":"See the Remarks section for more information about running under Vista.","pos":[25717,25788]},{"content":"Remarks","pos":[25798,25805]},{"pos":[25809,25923],"content":"Either a <bpt id=\"p1\">**</bpt>File Open<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>File Save As<ept id=\"p2\">**</ept> dialog box is constructed, depending on the value of <ph id=\"ph1\">`bOpenFileDialog`</ph>.","source":"Either a **File Open** or **File Save As** dialog box is constructed, depending on the value of `bOpenFileDialog`."},{"content":"Specifying a default extension using <ph id=\"ph1\">`lpszDefExt`</ph> may not produce the behavior that you expect, because it is seldom predictable what extensions have file associations on the user’s computer.","pos":[25930,26121],"source":"Specifying a default extension using `lpszDefExt` may not produce the behavior that you expect, because it is seldom predictable what extensions have file associations on the user’s computer."},{"content":"If you need more control over the appending of a default extension, you can derive your own class from <ph id=\"ph1\">`CFileDialog`</ph>, and override the <ph id=\"ph2\">`CFileDialog::OnFileNameOK`</ph> method to perform your own extension handling.","pos":[26122,26331],"source":" If you need more control over the appending of a default extension, you can derive your own class from `CFileDialog`, and override the `CFileDialog::OnFileNameOK` method to perform your own extension handling."},{"content":"To enable the user to select multiple files, set the <ph id=\"ph1\">`OFN_ALLOWMULTISELECT`</ph> flag before you call <bpt id=\"p1\">[</bpt>DoModal<ept id=\"p1\">](#cfiledialog__domodal)</ept>.","pos":[26338,26468],"source":"To enable the user to select multiple files, set the `OFN_ALLOWMULTISELECT` flag before you call [DoModal](#cfiledialog__domodal)."},{"content":"You must supply your own file name buffer to store the returned list of multiple file names.","pos":[26469,26561]},{"content":"Do this by replacing <ph id=\"ph1\">`m_ofn.lpstrFile`</ph> with a pointer to a buffer you have allocated, after you construct the <bpt id=\"p1\">[</bpt>CFileDialog<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept>, but before you call <ph id=\"ph2\">`DoModal`</ph>.","pos":[26562,26759],"source":" Do this by replacing `m_ofn.lpstrFile` with a pointer to a buffer you have allocated, after you construct the [CFileDialog](../../mfc/reference/cfiledialog-class.md), but before you call `DoModal`."},{"content":"Additionally, you must set <ph id=\"ph1\">`m_ofn.nMaxFile`</ph> with the number of characters in the buffer pointed to by <ph id=\"ph2\">`m_ofn.lpstrFile`</ph>.","pos":[26760,26880],"source":" Additionally, you must set `m_ofn.nMaxFile` with the number of characters in the buffer pointed to by `m_ofn.lpstrFile`."},{"content":"If you set the maximum number of files to be selected to <ph id=\"ph1\">`n`</ph>, the necessary buffer size is <ph id=\"ph2\">`n`</ph>*(_MAX_PATH + 1) + 1.","pos":[26881,26996],"source":" If you set the maximum number of files to be selected to `n`, the necessary buffer size is `n`*(_MAX_PATH + 1) + 1."},{"content":"For example:","pos":[26997,27009]},{"pos":[27027,27042],"content":"NVC_MFCFiles#23"},{"content":"To enable the user to resize an Explorer-style dialog box by using either the mouse or keyboard, set the <ph id=\"ph1\">`OFN_ENABLESIZING`</ph> flag.","pos":[27123,27252],"source":"To enable the user to resize an Explorer-style dialog box by using either the mouse or keyboard, set the `OFN_ENABLESIZING` flag."},{"content":"Setting this flag is necessary only if you provide a hook procedure or custom template.","pos":[27253,27340]},{"content":"The flag works only with an Explorer-style dialog box; old-style dialog boxes cannot be resized.","pos":[27341,27437]},{"content":"The <ph id=\"ph1\">`lpszFilter`</ph> parameter is used to determine the type of file name a file must have to be displayed in the file list.","pos":[27444,27564],"source":"The `lpszFilter` parameter is used to determine the type of file name a file must have to be displayed in the file list."},{"content":"The first string in the string pair describes the filter; the second string indicates the file name extension to use.","pos":[27565,27682]},{"content":"Multiple extensions may be specified by using a semicolon (the ';' character) as the delimiter.","pos":[27683,27778]},{"content":"The string ends with two '&amp;#124;' characters, followed by a <ph id=\"ph1\">`NULL`</ph> character.","pos":[27779,27856],"source":" The string ends with two '&#124;' characters, followed by a `NULL` character."},{"content":"You can also use a <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/using-cstring.md)</ept> object for this parameter.","pos":[27857,27951],"source":" You can also use a [CString](../../atl-mfc-shared/using-cstring.md) object for this parameter."},{"content":"For example, <ph id=\"ph1\">[!INCLUDE[ofprexcel](../../mfc/reference/includes/ofprexcel_md.md)]</ph> allows users to open files that have extensions .xlc (chart) or .xls (worksheet), among others.","pos":[27958,28134],"source":"For example, [!INCLUDE[ofprexcel](../../mfc/reference/includes/ofprexcel_md.md)] allows users to open files that have extensions .xlc (chart) or .xls (worksheet), among others."},{"content":"The filter for Excel could be written as:","pos":[28135,28176]},{"pos":[28194,28209],"content":"NVC_MFCFiles#24"},{"pos":[28290,28482],"content":"However, if you plan to use this string to directly update the <ph id=\"ph1\">`OPENFILENAME`</ph> structure, you should delimit your strings with the null character, '\\0', instead of the vertical bars ('&amp;#124;').","source":"However, if you plan to use this string to directly update the `OPENFILENAME` structure, you should delimit your strings with the null character, '\\0', instead of the vertical bars ('&#124;')."},{"content":"The <ph id=\"ph1\">`bVistaStyle`</ph> parameter is applicable only when running under <ph id=\"ph2\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.","pos":[28489,28637],"source":"The `bVistaStyle` parameter is applicable only when running under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]."},{"content":"Under earlier versions of Windows, this parameter is ignored.","pos":[28638,28699]},{"content":"If <ph id=\"ph1\">`bVistaStyle`</ph> is set to <ph id=\"ph2\">`TRUE`</ph>, when you compile a program with <ph id=\"ph3\">[!INCLUDE[vs_orcas_long](../../atl/reference/includes/vs_orcas_long_md.md)]</ph> or later, the new Vista style <bpt id=\"p1\">**</bpt>File Dialog<ept id=\"p1\">**</ept> will be used.","pos":[28700,28902],"source":" If `bVistaStyle` is set to `TRUE`, when you compile a program with [!INCLUDE[vs_orcas_long](../../atl/reference/includes/vs_orcas_long_md.md)] or later, the new Vista style **File Dialog** will be used."},{"content":"Otherwise, the previous MFC style <bpt id=\"p1\">**</bpt>File Dialog<ept id=\"p1\">**</ept> will be used.","pos":[28903,28966],"source":" Otherwise, the previous MFC style **File Dialog** will be used."},{"content":"See <bpt id=\"p1\">[</bpt>CFileDialog Class<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept> for more information.","pos":[28967,29054],"source":" See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information."},{"pos":[29061,29115],"content":"Dialog templates are not supported on dialogs based on"},{"content":"Example","pos":[29139,29146]},{"pos":[29151,29217],"content":"See the example for <bpt id=\"p1\">[</bpt>CFileDialog::DoModal<ept id=\"p1\">](#cfiledialog__domodal)</ept>.","source":"See the example for [CFileDialog::DoModal](#cfiledialog__domodal)."},{"pos":[29264,29284],"content":"CFileDialog::DoModal"},{"content":"Call this function to display the Windows common file dialog box and allow the user to browse files and directories and enter a filename.","pos":[29288,29425]},{"content":"Return Value","pos":[29477,29489]},{"content":"<bpt id=\"p1\">**</bpt>IDOK<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>IDCANCEL<ept id=\"p2\">**</ept>.","pos":[29493,29518],"source":"**IDOK** or **IDCANCEL**."},{"content":"If <bpt id=\"p1\">**</bpt>IDCANCEL<ept id=\"p1\">**</ept> is returned, call the Windows <bpt id=\"p2\">[</bpt>CommDlgExtendedError<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms646916)</ept> function to determine whether an error occurred.","pos":[29519,29696],"source":" If **IDCANCEL** is returned, call the Windows [CommDlgExtendedError](http://msdn.microsoft.com/library/windows/desktop/ms646916) function to determine whether an error occurred."},{"pos":[29703,29807],"content":"<bpt id=\"p1\">**</bpt>IDOK<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>IDCANCEL<ept id=\"p2\">**</ept> are constants that indicate whether the user selected the OK or Cancel button.","source":"**IDOK** and **IDCANCEL** are constants that indicate whether the user selected the OK or Cancel button."},{"content":"Remarks","pos":[29817,29824]},{"pos":[29828,30025],"content":"If you want to initialize the various file dialog-box options by setting members of the <bpt id=\"p1\">**</bpt>m_ofn<ept id=\"p1\">**</ept> structure, you should do this before calling <ph id=\"ph1\">`DoModal`</ph>, but after the dialog object is constructed.","source":"If you want to initialize the various file dialog-box options by setting members of the **m_ofn** structure, you should do this before calling `DoModal`, but after the dialog object is constructed."},{"pos":[30032,30257],"content":"For example, if you want to allow the user to select multiple files, set the <ph id=\"ph1\">`OFN_ALLOWMULTISELECT`</ph> flag before calling <ph id=\"ph2\">`DoModal`</ph>, as shown in the code example in <bpt id=\"p1\">[</bpt>CFileDialog Class<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept>.","source":"For example, if you want to allow the user to select multiple files, set the `OFN_ALLOWMULTISELECT` flag before calling `DoModal`, as shown in the code example in [CFileDialog Class](../../mfc/reference/cfiledialog-class.md)."},{"content":"When the user clicks the dialog box's OK or Cancel buttons, or selects the Close option from the dialog box's control menu, control is returned to your application.","pos":[30264,30428]},{"content":"You can then call other member functions to retrieve the settings or information the user inputs into the dialog box.","pos":[30429,30546]},{"pos":[30563,30617],"content":"is a virtual function overridden from class <ph id=\"ph1\">`CDialog`</ph>.","source":" is a virtual function overridden from class `CDialog`."},{"content":"Example","pos":[30627,30634]},{"pos":[30649,30664],"content":"NVC_MFCFiles#25"},{"pos":[30796,30827],"content":"CFileDialog::EnableOpenDropDown"},{"content":"Enables a drop-down list on the Open or Save button in the dialog.","pos":[30831,30897]},{"content":"Parameters","pos":[30965,30975]},{"content":"The ID of the drop-down list.","pos":[30992,31021]},{"content":"Remarks","pos":[31031,31038]},{"pos":[31092,31119],"content":"CFileDialog::EndVisualGroup"},{"content":"Stops the addition of elements to a visual group in the dialog.","pos":[31123,31186]},{"content":"Return Value","pos":[31237,31249]},{"content":"Returns S_OK if successful; an error value otherwise.","pos":[31253,31306]},{"content":"Remarks","pos":[31316,31323]},{"pos":[31382,31414],"content":"CFileDialog::GetCheckButtonState"},{"content":"Retrieves the current state of a check button (check box) in the dialog.","pos":[31418,31490]},{"content":"Parameters","pos":[31586,31596]},{"content":"The ID of the check box.","pos":[31613,31637]},{"content":"The state of the check box.","pos":[31658,31685]},{"content":"indicates checked; <ph id=\"ph1\">`FALSE`</ph> indicates unchecked.","pos":[31693,31740],"source":" indicates checked; `FALSE` indicates unchecked."},{"content":"Remarks","pos":[31750,31757]},{"pos":[31816,31848],"content":"CFileDialog::GetControlItemState"},{"content":"Retrieves the current state of an item in a container control found in the dialog.","pos":[31852,31934]},{"content":"Parameters","pos":[32062,32072]},{"content":"The ID of the container control.","pos":[32089,32121]},{"content":"The ID of the item.","pos":[32142,32161]},{"content":"A reference to a variable that receives one of more values from the CDCONTROLSTATE enumeration that indicates the current state of the control.","pos":[32181,32324]},{"content":"Remarks","pos":[32334,32341]},{"pos":[32396,32424],"content":"CFileDialog::GetControlState"},{"content":"Retrieves the current visibility and enabled states of a given control.","pos":[32428,32499]},{"content":"Parameters","pos":[32601,32611]},{"content":"The ID of the control.","pos":[32628,32650]},{"content":"A reference to a variable that receives one or more values from the CDCONTROLSTATE enumeration that indicates the current state of the control.","pos":[32670,32813]},{"content":"Remarks","pos":[32823,32830]},{"pos":[32884,32911],"content":"CFileDialog::GetEditBoxText"},{"content":"Retrieves the current text in an edit box control.","pos":[32915,32965]},{"content":"Parameters","pos":[33058,33068]},{"content":"The ID of the edit box.","pos":[33085,33108]},{"content":"The text value.","pos":[33128,33143]},{"content":"Remarks","pos":[33153,33160]},{"pos":[33210,33233],"content":"CFileDialog::GetFileExt"},{"content":"Call this function to retrieve the extension of the filename entered into the dialog box.","pos":[33237,33326]},{"content":"Return Value","pos":[33382,33394]},{"content":"The extension of the filename.","pos":[33398,33428]},{"content":"Remarks","pos":[33438,33445]},{"pos":[33449,33534],"content":"For example, if the name of the file entered is DATA.TXT, <ph id=\"ph1\">`GetFileExt`</ph> returns \"TXT\".","source":"For example, if the name of the file entered is DATA.TXT, `GetFileExt` returns \"TXT\"."},{"content":"If <ph id=\"ph1\">`m_ofn.Flags`</ph> has the <ph id=\"ph2\">`OFN_ALLOWMULTISELECT`</ph> flag set, this string contains a sequence of null-terminated strings, with the first string being the directory path of the file group selected, followed by the names of all files selected by the user.","pos":[33541,33790],"source":"If `m_ofn.Flags` has the `OFN_ALLOWMULTISELECT` flag set, this string contains a sequence of null-terminated strings, with the first string being the directory path of the file group selected, followed by the names of all files selected by the user."},{"content":"To retrieve file pathnames, use the <bpt id=\"p1\">[</bpt>GetStartPosition<ept id=\"p1\">](#cfiledialog__getstartposition)</ept> and <bpt id=\"p2\">[</bpt>GetNextPathName<ept id=\"p2\">](#cfiledialog__getnextpathname)</ept> member functions.","pos":[33791,33948],"source":" To retrieve file pathnames, use the [GetStartPosition](#cfiledialog__getstartposition) and [GetNextPathName](#cfiledialog__getnextpathname) member functions."},{"pos":[33999,34023],"content":"CFileDialog::GetFileName"},{"content":"Call this function to retrieve the name of the filename entered in the dialog box.","pos":[34027,34109]},{"content":"Return Value","pos":[34166,34178]},{"content":"The name of the file.","pos":[34182,34203]},{"content":"Remarks","pos":[34213,34220]},{"content":"The name of the file includes both the prefix and the extension.","pos":[34224,34288]},{"content":"For example, <ph id=\"ph1\">`GetFileName`</ph> will return \"TEXT.DAT\" for the file C:\\FILES\\TEXT.DAT.","pos":[34289,34370],"source":" For example, `GetFileName` will return \"TEXT.DAT\" for the file C:\\FILES\\TEXT.DAT."},{"pos":[34377,34583],"content":"If <ph id=\"ph1\">`m_ofn.Flags`</ph> has the <ph id=\"ph2\">`OFN_ALLOWMULTISELECT`</ph> flag set, you should call <bpt id=\"p1\">[</bpt>GetStartPosition<ept id=\"p1\">](#cfiledialog__getstartposition)</ept> and <bpt id=\"p2\">[</bpt>GetNextPathName<ept id=\"p2\">](#cfiledialog__getnextpathname)</ept> to retrieve a file pathname.","source":"If `m_ofn.Flags` has the `OFN_ALLOWMULTISELECT` flag set, you should call [GetStartPosition](#cfiledialog__getstartposition) and [GetNextPathName](#cfiledialog__getnextpathname) to retrieve a file pathname."},{"pos":[34635,34660],"content":"CFileDialog::GetFileTitle"},{"content":"Call this function to retrieve the title of the file entered in the dialog box.","pos":[34664,34743]},{"content":"Return Value","pos":[34801,34813]},{"content":"The title of the file.","pos":[34817,34839]},{"content":"Remarks","pos":[34849,34856]},{"content":"The title of the file includes only its prefix, without the path or the extension.","pos":[34860,34942]},{"content":"For example, <ph id=\"ph1\">`GetFileTitle`</ph> will return \"TEXT\" for the file C:\\FILES\\TEXT.DAT.","pos":[34943,35021],"source":" For example, `GetFileTitle` will return \"TEXT\" for the file C:\\FILES\\TEXT.DAT."},{"content":"If <ph id=\"ph1\">`m_ofn.Flags`</ph> has the <ph id=\"ph2\">`OFN_ALLOWMULTISELECT`</ph> flag set, this string contains a sequence of null-terminated strings, with the first string being the directory path of the file group selected, followed by the names of all files selected by the user.","pos":[35028,35277],"source":"If `m_ofn.Flags` has the `OFN_ALLOWMULTISELECT` flag set, this string contains a sequence of null-terminated strings, with the first string being the directory path of the file group selected, followed by the names of all files selected by the user."},{"content":"For this reason, use the <bpt id=\"p1\">[</bpt>GetStartPosition<ept id=\"p1\">](#cfiledialog__getstartposition)</ept> and <bpt id=\"p2\">[</bpt>GetNextPathName<ept id=\"p2\">](#cfiledialog__getnextpathname)</ept> member functions to retrieve the next file name in the list.","pos":[35278,35467],"source":" For this reason, use the [GetStartPosition](#cfiledialog__getstartposition) and [GetNextPathName](#cfiledialog__getnextpathname) member functions to retrieve the next file name in the list."},{"content":"Example","pos":[35477,35484]},{"pos":[35489,35555],"content":"See the example for <bpt id=\"p1\">[</bpt>CFileDialog::DoModal<ept id=\"p1\">](#cfiledialog__domodal)</ept>.","source":"See the example for [CFileDialog::DoModal](#cfiledialog__domodal)."},{"pos":[35608,35634],"content":"CFileDialog::GetFolderPath"},{"content":"Call this member function to retrieve the path of the currently open folder or directory for an Explorer-style Open or Save As common dialog box.","pos":[35638,35783]},{"content":"Return Value","pos":[35842,35854]},{"pos":[35858,35977],"content":"A <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object containing the currently open folder or directory.","source":"A [CString](../../atl-mfc-shared/reference/cstringt-class.md) object containing the currently open folder or directory."},{"content":"Remarks","pos":[35987,35994]},{"pos":[35998,36119],"content":"The dialog box must have been created with the <bpt id=\"p1\">**</bpt>OFN_EXPLORER<ept id=\"p1\">**</ept> style; otherwise, the method will fail with an assertion.","source":"The dialog box must have been created with the **OFN_EXPLORER** style; otherwise, the method will fail with an assertion."},{"content":"You can call this method only while the dialog box is being displayed.","pos":[36126,36196]},{"content":"After the dialog box has been closed, this function will no longer work, and the method will fail with an assertion.","pos":[36197,36313]},{"pos":[36376,36412],"content":"CFileDialog::GetIFileDialogCustomize"},{"pos":[36416,36531],"content":"Retrieves a pointer to the internal COM object for a given <bpt id=\"p1\">[</bpt>CFileDialog<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept>.","source":"Retrieves a pointer to the internal COM object for a given [CFileDialog](../../mfc/reference/cfiledialog-class.md)."},{"content":"Return Value","pos":[36605,36617]},{"content":"The pointer to the internal COM object for the <ph id=\"ph1\">`CFileDialog`</ph>.","pos":[36621,36682],"source":"The pointer to the internal COM object for the `CFileDialog`."},{"content":"It is your responsibility to release this pointer appropriately.","pos":[36683,36747]},{"content":"Remarks","pos":[36757,36764]},{"content":"Use this function only under <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> with an object that has <ph id=\"ph2\">`bVistaStyle`</ph> set to <ph id=\"ph3\">`true`</ph>.","pos":[36768,36931],"source":"Use this function only under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] with an object that has `bVistaStyle` set to `true`."},{"content":"If you use this function when <ph id=\"ph1\">`bVistaStyle`</ph> is <ph id=\"ph2\">`false`</ph>, it will return <ph id=\"ph3\">`NULL`</ph> in release mode and throw an assertion in debug mode.","pos":[36932,37063],"source":" If you use this function when `bVistaStyle` is `false`, it will return `NULL` in release mode and throw an assertion in debug mode."},{"pos":[37070,37223],"content":"For more information about the <ph id=\"ph1\">`IFileDialogCustomize`</ph> interface,  see <bpt id=\"p1\">[</bpt>IFileDialogCustomize<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775912)</ept>.","source":"For more information about the `IFileDialogCustomize` interface,  see [IFileDialogCustomize](http://msdn.microsoft.com/library/windows/desktop/bb775912)."},{"content":"Example","pos":[37233,37240]},{"content":"This example retrieves the internal COM object.","pos":[37244,37291]},{"content":"To run this code example, you must compile it under <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.","pos":[37292,37426],"source":" To run this code example, you must compile it under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]."},{"pos":[37444,37465],"content":"NVC_MFC_CFileDialog#4"},{"pos":[37586,37617],"content":"CFileDialog::GetIFileOpenDialog"},{"pos":[37621,37694],"content":"Retrieves a pointer to the internal COM object for a given <ph id=\"ph1\">`CFileDialog`</ph>.","source":"Retrieves a pointer to the internal COM object for a given `CFileDialog`."},{"content":"Return Value","pos":[37758,37770]},{"content":"The pointer to the internal COM object for the <ph id=\"ph1\">`CFileDialog`</ph>.","pos":[37774,37835],"source":"The pointer to the internal COM object for the `CFileDialog`."},{"content":"It is your responsibility to release this pointer appropriately.","pos":[37836,37900]},{"content":"Remarks","pos":[37910,37917]},{"content":"Use this function only under <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> with an object that has <ph id=\"ph2\">`bVistaStyle`</ph> set to <ph id=\"ph3\">`true`</ph>.","pos":[37921,38084],"source":"Use this function only under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] with an object that has `bVistaStyle` set to `true`."},{"content":"This function returns <ph id=\"ph1\">`NULL`</ph> if the <ph id=\"ph2\">`CFileDialog`</ph> is not an <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> dialog box or if <ph id=\"ph3\">`bVistaStyle`</ph> is set to <ph id=\"ph4\">`false`</ph>.","pos":[38085,38203],"source":" This function returns `NULL` if the `CFileDialog` is not an **Open** dialog box or if `bVistaStyle` is set to `false`."},{"content":"In this final case, the function only returns <ph id=\"ph1\">`NULL`</ph> in release mode - in debug mode it will throw an assertion.","pos":[38204,38316],"source":" In this final case, the function only returns `NULL` in release mode - in debug mode it will throw an assertion."},{"pos":[38323,38465],"content":"For more information about the <ph id=\"ph1\">`IFileOpenDialog`</ph> interface, see <bpt id=\"p1\">[</bpt>IFileOpenDialog<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775834)</ept>.","source":"For more information about the `IFileOpenDialog` interface, see [IFileOpenDialog](http://msdn.microsoft.com/library/windows/desktop/bb775834)."},{"content":"Example","pos":[38475,38482]},{"content":"This example retrieves the internal COM object.","pos":[38486,38533]},{"content":"To run this code, you must compile it under <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.","pos":[38534,38660],"source":" To run this code, you must compile it under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]."},{"pos":[38678,38699],"content":"NVC_MFC_CFileDialog#2"},{"pos":[38820,38851],"content":"CFileDialog::GetIFileSaveDialog"},{"pos":[38855,38928],"content":"Retrieves a pointer to the internal COM object for a given <ph id=\"ph1\">`CFileDialog`</ph>.","source":"Retrieves a pointer to the internal COM object for a given `CFileDialog`."},{"content":"Return Value","pos":[38992,39004]},{"content":"The pointer to the internal COM object for the <ph id=\"ph1\">`CFileDialog`</ph>.","pos":[39008,39069],"source":"The pointer to the internal COM object for the `CFileDialog`."},{"content":"It is your responsibility to release this pointer appropriately.","pos":[39070,39134]},{"content":"Remarks","pos":[39144,39151]},{"content":"Use this function only under <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> with an object that has <ph id=\"ph2\">`bVistaStyle`</ph> set to <ph id=\"ph3\">`true`</ph>.","pos":[39155,39318],"source":"Use this function only under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] with an object that has `bVistaStyle` set to `true`."},{"content":"This function will return <ph id=\"ph1\">`NULL`</ph> if the <ph id=\"ph2\">`CFileDialog`</ph> is not a <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept> dialog box or if <ph id=\"ph3\">`bVistaStyle`</ph> is set to <ph id=\"ph4\">`false`</ph>.","pos":[39319,39440],"source":" This function will return `NULL` if the `CFileDialog` is not a **Save** dialog box or if `bVistaStyle` is set to `false`."},{"content":"In this final case, the function only returns <ph id=\"ph1\">`NULL`</ph> in release mode - in debug mode it will throw an assertion.","pos":[39441,39553],"source":" In this final case, the function only returns `NULL` in release mode - in debug mode it will throw an assertion."},{"pos":[39560,39702],"content":"For more information about the <ph id=\"ph1\">`IFileSaveDialog`</ph> interface, see <bpt id=\"p1\">[</bpt>IFileSaveDialog<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775688)</ept>.","source":"For more information about the `IFileSaveDialog` interface, see [IFileSaveDialog](http://msdn.microsoft.com/library/windows/desktop/bb775688)."},{"content":"Example","pos":[39712,39719]},{"content":"This example retrieves the internal COM object.","pos":[39723,39770]},{"content":"To run this code example, you must compile it under <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.","pos":[39771,39905],"source":" To run this code example, you must compile it under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]."},{"pos":[39923,39944],"content":"NVC_MFC_CFileDialog#3"},{"pos":[40062,40090],"content":"CFileDialog::GetNextPathName"},{"content":"Call this function to retrieve the next filename from the group selected in the dialog box.","pos":[40094,40185]},{"content":"Parameters","pos":[40259,40269]},{"content":"A reference to a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous <ph id=\"ph1\">`GetNextPathName`</ph> or <ph id=\"ph2\">`GetStartPosition`</ph> function call.","pos":[40282,40395],"source":" A reference to a **POSITION** value returned by a previous `GetNextPathName` or `GetStartPosition` function call."},{"content":"<bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the end of the list has been reached.","pos":[40396,40445],"source":"**NULL** if the end of the list has been reached."},{"content":"Return Value","pos":[40455,40467]},{"content":"The full path of the file.","pos":[40471,40497]},{"content":"Remarks","pos":[40507,40514]},{"content":"The path of the filename includes the file's title plus the entire directory path.","pos":[40518,40600]},{"content":"For example, <ph id=\"ph1\">`GetNextPathName`</ph> will return \"C:\\FILES\\TEXT.DAT\" for the file C:\\FILES\\TEXT.DAT.","pos":[40601,40695],"source":" For example, `GetNextPathName` will return \"C:\\FILES\\TEXT.DAT\" for the file C:\\FILES\\TEXT.DAT."},{"content":"You can use <ph id=\"ph1\">`GetNextPathName`</ph> in a forward iteration loop if you establish the initial position with a call to <ph id=\"ph2\">`GetStartPosition`</ph>.","pos":[40696,40826],"source":" You can use `GetNextPathName` in a forward iteration loop if you establish the initial position with a call to `GetStartPosition`."},{"content":"If the selection consists of only one file, that file name will be returned.","pos":[40833,40909]},{"pos":[40955,40974],"content":"CFileDialog::GetOFN"},{"pos":[40978,41030],"content":"Retrieves the associated <bpt id=\"p1\">**</bpt>OPENFILENAME<ept id=\"p1\">**</ept> structure.","source":"Retrieves the associated **OPENFILENAME** structure."},{"content":"Return Value","pos":[41120,41132]},{"pos":[41136,41224],"content":"An <bpt id=\"p1\">[</bpt>OPENFILENAME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure.","source":"An [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure."},{"content":"Remarks","pos":[41234,41241]},{"content":"Use the second version of this function to initialize the appearance of a <bpt id=\"p1\">**</bpt>File Open<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>File Save As<ept id=\"p2\">**</ept> dialog box after it is constructed but before it is displayed with the <ph id=\"ph1\">`DoModal`</ph> member function.","pos":[41245,41450],"source":"Use the second version of this function to initialize the appearance of a **File Open** or **File Save As** dialog box after it is constructed but before it is displayed with the `DoModal` member function."},{"content":"For example, you can set the <bpt id=\"p1\">**</bpt>lpstrTitle<ept id=\"p1\">**</ept> member of <bpt id=\"p2\">**</bpt>m_ofn<ept id=\"p2\">**</ept> to the caption you want the dialog box to have.","pos":[41451,41562],"source":" For example, you can set the **lpstrTitle** member of **m_ofn** to the caption you want the dialog box to have."},{"pos":[41613,41637],"content":"CFileDialog::GetPathName"},{"content":"Call this function to retrieve the full path of the file entered in the dialog box.","pos":[41641,41724]},{"content":"Return Value","pos":[41781,41793]},{"content":"The full path of the file.","pos":[41797,41823]},{"content":"Remarks","pos":[41833,41840]},{"content":"The path of the filename includes the file's title plus the entire directory path.","pos":[41844,41926]},{"content":"For example, <ph id=\"ph1\">`GetPathName`</ph> will return \"C:\\FILES\\TEXT.DAT\" for the file C:\\FILES\\TEXT.DAT.","pos":[41927,42017],"source":" For example, `GetPathName` will return \"C:\\FILES\\TEXT.DAT\" for the file C:\\FILES\\TEXT.DAT."},{"content":"If <ph id=\"ph1\">`m_ofn.Flags`</ph> has the <ph id=\"ph2\">`OFN_ALLOWMULTISELECT`</ph> flag set, this string contains a sequence of null-teminated strings, with the first string being the directory path of the file group selected, followed by the names of all files selected by the user.","pos":[42024,42272],"source":"If `m_ofn.Flags` has the `OFN_ALLOWMULTISELECT` flag set, this string contains a sequence of null-teminated strings, with the first string being the directory path of the file group selected, followed by the names of all files selected by the user."},{"content":"For this reason, use the <bpt id=\"p1\">[</bpt>GetStartPosition<ept id=\"p1\">](#cfiledialog__getstartposition)</ept> and <bpt id=\"p2\">[</bpt>GetNextPathName<ept id=\"p2\">](#cfiledialog__getnextpathname)</ept> member functions to retrieve the next file name in the list.","pos":[42273,42462],"source":" For this reason, use the [GetStartPosition](#cfiledialog__getstartposition) and [GetNextPathName](#cfiledialog__getnextpathname) member functions to retrieve the next file name in the list."},{"content":"Example","pos":[42472,42479]},{"pos":[42484,42550],"content":"See the example for <bpt id=\"p1\">[</bpt>CFileDialog::DoModal<ept id=\"p1\">](#cfiledialog__domodal)</ept>.","source":"See the example for [CFileDialog::DoModal](#cfiledialog__domodal)."},{"pos":[42605,42633],"content":"CFileDialog::GetReadOnlyPref"},{"content":"Call this function to determine whether the Read Only check box has been selected in the Windows standard File Open and File Save As dialog boxes.","pos":[42637,42783]},{"content":"Return Value","pos":[42841,42853]},{"content":"Non-zero if the Read Only check box in the dialog box is selected; otherwise 0.","pos":[42857,42936]},{"content":"Remarks","pos":[42946,42953]},{"pos":[42957,43109],"content":"You can hide the Read Only check box by setting the <ph id=\"ph1\">`OFN_HIDEREADONLY`</ph> style in the <bpt id=\"p1\">[</bpt>CFileDialog<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept> constructor.","source":"You can hide the Read Only check box by setting the `OFN_HIDEREADONLY` style in the [CFileDialog](../../mfc/reference/cfiledialog-class.md) constructor."},{"pos":[43117,43583],"content":"[!NOTE]\n[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style `CFileDialog` objects do not support this function. Attempting to use this function on a [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style `CFileDialog` will throw [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md). See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information.","leadings":["","> "],"nodes":[{"content":" style `CFileDialog` objects do not support this function. Attempting to use this function on a [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style `CFileDialog` will throw [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md). See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information.","pos":[89,464],"nodes":[{"content":"style <ph id=\"ph1\">`CFileDialog`</ph> objects do not support this function.","pos":[1,58],"source":" style `CFileDialog` objects do not support this function."},{"content":"Attempting to use this function on a <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style <ph id=\"ph2\">`CFileDialog`</ph> will throw <bpt id=\"p1\">[</bpt>CNotSupportedException<ept id=\"p1\">](../../mfc/reference/cnotsupportedexception-class.md)</ept>.","pos":[59,287],"source":" Attempting to use this function on a [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style `CFileDialog` will throw [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md)."},{"content":"See <bpt id=\"p1\">[</bpt>CFileDialog Class<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept> for more information.","pos":[288,375],"source":" See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information."}]}]},{"pos":[43632,43654],"content":"CFileDialog::GetResult"},{"content":"Retrieves the choice that the user made in the dialog.","pos":[43658,43712]},{"content":"Return Value","pos":[43770,43782]},{"content":"A pointer to an IShellItem that represents the user's choice.","pos":[43786,43847]},{"content":"Remarks","pos":[43857,43864]},{"pos":[43914,43937],"content":"CFileDialog::GetResults"},{"content":"Retrieves the user's choices in a dialog that allows multiple selection.","pos":[43941,44013]},{"content":"Return Value","pos":[44077,44089]},{"content":"A pointer to an IShellItemArray through which the items selected in the dialog can be accessed.","pos":[44093,44188]},{"content":"Remarks","pos":[44198,44205]},{"pos":[44267,44302],"content":"CFileDialog::GetSelectedControlItem"},{"content":"Retrieves a particular item from the specified container control in the dialog.","pos":[44306,44385]},{"content":"Parameters","pos":[44485,44495]},{"content":"The ID of the container control.","pos":[44512,44544]},{"content":"The ID of the item that the user selected in the control.","pos":[44565,44622]},{"content":"Remarks","pos":[44632,44639]},{"pos":[44695,44724],"content":"CFileDialog::GetStartPosition"},{"pos":[44728,44876],"content":"Call this member function to retrieve the position of the first file pathname in the list, if <ph id=\"ph1\">`m_ofn.Flags`</ph> has the <ph id=\"ph2\">`OFN_ALLOWMULTISELECT`</ph> flag set.","source":"Call this member function to retrieve the position of the first file pathname in the list, if `m_ofn.Flags` has the `OFN_ALLOWMULTISELECT` flag set."},{"content":"Return Value","pos":[44939,44951]},{"pos":[44955,45038],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the list is empty.","source":"A **POSITION** value that can be used for iteration; **NULL** if the list is empty."},{"pos":[45089,45113],"content":"CFileDialog::HideControl"},{"content":"Call this member function to hide the specified control in an Explorer-style Open or Save As common dialog box.","pos":[45117,45228]},{"content":"Parameters","pos":[45280,45290]},{"content":"The ID of the control to hide.","pos":[45303,45333]},{"content":"Remarks","pos":[45343,45350]},{"pos":[45354,45477],"content":"The dialog box must have been created with the <bpt id=\"p1\">**</bpt>OFN_EXPLORER<ept id=\"p1\">**</ept> style; otherwise, the function will fail with an assertion.","source":"The dialog box must have been created with the **OFN_EXPLORER** style; otherwise, the function will fail with an assertion."},{"pos":[45534,45564],"content":"CFileDialog::IsPickFoldersMode"},{"content":"Determines if the current dialog is in folder picker mode.","pos":[45568,45626]},{"content":"Return Value","pos":[45686,45698]},{"pos":[45709,45767],"content":"if the dialog is in folder picker mode; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the dialog is in folder picker mode; otherwise `FALSE`."},{"content":"Remarks","pos":[45777,45784]},{"pos":[45829,45847],"content":"CFileDialog::m_ofn"},{"content":"is a structure of type <ph id=\"ph1\">`OPENFILENAME`</ph>.","pos":[45859,45897],"source":" is a structure of type `OPENFILENAME`."},{"content":"The data in this structure represents the current state of the <ph id=\"ph1\">`CFileDialog`</ph>.","pos":[45898,45975],"source":" The data in this structure represents the current state of the `CFileDialog`."},{"content":"Remarks","pos":[45985,45992]},{"content":"Use this structure to initialize the appearance of a <bpt id=\"p1\">**</bpt>File Open<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>File Save As<ept id=\"p2\">**</ept> dialog box after you construct it but before you display it with the <bpt id=\"p3\">[</bpt>DoModal<ept id=\"p3\">](#cfiledialog__domodal)</ept> method.","pos":[45996,46192],"source":"Use this structure to initialize the appearance of a **File Open** or **File Save As** dialog box after you construct it but before you display it with the [DoModal](#cfiledialog__domodal) method."},{"content":"For example, you can set the <ph id=\"ph1\">`lpstrTitle`</ph> member of <ph id=\"ph2\">`m_ofn`</ph> to the caption you want the dialog box to have.","pos":[46193,46300],"source":" For example, you can set the `lpstrTitle` member of `m_ofn` to the caption you want the dialog box to have."},{"content":"With the <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style of <bpt id=\"p1\">[</bpt>CFileDialog<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept>, <ph id=\"ph2\">`m_ofn`</ph> is not guaranteed to always match the state of the dialog box.","pos":[46307,46534],"source":"With the [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style of [CFileDialog](../../mfc/reference/cfiledialog-class.md), `m_ofn` is not guaranteed to always match the state of the dialog box."},{"content":"It is synchronized with the dialog box in earlier versions of Windows.","pos":[46535,46605]},{"content":"See <bpt id=\"p1\">[</bpt>CFileDialog::ApplyOFNToShellDialog<ept id=\"p1\">](#cfiledialog__applyofntoshelldialog)</ept> and <bpt id=\"p2\">[</bpt>CFileDialog::UpdateOFNFromShellDialog<ept id=\"p2\">](#cfiledialog__updateofnfromshelldialog)</ept> for more information about synchronizing the <ph id=\"ph1\">`m_ofn`</ph> structure and the <ph id=\"ph2\">`CFileDialog`</ph> state under <ph id=\"ph3\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>.","pos":[46606,46947],"source":" See [CFileDialog::ApplyOFNToShellDialog](#cfiledialog__applyofntoshelldialog) and [CFileDialog::UpdateOFNFromShellDialog](#cfiledialog__updateofnfromshelldialog) for more information about synchronizing the `m_ofn` structure and the `CFileDialog` state under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]."},{"content":"style file dialogs do not support certain members and flags of the <ph id=\"ph1\">`CFileDialog`</ph>.","pos":[47036,47117],"source":" style file dialogs do not support certain members and flags of the `CFileDialog`."},{"content":"As a result, these will have no effect.","pos":[47118,47157]},{"pos":[47164,47311],"content":"The following is a list of the members that are not supported by <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>:","source":"The following is a list of the members that are not supported by [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]:"},{"pos":[47431,47620],"content":"The following flags are not supported and therefore have no effect when you use the <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style of <ph id=\"ph2\">`CFileDialog`</ph>:","source":"The following flags are not supported and therefore have no effect when you use the [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style of `CFileDialog`:"},{"content":"OFN_ENABLEHOOK","pos":[47630,47644]},{"content":"OFN_ENABLEINCLUDENOTIFY","pos":[47654,47677]},{"content":"OFN_ENABLETEMPLATE","pos":[47687,47705]},{"content":"OFN_ENABLETEMPLATEHANDLE","pos":[47715,47739]},{"content":"OFN_EXPLORER","pos":[47749,47761]},{"content":"OFN_EXTENSIONDIFFERENT","pos":[47771,47793]},{"content":"OFN_HIDEREADONLY","pos":[47803,47819]},{"pos":[47829,47869],"content":"OFN_LONGNAMES - effectively always on in"},{"pos":[47961,48004],"content":"OFN_NOLONGNAMES - effectively always off in"},{"pos":[48096,48142],"content":"OFN_NONETWORKBUTTON - effectively always on in"},{"content":"OFN_READONLY","pos":[48234,48246]},{"content":"OFN_SHOWHELP","pos":[48256,48268]},{"content":"For more information about this structure, see the <bpt id=\"p1\">[</bpt>OPENFILENAME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[48275,48470],"source":"For more information about this structure, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"For more information about the different behavior of the <ph id=\"ph1\">`CFileDialog`</ph> under <ph id=\"ph2\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, see <bpt id=\"p1\">[</bpt>CFileDialog Class<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept>.","pos":[48471,48697],"source":" For more information about the different behavior of the `CFileDialog` under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], see [CFileDialog Class](../../mfc/reference/cfiledialog-class.md)."},{"pos":[48750,48776],"content":"CFileDialog::MakeProminent"},{"content":"Places a control in the dialog so that it stands out compared to other controls.","pos":[48780,48860]},{"content":"Parameters","pos":[48923,48933]},{"content":"The ID of the control.","pos":[48950,48972]},{"content":"Remarks","pos":[48982,48989]},{"pos":[49044,49072],"content":"CFileDialog::OnButtonClicked"},{"content":"Called when the button is clicked.","pos":[49076,49110]},{"content":"Parameters","pos":[49180,49190]},{"content":"The ID of the button.","pos":[49207,49228]},{"content":"Remarks","pos":[49238,49245]},{"pos":[49305,49338],"content":"CFileDialog::OnCheckButtonToggled"},{"content":"Called when the check box is checked or unchecked.","pos":[49342,49392]},{"content":"Parameters","pos":[49493,49503]},{"content":"The ID of the check box.","pos":[49520,49544]},{"content":"Checked or unchecked.","pos":[49565,49586]},{"content":"Remarks","pos":[49596,49603]},{"pos":[49662,49694],"content":"CFileDialog::OnControlActivating"},{"content":"Called when the control is activated.","pos":[49698,49735]},{"content":"Parameters","pos":[49809,49819]},{"content":"The ID of the control.","pos":[49836,49858]},{"content":"Remarks","pos":[49868,49875]},{"pos":[49931,49960],"content":"CFileDialog::OnFileNameChange"},{"pos":[49964,50046],"content":"Override this method if you want to handle the <ph id=\"ph1\">`WM_NOTIFY``CDN_SELCHANGE`</ph> message.","source":"Override this method if you want to handle the `WM_NOTIFY``CDN_SELCHANGE` message."},{"content":"Remarks","pos":[50104,50111]},{"content":"The system sends the <ph id=\"ph1\">`CDN_SELCHANGE`</ph> message when the user selects a new file or folder in the file list of the <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Save As<ept id=\"p2\">**</ept> dialog box.","pos":[50115,50262],"source":"The system sends the `CDN_SELCHANGE` message when the user selects a new file or folder in the file list of the **Open** or **Save As** dialog box."},{"content":"Override this method if you want to perform any actions in response to this message.","pos":[50263,50347]},{"content":"The system sends this message only if the dialog box was created with the OFN_EXPLORER flag turned on.","pos":[50354,50456]},{"content":"For more information about the notification, see <bpt id=\"p1\">[</bpt>CDN_SELCHANGE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646865)</ept>.","pos":[50457,50582],"source":" For more information about the notification, see [CDN_SELCHANGE](http://msdn.microsoft.com/library/windows/desktop/ms646865)."},{"content":"For information about the OFN_EXPLORER flag, see the <bpt id=\"p1\">[</bpt>OPENFILENAME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure and <bpt id=\"p2\">[</bpt>Open and Save As Dialog Boxes<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms646960)</ept>.","pos":[50583,50817],"source":" For information about the OFN_EXPLORER flag, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure and [Open and Save As Dialog Boxes](http://msdn.microsoft.com/library/windows/desktop/ms646960)."},{"pos":[50869,50894],"content":"CFileDialog::OnFileNameOK"},{"content":"Override this function only if you want to provide custom validation of filenames that are entered into a common file dialog box.","pos":[50898,51027]},{"content":"Return Value","pos":[51081,51093]},{"content":"1 if the filename is not a valid filename; otherwise 0.","pos":[51097,51152]},{"content":"Remarks","pos":[51162,51169]},{"content":"This function allows you to reject a filename for any application-specific reason.","pos":[51173,51255]},{"content":"Normally, you do not need to use this function because the framework provides default validation of filenames and displays a message box if an invalid filename is entered.","pos":[51256,51427]},{"content":"If 1 is returned, the dialog box will remain displayed for the user to enter another filename.","pos":[51434,51528]},{"content":"The dialog procedure dismisses the dialog if the return is 0.","pos":[51529,51590]},{"content":"Other nonzero return values are currently reserved and should not be used.","pos":[51591,51665]},{"pos":[51719,51746],"content":"CFileDialog::OnFolderChange"},{"pos":[51750,51825],"content":"Override this function to handle the <bpt id=\"p1\">**</bpt>WM_NOTIFYCDN_FOLDERCHANGE<ept id=\"p1\">**</ept> message.","source":"Override this function to handle the **WM_NOTIFYCDN_FOLDERCHANGE** message."},{"content":"Remarks","pos":[51881,51888]},{"content":"The notification message is sent when a new folder is opened in the Open or Save As dialog box.","pos":[51892,51987]},{"content":"Notification is sent only if the dialog box was created with the OFN_EXPLORER style.","pos":[51994,52078]},{"content":"For more information about the notification, see <bpt id=\"p1\">[</bpt>CDN_FOLDERCHANGE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646859)</ept>.","pos":[52079,52207],"source":" For more information about the notification, see [CDN_FOLDERCHANGE](http://msdn.microsoft.com/library/windows/desktop/ms646859)."},{"content":"For information about the OFN_EXPLORER style, see the <bpt id=\"p1\">[</bpt>OPENFILENAME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure and <bpt id=\"p2\">[</bpt>Open and Save As Dialog Boxes<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms646960)</ept>.","pos":[52208,52443],"source":" For information about the OFN_EXPLORER style, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure and [Open and Save As Dialog Boxes](http://msdn.microsoft.com/library/windows/desktop/ms646960)."},{"pos":[52493,52516],"content":"CFileDialog::OnInitDone"},{"pos":[52520,52591],"content":"Override this function to handle the <ph id=\"ph1\">`WM_NOTIFY``CDN_INITDONE`</ph> message.","source":"Override this function to handle the `WM_NOTIFY``CDN_INITDONE` message."},{"content":"Remarks","pos":[52643,52650]},{"pos":[52654,52841],"content":"The system sends this notification message when the system has finished arranging controls in the <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Save As<ept id=\"p2\">**</ept> dialog box to make room for the controls of the child dialog box.","source":"The system sends this notification message when the system has finished arranging controls in the **Open** or **Save As** dialog box to make room for the controls of the child dialog box."},{"content":"The system sends this only if the dialog box was created with the OFN_EXPLORER style.","pos":[52848,52933]},{"content":"For more information about the notification, see <bpt id=\"p1\">[</bpt>CDN_INITDONE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646863)</ept>.","pos":[52934,53058],"source":" For more information about the notification, see [CDN_INITDONE](http://msdn.microsoft.com/library/windows/desktop/ms646863)."},{"content":"For information about the OFN_EXPLORER style, see the <bpt id=\"p1\">[</bpt>OPENFILENAME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure and <bpt id=\"p2\">[</bpt>Open and Save As Dialog Boxes<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms646960)</ept>.","pos":[53059,53294],"source":" For information about the OFN_EXPLORER style, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure and [Open and Save As Dialog Boxes](http://msdn.microsoft.com/library/windows/desktop/ms646960)."},{"pos":[53302,53757],"content":"[!NOTE]\n[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style file dialogs do not support this function. Attempting to use this function on a [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style file dialog will throw [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md). See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information.","leadings":["","> "],"nodes":[{"content":" style file dialogs do not support this function. Attempting to use this function on a [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style file dialog will throw [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md). See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information.","pos":[89,453],"nodes":[{"content":"style file dialogs do not support this function.","pos":[1,49]},{"content":"Attempting to use this function on a <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style file dialog will throw <bpt id=\"p1\">[</bpt>CNotSupportedException<ept id=\"p1\">](../../mfc/reference/cnotsupportedexception-class.md)</ept>.","pos":[50,276],"source":" Attempting to use this function on a [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style file dialog will throw [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md)."},{"content":"See <bpt id=\"p1\">[</bpt>CFileDialog Class<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept> for more information.","pos":[277,364],"source":" See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information."}]}]},{"pos":[53811,53838],"content":"CFileDialog::OnItemSelected"},{"content":"Called when the container item is selected.","pos":[53842,53885]},{"content":"Parameters","pos":[53981,53991]},{"content":"The ID of the container control.","pos":[54008,54040]},{"content":"The ID of the item.","pos":[54061,54080]},{"content":"Remarks","pos":[54090,54097]},{"pos":[54157,54190],"content":"CFileDialog::OnLBSelChangedNotify"},{"content":"This function is called whenever the current selection in a list box is about to change.","pos":[54194,54282]},{"content":"Parameters","pos":[54398,54408]},{"content":"nIDBox","pos":[54413,54419]},{"content":"The ID of the list box or combo box in which the selection occurred.","pos":[54424,54492]},{"content":"The index of the current selection.","pos":[54512,54547]},{"content":"The control notification code.","pos":[54565,54595]},{"content":"This parameter must have one of the following values:","pos":[54596,54649]},{"pos":[54657,54748],"content":"<bpt id=\"p1\">**</bpt>CD_LBSELCHANGE<ept id=\"p1\">**</ept> Specifies <ph id=\"ph1\">`iCurSel`</ph> is the selected item in a single-selection list box.","source":"**CD_LBSELCHANGE** Specifies `iCurSel` is the selected item in a single-selection list box."},{"pos":[54756,54848],"content":"<bpt id=\"p1\">**</bpt>CD_LBSELSUB<ept id=\"p1\">**</ept> Specifies that <ph id=\"ph1\">`iCurSel`</ph> is no longer selected in a multiselection list box.","source":"**CD_LBSELSUB** Specifies that `iCurSel` is no longer selected in a multiselection list box."},{"pos":[54856,54938],"content":"<bpt id=\"p1\">**</bpt>CD_LBSELADD<ept id=\"p1\">**</ept> Specifies that <ph id=\"ph1\">`iCurSel`</ph> is selected in a multiselection list box.","source":"**CD_LBSELADD** Specifies that `iCurSel` is selected in a multiselection list box."},{"pos":[54946,55030],"content":"<bpt id=\"p1\">**</bpt>CD_LBSELNOITEMS<ept id=\"p1\">**</ept> Specifies that no selection exists in a multiselection list box.","source":"**CD_LBSELNOITEMS** Specifies that no selection exists in a multiselection list box."},{"content":"Remarks","pos":[55040,55047]},{"content":"Override this function to provide custom handling of selection changes in the list box.","pos":[55051,55138]},{"content":"For example, you can use this function to display the access rights or date-last-modified of each file the user selects.","pos":[55139,55259]},{"pos":[55315,55344],"content":"CFileDialog::OnShareViolation"},{"content":"Override this function to provide custom handling of share violations.","pos":[55348,55418]},{"content":"Parameters","pos":[55496,55506]},{"content":"The path of the file on which the share violation occurred.","pos":[55528,55587]},{"content":"Return Value","pos":[55597,55609]},{"content":"One of the following values:","pos":[55613,55641]},{"pos":[55649,55719],"content":"<bpt id=\"p1\">**</bpt>OFN_SHAREFALLTHROUGH<ept id=\"p1\">**</ept> The filename is returned from the dialog box.","source":"**OFN_SHAREFALLTHROUGH** The filename is returned from the dialog box."},{"pos":[55727,55783],"content":"<bpt id=\"p1\">**</bpt>OFN_SHARENOWARN<ept id=\"p1\">**</ept> No further action needs to be taken.","source":"**OFN_SHARENOWARN** No further action needs to be taken."},{"pos":[55791,55871],"content":"<bpt id=\"p1\">**</bpt>OFN_SHAREWARN<ept id=\"p1\">**</ept> The user receives the standard warning message for this error.","source":"**OFN_SHAREWARN** The user receives the standard warning message for this error."},{"content":"Remarks","pos":[55881,55888]},{"content":"Normally, you do not need to use this function because the framework provides default checking of share violations and displays a message box if a share violation occurs.","pos":[55892,56062]},{"pos":[56069,56204],"content":"If you want to disable share violation checking, use the bitwise OR operator to combine the flag <bpt id=\"p1\">**</bpt>OFN_SHAREAWARE<ept id=\"p1\">**</ept> with <ph id=\"ph1\">`m_ofn.Flags`</ph>.","source":"If you want to disable share violation checking, use the bitwise OR operator to combine the flag **OFN_SHAREAWARE** with `m_ofn.Flags`."},{"pos":[56256,56281],"content":"CFileDialog::OnTypeChange"},{"pos":[56285,56358],"content":"Override this function to handle the <bpt id=\"p1\">**</bpt>WM_NOTIFYCDN_TYPECHANGE<ept id=\"p1\">**</ept> message.","source":"Override this function to handle the **WM_NOTIFYCDN_TYPECHANGE** message."},{"content":"Remarks","pos":[56412,56419]},{"content":"The notification message is sent when the user selects a new file type from the list of file types in the Open or Save As dialog box.","pos":[56423,56556]},{"content":"Notification is sent only if the dialog box was created with the OFN_EXPLORER style.","pos":[56563,56647]},{"content":"For more information about the notification, see <bpt id=\"p1\">[</bpt>CDN_TYPECHANGE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646868)</ept>.","pos":[56648,56774],"source":" For more information about the notification, see [CDN_TYPECHANGE](http://msdn.microsoft.com/library/windows/desktop/ms646868)."},{"content":"For information about the OFN_EXPLORER style, see the <bpt id=\"p1\">[</bpt>OPENFILENAME<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646839)</ept> structure and <bpt id=\"p2\">[</bpt>Open and Save As Dialog Boxes<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms646960)</ept>.","pos":[56775,57010],"source":" For information about the OFN_EXPLORER style, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure and [Open and Save As Dialog Boxes](http://msdn.microsoft.com/library/windows/desktop/ms646960)."},{"pos":[57067,57097],"content":"CFileDialog::RemoveControlItem"},{"content":"Removes an item from a container control in the dialog.","pos":[57101,57156]},{"content":"Parameters","pos":[57250,57260]},{"content":"The ID of the container control to remove the item from.","pos":[57277,57333]},{"content":"The ID of the item.","pos":[57354,57373]},{"content":"Remarks","pos":[57383,57390]},{"pos":[57449,57481],"content":"CFileDialog::SetCheckButtonState"},{"content":"Sets the current state of a check button (check box) in the dialog.","pos":[57485,57552]},{"content":"Parameters","pos":[57647,57657]},{"content":"The ID of the check box.","pos":[57674,57698]},{"content":"The state of the check box.","pos":[57719,57746]},{"content":"indicates checked; <ph id=\"ph1\">`FALSE`</ph> indicates Unchecked.","pos":[57754,57801],"source":" indicates checked; `FALSE` indicates Unchecked."},{"content":"Remarks","pos":[57811,57818]},{"pos":[57877,57909],"content":"CFileDialog::SetControlItemState"},{"content":"Sets the current state of an item in a container control found in the dialog.","pos":[57913,57990]},{"content":"Parameters","pos":[58117,58127]},{"content":"The ID of the container control.","pos":[58144,58176]},{"content":"The ID of the item.","pos":[58197,58216]},{"content":"One or more values from the CDCONTROLSTATE enumeration that indicate the new state of the control.","pos":[58236,58334]},{"content":"Remarks","pos":[58344,58351]},{"pos":[58409,58440],"content":"CFileDialog::SetControlItemText"},{"content":"Sets the text of a control item.","pos":[58444,58476]},{"content":"For example, the text that accompanies a radio button or an item in a menu.","pos":[58477,58552]},{"content":"Parameters","pos":[58678,58688]},{"content":"The ID of the container control.","pos":[58705,58737]},{"content":"The ID of the item.","pos":[58758,58777]},{"content":"Item's text.","pos":[58798,58810]},{"content":"Remarks","pos":[58820,58827]},{"pos":[58882,58910],"content":"CFileDialog::SetControlLabel"},{"content":"Sets the text associated with a control, such as button text or an edit box label.","pos":[58914,58996]},{"content":"Parameters","pos":[59097,59107]},{"content":"The ID of the control.","pos":[59124,59146]},{"content":"The control name.","pos":[59167,59184]},{"content":"Remarks","pos":[59194,59201]},{"pos":[59256,59284],"content":"CFileDialog::SetControlState"},{"content":"Sets the current visibility and enabled states of a given control.","pos":[59288,59354]},{"content":"Parameters","pos":[59455,59465]},{"content":"The ID of the control.","pos":[59482,59504]},{"content":"One or more values from the CDCONTROLSTATE enumeration that indicate the current state of the control.","pos":[59524,59626]},{"content":"Remarks","pos":[59636,59643]},{"pos":[59697,59724],"content":"CFileDialog::SetControlText"},{"pos":[59728,59843],"content":"Call this method to set the text for the specified control in an Explorer-style <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Save As<ept id=\"p2\">**</ept> dialog box.","source":"Call this method to set the text for the specified control in an Explorer-style **Open** or **Save As** dialog box."},{"content":"Parameters","pos":[59987,59997]},{"content":"[in]","pos":[60001,60005]},{"content":"The ID of the control for which to set the text.","pos":[60015,60063]},{"content":"[in]","pos":[60070,60074]},{"content":"A pointer to the string that contains the text to set for the control.","pos":[60085,60155]},{"content":"Remarks","pos":[60165,60172]},{"content":"Both versions of this function are valid for applications that use Unicode.","pos":[60176,60251]},{"content":"However, only the version with the LPCSTR type is valid for applications that use <ph id=\"ph1\">[!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)]</ph>.","pos":[60252,60411],"source":" However, only the version with the LPCSTR type is valid for applications that use [!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)]."},{"content":"To use this method, you must create the dialog box with the OFN_EXPLORER style.","pos":[60418,60497]},{"content":"Otherwise, the function will fail with an assertion.","pos":[60498,60550]},{"pos":[60599,60621],"content":"CFileDialog::SetDefExt"},{"content":"Call this function to set the default file name extension for an Explorer-style Open or Save As common dialog box.","pos":[60625,60739]},{"content":"Parameters","pos":[60793,60803]},{"content":"A pointer to a string containing the default extension to use for the dialog box object.","pos":[60817,60905]},{"content":"This string must not contain a period (.).","pos":[60906,60948]},{"content":"Remarks","pos":[60958,60965]},{"pos":[60969,61092],"content":"The dialog box must have been created with the <bpt id=\"p1\">**</bpt>OFN_EXPLORER<ept id=\"p1\">**</ept> style; otherwise, the function will fail with an assertion.","source":"The dialog box must have been created with the **OFN_EXPLORER** style; otherwise, the function will fail with an assertion."},{"pos":[61146,61173],"content":"CFileDialog::SetEditBoxText"},{"content":"Sets the current text in an edit box control.","pos":[61177,61222]},{"content":"Parameters","pos":[61321,61331]},{"content":"The ID of the edit box.","pos":[61348,61371]},{"content":"The text value.","pos":[61391,61406]},{"content":"Remarks","pos":[61416,61423]},{"pos":[61476,61502],"content":"CFileDialog::SetProperties"},{"content":"Provides a property store that defines the default values to be used for the item being saved.","pos":[61506,61600]},{"content":"Parameters","pos":[61667,61677]},{"content":"A list of predefined properties separated by \";\".","pos":[61699,61748]},{"content":"For a list of the flags, see the <ph id=\"ph1\">`Flags`</ph> section of <bpt id=\"p1\">[</bpt>OPENFILENAME<ept id=\"p1\">](http://msdn.microsoft.com/en-us/8cecfd45-f7c1-4f8d-81a0-4e7fecc3b104)</ept>.","pos":[61749,61886],"source":" For a list of the flags, see the `Flags` section of [OPENFILENAME](http://msdn.microsoft.com/en-us/8cecfd45-f7c1-4f8d-81a0-4e7fecc3b104)."},{"content":"Remarks","pos":[61896,61903]},{"pos":[61965,62000],"content":"CFileDialog::SetSelectedControlItem"},{"content":"Sets the selected state of a particular item in an option button group or a combo box found in the dialog.","pos":[62004,62110]},{"content":"Parameters","pos":[62209,62219]},{"content":"The ID of the container control.","pos":[62236,62268]},{"content":"The ID of the item that the user selected in the control.","pos":[62289,62346]},{"content":"Remarks","pos":[62356,62363]},{"pos":[62414,62438],"content":"CFileDialog::SetTemplate"},{"pos":[62442,62542],"content":"Sets the dialog box template for the <bpt id=\"p1\">[</bpt>CFileDialog<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept> object.","source":"Sets the dialog box template for the [CFileDialog](../../mfc/reference/cfiledialog-class.md) object."},{"content":"Parameters","pos":[62692,62702]},{"content":"[in]","pos":[62706,62710]},{"content":"Contains the ID number of the template resource for the non-Explorer <ph id=\"ph1\">`CFileDialog`</ph> object.","pos":[62724,62814],"source":" Contains the ID number of the template resource for the non-Explorer `CFileDialog` object."},{"content":"This template is only used on Windows NT 3.51 or when the OFN_EXPLORER style is not present.","pos":[62815,62907]},{"content":"[in]","pos":[62914,62918]},{"content":"Contains the ID number of the template resource for the Explorer <ph id=\"ph1\">`CFileDialog`</ph> object.","pos":[62932,63018],"source":" Contains the ID number of the template resource for the Explorer `CFileDialog` object."},{"content":"This template is used only on <ph id=\"ph1\">[!INCLUDE[WinNt4Family](../../mfc/reference/includes/winnt4family_md.md)]</ph> and later versions, Windows 95 and later versions, or when the OFN_EXPLORER style is present.","pos":[63019,63216],"source":" This template is used only on [!INCLUDE[WinNt4Family](../../mfc/reference/includes/winnt4family_md.md)] and later versions, Windows 95 and later versions, or when the OFN_EXPLORER style is present."},{"content":"[in]","pos":[63223,63227]},{"content":"Contains the name of the template resource for the non-Explorer <ph id=\"ph1\">`CFileDialog`</ph> object.","pos":[63242,63327],"source":" Contains the name of the template resource for the non-Explorer `CFileDialog` object."},{"content":"This template is only used on Windows NT 3.51 or when the OFN_EXPLORER style is not present.","pos":[63328,63420]},{"content":"[in]","pos":[63427,63431]},{"content":"Contains the name of the template resource of the Explorer <ph id=\"ph1\">`CFileDialog`</ph> object.","pos":[63446,63526],"source":" Contains the name of the template resource of the Explorer `CFileDialog` object."},{"content":"This template is used only on <ph id=\"ph1\">[!INCLUDE[WinNt4Family](../../mfc/reference/includes/winnt4family_md.md)]</ph> and later versions, Windows 95 and later versions, or when the OFN_EXPLORER style is present.","pos":[63527,63724],"source":" This template is used only on [!INCLUDE[WinNt4Family](../../mfc/reference/includes/winnt4family_md.md)] and later versions, Windows 95 and later versions, or when the OFN_EXPLORER style is present."},{"content":"Remarks","pos":[63734,63741]},{"content":"The system will use only one of the specified templates.","pos":[63745,63801]},{"content":"The system determines which template to use based on the presence of the OFN_EXPLORER style and the operating system that the application is running on.","pos":[63802,63954]},{"content":"By specifying both a non-Explorer and Explorer-style template, it is easy to support Windows NT 3.51, <ph id=\"ph1\">[!INCLUDE[WinNt4Family](../../mfc/reference/includes/winnt4family_md.md)]</ph> and later versions, and Windows 95 and later versions.","pos":[63955,64185],"source":" By specifying both a non-Explorer and Explorer-style template, it is easy to support Windows NT 3.51, [!INCLUDE[WinNt4Family](../../mfc/reference/includes/winnt4family_md.md)] and later versions, and Windows 95 and later versions."},{"pos":[64193,64848],"content":"[!NOTE]\n[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style file dialog boxes do not support this function. Attempting to use this function on a [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style file dialog box will throw [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md). See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information. An alternative is to use a customized dialog. For more information about using a custom `CFileDialog`, see [IFileDialogCustomize](http://msdn.microsoft.com/library/windows/desktop/bb775912).","leadings":["","> "],"nodes":[{"content":" style file dialog boxes do not support this function. Attempting to use this function on a [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style file dialog box will throw [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md). See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information. An alternative is to use a customized dialog. For more information about using a custom `CFileDialog`, see [IFileDialogCustomize](http://msdn.microsoft.com/library/windows/desktop/bb775912).","pos":[89,653],"nodes":[{"content":"style file dialog boxes do not support this function.","pos":[1,54]},{"content":"Attempting to use this function on a <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph> style file dialog box will throw <bpt id=\"p1\">[</bpt>CNotSupportedException<ept id=\"p1\">](../../mfc/reference/cnotsupportedexception-class.md)</ept>.","pos":[55,285],"source":" Attempting to use this function on a [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style file dialog box will throw [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md)."},{"content":"See <bpt id=\"p1\">[</bpt>CFileDialog Class<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept> for more information.","pos":[286,373],"source":" See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information."},{"content":"An alternative is to use a customized dialog.","pos":[374,419]},{"content":"For more information about using a custom <ph id=\"ph1\">`CFileDialog`</ph>, see <bpt id=\"p1\">[</bpt>IFileDialogCustomize<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775912)</ept>.","pos":[420,564],"source":" For more information about using a custom `CFileDialog`, see [IFileDialogCustomize](http://msdn.microsoft.com/library/windows/desktop/bb775912)."}]}]},{"pos":[64904,64933],"content":"CFileDialog::StartVisualGroup"},{"content":"Declares a visual group in the dialog.","pos":[64937,64975]},{"content":"Subsequent calls to any \"add\" method add those elements to this group.","pos":[64976,65046]},{"content":"Parameters","pos":[65148,65158]},{"content":"The ID of the visual group.","pos":[65175,65202]},{"content":"The group name.","pos":[65223,65238]},{"content":"Remarks","pos":[65248,65255]},{"pos":[65319,65356],"content":"CFileDialog::UpdateOFNFromShellDialog"},{"pos":[65360,65508],"content":"Updates the <ph id=\"ph1\">`m_ofn`</ph> data structure of the <bpt id=\"p1\">[</bpt>CFileDialog<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept> based on the current state of the internal object.","source":"Updates the `m_ofn` data structure of the [CFileDialog](../../mfc/reference/cfiledialog-class.md) based on the current state of the internal object."},{"content":"Remarks","pos":[65566,65573]},{"content":"In versions of Windows before <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, the member <bpt id=\"p1\">[</bpt>OPENFILENAME<ept id=\"p1\">](https://msdn.microsoft.com/library/ms911906.aspx)</ept> data structure was continuously synchronized with the state of the <ph id=\"ph2\">`CFileDialog`</ph>.","pos":[65577,65847],"source":"In versions of Windows before [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], the member [OPENFILENAME](https://msdn.microsoft.com/library/ms911906.aspx) data structure was continuously synchronized with the state of the `CFileDialog`."},{"content":"Any changes to the <bpt id=\"p1\">[</bpt>m_ofn<ept id=\"p1\">](#cfiledialog__m_ofn)</ept> member variable directly affected the state of the dialog box.","pos":[65848,65958],"source":" Any changes to the [m_ofn](#cfiledialog__m_ofn) member variable directly affected the state of the dialog box."},{"content":"Also, any changes to the state of the dialog immediately updated the m_ofn member variable.","pos":[65959,66050]},{"content":"In <ph id=\"ph1\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, the <ph id=\"ph2\">`m_ofn`</ph> data structure is not automatically updated.","pos":[66057,66199],"source":"In [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], the `m_ofn` data structure is not automatically updated."},{"content":"To guarantee the accuracy of the data in the <ph id=\"ph1\">`m_ofn`</ph> member variable, you should call the <ph id=\"ph2\">`UpdateOFNFromShellDialog`</ph> function before accessing the data.","pos":[66200,66352],"source":" To guarantee the accuracy of the data in the `m_ofn` member variable, you should call the `UpdateOFNFromShellDialog` function before accessing the data."},{"content":"Windows calls this function automatically during the processing of <bpt id=\"p1\">[</bpt>IFileDialog::OnFileOK<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775879)</ept>.","pos":[66353,66504],"source":" Windows calls this function automatically during the processing of [IFileDialog::OnFileOK](http://msdn.microsoft.com/library/windows/desktop/bb775879)."},{"pos":[66511,66728],"content":"For more information about how to use the <ph id=\"ph1\">`CFileDialog`</ph> class under <ph id=\"ph2\">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, see <bpt id=\"p1\">[</bpt>CFileDialog Class<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept>.","source":"For more information about how to use the `CFileDialog` class under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], see [CFileDialog Class](../../mfc/reference/cfiledialog-class.md)."},{"content":"Example","pos":[66738,66745]},{"content":"This example updates the <ph id=\"ph1\">`CFileDialog`</ph> before displaying it.","pos":[66749,66809],"source":"This example updates the `CFileDialog` before displaying it."},{"content":"Before updating the <ph id=\"ph1\">`m_ofn`</ph> member variable, we need to synchronize it to the current state of the dialog box.","pos":[66810,66920],"source":" Before updating the `m_ofn` member variable, we need to synchronize it to the current state of the dialog box."},{"pos":[66938,66959],"content":"NVC_MFC_CFileDialog#1"},{"content":"See Also","pos":[67031,67039]},{"content":"CCommonDialog Class","pos":[67044,67063]},{"content":"Hierarchy Chart","pos":[67114,67129]}],"content":"---\ntitle: \"CFileDialog Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CFileDialog\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CFileDialog class\"\n  - \"common file dialog boxes\"\n  - \"dialog boxes, common\"\nms.assetid: fda4fd3c-08b8-4ce0-8e9d-7bab23f8c6c0\ncaps.latest.revision: 47\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CFileDialog Class\nEncapsulates the common dialog box that is used for file open or file save operations.  \n  \n## Syntax  \n  \n```  \nclass CFileDialog : public CCommonDialog  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFileDialog::CFileDialog](#cfiledialog__cfiledialog)|Constructs a `CFileDialog` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFileDialog::AddCheckButton](#cfiledialog__addcheckbutton)|Adds a check button to the dialog.|  \n|[CFileDialog::AddComboBox](#cfiledialog__addcombobox)|Adds a combo box to the dialog.|  \n|[CFileDialog::AddControlItem](#cfiledialog__addcontrolitem)|Adds an item to a container control in the dialog.|  \n|[CFileDialog::AddEditBox](#cfiledialog__addeditbox)|Adds an edit box to the dialog.|  \n|[CFileDialog::AddMenu](#cfiledialog__addmenu)|Adds a menu to the dialog.|  \n|[CFileDialog::AddPlace](#cfiledialog__addplace)|Overloaded. Adds a folder to the list of places available for the user to open or save items.|  \n|[CFileDialog::AddPushButton](#cfiledialog__addpushbutton)|Adds a button to the dialog.|  \n|[CFileDialog::AddRadioButtonList](#cfiledialog__addradiobuttonlist)|Adds an option button (also known as radio button) group to the dialog.|  \n|[CFileDialog::AddSeparator](#cfiledialog__addseparator)|Adds a separator to the dialog.|  \n|[CFileDialog::AddText](#cfiledialog__addtext)|Adds text content to the dialog.|  \n|[CFileDialog::ApplyOFNToShellDialog](#cfiledialog__applyofntoshelldialog)|Updates the state of the `CFileDialog` to match the parameters and flags stored in the `m_ofn` member variable.|  \n|[CFileDialog::DoModal](#cfiledialog__domodal)|Displays the dialog box and enables the user to make a selection.|  \n|[CFileDialog::EnableOpenDropDown](#cfiledialog__enableopendropdown)|Enables a drop-down list on the **Open** or **Save** button in the dialog.|  \n|[CFileDialog::EndVisualGroup](#cfiledialog__endvisualgroup)|Stops the addition of elements to a visual group in the dialog.|  \n|[CFileDialog::GetCheckButtonState](#cfiledialog__getcheckbuttonstate)|Gets the current state of a check button (check box) in the dialog.|  \n|[CFileDialog::GetControlItemState](#cfiledialog__getcontrolitemstate)|Gets the current state of an item in a container control found in the dialog.|  \n|[CFileDialog::GetControlState](#cfiledialog__getcontrolstate)|Gets the current visibility and enabled states of a given control.|  \n|[CFileDialog::GetEditBoxText](#cfiledialog__geteditboxtext)|Gets the current text in an edit box control.|  \n|[CFileDialog::GetFileExt](#cfiledialog__getfileext)|Returns the extension of the selected file.|  \n|[CFileDialog::GetFileName](#cfiledialog__getfilename)|Returns the file name of the selected file.|  \n|[CFileDialog::GetFileTitle](#cfiledialog__getfiletitle)|Returns the title of the selected file.|  \n|[CFileDialog::GetFolderPath](#cfiledialog__getfolderpath)|Retrieves the path of the currently open folder or directory for an Explorer-style **Open** or **Save As** common dialog box.|  \n|[CFileDialog::GetIFileDialogCustomize](#cfiledialog__getifiledialogcustomize)|Retrieves the internal COM object for a customized `CFileDialog` object.|  \n|[CFileDialog::GetIFileOpenDialog](#cfiledialog__getifileopendialog)|Retrieves the internal COM object for a `CFileDialog` that is used as an **Open** file dialog box.|  \n|[CFileDialog::GetIFileSaveDialog](#cfiledialog__getifilesavedialog)|Retrieves the internal COM object for a `CFileDialog` that is used as a **Save** file dialog box.|  \n|[CFileDialog::GetNextPathName](#cfiledialog__getnextpathname)|Returns the full path of the next selected file.|  \n|[CFileDialog::GetOFN](#cfiledialog__getofn)|Retrieves the `OPENFILENAME` structure of the `CFileDialog` object.|  \n|[CFileDialog::GetPathName](#cfiledialog__getpathname)|Returns the full path of the selected file.|  \n|[CFileDialog::GetReadOnlyPref](#cfiledialog__getreadonlypref)|Returns the read-only status of the selected file.|  \n|[CFileDialog::GetResult](#cfiledialog__getresult)|Gets the choice that the user made in the dialog.|  \n|[CFileDialog::GetResults](#cfiledialog__getresults)|Gets the user's choices in a dialog that allows multiple selection.|  \n|[CFileDialog::GetSelectedControlItem](#cfiledialog__getselectedcontrolitem)|Gets a particular item from specified container controls in the dialog.|  \n|[CFileDialog::GetStartPosition](#cfiledialog__getstartposition)|Returns the position of the first element of the file name list.|  \n|[CFileDialog::HideControl](#cfiledialog__hidecontrol)|Hides the specified control in an Explorer-style **Open** or **Save As** common dialog box.|  \n|[CFileDialog::IsPickFoldersMode](#cfiledialog__ispickfoldersmode)|Determines if the current dialog in folder picker mode.|  \n|[CFileDialog::MakeProminent](#cfiledialog__makeprominent)|Places a control in the dialog so that it stands out compared to other added controls.|  \n|[CFileDialog::RemoveControlItem](#cfiledialog__removecontrolitem)|Removes an item from a container control in the dialog.|  \n|[CFileDialog::SetCheckButtonState](#cfiledialog__setcheckbuttonstate)|Sets the current state of a check button (check box) in the dialog.|  \n|[CFileDialog::SetControlItemState](#cfiledialog__setcontrolitemstate)|Sets the current state of an item in a container control found in the dialog.|  \n|[CFileDialog::SetControlItemText](#cfiledialog__setcontrolitemtext)|Sets the text of a control item. For example, the text that accompanies a radio button or an item in a menu.|  \n|[CFileDialog::SetControlLabel](#cfiledialog__setcontrollabel)|Sets the text associated with a control, such as button text or an edit box label.|  \n|[CFileDialog::SetControlState](#cfiledialog__setcontrolstate)|Sets the current visibility and enabled states of a given control.|  \n|[CFileDialog::SetControlText](#cfiledialog__setcontroltext)|Sets the text for the specified control in an Explorer-style **Open** or **Save As** common dialog box.|  \n|[CFileDialog::SetDefExt](#cfiledialog__setdefext)|Sets the default file name extension for an Explorer-style **Open** or **Save As** common dialog box.|  \n|[CFileDialog::SetEditBoxText](#cfiledialog__seteditboxtext)|Sets the current text in an edit box control.|  \n|[CFileDialog::SetProperties](#cfiledialog__setproperties)|Provides a property store that defines the default values to be used for the item being saved.|  \n|[CFileDialog::SetSelectedControlItem](#cfiledialog__setselectedcontrolitem)|Sets the selected state of a particular item in an option button group or a combo box found in the dialog.|  \n|[CFileDialog::SetTemplate](#cfiledialog__settemplate)|Sets the dialog box template for the `CFileDialog` object.|  \n|[CFileDialog::StartVisualGroup](#cfiledialog__startvisualgroup)|Declares a visual group in the dialog. Subsequent calls to any \"add\" method add those elements to this group.|  \n|[CFileDialog::UpdateOFNFromShellDialog](#cfiledialog__updateofnfromshelldialog)|Updates the data stored in the `m_ofn` member variable to match the current state of the file dialog box.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFileDialog::OnButtonClicked](#cfiledialog__onbuttonclicked)|Called when the button is clicked.|  \n|[CFileDialog::OnCheckButtonToggled](#cfiledialog__oncheckbuttontoggled)|Called when the check box is checked/unchecked.|  \n|[CFileDialog::OnControlActivating](#cfiledialog__oncontrolactivating)|Called when the control is being active.|  \n|[CFileDialog::OnFileNameChange](#cfiledialog__onfilenamechange)|Handles the `WM_NOTIFY CDN_SELCHANGE` message.|  \n|[CFileDialog::OnFileNameOK](#cfiledialog__onfilenameok)|Validates the file name entered in the dialog box.|  \n|[CFileDialog::OnFolderChange](#cfiledialog__onfolderchange)|Handles the `WM_NOTIFY CDN_FOLDERCHANGE` message.|  \n|[CFileDialog::OnInitDone](#cfiledialog__oninitdone)|Handles the `WM_NOTIFY CDN_INITDONE` message.|  \n|[CFileDialog::OnItemSelected](#cfiledialog__onitemselected)|Called when the container item is being selected.|  \n|[CFileDialog::OnLBSelChangedNotify](#cfiledialog__onlbselchangednotify)|Allows you to perform custom actions when the file selection changes.|  \n|[CFileDialog::OnShareViolation](#cfiledialog__onshareviolation)|Handles share violations.|  \n|[CFileDialog::OnTypeChange](#cfiledialog__ontypechange)|Handles the `WM_NOTIFY CDN_TYPECHANGE` message.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CFileDialog::m_ofn](#cfiledialog__m_ofn)|The Windows `OPENFILENAME` structure. Provides access to basic file dialog box parameters.|  \n  \n## Remarks  \n Common file dialog boxes let you implement file-selection dialog boxes, for example, **Open File** and **Save As**, in a manner that is consistent with Windows standards.  \n  \n You can use [CFileDialog](../../mfc/reference/cfiledialog-class.md) as is with the constructor provided, or you can derive your own dialog box class from `CFileDialog` and write a constructor to suit your needs. In either case, these dialog boxes will behave like standard MFC dialog boxes because they are derived from the [CCommonDialog Class](../../mfc/reference/ccommondialog-class.md). `CFileDialog` relies on the COMMDLG.DLL file that is included in Windows.  \n  \n Both the appearance and the functionality of the `CFileDialog` with [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] differ from the earlier versions of Windows. The default `CFileDialog` automatically uses the new [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style without code changes if a program is compiled and run under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]. Use the `bVistaStyle` parameter in the constructor to manually override this automatic update. The exception to the automatic update is customized dialog boxes. They will not be converted to the new style. For more information about the constructor, see [CFileDialog::CFileDialog](#cfiledialog__cfiledialog).  \n  \n> [!NOTE]\n>  The control ID system differs in [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] from earlier versions of Windows when you use a `CFileDialog`. You must update all references to `CFileDialog` controls in code before you can port your project from an earlier version of Windows.  \n  \n Some `CFileDialog` methods are not supported under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]. Check the individual method topic for information about whether the method is supported. In addition, the following inherited functions are not supported under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]:  \n  \n- [CDialog::OnInitDialog](../../mfc/reference/cdialog-class.md#cdialog__oninitdialog)  \n  \n- [CDialog::OnSetFont](../../mfc/reference/cdialog-class.md#cdialog__onsetfont)  \n  \n The windows messages for the `CFileDialog` class vary based on what operating system you are using. For example, Windows XP does not support [CDialog::OnCancel](../../mfc/reference/cdialog-class.md#cdialog__oncancel) and [CDialog::OnOK](../../mfc/reference/cdialog-class.md#cdialog__onok) for the `CFileDialog` class. However, [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] does support them. For more information about the different messages that are generated and the order in which they are received, see [CFileDialog Sample: Logging Event Order](../../visual-cpp-samples.md).  \n  \n To use a `CFileDialog` object, first create the object by using the `CFileDialog` constructor. After the dialog box has been constructed, you can set or modify any values in the [CFileDialog::m_ofn](#cfiledialog__m_ofn) structure to initialize the values or states of the dialog box controls. The `m_ofn` structure is of type `OPENFILENAME`. For more information, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n After you initialize the dialog box controls, call the [CFileDialog::DoModal](#cfiledialog__domodal) method to display the dialog box so that the user can type the path and file name. `DoModal` returns whether the user clicked the OK (IDOK) or the Cancel (IDCANCEL) button. If `DoModal` returns IDOK, you can use one of the `CFileDialog` public member functions to retrieve the information put in by the user.  \n  \n> [!NOTE]\n>  Under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], multiple calls to [IFileDialog::SetFileTypes](http://msdn.microsoft.com/library/windows/desktop/bb775980) causes an error. The second call to `SetFileTypes` for any instance of a `CFileDialog` will return `E_UNEXPECTED` in [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]. Some `CFileDialog` method functions call `SetFileTypes`. For example, two calls to `CFileDialog::DoModal` for the same instance of a `CFileDialog` generates [ASSERT](http://msdn.microsoft.com/library/1e70902d-d58c-4e7b-9f69-2aeb6cbe476c).  \n  \n `CFileDialog` includes several protected members that let you do custom handling of share violations, file name validation, and list-box change notification. These protected members are callback functions that most applications do not have to use because default handling is performed automatically. Message-map entries for these functions are not required because they are standard virtual functions.  \n  \n You can use the Windows [CommDlgExtendedError](http://msdn.microsoft.com/library/windows/desktop/ms646916) function to determine whether an error occurred during initialization of the dialog box and to learn more about the error.  \n  \n The destruction of `CFileDialog` objects is handled automatically. You do not have to call [CDialog::EndDialog](../../mfc/reference/cdialog-class.md#cdialog__enddialog).  \n  \n To let the user select multiple files, set the `OFN_ALLOWMULTISELECT` flag before you call `DoModal`. You must supply your own file name buffer to accommodate the returned list of multiple file names. Do this by replacing `m_ofn.lpstrFile` with a pointer to a buffer you have allocated, after you construct the `CFileDialog`, but before you call `DoModal`.  \n  \n Additionally, you must set `m_ofn.nMaxFile` by using the number of characters in the buffer pointed to by `m_ofn.lpstrFile`. If you set the maximum number of files to be selected to `n`, the required buffer size is `n * (_MAX_PATH + 1) + 1`. The first item returned in the buffer is the path to the folder where the files were selected. For [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]-style dialog boxes, the directory and file name strings are null-terminated, with an extra null character after the last file name. This format enables the Explorer-style dialog boxes to return long file names that include spaces. For old-style dialog boxes, the directory and file name strings are separated by spaces and the function uses short file names for file names with spaces.  \n  \n The following example demonstrates how to use a buffer to retrieve and list multiple file names.  \n  \n [!code-cpp[NVC_MFCFiles#23](../../atl-mfc-shared/reference/codesnippet/cpp/cfiledialog-class_1.cpp)]  \n  \n To change the buffer size in response to the user selecting multiple file names, you must derive a new class from `CFileDialog` and override the [CFileDialog::OnFileNameChange](#cfiledialog__onfilenamechange) method.  \n  \n If you derive a new class from `CFileDialog`, you can use a message map to handle any messages. To extend the default message handling, derive a class from `CFileDialog`, add a message map to the new class, and provide member functions for the new messages. You do not have to provide a hook function to customize the dialog box.  \n  \n To customize the dialog box, derive a class from `CFileDialog`, provide a custom dialog box template, and add a message map to process the notification messages from the extended controls. Pass any unprocessed messages to the base class. You do not have to customize the hook function.  \n  \n When you are using the [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style of the `CFileDialog`, you cannot use message maps and dialog box templates. Instead, you must use the COM interfaces for similar functionality.  \n  \n For more information about how to use `CFileDialog`, see [Common Dialog Classes](../../mfc/common-dialog-classes.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CDialog](../../mfc/reference/cdialog-class.md)  \n  \n [CCommonDialog](../../mfc/reference/ccommondialog-class.md)  \n  \n `CFileDialog`  \n  \n## Requirements  \n **Header:** afxdlgs.h  \n  \n##  <a name=\"cfiledialog__addcheckbutton\"></a>  CFileDialog::AddCheckButton  \n Adds a check button to the dialog.  \n  \n```  \nHRESULT AddCheckButton(\n    DWORD dwIDCtl,  \n    const CString& strLabel,  \n    BOOL bChecked);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the check button to add.  \n  \n `strLabel`  \n The check button name.  \n  \n `bChecked`  \n A Boolean indicating the current state of the check button. `TRUE` if checked; `FALSE` otherwise  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__addcombobox\"></a>  CFileDialog::AddComboBox  \n Adds a combo box to the dialog.  \n  \n```  \nHRESULT AddComboBox(DWORD dwIDCtl);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the combo box to add.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__addcontrolitem\"></a>  CFileDialog::AddControlItem  \n Adds an item to a container control in the dialog.  \n  \n```  \nHRESULT AddControlItem(\n    DWORD dwIDCtl,  \n    DWORD dwIDItem,  \n    const CString& strLabel);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the container control to add the item to.  \n  \n `dwIDItem`  \n The ID of the item.  \n  \n `strLabel`  \n Item's text.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__addeditbox\"></a>  CFileDialog::AddEditBox  \n Adds an edit box to the dialog.  \n  \n```  \nHRESULT AddEditBox(\n    DWORD dwIDCtl,  \n    const CString& strText);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the edit box to add.  \n  \n `strText`  \n The edit box name.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__addmenu\"></a>  CFileDialog::AddMenu  \n Adds a menu to the dialog.  \n  \n```  \nHRESULT AddMenu(\n    DWORD dwIDCtl,  \n    const CString& strLabel);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the menu to add.  \n  \n `strLabel`  \n The menu name.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__addplace\"></a>  CFileDialog::AddPlace  \n Adds a folder to the list of places available for the user to open or save items.  \n  \n```  \nvoid AddPlace(\n    LPCWSTR lpszFolder,  \n    FDAP fdap = FDAP_TOP) throw();\n\n \nvoid AddPlace(\n    IShellItem* psi,  \n    FDAP fdap = FDAP_TOP) throw();\n```  \n  \n### Parameters  \n `lpszFolder`  \n A path to the folder to be made available to the user. This can only be a folder.  \n  \n `fdap`  \n Specifies where the folder is placed within the list.  \n  \n `psi`  \n A pointer to an IShellItem that represents the folder to be made available to the user. This can only be a folder.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__addpushbutton\"></a>  CFileDialog::AddPushButton  \n Adds a button to the dialog.  \n  \n```  \nHRESULT AddPushButton(\n    DWORD dwIDCtl,  \n    const CString& strLabel);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the button to add.  \n  \n `strLabel`  \n The button name.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__addradiobuttonlist\"></a>  CFileDialog::AddRadioButtonList  \n Adds an option button (also known as radio button) group to the dialog.  \n  \n```  \nHRESULT AddRadioButtonList(DWORD dwIDCtl);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the option button group to add.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__addseparator\"></a>  CFileDialog::AddSeparator  \n Adds a separator to the dialog.  \n  \n```  \nHRESULT AddSeparator(DWORD dwIDCtl);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the separator add.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__addtext\"></a>  CFileDialog::AddText  \n Adds text to the dialog.  \n  \n```  \nHRESULT AddText(\n    DWORD dwIDCtl,  \n    const CString& strText);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the text to add.  \n  \n `strText`  \n The text name.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__applyofntoshelldialog\"></a>  CFileDialog::ApplyOFNToShellDialog  \n Updates the current state of the [CFileDialog](../../mfc/reference/cfiledialog-class.md) based on the values stored in the `m_ofn` data structure.  \n  \n```  \nvoid ApplyOFNToShellDialog();\n```  \n  \n### Remarks  \n In versions of Windows before [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], the member [OPENFILENAME](https://msdn.microsoft.com/library/ms911906.aspx) data structure was continuously synchronized with the state of the `CFileDialog`. Any changes to the [m_ofn](#cfiledialog__m_ofn) member variable were immediately reflected in the state of the dialog box. Also, any changes to the state of the dialog box immediately update the `m_ofn` member variable.  \n  \n In [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], the values in the `m_ofn` member variable and state of the `CFileDialog` are not guaranteed to be synchronized. This function forces the state of the `CFileDialog` to be updated to match the `m_ofn` structure. Windows calls this function automatically during [CFileDialog::DoModal](#cfiledialog__domodal).  \n  \n For more information about how to use the `CFileDialog` class under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], see [CFileDialog Class](../../mfc/reference/cfiledialog-class.md).  \n  \n### Example  \n  See the example for [CFileDialog::UpdateOFNFromShellDialog](#cfiledialog__updateofnfromshelldialog).  \n  \n##  <a name=\"cfiledialog__cfiledialog\"></a>  CFileDialog::CFileDialog  \n Call this function to construct a standard Windows file dialog box.  \n  \n```  \nexplicit CFileDialog(\n    BOOL bOpenFileDialog,  \n    LPCTSTR lpszDefExt = NULL,  \n    LPCTSTR lpszFileName = NULL,  \n    DWORD dwFlags = OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT,  \n    LPCTSTR lpszFilter = NULL,  \n    CWnd* pParentWnd = NULL,  \n    DWORD dwSize = 0,  \n    BOOL bVistaStyle = TRUE);\n```  \n  \n### Parameters  \n [in] `bOpenFileDialog`  \n The parameter that specifies what type of dialog box to create. Set it to `TRUE` to construct a **File Open** dialog box. Set it to `FALSE` to construct a **File Save As** dialog box.  \n  \n [in] `lpszDefExt`  \n The default file name extension. If the user does not include a known extension (one that has an association on the user’s computer) in the Filename box, the extension specified by `lpszDefExt` is automatically appended to the file name. If this parameter is `NULL`, no extension is appended.  \n  \n [in] `lpszFileName`  \n The initial file name that appears in the Filename box. If `NULL`, no initial file name appears.  \n  \n [in] `dwFlags`  \n A combination of one or more flags that you can use to customize the dialog box. For a description of these flags, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. If you modify the `m_ofn.Flags` structure member, use a bitwise-OR operator in your changes to keep the default behavior intact.  \n  \n [in] `lpszFilter`  \n A series of string pairs that specify filters you can apply to the file. If you specify file filters, only files that match filter criteria will appear in the Files list. See the Remarks section for more information about how to work with file filters.  \n  \n [in] `pParentWnd`  \n A pointer to the parent or owner window of the file dialog box.  \n  \n [in] `dwSize`  \n The size of the `OPENFILENAME` structure. This value depends on the operating system version. MFC used this parameter to determine the appropriate kind of dialog box to create (for example, new [!INCLUDE[Win2kFamily](../../c-runtime-library/includes/win2kfamily_md.md)] dialog boxes instead of NT4 dialog boxes). The default size of 0 means that the MFC code will determine the correct dialog box size to use based on the operating system version on which the program is run.  \n  \n [in] `bVistaStyle`  \n **Note** This parameter is available in Visual Studio 2008 and later and is will cause the new-style dialog to be used only if you are running in [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] or later.  \n  \n The parameter that specifies the style of the file dialog. Set it to `TRUE` to use the new Vista style file dialogs. Otherwise, the old style of dialog boxes will be used. See the Remarks section for more information about running under Vista.  \n  \n### Remarks  \n Either a **File Open** or **File Save As** dialog box is constructed, depending on the value of `bOpenFileDialog`.  \n  \n Specifying a default extension using `lpszDefExt` may not produce the behavior that you expect, because it is seldom predictable what extensions have file associations on the user’s computer. If you need more control over the appending of a default extension, you can derive your own class from `CFileDialog`, and override the `CFileDialog::OnFileNameOK` method to perform your own extension handling.  \n  \n To enable the user to select multiple files, set the `OFN_ALLOWMULTISELECT` flag before you call [DoModal](#cfiledialog__domodal). You must supply your own file name buffer to store the returned list of multiple file names. Do this by replacing `m_ofn.lpstrFile` with a pointer to a buffer you have allocated, after you construct the [CFileDialog](../../mfc/reference/cfiledialog-class.md), but before you call `DoModal`. Additionally, you must set `m_ofn.nMaxFile` with the number of characters in the buffer pointed to by `m_ofn.lpstrFile`. If you set the maximum number of files to be selected to `n`, the necessary buffer size is `n`*(_MAX_PATH + 1) + 1. For example:  \n  \n [!code-cpp[NVC_MFCFiles#23](../../atl-mfc-shared/reference/codesnippet/cpp/cfiledialog-class_1.cpp)]  \n  \n To enable the user to resize an Explorer-style dialog box by using either the mouse or keyboard, set the `OFN_ENABLESIZING` flag. Setting this flag is necessary only if you provide a hook procedure or custom template. The flag works only with an Explorer-style dialog box; old-style dialog boxes cannot be resized.  \n  \n The `lpszFilter` parameter is used to determine the type of file name a file must have to be displayed in the file list. The first string in the string pair describes the filter; the second string indicates the file name extension to use. Multiple extensions may be specified by using a semicolon (the ';' character) as the delimiter. The string ends with two '&#124;' characters, followed by a `NULL` character. You can also use a [CString](../../atl-mfc-shared/using-cstring.md) object for this parameter.  \n  \n For example, [!INCLUDE[ofprexcel](../../mfc/reference/includes/ofprexcel_md.md)] allows users to open files that have extensions .xlc (chart) or .xls (worksheet), among others. The filter for Excel could be written as:  \n  \n [!code-cpp[NVC_MFCFiles#24](../../atl-mfc-shared/reference/codesnippet/cpp/cfiledialog-class_2.cpp)]  \n  \n However, if you plan to use this string to directly update the `OPENFILENAME` structure, you should delimit your strings with the null character, '\\0', instead of the vertical bars ('&#124;').  \n  \n The `bVistaStyle` parameter is applicable only when running under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]. Under earlier versions of Windows, this parameter is ignored. If `bVistaStyle` is set to `TRUE`, when you compile a program with [!INCLUDE[vs_orcas_long](../../atl/reference/includes/vs_orcas_long_md.md)] or later, the new Vista style **File Dialog** will be used. Otherwise, the previous MFC style **File Dialog** will be used. See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information.  \n  \n Dialog templates are not supported on dialogs based on `bVistaStyle`  \n  \n### Example  \n  See the example for [CFileDialog::DoModal](#cfiledialog__domodal).  \n  \n##  <a name=\"cfiledialog__domodal\"></a>  CFileDialog::DoModal  \n Call this function to display the Windows common file dialog box and allow the user to browse files and directories and enter a filename.  \n  \n```  \nvirtual INT_PTR DoModal();\n```  \n  \n### Return Value  \n **IDOK** or **IDCANCEL**. If **IDCANCEL** is returned, call the Windows [CommDlgExtendedError](http://msdn.microsoft.com/library/windows/desktop/ms646916) function to determine whether an error occurred.  \n  \n **IDOK** and **IDCANCEL** are constants that indicate whether the user selected the OK or Cancel button.  \n  \n### Remarks  \n If you want to initialize the various file dialog-box options by setting members of the **m_ofn** structure, you should do this before calling `DoModal`, but after the dialog object is constructed.  \n  \n For example, if you want to allow the user to select multiple files, set the `OFN_ALLOWMULTISELECT` flag before calling `DoModal`, as shown in the code example in [CFileDialog Class](../../mfc/reference/cfiledialog-class.md).  \n  \n When the user clicks the dialog box's OK or Cancel buttons, or selects the Close option from the dialog box's control menu, control is returned to your application. You can then call other member functions to retrieve the settings or information the user inputs into the dialog box.  \n  \n `DoModal` is a virtual function overridden from class `CDialog`.  \n  \n### Example  \n [!code-cpp[NVC_MFCFiles#25](../../atl-mfc-shared/reference/codesnippet/cpp/cfiledialog-class_3.cpp)]  \n  \n##  <a name=\"cfiledialog__enableopendropdown\"></a>  CFileDialog::EnableOpenDropDown  \n Enables a drop-down list on the Open or Save button in the dialog.  \n  \n```  \nHRESULT EnableOpenDropDown(DWORD dwIDCtl);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the drop-down list.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__endvisualgroup\"></a>  CFileDialog::EndVisualGroup  \n Stops the addition of elements to a visual group in the dialog.  \n  \n```  \nHRESULT EndVisualGroup();\n```  \n  \n### Return Value  \n Returns S_OK if successful; an error value otherwise.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__getcheckbuttonstate\"></a>  CFileDialog::GetCheckButtonState  \n Retrieves the current state of a check button (check box) in the dialog.  \n  \n```  \nHRESULT GetCheckButtonState(\n    DWORD dwIDCtl,  \n    BOOL& bChecked);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the check box.  \n  \n `bChecked`  \n The state of the check box. `TRUE` indicates checked; `FALSE` indicates unchecked.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__getcontrolitemstate\"></a>  CFileDialog::GetControlItemState  \n Retrieves the current state of an item in a container control found in the dialog.  \n  \n```  \nHRESULT GetControlItemState(\n    DWORD dwIDCtl,  \n    DWORD dwIDItem,  \n    CDCONTROLSTATEF& dwState);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the container control.  \n  \n `dwIDItem`  \n The ID of the item.  \n  \n `dwState`  \n A reference to a variable that receives one of more values from the CDCONTROLSTATE enumeration that indicates the current state of the control.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__getcontrolstate\"></a>  CFileDialog::GetControlState  \n Retrieves the current visibility and enabled states of a given control.  \n  \n```  \nHRESULT GetControlState(\n    DWORD dwIDCtl,  \n    CDCONTROLSTATEF& dwState);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the control.  \n  \n `dwState`  \n A reference to a variable that receives one or more values from the CDCONTROLSTATE enumeration that indicates the current state of the control.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__geteditboxtext\"></a>  CFileDialog::GetEditBoxText  \n Retrieves the current text in an edit box control.  \n  \n```  \nHRESULT GetEditBoxText(\n    DWORD dwIDCtl,  \n    CString& strText);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the edit box.  \n  \n `strText`  \n The text value.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__getfileext\"></a>  CFileDialog::GetFileExt  \n Call this function to retrieve the extension of the filename entered into the dialog box.  \n  \n```  \nCString GetFileExt() const;\n\n \n```  \n  \n### Return Value  \n The extension of the filename.  \n  \n### Remarks  \n For example, if the name of the file entered is DATA.TXT, `GetFileExt` returns \"TXT\".  \n  \n If `m_ofn.Flags` has the `OFN_ALLOWMULTISELECT` flag set, this string contains a sequence of null-terminated strings, with the first string being the directory path of the file group selected, followed by the names of all files selected by the user. To retrieve file pathnames, use the [GetStartPosition](#cfiledialog__getstartposition) and [GetNextPathName](#cfiledialog__getnextpathname) member functions.  \n  \n##  <a name=\"cfiledialog__getfilename\"></a>  CFileDialog::GetFileName  \n Call this function to retrieve the name of the filename entered in the dialog box.  \n  \n```  \nCString GetFileName() const;\n\n \n```  \n  \n### Return Value  \n The name of the file.  \n  \n### Remarks  \n The name of the file includes both the prefix and the extension. For example, `GetFileName` will return \"TEXT.DAT\" for the file C:\\FILES\\TEXT.DAT.  \n  \n If `m_ofn.Flags` has the `OFN_ALLOWMULTISELECT` flag set, you should call [GetStartPosition](#cfiledialog__getstartposition) and [GetNextPathName](#cfiledialog__getnextpathname) to retrieve a file pathname.  \n  \n##  <a name=\"cfiledialog__getfiletitle\"></a>  CFileDialog::GetFileTitle  \n Call this function to retrieve the title of the file entered in the dialog box.  \n  \n```  \nCString GetFileTitle() const;\n\n \n```  \n  \n### Return Value  \n The title of the file.  \n  \n### Remarks  \n The title of the file includes only its prefix, without the path or the extension. For example, `GetFileTitle` will return \"TEXT\" for the file C:\\FILES\\TEXT.DAT.  \n  \n If `m_ofn.Flags` has the `OFN_ALLOWMULTISELECT` flag set, this string contains a sequence of null-terminated strings, with the first string being the directory path of the file group selected, followed by the names of all files selected by the user. For this reason, use the [GetStartPosition](#cfiledialog__getstartposition) and [GetNextPathName](#cfiledialog__getnextpathname) member functions to retrieve the next file name in the list.  \n  \n### Example  \n  See the example for [CFileDialog::DoModal](#cfiledialog__domodal).  \n  \n##  <a name=\"cfiledialog__getfolderpath\"></a>  CFileDialog::GetFolderPath  \n Call this member function to retrieve the path of the currently open folder or directory for an Explorer-style Open or Save As common dialog box.  \n  \n```  \nCString GetFolderPath() const;\n\n \n```  \n  \n### Return Value  \n A [CString](../../atl-mfc-shared/reference/cstringt-class.md) object containing the currently open folder or directory.  \n  \n### Remarks  \n The dialog box must have been created with the **OFN_EXPLORER** style; otherwise, the method will fail with an assertion.  \n  \n You can call this method only while the dialog box is being displayed. After the dialog box has been closed, this function will no longer work, and the method will fail with an assertion.  \n  \n##  <a name=\"cfiledialog__getifiledialogcustomize\"></a>  CFileDialog::GetIFileDialogCustomize  \n Retrieves a pointer to the internal COM object for a given [CFileDialog](../../mfc/reference/cfiledialog-class.md).  \n  \n```  \nIFileDialogCustomize* GetIFileDialogCustomize();\n```  \n  \n### Return Value  \n The pointer to the internal COM object for the `CFileDialog`. It is your responsibility to release this pointer appropriately.  \n  \n### Remarks  \n Use this function only under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] with an object that has `bVistaStyle` set to `true`. If you use this function when `bVistaStyle` is `false`, it will return `NULL` in release mode and throw an assertion in debug mode.  \n  \n For more information about the `IFileDialogCustomize` interface,  see [IFileDialogCustomize](http://msdn.microsoft.com/library/windows/desktop/bb775912).  \n  \n### Example  \n This example retrieves the internal COM object. To run this code example, you must compile it under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)].  \n  \n [!code-cpp[NVC_MFC_CFileDialog#4](../../mfc/reference/codesnippet/cpp/cfiledialog-class_4.cpp)]  \n  \n##  <a name=\"cfiledialog__getifileopendialog\"></a>  CFileDialog::GetIFileOpenDialog  \n Retrieves a pointer to the internal COM object for a given `CFileDialog`.  \n  \n```  \nIFileOpenDialog* GetIFileOpenDialog();\n```  \n  \n### Return Value  \n The pointer to the internal COM object for the `CFileDialog`. It is your responsibility to release this pointer appropriately.  \n  \n### Remarks  \n Use this function only under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] with an object that has `bVistaStyle` set to `true`. This function returns `NULL` if the `CFileDialog` is not an **Open** dialog box or if `bVistaStyle` is set to `false`. In this final case, the function only returns `NULL` in release mode - in debug mode it will throw an assertion.  \n  \n For more information about the `IFileOpenDialog` interface, see [IFileOpenDialog](http://msdn.microsoft.com/library/windows/desktop/bb775834).  \n  \n### Example  \n This example retrieves the internal COM object. To run this code, you must compile it under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)].  \n  \n [!code-cpp[NVC_MFC_CFileDialog#2](../../mfc/reference/codesnippet/cpp/cfiledialog-class_5.cpp)]  \n  \n##  <a name=\"cfiledialog__getifilesavedialog\"></a>  CFileDialog::GetIFileSaveDialog  \n Retrieves a pointer to the internal COM object for a given `CFileDialog`.  \n  \n```  \nIFileSaveDialog* GetIFileSaveDialog();\n```  \n  \n### Return Value  \n The pointer to the internal COM object for the `CFileDialog`. It is your responsibility to release this pointer appropriately.  \n  \n### Remarks  \n Use this function only under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] with an object that has `bVistaStyle` set to `true`. This function will return `NULL` if the `CFileDialog` is not a **Save** dialog box or if `bVistaStyle` is set to `false`. In this final case, the function only returns `NULL` in release mode - in debug mode it will throw an assertion.  \n  \n For more information about the `IFileSaveDialog` interface, see [IFileSaveDialog](http://msdn.microsoft.com/library/windows/desktop/bb775688).  \n  \n### Example  \n This example retrieves the internal COM object. To run this code example, you must compile it under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)].  \n  \n [!code-cpp[NVC_MFC_CFileDialog#3](../../mfc/reference/codesnippet/cpp/cfiledialog-class_6.cpp)]  \n  \n##  <a name=\"cfiledialog__getnextpathname\"></a>  CFileDialog::GetNextPathName  \n Call this function to retrieve the next filename from the group selected in the dialog box.  \n  \n```  \nCString GetNextPathName(POSITION& pos) const;\n\n \n```  \n  \n### Parameters  \n `pos`  \n A reference to a **POSITION** value returned by a previous `GetNextPathName` or `GetStartPosition` function call. **NULL** if the end of the list has been reached.  \n  \n### Return Value  \n The full path of the file.  \n  \n### Remarks  \n The path of the filename includes the file's title plus the entire directory path. For example, `GetNextPathName` will return \"C:\\FILES\\TEXT.DAT\" for the file C:\\FILES\\TEXT.DAT. You can use `GetNextPathName` in a forward iteration loop if you establish the initial position with a call to `GetStartPosition`.  \n  \n If the selection consists of only one file, that file name will be returned.  \n  \n##  <a name=\"cfiledialog__getofn\"></a>  CFileDialog::GetOFN  \n Retrieves the associated **OPENFILENAME** structure.  \n  \n```  \nconst OPENFILENAME& GetOFN() const;\n\n \n \nOPENFILENAME& GetOFN();\n```  \n  \n### Return Value  \n An [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure.  \n  \n### Remarks  \n Use the second version of this function to initialize the appearance of a **File Open** or **File Save As** dialog box after it is constructed but before it is displayed with the `DoModal` member function. For example, you can set the **lpstrTitle** member of **m_ofn** to the caption you want the dialog box to have.  \n  \n##  <a name=\"cfiledialog__getpathname\"></a>  CFileDialog::GetPathName  \n Call this function to retrieve the full path of the file entered in the dialog box.  \n  \n```  \nCString GetPathName() const;\n\n \n```  \n  \n### Return Value  \n The full path of the file.  \n  \n### Remarks  \n The path of the filename includes the file's title plus the entire directory path. For example, `GetPathName` will return \"C:\\FILES\\TEXT.DAT\" for the file C:\\FILES\\TEXT.DAT.  \n  \n If `m_ofn.Flags` has the `OFN_ALLOWMULTISELECT` flag set, this string contains a sequence of null-teminated strings, with the first string being the directory path of the file group selected, followed by the names of all files selected by the user. For this reason, use the [GetStartPosition](#cfiledialog__getstartposition) and [GetNextPathName](#cfiledialog__getnextpathname) member functions to retrieve the next file name in the list.  \n  \n### Example  \n  See the example for [CFileDialog::DoModal](#cfiledialog__domodal).  \n  \n##  <a name=\"cfiledialog__getreadonlypref\"></a>  CFileDialog::GetReadOnlyPref  \n Call this function to determine whether the Read Only check box has been selected in the Windows standard File Open and File Save As dialog boxes.  \n  \n```  \nBOOL GetReadOnlyPref() const;\n\n \n```  \n  \n### Return Value  \n Non-zero if the Read Only check box in the dialog box is selected; otherwise 0.  \n  \n### Remarks  \n You can hide the Read Only check box by setting the `OFN_HIDEREADONLY` style in the [CFileDialog](../../mfc/reference/cfiledialog-class.md) constructor.  \n  \n> [!NOTE]\n> [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style `CFileDialog` objects do not support this function. Attempting to use this function on a [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style `CFileDialog` will throw [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md). See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information.  \n  \n##  <a name=\"cfiledialog__getresult\"></a>  CFileDialog::GetResult  \n Retrieves the choice that the user made in the dialog.  \n  \n```  \nIShellItem* GetResult() throw();\n```  \n  \n### Return Value  \n A pointer to an IShellItem that represents the user's choice.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__getresults\"></a>  CFileDialog::GetResults  \n Retrieves the user's choices in a dialog that allows multiple selection.  \n  \n```  \nIShellItemArray* GetResults() throw();\n```  \n  \n### Return Value  \n A pointer to an IShellItemArray through which the items selected in the dialog can be accessed.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__getselectedcontrolitem\"></a>  CFileDialog::GetSelectedControlItem  \n Retrieves a particular item from the specified container control in the dialog.  \n  \n```  \nHRESULT GetSelectedControlItem(\n    DWORD dwIDCtl,  \n    DWORD& dwIDItem);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the container control.  \n  \n `dwIDItem`  \n The ID of the item that the user selected in the control.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__getstartposition\"></a>  CFileDialog::GetStartPosition  \n Call this member function to retrieve the position of the first file pathname in the list, if `m_ofn.Flags` has the `OFN_ALLOWMULTISELECT` flag set.  \n  \n```  \nPOSITION GetStartPosition() const;\n\n \n```  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration; **NULL** if the list is empty.  \n  \n##  <a name=\"cfiledialog__hidecontrol\"></a>  CFileDialog::HideControl  \n Call this member function to hide the specified control in an Explorer-style Open or Save As common dialog box.  \n  \n```  \nvoid HideControl(int nID);\n```  \n  \n### Parameters  \n `nID`  \n The ID of the control to hide.  \n  \n### Remarks  \n The dialog box must have been created with the **OFN_EXPLORER** style; otherwise, the function will fail with an assertion.  \n  \n##  <a name=\"cfiledialog__ispickfoldersmode\"></a>  CFileDialog::IsPickFoldersMode  \n Determines if the current dialog is in folder picker mode.  \n  \n```  \nBOOL IsPickFoldersMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the dialog is in folder picker mode; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__m_ofn\"></a>  CFileDialog::m_ofn  \n `m_ofn` is a structure of type `OPENFILENAME`. The data in this structure represents the current state of the `CFileDialog`.  \n  \n### Remarks  \n Use this structure to initialize the appearance of a **File Open** or **File Save As** dialog box after you construct it but before you display it with the [DoModal](#cfiledialog__domodal) method. For example, you can set the `lpstrTitle` member of `m_ofn` to the caption you want the dialog box to have.  \n  \n With the [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style of [CFileDialog](../../mfc/reference/cfiledialog-class.md), `m_ofn` is not guaranteed to always match the state of the dialog box. It is synchronized with the dialog box in earlier versions of Windows. See [CFileDialog::ApplyOFNToShellDialog](#cfiledialog__applyofntoshelldialog) and [CFileDialog::UpdateOFNFromShellDialog](#cfiledialog__updateofnfromshelldialog) for more information about synchronizing the `m_ofn` structure and the `CFileDialog` state under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)].  \n  \n [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style file dialogs do not support certain members and flags of the `CFileDialog`. As a result, these will have no effect.  \n  \n The following is a list of the members that are not supported by [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]:  \n  \n- `lpstrCustomFilter`  \n  \n- `lpstrInitialDir`  \n  \n- `lCustData`  \n  \n- `lpfnHook`  \n  \n- `lpTemplateName`  \n  \n The following flags are not supported and therefore have no effect when you use the [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style of `CFileDialog`:  \n  \n-   OFN_ENABLEHOOK  \n  \n-   OFN_ENABLEINCLUDENOTIFY  \n  \n-   OFN_ENABLETEMPLATE  \n  \n-   OFN_ENABLETEMPLATEHANDLE  \n  \n-   OFN_EXPLORER  \n  \n-   OFN_EXTENSIONDIFFERENT  \n  \n-   OFN_HIDEREADONLY  \n  \n-   OFN_LONGNAMES - effectively always on in [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]  \n  \n-   OFN_NOLONGNAMES - effectively always off in [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]  \n  \n-   OFN_NONETWORKBUTTON - effectively always on in [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]  \n  \n-   OFN_READONLY  \n  \n-   OFN_SHOWHELP  \n  \n For more information about this structure, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. For more information about the different behavior of the `CFileDialog` under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], see [CFileDialog Class](../../mfc/reference/cfiledialog-class.md).  \n  \n##  <a name=\"cfiledialog__makeprominent\"></a>  CFileDialog::MakeProminent  \n Places a control in the dialog so that it stands out compared to other controls.  \n  \n```  \nHRESULT MakeProminent(DWORD dwIDCtl);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the control.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__onbuttonclicked\"></a>  CFileDialog::OnButtonClicked  \n Called when the button is clicked.  \n  \n```  \nvirtual void OnButtonClicked(DWORD dwIDCtl);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the button.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__oncheckbuttontoggled\"></a>  CFileDialog::OnCheckButtonToggled  \n Called when the check box is checked or unchecked.  \n  \n```  \nvirtual void OnCheckButtonToggled(\n    DWORD dwIDCtl,  \n    BOOL bChecked);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the check box.  \n  \n `bChecked`  \n Checked or unchecked.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__oncontrolactivating\"></a>  CFileDialog::OnControlActivating  \n Called when the control is activated.  \n  \n```  \nvirtual void OnControlActivating(DWORD dwIDCtl);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the control.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__onfilenamechange\"></a>  CFileDialog::OnFileNameChange  \n Override this method if you want to handle the `WM_NOTIFY``CDN_SELCHANGE` message.  \n  \n```  \nvirtual void OnFileNameChange();\n```  \n  \n### Remarks  \n The system sends the `CDN_SELCHANGE` message when the user selects a new file or folder in the file list of the **Open** or **Save As** dialog box. Override this method if you want to perform any actions in response to this message.  \n  \n The system sends this message only if the dialog box was created with the OFN_EXPLORER flag turned on. For more information about the notification, see [CDN_SELCHANGE](http://msdn.microsoft.com/library/windows/desktop/ms646865). For information about the OFN_EXPLORER flag, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure and [Open and Save As Dialog Boxes](http://msdn.microsoft.com/library/windows/desktop/ms646960).  \n  \n##  <a name=\"cfiledialog__onfilenameok\"></a>  CFileDialog::OnFileNameOK  \n Override this function only if you want to provide custom validation of filenames that are entered into a common file dialog box.  \n  \n```  \nvirtual BOOL OnFileNameOK();\n```  \n  \n### Return Value  \n 1 if the filename is not a valid filename; otherwise 0.  \n  \n### Remarks  \n This function allows you to reject a filename for any application-specific reason. Normally, you do not need to use this function because the framework provides default validation of filenames and displays a message box if an invalid filename is entered.  \n  \n If 1 is returned, the dialog box will remain displayed for the user to enter another filename. The dialog procedure dismisses the dialog if the return is 0. Other nonzero return values are currently reserved and should not be used.  \n  \n##  <a name=\"cfiledialog__onfolderchange\"></a>  CFileDialog::OnFolderChange  \n Override this function to handle the **WM_NOTIFYCDN_FOLDERCHANGE** message.  \n  \n```  \nvirtual void OnFolderChange();\n```  \n  \n### Remarks  \n The notification message is sent when a new folder is opened in the Open or Save As dialog box.  \n  \n Notification is sent only if the dialog box was created with the OFN_EXPLORER style. For more information about the notification, see [CDN_FOLDERCHANGE](http://msdn.microsoft.com/library/windows/desktop/ms646859). For information about the OFN_EXPLORER style, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure and [Open and Save As Dialog Boxes](http://msdn.microsoft.com/library/windows/desktop/ms646960).  \n  \n##  <a name=\"cfiledialog__oninitdone\"></a>  CFileDialog::OnInitDone  \n Override this function to handle the `WM_NOTIFY``CDN_INITDONE` message.  \n  \n```  \nvirtual void OnInitDone();\n```  \n  \n### Remarks  \n The system sends this notification message when the system has finished arranging controls in the **Open** or **Save As** dialog box to make room for the controls of the child dialog box.  \n  \n The system sends this only if the dialog box was created with the OFN_EXPLORER style. For more information about the notification, see [CDN_INITDONE](http://msdn.microsoft.com/library/windows/desktop/ms646863). For information about the OFN_EXPLORER style, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure and [Open and Save As Dialog Boxes](http://msdn.microsoft.com/library/windows/desktop/ms646960).  \n  \n> [!NOTE]\n> [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style file dialogs do not support this function. Attempting to use this function on a [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style file dialog will throw [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md). See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information.  \n  \n##  <a name=\"cfiledialog__onitemselected\"></a>  CFileDialog::OnItemSelected  \n Called when the container item is selected.  \n  \n```  \nvirtual void OnItemSelected(\n    DWORD dwIDCtl,  \n    DWORD dwIDItem);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the container control.  \n  \n `dwIDItem`  \n The ID of the item.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__onlbselchangednotify\"></a>  CFileDialog::OnLBSelChangedNotify  \n This function is called whenever the current selection in a list box is about to change.  \n  \n```  \nvirtual void OnLBSelChangedNotify(\n    UINT nIDBox,  \n    UINT iCurSel,  \n    UINT nCode);\n```  \n  \n### Parameters  \n *nIDBox*  \n The ID of the list box or combo box in which the selection occurred.  \n  \n `iCurSel`  \n The index of the current selection.  \n  \n `nCode`  \n The control notification code. This parameter must have one of the following values:  \n  \n- **CD_LBSELCHANGE** Specifies `iCurSel` is the selected item in a single-selection list box.  \n  \n- **CD_LBSELSUB** Specifies that `iCurSel` is no longer selected in a multiselection list box.  \n  \n- **CD_LBSELADD** Specifies that `iCurSel` is selected in a multiselection list box.  \n  \n- **CD_LBSELNOITEMS** Specifies that no selection exists in a multiselection list box.  \n  \n### Remarks  \n Override this function to provide custom handling of selection changes in the list box. For example, you can use this function to display the access rights or date-last-modified of each file the user selects.  \n  \n##  <a name=\"cfiledialog__onshareviolation\"></a>  CFileDialog::OnShareViolation  \n Override this function to provide custom handling of share violations.  \n  \n```  \nvirtual UINT OnShareViolation(LPCTSTR lpszPathName);\n```  \n  \n### Parameters  \n `lpszPathName`  \n The path of the file on which the share violation occurred.  \n  \n### Return Value  \n One of the following values:  \n  \n- **OFN_SHAREFALLTHROUGH** The filename is returned from the dialog box.  \n  \n- **OFN_SHARENOWARN** No further action needs to be taken.  \n  \n- **OFN_SHAREWARN** The user receives the standard warning message for this error.  \n  \n### Remarks  \n Normally, you do not need to use this function because the framework provides default checking of share violations and displays a message box if a share violation occurs.  \n  \n If you want to disable share violation checking, use the bitwise OR operator to combine the flag **OFN_SHAREAWARE** with `m_ofn.Flags`.  \n  \n##  <a name=\"cfiledialog__ontypechange\"></a>  CFileDialog::OnTypeChange  \n Override this function to handle the **WM_NOTIFYCDN_TYPECHANGE** message.  \n  \n```  \nvirtual void OnTypeChange();\n```  \n  \n### Remarks  \n The notification message is sent when the user selects a new file type from the list of file types in the Open or Save As dialog box.  \n  \n Notification is sent only if the dialog box was created with the OFN_EXPLORER style. For more information about the notification, see [CDN_TYPECHANGE](http://msdn.microsoft.com/library/windows/desktop/ms646868). For information about the OFN_EXPLORER style, see the [OPENFILENAME](http://msdn.microsoft.com/library/windows/desktop/ms646839) structure and [Open and Save As Dialog Boxes](http://msdn.microsoft.com/library/windows/desktop/ms646960).  \n  \n##  <a name=\"cfiledialog__removecontrolitem\"></a>  CFileDialog::RemoveControlItem  \n Removes an item from a container control in the dialog.  \n  \n```  \nHRESULT RemoveControlItem(\n    DWORD dwIDCtl,  \n    DWORD dwIDItem);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the container control to remove the item from.  \n  \n `dwIDItem`  \n The ID of the item.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__setcheckbuttonstate\"></a>  CFileDialog::SetCheckButtonState  \n Sets the current state of a check button (check box) in the dialog.  \n  \n```  \nHRESULT SetCheckButtonState(\n    DWORD dwIDCtl,  \n    BOOL bChecked);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the check box.  \n  \n `bChecked`  \n The state of the check box. `TRUE` indicates checked; `FALSE` indicates Unchecked.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__setcontrolitemstate\"></a>  CFileDialog::SetControlItemState  \n Sets the current state of an item in a container control found in the dialog.  \n  \n```  \nHRESULT SetControlItemState(\n    DWORD dwIDCtl,  \n    DWORD dwIDItem,  \n    CDCONTROLSTATEF dwState);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the container control.  \n  \n `dwIDItem`  \n The ID of the item.  \n  \n `dwState`  \n One or more values from the CDCONTROLSTATE enumeration that indicate the new state of the control.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__setcontrolitemtext\"></a>  CFileDialog::SetControlItemText  \n Sets the text of a control item. For example, the text that accompanies a radio button or an item in a menu.  \n  \n```  \nHRESULT SetControlItemText(\n    DWORD dwIDCtl,  \n    DWORD dwIDItem,  \n    const CString& strLabel);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the container control.  \n  \n `dwIDItem`  \n The ID of the item.  \n  \n `strLabel`  \n Item's text.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__setcontrollabel\"></a>  CFileDialog::SetControlLabel  \n Sets the text associated with a control, such as button text or an edit box label.  \n  \n```  \nHRESULT SetControlLabel(\n    DWORD dwIDCtl,  \n    const CString& strLabel);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the control.  \n  \n `strLabel`  \n The control name.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__setcontrolstate\"></a>  CFileDialog::SetControlState  \n Sets the current visibility and enabled states of a given control.  \n  \n```  \nHRESULT SetControlState(\n    DWORD dwIDCtl,  \n    CDCONTROLSTATEF dwState);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the control.  \n  \n `dwState`  \n One or more values from the CDCONTROLSTATE enumeration that indicate the current state of the control.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__setcontroltext\"></a>  CFileDialog::SetControlText  \n Call this method to set the text for the specified control in an Explorer-style **Open** or **Save As** dialog box.  \n  \n```  \nvoid SetControlText(\n    int nID,  \n    LPCSTR lpsz);\n\n \nvoid SetControlText(\n    int nID,  \n    const wchar_t *lpsz);\n```  \n  \n### Parameters  \n [in] `nID`  \n The ID of the control for which to set the text.  \n  \n [in] `lpsz`  \n A pointer to the string that contains the text to set for the control.  \n  \n### Remarks  \n Both versions of this function are valid for applications that use Unicode. However, only the version with the LPCSTR type is valid for applications that use [!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)].  \n  \n To use this method, you must create the dialog box with the OFN_EXPLORER style. Otherwise, the function will fail with an assertion.  \n  \n##  <a name=\"cfiledialog__setdefext\"></a>  CFileDialog::SetDefExt  \n Call this function to set the default file name extension for an Explorer-style Open or Save As common dialog box.  \n  \n```  \nvoid SetDefExt(LPCSTR lpsz);\n```  \n  \n### Parameters  \n `lpsz`  \n A pointer to a string containing the default extension to use for the dialog box object. This string must not contain a period (.).  \n  \n### Remarks  \n The dialog box must have been created with the **OFN_EXPLORER** style; otherwise, the function will fail with an assertion.  \n  \n##  <a name=\"cfiledialog__seteditboxtext\"></a>  CFileDialog::SetEditBoxText  \n Sets the current text in an edit box control.  \n  \n```  \nHRESULT SetEditBoxText(\n    DWORD dwIDCtl,  \n    const CString& strText);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the edit box.  \n  \n `strText`  \n The text value.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__setproperties\"></a>  CFileDialog::SetProperties  \n Provides a property store that defines the default values to be used for the item being saved.  \n  \n```  \nBOOL SetProperties(LPCWSTR lpszPropList);\n```  \n  \n### Parameters  \n `lpszPropList`  \n A list of predefined properties separated by \";\". For a list of the flags, see the `Flags` section of [OPENFILENAME](http://msdn.microsoft.com/en-us/8cecfd45-f7c1-4f8d-81a0-4e7fecc3b104).  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__setselectedcontrolitem\"></a>  CFileDialog::SetSelectedControlItem  \n Sets the selected state of a particular item in an option button group or a combo box found in the dialog.  \n  \n```  \nHRESULT SetSelectedControlItem(\n    DWORD dwIDCtl,  \n    DWORD dwIDItem);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the container control.  \n  \n `dwIDItem`  \n The ID of the item that the user selected in the control.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__settemplate\"></a>  CFileDialog::SetTemplate  \n Sets the dialog box template for the [CFileDialog](../../mfc/reference/cfiledialog-class.md) object.  \n  \n```  \nvoid SetTemplate(\n    UINT nWin3ID,  \n    UINT nWin4ID);\n\n \nvoid SetTemplate(\n    LPCTSTR lpWin3ID,  \n    LPCTSTR lpWin4ID);\n```  \n  \n### Parameters  \n [in] `nWin3ID`  \n Contains the ID number of the template resource for the non-Explorer `CFileDialog` object. This template is only used on Windows NT 3.51 or when the OFN_EXPLORER style is not present.  \n  \n [in] `nWin4ID`  \n Contains the ID number of the template resource for the Explorer `CFileDialog` object. This template is used only on [!INCLUDE[WinNt4Family](../../mfc/reference/includes/winnt4family_md.md)] and later versions, Windows 95 and later versions, or when the OFN_EXPLORER style is present.  \n  \n [in] `lpWin3ID`  \n Contains the name of the template resource for the non-Explorer `CFileDialog` object. This template is only used on Windows NT 3.51 or when the OFN_EXPLORER style is not present.  \n  \n [in] `lpWin4ID`  \n Contains the name of the template resource of the Explorer `CFileDialog` object. This template is used only on [!INCLUDE[WinNt4Family](../../mfc/reference/includes/winnt4family_md.md)] and later versions, Windows 95 and later versions, or when the OFN_EXPLORER style is present.  \n  \n### Remarks  \n The system will use only one of the specified templates. The system determines which template to use based on the presence of the OFN_EXPLORER style and the operating system that the application is running on. By specifying both a non-Explorer and Explorer-style template, it is easy to support Windows NT 3.51, [!INCLUDE[WinNt4Family](../../mfc/reference/includes/winnt4family_md.md)] and later versions, and Windows 95 and later versions.  \n  \n> [!NOTE]\n> [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style file dialog boxes do not support this function. Attempting to use this function on a [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)] style file dialog box will throw [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md). See [CFileDialog Class](../../mfc/reference/cfiledialog-class.md) for more information. An alternative is to use a customized dialog. For more information about using a custom `CFileDialog`, see [IFileDialogCustomize](http://msdn.microsoft.com/library/windows/desktop/bb775912).  \n  \n##  <a name=\"cfiledialog__startvisualgroup\"></a>  CFileDialog::StartVisualGroup  \n Declares a visual group in the dialog. Subsequent calls to any \"add\" method add those elements to this group.  \n  \n```  \nHRESULT StartVisualGroup(\n    DWORD dwIDCtl,  \n    const CString& strLabel);\n```  \n  \n### Parameters  \n `dwIDCtl`  \n The ID of the visual group.  \n  \n `strLabel`  \n The group name.  \n  \n### Remarks  \n  \n##  <a name=\"cfiledialog__updateofnfromshelldialog\"></a>  CFileDialog::UpdateOFNFromShellDialog  \n Updates the `m_ofn` data structure of the [CFileDialog](../../mfc/reference/cfiledialog-class.md) based on the current state of the internal object.  \n  \n```  \nvoid UpdateOFNFromShellDialog();\n```  \n  \n### Remarks  \n In versions of Windows before [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], the member [OPENFILENAME](https://msdn.microsoft.com/library/ms911906.aspx) data structure was continuously synchronized with the state of the `CFileDialog`. Any changes to the [m_ofn](#cfiledialog__m_ofn) member variable directly affected the state of the dialog box. Also, any changes to the state of the dialog immediately updated the m_ofn member variable.  \n  \n In [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], the `m_ofn` data structure is not automatically updated. To guarantee the accuracy of the data in the `m_ofn` member variable, you should call the `UpdateOFNFromShellDialog` function before accessing the data. Windows calls this function automatically during the processing of [IFileDialog::OnFileOK](http://msdn.microsoft.com/library/windows/desktop/bb775879).  \n  \n For more information about how to use the `CFileDialog` class under [!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)], see [CFileDialog Class](../../mfc/reference/cfiledialog-class.md).  \n  \n### Example  \n This example updates the `CFileDialog` before displaying it. Before updating the `m_ofn` member variable, we need to synchronize it to the current state of the dialog box.  \n  \n [!code-cpp[NVC_MFC_CFileDialog#1](../../mfc/reference/codesnippet/cpp/cfiledialog-class_7.cpp)]  \n  \n## See Also  \n [CCommonDialog Class](../../mfc/reference/ccommondialog-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n"}