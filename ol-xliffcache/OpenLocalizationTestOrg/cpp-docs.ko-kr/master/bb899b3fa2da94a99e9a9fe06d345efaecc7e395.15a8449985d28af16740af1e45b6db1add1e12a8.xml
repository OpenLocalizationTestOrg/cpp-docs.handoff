{"nodes":[{"pos":[12,47],"content":"Linking Implicitly | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Linking Implicitly | Microsoft Docs","pos":[0,35]}]},{"content":"Linking Implicitly","pos":[648,666]},{"content":"To implicitly link to a DLL, executables must obtain the following from the provider of the DLL:","pos":[667,763]},{"content":"A header file (.h file) containing the declarations of the exported functions and/or C++ classes.","pos":[773,870]},{"content":"The classes, functions, and data should all have <ph id=\"ph1\">`__declspec(dllimport)`</ph>, for more information, see <bpt id=\"p1\">[</bpt>dllexport, dllimport<ept id=\"p1\">](../cpp/dllexport-dllimport.md)</ept>.","pos":[872,1026],"source":"  The classes, functions, and data should all have `__declspec(dllimport)`, for more information, see [dllexport, dllimport](../cpp/dllexport-dllimport.md)."},{"content":"An import library (<bpt id=\"p1\">[</bpt>.LIB files<ept id=\"p1\">](../build/reference/dot-lib-files-as-linker-input.md)</ept>) to link with.","pos":[1036,1135],"source":"An import library ([.LIB files](../build/reference/dot-lib-files-as-linker-input.md)) to link with."},{"content":"(The linker creates the import library when the DLL is built.)","pos":[1136,1198]},{"content":"The actual DLL (.dll file).","pos":[1208,1235]},{"content":"Executables using the DLL must include the header file containing the exported functions (or C++ classes) in each source file that contains calls to the exported functions.","pos":[1242,1414]},{"content":"From a coding perspective, the function calls to the exported functions are just like any other function call.","pos":[1415,1525]},{"content":"To build the calling executable file, you must link with the import library.","pos":[1532,1608]},{"content":"If you are using an external makefile, specify the file name of the import library where you list other object (.obj) files or libraries that you are linking with.","pos":[1609,1772]},{"content":"The operating system must be able to locate the DLL file when it loads the calling executable.","pos":[1779,1873]},{"content":"What do you want to do?","pos":[1882,1905]},{"content":"Link explicitly","pos":[1916,1931]},{"content":"Determine which linking method to use","pos":[1975,2012]},{"content":"What do you want to know more about?","pos":[2075,2111]},{"content":"Working with Import Libraries and Export Files","pos":[2122,2168]},{"content":"The search path used by Windows to locate a DLL","pos":[2250,2297]},{"content":"See Also","pos":[2364,2372]},{"content":"Linking an Executable to a DLL","pos":[2377,2407]}],"content":"---\ntitle: \"Linking Implicitly | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"static load linking [C++]\"\n  - \"implicit linking [C++]\"\n  - \"load-time dynamic linking [C++]\"\nms.assetid: 3ea4c316-4e70-4111-9944-c1b4ad00c605\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Linking Implicitly\nTo implicitly link to a DLL, executables must obtain the following from the provider of the DLL:  \n  \n-   A header file (.h file) containing the declarations of the exported functions and/or C++ classes.  The classes, functions, and data should all have `__declspec(dllimport)`, for more information, see [dllexport, dllimport](../cpp/dllexport-dllimport.md).  \n  \n-   An import library ([.LIB files](../build/reference/dot-lib-files-as-linker-input.md)) to link with. (The linker creates the import library when the DLL is built.)  \n  \n-   The actual DLL (.dll file).  \n  \n Executables using the DLL must include the header file containing the exported functions (or C++ classes) in each source file that contains calls to the exported functions. From a coding perspective, the function calls to the exported functions are just like any other function call.  \n  \n To build the calling executable file, you must link with the import library. If you are using an external makefile, specify the file name of the import library where you list other object (.obj) files or libraries that you are linking with.  \n  \n The operating system must be able to locate the DLL file when it loads the calling executable.  \n  \n## What do you want to do?  \n  \n-   [Link explicitly](../build/linking-explicitly.md)  \n  \n-   [Determine which linking method to use](../build/determining-which-linking-method-to-use.md)  \n  \n## What do you want to know more about?  \n  \n-   [Working with Import Libraries and Export Files](../build/reference/working-with-import-libraries-and-export-files.md)  \n  \n-   [The search path used by Windows to locate a DLL](../build/search-path-used-by-windows-to-locate-a-dll.md)  \n  \n## See Also  \n [Linking an Executable to a DLL](../build/linking-an-executable-to-a-dll.md)"}