{"nodes":[{"pos":[12,49],"content":"Inline Assembler (C) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Inline Assembler (C) | Microsoft Docs","pos":[0,37]}]},{"content":"Inline Assembler (C)","pos":[610,630]},{"content":"Microsoft Specific","pos":[633,651]},{"content":"The inline assembler lets you embed assembly-language instructions directly in your C source programs without extra assembly and link steps.","pos":[660,800]},{"content":"The inline assembler is built into the compiler — you don't need a separate assembler such as the Microsoft Macro Assembler (MASM).","pos":[801,932]},{"content":"Because the inline assembler doesn't require separate assembly and link steps, it is more convenient than a separate assembler.","pos":[939,1066]},{"content":"Inline assembly code can use any C variable or function name that is in scope, so it is easy to integrate it with your program's C code.","pos":[1067,1203]},{"content":"And because the assembly code can be mixed with C statements, it can do tasks that are cumbersome or impossible in C alone.","pos":[1204,1327]},{"content":"The <ph id=\"ph1\">`__asm`</ph> keyword invokes the inline assembler and can appear wherever a C statement is legal.","pos":[1334,1430],"source":"The `__asm` keyword invokes the inline assembler and can appear wherever a C statement is legal."},{"content":"It cannot appear by itself.","pos":[1431,1458]},{"content":"It must be followed by an assembly instruction, a group of instructions enclosed in braces, or, at the very least, an empty pair of braces.","pos":[1459,1598]},{"content":"The term \"<ph id=\"ph1\">`__asm`</ph> block\" here refers to any instruction or group of instructions, whether or not in braces.","pos":[1599,1706],"source":" The term \"`__asm` block\" here refers to any instruction or group of instructions, whether or not in braces."},{"content":"The code below is a simple <ph id=\"ph1\">`__asm`</ph> block enclosed in braces.","pos":[1713,1773],"source":"The code below is a simple `__asm` block enclosed in braces."},{"content":"(The code is a custom function prolog sequence.)","pos":[1774,1822]},{"pos":[1921,1994],"content":"Alternatively, you can put <ph id=\"ph1\">`__asm`</ph> in front of each assembly instruction:","source":"Alternatively, you can put `__asm` in front of each assembly instruction:"},{"pos":[2086,2194],"content":"Since the <ph id=\"ph1\">`__asm`</ph> keyword is a statement separator, you can also put assembly instructions on the same line:","source":"Since the `__asm` keyword is a statement separator, you can also put assembly instructions on the same line:"},{"content":"END Microsoft Specific","pos":[2289,2311]},{"content":"See Also","pos":[2322,2330]},{"content":"Function Attributes","pos":[2335,2354]}],"content":"---\ntitle: \"Inline Assembler (C) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"__asm keyword [C]\"\n  - \"inline assembler [C]\"\nms.assetid: 821acc77-60b1-434c-ba54-2ba930a25ab4\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Inline Assembler (C)\n**Microsoft Specific**  \n  \n The inline assembler lets you embed assembly-language instructions directly in your C source programs without extra assembly and link steps. The inline assembler is built into the compiler — you don't need a separate assembler such as the Microsoft Macro Assembler (MASM).  \n  \n Because the inline assembler doesn't require separate assembly and link steps, it is more convenient than a separate assembler. Inline assembly code can use any C variable or function name that is in scope, so it is easy to integrate it with your program's C code. And because the assembly code can be mixed with C statements, it can do tasks that are cumbersome or impossible in C alone.  \n  \n The `__asm` keyword invokes the inline assembler and can appear wherever a C statement is legal. It cannot appear by itself. It must be followed by an assembly instruction, a group of instructions enclosed in braces, or, at the very least, an empty pair of braces. The term \"`__asm` block\" here refers to any instruction or group of instructions, whether or not in braces.  \n  \n The code below is a simple `__asm` block enclosed in braces. (The code is a custom function prolog sequence.)  \n  \n```  \n__asm  \n{  \n   push ebp  \n   mov  ebp, esp  \n   sub  esp, __LOCAL_SIZE  \n}  \n```  \n  \n Alternatively, you can put `__asm` in front of each assembly instruction:  \n  \n```  \n__asm push ebp  \n__asm mov  ebp, esp  \n__asm sub  esp, __LOCAL_SIZE  \n```  \n  \n Since the `__asm` keyword is a statement separator, you can also put assembly instructions on the same line:  \n  \n```  \n__asm push ebp   __asm mov  ebp, esp   __asm sub  esp, __LOCAL_SIZE   \n```  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Function Attributes](../c-language/function-attributes.md)"}