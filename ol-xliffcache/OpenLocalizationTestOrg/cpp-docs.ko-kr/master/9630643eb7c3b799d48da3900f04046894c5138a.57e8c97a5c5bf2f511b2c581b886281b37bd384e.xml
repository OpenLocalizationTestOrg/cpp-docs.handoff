{"nodes":[{"pos":[12,48],"content":"ScheduleGroup Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ScheduleGroup Class | Microsoft Docs","pos":[0,36]}]},{"pos":[631,650],"content":"ScheduleGroup Class","linkify":"ScheduleGroup Class","nodes":[{"content":"ScheduleGroup Class","pos":[0,19]}]},{"content":"Represents an abstraction for a schedule group.","pos":[651,698]},{"content":"Schedule groups organize a set of related work that benefits from being scheduled close together either temporally, by executing another task in the same group before moving to another group, or spatially, by executing multiple items within the same group on the same NUMA node or physical socket.","pos":[699,996]},{"pos":[1005,1011],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1054,1061],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1071,1093],"content":"Protected Constructors","linkify":"Protected Constructors","nodes":[{"content":"Protected Constructors","pos":[0,22]}]},{"content":"Name","pos":[1100,1104]},{"content":"Description","pos":[1105,1116]},{"pos":[1154,1203],"content":"<bpt id=\"p1\">[</bpt>ScheduleGroup::~ScheduleGroup Destructor<ept id=\"p1\">](#dtor)</ept>","source":"[ScheduleGroup::~ScheduleGroup Destructor](#dtor)"},{"pos":[1215,1229],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1236,1240]},{"content":"Description","pos":[1241,1252]},{"pos":[1290,1321],"content":"<bpt id=\"p1\">[</bpt>ScheduleGroup::Id Method<ept id=\"p1\">](#id)</ept>","source":"[ScheduleGroup::Id Method](#id)"},{"content":"Returns an identifier for the schedule group that is unique within the scheduler to which the group belongs.","pos":[1322,1430]},{"pos":[1435,1480],"content":"<bpt id=\"p1\">[</bpt>ScheduleGroup::Reference Method<ept id=\"p1\">](#reference)</ept>","source":"[ScheduleGroup::Reference Method](#reference)"},{"content":"Increments the schedule group reference count.","pos":[1481,1527]},{"pos":[1532,1573],"content":"<bpt id=\"p1\">[</bpt>ScheduleGroup::Release Method<ept id=\"p1\">](#release)</ept>","source":"[ScheduleGroup::Release Method](#release)"},{"content":"Decrements the scheduler group reference count.","pos":[1574,1621]},{"pos":[1626,1677],"content":"<bpt id=\"p1\">[</bpt>ScheduleGroup::ScheduleTask Method<ept id=\"p1\">](#scheduletask)</ept>","source":"[ScheduleGroup::ScheduleTask Method](#scheduletask)"},{"content":"Schedules a light-weight task within the schedule group.","pos":[1678,1734]},{"pos":[1744,1765],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[1793,1805],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1809,1829],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concrt.h","source":"**Header:** concrt.h"},{"pos":[1836,1862],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[1872,1915],"content":"<bpt id=\"p1\">&lt;a name=\"id\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ScheduleGroup::Id Method","linkify":"<a name=\"id\"></a>  ScheduleGroup::Id Method","source":"<a name=\"id\"></a>  ScheduleGroup::Id Method"},{"content":"Returns an identifier for the schedule group that is unique within the scheduler to which the group belongs.","pos":[1919,2027]},{"pos":[2087,2099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An identifier for the schedule group that is unique within the scheduler to which the group belongs.","pos":[2103,2203]},{"pos":[2213,2284],"content":"<bpt id=\"p1\">&lt;a name=\"operator_delete\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ScheduleGroup::operator delete Operator","linkify":"<a name=\"operator_delete\"></a>  ScheduleGroup::operator delete Operator","source":"<a name=\"operator_delete\"></a>  ScheduleGroup::operator delete Operator"},{"content":"A <ph id=\"ph1\">`ScheduleGroup`</ph> object is destroyed internally by the runtime when all external references to it are released.","pos":[2288,2400],"source":"A `ScheduleGroup` object is destroyed internally by the runtime when all external references to it are released."},{"content":"It cannot be explicitly deleted.","pos":[2401,2433]},{"pos":[2578,2588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the object to be deleted.","pos":[2606,2644]},{"pos":[2654,2711],"content":"<bpt id=\"p1\">&lt;a name=\"reference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ScheduleGroup::Reference Method","linkify":"<a name=\"reference\"></a>  ScheduleGroup::Reference Method","source":"<a name=\"reference\"></a>  ScheduleGroup::Reference Method"},{"content":"Increments the schedule group reference count.","pos":[2715,2761]},{"pos":[2822,2834],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The newly incremented reference count.","pos":[2838,2876]},{"pos":[2886,2893],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This is typically used to manage the lifetime of the schedule group for composition.","pos":[2897,2981]},{"content":"When the reference count of a schedule group falls to zero, the schedule group is deleted by the runtime.","pos":[2982,3087]},{"content":"A schedule group created using either the <bpt id=\"p1\">[</bpt>CurrentScheduler::CreateScheduleGroup<ept id=\"p1\">](currentscheduler-class.md#createschedulegroup)</ept> method, or the <bpt id=\"p2\">[</bpt>Scheduler::CreateScheduleGroup<ept id=\"p2\">](scheduler-class.md#createschedulegroup)</ept> method starts out with a reference count of one.","pos":[3088,3353],"source":" A schedule group created using either the [CurrentScheduler::CreateScheduleGroup](currentscheduler-class.md#createschedulegroup) method, or the [Scheduler::CreateScheduleGroup](scheduler-class.md#createschedulegroup) method starts out with a reference count of one."},{"pos":[3363,3416],"content":"<bpt id=\"p1\">&lt;a name=\"release\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ScheduleGroup::Release Method","linkify":"<a name=\"release\"></a>  ScheduleGroup::Release Method","source":"<a name=\"release\"></a>  ScheduleGroup::Release Method"},{"content":"Decrements the scheduler group reference count.","pos":[3420,3467]},{"pos":[3526,3538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The newly decremented reference count.","pos":[3542,3580]},{"pos":[3590,3597],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This is typically used to manage the lifetime of the schedule group for composition.","pos":[3601,3685]},{"content":"When the reference count of a schedule group falls to zero, the schedule group is deleted by the runtime.","pos":[3686,3791]},{"content":"After you have called the <ph id=\"ph1\">`Release`</ph> method the specific number of times to remove the creation reference count and any additional references placed using the <ph id=\"ph2\">`Reference`</ph> method, you cannot utilize the schedule group further.","pos":[3792,4016],"source":" After you have called the `Release` method the specific number of times to remove the creation reference count and any additional references placed using the `Reference` method, you cannot utilize the schedule group further."},{"content":"Doing so will result in undefined behavior.","pos":[4017,4060]},{"content":"A schedule group is associated with a particular scheduler instance.","pos":[4067,4135]},{"content":"You must ensure that all references to the schedule group are released before all references to the scheduler are released, because the latter could result in the scheduler being destroyed.","pos":[4136,4325]},{"content":"Doing otherwise results in undefined behavior.","pos":[4326,4372]},{"pos":[4382,4443],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ScheduleGroup::~ScheduleGroup Destructor","linkify":"<a name=\"dtor\"></a>  ScheduleGroup::~ScheduleGroup Destructor","source":"<a name=\"dtor\"></a>  ScheduleGroup::~ScheduleGroup Destructor"},{"pos":[4492,4555],"content":"<bpt id=\"p1\">&lt;a name=\"scheduletask\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  ScheduleGroup::ScheduleTask Method","linkify":"<a name=\"scheduletask\"></a>  ScheduleGroup::ScheduleTask Method","source":"<a name=\"scheduletask\"></a>  ScheduleGroup::ScheduleTask Method"},{"content":"Schedules a light-weight task within the schedule group.","pos":[4559,4615]},{"pos":[4719,4729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the function to execute to perform the body of the light-weight task.","pos":[4744,4826]},{"content":"A void pointer to the data that will be passed as a parameter to the body of the task.","pos":[4844,4930]},{"pos":[4940,4947],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4951,5122],"content":"Calling the <ph id=\"ph1\">`ScheduleTask`</ph> method implicitly places a reference count on the schedule group which is removed by the runtime at an appropriate time after the task executes.","source":"Calling the `ScheduleTask` method implicitly places a reference count on the schedule group which is removed by the runtime at an appropriate time after the task executes."},{"pos":[5131,5139],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept><ph id=\"ph1\"> </ph>","pos":[5143,5193],"source":"[concurrency Namespace](concurrency-namespace.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CurrentScheduler Class<ept id=\"p1\">](currentscheduler-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[5196,5249],"source":" [CurrentScheduler Class](currentscheduler-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Scheduler Class<ept id=\"p1\">](scheduler-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[5252,5291],"source":" [Scheduler Class](scheduler-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Task Scheduler<ept id=\"p1\">](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)</ept>","pos":[5294,5375],"source":" [Task Scheduler](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)"}],"content":"---\ntitle: \"ScheduleGroup Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concrt/concurrency::ScheduleGroup\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ScheduleGroup class\"\nms.assetid: 86d380ff-f2e8-411c-b1a8-22bd3079824a\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ScheduleGroup Class\nRepresents an abstraction for a schedule group. Schedule groups organize a set of related work that benefits from being scheduled close together either temporally, by executing another task in the same group before moving to another group, or spatially, by executing multiple items within the same group on the same NUMA node or physical socket.  \n  \n## Syntax  \n  \n```\nclass ScheduleGroup;\n```  \n  \n## Members  \n  \n### Protected Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ScheduleGroup::~ScheduleGroup Destructor](#dtor)||  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ScheduleGroup::Id Method](#id)|Returns an identifier for the schedule group that is unique within the scheduler to which the group belongs.|  \n|[ScheduleGroup::Reference Method](#reference)|Increments the schedule group reference count.|  \n|[ScheduleGroup::Release Method](#release)|Decrements the scheduler group reference count.|  \n|[ScheduleGroup::ScheduleTask Method](#scheduletask)|Schedules a light-weight task within the schedule group.|  \n  \n## Inheritance Hierarchy  \n `ScheduleGroup`  \n  \n## Requirements  \n **Header:** concrt.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"id\"></a>  ScheduleGroup::Id Method  \n Returns an identifier for the schedule group that is unique within the scheduler to which the group belongs.  \n  \n```\nvirtual unsigned int Id() const = 0;\n```  \n  \n### Return Value  \n An identifier for the schedule group that is unique within the scheduler to which the group belongs.  \n  \n##  <a name=\"operator_delete\"></a>  ScheduleGroup::operator delete Operator  \n A `ScheduleGroup` object is destroyed internally by the runtime when all external references to it are released. It cannot be explicitly deleted.  \n  \n```\nvoid operator delete(\n    void* _PObject);\n\nvoid operator delete(\n    void* _PObject,\n    int,\n const char *,\n    int);\n```    \n  \n### Parameters  \n `_PObject`  \n A pointer to the object to be deleted.  \n  \n##  <a name=\"reference\"></a>  ScheduleGroup::Reference Method  \n Increments the schedule group reference count.  \n  \n```\nvirtual unsigned int Reference() = 0;\n```  \n  \n### Return Value  \n The newly incremented reference count.  \n  \n### Remarks  \n This is typically used to manage the lifetime of the schedule group for composition. When the reference count of a schedule group falls to zero, the schedule group is deleted by the runtime. A schedule group created using either the [CurrentScheduler::CreateScheduleGroup](currentscheduler-class.md#createschedulegroup) method, or the [Scheduler::CreateScheduleGroup](scheduler-class.md#createschedulegroup) method starts out with a reference count of one.  \n  \n##  <a name=\"release\"></a>  ScheduleGroup::Release Method  \n Decrements the scheduler group reference count.  \n  \n```\nvirtual unsigned int Release() = 0;\n```  \n  \n### Return Value  \n The newly decremented reference count.  \n  \n### Remarks  \n This is typically used to manage the lifetime of the schedule group for composition. When the reference count of a schedule group falls to zero, the schedule group is deleted by the runtime. After you have called the `Release` method the specific number of times to remove the creation reference count and any additional references placed using the `Reference` method, you cannot utilize the schedule group further. Doing so will result in undefined behavior.  \n  \n A schedule group is associated with a particular scheduler instance. You must ensure that all references to the schedule group are released before all references to the scheduler are released, because the latter could result in the scheduler being destroyed. Doing otherwise results in undefined behavior.  \n  \n##  <a name=\"dtor\"></a>  ScheduleGroup::~ScheduleGroup Destructor  \n  \n```\nvirtual ~ScheduleGroup();\n```  \n  \n##  <a name=\"scheduletask\"></a>  ScheduleGroup::ScheduleTask Method  \n Schedules a light-weight task within the schedule group.  \n  \n```\nvirtual void ScheduleTask(\n    TaskProc _Proc,\n    _Inout_opt_ void* _Data) = 0;\n```  \n  \n### Parameters  \n `_Proc`  \n A pointer to the function to execute to perform the body of the light-weight task.  \n  \n `_Data`  \n A void pointer to the data that will be passed as a parameter to the body of the task.  \n  \n### Remarks  \n Calling the `ScheduleTask` method implicitly places a reference count on the schedule group which is removed by the runtime at an appropriate time after the task executes.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [CurrentScheduler Class](currentscheduler-class.md)   \n [Scheduler Class](scheduler-class.md)   \n [Task Scheduler](../../../parallel/concrt/task-scheduler-concurrency-runtime.md)\n\n\n\n"}