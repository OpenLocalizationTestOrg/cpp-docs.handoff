{"nodes":[{"pos":[12,44],"content":"Variadic Macros | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Variadic Macros | Microsoft Docs","pos":[0,32]}]},{"content":"Variadic Macros","pos":[652,667]},{"content":"Variadic macros are function-like macros that contain a variable number of arguments.","pos":[668,753]},{"content":"Remarks","pos":[762,769]},{"content":"To use variadic macros, the ellipsis may be specified as the final formal argument in a macro definition, and the replacement identifier <ph id=\"ph1\">`__VA_ARGS__`</ph> may be used in the definition to insert the extra arguments.","pos":[773,984],"source":"To use variadic macros, the ellipsis may be specified as the final formal argument in a macro definition, and the replacement identifier `__VA_ARGS__` may be used in the definition to insert the extra arguments."},{"content":"is replaced by all of the arguments that match the ellipsis, including commas between them.","pos":[1000,1091]},{"content":"The C Standard specifies that at least one argument must be passed to the ellipsis, to ensure that the macro does not resolve to an expression with a trailing comma.","pos":[1098,1263]},{"content":"The Visual C++ implementation will suppress a trailing comma if no arguments are passed to the ellipsis.","pos":[1265,1369]},{"content":"Example","pos":[1378,1385]},{"content":"Output","pos":[2296,2302]},{"content":"See Also","pos":[2433,2441]},{"content":"Macros (C/C++)","pos":[2446,2460]}],"content":"---\ntitle: \"Variadic Macros | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"variadic macros [C++]\"\n  - \"__VA_ARGS__ variadic macro specifier\"\nms.assetid: 51e757dc-0134-4bb2-bb74-64ea5ad75134\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Variadic Macros\nVariadic macros are function-like macros that contain a variable number of arguments.  \n  \n## Remarks  \n To use variadic macros, the ellipsis may be specified as the final formal argument in a macro definition, and the replacement identifier `__VA_ARGS__` may be used in the definition to insert the extra arguments.  `__VA_ARGS__` is replaced by all of the arguments that match the ellipsis, including commas between them.  \n  \n The C Standard specifies that at least one argument must be passed to the ellipsis, to ensure that the macro does not resolve to an expression with a trailing comma.  The Visual C++ implementation will suppress a trailing comma if no arguments are passed to the ellipsis.  \n  \n## Example  \n  \n```cpp  \n// variadic_macros.cpp  \n#include <stdio.h>  \n#define EMPTY  \n  \n#define CHECK1(x, ...) if (!(x)) { printf(__VA_ARGS__); }  \n#define CHECK2(x, ...) if ((x)) { printf(__VA_ARGS__); }  \n#define CHECK3(...) { printf(__VA_ARGS__); }  \n#define MACRO(s, ...) printf(s, __VA_ARGS__)  \n  \nint main() {  \n    CHECK1(0, \"here %s %s %s\", \"are\", \"some\", \"varargs1(1)\\n\");  \n    CHECK1(1, \"here %s %s %s\", \"are\", \"some\", \"varargs1(2)\\n\");   // won't print  \n  \n    CHECK2(0, \"here %s %s %s\", \"are\", \"some\", \"varargs2(3)\\n\");   // won't print  \n    CHECK2(1, \"here %s %s %s\", \"are\", \"some\", \"varargs2(4)\\n\");  \n  \n    // always invokes printf in the macro  \n    CHECK3(\"here %s %s %s\", \"are\", \"some\", \"varargs3(5)\\n\");  \n  \n    MACRO(\"hello, world\\n\");  \n  \n    MACRO(\"error\\n\", EMPTY); // would cause error C2059, except VC++   \n                             // suppresses the trailing comma  \n}  \n```  \n  \n## Output  \n  \n```  \nhere are some varargs1(1)  \nhere are some varargs2(4)  \nhere are some varargs3(5)  \nhello, world  \nerror  \n```  \n  \n## See Also  \n [Macros (C/C++)](../preprocessor/macros-c-cpp.md)"}