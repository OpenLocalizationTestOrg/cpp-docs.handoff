<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9f6574029dd40d0c8c2a2ff2a5f73f4744f5ffe</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\pair-structure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f866e26404dfab68cd646e9c0df3d17cf38b669</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">273b77c19d7fd31fc9655d88fc83fbf3672b1f73</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>pair Structure | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>pair Structure</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A struct that provides for the ability to treat two objects as a single object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Value initializing the first element of <ph id="ph1">`pair`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Value initializing the second element of <ph id="ph1">`pair`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A pair whose values are to be used to initialize the elements of another pair.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The first (default) constructor initializes first element of the pair to the default of type <bpt id="p1">**</bpt>T1<ept id="p1">**</ept> and second element to default of type <bpt id="p2">**</bpt>T2<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The second constructor initializes first element of the pair to <ph id="ph1">`Val1`</ph> and second to <bpt id="p1">*</bpt>Val2.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The third (template) constructor initializes first element of the pair to <ph id="ph1">`Right`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>first<ept id="p1">**</ept> and second to <ph id="ph1">`Right`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>second<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The fourth constructor initializes first element of the pair to <ph id="ph1">`Val1`</ph> and second to <bpt id="p1">*</bpt>Val2<ept id="p1">*</ept> using <bpt id="p2">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id="p2">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The template struct stores a pair of objects of type <bpt id="p1">**</bpt>T1<ept id="p1">**</ept> and <bpt id="p2">**</bpt>T2<ept id="p2">**</ept>, respectively.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The type <bpt id="p1">**</bpt>first_type<ept id="p1">**</ept> is the same as the template parameter <bpt id="p2">**</bpt>T1<ept id="p2">**</ept> and the type <bpt id="p3">**</bpt>second_type<ept id="p3">**</ept> is the same as the template parameter <bpt id="p4">**</bpt>T2<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>T1<ept id="p1">**</ept> and <bpt id="p2">**</bpt>T2<ept id="p2">**</ept> each need supply only a default constructor, a single-argument constructor, and a destructor.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>All members of the type <ph id="ph1">`pair`</ph> are public, because the type is declared as a <ph id="ph2">`struct`</ph> rather than as a <bpt id="p1">**</bpt>class<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The two most common uses for a pair are as return types for functions that return two values and as elements for the associative container classes <bpt id="p1">[</bpt>map Class<ept id="p1">](../standard-library/map-class.md)</ept> and <bpt id="p2">[</bpt>multimap Class<ept id="p2">](../standard-library/multimap-class.md)</ept> that have both a key and a value type associated with each element.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The latter satisfies the requirements for a pair associative container and has a value type of the form <ph id="ph1">`pair`&lt; </ph><bpt id="p1">**</bpt>const<ept id="p1">**</ept><ph id="ph2">`key_type`</ph>, <ph id="ph3">`mapped_type`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>utility&gt;</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>