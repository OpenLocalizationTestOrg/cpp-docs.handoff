{"nodes":[{"pos":[12,40],"content":"CList Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CList Class | Microsoft Docs","pos":[0,28]}]},{"pos":[629,640],"content":"CList Class","linkify":"CList Class","nodes":[{"content":"CList Class","pos":[0,11]}]},{"content":"Supports ordered lists of nonunique objects accessible sequentially or by value.","pos":[641,721]},{"pos":[730,736],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[844,851],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[861,880],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[887,891]},{"content":"Description","pos":[892,903]},{"pos":[941,970],"content":"<bpt id=\"p1\">[</bpt>CList::CList<ept id=\"p1\">](#clist__clist)</ept>","source":"[CList::CList](#clist__clist)"},{"content":"Constructs an empty ordered list.","pos":[971,1004]},{"pos":[1015,1029],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1036,1040]},{"content":"Description","pos":[1041,1052]},{"pos":[1090,1123],"content":"<bpt id=\"p1\">[</bpt>CList::AddHead<ept id=\"p1\">](#clist__addhead)</ept>","source":"[CList::AddHead](#clist__addhead)"},{"content":"Adds an element (or all the elements in another list) to the head of the list (makes a new head).","pos":[1124,1221]},{"pos":[1226,1259],"content":"<bpt id=\"p1\">[</bpt>CList::AddTail<ept id=\"p1\">](#clist__addtail)</ept>","source":"[CList::AddTail](#clist__addtail)"},{"content":"Adds an element (or all the elements in another list) to the tail of the list (makes a new tail).","pos":[1260,1357]},{"pos":[1362,1389],"content":"<bpt id=\"p1\">[</bpt>CList::Find<ept id=\"p1\">](#clist__find)</ept>","source":"[CList::Find](#clist__find)"},{"content":"Gets the position of an element specified by pointer value.","pos":[1390,1449]},{"pos":[1454,1491],"content":"<bpt id=\"p1\">[</bpt>CList::FindIndex<ept id=\"p1\">](#clist__findindex)</ept>","source":"[CList::FindIndex](#clist__findindex)"},{"content":"Gets the position of an element specified by a zero-based index.","pos":[1492,1556]},{"pos":[1561,1590],"content":"<bpt id=\"p1\">[</bpt>CList::GetAt<ept id=\"p1\">](#clist__getat)</ept>","source":"[CList::GetAt](#clist__getat)"},{"content":"Gets the element at a given position.","pos":[1591,1628]},{"pos":[1633,1668],"content":"<bpt id=\"p1\">[</bpt>CList::GetCount<ept id=\"p1\">](#clist__getcount)</ept>","source":"[CList::GetCount](#clist__getcount)"},{"content":"Returns the number of elements in this list.","pos":[1669,1713]},{"pos":[1718,1751],"content":"<bpt id=\"p1\">[</bpt>CList::GetHead<ept id=\"p1\">](#clist__gethead)</ept>","source":"[CList::GetHead](#clist__gethead)"},{"content":"Returns the head element of the list (cannot be empty).","pos":[1752,1807]},{"pos":[1812,1861],"content":"<bpt id=\"p1\">[</bpt>CList::GetHeadPosition<ept id=\"p1\">](#clist__getheadposition)</ept>","source":"[CList::GetHeadPosition](#clist__getheadposition)"},{"content":"Returns the position of the head element of the list.","pos":[1862,1915]},{"pos":[1920,1953],"content":"<bpt id=\"p1\">[</bpt>CList::GetNext<ept id=\"p1\">](#clist__getnext)</ept>","source":"[CList::GetNext](#clist__getnext)"},{"content":"Gets the next element for iterating.","pos":[1954,1990]},{"pos":[1995,2028],"content":"<bpt id=\"p1\">[</bpt>CList::GetPrev<ept id=\"p1\">](#clist__getprev)</ept>","source":"[CList::GetPrev](#clist__getprev)"},{"content":"Gets the previous element for iterating.","pos":[2029,2069]},{"pos":[2074,2107],"content":"<bpt id=\"p1\">[</bpt>CList::GetSize<ept id=\"p1\">](#clist__getsize)</ept>","source":"[CList::GetSize](#clist__getsize)"},{"content":"Returns the number of elements in this list.","pos":[2108,2152]},{"pos":[2157,2190],"content":"<bpt id=\"p1\">[</bpt>CList::GetTail<ept id=\"p1\">](#clist__gettail)</ept>","source":"[CList::GetTail](#clist__gettail)"},{"content":"Returns the tail element of the list (cannot be empty).","pos":[2191,2246]},{"pos":[2251,2300],"content":"<bpt id=\"p1\">[</bpt>CList::GetTailPosition<ept id=\"p1\">](#clist__gettailposition)</ept>","source":"[CList::GetTailPosition](#clist__gettailposition)"},{"content":"Returns the position of the tail element of the list.","pos":[2301,2354]},{"pos":[2359,2400],"content":"<bpt id=\"p1\">[</bpt>CList::InsertAfter<ept id=\"p1\">](#clist__insertafter)</ept>","source":"[CList::InsertAfter](#clist__insertafter)"},{"content":"Inserts a new element after a given position.","pos":[2401,2446]},{"pos":[2451,2494],"content":"<bpt id=\"p1\">[</bpt>CList::InsertBefore<ept id=\"p1\">](#clist__insertbefore)</ept>","source":"[CList::InsertBefore](#clist__insertbefore)"},{"content":"Inserts a new element before a given position.","pos":[2495,2541]},{"pos":[2546,2579],"content":"<bpt id=\"p1\">[</bpt>CList::IsEmpty<ept id=\"p1\">](#clist__isempty)</ept>","source":"[CList::IsEmpty](#clist__isempty)"},{"content":"Tests for the empty list condition (no elements).","pos":[2580,2629]},{"pos":[2634,2671],"content":"<bpt id=\"p1\">[</bpt>CList::RemoveAll<ept id=\"p1\">](#clist__removeall)</ept>","source":"[CList::RemoveAll](#clist__removeall)"},{"content":"Removes all the elements from this list.","pos":[2672,2712]},{"pos":[2717,2752],"content":"<bpt id=\"p1\">[</bpt>CList::RemoveAt<ept id=\"p1\">](#clist__removeat)</ept>","source":"[CList::RemoveAt](#clist__removeat)"},{"content":"Removes an element from this list, specified by position.","pos":[2753,2810]},{"pos":[2815,2854],"content":"<bpt id=\"p1\">[</bpt>CList::RemoveHead<ept id=\"p1\">](#clist__removehead)</ept>","source":"[CList::RemoveHead](#clist__removehead)"},{"content":"Removes the element from the head of the list.","pos":[2855,2901]},{"pos":[2906,2945],"content":"<bpt id=\"p1\">[</bpt>CList::RemoveTail<ept id=\"p1\">](#clist__removetail)</ept>","source":"[CList::RemoveTail](#clist__removetail)"},{"content":"Removes the element from the tail of the list.","pos":[2946,2992]},{"pos":[2997,3026],"content":"<bpt id=\"p1\">[</bpt>CList::SetAt<ept id=\"p1\">](#clist__setat)</ept>","source":"[CList::SetAt](#clist__setat)"},{"content":"Sets the element at a given position.","pos":[3027,3064]},{"pos":[3076,3086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Type of object stored in the list.","pos":[3100,3134]},{"content":"<ph id=\"ph1\">`ARG`</ph> <bpt id=\"p1\">*</bpt>_<ept id=\"p1\">*</ept> <ph id=\"ph2\">`TYPE`</ph>","pos":[3141,3157],"source":"`ARG` *_* `TYPE`"},{"content":"Type used to reference objects stored in the list.","pos":[3161,3211]},{"content":"Can be a reference.","pos":[3212,3231]},{"pos":[3240,3247],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3251,3297],"content":"<ph id=\"ph1\">`CList`</ph> lists behave like doubly-linked lists.","source":"`CList` lists behave like doubly-linked lists."},{"content":"A variable of type <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> is a key for the list.","pos":[3304,3358],"source":"A variable of type **POSITION** is a key for the list."},{"content":"You can use a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> variable as an iterator to traverse a list sequentially and as a bookmark to hold a place.","pos":[3359,3476],"source":" You can use a **POSITION** variable as an iterator to traverse a list sequentially and as a bookmark to hold a place."},{"content":"A position is not the same as an index, however.","pos":[3477,3525]},{"content":"Element insertion is very fast at the list head, at the tail, and at a known <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept>.","pos":[3532,3622],"source":"Element insertion is very fast at the list head, at the tail, and at a known **POSITION**."},{"content":"A sequential search is necessary to look up an element by value or index.","pos":[3623,3696]},{"content":"This search can be slow if the list is long.","pos":[3697,3741]},{"content":"If you need a dump of individual elements in the list, you must set the depth of the dump context to 1 or greater.","pos":[3748,3862]},{"content":"Certain member functions of this class call global helper functions that must be customized for most uses of the <ph id=\"ph1\">`CList`</ph> class.","pos":[3869,3996],"source":"Certain member functions of this class call global helper functions that must be customized for most uses of the `CList` class."},{"content":"See <bpt id=\"p1\">[</bpt>Collection Class Helpers<ept id=\"p1\">](../../mfc/reference/collection-class-helpers.md)</ept> in the \"Macros and Globals\" section.","pos":[3997,4113],"source":" See [Collection Class Helpers](../../mfc/reference/collection-class-helpers.md) in the \"Macros and Globals\" section."},{"pos":[4120,4215],"content":"For more information on using <ph id=\"ph1\">`CList`</ph>, see the article <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept>.","source":"For more information on using `CList`, see the article [Collections](../../mfc/collections.md)."},{"pos":[4224,4231],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4235,4314],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#35<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#35](../../mfc/codesnippet/cpp/clist-class_1.cpp)]"},{"pos":[4323,4344],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4348,4395],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[4418,4430],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4434,4456],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxtempl.h","source":"**Header:** afxtempl.h"},{"pos":[4466,4511],"content":"<bpt id=\"p1\">&lt;a name=\"clist__addhead\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::AddHead","linkify":"<a name=\"clist__addhead\"></a>  CList::AddHead","source":"<a name=\"clist__addhead\"></a>  CList::AddHead"},{"content":"Adds a new element or list of elements to the head of this list.","pos":[4515,4579]},{"pos":[4677,4687],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Template parameter specifying the type of the list element (can be a reference).","pos":[4705,4785]},{"content":"The new element.","pos":[4808,4824]},{"content":"A pointer to another <ph id=\"ph1\">`CList`</ph> list.","pos":[4845,4879],"source":" A pointer to another `CList` list."},{"content":"The elements in <ph id=\"ph1\">`pNewList`</ph> will be added to this list.","pos":[4880,4934],"source":" The elements in `pNewList` will be added to this list."},{"pos":[4944,4956],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4960,5039],"content":"The first version returns the <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value of the newly inserted element.","source":"The first version returns the **POSITION** value of the newly inserted element."},{"pos":[5049,5056],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The list can be empty before the operation.","pos":[5060,5103]},{"pos":[5113,5120],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5124,5203],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#36<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#36](../../mfc/codesnippet/cpp/clist-class_2.cpp)]"},{"pos":[5213,5258],"content":"<bpt id=\"p1\">&lt;a name=\"clist__addtail\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::AddTail","linkify":"<a name=\"clist__addtail\"></a>  CList::AddTail","source":"<a name=\"clist__addtail\"></a>  CList::AddTail"},{"content":"Adds a new element or list of elements to the tail of this list.","pos":[5262,5326]},{"pos":[5424,5434],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Template parameter specifying the type of the list element (can be a reference).","pos":[5452,5532]},{"content":"The element to be added to this list.","pos":[5555,5592]},{"content":"A pointer to another <ph id=\"ph1\">`CList`</ph> list.","pos":[5613,5647],"source":" A pointer to another `CList` list."},{"content":"The elements in <ph id=\"ph1\">`pNewList`</ph> will be added to this list.","pos":[5648,5702],"source":" The elements in `pNewList` will be added to this list."},{"pos":[5712,5724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5728,5807],"content":"The first version returns the <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value of the newly inserted element.","source":"The first version returns the **POSITION** value of the newly inserted element."},{"pos":[5817,5824],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The list can be empty before the operation.","pos":[5828,5871]},{"pos":[5881,5888],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5892,5971],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#37<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#37](../../mfc/codesnippet/cpp/clist-class_3.cpp)]"},{"pos":[5981,6022],"content":"<bpt id=\"p1\">&lt;a name=\"clist__clist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::CList","linkify":"<a name=\"clist__clist\"></a>  CList::CList","source":"<a name=\"clist__clist\"></a>  CList::CList"},{"content":"Constructs an empty ordered list.","pos":[6026,6059]},{"pos":[6116,6126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The memory-allocation granularity for extending the list.","pos":[6146,6203]},{"pos":[6213,6220],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6224,6296],"content":"As the list grows, memory is allocated in units of <ph id=\"ph1\">`nBlockSize`</ph> entries.","source":"As the list grows, memory is allocated in units of `nBlockSize` entries."},{"pos":[6306,6313],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6317,6396],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#38<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#38](../../mfc/codesnippet/cpp/clist-class_4.cpp)]"},{"pos":[6406,6445],"content":"<bpt id=\"p1\">&lt;a name=\"clist__find\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::Find","linkify":"<a name=\"clist__find\"></a>  CList::Find","source":"<a name=\"clist__find\"></a>  CList::Find"},{"pos":[6449,6543],"content":"Searches the list sequentially to find the first element matching the specified <ph id=\"ph1\">`searchValue`</ph>.","source":"Searches the list sequentially to find the first element matching the specified `searchValue`."},{"pos":[6653,6663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Template parameter specifying the type of the list element (can be a reference).","pos":[6681,6761]},{"content":"The value to be found in the list.","pos":[6785,6819]},{"content":"The start position for the search.","pos":[6842,6876]},{"content":"If no value is specified, the search begins with the head element.","pos":[6877,6943]},{"pos":[6953,6965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6969,7086],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the object is not found.","source":"A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the object is not found."},{"pos":[7096,7103],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7107,7186],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#39<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#39](../../mfc/codesnippet/cpp/clist-class_5.cpp)]"},{"pos":[7196,7245],"content":"<bpt id=\"p1\">&lt;a name=\"clist__findindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::FindIndex","linkify":"<a name=\"clist__findindex\"></a>  CList::FindIndex","source":"<a name=\"clist__findindex\"></a>  CList::FindIndex"},{"pos":[7249,7302],"content":"Uses the value of <ph id=\"ph1\">`nIndex`</ph> as an index into the list.","source":"Uses the value of `nIndex` as an index into the list."},{"pos":[7372,7382],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The zero-based index of the list element to be found.","pos":[7398,7451]},{"pos":[7461,7473],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7477,7604],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if <ph id=\"ph1\">`nIndex`</ph> is negative or too large.","source":"A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if `nIndex` is negative or too large."},{"pos":[7614,7621],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7625,7710],"content":"It starts a sequential scan from the head of the list, stopping on the <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>th element.","source":"It starts a sequential scan from the head of the list, stopping on the *n*th element."},{"pos":[7720,7727],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7731,7810],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#40<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#40](../../mfc/codesnippet/cpp/clist-class_6.cpp)]"},{"pos":[7820,7861],"content":"<bpt id=\"p1\">&lt;a name=\"clist__getat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::GetAt","linkify":"<a name=\"clist__getat\"></a>  CList::GetAt","source":"<a name=\"clist__getat\"></a>  CList::GetAt"},{"content":"Gets the list element at a given position.","pos":[7865,7907]},{"pos":[8014,8024],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>TYPE<ept id=\"p1\">*</ept>","pos":[8028,8034],"source":"*TYPE*"},{"content":"Template parameter specifying the type of object in the list.","pos":[8038,8099]},{"content":"<bpt id=\"p1\">*</bpt>position<ept id=\"p1\">*</ept>","pos":[8106,8116],"source":"*position*"},{"content":"The position in the list of the element to get.","pos":[8120,8167]},{"pos":[8177,8189],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8193,8240],"content":"See the return value description for <ph id=\"ph1\">`GetHead`</ph>.","source":"See the return value description for `GetHead`."},{"pos":[8250,8257],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`GetAt`</ph> returns the element (or a reference to the element) associated with a given position.","pos":[8261,8354],"source":"`GetAt` returns the element (or a reference to the element) associated with a given position."},{"content":"It is not the same as an index, and you cannot operate on a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value yourself.","pos":[8355,8443],"source":" It is not the same as an index, and you cannot operate on a **POSITION** value yourself."},{"content":"A variable of type <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> is a key for the list.","pos":[8444,8498],"source":" A variable of type **POSITION** is a key for the list."},{"content":"You must ensure that your <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value represents a valid position in the list.","pos":[8505,8590],"source":"You must ensure that your **POSITION** value represents a valid position in the list."},{"content":"If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[8591,8682]},{"pos":[8692,8699],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8704,8774],"content":"See the example for <bpt id=\"p1\">[</bpt>CList::GetHeadPosition<ept id=\"p1\">](#clist__getheadposition)</ept>.","source":"See the example for [CList::GetHeadPosition](#clist__getheadposition)."},{"pos":[8784,8831],"content":"<bpt id=\"p1\">&lt;a name=\"clist__getcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::GetCount","linkify":"<a name=\"clist__getcount\"></a>  CList::GetCount","source":"<a name=\"clist__getcount\"></a>  CList::GetCount"},{"content":"Gets the number of elements in this list.","pos":[8835,8876]},{"pos":[8930,8942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value containing the element count.","pos":[8946,8992]},{"pos":[9002,9009],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9013,9111],"content":"Calling this method will generate the same result as the <bpt id=\"p1\">[</bpt>CList::GetSize<ept id=\"p1\">](#clist__getsize)</ept> method.","source":"Calling this method will generate the same result as the [CList::GetSize](#clist__getsize) method."},{"pos":[9121,9128],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9133,9193],"content":"See the example for <bpt id=\"p1\">[</bpt>CList::RemoveHead<ept id=\"p1\">](#clist__removehead)</ept>.","source":"See the example for [CList::RemoveHead](#clist__removehead)."},{"pos":[9203,9248],"content":"<bpt id=\"p1\">&lt;a name=\"clist__gethead\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::GetHead","linkify":"<a name=\"clist__gethead\"></a>  CList::GetHead","source":"<a name=\"clist__gethead\"></a>  CList::GetHead"},{"content":"Gets the head element (or a reference to the head element) of this list.","pos":[9252,9324]},{"pos":[9400,9410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>TYPE<ept id=\"p1\">*</ept>","pos":[9414,9420],"source":"*TYPE*"},{"content":"Template parameter specifying the type of object in the list.","pos":[9424,9485]},{"pos":[9495,9507],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the list is <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetHead`</ph> returns a copy of the element at the head of the list.","pos":[9511,9601],"source":"If the list is **const**, `GetHead` returns a copy of the element at the head of the list."},{"content":"This allows the function to be used only on the right side of an assignment statement and protects the list from modification.","pos":[9602,9728]},{"content":"If the list is not <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetHead`</ph> returns a reference to the element at the head of the list.","pos":[9735,9834],"source":"If the list is not **const**, `GetHead` returns a reference to the element at the head of the list."},{"content":"This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.","pos":[9835,9961]},{"pos":[9971,9978],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must ensure that the list is not empty before calling <ph id=\"ph1\">`GetHead`</ph>.","pos":[9982,10050],"source":"You must ensure that the list is not empty before calling `GetHead`."},{"content":"If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[10051,10146]},{"content":"Use <bpt id=\"p1\">[</bpt>IsEmpty<ept id=\"p1\">](#clist__isempty)</ept> to verify that the list contains elements.","pos":[10147,10220],"source":" Use [IsEmpty](#clist__isempty) to verify that the list contains elements."},{"pos":[10230,10237],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10241,10320],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#41<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#41](../../mfc/codesnippet/cpp/clist-class_7.cpp)]"},{"pos":[10330,10391],"content":"<bpt id=\"p1\">&lt;a name=\"clist__getheadposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::GetHeadPosition","linkify":"<a name=\"clist__getheadposition\"></a>  CList::GetHeadPosition","source":"<a name=\"clist__getheadposition\"></a>  CList::GetHeadPosition"},{"content":"Gets the position of the head element of this list.","pos":[10395,10446]},{"pos":[10508,10520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10524,10635],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the list is empty.","source":"A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the list is empty."},{"pos":[10645,10652],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10656,10735],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#42<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#42](../../mfc/codesnippet/cpp/clist-class_8.cpp)]"},{"pos":[10745,10790],"content":"<bpt id=\"p1\">&lt;a name=\"clist__getnext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::GetNext","linkify":"<a name=\"clist__getnext\"></a>  CList::GetNext","source":"<a name=\"clist__getnext\"></a>  CList::GetNext"},{"pos":[10794,10921],"content":"Gets the list element identified by <ph id=\"ph1\">`rPosition`</ph>, then sets <ph id=\"ph2\">`rPosition`</ph> to the <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value of the next entry in the list.","source":"Gets the list element identified by `rPosition`, then sets `rPosition` to the **POSITION** value of the next entry in the list."},{"pos":[11036,11046],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>TYPE<ept id=\"p1\">*</ept>","pos":[11050,11056],"source":"*TYPE*"},{"content":"Template parameter specifying the type of the elements in the list.","pos":[11060,11127]},{"content":"A reference to a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous <ph id=\"ph1\">`GetNext`</ph>, <bpt id=\"p2\">[</bpt>GetHeadPosition<ept id=\"p2\">](#clist__getheadposition)</ept>, or other member function call.","pos":[11149,11293],"source":" A reference to a **POSITION** value returned by a previous `GetNext`, [GetHeadPosition](#clist__getheadposition), or other member function call."},{"pos":[11303,11315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the list is <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetNext`</ph> returns a copy of an element of the list.","pos":[11319,11396],"source":"If the list is **const**, `GetNext` returns a copy of an element of the list."},{"content":"This allows the function to be used only on the right side of an assignment statement and protects the list from modification.","pos":[11397,11523]},{"content":"If the list is not <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetNext`</ph> returns a reference to an element of the list.","pos":[11530,11616],"source":"If the list is not **const**, `GetNext` returns a reference to an element of the list."},{"content":"This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.","pos":[11617,11743]},{"pos":[11753,11760],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11764,11897],"content":"You can use <ph id=\"ph1\">`GetNext`</ph> in a forward iteration loop if you establish the initial position with a call to <ph id=\"ph2\">`GetHeadPosition`</ph> or <bpt id=\"p1\">**</bpt>Find<ept id=\"p1\">**</ept>.","source":"You can use `GetNext` in a forward iteration loop if you establish the initial position with a call to `GetHeadPosition` or **Find**."},{"content":"You must ensure that your <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value represents a valid position in the list.","pos":[11904,11989],"source":"You must ensure that your **POSITION** value represents a valid position in the list."},{"content":"If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[11990,12081]},{"pos":[12088,12191],"content":"If the retrieved element is the last in the list, then the new value of <ph id=\"ph1\">`rPosition`</ph> is set to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If the retrieved element is the last in the list, then the new value of `rPosition` is set to **NULL**."},{"pos":[12201,12208],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12212,12291],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#43<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#43](../../mfc/codesnippet/cpp/clist-class_9.cpp)]"},{"pos":[12301,12346],"content":"<bpt id=\"p1\">&lt;a name=\"clist__getprev\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::GetPrev","linkify":"<a name=\"clist__getprev\"></a>  CList::GetPrev","source":"<a name=\"clist__getprev\"></a>  CList::GetPrev"},{"pos":[12350,12481],"content":"Gets the list element identified by <ph id=\"ph1\">`rPosition`</ph>, then sets <ph id=\"ph2\">`rPosition`</ph> to the <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value of the previous entry in the list.","source":"Gets the list element identified by `rPosition`, then sets `rPosition` to the **POSITION** value of the previous entry in the list."},{"pos":[12596,12606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>TYPE<ept id=\"p1\">*</ept>","pos":[12610,12616],"source":"*TYPE*"},{"content":"Template parameter specifying the type of the elements in the list.","pos":[12620,12687]},{"content":"A reference to a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous <ph id=\"ph1\">`GetPrev`</ph> or other member function call.","pos":[12709,12808],"source":" A reference to a **POSITION** value returned by a previous `GetPrev` or other member function call."},{"pos":[12818,12830],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the list is <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetPrev`</ph> returns a copy of the element at the head of the list.","pos":[12834,12924],"source":"If the list is **const**, `GetPrev` returns a copy of the element at the head of the list."},{"content":"This allows the function to be used only on the right side of an assignment statement and protects the list from modification.","pos":[12925,13051]},{"content":"If the list is not <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`GetPrev`</ph> returns a reference to an element of the list.","pos":[13058,13144],"source":"If the list is not **const**, `GetPrev` returns a reference to an element of the list."},{"content":"This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.","pos":[13145,13271]},{"pos":[13281,13288],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13292,13425],"content":"You can use <ph id=\"ph1\">`GetPrev`</ph> in a reverse iteration loop if you establish the initial position with a call to <ph id=\"ph2\">`GetTailPosition`</ph> or <bpt id=\"p1\">**</bpt>Find<ept id=\"p1\">**</ept>.","source":"You can use `GetPrev` in a reverse iteration loop if you establish the initial position with a call to `GetTailPosition` or **Find**."},{"content":"You must ensure that your <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value represents a valid position in the list.","pos":[13432,13517],"source":"You must ensure that your **POSITION** value represents a valid position in the list."},{"content":"If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[13518,13609]},{"pos":[13616,13720],"content":"If the retrieved element is the first in the list, then the new value of <ph id=\"ph1\">`rPosition`</ph> is set to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If the retrieved element is the first in the list, then the new value of `rPosition` is set to **NULL**."},{"pos":[13730,13737],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13741,13821],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#44<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#44](../../mfc/codesnippet/cpp/clist-class_10.cpp)]"},{"pos":[13831,13876],"content":"<bpt id=\"p1\">&lt;a name=\"clist__getsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::GetSize","linkify":"<a name=\"clist__getsize\"></a>  CList::GetSize","source":"<a name=\"clist__getsize\"></a>  CList::GetSize"},{"content":"Returns the number of list elements.","pos":[13880,13916]},{"pos":[13969,13981],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of items in the list.","pos":[13985,14017]},{"pos":[14027,14034],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to retrieve the number of elements in the list.","pos":[14038,14102]},{"content":"Calling this method will generate the same result as the <bpt id=\"p1\">[</bpt>CList::GetCount<ept id=\"p1\">](#clist__getcount)</ept> method.","pos":[14104,14204],"source":"  Calling this method will generate the same result as the [CList::GetCount](#clist__getcount) method."},{"pos":[14214,14221],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14225,14305],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#45<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#45](../../mfc/codesnippet/cpp/clist-class_11.cpp)]"},{"pos":[14315,14360],"content":"<bpt id=\"p1\">&lt;a name=\"clist__gettail\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::GetTail","linkify":"<a name=\"clist__gettail\"></a>  CList::GetTail","source":"<a name=\"clist__gettail\"></a>  CList::GetTail"},{"pos":[14364,14437],"content":"Gets the <ph id=\"ph1\">`CObject`</ph> pointer that represents the tail element of this list.","source":"Gets the `CObject` pointer that represents the tail element of this list."},{"pos":[14514,14524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>TYPE<ept id=\"p1\">*</ept>","pos":[14528,14534],"source":"*TYPE*"},{"content":"Template parameter specifying the type of elements in the list.","pos":[14538,14601]},{"pos":[14611,14623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14627,14729],"content":"See the return value description for <bpt id=\"p1\">[</bpt>GetHead<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__gethead)</ept>.","source":"See the return value description for [GetHead](../../mfc/reference/coblist-class.md#coblist__gethead)."},{"pos":[14739,14746],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must ensure that the list is not empty before calling <ph id=\"ph1\">`GetTail`</ph>.","pos":[14750,14818],"source":"You must ensure that the list is not empty before calling `GetTail`."},{"content":"If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[14819,14914]},{"content":"Use <bpt id=\"p1\">[</bpt>IsEmpty<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__isempty)</ept> to verify that the list contains elements.","pos":[14915,15026],"source":" Use [IsEmpty](../../mfc/reference/coblist-class.md#coblist__isempty) to verify that the list contains elements."},{"pos":[15036,15043],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15047,15127],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#46<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_12.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#46](../../mfc/codesnippet/cpp/clist-class_12.cpp)]"},{"pos":[15137,15198],"content":"<bpt id=\"p1\">&lt;a name=\"clist__gettailposition\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::GetTailPosition","linkify":"<a name=\"clist__gettailposition\"></a>  CList::GetTailPosition","source":"<a name=\"clist__gettailposition\"></a>  CList::GetTailPosition"},{"pos":[15202,15284],"content":"Gets the position of the tail element of this list; <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the list is empty.","source":"Gets the position of the tail element of this list; **NULL** if the list is empty."},{"pos":[15346,15358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15362,15473],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration or object pointer retrieval; <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the list is empty.","source":"A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the list is empty."},{"pos":[15483,15490],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15494,15574],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#47<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_13.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#47](../../mfc/codesnippet/cpp/clist-class_13.cpp)]"},{"pos":[15584,15637],"content":"<bpt id=\"p1\">&lt;a name=\"clist__insertafter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::InsertAfter","linkify":"<a name=\"clist__insertafter\"></a>  CList::InsertAfter","source":"<a name=\"clist__insertafter\"></a>  CList::InsertAfter"},{"content":"Adds an element to this list after the element at the specified position.","pos":[15641,15714]},{"pos":[15806,15816],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>position<ept id=\"p1\">*</ept>","pos":[15820,15830],"source":"*position*"},{"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous <ph id=\"ph1\">`GetNext`</ph>, <ph id=\"ph2\">`GetPrev`</ph>, or <bpt id=\"p2\">**</bpt>Find<ept id=\"p2\">**</ept> member function call.","pos":[15834,15933],"source":" A **POSITION** value returned by a previous `GetNext`, `GetPrev`, or **Find** member function call."},{"content":"Template parameter specifying the type of the list element.","pos":[15954,16013]},{"content":"The element to be added to this list.","pos":[16036,16073]},{"pos":[16083,16095],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16099,16177],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration or list element retrieval.","source":"A **POSITION** value that can be used for iteration or list element retrieval."},{"pos":[16187,16194],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16198,16278],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#48<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_14.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#48](../../mfc/codesnippet/cpp/clist-class_14.cpp)]"},{"pos":[16288,16343],"content":"<bpt id=\"p1\">&lt;a name=\"clist__insertbefore\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::InsertBefore","linkify":"<a name=\"clist__insertbefore\"></a>  CList::InsertBefore","source":"<a name=\"clist__insertbefore\"></a>  CList::InsertBefore"},{"content":"Adds an element to this list before the element at the specified position.","pos":[16347,16421]},{"pos":[16514,16524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>position<ept id=\"p1\">*</ept>","pos":[16528,16538],"source":"*position*"},{"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous <ph id=\"ph1\">`GetNext`</ph>, <ph id=\"ph2\">`GetPrev`</ph>, or <bpt id=\"p2\">**</bpt>Find<ept id=\"p2\">**</ept> member function call.","pos":[16542,16641],"source":" A **POSITION** value returned by a previous `GetNext`, `GetPrev`, or **Find** member function call."},{"content":"Template parameter specifying the type of the list element (can be a reference).","pos":[16662,16742]},{"content":"The element to be added to this list.","pos":[16765,16802]},{"pos":[16812,16824],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16828,16906],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be used for iteration or list element retrieval.","source":"A **POSITION** value that can be used for iteration or list element retrieval."},{"pos":[16916,16923],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16927,17002],"content":"If <bpt id=\"p1\">*</bpt>position<ept id=\"p1\">*</ept> is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>, the element is inserted at the head of the list.","source":"If *position* is **NULL**, the element is inserted at the head of the list."},{"pos":[17012,17019],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17023,17103],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#49<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_15.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#49](../../mfc/codesnippet/cpp/clist-class_15.cpp)]"},{"pos":[17113,17158],"content":"<bpt id=\"p1\">&lt;a name=\"clist__isempty\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::IsEmpty","linkify":"<a name=\"clist__isempty\"></a>  CList::IsEmpty","source":"<a name=\"clist__isempty\"></a>  CList::IsEmpty"},{"content":"Indicates whether this list contains no elements.","pos":[17162,17211]},{"pos":[17261,17273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if this list is empty; otherwise 0.","pos":[17277,17320]},{"pos":[17330,17337],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17341,17421],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#50<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_16.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#50](../../mfc/codesnippet/cpp/clist-class_16.cpp)]"},{"pos":[17431,17480],"content":"<bpt id=\"p1\">&lt;a name=\"clist__removeall\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::RemoveAll","linkify":"<a name=\"clist__removeall\"></a>  CList::RemoveAll","source":"<a name=\"clist__removeall\"></a>  CList::RemoveAll"},{"content":"Removes all the elements from this list and frees the associated memory.","pos":[17484,17556]},{"pos":[17599,17606],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"No error is generated if the list is already empty.","pos":[17610,17661]},{"pos":[17671,17678],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17682,17762],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#51<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_17.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#51](../../mfc/codesnippet/cpp/clist-class_17.cpp)]"},{"pos":[17772,17819],"content":"<bpt id=\"p1\">&lt;a name=\"clist__removeat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::RemoveAt","linkify":"<a name=\"clist__removeat\"></a>  CList::RemoveAt","source":"<a name=\"clist__removeat\"></a>  CList::RemoveAt"},{"content":"Removes the specified element from this list.","pos":[17823,17868]},{"pos":[17927,17937],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>position<ept id=\"p1\">*</ept>","pos":[17941,17951],"source":"*position*"},{"content":"The position of the element to be removed from the list.","pos":[17955,18011]},{"pos":[18021,18028],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must ensure that your <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value represents a valid position in the list.","pos":[18032,18117],"source":"You must ensure that your **POSITION** value represents a valid position in the list."},{"content":"If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[18118,18209]},{"pos":[18219,18226],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18230,18310],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#52<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_18.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#52](../../mfc/codesnippet/cpp/clist-class_18.cpp)]"},{"pos":[18320,18371],"content":"<bpt id=\"p1\">&lt;a name=\"clist__removehead\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::RemoveHead","linkify":"<a name=\"clist__removehead\"></a>  CList::RemoveHead","source":"<a name=\"clist__removehead\"></a>  CList::RemoveHead"},{"content":"Removes the element from the head of the list and returns a pointer to it.","pos":[18375,18449]},{"pos":[18493,18503],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>TYPE<ept id=\"p1\">*</ept>","pos":[18507,18513],"source":"*TYPE*"},{"content":"Template parameter specifying the type of elements in the list.","pos":[18517,18580]},{"pos":[18590,18602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The element previously at the head of the list.","pos":[18606,18653]},{"pos":[18663,18670],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must ensure that the list is not empty before calling <ph id=\"ph1\">`RemoveHead`</ph>.","pos":[18674,18745],"source":"You must ensure that the list is not empty before calling `RemoveHead`."},{"content":"If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[18746,18841]},{"content":"Use <bpt id=\"p1\">[</bpt>IsEmpty<ept id=\"p1\">](#clist__isempty)</ept> to verify that the list contains elements.","pos":[18842,18915],"source":" Use [IsEmpty](#clist__isempty) to verify that the list contains elements."},{"pos":[18925,18932],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18936,19016],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#53<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_19.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#53](../../mfc/codesnippet/cpp/clist-class_19.cpp)]"},{"pos":[19026,19077],"content":"<bpt id=\"p1\">&lt;a name=\"clist__removetail\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::RemoveTail","linkify":"<a name=\"clist__removetail\"></a>  CList::RemoveTail","source":"<a name=\"clist__removetail\"></a>  CList::RemoveTail"},{"content":"Removes the element from the tail of the list and returns a pointer to it.","pos":[19081,19155]},{"pos":[19199,19209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>TYPE<ept id=\"p1\">*</ept>","pos":[19213,19219],"source":"*TYPE*"},{"content":"Template parameter specifying the type of elements in the list.","pos":[19223,19286]},{"pos":[19296,19308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The element that was at the tail of the list.","pos":[19312,19357]},{"pos":[19367,19374],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must ensure that the list is not empty before calling <ph id=\"ph1\">`RemoveTail`</ph>.","pos":[19378,19449],"source":"You must ensure that the list is not empty before calling `RemoveTail`."},{"content":"If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[19450,19545]},{"content":"Use <bpt id=\"p1\">[</bpt>IsEmpty<ept id=\"p1\">](#clist__isempty)</ept> to verify that the list contains elements.","pos":[19546,19619],"source":" Use [IsEmpty](#clist__isempty) to verify that the list contains elements."},{"pos":[19629,19636],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[19640,19720],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#54<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_20.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#54](../../mfc/codesnippet/cpp/clist-class_20.cpp)]"},{"pos":[19730,19771],"content":"<bpt id=\"p1\">&lt;a name=\"clist__setat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CList::SetAt","linkify":"<a name=\"clist__setat\"></a>  CList::SetAt","source":"<a name=\"clist__setat\"></a>  CList::SetAt"},{"pos":[19775,19829],"content":"A variable of type <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> is a key for the list.","source":"A variable of type **POSITION** is a key for the list."},{"pos":[19906,19916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> of the element to be set.","pos":[19929,19971],"source":" The **POSITION** of the element to be set."},{"content":"Template parameter specifying the type of the list element (can be a reference).","pos":[19992,20072]},{"content":"The element to be added to the list.","pos":[20095,20131]},{"pos":[20141,20148],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It is not the same as an index, and you cannot operate on a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value yourself.","pos":[20152,20240],"source":"It is not the same as an index, and you cannot operate on a **POSITION** value yourself."},{"content":"<ph id=\"ph1\">`SetAt`</ph> writes the element to the specified position in the list.","pos":[20241,20306],"source":"`SetAt` writes the element to the specified position in the list."},{"content":"You must ensure that your <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value represents a valid position in the list.","pos":[20313,20398],"source":"You must ensure that your **POSITION** value represents a valid position in the list."},{"content":"If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.","pos":[20399,20490]},{"pos":[20500,20507],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20511,20591],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCollections#55<ept id=\"p2\">](../../mfc/codesnippet/cpp/clist-class_21.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCollections#55](../../mfc/codesnippet/cpp/clist-class_21.cpp)]"},{"pos":[20600,20608],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample COLLECT<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[20612,20662],"source":"[MFC Sample COLLECT](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[20665,20720],"source":" [CObject Class](../../mfc/reference/cobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[20723,20772],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMap Class<ept id=\"p1\">](../../mfc/reference/cmap-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[20775,20824],"source":" [CMap Class](../../mfc/reference/cmap-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CArray Class<ept id=\"p1\">](../../mfc/reference/carray-class.md)</ept>","pos":[20827,20879],"source":" [CArray Class](../../mfc/reference/carray-class.md)"}],"content":"---\ntitle: \"CList Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CList\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"lists\"\n  - \"lists, base class for\"\n  - \"CList class\"\nms.assetid: 6f6273c3-c8f6-47f5-ac2a-0a950379ae5d\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CList Class\nSupports ordered lists of nonunique objects accessible sequentially or by value.  \n  \n## Syntax  \n  \n```  \ntemplate<class TYPE, class ARG_TYPE = const TYPE&>  \nclass CList : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CList::CList](#clist__clist)|Constructs an empty ordered list.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CList::AddHead](#clist__addhead)|Adds an element (or all the elements in another list) to the head of the list (makes a new head).|  \n|[CList::AddTail](#clist__addtail)|Adds an element (or all the elements in another list) to the tail of the list (makes a new tail).|  \n|[CList::Find](#clist__find)|Gets the position of an element specified by pointer value.|  \n|[CList::FindIndex](#clist__findindex)|Gets the position of an element specified by a zero-based index.|  \n|[CList::GetAt](#clist__getat)|Gets the element at a given position.|  \n|[CList::GetCount](#clist__getcount)|Returns the number of elements in this list.|  \n|[CList::GetHead](#clist__gethead)|Returns the head element of the list (cannot be empty).|  \n|[CList::GetHeadPosition](#clist__getheadposition)|Returns the position of the head element of the list.|  \n|[CList::GetNext](#clist__getnext)|Gets the next element for iterating.|  \n|[CList::GetPrev](#clist__getprev)|Gets the previous element for iterating.|  \n|[CList::GetSize](#clist__getsize)|Returns the number of elements in this list.|  \n|[CList::GetTail](#clist__gettail)|Returns the tail element of the list (cannot be empty).|  \n|[CList::GetTailPosition](#clist__gettailposition)|Returns the position of the tail element of the list.|  \n|[CList::InsertAfter](#clist__insertafter)|Inserts a new element after a given position.|  \n|[CList::InsertBefore](#clist__insertbefore)|Inserts a new element before a given position.|  \n|[CList::IsEmpty](#clist__isempty)|Tests for the empty list condition (no elements).|  \n|[CList::RemoveAll](#clist__removeall)|Removes all the elements from this list.|  \n|[CList::RemoveAt](#clist__removeat)|Removes an element from this list, specified by position.|  \n|[CList::RemoveHead](#clist__removehead)|Removes the element from the head of the list.|  \n|[CList::RemoveTail](#clist__removetail)|Removes the element from the tail of the list.|  \n|[CList::SetAt](#clist__setat)|Sets the element at a given position.|  \n  \n#### Parameters  \n `TYPE`  \n Type of object stored in the list.  \n  \n `ARG` *_* `TYPE`  \n Type used to reference objects stored in the list. Can be a reference.  \n  \n## Remarks  \n `CList` lists behave like doubly-linked lists.  \n  \n A variable of type **POSITION** is a key for the list. You can use a **POSITION** variable as an iterator to traverse a list sequentially and as a bookmark to hold a place. A position is not the same as an index, however.  \n  \n Element insertion is very fast at the list head, at the tail, and at a known **POSITION**. A sequential search is necessary to look up an element by value or index. This search can be slow if the list is long.  \n  \n If you need a dump of individual elements in the list, you must set the depth of the dump context to 1 or greater.  \n  \n Certain member functions of this class call global helper functions that must be customized for most uses of the `CList` class. See [Collection Class Helpers](../../mfc/reference/collection-class-helpers.md) in the \"Macros and Globals\" section.  \n  \n For more information on using `CList`, see the article [Collections](../../mfc/collections.md).  \n  \n## Example  \n [!code-cpp[NVC_MFCCollections#35](../../mfc/codesnippet/cpp/clist-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CList`  \n  \n## Requirements  \n **Header:** afxtempl.h  \n  \n##  <a name=\"clist__addhead\"></a>  CList::AddHead  \n Adds a new element or list of elements to the head of this list.  \n  \n```  \nPOSITION AddHead(ARG_TYPE newElement);\n\n \nvoid AddHead(CList* pNewList);\n```  \n  \n### Parameters  \n `ARG_TYPE`  \n Template parameter specifying the type of the list element (can be a reference).  \n  \n `newElement`  \n The new element.  \n  \n `pNewList`  \n A pointer to another `CList` list. The elements in `pNewList` will be added to this list.  \n  \n### Return Value  \n The first version returns the **POSITION** value of the newly inserted element.  \n  \n### Remarks  \n The list can be empty before the operation.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#36](../../mfc/codesnippet/cpp/clist-class_2.cpp)]  \n  \n##  <a name=\"clist__addtail\"></a>  CList::AddTail  \n Adds a new element or list of elements to the tail of this list.  \n  \n```  \nPOSITION AddTail(ARG_TYPE newElement);\n\n \nvoid AddTail(CList* pNewList);\n```  \n  \n### Parameters  \n `ARG_TYPE`  \n Template parameter specifying the type of the list element (can be a reference).  \n  \n `newElement`  \n The element to be added to this list.  \n  \n `pNewList`  \n A pointer to another `CList` list. The elements in `pNewList` will be added to this list.  \n  \n### Return Value  \n The first version returns the **POSITION** value of the newly inserted element.  \n  \n### Remarks  \n The list can be empty before the operation.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#37](../../mfc/codesnippet/cpp/clist-class_3.cpp)]  \n  \n##  <a name=\"clist__clist\"></a>  CList::CList  \n Constructs an empty ordered list.  \n  \n```  \nCList(INT_PTR nBlockSize = 10);\n```  \n  \n### Parameters  \n `nBlockSize`  \n The memory-allocation granularity for extending the list.  \n  \n### Remarks  \n As the list grows, memory is allocated in units of `nBlockSize` entries.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#38](../../mfc/codesnippet/cpp/clist-class_4.cpp)]  \n  \n##  <a name=\"clist__find\"></a>  CList::Find  \n Searches the list sequentially to find the first element matching the specified `searchValue`.  \n  \n```  \nPOSITION Find(\n    ARG_TYPE searchValue,  \n    POSITION startAfter = NULL) const;\n\n \n```  \n  \n### Parameters  \n `ARG_TYPE`  \n Template parameter specifying the type of the list element (can be a reference).  \n  \n `searchValue`  \n The value to be found in the list.  \n  \n `startAfter`  \n The start position for the search. If no value is specified, the search begins with the head element.  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the object is not found.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#39](../../mfc/codesnippet/cpp/clist-class_5.cpp)]  \n  \n##  <a name=\"clist__findindex\"></a>  CList::FindIndex  \n Uses the value of `nIndex` as an index into the list.  \n  \n```  \nPOSITION FindIndex(INT_PTR nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n The zero-based index of the list element to be found.  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if `nIndex` is negative or too large.  \n  \n### Remarks  \n It starts a sequential scan from the head of the list, stopping on the *n*th element.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#40](../../mfc/codesnippet/cpp/clist-class_6.cpp)]  \n  \n##  <a name=\"clist__getat\"></a>  CList::GetAt  \n Gets the list element at a given position.  \n  \n```  \nTYPE& GetAt(POSITION position);\n\n \nconst TYPE& GetAt(POSITION position) const;\n\n \n```  \n  \n### Parameters  \n *TYPE*  \n Template parameter specifying the type of object in the list.  \n  \n *position*  \n The position in the list of the element to get.  \n  \n### Return Value  \n See the return value description for `GetHead`.  \n  \n### Remarks  \n `GetAt` returns the element (or a reference to the element) associated with a given position. It is not the same as an index, and you cannot operate on a **POSITION** value yourself. A variable of type **POSITION** is a key for the list.  \n  \n You must ensure that your **POSITION** value represents a valid position in the list. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.  \n  \n### Example  \n  See the example for [CList::GetHeadPosition](#clist__getheadposition).  \n  \n##  <a name=\"clist__getcount\"></a>  CList::GetCount  \n Gets the number of elements in this list.  \n  \n```  \nINT_PTR GetCount() const;\n\n \n```  \n  \n### Return Value  \n An integer value containing the element count.  \n  \n### Remarks  \n Calling this method will generate the same result as the [CList::GetSize](#clist__getsize) method.  \n  \n### Example  \n  See the example for [CList::RemoveHead](#clist__removehead).  \n  \n##  <a name=\"clist__gethead\"></a>  CList::GetHead  \n Gets the head element (or a reference to the head element) of this list.  \n  \n```  \nconst TYPE& GetHead() const;\n\n \n \nTYPE& GetHead();\n```  \n  \n### Parameters  \n *TYPE*  \n Template parameter specifying the type of object in the list.  \n  \n### Return Value  \n If the list is **const**, `GetHead` returns a copy of the element at the head of the list. This allows the function to be used only on the right side of an assignment statement and protects the list from modification.  \n  \n If the list is not **const**, `GetHead` returns a reference to the element at the head of the list. This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.  \n  \n### Remarks  \n You must ensure that the list is not empty before calling `GetHead`. If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts. Use [IsEmpty](#clist__isempty) to verify that the list contains elements.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#41](../../mfc/codesnippet/cpp/clist-class_7.cpp)]  \n  \n##  <a name=\"clist__getheadposition\"></a>  CList::GetHeadPosition  \n Gets the position of the head element of this list.  \n  \n```  \nPOSITION GetHeadPosition() const;\n\n \n```  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the list is empty.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#42](../../mfc/codesnippet/cpp/clist-class_8.cpp)]  \n  \n##  <a name=\"clist__getnext\"></a>  CList::GetNext  \n Gets the list element identified by `rPosition`, then sets `rPosition` to the **POSITION** value of the next entry in the list.  \n  \n```  \nTYPE& GetNext(POSITION& rPosition);\n\n \nconst TYPE& GetNext(POSITION& rPosition) const;\n\n \n```  \n  \n### Parameters  \n *TYPE*  \n Template parameter specifying the type of the elements in the list.  \n  \n `rPosition`  \n A reference to a **POSITION** value returned by a previous `GetNext`, [GetHeadPosition](#clist__getheadposition), or other member function call.  \n  \n### Return Value  \n If the list is **const**, `GetNext` returns a copy of an element of the list. This allows the function to be used only on the right side of an assignment statement and protects the list from modification.  \n  \n If the list is not **const**, `GetNext` returns a reference to an element of the list. This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.  \n  \n### Remarks  \n You can use `GetNext` in a forward iteration loop if you establish the initial position with a call to `GetHeadPosition` or **Find**.  \n  \n You must ensure that your **POSITION** value represents a valid position in the list. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.  \n  \n If the retrieved element is the last in the list, then the new value of `rPosition` is set to **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#43](../../mfc/codesnippet/cpp/clist-class_9.cpp)]  \n  \n##  <a name=\"clist__getprev\"></a>  CList::GetPrev  \n Gets the list element identified by `rPosition`, then sets `rPosition` to the **POSITION** value of the previous entry in the list.  \n  \n```  \nTYPE& GetPrev(POSITION& rPosition);\n\n \nconst TYPE& GetPrev(POSITION& rPosition) const;\n\n \n```  \n  \n### Parameters  \n *TYPE*  \n Template parameter specifying the type of the elements in the list.  \n  \n `rPosition`  \n A reference to a **POSITION** value returned by a previous `GetPrev` or other member function call.  \n  \n### Return Value  \n If the list is **const**, `GetPrev` returns a copy of the element at the head of the list. This allows the function to be used only on the right side of an assignment statement and protects the list from modification.  \n  \n If the list is not **const**, `GetPrev` returns a reference to an element of the list. This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.  \n  \n### Remarks  \n You can use `GetPrev` in a reverse iteration loop if you establish the initial position with a call to `GetTailPosition` or **Find**.  \n  \n You must ensure that your **POSITION** value represents a valid position in the list. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.  \n  \n If the retrieved element is the first in the list, then the new value of `rPosition` is set to **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#44](../../mfc/codesnippet/cpp/clist-class_10.cpp)]  \n  \n##  <a name=\"clist__getsize\"></a>  CList::GetSize  \n Returns the number of list elements.  \n  \n```  \nINT_PTR GetSize() const;\n\n \n```  \n  \n### Return Value  \n The number of items in the list.  \n  \n### Remarks  \n Call this method to retrieve the number of elements in the list.  Calling this method will generate the same result as the [CList::GetCount](#clist__getcount) method.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#45](../../mfc/codesnippet/cpp/clist-class_11.cpp)]  \n  \n##  <a name=\"clist__gettail\"></a>  CList::GetTail  \n Gets the `CObject` pointer that represents the tail element of this list.  \n  \n```  \nTYPE& GetTail();\n\n \nconst TYPE& GetTail() const;\n\n \n```  \n  \n### Parameters  \n *TYPE*  \n Template parameter specifying the type of elements in the list.  \n  \n### Return Value  \n See the return value description for [GetHead](../../mfc/reference/coblist-class.md#coblist__gethead).  \n  \n### Remarks  \n You must ensure that the list is not empty before calling `GetTail`. If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts. Use [IsEmpty](../../mfc/reference/coblist-class.md#coblist__isempty) to verify that the list contains elements.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#46](../../mfc/codesnippet/cpp/clist-class_12.cpp)]  \n  \n##  <a name=\"clist__gettailposition\"></a>  CList::GetTailPosition  \n Gets the position of the tail element of this list; **NULL** if the list is empty.  \n  \n```  \nPOSITION GetTailPosition() const;\n\n \n```  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration or object pointer retrieval; **NULL** if the list is empty.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#47](../../mfc/codesnippet/cpp/clist-class_13.cpp)]  \n  \n##  <a name=\"clist__insertafter\"></a>  CList::InsertAfter  \n Adds an element to this list after the element at the specified position.  \n  \n```  \nPOSITION InsertAfter(\n    POSITION position, ARG_TYPE newElement);\n```  \n  \n### Parameters  \n *position*  \n A **POSITION** value returned by a previous `GetNext`, `GetPrev`, or **Find** member function call.  \n  \n `ARG_TYPE`  \n Template parameter specifying the type of the list element.  \n  \n `newElement`  \n The element to be added to this list.  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration or list element retrieval.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#48](../../mfc/codesnippet/cpp/clist-class_14.cpp)]  \n  \n##  <a name=\"clist__insertbefore\"></a>  CList::InsertBefore  \n Adds an element to this list before the element at the specified position.  \n  \n```  \nPOSITION InsertBefore(\n    POSITION position, ARG_TYPE newElement);\n```  \n  \n### Parameters  \n *position*  \n A **POSITION** value returned by a previous `GetNext`, `GetPrev`, or **Find** member function call.  \n  \n `ARG_TYPE`  \n Template parameter specifying the type of the list element (can be a reference).  \n  \n `newElement`  \n The element to be added to this list.  \n  \n### Return Value  \n A **POSITION** value that can be used for iteration or list element retrieval.  \n  \n### Remarks  \n If *position* is **NULL**, the element is inserted at the head of the list.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#49](../../mfc/codesnippet/cpp/clist-class_15.cpp)]  \n  \n##  <a name=\"clist__isempty\"></a>  CList::IsEmpty  \n Indicates whether this list contains no elements.  \n  \n```  \nBOOL IsEmpty() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if this list is empty; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#50](../../mfc/codesnippet/cpp/clist-class_16.cpp)]  \n  \n##  <a name=\"clist__removeall\"></a>  CList::RemoveAll  \n Removes all the elements from this list and frees the associated memory.  \n  \n```  \nvoid RemoveAll();\n```  \n  \n### Remarks  \n No error is generated if the list is already empty.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#51](../../mfc/codesnippet/cpp/clist-class_17.cpp)]  \n  \n##  <a name=\"clist__removeat\"></a>  CList::RemoveAt  \n Removes the specified element from this list.  \n  \n```  \nvoid RemoveAt(POSITION position);\n```  \n  \n### Parameters  \n *position*  \n The position of the element to be removed from the list.  \n  \n### Remarks  \n You must ensure that your **POSITION** value represents a valid position in the list. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#52](../../mfc/codesnippet/cpp/clist-class_18.cpp)]  \n  \n##  <a name=\"clist__removehead\"></a>  CList::RemoveHead  \n Removes the element from the head of the list and returns a pointer to it.  \n  \n```  \nTYPE RemoveHead();\n```  \n  \n### Parameters  \n *TYPE*  \n Template parameter specifying the type of elements in the list.  \n  \n### Return Value  \n The element previously at the head of the list.  \n  \n### Remarks  \n You must ensure that the list is not empty before calling `RemoveHead`. If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts. Use [IsEmpty](#clist__isempty) to verify that the list contains elements.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#53](../../mfc/codesnippet/cpp/clist-class_19.cpp)]  \n  \n##  <a name=\"clist__removetail\"></a>  CList::RemoveTail  \n Removes the element from the tail of the list and returns a pointer to it.  \n  \n```  \nTYPE RemoveTail();\n```  \n  \n### Parameters  \n *TYPE*  \n Template parameter specifying the type of elements in the list.  \n  \n### Return Value  \n The element that was at the tail of the list.  \n  \n### Remarks  \n You must ensure that the list is not empty before calling `RemoveTail`. If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts. Use [IsEmpty](#clist__isempty) to verify that the list contains elements.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#54](../../mfc/codesnippet/cpp/clist-class_20.cpp)]  \n  \n##  <a name=\"clist__setat\"></a>  CList::SetAt  \n A variable of type **POSITION** is a key for the list.  \n  \n```  \nvoid SetAt(\n    POSITION pos, ARG_TYPE newElement);\n```  \n  \n### Parameters  \n `pos`  \n The **POSITION** of the element to be set.  \n  \n `ARG_TYPE`  \n Template parameter specifying the type of the list element (can be a reference).  \n  \n `newElement`  \n The element to be added to the list.  \n  \n### Remarks  \n It is not the same as an index, and you cannot operate on a **POSITION** value yourself. `SetAt` writes the element to the specified position in the list.  \n  \n You must ensure that your **POSITION** value represents a valid position in the list. If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#55](../../mfc/codesnippet/cpp/clist-class_21.cpp)]  \n  \n## See Also  \n [MFC Sample COLLECT](../../visual-cpp-samples.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CMap Class](../../mfc/reference/cmap-class.md)   \n [CArray Class](../../mfc/reference/carray-class.md)\n"}