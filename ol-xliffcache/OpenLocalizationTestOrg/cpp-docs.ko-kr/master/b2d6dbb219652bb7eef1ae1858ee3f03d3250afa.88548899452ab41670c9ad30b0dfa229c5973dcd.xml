{"nodes":[{"pos":[12,56],"content":"binomial_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"binomial_distribution Class | Microsoft Docs","pos":[0,44]}]},{"pos":[859,886],"content":"binomial_distribution Class","linkify":"binomial_distribution Class","nodes":[{"content":"binomial_distribution Class","pos":[0,27]}]},{"content":"Generates a binomial distribution.","pos":[887,921]},{"pos":[930,936],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1638,1648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The integer result type, defaults to <ph id=\"ph1\">`int`</ph>.","pos":[1665,1708],"source":" The integer result type, defaults to `int`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1709,1776],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"pos":[1785,1792],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class describes a distribution that produces values of a user-specified integral type, or type <ph id=\"ph1\">`int`</ph> if none is provided, distributed according to the Binomial Distribution discrete probability function.","pos":[1796,2012],"source":"The template class describes a distribution that produces values of a user-specified integral type, or type `int` if none is provided, distributed according to the Binomial Distribution discrete probability function."},{"content":"The following table links to articles about individual members.","pos":[2013,2076]},{"pos":[2100,2193],"content":"<bpt id=\"p1\">[</bpt>binomial_distribution::binomial_distribution<ept id=\"p1\">](#binomial_distribution__binomial_distribution)</ept>","source":"[binomial_distribution::binomial_distribution](#binomial_distribution__binomial_distribution)"},{"pos":[2319,2390],"content":"<bpt id=\"p1\">[</bpt>binomial_distribution::param_type<ept id=\"p1\">](#binomial_distribution__param_type)</ept>","source":"[binomial_distribution::param_type](#binomial_distribution__param_type)"},{"pos":[2398,2518],"content":"The property members <ph id=\"ph1\">`t()`</ph> and <ph id=\"ph2\">`p()`</ph> return the currently stored distribution parameter values <ph id=\"ph3\">`t`</ph> and <ph id=\"ph4\">`p`</ph> respectively.","source":"The property members `t()` and `p()` return the currently stored distribution parameter values `t` and `p` respectively."},{"pos":[2525,2639],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2646,2838],"content":"For detailed information about the binomial distribution discrete probability function, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>Binomial Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=398469)</ept>.","source":"For detailed information about the binomial distribution discrete probability function, see the Wolfram MathWorld article [Binomial Distribution](http://go.microsoft.com/fwlink/LinkId=398469)."},{"pos":[2847,2854],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4430,4436],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"content":"First run:","pos":[4440,4450]},{"content":"Second run:","pos":[4973,4984]},{"content":"Third run:","pos":[5510,5520]},{"pos":[6034,6046],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[6050,6071],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[6078,6096],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[6106,6211],"content":"<bpt id=\"p1\">&lt;a name=\"binomial_distribution__binomial_distribution\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  binomial_distribution::binomial_distribution","linkify":"<a name=\"binomial_distribution__binomial_distribution\"></a>  binomial_distribution::binomial_distribution","source":"<a name=\"binomial_distribution__binomial_distribution\"></a>  binomial_distribution::binomial_distribution"},{"content":"Constructs the distribution.","pos":[6215,6243]},{"pos":[6390,6400],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`t`</ph> distribution parameter.","pos":[6411,6442],"source":" The `t` distribution parameter."},{"content":"The <ph id=\"ph1\">`p`</ph> distribution parameter.","pos":[6456,6487],"source":" The `p` distribution parameter."},{"content":"The parameter structure used to construct the distribution.","pos":[6504,6563]},{"pos":[6573,6580],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6584,6629],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0 ≤ t`</ph> and <ph id=\"ph2\">`0.0 ≤ p ≤ 1.0`</ph>","source":"**Precondition:** `0 ≤ t` and `0.0 ≤ p ≤ 1.0`"},{"pos":[6636,6769],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`p`</ph> value holds the value <ph id=\"ph2\">`p`</ph> and whose stored <ph id=\"ph3\">`t`</ph> value holds the value <ph id=\"ph4\">`t`</ph>.","source":"The first constructor constructs an object whose stored `p` value holds the value `p` and whose stored `t` value holds the value `t`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[6776,6872],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[6873,6988],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[6995,7122],"content":"For more information and a code example, see <bpt id=\"p1\">[</bpt>binomial_distribution Class<ept id=\"p1\">](../standard-library/binomial-distribution-class.md)</ept>.","source":"For more information and a code example, see [binomial_distribution Class](../standard-library/binomial-distribution-class.md)."},{"pos":[7132,7215],"content":"<bpt id=\"p1\">&lt;a name=\"binomial_distribution__param_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  binomial_distribution::param_type","linkify":"<a name=\"binomial_distribution__param_type\"></a>  binomial_distribution::param_type","source":"<a name=\"binomial_distribution__param_type\"></a>  binomial_distribution::param_type"},{"content":"Stores all the parameters of the distribution.","pos":[7219,7265]},{"pos":[7582,7592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[7596,7695],"content":"See parent topic <bpt id=\"p1\">[</bpt>binomial_distribution Class<ept id=\"p1\">](../standard-library/binomial-distribution-class.md)</ept>.","source":"See parent topic [binomial_distribution Class](../standard-library/binomial-distribution-class.md)."},{"pos":[7705,7712],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7716,7761],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0 ≤ t`</ph> and <ph id=\"ph2\">`0.0 ≤ p ≤ 1.0`</ph>","source":"**Precondition:** `0 ≤ t` and `0.0 ≤ p ≤ 1.0`"},{"pos":[7768,8011],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"pos":[8020,8028],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[8032,8074],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>","source":"[\\<random>](../standard-library/random.md)"}],"content":"---\ntitle: \"binomial_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::tr1::binomial_distribution\"\n  - \"std.tr1.binomial_distribution\"\n  - \"tr1::binomial_distribution\"\n  - \"random/std::tr1::binomial_distribution\"\n  - \"tr1.binomial_distribution\"\n  - \"binomial_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"binomial_distribution class [TR1]\"\n  - \"binomial_distribution class\"\nms.assetid: b7c8a26a-da8c-45a5-a3a8-208f7a3609ce\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# binomial_distribution Class\nGenerates a binomial distribution.  \n  \n## Syntax  \n```  \nclass binomial_distribution  \n   {  \n   public:  // types  \n   typedef IntType result_type;  \n   struct param_type;  // constructors and reset functions  \n   explicit binomial_distribution(IntType t = 1, double p = 0.5);\n   explicit binomial_distribution(const param_type& parm);\n   void reset();\n   // generating functions  \n   template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   // property functions  \n   IntType t() const;\n   double p() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;\n   };  \n```  \n#### Parameters  \n `IntType`  \n The integer result type, defaults to `int`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type, or type `int` if none is provided, distributed according to the Binomial Distribution discrete probability function. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[binomial_distribution::binomial_distribution](#binomial_distribution__binomial_distribution)|`binomial_distribution::t`|`binomial_distribution::param`|  \n|`binomial_distribution::operator()`|`binomial_distribution::p`|[binomial_distribution::param_type](#binomial_distribution__param_type)|  \n  \n The property members `t()` and `p()` return the currently stored distribution parameter values `t` and `p` respectively.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the binomial distribution discrete probability function, see the Wolfram MathWorld article [Binomial Distribution](http://go.microsoft.com/fwlink/LinkId=398469).  \n  \n## Example  \n  \n```cpp  \n // compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const int t, const double p, const int& s) {  \n  \n    // uncomment to use a non-deterministic seed  \n    //    std::random_device rd;  \n    //    std::mt19937 gen(rd());  \n    std::mt19937 gen(1729);  \n  \n    std::binomial_distribution<> distr(t, p);  \n  \n    std::cout << std::endl;  \n    std::cout << \"p == \" << distr.p() << std::endl;  \n    std::cout << \"t == \" << distr.t() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<int, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Histogram for \" << s << \" samples:\" << std::endl;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::setw(5) << elem.first << ' ' << std::string(elem.second, ':') << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    int    t_dist = 1;  \n    double p_dist = 0.5;  \n    int    samples = 100;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter an integer value for t distribution (where 0 <= t): \";  \n    std::cin >> t_dist;  \n    std::cout << \"Enter a double value for p distribution (where 0.0 <= p <= 1.0): \";  \n    std::cin >> p_dist;  \n    std::cout << \"Enter an integer value for a sample count: \";  \n    std::cin >> samples;  \n  \n    test(t_dist, p_dist, samples);  \n}  \n```  \n  \n## Output  \n First run:  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter an integer value for t distribution (where 0 <= t): 22  \nEnter a double value for p distribution (where 0.0 <= p <= 1.0): .25  \nEnter an integer value for a sample count: 100  \n \np == 0.25  \nt == 22  \nHistogram for 100 samples:  \n    1 :  \n    2 ::  \n    3 :::::::::::::  \n    4 ::::::::::::::  \n    5 :::::::::::::::::::::::::  \n    6 ::::::::::::::::::  \n    7 :::::::::::::  \n    8 ::::::  \n    9 ::::::  \n    11 :  \n    12 :  \n```  \n  \n Second run:  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter an integer value for t distribution (where 0 <= t): 22  \nEnter a double value for p distribution (where 0.0 <= p <= 1.0): .5  \nEnter an integer value for a sample count: 100  \n \np == 0.5  \nt == 22  \nHistogram for 100 samples:  \n    6 :  \n    7 ::  \n    8 :::::::::  \n    9 ::::::::::  \n    10 ::::::::::::::::  \n    11 :::::::::::::::::::  \n    12 :::::::::::  \n    13 :::::::::::::  \n    14 :::::::::::::::  \n    15 ::  \n    16 ::  \n```  \n  \n Third run:  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter an integer value for t distribution (where 0 <= t): 22  \nEnter a double value for p distribution (where 0.0 <= p <= 1.0): .75  \nEnter an integer value for a sample count: 100  \n \np == 0.75  \nt == 22  \nHistogram for 100 samples:  \n    13 ::::  \n    14 :::::::::::  \n    15 :::::::::::::::  \n    16 :::::::::::::::::::::  \n    17 ::::::::::::::  \n    18 :::::::::::::::::  \n    19 :::::::::::  \n    20 ::::::  \n    21 :  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"binomial_distribution__binomial_distribution\"></a>  binomial_distribution::binomial_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit binomial_distribution(IntType t = 1, double p = 0.5);\n\n \nexplicit binomial_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `t`  \n The `t` distribution parameter.  \n  \n `p`  \n The `p` distribution parameter.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0 ≤ t` and `0.0 ≤ p ≤ 1.0`  \n  \n The first constructor constructs an object whose stored `p` value holds the value `p` and whose stored `t` value holds the value `t`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n For more information and a code example, see [binomial_distribution Class](../standard-library/binomial-distribution-class.md).  \n  \n##  <a name=\"binomial_distribution__param_type\"></a>  binomial_distribution::param_type  \n Stores all the parameters of the distribution.  \n```cpp  \nstruct param_type {  \n   typedef binomial_distribution<IntType> distribution_type;  \n   param_type(IntType t = 1, double p = 0.5);\n   IntType t() const;\n   double p() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```  \n### Parameters  \n See parent topic [binomial_distribution Class](../standard-library/binomial-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0 ≤ t` and `0.0 ≤ p ≤ 1.0`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n\n"}