{"nodes":[{"pos":[12,58],"content":"_InterlockedAddLargeStatistic | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_InterlockedAddLargeStatistic | Microsoft Docs","pos":[0,46]}]},{"content":"_InterlockedAddLargeStatistic","pos":[768,797]},{"content":"Microsoft Specific","pos":[800,818]},{"content":"Performs an interlocked addition in which the first operand is a 64-bit value.","pos":[827,905]},{"content":"Syntax","pos":[914,920]},{"content":"Parameters","pos":[1037,1047]},{"content":"[in, out]","pos":[1051,1060]},{"content":"A pointer to the first operand to the add operation.","pos":[1073,1125]},{"content":"The value pointed to is replaced by the result of the addition.","pos":[1126,1189]},{"content":"[in]","pos":[1196,1200]},{"content":"The second operand; value to add to the first operand.","pos":[1212,1266]},{"content":"Return Value","pos":[1275,1287]},{"content":"The value of the second operand.","pos":[1291,1323]},{"content":"Requirements","pos":[1332,1344]},{"content":"Intrinsic","pos":[1351,1360]},{"content":"Architecture","pos":[1361,1373]},{"content":"x86","pos":[1449,1452]},{"pos":[1460,1487],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>intrin.h&gt;","source":"**Header file** \\<intrin.h>"},{"content":"Remarks","pos":[1496,1503]},{"content":"This intrinsic is not atomic because it is implemented as two separate locked instructions.","pos":[1507,1598]},{"content":"An atomic 64-bit read that occurs on another thread during the execution of this intrinsic could result in an inconsistent value being read.","pos":[1599,1739]},{"content":"This function behaves as a read-write barrier.","pos":[1746,1792]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>_ReadWriteBarrier<ept id=\"p1\">](../intrinsics/readwritebarrier.md)</ept>.","pos":[1793,1874],"source":" For more information, see [_ReadWriteBarrier](../intrinsics/readwritebarrier.md)."},{"content":"END Microsoft Specific","pos":[1883,1905]},{"content":"See Also","pos":[1914,1922]},{"content":"Compiler Intrinsics","pos":[1927,1946]},{"content":"Conflicts with the x86 Compiler","pos":[1991,2022]}],"content":"---\ntitle: \"_InterlockedAddLargeStatistic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_InterlockedAddLargeStatistic\"\n  - \"_InterlockedAddLargeStatistic_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"_InterlockedAddLargeStatistic intrinsic\"\n  - \"InterlockedAddLargeStatistic intrinsic\"\nms.assetid: 2802e74b-bcee-46e4-b562-894908d44409\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _InterlockedAddLargeStatistic\n**Microsoft Specific**  \n  \n Performs an interlocked addition in which the first operand is a 64-bit value.  \n  \n## Syntax  \n  \n```  \nlong _InterlockedAddLargeStatistic(  \n   __int64 volatile * Addend,  \n   long Value  \n);  \n```  \n  \n#### Parameters  \n [in, out] `Addend`  \n A pointer to the first operand to the add operation. The value pointed to is replaced by the result of the addition.  \n  \n [in] `Value`  \n The second operand; value to add to the first operand.  \n  \n## Return Value  \n The value of the second operand.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`_InterlockedAddLargeStatistic`|x86|  \n  \n **Header file** \\<intrin.h>  \n  \n## Remarks  \n This intrinsic is not atomic because it is implemented as two separate locked instructions. An atomic 64-bit read that occurs on another thread during the execution of this intrinsic could result in an inconsistent value being read.  \n  \n This function behaves as a read-write barrier. For more information, see [_ReadWriteBarrier](../intrinsics/readwritebarrier.md).  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)   \n [Conflicts with the x86 Compiler](../build/conflicts-with-the-x86-compiler.md)"}