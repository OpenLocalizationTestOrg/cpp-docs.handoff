{"nodes":[{"pos":[12,59],"content":"TN032: MFC Exception Mechanism | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"TN032: MFC Exception Mechanism | Microsoft Docs","pos":[0,47]}]},{"content":"TN032: MFC Exception Mechanism","pos":[663,693]},{"content":"Previous versions of Visual C++ did not support the standard C++ exception mechanism, and MFC provided macros <bpt id=\"p1\">**</bpt>TRY/CATCH/THROW<ept id=\"p1\">**</ept> that were used instead.","pos":[694,847],"source":"Previous versions of Visual C++ did not support the standard C++ exception mechanism, and MFC provided macros **TRY/CATCH/THROW** that were used instead."},{"content":"This version of Visual C++ fully supports C++ exceptions.","pos":[848,905]},{"content":"This note covered some of the advanced implementation details of the previous macros including how to automatically cleanup stack based objects.","pos":[906,1050]},{"content":"Because C++ exceptions support stack unwinding by default, this technical note is no longer necessary.","pos":[1051,1153]},{"pos":[1160,1365],"content":"Refer to <bpt id=\"p1\">[</bpt>Exceptions: Using MFC Macros and C++ Exceptions<ept id=\"p1\">](../mfc/exceptions-using-mfc-macros-and-cpp-exceptions.md)</ept> for more information on the differences between the MFC macros and the new C++ keywords.","source":"Refer to [Exceptions: Using MFC Macros and C++ Exceptions](../mfc/exceptions-using-mfc-macros-and-cpp-exceptions.md) for more information on the differences between the MFC macros and the new C++ keywords."},{"content":"See Also","pos":[1374,1382]},{"content":"Technical Notes by Number","pos":[1387,1412]},{"content":"Technical Notes by Category","pos":[1456,1483]}],"content":"---\ntitle: \"TN032: MFC Exception Mechanism | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc.mfc.exceptions\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"TN032\"\n  - \"MFC, exceptions\"\n  - \"CException class, using\"\nms.assetid: 0271f0aa-82cb-47a2-b7ea-e88126fc7e43\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# TN032: MFC Exception Mechanism\nPrevious versions of Visual C++ did not support the standard C++ exception mechanism, and MFC provided macros **TRY/CATCH/THROW** that were used instead. This version of Visual C++ fully supports C++ exceptions. This note covered some of the advanced implementation details of the previous macros including how to automatically cleanup stack based objects. Because C++ exceptions support stack unwinding by default, this technical note is no longer necessary.  \n  \n Refer to [Exceptions: Using MFC Macros and C++ Exceptions](../mfc/exceptions-using-mfc-macros-and-cpp-exceptions.md) for more information on the differences between the MFC macros and the new C++ keywords.  \n  \n## See Also  \n [Technical Notes by Number](../mfc/technical-notes-by-number.md)   \n [Technical Notes by Category](../mfc/technical-notes-by-category.md)\n\n"}