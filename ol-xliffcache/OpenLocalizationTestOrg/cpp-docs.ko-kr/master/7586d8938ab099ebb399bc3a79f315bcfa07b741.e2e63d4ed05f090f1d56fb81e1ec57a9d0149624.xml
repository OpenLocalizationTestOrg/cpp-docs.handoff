{"nodes":[{"pos":[12,48],"content":"ptr::CreateInstance | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ptr::CreateInstance | Microsoft Docs","pos":[0,36]}]},{"content":"ptr::CreateInstance","pos":[717,736]},{"pos":[737,793],"content":"Creates an instance of a COM object within a <ph id=\"ph1\">`com::ptr`</ph>.","source":"Creates an instance of a COM object within a `com::ptr`."},{"content":"Syntax","pos":[802,808]},{"content":"Parameters","pos":[1530,1540]},{"content":"A <ph id=\"ph1\">`ProgID`</ph> string.","pos":[1556,1574],"source":" A `ProgID` string."},{"content":"Pointer to the aggregate object's IUnknown interface (the controlling IUnknown).","pos":[1593,1673]},{"content":"If <ph id=\"ph1\">`pouter`</ph> is not specified, <ph id=\"ph2\">`NULL`</ph> is used.","pos":[1674,1719],"source":" If `pouter` is not specified, `NULL` is used."},{"content":"Context in which the code that manages the newly created object will run.","pos":[1743,1816]},{"content":"The values are taken from the <ph id=\"ph1\">`CLSCTX`</ph> enumeration.","pos":[1817,1868],"source":" The values are taken from the `CLSCTX` enumeration."},{"content":"If <ph id=\"ph1\">`cls_context`</ph> is not specified, the value CLSCTX_ALL is used.","pos":[1869,1933],"source":" If `cls_context` is not specified, the value CLSCTX_ALL is used."},{"content":"associated with the data and code that will be used to create the object.","pos":[1960,2033]},{"content":"Exceptions","pos":[2042,2052]},{"pos":[2056,2180],"content":"If the <ph id=\"ph1\">`com::ptr`</ph> already owns a reference to a COM object, <ph id=\"ph2\">`CreateInstance`</ph> throws &lt;xref:System.InvalidOperationException&gt;.","source":"If the `com::ptr` already owns a reference to a COM object, `CreateInstance` throws <xref:System.InvalidOperationException>."},{"pos":[2187,2363],"content":"This function calls <ph id=\"ph1\">`CoCreateInstance`</ph> and uses &lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A&gt; to convert any error <ph id=\"ph2\">`HRESULT`</ph> to an appropriate exception.","source":"This function calls `CoCreateInstance` and uses <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> to convert any error `HRESULT` to an appropriate exception."},{"content":"Remarks","pos":[2372,2379]},{"content":"uses <ph id=\"ph1\">`CoCreateInstance`</ph> to create a new instance of the specified object, identified either from a ProgID or a CLSID.","pos":[2400,2517],"source":" uses `CoCreateInstance` to create a new instance of the specified object, identified either from a ProgID or a CLSID."},{"content":"The <ph id=\"ph1\">`com::ptr`</ph> references the newly created object and will automatically release all owned references upon destruction.","pos":[2518,2638],"source":" The `com::ptr` references the newly created object and will automatically release all owned references upon destruction."},{"content":"Example","pos":[2647,2654]},{"content":"This example implements a CLR class that uses a <ph id=\"ph1\">`com::ptr`</ph> to wrap its private member <ph id=\"ph2\">`IXMLDOMDocument`</ph> object.","pos":[2658,2769],"source":"This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object."},{"content":"The class constructors use two different forms of <ph id=\"ph1\">`CreateInstance`</ph> to create the document object either from a ProgID or from a CLSID plus a CLSCTX.","pos":[2770,2918],"source":" The class constructors use two different forms of `CreateInstance` to create the document object either from a ProgID or from a CLSID plus a CLSCTX."},{"content":"Requirements","pos":[4223,4235]},{"pos":[4239,4273],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\com\\ptr.h&gt;","source":"**Header file** \\<msclr\\com\\ptr.h>"},{"pos":[4280,4304],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr::com","source":"**Namespace** msclr::com"},{"content":"See Also","pos":[4313,4321]},{"content":"ptr Members","pos":[4326,4337]}],"content":"---\ntitle: \"ptr::CreateInstance | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ptr.CreateInstance\"\n  - \"msclr::com::ptr::CreateInstance\"\n  - \"msclr.com.ptr.CreateInstance\"\n  - \"ptr::CreateInstance\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ptr::CreateInstance\"\nms.assetid: 9e8e4c4c-1651-4839-8829-5857d74470fe\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ptr::CreateInstance\nCreates an instance of a COM object within a `com::ptr`.  \n  \n## Syntax  \n  \n```  \nvoid CreateInstance(  \n   System::String ^ progid,  \n   LPUNKNOWN pouter,  \n   DWORD cls_context  \n);  \nvoid CreateInstance(  \n   System::String ^ progid,  \n   LPUNKNOWN pouter  \n);  \nvoid CreateInstance(  \n   System::String ^ progid  \n);  \nvoid CreateInstance(  \n   const wchar_t * progid,  \n   LPUNKNOWN pouter,  \n   DWORD cls_context  \n);  \nvoid CreateInstance(  \n   const wchar_t * progid,  \n   LPUNKNOWN pouter  \n);  \nvoid CreateInstance(  \n   const wchar_t * progid  \n);  \nvoid CreateInstance(  \n   REFCLSID rclsid,  \n   LPUNKNOWN pouter,  \n   DWORD cls_context  \n);  \nvoid CreateInstance(  \n   REFCLSID rclsid,  \n   LPUNKNOWN pouter  \n);  \nvoid CreateInstance(  \n   REFCLSID rclsid  \n);  \n```  \n  \n#### Parameters  \n `progid`  \n A `ProgID` string.  \n  \n `pouter`  \n Pointer to the aggregate object's IUnknown interface (the controlling IUnknown). If `pouter` is not specified, `NULL` is used.  \n  \n `cls_context`  \n Context in which the code that manages the newly created object will run. The values are taken from the `CLSCTX` enumeration. If `cls_context` is not specified, the value CLSCTX_ALL is used.  \n  \n `rclsid`  \n `CLSID` associated with the data and code that will be used to create the object.  \n  \n## Exceptions  \n If the `com::ptr` already owns a reference to a COM object, `CreateInstance` throws <xref:System.InvalidOperationException>.  \n  \n This function calls `CoCreateInstance` and uses <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> to convert any error `HRESULT` to an appropriate exception.  \n  \n## Remarks  \n `CreateInstance` uses `CoCreateInstance` to create a new instance of the specified object, identified either from a ProgID or a CLSID. The `com::ptr` references the newly created object and will automatically release all owned references upon destruction.  \n  \n## Example  \n This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object. The class constructors use two different forms of `CreateInstance` to create the document object either from a ProgID or from a CLSID plus a CLSCTX.  \n  \n```  \n// comptr_createinstance.cpp  \n// compile with: /clr /link msxml2.lib  \n#include <msxml2.h>  \n#include <msclr\\com\\ptr.h>  \n  \n#import <msxml3.dll> raw_interfaces_only  \n  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \nusing namespace msclr;  \n  \n// a ref class that uses a com::ptr to contain an   \n// IXMLDOMDocument object  \nref class XmlDocument {  \npublic:  \n   // construct the internal com::ptr with a null interface  \n   // and use CreateInstance to fill it  \n   XmlDocument(String^ progid) {  \n      m_ptrDoc.CreateInstance(progid);     \n   }  \n   XmlDocument(REFCLSID clsid, DWORD clsctx) {  \n      m_ptrDoc.CreateInstance(clsid, NULL, clsctx);  \n   }  \n  \n   // note that the destructor will call the com::ptr destructor  \n   // and automatically release the reference to the COM object  \n  \nprivate:  \n   com::ptr<IXMLDOMDocument> m_ptrDoc;  \n};  \n  \n// use the ref class to handle an XML DOM Document object  \nint main() {  \n   try {  \n      // create the class from a progid string  \n      XmlDocument doc1(\"Msxml2.DOMDocument.3.0\");  \n  \n      // or from a clsid with specific CLSCTX  \n      XmlDocument doc2(CLSID_DOMDocument30, CLSCTX_INPROC_SERVER);  \n   }  \n   catch (Exception^ e) {  \n      Console::WriteLine(e);     \n   }  \n}  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\com\\ptr.h>  \n  \n **Namespace** msclr::com  \n  \n## See Also  \n [ptr Members](../dotnet/ptr-members.md)"}