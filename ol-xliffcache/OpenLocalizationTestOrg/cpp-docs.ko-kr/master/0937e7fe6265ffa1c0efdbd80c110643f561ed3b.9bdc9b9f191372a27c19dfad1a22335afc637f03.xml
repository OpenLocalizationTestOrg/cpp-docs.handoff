{"nodes":[{"pos":[12,54],"content":"normal_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"normal_distribution Class | Microsoft Docs","pos":[0,42]}]},{"pos":[841,866],"content":"normal_distribution Class","linkify":"normal_distribution Class","nodes":[{"content":"normal_distribution Class","pos":[0,25]}]},{"content":"Generates a normal distribution.","pos":[867,899]},{"pos":[908,914],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1635,1645],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The floating-point result type, defaults to <ph id=\"ph1\">`double`</ph>.","pos":[1663,1716],"source":" The floating-point result type, defaults to `double`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1717,1784],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"pos":[1793,1800],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class describes a distribution that produces values of a user-specified integral type, or type <ph id=\"ph1\">`double`</ph> if none is provided, distributed according to the Normal Distribution.","pos":[1804,1991],"source":"The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Normal Distribution."},{"content":"The following table links to articles about individual members.","pos":[1992,2055]},{"pos":[2079,2164],"content":"<bpt id=\"p1\">[</bpt>normal_distribution::normal_distribution<ept id=\"p1\">](#normal_distribution__normal_distribution)</ept>","source":"[normal_distribution::normal_distribution](#normal_distribution__normal_distribution)"},{"pos":[2290,2357],"content":"<bpt id=\"p1\">[</bpt>normal_distribution::param_type<ept id=\"p1\">](#normal_distribution__param_type)</ept>","source":"[normal_distribution::param_type](#normal_distribution__param_type)"},{"pos":[2365,2502],"content":"The property functions <ph id=\"ph1\">`mean()`</ph> and <ph id=\"ph2\">`stddev()`</ph> return the values for the stored distribution parameters <ph id=\"ph3\">`mean`</ph> and <ph id=\"ph4\">`stddev`</ph> respectively.","source":"The property functions `mean()` and `stddev()` return the values for the stored distribution parameters `mean` and `stddev` respectively."},{"pos":[2509,2623],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2630,2788],"content":"For detailed information about the Normal distribution, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>Normal Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=400924)</ept>.","source":"For detailed information about the Normal distribution, see the Wolfram MathWorld article [Normal Distribution](http://go.microsoft.com/fwlink/LinkId=400924)."},{"pos":[2797,2804],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4596,4602],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[5265,5277],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5281,5302],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[5309,5327],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5337,5434],"content":"<bpt id=\"p1\">&lt;a name=\"normal_distribution__normal_distribution\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  normal_distribution::normal_distribution","linkify":"<a name=\"normal_distribution__normal_distribution\"></a>  normal_distribution::normal_distribution","source":"<a name=\"normal_distribution__normal_distribution\"></a>  normal_distribution::normal_distribution"},{"content":"Constructs the distribution.","pos":[5438,5466]},{"pos":[5622,5632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`mean`</ph> distribution parameter.","pos":[5646,5680],"source":" The `mean` distribution parameter."},{"content":"The <ph id=\"ph1\">`stddev`</ph> distribution parameter.","pos":[5699,5735],"source":" The `stddev` distribution parameter."},{"content":"The parameter structure used to construct the distribution.","pos":[5752,5811]},{"pos":[5821,5828],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5832,5864],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 ≤ stddev`</ph>","source":"**Precondition:** `0.0 ≤ stddev`"},{"pos":[5871,6020],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`mean`</ph> value holds the value <ph id=\"ph2\">`mean`</ph> and whose stored <ph id=\"ph3\">`stddev`</ph> value holds the value <ph id=\"ph4\">`stddev`</ph>.","source":"The first constructor constructs an object whose stored `mean` value holds the value `mean` and whose stored `stddev` value holds the value `stddev`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[6027,6123],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[6124,6239],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[6249,6328],"content":"<bpt id=\"p1\">&lt;a name=\"normal_distribution__param_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  normal_distribution::param_type","linkify":"<a name=\"normal_distribution__param_type\"></a>  normal_distribution::param_type","source":"<a name=\"normal_distribution__param_type\"></a>  normal_distribution::param_type"},{"content":"Stores the parameters of the distribution.","pos":[6332,6374]},{"pos":[6714,6724],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[6728,6823],"content":"See parent topic <bpt id=\"p1\">[</bpt>normal_distribution Class<ept id=\"p1\">](../standard-library/normal-distribution-class.md)</ept>.","source":"See parent topic [normal_distribution Class](../standard-library/normal-distribution-class.md)."},{"pos":[6833,6840],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6844,6876],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 ≤ stddev`</ph>","source":"**Precondition:** `0.0 ≤ stddev`"},{"pos":[6883,7126],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"pos":[7135,7143],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7147,7189],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>","source":"[\\<random>](../standard-library/random.md)"}],"content":"---\ntitle: \"normal_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"tr1::normal_distribution\"\n  - \"normal_distribution\"\n  - \"std::tr1::normal_distribution\"\n  - \"random/std::tr1::normal_distribution\"\n  - \"std.tr1.normal_distribution\"\n  - \"tr1.normal_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"normal_distribution class\"\n  - \"normal_distribution class [TR1]\"\nms.assetid: bf92cdbd-bc72-4d4a-b588-173d748f0d7d\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# normal_distribution Class\nGenerates a normal distribution.  \n  \n## Syntax  \n```  \nclass normal_distribution  \n   {  \n   public:  // types  \n   typedef RealType result_type;  \n   struct param_type;  // constructors and reset functions  \n   explicit normal_distribution(RealType mean = 0.0, RealType stddev = 1.0);\n   explicit normal_distribution(const param_type& parm);\n   void reset();\n   // generating functions  \n   template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   // property functions  \n   RealType mean() const;\n   RealType stddev() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;\n   };  \n```  \n#### Parameters  \n `RealType`  \n The floating-point result type, defaults to `double`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Normal Distribution. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[normal_distribution::normal_distribution](#normal_distribution__normal_distribution)|`normal_distribution::mean`|`normal_distribution::param`|  \n|`normal_distribution::operator()`|`normal_distribution::stddev`|[normal_distribution::param_type](#normal_distribution__param_type)|  \n  \n The property functions `mean()` and `stddev()` return the values for the stored distribution parameters `mean` and `stddev` respectively.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the Normal distribution, see the Wolfram MathWorld article [Normal Distribution](http://go.microsoft.com/fwlink/LinkId=400924).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nusing namespace std;  \n  \nvoid test(const double m, const double s, const int samples) {  \n  \n    // uncomment to use a non-deterministic seed  \n    //    random_device gen;  \n    //    mt19937 gen(rd());  \n    mt19937 gen(1701);  \n  \n    normal_distribution<> distr(m, s);  \n  \n    cout << endl;  \n    cout << \"min() == \" << distr.min() << endl;  \n    cout << \"max() == \" << distr.max() << endl;  \n    cout << \"m() == \" << fixed << setw(11) << setprecision(10) << distr.mean() << endl;  \n    cout << \"s() == \" << fixed << setw(11) << setprecision(10) << distr.stddev() << endl;  \n  \n    // generate the distribution as a histogram  \n    map<double, int> histogram;  \n    for (int i = 0; i < samples; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    cout << \"Distribution for \" << samples << \" samples:\" << endl;  \n    int counter = 0;  \n    for (const auto& elem : histogram) {  \n        cout << fixed << setw(11) << ++counter << \": \"  \n            << setw(14) << setprecision(10) << elem.first << endl;  \n    }  \n    cout << endl;  \n}  \n  \nint main()  \n{  \n    double m_dist = 1;  \n    double s_dist = 1;  \n    int samples = 10;  \n  \n    cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << endl;  \n    cout << \"Enter a floating point value for the 'mean' distribution parameter: \";  \n    cin >> m_dist;  \n    cout << \"Enter a floating point value for the 'stddev' distribution parameter (must be greater than zero): \";  \n    cin >> s_dist;  \n    cout << \"Enter an integer value for the sample count: \";  \n    cin >> samples;  \n  \n    test(m_dist, s_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'mean' distribution parameter: 0  \nEnter a floating point value for the 'stddev' distribution parameter (must be greater than zero): 1  \nEnter an integer value for the sample count: 10  \n \nmin() == -1.79769e+308  \nmax() == 1.79769e+308  \nm() == 0.0000000000  \ns() == 1.0000000000  \nDistribution for 10 samples:  \n    1: -0.8845823965  \n    2: -0.1995761116  \n    3: -0.1162665130  \n    4: -0.0685154932  \n    5: 0.0403741461  \n    6: 0.1591327792  \n    7: 1.0414389924  \n    8: 1.5876269426  \n    9: 1.6362637713  \n    10: 2.7821317338  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"normal_distribution__normal_distribution\"></a>  normal_distribution::normal_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit normal_distribution(RealType mean = 0.0, RealType stddev = 1.0);\n\n \nexplicit normal_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `mean`  \n The `mean` distribution parameter.  \n  \n `stddev`  \n The `stddev` distribution parameter.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 ≤ stddev`  \n  \n The first constructor constructs an object whose stored `mean` value holds the value `mean` and whose stored `stddev` value holds the value `stddev`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"normal_distribution__param_type\"></a>  normal_distribution::param_type  \n Stores the parameters of the distribution.  \n```cpp  \nstruct param_type {  \n   typedef normal_distribution<RealType> distribution_type;  \n   param_type(RealType mean = 0.0, RealType stddev = 1.0);\n   RealType mean() const;\n   RealType stddev() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```  \n### Parameters  \n See parent topic [normal_distribution Class](../standard-library/normal-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 ≤ stddev`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n\n"}