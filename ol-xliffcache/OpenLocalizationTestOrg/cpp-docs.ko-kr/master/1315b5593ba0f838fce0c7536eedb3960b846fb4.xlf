<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1315b5593ba0f838fce0c7536eedb3960b846fb4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\sequence-of-operations-for-building-mfc-applications.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5caeded1f392b3fcf52f358007979aeb0bd9160</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df1012754435b9e0df74cb34e542ab503febb23f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Sequence of Operations for Building MFC Applications | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Sequence of Operations for Building MFC Applications</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following table explains the general sequence you might typically follow as you develop your MFC application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Sequence for Building an Application with the Framework</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Task</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You do</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The framework does</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Create a skeleton application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Run the <bpt id="p1">[</bpt>MFC Application Wizard<ept id="p1">](../mfc/reference/mfc-application-wizard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Specify the options you want in the options pages.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Options include making the application a COM component, container, or both; adding Automation; and making the application database-aware.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The MFC Application Wizard creates the files for a skeleton application, including source files for your application, document, view, and frame windows; a resource file; a project file; and others, all tailored to your specifications.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See what the framework and the MFC Application Wizard offer without adding a line of your own code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Build the skeleton application and run it in Visual C++.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The running skeleton application derives many standard <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Edit<ept id="p2">**</ept>, <bpt id="p3">**</bpt>View<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>Help<ept id="p4">**</ept> menu commands from the framework.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For MDI applications, you also get a fully functional Windows menu, and the framework manages creation, arrangement, and destruction of MDI child windows.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Construct your application's user interface.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use the Visual C++ <bpt id="p1">[</bpt>resource editors<ept id="p1">](../mfc/resource-editors.md)</ept> to visually edit the application's user interface:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>-   Create menus.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>-   Define accelerators.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>-   Create dialog boxes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>-   Create and edit bitmaps, icons, and cursors.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>-   Edit the toolbar created for you by the MFC Application Wizard.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>-   Create and edit other resources.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can also test the dialog boxes in the dialog editor.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The default resource file created by the MFC Application Wizard supplies many of the resources you need.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Visual C++ lets you edit existing resources and add new resources easily and visually.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Map menus to handler functions.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Events<ept id="p1">**</ept> button in the <bpt id="p2">[</bpt>Properties window<ept id="p2">](/visualstudio/ide/reference/properties-window)</ept> to connect menus and accelerators to handler functions in your code.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The Properties window inserts message-map entries and empty function templates into the source files you specify and manages many manual coding tasks.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Write your handler code.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use Class View to jump directly to the code in the source code editor.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Fill in the code for your handler functions.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information on using Class View and about wizards that add code to a project, see <bpt id="p1">[</bpt>Adding Functionality with Code Wizards<ept id="p1">](../ide/adding-functionality-with-code-wizards-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Class View opens the editor, scrolls to the empty function template and positions the cursor for you.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Map toolbar buttons to commands.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Map each button on your toolbar to a menu or accelerator command by assigning the button the appropriate command ID.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The framework controls the drawing, enabling, disabling, checking, and other visual aspects of the toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Test your handler functions.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Rebuild the program and use the built-in debugging tools to test that your handlers work correctly.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can step or trace through the code to see how your handlers are called.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you have filled out the handler code, the handlers carry out commands.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The framework will automatically disable menu items and toolbar buttons that are not handled.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Add <bpt id="p1">[</bpt>dialog boxes<ept id="p1">](../mfc/dialog-boxes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Design dialog-template resources with the dialog editor.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Then create a dialog class and the code that handles the dialog box.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The framework manages the dialog box and facilitates retrieving information entered by the user.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Initialize, validate, and retrieve dialog-box data.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can also define how the dialog box's controls are to be initialized and validated.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Use Visual Studio to add member variables to the dialog class and map them to dialog controls.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Specify validation rules to be applied to each control as the user enters data.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Provide your own custom validations if you wish.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The framework manages dialog-box initialization and validation.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If the user enters invalid information, the framework displays a message box and lets the user reenter the data.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Create additional classes.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Use Class View to create additional document, view, and frame-window classes beyond those created automatically by the MFC Application Wizard.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can create additional database recordset classes, dialog classes, and so on.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>(With Class View, you can create classes not derived from MFC classes.)</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Class View adds these classes to your source files and helps you define their connections to any commands they handle.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Add ready-to-use components to your application.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`New Item dialog box`</ph> to add a variety of items.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>These items are easy to integrate into your application and save you a great deal of work.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Implement your document class.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Implement your application-specific document class or classes.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Add member variables to hold data structures.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Add member functions to provide an interface to the data.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The framework already knows how to interact with document data files.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>It can open and close document files, read and write the document's data, and handle other user interfaces.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can focus on how the document's data is manipulated.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Implement Open, Save, and Save As commands.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Write code for the document's <ph id="ph1">`Serialize`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The framework displays dialog boxes for the <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Save<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Save As<ept id="p3">**</ept> commands on the <bpt id="p4">**</bpt>File<ept id="p4">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It writes and reads back a document using the data format specified in your <ph id="ph1">`Serialize`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Implement your view class.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Implement one or more view classes corresponding to your documents.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Implement the view's member functions that you mapped to the user interface with Class View.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A variety of <bpt id="p1">[</bpt>CView<ept id="p1">](../mfc/reference/cview-class.md)</ept>-derived classes are available, including <bpt id="p2">[</bpt>CListView<ept id="p2">](../mfc/reference/clistview-class.md)</ept> and <bpt id="p3">[</bpt>CTreeView<ept id="p3">](../mfc/reference/ctreeview-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The framework manages most of the relationship between a document and its view.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The view's member functions access the view's document to render its image on the screen or printed page and to update the document's data structures in response to user editing commands.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Enhance default printing.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If you need to support multipage printing, override view member functions.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The framework supports the <bpt id="p1">**</bpt>Print<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Page Setup<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Print Preview<ept id="p3">**</ept> commands on the <bpt id="p4">**</bpt>File<ept id="p4">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You must tell it how to break your document into multiple pages.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Add scrolling.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If you need to support scrolling, derive your view class or classes from <bpt id="p1">[</bpt>CScrollView<ept id="p1">](../mfc/reference/cscrollview-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The view automatically adds scroll bars when the view window becomes too small.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Create form views.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If you want to base your views on dialog-template resources, derive your view class or classes from <bpt id="p1">[</bpt>CFormView<ept id="p1">](../mfc/reference/cformview-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The view uses the dialog-template resource to display controls.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The user can tab from control to control in the view.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Create database forms.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you want a form-based data-access application, derive your view class from <bpt id="p1">[</bpt>CRecordView<ept id="p1">](../mfc/reference/crecordview-class.md)</ept> (for ODBC programming).</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The view works like a form view, but its controls are connected to the fields of a <bpt id="p1">[</bpt>CRecordset<ept id="p1">](../mfc/reference/crecordset-class.md)</ept> object representing a database table.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>MFC moves data between the controls and the recordset for you.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Create a simple text editor.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If you want your view to be a simple text editor, derive your view class or classes from <bpt id="p1">[</bpt>CEditView<ept id="p1">](../mfc/reference/ceditview-class.md)</ept> or <bpt id="p2">[</bpt>CRichEditView<ept id="p2">](../mfc/reference/cricheditview-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The view provides editing functions, Clipboard support, and file input/output.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>provides styled text.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Add splitter windows.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If you want to support window splitting, add a <bpt id="p1">[</bpt>CSplitterWnd<ept id="p1">](../mfc/reference/csplitterwnd-class.md)</ept> object to your SDI frame window or MDI child window and hook it up in the window's <bpt id="p2">[</bpt>OnCreateClient<ept id="p2">](../mfc/reference/cframewnd-class.md#cframewnd__oncreateclient)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The framework supplies splitter-box controls next to the scroll bars and manages splitting your view into multiple panes.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the user splits a window, the framework creates and attaches additional view objects to the document.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Build, test, and debug your application.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Use the facilities of Visual C++ to build, test, and debug your application.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Visual C++ lets you adjust compile, link, and other options.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>It also lets you browse your source code and class structure.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Sequence of Operations for Creating OLE Applications</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Sequence of Operations for Creating ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Sequence of Operations for Creating Database Applications</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Building on the Framework</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>