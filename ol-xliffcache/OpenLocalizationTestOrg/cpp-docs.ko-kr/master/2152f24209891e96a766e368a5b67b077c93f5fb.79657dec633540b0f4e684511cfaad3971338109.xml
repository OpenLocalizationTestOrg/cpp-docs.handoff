{"nodes":[{"pos":[12,50],"content":"_dupenv_s, _wdupenv_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_dupenv_s, _wdupenv_s | Microsoft Docs","pos":[0,38]}]},{"content":"_dupenv_s, _wdupenv_s","pos":[1183,1204]},{"content":"Gets a value from the current environment.","pos":[1205,1247]},{"pos":[1255,1475],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[1484,1490]},{"content":"Parameters","pos":[1727,1737]},{"content":"Buffer to store the variable's value.","pos":[1753,1790]},{"content":"Size of <ph id=\"ph1\">`buffer`</ph>.","pos":[1819,1836],"source":" Size of `buffer`."},{"content":"Environment variable name.","pos":[1856,1882]},{"content":"Return Value","pos":[1891,1903]},{"content":"Zero on success, an error code on failure.","pos":[1907,1949]},{"content":"These functions validate their parameters; if <ph id=\"ph1\">`buffer`</ph> or <ph id=\"ph2\">`varname`</ph> is <ph id=\"ph3\">`NULL`</ph>, the invalid parameter handler is invoked as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1956,2164],"source":"These functions validate their parameters; if `buffer` or `varname` is `NULL`, the invalid parameter handler is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2165,2260],"source":" If execution is allowed to continue, the functions set `errno` to `EINVAL` and return `EINVAL`."},{"pos":[2267,2394],"content":"If these functions cannot allocate enough memory, they set <ph id=\"ph1\">`buffer`</ph> to <ph id=\"ph2\">`NULL`</ph> and <ph id=\"ph3\">`numberOfElements`</ph> to 0, and return <ph id=\"ph4\">`ENOMEM`</ph>.","source":"If these functions cannot allocate enough memory, they set `buffer` to `NULL` and `numberOfElements` to 0, and return `ENOMEM`."},{"content":"Remarks","pos":[2403,2410]},{"content":"The <ph id=\"ph1\">`_dupenv_s`</ph> function searches the list of environment variables for <ph id=\"ph2\">`varname`</ph>.","pos":[2414,2496],"source":"The `_dupenv_s` function searches the list of environment variables for `varname`."},{"content":"If the variable is found, <ph id=\"ph1\">`_dupenv_s`</ph> allocates a buffer and copies the variable's value into the buffer.","pos":[2497,2602],"source":" If the variable is found, `_dupenv_s` allocates a buffer and copies the variable's value into the buffer."},{"content":"The buffer's address and length are returned in <ph id=\"ph1\">`buffer`</ph> and <ph id=\"ph2\">`numberOfElements`</ph>.","pos":[2603,2683],"source":" The buffer's address and length are returned in `buffer` and `numberOfElements`."},{"content":"By allocating the buffer itself, <ph id=\"ph1\">`_dupenv_s`</ph> provides a more convenient alternative to <bpt id=\"p1\">[</bpt>getenv_s, _wgetenv_s<ept id=\"p1\">](../../c-runtime-library/reference/getenv-s-wgetenv-s.md)</ept>.","pos":[2684,2851],"source":" By allocating the buffer itself, `_dupenv_s` provides a more convenient alternative to [getenv_s, _wgetenv_s](../../c-runtime-library/reference/getenv-s-wgetenv-s.md)."},{"pos":[2859,2993],"content":"[!NOTE]\n It is the calling program's responsibility to free the memory by calling [free](../../c-runtime-library/reference/free.md).","leadings":["","> "],"nodes":[{"content":"It is the calling program's responsibility to free the memory by calling <bpt id=\"p1\">[</bpt>free<ept id=\"p1\">](../../c-runtime-library/reference/free.md)</ept>.","pos":[9,132],"source":" It is the calling program's responsibility to free the memory by calling [free](../../c-runtime-library/reference/free.md)."}]},{"pos":[3000,3186],"content":"If the variable is not found, then <ph id=\"ph1\">`buffer`</ph> is set to <ph id=\"ph2\">`NULL`</ph>, <ph id=\"ph3\">`numberOfElements`</ph> is set to 0, and the return value is 0 because this situation is not considered to be an error condition.","source":"If the variable is not found, then `buffer` is set to `NULL`, `numberOfElements` is set to 0, and the return value is 0 because this situation is not considered to be an error condition."},{"pos":[3193,3288],"content":"If you are not interested in the size of the buffer you can pass <ph id=\"ph1\">`NULL`</ph> for <ph id=\"ph2\">`numberOfElements`</ph>.","source":"If you are not interested in the size of the buffer you can pass `NULL` for `numberOfElements`."},{"content":"is not case sensitive in the Windows operating system.","pos":[3307,3361]},{"content":"uses the copy of the environment pointed to by the global variable <ph id=\"ph1\">`_environ`</ph> to access the environment.","pos":[3374,3478],"source":" uses the copy of the environment pointed to by the global variable `_environ` to access the environment."},{"content":"See the Remarks in <bpt id=\"p1\">[</bpt>getenv_s, _wgetenv_s<ept id=\"p1\">](../../c-runtime-library/reference/getenv-s-wgetenv-s.md)</ept> for a discussion of <ph id=\"ph1\">`_environ`</ph>.","pos":[3479,3609],"source":" See the Remarks in [getenv_s, _wgetenv_s](../../c-runtime-library/reference/getenv-s-wgetenv-s.md) for a discussion of `_environ`."},{"content":"The value in <ph id=\"ph1\">`buffer`</ph> is a copy of the environment variable's value; modifying it has no effect on the environment.","pos":[3616,3731],"source":"The value in `buffer` is a copy of the environment variable's value; modifying it has no effect on the environment."},{"content":"Use the <bpt id=\"p1\">[</bpt>_putenv_s, _wputenv_s<ept id=\"p1\">](../../c-runtime-library/reference/putenv-s-wputenv-s.md)</ept> function to modify the value of an environment variable.","pos":[3732,3877],"source":" Use the [_putenv_s, _wputenv_s](../../c-runtime-library/reference/putenv-s-wputenv-s.md) function to modify the value of an environment variable."},{"content":"is a wide-character version of <ph id=\"ph1\">`_dupenv_s`</ph>; the arguments of <ph id=\"ph2\">`_wdupenv_s`</ph> are wide-character strings.","pos":[3897,3998],"source":" is a wide-character version of `_dupenv_s`; the arguments of `_wdupenv_s` are wide-character strings."},{"content":"The <ph id=\"ph1\">`_wenviron`</ph> global variable is a wide-character version of <ph id=\"ph2\">`_environ`</ph>.","pos":[3999,4073],"source":" The `_wenviron` global variable is a wide-character version of `_environ`."},{"content":"See the Remarks in <bpt id=\"p1\">[</bpt>getenv_s, _wgetenv_s<ept id=\"p1\">](../../c-runtime-library/reference/getenv-s-wgetenv-s.md)</ept> for more on <ph id=\"ph1\">`_wenviron`</ph>.","pos":[4074,4197],"source":" See the Remarks in [getenv_s, _wgetenv_s](../../c-runtime-library/reference/getenv-s-wgetenv-s.md) for more on `_wenviron`."},{"content":"Generic-Text Routine Mappings","pos":[4207,4236]},{"content":"TCHAR.H routine","pos":[4243,4258]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[4259,4287],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[4288,4301]},{"content":"_UNICODE defined","pos":[4302,4318]},{"content":"Requirements","pos":[4490,4502]},{"content":"Routine","pos":[4509,4516]},{"content":"Required header","pos":[4517,4532]},{"content":"stdlib.h&gt;","pos":[4591,4600],"source":"stdlib.h>"},{"content":"stdlib.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4620,4643],"source":"stdlib.h> or \\<wchar.h>"},{"pos":[4651,4755],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[4764,4771]},{"content":"Sample Output","pos":[5248,5261]},{"content":".NET Framework Equivalent","pos":[5381,5406]},{"content":"System::Environment::GetEnvironmentVariable","pos":[5411,5454]},{"content":"See Also","pos":[5553,5561]},{"content":"Process and Environment Control","pos":[5566,5597]},{"content":"Environmental Constants","pos":[5664,5687]},{"content":"_dupenv_s_dbg, _wdupenv_s_dbg","pos":[5746,5775]},{"content":"getenv_s, _wgetenv_s","pos":[5847,5867]},{"content":"_putenv_s, _wputenv_s","pos":[5931,5952]}],"content":"---\ntitle: \"_dupenv_s, _wdupenv_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_dupenv_s\"\n  - \"_wdupenv_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-environment-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"tdupenv_s\"\n  - \"_dupenv_s\"\n  - \"wdupenv_s\"\n  - \"dupenv_s\"\n  - \"_tdupenv_s\"\n  - \"_wdupenv_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_dupenv_s function\"\n  - \"_tdupenv_s function\"\n  - \"_wdupenv_s function\"\n  - \"environment variables\"\n  - \"wdupenv_s function\"\n  - \"dupenv_s function\"\n  - \"tdupenv_s function\"\nms.assetid: b729ecc2-a31d-4ccf-92a7-5accedb8f8c8\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _dupenv_s, _wdupenv_s\nGets a value from the current environment.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nerrno_t _dupenv_s(  \n   char **buffer,  \n   size_t *numberOfElements,  \n   const char *varname  \n);  \nerrno_t _wdupenv_s(  \n   wchar_t **buffer,  \n   size_t *numberOfElements,  \n   const wchar_t *varname  \n);  \n```  \n  \n#### Parameters  \n `buffer`  \n Buffer to store the variable's value.  \n  \n `numberOfElements`  \n Size of `buffer`.  \n  \n `varname`  \n Environment variable name.  \n  \n## Return Value  \n Zero on success, an error code on failure.  \n  \n These functions validate their parameters; if `buffer` or `varname` is `NULL`, the invalid parameter handler is invoked as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions set `errno` to `EINVAL` and return `EINVAL`.  \n  \n If these functions cannot allocate enough memory, they set `buffer` to `NULL` and `numberOfElements` to 0, and return `ENOMEM`.  \n  \n## Remarks  \n The `_dupenv_s` function searches the list of environment variables for `varname`. If the variable is found, `_dupenv_s` allocates a buffer and copies the variable's value into the buffer. The buffer's address and length are returned in `buffer` and `numberOfElements`. By allocating the buffer itself, `_dupenv_s` provides a more convenient alternative to [getenv_s, _wgetenv_s](../../c-runtime-library/reference/getenv-s-wgetenv-s.md).  \n  \n> [!NOTE]\n>  It is the calling program's responsibility to free the memory by calling [free](../../c-runtime-library/reference/free.md).  \n  \n If the variable is not found, then `buffer` is set to `NULL`, `numberOfElements` is set to 0, and the return value is 0 because this situation is not considered to be an error condition.  \n  \n If you are not interested in the size of the buffer you can pass `NULL` for `numberOfElements`.  \n  \n `_dupenv_s` is not case sensitive in the Windows operating system. `_dupenv_s` uses the copy of the environment pointed to by the global variable `_environ` to access the environment. See the Remarks in [getenv_s, _wgetenv_s](../../c-runtime-library/reference/getenv-s-wgetenv-s.md) for a discussion of `_environ`.  \n  \n The value in `buffer` is a copy of the environment variable's value; modifying it has no effect on the environment. Use the [_putenv_s, _wputenv_s](../../c-runtime-library/reference/putenv-s-wputenv-s.md) function to modify the value of an environment variable.  \n  \n `_wdupenv_s` is a wide-character version of `_dupenv_s`; the arguments of `_wdupenv_s` are wide-character strings. The `_wenviron` global variable is a wide-character version of `_environ`. See the Remarks in [getenv_s, _wgetenv_s](../../c-runtime-library/reference/getenv-s-wgetenv-s.md) for more on `_wenviron`.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tdupenv_s`|`_dupenv_s`|`_dupenv_s`|`_wdupenv_s`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_dupenv_s`|\\<stdlib.h>|  \n|`_wdupenv_s`|\\<stdlib.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_dupenv_s.c  \n#include  <stdlib.h>  \n  \nint main( void )  \n{  \n   char *pValue;  \n   size_t len;  \n   errno_t err = _dupenv_s( &pValue, &len, \"pathext\" );  \n   if ( err ) return -1;  \n   printf( \"pathext = %s\\n\", pValue );  \n   free( pValue );  \n   err = _dupenv_s( &pValue, &len, \"nonexistentvariable\" );  \n   if ( err ) return -1;  \n   printf( \"nonexistentvariable = %s\\n\", pValue );  \n   free( pValue ); // It's OK to call free with NULL  \n}  \n```  \n  \n## Sample Output  \n  \n```  \npathext = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.pl  \nnonexistentvariable = (null)  \n```  \n  \n## .NET Framework Equivalent  \n [System::Environment::GetEnvironmentVariable](https://msdn.microsoft.com/en-us/library/system.environment.getenvironmentvariable.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [Environmental Constants](../../c-runtime-library/environmental-constants.md)   \n [_dupenv_s_dbg, _wdupenv_s_dbg](../../c-runtime-library/reference/dupenv-s-dbg-wdupenv-s-dbg.md)   \n [getenv_s, _wgetenv_s](../../c-runtime-library/reference/getenv-s-wgetenv-s.md)   \n [_putenv_s, _wputenv_s](../../c-runtime-library/reference/putenv-s-wputenv-s.md)"}