{"nodes":[{"pos":[12,53],"content":"is_bind_expression Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_bind_expression Class | Microsoft Docs","pos":[0,41]}]},{"pos":[746,770],"content":"is_bind_expression Class","linkify":"is_bind_expression Class","nodes":[{"content":"is_bind_expression Class","pos":[0,24]}]},{"pos":[771,813],"content":"Tests if type generated by calling <ph id=\"ph1\">`bind`</ph>.","source":"Tests if type generated by calling `bind`."},{"pos":[822,828],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"content":"struct is_bind_expression {","pos":[834,861]},{"content":"static const bool value;","pos":[867,891]},{"content":"};","pos":[897,899]},{"pos":[908,915],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[919,1027],"content":"The constant value <ph id=\"ph1\">`value`</ph> is true if the type <ph id=\"ph2\">`Ty`</ph> is a type returned by a call to <ph id=\"ph3\">`bind`</ph>, otherwise false.","source":"The constant value `value` is true if the type `Ty` is a type returned by a call to `bind`, otherwise false."},{"pos":[1036,1043],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1539,1551],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1555,1580],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[1587,1605],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1614,1622],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1626,1700],"content":"<bpt id=\"p1\">[</bpt>bind Function<ept id=\"p1\">](../standard-library/functional-functions.md#bind_function)</ept>","source":"[bind Function](../standard-library/functional-functions.md#bind_function)"}],"content":"---\ntitle: \"is_bind_expression Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.is_bind_expression\"\n  - \"is_bind_expression\"\n  - \"std::tr1::is_bind_expression\"\n  - \"functional/std::tr1::is_bind_expression\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"is_bind_expression class [TR1]\"\nms.assetid: 0715f9e9-2239-4778-a1cf-2c21f49dfd47\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is_bind_expression Class\nTests if type generated by calling `bind`.  \n  \n## Syntax  \n  \nstruct is_bind_expression {  \n   static const bool value;  \n   };  \n  \n## Remarks  \n The constant value `value` is true if the type `Ty` is a type returned by a call to `bind`, otherwise false.  \n  \n## Example  \n  \n```cpp  \n// std_tr1__functional__is_bind_expression.cpp   \n// compile with: /EHsc   \n#include <functional>   \n#include <iostream>   \n  \nvoid square(double x)\n{\n    std::cout << x << \"^2 == \" << x * x << std::endl;\n}\n\ntemplate<class Expr>\nvoid test_for_bind(const Expr&)\n{\n    std::cout << std::is_bind_expression<Expr>::value << std::endl;\n}\n\nint main()\n{\n    test_for_bind(3.0 * 3.0);\n    test_for_bind(std::bind(square, 3));\n\n    return (0);\n}\n  \n```  \n  \n```Output  \n0  \n1  \n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [bind Function](../standard-library/functional-functions.md#bind_function)\n\n"}