{"nodes":[{"pos":[12,48],"content":"CMFCPopupMenu Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCPopupMenu Class | Microsoft Docs","pos":[0,36]}]},{"content":"CMFCPopupMenu Class","pos":[613,632]},{"content":"Implements Windows pop-up menu functionality and extends it by adding features such as tear-off menus and tooltips.","pos":[633,748]},{"content":"Syntax","pos":[757,763]},{"content":"Members","pos":[832,839]},{"content":"Protected Constructors","pos":[849,871]},{"content":"Name","pos":[878,882]},{"content":"Description","pos":[883,894]},{"content":"CMFCPopupMenu::CMFCPopupMenu","pos":[933,961]},{"pos":[994,1030],"content":"Constructs a <ph id=\"ph1\">`CMFCPopupMenu`</ph> object.","source":"Constructs a `CMFCPopupMenu` object."},{"content":"Public Methods","pos":[1041,1055]},{"content":"Name","pos":[1062,1066]},{"content":"Description","pos":[1067,1078]},{"content":"CMFCPopupMenu::ActivatePopupMenu","pos":[1117,1149]},{"content":"CMFCPopupMenu::AlwaysShowEmptyToolsEntry","pos":[1192,1232]},{"content":"Sets whether a pop-up menu is enabled to show empty entries for user-defined tools.","pos":[1277,1360]},{"content":"CMFCPopupMenu::AreAllCommandsShown","pos":[1366,1400]},{"content":"CMFCPopupMenu::CheckArea","pos":[1445,1469]},{"content":"Determines the location of a point relative to the pop-up menu.","pos":[1498,1561]},{"content":"CMFCPopupMenu::CloseMenu","pos":[1567,1591]},{"content":"CMFCPopupMenu::Create","pos":[1626,1647]},{"pos":[1673,1741],"content":"Creates a pop-up menu and attaches it to the <ph id=\"ph1\">`CMFCPopupMenu`</ph> object.","source":"Creates a pop-up menu and attaches it to the `CMFCPopupMenu` object."},{"content":"CMFCPopupMenu::DefaultMouseClickOnClose","pos":[1747,1786]},{"content":"CMFCPopupMenu::EnableMenuLogo","pos":[1836,1865]},{"content":"Initializes the logo for a pop-up menu.","pos":[1899,1938]},{"content":"CMFCPopupMenu::EnableMenuSound","pos":[1944,1974]},{"content":"Enables menu sound.","pos":[2009,2028]},{"content":"CMFCPopupMenu::EnableResize","pos":[2034,2061]},{"content":"CMFCPopupMenu::EnableScrolling","pos":[2099,2129]},{"content":"CMFCPopupMenu::EnableVertResize","pos":[2170,2201]},{"content":"CMFCPopupMenu::FindSubItemByCommand","pos":[2243,2278]},{"content":"CMFCPopupMenu::GetActiveMenu","pos":[2324,2352]},{"content":"Returns the currently active menu.","pos":[2385,2419]},{"content":"CMFCPopupMenu::GetAnimationSpeed","pos":[2425,2457]},{"content":"Returns the animation speed for pop-up menus.","pos":[2494,2539]},{"content":"CMFCPopupMenu::GetAnimationType","pos":[2545,2576]},{"content":"Returns the current type of pop-up menu animation.","pos":[2612,2662]},{"content":"CMFCPopupMenu::GetDropDirection","pos":[2668,2699]},{"content":"CMFCPopupMenu::GetForceMenuFocus","pos":[2741,2773]},{"content":"Indicates whether the focus is returned to the menu bar when a pop-up menu is displayed.","pos":[2810,2898]},{"content":"CMFCPopupMenu::GetForceShadow","pos":[2904,2933]},{"content":"CMFCPopupMenu::GetHMenu","pos":[2973,2996]},{"content":"Returns a handle to the attached menu resource.","pos":[3024,3071]},{"content":"CMFCPopupMenu::GetMenuBar","pos":[3077,3102]},{"pos":[3132,3242],"content":"Returns the <bpt id=\"p1\">[</bpt>CMFCPopupMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenubar-class.md)</ept> embedded inside the pop-up menu.","source":"Returns the [CMFCPopupMenuBar](../../mfc/reference/cmfcpopupmenubar-class.md) embedded inside the pop-up menu."},{"content":"CMFCPopupMenu::GetMenuItem","pos":[3248,3274]},{"content":"Returns a pointer to the menu item at the specified index.","pos":[3305,3363]},{"content":"CMFCPopupMenu::GetMenuItemCount","pos":[3369,3400]},{"content":"Returns the number of items in a popup menu.","pos":[3436,3480]},{"content":"CMFCPopupMenu::GetMessageWnd","pos":[3486,3514]},{"content":"Returns a pointer to the window where the framework routes the pop-up menu messages.","pos":[3547,3631]},{"content":"CMFCPopupMenu::GetParentArea","pos":[3637,3665]},{"content":"CMFCPopupMenu::GetParentButton","pos":[3704,3734]},{"content":"Returns a pointer to the parent toolbar button.","pos":[3769,3816]},{"content":"CMFCPopupMenu::GetParentPopupMenu","pos":[3822,3855]},{"content":"Returns a pointer to the parent pop-up menu.","pos":[3893,3937]},{"content":"CMFCPopupMenu::GetParentRibbonElement","pos":[3943,3980]},{"content":"CMFCPopupMenu::GetParentToolBar","pos":[4028,4059]},{"content":"Returns a pointer to the parent toolbar.","pos":[4095,4135]},{"content":"CMFCPopupMenu::GetQuickCustomizeType","pos":[4141,4177]},{"content":"CMFCPopupMenu::GetSelItem","pos":[4224,4249]},{"content":"Returns a pointer to the currently selected menu command.","pos":[4279,4336]},{"content":"CMFCPopupMenu::HasBeenResized","pos":[4342,4371]},{"content":"CMFCPopupMenu::HideRarelyUsedCommands","pos":[4411,4448]},{"content":"Indicates whether the pop-up menu can hide rarely used commands.","pos":[4490,4554]},{"content":"CMFCPopupMenu::InCommand","pos":[4560,4584]},{"content":"CMFCPopupMenu::InsertItem","pos":[4619,4644]},{"content":"Inserts a new item into the pop-up menu at the specified location.","pos":[4674,4740]},{"content":"CMFCPopupMenu::InsertSeparator","pos":[4746,4776]},{"content":"Inserts a separator into the pop-up menu at the specified location.","pos":[4811,4878]},{"content":"CMFCPopupMenu::IsAlwaysClose","pos":[4884,4912]},{"content":"CMFCPopupMenu::IsAlwaysShowEmptyToolsEntry","pos":[4951,4993]},{"content":"CMFCPopupMenu::IsCustomizePane","pos":[5046,5076]},{"pos":[5111,5188],"content":"Indicates whether the pop-up menu is functioning as a <bpt id=\"p1\">**</bpt>QuickCustomizePane<ept id=\"p1\">**</ept>.","source":"Indicates whether the pop-up menu is functioning as a **QuickCustomizePane**."},{"content":"CMFCPopupMenu::IsEscClose","pos":[5194,5219]},{"content":"CMFCPopupMenu::IsIdle","pos":[5255,5276]},{"content":"Indicates whether a pop-up menu is currently idle.","pos":[5302,5352]},{"content":"CMFCPopupMenu::IsMenuSound","pos":[5358,5384]},{"content":"CMFCPopupMenu::IsQuickCustomize","pos":[5421,5452]},{"pos":[5488,5630],"content":"Determines whether the associated <bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept> is in QuickCustomize mode.","source":"Determines whether the associated [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md) is in QuickCustomize mode."},{"content":"CMFCPopupMenu::IsResizeble","pos":[5636,5662]},{"content":"CMFCPopupMenu::IsRightAlign","pos":[5699,5726]},{"content":"Indicates whether the menu is right-aligned or left-aligned.","pos":[5758,5818]},{"content":"CMFCPopupMenu::IsScrollable","pos":[5824,5851]},{"content":"CMFCPopupMenu::IsSendMenuSelectMsg","pos":[5889,5923]},{"content":"Indicates whether the framework notifies the parent frame when the user selects a command from the pop-up menu.","pos":[5962,6073]},{"content":"CMFCPopupMenu::IsShown","pos":[6079,6101]},{"content":"Indicates whether the pop-up menu is currently visible.","pos":[6128,6183]},{"content":"CMFCPopupMenu::MoveTo","pos":[6189,6210]},{"content":"CMFCPopupMenu::OnCmdMsg","pos":[6242,6265]},{"pos":[6293,6327],"content":"(Overrides <ph id=\"ph1\">`CFrameWnd::OnCmdMsg`</ph>.)","source":"(Overrides `CFrameWnd::OnCmdMsg`.)"},{"content":"CMFCPopupMenu::PostCommand","pos":[6333,6359]},{"content":"CMFCPopupMenu::PreTranslateMessage","pos":[6396,6430]},{"pos":[6469,6514],"content":"(Overrides <ph id=\"ph1\">`CFrameWnd::PreTranslateMessage`</ph>.)","source":"(Overrides `CFrameWnd::PreTranslateMessage`.)"},{"content":"CMFCPopupMenu::RecalcLayout","pos":[6520,6547]},{"content":"Called by the framework when the standard control bars are toggled on or off or when the frame window is resized.","pos":[6579,6692]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CFrameWnd::RecalcLayout<ept id=\"p1\">](../../mfc/reference/cframewnd-class.md#cframewnd__recalclayout)</ept>.)","pos":[6693,6795],"source":" (Overrides [CFrameWnd::RecalcLayout](../../mfc/reference/cframewnd-class.md#cframewnd__recalclayout).)"},{"content":"CMFCPopupMenu::RemoveAllItems","pos":[6801,6830]},{"content":"Clears all the items from a pop-up menu.","pos":[6864,6904]},{"content":"CMFCPopupMenu::RemoveItem","pos":[6910,6935]},{"content":"Removes the specified item from a pop-up menu.","pos":[6965,7011]},{"content":"CMFCPopupMenu::SaveState","pos":[7017,7041]},{"content":"CMFCPopupMenu::SetAnimationSpeed","pos":[7076,7108]},{"content":"Sets the animation speed for pop-up menus.","pos":[7145,7187]},{"content":"CMFCPopupMenu::SetAnimationType","pos":[7193,7224]},{"content":"Sets the animation type for the pop-up menu.","pos":[7260,7304]},{"content":"CMFCPopupMenu::SetAutoDestroy","pos":[7310,7339]},{"content":"CMFCPopupMenu::SetDefaultItem","pos":[7379,7408]},{"content":"Sets the default command for the pop-up menu.","pos":[7442,7487]},{"content":"CMFCPopupMenu::SetForceMenuFocus","pos":[7493,7525]},{"content":"Forces the input focus to return to the menu bar when a pop-up menu is displayed.","pos":[7562,7643]},{"content":"CMFCPopupMenu::SetForceShadow","pos":[7649,7678]},{"content":"Forces the framework to draw menu shadows when pop-up menus appear outside the main frame.","pos":[7712,7802]},{"content":"CMFCPopupMenu::SetMaxWidth","pos":[7808,7834]},{"content":"Set the maximum width for the pop-up menu.","pos":[7865,7907]},{"content":"CMFCPopupMenu::SetMessageWnd","pos":[7913,7941]},{"content":"CMFCPopupMenu::SetParentRibbonElement","pos":[7980,8017]},{"content":"CMFCPopupMenu::SetQuickCustomizeType","pos":[8065,8101]},{"content":"CMFCPopupMenu::SetQuickMode","pos":[8148,8175]},{"content":"CMFCPopupMenu::SetRightAlign","pos":[8213,8241]},{"content":"Sets the menu alignment for pop-up menus.","pos":[8274,8315]},{"content":"CMFCPopupMenu::SetSendMenuSelectMsg","pos":[8321,8356]},{"content":"Sets a flag that controls whether the pop-up menu notifies its parent frame when the user selects a command.","pos":[8396,8504]},{"content":"CMFCPopupMenu::ShowAllCommands","pos":[8510,8540]},{"content":"Forces the pop-up menu to display all commands.","pos":[8575,8622]},{"content":"CMFCPopupMenu::TriggerResize","pos":[8628,8656]},{"content":"CMFCPopupMenu::UpdateAllShadows","pos":[8695,8726]},{"content":"Updates the shadows for all opened pop-up menus.","pos":[8762,8810]},{"content":"CMFCPopupMenu::UpdateShadow","pos":[8816,8843]},{"content":"Updates the shadow for the pop-up menu.","pos":[8875,8914]},{"content":"Protected Methods","pos":[8925,8942]},{"content":"Name","pos":[8949,8953]},{"content":"Description","pos":[8954,8965]},{"content":"CMFCPopupMenu::CreateTearOffBar","pos":[9004,9035]},{"content":"CMFCPopupMenu::OnChangeHot","pos":[9077,9103]},{"content":"CMFCPopupMenu::OnChooseItem","pos":[9140,9167]},{"content":"Remarks","pos":[9210,9217]},{"content":"Normally, MFC creates pop-up menus automatically.","pos":[9221,9270]},{"content":"If you want to create a <ph id=\"ph1\">`CMFCPopupMenu`</ph> object manually, allocate one on the heap and then call <bpt id=\"p1\">[</bpt>CMFCPopupMenu::Create<ept id=\"p1\">](#cmfcpopupmenu__create)</ept>.","pos":[9271,9415],"source":" If you want to create a `CMFCPopupMenu` object manually, allocate one on the heap and then call [CMFCPopupMenu::Create](#cmfcpopupmenu__create)."},{"content":"Example","pos":[9424,9431]},{"content":"The following example demonstrates how to configure a pop-up menu object.","pos":[9435,9508]},{"content":"The example shows how to set the logo and the sound of the pop-up menu, set the animation speed and type, draw menu shadows when the pop-up menu appears outside the main frame, set the maximum width, and set the right menu alignment of the pop-up menu.","pos":[9509,9761]},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Custom Pages sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[9762,9846],"source":" This code snippet is part of the [Custom Pages sample](../../visual-cpp-samples.md)."},{"pos":[9864,9885],"content":"NVC_MFC_CustomPages#2"},{"content":"Inheritance Hierarchy","pos":[9959,9980]},{"content":"CObject","pos":[9985,9992]},{"content":"CCmdTarget","pos":[10039,10049]},{"content":"CWnd","pos":[10099,10103]},{"content":"CFrameWnd","pos":[10147,10156]},{"content":"CMiniFrameWnd","pos":[10205,10218]},{"content":"CMFCPopupMenu","pos":[10271,10284]},{"content":"Requirements","pos":[10338,10350]},{"pos":[10354,10380],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxpopupmenu.h","source":"**Header:** afxpopupmenu.h"},{"pos":[10439,10471],"content":"CMFCPopupMenu::ActivatePopupMenu"},{"content":"Parameters","pos":[10700,10710]},{"content":"[in]","pos":[10714,10718]},{"content":"[in]","pos":[10734,10738]},{"content":"Return Value","pos":[10761,10773]},{"content":"Remarks","pos":[10783,10790]},{"pos":[10857,10897],"content":"CMFCPopupMenu::AlwaysShowEmptyToolsEntry"},{"content":"Sets whether a pop-up menu is enabled to show empty entries for user-defined tools.","pos":[10901,10984]},{"content":"Parameters","pos":[11067,11077]},{"content":"[in]","pos":[11081,11085]},{"content":"if the pop-up menu can display empty entries; <ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[11104,11168],"source":" if the pop-up menu can display empty entries; `FALSE` otherwise."},{"pos":[11229,11263],"content":"CMFCPopupMenu::AreAllCommandsShown"},{"content":"Return Value","pos":[11428,11440]},{"content":"Remarks","pos":[11450,11457]},{"pos":[11508,11532],"content":"CMFCPopupMenu::CheckArea"},{"content":"Determines the location of a point relative to the pop-up menu.","pos":[11536,11599]},{"content":"Parameters","pos":[11682,11692]},{"content":"[in]","pos":[11696,11700]},{"content":"A point, in screen coordinates.","pos":[11715,11746]},{"content":"Return Value","pos":[11756,11768]},{"content":"A MENUAREA_TYPE parameter that indicates where the point is relative to the pop-up menu.","pos":[11772,11860]},{"content":"Remarks","pos":[11870,11877]},{"content":"A MENUAREA_TYPE parameter can have any one of the following values.","pos":[11881,11948]},{"pos":[11958,12006],"content":"OUTSIDE - <ph id=\"ph1\">`ptScreen`</ph> is outside the pop-up menu.","source":"OUTSIDE - `ptScreen` is outside the pop-up menu."},{"pos":[12016,12054],"content":"LOGO - <ph id=\"ph1\">`ptScreen`</ph> is over a logo area.","source":"LOGO - `ptScreen` is over a logo area."},{"pos":[12064,12122],"content":"TEAROFF_CAPTION - <ph id=\"ph1\">`ptScreen`</ph> is over the tear-off caption.","source":"TEAROFF_CAPTION - `ptScreen` is over the tear-off caption."},{"pos":[12132,12204],"content":"SHADOW_BOTTOM - <ph id=\"ph1\">`ptScreen`</ph> is over the bottom shadow of the pop-up menu.","source":"SHADOW_BOTTOM - `ptScreen` is over the bottom shadow of the pop-up menu."},{"pos":[12214,12284],"content":"SHADOW_RIGHT - <ph id=\"ph1\">`ptScreen`</ph> is over the right shadow of the pop-up menu.","source":"SHADOW_RIGHT - `ptScreen` is over the right shadow of the pop-up menu."},{"pos":[12294,12330],"content":"MENU - <ph id=\"ph1\">`ptScreen`</ph> is over a command.","source":"MENU - `ptScreen` is over a command."},{"pos":[12381,12405],"content":"CMFCPopupMenu::CloseMenu"},{"content":"Parameters","pos":[12578,12588]},{"pos":[12592,12596],"content":"[in]"},{"content":"Remarks","pos":[12623,12630]},{"pos":[12685,12713],"content":"CMFCPopupMenu::CMFCPopupMenu"},{"pos":[12717,12797],"content":"Constructs a <bpt id=\"p1\">[</bpt>CMFCPopupMenu<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> object.","source":"Constructs a [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) object."},{"content":"Parameters","pos":[12908,12918]},{"content":"[in]","pos":[12922,12926]},{"content":"A pointer to a customization page.","pos":[12942,12976]},{"content":"[in]","pos":[12983,12987]},{"content":"A string that contains the menu caption.","pos":[13003,13043]},{"content":"Remarks","pos":[13053,13060]},{"content":"This method allocates the resources for a <ph id=\"ph1\">`CMFCPopupMenu`</ph>.","pos":[13064,13122],"source":"This method allocates the resources for a `CMFCPopupMenu`."},{"content":"To create the pop-up menu item, call <bpt id=\"p1\">[</bpt>CMFCPopupMenu::Create<ept id=\"p1\">](#cmfcpopupmenu__create)</ept>.","pos":[13123,13208],"source":" To create the pop-up menu item, call [CMFCPopupMenu::Create](#cmfcpopupmenu__create)."},{"pos":[13256,13277],"content":"CMFCPopupMenu::Create"},{"pos":[13281,13391],"content":"Creates a pop-up menu and attaches it to a <bpt id=\"p1\">[</bpt>CMFCPopupMenu<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> object.","source":"Creates a pop-up menu and attaches it to a [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) object."},{"content":"Parameters","pos":[13565,13575]},{"content":"[in]","pos":[13579,13583]},{"content":"The parent window for the <ph id=\"ph1\">`CMFCPopupMenu`</ph>.","pos":[13600,13642],"source":" The parent window for the `CMFCPopupMenu`."},{"content":"[in]","pos":[13649,13653]},{"content":"The horizontal screen coordinate for the location of the pop-up menu","pos":[13661,13729]},{"content":"[in]","pos":[13736,13740]},{"content":"The vertical screen coordinate for the location of the pop-menu.","pos":[13748,13812]},{"content":"[in]","pos":[13819,13823]},{"content":"A handle to a menu resource.","pos":[13835,13863]},{"content":"[in]","pos":[13870,13874]},{"content":"A Boolean parameter that indicates whether the menu is customizable.","pos":[13888,13956]},{"content":"indicates that the pop-up menu is customizable.","pos":[13965,14012]},{"content":"[in]","pos":[14019,14023]},{"content":"A Boolean parameter that indicates how the framework routes the menu messages.","pos":[14041,14119]},{"content":"See the Remarks section for more details.","pos":[14120,14161]},{"content":"Return Value","pos":[14171,14183]},{"pos":[14194,14241],"content":"if the method is successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the method is successful; otherwise `FALSE`."},{"content":"Remarks","pos":[14251,14258]},{"content":"If <ph id=\"ph1\">`bOwnMessage`</ph> is <ph id=\"ph2\">`TRUE`</ph>, the framework routes any menu messages to <ph id=\"ph3\">`pWndParent`</ph>.","pos":[14262,14345],"source":"If `bOwnMessage` is `TRUE`, the framework routes any menu messages to `pWndParent`."},{"content":"must not be <ph id=\"ph1\">`NULL`</ph> if <ph id=\"ph2\">`bOwnMessage`</ph> is <ph id=\"ph3\">`TRUE.`</ph> If <ph id=\"ph4\">`bOwnMessage`</ph> is <ph id=\"ph5\">`FALSE`</ph>, the framework routes the menu messages to the parent pop-up menu.","pos":[14359,14500],"source":" must not be `NULL` if `bOwnMessage` is `TRUE.` If `bOwnMessage` is `FALSE`, the framework routes the menu messages to the parent pop-up menu."},{"content":"Example","pos":[14510,14517]},{"content":"The following example demonstrates how to use the <ph id=\"ph1\">`Create`</ph> method of the <ph id=\"ph2\">`CMFCPopuMenu`</ph> class.","pos":[14521,14615],"source":"The following example demonstrates how to use the `Create` method of the `CMFCPopuMenu` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Custom Pages sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[14616,14700],"source":" This code snippet is part of the [Custom Pages sample](../../visual-cpp-samples.md)."},{"pos":[14718,14739],"content":"NVC_MFC_CustomPages#1"},{"pos":[14862,14893],"content":"CMFCPopupMenu::CreateTearOffBar"},{"content":"Parameters","pos":[15121,15131]},{"content":"[in]","pos":[15135,15139]},{"content":"[in]","pos":[15154,15158]},{"content":"[in]","pos":[15169,15173]},{"content":"Return Value","pos":[15194,15206]},{"content":"Remarks","pos":[15216,15223]},{"pos":[15289,15328],"content":"CMFCPopupMenu::DefaultMouseClickOnClose"},{"content":"Return Value","pos":[15506,15518]},{"content":"Remarks","pos":[15528,15535]},{"pos":[15591,15620],"content":"CMFCPopupMenu::EnableMenuLogo"},{"content":"Initializes the logo for a pop-up menu.","pos":[15624,15663]},{"content":"Parameters","pos":[15781,15791]},{"content":"[in]","pos":[15795,15799]},{"content":"The size of the logo, in pixels.","pos":[15815,15847]},{"content":"[in]","pos":[15854,15858]},{"content":"An enumerated data type that indicates the location of the logo.","pos":[15878,15942]},{"content":"Remarks","pos":[15952,15959]},{"pos":[15963,16130],"content":"To display the logo, implement the method <bpt id=\"p1\">[</bpt>CFrameWndEx::OnDrawMenuLogo<ept id=\"p1\">](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenulogo)</ept> in the main frame window.","source":"To display the logo, implement the method [CFrameWndEx::OnDrawMenuLogo](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenulogo) in the main frame window."},{"pos":[16137,16250],"content":"The possible values for <ph id=\"ph1\">`nLogoLocation`</ph> are MENU_LOGO_LEFT, MENU_LOGO_RIGHT, MENU_LOGO_TOP, and MENU_LOGO_BOTTOM.","source":"The possible values for `nLogoLocation` are MENU_LOGO_LEFT, MENU_LOGO_RIGHT, MENU_LOGO_TOP, and MENU_LOGO_BOTTOM."},{"pos":[16307,16337],"content":"CMFCPopupMenu::EnableMenuSound"},{"content":"Enables menu sound.","pos":[16341,16360]},{"content":"Parameters","pos":[16435,16445]},{"content":"[in]","pos":[16449,16453]},{"content":"to enable sound, <ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[16474,16509],"source":" to enable sound, `FALSE` otherwise."},{"content":"Remarks","pos":[16519,16526]},{"content":"If you enable sound, the framework calls the <bpt id=\"p1\">[</bpt>PlaySound<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb774426)</ept> method when a user opens a pop-up menu or selects a menu command.","pos":[16530,16712],"source":"If you enable sound, the framework calls the [PlaySound](http://msdn.microsoft.com/library/windows/desktop/bb774426) method when a user opens a pop-up menu or selects a menu command."},{"content":"By default, this feature is enabled.","pos":[16713,16749]},{"pos":[16803,16830],"content":"CMFCPopupMenu::EnableResize"},{"content":"Parameters","pos":[16998,17008]},{"pos":[17012,17016],"content":"[in]"},{"content":"Remarks","pos":[17042,17049]},{"pos":[17106,17136],"content":"CMFCPopupMenu::EnableScrolling"},{"content":"Parameters","pos":[17299,17309]},{"pos":[17313,17317],"content":"[in]"},{"content":"Remarks","pos":[17334,17341]},{"pos":[17399,17430],"content":"CMFCPopupMenu::EnableVertResize"},{"content":"Parameters","pos":[17597,17607]},{"pos":[17611,17615],"content":"[in]"},{"content":"Remarks","pos":[17638,17645]},{"pos":[17707,17742],"content":"CMFCPopupMenu::FindSubItemByCommand"},{"content":"Parameters","pos":[17936,17946]},{"pos":[17950,17954],"content":"[in]"},{"content":"Return Value","pos":[17972,17984]},{"content":"Remarks","pos":[17994,18001]},{"pos":[18056,18084],"content":"CMFCPopupMenu::GetActiveMenu"},{"content":"Returns the currently active menu.","pos":[18088,18122]},{"content":"Return Value","pos":[18186,18198]},{"content":"A pointer to the active pop-up menu, or NULL if no pop-up menu is currently active.","pos":[18202,18285]},{"content":"Remarks","pos":[18295,18302]},{"content":"Each application can have at most one active pop-up menu.","pos":[18306,18363]},{"pos":[18422,18454],"content":"CMFCPopupMenu::GetAnimationSpeed"},{"content":"Returns the animation speed for pop-up menus.","pos":[18458,18503]},{"content":"Return Value","pos":[18561,18573]},{"content":"An integer that indicates the time, in milliseconds, that a pop-up menu animation takes to finish.","pos":[18577,18675]},{"content":"Remarks","pos":[18685,18692]},{"content":"The animation speed is a global value.","pos":[18696,18734]},{"content":"Use <bpt id=\"p1\">[</bpt>CMFCPopupMenu::SetAnimationSpeed<ept id=\"p1\">](#cmfcpopupmenu__setanimationspeed)</ept> to change the animation speed for pop-up menus.","pos":[18735,18856],"source":" Use [CMFCPopupMenu::SetAnimationSpeed](#cmfcpopupmenu__setanimationspeed) to change the animation speed for pop-up menus."},{"pos":[18914,18945],"content":"CMFCPopupMenu::GetAnimationType"},{"content":"Returns the current type of pop-up animation.","pos":[18949,18994]},{"content":"Parameters","pos":[19098,19108]},{"content":"[in]","pos":[19112,19116]},{"content":"A Boolean parameter that indicates whether this method checks the global value.","pos":[19132,19211]},{"content":"FALSE if you want this method to return the animation style for this instance of the <bpt id=\"p1\">[</bpt>CMFCPopupMenu Class<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept>.","pos":[19212,19363],"source":" FALSE if you want this method to return the animation style for this instance of the [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md)."},{"content":"Return Value","pos":[19373,19385]},{"content":"An enumerated value that describes the animation type.","pos":[19389,19443]},{"content":"Remarks","pos":[19453,19460]},{"content":"The style of animation for pop-up menus is global for your application.","pos":[19464,19535]},{"content":"Use <bpt id=\"p1\">[</bpt>CMFCPopupMenu::SetAnimationType<ept id=\"p1\">](#cmfcpopupmenu__setanimationtype)</ept> to set the animation style.","pos":[19536,19635],"source":" Use [CMFCPopupMenu::SetAnimationType](#cmfcpopupmenu__setanimationtype) to set the animation style."},{"content":"The following table lists the possible animation types.","pos":[19642,19697]},{"content":"NO_ANIMATION","pos":[19704,19716]},{"content":"The pop-up menu is not animated and appears immediately.","pos":[19720,19776]},{"content":"UNFOLD","pos":[19783,19789]},{"content":"The framework reveals the pop-up menu from the upper-left corner to the lower right corner.","pos":[19793,19884]},{"content":"SLIDE","pos":[19891,19896]},{"content":"The pop-up menu moves from top to bottom.","pos":[19900,19941]},{"content":"FADE","pos":[19948,19952]},{"content":"The pop-up menu first appears transparent and gradually solidifies.","pos":[19956,20023]},{"pos":[20081,20112],"content":"CMFCPopupMenu::GetDropDirection"},{"content":"Return Value","pos":[20284,20296]},{"content":"Remarks","pos":[20306,20313]},{"pos":[20372,20404],"content":"CMFCPopupMenu::GetForceMenuFocus"},{"content":"Indicates whether the focus is returned to the menu bar when a pop-up menu is displayed.","pos":[20408,20496]},{"content":"Return Value","pos":[20554,20566]},{"pos":[20577,20702],"content":"if the input focus is returned to the menu bar when a pop-up menu is displayed; <ph id=\"ph1\">`FALSE`</ph> if the pop-up menu retains the focus.","source":" if the input focus is returned to the menu bar when a pop-up menu is displayed; `FALSE` if the pop-up menu retains the focus."},{"content":"Remarks","pos":[20712,20719]},{"content":"By default, your application does not return focus to the menu bar.","pos":[20723,20790]},{"content":"To change this setting, use <bpt id=\"p1\">[</bpt>CMFCPopupMenu::SetForceMenuFocus<ept id=\"p1\">](#cmfcpopupmenu__setforcemenufocus)</ept>.","pos":[20791,20889],"source":" To change this setting, use [CMFCPopupMenu::SetForceMenuFocus](#cmfcpopupmenu__setforcemenufocus)."},{"pos":[20945,20974],"content":"CMFCPopupMenu::GetForceShadow"},{"content":"Return Value","pos":[21142,21154]},{"content":"Remarks","pos":[21164,21171]},{"pos":[21221,21244],"content":"CMFCPopupMenu::GetHMenu"},{"content":"Returns a handle to the attached menu resource.","pos":[21248,21295]},{"pos":[21380,21405],"content":"CMFCPopupMenu::GetMenuBar"},{"pos":[21409,21519],"content":"Returns the <bpt id=\"p1\">[</bpt>CMFCPopupMenuBar<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenubar-class.md)</ept> embedded inside the pop-up menu.","source":"Returns the [CMFCPopupMenuBar](../../mfc/reference/cmfcpopupmenubar-class.md) embedded inside the pop-up menu."},{"content":"Return Value","pos":[21584,21596]},{"pos":[21600,21645],"content":"A pointer to the embedded <ph id=\"ph1\">`CMFCPopupMenuBar`</ph>.","source":"A pointer to the embedded `CMFCPopupMenuBar`."},{"content":"Remarks","pos":[21655,21662]},{"content":"The pop-up menu has an embedded <ph id=\"ph1\">`CMFCPopupMenuBar`</ph> object.","pos":[21666,21724],"source":"The pop-up menu has an embedded `CMFCPopupMenuBar` object."},{"content":"You must override this method in a derived class if you are using a different embedded class.","pos":[21725,21818]},{"pos":[21871,21897],"content":"CMFCPopupMenu::GetMenuItem"},{"content":"Returns a pointer to the menu item at the specified index.","pos":[21901,21959]},{"content":"Parameters","pos":[22041,22051]},{"content":"[in]","pos":[22055,22059]},{"content":"The zero-based index of a menu item.","pos":[22072,22108]},{"content":"Return Value","pos":[22118,22130]},{"content":"A pointer to a menu item.","pos":[22134,22159]},{"content":"if the index is invalid.","pos":[22167,22191]},{"content":"Remarks","pos":[22201,22208]},{"content":"Menu items are represented by the <bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept>.","pos":[22212,22328],"source":"Menu items are represented by the [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md)."},{"content":"When you call this method, it returns a pointer to the appropriate <ph id=\"ph1\">`CMFCToolBarMenuButton`</ph>.","pos":[22329,22420],"source":" When you call this method, it returns a pointer to the appropriate `CMFCToolBarMenuButton`."},{"pos":[22478,22509],"content":"CMFCPopupMenu::GetMenuItemCount"},{"content":"Returns the number of items in a pop-up menu.","pos":[22513,22558]},{"content":"Return Value","pos":[22616,22628]},{"content":"The number of items in the menu.","pos":[22632,22664]},{"pos":[22719,22747],"content":"CMFCPopupMenu::GetMessageWnd"},{"content":"Returns a pointer to the window where the framework routes the pop-up menu messages.","pos":[22751,22835]},{"content":"Return Value","pos":[22892,22904]},{"pos":[22908,23001],"content":"A pointer to the window that receives the pop-up menu messages; <ph id=\"ph1\">`NULL`</ph> if there is no window.","source":"A pointer to the window that receives the pop-up menu messages; `NULL` if there is no window."},{"content":"Remarks","pos":[23011,23018]},{"pos":[23022,23170],"content":"When you use the method <bpt id=\"p1\">[</bpt>CMFCPopupMenu::Create<ept id=\"p1\">](#cmfcpopupmenu__create)</ept> to create a pop-up menu, you specify what window receives the menu messages.","source":"When you use the method [CMFCPopupMenu::Create](#cmfcpopupmenu__create) to create a pop-up menu, you specify what window receives the menu messages."},{"pos":[23225,23253],"content":"CMFCPopupMenu::GetParentArea"},{"content":"Parameters","pos":[23432,23442]},{"pos":[23446,23450],"content":"[in]"},{"content":"Return Value","pos":[23476,23488]},{"content":"Remarks","pos":[23498,23505]},{"pos":[23562,23592],"content":"CMFCPopupMenu::GetParentButton"},{"content":"Returns a pointer to the parent toolbar button.","pos":[23596,23643]},{"content":"Return Value","pos":[23719,23731]},{"content":"A pointer to the parent toolbar button.","pos":[23735,23774]},{"content":"if the pop-up menu has no parent toolbar button.","pos":[23782,23830]},{"content":"Remarks","pos":[23840,23847]},{"content":"A <bpt id=\"p1\">[</bpt>CMFCPopupMenu<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> can be associated with a button on the menu.","pos":[23851,23957],"source":"A [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) can be associated with a button on the menu."},{"content":"In this scenario, the pop-up menu appears when a user selects the parent toolbar button.","pos":[23958,24046]},{"content":"If the pop-up menu is a shortcut menu, it will have no parent toolbar button.","pos":[24053,24130]},{"pos":[24190,24223],"content":"CMFCPopupMenu::GetParentPopupMenu"},{"content":"Returns a pointer to the parent pop-up menu.","pos":[24227,24271]},{"content":"Return Value","pos":[24342,24354]},{"pos":[24358,24491],"content":"A pointer to the parent <bpt id=\"p1\">[</bpt>CMFCPopupMenu<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> object; <ph id=\"ph1\">`NULL`</ph> if there is no parent pop-up menu.","source":"A pointer to the parent [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) object; `NULL` if there is no parent pop-up menu."},{"content":"Remarks","pos":[24501,24508]},{"pos":[24512,24586],"content":"A pop-up menu has a parent <ph id=\"ph1\">`CMFCPopupMenu`</ph> object only if it is a submenu.","source":"A pop-up menu has a parent `CMFCPopupMenu` object only if it is a submenu."},{"pos":[24650,24687],"content":"CMFCPopupMenu::GetParentRibbonElement"},{"content":"Return Value","pos":[24873,24885]},{"content":"Remarks","pos":[24895,24902]},{"pos":[24960,24991],"content":"CMFCPopupMenu::GetParentToolBar"},{"content":"Returns a pointer to the parent toolbar.","pos":[24995,25035]},{"content":"Return Value","pos":[25102,25114]},{"content":"A pointer to the parent toolbar.","pos":[25118,25150]},{"content":"if the pop-up menu has no parent toolbar.","pos":[25158,25199]},{"content":"Remarks","pos":[25209,25216]},{"pos":[25220,25337],"content":"If the <bpt id=\"p1\">[</bpt>CMFCPopupMenu<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> is a shortcut menu, then it has no parent toolbar.","source":"If the [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) is a shortcut menu, then it has no parent toolbar."},{"pos":[25400,25436],"content":"CMFCPopupMenu::GetQuickCustomizeType"},{"content":"Return Value","pos":[25619,25631]},{"content":"Remarks","pos":[25641,25648]},{"pos":[25700,25725],"content":"CMFCPopupMenu::GetSelItem"},{"content":"Returns a pointer to the currently selected menu command.","pos":[25729,25786]},{"content":"Return Value","pos":[25848,25860]},{"pos":[25864,25944],"content":"A pointer to the currently selected menu command; <ph id=\"ph1\">`NULL`</ph> if no item is selected.","source":"A pointer to the currently selected menu command; `NULL` if no item is selected."},{"content":"Remarks","pos":[25954,25961]},{"pos":[25965,26154],"content":"The menu commands on a pop-up menu are represented by the <bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept>, or a class derived from <ph id=\"ph1\">`CMFCToolBarMenuButton`</ph>.","source":"The menu commands on a pop-up menu are represented by the [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md), or a class derived from `CMFCToolBarMenuButton`."},{"pos":[26210,26239],"content":"CMFCPopupMenu::HasBeenResized"},{"content":"Return Value","pos":[26399,26411]},{"content":"Remarks","pos":[26421,26428]},{"pos":[26492,26529],"content":"CMFCPopupMenu::HideRarelyUsedCommands"},{"content":"Indicates whether the pop-up menu can hide rarely used commands.","pos":[26533,26597]},{"content":"Return Value","pos":[26662,26674]},{"pos":[26685,26757],"content":"if the pop-up menu can hide the rarely used commands; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pop-up menu can hide the rarely used commands; otherwise `FALSE`."},{"content":"Remarks","pos":[26767,26774]},{"content":"This method specifies only whether a pop-up menu can hide rarely used commands, not if that configuration is enabled.","pos":[26778,26895]},{"content":"A pop-up menu can hide rarely used commands if it has a parent button and the parent window is derived from the <bpt id=\"p1\">[</bpt>CMFCMenuBar Class<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md)</ept>.","pos":[26896,27070],"source":" A pop-up menu can hide rarely used commands if it has a parent button and the parent window is derived from the [CMFCMenuBar Class](../../mfc/reference/cmfcmenubar-class.md)."},{"content":"Use <bpt id=\"p1\">[</bpt>CMFCMenuBar::SetRecentlyUsedMenus<ept id=\"p1\">](../../mfc/reference/cmfcmenubar-class.md#cmfcmenubar__setrecentlyusedmenus)</ept> to enable this feature and <bpt id=\"p2\">[</bpt>CMFCMenuBar::IsRecentlyUsedMenus<ept id=\"p2\">](../../mfc/reference/cmfcmenubar-class.md#cmfcmenubar__isrecentlyusedmenus)</ept> to determine if this feature is currently enabled.","pos":[27071,27374],"source":" Use [CMFCMenuBar::SetRecentlyUsedMenus](../../mfc/reference/cmfcmenubar-class.md#cmfcmenubar__setrecentlyusedmenus) to enable this feature and [CMFCMenuBar::IsRecentlyUsedMenus](../../mfc/reference/cmfcmenubar-class.md#cmfcmenubar__isrecentlyusedmenus) to determine if this feature is currently enabled."},{"content":"You must call both of these methods for the parent window.","pos":[27375,27433]},{"pos":[27484,27508],"content":"CMFCPopupMenu::InCommand"},{"content":"Return Value","pos":[27662,27674]},{"content":"Remarks","pos":[27684,27691]},{"pos":[27743,27768],"content":"CMFCPopupMenu::InsertItem"},{"content":"Inserts a new item into the pop-up menu at the specified location.","pos":[27772,27838]},{"content":"Parameters","pos":[27946,27956]},{"content":"[in]","pos":[27960,27964]},{"content":"A reference to the menu item to add.","pos":[27977,28013]},{"content":"[in]","pos":[28020,28024]},{"content":"The zero-based index for the new item.","pos":[28040,28078]},{"content":"If <ph id=\"ph1\">`iInsertAt`</ph> is -1, the item is added to the end of the menu.","pos":[28079,28142],"source":" If `iInsertAt` is -1, the item is added to the end of the menu."},{"content":"Return Value","pos":[28152,28164]},{"content":"The zero-based index of the position where the item was inserted.","pos":[28168,28233]},{"content":"-1 if the method fails.","pos":[28234,28257]},{"content":"Remarks","pos":[28267,28274]},{"pos":[28278,28429],"content":"This method will fail if you provide an invalid value for <ph id=\"ph1\">`iInsertAt`</ph>, such as an integer larger than the number of items currently on the pop-up menu.","source":"This method will fail if you provide an invalid value for `iInsertAt`, such as an integer larger than the number of items currently on the pop-up menu."},{"pos":[28486,28516],"content":"CMFCPopupMenu::InsertSeparator"},{"content":"Inserts a separator into the pop-up menu at the specified location.","pos":[28520,28587]},{"content":"Parameters","pos":[28653,28663]},{"content":"[in]","pos":[28667,28671]},{"content":"The zero-based index of the position where this method will insert the separator.","pos":[28687,28768]},{"content":"Return Value","pos":[28778,28790]},{"content":"The zero-based index of the position where the separator was inserted.","pos":[28794,28864]},{"content":"-1 if this method fails.","pos":[28865,28889]},{"content":"Remarks","pos":[28899,28906]},{"pos":[28910,29011],"content":"A value of -1 for <ph id=\"ph1\">`iInsertAt`</ph> means this method will add the separator to the end of the pop-up menu.","source":"A value of -1 for `iInsertAt` means this method will add the separator to the end of the pop-up menu."},{"pos":[29018,29071],"content":"This method fails if <ph id=\"ph1\">`iInsertAt`</ph> is an invalid value.","source":"This method fails if `iInsertAt` is an invalid value."},{"pos":[29126,29154],"content":"CMFCPopupMenu::IsAlwaysClose"},{"content":"Return Value","pos":[29321,29333]},{"content":"Remarks","pos":[29343,29350]},{"pos":[29419,29461],"content":"CMFCPopupMenu::IsAlwaysShowEmptyToolsEntry"},{"content":"Return Value","pos":[29642,29654]},{"content":"Remarks","pos":[29664,29671]},{"pos":[29728,29758],"content":"CMFCPopupMenu::IsCustomizePane"},{"pos":[29762,29839],"content":"Indicates whether the pop-up menu is functioning as a <bpt id=\"p1\">**</bpt>QuickCustomizePane<ept id=\"p1\">**</ept>.","source":"Indicates whether the pop-up menu is functioning as a **QuickCustomizePane**."},{"content":"Return Value","pos":[29888,29900]},{"pos":[29911,29971],"content":"if the pop-up is a <bpt id=\"p1\">**</bpt>QuckCustomizePane<ept id=\"p1\">**</ept>; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pop-up is a **QuckCustomizePane**; otherwise `FALSE`."},{"content":"Remarks","pos":[29981,29988]},{"content":"Use the <bpt id=\"p1\">**</bpt>QuickCustomizePane<ept id=\"p1\">**</ept> to enable the user to directly customize the pop-up menu.","pos":[29992,30080],"source":"Use the **QuickCustomizePane** to enable the user to directly customize the pop-up menu."},{"content":"The <bpt id=\"p1\">**</bpt>QuickCustomizePane<ept id=\"p1\">**</ept> is a <bpt id=\"p2\">[</bpt>CMFCPopupMenu<ept id=\"p2\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> that appears when the user clicks on a toolbar button to edit it directly.","pos":[30081,30247],"source":" The **QuickCustomizePane** is a [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) that appears when the user clicks on a toolbar button to edit it directly."},{"pos":[30254,30421],"content":"Your application should call this method during <bpt id=\"p1\">[</bpt>CMDIFrameWndEx::OnShowCustomizePane<ept id=\"p1\">](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__onshowcustomizepane)</ept>.","source":"Your application should call this method during [CMDIFrameWndEx::OnShowCustomizePane](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__onshowcustomizepane)."},{"pos":[30473,30498],"content":"CMFCPopupMenu::IsEscClose"},{"content":"Return Value","pos":[30645,30657]},{"content":"Remarks","pos":[30667,30674]},{"pos":[30722,30743],"content":"CMFCPopupMenu::IsIdle"},{"content":"Indicates whether a pop-up menu is currently idle.","pos":[30747,30797]},{"content":"Return Value","pos":[30854,30866]},{"pos":[30877,30931],"content":"if the pop-up menu is in idle mode; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the pop-up menu is in idle mode; otherwise `FALSE`."},{"content":"Remarks","pos":[30941,30948]},{"content":"By default, a pop-up menu is in idle mode if the display animation is complete and the user is not scrolling the pop-up menu.","pos":[30952,31077]},{"pos":[31130,31156],"content":"CMFCPopupMenu::IsMenuSound"},{"content":"Return Value","pos":[31321,31333]},{"content":"Remarks","pos":[31343,31350]},{"pos":[31408,31439],"content":"CMFCPopupMenu::IsQuickCustomize"},{"pos":[31443,31585],"content":"Determines whether the associated <bpt id=\"p1\">[</bpt>CMFCToolBarMenuButton Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarmenubutton-class.md)</ept> is in QuickCustomize mode.","source":"Determines whether the associated [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md) is in QuickCustomize mode."},{"content":"Return Value","pos":[31635,31647]},{"content":"if the associated menu button is in QuickCustomize mode; otherwise <ph id=\"ph1\">`FALSE`</ph>.","pos":[31658,31733],"source":" if the associated menu button is in QuickCustomize mode; otherwise `FALSE`."},{"content":"This method will also return <ph id=\"ph1\">`FALSE`</ph> if the pop-up menu is not associated with a <ph id=\"ph2\">`CMFCToolBarMenuButton`</ph>.","pos":[31734,31839],"source":" This method will also return `FALSE` if the pop-up menu is not associated with a `CMFCToolBarMenuButton`."},{"content":"Remarks","pos":[31849,31856]},{"content":"In QuickCustomize mode the user selects a button on a toolbar to customize the button directly.","pos":[31860,31955]},{"pos":[32008,32034],"content":"CMFCPopupMenu::IsResizeble"},{"content":"Return Value","pos":[32191,32203]},{"content":"Remarks","pos":[32213,32220]},{"pos":[32274,32301],"content":"CMFCPopupMenu::IsRightAlign"},{"content":"Indicates whether the menu is right-aligned or left-aligned.","pos":[32305,32365]},{"content":"Return Value","pos":[32420,32432]},{"pos":[32443,32506],"content":"if the menu is right-aligned; <ph id=\"ph1\">`FALSE`</ph> if the menu left-aligned.","source":" if the menu is right-aligned; `FALSE` if the menu left-aligned."},{"content":"Remarks","pos":[32516,32523]},{"content":"You can use <bpt id=\"p1\">[</bpt>CMFCPopupMenu::SetRightAlign<ept id=\"p1\">](#cmfcpopupmenu__setrightalign)</ept> to set the menu alignment.","pos":[32527,32627],"source":"You can use [CMFCPopupMenu::SetRightAlign](#cmfcpopupmenu__setrightalign) to set the menu alignment."},{"content":"By default, pop-up menus use left-alignment.","pos":[32628,32672]},{"content":"Menu alignment is not a global setting and can vary between pop-up menus.","pos":[32679,32752]},{"pos":[32806,32833],"content":"CMFCPopupMenu::IsScrollable"},{"content":"Return Value","pos":[32991,33003]},{"content":"Remarks","pos":[33013,33020]},{"pos":[33081,33115],"content":"CMFCPopupMenu::IsSendMenuSelectMsg"},{"content":"Indicates whether the framework notifies the parent frame when the user selects a command from the pop-up menu.","pos":[33119,33230]},{"content":"Return Value","pos":[33290,33302]},{"pos":[33313,33375],"content":"if the framework notifies the parent frame; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the framework notifies the parent frame; otherwise `FALSE`."},{"content":"Remarks","pos":[33385,33392]},{"pos":[33396,33513],"content":"The framework notifies the parent frame by sending it the <ph id=\"ph1\">`WM_MENUSELECT`</ph> message when a used selects a menu command.","source":"The framework notifies the parent frame by sending it the `WM_MENUSELECT` message when a used selects a menu command."},{"pos":[33562,33584],"content":"CMFCPopupMenu::IsShown"},{"content":"Indicates whether the pop-up menu is currently visible.","pos":[33588,33643]},{"content":"Return Value","pos":[33693,33705]},{"pos":[33716,33763],"content":"if a pop-up menu is visible; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if a pop-up menu is visible; otherwise `FALSE`."},{"pos":[33811,33832],"content":"CMFCPopupMenu::MoveTo"},{"content":"Parameters","pos":[33991,34001]},{"pos":[34005,34009],"content":"[in]"},{"content":"Remarks","pos":[34024,34031]},{"pos":[34084,34110],"content":"CMFCPopupMenu::OnChangeHot"},{"content":"Parameters","pos":[34274,34284]},{"pos":[34288,34292],"content":"[in]"},{"content":"Remarks","pos":[34309,34316]},{"pos":[34370,34397],"content":"CMFCPopupMenu::OnChooseItem"},{"content":"Parameters","pos":[34567,34577]},{"pos":[34581,34585],"content":"[in]"},{"content":"Remarks","pos":[34606,34613]},{"pos":[34663,34686],"content":"CMFCPopupMenu::OnCmdMsg"},{"content":"Parameters","pos":[34929,34939]},{"content":"[in]","pos":[34943,34947]},{"content":"[in]","pos":[34957,34961]},{"content":"[in]","pos":[34973,34977]},{"content":"[in]","pos":[34990,34994]},{"content":"Return Value","pos":[35019,35031]},{"content":"Remarks","pos":[35041,35048]},{"pos":[35101,35127],"content":"CMFCPopupMenu::PostCommand"},{"content":"Parameters","pos":[35291,35301]},{"pos":[35305,35309],"content":"[in]"},{"content":"Return Value","pos":[35333,35345]},{"content":"Remarks","pos":[35355,35362]},{"pos":[35423,35457],"content":"CMFCPopupMenu::PreTranslateMessage"},{"content":"Parameters","pos":[35630,35640]},{"pos":[35644,35648],"content":"[in]"},{"content":"Return Value","pos":[35665,35677]},{"content":"Remarks","pos":[35687,35694]},{"pos":[35748,35775],"content":"CMFCPopupMenu::RecalcLayout"},{"content":"Parameters","pos":[35951,35961]},{"pos":[35965,35969],"content":"[in]"},{"content":"Remarks","pos":[35989,35996]},{"pos":[36052,36081],"content":"CMFCPopupMenu::RemoveAllItems"},{"content":"Clears all the items from a pop-up menu.","pos":[36085,36125]},{"pos":[36215,36240],"content":"CMFCPopupMenu::RemoveItem"},{"content":"Removes the specified item from the pop-up menu.","pos":[36244,36292]},{"content":"Parameters","pos":[36346,36356]},{"content":"[in]","pos":[36360,36364]},{"content":"The zero-based index of the item to delete.","pos":[36377,36420]},{"content":"Return Value","pos":[36430,36442]},{"pos":[36453,36500],"content":"if the method is successful; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the method is successful; otherwise `FALSE`."},{"content":"Remarks","pos":[36510,36517]},{"content":"This method automatically arranges any separators that are affected by the removal of an item.","pos":[36521,36615]},{"content":"For more information about how the framework rearranges separators, see <bpt id=\"p1\">[</bpt>CMFCToolBar::RemoveButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__removebutton)</ept>.","pos":[36616,36784],"source":" For more information about how the framework rearranges separators, see [CMFCToolBar::RemoveButton](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__removebutton)."},{"pos":[36835,36859],"content":"CMFCPopupMenu::SaveState"},{"content":"Remarks","pos":[37013,37020]},{"pos":[37079,37111],"content":"CMFCPopupMenu::SetAnimationSpeed"},{"content":"Sets the animation speed for pop-up menus.","pos":[37115,37157]},{"content":"Parameters","pos":[37227,37237]},{"content":"[in]","pos":[37241,37245]},{"content":"The new animation speed, in milliseconds.","pos":[37259,37300]},{"content":"Remarks","pos":[37310,37317]},{"content":"The animation speed is a global value and affects all the pop-up menus in the application.","pos":[37321,37411]},{"content":"This value specifies how long it takes for the animation for a pop-up menu to finish.","pos":[37412,37497]},{"content":"By default, this parameter is set to 30 milliseconds.","pos":[37504,37557]},{"content":"The range of valid values for <ph id=\"ph1\">`nElapse`</ph> is from 0 to 200.","pos":[37558,37615],"source":" The range of valid values for `nElapse` is from 0 to 200."},{"pos":[37673,37704],"content":"CMFCPopupMenu::SetAnimationType"},{"content":"Sets the animation type for this pop-up menu.","pos":[37708,37753]},{"content":"Parameters","pos":[37844,37854]},{"content":"[in]","pos":[37858,37862]},{"content":"An enumerated data type that specifies the type of animation.","pos":[37873,37934]},{"content":"Remarks","pos":[37944,37951]},{"pos":[37955,38065],"content":"See <bpt id=\"p1\">[</bpt>CMFCPopupMenu::GetAnimationType<ept id=\"p1\">](#cmfcpopupmenu__getanimationtype)</ept> for a list of valid values for <ph id=\"ph1\">`type`</ph>.","source":"See [CMFCPopupMenu::GetAnimationType](#cmfcpopupmenu__getanimationtype) for a list of valid values for `type`."},{"pos":[38121,38150],"content":"CMFCPopupMenu::SetAutoDestroy"},{"content":"Parameters","pos":[38325,38335]},{"pos":[38339,38343],"content":"[in]"},{"content":"Remarks","pos":[38368,38375]},{"pos":[38431,38460],"content":"CMFCPopupMenu::SetDefaultItem"},{"content":"Sets the default command for the pop-up menu.","pos":[38464,38509]},{"content":"Parameters","pos":[38567,38577]},{"content":"[in]","pos":[38581,38585]},{"content":"The menu command ID of the new default command.","pos":[38597,38644]},{"content":"Remarks","pos":[38654,38661]},{"content":"The default command in the pop-up menu is the command that is selected when the pop-up menu appears.","pos":[38665,38765]},{"pos":[38824,38856],"content":"CMFCPopupMenu::SetForceMenuFocus"},{"content":"Forces the input focus to return to the menu bar when a pop-up menu is displayed.","pos":[38860,38941]},{"content":"Parameters","pos":[39010,39020]},{"content":"[in]","pos":[39024,39028]},{"content":"if you want the framework to force the input focus to the menu bar when a pop-up menu is displayed.","pos":[39048,39147]},{"content":"if you want the pop-up menu to retain the focus.","pos":[39156,39204]},{"content":"Remarks","pos":[39214,39221]},{"content":"This method sets a flag that is global for all pop-up menus in the application.","pos":[39225,39304]},{"content":"By default, this feature is not enabled.","pos":[39305,39345]},{"pos":[39401,39430],"content":"CMFCPopupMenu::SetForceShadow"},{"content":"Forces the framework to draw menu shadows when pop-up menus appear outside the main frame.","pos":[39434,39524]},{"content":"Parameters","pos":[39590,39600]},{"content":"[in]","pos":[39604,39608]},{"content":"if you want the framework to draw menu shadows, <ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[39628,39694],"source":" if you want the framework to draw menu shadows, `FALSE` otherwise."},{"content":"Remarks","pos":[39704,39711]},{"content":"When you call this method, it sets a global flag in your application.","pos":[39715,39784]},{"content":"This flag affects all pop-up menus in your application.","pos":[39785,39840]},{"pos":[39893,39919],"content":"CMFCPopupMenu::SetMaxWidth"},{"content":"Set the maximum width for the pop-up menu.","pos":[39923,39965]},{"content":"Parameters","pos":[40023,40033]},{"content":"[in]","pos":[40037,40041]},{"content":"The maximum width for the pop-up menu, in pixels.","pos":[40057,40106]},{"content":"Remarks","pos":[40116,40123]},{"content":"If the text associated with a menu command will not fit in the maximum width, it is truncated and the part that does not fit is replaced by three dots.","pos":[40127,40278]},{"pos":[40333,40361],"content":"CMFCPopupMenu::SetMessageWnd"},{"content":"Parameters","pos":[40524,40534]},{"pos":[40538,40542],"content":"[in]"},{"content":"Remarks","pos":[40562,40569]},{"pos":[40633,40670],"content":"CMFCPopupMenu::SetParentRibbonElement"},{"content":"Parameters","pos":[40857,40867]},{"pos":[40871,40875],"content":"[in]"},{"content":"Remarks","pos":[40893,40900]},{"pos":[40963,40999],"content":"CMFCPopupMenu::SetQuickCustomizeType"},{"content":"Parameters","pos":[41182,41192]},{"pos":[41196,41200],"content":"[in]"},{"content":"Remarks","pos":[41217,41224]},{"pos":[41278,41305],"content":"CMFCPopupMenu::SetQuickMode"},{"content":"Remarks","pos":[41454,41461]},{"pos":[41516,41544],"content":"CMFCPopupMenu::SetRightAlign"},{"content":"Sets the menu alignment for pop-up menus.","pos":[41548,41589]},{"content":"Parameters","pos":[41659,41669]},{"content":"[in]","pos":[41673,41677]},{"content":"A Boolean that indicates the menu alignment.","pos":[41695,41739]},{"content":"indicates right alignment, <ph id=\"ph1\">`FALSE`</ph> indicates left alignment.","pos":[41747,41807],"source":" indicates right alignment, `FALSE` indicates left alignment."},{"content":"Remarks","pos":[41817,41824]},{"content":"By default, all pop-up menus are left-aligned.","pos":[41828,41874]},{"pos":[41936,41971],"content":"CMFCPopupMenu::SetSendMenuSelectMsg"},{"content":"Sets a flag that controls whether the pop-up menu notifies its parent frame when the user selects a command.","pos":[41975,42083]},{"content":"Parameters","pos":[42160,42170]},{"content":"[in]","pos":[42174,42178]},{"content":"if the pop-up menu notifies its parent frame, <ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[42196,42260],"source":" if the pop-up menu notifies its parent frame, `FALSE` otherwise."},{"content":"Remarks","pos":[42270,42277]},{"content":"This is a global option for all the pop-up menus in an application.","pos":[42281,42348]},{"content":"If it is enabled, the pop-up menus will send a <ph id=\"ph1\">`WM_MENUSELECT`</ph> message to the parent frame when the user selects a command.","pos":[42349,42472],"source":" If it is enabled, the pop-up menus will send a `WM_MENUSELECT` message to the parent frame when the user selects a command."},{"pos":[42529,42559],"content":"CMFCPopupMenu::ShowAllCommands"},{"content":"Forces the pop-up menu to display all commands.","pos":[42563,42610]},{"content":"Remarks","pos":[42659,42666]},{"content":"This is not a global setting and affects only the current pop-up menu.","pos":[42670,42740]},{"pos":[42795,42823],"content":"CMFCPopupMenu::TriggerResize"},{"content":"Remarks","pos":[42973,42980]},{"pos":[43038,43069],"content":"CMFCPopupMenu::UpdateAllShadows"},{"content":"Updates the shadows for all opened pop-up menus.","pos":[43073,43121]},{"content":"Parameters","pos":[43204,43214]},{"content":"[in]","pos":[43218,43222]},{"content":"A rectangle that specifies the region to update, in screen coordinates.","pos":[43241,43312]},{"content":"Remarks","pos":[43322,43329]},{"content":"This method is useful when pop-up menus are displayed over animated controls or other windows that have dynamic content.","pos":[43333,43453]},{"pos":[43507,43534],"content":"CMFCPopupMenu::UpdateShadow"},{"content":"Updates the shadow for the pop-up menu.","pos":[43538,43577]},{"content":"Parameters","pos":[43649,43659]},{"content":"[in]","pos":[43663,43667]},{"content":"A rectangle, in screen coordinates, that specifies the boundaries of the region to update.","pos":[43686,43776]},{"content":"Remarks","pos":[43786,43793]},{"content":"Call this method when a pop-up menu that has a shadow overlaps an animated image.","pos":[43797,43878]},{"content":"See Also","pos":[43887,43895]},{"content":"Hierarchy Chart","pos":[43900,43915]},{"content":"Classes","pos":[43952,43959]},{"content":"CMFCPopupMenuBar Class","pos":[44002,44024]}],"content":"---\ntitle: \"CMFCPopupMenu Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCPopupMenu\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCPopupMenu class\"\nms.assetid: 9555dca1-8c9c-44c9-af72-0659ddad128e\ncaps.latest.revision: 40\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCPopupMenu Class\nImplements Windows pop-up menu functionality and extends it by adding features such as tear-off menus and tooltips.  \n  \n## Syntax  \n  \n```  \nclass CMFCPopupMenu : public CMiniFrameWnd  \n```  \n  \n## Members  \n  \n### Protected Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCPopupMenu::CMFCPopupMenu](#cmfcpopupmenu__cmfcpopupmenu)|Constructs a `CMFCPopupMenu` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCPopupMenu::ActivatePopupMenu](#cmfcpopupmenu__activatepopupmenu)||  \n|[CMFCPopupMenu::AlwaysShowEmptyToolsEntry](#cmfcpopupmenu__alwaysshowemptytoolsentry)|Sets whether a pop-up menu is enabled to show empty entries for user-defined tools.|  \n|[CMFCPopupMenu::AreAllCommandsShown](#cmfcpopupmenu__areallcommandsshown)||  \n|[CMFCPopupMenu::CheckArea](#cmfcpopupmenu__checkarea)|Determines the location of a point relative to the pop-up menu.|  \n|[CMFCPopupMenu::CloseMenu](#cmfcpopupmenu__closemenu)||  \n|[CMFCPopupMenu::Create](#cmfcpopupmenu__create)|Creates a pop-up menu and attaches it to the `CMFCPopupMenu` object.|  \n|[CMFCPopupMenu::DefaultMouseClickOnClose](#cmfcpopupmenu__defaultmouseclickonclose)||  \n|[CMFCPopupMenu::EnableMenuLogo](#cmfcpopupmenu__enablemenulogo)|Initializes the logo for a pop-up menu.|  \n|[CMFCPopupMenu::EnableMenuSound](#cmfcpopupmenu__enablemenusound)|Enables menu sound.|  \n|[CMFCPopupMenu::EnableResize](#cmfcpopupmenu__enableresize)||  \n|[CMFCPopupMenu::EnableScrolling](#cmfcpopupmenu__enablescrolling)||  \n|[CMFCPopupMenu::EnableVertResize](#cmfcpopupmenu__enablevertresize)||  \n|[CMFCPopupMenu::FindSubItemByCommand](#cmfcpopupmenu__findsubitembycommand)||  \n|[CMFCPopupMenu::GetActiveMenu](#cmfcpopupmenu__getactivemenu)|Returns the currently active menu.|  \n|[CMFCPopupMenu::GetAnimationSpeed](#cmfcpopupmenu__getanimationspeed)|Returns the animation speed for pop-up menus.|  \n|[CMFCPopupMenu::GetAnimationType](#cmfcpopupmenu__getanimationtype)|Returns the current type of pop-up menu animation.|  \n|[CMFCPopupMenu::GetDropDirection](#cmfcpopupmenu__getdropdirection)||  \n|[CMFCPopupMenu::GetForceMenuFocus](#cmfcpopupmenu__getforcemenufocus)|Indicates whether the focus is returned to the menu bar when a pop-up menu is displayed.|  \n|[CMFCPopupMenu::GetForceShadow](#cmfcpopupmenu__getforceshadow)||  \n|[CMFCPopupMenu::GetHMenu](#cmfcpopupmenu__gethmenu)|Returns a handle to the attached menu resource.|  \n|[CMFCPopupMenu::GetMenuBar](#cmfcpopupmenu__getmenubar)|Returns the [CMFCPopupMenuBar](../../mfc/reference/cmfcpopupmenubar-class.md) embedded inside the pop-up menu.|  \n|[CMFCPopupMenu::GetMenuItem](#cmfcpopupmenu__getmenuitem)|Returns a pointer to the menu item at the specified index.|  \n|[CMFCPopupMenu::GetMenuItemCount](#cmfcpopupmenu__getmenuitemcount)|Returns the number of items in a popup menu.|  \n|[CMFCPopupMenu::GetMessageWnd](#cmfcpopupmenu__getmessagewnd)|Returns a pointer to the window where the framework routes the pop-up menu messages.|  \n|[CMFCPopupMenu::GetParentArea](#cmfcpopupmenu__getparentarea)||  \n|[CMFCPopupMenu::GetParentButton](#cmfcpopupmenu__getparentbutton)|Returns a pointer to the parent toolbar button.|  \n|[CMFCPopupMenu::GetParentPopupMenu](#cmfcpopupmenu__getparentpopupmenu)|Returns a pointer to the parent pop-up menu.|  \n|[CMFCPopupMenu::GetParentRibbonElement](#cmfcpopupmenu__getparentribbonelement)||  \n|[CMFCPopupMenu::GetParentToolBar](#cmfcpopupmenu__getparenttoolbar)|Returns a pointer to the parent toolbar.|  \n|[CMFCPopupMenu::GetQuickCustomizeType](#cmfcpopupmenu__getquickcustomizetype)||  \n|[CMFCPopupMenu::GetSelItem](#cmfcpopupmenu__getselitem)|Returns a pointer to the currently selected menu command.|  \n|[CMFCPopupMenu::HasBeenResized](#cmfcpopupmenu__hasbeenresized)||  \n|[CMFCPopupMenu::HideRarelyUsedCommands](#cmfcpopupmenu__hiderarelyusedcommands)|Indicates whether the pop-up menu can hide rarely used commands.|  \n|[CMFCPopupMenu::InCommand](#cmfcpopupmenu__incommand)||  \n|[CMFCPopupMenu::InsertItem](#cmfcpopupmenu__insertitem)|Inserts a new item into the pop-up menu at the specified location.|  \n|[CMFCPopupMenu::InsertSeparator](#cmfcpopupmenu__insertseparator)|Inserts a separator into the pop-up menu at the specified location.|  \n|[CMFCPopupMenu::IsAlwaysClose](#cmfcpopupmenu__isalwaysclose)||  \n|[CMFCPopupMenu::IsAlwaysShowEmptyToolsEntry](#cmfcpopupmenu__isalwaysshowemptytoolsentry)||  \n|[CMFCPopupMenu::IsCustomizePane](#cmfcpopupmenu__iscustomizepane)|Indicates whether the pop-up menu is functioning as a **QuickCustomizePane**.|  \n|[CMFCPopupMenu::IsEscClose](#cmfcpopupmenu__isescclose)||  \n|[CMFCPopupMenu::IsIdle](#cmfcpopupmenu__isidle)|Indicates whether a pop-up menu is currently idle.|  \n|[CMFCPopupMenu::IsMenuSound](#cmfcpopupmenu__ismenusound)||  \n|[CMFCPopupMenu::IsQuickCustomize](#cmfcpopupmenu__isquickcustomize)|Determines whether the associated [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md) is in QuickCustomize mode.|  \n|[CMFCPopupMenu::IsResizeble](#cmfcpopupmenu__isresizeble)||  \n|[CMFCPopupMenu::IsRightAlign](#cmfcpopupmenu__isrightalign)|Indicates whether the menu is right-aligned or left-aligned.|  \n|[CMFCPopupMenu::IsScrollable](#cmfcpopupmenu__isscrollable)||  \n|[CMFCPopupMenu::IsSendMenuSelectMsg](#cmfcpopupmenu__issendmenuselectmsg)|Indicates whether the framework notifies the parent frame when the user selects a command from the pop-up menu.|  \n|[CMFCPopupMenu::IsShown](#cmfcpopupmenu__isshown)|Indicates whether the pop-up menu is currently visible.|  \n|[CMFCPopupMenu::MoveTo](#cmfcpopupmenu__moveto)||  \n|[CMFCPopupMenu::OnCmdMsg](#cmfcpopupmenu__oncmdmsg)|(Overrides `CFrameWnd::OnCmdMsg`.)|  \n|[CMFCPopupMenu::PostCommand](#cmfcpopupmenu__postcommand)||  \n|[CMFCPopupMenu::PreTranslateMessage](#cmfcpopupmenu__pretranslatemessage)|(Overrides `CFrameWnd::PreTranslateMessage`.)|  \n|[CMFCPopupMenu::RecalcLayout](#cmfcpopupmenu__recalclayout)|Called by the framework when the standard control bars are toggled on or off or when the frame window is resized. (Overrides [CFrameWnd::RecalcLayout](../../mfc/reference/cframewnd-class.md#cframewnd__recalclayout).)|  \n|[CMFCPopupMenu::RemoveAllItems](#cmfcpopupmenu__removeallitems)|Clears all the items from a pop-up menu.|  \n|[CMFCPopupMenu::RemoveItem](#cmfcpopupmenu__removeitem)|Removes the specified item from a pop-up menu.|  \n|[CMFCPopupMenu::SaveState](#cmfcpopupmenu__savestate)||  \n|[CMFCPopupMenu::SetAnimationSpeed](#cmfcpopupmenu__setanimationspeed)|Sets the animation speed for pop-up menus.|  \n|[CMFCPopupMenu::SetAnimationType](#cmfcpopupmenu__setanimationtype)|Sets the animation type for the pop-up menu.|  \n|[CMFCPopupMenu::SetAutoDestroy](#cmfcpopupmenu__setautodestroy)||  \n|[CMFCPopupMenu::SetDefaultItem](#cmfcpopupmenu__setdefaultitem)|Sets the default command for the pop-up menu.|  \n|[CMFCPopupMenu::SetForceMenuFocus](#cmfcpopupmenu__setforcemenufocus)|Forces the input focus to return to the menu bar when a pop-up menu is displayed.|  \n|[CMFCPopupMenu::SetForceShadow](#cmfcpopupmenu__setforceshadow)|Forces the framework to draw menu shadows when pop-up menus appear outside the main frame.|  \n|[CMFCPopupMenu::SetMaxWidth](#cmfcpopupmenu__setmaxwidth)|Set the maximum width for the pop-up menu.|  \n|[CMFCPopupMenu::SetMessageWnd](#cmfcpopupmenu__setmessagewnd)||  \n|[CMFCPopupMenu::SetParentRibbonElement](#cmfcpopupmenu__setparentribbonelement)||  \n|[CMFCPopupMenu::SetQuickCustomizeType](#cmfcpopupmenu__setquickcustomizetype)||  \n|[CMFCPopupMenu::SetQuickMode](#cmfcpopupmenu__setquickmode)||  \n|[CMFCPopupMenu::SetRightAlign](#cmfcpopupmenu__setrightalign)|Sets the menu alignment for pop-up menus.|  \n|[CMFCPopupMenu::SetSendMenuSelectMsg](#cmfcpopupmenu__setsendmenuselectmsg)|Sets a flag that controls whether the pop-up menu notifies its parent frame when the user selects a command.|  \n|[CMFCPopupMenu::ShowAllCommands](#cmfcpopupmenu__showallcommands)|Forces the pop-up menu to display all commands.|  \n|[CMFCPopupMenu::TriggerResize](#cmfcpopupmenu__triggerresize)||  \n|[CMFCPopupMenu::UpdateAllShadows](#cmfcpopupmenu__updateallshadows)|Updates the shadows for all opened pop-up menus.|  \n|[CMFCPopupMenu::UpdateShadow](#cmfcpopupmenu__updateshadow)|Updates the shadow for the pop-up menu.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCPopupMenu::CreateTearOffBar](#cmfcpopupmenu__createtearoffbar)||  \n|[CMFCPopupMenu::OnChangeHot](#cmfcpopupmenu__onchangehot)||  \n|[CMFCPopupMenu::OnChooseItem](#cmfcpopupmenu__onchooseitem)||  \n  \n### Remarks  \n Normally, MFC creates pop-up menus automatically. If you want to create a `CMFCPopupMenu` object manually, allocate one on the heap and then call [CMFCPopupMenu::Create](#cmfcpopupmenu__create).  \n  \n## Example  \n The following example demonstrates how to configure a pop-up menu object. The example shows how to set the logo and the sound of the pop-up menu, set the animation speed and type, draw menu shadows when the pop-up menu appears outside the main frame, set the maximum width, and set the right menu alignment of the pop-up menu. This code snippet is part of the [Custom Pages sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_CustomPages#2](../../mfc/reference/codesnippet/cpp/cmfcpopupmenu-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CFrameWnd](../../mfc/reference/cframewnd-class.md)  \n  \n [CMiniFrameWnd](../../mfc/reference/cminiframewnd-class.md)  \n  \n [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md)  \n  \n## Requirements  \n **Header:** afxpopupmenu.h  \n  \n##  <a name=\"cmfcpopupmenu__activatepopupmenu\"></a>  CMFCPopupMenu::ActivatePopupMenu  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic BOOL __stdcall ActivatePopupMenu(\n    CFrameWnd* pTopFrame,  \n    CMFCPopupMenu* pPopupMenu);\n```  \n  \n### Parameters  \n [in] `pTopFrame`  \n [in] `pPopupMenu`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__alwaysshowemptytoolsentry\"></a>  CMFCPopupMenu::AlwaysShowEmptyToolsEntry  \n Sets whether a pop-up menu is enabled to show empty entries for user-defined tools.  \n  \n```  \nstatic void AlwaysShowEmptyToolsEntry(BOOL bShow = TRUE);\n```  \n  \n### Parameters  \n [in] `bShow`  \n `TRUE` if the pop-up menu can display empty entries; `FALSE` otherwise.  \n  \n##  <a name=\"cmfcpopupmenu__areallcommandsshown\"></a>  CMFCPopupMenu::AreAllCommandsShown  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL AreAllCommandsShown() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__checkarea\"></a>  CMFCPopupMenu::CheckArea  \n Determines the location of a point relative to the pop-up menu.  \n  \n```  \nMENUAREA_TYPE CheckArea(const CPoint& ptScreen) const;\n\n \n```  \n  \n### Parameters  \n [in] `ptScreen`  \n A point, in screen coordinates.  \n  \n### Return Value  \n A MENUAREA_TYPE parameter that indicates where the point is relative to the pop-up menu.  \n  \n### Remarks  \n A MENUAREA_TYPE parameter can have any one of the following values.  \n  \n-   OUTSIDE - `ptScreen` is outside the pop-up menu.  \n  \n-   LOGO - `ptScreen` is over a logo area.  \n  \n-   TEAROFF_CAPTION - `ptScreen` is over the tear-off caption.  \n  \n-   SHADOW_BOTTOM - `ptScreen` is over the bottom shadow of the pop-up menu.  \n  \n-   SHADOW_RIGHT - `ptScreen` is over the right shadow of the pop-up menu.  \n  \n-   MENU - `ptScreen` is over a command.  \n  \n##  <a name=\"cmfcpopupmenu__closemenu\"></a>  CMFCPopupMenu::CloseMenu  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid CloseMenu(BOOL bSetFocusToBar = FALSE);\n```  \n  \n### Parameters  \n [in] `bSetFocusToBar`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__cmfcpopupmenu\"></a>  CMFCPopupMenu::CMFCPopupMenu  \n Constructs a [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) object.  \n  \n```  \nCMFCPopupMenu(\n    CMFCToolBarsMenuPropertyPage* pCustPage,  \n    LPCTSTR lpszTitle);\n```  \n  \n### Parameters  \n [in] `pCustPage`  \n A pointer to a customization page.  \n  \n [in] `lpszTitle`  \n A string that contains the menu caption.  \n  \n### Remarks  \n This method allocates the resources for a `CMFCPopupMenu`. To create the pop-up menu item, call [CMFCPopupMenu::Create](#cmfcpopupmenu__create).  \n  \n##  <a name=\"cmfcpopupmenu__create\"></a>  CMFCPopupMenu::Create  \n Creates a pop-up menu and attaches it to a [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) object.  \n  \n```  \nvirtual BOOL Create(\n    CWnd* pWndParent,  \n    int x,  \n    int y,  \n    HMENU hMenu,  \n    BOOL bLocked = FALSE,  \n    BOOL bOwnMessage = FALSE);\n```  \n  \n### Parameters  \n [in] `pWndParent`  \n The parent window for the `CMFCPopupMenu`.  \n  \n [in] `x`  \n The horizontal screen coordinate for the location of the pop-up menu  \n  \n [in] `y`  \n The vertical screen coordinate for the location of the pop-menu.  \n  \n [in] `hMenu`  \n A handle to a menu resource.  \n  \n [in] `bLocked`  \n A Boolean parameter that indicates whether the menu is customizable. `FALSE` indicates that the pop-up menu is customizable.  \n  \n [in] `bOwnMessage`  \n A Boolean parameter that indicates how the framework routes the menu messages. See the Remarks section for more details.  \n  \n### Return Value  \n `TRUE` if the method is successful; otherwise `FALSE`.  \n  \n### Remarks  \n If `bOwnMessage` is `TRUE`, the framework routes any menu messages to `pWndParent`. `pWndParent` must not be `NULL` if `bOwnMessage` is `TRUE.` If `bOwnMessage` is `FALSE`, the framework routes the menu messages to the parent pop-up menu.  \n  \n### Example  \n The following example demonstrates how to use the `Create` method of the `CMFCPopuMenu` class. This code snippet is part of the [Custom Pages sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_CustomPages#1](../../mfc/reference/codesnippet/cpp/cmfcpopupmenu-class_2.cpp)]  \n  \n##  <a name=\"cmfcpopupmenu__createtearoffbar\"></a>  CMFCPopupMenu::CreateTearOffBar  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CPane* CreateTearOffBar(\n    CFrameWnd* pWndMain,  \n    UINT uiID,  \n    LPCTSTR lpszName);\n```  \n  \n### Parameters  \n [in] `pWndMain`  \n [in] `uiID`  \n [in] `lpszName`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__defaultmouseclickonclose\"></a>  CMFCPopupMenu::DefaultMouseClickOnClose  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL DefaultMouseClickOnClose() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__enablemenulogo\"></a>  CMFCPopupMenu::EnableMenuLogo  \n Initializes the logo for a pop-up menu.  \n  \n```  \nvoid EnableMenuLogo(\n    int iLogoSize,  \n    LOGO_LOCATION nLogoLocation = MENU_LOGO_LEFT);\n```  \n  \n### Parameters  \n [in] `iLogoSize`  \n The size of the logo, in pixels.  \n  \n [in] `nLogoLocation`  \n An enumerated data type that indicates the location of the logo.  \n  \n### Remarks  \n To display the logo, implement the method [CFrameWndEx::OnDrawMenuLogo](../../mfc/reference/cframewndex-class.md#cframewndex__ondrawmenulogo) in the main frame window.  \n  \n The possible values for `nLogoLocation` are MENU_LOGO_LEFT, MENU_LOGO_RIGHT, MENU_LOGO_TOP, and MENU_LOGO_BOTTOM.  \n  \n##  <a name=\"cmfcpopupmenu__enablemenusound\"></a>  CMFCPopupMenu::EnableMenuSound  \n Enables menu sound.  \n  \n```  \nstatic void EnableMenuSound(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n `TRUE` to enable sound, `FALSE` otherwise.  \n  \n### Remarks  \n If you enable sound, the framework calls the [PlaySound](http://msdn.microsoft.com/library/windows/desktop/bb774426) method when a user opens a pop-up menu or selects a menu command. By default, this feature is enabled.  \n  \n##  <a name=\"cmfcpopupmenu__enableresize\"></a>  CMFCPopupMenu::EnableResize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid EnableResize(CSize sizeMinResize);\n```  \n  \n### Parameters  \n [in] `sizeMinResize`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__enablescrolling\"></a>  CMFCPopupMenu::EnableScrolling  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid EnableScrolling(BOOL = TRUE);\n```  \n  \n### Parameters  \n [in] `BOOL`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__enablevertresize\"></a>  CMFCPopupMenu::EnableVertResize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid EnableVertResize(int nMinResize);\n```  \n  \n### Parameters  \n [in] `nMinResize`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__findsubitembycommand\"></a>  CMFCPopupMenu::FindSubItemByCommand  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCMFCToolBarMenuButton* FindSubItemByCommand(UINT uiCmd) const;\n\n \n```  \n  \n### Parameters  \n [in] `uiCmd`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__getactivemenu\"></a>  CMFCPopupMenu::GetActiveMenu  \n Returns the currently active menu.  \n  \n```  \nstatic CMFCPopupMenu* GetActiveMenu();\n```  \n  \n### Return Value  \n A pointer to the active pop-up menu, or NULL if no pop-up menu is currently active.  \n  \n### Remarks  \n Each application can have at most one active pop-up menu.  \n  \n##  <a name=\"cmfcpopupmenu__getanimationspeed\"></a>  CMFCPopupMenu::GetAnimationSpeed  \n Returns the animation speed for pop-up menus.  \n  \n```  \nstatic UINT GetAnimationSpeed();\n```  \n  \n### Return Value  \n An integer that indicates the time, in milliseconds, that a pop-up menu animation takes to finish.  \n  \n### Remarks  \n The animation speed is a global value. Use [CMFCPopupMenu::SetAnimationSpeed](#cmfcpopupmenu__setanimationspeed) to change the animation speed for pop-up menus.  \n  \n##  <a name=\"cmfcpopupmenu__getanimationtype\"></a>  CMFCPopupMenu::GetAnimationType  \n Returns the current type of pop-up animation.  \n  \n```  \nstatic CMFCPopupMenu::ANIMATION_TYPE GetAnimationType(BOOL bNoSystem = FALSE);\n```  \n  \n### Parameters  \n [in] `bNoSystem`  \n A Boolean parameter that indicates whether this method checks the global value. FALSE if you want this method to return the animation style for this instance of the [CMFCPopupMenu Class](../../mfc/reference/cmfcpopupmenu-class.md).  \n  \n### Return Value  \n An enumerated value that describes the animation type.  \n  \n### Remarks  \n The style of animation for pop-up menus is global for your application. Use [CMFCPopupMenu::SetAnimationType](#cmfcpopupmenu__setanimationtype) to set the animation style.  \n  \n The following table lists the possible animation types.  \n  \n NO_ANIMATION  \n The pop-up menu is not animated and appears immediately.  \n  \n UNFOLD  \n The framework reveals the pop-up menu from the upper-left corner to the lower right corner.  \n  \n SLIDE  \n The pop-up menu moves from top to bottom.  \n  \n FADE  \n The pop-up menu first appears transparent and gradually solidifies.  \n  \n##  <a name=\"cmfcpopupmenu__getdropdirection\"></a>  CMFCPopupMenu::GetDropDirection  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nDROP_DIRECTION GetDropDirection() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__getforcemenufocus\"></a>  CMFCPopupMenu::GetForceMenuFocus  \n Indicates whether the focus is returned to the menu bar when a pop-up menu is displayed.  \n  \n```  \nstatic BOOL GetForceMenuFocus();\n```  \n  \n### Return Value  \n `TRUE` if the input focus is returned to the menu bar when a pop-up menu is displayed; `FALSE` if the pop-up menu retains the focus.  \n  \n### Remarks  \n By default, your application does not return focus to the menu bar. To change this setting, use [CMFCPopupMenu::SetForceMenuFocus](#cmfcpopupmenu__setforcemenufocus).  \n  \n##  <a name=\"cmfcpopupmenu__getforceshadow\"></a>  CMFCPopupMenu::GetForceShadow  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic BOOL __stdcall GetForceShadow();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__gethmenu\"></a>  CMFCPopupMenu::GetHMenu  \n Returns a handle to the attached menu resource.  \n  \n```  \nHMENU GetHMenu();\n```  \n  \n##  <a name=\"cmfcpopupmenu__getmenubar\"></a>  CMFCPopupMenu::GetMenuBar  \n Returns the [CMFCPopupMenuBar](../../mfc/reference/cmfcpopupmenubar-class.md) embedded inside the pop-up menu.  \n  \n```  \nvirtual CMFCPopupMenuBar* GetMenuBar();\n```  \n  \n### Return Value  \n A pointer to the embedded `CMFCPopupMenuBar`.  \n  \n### Remarks  \n The pop-up menu has an embedded `CMFCPopupMenuBar` object. You must override this method in a derived class if you are using a different embedded class.  \n  \n##  <a name=\"cmfcpopupmenu__getmenuitem\"></a>  CMFCPopupMenu::GetMenuItem  \n Returns a pointer to the menu item at the specified index.  \n  \n```  \nCMFCToolBarMenuButton* GetMenuItem(int iIndex) const;\n\n \n```  \n  \n### Parameters  \n [in] `iIndex`  \n The zero-based index of a menu item.  \n  \n### Return Value  \n A pointer to a menu item. `NULL` if the index is invalid.  \n  \n### Remarks  \n Menu items are represented by the [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md). When you call this method, it returns a pointer to the appropriate `CMFCToolBarMenuButton`.  \n  \n##  <a name=\"cmfcpopupmenu__getmenuitemcount\"></a>  CMFCPopupMenu::GetMenuItemCount  \n Returns the number of items in a pop-up menu.  \n  \n```  \nint GetMenuItemCount() const;\n\n \n```  \n  \n### Return Value  \n The number of items in the menu.  \n  \n##  <a name=\"cmfcpopupmenu__getmessagewnd\"></a>  CMFCPopupMenu::GetMessageWnd  \n Returns a pointer to the window where the framework routes the pop-up menu messages.  \n  \n```  \nCWnd* GetMessageWnd() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the window that receives the pop-up menu messages; `NULL` if there is no window.  \n  \n### Remarks  \n When you use the method [CMFCPopupMenu::Create](#cmfcpopupmenu__create) to create a pop-up menu, you specify what window receives the menu messages.  \n  \n##  <a name=\"cmfcpopupmenu__getparentarea\"></a>  CMFCPopupMenu::GetParentArea  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CWnd* GetParentArea(CRect& rectParentBtn);\n```  \n  \n### Parameters  \n [in] `rectParentBtn`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__getparentbutton\"></a>  CMFCPopupMenu::GetParentButton  \n Returns a pointer to the parent toolbar button.  \n  \n```  \nCMFCToolBarMenuButton* GetParentButton() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the parent toolbar button. `NULL` if the pop-up menu has no parent toolbar button.  \n  \n### Remarks  \n A [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) can be associated with a button on the menu. In this scenario, the pop-up menu appears when a user selects the parent toolbar button.  \n  \n If the pop-up menu is a shortcut menu, it will have no parent toolbar button.  \n  \n##  <a name=\"cmfcpopupmenu__getparentpopupmenu\"></a>  CMFCPopupMenu::GetParentPopupMenu  \n Returns a pointer to the parent pop-up menu.  \n  \n```  \nCMFCPopupMenu* GetParentPopupMenu() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the parent [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) object; `NULL` if there is no parent pop-up menu.  \n  \n### Remarks  \n A pop-up menu has a parent `CMFCPopupMenu` object only if it is a submenu.  \n  \n##  <a name=\"cmfcpopupmenu__getparentribbonelement\"></a>  CMFCPopupMenu::GetParentRibbonElement  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCMFCRibbonBaseElement* GetParentRibbonElement() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__getparenttoolbar\"></a>  CMFCPopupMenu::GetParentToolBar  \n Returns a pointer to the parent toolbar.  \n  \n```  \nCMFCToolBar* GetParentToolBar() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the parent toolbar. `NULL` if the pop-up menu has no parent toolbar.  \n  \n### Remarks  \n If the [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) is a shortcut menu, then it has no parent toolbar.  \n  \n##  <a name=\"cmfcpopupmenu__getquickcustomizetype\"></a>  CMFCPopupMenu::GetQuickCustomizeType  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nQUICK_CUSTOMIZE_TYPE GetQuickCustomizeType() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__getselitem\"></a>  CMFCPopupMenu::GetSelItem  \n Returns a pointer to the currently selected menu command.  \n  \n```  \nCMFCToolBarMenuButton* GetSelItem();\n```  \n  \n### Return Value  \n A pointer to the currently selected menu command; `NULL` if no item is selected.  \n  \n### Remarks  \n The menu commands on a pop-up menu are represented by the [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md), or a class derived from `CMFCToolBarMenuButton`.  \n  \n##  <a name=\"cmfcpopupmenu__hasbeenresized\"></a>  CMFCPopupMenu::HasBeenResized  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL HasBeenResized() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__hiderarelyusedcommands\"></a>  CMFCPopupMenu::HideRarelyUsedCommands  \n Indicates whether the pop-up menu can hide rarely used commands.  \n  \n```  \nBOOL HideRarelyUsedCommands() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pop-up menu can hide the rarely used commands; otherwise `FALSE`.  \n  \n### Remarks  \n This method specifies only whether a pop-up menu can hide rarely used commands, not if that configuration is enabled. A pop-up menu can hide rarely used commands if it has a parent button and the parent window is derived from the [CMFCMenuBar Class](../../mfc/reference/cmfcmenubar-class.md). Use [CMFCMenuBar::SetRecentlyUsedMenus](../../mfc/reference/cmfcmenubar-class.md#cmfcmenubar__setrecentlyusedmenus) to enable this feature and [CMFCMenuBar::IsRecentlyUsedMenus](../../mfc/reference/cmfcmenubar-class.md#cmfcmenubar__isrecentlyusedmenus) to determine if this feature is currently enabled. You must call both of these methods for the parent window.  \n  \n##  <a name=\"cmfcpopupmenu__incommand\"></a>  CMFCPopupMenu::InCommand  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL InCommand();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__insertitem\"></a>  CMFCPopupMenu::InsertItem  \n Inserts a new item into the pop-up menu at the specified location.  \n  \n```  \nint InsertItem(\n    const CMFCToolBarMenuButton& button,  \n    int iInsertA = -1);\n```  \n  \n### Parameters  \n [in] `button`  \n A reference to the menu item to add.  \n  \n [in] `iInsertAt`  \n The zero-based index for the new item. If `iInsertAt` is -1, the item is added to the end of the menu.  \n  \n### Return Value  \n The zero-based index of the position where the item was inserted. -1 if the method fails.  \n  \n### Remarks  \n This method will fail if you provide an invalid value for `iInsertAt`, such as an integer larger than the number of items currently on the pop-up menu.  \n  \n##  <a name=\"cmfcpopupmenu__insertseparator\"></a>  CMFCPopupMenu::InsertSeparator  \n Inserts a separator into the pop-up menu at the specified location.  \n  \n```  \nint InsertSeparator(int iInsertAt = -1);\n```  \n  \n### Parameters  \n [in] `iInsertAt`  \n The zero-based index of the position where this method will insert the separator.  \n  \n### Return Value  \n The zero-based index of the position where the separator was inserted. -1 if this method fails.  \n  \n### Remarks  \n A value of -1 for `iInsertAt` means this method will add the separator to the end of the pop-up menu.  \n  \n This method fails if `iInsertAt` is an invalid value.  \n  \n##  <a name=\"cmfcpopupmenu__isalwaysclose\"></a>  CMFCPopupMenu::IsAlwaysClose  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsAlwaysClose() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__isalwaysshowemptytoolsentry\"></a>  CMFCPopupMenu::IsAlwaysShowEmptyToolsEntry  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic BOOL __stdcall IsAlwaysShowEmptyToolsEntry();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__iscustomizepane\"></a>  CMFCPopupMenu::IsCustomizePane  \n Indicates whether the pop-up menu is functioning as a **QuickCustomizePane**.  \n  \n```  \nBOOL IsCustomizePane();\n```  \n  \n### Return Value  \n `TRUE` if the pop-up is a **QuckCustomizePane**; otherwise `FALSE`.  \n  \n### Remarks  \n Use the **QuickCustomizePane** to enable the user to directly customize the pop-up menu. The **QuickCustomizePane** is a [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) that appears when the user clicks on a toolbar button to edit it directly.  \n  \n Your application should call this method during [CMDIFrameWndEx::OnShowCustomizePane](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__onshowcustomizepane).  \n  \n##  <a name=\"cmfcpopupmenu__isescclose\"></a>  CMFCPopupMenu::IsEscClose  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsEscClose();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__isidle\"></a>  CMFCPopupMenu::IsIdle  \n Indicates whether a pop-up menu is currently idle.  \n  \n```  \nvirtual BOOL IsIdle() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pop-up menu is in idle mode; otherwise `FALSE`.  \n  \n### Remarks  \n By default, a pop-up menu is in idle mode if the display animation is complete and the user is not scrolling the pop-up menu.  \n  \n##  <a name=\"cmfcpopupmenu__ismenusound\"></a>  CMFCPopupMenu::IsMenuSound  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic UINT __stdcall IsMenuSound();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__isquickcustomize\"></a>  CMFCPopupMenu::IsQuickCustomize  \n Determines whether the associated [CMFCToolBarMenuButton Class](../../mfc/reference/cmfctoolbarmenubutton-class.md) is in QuickCustomize mode.  \n  \n```  \nBOOL IsQuickCustomize();\n```  \n  \n### Return Value  \n `TRUE` if the associated menu button is in QuickCustomize mode; otherwise `FALSE`. This method will also return `FALSE` if the pop-up menu is not associated with a `CMFCToolBarMenuButton`.  \n  \n### Remarks  \n In QuickCustomize mode the user selects a button on a toolbar to customize the button directly.  \n  \n##  <a name=\"cmfcpopupmenu__isresizeble\"></a>  CMFCPopupMenu::IsResizeble  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsResizeble() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__isrightalign\"></a>  CMFCPopupMenu::IsRightAlign  \n Indicates whether the menu is right-aligned or left-aligned.  \n  \n```  \nBOOL IsRightAlign() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the menu is right-aligned; `FALSE` if the menu left-aligned.  \n  \n### Remarks  \n You can use [CMFCPopupMenu::SetRightAlign](#cmfcpopupmenu__setrightalign) to set the menu alignment. By default, pop-up menus use left-alignment.  \n  \n Menu alignment is not a global setting and can vary between pop-up menus.  \n  \n##  <a name=\"cmfcpopupmenu__isscrollable\"></a>  CMFCPopupMenu::IsScrollable  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsScrollable() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__issendmenuselectmsg\"></a>  CMFCPopupMenu::IsSendMenuSelectMsg  \n Indicates whether the framework notifies the parent frame when the user selects a command from the pop-up menu.  \n  \n```  \nstatic BOOL IsSendMenuSelectMsg();\n```  \n  \n### Return Value  \n `TRUE` if the framework notifies the parent frame; otherwise `FALSE`.  \n  \n### Remarks  \n The framework notifies the parent frame by sending it the `WM_MENUSELECT` message when a used selects a menu command.  \n  \n##  <a name=\"cmfcpopupmenu__isshown\"></a>  CMFCPopupMenu::IsShown  \n Indicates whether the pop-up menu is currently visible.  \n  \n```  \nBOOL IsShown() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if a pop-up menu is visible; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcpopupmenu__moveto\"></a>  CMFCPopupMenu::MoveTo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid MoveTo(const CPoint& pt);\n```  \n  \n### Parameters  \n [in] `pt`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__onchangehot\"></a>  CMFCPopupMenu::OnChangeHot  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnChangeHot(int nHot);\n```  \n  \n### Parameters  \n [in] `nHot`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__onchooseitem\"></a>  CMFCPopupMenu::OnChooseItem  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnChooseItem(UINT uidCmdID);\n```  \n  \n### Parameters  \n [in] `uidCmdID`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__oncmdmsg\"></a>  CMFCPopupMenu::OnCmdMsg  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnCmdMsg(\n    UINT nID,  \n    int nCode,  \n    void* pExtra,  \n    AFX_CMDHANDLERINFO* pHandlerInfo);\n```  \n  \n### Parameters  \n [in] `nID`  \n [in] `nCode`  \n [in] `pExtra`  \n [in] `pHandlerInfo`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__postcommand\"></a>  CMFCPopupMenu::PostCommand  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL PostCommand(UINT uiCommandID);\n```  \n  \n### Parameters  \n [in] `uiCommandID`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__pretranslatemessage\"></a>  CMFCPopupMenu::PreTranslateMessage  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL PreTranslateMessage(MSG* pMsg);\n```  \n  \n### Parameters  \n [in] `pMsg`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__recalclayout\"></a>  CMFCPopupMenu::RecalcLayout  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void RecalcLayout(BOOL bNotify = TRUE);\n```  \n  \n### Parameters  \n [in] `bNotify`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__removeallitems\"></a>  CMFCPopupMenu::RemoveAllItems  \n Clears all the items from a pop-up menu.  \n  \n```  \nvoid RemoveAllItems();\n```  \n  \n##  <a name=\"cmfcpopupmenu__removeitem\"></a>  CMFCPopupMenu::RemoveItem  \n Removes the specified item from the pop-up menu.  \n  \n```  \nBOOL RemoveItem(int iIndex);\n```  \n  \n### Parameters  \n [in] `iIndex`  \n The zero-based index of the item to delete.  \n  \n### Return Value  \n `TRUE` if the method is successful; otherwise `FALSE`.  \n  \n### Remarks  \n This method automatically arranges any separators that are affected by the removal of an item. For more information about how the framework rearranges separators, see [CMFCToolBar::RemoveButton](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__removebutton).  \n  \n##  <a name=\"cmfcpopupmenu__savestate\"></a>  CMFCPopupMenu::SaveState  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void SaveState();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__setanimationspeed\"></a>  CMFCPopupMenu::SetAnimationSpeed  \n Sets the animation speed for pop-up menus.  \n  \n```  \nstatic void SetAnimationSpeed(UINT nElapse);\n```  \n  \n### Parameters  \n [in] `nElapse`  \n The new animation speed, in milliseconds.  \n  \n### Remarks  \n The animation speed is a global value and affects all the pop-up menus in the application. This value specifies how long it takes for the animation for a pop-up menu to finish.  \n  \n By default, this parameter is set to 30 milliseconds. The range of valid values for `nElapse` is from 0 to 200.  \n  \n##  <a name=\"cmfcpopupmenu__setanimationtype\"></a>  CMFCPopupMenu::SetAnimationType  \n Sets the animation type for this pop-up menu.  \n  \n```  \nstatic void SetAnimationType(CMFCPopupMenu::ANIMATION_TYPE type);\n```  \n  \n### Parameters  \n [in] `type`  \n An enumerated data type that specifies the type of animation.  \n  \n### Remarks  \n See [CMFCPopupMenu::GetAnimationType](#cmfcpopupmenu__getanimationtype) for a list of valid values for `type`.  \n  \n##  <a name=\"cmfcpopupmenu__setautodestroy\"></a>  CMFCPopupMenu::SetAutoDestroy  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetAutoDestroy(BOOL bAutoDestroy = TRUE);\n```  \n  \n### Parameters  \n [in] `bAutoDestroy`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__setdefaultitem\"></a>  CMFCPopupMenu::SetDefaultItem  \n Sets the default command for the pop-up menu.  \n  \n```  \nvoid SetDefaultItem(UINT uiCmd);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The menu command ID of the new default command.  \n  \n### Remarks  \n The default command in the pop-up menu is the command that is selected when the pop-up menu appears.  \n  \n##  <a name=\"cmfcpopupmenu__setforcemenufocus\"></a>  CMFCPopupMenu::SetForceMenuFocus  \n Forces the input focus to return to the menu bar when a pop-up menu is displayed.  \n  \n```  \nstatic void SetForceMenuFocus(BOOL bValue);\n```  \n  \n### Parameters  \n [in] `bValue`  \n `TRUE` if you want the framework to force the input focus to the menu bar when a pop-up menu is displayed. `FALSE` if you want the pop-up menu to retain the focus.  \n  \n### Remarks  \n This method sets a flag that is global for all pop-up menus in the application. By default, this feature is not enabled.  \n  \n##  <a name=\"cmfcpopupmenu__setforceshadow\"></a>  CMFCPopupMenu::SetForceShadow  \n Forces the framework to draw menu shadows when pop-up menus appear outside the main frame.  \n  \n```  \nstatic void SetForceShadow(BOOL bValue);\n```  \n  \n### Parameters  \n [in] `bValue`  \n `TRUE` if you want the framework to draw menu shadows, `FALSE` otherwise.  \n  \n### Remarks  \n When you call this method, it sets a global flag in your application. This flag affects all pop-up menus in your application.  \n  \n##  <a name=\"cmfcpopupmenu__setmaxwidth\"></a>  CMFCPopupMenu::SetMaxWidth  \n Set the maximum width for the pop-up menu.  \n  \n```  \nvoid SetMaxWidth(int iMaxWidth);\n```  \n  \n### Parameters  \n [in] `iMaxWidth`  \n The maximum width for the pop-up menu, in pixels.  \n  \n### Remarks  \n If the text associated with a menu command will not fit in the maximum width, it is truncated and the part that does not fit is replaced by three dots.  \n  \n##  <a name=\"cmfcpopupmenu__setmessagewnd\"></a>  CMFCPopupMenu::SetMessageWnd  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetMessageWnd(CWnd* pMsgWnd);\n```  \n  \n### Parameters  \n [in] `pMsgWnd`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__setparentribbonelement\"></a>  CMFCPopupMenu::SetParentRibbonElement  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetParentRibbonElement(CMFCRibbonBaseElement* pElem);\n```  \n  \n### Parameters  \n [in] `pElem`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__setquickcustomizetype\"></a>  CMFCPopupMenu::SetQuickCustomizeType  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetQuickCustomizeType(QUICK_CUSTOMIZE_TYPE Type);\n```  \n  \n### Parameters  \n [in] `Type`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__setquickmode\"></a>  CMFCPopupMenu::SetQuickMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetQuickMode();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__setrightalign\"></a>  CMFCPopupMenu::SetRightAlign  \n Sets the menu alignment for pop-up menus.  \n  \n```  \nvoid SetRightAlign(BOOL bRightAlign = TRUE);\n```  \n  \n### Parameters  \n [in] `bRightAlign`  \n A Boolean that indicates the menu alignment. `TRUE` indicates right alignment, `FALSE` indicates left alignment.  \n  \n### Remarks  \n By default, all pop-up menus are left-aligned.  \n  \n##  <a name=\"cmfcpopupmenu__setsendmenuselectmsg\"></a>  CMFCPopupMenu::SetSendMenuSelectMsg  \n Sets a flag that controls whether the pop-up menu notifies its parent frame when the user selects a command.  \n  \n```  \nstatic void SetSendMenuSelectMsg(BOOL bSet = TRUE);\n```  \n  \n### Parameters  \n [in] `bSet`  \n `TRUE` if the pop-up menu notifies its parent frame, `FALSE` otherwise.  \n  \n### Remarks  \n This is a global option for all the pop-up menus in an application. If it is enabled, the pop-up menus will send a `WM_MENUSELECT` message to the parent frame when the user selects a command.  \n  \n##  <a name=\"cmfcpopupmenu__showallcommands\"></a>  CMFCPopupMenu::ShowAllCommands  \n Forces the pop-up menu to display all commands.  \n  \n```  \nvoid ShowAllCommands();\n```  \n  \n### Remarks  \n This is not a global setting and affects only the current pop-up menu.  \n  \n##  <a name=\"cmfcpopupmenu__triggerresize\"></a>  CMFCPopupMenu::TriggerResize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid TriggerResize();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcpopupmenu__updateallshadows\"></a>  CMFCPopupMenu::UpdateAllShadows  \n Updates the shadows for all opened pop-up menus.  \n  \n```  \nstatic void UpdateAllShadows(LPRECT lprectScreen = NULL);\n```  \n  \n### Parameters  \n [in] `lprectScreen`  \n A rectangle that specifies the region to update, in screen coordinates.  \n  \n### Remarks  \n This method is useful when pop-up menus are displayed over animated controls or other windows that have dynamic content.  \n  \n##  <a name=\"cmfcpopupmenu__updateshadow\"></a>  CMFCPopupMenu::UpdateShadow  \n Updates the shadow for the pop-up menu.  \n  \n```  \nvoid UpdateShadow(LPRECT lprectScreen = NULL);\n```  \n  \n### Parameters  \n [in] `lprectScreen`  \n A rectangle, in screen coordinates, that specifies the boundaries of the region to update.  \n  \n### Remarks  \n Call this method when a pop-up menu that has a shadow overlaps an animated image.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CMFCPopupMenuBar Class](../../mfc/reference/cmfcpopupmenubar-class.md)\n"}