{"nodes":[{"pos":[12,41],"content":"is_pod Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_pod Class | Microsoft Docs","pos":[0,29]}]},{"pos":[718,730],"content":"is_pod Class","linkify":"is_pod Class","nodes":[{"content":"is_pod Class","pos":[0,12]}]},{"content":"Tests if type is POD.","pos":[731,752]},{"pos":[761,767],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[826,836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type to query.","pos":[848,866]},{"pos":[875,882],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`is_pod&lt;Ty&gt;::value`</ph> is <ph id=\"ph2\">`true`</ph> if the type <ph id=\"ph3\">`Ty`</ph> is Plain Old Data (POD).","pos":[886,957],"source":"`is_pod<Ty>::value` is `true` if the type `Ty` is Plain Old Data (POD)."},{"content":"Otherwise it is <ph id=\"ph1\">`false`</ph>.","pos":[958,982],"source":" Otherwise it is `false`."},{"content":"Arithmetic types, enumeration types, pointer types, and pointer to member types are POD.","pos":[989,1077]},{"content":"A cv-qualified version of a POD type is itself a POD type.","pos":[1084,1142]},{"content":"An array of POD is itself POD.","pos":[1149,1179]},{"content":"A struct or union, all of whose non-static data members are POD, is itself POD if it has:","pos":[1186,1275]},{"content":"No user-declared constructors.","pos":[1285,1315]},{"content":"No private or protected non-static data members.","pos":[1325,1373]},{"content":"No base classes.","pos":[1383,1399]},{"content":"No virtual functions.","pos":[1409,1430]},{"content":"No non-static data members of reference type.","pos":[1440,1485]},{"content":"No user-defined copy assignment operator.","pos":[1495,1536]},{"content":"No user-defined destructor.","pos":[1546,1573]},{"content":"Therefore, you can recursively build POD structs and arrays that contain POD structs and arrays.","pos":[1580,1676]},{"pos":[1685,1692],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2647,2659],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2663,2688],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[2695,2713],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2722,2730],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2734,2785],"content":"<bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept>","source":"[<type_traits>](../standard-library/type-traits.md)"}],"content":"---\ntitle: \"is_pod Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.is_pod\"\n  - \"is_pod\"\n  - \"std::tr1::is_pod\"\n  - \"std.is_pod\"\n  - \"std::is_pod\"\n  - \"type_traits/std::is_pod\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"is_pod class [TR1]\"\n  - \"is_pod\"\nms.assetid: d73ebdee-746b-4082-9fa4-2db71432eb0e\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is_pod Class\nTests if type is POD.  \n  \n## Syntax  \n  \n```\ntemplate <class Ty>\nstruct is_pod;\n```  \n  \n#### Parameters  \n `Ty`  \n The type to query.  \n  \n## Remarks  \n `is_pod<Ty>::value` is `true` if the type `Ty` is Plain Old Data (POD). Otherwise it is `false`.  \n  \n Arithmetic types, enumeration types, pointer types, and pointer to member types are POD.  \n  \n A cv-qualified version of a POD type is itself a POD type.  \n  \n An array of POD is itself POD.  \n  \n A struct or union, all of whose non-static data members are POD, is itself POD if it has:  \n  \n-   No user-declared constructors.  \n  \n-   No private or protected non-static data members.  \n  \n-   No base classes.  \n  \n-   No virtual functions.  \n  \n-   No non-static data members of reference type.  \n  \n-   No user-defined copy assignment operator.  \n  \n-   No user-defined destructor.  \n  \n Therefore, you can recursively build POD structs and arrays that contain POD structs and arrays.  \n  \n## Example  \n  \n```cpp  \n// std_tr1__type_traits__is_pod.cpp   \n// compile with: /EHsc   \n#include <type_traits>   \n#include <iostream>   \n  \nstruct trivial   \n    {   \n    int val;   \n    };   \n  \nstruct throws   \n    {   \n    throws() throw(int)   \n        {   \n        }   \n  \n    throws(const throws&) throw(int)   \n        {   \n        }   \n  \n    throws& operator=(const throws&) throw(int)   \n        {   \n        }   \n  \n    int val;   \n    };   \n  \nint main()   \n    {   \n    std::cout << \"is_pod<trivial> == \" << std::boolalpha   \n        << std::is_pod<trivial>::value << std::endl;   \n    std::cout << \"is_pod<int> == \" << std::boolalpha   \n        << std::is_pod<int>::value << std::endl;   \n    std::cout << \"is_pod<throws> == \" << std::boolalpha   \n        << std::is_pod<throws>::value << std::endl;   \n  \n    return (0);   \n    }   \n    /* Output:  \n    is_pod<trivial> == true  \nis_pod<int> == true  \nis_pod<throws> == false  \n*/  \n  \n```  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)\n\n\n\n"}