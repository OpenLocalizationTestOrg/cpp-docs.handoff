{"nodes":[{"pos":[12,63],"content":"Identifiers in Primary Expressions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Identifiers in Primary Expressions | Microsoft Docs","pos":[0,51]}]},{"content":"Identifiers in Primary Expressions","pos":[612,646]},{"content":"Identifiers can have integral, <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`enum`</ph>, <ph id=\"ph2\">`struct`</ph>, <bpt id=\"p2\">**</bpt>union<ept id=\"p2\">**</ept>, array, pointer, or function type.","pos":[647,751],"source":"Identifiers can have integral, **float**, `enum`, `struct`, **union**, array, pointer, or function type."},{"content":"An identifier is a primary expression provided it has been declared as designating an object (in which case it is an l-value) or as a function (in which case it is a function designator).","pos":[752,939]},{"content":"See <bpt id=\"p1\">[</bpt>L-Value and R-Value Expressions<ept id=\"p1\">](../c-language/l-value-and-r-value-expressions.md)</ept> for a definition of l-value.","pos":[940,1056],"source":" See [L-Value and R-Value Expressions](../c-language/l-value-and-r-value-expressions.md) for a definition of l-value."},{"content":"The pointer value represented by an array identifier is not a variable, so an array identifier cannot form the left-hand operand of an assignment operation and therefore is not a modifiable l-value.","pos":[1063,1261]},{"content":"An identifier declared as a function represents a pointer whose value is the address of the function.","pos":[1268,1369]},{"content":"The pointer addresses a function returning a value of a specified type.","pos":[1370,1441]},{"content":"Thus, function identifiers also cannot be l-values in assignment operations.","pos":[1442,1518]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Identifiers<ept id=\"p1\">](../c-language/c-identifiers.md)</ept>.","pos":[1519,1591],"source":" For more information, see [Identifiers](../c-language/c-identifiers.md)."},{"content":"See Also","pos":[1600,1608]},{"content":"C Primary Expressions","pos":[1613,1634]}],"content":"---\ntitle: \"Identifiers in Primary Expressions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"identifiers, designating objects\"\nms.assetid: d4602fe6-e7e6-40cc-9823-3b1ebf5d3d38\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Identifiers in Primary Expressions\nIdentifiers can have integral, **float**, `enum`, `struct`, **union**, array, pointer, or function type. An identifier is a primary expression provided it has been declared as designating an object (in which case it is an l-value) or as a function (in which case it is a function designator). See [L-Value and R-Value Expressions](../c-language/l-value-and-r-value-expressions.md) for a definition of l-value.  \n  \n The pointer value represented by an array identifier is not a variable, so an array identifier cannot form the left-hand operand of an assignment operation and therefore is not a modifiable l-value.  \n  \n An identifier declared as a function represents a pointer whose value is the address of the function. The pointer addresses a function returning a value of a specified type. Thus, function identifiers also cannot be l-values in assignment operations. For more information, see [Identifiers](../c-language/c-identifiers.md).  \n  \n## See Also  \n [C Primary Expressions](../c-language/c-primary-expressions.md)"}