{"nodes":[{"pos":[12,47],"content":"Using Arrays (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using Arrays (C++) | Microsoft Docs","pos":[0,35]}]},{"content":"Using Arrays (C++)","pos":[580,598]},{"content":"You can access individual elements of an array by using the array subscript operator (<ph id=\"ph1\">`[ ]`</ph>).","pos":[599,692],"source":"You can access individual elements of an array by using the array subscript operator (`[ ]`)."},{"content":"If a one-dimensional array is used in an expression that has no subscript, the array name evaluates to a pointer to the first element in the array.","pos":[693,840]},{"content":"When you use multidimensional arrays, you can use various combinations in expressions.","pos":[1154,1240]},{"content":"In the preceding code, <ph id=\"ph1\">`multi`</ph> is a three-dimensional array of type <ph id=\"ph2\">`double`</ph>.","pos":[1868,1945],"source":"In the preceding code, `multi` is a three-dimensional array of type `double`."},{"content":"The <ph id=\"ph1\">`p2multi`</ph> pointer points to an array of type <ph id=\"ph2\">`double`</ph> of size three.","pos":[1946,2018],"source":" The `p2multi` pointer points to an array of type `double` of size three."},{"content":"In this example, the array is used with one, two, and three subscripts.","pos":[2019,2090]},{"content":"Although it is more common to specify all subscripts, as in the <ph id=\"ph1\">`cout`</ph> statement, it is sometimes useful to select a specific subset of array elements, as shown in the statements that follow <ph id=\"ph2\">`cout`</ph>.","pos":[2091,2289],"source":" Although it is more common to specify all subscripts, as in the `cout` statement, it is sometimes useful to select a specific subset of array elements, as shown in the statements that follow `cout`."},{"content":"See Also","pos":[2298,2306]},{"content":"Arrays","pos":[2311,2317]}],"content":"---\ntitle: \"Using Arrays (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"arrays [C++]\"\nms.assetid: 7818a7fe-7e82-4881-a3d1-7d25162b7fc7\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using Arrays (C++)\nYou can access individual elements of an array by using the array subscript operator (`[ ]`). If a one-dimensional array is used in an expression that has no subscript, the array name evaluates to a pointer to the first element in the array.  \n  \n```  \n// using_arrays.cpp  \nint main() {  \n   char chArray[10];  \n   char *pch = chArray;   // Evaluates to a pointer to the first element.  \n   char   ch = chArray[0];   // Evaluates to the value of the first element.  \n   ch = chArray[3];   // Evaluates to the value of the fourth element.  \n}  \n```  \n  \n When you use multidimensional arrays, you can use various combinations in expressions.  \n  \n```  \n// using_arrays_2.cpp  \n// compile with: /EHsc /W1  \n#include <iostream>  \nusing namespace std;  \nint main() {  \n   double multi[4][4][3];   // Declare the array.  \n   double (*p2multi)[3];  \n   double (*p1multi);  \n  \n   cout << multi[3][2][2] << \"\\n\";   // C4700 Use three subscripts.  \n   p2multi = multi[3];               // Make p2multi point to  \n                                     // fourth \"plane\" of multi.  \n   p1multi = multi[3][2];            // Make p1multi point to  \n                                     // fourth plane, third row  \n                                     // of multi.  \n}  \n```  \n  \n In the preceding code, `multi` is a three-dimensional array of type `double`. The `p2multi` pointer points to an array of type `double` of size three. In this example, the array is used with one, two, and three subscripts. Although it is more common to specify all subscripts, as in the `cout` statement, it is sometimes useful to select a specific subset of array elements, as shown in the statements that follow `cout`.  \n  \n## See Also  \n [Arrays](../cpp/arrays-cpp.md)"}