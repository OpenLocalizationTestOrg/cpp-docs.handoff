{"nodes":[{"pos":[12,54],"content":"CNonStatelessWorker Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CNonStatelessWorker Class | Microsoft Docs","pos":[0,42]}]},{"pos":[769,794],"content":"CNonStatelessWorker Class","linkify":"CNonStatelessWorker Class","nodes":[{"content":"CNonStatelessWorker Class","pos":[0,25]}]},{"content":"Receives requests from a thread pool and passes them on to a worker object that is created and destroyed on each request.","pos":[795,916]},{"pos":[924,1034],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"pos":[1043,1049],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1124,1134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>Worker<ept id=\"p1\">*</ept>","pos":[1138,1146],"source":"*Worker*"},{"content":"A worker thread class conforming to the <bpt id=\"p1\">[</bpt>worker archetype<ept id=\"p1\">](../../atl/reference/worker-archetype.md)</ept> suitable for handling requests queued on <bpt id=\"p2\">[</bpt>CThreadPool<ept id=\"p2\">](../../atl/reference/cthreadpool-class.md)</ept>.","pos":[1150,1347],"source":" A worker thread class conforming to the [worker archetype](../../atl/reference/worker-archetype.md) suitable for handling requests queued on [CThreadPool](../../atl/reference/cthreadpool-class.md)."},{"pos":[1356,1363],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1373,1388],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1395,1399]},{"content":"Description","pos":[1400,1411]},{"pos":[1449,1518],"content":"<bpt id=\"p1\">[</bpt>CNonStatelessWorker::RequestType<ept id=\"p1\">](#cnonstatelessworker__requesttype)</ept>","source":"[CNonStatelessWorker::RequestType](#cnonstatelessworker__requesttype)"},{"pos":[1519,1618],"content":"Implementation of <bpt id=\"p1\">[</bpt>WorkerArchetype::RequestType<ept id=\"p1\">](worker-archetype.md#workerarchetype__requesttype)</ept>.","source":"Implementation of [WorkerArchetype::RequestType](worker-archetype.md#workerarchetype__requesttype)."},{"pos":[1629,1643],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1650,1654]},{"content":"Description","pos":[1655,1666]},{"pos":[1704,1765],"content":"<bpt id=\"p1\">[</bpt>CNonStatelessWorker::Execute<ept id=\"p1\">](#cnonstatelessworker__execute)</ept>","source":"[CNonStatelessWorker::Execute](#cnonstatelessworker__execute)"},{"pos":[1766,1857],"content":"Implementation of <bpt id=\"p1\">[</bpt>WorkerArchetype::Execute<ept id=\"p1\">](worker-archetype.md#workerarchetype__execute)</ept>.","source":"Implementation of [WorkerArchetype::Execute](worker-archetype.md#workerarchetype__execute)."},{"pos":[1862,1929],"content":"<bpt id=\"p1\">[</bpt>CNonStatelessWorker::Initialize<ept id=\"p1\">](#cnonstatelessworker__initialize)</ept>","source":"[CNonStatelessWorker::Initialize](#cnonstatelessworker__initialize)"},{"pos":[1930,2027],"content":"Implementation of <bpt id=\"p1\">[</bpt>WorkerArchetype::Initialize<ept id=\"p1\">](worker-archetype.md#workerarchetype__initialize)</ept>.","source":"Implementation of [WorkerArchetype::Initialize](worker-archetype.md#workerarchetype__initialize)."},{"pos":[2032,2097],"content":"<bpt id=\"p1\">[</bpt>CNonStatelessWorker::Terminate<ept id=\"p1\">](#cnonstatelessworker__terminate)</ept>","source":"[CNonStatelessWorker::Terminate](#cnonstatelessworker__terminate)"},{"pos":[2098,2193],"content":"Implementation of <bpt id=\"p1\">[</bpt>WorkerArchetype::Terminate<ept id=\"p1\">](worker-archetype.md#workerarchetype__terminate)</ept>.","source":"Implementation of [WorkerArchetype::Terminate](worker-archetype.md#workerarchetype__terminate)."},{"pos":[2203,2210],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class is a simple worker thread for use with <bpt id=\"p1\">[</bpt>CThreadPool<ept id=\"p1\">](../../atl/reference/cthreadpool-class.md)</ept>.","pos":[2214,2320],"source":"This class is a simple worker thread for use with [CThreadPool](../../atl/reference/cthreadpool-class.md)."},{"content":"This class doesn't provide any request-handling capabilities of its own.","pos":[2321,2393]},{"content":"Instead, it instantiates one instance of <bpt id=\"p1\">*</bpt>Worker<ept id=\"p1\">*</ept> per request and delegates the implementation of its methods to that instance.","pos":[2394,2521],"source":" Instead, it instantiates one instance of *Worker* per request and delegates the implementation of its methods to that instance."},{"content":"The benefit of this class is that it provides a convenient way to change the state model for existing worker thread classes.","pos":[2528,2652]},{"content":"<ph id=\"ph1\">`CThreadPool`</ph> will create a single worker for the lifetime of the thread, so if the worker class holds state, it will hold it across multiple requests.","pos":[2653,2804],"source":"`CThreadPool` will create a single worker for the lifetime of the thread, so if the worker class holds state, it will hold it across multiple requests."},{"content":"By simply wrapping that class in the <ph id=\"ph1\">`CNonStatelessWorker`</ph> template before using it with <ph id=\"ph2\">`CThreadPool`</ph>, the lifetime of the worker and the state it holds is limited to a single request.","pos":[2805,2990],"source":" By simply wrapping that class in the `CNonStatelessWorker` template before using it with `CThreadPool`, the lifetime of the worker and the state it holds is limited to a single request."},{"pos":[2999,3011],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3015,3036],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[3046,3119],"content":"<bpt id=\"p1\">&lt;a name=\"cnonstatelessworker__execute\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CNonStatelessWorker::Execute","linkify":"<a name=\"cnonstatelessworker__execute\"></a>  CNonStatelessWorker::Execute","source":"<a name=\"cnonstatelessworker__execute\"></a>  CNonStatelessWorker::Execute"},{"pos":[3123,3214],"content":"Implementation of <bpt id=\"p1\">[</bpt>WorkerArchetype::Execute<ept id=\"p1\">](worker-archetype.md#workerarchetype__execute)</ept>.","source":"Implementation of [WorkerArchetype::Execute](worker-archetype.md#workerarchetype__execute)."},{"pos":[3340,3347],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method creates an instance of the <bpt id=\"p1\">*</bpt>Worker<ept id=\"p1\">*</ept> class on the stack and calls <bpt id=\"p2\">[</bpt>Initialize<ept id=\"p2\">](worker-archetype.md#workerarchetype__initialize)</ept> on that object.","pos":[3351,3505],"source":"This method creates an instance of the *Worker* class on the stack and calls [Initialize](worker-archetype.md#workerarchetype__initialize) on that object."},{"content":"If the initialization is successful, this method also calls <bpt id=\"p1\">[</bpt>Execute<ept id=\"p1\">](worker-archetype.md#workerarchetype__execute)</ept> and <bpt id=\"p2\">[</bpt>Terminate<ept id=\"p2\">](worker-archetype.md#workerarchetype__terminate)</ept> on the same object.","pos":[3506,3705],"source":" If the initialization is successful, this method also calls [Execute](worker-archetype.md#workerarchetype__execute) and [Terminate](worker-archetype.md#workerarchetype__terminate) on the same object."},{"pos":[3716,3795],"content":"<bpt id=\"p1\">&lt;a name=\"cnonstatelessworker__initialize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CNonStatelessWorker::Initialize","linkify":"<a name=\"cnonstatelessworker__initialize\"></a>  CNonStatelessWorker::Initialize","source":"<a name=\"cnonstatelessworker__initialize\"></a>  CNonStatelessWorker::Initialize"},{"pos":[3799,3896],"content":"Implementation of <bpt id=\"p1\">[</bpt>WorkerArchetype::Initialize<ept id=\"p1\">](worker-archetype.md#workerarchetype__initialize)</ept>.","source":"Implementation of [WorkerArchetype::Initialize](worker-archetype.md#workerarchetype__initialize)."},{"pos":[3966,3978],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns TRUE.","pos":[3982,4002]},{"pos":[4012,4019],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4023,4081],"content":"This class does not do any initialization in <ph id=\"ph1\">`Initialize`</ph>.","source":"This class does not do any initialization in `Initialize`."},{"pos":[4091,4172],"content":"<bpt id=\"p1\">&lt;a name=\"cnonstatelessworker__requesttype\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CNonStatelessWorker::RequestType","linkify":"<a name=\"cnonstatelessworker__requesttype\"></a>  CNonStatelessWorker::RequestType","source":"<a name=\"cnonstatelessworker__requesttype\"></a>  CNonStatelessWorker::RequestType"},{"pos":[4176,4275],"content":"Implementation of <bpt id=\"p1\">[</bpt>WorkerArchetype::RequestType<ept id=\"p1\">](worker-archetype.md#workerarchetype__requesttype)</ept>.","source":"Implementation of [WorkerArchetype::RequestType](worker-archetype.md#workerarchetype__requesttype)."},{"pos":[4339,4346],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class handles the same type of work item as the class used for the <bpt id=\"p1\">*</bpt>Worker<ept id=\"p1\">*</ept> template parameter.","pos":[4350,4450],"source":"This class handles the same type of work item as the class used for the *Worker* template parameter."},{"content":"See <bpt id=\"p1\">[</bpt>CNonStatelessWorker Overview<ept id=\"p1\">](../../atl/reference/cnonstatelessworker-class.md)</ept> for details.","pos":[4451,4548],"source":" See [CNonStatelessWorker Overview](../../atl/reference/cnonstatelessworker-class.md) for details."},{"pos":[4558,4635],"content":"<bpt id=\"p1\">&lt;a name=\"cnonstatelessworker__terminate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CNonStatelessWorker::Terminate","linkify":"<a name=\"cnonstatelessworker__terminate\"></a>  CNonStatelessWorker::Terminate","source":"<a name=\"cnonstatelessworker__terminate\"></a>  CNonStatelessWorker::Terminate"},{"pos":[4639,4734],"content":"Implementation of <bpt id=\"p1\">[</bpt>WorkerArchetype::Terminate<ept id=\"p1\">](worker-archetype.md#workerarchetype__terminate)</ept>.","source":"Implementation of [WorkerArchetype::Terminate](worker-archetype.md#workerarchetype__terminate)."},{"pos":[4803,4810],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4814,4864],"content":"This class does not do any cleanup in <ph id=\"ph1\">`Terminate`</ph>.","source":"This class does not do any cleanup in `Terminate`."},{"pos":[4873,4881],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CThreadPool Class<ept id=\"p1\">](../../atl/reference/cthreadpool-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[4885,4947],"source":"[CThreadPool Class](../../atl/reference/cthreadpool-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Worker Archetype<ept id=\"p1\">](../../atl/reference/worker-archetype.md)</ept><ph id=\"ph1\"> </ph>","pos":[4950,5011],"source":" [Worker Archetype](../../atl/reference/worker-archetype.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../atl/reference/atl-classes.md)</ept>","pos":[5014,5060],"source":" [Classes](../../atl/reference/atl-classes.md)"}],"content":"---\ntitle: \"CNonStatelessWorker Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CNonStatelessWorker<Worker>\"\n  - \"ATL::CNonStatelessWorker\"\n  - \"ATL.CNonStatelessWorker\"\n  - \"CNonStatelessWorker\"\n  - \"ATL::CNonStatelessWorker<Worker>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CNonStatelessWorker class\"\nms.assetid: d00936c6-9e7d-49fb-b87d-417b963367d1\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CNonStatelessWorker Class\nReceives requests from a thread pool and passes them on to a worker object that is created and destroyed on each request.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\ntemplate <class Worker>  class CNonStatelessWorker\n```  \n  \n#### Parameters  \n *Worker*  \n A worker thread class conforming to the [worker archetype](../../atl/reference/worker-archetype.md) suitable for handling requests queued on [CThreadPool](../../atl/reference/cthreadpool-class.md).  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CNonStatelessWorker::RequestType](#cnonstatelessworker__requesttype)|Implementation of [WorkerArchetype::RequestType](worker-archetype.md#workerarchetype__requesttype).|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CNonStatelessWorker::Execute](#cnonstatelessworker__execute)|Implementation of [WorkerArchetype::Execute](worker-archetype.md#workerarchetype__execute).|  \n|[CNonStatelessWorker::Initialize](#cnonstatelessworker__initialize)|Implementation of [WorkerArchetype::Initialize](worker-archetype.md#workerarchetype__initialize).|  \n|[CNonStatelessWorker::Terminate](#cnonstatelessworker__terminate)|Implementation of [WorkerArchetype::Terminate](worker-archetype.md#workerarchetype__terminate).|  \n  \n## Remarks  \n This class is a simple worker thread for use with [CThreadPool](../../atl/reference/cthreadpool-class.md). This class doesn't provide any request-handling capabilities of its own. Instead, it instantiates one instance of *Worker* per request and delegates the implementation of its methods to that instance.  \n  \n The benefit of this class is that it provides a convenient way to change the state model for existing worker thread classes. `CThreadPool` will create a single worker for the lifetime of the thread, so if the worker class holds state, it will hold it across multiple requests. By simply wrapping that class in the `CNonStatelessWorker` template before using it with `CThreadPool`, the lifetime of the worker and the state it holds is limited to a single request.  \n  \n## Requirements  \n **Header:** atlutil.h  \n  \n##  <a name=\"cnonstatelessworker__execute\"></a>  CNonStatelessWorker::Execute  \n Implementation of [WorkerArchetype::Execute](worker-archetype.md#workerarchetype__execute).  \n\n  \n```\nvoid Execute(\n    Worker::RequestType request,\n    void* pvWorkerParam,\n    OVERLAPPED* pOverlapped);\n```  \n  \n### Remarks  \n This method creates an instance of the *Worker* class on the stack and calls [Initialize](worker-archetype.md#workerarchetype__initialize) on that object. If the initialization is successful, this method also calls [Execute](worker-archetype.md#workerarchetype__execute) and [Terminate](worker-archetype.md#workerarchetype__terminate) on the same object.  \n\n  \n##  <a name=\"cnonstatelessworker__initialize\"></a>  CNonStatelessWorker::Initialize  \n Implementation of [WorkerArchetype::Initialize](worker-archetype.md#workerarchetype__initialize).  \n  \n```\nBOOL Initialize(void* /* pvParam\n */) throw();\n```  \n  \n### Return Value  \n Always returns TRUE.  \n  \n### Remarks  \n This class does not do any initialization in `Initialize`.  \n  \n##  <a name=\"cnonstatelessworker__requesttype\"></a>  CNonStatelessWorker::RequestType  \n Implementation of [WorkerArchetype::RequestType](worker-archetype.md#workerarchetype__requesttype).  \n  \n```\ntypedef Worker::RequestType RequestType;\n```  \n  \n### Remarks  \n This class handles the same type of work item as the class used for the *Worker* template parameter. See [CNonStatelessWorker Overview](../../atl/reference/cnonstatelessworker-class.md) for details.  \n  \n##  <a name=\"cnonstatelessworker__terminate\"></a>  CNonStatelessWorker::Terminate  \n Implementation of [WorkerArchetype::Terminate](worker-archetype.md#workerarchetype__terminate).  \n  \n```\nvoid Terminate(void* /* pvParam\n */) throw();\n```  \n  \n### Remarks  \n This class does not do any cleanup in `Terminate`.  \n  \n## See Also  \n [CThreadPool Class](../../atl/reference/cthreadpool-class.md)   \n [Worker Archetype](../../atl/reference/worker-archetype.md)   \n [Classes](../../atl/reference/atl-classes.md)\n"}