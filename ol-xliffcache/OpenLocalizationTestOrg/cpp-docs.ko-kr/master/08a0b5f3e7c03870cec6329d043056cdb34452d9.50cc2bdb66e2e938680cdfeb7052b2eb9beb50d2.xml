{"nodes":[{"pos":[12,46],"content":"_spawnv, _wspawnv | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_spawnv, _wspawnv | Microsoft Docs","pos":[0,34]}]},{"content":"_spawnv, _wspawnv","pos":[1110,1127]},{"content":"Creates and executes a new process.","pos":[1128,1163]},{"pos":[1171,1391],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[1400,1406]},{"content":"Parameters","pos":[1631,1641]},{"content":"Execution mode for the calling process.","pos":[1655,1694]},{"content":"Path of the file to be executed.","pos":[1714,1746]},{"content":"Array of pointers to arguments.","pos":[1763,1794]},{"content":"The argument <ph id=\"ph1\">`argv`</ph>[0] is usually a pointer to a path in real mode or to the program name in protected mode, and <ph id=\"ph2\">`argv`</ph>[1] through <ph id=\"ph3\">`argv`</ph>[<ph id=\"ph4\">`n`</ph>] are pointers to the character strings forming the new argument list.","pos":[1795,2006],"source":" The argument `argv`[0] is usually a pointer to a path in real mode or to the program name in protected mode, and `argv`[1] through `argv`[`n`] are pointers to the character strings forming the new argument list."},{"content":"The argument <ph id=\"ph1\">`argv`</ph>[<ph id=\"ph2\">`n`</ph> +1] must be a <ph id=\"ph3\">`NULL`</ph> pointer to mark the end of the argument list.","pos":[2007,2097],"source":" The argument `argv`[`n` +1] must be a `NULL` pointer to mark the end of the argument list."},{"content":"Return Value","pos":[2106,2118]},{"content":"The return value from a synchronous <ph id=\"ph1\">`_spawnv`</ph> or <ph id=\"ph2\">`_wspawnv`</ph> (<ph id=\"ph3\">`_P_WAIT`</ph> specified for <ph id=\"ph4\">`mode`</ph>) is the exit status of the new process.","pos":[2122,2253],"source":"The return value from a synchronous `_spawnv` or `_wspawnv` (`_P_WAIT` specified for `mode`) is the exit status of the new process."},{"content":"The return value from an asynchronous <ph id=\"ph1\">`_spawnv`</ph> or <ph id=\"ph2\">`_wspawnv`</ph> (<ph id=\"ph3\">`_P_NOWAIT`</ph> or <ph id=\"ph4\">`_P_NOWAITO`</ph> specified for <ph id=\"ph5\">`mode`</ph>) is the process handle.","pos":[2254,2389],"source":" The return value from an asynchronous `_spawnv` or `_wspawnv` (`_P_NOWAIT` or `_P_NOWAITO` specified for `mode`) is the process handle."},{"content":"The exit status is 0 if the process terminated normally.","pos":[2390,2446]},{"content":"You can set the exit status to a nonzero value if the spawned process specifically calls the <ph id=\"ph1\">`exit`</ph> routine with a nonzero argument.","pos":[2447,2579],"source":" You can set the exit status to a nonzero value if the spawned process specifically calls the `exit` routine with a nonzero argument."},{"content":"If the new process did not explicitly set a positive exit status, a positive exit status indicates an abnormal exit with an abort or an interrupt.","pos":[2580,2726]},{"content":"A return value of â€“1 indicates an error (the new process is not started).","pos":[2727,2800]},{"content":"In this case, <ph id=\"ph1\">`errno`</ph> is set to one of the following values.","pos":[2801,2861],"source":" In this case, `errno` is set to one of the following values."},{"content":"Argument list exceeds 1024 bytes.","pos":[2879,2912]},{"content":"argument is invalid.","pos":[2938,2958]},{"content":"File or path is not found.","pos":[2977,3003]},{"content":"Specified file is not executable or has invalid executable-file format.","pos":[3023,3094]},{"content":"Not enough memory is available to execute the new process.","pos":[3113,3171]},{"pos":[3178,3355],"content":"For more information about these and other return codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[3364,3371]},{"content":"Each of these functions creates and executes a new process, passing an array of pointers to command-line arguments.","pos":[3375,3490]},{"content":"These functions validate their parameters.","pos":[3497,3539]},{"content":"If either <ph id=\"ph1\">`cmdname`</ph> or <ph id=\"ph2\">`argv`</ph> is a null pointer, or if <ph id=\"ph3\">`argv`</ph> points to null pointer, or <ph id=\"ph4\">`argv[0]`</ph> is an empty string, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3540,3789],"source":" If either `cmdname` or `argv` is a null pointer, or if `argv` points to null pointer, or `argv[0]` is an empty string, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>, and return -1.","pos":[3790,3882],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL`, and return -1."},{"content":"No new process is spawned.","pos":[3883,3909]},{"content":"Requirements","pos":[3918,3930]},{"content":"Routine","pos":[3937,3944]},{"content":"Required header","pos":[3945,3960]},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>process.h&gt;","pos":[4017,4041],"source":"stdio.h> or \\<process.h>"},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4059,4081],"source":"stdio.h> or \\<wchar.h>"},{"pos":[4089,4187],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[4196,4203]},{"pos":[4207,4305],"content":"See the example in <bpt id=\"p1\">[</bpt>_spawn, _wspawn Functions<ept id=\"p1\">](../../c-runtime-library/spawn-wspawn-functions.md)</ept>.","source":"See the example in [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)."},{"content":".NET Framework Equivalent","pos":[4314,4339]},{"content":"System::Diagnostics::Process Class","pos":[4350,4384]},{"content":"System::Diagnostics::ProcessStartInfo Class","pos":[4470,4513]},{"content":"See Also","pos":[4606,4614]},{"content":"Process and Environment Control","pos":[4619,4650]},{"content":"_spawn, _wspawn Functions","pos":[4717,4742]},{"content":"abort","pos":[4800,4805]},{"content":"atexit","pos":[4856,4862]},{"content":"_exec, _wexec Functions","pos":[4914,4937]},{"content":"exit, _Exit, _exit","pos":[4993,5011]},{"content":"_flushall","pos":[5071,5080]},{"content":"_getmbcp","pos":[5134,5142]},{"content":"_onexit, _onexit_m","pos":[5195,5213]},{"content":"_setmbcp","pos":[5274,5282]},{"content":"system, _wsystem","pos":[5335,5351]}],"content":"---\ntitle: \"_spawnv, _wspawnv | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wspawnv\"\n  - \"_spawnv\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-process-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wspawnv\"\n  - \"_spawnv\"\n  - \"_wspawnv\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"wspawnv function\"\n  - \"processes, creating\"\n  - \"_spawnv function\"\n  - \"processes, executing new\"\n  - \"process creation\"\n  - \"_wspawnv function\"\n  - \"spawnv function\"\nms.assetid: 72360ef4-dfa9-44c1-88c1-b3ecb660aa7d\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _spawnv, _wspawnv\nCreates and executes a new process.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nintptr_t _spawnv(  \n   int mode,  \n   const char *cmdname,  \n   const char *const *argv   \n);  \nintptr_t _wspawnv(  \n   int mode,  \n   const wchar_t *cmdname,  \n   const wchar_t *const *argv   \n);  \n```  \n  \n#### Parameters  \n `mode`  \n Execution mode for the calling process.  \n  \n `cmdname`  \n Path of the file to be executed.  \n  \n `argv`  \n Array of pointers to arguments. The argument `argv`[0] is usually a pointer to a path in real mode or to the program name in protected mode, and `argv`[1] through `argv`[`n`] are pointers to the character strings forming the new argument list. The argument `argv`[`n` +1] must be a `NULL` pointer to mark the end of the argument list.  \n  \n## Return Value  \n The return value from a synchronous `_spawnv` or `_wspawnv` (`_P_WAIT` specified for `mode`) is the exit status of the new process. The return value from an asynchronous `_spawnv` or `_wspawnv` (`_P_NOWAIT` or `_P_NOWAITO` specified for `mode`) is the process handle. The exit status is 0 if the process terminated normally. You can set the exit status to a nonzero value if the spawned process specifically calls the `exit` routine with a nonzero argument. If the new process did not explicitly set a positive exit status, a positive exit status indicates an abnormal exit with an abort or an interrupt. A return value of â€“1 indicates an error (the new process is not started). In this case, `errno` is set to one of the following values.  \n  \n `E2BIG`  \n Argument list exceeds 1024 bytes.  \n  \n `EINVAL`  \n `mode` argument is invalid.  \n  \n `ENOENT`  \n File or path is not found.  \n  \n `ENOEXEC`  \n Specified file is not executable or has invalid executable-file format.  \n  \n `ENOMEM`  \n Not enough memory is available to execute the new process.  \n  \n For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Each of these functions creates and executes a new process, passing an array of pointers to command-line arguments.  \n  \n These functions validate their parameters. If either `cmdname` or `argv` is a null pointer, or if `argv` points to null pointer, or `argv[0]` is an empty string, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL`, and return -1. No new process is spawned.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_spawnv`|\\<stdio.h> or \\<process.h>|  \n|`_wspawnv`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n See the example in [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md).  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Diagnostics::Process Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)  \n  \n-   [System::Diagnostics::ProcessStartInfo Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)   \n [abort](../../c-runtime-library/reference/abort.md)   \n [atexit](../../c-runtime-library/reference/atexit.md)   \n [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md)   \n [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md)   \n [_flushall](../../c-runtime-library/reference/flushall.md)   \n [_getmbcp](../../c-runtime-library/reference/getmbcp.md)   \n [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md)   \n [_setmbcp](../../c-runtime-library/reference/setmbcp.md)   \n [system, _wsystem](../../c-runtime-library/reference/system-wsystem.md)"}