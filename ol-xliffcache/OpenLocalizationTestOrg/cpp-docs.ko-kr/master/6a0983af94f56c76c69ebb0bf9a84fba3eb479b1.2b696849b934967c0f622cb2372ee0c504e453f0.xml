{"nodes":[{"pos":[12,53],"content":"remove_copy_if (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"remove_copy_if (STL-CLR) | Microsoft Docs","pos":[0,41]}]},{"content":"remove_copy_if (STL/CLR)","pos":[640,664]},{"content":"Copies elements from a source range to a destination range, except that satisfying a predicate are not copied, without disturbing the order of the remaining elements and returning the end of a new destination range.","pos":[665,880]},{"content":"Syntax","pos":[889,895]},{"content":"Remarks","pos":[1066,1073]},{"content":"This function behaves the same as the STL function <ph id=\"ph1\">`remove_copy_if`</ph>.","pos":[1077,1145],"source":"This function behaves the same as the STL function `remove_copy_if`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>remove_copy_if<ept id=\"p1\">](http://msdn.microsoft.com/Library/76b1e0d6-26a8-4adb-a55e-c179fa4e2dac)</ept>.","pos":[1146,1261],"source":" For more information, see [remove_copy_if](http://msdn.microsoft.com/Library/76b1e0d6-26a8-4adb-a55e-c179fa4e2dac)."},{"content":"Requirements","pos":[1270,1282]},{"pos":[1286,1317],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/algorithm&gt;","source":"**Header:** \\<cliext/algorithm>"},{"pos":[1324,1345],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1354,1362]},{"content":"algorithm (STL/CLR)","pos":[1367,1386]}],"content":"---\ntitle: \"remove_copy_if (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::remove_copy_if\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"remove_copy_if function [STL/CLR]\"\nms.assetid: 5307f5fe-b6bb-4968-8da1-fea84ab96655\ncaps.latest.revision: 4\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# remove_copy_if (STL/CLR)\nCopies elements from a source range to a destination range, except that satisfying a predicate are not copied, without disturbing the order of the remaining elements and returning the end of a new destination range.  \n  \n## Syntax  \n  \n```  \ntemplate<class _InIt, class _OutIt, class _Pr> inline  \n    _OutIt remove_copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,  \n        _Pr _Pred);  \n```  \n  \n## Remarks  \n This function behaves the same as the STL function `remove_copy_if`. For more information, see [remove_copy_if](http://msdn.microsoft.com/Library/76b1e0d6-26a8-4adb-a55e-c179fa4e2dac).  \n  \n## Requirements  \n **Header:** \\<cliext/algorithm>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [algorithm (STL/CLR)](../dotnet/algorithm-stl-clr.md)"}