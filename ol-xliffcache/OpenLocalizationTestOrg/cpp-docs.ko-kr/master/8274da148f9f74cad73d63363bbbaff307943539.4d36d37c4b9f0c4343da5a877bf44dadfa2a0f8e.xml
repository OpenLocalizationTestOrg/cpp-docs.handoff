{"nodes":[{"pos":[12,52],"content":"ITopologyNode Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ITopologyNode Structure | Microsoft Docs","pos":[0,40]}]},{"content":"ITopologyNode Structure","pos":[641,664]},{"content":"An interface to a topology node as defined by the Resource Manager.","pos":[665,732]},{"content":"A node contains one or more execution resources.","pos":[733,781]},{"content":"Syntax","pos":[790,796]},{"content":"Members","pos":[840,847]},{"content":"Public Methods","pos":[857,871]},{"content":"Name","pos":[878,882]},{"content":"Description","pos":[883,894]},{"content":"ITopologyNode::GetExecutionResourceCount Method","pos":[933,980]},{"content":"Returns the number of execution resources grouped together under this node.","pos":[1010,1085]},{"content":"ITopologyNode::GetFirstExecutionResource Method","pos":[1091,1138]},{"content":"Returns the first execution resource grouped under this node in enumeration order.","pos":[1168,1250]},{"content":"ITopologyNode::GetId Method","pos":[1256,1283]},{"content":"Returns the Resource Manager's unique identifier for this node.","pos":[1293,1356]},{"content":"ITopologyNode::GetNext Method","pos":[1362,1391]},{"content":"Returns an interface to the next topology node in enumeration order.","pos":[1403,1471]},{"content":"ITopologyNode::GetNumaNode Method","pos":[1477,1510]},{"content":"Returns the Windows assigned NUMA node number to which this Resource Maanger node belongs.","pos":[1526,1616]},{"content":"Remarks","pos":[1626,1633]},{"content":"This interface is typically utilized to walk the topology of the system as observed by the Resource Manager.","pos":[1637,1745]},{"content":"Inheritance Hierarchy","pos":[1754,1775]},{"content":"Requirements","pos":[1803,1815]},{"pos":[1819,1841],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concrtrm.h","source":"**Header:** concrtrm.h"},{"pos":[1848,1874],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[1926,1973],"content":"ITopologyNode::GetExecutionResourceCount Method"},{"content":"Returns the number of execution resources grouped together under this node.","pos":[1977,2052]},{"content":"Return Value","pos":[2135,2147]},{"content":"The number of execution resources grouped together under this node.","pos":[2151,2218]},{"pos":[2270,2317],"content":"ITopologyNode::GetFirstExecutionResource Method"},{"content":"Returns the first execution resource grouped under this node in enumeration order.","pos":[2321,2403]},{"content":"Return Value","pos":[2501,2513]},{"content":"The first execution resource grouped under this node in enumeration order.","pos":[2517,2591]},{"pos":[2623,2650],"content":"ITopologyNode::GetId Method"},{"content":"Returns the Resource Manager's unique identifier for this node.","pos":[2654,2717]},{"content":"Return Value","pos":[2780,2792]},{"content":"The Resource Manager's unique identifier for this node.","pos":[2796,2851]},{"content":"Remarks","pos":[2861,2868]},{"content":"The Concurrency Runtime represents hardware threads on the system in groups of processor nodes.","pos":[2872,2967]},{"content":"Nodes are usually derived from the hardware topology of the system.","pos":[2968,3035]},{"content":"For example, all processors on a specific socket or a specific NUMA node may belong to the same processor node.","pos":[3036,3147]},{"content":"The Resource Manager assigns unique identifiers to these nodes starting with <ph id=\"ph1\">`0`</ph> up to and including <ph id=\"ph2\">`nodeCount - 1`</ph>, where <ph id=\"ph3\">`nodeCount`</ph> represents the total number of processor nodes on the system.","pos":[3148,3345],"source":" The Resource Manager assigns unique identifiers to these nodes starting with `0` up to and including `nodeCount - 1`, where `nodeCount` represents the total number of processor nodes on the system."},{"pos":[3352,3465],"content":"The count of nodes can be obtained from the function <bpt id=\"p1\">[</bpt>GetProcessorNodeCount<ept id=\"p1\">](concurrency-namespace-functions.md)</ept>.","source":"The count of nodes can be obtained from the function [GetProcessorNodeCount](concurrency-namespace-functions.md)."},{"pos":[3499,3528],"content":"ITopologyNode::GetNext Method"},{"content":"Returns an interface to the next topology node in enumeration order.","pos":[3532,3600]},{"content":"Return Value","pos":[3667,3679]},{"content":"An interface to the next node in enumeration order.","pos":[3683,3734]},{"content":"If there are no more nodes in enumeration order of the system topology, this method will return the value <ph id=\"ph1\">`NULL`</ph>.","pos":[3735,3848],"source":" If there are no more nodes in enumeration order of the system topology, this method will return the value `NULL`."},{"pos":[3886,3919],"content":"ITopologyNode::GetNumaNode Method"},{"content":"Returns the Windows assigned NUMA node number to which this Resource Maanger node belongs.","pos":[3923,4013]},{"content":"Return Value","pos":[4083,4095]},{"content":"The Windows assigned NUMA node number to which this Resource Manager node belongs.","pos":[4099,4181]},{"content":"Remarks","pos":[4191,4198]},{"content":"A thread proxy running on a virtual processor root belonging to this node will have affinity to at least the NUMA node level for the NUMA node returned by this method.","pos":[4202,4369]},{"content":"See Also","pos":[4378,4386]},{"content":"concurrency Namespace","pos":[4391,4412]}],"content":"---\ntitle: \"ITopologyNode Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concrtrm/concurrency::ITopologyNode\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ITopologyNode structure\"\nms.assetid: 92e7e032-04f6-4c7c-be36-8f9a35fc4734\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ITopologyNode Structure\nAn interface to a topology node as defined by the Resource Manager. A node contains one or more execution resources.  \n  \n## Syntax  \n  \n```\nstruct ITopologyNode;\n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ITopologyNode::GetExecutionResourceCount Method](#getexecutionresourcecount)|Returns the number of execution resources grouped together under this node.|  \n|[ITopologyNode::GetFirstExecutionResource Method](#getfirstexecutionresource)|Returns the first execution resource grouped under this node in enumeration order.|  \n|[ITopologyNode::GetId Method](#getid)|Returns the Resource Manager's unique identifier for this node.|  \n|[ITopologyNode::GetNext Method](#getnext)|Returns an interface to the next topology node in enumeration order.|  \n|[ITopologyNode::GetNumaNode Method](#getnumanode)|Returns the Windows assigned NUMA node number to which this Resource Maanger node belongs.|  \n  \n## Remarks  \n This interface is typically utilized to walk the topology of the system as observed by the Resource Manager.  \n  \n## Inheritance Hierarchy  \n `ITopologyNode`  \n  \n## Requirements  \n **Header:** concrtrm.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"getexecutionresourcecount\"></a>  ITopologyNode::GetExecutionResourceCount Method  \n Returns the number of execution resources grouped together under this node.  \n  \n```\nvirtual unsigned int GetExecutionResourceCount() const = 0;\n```  \n  \n### Return Value  \n The number of execution resources grouped together under this node.  \n  \n##  <a name=\"getfirstexecutionresource\"></a>  ITopologyNode::GetFirstExecutionResource Method  \n Returns the first execution resource grouped under this node in enumeration order.  \n  \n```\nvirtual ITopologyExecutionResource *GetFirstExecutionResource() const = 0;\n```  \n  \n### Return Value  \n The first execution resource grouped under this node in enumeration order.  \n  \n##  <a name=\"getid\"></a>  ITopologyNode::GetId Method  \n Returns the Resource Manager's unique identifier for this node.  \n  \n```\nvirtual unsigned int GetId() const = 0;\n```  \n  \n### Return Value  \n The Resource Manager's unique identifier for this node.  \n  \n### Remarks  \n The Concurrency Runtime represents hardware threads on the system in groups of processor nodes. Nodes are usually derived from the hardware topology of the system. For example, all processors on a specific socket or a specific NUMA node may belong to the same processor node. The Resource Manager assigns unique identifiers to these nodes starting with `0` up to and including `nodeCount - 1`, where `nodeCount` represents the total number of processor nodes on the system.  \n  \n The count of nodes can be obtained from the function [GetProcessorNodeCount](concurrency-namespace-functions.md).  \n  \n##  <a name=\"getnext\"></a>  ITopologyNode::GetNext Method  \n Returns an interface to the next topology node in enumeration order.  \n  \n```\nvirtual ITopologyNode *GetNext() const = 0;\n```  \n  \n### Return Value  \n An interface to the next node in enumeration order. If there are no more nodes in enumeration order of the system topology, this method will return the value `NULL`.  \n  \n##  <a name=\"getnumanode\"></a>  ITopologyNode::GetNumaNode Method  \n Returns the Windows assigned NUMA node number to which this Resource Maanger node belongs.  \n  \n```\nvirtual unsigned long GetNumaNode() const = 0;\n```  \n  \n### Return Value  \n The Windows assigned NUMA node number to which this Resource Manager node belongs.  \n  \n### Remarks  \n A thread proxy running on a virtual processor root belonging to this node will have affinity to at least the NUMA node level for the NUMA node returned by this method.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}