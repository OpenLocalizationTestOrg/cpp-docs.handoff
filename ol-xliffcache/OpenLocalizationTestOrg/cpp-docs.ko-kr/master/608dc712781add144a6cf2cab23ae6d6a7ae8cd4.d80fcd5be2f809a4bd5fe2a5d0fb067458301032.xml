{"nodes":[{"pos":[12,66],"content":"Conversions from Floating-Point Types | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Conversions from Floating-Point Types | Microsoft Docs","pos":[0,54]}]},{"content":"Conversions from Floating-Point Types","pos":[640,677]},{"content":"A <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> value converted to a <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept> or <ph id=\"ph1\">`long double`</ph>, or a <bpt id=\"p3\">**</bpt>double<ept id=\"p3\">**</ept> converted to a <ph id=\"ph2\">`long double`</ph>, undergoes no change in value.","pos":[678,815],"source":"A **float** value converted to a **double** or `long double`, or a **double** converted to a `long double`, undergoes no change in value."},{"content":"A <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept> value converted to a <bpt id=\"p2\">**</bpt>float<ept id=\"p2\">**</ept> value is represented exactly, if possible.","pos":[816,902],"source":" A **double** value converted to a **float** value is represented exactly, if possible."},{"content":"Precision may be lost if the value cannot be represented exactly.","pos":[903,968]},{"content":"If the result is out of range, the behavior is undefined.","pos":[969,1026]},{"content":"See <bpt id=\"p1\">[</bpt>Limits on Floating-Point Constants<ept id=\"p1\">](../c-language/limits-on-floating-point-constants.md)</ept> for the range of floating-point types.","pos":[1027,1159],"source":" See [Limits on Floating-Point Constants](../c-language/limits-on-floating-point-constants.md) for the range of floating-point types."},{"content":"A floating value is converted to an integral value by first converting to a <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>, then from the <bpt id=\"p2\">**</bpt>long<ept id=\"p2\">**</ept> value to the specific integral value.","pos":[1166,1312],"source":"A floating value is converted to an integral value by first converting to a **long**, then from the **long** value to the specific integral value."},{"content":"The decimal portion of the floating value is discarded in the conversion to a <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>.","pos":[1313,1400],"source":" The decimal portion of the floating value is discarded in the conversion to a **long**."},{"content":"If the result is still too large to fit into a <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>, the result of the conversion is undefined.","pos":[1401,1500],"source":" If the result is still too large to fit into a **long**, the result of the conversion is undefined."},{"content":"Microsoft Specific","pos":[1509,1527]},{"content":"When converting a <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`long double`</ph> floating-point number to a smaller floating-point number, the value of the floating-point variable is truncated toward zero when an underflow occurs.","pos":[1536,1731],"source":"When converting a **double** or `long double` floating-point number to a smaller floating-point number, the value of the floating-point variable is truncated toward zero when an underflow occurs."},{"content":"An overflow causes a run-time error.","pos":[1732,1768]},{"content":"Note that the Microsoft C compiler maps <ph id=\"ph1\">`long double`</ph> to type <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept>.","pos":[1769,1842],"source":" Note that the Microsoft C compiler maps `long double` to type **double**."},{"content":"END Microsoft Specific","pos":[1851,1873]},{"content":"The following table summarizes conversions from floating types.","pos":[1882,1945]},{"content":"Conversions from Floating-Point Types","pos":[1955,1992]},{"content":"From","pos":[1999,2003]},{"content":"To","pos":[2004,2006]},{"content":"Method","pos":[2007,2013]},{"content":"float","pos":[2057,2062]},{"pos":[2072,2112],"content":"Convert to <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>; convert <bpt id=\"p2\">**</bpt>long<ept id=\"p2\">**</ept> to","source":"Convert to **long**; convert **long** to "},{"content":"float","pos":[2126,2131]},{"content":"short","pos":[2136,2141]},{"pos":[2144,2194],"content":"Convert to <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>; convert <bpt id=\"p2\">**</bpt>long<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>short<ept id=\"p3\">**</ept>","source":"Convert to **long**; convert **long** to **short**"},{"content":"float","pos":[2201,2206]},{"content":"long","pos":[2211,2215]},{"content":"Truncate at decimal point.","pos":[2218,2244]},{"content":"If result is too large to be represented as <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>, result is undefined.","pos":[2245,2319],"source":" If result is too large to be represented as **long**, result is undefined."},{"content":"float","pos":[2326,2331]},{"content":"unsigned short","pos":[2336,2350]},{"pos":[2353,2414],"content":"Convert to <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>; convert <bpt id=\"p2\">**</bpt>long<ept id=\"p2\">**</ept> to <ph id=\"ph1\">`unsigned`</ph> <bpt id=\"p3\">**</bpt>short<ept id=\"p3\">**</ept>","source":"Convert to **long**; convert **long** to `unsigned` **short**"},{"content":"float","pos":[2421,2426]},{"pos":[2445,2505],"content":"Convert to <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>; convert <bpt id=\"p2\">**</bpt>long<ept id=\"p2\">**</ept> to <ph id=\"ph1\">`unsigned`</ph> <bpt id=\"p3\">**</bpt>long<ept id=\"p3\">**</ept>","source":"Convert to **long**; convert **long** to `unsigned` **long**"},{"content":"float","pos":[2512,2517]},{"content":"double","pos":[2522,2528]},{"content":"Change internal representation","pos":[2531,2561]},{"content":"float","pos":[2568,2573]},{"content":"Change internal representation","pos":[2590,2620]},{"content":"double","pos":[2627,2633]},{"pos":[2643,2685],"content":"Convert to <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>; convert <bpt id=\"p2\">**</bpt>float<ept id=\"p2\">**</ept> to","source":"Convert to **float**; convert **float** to "},{"content":"double","pos":[2699,2705]},{"content":"short","pos":[2710,2715]},{"pos":[2718,2770],"content":"Convert to <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>; convert <bpt id=\"p2\">**</bpt>float<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>short<ept id=\"p3\">**</ept>","source":"Convert to **float**; convert **float** to **short**"},{"content":"double","pos":[2777,2783]},{"content":"long","pos":[2788,2792]},{"content":"Truncate at decimal point.","pos":[2795,2821]},{"content":"If result is too large to be represented as <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>, result is undefined.","pos":[2822,2896],"source":" If result is too large to be represented as **long**, result is undefined."},{"content":"double","pos":[2903,2909]},{"content":"unsigned short","pos":[2914,2928]},{"pos":[2931,2990],"content":"Convert to <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>; convert <bpt id=\"p2\">**</bpt>long<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>unsigned short<ept id=\"p3\">**</ept>","source":"Convert to **long**; convert **long** to **unsigned short**"},{"content":"double","pos":[2997,3003]},{"pos":[3022,3082],"content":"Convert to <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>; convert <bpt id=\"p2\">**</bpt>long<ept id=\"p2\">**</ept> to <ph id=\"ph1\">`unsigned`</ph> <bpt id=\"p3\">**</bpt>long<ept id=\"p3\">**</ept>","source":"Convert to **long**; convert **long** to `unsigned` **long**"},{"content":"double","pos":[3089,3095]},{"content":"float","pos":[3100,3105]},{"content":"Represent as a <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>.","pos":[3108,3133],"source":"Represent as a **float**."},{"content":"If <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept> value cannot be represented exactly as <bpt id=\"p2\">**</bpt>float<ept id=\"p2\">**</ept>, loss of precision occurs.","pos":[3134,3223],"source":" If **double** value cannot be represented exactly as **float**, loss of precision occurs."},{"content":"If value is too large to be represented as <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>, the result is undefined.","pos":[3224,3302],"source":" If value is too large to be represented as **float**, the result is undefined."},{"pos":[3328,3370],"content":"Convert to <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>; convert <bpt id=\"p2\">**</bpt>float<ept id=\"p2\">**</ept> to","source":"Convert to **float**; convert **float** to "},{"content":"short","pos":[3398,3403]},{"pos":[3406,3458],"content":"Convert to <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>; convert <bpt id=\"p2\">**</bpt>float<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>short<ept id=\"p3\">**</ept>","source":"Convert to **float**; convert **float** to **short**"},{"content":"long","pos":[3479,3483]},{"content":"Truncate at decimal point.","pos":[3486,3512]},{"content":"If result is too large to be represented as <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>, result is undefined.","pos":[3513,3587],"source":" If result is too large to be represented as **long**, result is undefined."},{"content":"unsigned short","pos":[3608,3622]},{"pos":[3625,3686],"content":"Convert to <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>; convert <bpt id=\"p2\">**</bpt>long<ept id=\"p2\">**</ept> to <ph id=\"ph1\">`unsigned`</ph> <bpt id=\"p3\">**</bpt>short<ept id=\"p3\">**</ept>","source":"Convert to **long**; convert **long** to `unsigned` **short**"},{"pos":[3721,3781],"content":"Convert to <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>; convert <bpt id=\"p2\">**</bpt>long<ept id=\"p2\">**</ept> to <ph id=\"ph1\">`unsigned`</ph> <bpt id=\"p3\">**</bpt>long<ept id=\"p3\">**</ept>","source":"Convert to **long**; convert **long** to `unsigned` **long**"},{"content":"float","pos":[3802,3807]},{"content":"Represent as a <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>.","pos":[3810,3835],"source":"Represent as a **float**."},{"content":"If <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept> value cannot be represented exactly as <bpt id=\"p2\">**</bpt>float<ept id=\"p2\">**</ept>, loss of precision occurs.","pos":[3836,3925],"source":" If **double** value cannot be represented exactly as **float**, loss of precision occurs."},{"content":"If value is too large to be represented as <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>, the result is undefined.","pos":[3926,4004],"source":" If value is too large to be represented as **float**, the result is undefined."},{"content":"double","pos":[4025,4031]},{"pos":[4034,4085],"content":"The <bpt id=\"p1\">**</bpt>long double<ept id=\"p1\">**</ept> value is treated as <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept>.","source":"The **long double** value is treated as **double**."},{"pos":[4093,4273],"content":"Conversions from <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept>, or <ph id=\"ph1\">`long double`</ph> values to <ph id=\"ph2\">`unsigned long`</ph> are not accurate if the value being converted is larger than the maximum positive <bpt id=\"p3\">**</bpt>long<ept id=\"p3\">**</ept> value.","source":"Conversions from **float**, **double**, or `long double` values to `unsigned long` are not accurate if the value being converted is larger than the maximum positive **long** value."},{"content":"See Also","pos":[4282,4290]},{"content":"Assignment Conversions","pos":[4295,4317]}],"content":"---\ntitle: \"Conversions from Floating-Point Types | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"converting floating point\"\n  - \"floating-point conversion\"\nms.assetid: 96804c8e-fa3b-4742-9006-0082ed9e57f2\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Conversions from Floating-Point Types\nA **float** value converted to a **double** or `long double`, or a **double** converted to a `long double`, undergoes no change in value. A **double** value converted to a **float** value is represented exactly, if possible. Precision may be lost if the value cannot be represented exactly. If the result is out of range, the behavior is undefined. See [Limits on Floating-Point Constants](../c-language/limits-on-floating-point-constants.md) for the range of floating-point types.  \n  \n A floating value is converted to an integral value by first converting to a **long**, then from the **long** value to the specific integral value. The decimal portion of the floating value is discarded in the conversion to a **long**. If the result is still too large to fit into a **long**, the result of the conversion is undefined.  \n  \n **Microsoft Specific**  \n  \n When converting a **double** or `long double` floating-point number to a smaller floating-point number, the value of the floating-point variable is truncated toward zero when an underflow occurs. An overflow causes a run-time error. Note that the Microsoft C compiler maps `long double` to type **double**.  \n  \n **END Microsoft Specific**  \n  \n The following table summarizes conversions from floating types.  \n  \n### Conversions from Floating-Point Types  \n  \n|From|To|Method|  \n|----------|--------|------------|  \n|**float**|`char`|Convert to **long**; convert **long** to `char`|  \n|**float**|**short**|Convert to **long**; convert **long** to **short**|  \n|**float**|**long**|Truncate at decimal point. If result is too large to be represented as **long**, result is undefined.|  \n|**float**|**unsigned short**|Convert to **long**; convert **long** to `unsigned` **short**|  \n|**float**|`unsigned long`|Convert to **long**; convert **long** to `unsigned` **long**|  \n|**float**|**double**|Change internal representation|  \n|**float**|`long double`|Change internal representation|  \n|**double**|`char`|Convert to **float**; convert **float** to `char`|  \n|**double**|**short**|Convert to **float**; convert **float** to **short**|  \n|**double**|**long**|Truncate at decimal point. If result is too large to be represented as **long**, result is undefined.|  \n|**double**|**unsigned short**|Convert to **long**; convert **long** to **unsigned short**|  \n|**double**|`unsigned long`|Convert to **long**; convert **long** to `unsigned` **long**|  \n|**double**|**float**|Represent as a **float**. If **double** value cannot be represented exactly as **float**, loss of precision occurs. If value is too large to be represented as **float**, the result is undefined.|  \n|`long double`|`char`|Convert to **float**; convert **float** to `char`|  \n|`long double`|**short**|Convert to **float**; convert **float** to **short**|  \n|`long double`|**long**|Truncate at decimal point. If result is too large to be represented as **long**, result is undefined.|  \n|`long double`|**unsigned short**|Convert to **long**; convert **long** to `unsigned` **short**|  \n|`long double`|`unsigned long`|Convert to **long**; convert **long** to `unsigned` **long**|  \n|`long double`|**float**|Represent as a **float**. If **double** value cannot be represented exactly as **float**, loss of precision occurs. If value is too large to be represented as **float**, the result is undefined.|  \n|`long double`|**double**|The **long double** value is treated as **double**.|  \n  \n Conversions from **float**, **double**, or `long double` values to `unsigned long` are not accurate if the value being converted is larger than the maximum positive **long** value.  \n  \n## See Also  \n [Assignment Conversions](../c-language/assignment-conversions.md)"}