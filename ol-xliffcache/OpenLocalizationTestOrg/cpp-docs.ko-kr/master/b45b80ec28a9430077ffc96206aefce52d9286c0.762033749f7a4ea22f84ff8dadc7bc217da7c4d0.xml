{"nodes":[{"pos":[12,75],"content":"-Zc:rvalueCast (Enforce type conversion rules) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-Zc:rvalueCast (Enforce type conversion rules) | Microsoft Docs","pos":[0,63]}]},{"content":"/Zc:rvalueCast (Enforce type conversion rules)","pos":[841,887]},{"content":"When the <bpt id=\"p1\">**</bpt>/Zc:rvalueCast<ept id=\"p1\">**</ept> option is specified, the compiler correctly identifies an rvalue reference type as the result of a cast operation in accordance with the C++11 standard.","pos":[888,1068],"source":"When the **/Zc:rvalueCast** option is specified, the compiler correctly identifies an rvalue reference type as the result of a cast operation in accordance with the C++11 standard."},{"content":"When the option is not specified, the compiler behavior is the same as in Visual Studio 2012.","pos":[1069,1162]},{"content":"By default, <bpt id=\"p1\">**</bpt>/Zc:rvalueCast<ept id=\"p1\">**</ept> is off.","pos":[1163,1201],"source":" By default, **/Zc:rvalueCast** is off."},{"content":"For conformance and to eliminate errors in the use of casts, we recommend that you use <bpt id=\"p1\">**</bpt>/Zc:rvalueCast<ept id=\"p1\">**</ept>.","pos":[1202,1308],"source":" For conformance and to eliminate errors in the use of casts, we recommend that you use **/Zc:rvalueCast**."},{"content":"Syntax","pos":[1317,1323]},{"content":"Remarks","pos":[1367,1374]},{"content":"If <bpt id=\"p1\">**</bpt>/Zc:rvalueCast<ept id=\"p1\">**</ept> is specified, the compiler follows section 5.4 of the C++11 standard and treats only cast expressions that result in non-reference types and cast expressions that result in rvalue references to non-function types as rvalue types.","pos":[1378,1629],"source":"If **/Zc:rvalueCast** is specified, the compiler follows section 5.4 of the C++11 standard and treats only cast expressions that result in non-reference types and cast expressions that result in rvalue references to non-function types as rvalue types."},{"content":"By default, or if <bpt id=\"p1\">**</bpt>/Zc:rvalueCast-<ept id=\"p1\">**</ept> is specified, the compiler is non-conformant and treats all cast expressions that result in rvalue references as rvalues.","pos":[1630,1789],"source":" By default, or if **/Zc:rvalueCast-** is specified, the compiler is non-conformant and treats all cast expressions that result in rvalue references as rvalues."},{"content":"Use <bpt id=\"p1\">**</bpt>/Zc:rvalueCast<ept id=\"p1\">**</ept> if you pass a cast expression as an argument to a function that takes an rvalue reference type.","pos":[1796,1914],"source":"Use **/Zc:rvalueCast** if you pass a cast expression as an argument to a function that takes an rvalue reference type."},{"content":"The default behavior causes compiler error <bpt id=\"p1\">[</bpt>C2664<ept id=\"p1\">](../../error-messages/compiler-errors-2/compiler-error-c2664.md)</ept> when the compiler incorrectly determines the type of the cast expression.","pos":[1915,2103],"source":" The default behavior causes compiler error [C2664](../../error-messages/compiler-errors-2/compiler-error-c2664.md) when the compiler incorrectly determines the type of the cast expression."},{"content":"This example shows a compiler error in correct code when /Zc:rvalueCast is not specified:","pos":[2104,2193]},{"content":"The default compiler behavior may not report error C2102 when appropriate.","pos":[3008,3082]},{"content":"In this example, the compiler does not report an error if the address of an rvalue created by an identity cast is taken when <bpt id=\"p1\">**</bpt>/Zc:rvalueCast<ept id=\"p1\">**</ept> is not specified:","pos":[3083,3244],"source":" In this example, the compiler does not report an error if the address of an rvalue created by an identity cast is taken when **/Zc:rvalueCast** is not specified:"},{"pos":[3497,3620],"content":"For more information about conformance issues in Visual C++, see <bpt id=\"p1\">[</bpt>Nonstandard Behavior<ept id=\"p1\">](../../cpp/nonstandard-behavior.md)</ept>.","source":"For more information about conformance issues in Visual C++, see [Nonstandard Behavior](../../cpp/nonstandard-behavior.md)."},{"content":"To set this compiler option in the Visual Studio development environment","pos":[3630,3702]},{"content":"Open the project's <bpt id=\"p1\">**</bpt>Property Pages<ept id=\"p1\">**</ept> dialog box.","pos":[3712,3761],"source":"Open the project's **Property Pages** dialog box."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Working with Project Properties<ept id=\"p1\">](../../ide/working-with-project-properties.md)</ept>.","pos":[3762,3859],"source":" For details, see [Working with Project Properties](../../ide/working-with-project-properties.md)."},{"pos":[3869,3897],"content":"Select the <bpt id=\"p1\">**</bpt>C/C++<ept id=\"p1\">**</ept> folder.","source":"Select the **C/C++** folder."},{"pos":[3907,3949],"content":"Select the <bpt id=\"p1\">**</bpt>Command Line<ept id=\"p1\">**</ept> property page.","source":"Select the **Command Line** property page."},{"pos":[3959,4055],"content":"Modify the <bpt id=\"p1\">**</bpt>Additional Options<ept id=\"p1\">**</ept> property to include <bpt id=\"p2\">**</bpt>/Zc:rvalueCast<ept id=\"p2\">**</ept> and then choose <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>.","source":"Modify the **Additional Options** property to include **/Zc:rvalueCast** and then choose **OK**."},{"content":"See Also","pos":[4064,4072]},{"content":"/Zc (Conformance)","pos":[4077,4094]}],"content":"---\ntitle: \"-Zc:rvalueCast (Enforce type conversion rules) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"rvaluecast\"\n  - \"/Zc:rvalueCast\"\n  - \"VC.Project.VCCLCompilerTool.EnforceTypeConversionRules\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"-Zc compiler options (C++)\"\n  - \"rvaluecast\"\n  - \"Enforce type conversion rules\"\n  - \"/Zc compiler options (C++)\"\n  - \"Zc compiler options (C++)\"\nms.assetid: 7825277d-e565-4c48-b0fb-76ac0b0c6e38\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# /Zc:rvalueCast (Enforce type conversion rules)\nWhen the **/Zc:rvalueCast** option is specified, the compiler correctly identifies an rvalue reference type as the result of a cast operation in accordance with the C++11 standard. When the option is not specified, the compiler behavior is the same as in Visual Studio 2012. By default, **/Zc:rvalueCast** is off. For conformance and to eliminate errors in the use of casts, we recommend that you use **/Zc:rvalueCast**.  \n  \n## Syntax  \n  \n```  \n/Zc:rvalueCast[-]  \n```  \n  \n## Remarks  \n If **/Zc:rvalueCast** is specified, the compiler follows section 5.4 of the C++11 standard and treats only cast expressions that result in non-reference types and cast expressions that result in rvalue references to non-function types as rvalue types. By default, or if **/Zc:rvalueCast-** is specified, the compiler is non-conformant and treats all cast expressions that result in rvalue references as rvalues.  \n  \n Use **/Zc:rvalueCast** if you pass a cast expression as an argument to a function that takes an rvalue reference type. The default behavior causes compiler error [C2664](../../error-messages/compiler-errors-2/compiler-error-c2664.md) when the compiler incorrectly determines the type of the cast expression. This example shows a compiler error in correct code when /Zc:rvalueCast is not specified:  \n  \n```cpp  \n// Test of /Zc:rvalueCast  \n// compile by using:  \n// cl /c /Zc:rvalueCast- make_thing.cpp  \n// cl /c /Zc:rvalueCast make_thing.cpp  \n  \n#include <utility>  \n  \ntemplate <typename T>   \nstruct Thing {  \n   // Construct a Thing by using two rvalue reference parameters  \n   Thing(T&& t1, T&& t2)  \n      : thing1(t1), thing2(t2) {}  \n  \n   T& thing1;  \n   T& thing2;  \n};  \n  \n// Create a Thing, using move semantics if possible  \ntemplate <typename T>  \nThing<T> make_thing(T&& t1, T&& t2)  \n{  \n   return (Thing<T>(std::forward<T>(t1), std::forward<T>(t2)));  \n}  \n  \nstruct Test1 {  \n   long a;  \n   long b;  \n  \n   Thing<long> test() {   \n      // Use identity casts to create rvalues as arguments  \n      return make_thing(static_cast<long>(a), static_cast<long>(b));   \n   }  \n};  \n  \n```  \n  \n The default compiler behavior may not report error C2102 when appropriate. In this example, the compiler does not report an error if the address of an rvalue created by an identity cast is taken when **/Zc:rvalueCast** is not specified:  \n  \n```cpp  \nint main() {  \n   int a = 1;  \n   int *p = &a;   // Okay, take address of lvalue   \n                  // Identity cast creates rvalue from lvalue;    \n   p = &(int)a;   // problem: should cause C2102: '&' requires l-value  \n}  \n```  \n  \n For more information about conformance issues in Visual C++, see [Nonstandard Behavior](../../cpp/nonstandard-behavior.md).  \n  \n### To set this compiler option in the Visual Studio development environment  \n  \n1.  Open the project's **Property Pages** dialog box. For details, see [Working with Project Properties](../../ide/working-with-project-properties.md).  \n  \n2.  Select the **C/C++** folder.  \n  \n3.  Select the **Command Line** property page.  \n  \n4.  Modify the **Additional Options** property to include **/Zc:rvalueCast** and then choose **OK**.  \n  \n## See Also  \n [/Zc (Conformance)](../../build/reference/zc-conformance.md)"}