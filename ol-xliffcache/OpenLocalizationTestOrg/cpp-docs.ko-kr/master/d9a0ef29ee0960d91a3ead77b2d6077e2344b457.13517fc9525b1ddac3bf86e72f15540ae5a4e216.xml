{"nodes":[{"pos":[12,43],"content":"CStrBufT Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CStrBufT Class | Microsoft Docs","pos":[0,31]}]},{"content":"CStrBufT Class","pos":[775,789]},{"pos":[790,912],"content":"This class provides automatic resource cleanup for <ph id=\"ph1\">`GetBuffer`</ph> and <ph id=\"ph2\">`ReleaseBuffer`</ph> calls on an existing <ph id=\"ph3\">`CStringT`</ph> object.","source":"This class provides automatic resource cleanup for `GetBuffer` and `ReleaseBuffer` calls on an existing `CStringT` object."},{"content":"Syntax","pos":[921,927]},{"content":"static const DWORD AUTO_LENGTH = 0x01;","pos":[3587,3625]},{"pos":[3854,3944],"content":"CStrBufT(StringType&amp; str, int nMinLength, DWORD dwFlags = AUTO_LENGTH) throw(...);","source":"CStrBufT(StringType& str,\n    int nMinLength,\n    DWORD dwFlags = AUTO_LENGTH) throw(...);"},{"content":"explicit CStrBufT(StringType&amp; str) throw(...);","pos":[3946,3992],"source":"explicit CStrBufT(StringType& str) throw(...);"},{"content":"Return Value","pos":[5453,5465]},{"content":"A character pointer to the string's data.","pos":[5469,5510]},{"content":"Remarks","pos":[5520,5527]},{"content":"Call this function to return a pointer to the character buffer of a string object.","pos":[5531,5613]},{"content":"The contents of the string object cannot be changed with this pointer.","pos":[5614,5684]},{"pos":[5735,5759],"content":"CStrBufT::operator PXSTR"},{"content":"Directly accesses characters stored in the associated string object as a C-style string.","pos":[5763,5851]},{"content":"```operator PXSTR() throw();","pos":[5857,5885]},{"pos":[6241,6290],"content":"typedef CSimpleStringT<ph id=\"ph1\">&lt;TCharType&gt;</ph>::PCXSTR PCXSTR;","source":"typedef CSimpleStringT<TCharType>::PCXSTR PCXSTR;"},{"pos":[6387,6434],"content":"typedef CSimpleStringT<ph id=\"ph1\">&lt;TCharType&gt;</ph>::PXSTR PXSTR;","source":"typedef CSimpleStringT<TCharType>::PXSTR PXSTR;"},{"content":"static const DWORD SET_LENGTH = 0x02;","pos":[6575,6612]},{"content":"void SetLength(int nLength);","pos":[7129,7157]},{"pos":[7654,7699],"content":"typedef CSimpleStringT<ph id=\"ph1\">&lt;TCharType&gt;</ph> StringType;","source":"typedef CSimpleStringT<TCharType> StringType;"}],"content":"---\ntitle: \"CStrBufT Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CStrBufT<TCharType>\"\n  - \"ATL.CStrBufT\"\n  - \"CStrBufT\"\n  - \"ATL::CStrBufT\"\n  - \"ATL.CStrBufT<TCharType>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"strings [C++], custom memory management\"\n  - \"CStrBufT class\"\n  - \"shared classes, CStrBufT\"\nms.assetid: 6b50fa8f-87e8-4ed4-a229-157ce128710f\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CStrBufT Class\nThis class provides automatic resource cleanup for `GetBuffer` and `ReleaseBuffer` calls on an existing `CStringT` object.  \n  \n## Syntax  \n  \n```\ntemplate<typename TCharType>\nclass CStrBufT```  \n  \n#### Parameters  \n *TCharType*  \n The character type of the `CStrBufT` class. Can be one of the following:  \n  \n- `char` (for ANSI character strings)  \n  \n- `wchar_t` (for Unicode character strings)  \n  \n- **TCHAR** (for both ANSI and Unicode character strings)  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`PCXSTR`|A pointer to a constant string.|  \n|`PXSTR`|A pointer to a string.|  \n|`StringType`|The string type whose buffer is to be manipulated by specializations of this class template.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CStrBufT::CStrBufT](#cstrbuft__cstrbuft)|The constructor for the string buffer object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CStrBufT::SetLength](#cstrbuft__setlength)|Sets the character buffer length of the associated string object.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CStrBufT::operator PCXSTR](#cstrbuft__operator_pcxstr)|Retrieves a **const** pointer to the character buffer of the associated string object.|  \n|[CStrBufT::operator PXSTR](#cstrbuft__operator_pxstr)|Retrieves a pointer to the character buffer of the associated string object.|  \n  \n### Public Constants  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CStrBufT::AUTO_LENGTH](#cstrbuft__auto_length)|Automatically determine the new length of the string at release.|  \n|[CStrBufT::SET_LENGTH](#cstrbuft__set_length)|Set the length of the string object at GetBuffer time|  \n  \n## Remarks  \n This class is used as a wrapper class for replacing calls to [GetBuffer](../../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__getbuffer) and [ReleaseBuffer](../../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__releasebuffer), or [GetBufferSetLength](../../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__getbuffersetlength) and `ReleaseBuffer`.  \n  \n Primarily designed as a helper class, `CStrBufT` provides a convenient way for a developer to work with the character buffer of a string object without worrying about how or when to call `ReleaseBuffer`. This is possible because the wrapper object goes out of scope naturally in the case of an exception or multiple exiting code paths; causing its destructor to free the string resource.  \n  \n## Requirements  \n **Header:** atlsimpstr.h  \n  \n##  <a name=\"cstrbuft__auto_length\"></a>  CStrBufT::AUTO_LENGTH  \n Automatically determine the new length of the string at release.  \n  \n```\nstatic const DWORD AUTO_LENGTH = 0x01;\n```  \n  \n### Remarks  \n Automatically determine the new length of the string at release. The string must be null-terminated.  \n  \n##  <a name=\"cstrbuft__cstrbuft\"></a>  CStrBufT::CStrBufT  \n Constructs a buffer object.  \n  \n```\nCStrBufT(StringType& str,\n    int nMinLength,\n    DWORD dwFlags = AUTO_LENGTH) throw(...);\n\nexplicit CStrBufT(StringType& str) throw(...);\n```  \n  \n### Parameters  \n `str`  \n The string object associated with the buffer. Typically, the developer will use the predefined typedefs of **CStrBuf** ( **TCHAR** variant), **CStrBufA** ( `char` variant) and **CStrBufW** ( `wchar_t` variant).  \n  \n *nMinLength*  \n The minimum length of the character buffer.  \n  \n `dwFlags`  \n Determines if the string length is automatically determined. Can be one of the following:  \n  \n- **AUTO_LENGTH** String length is automatically determined when [CSimpleStringT::Release](../../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__releasebuffer) is called. The string must be null-terminated. Default value.  \n  \n- **SET_LENGTH** String length is set when [CSimpleStringT::GetBuffer](../../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__getbuffer) is called.  \n  \n### Remarks  \n Creates a string buffer for the associated string object. During construction, [CSimpleStringT::GetBuffer](../../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__getbuffer) or [CSimpleStringT::GetBufferSetLength](../../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__getbuffersetlength) is called.  \n  \n Note that the copy constructor is `private`.  \n  \n##  <a name=\"cstrbuft__operator_pcxstr\"></a>  CStrBufT::operator PCXSTR  \n Directly accesses characters stored in the associated string object as a C-style string.  \n  \n```operator PCXSTR() const throw();\n```  \n  \n### Return Value  \n A character pointer to the string's data.  \n  \n### Remarks  \n Call this function to return a pointer to the character buffer of a string object. The contents of the string object cannot be changed with this pointer.  \n  \n##  <a name=\"cstrbuft__operator_pxstr\"></a>  CStrBufT::operator PXSTR  \n Directly accesses characters stored in the associated string object as a C-style string.  \n  \n```operator PXSTR() throw();\n```  \n  \n### Return Value  \n A character pointer to the string's data.  \n  \n### Remarks  \n Call this function to return a pointer to the character buffer of a string object. The developer may change the contents of the string object with this pointer.  \n  \n##  <a name=\"cstrbuft__pcxstr\"></a>  CStrBufT::PCXSTR  \n A pointer to a constant string.  \n  \n```\ntypedef CSimpleStringT<TCharType>::PCXSTR PCXSTR;\n```  \n  \n##  <a name=\"cstrbuft__pxstr\"></a>  CStrBufT::PXSTR  \n A pointer to a string.  \n  \n```\ntypedef CSimpleStringT<TCharType>::PXSTR PXSTR;\n```  \n  \n##  <a name=\"cstrbuft__set_length\"></a>  CStrBufT::SET_LENGTH  \n Set the length of the string object at `GetBuffer` time.  \n  \n```\nstatic const DWORD SET_LENGTH = 0x02;\n```  \n  \n### Remarks  \n Set the length of the string object at GetBuffer time.  \n  \n Determines if [CSimpleStringT::GetBuffer](../../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__getbuffer) and [CSimpleStringT::GetBufferSetLength](../../atl-mfc-shared/reference/csimplestringt-class.md#csimplestringt__getbuffersetlength) are called when the string buffer object is constructed.  \n  \n##  <a name=\"cstrbuft__setlength\"></a>  CStrBufT::SetLength  \n Sets the length of the character buffer.  \n  \n```\nvoid SetLength(int nLength);\n```  \n  \n### Parameters  \n `nLength`  \n The new length of the character buffer of the string object.  \n  \n> [!NOTE]\n>  Must be less than or equal to the minimum buffer length specified in the constructor of `CStrBufT`.  \n  \n### Remarks  \n Call this function to set the length of the string represented by the buffer object.  \n  \n##  <a name=\"cstrbuft__stringtype\"></a>  CStrBufT::StringType  \n The string type whose buffer is to be manipulated by specializations of this class template.  \n  \n```\ntypedef CSimpleStringT<TCharType> StringType;\n```  \n  \n### Remarks  \n **TCharType** is the character type used to specialize the class template.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [ATL/MFC Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md)\n\n\n"}