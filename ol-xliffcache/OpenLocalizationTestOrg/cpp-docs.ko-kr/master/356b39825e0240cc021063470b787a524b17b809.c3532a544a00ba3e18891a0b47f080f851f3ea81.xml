{"nodes":[{"pos":[12,47],"content":"out_of_range Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"out_of_range Class | Microsoft Docs","pos":[0,35]}]},{"content":"out_of_range Class","pos":[689,707]},{"content":"The class serves as the base class for all exceptions thrown to report an argument that is out of its valid range.","pos":[708,822]},{"content":"Syntax","pos":[831,837]},{"content":"Remarks","pos":[1020,1027]},{"pos":[1031,1196],"content":"The value returned by <bpt id=\"p1\">[</bpt>what<ept id=\"p1\">](../standard-library/exception-class.md)</ept> is a copy of <bpt id=\"p2\">**</bpt>message<ept id=\"p2\">**</ept><ph id=\"ph1\">`.`</ph><bpt id=\"p3\">[</bpt>data<ept id=\"p3\">](../standard-library/basic-string-class.md#basic_string__data)</ept>.","source":"The value returned by [what](../standard-library/exception-class.md) is a copy of **message**`.`[data](../standard-library/basic-string-class.md#basic_string__data)."},{"content":"Example","pos":[1205,1212]},{"content":"Output","pos":[1624,1630]},{"content":"Requirements","pos":[1688,1700]},{"pos":[1704,1728],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>stdexcept&gt;","source":"**Header:** \\<stdexcept>"},{"pos":[1735,1753],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[1762,1770]},{"content":"logic_error Class","pos":[1775,1792]},{"content":"Thread Safety in the C++ Standard Library","pos":[1841,1882]}],"content":"---\ntitle: \"out_of_range Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"out_of_range\"\n  - \"stdexcept/std::out_of_range\"\n  - \"std.out_of_range\"\n  - \"std::out_of_range\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"out_of_range class\"\nms.assetid: d0e14dc0-065e-4666-9ac9-51e52223c503\ncaps.latest.revision: 25\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# out_of_range Class\nThe class serves as the base class for all exceptions thrown to report an argument that is out of its valid range.  \n  \n## Syntax  \n  \n```  \nclass out_of_range : public logic_error {  \npublic:  \n    explicit out_of_range(const string& message);\n\n    explicit out_of_range(const char *message);\n\n};  \n```  \n  \n## Remarks  \n The value returned by [what](../standard-library/exception-class.md) is a copy of **message**`.`[data](../standard-library/basic-string-class.md#basic_string__data).  \n  \n## Example  \n  \n```cpp  \n// out_of_range.cpp  \n// compile with: /EHsc  \n#include <string>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main() {  \n// out_of_range  \n   try {  \n      string str( \"Micro\" );  \n      string rstr( \"soft\" );  \n      str.append( rstr, 5, 3 );  \n      cout << str << endl;  \n   }  \n   catch ( exception &e ) {  \n      cerr << \"Caught: \" << e.what( ) << endl;  \n   };  \n}  \n```  \n  \n## Output  \n  \n```  \nCaught: invalid string position  \n```  \n  \n## Requirements  \n **Header:** \\<stdexcept>  \n  \n **Namespace:** std  \n  \n## See Also  \n [logic_error Class](../standard-library/logic-error-class.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n"}