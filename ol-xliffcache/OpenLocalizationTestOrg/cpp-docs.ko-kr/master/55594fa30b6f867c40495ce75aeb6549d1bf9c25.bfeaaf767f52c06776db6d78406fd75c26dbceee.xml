{"nodes":[{"pos":[12,46],"content":"CComVariant Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComVariant Class | Microsoft Docs","pos":[0,34]}]},{"content":"CComVariant Class","pos":[697,714]},{"pos":[715,806],"content":"This class wraps the <ph id=\"ph1\">`VARIANT`</ph> type, providing a member indicating the type of data stored.","source":"This class wraps the `VARIANT` type, providing a member indicating the type of data stored."},{"content":"Syntax","pos":[815,821]},{"content":"Members","pos":[886,893]},{"content":"Public Constructors","pos":[903,922]},{"content":"Name","pos":[929,933]},{"content":"Description","pos":[934,945]},{"content":"CComVariant::CComVariant","pos":[984,1008]},{"content":"The constructor.","pos":[1037,1053]},{"content":"CComVariant::~CComVariant","pos":[1059,1084]},{"content":"The destructor.","pos":[1106,1121]},{"content":"Public Methods","pos":[1132,1146]},{"content":"Name","pos":[1153,1157]},{"content":"Description","pos":[1158,1169]},{"content":"CComVariant::Attach","pos":[1208,1227]},{"pos":[1251,1302],"content":"Attaches a <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> to the <ph id=\"ph1\">`CComVariant`</ph> object.","source":"Attaches a **VARIANT** to the `CComVariant` object."},{"content":"CComVariant::ChangeType","pos":[1308,1331]},{"pos":[1359,1407],"content":"Converts the <ph id=\"ph1\">`CComVariant`</ph> object to a new type.","source":"Converts the `CComVariant` object to a new type."},{"content":"CComVariant::Clear","pos":[1413,1431]},{"pos":[1454,1486],"content":"Clears the <ph id=\"ph1\">`CComVariant`</ph> object.","source":"Clears the `CComVariant` object."},{"content":"CComVariant::Copy","pos":[1492,1509]},{"pos":[1531,1580],"content":"Copies a <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> to the <ph id=\"ph1\">`CComVariant`</ph> object.","source":"Copies a **VARIANT** to the `CComVariant` object."},{"content":"CComVariant::CopyTo","pos":[1586,1605]},{"pos":[1629,1677],"content":"Copies the contents of the <ph id=\"ph1\">`CComVariant`</ph> object.","source":"Copies the contents of the `CComVariant` object."},{"content":"CComVariant::Detach","pos":[1683,1702]},{"pos":[1726,1792],"content":"Detaches the underlying <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> from the <ph id=\"ph1\">`CComVariant`</ph> object.","source":"Detaches the underlying **VARIANT** from the `CComVariant` object."},{"content":"CComVariant::GetSize","pos":[1798,1818]},{"pos":[1843,1923],"content":"Returns the size in number of bytes of the contents of the <ph id=\"ph1\">`CComVariant`</ph> object.","source":"Returns the size in number of bytes of the contents of the `CComVariant` object."},{"content":"CComVariant::ReadFromStream","pos":[1929,1956]},{"pos":[1988,2022],"content":"Loads a <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> from a stream.","source":"Loads a **VARIANT** from a stream."},{"content":"CComVariant::SetByRef","pos":[2028,2049]},{"pos":[2075,2155],"content":"Initializes the <ph id=\"ph1\">`CComVariant`</ph> object and sets the <bpt id=\"p1\">**</bpt>vt<ept id=\"p1\">**</ept> member to <bpt id=\"p2\">**</bpt>VT_BYREF<ept id=\"p2\">**</ept>.","source":"Initializes the `CComVariant` object and sets the **vt** member to **VT_BYREF**."},{"content":"CComVariant::WriteToStream","pos":[2161,2187]},{"pos":[2218,2263],"content":"Saves the underlying <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> to a stream.","source":"Saves the underlying **VARIANT** to a stream."},{"content":"Public Operators","pos":[2274,2290]},{"content":"CComVariant::operator &lt;","pos":[2312,2335],"source":"CComVariant::operator <"},{"pos":[2364,2446],"content":"Indicates whether the <ph id=\"ph1\">`CComVariant`</ph> object is less than the specified <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","source":"Indicates whether the `CComVariant` object is less than the specified **VARIANT**."},{"content":"CComVariant::operator &gt;","pos":[2452,2475],"source":"CComVariant::operator >"},{"pos":[2504,2589],"content":"Indicates whether the <ph id=\"ph1\">`CComVariant`</ph> object is greater than the specified <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","source":"Indicates whether the `CComVariant` object is greater than the specified **VARIANT**."},{"content":"operator !=","pos":[2595,2606]},{"pos":[2636,2720],"content":"Indicates whether the <ph id=\"ph1\">`CComVariant`</ph> object does not equal the specified <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","source":"Indicates whether the `CComVariant` object does not equal the specified **VARIANT**."},{"content":"operator =","pos":[2726,2736]},{"pos":[2765,2809],"content":"Assigns a value to the <ph id=\"ph1\">`CComVariant`</ph> object.","source":"Assigns a value to the `CComVariant` object."},{"content":"operator ==","pos":[2815,2826]},{"pos":[2858,2934],"content":"Indicates whether the <ph id=\"ph1\">`CComVariant`</ph> object equals the specified <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","source":"Indicates whether the `CComVariant` object equals the specified **VARIANT**."},{"content":"Remarks","pos":[2944,2951]},{"content":"wraps the <ph id=\"ph1\">`VARIANT and VARIANTARG`</ph> type, which consists of a union and a member indicating the type of the data stored in the union.","pos":[2969,3101],"source":" wraps the `VARIANT and VARIANTARG` type, which consists of a union and a member indicating the type of the data stored in the union."},{"content":"<bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>s are typically used in Automation.","pos":[3102,3148],"source":"**VARIANT**s are typically used in Automation."},{"content":"derives from the <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> type so it can be used wherever a <bpt id=\"p2\">**</bpt>VARIANT<ept id=\"p2\">**</ept> can be used.","pos":[3169,3256],"source":" derives from the **VARIANT** type so it can be used wherever a **VARIANT** can be used."},{"content":"You can, for example, use the <bpt id=\"p1\">**</bpt>V_VT<ept id=\"p1\">**</ept> macro to extract the type of a <ph id=\"ph1\">`CComVariant`</ph> or you can access the <bpt id=\"p2\">**</bpt>vt<ept id=\"p2\">**</ept> member directly just as you can with a <bpt id=\"p3\">**</bpt>VARIANT<ept id=\"p3\">**</ept>.","pos":[3257,3421],"source":" You can, for example, use the **V_VT** macro to extract the type of a `CComVariant` or you can access the **vt** member directly just as you can with a **VARIANT**."},{"content":"Inheritance Hierarchy","pos":[3430,3451]},{"content":"Requirements","pos":[3496,3508]},{"pos":[3512,3535],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcomcli.h","source":"**Header:** atlcomcli.h"},{"pos":[3581,3600],"content":"CComVariant::Attach"},{"pos":[3604,3767],"content":"Safely clears the current contents of the <ph id=\"ph1\">`CComVariant`</ph> object, copies the contents of <ph id=\"ph2\">`pSrc`</ph> into this object, then sets the variant type of <ph id=\"ph3\">`pSrc`</ph> to <ph id=\"ph4\">`VT_EMPTY`</ph>.","source":"Safely clears the current contents of the `CComVariant` object, copies the contents of `pSrc` into this object, then sets the variant type of `pSrc` to `VT_EMPTY`."},{"content":"Parameters","pos":[3821,3831]},{"content":"[in] Points to the <bpt id=\"p1\">[</bpt>VARIANT<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> to be attached to the object.","pos":[3845,3973],"source":" [in] Points to the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) to be attached to the object."},{"content":"Return Value","pos":[3983,3995]},{"pos":[3999,4026],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[4036,4043]},{"pos":[4047,4127],"content":"Ownership of the data held by <ph id=\"ph1\">`pSrc`</ph> is transferred to the <ph id=\"ph2\">`CComVariant`</ph> object.","source":"Ownership of the data held by `pSrc` is transferred to the `CComVariant` object."},{"pos":[4178,4202],"content":"CComVariant::CComVariant"},{"pos":[4206,4404],"content":"Each constructor handles the safe initialization of the <ph id=\"ph1\">`CComVariant`</ph> object by calling the <ph id=\"ph2\">`VariantInit`</ph> Win32 function or by setting the object's value and type according to the parameters passed.","source":"Each constructor handles the safe initialization of the `CComVariant` object by calling the `VariantInit` Win32 function or by setting the object's value and type according to the parameters passed."},{"content":"Parameters","pos":[5320,5330]},{"content":"varSrc","pos":[5335,5341]},{"content":"[in] The <ph id=\"ph1\">`CComVariant`</ph> or <ph id=\"ph2\">`VARIANT`</ph> used to initialize the <ph id=\"ph3\">`CComVariant`</ph> object.","pos":[5346,5426],"source":" [in] The `CComVariant` or `VARIANT` used to initialize the `CComVariant` object."},{"content":"The contents of the source variant are copied to the destination without conversion.","pos":[5427,5511]},{"content":"[in] The character string used to initialize the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[5531,5601],"source":" [in] The character string used to initialize the `CComVariant` object."},{"content":"You can pass a zero-terminated wide (Unicode) character string to the <bpt id=\"p1\">**</bpt>LPCOLESTR<ept id=\"p1\">**</ept> version of the constructor or an ANSI string to the <ph id=\"ph1\">`LPCSTR`</ph> version.","pos":[5602,5755],"source":" You can pass a zero-terminated wide (Unicode) character string to the **LPCOLESTR** version of the constructor or an ANSI string to the `LPCSTR` version."},{"content":"In either case the string is converted to a Unicode <ph id=\"ph1\">`BSTR`</ph> allocated using <bpt id=\"p1\">**</bpt>SysAllocString<ept id=\"p1\">**</ept>.","pos":[5756,5850],"source":" In either case the string is converted to a Unicode `BSTR` allocated using **SysAllocString**."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_BSTR`</ph>.","pos":[5851,5906],"source":" The type of the `CComVariant` object will be `VT_BSTR`."},{"content":"[in] The <ph id=\"ph1\">`bool`</ph> used to initialize the <ph id=\"ph2\">`CComVariant`</ph> object.","pos":[5923,5983],"source":" [in] The `bool` used to initialize the `CComVariant` object."},{"content":"The <ph id=\"ph1\">`bool`</ph> argument is converted to a <bpt id=\"p1\">**</bpt>VARIANT_BOOL<ept id=\"p1\">**</ept> before being stored.","pos":[5984,6059],"source":" The `bool` argument is converted to a **VARIANT_BOOL** before being stored."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_BOOL`</ph>.","pos":[6060,6115],"source":" The type of the `CComVariant` object will be `VT_BOOL`."},{"content":"[in] The <ph id=\"ph1\">`int`</ph>, <bpt id=\"p1\">**</bpt>BYTE<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>short<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>long<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>LONGLONG<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>ULONGLONG<ept id=\"p5\">**</ept>, <bpt id=\"p6\">**</bpt>unsigned short<ept id=\"p6\">**</ept>, <ph id=\"ph2\">`unsigned long`</ph>, or <ph id=\"ph3\">`unsigned int`</ph> used to initialize the <ph id=\"ph4\">`CComVariant`</ph> object.","pos":[6132,6307],"source":" [in] The `int`, **BYTE**, **short**, **long**, **LONGLONG**, **ULONGLONG**, **unsigned short**, `unsigned long`, or `unsigned int` used to initialize the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_I4`</ph>, <ph id=\"ph3\">`VT_UI1`</ph>, <ph id=\"ph4\">`VT_I2`</ph>, <ph id=\"ph5\">`VT_I4`</ph>, <bpt id=\"p1\">**</bpt>VT_I8<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>VT_UI8<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>VT_UI2<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>VT_UI4<ept id=\"p4\">**</ept>, or <bpt id=\"p5\">**</bpt>VT_UI4<ept id=\"p5\">**</ept>, respectively.","pos":[6308,6465],"source":" The type of the `CComVariant` object will be `VT_I4`, `VT_UI1`, `VT_I2`, `VT_I4`, **VT_I8**, **VT_UI8**, **VT_UI2**, **VT_UI4**, or **VT_UI4**, respectively."},{"content":"[in] The type of the variant.","pos":[6483,6512]},{"content":"When the first parameter is <ph id=\"ph1\">`int`</ph>, valid types are <ph id=\"ph2\">`VT_I4`</ph> and <bpt id=\"p1\">**</bpt>VT_INT<ept id=\"p1\">**</ept>.","pos":[6513,6587],"source":" When the first parameter is `int`, valid types are `VT_I4` and **VT_INT**."},{"content":"When the first parameter is <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>, valid types are <ph id=\"ph1\">`VT_I4`</ph> and <ph id=\"ph2\">`VT_ERROR`</ph>.","pos":[6588,6665],"source":" When the first parameter is **long**, valid types are `VT_I4` and `VT_ERROR`."},{"content":"When the first parameter is <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept>, valid types are <ph id=\"ph1\">`VT_R8`</ph> and <ph id=\"ph2\">`VT_DATE`</ph>.","pos":[6666,6744],"source":" When the first parameter is **double**, valid types are `VT_R8` and `VT_DATE`."},{"content":"When the first parameter is <ph id=\"ph1\">`unsigned int`</ph>, valid types are <bpt id=\"p1\">**</bpt>VT_UI4<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>VT_UINT<ept id=\"p2\">**</ept>.","pos":[6745,6832],"source":" When the first parameter is `unsigned int`, valid types are **VT_UI4** and **VT_UINT**."},{"content":"[in] The <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> used to initialize the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[6851,6914],"source":" [in] The **float** used to initialize the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_R4`</ph>.","pos":[6915,6968],"source":" The type of the `CComVariant` object will be `VT_R4`."},{"content":"[in] The <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept> used to initialize the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[6987,7051],"source":" [in] The **double** used to initialize the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_R8`</ph>.","pos":[7052,7105],"source":" The type of the `CComVariant` object will be `VT_R8`."},{"content":"[in] The <bpt id=\"p1\">**</bpt>CY<ept id=\"p1\">**</ept> used to initialize the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[7123,7183],"source":" [in] The **CY** used to initialize the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_CY`</ph>.","pos":[7184,7237],"source":" The type of the `CComVariant` object will be `VT_CY`."},{"content":"[in] The <ph id=\"ph1\">`IDispatch`</ph> or <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer used to initialize the <ph id=\"ph2\">`CComVariant`</ph> object.","pos":[7254,7343],"source":" [in] The `IDispatch` or **IUnknown** pointer used to initialize the `CComVariant` object."},{"content":"will be called on the interface pointer.","pos":[7353,7393]},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <bpt id=\"p1\">**</bpt>VT_DISPATCH<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>VT_UNKNOWN<ept id=\"p2\">**</ept>, respectively.","pos":[7394,7487],"source":" The type of the `CComVariant` object will be **VT_DISPATCH** or **VT_UNKNOWN**, respectively."},{"content":"Or, the <bpt id=\"p1\">**</bpt>SAFERRAY<ept id=\"p1\">**</ept> pointer used to initialize the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[7494,7567],"source":"Or, the **SAFERRAY** pointer used to initialize the `CComVariant` object."},{"content":"A copy of the <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> is stored in the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[7568,7634],"source":" A copy of the **SAFEARRAY** is stored in the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be a combination of the original type of the <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>VT_ARRAY<ept id=\"p2\">**</ept>.","pos":[7635,7753],"source":" The type of the `CComVariant` object will be a combination of the original type of the **SAFEARRAY** and **VT_ARRAY**."},{"content":"[in] The <ph id=\"ph1\">`char`</ph> used to initialize the <ph id=\"ph2\">`CComVariant`</ph> object.","pos":[7770,7830],"source":" [in] The `char` used to initialize the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <bpt id=\"p1\">**</bpt>VT_I1<ept id=\"p1\">**</ept>.","pos":[7831,7886],"source":" The type of the `CComVariant` object will be **VT_I1**."},{"content":"[in] The BSTR used to initialize the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[7906,7964],"source":" [in] The BSTR used to initialize the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_BSTR`</ph>.","pos":[7965,8020],"source":" The type of the `CComVariant` object will be `VT_BSTR`."},{"content":"Remarks","pos":[8030,8037]},{"pos":[8041,8125],"content":"The destructor manages cleanup by calling <bpt id=\"p1\">[</bpt>CComVariant::Clear<ept id=\"p1\">](#ccomvariant__clear)</ept>.","source":"The destructor manages cleanup by calling [CComVariant::Clear](#ccomvariant__clear)."},{"pos":[8169,8194],"content":"CComVariant::~CComVariant"},{"content":"The destructor.","pos":[8198,8213]},{"content":"Remarks","pos":[8260,8267]},{"pos":[8271,8352],"content":"This method manages cleanup by calling <bpt id=\"p1\">[</bpt>CComVariant::Clear<ept id=\"p1\">](#ccomvariant__clear)</ept>.","source":"This method manages cleanup by calling [CComVariant::Clear](#ccomvariant__clear)."},{"pos":[8402,8425],"content":"CComVariant::ChangeType"},{"pos":[8429,8477],"content":"Converts the <ph id=\"ph1\">`CComVariant`</ph> object to a new type.","source":"Converts the `CComVariant` object to a new type."},{"content":"Parameters","pos":[8572,8582]},{"content":"[in] The new type for the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[8597,8644],"source":" [in] The new type for the `CComVariant` object."},{"content":"[in] A pointer to the <ph id=\"ph1\">`VARIANT`</ph> whose value will be converted to the new type.","pos":[8661,8739],"source":" [in] A pointer to the `VARIANT` whose value will be converted to the new type."},{"content":"The default value is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, meaning the <ph id=\"ph1\">`CComVariant`</ph> object will be converted in place.","pos":[8740,8831],"source":" The default value is **NULL**, meaning the `CComVariant` object will be converted in place."},{"content":"Return Value","pos":[8841,8853]},{"pos":[8857,8884],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[8894,8901]},{"content":"If you pass a value for <ph id=\"ph1\">`pSrc`</ph>, <ph id=\"ph2\">`ChangeType`</ph> will use this <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> as the source for the conversion.","pos":[8905,9009],"source":"If you pass a value for `pSrc`, `ChangeType` will use this **VARIANT** as the source for the conversion."},{"content":"Otherwise, the <ph id=\"ph1\">`CComVariant`</ph> object will be the source.","pos":[9010,9065],"source":" Otherwise, the `CComVariant` object will be the source."},{"pos":[9110,9128],"content":"CComVariant::Clear"},{"pos":[9132,9209],"content":"Clears the <ph id=\"ph1\">`CComVariant`</ph> object by calling the <ph id=\"ph2\">`VariantClear`</ph> Win32 function.","source":"Clears the `CComVariant` object by calling the `VariantClear` Win32 function."},{"content":"Return Value","pos":[9249,9261]},{"pos":[9265,9292],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[9302,9309]},{"pos":[9313,9358],"content":"The destructor automatically calls <bpt id=\"p1\">**</bpt>Clear<ept id=\"p1\">**</ept>.","source":"The destructor automatically calls **Clear**."},{"pos":[9402,9419],"content":"CComVariant::Copy"},{"pos":[9423,9510],"content":"Frees the <ph id=\"ph1\">`CComVariant`</ph> object and then assigns it a copy of the specified <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","source":"Frees the `CComVariant` object and then assigns it a copy of the specified **VARIANT**."},{"content":"Parameters","pos":[9568,9578]},{"content":"[in] A pointer to the <bpt id=\"p1\">[</bpt>VARIANT<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> to be copied.","pos":[9592,9707],"source":" [in] A pointer to the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) to be copied."},{"content":"Return Value","pos":[9717,9729]},{"pos":[9733,9760],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[9806,9825],"content":"CComVariant::CopyTo"},{"pos":[9829,9877],"content":"Copies the contents of the <ph id=\"ph1\">`CComVariant`</ph> object.","source":"Copies the contents of the `CComVariant` object."},{"content":"Parameters","pos":[9932,9942]},{"content":"pstrDest","pos":[9947,9955]},{"content":"Points to a <ph id=\"ph1\">`BSTR`</ph> that will receive a copy of the contents of the <ph id=\"ph2\">`CComVariant`</ph> object.","pos":[9960,10048],"source":" Points to a `BSTR` that will receive a copy of the contents of the `CComVariant` object."},{"content":"Return Value","pos":[10058,10070]},{"pos":[10074,10101],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[10111,10118]},{"pos":[10122,10175],"content":"The <bpt id=\"p1\">**</bpt>CComVariant<ept id=\"p1\">**</ept> object must be of type <ph id=\"ph1\">`VT_BSTR`</ph>.","source":"The **CComVariant** object must be of type `VT_BSTR`."},{"pos":[10221,10240],"content":"CComVariant::Detach"},{"pos":[10244,10351],"content":"Detaches the underlying <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> from the <ph id=\"ph1\">`CComVariant`</ph> object and sets the object's type to <ph id=\"ph2\">`VT_EMPTY`</ph>.","source":"Detaches the underlying **VARIANT** from the `CComVariant` object and sets the object's type to `VT_EMPTY`."},{"content":"Parameters","pos":[10406,10416]},{"content":"[out] Returns the underlying <ph id=\"ph1\">`VARIANT`</ph> value of the object.","pos":[10431,10490],"source":" [out] Returns the underlying `VARIANT` value of the object."},{"content":"Return Value","pos":[10500,10512]},{"pos":[10516,10543],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[10553,10560]},{"pos":[10564,10735],"content":"Note that the contents of the <ph id=\"ph1\">`VARIANT`</ph> referenced by <ph id=\"ph2\">`pDest`</ph> will automatically be cleared before being assigned the value and type of the calling <bpt id=\"p1\">**</bpt>CComVariant<ept id=\"p1\">**</ept> object.","source":"Note that the contents of the `VARIANT` referenced by `pDest` will automatically be cleared before being assigned the value and type of the calling **CComVariant** object."},{"pos":[10782,10802],"content":"CComVariant::GetSize"},{"pos":[10806,10921],"content":"For simple-fixed size <ph id=\"ph1\">`VARIANT`</ph>s, this method returns the <ph id=\"ph2\">`sizeof`</ph> the underlying data type plus <ph id=\"ph3\">`sizeof(VARTYPE)`</ph>.","source":"For simple-fixed size `VARIANT`s, this method returns the `sizeof` the underlying data type plus `sizeof(VARTYPE)`."},{"content":"Return Value","pos":[10967,10979]},{"pos":[10983,11053],"content":"The size in bytes of the current contents of the <ph id=\"ph1\">`CComVariant`</ph> object.","source":"The size in bytes of the current contents of the `CComVariant` object."},{"content":"Remarks","pos":[11063,11070]},{"content":"If the <ph id=\"ph1\">`VARIANT`</ph> contains an interface pointer, <ph id=\"ph2\">`GetSize`</ph> queries for <ph id=\"ph3\">`IPersistStream`</ph> or <ph id=\"ph4\">`IPersistStreamInit`</ph>.","pos":[11074,11185],"source":"If the `VARIANT` contains an interface pointer, `GetSize` queries for `IPersistStream` or `IPersistStreamInit`."},{"content":"If successful, the return value is the low-order 32 bits of the value returned by <ph id=\"ph1\">`GetSizeMax`</ph> plus the <ph id=\"ph2\">`sizeof`</ph> a <ph id=\"ph3\">`CLSID`</ph> and <ph id=\"ph4\">`sizeof(VARTYPE)`</ph>.","pos":[11186,11331],"source":" If successful, the return value is the low-order 32 bits of the value returned by `GetSizeMax` plus the `sizeof` a `CLSID` and `sizeof(VARTYPE)`."},{"content":"If the interface pointer is <ph id=\"ph1\">`NULL`</ph>, <ph id=\"ph2\">`GetSize`</ph> returns the <ph id=\"ph3\">`sizeof`</ph> a <ph id=\"ph4\">`CLSID`</ph> plus <ph id=\"ph5\">`sizeof(VARTYPE)`</ph>.","pos":[11332,11432],"source":" If the interface pointer is `NULL`, `GetSize` returns the `sizeof` a `CLSID` plus `sizeof(VARTYPE)`."},{"content":"If the total size is larger than <ph id=\"ph1\">`ULONG_MAX`</ph>, <ph id=\"ph2\">`GetSize`</ph> returns <ph id=\"ph3\">`sizeof(VARTYPE)`</ph> which indicates an error.","pos":[11433,11540],"source":" If the total size is larger than `ULONG_MAX`, `GetSize` returns `sizeof(VARTYPE)` which indicates an error."},{"content":"In all other cases, a temporary <ph id=\"ph1\">`VARIANT`</ph> of type <ph id=\"ph2\">`VT_BSTR`</ph> is coerced from the current <ph id=\"ph3\">`VARIANT`</ph>.","pos":[11547,11645],"source":"In all other cases, a temporary `VARIANT` of type `VT_BSTR` is coerced from the current `VARIANT`."},{"content":"The length of this <ph id=\"ph1\">`BSTR`</ph> is calculated as the size of the length of the string plus the length of the string itself plus the size of the null character plus <ph id=\"ph2\">`sizeof(VARTYPE)`</ph>.","pos":[11646,11822],"source":" The length of this `BSTR` is calculated as the size of the length of the string plus the length of the string itself plus the size of the null character plus `sizeof(VARTYPE)`."},{"content":"If the <ph id=\"ph1\">`VARIANT`</ph> cannot be coerced to a <ph id=\"ph2\">`VARIANT`</ph> of type <ph id=\"ph3\">`VT_BSTR`</ph>, <ph id=\"ph4\">`GetSize`</ph> returns <ph id=\"ph5\">`sizeof(VARTYPE)`</ph>.","pos":[11823,11928],"source":" If the `VARIANT` cannot be coerced to a `VARIANT` of type `VT_BSTR`, `GetSize` returns `sizeof(VARTYPE)`."},{"pos":[11935,12090],"content":"The size returned by this method matches the number of bytes used by <bpt id=\"p1\">[</bpt>CComVariant::WriteToStream<ept id=\"p1\">](#ccomvariant__writetostream)</ept> under successful conditions.","source":"The size returned by this method matches the number of bytes used by [CComVariant::WriteToStream](#ccomvariant__writetostream) under successful conditions."},{"pos":[12141,12164],"content":"CComVariant::operator ="},{"pos":[12168,12235],"content":"Assigns a value and corresponding type to the <ph id=\"ph1\">`CComVariant`</ph> object.","source":"Assigns a value and corresponding type to the `CComVariant` object."},{"content":"Parameters","pos":[13335,13345]},{"content":"varSrc","pos":[13350,13356]},{"content":"[in] The <ph id=\"ph1\">`CComVariant`</ph> or <bpt id=\"p1\">[</bpt>VARIANT<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> to be assigned to the <ph id=\"ph2\">`CComVariant`</ph> object.","pos":[13361,13510],"source":" [in] The `CComVariant` or [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) to be assigned to the `CComVariant` object."},{"content":"The contents of the source variant are copied to the destination without conversion.","pos":[13511,13595]},{"content":"[in] The BSTR to be assigned to the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[13615,13672],"source":" [in] The BSTR to be assigned to the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_BSTR`</ph>.","pos":[13673,13728],"source":" The type of the `CComVariant` object will be `VT_BSTR`."},{"content":"[in] The character string to be assigned to the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[13748,13817],"source":" [in] The character string to be assigned to the `CComVariant` object."},{"content":"You can pass a zero-terminated wide (Unicode) character string to the <bpt id=\"p1\">**</bpt>LPCOLESTR<ept id=\"p1\">**</ept> version of the operator or an ANSI string to the <ph id=\"ph1\">`LPCSTR`</ph> version.","pos":[13818,13968],"source":" You can pass a zero-terminated wide (Unicode) character string to the **LPCOLESTR** version of the operator or an ANSI string to the `LPCSTR` version."},{"content":"In either case, the string is converted to a Unicode <ph id=\"ph1\">`BSTR`</ph> allocated using <bpt id=\"p1\">**</bpt>SysAllocString<ept id=\"p1\">**</ept>.","pos":[13969,14064],"source":" In either case, the string is converted to a Unicode `BSTR` allocated using **SysAllocString**."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_BSTR`</ph>.","pos":[14065,14120],"source":" The type of the `CComVariant` object will be `VT_BSTR`."},{"content":"[in] The <ph id=\"ph1\">`bool`</ph> to be assigned to the <ph id=\"ph2\">`CComVariant`</ph> object.","pos":[14137,14196],"source":" [in] The `bool` to be assigned to the `CComVariant` object."},{"content":"The <ph id=\"ph1\">`bool`</ph> argument is converted to a <bpt id=\"p1\">**</bpt>VARIANT_BOOL<ept id=\"p1\">**</ept> before being stored.","pos":[14197,14272],"source":" The `bool` argument is converted to a **VARIANT_BOOL** before being stored."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_BOOL`</ph>.","pos":[14273,14328],"source":" The type of the `CComVariant` object will be `VT_BOOL`."},{"content":"[in] The <ph id=\"ph1\">`int`</ph>, <bpt id=\"p1\">**</bpt>BYTE<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>short<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>long<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>LONGLONG<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>ULONGLONG<ept id=\"p5\">**</ept>, <bpt id=\"p6\">**</bpt>unsigned short<ept id=\"p6\">**</ept>, <ph id=\"ph2\">`unsigned long`</ph>, or <ph id=\"ph3\">`unsigned int`</ph> to be assigned to the <ph id=\"ph4\">`CComVariant`</ph> object.","pos":[14345,14519],"source":" [in] The `int`, **BYTE**, **short**, **long**, **LONGLONG**, **ULONGLONG**, **unsigned short**, `unsigned long`, or `unsigned int` to be assigned to the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_I4`</ph>, <ph id=\"ph3\">`VT_UI1`</ph>, <ph id=\"ph4\">`VT_I2`</ph>, <ph id=\"ph5\">`VT_I4`</ph>, <bpt id=\"p1\">**</bpt>VT_I8<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>VT_UI8<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>VT_UI2<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>VT_UI4<ept id=\"p4\">**</ept>, or <bpt id=\"p5\">**</bpt>VT_UI4<ept id=\"p5\">**</ept>, respectively.","pos":[14520,14677],"source":" The type of the `CComVariant` object will be `VT_I4`, `VT_UI1`, `VT_I2`, `VT_I4`, **VT_I8**, **VT_UI8**, **VT_UI2**, **VT_UI4**, or **VT_UI4**, respectively."},{"content":"[in] The <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> to be assigned to the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[14696,14758],"source":" [in] The **float** to be assigned to the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_R4`</ph>.","pos":[14759,14812],"source":" The type of the `CComVariant` object will be `VT_R4`."},{"content":"[in] The <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept> to be assigned to the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[14831,14894],"source":" [in] The **double** to be assigned to the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_R8`</ph>.","pos":[14895,14948],"source":" The type of the `CComVariant` object will be `VT_R8`."},{"content":"[in] The <bpt id=\"p1\">**</bpt>CY<ept id=\"p1\">**</ept> to be assigned to the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[14966,15025],"source":" [in] The **CY** to be assigned to the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <ph id=\"ph2\">`VT_CY`</ph>.","pos":[15026,15079],"source":" The type of the `CComVariant` object will be `VT_CY`."},{"content":"[in] The <ph id=\"ph1\">`IDispatch`</ph> or <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer to be assigned to the <ph id=\"ph2\">`CComVariant`</ph> object.","pos":[15096,15184],"source":" [in] The `IDispatch` or **IUnknown** pointer to be assigned to the `CComVariant` object."},{"content":"will be called on the interface pointer.","pos":[15194,15234]},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <bpt id=\"p1\">**</bpt>VT_DISPATCH<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>VT_UNKNOWN<ept id=\"p2\">**</ept>, respectively.","pos":[15235,15328],"source":" The type of the `CComVariant` object will be **VT_DISPATCH** or **VT_UNKNOWN**, respectively."},{"content":"Or, a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> pointer to be assigned to the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[15335,15406],"source":"Or, a **SAFEARRAY** pointer to be assigned to the `CComVariant` object."},{"content":"A copy of the <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> is stored in the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[15407,15473],"source":" A copy of the **SAFEARRAY** is stored in the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be a combination of the original type of the <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>VT_ARRAY<ept id=\"p2\">**</ept>.","pos":[15474,15592],"source":" The type of the `CComVariant` object will be a combination of the original type of the **SAFEARRAY** and **VT_ARRAY**."},{"content":"[in] The char to be assigned to the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[15609,15666],"source":" [in] The char to be assigned to the `CComVariant` object."},{"content":"The type of the <ph id=\"ph1\">`CComVariant`</ph> object will be <bpt id=\"p1\">**</bpt>VT_I1<ept id=\"p1\">**</ept>.","pos":[15667,15722],"source":" The type of the `CComVariant` object will be **VT_I1**."},{"pos":[15776,15800],"content":"CComVariant::operator =="},{"pos":[15804,15880],"content":"Indicates whether the <ph id=\"ph1\">`CComVariant`</ph> object equals the specified <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","source":"Indicates whether the `CComVariant` object equals the specified **VARIANT**."},{"content":"Remarks","pos":[15957,15964]},{"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the value and type of <bpt id=\"p2\">*</bpt>varSrc<ept id=\"p2\">*</ept> are equal to the value and type, respectively, of the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[15968,16094],"source":"Returns **true** if the value and type of *varSrc* are equal to the value and type, respectively, of the `CComVariant` object."},{"content":"Otherwise, <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","pos":[16095,16116],"source":" Otherwise, **false**."},{"content":"The operator uses the user's default locale to perform the comparison.","pos":[16117,16187]},{"content":"The operator compares only the value of the variant types.","pos":[16194,16252]},{"content":"It compares strings, integers, and floating points, but not arrays or records.","pos":[16253,16331]},{"pos":[16383,16407],"content":"CComVariant::operator !="},{"pos":[16411,16495],"content":"Indicates whether the <ph id=\"ph1\">`CComVariant`</ph> object does not equal the specified <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","source":"Indicates whether the `CComVariant` object does not equal the specified **VARIANT**."},{"content":"Remarks","pos":[16572,16579]},{"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if either the value or type of <bpt id=\"p2\">*</bpt>varSrc<ept id=\"p2\">*</ept> is not equal to the value or type, respectively, of the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[16583,16717],"source":"Returns **true** if either the value or type of *varSrc* is not equal to the value or type, respectively, of the `CComVariant` object."},{"content":"Otherwise, <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","pos":[16718,16739],"source":" Otherwise, **false**."},{"content":"The operator uses the user's default locale to perform the comparison.","pos":[16740,16810]},{"content":"The operator compares only the value of the variant types.","pos":[16817,16875]},{"content":"It compares strings, integers, and floating points, but not arrays or records.","pos":[16876,16954]},{"pos":[17005,17026],"content":"CComVariant::operator"},{"pos":[17035,17117],"content":"Indicates whether the <ph id=\"ph1\">`CComVariant`</ph> object is less than the specified <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","source":"Indicates whether the `CComVariant` object is less than the specified **VARIANT**."},{"content":"Remarks","pos":[17193,17200]},{"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the value of the <ph id=\"ph1\">`CComVariant`</ph> object is less than the value of <bpt id=\"p2\">*</bpt>varSrc<ept id=\"p2\">*</ept>.","pos":[17204,17297],"source":"Returns **true** if the value of the `CComVariant` object is less than the value of *varSrc*."},{"content":"Otherwise, <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","pos":[17298,17319],"source":" Otherwise, **false**."},{"content":"The operator uses the user's default locale to perform the comparison.","pos":[17320,17390]},{"pos":[17441,17462],"content":"CComVariant::operator"},{"pos":[17471,17556],"content":"Indicates whether the <ph id=\"ph1\">`CComVariant`</ph> object is greater than the specified <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","source":"Indicates whether the `CComVariant` object is greater than the specified **VARIANT**."},{"content":"Remarks","pos":[17632,17639]},{"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the value of the <ph id=\"ph1\">`CComVariant`</ph> object is greater than the value of <bpt id=\"p2\">*</bpt>varSrc<ept id=\"p2\">*</ept>.","pos":[17643,17739],"source":"Returns **true** if the value of the `CComVariant` object is greater than the value of *varSrc*."},{"content":"Otherwise, <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","pos":[17740,17761],"source":" Otherwise, **false**."},{"content":"The operator uses the user's default locale to perform the comparison.","pos":[17762,17832]},{"pos":[17886,17913],"content":"CComVariant::ReadFromStream"},{"pos":[17917,18002],"content":"Sets the underlying <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> to the <bpt id=\"p2\">**</bpt>VARIANT<ept id=\"p2\">**</ept> contained in the specified stream.","source":"Sets the underlying **VARIANT** to the **VARIANT** contained in the specified stream."},{"content":"Parameters","pos":[18067,18077]},{"content":"[in] A pointer to the <bpt id=\"p1\">[</bpt>IStream<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa380034)</ept> interface on the stream containing the data.","pos":[18094,18230],"source":" [in] A pointer to the [IStream](http://msdn.microsoft.com/library/windows/desktop/aa380034) interface on the stream containing the data."},{"content":"Return Value","pos":[18240,18252]},{"pos":[18256,18283],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[18293,18300]},{"pos":[18304,18394],"content":"<bpt id=\"p1\">**</bpt>ReadToStream<ept id=\"p1\">**</ept> requires a previous call to <bpt id=\"p2\">[</bpt>WriteToStream<ept id=\"p2\">](#ccomvariant__writetostream)</ept>.","source":"**ReadToStream** requires a previous call to [WriteToStream](#ccomvariant__writetostream)."},{"pos":[18442,18463],"content":"CComVariant::SetByRef"},{"pos":[18467,18547],"content":"Initializes the <ph id=\"ph1\">`CComVariant`</ph> object and sets the <bpt id=\"p1\">**</bpt>vt<ept id=\"p1\">**</ept> member to <bpt id=\"p2\">**</bpt>VT_BYREF<ept id=\"p2\">**</ept>.","source":"Initializes the `CComVariant` object and sets the **vt** member to **VT_BYREF**."},{"content":"Parameters","pos":[18624,18634]},{"content":"The type of <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>, for example, <ph id=\"ph1\">`BSTR`</ph>, <ph id=\"ph2\">`int`</ph>, or <ph id=\"ph3\">`char`</ph>.","pos":[18645,18708],"source":" The type of **VARIANT**, for example, `BSTR`, `int`, or `char`."},{"content":"pT","pos":[18716,18718]},{"content":"The pointer used to initialize the <ph id=\"ph1\">`CComVariant`</ph> object.","pos":[18723,18779],"source":" The pointer used to initialize the `CComVariant` object."},{"content":"Remarks","pos":[18789,18796]},{"content":"is a function template that initializes the <ph id=\"ph1\">`CComVariant`</ph> object to the pointer <bpt id=\"p1\">*</bpt>pT<ept id=\"p1\">*</ept> and sets the <bpt id=\"p2\">**</bpt>vt<ept id=\"p2\">**</ept> member to <bpt id=\"p3\">**</bpt>VT_BYREF<ept id=\"p3\">**</ept>.","pos":[18811,18939],"source":" is a function template that initializes the `CComVariant` object to the pointer *pT* and sets the **vt** member to **VT_BYREF**."},{"content":"For example:","pos":[18940,18952]},{"pos":[18970,18990],"content":"NVC_ATL_Utilities#76"},{"pos":[19096,19122],"content":"CComVariant::WriteToStream"},{"pos":[19126,19171],"content":"Saves the underlying <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> to a stream.","source":"Saves the underlying **VARIANT** to a stream."},{"content":"Parameters","pos":[19235,19245]},{"content":"[in] A pointer to the <bpt id=\"p1\">[</bpt>IStream<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa380034)</ept> interface on a stream.","pos":[19262,19376],"source":" [in] A pointer to the [IStream](http://msdn.microsoft.com/library/windows/desktop/aa380034) interface on a stream."},{"content":"Return Value","pos":[19386,19398]},{"pos":[19402,19429],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"See Also","pos":[19438,19446]},{"content":"Class Overview","pos":[19451,19465]}],"content":"---\ntitle: \"CComVariant Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CComVariant\"\n  - \"ATL::CComVariant\"\n  - \"CComVariant\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"VARIANT macro\"\n  - \"CComVariant class\"\n  - \"VARIANT macro, ATL\"\nms.assetid: 4d31149c-d005-44b5-a509-10f84afa2b61\ncaps.latest.revision: 26\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComVariant Class\nThis class wraps the `VARIANT` type, providing a member indicating the type of data stored.  \n  \n## Syntax  \n  \n```cpp\nclass CComVariant : public tagVARIANT  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComVariant::CComVariant](#ccomvariant__ccomvariant)|The constructor.|  \n|[CComVariant::~CComVariant](#ccomvariant__dtor)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComVariant::Attach](#ccomvariant__attach)|Attaches a **VARIANT** to the `CComVariant` object.|  \n|[CComVariant::ChangeType](#ccomvariant__changetype)|Converts the `CComVariant` object to a new type.|  \n|[CComVariant::Clear](#ccomvariant__clear)|Clears the `CComVariant` object.|  \n|[CComVariant::Copy](#ccomvariant__copy)|Copies a **VARIANT** to the `CComVariant` object.|  \n|[CComVariant::CopyTo](#ccomvariant__copyto)|Copies the contents of the `CComVariant` object.|  \n|[CComVariant::Detach](#ccomvariant__detach)|Detaches the underlying **VARIANT** from the `CComVariant` object.|  \n|[CComVariant::GetSize](#ccomvariant__getsize)|Returns the size in number of bytes of the contents of the `CComVariant` object.|  \n|[CComVariant::ReadFromStream](#ccomvariant__readfromstream)|Loads a **VARIANT** from a stream.|  \n|[CComVariant::SetByRef](#ccomvariant__setbyref)|Initializes the `CComVariant` object and sets the **vt** member to **VT_BYREF**.|  \n|[CComVariant::WriteToStream](#ccomvariant__writetostream)|Saves the underlying **VARIANT** to a stream.|  \n  \n### Public Operators  \n  \n|||  \n|-|-|  \n|[CComVariant::operator <](#ccomvariant__operator_lt)|Indicates whether the `CComVariant` object is less than the specified **VARIANT**.|  \n|[CComVariant::operator >](#ccomvariant__operator_gt)|Indicates whether the `CComVariant` object is greater than the specified **VARIANT**.|  \n|[operator !=](#ccomvariant__operator_neq)|Indicates whether the `CComVariant` object does not equal the specified **VARIANT**.|  \n|[operator =](#ccomvariant__operator_eq)|Assigns a value to the `CComVariant` object.|  \n|[operator ==](#ccomvariant__operator_eq_eq)|Indicates whether the `CComVariant` object equals the specified **VARIANT**.|  \n  \n## Remarks  \n `CComVariant` wraps the `VARIANT and VARIANTARG` type, which consists of a union and a member indicating the type of the data stored in the union. **VARIANT**s are typically used in Automation.  \n  \n `CComVariant` derives from the **VARIANT** type so it can be used wherever a **VARIANT** can be used. You can, for example, use the **V_VT** macro to extract the type of a `CComVariant` or you can access the **vt** member directly just as you can with a **VARIANT**.  \n  \n## Inheritance Hierarchy  \n `tagVARIANT`  \n  \n `CComVariant`  \n  \n## Requirements  \n **Header:** atlcomcli.h  \n  \n##  <a name=\"ccomvariant__attach\"></a>  CComVariant::Attach  \n Safely clears the current contents of the `CComVariant` object, copies the contents of `pSrc` into this object, then sets the variant type of `pSrc` to `VT_EMPTY`.  \n  \n```\nHRESULT Attach(VARIANT* pSrc);\n```  \n  \n### Parameters  \n `pSrc`  \n [in] Points to the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) to be attached to the object.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n Ownership of the data held by `pSrc` is transferred to the `CComVariant` object.  \n  \n##  <a name=\"ccomvariant__ccomvariant\"></a>  CComVariant::CComVariant  \n Each constructor handles the safe initialization of the `CComVariant` object by calling the `VariantInit` Win32 function or by setting the object's value and type according to the parameters passed.  \n  \n```\nCComVariant() throw();\nCComVariant(const CComVariant& varSrc);\nCComVariant(const VARIANT& varSrc);\nCComVariant(LPCOLESTR lpszSrc);\nCComVariant(LPCSTR lpszSrc);\nCComVariant(bool bSrc);\nCComVariant(BYTE nSrc) throw();\nCComVariant(int nSrc, VARTYPE vtSrc = VT_I4) throw();\nCComVariant(unsigned int  nSrc, VARTYPE vtSrc = VT_UI4) throw();\nCComVariant(shor  nSrc) throw();\nCComVariant(unsigned short nSrc) throw();\nCComVariant(long  nSrc, VARTYPE vtSrc = VT_I4) throw();\nCComVariant(unsigned long  nSrc) throw();\nCComVariant(LONGLONG  nSrc) throw();\nCComVariant(ULONGLONG  nSrc) throw();\nCComVariant(float  fltSrc) throw();\nCComVariant(double  dblSrc, VARTYPE vtSrc = VT_R8) throw();\nCComVariant(CY  cySrc) throw();\nCComVariant(IDispatch* pSrc) throw();\nCComVariant(IUnknown* pSrc) throw();\nCComVariant(const SAFEARRAY* pSrc);\nCComVariant(char  cSrc) throw();\nCComVariant(const CComBSTR& bstrSrc);\n```  \n  \n### Parameters  \n *varSrc*  \n [in] The `CComVariant` or `VARIANT` used to initialize the `CComVariant` object. The contents of the source variant are copied to the destination without conversion.  \n  \n `lpszSrc`  \n [in] The character string used to initialize the `CComVariant` object. You can pass a zero-terminated wide (Unicode) character string to the **LPCOLESTR** version of the constructor or an ANSI string to the `LPCSTR` version. In either case the string is converted to a Unicode `BSTR` allocated using **SysAllocString**. The type of the `CComVariant` object will be `VT_BSTR`.  \n  \n `bSrc`  \n [in] The `bool` used to initialize the `CComVariant` object. The `bool` argument is converted to a **VARIANT_BOOL** before being stored. The type of the `CComVariant` object will be `VT_BOOL`.  \n  \n `nSrc`  \n [in] The `int`, **BYTE**, **short**, **long**, **LONGLONG**, **ULONGLONG**, **unsigned short**, `unsigned long`, or `unsigned int` used to initialize the `CComVariant` object. The type of the `CComVariant` object will be `VT_I4`, `VT_UI1`, `VT_I2`, `VT_I4`, **VT_I8**, **VT_UI8**, **VT_UI2**, **VT_UI4**, or **VT_UI4**, respectively.  \n  \n `vtSrc`  \n [in] The type of the variant. When the first parameter is `int`, valid types are `VT_I4` and **VT_INT**. When the first parameter is **long**, valid types are `VT_I4` and `VT_ERROR`. When the first parameter is **double**, valid types are `VT_R8` and `VT_DATE`. When the first parameter is `unsigned int`, valid types are **VT_UI4** and **VT_UINT**.  \n  \n `fltSrc`  \n [in] The **float** used to initialize the `CComVariant` object. The type of the `CComVariant` object will be `VT_R4`.  \n  \n `dblSrc`  \n [in] The **double** used to initialize the `CComVariant` object. The type of the `CComVariant` object will be `VT_R8`.  \n  \n `cySrc`  \n [in] The **CY** used to initialize the `CComVariant` object. The type of the `CComVariant` object will be `VT_CY`.  \n  \n `pSrc`  \n [in] The `IDispatch` or **IUnknown** pointer used to initialize the `CComVariant` object. `AddRef` will be called on the interface pointer. The type of the `CComVariant` object will be **VT_DISPATCH** or **VT_UNKNOWN**, respectively.  \n  \n Or, the **SAFERRAY** pointer used to initialize the `CComVariant` object. A copy of the **SAFEARRAY** is stored in the `CComVariant` object. The type of the `CComVariant` object will be a combination of the original type of the **SAFEARRAY** and **VT_ARRAY**.  \n  \n `cSrc`  \n [in] The `char` used to initialize the `CComVariant` object. The type of the `CComVariant` object will be **VT_I1**.  \n  \n `bstrSrc`  \n [in] The BSTR used to initialize the `CComVariant` object. The type of the `CComVariant` object will be `VT_BSTR`.  \n  \n### Remarks  \n The destructor manages cleanup by calling [CComVariant::Clear](#ccomvariant__clear).  \n  \n##  <a name=\"ccomvariant__dtor\"></a>  CComVariant::~CComVariant  \n The destructor.  \n  \n```\n~CComVariant() throw();\n```  \n  \n### Remarks  \n This method manages cleanup by calling [CComVariant::Clear](#ccomvariant__clear).  \n  \n##  <a name=\"ccomvariant__changetype\"></a>  CComVariant::ChangeType  \n Converts the `CComVariant` object to a new type.  \n  \n```\nHRESULT ChangeType(\n    VARTYPE vtNew,\n    const VARIANT* pSrc = NULL);\n```  \n  \n### Parameters  \n `vtNew`  \n [in] The new type for the `CComVariant` object.  \n  \n `pSrc`  \n [in] A pointer to the `VARIANT` whose value will be converted to the new type. The default value is **NULL**, meaning the `CComVariant` object will be converted in place.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n If you pass a value for `pSrc`, `ChangeType` will use this **VARIANT** as the source for the conversion. Otherwise, the `CComVariant` object will be the source.  \n  \n##  <a name=\"ccomvariant__clear\"></a>  CComVariant::Clear  \n Clears the `CComVariant` object by calling the `VariantClear` Win32 function.  \n  \n```\nHRESULT Clear();\n```  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The destructor automatically calls **Clear**.  \n  \n##  <a name=\"ccomvariant__copy\"></a>  CComVariant::Copy  \n Frees the `CComVariant` object and then assigns it a copy of the specified **VARIANT**.  \n  \n```\nHRESULT Copy(const VARIANT* pSrc);\n```  \n  \n### Parameters  \n `pSrc`  \n [in] A pointer to the [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) to be copied.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"ccomvariant__copyto\"></a>  CComVariant::CopyTo  \n Copies the contents of the `CComVariant` object.  \n  \n```\nHRESULT CopyTo(BSTR* pstrDest);\n```  \n  \n### Parameters  \n *pstrDest*  \n Points to a `BSTR` that will receive a copy of the contents of the `CComVariant` object.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The **CComVariant** object must be of type `VT_BSTR`.  \n  \n##  <a name=\"ccomvariant__detach\"></a>  CComVariant::Detach  \n Detaches the underlying **VARIANT** from the `CComVariant` object and sets the object's type to `VT_EMPTY`.  \n  \n```\nHRESULT Detach(VARIANT* pDest);\n```  \n  \n### Parameters  \n `pDest`  \n [out] Returns the underlying `VARIANT` value of the object.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n Note that the contents of the `VARIANT` referenced by `pDest` will automatically be cleared before being assigned the value and type of the calling **CComVariant** object.  \n  \n##  <a name=\"ccomvariant__getsize\"></a>  CComVariant::GetSize  \n For simple-fixed size `VARIANT`s, this method returns the `sizeof` the underlying data type plus `sizeof(VARTYPE)`.  \n  \n```\nULONG GetSize() const;\n```  \n  \n### Return Value  \n The size in bytes of the current contents of the `CComVariant` object.  \n  \n### Remarks  \n If the `VARIANT` contains an interface pointer, `GetSize` queries for `IPersistStream` or `IPersistStreamInit`. If successful, the return value is the low-order 32 bits of the value returned by `GetSizeMax` plus the `sizeof` a `CLSID` and `sizeof(VARTYPE)`. If the interface pointer is `NULL`, `GetSize` returns the `sizeof` a `CLSID` plus `sizeof(VARTYPE)`. If the total size is larger than `ULONG_MAX`, `GetSize` returns `sizeof(VARTYPE)` which indicates an error.  \n  \n In all other cases, a temporary `VARIANT` of type `VT_BSTR` is coerced from the current `VARIANT`. The length of this `BSTR` is calculated as the size of the length of the string plus the length of the string itself plus the size of the null character plus `sizeof(VARTYPE)`. If the `VARIANT` cannot be coerced to a `VARIANT` of type `VT_BSTR`, `GetSize` returns `sizeof(VARTYPE)`.  \n  \n The size returned by this method matches the number of bytes used by [CComVariant::WriteToStream](#ccomvariant__writetostream) under successful conditions.  \n  \n##  <a name=\"ccomvariant__operator_eq\"></a>  CComVariant::operator =  \n Assigns a value and corresponding type to the `CComVariant` object.  \n  \n```\nCComVariant& operator=(const CComVariant& varSrc);\n\n    CComVariant& operator=(const VARIANT& varSrc);\n\n    CComVariant& operator=(const CComBSTR& bstrSrc);\n\n    CComVariant& operator=(LPCOLESTR   lpszSrc);\n\n    CComVariant& operator=(LPCSTR   lpszSrc);\n\n    CComVariant& operator=(bool   bSrc);\n\n    CComVariant& operator=(BYTE   nSrc) throw();\nCComVariant& operator=(int   nSrc) throw();\nCComVariant& operator=(unsigned  int  nSrc) throw();\nCComVariant& operator=(short   nSrc) throw();\nCComVariant& operator=(unsigned  short  nSrc) throw();\nCComVariant& operator=(long   nSrc) throw();\nCComVariant& operator=(unsigned  long  nSrc) throw();\nCComVariant& operator=(LONGLONG   nSrc) throw();\nCComVariant& operator=(ULONGLONG   nSrc) throw();\nCComVariant& operator=(float   fltSrc) throw();\nCComVariant& operator=(double   dblSrc) throw();\nCComVariant& operator=(CY   cySrc) throw();\nCComVariant& operator=(IDispatch* pSrc) throw();\nCComVariant& operator=(IUnknown* pSrc) throw();\nCComVariant& operator=(const SAFEARRAY* pSrc);\n\n    CComVariant& operator=(char   cSrc) throw();\n```  \n  \n### Parameters  \n *varSrc*  \n [in] The `CComVariant` or [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) to be assigned to the `CComVariant` object. The contents of the source variant are copied to the destination without conversion.  \n  \n `bstrSrc`  \n [in] The BSTR to be assigned to the `CComVariant` object. The type of the `CComVariant` object will be `VT_BSTR`.  \n  \n `lpszSrc`  \n [in] The character string to be assigned to the `CComVariant` object. You can pass a zero-terminated wide (Unicode) character string to the **LPCOLESTR** version of the operator or an ANSI string to the `LPCSTR` version. In either case, the string is converted to a Unicode `BSTR` allocated using **SysAllocString**. The type of the `CComVariant` object will be `VT_BSTR`.  \n  \n `bSrc`  \n [in] The `bool` to be assigned to the `CComVariant` object. The `bool` argument is converted to a **VARIANT_BOOL** before being stored. The type of the `CComVariant` object will be `VT_BOOL`.  \n  \n `nSrc`  \n [in] The `int`, **BYTE**, **short**, **long**, **LONGLONG**, **ULONGLONG**, **unsigned short**, `unsigned long`, or `unsigned int` to be assigned to the `CComVariant` object. The type of the `CComVariant` object will be `VT_I4`, `VT_UI1`, `VT_I2`, `VT_I4`, **VT_I8**, **VT_UI8**, **VT_UI2**, **VT_UI4**, or **VT_UI4**, respectively.  \n  \n `fltSrc`  \n [in] The **float** to be assigned to the `CComVariant` object. The type of the `CComVariant` object will be `VT_R4`.  \n  \n `dblSrc`  \n [in] The **double** to be assigned to the `CComVariant` object. The type of the `CComVariant` object will be `VT_R8`.  \n  \n `cySrc`  \n [in] The **CY** to be assigned to the `CComVariant` object. The type of the `CComVariant` object will be `VT_CY`.  \n  \n `pSrc`  \n [in] The `IDispatch` or **IUnknown** pointer to be assigned to the `CComVariant` object. `AddRef` will be called on the interface pointer. The type of the `CComVariant` object will be **VT_DISPATCH** or **VT_UNKNOWN**, respectively.  \n  \n Or, a **SAFEARRAY** pointer to be assigned to the `CComVariant` object. A copy of the **SAFEARRAY** is stored in the `CComVariant` object. The type of the `CComVariant` object will be a combination of the original type of the **SAFEARRAY** and **VT_ARRAY**.  \n  \n `cSrc`  \n [in] The char to be assigned to the `CComVariant` object. The type of the `CComVariant` object will be **VT_I1**.  \n  \n##  <a name=\"ccomvariant__operator_eq_eq\"></a>  CComVariant::operator ==  \n Indicates whether the `CComVariant` object equals the specified **VARIANT**.  \n  \n```\nbool operator==(const VARIANT& varSrc) const throw();\n```  \n  \n### Remarks  \n Returns **true** if the value and type of *varSrc* are equal to the value and type, respectively, of the `CComVariant` object. Otherwise, **false**. The operator uses the user's default locale to perform the comparison.  \n  \n The operator compares only the value of the variant types. It compares strings, integers, and floating points, but not arrays or records.  \n  \n##  <a name=\"ccomvariant__operator_neq\"></a>  CComVariant::operator !=  \n Indicates whether the `CComVariant` object does not equal the specified **VARIANT**.  \n  \n```\nbool operator!=(const VARIANT& varSrc) const throw();\n```  \n  \n### Remarks  \n Returns **true** if either the value or type of *varSrc* is not equal to the value or type, respectively, of the `CComVariant` object. Otherwise, **false**. The operator uses the user's default locale to perform the comparison.  \n  \n The operator compares only the value of the variant types. It compares strings, integers, and floating points, but not arrays or records.  \n  \n##  <a name=\"ccomvariant__operator_lt\"></a>  CComVariant::operator &lt;  \n Indicates whether the `CComVariant` object is less than the specified **VARIANT**.  \n  \n```\nbool operator<(const VARIANT& varSrc) const throw();\n```  \n  \n### Remarks  \n Returns **true** if the value of the `CComVariant` object is less than the value of *varSrc*. Otherwise, **false**. The operator uses the user's default locale to perform the comparison.  \n  \n##  <a name=\"ccomvariant__operator_gt\"></a>  CComVariant::operator &gt;  \n Indicates whether the `CComVariant` object is greater than the specified **VARIANT**.  \n  \n```\nbool operator>(const VARIANT& varSrc) const throw();\n```  \n  \n### Remarks  \n Returns **true** if the value of the `CComVariant` object is greater than the value of *varSrc*. Otherwise, **false**. The operator uses the user's default locale to perform the comparison.  \n  \n##  <a name=\"ccomvariant__readfromstream\"></a>  CComVariant::ReadFromStream  \n Sets the underlying **VARIANT** to the **VARIANT** contained in the specified stream.  \n  \n```\nHRESULT ReadFromStream(IStream* pStream);\n```  \n  \n### Parameters  \n `pStream`  \n [in] A pointer to the [IStream](http://msdn.microsoft.com/library/windows/desktop/aa380034) interface on the stream containing the data.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n **ReadToStream** requires a previous call to [WriteToStream](#ccomvariant__writetostream).  \n  \n##  <a name=\"ccomvariant__setbyref\"></a>  CComVariant::SetByRef  \n Initializes the `CComVariant` object and sets the **vt** member to **VT_BYREF**.  \n  \n```\ntemplate < typename T >\nvoid SetByRef(T* pT) throw();\n```  \n  \n### Parameters  \n `T`  \n The type of **VARIANT**, for example, `BSTR`, `int`, or `char`.  \n  \n *pT*  \n The pointer used to initialize the `CComVariant` object.  \n  \n### Remarks  \n `SetByRef` is a function template that initializes the `CComVariant` object to the pointer *pT* and sets the **vt** member to **VT_BYREF**. For example:  \n  \n [!code-cpp[NVC_ATL_Utilities#76](../../atl/codesnippet/cpp/ccomvariant-class_1.cpp)]  \n  \n##  <a name=\"ccomvariant__writetostream\"></a>  CComVariant::WriteToStream  \n Saves the underlying **VARIANT** to a stream.  \n  \n```\nHRESULT WriteToStream(IStream* pStream);\n```  \n  \n### Parameters  \n `pStream`  \n [in] A pointer to the [IStream](http://msdn.microsoft.com/library/windows/desktop/aa380034) interface on a stream.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)"}