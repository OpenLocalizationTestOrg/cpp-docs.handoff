{"nodes":[{"pos":[12,56],"content":"scanf Type Field Characters | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"scanf Type Field Characters | Microsoft Docs","pos":[0,44]}]},{"content":"scanf Type Field Characters","pos":[818,845]},{"pos":[846,972],"content":"The following information applies to any of the <ph id=\"ph1\">`scanf`</ph> family of functions, including the secure versions, such as <ph id=\"ph2\">`scanf_s`</ph>.","source":"The following information applies to any of the `scanf` family of functions, including the secure versions, such as `scanf_s`."},{"content":"The <ph id=\"ph1\">`type`</ph> character is the only required format field; it appears after any optional format fields.","pos":[979,1079],"source":"The `type` character is the only required format field; it appears after any optional format fields."},{"content":"The <ph id=\"ph1\">`type`</ph> character determines whether the associated argument is interpreted as a character, string, or number.","pos":[1080,1193],"source":" The `type` character determines whether the associated argument is interpreted as a character, string, or number."},{"content":"Type Characters for scanf functions","pos":[1203,1238]},{"content":"Character","pos":[1245,1254]},{"content":"Type of input expected","pos":[1255,1277]},{"content":"Type of argument","pos":[1278,1294]},{"content":"Size argument in secure version?","pos":[1295,1327]},{"content":"Character.","pos":[1447,1457]},{"content":"When used with <ph id=\"ph1\">`scanf`</ph> functions, specifies single-byte character; when used with <ph id=\"ph2\">`wscanf`</ph> functions, specifies wide character.","pos":[1458,1585],"source":" When used with `scanf` functions, specifies single-byte character; when used with `wscanf` functions, specifies wide character."},{"content":"White-space characters that are ordinarily skipped are read when <ph id=\"ph1\">`c`</ph> is specified.","pos":[1586,1668],"source":" White-space characters that are ordinarily skipped are read when `c` is specified."},{"content":"To read next non–white-space single-byte character, use <ph id=\"ph1\">`%1s`</ph>; to read next non–white-space wide character, use <ph id=\"ph2\">`%1ws`</ph>.","pos":[1669,1788],"source":" To read next non–white-space single-byte character, use `%1s`; to read next non–white-space wide character, use `%1ws`."},{"pos":[1789,1896],"content":"Pointer to <ph id=\"ph1\">`char`</ph> when used with <ph id=\"ph2\">`scanf`</ph> functions, pointer to <ph id=\"ph3\">`wchar_t`</ph> when used with <ph id=\"ph4\">`wscanf`</ph> functions.","source":"Pointer to `char` when used with `scanf` functions, pointer to `wchar_t` when used with `wscanf` functions."},{"content":"Required.","pos":[1897,1906]},{"content":"Size does not include space for a null terminator.","pos":[1907,1957]},{"content":"Opposite size character.","pos":[1966,1990]},{"content":"When used with <ph id=\"ph1\">`scanf`</ph> functions, specifies wide character; when used with <ph id=\"ph2\">`wscanf`</ph> functions, specifies single-byte character.","pos":[1991,2118],"source":" When used with `scanf` functions, specifies wide character; when used with `wscanf` functions, specifies single-byte character."},{"content":"White-space characters that are ordinarily skipped are read when <ph id=\"ph1\">`C`</ph> is specified.","pos":[2119,2201],"source":" White-space characters that are ordinarily skipped are read when `C` is specified."},{"content":"To read next non–white-space single-byte character, use <ph id=\"ph1\">`%1s`</ph>; to read next non–white-space wide character, use <ph id=\"ph2\">`%1ws`</ph>.","pos":[2202,2321],"source":" To read next non–white-space single-byte character, use `%1s`; to read next non–white-space wide character, use `%1ws`."},{"pos":[2322,2429],"content":"Pointer to <ph id=\"ph1\">`wchar_t`</ph> when used with <ph id=\"ph2\">`scanf`</ph> functions, pointer to <ph id=\"ph3\">`char`</ph> when used with <ph id=\"ph4\">`wscanf`</ph> functions.","source":"Pointer to `wchar_t` when used with `scanf` functions, pointer to `char` when used with `wscanf` functions."},{"content":"Required.","pos":[2430,2439]},{"content":"Size argument does not include space for a null terminator.","pos":[2440,2499]},{"content":"Decimal integer.","pos":[2508,2524]},{"pos":[2525,2542],"content":"Pointer to <ph id=\"ph1\">`int`</ph>.","source":"Pointer to `int`."},{"content":"No.","pos":[2543,2546]},{"content":"An integer.","pos":[2555,2566]},{"content":"Hexadecimal if the input string begins with \"0x\" or \"0X\", octal if the string begins with \"0\", otherwise decimal.","pos":[2567,2680]},{"pos":[2681,2698],"content":"Pointer to <ph id=\"ph1\">`int`</ph>.","source":"Pointer to `int`."},{"content":"No.","pos":[2699,2702]},{"content":"Octal integer.","pos":[2711,2725]},{"pos":[2726,2743],"content":"Pointer to <ph id=\"ph1\">`int`</ph>.","source":"Pointer to `int`."},{"content":"No.","pos":[2744,2747]},{"content":"A pointer address in hexadecimal digits.","pos":[2756,2796]},{"content":"The maximum number of digits read depends on the size of a pointer (32 or 64 bits), which depends on the machine architecture.","pos":[2797,2923]},{"content":"\"0x\" or \"0X\" are accepted as prefixes.","pos":[2924,2962]},{"pos":[2963,2982],"content":"Pointer to <ph id=\"ph1\">`void*`</ph>.","source":"Pointer to `void*`."},{"content":"No.","pos":[2983,2986]},{"content":"Unsigned decimal integer.","pos":[2995,3020]},{"pos":[3021,3048],"content":"Pointer to <ph id=\"ph1\">`unsigned``int`</ph>.","source":"Pointer to `unsigned``int`."},{"content":"No.","pos":[3049,3052]},{"content":"Hexadecimal integer.","pos":[3061,3081]},{"pos":[3082,3099],"content":"Pointer to <ph id=\"ph1\">`int`</ph>.","source":"Pointer to `int`."},{"content":"No.","pos":[3100,3103]},{"pos":[3111,3127],"content":", <ph id=\"ph1\">`E`</ph>, <ph id=\"ph2\">`f`</ph>, <ph id=\"ph3\">`g`</ph>,","source":", `E`, `f`, `g`, "},{"content":"Floating-point value consisting of optional sign (+ or –), series of one or more decimal digits containing decimal point, and optional exponent (\"e\" or \"E\") followed by an optionally signed integer value.","pos":[3132,3336]},{"pos":[3337,3356],"content":"Pointer to <ph id=\"ph1\">`float`</ph>.","source":"Pointer to `float`."},{"content":"No.","pos":[3357,3360]},{"content":"No input read from stream or buffer.","pos":[3369,3405]},{"pos":[3406,3582],"content":"Pointer to <ph id=\"ph1\">`int`</ph>, into which is stored number of characters successfully read from stream or buffer up to that point in current call to <ph id=\"ph2\">`scanf`</ph> functions or <ph id=\"ph3\">`wscanf`</ph> functions.","source":"Pointer to `int`, into which is stored number of characters successfully read from stream or buffer up to that point in current call to `scanf` functions or `wscanf` functions."},{"content":"No.","pos":[3583,3586]},{"content":"String, up to first white-space character (space, tab or newline).","pos":[3595,3661]},{"content":"To read strings not delimited by space characters, use set of square brackets (<ph id=\"ph1\">`[ ]`</ph>), as discussed in <bpt id=\"p1\">[</bpt>scanf Width Specification<ept id=\"p1\">](../c-runtime-library/scanf-width-specification.md)</ept>.","pos":[3662,3844],"source":" To read strings not delimited by space characters, use set of square brackets (`[ ]`), as discussed in [scanf Width Specification](../c-runtime-library/scanf-width-specification.md)."},{"content":"When used with <ph id=\"ph1\">`scanf`</ph> functions, signifies single-byte character array; when used with <ph id=\"ph2\">`wscanf`</ph> functions, signifies wide-character array.","pos":[3845,3984],"source":"When used with `scanf` functions, signifies single-byte character array; when used with `wscanf` functions, signifies wide-character array."},{"content":"In either case, character array must be large enough for input field plus terminating null character, which is automatically appended.","pos":[3985,4119]},{"content":"Required.","pos":[4120,4129]},{"content":"Size includes space for a null terminator.","pos":[4130,4172]},{"content":"Opposite-size character string, up to first white-space character (space, tab or newline).","pos":[4181,4271]},{"content":"To read strings not delimited by space characters, use set of square brackets (<ph id=\"ph1\">`[ ]`</ph>), as discussed in <bpt id=\"p1\">[</bpt>scanf Width Specification<ept id=\"p1\">](../c-runtime-library/scanf-width-specification.md)</ept>.","pos":[4272,4454],"source":" To read strings not delimited by space characters, use set of square brackets (`[ ]`), as discussed in [scanf Width Specification](../c-runtime-library/scanf-width-specification.md)."},{"content":"When used with <ph id=\"ph1\">`scanf`</ph> functions, signifies wide-character array; when used with <ph id=\"ph2\">`wscanf`</ph> functions, signifies single-byte–character array.","pos":[4455,4594],"source":"When used with `scanf` functions, signifies wide-character array; when used with `wscanf` functions, signifies single-byte–character array."},{"content":"In either case, character array must be large enough for input field plus terminating null character, which is automatically appended.","pos":[4595,4729]},{"content":"Required.","pos":[4730,4739]},{"content":"Size includes space for a null terminator.","pos":[4740,4782]},{"pos":[4790,4939],"content":"The <ph id=\"ph1\">`a`</ph> and <ph id=\"ph2\">`A`</ph> specifiers (see <bpt id=\"p1\">[</bpt>printf Type Field Characters<ept id=\"p1\">](../c-runtime-library/printf-type-field-characters.md)</ept>) are not available with <ph id=\"ph3\">`scanf`</ph>.","source":"The `a` and `A` specifiers (see [printf Type Field Characters](../c-runtime-library/printf-type-field-characters.md)) are not available with `scanf`."},{"content":"The size arguments, if required, should be passed in the parameter list immediately following the argument they apply to.","pos":[4946,5067]},{"content":"For example, the following code:","pos":[5068,5100]},{"content":"reads a string with a maximum length of 10 into <ph id=\"ph1\">`string1`</ph>, and a string with a maximum length of 8 into <ph id=\"ph2\">`string2`</ph>.","pos":[5202,5316],"source":"reads a string with a maximum length of 10 into `string1`, and a string with a maximum length of 8 into `string2`."},{"content":"The buffer sizes should be at least one more than the width specifications since space must be reserved for the null terminator.","pos":[5317,5445]},{"content":"The format string can handle single-byte or wide character input regardless of whether the single-byte character or wide-character version of the function is used.","pos":[5452,5615]},{"content":"Thus, to read single-byte or wide characters with <ph id=\"ph1\">`scanf`</ph> functions and <ph id=\"ph2\">`wscanf`</ph> functions, use format specifiers as follows.","pos":[5616,5741],"source":" Thus, to read single-byte or wide characters with `scanf` functions and `wscanf` functions, use format specifiers as follows."},{"content":"To read character as","pos":[5748,5768]},{"content":"Use this function","pos":[5769,5786]},{"content":"With these format specifiers","pos":[5787,5815]},{"content":"single byte","pos":[5910,5921]},{"pos":[5930,5939],"content":"functions"},{"pos":[5943,5953],"content":", <ph id=\"ph1\">`hc`</ph>, or","source":", `hc`, or "},{"content":"single byte","pos":[5963,5974]},{"pos":[5984,5993],"content":"functions"},{"pos":[5997,6007],"content":", <ph id=\"ph1\">`hc`</ph>, or","source":", `hc`, or "},{"content":"wide","pos":[6017,6021]},{"pos":[6031,6040],"content":"functions"},{"pos":[6044,6054],"content":", <ph id=\"ph1\">`lc`</ph>, or","source":", `lc`, or "},{"content":"wide","pos":[6064,6068]},{"pos":[6077,6086],"content":"functions"},{"pos":[6090,6100],"content":", <ph id=\"ph1\">`lc`</ph>, or","source":", `lc`, or "},{"pos":[6113,6260],"content":"To scan strings with <ph id=\"ph1\">`scanf`</ph> functions, and <ph id=\"ph2\">`wscanf`</ph> functions, use the above table with format type-specifiers <ph id=\"ph3\">`s`</ph> and <ph id=\"ph4\">`S`</ph> instead of <ph id=\"ph5\">`c`</ph> and <ph id=\"ph6\">`C`</ph>.","source":"To scan strings with `scanf` functions, and `wscanf` functions, use the above table with format type-specifiers `s` and `S` instead of `c` and `C`."},{"content":"See Also","pos":[6269,6277]},{"content":"scanf, _scanf_l, wscanf, _wscanf_l","pos":[6282,6316]}],"content":"---\ntitle: \"scanf Type Field Characters | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napilocation: \n  - \"msvcr90.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr120.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"scanf\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"scanf function, type field characters\"\nms.assetid: 5d546a84-715b-44ca-b1c5-bbe997f9ff62\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# scanf Type Field Characters\nThe following information applies to any of the `scanf` family of functions, including the secure versions, such as `scanf_s`.  \n  \n The `type` character is the only required format field; it appears after any optional format fields. The `type` character determines whether the associated argument is interpreted as a character, string, or number.  \n  \n### Type Characters for scanf functions  \n  \n|Character|Type of input expected|Type of argument|Size argument in secure version?|  \n|---------------|----------------------------|----------------------|--------------------------------------|  \n|`c`|Character. When used with `scanf` functions, specifies single-byte character; when used with `wscanf` functions, specifies wide character. White-space characters that are ordinarily skipped are read when `c` is specified. To read next non–white-space single-byte character, use `%1s`; to read next non–white-space wide character, use `%1ws`.|Pointer to `char` when used with `scanf` functions, pointer to `wchar_t` when used with `wscanf` functions.|Required. Size does not include space for a null terminator.|  \n|`C`|Opposite size character. When used with `scanf` functions, specifies wide character; when used with `wscanf` functions, specifies single-byte character. White-space characters that are ordinarily skipped are read when `C` is specified. To read next non–white-space single-byte character, use `%1s`; to read next non–white-space wide character, use `%1ws`.|Pointer to `wchar_t` when used with `scanf` functions, pointer to `char` when used with `wscanf` functions.|Required. Size argument does not include space for a null terminator.|  \n|`d`|Decimal integer.|Pointer to `int`.|No.|  \n|`i`|An integer. Hexadecimal if the input string begins with \"0x\" or \"0X\", octal if the string begins with \"0\", otherwise decimal.|Pointer to `int`.|No.|  \n|`o`|Octal integer.|Pointer to `int`.|No.|  \n|`p`|A pointer address in hexadecimal digits. The maximum number of digits read depends on the size of a pointer (32 or 64 bits), which depends on the machine architecture. \"0x\" or \"0X\" are accepted as prefixes.|Pointer to `void*`.|No.|  \n|`u`|Unsigned decimal integer.|Pointer to `unsigned``int`.|No.|  \n|`x`|Hexadecimal integer.|Pointer to `int`.|No.|  \n|`e`, `E`, `f`, `g`, `G`|Floating-point value consisting of optional sign (+ or –), series of one or more decimal digits containing decimal point, and optional exponent (\"e\" or \"E\") followed by an optionally signed integer value.|Pointer to `float`.|No.|  \n|`n`|No input read from stream or buffer.|Pointer to `int`, into which is stored number of characters successfully read from stream or buffer up to that point in current call to `scanf` functions or `wscanf` functions.|No.|  \n|`s`|String, up to first white-space character (space, tab or newline). To read strings not delimited by space characters, use set of square brackets (`[ ]`), as discussed in [scanf Width Specification](../c-runtime-library/scanf-width-specification.md).|When used with `scanf` functions, signifies single-byte character array; when used with `wscanf` functions, signifies wide-character array. In either case, character array must be large enough for input field plus terminating null character, which is automatically appended.|Required. Size includes space for a null terminator.|  \n|`S`|Opposite-size character string, up to first white-space character (space, tab or newline). To read strings not delimited by space characters, use set of square brackets (`[ ]`), as discussed in [scanf Width Specification](../c-runtime-library/scanf-width-specification.md).|When used with `scanf` functions, signifies wide-character array; when used with `wscanf` functions, signifies single-byte–character array. In either case, character array must be large enough for input field plus terminating null character, which is automatically appended.|Required. Size includes space for a null terminator.|  \n  \n The `a` and `A` specifiers (see [printf Type Field Characters](../c-runtime-library/printf-type-field-characters.md)) are not available with `scanf`.  \n  \n The size arguments, if required, should be passed in the parameter list immediately following the argument they apply to. For example, the following code:  \n  \n```  \nchar string1[11], string2[9];  \nscanf_s(\"%10s %8s\", string1, 11, string2, 9);  \n```  \n  \n reads a string with a maximum length of 10 into `string1`, and a string with a maximum length of 8 into `string2`. The buffer sizes should be at least one more than the width specifications since space must be reserved for the null terminator.  \n  \n The format string can handle single-byte or wide character input regardless of whether the single-byte character or wide-character version of the function is used. Thus, to read single-byte or wide characters with `scanf` functions and `wscanf` functions, use format specifiers as follows.  \n  \n|To read character as|Use this function|With these format specifiers|  \n|--------------------------|-----------------------|----------------------------------|  \n|single byte|`scanf` functions|`c`, `hc`, or `hC`|  \n|single byte|`wscanf` functions|`C`, `hc`, or `hC`|  \n|wide|`wscanf` functions|`c`, `lc`, or `lC`|  \n|wide|`scanf` functions|`C`, `lc`, or `lC`|  \n  \n To scan strings with `scanf` functions, and `wscanf` functions, use the above table with format type-specifiers `s` and `S` instead of `c` and `C`.  \n  \n## See Also  \n [scanf, _scanf_l, wscanf, _wscanf_l](../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)"}