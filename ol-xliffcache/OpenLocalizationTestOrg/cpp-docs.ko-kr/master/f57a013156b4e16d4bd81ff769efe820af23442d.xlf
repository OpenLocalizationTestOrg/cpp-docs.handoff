<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f57a013156b4e16d4bd81ff769efe820af23442d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\cregkey-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75e0cad8d6562e6c2473e89dc4bf5cce75f55f44</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4141aa6a50dfee0366e613ed757ef86c5cef2470</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CRegKey Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CRegKey Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class provides methods for manipulating entries in the system registry.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the Windows Runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>CRegKey::CRegKey</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>CRegKey::~CRegKey</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CRegKey::Attach</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Call this method to attach an HKEY to the <ph id="ph1">`CRegKey`</ph> object by setting the <bpt id="p1">[</bpt>m_hKey<ept id="p1">](#cregkey__m_hkey)</ept> member handle to <ph id="ph2">`hKey`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CRegKey::Close</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Call this method to release the <bpt id="p1">[</bpt>m_hKey<ept id="p1">](#cregkey__m_hkey)</ept> member handle and set it to NULL.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CRegKey::Create</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Call this method to create the specified key, if it does not exist as a subkey of <ph id="ph1">`hKeyParent`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CRegKey::DeleteSubKey</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Call this method to remove the specified key from the registry.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CRegKey::DeleteValue</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Call this method to remove a value field from <bpt id="p1">[</bpt>m_hKey<ept id="p1">](#cregkey__m_hkey)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CRegKey::Detach</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Call this method to detach the <bpt id="p1">[</bpt>m_hKey<ept id="p1">](#cregkey__m_hkey)</ept> member handle from the <ph id="ph1">`CRegKey`</ph> object and set <ph id="ph2">`m_hKey`</ph> to NULL.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CRegKey::EnumKey</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Call this method to enumerate the subkeys of the open registry key.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CRegKey::Flush</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Call this method to write all of the attributes of the open registry key into the registry.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CRegKey::GetKeySecurity</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve a copy of the security descriptor protecting the open registry key.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CRegKey::NotifyChangeKeyValue</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This method notifies the caller about changes to the attributes or contents of the open registry key.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CRegKey::Open</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Call this method to open the specified key and set <bpt id="p1">[</bpt>m_hKey<ept id="p1">](#cregkey__m_hkey)</ept> to the handle of this key.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CRegKey::QueryBinaryValue</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the binary data for a specified value name.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CRegKey::QueryDWORDValue</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the DWORD data for a specified value name.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CRegKey::QueryGUIDValue</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the GUID data for a specified value name.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CRegKey::QueryMultiStringValue</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the multistring data for a specified value name.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CRegKey::QueryQWORDValue</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the QWORD data for a specified value name.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CRegKey::QueryStringValue</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the string data for a specified value name.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CRegKey::QueryValue</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve the data for the specified value field of <bpt id="p1">[</bpt>m_hKey<ept id="p1">](#cregkey__m_hkey)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Earlier versions of this method are no longer supported and are marked as <bpt id="p1">**</bpt>ATL_DEPRECATED<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CRegKey::RecurseDeleteKey</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Call this method to remove the specified key from the registry and explicitly remove any subkeys.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CRegKey::SetBinaryValue</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Call this method to set the binary value of the registry key.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CRegKey::SetDWORDValue</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Call this method to set the DWORD value of the registry key.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CRegKey::SetGUIDValue</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Call this method to set the GUID value of the registry key.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CRegKey::SetKeySecurity</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Call this method to set the security of the registry key.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CRegKey::SetKeyValue</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Call this method to store data in a specified value field of a specified key.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CRegKey::SetMultiStringValue</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Call this method to set the multistring value of the registry key.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CRegKey::SetQWORDValue</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Call this method to set the QWORD value of the registry key.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CRegKey::SetStringValue</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Call this method to set the string value of the registry key.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CRegKey::SetValue</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Call this method to store data in the specified value field of <bpt id="p1">[</bpt>m_hKey<ept id="p1">](#cregkey__m_hkey)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Earlier versions of this method are no longer supported and are marked as <bpt id="p1">**</bpt>ATL_DEPRECATED<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CRegKey::operator HKEY</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Converts a <ph id="ph1">`CRegKey`</ph> object to an HKEY.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CRegKey::operator =</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Assignment operator.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CRegKey::m_hKey</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Contains a handle of the registry key associated with the <ph id="ph1">`CRegKey`</ph> object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>CRegKey::m_pTM</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`CAtlTransactionManager`</ph> object</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>provides methods for creating and deleting keys and values in the system registry.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The registry contains an installation-specific set of definitions for system components, such as software version numbers, logical-to-physical mappings of installed hardware, and COM objects.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>provides a programming interface to the system registry for a given machine.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For example, to open a particular registry key, call <ph id="ph1">`CRegKey::Open`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To retrieve or modify a data value, call <ph id="ph1">`CRegKey::QueryValue`</ph> or <ph id="ph2">`CRegKey::SetValue`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To close a key, call <ph id="ph1">`CRegKey::Close`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When you close a key, its registry data is written (flushed) to the hard disk.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This process may take several seconds.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If your application must explicitly write registry data to the hard disk, you can call the <bpt id="p1">[</bpt>RegFlushKey<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724867)</ept> Win32 function.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>However, <bpt id="p1">**</bpt>RegFlushKey<ept id="p1">**</ept> uses many system resources and should be called only when absolutely necessary.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Any methods that allow the caller to specify a registry location have the potential to read data that cannot be trusted.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Methods that make use of <bpt id="p1">[</bpt>RegQueryValueEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724911)</ept> should take into consideration that this function does not explicitly handle strings which are NULL terminated.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Both conditions should be checked for by the calling code.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlbase.h</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>CRegKey::Attach</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Call this method to attach an HKEY to the <ph id="ph1">`CRegKey`</ph> object by setting the <bpt id="p1">[</bpt>m_hKey<ept id="p1">](#cregkey__m_hkey)</ept> member handle to <ph id="ph2">`hKey`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The handle of a registry key.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Attach<ept id="p1">**</ept> will assert if <ph id="ph1">`m_hKey`</ph> is non-NULL.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CRegKey::Close</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Call this method to release the <bpt id="p1">[</bpt>m_hKey<ept id="p1">](#cregkey__m_hkey)</ept> member handle and set it to NULL.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If successful, returns ERROR_SUCCESS; otherwise returns an error value.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>CRegKey::Create</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Call this method to create the specified key, if it does not exist as a subkey of <ph id="ph1">`hKeyParent`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The handle of an open key.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Specifies the name of a key to be created or opened.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This name must be a subkey of <ph id="ph1">`hKeyParent`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Specifies the class of the key to be created or opened.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The default value is REG_NONE.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Options for the key.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The default value is REG_OPTION_NON_VOLATILE.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For a list of possible values and descriptions, see <bpt id="p1">[</bpt>RegCreateKeyEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724844)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The security access for the key.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The default value is KEY_READ &amp;#124; KEY_WRITE.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For a list of possible values and descriptions, see <bpt id="p1">**</bpt>RegCreateKeyEx<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>lpSecAttr</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>SECURITY_ATTRIBUTES<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa379560)</ept> structure that indicates whether the handle of the key can be inherited by a child process.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>By default, this parameter is NULL (meaning the handle cannot be inherited).</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>lpdwDisposition</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>[out] If non-NULL, retrieves either REG_CREATED_NEW_KEY (if the key did not exist and was created) or REG_OPENED_EXISTING_KEY (if the key existed and was opened).</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If successful, returns ERROR_SUCCESS and opens the key.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If the method fails, the return value is a nonzero error code defined in WINERROR.H.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create<ept id="p1">**</ept> sets the <bpt id="p2">[</bpt>m_hKey<ept id="p2">](#cregkey__m_hkey)</ept> member to the handle of this key.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>CRegKey::CRegKey</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CRegKey`</ph> object.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A handle to a registry key.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Pointer to CAtlTransactionManager object</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">`CRegKey`</ph> object.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The object can be created from an existing <ph id="ph1">`CRegKey`</ph> object, or from a handle to a registry key.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>CRegKey::~CRegKey</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The destructor releases <ph id="ph1">`m_hKey`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>CRegKey::DeleteSubKey</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Call this method to remove the specified key from the registry.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Specifies the name of the key to delete.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This name must be a subkey of <bpt id="p1">[</bpt>m_hKey<ept id="p1">](#cregkey__m_hkey)</ept>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>If successful, returns ERROR_SUCCESS.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If the method fails, the return value is a nonzero error code defined in WINERROR.H.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>can only delete a key that has no subkeys.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If the key has subkeys, call <bpt id="p1">[</bpt>RecurseDeleteKey<ept id="p1">](#cregkey__recursedeletekey)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>CRegKey::DeleteValue</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Call this method to remove a value field from <bpt id="p1">[</bpt>m_hKey<ept id="p1">](#cregkey__m_hkey)</ept>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Specifies the value field to remove.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>If successful, returns ERROR_SUCCESS.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If the method fails, the return value is a nonzero error code defined in WINERROR.H.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>CRegKey::Detach</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Call this method to detach the <bpt id="p1">[</bpt>m_hKey<ept id="p1">](#cregkey__m_hkey)</ept> member handle from the <ph id="ph1">`CRegKey`</ph> object and set <ph id="ph2">`m_hKey`</ph> to NULL.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The HKEY associated with the <ph id="ph1">`CRegKey`</ph> object.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>CRegKey::EnumKey</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Call this method to enumerate the subkeys of the open registry key.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The subkey index.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This parameter should be zero for the first call and then incremented for subsequent calls</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Pointer to a buffer that receives the name of the subkey, including the terminating null character.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Only the name of the subkey is copied to the buffer, not the full key hierarchy.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>pnNameLength</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Pointer to a variable that specifies the size, in TCHARs, of the buffer specified by the <ph id="ph1">`pszName`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This size should include the terminating null character.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>When the method returns, the variable pointed to by <bpt id="p1">*</bpt>pnNameLength<ept id="p1">*</ept> contains the number of characters stored in the buffer.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The count returned does not include the terminating null character.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>pftLastWriteTime</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Pointer to a variable that receives the time the enumerated subkey was last written to.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>If the method succeeds, the return value is ERROR_SUCCESS.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>If the method fails, the return value is a nonzero error code defined in WINERROR.H.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>To enumerate the subkeys, call <ph id="ph1">`CRegKey::EnumKey`</ph> with an index of zero.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Increment the index value and repeat until the method returns ERROR_NO_MORE_ITEMS.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>RegEnumKeyEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724862)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>CRegKey::Flush</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Call this method to write all of the attributes of the open registry key into the registry.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>If the method succeeds, the return value is ERROR_SUCCESS.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>If the method fails, the return value is a nonzero error code defined in WINERROR.H.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>RegEnumFlush<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724867)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>CRegKey::GetKeySecurity</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Call this method to retrieve a copy of the security descriptor protecting the open registry key.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SECURITY_INFORMATION<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa379573)</ept> value that indicates the requested security information.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>A pointer to a buffer that receives a copy of the requested security descriptor.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the buffer pointed to by <ph id="ph1">`psd`</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>If the method succeeds, the return value is ERROR_SUCCESS.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>If the method fails, the return value is a nonzero error code is defined in WINERROR.H.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>RegGetKeySecurity<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa379313)</ept>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>CRegKey::m_hKey</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Contains a handle of the registry key associated with the <ph id="ph1">`CRegKey`</ph> object.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>CRegKey::m_pTM</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Pointer to a <ph id="ph1">`CAtlTransactionManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>CRegKey::NotifyChangeKeyValue</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>This method notifies the caller about changes to the attributes or contents of the open registry key.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>bWatchSubtree</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Specifies a flag that indicates whether to report changes in the specified key and all of its subkeys or only in the specified key.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>If this parameter is TRUE, the method reports changes in the key and its subkeys.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>If the parameter is FALSE, the method reports changes only in the key.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>dwNotifyFilter</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Specifies a set of flags that control which changes should be reported.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>This parameter can be a combination of the following values:</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>REG_NOTIFY_CHANGE_NAME</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Notify the caller if a subkey is added or deleted.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>REG_NOTIFY_CHANGE_ATTRIBUTES</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Notify the caller of changes to the attributes of the key, such as the security descriptor information.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>REG_NOTIFY_CHANGE_LAST_SET</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Notify the caller of changes to a value of the key.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This can include adding or deleting a value, or changing an existing value.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>REG_NOTIFY_CHANGE_SECURITY</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Notify the caller of changes to the security descriptor of the key.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Handle to an event.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">*</bpt>bAsync<ept id="p1">*</ept> parameter is TRUE, the method returns immediately and changes are reported by signaling this event.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bAsync`</ph> is FALSE, <ph id="ph2">`hEvent`</ph> is ignored.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Specifies a flag that indicates how the method reports changes.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>If this parameter is TRUE, the method returns immediately and reports changes by signaling the specified event.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>When this parameter is FALSE, the method does not return until a change has occurred.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`hEvent`</ph> does not specify a valid event, the <ph id="ph2">`bAsync`</ph> parameter cannot be TRUE.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>If the method succeeds, the return value is ERROR_SUCCESS.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>If the method fails, the return value is a nonzero error code defined in WINERROR.H.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>This method does not notify the caller if the specified key is deleted.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>For more details and a sample program, see <bpt id="p1">[</bpt>RegNotifyChangeKeyValue<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724892)</ept>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>CRegKey::Open</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Call this method to open the specified key and set <bpt id="p1">[</bpt>m_hKey<ept id="p1">](#cregkey__m_hkey)</ept> to the handle of this key.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The handle of an open key.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Specifies the name of a key to be created or opened.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>This name must be a subkey of <ph id="ph1">`hKeyParent`</ph>.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The security access for the key.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The default value is KEY_ALL_ACCESS.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>For a list of possible values and descriptions, see <bpt id="p1">[</bpt>RegCreateKeyEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724844)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>If successful, returns ERROR_SUCCESS; otherwise, a non-zero error value defined in WINERROR.H.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`lpszKeyName`</ph> parameter is NULL or points to an empty string, <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> opens a new handle of the key identified by <ph id="ph2">`hKeyParent`</ph>, but does not close any previously opened handle.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">[</bpt>CRegKey::Create<ept id="p1">](#cregkey__create)</ept>, <bpt id="p2">**</bpt>Open<ept id="p2">**</ept> will not create the specified key if it does not exist.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>CRegKey::operator HKEY</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Converts a <ph id="ph1">`CRegKey`</ph> object to an HKEY.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>```operator HKEY() const throw();</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>CRegKey&amp; operator= (CRegKey&amp; key) throw();</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>LONG QueryBinaryValue(LPCTSTR pszValueName, void<bpt id="p1">*</bpt> pValue, ULONG<ept id="p1">*</ept> pnBytes) throw();</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>LONG QueryDWORDValue(LPCTSTR pszValueName, DWORD&amp; dwValue) throw();</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>LONG QueryGUIDValue(LPCTSTR pszValueName, GUID&amp; guidValue) throw();</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>LONG QueryMultiStringValue(LPCTSTR pszValueName, LPTSTR pszValue, ULONG* pnChars) throw();</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>LONG QueryQWORDValue(LPCTSTR pszValueName, ULONGLONG&amp; qwValue) throw();</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>LONG QueryStringValue(LPCTSTR pszValueName, LPTSTR pszValue, ULONG* pnChars) throw();</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>LONG QueryValue(LPCTSTR pszValueName, DWORD<bpt id="p1">*</bpt> pdwType, void<ept id="p1">*</ept> pData, ULONG* pnBytes) throw(); ATL_DEPRECATED LONG QueryValue( DWORD&amp; dwValue, LPCTSTR lpszValueName);</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>LONG RecurseDeleteKey(LPCTSTR lpszKey) throw();</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>LONG SetBinaryValue(LPCTSTR pszValueName, const void* pValue, ULONG nBytes) throw();</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>LONG SetDWORDValue(LPCTSTR pszValueName,  DWORD dwValue) throw();</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>LONG SetGUIDValue(LPCTSTR pszValueName,  REFGUID guidValue) throw();</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>LONG SetKeyValue(LPCTSTR lpszKeyName, LPCTSTR lpszValue, LPCTSTR lpszValueName = NULL) throw();</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>LONG SetKeySecurity(SECURITY_INFORMATION si,  PSECURITY_DESCRIPTOR psd) throw();</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>LONG SetMultiStringValue(LPCTSTR pszValueName,  LPCTSTR pszValue) throw();</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>LONG SetQWORDValue(LPCTSTR pszValueName,  ULONGLONG qwValue) throw();</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>LONG SetStringValue(LPCTSTR pszValueName, LPCTSTR pszValue, DWORD dwType = REG_SZ) throw();</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>LONG SetValue(LPCTSTR pszValueName, DWORD dwType, const void* pValue, ULONG nBytes) throw(); static LONG WINAPI SetValue(HKEY hKeyParent, LPCTSTR lpszKeyName, LPCTSTR lpszValue, LPCTSTR lpszValueName = NULL);</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>