<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4073ff91fe2ec3fe4ba7973022e21cf905b34c9e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\multithreading-how-to-use-the-synchronization-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7329512242dc2a356cfb6a0f272079377b73b1ac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e34e251af69772ed835d4cf72aca8cd01f839193</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Multithreading: How to Use the Synchronization Classes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Multithreading: How to Use the Synchronization Classes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Synchronizing resource access between threads is a common problem when writing multithreaded applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Having two or more threads simultaneously access the same data can lead to undesirable and unpredictable results.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, one thread could be updating the contents of a structure while another thread is reading the contents of the same structure.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It is unknown what data the reading thread will receive: the old data, the newly written data, or possibly a mixture of both.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>MFC provides a number of synchronization and synchronization access classes to aid in solving this problem.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic explains the classes available and how to use them to create thread-safe classes in a typical multithreaded application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A typical multithreaded application has a class that represents a resource to be shared among threads.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A properly designed, fully thread-safe class does not require you to call any synchronization functions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Everything is handled internally to the class, allowing you to concentrate on how to best use the class, not about how it might get corrupted.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An effective technique for creating a fully thread-safe class is to merge the synchronization class into the resource class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Merging the synchronization classes into the shared class is a straightforward process.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As an example, take an application that maintains a linked list of accounts.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This application allows up to three accounts to be examined in separate windows, but only one can be updated at any particular time.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When an account is updated, the updated data is sent over the network to a data archive.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This example application uses all three types of synchronization classes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Because it allows up to three accounts to be examined at one time, it uses <bpt id="p1">[</bpt>CSemaphore<ept id="p1">](../mfc/reference/csemaphore-class.md)</ept> to limit access to three view objects.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When an attempt to view a fourth account occurs, the application either waits until one of the first three windows closes or it fails.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When an account is updated, the application uses <bpt id="p1">[</bpt>CCriticalSection<ept id="p1">](../mfc/reference/ccriticalsection-class.md)</ept> to ensure that only one account is updated at a time.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>After the update succeeds, it signals <bpt id="p1">[</bpt>CEvent<ept id="p1">](../mfc/reference/cevent-class.md)</ept>, which releases a thread waiting for the event to be signaled.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This thread sends the new data to the data archive.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Designing a Thread-Safe Class</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To make a class fully thread-safe, first add the appropriate synchronization class to the shared classes as a data member.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the previous account-management example, a <bpt id="p1">**</bpt>CSemaphore<ept id="p1">**</ept> data member would be added to the view class, a <ph id="ph1">`CCriticalSection`</ph> data member would be added to the linked-list class, and a <ph id="ph2">`CEvent`</ph> data member would be added to the data storage class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Next, add synchronization calls to all member functions that modify the data in the class or access a controlled resource.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In each function, you should create either a <bpt id="p1">[</bpt>CSingleLock<ept id="p1">](../mfc/reference/csinglelock-class.md)</ept> or <bpt id="p2">[</bpt>CMultiLock<ept id="p2">](../mfc/reference/cmultilock-class.md)</ept> object and call that object's <ph id="ph1">`Lock`</ph> function.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When the lock object goes out of scope and is destroyed, the object's destructor calls <ph id="ph1">`Unlock`</ph> for you, releasing the resource.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Of course, you can call <ph id="ph1">`Unlock`</ph> directly if you want.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Designing your thread-safe class in this fashion allows it to be used in a multithreaded application as easily as a non-thread-safe class, but with a higher level of safety.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Encapsulating the synchronization object and synchronization access object into the resource's class provides all the benefits of fully thread-safe programming without the drawback of maintaining synchronization code.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates this method by using a data member, <ph id="ph1">`m_CritSection`</ph> (of type <ph id="ph2">`CCriticalSection`</ph>), declared in the shared resource class and a <ph id="ph3">`CSingleLock`</ph> object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The synchronization of the shared resource (derived from <ph id="ph1">`CWinThread`</ph>) is attempted by creating a <ph id="ph2">`CSingleLock`</ph> object using the address of the <ph id="ph3">`m_CritSection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An attempt is made to lock the resource and, when obtained, work is done on the shared object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When the work is finished, the resource is unlocked with a call to <ph id="ph1">`Unlock`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>, unlike other MFC synchronization classes, does not have the option of a timed lock request.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The waiting period for a thread to become free is infinite.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The drawbacks to this approach are that the class will be slightly slower than the same class without the synchronization objects added.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Also, if there is a chance that more than one thread might delete the object, the merged approach might not always work.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In this situation, it is better to maintain separate synchronization objects.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For information about determining which synchronization class to use in different situations, see <bpt id="p1">[</bpt>Multithreading: When to Use the Synchronization Classes<ept id="p1">](../parallel/multithreading-when-to-use-the-synchronization-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information about synchronization, see <bpt id="p1">[</bpt>Synchronization<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686353)</ept> in the <ph id="ph1">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information about multithreading support in MFC, see <bpt id="p1">[</bpt>Multithreading with C++ and MFC<ept id="p1">](../parallel/multithreading-with-cpp-and-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Multithreading with C++ and MFC</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>