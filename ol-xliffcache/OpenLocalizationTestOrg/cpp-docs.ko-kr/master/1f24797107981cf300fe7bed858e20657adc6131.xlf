<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f24797107981cf300fe7bed858e20657adc6131</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\c-type-specifiers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a9f7a7f882aeeecbb3bd40d65556d80bf4771c7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d7aca03c1714cbfbe4c5a7efd29c9566b723bed4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Type Specifiers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Type Specifiers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Type specifiers in declarations define the type of a variable or function declaration.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-specifier<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>void</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>char</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>signed</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>unsigned</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>struct-or-union-specifier</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>enum-specifier</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>typedef-name</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>signed char<ept id="p1">**</ept>, <bpt id="p2">**</bpt>signed int<ept id="p2">**</ept>, <bpt id="p3">**</bpt>signed short int<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>signed long int<ept id="p4">**</ept> types, together with their <ph id="ph1">`unsigned`</ph> counterparts and <ph id="ph2">`enum`</ph>, are called "integral" types.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>float<ept id="p1">**</ept>, <bpt id="p2">**</bpt>double<ept id="p2">**</ept>, and <ph id="ph1">`long double`</ph> type specifiers are referred to as "floating" or "floating-point" types.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can use any integral or floating-point type specifier in a variable or function declaration.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">*</bpt>type-specifier<ept id="p1">*</ept> is not provided in a declaration, it is taken to be <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The optional keywords <bpt id="p1">**</bpt>signed<ept id="p1">**</ept> and <ph id="ph1">`unsigned`</ph> can precede or follow any of the integral types, except <ph id="ph2">`enum`</ph>, and can also be used alone as type specifiers, in which case they are understood as <bpt id="p2">**</bpt>signed int<ept id="p2">**</ept> and <ph id="ph3">`unsigned int`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When used alone, the keyword <ph id="ph1">`int`</ph> is assumed to be <bpt id="p1">**</bpt>signed<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When used alone, the keywords <bpt id="p1">**</bpt>long<ept id="p1">**</ept> and <bpt id="p2">**</bpt>short<ept id="p2">**</ept> are understood as <bpt id="p3">**</bpt>long int<ept id="p3">**</ept> and <ph id="ph1">`short int`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Enumeration types are considered basic types.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Type specifiers for enumeration types are discussed in <bpt id="p1">[</bpt>Enumeration Declarations<ept id="p1">](../c-language/c-enumeration-declarations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The keyword <ph id="ph1">`void`</ph> has three uses: to specify a function return type, to specify an argument-type list for a function that takes no arguments, and to specify a pointer to an unspecified type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`void`</ph> type to declare functions that return no value or to declare a pointer to an unspecified type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Arguments<ept id="p1">](../c-language/arguments.md)</ept> for information on <ph id="ph1">`void`</ph> when it appears alone within the parentheses following a function name.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Type checking is now ANSI-compliant, which means that type <bpt id="p1">**</bpt>short<ept id="p1">**</ept> and type <ph id="ph1">`int`</ph> are distinct types.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, this is a redefinition in the Microsoft C compiler that was accepted by previous versions of the compiler.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This next example also generates a warning about indirection to different types:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The Microsoft C compiler also generates warnings for differences in sign.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`void`</ph> expressions are evaluated for side effects.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You cannot use the (nonexistent) value of an expression that has type <ph id="ph1">`void`</ph> in any way, nor can you convert a <ph id="ph2">`void`</ph> expression (by implicit or explicit conversion) to any type except <ph id="ph3">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you do use an expression of any other type in a context where a <ph id="ph1">`void`</ph> expression is required, its value is discarded.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To conform to the ANSI specification, <bpt id="p1">**</bpt>void<ph id="ph1">\*\*</ph><ept id="p1">**</ept> cannot be used as <bpt id="p2">**</bpt>int<ph id="ph2">\*\*</ph><ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Only <bpt id="p1">**</bpt>void<ph id="ph1">\*</ph><ept id="p1">**</ept> can be used as a pointer to an unspecified type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can create additional type specifiers with <ph id="ph1">`typedef`</ph> declarations, as described in <bpt id="p1">[</bpt>Typedef Declarations<ept id="p1">](../c-language/typedef-declarations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Storage of Basic Types<ept id="p1">](../c-language/storage-of-basic-types.md)</ept> for information on the size of each type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Declarations and Types</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>