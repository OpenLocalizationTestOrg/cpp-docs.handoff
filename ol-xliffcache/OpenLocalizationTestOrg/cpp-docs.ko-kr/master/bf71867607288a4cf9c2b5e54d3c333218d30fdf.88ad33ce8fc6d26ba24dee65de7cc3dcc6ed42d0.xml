{"nodes":[{"pos":[12,37],"content":"vtordisp | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vtordisp | Microsoft Docs","pos":[0,25]}]},{"content":"vtordisp","pos":[652,660]},{"content":"C++ Specific","pos":[663,675]},{"content":"Controls the addition of the hidden vtordisp construction/destruction displacement member.","pos":[684,774]},{"content":"Syntax","pos":[783,789]},{"content":"Parameters","pos":[932,942]},{"content":"Pushes the current vtordisp setting on the internal compiler stack and sets the new vtordisp setting to <ph id=\"ph1\">`n`</ph>.","pos":[956,1064],"source":" Pushes the current vtordisp setting on the internal compiler stack and sets the new vtordisp setting to `n`."},{"content":"If <ph id=\"ph1\">`n`</ph> is not specified, the current vtordisp setting is not changed.","pos":[1066,1135],"source":"  If `n` is not specified, the current vtordisp setting is not changed."},{"content":"Removes the top record from the internal compiler stack and restores the vtordisp setting to the removed value.","pos":[1151,1262]},{"content":"Specifies the new value for the vtordisp setting.","pos":[1276,1325]},{"content":"Possible values are 0, 1 or 2, corresponding to the /vd0, /vd1, and /vd2 compiler options.","pos":[1326,1416]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>/vd (Disable Construction Displacements)<ept id=\"p1\">](../build/reference/vd-disable-construction-displacements.md)</ept>.","pos":[1417,1547],"source":" For more information, see [/vd (Disable Construction Displacements)](../build/reference/vd-disable-construction-displacements.md)."},{"content":"Equivalent to <ph id=\"ph1\">`#pragma vtordisp(1)`</ph>.","pos":[1562,1598],"source":" Equivalent to `#pragma vtordisp(1)`."},{"content":"Equivalent to <ph id=\"ph1\">`#pragma vtordisp(0)`</ph>.","pos":[1614,1650],"source":" Equivalent to `#pragma vtordisp(0)`."},{"content":"Remarks","pos":[1659,1666]},{"content":"The <ph id=\"ph1\">`vtordisp`</ph> pragma is applicable only to code that uses virtual bases.","pos":[1670,1743],"source":"The `vtordisp` pragma is applicable only to code that uses virtual bases."},{"content":"If a derived class overrides a virtual function that it inherits from a virtual base class, and if a constructor or destructor for the derived class calls that function using a pointer to the virtual base class, the compiler might introduce additional hidden <ph id=\"ph1\">`vtordisp`</ph> fields into classes with virtual bases.","pos":[1744,2053],"source":" If a derived class overrides a virtual function that it inherits from a virtual base class, and if a constructor or destructor for the derived class calls that function using a pointer to the virtual base class, the compiler might introduce additional hidden `vtordisp` fields into classes with virtual bases."},{"content":"The <ph id=\"ph1\">`vtordisp`</ph> pragma affects the layout of classes that follow it.","pos":[2060,2127],"source":"The `vtordisp` pragma affects the layout of classes that follow it."},{"content":"The /vd0, /vd1, and /vd2 options specify the same behavior for complete modules.","pos":[2128,2208]},{"content":"Specifying <ph id=\"ph1\">`0`</ph> or <ph id=\"ph2\">`off`</ph> suppresses the hidden <ph id=\"ph3\">`vtordisp`</ph> members.","pos":[2209,2274],"source":" Specifying `0` or `off` suppresses the hidden `vtordisp` members."},{"content":"Turn off <ph id=\"ph1\">`vtordisp`</ph> only if there is no possibility that the class's constructors and destructors call virtual functions on the object pointed to by the <ph id=\"ph2\">`this`</ph> pointer.","pos":[2275,2443],"source":" Turn off `vtordisp` only if there is no possibility that the class's constructors and destructors call virtual functions on the object pointed to by the `this` pointer."},{"pos":[2450,2550],"content":"Specifying <ph id=\"ph1\">`1`</ph> or <ph id=\"ph2\">`on`</ph>, the default, enables the hidden <ph id=\"ph3\">`vtordisp`</ph> members where they are necessary.","source":"Specifying `1` or `on`, the default, enables the hidden `vtordisp` members where they are necessary."},{"content":"Specifying <ph id=\"ph1\">`2`</ph> enables the hidden <ph id=\"ph2\">`vtordisp`</ph> members for all virtual bases with virtual functions.","pos":[2557,2655],"source":"Specifying `2` enables the hidden `vtordisp` members for all virtual bases with virtual functions."},{"content":"might be necessary to ensure correct performance of <ph id=\"ph1\">`dynamic_cast`</ph> on a partially-constructed object.","pos":[2671,2772],"source":" might be necessary to ensure correct performance of `dynamic_cast` on a partially-constructed object."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Compiler Warning (level 1) C4436<ept id=\"p1\">](../error-messages/compiler-warnings/compiler-warning-level-1-c4436.md)</ept>.","pos":[2773,2905],"source":" For more information, see [Compiler Warning (level 1) C4436](../error-messages/compiler-warnings/compiler-warning-level-1-c4436.md)."},{"pos":[2932,3006],"content":", with no arguments, restores the vtordisp setting to its initial setting."},{"content":"END C++ Specific","pos":[3130,3146]},{"content":"See Also","pos":[3157,3165]},{"content":"Pragma Directives and the __Pragma Keyword","pos":[3170,3212]}],"content":"---\ntitle: \"vtordisp | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc-pragma.vtordisp\"\n  - \"vtordisp_CPP\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"pragmas, vtordisp\"\n  - \"vtordisp pragma\"\nms.assetid: 05b7d73c-43fa-4b62-8c8a-170a9e427391\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vtordisp\n**C++ Specific**  \n  \n Controls the addition of the hidden vtordisp construction/destruction displacement member.  \n  \n## Syntax  \n  \n```cpp  \n#pragma vtordisp([push,] n)  \n#pragma vtordisp(pop)  \n#pragma vtordisp()  \n#pragma vtordisp([push,] {on | off})  \n```  \n  \n#### Parameters  \n `push`  \n Pushes the current vtordisp setting on the internal compiler stack and sets the new vtordisp setting to `n`.  If `n` is not specified, the current vtordisp setting is not changed.  \n  \n `pop`  \n Removes the top record from the internal compiler stack and restores the vtordisp setting to the removed value.  \n  \n `n`  \n Specifies the new value for the vtordisp setting. Possible values are 0, 1 or 2, corresponding to the /vd0, /vd1, and /vd2 compiler options. For more information, see [/vd (Disable Construction Displacements)](../build/reference/vd-disable-construction-displacements.md).  \n  \n `on`  \n Equivalent to `#pragma vtordisp(1)`.  \n  \n `off`  \n Equivalent to `#pragma vtordisp(0)`.  \n  \n## Remarks  \n The `vtordisp` pragma is applicable only to code that uses virtual bases. If a derived class overrides a virtual function that it inherits from a virtual base class, and if a constructor or destructor for the derived class calls that function using a pointer to the virtual base class, the compiler might introduce additional hidden `vtordisp` fields into classes with virtual bases.  \n  \n The `vtordisp` pragma affects the layout of classes that follow it. The /vd0, /vd1, and /vd2 options specify the same behavior for complete modules. Specifying `0` or `off` suppresses the hidden `vtordisp` members. Turn off `vtordisp` only if there is no possibility that the class's constructors and destructors call virtual functions on the object pointed to by the `this` pointer.  \n  \n Specifying `1` or `on`, the default, enables the hidden `vtordisp` members where they are necessary.  \n  \n Specifying `2` enables the hidden `vtordisp` members for all virtual bases with virtual functions.  `vtordisp(2)` might be necessary to ensure correct performance of `dynamic_cast` on a partially-constructed object. For more information, see [Compiler Warning (level 1) C4436](../error-messages/compiler-warnings/compiler-warning-level-1-c4436.md).  \n  \n `#pragma vtordisp()`, with no arguments, restores the vtordisp setting to its initial setting.  \n  \n```  \n#pragma vtordisp(push, 2)  \nclass GetReal : virtual public VBase { ... };  \n#pragma vtordisp(pop)  \n```  \n  \n **END C++ Specific**  \n  \n## See Also  \n [Pragma Directives and the __Pragma Keyword](../preprocessor/pragma-directives-and-the-pragma-keyword.md)"}