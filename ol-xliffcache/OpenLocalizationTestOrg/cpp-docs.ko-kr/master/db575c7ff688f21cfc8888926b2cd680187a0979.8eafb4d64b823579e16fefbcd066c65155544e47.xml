{"nodes":[{"pos":[12,44],"content":"Connection Maps | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Connection Maps | Microsoft Docs","pos":[0,32]}]},{"content":"Connection Maps","pos":[608,623]},{"content":"OLE controls are able to expose interfaces to other applications.","pos":[624,689]},{"content":"These interfaces only allow access from a container into that control.","pos":[690,760]},{"content":"If an OLE control wants to access external interfaces of other OLE objects, a connection point must be established.","pos":[761,876]},{"content":"This connection point allows a control outgoing access to external dispatch maps, such as event maps or notification functions.","pos":[877,1004]},{"content":"The Microsoft Foundation Class Library offers a programming model that supports connection points.","pos":[1011,1109]},{"content":"In this model, \"connection maps\" are used to designate interfaces or connection points for the OLE control.","pos":[1110,1217]},{"content":"Connection maps contain one macro for each connection point.","pos":[1218,1278]},{"content":"For more information on connection maps, see the <bpt id=\"p1\">[</bpt>CConnectionPoint<ept id=\"p1\">](../../mfc/reference/cconnectionpoint-class.md)</ept> class.","pos":[1279,1400],"source":" For more information on connection maps, see the [CConnectionPoint](../../mfc/reference/cconnectionpoint-class.md) class."},{"content":"Typically, a control will support just two connection points: one for events and one for property notifications.","pos":[1407,1519]},{"content":"These are implemented by the <ph id=\"ph1\">`COleControl`</ph> base class and require no additional work by the control writer.","pos":[1520,1627],"source":" These are implemented by the `COleControl` base class and require no additional work by the control writer."},{"content":"Any additional connection points you want to implement in your class must be added manually.","pos":[1628,1720]},{"content":"To support connection maps and points, MFC provides the following macros:","pos":[1721,1794]},{"content":"Connection Map Declaration and Demarcation","pos":[1804,1846]},{"content":"BEGIN_CONNECTION_PART","pos":[1868,1889]},{"content":"Declares an embedded class that implements an additional connection point (must be used in the class declaration).","pos":[1915,2029]},{"content":"END_CONNECTION_PART","pos":[2035,2054]},{"content":"Ends the declaration of a connection point (must be used in the class declaration).","pos":[2078,2161]},{"content":"CONNECTION_IID","pos":[2167,2181]},{"content":"Specifies the interface ID of the control's connection point.","pos":[2200,2261]},{"content":"DECLARE_CONNECTION_MAP","pos":[2267,2289]},{"content":"Declares that a connection map will be used in a class (must be used in the class declaration).","pos":[2316,2411]},{"content":"BEGIN_CONNECTION_MAP","pos":[2417,2437]},{"content":"Begins the definition of a connection map (must be used in the class implementation).","pos":[2462,2547]},{"content":"END_CONNECTION_MAP","pos":[2553,2571]},{"content":"Ends the definition of a connection map (must be used in the class implementation).","pos":[2594,2677]},{"content":"CONNECTION_PART","pos":[2683,2698]},{"content":"Specifies a connection point in the control's connection map.","pos":[2718,2779]},{"content":"The following functions assist a sink in establishing and disconnecting a connection using connection points:","pos":[2787,2896]},{"content":"Initialization/Termination of Connection Points","pos":[2906,2953]},{"content":"AfxConnectionAdvise","pos":[2975,2994]},{"content":"Establishes a connection between a source and a sink.","pos":[3018,3071]},{"content":"AfxConnectionUnadvise","pos":[3077,3098]},{"content":"Breaks a connection between a source and a sink.","pos":[3124,3172]},{"pos":[3221,3242],"content":"BEGIN_CONNECTION_PART"},{"pos":[3246,3401],"content":"Use the <ph id=\"ph1\">`BEGIN_CONNECTION_PART`</ph> macro to begin the definition of additional connection points beyond the event and property notification connection points.","source":"Use the `BEGIN_CONNECTION_PART` macro to begin the definition of additional connection points beyond the event and property notification connection points."},{"content":"Parameters","pos":[3474,3484]},{"content":"Specifies the name of the control class whose connection point this is.","pos":[3502,3573]},{"content":"localClass","pos":[3581,3591]},{"content":"Specifies the name of the local class that implements the connection point.","pos":[3596,3671]},{"content":"Remarks","pos":[3681,3688]},{"pos":[3692,4003],"content":"In the declaration (.h) file that defines the member functions for your class, start the connection point with the <ph id=\"ph1\">`BEGIN_CONNECTION_PART`</ph> macro, then add the <ph id=\"ph2\">`CONNECTION_IID`</ph> macro and any other member functions you wish to implement, and complete the connection point map with the <ph id=\"ph3\">`END_CONNECTION_PART`</ph> macro.","source":"In the declaration (.h) file that defines the member functions for your class, start the connection point with the `BEGIN_CONNECTION_PART` macro, then add the `CONNECTION_IID` macro and any other member functions you wish to implement, and complete the connection point map with the `END_CONNECTION_PART` macro."},{"pos":[4049,4068],"content":"END_CONNECTION_PART"},{"content":"Ends the declaration of your connection point.","pos":[4072,4118]},{"content":"Parameters","pos":[4179,4189]},{"content":"localClass","pos":[4194,4204]},{"content":"Specifies the name of the local class that implements the connection point.","pos":[4209,4284]},{"pos":[4325,4339],"content":"CONNECTION_IID"},{"pos":[4343,4495],"content":"Use between the <ph id=\"ph1\">`BEGIN_CONNECTION_PART`</ph> and <ph id=\"ph2\">`END_CONNECTION_PART`</ph> macros to define an interface ID for a connection point supported by your OLE control.","source":"Use between the `BEGIN_CONNECTION_PART` and `END_CONNECTION_PART` macros to define an interface ID for a connection point supported by your OLE control."},{"content":"Parameters","pos":[4544,4554]},{"content":"The interface ID of the interface called by the connection point.","pos":[4567,4632]},{"content":"Remarks","pos":[4642,4649]},{"content":"The <ph id=\"ph1\">`iid`</ph> argument is an interface ID used to identify the interface that the connection point will call on its connected sinks.","pos":[4653,4781],"source":"The `iid` argument is an interface ID used to identify the interface that the connection point will call on its connected sinks."},{"content":"For example:","pos":[4782,4794]},{"pos":[4812,4838],"content":"NVC_MFCConnectionPoints#10"},{"pos":[4894,4965],"content":"specifies a connection point that calls the <ph id=\"ph1\">`ISinkInterface`</ph> interface.","source":"specifies a connection point that calls the `ISinkInterface` interface."},{"pos":[5014,5036],"content":"DECLARE_CONNECTION_MAP"},{"pos":[5040,5185],"content":"Each <ph id=\"ph1\">`COleControl`</ph>-derived class in your program can provide a connection map to specify additional connection points that your control supports.","source":"Each `COleControl`-derived class in your program can provide a connection map to specify additional connection points that your control supports."},{"content":"Remarks","pos":[5237,5244]},{"content":"If your control supports additional points, use the <ph id=\"ph1\">`DECLARE_CONNECTION_MAP`</ph> macro at the end of your class declaration.","pos":[5248,5368],"source":"If your control supports additional points, use the `DECLARE_CONNECTION_MAP` macro at the end of your class declaration."},{"content":"Then, in the .cpp file that defines the member functions for the class, use the <ph id=\"ph1\">`BEGIN_CONNECTION_MAP`</ph> macro, <ph id=\"ph2\">`CONNECTION_PART`</ph> macros for each of the control's connection points, and the <ph id=\"ph3\">`END_CONNECTION_MAP`</ph> macro to declare the end of the connection map.","pos":[5369,5625],"source":" Then, in the .cpp file that defines the member functions for the class, use the `BEGIN_CONNECTION_MAP` macro, `CONNECTION_PART` macros for each of the control's connection points, and the `END_CONNECTION_MAP` macro to declare the end of the connection map."},{"pos":[5672,5692],"content":"BEGIN_CONNECTION_MAP"},{"pos":[5696,5834],"content":"Each <ph id=\"ph1\">`COleControl`</ph>-derived class in your program can provide a connection map to specify connection points that your control will support.","source":"Each `COleControl`-derived class in your program can provide a connection map to specify connection points that your control will support."},{"content":"Parameters","pos":[5903,5913]},{"content":"Specifies the name of the control class whose connection map this is.","pos":[5931,6000]},{"content":"theBase","pos":[6008,6015]},{"content":"Specifies the name of the base class of <ph id=\"ph1\">`theClass`</ph>.","pos":[6020,6071],"source":" Specifies the name of the base class of `theClass`."},{"content":"Remarks","pos":[6081,6088]},{"content":"In the implementation (.CPP) file that defines the member functions for your class, start the connection map with the <ph id=\"ph1\">`BEGIN_CONNECTION_MAP`</ph> macro, then add macro entries for each of your connection points using the <bpt id=\"p1\">[</bpt>CONNECTION_PART<ept id=\"p1\">](#connection_part)</ept> macro.","pos":[6092,6350],"source":"In the implementation (.CPP) file that defines the member functions for your class, start the connection map with the `BEGIN_CONNECTION_MAP` macro, then add macro entries for each of your connection points using the [CONNECTION_PART](#connection_part) macro."},{"content":"Finally, complete the connection map with the <bpt id=\"p1\">[</bpt>END_CONNECTION_MAP<ept id=\"p1\">](#end_connection_map)</ept> macro.","pos":[6351,6445],"source":" Finally, complete the connection map with the [END_CONNECTION_MAP](#end_connection_map) macro."},{"pos":[6490,6508],"content":"END_CONNECTION_MAP"},{"content":"Ends the definition of your connection map.","pos":[6512,6555]},{"pos":[6636,6651],"content":"CONNECTION_PART"},{"content":"Maps a connection point for your OLE control to a specific interface ID.","pos":[6655,6727]},{"content":"Parameters","pos":[6799,6809]},{"content":"Specifies the name of the control class whose connection point this is.","pos":[6827,6898]},{"content":"The interface ID of the interface called by the connection point.","pos":[6914,6979]},{"content":"localClass","pos":[6987,6997]},{"content":"Specifies the name of the local class that implements the connection point.","pos":[7002,7077]},{"content":"Remarks","pos":[7087,7094]},{"content":"For example:","pos":[7098,7110]},{"pos":[7128,7153],"content":"NVC_MFCConnectionPoints#2"},{"pos":[7211,7312],"content":"implements a connection map, with a connection point, that calls the <ph id=\"ph1\">`IID_ISinkInterface`</ph> interface .","source":"implements a connection map, with a connection point, that calls the `IID_ISinkInterface` interface ."},{"pos":[7358,7377],"content":"AfxConnectionAdvise"},{"pos":[7381,7504],"content":"Call this function to establish a connection between a source, specified by <ph id=\"ph1\">`pUnkSrc`</ph>, and a sink, specified by <ph id=\"ph2\">`pUnkSink`</ph>.","source":"Call this function to establish a connection between a source, specified by `pUnkSrc`, and a sink, specified by `pUnkSink`."},{"content":"Parameters","pos":[7677,7687]},{"content":"A pointer to the object that calls the interface.","pos":[7704,7753]},{"content":"A pointer to the object that implements the interface.","pos":[7774,7828]},{"content":"The interface ID of the connection.","pos":[7844,7879]},{"content":"<bpt id=\"p1\"> **</bpt>TRUE<ept id=\"p1\">**</ept> indicates that creating the connection should cause the reference count of <ph id=\"ph1\">`pUnkSink`</ph> to be incremented.","pos":[7900,8014],"source":" **TRUE** indicates that creating the connection should cause the reference count of `pUnkSink` to be incremented."},{"content":"<bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> indicates that the reference count should not be incremented.","pos":[8015,8086],"source":"**FALSE** indicates that the reference count should not be incremented."},{"content":"A pointer to a <ph id=\"ph1\">`DWORD`</ph> where a connection identifier is returned.","pos":[8108,8173],"source":" A pointer to a `DWORD` where a connection identifier is returned."},{"content":"This value should be passed as the <ph id=\"ph1\">`dwCookie`</ph> parameter to <ph id=\"ph2\">`AfxConnectionUnadvise`</ph> when disconnecting the connection.","pos":[8174,8291],"source":" This value should be passed as the `dwCookie` parameter to `AfxConnectionUnadvise` when disconnecting the connection."},{"content":"Return Value","pos":[8301,8313]},{"content":"Nonzero if a connection was established; otherwise 0.","pos":[8317,8370]},{"content":"Example","pos":[8380,8387]},{"pos":[8402,8427],"content":"NVC_MFCConnectionPoints#8"},{"pos":[8526,8547],"content":"AfxConnectionUnadvise"},{"pos":[8551,8675],"content":"Call this function to disconnect a connection between a source, specified by <ph id=\"ph1\">`pUnkSrc`</ph>, and a sink, specified by <ph id=\"ph2\">`pUnkSink`</ph>.","source":"Call this function to disconnect a connection between a source, specified by `pUnkSrc`, and a sink, specified by `pUnkSink`."},{"content":"Parameters","pos":[8845,8855]},{"content":"A pointer to the object that calls the interface.","pos":[8872,8921]},{"content":"A pointer to the object that implements the interface.","pos":[8942,8996]},{"content":"The interface ID of the connection point interface.","pos":[9012,9063]},{"content":"<bpt id=\"p1\"> **</bpt>TRUE<ept id=\"p1\">**</ept> indicates that disconnecting the connection should cause the reference count of <ph id=\"ph1\">`pUnkSink`</ph> to be decremented.","pos":[9084,9203],"source":" **TRUE** indicates that disconnecting the connection should cause the reference count of `pUnkSink` to be decremented."},{"content":"<bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> indicates that the reference count should not be decremented.","pos":[9204,9275],"source":"**FALSE** indicates that the reference count should not be decremented."},{"content":"The connection identifier returned by <ph id=\"ph1\">`AfxConnectionAdvise`</ph>.","pos":[9296,9356],"source":" The connection identifier returned by `AfxConnectionAdvise`."},{"content":"Return Value","pos":[9366,9378]},{"content":"Nonzero if a connection was disconnected; otherwise 0.","pos":[9382,9436]},{"content":"Example","pos":[9446,9453]},{"pos":[9468,9493],"content":"NVC_MFCConnectionPoints#9"},{"content":"See Also","pos":[9553,9561]},{"content":"Macros and Globals","pos":[9566,9584]}],"content":"---\ntitle: \"Connection Maps | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc.mfc.macros.maps\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"connection maps\"\nms.assetid: 1f25a9bc-6d09-4614-99cf-dc38e8ddfa73\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Connection Maps\nOLE controls are able to expose interfaces to other applications. These interfaces only allow access from a container into that control. If an OLE control wants to access external interfaces of other OLE objects, a connection point must be established. This connection point allows a control outgoing access to external dispatch maps, such as event maps or notification functions.  \n  \n The Microsoft Foundation Class Library offers a programming model that supports connection points. In this model, \"connection maps\" are used to designate interfaces or connection points for the OLE control. Connection maps contain one macro for each connection point. For more information on connection maps, see the [CConnectionPoint](../../mfc/reference/cconnectionpoint-class.md) class.  \n  \n Typically, a control will support just two connection points: one for events and one for property notifications. These are implemented by the `COleControl` base class and require no additional work by the control writer. Any additional connection points you want to implement in your class must be added manually. To support connection maps and points, MFC provides the following macros:  \n  \n### Connection Map Declaration and Demarcation  \n  \n|||  \n|-|-|  \n|[BEGIN_CONNECTION_PART](#begin_connection_part)|Declares an embedded class that implements an additional connection point (must be used in the class declaration).|  \n|[END_CONNECTION_PART](#end_connection_part)|Ends the declaration of a connection point (must be used in the class declaration).|  \n|[CONNECTION_IID](#connection_iid)|Specifies the interface ID of the control's connection point.|  \n|[DECLARE_CONNECTION_MAP](#declare_connection_map)|Declares that a connection map will be used in a class (must be used in the class declaration).|  \n|[BEGIN_CONNECTION_MAP](#begin_connection_map)|Begins the definition of a connection map (must be used in the class implementation).|  \n|[END_CONNECTION_MAP](#end_connection_map)|Ends the definition of a connection map (must be used in the class implementation).|  \n|[CONNECTION_PART](#connection_part)|Specifies a connection point in the control's connection map.|  \n  \n The following functions assist a sink in establishing and disconnecting a connection using connection points:  \n  \n### Initialization/Termination of Connection Points  \n  \n|||  \n|-|-|  \n|[AfxConnectionAdvise](#afxconnectionadvise)|Establishes a connection between a source and a sink.|  \n|[AfxConnectionUnadvise](#afxconnectionunadvise)|Breaks a connection between a source and a sink.|  \n  \n##  <a name=\"begin_connection_part\"></a>  BEGIN_CONNECTION_PART  \n Use the `BEGIN_CONNECTION_PART` macro to begin the definition of additional connection points beyond the event and property notification connection points.  \n  \n```   \nBEGIN_CONNECTION_PART(theClass, localClass)   \n```  \n  \n### Parameters  \n `theClass`  \n Specifies the name of the control class whose connection point this is.  \n  \n *localClass*  \n Specifies the name of the local class that implements the connection point.  \n  \n### Remarks  \n In the declaration (.h) file that defines the member functions for your class, start the connection point with the `BEGIN_CONNECTION_PART` macro, then add the `CONNECTION_IID` macro and any other member functions you wish to implement, and complete the connection point map with the `END_CONNECTION_PART` macro.  \n  \n##  <a name=\"end_connection_part\"></a>  END_CONNECTION_PART  \n Ends the declaration of your connection point.  \n  \n```   \nEND_CONNECTION_PART(localClass)   \n```  \n  \n### Parameters  \n *localClass*  \n Specifies the name of the local class that implements the connection point.  \n  \n##  <a name=\"connection_iid\"></a>  CONNECTION_IID  \n Use between the `BEGIN_CONNECTION_PART` and `END_CONNECTION_PART` macros to define an interface ID for a connection point supported by your OLE control.  \n  \n```   \nCONNECTION_IID(iid)   \n```  \n  \n### Parameters  \n `iid`  \n The interface ID of the interface called by the connection point.  \n  \n### Remarks  \n The `iid` argument is an interface ID used to identify the interface that the connection point will call on its connected sinks. For example:  \n  \n [!code-cpp[NVC_MFCConnectionPoints#10](../../mfc/codesnippet/cpp/connection-maps_1.h)]  \n  \n specifies a connection point that calls the `ISinkInterface` interface.  \n  \n##  <a name=\"declare_connection_map\"></a>  DECLARE_CONNECTION_MAP  \n Each `COleControl`-derived class in your program can provide a connection map to specify additional connection points that your control supports.  \n  \n```   \nDECLARE_CONNECTION_MAP() \n```  \n  \n### Remarks  \n If your control supports additional points, use the `DECLARE_CONNECTION_MAP` macro at the end of your class declaration. Then, in the .cpp file that defines the member functions for the class, use the `BEGIN_CONNECTION_MAP` macro, `CONNECTION_PART` macros for each of the control's connection points, and the `END_CONNECTION_MAP` macro to declare the end of the connection map.  \n  \n##  <a name=\"begin_connection_map\"></a>  BEGIN_CONNECTION_MAP  \n Each `COleControl`-derived class in your program can provide a connection map to specify connection points that your control will support.  \n  \n```   \nBEGIN_CONNECTION_MAP(theClass, theBase)   \n```  \n  \n### Parameters  \n `theClass`  \n Specifies the name of the control class whose connection map this is.  \n  \n *theBase*  \n Specifies the name of the base class of `theClass`.  \n  \n### Remarks  \n In the implementation (.CPP) file that defines the member functions for your class, start the connection map with the `BEGIN_CONNECTION_MAP` macro, then add macro entries for each of your connection points using the [CONNECTION_PART](#connection_part) macro. Finally, complete the connection map with the [END_CONNECTION_MAP](#end_connection_map) macro.  \n  \n##  <a name=\"end_connection_map\"></a>  END_CONNECTION_MAP  \n Ends the definition of your connection map.  \n  \n```   \nEND_CONNECTION_MAP()  \n```  \n  \n##  <a name=\"connection_part\"></a>  CONNECTION_PART  \n Maps a connection point for your OLE control to a specific interface ID.  \n  \n```   \nCONNECTION_PART(theClass, iid, localClass)   \n```  \n  \n### Parameters  \n `theClass`  \n Specifies the name of the control class whose connection point this is.  \n  \n `iid`  \n The interface ID of the interface called by the connection point.  \n  \n *localClass*  \n Specifies the name of the local class that implements the connection point.  \n  \n### Remarks  \n For example:  \n  \n [!code-cpp[NVC_MFCConnectionPoints#2](../../mfc/codesnippet/cpp/connection-maps_2.cpp)]  \n  \n implements a connection map, with a connection point, that calls the `IID_ISinkInterface` interface .  \n  \n##  <a name=\"afxconnectionadvise\"></a>  AfxConnectionAdvise  \n Call this function to establish a connection between a source, specified by `pUnkSrc`, and a sink, specified by `pUnkSink`.  \n  \n```   \nBOOL AFXAPI AfxConnectionAdvise(\n    LPUNKNOWN pUnkSrc, \n    REFIID iid, \n    LPUNKNOWN pUnkSink, \n    BOOL bRefCount, \n    DWORD FAR* pdwCookie);\n```  \n  \n### Parameters  \n `pUnkSrc`  \n A pointer to the object that calls the interface.  \n  \n `pUnkSink`  \n A pointer to the object that implements the interface.  \n  \n `iid`  \n The interface ID of the connection.  \n  \n `bRefCount`  \n **TRUE** indicates that creating the connection should cause the reference count of `pUnkSink` to be incremented. **FALSE** indicates that the reference count should not be incremented.  \n  \n `pdwCookie`  \n A pointer to a `DWORD` where a connection identifier is returned. This value should be passed as the `dwCookie` parameter to `AfxConnectionUnadvise` when disconnecting the connection.  \n  \n### Return Value  \n Nonzero if a connection was established; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFCConnectionPoints#8](../../mfc/codesnippet/cpp/connection-maps_3.cpp)]  \n  \n##  <a name=\"afxconnectionunadvise\"></a>  AfxConnectionUnadvise  \n Call this function to disconnect a connection between a source, specified by `pUnkSrc`, and a sink, specified by `pUnkSink`.  \n  \n```   \nBOOL AFXAPI AfxConnectionUnadvise(\n    LPUNKNOWN pUnkSrc, \n    REFIID iid, \n    LPUNKNOWN pUnkSink, \n    BOOL bRefCount, \n    DWORD dwCookie); \n```  \n  \n### Parameters  \n `pUnkSrc`  \n A pointer to the object that calls the interface.  \n  \n `pUnkSink`  \n A pointer to the object that implements the interface.  \n  \n `iid`  \n The interface ID of the connection point interface.  \n  \n `bRefCount`  \n **TRUE** indicates that disconnecting the connection should cause the reference count of `pUnkSink` to be decremented. **FALSE** indicates that the reference count should not be decremented.  \n  \n `dwCookie`  \n The connection identifier returned by `AfxConnectionAdvise`.  \n  \n### Return Value  \n Nonzero if a connection was disconnected; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFCConnectionPoints#9](../../mfc/codesnippet/cpp/connection-maps_4.cpp)]  \n  \n## See Also  \n [Macros and Globals](../../mfc/reference/mfc-macros-and-globals.md)\n"}