{"nodes":[{"pos":[12,55],"content":"_aligned_offset_malloc_dbg | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_aligned_offset_malloc_dbg | Microsoft Docs","pos":[0,43]}]},{"pos":[1033,1059],"content":"_aligned_offset_malloc_dbg","linkify":"_aligned_offset_malloc_dbg","nodes":[{"content":"_aligned_offset_malloc_dbg","pos":[0,26]}]},{"content":"Allocates memory on a specified alignment boundary (debug version only).","pos":[1060,1132]},{"pos":[1141,1147],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1326,1336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`size`</ph>","pos":[1340,1351],"source":"[in] `size`"},{"content":"The size of the requested memory allocation.","pos":[1355,1399]},{"content":"[in] <ph id=\"ph1\">`alignment`</ph>","pos":[1406,1422],"source":"[in] `alignment`"},{"content":"The alignment value, which must be an integer power of 2.","pos":[1426,1483]},{"content":"[in] <ph id=\"ph1\">`offset`</ph>","pos":[1490,1503],"source":"[in] `offset`"},{"content":"The offset into the memory allocation to force the alignment.","pos":[1507,1568]},{"content":"[in] <ph id=\"ph1\">`filename`</ph>","pos":[1575,1590],"source":"[in] `filename`"},{"content":"Pointer to the name of the source file that requested the allocation operation or NULL.","pos":[1594,1681]},{"content":"[in] <ph id=\"ph1\">`linenumber`</ph>","pos":[1688,1705],"source":"[in] `linenumber`"},{"content":"Line number in the source file where the allocation operation was requested or NULL.","pos":[1709,1793]},{"pos":[1802,1814],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1818,1901],"content":"A pointer to the memory block that was allocated or <ph id=\"ph1\">`NULL`</ph> if the operation failed.","source":"A pointer to the memory block that was allocated or `NULL` if the operation failed."},{"pos":[1910,1917],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`_aligned_offset_malloc_dbg`</ph> is a debug version of the <bpt id=\"p1\">[</bpt>_aligned_offset_malloc<ept id=\"p1\">](../../c-runtime-library/reference/aligned-offset-malloc.md)</ept> function.","pos":[1921,2070],"source":"`_aligned_offset_malloc_dbg` is a debug version of the [_aligned_offset_malloc](../../c-runtime-library/reference/aligned-offset-malloc.md) function."},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, each call to <ph id=\"ph1\">`_aligned_offset_malloc_dbg`</ph> is reduced to a call to <ph id=\"ph2\">`_aligned_offset_malloc`</ph>.","pos":[2071,2226],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, each call to `_aligned_offset_malloc_dbg` is reduced to a call to `_aligned_offset_malloc`."},{"content":"Both <ph id=\"ph1\">`_aligned_offset_malloc`</ph> and <ph id=\"ph2\">`_aligned_offset_malloc_dbg`</ph> allocate a block of memory in the base heap, but <ph id=\"ph3\">`_aligned_offset_malloc_dbg`</ph> offers several debugging features: buffers on either side of the user portion of the block to test for leaks, a block type parameter to track specific allocation types, and <ph id=\"ph4\">`filename`</ph><ph id=\"ph5\">/</ph><ph id=\"ph6\">`linenumber`</ph> information to determine the origin of allocation requests.","pos":[2227,2624],"source":" Both `_aligned_offset_malloc` and `_aligned_offset_malloc_dbg` allocate a block of memory in the base heap, but `_aligned_offset_malloc_dbg` offers several debugging features: buffers on either side of the user portion of the block to test for leaks, a block type parameter to track specific allocation types, and `filename`/`linenumber` information to determine the origin of allocation requests."},{"content":"<ph id=\"ph1\">`_aligned_offset_malloc_dbg`</ph> allocates the memory block with slightly more space than the requested <ph id=\"ph2\">`size`</ph>.","pos":[2631,2738],"source":"`_aligned_offset_malloc_dbg` allocates the memory block with slightly more space than the requested `size`."},{"content":"The additional space is used by the debug heap manager to link the debug memory blocks and to provide the application with debug header information and overwrite buffers.","pos":[2739,2909]},{"content":"When the block is allocated, the user portion of the block is filled with the value 0xCD and each of the overwrite buffers are filled with 0xFD.","pos":[2910,3054]},{"pos":[3061,3216],"content":"<ph id=\"ph1\">`_aligned_offset_malloc_dbg`</ph> is useful in situations where alignment is needed on a nested element; for example, if alignment was needed on a nested class.","source":"`_aligned_offset_malloc_dbg` is useful in situations where alignment is needed on a nested element; for example, if alignment was needed on a nested class."},{"pos":[3223,3354],"content":"<ph id=\"ph1\">`_aligned_offset_malloc_dbg`</ph> is based on <ph id=\"ph2\">`malloc`</ph>; for more information, see <bpt id=\"p1\">[</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept>.","source":"`_aligned_offset_malloc_dbg` is based on `malloc`; for more information, see [malloc](../../c-runtime-library/reference/malloc.md)."},{"content":"This function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`ENOMEM`</ph> if the memory allocation failed or if the requested size was greater than <ph id=\"ph3\">`_HEAP_MAXREQ`</ph>.","pos":[3361,3489],"source":"This function sets `errno` to `ENOMEM` if the memory allocation failed or if the requested size was greater than `_HEAP_MAXREQ`."},{"content":"For more information about <ph id=\"ph1\">`errno`</ph>, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[3490,3646],"source":" For more information about `errno`, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Also, <ph id=\"ph1\">`_aligned_offset_malloc`</ph> validates its parameters.","pos":[3647,3703],"source":" Also, `_aligned_offset_malloc` validates its parameters."},{"content":"If <ph id=\"ph1\">`alignment`</ph> is not a power of 2 or if <ph id=\"ph2\">`offset`</ph> is greater than or equal to <ph id=\"ph3\">`size`</ph> and nonzero, this function invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3704,3943],"source":" If `alignment` is not a power of 2 or if `offset` is greater than or equal to `size` and nonzero, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function returns <ph id=\"ph1\">`NULL`</ph> and sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[3944,4039],"source":" If execution is allowed to continue, this function returns `NULL` and sets `errno` to `EINVAL`."},{"pos":[4046,4241],"content":"For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <bpt id=\"p1\">[</bpt>CRT Debug Heap Details<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","source":"For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details)."},{"pos":[4248,4407],"content":"For information about the allocation block types and how they are used, see <bpt id=\"p1\">[</bpt>Types of blocks on the debug heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","source":"For information about the allocation block types and how they are used, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details)."},{"pos":[4416,4428],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4435,4442]},{"content":"Required header","pos":[4443,4458]},{"content":"<ph id=\"ph1\">\\&lt;</ph>crtdbg.h&gt;","pos":[4532,4543],"source":"\\<crtdbg.h>"},{"pos":[4551,4669],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4678,4687],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[4691,4786],"content":"Debug versions of <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"pos":[4795,4820],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[4824,4839]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[4840,4887],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4888,5013],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[5022,5030],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[5034,5093],"content":"<bpt id=\"p1\">[</bpt>Debug Routines<ept id=\"p1\">](../../c-runtime-library/debug-routines.md)</ept>","source":"[Debug Routines](../../c-runtime-library/debug-routines.md)"}],"content":"---\ntitle: \"_aligned_offset_malloc_dbg | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_aligned_offset_malloc_dbg\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_aligned_offset_malloc_dbg\"\n  - \"aligned_offset_malloc_dbg\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"_aligned_offset_malloc_dbg function\"\n  - \"aligned_offset_malloc_dbg function\"\nms.assetid: 6c242307-c59e-4d63-aae5-d8cbec8e021c\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _aligned_offset_malloc_dbg\nAllocates memory on a specified alignment boundary (debug version only).  \n  \n## Syntax  \n  \n```  \nvoid * _aligned_offset_malloc_dbg(  \n   size_t size,   \n   size_t alignment,   \n   size_t offset,  \n   const char *filename,  \n   int linenumber   \n);  \n```  \n  \n#### Parameters  \n [in] `size`  \n The size of the requested memory allocation.  \n  \n [in] `alignment`  \n The alignment value, which must be an integer power of 2.  \n  \n [in] `offset`  \n The offset into the memory allocation to force the alignment.  \n  \n [in] `filename`  \n Pointer to the name of the source file that requested the allocation operation or NULL.  \n  \n [in] `linenumber`  \n Line number in the source file where the allocation operation was requested or NULL.  \n  \n## Return Value  \n A pointer to the memory block that was allocated or `NULL` if the operation failed.  \n  \n## Remarks  \n `_aligned_offset_malloc_dbg` is a debug version of the [_aligned_offset_malloc](../../c-runtime-library/reference/aligned-offset-malloc.md) function. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, each call to `_aligned_offset_malloc_dbg` is reduced to a call to `_aligned_offset_malloc`. Both `_aligned_offset_malloc` and `_aligned_offset_malloc_dbg` allocate a block of memory in the base heap, but `_aligned_offset_malloc_dbg` offers several debugging features: buffers on either side of the user portion of the block to test for leaks, a block type parameter to track specific allocation types, and `filename`/`linenumber` information to determine the origin of allocation requests.  \n  \n `_aligned_offset_malloc_dbg` allocates the memory block with slightly more space than the requested `size`. The additional space is used by the debug heap manager to link the debug memory blocks and to provide the application with debug header information and overwrite buffers. When the block is allocated, the user portion of the block is filled with the value 0xCD and each of the overwrite buffers are filled with 0xFD.  \n  \n `_aligned_offset_malloc_dbg` is useful in situations where alignment is needed on a nested element; for example, if alignment was needed on a nested class.  \n  \n `_aligned_offset_malloc_dbg` is based on `malloc`; for more information, see [malloc](../../c-runtime-library/reference/malloc.md).  \n  \n This function sets `errno` to `ENOMEM` if the memory allocation failed or if the requested size was greater than `_HEAP_MAXREQ`. For more information about `errno`, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md). Also, `_aligned_offset_malloc` validates its parameters. If `alignment` is not a power of 2 or if `offset` is greater than or equal to `size` and nonzero, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function returns `NULL` and sets `errno` to `EINVAL`.  \n  \n For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details).  \n  \n For information about the allocation block types and how they are used, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_aligned_offset_malloc_dbg`|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)"}