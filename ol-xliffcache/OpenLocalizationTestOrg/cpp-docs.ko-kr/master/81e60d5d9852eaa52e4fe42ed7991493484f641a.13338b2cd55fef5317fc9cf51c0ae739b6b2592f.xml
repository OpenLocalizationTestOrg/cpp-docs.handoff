{"nodes":[{"pos":[12,45],"content":"SafeInt::SafeInt | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"SafeInt::SafeInt | Microsoft Docs","pos":[0,33]}]},{"content":"SafeInt::SafeInt","pos":[661,677]},{"pos":[678,708],"content":"Constructs a <ph id=\"ph1\">`SafeInt`</ph> object.","source":"Constructs a `SafeInt` object."},{"content":"Syntax","pos":[717,723]},{"content":"Parameters","pos":[984,994]},{"content":"[in]","pos":[998,1002]},{"content":"The value for the new <ph id=\"ph1\">`SafeInt`</ph> object.","pos":[1010,1049],"source":" The value for the new `SafeInt` object."},{"content":"This must be a parameter of type T or U, depending on the constructor.","pos":[1050,1120]},{"content":"[in]","pos":[1127,1131]},{"content":"The Boolean value for the new <ph id=\"ph1\">`SafeInt`</ph> object.","pos":[1139,1186],"source":" The Boolean value for the new `SafeInt` object."},{"content":"[in]","pos":[1193,1197]},{"content":"A <ph id=\"ph1\">`SafeInt`</ph> of type U. The new <ph id=\"ph2\">`SafeInt`</ph> object will have the same value as <ph id=\"ph3\">`u`</ph>, but will be of type T.","pos":[1205,1308],"source":" A `SafeInt` of type U. The new `SafeInt` object will have the same value as `u`, but will be of type T."},{"content":"U","pos":[1315,1316]},{"content":"The type of data stored in the <ph id=\"ph1\">`SafeInt`</ph>.","pos":[1320,1361],"source":" The type of data stored in the `SafeInt`."},{"content":"This can be either a Boolean, character, or integer type.","pos":[1362,1419]},{"content":"If it is an integer type, it can be signed or unsigned and be between 8 and 64 bits.","pos":[1420,1504]},{"content":"Remarks","pos":[1513,1520]},{"pos":[1524,1632],"content":"For more information about the template types <ph id=\"ph1\">`T`</ph> and <ph id=\"ph2\">`E`</ph>, see <bpt id=\"p1\">[</bpt>SafeInt Class<ept id=\"p1\">](../windows/safeint-class.md)</ept>.","source":"For more information about the template types `T` and `E`, see [SafeInt Class](../windows/safeint-class.md)."},{"content":"The input parameter for the constructor, <ph id=\"ph1\">`i`</ph> or <ph id=\"ph2\">`u`</ph>, must be a Boolean, character, or integer type.","pos":[1639,1738],"source":"The input parameter for the constructor, `i` or `u`, must be a Boolean, character, or integer type."},{"content":"If it is another type of parameter, the <ph id=\"ph1\">`SafeInt`</ph> class calls <bpt id=\"p1\">[</bpt>static_assert<ept id=\"p1\">](../cpp/static-assert.md)</ept> to indicate an invalid input parameter.","pos":[1739,1881],"source":" If it is another type of parameter, the `SafeInt` class calls [static_assert](../cpp/static-assert.md) to indicate an invalid input parameter."},{"content":"The constructors that use the template type <ph id=\"ph1\">`U`</ph> automatically convert the input parameter to the type specified by <ph id=\"ph2\">`T`</ph>.","pos":[1888,2007],"source":"The constructors that use the template type `U` automatically convert the input parameter to the type specified by `T`."},{"content":"The <ph id=\"ph1\">`SafeInt`</ph> class converts the data without any loss of data.","pos":[2008,2071],"source":" The `SafeInt` class converts the data without any loss of data."},{"content":"It reports to the error handler <ph id=\"ph1\">`E`</ph> if it cannot convert the data to type <ph id=\"ph2\">`T`</ph> without data loss.","pos":[2072,2168],"source":" It reports to the error handler `E` if it cannot convert the data to type `T` without data loss."},{"content":"If you create a <ph id=\"ph1\">`SafeInt`</ph> from a Boolean parameter, you need to initialize the value immediately.","pos":[2175,2272],"source":"If you create a `SafeInt` from a Boolean parameter, you need to initialize the value immediately."},{"content":"You cannot construct a <ph id=\"ph1\">`SafeInt`</ph> using the code <ph id=\"ph2\">`SafeInt&lt;bool&gt; sb;`</ph>.","pos":[2273,2341],"source":" You cannot construct a `SafeInt` using the code `SafeInt<bool> sb;`."},{"content":"This will generate a compile error.","pos":[2342,2377]},{"content":"Requirements","pos":[2386,2398]},{"pos":[2402,2423],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> safeint.h","source":"**Header:** safeint.h"},{"pos":[2430,2459],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> msl::utilities","source":"**Namespace:** msl::utilities"},{"content":"See Also","pos":[2468,2476]},{"content":"SafeInt Library","pos":[2481,2496]},{"content":"SafeInt Class","pos":[2534,2547]},{"content":"SafeIntException Class","pos":[2583,2605]}],"content":"---\ntitle: \"SafeInt::SafeInt | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"SafeInt::SafeInt\"\n  - \"SafeInt\"\n  - \"SafeInt.SafeInt\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"SafeInt class, constructor\"\nms.assetid: 39e6f632-a396-40e6-9ece-cc3d4c5a78ef\ncaps.latest.revision: 7\nauthor: \"ghogen\"\nms.author: \"ghogen\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# SafeInt::SafeInt\nConstructs a `SafeInt` object.  \n  \n## Syntax  \n  \n```  \nSafeInt() throw  \n  \nSafeInt (  \n   const T& i  \n) throw ()  \n  \nSafeInt (  \n   bool b  \n) throw ()  \n  \ntemplate <typename U>  \nSafeInt (  \n   const SafeInt <U, E>& u  \n)  \n  \nI template <typename U>  \nSafeInt (  \n   const U& i  \n)  \n```  \n  \n#### Parameters  \n [in] `i`  \n The value for the new `SafeInt` object. This must be a parameter of type T or U, depending on the constructor.  \n  \n [in] `b`  \n The Boolean value for the new `SafeInt` object.  \n  \n [in] `u`  \n A `SafeInt` of type U. The new `SafeInt` object will have the same value as `u`, but will be of type T.  \n  \n U  \n The type of data stored in the `SafeInt`. This can be either a Boolean, character, or integer type. If it is an integer type, it can be signed or unsigned and be between 8 and 64 bits.  \n  \n## Remarks  \n For more information about the template types `T` and `E`, see [SafeInt Class](../windows/safeint-class.md).  \n  \n The input parameter for the constructor, `i` or `u`, must be a Boolean, character, or integer type. If it is another type of parameter, the `SafeInt` class calls [static_assert](../cpp/static-assert.md) to indicate an invalid input parameter.  \n  \n The constructors that use the template type `U` automatically convert the input parameter to the type specified by `T`. The `SafeInt` class converts the data without any loss of data. It reports to the error handler `E` if it cannot convert the data to type `T` without data loss.  \n  \n If you create a `SafeInt` from a Boolean parameter, you need to initialize the value immediately. You cannot construct a `SafeInt` using the code `SafeInt<bool> sb;`. This will generate a compile error.  \n  \n## Requirements  \n **Header:** safeint.h  \n  \n **Namespace:** msl::utilities  \n  \n## See Also  \n [SafeInt Library](../windows/safeint-library.md)   \n [SafeInt Class](../windows/safeint-class.md)   \n [SafeIntException Class](../windows/safeintexception-class.md)"}