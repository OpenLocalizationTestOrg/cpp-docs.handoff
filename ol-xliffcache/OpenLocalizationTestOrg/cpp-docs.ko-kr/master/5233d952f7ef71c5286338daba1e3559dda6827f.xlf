<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5233d952f7ef71c5286338daba1e3559dda6827f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\intrinsics\arm-intrinsics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">526c3403e00acc4e82a38d8f5c6196c2198f77d3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0abee318e8abd7b7568760d7113fd4acad224a5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ARM Intrinsics | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ARM Intrinsics</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Visual C++ compiler makes the following intrinsics available on the ARM architecture.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information about ARM, see the <bpt id="p1">[</bpt>ARM Architecture Reference Manuals<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=522049)</ept> and <bpt id="p2">[</bpt>ARM Assembler Tools Guide<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkId=246102)</ept> on the ARM Infocenter website.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>NEON</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The NEON vector instruction set extensions for ARM provide Single Instruction Multiple Data (SIMD) capabilities that resemble those in the MMX and SSE vector instruction sets that are common to x86 and x64 architecture processors.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>NEON intrinsics are supported, as provided in the header file <ph id="ph1">`arm_neon.h`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Visual C++ compiler support for NEON intrinsics resembles that of the ARM compiler, which is documented in Appendix G of the <bpt id="p1">[</bpt>ARM Compiler toolchain, Version 4.1 Compiler Reference<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=251083)</ept> on the ARM Infocenter website.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The primary difference between the Visual C++ compiler and the ARM compiler is that the Visual C++ compiler adds <ph id="ph1">`_ex`</ph> variants of the <ph id="ph2">`vldX`</ph> and <ph id="ph3">`vstX`</ph> vector load and store instructions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_ex`</ph> variants take an additional parameter that specifies the alignment of the pointer argument but are otherwise identical to their non-<ph id="ph2">`_ex`</ph> counterparts.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>ARM-specific Intrinsics Listing</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Function Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Instruction</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Function Prototype</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>_arm_smlal</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>SMLAL</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>__int64 _arm_smlal(<ph id="ph1">\_</ph>_int64 _RdHiLo, int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>_arm_umlal</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>UMLAL</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>unsigned __int64 _arm_umlal(unsigned <ph id="ph1">\_</ph>_int64 _RdHiLo, unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>_arm_clz</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CLZ</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_clz(unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>_arm_qadd</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>QADD</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>int _arm_qadd(int _Rm, int _Rn)</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>_arm_qdadd</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>QDADD</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>int _arm_qdadd(int _Rm, int _Rn)</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>_arm_qdsub</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>QDSUB</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>int _arm_qdsub(int _Rm, int _Rn)</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>_arm_qsub</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>QSUB</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>int _arm_qsub(int _Rm, int _Rn)</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>_arm_smlabb</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>SMLABB</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>int _arm_smlabb(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>_arm_smlabt</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>SMLABT</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>int _arm_smlabt(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>_arm_smlatb</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>SMLATB</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>int _arm_smlatb(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>_arm_smlatt</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>SMLATT</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>int _arm_smlatt(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>_arm_smlalbb</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>SMLALBB</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>__int64 _arm_smlalbb(<ph id="ph1">\_</ph>_int64 _RdHiLo, int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>_arm_smlalbt</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>SMLALBT</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>__int64 _arm_smlalbt(<ph id="ph1">\_</ph>_int64 _RdHiLo, int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>_arm_smlaltb</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>SMLALTB</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>__int64 _arm_smlaltb(<ph id="ph1">\_</ph>_int64 _RdHiLo, int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>_arm_smlaltt</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>SMLALTT</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>__int64 _arm_smlaltt(<ph id="ph1">\_</ph>_int64 _RdHiLo, int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>_arm_smlawb</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>SMLAWB</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>int _arm_smlawb(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>_arm_smlawt</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>SMLAWT</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>int _arm_smlawt(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>_arm_smulbb</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>SMULBB</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>int _arm_smulbb(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>_arm_smulbt</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>SMULBT</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>int _arm_smulbt(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>_arm_smultb</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>SMULTB</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>int _arm_smultb(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>_arm_smultt</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>SMULTT</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>int _arm_smultt(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>_arm_smulwb</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>SMULWB</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>int _arm_smulwb(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>_arm_smulwt</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>SMULWT</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>int _arm_smulwt(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>_arm_sadd16</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>SADD16</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>int _arm_sadd16(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>_arm_sadd8</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>SADD8</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>int _arm_sadd8(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>_arm_sasx</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>SASX</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>int _arm_sasx(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>_arm_ssax</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>SSAX</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>int _arm_ssax(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>_arm_ssub16</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>SSUB16</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>int _arm_ssub16(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>_arm_ssub8</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>SSUB8</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>int _arm_ssub8(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>_arm_shadd16</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>SHADD16</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>int _arm_shadd16(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>_arm_shadd8</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>SHADD8</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>int _arm_shadd8(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>_arm_shasx</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>SHASX</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>int _arm_shasx(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>_arm_shsax</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>SHSAX</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>int _arm_shsax(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>_arm_shsub16</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>SHSUB16</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>int _arm_shsub16(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>_arm_shsub8</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>SHSUB8</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>int _arm_shsub8(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>_arm_qadd16</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>QADD16</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>int _arm_qadd16(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>_arm_qadd8</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>QADD8</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>int _arm_qadd8(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>_arm_qasx</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>QASX</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>int _arm_qasx(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>_arm_qsax</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>QSAX</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>int _arm_qsax(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>_arm_qsub16</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>QSUB16</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>int _arm_qsub16(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>_arm_qsub8</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>QSUB8</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>int _arm_qsub8(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>_arm_uadd16</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>UADD16</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uadd16(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>_arm_uadd8</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>UADD8</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uadd8(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>_arm_uasx</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>UASX</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uasx(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>_arm_usax</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>USAX</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_usax(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>_arm_usub16</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>USUB16</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_usub16(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>_arm_usub8</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>USUB8</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_usub8(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>_arm_uhadd16</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>UHADD16</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uhadd16(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>_arm_uhadd8</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>UHADD8</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uhadd8(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>_arm_uhasx</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>UHASX</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uhasx(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>_arm_uhsax</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>UHSAX</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uhsax(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>_arm_uhsub16</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>UHSUB16</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uhsub16(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>_arm_uhsub8</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>UHSUB8</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uhsub8(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>_arm_uqadd16</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>UQADD16</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uqadd16(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>_arm_uqadd8</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>UQADD8</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uqadd8(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>_arm_uqasx</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>UQASX</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uqasx(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>_arm_uqsax</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>UQSAX</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uqsax(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>_arm_uqsub16</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>UQSUB16</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uqsub16(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>_arm_uqsub8</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>UQSUB8</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uqsub8(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>_arm_sxtab</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>SXTAB</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>int _arm_sxtab(int _Rn, int _Rm, unsigned int _Rotation)</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>_arm_sxtab16</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>SXTAB16</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>int _arm_sxtab16(int _Rn, int _Rm, unsigned int _Rotation)</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>_arm_sxtah</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>SXTAH</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>int _arm_sxtah(int _Rn, int _Rm, unsigned int _Rotation)</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>_arm_uxtab</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>UXTAB</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uxtab(unsigned int _Rn, unsigned int _Rm, unsigned int _Rotation)</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>_arm_uxtab16</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>UXTAB16</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uxta16b(unsigned int _Rn, unsigned int _Rm, unsigned int _Rotation)</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>_arm_uxtah</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>UXTAH</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uxtah(unsigned int _Rn, unsigned int _Rm, unsigned int _Rotation)</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>_arm_sxtb</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>SXTB</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>int _arm_sxtb(int _Rn, unsigned int _Rotation)</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>_arm_sxtb16</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>SXTB16</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>int _arm_sxtb16(int _Rn, unsigned int _Rotation)</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>_arm_sxth</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>SXTH</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>int _arm_sxth(int _Rn, unsigned int _Rotation)</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>_arm_uxtb</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>UXTB</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uxtb(unsigned int _Rn, unsigned int _Rotation)</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>_arm_uxtb16</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>UXTB16</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uxtb16(unsigned int _Rn, unsigned int _Rotation)</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>_arm_uxth</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>UXTH</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_uxth(unsigned int _Rn, unsigned int _Rotation)</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>_arm_pkhbt</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>PKHBT</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>int _arm_pkhbt(int _Rn, int _Rm, unsigned int _Lsl_imm)</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>_arm_pkhtb</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>PKHTB</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>int _arm_pkhtb(int _Rn, int _Rm, unsigned int _Asr_imm)</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>_arm_usad8</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>USAD8</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_usad8(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>_arm_usada8</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>USADA8</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_usada8(unsigned int _Rn, unsigned int _Rm, unsigned int _Ra)</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>_arm_ssat</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>SSAT</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>int _arm_ssat(unsigned int _Sat_imm, _int _Rn, _ARMINTR_SHIFT_T _Shift_type, unsigned int _Shift_imm)</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>_arm_usat</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>USAT</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>int _arm_usat(unsigned int _Sat_imm, _int _Rn, _ARMINTR_SHIFT_T _Shift_type, unsigned int _Shift_imm)</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>_arm_ssat16</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>SSAT16</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>int _arm_ssat16(unsigned int _Sat_imm, _int _Rn)</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>_arm_usat16</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>USAT16</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>int _arm_usat16(unsigned int _Sat_imm, _int _Rn)</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>_arm_rev</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>REV</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_rev(unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>_arm_rev16</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>REV16</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_rev16(unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>_arm_revsh</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>REVSH</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_revsh(unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>_arm_smlad</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>SMLAD</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>int _arm_smlad(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>_arm_smladx</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>SMLADX</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>int _arm_smladx(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>_arm_smlsd</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>SMLSD</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>int _arm_smlsd(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>_arm_smlsdx</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>SMLSDX</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>int _arm_smlsdx(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>_arm_smmla</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>SMMLA</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>int _arm_smmla(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>_arm_smmlar</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>SMMLAR</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>int _arm_smmlar(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>_arm_smmls</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>SMMLS</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>int _arm_smmls(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>_arm_smmlsr</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>SMMLSR</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>int _arm_smmlsr(int _Rn, int _Rm, int _Ra)</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>_arm_smmul</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>SMMUL</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>int _arm_smmul(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>_arm_smmulr</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>SMMULR</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>int _arm_smmulr(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>_arm_smlald</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>SMLALD</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>__int64 _arm_smlald(<ph id="ph1">\_</ph>_int64 _RdHiLo, int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>_arm_smlaldx</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>SMLALDX</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>__int64 _arm_smlaldx(<ph id="ph1">\_</ph>_int64 _RdHiLo, int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>_arm_smlsld</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>SMLSLD</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>__int64 _arm_smlsld(<ph id="ph1">\_</ph>_int64 _RdHiLo, int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>_arm_smlsldx</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>SMLSLDX</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>__int64 _arm_smlsldx(<ph id="ph1">\_</ph>_int64 _RdHiLo, int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>_arm_smuad</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>SMUAD</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>int _arm_smuad(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>_arm_smuadx</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>SMUADX</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>int _arm_muadxs(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>_arm_smusd</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>SMUSD</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>int _arm_smusd(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>_arm_smusdx</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>SMUSDX</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>int _arm_smusdx(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>_arm_smull</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>SMULL</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>__int64 _arm_smull(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>_arm_umull</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>UMULL</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>unsigned __int64 _arm_umull(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>_arm_umaal</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>UMAAL</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>unsigned __int64 _arm_umaal(unsigned int _RdLo, unsigned int _RdHi, unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>_arm_bfc</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>BFC</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_bfc(unsigned int _Rd, unsigned int _Lsb, unsigned int _Width)</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>_arm_bfi</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>BFI</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_bfi(unsigned int _Rd, unsigned int _Rn, unsigned int _Lsb, unsigned int _Width)</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>_arm_rbit</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>RBIT</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_rbit(unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>_arm_sbfx</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>SBFX</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>int _arm_sbfx(int _Rn, unsigned int _Lsb, unsigned int _Width)</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>_arm_ubfx</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>UBFX</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_ubfx(unsigned int _Rn, unsigned int _Lsb, unsigned int _Width)</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>_arm_sdiv</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>SDIV</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>int _arm_sdiv(int _Rn, int _Rm)</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>_arm_udiv</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>UDIV</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>unsigned int _arm_udiv(unsigned int _Rn, unsigned int _Rm)</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>__cps</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>CPS</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>void __cps(unsigned int _Ops, unsigned int _Flags, unsigned int _Mode)</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>__dmb</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>DMB</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>void __dmb(unsigned int <ph id="ph1">`_Type`</ph>)</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Inserts a memory barrier operation into the instruction stream.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The parameter <ph id="ph1">`_Type`</ph> specifies the kind of restriction that the barrier enforces.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>For more information about the kinds of restrictions that can be enforced, see <bpt id="p1">[</bpt>Memory Barrier Restrictions<ept id="p1">](#BarrierRestrictions)</ept>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>__dsb</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>DSB</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>void __dsb(unsigned int _Type)</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Inserts a memory barrier operation into the instruction stream.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The parameter <ph id="ph1">`_Type`</ph> specifies the kind of restriction that the barrier enforces.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>For more information about the kinds of restrictions that can be enforced, see <bpt id="p1">[</bpt>Memory Barrier Restrictions<ept id="p1">](#BarrierRestrictions)</ept>.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>__isb</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>ISB</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>void __isb(unsigned int _Type)</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Inserts a memory barrier operation into the instruction stream.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The parameter <ph id="ph1">`_Type`</ph> specifies the kind of restriction that the barrier enforces.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>For more information about the kinds of restrictions that can be enforced, see <bpt id="p1">[</bpt>Memory Barrier Restrictions<ept id="p1">](#BarrierRestrictions)</ept>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>__emit</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>void __emit(unsigned <ph id="ph1">\_</ph>_int32 opcode)</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Inserts a specified instruction into the stream of instructions that is output by the compiler.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`opcode`</ph> must be a constant expression that is known at compile time.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The size of an instruction word is 16 bits and the most significant 16 bits of <ph id="ph1">`opcode`</ph> are ignored.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The compiler makes no attempt to interpret the contents of <ph id="ph1">`opcode`</ph> and does not guarantee a CPU or memory state before the inserted instruction is executed.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The compiler assumes that the CPU and memory states are unchanged after the inserted instruction is executed.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Therefore, instructions that do change state can have a detrimental impact on normal code that is generated by the compiler.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>For this reason, use <ph id="ph1">`emit`</ph> only to insert instructions that affect a CPU state that the compiler does not normally process—for example, coprocessor state—or to implement functions that are declared by using <ph id="ph2">`declspec(naked)`</ph>.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>__hvc</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>HVC</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>unsigned int __hvc(unsigned int, ...)</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>__iso_volatile_load16</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>__int16 <ph id="ph1">\_</ph>_iso_volatile_load16(const volatile <ph id="ph2">\_</ph>_int16 *)</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>__iso_volatile_load/store instrinsics<ept id="p1">](#IsoVolatileLoadStore)</ept>.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>__iso_volatile_load32</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>__int32 <ph id="ph1">\_</ph>_iso_volatile_load32(const volatile <ph id="ph2">\_</ph>_int32 *)</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>__iso_volatile_load/store instrinsics<ept id="p1">](#IsoVolatileLoadStore)</ept>.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>__iso_volatile_load64</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>__int64 <ph id="ph1">\_</ph>_iso_volatile_load64(const volatile <ph id="ph2">\_</ph>_int64 *)</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>__iso_volatile_load/store instrinsics<ept id="p1">](#IsoVolatileLoadStore)</ept>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>__iso_volatile_load8</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>__int8 <ph id="ph1">\_</ph>_iso_volatile_load8(const volatile <ph id="ph2">\_</ph>_int8 *)</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>__iso_volatile_load/store instrinsics<ept id="p1">](#IsoVolatileLoadStore)</ept>.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>__iso_volatile_store16</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>void __iso_volatile_store16(volatile <ph id="ph1">\_</ph>_int16 *, <ph id="ph2">\_</ph>_int16)</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>__iso_volatile_load/store instrinsics<ept id="p1">](#IsoVolatileLoadStore)</ept>.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>__iso_volatile_store32</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>void __iso_volatile_store32(volatile <ph id="ph1">\_</ph>_int32 *, <ph id="ph2">\_</ph>_int32)</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>__iso_volatile_load/store instrinsics<ept id="p1">](#IsoVolatileLoadStore)</ept>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>__iso_volatile_store64</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>void __iso_volatile_store64(volatile <ph id="ph1">\_</ph>_int64 *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>__iso_volatile_load/store instrinsics<ept id="p1">](#IsoVolatileLoadStore)</ept>.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>__iso_volatile_store8</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>void __iso_volatile_store8(volatile <ph id="ph1">\_</ph>_int8 *, <ph id="ph2">\_</ph>_int8)</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>__iso_volatile_load/store instrinsics<ept id="p1">](#IsoVolatileLoadStore)</ept>.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>__ldrexd</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>LDREXD</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>__int64 <ph id="ph1">\_</ph>_ldrexd(const volatile <ph id="ph2">\_</ph>_int64 *)</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>__prefetch</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>PLD</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>void __cdecl <ph id="ph1">\_</ph>_prefetch(const void *)</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Provides a <ph id="ph1">`PLD`</ph> memory hint to the system that memory at or near the specified address may be accessed soon.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Some systems may choose to optimize for that memory access pattern to increase runtime performance.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>However, from the C++ language point of view, the function has no observable effect, and may do nothing at all.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>__rdpmccntr64</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>unsigned __int64 <ph id="ph1">\_</ph>_rdpmccntr64(void)</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>__sev</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>SEV</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>void __sev(void)</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>__static_assert</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>void __static_assert(int, const char *)</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>__swi</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>SVC</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>unsigned int __swi(unsigned int, ...)</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>__trap</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>BKPT</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>int __trap(int, ...)</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>__wfe</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>WFE</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>void __wfe(void)</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>__wfi</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>WFI</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>void __wfi(void)</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>_AddSatInt</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>QADD</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>int _AddSatInt(int, int)</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>_CopyDoubleFromInt64</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>double _CopyDoubleFromInt64(<ph id="ph1">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>_CopyFloatFromInt32</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>float _CopyFloatFromInt32(<ph id="ph1">\_</ph>_int32)</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>_CopyInt32FromFloat</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>__int32 _CopyInt32FromFloat(float)</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>_CopyInt64FromDouble</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>__int64 _CopyInt64FromDouble(double)</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>_CountLeadingOnes</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>unsigned int _CountLeadingOnes(unsigned long)</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>_CountLeadingOnes64</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>unsigned int _CountLeadingOnes64(unsigned <ph id="ph1">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>_CountLeadingSigns</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>unsigned int _CountLeadingSigns(long)</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>_CountLeadingSigns64</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>unsigned int _CountLeadingSigns64(<ph id="ph1">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>_CountLeadingZeros</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>unsigned int _CountLeadingZeros(unsigned long)</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>_CountLeadingZeros64</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>unsigned int _CountLeadingZeros64(unsigned <ph id="ph1">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>_CountOneBits</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>unsigned int _CountOneBits(unsigned long)</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>_CountOneBits64</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>unsigned int _CountOneBits64(unsigned <ph id="ph1">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>_DAddSatInt</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>QDADD</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>int _DAddSatInt(int, int)</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>_DSubSatInt</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>QDSUB</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>int _DSubSatInt(int, int)</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>_isunordered</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>int _isunordered(double, double)</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>_isunorderedf</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>int _isunorderedf(float, float)</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>_MoveFromCoprocessor</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>MRC</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>unsigned int _MoveFromCoprocessor(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Reads data from an ARM coprocessor by using the coprocessor data transfer instructions.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>_MoveFromCoprocessor, _MoveFromCoprocessor2<ept id="p1">](#MoveFromCo)</ept>.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>_MoveFromCoprocessor2</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>MRC2</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>unsigned int _MoveFromCoprocessor2(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Reads data from an ARM coprocessor by using the coprocessor data transfer instructions.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>_MoveFromCoprocessor, _MoveFromCoprocessor2<ept id="p1">](#MoveFromCo)</ept>.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>_MoveFromCoprocessor64</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>MRRC</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>unsigned __int64 _MoveFromCoprocessor64(unsigned int, unsigned int, unsigned int)</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Reads data from an ARM coprocessor by using the coprocessor data transfer instructions.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>_MoveFromCoprocessor64<ept id="p1">](#MoveFromCo64)</ept>.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>_MoveToCoprocessor</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>MCR</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>void _MoveToCoprocessor(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Reads data from an ARM coprocessor by using the coprocessor data transfer instructions.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>_MoveToCoprocessor, _MoveToCoprocessor2<ept id="p1">](#MoveToCo)</ept>.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>_MoveToCoprocessor2</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>MCR2</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>void _MoveToCoprocessor2(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Reads data from an ARM coprocessor by using the coprocessor data transfer instructions.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>_MoveToCoprocessor, _MoveToCoprocessor2<ept id="p1">](#MoveToCo)</ept>.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>_MoveToCoprocessor64</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>MCRR</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>void _MoveToCoprocessor64(unsigned <ph id="ph1">\_</ph>_int64, unsigned int, unsigned int, unsigned int)</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Reads data from an ARM coprocessor by using the coprocessor data transfer instructions.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>_MoveToCoprocessor64<ept id="p1">](#MoveToCo64)</ept>.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>_MulHigh</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>long _MulHigh(long, long)</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>_MulUnsignedHigh</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>unsigned long _MulUnsignedHigh(unsigned long, unsigned long)</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>_ReadBankedReg</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>MRS</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>int _ReadBankedReg(int _Reg)</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>_ReadStatusReg</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>MRS</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>int _ReadStatusReg(int)</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>_SubSatInt</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>QSUB</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>int _SubSatInt(int, int)</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>_WriteBankedReg</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>MSR</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>void _WriteBankedReg(int _Value, int _Reg)</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>_WriteStatusReg</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>MSR</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>void _WriteStatusReg(int, int, int)</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>NEON<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Memory Barrier Restrictions</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>The intrinsic functions <ph id="ph1">`__dmb`</ph> (data memory barrier), <ph id="ph2">`__dsb`</ph> (data synchronization barrier), and <ph id="ph3">`__isb`</ph> (instruction synchronization barrier) use the following predefined values to specify the memory barrier restriction in terms of the sharing domain and kind of access that are affected by the operation.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Restriction Value</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>_ARM_BARRIER_SY</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Full system, reads and writes.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>_ARM_BARRIER_ST</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Full system, writes only.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>_ARM_BARRIER_ISH</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Inner sharable, reads and writes.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>_ARM_BARRIER_ISHST</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Inner sharable, writes only.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>_ARM_BARRIER_NSH</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Non-sharable, reads and writes.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>_ARM_BARRIER_NSHST</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Non-sharable, writes only.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>_ARM_BARRIER_OSH</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Outer sharable, reads and writes.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>_ARM_BARRIER_OSHST</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Outer sharable, writes only.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`__isb`</ph> intrinsic, the only restriction that is currently valid is _ARM_BARRIER_SY; all other values are reserved by the architecture.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>__iso_volatile_load/store instrinsics</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>These intrinsic functions explicitly perform loads and stores that are not subject to compiler optimizations.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>The address of a memory location to read from or write to.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>(store intrinsics only)</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>The value to write to the specified memory location.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Return Value (load intrinsics only)</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The value of the memory location that is specified by <ph id="ph1">`Location`</ph>.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`__iso_volatile_load8/16/32/64`</ph> and <ph id="ph2">`__iso_volatile_store8/16/32/64`</ph> intrinsics to explicitly perform memory accesses that are not subject to compiler optimizations.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>The compiler cannot remove, synthetize, or change the relative order of these operations, but it does not generate implicit hardware memory barriers.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Therefore, the hardware may still reorder the observable memory accesses across multiple threads.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>More precisely, these intrinsics are equivalent to the following expressions as compiled under <bpt id="p1">**</bpt>/volatile:iso<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Notice that the intrinsics take volatile pointers to accommodate volatile variables.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>However, there is no requirement or recommendation to use volatile pointers as arguments; the semantics of these operations are exactly the same if a regular, non-volatile type is used.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>/volatile:iso<ept id="p1">**</ept> command-line argument, see <bpt id="p2">[</bpt>/volatile (volatile Keyword Interpretation)<ept id="p2">](../build/reference/volatile-volatile-keyword-interpretation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>_MoveFromCoprocessor, _MoveFromCoprocessor2</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>These intrinsic functions read data from ARM coprocessors by using the coprocessor data transfer instructions.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Coprocessor number in the range 0 to 15.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>Coprocessor-specific opcode in the range 0 to 7</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Coprocessor register number, in the range 0 to 15, that specifies the first operand to the instruction.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Coprocessor register number, in the range 0 to 15, that specifies an additional source or destination operand.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Additional coprocessor-specific opcode in the range 0 to 7.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>The value that is read from the coprocessor.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The values of all five parameters of this intrinsic must be constant expressions that are known at compile time.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>uses the MRC instruction; <ph id="ph1">`_MoveFromCoprocessor2`</ph> uses MRC2.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>The parameters correspond to bitfields that are encoded directly into the instruction word.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>The interpretation of the parameters is coprocessor-dependent.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>For more information, see the manual for the coprocessor in question.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>_MoveFromCoprocessor64</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Reads data from ARM coprocessors by using the coprocessor data transfer instructions.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Coprocessor number in the range 0 to 15.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Coprocessor-specific opcode in the range 0 to 15.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Coprocessor register number, in the range 0 to 15, that specifies an additional source or destination operand.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Returns Value</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>The value that is read from the coprocessor.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>The values of all three parameters of this intrinsic must be constant expressions that are known at compile time.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>uses the MRRC instruction.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>The parameters correspond to bitfields that are encoded directly into the instruction word.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>The interpretation of the parameters is coprocessor-dependent.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>For more information, see the manual for the coprocessor in question.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>_MoveToCoprocessor, _MoveToCoprocessor2</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>These intrinsic functions write data to ARM coprocessors by using the coprocessor data transfer instructions.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>The value to be written to the coprocessor.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Coprocessor number in the range 0 to 15.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Coprocessor-specific opcode in the range 0 to 7.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Coprocessor register number, in the range 0 to 15, that specifies the first operand to the instruction.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Coprocessor register number, in the range 0 to 15, that specifies an additional source or destination operand.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Additional coprocessor-specific opcode in the range 0 to 7.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>None.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>The values of the <ph id="ph1">`coproc`</ph>, <ph id="ph2">`opcode1`</ph>, <ph id="ph3">`crn`</ph>, <ph id="ph4">`crm`</ph>, and <ph id="ph5">`opcode2`</ph> parameters of this intrinsic must be constant expressions that are known at compile time.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>uses the MCR instruction; <ph id="ph1">`_MoveToCoprocessor2`</ph> uses MCR2.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>The parameters correspond to bitfields that are encoded directly into the instruction word.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>The interpretation of the parameters is coprocessor-dependent.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>For more information, see the manual for the coprocessor in question.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>_MoveToCoprocessor64</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>These intrinsic functions write data to ARM coprocessors by using the coprocessor data transfer instructions.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Coprocessor number in the range 0 to 15.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Coprocessor-specific opcode in the range 0 to 15.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Coprocessor register number, in the range 0 to 15, that specifies an additional source or destination operand.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>None.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>The values of the <ph id="ph1">`coproc`</ph>, <ph id="ph2">`opcode1`</ph>, and <ph id="ph3">`crm`</ph> parameters of this intrinsic must be constant expressions that are known at compile time.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>uses the MCRR instruction.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>The parameters correspond to bitfields that are encoded directly into the instruction word.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>The interpretation of the parameters is coprocessor-dependent.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>For more information, see the manual for the coprocessor in question.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>ARM Support for Intrinsics from Other Architectures</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>The following table lists intrinsics from other architectures that are supported on ARM platforms.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Where the behavior of an intrinsic on ARM differs from its behavior on other hardware architectures, additional details are noted.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Function Name</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Function Prototype</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>__assume</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>void __assume(int)</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>__code_seg</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>void __code_seg(const char *)</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>__debugbreak</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>void __cdecl <ph id="ph1">\_</ph>_debugbreak(void)</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>__fastfail</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>__declspec(noreturn) void <ph id="ph1">\_</ph>_fastfail(unsigned int)</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>__nop</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>void __nop(void) <bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  On ARM platforms, this function generates a NOP instruction if one is implemented in the target architecture; otherwise, an alternative instruction that does not change the state of the program or CPU is generated—for example, <ph id="ph1">`MOV r8, r8`</ph>.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>This is functionally equivalent to the <ph id="ph1">\_</ph>_nop intrinsic for other hardware architectures.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Because an instruction that has no effect on the state of the program or CPU might be ignored by the target architecture as an optimization, the instruction does not necessarily consume CPU cycles.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>Therefore, do not use the <ph id="ph1">\_</ph>_nop intrinsic to manipulate the execution time of a code sequence unless you are certain about how the CPU will behave.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Instead, you can use the <ph id="ph1">\_</ph>_nop intrinsic to align the next instruction to a specific 32-bit boundary address.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>__yield</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>void __yield(void) <bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  On ARM platforms, this function generates the YIELD instruction, which indicates that the thread is performing a task that can be temporarily suspended from execution—for example, a spinlock—without adversely affecting the program.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>This enables the CPU to execute other tasks during execution cycles that would otherwise be wasted.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>_AddressOfReturnAddress</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>void * _AddressOfReturnAddress(void)</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>_BitScanForward</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask)</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>_BitScanReverse</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask)</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>_bittest</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>unsigned char _bittest(long const *, long)</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>_bittestandcomplement</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>unsigned char _bittestandcomplement(long *, long)</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>_bittestandreset</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>unsigned char _bittestandreset(long *, long)</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>_bittestandset</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>unsigned char _bittestandset(long *, long)</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>_byteswap_uint64</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>unsigned __int64 <ph id="ph1">\_</ph>_cdecl _byteswap_uint64(unsigned <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>_byteswap_ulong</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>unsigned long __cdecl _byteswap_ulong(unsigned long)</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>_byteswap_ushort</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>unsigned short __cdecl _byteswap_ushort(unsigned short)</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>_disable</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>void __cdecl _disable(void) <bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  On ARM platforms, this function generates the CPSID instruction; it is only available as an intrinsic.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>_enable</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>void __cdecl _enable(void) <bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  On ARM platforms, this function generates the CPSIE instruction; it is only available as an intrinsic.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>_lrotl</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>unsigned long __cdecl _lrotl(unsigned long, int)</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>_lrotr</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>unsigned long __cdecl _lrotr(unsigned long, int)</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>_ReadBarrier</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>void _ReadBarrier(void)</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>_ReadWriteBarrier</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>void _ReadWriteBarrier(void)</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>_ReturnAddress</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>void * _ReturnAddress(void)</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>_rotl</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>unsigned int __cdecl _rotl(unsigned int _Value, int _Shift)</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>_rotl16</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>unsigned short _rotl16(unsigned short _Value, unsigned char _Shift)</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>_rotl64</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>unsigned __int64 <ph id="ph1">\_</ph>_cdecl _rotl64(unsigned <ph id="ph2">\_</ph>_int64 _Value, int _Shift)</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>_rotl8</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>unsigned char _rotl8(unsigned char _Value, unsigned char _Shift)</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>_rotr</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>unsigned int __cdecl _rotr(unsigned int _Value, int _Shift)</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>_rotr16</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>unsigned short _rotr16(unsigned short _Value, unsigned char _Shift)</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>_rotr64</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>unsigned __int64 <ph id="ph1">\_</ph>_cdecl _rotr64(unsigned <ph id="ph2">\_</ph>_int64 _Value, int _Shift)</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>_rotr8</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>unsigned char _rotr8(unsigned char _Value, unsigned char _Shift)</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>_setjmpex</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>int __cdecl _setjmpex(jmp_buf)</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>_WriteBarrier</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>void _WriteBarrier(void)</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>NEON<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Interlocked Intrinsics</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>Interlocked intrinsics are a set of intrinsics that are used to perform atomic read-modify-write operations.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Some of them are common to all platforms.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>They are listed separately here because there are a large number of them, but because their definitions are mostly redundant, it's easier to think about them in general terms.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>Their names can be used to derive the exact behaviors.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>The following table summarizes the ARM support of the non-bittest interlocked intrinsics.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>Each cell in the table corresponds to a name that is derived by appending the operation name in the left-most cell of the row and the type name in the top-most cell of the column to <ph id="ph1">`_Interlocked`</ph>.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>For example, the cell at the intersection of the <ph id="ph1">`Xor`</ph> row and the <bpt id="p1">**</bpt>8<ept id="p1">**</ept> column corresponds to <ph id="ph2">`_InterlockedXor8`</ph> and is fully supported.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Most of the supported functions offer these optional suffixes: <ph id="ph1">`_acq`</ph>, <ph id="ph2">`_rel`</ph>, and <ph id="ph3">`_nf`</ph>.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_acq`</ph> suffix indicates an "acquire" semantic and the <ph id="ph2">`_rel`</ph> suffix indicates a "release" semantic.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_nf`</ph> or “no fence” suffix is unique to ARM and is discussed in the next section.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>16</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>32</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>64</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>P</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Add</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>And</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>CompareExchange</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Decrement</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>Exchange</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Partial</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>ExchangeAdd</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Increment</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>Or</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>Xor</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>Full</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>Key:</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Full<ept id="p1">**</ept>: supports plain, <ph id="ph1">`_acq`</ph>, <ph id="ph2">`_rel`</ph>, and <ph id="ph3">`_nf`</ph> forms.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Partial<ept id="p1">**</ept>: supports plain, <ph id="ph1">`_acq`</ph>, and <ph id="ph2">`_nf`</ph> forms.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>None<ept id="p1">**</ept>: Not supported</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>_nf (no fence) Suffix</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_nf`</ph> or "no fence" suffix indicates that the operation does not behave as any kind of memory barrier.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>This is in contrast to the other three forms (plain, <ph id="ph1">`_acq`</ph>, and <ph id="ph2">`_rel`</ph>), which all behave as some kind of barrier.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>One possible use of the <ph id="ph1">`_nf`</ph> forms is to maintain a statistic counter that is updated by multiple threads at the same time but whose value is not otherwise used while multiple threads are executing.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>List of Interlocked Intrinsics</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>Function Name</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Function Prototype</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>_InterlockedAdd</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>long _InterlockedAdd(long _volatile *, long)</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>_InterlockedAdd64</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedAdd64(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>_InterlockedAdd64_acq</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedAdd64_acq(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>_InterlockedAdd64_nf</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedAdd64_nf(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>_InterlockedAdd64_rel</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedAdd64_rel(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>_InterlockedAdd_acq</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>long _InterlockedAdd_acq(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>_InterlockedAdd_nf</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>long _InterlockedAdd_nf(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>_InterlockedAdd_rel</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>long _InterlockedAdd_rel(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>long _InterlockedAnd(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd16</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>short _InterlockedAnd16(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd16_acq</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>short _InterlockedAnd16_acq(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd16_nf</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>short _InterlockedAnd16_nf(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd16_rel</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>short _InterlockedAnd16_rel(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd64</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedAnd64(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd64_acq</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedAnd64_acq(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd64_nf</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedAnd64_nf(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd64_rel</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedAnd64_rel(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd8</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>char _InterlockedAnd8(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd8_acq</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>char _InterlockedAnd8_acq(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd8_nf</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>char _InterlockedAnd8_nf(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd8_rel</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>char _InterlockedAnd8_rel(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd_acq</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>long _InterlockedAnd_acq(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd_nf</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>long _InterlockedAnd_nf(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>_InterlockedAnd_rel</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>long _InterlockedAnd_rel(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>long __cdecl _InterlockedCompareExchange(long volatile *, long, long)</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange16</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>short _InterlockedCompareExchange16(short volatile *, short, short)</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange16_acq</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>short _InterlockedCompareExchange16_acq(short volatile *, short, short)</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange16_nf</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>short _InterlockedCompareExchange16_nf(short volatile *, short, short)</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange16_rel</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>short _InterlockedCompareExchange16_rel(short volatile *, short, short)</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange64</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedCompareExchange64(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64, <ph id="ph3">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange64_acq</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedCompareExchange64_acq(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64, <ph id="ph3">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange64_nf</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedCompareExchange64_nf(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64, <ph id="ph3">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange64_rel</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedCompareExchange64_rel(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64, <ph id="ph3">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange8</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>char _InterlockedCompareExchange8(char volatile *, char, char)</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange8_acq</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>char _InterlockedCompareExchange8_acq(char volatile *, char, char)</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange8_nf</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>char _InterlockedCompareExchange8_nf(char volatile *, char, char)</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange8_rel</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>char _InterlockedCompareExchange8_rel(char volatile *, char, char)</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchangePointer</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>void * _InterlockedCompareExchangePointer(void <ph id="ph1">\*</ph> volatile <ph id="ph2">\*</ph>, void <ph id="ph3">\*</ph>, void <ph id="ph4">\*</ph>)</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchangePointer_acq</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>void * _InterlockedCompareExchangePointer_acq(void <ph id="ph1">\*</ph> volatile <ph id="ph2">\*</ph>, void <ph id="ph3">\*</ph>, void <ph id="ph4">\*</ph>)</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchangePointer_nf</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>void * _InterlockedCompareExchangePointer_nf(void <ph id="ph1">\*</ph> volatile <ph id="ph2">\*</ph>, void <ph id="ph3">\*</ph>, void <ph id="ph4">\*</ph>)</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchangePointer_rel</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>void * _InterlockedCompareExchangePointer_rel(void <ph id="ph1">\*</ph> volatile <ph id="ph2">\*</ph>, void <ph id="ph3">\*</ph>, void <ph id="ph4">\*</ph>)</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange_acq</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>long _InterlockedCompareExchange_acq(long volatile *, long, long)</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange_nf</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>long _InterlockedCompareExchange_nf(long volatile *, long, long)</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>_InterlockedCompareExchange_rel</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>long _InterlockedCompareExchange_rel(long volatile *, long, long)</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>_InterlockedDecrement</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>long __cdecl _InterlockedDecrement(long volatile *)</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>_InterlockedDecrement16</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>short _InterlockedDecrement16(short volatile *)</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>_InterlockedDecrement16_acq</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>short _InterlockedDecrement16_acq(short volatile *)</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>_InterlockedDecrement16_nf</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>short _InterlockedDecrement16_nf(short volatile *)</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>_InterlockedDecrement16_rel</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>short _InterlockedDecrement16_rel(short volatile *)</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>_InterlockedDecrement64</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedDecrement64(<ph id="ph1">\_</ph>_int64 volatile *)</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>_InterlockedDecrement64_acq</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedDecrement64_acq(<ph id="ph1">\_</ph>_int64 volatile *)</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>_InterlockedDecrement64_nf</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedDecrement64_nf(<ph id="ph1">\_</ph>_int64 volatile *)</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>_InterlockedDecrement64_rel</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedDecrement64_rel(<ph id="ph1">\_</ph>_int64 volatile *)</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>_InterlockedDecrement_acq</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>long _InterlockedDecrement_acq(long volatile *)</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>_InterlockedDecrement_nf</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>long _InterlockedDecrement_nf(long volatile *)</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>_InterlockedDecrement_rel</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>long _InterlockedDecrement_rel(long volatile *)</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>_InterlockedExchange</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>long __cdecl _InterlockedExchange(long volatile * _Target, long)</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>_InterlockedExchange16</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>short _InterlockedExchange16(short volatile * _Target, short)</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>_InterlockedExchange16_acq</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>short _InterlockedExchange16_acq(short volatile * _Target, short)</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>_InterlockedExchange16_nf</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>short _InterlockedExchange16_nf(short volatile * _Target, short)</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>_InterlockedExchange64</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedExchange64(<ph id="ph1">\_</ph>_int64 volatile * _Target, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>_InterlockedExchange64_acq</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedExchange64_acq(<ph id="ph1">\_</ph>_int64 volatile * _Target, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>_InterlockedExchange64_nf</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedExchange64_nf(<ph id="ph1">\_</ph>_int64 volatile * _Target, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>_InterlockedExchange8</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>char _InterlockedExchange8(char volatile * _Target, char)</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>_InterlockedExchange8_acq</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>char _InterlockedExchange8_acq(char volatile * _Target, char)</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>_InterlockedExchange8_nf</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>char _InterlockedExchange8_nf(char volatile * _Target, char)</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>long __cdecl _InterlockedExchangeAdd(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd16</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>short _InterlockedExchangeAdd16(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd16_acq</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>short _InterlockedExchangeAdd16_acq(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd16_nf</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>short _InterlockedExchangeAdd16_nf(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd16_rel</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>short _InterlockedExchangeAdd16_rel(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd64</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedExchangeAdd64(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd64_acq</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedExchangeAdd64_acq(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd64_nf</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedExchangeAdd64_nf(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd64_rel</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedExchangeAdd64_rel(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd8</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>char _InterlockedExchangeAdd8(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd8_acq</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>char _InterlockedExchangeAdd8_acq(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd8_nf</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>char _InterlockedExchangeAdd8_nf(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd8_rel</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>char _InterlockedExchangeAdd8_rel(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd_acq</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>long _InterlockedExchangeAdd_acq(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd_nf</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>long _InterlockedExchangeAdd_nf(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangeAdd_rel</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>long _InterlockedExchangeAdd_rel(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangePointer</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>void * _InterlockedExchangePointer(void <ph id="ph1">\*</ph> volatile <ph id="ph2">\*</ph> _Target, void <ph id="ph3">\*</ph>)</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangePointer_acq</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>void * _InterlockedExchangePointer_acq(void <ph id="ph1">\*</ph> volatile <ph id="ph2">\*</ph> _Target, void <ph id="ph3">\*</ph>)</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>_InterlockedExchangePointer_nf</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>void * _InterlockedExchangePointer_nf(void <ph id="ph1">\*</ph> volatile <ph id="ph2">\*</ph> _Target, void <ph id="ph3">\*</ph>)</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>_InterlockedExchange_acq</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>long _InterlockedExchange_acq(long volatile * _Target, long)</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>_InterlockedExchange_nf</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>long _InterlockedExchange_nf(long volatile * _Target, long)</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>_InterlockedIncrement</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>long __cdecl _InterlockedIncrement(long volatile *)</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>_InterlockedIncrement16</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>short _InterlockedIncrement16(short volatile *)</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>_InterlockedIncrement16_acq</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>short _InterlockedIncrement16_acq(short volatile *)</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>_InterlockedIncrement16_nf</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>short _InterlockedIncrement16_nf(short volatile *)</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>_InterlockedIncrement16_rel</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>short _InterlockedIncrement16_rel(short volatile *)</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>_InterlockedIncrement64</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedIncrement64(<ph id="ph1">\_</ph>_int64 volatile *)</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>_InterlockedIncrement64_acq</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedIncrement64_acq(<ph id="ph1">\_</ph>_int64 volatile *)</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>_InterlockedIncrement64_nf</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedIncrement64_nf(<ph id="ph1">\_</ph>_int64 volatile *)</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>_InterlockedIncrement64_rel</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedIncrement64_rel(<ph id="ph1">\_</ph>_int64 volatile *)</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>_InterlockedIncrement_acq</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>long _InterlockedIncrement_acq(long volatile *)</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>_InterlockedIncrement_nf</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>long _InterlockedIncrement_nf(long volatile *)</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>_InterlockedIncrement_rel</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>long _InterlockedIncrement_rel(long volatile *)</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>_InterlockedOr</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>long _InterlockedOr(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>_InterlockedOr16</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>short _InterlockedOr16(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>_InterlockedOr16_acq</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>short _InterlockedOr16_acq(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>_InterlockedOr16_nf</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>short _InterlockedOr16_nf(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>_InterlockedOr16_rel</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>short _InterlockedOr16_rel(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>_InterlockedOr64</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedOr64(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>_InterlockedOr64_acq</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedOr64_acq(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>_InterlockedOr64_nf</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedOr64_nf(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>_InterlockedOr64_rel</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedOr64_rel(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>_InterlockedOr8</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>char _InterlockedOr8(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>_InterlockedOr8_acq</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>char _InterlockedOr8_acq(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>_InterlockedOr8_nf</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>char _InterlockedOr8_nf(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>_InterlockedOr8_rel</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>char _InterlockedOr8_rel(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>_InterlockedOr_acq</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>long _InterlockedOr_acq(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>_InterlockedOr_nf</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>long _InterlockedOr_nf(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>_InterlockedOr_rel</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>long _InterlockedOr_rel(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>_InterlockedXor</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>long _InterlockedXor(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>_InterlockedXor16</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>short _InterlockedXor16(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>_InterlockedXor16_acq</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>short _InterlockedXor16_acq(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>_InterlockedXor16_nf</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>short _InterlockedXor16_nf(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>_InterlockedXor16_rel</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>short _InterlockedXor16_rel(short volatile *, short)</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>_InterlockedXor64</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedXor64(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>_InterlockedXor64_acq</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedXor64_acq(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>_InterlockedXor64_nf</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedXor64_nf(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>_InterlockedXor64_rel</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>__int64 _InterlockedXor64_rel(<ph id="ph1">\_</ph>_int64 volatile *, <ph id="ph2">\_</ph>_int64)</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>_InterlockedXor8</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>char _InterlockedXor8(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>_InterlockedXor8_acq</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>char _InterlockedXor8_acq(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>_InterlockedXor8_nf</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>char _InterlockedXor8_nf(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>_InterlockedXor8_rel</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>char _InterlockedXor8_rel(char volatile *, char)</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>_InterlockedXor_acq</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>long _InterlockedXor_acq(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>_InterlockedXor_nf</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>long _InterlockedXor_nf(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>_InterlockedXor_rel</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>long _InterlockedXor_rel(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>NEON<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>_interlockedbittest Intrinsics</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>The plain interlocked bittest intrinsics are common to all platforms.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>ARM adds <ph id="ph1">`_acq`</ph>, <ph id="ph2">`_rel`</ph>, and <ph id="ph3">`_nf`</ph> variants, which just modify the barrier semantics of an operation, as described in <bpt id="p1">[</bpt>_nf (no fence) Suffix<ept id="p1">](#nf_suffix)</ept> earlier in this article.</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>Function Name</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>Function Prototype</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>_interlockedbittestandreset</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>unsigned char _interlockedbittestandreset(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>_interlockedbittestandreset_acq</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>unsigned char _interlockedbittestandreset_acq(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>_interlockedbittestandreset_nf</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>unsigned char _interlockedbittestandreset_nf(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>_interlockedbittestandreset_rel</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>unsigned char _interlockedbittestandreset_rel(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>_interlockedbittestandset</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>unsigned char _interlockedbittestandset(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>_interlockedbittestandset_acq</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>unsigned char _interlockedbittestandset_acq(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>_interlockedbittestandset_nf</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>unsigned char _interlockedbittestandset_nf(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>_interlockedbittestandset_rel</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>unsigned char _interlockedbittestandset_rel(long volatile *, long)</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>NEON<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>Compiler Intrinsics</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>ARM Assembler Reference</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>C++ Language Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>