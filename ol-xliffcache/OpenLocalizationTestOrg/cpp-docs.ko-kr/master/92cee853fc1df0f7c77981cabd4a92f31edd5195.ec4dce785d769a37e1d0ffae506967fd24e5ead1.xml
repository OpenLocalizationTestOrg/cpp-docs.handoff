{"nodes":[{"pos":[12,60],"content":"Conflicts with the x86 Compiler | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Conflicts with the x86 Compiler | Microsoft Docs","pos":[0,48]}]},{"content":"Conflicts with the x86 Compiler","pos":[540,571]},{"content":"Data types that are larger than 4 bytes are not automatically aligned on the stack when you use the x86 compiler to compile an application.","pos":[572,711]},{"content":"Because the architecture for the x86 compiler is a 4 byte aligned stack, anything larger than 4 bytes, for example, a 64-bit integer, cannot be automatically aligned to an 8-byte address.","pos":[712,899]},{"content":"Working with unaligned data has two implications.","pos":[906,955]},{"content":"It may take longer to access unaligned locations than it takes to access aligned locations.","pos":[965,1056]},{"content":"Unaligned locations cannot be used in interlocked operations.","pos":[1066,1127]},{"content":"If you require more strict alignment, use <ph id=\"ph1\">`__declspec(align(N)) on your variable declarations`</ph>.","pos":[1134,1229],"source":"If you require more strict alignment, use `__declspec(align(N)) on your variable declarations`."},{"content":"This causes the compiler to dynamically align the stack to meet your specifications.","pos":[1230,1314]},{"content":"However, dynamically adjusting the stack at run time may cause slower execution of your application.","pos":[1315,1415]},{"content":"See Also","pos":[1424,1432]},{"content":"Types and Storage","pos":[1437,1454]},{"content":"align","pos":[1492,1497]}],"content":"---\ntitle: \"Conflicts with the x86 Compiler | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 8e47f0d3-afe0-42d9-9efa-de239ddd3a05\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Conflicts with the x86 Compiler\nData types that are larger than 4 bytes are not automatically aligned on the stack when you use the x86 compiler to compile an application. Because the architecture for the x86 compiler is a 4 byte aligned stack, anything larger than 4 bytes, for example, a 64-bit integer, cannot be automatically aligned to an 8-byte address.  \n  \n Working with unaligned data has two implications.  \n  \n-   It may take longer to access unaligned locations than it takes to access aligned locations.  \n  \n-   Unaligned locations cannot be used in interlocked operations.  \n  \n If you require more strict alignment, use `__declspec(align(N)) on your variable declarations`. This causes the compiler to dynamically align the stack to meet your specifications. However, dynamically adjusting the stack at run time may cause slower execution of your application.  \n  \n## See Also  \n [Types and Storage](../build/types-and-storage.md)   \n [align](../cpp/align-cpp.md)"}