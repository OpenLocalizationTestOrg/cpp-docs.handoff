<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b380f4b15178116a49d6a9ee91fec79f87569d8d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\accessing-run-time-class-information.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c06375a8c3e55c0f5b88a6c5f201a7b6677a0ce</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db543fdd804d058fede8ccab208807ea3e8c0ff5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Accessing Run-Time Class Information | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Accessing Run-Time Class Information</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article explains how to access information about the class of an object at run time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>MFC does not use the <bpt id="p1">[</bpt>Run-Time Type Information<ept id="p1">](../cpp/run-time-type-information.md)</ept> (RTTI) support introduced in Visual C++ 4.0.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you have derived your class from <bpt id="p1">[</bpt>CObject<ept id="p1">](../mfc/reference/cobject-class.md)</ept> and used the <bpt id="p2">**</bpt>DECLARE<ept id="p2">**</ept>_<bpt id="p3">**</bpt>DYNAMIC<ept id="p3">**</ept> and <ph id="ph1">`IMPLEMENT_DYNAMIC`</ph>, the <ph id="ph2">`DECLARE_DYNCREATE`</ph> and <ph id="ph3">`IMPLEMENT_DYNCREATE`</ph>, or the <ph id="ph4">`DECLARE_SERIAL`</ph> and <ph id="ph5">`IMPLEMENT_SERIAL`</ph> macros explained in the article <bpt id="p4">[</bpt>Deriving a Class from CObject<ept id="p4">](../mfc/deriving-a-class-from-cobject.md)</ept>, the <ph id="ph6">`CObject`</ph> class has the ability to determine the exact class of an object at run time.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This ability is most useful when extra type checking of function arguments is needed and when you must write special-purpose code based on the class of an object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, this practice is not usually recommended because it duplicates the functionality of virtual functions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CObject`</ph> member function <ph id="ph2">`IsKindOf`</ph> can be used to determine if a particular object belongs to a specified class or if it is derived from a specific class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The argument to <ph id="ph1">`IsKindOf`</ph> is a <ph id="ph2">`CRuntimeClass`</ph> object, which you can get using the <ph id="ph3">`RUNTIME_CLASS`</ph> macro with the name of the class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To use the RUNTIME_CLASS macro</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`RUNTIME_CLASS`</ph> with the name of the class, as shown here for the class <ph id="ph2">`CObject`</ph>:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>NVC_MFCCObjectSample#4</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You will rarely need to access the run-time class object directly.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A more common use is to pass the run-time class object to the <ph id="ph1">`IsKindOf`</ph> function, as shown in the next procedure.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsKindOf`</ph> function tests an object to see if it belongs to a particular class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To use the IsKindOf function</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Make sure the class has run-time class support.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>That is, the class must have been derived directly or indirectly from <ph id="ph1">`CObject`</ph> and used the <bpt id="p1">**</bpt>DECLARE<ept id="p1">**</ept>_<bpt id="p2">**</bpt>DYNAMIC<ept id="p2">**</ept> and <ph id="ph2">`IMPLEMENT_DYNAMIC`</ph>, the <ph id="ph3">`DECLARE_DYNCREATE`</ph> and <ph id="ph4">`IMPLEMENT_DYNCREATE`</ph>, or the <ph id="ph5">`DECLARE_SERIAL`</ph> and <ph id="ph6">`IMPLEMENT_SERIAL`</ph> macros explained in the article <bpt id="p3">[</bpt>Deriving a Class from CObject<ept id="p3">](../mfc/deriving-a-class-from-cobject.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`IsKindOf`</ph> member function for objects of that class, using the <ph id="ph2">`RUNTIME_CLASS`</ph> macro to generate the <ph id="ph3">`CRuntimeClass`</ph> argument, as shown here:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>NVC_MFCCObjectSample#2</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>NVC_MFCCObjectSample#5</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>IsKindOf returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the object is a member of the specified class or of a class derived from the specified class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>does not support multiple inheritance or virtual base classes, although you can use multiple inheritance for your derived Microsoft Foundation classes if necessary.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>One use of run-time class information is in the dynamic creation of objects.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This process is discussed in the article <bpt id="p1">[</bpt>Dynamic Object Creation<ept id="p1">](../mfc/dynamic-object-creation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more detailed information on serialization and run-time class information, see the articles <bpt id="p1">[</bpt>Files in MFC<ept id="p1">](../mfc/files-in-mfc.md)</ept> and <bpt id="p2">[</bpt>Serialization<ept id="p2">](../mfc/serialization-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Using CObject</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>