{"nodes":[{"pos":[12,81],"content":"_vprintf_p, _vprintf_p_l, _vwprintf_p, _vwprintf_p_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_vprintf_p, _vprintf_p_l, _vwprintf_p, _vwprintf_p_l | Microsoft Docs","pos":[0,69]}]},{"content":"_vprintf_p, _vprintf_p_l, _vwprintf_p, _vwprintf_p_l","pos":[1467,1519]},{"content":"Writes formatted output by using a pointer to a list of arguments, and enables specification of the order in which the arguments are used.","pos":[1520,1658]},{"content":"Syntax","pos":[1667,1673]},{"content":"Parameters","pos":[2031,2041]},{"content":"Format specification.","pos":[2057,2078]},{"content":"Pointer to list of arguments.","pos":[2097,2126]},{"content":"The locale to use.","pos":[2145,2163]},{"pos":[2170,2305],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"content":"Return Value","pos":[2314,2326]},{"pos":[2343,2494],"content":"and <ph id=\"ph1\">`_vwprintf_p`</ph> return the number of characters written, not including the terminating null character, or a negative value if an output error occurs.","source":" and `_vwprintf_p` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs."},{"content":"Remarks","pos":[2503,2510]},{"content":"Each of these functions takes a pointer to an argument list, then formats and writes the given data to <ph id=\"ph1\">`stdout`</ph>.","pos":[2514,2626],"source":"Each of these functions takes a pointer to an argument list, then formats and writes the given data to `stdout`."},{"content":"These functions differ from <ph id=\"ph1\">`vprintf_s`</ph> and <ph id=\"ph2\">`vwprintf_s`</ph> only in that they support the ability to specify the order in which the arguments are used.","pos":[2627,2775],"source":" These functions differ from `vprintf_s` and `vwprintf_s` only in that they support the ability to specify the order in which the arguments are used."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>printf_p Positional Parameters<ept id=\"p1\">](../../c-runtime-library/printf-p-positional-parameters.md)</ept>.","pos":[2776,2894],"source":" For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)."},{"content":"is the wide-character version of <ph id=\"ph1\">`_vprintf_p`</ph>; the two functions behave identically if the stream is opened in ANSI mode.","pos":[2915,3036],"source":" is the wide-character version of `_vprintf_p`; the two functions behave identically if the stream is opened in ANSI mode."},{"content":"doesn't currently support output into a UNICODE stream.","pos":[3050,3105]},{"pos":[3112,3268],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[3276,3456],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","leadings":["","> "],"nodes":[{"content":" Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","pos":[13,178],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[1,51],"source":" Ensure that `format` is not a user-defined string."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[52,165],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."}]}]},{"content":"If <ph id=\"ph1\">`format`</ph> is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3463,3688],"source":"If `format` is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[3689,3778],"source":" If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`."},{"content":"Generic-Text Routine Mappings","pos":[3788,3817]},{"content":"TCHAR.H routine","pos":[3824,3839]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3840,3868],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3869,3882]},{"content":"_UNICODE defined","pos":[3883,3899]},{"content":"Requirements","pos":[4141,4153]},{"content":"Routine","pos":[4160,4167]},{"content":"Required header","pos":[4168,4183]},{"content":"Optional headers","pos":[4184,4200]},{"pos":[4280,4281],"content":","},{"content":"stdio.h&gt; and <ph id=\"ph1\">\\&lt;</ph>stdarg.h&gt;","pos":[4299,4323],"source":"stdio.h> and \\<stdarg.h>"},{"content":"varargs.h&gt;*","pos":[4326,4337],"source":"varargs.h>*"},{"pos":[4355,4356],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;, and <ph id=\"ph2\">\\&lt;</ph>stdarg.h&gt;","pos":[4375,4414],"source":"stdio.h> or \\<wchar.h>, and \\<stdarg.h>"},{"content":"varargs.h&gt;*","pos":[4417,4428],"source":"varargs.h>*"},{"content":"Required for UNIX V compatibility.","pos":[4439,4473]},{"content":"The console is not supported in <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[4480,4593],"source":"The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"The standard stream handles that are associated with the console—<ph id=\"ph1\">`stdin`</ph>, <ph id=\"ph2\">`stdout`</ph>, and <ph id=\"ph3\">`stderr`</ph>—must be redirected before C run-time functions can use them in <ph id=\"ph4\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[4594,4835],"source":" The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","pos":[4836,4940],"source":" For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":".NET Framework Equivalent","pos":[4949,4974]},{"content":"System::Console::Write","pos":[4979,5001]},{"content":"See Also","pos":[5079,5087]},{"content":"Stream I/O","pos":[5092,5102]},{"content":"vprintf Functions","pos":[5148,5165]},{"content":"_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l","pos":[5218,5270]},{"content":"_printf_p, _printf_p_l, _wprintf_p, _wprintf_p_l","pos":[5361,5409]},{"content":"_sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l","pos":[5496,5548]},{"content":"vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l","pos":[5639,5693]},{"content":"va_arg, va_copy, va_end, va_start","pos":[5788,5821]},{"content":"_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l","pos":[5897,5953]},{"content":"_printf_p, _printf_p_l, _wprintf_p, _wprintf_p_l","pos":[6048,6096]},{"content":"printf_p Positional Parameters","pos":[6183,6213]}],"content":"---\ntitle: \"_vprintf_p, _vprintf_p_l, _vwprintf_p, _vwprintf_p_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_vwprintf_p\"\n  - \"_vprintf_p\"\n  - \"_vprintf_p_l\"\n  - \"_vwprintf_p_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_vwprintf_p_l\"\n  - \"vprintf_p\"\n  - \"_vprintf_p_l\"\n  - \"_vwprintf_p\"\n  - \"vprintf_p_l\"\n  - \"vwprintf_p_l\"\n  - \"vwprintf_p\"\n  - \"vtprintf_p\"\n  - \"_vtprintf_p\"\n  - \"_vprintf_p\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_vtprintf_p_l function\"\n  - \"_vtprintf_p function\"\n  - \"vtprintf_p function\"\n  - \"_vwprintf_p function\"\n  - \"_vwprintf_p_l function\"\n  - \"_vprintf_p function\"\n  - \"_vprintf_p_l function\"\n  - \"vprintf_p_l function\"\n  - \"vwprintf_p function\"\n  - \"vprintf_p function\"\n  - \"vtprintf_p_l function\"\n  - \"vwprintf_p_l function\"\n  - \"formatted text [C++]\"\nms.assetid: 3f99bde3-c891-493d-908f-30559c421058\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _vprintf_p, _vprintf_p_l, _vwprintf_p, _vwprintf_p_l\nWrites formatted output by using a pointer to a list of arguments, and enables specification of the order in which the arguments are used.  \n  \n## Syntax  \n  \n```  \nint _vprintf_p(  \n   const char *format,  \n   va_list argptr   \n);  \nint _vprintf_p_l(  \n   const char *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \nint _vwprintf_p(  \n   const wchar_t *format,  \n   va_list argptr   \n);  \nint _vwprintf_p_l(  \n   const wchar_t *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \n```  \n  \n#### Parameters  \n `format`  \n Format specification.  \n  \n `argptr`  \n Pointer to list of arguments.  \n  \n `locale`  \n The locale to use.  \n  \n For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n## Return Value  \n `_vprintf_p` and `_vwprintf_p` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs.  \n  \n## Remarks  \n Each of these functions takes a pointer to an argument list, then formats and writes the given data to `stdout`. These functions differ from `vprintf_s` and `vwprintf_s` only in that they support the ability to specify the order in which the arguments are used. For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md).  \n  \n `_vwprintf_p` is the wide-character version of `_vprintf_p`; the two functions behave identically if the stream is opened in ANSI mode. `_vprintf_p` doesn't currently support output into a UNICODE stream.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n If `format` is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_vtprintf_p`|`_vprintf_p`|`_vprintf_p`|`_vwprintf_p`|  \n|`_vtprintf_p_l`|`_vprintf_p_l`|`_vprintf_p_l`|`_vwprintf_p_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|Optional headers|  \n|-------------|---------------------|----------------------|  \n|`_vprintf_p`, `_vprintf_p_l`|\\<stdio.h> and \\<stdarg.h>|\\<varargs.h>*|  \n|`_vwprintf_p`, `_vwprintf_p_l`|\\<stdio.h> or \\<wchar.h>, and \\<stdarg.h>|\\<varargs.h>*|  \n  \n \\* Required for UNIX V compatibility.  \n  \n The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. The standard stream handles that are associated with the console—`stdin`, `stdout`, and `stderr`—must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## .NET Framework Equivalent  \n [System::Console::Write](https://msdn.microsoft.com/en-us/library/system.console.write.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)   \n [_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l](../../c-runtime-library/reference/fprintf-p-fprintf-p-l-fwprintf-p-fwprintf-p-l.md)   \n [_printf_p, _printf_p_l, _wprintf_p, _wprintf_p_l](../../c-runtime-library/reference/printf-p-printf-p-l-wprintf-p-wprintf-p-l.md)   \n [_sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l](../../c-runtime-library/reference/sprintf-p-sprintf-p-l-swprintf-p-swprintf-p-l.md)   \n [vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l](../../c-runtime-library/reference/vsprintf-s-vsprintf-s-l-vswprintf-s-vswprintf-s-l.md)   \n [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)   \n [_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l](../../c-runtime-library/reference/vfprintf-p-vfprintf-p-l-vfwprintf-p-vfwprintf-p-l.md)   \n [_printf_p, _printf_p_l, _wprintf_p, _wprintf_p_l](../../c-runtime-library/reference/printf-p-printf-p-l-wprintf-p-wprintf-p-l.md)   \n [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)"}