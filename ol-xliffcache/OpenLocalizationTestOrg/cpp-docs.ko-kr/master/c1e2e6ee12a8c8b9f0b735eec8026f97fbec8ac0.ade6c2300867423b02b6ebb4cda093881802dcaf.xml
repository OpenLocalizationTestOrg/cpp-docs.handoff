{"nodes":[{"pos":[12,53],"content":"C++ Constant Expressions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C++ Constant Expressions | Microsoft Docs","pos":[0,41]}]},{"content":"C++ Constant Expressions","pos":[662,686]},{"content":"A <bpt id=\"p1\">*</bpt>constant<ept id=\"p1\">*</ept> value is one that doesn't change.","pos":[687,733],"source":"A *constant* value is one that doesn't change."},{"content":"C++ provides two keywords to enable you to express the intent that an object is not intended to be modified, and to enforce that intent.","pos":[734,870]},{"content":"C++ requires constant expressions — expressions that evaluate to a constant — for declarations of:","pos":[877,975]},{"content":"Array bounds","pos":[985,997]},{"content":"Selectors in case statements","pos":[1007,1035]},{"content":"Bit-field length specification","pos":[1045,1075]},{"content":"Enumeration initializers","pos":[1085,1109]},{"content":"The only operands that are legal in constant expressions are:","pos":[1116,1177]},{"content":"Literals","pos":[1187,1195]},{"content":"Enumeration constants","pos":[1205,1226]},{"content":"Values declared as const that are initialized with constant expressions","pos":[1236,1307]},{"pos":[1326,1337],"content":"expressions"},{"content":"Nonintegral constants must be converted (either explicitly or implicitly) to integral types to be legal in a constant expression.","pos":[1344,1473]},{"content":"Therefore, the following code is legal:","pos":[1474,1513]},{"pos":[1590,1764],"content":"Explicit conversions to integral types are legal in constant expressions; all other types and derived types are illegal except when used as operands to the <ph id=\"ph1\">`sizeof`</ph> operator.","source":"Explicit conversions to integral types are legal in constant expressions; all other types and derived types are illegal except when used as operands to the `sizeof` operator."},{"content":"The comma operator and assignment operators cannot be used in constant expressions.","pos":[1771,1854]},{"content":"See Also","pos":[1863,1871]},{"content":"Types of Expressions","pos":[1876,1896]}],"content":"---\ntitle: \"C++ Constant Expressions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"constant expressions, syntax\"\n  - \"constant expressions\"\n  - \"expressions [C++], constant\"\nms.assetid: b07245a5-4c21-4589-b503-e6ffd631996f\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C++ Constant Expressions\nA *constant* value is one that doesn't change. C++ provides two keywords to enable you to express the intent that an object is not intended to be modified, and to enforce that intent.  \n  \n C++ requires constant expressions — expressions that evaluate to a constant — for declarations of:  \n  \n-   Array bounds  \n  \n-   Selectors in case statements  \n  \n-   Bit-field length specification  \n  \n-   Enumeration initializers  \n  \n The only operands that are legal in constant expressions are:  \n  \n-   Literals  \n  \n-   Enumeration constants  \n  \n-   Values declared as const that are initialized with constant expressions  \n  \n-   `sizeof` expressions  \n  \n Nonintegral constants must be converted (either explicitly or implicitly) to integral types to be legal in a constant expression. Therefore, the following code is legal:  \n  \n```  \nconst double Size = 11.0;  \nchar chArray[(int)Size];  \n```  \n  \n Explicit conversions to integral types are legal in constant expressions; all other types and derived types are illegal except when used as operands to the `sizeof` operator.  \n  \n The comma operator and assignment operators cannot be used in constant expressions.  \n  \n## See Also  \n [Types of Expressions](../cpp/types-of-expressions.md)"}