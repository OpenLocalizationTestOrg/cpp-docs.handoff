{"nodes":[{"pos":[12,79],"content":"fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l | Microsoft Docs","pos":[0,67]}]},{"pos":[1293,1343],"content":"fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l","linkify":"fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l","nodes":[{"content":"fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l","pos":[0,50]}]},{"content":"Print formatted data to a stream.","pos":[1344,1377]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>fprintf, _fprintf_l, fwprintf, _fwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1378,1652],"source":" These are versions of [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1661,1667],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2101,2111],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[2127,2155],"source":" Pointer to `FILE` structure."},{"content":"Format-control string.","pos":[2174,2196]},{"content":"Optional arguments.","pos":[2217,2236]},{"content":"The locale to use.","pos":[2255,2273]},{"pos":[2282,2294],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`fprintf_s`</ph> returns the number of bytes written.","pos":[2298,2346],"source":"`fprintf_s` returns the number of bytes written."},{"content":"<ph id=\"ph1\">`fwprintf_s`</ph> returns the number of wide characters written.","pos":[2347,2406],"source":"`fwprintf_s` returns the number of wide characters written."},{"content":"Each of these functions returns a negative value instead when an output error occurs.","pos":[2407,2492]},{"pos":[2501,2508],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`fprintf_s`</ph> formats and prints a series of characters and values to the output <ph id=\"ph2\">`stream`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[2512,2602],"source":"`fprintf_s` formats and prints a series of characters and values to the output `stream`*.*"},{"content":"Each function <ph id=\"ph1\">`argument`</ph> (if any) is converted and output according to the corresponding format specification in <ph id=\"ph2\">`format`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[2603,2727],"source":" Each function `argument` (if any) is converted and output according to the corresponding format specification in `format`*.*"},{"content":"For <ph id=\"ph1\">`fprintf_s`</ph>, the <ph id=\"ph2\">`format`</ph> argument has the same syntax and use that it has in <ph id=\"ph3\">`printf_s`</ph>.","pos":[2728,2821],"source":" For `fprintf_s`, the `format` argument has the same syntax and use that it has in `printf_s`."},{"content":"<ph id=\"ph1\">`fwprintf_s`</ph> is a wide-character version of <ph id=\"ph2\">`fprintf_s`</ph>; in <ph id=\"ph3\">`fwprintf_s`</ph>, <ph id=\"ph4\">`format`</ph> is a wide-character string.","pos":[2828,2938],"source":"`fwprintf_s` is a wide-character version of `fprintf_s`; in `fwprintf_s`, `format` is a wide-character string."},{"content":"These functions behave identically if the stream is opened in ANSI mode.","pos":[2939,3011]},{"content":"<ph id=\"ph1\">`fprintf_s`</ph> doesn't currently support output into a UNICODE stream.","pos":[3012,3079],"source":"`fprintf_s` doesn't currently support output into a UNICODE stream."},{"pos":[3086,3235],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current locale."},{"pos":[3243,3309],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string.","leadings":["","> "],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[14,64],"source":" Ensure that `format` is not a user-defined string."}]},{"content":"Like the non-secure versions (see <bpt id=\"p1\">[</bpt>fprintf, _fprintf_l, fwprintf, _fwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept>), these functions validate their parameters and invoke the invalid parameter handler, as described in <bpt id=\"p2\">[</bpt>Parameter Validation<ept id=\"p2\">](../../c-runtime-library/parameter-validation.md)</ept>, if either <ph id=\"ph1\">`stream`</ph> or <ph id=\"ph2\">`format`</ph> is a null pointer.","pos":[3316,3695],"source":"Like the non-secure versions (see [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)), these functions validate their parameters and invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md), if either `stream` or `format` is a null pointer."},{"content":"These functions differ from the non-secure versions  in that the format string itself is also validated.","pos":[3696,3800]},{"content":"If there are any unknown or badly formed formatting specifiers, these functions generate the invalid parameter exception.","pos":[3801,3922]},{"content":"In all cases, If execution is allowed to continue, the functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[3923,4026],"source":" In all cases, If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`."},{"content":"See <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept> for more information on these, and other, error codes.","pos":[4027,4201],"source":" See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for more information on these, and other, error codes."},{"pos":[4211,4240],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[4247,4262]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[4263,4291],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[4292,4305]},{"content":"_UNICODE defined","pos":[4306,4322]},{"pos":[4559,4694],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"pos":[4703,4715],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[4722,4730]},{"content":"Required header","pos":[4731,4746]},{"pos":[4792,4819],"content":"<ph id=\"ph1\">`fprintf_s`</ph>, <ph id=\"ph2\">`_fprintf_s_l`</ph>","source":"`fprintf_s`, `_fprintf_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[4820,4830],"source":"\\<stdio.h>"},{"pos":[4835,4864],"content":"<ph id=\"ph1\">`fwprintf_s`</ph>, <ph id=\"ph2\">`_fwprintf_s_l`</ph>","source":"`fwprintf_s`, `_fwprintf_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[4865,4889],"source":"\\<stdio.h> or \\<wchar.h>"},{"pos":[4897,5021],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[5030,5037],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5794,5819],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[5823,5932],"content":"<bpt id=\"p1\">[</bpt>System::IO::StreamWriter::Write<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.io.streamwriter.write.aspx)</ept>","source":"[System::IO::StreamWriter::Write](https://msdn.microsoft.com/en-us/library/system.io.streamwriter.write.aspx)"},{"pos":[5941,5949],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[5953,6005],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_cprintf, _cprintf_l, _cwprintf, _cwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[6008,6132],"source":" [_cprintf, _cprintf_l, _cwprintf, _cwprintf_l](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fscanf, _fscanf_l, fwscanf, _fwscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[6135,6249],"source":" [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)</ept>","pos":[6252,6399],"source":" [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)"}],"content":"---\ntitle: \"fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_fprintf_s_l\"\n  - \"fwprintf_s\"\n  - \"fprintf_s\"\n  - \"_fwprintf_s_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_ftprintf_s\"\n  - \"fprintf_s\"\n  - \"fwprintf_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"ftprintf_s_l function\"\n  - \"ftprintf_s function\"\n  - \"_fprintf_s_l function\"\n  - \"_ftprintf_s function\"\n  - \"_ftprintf_s_l function\"\n  - \"fwprintf_s_l function\"\n  - \"fwprintf_s function\"\n  - \"fprintf_s_l function\"\n  - \"fprintf_s function\"\n  - \"_fwprintf_s_l function\"\n  - \"print formatted data to streams\"\nms.assetid: 16067c3c-69ce-472a-8272-9aadf1f5beed\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l\nPrint formatted data to a stream. These are versions of [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nint fprintf_s(   \n   FILE *stream,  \n   const char *format [,  \n   argument ]...  \n);  \nint _fprintf_s_l(   \n   FILE *stream,  \n   const char *format,  \n   locale_t locale [,  \n   argument ]...  \n);  \nint fwprintf_s(   \n   FILE *stream,  \n   const wchar_t *format [,  \n   argument ]...  \n);  \nint _fwprintf_s_l(   \n   FILE *stream,  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument ]…  \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to `FILE` structure.  \n  \n `format`  \n Format-control string.  \n  \n `argument`  \n Optional arguments.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n `fprintf_s` returns the number of bytes written. `fwprintf_s` returns the number of wide characters written. Each of these functions returns a negative value instead when an output error occurs.  \n  \n## Remarks  \n `fprintf_s` formats and prints a series of characters and values to the output `stream`*.* Each function `argument` (if any) is converted and output according to the corresponding format specification in `format`*.* For `fprintf_s`, the `format` argument has the same syntax and use that it has in `printf_s`.  \n  \n `fwprintf_s` is a wide-character version of `fprintf_s`; in `fwprintf_s`, `format` is a wide-character string. These functions behave identically if the stream is opened in ANSI mode. `fprintf_s` doesn't currently support output into a UNICODE stream.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current locale.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string.  \n  \n Like the non-secure versions (see [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)), these functions validate their parameters and invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md), if either `stream` or `format` is a null pointer. These functions differ from the non-secure versions  in that the format string itself is also validated. If there are any unknown or badly formed formatting specifiers, these functions generate the invalid parameter exception. In all cases, If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`. See [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md) for more information on these, and other, error codes.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_ftprintf_s`|`fprintf_s`|`fprintf_s`|`fwprintf_s`|  \n|`_ftprintf_s_l`|`_fprintf_s_l`|`_fprintf_s_l`|`_fwprintf_s_l`|  \n  \n For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`fprintf_s`, `_fprintf_s_l`|\\<stdio.h>|  \n|`fwprintf_s`, `_fwprintf_s_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_fprintf_s.c  \n// This program uses fprintf_s to format various  \n// data and print it to the file named FPRINTF_S.OUT. It  \n// then displays FPRINTF_S.OUT on the screen using the system  \n// function to invoke the operating-system TYPE command.  \n  \n#include <stdio.h>  \n#include <process.h>  \n  \nFILE *stream;  \n  \nint main( void )  \n{  \n   int    i = 10;  \n   double fp = 1.5;  \n   char   s[] = \"this is a string\";  \n   char   c = '\\n';  \n  \n   fopen_s( &stream, \"fprintf_s.out\", \"w\" );  \n   fprintf_s( stream, \"%s%c\", s, c );  \n   fprintf_s( stream, \"%d\\n\", i );  \n   fprintf_s( stream, \"%f\\n\", fp );  \n   fclose( stream );  \n   system( \"type fprintf_s.out\" );  \n}  \n```  \n  \n```Output  \nthis is a string  \n10  \n1.500000  \n```  \n  \n## .NET Framework Equivalent  \n [System::IO::StreamWriter::Write](https://msdn.microsoft.com/en-us/library/system.io.streamwriter.write.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_cprintf, _cprintf_l, _cwprintf, _cwprintf_l](../../c-runtime-library/reference/cprintf-cprintf-l-cwprintf-cwprintf-l.md)   \n [fscanf, _fscanf_l, fwscanf, _fwscanf_l](../../c-runtime-library/reference/fscanf-fscanf-l-fwscanf-fwscanf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)"}