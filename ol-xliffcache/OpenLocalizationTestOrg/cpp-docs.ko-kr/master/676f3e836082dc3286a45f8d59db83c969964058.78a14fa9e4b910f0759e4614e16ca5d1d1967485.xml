{"nodes":[{"pos":[12,66],"content":"Concurrency namespace operators (AMP) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Concurrency namespace operators (AMP) | Microsoft Docs","pos":[0,54]}]},{"content":"Concurrency namespace operators (AMP)","pos":[308,345]},{"content":"operator!=","pos":[365,375]},{"content":"operator%","pos":[393,402]},{"content":"operator*","pos":[420,429]},{"content":"operator+","pos":[452,461]},{"content":"operator-","pos":[479,488]},{"content":"operator/","pos":[503,512]},{"content":"operator==","pos":[534,544]},{"pos":[604,614],"content":"operator=="},{"content":"Determines whether the specified arguments are equal.","pos":[619,672]},{"content":"Parameters","pos":[875,885]},{"content":"The rank of the tuple arguments.","pos":[900,932]},{"content":"One of the tuples to compare.","pos":[949,978]},{"content":"One of the tuples to compare.","pos":[995,1024]},{"content":"Return Value","pos":[1034,1046]},{"pos":[1057,1101],"content":"if the tuples are equal; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if the tuples are equal; otherwise, `false`."},{"pos":[1140,1150],"content":"operator!="},{"content":"Determines whether the specified arguments are not equal.","pos":[1155,1212]},{"content":"Parameters","pos":[1415,1425]},{"content":"The rank of the tuple arguments.","pos":[1440,1472]},{"content":"One of the tuples to compare.","pos":[1489,1518]},{"content":"One of the tuples to compare.","pos":[1535,1564]},{"content":"Return Value","pos":[1574,1586]},{"pos":[1597,1645],"content":"if the tuples are not equal; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if the tuples are not equal; otherwise, `false`."},{"pos":[1684,1693],"content":"operator+"},{"content":"Computes the component-wise sum of the specified arguments.","pos":[1699,1758]},{"content":"Parameters","pos":[2462,2472]},{"content":"The rank of the tuple arguments.","pos":[2487,2519]},{"content":"One of the arguments to add.","pos":[2536,2564]},{"content":"One of the arguments to add.","pos":[2581,2609]},{"content":"Return Value","pos":[2619,2631]},{"content":"The component-wise sum of the specified arguments.","pos":[2635,2685]},{"pos":[2721,2730],"content":"operator-"},{"content":"Computes the component-wise difference between the specified arguments.","pos":[2736,2807]},{"content":"Parameters","pos":[3454,3464]},{"content":"The rank of the tuple arguments.","pos":[3479,3511]},{"content":"The argument to be subtracted from.","pos":[3528,3563]},{"content":"The argument to subtract.","pos":[3580,3605]},{"content":"Return Value","pos":[3615,3627]},{"content":"The component-wise difference between the specified arguments.","pos":[3631,3693]},{"pos":[3733,3742],"content":"operator*"},{"content":"Computes the component-wise product of the specified arguments.","pos":[3748,3811]},{"content":"Parameters","pos":[4260,4270]},{"content":"The rank of the tuple arguments.","pos":[4285,4317]},{"content":"One of the tuples to multiply.","pos":[4334,4364]},{"content":"One of the tuples to multiply.","pos":[4381,4411]},{"content":"Return Value","pos":[4421,4433]},{"content":"The component-wise product of the specified arguments.","pos":[4437,4491]},{"pos":[4531,4540],"content":"operator/"},{"content":"Computes the component-wise quotient of the specified arguments.","pos":[4545,4609]},{"content":"Parameters","pos":[5057,5067]},{"content":"The rank of the tuple arguments.","pos":[5082,5114]},{"content":"The tuple to be divided.","pos":[5131,5155]},{"content":"The tuple to divide by.","pos":[5172,5195]},{"content":"Return Value","pos":[5205,5217]},{"content":"The component-wise quotient of the specified arguments.","pos":[5221,5276]},{"pos":[5315,5324],"content":"operator%"},{"content":"Computes the modulus of the first specified argument by the second specified argument.","pos":[5330,5416]},{"content":"Parameters","pos":[5864,5874]},{"content":"The rank of the tuple arguments.","pos":[5889,5921]},{"content":"The tuple from which the modulo is calculated.","pos":[5938,5984]},{"content":"The tuple to modulo by.","pos":[6001,6024]},{"content":"Return Value","pos":[6034,6046]},{"content":"The result of the first specified argument modulus the second specified argument.","pos":[6050,6131]},{"content":"See Also","pos":[6140,6148]},{"content":"Concurrency Namespace","pos":[6153,6174]}],"content":"---\ntitle: \"Concurrency namespace operators (AMP) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 77f1ae17-1eb2-480d-8fe5-66d4c24bb91e\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\n---\n# Concurrency namespace operators (AMP)\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator%](#operator_mod)|[operator*](#operator_star)|  \n|[operator+](#operator_add)|[operator-](#operator-)|[operator/](#operator_div)|  \n|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==   \n Determines whether the specified arguments are equal.  \n  \n```  \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \nbool operator== (\n    const _Tuple_type<_Rank>& _Lhs,  \n    const _Tuple_type<_Rank>& _Rhs) restrict(amp);\n```  \n  \n### Parameters  \n `_Rank`  \n The rank of the tuple arguments.  \n  \n `_Lhs`  \n One of the tuples to compare.  \n  \n `_Rhs`  \n One of the tuples to compare.  \n  \n### Return Value  \n `true` if the tuples are equal; otherwise, `false`.  \n  \n##  <a name=\"operator_neq\"></a>  operator!=   \n Determines whether the specified arguments are not equal.  \n  \n```  \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \nbool operator!= (\n    const _Tuple_type<_Rank>& _Lhs,  \n    const _Tuple_type<_Rank>& _Rhs) restrict(amp);\n```  \n  \n### Parameters  \n `_Rank`  \n The rank of the tuple arguments.  \n  \n `_Lhs`  \n One of the tuples to compare.  \n  \n `_Rhs`  \n One of the tuples to compare.  \n  \n### Return Value  \n `true` if the tuples are not equal; otherwise, `false`.  \n  \n##  <a name=\"operator_add\"></a>  operator+   \n\n Computes the component-wise sum of the specified arguments.  \n  \n```  \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \nclass _Tuple_type> _Tuple_type<_Rank>   operator+(\n    const _Tuple_type<_Rank>& _Lhs,  \n    const _Tuple_type<_Rank>& _Rhs) restrict(amp,cpu);\n\n \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \nclass _Tuple_type> _Tuple_type<_Rank>   operator+(\n    const _Tuple_type<_Rank>& _Lhs,  \n    typename _Tuple_type<_Rank>::value_type _Rhs) restrict(amp,cpu);\n\n \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \nclass _Tuple_type> _Tuple_type<_Rank>   operator+(\n    typename _Tuple_type<_Rank>::value_type _Lhs,  \n    const _Tuple_type<_Rank>& _Rhs) restrict(amp,cpu);\n```  \n  \n### Parameters  \n `_Rank`  \n The rank of the tuple arguments.  \n  \n `_Lhs`  \n One of the arguments to add.  \n  \n `_Rhs`  \n One of the arguments to add.  \n  \n### Return Value  \n The component-wise sum of the specified arguments.  \n  \n##  <a name=\"operator-\"></a>  operator-   \n\n Computes the component-wise difference between the specified arguments.  \n  \n```  \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \n_Tuple_type<_Rank>   operator-(\n    const _Tuple_type<_Rank>& _Lhs,  \n    const _Tuple_type<_Rank>& _Rhs) restrict(amp,cpu);\n\n \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \n_Tuple_type<_Rank>   operator-(\n    const _Tuple_type<_Rank>& _Lhs,  \n    typename _Tuple_type<_Rank>::value_type _Rhs) restrict(amp,cpu);\n\n \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \n_Tuple_type<_Rank>   operator-(\n    typename _Tuple_type<_Rank>::value_type _Lhs,  \n    const _Tuple_type<_Rank>& _Rhs) restrict(amp,cpu);\n```  \n  \n### Parameters  \n `_Rank`  \n The rank of the tuple arguments.  \n  \n `_Lhs`  \n The argument to be subtracted from.  \n  \n `_Rhs`  \n The argument to subtract.  \n  \n### Return Value  \n The component-wise difference between the specified arguments.  \n  \n##  <a name=\"operator_star\"></a>  operator*   \n\n Computes the component-wise product of the specified arguments.  \n  \n```  \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \n_Tuple_type<_Rank>   operator*(\n    const _Tuple_type<_Rank>& _Lhs,  \n    typename _Tuple_type<_Rank>::value_type _Rhs) restrict(amp,cpu);\n\n \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \n_Tuple_type<_Rank>   operator*(\n    typename _Tuple_type<_Rank>::value_type _Lhs,  \n    const _Tuple_type<_Rank>& _Rhs) restrict(amp, cpu);\n```  \n  \n### Parameters  \n `_Rank`  \n The rank of the tuple arguments.  \n  \n `_Lhs`  \n One of the tuples to multiply.  \n  \n `_Rhs`  \n One of the tuples to multiply.  \n  \n### Return Value  \n The component-wise product of the specified arguments.  \n  \n\n##  <a name=\"operator_div\"></a>  operator/   \n Computes the component-wise quotient of the specified arguments.  \n  \n```  \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \n_Tuple_type<_Rank>   operator/(\n    const _Tuple_type<_Rank>& _Lhs,  \n    typename _Tuple_type<_Rank>::value_type _Rhs) restrict(amp,cpu);\n\n \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \n_Tuple_type<_Rank>   operator/(\n    typename _Tuple_type<_Rank>::value_type _Lhs,  \n    const _Tuple_type<_Rank>& _Rhs) restrict(amp,cpu);\n```  \n  \n### Parameters  \n `_Rank`  \n The rank of the tuple arguments.  \n  \n `_Lhs`  \n The tuple to be divided.  \n  \n `_Rhs`  \n The tuple to divide by.  \n  \n### Return Value  \n The component-wise quotient of the specified arguments.  \n  \n##  <a name=\"operator_mod\"></a>  operator%   \n\n Computes the modulus of the first specified argument by the second specified argument.  \n  \n```  \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \n_Tuple_type<_Rank>   operator%(\n    const _Tuple_type<_Rank>& _Lhs,  \n    typename _Tuple_type<_Rank>::value_type _Rhs) restrict(amp,cpu);\n\n \ntemplate <\n    int _Rank,  \n    template <int> class _Tuple_type  \n>  \n_Tuple_type<_Rank>   operator%(\n    typename _Tuple_type<_Rank>::value_type _Lhs,  \n    const _Tuple_type<_Rank>& _Rhs) restrict(amp,cpu);\n```  \n  \n### Parameters  \n `_Rank`  \n The rank of the tuple arguments.  \n  \n `_Lhs`  \n The tuple from which the modulo is calculated.  \n  \n `_Rhs`  \n The tuple to modulo by.  \n  \n### Return Value  \n The result of the first specified argument modulus the second specified argument.  \n  \n## See Also  \n [Concurrency Namespace ](concurrency-namespace-cpp-amp.md)\n"}