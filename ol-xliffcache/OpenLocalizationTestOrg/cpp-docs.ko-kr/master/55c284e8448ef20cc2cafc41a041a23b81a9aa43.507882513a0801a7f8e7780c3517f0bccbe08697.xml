{"nodes":[{"pos":[12,51],"content":"WeakRef::CopyTo Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"WeakRef::CopyTo Method | Microsoft Docs","pos":[0,39]}]},{"content":"WeakRef::CopyTo Method","pos":[660,682]},{"content":"Assigns a pointer to an interface, if available, to the specified pointer variable.","pos":[683,766]},{"content":"Syntax","pos":[775,781]},{"content":"Parameters","pos":[1031,1041]},{"content":"Pointer an IInspectable interface.","pos":[1052,1086]},{"content":"An error is emitted if <ph id=\"ph1\">`U`</ph> is not derived from IInspectable.","pos":[1087,1147],"source":" An error is emitted if `U` is not derived from IInspectable."},{"content":"An interface ID.","pos":[1164,1180]},{"content":"An error is emitted if <ph id=\"ph1\">`riid`</ph> is not derived from <bpt id=\"p1\">**</bpt>IWeakReference<ept id=\"p1\">**</ept>.","pos":[1181,1250],"source":" An error is emitted if `riid` is not derived from **IWeakReference**."},{"content":"A doubly-indirect pointer to IInspectable or IWeakReference.","pos":[1266,1326]},{"content":"Return Value","pos":[1335,1347]},{"content":"S_OK if successful; otherwise, an HRESULT that describes the failure.","pos":[1351,1420]},{"content":"For more information, see Remarks.","pos":[1421,1455]},{"content":"Remarks","pos":[1464,1471]},{"content":"A return value of S_OK means that this operation succeeded, but doesn't indicate whether the weak reference was resolved to a strong reference.","pos":[1475,1618]},{"content":"If S_OK is returned, test that parameter <ph id=\"ph1\">`p`</ph> is a strong reference; that is, parameter <ph id=\"ph2\">`p`</ph> isn't equal to <ph id=\"ph3\">`nullptr`</ph>.","pos":[1619,1735],"source":" If S_OK is returned, test that parameter `p` is a strong reference; that is, parameter `p` isn't equal to `nullptr`."},{"content":"Starting in the Windows 10 SDK, this method does not set the WeakRef instance to <ph id=\"ph1\">`nullptr`</ph> if the weak reference could not be obtained, so you should avoid error checking code that checks the WeakRef for <ph id=\"ph2\">`nullptr`</ph>.","pos":[1742,1956],"source":"Starting in the Windows 10 SDK, this method does not set the WeakRef instance to `nullptr` if the weak reference could not be obtained, so you should avoid error checking code that checks the WeakRef for `nullptr`."},{"content":"Instead, check <ph id=\"ph1\">`ptr`</ph> for <ph id=\"ph2\">`nullptr`</ph>.","pos":[1957,1992],"source":" Instead, check `ptr` for `nullptr`."},{"content":"Requirements","pos":[2001,2013]},{"pos":[2017,2037],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> client.h","source":"**Header:** client.h"},{"pos":[2044,2073],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::WRL","source":"**Namespace:** Microsoft::WRL"},{"content":"See Also","pos":[2082,2090]},{"content":"WeakRef Class","pos":[2095,2108]}],"content":"---\ntitle: \"WeakRef::CopyTo Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"client/Microsoft::WRL::WeakRef::CopyTo\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CopyTo method\"\nms.assetid: f83de6da-b3d4-41a6-9845-cd725ecf3b75\ncaps.latest.revision: 5\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# WeakRef::CopyTo Method\nAssigns a pointer to an interface, if available, to the specified pointer variable.  \n  \n## Syntax  \n  \n```  \nHRESULT CopyTo(  \n   REFIID riid,  \n   _Deref_out_ IInspectable** ptr  \n);  \n  \ntemplate<  \n   typename U  \n>  \nHRESULT CopyTo(  \n   _Deref_out_ U** ptr  \n);  \n  \nHRESULT CopyTo(  \n   _Deref_out_ IWeakReference** ptr  \n);  \n```  \n  \n#### Parameters  \n `U`  \n Pointer an IInspectable interface. An error is emitted if `U` is not derived from IInspectable.  \n  \n `riid`  \n An interface ID. An error is emitted if `riid` is not derived from **IWeakReference**.  \n  \n `ptr`  \n A doubly-indirect pointer to IInspectable or IWeakReference.  \n  \n## Return Value  \n S_OK if successful; otherwise, an HRESULT that describes the failure. For more information, see Remarks.  \n  \n## Remarks  \n A return value of S_OK means that this operation succeeded, but doesn't indicate whether the weak reference was resolved to a strong reference. If S_OK is returned, test that parameter `p` is a strong reference; that is, parameter `p` isn't equal to `nullptr`.  \n  \n Starting in the Windows 10 SDK, this method does not set the WeakRef instance to `nullptr` if the weak reference could not be obtained, so you should avoid error checking code that checks the WeakRef for `nullptr`. Instead, check `ptr` for `nullptr`.  \n  \n## Requirements  \n **Header:** client.h  \n  \n **Namespace:** Microsoft::WRL  \n  \n## See Also  \n [WeakRef Class](../windows/weakref-class.md)"}