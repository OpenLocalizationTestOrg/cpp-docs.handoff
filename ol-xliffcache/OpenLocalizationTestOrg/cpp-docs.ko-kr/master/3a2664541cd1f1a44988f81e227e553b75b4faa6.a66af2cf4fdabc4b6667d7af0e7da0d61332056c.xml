{"nodes":[{"pos":[12,51],"content":"const_mem_fun1_t Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"const_mem_fun1_t Class | Microsoft Docs","pos":[0,39]}]},{"pos":[715,737],"content":"const_mem_fun1_t Class","linkify":"const_mem_fun1_t Class","nodes":[{"content":"const_mem_fun1_t Class","pos":[0,22]}]},{"pos":[738,906],"content":"An adapter class that allows a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> member function that takes a single argument to be called as a binary function object when initialized with a pointer argument.","source":"An adapter class that allows a **const** member function that takes a single argument to be called as a binary function object when initialized with a pointer argument."},{"pos":[915,921],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1200,1210],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the member function of class <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> to be converted to a function object.","pos":[1223,1311],"source":" A pointer to the member function of class **Type** to be converted to a function object."},{"content":"The <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> object that the <ph id=\"ph1\">`_Pm`</ph> member function is called on.","pos":[1330,1395],"source":" The **const** object that the `_Pm` member function is called on."},{"content":"The argument that is being given to <ph id=\"ph1\">`_Pm`</ph>.","pos":[1413,1455],"source":" The argument that is being given to `_Pm`."},{"pos":[1464,1476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An adaptable binary function.","pos":[1480,1509]},{"pos":[1518,1525],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class stores a copy of <ph id=\"ph1\">`_Pm`</ph>, which must be a pointer to a member function of class <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>, in a private member object.","pos":[1529,1663],"source":"The template class stores a copy of `_Pm`, which must be a pointer to a member function of class **Type**, in a private member object."},{"content":"It defines its member function <ph id=\"ph1\">`operator()`</ph> as returning ( <bpt id=\"p1\">**</bpt>_Pleft<ept id=\"p1\">**</ept><ph id=\"ph2\">-&gt;</ph><ph id=\"ph3\">\\*</ph> <bpt id=\"p2\">*</bpt>Pm)(<ept id=\"p2\">*</ept><bpt id=\"p3\">**</bpt>Right<ept id=\"p3\">**</ept>) <bpt id=\"p4\">**</bpt>const<ept id=\"p4\">**</ept>.","pos":[1664,1765],"source":" It defines its member function `operator()` as returning ( **_Pleft**->\\* *Pm)(***Right**) **const**."},{"pos":[1774,1781],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The constructor of <ph id=\"ph1\">`const_mem_fun1_t`</ph> is not usually used directly; the helper function <ph id=\"ph2\">`mem_fun`</ph> is used to adapt member functions.","pos":[1785,1917],"source":"The constructor of `const_mem_fun1_t` is not usually used directly; the helper function `mem_fun` is used to adapt member functions."},{"content":"See <bpt id=\"p1\">[</bpt>mem_fun<ept id=\"p1\">](../standard-library/functional-functions.md#mem_fun_function)</ept> for an example of how to use member function adaptors.","pos":[1918,2048],"source":" See [mem_fun](../standard-library/functional-functions.md#mem_fun_function) for an example of how to use member function adaptors."},{"pos":[2057,2069],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2073,2098],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[2105,2123],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2132,2140],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[2144,2254],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[2257,2345],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"const_mem_fun1_t Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.const_mem_fun1_t\"\n  - \"xfunctional/std::const_mem_fun1_t\"\n  - \"std::const_mem_fun1_t\"\n  - \"const_mem_fun1_t\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"const_mem_fun1_t class\"\nms.assetid: 250fac30-9663-4133-9051-6303f76ea259\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# const_mem_fun1_t Class\nAn adapter class that allows a **const** member function that takes a single argument to be called as a binary function object when initialized with a pointer argument.  \n  \n## Syntax  \n  \n```\ntemplate <class Result, class Type, class Arg>\nclass const_mem_fun1_t\n : public binary_function<const Type *, Arg, Result>  \n{\n    explicit const_mem_fun1_t(Result (Type::* _Pm)(Arg) const);\n    Result operator()(const Type* _Pleft, Arg right) const;\n };\n```  \n  \n#### Parameters  \n `_Pm`  \n A pointer to the member function of class **Type** to be converted to a function object.  \n  \n `_Pleft`  \n The **const** object that the `_Pm` member function is called on.  \n  \n `right`  \n The argument that is being given to `_Pm`.  \n  \n## Return Value  \n An adaptable binary function.  \n  \n## Remarks  \n The template class stores a copy of `_Pm`, which must be a pointer to a member function of class **Type**, in a private member object. It defines its member function `operator()` as returning ( **_Pleft**->\\* *Pm)(***Right**) **const**.  \n  \n## Example  \n The constructor of `const_mem_fun1_t` is not usually used directly; the helper function `mem_fun` is used to adapt member functions. See [mem_fun](../standard-library/functional-functions.md#mem_fun_function) for an example of how to use member function adaptors.  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}