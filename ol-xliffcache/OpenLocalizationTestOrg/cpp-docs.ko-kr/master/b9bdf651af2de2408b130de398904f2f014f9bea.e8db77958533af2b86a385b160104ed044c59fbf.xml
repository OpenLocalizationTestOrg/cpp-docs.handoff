{"nodes":[{"pos":[12,71],"content":"Importing Data Using __declspec(dllimport) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Importing Data Using __declspec(dllimport) | Microsoft Docs","pos":[0,59]}]},{"content":"Importing Data Using __declspec(dllimport)","pos":[768,810]},{"content":"In the case of data, using <bpt id=\"p1\">**</bpt>__declspec(dllimport)<ept id=\"p1\">**</ept> is a convenience item that removes a layer of indirection.","pos":[811,922],"source":"In the case of data, using **__declspec(dllimport)** is a convenience item that removes a layer of indirection."},{"content":"When you import data from a DLL, you still have to go through the import address table.","pos":[923,1010]},{"content":"Before <bpt id=\"p1\">**</bpt>__declspec(dllimport)<ept id=\"p1\">**</ept>, this meant you had to remember to do an extra level of indirection when accessing data exported from the DLL:","pos":[1011,1154],"source":" Before **__declspec(dllimport)**, this meant you had to remember to do an extra level of indirection when accessing data exported from the DLL:"},{"content":"You would then export the data in your .DEF file:","pos":[1375,1424]},{"content":"and access it outside the DLL:","pos":[1519,1549]},{"content":"When you mark the data as <bpt id=\"p1\">**</bpt>__declspec(dllimport)<ept id=\"p1\">**</ept>, the compiler automatically generates the indirection code for you.","pos":[1628,1747],"source":"When you mark the data as **__declspec(dllimport)**, the compiler automatically generates the indirection code for you."},{"content":"You no longer have to worry about the steps above.","pos":[1748,1798]},{"content":"As stated previously, do not use <bpt id=\"p1\">**</bpt>__declspec(dllimport)<ept id=\"p1\">**</ept> declaration on the data when building the DLL.","pos":[1799,1904],"source":" As stated previously, do not use **__declspec(dllimport)** declaration on the data when building the DLL."},{"content":"Functions within the DLL do not use the import address table to access the data object; therefore, you will not have the extra level of indirection present.","pos":[1905,2061]},{"content":"To export the data automatically from the DLL, use this declaration:","pos":[2068,2136]},{"content":"See Also","pos":[2203,2211]},{"content":"Importing into an Application","pos":[2216,2245]}],"content":"---\ntitle: \"Importing Data Using __declspec(dllimport) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"dllimport\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"importing data [C++]\"\n  - \"dllimport attribute [C++], data imports\"\n  - \"__declspec(dllimport) keyword [C++]\"\n  - \"importing DLLs [C++], __declspec(dllimport)\"\nms.assetid: 0ae70b39-87c7-4181-8be9-e786e0db60b0\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Importing Data Using __declspec(dllimport)\nIn the case of data, using **__declspec(dllimport)** is a convenience item that removes a layer of indirection. When you import data from a DLL, you still have to go through the import address table. Before **__declspec(dllimport)**, this meant you had to remember to do an extra level of indirection when accessing data exported from the DLL:  \n  \n```  \n// project.h  \n#ifdef _DLL   // If accessing the data from inside the DLL  \n   ULONG ulDataInDll;  \n  \n#else         // If accessing the data from outside the DLL  \n   ULONG *ulDataInDll;  \n#endif  \n```  \n  \n You would then export the data in your .DEF file:  \n  \n```  \n// project.def  \nLIBRARY project  \nEXPORTS  \n   ulDataInDll   CONSTANT  \n```  \n  \n and access it outside the DLL:  \n  \n```  \nif (*ulDataInDll == 0L)   \n{  \n   // Do stuff here  \n}  \n```  \n  \n When you mark the data as **__declspec(dllimport)**, the compiler automatically generates the indirection code for you. You no longer have to worry about the steps above. As stated previously, do not use **__declspec(dllimport)** declaration on the data when building the DLL. Functions within the DLL do not use the import address table to access the data object; therefore, you will not have the extra level of indirection present.  \n  \n To export the data automatically from the DLL, use this declaration:  \n  \n```  \n__declspec(dllexport) ULONG ulDataInDLL;  \n```  \n  \n## See Also  \n [Importing into an Application](../build/importing-into-an-application.md)"}