{"nodes":[{"pos":[12,36],"content":"fread_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"fread_s | Microsoft Docs","pos":[0,24]}]},{"pos":[897,904],"content":"fread_s","linkify":"fread_s","nodes":[{"content":"fread_s","pos":[0,7]}]},{"content":"Reads data from a stream.","pos":[905,930]},{"content":"This version of <bpt id=\"p1\">[</bpt>fread<ept id=\"p1\">](../../c-runtime-library/reference/fread.md)</ept> has security enhancements, as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[931,1130],"source":" This version of [fread](../../c-runtime-library/reference/fread.md) has security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1139,1145],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1301,1311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Storage location for data.","pos":[1327,1353]},{"content":"Size of the destination buffer in bytes.","pos":[1376,1416]},{"content":"Size of the item to read in bytes.","pos":[1440,1474]},{"content":"Maximum number of items to be read.","pos":[1492,1527]},{"content":"Pointer to <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1546,1574],"source":" Pointer to `FILE` structure."},{"pos":[1583,1595],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`fread_s`</ph> returns the number of (whole) items that were read into the buffer, which may be less than <ph id=\"ph2\">`count`</ph> if a read error or the end of the file is encountered before <ph id=\"ph3\">`count`</ph> is reached.","pos":[1599,1788],"source":"`fread_s` returns the number of (whole) items that were read into the buffer, which may be less than `count` if a read error or the end of the file is encountered before `count` is reached."},{"content":"Use the <ph id=\"ph1\">`feof`</ph> or <ph id=\"ph2\">`ferror`</ph> function to distinguish an error from an end-of-file condition.","pos":[1789,1879],"source":" Use the `feof` or `ferror` function to distinguish an error from an end-of-file condition."},{"content":"If <ph id=\"ph1\">`size`</ph> or <ph id=\"ph2\">`count`</ph> is 0, <ph id=\"ph3\">`fread_s`</ph> returns 0 and the buffer contents are unchanged.","pos":[1880,1965],"source":" If `size` or `count` is 0, `fread_s` returns 0 and the buffer contents are unchanged."},{"content":"If <ph id=\"ph1\">`stream`</ph> or <ph id=\"ph2\">`buffer`</ph> is a null pointer, <ph id=\"ph3\">`fread_s`</ph> invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1966,2146],"source":" If `stream` or `buffer` is a null pointer, `fread_s` invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns 0.","pos":[2147,2237],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns 0."},{"pos":[2244,2404],"content":"For more information about error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2413,2420],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`fread_s`</ph> function reads up to <ph id=\"ph2\">`count`</ph> items of <ph id=\"ph3\">`elementSize`</ph> bytes from the input <ph id=\"ph4\">`stream`</ph> and stores them in <ph id=\"ph5\">`buffer`</ph>.","pos":[2424,2548],"source":"The `fread_s` function reads up to `count` items of `elementSize` bytes from the input `stream` and stores them in `buffer`."},{"content":"The file pointer that is associated with <ph id=\"ph1\">`stream`</ph> (if there is one) is increased by the number of bytes actually read.","pos":[2550,2668],"source":"  The file pointer that is associated with `stream` (if there is one) is increased by the number of bytes actually read."},{"content":"If the given stream is opened in text mode, carriage return–linefeed pairs are replaced with single linefeed characters.","pos":[2669,2789]},{"content":"The replacement has no effect on the file pointer or the return value.","pos":[2790,2860]},{"content":"The file-pointer position is indeterminate if an error occurs.","pos":[2861,2923]},{"content":"The value of a partially read item cannot be determined.","pos":[2924,2980]},{"content":"This function locks out other threads.","pos":[2987,3025]},{"content":"If you require a non-locking version, use <ph id=\"ph1\">`_fread_nolock`</ph>.","pos":[3026,3084],"source":" If you require a non-locking version, use `_fread_nolock`."},{"pos":[3093,3105],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[3112,3120]},{"content":"Required header","pos":[3121,3136]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[3192,3202],"source":"\\<stdio.h>"},{"pos":[3210,3314],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[3323,3330],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5271,5279],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[5283,5335],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fwrite<ept id=\"p1\">](../../c-runtime-library/reference/fwrite.md)</ept><ph id=\"ph1\"> </ph>","pos":[5338,5393],"source":" [fwrite](../../c-runtime-library/reference/fwrite.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_read<ept id=\"p1\">](../../c-runtime-library/reference/read.md)</ept>","pos":[5396,5447],"source":" [_read](../../c-runtime-library/reference/read.md)"}],"content":"---\ntitle: \"fread_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"fread_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"fread_s\"\n  - \"stdio/fread_s\"\ndev_langs: \n  - \"C++\"\nms.assetid: ce735de0-f005-435d-a8f2-6f4b80ac775e\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# fread_s\nReads data from a stream. This version of [fread](../../c-runtime-library/reference/fread.md) has security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nsize_t fread_s(   \n   void *buffer,  \n   size_t bufferSize,  \n   size_t elementSize,  \n   size_t count,  \n   FILE *stream   \n);  \n```  \n  \n#### Parameters  \n `buffer`  \n Storage location for data.  \n  \n `bufferSize`  \n Size of the destination buffer in bytes.  \n  \n `elementSize`  \n Size of the item to read in bytes.  \n  \n `count`  \n Maximum number of items to be read.  \n  \n `stream`  \n Pointer to `FILE` structure.  \n  \n## Return Value  \n `fread_s` returns the number of (whole) items that were read into the buffer, which may be less than `count` if a read error or the end of the file is encountered before `count` is reached. Use the `feof` or `ferror` function to distinguish an error from an end-of-file condition. If `size` or `count` is 0, `fread_s` returns 0 and the buffer contents are unchanged. If `stream` or `buffer` is a null pointer, `fread_s` invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns 0.  \n  \n For more information about error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `fread_s` function reads up to `count` items of `elementSize` bytes from the input `stream` and stores them in `buffer`.  The file pointer that is associated with `stream` (if there is one) is increased by the number of bytes actually read. If the given stream is opened in text mode, carriage return–linefeed pairs are replaced with single linefeed characters. The replacement has no effect on the file pointer or the return value. The file-pointer position is indeterminate if an error occurs. The value of a partially read item cannot be determined.  \n  \n This function locks out other threads. If you require a non-locking version, use `_fread_nolock`.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`fread_s`|\\<stdio.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```cpp  \n  \n// crt_fread_s.c  \n// Command line: cl /EHsc /nologo /W4 crt_fread_s.c  \n//  \n// This program opens a file that's named FREAD.OUT and  \n// writes characters to the file. It then tries to open  \n// FREAD.OUT and read in characters by using fread_s. If the attempt succeeds,  \n// the program displays the number of actual items read.  \n  \n#include <stdio.h>  \n  \n#define BUFFERSIZE 30  \n#define DATASIZE 22  \n#define ELEMENTCOUNT 2  \n#define ELEMENTSIZE (DATASIZE/ELEMENTCOUNT)  \n#define FILENAME \"FREAD.OUT\"  \n  \nint main( void )  \n{  \n   FILE *stream;  \n   char list[30];  \n   int  i, numread, numwritten;  \n  \n   for ( i = 0; i < DATASIZE; i++ )  \n      list[i] = (char)('z' - i);  \n   list[DATASIZE] = '\\0'; // terminal null so we can print it  \n  \n   // Open file in text mode:  \n   if( fopen_s( &stream, FILENAME, \"w+t\" ) == 0 )  \n   {  \n      // Write DATASIZE characters to stream   \n      printf( \"Contents of buffer before write/read:\\n\\t%s\\n\\n\", list );  \n      numwritten = fwrite( list, sizeof( char ), DATASIZE, stream );  \n      printf( \"Wrote %d items\\n\\n\", numwritten );  \n      fclose( stream );  \n   } else {  \n      printf( \"Problem opening the file\\n\" );  \n      return -1;  \n   }  \n  \n   if( fopen_s( &stream, FILENAME, \"r+t\" ) == 0 )   {  \n      // Attempt to read in characters in 2 blocks of 11  \n      numread = fread_s( list, BUFFERSIZE, ELEMENTSIZE, ELEMENTCOUNT, stream );  \n      printf( \"Number of %d-byte elements read = %d\\n\\n\", ELEMENTSIZE, numread );  \n      printf( \"Contents of buffer after write/read:\\n\\t%s\\n\", list );  \n      fclose( stream );  \n   } else {  \n      printf( \"File could not be opened\\n\" );  \n      return -1;  \n   }  \n}  \n```  \n  \n```Output  \nContents of buffer before write/read:   \n        zyxwvutsrqponmlkjihgfe  \n  \nWrote 22 items  \n  \nNumber of 11-byte elements read = 2  \n  \nContents of buffer after write/read:   \n        zyxwvutsrqponmlkjihgfe  \n  \n```  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [fwrite](../../c-runtime-library/reference/fwrite.md)   \n [_read](../../c-runtime-library/reference/read.md)"}