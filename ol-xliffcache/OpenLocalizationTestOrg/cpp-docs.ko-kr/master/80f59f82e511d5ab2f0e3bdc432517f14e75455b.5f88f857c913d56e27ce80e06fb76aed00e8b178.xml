{"nodes":[{"pos":[12,63],"content":"_BitScanForward, _BitScanForward64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_BitScanForward, _BitScanForward64 | Microsoft Docs","pos":[0,51]}]},{"content":"_BitScanForward, _BitScanForward64","pos":[765,799]},{"content":"Microsoft Specific","pos":[802,820]},{"content":"Search the mask data from least significant bit (LSB) to the most significant bit (MSB) for a set bit (1).","pos":[829,935]},{"content":"Syntax","pos":[944,950]},{"content":"Parameters","pos":[1161,1171]},{"content":"[out]","pos":[1175,1180]},{"content":"Loaded with the bit position of the first set bit (1) found.","pos":[1192,1252]},{"content":"[in]","pos":[1259,1263]},{"content":"The 32-bit or 64-bit value to search.","pos":[1274,1311]},{"content":"Return Value","pos":[1320,1332]},{"content":"0 if the mask is zero; nonzero otherwise.","pos":[1336,1377]},{"content":"Remarks","pos":[1386,1393]},{"content":"If a set bit is found, the bit position of the first set bit found is returned in the first parameter.","pos":[1397,1499]},{"content":"If no set bit is found, 0 is returned; otherwise, 1 is returned.","pos":[1500,1564]},{"content":"Requirements","pos":[1573,1585]},{"content":"Intrinsic","pos":[1592,1601]},{"content":"Architecture","pos":[1602,1614]},{"pos":[1676,1685],"content":"x86, ARM,"},{"pos":[1774,1778],"content":"ARM,"},{"pos":[1850,1877],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>intrin.h&gt;","source":"**Header file** \\<intrin.h>"},{"content":"Example","pos":[1886,1893]},{"content":"Input","pos":[2504,2509]},{"content":"Sample Output","pos":[2538,2551]},{"content":"END Microsoft Specific","pos":[2637,2659]},{"content":"See Also","pos":[2668,2676]},{"content":"Compiler Intrinsics","pos":[2681,2700]}],"content":"---\ntitle: \"_BitScanForward, _BitScanForward64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_BitScanForward\"\n  - \"_BitScanForward_cpp\"\n  - \"_BitScanForward64_cpp\"\n  - \"_BitScanForward64\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"_BitScanForward intrinsic\"\n  - \"bsf instruction\"\n  - \"BitScanForward intrinsic\"\nms.assetid: 405e60fb-0815-42a7-9b02-6fc035122203\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _BitScanForward, _BitScanForward64\n**Microsoft Specific**  \n  \n Search the mask data from least significant bit (LSB) to the most significant bit (MSB) for a set bit (1).  \n  \n## Syntax  \n  \n```  \nunsigned char _BitScanForward(  \n   unsigned long * Index,  \n   unsigned long Mask  \n);  \nunsigned char _BitScanForward64(  \n   unsigned long * Index,  \n   unsigned __int64 Mask  \n);  \n```  \n  \n#### Parameters  \n [out] `Index`  \n Loaded with the bit position of the first set bit (1) found.  \n  \n [in] `Mask`  \n The 32-bit or 64-bit value to search.  \n  \n## Return Value  \n 0 if the mask is zero; nonzero otherwise.  \n  \n## Remarks  \n If a set bit is found, the bit position of the first set bit found is returned in the first parameter. If no set bit is found, 0 is returned; otherwise, 1 is returned.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`_BitScanForward`|x86, ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n|`_BitScanForward64`|ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n  \n **Header file** \\<intrin.h>  \n  \n## Example  \n  \n```  \n// BitScanForward.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <intrin.h>  \nusing namespace std;  \n  \n#pragma intrinsic(_BitScanForward)  \n  \nint main()  \n{  \n   unsigned long mask = 0x1000;  \n   unsigned long index;  \n   unsigned char isNonzero;  \n  \n   cout << \"Enter a positive integer as the mask: \" << flush;  \n   cin >> mask;  \n   isNonzero = _BitScanForward(&index, mask);  \n   if (isNonzero)  \n   {  \n      cout << \"Mask: \" << mask << \" Index: \" << index << endl;  \n   }  \n   else  \n   {  \n      cout << \"No set bits found.  Mask is zero.\" << endl;  \n   }  \n}  \n```  \n  \n## Input  \n  \n```  \n12  \n```  \n  \n## Sample Output  \n  \n```  \nEnter a positive integer as the mask:   \nMask: 12 Index: 2  \n```  \n  \n### END Microsoft Specific  \n  \n## See Also  \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)"}