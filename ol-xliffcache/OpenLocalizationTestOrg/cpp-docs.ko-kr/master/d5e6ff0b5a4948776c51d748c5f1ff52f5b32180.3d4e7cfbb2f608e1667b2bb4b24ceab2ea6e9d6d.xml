{"nodes":[{"pos":[12,47],"content":"exit, _Exit, _exit | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"exit, _Exit, _exit | Microsoft Docs","pos":[0,35]}]},{"pos":[1154,1172],"content":"exit, _Exit, _exit","linkify":"exit, _Exit, _exit","nodes":[{"content":"exit, _Exit, _exit","pos":[0,18]}]},{"content":"Terminates the calling process.","pos":[1173,1204]},{"content":"The <ph id=\"ph1\">`exit`</ph> function terminates it after cleanup; <ph id=\"ph2\">`_exit`</ph> and <ph id=\"ph3\">`_Exit`</ph> terminate it immediately.","pos":[1205,1299],"source":" The `exit` function terminates it after cleanup; `_exit` and `_Exit` terminate it immediately."},{"pos":[1307,1907],"content":"[!NOTE]\n Do not use this method to shut down a Universal Windows Platform (UWP) app or a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app, except in testing or debugging scenarios. Programmatic or UI ways to close a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app are not permitted. For more information about Windows 8 and 8.1 apps, see [App lifecycle](http://go.microsoft.com/fwlink/?LinkId=262853). For more information about Windows 10 apps, see [How-to guides for Windows 10 apps](http://go.microsoft.com/fwlink/p/?linkid=619133).","leadings":["","> "],"nodes":[{"content":" Do not use this method to shut down a Universal Windows Platform (UWP) app or a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app, except in testing or debugging scenarios. Programmatic or UI ways to close a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app are not permitted. For more information about Windows 8 and 8.1 apps, see [App lifecycle](http://go.microsoft.com/fwlink/?LinkId=262853). For more information about Windows 10 apps, see [How-to guides for Windows 10 apps](http://go.microsoft.com/fwlink/p/?linkid=619133).","pos":[8,598],"nodes":[{"content":"Do not use this method to shut down a Universal Windows Platform (UWP) app or a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app, except in testing or debugging scenarios.","pos":[1,203],"source":" Do not use this method to shut down a Universal Windows Platform (UWP) app or a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app, except in testing or debugging scenarios."},{"content":"Programmatic or UI ways to close a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> app are not permitted.","pos":[204,337],"source":" Programmatic or UI ways to close a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app are not permitted."},{"content":"For more information about Windows 8 and 8.1 apps, see <bpt id=\"p1\">[</bpt>App lifecycle<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=262853)</ept>.","pos":[338,456],"source":" For more information about Windows 8 and 8.1 apps, see [App lifecycle](http://go.microsoft.com/fwlink/?LinkId=262853)."},{"content":"For more information about Windows 10 apps, see <bpt id=\"p1\">[</bpt>How-to guides for Windows 10 apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619133)</ept>.","pos":[457,590],"source":" For more information about Windows 10 apps, see [How-to guides for Windows 10 apps](http://go.microsoft.com/fwlink/p/?linkid=619133)."}]}]},{"pos":[1916,1922],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2076,2086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Exit status code.","pos":[2102,2119]},{"pos":[2128,2135],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`exit`</ph>, <ph id=\"ph2\">`_Exit`</ph> and <ph id=\"ph3\">`_exit`</ph> functions terminate the calling process.","pos":[2139,2211],"source":"The `exit`, `_Exit` and `_exit` functions terminate the calling process."},{"content":"The <ph id=\"ph1\">`exit`</ph> function calls destructors for thread-local objects, then calls—in last-in-first-out (LIFO) order—the functions that are registered by <ph id=\"ph2\">`atexit`</ph> and <ph id=\"ph3\">`_onexit`</ph>, and then flushes all file buffers before it terminates the process.","pos":[2212,2449],"source":" The `exit` function calls destructors for thread-local objects, then calls—in last-in-first-out (LIFO) order—the functions that are registered by `atexit` and `_onexit`, and then flushes all file buffers before it terminates the process."},{"content":"The <ph id=\"ph1\">`_Exit`</ph> and <ph id=\"ph2\">`_exit`</ph> functions terminate the process without destroying thread-local objects or processing <ph id=\"ph3\">`atexit`</ph> or <ph id=\"ph4\">`_onexit`</ph> functions, and without flushing stream buffers.","pos":[2450,2629],"source":" The `_Exit` and `_exit` functions terminate the process without destroying thread-local objects or processing `atexit` or `_onexit` functions, and without flushing stream buffers."},{"content":"Although the <ph id=\"ph1\">`exit`</ph>, <ph id=\"ph2\">`_Exit`</ph> and <ph id=\"ph3\">`_exit`</ph> calls do not return a value, the low-order byte of <ph id=\"ph4\">`status`</ph> is made available to the host environment or waiting calling process, if one exists, after the process exits.","pos":[2636,2846],"source":"Although the `exit`, `_Exit` and `_exit` calls do not return a value, the low-order byte of `status` is made available to the host environment or waiting calling process, if one exists, after the process exits."},{"content":"Typically, the caller sets the <ph id=\"ph1\">`status`</ph> value to 0 to indicate a normal exit, or to some other value to indicate an error.","pos":[2847,2969],"source":" Typically, the caller sets the `status` value to 0 to indicate a normal exit, or to some other value to indicate an error."},{"content":"The <ph id=\"ph1\">`status`</ph> value is available to the operating-system batch command <ph id=\"ph2\">`ERRORLEVEL`</ph> and is represented by one of two constants: <ph id=\"ph3\">`EXIT_SUCCESS`</ph>, which represents a value of 0, or <ph id=\"ph4\">`EXIT_FAILURE`</ph>, which represents a value of 1.","pos":[2970,3193],"source":" The `status` value is available to the operating-system batch command `ERRORLEVEL` and is represented by one of two constants: `EXIT_SUCCESS`, which represents a value of 0, or `EXIT_FAILURE`, which represents a value of 1."},{"pos":[3200,3296],"content":"The <ph id=\"ph1\">`exit`</ph>, <ph id=\"ph2\">`_Exit`</ph>, <ph id=\"ph3\">`_exit`</ph>, <ph id=\"ph4\">`quick_exit`</ph>, <ph id=\"ph5\">`_cexit`</ph>, and <ph id=\"ph6\">`_c_exit`</ph> functions behave as follows.","source":"The `exit`, `_Exit`, `_exit`, `quick_exit`, `_cexit`, and `_c_exit` functions behave as follows."},{"content":"Function","pos":[3303,3311]},{"content":"Description","pos":[3312,3323]},{"content":"Performs complete C library termination procedures, terminates the process, and provides the supplied status code to the host environment.","pos":[3372,3510]},{"content":"Performs minimal C library termination procedures, terminates the process, and provides the supplied status code to the host environment.","pos":[3523,3660]},{"content":"Performs minimal C library termination procedures, terminates the process, and provides the supplied status code to the host environment.","pos":[3673,3810]},{"content":"Performs quick C library termination procedures, terminates the process, and provides the supplied status code to the host environment.","pos":[3828,3963]},{"content":"Performs complete C library termination procedures and returns to the caller.","pos":[3977,4054]},{"content":"Does not terminate the process.","pos":[4055,4086]},{"content":"Performs minimal C library termination procedures and returns to the caller.","pos":[4101,4177]},{"content":"Does not terminate the process.","pos":[4178,4209]},{"content":"When you call the <ph id=\"ph1\">`exit`</ph>,  <ph id=\"ph2\">`_Exit`</ph> or <ph id=\"ph3\">`_exit`</ph> function, the destructors for any temporary or automatic objects that exist at the time of the call are not called.","pos":[4217,4378],"source":"When you call the `exit`,  `_Exit` or `_exit` function, the destructors for any temporary or automatic objects that exist at the time of the call are not called."},{"content":"An automatic object is defined in a function where the object is not declared to be static.","pos":[4379,4470]},{"content":"A temporary object is an object that's created by the compiler.","pos":[4471,4534]},{"content":"To destroy an automatic object before you call <ph id=\"ph1\">`exit`</ph>, <ph id=\"ph2\">`_Exit`</ph>, or <ph id=\"ph3\">`_exit`</ph>, explicitly call the destructor for the object, as follows:","pos":[4535,4669],"source":" To destroy an automatic object before you call `exit`, `_Exit`, or `_exit`, explicitly call the destructor for the object, as follows:"},{"content":"Do not use <ph id=\"ph1\">`DLL_PROCESS_ATTACH`</ph> to call <ph id=\"ph2\">`exit`</ph> from <ph id=\"ph3\">`DllMain`</ph>.","pos":[4723,4785],"source":"Do not use `DLL_PROCESS_ATTACH` to call `exit` from `DllMain`."},{"content":"If you want to exit the <ph id=\"ph1\">`DLLMain`</ph> function, return <ph id=\"ph2\">`FALSE`</ph> from <ph id=\"ph3\">`DLL_PROCESS_ATTACH`</ph>.","pos":[4786,4871],"source":" If you want to exit the `DLLMain` function, return `FALSE` from `DLL_PROCESS_ATTACH`."},{"pos":[4880,4892],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[4899,4907]},{"content":"Required header","pos":[4908,4923]},{"pos":[4969,4993],"content":"<ph id=\"ph1\">`exit`</ph>, <ph id=\"ph2\">`_Exit`</ph>, <ph id=\"ph3\">`_exit`</ph>","source":"`exit`, `_Exit`, `_exit`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>process.h&gt; or <ph id=\"ph2\">\\&lt;</ph>stdlib.h&gt;","pos":[4994,5021],"source":"\\<process.h> or \\<stdlib.h>"},{"pos":[5029,5133],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[5142,5149],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5358,5383],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[5387,5502],"content":"<bpt id=\"p1\">[</bpt>System::Diagnostics::Process::Kill<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.kill.aspx)</ept>","source":"[System::Diagnostics::Process::Kill](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.kill.aspx)"},{"pos":[5511,5519],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Process and Environment Control<ept id=\"p1\">](../../c-runtime-library/process-and-environment-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[5523,5617],"source":"[Process and Environment Control](../../c-runtime-library/process-and-environment-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>abort<ept id=\"p1\">](../../c-runtime-library/reference/abort.md)</ept><ph id=\"ph1\"> </ph>","pos":[5620,5673],"source":" [abort](../../c-runtime-library/reference/abort.md) "},{"content":"<bpt id=\"p1\"> [</bpt>atexit<ept id=\"p1\">](../../c-runtime-library/reference/atexit.md)</ept><ph id=\"ph1\"> </ph>","pos":[5676,5731],"source":" [atexit](../../c-runtime-library/reference/atexit.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_cexit, _c_exit<ept id=\"p1\">](../../c-runtime-library/reference/cexit-c-exit.md)</ept><ph id=\"ph1\"> </ph>","pos":[5734,5804],"source":" [_cexit, _c_exit](../../c-runtime-library/reference/cexit-c-exit.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_exec, _wexec Functions<ept id=\"p1\">](../../c-runtime-library/exec-wexec-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[5807,5883],"source":" [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_onexit, _onexit_m<ept id=\"p1\">](../../c-runtime-library/reference/onexit-onexit-m.md)</ept><ph id=\"ph1\"> </ph>","pos":[5886,5962],"source":" [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md) "},{"content":"<bpt id=\"p1\"> [</bpt>quick_exit<ept id=\"p1\">](../../c-runtime-library/reference/quick-exit1.md)</ept><ph id=\"ph1\"> </ph>","pos":[5965,6029],"source":" [quick_exit](../../c-runtime-library/reference/quick-exit1.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_spawn, _wspawn Functions<ept id=\"p1\">](../../c-runtime-library/spawn-wspawn-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[6032,6112],"source":" [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>system, _wsystem<ept id=\"p1\">](../../c-runtime-library/reference/system-wsystem.md)</ept>","pos":[6115,6187],"source":" [system, _wsystem](../../c-runtime-library/reference/system-wsystem.md)"}],"content":"---\ntitle: \"exit, _Exit, _exit | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_exit\"\n  - \"exit\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"Exit\"\n  - \"_exit\"\n  - \"process/exit\"\n  - \"process/_Exit\"\n  - \"stdlib/exit\"\n  - \"stdlib/_Exit\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"exit function\"\n  - \"_exit function\"\n  - \"processes, terminating\"\n  - \"function calls, terminating\"\n  - \"process termination, calling\"\nms.assetid: b1501fa6-27c2-478c-9e93-cc4fd802a01f\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# exit, _Exit, _exit\nTerminates the calling process. The `exit` function terminates it after cleanup; `_exit` and `_Exit` terminate it immediately.  \n  \n> [!NOTE]\n>  Do not use this method to shut down a Universal Windows Platform (UWP) app or a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app, except in testing or debugging scenarios. Programmatic or UI ways to close a [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] app are not permitted. For more information about Windows 8 and 8.1 apps, see [App lifecycle](http://go.microsoft.com/fwlink/?LinkId=262853). For more information about Windows 10 apps, see [How-to guides for Windows 10 apps](http://go.microsoft.com/fwlink/p/?linkid=619133).  \n  \n## Syntax  \n  \n```  \nvoid exit(   \n   int const status   \n);  \nvoid _Exit(   \n   int const status   \n);  \nvoid _exit(   \n   int const status   \n);  \n```  \n  \n#### Parameters  \n `status`  \n Exit status code.  \n  \n## Remarks  \n The `exit`, `_Exit` and `_exit` functions terminate the calling process. The `exit` function calls destructors for thread-local objects, then calls—in last-in-first-out (LIFO) order—the functions that are registered by `atexit` and `_onexit`, and then flushes all file buffers before it terminates the process. The `_Exit` and `_exit` functions terminate the process without destroying thread-local objects or processing `atexit` or `_onexit` functions, and without flushing stream buffers.  \n  \n Although the `exit`, `_Exit` and `_exit` calls do not return a value, the low-order byte of `status` is made available to the host environment or waiting calling process, if one exists, after the process exits. Typically, the caller sets the `status` value to 0 to indicate a normal exit, or to some other value to indicate an error. The `status` value is available to the operating-system batch command `ERRORLEVEL` and is represented by one of two constants: `EXIT_SUCCESS`, which represents a value of 0, or `EXIT_FAILURE`, which represents a value of 1.  \n  \n The `exit`, `_Exit`, `_exit`, `quick_exit`, `_cexit`, and `_c_exit` functions behave as follows.  \n  \n|Function|Description|  \n|--------------|-----------------|  \n|`exit`|Performs complete C library termination procedures, terminates the process, and provides the supplied status code to the host environment.|  \n|`_Exit`|Performs minimal C library termination procedures, terminates the process, and provides the supplied status code to the host environment.|  \n|`_exit`|Performs minimal C library termination procedures, terminates the process, and provides the supplied status code to the host environment.|  \n|`quick_exit`|Performs quick C library termination procedures, terminates the process, and provides the supplied status code to the host environment.|  \n|`_cexit`|Performs complete C library termination procedures and returns to the caller. Does not terminate the process.|  \n|`_c_exit`|Performs minimal C library termination procedures and returns to the caller. Does not terminate the process.|  \n  \n When you call the `exit`,  `_Exit` or `_exit` function, the destructors for any temporary or automatic objects that exist at the time of the call are not called. An automatic object is defined in a function where the object is not declared to be static. A temporary object is an object that's created by the compiler. To destroy an automatic object before you call `exit`, `_Exit`, or `_exit`, explicitly call the destructor for the object, as follows:  \n  \n```  \nmyObject.myClass::~myClass();  \n```  \n  \n Do not use `DLL_PROCESS_ATTACH` to call `exit` from `DllMain`. If you want to exit the `DLLMain` function, return `FALSE` from `DLL_PROCESS_ATTACH`.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`exit`, `_Exit`, `_exit`|\\<process.h> or \\<stdlib.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_exit.c  \n// This program returns an exit code of 1. The  \n// error code could be tested in a batch file.  \n  \n#include <stdlib.h>  \n  \nint main( void )  \n{  \n   exit( 1 );  \n}  \n```  \n  \n## .NET Framework Equivalent  \n [System::Diagnostics::Process::Kill](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.kill.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [abort](../../c-runtime-library/reference/abort.md)   \n [atexit](../../c-runtime-library/reference/atexit.md)   \n [_cexit, _c_exit](../../c-runtime-library/reference/cexit-c-exit.md)   \n [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md)   \n [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md)   \n [quick_exit](../../c-runtime-library/reference/quick-exit1.md)   \n [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)   \n [system, _wsystem](../../c-runtime-library/reference/system-wsystem.md)"}