{"nodes":[{"pos":[12,35],"content":"thread | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"thread | Microsoft Docs","pos":[0,23]}]},{"content":"thread","pos":[754,760]},{"content":"Microsoft Specific","pos":[763,781]},{"content":"The <bpt id=\"p1\">**</bpt>thread<ept id=\"p1\">**</ept> extended storage-class modifier is used to declare a thread local variable.","pos":[790,880],"source":"The **thread** extended storage-class modifier is used to declare a thread local variable."},{"content":"For the portable equivalent in C++11, use the <bpt id=\"p1\">[</bpt>thread_local<ept id=\"p1\">](../cpp/storage-classes-cpp.md#thread_local)</ept> storage class specifier.","pos":[881,1010],"source":" For the portable equivalent in C++11, use the [thread_local](../cpp/storage-classes-cpp.md#thread_local) storage class specifier."},{"content":"Syntax","pos":[1019,1025]},{"content":"Remarks","pos":[1086,1093]},{"content":"Thread Local Storage (TLS) is the mechanism by which each thread in a multithreaded process allocates storage for thread-specific data.","pos":[1097,1232]},{"content":"In standard multithreaded programs, data is shared among all threads of a given process, whereas thread local storage is the mechanism for allocating per-thread data.","pos":[1233,1399]},{"content":"For a complete discussion of threads, see <bpt id=\"p1\">[</bpt>Multithreading<ept id=\"p1\">](../parallel/multithreading-support-for-older-code-visual-cpp.md)</ept>.","pos":[1400,1524],"source":" For a complete discussion of threads, see [Multithreading](../parallel/multithreading-support-for-older-code-visual-cpp.md)."},{"content":"Declarations of thread local variables must use <bpt id=\"p1\">[</bpt>extended attribute syntax<ept id=\"p1\">](../cpp/declspec.md)</ept> and the <ph id=\"ph1\">`__declspec`</ph> keyword with the <bpt id=\"p2\">**</bpt>thread<ept id=\"p2\">**</ept> keyword.","pos":[1531,1684],"source":"Declarations of thread local variables must use [extended attribute syntax](../cpp/declspec.md) and the `__declspec` keyword with the **thread** keyword."},{"content":"For example, the following code declares an integer thread local variable and initializes it with a value:","pos":[1685,1791]},{"content":"You must observe these guidelines when declaring thread local objects and variables:","pos":[1851,1935]},{"pos":[1945,2103],"content":"You can apply the <bpt id=\"p1\">**</bpt>thread<ept id=\"p1\">**</ept> attribute only to class and data declarations and definitions; <bpt id=\"p2\">**</bpt>thread<ept id=\"p2\">**</ept> cannot be used on function declarations or definitions.","source":"You can apply the **thread** attribute only to class and data declarations and definitions; **thread** cannot be used on function declarations or definitions."},{"pos":[2113,2263],"content":"The use of the <bpt id=\"p1\">**</bpt>thread<ept id=\"p1\">**</ept> attribute may interfere with <bpt id=\"p2\">[</bpt>delay loading<ept id=\"p2\">](../build/reference/linker-support-for-delay-loaded-dlls.md)</ept> of DLL imports<bpt id=\"p3\">**</bpt>.<ept id=\"p3\">**</ept>","source":"The use of the **thread** attribute may interfere with [delay loading](../build/reference/linker-support-for-delay-loaded-dlls.md) of DLL imports**.**"},{"pos":[2273,2407],"content":"On XP systems, <ph id=\"ph1\">`thread`</ph> may not function correctly if a DLL uses __declspec(thread) data and it is loaded dynamically via LoadLibrary.","source":"On XP systems, `thread` may not function correctly if a DLL uses __declspec(thread) data and it is loaded dynamically via LoadLibrary."},{"content":"You can specify the <bpt id=\"p1\">**</bpt>thread<ept id=\"p1\">**</ept> attribute only on data items with static storage duration.","pos":[2417,2506],"source":"You can specify the **thread** attribute only on data items with static storage duration."},{"content":"This includes global data objects (both <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`extern`</ph>), local static objects, and static data members of classes.","pos":[2507,2630],"source":" This includes global data objects (both **static** and `extern`), local static objects, and static data members of classes."},{"content":"You cannot declare automatic data objects with the <bpt id=\"p1\">**</bpt>thread<ept id=\"p1\">**</ept> attribute.","pos":[2631,2703],"source":" You cannot declare automatic data objects with the **thread** attribute."},{"pos":[2713,2896],"content":"You must use the <bpt id=\"p1\">**</bpt>thread<ept id=\"p1\">**</ept> attribute for the declaration and the definition of a thread local object, whether the declaration and definition occur in the same file or separate files.","source":"You must use the **thread** attribute for the declaration and the definition of a thread local object, whether the declaration and definition occur in the same file or separate files."},{"pos":[2906,2965],"content":"You cannot use the <bpt id=\"p1\">**</bpt>thread<ept id=\"p1\">**</ept> attribute as a type modifier.","source":"You cannot use the **thread** attribute as a type modifier."},{"pos":[2975,3105],"content":"Because the declaration of objects that use the <bpt id=\"p1\">**</bpt>thread<ept id=\"p1\">**</ept> attribute is permitted, these two examples are semantically equivalent:","source":"Because the declaration of objects that use the **thread** attribute is permitted, these two examples are semantically equivalent:"},{"content":"Standard C permits initialization of an object or variable with an expression involving a reference to itself, but only for objects of nonstatic extent.","pos":[3458,3610]},{"content":"Although C++ normally permits such dynamic initialization of an object with an expression involving a reference to itself, this type of initialization is not permitted with thread local objects.","pos":[3611,3805]},{"content":"For example:","pos":[3806,3818]},{"pos":[4060,4205],"content":"Note that a <ph id=\"ph1\">`sizeof`</ph> expression that includes the object being initialized does not constitute a reference to itself and is allowed in C and C++.","source":"Note that a `sizeof` expression that includes the object being initialized does not constitute a reference to itself and is allowed in C and C++."},{"content":"END Microsoft Specific","pos":[4214,4236]},{"content":"See Also","pos":[4247,4255]},{"content":"__declspec","pos":[4260,4270]},{"content":"Keywords","pos":[4297,4305]},{"content":"Thread Local Storage (TLS)","pos":[4336,4362]}],"content":"---\ntitle: \"thread | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"thread\"\n  - \"thread_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"thread local storage (TLS)\"\n  - \"thread __declspec keyword\"\n  - \"TLS (thread local storage), compiler implementation\"\n  - \"__declspec keyword [C++], thread\"\nms.assetid: 667f2a77-6d1f-4b41-bee8-05e67324fab8\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# thread\n**Microsoft Specific**  \n  \n The **thread** extended storage-class modifier is used to declare a thread local variable. For the portable equivalent in C++11, use the [thread_local](../cpp/storage-classes-cpp.md#thread_local) storage class specifier.  \n  \n## Syntax  \n  \n```  \n  \n__declspec( thread ) declarator  \n```  \n  \n## Remarks  \n Thread Local Storage (TLS) is the mechanism by which each thread in a multithreaded process allocates storage for thread-specific data. In standard multithreaded programs, data is shared among all threads of a given process, whereas thread local storage is the mechanism for allocating per-thread data. For a complete discussion of threads, see [Multithreading](../parallel/multithreading-support-for-older-code-visual-cpp.md).  \n  \n Declarations of thread local variables must use [extended attribute syntax](../cpp/declspec.md) and the `__declspec` keyword with the **thread** keyword. For example, the following code declares an integer thread local variable and initializes it with a value:  \n  \n```  \n__declspec( thread ) int tls_i = 1;  \n```  \n  \n You must observe these guidelines when declaring thread local objects and variables:  \n  \n-   You can apply the **thread** attribute only to class and data declarations and definitions; **thread** cannot be used on function declarations or definitions.  \n  \n-   The use of the **thread** attribute may interfere with [delay loading](../build/reference/linker-support-for-delay-loaded-dlls.md) of DLL imports**.**  \n  \n-   On XP systems, `thread` may not function correctly if a DLL uses __declspec(thread) data and it is loaded dynamically via LoadLibrary.  \n  \n-   You can specify the **thread** attribute only on data items with static storage duration. This includes global data objects (both **static** and `extern`), local static objects, and static data members of classes. You cannot declare automatic data objects with the **thread** attribute.  \n  \n-   You must use the **thread** attribute for the declaration and the definition of a thread local object, whether the declaration and definition occur in the same file or separate files.  \n  \n-   You cannot use the **thread** attribute as a type modifier.  \n  \n-   Because the declaration of objects that use the **thread** attribute is permitted, these two examples are semantically equivalent:  \n  \n    ```  \n    // declspec_thread_2.cpp  \n    // compile with: /LD  \n    __declspec( thread ) class B {  \n    public:  \n       int data;  \n    } BObject;   // BObject declared thread local.  \n  \n    class B2 {  \n    public:  \n       int data;  \n    };  \n    __declspec( thread ) B2 BObject2;   // BObject2 declared thread local.  \n    ```  \n  \n-   Standard C permits initialization of an object or variable with an expression involving a reference to itself, but only for objects of nonstatic extent. Although C++ normally permits such dynamic initialization of an object with an expression involving a reference to itself, this type of initialization is not permitted with thread local objects. For example:  \n  \n    ```  \n    // declspec_thread_3.cpp  \n    // compile with: /LD  \n    #define Thread __declspec( thread )  \n    int j = j;   // Okay in C++; C error  \n    Thread int tls_i = sizeof( tls_i );   // Okay in C and C++  \n    ```  \n  \n     Note that a `sizeof` expression that includes the object being initialized does not constitute a reference to itself and is allowed in C and C++.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [__declspec](../cpp/declspec.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n [Thread Local Storage (TLS)](../parallel/thread-local-storage-tls.md)"}