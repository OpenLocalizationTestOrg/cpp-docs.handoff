{"nodes":[{"pos":[12,43],"content":"ptr::operator! | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ptr::operator! | Microsoft Docs","pos":[0,31],"nodes":[{"content":"ptr::operator!","pos":[0,14]},{"content":"| Microsoft Docs","pos":[15,31]}]}]},{"content":"ptr::operator!","pos":[686,700]},{"content":"Operator to determine if the owned COM object is invalid.","pos":[701,758]},{"content":"Syntax","pos":[767,773]},{"content":"Return Value","pos":[817,829]},{"pos":[840,894],"content":"if the owned COM object is invalid; <ph id=\"ph1\">`false`</ph> otherwise.","source":" if the owned COM object is invalid; `false` otherwise."},{"content":"Remarks","pos":[903,910]},{"pos":[914,967],"content":"The owned COM object is valid if it is not <ph id=\"ph1\">`nullptr`</ph>.","source":"The owned COM object is valid if it is not `nullptr`."},{"content":"Example","pos":[976,983]},{"content":"This example implements a CLR class that uses a <ph id=\"ph1\">`com::ptr`</ph> to wrap its private member <ph id=\"ph2\">`IXMLDOMDocument`</ph> object.","pos":[987,1098],"source":"This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object."},{"content":"The <ph id=\"ph1\">`CreateInstance`</ph> member function uses <ph id=\"ph2\">`operator!`</ph> to determine if a document object is already owned, and only creates a new instance if the object is invalid.","pos":[1100,1263],"source":"  The `CreateInstance` member function uses `operator!` to determine if a document object is already owned, and only creates a new instance if the object is invalid."},{"content":"Requirements","pos":[2446,2458]},{"pos":[2462,2496],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\com\\ptr.h&gt;","source":"**Header file** \\<msclr\\com\\ptr.h>"},{"pos":[2503,2527],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr::com","source":"**Namespace** msclr::com"},{"content":"See Also","pos":[2536,2544]},{"content":"ptr Members","pos":[2549,2560]},{"content":"ptr::operator bool","pos":[2593,2611]}],"content":"---\ntitle: \"ptr::operator! | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ptr::operator!\"\n  - \"msclr::com::ptr::operator!\"\n  - \"ptr.operator!\"\n  - \"msclr.com.ptr.operator!\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ptr::operator!\"\nms.assetid: 7f4101dc-2045-42e7-abb1-6a30e17147f2\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ptr::operator!\nOperator to determine if the owned COM object is invalid.  \n  \n## Syntax  \n  \n```  \nbool operator!();  \n```  \n  \n## Return Value  \n `true` if the owned COM object is invalid; `false` otherwise.  \n  \n## Remarks  \n The owned COM object is valid if it is not `nullptr`.  \n  \n## Example  \n This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object.  The `CreateInstance` member function uses `operator!` to determine if a document object is already owned, and only creates a new instance if the object is invalid.  \n  \n```  \n// comptr_op_not.cpp  \n// compile with: /clr /link msxml2.lib  \n#include <msxml2.h>  \n#include <msclr\\com\\ptr.h>  \n  \n#import <msxml3.dll> raw_interfaces_only  \n  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \nusing namespace msclr;  \n  \n// a ref class that uses a com::ptr to contain an   \n// IXMLDOMDocument object  \nref class XmlDocument {  \npublic:  \n   void CreateInstance(String^ progid) {  \n      if (!m_ptrDoc) {  \n         m_ptrDoc.CreateInstance(progid);     \n         if (m_ptrDoc) {  \n            Console::WriteLine(\"DOM Document created.\");  \n         }  \n      }  \n   }  \n  \n   // note that the destructor will call the com::ptr destructor  \n   // and automatically release the reference to the COM object  \n  \nprivate:  \n   com::ptr<IXMLDOMDocument> m_ptrDoc;  \n};  \n  \n// use the ref class to handle an XML DOM Document object  \nint main() {  \n   try {  \n      XmlDocument doc;  \n      // create the instance from a progid string  \n      doc.CreateInstance(\"Msxml2.DOMDocument.3.0\");  \n   }  \n   catch (Exception^ e) {  \n      Console::WriteLine(e);     \n   }  \n}  \n```  \n  \n```Output  \nDOM Document created.  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\com\\ptr.h>  \n  \n **Namespace** msclr::com  \n  \n## See Also  \n [ptr Members](../dotnet/ptr-members.md)   \n [ptr::operator bool](../dotnet/ptr-operator-bool.md)"}