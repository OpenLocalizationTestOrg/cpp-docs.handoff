<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f79480b426fd0e75edcca0f8714fed60b9fbbba8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\colesafearray-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50b5c9a6def39fc64585c81bcee811692acefcc5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa28c751107e6f4826c9fff6c1f6be8679dcf6f9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>COleSafeArray Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>COleSafeArray Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A class for working with arrays of arbitrary type and dimension.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>COleSafeArray::COleSafeArray</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>COleSafeArray::AccessData</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the array data.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>COleSafeArray::AllocData</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Allocates memory for the array.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>COleSafeArray::AllocDescriptor</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Allocates memory for the safe array descriptor.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Attach</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gives control of the existing <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> array to the <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Clear</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Frees all data in the underlying <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Copy</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creates a copy of an existing array.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Create</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Creates a safe array.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>COleSafeArray::CreateOneDim</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creates a one-dimensional <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Destroy</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Destroys an existing array.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>COleSafeArray::DestroyData</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Destroys data in a safe array.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>COleSafeArray::DestroyDescriptor</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Destroys a descriptor of a safe array.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Detach</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Detaches the <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> array from the <ph id="ph1">`COleSafeArray`</ph> object (so that the data will not be freed).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetByteArray</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Copies the contents of the safe array into a <bpt id="p1">[</bpt>CByteArray<ept id="p1">](../../mfc/reference/cbytearray-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetDim</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns the number of dimensions in the array.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetElement</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Retrieves a single element of the safe array.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetElemSize</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns the size, in bytes, of one element in a safe array.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetLBound</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns the lower bound for any dimension of a safe array.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetOneDimSize</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the one-dimensional <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetUBound</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns the upper bound for any dimension of a safe array.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Lock</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Increments the lock count of an array and places a pointer to the array data in the array descriptor.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>COleSafeArray::PtrOfIndex</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the indexed element.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>COleSafeArray::PutElement</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Assigns a single element into the array.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Redim</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Changes the least significant (rightmost) bound of a safe array.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>COleSafeArray::ResizeOneDim</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Changes the number of elements in a one-dimensional <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>COleSafeArray::UnaccessData</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Decrements the lock count of an array and invalidates the pointer retrieved by <ph id="ph1">`AccessData`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Unlock</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Decrements the lock count of an array so it can be freed or resized.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>COleSafeArray::operator LPCVARIANT</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Accesses the underlying <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> structure of the <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>COleSafeArray::operator LPVARIANT</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Accesses the underlying <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> structure of the <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>COleSafeArray::operator =</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Copies values into a <ph id="ph1">`COleSafeArray`</ph> object ( <bpt id="p1">**</bpt>SAFEARRAY<ept id="p1">**</ept>, <bpt id="p2">**</bpt>VARIANT<ept id="p2">**</ept>, <ph id="ph2">`COleVariant`</ph>, or <ph id="ph3">`COleSafeArray`</ph> array).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>COleSafeArray::operator ==</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Compares two variant arrays ( <bpt id="p1">**</bpt>SAFEARRAY<ept id="p1">**</ept>, <bpt id="p2">**</bpt>VARIANT<ept id="p2">**</ept>, <ph id="ph1">`COleVariant`</ph>, or <ph id="ph2">`COleSafeArray`</ph> arrays).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>COleSafeArray::operator</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Outputs the contents of a <ph id="ph1">`COleSafeArray`</ph> object to the dump context.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>derives from the OLE <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The OLE <bpt id="p1">**</bpt>SAFEARRAY<ept id="p1">**</ept> member functions are available through <ph id="ph1">`COleSafeArray`</ph>, as well as a set of member functions specifically designed for one-dimensional arrays of bytes.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdisp.h</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>COleSafeArray::AccessData</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the array data.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A pointer to a pointer to the array data.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id="p2">[</bpt>COleException<ept id="p2">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>NVC_MFCOleContainer#26</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>COleSafeArray::AllocData</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Allocates memory for a safe array.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id="p2">[</bpt>COleException<ept id="p2">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>COleSafeArray::AllocDescriptor</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Allocates memory for the descriptor of a safe array.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Number of dimensions in the safe array.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id="p2">[</bpt>COleException<ept id="p2">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Attach</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Gives control of the data in an existing <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> array to the <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>varSrc</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>varSrc<ept id="p1">*</ept> parameter must have the <bpt id="p2">[</bpt>VARTYPE<ept id="p2">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept><bpt id="p3">**</bpt>VT_ARRAY<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The source <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept>'s type is set to <ph id="ph1">`VT_EMPTY`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This function clears the current array data, if any.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>COleSafeArray::AccessData<ept id="p1">](#colesafearray__accessdata)</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Clear</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Clears the safe array.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The function clears a safe array by setting the <ph id="ph1">`VARTYPE`</ph> of the object to <ph id="ph2">`VT_EMPTY`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The current contents are released and the array is freed.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>COleSafeArray::COleSafeArray</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>An existing <ph id="ph1">`COleSafeArray`</ph> object or <bpt id="p1">**</bpt>SAFEARRAY<ept id="p1">**</ept> to be copied into the new <ph id="ph2">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>VARTYPE<ept id="p1">**</ept> of the new <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>SAFEARRAY<ept id="p1">**</ept> to be copied into the new <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>varSrc</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>An existing <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> or <ph id="ph1">`COleVariant`</ph> object to be copied into the new <ph id="ph2">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> object to be copied into the new <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>All of these constructors create new <ph id="ph1">`COleSafeArray`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If there is no parameter, an empty <ph id="ph1">`COleSafeArray`</ph> object is created ( <ph id="ph2">`VT_EMPTY`</ph>).</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`COleSafeArray`</ph> is copied from another array whose <bpt id="p1">[</bpt>VARTYPE<ept id="p1">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> is known implicitly (a <ph id="ph2">`COleSafeArray`</ph>, <ph id="ph3">`COleVariant`</ph>, or <bpt id="p2">**</bpt>VARIANT<ept id="p2">**</ept>), the <bpt id="p3">**</bpt>VARTYPE<ept id="p3">**</ept> of the source array is retained and need not be specified.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`COleSafeArray`</ph> is copied from another array whose <bpt id="p1">**</bpt>VARTYPE<ept id="p1">**</ept> is not known ( <bpt id="p2">**</bpt>SAFEARRAY<ept id="p2">**</ept>), the <bpt id="p3">**</bpt>VARTYPE<ept id="p3">**</ept> must be specified in the <ph id="ph2">`vtSrc`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id="p2">[</bpt>COleException<ept id="p2">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Copy</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Creates a copy of an existing safe array.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>ppsa</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Pointer to a location in which to return the new array descriptor.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id="p2">[</bpt>COleException<ept id="p2">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Create</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Allocates and initializes the data for the array.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The base type of the array (that is, the <bpt id="p1">**</bpt>VARTYPE<ept id="p1">**</ept> of each element of the array).</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>VARTYPE<ept id="p1">**</ept> is restricted to a subset of the variant types.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Neither the <bpt id="p1">**</bpt>VT_ARRAY<ept id="p1">**</ept> nor the <bpt id="p2">**</bpt>VT_BYREF<ept id="p2">**</ept> flag can be set.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>and <bpt id="p1">**</bpt>VT_NULL<ept id="p1">**</ept> are not valid base types for the array.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>All other types are legal.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Number of dimensions in the array.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This can be changed after the array is created with <bpt id="p1">[</bpt>Redim<ept id="p1">](#colesafearray__redim)</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>rgElements</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Pointer to an array of the number of elements for each dimension in the array.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>rgsabounds</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Pointer to a vector of bounds (one for each dimension) to allocate for the array.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This function will clear the current array data if necessary.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>NVC_MFCOleContainer#27</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>COleSafeArray::CreateOneDim</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Creates a new one-dimensional <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The base type of the array (that is, the <bpt id="p1">**</bpt>VARTYPE<ept id="p1">**</ept> of each element of the array).</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Number of elements in the array.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>This can be changed after the array is created with <bpt id="p1">[</bpt>ResizeOneDim<ept id="p1">](#colesafearray__resizeonedim)</ept>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Pointer to the data to copy into the array.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>nLBound</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The lower bound of the array.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The function allocates and initializes the data for the array, copying the specified data if the pointer <ph id="ph1">`pvSrcData`</ph> is not <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>NVC_MFCOleContainer#28</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Destroy</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Destroys an existing array descriptor and all the data in the array.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If objects are stored in the array, each object is released.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id="p2">[</bpt>COleException<ept id="p2">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>COleSafeArray::DestroyData</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Destroys all the data in a safe array.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>If objects are stored in the array, each object is released.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id="p2">[</bpt>COleException<ept id="p2">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>COleSafeArray::DestroyDescriptor</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Destroys a descriptor of a safe array.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id="p2">[</bpt>COleException<ept id="p2">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Detach</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Detaches the <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> data from the <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The underlying <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> value in the <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The function detaches the data in a safe array by setting the <bpt id="p1">[</bpt>VARTYPE<ept id="p1">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> of the object to <ph id="ph1">`VT_EMPTY`</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>It is the caller's responsibility to free the array by calling the Windows function <bpt id="p1">[</bpt>VariantClear<ept id="p1">](http://msdn.microsoft.com/en-us/28741d81-8404-4f85-95d3-5c209ec13835)</ept>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>COleException<ept id="p1">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>COleSafeArray::PutElement<ept id="p1">](#colesafearray__putelement)</ept>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetByteArray</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Copies the contents of the safe array into a <ph id="ph1">`CByteArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CByteArray<ept id="p1">](../../mfc/reference/cbytearray-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetDim</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Returns the number of dimensions in the <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The number of dimensions in the safe array.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>NVC_MFCOleContainer#27</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetElement</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Retrieves a single element of the safe array.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Pointer to an array of indexes for each dimension of the array.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Pointer to the location to place the element of the array.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>This function automatically calls the windows functions <ph id="ph1">`SafeArrayLock`</ph> and <ph id="ph2">`SafeArrayUnlock`</ph> before and after retrieving the element.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>If the data element is a string, object, or variant, the function copies the element in the correct way.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The parameter <ph id="ph1">`pvData`</ph> should point to a large enough buffer to contain the element.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id="p2">[</bpt>COleException<ept id="p2">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>NVC_MFCOleContainer#29</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetElemSize</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Retrieves the size of an element in a <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the elements of a safe array.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetLBound</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Returns the lower bound for any dimension of a <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The array dimension for which to get the lower bound.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>pLBound</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Pointer to the location to return the lower bound.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>COleException<ept id="p1">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>NVC_MFCOleContainer#30</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetOneDimSize</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the one-dimensional <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The number of elements in the one-dimensional safe array.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>COleSafeArray::CreateOneDim<ept id="p1">](#colesafearray__createonedim)</ept>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>COleSafeArray::GetUBound</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Returns the upper bound for any dimension of a safe array.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The array dimension for which to get the upper bound.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>pUBound</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Pointer to the location to return the upper bound.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>COleException<ept id="p1">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>NVC_MFCOleContainer#31</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Lock</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Increments the lock count of an array and place a pointer to the array data in the array descriptor.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>On error, it throws a <bpt id="p1">[</bpt>COleException<ept id="p1">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The pointer in the array descriptor is valid until <ph id="ph1">`Unlock`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Calls to <ph id="ph1">`Lock`</ph> can be nested; an equal number of calls to <ph id="ph2">`Unlock`</ph> are required.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>An array cannot be deleted while it is locked.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>COleSafeArray::operator LPCVARIANT</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Call this casting operator to access the underlying <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> structure for this <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>COleSafeArray::operator LPVARIANT</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Call this casting operator to access the underlying <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> structure for this <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Note that changing the value in the <bpt id="p1">**</bpt>VARIANT<ept id="p1">**</ept> structure accessed by the pointer returned by this function will change the value of this <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>COleSafeArray::operator =</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>These overloaded assignment operators copy the source value into this <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>A brief description of each operator follows:</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <bpt id="p2">*</bpt>saSrc<ept id="p2">*</ept> <bpt id="p3">**</bpt>)<ept id="p3">**</ept> Copies an existing <ph id="ph1">`COleSafeArray`</ph> object into this object.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <bpt id="p2">*</bpt>varSrc<ept id="p2">*</ept><bpt id="p3">**</bpt>)<ept id="p3">**</ept> Copies an existing <bpt id="p4">**</bpt>VARIANT<ept id="p4">**</ept> or <ph id="ph1">`COleVariant`</ph> array into this object.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator =(<ept id="p1">**</ept> <ph id="ph1">`pSrc`</ph> <bpt id="p2">**</bpt>)<ept id="p2">**</ept> Copies the <bpt id="p3">**</bpt>VARIANT<ept id="p3">**</ept> array object accessed by <ph id="ph2">`pSrc`</ph> into this object.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>COleSafeArray::operator ==</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>This operator compares two arrays ( <bpt id="p1">**</bpt>SAFEARRAY<ept id="p1">**</ept>, <bpt id="p2">**</bpt>VARIANT<ept id="p2">**</ept>, <ph id="ph1">`COleVariant`</ph>, or <ph id="ph2">`COleSafeArray`</ph> arrays) and returns nonzero if they are equal; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Two arrays are equal if they have an equal number of dimensions, equal size in each dimension, and equal element values.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>COleSafeArray::operator</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`COleSafeArray`</ph> insertion (&lt;&lt;) operator supports diagnostic dumping and storing of a <ph id="ph2">`COleSafeArray`</ph> object to an archive.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>COleSafeArray::PtrOfIndex</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the element specified by the index values.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>An array of index values that identify an element of the array.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>All indexes for the element must be specified.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>On return, pointer to the element identified by the values in <ph id="ph1">`rgIndices`</ph>.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>COleSafeArray::PutElement</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Assigns a single element into the array.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Pointer to an array of indexes for each dimension of the array.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Pointer to the data to assign to the array.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_DISPATCH<ept id="p1">**</ept>, <bpt id="p2">**</bpt>VT_UNKNOWN<ept id="p2">**</ept>, and <ph id="ph1">`VT_BSTR`</ph> variant types are pointers and do not require another level of indirection.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>This function automatically calls the Windows functions <bpt id="p1">[</bpt>SafeArrayLock<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms221492.aspx)</ept> and <bpt id="p2">[</bpt>SafeArrayUnlock<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ms221246.aspx)</ept> before and after assigning the element.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>If the data element is a string, object, or variant, the function copies it correctly, and if the existing element is a string, object, or variant, it is cleared correctly.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Note that you can have multiple locks on an array, so you can put elements into an array while the array is locked by other operations.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id="p2">[</bpt>COleException<ept id="p2">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>NVC_MFCOleContainer#32</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Redim</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Changes the least significant (rightmost) bound of a safe array.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>psaboundNew</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Pointer to a new safe array bound structure containing the new array bound.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Only the least significant dimension of an array may be changed.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>COleException<ept id="p1">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>COleSafeArray::ResizeOneDim</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Changes the number of elements in a one-dimensional <ph id="ph1">`COleSafeArray`</ph> object.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Number of elements in the one-dimensional safe array.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>COleException<ept id="p1">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>COleSafeArray::CreateOneDim<ept id="p1">](#colesafearray__createonedim)</ept>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>COleSafeArray::UnaccessData</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Decrements the lock count of an array and invalidates the pointer retrieved by <ph id="ph1">`AccessData`</ph>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>On error, the function throws a <bpt id="p1">[</bpt>COleException<ept id="p1">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>COleSafeArray::AccessData<ept id="p1">](#colesafearray__accessdata)</ept>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>COleSafeArray::Unlock</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Decrements the lock count of an array so it can be freed or resized.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>This function is called after access to the data in an array is finished.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>On error, it throws a <bpt id="p1">[</bpt>COleException<ept id="p1">](../../mfc/reference/coleexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>COleVariant Class</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>CRecordset Class</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>CDatabase Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>