{"nodes":[{"pos":[12,48],"content":"Data Type Constants | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Data Type Constants | Microsoft Docs","pos":[0,36]}]},{"content":"Data Type Constants","pos":[2339,2358]},{"content":"Data type constants are implementation-dependent ranges of values allowed for integral data types.","pos":[2359,2457]},{"content":"The constants listed below give the ranges for the integral data types and are defined in LIMITS.H.","pos":[2458,2557]},{"pos":[2565,2645],"content":"[!NOTE]\n The /J compiler option changes the default `char` type to `unsigned`.","leadings":["","> "],"nodes":[{"content":"The /J compiler option changes the default <ph id=\"ph1\">`char`</ph> type to <ph id=\"ph2\">`unsigned`</ph>.","pos":[9,78],"source":" The /J compiler option changes the default `char` type to `unsigned`."}]},{"content":"Constant","pos":[2652,2660]},{"content":"Value","pos":[2661,2666]},{"content":"Meaning","pos":[2667,2674]},{"content":"SCHAR_MAX","pos":[2726,2735]},{"content":"127","pos":[2738,2741]},{"pos":[2742,2769],"content":"Maximum signed <ph id=\"ph1\">`char`</ph> value","source":"Maximum signed `char` value"},{"content":"SCHAR_MIN","pos":[2776,2785]},{"content":"–128","pos":[2788,2792]},{"pos":[2793,2820],"content":"Minimum signed <ph id=\"ph1\">`char`</ph> value","source":"Minimum signed `char` value"},{"content":"UCHAR_MAX","pos":[2827,2836]},{"content":"255 (0xff)","pos":[2839,2849]},{"pos":[2850,2879],"content":"Maximum <ph id=\"ph1\">`unsigned char`</ph> value","source":"Maximum `unsigned char` value"},{"content":"CHAR_BIT","pos":[2886,2894]},{"content":"8","pos":[2897,2898]},{"pos":[2899,2918],"content":"Number of bits in a"},{"content":"USHRT_MAX","pos":[2932,2941]},{"content":"65535 (0xffff)","pos":[2944,2958]},{"pos":[2959,2991],"content":"Maximum <bpt id=\"p1\">**</bpt>unsigned short<ept id=\"p1\">**</ept> value","source":"Maximum **unsigned short** value"},{"content":"SHRT_MAX","pos":[2998,3006]},{"content":"32767","pos":[3009,3014]},{"pos":[3015,3047],"content":"Maximum (signed) <bpt id=\"p1\">**</bpt>short<ept id=\"p1\">**</ept> value","source":"Maximum (signed) **short** value"},{"content":"SHRT_MIN","pos":[3054,3062]},{"content":"–32768","pos":[3065,3071]},{"pos":[3072,3104],"content":"Minimum (signed) <bpt id=\"p1\">**</bpt>short<ept id=\"p1\">**</ept> value","source":"Minimum (signed) **short** value"},{"content":"UINT_MAX","pos":[3111,3119]},{"content":"4294967295 (0xffffffff)","pos":[3122,3145]},{"pos":[3146,3174],"content":"Maximum <ph id=\"ph1\">`unsigned int`</ph> value","source":"Maximum `unsigned int` value"},{"content":"ULONG_MAX","pos":[3181,3190]},{"content":"4294967295 (0xffffffff)","pos":[3193,3216]},{"pos":[3217,3246],"content":"Maximum <ph id=\"ph1\">`unsigned long`</ph> value","source":"Maximum `unsigned long` value"},{"content":"INT_MAX","pos":[3253,3260]},{"content":"2147483647","pos":[3263,3273]},{"pos":[3274,3302],"content":"Maximum (signed) <ph id=\"ph1\">`int`</ph> value","source":"Maximum (signed) `int` value"},{"content":"INT_MIN","pos":[3309,3316]},{"content":"–2147483647–1","pos":[3319,3332]},{"pos":[3333,3361],"content":"Minimum (signed) <ph id=\"ph1\">`int`</ph> value","source":"Minimum (signed) `int` value"},{"content":"LONG_MAX","pos":[3368,3376]},{"content":"2147483647","pos":[3379,3389]},{"pos":[3390,3421],"content":"Maximum (signed) <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept> value","source":"Maximum (signed) **long** value"},{"content":"LONG_MIN","pos":[3428,3436]},{"content":"–2147483647–1","pos":[3439,3452]},{"pos":[3453,3484],"content":"Minimum (signed) <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept> value","source":"Minimum (signed) **long** value"},{"content":"CHAR_MAX","pos":[3491,3499]},{"content":"127 (255 if /J option used)","pos":[3502,3529]},{"pos":[3530,3550],"content":"Maximum <ph id=\"ph1\">`char`</ph> value","source":"Maximum `char` value"},{"content":"CHAR_MIN","pos":[3557,3565]},{"content":"–128 (0 if /J option used)","pos":[3568,3594]},{"pos":[3595,3615],"content":"Minimum <ph id=\"ph1\">`char`</ph> value","source":"Minimum `char` value"},{"content":"MB_LEN_MAX","pos":[3622,3632]},{"content":"2","pos":[3635,3636]},{"pos":[3637,3673],"content":"Maximum number of bytes in multibyte"},{"content":"_I64_MAX","pos":[3687,3695]},{"content":"9223372036854775807","pos":[3698,3717]},{"pos":[3718,3752],"content":"Maximum (signed) __<bpt id=\"p1\">**</bpt>int64<ept id=\"p1\">**</ept> value","source":"Maximum (signed) __**int64** value"},{"content":"_I64_MIN","pos":[3759,3767]},{"content":"-9223372036854775807-1","pos":[3770,3792]},{"pos":[3793,3827],"content":"Minimum (signed) __<bpt id=\"p1\">**</bpt>int64<ept id=\"p1\">**</ept> value","source":"Minimum (signed) __**int64** value"},{"content":"_UI64_MAX","pos":[3834,3843]},{"content":"0xffffffffffffffff","pos":[3846,3864]},{"pos":[3865,3901],"content":"Maximum (unsigned) __<bpt id=\"p1\">**</bpt>int64<ept id=\"p1\">**</ept> value","source":"Maximum (unsigned) __**int64** value"},{"pos":[3909,4045],"content":"The following constants give the range and other characteristics of the <bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>float<ept id=\"p2\">**</ept> data types, and are defined in FLOAT.H:","source":"The following constants give the range and other characteristics of the **double** and **float** data types, and are defined in FLOAT.H:"},{"content":"Constant","pos":[4052,4060]},{"content":"Value","pos":[4061,4066]},{"content":"Description","pos":[4067,4078]},{"content":"DBL_DIG","pos":[4134,4141]},{"content":"15","pos":[4144,4146]},{"content":"of decimal digits of precision","pos":[4149,4179]},{"content":"DBL_EPSILON","pos":[4186,4197]},{"content":"2.2204460492503131e-016","pos":[4200,4223]},{"pos":[4224,4268],"content":"Smallest such that 1.0+<bpt id=\"p1\">**</bpt>DBL_EPSILON<ept id=\"p1\">**</ept> !=1.0","source":"Smallest such that 1.0+**DBL_EPSILON** !=1.0"},{"content":"DBL_MANT_DIG","pos":[4275,4287]},{"content":"53","pos":[4290,4292]},{"content":"of bits in mantissa","pos":[4295,4314]},{"content":"DBL_MAX","pos":[4321,4328]},{"content":"1.7976931348623158e+308","pos":[4331,4354]},{"content":"Maximum value","pos":[4355,4368]},{"content":"DBL_MAX_10_EXP","pos":[4375,4389]},{"content":"308","pos":[4392,4395]},{"content":"Maximum decimal exponent","pos":[4396,4420]},{"content":"DBL_MAX_EXP","pos":[4427,4438]},{"content":"1024","pos":[4441,4445]},{"content":"Maximum binary exponent","pos":[4446,4469]},{"content":"DBL_MIN","pos":[4476,4483]},{"content":"2.2250738585072014e-308","pos":[4486,4509]},{"content":"Minimum positive value","pos":[4510,4532]},{"content":"DBL_MIN_10_EXP","pos":[4539,4553]},{"content":"(-307)","pos":[4556,4562]},{"content":"Minimum decimal exponent","pos":[4563,4587]},{"content":"DBL_MIN_EXP","pos":[4594,4605]},{"content":"(–1021)","pos":[4608,4615]},{"content":"Minimum binary exponent","pos":[4616,4639]},{"content":"_DBL_RADIX","pos":[4646,4656]},{"content":"2","pos":[4659,4660]},{"content":"Exponent radix","pos":[4661,4675]},{"content":"_DBL_ROUNDS","pos":[4682,4693]},{"content":"1","pos":[4696,4697]},{"content":"Addition rounding: near","pos":[4698,4721]},{"content":"FLT_DIG","pos":[4728,4735]},{"content":"6","pos":[4738,4739]},{"content":"Number of decimal digits of precision","pos":[4740,4777]},{"content":"FLT_EPSILON","pos":[4784,4795]},{"content":"1.192092896e-07F","pos":[4798,4814]},{"pos":[4815,4859],"content":"Smallest such that 1.0+<bpt id=\"p1\">**</bpt>FLT_EPSILON<ept id=\"p1\">**</ept> !=1.0","source":"Smallest such that 1.0+**FLT_EPSILON** !=1.0"},{"content":"FLT_MANT_DIG","pos":[4866,4878]},{"content":"24","pos":[4881,4883]},{"content":"Number of bits in mantissa","pos":[4884,4910]},{"content":"FLT_MAX","pos":[4917,4924]},{"content":"3.402823466e+38F","pos":[4927,4943]},{"content":"Maximum value","pos":[4944,4957]},{"content":"FLT_MAX_10_EXP","pos":[4964,4978]},{"content":"38","pos":[4981,4983]},{"content":"Maximum decimal exponent","pos":[4984,5008]},{"content":"FLT_MAX_EXP","pos":[5015,5026]},{"content":"128","pos":[5029,5032]},{"content":"Maximum binary exponent","pos":[5033,5056]},{"content":"FLT_MIN","pos":[5063,5070]},{"content":"1.175494351e-38F","pos":[5073,5089]},{"content":"Minimum positive value","pos":[5090,5112]},{"content":"FLT_MIN_10_EXP","pos":[5119,5133]},{"content":"(–37)","pos":[5136,5141]},{"content":"Minimum decimal exponent","pos":[5142,5166]},{"content":"FLT_MIN_EXP","pos":[5173,5184]},{"content":"(–125)","pos":[5187,5193]},{"content":"Minimum binary exponent","pos":[5194,5217]},{"content":"FLT_RADIX","pos":[5224,5233]},{"content":"2","pos":[5236,5237]},{"content":"Exponent radix","pos":[5238,5252]},{"content":"FLT_ROUNDS","pos":[5259,5269]},{"content":"1","pos":[5272,5273]},{"content":"Addition rounding: near","pos":[5274,5297]},{"content":"See Also","pos":[5307,5315]},{"content":"Global Constants","pos":[5320,5336]}],"content":"---\ntitle: \"Data Type Constants | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"FLT_MIN\"\n  - \"SHRT_MAX\"\n  - \"CHAR_MIN\"\n  - \"MB_LEN_MAX\"\n  - \"DBL_EPSILON\"\n  - \"SHRT_MIN\"\n  - \"_FLT_RADIX\"\n  - \"FLT_DIG\"\n  - \"FLT_MAX_10_EXP\"\n  - \"FLT_MANT_DIG\"\n  - \"DBL_MAX_EXP\"\n  - \"SCHAR_MIN\"\n  - \"SCHAR_MAX\"\n  - \"DBL_MIN\"\n  - \"FLT_MIN_10_EXP\"\n  - \"_DBL_ROUNDS\"\n  - \"USHRT_MAX\"\n  - \"FLT_MAX_EXP\"\n  - \"LONG_MAX\"\n  - \"DBL_MAX\"\n  - \"DBL_DIG\"\n  - \"FLT_MIN_EXP\"\n  - \"INT_MIN\"\n  - \"DBL_MIN_10_EXP\"\n  - \"CHAR_BIT\"\n  - \"INT_MAX\"\n  - \"ULONG_MAX\"\n  - \"DBL_MIN_EXP\"\n  - \"LONG_MIN\"\n  - \"_FLT_ROUNDS\"\n  - \"DBL_MANT_DIG\"\n  - \"_DBL_RADIX\"\n  - \"CHAR_MAX\"\n  - \"FLT_MAX\"\n  - \"DBL_MAX_10_EXP\"\n  - \"UCHAR_MAX\"\n  - \"FLT_EPSILON\"\n  - \"UINT_MAX\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"DBL_MAX_EXP constant\"\n  - \"_DBL_RADIX constant\"\n  - \"FLT_MIN_EXP constant\"\n  - \"DBL_EPSILON constant\"\n  - \"INT_MIN constant\"\n  - \"FLT_EPSILON constant\"\n  - \"DBL_MANT_DIG constant\"\n  - \"_FLT_RADIX constant\"\n  - \"DBL_MIN constant\"\n  - \"USHRT_MAX constant\"\n  - \"FLT_MAX_10_EXP constant\"\n  - \"_FLT_ROUNDS constant\"\n  - \"data type constants [C++]\"\n  - \"_DBL_ROUNDS constant\"\n  - \"CHAR_MAX constant\"\n  - \"FLT_MAX_EXP constant\"\n  - \"FLT_MIN constant\"\n  - \"CHAR_MIN constant\"\n  - \"FLT_MIN_10_EXP constant\"\n  - \"DBL_MIN_EXP constant\"\n  - \"SCHAR_MAX constant\"\n  - \"FLT_RADIX constant\"\n  - \"CHAR_BIT constant\"\n  - \"UCHAR_MAX constant\"\n  - \"DBL_RADIX constant\"\n  - \"FLT_ROUNDS constant\"\n  - \"LONG_MIN constant\"\n  - \"SHRT_MAX constant\"\n  - \"LONG_MAX constant\"\n  - \"DBL_MAX_10_EXP constant\"\n  - \"DBL_MIN_10_EXP constant\"\n  - \"INT_MAX constant\"\n  - \"constants [C++], data type\"\n  - \"ULONG_MAX constant\"\n  - \"FLT_DIG constant\"\n  - \"MB_LEN_MAX constant\"\n  - \"DBL_DIG constant\"\n  - \"SHRT_MIN constant\"\n  - \"DBL_MAX constant\"\n  - \"DBL_ROUNDS constant\"\n  - \"FLT_MAX constant\"\n  - \"UINT_MAX constant\"\n  - \"FLT_MANT_DIG constant\"\n  - \"SCHAR_MIN constant\"\nms.assetid: c0f1c405-0465-41d5-b5ff-e81cdb6f1622\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Data Type Constants\nData type constants are implementation-dependent ranges of values allowed for integral data types. The constants listed below give the ranges for the integral data types and are defined in LIMITS.H.  \n  \n> [!NOTE]\n>  The /J compiler option changes the default `char` type to `unsigned`.  \n  \n|Constant|Value|Meaning|  \n|--------------|-----------|-------------|  \n|**SCHAR_MAX**|127|Maximum signed `char` value|  \n|**SCHAR_MIN**|–128|Minimum signed `char` value|  \n|**UCHAR_MAX**|255 (0xff)|Maximum `unsigned char` value|  \n|**CHAR_BIT**|8|Number of bits in a `char`|  \n|**USHRT_MAX**|65535 (0xffff)|Maximum **unsigned short** value|  \n|**SHRT_MAX**|32767|Maximum (signed) **short** value|  \n|**SHRT_MIN**|–32768|Minimum (signed) **short** value|  \n|**UINT_MAX**|4294967295 (0xffffffff)|Maximum `unsigned int` value|  \n|**ULONG_MAX**|4294967295 (0xffffffff)|Maximum `unsigned long` value|  \n|**INT_MAX**|2147483647|Maximum (signed) `int` value|  \n|**INT_MIN**|–2147483647–1|Minimum (signed) `int` value|  \n|**LONG_MAX**|2147483647|Maximum (signed) **long** value|  \n|**LONG_MIN**|–2147483647–1|Minimum (signed) **long** value|  \n|**CHAR_MAX**|127 (255 if /J option used)|Maximum `char` value|  \n|**CHAR_MIN**|–128 (0 if /J option used)|Minimum `char` value|  \n|**MB_LEN_MAX**|2|Maximum number of bytes in multibyte `char`|  \n|**_I64_MAX**|9223372036854775807|Maximum (signed) __**int64** value|  \n|**_I64_MIN**|-9223372036854775807-1|Minimum (signed) __**int64** value|  \n|**_UI64_MAX**|0xffffffffffffffff|Maximum (unsigned) __**int64** value|  \n  \n The following constants give the range and other characteristics of the **double** and **float** data types, and are defined in FLOAT.H:  \n  \n|Constant|Value|Description|  \n|--------------|-----------|-----------------|  \n|**DBL_DIG**|15|# of decimal digits of precision|  \n|**DBL_EPSILON**|2.2204460492503131e-016|Smallest such that 1.0+**DBL_EPSILON** !=1.0|  \n|**DBL_MANT_DIG**|53|# of bits in mantissa|  \n|**DBL_MAX**|1.7976931348623158e+308|Maximum value|  \n|**DBL_MAX_10_EXP**|308|Maximum decimal exponent|  \n|**DBL_MAX_EXP**|1024|Maximum binary exponent|  \n|**DBL_MIN**|2.2250738585072014e-308|Minimum positive value|  \n|**DBL_MIN_10_EXP**|(-307)|Minimum decimal exponent|  \n|**DBL_MIN_EXP**|(–1021)|Minimum binary exponent|  \n|**_DBL_RADIX**|2|Exponent radix|  \n|**_DBL_ROUNDS**|1|Addition rounding: near|  \n|**FLT_DIG**|6|Number of decimal digits of precision|  \n|**FLT_EPSILON**|1.192092896e-07F|Smallest such that 1.0+**FLT_EPSILON** !=1.0|  \n|**FLT_MANT_DIG**|24|Number of bits in mantissa|  \n|**FLT_MAX**|3.402823466e+38F|Maximum value|  \n|**FLT_MAX_10_EXP**|38|Maximum decimal exponent|  \n|**FLT_MAX_EXP**|128|Maximum binary exponent|  \n|**FLT_MIN**|1.175494351e-38F|Minimum positive value|  \n|**FLT_MIN_10_EXP**|(–37)|Minimum decimal exponent|  \n|**FLT_MIN_EXP**|(–125)|Minimum binary exponent|  \n|**FLT_RADIX**|2|Exponent radix|  \n|**FLT_ROUNDS**|1|Addition rounding: near|  \n  \n## See Also  \n [Global Constants](../c-runtime-library/global-constants.md)"}