{"nodes":[{"pos":[12,60],"content":"DLL Import and Export Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"DLL Import and Export Functions | Microsoft Docs","pos":[0,48]}]},{"content":"DLL Import and Export Functions","pos":[832,863]},{"content":"Microsoft Specific","pos":[866,884]},{"pos":[893,1022],"content":"The most complete and up-to-date information on this topic can be found in <bpt id=\"p1\">[</bpt>dllexport, dllimport<ept id=\"p1\">](../cpp/dllexport-dllimport.md)</ept>.","source":"The most complete and up-to-date information on this topic can be found in [dllexport, dllimport](../cpp/dllexport-dllimport.md)."},{"content":"The <bpt id=\"p1\">**</bpt>dllimport<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`dllexport`</ph> storage-class modifiers are Microsoft-specific extensions to the C language.","pos":[1029,1139],"source":"The **dllimport** and `dllexport` storage-class modifiers are Microsoft-specific extensions to the C language."},{"content":"These modifiers explicitly define the DLL's interface to its client (the executable file or another DLL).","pos":[1140,1245]},{"content":"Declaring functions as <ph id=\"ph1\">`dllexport`</ph> eliminates the need for a module-definition (.DEF) file.","pos":[1246,1337],"source":" Declaring functions as `dllexport` eliminates the need for a module-definition (.DEF) file."},{"content":"You can also use the <bpt id=\"p1\">**</bpt>dllimport<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`dllexport`</ph> modifiers with data and objects.","pos":[1338,1421],"source":" You can also use the **dllimport** and `dllexport` modifiers with data and objects."},{"pos":[1428,1582],"content":"The <bpt id=\"p1\">**</bpt>dllimport<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`dllexport`</ph> storage-class modifiers must be used with the extended attribute syntax keyword, <ph id=\"ph2\">`__declspec`</ph>, as shown in this example:","source":"The **dllimport** and `dllexport` storage-class modifiers must be used with the extended attribute syntax keyword, `__declspec`, as shown in this example:"},{"pos":[1786,1960],"content":"For specific information about the syntax for extended storage-class modifiers, see <bpt id=\"p1\">[</bpt>Extended Storage-Class Attributes<ept id=\"p1\">](../c-language/c-extended-storage-class-attributes.md)</ept>.","source":"For specific information about the syntax for extended storage-class modifiers, see [Extended Storage-Class Attributes](../c-language/c-extended-storage-class-attributes.md)."},{"content":"END Microsoft Specific","pos":[1969,1991]},{"content":"See Also","pos":[2002,2010]},{"content":"C Function Definitions","pos":[2015,2037]}],"content":"---\ntitle: \"DLL Import and Export Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"DLLs [C++], importing\"\n  - \"dllimport attribute [C++], storage-class attribute\"\n  - \"DLL exports [C++]\"\n  - \"declaring functions, with dllexport and dllimport\"\n  - \"extended storage-class attributes\"\n  - \"dllexport attribute [C++], storage-class attribute\"\nms.assetid: 08d164b9-770a-4e14-afeb-c6f21d9e33e4\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# DLL Import and Export Functions\n**Microsoft Specific**  \n  \n The most complete and up-to-date information on this topic can be found in [dllexport, dllimport](../cpp/dllexport-dllimport.md).  \n  \n The **dllimport** and `dllexport` storage-class modifiers are Microsoft-specific extensions to the C language. These modifiers explicitly define the DLL's interface to its client (the executable file or another DLL). Declaring functions as `dllexport` eliminates the need for a module-definition (.DEF) file. You can also use the **dllimport** and `dllexport` modifiers with data and objects.  \n  \n The **dllimport** and `dllexport` storage-class modifiers must be used with the extended attribute syntax keyword, `__declspec`, as shown in this example:  \n  \n```  \n#define DllImport   __declspec( dllimport )  \n#define DllExport   __declspec( dllexport )  \n  \nDllExport void func();  \nDllExport int i = 10;  \nDllExport int j;  \nDllExport int n;  \n```  \n  \n For specific information about the syntax for extended storage-class modifiers, see [Extended Storage-Class Attributes](../c-language/c-extended-storage-class-attributes.md).  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [C Function Definitions](../c-language/c-function-definitions.md)"}