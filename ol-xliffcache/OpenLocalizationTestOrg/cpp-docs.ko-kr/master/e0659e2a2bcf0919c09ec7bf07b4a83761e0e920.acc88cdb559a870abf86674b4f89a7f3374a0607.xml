{"nodes":[{"pos":[12,50],"content":"CMFCBaseTabCtrl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCBaseTabCtrl Class | Microsoft Docs","pos":[0,38]}]},{"pos":[645,666],"content":"CMFCBaseTabCtrl Class","linkify":"CMFCBaseTabCtrl Class","nodes":[{"content":"CMFCBaseTabCtrl Class","pos":[0,21]}]},{"content":"Implements the base functionality for tabbed windows.","pos":[667,720]},{"pos":[729,735],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[797,804],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[814,828],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[835,839]},{"content":"Description","pos":[840,851]},{"pos":[889,942],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::AddIcon<ept id=\"p1\">](#cmfcbasetabctrl__addicon)</ept>","source":"[CMFCBaseTabCtrl::AddIcon](#cmfcbasetabctrl__addicon)"},{"pos":[948,999],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::AddTab<ept id=\"p1\">](#cmfcbasetabctrl__addtab)</ept>","source":"[CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab)"},{"content":"Adds a new tab to the tabbed window.","pos":[1000,1036]},{"pos":[1041,1120],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::ApplyRestoredTabInfo<ept id=\"p1\">](#cmfcbasetabctrl__applyrestoredtabinfo)</ept>","source":"[CMFCBaseTabCtrl::ApplyRestoredTabInfo](#cmfcbasetabctrl__applyrestoredtabinfo)"},{"pos":[1126,1199],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::AutoDestroyWindow<ept id=\"p1\">](#cmfcbasetabctrl__autodestroywindow)</ept>","source":"[CMFCBaseTabCtrl::AutoDestroyWindow](#cmfcbasetabctrl__autodestroywindow)"},{"pos":[1205,1268],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::CalcRectEdit<ept id=\"p1\">](#cmfcbasetabctrl__calcrectedit)</ept>","source":"[CMFCBaseTabCtrl::CalcRectEdit](#cmfcbasetabctrl__calcrectedit)"},{"pos":[1274,1327],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::CleanUp<ept id=\"p1\">](#cmfcbasetabctrl__cleanup)</ept>","source":"[CMFCBaseTabCtrl::CleanUp](#cmfcbasetabctrl__cleanup)"},{"pos":[1333,1400],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::ClearImageList<ept id=\"p1\">](#cmfcbasetabctrl__clearimagelist)</ept>","source":"[CMFCBaseTabCtrl::ClearImageList](#cmfcbasetabctrl__clearimagelist)"},{"pos":[1406,1463],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::DetachTab<ept id=\"p1\">](#cmfcbasetabctrl__detachtab)</ept>","source":"[CMFCBaseTabCtrl::DetachTab](#cmfcbasetabctrl__detachtab)"},{"content":"Detaches a tab from a tabbed window.","pos":[1464,1500]},{"pos":[1505,1592],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnableActivateLastActive<ept id=\"p1\">](#cmfcbasetabctrl__enableactivatelastactive)</ept>","source":"[CMFCBaseTabCtrl::EnableActivateLastActive](#cmfcbasetabctrl__enableactivatelastactive)"},{"pos":[1598,1667],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnableAutoColor<ept id=\"p1\">](#cmfcbasetabctrl__enableautocolor)</ept>","source":"[CMFCBaseTabCtrl::EnableAutoColor](#cmfcbasetabctrl__enableautocolor)"},{"content":"Enables or disables automatic tab coloring.","pos":[1668,1711]},{"pos":[1716,1795],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnableCustomToolTips<ept id=\"p1\">](#cmfcbasetabctrl__enablecustomtooltips)</ept>","source":"[CMFCBaseTabCtrl::EnableCustomToolTips](#cmfcbasetabctrl__enablecustomtooltips)"},{"content":"Enables or disables custom tooltips for tabs.","pos":[1796,1841]},{"pos":[1846,1919],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnableInPlaceEdit<ept id=\"p1\">](#cmfcbasetabctrl__enableinplaceedit)</ept>","source":"[CMFCBaseTabCtrl::EnableInPlaceEdit](#cmfcbasetabctrl__enableinplaceedit)"},{"content":"Enables or disables direct editing of tab labels.","pos":[1920,1969]},{"pos":[1974,2043],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnableTabDetach<ept id=\"p1\">](#cmfcbasetabctrl__enabletabdetach)</ept>","source":"[CMFCBaseTabCtrl::EnableTabDetach](#cmfcbasetabctrl__enabletabdetach)"},{"content":"Enables detachable tabs.","pos":[2044,2068]},{"pos":[2073,2138],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnableTabSwap<ept id=\"p1\">](#cmfcbasetabctrl__enabletabswap)</ept>","source":"[CMFCBaseTabCtrl::EnableTabSwap](#cmfcbasetabctrl__enabletabswap)"},{"content":"Enables or disables whether the user can change the tab order by using a mouse.","pos":[2139,2218]},{"pos":[2223,2288],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnsureVisible<ept id=\"p1\">](#cmfcbasetabctrl__ensurevisible)</ept>","source":"[CMFCBaseTabCtrl::EnsureVisible](#cmfcbasetabctrl__ensurevisible)"},{"content":"Scrolls the tabs until the specified tab is visible.","pos":[2289,2341]},{"content":"This method has no effect if the specified tab is already visible.","pos":[2342,2408]},{"pos":[2413,2478],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnterDragMode<ept id=\"p1\">](#cmfcbasetabctrl__enterdragmode)</ept>","source":"[CMFCBaseTabCtrl::EnterDragMode](#cmfcbasetabctrl__enterdragmode)"},{"pos":[2484,2549],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::FindTargetWnd<ept id=\"p1\">](#cmfcbasetabctrl__findtargetwnd)</ept>","source":"[CMFCBaseTabCtrl::FindTargetWnd](#cmfcbasetabctrl__findtargetwnd)"},{"content":"Returns a pane that contains a specified point.","pos":[2550,2597]},{"pos":[2602,2679],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::FireChangeActiveTab<ept id=\"p1\">](#cmfcbasetabctrl__firechangeactivetab)</ept>","source":"[CMFCBaseTabCtrl::FireChangeActiveTab](#cmfcbasetabctrl__firechangeactivetab)"},{"pos":[2685,2766],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::FireChangingActiveTab<ept id=\"p1\">](#cmfcbasetabctrl__firechangingactivetab)</ept>","source":"[CMFCBaseTabCtrl::FireChangingActiveTab](#cmfcbasetabctrl__firechangingactivetab)"},{"pos":[2772,2835],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetActiveTab<ept id=\"p1\">](#cmfcbasetabctrl__getactivetab)</ept>","source":"[CMFCBaseTabCtrl::GetActiveTab](#cmfcbasetabctrl__getactivetab)"},{"content":"Returns the index of the active tab.","pos":[2836,2872]},{"pos":[2877,2950],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetActiveTabColor<ept id=\"p1\">](#cmfcbasetabctrl__getactivetabcolor)</ept>","source":"[CMFCBaseTabCtrl::GetActiveTabColor](#cmfcbasetabctrl__getactivetabcolor)"},{"content":"Returns the background color of the active tab.","pos":[2951,2998]},{"pos":[3003,3084],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetActiveTabTextColor<ept id=\"p1\">](#cmfcbasetabctrl__getactivetabtextcolor)</ept>","source":"[CMFCBaseTabCtrl::GetActiveTabTextColor](#cmfcbasetabctrl__getactivetabtextcolor)"},{"content":"Returns the text color of the active tab.","pos":[3085,3126]},{"pos":[3131,3194],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetActiveWnd<ept id=\"p1\">](#cmfcbasetabctrl__getactivewnd)</ept>","source":"[CMFCBaseTabCtrl::GetActiveWnd](#cmfcbasetabctrl__getactivewnd)"},{"content":"Returns a pointer the active page of the tab control.","pos":[3195,3248]},{"pos":[3253,3318],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetAutoColors<ept id=\"p1\">](#cmfcbasetabctrl__getautocolors)</ept>","source":"[CMFCBaseTabCtrl::GetAutoColors](#cmfcbasetabctrl__getautocolors)"},{"content":"Returns a reference to the array of colors that are used for automatic coloring.","pos":[3319,3399]},{"pos":[3404,3479],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetFirstVisibleTab<ept id=\"p1\">](#cmfcbasetabctrl__getfirstvisibletab)</ept>","source":"[CMFCBaseTabCtrl::GetFirstVisibleTab](#cmfcbasetabctrl__getfirstvisibletab)"},{"content":"Returns a pointer to the first visible tab.","pos":[3480,3523]},{"pos":[3528,3609],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetFirstVisibleTabNum<ept id=\"p1\">](#cmfcbasetabctrl__getfirstvisibletabnum)</ept>","source":"[CMFCBaseTabCtrl::GetFirstVisibleTabNum](#cmfcbasetabctrl__getfirstvisibletabnum)"},{"pos":[3615,3688],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetHighlightedTab<ept id=\"p1\">](#cmfcbasetabctrl__gethighlightedtab)</ept>","source":"[CMFCBaseTabCtrl::GetHighlightedTab](#cmfcbasetabctrl__gethighlightedtab)"},{"content":"Returns the index of the currently highlighted tab.","pos":[3689,3740]},{"pos":[3745,3808],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetImageList<ept id=\"p1\">](#cmfcbasetabctrl__getimagelist)</ept>","source":"[CMFCBaseTabCtrl::GetImageList](#cmfcbasetabctrl__getimagelist)"},{"pos":[3814,3877],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetImageSize<ept id=\"p1\">](#cmfcbasetabctrl__getimagesize)</ept>","source":"[CMFCBaseTabCtrl::GetImageSize](#cmfcbasetabctrl__getimagesize)"},{"pos":[3883,3956],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetLastVisibleTab<ept id=\"p1\">](#cmfcbasetabctrl__getlastvisibletab)</ept>","source":"[CMFCBaseTabCtrl::GetLastVisibleTab](#cmfcbasetabctrl__getlastvisibletab)"},{"pos":[3962,4023],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetLocation<ept id=\"p1\">](#cmfcbasetabctrl__getlocation)</ept>","source":"[CMFCBaseTabCtrl::GetLocation](#cmfcbasetabctrl__getlocation)"},{"content":"Returns a variable of the LOCATION data type that indicates where the tab area is positioned relative to the tab control.","pos":[4024,4145]},{"content":"For example, on the top or on the bottom.","pos":[4146,4187]},{"pos":[4192,4263],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetMaxWindowSize<ept id=\"p1\">](#cmfcbasetabctrl__getmaxwindowsize)</ept>","source":"[CMFCBaseTabCtrl::GetMaxWindowSize](#cmfcbasetabctrl__getmaxwindowsize)"},{"pos":[4269,4328],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabArea<ept id=\"p1\">](#cmfcbasetabctrl__gettabarea)</ept>","source":"[CMFCBaseTabCtrl::GetTabArea](#cmfcbasetabctrl__gettabarea)"},{"content":"Returns the size and the position of the tab area in the tabbed window.","pos":[4329,4400]},{"content":"The position of the tab area is defined by using coordinates.","pos":[4401,4462]},{"pos":[4467,4532],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabBkColor<ept id=\"p1\">](#cmfcbasetabctrl__gettabbkcolor)</ept>","source":"[CMFCBaseTabCtrl::GetTabBkColor](#cmfcbasetabctrl__gettabbkcolor)"},{"content":"Returns the background color of the specified tab.","pos":[4533,4583]},{"pos":[4588,4659],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabBorderSize<ept id=\"p1\">](#cmfcbasetabctrl__gettabbordersize)</ept>","source":"[CMFCBaseTabCtrl::GetTabBorderSize](#cmfcbasetabctrl__gettabbordersize)"},{"content":"Returns the size of the tab borders in the tab control.","pos":[4660,4715]},{"pos":[4720,4779],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabByID<ept id=\"p1\">](#cmfcbasetabctrl__gettabbyid)</ept>","source":"[CMFCBaseTabCtrl::GetTabByID](#cmfcbasetabctrl__gettabbyid)"},{"content":"Returns the index of the tab that is identified by a specified ID.","pos":[4780,4846]},{"pos":[4851,4924],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabCloseButton<ept id=\"p1\">](#cmfcbasetabctrl__gettabclosebutton)</ept>","source":"[CMFCBaseTabCtrl::GetTabCloseButton](#cmfcbasetabctrl__gettabclosebutton)"},{"pos":[4930,4997],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabFromHwnd<ept id=\"p1\">](#cmfcbasetabctrl__gettabfromhwnd)</ept>","source":"[CMFCBaseTabCtrl::GetTabFromHwnd](#cmfcbasetabctrl__gettabfromhwnd)"},{"content":"Returns the index of a tab that contains a specified HWND object.","pos":[4998,5063]},{"pos":[5068,5137],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabFromPoint<ept id=\"p1\">](#cmfcbasetabctrl__gettabfrompoint)</ept>","source":"[CMFCBaseTabCtrl::GetTabFromPoint](#cmfcbasetabctrl__gettabfrompoint)"},{"content":"Returns the tab that contains a specified point.","pos":[5138,5186]},{"pos":[5191,5260],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabFullWidth<ept id=\"p1\">](#cmfcbasetabctrl__gettabfullwidth)</ept>","source":"[CMFCBaseTabCtrl::GetTabFullWidth](#cmfcbasetabctrl__gettabfullwidth)"},{"pos":[5266,5327],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabHicon<ept id=\"p1\">](#cmfcbasetabctrl__gettabhicon)</ept>","source":"[CMFCBaseTabCtrl::GetTabHicon](#cmfcbasetabctrl__gettabhicon)"},{"content":"Returns the icon associated with the specified tab.","pos":[5328,5379]},{"pos":[5384,5439],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabID<ept id=\"p1\">](#cmfcbasetabctrl__gettabid)</ept>","source":"[CMFCBaseTabCtrl::GetTabID](#cmfcbasetabctrl__gettabid)"},{"content":"Returns the ID of a tab by using the index of the tab.","pos":[5440,5494]},{"pos":[5499,5558],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabIcon<ept id=\"p1\">](#cmfcbasetabctrl__gettabicon)</ept>","source":"[CMFCBaseTabCtrl::GetTabIcon](#cmfcbasetabctrl__gettabicon)"},{"content":"Returns the icon ID for a specified tab.","pos":[5559,5599]},{"pos":[5604,5665],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabLabel<ept id=\"p1\">](#cmfcbasetabctrl__gettablabel)</ept>","source":"[CMFCBaseTabCtrl::GetTabLabel](#cmfcbasetabctrl__gettablabel)"},{"content":"Returns the text of a specified tab.","pos":[5666,5702]},{"pos":[5707,5766],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabRect<ept id=\"p1\">](#cmfcbasetabctrl__gettabrect)</ept>","source":"[CMFCBaseTabCtrl::GetTabRect](#cmfcbasetabctrl__gettabrect)"},{"content":"Retrieves the size and position of a specified tab.","pos":[5767,5818]},{"pos":[5823,5888],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabsHeight<ept id=\"p1\">](#cmfcbasetabctrl__gettabsheight)</ept>","source":"[CMFCBaseTabCtrl::GetTabsHeight](#cmfcbasetabctrl__gettabsheight)"},{"pos":[5894,5955],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabsRect<ept id=\"p1\">](#cmfcbasetabctrl__gettabsrect)</ept>","source":"[CMFCBaseTabCtrl::GetTabsRect](#cmfcbasetabctrl__gettabsrect)"},{"pos":[5961,6030],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabTextColor<ept id=\"p1\">](#cmfcbasetabctrl__gettabtextcolor)</ept>","source":"[CMFCBaseTabCtrl::GetTabTextColor](#cmfcbasetabctrl__gettabtextcolor)"},{"content":"Returns the text color of a specified tab.","pos":[6031,6073]},{"pos":[6078,6135],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabWnd<ept id=\"p1\">](#cmfcbasetabctrl__gettabwnd)</ept>","source":"[CMFCBaseTabCtrl::GetTabWnd](#cmfcbasetabctrl__gettabwnd)"},{"content":"Returns the pointer to a pane that resides on a specified tab page.","pos":[6136,6203]},{"pos":[6208,6283],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabWndNoWrapper<ept id=\"p1\">](#cmfcbasetabctrl__gettabwndnowrapper)</ept>","source":"[CMFCBaseTabCtrl::GetTabWndNoWrapper](#cmfcbasetabctrl__gettabwndnowrapper)"},{"content":"Returns the direct pointer to a control that resides on a specified tab page, even if the control has a wrapper.","pos":[6284,6396]},{"pos":[6401,6460],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabsNum<ept id=\"p1\">](#cmfcbasetabctrl__gettabsnum)</ept>","source":"[CMFCBaseTabCtrl::GetTabsNum](#cmfcbasetabctrl__gettabsnum)"},{"content":"Returns the number of tabs that are contained in the tab control.","pos":[6461,6526]},{"pos":[6531,6598],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetToolTipCtrl<ept id=\"p1\">](#cmfcbasetabctrl__gettooltipctrl)</ept>","source":"[CMFCBaseTabCtrl::GetToolTipCtrl](#cmfcbasetabctrl__gettooltipctrl)"},{"pos":[6599,6687],"content":"Returns a reference to the tooltip control associated with the <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph> object.","source":"Returns a reference to the tooltip control associated with the `CMFCBaseTabCtrl` object."},{"pos":[6692,6765],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetVisibleTabsNum<ept id=\"p1\">](#cmfcbasetabctrl__getvisibletabsnum)</ept>","source":"[CMFCBaseTabCtrl::GetVisibleTabsNum](#cmfcbasetabctrl__getvisibletabsnum)"},{"content":"Returns the number of visible tabs.","pos":[6766,6801]},{"pos":[6806,6861],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::HasImage<ept id=\"p1\">](#cmfcbasetabctrl__hasimage)</ept>","source":"[CMFCBaseTabCtrl::HasImage](#cmfcbasetabctrl__hasimage)"},{"pos":[6867,6932],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::HideSingleTab<ept id=\"p1\">](#cmfcbasetabctrl__hidesingletab)</ept>","source":"[CMFCBaseTabCtrl::HideSingleTab](#cmfcbasetabctrl__hidesingletab)"},{"content":"Sets an option that hides a window tab, but only if the tabbed window displays a just one visible tab.","pos":[6933,7035]},{"pos":[7040,7097],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::InsertTab<ept id=\"p1\">](#cmfcbasetabctrl__inserttab)</ept>","source":"[CMFCBaseTabCtrl::InsertTab](#cmfcbasetabctrl__inserttab)"},{"content":"Inserts a new tab.","pos":[7098,7116]},{"pos":[7121,7186],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::InvalidateTab<ept id=\"p1\">](#cmfcbasetabctrl__invalidatetab)</ept>","source":"[CMFCBaseTabCtrl::InvalidateTab](#cmfcbasetabctrl__invalidatetab)"},{"pos":[7192,7275],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsActiveTabCloseButton<ept id=\"p1\">](#cmfcbasetabctrl__isactivetabclosebutton)</ept>","source":"[CMFCBaseTabCtrl::IsActiveTabCloseButton](#cmfcbasetabctrl__isactivetabclosebutton)"},{"pos":[7281,7342],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsAutoColor<ept id=\"p1\">](#cmfcbasetabctrl__isautocolor)</ept>","source":"[CMFCBaseTabCtrl::IsAutoColor](#cmfcbasetabctrl__isautocolor)"},{"content":"Returns a value that indicates whether a tabbed window is in automatic-color mode.","pos":[7343,7425]},{"pos":[7430,7507],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsAutoDestroyWindow<ept id=\"p1\">](#cmfcbasetabctrl__isautodestroywindow)</ept>","source":"[CMFCBaseTabCtrl::IsAutoDestroyWindow](#cmfcbasetabctrl__isautodestroywindow)"},{"pos":[7513,7570],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsColored<ept id=\"p1\">](#cmfcbasetabctrl__iscolored)</ept>","source":"[CMFCBaseTabCtrl::IsColored](#cmfcbasetabctrl__iscolored)"},{"pos":[7576,7645],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsDialogControl<ept id=\"p1\">](#cmfcbasetabctrl__isdialogcontrol)</ept>","source":"[CMFCBaseTabCtrl::IsDialogControl](#cmfcbasetabctrl__isdialogcontrol)"},{"pos":[7651,7718],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsDrawNoPrefix<ept id=\"p1\">](#cmfcbasetabctrl__isdrawnoprefix)</ept>","source":"[CMFCBaseTabCtrl::IsDrawNoPrefix](#cmfcbasetabctrl__isdrawnoprefix)"},{"pos":[7724,7785],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsFlatFrame<ept id=\"p1\">](#cmfcbasetabctrl__isflatframe)</ept>","source":"[CMFCBaseTabCtrl::IsFlatFrame](#cmfcbasetabctrl__isflatframe)"},{"content":"Returns a value that indicates whether the frame for the tab area is flat or 3D.","pos":[7786,7866]},{"pos":[7871,7928],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsFlatTab<ept id=\"p1\">](#cmfcbasetabctrl__isflattab)</ept>","source":"[CMFCBaseTabCtrl::IsFlatTab](#cmfcbasetabctrl__isflattab)"},{"pos":[7934,8003],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsHideSingleTab<ept id=\"p1\">](#cmfcbasetabctrl__ishidesingletab)</ept>","source":"[CMFCBaseTabCtrl::IsHideSingleTab](#cmfcbasetabctrl__ishidesingletab)"},{"content":"Returns a value that indicates whether the tab control is configured to hide a tab, but only if a tabbed window has just one visible tab.","pos":[8004,8141]},{"pos":[8146,8207],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsIconAdded<ept id=\"p1\">](#cmfcbasetabctrl__isiconadded)</ept>","source":"[CMFCBaseTabCtrl::IsIconAdded](#cmfcbasetabctrl__isiconadded)"},{"pos":[8213,8278],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsInPlaceEdit<ept id=\"p1\">](#cmfcbasetabctrl__isinplaceedit)</ept>","source":"[CMFCBaseTabCtrl::IsInPlaceEdit](#cmfcbasetabctrl__isinplaceedit)"},{"content":"Indicates whether users can modify the label on a tab.","pos":[8279,8333]},{"pos":[8338,8413],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsLeftRightRounded<ept id=\"p1\">](#cmfcbasetabctrl__isleftrightrounded)</ept>","source":"[CMFCBaseTabCtrl::IsLeftRightRounded](#cmfcbasetabctrl__isleftrightrounded)"},{"pos":[8419,8474],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsMDITab<ept id=\"p1\">](#cmfcbasetabctrl__ismditab)</ept>","source":"[CMFCBaseTabCtrl::IsMDITab](#cmfcbasetabctrl__ismditab)"},{"pos":[8480,8547],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsOneNoteStyle<ept id=\"p1\">](#cmfcbasetabctrl__isonenotestyle)</ept>","source":"[CMFCBaseTabCtrl::IsOneNoteStyle](#cmfcbasetabctrl__isonenotestyle)"},{"content":"Indicates whether a tabbed window displays tabs in Microsoft OneNote style.","pos":[8548,8623]},{"pos":[8628,8693],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsPtInTabArea<ept id=\"p1\">](#cmfcbasetabctrl__isptintabarea)</ept>","source":"[CMFCBaseTabCtrl::IsPtInTabArea](#cmfcbasetabctrl__isptintabarea)"},{"content":"Checks whether a specified point exists in the tab area.","pos":[8694,8750]},{"pos":[8755,8848],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsTabCloseButtonHighlighted<ept id=\"p1\">](#cmfcbasetabctrl__istabclosebuttonhighlighted)</ept>","source":"[CMFCBaseTabCtrl::IsTabCloseButtonHighlighted](#cmfcbasetabctrl__istabclosebuttonhighlighted)"},{"pos":[8854,8939],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsTabCloseButtonPressed<ept id=\"p1\">](#cmfcbasetabctrl__istabclosebuttonpressed)</ept>","source":"[CMFCBaseTabCtrl::IsTabCloseButtonPressed](#cmfcbasetabctrl__istabclosebuttonpressed)"},{"pos":[8945,9014],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsTabDetachable<ept id=\"p1\">](#cmfcbasetabctrl__istabdetachable)</ept>","source":"[CMFCBaseTabCtrl::IsTabDetachable](#cmfcbasetabctrl__istabdetachable)"},{"content":"Indicates whether a tab is detachable.","pos":[9015,9053]},{"pos":[9058,9123],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsTabIconOnly<ept id=\"p1\">](#cmfcbasetabctrl__istabicononly)</ept>","source":"[CMFCBaseTabCtrl::IsTabIconOnly](#cmfcbasetabctrl__istabicononly)"},{"content":"Indicates whether tabs display icons but not labels.","pos":[9124,9176]},{"pos":[9181,9252],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsTabSwapEnabled<ept id=\"p1\">](#cmfcbasetabctrl__istabswapenabled)</ept>","source":"[CMFCBaseTabCtrl::IsTabSwapEnabled](#cmfcbasetabctrl__istabswapenabled)"},{"content":"Indicates whether the user can change tab positions by dragging tabs.","pos":[9253,9322]},{"pos":[9327,9390],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsTabVisible<ept id=\"p1\">](#cmfcbasetabctrl__istabvisible)</ept>","source":"[CMFCBaseTabCtrl::IsTabVisible](#cmfcbasetabctrl__istabvisible)"},{"content":"Indicates whether a specified tab is visible.","pos":[9391,9436]},{"pos":[9441,9506],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::IsVS2005Style<ept id=\"p1\">](#cmfcbasetabctrl__isvs2005style)</ept>","source":"[CMFCBaseTabCtrl::IsVS2005Style](#cmfcbasetabctrl__isvs2005style)"},{"pos":[9512,9565],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::MoveTab<ept id=\"p1\">](#cmfcbasetabctrl__movetab)</ept>","source":"[CMFCBaseTabCtrl::MoveTab](#cmfcbasetabctrl__movetab)"},{"pos":[9571,9634],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::OnChangeTabs<ept id=\"p1\">](#cmfcbasetabctrl__onchangetabs)</ept>","source":"[CMFCBaseTabCtrl::OnChangeTabs](#cmfcbasetabctrl__onchangetabs)"},{"content":"Called by the framework when the number of tabs changes.","pos":[9635,9691]},{"pos":[9696,9757],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::OnDragEnter<ept id=\"p1\">](#cmfcbasetabctrl__ondragenter)</ept>","source":"[CMFCBaseTabCtrl::OnDragEnter](#cmfcbasetabctrl__ondragenter)"},{"pos":[9763,9824],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::OnDragLeave<ept id=\"p1\">](#cmfcbasetabctrl__ondragleave)</ept>","source":"[CMFCBaseTabCtrl::OnDragLeave](#cmfcbasetabctrl__ondragleave)"},{"pos":[9830,9889],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::OnDragOver<ept id=\"p1\">](#cmfcbasetabctrl__ondragover)</ept>","source":"[CMFCBaseTabCtrl::OnDragOver](#cmfcbasetabctrl__ondragover)"},{"pos":[9895,9946],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::OnDrop<ept id=\"p1\">](#cmfcbasetabctrl__ondrop)</ept>","source":"[CMFCBaseTabCtrl::OnDrop](#cmfcbasetabctrl__ondrop)"},{"pos":[9952,10013],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::OnRenameTab<ept id=\"p1\">](#cmfcbasetabctrl__onrenametab)</ept>","source":"[CMFCBaseTabCtrl::OnRenameTab](#cmfcbasetabctrl__onrenametab)"},{"pos":[10019,10096],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::PreTranslateMessage<ept id=\"p1\">](#cmfcbasetabctrl__pretranslatemessage)</ept>","source":"[CMFCBaseTabCtrl::PreTranslateMessage](#cmfcbasetabctrl__pretranslatemessage)"},{"content":"Used by class <bpt id=\"p1\">[</bpt>CWinApp<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md)</ept> to translate window messages before they are dispatched to the <bpt id=\"p2\">[</bpt>TranslateMessage<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id=\"p3\">[</bpt>DispatchMessage<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept> Windows functions.","pos":[10097,10401],"source":"Used by class [CWinApp](../../mfc/reference/cwinapp-class.md) to translate window messages before they are dispatched to the [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934) Windows functions."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CWnd::PreTranslateMessage<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__pretranslatemessage)</ept>.)","pos":[10402,10503],"source":" (Overrides [CWnd::PreTranslateMessage](../../mfc/reference/cwnd-class.md#cwnd__pretranslatemessage).)"},{"pos":[10508,10571],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::RecalcLayout<ept id=\"p1\">](#cmfcbasetabctrl__recalclayout)</ept>","source":"[CMFCBaseTabCtrl::RecalcLayout](#cmfcbasetabctrl__recalclayout)"},{"content":"Recalculates the internal layout of a tabbed window.","pos":[10572,10624]},{"pos":[10629,10694],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::RemoveAllTabs<ept id=\"p1\">](#cmfcbasetabctrl__removealltabs)</ept>","source":"[CMFCBaseTabCtrl::RemoveAllTabs](#cmfcbasetabctrl__removealltabs)"},{"content":"Removes all tabs from the tabbed window.","pos":[10695,10735]},{"pos":[10740,10797],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::RemoveTab<ept id=\"p1\">](#cmfcbasetabctrl__removetab)</ept>","source":"[CMFCBaseTabCtrl::RemoveTab](#cmfcbasetabctrl__removetab)"},{"content":"Removes a tab from a tabbed window.","pos":[10798,10833]},{"pos":[10838,10895],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::RenameTab<ept id=\"p1\">](#cmfcbasetabctrl__renametab)</ept>","source":"[CMFCBaseTabCtrl::RenameTab](#cmfcbasetabctrl__renametab)"},{"pos":[10901,10968],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::ResetImageList<ept id=\"p1\">](#cmfcbasetabctrl__resetimagelist)</ept>","source":"[CMFCBaseTabCtrl::ResetImageList](#cmfcbasetabctrl__resetimagelist)"},{"content":"Resets the image list that is attached to a tabbed window.","pos":[10969,11027]},{"pos":[11032,11089],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::Serialize<ept id=\"p1\">](#cmfcbasetabctrl__serialize)</ept>","source":"[CMFCBaseTabCtrl::Serialize](#cmfcbasetabctrl__serialize)"},{"content":"Reads or writes this object from or to an archive.","pos":[11090,11140]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CObject::Serialize<ept id=\"p1\">](../../mfc/reference/cobject-class.md#cobject__serialize)</ept>.)","pos":[11141,11231],"source":" (Overrides [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize).)"},{"pos":[11236,11299],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetActiveTab<ept id=\"p1\">](#cmfcbasetabctrl__setactivetab)</ept>","source":"[CMFCBaseTabCtrl::SetActiveTab](#cmfcbasetabctrl__setactivetab)"},{"content":"Activates a tab.","pos":[11300,11316]},{"pos":[11321,11394],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetActiveTabColor<ept id=\"p1\">](#cmfcbasetabctrl__setactivetabcolor)</ept>","source":"[CMFCBaseTabCtrl::SetActiveTabColor](#cmfcbasetabctrl__setactivetabcolor)"},{"content":"Sets the background color for the currently active tab.","pos":[11395,11450]},{"pos":[11455,11536],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetActiveTabTextColor<ept id=\"p1\">](#cmfcbasetabctrl__setactivetabtextcolor)</ept>","source":"[CMFCBaseTabCtrl::SetActiveTabTextColor](#cmfcbasetabctrl__setactivetabtextcolor)"},{"content":"Sets the text color for active tabs.","pos":[11537,11573]},{"pos":[11578,11643],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetAutoColors<ept id=\"p1\">](#cmfcbasetabctrl__setautocolors)</ept>","source":"[CMFCBaseTabCtrl::SetAutoColors](#cmfcbasetabctrl__setautocolors)"},{"content":"Sets the tab control colors that are applied in automatic color mode.","pos":[11644,11713]},{"pos":[11718,11803],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetDockingBarWrapperRTC<ept id=\"p1\">](#cmfcbasetabctrl__setdockingbarwrapperrtc)</ept>","source":"[CMFCBaseTabCtrl::SetDockingBarWrapperRTC](#cmfcbasetabctrl__setdockingbarwrapperrtc)"},{"pos":[11804,11952],"content":"Sets the wrapper class that is used for any objects that are not derived from the <bpt id=\"p1\">[</bpt>CDockablePane Class<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept>.","source":"Sets the wrapper class that is used for any objects that are not derived from the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md)."},{"pos":[11957,12026],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetDrawNoPrefix<ept id=\"p1\">](#cmfcbasetabctrl__setdrawnoprefix)</ept>","source":"[CMFCBaseTabCtrl::SetDrawNoPrefix](#cmfcbasetabctrl__setdrawnoprefix)"},{"content":"Enables and disables the processing of prefix characters when tab labels are drawn.","pos":[12027,12110]},{"pos":[12115,12178],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetImageList<ept id=\"p1\">](#cmfcbasetabctrl__setimagelist)</ept>","source":"[CMFCBaseTabCtrl::SetImageList](#cmfcbasetabctrl__setimagelist)"},{"content":"Sets the icon image list.","pos":[12179,12204]},{"pos":[12209,12270],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetLocation<ept id=\"p1\">](#cmfcbasetabctrl__setlocation)</ept>","source":"[CMFCBaseTabCtrl::SetLocation](#cmfcbasetabctrl__setlocation)"},{"pos":[12276,12341],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetTabBkColor<ept id=\"p1\">](#cmfcbasetabctrl__settabbkcolor)</ept>","source":"[CMFCBaseTabCtrl::SetTabBkColor](#cmfcbasetabctrl__settabbkcolor)"},{"content":"Sets the background color for a specified tab.","pos":[12342,12388]},{"pos":[12393,12464],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetTabBorderSize<ept id=\"p1\">](#cmfcbasetabctrl__settabbordersize)</ept>","source":"[CMFCBaseTabCtrl::SetTabBorderSize](#cmfcbasetabctrl__settabbordersize)"},{"content":"Sets a new tab border size.","pos":[12465,12492]},{"pos":[12497,12558],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetTabHicon<ept id=\"p1\">](#cmfcbasetabctrl__settabhicon)</ept>","source":"[CMFCBaseTabCtrl::SetTabHicon](#cmfcbasetabctrl__settabhicon)"},{"content":"Sets a tab icon.","pos":[12559,12575]},{"pos":[12580,12639],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetTabIcon<ept id=\"p1\">](#cmfcbasetabctrl__settabicon)</ept>","source":"[CMFCBaseTabCtrl::SetTabIcon](#cmfcbasetabctrl__settabicon)"},{"content":"Sets a tab icon ID.","pos":[12640,12659]},{"pos":[12664,12731],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetTabIconOnly<ept id=\"p1\">](#cmfcbasetabctrl__settabicononly)</ept>","source":"[CMFCBaseTabCtrl::SetTabIconOnly](#cmfcbasetabctrl__settabicononly)"},{"content":"Enables and disables the \"icon only\" mode for a specified tab.","pos":[12732,12794]},{"pos":[12799,12860],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetTabLabel<ept id=\"p1\">](#cmfcbasetabctrl__settablabel)</ept>","source":"[CMFCBaseTabCtrl::SetTabLabel](#cmfcbasetabctrl__settablabel)"},{"content":"Sets a tab label equal to a specified string value.","pos":[12861,12912]},{"pos":[12917,12982],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetTabsHeight<ept id=\"p1\">](#cmfcbasetabctrl__settabsheight)</ept>","source":"[CMFCBaseTabCtrl::SetTabsHeight](#cmfcbasetabctrl__settabsheight)"},{"pos":[12988,13057],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetTabTextColor<ept id=\"p1\">](#cmfcbasetabctrl__settabtextcolor)</ept>","source":"[CMFCBaseTabCtrl::SetTabTextColor](#cmfcbasetabctrl__settabtextcolor)"},{"content":"Sets the text color for a specified tab.","pos":[13058,13098]},{"pos":[13103,13166],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetTabsOrder<ept id=\"p1\">](#cmfcbasetabctrl__settabsorder)</ept>","source":"[CMFCBaseTabCtrl::SetTabsOrder](#cmfcbasetabctrl__settabsorder)"},{"content":"Arranges tabs in the specified order.","pos":[13167,13204]},{"pos":[13209,13262],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::ShowTab<ept id=\"p1\">](#cmfcbasetabctrl__showtab)</ept>","source":"[CMFCBaseTabCtrl::ShowTab](#cmfcbasetabctrl__showtab)"},{"content":"Shows or hides the specified tab.","pos":[13263,13296]},{"pos":[13301,13368],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::StartRenameTab<ept id=\"p1\">](#cmfcbasetabctrl__startrenametab)</ept>","source":"[CMFCBaseTabCtrl::StartRenameTab](#cmfcbasetabctrl__startrenametab)"},{"pos":[13374,13429],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SwapTabs<ept id=\"p1\">](#cmfcbasetabctrl__swaptabs)</ept>","source":"[CMFCBaseTabCtrl::SwapTabs](#cmfcbasetabctrl__swaptabs)"},{"pos":[13441,13458],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[13465,13469]},{"content":"Description","pos":[13470,13481]},{"pos":[13519,13584],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::CreateWrapper<ept id=\"p1\">](#cmfcbasetabctrl__createwrapper)</ept>","source":"[CMFCBaseTabCtrl::CreateWrapper](#cmfcbasetabctrl__createwrapper)"},{"content":"Creates a wrapper for an object derived from <bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept> that is not derived from <ph id=\"ph1\">`CDockablePane`</ph>.","pos":[13585,13713],"source":"Creates a wrapper for an object derived from [CWnd](../../mfc/reference/cwnd-class.md) that is not derived from `CDockablePane`."},{"content":"To dock a <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph> object, every embedded control must either have a docking wrapper or be derived from <ph id=\"ph2\">`CDockablePane`</ph>.","pos":[13714,13843],"source":" To dock a `CMFCBaseTabCtrl` object, every embedded control must either have a docking wrapper or be derived from `CDockablePane`."},{"content":"You set the class of the wrapper by using <ph id=\"ph1\">`SetDockingBayWrapperRTC`</ph>.","pos":[13856,13924],"source":" You set the class of the wrapper by using `SetDockingBayWrapperRTC`."},{"pos":[13935,13947],"content":"Data Members","linkify":"Data Members","nodes":[{"content":"Data Members","pos":[0,12]}]},{"content":"Name","pos":[13954,13958]},{"content":"Description","pos":[13959,13970]},{"pos":[14008,14099],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::m_bActivateTabOnRightClick<ept id=\"p1\">](#cmfcbasetabctrl__m_bactivatetabonrightclick)</ept>","source":"[CMFCBaseTabCtrl::m_bActivateTabOnRightClick](#cmfcbasetabctrl__m_bactivatetabonrightclick)"},{"content":"Specifies whether tabs are selected by using a left mouse click or a right mouse click.","pos":[14100,14187]},{"pos":[14192,14271],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::m_bAutoDestroyWindow<ept id=\"p1\">](#cmfcbasetabctrl__m_bautodestroywindow)</ept>","source":"[CMFCBaseTabCtrl::m_bAutoDestroyWindow](#cmfcbasetabctrl__m_bautodestroywindow)"},{"content":"Specifies whether the panes that are contained in the tabs are destroyed automatically.","pos":[14272,14359]},{"pos":[14369,14376],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph> class is an abstract class.","pos":[14380,14429],"source":"The `CMFCBaseTabCtrl` class is an abstract class."},{"content":"Therefore, it cannot be instantiated.","pos":[14430,14467]},{"content":"To create a tabbed window, you must derive a class from <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph>.","pos":[14468,14542],"source":" To create a tabbed window, you must derive a class from `CMFCBaseTabCtrl`."},{"content":"The MFC library contains some derived class examples, two of which are <bpt id=\"p1\">[</bpt>CMFCTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfctabctrl-class.md)</ept> and <bpt id=\"p2\">[</bpt>CMFCOutlookBarTabCtrl Class<ept id=\"p2\">](../../mfc/reference/cmfcoutlookbartabctrl-class.md)</ept>.","pos":[14543,14762],"source":" The MFC library contains some derived class examples, two of which are [CMFCTabCtrl Class](../../mfc/reference/cmfctabctrl-class.md) and [CMFCOutlookBarTabCtrl Class](../../mfc/reference/cmfcoutlookbartabctrl-class.md)."},{"pos":[14769,14891],"content":"Starting with <ph id=\"ph1\">[!INCLUDE[vs_dev14](../../ide/includes/vs_dev14_md.md)]</ph>, this class supports Microsoft Active Accessibility.","source":"Starting with [!INCLUDE[vs_dev14](../../ide/includes/vs_dev14_md.md)], this class supports Microsoft Active Accessibility."},{"pos":[14900,14918],"content":"Customization Tips","linkify":"Customization Tips","nodes":[{"content":"Customization Tips","pos":[0,18]}]},{"pos":[14922,15063],"content":"The following tips pertain to the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept> and any classes that inherit from it:","source":"The following tips pertain to the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md) and any classes that inherit from it:"},{"content":"If you enable detachable tabs, do not keep pointers to the tabbed windows.","pos":[15073,15147]},{"content":"These detachable tabs can be created and destroyed dynamically.","pos":[15148,15211]},{"content":"Therefore, pointers can become invalid.","pos":[15212,15251]},{"content":"You can configure the tab control so that users can move tabs dynamically on a tab control by using the mouse.","pos":[15261,15371]},{"content":"This functionality is built into the <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph> class.","pos":[15372,15433],"source":" This functionality is built into the `CMFCBaseTabCtrl` class."},{"content":"To enable it, call <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnableTabSwap<ept id=\"p1\">](#cmfcbasetabctrl__enabletabswap)</ept>.","pos":[15434,15519],"source":" To enable it, call [CMFCBaseTabCtrl::EnableTabSwap](#cmfcbasetabctrl__enabletabswap)."},{"content":"By default, tabs are detachable when you add them to a tab control.","pos":[15529,15596]},{"content":"You can also add non-detachable tabs by using <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::AddTab<ept id=\"p1\">](#cmfcbasetabctrl__addtab)</ept>.","pos":[15597,15695],"source":" You can also add non-detachable tabs by using [CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab)."},{"content":"If you set the parameter <ph id=\"ph1\">`bDetachable`</ph> to <ph id=\"ph2\">`FALSE`</ph>, the tab will not be detachable.","pos":[15696,15778],"source":" If you set the parameter `bDetachable` to `FALSE`, the tab will not be detachable."},{"content":"You can also change whether tabs are detachable by calling the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnableTabDetach<ept id=\"p1\">](#cmfcbasetabctrl__enabletabdetach)</ept>.","pos":[15779,15919],"source":" You can also change whether tabs are detachable by calling the method [CMFCBaseTabCtrl::EnableTabDetach](#cmfcbasetabctrl__enabletabdetach)."},{"content":"Objects that are derived from the <bpt id=\"p1\">[</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept> can be put on a dockable control bar or dockable tab.","pos":[15929,16064],"source":"Objects that are derived from the [CWnd Class](../../mfc/reference/cwnd-class.md) can be put on a dockable control bar or dockable tab."},{"content":"For the whole control to be docked, you must make the <ph id=\"ph1\">`CWnd`</ph> object dockable.","pos":[16065,16142],"source":" For the whole control to be docked, you must make the `CWnd` object dockable."},{"content":"To accomplish this, MFC uses a wrapper class.","pos":[16143,16188]},{"content":"This wrapper class is the <bpt id=\"p1\">[</bpt>CDockablePaneAdapter Class<ept id=\"p1\">](../../mfc/reference/cdockablepaneadapter-class.md)</ept>.","pos":[16189,16295],"source":" This wrapper class is the [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md)."},{"content":"Any <ph id=\"ph1\">`CWnd`</ph> objects that are added to a dockable control bar or dockable tab will be wrapped inside a <ph id=\"ph2\">`CDockablePaneAdapter`</ph> object.","pos":[16296,16427],"source":" Any `CWnd` objects that are added to a dockable control bar or dockable tab will be wrapped inside a `CDockablePaneAdapter` object."},{"content":"You can disable the automatic wrapping by setting the parameter <ph id=\"ph1\">`m_bEnableWrapping`</ph> of your <ph id=\"ph2\">`CMFCBaseTablCtrl`</ph> object to <ph id=\"ph3\">`FALSE`</ph>.","pos":[16428,16557],"source":" You can disable the automatic wrapping by setting the parameter `m_bEnableWrapping` of your `CMFCBaseTablCtrl` object to `FALSE`."},{"content":"You can also change the class that your application will use as a wrapper by using the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetDockingBarWrapperRTC<ept id=\"p1\">](#cmfcbasetabctrl__setdockingbarwrapperrtc)</ept>.","pos":[16558,16738],"source":" You can also change the class that your application will use as a wrapper by using the method [CMFCBaseTabCtrl::SetDockingBarWrapperRTC](#cmfcbasetabctrl__setdockingbarwrapperrtc)."},{"pos":[16747,16768],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[16772,16819],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[16826,16879],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[16886,16927],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[16934,16997],"content":"<bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>","source":"[CMFCBaseTabCtrl](../../mfc/reference/cmfcbasetabctrl-class.md)"},{"pos":[17006,17018],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[17022,17050],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxbasetabctrl.h","source":"**Header:** afxbasetabctrl.h"},{"pos":[17060,17125],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__addicon\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::AddIcon","linkify":"<a name=\"cmfcbasetabctrl__addicon\"></a>  CMFCBaseTabCtrl::AddIcon","source":"<a name=\"cmfcbasetabctrl__addicon\"></a>  CMFCBaseTabCtrl::AddIcon"},{"pos":[17129,17211],"content":"Adds an icon to the list of icons in the protected <ph id=\"ph1\">`CMap``m_mapAddedIcons`</ph> member.","source":"Adds an icon to the list of icons in the protected `CMap``m_mapAddedIcons` member."},{"pos":[17285,17295],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`hIcon`</ph>","pos":[17299,17311],"source":"[in] `hIcon`"},{"content":"A handle to the icon to be added.","pos":[17315,17348]},{"content":"[in] <ph id=\"ph1\">`iIcon`</ph>","pos":[17355,17367],"source":"[in] `iIcon`"},{"content":"Zero-based index of the icon in the protected <ph id=\"ph1\">`CImageList``m_Images`</ph> member.","pos":[17371,17447],"source":" Zero-based index of the icon in the protected `CImageList``m_Images` member."},{"pos":[17457,17464],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17474,17537],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__addtab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::AddTab","linkify":"<a name=\"cmfcbasetabctrl__addtab\"></a>  CMFCBaseTabCtrl::AddTab","source":"<a name=\"cmfcbasetabctrl__addtab\"></a>  CMFCBaseTabCtrl::AddTab"},{"content":"Adds a new tab to the tab control.","pos":[17541,17575]},{"pos":[17868,17878],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pTabWnd`</ph>","pos":[17882,17896],"source":"[in] `pTabWnd`"},{"content":"A pointer to the window that this method represents as a new tab.","pos":[17900,17965]},{"content":"[in] <ph id=\"ph1\">`lpszTabLabel`</ph>","pos":[17972,17991],"source":"[in] `lpszTabLabel`"},{"content":"A string that contains the label for the new tab.","pos":[17995,18044]},{"content":"[in] <ph id=\"ph1\">`uiImageId`</ph>","pos":[18051,18067],"source":"[in] `uiImageId`"},{"content":"An image ID from the image list.","pos":[18071,18103]},{"content":"The tab control uses this image as the icon for the new tab.","pos":[18104,18164]},{"content":"[in] <ph id=\"ph1\">`uiResTabLabel`</ph>","pos":[18171,18191],"source":"[in] `uiResTabLabel`"},{"content":"The resource ID for the label.","pos":[18195,18225]},{"content":"[in] <ph id=\"ph1\">`bDetachable`</ph>","pos":[18232,18250],"source":"[in] `bDetachable`"},{"content":"A Boolean parameter that determines whether the new tab is detachable.","pos":[18254,18324]},{"pos":[18334,18341],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <ph id=\"ph1\">`pTabWnd`</ph> points to an object that is not derived from the <bpt id=\"p1\">[</bpt>CDockablePane Class<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept> and if <ph id=\"ph2\">`bDetachable`</ph> is <ph id=\"ph3\">`TRUE`</ph>, the framework automatically creates a wrapper for the <ph id=\"ph4\">`pTabWnd`</ph> object.","pos":[18345,18576],"source":"If `pTabWnd` points to an object that is not derived from the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md) and if `bDetachable` is `TRUE`, the framework automatically creates a wrapper for the `pTabWnd` object."},{"content":"The wrapper makes the <ph id=\"ph1\">`pTabWnd`</ph> object detachable.","pos":[18577,18627],"source":" The wrapper makes the `pTabWnd` object detachable."},{"content":"By default, the wrapper is an instance of the <bpt id=\"p1\">[</bpt>CDockablePaneAdapter Class<ept id=\"p1\">](../../mfc/reference/cdockablepaneadapter-class.md)</ept>.","pos":[18628,18754],"source":" By default, the wrapper is an instance of the [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md)."},{"content":"If the functionality offered by the default wrapper is unacceptable, use the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetDockingBarWrapperRTC<ept id=\"p1\">](#cmfcbasetabctrl__setdockingbarwrapperrtc)</ept> method to specify a different wrapper.","pos":[18755,18956],"source":" If the functionality offered by the default wrapper is unacceptable, use the [CMFCBaseTabCtrl::SetDockingBarWrapperRTC](#cmfcbasetabctrl__setdockingbarwrapperrtc) method to specify a different wrapper."},{"pos":[18966,19057],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__applyrestoredtabinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::ApplyRestoredTabInfo","linkify":"<a name=\"cmfcbasetabctrl__applyrestoredtabinfo\"></a>  CMFCBaseTabCtrl::ApplyRestoredTabInfo","source":"<a name=\"cmfcbasetabctrl__applyrestoredtabinfo\"></a>  CMFCBaseTabCtrl::ApplyRestoredTabInfo"},{"pos":[19249,19259],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[19263,19284],"content":"[in] <ph id=\"ph1\">`bUseTabIndexes`</ph>","source":"[in] `bUseTabIndexes`"},{"pos":[19294,19301],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19311,19396],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__autodestroywindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::AutoDestroyWindow","linkify":"<a name=\"cmfcbasetabctrl__autodestroywindow\"></a>  CMFCBaseTabCtrl::AutoDestroyWindow","source":"<a name=\"cmfcbasetabctrl__autodestroywindow\"></a>  CMFCBaseTabCtrl::AutoDestroyWindow"},{"pos":[19574,19584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[19588,19607],"content":"[in] <ph id=\"ph1\">`bAutoDestroy`</ph>","source":"[in] `bAutoDestroy`"},{"pos":[19617,19624],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19634,19709],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__calcrectedit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::CalcRectEdit","linkify":"<a name=\"cmfcbasetabctrl__calcrectedit\"></a>  CMFCBaseTabCtrl::CalcRectEdit","source":"<a name=\"cmfcbasetabctrl__calcrectedit\"></a>  CMFCBaseTabCtrl::CalcRectEdit"},{"pos":[19881,19891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[19895,19910],"content":"[in] <ph id=\"ph1\">`rectEdit`</ph>","source":"[in] `rectEdit`"},{"pos":[19920,19927],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19937,20002],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__cleanup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::CleanUp","linkify":"<a name=\"cmfcbasetabctrl__cleanup\"></a>  CMFCBaseTabCtrl::CleanUp","source":"<a name=\"cmfcbasetabctrl__cleanup\"></a>  CMFCBaseTabCtrl::CleanUp"},{"pos":[20154,20161],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20171,20250],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__clearimagelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::ClearImageList","linkify":"<a name=\"cmfcbasetabctrl__clearimagelist\"></a>  CMFCBaseTabCtrl::ClearImageList","source":"<a name=\"cmfcbasetabctrl__clearimagelist\"></a>  CMFCBaseTabCtrl::ClearImageList"},{"pos":[20409,20416],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20426,20503],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__createwrapper\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::CreateWrapper","linkify":"<a name=\"cmfcbasetabctrl__createwrapper\"></a>  CMFCBaseTabCtrl::CreateWrapper","source":"<a name=\"cmfcbasetabctrl__createwrapper\"></a>  CMFCBaseTabCtrl::CreateWrapper"},{"pos":[20507,20711],"content":"Creates a wrapper for a frame window that is derived from the <bpt id=\"p1\">[</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept> but is not derived from the <bpt id=\"p2\">[</bpt>CDockablePane Class<ept id=\"p2\">](../../mfc/reference/cdockablepane-class.md)</ept>.","source":"Creates a wrapper for a frame window that is derived from the [CWnd Class](../../mfc/reference/cwnd-class.md) but is not derived from the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md)."},{"pos":[20840,20850],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWndToWrap`</ph>","pos":[20854,20871],"source":"[in] `pWndToWrap`"},{"content":"A pointer to the frame window that is wrapped.","pos":[20875,20921]},{"content":"[in] <ph id=\"ph1\">`lpszTabLabel`</ph>","pos":[20928,20947],"source":"[in] `lpszTabLabel`"},{"content":"A string that contains the label for the window.","pos":[20951,20999]},{"content":"[in] <ph id=\"ph1\">`bDetachable`</ph>","pos":[21006,21024],"source":"[in] `bDetachable`"},{"content":"A Boolean parameter that indicates whether the window is detachable.","pos":[21028,21096]},{"pos":[21106,21118],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to wrapper derived from the <ph id=\"ph1\">`CDockablePane`</ph> class if <ph id=\"ph2\">`CreateWrapper`</ph> successfully creates a wrapper class for <ph id=\"ph3\">`pWndToWrap`</ph>.","pos":[21122,21255],"source":"A pointer to wrapper derived from the `CDockablePane` class if `CreateWrapper` successfully creates a wrapper class for `pWndToWrap`."},{"content":"If the method fails, it retruns <ph id=\"ph1\">`pWndToWrap`</ph>.","pos":[21256,21301],"source":" If the method fails, it retruns `pWndToWrap`."},{"pos":[21311,21318],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A tabbed window can dock any object derived from <ph id=\"ph1\">`CWnd`</ph>.","pos":[21322,21378],"source":"A tabbed window can dock any object derived from `CWnd`."},{"content":"However, in order for a <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept> object to be dockable, each object on the <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph> must be detachable.","pos":[21379,21552],"source":" However, in order for a [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md) object to be dockable, each object on the `CMFCBaseTabCtrl` must be detachable."},{"content":"Therefore, <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph> automatically wraps any objects that are not derived from <ph id=\"ph2\">`CDockablePane`</ph>.","pos":[21553,21656],"source":" Therefore, `CMFCBaseTabCtrl` automatically wraps any objects that are not derived from `CDockablePane`."},{"content":"By default, the <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph> creates instances of the <bpt id=\"p1\">[</bpt>CDockablePaneAdapter Class<ept id=\"p1\">](../../mfc/reference/cdockablepaneadapter-class.md)</ept>.","pos":[21663,21802],"source":"By default, the `CMFCBaseTabCtrl` creates instances of the [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md)."},{"content":"To change the wrapper's default class, call <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetDockingBarWrapperRTC<ept id=\"p1\">](#cmfcbasetabctrl__setdockingbarwrapperrtc)</ept>.","pos":[21803,21933],"source":" To change the wrapper's default class, call [CMFCBaseTabCtrl::SetDockingBarWrapperRTC](#cmfcbasetabctrl__setdockingbarwrapperrtc)."},{"content":"If <ph id=\"ph1\">`pWndToWrap`</ph> is derived from <ph id=\"ph2\">`CDockablePane`</ph>, this method will not create a wrapper.","pos":[21940,22027],"source":"If `pWndToWrap` is derived from `CDockablePane`, this method will not create a wrapper."},{"content":"Instead, it will fail and return <ph id=\"ph1\">`pWndToWrap`</ph>.","pos":[22028,22074],"source":" Instead, it will fail and return `pWndToWrap`."},{"pos":[22084,22153],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__detachtab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::DetachTab","linkify":"<a name=\"cmfcbasetabctrl__detachtab\"></a>  CMFCBaseTabCtrl::DetachTab","source":"<a name=\"cmfcbasetabctrl__detachtab\"></a>  CMFCBaseTabCtrl::DetachTab"},{"content":"The framework calls this method to detach a tab from the tab control.","pos":[22157,22226]},{"pos":[22358,22368],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dockMethod`</ph>","pos":[22372,22389],"source":"[in] `dockMethod`"},{"content":"An enumerated data type provided by the <bpt id=\"p1\">[</bpt>CBasePane Class<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md)</ept>.","pos":[22393,22491],"source":" An enumerated data type provided by the [CBasePane Class](../../mfc/reference/cbasepane-class.md)."},{"content":"This data type specifies the method that was used to detach the tab.","pos":[22492,22560]},{"content":"[in] <ph id=\"ph1\">`nTabNum`</ph>","pos":[22567,22581],"source":"[in] `nTabNum`"},{"content":"The zero-based index of the tab to be detached.","pos":[22585,22632]},{"content":"[in] <ph id=\"ph1\">`bHide`</ph>","pos":[22639,22651],"source":"[in] `bHide`"},{"content":"A Boolean parameter that indicates whether the framework should hide the detached tab.","pos":[22655,22741]},{"pos":[22751,22763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[22767,22802]},{"pos":[22812,22819],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22823,22916],"content":"If the tab specified by <ph id=\"ph1\">`nTabNum`</ph> is non-detachable, this function fails and returns <ph id=\"ph2\">`FALSE`</ph>.","source":"If the tab specified by `nTabNum` is non-detachable, this function fails and returns `FALSE`."},{"pos":[22926,23025],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__enableactivatelastactive\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::EnableActivateLastActive","linkify":"<a name=\"cmfcbasetabctrl__enableactivatelastactive\"></a>  CMFCBaseTabCtrl::EnableActivateLastActive","source":"<a name=\"cmfcbasetabctrl__enableactivatelastactive\"></a>  CMFCBaseTabCtrl::EnableActivateLastActive"},{"pos":[23209,23219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[23223,23241],"content":"[in] <ph id=\"ph1\">`bLastActive`</ph>","source":"[in] `bLastActive`"},{"pos":[23251,23258],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23268,23349],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__enableautocolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::EnableAutoColor","linkify":"<a name=\"cmfcbasetabctrl__enableautocolor\"></a>  CMFCBaseTabCtrl::EnableAutoColor","source":"<a name=\"cmfcbasetabctrl__enableautocolor\"></a>  CMFCBaseTabCtrl::EnableAutoColor"},{"content":"Controls whether the framework uses the automatic background colors when drawing a tab.","pos":[23353,23440]},{"pos":[23508,23518],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[23522,23536],"source":"[in] `bEnable`"},{"content":"A Boolean parameter that determines whether the framework uses automatic colors.","pos":[23540,23620]},{"pos":[23630,23637],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A tab control has an array of several predefined colors.","pos":[23641,23697]},{"content":"When the framework uses automatic colors, each tab in a series of tabs is assigned the next color from this array.","pos":[23698,23812]},{"content":"By default, the automatic colors are determined by the library-defined colors.","pos":[23819,23897]},{"content":"You can provide a custom array of colors by calling <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetAutoColors<ept id=\"p1\">](#cmfcbasetabctrl__setautocolors)</ept>.","pos":[23898,24016],"source":" You can provide a custom array of colors by calling [CMFCBaseTabCtrl::SetAutoColors](#cmfcbasetabctrl__setautocolors)."},{"pos":[24026,24117],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__enablecustomtooltips\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::EnableCustomToolTips","linkify":"<a name=\"cmfcbasetabctrl__enablecustomtooltips\"></a>  CMFCBaseTabCtrl::EnableCustomToolTips","source":"<a name=\"cmfcbasetabctrl__enablecustomtooltips\"></a>  CMFCBaseTabCtrl::EnableCustomToolTips"},{"content":"Enables custom tooltips for the tab control.","pos":[24121,24165]},{"pos":[24238,24248],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[24252,24266],"source":"[in] `bEnable`"},{"content":"A Boolean that determines whether to use custom tooltips.","pos":[24270,24327]},{"pos":[24337,24349],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24353,24393],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if successful; otherwise `FALSE`."},{"pos":[24403,24410],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If custom tooltips are enabled, the tab control sends the <ph id=\"ph1\">`AFX_WM_ON_GET_TAB_TOOLTIP`</ph> message to the main frame.","pos":[24414,24526],"source":"If custom tooltips are enabled, the tab control sends the `AFX_WM_ON_GET_TAB_TOOLTIP` message to the main frame."},{"content":"If you want to support custom tooltips in your application, the main frame window must handle this method and provide the custom tooltip text.","pos":[24527,24669]},{"content":"For more information about providing custom tooltip text, see <bpt id=\"p1\">[</bpt>CMFCTabToolTipInfo Structure<ept id=\"p1\">](../../mfc/reference/cmfctabtooltipinfo-structure.md)</ept>.","pos":[24670,24816],"source":" For more information about providing custom tooltip text, see [CMFCTabToolTipInfo Structure](../../mfc/reference/cmfctabtooltipinfo-structure.md)."},{"pos":[24826,24911],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__enableinplaceedit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::EnableInPlaceEdit","linkify":"<a name=\"cmfcbasetabctrl__enableinplaceedit\"></a>  CMFCBaseTabCtrl::EnableInPlaceEdit","source":"<a name=\"cmfcbasetabctrl__enableinplaceedit\"></a>  CMFCBaseTabCtrl::EnableInPlaceEdit"},{"content":"Enables direct editing of the tab labels by the user.","pos":[24915,24968]},{"pos":[25045,25055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[25059,25073],"source":"[in] `bEnable`"},{"content":"A Boolean parameter that specifies whether to enable direct editing of the tab labels.","pos":[25077,25163]},{"pos":[25173,25180],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, direct editing of the tab labels is disabled for tab controls.","pos":[25184,25258]},{"content":"You can enable direct editing for a subset of the tabs on the tab control.","pos":[25265,25339]},{"content":"To do this, override the method <ph id=\"ph1\">`CMFCBaseTabCtrl::StartRenameTab`</ph>.","pos":[25340,25406],"source":" To do this, override the method `CMFCBaseTabCtrl::StartRenameTab`."},{"content":"<ph id=\"ph1\">`StartRenameTab`</ph> should return a nonzero value for all tabs that support direct editing of tab labels.","pos":[25407,25509],"source":"`StartRenameTab` should return a nonzero value for all tabs that support direct editing of tab labels."},{"content":"In the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>, this method is a pure virtual function and has no implementation.","pos":[25516,25659],"source":"In the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md), this method is a pure virtual function and has no implementation."},{"content":"If you derive a class from <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph>, you must implement this function.","pos":[25660,25739],"source":" If you derive a class from `CMFCBaseTabCtrl`, you must implement this function."},{"pos":[25749,25830],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__enabletabdetach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::EnableTabDetach","linkify":"<a name=\"cmfcbasetabctrl__enabletabdetach\"></a>  CMFCBaseTabCtrl::EnableTabDetach","source":"<a name=\"cmfcbasetabctrl__enabletabdetach\"></a>  CMFCBaseTabCtrl::EnableTabDetach"},{"content":"Enables detachable tabs.","pos":[25834,25858]},{"pos":[25948,25958],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[25962,25973],"source":"[in] `iTab`"},{"content":"The zero-based index of a tab.","pos":[25977,26007]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[26014,26028],"source":"[in] `bEnable`"},{"content":"A Boolean that indicates whether to make the tab detachable.","pos":[26032,26092]},{"pos":[26102,26114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26118,26158],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if successful; otherwise `FALSE`."},{"pos":[26168,26245],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__enabletabswap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::EnableTabSwap","linkify":"<a name=\"cmfcbasetabctrl__enabletabswap\"></a>  CMFCBaseTabCtrl::EnableTabSwap","source":"<a name=\"cmfcbasetabctrl__enabletabswap\"></a>  CMFCBaseTabCtrl::EnableTabSwap"},{"content":"Enables the user to change the tab order using a mouse.","pos":[26249,26304]},{"pos":[26363,26373],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[26377,26391],"source":"[in] `bEnable`"},{"content":"A Boolean that indicates whether to enable tab swapping.","pos":[26395,26451]},{"pos":[26461,26468],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When tab swapping is enabled, the user can drag a tab and change its relative position in the tab control.","pos":[26472,26578]},{"pos":[26588,26665],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__ensurevisible\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::EnsureVisible","linkify":"<a name=\"cmfcbasetabctrl__ensurevisible\"></a>  CMFCBaseTabCtrl::EnsureVisible","source":"<a name=\"cmfcbasetabctrl__ensurevisible\"></a>  CMFCBaseTabCtrl::EnsureVisible"},{"content":"Scrolls the tabs until the specified tab is visible.","pos":[26669,26721]},{"pos":[26784,26794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[26798,26809],"source":"[in] `iTab`"},{"content":"The zero-based index of a tab.","pos":[26813,26843]},{"pos":[26853,26865],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[26869,26904]},{"pos":[26914,26921],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26925,27001],"content":"This method has no effect if the tab indicated by <ph id=\"ph1\">`iTab`</ph> is already visible.","source":"This method has no effect if the tab indicated by `iTab` is already visible."},{"content":"By default, this method is not supported by the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>.","pos":[27008,27126],"source":"By default, this method is not supported by the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md)."},{"content":"You should implement this function in a custom class derived from <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph> if that custom tab control supports tab scrolling.","pos":[27127,27261],"source":" You should implement this function in a custom class derived from `CMFCBaseTabCtrl` if that custom tab control supports tab scrolling."},{"content":"This method is supported by the <bpt id=\"p1\">[</bpt>CMFCTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfctabctrl-class.md)</ept>.","pos":[27262,27356],"source":" This method is supported by the [CMFCTabCtrl Class](../../mfc/reference/cmfctabctrl-class.md)."},{"pos":[27366,27443],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__enterdragmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::EnterDragMode","linkify":"<a name=\"cmfcbasetabctrl__enterdragmode\"></a>  CMFCBaseTabCtrl::EnterDragMode","source":"<a name=\"cmfcbasetabctrl__enterdragmode\"></a>  CMFCBaseTabCtrl::EnterDragMode"},{"pos":[27593,27600],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27610,27687],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__findtargetwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::FindTargetWnd","linkify":"<a name=\"cmfcbasetabctrl__findtargetwnd\"></a>  CMFCBaseTabCtrl::FindTargetWnd","source":"<a name=\"cmfcbasetabctrl__findtargetwnd\"></a>  CMFCBaseTabCtrl::FindTargetWnd"},{"content":"Identifies the pane that contains a specified point.","pos":[27691,27743]},{"pos":[27821,27831],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pt`</ph>","pos":[27835,27844],"source":"[in] `pt`"},{"content":"A point that is defined by using client-area coordinates of the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept> object.","pos":[27848,27983],"source":" A point that is defined by using client-area coordinates of the [CMFCBaseTabCtrl](../../mfc/reference/cmfcbasetabctrl-class.md) object."},{"pos":[27993,28005],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28009,28105],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept> object if successful; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to a [CWnd](../../mfc/reference/cwnd-class.md) object if successful; otherwise `NULL`."},{"pos":[28115,28122],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28126,28265],"content":"In the <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph> class, this method is a pure virtual function: you must implement it if you derive a class from <ph id=\"ph2\">`CMFCBaseTabCtrl`</ph>.","source":"In the `CMFCBaseTabCtrl` class, this method is a pure virtual function: you must implement it if you derive a class from `CMFCBaseTabCtrl`."},{"pos":[28275,28364],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__firechangeactivetab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::FireChangeActiveTab","linkify":"<a name=\"cmfcbasetabctrl__firechangeactivetab\"></a>  CMFCBaseTabCtrl::FireChangeActiveTab","source":"<a name=\"cmfcbasetabctrl__firechangeactivetab\"></a>  CMFCBaseTabCtrl::FireChangeActiveTab"},{"pos":[28539,28549],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[28553,28567],"content":"[in] <ph id=\"ph1\">`nNewTab`</ph>","source":"[in] `nNewTab`"},{"pos":[28577,28584],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28594,28687],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__firechangingactivetab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::FireChangingActiveTab","linkify":"<a name=\"cmfcbasetabctrl__firechangingactivetab\"></a>  CMFCBaseTabCtrl::FireChangingActiveTab","source":"<a name=\"cmfcbasetabctrl__firechangingactivetab\"></a>  CMFCBaseTabCtrl::FireChangingActiveTab"},{"pos":[28864,28874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[28878,28892],"content":"[in] <ph id=\"ph1\">`nNewTab`</ph>","source":"[in] `nNewTab`"},{"pos":[28902,28914],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28924,28931],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28941,29016],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__getactivetab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetActiveTab","linkify":"<a name=\"cmfcbasetabctrl__getactivetab\"></a>  CMFCBaseTabCtrl::GetActiveTab","source":"<a name=\"cmfcbasetabctrl__getactivetab\"></a>  CMFCBaseTabCtrl::GetActiveTab"},{"content":"Retrieves the index of the currently active tab.","pos":[29020,29068]},{"pos":[29130,29142],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of the active tab; -1 if there is no active tab.","pos":[29146,29215]},{"pos":[29225,29310],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__getactivetabcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetActiveTabColor","linkify":"<a name=\"cmfcbasetabctrl__getactivetabcolor\"></a>  CMFCBaseTabCtrl::GetActiveTabColor","source":"<a name=\"cmfcbasetabctrl__getactivetabcolor\"></a>  CMFCBaseTabCtrl::GetActiveTabColor"},{"content":"Retrieves the background color of the currently active tab.","pos":[29314,29373]},{"pos":[29445,29457],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29461,29594],"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> value that specifies the background color of the active tab.","source":"A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value that specifies the background color of the active tab."},{"pos":[29604,29611],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, the background color of the active tab is <ph id=\"ph1\">`COLOR_WINDOW`</ph>.","pos":[29615,29684],"source":"By default, the background color of the active tab is `COLOR_WINDOW`."},{"content":"You can change the background color for the active tab by using the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetActiveTabColor<ept id=\"p1\">](#cmfcbasetabctrl__setactivetabcolor)</ept>.","pos":[29685,29834],"source":" You can change the background color for the active tab by using the method [CMFCBaseTabCtrl::SetActiveTabColor](#cmfcbasetabctrl__setactivetabcolor)."},{"pos":[29844,29937],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__getactivetabtextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetActiveTabTextColor","linkify":"<a name=\"cmfcbasetabctrl__getactivetabtextcolor\"></a>  CMFCBaseTabCtrl::GetActiveTabTextColor","source":"<a name=\"cmfcbasetabctrl__getactivetabtextcolor\"></a>  CMFCBaseTabCtrl::GetActiveTabTextColor"},{"content":"Retrieves the text color for the active tab.","pos":[29941,29985]},{"pos":[30061,30073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30077,30204],"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> value that specifies the text color of the active tab.","source":"A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value that specifies the text color of the active tab."},{"pos":[30214,30221],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, the text color for active tabs is <ph id=\"ph1\">`COLOR_WINDOWTEXT`</ph>.","pos":[30225,30290],"source":"By default, the text color for active tabs is `COLOR_WINDOWTEXT`."},{"content":"You can change the text color with the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetActiveTabTextColor<ept id=\"p1\">](#cmfcbasetabctrl__setactivetabtextcolor)</ept>.","pos":[30291,30419],"source":" You can change the text color with the method [CMFCBaseTabCtrl::SetActiveTabTextColor](#cmfcbasetabctrl__setactivetabtextcolor)."},{"pos":[30429,30504],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__getactivewnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetActiveWnd","linkify":"<a name=\"cmfcbasetabctrl__getactivewnd\"></a>  CMFCBaseTabCtrl::GetActiveWnd","source":"<a name=\"cmfcbasetabctrl__getactivewnd\"></a>  CMFCBaseTabCtrl::GetActiveWnd"},{"content":"Retrieves a pointer to the currently active tab window.","pos":[30508,30563]},{"pos":[30627,30639],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to a window.","pos":[30643,30665]},{"pos":[30675,30752],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__getautocolors\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetAutoColors","linkify":"<a name=\"cmfcbasetabctrl__getautocolors\"></a>  CMFCBaseTabCtrl::GetAutoColors","source":"<a name=\"cmfcbasetabctrl__getautocolors\"></a>  CMFCBaseTabCtrl::GetAutoColors"},{"content":"Retrieves the array of colors used for automatic coloring.","pos":[30756,30814]},{"pos":[30898,30910],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30914,31131],"content":"A reference to an array of <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> values that the <bpt id=\"p2\">[</bpt>CMFCBaseTabCtrl<ept id=\"p2\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept> object uses for automatic tab coloring.","source":"A reference to an array of [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) values that the [CMFCBaseTabCtrl](../../mfc/reference/cmfcbasetabctrl-class.md) object uses for automatic tab coloring."},{"pos":[31141,31148],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, the framework initializes the array of colors to library-defined colors.","pos":[31152,31236]},{"content":"You can provide a custom array of colors by calling the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetAutoColors<ept id=\"p1\">](#cmfcbasetabctrl__setautocolors)</ept>.","pos":[31237,31366],"source":" You can provide a custom array of colors by calling the method [CMFCBaseTabCtrl::SetAutoColors](#cmfcbasetabctrl__setautocolors)."},{"pos":[31376,31463],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__getfirstvisibletab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetFirstVisibleTab","linkify":"<a name=\"cmfcbasetabctrl__getfirstvisibletab\"></a>  CMFCBaseTabCtrl::GetFirstVisibleTab","source":"<a name=\"cmfcbasetabctrl__getfirstvisibletab\"></a>  CMFCBaseTabCtrl::GetFirstVisibleTab"},{"content":"Retrieves a pointer to the first visible tab.","pos":[31467,31512]},{"pos":[31668,31678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`iTabNum`</ph>","pos":[31682,31697],"source":"[out] `iTabNum`"},{"content":"A reference to an integer.","pos":[31701,31727]},{"content":"This method writes the zero-based index of the first visible tab to this parameter.","pos":[31728,31811]},{"content":"[in] <ph id=\"ph1\">`iStartFrom`</ph>","pos":[31818,31835],"source":"[in] `iStartFrom`"},{"content":"The zero-based index of the first tab to check.","pos":[31839,31886]},{"pos":[31896,31908],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31912,31979],"content":"A pointer to the first visible tab if successful; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the first visible tab if successful; otherwise `NULL`."},{"pos":[31989,31996],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32000,32061],"content":"If this method fails, it writes the value -1 to <ph id=\"ph1\">`iStartFrom`</ph>.","source":"If this method fails, it writes the value -1 to `iStartFrom`."},{"pos":[32068,32191],"content":"If <ph id=\"ph1\">`iStartFrom`</ph> is larger than or equal to the number of tabs in the tab control, <ph id=\"ph2\">`GetFirstVisibleTab`</ph> automatically fails.","source":"If `iStartFrom` is larger than or equal to the number of tabs in the tab control, `GetFirstVisibleTab` automatically fails."},{"pos":[32201,32294],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__getfirstvisibletabnum\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetFirstVisibleTabNum","linkify":"<a name=\"cmfcbasetabctrl__getfirstvisibletabnum\"></a>  CMFCBaseTabCtrl::GetFirstVisibleTabNum","source":"<a name=\"cmfcbasetabctrl__getfirstvisibletabnum\"></a>  CMFCBaseTabCtrl::GetFirstVisibleTabNum"},{"pos":[32468,32480],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[32490,32497],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32507,32592],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gethighlightedtab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetHighlightedTab","linkify":"<a name=\"cmfcbasetabctrl__gethighlightedtab\"></a>  CMFCBaseTabCtrl::GetHighlightedTab","source":"<a name=\"cmfcbasetabctrl__gethighlightedtab\"></a>  CMFCBaseTabCtrl::GetHighlightedTab"},{"content":"Retrieves the index of the currently highlighted tab.","pos":[32596,32649]},{"pos":[32708,32720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of the highlighted tab.","pos":[32724,32768]},{"pos":[32778,32853],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__getimagelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetImageList","linkify":"<a name=\"cmfcbasetabctrl__getimagelist\"></a>  CMFCBaseTabCtrl::GetImageList","source":"<a name=\"cmfcbasetabctrl__getimagelist\"></a>  CMFCBaseTabCtrl::GetImageList"},{"pos":[33032,33044],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33054,33061],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33071,33146],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__getimagesize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetImageSize","linkify":"<a name=\"cmfcbasetabctrl__getimagesize\"></a>  CMFCBaseTabCtrl::GetImageSize","source":"<a name=\"cmfcbasetabctrl__getimagesize\"></a>  CMFCBaseTabCtrl::GetImageSize"},{"pos":[33313,33325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33335,33342],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33352,33437],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__getlastvisibletab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetLastVisibleTab","linkify":"<a name=\"cmfcbasetabctrl__getlastvisibletab\"></a>  CMFCBaseTabCtrl::GetLastVisibleTab","source":"<a name=\"cmfcbasetabctrl__getlastvisibletab\"></a>  CMFCBaseTabCtrl::GetLastVisibleTab"},{"pos":[33612,33622],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[33626,33640],"content":"[in] <ph id=\"ph1\">`iTabNum`</ph>","source":"[in] `iTabNum`"},{"pos":[33650,33662],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33672,33679],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33689,33762],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__getlocation\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetLocation","linkify":"<a name=\"cmfcbasetabctrl__getlocation\"></a>  CMFCBaseTabCtrl::GetLocation","source":"<a name=\"cmfcbasetabctrl__getlocation\"></a>  CMFCBaseTabCtrl::GetLocation"},{"content":"Retrieves the location of the tab area portion of the tab control.","pos":[33766,33832]},{"pos":[33890,33902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The location of the tab area.","pos":[33906,33935]},{"pos":[33945,33952],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33956,34031],"content":"Possible tab area location values are <ph id=\"ph1\">`LOCATION_BOTTOM`</ph> and <ph id=\"ph2\">`LOCATION_TOP`</ph>.","source":"Possible tab area location values are `LOCATION_BOTTOM` and `LOCATION_TOP`."},{"pos":[34041,34124],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__getmaxwindowsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetMaxWindowSize","linkify":"<a name=\"cmfcbasetabctrl__getmaxwindowsize\"></a>  CMFCBaseTabCtrl::GetMaxWindowSize","source":"<a name=\"cmfcbasetabctrl__getmaxwindowsize\"></a>  CMFCBaseTabCtrl::GetMaxWindowSize"},{"pos":[34295,34307],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34317,34324],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[34334,34405],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabarea\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabArea","linkify":"<a name=\"cmfcbasetabctrl__gettabarea\"></a>  CMFCBaseTabCtrl::GetTabArea","source":"<a name=\"cmfcbasetabctrl__gettabarea\"></a>  CMFCBaseTabCtrl::GetTabArea"},{"content":"Retrieves the size and position of the tab area of the tab control.","pos":[34409,34476]},{"pos":[34598,34608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`rectTabAreaTop`</ph>","pos":[34612,34633],"source":"[in] `rectTabAreaTop`"},{"content":"A reference to a <ph id=\"ph1\">`CRect`</ph> object.","pos":[34637,34669],"source":" A reference to a `CRect` object."},{"content":"<ph id=\"ph1\">`GetTabArea`</ph> uses this object to store the size and position of the top tab area.","pos":[34670,34751],"source":"`GetTabArea` uses this object to store the size and position of the top tab area."},{"content":"[in] <ph id=\"ph1\">`rectTabAreaBottom`</ph>","pos":[34758,34782],"source":"[in] `rectTabAreaBottom`"},{"content":"A reference to a <ph id=\"ph1\">`CRect`</ph> object.","pos":[34786,34818],"source":" A reference to a `CRect` object."},{"content":"<ph id=\"ph1\">`GetTabArea`</ph> uses this object to store the size and position of the bottom tab area.","pos":[34819,34903],"source":"`GetTabArea` uses this object to store the size and position of the bottom tab area."},{"pos":[34913,34920],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"After <ph id=\"ph1\">`GetTabArea`</ph> returns, the <ph id=\"ph2\">`CRect`</ph> parameters contain the size and position of the tab area in client coordinates of the tab control.","pos":[34924,35062],"source":"After `GetTabArea` returns, the `CRect` parameters contain the size and position of the tab area in client coordinates of the tab control."},{"content":"If there is no tab area at the top or bottom of the tab control, <ph id=\"ph1\">`rectTabAreaTop`</ph> or <ph id=\"ph2\">`rectTabAreaBottom`</ph> are empty.","pos":[35063,35178],"source":" If there is no tab area at the top or bottom of the tab control, `rectTabAreaTop` or `rectTabAreaBottom` are empty."},{"content":"In the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>, this method is a pure virtual function and has no implementation.","pos":[35185,35328],"source":"In the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md), this method is a pure virtual function and has no implementation."},{"content":"If you derive a class from <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph>, you have to implement this function.","pos":[35329,35411],"source":" If you derive a class from `CMFCBaseTabCtrl`, you have to implement this function."},{"pos":[35421,35498],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabbkcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabBkColor","linkify":"<a name=\"cmfcbasetabctrl__gettabbkcolor\"></a>  CMFCBaseTabCtrl::GetTabBkColor","source":"<a name=\"cmfcbasetabctrl__gettabbkcolor\"></a>  CMFCBaseTabCtrl::GetTabBkColor"},{"content":"Retrieves the background color of the specified tab.","pos":[35502,35554]},{"pos":[35630,35640],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[35644,35655],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab.","pos":[35659,35691]},{"pos":[35701,35713],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35717,35883],"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> value that indicates the background color of the specified tab; -1 if <ph id=\"ph1\">`iTab`</ph> is out of range.","source":"A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value that indicates the background color of the specified tab; -1 if `iTab` is out of range."},{"pos":[35893,35976],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabbordersize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabBorderSize","linkify":"<a name=\"cmfcbasetabctrl__gettabbordersize\"></a>  CMFCBaseTabCtrl::GetTabBorderSize","source":"<a name=\"cmfcbasetabctrl__gettabbordersize\"></a>  CMFCBaseTabCtrl::GetTabBorderSize"},{"content":"Retrieves the size of the tab borders in the tab control.","pos":[35980,36037]},{"pos":[36103,36115],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The size of the tab border, in pixels.","pos":[36119,36157]},{"pos":[36167,36174],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default size for the tab border is three pixels.","pos":[36178,36230]},{"content":"You can change this border size with the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetTabBorderSize<ept id=\"p1\">](#cmfcbasetabctrl__settabbordersize)</ept>.","pos":[36231,36351],"source":" You can change this border size with the method [CMFCBaseTabCtrl::SetTabBorderSize](#cmfcbasetabctrl__settabbordersize)."},{"pos":[36361,36432],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabbyid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabByID","linkify":"<a name=\"cmfcbasetabctrl__gettabbyid\"></a>  CMFCBaseTabCtrl::GetTabByID","source":"<a name=\"cmfcbasetabctrl__gettabbyid\"></a>  CMFCBaseTabCtrl::GetTabByID"},{"content":"Retrieves the index of a tab based on a tab ID.","pos":[36436,36483]},{"pos":[36549,36559],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`id`</ph>","pos":[36563,36572],"source":"[in] `id`"},{"content":"A tab ID.","pos":[36576,36585]},{"pos":[36595,36607],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of a tab if it is found; -1 if the tab ID is not found.","pos":[36611,36687]},{"pos":[36697,36704],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The tab IDs are assigned automatically when tabs are added to a tab control.","pos":[36708,36784]},{"pos":[36794,36879],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabclosebutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabCloseButton","linkify":"<a name=\"cmfcbasetabctrl__gettabclosebutton\"></a>  CMFCBaseTabCtrl::GetTabCloseButton","source":"<a name=\"cmfcbasetabctrl__gettabclosebutton\"></a>  CMFCBaseTabCtrl::GetTabCloseButton"},{"pos":[37043,37055],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37065,37072],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37082,37161],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabfromhwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabFromHwnd","linkify":"<a name=\"cmfcbasetabctrl__gettabfromhwnd\"></a>  CMFCBaseTabCtrl::GetTabFromHwnd","source":"<a name=\"cmfcbasetabctrl__gettabfromhwnd\"></a>  CMFCBaseTabCtrl::GetTabFromHwnd"},{"content":"Retrieves the index of the tab that contains the specified HWND object.","pos":[37165,37236]},{"pos":[37309,37319],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`hwnd`</ph>","pos":[37323,37334],"source":"[in] `hwnd`"},{"content":"A handle to a window.","pos":[37338,37359]},{"pos":[37369,37381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37385,37461],"content":"The zero-based index of the tab if successful; -1 if no tab contains <ph id=\"ph1\">`hwnd`</ph>.","source":"The zero-based index of the tab if successful; -1 if no tab contains `hwnd`."},{"pos":[37471,37552],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabfrompoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabFromPoint","linkify":"<a name=\"cmfcbasetabctrl__gettabfrompoint\"></a>  CMFCBaseTabCtrl::GetTabFromPoint","source":"<a name=\"cmfcbasetabctrl__gettabfrompoint\"></a>  CMFCBaseTabCtrl::GetTabFromPoint"},{"content":"Retrieves the tab that contains a specified point.","pos":[37556,37606]},{"pos":[37681,37691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pt`</ph>","pos":[37695,37704],"source":"[in] `pt`"},{"content":"A point in client coordinates of the tab control.","pos":[37708,37757]},{"pos":[37767,37779],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37783,37851],"content":"The index of the tab that contains <ph id=\"ph1\">`pt`</ph>; -1 if no tab contains <ph id=\"ph2\">`pt`</ph>.","source":"The index of the tab that contains `pt`; -1 if no tab contains `pt`."},{"pos":[37861,37942],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabfullwidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabFullWidth","linkify":"<a name=\"cmfcbasetabctrl__gettabfullwidth\"></a>  CMFCBaseTabCtrl::GetTabFullWidth","source":"<a name=\"cmfcbasetabctrl__gettabfullwidth\"></a>  CMFCBaseTabCtrl::GetTabFullWidth"},{"pos":[38118,38128],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[38132,38143],"content":"[in] <ph id=\"ph1\">`iTab`</ph>","source":"[in] `iTab`"},{"pos":[38153,38165],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38175,38182],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38192,38265],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabhicon\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabHicon","linkify":"<a name=\"cmfcbasetabctrl__gettabhicon\"></a>  CMFCBaseTabCtrl::GetTabHicon","source":"<a name=\"cmfcbasetabctrl__gettabhicon\"></a>  CMFCBaseTabCtrl::GetTabHicon"},{"content":"Returns the HICON associated with the specified tab.","pos":[38269,38321]},{"pos":[38392,38402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[38406,38417],"source":"[in] `iTab`"},{"content":"The zero-based index for the tab.","pos":[38421,38454]},{"pos":[38464,38476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38480,38584],"content":"The HICON associated with a tab label if successful; <ph id=\"ph1\">`NULL`</ph> if there is no HICON or if the method fails.","source":"The HICON associated with a tab label if successful; `NULL` if there is no HICON or if the method fails."},{"pos":[38594,38665],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabicon\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabIcon","linkify":"<a name=\"cmfcbasetabctrl__gettabicon\"></a>  CMFCBaseTabCtrl::GetTabIcon","source":"<a name=\"cmfcbasetabctrl__gettabicon\"></a>  CMFCBaseTabCtrl::GetTabIcon"},{"content":"Retrieves the icon associated with the specified tab.","pos":[38669,38722]},{"pos":[38791,38801],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[38805,38816],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab.","pos":[38820,38852]},{"pos":[38862,38874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The icon ID for the specified tab if successful; -1 if the index is invalid.","pos":[38878,38954]},{"pos":[38964,38971],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38975,39144],"content":"The <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept> object stores the icons in the internal <bpt id=\"p2\">[</bpt>CImageList<ept id=\"p2\">](../../mfc/reference/cimagelist-class.md)</ept> object.","source":"The [CMFCBaseTabCtrl](../../mfc/reference/cmfcbasetabctrl-class.md) object stores the icons in the internal [CImageList](../../mfc/reference/cimagelist-class.md) object."},{"pos":[39154,39221],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabID","linkify":"<a name=\"cmfcbasetabctrl__gettabid\"></a>  CMFCBaseTabCtrl::GetTabID","source":"<a name=\"cmfcbasetabctrl__gettabid\"></a>  CMFCBaseTabCtrl::GetTabID"},{"content":"Retrieves the ID for a tab specified by the tab index.","pos":[39225,39279]},{"pos":[39337,39347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[39351,39362],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab.","pos":[39366,39398]},{"pos":[39408,39420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39424,39473],"content":"An ID of the tab or -1 if <ph id=\"ph1\">`iTab`</ph> is out of range.","source":"An ID of the tab or -1 if `iTab` is out of range."},{"pos":[39483,39556],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettablabel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabLabel","linkify":"<a name=\"cmfcbasetabctrl__gettablabel\"></a>  CMFCBaseTabCtrl::GetTabLabel","source":"<a name=\"cmfcbasetabctrl__gettablabel\"></a>  CMFCBaseTabCtrl::GetTabLabel"},{"content":"Retrieves the text of a tab label.","pos":[39560,39594]},{"pos":[39694,39704],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[39708,39719],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab.","pos":[39723,39755]},{"content":"[out] <ph id=\"ph1\">`strLabel`</ph>","pos":[39762,39778],"source":"[out] `strLabel`"},{"content":"A reference to a <ph id=\"ph1\">`CString`</ph> object.","pos":[39782,39816],"source":" A reference to a `CString` object."},{"content":"This method stores the label of the tab in this parameter.","pos":[39817,39875]},{"pos":[39885,39897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39901,39941],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if successful; `FALSE` otherwise."},{"pos":[39951,39958],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39962,40011],"content":"This method fails if the index <ph id=\"ph1\">`iTab`</ph> is invalid.","source":"This method fails if the index `iTab` is invalid."},{"content":"You set the label for a tab when you create the tab by using <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::AddTab<ept id=\"p1\">](#cmfcbasetabctrl__addtab)</ept>.","pos":[40018,40131],"source":"You set the label for a tab when you create the tab by using [CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab)."},{"content":"You can also change the label after creation with the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetTabLabel<ept id=\"p1\">](#cmfcbasetabctrl__settablabel)</ept>.","pos":[40132,40255],"source":" You can also change the label after creation with the method [CMFCBaseTabCtrl::SetTabLabel](#cmfcbasetabctrl__settablabel)."},{"pos":[40265,40336],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabRect","linkify":"<a name=\"cmfcbasetabctrl__gettabrect\"></a>  CMFCBaseTabCtrl::GetTabRect","source":"<a name=\"cmfcbasetabctrl__gettabrect\"></a>  CMFCBaseTabCtrl::GetTabRect"},{"content":"Retrieves the size and position of the specified tab.","pos":[40340,40393]},{"pos":[40486,40496],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[40500,40511],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab.","pos":[40515,40547]},{"content":"[out] <ph id=\"ph1\">`rect`</ph>","pos":[40554,40566],"source":"[out] `rect`"},{"content":"A reference to a <ph id=\"ph1\">`CRect`</ph> object.","pos":[40570,40602],"source":" A reference to a `CRect` object."},{"content":"This method stores the size and position of the tab in this parameter.","pos":[40603,40673]},{"pos":[40683,40695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40699,40757],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; <ph id=\"ph2\">`FALSE`</ph> if the tab index is invalid.","source":"`TRUE` if successful; `FALSE` if the tab index is invalid."},{"pos":[40767,40844],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabsheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabsHeight","linkify":"<a name=\"cmfcbasetabctrl__gettabsheight\"></a>  CMFCBaseTabCtrl::GetTabsHeight","source":"<a name=\"cmfcbasetabctrl__gettabsheight\"></a>  CMFCBaseTabCtrl::GetTabsHeight"},{"pos":[41010,41022],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41032,41039],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41049,41120],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabsnum\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabsNum","linkify":"<a name=\"cmfcbasetabctrl__gettabsnum\"></a>  CMFCBaseTabCtrl::GetTabsNum","source":"<a name=\"cmfcbasetabctrl__gettabsnum\"></a>  CMFCBaseTabCtrl::GetTabsNum"},{"content":"Retrieves the number of tabs in the tab control.","pos":[41124,41172]},{"pos":[41232,41244],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of tabs in the tab control.","pos":[41248,41286]},{"pos":[41296,41369],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabsrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabsRect","linkify":"<a name=\"cmfcbasetabctrl__gettabsrect\"></a>  CMFCBaseTabCtrl::GetTabsRect","source":"<a name=\"cmfcbasetabctrl__gettabsrect\"></a>  CMFCBaseTabCtrl::GetTabsRect"},{"pos":[41545,41555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[41559,41570],"content":"[in] <ph id=\"ph1\">`rect`</ph>","source":"[in] `rect`"},{"pos":[41580,41587],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41597,41678],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabtextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabTextColor","linkify":"<a name=\"cmfcbasetabctrl__gettabtextcolor\"></a>  CMFCBaseTabCtrl::GetTabTextColor","source":"<a name=\"cmfcbasetabctrl__gettabtextcolor\"></a>  CMFCBaseTabCtrl::GetTabTextColor"},{"content":"Retrieves the text color for the specified tab.","pos":[41682,41729]},{"pos":[41807,41817],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[41821,41832],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab.","pos":[41836,41868]},{"pos":[41878,41890],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41894,42058],"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter that indicates the text color of the specified tab; -1 if <ph id=\"ph1\">`iTab`</ph> is out of range.","source":"A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the text color of the specified tab; -1 if `iTab` is out of range."},{"pos":[42068,42137],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabwnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabWnd","linkify":"<a name=\"cmfcbasetabctrl__gettabwnd\"></a>  CMFCBaseTabCtrl::GetTabWnd","source":"<a name=\"cmfcbasetabctrl__gettabwnd\"></a>  CMFCBaseTabCtrl::GetTabWnd"},{"content":"Returns the pointer to the pane that resides on the specified tab.","pos":[42141,42207]},{"pos":[42276,42286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[42290,42301],"source":"[in] `iTab`"},{"content":"The zero-based index of a tab.","pos":[42305,42335]},{"pos":[42345,42357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept> object that resides on the tab that <ph id=\"ph1\">`iTab`</ph> specifies.","pos":[42361,42473],"source":"A pointer to the [CWnd](../../mfc/reference/cwnd-class.md) object that resides on the tab that `iTab` specifies."},{"content":"<ph id=\"ph1\">`NULL`</ph> if <ph id=\"ph2\">`iTab`</ph> is invalid.","pos":[42474,42502],"source":"`NULL` if `iTab` is invalid."},{"pos":[42512,42519],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[42523,42716],"content":"The returned object is the one that the application added when it called either <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::AddTab<ept id=\"p1\">](#cmfcbasetabctrl__addtab)</ept> or <bpt id=\"p2\">[</bpt>CMFCBaseTabCtrl::InsertTab<ept id=\"p2\">](#cmfcbasetabctrl__inserttab)</ept>.","source":"The returned object is the one that the application added when it called either [CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab) or [CMFCBaseTabCtrl::InsertTab](#cmfcbasetabctrl__inserttab)."},{"content":"If the object on a tab has a wrapper, this method will return the wrapper for the object.","pos":[42723,42812]},{"content":"For more information about wrappers, see <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::CreateWrapper<ept id=\"p1\">](#cmfcbasetabctrl__createwrapper)</ept>.","pos":[42813,42920],"source":" For more information about wrappers, see [CMFCBaseTabCtrl::CreateWrapper](#cmfcbasetabctrl__createwrapper)."},{"content":"If you want to access a pointer to the direct object without the wrapper, use the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabWndNoWrapper<ept id=\"p1\">](#cmfcbasetabctrl__gettabwndnowrapper)</ept>.","pos":[42921,43086],"source":" If you want to access a pointer to the direct object without the wrapper, use the method [CMFCBaseTabCtrl::GetTabWndNoWrapper](#cmfcbasetabctrl__gettabwndnowrapper)."},{"pos":[43096,43183],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettabwndnowrapper\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetTabWndNoWrapper","linkify":"<a name=\"cmfcbasetabctrl__gettabwndnowrapper\"></a>  CMFCBaseTabCtrl::GetTabWndNoWrapper","source":"<a name=\"cmfcbasetabctrl__gettabwndnowrapper\"></a>  CMFCBaseTabCtrl::GetTabWndNoWrapper"},{"content":"Returns a pointer to the control that resides on a tab, even if the control has a wrapper.","pos":[43187,43277]},{"pos":[43355,43365],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[43369,43380],"source":"[in] `iTab`"},{"content":"The zero-based index of a tab.","pos":[43384,43414]},{"pos":[43424,43436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43440,43569],"content":"A pointer to the <bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept> object that resides on the specified tab; <ph id=\"ph1\">`NULL`</ph> if <ph id=\"ph2\">`iTab`</ph> is invalid.","source":"A pointer to the [CWnd](../../mfc/reference/cwnd-class.md) object that resides on the specified tab; `NULL` if `iTab` is invalid."},{"pos":[43579,43586],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method retrieves a direct pointer to the <ph id=\"ph1\">`CWnd`</ph> object that you added by using either the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::AddTab<ept id=\"p1\">](#cmfcbasetabctrl__addtab)</ept> or <bpt id=\"p2\">[</bpt>CMFCBaseTabCtrl::InsertTab<ept id=\"p2\">](#cmfcbasetabctrl__inserttab)</ept>.","pos":[43590,43805],"source":"This method retrieves a direct pointer to the `CWnd` object that you added by using either the method [CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab) or [CMFCBaseTabCtrl::InsertTab](#cmfcbasetabctrl__inserttab)."},{"content":"<ph id=\"ph1\">`GetTabWndNoWrapper`</ph> will retrieve a pointer to the added <ph id=\"ph2\">`CWnd`</ph>, even if the framework added a wrapper for the object.","pos":[43806,43925],"source":"`GetTabWndNoWrapper` will retrieve a pointer to the added `CWnd`, even if the framework added a wrapper for the object."},{"content":"For more information about wrappers and the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>, see <bpt id=\"p2\">[</bpt>CMFCBaseTabCtrl::CreateWrapper<ept id=\"p2\">](#cmfcbasetabctrl__createwrapper)</ept>.","pos":[43926,44111],"source":" For more information about wrappers and the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md), see [CMFCBaseTabCtrl::CreateWrapper](#cmfcbasetabctrl__createwrapper)."},{"pos":[44118,44238],"content":"Use the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::GetTabWnd<ept id=\"p1\">](#cmfcbasetabctrl__gettabwnd)</ept> if you do not want to ignore the wrapper class.","source":"Use the method [CMFCBaseTabCtrl::GetTabWnd](#cmfcbasetabctrl__gettabwnd) if you do not want to ignore the wrapper class."},{"pos":[44248,44327],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__gettooltipctrl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetToolTipCtrl","linkify":"<a name=\"cmfcbasetabctrl__gettooltipctrl\"></a>  CMFCBaseTabCtrl::GetToolTipCtrl","source":"<a name=\"cmfcbasetabctrl__gettooltipctrl\"></a>  CMFCBaseTabCtrl::GetToolTipCtrl"},{"content":"Retrieves a reference to the tooltip contorl.","pos":[44331,44376]},{"pos":[44442,44454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to the tooltip control.","pos":[44458,44493]},{"pos":[44503,44588],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__getvisibletabsnum\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::GetVisibleTabsNum","linkify":"<a name=\"cmfcbasetabctrl__getvisibletabsnum\"></a>  CMFCBaseTabCtrl::GetVisibleTabsNum","source":"<a name=\"cmfcbasetabctrl__getvisibletabsnum\"></a>  CMFCBaseTabCtrl::GetVisibleTabsNum"},{"content":"Retrieves the number of currently visible tabs.","pos":[44592,44639]},{"pos":[44706,44718],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of visible tabs.","pos":[44722,44749]},{"pos":[44759,44826],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__hasimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::HasImage","linkify":"<a name=\"cmfcbasetabctrl__hasimage\"></a>  CMFCBaseTabCtrl::HasImage","source":"<a name=\"cmfcbasetabctrl__hasimage\"></a>  CMFCBaseTabCtrl::HasImage"},{"pos":[44996,45006],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[45010,45021],"content":"[in] <ph id=\"ph1\">`iTab`</ph>","source":"[in] `iTab`"},{"pos":[45031,45043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45053,45060],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[45070,45147],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__hidesingletab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::HideSingleTab","linkify":"<a name=\"cmfcbasetabctrl__hidesingletab\"></a>  CMFCBaseTabCtrl::HideSingleTab","source":"<a name=\"cmfcbasetabctrl__hidesingletab\"></a>  CMFCBaseTabCtrl::HideSingleTab"},{"content":"Sets the option to hide the tabs for the tab control when there is one visible tab.","pos":[45151,45234]},{"pos":[45306,45316],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bHide`</ph>","pos":[45320,45332],"source":"[in] `bHide`"},{"content":"A Boolean that specifies whether to enable hiding single tabs.","pos":[45336,45398]},{"pos":[45408,45415],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When your application is configured to hide single tabs, the framework automatically displays tabs when a second tab is added to the tab control.","pos":[45419,45564]},{"pos":[45574,45643],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__inserttab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::InsertTab","linkify":"<a name=\"cmfcbasetabctrl__inserttab\"></a>  CMFCBaseTabCtrl::InsertTab","source":"<a name=\"cmfcbasetabctrl__inserttab\"></a>  CMFCBaseTabCtrl::InsertTab"},{"content":"Inserts a tab into the tab control.","pos":[45647,45682]},{"pos":[46022,46032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pNewWnd`</ph>","pos":[46036,46050],"source":"[in] `pNewWnd`"},{"content":"A pointer to the window that this method adds as a new tab.","pos":[46054,46113]},{"content":"[in] <ph id=\"ph1\">`lpszTabLabel`</ph>","pos":[46120,46139],"source":"[in] `lpszTabLabel`"},{"content":"A string that contains the label for the new tab.","pos":[46143,46192]},{"content":"[in] <ph id=\"ph1\">`nInsertAt`</ph>","pos":[46199,46215],"source":"[in] `nInsertAt`"},{"content":"The zero-based index of the new tab.","pos":[46219,46255]},{"content":"[in] <ph id=\"ph1\">`uiImageId`</ph>","pos":[46262,46278],"source":"[in] `uiImageId`"},{"content":"An image ID from the image list.","pos":[46282,46314]},{"content":"The tab control uses this image as the icon for the new tab.","pos":[46315,46375]},{"content":"[in] <ph id=\"ph1\">`bDetachable`</ph>","pos":[46382,46400],"source":"[in] `bDetachable`"},{"content":"A Boolean parameter that determines whether the new tab is detachable.","pos":[46404,46474]},{"content":"[in] <ph id=\"ph1\">`uiResTabLabel`</ph>","pos":[46481,46501],"source":"[in] `uiResTabLabel`"},{"content":"The resource ID for the label.","pos":[46505,46535]},{"pos":[46545,46552],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the object indicated by <ph id=\"ph1\">`pNewWnd`</ph> is not derived from the <bpt id=\"p1\">[</bpt>CDockablePane Class<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept> and if the <ph id=\"ph2\">`bDetachable`</ph> parameter is <ph id=\"ph3\">`TRUE`</ph>, the framework creates a special wrapper for the new tab.","pos":[46556,46785],"source":"If the object indicated by `pNewWnd` is not derived from the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md) and if the `bDetachable` parameter is `TRUE`, the framework creates a special wrapper for the new tab."},{"content":"By default, the wrapper is an instance of the <bpt id=\"p1\">[</bpt>CDockablePaneAdapter Class<ept id=\"p1\">](../../mfc/reference/cdockablepaneadapter-class.md)</ept>.","pos":[46786,46912],"source":" By default, the wrapper is an instance of the [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md)."},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetDockingBarWrapperRTC<ept id=\"p1\">](#cmfcbasetabctrl__setdockingbarwrapperrtc)</ept> method to create a different wrapper class.","pos":[46913,47050],"source":" Use the [CMFCBaseTabCtrl::SetDockingBarWrapperRTC](#cmfcbasetabctrl__setdockingbarwrapperrtc) method to create a different wrapper class."},{"content":"Any custom wrapper class needs to be derived from <ph id=\"ph1\">`CDockablePaneAdapter`</ph>.","pos":[47051,47124],"source":" Any custom wrapper class needs to be derived from `CDockablePaneAdapter`."},{"pos":[47134,47211],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__invalidatetab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::InvalidateTab","linkify":"<a name=\"cmfcbasetabctrl__invalidatetab\"></a>  CMFCBaseTabCtrl::InvalidateTab","source":"<a name=\"cmfcbasetabctrl__invalidatetab\"></a>  CMFCBaseTabCtrl::InvalidateTab"},{"pos":[47369,47379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[47383,47394],"content":"[in] <ph id=\"ph1\">`iTab`</ph>","source":"[in] `iTab`"},{"pos":[47404,47411],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47421,47516],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__isactivetabclosebutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsActiveTabCloseButton","linkify":"<a name=\"cmfcbasetabctrl__isactivetabclosebutton\"></a>  CMFCBaseTabCtrl::IsActiveTabCloseButton","source":"<a name=\"cmfcbasetabctrl__isactivetabclosebutton\"></a>  CMFCBaseTabCtrl::IsActiveTabCloseButton"},{"pos":[47692,47704],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47714,47721],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47731,47804],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__isautocolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsAutoColor","linkify":"<a name=\"cmfcbasetabctrl__isautocolor\"></a>  CMFCBaseTabCtrl::IsAutoColor","source":"<a name=\"cmfcbasetabctrl__isautocolor\"></a>  CMFCBaseTabCtrl::IsAutoColor"},{"content":"Determines whether the tab control is in autocolor mode.","pos":[47808,47864]},{"pos":[47918,47930],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47934,48000],"content":"<ph id=\"ph1\">`TRUE`</ph> if the tab control is in autocolor mode; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the tab control is in autocolor mode; `FALSE` otherwise."},{"pos":[48010,48017],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[48021,48156],"content":"You can enable or disable the autocolor mode by using the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnableAutoColor<ept id=\"p1\">](#cmfcbasetabctrl__enableautocolor)</ept> method.","source":"You can enable or disable the autocolor mode by using the [CMFCBaseTabCtrl::EnableAutoColor](#cmfcbasetabctrl__enableautocolor) method."},{"pos":[48166,48255],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__isautodestroywindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsAutoDestroyWindow","linkify":"<a name=\"cmfcbasetabctrl__isautodestroywindow\"></a>  CMFCBaseTabCtrl::IsAutoDestroyWindow","source":"<a name=\"cmfcbasetabctrl__isautodestroywindow\"></a>  CMFCBaseTabCtrl::IsAutoDestroyWindow"},{"pos":[48420,48432],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48442,48449],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[48459,48528],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__iscolored\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsColored","linkify":"<a name=\"cmfcbasetabctrl__iscolored\"></a>  CMFCBaseTabCtrl::IsColored","source":"<a name=\"cmfcbasetabctrl__iscolored\"></a>  CMFCBaseTabCtrl::IsColored"},{"pos":[48691,48703],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48713,48720],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[48730,48811],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__isdialogcontrol\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsDialogControl","linkify":"<a name=\"cmfcbasetabctrl__isdialogcontrol\"></a>  CMFCBaseTabCtrl::IsDialogControl","source":"<a name=\"cmfcbasetabctrl__isdialogcontrol\"></a>  CMFCBaseTabCtrl::IsDialogControl"},{"pos":[48972,48984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48994,49001],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[49011,49090],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__isdrawnoprefix\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsDrawNoPrefix","linkify":"<a name=\"cmfcbasetabctrl__isdrawnoprefix\"></a>  CMFCBaseTabCtrl::IsDrawNoPrefix","source":"<a name=\"cmfcbasetabctrl__isdrawnoprefix\"></a>  CMFCBaseTabCtrl::IsDrawNoPrefix"},{"pos":[49250,49262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49272,49279],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[49289,49362],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__isflatframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsFlatFrame","linkify":"<a name=\"cmfcbasetabctrl__isflatframe\"></a>  CMFCBaseTabCtrl::IsFlatFrame","source":"<a name=\"cmfcbasetabctrl__isflatframe\"></a>  CMFCBaseTabCtrl::IsFlatFrame"},{"content":"Indicates whether the frame of the tab control is rendered in a flat style or in a 3D style.","pos":[49366,49458]},{"pos":[49520,49532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49536,49651],"content":"<ph id=\"ph1\">`TRUE`</ph> if the frame of the tab control is rendered in a flat style; <ph id=\"ph2\">`FALSE`</ph> if the frame is rendered in a 3D style.","source":"`TRUE` if the frame of the tab control is rendered in a flat style; `FALSE` if the frame is rendered in a 3D style."},{"pos":[49661,49668],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[49672,49825],"content":"Use <bpt id=\"p1\">[</bpt>CMFCTabCtrl::SetFlatFrame<ept id=\"p1\">](../../mfc/reference/cmfctabctrl-class.md#cmfctabctrl__setflatframe)</ept> to change the style for the frame of the tab control.","source":"Use [CMFCTabCtrl::SetFlatFrame](../../mfc/reference/cmfctabctrl-class.md#cmfctabctrl__setflatframe) to change the style for the frame of the tab control."},{"content":"Tab controls that use the Outlook style cannot be rendered with flat frames.","pos":[49832,49908]},{"content":"This includes the <bpt id=\"p1\">[</bpt>CMFCOutlookBarTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcoutlookbartabctrl-class.md)</ept> and any classes derived from that class.","pos":[49909,50049],"source":" This includes the [CMFCOutlookBarTabCtrl Class](../../mfc/reference/cmfcoutlookbartabctrl-class.md) and any classes derived from that class."},{"pos":[50059,50128],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__isflattab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsFlatTab","linkify":"<a name=\"cmfcbasetabctrl__isflattab\"></a>  CMFCBaseTabCtrl::IsFlatTab","source":"<a name=\"cmfcbasetabctrl__isflattab\"></a>  CMFCBaseTabCtrl::IsFlatTab"},{"pos":[50291,50303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[50313,50320],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[50330,50411],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__ishidesingletab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsHideSingleTab","linkify":"<a name=\"cmfcbasetabctrl__ishidesingletab\"></a>  CMFCBaseTabCtrl::IsHideSingleTab","source":"<a name=\"cmfcbasetabctrl__ishidesingletab\"></a>  CMFCBaseTabCtrl::IsHideSingleTab"},{"content":"Determines whether the tab control hides the tab label if there is only one tab.","pos":[50415,50495]},{"pos":[50561,50573],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[50577,50662],"content":"<ph id=\"ph1\">`TRUE`</ph> if the tab control hides the tab label when it has one tab; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the tab control hides the tab label when it has one tab; otherwise `FALSE`."},{"pos":[50672,50679],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[50683,50822],"content":"Use the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::HideSingleTab<ept id=\"p1\">](#cmfcbasetabctrl__hidesingletab)</ept> to enable hiding the tab label when there is only one tab.","source":"Use the method [CMFCBaseTabCtrl::HideSingleTab](#cmfcbasetabctrl__hidesingletab) to enable hiding the tab label when there is only one tab."},{"pos":[50832,50905],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__isiconadded\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsIconAdded","linkify":"<a name=\"cmfcbasetabctrl__isiconadded\"></a>  CMFCBaseTabCtrl::IsIconAdded","source":"<a name=\"cmfcbasetabctrl__isiconadded\"></a>  CMFCBaseTabCtrl::IsIconAdded"},{"pos":[51087,51097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`hIcon`</ph>","pos":[51101,51113],"source":"[in] `hIcon`"},{"content":"[in] <ph id=\"ph1\">`iIcon`</ph>","pos":[51117,51129],"source":" [in] `iIcon`"},{"pos":[51139,51151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51161,51168],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51178,51255],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__isinplaceedit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsInPlaceEdit","linkify":"<a name=\"cmfcbasetabctrl__isinplaceedit\"></a>  CMFCBaseTabCtrl::IsInPlaceEdit","source":"<a name=\"cmfcbasetabctrl__isinplaceedit\"></a>  CMFCBaseTabCtrl::IsInPlaceEdit"},{"content":"Indicates whether the tab control is configured to enable the user to dynamically modify the tab labels.","pos":[51259,51363]},{"pos":[51427,51439],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if in-place editing is enabled; otherwise 0.","pos":[51443,51495]},{"pos":[51505,51512],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51516,51655],"content":"You can enable or disable in-place editing by calling the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnableInPlaceEdit<ept id=\"p1\">](#cmfcbasetabctrl__enableinplaceedit)</ept>.","source":"You can enable or disable in-place editing by calling the method [CMFCBaseTabCtrl::EnableInPlaceEdit](#cmfcbasetabctrl__enableinplaceedit)."},{"pos":[51665,51752],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__isleftrightrounded\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsLeftRightRounded","linkify":"<a name=\"cmfcbasetabctrl__isleftrightrounded\"></a>  CMFCBaseTabCtrl::IsLeftRightRounded","source":"<a name=\"cmfcbasetabctrl__isleftrightrounded\"></a>  CMFCBaseTabCtrl::IsLeftRightRounded"},{"pos":[51924,51936],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51946,51953],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51963,52030],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__ismditab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsMDITab","linkify":"<a name=\"cmfcbasetabctrl__ismditab\"></a>  CMFCBaseTabCtrl::IsMDITab","source":"<a name=\"cmfcbasetabctrl__ismditab\"></a>  CMFCBaseTabCtrl::IsMDITab"},{"pos":[52184,52196],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52206,52213],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52223,52302],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__isonenotestyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsOneNoteStyle","linkify":"<a name=\"cmfcbasetabctrl__isonenotestyle\"></a>  CMFCBaseTabCtrl::IsOneNoteStyle","source":"<a name=\"cmfcbasetabctrl__isonenotestyle\"></a>  CMFCBaseTabCtrl::IsOneNoteStyle"},{"content":"Determines whether tabs are displayed in the style of Microsoft OneNote.","pos":[52306,52378]},{"pos":[52443,52455],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52459,52541],"content":"<ph id=\"ph1\">`TRUE`</ph> if tabs are displayed in the style of Microsoft OneNote; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if tabs are displayed in the style of Microsoft OneNote; otherwise `FALSE`."},{"pos":[52551,52558],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call the method <bpt id=\"p1\">[</bpt>CMDIFrameWndEx::EnableMDITabs<ept id=\"p1\">](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__enablemditabs)</ept> to enable the Microsoft OneNote style.","pos":[52562,52723],"source":"Call the method [CMDIFrameWndEx::EnableMDITabs](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__enablemditabs) to enable the Microsoft OneNote style."},{"content":"You can also enable this style when you instantiate the <bpt id=\"p1\">[</bpt>CMFCTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfctabctrl-class.md)</ept>: simply pass the style STYLE_3D_ONENOTE to the method <bpt id=\"p2\">[</bpt>CMFCTabCtrl::Create<ept id=\"p2\">](../../mfc/reference/cmfctabctrl-class.md#cmfctabctrl__create)</ept>.","pos":[52724,52980],"source":" You can also enable this style when you instantiate the [CMFCTabCtrl Class](../../mfc/reference/cmfctabctrl-class.md): simply pass the style STYLE_3D_ONENOTE to the method [CMFCTabCtrl::Create](../../mfc/reference/cmfctabctrl-class.md#cmfctabctrl__create)."},{"content":"By default, the Microsoft OneNote style is not supported in a custom class derived from the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>.","pos":[52987,53149],"source":"By default, the Microsoft OneNote style is not supported in a custom class derived from the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md)."},{"content":"However, it is supported in the <ph id=\"ph1\">`CMFCTabCtrl`</ph> class.","pos":[53150,53202],"source":" However, it is supported in the `CMFCTabCtrl` class."},{"pos":[53212,53289],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__isptintabarea\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsPtInTabArea","linkify":"<a name=\"cmfcbasetabctrl__isptintabarea\"></a>  CMFCBaseTabCtrl::IsPtInTabArea","source":"<a name=\"cmfcbasetabctrl__isptintabarea\"></a>  CMFCBaseTabCtrl::IsPtInTabArea"},{"content":"Determines if a point is inside the tab area.","pos":[53293,53338]},{"pos":[53417,53427],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[53431,53443],"source":"[in] `point`"},{"content":"The point to test.","pos":[53447,53465]},{"pos":[53475,53487],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the point is in the tab area; 0 otherwise.","pos":[53491,53544]},{"pos":[53554,53561],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>, this method is a pure virtual function and has no implementation.","pos":[53565,53708],"source":"In the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md), this method is a pure virtual function and has no implementation."},{"content":"If you derive a class from <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph>, you have to implement this function.","pos":[53709,53791],"source":" If you derive a class from `CMFCBaseTabCtrl`, you have to implement this function."},{"pos":[53801,53906],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__istabclosebuttonhighlighted\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsTabCloseButtonHighlighted","linkify":"<a name=\"cmfcbasetabctrl__istabclosebuttonhighlighted\"></a>  CMFCBaseTabCtrl::IsTabCloseButtonHighlighted","source":"<a name=\"cmfcbasetabctrl__istabclosebuttonhighlighted\"></a>  CMFCBaseTabCtrl::IsTabCloseButtonHighlighted"},{"pos":[54079,54091],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54101,54108],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[54118,54215],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__istabclosebuttonpressed\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsTabCloseButtonPressed","linkify":"<a name=\"cmfcbasetabctrl__istabclosebuttonpressed\"></a>  CMFCBaseTabCtrl::IsTabCloseButtonPressed","source":"<a name=\"cmfcbasetabctrl__istabclosebuttonpressed\"></a>  CMFCBaseTabCtrl::IsTabCloseButtonPressed"},{"pos":[54384,54396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54406,54413],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[54423,54504],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__istabdetachable\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsTabDetachable","linkify":"<a name=\"cmfcbasetabctrl__istabdetachable\"></a>  CMFCBaseTabCtrl::IsTabDetachable","source":"<a name=\"cmfcbasetabctrl__istabdetachable\"></a>  CMFCBaseTabCtrl::IsTabDetachable"},{"content":"Determines whether a tab is detachable.","pos":[54508,54547]},{"pos":[54621,54631],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[54635,54646],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab to check.","pos":[54650,54691]},{"pos":[54701,54713],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54717,54768],"content":"<ph id=\"ph1\">`TRUE`</ph> if the tab is detachable; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the tab is detachable; `FALSE` otherwise."},{"pos":[54778,54785],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[54789,54900],"content":"To make a tab detachable, use the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnableTabDetach<ept id=\"p1\">](#cmfcbasetabctrl__enabletabdetach)</ept>.","source":"To make a tab detachable, use the method [CMFCBaseTabCtrl::EnableTabDetach](#cmfcbasetabctrl__enabletabdetach)."},{"pos":[54910,54987],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__istabicononly\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsTabIconOnly","linkify":"<a name=\"cmfcbasetabctrl__istabicononly\"></a>  CMFCBaseTabCtrl::IsTabIconOnly","source":"<a name=\"cmfcbasetabctrl__istabicononly\"></a>  CMFCBaseTabCtrl::IsTabIconOnly"},{"content":"Determines whether a tab label contains only icons and no text.","pos":[54991,55054]},{"pos":[55126,55136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[55140,55151],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab.","pos":[55155,55187]},{"pos":[55197,55209],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55213,55269],"content":"<ph id=\"ph1\">`TRUE`</ph> if a tab label has only icons; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if a tab label has only icons; `FALSE` otherwise."},{"pos":[55279,55286],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[55290,55433],"content":"To set the tabs in your application to display only icons, call the method <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::SetTabIconOnly<ept id=\"p1\">](#cmfcbasetabctrl__settabicononly)</ept>.","source":"To set the tabs in your application to display only icons, call the method [CMFCBaseTabCtrl::SetTabIconOnly](#cmfcbasetabctrl__settabicononly)."},{"pos":[55443,55526],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__istabswapenabled\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsTabSwapEnabled","linkify":"<a name=\"cmfcbasetabctrl__istabswapenabled\"></a>  CMFCBaseTabCtrl::IsTabSwapEnabled","source":"<a name=\"cmfcbasetabctrl__istabswapenabled\"></a>  CMFCBaseTabCtrl::IsTabSwapEnabled"},{"content":"Determines whether the tab control allows the user to change tab positions by using the mouse.","pos":[55530,55624]},{"pos":[55683,55695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if tab positions can be changed by the user; otherwise 0.","pos":[55699,55764]},{"pos":[55774,55781],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, users cannot change the order of tabs in a tab control.","pos":[55785,55852]},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnableTabSwap<ept id=\"p1\">](#cmfcbasetabctrl__enabletabswap)</ept> method to enable this functionality.","pos":[55853,55963],"source":" Use the [CMFCBaseTabCtrl::EnableTabSwap](#cmfcbasetabctrl__enabletabswap) method to enable this functionality."},{"pos":[55973,56048],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__istabvisible\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsTabVisible","linkify":"<a name=\"cmfcbasetabctrl__istabvisible\"></a>  CMFCBaseTabCtrl::IsTabVisible","source":"<a name=\"cmfcbasetabctrl__istabvisible\"></a>  CMFCBaseTabCtrl::IsTabVisible"},{"content":"Indicates whether the specified tab is visible.","pos":[56052,56099]},{"pos":[56170,56180],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[56184,56195],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab to check.","pos":[56199,56240]},{"pos":[56250,56262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the specified tab is visible; otherwise 0.","pos":[56266,56319]},{"pos":[56329,56406],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__isvs2005style\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::IsVS2005Style","linkify":"<a name=\"cmfcbasetabctrl__isvs2005style\"></a>  CMFCBaseTabCtrl::IsVS2005Style","source":"<a name=\"cmfcbasetabctrl__isvs2005style\"></a>  CMFCBaseTabCtrl::IsVS2005Style"},{"pos":[56573,56585],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56595,56602],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[56612,56715],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__m_bactivatetabonrightclick\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::m_bActivateTabOnRightClick","linkify":"<a name=\"cmfcbasetabctrl__m_bactivatetabonrightclick\"></a>  CMFCBaseTabCtrl::m_bActivateTabOnRightClick","source":"<a name=\"cmfcbasetabctrl__m_bactivatetabonrightclick\"></a>  CMFCBaseTabCtrl::m_bActivateTabOnRightClick"},{"pos":[56719,56853],"content":"<ph id=\"ph1\">`m_bActivateTabOnRightClick`</ph> determines whether tabs are in focus when the user clicks on a tab label by using the right mouse button.","source":"`m_bActivateTabOnRightClick` determines whether tabs are in focus when the user clicks on a tab label by using the right mouse button."},{"pos":[56913,56920],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[56924,56974],"content":"The default value for this data member is <ph id=\"ph1\">`FALSE`</ph>.","source":"The default value for this data member is `FALSE`."},{"pos":[56984,57075],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__m_bautodestroywindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::m_bAutoDestroyWindow","linkify":"<a name=\"cmfcbasetabctrl__m_bautodestroywindow\"></a>  CMFCBaseTabCtrl::m_bAutoDestroyWindow","source":"<a name=\"cmfcbasetabctrl__m_bautodestroywindow\"></a>  CMFCBaseTabCtrl::m_bAutoDestroyWindow"},{"pos":[57079,57204],"content":"<ph id=\"ph1\">`m_bAutoDestroyWindow`</ph> determines whether the framework automatically destroys the objects on tabs when the tabs are removed.","source":"`m_bAutoDestroyWindow` determines whether the framework automatically destroys the objects on tabs when the tabs are removed."},{"pos":[57258,57265],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[57269,57304],"content":"By default, this member is <ph id=\"ph1\">`FALSE`</ph>.","source":"By default, this member is `FALSE`."},{"pos":[57314,57379],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__movetab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::MoveTab","linkify":"<a name=\"cmfcbasetabctrl__movetab\"></a>  CMFCBaseTabCtrl::MoveTab","source":"<a name=\"cmfcbasetabctrl__movetab\"></a>  CMFCBaseTabCtrl::MoveTab"},{"pos":[57564,57574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nSource`</ph>","pos":[57578,57592],"source":"[in] `nSource`"},{"content":"[in] <ph id=\"ph1\">`nDest`</ph>","pos":[57596,57608],"source":" [in] `nDest`"},{"pos":[57618,57625],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[57635,57710],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__onchangetabs\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::OnChangeTabs","linkify":"<a name=\"cmfcbasetabctrl__onchangetabs\"></a>  CMFCBaseTabCtrl::OnChangeTabs","source":"<a name=\"cmfcbasetabctrl__onchangetabs\"></a>  CMFCBaseTabCtrl::OnChangeTabs"},{"content":"The framework calls this method when the number of tabs on a tab control changes.","pos":[57714,57795]},{"pos":[57849,57856],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, this method does nothing.","pos":[57860,57897]},{"content":"Override this method to execute custom code when the number of tabs on the tab control changes.","pos":[57898,57993]},{"pos":[58003,58066],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__ondrop\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::OnDrop","linkify":"<a name=\"cmfcbasetabctrl__ondrop\"></a>  CMFCBaseTabCtrl::OnDrop","source":"<a name=\"cmfcbasetabctrl__ondrop\"></a>  CMFCBaseTabCtrl::OnDrop"},{"pos":[58265,58275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`COleDataObject*`</ph>","pos":[58279,58301],"source":"[in] `COleDataObject*`"},{"content":"[in] <ph id=\"ph1\">`DROPEFFECT`</ph>","pos":[58305,58322],"source":" [in] `DROPEFFECT`"},{"content":"[in] <ph id=\"ph1\">`CPoint`</ph>","pos":[58326,58339],"source":" [in] `CPoint`"},{"pos":[58349,58361],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[58371,58378],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[58388,58459],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__ondragover\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::OnDragOver","linkify":"<a name=\"cmfcbasetabctrl__ondragover\"></a>  CMFCBaseTabCtrl::OnDragOver","source":"<a name=\"cmfcbasetabctrl__ondragover\"></a>  CMFCBaseTabCtrl::OnDragOver"},{"pos":[58663,58673],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`COleDataObject*`</ph>","pos":[58677,58699],"source":"[in] `COleDataObject*`"},{"content":"[in] <ph id=\"ph1\">`DWORD`</ph>","pos":[58703,58715],"source":" [in] `DWORD`"},{"content":"[in] <ph id=\"ph1\">`CPoint`</ph>","pos":[58719,58732],"source":" [in] `CPoint`"},{"pos":[58742,58754],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[58764,58771],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[58781,58854],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__ondragleave\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::OnDragLeave","linkify":"<a name=\"cmfcbasetabctrl__ondragleave\"></a>  CMFCBaseTabCtrl::OnDragLeave","source":"<a name=\"cmfcbasetabctrl__ondragleave\"></a>  CMFCBaseTabCtrl::OnDragLeave"},{"pos":[59010,59017],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[59027,59100],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__ondragenter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::OnDragEnter","linkify":"<a name=\"cmfcbasetabctrl__ondragenter\"></a>  CMFCBaseTabCtrl::OnDragEnter","source":"<a name=\"cmfcbasetabctrl__ondragenter\"></a>  CMFCBaseTabCtrl::OnDragEnter"},{"pos":[59305,59315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`COleDataObject*`</ph>","pos":[59319,59341],"source":"[in] `COleDataObject*`"},{"content":"[in] <ph id=\"ph1\">`DWORD`</ph>","pos":[59345,59357],"source":" [in] `DWORD`"},{"content":"[in] <ph id=\"ph1\">`CPoint`</ph>","pos":[59361,59374],"source":" [in] `CPoint`"},{"pos":[59384,59396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59406,59413],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[59423,59496],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__onrenametab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::OnRenameTab","linkify":"<a name=\"cmfcbasetabctrl__onrenametab\"></a>  CMFCBaseTabCtrl::OnRenameTab","source":"<a name=\"cmfcbasetabctrl__onrenametab\"></a>  CMFCBaseTabCtrl::OnRenameTab"},{"pos":[59670,59680],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`int`</ph>","pos":[59684,59694],"source":"[in] `int`"},{"content":"[in] <ph id=\"ph1\">`CString&amp;`</ph>","pos":[59698,59713],"source":" [in] `CString&`"},{"pos":[59723,59735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59745,59752],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[59762,59851],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__pretranslatemessage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::PreTranslateMessage","linkify":"<a name=\"cmfcbasetabctrl__pretranslatemessage\"></a>  CMFCBaseTabCtrl::PreTranslateMessage","source":"<a name=\"cmfcbasetabctrl__pretranslatemessage\"></a>  CMFCBaseTabCtrl::PreTranslateMessage"},{"pos":[60024,60034],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[60038,60049],"content":"[in] <ph id=\"ph1\">`pMsg`</ph>","source":"[in] `pMsg`"},{"pos":[60059,60071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60081,60088],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[60098,60173],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__recalclayout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::RecalcLayout","linkify":"<a name=\"cmfcbasetabctrl__recalclayout\"></a>  CMFCBaseTabCtrl::RecalcLayout","source":"<a name=\"cmfcbasetabctrl__recalclayout\"></a>  CMFCBaseTabCtrl::RecalcLayout"},{"content":"Recalculates the internal layout of the tab control.","pos":[60177,60229]},{"pos":[60289,60296],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>, this method is a pure virtual function.","pos":[60300,60417],"source":"In the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md), this method is a pure virtual function."},{"content":"If you derive a class from <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph>, you have to implement this function.","pos":[60418,60500],"source":" If you derive a class from `CMFCBaseTabCtrl`, you have to implement this function."},{"pos":[60510,60587],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__removealltabs\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::RemoveAllTabs","linkify":"<a name=\"cmfcbasetabctrl__removealltabs\"></a>  CMFCBaseTabCtrl::RemoveAllTabs","source":"<a name=\"cmfcbasetabctrl__removealltabs\"></a>  CMFCBaseTabCtrl::RemoveAllTabs"},{"content":"Removes all the tabs from the tab control.","pos":[60591,60633]},{"pos":[60688,60695],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[60699,60902],"content":"If <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::m_bAutoDestroyWindow<ept id=\"p1\">](#cmfcbasetabctrl__m_bautodestroywindow)</ept> is <ph id=\"ph1\">`TRUE`</ph>, the framework deletes all the <bpt id=\"p2\">[</bpt>CWnd<ept id=\"p2\">](../../mfc/reference/cwnd-class.md)</ept> objects attached to the removed tabs.","source":"If [CMFCBaseTabCtrl::m_bAutoDestroyWindow](#cmfcbasetabctrl__m_bautodestroywindow) is `TRUE`, the framework deletes all the [CWnd](../../mfc/reference/cwnd-class.md) objects attached to the removed tabs."},{"pos":[60912,60981],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__removetab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::RemoveTab","linkify":"<a name=\"cmfcbasetabctrl__removetab\"></a>  CMFCBaseTabCtrl::RemoveTab","source":"<a name=\"cmfcbasetabctrl__removetab\"></a>  CMFCBaseTabCtrl::RemoveTab"},{"content":"Removes a tab from the tab control.","pos":[60985,61020]},{"pos":[61117,61127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[61131,61142],"source":"[in] `iTab`"},{"content":"The zero-based index of a tab.","pos":[61146,61176]},{"content":"[in] <ph id=\"ph1\">`bRecalcLayout`</ph>","pos":[61183,61203],"source":"[in] `bRecalcLayout`"},{"content":"A Boolean parameter that specifies whether to recalculate the layout of the tab.","pos":[61207,61287]},{"pos":[61297,61309],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61313,61382],"content":"<ph id=\"ph1\">`TRUE`</ph> if the method removes the tab successfully; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the method removes the tab successfully; otherwise `FALSE`."},{"pos":[61392,61399],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[61403,61605],"content":"If <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::m_bAutoDestroyWindow<ept id=\"p1\">](#cmfcbasetabctrl__m_bautodestroywindow)</ept> is <ph id=\"ph1\">`TRUE`</ph>, <ph id=\"ph2\">`RemoveTab`</ph> destroys the <bpt id=\"p2\">[</bpt>CWnd<ept id=\"p2\">](../../mfc/reference/cwnd-class.md)</ept> object associated with the specified tab.","source":"If [CMFCBaseTabCtrl::m_bAutoDestroyWindow](#cmfcbasetabctrl__m_bautodestroywindow) is `TRUE`, `RemoveTab` destroys the [CWnd](../../mfc/reference/cwnd-class.md) object associated with the specified tab."},{"pos":[61615,61684],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__renametab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::RenameTab","linkify":"<a name=\"cmfcbasetabctrl__renametab\"></a>  CMFCBaseTabCtrl::RenameTab","source":"<a name=\"cmfcbasetabctrl__renametab\"></a>  CMFCBaseTabCtrl::RenameTab"},{"pos":[61838,61850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61860,61867],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[61877,61956],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__resetimagelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::ResetImageList","linkify":"<a name=\"cmfcbasetabctrl__resetimagelist\"></a>  CMFCBaseTabCtrl::ResetImageList","source":"<a name=\"cmfcbasetabctrl__resetimagelist\"></a>  CMFCBaseTabCtrl::ResetImageList"},{"pos":[61960,62075],"content":"Resets the image list for an instance of the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>.","source":"Resets the image list for an instance of the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md)."},{"pos":[62123,62192],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__serialize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::Serialize","linkify":"<a name=\"cmfcbasetabctrl__serialize\"></a>  CMFCBaseTabCtrl::Serialize","source":"<a name=\"cmfcbasetabctrl__serialize\"></a>  CMFCBaseTabCtrl::Serialize"},{"pos":[62358,62368],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[62372,62381],"content":"[in] <ph id=\"ph1\">`ar`</ph>","source":"[in] `ar`"},{"pos":[62391,62398],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[62408,62483],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__setactivetab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetActiveTab","linkify":"<a name=\"cmfcbasetabctrl__setactivetab\"></a>  CMFCBaseTabCtrl::SetActiveTab","source":"<a name=\"cmfcbasetabctrl__setactivetab\"></a>  CMFCBaseTabCtrl::SetActiveTab"},{"content":"Activates the specified tab.","pos":[62487,62515]},{"pos":[62583,62593],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[62597,62608],"source":"[in] `iTab`"},{"content":"The zero-based index of a tab.","pos":[62612,62642]},{"content":"<ph id=\"ph1\">`SetActiveTab`</ph> makes the tab with this index active.","pos":[62643,62695],"source":"`SetActiveTab` makes the tab with this index active."},{"pos":[62705,62717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62721,62761],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if successful; otherwise `FALSE`."},{"pos":[62771,62778],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcbasetabctrl-class.md)</ept>, this method is a pure virtual function.","pos":[62782,62899],"source":"In the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md), this method is a pure virtual function."},{"content":"If you derive a class from <ph id=\"ph1\">`CMFCBaseTabCtrl`</ph>, you have to implement this function.","pos":[62900,62982],"source":" If you derive a class from `CMFCBaseTabCtrl`, you have to implement this function."},{"pos":[62992,63077],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__setactivetabcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetActiveTabColor","linkify":"<a name=\"cmfcbasetabctrl__setactivetabcolor\"></a>  CMFCBaseTabCtrl::SetActiveTabColor","source":"<a name=\"cmfcbasetabctrl__setactivetabcolor\"></a>  CMFCBaseTabCtrl::SetActiveTabColor"},{"content":"Sets the background color for the active tab.","pos":[63081,63126]},{"pos":[63197,63207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`clr`</ph>","pos":[63211,63221],"source":"[in] `clr`"},{"content":"Specifies the new background color.","pos":[63225,63260]},{"pos":[63270,63277],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[63281,63437],"content":"The framework obtains the default background color for active tabs from the <bpt id=\"p1\">[</bpt>GetSysColor<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724371)</ept>method.","source":"The framework obtains the default background color for active tabs from the [GetSysColor](http://msdn.microsoft.com/library/windows/desktop/ms724371)method."},{"pos":[63447,63540],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__setactivetabtextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetActiveTabTextColor","linkify":"<a name=\"cmfcbasetabctrl__setactivetabtextcolor\"></a>  CMFCBaseTabCtrl::SetActiveTabTextColor","source":"<a name=\"cmfcbasetabctrl__setactivetabtextcolor\"></a>  CMFCBaseTabCtrl::SetActiveTabTextColor"},{"content":"Sets the text color for active tabs.","pos":[63544,63580]},{"pos":[63655,63665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`clr`</ph>","pos":[63669,63679],"source":"[in] `clr`"},{"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter that specifies the new text color.","pos":[63683,63800],"source":" A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that specifies the new text color."},{"pos":[63810,63817],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, the framework obtains the text color from <bpt id=\"p1\">[</bpt>GetSysColor<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724371)</ept>.","pos":[63821,63949],"source":"By default, the framework obtains the text color from [GetSysColor](http://msdn.microsoft.com/library/windows/desktop/ms724371)."},{"content":"Override this default color by using the <ph id=\"ph1\">`SetActiveTabTextColor`</ph> method.","pos":[63950,64022],"source":" Override this default color by using the `SetActiveTabTextColor` method."},{"pos":[64032,64109],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__setautocolors\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetAutoColors","linkify":"<a name=\"cmfcbasetabctrl__setautocolors\"></a>  CMFCBaseTabCtrl::SetAutoColors","source":"<a name=\"cmfcbasetabctrl__setautocolors\"></a>  CMFCBaseTabCtrl::SetAutoColors"},{"content":"Sets the colors of the tab control that the framework uses in automatic color mode.","pos":[64113,64196]},{"pos":[64289,64299],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`arColors`</ph>","pos":[64303,64318],"source":"[in] `arColors`"},{"content":"An array of RGB colors.","pos":[64322,64345]},{"pos":[64355,64362],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you provide a custom array of colors, the default array of colors is ignored.","pos":[64366,64446]},{"content":"If the parameter <ph id=\"ph1\">`arColors`</ph> is empty, the framework reverts to the default array of colors.","pos":[64447,64538],"source":" If the parameter `arColors` is empty, the framework reverts to the default array of colors."},{"pos":[64545,64656],"content":"To enable autocolor mode, use the <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::EnableAutoColor<ept id=\"p1\">](#cmfcbasetabctrl__enableautocolor)</ept> method.","source":"To enable autocolor mode, use the [CMFCBaseTabCtrl::EnableAutoColor](#cmfcbasetabctrl__enableautocolor) method."},{"pos":[64666,64763],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__setdockingbarwrapperrtc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetDockingBarWrapperRTC","linkify":"<a name=\"cmfcbasetabctrl__setdockingbarwrapperrtc\"></a>  CMFCBaseTabCtrl::SetDockingBarWrapperRTC","source":"<a name=\"cmfcbasetabctrl__setdockingbarwrapperrtc\"></a>  CMFCBaseTabCtrl::SetDockingBarWrapperRTC"},{"pos":[64767,64915],"content":"Sets the wrapper class that is used for any objects that are not derived from the <bpt id=\"p1\">[</bpt>CDockablePane Class<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept>.","source":"Sets the wrapper class that is used for any objects that are not derived from the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md)."},{"pos":[64991,65001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pRTC`</ph>","pos":[65005,65016],"source":"[in] `pRTC`"},{"content":"The runtime class information for the new wrapper class.","pos":[65020,65076]},{"pos":[65086,65093],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You add tabs to a tab control by using the methods <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::AddTab<ept id=\"p1\">](#cmfcbasetabctrl__addtab)</ept> and <bpt id=\"p2\">[</bpt>CMFCBaseTabCtrl::InsertTab<ept id=\"p2\">](#cmfcbasetabctrl__inserttab)</ept>.","pos":[65097,65262],"source":"You add tabs to a tab control by using the methods [CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab) and [CMFCBaseTabCtrl::InsertTab](#cmfcbasetabctrl__inserttab)."},{"content":"When you add a tab, each control on that tab must be dockable.","pos":[65263,65325]},{"content":"Any objects that are not derived from <ph id=\"ph1\">`CDockablePane`</ph> must be wrapped.","pos":[65326,65396],"source":" Any objects that are not derived from `CDockablePane` must be wrapped."},{"content":"<ph id=\"ph1\">`AddTab`</ph> and <ph id=\"ph2\">`InsertTab`</ph> create a wrapper for these objects.","pos":[65397,65457],"source":"`AddTab` and `InsertTab` create a wrapper for these objects."},{"content":"The default wrapper class is the <bpt id=\"p1\">[</bpt>CDockablePaneAdapter Class<ept id=\"p1\">](../../mfc/reference/cdockablepaneadapter-class.md)</ept>.","pos":[65458,65571],"source":" The default wrapper class is the [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md)."},{"content":"The method <ph id=\"ph1\">`SetDockingBarWrapperRTC`</ph> enables you to change the class that is used as a wrapper class.","pos":[65572,65673],"source":" The method `SetDockingBarWrapperRTC` enables you to change the class that is used as a wrapper class."},{"content":"The wrapper class that you provide must be derived from <ph id=\"ph1\">`CDockablePaneAdapter`</ph>.","pos":[65674,65753],"source":" The wrapper class that you provide must be derived from `CDockablePaneAdapter`."},{"pos":[65763,65844],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__setdrawnoprefix\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetDrawNoPrefix","linkify":"<a name=\"cmfcbasetabctrl__setdrawnoprefix\"></a>  CMFCBaseTabCtrl::SetDrawNoPrefix","source":"<a name=\"cmfcbasetabctrl__setdrawnoprefix\"></a>  CMFCBaseTabCtrl::SetDrawNoPrefix"},{"content":"Enables and disables the processing of prefix characters in tab labels.","pos":[65848,65919]},{"pos":[66014,66024],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bNoPrefix`</ph>","pos":[66028,66044],"source":"[in] `bNoPrefix`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if you want to process prefix characters; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[66047,66115],"source":" `TRUE` if you want to process prefix characters; otherwise `FALSE`."},{"content":"[in] <ph id=\"ph1\">`bRedraw`</ph>","pos":[66122,66136],"source":"[in] `bRedraw`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if you want to redraw the tabbed window; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[66139,66206],"source":" `TRUE` if you want to redraw the tabbed window; otherwise `FALSE`."},{"pos":[66216,66223],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A prefix character is a mnemonic character that is preceded by an ampersand (&amp;).","pos":[66227,66307],"source":"A prefix character is a mnemonic character that is preceded by an ampersand (&)."},{"pos":[66317,66392],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__setimagelist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetImageList","linkify":"<a name=\"cmfcbasetabctrl__setimagelist\"></a>  CMFCBaseTabCtrl::SetImageList","source":"<a name=\"cmfcbasetabctrl__setimagelist\"></a>  CMFCBaseTabCtrl::SetImageList"},{"content":"Sets the icon image list for the tab control.","pos":[66396,66441]},{"pos":[66639,66649],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiID`</ph>","pos":[66653,66664],"source":"[in] `uiID`"},{"content":"A bitmap resource ID.","pos":[66668,66689]},{"content":"<ph id=\"ph1\">`SetImageList`</ph> loads the image list from this resource.","pos":[66690,66745],"source":"`SetImageList` loads the image list from this resource."},{"content":"[in] <ph id=\"ph1\">`cx`</ph>","pos":[66752,66761],"source":"[in] `cx`"},{"content":"The width of each image in pixels.","pos":[66765,66799]},{"content":"[in] <ph id=\"ph1\">`clrTransp`</ph>","pos":[66806,66822],"source":"[in] `clrTransp`"},{"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter that indicates the transparent color of the image.","pos":[66826,66959],"source":" A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the transparent color of the image."},{"content":"[in] <ph id=\"ph1\">`hImageList`</ph>","pos":[66966,66983],"source":"[in] `hImageList`"},{"content":"A handle to a preloaded image list.","pos":[66987,67022]},{"pos":[67032,67044],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the method was successful; 0 otherwise.","pos":[67048,67098]},{"pos":[67108,67115],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The images from the icon image list are displayed alongside the labels for the tab.","pos":[67119,67202]},{"content":"To display an icon, you must specify its index when you call <bpt id=\"p1\">[</bpt>CMFCBaseTabCtrl::AddTab<ept id=\"p1\">](#cmfcbasetabctrl__addtab)</ept>.","pos":[67203,67316],"source":" To display an icon, you must specify its index when you call [CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab)."},{"content":"<ph id=\"ph1\">`SetImageList`</ph> will fail if the tab control was created with a flat style.","pos":[67323,67397],"source":"`SetImageList` will fail if the tab control was created with a flat style."},{"content":"It will also fail if the framework cannot load the image indicated by <ph id=\"ph1\">`uiID`</ph>.","pos":[67398,67475],"source":" It will also fail if the framework cannot load the image indicated by `uiID`."},{"content":"This method recalculates the height of the tab according to the image and text sizes.","pos":[67482,67567]},{"pos":[67577,67650],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__setlocation\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetLocation","linkify":"<a name=\"cmfcbasetabctrl__setlocation\"></a>  CMFCBaseTabCtrl::SetLocation","source":"<a name=\"cmfcbasetabctrl__setlocation\"></a>  CMFCBaseTabCtrl::SetLocation"},{"pos":[67823,67833],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[67837,67852],"content":"[in] <ph id=\"ph1\">`location`</ph>","source":"[in] `location`"},{"pos":[67862,67869],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[67879,67956],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__settabbkcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetTabBkColor","linkify":"<a name=\"cmfcbasetabctrl__settabbkcolor\"></a>  CMFCBaseTabCtrl::SetTabBkColor","source":"<a name=\"cmfcbasetabctrl__settabbkcolor\"></a>  CMFCBaseTabCtrl::SetTabBkColor"},{"content":"Sets the background color for the specified tab.","pos":[67960,68008]},{"pos":[68113,68123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[68127,68138],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab.","pos":[68142,68174]},{"content":"[in] <ph id=\"ph1\">`color`</ph>","pos":[68181,68193],"source":"[in] `color`"},{"content":"The color to set.","pos":[68197,68214]},{"pos":[68224,68236],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68240,68280],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if successful; `FALSE` otherwise."},{"pos":[68290,68373],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__settabbordersize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetTabBorderSize","linkify":"<a name=\"cmfcbasetabctrl__settabbordersize\"></a>  CMFCBaseTabCtrl::SetTabBorderSize","source":"<a name=\"cmfcbasetabctrl__settabbordersize\"></a>  CMFCBaseTabCtrl::SetTabBorderSize"},{"content":"Sets a new border size for the tab control.","pos":[68377,68420]},{"pos":[68529,68539],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nTabBorderSize`</ph>","pos":[68543,68564],"source":"[in] `nTabBorderSize`"},{"content":"The new border size, in pixels.","pos":[68568,68599]},{"content":"[in] <ph id=\"ph1\">`bRepaint`</ph>","pos":[68606,68621],"source":"[in] `bRepaint`"},{"content":"A Boolean parameter that indicates whether the framework redraws the control.","pos":[68625,68702]},{"pos":[68712,68785],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__settabhicon\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetTabHicon","linkify":"<a name=\"cmfcbasetabctrl__settabhicon\"></a>  CMFCBaseTabCtrl::SetTabHicon","source":"<a name=\"cmfcbasetabctrl__settabhicon\"></a>  CMFCBaseTabCtrl::SetTabHicon"},{"content":"Sets the icon for a tab label.","pos":[68789,68819]},{"pos":[68904,68914],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[68918,68929],"source":"[in] `iTab`"},{"content":"The zero-based index of a tab.","pos":[68933,68963]},{"content":"This method changes the icon for this tab.","pos":[68964,69006]},{"content":"[in] <ph id=\"ph1\">`hIcon`</ph>","pos":[69013,69025],"source":"[in] `hIcon`"},{"content":"A handle to an icon.","pos":[69029,69049]},{"pos":[69059,69071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69075,69115],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if successful; otherwise `FALSE`."},{"pos":[69125,69196],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__settabicon\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetTabIcon","linkify":"<a name=\"cmfcbasetabctrl__settabicon\"></a>  CMFCBaseTabCtrl::SetTabIcon","source":"<a name=\"cmfcbasetabctrl__settabicon\"></a>  CMFCBaseTabCtrl::SetTabIcon"},{"content":"Sets the icon for a tab.","pos":[69200,69224]},{"pos":[69308,69318],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[69322,69333],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab to update.","pos":[69337,69379]},{"content":"[in] <ph id=\"ph1\">`uiIcon`</ph>","pos":[69386,69399],"source":"[in] `uiIcon`"},{"content":"The icon ID for the new icon.","pos":[69403,69432]},{"content":"This ID references the internal <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> object.","pos":[69433,69526],"source":" This ID references the internal [CImageList](../../mfc/reference/cimagelist-class.md) object."},{"pos":[69536,69548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69552,69592],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if successful; otherwise `FALSE`."},{"pos":[69602,69681],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__settabicononly\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetTabIconOnly","linkify":"<a name=\"cmfcbasetabctrl__settabicononly\"></a>  CMFCBaseTabCtrl::SetTabIconOnly","source":"<a name=\"cmfcbasetabctrl__settabicononly\"></a>  CMFCBaseTabCtrl::SetTabIconOnly"},{"content":"Enables displaying only an icon (and no text label) on a specific tab.","pos":[69685,69755]},{"pos":[69892,69902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[69906,69917],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab to change.","pos":[69921,69963]},{"content":"[in] <ph id=\"ph1\">`bIconOnly`</ph>","pos":[69970,69986],"source":"[in] `bIconOnly`"},{"content":"A Boolean parameter that determines whether to display only icons.","pos":[69990,70056]},{"content":"[in] <ph id=\"ph1\">`bShowTooltipAlways`</ph>","pos":[70063,70088],"source":"[in] `bShowTooltipAlways`"},{"content":"A Boolean parameter that determines whether the framework shows tooltips for a tab label that displays only icons.","pos":[70092,70206]},{"pos":[70216,70228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70232,70272],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if successful; otherwise `FALSE`."},{"pos":[70282,70289],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, a tab control displays the icon and text label for each tab.","pos":[70293,70365]},{"pos":[70375,70448],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__settablabel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetTabLabel","linkify":"<a name=\"cmfcbasetabctrl__settablabel\"></a>  CMFCBaseTabCtrl::SetTabLabel","source":"<a name=\"cmfcbasetabctrl__settablabel\"></a>  CMFCBaseTabCtrl::SetTabLabel"},{"content":"Sets the text for a tab label.","pos":[70452,70482]},{"pos":[70579,70589],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[70593,70604],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab to update.","pos":[70608,70650]},{"content":"[in] <ph id=\"ph1\">`strLabel`</ph>","pos":[70657,70672],"source":"[in] `strLabel`"},{"content":"A reference to a string that contains the new text for the tab label.","pos":[70676,70745]},{"pos":[70755,70767],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; 0 otherwise.","pos":[70771,70806]},{"pos":[70816,70893],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__settabsheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetTabsHeight","linkify":"<a name=\"cmfcbasetabctrl__settabsheight\"></a>  CMFCBaseTabCtrl::SetTabsHeight","source":"<a name=\"cmfcbasetabctrl__settabsheight\"></a>  CMFCBaseTabCtrl::SetTabsHeight"},{"pos":[71051,71058],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[71068,71143],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__settabsorder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetTabsOrder","linkify":"<a name=\"cmfcbasetabctrl__settabsorder\"></a>  CMFCBaseTabCtrl::SetTabsOrder","source":"<a name=\"cmfcbasetabctrl__settabsorder\"></a>  CMFCBaseTabCtrl::SetTabsOrder"},{"content":"Arranges the tabs in the specified order.","pos":[71147,71188]},{"pos":[71269,71279],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`arOrder`</ph>","pos":[71283,71297],"source":"[in] `arOrder`"},{"content":"An array of zero-based indexes that defines the new tab order.","pos":[71301,71363]},{"pos":[71373,71385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71389,71428],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; <ph id=\"ph2\">`FAIL`</ph> otherwise.","source":"`TRUE` if successful; `FAIL` otherwise."},{"pos":[71438,71445],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[71449,71536],"content":"The size of the <ph id=\"ph1\">`arOrder`</ph> array must be equal to the number of tabs in the tab control.","source":"The size of the `arOrder` array must be equal to the number of tabs in the tab control."},{"pos":[71546,71627],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__settabtextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SetTabTextColor","linkify":"<a name=\"cmfcbasetabctrl__settabtextcolor\"></a>  CMFCBaseTabCtrl::SetTabTextColor","source":"<a name=\"cmfcbasetabctrl__settabtextcolor\"></a>  CMFCBaseTabCtrl::SetTabTextColor"},{"content":"Sets the text color for a specific tab.","pos":[71631,71670]},{"pos":[71777,71787],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[71791,71802],"source":"[in] `iTab`"},{"content":"The zero-based index of the tab.","pos":[71806,71838]},{"content":"[in] <ph id=\"ph1\">`color`</ph>","pos":[71845,71857],"source":"[in] `color`"},{"content":"A <bpt id=\"p1\">[</bpt>COLORREF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183449)</ept> parameter that indicates the new text color.","pos":[71861,71978],"source":" A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the new text color."},{"pos":[71988,72000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; 0 otherwise.","pos":[72004,72039]},{"pos":[72049,72114],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__showtab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::ShowTab","linkify":"<a name=\"cmfcbasetabctrl__showtab\"></a>  CMFCBaseTabCtrl::ShowTab","source":"<a name=\"cmfcbasetabctrl__showtab\"></a>  CMFCBaseTabCtrl::ShowTab"},{"content":"Shows or hides the specified tab.","pos":[72118,72151]},{"pos":[72301,72311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iTab`</ph>","pos":[72315,72326],"source":"[in] `iTab`"},{"content":"The index of the tab that <ph id=\"ph1\">`ShowTab`</ph> will show or hide.","pos":[72330,72384],"source":" The index of the tab that `ShowTab` will show or hide."},{"content":"[in] <ph id=\"ph1\">`bShow`</ph>","pos":[72391,72403],"source":"[in] `bShow`"},{"content":"A Boolean parameter that indicates whether to show the tab.","pos":[72407,72466]},{"content":"[in] <ph id=\"ph1\">`bRecalcLayout`</ph>","pos":[72473,72493],"source":"[in] `bRecalcLayout`"},{"content":"A Boolean parameter that indicates whether to immediately recalculate the window layout.","pos":[72497,72585]},{"content":"[in] <ph id=\"ph1\">`bActivate`</ph>","pos":[72592,72608],"source":"[in] `bActivate`"},{"content":"A Boolean parameter that indicates whether to select the tab specified by <ph id=\"ph1\">`iTab`</ph>.","pos":[72612,72693],"source":" A Boolean parameter that indicates whether to select the tab specified by `iTab`."},{"pos":[72703,72715],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[72719,72754]},{"pos":[72764,72771],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The parameter <ph id=\"ph1\">`bActivate`</ph> only applies if <ph id=\"ph2\">`bShow`</ph> is <ph id=\"ph3\">`TRUE`</ph>.","pos":[72775,72835],"source":"The parameter `bActivate` only applies if `bShow` is `TRUE`."},{"content":"If <ph id=\"ph1\">`bActivate`</ph> is <ph id=\"ph2\">`TRUE`</ph> and if <ph id=\"ph3\">`ShowTab`</ph> is successful, <ph id=\"ph4\">`ShowTab`</ph> will send the message AFX_WM_CHANGE_ACTIVE_TAB to the parent of the tab window.","pos":[72836,72982],"source":" If `bActivate` is `TRUE` and if `ShowTab` is successful, `ShowTab` will send the message AFX_WM_CHANGE_ACTIVE_TAB to the parent of the tab window."},{"pos":[72992,73071],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__startrenametab\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::StartRenameTab","linkify":"<a name=\"cmfcbasetabctrl__startrenametab\"></a>  CMFCBaseTabCtrl::StartRenameTab","source":"<a name=\"cmfcbasetabctrl__startrenametab\"></a>  CMFCBaseTabCtrl::StartRenameTab"},{"pos":[73238,73248],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[73252,73263],"content":"[in] <ph id=\"ph1\">`iTab`</ph>","source":"[in] `iTab`"},{"pos":[73273,73285],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73295,73302],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[73312,73379],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcbasetabctrl__swaptabs\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCBaseTabCtrl::SwapTabs","linkify":"<a name=\"cmfcbasetabctrl__swaptabs\"></a>  CMFCBaseTabCtrl::SwapTabs","source":"<a name=\"cmfcbasetabctrl__swaptabs\"></a>  CMFCBaseTabCtrl::SwapTabs"},{"pos":[73576,73586],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nFisrtTabID`</ph>","pos":[73590,73608],"source":"[in] `nFisrtTabID`"},{"content":"[in] <ph id=\"ph1\">`nSecondTabID`</ph>","pos":[73612,73631],"source":" [in] `nSecondTabID`"},{"pos":[73641,73648],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[73657,73665],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[73669,73717],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[73720,73767],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMFCTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfctabctrl-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[73770,73833],"source":" [CMFCTabCtrl Class](../../mfc/reference/cmfctabctrl-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMFCOutlookBarTabCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfcoutlookbartabctrl-class.md)</ept>","pos":[73836,73918],"source":" [CMFCOutlookBarTabCtrl Class](../../mfc/reference/cmfcoutlookbartabctrl-class.md)"}],"content":"---\ntitle: \"CMFCBaseTabCtrl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCBaseTabCtrl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCBaseTabCtrl class\"\nms.assetid: 7270c55f-6f6e-4dd2-b0d2-291afeac3882\ncaps.latest.revision: 41\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# CMFCBaseTabCtrl Class\nImplements the base functionality for tabbed windows.  \n  \n## Syntax  \n  \n```  \nclass CMFCBaseTabCtrl : public CWnd  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCBaseTabCtrl::AddIcon](#cmfcbasetabctrl__addicon)||  \n|[CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab)|Adds a new tab to the tabbed window.|  \n|[CMFCBaseTabCtrl::ApplyRestoredTabInfo](#cmfcbasetabctrl__applyrestoredtabinfo)||  \n|[CMFCBaseTabCtrl::AutoDestroyWindow](#cmfcbasetabctrl__autodestroywindow)||  \n|[CMFCBaseTabCtrl::CalcRectEdit](#cmfcbasetabctrl__calcrectedit)||  \n|[CMFCBaseTabCtrl::CleanUp](#cmfcbasetabctrl__cleanup)||  \n|[CMFCBaseTabCtrl::ClearImageList](#cmfcbasetabctrl__clearimagelist)||  \n|[CMFCBaseTabCtrl::DetachTab](#cmfcbasetabctrl__detachtab)|Detaches a tab from a tabbed window.|  \n|[CMFCBaseTabCtrl::EnableActivateLastActive](#cmfcbasetabctrl__enableactivatelastactive)||  \n|[CMFCBaseTabCtrl::EnableAutoColor](#cmfcbasetabctrl__enableautocolor)|Enables or disables automatic tab coloring.|  \n|[CMFCBaseTabCtrl::EnableCustomToolTips](#cmfcbasetabctrl__enablecustomtooltips)|Enables or disables custom tooltips for tabs.|  \n|[CMFCBaseTabCtrl::EnableInPlaceEdit](#cmfcbasetabctrl__enableinplaceedit)|Enables or disables direct editing of tab labels.|  \n|[CMFCBaseTabCtrl::EnableTabDetach](#cmfcbasetabctrl__enabletabdetach)|Enables detachable tabs.|  \n|[CMFCBaseTabCtrl::EnableTabSwap](#cmfcbasetabctrl__enabletabswap)|Enables or disables whether the user can change the tab order by using a mouse.|  \n|[CMFCBaseTabCtrl::EnsureVisible](#cmfcbasetabctrl__ensurevisible)|Scrolls the tabs until the specified tab is visible. This method has no effect if the specified tab is already visible.|  \n|[CMFCBaseTabCtrl::EnterDragMode](#cmfcbasetabctrl__enterdragmode)||  \n|[CMFCBaseTabCtrl::FindTargetWnd](#cmfcbasetabctrl__findtargetwnd)|Returns a pane that contains a specified point.|  \n|[CMFCBaseTabCtrl::FireChangeActiveTab](#cmfcbasetabctrl__firechangeactivetab)||  \n|[CMFCBaseTabCtrl::FireChangingActiveTab](#cmfcbasetabctrl__firechangingactivetab)||  \n|[CMFCBaseTabCtrl::GetActiveTab](#cmfcbasetabctrl__getactivetab)|Returns the index of the active tab.|  \n|[CMFCBaseTabCtrl::GetActiveTabColor](#cmfcbasetabctrl__getactivetabcolor)|Returns the background color of the active tab.|  \n|[CMFCBaseTabCtrl::GetActiveTabTextColor](#cmfcbasetabctrl__getactivetabtextcolor)|Returns the text color of the active tab.|  \n|[CMFCBaseTabCtrl::GetActiveWnd](#cmfcbasetabctrl__getactivewnd)|Returns a pointer the active page of the tab control.|  \n|[CMFCBaseTabCtrl::GetAutoColors](#cmfcbasetabctrl__getautocolors)|Returns a reference to the array of colors that are used for automatic coloring.|  \n|[CMFCBaseTabCtrl::GetFirstVisibleTab](#cmfcbasetabctrl__getfirstvisibletab)|Returns a pointer to the first visible tab.|  \n|[CMFCBaseTabCtrl::GetFirstVisibleTabNum](#cmfcbasetabctrl__getfirstvisibletabnum)||  \n|[CMFCBaseTabCtrl::GetHighlightedTab](#cmfcbasetabctrl__gethighlightedtab)|Returns the index of the currently highlighted tab.|  \n|[CMFCBaseTabCtrl::GetImageList](#cmfcbasetabctrl__getimagelist)||  \n|[CMFCBaseTabCtrl::GetImageSize](#cmfcbasetabctrl__getimagesize)||  \n|[CMFCBaseTabCtrl::GetLastVisibleTab](#cmfcbasetabctrl__getlastvisibletab)||  \n|[CMFCBaseTabCtrl::GetLocation](#cmfcbasetabctrl__getlocation)|Returns a variable of the LOCATION data type that indicates where the tab area is positioned relative to the tab control. For example, on the top or on the bottom.|  \n|[CMFCBaseTabCtrl::GetMaxWindowSize](#cmfcbasetabctrl__getmaxwindowsize)||  \n|[CMFCBaseTabCtrl::GetTabArea](#cmfcbasetabctrl__gettabarea)|Returns the size and the position of the tab area in the tabbed window. The position of the tab area is defined by using coordinates.|  \n|[CMFCBaseTabCtrl::GetTabBkColor](#cmfcbasetabctrl__gettabbkcolor)|Returns the background color of the specified tab.|  \n|[CMFCBaseTabCtrl::GetTabBorderSize](#cmfcbasetabctrl__gettabbordersize)|Returns the size of the tab borders in the tab control.|  \n|[CMFCBaseTabCtrl::GetTabByID](#cmfcbasetabctrl__gettabbyid)|Returns the index of the tab that is identified by a specified ID.|  \n|[CMFCBaseTabCtrl::GetTabCloseButton](#cmfcbasetabctrl__gettabclosebutton)||  \n|[CMFCBaseTabCtrl::GetTabFromHwnd](#cmfcbasetabctrl__gettabfromhwnd)|Returns the index of a tab that contains a specified HWND object.|  \n|[CMFCBaseTabCtrl::GetTabFromPoint](#cmfcbasetabctrl__gettabfrompoint)|Returns the tab that contains a specified point.|  \n|[CMFCBaseTabCtrl::GetTabFullWidth](#cmfcbasetabctrl__gettabfullwidth)||  \n|[CMFCBaseTabCtrl::GetTabHicon](#cmfcbasetabctrl__gettabhicon)|Returns the icon associated with the specified tab.|  \n|[CMFCBaseTabCtrl::GetTabID](#cmfcbasetabctrl__gettabid)|Returns the ID of a tab by using the index of the tab.|  \n|[CMFCBaseTabCtrl::GetTabIcon](#cmfcbasetabctrl__gettabicon)|Returns the icon ID for a specified tab.|  \n|[CMFCBaseTabCtrl::GetTabLabel](#cmfcbasetabctrl__gettablabel)|Returns the text of a specified tab.|  \n|[CMFCBaseTabCtrl::GetTabRect](#cmfcbasetabctrl__gettabrect)|Retrieves the size and position of a specified tab.|  \n|[CMFCBaseTabCtrl::GetTabsHeight](#cmfcbasetabctrl__gettabsheight)||  \n|[CMFCBaseTabCtrl::GetTabsRect](#cmfcbasetabctrl__gettabsrect)||  \n|[CMFCBaseTabCtrl::GetTabTextColor](#cmfcbasetabctrl__gettabtextcolor)|Returns the text color of a specified tab.|  \n|[CMFCBaseTabCtrl::GetTabWnd](#cmfcbasetabctrl__gettabwnd)|Returns the pointer to a pane that resides on a specified tab page.|  \n|[CMFCBaseTabCtrl::GetTabWndNoWrapper](#cmfcbasetabctrl__gettabwndnowrapper)|Returns the direct pointer to a control that resides on a specified tab page, even if the control has a wrapper.|  \n|[CMFCBaseTabCtrl::GetTabsNum](#cmfcbasetabctrl__gettabsnum)|Returns the number of tabs that are contained in the tab control.|  \n|[CMFCBaseTabCtrl::GetToolTipCtrl](#cmfcbasetabctrl__gettooltipctrl)|Returns a reference to the tooltip control associated with the `CMFCBaseTabCtrl` object.|  \n|[CMFCBaseTabCtrl::GetVisibleTabsNum](#cmfcbasetabctrl__getvisibletabsnum)|Returns the number of visible tabs.|  \n|[CMFCBaseTabCtrl::HasImage](#cmfcbasetabctrl__hasimage)||  \n|[CMFCBaseTabCtrl::HideSingleTab](#cmfcbasetabctrl__hidesingletab)|Sets an option that hides a window tab, but only if the tabbed window displays a just one visible tab.|  \n|[CMFCBaseTabCtrl::InsertTab](#cmfcbasetabctrl__inserttab)|Inserts a new tab.|  \n|[CMFCBaseTabCtrl::InvalidateTab](#cmfcbasetabctrl__invalidatetab)||  \n|[CMFCBaseTabCtrl::IsActiveTabCloseButton](#cmfcbasetabctrl__isactivetabclosebutton)||  \n|[CMFCBaseTabCtrl::IsAutoColor](#cmfcbasetabctrl__isautocolor)|Returns a value that indicates whether a tabbed window is in automatic-color mode.|  \n|[CMFCBaseTabCtrl::IsAutoDestroyWindow](#cmfcbasetabctrl__isautodestroywindow)||  \n|[CMFCBaseTabCtrl::IsColored](#cmfcbasetabctrl__iscolored)||  \n|[CMFCBaseTabCtrl::IsDialogControl](#cmfcbasetabctrl__isdialogcontrol)||  \n|[CMFCBaseTabCtrl::IsDrawNoPrefix](#cmfcbasetabctrl__isdrawnoprefix)||  \n|[CMFCBaseTabCtrl::IsFlatFrame](#cmfcbasetabctrl__isflatframe)|Returns a value that indicates whether the frame for the tab area is flat or 3D.|  \n|[CMFCBaseTabCtrl::IsFlatTab](#cmfcbasetabctrl__isflattab)||  \n|[CMFCBaseTabCtrl::IsHideSingleTab](#cmfcbasetabctrl__ishidesingletab)|Returns a value that indicates whether the tab control is configured to hide a tab, but only if a tabbed window has just one visible tab.|  \n|[CMFCBaseTabCtrl::IsIconAdded](#cmfcbasetabctrl__isiconadded)||  \n|[CMFCBaseTabCtrl::IsInPlaceEdit](#cmfcbasetabctrl__isinplaceedit)|Indicates whether users can modify the label on a tab.|  \n|[CMFCBaseTabCtrl::IsLeftRightRounded](#cmfcbasetabctrl__isleftrightrounded)||  \n|[CMFCBaseTabCtrl::IsMDITab](#cmfcbasetabctrl__ismditab)||  \n|[CMFCBaseTabCtrl::IsOneNoteStyle](#cmfcbasetabctrl__isonenotestyle)|Indicates whether a tabbed window displays tabs in Microsoft OneNote style.|  \n|[CMFCBaseTabCtrl::IsPtInTabArea](#cmfcbasetabctrl__isptintabarea)|Checks whether a specified point exists in the tab area.|  \n|[CMFCBaseTabCtrl::IsTabCloseButtonHighlighted](#cmfcbasetabctrl__istabclosebuttonhighlighted)||  \n|[CMFCBaseTabCtrl::IsTabCloseButtonPressed](#cmfcbasetabctrl__istabclosebuttonpressed)||  \n|[CMFCBaseTabCtrl::IsTabDetachable](#cmfcbasetabctrl__istabdetachable)|Indicates whether a tab is detachable.|  \n|[CMFCBaseTabCtrl::IsTabIconOnly](#cmfcbasetabctrl__istabicononly)|Indicates whether tabs display icons but not labels.|  \n|[CMFCBaseTabCtrl::IsTabSwapEnabled](#cmfcbasetabctrl__istabswapenabled)|Indicates whether the user can change tab positions by dragging tabs.|  \n|[CMFCBaseTabCtrl::IsTabVisible](#cmfcbasetabctrl__istabvisible)|Indicates whether a specified tab is visible.|  \n|[CMFCBaseTabCtrl::IsVS2005Style](#cmfcbasetabctrl__isvs2005style)||  \n|[CMFCBaseTabCtrl::MoveTab](#cmfcbasetabctrl__movetab)||  \n|[CMFCBaseTabCtrl::OnChangeTabs](#cmfcbasetabctrl__onchangetabs)|Called by the framework when the number of tabs changes.|  \n|[CMFCBaseTabCtrl::OnDragEnter](#cmfcbasetabctrl__ondragenter)||  \n|[CMFCBaseTabCtrl::OnDragLeave](#cmfcbasetabctrl__ondragleave)||  \n|[CMFCBaseTabCtrl::OnDragOver](#cmfcbasetabctrl__ondragover)||  \n|[CMFCBaseTabCtrl::OnDrop](#cmfcbasetabctrl__ondrop)||  \n|[CMFCBaseTabCtrl::OnRenameTab](#cmfcbasetabctrl__onrenametab)||  \n|[CMFCBaseTabCtrl::PreTranslateMessage](#cmfcbasetabctrl__pretranslatemessage)|Used by class [CWinApp](../../mfc/reference/cwinapp-class.md) to translate window messages before they are dispatched to the [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934) Windows functions. (Overrides [CWnd::PreTranslateMessage](../../mfc/reference/cwnd-class.md#cwnd__pretranslatemessage).)|  \n|[CMFCBaseTabCtrl::RecalcLayout](#cmfcbasetabctrl__recalclayout)|Recalculates the internal layout of a tabbed window.|  \n|[CMFCBaseTabCtrl::RemoveAllTabs](#cmfcbasetabctrl__removealltabs)|Removes all tabs from the tabbed window.|  \n|[CMFCBaseTabCtrl::RemoveTab](#cmfcbasetabctrl__removetab)|Removes a tab from a tabbed window.|  \n|[CMFCBaseTabCtrl::RenameTab](#cmfcbasetabctrl__renametab)||  \n|[CMFCBaseTabCtrl::ResetImageList](#cmfcbasetabctrl__resetimagelist)|Resets the image list that is attached to a tabbed window.|  \n|[CMFCBaseTabCtrl::Serialize](#cmfcbasetabctrl__serialize)|Reads or writes this object from or to an archive. (Overrides [CObject::Serialize](../../mfc/reference/cobject-class.md#cobject__serialize).)|  \n|[CMFCBaseTabCtrl::SetActiveTab](#cmfcbasetabctrl__setactivetab)|Activates a tab.|  \n|[CMFCBaseTabCtrl::SetActiveTabColor](#cmfcbasetabctrl__setactivetabcolor)|Sets the background color for the currently active tab.|  \n|[CMFCBaseTabCtrl::SetActiveTabTextColor](#cmfcbasetabctrl__setactivetabtextcolor)|Sets the text color for active tabs.|  \n|[CMFCBaseTabCtrl::SetAutoColors](#cmfcbasetabctrl__setautocolors)|Sets the tab control colors that are applied in automatic color mode.|  \n|[CMFCBaseTabCtrl::SetDockingBarWrapperRTC](#cmfcbasetabctrl__setdockingbarwrapperrtc)|Sets the wrapper class that is used for any objects that are not derived from the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md).|  \n|[CMFCBaseTabCtrl::SetDrawNoPrefix](#cmfcbasetabctrl__setdrawnoprefix)|Enables and disables the processing of prefix characters when tab labels are drawn.|  \n|[CMFCBaseTabCtrl::SetImageList](#cmfcbasetabctrl__setimagelist)|Sets the icon image list.|  \n|[CMFCBaseTabCtrl::SetLocation](#cmfcbasetabctrl__setlocation)||  \n|[CMFCBaseTabCtrl::SetTabBkColor](#cmfcbasetabctrl__settabbkcolor)|Sets the background color for a specified tab.|  \n|[CMFCBaseTabCtrl::SetTabBorderSize](#cmfcbasetabctrl__settabbordersize)|Sets a new tab border size.|  \n|[CMFCBaseTabCtrl::SetTabHicon](#cmfcbasetabctrl__settabhicon)|Sets a tab icon.|  \n|[CMFCBaseTabCtrl::SetTabIcon](#cmfcbasetabctrl__settabicon)|Sets a tab icon ID.|  \n|[CMFCBaseTabCtrl::SetTabIconOnly](#cmfcbasetabctrl__settabicononly)|Enables and disables the \"icon only\" mode for a specified tab.|  \n|[CMFCBaseTabCtrl::SetTabLabel](#cmfcbasetabctrl__settablabel)|Sets a tab label equal to a specified string value.|  \n|[CMFCBaseTabCtrl::SetTabsHeight](#cmfcbasetabctrl__settabsheight)||  \n|[CMFCBaseTabCtrl::SetTabTextColor](#cmfcbasetabctrl__settabtextcolor)|Sets the text color for a specified tab.|  \n|[CMFCBaseTabCtrl::SetTabsOrder](#cmfcbasetabctrl__settabsorder)|Arranges tabs in the specified order.|  \n|[CMFCBaseTabCtrl::ShowTab](#cmfcbasetabctrl__showtab)|Shows or hides the specified tab.|  \n|[CMFCBaseTabCtrl::StartRenameTab](#cmfcbasetabctrl__startrenametab)||  \n|[CMFCBaseTabCtrl::SwapTabs](#cmfcbasetabctrl__swaptabs)||  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCBaseTabCtrl::CreateWrapper](#cmfcbasetabctrl__createwrapper)|Creates a wrapper for an object derived from [CWnd](../../mfc/reference/cwnd-class.md) that is not derived from `CDockablePane`. To dock a `CMFCBaseTabCtrl` object, every embedded control must either have a docking wrapper or be derived from `CDockablePane`.<br /><br /> You set the class of the wrapper by using `SetDockingBayWrapperRTC`.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCBaseTabCtrl::m_bActivateTabOnRightClick](#cmfcbasetabctrl__m_bactivatetabonrightclick)|Specifies whether tabs are selected by using a left mouse click or a right mouse click.|  \n|[CMFCBaseTabCtrl::m_bAutoDestroyWindow](#cmfcbasetabctrl__m_bautodestroywindow)|Specifies whether the panes that are contained in the tabs are destroyed automatically.|  \n  \n## Remarks  \n The `CMFCBaseTabCtrl` class is an abstract class. Therefore, it cannot be instantiated. To create a tabbed window, you must derive a class from `CMFCBaseTabCtrl`. The MFC library contains some derived class examples, two of which are [CMFCTabCtrl Class](../../mfc/reference/cmfctabctrl-class.md) and [CMFCOutlookBarTabCtrl Class](../../mfc/reference/cmfcoutlookbartabctrl-class.md).  \n  \n Starting with [!INCLUDE[vs_dev14](../../ide/includes/vs_dev14_md.md)], this class supports Microsoft Active Accessibility.  \n  \n## Customization Tips  \n The following tips pertain to the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md) and any classes that inherit from it:  \n  \n-   If you enable detachable tabs, do not keep pointers to the tabbed windows. These detachable tabs can be created and destroyed dynamically. Therefore, pointers can become invalid.  \n  \n-   You can configure the tab control so that users can move tabs dynamically on a tab control by using the mouse. This functionality is built into the `CMFCBaseTabCtrl` class. To enable it, call [CMFCBaseTabCtrl::EnableTabSwap](#cmfcbasetabctrl__enabletabswap).  \n  \n-   By default, tabs are detachable when you add them to a tab control. You can also add non-detachable tabs by using [CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab). If you set the parameter `bDetachable` to `FALSE`, the tab will not be detachable. You can also change whether tabs are detachable by calling the method [CMFCBaseTabCtrl::EnableTabDetach](#cmfcbasetabctrl__enabletabdetach).  \n  \n-   Objects that are derived from the [CWnd Class](../../mfc/reference/cwnd-class.md) can be put on a dockable control bar or dockable tab. For the whole control to be docked, you must make the `CWnd` object dockable. To accomplish this, MFC uses a wrapper class. This wrapper class is the [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md). Any `CWnd` objects that are added to a dockable control bar or dockable tab will be wrapped inside a `CDockablePaneAdapter` object. You can disable the automatic wrapping by setting the parameter `m_bEnableWrapping` of your `CMFCBaseTablCtrl` object to `FALSE`. You can also change the class that your application will use as a wrapper by using the method [CMFCBaseTabCtrl::SetDockingBarWrapperRTC](#cmfcbasetabctrl__setdockingbarwrapperrtc).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CMFCBaseTabCtrl](../../mfc/reference/cmfcbasetabctrl-class.md)  \n  \n## Requirements  \n **Header:** afxbasetabctrl.h  \n  \n##  <a name=\"cmfcbasetabctrl__addicon\"></a>  CMFCBaseTabCtrl::AddIcon  \n Adds an icon to the list of icons in the protected `CMap``m_mapAddedIcons` member.  \n  \n```  \nvoid AddIcon(\n    HICON hIcon,  \n    int iIcon);\n```  \n  \n### Parameters  \n [in] `hIcon`  \n A handle to the icon to be added.  \n  \n [in] `iIcon`  \n Zero-based index of the icon in the protected `CImageList``m_Images` member.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__addtab\"></a>  CMFCBaseTabCtrl::AddTab  \n Adds a new tab to the tab control.  \n  \n```  \nvirtual void AddTab(\n    CWnd* pTabWnd,  \n    LPCTSTR lpszTabLabel,  \n    UINT uiImageId = (UINT)-1,,  \n    BOOL bDetachable = TRUE);\n\n \nvirtual void AddTab(\n    CWnd* pTabWnd,  \n    UINT uiResTabLabel,  \n    UINT uiImageId = (UINT)-1,  \n    BOOL bDetachable = TRUE);\n```  \n  \n### Parameters  \n [in] `pTabWnd`  \n A pointer to the window that this method represents as a new tab.  \n  \n [in] `lpszTabLabel`  \n A string that contains the label for the new tab.  \n  \n [in] `uiImageId`  \n An image ID from the image list. The tab control uses this image as the icon for the new tab.  \n  \n [in] `uiResTabLabel`  \n The resource ID for the label.  \n  \n [in] `bDetachable`  \n A Boolean parameter that determines whether the new tab is detachable.  \n  \n### Remarks  \n If `pTabWnd` points to an object that is not derived from the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md) and if `bDetachable` is `TRUE`, the framework automatically creates a wrapper for the `pTabWnd` object. The wrapper makes the `pTabWnd` object detachable. By default, the wrapper is an instance of the [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md). If the functionality offered by the default wrapper is unacceptable, use the [CMFCBaseTabCtrl::SetDockingBarWrapperRTC](#cmfcbasetabctrl__setdockingbarwrapperrtc) method to specify a different wrapper.  \n  \n##  <a name=\"cmfcbasetabctrl__applyrestoredtabinfo\"></a>  CMFCBaseTabCtrl::ApplyRestoredTabInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void ApplyRestoredTabInfo(BOOL bUseTabIndexes = FALSE);\n```  \n  \n### Parameters  \n [in] `bUseTabIndexes`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__autodestroywindow\"></a>  CMFCBaseTabCtrl::AutoDestroyWindow  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid AutoDestroyWindow(BOOL bAutoDestroy = TRUE);\n```  \n  \n### Parameters  \n [in] `bAutoDestroy`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__calcrectedit\"></a>  CMFCBaseTabCtrl::CalcRectEdit  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void CalcRectEdit(CRect& rectEdit);\n```  \n  \n### Parameters  \n [in] `rectEdit`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__cleanup\"></a>  CMFCBaseTabCtrl::CleanUp  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void CleanUp();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__clearimagelist\"></a>  CMFCBaseTabCtrl::ClearImageList  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void ClearImageList();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__createwrapper\"></a>  CMFCBaseTabCtrl::CreateWrapper  \n Creates a wrapper for a frame window that is derived from the [CWnd Class](../../mfc/reference/cwnd-class.md) but is not derived from the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md).  \n  \n```  \nvirtual CWnd* CreateWrapper(\n    CWnd* pWndToWrap,  \n    LPCTSTR lpszTabLabel,  \n    BOOL bDetachable);\n```  \n  \n### Parameters  \n [in] `pWndToWrap`  \n A pointer to the frame window that is wrapped.  \n  \n [in] `lpszTabLabel`  \n A string that contains the label for the window.  \n  \n [in] `bDetachable`  \n A Boolean parameter that indicates whether the window is detachable.  \n  \n### Return Value  \n A pointer to wrapper derived from the `CDockablePane` class if `CreateWrapper` successfully creates a wrapper class for `pWndToWrap`. If the method fails, it retruns `pWndToWrap`.  \n  \n### Remarks  \n A tabbed window can dock any object derived from `CWnd`. However, in order for a [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md) object to be dockable, each object on the `CMFCBaseTabCtrl` must be detachable. Therefore, `CMFCBaseTabCtrl` automatically wraps any objects that are not derived from `CDockablePane`.  \n  \n By default, the `CMFCBaseTabCtrl` creates instances of the [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md). To change the wrapper's default class, call [CMFCBaseTabCtrl::SetDockingBarWrapperRTC](#cmfcbasetabctrl__setdockingbarwrapperrtc).  \n  \n If `pWndToWrap` is derived from `CDockablePane`, this method will not create a wrapper. Instead, it will fail and return `pWndToWrap`.  \n  \n##  <a name=\"cmfcbasetabctrl__detachtab\"></a>  CMFCBaseTabCtrl::DetachTab  \n The framework calls this method to detach a tab from the tab control.  \n  \n```  \nvirtual BOOL DetachTab(\n    AFX_DOCK_METHOD dockMethod,  \n    int nTabNum = -1,  \n    BOOL bHide = FALSE);\n```  \n  \n### Parameters  \n [in] `dockMethod`  \n An enumerated data type provided by the [CBasePane Class](../../mfc/reference/cbasepane-class.md). This data type specifies the method that was used to detach the tab.  \n  \n [in] `nTabNum`  \n The zero-based index of the tab to be detached.  \n  \n [in] `bHide`  \n A Boolean parameter that indicates whether the framework should hide the detached tab.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n If the tab specified by `nTabNum` is non-detachable, this function fails and returns `FALSE`.  \n  \n##  <a name=\"cmfcbasetabctrl__enableactivatelastactive\"></a>  CMFCBaseTabCtrl::EnableActivateLastActive  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid EnableActivateLastActive(BOOL bLastActive = TRUE);\n```  \n  \n### Parameters  \n [in] `bLastActive`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__enableautocolor\"></a>  CMFCBaseTabCtrl::EnableAutoColor  \n Controls whether the framework uses the automatic background colors when drawing a tab.  \n  \n```  \nvoid EnableAutoColor(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n A Boolean parameter that determines whether the framework uses automatic colors.  \n  \n### Remarks  \n A tab control has an array of several predefined colors. When the framework uses automatic colors, each tab in a series of tabs is assigned the next color from this array.  \n  \n By default, the automatic colors are determined by the library-defined colors. You can provide a custom array of colors by calling [CMFCBaseTabCtrl::SetAutoColors](#cmfcbasetabctrl__setautocolors).  \n  \n##  <a name=\"cmfcbasetabctrl__enablecustomtooltips\"></a>  CMFCBaseTabCtrl::EnableCustomToolTips  \n Enables custom tooltips for the tab control.  \n  \n```  \nBOOL EnableCustomToolTips(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n A Boolean that determines whether to use custom tooltips.  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`.  \n  \n### Remarks  \n If custom tooltips are enabled, the tab control sends the `AFX_WM_ON_GET_TAB_TOOLTIP` message to the main frame. If you want to support custom tooltips in your application, the main frame window must handle this method and provide the custom tooltip text. For more information about providing custom tooltip text, see [CMFCTabToolTipInfo Structure](../../mfc/reference/cmfctabtooltipinfo-structure.md).  \n  \n##  <a name=\"cmfcbasetabctrl__enableinplaceedit\"></a>  CMFCBaseTabCtrl::EnableInPlaceEdit  \n Enables direct editing of the tab labels by the user.  \n  \n```  \nvirtual void EnableInPlaceEdit(BOOL bEnable) = 0;  \n```  \n  \n### Parameters  \n [in] `bEnable`  \n A Boolean parameter that specifies whether to enable direct editing of the tab labels.  \n  \n### Remarks  \n By default, direct editing of the tab labels is disabled for tab controls.  \n  \n You can enable direct editing for a subset of the tabs on the tab control. To do this, override the method `CMFCBaseTabCtrl::StartRenameTab`. `StartRenameTab` should return a nonzero value for all tabs that support direct editing of tab labels.  \n  \n In the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md), this method is a pure virtual function and has no implementation. If you derive a class from `CMFCBaseTabCtrl`, you must implement this function.  \n  \n##  <a name=\"cmfcbasetabctrl__enabletabdetach\"></a>  CMFCBaseTabCtrl::EnableTabDetach  \n Enables detachable tabs.  \n  \n```  \nvirtual BOOL EnableTabDetach(\n    int iTab,  \n    BOOL bEnable);\n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of a tab.  \n  \n [in] `bEnable`  \n A Boolean that indicates whether to make the tab detachable.  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasetabctrl__enabletabswap\"></a>  CMFCBaseTabCtrl::EnableTabSwap  \n Enables the user to change the tab order using a mouse.  \n  \n```  \nvoid EnableTabSwap(BOOL bEnable);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n A Boolean that indicates whether to enable tab swapping.  \n  \n### Remarks  \n When tab swapping is enabled, the user can drag a tab and change its relative position in the tab control.  \n  \n##  <a name=\"cmfcbasetabctrl__ensurevisible\"></a>  CMFCBaseTabCtrl::EnsureVisible  \n Scrolls the tabs until the specified tab is visible.  \n  \n```  \nvirtual BOOL EnsureVisible(int iTab);\n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of a tab.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This method has no effect if the tab indicated by `iTab` is already visible.  \n  \n By default, this method is not supported by the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md). You should implement this function in a custom class derived from `CMFCBaseTabCtrl` if that custom tab control supports tab scrolling. This method is supported by the [CMFCTabCtrl Class](../../mfc/reference/cmfctabctrl-class.md).  \n  \n##  <a name=\"cmfcbasetabctrl__enterdragmode\"></a>  CMFCBaseTabCtrl::EnterDragMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid EnterDragMode();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__findtargetwnd\"></a>  CMFCBaseTabCtrl::FindTargetWnd  \n Identifies the pane that contains a specified point.  \n  \n```  \nvirtual CWnd* FindTargetWnd(const CPoint& pt) = 0;  \n```  \n  \n### Parameters  \n [in] `pt`  \n A point that is defined by using client-area coordinates of the [CMFCBaseTabCtrl](../../mfc/reference/cmfcbasetabctrl-class.md) object.  \n  \n### Return Value  \n A pointer to a [CWnd](../../mfc/reference/cwnd-class.md) object if successful; otherwise `NULL`.  \n  \n### Remarks  \n In the `CMFCBaseTabCtrl` class, this method is a pure virtual function: you must implement it if you derive a class from `CMFCBaseTabCtrl`.  \n  \n##  <a name=\"cmfcbasetabctrl__firechangeactivetab\"></a>  CMFCBaseTabCtrl::FireChangeActiveTab  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void FireChangeActiveTab(int nNewTab);\n```  \n  \n### Parameters  \n [in] `nNewTab`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__firechangingactivetab\"></a>  CMFCBaseTabCtrl::FireChangingActiveTab  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL FireChangingActiveTab(int nNewTab);\n```  \n  \n### Parameters  \n [in] `nNewTab`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__getactivetab\"></a>  CMFCBaseTabCtrl::GetActiveTab  \n Retrieves the index of the currently active tab.  \n  \n```  \nvirtual int GetActiveTab() const;\n\n \n```  \n  \n### Return Value  \n The zero-based index of the active tab; -1 if there is no active tab.  \n  \n##  <a name=\"cmfcbasetabctrl__getactivetabcolor\"></a>  CMFCBaseTabCtrl::GetActiveTabColor  \n Retrieves the background color of the currently active tab.  \n  \n```  \nvirtual COLORREF GetActiveTabColor() const;\n\n \n```  \n  \n### Return Value  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value that specifies the background color of the active tab.  \n  \n### Remarks  \n By default, the background color of the active tab is `COLOR_WINDOW`. You can change the background color for the active tab by using the method [CMFCBaseTabCtrl::SetActiveTabColor](#cmfcbasetabctrl__setactivetabcolor).  \n  \n##  <a name=\"cmfcbasetabctrl__getactivetabtextcolor\"></a>  CMFCBaseTabCtrl::GetActiveTabTextColor  \n Retrieves the text color for the active tab.  \n  \n```  \nvirtual COLORREF GetActiveTabTextColor() const;\n\n \n```  \n  \n### Return Value  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value that specifies the text color of the active tab.  \n  \n### Remarks  \n By default, the text color for active tabs is `COLOR_WINDOWTEXT`. You can change the text color with the method [CMFCBaseTabCtrl::SetActiveTabTextColor](#cmfcbasetabctrl__setactivetabtextcolor).  \n  \n##  <a name=\"cmfcbasetabctrl__getactivewnd\"></a>  CMFCBaseTabCtrl::GetActiveWnd  \n Retrieves a pointer to the currently active tab window.  \n  \n```  \nvirtual CWnd* GetActiveWnd() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a window.  \n  \n##  <a name=\"cmfcbasetabctrl__getautocolors\"></a>  CMFCBaseTabCtrl::GetAutoColors  \n Retrieves the array of colors used for automatic coloring.  \n  \n```  \nconst CArray<COLORREF,COLORREF>& GetAutoColors() const;\n\n \n```  \n  \n### Return Value  \n A reference to an array of [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) values that the [CMFCBaseTabCtrl](../../mfc/reference/cmfcbasetabctrl-class.md) object uses for automatic tab coloring.  \n  \n### Remarks  \n By default, the framework initializes the array of colors to library-defined colors. You can provide a custom array of colors by calling the method [CMFCBaseTabCtrl::SetAutoColors](#cmfcbasetabctrl__setautocolors).  \n  \n##  <a name=\"cmfcbasetabctrl__getfirstvisibletab\"></a>  CMFCBaseTabCtrl::GetFirstVisibleTab  \n Retrieves a pointer to the first visible tab.  \n  \n```  \nvirtual CWnd* GetFirstVisibleTab(\n    int& iTabNum);\n\n \nvirtual CWnd* GetFirstVisibleTab(\n    int iStartFrom,  \n    int& iTabNum);\n```  \n  \n### Parameters  \n [out] `iTabNum`  \n A reference to an integer. This method writes the zero-based index of the first visible tab to this parameter.  \n  \n [in] `iStartFrom`  \n The zero-based index of the first tab to check.  \n  \n### Return Value  \n A pointer to the first visible tab if successful; otherwise `NULL`.  \n  \n### Remarks  \n If this method fails, it writes the value -1 to `iStartFrom`.  \n  \n If `iStartFrom` is larger than or equal to the number of tabs in the tab control, `GetFirstVisibleTab` automatically fails.  \n  \n##  <a name=\"cmfcbasetabctrl__getfirstvisibletabnum\"></a>  CMFCBaseTabCtrl::GetFirstVisibleTabNum  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetFirstVisibleTabNum() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__gethighlightedtab\"></a>  CMFCBaseTabCtrl::GetHighlightedTab  \n Retrieves the index of the currently highlighted tab.  \n  \n```  \nint GetHighlightedTab() const;\n\n \n```  \n  \n### Return Value  \n The zero-based index of the highlighted tab.  \n  \n##  <a name=\"cmfcbasetabctrl__getimagelist\"></a>  CMFCBaseTabCtrl::GetImageList  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual const CImageList* GetImageList() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__getimagesize\"></a>  CMFCBaseTabCtrl::GetImageSize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CSize GetImageSize() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__getlastvisibletab\"></a>  CMFCBaseTabCtrl::GetLastVisibleTab  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CWnd* GetLastVisibleTab(int& iTabNum);\n```  \n  \n### Parameters  \n [in] `iTabNum`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__getlocation\"></a>  CMFCBaseTabCtrl::GetLocation  \n Retrieves the location of the tab area portion of the tab control.  \n  \n```  \nLocation GetLocation() const;\n\n \n```  \n  \n### Return Value  \n The location of the tab area.  \n  \n### Remarks  \n Possible tab area location values are `LOCATION_BOTTOM` and `LOCATION_TOP`.  \n  \n##  <a name=\"cmfcbasetabctrl__getmaxwindowsize\"></a>  CMFCBaseTabCtrl::GetMaxWindowSize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CSize GetMaxWindowSize() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__gettabarea\"></a>  CMFCBaseTabCtrl::GetTabArea  \n Retrieves the size and position of the tab area of the tab control.  \n  \n```  \nvirtual void GetTabArea(\n    CRect& rectTabAreaTop,  \n    CRect& rectTabAreaBottom) const = 0;  \n```  \n  \n### Parameters  \n [in] `rectTabAreaTop`  \n A reference to a `CRect` object. `GetTabArea` uses this object to store the size and position of the top tab area.  \n  \n [in] `rectTabAreaBottom`  \n A reference to a `CRect` object. `GetTabArea` uses this object to store the size and position of the bottom tab area.  \n  \n### Remarks  \n After `GetTabArea` returns, the `CRect` parameters contain the size and position of the tab area in client coordinates of the tab control. If there is no tab area at the top or bottom of the tab control, `rectTabAreaTop` or `rectTabAreaBottom` are empty.  \n  \n In the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md), this method is a pure virtual function and has no implementation. If you derive a class from `CMFCBaseTabCtrl`, you have to implement this function.  \n  \n##  <a name=\"cmfcbasetabctrl__gettabbkcolor\"></a>  CMFCBaseTabCtrl::GetTabBkColor  \n Retrieves the background color of the specified tab.  \n  \n```  \nvirtual COLORREF GetTabBkColor(int iTab) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab.  \n  \n### Return Value  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) value that indicates the background color of the specified tab; -1 if `iTab` is out of range.  \n  \n##  <a name=\"cmfcbasetabctrl__gettabbordersize\"></a>  CMFCBaseTabCtrl::GetTabBorderSize  \n Retrieves the size of the tab borders in the tab control.  \n  \n```  \nvirtual int GetTabBorderSize() const;\n\n \n```  \n  \n### Return Value  \n The size of the tab border, in pixels.  \n  \n### Remarks  \n The default size for the tab border is three pixels. You can change this border size with the method [CMFCBaseTabCtrl::SetTabBorderSize](#cmfcbasetabctrl__settabbordersize).  \n  \n##  <a name=\"cmfcbasetabctrl__gettabbyid\"></a>  CMFCBaseTabCtrl::GetTabByID  \n Retrieves the index of a tab based on a tab ID.  \n  \n```  \nvirtual int GetTabByID(int id) const;\n\n \n```  \n  \n### Parameters  \n [in] `id`  \n A tab ID.  \n  \n### Return Value  \n The zero-based index of a tab if it is found; -1 if the tab ID is not found.  \n  \n### Remarks  \n The tab IDs are assigned automatically when tabs are added to a tab control.  \n  \n##  <a name=\"cmfcbasetabctrl__gettabclosebutton\"></a>  CMFCBaseTabCtrl::GetTabCloseButton  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCRect GetTabCloseButton() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__gettabfromhwnd\"></a>  CMFCBaseTabCtrl::GetTabFromHwnd  \n Retrieves the index of the tab that contains the specified HWND object.  \n  \n```  \nvirtual int GetTabFromHwnd(HWND hwnd) const;\n\n \n```  \n  \n### Parameters  \n [in] `hwnd`  \n A handle to a window.  \n  \n### Return Value  \n The zero-based index of the tab if successful; -1 if no tab contains `hwnd`.  \n  \n##  <a name=\"cmfcbasetabctrl__gettabfrompoint\"></a>  CMFCBaseTabCtrl::GetTabFromPoint  \n Retrieves the tab that contains a specified point.  \n  \n```  \nvirtual int GetTabFromPoint(CPoint& pt) const;\n\n \n```  \n  \n### Parameters  \n [in] `pt`  \n A point in client coordinates of the tab control.  \n  \n### Return Value  \n The index of the tab that contains `pt`; -1 if no tab contains `pt`.  \n  \n##  <a name=\"cmfcbasetabctrl__gettabfullwidth\"></a>  CMFCBaseTabCtrl::GetTabFullWidth  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetTabFullWidth(int iTab) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__gettabhicon\"></a>  CMFCBaseTabCtrl::GetTabHicon  \n Returns the HICON associated with the specified tab.  \n  \n```  \nvirtual HICON GetTabHicon(int iTab) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index for the tab.  \n  \n### Return Value  \n The HICON associated with a tab label if successful; `NULL` if there is no HICON or if the method fails.  \n  \n##  <a name=\"cmfcbasetabctrl__gettabicon\"></a>  CMFCBaseTabCtrl::GetTabIcon  \n Retrieves the icon associated with the specified tab.  \n  \n```  \nvirtual UINT GetTabIcon(int iTab) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab.  \n  \n### Return Value  \n The icon ID for the specified tab if successful; -1 if the index is invalid.  \n  \n### Remarks  \n The [CMFCBaseTabCtrl](../../mfc/reference/cmfcbasetabctrl-class.md) object stores the icons in the internal [CImageList](../../mfc/reference/cimagelist-class.md) object.  \n  \n##  <a name=\"cmfcbasetabctrl__gettabid\"></a>  CMFCBaseTabCtrl::GetTabID  \n Retrieves the ID for a tab specified by the tab index.  \n  \n```  \nint GetTabID(int iTab) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab.  \n  \n### Return Value  \n An ID of the tab or -1 if `iTab` is out of range.  \n  \n##  <a name=\"cmfcbasetabctrl__gettablabel\"></a>  CMFCBaseTabCtrl::GetTabLabel  \n Retrieves the text of a tab label.  \n  \n```  \nvirtual BOOL GetTabLabel(\n    int iTab,  \n    CString& strLabel) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab.  \n  \n [out] `strLabel`  \n A reference to a `CString` object. This method stores the label of the tab in this parameter.  \n  \n### Return Value  \n `TRUE` if successful; `FALSE` otherwise.  \n  \n### Remarks  \n This method fails if the index `iTab` is invalid.  \n  \n You set the label for a tab when you create the tab by using [CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab). You can also change the label after creation with the method [CMFCBaseTabCtrl::SetTabLabel](#cmfcbasetabctrl__settablabel).  \n  \n##  <a name=\"cmfcbasetabctrl__gettabrect\"></a>  CMFCBaseTabCtrl::GetTabRect  \n Retrieves the size and position of the specified tab.  \n  \n```  \nvirtual BOOL GetTabRect(\n    int iTab,  \n    CRect& rect) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab.  \n  \n [out] `rect`  \n A reference to a `CRect` object. This method stores the size and position of the tab in this parameter.  \n  \n### Return Value  \n `TRUE` if successful; `FALSE` if the tab index is invalid.  \n  \n##  <a name=\"cmfcbasetabctrl__gettabsheight\"></a>  CMFCBaseTabCtrl::GetTabsHeight  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual int GetTabsHeight() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__gettabsnum\"></a>  CMFCBaseTabCtrl::GetTabsNum  \n Retrieves the number of tabs in the tab control.  \n  \n```  \nvirtual int GetTabsNum() const;\n\n \n```  \n  \n### Return Value  \n The number of tabs in the tab control.  \n  \n##  <a name=\"cmfcbasetabctrl__gettabsrect\"></a>  CMFCBaseTabCtrl::GetTabsRect  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void GetTabsRect(CRect& rect) const;\n\n \n```  \n  \n### Parameters  \n [in] `rect`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__gettabtextcolor\"></a>  CMFCBaseTabCtrl::GetTabTextColor  \n Retrieves the text color for the specified tab.  \n  \n```  \nvirtual COLORREF GetTabTextColor(int iTab) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab.  \n  \n### Return Value  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the text color of the specified tab; -1 if `iTab` is out of range.  \n  \n##  <a name=\"cmfcbasetabctrl__gettabwnd\"></a>  CMFCBaseTabCtrl::GetTabWnd  \n Returns the pointer to the pane that resides on the specified tab.  \n  \n```  \nvirtual CWnd* GetTabWnd(int iTab) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of a tab.  \n  \n### Return Value  \n A pointer to the [CWnd](../../mfc/reference/cwnd-class.md) object that resides on the tab that `iTab` specifies. `NULL` if `iTab` is invalid.  \n  \n### Remarks  \n The returned object is the one that the application added when it called either [CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab) or [CMFCBaseTabCtrl::InsertTab](#cmfcbasetabctrl__inserttab).  \n  \n If the object on a tab has a wrapper, this method will return the wrapper for the object. For more information about wrappers, see [CMFCBaseTabCtrl::CreateWrapper](#cmfcbasetabctrl__createwrapper). If you want to access a pointer to the direct object without the wrapper, use the method [CMFCBaseTabCtrl::GetTabWndNoWrapper](#cmfcbasetabctrl__gettabwndnowrapper).  \n  \n##  <a name=\"cmfcbasetabctrl__gettabwndnowrapper\"></a>  CMFCBaseTabCtrl::GetTabWndNoWrapper  \n Returns a pointer to the control that resides on a tab, even if the control has a wrapper.  \n  \n```  \nvirtual CWnd* GetTabWndNoWrapper(int iTab) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of a tab.  \n  \n### Return Value  \n A pointer to the [CWnd](../../mfc/reference/cwnd-class.md) object that resides on the specified tab; `NULL` if `iTab` is invalid.  \n  \n### Remarks  \n This method retrieves a direct pointer to the `CWnd` object that you added by using either the method [CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab) or [CMFCBaseTabCtrl::InsertTab](#cmfcbasetabctrl__inserttab). `GetTabWndNoWrapper` will retrieve a pointer to the added `CWnd`, even if the framework added a wrapper for the object. For more information about wrappers and the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md), see [CMFCBaseTabCtrl::CreateWrapper](#cmfcbasetabctrl__createwrapper).  \n  \n Use the method [CMFCBaseTabCtrl::GetTabWnd](#cmfcbasetabctrl__gettabwnd) if you do not want to ignore the wrapper class.  \n  \n##  <a name=\"cmfcbasetabctrl__gettooltipctrl\"></a>  CMFCBaseTabCtrl::GetToolTipCtrl  \n Retrieves a reference to the tooltip contorl.  \n  \n```  \nCToolTipCtrl& GetToolTipCtrl() const;\n\n \n```  \n  \n### Return Value  \n A reference to the tooltip control.  \n  \n##  <a name=\"cmfcbasetabctrl__getvisibletabsnum\"></a>  CMFCBaseTabCtrl::GetVisibleTabsNum  \n Retrieves the number of currently visible tabs.  \n  \n```  \nvirtual int GetVisibleTabsNum() const;\n\n \n```  \n  \n### Return Value  \n The number of visible tabs.  \n  \n##  <a name=\"cmfcbasetabctrl__hasimage\"></a>  CMFCBaseTabCtrl::HasImage  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL HasImage(int iTab) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__hidesingletab\"></a>  CMFCBaseTabCtrl::HideSingleTab  \n Sets the option to hide the tabs for the tab control when there is one visible tab.  \n  \n```  \nvirtual void HideSingleTab(BOOL bHide = TRUE);\n```  \n  \n### Parameters  \n [in] `bHide`  \n A Boolean that specifies whether to enable hiding single tabs.  \n  \n### Remarks  \n When your application is configured to hide single tabs, the framework automatically displays tabs when a second tab is added to the tab control.  \n  \n##  <a name=\"cmfcbasetabctrl__inserttab\"></a>  CMFCBaseTabCtrl::InsertTab  \n Inserts a tab into the tab control.  \n  \n```  \nVirtual void InsertTab(\n    CWnd* pNewWnd,  \n    LPCTSTR lpszTabLabel,  \n    int nInsertAt,  \n    UINT uiImageId = (UINT)-1,  \n    BOOL bDetachable = TRUE);\n\n \nvirtual void InsertTab(\n    CWnd* pNewWnd,  \n    UINT uiResTabLabel,  \n    int nInsertAt,  \n    UINT uiImageId = (UINT)-1,  \n    BOOL bDetachable = TRUE);\n```  \n  \n### Parameters  \n [in] `pNewWnd`  \n A pointer to the window that this method adds as a new tab.  \n  \n [in] `lpszTabLabel`  \n A string that contains the label for the new tab.  \n  \n [in] `nInsertAt`  \n The zero-based index of the new tab.  \n  \n [in] `uiImageId`  \n An image ID from the image list. The tab control uses this image as the icon for the new tab.  \n  \n [in] `bDetachable`  \n A Boolean parameter that determines whether the new tab is detachable.  \n  \n [in] `uiResTabLabel`  \n The resource ID for the label.  \n  \n### Remarks  \n If the object indicated by `pNewWnd` is not derived from the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md) and if the `bDetachable` parameter is `TRUE`, the framework creates a special wrapper for the new tab. By default, the wrapper is an instance of the [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md). Use the [CMFCBaseTabCtrl::SetDockingBarWrapperRTC](#cmfcbasetabctrl__setdockingbarwrapperrtc) method to create a different wrapper class. Any custom wrapper class needs to be derived from `CDockablePaneAdapter`.  \n  \n##  <a name=\"cmfcbasetabctrl__invalidatetab\"></a>  CMFCBaseTabCtrl::InvalidateTab  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid InvalidateTab(int iTab);\n```  \n  \n### Parameters  \n [in] `iTab`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__isactivetabclosebutton\"></a>  CMFCBaseTabCtrl::IsActiveTabCloseButton  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsActiveTabCloseButton() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__isautocolor\"></a>  CMFCBaseTabCtrl::IsAutoColor  \n Determines whether the tab control is in autocolor mode.  \n  \n```  \nBOOL IsAutoColor() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the tab control is in autocolor mode; `FALSE` otherwise.  \n  \n### Remarks  \n You can enable or disable the autocolor mode by using the [CMFCBaseTabCtrl::EnableAutoColor](#cmfcbasetabctrl__enableautocolor) method.  \n  \n##  <a name=\"cmfcbasetabctrl__isautodestroywindow\"></a>  CMFCBaseTabCtrl::IsAutoDestroyWindow  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsAutoDestroyWindow() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__iscolored\"></a>  CMFCBaseTabCtrl::IsColored  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsColored() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__isdialogcontrol\"></a>  CMFCBaseTabCtrl::IsDialogControl  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsDialogControl() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__isdrawnoprefix\"></a>  CMFCBaseTabCtrl::IsDrawNoPrefix  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsDrawNoPrefix() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__isflatframe\"></a>  CMFCBaseTabCtrl::IsFlatFrame  \n Indicates whether the frame of the tab control is rendered in a flat style or in a 3D style.  \n  \n```  \nvirtual BOOL IsFlatFrame() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the frame of the tab control is rendered in a flat style; `FALSE` if the frame is rendered in a 3D style.  \n  \n### Remarks  \n Use [CMFCTabCtrl::SetFlatFrame](../../mfc/reference/cmfctabctrl-class.md#cmfctabctrl__setflatframe) to change the style for the frame of the tab control.  \n  \n Tab controls that use the Outlook style cannot be rendered with flat frames. This includes the [CMFCOutlookBarTabCtrl Class](../../mfc/reference/cmfcoutlookbartabctrl-class.md) and any classes derived from that class.  \n  \n##  <a name=\"cmfcbasetabctrl__isflattab\"></a>  CMFCBaseTabCtrl::IsFlatTab  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsFlatTab() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__ishidesingletab\"></a>  CMFCBaseTabCtrl::IsHideSingleTab  \n Determines whether the tab control hides the tab label if there is only one tab.  \n  \n```  \nvirtual BOOL IsHideSingleTab() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the tab control hides the tab label when it has one tab; otherwise `FALSE`.  \n  \n### Remarks  \n Use the method [CMFCBaseTabCtrl::HideSingleTab](#cmfcbasetabctrl__hidesingletab) to enable hiding the tab label when there is only one tab.  \n  \n##  <a name=\"cmfcbasetabctrl__isiconadded\"></a>  CMFCBaseTabCtrl::IsIconAdded  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsIconAdded(\n    HICON hIcon,  \n    int& iIcon);\n```  \n  \n### Parameters  \n [in] `hIcon`  \n [in] `iIcon`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__isinplaceedit\"></a>  CMFCBaseTabCtrl::IsInPlaceEdit  \n Indicates whether the tab control is configured to enable the user to dynamically modify the tab labels.  \n  \n```  \nvirtual BOOL IsInPlaceEdit() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if in-place editing is enabled; otherwise 0.  \n  \n### Remarks  \n You can enable or disable in-place editing by calling the method [CMFCBaseTabCtrl::EnableInPlaceEdit](#cmfcbasetabctrl__enableinplaceedit).  \n  \n##  <a name=\"cmfcbasetabctrl__isleftrightrounded\"></a>  CMFCBaseTabCtrl::IsLeftRightRounded  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsLeftRightRounded() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__ismditab\"></a>  CMFCBaseTabCtrl::IsMDITab  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsMDITab() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__isonenotestyle\"></a>  CMFCBaseTabCtrl::IsOneNoteStyle  \n Determines whether tabs are displayed in the style of Microsoft OneNote.  \n  \n```  \nvirtual BOOL IsOneNoteStyle() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if tabs are displayed in the style of Microsoft OneNote; otherwise `FALSE`.  \n  \n### Remarks  \n Call the method [CMDIFrameWndEx::EnableMDITabs](../../mfc/reference/cmdiframewndex-class.md#cmdiframewndex__enablemditabs) to enable the Microsoft OneNote style. You can also enable this style when you instantiate the [CMFCTabCtrl Class](../../mfc/reference/cmfctabctrl-class.md): simply pass the style STYLE_3D_ONENOTE to the method [CMFCTabCtrl::Create](../../mfc/reference/cmfctabctrl-class.md#cmfctabctrl__create).  \n  \n By default, the Microsoft OneNote style is not supported in a custom class derived from the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md). However, it is supported in the `CMFCTabCtrl` class.  \n  \n##  <a name=\"cmfcbasetabctrl__isptintabarea\"></a>  CMFCBaseTabCtrl::IsPtInTabArea  \n Determines if a point is inside the tab area.  \n  \n```  \nvirtual BOOL IsPtInTabArea(CPoint point) const = 0;  \n```  \n  \n### Parameters  \n [in] `point`  \n The point to test.  \n  \n### Return Value  \n Nonzero if the point is in the tab area; 0 otherwise.  \n  \n### Remarks  \n In the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md), this method is a pure virtual function and has no implementation. If you derive a class from `CMFCBaseTabCtrl`, you have to implement this function.  \n  \n##  <a name=\"cmfcbasetabctrl__istabclosebuttonhighlighted\"></a>  CMFCBaseTabCtrl::IsTabCloseButtonHighlighted  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsTabCloseButtonHighlighted() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__istabclosebuttonpressed\"></a>  CMFCBaseTabCtrl::IsTabCloseButtonPressed  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsTabCloseButtonPressed() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__istabdetachable\"></a>  CMFCBaseTabCtrl::IsTabDetachable  \n Determines whether a tab is detachable.  \n  \n```  \nvirtual BOOL IsTabDetachable(int iTab) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab to check.  \n  \n### Return Value  \n `TRUE` if the tab is detachable; `FALSE` otherwise.  \n  \n### Remarks  \n To make a tab detachable, use the method [CMFCBaseTabCtrl::EnableTabDetach](#cmfcbasetabctrl__enabletabdetach).  \n  \n##  <a name=\"cmfcbasetabctrl__istabicononly\"></a>  CMFCBaseTabCtrl::IsTabIconOnly  \n Determines whether a tab label contains only icons and no text.  \n  \n```  \nvirtual BOOL IsTabIconOnly(int iTab) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab.  \n  \n### Return Value  \n `TRUE` if a tab label has only icons; `FALSE` otherwise.  \n  \n### Remarks  \n To set the tabs in your application to display only icons, call the method [CMFCBaseTabCtrl::SetTabIconOnly](#cmfcbasetabctrl__settabicononly).  \n  \n##  <a name=\"cmfcbasetabctrl__istabswapenabled\"></a>  CMFCBaseTabCtrl::IsTabSwapEnabled  \n Determines whether the tab control allows the user to change tab positions by using the mouse.  \n  \n```  \nBOOL IsTabSwapEnabled() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if tab positions can be changed by the user; otherwise 0.  \n  \n### Remarks  \n By default, users cannot change the order of tabs in a tab control. Use the [CMFCBaseTabCtrl::EnableTabSwap](#cmfcbasetabctrl__enabletabswap) method to enable this functionality.  \n  \n##  <a name=\"cmfcbasetabctrl__istabvisible\"></a>  CMFCBaseTabCtrl::IsTabVisible  \n Indicates whether the specified tab is visible.  \n  \n```  \nvirtual BOOL IsTabVisible(int iTab) const;\n\n \n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab to check.  \n  \n### Return Value  \n Nonzero if the specified tab is visible; otherwise 0.  \n  \n##  <a name=\"cmfcbasetabctrl__isvs2005style\"></a>  CMFCBaseTabCtrl::IsVS2005Style  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL IsVS2005Style() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__m_bactivatetabonrightclick\"></a>  CMFCBaseTabCtrl::m_bActivateTabOnRightClick  \n `m_bActivateTabOnRightClick` determines whether tabs are in focus when the user clicks on a tab label by using the right mouse button.  \n  \n```  \nBOOL m_bActivateTabOnRightClick;  \n```  \n  \n### Remarks  \n The default value for this data member is `FALSE`.  \n  \n##  <a name=\"cmfcbasetabctrl__m_bautodestroywindow\"></a>  CMFCBaseTabCtrl::m_bAutoDestroyWindow  \n `m_bAutoDestroyWindow` determines whether the framework automatically destroys the objects on tabs when the tabs are removed.  \n  \n```  \nBOOL m_bAutoDestroyWindow;  \n```  \n  \n### Remarks  \n By default, this member is `FALSE`.  \n  \n##  <a name=\"cmfcbasetabctrl__movetab\"></a>  CMFCBaseTabCtrl::MoveTab  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void MoveTab(\n    int nSource,  \n    int nDest);\n```  \n  \n### Parameters  \n [in] `nSource`  \n [in] `nDest`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__onchangetabs\"></a>  CMFCBaseTabCtrl::OnChangeTabs  \n The framework calls this method when the number of tabs on a tab control changes.  \n  \n```  \nvirtual void OnChangeTabs();\n```  \n  \n### Remarks  \n By default, this method does nothing. Override this method to execute custom code when the number of tabs on the tab control changes.  \n  \n##  <a name=\"cmfcbasetabctrl__ondrop\"></a>  CMFCBaseTabCtrl::OnDrop  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnDrop(\n    COleDataObject*,\n    DROPEFFECT,\n    CPoint);\n```  \n  \n### Parameters  \n [in] `COleDataObject*`  \n [in] `DROPEFFECT`  \n [in] `CPoint`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__ondragover\"></a>  CMFCBaseTabCtrl::OnDragOver  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual DROPEFFECT OnDragOver(\n    COleDataObject*,\n    DWORD,\n    CPoint);\n```  \n  \n### Parameters  \n [in] `COleDataObject*`  \n [in] `DWORD`  \n [in] `CPoint`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__ondragleave\"></a>  CMFCBaseTabCtrl::OnDragLeave  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnDragLeave();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__ondragenter\"></a>  CMFCBaseTabCtrl::OnDragEnter  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual DROPEFFECT OnDragEnter(\n    COleDataObject*,\n    DWORD,\n    CPoint);\n```  \n  \n### Parameters  \n [in] `COleDataObject*`  \n [in] `DWORD`  \n [in] `CPoint`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__onrenametab\"></a>  CMFCBaseTabCtrl::OnRenameTab  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL OnRenameTab(\n    int, CString&);\n```  \n  \n### Parameters  \n [in] `int`  \n [in] `CString&`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__pretranslatemessage\"></a>  CMFCBaseTabCtrl::PreTranslateMessage  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL PreTranslateMessage(MSG* pMsg);\n```  \n  \n### Parameters  \n [in] `pMsg`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__recalclayout\"></a>  CMFCBaseTabCtrl::RecalcLayout  \n Recalculates the internal layout of the tab control.  \n  \n```  \nvirtual void RecalcLayout() = 0;  \n```  \n  \n### Remarks  \n In the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md), this method is a pure virtual function. If you derive a class from `CMFCBaseTabCtrl`, you have to implement this function.  \n  \n##  <a name=\"cmfcbasetabctrl__removealltabs\"></a>  CMFCBaseTabCtrl::RemoveAllTabs  \n Removes all the tabs from the tab control.  \n  \n```  \nvirtual void RemoveAllTabs();\n```  \n  \n### Remarks  \n If [CMFCBaseTabCtrl::m_bAutoDestroyWindow](#cmfcbasetabctrl__m_bautodestroywindow) is `TRUE`, the framework deletes all the [CWnd](../../mfc/reference/cwnd-class.md) objects attached to the removed tabs.  \n  \n##  <a name=\"cmfcbasetabctrl__removetab\"></a>  CMFCBaseTabCtrl::RemoveTab  \n Removes a tab from the tab control.  \n  \n```  \nvirtual BOOL RemoveTab(\n    int iTab,  \n    BOOL bRecalcLayout = TRUE);\n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of a tab.  \n  \n [in] `bRecalcLayout`  \n A Boolean parameter that specifies whether to recalculate the layout of the tab.  \n  \n### Return Value  \n `TRUE` if the method removes the tab successfully; otherwise `FALSE`.  \n  \n### Remarks  \n If [CMFCBaseTabCtrl::m_bAutoDestroyWindow](#cmfcbasetabctrl__m_bautodestroywindow) is `TRUE`, `RemoveTab` destroys the [CWnd](../../mfc/reference/cwnd-class.md) object associated with the specified tab.  \n  \n##  <a name=\"cmfcbasetabctrl__renametab\"></a>  CMFCBaseTabCtrl::RenameTab  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL RenameTab();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__resetimagelist\"></a>  CMFCBaseTabCtrl::ResetImageList  \n Resets the image list for an instance of the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md).  \n  \n```  \nvoid ResetImageList();\n```  \n  \n##  <a name=\"cmfcbasetabctrl__serialize\"></a>  CMFCBaseTabCtrl::Serialize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void Serialize(CArchive& ar);\n```  \n  \n### Parameters  \n [in] `ar`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__setactivetab\"></a>  CMFCBaseTabCtrl::SetActiveTab  \n Activates the specified tab.  \n  \n```  \nvirtual BOOL SetActiveTab(int iTab) = 0;  \n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of a tab. `SetActiveTab` makes the tab with this index active.  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`.  \n  \n### Remarks  \n In the [CMFCBaseTabCtrl Class](../../mfc/reference/cmfcbasetabctrl-class.md), this method is a pure virtual function. If you derive a class from `CMFCBaseTabCtrl`, you have to implement this function.  \n  \n##  <a name=\"cmfcbasetabctrl__setactivetabcolor\"></a>  CMFCBaseTabCtrl::SetActiveTabColor  \n Sets the background color for the active tab.  \n  \n```  \nvirtual void SetActiveTabColor(COLORREF clr);\n```  \n  \n### Parameters  \n [in] `clr`  \n Specifies the new background color.  \n  \n### Remarks  \n The framework obtains the default background color for active tabs from the [GetSysColor](http://msdn.microsoft.com/library/windows/desktop/ms724371)method.  \n  \n##  <a name=\"cmfcbasetabctrl__setactivetabtextcolor\"></a>  CMFCBaseTabCtrl::SetActiveTabTextColor  \n Sets the text color for active tabs.  \n  \n```  \nvirtual void SetActiveTabTextColor(COLORREF clr);\n```  \n  \n### Parameters  \n [in] `clr`  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that specifies the new text color.  \n  \n### Remarks  \n By default, the framework obtains the text color from [GetSysColor](http://msdn.microsoft.com/library/windows/desktop/ms724371). Override this default color by using the `SetActiveTabTextColor` method.  \n  \n##  <a name=\"cmfcbasetabctrl__setautocolors\"></a>  CMFCBaseTabCtrl::SetAutoColors  \n Sets the colors of the tab control that the framework uses in automatic color mode.  \n  \n```  \nvoid SetAutoColors(\n    const CArray<COLORREF,COLORREF>& arColors);\n```  \n  \n### Parameters  \n [in] `arColors`  \n An array of RGB colors.  \n  \n### Remarks  \n If you provide a custom array of colors, the default array of colors is ignored. If the parameter `arColors` is empty, the framework reverts to the default array of colors.  \n  \n To enable autocolor mode, use the [CMFCBaseTabCtrl::EnableAutoColor](#cmfcbasetabctrl__enableautocolor) method.  \n  \n##  <a name=\"cmfcbasetabctrl__setdockingbarwrapperrtc\"></a>  CMFCBaseTabCtrl::SetDockingBarWrapperRTC  \n Sets the wrapper class that is used for any objects that are not derived from the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md).  \n  \n```  \nvoid SetDockingBarWrapperRTC(CRuntimeClass* pRTC);\n```  \n  \n### Parameters  \n [in] `pRTC`  \n The runtime class information for the new wrapper class.  \n  \n### Remarks  \n You add tabs to a tab control by using the methods [CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab) and [CMFCBaseTabCtrl::InsertTab](#cmfcbasetabctrl__inserttab). When you add a tab, each control on that tab must be dockable. Any objects that are not derived from `CDockablePane` must be wrapped. `AddTab` and `InsertTab` create a wrapper for these objects. The default wrapper class is the [CDockablePaneAdapter Class](../../mfc/reference/cdockablepaneadapter-class.md). The method `SetDockingBarWrapperRTC` enables you to change the class that is used as a wrapper class. The wrapper class that you provide must be derived from `CDockablePaneAdapter`.  \n  \n##  <a name=\"cmfcbasetabctrl__setdrawnoprefix\"></a>  CMFCBaseTabCtrl::SetDrawNoPrefix  \n Enables and disables the processing of prefix characters in tab labels.  \n  \n```  \nvoid SetDrawNoPrefix(\n    BOOL bNoPrefix,  \n    BOOL bRedraw = TRUE);\n```  \n  \n### Parameters  \n [in] `bNoPrefix`  \n `TRUE` if you want to process prefix characters; otherwise `FALSE`.  \n  \n [in] `bRedraw`  \n `TRUE` if you want to redraw the tabbed window; otherwise `FALSE`.  \n  \n### Remarks  \n A prefix character is a mnemonic character that is preceded by an ampersand (&).  \n  \n##  <a name=\"cmfcbasetabctrl__setimagelist\"></a>  CMFCBaseTabCtrl::SetImageList  \n Sets the icon image list for the tab control.  \n  \n```  \nvirtual BOOL SetImageList(\n    UINT uiID,  \n    int cx = 15,  \n    COLORREF clrTransp = RGB(255,\n    0,\n    255));\n\n \nvirtual BOOL SetImageList(\n    HIMAGELIST hImageList);\n```  \n  \n### Parameters  \n [in] `uiID`  \n A bitmap resource ID. `SetImageList` loads the image list from this resource.  \n  \n [in] `cx`  \n The width of each image in pixels.  \n  \n [in] `clrTransp`  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the transparent color of the image.  \n  \n [in] `hImageList`  \n A handle to a preloaded image list.  \n  \n### Return Value  \n Nonzero if the method was successful; 0 otherwise.  \n  \n### Remarks  \n The images from the icon image list are displayed alongside the labels for the tab. To display an icon, you must specify its index when you call [CMFCBaseTabCtrl::AddTab](#cmfcbasetabctrl__addtab).  \n  \n `SetImageList` will fail if the tab control was created with a flat style. It will also fail if the framework cannot load the image indicated by `uiID`.  \n  \n This method recalculates the height of the tab according to the image and text sizes.  \n  \n##  <a name=\"cmfcbasetabctrl__setlocation\"></a>  CMFCBaseTabCtrl::SetLocation  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void SetLocation(Location location);\n```  \n  \n### Parameters  \n [in] `location`  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__settabbkcolor\"></a>  CMFCBaseTabCtrl::SetTabBkColor  \n Sets the background color for the specified tab.  \n  \n```  \nvirtual BOOL SetTabBkColor(\n    int iTab,  \n    COLORREF color = (COLORREF)-1);\n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab.  \n  \n [in] `color`  \n The color to set.  \n  \n### Return Value  \n `TRUE` if successful; `FALSE` otherwise.  \n  \n##  <a name=\"cmfcbasetabctrl__settabbordersize\"></a>  CMFCBaseTabCtrl::SetTabBorderSize  \n Sets a new border size for the tab control.  \n  \n```  \nvirtual void SetTabBorderSize(\n    int nTabBorderSize,  \n    BOOL bRepaint = TRUE);\n```  \n  \n### Parameters  \n [in] `nTabBorderSize`  \n The new border size, in pixels.  \n  \n [in] `bRepaint`  \n A Boolean parameter that indicates whether the framework redraws the control.  \n  \n##  <a name=\"cmfcbasetabctrl__settabhicon\"></a>  CMFCBaseTabCtrl::SetTabHicon  \n Sets the icon for a tab label.  \n  \n```  \nvirtual BOOL SetTabHicon(\n    int iTab,  \n    HICON hIcon);\n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of a tab. This method changes the icon for this tab.  \n  \n [in] `hIcon`  \n A handle to an icon.  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasetabctrl__settabicon\"></a>  CMFCBaseTabCtrl::SetTabIcon  \n Sets the icon for a tab.  \n  \n```  \nvirtual BOOL SetTabIcon(\n    int iTab,  \n    UINT uiIcon);\n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab to update.  \n  \n [in] `uiIcon`  \n The icon ID for the new icon. This ID references the internal [CImageList](../../mfc/reference/cimagelist-class.md) object.  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcbasetabctrl__settabicononly\"></a>  CMFCBaseTabCtrl::SetTabIconOnly  \n Enables displaying only an icon (and no text label) on a specific tab.  \n  \n```  \nvirtual BOOL SetTabIconOnly(\n    int iTab,  \n    BOOL bIconOnly = TRUE,  \n    BOOL bShowTooltipAlways = FALSE);\n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab to change.  \n  \n [in] `bIconOnly`  \n A Boolean parameter that determines whether to display only icons.  \n  \n [in] `bShowTooltipAlways`  \n A Boolean parameter that determines whether the framework shows tooltips for a tab label that displays only icons.  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`.  \n  \n### Remarks  \n By default, a tab control displays the icon and text label for each tab.  \n  \n##  <a name=\"cmfcbasetabctrl__settablabel\"></a>  CMFCBaseTabCtrl::SetTabLabel  \n Sets the text for a tab label.  \n  \n```  \nvirtual BOOL SetTabLabel(\n    int iTab,  \n    const CString& strLabel);\n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab to update.  \n  \n [in] `strLabel`  \n A reference to a string that contains the new text for the tab label.  \n  \n### Return Value  \n Nonzero if successful; 0 otherwise.  \n  \n##  <a name=\"cmfcbasetabctrl__settabsheight\"></a>  CMFCBaseTabCtrl::SetTabsHeight  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void SetTabsHeight();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__settabsorder\"></a>  CMFCBaseTabCtrl::SetTabsOrder  \n Arranges the tabs in the specified order.  \n  \n```  \nBOOL SetTabsOrder(\n    const CArray<int,int>& arOrder);\n```  \n  \n### Parameters  \n [in] `arOrder`  \n An array of zero-based indexes that defines the new tab order.  \n  \n### Return Value  \n `TRUE` if successful; `FAIL` otherwise.  \n  \n### Remarks  \n The size of the `arOrder` array must be equal to the number of tabs in the tab control.  \n  \n##  <a name=\"cmfcbasetabctrl__settabtextcolor\"></a>  CMFCBaseTabCtrl::SetTabTextColor  \n Sets the text color for a specific tab.  \n  \n```  \nvirtual BOOL SetTabTextColor(\n    int iTab,  \n    COLORREF color = (COLORREF)-1);\n```  \n  \n### Parameters  \n [in] `iTab`  \n The zero-based index of the tab.  \n  \n [in] `color`  \n A [COLORREF](http://msdn.microsoft.com/library/windows/desktop/dd183449) parameter that indicates the new text color.  \n  \n### Return Value  \n Nonzero if successful; 0 otherwise.  \n  \n##  <a name=\"cmfcbasetabctrl__showtab\"></a>  CMFCBaseTabCtrl::ShowTab  \n Shows or hides the specified tab.  \n  \n```  \nvirtual BOOL ShowTab(\n    int iTab,  \n    BOOL bShow = TRUE,  \n    BOOL bRecalcLayout = TRUE,  \n    BOOL bActivate = FALSE);\n```  \n  \n### Parameters  \n [in] `iTab`  \n The index of the tab that `ShowTab` will show or hide.  \n  \n [in] `bShow`  \n A Boolean parameter that indicates whether to show the tab.  \n  \n [in] `bRecalcLayout`  \n A Boolean parameter that indicates whether to immediately recalculate the window layout.  \n  \n [in] `bActivate`  \n A Boolean parameter that indicates whether to select the tab specified by `iTab`.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The parameter `bActivate` only applies if `bShow` is `TRUE`. If `bActivate` is `TRUE` and if `ShowTab` is successful, `ShowTab` will send the message AFX_WM_CHANGE_ACTIVE_TAB to the parent of the tab window.  \n  \n##  <a name=\"cmfcbasetabctrl__startrenametab\"></a>  CMFCBaseTabCtrl::StartRenameTab  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL StartRenameTab(int iTab);\n```  \n  \n### Parameters  \n [in] `iTab`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcbasetabctrl__swaptabs\"></a>  CMFCBaseTabCtrl::SwapTabs  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void SwapTabs(\n    int nFisrtTabID,  \n    int nSecondTabID);\n```  \n  \n### Parameters  \n [in] `nFisrtTabID`  \n [in] `nSecondTabID`  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CMFCTabCtrl Class](../../mfc/reference/cmfctabctrl-class.md)   \n [CMFCOutlookBarTabCtrl Class](../../mfc/reference/cmfcoutlookbartabctrl-class.md)\n"}