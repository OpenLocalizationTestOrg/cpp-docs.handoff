{"nodes":[{"pos":[12,53],"content":"&lt;future&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"future<ph id=\"ph1\">&amp;gt;</ph> functions | Microsoft Docs","pos":[4,41],"source":"future&gt; functions | Microsoft Docs"}]},{"content":"future<ph id=\"ph1\">&amp;gt;</ph> functions","pos":[260,280],"source":"future&gt; functions"},{"content":"async","pos":[300,305]},{"content":"future_category","pos":[325,340]},{"content":"make_error_code","pos":[370,385]},{"content":"make_error_condition","pos":[419,439]},{"content":"swap","pos":[474,478]},{"pos":[537,542],"content":"async"},{"pos":[546,584],"content":"Represents an <bpt id=\"p1\">*</bpt>asynchronous provider<ept id=\"p1\">*</ept>.","source":"Represents an *asynchronous provider*."},{"content":"Parameters","pos":[881,891]},{"content":"A <bpt id=\"p1\">[</bpt>launch<ept id=\"p1\">](../standard-library/future-enums.md#launch_enumeration)</ept> value.","pos":[907,980],"source":" A [launch](../standard-library/future-enums.md#launch_enumeration) value."},{"content":"Remarks","pos":[990,997]},{"content":"Definitions of abbreviations:","pos":[1001,1030]},{"content":"dfn","pos":[1052,1055]},{"pos":[1057,1109],"content":"The result of calling <ph id=\"ph1\">`decay_copy(forward&lt;Fn&gt;(fn))`</ph>.","source":"The result of calling `decay_copy(forward<Fn>(fn))`."},{"content":"dargs","pos":[1115,1120]},{"pos":[1122,1187],"content":"The results of the calls <ph id=\"ph1\">`decay_copy(forward&lt;ArgsTypes&gt;(args…))`</ph>.","source":"The results of the calls `decay_copy(forward<ArgsTypes>(args…))`."},{"content":"Ty","pos":[1193,1195]},{"pos":[1197,1239],"content":"The type <ph id=\"ph1\">`result_of&lt;Fn(ArgTypes…)&gt;::type`</ph>.","source":"The type `result_of<Fn(ArgTypes…)>::type`."},{"pos":[1247,1315],"content":"The first template function returns <ph id=\"ph1\">`async(launch::any, fn, args…)`</ph>.","source":"The first template function returns `async(launch::any, fn, args…)`."},{"pos":[1322,1532],"content":"The second function returns a <ph id=\"ph1\">`future&lt;Ty&gt;`</ph> object whose <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept> holds a result together with the values of <bpt id=\"p2\">*</bpt>dfn<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>dargs<ept id=\"p3\">*</ept> and a thread object to manage a separate thread of execution.","source":"The second function returns a `future<Ty>` object whose *associated asynchronous state* holds a result together with the values of *dfn* and *dargs* and a thread object to manage a separate thread of execution."},{"pos":[1539,1657],"content":"Unless <ph id=\"ph1\">`decay&lt;Fn&gt;::type`</ph> is a type other than launch, the second function does not participate in overload resolution.","source":"Unless `decay<Fn>::type` is a type other than launch, the second function does not participate in overload resolution."},{"content":"If <ph id=\"ph1\">`policy`</ph> is <ph id=\"ph2\">`launch::any`</ph>, the function might choose <ph id=\"ph3\">`launch::async`</ph> or <ph id=\"ph4\">`launch::deferred`</ph>.","pos":[1664,1758],"source":"If `policy` is `launch::any`, the function might choose `launch::async` or `launch::deferred`."},{"content":"In this implementation, the function uses <ph id=\"ph1\">`launch::async`</ph>.","pos":[1759,1817],"source":" In this implementation, the function uses `launch::async`."},{"content":"If <ph id=\"ph1\">`policy`</ph> is <ph id=\"ph2\">`launch::async`</ph>, the function creates a thread that evaluates <ph id=\"ph3\">`INVOKE(dfn, dargs..., Ty)`</ph>.","pos":[1824,1929],"source":"If `policy` is `launch::async`, the function creates a thread that evaluates `INVOKE(dfn, dargs..., Ty)`."},{"content":"The function returns after it creates the thread without waiting for results.","pos":[1930,2007]},{"content":"If the system can't start a new thread, the function throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id=\"ph1\">`resource_unavailable_try_again`</ph>.","pos":[2008,2187],"source":" If the system can't start a new thread, the function throws a [system_error](../standard-library/system-error-class.md) that has an error code of `resource_unavailable_try_again`."},{"content":"If <ph id=\"ph1\">`policy`</ph> is <ph id=\"ph2\">`launch::deferred`</ph>, the function marks its associated asynchronous state as holding a <bpt id=\"p1\">*</bpt>deferred function<ept id=\"p1\">*</ept> and returns.","pos":[2194,2327],"source":"If `policy` is `launch::deferred`, the function marks its associated asynchronous state as holding a *deferred function* and returns."},{"content":"The first call to any non-timed function that waits for the associated asynchronous state to be ready in effect calls the deferred function by evaluating <ph id=\"ph1\">`INVOKE(dfn, dargs..., Ty)`</ph>.","pos":[2328,2510],"source":" The first call to any non-timed function that waits for the associated asynchronous state to be ready in effect calls the deferred function by evaluating `INVOKE(dfn, dargs..., Ty)`."},{"content":"In all cases, the associated asynchronous state of the <ph id=\"ph1\">`future`</ph> object is not set to <bpt id=\"p1\">*</bpt>ready<ept id=\"p1\">*</ept> until the evaluation of <ph id=\"ph2\">`INVOKE(dfn, dargs…, Ty)`</ph> completes, either by throwing an exception or by returning normally.","pos":[2517,2728],"source":"In all cases, the associated asynchronous state of the `future` object is not set to *ready* until the evaluation of `INVOKE(dfn, dargs…, Ty)` completes, either by throwing an exception or by returning normally."},{"content":"The result of the associated asynchronous state is an exception if one was thrown, or any value that's returned by the evaluation.","pos":[2729,2859]},{"pos":[2867,3355],"content":"[!NOTE]\n For a `future`—or the last [shared_future](../standard-library/shared-future-class.md)—that's attached to a task started with `std::async`, the destructor blocks if the task has not completed; that is, it blocks if this thread did not yet call `.get()` or `.wait()` and the task is still running. If a `future` obtained from `std::async` is moved outside the local scope, other code that uses it must be aware that its destructor may block for the shared state to become ready.","leadings":["","> "],"nodes":[{"content":" For a `future`—or the last [shared_future](../standard-library/shared-future-class.md)—that's attached to a task started with `std::async`, the destructor blocks if the task has not completed; that is, it blocks if this thread did not yet call `.get()` or `.wait()` and the task is still running. If a `future` obtained from `std::async` is moved outside the local scope, other code that uses it must be aware that its destructor may block for the shared state to become ready.","pos":[8,486],"nodes":[{"content":"For a <ph id=\"ph1\">`future`</ph>—or the last <bpt id=\"p1\">[</bpt>shared_future<ept id=\"p1\">](../standard-library/shared-future-class.md)</ept>—that's attached to a task started with <ph id=\"ph2\">`std::async`</ph>, the destructor blocks if the task has not completed; that is, it blocks if this thread did not yet call <ph id=\"ph3\">`.get()`</ph> or <ph id=\"ph4\">`.wait()`</ph> and the task is still running.","pos":[1,297],"source":" For a `future`—or the last [shared_future](../standard-library/shared-future-class.md)—that's attached to a task started with `std::async`, the destructor blocks if the task has not completed; that is, it blocks if this thread did not yet call `.get()` or `.wait()` and the task is still running."},{"content":"If a <ph id=\"ph1\">`future`</ph> obtained from <ph id=\"ph2\">`std::async`</ph> is moved outside the local scope, other code that uses it must be aware that its destructor may block for the shared state to become ready.","pos":[298,478],"source":" If a `future` obtained from `std::async` is moved outside the local scope, other code that uses it must be aware that its destructor may block for the shared state to become ready."}]}]},{"pos":[3362,3456],"content":"The pseudo-function <ph id=\"ph1\">`INVOKE`</ph> is defined in <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&lt;</ph>functional&gt;<ept id=\"p1\">](../standard-library/functional.md)</ept>.","source":"The pseudo-function `INVOKE` is defined in [\\<functional>](../standard-library/functional.md)."},{"pos":[3507,3522],"content":"future_category"},{"pos":[3526,3690],"content":"Returns a reference to the <bpt id=\"p1\">[</bpt>error_category<ept id=\"p1\">](../standard-library/error-category-class.md)</ept> object that characterizes errors that are associated with <ph id=\"ph1\">`future`</ph> objects.","source":"Returns a reference to the [error_category](../standard-library/error-category-class.md) object that characterizes errors that are associated with `future` objects."},{"pos":[3804,3819],"content":"make_error_code"},{"pos":[3823,4047],"content":"Creates an <bpt id=\"p1\">[</bpt>error_code<ept id=\"p1\">](../standard-library/error-code-class.md)</ept> together with the <bpt id=\"p2\">[</bpt>error_category<ept id=\"p2\">](../standard-library/error-category-class.md)</ept> object that characterizes <bpt id=\"p3\">[</bpt>future<ept id=\"p3\">](../standard-library/future-class.md)</ept> errors.","source":"Creates an [error_code](../standard-library/error-code-class.md) together with the [error_category](../standard-library/error-category-class.md) object that characterizes [future](../standard-library/future-class.md) errors."},{"content":"Parameters","pos":[4133,4143]},{"content":"A <bpt id=\"p1\">[</bpt>future_errc<ept id=\"p1\">](../standard-library/future-enums.md#future_errc_enumeration)</ept> value that identifies the reported error.","pos":[4158,4276],"source":" A [future_errc](../standard-library/future-enums.md#future_errc_enumeration) value that identifies the reported error."},{"content":"Return Value","pos":[4286,4298]},{"pos":[4415,4435],"content":"make_error_condition"},{"pos":[4439,4673],"content":"Creates an <bpt id=\"p1\">[</bpt>error_condition<ept id=\"p1\">](../standard-library/error-condition-class.md)</ept> together with the <bpt id=\"p2\">[</bpt>error_category<ept id=\"p2\">](../standard-library/error-category-class.md)</ept> object that characterizes <bpt id=\"p3\">[</bpt>future<ept id=\"p3\">](../standard-library/future-class.md)</ept> errors.","source":"Creates an [error_condition](../standard-library/error-condition-class.md) together with the [error_category](../standard-library/error-category-class.md) object that characterizes [future](../standard-library/future-class.md) errors."},{"content":"Parameters","pos":[4769,4779]},{"content":"A <bpt id=\"p1\">[</bpt>future_errc<ept id=\"p1\">](../standard-library/future-enums.md#future_errc_enumeration)</ept> value that identifies the reported error.","pos":[4794,4912],"source":" A [future_errc](../standard-library/future-enums.md#future_errc_enumeration) value that identifies the reported error."},{"content":"Return Value","pos":[4922,4934]},{"pos":[5040,5044],"content":"swap"},{"pos":[5048,5139],"content":"Exchanges the <bpt id=\"p1\">*</bpt>associated asynchronous state<ept id=\"p1\">*</ept> of one <ph id=\"ph1\">`promise`</ph> object with that of another.","source":"Exchanges the *associated asynchronous state* of one `promise` object with that of another."},{"content":"Parameters","pos":[5378,5388]},{"content":"The left <ph id=\"ph1\">`promise`</ph> object.","pos":[5402,5428],"source":" The left `promise` object."},{"content":"The right <ph id=\"ph1\">`promise`</ph> object.","pos":[5446,5473],"source":" The right `promise` object."},{"content":"See Also","pos":[5482,5490]},{"content":"future&gt;","pos":[5497,5504],"source":"future>"}],"content":"---\ntitle: \"&lt;future&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 1e3acc1e-736a-42dc-ade2-b2fe69aa96bc\ncaps.latest.revision: 11\nmanager: \"ghogen\"\n---\n# &lt;future&gt; functions\n||||  \n|-|-|-|  \n|[async](#async_function)|[future_category](#future_category_function)|[make_error_code](#make_error_code_function)|  \n|[make_error_condition](#make_error_condition_function)|[swap](#swap_function)|  \n  \n##  <a name=\"async_function\"></a>  async  \n Represents an *asynchronous provider*.  \n  \n```\ntemplate <class Fn, class... ArgTypes>\nfuture<typename result_of<Fn(ArgTypes...)>::type>\n    async(Fn&& fn, ArgTypes&&... args);\n\ntemplate <class Fn, class... ArgTypes>\nfuture<typename result_of<Fn(ArgTypes...)>::type>\n    async(launch policy, Fn&& fn, ArgTypes&&... args);\n```  \n  \n### Parameters  \n `policy`  \n A [launch](../standard-library/future-enums.md#launch_enumeration) value.  \n  \n### Remarks  \n Definitions of abbreviations:  \n  \n|||  \n|-|-|  \n|*dfn*|The result of calling `decay_copy(forward<Fn>(fn))`.|  \n|*dargs*|The results of the calls `decay_copy(forward<ArgsTypes>(args…))`.|  \n|*Ty*|The type `result_of<Fn(ArgTypes…)>::type`.|  \n  \n The first template function returns `async(launch::any, fn, args…)`.  \n  \n The second function returns a `future<Ty>` object whose *associated asynchronous state* holds a result together with the values of *dfn* and *dargs* and a thread object to manage a separate thread of execution.  \n  \n Unless `decay<Fn>::type` is a type other than launch, the second function does not participate in overload resolution.  \n  \n If `policy` is `launch::any`, the function might choose `launch::async` or `launch::deferred`. In this implementation, the function uses `launch::async`.  \n  \n If `policy` is `launch::async`, the function creates a thread that evaluates `INVOKE(dfn, dargs..., Ty)`. The function returns after it creates the thread without waiting for results. If the system can't start a new thread, the function throws a [system_error](../standard-library/system-error-class.md) that has an error code of `resource_unavailable_try_again`.  \n  \n If `policy` is `launch::deferred`, the function marks its associated asynchronous state as holding a *deferred function* and returns. The first call to any non-timed function that waits for the associated asynchronous state to be ready in effect calls the deferred function by evaluating `INVOKE(dfn, dargs..., Ty)`.  \n  \n In all cases, the associated asynchronous state of the `future` object is not set to *ready* until the evaluation of `INVOKE(dfn, dargs…, Ty)` completes, either by throwing an exception or by returning normally. The result of the associated asynchronous state is an exception if one was thrown, or any value that's returned by the evaluation.  \n  \n> [!NOTE]\n>  For a `future`—or the last [shared_future](../standard-library/shared-future-class.md)—that's attached to a task started with `std::async`, the destructor blocks if the task has not completed; that is, it blocks if this thread did not yet call `.get()` or `.wait()` and the task is still running. If a `future` obtained from `std::async` is moved outside the local scope, other code that uses it must be aware that its destructor may block for the shared state to become ready.  \n  \n The pseudo-function `INVOKE` is defined in [\\<functional>](../standard-library/functional.md).  \n  \n##  <a name=\"future_category_function\"></a>  future_category  \n Returns a reference to the [error_category](../standard-library/error-category-class.md) object that characterizes errors that are associated with `future` objects.  \n  \n```\nconst error_category& future_category() noexcept;\n```  \n  \n##  <a name=\"make_error_code_function\"></a>  make_error_code  \n Creates an [error_code](../standard-library/error-code-class.md) together with the [error_category](../standard-library/error-category-class.md) object that characterizes [future](../standard-library/future-class.md) errors.  \n  \n```\ninline error_code make_error_code(future_errc Errno) noexcept;\n```  \n  \n### Parameters  \n `Errno`  \n A [future_errc](../standard-library/future-enums.md#future_errc_enumeration) value that identifies the reported error.  \n  \n### Return Value  \n `error_code(static_cast<int>(Errno), future_category());`  \n  \n##  <a name=\"make_error_condition_function\"></a>  make_error_condition  \n Creates an [error_condition](../standard-library/error-condition-class.md) together with the [error_category](../standard-library/error-category-class.md) object that characterizes [future](../standard-library/future-class.md) errors.  \n  \n```\ninline error_condition make_error_condition(future_errc Errno) noexcept;\n```  \n  \n### Parameters  \n `Errno`  \n A [future_errc](../standard-library/future-enums.md#future_errc_enumeration) value that identifies the reported error.  \n  \n### Return Value  \n `error_condition(static_cast<int>(Errno), future_category());`  \n  \n##  <a name=\"swap_function\"></a>  swap  \n Exchanges the *associated asynchronous state* of one `promise` object with that of another.  \n  \n```\ntemplate <class Ty>\nvoid swap(promise<Ty>& Left, promise<Ty>& Right) noexcept;\n\ntemplate <class Ty, class... ArgTypes>\nvoid swap(packaged_task<Ty(ArgTypes...)>& Left, packaged_task<Ty(ArgTypes...)>& Right) noexcept;\n```  \n  \n### Parameters  \n `Left`  \n The left `promise` object.  \n  \n `Right`  \n The right `promise` object.  \n  \n## See Also  \n [\\<future>](../standard-library/future.md)\n\n\n\n"}