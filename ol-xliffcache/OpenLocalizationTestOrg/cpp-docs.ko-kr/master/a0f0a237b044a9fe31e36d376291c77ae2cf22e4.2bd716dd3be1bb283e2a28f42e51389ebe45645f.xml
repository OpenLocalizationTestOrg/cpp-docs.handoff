{"nodes":[{"pos":[12,47],"content":"COleCurrency Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"COleCurrency Class | Microsoft Docs","pos":[0,35]}]},{"pos":[693,711],"content":"COleCurrency Class","linkify":"COleCurrency Class","nodes":[{"content":"COleCurrency Class","pos":[0,18]}]},{"pos":[712,768],"content":"Encapsulates the <ph id=\"ph1\">`CURRENCY`</ph> data type of OLE automation.","source":"Encapsulates the `CURRENCY` data type of OLE automation."},{"pos":[777,783],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[828,835],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[845,864],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[871,875]},{"content":"Description","pos":[876,887]},{"pos":[925,982],"content":"<bpt id=\"p1\">[</bpt>COleCurrency::COleCurrency<ept id=\"p1\">](#colecurrency__colecurrency)</ept>","source":"[COleCurrency::COleCurrency](#colecurrency__colecurrency)"},{"pos":[983,1018],"content":"Constructs a <ph id=\"ph1\">`COleCurrency`</ph> object.","source":"Constructs a `COleCurrency` object."},{"pos":[1029,1043],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1050,1054]},{"content":"Description","pos":[1055,1066]},{"pos":[1104,1149],"content":"<bpt id=\"p1\">[</bpt>COleCurrency::Format<ept id=\"p1\">](#colecurrency__format)</ept>","source":"[COleCurrency::Format](#colecurrency__format)"},{"pos":[1150,1221],"content":"Generates a formatted string representation of a <ph id=\"ph1\">`COleCurrency`</ph> object.","source":"Generates a formatted string representation of a `COleCurrency` object."},{"pos":[1226,1277],"content":"<bpt id=\"p1\">[</bpt>COleCurrency::GetStatus<ept id=\"p1\">](#colecurrency__getstatus)</ept>","source":"[COleCurrency::GetStatus](#colecurrency__getstatus)"},{"pos":[1278,1335],"content":"Gets the status (validity) of this <ph id=\"ph1\">`COleCurrency`</ph> object.","source":"Gets the status (validity) of this `COleCurrency` object."},{"pos":[1340,1399],"content":"<bpt id=\"p1\">[</bpt>COleCurrency::ParseCurrency<ept id=\"p1\">](#colecurrency__parsecurrency)</ept>","source":"[COleCurrency::ParseCurrency](#colecurrency__parsecurrency)"},{"pos":[1400,1478],"content":"Reads a <bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept> value from a string and sets the value of <ph id=\"ph1\">`COleCurrency`</ph>.","source":"Reads a **CURRENCY** value from a string and sets the value of `COleCurrency`."},{"pos":[1483,1538],"content":"<bpt id=\"p1\">[</bpt>COleCurrency::SetCurrency<ept id=\"p1\">](#colecurrency__setcurrency)</ept>","source":"[COleCurrency::SetCurrency](#colecurrency__setcurrency)"},{"pos":[1539,1584],"content":"Sets the value of this <ph id=\"ph1\">`COleCurrency`</ph> object.","source":"Sets the value of this `COleCurrency` object."},{"pos":[1589,1640],"content":"<bpt id=\"p1\">[</bpt>COleCurrency::SetStatus<ept id=\"p1\">](#colecurrency__setstatus)</ept>","source":"[COleCurrency::SetStatus](#colecurrency__setstatus)"},{"pos":[1641,1699],"content":"Sets the status (validity) for this <ph id=\"ph1\">`COleCurrency`</ph> object.","source":"Sets the status (validity) for this `COleCurrency` object."},{"pos":[1710,1726],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1733,1737]},{"content":"Description","pos":[1738,1749]},{"pos":[1787,1827],"content":"<bpt id=\"p1\">[</bpt>operator =<ept id=\"p1\">](#colecurrency__operator_eq)</ept>","source":"[operator =](#colecurrency__operator_eq)"},{"pos":[1828,1858],"content":"Copies a <ph id=\"ph1\">`COleCurrency`</ph> value.","source":"Copies a `COleCurrency` value."},{"pos":[1863,1914],"content":"<bpt id=\"p1\">[</bpt>operator +, -<ept id=\"p1\">](#colecurrency__operator_plus_minus)</ept>","source":"[operator +, -](#colecurrency__operator_plus_minus)"},{"pos":[1915,1974],"content":"Adds, subtracts, and changes sign of <ph id=\"ph1\">`COleCurrency`</ph> values.","source":"Adds, subtracts, and changes sign of `COleCurrency` values."},{"pos":[1979,2035],"content":"<bpt id=\"p1\">[</bpt>operator +=, -=<ept id=\"p1\">](#colecurrency__operator_plus_minus_eq)</ept>","source":"[operator +=, -=](#colecurrency__operator_plus_minus_eq)"},{"pos":[2036,2110],"content":"Adds and subtracts a <ph id=\"ph1\">`COleCurrency`</ph> value from this <ph id=\"ph2\">`COleCurrency`</ph> object.","source":"Adds and subtracts a `COleCurrency` value from this `COleCurrency` object."},{"pos":[2115,2158],"content":"<bpt id=\"p1\">[</bpt>operator */<ept id=\"p1\">](#colecurrency__operator_star)</ept>","source":"[operator */](#colecurrency__operator_star)"},{"pos":[2159,2209],"content":"Scales a <ph id=\"ph1\">`COleCurrency`</ph> value by an integer value.","source":"Scales a `COleCurrency` value by an integer value."},{"pos":[2214,2268],"content":"<bpt id=\"p1\">[</bpt>operator *=, /=<ept id=\"p1\">](#colecurrency__operator_star_div_eq)</ept>","source":"[operator *=, /=](#colecurrency__operator_star_div_eq)"},{"pos":[2269,2322],"content":"Scales this <ph id=\"ph1\">`COleCurrency`</ph> value by an integer value.","source":"Scales this `COleCurrency` value by an integer value."},{"pos":[2327,2372],"content":"<bpt id=\"p1\">[</bpt>operator &lt;&lt;<ept id=\"p1\">](#colecurrency__operator_stream)</ept>","source":"[operator <<](#colecurrency__operator_stream)"},{"pos":[2373,2436],"content":"Outputs a <ph id=\"ph1\">`COleCurrency`</ph> value to <ph id=\"ph2\">`CArchive`</ph> or <ph id=\"ph3\">`CDumpContext`</ph>.","source":"Outputs a `COleCurrency` value to `CArchive` or `CDumpContext`."},{"pos":[2441,2486],"content":"<bpt id=\"p1\">[</bpt>operator &gt;&gt;<ept id=\"p1\">](#colecurrency__operator_stream)</ept>","source":"[operator >>](#colecurrency__operator_stream)"},{"pos":[2487,2534],"content":"Inputs a <ph id=\"ph1\">`COleCurrency`</ph> object from <ph id=\"ph2\">`CArchive`</ph>.","source":"Inputs a `COleCurrency` object from `CArchive`."},{"pos":[2539,2592],"content":"<bpt id=\"p1\">[</bpt>operator CURRENCY<ept id=\"p1\">](#colecurrency__operator_currency)</ept>","source":"[operator CURRENCY](#colecurrency__operator_currency)"},{"pos":[2593,2645],"content":"Converts a <ph id=\"ph1\">`COleCurrency`</ph> value into a <bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept>.","source":"Converts a `COleCurrency` value into a **CURRENCY**."},{"pos":[2650,2712],"content":"<bpt id=\"p1\">[</bpt>operator ==, &lt;, &lt;=, etc.<ept id=\"p1\">](#colecurrency_relational_operators)</ept>","source":"[operator ==, <, <=, etc.](#colecurrency_relational_operators)"},{"pos":[2713,2748],"content":"Compares two <ph id=\"ph1\">`COleCurrency`</ph> values.","source":"Compares two `COleCurrency` values."},{"pos":[2759,2778],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[2785,2789]},{"content":"Description","pos":[2790,2801]},{"pos":[2839,2882],"content":"<bpt id=\"p1\">[</bpt>COleCurrency::m_cur<ept id=\"p1\">](#colecurrency__m_cur)</ept>","source":"[COleCurrency::m_cur](#colecurrency__m_cur)"},{"pos":[2883,2951],"content":"Contains the underlying <bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept> for this <ph id=\"ph1\">`COleCurrency`</ph> object.","source":"Contains the underlying **CURRENCY** for this `COleCurrency` object."},{"pos":[2956,3005],"content":"<bpt id=\"p1\">[</bpt>COleCurrency::m_status<ept id=\"p1\">](#colecurrency__m_status)</ept>","source":"[COleCurrency::m_status](#colecurrency__m_status)"},{"pos":[3006,3056],"content":"Contains the status of this <ph id=\"ph1\">`COleCurrency`</ph> object.","source":"Contains the status of this `COleCurrency` object."},{"pos":[3066,3073],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3077,3121],"content":"<bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> does not have a base class.","source":"**COleCurrency** does not have a base class."},{"content":"<bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept> is implemented as an 8-byte, two's-complement integer value scaled by 10,000.","pos":[3128,3218],"source":"**CURRENCY** is implemented as an 8-byte, two's-complement integer value scaled by 10,000."},{"content":"This gives a fixed-point number with 15 digits to the left of the decimal point and 4 digits to the right.","pos":[3219,3325]},{"content":"The <bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept> data type is extremely useful for calculations involving money, or for any fixed-point calculation where accuracy is important.","pos":[3326,3470],"source":" The **CURRENCY** data type is extremely useful for calculations involving money, or for any fixed-point calculation where accuracy is important."},{"content":"It is one of the possible types for the <ph id=\"ph1\">`VARIANT`</ph> data type of OLE automation.","pos":[3471,3549],"source":" It is one of the possible types for the `VARIANT` data type of OLE automation."},{"content":"<bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> also implements some basic arithmetic operations for this fixed-point type.","pos":[3556,3648],"source":"**COleCurrency** also implements some basic arithmetic operations for this fixed-point type."},{"content":"The supported operations have been selected to control the rounding errors which occur during fixed-point calculations.","pos":[3649,3768]},{"pos":[3777,3798],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3825,3837],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3841,3862],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxdisp.h","source":"**Header:** afxdisp.h"},{"pos":[3872,3941],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__colecurrency\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::COleCurrency","linkify":"<a name=\"colecurrency__colecurrency\"></a>  COleCurrency::COleCurrency","source":"<a name=\"colecurrency__colecurrency\"></a>  COleCurrency::COleCurrency"},{"pos":[3945,3982],"content":"Constructs a <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object.","source":"Constructs a **COleCurrency** object."},{"pos":[4220,4230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept> value to be copied into the new <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object.","pos":[4245,4316],"source":" A **CURRENCY** value to be copied into the new **COleCurrency** object."},{"content":"An existing <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object to be copied into the new <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object.","pos":[4335,4421],"source":" An existing **COleCurrency** object to be copied into the new **COleCurrency** object."},{"content":"<bpt id=\"p1\">*</bpt>varSrc<ept id=\"p1\">*</ept>","pos":[4428,4436],"source":"*varSrc*"},{"content":"An existing <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> data structure (possibly a <ph id=\"ph1\">`COleVariant`</ph> object) to be converted to a currency value ( <ph id=\"ph2\">`VT_CY`</ph>) and copied into the new <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object.","pos":[4440,4608],"source":" An existing **VARIANT** data structure (possibly a `COleVariant` object) to be converted to a currency value ( `VT_CY`) and copied into the new **COleCurrency** object."},{"content":"<ph id=\"ph1\">`nUnits`</ph>, <ph id=\"ph2\">`nFractionalUnits`</ph>","pos":[4615,4643],"source":"`nUnits`, `nFractionalUnits`"},{"content":"Indicate the units and fractional part (in 1/10,000's) of the value to be copied into the new <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object.","pos":[4647,4765],"source":" Indicate the units and fractional part (in 1/10,000's) of the value to be copied into the new **COleCurrency** object."},{"pos":[4775,4782],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"All of these constructors create new <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> objects initialized to the specified value.","pos":[4786,4883],"source":"All of these constructors create new **COleCurrency** objects initialized to the specified value."},{"content":"A brief description of each of these constructors follows.","pos":[4884,4942]},{"content":"Unless otherwise noted, the status of the new <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> item is set to valid.","pos":[4943,5027],"source":" Unless otherwise noted, the status of the new **COleCurrency** item is set to valid."},{"pos":[5035,5124],"content":"<ph id=\"ph1\">`COleCurrency(`</ph>Â <bpt id=\"p1\">**</bpt>)<ept id=\"p1\">**</ept>Â Â Â Constructs a <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object initialized to 0 (zero).","source":"`COleCurrency(`Â **)**Â Â Â Constructs a **COleCurrency** object initialized to 0 (zero)."},{"pos":[5132,5300],"content":"<ph id=\"ph1\">`COleCurrency(`</ph>Â <ph id=\"ph2\">`cySrc`</ph>Â <bpt id=\"p1\">**</bpt>)<ept id=\"p1\">**</ept>Â Â Â Constructs a <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object from a <bpt id=\"p3\">[</bpt>CURRENCY<ept id=\"p3\">](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e)</ept> value.","source":"`COleCurrency(`Â `cySrc`Â **)**Â Â Â Constructs a **COleCurrency** object from a [CURRENCY](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e) value."},{"content":"<ph id=\"ph1\">`COleCurrency(`</ph>Â <ph id=\"ph2\">`curSrc`</ph>Â <bpt id=\"p1\">**</bpt>)<ept id=\"p1\">**</ept>Â Â Â Constructs a <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object from an existing <bpt id=\"p3\">**</bpt>COleCurrency<ept id=\"p3\">**</ept> object.","pos":[5308,5424],"source":"`COleCurrency(`Â `curSrc`Â **)**Â Â Â Constructs a **COleCurrency** object from an existing **COleCurrency** object."},{"content":"The new object has the same status as the source object.","pos":[5425,5481]},{"content":"<ph id=\"ph1\">`COleCurrency(`</ph>Â <bpt id=\"p1\">*</bpt>varSrc<ept id=\"p1\">*</ept>Â <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>Â Â Â Constructs a <bpt id=\"p3\">**</bpt>COleCurrency<ept id=\"p3\">**</ept> object.","pos":[5489,5564],"source":"`COleCurrency(`Â *varSrc*Â **)**Â Â Â Constructs a **COleCurrency** object."},{"content":"Attempts to convert a <bpt id=\"p1\">[</bpt>VARIANT<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> structure or <ph id=\"ph1\">`COleVariant`</ph> object to a currency ( <ph id=\"ph2\">`VT_CY`</ph>) value.","pos":[5565,5732],"source":" Attempts to convert a [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) structure or `COleVariant` object to a currency ( `VT_CY`) value."},{"content":"If this conversion is successful, the converted value is copied into the new <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object.","pos":[5733,5834],"source":" If this conversion is successful, the converted value is copied into the new **COleCurrency** object."},{"content":"If it is not, the value of the <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object is set to zero (0) and its status to invalid.","pos":[5835,5935],"source":" If it is not, the value of the **COleCurrency** object is set to zero (0) and its status to invalid."},{"content":"<ph id=\"ph1\">`COleCurrency(`</ph>Â <ph id=\"ph2\">`nUnits`</ph><bpt id=\"p1\">**</bpt>,<ept id=\"p1\">**</ept> <ph id=\"ph3\">`nFractionalUnits`</ph>Â <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>Â Â Â Constructs a <bpt id=\"p3\">**</bpt>COleCurrency<ept id=\"p3\">**</ept> object from the specified numerical components.","pos":[5943,6082],"source":"`COleCurrency(`Â `nUnits`**,** `nFractionalUnits`Â **)**Â Â Â Constructs a **COleCurrency** object from the specified numerical components."},{"content":"If the absolute value of the fractional part is greater than 10,000, the appropriate adjustment is made to the units.","pos":[6083,6200]},{"content":"Note that the units and fractional part are specified by signed long values.","pos":[6201,6277]},{"pos":[6284,6546],"content":"For more information, see the <bpt id=\"p1\">[</bpt>CURRENCY<ept id=\"p1\">](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e)</ept> and <bpt id=\"p2\">[</bpt>VARIANT<ept id=\"p2\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> entries in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [CURRENCY](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e) and [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[6556,6563],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following examples show the effects of the zero-parameter and two-parameter constructors:","pos":[6567,6660]},{"pos":[6667,6754],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCOleContainer#10<ept id=\"p2\">](../../mfc/codesnippet/cpp/colecurrency-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCOleContainer#10](../../mfc/codesnippet/cpp/colecurrency-class_1.cpp)]"},{"pos":[6764,6821],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__format\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::Format","linkify":"<a name=\"colecurrency__format\"></a>  COleCurrency::Format","source":"<a name=\"colecurrency__format\"></a>  COleCurrency::Format"},{"content":"Call this member function to create a formatted representation of the currency value.","pos":[6825,6910]},{"pos":[7025,7035],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Indicates flags for locale settings.","pos":[7052,7088]},{"content":"Only the following flag is relevant to currency:","pos":[7089,7137]},{"pos":[7145,7249],"content":"<bpt id=\"p1\">**</bpt>LOCALE_NOUSEROVERRIDE<ept id=\"p1\">**</ept>Â Â Â Use the system default locale settings, rather than custom user settings.","source":"**LOCALE_NOUSEROVERRIDE**Â Â Â Use the system default locale settings, rather than custom user settings."},{"pos":[7256,7312],"content":"`lcid`  \nIndicates locale ID to use for the conversion.","leadings":[""," "],"nodes":[{"content":"Indicates locale ID to use for the conversion.","pos":[9,55]}]},{"pos":[7322,7334],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7338,7393],"content":"A <ph id=\"ph1\">`CString`</ph> that contains the formatted currency value.","source":"A `CString` that contains the formatted currency value."},{"pos":[7403,7410],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It formats the value using the local language specifications (locale IDs).","pos":[7414,7488]},{"content":"A currency symbol is not included in the value returned.","pos":[7489,7545]},{"content":"If the status of this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object is null, the return value is an empty string.","pos":[7546,7637],"source":" If the status of this **COleCurrency** object is null, the return value is an empty string."},{"content":"If the status is invalid, the return string is specified by the string resource <bpt id=\"p1\">**</bpt>IDS_INVALID_CURRENCY<ept id=\"p1\">**</ept>.","pos":[7638,7743],"source":" If the status is invalid, the return string is specified by the string resource **IDS_INVALID_CURRENCY**."},{"pos":[7753,7760],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7764,7851],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCOleContainer#11<ept id=\"p2\">](../../mfc/codesnippet/cpp/colecurrency-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCOleContainer#11](../../mfc/codesnippet/cpp/colecurrency-class_2.cpp)]"},{"pos":[7861,7924],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__getstatus\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::GetStatus","linkify":"<a name=\"colecurrency__getstatus\"></a>  COleCurrency::GetStatus","source":"<a name=\"colecurrency__getstatus\"></a>  COleCurrency::GetStatus"},{"pos":[7928,8018],"content":"Call this member function to get the status (validity) of a given <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object.","source":"Call this member function to get the status (validity) of a given **COleCurrency** object."},{"pos":[8080,8092],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8096,8146],"content":"Returns the status of this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> value.","source":"Returns the status of this **COleCurrency** value."},{"pos":[8156,8163],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8167,8285],"content":"The return value is defined by the <ph id=\"ph1\">`CurrencyStatus`</ph> enumerated type that is defined within the <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> class.","source":"The return value is defined by the `CurrencyStatus` enumerated type that is defined within the **COleCurrency** class."},{"content":"For a brief description of these status values, see the following list:","pos":[8390,8461]},{"pos":[8469,8551],"content":"<bpt id=\"p1\">**</bpt>COleCurrency::valid<ept id=\"p1\">**</ept>Â Â Â Indicates that this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object is valid.","source":"**COleCurrency::valid**Â Â Â Indicates that this **COleCurrency** object is valid."},{"pos":[8559,8682],"content":"<bpt id=\"p1\">**</bpt>COleCurrency::invalid<ept id=\"p1\">**</ept>Â Â Â Indicates that this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object is invalid; that is, its value may be incorrect.","source":"**COleCurrency::invalid**Â Â Â Indicates that this **COleCurrency** object is invalid; that is, its value may be incorrect."},{"content":"<bpt id=\"p1\">**</bpt>COleCurrency::null<ept id=\"p1\">**</ept>Â Â Â Indicates that this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object is null, that is, that no value has been supplied for this object.","pos":[8690,8828],"source":"**COleCurrency::null**Â Â Â Indicates that this **COleCurrency** object is null, that is, that no value has been supplied for this object."},{"content":"(This is \"null\" in the database sense of \"having no value,\" as opposed to the C++ <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.)","pos":[8829,8921],"source":" (This is \"null\" in the database sense of \"having no value,\" as opposed to the C++ **NULL**.)"},{"pos":[8928,9002],"content":"The status of a <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object is invalid in the following cases:","source":"The status of a **COleCurrency** object is invalid in the following cases:"},{"pos":[9012,9122],"content":"If its value is set from a <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`COleVariant`</ph> value that could not be converted to a currency value.","source":"If its value is set from a **VARIANT** or `COleVariant` value that could not be converted to a currency value."},{"pos":[9132,9259],"content":"If this object has experienced an overflow or underflow during an arithmetic assignment operation, for example <ph id=\"ph1\">`+=`</ph> or <bpt id=\"p1\">**</bpt><ph id=\"ph2\">\\*</ph><ph id=\"ph3\">=</ph><ept id=\"p1\">**</ept>.","source":"If this object has experienced an overflow or underflow during an arithmetic assignment operation, for example `+=` or **\\*=**."},{"content":"If an invalid value was assigned to this object.","pos":[9269,9317]},{"pos":[9327,9430],"content":"If the status of this object was explicitly set to invalid using <bpt id=\"p1\">[</bpt>SetStatus<ept id=\"p1\">](#colecurrency__setstatus)</ept>.","source":"If the status of this object was explicitly set to invalid using [SetStatus](#colecurrency__setstatus)."},{"content":"For more information on operations that may set the status to invalid, see the following member functions:","pos":[9437,9543]},{"pos":[9551,9594],"content":"<bpt id=\"p1\">[</bpt>COleCurrency<ept id=\"p1\">](#colecurrency__colecurrency)</ept>","source":"[COleCurrency](#colecurrency__colecurrency)"},{"pos":[9602,9642],"content":"<bpt id=\"p1\">[</bpt>operator =<ept id=\"p1\">](#colecurrency__operator_eq)</ept>","source":"[operator =](#colecurrency__operator_eq)"},{"pos":[9650,9700],"content":"<bpt id=\"p1\">[</bpt>operator + -<ept id=\"p1\">](#colecurrency__operator_plus_minus)</ept>","source":"[operator + -](#colecurrency__operator_plus_minus)"},{"pos":[9708,9767],"content":"<bpt id=\"p1\">[</bpt>operator += and -=<ept id=\"p1\">](#colecurrency__operator_plus_minus_eq)</ept>","source":"[operator += and -=](#colecurrency__operator_plus_minus_eq)"},{"pos":[9775,9819],"content":"<bpt id=\"p1\">[</bpt>operator * /<ept id=\"p1\">](#colecurrency__operator_star)</ept>","source":"[operator * /](#colecurrency__operator_star)"},{"pos":[9827,9884],"content":"<bpt id=\"p1\">[</bpt>operator *= and /=<ept id=\"p1\">](#colecurrency__operator_star_div_eq)</ept>","source":"[operator *= and /=](#colecurrency__operator_star_div_eq)"},{"pos":[9894,9901],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9905,9992],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCOleContainer#12<ept id=\"p2\">](../../mfc/codesnippet/cpp/colecurrency-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCOleContainer#12](../../mfc/codesnippet/cpp/colecurrency-class_3.cpp)]"},{"pos":[10002,10057],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__m_cur\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::m_cur","linkify":"<a name=\"colecurrency__m_cur\"></a>  COleCurrency::m_cur","source":"<a name=\"colecurrency__m_cur\"></a>  COleCurrency::m_cur"},{"pos":[10061,10200],"content":"The underlying <bpt id=\"p1\">[</bpt>CURRENCY<ept id=\"p1\">](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e)</ept> structure for this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object.","source":"The underlying [CURRENCY](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e) structure for this **COleCurrency** object."},{"pos":[10210,10217],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10225,10455],"content":"[!CAUTION]\n Changing the value in the **CURRENCY** structure accessed by the pointer returned by this function will change the value of this **COleCurrency** object. It does not change the status of this **COleCurrency** object.","leadings":["","> "],"nodes":[{"content":" Changing the value in the **CURRENCY** structure accessed by the pointer returned by this function will change the value of this **COleCurrency** object. It does not change the status of this **COleCurrency** object.","pos":[11,228],"nodes":[{"content":"Changing the value in the <bpt id=\"p1\">**</bpt>CURRENCY<ept id=\"p1\">**</ept> structure accessed by the pointer returned by this function will change the value of this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object.","pos":[1,154],"source":" Changing the value in the **CURRENCY** structure accessed by the pointer returned by this function will change the value of this **COleCurrency** object."},{"content":"It does not change the status of this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object.","pos":[155,217],"source":" It does not change the status of this **COleCurrency** object."}]}]},{"pos":[10462,10638],"content":"For more information, see the <bpt id=\"p1\">[</bpt>CURRENCY<ept id=\"p1\">](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e)</ept> entry in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [CURRENCY](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e) entry in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[10648,10709],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__m_status\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::m_status","linkify":"<a name=\"colecurrency__m_status\"></a>  COleCurrency::m_status","source":"<a name=\"colecurrency__m_status\"></a>  COleCurrency::m_status"},{"pos":[10713,10834],"content":"The type of this data member is the enumerated type <ph id=\"ph1\">`CurrencyStatus`</ph>, which is defined within the <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> class.","source":"The type of this data member is the enumerated type `CurrencyStatus`, which is defined within the **COleCurrency** class."},{"pos":[10939,10946],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For a brief description of these status values, see the following list:","pos":[10950,11021]},{"pos":[11029,11111],"content":"<bpt id=\"p1\">**</bpt>COleCurrency::valid<ept id=\"p1\">**</ept>Â Â Â Indicates that this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object is valid.","source":"**COleCurrency::valid**Â Â Â Indicates that this **COleCurrency** object is valid."},{"pos":[11119,11242],"content":"<bpt id=\"p1\">**</bpt>COleCurrency::invalid<ept id=\"p1\">**</ept>Â Â Â Indicates that this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object is invalid; that is, its value may be incorrect.","source":"**COleCurrency::invalid**Â Â Â Indicates that this **COleCurrency** object is invalid; that is, its value may be incorrect."},{"content":"<bpt id=\"p1\">**</bpt>COleCurrency::null<ept id=\"p1\">**</ept>Â Â Â Indicates that this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object is null, that is, that no value has been supplied for this object.","pos":[11250,11388],"source":"**COleCurrency::null**Â Â Â Indicates that this **COleCurrency** object is null, that is, that no value has been supplied for this object."},{"content":"(This is \"null\" in the database sense of \"having no value,\" as opposed to the C++ <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.)","pos":[11389,11481],"source":" (This is \"null\" in the database sense of \"having no value,\" as opposed to the C++ **NULL**.)"},{"pos":[11488,11562],"content":"The status of a <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object is invalid in the following cases:","source":"The status of a **COleCurrency** object is invalid in the following cases:"},{"pos":[11572,11682],"content":"If its value is set from a <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`COleVariant`</ph> value that could not be converted to a currency value.","source":"If its value is set from a **VARIANT** or `COleVariant` value that could not be converted to a currency value."},{"pos":[11692,11819],"content":"If this object has experienced an overflow or underflow during an arithmetic assignment operation, for example <ph id=\"ph1\">`+=`</ph> or <bpt id=\"p1\">**</bpt><ph id=\"ph2\">\\*</ph><ph id=\"ph3\">=</ph><ept id=\"p1\">**</ept>.","source":"If this object has experienced an overflow or underflow during an arithmetic assignment operation, for example `+=` or **\\*=**."},{"content":"If an invalid value was assigned to this object.","pos":[11829,11877]},{"pos":[11887,11990],"content":"If the status of this object was explicitly set to invalid using <bpt id=\"p1\">[</bpt>SetStatus<ept id=\"p1\">](#colecurrency__setstatus)</ept>.","source":"If the status of this object was explicitly set to invalid using [SetStatus](#colecurrency__setstatus)."},{"content":"For more information on operations that may set the status to invalid, see the following member functions:","pos":[11997,12103]},{"pos":[12111,12154],"content":"<bpt id=\"p1\">[</bpt>COleCurrency<ept id=\"p1\">](#colecurrency__colecurrency)</ept>","source":"[COleCurrency](#colecurrency__colecurrency)"},{"pos":[12162,12202],"content":"<bpt id=\"p1\">[</bpt>operator =<ept id=\"p1\">](#colecurrency__operator_eq)</ept>","source":"[operator =](#colecurrency__operator_eq)"},{"pos":[12210,12261],"content":"<bpt id=\"p1\">[</bpt>operator +, -<ept id=\"p1\">](#colecurrency__operator_plus_minus)</ept>","source":"[operator +, -](#colecurrency__operator_plus_minus)"},{"pos":[12269,12325],"content":"<bpt id=\"p1\">[</bpt>operator +=, -=<ept id=\"p1\">](#colecurrency__operator_plus_minus_eq)</ept>","source":"[operator +=, -=](#colecurrency__operator_plus_minus_eq)"},{"pos":[12333,12376],"content":"<bpt id=\"p1\">[</bpt>operator */<ept id=\"p1\">](#colecurrency__operator_star)</ept>","source":"[operator */](#colecurrency__operator_star)"},{"pos":[12384,12438],"content":"<bpt id=\"p1\">[</bpt>operator *=, /=<ept id=\"p1\">](#colecurrency__operator_star_div_eq)</ept>","source":"[operator *=, /=](#colecurrency__operator_star_div_eq)"},{"pos":[12450,12732],"content":"[!CAUTION]\nThis data member is for advanced programming situations. You should use the inline member functions [GetStatus](#colecurrency__getstatus) and [SetStatus](#colecurrency__setstatus). See `SetStatus` for further cautions regarding explicitly setting this data member.","leadings":["","    >  "],"nodes":[{"content":"This data member is for advanced programming situations. You should use the inline member functions [GetStatus](#colecurrency__getstatus) and [SetStatus](#colecurrency__setstatus). See `SetStatus` for further cautions regarding explicitly setting this data member.","pos":[11,275],"nodes":[{"content":"This data member is for advanced programming situations.","pos":[0,56]},{"content":"You should use the inline member functions <bpt id=\"p1\">[</bpt>GetStatus<ept id=\"p1\">](#colecurrency__getstatus)</ept> and <bpt id=\"p2\">[</bpt>SetStatus<ept id=\"p2\">](#colecurrency__setstatus)</ept>.","pos":[57,180],"source":" You should use the inline member functions [GetStatus](#colecurrency__getstatus) and [SetStatus](#colecurrency__setstatus)."},{"content":"See <ph id=\"ph1\">`SetStatus`</ph> for further cautions regarding explicitly setting this data member.","pos":[181,264],"source":" See `SetStatus` for further cautions regarding explicitly setting this data member."}]}]},{"pos":[12742,12808],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::operator =","linkify":"<a name=\"colecurrency__operator_eq\"></a>  COleCurrency::operator =","source":"<a name=\"colecurrency__operator_eq\"></a>  COleCurrency::operator ="},{"pos":[12812,12915],"content":"These overloaded assignment operators copy the source currency value into this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object.","source":"These overloaded assignment operators copy the source currency value into this **COleCurrency** object."},{"pos":[13106,13113],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A brief description of each operator follows:","pos":[13117,13162]},{"pos":[13170,13300],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`cySrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>Â Â Â The <ph id=\"ph2\">`CURRENCY`</ph> value is copied into the <bpt id=\"p3\">**</bpt>COleCurrency<ept id=\"p3\">**</ept> object and its status is set to valid.","source":"**operator =(** `cySrc` **)**Â Â Â The `CURRENCY` value is copied into the **COleCurrency** object and its status is set to valid."},{"pos":[13308,13462],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`curSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>Â Â Â The value and status of the operand, an existing <bpt id=\"p3\">**</bpt>COleCurrency<ept id=\"p3\">**</ept> object are copied into this <bpt id=\"p4\">**</bpt>COleCurrency<ept id=\"p4\">**</ept> object.","source":"**operator =(** `curSrc` **)**Â Â Â The value and status of the operand, an existing **COleCurrency** object are copied into this **COleCurrency** object."},{"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>varSrc<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>Â Â Â If the conversion of the <ph id=\"ph1\">`VARIANT`</ph> value (or <bpt id=\"p4\">[</bpt>COleVariant<ept id=\"p4\">](../../mfc/reference/colevariant-class.md)</ept> object) to a currency ( <ph id=\"ph2\">`VT_CY`</ph>) is successful, the converted value is copied into this <bpt id=\"p5\">**</bpt>COleCurrency<ept id=\"p5\">**</ept> object and its status is set to valid.","pos":[13470,13750],"source":"**operator =(** *varSrc* **)**Â Â Â If the conversion of the `VARIANT` value (or [COleVariant](../../mfc/reference/colevariant-class.md) object) to a currency ( `VT_CY`) is successful, the converted value is copied into this **COleCurrency** object and its status is set to valid."},{"content":"If the conversion is not successful, the value of the <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object is set to 0 and its status to invalid.","pos":[13751,13867],"source":" If the conversion is not successful, the value of the **COleCurrency** object is set to 0 and its status to invalid."},{"pos":[13874,14136],"content":"For more information, see the <bpt id=\"p1\">[</bpt>CURRENCY<ept id=\"p1\">](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e)</ept> and <bpt id=\"p2\">[</bpt>VARIANT<ept id=\"p2\">](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118)</ept> entries in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the [CURRENCY](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e) and [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[14146,14153],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14157,14244],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCOleContainer#15<ept id=\"p2\">](../../mfc/codesnippet/cpp/colecurrency-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCOleContainer#15](../../mfc/codesnippet/cpp/colecurrency-class_4.cpp)]"},{"pos":[14254,14331],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__operator_plus_minus\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::operator +, -","linkify":"<a name=\"colecurrency__operator_plus_minus\"></a>  COleCurrency::operator +, -","source":"<a name=\"colecurrency__operator_plus_minus\"></a>  COleCurrency::operator +, -"},{"pos":[14335,14483],"content":"These operators allow you to add and subtract two <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> values to and from each other and to change the sign of a <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> value.","source":"These operators allow you to add and subtract two **COleCurrency** values to and from each other and to change the sign of a **COleCurrency** value."},{"pos":[14663,14670],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14674,14768],"content":"If either of the operands is null, the status of the resulting <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> value is null.","source":"If either of the operands is null, the status of the resulting **COleCurrency** value is null."},{"pos":[14775,14862],"content":"If the arithmetic operation overflows, the resulting <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> value is invalid.","source":"If the arithmetic operation overflows, the resulting **COleCurrency** value is invalid."},{"pos":[14869,14984],"content":"If the operand is invalid and the other is not null, the status of the resulting <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> value is invalid.","source":"If the operand is invalid and the other is not null, the status of the resulting **COleCurrency** value is invalid."},{"pos":[14991,15119],"content":"For more information on the valid, invalid, and null status values, see the <bpt id=\"p1\">[</bpt>m_status<ept id=\"p1\">](#colecurrency__m_status)</ept> member variable.","source":"For more information on the valid, invalid, and null status values, see the [m_status](#colecurrency__m_status) member variable."},{"pos":[15129,15136],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15140,15227],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCOleContainer#16<ept id=\"p2\">](../../mfc/codesnippet/cpp/colecurrency-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCOleContainer#16](../../mfc/codesnippet/cpp/colecurrency-class_5.cpp)]"},{"pos":[15237,15319],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__operator_plus_minus_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::operator +=, -=","linkify":"<a name=\"colecurrency__operator_plus_minus_eq\"></a>  COleCurrency::operator +=, -=","source":"<a name=\"colecurrency__operator_plus_minus_eq\"></a>  COleCurrency::operator +=, -="},{"pos":[15323,15419],"content":"Allow you to add and subtract a <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> value to and from this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object.","source":"Allow you to add and subtract a **COleCurrency** value to and from this **COleCurrency** object."},{"pos":[15561,15568],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15572,15665],"content":"If either of the operands is null, the status of this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object is set to null.","source":"If either of the operands is null, the status of this **COleCurrency** object is set to null."},{"pos":[15672,15772],"content":"If the arithmetic operation overflows, the status of this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object is set to invalid.","source":"If the arithmetic operation overflows, the status of this **COleCurrency** object is set to invalid."},{"pos":[15779,15904],"content":"If either of the operands is invalid and the other is not null, the status of this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object is set to invalid.","source":"If either of the operands is invalid and the other is not null, the status of this **COleCurrency** object is set to invalid."},{"pos":[15911,16039],"content":"For more information on the valid, invalid, and null status values, see the <bpt id=\"p1\">[</bpt>m_status<ept id=\"p1\">](#colecurrency__m_status)</ept> member variable.","source":"For more information on the valid, invalid, and null status values, see the [m_status](#colecurrency__m_status) member variable."},{"pos":[16049,16056],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16060,16147],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCOleContainer#17<ept id=\"p2\">](../../mfc/codesnippet/cpp/colecurrency-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCOleContainer#17](../../mfc/codesnippet/cpp/colecurrency-class_6.cpp)]"},{"pos":[16157,16231],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__operator_star\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::operator * and /","linkify":"<a name=\"colecurrency__operator_star\"></a>  COleCurrency::operator * and /","source":"<a name=\"colecurrency__operator_star\"></a>  COleCurrency::operator * and /"},{"pos":[16235,16300],"content":"Allow you to scale a <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> value by an integral value.","source":"Allow you to scale a **COleCurrency** value by an integral value."},{"pos":[16423,16430],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16434,16534],"content":"If the <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> operand is null, the status of the resulting <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> value is null.","source":"If the **COleCurrency** operand is null, the status of the resulting **COleCurrency** value is null."},{"pos":[16541,16656],"content":"If the arithmetic operation overflows or underflows, the status of the resulting <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> value is invalid.","source":"If the arithmetic operation overflows or underflows, the status of the resulting **COleCurrency** value is invalid."},{"pos":[16663,16769],"content":"If the <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> operand is invalid, the status of the resulting <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> value is invalid.","source":"If the **COleCurrency** operand is invalid, the status of the resulting **COleCurrency** value is invalid."},{"pos":[16776,16904],"content":"For more information on the valid, invalid, and null status values, see the <bpt id=\"p1\">[</bpt>m_status<ept id=\"p1\">](#colecurrency__m_status)</ept> member variable.","source":"For more information on the valid, invalid, and null status values, see the [m_status](#colecurrency__m_status) member variable."},{"pos":[16914,16921],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16925,17012],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCOleContainer#18<ept id=\"p2\">](../../mfc/codesnippet/cpp/colecurrency-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCOleContainer#18](../../mfc/codesnippet/cpp/colecurrency-class_7.cpp)]"},{"pos":[17022,17102],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__operator_star_div_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::operator *=, /=","linkify":"<a name=\"colecurrency__operator_star_div_eq\"></a>  COleCurrency::operator *=, /=","source":"<a name=\"colecurrency__operator_star_div_eq\"></a>  COleCurrency::operator *=, /="},{"pos":[17106,17174],"content":"Allow you to scale this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> value by an integral value.","source":"Allow you to scale this **COleCurrency** value by an integral value."},{"pos":[17296,17303],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17307,17406],"content":"If the <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> operand is null, the status of this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object is set to null.","source":"If the **COleCurrency** operand is null, the status of this **COleCurrency** object is set to null."},{"pos":[17413,17513],"content":"If the arithmetic operation overflows, the status of this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object is set to invalid.","source":"If the arithmetic operation overflows, the status of this **COleCurrency** object is set to invalid."},{"pos":[17520,17625],"content":"If the <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> operand is invalid, the status of this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object is set to invalid.","source":"If the **COleCurrency** operand is invalid, the status of this **COleCurrency** object is set to invalid."},{"pos":[17632,17760],"content":"For more information on the valid, invalid, and null status values, see the <bpt id=\"p1\">[</bpt>m_status<ept id=\"p1\">](#colecurrency__m_status)</ept> member variable.","source":"For more information on the valid, invalid, and null status values, see the [m_status](#colecurrency__m_status) member variable."},{"pos":[17770,17777],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17781,17868],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCOleContainer#19<ept id=\"p2\">](../../mfc/codesnippet/cpp/colecurrency-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCOleContainer#19](../../mfc/codesnippet/cpp/colecurrency-class_8.cpp)]"},{"pos":[17878,17965],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__operator_stream\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::operator <ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph>, <ph id=\"ph3\">&amp;gt;</ph><ph id=\"ph4\">&amp;gt;</ph>","linkify":"<a name=\"colecurrency__operator_stream\"></a>  COleCurrency::operator &lt;&lt;, &gt;&gt;","source":"<a name=\"colecurrency__operator_stream\"></a>  COleCurrency::operator &lt;&lt;, &gt;&gt;"},{"content":"Supports diagnostic dumping and storing to an archive.","pos":[17969,18023]},{"pos":[18288,18295],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18299,18366],"content":"The extraction ( <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&gt;&gt;</ph><ept id=\"p1\">**</ept>) operator supports loading from an archive.","source":"The extraction ( **>>**) operator supports loading from an archive."},{"pos":[18376,18455],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__operator_currency\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::operator CURRENCY","linkify":"<a name=\"colecurrency__operator_currency\"></a>  COleCurrency::operator CURRENCY","source":"<a name=\"colecurrency__operator_currency\"></a>  COleCurrency::operator CURRENCY"},{"pos":[18459,18546],"content":"Returns a <ph id=\"ph1\">`CURRENCY`</ph> structure whose value is copied from this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object.","source":"Returns a `CURRENCY` structure whose value is copied from this **COleCurrency** object."},{"pos":[18601,18608],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18618,18689],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__parsecurrency\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::ParseCurrency","linkify":"<a name=\"colecurrency__parsecurrency\"></a>  COleCurrency::ParseCurrency","source":"<a name=\"colecurrency__parsecurrency\"></a>  COleCurrency::ParseCurrency"},{"content":"Call this member function to parse a string to read a currency value.","pos":[18693,18762]},{"pos":[18961,18971],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>lpszCurrency<ept id=\"p1\">*</ept>","pos":[18975,18989],"source":"*lpszCurrency*"},{"content":"A pointer to the null-terminated string which is to be parsed.","pos":[18993,19055]},{"content":"Indicates flags for locale settings, possibly the following flag:","pos":[19075,19140]},{"pos":[19148,19252],"content":"<bpt id=\"p1\">**</bpt>LOCALE_NOUSEROVERRIDE<ept id=\"p1\">**</ept>Â Â Â Use the system default locale settings, rather than custom user settings.","source":"**LOCALE_NOUSEROVERRIDE**Â Â Â Use the system default locale settings, rather than custom user settings."},{"pos":[19259,19315],"content":"`lcid`  \nIndicates locale ID to use for the conversion.","leadings":[""," "],"nodes":[{"content":"Indicates locale ID to use for the conversion.","pos":[9,55]}]},{"pos":[19325,19337],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the string was successfully converted to a currency value, otherwise 0.","pos":[19341,19423]},{"pos":[19433,19440],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It uses local language specifications (locale IDs) for the meaning of nonnumeric characters in the source string.","pos":[19444,19557]},{"pos":[19564,19708],"content":"For a discussion of locale ID values, see <bpt id=\"p1\">[</bpt>Supporting Multiple Languages<ept id=\"p1\">](http://msdn.microsoft.com/en-us/47dc5add-232c-4268-b977-43e12da81ede)</ept>.","source":"For a discussion of locale ID values, see [Supporting Multiple Languages](http://msdn.microsoft.com/en-us/47dc5add-232c-4268-b977-43e12da81ede)."},{"pos":[19715,19864],"content":"If the string was successfully converted to a currency value, the value of this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object is set to that value and its status to valid.","source":"If the string was successfully converted to a currency value, the value of this **COleCurrency** object is set to that value and its status to valid."},{"pos":[19871,20020],"content":"If the string could not be converted to a currency value or if there was a numerical overflow, the status of this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object is invalid.","source":"If the string could not be converted to a currency value or if there was a numerical overflow, the status of this **COleCurrency** object is invalid."},{"content":"If the string conversion failed due to memory allocation errors, this function throws a <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept>.","pos":[20027,20181],"source":"If the string conversion failed due to memory allocation errors, this function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md)."},{"content":"In any other error state, this function throws a <bpt id=\"p1\">[</bpt>COleException<ept id=\"p1\">](../../mfc/reference/coleexception-class.md)</ept>.","pos":[20182,20291],"source":" In any other error state, this function throws a [COleException](../../mfc/reference/coleexception-class.md)."},{"pos":[20301,20308],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20312,20399],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCOleContainer#13<ept id=\"p2\">](../../mfc/codesnippet/cpp/colecurrency-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCOleContainer#13](../../mfc/codesnippet/cpp/colecurrency-class_9.cpp)]"},{"pos":[20409,20492],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency_relational_operators\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency Relational Operators","linkify":"<a name=\"colecurrency_relational_operators\"></a>  COleCurrency Relational Operators","source":"<a name=\"colecurrency_relational_operators\"></a>  COleCurrency Relational Operators"},{"content":"Compare two currency values and return nonzero if the condition is true; otherwise 0.","pos":[20496,20581]},{"pos":[20920,20927],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20935,21161],"content":"[!NOTE]\n The return value of the ordering operations ( **<**, **\\<=**, **>**, **>=**) is undefined if the status of either operand is null or invalid. The equality operators ( `==`, `!=`) consider the status of the operands.","leadings":["","> "],"nodes":[{"content":" The return value of the ordering operations ( **<**, **\\<=**, **>**, **>=**) is undefined if the status of either operand is null or invalid. The equality operators ( `==`, `!=`) consider the status of the operands.","pos":[8,224],"nodes":[{"content":"The return value of the ordering operations ( <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&lt;</ph><ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\&lt;</ph><ph id=\"ph3\">=</ph><ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt><ph id=\"ph4\">&gt;</ph><ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt><ph id=\"ph5\">&gt;=</ph><ept id=\"p4\">**</ept>) is undefined if the status of either operand is null or invalid.","pos":[1,142],"source":" The return value of the ordering operations ( **<**, **\\<=**, **>**, **>=**) is undefined if the status of either operand is null or invalid."},{"content":"The equality operators ( <ph id=\"ph1\">`==`</ph>, <ph id=\"ph2\">`!=`</ph>) consider the status of the operands.","pos":[143,216],"source":" The equality operators ( `==`, `!=`) consider the status of the operands."}]}]},{"pos":[21171,21178],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21182,21270],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCOleContainer#20<ept id=\"p2\">](../../mfc/codesnippet/cpp/colecurrency-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCOleContainer#20](../../mfc/codesnippet/cpp/colecurrency-class_10.cpp)]"},{"pos":[21280,21347],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__setcurrency\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::SetCurrency","linkify":"<a name=\"colecurrency__setcurrency\"></a>  COleCurrency::SetCurrency","source":"<a name=\"colecurrency__setcurrency\"></a>  COleCurrency::SetCurrency"},{"pos":[21351,21446],"content":"Call this member function to set the units and fractional part of this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object.","source":"Call this member function to set the units and fractional part of this **COleCurrency** object."},{"pos":[21536,21546],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<ph id=\"ph1\">`nUnits`</ph>, <ph id=\"ph2\">`nFractionalUnits`</ph>","pos":[21550,21578],"source":"`nUnits`, `nFractionalUnits`"},{"content":"Indicate the units and fractional part (in 1/10,000's) of the value to be copied into this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object.","pos":[21582,21697],"source":" Indicate the units and fractional part (in 1/10,000's) of the value to be copied into this **COleCurrency** object."},{"pos":[21707,21714],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the absolute value of the fractional part is greater than 10,000, the appropriate adjustment is made to the units, as shown in the third of the following examples.","pos":[21718,21884]},{"content":"Note that the units and fractional part are specified by signed long values.","pos":[21891,21967]},{"content":"The fourth of the following examples shows what happens when the parameters have different signs.","pos":[21968,22065]},{"pos":[22075,22082],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22086,22174],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCOleContainer#14<ept id=\"p2\">](../../mfc/codesnippet/cpp/colecurrency-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCOleContainer#14](../../mfc/codesnippet/cpp/colecurrency-class_11.cpp)]"},{"pos":[22184,22247],"content":"<bpt id=\"p1\">&lt;a name=\"colecurrency__setstatus\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleCurrency::SetStatus","linkify":"<a name=\"colecurrency__setstatus\"></a>  COleCurrency::SetStatus","source":"<a name=\"colecurrency__setstatus\"></a>  COleCurrency::SetStatus"},{"pos":[22251,22338],"content":"Call this member function to set the status (validity) of this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object.","source":"Call this member function to set the status (validity) of this **COleCurrency** object."},{"pos":[22413,22423],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>status<ept id=\"p1\">*</ept>","pos":[22427,22435],"source":"*status*"},{"content":"The new status for this <bpt id=\"p1\">**</bpt>COleCurrency<ept id=\"p1\">**</ept> object.","pos":[22439,22487],"source":" The new status for this **COleCurrency** object."},{"pos":[22497,22504],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22508,22640],"content":"The <bpt id=\"p1\">*</bpt>status<ept id=\"p1\">*</ept> parameter value is defined by the <ph id=\"ph1\">`CurrencyStatus`</ph> enumerated type, which is defined within the <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> class.","source":"The *status* parameter value is defined by the `CurrencyStatus` enumerated type, which is defined within the **COleCurrency** class."},{"content":"For a brief description of these status values, see the following list:","pos":[22745,22816]},{"pos":[22824,22906],"content":"<bpt id=\"p1\">**</bpt>COleCurrency::valid<ept id=\"p1\">**</ept>Â Â Â Indicates that this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object is valid.","source":"**COleCurrency::valid**Â Â Â Indicates that this **COleCurrency** object is valid."},{"pos":[22914,23037],"content":"<bpt id=\"p1\">**</bpt>COleCurrency::invalid<ept id=\"p1\">**</ept>Â Â Â Indicates that this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object is invalid; that is, its value may be incorrect.","source":"**COleCurrency::invalid**Â Â Â Indicates that this **COleCurrency** object is invalid; that is, its value may be incorrect."},{"content":"<bpt id=\"p1\">**</bpt>COleCurrency::null<ept id=\"p1\">**</ept>Â Â Â Indicates that this <bpt id=\"p2\">**</bpt>COleCurrency<ept id=\"p2\">**</ept> object is null, that is, that no value has been supplied for this object.","pos":[23045,23183],"source":"**COleCurrency::null**Â Â Â Indicates that this **COleCurrency** object is null, that is, that no value has been supplied for this object."},{"content":"(This is \"null\" in the database sense of \"having no value,\" as opposed to the C++ <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.)","pos":[23184,23276],"source":" (This is \"null\" in the database sense of \"having no value,\" as opposed to the C++ **NULL**.)"},{"pos":[23288,23667],"content":"[!CAUTION]\nThis function is for advanced programming situations. This function does not alter the data in this object. It will most often be used to set the status to null or invalid. Note that the assignment operator ( [operator =](#colecurrency__operator_eq)) and [SetCurrency](#colecurrency__setcurrency) do set the status to of the object based on the source value(s).","leadings":["","    >  "],"nodes":[{"content":"This function is for advanced programming situations. This function does not alter the data in this object. It will most often be used to set the status to null or invalid. Note that the assignment operator ( [operator =](#colecurrency__operator_eq)) and [SetCurrency](#colecurrency__setcurrency) do set the status to of the object based on the source value(s).","pos":[11,372],"nodes":[{"content":"This function is for advanced programming situations.","pos":[0,53]},{"content":"This function does not alter the data in this object.","pos":[54,107]},{"content":"It will most often be used to set the status to null or invalid.","pos":[108,172]},{"content":"Note that the assignment operator ( <bpt id=\"p1\">[</bpt>operator =<ept id=\"p1\">](#colecurrency__operator_eq)</ept>) and <bpt id=\"p2\">[</bpt>SetCurrency<ept id=\"p2\">](#colecurrency__setcurrency)</ept> do set the status to of the object based on the source value(s).","pos":[173,361],"source":" Note that the assignment operator ( [operator =](#colecurrency__operator_eq)) and [SetCurrency](#colecurrency__setcurrency) do set the status to of the object based on the source value(s)."}]}]},{"pos":[23676,23684],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[23688,23736],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>COleVariant Class<ept id=\"p1\">](../../mfc/reference/colevariant-class.md)</ept>","pos":[23739,23801],"source":" [COleVariant Class](../../mfc/reference/colevariant-class.md)"}],"content":"---\ntitle: \"COleCurrency Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CURRENCY\"\n  - \"COleCurrency\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"fixed-point numbers\"\n  - \"numbers, fixed-point\"\n  - \"CURRENCY\"\n  - \"COleCurrency class\"\nms.assetid: 3a36e345-303f-46fb-a57c-858274378a8d\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# COleCurrency Class\nEncapsulates the `CURRENCY` data type of OLE automation.  \n  \n## Syntax  \n  \n```  \nclass COleCurrency  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleCurrency::COleCurrency](#colecurrency__colecurrency)|Constructs a `COleCurrency` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleCurrency::Format](#colecurrency__format)|Generates a formatted string representation of a `COleCurrency` object.|  \n|[COleCurrency::GetStatus](#colecurrency__getstatus)|Gets the status (validity) of this `COleCurrency` object.|  \n|[COleCurrency::ParseCurrency](#colecurrency__parsecurrency)|Reads a **CURRENCY** value from a string and sets the value of `COleCurrency`.|  \n|[COleCurrency::SetCurrency](#colecurrency__setcurrency)|Sets the value of this `COleCurrency` object.|  \n|[COleCurrency::SetStatus](#colecurrency__setstatus)|Sets the status (validity) for this `COleCurrency` object.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[operator =](#colecurrency__operator_eq)|Copies a `COleCurrency` value.|  \n|[operator +, -](#colecurrency__operator_plus_minus)|Adds, subtracts, and changes sign of `COleCurrency` values.|  \n|[operator +=, -=](#colecurrency__operator_plus_minus_eq)|Adds and subtracts a `COleCurrency` value from this `COleCurrency` object.|  \n|[operator */](#colecurrency__operator_star)|Scales a `COleCurrency` value by an integer value.|  \n|[operator *=, /=](#colecurrency__operator_star_div_eq)|Scales this `COleCurrency` value by an integer value.|  \n|[operator <<](#colecurrency__operator_stream)|Outputs a `COleCurrency` value to `CArchive` or `CDumpContext`.|  \n|[operator >>](#colecurrency__operator_stream)|Inputs a `COleCurrency` object from `CArchive`.|  \n|[operator CURRENCY](#colecurrency__operator_currency)|Converts a `COleCurrency` value into a **CURRENCY**.|  \n|[operator ==, <, <=, etc.](#colecurrency_relational_operators)|Compares two `COleCurrency` values.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleCurrency::m_cur](#colecurrency__m_cur)|Contains the underlying **CURRENCY** for this `COleCurrency` object.|  \n|[COleCurrency::m_status](#colecurrency__m_status)|Contains the status of this `COleCurrency` object.|  \n  \n## Remarks  \n **COleCurrency** does not have a base class.  \n  \n **CURRENCY** is implemented as an 8-byte, two's-complement integer value scaled by 10,000. This gives a fixed-point number with 15 digits to the left of the decimal point and 4 digits to the right. The **CURRENCY** data type is extremely useful for calculations involving money, or for any fixed-point calculation where accuracy is important. It is one of the possible types for the `VARIANT` data type of OLE automation.  \n  \n **COleCurrency** also implements some basic arithmetic operations for this fixed-point type. The supported operations have been selected to control the rounding errors which occur during fixed-point calculations.  \n  \n## Inheritance Hierarchy  \n `COleCurrency`  \n  \n## Requirements  \n **Header:** afxdisp.h  \n  \n##  <a name=\"colecurrency__colecurrency\"></a>  COleCurrency::COleCurrency  \n Constructs a **COleCurrency** object.  \n  \n```  \nCOleCurrency();\n\n \nCOleCurrency(\n    CURRENCY cySrc);\n\n \nCOleCurrency(\n    const COleCurrency& curSrc);\n\n \nCOleCurrency(\n    const VARIANT& varSrc);\n\n \nCOleCurrency(\n    long nUnits,  \n    long nFractionalUnits);\n```  \n  \n### Parameters  \n `cySrc`  \n A **CURRENCY** value to be copied into the new **COleCurrency** object.  \n  \n `curSrc`  \n An existing **COleCurrency** object to be copied into the new **COleCurrency** object.  \n  \n *varSrc*  \n An existing **VARIANT** data structure (possibly a `COleVariant` object) to be converted to a currency value ( `VT_CY`) and copied into the new **COleCurrency** object.  \n  \n `nUnits`, `nFractionalUnits`  \n Indicate the units and fractional part (in 1/10,000's) of the value to be copied into the new **COleCurrency** object.  \n  \n### Remarks  \n All of these constructors create new **COleCurrency** objects initialized to the specified value. A brief description of each of these constructors follows. Unless otherwise noted, the status of the new **COleCurrency** item is set to valid.  \n  \n- `COleCurrency(`Â **)**Â Â Â Constructs a **COleCurrency** object initialized to 0 (zero).  \n  \n- `COleCurrency(`Â `cySrc`Â **)**Â Â Â Constructs a **COleCurrency** object from a [CURRENCY](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e) value.  \n  \n- `COleCurrency(`Â `curSrc`Â **)**Â Â Â Constructs a **COleCurrency** object from an existing **COleCurrency** object. The new object has the same status as the source object.  \n  \n- `COleCurrency(`Â *varSrc*Â **)**Â Â Â Constructs a **COleCurrency** object. Attempts to convert a [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) structure or `COleVariant` object to a currency ( `VT_CY`) value. If this conversion is successful, the converted value is copied into the new **COleCurrency** object. If it is not, the value of the **COleCurrency** object is set to zero (0) and its status to invalid.  \n  \n- `COleCurrency(`Â `nUnits`**,** `nFractionalUnits`Â **)**Â Â Â Constructs a **COleCurrency** object from the specified numerical components. If the absolute value of the fractional part is greater than 10,000, the appropriate adjustment is made to the units. Note that the units and fractional part are specified by signed long values.  \n  \n For more information, see the [CURRENCY](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e) and [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following examples show the effects of the zero-parameter and two-parameter constructors:  \n  \n [!code-cpp[NVC_MFCOleContainer#10](../../mfc/codesnippet/cpp/colecurrency-class_1.cpp)]  \n  \n##  <a name=\"colecurrency__format\"></a>  COleCurrency::Format  \n Call this member function to create a formatted representation of the currency value.  \n  \n```  \nCString Format(Â    DWORD  dwFlags = 0,Â    LCID  lcid = LANG_USER_DEFAULT Â) const;\n\n \n \n```  \n  \n### Parameters  \n `dwFlags`  \n Indicates flags for locale settings. Only the following flag is relevant to currency:  \n  \n- **LOCALE_NOUSEROVERRIDE**Â Â Â Use the system default locale settings, rather than custom user settings.  \n  \n `lcid`  \n Indicates locale ID to use for the conversion.  \n  \n### Return Value  \n A `CString` that contains the formatted currency value.  \n  \n### Remarks  \n It formats the value using the local language specifications (locale IDs). A currency symbol is not included in the value returned. If the status of this **COleCurrency** object is null, the return value is an empty string. If the status is invalid, the return string is specified by the string resource **IDS_INVALID_CURRENCY**.  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#11](../../mfc/codesnippet/cpp/colecurrency-class_2.cpp)]  \n  \n##  <a name=\"colecurrency__getstatus\"></a>  COleCurrency::GetStatus  \n Call this member function to get the status (validity) of a given **COleCurrency** object.  \n  \n```  \nCurrencyStatus GetStatus() const;\n\n \n```  \n  \n### Return Value  \n Returns the status of this **COleCurrency** value.  \n  \n### Remarks  \n The return value is defined by the `CurrencyStatus` enumerated type that is defined within the **COleCurrency** class.  \n  \n `enum CurrencyStatus{`  \n  \n `valid = 0,`  \n  \n `invalid = 1,`  \n  \n `null = 2,`  \n  \n `};`  \n  \n For a brief description of these status values, see the following list:  \n  \n- **COleCurrency::valid**Â Â Â Indicates that this **COleCurrency** object is valid.  \n  \n- **COleCurrency::invalid**Â Â Â Indicates that this **COleCurrency** object is invalid; that is, its value may be incorrect.  \n  \n- **COleCurrency::null**Â Â Â Indicates that this **COleCurrency** object is null, that is, that no value has been supplied for this object. (This is \"null\" in the database sense of \"having no value,\" as opposed to the C++ **NULL**.)  \n  \n The status of a **COleCurrency** object is invalid in the following cases:  \n  \n-   If its value is set from a **VARIANT** or `COleVariant` value that could not be converted to a currency value.  \n  \n-   If this object has experienced an overflow or underflow during an arithmetic assignment operation, for example `+=` or **\\*=**.  \n  \n-   If an invalid value was assigned to this object.  \n  \n-   If the status of this object was explicitly set to invalid using [SetStatus](#colecurrency__setstatus).  \n  \n For more information on operations that may set the status to invalid, see the following member functions:  \n  \n- [COleCurrency](#colecurrency__colecurrency)  \n  \n- [operator =](#colecurrency__operator_eq)  \n  \n- [operator + -](#colecurrency__operator_plus_minus)  \n  \n- [operator += and -=](#colecurrency__operator_plus_minus_eq)  \n  \n- [operator * /](#colecurrency__operator_star)  \n  \n- [operator *= and /=](#colecurrency__operator_star_div_eq)  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#12](../../mfc/codesnippet/cpp/colecurrency-class_3.cpp)]  \n  \n##  <a name=\"colecurrency__m_cur\"></a>  COleCurrency::m_cur  \n The underlying [CURRENCY](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e) structure for this **COleCurrency** object.  \n  \n### Remarks  \n  \n> [!CAUTION]\n>  Changing the value in the **CURRENCY** structure accessed by the pointer returned by this function will change the value of this **COleCurrency** object. It does not change the status of this **COleCurrency** object.  \n  \n For more information, see the [CURRENCY](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e) entry in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"colecurrency__m_status\"></a>  COleCurrency::m_status  \n The type of this data member is the enumerated type `CurrencyStatus`, which is defined within the **COleCurrency** class.  \n  \n```  \nenum CurrencyStatus{  \n    valid = 0,  \n    invalid = 1,  \n    null = 2,  \n};  \n```  \n  \n### Remarks  \n For a brief description of these status values, see the following list:  \n  \n- **COleCurrency::valid**Â Â Â Indicates that this **COleCurrency** object is valid.  \n  \n- **COleCurrency::invalid**Â Â Â Indicates that this **COleCurrency** object is invalid; that is, its value may be incorrect.  \n  \n- **COleCurrency::null**Â Â Â Indicates that this **COleCurrency** object is null, that is, that no value has been supplied for this object. (This is \"null\" in the database sense of \"having no value,\" as opposed to the C++ **NULL**.)  \n  \n The status of a **COleCurrency** object is invalid in the following cases:  \n  \n-   If its value is set from a **VARIANT** or `COleVariant` value that could not be converted to a currency value.  \n  \n-   If this object has experienced an overflow or underflow during an arithmetic assignment operation, for example `+=` or **\\*=**.  \n  \n-   If an invalid value was assigned to this object.  \n  \n-   If the status of this object was explicitly set to invalid using [SetStatus](#colecurrency__setstatus).  \n  \n For more information on operations that may set the status to invalid, see the following member functions:  \n  \n- [COleCurrency](#colecurrency__colecurrency)  \n  \n- [operator =](#colecurrency__operator_eq)  \n  \n- [operator +, -](#colecurrency__operator_plus_minus)  \n  \n- [operator +=, -=](#colecurrency__operator_plus_minus_eq)  \n  \n- [operator */](#colecurrency__operator_star)  \n  \n- [operator *=, /=](#colecurrency__operator_star_div_eq)  \n  \n    > [!CAUTION]\n    >  This data member is for advanced programming situations. You should use the inline member functions [GetStatus](#colecurrency__getstatus) and [SetStatus](#colecurrency__setstatus). See `SetStatus` for further cautions regarding explicitly setting this data member.  \n  \n##  <a name=\"colecurrency__operator_eq\"></a>  COleCurrency::operator =  \n These overloaded assignment operators copy the source currency value into this **COleCurrency** object.  \n  \n```  \nconst COleCurrency& operator=(CURRENCY cySrc);\n\n \nconst COleCurrency& operator=(const COleCurrency& curSrc);\n\n \nconst COleCurrency& operator=(const VARIANT& varSrc);\n```  \n  \n### Remarks  \n A brief description of each operator follows:  \n  \n- **operator =(** `cySrc` **)**Â Â Â The `CURRENCY` value is copied into the **COleCurrency** object and its status is set to valid.  \n  \n- **operator =(** `curSrc` **)**Â Â Â The value and status of the operand, an existing **COleCurrency** object are copied into this **COleCurrency** object.  \n  \n- **operator =(** *varSrc* **)**Â Â Â If the conversion of the `VARIANT` value (or [COleVariant](../../mfc/reference/colevariant-class.md) object) to a currency ( `VT_CY`) is successful, the converted value is copied into this **COleCurrency** object and its status is set to valid. If the conversion is not successful, the value of the **COleCurrency** object is set to 0 and its status to invalid.  \n  \n For more information, see the [CURRENCY](http://msdn.microsoft.com/en-us/5e81273c-7289-45c7-93c0-32c1553f708e) and [VARIANT](http://msdn.microsoft.com/en-us/e305240e-9e11-4006-98cc-26f4932d2118) entries in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#15](../../mfc/codesnippet/cpp/colecurrency-class_4.cpp)]  \n  \n##  <a name=\"colecurrency__operator_plus_minus\"></a>  COleCurrency::operator +, -  \n These operators allow you to add and subtract two **COleCurrency** values to and from each other and to change the sign of a **COleCurrency** value.  \n  \n```  \nCOleCurrency operator+(const COleCurrency& cur) const;\n\n \n \nCOleCurrency operator-(const COleCurrency& cur) const;\n\n \n \nCOleCurrency operator-() const;\n\n \n```  \n  \n### Remarks  \n If either of the operands is null, the status of the resulting **COleCurrency** value is null.  \n  \n If the arithmetic operation overflows, the resulting **COleCurrency** value is invalid.  \n  \n If the operand is invalid and the other is not null, the status of the resulting **COleCurrency** value is invalid.  \n  \n For more information on the valid, invalid, and null status values, see the [m_status](#colecurrency__m_status) member variable.  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#16](../../mfc/codesnippet/cpp/colecurrency-class_5.cpp)]  \n  \n##  <a name=\"colecurrency__operator_plus_minus_eq\"></a>  COleCurrency::operator +=, -=  \n Allow you to add and subtract a **COleCurrency** value to and from this **COleCurrency** object.  \n  \n```  \nconst COleCurrency& operator+=(const COleCurrency& cur);\n\n \nconst COleCurrency& operator-=(const COleCurrency& cur);\n```  \n  \n### Remarks  \n If either of the operands is null, the status of this **COleCurrency** object is set to null.  \n  \n If the arithmetic operation overflows, the status of this **COleCurrency** object is set to invalid.  \n  \n If either of the operands is invalid and the other is not null, the status of this **COleCurrency** object is set to invalid.  \n  \n For more information on the valid, invalid, and null status values, see the [m_status](#colecurrency__m_status) member variable.  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#17](../../mfc/codesnippet/cpp/colecurrency-class_6.cpp)]  \n  \n##  <a name=\"colecurrency__operator_star\"></a>  COleCurrency::operator * and /  \n Allow you to scale a **COleCurrency** value by an integral value.  \n  \n```  \nCOleCurrency operator*(long nOperand) const;\n\n \n \nCOleCurrency operator/(long nOperand) const;\n\n \n```  \n  \n### Remarks  \n If the **COleCurrency** operand is null, the status of the resulting **COleCurrency** value is null.  \n  \n If the arithmetic operation overflows or underflows, the status of the resulting **COleCurrency** value is invalid.  \n  \n If the **COleCurrency** operand is invalid, the status of the resulting **COleCurrency** value is invalid.  \n  \n For more information on the valid, invalid, and null status values, see the [m_status](#colecurrency__m_status) member variable.  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#18](../../mfc/codesnippet/cpp/colecurrency-class_7.cpp)]  \n  \n##  <a name=\"colecurrency__operator_star_div_eq\"></a>  COleCurrency::operator *=, /=  \n Allow you to scale this **COleCurrency** value by an integral value.  \n  \n```  \nconst COleCurrency& operator*=(long nOperand);\n\n \nconst COleCurrency& operator/=(long nOperand);\n```  \n  \n### Remarks  \n If the **COleCurrency** operand is null, the status of this **COleCurrency** object is set to null.  \n  \n If the arithmetic operation overflows, the status of this **COleCurrency** object is set to invalid.  \n  \n If the **COleCurrency** operand is invalid, the status of this **COleCurrency** object is set to invalid.  \n  \n For more information on the valid, invalid, and null status values, see the [m_status](#colecurrency__m_status) member variable.  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#19](../../mfc/codesnippet/cpp/colecurrency-class_8.cpp)]  \n  \n##  <a name=\"colecurrency__operator_stream\"></a>  COleCurrency::operator &lt;&lt;, &gt;&gt;  \n Supports diagnostic dumping and storing to an archive.  \n  \n```  \nfriend CDumpContext& operator<<(\n    CDumpContext& dc,  \n    COleCurrency curSrc);\n\n \nfriend CArchive& operator<<(\n    CArchive& ar,  \n    COleCurrency curSrc);\n\n \nfriend CArchive& operator>>(\n    CArchive& ar,  \n    COleCurrency& curSrc);\n```  \n  \n### Remarks  \n The extraction ( **>>**) operator supports loading from an archive.  \n  \n##  <a name=\"colecurrency__operator_currency\"></a>  COleCurrency::operator CURRENCY  \n Returns a `CURRENCY` structure whose value is copied from this **COleCurrency** object.  \n  \n```  \noperator CURRENCY() const;\n\n \n```  \n  \n### Remarks  \n  \n##  <a name=\"colecurrency__parsecurrency\"></a>  COleCurrency::ParseCurrency  \n Call this member function to parse a string to read a currency value.  \n  \n```  \nBOOL ParseCurrency(\n    LPCTSTR lpszCurrency,  \n    DWORD dwFlags = 0,  \n    LCID lcid = LANG_USER_DEFAULT);\n\n \nthrow(\n    CMemoryException*);\n\n \nthrow(\n    COleException*);\n```  \n  \n### Parameters  \n *lpszCurrency*  \n A pointer to the null-terminated string which is to be parsed.  \n  \n `dwFlags`  \n Indicates flags for locale settings, possibly the following flag:  \n  \n- **LOCALE_NOUSEROVERRIDE**Â Â Â Use the system default locale settings, rather than custom user settings.  \n  \n `lcid`  \n Indicates locale ID to use for the conversion.  \n  \n### Return Value  \n Nonzero if the string was successfully converted to a currency value, otherwise 0.  \n  \n### Remarks  \n It uses local language specifications (locale IDs) for the meaning of nonnumeric characters in the source string.  \n  \n For a discussion of locale ID values, see [Supporting Multiple Languages](http://msdn.microsoft.com/en-us/47dc5add-232c-4268-b977-43e12da81ede).  \n  \n If the string was successfully converted to a currency value, the value of this **COleCurrency** object is set to that value and its status to valid.  \n  \n If the string could not be converted to a currency value or if there was a numerical overflow, the status of this **COleCurrency** object is invalid.  \n  \n If the string conversion failed due to memory allocation errors, this function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md). In any other error state, this function throws a [COleException](../../mfc/reference/coleexception-class.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#13](../../mfc/codesnippet/cpp/colecurrency-class_9.cpp)]  \n  \n##  <a name=\"colecurrency_relational_operators\"></a>  COleCurrency Relational Operators  \n Compare two currency values and return nonzero if the condition is true; otherwise 0.  \n  \n```  \nBOOL operator==(const COleCurrency& cur) const;\n\n \n \nBOOL operator!=(const COleCurrency& cur) const;\n\n \n \nBOOL operator<(const COleCurrency& cur) const;\n\n \n \nBOOL operator>(const COleCurrency& cur) const;\n\n \n \nBOOL operator<=(const COleCurrency& cur) const;\n\n \n \nBOOL operator>=(const COleCurrency& cur) const;\n\n \n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  The return value of the ordering operations ( **<**, **\\<=**, **>**, **>=**) is undefined if the status of either operand is null or invalid. The equality operators ( `==`, `!=`) consider the status of the operands.  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#20](../../mfc/codesnippet/cpp/colecurrency-class_10.cpp)]  \n  \n##  <a name=\"colecurrency__setcurrency\"></a>  COleCurrency::SetCurrency  \n Call this member function to set the units and fractional part of this **COleCurrency** object.  \n  \n```  \nvoid SetCurrency(\n    long nUnits,  \n    long nFractionalUnits);\n```  \n  \n### Parameters  \n `nUnits`, `nFractionalUnits`  \n Indicate the units and fractional part (in 1/10,000's) of the value to be copied into this **COleCurrency** object.  \n  \n### Remarks  \n If the absolute value of the fractional part is greater than 10,000, the appropriate adjustment is made to the units, as shown in the third of the following examples.  \n  \n Note that the units and fractional part are specified by signed long values. The fourth of the following examples shows what happens when the parameters have different signs.  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#14](../../mfc/codesnippet/cpp/colecurrency-class_11.cpp)]  \n  \n##  <a name=\"colecurrency__setstatus\"></a>  COleCurrency::SetStatus  \n Call this member function to set the status (validity) of this **COleCurrency** object.  \n  \n```  \nvoid SetStatus(Â    CurrencyStatus  status Â);\n\n \n```  \n  \n### Parameters  \n *status*  \n The new status for this **COleCurrency** object.  \n  \n### Remarks  \n The *status* parameter value is defined by the `CurrencyStatus` enumerated type, which is defined within the **COleCurrency** class.  \n  \n `enum CurrencyStatus{`  \n  \n `valid = 0,`  \n  \n `invalid = 1,`  \n  \n `null = 2,`  \n  \n `};`  \n  \n For a brief description of these status values, see the following list:  \n  \n- **COleCurrency::valid**Â Â Â Indicates that this **COleCurrency** object is valid.  \n  \n- **COleCurrency::invalid**Â Â Â Indicates that this **COleCurrency** object is invalid; that is, its value may be incorrect.  \n  \n- **COleCurrency::null**Â Â Â Indicates that this **COleCurrency** object is null, that is, that no value has been supplied for this object. (This is \"null\" in the database sense of \"having no value,\" as opposed to the C++ **NULL**.)  \n  \n    > [!CAUTION]\n    >  This function is for advanced programming situations. This function does not alter the data in this object. It will most often be used to set the status to null or invalid. Note that the assignment operator ( [operator =](#colecurrency__operator_eq)) and [SetCurrency](#colecurrency__setcurrency) do set the status to of the object based on the source value(s).  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [COleVariant Class](../../mfc/reference/colevariant-class.md)\n"}