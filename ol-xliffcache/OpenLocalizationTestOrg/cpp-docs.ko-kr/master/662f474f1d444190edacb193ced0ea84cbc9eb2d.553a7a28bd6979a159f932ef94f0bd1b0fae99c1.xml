{"nodes":[{"pos":[12,45],"content":"Boxing (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Boxing (C++-CLI) | Microsoft Docs","pos":[0,33]}]},{"content":"Boxing (C++/CLI)","pos":[525,541]},{"content":"Boxing is the process of converting a value type to the type <ph id=\"ph1\">`object`</ph> or to any interface type that's implemented by the value type.","pos":[542,674],"source":"Boxing is the process of converting a value type to the type `object` or to any interface type that's implemented by the value type."},{"content":"When the common language runtime (CLR) boxes a value type, it wraps the value in a <ph id=\"ph1\">`System.Object`</ph> and stores it on the managed heap.","pos":[675,808],"source":" When the common language runtime (CLR) boxes a value type, it wraps the value in a `System.Object` and stores it on the managed heap."},{"content":"Unboxing extracts the value type from the object.","pos":[809,858]},{"content":"Boxing is implicit; unboxing is explicit.","pos":[859,900]},{"content":"Related Articles","pos":[909,925]},{"content":"Title","pos":[932,937]},{"content":"Description","pos":[938,949]},{"content":"How to: Explicitly Request Boxing","pos":[989,1022]},{"content":"Describes how to explicitly request boxing on a variable.","pos":[1071,1128]},{"content":"How to: Use gcnew to Create Value Types and Use Implicit Boxing","pos":[1134,1197]},{"pos":[1276,1388],"content":"Shows how to use <ph id=\"ph1\">`gcnew`</ph> to create a boxed value type that can be placed on the managed, garbage-collected heap.","source":"Shows how to use `gcnew` to create a boxed value type that can be placed on the managed, garbage-collected heap."},{"content":"How to: Unbox","pos":[1394,1407]},{"content":"Shows how to unbox and modify a value.","pos":[1436,1474]},{"content":"Standard Conversions and Implicit Boxing","pos":[1480,1520]},{"content":"Shows that a standard conversion is chosen by the compiler over a conversion that requires boxing.","pos":[1577,1675]},{"content":".NET Programming with C++/CLI (Visual C++)","pos":[1681,1723]},{"content":"The top-level article for .NET programming in the Visual C++ documentation.","pos":[1782,1857]}],"content":"---\ntitle: \"Boxing (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: f4ee27a8-6a34-432d-b9ec-39285d513b23\ncaps.latest.revision: 3\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Boxing (C++/CLI)\nBoxing is the process of converting a value type to the type `object` or to any interface type that's implemented by the value type. When the common language runtime (CLR) boxes a value type, it wraps the value in a `System.Object` and stores it on the managed heap. Unboxing extracts the value type from the object. Boxing is implicit; unboxing is explicit.  \n  \n## Related Articles  \n  \n|Title|Description|  \n|-----------|-----------------|  \n|[How to: Explicitly Request Boxing](../dotnet/how-to-explicitly-request-boxing.md)|Describes how to explicitly request boxing on a variable.|  \n|[How to: Use gcnew to Create Value Types and Use Implicit Boxing](../dotnet/how-to-use-gcnew-to-create-value-types-and-use-implicit-boxing.md)|Shows how to use `gcnew` to create a boxed value type that can be placed on the managed, garbage-collected heap.|  \n|[How to: Unbox](../dotnet/how-to-unbox.md)|Shows how to unbox and modify a value.|  \n|[Standard Conversions and Implicit Boxing](../dotnet/standard-conversions-and-implicit-boxing.md)|Shows that a standard conversion is chosen by the compiler over a conversion that requires boxing.|  \n|[.NET Programming with C++/CLI (Visual C++)](../dotnet/dotnet-programming-with-cpp-cli-visual-cpp.md)|The top-level article for .NET programming in the Visual C++ documentation.|"}