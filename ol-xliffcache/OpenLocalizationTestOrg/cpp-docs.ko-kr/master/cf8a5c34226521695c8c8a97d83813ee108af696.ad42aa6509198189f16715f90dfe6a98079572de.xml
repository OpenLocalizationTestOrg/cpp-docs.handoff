{"nodes":[{"pos":[12,48],"content":"CInternetFile Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CInternetFile Class | Microsoft Docs","pos":[0,36]}]},{"pos":[676,695],"content":"CInternetFile Class","linkify":"CInternetFile Class","nodes":[{"content":"CInternetFile Class","pos":[0,19]}]},{"content":"Allows access to files on remote systems that use Internet protocols.","pos":[696,765]},{"pos":[774,780],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[846,853],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[863,885],"content":"Protected Constructors","linkify":"Protected Constructors","nodes":[{"content":"Protected Constructors","pos":[0,22]}]},{"content":"Name","pos":[892,896]},{"content":"Description","pos":[897,908]},{"pos":[946,1007],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::CInternetFile<ept id=\"p1\">](#cinternetfile__cinternetfile)</ept>","source":"[CInternetFile::CInternetFile](#cinternetfile__cinternetfile)"},{"pos":[1008,1044],"content":"Constructs a <ph id=\"ph1\">`CInternetFile`</ph> object.","source":"Constructs a `CInternetFile` object."},{"pos":[1055,1069],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1076,1080]},{"content":"Description","pos":[1081,1092]},{"pos":[1130,1175],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::Abort<ept id=\"p1\">](#cinternetfile__abort)</ept>","source":"[CInternetFile::Abort](#cinternetfile__abort)"},{"content":"Closes the file, ignoring all warnings and errors.","pos":[1176,1226]},{"pos":[1231,1276],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::Close<ept id=\"p1\">](#cinternetfile__close)</ept>","source":"[CInternetFile::Close](#cinternetfile__close)"},{"pos":[1277,1326],"content":"Closes a <ph id=\"ph1\">`CInternetFile`</ph> and frees its resources.","source":"Closes a `CInternetFile` and frees its resources."},{"pos":[1331,1376],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::Flush<ept id=\"p1\">](#cinternetfile__flush)</ept>","source":"[CInternetFile::Flush](#cinternetfile__flush)"},{"content":"Flushes the contents of the write buffer and makes sure the data in memory is written to the target machine.","pos":[1377,1485]},{"pos":[1490,1543],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::GetLength<ept id=\"p1\">](#cinternetfile__getlength)</ept>","source":"[CInternetFile::GetLength](#cinternetfile__getlength)"},{"content":"Returns the size of the file.","pos":[1544,1573]},{"pos":[1578,1621],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::Read<ept id=\"p1\">](#cinternetfile__read)</ept>","source":"[CInternetFile::Read](#cinternetfile__read)"},{"content":"Reads the number of specified bytes.","pos":[1622,1658]},{"pos":[1663,1718],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::ReadString<ept id=\"p1\">](#cinternetfile__readstring)</ept>","source":"[CInternetFile::ReadString](#cinternetfile__readstring)"},{"content":"Reads a stream of characters.","pos":[1719,1748]},{"pos":[1753,1796],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::Seek<ept id=\"p1\">](#cinternetfile__seek)</ept>","source":"[CInternetFile::Seek](#cinternetfile__seek)"},{"content":"Repositions the pointer in an open file.","pos":[1797,1837]},{"pos":[1842,1911],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::SetReadBufferSize<ept id=\"p1\">](#cinternetfile__setreadbuffersize)</ept>","source":"[CInternetFile::SetReadBufferSize](#cinternetfile__setreadbuffersize)"},{"content":"Sets the size of the buffer where data will be read.","pos":[1912,1964]},{"pos":[1969,2040],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::SetWriteBufferSize<ept id=\"p1\">](#cinternetfile__setwritebuffersize)</ept>","source":"[CInternetFile::SetWriteBufferSize](#cinternetfile__setwritebuffersize)"},{"content":"Sets the size of the buffer where data will be written.","pos":[2041,2096]},{"pos":[2101,2146],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::Write<ept id=\"p1\">](#cinternetfile__write)</ept>","source":"[CInternetFile::Write](#cinternetfile__write)"},{"content":"Writes the number of specified bytes.","pos":[2147,2184]},{"pos":[2189,2246],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::WriteString<ept id=\"p1\">](#cinternetfile__writestring)</ept>","source":"[CInternetFile::WriteString](#cinternetfile__writestring)"},{"content":"Writes a null-terminated string to a file.","pos":[2247,2289]},{"pos":[2300,2316],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[2323,2327]},{"content":"Description","pos":[2328,2339]},{"pos":[2377,2448],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::operator HINTERNET<ept id=\"p1\">](#cinternetfile__operator_hinternet)</ept>","source":"[CInternetFile::operator HINTERNET](#cinternetfile__operator_hinternet)"},{"content":"A casting operator for an Internet handle.","pos":[2449,2491]},{"pos":[2502,2524],"content":"Protected Data Members","linkify":"Protected Data Members","nodes":[{"content":"Protected Data Members","pos":[0,22]}]},{"content":"Name","pos":[2531,2535]},{"content":"Description","pos":[2536,2547]},{"pos":[2585,2634],"content":"<bpt id=\"p1\">[</bpt>CInternetFile::m_hFile<ept id=\"p1\">](#cinternetfile__m_hfile)</ept>","source":"[CInternetFile::m_hFile](#cinternetfile__m_hfile)"},{"content":"A handle to a file.","pos":[2635,2654]},{"pos":[2664,2671],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Provides a base class for the <bpt id=\"p1\">[</bpt>CHttpFile<ept id=\"p1\">](../../mfc/reference/chttpfile-class.md)</ept> and <bpt id=\"p2\">[</bpt>CGopherFile<ept id=\"p2\">](../../mfc/reference/cgopherfile-class.md)</ept> file classes.","pos":[2675,2830],"source":"Provides a base class for the [CHttpFile](../../mfc/reference/chttpfile-class.md) and [CGopherFile](../../mfc/reference/cgopherfile-class.md) file classes."},{"content":"You never create a <ph id=\"ph1\">`CInternetFile`</ph> object directly.","pos":[2831,2882],"source":" You never create a `CInternetFile` object directly."},{"content":"Instead, create an object of one of its derived classes by calling <bpt id=\"p1\">[</bpt>CGopherConnection::OpenFile<ept id=\"p1\">](../../mfc/reference/cgopherconnection-class.md#cgopherconnection__openfile)</ept> or <bpt id=\"p2\">[</bpt>CHttpConnection::OpenRequest<ept id=\"p2\">](../../mfc/reference/chttpconnection-class.md#chttpconnection__openrequest)</ept>.","pos":[2883,3165],"source":" Instead, create an object of one of its derived classes by calling [CGopherConnection::OpenFile](../../mfc/reference/cgopherconnection-class.md#cgopherconnection__openfile) or [CHttpConnection::OpenRequest](../../mfc/reference/chttpconnection-class.md#chttpconnection__openrequest)."},{"content":"You also can create a <ph id=\"ph1\">`CInternetFile`</ph> object by calling <bpt id=\"p1\">[</bpt>CFtpConnection::OpenFile<ept id=\"p1\">](../../mfc/reference/cftpconnection-class.md#cftpconnection__openfile)</ept>.","pos":[3166,3319],"source":" You also can create a `CInternetFile` object by calling [CFtpConnection::OpenFile](../../mfc/reference/cftpconnection-class.md#cftpconnection__openfile)."},{"content":"The <ph id=\"ph1\">`CInternetFile`</ph> member functions <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept>, <ph id=\"ph2\">`LockRange`</ph>, <ph id=\"ph3\">`UnlockRange`</ph>, and <ph id=\"ph4\">`Duplicate`</ph> are not implemented for <ph id=\"ph5\">`CInternetFile`</ph>.","pos":[3326,3457],"source":"The `CInternetFile` member functions **Open**, `LockRange`, `UnlockRange`, and `Duplicate` are not implemented for `CInternetFile`."},{"content":"If you call these functions on a <ph id=\"ph1\">`CInternetFile`</ph> object, you will get a <bpt id=\"p1\">[</bpt>CNotSupportedException<ept id=\"p1\">](../../mfc/reference/cnotsupportedexception-class.md)</ept>.","pos":[3458,3608],"source":" If you call these functions on a `CInternetFile` object, you will get a [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md)."},{"pos":[3615,3798],"content":"To learn more about how <ph id=\"ph1\">`CInternetFile`</ph> works with the other MFC Internet classes, see the article <bpt id=\"p1\">[</bpt>Internet Programming with WinInet<ept id=\"p1\">](../../mfc/win32-internet-extensions-wininet.md)</ept>.","source":"To learn more about how `CInternetFile` works with the other MFC Internet classes, see the article [Internet Programming with WinInet](../../mfc/win32-internet-extensions-wininet.md)."},{"pos":[3807,3828],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3832,3879],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[3886,3929],"content":"<bpt id=\"p1\">[</bpt>CFile<ept id=\"p1\">](../../mfc/reference/cfile-class.md)</ept>","source":"[CFile](../../mfc/reference/cfile-class.md)"},{"pos":[3936,3989],"content":"<bpt id=\"p1\">[</bpt>CStdioFile<ept id=\"p1\">](../../mfc/reference/cstdiofile-class.md)</ept>","source":"[CStdioFile](../../mfc/reference/cstdiofile-class.md)"},{"pos":[4020,4032],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4036,4057],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxinet.h","source":"**Header:** afxinet.h"},{"pos":[4067,4124],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__abort\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::Abort","linkify":"<a name=\"cinternetfile__abort\"></a>  CInternetFile::Abort","source":"<a name=\"cinternetfile__abort\"></a>  CInternetFile::Abort"},{"content":"Closes the file associated with this object and makes the file unavailable for reading or writing.","pos":[4128,4226]},{"pos":[4273,4280],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you have not closed the file before destroying the object, the destructor closes it for you.","pos":[4284,4379]},{"content":"When handling exceptions, <bpt id=\"p1\">**</bpt>Abort<ept id=\"p1\">**</ept> differs from <bpt id=\"p2\">[</bpt>Close<ept id=\"p2\">](#cinternetfile__close)</ept> in two important ways.","pos":[4386,4488],"source":"When handling exceptions, **Abort** differs from [Close](#cinternetfile__close) in two important ways."},{"content":"First, the <bpt id=\"p1\">**</bpt>Abort<ept id=\"p1\">**</ept> function does not throw an exception on failures because it ignores failures.","pos":[4489,4587],"source":" First, the **Abort** function does not throw an exception on failures because it ignores failures."},{"content":"Second, <bpt id=\"p1\">**</bpt>Abort<ept id=\"p1\">**</ept> does not <bpt id=\"p2\">**</bpt>ASSERT<ept id=\"p2\">**</ept> if the file has not been opened or was closed previously.","pos":[4588,4683],"source":" Second, **Abort** does not **ASSERT** if the file has not been opened or was closed previously."},{"pos":[4693,4766],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__cinternetfile\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::CInternetFile","linkify":"<a name=\"cinternetfile__cinternetfile\"></a>  CInternetFile::CInternetFile","source":"<a name=\"cinternetfile__cinternetfile\"></a>  CInternetFile::CInternetFile"},{"pos":[4770,4842],"content":"This member function is called when a <ph id=\"ph1\">`CInternetFile`</ph> object is created.","source":"This member function is called when a `CInternetFile` object is created."},{"pos":[5163,5173],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A handle to an Internet file.","pos":[5188,5217]},{"content":"A pointer to a string containing the file name.","pos":[5242,5289]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CInternetConnection<ept id=\"p1\">](../../mfc/reference/cinternetconnection-class.md)</ept> object.","pos":[5313,5407],"source":" A pointer to a [CInternetConnection](../../mfc/reference/cinternetconnection-class.md) object."},{"content":"<bpt id=\"p1\">*</bpt>bReadMode<ept id=\"p1\">*</ept>","pos":[5414,5425],"source":"*bReadMode*"},{"content":"Indicates whether the file is read-only.","pos":[5429,5469]},{"content":"A handle to an Internet session.","pos":[5490,5522]},{"content":"A pointer to a string containing the name of the server.","pos":[5545,5601]},{"content":"The context identifier for the <ph id=\"ph1\">`CInternetFile`</ph> object.","pos":[5623,5677],"source":" The context identifier for the `CInternetFile` object."},{"content":"See <bpt id=\"p1\">[</bpt>WinInet Basics<ept id=\"p1\">](../../mfc/wininet-basics.md)</ept> for more information about the context identifier.","pos":[5678,5778],"source":" See [WinInet Basics](../../mfc/wininet-basics.md) for more information about the context identifier."},{"pos":[5788,5795],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You never create a <ph id=\"ph1\">`CInternetFile`</ph> object directly.","pos":[5799,5850],"source":"You never create a `CInternetFile` object directly."},{"content":"Instead, create an object of one of its derived classes by calling <bpt id=\"p1\">[</bpt>CGopherConnection::OpenFile<ept id=\"p1\">](../../mfc/reference/cgopherconnection-class.md#cgopherconnection__openfile)</ept> or <bpt id=\"p2\">[</bpt>CHttpConnection::OpenRequest<ept id=\"p2\">](../../mfc/reference/chttpconnection-class.md#chttpconnection__openrequest)</ept>.","pos":[5851,6133],"source":" Instead, create an object of one of its derived classes by calling [CGopherConnection::OpenFile](../../mfc/reference/cgopherconnection-class.md#cgopherconnection__openfile) or [CHttpConnection::OpenRequest](../../mfc/reference/chttpconnection-class.md#chttpconnection__openrequest)."},{"content":"You also can create a <ph id=\"ph1\">`CInternetFile`</ph> object by calling <bpt id=\"p1\">[</bpt>CFtpConnection::OpenFile<ept id=\"p1\">](../../mfc/reference/cftpconnection-class.md#cftpconnection__openfile)</ept>.","pos":[6134,6287],"source":" You also can create a `CInternetFile` object by calling [CFtpConnection::OpenFile](../../mfc/reference/cftpconnection-class.md#cftpconnection__openfile)."},{"pos":[6297,6354],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__close\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::Close","linkify":"<a name=\"cinternetfile__close\"></a>  CInternetFile::Close","source":"<a name=\"cinternetfile__close\"></a>  CInternetFile::Close"},{"pos":[6358,6414],"content":"Closes a <ph id=\"ph1\">`CInternetFile`</ph> and frees any of its resources.","source":"Closes a `CInternetFile` and frees any of its resources."},{"pos":[6461,6468],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the file was opened for writing, there is an implicit call to <bpt id=\"p1\">[</bpt>Flush<ept id=\"p1\">](#cinternetfile__flush)</ept> to assure that all buffered data is written to the host.","pos":[6472,6624],"source":"If the file was opened for writing, there is an implicit call to [Flush](#cinternetfile__flush) to assure that all buffered data is written to the host."},{"content":"You should call <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> when you are finished using a file.","pos":[6625,6686],"source":" You should call **Close** when you are finished using a file."},{"pos":[6696,6753],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__flush\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::Flush","linkify":"<a name=\"cinternetfile__flush\"></a>  CInternetFile::Flush","source":"<a name=\"cinternetfile__flush\"></a>  CInternetFile::Flush"},{"content":"Call this member function to flush the contents of the write buffer.","pos":[6757,6825]},{"pos":[6872,6879],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use <ph id=\"ph1\">`Flush`</ph> to assure that all data in memory has actually been written to the target machine and to assure your transaction with the host machine has been completed.","pos":[6883,7049],"source":"Use `Flush` to assure that all data in memory has actually been written to the target machine and to assure your transaction with the host machine has been completed."},{"content":"<ph id=\"ph1\">`Flush`</ph> is only effective on <ph id=\"ph2\">`CInternetFile`</ph> objects opened for writing.","pos":[7050,7122],"source":"`Flush` is only effective on `CInternetFile` objects opened for writing."},{"pos":[7132,7197],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__getlength\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::GetLength","linkify":"<a name=\"cinternetfile__getlength\"></a>  CInternetFile::GetLength","source":"<a name=\"cinternetfile__getlength\"></a>  CInternetFile::GetLength"},{"content":"Returns the size of the file.","pos":[7201,7230]},{"pos":[7295,7356],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__m_hfile\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::m_hFile","linkify":"<a name=\"cinternetfile__m_hfile\"></a>  CInternetFile::m_hFile","source":"<a name=\"cinternetfile__m_hfile\"></a>  CInternetFile::m_hFile"},{"content":"A handle to the file associated with this object.","pos":[7360,7409]},{"pos":[7455,7538],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__operator_hinternet\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::operator HINTERNET","linkify":"<a name=\"cinternetfile__operator_hinternet\"></a>  CInternetFile::operator HINTERNET","source":"<a name=\"cinternetfile__operator_hinternet\"></a>  CInternetFile::operator HINTERNET"},{"content":"Use this operator to get the Windows handle for the current Internet session.","pos":[7542,7619]},{"pos":[7675,7730],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__read\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::Read","linkify":"<a name=\"cinternetfile__read\"></a>  CInternetFile::Read","source":"<a name=\"cinternetfile__read\"></a>  CInternetFile::Read"},{"pos":[7734,7853],"content":"Call this member function to read into the given memory, starting at <ph id=\"ph1\">`lpvBuf`</ph>, the specified number of bytes, <ph id=\"ph2\">`nCount`</ph>.","source":"Call this member function to read into the given memory, starting at `lpvBuf`, the specified number of bytes, `nCount`."},{"pos":[7934,7944],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a memory address to which file data is read.","pos":[7959,8016]},{"content":"The number of bytes to be written.","pos":[8035,8069]},{"pos":[8079,8091],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of bytes transferred to the buffer.","pos":[8095,8141]},{"content":"The return value may be less than <ph id=\"ph1\">`nCount`</ph> if the end of file was reached.","pos":[8142,8216],"source":" The return value may be less than `nCount` if the end of file was reached."},{"pos":[8226,8233],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The function returns the number of bytes actually read — a number that may be less than <ph id=\"ph1\">`nCount`</ph> if the file ends.","pos":[8237,8351],"source":"The function returns the number of bytes actually read — a number that may be less than `nCount` if the file ends."},{"content":"If an error occurs while reading the file, the function throws a <bpt id=\"p1\">[</bpt>CInternetException<ept id=\"p1\">](../../mfc/reference/cinternetexception-class.md)</ept> object that describes the error.","pos":[8352,8519],"source":" If an error occurs while reading the file, the function throws a [CInternetException](../../mfc/reference/cinternetexception-class.md) object that describes the error."},{"content":"Note that reading past the end of the file is not considered an error and no exception will be thrown.","pos":[8520,8622]},{"pos":[8629,8764],"content":"To ensure all data is retrieved, an application must continue to call the <bpt id=\"p1\">**</bpt>CInternetFile::Read<ept id=\"p1\">**</ept> method until the method returns zero.","source":"To ensure all data is retrieved, an application must continue to call the **CInternetFile::Read** method until the method returns zero."},{"pos":[8774,8841],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__readstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::ReadString","linkify":"<a name=\"cinternetfile__readstring\"></a>  CInternetFile::ReadString","source":"<a name=\"cinternetfile__readstring\"></a>  CInternetFile::ReadString"},{"content":"Call this member function to read a stream of characters until it finds a newline character.","pos":[8845,8937]},{"pos":[9075,9085],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a string which will receive the line being read.","pos":[9099,9160]},{"content":"The maximum number of characters to be read.","pos":[9177,9221]},{"content":"A reference to the <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> object that receives the read line.","pos":[9241,9355],"source":" A reference to the [CString](../../atl-mfc-shared/reference/cstringt-class.md) object that receives the read line."},{"pos":[9365,9377],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the buffer containing plain data retrieved from the <bpt id=\"p1\">[</bpt>CInternetFile<ept id=\"p1\">](../../mfc/reference/cinternetfile-class.md)</ept> object.","pos":[9381,9513],"source":"A pointer to the buffer containing plain data retrieved from the [CInternetFile](../../mfc/reference/cinternetfile-class.md) object."},{"content":"Regardless of the data type of the buffer passed to this method, it does not perform any manipulations on the data (for example, conversion to Unicode), so you must map the returned data to the structure you expect, as if the <bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> type were returned.","pos":[9514,9770],"source":" Regardless of the data type of the buffer passed to this method, it does not perform any manipulations on the data (for example, conversion to Unicode), so you must map the returned data to the structure you expect, as if the **void\\*** type were returned."},{"pos":[9777,9917],"content":"<bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if end-of-file was reached without reading any data; or, if boolean, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> if end-of-file was reached without reading any data.","source":"**NULL** if end-of-file was reached without reading any data; or, if boolean, **FALSE** if end-of-file was reached without reading any data."},{"pos":[9927,9934],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The function places the resulting line into the memory referenced by the <ph id=\"ph1\">`pstr`</ph> parameter.","pos":[9938,10028],"source":"The function places the resulting line into the memory referenced by the `pstr` parameter."},{"content":"It stops reading characters when it reaches the maximum number of characters, specified by <ph id=\"ph1\">`nMax`</ph>.","pos":[10029,10127],"source":" It stops reading characters when it reaches the maximum number of characters, specified by `nMax`."},{"content":"The buffer always receives a terminating null character.","pos":[10128,10184]},{"pos":[10191,10330],"content":"If you call <ph id=\"ph1\">`ReadString`</ph> without first calling <bpt id=\"p1\">[</bpt>SetReadBufferSize<ept id=\"p1\">](#cinternetfile__setreadbuffersize)</ept>, you will get a buffer of 4096 bytes.","source":"If you call `ReadString` without first calling [SetReadBufferSize](#cinternetfile__setreadbuffersize), you will get a buffer of 4096 bytes."},{"pos":[10340,10395],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__seek\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::Seek","linkify":"<a name=\"cinternetfile__seek\"></a>  CInternetFile::Seek","source":"<a name=\"cinternetfile__seek\"></a>  CInternetFile::Seek"},{"content":"Call this member function to reposition the pointer in a previously opened file.","pos":[10399,10479]},{"pos":[10569,10579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Offset in bytes to move the read/write pointer in the file.","pos":[10596,10655]},{"content":"Relative reference for the offset.","pos":[10673,10707]},{"content":"Must be one of the following values:","pos":[10708,10744]},{"pos":[10752,10843],"content":"<bpt id=\"p1\">**</bpt>CFile::begin<ept id=\"p1\">**</ept> Move the file pointer <ph id=\"ph1\">`lOff`</ph> bytes forward from the beginning of the file.","source":"**CFile::begin** Move the file pointer `lOff` bytes forward from the beginning of the file."},{"pos":[10851,10943],"content":"<bpt id=\"p1\">**</bpt>CFile::current<ept id=\"p1\">**</ept> Move the file pointer <ph id=\"ph1\">`lOff`</ph> bytes from the current position in the file.","source":"**CFile::current** Move the file pointer `lOff` bytes from the current position in the file."},{"content":"<bpt id=\"p1\">**</bpt>CFile::end<ept id=\"p1\">**</ept> Move the file pointer <ph id=\"ph1\">`lOff`</ph> bytes from the end of the file.","pos":[10951,11026],"source":"**CFile::end** Move the file pointer `lOff` bytes from the end of the file."},{"content":"<ph id=\"ph1\">`lOff`</ph> must be negative to seek into the existing file; positive values will seek past the end of the file.","pos":[11027,11134],"source":"`lOff` must be negative to seek into the existing file; positive values will seek past the end of the file."},{"pos":[11144,11156],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11160,11374],"content":"The new byte offset from the beginning of the file if the requested position is legal; otherwise, the value is undefined and a <bpt id=\"p1\">[</bpt>CInternetException<ept id=\"p1\">](../../mfc/reference/cinternetexception-class.md)</ept> object is thrown.","source":"The new byte offset from the beginning of the file if the requested position is legal; otherwise, the value is undefined and a [CInternetException](../../mfc/reference/cinternetexception-class.md) object is thrown."},{"pos":[11384,11391],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Seek`</ph> function permits random access to a file's contents by moving the pointer a specified amount, absolutely or relatively.","pos":[11395,11525],"source":"The `Seek` function permits random access to a file's contents by moving the pointer a specified amount, absolutely or relatively."},{"content":"No data is actually read during the seek.","pos":[11526,11567]},{"content":"At this time, a call to this member function is only supported for data associated with <ph id=\"ph1\">`CHttpFile`</ph> objects.","pos":[11574,11682],"source":"At this time, a call to this member function is only supported for data associated with `CHttpFile` objects."},{"content":"It is not supported for FTP or gopher requests.","pos":[11683,11730]},{"content":"If you call <ph id=\"ph1\">`Seek`</ph> for one of these unsupported services, it will pass back you to the Win32 error code <bpt id=\"p1\">**</bpt>ERROR_INTERNET_INVALID_OPERATION<ept id=\"p1\">**</ept>.","pos":[11731,11872],"source":" If you call `Seek` for one of these unsupported services, it will pass back you to the Win32 error code **ERROR_INTERNET_INVALID_OPERATION**."},{"content":"When a file is opened, the file pointer is at offset 0, the beginning of the file.","pos":[11879,11961]},{"pos":[11969,12054],"content":"[!NOTE]\n Using `Seek` may cause an implicit call to [Flush](#cinternetfile__flush).","leadings":["","> "],"nodes":[{"content":"Using <ph id=\"ph1\">`Seek`</ph> may cause an implicit call to <bpt id=\"p1\">[</bpt>Flush<ept id=\"p1\">](#cinternetfile__flush)</ept>.","pos":[9,83],"source":" Using `Seek` may cause an implicit call to [Flush](#cinternetfile__flush)."}]},{"pos":[12064,12071],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12076,12191],"content":"See the example for the base class implementation ( <bpt id=\"p1\">[</bpt>CFile::Seek<ept id=\"p1\">](../../mfc/reference/cfile-class.md#cfile__seek)</ept>).","source":"See the example for the base class implementation ( [CFile::Seek](../../mfc/reference/cfile-class.md#cfile__seek))."},{"pos":[12201,12282],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__setreadbuffersize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::SetReadBufferSize","linkify":"<a name=\"cinternetfile__setreadbuffersize\"></a>  CInternetFile::SetReadBufferSize","source":"<a name=\"cinternetfile__setreadbuffersize\"></a>  CInternetFile::SetReadBufferSize"},{"pos":[12286,12398],"content":"Call this member function to set the size of the temporary read buffer used by a <ph id=\"ph1\">`CInternetFile`</ph>-derived object.","source":"Call this member function to set the size of the temporary read buffer used by a `CInternetFile`-derived object."},{"pos":[12463,12473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nReadSize<ept id=\"p1\">*</ept>","pos":[12477,12488],"source":"*nReadSize*"},{"content":"The desired buffer size in bytes.","pos":[12492,12525]},{"pos":[12535,12547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[12551,12586]},{"content":"If the call fails, the Win32 function <bpt id=\"p1\">[</bpt>GetLastError<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept> may be called to determine the cause of the error.","pos":[12587,12750],"source":" If the call fails, the Win32 function [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360) may be called to determine the cause of the error."},{"pos":[12760,12767],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The underlying WinInet APIs do not perform buffering, so choose a buffer size that allows your application to read data efficiently, regardless of the amount of data to be read.","pos":[12771,12948]},{"content":"If each call to <bpt id=\"p1\">[</bpt>Read<ept id=\"p1\">](#cinternetfile__read)</ept> normally involves a large aount of data (for example, four or more kilobytes), you should not need a buffer.","pos":[12949,13102],"source":" If each call to [Read](#cinternetfile__read) normally involves a large aount of data (for example, four or more kilobytes), you should not need a buffer."},{"content":"However, if you call <bpt id=\"p1\">**</bpt>Read<ept id=\"p1\">**</ept> to get small chunks of data, or if you use <bpt id=\"p2\">[</bpt>ReadString<ept id=\"p2\">](#cinternetfile__readstring)</ept> to read individual lines at a time, then a read buffer improves application performance.","pos":[13103,13305],"source":" However, if you call **Read** to get small chunks of data, or if you use [ReadString](#cinternetfile__readstring) to read individual lines at a time, then a read buffer improves application performance."},{"content":"By default, a <ph id=\"ph1\">`CInternetFile`</ph> object does not provide any buffering for reading.","pos":[13312,13392],"source":"By default, a `CInternetFile` object does not provide any buffering for reading."},{"content":"If you call this member function, you must be sure that the file has been opened for read access.","pos":[13393,13490]},{"content":"You can increase the buffer size at any time, but shrinking the buffer will have no effect.","pos":[13497,13588]},{"content":"If you call <bpt id=\"p1\">[</bpt>ReadString<ept id=\"p1\">](#cinternetfile__readstring)</ept> without first calling <ph id=\"ph1\">`SetReadBufferSize`</ph>, you will get a buffer of 4096 bytes.","pos":[13589,13721],"source":" If you call [ReadString](#cinternetfile__readstring) without first calling `SetReadBufferSize`, you will get a buffer of 4096 bytes."},{"pos":[13731,13814],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__setwritebuffersize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::SetWriteBufferSize","linkify":"<a name=\"cinternetfile__setwritebuffersize\"></a>  CInternetFile::SetWriteBufferSize","source":"<a name=\"cinternetfile__setwritebuffersize\"></a>  CInternetFile::SetWriteBufferSize"},{"pos":[13818,13931],"content":"Call this member function to set the size of the temporary write buffer used by a <ph id=\"ph1\">`CInternetFile`</ph>-derived object.","source":"Call this member function to set the size of the temporary write buffer used by a `CInternetFile`-derived object."},{"pos":[13998,14008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nWriteSize<ept id=\"p1\">*</ept>","pos":[14012,14024],"source":"*nWriteSize*"},{"content":"The size of the buffer in bytes.","pos":[14028,14060]},{"pos":[14070,14082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[14086,14121]},{"content":"If the call fails, the Win32 function <bpt id=\"p1\">[</bpt>GetLastError<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept> may be called to determine the cause of the error.","pos":[14122,14285],"source":" If the call fails, the Win32 function [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360) may be called to determine the cause of the error."},{"pos":[14295,14302],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The underlying WinInet APIs don't perform buffering, so choose a buffer size that allows your application to write data efficiently regardless of the amount of data to be written.","pos":[14306,14485]},{"content":"If each call to <bpt id=\"p1\">[</bpt>Write<ept id=\"p1\">](#cinternetfile__write)</ept> normally involves a large amount of data (for example, four or more kilobytes at a time), you should not need a buffer.","pos":[14486,14652],"source":" If each call to [Write](#cinternetfile__write) normally involves a large amount of data (for example, four or more kilobytes at a time), you should not need a buffer."},{"content":"However, if you call <bpt id=\"p1\">[</bpt>Write<ept id=\"p1\">](#cinternetfile__write)</ept> to write small chunks of data, a write buffer improves your application's performance.","pos":[14653,14791],"source":" However, if you call [Write](#cinternetfile__write) to write small chunks of data, a write buffer improves your application's performance."},{"content":"By default, a <ph id=\"ph1\">`CInternetFile`</ph> object does not provide any buffering for writing.","pos":[14798,14878],"source":"By default, a `CInternetFile` object does not provide any buffering for writing."},{"content":"If you call this member function, you must be sure that the file has been opened for write access.","pos":[14879,14977]},{"content":"You can change the size of the write buffer at any time, but doing so causes an implicit call to <bpt id=\"p1\">[</bpt>Flush<ept id=\"p1\">](#cinternetfile__flush)</ept>.","pos":[14978,15106],"source":" You can change the size of the write buffer at any time, but doing so causes an implicit call to [Flush](#cinternetfile__flush)."},{"pos":[15116,15173],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__write\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::Write","linkify":"<a name=\"cinternetfile__write\"></a>  CInternetFile::Write","source":"<a name=\"cinternetfile__write\"></a>  CInternetFile::Write"},{"pos":[15177,15285],"content":"Call this member function to write into the given memory, <ph id=\"ph1\">`lpvBuf`</ph>, the specified number of bytes, <ph id=\"ph2\">`nCount`</ph>.","source":"Call this member function to write into the given memory, `lpvBuf`, the specified number of bytes, `nCount`."},{"pos":[15373,15383],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the first byte to be written.","pos":[15398,15440]},{"content":"Specifies the number of bytes to be written.","pos":[15459,15503]},{"pos":[15513,15520],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15524,15688],"content":"If any error occurs while writing the data, the function throws a <bpt id=\"p1\">[</bpt>CInternetException<ept id=\"p1\">](../../mfc/reference/cinternetexception-class.md)</ept> object describing the error.","source":"If any error occurs while writing the data, the function throws a [CInternetException](../../mfc/reference/cinternetexception-class.md) object describing the error."},{"pos":[15698,15767],"content":"<bpt id=\"p1\">&lt;a name=\"cinternetfile__writestring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CInternetFile::WriteString","linkify":"<a name=\"cinternetfile__writestring\"></a>  CInternetFile::WriteString","source":"<a name=\"cinternetfile__writestring\"></a>  CInternetFile::WriteString"},{"content":"This function writes a null-terminated string to the associated file.","pos":[15771,15840]},{"pos":[15905,15915],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a string containing the contents to be written.","pos":[15929,15989]},{"pos":[15999,16006],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16010,16174],"content":"If any error occurs while writing the data, the function throws a <bpt id=\"p1\">[</bpt>CInternetException<ept id=\"p1\">](../../mfc/reference/cinternetexception-class.md)</ept> object describing the error.","source":"If any error occurs while writing the data, the function throws a [CInternetException](../../mfc/reference/cinternetexception-class.md) object describing the error."},{"pos":[16183,16191],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CStdioFile Class<ept id=\"p1\">](../../mfc/reference/cstdiofile-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[16195,16255],"source":"[CStdioFile Class](../../mfc/reference/cstdiofile-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[16258,16307],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CInternetConnection Class<ept id=\"p1\">](../../mfc/reference/cinternetconnection-class.md)</ept>","pos":[16310,16388],"source":" [CInternetConnection Class](../../mfc/reference/cinternetconnection-class.md)"}],"content":"---\ntitle: \"CInternetFile Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CInternetFile\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CInternetFile class\"\n  - \"Internet files\"\n  - \"Internet files, CInternetFile class\"\nms.assetid: 96935681-ee71-4a8d-9783-5abc7b3e6f10\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CInternetFile Class\nAllows access to files on remote systems that use Internet protocols.  \n  \n## Syntax  \n  \n```  \nclass CInternetFile : public CStdioFile  \n```  \n  \n## Members  \n  \n### Protected Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CInternetFile::CInternetFile](#cinternetfile__cinternetfile)|Constructs a `CInternetFile` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CInternetFile::Abort](#cinternetfile__abort)|Closes the file, ignoring all warnings and errors.|  \n|[CInternetFile::Close](#cinternetfile__close)|Closes a `CInternetFile` and frees its resources.|  \n|[CInternetFile::Flush](#cinternetfile__flush)|Flushes the contents of the write buffer and makes sure the data in memory is written to the target machine.|  \n|[CInternetFile::GetLength](#cinternetfile__getlength)|Returns the size of the file.|  \n|[CInternetFile::Read](#cinternetfile__read)|Reads the number of specified bytes.|  \n|[CInternetFile::ReadString](#cinternetfile__readstring)|Reads a stream of characters.|  \n|[CInternetFile::Seek](#cinternetfile__seek)|Repositions the pointer in an open file.|  \n|[CInternetFile::SetReadBufferSize](#cinternetfile__setreadbuffersize)|Sets the size of the buffer where data will be read.|  \n|[CInternetFile::SetWriteBufferSize](#cinternetfile__setwritebuffersize)|Sets the size of the buffer where data will be written.|  \n|[CInternetFile::Write](#cinternetfile__write)|Writes the number of specified bytes.|  \n|[CInternetFile::WriteString](#cinternetfile__writestring)|Writes a null-terminated string to a file.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CInternetFile::operator HINTERNET](#cinternetfile__operator_hinternet)|A casting operator for an Internet handle.|  \n  \n### Protected Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CInternetFile::m_hFile](#cinternetfile__m_hfile)|A handle to a file.|  \n  \n## Remarks  \n Provides a base class for the [CHttpFile](../../mfc/reference/chttpfile-class.md) and [CGopherFile](../../mfc/reference/cgopherfile-class.md) file classes. You never create a `CInternetFile` object directly. Instead, create an object of one of its derived classes by calling [CGopherConnection::OpenFile](../../mfc/reference/cgopherconnection-class.md#cgopherconnection__openfile) or [CHttpConnection::OpenRequest](../../mfc/reference/chttpconnection-class.md#chttpconnection__openrequest). You also can create a `CInternetFile` object by calling [CFtpConnection::OpenFile](../../mfc/reference/cftpconnection-class.md#cftpconnection__openfile).  \n  \n The `CInternetFile` member functions **Open**, `LockRange`, `UnlockRange`, and `Duplicate` are not implemented for `CInternetFile`. If you call these functions on a `CInternetFile` object, you will get a [CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md).  \n  \n To learn more about how `CInternetFile` works with the other MFC Internet classes, see the article [Internet Programming with WinInet](../../mfc/win32-internet-extensions-wininet.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CFile](../../mfc/reference/cfile-class.md)  \n  \n [CStdioFile](../../mfc/reference/cstdiofile-class.md)  \n  \n `CInternetFile`  \n  \n## Requirements  \n **Header:** afxinet.h  \n  \n##  <a name=\"cinternetfile__abort\"></a>  CInternetFile::Abort  \n Closes the file associated with this object and makes the file unavailable for reading or writing.  \n  \n```  \nvirtual void Abort();\n```  \n  \n### Remarks  \n If you have not closed the file before destroying the object, the destructor closes it for you.  \n  \n When handling exceptions, **Abort** differs from [Close](#cinternetfile__close) in two important ways. First, the **Abort** function does not throw an exception on failures because it ignores failures. Second, **Abort** does not **ASSERT** if the file has not been opened or was closed previously.  \n  \n##  <a name=\"cinternetfile__cinternetfile\"></a>  CInternetFile::CInternetFile  \n This member function is called when a `CInternetFile` object is created.  \n  \n```  \nCInternetFile(\n    HINTERNET hFile,  \n    LPCTSTR pstrFileName,  \n    CInternetConnection* pConnection,  \n    BOOL bReadMode);\n\n \nCInternetFile(\n    HINTERNET hFile,  \n    HINTERNET hSession,  \n    LPCTSTR pstrFileName,  \n    LPCTSTR pstrServer,  \n    DWORD_PTR dwContext,  \n    BOOL bReadMode);\n```  \n  \n### Parameters  \n `hFile`  \n A handle to an Internet file.  \n  \n `pstrFileName`  \n A pointer to a string containing the file name.  \n  \n `pConnection`  \n A pointer to a [CInternetConnection](../../mfc/reference/cinternetconnection-class.md) object.  \n  \n *bReadMode*  \n Indicates whether the file is read-only.  \n  \n `hSession`  \n A handle to an Internet session.  \n  \n `pstrServer`  \n A pointer to a string containing the name of the server.  \n  \n `dwContext`  \n The context identifier for the `CInternetFile` object. See [WinInet Basics](../../mfc/wininet-basics.md) for more information about the context identifier.  \n  \n### Remarks  \n You never create a `CInternetFile` object directly. Instead, create an object of one of its derived classes by calling [CGopherConnection::OpenFile](../../mfc/reference/cgopherconnection-class.md#cgopherconnection__openfile) or [CHttpConnection::OpenRequest](../../mfc/reference/chttpconnection-class.md#chttpconnection__openrequest). You also can create a `CInternetFile` object by calling [CFtpConnection::OpenFile](../../mfc/reference/cftpconnection-class.md#cftpconnection__openfile).  \n  \n##  <a name=\"cinternetfile__close\"></a>  CInternetFile::Close  \n Closes a `CInternetFile` and frees any of its resources.  \n  \n```  \nvirtual void Close();\n```  \n  \n### Remarks  \n If the file was opened for writing, there is an implicit call to [Flush](#cinternetfile__flush) to assure that all buffered data is written to the host. You should call **Close** when you are finished using a file.  \n  \n##  <a name=\"cinternetfile__flush\"></a>  CInternetFile::Flush  \n Call this member function to flush the contents of the write buffer.  \n  \n```  \nvirtual void Flush();\n```  \n  \n### Remarks  \n Use `Flush` to assure that all data in memory has actually been written to the target machine and to assure your transaction with the host machine has been completed. `Flush` is only effective on `CInternetFile` objects opened for writing.  \n  \n##  <a name=\"cinternetfile__getlength\"></a>  CInternetFile::GetLength  \n Returns the size of the file.  \n  \n```  \nvirtual ULONGLONG GetLength() const;\n\n \n```  \n  \n##  <a name=\"cinternetfile__m_hfile\"></a>  CInternetFile::m_hFile  \n A handle to the file associated with this object.  \n  \n```  \nHINTERNET m_hFile;  \n```  \n  \n##  <a name=\"cinternetfile__operator_hinternet\"></a>  CInternetFile::operator HINTERNET  \n Use this operator to get the Windows handle for the current Internet session.  \n  \n```  \noperator HINTERNET() const;\n\n \n```  \n  \n##  <a name=\"cinternetfile__read\"></a>  CInternetFile::Read  \n Call this member function to read into the given memory, starting at `lpvBuf`, the specified number of bytes, `nCount`.  \n  \n```  \nvirtual UINT Read(\n    void* lpBuf,  \n    UINT nCount);\n```  \n  \n### Parameters  \n `lpBuf`  \n A pointer to a memory address to which file data is read.  \n  \n `nCount`  \n The number of bytes to be written.  \n  \n### Return Value  \n The number of bytes transferred to the buffer. The return value may be less than `nCount` if the end of file was reached.  \n  \n### Remarks  \n The function returns the number of bytes actually read — a number that may be less than `nCount` if the file ends. If an error occurs while reading the file, the function throws a [CInternetException](../../mfc/reference/cinternetexception-class.md) object that describes the error. Note that reading past the end of the file is not considered an error and no exception will be thrown.  \n  \n To ensure all data is retrieved, an application must continue to call the **CInternetFile::Read** method until the method returns zero.  \n  \n##  <a name=\"cinternetfile__readstring\"></a>  CInternetFile::ReadString  \n Call this member function to read a stream of characters until it finds a newline character.  \n  \n```  \nvirtual BOOL ReadString(\n    CString& rString);\n\n \nvirtual LPTSTR ReadString(\n    LPTSTR pstr,  \n    UINT nMax);\n```  \n  \n### Parameters  \n `pstr`  \n A pointer to a string which will receive the line being read.  \n  \n `nMax`  \n The maximum number of characters to be read.  \n  \n `rString`  \n A reference to the [CString](../../atl-mfc-shared/reference/cstringt-class.md) object that receives the read line.  \n  \n### Return Value  \n A pointer to the buffer containing plain data retrieved from the [CInternetFile](../../mfc/reference/cinternetfile-class.md) object. Regardless of the data type of the buffer passed to this method, it does not perform any manipulations on the data (for example, conversion to Unicode), so you must map the returned data to the structure you expect, as if the **void\\*** type were returned.  \n  \n **NULL** if end-of-file was reached without reading any data; or, if boolean, **FALSE** if end-of-file was reached without reading any data.  \n  \n### Remarks  \n The function places the resulting line into the memory referenced by the `pstr` parameter. It stops reading characters when it reaches the maximum number of characters, specified by `nMax`. The buffer always receives a terminating null character.  \n  \n If you call `ReadString` without first calling [SetReadBufferSize](#cinternetfile__setreadbuffersize), you will get a buffer of 4096 bytes.  \n  \n##  <a name=\"cinternetfile__seek\"></a>  CInternetFile::Seek  \n Call this member function to reposition the pointer in a previously opened file.  \n  \n```  \nvirtual ULONGLONG Seek(\n    LONGLONG lOffset,  \n    UINT nFrom);\n```  \n  \n### Parameters  \n `lOffset`  \n Offset in bytes to move the read/write pointer in the file.  \n  \n `nFrom`  \n Relative reference for the offset. Must be one of the following values:  \n  \n- **CFile::begin** Move the file pointer `lOff` bytes forward from the beginning of the file.  \n  \n- **CFile::current** Move the file pointer `lOff` bytes from the current position in the file.  \n  \n- **CFile::end** Move the file pointer `lOff` bytes from the end of the file. `lOff` must be negative to seek into the existing file; positive values will seek past the end of the file.  \n  \n### Return Value  \n The new byte offset from the beginning of the file if the requested position is legal; otherwise, the value is undefined and a [CInternetException](../../mfc/reference/cinternetexception-class.md) object is thrown.  \n  \n### Remarks  \n The `Seek` function permits random access to a file's contents by moving the pointer a specified amount, absolutely or relatively. No data is actually read during the seek.  \n  \n At this time, a call to this member function is only supported for data associated with `CHttpFile` objects. It is not supported for FTP or gopher requests. If you call `Seek` for one of these unsupported services, it will pass back you to the Win32 error code **ERROR_INTERNET_INVALID_OPERATION**.  \n  \n When a file is opened, the file pointer is at offset 0, the beginning of the file.  \n  \n> [!NOTE]\n>  Using `Seek` may cause an implicit call to [Flush](#cinternetfile__flush).  \n  \n### Example  \n  See the example for the base class implementation ( [CFile::Seek](../../mfc/reference/cfile-class.md#cfile__seek)).  \n  \n##  <a name=\"cinternetfile__setreadbuffersize\"></a>  CInternetFile::SetReadBufferSize  \n Call this member function to set the size of the temporary read buffer used by a `CInternetFile`-derived object.  \n  \n```  \nBOOL SetReadBufferSize(UINT nReadSize);\n```  \n  \n### Parameters  \n *nReadSize*  \n The desired buffer size in bytes.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0. If the call fails, the Win32 function [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360) may be called to determine the cause of the error.  \n  \n### Remarks  \n The underlying WinInet APIs do not perform buffering, so choose a buffer size that allows your application to read data efficiently, regardless of the amount of data to be read. If each call to [Read](#cinternetfile__read) normally involves a large aount of data (for example, four or more kilobytes), you should not need a buffer. However, if you call **Read** to get small chunks of data, or if you use [ReadString](#cinternetfile__readstring) to read individual lines at a time, then a read buffer improves application performance.  \n  \n By default, a `CInternetFile` object does not provide any buffering for reading. If you call this member function, you must be sure that the file has been opened for read access.  \n  \n You can increase the buffer size at any time, but shrinking the buffer will have no effect. If you call [ReadString](#cinternetfile__readstring) without first calling `SetReadBufferSize`, you will get a buffer of 4096 bytes.  \n  \n##  <a name=\"cinternetfile__setwritebuffersize\"></a>  CInternetFile::SetWriteBufferSize  \n Call this member function to set the size of the temporary write buffer used by a `CInternetFile`-derived object.  \n  \n```  \nBOOL SetWriteBufferSize(UINT nWriteSize);\n```  \n  \n### Parameters  \n *nWriteSize*  \n The size of the buffer in bytes.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0. If the call fails, the Win32 function [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360) may be called to determine the cause of the error.  \n  \n### Remarks  \n The underlying WinInet APIs don't perform buffering, so choose a buffer size that allows your application to write data efficiently regardless of the amount of data to be written. If each call to [Write](#cinternetfile__write) normally involves a large amount of data (for example, four or more kilobytes at a time), you should not need a buffer. However, if you call [Write](#cinternetfile__write) to write small chunks of data, a write buffer improves your application's performance.  \n  \n By default, a `CInternetFile` object does not provide any buffering for writing. If you call this member function, you must be sure that the file has been opened for write access. You can change the size of the write buffer at any time, but doing so causes an implicit call to [Flush](#cinternetfile__flush).  \n  \n##  <a name=\"cinternetfile__write\"></a>  CInternetFile::Write  \n Call this member function to write into the given memory, `lpvBuf`, the specified number of bytes, `nCount`.  \n  \n```  \nvirtual void Write(\n    const void* lpBuf,  \n    UINT nCount);\n```  \n  \n### Parameters  \n `lpBuf`  \n A pointer to the first byte to be written.  \n  \n `nCount`  \n Specifies the number of bytes to be written.  \n  \n### Remarks  \n If any error occurs while writing the data, the function throws a [CInternetException](../../mfc/reference/cinternetexception-class.md) object describing the error.  \n  \n##  <a name=\"cinternetfile__writestring\"></a>  CInternetFile::WriteString  \n This function writes a null-terminated string to the associated file.  \n  \n```  \nvirtual void WriteString(LPCTSTR pstr);\n```  \n  \n### Parameters  \n `pstr`  \n A pointer to a string containing the contents to be written.  \n  \n### Remarks  \n If any error occurs while writing the data, the function throws a [CInternetException](../../mfc/reference/cinternetexception-class.md) object describing the error.  \n  \n## See Also  \n [CStdioFile Class](../../mfc/reference/cstdiofile-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CInternetConnection Class](../../mfc/reference/cinternetconnection-class.md)\n"}