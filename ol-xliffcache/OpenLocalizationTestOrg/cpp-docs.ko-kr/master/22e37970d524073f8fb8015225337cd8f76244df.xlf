<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22e37970d524073f8fb8015225337cd8f76244df</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\cgets-s-cgetws-s.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bddee92a56ec3274059cbb7693b56a44bbb3b6d9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1398a7b39089e856a2fb4dbef73b871683d5dd93</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_cgets_s, _cgetws_s | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_cgets_s, _cgetws_s</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Gets a character string from the console.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These versions of <bpt id="p1">[</bpt>_cgets and _cgetws<ept id="p1">](../../c-runtime-library/cgets-cgetws.md)</ept> have security enhancements, as described in <bpt id="p2">[</bpt>Security Features in the CRT<ept id="p2">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This API cannot be used in applications that execute in the <ph id="ph1">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CRT functions not supported with /ZW<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Storage location for data.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The size of the buffer in single-byte or wide characters, which is also the maximum number of characters to be read.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The number of characters actually read.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The return value is zero if successful; otherwise, an error code if a failure occurs.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Error Conditions</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Return</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Contents of</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>n/a</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>not</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>zero</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>not modified</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>not</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>zero-length string</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_cgetws_s`</ph> read a string from the console and copy the string (with a null terminator) into <ph id="ph2">`buffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>is the wide character version of the function; other than the character size, the behavior of these two functions is identical.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The maximum size of the string to be read is passed in as the <ph id="ph1">`numberOfElements`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This size should include an extra character for the terminating null.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The actual number of characters read is placed in <ph id="ph1">`pSizeRead`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If an error occurs during the operation or in the validating of the parameters, the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept> .</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, <ph id="ph1">`errno`</ph> is set to <ph id="ph2">`EINVAL`</ph> and <ph id="ph3">`EINVAL`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In C++, the use of these functions is simplified by template overloads; the overloads can infer buffer length automatically, thereby eliminating the need to specify a size argument, and they can automatically replace older, less-secure functions with their newer, more secure counterparts.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Secure Template Overloads<ept id="p1">](../../c-runtime-library/secure-template-overloads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Tchar.h routine</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>_UNICODE and _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>conio.h&gt;</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>conio.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Console and Port I/O</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>_getch, _getwch</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>