{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 2) C4250 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 2) C4250 | Microsoft Docs","pos":[0,49]}]},{"pos":[610,642],"content":"Compiler Warning (level 2) C4250","linkify":"Compiler Warning (level 2) C4250","nodes":[{"content":"Compiler Warning (level 2) C4250","pos":[0,32]}]},{"content":"'class1' : inherits 'class2::member' via dominance","pos":[643,693]},{"content":"Two or more members have the same name.","pos":[700,739]},{"content":"The one in <ph id=\"ph1\">`class2`</ph> is inherited because it is a base class for the other classes that contained this member.","pos":[740,849],"source":" The one in `class2` is inherited because it is a base class for the other classes that contained this member."},{"pos":[856,931],"content":"To suppress C4250, use the <bpt id=\"p1\">[</bpt>warning<ept id=\"p1\">](../../preprocessor/warning.md)</ept> pragma.","source":"To suppress C4250, use the [warning](../../preprocessor/warning.md) pragma."},{"content":"Because a virtual base class is shared among multiple derived classes, a name in a derived class dominates a name in a base class.","pos":[938,1068]},{"content":"For example, given the following class hierarchy, there are two definitions of func inherited within diamond: the vbc::func() instance through the weak class, and the dominant::func() through the dominant class.","pos":[1069,1280]},{"content":"An unqualified call of func() through a diamond class object, always calls the dominate::func() instance.","pos":[1281,1386]},{"content":"If the weak class were to introduce an instance of func(), neither definition would dominate, and the call would be flagged as ambiguous.","pos":[1388,1525]},{"pos":[1942,1949],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample generates C4250.","pos":[1953,1990]},{"pos":[2461,2468],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This sample shows a more complex situation.","pos":[2472,2515]},{"content":"The following sample generates C4250.","pos":[2516,2553]}],"content":"---\ntitle: \"Compiler Warning (level 2) C4250 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4250\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4250\"\nms.assetid: d47f7249-6b5a-414b-b2d4-56e5d246a782\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Warning (level 2) C4250\n'class1' : inherits 'class2::member' via dominance  \n  \n Two or more members have the same name. The one in `class2` is inherited because it is a base class for the other classes that contained this member.  \n  \n To suppress C4250, use the [warning](../../preprocessor/warning.md) pragma.  \n  \n Because a virtual base class is shared among multiple derived classes, a name in a derived class dominates a name in a base class. For example, given the following class hierarchy, there are two definitions of func inherited within diamond: the vbc::func() instance through the weak class, and the dominant::func() through the dominant class. An unqualified call of func() through a diamond class object, always calls the dominate::func() instance.  If the weak class were to introduce an instance of func(), neither definition would dominate, and the call would be flagged as ambiguous.  \n  \n```  \n// C4250.cpp  \n// compile with: /c /W2  \n#include <stdio.h>  \nstruct vbc {  \n   virtual void func() { printf(\"vbc::func\\n\"); }  \n};  \n  \nstruct weak : public virtual vbc {};  \n  \nstruct dominant : public virtual vbc {  \n   void func() { printf(\"dominant::func\\n\"); }  \n};  \n  \nstruct diamond : public weak, public dominant {};  \n  \nint main() {  \n   diamond d;  \n   d.func();   // C4250  \n}  \n```  \n  \n## Example  \n The following sample generates C4250.  \n  \n```  \n// C4250_b.cpp  \n// compile with: /W2 /EHsc  \n#include <iostream>  \nusing namespace std;  \nclass A {  \npublic:  \n   virtual operator int () {  \n      return 2;  \n   }  \n};  \n  \nclass B : virtual public A {  \npublic:  \n   virtual operator int () {  \n      return 3;  \n   }  \n};  \n  \nclass C : virtual public A {};  \n  \nclass E : public B, public C {};   // C4250  \n  \nint main() {  \n   E eObject;  \n   cout << eObject.operator int() << endl;  \n}  \n```  \n  \n## Example  \n This sample shows a more complex situation. The following sample generates C4250.  \n  \n```  \n// C4250_c.cpp  \n// compile with: /W2 /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nclass V {  \npublic:  \n   virtual int f() {  \n      return 1024;  \n   }  \n};  \n  \nclass B : virtual public V {  \npublic:  \n   int b() {  \n      return f(); // B::b() calls V::f()  \n   }  \n};  \n  \nclass M : virtual public V {  \npublic:  \n   int f() {  \n      return 7;  \n   }  \n};  \n  \n// because of dominance, f() is M::f() inside D,  \n// changing the meaning of B::b's f() call inside a D  \nclass D : public B, public M {};   // C4250  \n  \nint main() {  \n   D d;  \n   cout << \"value is: \" << d.b();   // invokes M::f()  \n}  \n```"}