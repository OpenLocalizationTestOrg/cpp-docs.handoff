{"nodes":[{"pos":[12,75],"content":"printf_s, _printf_s_l, wprintf_s, _wprintf_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"printf_s, _printf_s_l, wprintf_s, _wprintf_s_l | Microsoft Docs","pos":[0,63]}]},{"pos":[1324,1370],"content":"printf_s, _printf_s_l, wprintf_s, _wprintf_s_l","linkify":"printf_s, _printf_s_l, wprintf_s, _wprintf_s_l","nodes":[{"content":"printf_s, _printf_s_l, wprintf_s, _wprintf_s_l","pos":[0,46]}]},{"content":"Prints formatted output to the standard output stream.","pos":[1371,1425]},{"content":"These versions of <bpt id=\"p1\">[</bpt>printf, _printf_l, wprintf, _wprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept> have security enhancements, as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1426,1689],"source":" These versions of [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1698,1704],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2056,2066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Format control.","pos":[2082,2097]},{"content":"Optional arguments.","pos":[2118,2137]},{"content":"The locale to use.","pos":[2156,2174]},{"pos":[2183,2195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the number of characters printed, or a negative value if an error occurs.","pos":[2199,2280]},{"pos":[2289,2296],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`printf_s`</ph> function formats and prints a series of characters and values to the standard output stream, <ph id=\"ph2\">`stdout`</ph>.","pos":[2300,2417],"source":"The `printf_s` function formats and prints a series of characters and values to the standard output stream, `stdout`."},{"content":"If arguments follow the <bpt id=\"p1\">*</bpt>format<ept id=\"p1\">*</ept> string, the <ph id=\"ph1\">`format`</ph> string must contain specifications that determine the output format for the arguments.","pos":[2418,2558],"source":" If arguments follow the *format* string, the `format` string must contain specifications that determine the output format for the arguments."},{"content":"The main difference between <ph id=\"ph1\">`printf_s`</ph> and <ph id=\"ph2\">`printf`</ph> is that <ph id=\"ph3\">`printf_s`</ph> checks the format string for valid formatting characters, whereas <ph id=\"ph4\">`printf`</ph> only checks if the format string is a null pointer.","pos":[2565,2762],"source":"The main difference between `printf_s` and `printf` is that `printf_s` checks the format string for valid formatting characters, whereas `printf` only checks if the format string is a null pointer."},{"content":"If either check fails, an invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2763,2915],"source":" If either check fails, an invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the function returns -1 and sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[2916,3006],"source":" If execution is allowed to continue, the function returns -1 and sets `errno` to `EINVAL`."},{"pos":[3013,3177],"content":"For information on <ph id=\"ph1\">`errno`</ph> and error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information on `errno` and error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"<ph id=\"ph1\">`printf_s`</ph> and<ph id=\"ph2\">`fprintf_s`</ph> behave identically except that <ph id=\"ph3\">`printf_s`</ph> writes output to <ph id=\"ph4\">`stdout`</ph> rather than to a destination of type <ph id=\"ph5\">`FILE`</ph>.","pos":[3184,3322],"source":"`printf_s` and`fprintf_s` behave identically except that `printf_s` writes output to `stdout` rather than to a destination of type `FILE`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-s-fprintf-s-l-fwprintf-s-fwprintf-s-l.md)</ept>.","pos":[3323,3486],"source":" For more information, see [fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l](../../c-runtime-library/reference/fprintf-s-fprintf-s-l-fwprintf-s-fwprintf-s-l.md)."},{"content":"<ph id=\"ph1\">`wprintf_s`</ph> is a wide-character version of <ph id=\"ph2\">`printf_s`</ph>; <ph id=\"ph3\">`format`</ph> is a wide-character string.","pos":[3493,3584],"source":"`wprintf_s` is a wide-character version of `printf_s`; `format` is a wide-character string."},{"content":"<ph id=\"ph1\">`wprintf_s`</ph> and <ph id=\"ph2\">`printf_s`</ph> behave identically if the stream is opened in ANSI mode.","pos":[3585,3668],"source":"`wprintf_s` and `printf_s` behave identically if the stream is opened in ANSI mode."},{"content":"<ph id=\"ph1\">`printf_s`</ph> doesn't currently support output into a UNICODE stream.","pos":[3669,3735],"source":"`printf_s` doesn't currently support output into a UNICODE stream."},{"pos":[3742,3898],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"pos":[3908,3937],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[3944,3959]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3960,3988],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3989,4002]},{"content":"_unicode defined","pos":[4003,4019]},{"content":"The <ph id=\"ph1\">`format`</ph> argument consists of ordinary characters, escape sequences, and (if arguments follow <ph id=\"ph2\">`format`</ph>) format specifications.","pos":[4248,4378],"source":"The `format` argument consists of ordinary characters, escape sequences, and (if arguments follow `format`) format specifications."},{"content":"The ordinary characters and escape sequences are copied to <ph id=\"ph1\">`stdout`</ph> in order of their appearance.","pos":[4379,4476],"source":" The ordinary characters and escape sequences are copied to `stdout` in order of their appearance."},{"content":"For example, the line","pos":[4477,4498]},{"content":"produces the output","pos":[4561,4580]},{"content":"<bpt id=\"p1\">[</bpt>Format specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept> always begin with a percent sign (<ph id=\"ph1\">`%`</ph>) and are read left to right.","pos":[4632,4807],"source":"[Format specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md) always begin with a percent sign (`%`) and are read left to right."},{"content":"When <ph id=\"ph1\">`printf_s`</ph> encounters the first format specification (if any), it converts the value of the first argument after <ph id=\"ph2\">`format`</ph> and outputs it accordingly.","pos":[4808,4962],"source":" When `printf_s` encounters the first format specification (if any), it converts the value of the first argument after `format` and outputs it accordingly."},{"content":"The second format specification causes the second argument to be converted and output, and so on.","pos":[4963,5060]},{"content":"If there are more arguments than there are format specifications, the extra arguments are ignored.","pos":[5061,5159]},{"content":"The results are undefined if there are not enough arguments for all the format specifications.","pos":[5160,5254]},{"pos":[5262,5328],"content":"[!IMPORTANT]\n Ensure that `format` is not a user-defined string.","leadings":["","> "],"nodes":[{"content":"Ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[14,64],"source":" Ensure that `format` is not a user-defined string."}]},{"pos":[5337,5349],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[5356,5363]},{"content":"Required header","pos":[5364,5379]},{"pos":[5424,5449],"content":"<ph id=\"ph1\">`printf_s`</ph>, <ph id=\"ph2\">`_printf_s_l`</ph>","source":"`printf_s`, `_printf_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[5450,5460],"source":"\\<stdio.h>"},{"pos":[5465,5492],"content":"<ph id=\"ph1\">`wprintf_s`</ph>, <ph id=\"ph2\">`_wprintf_s_l`</ph>","source":"`wprintf_s`, `_wprintf_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[5493,5517],"source":"\\<stdio.h> or \\<wchar.h>"},{"content":"The console is not supported in <ph id=\"ph1\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[5525,5638],"source":"The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"The standard stream handles that are associated with the consoleâ€”<ph id=\"ph1\">`stdin`</ph>, <ph id=\"ph2\">`stdout`</ph>, and <ph id=\"ph3\">`stderr`</ph>â€”must be redirected before C run-time functions can use them in <ph id=\"ph4\">[!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)]</ph> apps.","pos":[5639,5880],"source":" The standard stream handles that are associated with the consoleâ€”`stdin`, `stdout`, and `stderr`â€”must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps."},{"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","pos":[5881,5985],"source":" For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[5994,6001],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7427,7440],"content":"Sample Output","linkify":"Sample Output","nodes":[{"content":"Sample Output","pos":[0,13]}]},{"pos":[8123,8148],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[8158,8250],"content":"<bpt id=\"p1\">[</bpt>System::Console::Write<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.console.write.aspx)</ept>","source":"[System::Console::Write](https://msdn.microsoft.com/en-us/library/system.console.write.aspx)"},{"pos":[8260,8360],"content":"<bpt id=\"p1\">[</bpt>System::Console::WriteLine<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.console.writeline.aspx)</ept>","source":"[System::Console::WriteLine](https://msdn.microsoft.com/en-us/library/system.console.writeline.aspx)"},{"pos":[8369,8377],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[8381,8457],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[8460,8513],"source":" [Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept><ph id=\"ph1\"> </ph>","pos":[8516,8561],"source":" [Locale](../../c-runtime-library/locale.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fopen, _wfopen<ept id=\"p1\">](../../c-runtime-library/reference/fopen-wfopen.md)</ept><ph id=\"ph1\"> </ph>","pos":[8564,8633],"source":" [fopen, _wfopen](../../c-runtime-library/reference/fopen-wfopen.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fprintf, _fprintf_l, fwprintf, _fwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[8636,8758],"source":" [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>scanf, _scanf_l, wscanf, _wscanf_l<ept id=\"p1\">](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[8761,8867],"source":" [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)</ept><ph id=\"ph2\"> </ph>","pos":[8870,9018],"source":" [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>vprintf Functions<ept id=\"p1\">](../../c-runtime-library/vprintf-functions.md)</ept>","pos":[9021,9087],"source":" [vprintf Functions](../../c-runtime-library/vprintf-functions.md)"}],"content":"---\ntitle: \"printf_s, _printf_s_l, wprintf_s, _wprintf_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_printf_s_l\"\n  - \"wprintf_s\"\n  - \"_wprintf_s_l\"\n  - \"printf_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wprintf_s\"\n  - \"printf_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"wprintf_s function\"\n  - \"tprintf_s function\"\n  - \"_tprintf_s function\"\n  - \"printf_s_l function\"\n  - \"printf_s function\"\n  - \"_printf_s_l function\"\n  - \"printf function, format specification fields\"\n  - \"printf function, using\"\n  - \"_tprintf_s_l function\"\n  - \"wprintf_s_l function\"\n  - \"formatted text [C++]\"\n  - \"tprintf_s_l function\"\n  - \"_wprintf_s_l function\"\nms.assetid: 044ebb2e-5cc1-445d-bb4c-f084b405615b\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# printf_s, _printf_s_l, wprintf_s, _wprintf_s_l\nPrints formatted output to the standard output stream. These versions of [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nint printf_s(  \n   const char *format [,  \n   argument]...   \n);  \nint _printf_s_l(  \n   const char *format,  \n   locale_t locale [,  \n   argument]...   \n);  \nint wprintf_s(  \n   const wchar_t *format [,  \n   argument]...   \n);  \nint _wprintf_s_l(  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument]...   \n);  \n```  \n  \n#### Parameters  \n `format`  \n Format control.  \n  \n `argument`  \n Optional arguments.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n Returns the number of characters printed, or a negative value if an error occurs.  \n  \n## Remarks  \n The `printf_s` function formats and prints a series of characters and values to the standard output stream, `stdout`. If arguments follow the *format* string, the `format` string must contain specifications that determine the output format for the arguments.  \n  \n The main difference between `printf_s` and `printf` is that `printf_s` checks the format string for valid formatting characters, whereas `printf` only checks if the format string is a null pointer. If either check fails, an invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the function returns -1 and sets `errno` to `EINVAL`.  \n  \n For information on `errno` and error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n `printf_s` and`fprintf_s` behave identically except that `printf_s` writes output to `stdout` rather than to a destination of type `FILE`. For more information, see [fprintf_s, _fprintf_s_l, fwprintf_s, _fwprintf_s_l](../../c-runtime-library/reference/fprintf-s-fprintf-s-l-fwprintf-s-fwprintf-s-l.md).  \n  \n `wprintf_s` is a wide-character version of `printf_s`; `format` is a wide-character string. `wprintf_s` and `printf_s` behave identically if the stream is opened in ANSI mode. `printf_s` doesn't currently support output into a UNICODE stream.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_unicode defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tprintf_s`|`printf_s`|`printf_s`|`wprintf_s`|  \n|`_tprintf_s_l`|`_printf_s_l`|`_printf_s_l`|`_wprintf_s_l`|  \n  \n The `format` argument consists of ordinary characters, escape sequences, and (if arguments follow `format`) format specifications. The ordinary characters and escape sequences are copied to `stdout` in order of their appearance. For example, the line  \n  \n```  \nprintf_s(\"Line one\\n\\t\\tLine two\\n\");   \n```  \n  \n produces the output  \n  \n```  \nLine one  \n        Line two  \n```  \n  \n [Format specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md) always begin with a percent sign (`%`) and are read left to right. When `printf_s` encounters the first format specification (if any), it converts the value of the first argument after `format` and outputs it accordingly. The second format specification causes the second argument to be converted and output, and so on. If there are more arguments than there are format specifications, the extra arguments are ignored. The results are undefined if there are not enough arguments for all the format specifications.  \n  \n> [!IMPORTANT]\n>  Ensure that `format` is not a user-defined string.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`printf_s`, `_printf_s_l`|\\<stdio.h>|  \n|`wprintf_s`, `_wprintf_s_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n The console is not supported in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. The standard stream handles that are associated with the consoleâ€”`stdin`, `stdout`, and `stderr`â€”must be redirected before C run-time functions can use them in [!INCLUDE[win8_appname_long](../../build/includes/win8_appname_long_md.md)] apps. For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_printf_s.c  \n/* This program uses the printf_s and wprintf_s functions  \n * to produce formatted output.  \n */  \n  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   char   ch = 'h', *string = \"computer\";  \n   int    count = -9234;  \n   double fp = 251.7366;  \n   wchar_t wch = L'w', *wstring = L\"Unicode\";  \n  \n   /* Display integers. */  \n   printf_s( \"Integer formats:\\n\"  \n           \"   Decimal: %d  Justified: %.6d  Unsigned: %u\\n\",  \n           count, count, count );  \n  \n   printf_s( \"Decimal %d as:\\n   Hex: %Xh  C hex: 0x%x  Octal: %o\\n\",  \n            count, count, count, count );  \n  \n   /* Display in different radixes. */  \n   printf_s( \"Digits 10 equal:\\n   Hex: %i  Octal: %i  Decimal: %i\\n\",  \n            0x10, 010, 10 );  \n  \n   /* Display characters. */  \n  \n   printf_s(\"Characters in field (1):\\n%10c%5hc%5C%5lc\\n\", ch, ch, wch, wch);  \n   wprintf_s(L\"Characters in field (2):\\n%10C%5hc%5c%5lc\\n\", ch, ch, wch, wch);  \n  \n   /* Display strings. */  \n  \n   printf_s(\"Strings in field (1):\\n%25s\\n%25.4hs\\n   %S%25.3ls\\n\",  \n   string, string, wstring, wstring);  \n   wprintf_s(L\"Strings in field (2):\\n%25S\\n%25.4hs\\n   %s%25.3ls\\n\",  \n       string, string, wstring, wstring);  \n  \n   /* Display real numbers. */  \n   printf_s( \"Real numbers:\\n   %f %.2f %e %E\\n\", fp, fp, fp, fp );  \n  \n   /* Display pointer. */  \n   printf_s( \"\\nAddress as:   %p\\n\", &count);  \n  \n}  \n```  \n  \n## Sample Output  \n  \n```  \nInteger formats:  \n   Decimal: -9234  Justified: -009234  Unsigned: 4294958062  \nDecimal -9234 as:  \n   Hex: FFFFDBEEh  C hex: 0xffffdbee  Octal: 37777755756  \nDigits 10 equal:  \n   Hex: 16  Octal: 8  Decimal: 10  \nCharacters in field (1):  \n         h    h    w    w  \nCharacters in field (2):  \n         h    h    w    w  \nStrings in field (1):  \n                 computer  \n                     comp  \n   Unicode                      Uni  \nStrings in field (2):  \n                 computer  \n                     comp  \n   Unicode                      Uni  \nReal numbers:  \n   251.736600 251.74 2.517366e+002 2.517366E+002  \n  \nAddress as:   0012FF78  \n  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Console::Write](https://msdn.microsoft.com/en-us/library/system.console.write.aspx)  \n  \n-   [System::Console::WriteLine](https://msdn.microsoft.com/en-us/library/system.console.writeline.aspx)  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [fopen, _wfopen](../../c-runtime-library/reference/fopen-wfopen.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)"}