{"nodes":[{"pos":[12,45],"content":"CException Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CException Class | Microsoft Docs","pos":[0,33]}]},{"content":"CException Class","pos":[1108,1124]},{"content":"The base class for all exceptions in the Microsoft Foundation Class Library.","pos":[1125,1201]},{"content":"Syntax","pos":[1210,1216]},{"content":"Members","pos":[1289,1296]},{"content":"Public Constructors","pos":[1306,1325]},{"content":"Name","pos":[1332,1336]},{"content":"Description","pos":[1337,1348]},{"content":"CException::CException","pos":[1387,1409]},{"pos":[1436,1469],"content":"Constructs a <ph id=\"ph1\">`CException`</ph> object.","source":"Constructs a `CException` object."},{"content":"Public Methods","pos":[1480,1494]},{"content":"Name","pos":[1501,1505]},{"content":"Description","pos":[1506,1517]},{"content":"CException::Delete","pos":[1556,1574]},{"pos":[1597,1627],"content":"Deletes a <ph id=\"ph1\">`CException`</ph> object.","source":"Deletes a `CException` object."},{"content":"CException::ReportError","pos":[1633,1656]},{"content":"Reports an error message in a message box to the user.","pos":[1684,1738]},{"content":"Remarks","pos":[1748,1755]},{"content":"Because <ph id=\"ph1\">`CException`</ph> is an abstract base class you cannot create <ph id=\"ph2\">`CException`</ph> objects directly; you must create objects of derived classes.","pos":[1759,1898],"source":"Because `CException` is an abstract base class you cannot create `CException` objects directly; you must create objects of derived classes."},{"content":"If you need to create your own <ph id=\"ph1\">`CException`</ph>-style class, use one of the derived classes listed above as a model.","pos":[1899,2011],"source":" If you need to create your own `CException`-style class, use one of the derived classes listed above as a model."},{"content":"Make sure that your derived class also uses <ph id=\"ph1\">`IMPLEMENT_DYNAMIC`</ph>.","pos":[2012,2076],"source":" Make sure that your derived class also uses `IMPLEMENT_DYNAMIC`."},{"content":"The derived classes and their descriptions are listed below:","pos":[2083,2143]},{"content":"CSimpleException","pos":[2165,2181]},{"content":"A base class for resource-critical MFC exceptions","pos":[2230,2279]},{"content":"CInvalidArgException","pos":[2285,2305]},{"content":"Invalid argument exception condition","pos":[2358,2394]},{"content":"CMemoryException","pos":[2400,2416]},{"content":"Out-of-memory exception","pos":[2465,2488]},{"content":"CNotSupportedException","pos":[2494,2516]},{"content":"Request for an unsupported operation","pos":[2571,2607]},{"content":"CArchiveException","pos":[2613,2630]},{"content":"Archive-specific exception","pos":[2680,2706]},{"content":"CFileException","pos":[2712,2726]},{"content":"File-specific exception","pos":[2773,2796]},{"content":"CResourceException","pos":[2802,2820]},{"content":"Windows resource not found or not creatable","pos":[2871,2914]},{"content":"COleException","pos":[2920,2933]},{"content":"OLE exception","pos":[2979,2992]},{"content":"CDBException","pos":[2998,3010]},{"content":"Database exception (that is, exception conditions arising for MFC database classes based on Open Database Connectivity)","pos":[3055,3174]},{"content":"COleDispatchException","pos":[3180,3201]},{"content":"OLE dispatch (automation) exception","pos":[3255,3290]},{"content":"CUserException","pos":[3296,3310]},{"content":"Exception that indicates that a resource could not be found","pos":[3357,3416]},{"content":"CDaoException","pos":[3422,3435]},{"content":"Data access object exception (that is, exception conditions arising for DAO classes)","pos":[3481,3565]},{"content":"CInternetException","pos":[3571,3589]},{"content":"Internet exception (that is, exception conditions arising for Internet classes).","pos":[3640,3720]},{"content":"These exceptions are intended to be used with the <bpt id=\"p1\">[</bpt>THROW<ept id=\"p1\">](exception-processing.md#throw)</ept>, <bpt id=\"p2\">[</bpt>THROW_LAST<ept id=\"p2\">](exception-processing.md#throw_last)</ept>, <bpt id=\"p3\">[</bpt>try<ept id=\"p3\">](exception-processing.md#try)</ept>, <bpt id=\"p4\">[</bpt>catch<ept id=\"p4\">](exception-processing.md#catch)</ept>, <bpt id=\"p5\">[</bpt>and_catch<ept id=\"p5\">](exception-processing.md#and_catch)</ept>, and <bpt id=\"p6\">[</bpt>end_catch<ept id=\"p6\">](exception-processing.md#end_catch)</ept> macros.","pos":[3728,4050],"source":"These exceptions are intended to be used with the [THROW](exception-processing.md#throw), [THROW_LAST](exception-processing.md#throw_last), [try](exception-processing.md#try), [catch](exception-processing.md#catch), [and_catch](exception-processing.md#and_catch), and [end_catch](exception-processing.md#end_catch) macros."},{"content":"For more information on exceptions, see <bpt id=\"p1\">[</bpt>Exception Processing<ept id=\"p1\">](exception-processing.md)</ept>, or see the article <bpt id=\"p2\">[</bpt>Exception Handling (MFC)<ept id=\"p2\">](../exception-handling-in-mfc.md)</ept>.","pos":[4051,4219],"source":" For more information on exceptions, see [Exception Processing](exception-processing.md), or see the article [Exception Handling (MFC)](../exception-handling-in-mfc.md)."},{"content":"To catch a specific exception, use the appropriate derived class.","pos":[4226,4291]},{"content":"To catch all types of exceptions, use <ph id=\"ph1\">`CException`</ph>, and then use <bpt id=\"p1\">[</bpt>CObject::IsKindOf<ept id=\"p1\">](cobject-class.md#cobject__iskindof)</ept> to differentiate among <ph id=\"ph2\">`CException`</ph>-derived classes.","pos":[4292,4465],"source":" To catch all types of exceptions, use `CException`, and then use [CObject::IsKindOf](cobject-class.md#cobject__iskindof) to differentiate among `CException`-derived classes."},{"content":"Note that <ph id=\"ph1\">`CObject::IsKindOf`</ph> works only for classes declared with the <bpt id=\"p1\">[</bpt>IMPLEMENT_DYNAMIC<ept id=\"p1\">](run-time-object-model-services.md#implement_dynamic)</ept> macro, in order to take advantage of dynamic type checking.","pos":[4466,4669],"source":" Note that `CObject::IsKindOf` works only for classes declared with the [IMPLEMENT_DYNAMIC](run-time-object-model-services.md#implement_dynamic) macro, in order to take advantage of dynamic type checking."},{"content":"Any <ph id=\"ph1\">`CException`</ph>-derived class that you create should use the <ph id=\"ph2\">`IMPLEMENT_DYNAMIC`</ph> macro, too.","pos":[4670,4763],"source":" Any `CException`-derived class that you create should use the `IMPLEMENT_DYNAMIC` macro, too."},{"pos":[4770,5026],"content":"You can report details about exceptions to the user by calling <bpt id=\"p1\">[</bpt>GetErrorMessage<ept id=\"p1\">](cfileexception-class.md#cfileexception__geterrormessage)</ept> or <bpt id=\"p2\">[</bpt>ReportError<ept id=\"p2\">](#cexception__reporterror)</ept>, two member functions that work with any of <ph id=\"ph1\">`CException`</ph>'s derived classes.","source":"You can report details about exceptions to the user by calling [GetErrorMessage](cfileexception-class.md#cfileexception__geterrormessage) or [ReportError](#cexception__reporterror), two member functions that work with any of `CException`'s derived classes."},{"content":"If an exception is caught by one of the macros, the <ph id=\"ph1\">`CException`</ph> object is deleted automatically; do not delete it yourself.","pos":[5033,5157],"source":"If an exception is caught by one of the macros, the `CException` object is deleted automatically; do not delete it yourself."},{"content":"If an exception is caught by using a <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> keyword, it is not automatically deleted.","pos":[5158,5246],"source":" If an exception is caught by using a **catch** keyword, it is not automatically deleted."},{"content":"See the article <bpt id=\"p1\">[</bpt>Exception Handling (MFC)<ept id=\"p1\">](../exception-handling-in-mfc.md)</ept> for more information about when to delete an exeption object.","pos":[5247,5384],"source":" See the article [Exception Handling (MFC)](../exception-handling-in-mfc.md) for more information about when to delete an exeption object."},{"content":"Inheritance Hierarchy","pos":[5393,5414]},{"content":"CObject","pos":[5419,5426]},{"content":"Requirements","pos":[5473,5485]},{"pos":[5489,5506],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afx.h","source":"**Header:** afx.h"},{"pos":[5555,5577],"content":"CException::CException"},{"pos":[5581,5635],"content":"This member function constructs a <ph id=\"ph1\">`CException`</ph> object.","source":"This member function constructs a `CException` object."},{"content":"Parameters","pos":[5699,5709]},{"content":"b_AutoDelete","pos":[5714,5726]},{"content":"Specify <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the memory for the <ph id=\"ph1\">`CException`</ph> object has been allocated on the heap.","pos":[5731,5821],"source":" Specify **TRUE** if the memory for the `CException` object has been allocated on the heap."},{"content":"This will cause the <ph id=\"ph1\">`CException`</ph> object to be deleted when the <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> member function is called to delete the exception.","pos":[5822,5946],"source":" This will cause the `CException` object to be deleted when the **Delete** member function is called to delete the exception."},{"content":"Specify <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> if the <ph id=\"ph1\">`CException`</ph> object is on the stack or is a global object.","pos":[5947,6030],"source":" Specify **FALSE** if the `CException` object is on the stack or is a global object."},{"content":"In this case, the <ph id=\"ph1\">`CException`</ph> object will not be deleted when the <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> member function is called.","pos":[6031,6135],"source":" In this case, the `CException` object will not be deleted when the **Delete** member function is called."},{"content":"Remarks","pos":[6145,6152]},{"content":"You would normally never need to call this constructor directly.","pos":[6156,6220]},{"content":"A function that throws an exception should create an instance of a <ph id=\"ph1\">`CException`</ph>-derived class and call its constructor, or it should use one of the MFC throw functions, such as <bpt id=\"p1\">[</bpt>AfxThrowFileException<ept id=\"p1\">](exception-processing.md#afxthrowfileexception)</ept>, to throw a predefined type.","pos":[6221,6497],"source":" A function that throws an exception should create an instance of a `CException`-derived class and call its constructor, or it should use one of the MFC throw functions, such as [AfxThrowFileException](exception-processing.md#afxthrowfileexception), to throw a predefined type."},{"content":"This documentation is provided only for completeness.","pos":[6498,6551]},{"pos":[6596,6614],"content":"CException::Delete"},{"pos":[6618,6758],"content":"This function checks to see if the <bpt id=\"p1\">**</bpt>CException<ept id=\"p1\">**</ept> object was created on the heap, and if so, it calls the <bpt id=\"p2\">**</bpt>delete<ept id=\"p2\">**</ept> operator on the object.","source":"This function checks to see if the **CException** object was created on the heap, and if so, it calls the **delete** operator on the object."},{"content":"Remarks","pos":[6798,6805]},{"content":"When deleting a <bpt id=\"p1\">**</bpt>CException<ept id=\"p1\">**</ept> object, use the <bpt id=\"p2\">**</bpt>Delete<ept id=\"p2\">**</ept> member function to delete the exception.","pos":[6809,6907],"source":"When deleting a **CException** object, use the **Delete** member function to delete the exception."},{"content":"Do not use the <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> operator directly, because the <ph id=\"ph1\">`CException`</ph> object may be a global object or have been created on the stack.","pos":[6908,7042],"source":" Do not use the **delete** operator directly, because the `CException` object may be a global object or have been created on the stack."},{"content":"You can specify whether the object should be deleted when the object is constructed.","pos":[7049,7133]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CException::CException<ept id=\"p1\">](#cexception__cexception)</ept>.","pos":[7134,7210],"source":" For more information, see [CException::CException](#cexception__cexception)."},{"content":"You only need to call <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> if you are using the C++ <bpt id=\"p2\">**</bpt>try<ept id=\"p2\">**</ept><ph id=\"ph1\">- </ph><bpt id=\"p3\">**</bpt>catch<ept id=\"p3\">**</ept> mechanism.","pos":[7217,7304],"source":"You only need to call **Delete** if you are using the C++ **try**- **catch** mechanism."},{"content":"If you are using the MFC macros <bpt id=\"p1\">**</bpt>TRY<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>CATCH<ept id=\"p2\">**</ept>, then these macros will automatically call this function.","pos":[7305,7416],"source":" If you are using the MFC macros **TRY** and **CATCH**, then these macros will automatically call this function."},{"content":"Example","pos":[7426,7433]},{"pos":[9144,9167],"content":"CException::ReportError"},{"content":"Call this member function to report error text in a message box to the user.","pos":[9171,9247]},{"content":"Parameters","pos":[9349,9359]},{"content":"Specifies the style of the message box.","pos":[9374,9413]},{"content":"Apply any combination of the <bpt id=\"p1\">[</bpt>message-box styles<ept id=\"p1\">](message-box-styles.md)</ept> to the box.","pos":[9414,9498],"source":" Apply any combination of the [message-box styles](message-box-styles.md) to the box."},{"content":"If you don't specify this parameter, the default is <bpt id=\"p1\">**</bpt>MB_OK<ept id=\"p1\">**</ept>.","pos":[9499,9561],"source":" If you don't specify this parameter, the default is **MB_OK**."},{"content":"nMessageID","pos":[9569,9579]},{"content":"Specifies the resource ID (string table entry) of a message to display if the exception object does not have an error message.","pos":[9584,9710]},{"content":"If 0, the message \"No error message is available\" is displayed.","pos":[9711,9774]},{"content":"Return Value","pos":[9784,9796]},{"content":"An <ph id=\"ph1\">`AfxMessageBox`</ph> value; otherwise 0 if there is not enough memory to display the message box.","pos":[9800,9895],"source":"An `AfxMessageBox` value; otherwise 0 if there is not enough memory to display the message box."},{"content":"See <bpt id=\"p1\">[</bpt>AfxMessageBox<ept id=\"p1\">](cstring-formatting-and-message-box-display.md#afxmessagebox)</ept> for the possible return values.","pos":[9896,10008],"source":" See [AfxMessageBox](cstring-formatting-and-message-box-display.md#afxmessagebox) for the possible return values."},{"content":"Example","pos":[10018,10025]},{"content":"Here is an example of the use of <ph id=\"ph1\">`CException::ReportError`</ph>.","pos":[10029,10088],"source":"Here is an example of the use of `CException::ReportError`."},{"content":"For another example, see the example for [CATCH]--brokenlink--(exception-processing.md#catch).","pos":[10089,10183]},{"content":"See Also","pos":[10936,10944]},{"content":"CObject Class","pos":[10949,10962]},{"content":"Hierarchy Chart","pos":[10987,11002]},{"content":"Exception Processing","pos":[11032,11052]},{"content":"How Do I: Create my Own Custom Exception Classes","pos":[11084,11132]}],"content":"---\ntitle: \"CException Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CException\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"COleDispatchException class, base class\"\n  - \"CException class\"\n  - \"exceptions, classes for\"\n  - \"CInternetException class, base class\"\n  - \"macros, exception handling\"\n  - \"CNotSupportedException class, base class\"\n  - \"CFileException class, base class\"\n  - \"CDBException class, base class\"\n  - \"CArchiveException class, base class\"\n  - \"CUserException class\"\n  - \"CDaoException class, base class\"\n  - \"CMemoryException class, base class\"\n  - \"COleException class, base class\"\n  - \"CResourceException class, base class\"\nms.assetid: cfacf14d-bfe4-4666-a5c7-38b800512920\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CException Class\nThe base class for all exceptions in the Microsoft Foundation Class Library.  \n  \n## Syntax  \n  \n```  \nclass AFX_NOVTABLE CException : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CException::CException](#cexception__cexception)|Constructs a `CException` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CException::Delete](#cexception__delete)|Deletes a `CException` object.|  \n|[CException::ReportError](#cexception__reporterror)|Reports an error message in a message box to the user.|  \n  \n## Remarks  \n Because `CException` is an abstract base class you cannot create `CException` objects directly; you must create objects of derived classes. If you need to create your own `CException`-style class, use one of the derived classes listed above as a model. Make sure that your derived class also uses `IMPLEMENT_DYNAMIC`.  \n  \n The derived classes and their descriptions are listed below:  \n  \n|||  \n|-|-|  \n|[CSimpleException](../../mfc/reference/csimpleexception-class.md)|A base class for resource-critical MFC exceptions|  \n|[CInvalidArgException](../../mfc/reference/cinvalidargexception-class.md)|Invalid argument exception condition|  \n|[CMemoryException](../../mfc/reference/cmemoryexception-class.md)|Out-of-memory exception|  \n|[CNotSupportedException](../../mfc/reference/cnotsupportedexception-class.md)|Request for an unsupported operation|  \n|[CArchiveException](../../mfc/reference/carchiveexception-class.md)|Archive-specific exception|  \n|[CFileException](../../mfc/reference/cfileexception-class.md)|File-specific exception|  \n|[CResourceException](../../mfc/reference/cresourceexception-class.md)|Windows resource not found or not creatable|  \n|[COleException](../../mfc/reference/coleexception-class.md)|OLE exception|  \n|[CDBException](../../mfc/reference/cdbexception-class.md)|Database exception (that is, exception conditions arising for MFC database classes based on Open Database Connectivity)|  \n|[COleDispatchException](../../mfc/reference/coledispatchexception-class.md)|OLE dispatch (automation) exception|  \n|[CUserException](../../mfc/reference/cuserexception-class.md)|Exception that indicates that a resource could not be found|  \n|[CDaoException](../../mfc/reference/cdaoexception-class.md)|Data access object exception (that is, exception conditions arising for DAO classes)|  \n|[CInternetException](../../mfc/reference/cinternetexception-class.md)|Internet exception (that is, exception conditions arising for Internet classes).|  \n  \n These exceptions are intended to be used with the [THROW](exception-processing.md#throw), [THROW_LAST](exception-processing.md#throw_last), [try](exception-processing.md#try), [catch](exception-processing.md#catch), [and_catch](exception-processing.md#and_catch), and [end_catch](exception-processing.md#end_catch) macros. For more information on exceptions, see [Exception Processing](exception-processing.md), or see the article [Exception Handling (MFC)](../exception-handling-in-mfc.md).  \n  \n To catch a specific exception, use the appropriate derived class. To catch all types of exceptions, use `CException`, and then use [CObject::IsKindOf](cobject-class.md#cobject__iskindof) to differentiate among `CException`-derived classes. Note that `CObject::IsKindOf` works only for classes declared with the [IMPLEMENT_DYNAMIC](run-time-object-model-services.md#implement_dynamic) macro, in order to take advantage of dynamic type checking. Any `CException`-derived class that you create should use the `IMPLEMENT_DYNAMIC` macro, too.  \n  \n You can report details about exceptions to the user by calling [GetErrorMessage](cfileexception-class.md#cfileexception__geterrormessage) or [ReportError](#cexception__reporterror), two member functions that work with any of `CException`'s derived classes.  \n  \n If an exception is caught by one of the macros, the `CException` object is deleted automatically; do not delete it yourself. If an exception is caught by using a **catch** keyword, it is not automatically deleted. See the article [Exception Handling (MFC)](../exception-handling-in-mfc.md) for more information about when to delete an exeption object.  \n  \n## Inheritance Hierarchy  \n [CObject](cobject-class.md)  \n  \n `CException`  \n  \n## Requirements  \n **Header:** afx.h  \n  \n##  <a name=\"cexception__cexception\"></a>  CException::CException  \n This member function constructs a `CException` object.  \n  \n```  \nexplicit CException(BOOL bAutoDelete);\n```  \n  \n### Parameters  \n *b_AutoDelete*  \n Specify **TRUE** if the memory for the `CException` object has been allocated on the heap. This will cause the `CException` object to be deleted when the **Delete** member function is called to delete the exception. Specify **FALSE** if the `CException` object is on the stack or is a global object. In this case, the `CException` object will not be deleted when the **Delete** member function is called.  \n  \n### Remarks  \n You would normally never need to call this constructor directly. A function that throws an exception should create an instance of a `CException`-derived class and call its constructor, or it should use one of the MFC throw functions, such as [AfxThrowFileException](exception-processing.md#afxthrowfileexception), to throw a predefined type. This documentation is provided only for completeness.  \n  \n##  <a name=\"cexception__delete\"></a>  CException::Delete  \n This function checks to see if the **CException** object was created on the heap, and if so, it calls the **delete** operator on the object.  \n  \n```  \nvoid Delete();\n```  \n  \n### Remarks  \n When deleting a **CException** object, use the **Delete** member function to delete the exception. Do not use the **delete** operator directly, because the `CException` object may be a global object or have been created on the stack.  \n  \n You can specify whether the object should be deleted when the object is constructed. For more information, see [CException::CException](#cexception__cexception).  \n  \n You only need to call **Delete** if you are using the C++ **try**- **catch** mechanism. If you are using the MFC macros **TRY** and **CATCH**, then these macros will automatically call this function.  \n  \n### Example  \n ```cpp\n CFile* pFile = NULL;\n// Constructing a CFile object with this override may throw\n// a CFile exception, and won't throw any other exceptions.\n// Calling CString::Format() may throw a CMemoryException,\n// so we have a catch block for such exceptions, too. Any\n// other exception types this function throws will be\n// routed to the calling function.\n// Note that this example performs the same actions as the \n// example for CATCH, but uses C++ try/catch syntax instead\n// of using the MFC TRY/CATCH macros. This sample must use\n// CException::Delete() to delete the exception objects\n// before closing the catch block, while the CATCH example\n// implicitly performs the deletion via the macros.\ntry\n{\n   pFile = new CFile(_T(\"C:\\\\WINDOWS\\\\SYSTEM.INI\"),\n      CFile::modeRead | CFile::shareDenyNone);\n   ULONGLONG ullLength = pFile->GetLength();\n   CString str;\n   str.Format(_T(\"Your SYSTEM.INI file is %u bytes long.\"), ullLength);\n   AfxMessageBox(str);\n}\ncatch(CFileException* pEx)\n{\n   // Simply show an error message to the user.\n   pEx->ReportError();\n   pEx->Delete();\n}\ncatch(CMemoryException* pEx)\n{\n   // We can't recover from this memory exception, so we'll\n   // just terminate the app without any cleanup. Normally, an\n   // an application should do everything it possibly can to\n   // clean up properly and _not_ call AfxAbort().\n   pEx->Delete();\n   AfxAbort();\n}\n// If an exception occurrs in the CFile constructor,\n// the language will free the memory allocated by new\n// and will not complete the assignment to pFile.\n// Thus, our clean-up code needs to test for NULL.\nif (pFile != NULL)\n{\n   pFile->Close();\n   delete pFile;\n}   \n ```\n  \n##  <a name=\"cexception__reporterror\"></a>  CException::ReportError  \n Call this member function to report error text in a message box to the user.  \n  \n```  \nvirtual int ReportError(\n    UINT nType = MB_OK,  \n    UINT nMessageID = 0);\n```  \n  \n### Parameters  \n `nType`  \n Specifies the style of the message box. Apply any combination of the [message-box styles](message-box-styles.md) to the box. If you don't specify this parameter, the default is **MB_OK**.  \n  \n *nMessageID*  \n Specifies the resource ID (string table entry) of a message to display if the exception object does not have an error message. If 0, the message \"No error message is available\" is displayed.  \n  \n### Return Value  \n An `AfxMessageBox` value; otherwise 0 if there is not enough memory to display the message box. See [AfxMessageBox](cstring-formatting-and-message-box-display.md#afxmessagebox) for the possible return values.  \n  \n### Example  \n Here is an example of the use of `CException::ReportError`. For another example, see the example for [CATCH]--brokenlink--(exception-processing.md#catch).  \n  \n```cpp\nCFile fileInput;\nCFileException ex;\n\n// try to open a file for reading.  \n// The file will certainly not\n// exist because there are too many explicit\n// directories in the name.\n\n// if the call to Open() fails, ex will be\n// initialized with exception\n// information.  the call to ex.ReportError() will\n// display an appropriate\n// error message to the user, such as\n// \"\\Too\\Many\\Bad\\Dirs.DAT contains an\n// invalid path.\"  The error message text will be\n// appropriate for the\n// file name and error condition.\n\nif (!fileInput.Open(_T(\"\\\\Too\\\\Many\\\\Bad\\\\Dirs.DAT\"), CFile::modeRead, &ex))\n{\n  ex.ReportError();\n}\nelse\n{\n  // the file was opened, so do whatever work\n  // with fileInput we were planning...\n\n  fileInput.Close();\n}\n```\n\n## See Also  \n [CObject Class](cobject-class.md)   \n [Hierarchy Chart](../hierarchy-chart.md)   \n [Exception Processing](exception-processing.md)   \n [How Do I: Create my Own Custom Exception Classes](http://go.microsoft.com/fwlink/linkid=128045)\n\n\n"}