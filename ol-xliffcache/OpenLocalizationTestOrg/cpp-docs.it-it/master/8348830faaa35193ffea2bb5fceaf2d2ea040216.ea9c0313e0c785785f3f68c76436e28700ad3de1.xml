{"nodes":[{"pos":[12,50],"content":"CMFCToolTipCtrl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCToolTipCtrl Class | Microsoft Docs","pos":[0,38]}]},{"content":"CMFCToolTipCtrl Class","pos":[619,640]},{"content":"An extended tooltip implementation based on the <bpt id=\"p1\">[</bpt>CToolTipCtrl Class<ept id=\"p1\">](../../mfc/reference/ctooltipctrl-class.md)</ept>.","pos":[641,753],"source":"An extended tooltip implementation based on the [CToolTipCtrl Class](../../mfc/reference/ctooltipctrl-class.md)."},{"content":"A tooltip based on the <ph id=\"ph1\">`CMFCToolTipCtrl`</ph> class can display an icon, a label, and a description.","pos":[754,849],"source":" A tooltip based on the `CMFCToolTipCtrl` class can display an icon, a label, and a description."},{"content":"You can customize its visual appearance by using a gradient fill, custom text and border colors, bold text, rounded corners, or a balloon style.","pos":[850,994]},{"content":"Syntax","pos":[1003,1009]},{"content":"Members","pos":[1079,1086]},{"content":"Public Constructors","pos":[1096,1115]},{"content":"Name","pos":[1122,1126]},{"content":"Description","pos":[1127,1138]},{"content":"Default constructor.","pos":[1211,1231]},{"content":"Public Methods","pos":[1242,1256]},{"content":"Name","pos":[1263,1267]},{"content":"Description","pos":[1268,1279]},{"content":"CMFCToolTipCtrl::GetIconSize","pos":[1318,1346]},{"content":"Returns the size of an icon in a tooltip.","pos":[1379,1420]},{"content":"CMFCToolTipCtrl::GetParams","pos":[1426,1452]},{"content":"Returns the display settings of a tooltip.","pos":[1483,1525]},{"content":"CMFCToolTipCtrl::OnDrawBorder","pos":[1531,1560]},{"content":"Draws the border of a tooltip.","pos":[1594,1624]},{"content":"CMFCToolTipCtrl::OnDrawDescription","pos":[1630,1664]},{"content":"CMFCToolTipCtrl::OnDrawIcon","pos":[1709,1736]},{"content":"Displays an icon in a tooltip.","pos":[1768,1798]},{"content":"CMFCToolTipCtrl::OnDrawLabel","pos":[1804,1832]},{"content":"Draws the label of a tooltip, or calculates the size of the label.","pos":[1865,1931]},{"content":"CMFCToolTipCtrl::OnDrawSeparator","pos":[1937,1969]},{"content":"Draws the separator between the label and the description in a tooltip.","pos":[2006,2077]},{"content":"CMFCToolTipCtrl::OnFillBackground","pos":[2083,2116]},{"content":"Fills the tooltip background.","pos":[2154,2183]},{"content":"CMFCToolTipCtrl::SetDescription","pos":[2189,2220]},{"content":"Sets the description to be displayed by the tooltip.","pos":[2256,2308]},{"content":"CMFCToolTipCtrl::SetFixedWidth","pos":[2314,2344]},{"content":"CMFCToolTipCtrl::SetHotRibbonButton","pos":[2385,2420]},{"content":"CMFCToolTipCtrl::SetLocation","pos":[2466,2494]},{"content":"CMFCToolTipCtrl::SetParams","pos":[2533,2559]},{"pos":[2590,2671],"content":"Specifies the visual appearance of a tooltip by using a <ph id=\"ph1\">`CMFCToolTipInfo`</ph> object.","source":"Specifies the visual appearance of a tooltip by using a `CMFCToolTipInfo` object."},{"content":"Remarks","pos":[2681,2688]},{"pos":[2692,2878],"content":"Use <ph id=\"ph1\">`CMFCToolTipCtrl`</ph>, <ph id=\"ph2\">`CMFCToolTipInfo`</ph>, and <bpt id=\"p1\">[</bpt>CTooltipManager Class<ept id=\"p1\">](../../mfc/reference/ctooltipmanager-class.md)</ept> objects together to implement customized tooltips in your application.","source":"Use `CMFCToolTipCtrl`, `CMFCToolTipInfo`, and [CTooltipManager Class](../../mfc/reference/ctooltipmanager-class.md) objects together to implement customized tooltips in your application."},{"content":"For example, to use balloon-style tooltips, follow these steps:","pos":[2885,2948]},{"pos":[2958,3085],"content":"Use the <bpt id=\"p1\">[</bpt>CWinAppEx Class<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md)</ept> method to initialize the tooltip manager in your application.","source":"Use the [CWinAppEx Class](../../mfc/reference/cwinappex-class.md) method to initialize the tooltip manager in your application."},{"pos":[3095,3174],"content":"Create a <ph id=\"ph1\">`CMFCToolTipInfo`</ph> structure to specify the visual style that you want:","source":"Create a `CMFCToolTipInfo` structure to specify the visual style that you want:"},{"pos":[3669,3920],"content":"Use the <bpt id=\"p1\">[</bpt>CTooltipManager::SetTooltipParams<ept id=\"p1\">](../../mfc/reference/ctooltipmanager-class.md#ctooltipmanager__settooltipparams)</ept> method to set the visual style for all tooltips in the application by using the styles defined in the <ph id=\"ph1\">`CMFCToolTipInfo`</ph> object:","source":"Use the [CTooltipManager::SetTooltipParams](../../mfc/reference/ctooltipmanager-class.md#ctooltipmanager__settooltipparams) method to set the visual style for all tooltips in the application by using the styles defined in the `CMFCToolTipInfo` object:"},{"content":"You can also derive a new class from <ph id=\"ph1\">`CMFCToolTipCtrl`</ph> to control tooltip behavior and rendering.","pos":[4060,4157],"source":"You can also derive a new class from `CMFCToolTipCtrl` to control tooltip behavior and rendering."},{"content":"To specify a new tooltip control class, use the <ph id=\"ph1\">`CTooltipManager::SetTooltipParams`</ph> method:","pos":[4158,4249],"source":" To specify a new tooltip control class, use the `CTooltipManager::SetTooltipParams` method:"},{"pos":[4379,4563],"content":"To restore the default tooltip control class and reset the tooltip appearance to its default state, specify NULL in the runtime class and tooltip info parameters of <ph id=\"ph1\">`SetTooltipParams`</ph>:","source":"To restore the default tooltip control class and reset the tooltip appearance to its default state, specify NULL in the runtime class and tooltip info parameters of `SetTooltipParams`:"},{"content":"Example","pos":[4679,4686]},{"pos":[4690,4858],"content":"The following example demonstrates how to construct a <ph id=\"ph1\">`CMFCToolTipCtrl`</ph> object, set the description that the tooltip displays, and set the width of the tooltip control.","source":"The following example demonstrates how to construct a `CMFCToolTipCtrl` object, set the description that the tooltip displays, and set the width of the tooltip control."},{"pos":[4876,4896],"content":"NVC_MFC_RibbonApp#41"},{"content":"Inheritance Hierarchy","pos":[4972,4993]},{"content":"CObject","pos":[4998,5005]},{"content":"CCmdTarget","pos":[5052,5062]},{"content":"CWnd","pos":[5112,5116]},{"content":"CToolTipCtrl","pos":[5160,5172]},{"content":"CMFCToolTipCtrl","pos":[5224,5239]},{"content":"Requirements","pos":[5295,5307]},{"pos":[5311,5339],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxtooltipctrl.h","source":"**Header:** afxtooltipctrl.h"},{"pos":[5398,5430],"content":"CMFCToolTipCtrl::CMFCToolTipCtrl"},{"content":"Parameters","pos":[5608,5618]},{"pos":[5622,5626],"content":"[in]"},{"content":"Remarks","pos":[5646,5653]},{"pos":[5708,5736],"content":"CMFCToolTipCtrl::GetIconSize"},{"content":"Returns the size of an icon in a tooltip.","pos":[5740,5781]},{"content":"Return Value","pos":[5835,5847]},{"content":"The size of the icon, in pixels.","pos":[5851,5883]},{"pos":[5936,5962],"content":"CMFCToolTipCtrl::GetParams"},{"content":"Returns the display settings of a tooltip.","pos":[5966,6008]},{"content":"Return Value","pos":[6078,6090]},{"pos":[6094,6232],"content":"The current tooltip display settings , which are stored in a <bpt id=\"p1\">[</bpt>CMFCToolTipInfo Class<ept id=\"p1\">](../../mfc/reference/cmfctooltipinfo-class.md)</ept> object.","source":"The current tooltip display settings , which are stored in a [CMFCToolTipInfo Class](../../mfc/reference/cmfctooltipinfo-class.md) object."},{"pos":[6288,6317],"content":"CMFCToolTipCtrl::OnDrawBorder"},{"content":"Draws the border of a tooltip.","pos":[6321,6351]},{"content":"Parameters","pos":[6460,6470]},{"content":"Pointer to a device context.","pos":[6488,6516]},{"content":"The bounding rectangle of the tooltip.","pos":[6538,6576]},{"content":"Border color.","pos":[6601,6614]},{"content":"Remarks","pos":[6624,6631]},{"content":"Override this method in a derived class to customize the appearance of the tooltip border.","pos":[6635,6725]},{"pos":[6786,6820],"content":"CMFCToolTipCtrl::OnDrawDescription"},{"content":"Parameters","pos":[7036,7046]},{"content":"[in]","pos":[7050,7054]},{"content":"[in]","pos":[7064,7068]},{"content":"[in]","pos":[7079,7083]},{"content":"Return Value","pos":[7105,7117]},{"content":"Remarks","pos":[7127,7134]},{"pos":[7188,7215],"content":"CMFCToolTipCtrl::OnDrawIcon"},{"content":"Displays an icon in a tooltip.","pos":[7219,7249]},{"content":"Parameters","pos":[7337,7347]},{"content":"[in]","pos":[7351,7355]},{"content":"A pointer to a device context.","pos":[7365,7395]},{"content":"[in]","pos":[7402,7406]},{"content":"Coordinates of the icon.","pos":[7422,7446]},{"content":"Return Value","pos":[7456,7468]},{"content":"if the icon was drawn.","pos":[7479,7501]},{"content":"Otherwise <ph id=\"ph1\">`FALSE`</ph>.","pos":[7502,7520],"source":" Otherwise `FALSE`."},{"content":"Remarks","pos":[7530,7537]},{"content":"Override this method in a derived class to display a custom icon.","pos":[7541,7606]},{"content":"You must also override <bpt id=\"p1\">[</bpt>CMFCToolTipCtrl::GetIconSize<ept id=\"p1\">](#cmfctooltipctrl__geticonsize)</ept> to enable the tooltip to correctly calculate the layout of text and description.","pos":[7607,7772],"source":" You must also override [CMFCToolTipCtrl::GetIconSize](#cmfctooltipctrl__geticonsize) to enable the tooltip to correctly calculate the layout of text and description."},{"pos":[7827,7855],"content":"CMFCToolTipCtrl::OnDrawLabel"},{"content":"Draws the label of a tooltip, or calculates the size of the label.","pos":[7859,7925]},{"content":"Parameters","pos":[8032,8042]},{"content":"A pointer to a device context.","pos":[8060,8090]},{"content":"Bounding rectangle of the label area.","pos":[8112,8149]},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, the label will not be drawn.","pos":[8176,8215],"source":" If `TRUE`, the label will not be drawn."},{"content":"Return Value","pos":[8225,8237]},{"content":"Size of the label, in pixels.","pos":[8241,8270]},{"content":"Remarks","pos":[8280,8287]},{"content":"Override this method in a derived class if you want to customize the appearance of the tooltip label.","pos":[8291,8392]},{"pos":[8451,8483],"content":"CMFCToolTipCtrl::OnDrawSeparator"},{"content":"Draws the separator between the label and the description in a tooltip.","pos":[8487,8558]},{"content":"Parameters","pos":[8669,8679]},{"content":"[in]","pos":[8683,8687]},{"content":"A pointer to a device context.","pos":[8697,8727]},{"content":"[in]","pos":[8734,8738]},{"content":"Horizontal coordinate of the left end of the separator.","pos":[8747,8802]},{"content":"[in]","pos":[8809,8813]},{"content":"Horizontal coordinate of the right end of the separator.","pos":[8822,8878]},{"content":"[in]","pos":[8885,8889]},{"content":"Vertical coordinate of the separator.","pos":[8897,8934]},{"content":"Remarks","pos":[8944,8951]},{"content":"The default implementation draws a line from the point (x1, y) to the point (x2, y).","pos":[8955,9039]},{"content":"Override this method in a derived class to customize the appearance of the separator.","pos":[9046,9131]},{"pos":[9191,9224],"content":"CMFCToolTipCtrl::OnFillBackground"},{"content":"Fills the tooltip background.","pos":[9228,9257]},{"content":"Parameters","pos":[9396,9406]},{"content":"A pointer to a device context.","pos":[9424,9454]},{"content":"Specifies the bounding rectangle of the area to fill.","pos":[9476,9529]},{"content":"Tooltip foreground color.","pos":[9554,9579]},{"content":"Color of borders and the delimiter line between label and description.","pos":[9604,9674]},{"content":"Remarks","pos":[9684,9691]},{"pos":[9695,9891],"content":"The default implementation fills the rectangle that is specified by <ph id=\"ph1\">`rect`</ph> with the color or pattern specified by the most recent call to <bpt id=\"p1\">[</bpt>CMFCToolTipCtrl::SetParams<ept id=\"p1\">](#cmfctooltipctrl__setparams)</ept>.","source":"The default implementation fills the rectangle that is specified by `rect` with the color or pattern specified by the most recent call to [CMFCToolTipCtrl::SetParams](#cmfctooltipctrl__setparams)."},{"content":"Override this method in a derived class if you want to customize the appearance of the tooltip.","pos":[9898,9993]},{"pos":[10051,10082],"content":"CMFCToolTipCtrl::SetDescription"},{"content":"Sets the description to be displayed by the tooltip.","pos":[10086,10138]},{"content":"Parameters","pos":[10222,10232]},{"content":"Description text.","pos":[10261,10278]},{"content":"Remarks","pos":[10288,10295]},{"content":"The description text is displayed on the tooltip under the separator.","pos":[10299,10368]},{"pos":[10425,10455],"content":"CMFCToolTipCtrl::SetFixedWidth"},{"content":"Parameters","pos":[10655,10665]},{"content":"[in]","pos":[10669,10673]},{"content":"[in]","pos":[10693,10697]},{"content":"Remarks","pos":[10726,10733]},{"pos":[10795,10830],"content":"CMFCToolTipCtrl::SetHotRibbonButton"},{"content":"Parameters","pos":[11016,11026]},{"pos":[11030,11034],"content":"[in]"},{"content":"Remarks","pos":[11060,11067]},{"pos":[11122,11150],"content":"CMFCToolTipCtrl::SetLocation"},{"content":"Parameters","pos":[11307,11317]},{"pos":[11321,11325],"content":"[in]"},{"content":"Remarks","pos":[11340,11347]},{"pos":[11400,11426],"content":"CMFCToolTipCtrl::SetParams"},{"pos":[11430,11563],"content":"Specifies the visual appearance of a tooltip by using a <bpt id=\"p1\">[</bpt>CMFCToolTipInfo Class<ept id=\"p1\">](../../mfc/reference/cmfctooltipinfo-class.md)</ept> object.","source":"Specifies the visual appearance of a tooltip by using a [CMFCToolTipInfo Class](../../mfc/reference/cmfctooltipinfo-class.md) object."},{"content":"Parameters","pos":[11630,11640]},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>CMFCToolTipInfo Class<ept id=\"p1\">](../../mfc/reference/cmfctooltipinfo-class.md)</ept> object that contains  the display parameters.","pos":[11662,11790],"source":" Pointer to a [CMFCToolTipInfo Class](../../mfc/reference/cmfctooltipinfo-class.md) object that contains  the display parameters."},{"content":"Remarks","pos":[11800,11807]},{"content":"Whenever the tooltip is displayed, it is drawn by using the colors and visual styles that <ph id=\"ph1\">`pParams`</ph> specifies.","pos":[11811,11921],"source":"Whenever the tooltip is displayed, it is drawn by using the colors and visual styles that `pParams` specifies."},{"content":"The value of <ph id=\"ph1\">`pParams`</ph> is stored in the protected member <ph id=\"ph2\">`m_Params`</ph>, which can be accessed by a derived class that overrides <bpt id=\"p1\">[</bpt>CMFCToolTipCtrl::OnDrawBorder<ept id=\"p1\">](#cmfctooltipctrl__ondrawborder)</ept>, <bpt id=\"p2\">[</bpt>CMFCToolTipCtrl::OnDrawIcon<ept id=\"p2\">](#cmfctooltipctrl__ondrawicon)</ept>, <bpt id=\"p3\">[</bpt>CMFCToolTipCtrl::OnDrawLabel<ept id=\"p3\">](#cmfctooltipctrl__ondrawlabel)</ept>, <bpt id=\"p4\">[</bpt>CMFCToolTipCtrl::OnDrawSeparator<ept id=\"p4\">](#cmfctooltipctrl__ondrawseparator)</ept>, or <bpt id=\"p5\">[</bpt>CMFCToolTipCtrl::OnFillBackground<ept id=\"p5\">](#cmfctooltipctrl__onfillbackground)</ept> to maintain the specified appearance.","pos":[11922,12419],"source":" The value of `pParams` is stored in the protected member `m_Params`, which can be accessed by a derived class that overrides [CMFCToolTipCtrl::OnDrawBorder](#cmfctooltipctrl__ondrawborder), [CMFCToolTipCtrl::OnDrawIcon](#cmfctooltipctrl__ondrawicon), [CMFCToolTipCtrl::OnDrawLabel](#cmfctooltipctrl__ondrawlabel), [CMFCToolTipCtrl::OnDrawSeparator](#cmfctooltipctrl__ondrawseparator), or [CMFCToolTipCtrl::OnFillBackground](#cmfctooltipctrl__onfillbackground) to maintain the specified appearance."},{"content":"See Also","pos":[12428,12436]},{"content":"Hierarchy Chart","pos":[12441,12456]},{"content":"Classes","pos":[12493,12500]},{"content":"CToolTipCtrl Class","pos":[12543,12561]},{"content":"CTooltipManager Class","pos":[12611,12632]},{"content":"CMFCToolTipInfo Class","pos":[12685,12706]},{"content":"CWinAppEx Class","pos":[12759,12774]}],"content":"---\ntitle: \"CMFCToolTipCtrl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCToolTipCtrl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCToolTipCtrl class\"\nms.assetid: 9fbfcfb1-a8ab-417f-ae29-9a9ca85ee58f\ncaps.latest.revision: 33\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCToolTipCtrl Class\nAn extended tooltip implementation based on the [CToolTipCtrl Class](../../mfc/reference/ctooltipctrl-class.md). A tooltip based on the `CMFCToolTipCtrl` class can display an icon, a label, and a description. You can customize its visual appearance by using a gradient fill, custom text and border colors, bold text, rounded corners, or a balloon style.  \n  \n## Syntax  \n  \n```  \nclass CMFCToolTipCtrl : public CToolTipCtrl  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`CMFCToolTipCtrl::CMFCToolTipCtrl`|Default constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolTipCtrl::GetIconSize](#cmfctooltipctrl__geticonsize)|Returns the size of an icon in a tooltip.|  \n|[CMFCToolTipCtrl::GetParams](#cmfctooltipctrl__getparams)|Returns the display settings of a tooltip.|  \n|[CMFCToolTipCtrl::OnDrawBorder](#cmfctooltipctrl__ondrawborder)|Draws the border of a tooltip.|  \n|[CMFCToolTipCtrl::OnDrawDescription](#cmfctooltipctrl__ondrawdescription)||  \n|[CMFCToolTipCtrl::OnDrawIcon](#cmfctooltipctrl__ondrawicon)|Displays an icon in a tooltip.|  \n|[CMFCToolTipCtrl::OnDrawLabel](#cmfctooltipctrl__ondrawlabel)|Draws the label of a tooltip, or calculates the size of the label.|  \n|[CMFCToolTipCtrl::OnDrawSeparator](#cmfctooltipctrl__ondrawseparator)|Draws the separator between the label and the description in a tooltip.|  \n|[CMFCToolTipCtrl::OnFillBackground](#cmfctooltipctrl__onfillbackground)|Fills the tooltip background.|  \n|[CMFCToolTipCtrl::SetDescription](#cmfctooltipctrl__setdescription)|Sets the description to be displayed by the tooltip.|  \n|[CMFCToolTipCtrl::SetFixedWidth](#cmfctooltipctrl__setfixedwidth)||  \n|[CMFCToolTipCtrl::SetHotRibbonButton](#cmfctooltipctrl__sethotribbonbutton)||  \n|[CMFCToolTipCtrl::SetLocation](#cmfctooltipctrl__setlocation)||  \n|[CMFCToolTipCtrl::SetParams](#cmfctooltipctrl__setparams)|Specifies the visual appearance of a tooltip by using a `CMFCToolTipInfo` object.|  \n  \n## Remarks  \n Use `CMFCToolTipCtrl`, `CMFCToolTipInfo`, and [CTooltipManager Class](../../mfc/reference/ctooltipmanager-class.md) objects together to implement customized tooltips in your application.  \n  \n For example, to use balloon-style tooltips, follow these steps:  \n  \n 1. Use the [CWinAppEx Class](../../mfc/reference/cwinappex-class.md) method to initialize the tooltip manager in your application.  \n  \n 2. Create a `CMFCToolTipInfo` structure to specify the visual style that you want:  \n  \n```  \nCMFCToolTipInfo params;  \n    params.m_bBoldLabel = FALSE;  \n    params.m_bDrawDescription = FALSE;  \n    params.m_bDrawIcon = FALSE;  \n    params.m_bRoundedCorners = TRUE;  \n    params.m_bDrawSeparator = FALSE;  \n    if (m_bCustomColors)  \n {  \n    params.m_clrFill = RGB (255,\n    255,\n    255);\n\n    params.m_clrFillGradient = RGB (228,\n    228,\n    240);\n\n    params.m_clrText = RGB (61,\n    83,\n    80);\n\n    params.m_clrBorder = RGB (144,\n    149,\n    168);\n\n }  \n```  \n  \n 3. Use the [CTooltipManager::SetTooltipParams](../../mfc/reference/ctooltipmanager-class.md#ctooltipmanager__settooltipparams) method to set the visual style for all tooltips in the application by using the styles defined in the `CMFCToolTipInfo` object:  \n  \n```  \ntheApp.GetTooltipManager ()->SetTooltipParams (AFX_TOOLTIP_TYPE_ALL,  \n    RUNTIME_CLASS (CMFCToolTipCtrl), &params);\n```  \n  \n You can also derive a new class from `CMFCToolTipCtrl` to control tooltip behavior and rendering. To specify a new tooltip control class, use the `CTooltipManager::SetTooltipParams` method:  \n  \n```  \nmyApp.GetTooltipManager ()->SetTooltipParams (AFX_TOOLTIP_TYPE_ALL,  \n    RUNTIME_CLASS (CMyToolTipCtrl))  \n```  \n  \n To restore the default tooltip control class and reset the tooltip appearance to its default state, specify NULL in the runtime class and tooltip info parameters of `SetTooltipParams`:  \n  \n```  \ntheApp.GetTooltipManager ()->SetTooltipParams (AFX_TOOLTIP_TYPE_ALL,  \n    NULL,\n    NULL);\n```  \n  \n## Example  \n The following example demonstrates how to construct a `CMFCToolTipCtrl` object, set the description that the tooltip displays, and set the width of the tooltip control.  \n  \n [!code-cpp[NVC_MFC_RibbonApp#41](../../mfc/reference/codesnippet/cpp/cmfctooltipctrl-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CToolTipCtrl](../../mfc/reference/ctooltipctrl-class.md)  \n  \n [CMFCToolTipCtrl](../../mfc/reference/cmfctooltipctrl-class.md)  \n  \n## Requirements  \n **Header:** afxtooltipctrl.h  \n  \n##  <a name=\"cmfctooltipctrl__cmfctooltipctrl\"></a>  CMFCToolTipCtrl::CMFCToolTipCtrl  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCMFCToolTipCtrl(CMFCToolTipInfo* pParams = NULL);\n```  \n  \n### Parameters  \n [in] `pParams`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctooltipctrl__geticonsize\"></a>  CMFCToolTipCtrl::GetIconSize  \n Returns the size of an icon in a tooltip.  \n  \n```  \nvirtual CSize GetIconSize();\n```  \n  \n### Return Value  \n The size of the icon, in pixels.  \n  \n##  <a name=\"cmfctooltipctrl__getparams\"></a>  CMFCToolTipCtrl::GetParams  \n Returns the display settings of a tooltip.  \n  \n```  \nconst CMFCToolTipInfo& GetParams() const;\n\n \n```  \n  \n### Return Value  \n The current tooltip display settings , which are stored in a [CMFCToolTipInfo Class](../../mfc/reference/cmfctooltipinfo-class.md) object.  \n  \n##  <a name=\"cmfctooltipctrl__ondrawborder\"></a>  CMFCToolTipCtrl::OnDrawBorder  \n Draws the border of a tooltip.  \n  \n```  \nvirtual void OnDrawBorder(\n    CDC* pDC,  \n    CRect rect,  \n    COLORREF clrLine);\n```  \n  \n### Parameters  \n `[in] pDC`  \n Pointer to a device context.  \n  \n `[in] rect`  \n The bounding rectangle of the tooltip.  \n  \n `[in] clrLine`  \n Border color.  \n  \n### Remarks  \n Override this method in a derived class to customize the appearance of the tooltip border.  \n  \n##  <a name=\"cmfctooltipctrl__ondrawdescription\"></a>  CMFCToolTipCtrl::OnDrawDescription  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CSize OnDrawDescription(\n    CDC* pDC,  \n    CRect rect,  \n    BOOL bCalcOnly);\n```  \n  \n### Parameters  \n [in] `pDC`  \n [in] `rect`  \n [in] `bCalcOnly`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfctooltipctrl__ondrawicon\"></a>  CMFCToolTipCtrl::OnDrawIcon  \n Displays an icon in a tooltip.  \n  \n```  \nvirtual BOOL OnDrawIcon(\n    CDC* pDC,  \n    CRect rectImage);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `rectImage`  \n Coordinates of the icon.  \n  \n### Return Value  \n `TRUE` if the icon was drawn. Otherwise `FALSE`.  \n  \n### Remarks  \n Override this method in a derived class to display a custom icon. You must also override [CMFCToolTipCtrl::GetIconSize](#cmfctooltipctrl__geticonsize) to enable the tooltip to correctly calculate the layout of text and description.  \n  \n##  <a name=\"cmfctooltipctrl__ondrawlabel\"></a>  CMFCToolTipCtrl::OnDrawLabel  \n Draws the label of a tooltip, or calculates the size of the label.  \n  \n```  \nvirtual CSize OnDrawLabel(\n    CDC* pDC,  \n    CRect rect,  \n    BOOL bCalcOnly);\n```  \n  \n### Parameters  \n `[in] pDC`  \n A pointer to a device context.  \n  \n `[in] rect`  \n Bounding rectangle of the label area.  \n  \n `[in] bCalcOnly`  \n If `TRUE`, the label will not be drawn.  \n  \n### Return Value  \n Size of the label, in pixels.  \n  \n### Remarks  \n Override this method in a derived class if you want to customize the appearance of the tooltip label.  \n  \n##  <a name=\"cmfctooltipctrl__ondrawseparator\"></a>  CMFCToolTipCtrl::OnDrawSeparator  \n Draws the separator between the label and the description in a tooltip.  \n  \n```  \nvirtual void OnDrawSeparator(\n    CDC* pDC,  \n    int x1,  \n    int x2,  \n    int y);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n [in] `x1`  \n Horizontal coordinate of the left end of the separator.  \n  \n [in] `x2`  \n Horizontal coordinate of the right end of the separator.  \n  \n [in] `Y`  \n Vertical coordinate of the separator.  \n  \n### Remarks  \n The default implementation draws a line from the point (x1, y) to the point (x2, y).  \n  \n Override this method in a derived class to customize the appearance of the separator.  \n  \n##  <a name=\"cmfctooltipctrl__onfillbackground\"></a>  CMFCToolTipCtrl::OnFillBackground  \n Fills the tooltip background.  \n  \n```  \nvirtual void OnFillBackground(\n    CDC* pDC,  \n    CRect rect,  \n    COLORREF& clrText,  \n    COLORREF& clrLine);\n```  \n  \n### Parameters  \n `[in] pDC`  \n A pointer to a device context.  \n  \n `[in] rect`  \n Specifies the bounding rectangle of the area to fill.  \n  \n `[in] clrText`  \n Tooltip foreground color.  \n  \n `[in] clrLine`  \n Color of borders and the delimiter line between label and description.  \n  \n### Remarks  \n The default implementation fills the rectangle that is specified by `rect` with the color or pattern specified by the most recent call to [CMFCToolTipCtrl::SetParams](#cmfctooltipctrl__setparams).  \n  \n Override this method in a derived class if you want to customize the appearance of the tooltip.  \n  \n##  <a name=\"cmfctooltipctrl__setdescription\"></a>  CMFCToolTipCtrl::SetDescription  \n Sets the description to be displayed by the tooltip.  \n  \n```  \nvirtual void SetDescription(const CString strDesrciption);\n```  \n  \n### Parameters  \n `[in] strDesrciption`  \n Description text.  \n  \n### Remarks  \n The description text is displayed on the tooltip under the separator.  \n  \n##  <a name=\"cmfctooltipctrl__setfixedwidth\"></a>  CMFCToolTipCtrl::SetFixedWidth  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetFixedWidth(\n    int nWidthRegular,  \n    int nWidthLargeImage);\n```  \n  \n### Parameters  \n [in] `nWidthRegular`  \n [in] `nWidthLargeImage`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctooltipctrl__sethotribbonbutton\"></a>  CMFCToolTipCtrl::SetHotRibbonButton  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetHotRibbonButton(CMFCRibbonButton* pRibbonButton);\n```  \n  \n### Parameters  \n [in] `pRibbonButton`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctooltipctrl__setlocation\"></a>  CMFCToolTipCtrl::SetLocation  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetLocation(CPoint pt);\n```  \n  \n### Parameters  \n [in] `pt`  \n  \n### Remarks  \n  \n##  <a name=\"cmfctooltipctrl__setparams\"></a>  CMFCToolTipCtrl::SetParams  \n Specifies the visual appearance of a tooltip by using a [CMFCToolTipInfo Class](../../mfc/reference/cmfctooltipinfo-class.md) object.  \n  \n```  \nvoid SetParams(CMFCToolTipInfo* pParams);\n```  \n  \n### Parameters  \n `[in] pParams`  \n Pointer to a [CMFCToolTipInfo Class](../../mfc/reference/cmfctooltipinfo-class.md) object that contains  the display parameters.  \n  \n### Remarks  \n Whenever the tooltip is displayed, it is drawn by using the colors and visual styles that `pParams` specifies. The value of `pParams` is stored in the protected member `m_Params`, which can be accessed by a derived class that overrides [CMFCToolTipCtrl::OnDrawBorder](#cmfctooltipctrl__ondrawborder), [CMFCToolTipCtrl::OnDrawIcon](#cmfctooltipctrl__ondrawicon), [CMFCToolTipCtrl::OnDrawLabel](#cmfctooltipctrl__ondrawlabel), [CMFCToolTipCtrl::OnDrawSeparator](#cmfctooltipctrl__ondrawseparator), or [CMFCToolTipCtrl::OnFillBackground](#cmfctooltipctrl__onfillbackground) to maintain the specified appearance.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CToolTipCtrl Class](../../mfc/reference/ctooltipctrl-class.md)   \n [CTooltipManager Class](../../mfc/reference/ctooltipmanager-class.md)   \n [CMFCToolTipInfo Class](../../mfc/reference/cmfctooltipinfo-class.md)   \n [CWinAppEx Class](../../mfc/reference/cwinappex-class.md)\n"}