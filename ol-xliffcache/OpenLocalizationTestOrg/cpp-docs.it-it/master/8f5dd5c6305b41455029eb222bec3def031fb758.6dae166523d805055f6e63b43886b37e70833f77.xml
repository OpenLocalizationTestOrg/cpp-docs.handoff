{"nodes":[{"pos":[12,47],"content":"bad_cast Exception | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"bad_cast Exception | Microsoft Docs","pos":[0,35]}]},{"content":"bad_cast Exception","pos":[664,682]},{"pos":[683,800],"content":"The <ph id=\"ph1\">`bad_cast`</ph> exception is thrown by the <ph id=\"ph2\">`dynamic_cast`</ph> operator as the result of a failed cast to a reference type.","source":"The `bad_cast` exception is thrown by the `dynamic_cast` operator as the result of a failed cast to a reference type."},{"content":"Syntax","pos":[809,815]},{"content":"Remarks","pos":[873,880]},{"pos":[884,916],"content":"The interface for <ph id=\"ph1\">`bad_cast`</ph> is:","source":"The interface for `bad_cast` is:"},{"pos":[1101,1204],"content":"The following code contains an example of a failed <ph id=\"ph1\">`dynamic_cast`</ph> that throws the <ph id=\"ph2\">`bad_cast`</ph> exception.","source":"The following code contains an example of a failed `dynamic_cast` that throws the `bad_cast` exception."},{"content":"The exception is thrown because the object being cast (a Shape) is not derived from the specified cast type (Circle).","pos":[1767,1884]},{"content":"To avoid the exception, add these declarations to <ph id=\"ph1\">`main`</ph>:","pos":[1885,1942],"source":" To avoid the exception, add these declarations to `main`:"},{"pos":[2030,2095],"content":"Then reverse the sense of the cast in the <ph id=\"ph1\">`try`</ph> block as follows:","source":"Then reverse the sense of the cast in the `try` block as follows:"},{"content":"See Also","pos":[2174,2182]},{"content":"dynamic_cast Operator","pos":[2187,2208]},{"content":"Keywords","pos":[2248,2256]},{"content":"C++ Exception Handling","pos":[2287,2309]}],"content":"---\ntitle: \"bad_cast Exception | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"bad_cast\"\n  - \"bad_cast_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"exceptions, bad_cast\"\n  - \"bad_cast keyword [C++]\"\nms.assetid: 31eae1e7-d8d5-40a0-9fef-64a6a4fc9021\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# bad_cast Exception\nThe `bad_cast` exception is thrown by the `dynamic_cast` operator as the result of a failed cast to a reference type.  \n  \n## Syntax  \n  \n```  \ncatch (bad_cast)  \n   statement  \n```  \n  \n## Remarks  \n The interface for `bad_cast` is:  \n  \n```  \nclass bad_cast : public exception {  \npublic:  \n   bad_cast(const char * _Message = \"bad cast\");  \n   bad_cast(const bad_cast &);  \n   virtual ~bad_cast();  \n};  \n```  \n  \n The following code contains an example of a failed `dynamic_cast` that throws the `bad_cast` exception.  \n  \n```  \n// expre_bad_cast_Exception.cpp  \n// compile with: /EHsc /GR  \n#include <typeinfo.h>  \n#include <iostream>  \n  \nclass Shape {  \npublic:  \n   virtual void virtualfunc() const {}  \n};  \n  \nclass Circle: public Shape {  \npublic:  \n   virtual void virtualfunc() const {}  \n};  \n  \nusing namespace std;  \nint main() {  \n   Shape shape_instance;  \n   Shape& ref_shape = shape_instance;  \n   try {  \n      Circle& ref_circle = dynamic_cast<Circle&>(ref_shape);   \n   }  \n   catch (bad_cast b) {  \n      cout << \"Caught: \" << b.what();  \n   }  \n}  \n```  \n  \n The exception is thrown because the object being cast (a Shape) is not derived from the specified cast type (Circle). To avoid the exception, add these declarations to `main`:  \n  \n```  \nCircle circle_instance;  \nCircle& ref_circle = circle_instance;  \n```  \n  \n Then reverse the sense of the cast in the `try` block as follows:  \n  \n```  \nShape& ref_shape = dynamic_cast<Shape&>(ref_circle);  \n```  \n  \n## See Also  \n [dynamic_cast Operator](../cpp/dynamic-cast-operator.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n [C++ Exception Handling](../cpp/cpp-exception-handling.md)"}