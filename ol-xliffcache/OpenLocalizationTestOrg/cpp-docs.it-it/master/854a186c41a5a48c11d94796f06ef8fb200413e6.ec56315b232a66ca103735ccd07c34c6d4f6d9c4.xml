{"nodes":[{"pos":[12,53],"content":"&lt;string&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"string<ph id=\"ph1\">&amp;gt;</ph> functions | Microsoft Docs","pos":[4,41],"source":"string&gt; functions | Microsoft Docs"}]},{"content":"string<ph id=\"ph1\">&amp;gt;</ph> functions","pos":[300,320],"source":"string&gt; functions"},{"content":"getline","pos":[340,347]},{"content":"stod","pos":[360,364]},{"content":"stof","pos":[374,378]},{"content":"stoi","pos":[392,396]},{"content":"stol","pos":[406,410]},{"content":"stold","pos":[420,425]},{"content":"stoll","pos":[440,445]},{"content":"stoul","pos":[456,461]},{"content":"stoull","pos":[472,478]},{"content":"swap","pos":[494,498]},{"content":"to_string","pos":[508,517]},{"content":"to_wstring","pos":[532,542]},{"pos":[591,598],"content":"getline"},{"content":"Extract strings from the input stream line-by-line.","pos":[602,653]},{"content":"Parameters","pos":[1593,1603]},{"content":"The input stream from which a string is to be extracted.","pos":[1615,1671]},{"content":"The string into which are read the characters from the input stream.","pos":[1687,1755]},{"content":"The line delimiter.","pos":[1773,1792]},{"content":"Return Value","pos":[1802,1814]},{"pos":[1818,1840],"content":"The input stream <ph id=\"ph1\">`is`</ph>.","source":"The input stream `is`."},{"content":"Remarks","pos":[1850,1857]},{"pos":[1861,1981],"content":"The pair of function signatures marked <ph id=\"ph1\">`(1)`</ph> extract characters from <ph id=\"ph2\">`is`</ph> until <ph id=\"ph3\">`delim`</ph> is found, storing them in <ph id=\"ph4\">`str`</ph>.","source":"The pair of function signatures marked `(1)` extract characters from `is` until `delim` is found, storing them in `str`."},{"content":"The pair of function signatures marked <ph id=\"ph1\">`(2)`</ph> use newline as the default line delimiter and behave as <bpt id=\"p1\">**</bpt>getline<ept id=\"p1\">**</ept>( <ph id=\"ph2\">`is`</ph>, <ph id=\"ph3\">`str`</ph>, <ph id=\"ph4\">`is`</ph>.","pos":[1988,2120],"source":"The pair of function signatures marked `(2)` use newline as the default line delimiter and behave as **getline**( `is`, `str`, `is`."},{"content":"(' <ph id=\"ph1\">`\\n`</ph>')).","pos":[2128,2139],"source":"(' `\\n`'))."},{"pos":[2146,2282],"content":"The second function of each pair is an analog to the first one to support <bpt id=\"p1\">[</bpt>rvalue references<ept id=\"p1\">](../cpp/lvalues-and-rvalues-visual-cpp.md)</ept>.","source":"The second function of each pair is an analog to the first one to support [rvalue references](../cpp/lvalues-and-rvalues-visual-cpp.md)."},{"content":"Extraction stops when one of the following occurs:","pos":[2289,2339]},{"pos":[2349,2440],"content":"At end-of-file, in which case the internal state flag of <ph id=\"ph1\">`is`</ph> is set to <ph id=\"ph2\">`ios_base::eofbit`</ph>.","source":"At end-of-file, in which case the internal state flag of `is` is set to `ios_base::eofbit`."},{"pos":[2450,2609],"content":"After the function extracts an element that compares equal to <bpt id=\"p1\">**</bpt>delim<ept id=\"p1\">**</ept>, in which case the element is neither put back nor appended to the controlled sequence.","source":"After the function extracts an element that compares equal to **delim**, in which case the element is neither put back nor appended to the controlled sequence."},{"pos":[2619,2816],"content":"After the function extracts <ph id=\"ph1\">`str.`</ph><bpt id=\"p1\">[</bpt>max_size<ept id=\"p1\">](../standard-library/basic-string-class.md#basic_string__max_size)</ept> elements, in which case the internal state flag of <ph id=\"ph2\">`is`</ph> is set to <ph id=\"ph3\">`ios_base::failbit`</ph>.","source":"After the function extracts `str.`[max_size](../standard-library/basic-string-class.md#basic_string__max_size) elements, in which case the internal state flag of `is` is set to `ios_base::failbit`."},{"pos":[2826,2934],"content":"Some other error other than those previously listed, in which case the internal state flag of <ph id=\"ph1\">`is`</ph> is set to","source":"Some other error other than those previously listed, in which case the internal state flag of `is` is set to "},{"pos":[2960,3085],"content":"For information about internal state flags, see <bpt id=\"p1\">[</bpt>ios_base::iostate<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__iostate)</ept>.","source":"For information about internal state flags, see [ios_base::iostate](../standard-library/ios-base-class.md#ios_base__iostate)."},{"content":"If the function extracts no elements, the internal state flag of <ph id=\"ph1\">`is`</ph> is set to <ph id=\"ph2\">`ios_base::failbit`</ph>.","pos":[3092,3192],"source":"If the function extracts no elements, the internal state flag of `is` is set to `ios_base::failbit`."},{"content":"In any case, <ph id=\"ph1\">`getline`</ph> returns <ph id=\"ph2\">`is`</ph>.","pos":[3193,3229],"source":" In any case, `getline` returns `is`."},{"pos":[3236,3304],"content":"If an exception is thrown, <ph id=\"ph1\">`is`</ph> and <ph id=\"ph2\">`str`</ph> are left in a valid state.","source":"If an exception is thrown, `is` and `str` are left in a valid state."},{"content":"Example","pos":[3314,3321]},{"content":"The following code demonstrates <ph id=\"ph1\">`getline()`</ph> in two modes: first with the default delimiter (newline) and second with a whitespace as delimiter.","pos":[3326,3469],"source":"The following code demonstrates `getline()` in two modes: first with the default delimiter (newline) and second with a whitespace as delimiter."},{"content":"The end-of-file character (CTRL-Z on the keyboard) is used to control termination of the while loops.","pos":[3470,3571]},{"content":"This sets the internal state flag of <ph id=\"ph1\">`cin`</ph> to <ph id=\"ph2\">`eofbit`</ph>, which must be cleared with <bpt id=\"p1\">[</bpt>basic_ios::clear()<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__clear)</ept> before the second while loop will work properly.","pos":[3572,3781],"source":" This sets the internal state flag of `cin` to `eofbit`, which must be cleared with [basic_ios::clear()](../standard-library/basic-ios-class.md#basic_ios__clear) before the second while loop will work properly."},{"pos":[4804,4808],"content":"stod"},{"pos":[4812,4856],"content":"Converts a character sequence to a <ph id=\"ph1\">`double`</ph>.","source":"Converts a character sequence to a `double`."},{"content":"Parameters","pos":[5009,5019]},{"content":"Parameter","pos":[5026,5035]},{"content":"Description","pos":[5036,5047]},{"content":"The character sequence to be converted.","pos":[5097,5136]},{"content":"The index value of the first unconverted character.","pos":[5147,5198]},{"content":"Return Value","pos":[5209,5221]},{"pos":[5225,5244],"content":"The <ph id=\"ph1\">`double`</ph> value.","source":"The `double` value."},{"content":"Remarks","pos":[5254,5261]},{"content":"The function converts the sequence of elements in <ph id=\"ph1\">` str`</ph> to a value <ph id=\"ph2\">` val`</ph> of type <ph id=\"ph3\">`double`</ph> as if by calling <ph id=\"ph4\">`strtod( str.c_str(), _Eptr)`</ph>, where <ph id=\"ph5\">`_Eptr`</ph> is an object internal to the function.","pos":[5265,5457],"source":"The function converts the sequence of elements in ` str` to a value ` val` of type `double` as if by calling `strtod( str.c_str(), _Eptr)`, where `_Eptr` is an object internal to the function."},{"content":"If <ph id=\"ph1\">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id=\"ph2\">`invalid_argument`</ph>.","pos":[5458,5533],"source":" If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`."},{"content":"If such a call would set <ph id=\"ph1\">`errno`</ph>, it throws an object of type <ph id=\"ph2\">`out_of_range`</ph>.","pos":[5534,5611],"source":" If such a call would set `errno`, it throws an object of type `out_of_range`."},{"content":"Otherwise, if <ph id=\"ph1\">`Idx`</ph> is not a null pointer, the function stores <ph id=\"ph2\">`*_Eptr -  str.c_str()`</ph> in <ph id=\"ph3\">`*Idx`</ph> and returns <ph id=\"ph4\">` val`</ph>.","pos":[5612,5728],"source":" Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`."},{"pos":[5759,5763],"content":"stof"},{"content":"Converts a character sequence to a float.","pos":[5767,5808]},{"content":"Parameters","pos":[5955,5965]},{"content":"Parameter","pos":[5972,5981]},{"content":"Description","pos":[5982,5993]},{"content":"The character sequence to be converted.","pos":[6043,6082]},{"content":"The index value of the first unconverted character.","pos":[6093,6144]},{"content":"Return Value","pos":[6155,6167]},{"content":"The float value.","pos":[6171,6187]},{"content":"Remarks","pos":[6197,6204]},{"content":"The function converts the sequence of elements in <ph id=\"ph1\">` str`</ph> to a value <ph id=\"ph2\">` val`</ph> of type <ph id=\"ph3\">`float`</ph> as if by calling <ph id=\"ph4\">`strtof( str.c_str(), _Eptr)`</ph>, where <ph id=\"ph5\">`_Eptr`</ph> is an object internal to the function.","pos":[6208,6399],"source":"The function converts the sequence of elements in ` str` to a value ` val` of type `float` as if by calling `strtof( str.c_str(), _Eptr)`, where `_Eptr` is an object internal to the function."},{"content":"If <ph id=\"ph1\">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id=\"ph2\">`invalid_argument`</ph>.","pos":[6400,6475],"source":" If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`."},{"content":"If such a call would set <ph id=\"ph1\">`errno`</ph>, it throws an object of type <ph id=\"ph2\">`out_of_range`</ph>.","pos":[6476,6553],"source":" If such a call would set `errno`, it throws an object of type `out_of_range`."},{"content":"Otherwise, if <ph id=\"ph1\">`Idx`</ph> is not a null pointer, the function stores <ph id=\"ph2\">`*_Eptr -  str.c_str()`</ph> in <ph id=\"ph3\">`*Idx`</ph> and returns <ph id=\"ph4\">` val`</ph>.","pos":[6554,6670],"source":" Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`."},{"pos":[6701,6705],"content":"stoi"},{"content":"Converts a character sequence to an integer.","pos":[6709,6753]},{"content":"Return Value","pos":[6936,6948]},{"content":"The integer value.","pos":[6952,6970]},{"content":"Parameters","pos":[6980,6990]},{"content":"Parameter","pos":[6997,7006]},{"content":"Description","pos":[7007,7018]},{"content":"The character sequence to be converted.","pos":[7068,7107]},{"content":"Contains the index of the first unconverted character on return.","pos":[7118,7182]},{"content":"The number base to use.","pos":[7193,7216]},{"content":"Remarks","pos":[7227,7234]},{"content":"The function <ph id=\"ph1\">`stoi`</ph> converts the sequence of characters in <ph id=\"ph2\">` str`</ph> to a value of type <ph id=\"ph3\">`int`</ph> and returns the value.","pos":[7238,7351],"source":"The function `stoi` converts the sequence of characters in ` str` to a value of type `int` and returns the value."},{"content":"For example, when passed a character sequence \"10\", the value returned by <ph id=\"ph1\">`stoi`</ph> is the integer 10.","pos":[7352,7451],"source":" For example, when passed a character sequence \"10\", the value returned by `stoi` is the integer 10."},{"content":"behaves similarly to the function <ph id=\"ph1\">`strtol`</ph> for single-byte characters when it is called in the manner <ph id=\"ph2\">`strtol( str.c_str(), _Eptr, Idx)`</ph>, where <ph id=\"ph3\">`_Eptr`</ph> is an object internal to the function; or <ph id=\"ph4\">`wcstol`</ph> for wide characters, when it is called in similar manner, <ph id=\"ph5\">`wcstol(Str.c_str(), _Eptr, Idx)`</ph>.","pos":[7465,7760],"source":" behaves similarly to the function `strtol` for single-byte characters when it is called in the manner `strtol( str.c_str(), _Eptr, Idx)`, where `_Eptr` is an object internal to the function; or `wcstol` for wide characters, when it is called in similar manner, `wcstol(Str.c_str(), _Eptr, Idx)`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>strtol, wcstol, _strtol_l, _wcstol_l<ept id=\"p1\">](../c-runtime-library/reference/strtol-wcstol-strtol-l-wcstol-l.md)</ept>.","pos":[7761,7893],"source":" For more information, see [strtol, wcstol, _strtol_l, _wcstol_l](../c-runtime-library/reference/strtol-wcstol-strtol-l-wcstol-l.md)."},{"content":"If <ph id=\"ph1\">` str.c_str() == *_Eptr,``stoi`</ph> throws an object of type <ph id=\"ph2\">`invalid_argument`</ph>.","pos":[7900,7979],"source":"If ` str.c_str() == *_Eptr,``stoi` throws an object of type `invalid_argument`."},{"content":"If such a call would set <ph id=\"ph1\">`errno`</ph>, or if the returned value cannot be represented as an object of type <ph id=\"ph2\">`int`</ph>, it throws an object of type <ph id=\"ph3\">`out_of_range`</ph>.","pos":[7980,8132],"source":" If such a call would set `errno`, or if the returned value cannot be represented as an object of type `int`, it throws an object of type `out_of_range`."},{"content":"Otherwise, if <ph id=\"ph1\">`Idx`</ph> is not a null pointer, the function stores <ph id=\"ph2\">`*_Eptr - _ str.c_str()`</ph> in <ph id=\"ph3\">`*Idx`</ph>.","pos":[8133,8231],"source":" Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr - _ str.c_str()` in `*Idx`."},{"pos":[8262,8266],"content":"stol"},{"pos":[8270,8312],"content":"Converts a character sequence to a <ph id=\"ph1\">`long`</ph>.","source":"Converts a character sequence to a `long`."},{"content":"Parameters","pos":[8496,8506]},{"content":"Parameter","pos":[8513,8522]},{"content":"Description","pos":[8523,8534]},{"content":"The character sequence to be converted.","pos":[8584,8623]},{"content":"The index value of the first unconverted character.","pos":[8634,8685]},{"content":"The number base to use.","pos":[8696,8719]},{"content":"Return Value","pos":[8730,8742]},{"content":"The long-integer value.","pos":[8746,8769]},{"content":"Remarks","pos":[8779,8786]},{"content":"The function converts the sequence of elements in <ph id=\"ph1\">` str`</ph> to a value <ph id=\"ph2\">` val`</ph> of type <ph id=\"ph3\">`long`</ph> as if by calling <ph id=\"ph4\">`strtol( str.c_str(), _Eptr, Idx)`</ph>, where <ph id=\"ph5\">`_Eptr`</ph> is an object internal to the function.","pos":[8790,8985],"source":"The function converts the sequence of elements in ` str` to a value ` val` of type `long` as if by calling `strtol( str.c_str(), _Eptr, Idx)`, where `_Eptr` is an object internal to the function."},{"content":"If <ph id=\"ph1\">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id=\"ph2\">`invalid_argument`</ph>.","pos":[8986,9061],"source":" If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`."},{"content":"If such a call would set <ph id=\"ph1\">`errno`</ph>, it throws an object of type <ph id=\"ph2\">`out_of_range`</ph>.","pos":[9062,9139],"source":" If such a call would set `errno`, it throws an object of type `out_of_range`."},{"content":"Otherwise, if <ph id=\"ph1\">`Idx`</ph> is not a null pointer, the function stores <ph id=\"ph2\">`*_Eptr -  str.c_str()`</ph> in <ph id=\"ph3\">`*Idx`</ph> and returns <ph id=\"ph4\">` val`</ph>.","pos":[9140,9256],"source":" Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`."},{"pos":[9288,9293],"content":"stold"},{"pos":[9297,9346],"content":"Converts a character sequence to a <ph id=\"ph1\">`long double`</ph>.","source":"Converts a character sequence to a `long double`."},{"content":"Parameters","pos":[9497,9507]},{"content":"Parameter","pos":[9514,9523]},{"content":"Description","pos":[9524,9535]},{"content":"The character sequence to be converted.","pos":[9585,9624]},{"content":"The index value of the first unconverted character.","pos":[9635,9686]},{"content":"Return Value","pos":[9697,9709]},{"pos":[9713,9737],"content":"The <ph id=\"ph1\">`long double`</ph> value.","source":"The `long double` value."},{"content":"Remarks","pos":[9747,9754]},{"content":"The function converts the sequence of elements in <ph id=\"ph1\">` str`</ph> to a value <ph id=\"ph2\">` val`</ph> of type <ph id=\"ph3\">`long double`</ph> as if by calling <ph id=\"ph4\">`strtold( str.c_str(), _Eptr)`</ph>, where <ph id=\"ph5\">`_Eptr`</ph> is an object internal to the function.","pos":[9758,9956],"source":"The function converts the sequence of elements in ` str` to a value ` val` of type `long double` as if by calling `strtold( str.c_str(), _Eptr)`, where `_Eptr` is an object internal to the function."},{"content":"If <ph id=\"ph1\">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id=\"ph2\">`invalid_argument`</ph>.","pos":[9957,10032],"source":" If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`."},{"content":"If such a call would set <ph id=\"ph1\">`errno`</ph>, it throws an object of type <ph id=\"ph2\">`out_of_range`</ph>.","pos":[10033,10110],"source":" If such a call would set `errno`, it throws an object of type `out_of_range`."},{"content":"Otherwise, if <ph id=\"ph1\">`Idx`</ph> is not a null pointer, the function stores <ph id=\"ph2\">`*_Eptr -  str.c_str()`</ph> in <ph id=\"ph3\">`*Idx`</ph> and returns <ph id=\"ph4\">` val`</ph>.","pos":[10111,10227],"source":" Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`."},{"pos":[10259,10264],"content":"stoll"},{"pos":[10268,10315],"content":"Converts a character sequence to a <ph id=\"ph1\">`long long`</ph>.","source":"Converts a character sequence to a `long long`."},{"content":"Parameters","pos":[10512,10522]},{"content":"Parameter","pos":[10529,10538]},{"content":"Description","pos":[10539,10550]},{"content":"The character sequence to be converted.","pos":[10600,10639]},{"content":"The index value of the first unconverted character.","pos":[10650,10701]},{"content":"The number base to use.","pos":[10712,10735]},{"content":"Return Value","pos":[10746,10758]},{"pos":[10762,10784],"content":"The <ph id=\"ph1\">`long long`</ph> value.","source":"The `long long` value."},{"content":"Remarks","pos":[10794,10801]},{"content":"The function converts the sequence of elements in <ph id=\"ph1\">` str`</ph> to a value <ph id=\"ph2\">` val`</ph> of type <ph id=\"ph3\">`long long`</ph> as if by calling <ph id=\"ph4\">`strtoll( str.c_str(), _Eptr, Idx)`</ph>, where <ph id=\"ph5\">`_Eptr`</ph> is an object internal to the function.","pos":[10805,11006],"source":"The function converts the sequence of elements in ` str` to a value ` val` of type `long long` as if by calling `strtoll( str.c_str(), _Eptr, Idx)`, where `_Eptr` is an object internal to the function."},{"content":"If <ph id=\"ph1\">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id=\"ph2\">`invalid_argument`</ph>.","pos":[11007,11082],"source":" If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`."},{"content":"If such a call would set <ph id=\"ph1\">`errno`</ph>, it throws an object of type <ph id=\"ph2\">`out_of_range`</ph>.","pos":[11083,11160],"source":" If such a call would set `errno`, it throws an object of type `out_of_range`."},{"content":"Otherwise, if <ph id=\"ph1\">`Idx`</ph> is not a null pointer, the function stores <ph id=\"ph2\">`*_Eptr -  str.c_str()`</ph> in <ph id=\"ph3\">`*Idx`</ph> and returns <ph id=\"ph4\">` val`</ph>.","pos":[11161,11277],"source":" Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`."},{"pos":[11309,11314],"content":"stoul"},{"content":"Converts a character sequence to an unsigned long.","pos":[11318,11368]},{"content":"Parameters","pos":[11573,11583]},{"content":"Parameter","pos":[11590,11599]},{"content":"Description","pos":[11600,11611]},{"content":"The character sequence to be converted.","pos":[11661,11700]},{"content":"The index value of the first unconverted character.","pos":[11711,11762]},{"content":"The number base to use.","pos":[11773,11796]},{"content":"Return Value","pos":[11807,11819]},{"content":"The unsigned long-integer value.","pos":[11823,11855]},{"content":"Remarks","pos":[11865,11872]},{"content":"The function converts the sequence of elements in <ph id=\"ph1\">` str`</ph> to a value <ph id=\"ph2\">` val`</ph> of type <ph id=\"ph3\">`unsigned long`</ph> as if by calling <ph id=\"ph4\">`strtoul( str.c_str(), _Eptr, Idx)`</ph>, where <ph id=\"ph5\">`_Eptr`</ph> is an object internal to the function.","pos":[11876,12081],"source":"The function converts the sequence of elements in ` str` to a value ` val` of type `unsigned long` as if by calling `strtoul( str.c_str(), _Eptr, Idx)`, where `_Eptr` is an object internal to the function."},{"content":"If <ph id=\"ph1\">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id=\"ph2\">`invalid_argument`</ph>.","pos":[12082,12157],"source":" If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`."},{"content":"If such a call would set <ph id=\"ph1\">`errno`</ph>, it throws an object of type <ph id=\"ph2\">`out_of_range`</ph>.","pos":[12158,12235],"source":" If such a call would set `errno`, it throws an object of type `out_of_range`."},{"content":"Otherwise, if <ph id=\"ph1\">`Idx`</ph> is not a null pointer, the function stores <ph id=\"ph2\">`*_Eptr -  str.c_str()`</ph> in <ph id=\"ph3\">`*Idx`</ph> and returns <ph id=\"ph4\">` val`</ph>.","pos":[12236,12352],"source":" Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`."},{"pos":[12385,12391],"content":"stoull"},{"pos":[12395,12452],"content":"Converts a character sequence to an <ph id=\"ph1\">`unsigned long long`</ph>.","source":"Converts a character sequence to an `unsigned long long`."},{"content":"Parameters","pos":[12669,12679]},{"content":"Parameter","pos":[12686,12695]},{"content":"Description","pos":[12696,12707]},{"content":"The character sequence to be converted.","pos":[12757,12796]},{"content":"The index value of the first unconverted character.","pos":[12807,12858]},{"content":"The number base to use.","pos":[12869,12892]},{"content":"Return Value","pos":[12903,12915]},{"pos":[12919,12950],"content":"The <ph id=\"ph1\">`unsigned long long`</ph> value.","source":"The `unsigned long long` value."},{"content":"Remarks","pos":[12960,12967]},{"content":"The function converts the sequence of elements in <ph id=\"ph1\">` str`</ph> to a value <ph id=\"ph2\">` val`</ph> of type <ph id=\"ph3\">`unsigned long long`</ph> as if by calling <ph id=\"ph4\">`strtoull( str.c_str(), _Eptr, Idx)`</ph>, where <ph id=\"ph5\">`_Eptr`</ph> is an object internal to the function.","pos":[12971,13182],"source":"The function converts the sequence of elements in ` str` to a value ` val` of type `unsigned long long` as if by calling `strtoull( str.c_str(), _Eptr, Idx)`, where `_Eptr` is an object internal to the function."},{"content":"If <ph id=\"ph1\">` str.c_str() == *_Eptr`</ph> it throws an object of type <ph id=\"ph2\">`invalid_argument`</ph>.","pos":[13183,13258],"source":" If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`."},{"content":"If such a call would set <ph id=\"ph1\">`errno`</ph>, it throws an object of type <ph id=\"ph2\">`out_of_range`</ph>.","pos":[13259,13336],"source":" If such a call would set `errno`, it throws an object of type `out_of_range`."},{"content":"Otherwise, if <ph id=\"ph1\">`Idx`</ph> is not a null pointer, the function stores <ph id=\"ph2\">`*_Eptr -  str.c_str()`</ph> in <ph id=\"ph3\">`*Idx`</ph> and returns <ph id=\"ph4\">` val`</ph>.","pos":[13337,13453],"source":" Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`."},{"pos":[13484,13488],"content":"swap"},{"content":"Exchanges the arrays of characters of two strings.","pos":[13492,13542]},{"content":"Parameters","pos":[13720,13730]},{"content":"One string whose elements are to be swapped with those of another string.","pos":[13745,13818]},{"content":"The other string whose elements are to be swapped with the first string.","pos":[13837,13909]},{"content":"Remarks","pos":[13919,13926]},{"content":"The template function executes the specialized member function _ <bpt id=\"p1\">*</bpt>Left<ept id=\"p1\">*</ept>.","pos":[13930,14002],"source":"The template function executes the specialized member function _ *Left*."},{"content":"<bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](../standard-library/basic-string-class.md#basic_string__swap)</ept>(<ph id=\"ph1\">\\_</ph> <bpt id=\"p2\">*</bpt>Right<ept id=\"p2\">*</ept>) for strings, which guarantees constant complexity.","pos":[14003,14134],"source":"[swap](../standard-library/basic-string-class.md#basic_string__swap)(\\_ *Right*) for strings, which guarantees constant complexity."},{"content":"Example","pos":[14144,14151]},{"pos":[15088,15097],"content":"to_string"},{"pos":[15101,15132],"content":"Converts a value to a <ph id=\"ph1\">`string`</ph>.","source":"Converts a value to a `string`."},{"content":"Parameters","pos":[15454,15464]},{"content":"Parameter","pos":[15471,15480]},{"content":"Description","pos":[15481,15492]},{"content":"The value to be converted.","pos":[15541,15567]},{"content":"Return Value","pos":[15578,15590]},{"pos":[15594,15633],"content":"The <ph id=\"ph1\">`string`</ph> that represents the value.","source":"The `string` that represents the value."},{"content":"Remarks","pos":[15643,15650]},{"pos":[15654,15822],"content":"The function converts <ph id=\"ph1\">`Val`</ph> to a sequence of elements stored in an array object <ph id=\"ph2\">`Buf`</ph> internal to the function as if by calling <ph id=\"ph3\">`sprintf(Buf, Fmt, Val)`</ph>, where <ph id=\"ph4\">`Fmt`</ph> is","source":"The function converts `Val` to a sequence of elements stored in an array object `Buf` internal to the function as if by calling `sprintf(Buf, Fmt, Val)`, where `Fmt` is"},{"pos":[15837,15854],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[15875,15892],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[15923,15940],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[15963,15980],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[16013,16030],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[16059,16076],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[16112,16140],"content":"if <ph id=\"ph1\">`Val`</ph> has type <ph id=\"ph2\">`float`</ph> or","source":" if `Val` has type `float` or "},{"pos":[16165,16182],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[16203,16238],"content":"The function returns <ph id=\"ph1\">`string(Buf)`</ph>.","source":"The function returns `string(Buf)`."},{"pos":[16275,16285],"content":"to_wstring"},{"content":"Converts a value to a wide string.","pos":[16289,16323]},{"content":"Parameters","pos":[16663,16673]},{"content":"Parameter","pos":[16680,16689]},{"content":"Description","pos":[16690,16701]},{"content":"The value to be converted.","pos":[16750,16776]},{"content":"Return Value","pos":[16787,16799]},{"content":"The wide string that represents the value.","pos":[16803,16845]},{"content":"Remarks","pos":[16855,16862]},{"pos":[16866,17040],"content":"The function converts <ph id=\"ph1\">`Val`</ph> to a sequence of elements stored in an array object <ph id=\"ph2\">`Buf`</ph> internal to the function as if by calling <ph id=\"ph3\">`swprintf(Buf, Len, Fmt, Val)`</ph>, where <ph id=\"ph4\">`Fmt`</ph> is","source":"The function converts `Val` to a sequence of elements stored in an array object `Buf` internal to the function as if by calling `swprintf(Buf, Len, Fmt, Val)`, where `Fmt` is"},{"pos":[17056,17073],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[17095,17112],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[17144,17161],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[17185,17202],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[17236,17253],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[17283,17300],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[17337,17365],"content":"if <ph id=\"ph1\">`Val`</ph> has type <ph id=\"ph2\">`float`</ph> or","source":" if `Val` has type `float` or "},{"pos":[17391,17408],"content":"if <ph id=\"ph1\">`Val`</ph> has type","source":" if `Val` has type "},{"pos":[17429,17465],"content":"The function returns <ph id=\"ph1\">`wstring(Buf)`</ph>.","source":"The function returns `wstring(Buf)`."},{"content":"See Also","pos":[17474,17482]},{"content":"string&gt;","pos":[17489,17496],"source":"string>"}],"content":"---\ntitle: \"&lt;string&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 1a4ffd11-dce5-4cc6-a043-b95de034c7c4\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\n---\n# &lt;string&gt; functions\n||||  \n|-|-|-|  \n|[getline](#getline)|[stod](#stod)|[stof](#stof)|  \n|[stoi](#stoi)|[stol](#stol)|[stold](#stold)|  \n|[stoll](#stoll)|[stoul](#stoul)|[stoull](#stoull)|  \n|[swap](#swap)|[to_string](#to_string)|[to_wstring](#to_wstring)|  \n  \n##  <a name=\"getline\"></a>  getline  \n Extract strings from the input stream line-by-line.  \n  \n```  \n// (1) delimiter as parameter  \ntemplate <class CharType, class Traits, class Allocator>  \nbasic_istream<CharType, Traits>& getline(\n    basic_istream<CharType, Traits>& is,  \n    basic_string<CharType, Traits, Allocator>& str, \n    CharType delim);\n\n \ntemplate <class CharType, class Traits, class Allocator>  \nbasic_istream<CharType, Traits>& getline(\n    basic_istream<CharType, Traits>&& is,  \n    basic_string<CharType, Traits, Allocator>& str, \n    const CharType delim);\n\n \n// (2) default delimiter used  \ntemplate <class CharType, class Traits, class Allocator>  \nbasic_istream<CharType, Traits>& getline(\n    basic_istream<CharType, Traits>& is,  \n    basic_string<CharType, Traits, Allocator>& str);\n\n \ntemplate <class Allocator, class Traits, class Allocator>  \nbasic_istream<Allocator, Traits>& getline(\n    basic_istream<Allocator, Traits>&& is,  \n    basic_string<Allocator, Traits, Allocator>& str);\n```  \n  \n### Parameters  \n `is`  \n The input stream from which a string is to be extracted.  \n  \n `str`  \n The string into which are read the characters from the input stream.  \n  \n `delim`  \n The line delimiter.  \n  \n### Return Value  \n The input stream `is`.  \n  \n### Remarks  \n The pair of function signatures marked `(1)` extract characters from `is` until `delim` is found, storing them in `str`.  \n  \n The pair of function signatures marked `(2)` use newline as the default line delimiter and behave as **getline**( `is`, `str`, `is`. `widen`(' `\\n`')).  \n  \n The second function of each pair is an analog to the first one to support [rvalue references](../cpp/lvalues-and-rvalues-visual-cpp.md).  \n  \n Extraction stops when one of the following occurs:  \n  \n-   At end-of-file, in which case the internal state flag of `is` is set to `ios_base::eofbit`.  \n  \n-   After the function extracts an element that compares equal to **delim**, in which case the element is neither put back nor appended to the controlled sequence.  \n  \n-   After the function extracts `str.`[max_size](../standard-library/basic-string-class.md#basic_string__max_size) elements, in which case the internal state flag of `is` is set to `ios_base::failbit`.  \n  \n-   Some other error other than those previously listed, in which case the internal state flag of `is` is set to `ios_base::badbit`  \n  \n For information about internal state flags, see [ios_base::iostate](../standard-library/ios-base-class.md#ios_base__iostate).  \n  \n If the function extracts no elements, the internal state flag of `is` is set to `ios_base::failbit`. In any case, `getline` returns `is`.  \n  \n If an exception is thrown, `is` and `str` are left in a valid state.  \n  \n### Example  \n  The following code demonstrates `getline()` in two modes: first with the default delimiter (newline) and second with a whitespace as delimiter. The end-of-file character (CTRL-Z on the keyboard) is used to control termination of the while loops. This sets the internal state flag of `cin` to `eofbit`, which must be cleared with [basic_ios::clear()](../standard-library/basic-ios-class.md#basic_ios__clear) before the second while loop will work properly.  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <string>  \n#include <iostream>  \n#include <vector>  \n  \nusing namespace std;  \n  \nint main()  \n{  \n    string str;  \n    vector<string> v1;  \n    cout << \"Enter a sentence, press ENTER between sentences. (Ctrl-Z to stop): \" << endl;  \n    // Loop until end-of-file (Ctrl-Z) is input, store each sentence in a vector.  \n    // Default delimiter is the newline character.  \n    while (getline(cin, str)) {  \n        v1.push_back(str);  \n    }  \n  \n    cout << \"The following input was stored with newline delimiter:\" << endl;  \n    for (const auto& p : v1) {  \n        cout << p << endl;  \n    }  \n  \n    cin.clear();  \n  \n    vector<string> v2;  \n    // Now try it with a whitespace delimiter  \n    while (getline(cin, str, ' ')) {  \n        v2.push_back(str);  \n    }  \n  \n    cout << \"The following input was stored with whitespace as delimiter:\" << endl;  \n    for (const auto& p : v2) {  \n        cout << p << endl;  \n    }  \n}  \n  \n```  \n  \n##  <a name=\"stod\"></a>  stod  \n Converts a character sequence to a `double`.  \n  \n```  \ndouble stod(\n    const string& str,   \n    size_t* Idx = 0);\n\ndouble stod(\n    const wstring& str,   \n    size_t* Idx = 0  \n;  \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|` str`|The character sequence to be converted.|  \n|`Idx`|The index value of the first unconverted character.|  \n  \n### Return Value  \n The `double` value.  \n  \n### Remarks  \n The function converts the sequence of elements in ` str` to a value ` val` of type `double` as if by calling `strtod( str.c_str(), _Eptr)`, where `_Eptr` is an object internal to the function. If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`. If such a call would set `errno`, it throws an object of type `out_of_range`. Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`.  \n  \n##  <a name=\"stof\"></a>  stof  \n Converts a character sequence to a float.  \n  \n```  \nfloat stof(\n    const string& str,   \n    size_t* Idx = 0);\n\nfloat stof(\n    const wstring& str,   \n    size_t* Idx = 0);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|` str`|The character sequence to be converted.|  \n|`Idx`|The index value of the first unconverted character.|  \n  \n### Return Value  \n The float value.  \n  \n### Remarks  \n The function converts the sequence of elements in ` str` to a value ` val` of type `float` as if by calling `strtof( str.c_str(), _Eptr)`, where `_Eptr` is an object internal to the function. If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`. If such a call would set `errno`, it throws an object of type `out_of_range`. Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`.  \n  \n##  <a name=\"stoi\"></a>  stoi  \n Converts a character sequence to an integer.  \n  \n```  \nint stoi(\n    const string& str,   \n    size_t* Idx = 0,  \n    int Idx = 10);\n\nint stoi(\n    const wstring& str,   \n    size_t* Idx = 0,  \n    int Idx = 10);\n```  \n  \n### Return Value  \n The integer value.  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|` str`|The character sequence to be converted.|  \n|`Idx`|Contains the index of the first unconverted character on return.|  \n|`Idx`|The number base to use.|  \n  \n### Remarks  \n The function `stoi` converts the sequence of characters in ` str` to a value of type `int` and returns the value. For example, when passed a character sequence \"10\", the value returned by `stoi` is the integer 10.  \n  \n `stoi` behaves similarly to the function `strtol` for single-byte characters when it is called in the manner `strtol( str.c_str(), _Eptr, Idx)`, where `_Eptr` is an object internal to the function; or `wcstol` for wide characters, when it is called in similar manner, `wcstol(Str.c_str(), _Eptr, Idx)`. For more information, see [strtol, wcstol, _strtol_l, _wcstol_l](../c-runtime-library/reference/strtol-wcstol-strtol-l-wcstol-l.md).  \n  \n If ` str.c_str() == *_Eptr,``stoi` throws an object of type `invalid_argument`. If such a call would set `errno`, or if the returned value cannot be represented as an object of type `int`, it throws an object of type `out_of_range`. Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr - _ str.c_str()` in `*Idx`.  \n  \n##  <a name=\"stol\"></a>  stol  \n Converts a character sequence to a `long`.  \n  \n```  \nlong stol(\n    const string& str,  \n    size_t* Idx = 0,  \n    int Idx = 10);\n\nlong stol(\n    const wstring& str,   \n    size_t* Idx = 0,  \n    int Idx = 10);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|` str`|The character sequence to be converted.|  \n|`Idx`|The index value of the first unconverted character.|  \n|`Idx`|The number base to use.|  \n  \n### Return Value  \n The long-integer value.  \n  \n### Remarks  \n The function converts the sequence of elements in ` str` to a value ` val` of type `long` as if by calling `strtol( str.c_str(), _Eptr, Idx)`, where `_Eptr` is an object internal to the function. If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`. If such a call would set `errno`, it throws an object of type `out_of_range`. Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`.  \n  \n##  <a name=\"stold\"></a>  stold  \n Converts a character sequence to a `long double`.  \n  \n```  \ndouble stold(\n    const string& str,   \n    size_t* Idx = 0);\n\ndouble stold(\n    const wstring& str,   \n    size_t* Idx = 0);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|` str`|The character sequence to be converted.|  \n|`Idx`|The index value of the first unconverted character.|  \n  \n### Return Value  \n The `long double` value.  \n  \n### Remarks  \n The function converts the sequence of elements in ` str` to a value ` val` of type `long double` as if by calling `strtold( str.c_str(), _Eptr)`, where `_Eptr` is an object internal to the function. If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`. If such a call would set `errno`, it throws an object of type `out_of_range`. Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`.  \n  \n##  <a name=\"stoll\"></a>  stoll  \n Converts a character sequence to a `long long`.  \n  \n```  \nlong long stoll(\n    const string& str,   \n    size_t* Idx = 0,  \n    int Idx = 10);\n\nlong long stoll(\n    const wstring& str,   \n    size_t* Idx = 0,  \n    int Idx = 10);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|` str`|The character sequence to be converted.|  \n|`Idx`|The index value of the first unconverted character.|  \n|`Idx`|The number base to use.|  \n  \n### Return Value  \n The `long long` value.  \n  \n### Remarks  \n The function converts the sequence of elements in ` str` to a value ` val` of type `long long` as if by calling `strtoll( str.c_str(), _Eptr, Idx)`, where `_Eptr` is an object internal to the function. If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`. If such a call would set `errno`, it throws an object of type `out_of_range`. Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`.  \n  \n##  <a name=\"stoul\"></a>  stoul  \n Converts a character sequence to an unsigned long.  \n  \n```  \nunsigned long stoul(\n    const string& str,   \n    size_t* Idx = 0,  \n    int Idx = 10);\n\nunsigned long stoul(\n    const wstring& str,   \n    size_t* Idx = 0,  \n    int Idx = 10);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|` str`|The character sequence to be converted.|  \n|`Idx`|The index value of the first unconverted character.|  \n|`Idx`|The number base to use.|  \n  \n### Return Value  \n The unsigned long-integer value.  \n  \n### Remarks  \n The function converts the sequence of elements in ` str` to a value ` val` of type `unsigned long` as if by calling `strtoul( str.c_str(), _Eptr, Idx)`, where `_Eptr` is an object internal to the function. If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`. If such a call would set `errno`, it throws an object of type `out_of_range`. Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`.  \n  \n##  <a name=\"stoull\"></a>  stoull  \n Converts a character sequence to an `unsigned long long`.  \n  \n```  \nunsigned long long stoull(\n    const string& str,   \n    size_t* Idx = 0,  \n    int Idx = 10);\n\nunsigned long long stoull(\n    const wstring& str,   \n    size_t* Idx = 0,  \n    int Idx = 10);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|` str`|The character sequence to be converted.|  \n|`Idx`|The index value of the first unconverted character.|  \n|`Idx`|The number base to use.|  \n  \n### Return Value  \n The `unsigned long long` value.  \n  \n### Remarks  \n The function converts the sequence of elements in ` str` to a value ` val` of type `unsigned long long` as if by calling `strtoull( str.c_str(), _Eptr, Idx)`, where `_Eptr` is an object internal to the function. If ` str.c_str() == *_Eptr` it throws an object of type `invalid_argument`. If such a call would set `errno`, it throws an object of type `out_of_range`. Otherwise, if `Idx` is not a null pointer, the function stores `*_Eptr -  str.c_str()` in `*Idx` and returns ` val`.  \n  \n##  <a name=\"swap\"></a>  swap  \n Exchanges the arrays of characters of two strings.  \n  \n```  \ntemplate <class Traits, class Allocator>  \nvoid swap(basic_string<CharType, Traits, Allocator>& left, basic_string<CharType, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n ` left`  \n One string whose elements are to be swapped with those of another string.  \n  \n ` right`  \n The other string whose elements are to be swapped with the first string.  \n  \n### Remarks  \n The template function executes the specialized member function _ *Left*. [swap](../standard-library/basic-string-class.md#basic_string__swap)(\\_ *Right*) for strings, which guarantees constant complexity.  \n  \n### Example  \n  \n```cpp  \n// string_swap.cpp  \n// compile with: /EHsc  \n#include <string>  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;  \n   // Declaring an object of type basic_string<char>  \n   string s1 ( \"Tweedledee\" );  \n   string s2 ( \"Tweedledum\" );  \n   cout << \"Before swapping string s1 and s2:\" << endl;  \n   cout << \"The basic_string s1 = \" << s1 << \".\" << endl;  \n   cout << \"The basic_string s2 = \" << s2 << \".\" << endl;  \n  \n   swap ( s1 , s2 );  \n   cout << \"\\nAfter swapping string s1 and s2:\" << endl;  \n   cout << \"The basic_string s1 = \" << s1 << \".\" << endl;  \n   cout << \"The basic_string s2 = \" << s2 << \".\" << endl;  \n}  \n```  \n  \n```Output  \nBefore swapping string s1 and s2:  \nThe basic_string s1 = Tweedledee.  \nThe basic_string s2 = Tweedledum.  \n  \nAfter swapping string s1 and s2:  \nThe basic_string s1 = Tweedledum.  \nThe basic_string s2 = Tweedledee.  \n```  \n  \n##  <a name=\"to_string\"></a>  to_string  \n Converts a value to a `string`.  \n  \n```  \nstring to_string(int Val);\nstring to_string(unsigned int Val);\nstring to_string(long Val);\nstring to_string(unsigned long Val);\nstring to_string(long long Val);\nstring to_string(unsigned long long Val);\nstring to_string(float Val);\nstring to_string(double Val);\nstring to_string(long double Val);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Val`|The value to be converted.|  \n  \n### Return Value  \n The `string` that represents the value.  \n  \n### Remarks  \n The function converts `Val` to a sequence of elements stored in an array object `Buf` internal to the function as if by calling `sprintf(Buf, Fmt, Val)`, where `Fmt` is  \n  \n- `\"%d\"` if `Val` has type `int`  \n  \n- `\"%u\"` if `Val` has type `unsigned int`  \n  \n- `\"%ld\"` if `Val` has type `long`  \n  \n- `\"%lu\"` if `Val` has type `unsigned long`  \n  \n- `\"%lld\"` if `Val` has type `long long`  \n  \n- `\"%llu\"` if `Val` has type `unsigned long long`  \n  \n- `\"%f\"` if `Val` has type `float` or `double`  \n  \n- `\"%Lf\"` if `Val` has type `long double`  \n  \n The function returns `string(Buf)`.  \n  \n##  <a name=\"to_wstring\"></a>  to_wstring  \n Converts a value to a wide string.  \n  \n```  \nwstring to_wstring(int Val);\nwstring to_wstring(unsigned int Val);\nwstring to_wstring(long Val);\nwstring to_wstring(unsigned long Val);\nwstring to_wstring(long long Val);\nwstring to_wstring(unsigned long long Val);\nwstring to_wstring(float Val);\nwstring to_wstring(double Val);\nwstring to_wstring(long double Val);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Val`|The value to be converted.|  \n  \n### Return Value  \n The wide string that represents the value.  \n  \n### Remarks  \n The function converts `Val` to a sequence of elements stored in an array object `Buf` internal to the function as if by calling `swprintf(Buf, Len, Fmt, Val)`, where `Fmt` is  \n  \n- `L\"%d\"` if `Val` has type `int`  \n  \n- `L\"%u\"` if `Val` has type `unsigned int`  \n  \n- `L\"%ld\"` if `Val` has type `long`  \n  \n- `L\"%lu\"` if `Val` has type `unsigned long`  \n  \n- `L\"%lld\"` if `Val` has type `long long`  \n  \n- `L\"%llu\"` if `Val` has type `unsigned long long`  \n  \n- `L\"%f\"` if `Val` has type `float` or `double`  \n  \n- `L\"%Lf\"` if `Val` has type `long double`  \n  \n The function returns `wstring(Buf)`.  \n  \n## See Also  \n [\\<string>](../standard-library/string.md)\n\n"}