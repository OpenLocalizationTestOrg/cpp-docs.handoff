{"nodes":[{"pos":[12,50],"content":"atanh, atanhf, atanhl | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"atanh, atanhf, atanhl | Microsoft Docs","pos":[0,38]}]},{"pos":[999,1020],"content":"atanh, atanhf, atanhl","linkify":"atanh, atanhf, atanhl","nodes":[{"content":"atanh, atanhf, atanhl","pos":[0,21]}]},{"content":"Calculates the inverse hyperbolic tangent.","pos":[1021,1063]},{"pos":[1072,1078],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1326,1336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value.","pos":[1347,1368]},{"pos":[1377,1389],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The <ph id=\"ph1\">`atanh`</ph> functions return the inverse hyberbolic tangent (arc hyperbolic tangent) of <ph id=\"ph2\">`x`</ph>.","pos":[1393,1485],"source":"The `atanh` functions return the inverse hyberbolic tangent (arc hyperbolic tangent) of `x`."},{"content":"If <ph id=\"ph1\">`x`</ph> is greater than 1, or less than –1, <ph id=\"ph2\">`errno`</ph> is set to <ph id=\"ph3\">`EDOM`</ph> and the result is a quiet NaN.","pos":[1486,1584],"source":" If `x` is greater than 1, or less than –1, `errno` is set to `EDOM` and the result is a quiet NaN."},{"content":"If <ph id=\"ph1\">`x`</ph> is equal to 1 or -1, a positive or negative infinity is returned, respectively, and <ph id=\"ph2\">`errno`</ph> is set to <ph id=\"ph3\">`ERANGE`</ph>.","pos":[1585,1703],"source":" If `x` is equal to 1 or -1, a positive or negative infinity is returned, respectively, and `errno` is set to `ERANGE`."},{"content":"Input","pos":[1710,1715]},{"content":"SEH Exception","pos":[1716,1729]},{"pos":[1730,1749],"content":"<ph id=\"ph1\">`Matherr`</ph> Exception","source":"`Matherr` Exception"},{"content":"± QNAN,IND","pos":[1816,1826]},{"content":"none","pos":[1827,1831]},{"content":"none","pos":[1832,1836]},{"pos":[1841,1858],"content":"<ph id=\"ph1\">`X`</ph> ≥ 1; <ph id=\"ph2\">`x`</ph> ≤ -1","source":"`X` ≥ 1; `x` ≤ -1"},{"content":"none","pos":[1859,1863]},{"content":"none","pos":[1864,1868]},{"pos":[1878,1885],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Because C++ allows overloading, you can call overloads of <ph id=\"ph1\">`atanh`</ph> that take and return <ph id=\"ph2\">`float`</ph> or <ph id=\"ph3\">`long double`</ph> values.","pos":[1889,2008],"source":"Because C++ allows overloading, you can call overloads of `atanh` that take and return `float` or `long double` values."},{"content":"In a C program, <ph id=\"ph1\">`atanh`</ph> always takes and returns <ph id=\"ph2\">`double`</ph>.","pos":[2009,2067],"source":" In a C program, `atanh` always takes and returns `double`."},{"pos":[2076,2088],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[2095,2103]},{"content":"C header","pos":[2104,2112]},{"content":"C++ header","pos":[2113,2123]},{"pos":[2181,2208],"content":"<ph id=\"ph1\">`atanh`</ph>, <ph id=\"ph2\">`atanhf`</ph>, <ph id=\"ph3\">`atanhl`</ph>","source":"`atanh`, `atanhf`, `atanhl`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt;","pos":[2209,2218],"source":"\\<math.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>cmath&gt;","pos":[2219,2227],"source":"\\<cmath>"},{"pos":[2235,2339],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[2348,2355],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2854,2879],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[2883,2898]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[2899,2946],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[2947,3072],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3081,3089],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[3093,3169],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>acos, acosf, acosl<ept id=\"p1\">](../../c-runtime-library/reference/acos-acosf-acosl.md)</ept><ph id=\"ph1\"> </ph>","pos":[3172,3249],"source":" [acos, acosf, acosl](../../c-runtime-library/reference/acos-acosf-acosl.md) "},{"content":"<bpt id=\"p1\"> [</bpt>asin, asinf, asinl<ept id=\"p1\">](../../c-runtime-library/reference/asin-asinf-asinl.md)</ept><ph id=\"ph1\"> </ph>","pos":[3252,3329],"source":" [asin, asinf, asinl](../../c-runtime-library/reference/asin-asinf-asinl.md) "},{"content":"<bpt id=\"p1\"> [</bpt>atan, atanf, atanl, atan2, atan2f, atan2l<ept id=\"p1\">](../../c-runtime-library/reference/atan-atanf-atanl-atan2-atan2f-atan2l.md)</ept><ph id=\"ph1\"> </ph>","pos":[3332,3452],"source":" [atan, atanf, atanl, atan2, atan2f, atan2l](../../c-runtime-library/reference/atan-atanf-atanl-atan2-atan2f-atan2l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>cos, cosf, cosl, cosh, coshf, coshl<ept id=\"p1\">](../../c-runtime-library/reference/cos-cosf-cosl-cosh-coshf-coshl.md)</ept><ph id=\"ph1\"> </ph>","pos":[3455,3563],"source":" [cos, cosf, cosl, cosh, coshf, coshl](../../c-runtime-library/reference/cos-cosf-cosl-cosh-coshf-coshl.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sin, sinf, sinl, sinh, sinhf, sinhl<ept id=\"p1\">](../../c-runtime-library/reference/sin-sinf-sinl-sinh-sinhf-sinhl.md)</ept><ph id=\"ph1\"> </ph>","pos":[3566,3674],"source":" [sin, sinf, sinl, sinh, sinhf, sinhl](../../c-runtime-library/reference/sin-sinf-sinl-sinh-sinhf-sinhl.md) "},{"content":"<bpt id=\"p1\"> [</bpt>tan, tanf, tanl, tanh, tanhf, tanhl<ept id=\"p1\">](../../c-runtime-library/reference/tan-tanf-tanl-tanh-tanhf-tanhl.md)</ept><ph id=\"ph1\"> </ph>","pos":[3677,3785],"source":" [tan, tanf, tanl, tanh, tanhf, tanhl](../../c-runtime-library/reference/tan-tanf-tanl-tanh-tanhf-tanhl.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_CItan<ept id=\"p1\">](../../c-runtime-library/citan.md)</ept>","pos":[3788,3831],"source":" [_CItan](../../c-runtime-library/citan.md)"}],"content":"---\ntitle: \"atanh, atanhf, atanhl | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"atanhl\"\n  - \"atanhf\"\n  - \"atanh\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"atanhl\"\n  - \"atanhf\"\n  - \"atanh\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"atanhf function\"\n  - \"atanhl function\"\n  - \"atanh funciton\"\nms.assetid: 83a43b5b-2580-4461-854f-dc84236d9f32\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# atanh, atanhf, atanhl\nCalculates the inverse hyperbolic tangent.  \n  \n## Syntax  \n  \n```  \ndouble atanh(  \n   double x   \n);  \nfloat atanh(  \n   float x   \n);  // C++ only  \nlong double atanh(  \n   long double x  \n);  // C++ only  \nfloat atanhf(  \n   float x   \n);  \nlong double atanhl(  \n   long double x  \n);  \n```  \n  \n#### Parameters  \n `x`  \n Floating-point value.  \n  \n## Return Value  \n The `atanh` functions return the inverse hyberbolic tangent (arc hyperbolic tangent) of `x`. If `x` is greater than 1, or less than –1, `errno` is set to `EDOM` and the result is a quiet NaN. If `x` is equal to 1 or -1, a positive or negative infinity is returned, respectively, and `errno` is set to `ERANGE`.  \n  \n|Input|SEH Exception|`Matherr` Exception|  \n|-----------|-------------------|-------------------------|  \n|± QNAN,IND|none|none|  \n|`X` ≥ 1; `x` ≤ -1|none|none|  \n  \n## Remarks  \n Because C++ allows overloading, you can call overloads of `atanh` that take and return `float` or `long double` values. In a C program, `atanh` always takes and returns `double`.  \n  \n## Requirements  \n  \n|Function|C header|C++ header|  \n|--------------|--------------|------------------|  \n|`atanh`, `atanhf`, `atanhl`|\\<math.h>|\\<cmath>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_atanh.c  \n// This program displays the hyperbolic tangent of pi / 4  \n// and the arc hyperbolic tangent of the result.  \n//  \n  \n#include <math.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   double pi = 3.1415926535;  \n   double x, y;  \n  \n   x = tanh( pi / 4 );  \n   y = atanh( x );  \n   printf( \"tanh( %f ) = %f\\n\", pi/4, x );  \n   printf( \"atanh( %f ) = %f\\n\", x, y );  \n}  \n```  \n  \n```Output  \ntanh( 0.785398 ) = 0.655794  \natanh( 0.655794 ) = 0.785398  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [acos, acosf, acosl](../../c-runtime-library/reference/acos-acosf-acosl.md)   \n [asin, asinf, asinl](../../c-runtime-library/reference/asin-asinf-asinl.md)   \n [atan, atanf, atanl, atan2, atan2f, atan2l](../../c-runtime-library/reference/atan-atanf-atanl-atan2-atan2f-atan2l.md)   \n [cos, cosf, cosl, cosh, coshf, coshl](../../c-runtime-library/reference/cos-cosf-cosl-cosh-coshf-coshl.md)   \n [sin, sinf, sinl, sinh, sinhf, sinhl](../../c-runtime-library/reference/sin-sinf-sinl-sinh-sinhf-sinhl.md)   \n [tan, tanf, tanl, tanh, tanhf, tanhl](../../c-runtime-library/reference/tan-tanf-tanl-tanh-tanhf-tanhl.md)   \n [_CItan](../../c-runtime-library/citan.md)"}