{"nodes":[{"pos":[12,69],"content":"Automation Clients: Using Type Libraries | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Automation Clients: Using Type Libraries | Microsoft Docs","pos":[0,57]}]},{"content":"Automation Clients: Using Type Libraries","pos":[853,893]},{"content":"Automation clients must have information about server objects' properties and methods if the clients are to manipulate the servers' objects.","pos":[894,1034]},{"content":"Properties have data types; methods often return values and accept parameters.","pos":[1035,1113]},{"content":"The client requires information about the data types of all of these in order to statically bind to the server object type.","pos":[1114,1237]},{"content":"This type information can be made known in several ways.","pos":[1244,1300]},{"content":"The recommended way is to create a type library.","pos":[1301,1349]},{"pos":[1356,1504],"content":"For information on <bpt id=\"p1\">[</bpt>MkTypLib<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa366797)</ept>, see the <ph id=\"ph1\">[!INCLUDE[winSDK](../atl/includes/winsdk_md.md)]</ph>.","source":"For information on [MkTypLib](http://msdn.microsoft.com/library/windows/desktop/aa366797), see the [!INCLUDE[winSDK](../atl/includes/winsdk_md.md)]."},{"content":"Visual C++ can read a type-library file and create a dispatch class derived from <bpt id=\"p1\">[</bpt>COleDispatchDriver<ept id=\"p1\">](../mfc/reference/coledispatchdriver-class.md)</ept>.","pos":[1511,1659],"source":"Visual C++ can read a type-library file and create a dispatch class derived from [COleDispatchDriver](../mfc/reference/coledispatchdriver-class.md)."},{"content":"An object of that class has properties and operations duplicating those of the server object.","pos":[1660,1753]},{"content":"Your application calls this object's properties and operations, and functionality inherited from <ph id=\"ph1\">`COleDispatchDriver`</ph> routes these calls to the OLE system, which in turn routes them to the server object.","pos":[1754,1957],"source":" Your application calls this object's properties and operations, and functionality inherited from `COleDispatchDriver` routes these calls to the OLE system, which in turn routes them to the server object."},{"content":"Visual C++ automatically maintains this type-library file for you if you chose to include Automation when the project was created.","pos":[1964,2094]},{"content":"As part of each build, the .tlb file will be built with MkTypLib.","pos":[2095,2160]},{"content":"To create a dispatch class from a type-library (.tlb) file","pos":[2170,2228]},{"pos":[2238,2373],"content":"In either Class View or Solution Explorer, right-click the project and click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> and then click <bpt id=\"p2\">**</bpt>Add Class<ept id=\"p2\">**</ept> on the shortcut menu.","source":"In either Class View or Solution Explorer, right-click the project and click **Add** and then click **Add Class** on the shortcut menu."},{"content":"In the <bpt id=\"p1\">**</bpt>Add Class<ept id=\"p1\">**</ept> dialog box, select the <bpt id=\"p2\">**</bpt>Visual C++/MFC<ept id=\"p2\">**</ept> folder in the left pane.","pos":[2383,2470],"source":"In the **Add Class** dialog box, select the **Visual C++/MFC** folder in the left pane."},{"content":"Select the <bpt id=\"p1\">**</bpt>MFC Class From TypeLib<ept id=\"p1\">**</ept> icon from the right pane and click <bpt id=\"p2\">**</bpt>Open<ept id=\"p2\">**</ept>.","pos":[2471,2553],"source":" Select the **MFC Class From TypeLib** icon from the right pane and click **Open**."},{"content":"In the <bpt id=\"p1\">**</bpt>Add Class From Typelib Wizard<ept id=\"p1\">**</ept> dialog box, select a type library from the <bpt id=\"p2\">**</bpt>Available type libraries<ept id=\"p2\">**</ept> drop-down list.","pos":[2563,2691],"source":"In the **Add Class From Typelib Wizard** dialog box, select a type library from the **Available type libraries** drop-down list."},{"content":"The <bpt id=\"p1\">**</bpt>Interfaces<ept id=\"p1\">**</ept> box displays the interfaces available for the selected type library.","pos":[2692,2779],"source":" The **Interfaces** box displays the interfaces available for the selected type library."},{"pos":[2791,2864],"content":"[!NOTE]\n You can select interfaces from more than one type library.","leadings":["","    > "],"nodes":[{"content":"You can select interfaces from more than one type library.","pos":[9,67]}]},{"content":"To select interfaces, double-click them or click the <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> button.","pos":[2875,2943],"source":"To select interfaces, double-click them or click the **Add** button."},{"content":"When you do so, names for the dispatch classes will appear in the <bpt id=\"p1\">**</bpt>Generated classes<ept id=\"p1\">**</ept> box.","pos":[2944,3036],"source":" When you do so, names for the dispatch classes will appear in the **Generated classes** box."},{"content":"You can edit the class names in the <ph id=\"ph1\">`Class`</ph> box.","pos":[3037,3085],"source":" You can edit the class names in the `Class` box."},{"content":"The <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> box displays the file in which the class will be declared.","pos":[3096,3167],"source":"The **File** box displays the file in which the class will be declared."},{"content":"(you can edit this file name as well).","pos":[3168,3206]},{"content":"You can also use the browse button to select other files, if you prefer to have the header and implementation information written in existing files or in a directory other than the project directory.","pos":[3207,3406]},{"pos":[3418,3656],"content":"[!NOTE]\n All the dispatch classes for the selected interfaces will be put into the file specified here. If you want the interfaces to be declared in separate headers, you must run this wizard for each header file you want to create.","leadings":["","    > "],"nodes":[{"content":" All the dispatch classes for the selected interfaces will be put into the file specified here. If you want the interfaces to be declared in separate headers, you must run this wizard for each header file you want to create.","pos":[8,232],"nodes":[{"content":"All the dispatch classes for the selected interfaces will be put into the file specified here.","pos":[1,95]},{"content":"If you want the interfaces to be declared in separate headers, you must run this wizard for each header file you want to create.","pos":[96,224]}]}]},{"pos":[3668,3777],"content":"[!NOTE]\n Some type library information may be stored in files with .DLL, .OCX, or .OLB file extensions.","leadings":["","    > "],"nodes":[{"content":"Some type library information may be stored in files with .DLL, .OCX, or .OLB file extensions.","pos":[9,103]}]},{"pos":[3787,3804],"content":"Click <bpt id=\"p1\">**</bpt>Finish<ept id=\"p1\">**</ept>.","source":"Click **Finish**."},{"content":"The wizard will then write the code for your dispatch classes using the specified class and file names.","pos":[3815,3918]},{"content":"See Also","pos":[3927,3935]},{"content":"Automation Clients","pos":[3940,3958]}],"content":"---\ntitle: \"Automation Clients: Using Type Libraries | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"MkTypLib\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"clients, Automation\"\n  - \"dispatch class\"\n  - \"Automation clients, type libraries\"\n  - \"type libraries, Automation clients\"\n  - \"ODL (Object Description Language)\"\n  - \"ODL files\"\n  - \"classes [C++], dispatch\"\n  - \"MkTypLib tool\"\n  - \".odl files\"\nms.assetid: d405bc47-118d-4786-b371-920d035b2047\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Automation Clients: Using Type Libraries\nAutomation clients must have information about server objects' properties and methods if the clients are to manipulate the servers' objects. Properties have data types; methods often return values and accept parameters. The client requires information about the data types of all of these in order to statically bind to the server object type.  \n  \n This type information can be made known in several ways. The recommended way is to create a type library.  \n  \n For information on [MkTypLib](http://msdn.microsoft.com/library/windows/desktop/aa366797), see the [!INCLUDE[winSDK](../atl/includes/winsdk_md.md)].  \n  \n Visual C++ can read a type-library file and create a dispatch class derived from [COleDispatchDriver](../mfc/reference/coledispatchdriver-class.md). An object of that class has properties and operations duplicating those of the server object. Your application calls this object's properties and operations, and functionality inherited from `COleDispatchDriver` routes these calls to the OLE system, which in turn routes them to the server object.  \n  \n Visual C++ automatically maintains this type-library file for you if you chose to include Automation when the project was created. As part of each build, the .tlb file will be built with MkTypLib.  \n  \n### To create a dispatch class from a type-library (.tlb) file  \n  \n1.  In either Class View or Solution Explorer, right-click the project and click **Add** and then click **Add Class** on the shortcut menu.  \n  \n2.  In the **Add Class** dialog box, select the **Visual C++/MFC** folder in the left pane. Select the **MFC Class From TypeLib** icon from the right pane and click **Open**.  \n  \n3.  In the **Add Class From Typelib Wizard** dialog box, select a type library from the **Available type libraries** drop-down list. The **Interfaces** box displays the interfaces available for the selected type library.  \n  \n    > [!NOTE]\n    >  You can select interfaces from more than one type library.  \n  \n     To select interfaces, double-click them or click the **Add** button. When you do so, names for the dispatch classes will appear in the **Generated classes** box. You can edit the class names in the `Class` box.  \n  \n     The **File** box displays the file in which the class will be declared. (you can edit this file name as well). You can also use the browse button to select other files, if you prefer to have the header and implementation information written in existing files or in a directory other than the project directory.  \n  \n    > [!NOTE]\n    >  All the dispatch classes for the selected interfaces will be put into the file specified here. If you want the interfaces to be declared in separate headers, you must run this wizard for each header file you want to create.  \n  \n    > [!NOTE]\n    >  Some type library information may be stored in files with .DLL, .OCX, or .OLB file extensions.  \n  \n4.  Click **Finish**.  \n  \n     The wizard will then write the code for your dispatch classes using the specified class and file names.  \n  \n## See Also  \n [Automation Clients](../mfc/automation-clients.md)\n\n"}