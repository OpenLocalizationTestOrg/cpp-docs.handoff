{"nodes":[{"pos":[12,64],"content":"tuple_element Class &lt;utility&gt; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"tuple_element Class <ph id=\"ph1\">&amp;lt;</ph>utility<ph id=\"ph2\">&amp;gt;</ph> | Microsoft Docs","pos":[0,52],"source":"tuple_element Class &lt;utility&gt; | Microsoft Docs"}]},{"pos":[701,736],"content":"tuple_element Class &lt;utility&gt;","linkify":"tuple_element Class &lt;utility&gt;","nodes":[{"content":"tuple_element Class <ph id=\"ph1\">&amp;lt;</ph>utility<ph id=\"ph2\">&amp;gt;</ph>","pos":[0,35],"source":"tuple_element Class &lt;utility&gt;"}]},{"pos":[737,772],"content":"Wraps the type of a <ph id=\"ph1\">`pair`</ph> element.","source":"Wraps the type of a `pair` element."},{"pos":[781,787],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1614,1624],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Index","pos":[1628,1633]},{"content":"The position of the element; for pair this value is either 0 or 1.","pos":[1637,1703]},{"content":"The type of the first pair element.","pos":[1718,1753]},{"content":"The type of the second pair element.","pos":[1768,1804]},{"content":"type","pos":[1811,1815]},{"pos":[1824,1831],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The templates are specializations of the template class <bpt id=\"p1\">[</bpt>tuple_element Class<ept id=\"p1\">](../standard-library/tuple-element-class-tuple.md)</ept>.","pos":[1835,1963],"source":"The templates are specializations of the template class [tuple_element Class](../standard-library/tuple-element-class-tuple.md)."},{"content":"Each has a single member typedef, <ph id=\"ph1\">`type`</ph>, which is a synonym for the type of the element at the specified position in the <ph id=\"ph2\">`pair`</ph>, with any const and/or volatile qualifications preserved.","pos":[1964,2150],"source":" Each has a single member typedef, `type`, which is a synonym for the type of the element at the specified position in the `pair`, with any const and/or volatile qualifications preserved."},{"content":"<ph id=\"ph1\">`tuple_element_t`</ph> is a convenient alias for <ph id=\"ph2\">`tuple_element&lt;N, pair&lt;T1, T2&gt;&gt;::type`</ph>.","pos":[2151,2234],"source":"`tuple_element_t` is a convenient alias for `tuple_element<N, pair<T1, T2>>::type`."},{"content":"Use the <bpt id=\"p1\">[</bpt>get Function <ph id=\"ph1\">&amp;lt;</ph>utility<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](../standard-library/utility-functions.md#get)</ept> to return the element at a specified position or (in C++14 / Visual Studio 2015) of a specified type.","pos":[2235,2421],"source":" Use the [get Function &lt;utility&gt;](../standard-library/utility-functions.md#get) to return the element at a specified position or (in C++14 / Visual Studio 2015) of a specified type."},{"pos":[2430,2437],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3045,3057],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3061,3083],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>utility&gt;","source":"**Header:** \\<utility>"},{"pos":[3090,3108],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3117,3125],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>utility&gt;<ept id=\"p1\">](../standard-library/utility.md)</ept><ph id=\"ph2\"> </ph>","pos":[3129,3174],"source":"[\\<utility>](../standard-library/utility.md) "},{"content":"<bpt id=\"p1\"> [</bpt>get Function <ph id=\"ph1\">&amp;lt;</ph>utility<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](../standard-library/utility-functions.md#get)</ept><ph id=\"ph3\"> </ph>","pos":[3177,3255],"source":" [get Function &lt;utility&gt;](../standard-library/utility-functions.md#get) "},{"content":"<bpt id=\"p1\"> [</bpt>tuple_size Class<ept id=\"p1\">](../standard-library/tuple-size-class-utility.md)</ept>","pos":[3258,3326],"source":" [tuple_size Class](../standard-library/tuple-size-class-utility.md)"}],"content":"---\ntitle: \"tuple_element Class &lt;utility&gt; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.tuple_element\"\n  - \"tuple_element\"\n  - \"std::tr1::tuple_element\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"tuple_element Class <utility> (TR1)\"\nms.assetid: f9db79e8-685c-49e3-97ee-81763e516ce3\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# tuple_element Class &lt;utility&gt;\nWraps the type of a `pair` element.  \n  \n## Syntax  \n  \n```\n// CLASS tuple_element (find element by index)\ntemplate <size_t Index, class Tuple>\nstruct tuple_element;\n\n// struct to determine type of element 0 in pair\ntemplate <class Ty1, class Ty2>\nstruct tuple_element<0, pair<Ty1, Ty2>>;\n\n// struct to determine type of element 1 in pair\ntemplate <class Ty1, class Ty2>\nstruct tuple_element<1, pair<Ty1, Ty2>>;\n\n// tuple_element for const\ntemplate <size_t Index, class Tuple>\nstruct tuple_element<Index, const Tuple>;\n\n// tuple_element for volatile\ntemplate <size_t Index, class Tuple>\nstruct tuple_element<Index, volatile Tuple>;\n\n// tuple_element for const volatile\ntemplate <size_t Index, class Tuple>\nstruct tuple_element<Index, const volatile Tuple>;\n\ntemplate <size_t Index, class Tuple>\nusing tuple_element_t = typename tuple_element<Index, Tuple>::type;\n```  \n  \n#### Parameters  \n Index  \n The position of the element; for pair this value is either 0 or 1.  \n  \n `T1`  \n The type of the first pair element.  \n  \n `T2`  \n The type of the second pair element.  \n  \n type  \n  \n## Remarks  \n The templates are specializations of the template class [tuple_element Class](../standard-library/tuple-element-class-tuple.md). Each has a single member typedef, `type`, which is a synonym for the type of the element at the specified position in the `pair`, with any const and/or volatile qualifications preserved. `tuple_element_t` is a convenient alias for `tuple_element<N, pair<T1, T2>>::type`. Use the [get Function &lt;utility&gt;](../standard-library/utility-functions.md#get) to return the element at a specified position or (in C++14 / Visual Studio 2015) of a specified type.  \n  \n## Example  \n  \n```cpp  \n#include <utility>   \n#include <iostream>   \n  \nusing namespace std;  \n  \ntypedef pair<int, double> MyPair;  \nint main()  \n{  \n    MyPair c0(0, 1.333);  \n  \n    // display contents \" 0 1\"   \n    cout << \" \" << get<0>(c0);  \n    cout << \" \" << get<1>(c0) << endl;  \n  \n    // display first element \" 0\" by index  \n    tuple_element<0, MyPair>::type val = get<0>(c0);  \n    cout << \" \" << val;  \n  \n    // display second element by type   \n    tuple_element<1, MyPair>::type val2 = get<double>(c0);  \n    cout << \" \" << val2 << endl;  \n}  \n  \n/*  \nOutput:  \n0 1.333  \n0 1.333  \n*/  \n```  \n  \n## Requirements  \n **Header:** \\<utility>  \n  \n **Namespace:** std  \n  \n## See Also  \n [\\<utility>](../standard-library/utility.md)   \n [get Function &lt;utility&gt;](../standard-library/utility-functions.md#get)   \n [tuple_size Class](../standard-library/tuple-size-class-utility.md)\n"}