{"nodes":[{"pos":[12,45],"content":"ctype_base Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ctype_base Class | Microsoft Docs","pos":[0,33]}]},{"content":"ctype_base Class","pos":[674,690]},{"content":"The class serves as a base class for facets of template class <bpt id=\"p1\">[</bpt>ctype<ept id=\"p1\">](../standard-library/ctype-class.md)</ept>.","pos":[691,797],"source":"The class serves as a base class for facets of template class [ctype](../standard-library/ctype-class.md)."},{"content":"A base class for the ctype class that is used to define enumeration types used to classify or test characters either individually or within entire ranges.","pos":[798,952]},{"content":"Syntax","pos":[961,967]},{"content":"Remarks","pos":[1235,1242]},{"content":"It defines an enumeration mask.","pos":[1246,1277]},{"content":"Each enumeration constant characterizes a different way to classify characters, as defined by the functions with similar names declared in the header <ph id=\"ph1\">\\&lt;</ph>ctype.h&gt;.","pos":[1278,1439],"source":" Each enumeration constant characterizes a different way to classify characters, as defined by the functions with similar names declared in the header \\<ctype.h>."},{"content":"The constants are:","pos":[1440,1458]},{"pos":[1466,1545],"content":"<bpt id=\"p1\">**</bpt>space<ept id=\"p1\">**</ept> (function <bpt id=\"p2\">[</bpt>isspace<ept id=\"p2\">](../standard-library/locale-functions.md#isspace)</ept>)","source":"**space** (function [isspace](../standard-library/locale-functions.md#isspace))"},{"pos":[1553,1632],"content":"<bpt id=\"p1\">**</bpt>print<ept id=\"p1\">**</ept> (function <bpt id=\"p2\">[</bpt>isprint<ept id=\"p2\">](../standard-library/locale-functions.md#isprint)</ept>)","source":"**print** (function [isprint](../standard-library/locale-functions.md#isprint))"},{"pos":[1640,1719],"content":"<bpt id=\"p1\">**</bpt>cntrl<ept id=\"p1\">**</ept> (function <bpt id=\"p2\">[</bpt>iscntrl<ept id=\"p2\">](../standard-library/locale-functions.md#iscntrl)</ept>)","source":"**cntrl** (function [iscntrl](../standard-library/locale-functions.md#iscntrl))"},{"pos":[1727,1806],"content":"<bpt id=\"p1\">**</bpt>upper<ept id=\"p1\">**</ept> (function <bpt id=\"p2\">[</bpt>isupper<ept id=\"p2\">](../standard-library/locale-functions.md#isupper)</ept>)","source":"**upper** (function [isupper](../standard-library/locale-functions.md#isupper))"},{"pos":[1814,1893],"content":"<bpt id=\"p1\">**</bpt>lower<ept id=\"p1\">**</ept> (function <bpt id=\"p2\">[</bpt>islower<ept id=\"p2\">](../standard-library/locale-functions.md#islower)</ept>)","source":"**lower** (function [islower](../standard-library/locale-functions.md#islower))"},{"pos":[1901,1980],"content":"<bpt id=\"p1\">**</bpt>digit<ept id=\"p1\">**</ept> (function <bpt id=\"p2\">[</bpt>isdigit<ept id=\"p2\">](../standard-library/locale-functions.md#isdigit)</ept>)","source":"**digit** (function [isdigit](../standard-library/locale-functions.md#isdigit))"},{"pos":[1988,2067],"content":"<bpt id=\"p1\">**</bpt>punct<ept id=\"p1\">**</ept> (function <bpt id=\"p2\">[</bpt>ispunct<ept id=\"p2\">](../standard-library/locale-functions.md#ispunct)</ept>)","source":"**punct** (function [ispunct](../standard-library/locale-functions.md#ispunct))"},{"pos":[2075,2157],"content":"<bpt id=\"p1\">**</bpt>xdigit<ept id=\"p1\">**</ept> (function <bpt id=\"p2\">[</bpt>isxdigit<ept id=\"p2\">](../standard-library/locale-functions.md#isxdigit)</ept>)","source":"**xdigit** (function [isxdigit](../standard-library/locale-functions.md#isxdigit))"},{"pos":[2165,2244],"content":"<bpt id=\"p1\">**</bpt>alpha<ept id=\"p1\">**</ept> (function <bpt id=\"p2\">[</bpt>isalpha<ept id=\"p2\">](../standard-library/locale-functions.md#isalpha)</ept>)","source":"**alpha** (function [isalpha](../standard-library/locale-functions.md#isalpha))"},{"pos":[2252,2331],"content":"<bpt id=\"p1\">**</bpt>alnum<ept id=\"p1\">**</ept> (function <bpt id=\"p2\">[</bpt>isalnum<ept id=\"p2\">](../standard-library/locale-functions.md#isalnum)</ept>)","source":"**alnum** (function [isalnum](../standard-library/locale-functions.md#isalnum))"},{"pos":[2339,2418],"content":"<bpt id=\"p1\">**</bpt>graph<ept id=\"p1\">**</ept> (function <bpt id=\"p2\">[</bpt>isgraph<ept id=\"p2\">](../standard-library/locale-functions.md#isgraph)</ept>)","source":"**graph** (function [isgraph](../standard-library/locale-functions.md#isgraph))"},{"content":"You can characterize a combination of classifications by ORing these constants.","pos":[2425,2504]},{"content":"In particular, it is always true that <bpt id=\"p1\">**</bpt>alnum<ept id=\"p1\">**</ept> == ( <bpt id=\"p2\">**</bpt>alpha<ept id=\"p2\">**</ept><ph id=\"ph1\">``&amp;#124; **digit**\\) and **graph** \\=\\= \\( **alnum**``</ph>&amp;#124; <bpt id=\"p3\">**</bpt>punct<ept id=\"p3\">**</ept>).","pos":[2505,2639],"source":" In particular, it is always true that **alnum** == ( **alpha**``&#124; **digit**\\) and **graph** \\=\\= \\( **alnum**``&#124; **punct**)."},{"content":"Requirements","pos":[2648,2660]},{"pos":[2664,2685],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>locale&gt;","source":"**Header:** \\<locale>"},{"pos":[2692,2710],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[2719,2727]},{"content":"Thread Safety in the C++ Standard Library","pos":[2732,2773]}],"content":"---\ntitle: \"ctype_base Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"locale/std::ctype_base\"\n  - \"std.ctype_base\"\n  - \"ctype_base\"\n  - \"std::ctype_base\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ctype_base class\"\nms.assetid: ccffe891-d7ab-4d22-baf8-8eb6d438a96d\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ctype_base Class\nThe class serves as a base class for facets of template class [ctype](../standard-library/ctype-class.md). A base class for the ctype class that is used to define enumeration types used to classify or test characters either individually or within entire ranges.  \n  \n## Syntax  \n  \n```\nstruct ctype_base : public locale::facet\n{\n    enum\n {\n    alnum,\n alpha,\n    cntrl,\n digit,\n    graph,\n lower,\n    print,\n punct,\n    space,\n upper,\n    xdigit\n };\n    typedef short mask;\n    ctype_base(\n size_t _Refs = 0);\n\n ~ctype_base();\n\n};\n```  \n  \n## Remarks  \n It defines an enumeration mask. Each enumeration constant characterizes a different way to classify characters, as defined by the functions with similar names declared in the header \\<ctype.h>. The constants are:  \n  \n- **space** (function [isspace](../standard-library/locale-functions.md#isspace))  \n  \n- **print** (function [isprint](../standard-library/locale-functions.md#isprint))  \n  \n- **cntrl** (function [iscntrl](../standard-library/locale-functions.md#iscntrl))  \n  \n- **upper** (function [isupper](../standard-library/locale-functions.md#isupper))  \n  \n- **lower** (function [islower](../standard-library/locale-functions.md#islower))  \n  \n- **digit** (function [isdigit](../standard-library/locale-functions.md#isdigit))  \n  \n- **punct** (function [ispunct](../standard-library/locale-functions.md#ispunct))  \n  \n- **xdigit** (function [isxdigit](../standard-library/locale-functions.md#isxdigit))  \n  \n- **alpha** (function [isalpha](../standard-library/locale-functions.md#isalpha))  \n  \n- **alnum** (function [isalnum](../standard-library/locale-functions.md#isalnum))  \n  \n- **graph** (function [isgraph](../standard-library/locale-functions.md#isgraph))  \n  \n You can characterize a combination of classifications by ORing these constants. In particular, it is always true that **alnum** == ( **alpha**``&#124; **digit**\\) and **graph** \\=\\= \\( **alnum**``&#124; **punct**).  \n  \n## Requirements  \n **Header:** \\<locale>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n\n\n"}