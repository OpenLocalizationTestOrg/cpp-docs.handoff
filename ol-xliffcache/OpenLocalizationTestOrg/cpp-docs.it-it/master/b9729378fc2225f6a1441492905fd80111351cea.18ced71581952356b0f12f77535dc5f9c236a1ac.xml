{"nodes":[{"pos":[12,60],"content":"task_continuation_context Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"task_continuation_context Class | Microsoft Docs","pos":[0,48]}]},{"pos":[695,726],"content":"task_continuation_context Class","linkify":"task_continuation_context Class","nodes":[{"content":"task_continuation_context Class","pos":[0,31]}]},{"content":"The <ph id=\"ph1\">`task_continuation_context`</ph> class allows you to specify where you would like a continuation to be executed.","pos":[727,838],"source":"The `task_continuation_context` class allows you to specify where you would like a continuation to be executed."},{"content":"It is only useful to use this class from a Windows Store app.","pos":[839,900]},{"content":"For non-Windows Store apps, the task continuation's execution context is determined by the runtime, and not configurable.","pos":[901,1022]},{"pos":[1031,1037],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1127,1134],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1144,1158],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1165,1169]},{"content":"Description","pos":[1170,1181]},{"pos":[1219,1308],"content":"<bpt id=\"p1\">[</bpt>task_continuation_context::get_current_winrt_context Method<ept id=\"p1\">](#get_current_winrt_context)</ept>","source":"[task_continuation_context::get_current_winrt_context Method](#get_current_winrt_context)"},{"content":"Returns a task continuation context object that represents the current winrt thread context.","pos":[1309,1401]},{"pos":[1406,1471],"content":"<bpt id=\"p1\">[</bpt>task_continuation_context::use_arbitrary Method<ept id=\"p1\">](#use_arbitrary)</ept>","source":"[task_continuation_context::use_arbitrary Method](#use_arbitrary)"},{"content":"Creates a task continuation context which allows the Runtime to choose the execution context for a continuation.","pos":[1472,1584]},{"pos":[1589,1650],"content":"<bpt id=\"p1\">[</bpt>task_continuation_context::use_current Method<ept id=\"p1\">](#use_current)</ept>","source":"[task_continuation_context::use_current Method](#use_current)"},{"content":"Returns a task continuation context object that represents the current execution context.","pos":[1651,1740]},{"pos":[1745,1806],"content":"<bpt id=\"p1\">[</bpt>task_continuation_context::use_default Method<ept id=\"p1\">](#use_default)</ept>","source":"[task_continuation_context::use_default Method](#use_default)"},{"content":"Creates the default task continuation context.","pos":[1807,1853]},{"pos":[1858,1947],"content":"<bpt id=\"p1\">[</bpt>task_continuation_context::use_synchronous_execution Method<ept id=\"p1\">](#use_synchronous_execution)</ept>","source":"[task_continuation_context::use_synchronous_execution Method](#use_synchronous_execution)"},{"content":"Returns a task continuation context object that represents the synchronous execution context.","pos":[1948,2041]},{"pos":[2051,2072],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2137,2149],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2153,2175],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> ppltasks.h","source":"**Header:** ppltasks.h"},{"pos":[2182,2208],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2215,2281],"content":"<bpt id=\"p1\">&lt;a name=\"get_current_winrt_context\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> get_current_winrt_context","linkify":"<a name=\"get_current_winrt_context\"></a> get_current_winrt_context","source":"<a name=\"get_current_winrt_context\"></a> get_current_winrt_context"},{"content":"Returns a task continuation context object that represents the current WinRT thread context.","pos":[2283,2375]},{"pos":[2384,2390],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2478,2490],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current Windows Runtime thread context.","pos":[2494,2537]},{"content":"Returns an empty task_continuation_context if called from a non-Windows Runtime context.","pos":[2538,2626]},{"pos":[2635,2642],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`get_current_winrt_context`</ph> method captures the caller's Windows Runtime thread context.","pos":[2646,2738],"source":"The `get_current_winrt_context` method captures the caller's Windows Runtime thread context."},{"content":"It returns an empty context to non-Windows Runtime callers.","pos":[2739,2798]},{"content":"The value returned by <ph id=\"ph1\">`get_current_winrt_context`</ph> can be used to indicate to the Runtime that the continuation should execute in the apartment model of the captured context (STA vs MTA), regardless of whether the antecedent task is apartment aware.","pos":[2805,3053],"source":"The value returned by `get_current_winrt_context` can be used to indicate to the Runtime that the continuation should execute in the apartment model of the captured context (STA vs MTA), regardless of whether the antecedent task is apartment aware."},{"content":"An apartment aware task is a task that unwraps a Windows Runtime <ph id=\"ph1\">`IAsyncInfo`</ph> interface, or a task that is descended from such a task.","pos":[3054,3188],"source":" An apartment aware task is a task that unwraps a Windows Runtime `IAsyncInfo` interface, or a task that is descended from such a task."},{"content":"This method is similar to the  <ph id=\"ph1\">`use_current`</ph> method, but it is also available to native C++ code without C++/CX extension support.","pos":[3195,3325],"source":"This method is similar to the  `use_current` method, but it is also available to native C++ code without C++/CX extension support."},{"content":"It is intended for use by advanced users writing C++/CX-agnostic library code for both native and Windows Runtime callers.","pos":[3326,3448]},{"content":"Unless you need this functionality, we recommend the <ph id=\"ph1\">`use_current`</ph> method, which is only available to C++/CX clients.","pos":[3449,3566],"source":" Unless you need this functionality, we recommend the `use_current` method, which is only available to C++/CX clients."},{"pos":[3579,3656],"content":"<bpt id=\"p1\">&lt;a name=\"use_arbitrary\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  task_continuation_context::use_arbitrary Method","linkify":"<a name=\"use_arbitrary\"></a>  task_continuation_context::use_arbitrary Method","source":"<a name=\"use_arbitrary\"></a>  task_continuation_context::use_arbitrary Method"},{"content":"Creates a task continuation context which allows the Runtime to choose the execution context for a continuation.","pos":[3660,3772]},{"pos":[3845,3857],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A task continuation context that represents an arbitrary location.","pos":[3861,3927]},{"pos":[3937,3944],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this continuation context is used the continuation will execute in a context the runtime chooses even if the antecedent task is apartment aware.","pos":[3948,4097]},{"pos":[4104,4229],"content":"<ph id=\"ph1\">`use_arbitrary`</ph> can be used to turn off the default behavior for a continuation on an apartment aware task created in an STA.","source":"`use_arbitrary` can be used to turn off the default behavior for a continuation on an apartment aware task created in an STA."},{"content":"This method is only available to Windows Store apps.","pos":[4236,4288]},{"pos":[4298,4371],"content":"<bpt id=\"p1\">&lt;a name=\"use_current\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  task_continuation_context::use_current Method","linkify":"<a name=\"use_current\"></a>  task_continuation_context::use_current Method","source":"<a name=\"use_current\"></a>  task_continuation_context::use_current Method"},{"content":"Returns a task continuation context object that represents the current execution context.","pos":[4375,4464]},{"pos":[4535,4547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current execution context.","pos":[4551,4581]},{"pos":[4591,4598],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method captures the caller's Windows Runtime context so that continuations can be executed in the right apartment.","pos":[4602,4721]},{"content":"The value returned by <ph id=\"ph1\">`use_current`</ph> can be used to indicate to the Runtime that the continuation should execute in the captured context (STA vs MTA) regardless of whether or not the antecedent task is apartment aware.","pos":[4728,4945],"source":"The value returned by `use_current` can be used to indicate to the Runtime that the continuation should execute in the captured context (STA vs MTA) regardless of whether or not the antecedent task is apartment aware."},{"content":"An apartment aware task is a task that unwraps a Windows Runtime <ph id=\"ph1\">`IAsyncInfo`</ph> interface, or a task that is descended from such a task.","pos":[4946,5080],"source":" An apartment aware task is a task that unwraps a Windows Runtime `IAsyncInfo` interface, or a task that is descended from such a task."},{"content":"This method is only available to Windows Store apps.","pos":[5087,5139]},{"pos":[5149,5222],"content":"<bpt id=\"p1\">&lt;a name=\"use_default\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  task_continuation_context::use_default Method","linkify":"<a name=\"use_default\"></a>  task_continuation_context::use_default Method","source":"<a name=\"use_default\"></a>  task_continuation_context::use_default Method"},{"content":"Creates the default task continuation context.","pos":[5226,5272]},{"pos":[5343,5355],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The default continuation context.","pos":[5359,5392]},{"pos":[5402,5409],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default context is used if you don't specifiy a continuation context when you call the <ph id=\"ph1\">`then`</ph> method.","pos":[5413,5518],"source":"The default context is used if you don't specifiy a continuation context when you call the `then` method."},{"content":"In Windows applications for Windows 7 and below, as well as desktop applications on Windows 8 and higher, the runtime determines where task continuations will execute.","pos":[5519,5686]},{"content":"However, in a Windows Store app, the default continuation context for a continuation on an apartment aware task is the apartment where <ph id=\"ph1\">`then`</ph> is invoked.","pos":[5687,5840],"source":" However, in a Windows Store app, the default continuation context for a continuation on an apartment aware task is the apartment where `then` is invoked."},{"content":"An apartment aware task is a task that unwraps a Windows Runtime <ph id=\"ph1\">`IAsyncInfo`</ph> interface, or a task that is descended from such a task.","pos":[5847,5981],"source":"An apartment aware task is a task that unwraps a Windows Runtime `IAsyncInfo` interface, or a task that is descended from such a task."},{"content":"Therefore, if you schedule a continuation on an apartment aware task in a Windows Runtime STA, the continuation will execute in that STA.","pos":[5982,6119]},{"content":"A continuation on a non-apartment aware task will execute in a context the Runtime chooses.","pos":[6126,6217]},{"pos":[6224,6317],"content":"<bpt id=\"p1\">&lt;a name=\"use_synchronous_execution\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> task_continuation_context::use_synchronous_execution","linkify":"<a name=\"use_synchronous_execution\"></a> task_continuation_context::use_synchronous_execution","source":"<a name=\"use_synchronous_execution\"></a> task_continuation_context::use_synchronous_execution"},{"content":"Returns a task continuation context object that represents the synchronous execution context.","pos":[6320,6413]},{"pos":[6422,6428],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[6516,6528],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The synchronous execution context.","pos":[6532,6566]},{"pos":[6575,6582],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6586,6732],"content":"The <ph id=\"ph1\">`use_synchronous_execution`</ph> method forces the continuation task to run synchronously on the context, causing its antecedent task's completion.","source":"The `use_synchronous_execution` method forces the continuation task to run synchronously on the context, causing its antecedent task's completion."},{"content":"If the antecedent task has already completed when the continuation is attached, the continuation runs synchronously on the context that attaches the continuation.","pos":[6739,6901]},{"pos":[6912,6920],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6924,6973],"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept>","source":"[concurrency Namespace](concurrency-namespace.md)"}],"content":"---\ntitle: \"task_continuation_context Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ppltasks/concurrency::task_continuation_context\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"task_continuation_context class\"\nms.assetid: 1fb5a76a-3682-45c2-a615-8b6b527741f0\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# task_continuation_context Class\nThe `task_continuation_context` class allows you to specify where you would like a continuation to be executed. It is only useful to use this class from a Windows Store app. For non-Windows Store apps, the task continuation's execution context is determined by the runtime, and not configurable.  \n  \n## Syntax  \n  \n```\nclass task_continuation_context : public details::_ContextCallback;\n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[task_continuation_context::get_current_winrt_context Method](#get_current_winrt_context)|Returns a task continuation context object that represents the current winrt thread context.|  \n|[task_continuation_context::use_arbitrary Method](#use_arbitrary)|Creates a task continuation context which allows the Runtime to choose the execution context for a continuation.|  \n|[task_continuation_context::use_current Method](#use_current)|Returns a task continuation context object that represents the current execution context.|  \n|[task_continuation_context::use_default Method](#use_default)|Creates the default task continuation context.|  \n|[task_continuation_context::use_synchronous_execution Method](#use_synchronous_execution)|Returns a task continuation context object that represents the synchronous execution context.|  \n  \n## Inheritance Hierarchy  \n `_ContextCallback`  \n  \n `task_continuation_context`  \n  \n## Requirements  \n **Header:** ppltasks.h  \n  \n **Namespace:** concurrency  \n\n## <a name=\"get_current_winrt_context\"></a> get_current_winrt_context\n Returns a task continuation context object that represents the current WinRT thread context.  \n  \n## Syntax  \n  \n```  \nstatic task_continuation_context get_current_winrt_context();  \n```  \n  \n## Return Value  \n The current Windows Runtime thread context. Returns an empty task_continuation_context if called from a non-Windows Runtime context.  \n  \n## Remarks  \n The `get_current_winrt_context` method captures the caller's Windows Runtime thread context. It returns an empty context to non-Windows Runtime callers.  \n  \n The value returned by `get_current_winrt_context` can be used to indicate to the Runtime that the continuation should execute in the apartment model of the captured context (STA vs MTA), regardless of whether the antecedent task is apartment aware. An apartment aware task is a task that unwraps a Windows Runtime `IAsyncInfo` interface, or a task that is descended from such a task.  \n  \n This method is similar to the  `use_current` method, but it is also available to native C++ code without C++/CX extension support. It is intended for use by advanced users writing C++/CX-agnostic library code for both native and Windows Runtime callers. Unless you need this functionality, we recommend the `use_current` method, which is only available to C++/CX clients.  \n  \n  \n##  <a name=\"use_arbitrary\"></a>  task_continuation_context::use_arbitrary Method  \n Creates a task continuation context which allows the Runtime to choose the execution context for a continuation.  \n  \n```\nstatic task_continuation_context use_arbitrary();\n```  \n  \n### Return Value  \n A task continuation context that represents an arbitrary location.  \n  \n### Remarks  \n When this continuation context is used the continuation will execute in a context the runtime chooses even if the antecedent task is apartment aware.  \n  \n `use_arbitrary` can be used to turn off the default behavior for a continuation on an apartment aware task created in an STA.  \n  \n This method is only available to Windows Store apps.  \n  \n##  <a name=\"use_current\"></a>  task_continuation_context::use_current Method  \n Returns a task continuation context object that represents the current execution context.  \n  \n```\nstatic task_continuation_context use_current();\n```  \n  \n### Return Value  \n The current execution context.  \n  \n### Remarks  \n This method captures the caller's Windows Runtime context so that continuations can be executed in the right apartment.  \n  \n The value returned by `use_current` can be used to indicate to the Runtime that the continuation should execute in the captured context (STA vs MTA) regardless of whether or not the antecedent task is apartment aware. An apartment aware task is a task that unwraps a Windows Runtime `IAsyncInfo` interface, or a task that is descended from such a task.  \n  \n This method is only available to Windows Store apps.  \n  \n##  <a name=\"use_default\"></a>  task_continuation_context::use_default Method  \n Creates the default task continuation context.  \n  \n```\nstatic task_continuation_context use_default();\n```  \n  \n### Return Value  \n The default continuation context.  \n  \n### Remarks  \n The default context is used if you don't specifiy a continuation context when you call the `then` method. In Windows applications for Windows 7 and below, as well as desktop applications on Windows 8 and higher, the runtime determines where task continuations will execute. However, in a Windows Store app, the default continuation context for a continuation on an apartment aware task is the apartment where `then` is invoked.  \n  \n An apartment aware task is a task that unwraps a Windows Runtime `IAsyncInfo` interface, or a task that is descended from such a task. Therefore, if you schedule a continuation on an apartment aware task in a Windows Runtime STA, the continuation will execute in that STA.  \n  \n A continuation on a non-apartment aware task will execute in a context the Runtime chooses.  \n\n## <a name=\"use_synchronous_execution\"></a> task_continuation_context::use_synchronous_execution  \nReturns a task continuation context object that represents the synchronous execution context.  \n  \n## Syntax  \n  \n```  \nstatic task_continuation_context use_synchronous_execution();  \n```  \n  \n## Return Value  \n The synchronous execution context.  \n  \n## Remarks  \n The `use_synchronous_execution` method forces the continuation task to run synchronously on the context, causing its antecedent task's completion.  \n  \n If the antecedent task has already completed when the continuation is attached, the continuation runs synchronously on the context that attaches the continuation.  \n  \n \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}