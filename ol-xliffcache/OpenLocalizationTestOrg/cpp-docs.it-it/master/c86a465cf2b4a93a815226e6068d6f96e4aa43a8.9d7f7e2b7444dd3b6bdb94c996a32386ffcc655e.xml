{"nodes":[{"pos":[12,49],"content":"COleDropSource Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"COleDropSource Class | Microsoft Docs","pos":[0,37]}]},{"pos":[707,727],"content":"COleDropSource Class","linkify":"COleDropSource Class","nodes":[{"content":"COleDropSource Class","pos":[0,20]}]},{"content":"Allows data to be dragged to a drop target.","pos":[728,771]},{"pos":[780,786],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[853,860],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[870,889],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[896,900]},{"content":"Description","pos":[901,912]},{"pos":[950,1015],"content":"<bpt id=\"p1\">[</bpt>COleDropSource::COleDropSource<ept id=\"p1\">](#coledropsource__coledropsource)</ept>","source":"[COleDropSource::COleDropSource](#coledropsource__coledropsource)"},{"pos":[1016,1053],"content":"Constructs a <ph id=\"ph1\">`COleDropSource`</ph> object.","source":"Constructs a `COleDropSource` object."},{"pos":[1064,1078],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1085,1089]},{"content":"Description","pos":[1090,1101]},{"pos":[1139,1200],"content":"<bpt id=\"p1\">[</bpt>COleDropSource::GiveFeedback<ept id=\"p1\">](#coledropsource__givefeedback)</ept>","source":"[COleDropSource::GiveFeedback](#coledropsource__givefeedback)"},{"content":"Changes the cursor during a drag-and-drop operation.","pos":[1201,1253]},{"pos":[1258,1317],"content":"<bpt id=\"p1\">[</bpt>COleDropSource::OnBeginDrag<ept id=\"p1\">](#coledropsource__onbegindrag)</ept>","source":"[COleDropSource::OnBeginDrag](#coledropsource__onbegindrag)"},{"content":"Handles mouse capture during a drag-and-drop operation.","pos":[1318,1373]},{"pos":[1378,1449],"content":"<bpt id=\"p1\">[</bpt>COleDropSource::QueryContinueDrag<ept id=\"p1\">](#coledropsource__querycontinuedrag)</ept>","source":"[COleDropSource::QueryContinueDrag](#coledropsource__querycontinuedrag)"},{"content":"Checks to see whether dragging should continue.","pos":[1450,1497]},{"pos":[1507,1514],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">[</bpt>COleDropTarget<ept id=\"p1\">](../../mfc/reference/coledroptarget-class.md)</ept> class handles the receiving portion of the drag-and-drop operation.","pos":[1518,1651],"source":"The [COleDropTarget](../../mfc/reference/coledroptarget-class.md) class handles the receiving portion of the drag-and-drop operation."},{"content":"The <ph id=\"ph1\">`COleDropSource`</ph> object is responsible for determining when a drag operation begins, providing feedback during the drag operation, and determining when the drag operation ends.","pos":[1652,1832],"source":" The `COleDropSource` object is responsible for determining when a drag operation begins, providing feedback during the drag operation, and determining when the drag operation ends."},{"content":"To use a <ph id=\"ph1\">`COleDropSource`</ph> object, just call the constructor.","pos":[1839,1899],"source":"To use a `COleDropSource` object, just call the constructor."},{"content":"This simplifies the process of determining what events, such as a mouse click, begin a drag operation using <bpt id=\"p1\">[</bpt>COleDataSource::DoDragDrop<ept id=\"p1\">](../../mfc/reference/coledatasource-class.md#coledatasource__dodragdrop)</ept>, <bpt id=\"p2\">[</bpt>COleClientItem::DoDragDrop<ept id=\"p2\">](../../mfc/reference/coleclientitem-class.md#coleclientitem__dodragdrop)</ept>, or <bpt id=\"p3\">[</bpt>COleServerItem::DoDragDrop<ept id=\"p3\">](../../mfc/reference/coleserveritem-class.md#coleserveritem__dodragdrop)</ept> function.","pos":[1900,2325],"source":" This simplifies the process of determining what events, such as a mouse click, begin a drag operation using [COleDataSource::DoDragDrop](../../mfc/reference/coledatasource-class.md#coledatasource__dodragdrop), [COleClientItem::DoDragDrop](../../mfc/reference/coleclientitem-class.md#coleclientitem__dodragdrop), or [COleServerItem::DoDragDrop](../../mfc/reference/coleserveritem-class.md#coleserveritem__dodragdrop) function."},{"content":"These functions will create a <ph id=\"ph1\">`COleDropSource`</ph> object for you.","pos":[2326,2388],"source":" These functions will create a `COleDropSource` object for you."},{"content":"You might want to modify the default behavior of the <ph id=\"ph1\">`COleDropSource`</ph> overridable functions.","pos":[2389,2481],"source":" You might want to modify the default behavior of the `COleDropSource` overridable functions."},{"content":"These member functions will be called at the appropriate times by the framework.","pos":[2482,2562]},{"pos":[2569,2699],"content":"For more information on drag-and-drop operations using OLE, see the article <bpt id=\"p1\">[</bpt>Drag and Drop (OLE)<ept id=\"p1\">](../../mfc/drag-and-drop-ole.md)</ept>.","source":"For more information on drag-and-drop operations using OLE, see the article [Drag and Drop (OLE)](../../mfc/drag-and-drop-ole.md)."},{"pos":[2706,2865],"content":"For more information, see <bpt id=\"p1\">[</bpt>IDropSource<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms690071)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [IDropSource](http://msdn.microsoft.com/library/windows/desktop/ms690071) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[2874,2895],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2899,2946],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[2953,3006],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[3038,3050],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3054,3074],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxole.h","source":"**Header:** afxole.h"},{"pos":[3084,3161],"content":"<bpt id=\"p1\">&lt;a name=\"coledropsource__coledropsource\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleDropSource::COleDropSource","linkify":"<a name=\"coledropsource__coledropsource\"></a>  COleDropSource::COleDropSource","source":"<a name=\"coledropsource__coledropsource\"></a>  COleDropSource::COleDropSource"},{"pos":[3165,3202],"content":"Constructs a <ph id=\"ph1\">`COleDropSource`</ph> object.","source":"Constructs a `COleDropSource` object."},{"pos":[3245,3318],"content":"<bpt id=\"p1\">&lt;a name=\"coledropsource__givefeedback\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleDropSource::GiveFeedback","linkify":"<a name=\"coledropsource__givefeedback\"></a>  COleDropSource::GiveFeedback","source":"<a name=\"coledropsource__givefeedback\"></a>  COleDropSource::GiveFeedback"},{"pos":[3322,3565],"content":"Called by the framework after calling <bpt id=\"p1\">[</bpt>COleDropTarget::OnDragOver<ept id=\"p1\">](../../mfc/reference/coledroptarget-class.md#coledroptarget__ondragover)</ept> or <bpt id=\"p2\">[</bpt>COleDropTarget::DragEnter<ept id=\"p2\">](../../mfc/reference/coledroptarget-class.md#coledroptarget__ondragenter)</ept>.","source":"Called by the framework after calling [COleDropTarget::OnDragOver](../../mfc/reference/coledroptarget-class.md#coledroptarget__ondragover) or [COleDropTarget::DragEnter](../../mfc/reference/coledroptarget-class.md#coledroptarget__ondragenter)."},{"pos":[3641,3651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The effect you would like to display to the user, usually indicating what would happen if a drop occurred at this point with the selected data.","pos":[3671,3814]},{"content":"Typically, this is the value returned by the most recent call to <bpt id=\"p1\">[</bpt>CView::OnDragEnter<ept id=\"p1\">](../../mfc/reference/cview-class.md#cview__ondragenter)</ept> or <bpt id=\"p2\">[</bpt>CView::OnDragOver<ept id=\"p2\">](../../mfc/reference/cview-class.md#cview__ondragover)</ept>.","pos":[3815,4033],"source":" Typically, this is the value returned by the most recent call to [CView::OnDragEnter](../../mfc/reference/cview-class.md#cview__ondragenter) or [CView::OnDragOver](../../mfc/reference/cview-class.md#cview__ondragover)."},{"content":"It can be one or more of the following:","pos":[4034,4073]},{"pos":[4081,4127],"content":"<ph id=\"ph1\">`DROPEFFECT_NONE`</ph> A drop would not be allowed.","source":"`DROPEFFECT_NONE` A drop would not be allowed."},{"pos":[4135,4189],"content":"<ph id=\"ph1\">`DROPEFFECT_COPY`</ph> A copy operation would be performed.","source":"`DROPEFFECT_COPY` A copy operation would be performed."},{"pos":[4197,4251],"content":"<ph id=\"ph1\">`DROPEFFECT_MOVE`</ph> A move operation would be performed.","source":"`DROPEFFECT_MOVE` A move operation would be performed."},{"pos":[4259,4348],"content":"<ph id=\"ph1\">`DROPEFFECT_LINK`</ph> A link from the dropped data to the original data would be established.","source":"`DROPEFFECT_LINK` A link from the dropped data to the original data would be established."},{"pos":[4356,4448],"content":"<ph id=\"ph1\">`DROPEFFECT_SCROLL`</ph> A drag scroll operation is about to occur or is occurring in the target.","source":"`DROPEFFECT_SCROLL` A drag scroll operation is about to occur or is occurring in the target."},{"pos":[4458,4470],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4474,4568],"content":"Returns <bpt id=\"p1\">**</bpt>DRAGDROP_S_USEDEFAULTCURSORS<ept id=\"p1\">**</ept> if dragging is in progress, <bpt id=\"p2\">**</bpt>NOERROR<ept id=\"p2\">**</ept> if it is not.","source":"Returns **DRAGDROP_S_USEDEFAULTCURSORS** if dragging is in progress, **NOERROR** if it is not."},{"pos":[4578,4585],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function to provide feedback to the user about what would happen if a drop occurred at this point.","pos":[4589,4701]},{"content":"The default implementation uses the OLE default cursors.","pos":[4702,4758]},{"content":"For more information on drag-and-drop operations using OLE, see the article <bpt id=\"p1\">[</bpt>Drag and Drop (OLE)<ept id=\"p1\">](../../mfc/drag-and-drop-ole.md)</ept>.","pos":[4759,4889],"source":" For more information on drag-and-drop operations using OLE, see the article [Drag and Drop (OLE)](../../mfc/drag-and-drop-ole.md)."},{"pos":[4896,5244],"content":"For more information, see <bpt id=\"p1\">[</bpt>IDropSource::GiveFeedback<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms693723)</ept>, <bpt id=\"p2\">[</bpt>IDropTarget::DragOver<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms680129)</ept>, and <bpt id=\"p3\">[</bpt>IDropTarget::DragEnter<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms680106)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see [IDropSource::GiveFeedback](http://msdn.microsoft.com/library/windows/desktop/ms693723), [IDropTarget::DragOver](http://msdn.microsoft.com/library/windows/desktop/ms680129), and [IDropTarget::DragEnter](http://msdn.microsoft.com/library/windows/desktop/ms680106) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[5254,5325],"content":"<bpt id=\"p1\">&lt;a name=\"coledropsource__onbegindrag\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleDropSource::OnBeginDrag","linkify":"<a name=\"coledropsource__onbegindrag\"></a>  COleDropSource::OnBeginDrag","source":"<a name=\"coledropsource__onbegindrag\"></a>  COleDropSource::OnBeginDrag"},{"content":"Called by the framework when an event occurs that could begin a drag operation, such as pressing the left mouse button.","pos":[5329,5448]},{"pos":[5511,5521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the window that contains the selected data.","pos":[5535,5588]},{"pos":[5598,5610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if dragging is allowed, otherwise 0.","pos":[5614,5658]},{"pos":[5668,5675],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function if you want to modify the way the dragging process is started.","pos":[5679,5764]},{"content":"The default implementation captures the mouse and stays in drag mode until the user clicks the left or right mouse button or hits ESC, at which time it releases the mouse.","pos":[5765,5936]},{"pos":[5946,6029],"content":"<bpt id=\"p1\">&lt;a name=\"coledropsource__querycontinuedrag\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  COleDropSource::QueryContinueDrag","linkify":"<a name=\"coledropsource__querycontinuedrag\"></a>  COleDropSource::QueryContinueDrag","source":"<a name=\"coledropsource__querycontinuedrag\"></a>  COleDropSource::QueryContinueDrag"},{"content":"After dragging has begun, this function is called repeatedly by the framework until the drag operation is either canceled or completed.","pos":[6033,6168]},{"pos":[6270,6280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>bEscapePressed<ept id=\"p1\">*</ept>","pos":[6284,6300],"source":"*bEscapePressed*"},{"content":"States whether the ESC key has been pressed since the last call to <ph id=\"ph1\">`COleDropSource::QueryContinueDrag`</ph>.","pos":[6304,6407],"source":" States whether the ESC key has been pressed since the last call to `COleDropSource::QueryContinueDrag`."},{"content":"Contains the state of the modifier keys on the keyboard.","pos":[6430,6486]},{"content":"This is a combination of any number of the following: <bpt id=\"p1\">**</bpt>MK_CONTROL<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>MK_SHIFT<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>MK_ALT<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>MK_LBUTTON<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>MK_MBUTTON<ept id=\"p5\">**</ept>, and <bpt id=\"p6\">**</bpt>MK_RBUTTON<ept id=\"p6\">**</ept>.","pos":[6487,6634],"source":" This is a combination of any number of the following: **MK_CONTROL**, **MK_SHIFT**, **MK_ALT**, **MK_LBUTTON**, **MK_MBUTTON**, and **MK_RBUTTON**."},{"pos":[6644,6656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<bpt id=\"p1\">**</bpt>DRAGDROP_S_CANCEL<ept id=\"p1\">**</ept> if the ESC key or right button is pressed, or left button is raised before dragging starts.","pos":[6660,6773],"source":"**DRAGDROP_S_CANCEL** if the ESC key or right button is pressed, or left button is raised before dragging starts."},{"content":"<bpt id=\"p1\">**</bpt>DRAGDROP_S_DROP<ept id=\"p1\">**</ept> if a drop operation should occur.","pos":[6774,6827],"source":"**DRAGDROP_S_DROP** if a drop operation should occur."},{"content":"Otherwise <ph id=\"ph1\">`S_OK`</ph>.","pos":[6828,6845],"source":" Otherwise `S_OK`."},{"pos":[6855,6862],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this function if you want to change the point at which dragging is canceled or a drop occurs.","pos":[6866,6968]},{"content":"The default implementation initiates the drop or cancels the drag as follows.","pos":[6975,7052]},{"content":"It cancels a drag operation when the ESC key or the right mouse button is pressed.","pos":[7053,7135]},{"content":"It initiates a drop operation when the left mouse button is raised after dragging has started.","pos":[7136,7230]},{"content":"Otherwise, it returns <ph id=\"ph1\">`S_OK`</ph> and performs no further operations.","pos":[7231,7295],"source":" Otherwise, it returns `S_OK` and performs no further operations."},{"content":"Because this function is called frequently, it should be optimized as much as possible.","pos":[7302,7389]},{"pos":[7398,7406],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample HIERSVR<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[7410,7460],"source":"[MFC Sample HIERSVR](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>MFC Sample OCLIENT<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[7463,7514],"source":" [MFC Sample OCLIENT](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CCmdTarget Class<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[7517,7578],"source":" [CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept>","pos":[7581,7629],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md)"}],"content":"---\ntitle: \"COleDropSource Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"COleDropSource\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"drag operations\"\n  - \"drop target, dragging data to\"\n  - \"COleDropSource class\"\n  - \"drag and drop, drop source\"\nms.assetid: d3eecc5f-a70b-4a01-b705-7d2c098ebe17\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# COleDropSource Class\nAllows data to be dragged to a drop target.  \n  \n## Syntax  \n  \n```  \nclass COleDropSource : public CCmdTarget  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleDropSource::COleDropSource](#coledropsource__coledropsource)|Constructs a `COleDropSource` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleDropSource::GiveFeedback](#coledropsource__givefeedback)|Changes the cursor during a drag-and-drop operation.|  \n|[COleDropSource::OnBeginDrag](#coledropsource__onbegindrag)|Handles mouse capture during a drag-and-drop operation.|  \n|[COleDropSource::QueryContinueDrag](#coledropsource__querycontinuedrag)|Checks to see whether dragging should continue.|  \n  \n## Remarks  \n The [COleDropTarget](../../mfc/reference/coledroptarget-class.md) class handles the receiving portion of the drag-and-drop operation. The `COleDropSource` object is responsible for determining when a drag operation begins, providing feedback during the drag operation, and determining when the drag operation ends.  \n  \n To use a `COleDropSource` object, just call the constructor. This simplifies the process of determining what events, such as a mouse click, begin a drag operation using [COleDataSource::DoDragDrop](../../mfc/reference/coledatasource-class.md#coledatasource__dodragdrop), [COleClientItem::DoDragDrop](../../mfc/reference/coleclientitem-class.md#coleclientitem__dodragdrop), or [COleServerItem::DoDragDrop](../../mfc/reference/coleserveritem-class.md#coleserveritem__dodragdrop) function. These functions will create a `COleDropSource` object for you. You might want to modify the default behavior of the `COleDropSource` overridable functions. These member functions will be called at the appropriate times by the framework.  \n  \n For more information on drag-and-drop operations using OLE, see the article [Drag and Drop (OLE)](../../mfc/drag-and-drop-ole.md).  \n  \n For more information, see [IDropSource](http://msdn.microsoft.com/library/windows/desktop/ms690071) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n `COleDropSource`  \n  \n## Requirements  \n **Header:** afxole.h  \n  \n##  <a name=\"coledropsource__coledropsource\"></a>  COleDropSource::COleDropSource  \n Constructs a `COleDropSource` object.  \n  \n```  \nCOleDropSource();\n```  \n  \n##  <a name=\"coledropsource__givefeedback\"></a>  COleDropSource::GiveFeedback  \n Called by the framework after calling [COleDropTarget::OnDragOver](../../mfc/reference/coledroptarget-class.md#coledroptarget__ondragover) or [COleDropTarget::DragEnter](../../mfc/reference/coledroptarget-class.md#coledroptarget__ondragenter).  \n  \n```  \nvirtual SCODE GiveFeedback(DROPEFFECT dropEffect);\n```  \n  \n### Parameters  \n `dropEffect`  \n The effect you would like to display to the user, usually indicating what would happen if a drop occurred at this point with the selected data. Typically, this is the value returned by the most recent call to [CView::OnDragEnter](../../mfc/reference/cview-class.md#cview__ondragenter) or [CView::OnDragOver](../../mfc/reference/cview-class.md#cview__ondragover). It can be one or more of the following:  \n  \n- `DROPEFFECT_NONE` A drop would not be allowed.  \n  \n- `DROPEFFECT_COPY` A copy operation would be performed.  \n  \n- `DROPEFFECT_MOVE` A move operation would be performed.  \n  \n- `DROPEFFECT_LINK` A link from the dropped data to the original data would be established.  \n  \n- `DROPEFFECT_SCROLL` A drag scroll operation is about to occur or is occurring in the target.  \n  \n### Return Value  \n Returns **DRAGDROP_S_USEDEFAULTCURSORS** if dragging is in progress, **NOERROR** if it is not.  \n  \n### Remarks  \n Override this function to provide feedback to the user about what would happen if a drop occurred at this point. The default implementation uses the OLE default cursors. For more information on drag-and-drop operations using OLE, see the article [Drag and Drop (OLE)](../../mfc/drag-and-drop-ole.md).  \n  \n For more information, see [IDropSource::GiveFeedback](http://msdn.microsoft.com/library/windows/desktop/ms693723), [IDropTarget::DragOver](http://msdn.microsoft.com/library/windows/desktop/ms680129), and [IDropTarget::DragEnter](http://msdn.microsoft.com/library/windows/desktop/ms680106) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"coledropsource__onbegindrag\"></a>  COleDropSource::OnBeginDrag  \n Called by the framework when an event occurs that could begin a drag operation, such as pressing the left mouse button.  \n  \n```  \nvirtual BOOL OnBeginDrag(CWnd* pWnd);\n```  \n  \n### Parameters  \n `pWnd`  \n Points to the window that contains the selected data.  \n  \n### Return Value  \n Nonzero if dragging is allowed, otherwise 0.  \n  \n### Remarks  \n Override this function if you want to modify the way the dragging process is started. The default implementation captures the mouse and stays in drag mode until the user clicks the left or right mouse button or hits ESC, at which time it releases the mouse.  \n  \n##  <a name=\"coledropsource__querycontinuedrag\"></a>  COleDropSource::QueryContinueDrag  \n After dragging has begun, this function is called repeatedly by the framework until the drag operation is either canceled or completed.  \n  \n```  \nvirtual SCODE QueryContinueDrag(\n    BOOL bEscapePressed, DWORD dwKeyState);\n```  \n  \n### Parameters  \n *bEscapePressed*  \n States whether the ESC key has been pressed since the last call to `COleDropSource::QueryContinueDrag`.  \n  \n `dwKeyState`  \n Contains the state of the modifier keys on the keyboard. This is a combination of any number of the following: **MK_CONTROL**, **MK_SHIFT**, **MK_ALT**, **MK_LBUTTON**, **MK_MBUTTON**, and **MK_RBUTTON**.  \n  \n### Return Value  \n **DRAGDROP_S_CANCEL** if the ESC key or right button is pressed, or left button is raised before dragging starts. **DRAGDROP_S_DROP** if a drop operation should occur. Otherwise `S_OK`.  \n  \n### Remarks  \n Override this function if you want to change the point at which dragging is canceled or a drop occurs.  \n  \n The default implementation initiates the drop or cancels the drag as follows. It cancels a drag operation when the ESC key or the right mouse button is pressed. It initiates a drop operation when the left mouse button is raised after dragging has started. Otherwise, it returns `S_OK` and performs no further operations.  \n  \n Because this function is called frequently, it should be optimized as much as possible.  \n  \n## See Also  \n [MFC Sample HIERSVR](../../visual-cpp-samples.md)   \n [MFC Sample OCLIENT](../../visual-cpp-samples.md)   \n [CCmdTarget Class](../../mfc/reference/ccmdtarget-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}