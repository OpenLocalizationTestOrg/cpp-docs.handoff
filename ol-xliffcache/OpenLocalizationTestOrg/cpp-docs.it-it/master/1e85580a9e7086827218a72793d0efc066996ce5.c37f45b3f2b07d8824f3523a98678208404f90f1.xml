{"nodes":[{"pos":[12,55],"content":"call_in_appdomain Function | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"call_in_appdomain Function | Microsoft Docs","pos":[0,43]}]},{"content":"call_in_appdomain Function","pos":[631,657]},{"content":"Executes a function in a specified application domain.","pos":[658,712]},{"content":"Syntax","pos":[721,727]},{"content":"Parameters","pos":[1194,1204]},{"content":"The appdomain in which to call the function.","pos":[1225,1269]},{"content":"Pointer to a <ph id=\"ph1\">`void`</ph> function that takes N parameters (0 &lt;= N &lt;= 15).","pos":[1290,1358],"source":" Pointer to a `void` function that takes N parameters (0 <= N <= 15)."},{"content":"Pointer to a non-<ph id=\"ph1\">`void`</ph> function that takes N parameters (0 &lt;= N &lt;= 15).","pos":[1382,1454],"source":" Pointer to a non-`void` function that takes N parameters (0 <= N <= 15)."},{"content":"Zero to 15 parameters to be passed to <ph id=\"ph1\">`voidFunc`</ph> or <ph id=\"ph2\">`nonvoidFunc`</ph> in the other appdomain.","pos":[1478,1567],"source":" Zero to 15 parameters to be passed to `voidFunc` or `nonvoidFunc` in the other appdomain."},{"content":"Return Value","pos":[1576,1588]},{"pos":[1592,1680],"content":"The result of executing <ph id=\"ph1\">`voidFunc`</ph> or <ph id=\"ph2\">`nonvoidFunc`</ph> in the specified application domain.","source":"The result of executing `voidFunc` or `nonvoidFunc` in the specified application domain."},{"content":"Remarks","pos":[1689,1696]},{"pos":[1700,1782],"content":"The arguments of the function passed to <ph id=\"ph1\">`call_in_appdomain`</ph> must not be CLR types.","source":"The arguments of the function passed to `call_in_appdomain` must not be CLR types."},{"content":"Example","pos":[1791,1798]},{"content":"Output","pos":[3117,3123]},{"content":"Requirements","pos":[3271,3283]},{"pos":[3287,3323],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\appdomain.h&gt;","source":"**Header file** \\<msclr\\appdomain.h>"},{"pos":[3330,3349],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr","source":"**Namespace** msclr"}],"content":"---\ntitle: \"call_in_appdomain Function | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"call_in_appdomain\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"call_in_appdomain function\"\nms.assetid: 9a1a5026-b76b-4cae-a3d4-29badeb9db9c\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# call_in_appdomain Function\nExecutes a function in a specified application domain.  \n  \n## Syntax  \n  \n```  \ntemplate <typename ArgType1, ...typename ArgTypeN>  \nvoid call_in_appdomain(  \n   DWORD appdomainId,  \n   void (*voidFunc)(ArgType1, ...ArgTypeN) [ ,  \n   ArgType1 arg1,  \n   ...  \n   ArgTypeN argN ]  \n);  \ntemplate <typename RetType, typename ArgType1, ...typename ArgTypeN>  \nRetType call_in_appdomain(  \n   DWORD appdomainId,  \n   RetType (*nonvoidFunc)(ArgType1, ...ArgTypeN) [ ,  \n   ArgType1 arg1,  \n   ...  \n   ArgTypeN argN ]  \n);  \n```  \n  \n#### Parameters  \n `appdomainId`  \n The appdomain in which to call the function.  \n  \n `voidFunc`  \n Pointer to a `void` function that takes N parameters (0 <= N <= 15).  \n  \n `nonvoidFunc`  \n Pointer to a non-`void` function that takes N parameters (0 <= N <= 15).  \n  \n `arg1...argN`  \n Zero to 15 parameters to be passed to `voidFunc` or `nonvoidFunc` in the other appdomain.  \n  \n## Return Value  \n The result of executing `voidFunc` or `nonvoidFunc` in the specified application domain.  \n  \n## Remarks  \n The arguments of the function passed to `call_in_appdomain` must not be CLR types.  \n  \n## Example  \n  \n```  \n// msl_call_in_appdomain.cpp  \n// compile with: /clr  \n  \n// Defines two functions: one takes a parameter and returns nothing,  \n// the other takes no parameters and returns an int.  Calls both  \n// functions in the default appdomain and in a newly-created  \n// application domain using call_in_appdomain.  \n  \n#include <msclr\\appdomain.h>  \n  \nusing namespace System;  \nusing namespace msclr;  \n  \nvoid PrintCurrentDomainName( char* format )  \n{  \n   String^ s = gcnew String(format);  \n   Console::WriteLine( s, AppDomain::CurrentDomain->FriendlyName );  \n}  \n  \nint GetDomainId()  \n{  \n   return AppDomain::CurrentDomain->Id;  \n}  \n  \nint main()  \n{  \n   AppDomain^ appDomain1 = AppDomain::CreateDomain( \"First Domain\" );  \n  \n   call_in_appdomain( AppDomain::CurrentDomain->Id,  \n                   &PrintCurrentDomainName,  \n                   (char*)\"default appdomain: {0}\" );  \n   call_in_appdomain( appDomain1->Id,  \n                   &PrintCurrentDomainName,  \n                   (char*)\"in appDomain1: {0}\" );  \n  \n   int id;  \n   id = call_in_appdomain( AppDomain::CurrentDomain->Id, &GetDomainId );  \n   Console::WriteLine( \"default appdomain id = {0}\", id );  \n   id = call_in_appdomain( appDomain1->Id, &GetDomainId );  \n   Console::WriteLine( \"appDomain1 id = {0}\", id );  \n}  \n```  \n  \n## Output  \n  \n```  \ndefault appdomain: msl_call_in_appdomain.exe  \nin appDomain1: First Domain  \ndefault appdomain id = 1  \nappDomain1 id = 2  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\appdomain.h>  \n  \n **Namespace** msclr"}