{"nodes":[{"pos":[12,45],"content":"CGdiObject Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CGdiObject Class | Microsoft Docs","pos":[0,33]}]},{"content":"CGdiObject Class","pos":[784,800]},{"content":"Provides a base class for various kinds of Windows graphics device interface (GDI) objects such as bitmaps, regions, brushes, pens, palettes, and fonts.","pos":[801,953]},{"content":"Syntax","pos":[962,968]},{"content":"Members","pos":[1028,1035]},{"content":"Public Constructors","pos":[1045,1064]},{"content":"Name","pos":[1071,1075]},{"content":"Description","pos":[1076,1087]},{"content":"CGdiObject::CGdiObject","pos":[1126,1148]},{"pos":[1175,1208],"content":"Constructs a <ph id=\"ph1\">`CGdiObject`</ph> object.","source":"Constructs a `CGdiObject` object."},{"content":"Public Methods","pos":[1219,1233]},{"content":"Name","pos":[1240,1244]},{"content":"Description","pos":[1245,1256]},{"content":"CGdiObject::Attach","pos":[1295,1313]},{"pos":[1336,1391],"content":"Attaches a Windows GDI object to a <ph id=\"ph1\">`CGdiObject`</ph> object.","source":"Attaches a Windows GDI object to a `CGdiObject` object."},{"content":"CGdiObject::CreateStockObject","pos":[1397,1426]},{"content":"Retrieves a handle to one of the Windows predefined stock pens, brushes, or fonts.","pos":[1460,1542]},{"content":"CGdiObject::DeleteObject","pos":[1548,1572]},{"pos":[1601,1737],"content":"Deletes the Windows GDI object attached to the <ph id=\"ph1\">`CGdiObject`</ph> object from memory by freeing all system storage associated with the object.","source":"Deletes the Windows GDI object attached to the `CGdiObject` object from memory by freeing all system storage associated with the object."},{"content":"CGdiObject::DeleteTempMap","pos":[1743,1768]},{"pos":[1798,1865],"content":"Deletes any temporary <ph id=\"ph1\">`CGdiObject`</ph> objects created by <ph id=\"ph2\">`FromHandle`</ph>.","source":"Deletes any temporary `CGdiObject` objects created by `FromHandle`."},{"content":"CGdiObject::Detach","pos":[1871,1889]},{"pos":[1912,2016],"content":"Detaches a Windows GDI object from a <ph id=\"ph1\">`CGdiObject`</ph> object and returns a handle to the Windows GDI object.","source":"Detaches a Windows GDI object from a `CGdiObject` object and returns a handle to the Windows GDI object."},{"content":"CGdiObject::FromHandle","pos":[2022,2044]},{"pos":[2071,2153],"content":"Returns a pointer to a <ph id=\"ph1\">`CGdiObject`</ph> object given a handle to a Windows GDI object.","source":"Returns a pointer to a `CGdiObject` object given a handle to a Windows GDI object."},{"content":"CGdiObject::GetObject","pos":[2159,2180]},{"pos":[2206,2305],"content":"Fills a buffer with data that describes the Windows GDI object attached to the <ph id=\"ph1\">`CGdiObject`</ph> object.","source":"Fills a buffer with data that describes the Windows GDI object attached to the `CGdiObject` object."},{"content":"CGdiObject::GetObjectType","pos":[2311,2336]},{"content":"Retrieves the type of the GDI object.","pos":[2366,2403]},{"content":"CGdiObject::GetSafeHandle","pos":[2409,2434]},{"pos":[2464,2542],"content":"Returns <ph id=\"ph1\">`m_hObject`</ph> unless <ph id=\"ph2\">`this`</ph> is <ph id=\"ph3\">`NULL`</ph>, in which case <ph id=\"ph4\">`NULL`</ph> is returned.","source":"Returns `m_hObject` unless `this` is `NULL`, in which case `NULL` is returned."},{"content":"CGdiObject::UnrealizeObject","pos":[2548,2575]},{"content":"Resets the origin of a brush or resets a logical palette.","pos":[2607,2664]},{"content":"Public Operators","pos":[2675,2691]},{"content":"Name","pos":[2698,2702]},{"content":"Description","pos":[2703,2714]},{"content":"CGdiObject::operator !=","pos":[2753,2776]},{"content":"Determines if two GDI objects are logically not equal.","pos":[2806,2860]},{"content":"CGdiObject::operator ==","pos":[2866,2889]},{"content":"Determines if two GDI objects are logically equal.","pos":[2921,2971]},{"content":"CGdiObject::operator HGDIOBJ","pos":[2977,3005]},{"pos":[3038,3094],"content":"Retrieves a <ph id=\"ph1\">`HANDLE`</ph> to the attached Windows GDI object.","source":"Retrieves a `HANDLE` to the attached Windows GDI object."},{"content":"Public Data Members","pos":[3105,3124]},{"content":"Name","pos":[3131,3135]},{"content":"Description","pos":[3136,3147]},{"content":"CGdiObject::m_hObject","pos":[3186,3207]},{"pos":[3233,3343],"content":"A <ph id=\"ph1\">`HANDLE`</ph> containing the <ph id=\"ph2\">`HBITMAP`</ph>, <ph id=\"ph3\">`HPALETTE`</ph>, <ph id=\"ph4\">`HRGN`</ph>, <ph id=\"ph5\">`HBRUSH`</ph>, <ph id=\"ph6\">`HPEN`</ph>, or <ph id=\"ph7\">`HFONT`</ph> attached to this object.","source":"A `HANDLE` containing the `HBITMAP`, `HPALETTE`, `HRGN`, `HBRUSH`, `HPEN`, or `HFONT` attached to this object."},{"content":"Remarks","pos":[3353,3360]},{"content":"You never create a <ph id=\"ph1\">`CGdiObject`</ph> directly.","pos":[3364,3405],"source":"You never create a `CGdiObject` directly."},{"content":"Rather, you create an object from one of its derived classes, such as <ph id=\"ph1\">`CPen`</ph> or <ph id=\"ph2\">`CBrush`</ph>.","pos":[3406,3495],"source":" Rather, you create an object from one of its derived classes, such as `CPen` or `CBrush`."},{"pos":[3502,3592],"content":"For more information on <ph id=\"ph1\">`CGdiObject`</ph>, see <bpt id=\"p1\">[</bpt>Graphic Objects<ept id=\"p1\">](../../mfc/graphic-objects.md)</ept>.","source":"For more information on `CGdiObject`, see [Graphic Objects](../../mfc/graphic-objects.md)."},{"content":"Inheritance Hierarchy","pos":[3601,3622]},{"content":"CObject","pos":[3627,3634]},{"content":"Requirements","pos":[3701,3713]},{"pos":[3717,3737],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[3782,3800],"content":"CGdiObject::Attach"},{"pos":[3804,3859],"content":"Attaches a Windows GDI object to a <ph id=\"ph1\">`CGdiObject`</ph> object.","source":"Attaches a Windows GDI object to a `CGdiObject` object."},{"content":"Parameters","pos":[3914,3924]},{"content":"A <ph id=\"ph1\">`HANDLE`</ph> to a Windows GDI object (for example, <ph id=\"ph2\">`HPEN`</ph> or <ph id=\"ph3\">`HBRUSH`</ph>).","pos":[3941,4010],"source":" A `HANDLE` to a Windows GDI object (for example, `HPEN` or `HBRUSH`)."},{"content":"Return Value","pos":[4020,4032]},{"content":"Nonzero if attachment is successful; otherwise 0.","pos":[4036,4085]},{"pos":[4134,4156],"content":"CGdiObject::CGdiObject"},{"pos":[4160,4193],"content":"Constructs a <ph id=\"ph1\">`CGdiObject`</ph> object.","source":"Constructs a `CGdiObject` object."},{"content":"Remarks","pos":[4232,4239]},{"content":"You never create a <ph id=\"ph1\">`CGdiObject`</ph> directly.","pos":[4243,4284],"source":"You never create a `CGdiObject` directly."},{"content":"Rather, you create an object from one of its derived classes, such as <ph id=\"ph1\">`CPen`</ph> or <bpt id=\"p1\">**</bpt>Cbrush<ept id=\"p1\">**</ept>.","pos":[4285,4376],"source":" Rather, you create an object from one of its derived classes, such as `CPen` or **Cbrush**."},{"pos":[4432,4461],"content":"CGdiObject::CreateStockObject"},{"pos":[4465,4607],"content":"Retrieves a handle to one of the predefined stock Windows GDI pens, brushes, or fonts, and attaches the GDI object to the <ph id=\"ph1\">`CGdiObject`</ph> object.","source":"Retrieves a handle to one of the predefined stock Windows GDI pens, brushes, or fonts, and attaches the GDI object to the `CGdiObject` object."},{"content":"Parameters","pos":[4668,4678]},{"content":"A constant specifying the type of stock object desired.","pos":[4694,4749]},{"content":"See the parameter <bpt id=\"p1\">*</bpt>fnObject<ept id=\"p1\">*</ept> for <bpt id=\"p2\">[</bpt>GetStockObject<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd144925)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for a description of appropriate values.","pos":[4750,4959],"source":" See the parameter *fnObject* for [GetStockObject](http://msdn.microsoft.com/library/windows/desktop/dd144925) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for a description of appropriate values."},{"content":"Return Value","pos":[4969,4981]},{"content":"Nonzero if the function is successful; otherwise 0.","pos":[4985,5036]},{"content":"Remarks","pos":[5046,5053]},{"pos":[5057,5188],"content":"Call this function with one of the derived classes that corresponds to the Windows GDI object type, such as <ph id=\"ph1\">`CPen`</ph> for a stock pen.","source":"Call this function with one of the derived classes that corresponds to the Windows GDI object type, such as `CPen` for a stock pen."},{"pos":[5239,5263],"content":"CGdiObject::DeleteObject"},{"content":"Deletes the attached Windows GDI object from memory by freeing all system storage associated with the Windows GDI object.","pos":[5267,5388]},{"content":"Return Value","pos":[5434,5446]},{"content":"Nonzero if the GDI object was successfully deleted; otherwise 0.","pos":[5450,5514]},{"content":"Remarks","pos":[5524,5531]},{"content":"The storage associated with the <ph id=\"ph1\">`CGdiObject`</ph> object is not affected by this call.","pos":[5535,5616],"source":"The storage associated with the `CGdiObject` object is not affected by this call."},{"content":"An application should not call <ph id=\"ph1\">`DeleteObject`</ph> on a <ph id=\"ph2\">`CGdiObject`</ph> object that is currently selected into a device context.","pos":[5617,5737],"source":" An application should not call `DeleteObject` on a `CGdiObject` object that is currently selected into a device context."},{"content":"When a pattern brush is deleted, the bitmap associated with the brush is not deleted.","pos":[5744,5829]},{"content":"The bitmap must be deleted independently.","pos":[5830,5871]},{"pos":[5923,5948],"content":"CGdiObject::DeleteTempMap"},{"pos":[5952,6092],"content":"Called automatically by the <ph id=\"ph1\">`CWinApp`</ph> idle-time handler, <ph id=\"ph2\">`DeleteTempMap`</ph> deletes any temporary <ph id=\"ph3\">`CGdiObject`</ph> objects created by <ph id=\"ph4\">`FromHandle`</ph>.","source":"Called automatically by the `CWinApp` idle-time handler, `DeleteTempMap` deletes any temporary `CGdiObject` objects created by `FromHandle`."},{"content":"Remarks","pos":[6153,6160]},{"pos":[6180,6296],"content":"detaches the Windows GDI object attached to a temporary <ph id=\"ph1\">`CGdiObject`</ph> object before deleting the <ph id=\"ph2\">`CGdiObject`</ph> object.","source":" detaches the Windows GDI object attached to a temporary `CGdiObject` object before deleting the `CGdiObject` object."},{"content":"Example","pos":[6306,6313]},{"pos":[6328,6346],"content":"NVC_MFCDocView#175"},{"pos":[6443,6461],"content":"CGdiObject::Detach"},{"pos":[6465,6569],"content":"Detaches a Windows GDI object from a <ph id=\"ph1\">`CGdiObject`</ph> object and returns a handle to the Windows GDI object.","source":"Detaches a Windows GDI object from a `CGdiObject` object and returns a handle to the Windows GDI object."},{"content":"Return Value","pos":[6612,6624]},{"pos":[6628,6723],"content":"A <ph id=\"ph1\">`HANDLE`</ph> to the Windows GDI object detached; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no GDI object is attached.","source":"A `HANDLE` to the Windows GDI object detached; otherwise **NULL** if no GDI object is attached."},{"pos":[6772,6794],"content":"CGdiObject::FromHandle"},{"pos":[6798,6880],"content":"Returns a pointer to a <ph id=\"ph1\">`CGdiObject`</ph> object given a handle to a Windows GDI object.","source":"Returns a pointer to a `CGdiObject` object given a handle to a Windows GDI object."},{"content":"Parameters","pos":[6960,6970]},{"content":"A <ph id=\"ph1\">`HANDLE`</ph> to a Windows GDI object.","pos":[6987,7022],"source":" A `HANDLE` to a Windows GDI object."},{"content":"Return Value","pos":[7032,7044]},{"pos":[7048,7111],"content":"A pointer to a <ph id=\"ph1\">`CGdiObject`</ph> that may be temporary or permanent.","source":"A pointer to a `CGdiObject` that may be temporary or permanent."},{"content":"Remarks","pos":[7121,7128]},{"pos":[7132,7264],"content":"If a <ph id=\"ph1\">`CGdiObject`</ph> object is not already attached to the Windows GDI object, a temporary <ph id=\"ph2\">`CGdiObject`</ph> object is created and attached.","source":"If a `CGdiObject` object is not already attached to the Windows GDI object, a temporary `CGdiObject` object is created and attached."},{"content":"This temporary <ph id=\"ph1\">`CGdiObject`</ph> object is only valid until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted.","pos":[7271,7445],"source":"This temporary `CGdiObject` object is only valid until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted."},{"content":"Another way of saying this is that the temporary object is only valid during the processing of one window message.","pos":[7446,7560]},{"pos":[7608,7629],"content":"CGdiObject::GetObject"},{"content":"Fills a buffer with data that defines a specified object.","pos":[7633,7690]},{"content":"Parameters","pos":[7779,7789]},{"content":"Specifies the number of bytes to copy into the <ph id=\"ph1\">`lpObject`</ph> buffer.","pos":[7805,7870],"source":" Specifies the number of bytes to copy into the `lpObject` buffer."},{"content":"Points to a user-supplied buffer that is to receive the information.","pos":[7891,7959]},{"content":"Return Value","pos":[7969,7981]},{"content":"The number of bytes retrieved; otherwise 0 if an error occurs.","pos":[7985,8047]},{"content":"Remarks","pos":[8057,8064]},{"content":"The function retrieves a data structure whose type depends on the type of graphic object, as shown by the following list:","pos":[8068,8189]},{"content":"Object","pos":[8196,8202]},{"content":"Buffer type","pos":[8203,8214]},{"content":"LOGPEN","pos":[8262,8268]},{"content":"LOGBRUSH","pos":[8325,8333]},{"content":"LOGFONT","pos":[8391,8398]},{"content":"BITMAP","pos":[8475,8481]},{"content":"WORD","pos":[8541,8545]},{"content":"Not supported","pos":[8559,8572]},{"content":"If the object is a <ph id=\"ph1\">`CBitmap`</ph> object, <ph id=\"ph2\">`GetObject`</ph> returns only the width, height, and color format information of the bitmap.","pos":[8580,8704],"source":"If the object is a `CBitmap` object, `GetObject` returns only the width, height, and color format information of the bitmap."},{"content":"The actual bits can be retrieved by using <bpt id=\"p1\">[</bpt>CBitmap::GetBitmapBits<ept id=\"p1\">](../../mfc/reference/cbitmap-class.md#cbitmap__getbitmapbits)</ept>.","pos":[8705,8833],"source":" The actual bits can be retrieved by using [CBitmap::GetBitmapBits](../../mfc/reference/cbitmap-class.md#cbitmap__getbitmapbits)."},{"content":"If the object is a <ph id=\"ph1\">`CPalette`</ph> object, <ph id=\"ph2\">`GetObject`</ph> retrieves a <bpt id=\"p1\">**</bpt>WORD<ept id=\"p1\">**</ept> that specifies the number of entries in the palette.","pos":[8840,8963],"source":"If the object is a `CPalette` object, `GetObject` retrieves a **WORD** that specifies the number of entries in the palette."},{"content":"The function does not retrieve the <bpt id=\"p1\">[</bpt>LOGPALETTE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145040)</ept> structure that defines the palette.","pos":[8964,9107],"source":" The function does not retrieve the [LOGPALETTE](http://msdn.microsoft.com/library/windows/desktop/dd145040) structure that defines the palette."},{"content":"An application can get information on palette entries by calling <bpt id=\"p1\">[</bpt>CPalette::GetPaletteEntries<ept id=\"p1\">](../../mfc/reference/cpalette-class.md#cpalette__getpaletteentries)</ept>.","pos":[9108,9270],"source":" An application can get information on palette entries by calling [CPalette::GetPaletteEntries](../../mfc/reference/cpalette-class.md#cpalette__getpaletteentries)."},{"pos":[9322,9347],"content":"CGdiObject::GetObjectType"},{"content":"Retrieves the type of the GDI object.","pos":[9351,9388]},{"content":"Return Value","pos":[9444,9456]},{"content":"The type of the object, if successful; otherwise 0.","pos":[9460,9511]},{"content":"The value can be one of the following:","pos":[9512,9550]},{"pos":[9558,9579],"content":"<bpt id=\"p1\">**</bpt>OBJ_BITMAP<ept id=\"p1\">**</ept> Bitmap","source":"**OBJ_BITMAP** Bitmap"},{"pos":[9587,9606],"content":"<bpt id=\"p1\">**</bpt>OBJ_BRUSH<ept id=\"p1\">**</ept> Brush","source":"**OBJ_BRUSH** Brush"},{"pos":[9614,9631],"content":"<bpt id=\"p1\">**</bpt>OBJ_FONT<ept id=\"p1\">**</ept> Font","source":"**OBJ_FONT** Font"},{"pos":[9639,9658],"content":"<bpt id=\"p1\">**</bpt>OBJ_PAL<ept id=\"p1\">**</ept> Palette","source":"**OBJ_PAL** Palette"},{"pos":[9666,9681],"content":"<bpt id=\"p1\">**</bpt>OBJ_PEN<ept id=\"p1\">**</ept> Pen","source":"**OBJ_PEN** Pen"},{"pos":[9689,9716],"content":"<bpt id=\"p1\">**</bpt>OBJ_EXTPEN<ept id=\"p1\">**</ept> Extended pen","source":"**OBJ_EXTPEN** Extended pen"},{"pos":[9724,9745],"content":"<bpt id=\"p1\">**</bpt>OBJ_REGION<ept id=\"p1\">**</ept> Region","source":"**OBJ_REGION** Region"},{"pos":[9753,9778],"content":"<bpt id=\"p1\">**</bpt>OBJ_DC<ept id=\"p1\">**</ept> Device context","source":"**OBJ_DC** Device context"},{"pos":[9786,9821],"content":"<bpt id=\"p1\">**</bpt>OBJ_MEMDC<ept id=\"p1\">**</ept> Memory device context","source":"**OBJ_MEMDC** Memory device context"},{"pos":[9829,9854],"content":"<bpt id=\"p1\">**</bpt>OBJ_METAFILE<ept id=\"p1\">**</ept> Metafile","source":"**OBJ_METAFILE** Metafile"},{"pos":[9862,9900],"content":"<bpt id=\"p1\">**</bpt>OBJ_METADC<ept id=\"p1\">**</ept> Metafile device context","source":"**OBJ_METADC** Metafile device context"},{"pos":[9908,9945],"content":"<bpt id=\"p1\">**</bpt>OBJ_ENHMETAFILE<ept id=\"p1\">**</ept> Enhanced metafile","source":"**OBJ_ENHMETAFILE** Enhanced metafile"},{"pos":[9953,10003],"content":"<bpt id=\"p1\">**</bpt>OBJ_ENHMETADC<ept id=\"p1\">**</ept> Enhanced-metafile device context","source":"**OBJ_ENHMETADC** Enhanced-metafile device context"},{"pos":[10055,10080],"content":"CGdiObject::GetSafeHandle"},{"pos":[10084,10168],"content":"Returns <ph id=\"ph1\">`m_hObject`</ph> unless <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>, in which case <bpt id=\"p3\">**</bpt>NULL<ept id=\"p3\">**</ept> is returned.","source":"Returns `m_hObject` unless **this** is **NULL**, in which case **NULL** is returned."},{"content":"Return Value","pos":[10227,10239]},{"pos":[10243,10334],"content":"A <ph id=\"ph1\">`HANDLE`</ph> to the attached Windows GDI object; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no object is attached.","source":"A `HANDLE` to the attached Windows GDI object; otherwise **NULL** if no object is attached."},{"content":"Remarks","pos":[10344,10351]},{"pos":[10355,10478],"content":"This is part of the general handle interface paradigm and is useful when <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> is a valid or special value for a handle.","source":"This is part of the general handle interface paradigm and is useful when **NULL** is a valid or special value for a handle."},{"content":"Example","pos":[10488,10495]},{"pos":[10500,10601],"content":"See the example for <bpt id=\"p1\">[</bpt>CWnd::IsWindowEnabled<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__iswindowenabled)</ept>.","source":"See the example for [CWnd::IsWindowEnabled](../../mfc/reference/cwnd-class.md#cwnd__iswindowenabled)."},{"pos":[10649,10670],"content":"CGdiObject::m_hObject"},{"pos":[10674,10788],"content":"A <ph id=\"ph1\">`HANDLE`</ph> containing the <ph id=\"ph2\">`HBITMAP`</ph>, <bpt id=\"p1\">**</bpt>HRGN<ept id=\"p1\">**</ept>, <ph id=\"ph3\">`HBRUSH`</ph>, <ph id=\"ph4\">`HPEN`</ph>, <ph id=\"ph5\">`HPALETTE`</ph>, or <bpt id=\"p2\">**</bpt>HFONT<ept id=\"p2\">**</ept> attached to this object.","source":"A `HANDLE` containing the `HBITMAP`, **HRGN**, `HBRUSH`, `HPEN`, `HPALETTE`, or **HFONT** attached to this object."},{"pos":[10876,10899],"content":"CGdiObject::operator !="},{"content":"Determines if two GDI objects are logically not equal.","pos":[10903,10957]},{"content":"Parameters","pos":[11031,11041]},{"content":"A pointer to an existing <ph id=\"ph1\">`CGdiObject`</ph>.","pos":[11054,11092],"source":" A pointer to an existing `CGdiObject`."},{"content":"Remarks","pos":[11102,11109]},{"content":"Determines if a GDI object on the left side is not equal to a GDI object on the right side.","pos":[11113,11204]},{"pos":[11258,11281],"content":"CGdiObject::operator =="},{"content":"Determines if two GDI objects are logically equal.","pos":[11285,11335]},{"content":"Parameters","pos":[11409,11419]},{"content":"A reference to an existing <ph id=\"ph1\">`CGdiObject`</ph>.","pos":[11432,11472],"source":" A reference to an existing `CGdiObject`."},{"content":"Remarks","pos":[11482,11489]},{"content":"Determines if a GDI object on the left side is equal to a GDI object on the right side.","pos":[11493,11580]},{"pos":[11635,11663],"content":"CGdiObject::operator HGDIOBJ"},{"pos":[11667,11768],"content":"Retrieves a <ph id=\"ph1\">`HANDLE`</ph> to the attached Windows GDI object; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no object is attached.","source":"Retrieves a `HANDLE` to the attached Windows GDI object; otherwise **NULL** if no object is attached."},{"pos":[11866,11893],"content":"CGdiObject::UnrealizeObject"},{"content":"Resets the origin of a brush or resets a logical palette.","pos":[11897,11954]},{"content":"Return Value","pos":[12003,12015]},{"content":"Nonzero if successful; otherwise 0.","pos":[12019,12054]},{"content":"Remarks","pos":[12064,12071]},{"pos":[12075,12207],"content":"While <ph id=\"ph1\">`UnrealizeObject`</ph> is a member function of the <ph id=\"ph2\">`CGdiObject`</ph> class, it should be invoked only on <ph id=\"ph3\">`CBrush`</ph> or <ph id=\"ph4\">`CPalette`</ph> objects.","source":"While `UnrealizeObject` is a member function of the `CGdiObject` class, it should be invoked only on `CBrush` or `CPalette` objects."},{"content":"For <ph id=\"ph1\">`CBrush`</ph> objects, <ph id=\"ph2\">`UnrealizeObject`</ph> directs the system to reset the origin of the given brush the next time it is selected into a device context.","pos":[12214,12363],"source":"For `CBrush` objects, `UnrealizeObject` directs the system to reset the origin of the given brush the next time it is selected into a device context."},{"content":"If the object is a <ph id=\"ph1\">`CPalette`</ph> object, <ph id=\"ph2\">`UnrealizeObject`</ph> directs the system to realize the palette as though it had not previously been realized.","pos":[12364,12508],"source":" If the object is a `CPalette` object, `UnrealizeObject` directs the system to realize the palette as though it had not previously been realized."},{"content":"The next time the application calls the <bpt id=\"p1\">[</bpt>CDC::RealizePalette<ept id=\"p1\">](../../mfc/reference/cdc-class.md#cdc__realizepalette)</ept> function for the specified palette, the system completely remaps the logical palette to the system palette.","pos":[12509,12732],"source":" The next time the application calls the [CDC::RealizePalette](../../mfc/reference/cdc-class.md#cdc__realizepalette) function for the specified palette, the system completely remaps the logical palette to the system palette."},{"content":"The <ph id=\"ph1\">`UnrealizeObject`</ph> function should not be used with stock objects.","pos":[12739,12808],"source":"The `UnrealizeObject` function should not be used with stock objects."},{"content":"The <ph id=\"ph1\">`UnrealizeObject`</ph> function must be called whenever a new brush origin is set (by means of the <bpt id=\"p1\">[</bpt>CDC::SetBrushOrg<ept id=\"p1\">](../../mfc/reference/cdc-class.md#cdc__setbrushorg)</ept> function).","pos":[12809,12987],"source":" The `UnrealizeObject` function must be called whenever a new brush origin is set (by means of the [CDC::SetBrushOrg](../../mfc/reference/cdc-class.md#cdc__setbrushorg) function)."},{"content":"The <ph id=\"ph1\">`UnrealizeObject`</ph> function must not be called for the currently selected brush or currently selected palette of any display context.","pos":[12988,13124],"source":" The `UnrealizeObject` function must not be called for the currently selected brush or currently selected palette of any display context."},{"content":"See Also","pos":[13133,13141]},{"content":"Hierarchy Chart","pos":[13146,13161]},{"content":"CBitmap Class","pos":[13198,13211]},{"content":"CBrush Class","pos":[13256,13268]},{"content":"CFont Class","pos":[13312,13323]},{"content":"CPalette Class","pos":[13366,13380]},{"content":"CPen Class","pos":[13426,13436]},{"content":"CRgn Class","pos":[13478,13488]}],"content":"---\ntitle: \"CGdiObject Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CGdiObject\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"brushes, base class for\"\n  - \"fonts, base class for\"\n  - \"regions, base class for\"\n  - \"pens, base class for\"\n  - \"palettes, base class for\"\n  - \"CGdiObject class\"\n  - \"GDI objects, base class for\"\nms.assetid: 1cba3ba5-3d49-4e43-8293-209299f2f6f4\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CGdiObject Class\nProvides a base class for various kinds of Windows graphics device interface (GDI) objects such as bitmaps, regions, brushes, pens, palettes, and fonts.  \n  \n## Syntax  \n  \n```  \nclass CGdiObject : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CGdiObject::CGdiObject](#cgdiobject__cgdiobject)|Constructs a `CGdiObject` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CGdiObject::Attach](#cgdiobject__attach)|Attaches a Windows GDI object to a `CGdiObject` object.|  \n|[CGdiObject::CreateStockObject](#cgdiobject__createstockobject)|Retrieves a handle to one of the Windows predefined stock pens, brushes, or fonts.|  \n|[CGdiObject::DeleteObject](#cgdiobject__deleteobject)|Deletes the Windows GDI object attached to the `CGdiObject` object from memory by freeing all system storage associated with the object.|  \n|[CGdiObject::DeleteTempMap](#cgdiobject__deletetempmap)|Deletes any temporary `CGdiObject` objects created by `FromHandle`.|  \n|[CGdiObject::Detach](#cgdiobject__detach)|Detaches a Windows GDI object from a `CGdiObject` object and returns a handle to the Windows GDI object.|  \n|[CGdiObject::FromHandle](#cgdiobject__fromhandle)|Returns a pointer to a `CGdiObject` object given a handle to a Windows GDI object.|  \n|[CGdiObject::GetObject](#cgdiobject__getobject)|Fills a buffer with data that describes the Windows GDI object attached to the `CGdiObject` object.|  \n|[CGdiObject::GetObjectType](#cgdiobject__getobjecttype)|Retrieves the type of the GDI object.|  \n|[CGdiObject::GetSafeHandle](#cgdiobject__getsafehandle)|Returns `m_hObject` unless `this` is `NULL`, in which case `NULL` is returned.|  \n|[CGdiObject::UnrealizeObject](#cgdiobject__unrealizeobject)|Resets the origin of a brush or resets a logical palette.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CGdiObject::operator !=](#cgdiobject__operator__neq)|Determines if two GDI objects are logically not equal.|  \n|[CGdiObject::operator ==](#cgdiobject__operator__eq_eq)|Determines if two GDI objects are logically equal.|  \n|[CGdiObject::operator HGDIOBJ](#cgdiobject__operator_hgdiobj)|Retrieves a `HANDLE` to the attached Windows GDI object.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CGdiObject::m_hObject](#cgdiobject__m_hobject)|A `HANDLE` containing the `HBITMAP`, `HPALETTE`, `HRGN`, `HBRUSH`, `HPEN`, or `HFONT` attached to this object.|  \n  \n## Remarks  \n You never create a `CGdiObject` directly. Rather, you create an object from one of its derived classes, such as `CPen` or `CBrush`.  \n  \n For more information on `CGdiObject`, see [Graphic Objects](../../mfc/graphic-objects.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CGdiObject`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cgdiobject__attach\"></a>  CGdiObject::Attach  \n Attaches a Windows GDI object to a `CGdiObject` object.  \n  \n```  \nBOOL Attach(HGDIOBJ hObject);\n```  \n  \n### Parameters  \n `hObject`  \n A `HANDLE` to a Windows GDI object (for example, `HPEN` or `HBRUSH`).  \n  \n### Return Value  \n Nonzero if attachment is successful; otherwise 0.  \n  \n##  <a name=\"cgdiobject__cgdiobject\"></a>  CGdiObject::CGdiObject  \n Constructs a `CGdiObject` object.  \n  \n```  \nCGdiObject();\n```  \n  \n### Remarks  \n You never create a `CGdiObject` directly. Rather, you create an object from one of its derived classes, such as `CPen` or **Cbrush**.  \n  \n##  <a name=\"cgdiobject__createstockobject\"></a>  CGdiObject::CreateStockObject  \n Retrieves a handle to one of the predefined stock Windows GDI pens, brushes, or fonts, and attaches the GDI object to the `CGdiObject` object.  \n  \n```  \nBOOL CreateStockObject(int nIndex);\n```  \n  \n### Parameters  \n `nIndex`  \n A constant specifying the type of stock object desired. See the parameter *fnObject* for [GetStockObject](http://msdn.microsoft.com/library/windows/desktop/dd144925) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for a description of appropriate values.  \n  \n### Return Value  \n Nonzero if the function is successful; otherwise 0.  \n  \n### Remarks  \n Call this function with one of the derived classes that corresponds to the Windows GDI object type, such as `CPen` for a stock pen.  \n  \n##  <a name=\"cgdiobject__deleteobject\"></a>  CGdiObject::DeleteObject  \n Deletes the attached Windows GDI object from memory by freeing all system storage associated with the Windows GDI object.  \n  \n```  \nBOOL DeleteObject();\n```  \n  \n### Return Value  \n Nonzero if the GDI object was successfully deleted; otherwise 0.  \n  \n### Remarks  \n The storage associated with the `CGdiObject` object is not affected by this call. An application should not call `DeleteObject` on a `CGdiObject` object that is currently selected into a device context.  \n  \n When a pattern brush is deleted, the bitmap associated with the brush is not deleted. The bitmap must be deleted independently.  \n  \n##  <a name=\"cgdiobject__deletetempmap\"></a>  CGdiObject::DeleteTempMap  \n Called automatically by the `CWinApp` idle-time handler, `DeleteTempMap` deletes any temporary `CGdiObject` objects created by `FromHandle`.  \n  \n```  \nstatic void PASCAL DeleteTempMap();\n```  \n  \n### Remarks  \n `DeleteTempMap` detaches the Windows GDI object attached to a temporary `CGdiObject` object before deleting the `CGdiObject` object.  \n  \n### Example  \n [!code-cpp[NVC_MFCDocView#175](../../mfc/codesnippet/cpp/cgdiobject-class_1.cpp)]  \n  \n##  <a name=\"cgdiobject__detach\"></a>  CGdiObject::Detach  \n Detaches a Windows GDI object from a `CGdiObject` object and returns a handle to the Windows GDI object.  \n  \n```  \nHGDIOBJ Detach();\n```  \n  \n### Return Value  \n A `HANDLE` to the Windows GDI object detached; otherwise **NULL** if no GDI object is attached.  \n  \n##  <a name=\"cgdiobject__fromhandle\"></a>  CGdiObject::FromHandle  \n Returns a pointer to a `CGdiObject` object given a handle to a Windows GDI object.  \n  \n```  \nstatic CGdiObject* PASCAL FromHandle(HGDIOBJ hObject);\n```  \n  \n### Parameters  \n `hObject`  \n A `HANDLE` to a Windows GDI object.  \n  \n### Return Value  \n A pointer to a `CGdiObject` that may be temporary or permanent.  \n  \n### Remarks  \n If a `CGdiObject` object is not already attached to the Windows GDI object, a temporary `CGdiObject` object is created and attached.  \n  \n This temporary `CGdiObject` object is only valid until the next time the application has idle time in its event loop, at which time all temporary graphic objects are deleted. Another way of saying this is that the temporary object is only valid during the processing of one window message.  \n  \n##  <a name=\"cgdiobject__getobject\"></a>  CGdiObject::GetObject  \n Fills a buffer with data that defines a specified object.  \n  \n```  \nint GetObject(\n    int nCount,  \n    LPVOID lpObject) const;\n\n \n```  \n  \n### Parameters  \n `nCount`  \n Specifies the number of bytes to copy into the `lpObject` buffer.  \n  \n `lpObject`  \n Points to a user-supplied buffer that is to receive the information.  \n  \n### Return Value  \n The number of bytes retrieved; otherwise 0 if an error occurs.  \n  \n### Remarks  \n The function retrieves a data structure whose type depends on the type of graphic object, as shown by the following list:  \n  \n|Object|Buffer type|  \n|------------|-----------------|  \n|`CPen`|[LOGPEN](../../mfc/reference/logpen-structure.md)|  \n|`CBrush`|[LOGBRUSH](../../mfc/reference/logbrush-structure.md)|  \n|`CFont`|[LOGFONT](http://msdn.microsoft.com/library/windows/desktop/dd145037)|  \n|`CBitmap`|[BITMAP](../../mfc/reference/bitmap-structure.md)|  \n|`CPalette`|**WORD**|  \n|`CRgn`|Not supported|  \n  \n If the object is a `CBitmap` object, `GetObject` returns only the width, height, and color format information of the bitmap. The actual bits can be retrieved by using [CBitmap::GetBitmapBits](../../mfc/reference/cbitmap-class.md#cbitmap__getbitmapbits).  \n  \n If the object is a `CPalette` object, `GetObject` retrieves a **WORD** that specifies the number of entries in the palette. The function does not retrieve the [LOGPALETTE](http://msdn.microsoft.com/library/windows/desktop/dd145040) structure that defines the palette. An application can get information on palette entries by calling [CPalette::GetPaletteEntries](../../mfc/reference/cpalette-class.md#cpalette__getpaletteentries).  \n  \n##  <a name=\"cgdiobject__getobjecttype\"></a>  CGdiObject::GetObjectType  \n Retrieves the type of the GDI object.  \n  \n```  \nUINT GetObjectType() const;\n\n \n```  \n  \n### Return Value  \n The type of the object, if successful; otherwise 0. The value can be one of the following:  \n  \n- **OBJ_BITMAP** Bitmap  \n  \n- **OBJ_BRUSH** Brush  \n  \n- **OBJ_FONT** Font  \n  \n- **OBJ_PAL** Palette  \n  \n- **OBJ_PEN** Pen  \n  \n- **OBJ_EXTPEN** Extended pen  \n  \n- **OBJ_REGION** Region  \n  \n- **OBJ_DC** Device context  \n  \n- **OBJ_MEMDC** Memory device context  \n  \n- **OBJ_METAFILE** Metafile  \n  \n- **OBJ_METADC** Metafile device context  \n  \n- **OBJ_ENHMETAFILE** Enhanced metafile  \n  \n- **OBJ_ENHMETADC** Enhanced-metafile device context  \n  \n##  <a name=\"cgdiobject__getsafehandle\"></a>  CGdiObject::GetSafeHandle  \n Returns `m_hObject` unless **this** is **NULL**, in which case **NULL** is returned.  \n  \n```  \nHGDIOBJ GetSafeHandle() const;\n\n \n```  \n  \n### Return Value  \n A `HANDLE` to the attached Windows GDI object; otherwise **NULL** if no object is attached.  \n  \n### Remarks  \n This is part of the general handle interface paradigm and is useful when **NULL** is a valid or special value for a handle.  \n  \n### Example  \n  See the example for [CWnd::IsWindowEnabled](../../mfc/reference/cwnd-class.md#cwnd__iswindowenabled).  \n  \n##  <a name=\"cgdiobject__m_hobject\"></a>  CGdiObject::m_hObject  \n A `HANDLE` containing the `HBITMAP`, **HRGN**, `HBRUSH`, `HPEN`, `HPALETTE`, or **HFONT** attached to this object.  \n  \n```  \nHGDIOBJ m_hObject;  \n```  \n  \n##  <a name=\"cgdiobject__operator__neq\"></a>  CGdiObject::operator !=  \n Determines if two GDI objects are logically not equal.  \n  \n```  \nBOOL operator!=(const CGdiObject& obj) const;\n\n \n```  \n  \n### Parameters  \n `obj`  \n A pointer to an existing `CGdiObject`.  \n  \n### Remarks  \n Determines if a GDI object on the left side is not equal to a GDI object on the right side.  \n  \n##  <a name=\"cgdiobject__operator__eq_eq\"></a>  CGdiObject::operator ==  \n Determines if two GDI objects are logically equal.  \n  \n```  \nBOOL operator==(const CGdiObject& obj) const;\n\n \n```  \n  \n### Parameters  \n `obj`  \n A reference to an existing `CGdiObject`.  \n  \n### Remarks  \n Determines if a GDI object on the left side is equal to a GDI object on the right side.  \n  \n##  <a name=\"cgdiobject__operator_hgdiobj\"></a>  CGdiObject::operator HGDIOBJ  \n Retrieves a `HANDLE` to the attached Windows GDI object; otherwise **NULL** if no object is attached.  \n  \n```  \noperator HGDIOBJ() const;\n\n \n```  \n  \n##  <a name=\"cgdiobject__unrealizeobject\"></a>  CGdiObject::UnrealizeObject  \n Resets the origin of a brush or resets a logical palette.  \n  \n```  \nBOOL UnrealizeObject();\n```  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n While `UnrealizeObject` is a member function of the `CGdiObject` class, it should be invoked only on `CBrush` or `CPalette` objects.  \n  \n For `CBrush` objects, `UnrealizeObject` directs the system to reset the origin of the given brush the next time it is selected into a device context. If the object is a `CPalette` object, `UnrealizeObject` directs the system to realize the palette as though it had not previously been realized. The next time the application calls the [CDC::RealizePalette](../../mfc/reference/cdc-class.md#cdc__realizepalette) function for the specified palette, the system completely remaps the logical palette to the system palette.  \n  \n The `UnrealizeObject` function should not be used with stock objects. The `UnrealizeObject` function must be called whenever a new brush origin is set (by means of the [CDC::SetBrushOrg](../../mfc/reference/cdc-class.md#cdc__setbrushorg) function). The `UnrealizeObject` function must not be called for the currently selected brush or currently selected palette of any display context.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CBitmap Class](../../mfc/reference/cbitmap-class.md)   \n [CBrush Class](../../mfc/reference/cbrush-class.md)   \n [CFont Class](../../mfc/reference/cfont-class.md)   \n [CPalette Class](../../mfc/reference/cpalette-class.md)   \n [CPen Class](../../mfc/reference/cpen-class.md)   \n [CRgn Class](../../mfc/reference/crgn-class.md)\n"}