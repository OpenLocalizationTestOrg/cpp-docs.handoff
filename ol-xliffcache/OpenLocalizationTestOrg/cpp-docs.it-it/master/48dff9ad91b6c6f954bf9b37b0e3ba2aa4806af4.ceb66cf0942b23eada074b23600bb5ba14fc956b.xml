{"nodes":[{"pos":[12,42],"content":"static_assert | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"static_assert | Microsoft Docs","pos":[0,30]}]},{"content":"static_assert","pos":[729,742]},{"content":"Tests a software assertion at compile time.","pos":[743,786]},{"content":"If the specified constant expression is <ph id=\"ph1\">`false`</ph>, the compiler displays the specified message and the compilation fails with error C2338; otherwise, the declaration has no effect.","pos":[787,965],"source":" If the specified constant expression is `false`, the compiler displays the specified message and the compilation fails with error C2338; otherwise, the declaration has no effect."},{"content":"Syntax","pos":[974,980]},{"content":"Parameters","pos":[1079,1089]},{"content":"Parameter","pos":[1096,1105]},{"content":"Description","pos":[1106,1117]},{"content":"An integral constant expression that can be converted to a Boolean.","pos":[1182,1249]},{"content":"If the evaluated expression is zero (false), the <ph id=\"ph1\">`string-literal`</ph> parameter is displayed and the compilation fails with an error.","pos":[1262,1391],"source":" If the evaluated expression is zero (false), the `string-literal` parameter is displayed and the compilation fails with an error."},{"content":"If the expression is nonzero (true), the <ph id=\"ph1\">`static_assert`</ph> declaration has no effect.","pos":[1392,1475],"source":" If the expression is nonzero (true), the `static_assert` declaration has no effect."},{"content":"An message that is displayed if the <ph id=\"ph1\">`constant-expression`</ph> parameter is zero.","pos":[1497,1573],"source":"An message that is displayed if the `constant-expression` parameter is zero."},{"content":"The message is a string of characters in the <bpt id=\"p1\">[</bpt>base character set<ept id=\"p1\">](../c-language/ascii-character-set.md)</ept> of the compiler; that is, not <bpt id=\"p2\">[</bpt>multibyte or wide characters<ept id=\"p2\">](../c-language/multibyte-and-wide-characters.md)</ept>.","pos":[1574,1787],"source":" The message is a string of characters in the [base character set](../c-language/ascii-character-set.md) of the compiler; that is, not [multibyte or wide characters](../c-language/multibyte-and-wide-characters.md)."},{"content":"Remarks","pos":[1797,1804]},{"content":"The <ph id=\"ph1\">`constant-expression`</ph> parameter of a <ph id=\"ph2\">`static_assert`</ph> declaration represents a <bpt id=\"p1\">*</bpt>software assertion<ept id=\"p1\">*</ept>.","pos":[1808,1911],"source":"The `constant-expression` parameter of a `static_assert` declaration represents a *software assertion*."},{"content":"A software assertion specifies a condition that you expect to be true at a particular point in your program.","pos":[1912,2020]},{"content":"If the condition is true, the <ph id=\"ph1\">`static_assert`</ph> declaration has no effect.","pos":[2021,2093],"source":" If the condition is true, the `static_assert` declaration has no effect."},{"content":"If the condition is false, the assertion fails, the compiler displays the message in <ph id=\"ph1\">`string-literal`</ph> parameter, and the compilation fails with an error.","pos":[2094,2247],"source":" If the condition is false, the assertion fails, the compiler displays the message in `string-literal` parameter, and the compilation fails with an error."},{"content":"The <ph id=\"ph1\">`static_assert`</ph> declaration tests a software assertion at compile time.","pos":[2254,2329],"source":"The `static_assert` declaration tests a software assertion at compile time."},{"content":"In contrast, the <bpt id=\"p1\">[</bpt>assert Macro, _assert, _wassert<ept id=\"p1\">](../c-runtime-library/reference/assert-macro-assert-wassert.md)</ept> macro tests a software assertion at run time and incurs a run time cost in space or time.","pos":[2330,2533],"source":" In contrast, the [assert Macro, _assert, _wassert](../c-runtime-library/reference/assert-macro-assert-wassert.md) macro tests a software assertion at run time and incurs a run time cost in space or time."},{"content":"The <ph id=\"ph1\">`static_assert`</ph> declaration is especially useful for debugging templates because template arguments can be included in the <ph id=\"ph2\">`constant-expression`</ph> parameter.","pos":[2534,2693],"source":" The `static_assert` declaration is especially useful for debugging templates because template arguments can be included in the `constant-expression` parameter."},{"content":"The compiler examines the <ph id=\"ph1\">`static_assert`</ph> declaration for syntax errors when the declaration is encountered.","pos":[2700,2808],"source":"The compiler examines the `static_assert` declaration for syntax errors when the declaration is encountered."},{"content":"The compiler evaluates the <ph id=\"ph1\">`constant-expression`</ph> parameter immediately if it does not depend on a template parameter.","pos":[2809,2926],"source":" The compiler evaluates the `constant-expression` parameter immediately if it does not depend on a template parameter."},{"content":"Otherwise, the compiler evaluates the <ph id=\"ph1\">`constant-expression`</ph> parameter when the template is instantiated.","pos":[2927,3031],"source":" Otherwise, the compiler evaluates the `constant-expression` parameter when the template is instantiated."},{"content":"Consequently, the compiler might issue a diagnostic message once when the declaration is encountered, and again when the template is instantiated.","pos":[3032,3178]},{"content":"You can use the <ph id=\"ph1\">`static_assert`</ph> keyword at namespace, class, or block scope.","pos":[3185,3261],"source":"You can use the `static_assert` keyword at namespace, class, or block scope."},{"content":"(The <ph id=\"ph1\">`static_assert`</ph> keyword is technically a declaration, even though it does not introduce new name into your program, because it can be used at namespace scope.)","pos":[3262,3426],"source":" (The `static_assert` keyword is technically a declaration, even though it does not introduce new name into your program, because it can be used at namespace scope.)"},{"content":"Description","pos":[3435,3446]},{"content":"In the following example, the <ph id=\"ph1\">`static_assert`</ph> declaration has namespace scope.","pos":[3450,3528],"source":"In the following example, the `static_assert` declaration has namespace scope."},{"content":"Because the compiler knows the size of type <ph id=\"ph1\">`void *`</ph>, the expression is evaluated immediately.","pos":[3529,3623],"source":" Because the compiler knows the size of type `void *`, the expression is evaluated immediately."},{"content":"Example","pos":[3632,3639]},{"content":"Description","pos":[3745,3756]},{"content":"In the following example, the <ph id=\"ph1\">`static_assert`</ph> declaration has class scope.","pos":[3760,3834],"source":"In the following example, the `static_assert` declaration has class scope."},{"content":"The <ph id=\"ph1\">`static_assert`</ph> verifies that a template parameter is a <bpt id=\"p1\">*</bpt>plain old data<ept id=\"p1\">*</ept> (POD) type.","pos":[3835,3923],"source":" The `static_assert` verifies that a template parameter is a *plain old data* (POD) type."},{"content":"The compiler examines the <ph id=\"ph1\">`static_assert`</ph> declaration when it is declared, but does not evaluate the <ph id=\"ph2\">`constant-expression`</ph> parameter until the <ph id=\"ph3\">`basic_string`</ph> class template is instantiated in <ph id=\"ph4\">`main()`</ph>.","pos":[3924,4125],"source":" The compiler examines the `static_assert` declaration when it is declared, but does not evaluate the `constant-expression` parameter until the `basic_string` class template is instantiated in `main()`."},{"content":"Example","pos":[4134,4141]},{"content":"Description","pos":[4625,4636]},{"content":"In the following example, the <ph id=\"ph1\">`static_assert`</ph> declaration has block scope.","pos":[4640,4714],"source":"In the following example, the `static_assert` declaration has block scope."},{"content":"The <ph id=\"ph1\">`static_assert`</ph> verifies that the size of the VMPage structure is equal to the virtual memory pagesize of the system.","pos":[4715,4836],"source":" The `static_assert` verifies that the size of the VMPage structure is equal to the virtual memory pagesize of the system."},{"content":"Example","pos":[4845,4852]},{"content":"See Also","pos":[5192,5200]},{"content":"Assertion and User-Supplied Messages (C++)","pos":[5205,5247]},{"content":"error Directive (C/C++)","pos":[5307,5330]},{"content":"assert Macro, _assert, _wassert","pos":[5384,5415]},{"content":"Templates","pos":[5485,5494]},{"content":"ASCII Character Set","pos":[5526,5545]},{"content":"Declarations and Definitions","pos":[5590,5618]}],"content":"---\ntitle: \"static_assert | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"C2338\"\n  - \"static_assert_cpp\"\n  - \"static_assert\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C++ keywords, static_assert\"\n  - \"C2338\"\n  - \"assertions [C++], static_assert\"\n  - \"static_assert\"\nms.assetid: 28dd3668-e78c-4de8-ba68-552084743426\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# static_assert\nTests a software assertion at compile time. If the specified constant expression is `false`, the compiler displays the specified message and the compilation fails with error C2338; otherwise, the declaration has no effect.  \n  \n## Syntax  \n  \n```  \nstatic_assert(   \n    constant-expression,   \n    string-literal   \n);  \n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`constant-expression`|An integral constant expression that can be converted to a Boolean.<br /><br /> If the evaluated expression is zero (false), the `string-literal` parameter is displayed and the compilation fails with an error. If the expression is nonzero (true), the `static_assert` declaration has no effect.|  \n|`string-literal`|An message that is displayed if the `constant-expression` parameter is zero. The message is a string of characters in the [base character set](../c-language/ascii-character-set.md) of the compiler; that is, not [multibyte or wide characters](../c-language/multibyte-and-wide-characters.md).|  \n  \n## Remarks  \n The `constant-expression` parameter of a `static_assert` declaration represents a *software assertion*. A software assertion specifies a condition that you expect to be true at a particular point in your program. If the condition is true, the `static_assert` declaration has no effect. If the condition is false, the assertion fails, the compiler displays the message in `string-literal` parameter, and the compilation fails with an error.  \n  \n The `static_assert` declaration tests a software assertion at compile time. In contrast, the [assert Macro, _assert, _wassert](../c-runtime-library/reference/assert-macro-assert-wassert.md) macro tests a software assertion at run time and incurs a run time cost in space or time. The `static_assert` declaration is especially useful for debugging templates because template arguments can be included in the `constant-expression` parameter.  \n  \n The compiler examines the `static_assert` declaration for syntax errors when the declaration is encountered. The compiler evaluates the `constant-expression` parameter immediately if it does not depend on a template parameter. Otherwise, the compiler evaluates the `constant-expression` parameter when the template is instantiated. Consequently, the compiler might issue a diagnostic message once when the declaration is encountered, and again when the template is instantiated.  \n  \n You can use the `static_assert` keyword at namespace, class, or block scope. (The `static_assert` keyword is technically a declaration, even though it does not introduce new name into your program, because it can be used at namespace scope.)  \n  \n## Description  \n In the following example, the `static_assert` declaration has namespace scope. Because the compiler knows the size of type `void *`, the expression is evaluated immediately.  \n  \n## Example  \n  \n```  \nstatic_assert(sizeof(void *) == 4, \"64-bit code generation is not supported.\");  \n```  \n  \n## Description  \n In the following example, the `static_assert` declaration has class scope. The `static_assert` verifies that a template parameter is a *plain old data* (POD) type. The compiler examines the `static_assert` declaration when it is declared, but does not evaluate the `constant-expression` parameter until the `basic_string` class template is instantiated in `main()`.  \n  \n## Example  \n  \n```  \n#include <type_traits>  \n#include <iosfwd>  \nnamespace std {  \ntemplate <class CharT, class Traits = std::char_traits<CharT> >  \nclass basic_string {  \n    static_assert(tr1::is_pod<CharT>::value,  \n                  \"Template argument CharT must be a POD type in class template basic_string\");  \n    // ...  \n    };  \n}  \nstruct NonPOD {  \n    NonPOD(const NonPOD &) {}  \n    virtual ~NonPOD() {}  \n};  \nint main()  \n{  \n    std::basic_string<char> bs;  \n}  \n```  \n  \n## Description  \n In the following example, the `static_assert` declaration has block scope. The `static_assert` verifies that the size of the VMPage structure is equal to the virtual memory pagesize of the system.  \n  \n## Example  \n  \n```  \n#include <sys/param.h> // defines PAGESIZE  \nclass VMMClient {  \npublic:  \n    struct VMPage { // ...   \n           };  \n    int check_pagesize() {  \n    static_assert(sizeof(VMPage) == PAGESIZE,  \n        \"Struct VMPage must be the same size as a system virtual memory page.\");  \n    // ...  \n    }  \n// ...  \n};  \n```  \n  \n## See Also  \n [Assertion and User-Supplied Messages (C++)](../cpp/assertion-and-user-supplied-messages-cpp.md)   \n [#error Directive (C/C++)](../preprocessor/hash-error-directive-c-cpp.md)   \n [assert Macro, _assert, _wassert](../c-runtime-library/reference/assert-macro-assert-wassert.md)   \n [Templates](../cpp/templates-cpp.md)   \n [ASCII Character Set](../c-language/ascii-character-set.md)   \n [Declarations and Definitions](declarations-and-definitions-cpp.md)"}