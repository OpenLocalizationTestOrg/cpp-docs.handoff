{"nodes":[{"pos":[12,62],"content":"Date and Time: SYSTEMTIME Support | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Date and Time: SYSTEMTIME Support | Microsoft Docs","pos":[0,50]}]},{"content":"Date and Time: SYSTEMTIME Support","pos":[767,800]},{"content":"The <bpt id=\"p1\">[</bpt>CTime<ept id=\"p1\">](../atl-mfc-shared/reference/ctime-class.md)</ept> class has constructors that accept system and file times from Win32.","pos":[801,925],"source":"The [CTime](../atl-mfc-shared/reference/ctime-class.md) class has constructors that accept system and file times from Win32."},{"content":"If you use <ph id=\"ph1\">`CTime`</ph> objects for these purposes, you must modify their initialization accordingly, as described in this article.","pos":[926,1052],"source":" If you use `CTime` objects for these purposes, you must modify their initialization accordingly, as described in this article."},{"content":"For information about the SYSTEMTIME structure, see <bpt id=\"p1\">[</bpt>SYSTEMTIME<ept id=\"p1\">](../mfc/reference/systemtime-structure1.md)</ept>.","pos":[1059,1167],"source":"For information about the SYSTEMTIME structure, see [SYSTEMTIME](../mfc/reference/systemtime-structure1.md)."},{"content":"For information about the FILETIME structure, see <bpt id=\"p1\">[</bpt>FILETIME<ept id=\"p1\">](../mfc/reference/filetime-structure.md)</ept>.","pos":[1168,1269],"source":" For information about the FILETIME structure, see [FILETIME](../mfc/reference/filetime-structure.md)."},{"pos":[1276,1536],"content":"MFC still provides <ph id=\"ph1\">`CTime`</ph> constructors that take time arguments in the MS-DOS style, but, starting in MFC version 3.0, the <ph id=\"ph2\">`CTime`</ph> class also supports a constructor that takes a Win32 <ph id=\"ph3\">`SYSTEMTIME`</ph> structure and another that takes a Win32 <ph id=\"ph4\">`FILETIME`</ph> structure.","source":"MFC still provides `CTime` constructors that take time arguments in the MS-DOS style, but, starting in MFC version 3.0, the `CTime` class also supports a constructor that takes a Win32 `SYSTEMTIME` structure and another that takes a Win32 `FILETIME` structure."},{"pos":[1543,1576],"content":"The new <ph id=\"ph1\">`CTime`</ph> constructors are:","source":"The new `CTime` constructors are:"},{"pos":[1586,1621],"content":"CTime(const SYSTEMTIME&amp; <ph id=\"ph1\">`sysTime`</ph>);","source":"CTime(const SYSTEMTIME& `sysTime`);"},{"pos":[1631,1665],"content":"CTime(const FILETIME&amp; <ph id=\"ph1\">`fileTime`</ph>);","source":"CTime(const FILETIME& `fileTime`);"},{"pos":[1672,1930],"content":"The <ph id=\"ph1\">`fileTime`</ph> parameter is a reference to a Win32 <ph id=\"ph2\">`FILETIME`</ph> structure, which represents time as a 64-bit value, a more convenient format for internal storage than a <ph id=\"ph3\">`SYSTEMTIME`</ph> structure and the format used by Win32 to represent the time of file creation.","source":"The `fileTime` parameter is a reference to a Win32 `FILETIME` structure, which represents time as a 64-bit value, a more convenient format for internal storage than a `SYSTEMTIME` structure and the format used by Win32 to represent the time of file creation."},{"pos":[1937,2063],"content":"If your code contains a <ph id=\"ph1\">`CTime`</ph> object initialized with the system time, you should use the <ph id=\"ph2\">`SYSTEMTIME`</ph> constructor in Win32.","source":"If your code contains a `CTime` object initialized with the system time, you should use the `SYSTEMTIME` constructor in Win32."},{"content":"You most likely will not use <ph id=\"ph1\">`CTime`</ph> <ph id=\"ph2\">`FILETIME`</ph> initialization directly.","pos":[2070,2142],"source":"You most likely will not use `CTime` `FILETIME` initialization directly."},{"content":"If you use a <ph id=\"ph1\">`CFile`</ph> object to manipulate a file, <bpt id=\"p1\">[</bpt>CFile::GetStatus<ept id=\"p1\">](../mfc/reference/cfile-class.md#cfile__getstatus)</ept> retrieves the file timestamp for you via a <ph id=\"ph2\">`CTime`</ph> object initialized with a <ph id=\"ph3\">`FILETIME`</ph> structure.","pos":[2143,2360],"source":" If you use a `CFile` object to manipulate a file, [CFile::GetStatus](../mfc/reference/cfile-class.md#cfile__getstatus) retrieves the file timestamp for you via a `CTime` object initialized with a `FILETIME` structure."},{"content":"What do you want to know more about","pos":[2369,2404]},{"content":"General date and time programming in MFC","pos":[2415,2455]},{"content":"Automation support of date and time programming","pos":[2503,2550]},{"content":"General-purpose classes for date and time programming","pos":[2617,2670]},{"content":"See Also","pos":[2740,2748]},{"content":"Date and Time","pos":[2753,2766]}],"content":"---\ntitle: \"Date and Time: SYSTEMTIME Support | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"SYSTEMTIME\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"system time\"\n  - \"FILETIME structure, with CTime class\"\n  - \"time [C++], formatting\"\n  - \"SYSTEMTIME structure\"\n  - \"dates [C++], MFC\"\n  - \"formatting [C++], time\"\nms.assetid: 201528e4-2ffa-48fc-af8f-203aa86d942a\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Date and Time: SYSTEMTIME Support\nThe [CTime](../atl-mfc-shared/reference/ctime-class.md) class has constructors that accept system and file times from Win32. If you use `CTime` objects for these purposes, you must modify their initialization accordingly, as described in this article.  \n  \n For information about the SYSTEMTIME structure, see [SYSTEMTIME](../mfc/reference/systemtime-structure1.md). For information about the FILETIME structure, see [FILETIME](../mfc/reference/filetime-structure.md).  \n  \n MFC still provides `CTime` constructors that take time arguments in the MS-DOS style, but, starting in MFC version 3.0, the `CTime` class also supports a constructor that takes a Win32 `SYSTEMTIME` structure and another that takes a Win32 `FILETIME` structure.  \n  \n The new `CTime` constructors are:  \n  \n-   CTime(const SYSTEMTIME& `sysTime`);  \n  \n-   CTime(const FILETIME& `fileTime`);  \n  \n The `fileTime` parameter is a reference to a Win32 `FILETIME` structure, which represents time as a 64-bit value, a more convenient format for internal storage than a `SYSTEMTIME` structure and the format used by Win32 to represent the time of file creation.  \n  \n If your code contains a `CTime` object initialized with the system time, you should use the `SYSTEMTIME` constructor in Win32.  \n  \n You most likely will not use `CTime` `FILETIME` initialization directly. If you use a `CFile` object to manipulate a file, [CFile::GetStatus](../mfc/reference/cfile-class.md#cfile__getstatus) retrieves the file timestamp for you via a `CTime` object initialized with a `FILETIME` structure.  \n  \n## What do you want to know more about  \n  \n-   [General date and time programming in MFC](../atl-mfc-shared/date-and-time.md)  \n  \n-   [Automation support of date and time programming](../atl-mfc-shared/date-and-time-automation-support.md)  \n  \n-   [General-purpose classes for date and time programming](../atl-mfc-shared/date-and-time-general-purpose-classes.md)  \n  \n## See Also  \n [Date and Time](../atl-mfc-shared/date-and-time.md)\n\n"}