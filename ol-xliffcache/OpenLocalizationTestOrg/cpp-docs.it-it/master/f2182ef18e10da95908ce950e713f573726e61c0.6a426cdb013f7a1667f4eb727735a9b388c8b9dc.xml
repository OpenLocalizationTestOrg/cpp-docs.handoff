{"nodes":[{"pos":[12,50],"content":"break Statement (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"break Statement (C++) | Microsoft Docs","pos":[0,38]}]},{"content":"break Statement (C++)","pos":[632,653]},{"content":"The <ph id=\"ph1\">`break`</ph> statement ends execution of the nearest enclosing loop or conditional statement in which it appears.","pos":[654,766],"source":"The `break` statement ends execution of the nearest enclosing loop or conditional statement in which it appears."},{"content":"Control passes to the statement that follows the end of the statement, if any.","pos":[767,845]},{"content":"Syntax","pos":[854,860]},{"content":"Remarks","pos":[893,900]},{"pos":[904,1154],"content":"The <ph id=\"ph1\">`break`</ph> statement is used with the conditional <bpt id=\"p1\">[</bpt>switch<ept id=\"p1\">](../cpp/switch-statement-cpp.md)</ept> statement and with the <bpt id=\"p2\">[</bpt>do<ept id=\"p2\">](../cpp/do-while-statement-cpp.md)</ept>, <bpt id=\"p3\">[</bpt>for<ept id=\"p3\">](../cpp/for-statement-cpp.md)</ept>, and <bpt id=\"p4\">[</bpt>while<ept id=\"p4\">](../cpp/while-statement-cpp.md)</ept> loop statements.","source":"The `break` statement is used with the conditional [switch](../cpp/switch-statement-cpp.md) statement and with the [do](../cpp/do-while-statement-cpp.md), [for](../cpp/for-statement-cpp.md), and [while](../cpp/while-statement-cpp.md) loop statements."},{"content":"In a <ph id=\"ph1\">`switch`</ph> statement, the <ph id=\"ph2\">`break`</ph> statement causes the program to execute the next statement outside the <ph id=\"ph3\">`switch`</ph> statement.","pos":[1161,1288],"source":"In a `switch` statement, the `break` statement causes the program to execute the next statement outside the `switch` statement."},{"content":"Without a <ph id=\"ph1\">`break`</ph> statement, every statement from the matched <ph id=\"ph2\">`case`</ph> label to the end of the <ph id=\"ph3\">`switch`</ph> statement, including the <ph id=\"ph4\">`default`</ph> clause, is executed.","pos":[1289,1446],"source":" Without a `break` statement, every statement from the matched `case` label to the end of the `switch` statement, including the `default` clause, is executed."},{"content":"In loops, the <ph id=\"ph1\">`break`</ph> statement ends execution of the nearest enclosing <ph id=\"ph2\">`do`</ph>, <ph id=\"ph3\">`for`</ph>, or <ph id=\"ph4\">`while`</ph> statement.","pos":[1453,1559],"source":"In loops, the `break` statement ends execution of the nearest enclosing `do`, `for`, or `while` statement."},{"content":"Control passes to the statement that follows the ended statement, if any.","pos":[1560,1633]},{"content":"Within nested statements, the <ph id=\"ph1\">`break`</ph> statement ends only the <ph id=\"ph2\">`do`</ph>, <ph id=\"ph3\">`for`</ph>, <ph id=\"ph4\">`switch`</ph>, or <ph id=\"ph5\">`while`</ph> statement that immediately encloses it.","pos":[1640,1775],"source":"Within nested statements, the `break` statement ends only the `do`, `for`, `switch`, or `while` statement that immediately encloses it."},{"content":"You can use a <ph id=\"ph1\">`return`</ph> or <ph id=\"ph2\">`goto`</ph> statement to transfer control from more deeply nested structures.","pos":[1776,1874],"source":" You can use a `return` or `goto` statement to transfer control from more deeply nested structures."},{"content":"Example","pos":[1883,1890]},{"pos":[1894,1968],"content":"The following code shows how to use the <ph id=\"ph1\">`break`</ph> statement in a <ph id=\"ph2\">`for`</ph> loop.","source":"The following code shows how to use the `break` statement in a `for` loop."},{"pos":[2497,2575],"content":"The following code shows how to use <ph id=\"ph1\">`break`</ph> in a <ph id=\"ph2\">`while`</ph> loop and a <ph id=\"ph3\">`do`</ph> loop.","source":"The following code shows how to use `break` in a `while` loop and a `do` loop."},{"content":"The following code shows how to use <ph id=\"ph1\">`break`</ph> in a switch statement.","pos":[3018,3084],"source":"The following code shows how to use `break` in a switch statement."},{"content":"You must use <ph id=\"ph1\">`break`</ph> in every case if you want to handle each case separately; if you do not use <ph id=\"ph2\">`break`</ph>, the code execution falls through to the next case.","pos":[3085,3241],"source":" You must use `break` in every case if you want to handle each case separately; if you do not use `break`, the code execution falls through to the next case."},{"content":"See Also","pos":[4281,4289]},{"content":"Jump Statements","pos":[4294,4309]},{"content":"Keywords","pos":[4347,4355]},{"content":"continue Statement","pos":[4386,4404]}],"content":"---\ntitle: \"break Statement (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"break_cpp\"\n  - \"break\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"break keyword [C++]\"\nms.assetid: 63739928-8985-4b05-93ce-016322e6da3d\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# break Statement (C++)\nThe `break` statement ends execution of the nearest enclosing loop or conditional statement in which it appears. Control passes to the statement that follows the end of the statement, if any.  \n  \n## Syntax  \n  \n```  \nbreak;  \n```  \n  \n## Remarks  \n The `break` statement is used with the conditional [switch](../cpp/switch-statement-cpp.md) statement and with the [do](../cpp/do-while-statement-cpp.md), [for](../cpp/for-statement-cpp.md), and [while](../cpp/while-statement-cpp.md) loop statements.  \n  \n In a `switch` statement, the `break` statement causes the program to execute the next statement outside the `switch` statement. Without a `break` statement, every statement from the matched `case` label to the end of the `switch` statement, including the `default` clause, is executed.  \n  \n In loops, the `break` statement ends execution of the nearest enclosing `do`, `for`, or `while` statement. Control passes to the statement that follows the ended statement, if any.  \n  \n Within nested statements, the `break` statement ends only the `do`, `for`, `switch`, or `while` statement that immediately encloses it. You can use a `return` or `goto` statement to transfer control from more deeply nested structures.  \n  \n## Example  \n The following code shows how to use the `break` statement in a `for` loop.  \n  \n```cpp  \n#include <iostream>  \nusing namespace std;  \n  \nint main()  \n{  \n    // An example of a standard for loop  \n    for (int i = 1; i < 10; i++)  \n    {  \n        cout << i << '\\n';  \n        if (i == 4)  \n            break;  \n    }  \n  \n    // An example of a range-based for loop  \nint nums []{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};  \n  \n    for (int i : nums) {  \n        if (i == 4) {  \n            break;  \n        }  \n        cout << i << '\\n';  \n    }  \n}  \n```  \n  \n```Output  \nIn each case:   \n1  \n2  \n3  \n```  \n  \n The following code shows how to use `break` in a `while` loop and a `do` loop.  \n  \n```cpp  \n  \n#include <iostream>  \nusing namespace std;  \n  \nint main() {  \n    int i = 0;  \n  \n    while (i < 10) {  \n        if (i == 4) {  \n            break;  \n        }  \n        cout << i << '\\n';  \n        i++;  \n    }  \n  \n    i = 0;  \n    do {  \n        if (i == 4) {  \n            break;  \n        }  \n        cout << i << '\\n';  \n        i++;  \n    } while (i < 10);  \n}  \n```  \n  \n```Output  \nIn each case:  \n0123  \n```  \n  \n The following code shows how to use `break` in a switch statement. You must use `break` in every case if you want to handle each case separately; if you do not use `break`, the code execution falls through to the next case.  \n  \n```cpp  \n#include <iostream>  \nusing namespace std;  \n  \nenum Suit{ Diamonds, Hearts, Clubs, Spades };  \n  \nint main() {  \n  \n    Suit hand;  \n    . . .  \n    // Assume that some enum value is set for hand  \n    // In this example, each case is handled separately  \n    switch (hand)  \n    {  \n    case Diamonds:  \n        cout << \"got Diamonds \\n\";  \n        break;  \n    case Hearts:  \n        cout << \"got Hearts \\n\";  \n        break;  \n    case Clubs:  \n        cout << \"got Clubs \\n\";  \n        break;  \n    case Spades:  \n        cout << \"got Spades \\n\";  \n        break;  \n    default:   \n          cout << \"didn't get card \\n\";  \n    }  \n    // In this example, Diamonds and Hearts are handled one way, and  \n    // Clubs, Spades, and the default value are handled another way  \n    switch (hand)  \n    {  \n    case Diamonds:  \n    case Hearts:  \n        cout << \"got a red card \\n\";  \n        break;  \n    case Clubs:  \n    case Spades:   \n    default:  \n        cout << \"didn't get a red card \\n\";  \n    }  \n}  \n```  \n  \n## See Also  \n [Jump Statements](../cpp/jump-statements-cpp.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n [continue Statement](../cpp/continue-statement-cpp.md)"}