{"nodes":[{"pos":[12,47],"content":"_clear87, _clearfp | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_clear87, _clearfp | Microsoft Docs","pos":[0,35]}]},{"pos":[1091,1109],"content":"_clear87, _clearfp","linkify":"_clear87, _clearfp","nodes":[{"content":"_clear87, _clearfp","pos":[0,18]}]},{"content":"Gets and clears the floating-point status word.","pos":[1110,1157]},{"pos":[1166,1172],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1262,1274],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The bits in the value returned indicate the floating-point status before the call to <ph id=\"ph1\">`_clear87`</ph> or <ph id=\"ph2\">`_clearfp`</ph>.","pos":[1278,1388],"source":"The bits in the value returned indicate the floating-point status before the call to `_clear87` or `_clearfp`."},{"content":"For a complete definition of the bits returned by <ph id=\"ph1\">`_clear87`</ph>, see Float.h.","pos":[1389,1463],"source":" For a complete definition of the bits returned by `_clear87`, see Float.h."},{"content":"Many of the math library functions modify the 8087/80287 status word, with unpredictable results.","pos":[1464,1561]},{"content":"Return values from <ph id=\"ph1\">`_clear87`</ph> and <ph id=\"ph2\">`_status87`</ph> become more reliable as fewer floating-point operations are performed between known states of the floating-point status word.","pos":[1562,1733],"source":" Return values from `_clear87` and `_status87` become more reliable as fewer floating-point operations are performed between known states of the floating-point status word."},{"pos":[1742,1749],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_clear87`</ph> function clears the exception flags in the floating-point status word, sets the busy bit to 0, and returns the status word.","pos":[1753,1891],"source":"The `_clear87` function clears the exception flags in the floating-point status word, sets the busy bit to 0, and returns the status word."},{"content":"The floating-point status word is a combination of the 8087/80287 status word and other conditions detected by the 8087/80287 exception handler, such as floating-point stack overflow and underflow.","pos":[1892,2089]},{"content":"<ph id=\"ph1\">`_clearfp`</ph> is a platform-independent, portable version of the <ph id=\"ph2\">`_clear87`</ph> routine.","pos":[2096,2177],"source":"`_clearfp` is a platform-independent, portable version of the `_clear87` routine."},{"content":"It is identical to <ph id=\"ph1\">`_clear87`</ph> on Intel (x86) platforms and is also supported by the x64 and ARM platforms.","pos":[2178,2284],"source":" It is identical to `_clear87` on Intel (x86) platforms and is also supported by the x64 and ARM platforms."},{"content":"To ensure that your floating-point code is portable to x64 and ARM, use <ph id=\"ph1\">`_clearfp`</ph>.","pos":[2285,2368],"source":" To ensure that your floating-point code is portable to x64 and ARM, use `_clearfp`."},{"content":"If you are only targeting x86 platforms, you can use either <ph id=\"ph1\">`_clear87`</ph> or <ph id=\"ph2\">`_clearfp`</ph>.","pos":[2369,2454],"source":" If you are only targeting x86 platforms, you can use either `_clear87` or `_clearfp`."},{"pos":[2461,2725],"content":"These functions are deprecated when compiling with <bpt id=\"p1\">[</bpt>/clr (Common Language Runtime Compilation)<ept id=\"p1\">](../../build/reference/clr-common-language-runtime-compilation.md)</ept> or <ph id=\"ph1\">`/clr:pure`</ph> because the common language runtime only supports the default floating-point precision.","source":"These functions are deprecated when compiling with [/clr (Common Language Runtime Compilation)](../../build/reference/clr-common-language-runtime-compilation.md) or `/clr:pure` because the common language runtime only supports the default floating-point precision."},{"pos":[2734,2746],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2753,2760]},{"content":"Required header","pos":[2761,2776]},{"content":"<ph id=\"ph1\">\\&lt;</ph>float.h&gt;","pos":[2832,2842],"source":"\\<float.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>float.h&gt;","pos":[2858,2868],"source":"\\<float.h>"},{"pos":[2876,2994],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3003,3010],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3871,3896],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3900,3915]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3916,3963],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3964,4089],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[4098,4106],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[4110,4186],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_control87, _controlfp, <ph id=\"ph1\">\\_</ph>_control87_2<ept id=\"p1\">](../../c-runtime-library/reference/control87-controlfp-control87-2.md)</ept><ph id=\"ph2\"> </ph>","pos":[4189,4301],"source":" [_control87, _controlfp, \\__control87_2](../../c-runtime-library/reference/control87-controlfp-control87-2.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_status87, _statusfp, _statusfp2<ept id=\"p1\">](../../c-runtime-library/reference/status87-statusfp-statusfp2.md)</ept>","pos":[4304,4405],"source":" [_status87, _statusfp, _statusfp2](../../c-runtime-library/reference/status87-statusfp-statusfp2.md)"}],"content":"---\ntitle: \"_clear87, _clearfp | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_clearfp\"\n  - \"_clear87\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"clearfp\"\n  - \"_clearfp\"\n  - \"_clear87\"\n  - \"clear87\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"clearing floating point status word\"\n  - \"clearfp function\"\n  - \"_clear87 function\"\n  - \"_clearfp function\"\n  - \"clear87 function\"\nms.assetid: 72d24a70-7688-4793-ae09-c96d33fcca52\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _clear87, _clearfp\nGets and clears the floating-point status word.  \n  \n## Syntax  \n  \n```  \nunsigned int _clear87( void );  \nunsigned int _clearfp( void );  \n```  \n  \n## Return Value  \n The bits in the value returned indicate the floating-point status before the call to `_clear87` or `_clearfp`. For a complete definition of the bits returned by `_clear87`, see Float.h. Many of the math library functions modify the 8087/80287 status word, with unpredictable results. Return values from `_clear87` and `_status87` become more reliable as fewer floating-point operations are performed between known states of the floating-point status word.  \n  \n## Remarks  \n The `_clear87` function clears the exception flags in the floating-point status word, sets the busy bit to 0, and returns the status word. The floating-point status word is a combination of the 8087/80287 status word and other conditions detected by the 8087/80287 exception handler, such as floating-point stack overflow and underflow.  \n  \n `_clearfp` is a platform-independent, portable version of the `_clear87` routine. It is identical to `_clear87` on Intel (x86) platforms and is also supported by the x64 and ARM platforms. To ensure that your floating-point code is portable to x64 and ARM, use `_clearfp`. If you are only targeting x86 platforms, you can use either `_clear87` or `_clearfp`.  \n  \n These functions are deprecated when compiling with [/clr (Common Language Runtime Compilation)](../../build/reference/clr-common-language-runtime-compilation.md) or `/clr:pure` because the common language runtime only supports the default floating-point precision.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_clear87`|\\<float.h>|  \n|`_clearfp`|\\<float.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_clear87.c  \n// compile with: /Od  \n  \n// This program creates various floating-point   \n// problems, then uses _clear87 to report on these problems.  \n// Compile this program with Optimizations disabled (/Od).   \n// Otherwise the optimizer will remove the code associated with   \n// the unused floating-point values.  \n//  \n  \n#include <stdio.h>  \n#include <float.h>  \n  \nint main( void )  \n{  \n   double a = 1e-40, b;  \n   float x, y;  \n  \n   printf( \"Status: %.4x - clear\\n\", _clear87()  );  \n  \n   // Store into y is inexact and underflows:  \n   y = a;  \n   printf( \"Status: %.4x - inexact, underflow\\n\", _clear87() );  \n  \n   // y is denormal:   \n   b = y;  \n   printf( \"Status: %.4x - denormal\\n\", _clear87() );  \n}  \n```  \n  \n```Output  \nStatus: 0000 - clear  \nStatus: 0003 - inexact, underflow  \nStatus: 80000 - denormal  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [_control87, _controlfp, \\__control87_2](../../c-runtime-library/reference/control87-controlfp-control87-2.md)   \n [_status87, _statusfp, _statusfp2](../../c-runtime-library/reference/status87-statusfp-statusfp2.md)"}