{"nodes":[{"pos":[12,45],"content":"deprecated (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"deprecated (C++) | Microsoft Docs","pos":[0,33]}]},{"content":"deprecated (C++)","pos":[689,705]},{"pos":[706,885],"content":"(Microsoft specific) With the exceptions noted below, the <bpt id=\"p1\">**</bpt>deprecated<ept id=\"p1\">**</ept> declaration offers the same functionality as the <bpt id=\"p2\">[</bpt>deprecated<ept id=\"p2\">](../preprocessor/deprecated-c-cpp.md)</ept> pragma:","source":"(Microsoft specific) With the exceptions noted below, the **deprecated** declaration offers the same functionality as the [deprecated](../preprocessor/deprecated-c-cpp.md) pragma:"},{"pos":[895,1072],"content":"The <bpt id=\"p1\">**</bpt>deprecated<ept id=\"p1\">**</ept> declaration lets you specify particular forms of function overloads as deprecated, whereas the pragma form applies to all overloaded forms of a function name.","source":"The **deprecated** declaration lets you specify particular forms of function overloads as deprecated, whereas the pragma form applies to all overloaded forms of a function name."},{"content":"The <bpt id=\"p1\">**</bpt>deprecated<ept id=\"p1\">**</ept> declaration lets you specify a message that will display at compile time.","pos":[1082,1174],"source":"The **deprecated** declaration lets you specify a message that will display at compile time."},{"content":"The text of the message can be from a macro.","pos":[1175,1219]},{"pos":[1229,1300],"content":"Macros can only be marked as deprecated with the <bpt id=\"p1\">**</bpt>deprecated<ept id=\"p1\">**</ept> pragma.","source":"Macros can only be marked as deprecated with the **deprecated** pragma."},{"pos":[1307,1469],"content":"If the compiler encounters the use of a deprecated identifier, a <bpt id=\"p1\">[</bpt>C4996<ept id=\"p1\">](../error-messages/compiler-warnings/compiler-warning-level-3-c4996.md)</ept> warning is thrown.","source":"If the compiler encounters the use of a deprecated identifier, a [C4996](../error-messages/compiler-warnings/compiler-warning-level-3-c4996.md) warning is thrown."},{"content":"Example","pos":[1478,1485]},{"content":"The following sample shows how to mark functions as deprecated, and how to specify a message that will be displayed at compile time, when the deprecated function is used.","pos":[1489,1659]},{"content":"Example","pos":[2085,2092]},{"content":"The following sample shows how to mark classes as deprecated, and how to specify a message that will be displayed at compile time, when the deprecated class is used.","pos":[2096,2261]},{"content":"See Also","pos":[2543,2551]},{"content":"__declspec","pos":[2556,2566]},{"content":"Keywords","pos":[2593,2601]}],"content":"---\ntitle: \"deprecated (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"deprecated\"\n  - \"deprecated_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__declspec keyword [C++], deprecated\"\n  - \"deprecated __declspec keyword\"\nms.assetid: beef1129-9434-4cb3-8392-f1eb29e04805\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# deprecated (C++)\n(Microsoft specific) With the exceptions noted below, the **deprecated** declaration offers the same functionality as the [deprecated](../preprocessor/deprecated-c-cpp.md) pragma:  \n  \n-   The **deprecated** declaration lets you specify particular forms of function overloads as deprecated, whereas the pragma form applies to all overloaded forms of a function name.  \n  \n-   The **deprecated** declaration lets you specify a message that will display at compile time. The text of the message can be from a macro.  \n  \n-   Macros can only be marked as deprecated with the **deprecated** pragma.  \n  \n If the compiler encounters the use of a deprecated identifier, a [C4996](../error-messages/compiler-warnings/compiler-warning-level-3-c4996.md) warning is thrown.  \n  \n## Example  \n The following sample shows how to mark functions as deprecated, and how to specify a message that will be displayed at compile time, when the deprecated function is used.  \n  \n```  \n// deprecated.cpp  \n// compile with: /W3  \n#define MY_TEXT \"function is deprecated\"  \nvoid func1(void) {}  \n__declspec(deprecated) void func1(int) {}  \n__declspec(deprecated(\"** this is a deprecated function **\")) void func2(int) {}  \n__declspec(deprecated(MY_TEXT)) void func3(int) {}  \n  \nint main() {  \n   func1();  \n   func1(1);   // C4996  \n   func2(1);   // C4996  \n   func3(1);   // C4996  \n}  \n```  \n  \n## Example  \n The following sample shows how to mark classes as deprecated, and how to specify a message that will be displayed at compile time, when the deprecated class is used.  \n  \n```  \n// deprecate_class.cpp  \n// compile with: /W3  \nstruct __declspec(deprecated) X {  \n   void f(){}  \n};  \n  \nstruct __declspec(deprecated(\"** X2 is deprecated **\")) X2 {  \n   void f(){}  \n};  \n  \nint main() {  \n   X x;   // C4996  \n   X2 x2;   // C4996  \n}  \n```  \n  \n## See Also  \n [__declspec](../cpp/declspec.md)   \n [Keywords](../cpp/keywords-cpp.md)"}