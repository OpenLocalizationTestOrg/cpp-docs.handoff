{"nodes":[{"pos":[12,67],"content":"_atoi64, _atoi64_l, _wtoi64, _wtoi64_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_atoi64, _atoi64_l, _wtoi64, _wtoi64_l | Microsoft Docs","pos":[0,55]}]},{"content":"_atoi64, _atoi64_l, _wtoi64, _wtoi64_l","pos":[1452,1490]},{"content":"Converts a string to a 64-bit integer.","pos":[1491,1529]},{"content":"Syntax","pos":[1538,1544]},{"content":"Parameters","pos":[1808,1818]},{"content":"String to be converted.","pos":[1831,1854]},{"content":"Locale to use.","pos":[1873,1887]},{"content":"Return Value","pos":[1896,1908]},{"content":"Each function returns the <ph id=\"ph1\">`__int64`</ph> value produced by interpreting the input characters as a number.","pos":[1912,2012],"source":"Each function returns the `__int64` value produced by interpreting the input characters as a number."},{"content":"The return value is 0 for <ph id=\"ph1\">`_atoi64`</ph> if the input cannot be converted to a value of that type.","pos":[2013,2106],"source":" The return value is 0 for `_atoi64` if the input cannot be converted to a value of that type."},{"pos":[2113,2276],"content":"In the case of overflow with large positive integral values, <ph id=\"ph1\">`_atoi64`</ph> returns <ph id=\"ph2\">`I64_MAX`</ph> and <ph id=\"ph3\">`I64_MIN`</ph> in the case of overflow with large negative integral values.","source":"In the case of overflow with large positive integral values, `_atoi64` returns `I64_MAX` and `I64_MIN` in the case of overflow with large negative integral values."},{"content":"In all out-of-range cases, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`ERANGE`</ph>.","pos":[2283,2337],"source":"In all out-of-range cases, `errno` is set to `ERANGE`."},{"content":"If the parameter passed in is <ph id=\"ph1\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2338,2506],"source":" If the parameter passed in is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return 0.","pos":[2507,2597],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return 0."},{"content":"Remarks","pos":[2606,2613]},{"content":"These functions convert a character string to a 64-bit integer value.","pos":[2617,2686]},{"content":"The input string is a sequence of characters that can be interpreted as a numerical value of the specified type.","pos":[2693,2805]},{"content":"The function stops reading the input string at the first character that it cannot recognize as part of a number.","pos":[2806,2918]},{"content":"This character might be the null character ('\\0' or L'\\0') terminating the string.","pos":[2919,3001]},{"pos":[3008,3063],"content":"The <ph id=\"ph1\">`str`</ph> argument to <ph id=\"ph2\">`_atoi64`</ph> has the following form:","source":"The `str` argument to `_atoi64` has the following form:"},{"pos":[3117,3264],"content":"A <ph id=\"ph1\">`whitespace`</ph> consists of space or tab characters, which are ignored; <ph id=\"ph2\">`sign`</ph> is either plus (+) or minus (–); and <ph id=\"ph3\">`digits`</ph> are one or more digits.","source":"A `whitespace` consists of space or tab characters, which are ignored; `sign` is either plus (+) or minus (–); and `digits` are one or more digits."},{"pos":[3281,3367],"content":"is identical to <ph id=\"ph1\">`_atoi64`</ph> except that it takes a wide character string as a parameter.","source":" is identical to `_atoi64` except that it takes a wide character string as a parameter."},{"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current locale.","pos":[3374,3523],"source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current locale."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[3524,3594],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"content":"Generic-Text Routine Mappings","pos":[3604,3633]},{"content":"Tchar.h routine","pos":[3640,3655]},{"content":"_UNICODE and _MBCS not defined","pos":[3656,3686]},{"content":"_MBCS defined","pos":[3687,3700]},{"content":"_UNICODE defined","pos":[3701,3717]},{"content":"Requirements","pos":[3926,3938]},{"content":"Routines","pos":[3945,3953]},{"content":"Required header","pos":[3954,3969]},{"pos":[4024,4025],"content":","},{"content":"stdlib.h&gt;","pos":[4040,4049],"source":"stdlib.h>"},{"pos":[4063,4064],"content":","},{"content":"stdlib.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4079,4102],"source":"stdlib.h> or \\<wchar.h>"},{"content":"Example","pos":[4112,4119]},{"pos":[4123,4237],"content":"This program shows how numbers stored as strings can be converted to numeric values using the <ph id=\"ph1\">`_atoi64`</ph> functions.","source":"This program shows how numbers stored as strings can be converted to numeric values using the `_atoi64` functions."},{"content":".NET Framework Equivalent","pos":[5503,5528]},{"content":"System::Convert::ToInt64","pos":[5539,5563]},{"content":"System::Convert::ToUInt64","pos":[5645,5670]},{"content":"See Also","pos":[5751,5759]},{"content":"Data Conversion","pos":[5764,5779]},{"content":"Floating-Point Support","pos":[5830,5852]},{"content":"Locale","pos":[5910,5916]},{"content":"_ecvt","pos":[5958,5963]},{"content":"_fcvt","pos":[6013,6018]},{"content":"_gcvt","pos":[6068,6073]},{"content":"setlocale, _wsetlocale","pos":[6123,6145]},{"content":"_atodbl, _atodbl_l, _atoldbl, _atoldbl_l, _atoflt, _atoflt_l","pos":[6211,6271]}],"content":"---\ntitle: \"_atoi64, _atoi64_l, _wtoi64, _wtoi64_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_atoi64_l\"\n  - \"_wtoi64\"\n  - \"_atoi64\"\n  - \"_wtoi64_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_atoi64\"\n  - \"_tstoi64\"\n  - \"_ttoi64\"\n  - \"wtoi64\"\n  - \"_tstoi64_l\"\n  - \"atoi64\"\n  - \"_wtoi64_l\"\n  - \"_wtoi64\"\n  - \"wtoi64_l\"\n  - \"_atoi64_l\"\n  - \"atoi64_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"tstoi64 function\"\n  - \"wtoi64 function\"\n  - \"atoi64_l function\"\n  - \"_ttoi64 function\"\n  - \"string conversion, to integers\"\n  - \"wtoi64_l function\"\n  - \"atoi64 function\"\n  - \"_tstoi64 function\"\n  - \"_atoi64_l function\"\n  - \"_wtoi64_l function\"\n  - \"ttoi64 function\"\n  - \"_wtoi64 function\"\n  - \"_atoi64 function\"\nms.assetid: 2c3e30fd-545d-4222-8364-0c5905df9526\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _atoi64, _atoi64_l, _wtoi64, _wtoi64_l\nConverts a string to a 64-bit integer.  \n  \n## Syntax  \n  \n```  \n__int64 _atoi64(  \n   const char *str   \n);  \n__int64 _wtoi64(  \n   const wchar_t *str   \n);  \n__int64 _atoi64_l(  \n   const char *str,  \n   _locale_t locale  \n);  \n__int64 _wtoi64_l(  \n   const wchar_t *str,  \n   _locale_t locale  \n);  \n```  \n  \n#### Parameters  \n `str`  \n String to be converted.  \n  \n `locale`  \n Locale to use.  \n  \n## Return Value  \n Each function returns the `__int64` value produced by interpreting the input characters as a number. The return value is 0 for `_atoi64` if the input cannot be converted to a value of that type.  \n  \n In the case of overflow with large positive integral values, `_atoi64` returns `I64_MAX` and `I64_MIN` in the case of overflow with large negative integral values.  \n  \n In all out-of-range cases, `errno` is set to `ERANGE`. If the parameter passed in is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL` and return 0.  \n  \n## Remarks  \n These functions convert a character string to a 64-bit integer value.  \n  \n The input string is a sequence of characters that can be interpreted as a numerical value of the specified type. The function stops reading the input string at the first character that it cannot recognize as part of a number. This character might be the null character ('\\0' or L'\\0') terminating the string.  \n  \n The `str` argument to `_atoi64` has the following form:  \n  \n```  \n[whitespace] [sign] [digits]]  \n```  \n  \n A `whitespace` consists of space or tab characters, which are ignored; `sign` is either plus (+) or minus (–); and `digits` are one or more digits.  \n  \n `_wtoi64` is identical to `_atoi64` except that it takes a wide character string as a parameter.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current locale. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tstoi64`|`_atoi64`|`_atoi64`|`_wtoi64`|  \n|`_ttoi64`|`_atoi64`|`_atoi64`|`_wtoi64`|  \n  \n## Requirements  \n  \n|Routines|Required header|  \n|--------------|---------------------|  \n|`_atoi64`, `_atoi64_l`|\\<stdlib.h>|  \n|`_wtoi64`, `_wtoi64_l`|\\<stdlib.h> or \\<wchar.h>|  \n  \n## Example  \n This program shows how numbers stored as strings can be converted to numeric values using the `_atoi64` functions.  \n  \n```  \n// crt_atoi64.c  \n// This program shows how numbers stored as  \n// strings can be converted to numeric values  \n// using the _atoi64 functions.  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <errno.h>  \n  \nint main( void )  \n{  \n    char    *str = NULL;  \n    __int64 value = 0;  \n  \n    // An example of the _atoi64 function  \n    // with leading and trailing white spaces.  \n    str = \"  -2309 \";  \n    value = _atoi64( str );  \n    printf( \"Function: _atoi64( \\\"%s\\\" ) = %d\\n\", str, value );  \n  \n    // Another example of the _atoi64 function   \n    // with an arbitrary decimal point.  \n    str = \"314127.64\";  \n    value = _atoi64( str );  \n    printf( \"Function: _atoi64( \\\"%s\\\" ) = %d\\n\", str, value );  \n  \n    // Another example of the _atoi64 function  \n    // with an overflow condition occurring.  \n    str = \"3336402735171707160320\";  \n    value = _atoi64( str );  \n    printf( \"Function: _atoi64( \\\"%s\\\" ) = %d\\n\", str, value );  \n    if (errno == ERANGE)  \n    {  \n       printf(\"Overflow condition occurred.\\n\");  \n    }  \n}  \n```  \n  \n```Output  \nFunction: _atoi64( \"  -2309 \" ) = -2309  \nFunction: _atoi64( \"314127.64\" ) = 314127  \nFunction: _atoi64( \"3336402735171707160320\" ) = -1  \nOverflow condition occurred.  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Convert::ToInt64](https://msdn.microsoft.com/en-us/library/system.convert.toint64.aspx)  \n  \n-   [System::Convert::ToUInt64](https://msdn.microsoft.com/en-us/library/system.convert.touint64.aspx)  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [_ecvt](../../c-runtime-library/reference/ecvt.md)   \n [_fcvt](../../c-runtime-library/reference/fcvt.md)   \n [_gcvt](../../c-runtime-library/reference/gcvt.md)   \n [setlocale, _wsetlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md)   \n [_atodbl, _atodbl_l, _atoldbl, _atoldbl_l, _atoflt, _atoflt_l](../../c-runtime-library/reference/atodbl-atodbl-l-atoldbl-atoldbl-l-atoflt-atoflt-l.md)"}