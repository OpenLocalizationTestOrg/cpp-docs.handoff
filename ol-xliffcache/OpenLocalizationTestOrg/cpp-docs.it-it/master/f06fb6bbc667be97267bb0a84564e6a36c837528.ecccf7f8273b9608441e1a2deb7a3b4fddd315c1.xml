{"nodes":[{"pos":[12,54],"content":"istreambuf_iterator Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"istreambuf_iterator Class | Microsoft Docs","pos":[0,42]}]},{"pos":[731,756],"content":"istreambuf_iterator Class","linkify":"istreambuf_iterator Class","nodes":[{"content":"istreambuf_iterator Class","pos":[0,25]}]},{"pos":[757,1005],"content":"The template class istreambuf_iterator describes an input iterator object that extracts character elements from an input stream buffer, which it accesses through an object it stores, of type pointer to <ph id=\"ph1\">`basic_streambuf`</ph><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Traits<ept id=\"p2\">**</ept>&gt;.","source":"The template class istreambuf_iterator describes an input iterator object that extracts character elements from an input stream buffer, which it accesses through an object it stores, of type pointer to `basic_streambuf`\\< **CharType**, **Traits**>."},{"pos":[1014,1020],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1235,1245],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type that represents the character type for the istreambuf_iterator.","pos":[1263,1335]},{"content":"The type that represents the character type for the istreambuf_iterator.","pos":[1354,1426]},{"content":"This argument is optional and the default value is <ph id=\"ph1\">`char_traits`</ph><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p1\">*</bpt>CharType&gt;.<ept id=\"p1\">*</ept>","pos":[1427,1506],"source":" This argument is optional and the default value is `char_traits`\\< *CharType>.*"},{"pos":[1515,1522],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The istreambuf_iterator class must satisfy the requirements for an input iterator.","pos":[1526,1608]},{"content":"After constructing or incrementing an object of class istreambuf_iterator with a non-null stored pointer, the object effectively attempts to extract and store an object of type <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept> from the associated input stream.","pos":[1615,1838],"source":"After constructing or incrementing an object of class istreambuf_iterator with a non-null stored pointer, the object effectively attempts to extract and store an object of type **CharType** from the associated input stream."},{"content":"The extraction may be delayed, however, until the object is actually dereferenced or copied.","pos":[1839,1931]},{"content":"If the extraction fails, the object effectively replaces the stored pointer with a null pointer, thus making an end-of-sequence indicator.","pos":[1932,2070]},{"pos":[2080,2092],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[2113,2177],"content":"<bpt id=\"p1\">[</bpt>istreambuf_iterator<ept id=\"p1\">](#istreambuf_iterator__istreambuf_iterator)</ept>","source":"[istreambuf_iterator](#istreambuf_iterator__istreambuf_iterator)"},{"pos":[2178,2275],"content":"Constructs an <ph id=\"ph1\">`istreambuf_iterator`</ph> that is initialized to read characters from the input stream.","source":"Constructs an `istreambuf_iterator` that is initialized to read characters from the input stream."},{"pos":[2286,2294],"content":"Typedefs","linkify":"Typedefs","nodes":[{"content":"Typedefs","pos":[0,8]}]},{"pos":[2315,2359],"content":"<bpt id=\"p1\">[</bpt>char_type<ept id=\"p1\">](#istreambuf_iterator__char_type)</ept>","source":"[char_type](#istreambuf_iterator__char_type)"},{"pos":[2360,2433],"content":"A type that provides for the character type of the <ph id=\"ph1\">`ostreambuf_iterator`</ph>.","source":"A type that provides for the character type of the `ostreambuf_iterator`."},{"pos":[2438,2480],"content":"<bpt id=\"p1\">[</bpt>int_type<ept id=\"p1\">](#istreambuf_iterator__int_type)</ept>","source":"[int_type](#istreambuf_iterator__int_type)"},{"pos":[2481,2547],"content":"A type that provides an integer type for an <ph id=\"ph1\">`istreambuf_iterator`</ph>.","source":"A type that provides an integer type for an `istreambuf_iterator`."},{"pos":[2552,2602],"content":"<bpt id=\"p1\">[</bpt>istream_type<ept id=\"p1\">](#istreambuf_iterator__istream_type)</ept>","source":"[istream_type](#istreambuf_iterator__istream_type)"},{"pos":[2603,2670],"content":"A type that provides for the stream type of the <ph id=\"ph1\">`istream_iterator`</ph>.","source":"A type that provides for the stream type of the `istream_iterator`."},{"pos":[2675,2729],"content":"<bpt id=\"p1\">[</bpt>streambuf_type<ept id=\"p1\">](#istreambuf_iterator__streambuf_type)</ept>","source":"[streambuf_type](#istreambuf_iterator__streambuf_type)"},{"pos":[2730,2800],"content":"A type that provides for the stream type of the <ph id=\"ph1\">`istreambuf_iterator`</ph>.","source":"A type that provides for the stream type of the `istreambuf_iterator`."},{"pos":[2805,2895],"content":"<bpt id=\"p1\">[</bpt>traits_type<ept id=\"p1\">](../standard-library/istream-iterator-class.md#istream_iterator__traits_type)</ept>","source":"[traits_type](../standard-library/istream-iterator-class.md#istream_iterator__traits_type)"},{"pos":[2896,2973],"content":"A type that provides for the character traits type of the <ph id=\"ph1\">`istream_iterator`</ph>.","source":"A type that provides for the character traits type of the `istream_iterator`."},{"pos":[2984,3000],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[3021,3057],"content":"<bpt id=\"p1\">[</bpt>equal<ept id=\"p1\">](#istreambuf_iterator__equal)</ept>","source":"[equal](#istreambuf_iterator__equal)"},{"content":"Tests for equality between two input stream buffer iterators.","pos":[3058,3119]},{"pos":[3130,3139],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"pos":[3160,3208],"content":"<bpt id=\"p1\">[</bpt>operator*<ept id=\"p1\">](#istreambuf_iterator__operator_star)</ept>","source":"[operator*](#istreambuf_iterator__operator_star)"},{"content":"The dereferencing operator returns the next character in the stream.","pos":[3209,3277]},{"pos":[3282,3334],"content":"<bpt id=\"p1\">[</bpt>operator++<ept id=\"p1\">](#istreambuf_iterator__operator_add_add)</ept>","source":"[operator++](#istreambuf_iterator__operator_add_add)"},{"content":"Either returns the next character from the input stream or copies the object before incrementing it and returns the copy.","pos":[3335,3456]},{"pos":[3461,3510],"content":"<bpt id=\"p1\">[</bpt>operator-&gt;<ept id=\"p1\">](#istreambuf_iterator__operator-_gt_)</ept>","source":"[operator->](#istreambuf_iterator__operator-_gt_)"},{"content":"Returns the value of a member, if any.","pos":[3511,3549]},{"pos":[3559,3571],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3575,3598],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header:** \\<iterator>"},{"pos":[3605,3623],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3633,3710],"content":"<bpt id=\"p1\">&lt;a name=\"istreambuf_iterator__char_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  istreambuf_iterator::char_type","linkify":"<a name=\"istreambuf_iterator__char_type\"></a>  istreambuf_iterator::char_type","source":"<a name=\"istreambuf_iterator__char_type\"></a>  istreambuf_iterator::char_type"},{"pos":[3714,3787],"content":"A type that provides for the character type of the <ph id=\"ph1\">`ostreambuf_iterator`</ph>.","source":"A type that provides for the character type of the `ostreambuf_iterator`."},{"pos":[3838,3845],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3849,3911],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **CharType**."},{"pos":[3921,3928],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4861,4930],"content":"<bpt id=\"p1\">&lt;a name=\"istreambuf_iterator__equal\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  istreambuf_iterator::equal","linkify":"<a name=\"istreambuf_iterator__equal\"></a>  istreambuf_iterator::equal","source":"<a name=\"istreambuf_iterator__equal\"></a>  istreambuf_iterator::equal"},{"content":"Tests for equivalence between two input stream buffer iterators.","pos":[4934,4998]},{"pos":[5091,5101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The iterator for which to check for equality.","pos":[5116,5161]},{"pos":[5171,5183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5187,5319],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if both <ph id=\"ph1\">`istreambuf_iterator`</ph>s are end-of-stream iterators or if neither is an end-of-stream iterator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if both `istreambuf_iterator`s are end-of-stream iterators or if neither is an end-of-stream iterator; otherwise **false**."},{"pos":[5329,5336],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A range is defined by the <ph id=\"ph1\">`istreambuf_iterator`</ph> to the current position and the end-of-stream iterator, but since all non-end-of stream iterators are equivalent under the <bpt id=\"p1\">**</bpt>equal<ept id=\"p1\">**</ept> member function, it is not possible to define any subranges using <ph id=\"ph2\">`istreambuf_iterator`</ph>s.","pos":[5340,5610],"source":"A range is defined by the `istreambuf_iterator` to the current position and the end-of-stream iterator, but since all non-end-of stream iterators are equivalent under the **equal** member function, it is not possible to define any subranges using `istreambuf_iterator`s."},{"content":"The <ph id=\"ph1\">`==`</ph> and <ph id=\"ph2\">`!=`</ph> operators have the same semantics.","pos":[5611,5663],"source":" The `==` and `!=` operators have the same semantics."},{"pos":[5673,5680],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6338,6413],"content":"<bpt id=\"p1\">&lt;a name=\"istreambuf_iterator__int_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  istreambuf_iterator::int_type","linkify":"<a name=\"istreambuf_iterator__int_type\"></a>  istreambuf_iterator::int_type","source":"<a name=\"istreambuf_iterator__int_type\"></a>  istreambuf_iterator::int_type"},{"pos":[6417,6483],"content":"A type that provides an integer type for an <ph id=\"ph1\">`istreambuf_iterator`</ph>.","source":"A type that provides an integer type for an `istreambuf_iterator`."},{"pos":[6555,6562],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6566,6613],"content":"The type is a synonym for <bpt id=\"p1\">**</bpt>Traits::int_type<ept id=\"p1\">**</ept>.","source":"The type is a synonym for **Traits::int_type**."},{"pos":[6623,6630],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6973,7056],"content":"<bpt id=\"p1\">&lt;a name=\"istreambuf_iterator__istream_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  istreambuf_iterator::istream_type","linkify":"<a name=\"istreambuf_iterator__istream_type\"></a>  istreambuf_iterator::istream_type","source":"<a name=\"istreambuf_iterator__istream_type\"></a>  istreambuf_iterator::istream_type"},{"pos":[7060,7130],"content":"A type that provides for the stream type of the <ph id=\"ph1\">`istreambuf_iterator`</ph>.","source":"A type that provides for the stream type of the `istreambuf_iterator`."},{"pos":[7207,7214],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7218,7288],"content":"The type is a synonym for <ph id=\"ph1\">`basic_istream`</ph><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Traits<ept id=\"p2\">**</ept>&gt;.","source":"The type is a synonym for `basic_istream`\\< **CharType**, **Traits**>."},{"pos":[7298,7305],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7310,7435],"content":"See <bpt id=\"p1\">[</bpt>istreambuf_iterator<ept id=\"p1\">](#istreambuf_iterator__istreambuf_iterator)</ept> for an example of how to declare and use <ph id=\"ph1\">`istream_type`</ph>.","source":"See [istreambuf_iterator](#istreambuf_iterator__istreambuf_iterator) for an example of how to declare and use `istream_type`."},{"pos":[7445,7542],"content":"<bpt id=\"p1\">&lt;a name=\"istreambuf_iterator__istreambuf_iterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  istreambuf_iterator::istreambuf_iterator","linkify":"<a name=\"istreambuf_iterator__istreambuf_iterator\"></a>  istreambuf_iterator::istreambuf_iterator","source":"<a name=\"istreambuf_iterator__istreambuf_iterator\"></a>  istreambuf_iterator::istreambuf_iterator"},{"content":"Constructs an istreambuf_iterator that is initialized to read characters from the input stream.","pos":[7546,7641]},{"pos":[7771,7781],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The input stream buffer to which the <ph id=\"ph1\">`istreambuf_iterator`</ph> is being attached.","pos":[7797,7874],"source":" The input stream buffer to which the `istreambuf_iterator` is being attached."},{"content":"The input stream to which the <ph id=\"ph1\">`istreambuf_iterator`</ph> is being attached.","pos":[7892,7962],"source":" The input stream to which the `istreambuf_iterator` is being attached."},{"pos":[7972,7979],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first constructor initializes the input stream-buffer pointer with <ph id=\"ph1\">`strbuf`</ph>.","pos":[7983,8063],"source":"The first constructor initializes the input stream-buffer pointer with `strbuf`."},{"content":"The second constructor initializes the input stream-buffer pointer with <ph id=\"ph1\">`_Istr`</ph>.","pos":[8064,8144],"source":" The second constructor initializes the input stream-buffer pointer with `_Istr`."},{"content":"<ph id=\"ph1\">`rdbuf`</ph>, and then eventually attempts to extract and store an object of type <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>.","pos":[8145,8235],"source":"`rdbuf`, and then eventually attempts to extract and store an object of type **CharType**."},{"pos":[8245,8252],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9195,9276],"content":"<bpt id=\"p1\">&lt;a name=\"istreambuf_iterator__operator_star\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  istreambuf_iterator::operator*","linkify":"<a name=\"istreambuf_iterator__operator_star\"></a>  istreambuf_iterator::operator*","source":"<a name=\"istreambuf_iterator__operator_star\"></a>  istreambuf_iterator::operator*"},{"content":"The dereferencing operator returns the next character in the stream.","pos":[9280,9348]},{"pos":[9399,9411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The next character in the stream.","pos":[9415,9448]},{"pos":[9458,9465],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10177,10262],"content":"<bpt id=\"p1\">&lt;a name=\"istreambuf_iterator__operator_add_add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  istreambuf_iterator::operator++","linkify":"<a name=\"istreambuf_iterator__operator_add_add\"></a>  istreambuf_iterator::operator++","source":"<a name=\"istreambuf_iterator__operator_add_add\"></a>  istreambuf_iterator::operator++"},{"content":"Either returns the next character from the input stream or copies the object before incrementing it and returns the copy.","pos":[10266,10387]},{"pos":[10518,10530],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10534,10602],"content":"An <ph id=\"ph1\">`istreambuf_iterator`</ph> or a reference to an <ph id=\"ph2\">`istreambuf_iterator`</ph>.","source":"An `istreambuf_iterator` or a reference to an `istreambuf_iterator`."},{"pos":[10612,10619],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first operator eventually attempts to extract and store an object of type <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept> from the associated input stream.","pos":[10623,10747],"source":"The first operator eventually attempts to extract and store an object of type **CharType** from the associated input stream."},{"content":"The second operator makes a copy of the object, increments the object, and then returns the copy.","pos":[10748,10845]},{"pos":[10855,10862],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11568,11653],"content":"<bpt id=\"p1\">&lt;a name=\"istreambuf_iterator__operator-_gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  istreambuf_iterator::operator-<ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"istreambuf_iterator__operator-_gt_\"></a>  istreambuf_iterator::operator-&gt;","source":"<a name=\"istreambuf_iterator__operator-_gt_\"></a>  istreambuf_iterator::operator-&gt;"},{"content":"Returns the value of a member, if any.","pos":[11657,11695]},{"pos":[11750,11762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11766,11801],"content":"The operator returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;</ph><ph id=\"ph2\">\\*</ph><ph id=\"ph3\">\\*</ph>this<ept id=\"p1\">**</ept>.","source":"The operator returns **&\\*\\*this**."},{"pos":[11811,11898],"content":"<bpt id=\"p1\">&lt;a name=\"istreambuf_iterator__streambuf_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  istreambuf_iterator::streambuf_type","linkify":"<a name=\"istreambuf_iterator__streambuf_type\"></a>  istreambuf_iterator::streambuf_type","source":"<a name=\"istreambuf_iterator__streambuf_type\"></a>  istreambuf_iterator::streambuf_type"},{"content":"A type that provides for the stream type of the istreambuf_iterator.","pos":[11902,11970]},{"pos":[12051,12058],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12062,12134],"content":"The type is a synonym for <ph id=\"ph1\">`basic_streambuf`</ph><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p1\">**</bpt>CharType<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Traits<ept id=\"p2\">**</ept>&gt;.","source":"The type is a synonym for `basic_streambuf`\\< **CharType**, **Traits**>."},{"pos":[12144,12151],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12156,12286],"content":"See <bpt id=\"p1\">[</bpt>istreambuf_iterator<ept id=\"p1\">](#istreambuf_iterator__istreambuf_iterator)</ept> for an example of how to declare and use <bpt id=\"p2\">**</bpt>istreambuf_type<ept id=\"p2\">**</ept>.","source":"See [istreambuf_iterator](#istreambuf_iterator__istreambuf_iterator) for an example of how to declare and use **istreambuf_type**."},{"pos":[12296,12377],"content":"<bpt id=\"p1\">&lt;a name=\"istreambuf_iterator__traits_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  istreambuf_iterator::traits_type","linkify":"<a name=\"istreambuf_iterator__traits_type\"></a>  istreambuf_iterator::traits_type","source":"<a name=\"istreambuf_iterator__traits_type\"></a>  istreambuf_iterator::traits_type"},{"pos":[12381,12458],"content":"A type that provides for the character traits type of the <ph id=\"ph1\">`istream_iterator`</ph>.","source":"A type that provides for the character traits type of the `istream_iterator`."},{"pos":[12509,12516],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12520,12580],"content":"The type is a synonym for the template parameter <bpt id=\"p1\">**</bpt>Traits<ept id=\"p1\">**</ept>.","source":"The type is a synonym for the template parameter **Traits**."},{"pos":[12590,12597],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13531,13539],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>iterator Struct<ept id=\"p1\">](../standard-library/iterator-struct.md)</ept><ph id=\"ph1\"> </ph>","pos":[13543,13601],"source":"[iterator Struct](../standard-library/iterator-struct.md) "},{"content":"<bpt id=\"p1\"> [</bpt><ph id=\"ph1\">\\&lt;</ph>iterator&gt;<ept id=\"p1\">](../standard-library/iterator.md)</ept><ph id=\"ph2\"> </ph>","pos":[13604,13652],"source":" [\\<iterator>](../standard-library/iterator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[13655,13766],"source":" [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[13769,13857],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"istreambuf_iterator Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"istreambuf_iterator\"\n  - \"std.istreambuf_iterator\"\n  - \"std::istreambuf_iterator\"\n  - \"streambuf/std::istreambuf_iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"istreambuf_iterator class\"\nms.assetid: 39002da2-61a6-48a5-9d0c-5df8271f6038\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# istreambuf_iterator Class\nThe template class istreambuf_iterator describes an input iterator object that extracts character elements from an input stream buffer, which it accesses through an object it stores, of type pointer to `basic_streambuf`\\< **CharType**, **Traits**>.  \n  \n## Syntax  \n  \n```\ntemplate <class CharType class Traits = char_traits <CharType>>  \nclass istreambuf_iterator \n: public iterator<input_iterator_tag, CharType, typename Traits ::off_type, CharType*, CharType&>\n```  \n  \n#### Parameters  \n `CharType`  \n The type that represents the character type for the istreambuf_iterator.  \n  \n `Traits`  \n The type that represents the character type for the istreambuf_iterator. This argument is optional and the default value is `char_traits`\\< *CharType>.*  \n  \n## Remarks  \n The istreambuf_iterator class must satisfy the requirements for an input iterator.  \n  \n After constructing or incrementing an object of class istreambuf_iterator with a non-null stored pointer, the object effectively attempts to extract and store an object of type **CharType** from the associated input stream. The extraction may be delayed, however, until the object is actually dereferenced or copied. If the extraction fails, the object effectively replaces the stored pointer with a null pointer, thus making an end-of-sequence indicator.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[istreambuf_iterator](#istreambuf_iterator__istreambuf_iterator)|Constructs an `istreambuf_iterator` that is initialized to read characters from the input stream.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[char_type](#istreambuf_iterator__char_type)|A type that provides for the character type of the `ostreambuf_iterator`.|  \n|[int_type](#istreambuf_iterator__int_type)|A type that provides an integer type for an `istreambuf_iterator`.|  \n|[istream_type](#istreambuf_iterator__istream_type)|A type that provides for the stream type of the `istream_iterator`.|  \n|[streambuf_type](#istreambuf_iterator__streambuf_type)|A type that provides for the stream type of the `istreambuf_iterator`.|  \n|[traits_type](../standard-library/istream-iterator-class.md#istream_iterator__traits_type)|A type that provides for the character traits type of the `istream_iterator`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[equal](#istreambuf_iterator__equal)|Tests for equality between two input stream buffer iterators.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator*](#istreambuf_iterator__operator_star)|The dereferencing operator returns the next character in the stream.|  \n|[operator++](#istreambuf_iterator__operator_add_add)|Either returns the next character from the input stream or copies the object before incrementing it and returns the copy.|  \n|[operator->](#istreambuf_iterator__operator-_gt_)|Returns the value of a member, if any.|  \n  \n## Requirements  \n **Header:** \\<iterator>  \n  \n **Namespace:** std  \n  \n##  <a name=\"istreambuf_iterator__char_type\"></a>  istreambuf_iterator::char_type  \n A type that provides for the character type of the `ostreambuf_iterator`.  \n  \n```\ntypedef CharType char_type;\n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **CharType**.  \n  \n### Example  \n  \n```cpp  \n// istreambuf_iterator_char_type.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n#include <algorithm>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   typedef istreambuf_iterator<char>::char_type CHT1;  \n   typedef istreambuf_iterator<char>::traits_type CHTR1;  \n  \n   cout << \"(Try the example: 'So many dots to be done'\\n\"  \n        << \" then an Enter key to insert into the output,\\n\"  \n        << \" & use a ctrl-Z Enter key combination to exit): \";  \n  \n   // istreambuf_iterator for input stream  \n   istreambuf_iterator< CHT1, CHTR1> charInBuf ( cin );  \n   ostreambuf_iterator<char> charOut ( cout );  \n  \n   // Used in conjunction with replace_copy algorithm  \n   // to insert into output stream and replace spaces  \n   // with dot-separators  \n   replace_copy ( charInBuf , istreambuf_iterator<char>( ),  \n        charOut , ' ' , '.' );  \n}  \n```  \n  \n##  <a name=\"istreambuf_iterator__equal\"></a>  istreambuf_iterator::equal  \n Tests for equivalence between two input stream buffer iterators.  \n  \n```\nbool equal(const istreambuf_iterator<CharType, Traits>& right) const;\n```  \n  \n### Parameters  \n `right`  \n The iterator for which to check for equality.  \n  \n### Return Value  \n **true** if both `istreambuf_iterator`s are end-of-stream iterators or if neither is an end-of-stream iterator; otherwise **false**.  \n  \n### Remarks  \n A range is defined by the `istreambuf_iterator` to the current position and the end-of-stream iterator, but since all non-end-of stream iterators are equivalent under the **equal** member function, it is not possible to define any subranges using `istreambuf_iterator`s. The `==` and `!=` operators have the same semantics.  \n  \n### Example  \n  \n```cpp  \n// istreambuf_iterator_equal.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   cout << \"(Try the example: 'Hello world!'\\n\"  \n        << \" then an Enter key to insert into the output,\\n\"  \n        << \" & use a ctrl-Z Enter key combination to exit): \";  \n  \n   istreambuf_iterator<char> charReadIn1 ( cin );  \n   istreambuf_iterator<char> charReadIn2 ( cin );  \n  \n   bool b1 = charReadIn1.equal ( charReadIn2 );  \n  \n   if (b1)  \n      cout << \"The iterators are equal.\" << endl;  \n   else  \n      cout << \"The iterators are not equal.\" << endl;  \n}  \n```  \n  \n##  <a name=\"istreambuf_iterator__int_type\"></a>  istreambuf_iterator::int_type  \n A type that provides an integer type for an `istreambuf_iterator`.  \n  \n```\ntypedef typename traits_type::int_type int_type;\n```  \n  \n### Remarks  \n The type is a synonym for **Traits::int_type**.  \n  \n### Example  \n  \n```cpp  \n// istreambuf_iterator_int_type.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   istreambuf_iterator<char>::int_type inttype1 = 100;  \n   cout << \"The inttype1 = \" << inttype1 << \".\" << endl;  \n}  \n\\* Output:   \nThe inttype1 = 100.  \n*\\  \n```  \n  \n##  <a name=\"istreambuf_iterator__istream_type\"></a>  istreambuf_iterator::istream_type  \n A type that provides for the stream type of the `istreambuf_iterator`.  \n  \n```\ntypedef basic_istream<CharType, Traits> istream_type;\n```  \n  \n### Remarks  \n The type is a synonym for `basic_istream`\\< **CharType**, **Traits**>.  \n  \n### Example  \n  See [istreambuf_iterator](#istreambuf_iterator__istreambuf_iterator) for an example of how to declare and use `istream_type`.  \n  \n##  <a name=\"istreambuf_iterator__istreambuf_iterator\"></a>  istreambuf_iterator::istreambuf_iterator  \n Constructs an istreambuf_iterator that is initialized to read characters from the input stream.  \n  \n```\nistreambuf_iterator(streambuf_type* strbuf = 0) throw();\nistreambuf_iterator(istream_type& _Istr) throw();\n```  \n  \n### Parameters  \n `strbuf`  \n The input stream buffer to which the `istreambuf_iterator` is being attached.  \n  \n `_Istr`  \n The input stream to which the `istreambuf_iterator` is being attached.  \n  \n### Remarks  \n The first constructor initializes the input stream-buffer pointer with `strbuf`. The second constructor initializes the input stream-buffer pointer with `_Istr`. `rdbuf`, and then eventually attempts to extract and store an object of type **CharType**.  \n  \n### Example  \n  \n```cpp  \n// istreambuf_iterator_istreambuf_iterator.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <algorithm>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // Following declarations will not compile:  \n   istreambuf_iterator<char>::istream_type &istrm = cin;  \n   istreambuf_iterator<char>::streambuf_type *strmbf = cin.rdbuf( );  \n  \n   cout << \"(Try the example: 'Oh what a world!'\\n\"  \n      << \" then an Enter key to insert into the output,\\n\"  \n      << \" & use a ctrl-Z Enter key combination to exit): \";  \n   istreambuf_iterator<char> charReadIn ( cin );  \n   ostreambuf_iterator<char> charOut ( cout );  \n  \n   // Used in conjunction with replace_copy algorithm  \n   // to insert into output stream and replace spaces  \n   // with hyphen-separators  \n   replace_copy ( charReadIn , istreambuf_iterator<char>( ),  \n      charOut , ' ' , '-' );  \n}  \n```  \n  \n##  <a name=\"istreambuf_iterator__operator_star\"></a>  istreambuf_iterator::operator*  \n The dereferencing operator returns the next character in the stream.  \n  \n```\nCharType operator*() const;\n```  \n  \n### Return Value  \n The next character in the stream.  \n  \n### Example  \n  \n```cpp  \n// istreambuf_iterator_operator_deref.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   cout << \"Type string of characters & enter to output it,\\n\"  \n      << \" with stream buffer iterators,(try: 'I'll be back.')\\n\"  \n      << \" repeat as many times as desired,\\n\"   \n      << \" then keystroke ctrl-Z Enter to exit program: \";  \n   istreambuf_iterator<char> inpos ( cin );  \n   istreambuf_iterator<char> endpos;  \n   ostreambuf_iterator<char> outpos ( cout );  \n   while ( inpos != endpos )  \n   {  \n *outpos = *inpos;   //Put value of outpos equal to inpos  \n      ++inpos;  \n      ++outpos;  \n   }  \n}  \n```  \n  \n##  <a name=\"istreambuf_iterator__operator_add_add\"></a>  istreambuf_iterator::operator++  \n Either returns the next character from the input stream or copies the object before incrementing it and returns the copy.  \n  \n```\nistreambuf_iterator<CharType, Traits>& operator++();\nistreambuf_iterator<CharType, Traits> operator++(int);\n```  \n  \n### Return Value  \n An `istreambuf_iterator` or a reference to an `istreambuf_iterator`.  \n  \n### Remarks  \n The first operator eventually attempts to extract and store an object of type **CharType** from the associated input stream. The second operator makes a copy of the object, increments the object, and then returns the copy.  \n  \n### Example  \n  \n```cpp  \n// istreambuf_iterator_operator_incr.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   cout << \"Type string of characters & enter to output it,\\n\"  \n      << \" with stream buffer iterators,(try: 'I'll be back.')\\n\"  \n      << \" repeat as many times as desired,\\n\"   \n      << \" then keystroke ctrl-Z Enter to exit program: \";  \n   istreambuf_iterator<char> inpos ( cin );  \n   istreambuf_iterator<char> endpos;  \n   ostreambuf_iterator<char> outpos ( cout );  \n   while ( inpos != endpos )  \n   {  \n *outpos = *inpos;  \n      ++inpos;   //Increment istreambuf_iterator  \n      ++outpos;  \n   }  \n}  \n```  \n  \n##  <a name=\"istreambuf_iterator__operator-_gt_\"></a>  istreambuf_iterator::operator-&gt;  \n Returns the value of a member, if any.  \n  \n```\nconst Elem* operator->() const;\n```  \n  \n### Return Value  \n The operator returns **&\\*\\*this**.  \n  \n##  <a name=\"istreambuf_iterator__streambuf_type\"></a>  istreambuf_iterator::streambuf_type  \n A type that provides for the stream type of the istreambuf_iterator.  \n  \n```\ntypedef basic_streambuf<CharType, Traits> streambuf_type;\n```  \n  \n### Remarks  \n The type is a synonym for `basic_streambuf`\\< **CharType**, **Traits**>.  \n  \n### Example  \n  See [istreambuf_iterator](#istreambuf_iterator__istreambuf_iterator) for an example of how to declare and use **istreambuf_type**.  \n  \n##  <a name=\"istreambuf_iterator__traits_type\"></a>  istreambuf_iterator::traits_type  \n A type that provides for the character traits type of the `istream_iterator`.  \n  \n```\ntypedef Traits traits_type;\n```  \n  \n### Remarks  \n The type is a synonym for the template parameter **Traits**.  \n  \n### Example  \n  \n```cpp  \n// istreambuf_iterator_traits_type.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n#include <algorithm>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   typedef istreambuf_iterator<char>::char_type CHT1;  \n   typedef istreambuf_iterator<char>::traits_type CHTR1;  \n  \n   cout << \"(Try the example: 'So many dots to be done'\\n\"  \n        << \" then an Enter key to insert into the output,\\n\"  \n        << \" & use a ctrl-Z Enter key combination to exit): \";  \n  \n   // istreambuf_iterator for input stream  \n   istreambuf_iterator< CHT1, CHTR1> charInBuf ( cin );  \n   ostreambuf_iterator<char> charOut ( cout );  \n  \n   // Used in conjunction with replace_copy algorithm  \n   // to insert into output stream and replace spaces  \n   // with dot-separators  \n   replace_copy ( charInBuf , istreambuf_iterator<char>( ),  \n        charOut , ' ' , '.' );  \n}  \n```  \n  \n## See Also  \n [iterator Struct](../standard-library/iterator-struct.md)   \n [\\<iterator>](../standard-library/iterator.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}