{"nodes":[{"pos":[12,99],"content":"_strlwr_s, _strlwr_s_l, _mbslwr_s, _mbslwr_s_l, _wcslwr_s, _wcslwr_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_strlwr_s, _strlwr_s_l, _mbslwr_s, _mbslwr_s_l, _wcslwr_s, _wcslwr_s_l | Microsoft Docs","pos":[0,87]}]},{"pos":[1861,1931],"content":"_strlwr_s, _strlwr_s_l, _mbslwr_s, _mbslwr_s_l, _wcslwr_s, _wcslwr_s_l","linkify":"_strlwr_s, _strlwr_s_l, _mbslwr_s, _mbslwr_s_l, _wcslwr_s, _wcslwr_s_l","nodes":[{"content":"_strlwr_s, _strlwr_s_l, _mbslwr_s, _mbslwr_s_l, _wcslwr_s, _wcslwr_s_l","pos":[0,70]}]},{"content":"Converts a string to lowercase, by using the current locale or a locale object that's passed in.","pos":[1932,2028]},{"content":"These versions of <bpt id=\"p1\">[</bpt>_strlwr, _wcslwr, _mbslwr, _strlwr_l, _wcslwr_l, _mbslwr_l<ept id=\"p1\">](../../c-runtime-library/reference/strlwr-wcslwr-mbslwr-strlwr-l-wcslwr-l-mbslwr-l.md)</ept> have security enhancements, as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[2029,2326],"source":" These versions of [_strlwr, _wcslwr, _mbslwr, _strlwr_l, _wcslwr_l, _mbslwr_l](../../c-runtime-library/reference/strlwr-wcslwr-mbslwr-strlwr-l-wcslwr-l-mbslwr-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[2334,2575],"content":"[!IMPORTANT]\n `_mbslwr_s` and `_mbslwr_s_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" `_mbslwr_s` and `_mbslwr_s_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,239],"nodes":[{"content":"<ph id=\"ph1\"> `_mbslwr_s`</ph> and <ph id=\"ph2\">`_mbslwr_s_l`</ph> cannot be used in applications that execute in the Windows Runtime.","pos":[0,98],"source":" `_mbslwr_s` and `_mbslwr_s_l` cannot be used in applications that execute in the Windows Runtime."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[99,226],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"pos":[2584,2590],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3756,3766],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Null-terminated string to convert to lowercase.","pos":[3779,3826]},{"content":"Size of the buffer.","pos":[3855,3874]},{"content":"The locale to use.","pos":[3893,3911]},{"pos":[3920,3932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if successful; a non-zero error code on failure.","pos":[3936,3989]},{"content":"These functions validate their parameters.","pos":[3996,4038]},{"content":"If <ph id=\"ph1\">`str`</ph> is not a valid null-terminated string, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept> .","pos":[4039,4218],"source":" If `str` is not a valid null-terminated string, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) ."},{"content":"If execution is allowed to continue, the functions return <ph id=\"ph1\">`EINVAL`</ph> and set <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph>.","pos":[4219,4314],"source":" If execution is allowed to continue, the functions return `EINVAL` and set `errno` to `EINVAL`."},{"content":"If <ph id=\"ph1\">`numberOfElements`</ph> is less than the length of the string, the functions also return <ph id=\"ph2\">`EINVAL`</ph> and set <ph id=\"ph3\">`errno`</ph> to <ph id=\"ph4\">`EINVAL`</ph>.","pos":[4315,4439],"source":" If `numberOfElements` is less than the length of the string, the functions also return `EINVAL` and set `errno` to `EINVAL`."},{"pos":[4448,4455],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_strlwr_s`</ph> function converts, in place, any uppercase letters in <ph id=\"ph2\">`str`</ph> to lowercase.","pos":[4459,4548],"source":"The `_strlwr_s` function converts, in place, any uppercase letters in `str` to lowercase."},{"content":"<ph id=\"ph1\">`_mbslwr_s`</ph> is a multi-byte character version of <ph id=\"ph2\">`_strlwr_s`</ph>.<ph id=\"ph3\">`_wcslwr_s`</ph>","pos":[4549,4621],"source":"`_mbslwr_s` is a multi-byte character version of `_strlwr_s`.`_wcslwr_s`"},{"content":"is a wide-character version of <ph id=\"ph1\">`_strlwr_s`</ph>.","pos":[4622,4665],"source":" is a wide-character version of `_strlwr_s`."},{"content":"The output value is affected by the setting of the <ph id=\"ph1\">`LC_CTYPE`</ph> category setting of the locale; see <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept> for more information.","pos":[4672,4862],"source":"The output value is affected by the setting of the `LC_CTYPE` category setting of the locale; see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md) for more information."},{"content":"The versions of these functions without the <ph id=\"ph1\">`_l`</ph> suffix use the current locale for this locale-dependent behavior; the versions with the <ph id=\"ph2\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead.","pos":[4863,5086],"source":" The versions of these functions without the `_l` suffix use the current locale for this locale-dependent behavior; the versions with the `_l` suffix are identical except that they use the locale parameter passed in instead."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[5087,5157],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.","pos":[5164,5434]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[5435,5543],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"The debug versions of these functions first fill the buffer with 0xFD.","pos":[5550,5620]},{"content":"To disable this behavior, use <bpt id=\"p1\">[</bpt>_CrtSetDebugFillThreshold<ept id=\"p1\">](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)</ept>.","pos":[5621,5742],"source":" To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)."},{"pos":[5752,5781],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[5788,5803]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[5804,5832],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[5833,5846]},{"content":"_UNICODE defined","pos":[5847,5863]},{"pos":[6093,6105],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[6112,6119]},{"content":"Required header","pos":[6120,6135]},{"pos":[6180,6206],"content":"<ph id=\"ph1\">`_strlwr_s`</ph>, <ph id=\"ph2\">`_strlwr_s_l`</ph>","source":"`_strlwr_s`, `_strlwr_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>string.h&gt;","pos":[6207,6218],"source":"\\<string.h>"},{"pos":[6223,6249],"content":"<ph id=\"ph1\">`_mbslwr_s`</ph>, <ph id=\"ph2\">`_mbslwr_s_l`</ph>","source":"`_mbslwr_s`, `_mbslwr_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>mbstring.h&gt;","pos":[6250,6263],"source":"\\<mbstring.h>"},{"pos":[6268,6294],"content":"<ph id=\"ph1\">`_wcslwr_s`</ph>, <ph id=\"ph2\">`_wcslwr_s_l`</ph>","source":"`_wcslwr_s`, `_wcslwr_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>string.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[6295,6320],"source":"\\<string.h> or \\<wchar.h>"},{"pos":[6328,6432],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[6441,6448],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7245,7270],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[7274,7368],"content":"<bpt id=\"p1\">[</bpt>System::String::ToLower<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.string.tolower.aspx)</ept>","source":"[System::String::ToLower](https://msdn.microsoft.com/en-us/library/system.string.tolower.aspx)"},{"pos":[7377,7385],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>String Manipulation<ept id=\"p1\">](../../c-runtime-library/string-manipulation-crt.md)</ept><ph id=\"ph1\"> </ph>","pos":[7389,7463],"source":"[String Manipulation](../../c-runtime-library/string-manipulation-crt.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept><ph id=\"ph1\"> </ph>","pos":[7466,7511],"source":" [Locale](../../c-runtime-library/locale.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Interpretation of Multibyte-Character Sequences<ept id=\"p1\">](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)</ept><ph id=\"ph1\"> </ph>","pos":[7514,7641],"source":" [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_strupr_s, _strupr_s_l, _mbsupr_s, _mbsupr_s_l, _wcsupr_s, _wcsupr_s_l<ept id=\"p1\">](../../c-runtime-library/reference/strupr-s-strupr-s-l-mbsupr-s-mbsupr-s-l-wcsupr-s-wcsupr-s-l.md)</ept>","pos":[7644,7815],"source":" [_strupr_s, _strupr_s_l, _mbsupr_s, _mbsupr_s_l, _wcsupr_s, _wcsupr_s_l](../../c-runtime-library/reference/strupr-s-strupr-s-l-mbsupr-s-mbsupr-s-l-wcsupr-s-wcsupr-s-l.md)"}],"content":"---\ntitle: \"_strlwr_s, _strlwr_s_l, _mbslwr_s, _mbslwr_s_l, _wcslwr_s, _wcslwr_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_strlwr_s_l\"\n  - \"_mbslwr_s_l\"\n  - \"_mbslwr_s\"\n  - \"_wcslwr_s\"\n  - \"_strlwr_s\"\n  - \"_wcslwr_s_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-multibyte-l1-1-0.dll\"\n  - \"api-ms-win-crt-string-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_strlwr_s_l\"\n  - \"_strlwr_s\"\n  - \"mbslwr_s_l\"\n  - \"strlwr_s_l\"\n  - \"_wcslwr_s\"\n  - \"strlwr_s\"\n  - \"mbslwr_s\"\n  - \"_wcslwr_s_l\"\n  - \"wcslwr_s_l\"\n  - \"_tcslwr_s\"\n  - \"_tcslwr_s_l\"\n  - \"_mbslwr_s_l\"\n  - \"wcslwr_s\"\n  - \"_mbslwr_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_tcslwr_s function\"\n  - \"wcslwr_s function\"\n  - \"_mbslwr_s function\"\n  - \"_wcslwr_s function\"\n  - \"strlwr_s_l function\"\n  - \"mbslwr_s_l function\"\n  - \"_strlwr_s function\"\n  - \"string conversion [C++], case\"\n  - \"strlwr_s function\"\n  - \"wcslwr_s_l function\"\n  - \"_tcslwr_s_l function\"\n  - \"mbslwr_s function\"\n  - \"strings [C++], case\"\n  - \"_wcslwr_s_l function\"\n  - \"converting case, CRT functions\"\n  - \"_strlwr_s_l function\"\n  - \"_mbslwr_s_l function\"\n  - \"case, converting\"\n  - \"tcslwr_s function\"\n  - \"tcslwr_s_l function\"\n  - \"strings [C++], converting case\"\nms.assetid: 4883d31b-bdac-4049-83a1-91dfdeceee79\ncaps.latest.revision: 42\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _strlwr_s, _strlwr_s_l, _mbslwr_s, _mbslwr_s_l, _wcslwr_s, _wcslwr_s_l\nConverts a string to lowercase, by using the current locale or a locale object that's passed in. These versions of [_strlwr, _wcslwr, _mbslwr, _strlwr_l, _wcslwr_l, _mbslwr_l](../../c-runtime-library/reference/strlwr-wcslwr-mbslwr-strlwr-l-wcslwr-l-mbslwr-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n> [!IMPORTANT]\n>  `_mbslwr_s` and `_mbslwr_s_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nerrno_t _strlwr_s(  \n   char *str,  \n   size_t numberOfElements  \n);  \nerrno_t _strlwr_s_l(  \n   char *str,  \n   size_t numberOfElements,  \n   _locale_t locale  \n);  \nerrno_t _mbslwr_s(  \n   unsigned char *str,  \n   size_t numberOfElements  \n);  \nerrno_t _mbslwr_s_l(  \n   unsigned char *str,  \n   size_t numberOfElements,  \n   _locale_t locale  \n);  \nerrno_t _wcslwr_s(  \n   wchar_t *str,  \n   size_t numberOfElements  \n);  \nerrno_t _wcslwr_s_l(  \n   wchar_t *str,  \n   size_t numberOfElements,  \n   _locale_t locale  \n);  \ntemplate <size_t size>  \nerrno_t _strlwr_s(  \n   char (&str)[size]  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _strlwr_s_l(  \n   char (&str)[size],  \n   _locale_t locale  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _mbslwr_s(  \n   unsigned char (&str)[size]  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _mbslwr_s_l(  \n   unsigned char (&str)[size],  \n   _locale_t locale  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _wcslwr_s(  \n   wchar_t (&str)[size]  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _wcslwr_s_l(  \n   wchar_t (&str)[size],  \n   _locale_t locale  \n); // C++ only  \n```  \n  \n#### Parameters  \n `str`  \n Null-terminated string to convert to lowercase.  \n  \n `numberOfElements`  \n Size of the buffer.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n Zero if successful; a non-zero error code on failure.  \n  \n These functions validate their parameters. If `str` is not a valid null-terminated string, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) . If execution is allowed to continue, the functions return `EINVAL` and set `errno` to `EINVAL`. If `numberOfElements` is less than the length of the string, the functions also return `EINVAL` and set `errno` to `EINVAL`.  \n  \n## Remarks  \n The `_strlwr_s` function converts, in place, any uppercase letters in `str` to lowercase. `_mbslwr_s` is a multi-byte character version of `_strlwr_s`.`_wcslwr_s` is a wide-character version of `_strlwr_s`.  \n  \n The output value is affected by the setting of the `LC_CTYPE` category setting of the locale; see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md) for more information. The versions of these functions without the `_l` suffix use the current locale for this locale-dependent behavior; the versions with the `_l` suffix are identical except that they use the locale parameter passed in instead. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n The debug versions of these functions first fill the buffer with 0xFD. To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tcslwr_s`|`_strlwr_s`|`_mbslwr_s`|`_wcslwr_s`|  \n|`_tcslwr_s_l`|`_strlwr_s_l`|`_mbslwr_s_l`|`_wcslwr_s_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_strlwr_s`, `_strlwr_s_l`|\\<string.h>|  \n|`_mbslwr_s`, `_mbslwr_s_l`|\\<mbstring.h>|  \n|`_wcslwr_s`, `_wcslwr_s_l`|\\<string.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_strlwr_s.cpp  \n// This program uses _strlwr_s and _strupr_s to create  \n// uppercase and lowercase copies of a mixed-case string.  \n//  \n  \n#include <string.h>  \n#include <stdio.h>  \n#include <stdlib.h>  \n  \nint main()  \n{  \n   char str[] = \"The String to End All Strings!\";  \n   char *copy1, *copy2;  \n   errno_t err;  \n  \n   err = _strlwr_s( copy1 = _strdup(str), strlen(str) + 1);  \n   err = _strupr_s( copy2 = _strdup(str), strlen(str) + 1);  \n  \n   printf( \"Mixed: %s\\n\", str );  \n   printf( \"Lower: %s\\n\", copy1 );  \n   printf( \"Upper: %s\\n\", copy2 );  \n  \n   free( copy1 );  \n   free( copy2 );  \n  \n   return 0;  \n}  \n```  \n  \n```Output  \nMixed: The String to End All Strings!  \nLower: the string to end all strings!  \nUpper: THE STRING TO END ALL STRINGS!  \n```  \n  \n## .NET Framework Equivalent  \n [System::String::ToLower](https://msdn.microsoft.com/en-us/library/system.string.tolower.aspx)  \n  \n## See Also  \n [String Manipulation](../../c-runtime-library/string-manipulation-crt.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)   \n [_strupr_s, _strupr_s_l, _mbsupr_s, _mbsupr_s_l, _wcsupr_s, _wcsupr_s_l](../../c-runtime-library/reference/strupr-s-strupr-s-l-mbsupr-s-mbsupr-s-l-wcsupr-s-wcsupr-s-l.md)"}