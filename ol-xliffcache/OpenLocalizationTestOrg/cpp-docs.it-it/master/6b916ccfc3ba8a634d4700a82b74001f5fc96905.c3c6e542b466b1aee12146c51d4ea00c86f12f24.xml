{"nodes":[{"pos":[12,54],"content":"reinterpret_cast Operator | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"reinterpret_cast Operator | Microsoft Docs","pos":[0,42]}]},{"content":"reinterpret_cast Operator","pos":[668,693]},{"content":"Allows any pointer to be converted into any other pointer type.","pos":[694,757]},{"content":"Also allows any integral type to be converted into any pointer type and vice versa.","pos":[758,841]},{"content":"Syntax","pos":[850,856]},{"content":"Remarks","pos":[926,933]},{"content":"Misuse of the <ph id=\"ph1\">`reinterpret_cast`</ph> operator can easily be unsafe.","pos":[937,1000],"source":"Misuse of the `reinterpret_cast` operator can easily be unsafe."},{"content":"Unless the desired conversion is inherently low-level, you should use one of the other cast operators.","pos":[1001,1103]},{"pos":[1110,1264],"content":"The <ph id=\"ph1\">`reinterpret_cast`</ph> operator can be used for conversions such as <ph id=\"ph2\">`char*`</ph> to <ph id=\"ph3\">`int*`</ph>, or <ph id=\"ph4\">`One_class*`</ph> to <ph id=\"ph5\">`Unrelated_class*`</ph>, which are inherently unsafe.","source":"The `reinterpret_cast` operator can be used for conversions such as `char*` to `int*`, or `One_class*` to `Unrelated_class*`, which are inherently unsafe."},{"content":"The result of a <ph id=\"ph1\">`reinterpret_cast`</ph> cannot safely be used for anything other than being cast back to its original type.","pos":[1271,1389],"source":"The result of a `reinterpret_cast` cannot safely be used for anything other than being cast back to its original type."},{"content":"Other uses are, at best, nonportable.","pos":[1390,1427]},{"content":"The <ph id=\"ph1\">`reinterpret_cast`</ph> operator cannot cast away the <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>, <ph id=\"ph2\">`volatile`</ph>, or <bpt id=\"p2\">**</bpt>__unaligned<ept id=\"p2\">**</ept> attributes.","pos":[1434,1540],"source":"The `reinterpret_cast` operator cannot cast away the **const**, `volatile`, or **__unaligned** attributes."},{"content":"See <bpt id=\"p1\">[</bpt>const_cast Operator<ept id=\"p1\">](../cpp/const-cast-operator.md)</ept> for information on removing these attributes.","pos":[1541,1643],"source":" See [const_cast Operator](../cpp/const-cast-operator.md) for information on removing these attributes."},{"pos":[1650,1762],"content":"The <ph id=\"ph1\">`reinterpret_cast`</ph> operator converts a null pointer value to the null pointer value of the destination type.","source":"The `reinterpret_cast` operator converts a null pointer value to the null pointer value of the destination type."},{"pos":[1769,1936],"content":"One practical use of <ph id=\"ph1\">`reinterpret_cast`</ph> is in a hash function, which maps a value to an index in such a way that two distinct values rarely end up with the same index.","source":"One practical use of `reinterpret_cast` is in a hash function, which maps a value to an index in such a way that two distinct values rarely end up with the same index."},{"content":"The <ph id=\"ph1\">`reinterpret_cast`</ph> allows the pointer to be treated as an integral type.","pos":[2513,2589],"source":"The `reinterpret_cast` allows the pointer to be treated as an integral type."},{"content":"The result is then bit-shifted and XORed with itself to produce a unique index (unique to a high degree of probability).","pos":[2590,2710]},{"content":"The index is then truncated by a standard C-style cast to the return type of the function.","pos":[2711,2801]},{"content":"See Also","pos":[2810,2818]},{"content":"Casting Operators","pos":[2823,2840]},{"content":"Keywords","pos":[2876,2884]}],"content":"---\ntitle: \"reinterpret_cast Operator | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"reinterpret_cast\"\n  - \"reinterpret_cast_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"reinterpret_cast keyword [C++]\"\nms.assetid: eb3283c7-7f88-467e-affd-407d37b46d6c\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# reinterpret_cast Operator\nAllows any pointer to be converted into any other pointer type. Also allows any integral type to be converted into any pointer type and vice versa.  \n  \n## Syntax  \n  \n```  \nreinterpret_cast < type-id > ( expression )  \n```  \n  \n## Remarks  \n Misuse of the `reinterpret_cast` operator can easily be unsafe. Unless the desired conversion is inherently low-level, you should use one of the other cast operators.  \n  \n The `reinterpret_cast` operator can be used for conversions such as `char*` to `int*`, or `One_class*` to `Unrelated_class*`, which are inherently unsafe.  \n  \n The result of a `reinterpret_cast` cannot safely be used for anything other than being cast back to its original type. Other uses are, at best, nonportable.  \n  \n The `reinterpret_cast` operator cannot cast away the **const**, `volatile`, or **__unaligned** attributes. See [const_cast Operator](../cpp/const-cast-operator.md) for information on removing these attributes.  \n  \n The `reinterpret_cast` operator converts a null pointer value to the null pointer value of the destination type.  \n  \n One practical use of `reinterpret_cast` is in a hash function, which maps a value to an index in such a way that two distinct values rarely end up with the same index.  \n  \n```  \n#include <iostream>  \nusing namespace std;  \n  \n// Returns a hash code based on an address  \nunsigned short Hash( void *p ) {  \n   unsigned int val = reinterpret_cast<unsigned int>( p );  \n   return ( unsigned short )( val ^ (val >> 16));  \n}  \n  \nusing namespace std;  \nint main() {  \n   int a[20];  \n   for ( int i = 0; i < 20; i++ )  \n      cout << Hash( a + i ) << endl;  \n}  \n  \nOutput:   \n64641  \n64645  \n64889  \n64893  \n64881  \n64885  \n64873  \n64877  \n64865  \n64869  \n64857  \n64861  \n64849  \n64853  \n64841  \n64845  \n64833  \n64837  \n64825  \n64829  \n```  \n  \n The `reinterpret_cast` allows the pointer to be treated as an integral type. The result is then bit-shifted and XORed with itself to produce a unique index (unique to a high degree of probability). The index is then truncated by a standard C-style cast to the return type of the function.  \n  \n## See Also  \n [Casting Operators](../cpp/casting-operators.md)   \n [Keywords](../cpp/keywords-cpp.md)"}