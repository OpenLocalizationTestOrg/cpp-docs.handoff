{"nodes":[{"pos":[12,49],"content":"cache_freelist Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"cache_freelist Class | Microsoft Docs","pos":[0,37]}]},{"content":"cache_freelist Class","pos":[711,731]},{"pos":[732,864],"content":"Defines a <bpt id=\"p1\">[</bpt>block allocator<ept id=\"p1\">](../standard-library/allocators-header.md)</ept> that allocates and deallocates memory blocks of a single size.","source":"Defines a [block allocator](../standard-library/allocators-header.md) that allocates and deallocates memory blocks of a single size."},{"content":"Syntax","pos":[873,879]},{"content":"Parameters","pos":[963,973]},{"content":"Parameter","pos":[980,989]},{"content":"Description","pos":[990,1001]},{"content":"The number of elements in the array to be allocated.","pos":[1049,1101]},{"content":"The max class representing the maximum size of the free list.","pos":[1112,1173]},{"content":"This can be <bpt id=\"p1\">[</bpt>max_fixed_size<ept id=\"p1\">](../standard-library/max-fixed-size-class.md)</ept>, <bpt id=\"p2\">[</bpt>max_none<ept id=\"p2\">](../standard-library/max-none-class.md)</ept>, <bpt id=\"p3\">[</bpt>max_unbounded<ept id=\"p3\">](../standard-library/max-unbounded-class.md)</ept>, or <bpt id=\"p4\">[</bpt>max_variable_size<ept id=\"p4\">](../standard-library/max-variable-size-class.md)</ept>.","pos":[1174,1432],"source":" This can be [max_fixed_size](../standard-library/max-fixed-size-class.md), [max_none](../standard-library/max-none-class.md), [max_unbounded](../standard-library/max-unbounded-class.md), or [max_variable_size](../standard-library/max-variable-size-class.md)."},{"content":"Remarks","pos":[1442,1449]},{"content":"The cache_freelist template class maintains a free list of memory blocks of size <ph id=\"ph1\">`Sz`</ph>.","pos":[1453,1539],"source":"The cache_freelist template class maintains a free list of memory blocks of size `Sz`."},{"content":"When the free list is full it uses <ph id=\"ph1\">`operator delete`</ph> to deallocate memory blocks.","pos":[1540,1621],"source":" When the free list is full it uses `operator delete` to deallocate memory blocks."},{"content":"When the free list is empty it uses <ph id=\"ph1\">`operator new`</ph> to allocate new memory blocks.","pos":[1622,1703],"source":" When the free list is empty it uses `operator new` to allocate new memory blocks."},{"content":"The maximum size of the free list is determined by the class max class passed in the <ph id=\"ph1\">`Max`</ph> parameter.","pos":[1704,1805],"source":" The maximum size of the free list is determined by the class max class passed in the `Max` parameter."},{"pos":[1812,1927],"content":"Each memory block holds <ph id=\"ph1\">`Sz`</ph> bytes of usable memory and the data that <ph id=\"ph2\">`operator new`</ph> and <ph id=\"ph3\">`operator delete`</ph> require.","source":"Each memory block holds `Sz` bytes of usable memory and the data that `operator new` and `operator delete` require."},{"content":"Constructors","pos":[1937,1949]},{"content":"cache_freelist","pos":[1971,1985]},{"pos":[2020,2066],"content":"Constructs an object of type <ph id=\"ph1\">`cache_freelist`</ph>.","source":"Constructs an object of type `cache_freelist`."},{"content":"Member Functions","pos":[2077,2093]},{"content":"allocate","pos":[2115,2123]},{"content":"Allocates a block of memory.","pos":[2152,2180]},{"content":"deallocate","pos":[2186,2196]},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[2227,2310]},{"content":"Requirements","pos":[2320,2332]},{"pos":[2336,2361],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>allocators&gt;","source":"**Header:** \\<allocators>"},{"pos":[2368,2389],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[2440,2464],"content":"cache_freelist::allocate"},{"content":"Allocates a block of memory.","pos":[2468,2496]},{"content":"Parameters","pos":[2554,2564]},{"content":"Parameter","pos":[2571,2580]},{"content":"Description","pos":[2581,2592]},{"content":"The number of elements in the array to be allocated.","pos":[2643,2695]},{"content":"Return Value","pos":[2706,2718]},{"content":"A pointer to the allocated object.","pos":[2722,2756]},{"content":"Remarks","pos":[2766,2773]},{"pos":[2830,2860],"content":"cache_freelist::cache_freelist"},{"pos":[2864,2910],"content":"Constructs an object of type <ph id=\"ph1\">`cache_freelist`</ph>.","source":"Constructs an object of type `cache_freelist`."},{"content":"Remarks","pos":[2951,2958]},{"pos":[3011,3037],"content":"cache_freelist::deallocate"},{"content":"Frees a specified number of objects from storage beginning at a specified position.","pos":[3041,3124]},{"content":"Parameters","pos":[3194,3204]},{"content":"Parameter","pos":[3211,3220]},{"content":"Description","pos":[3221,3232]},{"content":"A pointer to the first object to be deallocated from storage.","pos":[3281,3342]},{"content":"The number of objects to be deallocated from storage.","pos":[3355,3408]},{"content":"Remarks","pos":[3419,3426]},{"content":"See Also","pos":[3435,3443]},{"content":"allocators&gt;","pos":[3450,3461],"source":"allocators>"}],"content":"---\ntitle: \"cache_freelist Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"stdext.cache_freelist\"\n  - \"allocators/stdext::cache_freelist\"\n  - \"stdext::cache_freelist\"\n  - \"cache_freelist\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"cache_freelist class\"\nms.assetid: 840694de-36ba-470f-8dae-2b723d5a8cd9\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# cache_freelist Class\nDefines a [block allocator](../standard-library/allocators-header.md) that allocates and deallocates memory blocks of a single size.  \n  \n## Syntax  \n  \n```\ntemplate <std::size_t Sz, class Max>  \nclass cache_freelist\n```  \n  \n#### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`Sz`|The number of elements in the array to be allocated.|  \n|`Max`|The max class representing the maximum size of the free list. This can be [max_fixed_size](../standard-library/max-fixed-size-class.md), [max_none](../standard-library/max-none-class.md), [max_unbounded](../standard-library/max-unbounded-class.md), or [max_variable_size](../standard-library/max-variable-size-class.md).|  \n  \n## Remarks  \n The cache_freelist template class maintains a free list of memory blocks of size `Sz`. When the free list is full it uses `operator delete` to deallocate memory blocks. When the free list is empty it uses `operator new` to allocate new memory blocks. The maximum size of the free list is determined by the class max class passed in the `Max` parameter.  \n  \n Each memory block holds `Sz` bytes of usable memory and the data that `operator new` and `operator delete` require.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[cache_freelist](#cache_freelist__cache_freelist)|Constructs an object of type `cache_freelist`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[allocate](#cache_freelist__allocate)|Allocates a block of memory.|  \n|[deallocate](#cache_freelist__deallocate)|Frees a specified number of objects from storage beginning at a specified position.|  \n  \n## Requirements  \n **Header:** \\<allocators>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"cache_freelist__allocate\"></a>  cache_freelist::allocate  \n Allocates a block of memory.  \n  \n```\nvoid *allocate(std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`count`|The number of elements in the array to be allocated.|  \n  \n### Return Value  \n A pointer to the allocated object.  \n  \n### Remarks  \n  \n##  <a name=\"cache_freelist__cache_freelist\"></a>  cache_freelist::cache_freelist  \n Constructs an object of type `cache_freelist`.  \n  \n```\ncache_freelist();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cache_freelist__deallocate\"></a>  cache_freelist::deallocate  \n Frees a specified number of objects from storage beginning at a specified position.  \n  \n```\nvoid deallocate(void* ptr, std::size_t count);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`ptr`|A pointer to the first object to be deallocated from storage.|  \n|`count`|The number of objects to be deallocated from storage.|  \n  \n### Remarks  \n  \n## See Also  \n [\\<allocators>](../standard-library/allocators-header.md)\n\n\n\n"}