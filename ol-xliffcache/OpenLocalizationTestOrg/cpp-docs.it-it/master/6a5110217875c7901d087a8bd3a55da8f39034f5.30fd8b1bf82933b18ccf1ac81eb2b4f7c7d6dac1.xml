{"nodes":[{"pos":[12,52],"content":"strcmp, wcscmp, _mbscmp | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"strcmp, wcscmp, _mbscmp | Microsoft Docs","pos":[0,40]}]},{"content":"strcmp, wcscmp, _mbscmp","pos":[1290,1313]},{"content":"Compare strings.","pos":[1314,1330]},{"pos":[1338,1599],"content":"[!IMPORTANT]\n `_mbscmp` cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[23,259],"nodes":[{"content":"cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[1,108],"source":" cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[109,236],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[1608,1614]},{"content":"Parameters","pos":[1878,1888]},{"content":",","pos":[1901,1902]},{"content":"Null-terminated strings to compare.","pos":[1916,1951]},{"content":"Return Value","pos":[1960,1972]},{"pos":[1976,2078],"content":"The return value for each of these functions indicates the ordinal relation of <ph id=\"ph1\">`string1`</ph> to <ph id=\"ph2\">`string2`</ph>.","source":"The return value for each of these functions indicates the ordinal relation of `string1` to `string2`."},{"content":"Value","pos":[2085,2090]},{"content":"Relationship of string1 to string2","pos":[2091,2125]},{"content":"&lt; 0","pos":[2187,2190],"source":"< 0"},{"pos":[2201,2213],"content":"is less than"},{"content":"0","pos":[2228,2229]},{"pos":[2240,2255],"content":"is identical to"},{"content":"&gt; 0","pos":[2270,2273],"source":"> 0"},{"pos":[2284,2299],"content":"is greater than"},{"pos":[2317,2434],"content":"On a parameter validation error, <ph id=\"ph1\">`_mbscmp`</ph> returns <ph id=\"ph2\">`_NLSCMPERROR`</ph>, which is defined in <ph id=\"ph3\">\\&lt;</ph>string.h&gt; and <ph id=\"ph4\">\\&lt;</ph>mbstring.h&gt;.","source":"On a parameter validation error, `_mbscmp` returns `_NLSCMPERROR`, which is defined in \\<string.h> and \\<mbstring.h>."},{"content":"Remarks","pos":[2443,2450]},{"content":"The <ph id=\"ph1\">`strcmp`</ph> function performs an ordinal comparison of <ph id=\"ph2\">`string1`</ph> and <ph id=\"ph3\">`string2`</ph> and returns a value that indicates their relationship.","pos":[2454,2588],"source":"The `strcmp` function performs an ordinal comparison of `string1` and `string2` and returns a value that indicates their relationship."},{"content":"and <ph id=\"ph1\">`_mbscmp`</ph> are, respectively, wide-character and multibyte-character versions of <ph id=\"ph2\">`strcmp`</ph>.","pos":[2598,2691],"source":" and `_mbscmp` are, respectively, wide-character and multibyte-character versions of `strcmp`."},{"content":"recognizes multibyte-character sequences according to the current multibyte code page and returns <ph id=\"ph1\">`_NLSCMPERROR`</ph> on an error.","pos":[2702,2827],"source":" recognizes multibyte-character sequences according to the current multibyte code page and returns `_NLSCMPERROR` on an error."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Code Pages<ept id=\"p1\">](../../c-runtime-library/code-pages.md)</ept>.","pos":[2828,2906],"source":" For more information, see [Code Pages](../../c-runtime-library/code-pages.md)."},{"content":"Also, if <ph id=\"ph1\">`string1`</ph> or <ph id=\"ph2\">`string2`</ph> is a null pointer, <ph id=\"ph3\">`_mbscmp`</ph> invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2907,3095],"source":" Also, if `string1` or `string2` is a null pointer, `_mbscmp` invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`_mbscmp`</ph> returns <ph id=\"ph2\">`_NLSCMPERROR`</ph> and sets <ph id=\"ph3\">`errno`</ph> to <ph id=\"ph4\">`EINVAL`</ph>.","pos":[3096,3195],"source":" If execution is allowed to continue, `_mbscmp` returns `_NLSCMPERROR` and sets `errno` to `EINVAL`."},{"content":"and <ph id=\"ph1\">`wcscmp`</ph> do not validate their parameters.","pos":[3205,3251],"source":" and `wcscmp` do not validate their parameters."},{"content":"These three functions behave identically otherwise.","pos":[3252,3303]},{"content":"Generic-Text Routine Mappings","pos":[3313,3342]},{"content":"TCHAR.H routine","pos":[3349,3364]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3365,3393],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3394,3407]},{"content":"_UNICODE defined","pos":[3408,3424]},{"content":"The <ph id=\"ph1\">`strcmp`</ph> functions differ from the <ph id=\"ph2\">`strcoll`</ph> functions in that <ph id=\"ph3\">`strcmp`</ph> comparisons are ordinal, and are not affected by locale.","pos":[3582,3714],"source":"The `strcmp` functions differ from the `strcoll` functions in that `strcmp` comparisons are ordinal, and are not affected by locale."},{"content":"compares strings lexicographically by using the <ph id=\"ph1\">`LC_COLLATE`</ph> category of the current locale.","pos":[3725,3817],"source":" compares strings lexicographically by using the `LC_COLLATE` category of the current locale."},{"content":"For more information about the <ph id=\"ph1\">`LC_COLLATE`</ph> category, see <bpt id=\"p1\">[</bpt>setlocale, _wsetlocale<ept id=\"p1\">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept>.","pos":[3818,3960],"source":" For more information about the `LC_COLLATE` category, see [setlocale, _wsetlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md)."},{"content":"In the \"C\" locale, the order of characters in the character set (ASCII character set) is the same as the lexicographic character order.","pos":[3967,4102]},{"content":"However, in other locales, the order of characters in the character set may differ from the lexicographic order.","pos":[4103,4215]},{"content":"For example, in certain European locales, the character 'a' (value 0x61) comes before the character 'ä' (value 0xE4) in the character set, but the character 'ä' comes in front of the character 'a' lexicographically.","pos":[4216,4431]},{"content":"In locales for which the character set and the lexicographic character order differ, you can use <ph id=\"ph1\">`strcoll`</ph> instead of <ph id=\"ph2\">`strcmp`</ph> for lexicographic comparison of strings.","pos":[4438,4605],"source":"In locales for which the character set and the lexicographic character order differ, you can use `strcoll` instead of `strcmp` for lexicographic comparison of strings."},{"content":"Alternatively, you can use <ph id=\"ph1\">`strxfrm`</ph> on the original strings, and then use <ph id=\"ph2\">`strcmp`</ph> on the resulting strings.","pos":[4606,4715],"source":" Alternatively, you can use `strxfrm` on the original strings, and then use `strcmp` on the resulting strings."},{"content":"The <ph id=\"ph1\">`strcmp`</ph> functions are case-sensitive.","pos":[4722,4764],"source":"The `strcmp` functions are case-sensitive."},{"content":", <ph id=\"ph1\">`_wcsicmp`</ph>, and <ph id=\"ph2\">`_mbsicmp`</ph> compare strings by first converting them to their lowercase forms.","pos":[4775,4870],"source":", `_wcsicmp`, and `_mbsicmp` compare strings by first converting them to their lowercase forms."},{"content":"Two strings that contain characters that are located between 'Z' and 'a' in the ASCII table ('[', '<ph id=\"ph1\">`\\`</ph>', ']', '<ph id=\"ph2\">`^`</ph>', '<ph id=\"ph3\">`_`</ph>', and '```') compare differently, depending on their case.","pos":[4871,5051],"source":" Two strings that contain characters that are located between 'Z' and 'a' in the ASCII table ('[', '`\\`', ']', '`^`', '`_`', and '```') compare differently, depending on their case."},{"content":"For example, the two strings <ph id=\"ph1\">`\"ABCDE\"`</ph> and <ph id=\"ph2\">`\"ABCD^\"`</ph> compare one way if the comparison is lowercase (<ph id=\"ph3\">`\"abcde\"` &gt; `\"abcd^\"`</ph>) and the other way (<ph id=\"ph4\">`\"ABCDE\"` &lt; `\"ABCD^\"`</ph>) if the comparison is uppercase.","pos":[5052,5249],"source":" For example, the two strings `\"ABCDE\"` and `\"ABCD^\"` compare one way if the comparison is lowercase (`\"abcde\"` > `\"abcd^\"`) and the other way (`\"ABCDE\"` < `\"ABCD^\"`) if the comparison is uppercase."},{"content":"Requirements","pos":[5258,5270]},{"content":"Routine","pos":[5277,5284]},{"content":"Required header","pos":[5285,5300]},{"content":"&lt;string.h&gt;","pos":[5354,5364],"source":"<string.h>"},{"content":"&lt;string.h&gt; or &lt;wchar.h&gt;","pos":[5378,5401],"source":"<string.h> or <wchar.h>"},{"content":"mbstring.h&gt;","pos":[5418,5429],"source":"mbstring.h>"},{"pos":[5437,5541],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Libraries","pos":[5550,5559]},{"pos":[5563,5655],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"content":"Example","pos":[5664,5671]},{"content":".NET Framework Equivalent","pos":[7031,7056]},{"content":"System::String::CompareOrdinal","pos":[7061,7091]},{"content":"See Also","pos":[7177,7185]},{"content":"String Manipulation","pos":[7190,7209]},{"content":"memcmp, wmemcmp","pos":[7268,7283]},{"content":"_memicmp, _memicmp_l","pos":[7343,7363]},{"content":"strcoll Functions","pos":[7426,7443]},{"content":"_stricmp, _wcsicmp, _mbsicmp, _stricmp_l, _wcsicmp_l, _mbsicmp_l","pos":[7496,7560]},{"content":"strncmp, wcsncmp, _mbsncmp, _mbsncmp_l","pos":[7659,7697]},{"content":"_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l","pos":[7776,7846]},{"content":"strrchr, wcsrchr, _mbsrchr, _mbsrchr_l","pos":[7951,7989]},{"content":"strspn, wcsspn, _mbsspn, _mbsspn_l","pos":[8068,8102]},{"content":"strxfrm, wcsxfrm, _strxfrm_l, _wcsxfrm_l","pos":[8177,8217]}],"content":"---\ntitle: \"strcmp, wcscmp, _mbscmp | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"wcscmp\"\n  - \"_mbscmp\"\n  - \"strcmp\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-multibyte-l1-1-0.dll\"\n  - \"api-ms-win-crt-string-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_mbscmp\"\n  - \"wcscmp\"\n  - \"strcmp\"\n  - \"_tcscmp\"\n  - \"_ftcscmp\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"tcscmp function\"\n  - \"strcmp function\"\n  - \"strings [C++], comparing\"\n  - \"mbscmp function\"\n  - \"string comparison [C++]\"\n  - \"_mbscmp function\"\n  - \"wcscmp function\"\n  - \"_tcscmp function\"\n  - \"_ftcscmp function\"\n  - \"ftcscmp function\"\nms.assetid: 5d216b57-7a5c-4cb3-abf0-0f4facf4396d\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# strcmp, wcscmp, _mbscmp\nCompare strings.  \n  \n> [!IMPORTANT]\n>  `_mbscmp` cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nint strcmp(  \n   const char *string1,  \n   const char *string2   \n);  \nint wcscmp(  \n   const wchar_t *string1,  \n   const wchar_t *string2   \n);  \nint _mbscmp(  \n   const unsigned char *string1,  \n   const unsigned char *string2   \n);  \n```  \n  \n#### Parameters  \n `string1`, `string2`  \n Null-terminated strings to compare.  \n  \n## Return Value  \n The return value for each of these functions indicates the ordinal relation of `string1` to `string2`.  \n  \n|Value|Relationship of string1 to string2|  \n|-----------|----------------------------------------|  \n|< 0|`string1` is less than `string2`|  \n|0|`string1` is identical to `string2`|  \n|> 0|`string1` is greater than `string2`|  \n  \n On a parameter validation error, `_mbscmp` returns `_NLSCMPERROR`, which is defined in \\<string.h> and \\<mbstring.h>.  \n  \n## Remarks  \n The `strcmp` function performs an ordinal comparison of `string1` and `string2` and returns a value that indicates their relationship. `wcscmp` and `_mbscmp` are, respectively, wide-character and multibyte-character versions of `strcmp`. `_mbscmp` recognizes multibyte-character sequences according to the current multibyte code page and returns `_NLSCMPERROR` on an error. For more information, see [Code Pages](../../c-runtime-library/code-pages.md). Also, if `string1` or `string2` is a null pointer, `_mbscmp` invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `_mbscmp` returns `_NLSCMPERROR` and sets `errno` to `EINVAL`. `strcmp` and `wcscmp` do not validate their parameters. These three functions behave identically otherwise.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tcscmp`|`strcmp`|`_mbscmp`|`wcscmp`|  \n  \n The `strcmp` functions differ from the `strcoll` functions in that `strcmp` comparisons are ordinal, and are not affected by locale. `strcoll` compares strings lexicographically by using the `LC_COLLATE` category of the current locale. For more information about the `LC_COLLATE` category, see [setlocale, _wsetlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md).  \n  \n In the \"C\" locale, the order of characters in the character set (ASCII character set) is the same as the lexicographic character order. However, in other locales, the order of characters in the character set may differ from the lexicographic order. For example, in certain European locales, the character 'a' (value 0x61) comes before the character 'ä' (value 0xE4) in the character set, but the character 'ä' comes in front of the character 'a' lexicographically.  \n  \n In locales for which the character set and the lexicographic character order differ, you can use `strcoll` instead of `strcmp` for lexicographic comparison of strings. Alternatively, you can use `strxfrm` on the original strings, and then use `strcmp` on the resulting strings.  \n  \n The `strcmp` functions are case-sensitive. `_stricmp`, `_wcsicmp`, and `_mbsicmp` compare strings by first converting them to their lowercase forms. Two strings that contain characters that are located between 'Z' and 'a' in the ASCII table ('[', '`\\`', ']', '`^`', '`_`', and '```') compare differently, depending on their case. For example, the two strings `\"ABCDE\"` and `\"ABCD^\"` compare one way if the comparison is lowercase (`\"abcde\"` > `\"abcd^\"`) and the other way (`\"ABCDE\"` < `\"ABCD^\"`) if the comparison is uppercase.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`strcmp`|<string.h>|  \n|`wcscmp`|<string.h> or <wchar.h>|  \n|`_mbscmp`|\\<mbstring.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_strcmp.c  \n  \n#include <string.h>  \n#include <stdio.h>  \n#include <stdlib.h>  \n  \nchar string1[] = \"The quick brown dog jumps over the lazy fox\";  \nchar string2[] = \"The QUICK brown dog jumps over the lazy fox\";  \n  \nint main( void )  \n{  \n   char tmp[20];  \n   int result;  \n  \n   // Case sensitive  \n   printf( \"Compare strings:\\n   %s\\n   %s\\n\\n\", string1, string2 );  \n   result = strcmp( string1, string2 );  \n   if( result > 0 )  \n      strcpy_s( tmp, _countof(tmp), \"greater than\" );  \n   else if( result < 0 )  \n      strcpy_s( tmp, _countof (tmp), \"less than\" );  \n   else  \n      strcpy_s( tmp, _countof (tmp), \"equal to\" );  \n   printf( \"   strcmp:   String 1 is %s string 2\\n\", tmp );  \n  \n   // Case insensitive (could use equivalent _stricmp)  \n   result = _stricmp( string1, string2 );  \n   if( result > 0 )  \n      strcpy_s( tmp, _countof (tmp), \"greater than\" );  \n   else if( result < 0 )  \n      strcpy_s( tmp, _countof (tmp), \"less than\" );  \n   else  \n      strcpy_s( tmp, _countof (tmp), \"equal to\" );  \n   printf( \"   _stricmp:  String 1 is %s string 2\\n\", tmp );  \n}  \n```  \n  \n```Output  \nCompare strings:  \n   The quick brown dog jumps over the lazy fox  \n   The QUICK brown dog jumps over the lazy fox  \n  \n   strcmp:   String 1 is greater than string 2  \n   _stricmp:  String 1 is equal to string 2  \n```  \n  \n## .NET Framework Equivalent  \n [System::String::CompareOrdinal](https://msdn.microsoft.com/en-us/library/system.string.compareordinal.aspx)  \n  \n## See Also  \n [String Manipulation](../../c-runtime-library/string-manipulation-crt.md)   \n [memcmp, wmemcmp](../../c-runtime-library/reference/memcmp-wmemcmp.md)   \n [_memicmp, _memicmp_l](../../c-runtime-library/reference/memicmp-memicmp-l.md)   \n [strcoll Functions](../../c-runtime-library/strcoll-functions.md)   \n [_stricmp, _wcsicmp, _mbsicmp, _stricmp_l, _wcsicmp_l, _mbsicmp_l](../../c-runtime-library/reference/stricmp-wcsicmp-mbsicmp-stricmp-l-wcsicmp-l-mbsicmp-l.md)   \n [strncmp, wcsncmp, _mbsncmp, _mbsncmp_l](../../c-runtime-library/reference/strncmp-wcsncmp-mbsncmp-mbsncmp-l.md)   \n [_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l](../../c-runtime-library/reference/strnicmp-wcsnicmp-mbsnicmp-strnicmp-l-wcsnicmp-l-mbsnicmp-l.md)   \n [strrchr, wcsrchr, _mbsrchr, _mbsrchr_l](../../c-runtime-library/reference/strrchr-wcsrchr-mbsrchr-mbsrchr-l.md)   \n [strspn, wcsspn, _mbsspn, _mbsspn_l](../../c-runtime-library/reference/strspn-wcsspn-mbsspn-mbsspn-l.md)   \n [strxfrm, wcsxfrm, _strxfrm_l, _wcsxfrm_l](../../c-runtime-library/reference/strxfrm-wcsxfrm-strxfrm-l-wcsxfrm-l.md)"}