{"nodes":[{"pos":[12,125],"content":"nextafter, nextafterf, nextafterl, _nextafter, _nextafterf, nexttoward, nexttowardf, nexttowardl | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"nextafter, nextafterf, nextafterl, _nextafter, _nextafterf, nexttoward, nexttowardf, nexttowardl | Microsoft Docs","pos":[0,113]}]},{"pos":[1561,1657],"content":"nextafter, nextafterf, nextafterl, _nextafter, _nextafterf, nexttoward, nexttowardf, nexttowardl","linkify":"nextafter, nextafterf, nextafterl, _nextafter, _nextafterf, nexttoward, nexttowardf, nexttowardl","nodes":[{"content":"nextafter, nextafterf, nextafterl, _nextafter, _nextafterf, nexttoward, nexttowardf, nexttowardl","pos":[0,96]}]},{"content":"Returns the next representable floating-point value.","pos":[1658,1710]},{"pos":[1719,1725],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2667,2677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The floating-point value to start from.","pos":[2688,2727]},{"content":"The floating-point value to go towards.","pos":[2741,2780]},{"pos":[2789,2801],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the next representable floating-point value of the return type after <ph id=\"ph1\">`x`</ph> in the direction of <ph id=\"ph2\">`y`</ph>.","pos":[2805,2910],"source":"Returns the next representable floating-point value of the return type after `x` in the direction of `y`."},{"content":"If <ph id=\"ph1\">`x`</ph><ph id=\"ph2\">=</ph><ph id=\"ph3\">`y`</ph>, the function returns <ph id=\"ph4\">`y`</ph>, converted to the return type, with no exception triggered.","pos":[2911,3007],"source":" If `x`=`y`, the function returns `y`, converted to the return type, with no exception triggered."},{"content":"If <ph id=\"ph1\">`x`</ph> is not equal to <ph id=\"ph2\">`y`</ph>, and the result is a denormal or zero, the FE_UNDERFLOW and FE_INEXACT floating-point exception states are set, and the correct result is returned.","pos":[3008,3182],"source":" If `x` is not equal to `y`, and the result is a denormal or zero, the FE_UNDERFLOW and FE_INEXACT floating-point exception states are set, and the correct result is returned."},{"content":"If either <ph id=\"ph1\">`x`</ph> or <ph id=\"ph2\">`y`</ph> is a NAN, then the return value is one of the input NANs.","pos":[3183,3261],"source":" If either `x` or `y` is a NAN, then the return value is one of the input NANs."},{"content":"If <ph id=\"ph1\">`x`</ph> is finite and the result is infinite or not representable in the type, a correctly signed infinity or NAN is returned, the FE_OVERFLOW and FE_INEXACT floating-point exception states are set, and <ph id=\"ph2\">`errno`</ph> is set to ERANGE.","pos":[3262,3489],"source":" If `x` is finite and the result is infinite or not representable in the type, a correctly signed infinity or NAN is returned, the FE_OVERFLOW and FE_INEXACT floating-point exception states are set, and `errno` is set to ERANGE."},{"pos":[3498,3505],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`nextafter`</ph> and <ph id=\"ph2\">`nexttoward`</ph> function families are equivalent, except for the parameter type of <ph id=\"ph3\">`y`</ph>.","pos":[3509,3613],"source":"The `nextafter` and `nexttoward` function families are equivalent, except for the parameter type of `y`."},{"content":"If <ph id=\"ph1\">`x`</ph> and <ph id=\"ph2\">`y`</ph> are equal, the value returned is <ph id=\"ph3\">`y`</ph> converted to the return type.","pos":[3614,3695],"source":" If `x` and `y` are equal, the value returned is `y` converted to the return type."},{"content":"Because C++ allows overloading, if you include <ph id=\"ph1\">\\&lt;</ph>cmath&gt; you can call overloads of <ph id=\"ph2\">`nextafter`</ph> and <ph id=\"ph3\">`nexttoward`</ph> that return <ph id=\"ph4\">`float`</ph> and <ph id=\"ph5\">`long double`</ph> types.","pos":[3702,3857],"source":"Because C++ allows overloading, if you include \\<cmath> you can call overloads of `nextafter` and `nexttoward` that return `float` and `long double` types."},{"content":"In a C program, <ph id=\"ph1\">`nextafter`</ph> and <ph id=\"ph2\">`nexttoward`</ph> always return <ph id=\"ph3\">`double`</ph>.","pos":[3858,3926],"source":" In a C program, `nextafter` and `nexttoward` always return `double`."},{"content":"The <ph id=\"ph1\">`_nextafter`</ph> and <ph id=\"ph2\">`_nextafterf`</ph> functions are Microsoft specific.","pos":[3933,4001],"source":"The `_nextafter` and `_nextafterf` functions are Microsoft specific."},{"content":"The <ph id=\"ph1\">`_nextafterf`</ph> function is only available when compiling for x64.","pos":[4002,4070],"source":" The `_nextafterf` function is only available when compiling for x64."},{"pos":[4079,4091],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4098,4105]},{"content":"Required header (C)","pos":[4106,4125]},{"content":"Required header (C++)","pos":[4126,4147]},{"pos":[4230,4328],"content":"<ph id=\"ph1\">`nextafter`</ph>, <ph id=\"ph2\">`nextafterf`</ph>, <ph id=\"ph3\">`nextafterl`</ph>, <ph id=\"ph4\">`_nextafterf`</ph>, <ph id=\"ph5\">`nexttoward`</ph>, <ph id=\"ph6\">`nexttowardf`</ph>, <ph id=\"ph7\">`nexttowardl`</ph>","source":"`nextafter`, `nextafterf`, `nextafterl`, `_nextafterf`, `nexttoward`, `nexttowardf`, `nexttowardl`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt;","pos":[4329,4338],"source":"\\<math.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt; or <ph id=\"ph2\">\\&lt;</ph>cmath&gt;","pos":[4339,4360],"source":"\\<math.h> or \\<cmath>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>float.h&gt;","pos":[4378,4388],"source":"\\<float.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>float.h&gt; or <ph id=\"ph2\">\\&lt;</ph>cfloat&gt;","pos":[4389,4412],"source":"\\<float.h> or \\<cfloat>"},{"pos":[4420,4538],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4547,4555],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[4559,4635],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>isnan, _isnan, _isnanf<ept id=\"p1\">](../../c-runtime-library/reference/isnan-isnan-isnanf.md)</ept>","pos":[4638,4720],"source":" [isnan, _isnan, _isnanf](../../c-runtime-library/reference/isnan-isnan-isnanf.md)"}],"content":"---\ntitle: \"nextafter, nextafterf, nextafterl, _nextafter, _nextafterf, nexttoward, nexttowardf, nexttowardl | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"nextafterf\"\n  - \"_nextafterf\"\n  - \"nextafter\"\n  - \"nextafterl\"\n  - \"_nextafter\"\n  - \"nexttoward\"\n  - \"nexttowardf\"\n  - \"nexttowardl\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"nextafter\"\n  - \"_nextafter\"\n  - \"nextafterf\"\n  - \"nextafterl\"\n  - \"_nextafterf\"\n  - \"math/nextafter\"\n  - \"math/nextafterf\"\n  - \"math/nextafterl\"\n  - \"nexttoward\"\n  - \"nexttowardf\"\n  - \"nexttowardl\"\n  - \"math/nexttoward\"\n  - \"math/nexttowardf\"\n  - \"math/nexttowardl\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_nextafter function\"\n  - \"nextafter function\"\n  - \"_nextafterf function\"\n  - \"nextafterf function\"\n  - \"nextafterl function\"\n  - \"nexttoward function\"\n  - \"nexttowardf function\"\n  - \"nexttowardl function\"\nms.assetid: 9785bfb9-de53-4bd0-9637-f05fa0c1f6ab\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# nextafter, nextafterf, nextafterl, _nextafter, _nextafterf, nexttoward, nexttowardf, nexttowardl\nReturns the next representable floating-point value.  \n  \n## Syntax  \n  \n```  \ndouble nextafter(  \n   double x,  \n   double y   \n);  \n  \nfloat nextafter(  \n   float x,  \n   float y   \n); /* C++ only, requires <cmath> */  \n  \nlong double nextafter(  \n   long double x,  \n   long double y   \n); /* C++ only, requires <cmath> */  \n  \nfloat nextafterf(  \n   float x,  \n   float y   \n);   \n  \nlong double nextafterl(  \n   long double x,  \n   long double y   \n);  \n  \ndouble _nextafter(  \n   double x,  \n   double y   \n);  \n  \nfloat _nextafterf(  \n   float x,  \n   float y   \n); /* x64 only */  \n  \ndouble nexttoward(  \n   double x,  \n   long double y   \n);  \n  \nfloat nexttoward(  \n   float x,  \n   long double y   \n); /* C++ only, requires <cmath> */  \n  \nlong double nexttoward(  \n   long double x,  \n   long double y   \n); /* C++ only, requires <cmath> */  \n  \nfloat nexttowardf(  \n   float x,  \n   long double y   \n);   \n  \nlong double nexttowardl(  \n   long double x,  \n   long double y   \n);  \n```  \n  \n#### Parameters  \n `x`  \n The floating-point value to start from.  \n  \n `y`  \n The floating-point value to go towards.  \n  \n## Return Value  \n Returns the next representable floating-point value of the return type after `x` in the direction of `y`. If `x`=`y`, the function returns `y`, converted to the return type, with no exception triggered. If `x` is not equal to `y`, and the result is a denormal or zero, the FE_UNDERFLOW and FE_INEXACT floating-point exception states are set, and the correct result is returned. If either `x` or `y` is a NAN, then the return value is one of the input NANs. If `x` is finite and the result is infinite or not representable in the type, a correctly signed infinity or NAN is returned, the FE_OVERFLOW and FE_INEXACT floating-point exception states are set, and `errno` is set to ERANGE.  \n  \n## Remarks  \n The `nextafter` and `nexttoward` function families are equivalent, except for the parameter type of `y`. If `x` and `y` are equal, the value returned is `y` converted to the return type.  \n  \n Because C++ allows overloading, if you include \\<cmath> you can call overloads of `nextafter` and `nexttoward` that return `float` and `long double` types. In a C program, `nextafter` and `nexttoward` always return `double`.  \n  \n The `_nextafter` and `_nextafterf` functions are Microsoft specific. The `_nextafterf` function is only available when compiling for x64.  \n  \n## Requirements  \n  \n|Routine|Required header (C)|Required header (C++)|  \n|-------------|---------------------------|-------------------------------|  \n|`nextafter`, `nextafterf`, `nextafterl`, `_nextafterf`, `nexttoward`, `nexttowardf`, `nexttowardl`|\\<math.h>|\\<math.h> or \\<cmath>|  \n|`_nextafter`|\\<float.h>|\\<float.h> or \\<cfloat>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [isnan, _isnan, _isnanf](../../c-runtime-library/reference/isnan-isnan-isnanf.md)"}