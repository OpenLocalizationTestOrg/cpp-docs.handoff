{"nodes":[{"pos":[12,49],"content":"Compiler Error C2011 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error C2011 | Microsoft Docs","pos":[0,37]}]},{"pos":[598,618],"content":"Compiler Error C2011","linkify":"Compiler Error C2011","nodes":[{"content":"Compiler Error C2011","pos":[0,20]}]},{"content":"'identifier' : 'type' type redefinition","pos":[619,658]},{"content":"The identifier was already defined as <ph id=\"ph1\">`type`</ph>.","pos":[665,710],"source":"The identifier was already defined as `type`."},{"content":"Check for redefinitions of the identifier.","pos":[711,753]},{"content":"You may also get C2011 if you import a header file or type library more than once into the same file.","pos":[760,861]},{"content":"To prevent multiple inclusions of the types defined in a header file, use include guards or a <ph id=\"ph1\">`#pragma`</ph><bpt id=\"p1\">[</bpt>once<ept id=\"p1\">](../../preprocessor/once.md)</ept> directive in the header file.","pos":[862,1029],"source":" To prevent multiple inclusions of the types defined in a header file, use include guards or a `#pragma`[once](../../preprocessor/once.md) directive in the header file."},{"content":"If you need to find the initial declaration of the redefined type, you can use the <bpt id=\"p1\">[</bpt>/P<ept id=\"p1\">](../../build/reference/p-preprocess-to-a-file.md)</ept> compiler flag to generate the preprocessed output passed to the compiler.","pos":[1036,1246],"source":"If you need to find the initial declaration of the redefined type, you can use the [/P](../../build/reference/p-preprocess-to-a-file.md) compiler flag to generate the preprocessed output passed to the compiler."},{"content":"You can use text search tools to find instances of the redefined identifier in the output file.","pos":[1247,1342]},{"content":"The following sample generates C2011 and shows one way to fix it:","pos":[1349,1414]}],"content":"---\ntitle: \"Compiler Error C2011 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C2011\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C2011\"\nms.assetid: 992c9d51-e850-4d53-b86b-02e73b38249c\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error C2011\n'identifier' : 'type' type redefinition  \n  \n The identifier was already defined as `type`. Check for redefinitions of the identifier.  \n  \n You may also get C2011 if you import a header file or type library more than once into the same file. To prevent multiple inclusions of the types defined in a header file, use include guards or a `#pragma`[once](../../preprocessor/once.md) directive in the header file.  \n  \n If you need to find the initial declaration of the redefined type, you can use the [/P](../../build/reference/p-preprocess-to-a-file.md) compiler flag to generate the preprocessed output passed to the compiler. You can use text search tools to find instances of the redefined identifier in the output file.  \n  \n The following sample generates C2011 and shows one way to fix it:  \n  \n```  \n// C2011.cpp  \n// compile with: /c  \nstruct S;  \nunion S;   // C2011  \nunion S2;   // OK  \n```"}