{"nodes":[{"pos":[12,47],"content":"CMFCListCtrl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCListCtrl Class | Microsoft Docs","pos":[0,35]}]},{"pos":[610,628],"content":"CMFCListCtrl Class","linkify":"CMFCListCtrl Class","nodes":[{"content":"CMFCListCtrl Class","pos":[0,18]}]},{"pos":[629,878],"content":"The <ph id=\"ph1\">`CMFCListCtrl`</ph> class extends the functionality of <bpt id=\"p1\">[</bpt>CListCtrl Class<ept id=\"p1\">](../../mfc/reference/clistctrl-class.md)</ept> class by supporting the advanced header control functionality of the <bpt id=\"p2\">[</bpt>CMFCHeaderCtrl Class<ept id=\"p2\">](../../mfc/reference/cmfcheaderctrl-class.md)</ept>.","source":"The `CMFCListCtrl` class extends the functionality of [CListCtrl Class](../../mfc/reference/clistctrl-class.md) class by supporting the advanced header control functionality of the [CMFCHeaderCtrl Class](../../mfc/reference/cmfcheaderctrl-class.md)."},{"pos":[887,893],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[957,964],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[974,988],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[995,999]},{"content":"Description","pos":[1000,1011]},{"pos":[1049,1126],"content":"<bpt id=\"p1\">[</bpt>CMFCListCtrl::EnableMarkSortedColumn<ept id=\"p1\">](#cmfclistctrl__enablemarksortedcolumn)</ept>","source":"[CMFCListCtrl::EnableMarkSortedColumn](#cmfclistctrl__enablemarksortedcolumn)"},{"content":"Enables the ability to mark a sorted column with a different background color.","pos":[1127,1205]},{"pos":[1210,1279],"content":"<bpt id=\"p1\">[</bpt>CMFCListCtrl::EnableMultipleSort<ept id=\"p1\">](#cmfclistctrl__enablemultiplesort)</ept>","source":"[CMFCListCtrl::EnableMultipleSort](#cmfclistctrl__enablemultiplesort)"},{"content":"Enables multiple sort mode.","pos":[1280,1307]},{"pos":[1312,1371],"content":"<bpt id=\"p1\">[</bpt>CMFCListCtrl::GetHeaderCtrl<ept id=\"p1\">](#cmfclistctrl__getheaderctrl)</ept>","source":"[CMFCListCtrl::GetHeaderCtrl](#cmfclistctrl__getheaderctrl)"},{"content":"Returns a reference to the underlined header control.","pos":[1372,1425]},{"pos":[1430,1491],"content":"<bpt id=\"p1\">[</bpt>CMFCListCtrl::IsMultipleSort<ept id=\"p1\">](#cmfclistctrl__ismultiplesort)</ept>","source":"[CMFCListCtrl::IsMultipleSort](#cmfclistctrl__ismultiplesort)"},{"content":"Checks if the list control is in multiple sort mode.","pos":[1492,1544]},{"pos":[1549,1610],"content":"<bpt id=\"p1\">[</bpt>CMFCListCtrl::OnCompareItems<ept id=\"p1\">](#cmfclistctrl__oncompareitems)</ept>","source":"[CMFCListCtrl::OnCompareItems](#cmfclistctrl__oncompareitems)"},{"content":"Called by the framework when it must compare two list control items.","pos":[1611,1679]},{"pos":[1684,1749],"content":"<bpt id=\"p1\">[</bpt>CMFCListCtrl::OnGetCellBkColor<ept id=\"p1\">](#cmfclistctrl__ongetcellbkcolor)</ept>","source":"[CMFCListCtrl::OnGetCellBkColor](#cmfclistctrl__ongetcellbkcolor)"},{"content":"Called by the framework when it must determine the background color of an individual cell.","pos":[1750,1840]},{"pos":[1845,1904],"content":"<bpt id=\"p1\">[</bpt>CMFCListCtrl::OnGetCellFont<ept id=\"p1\">](#cmfclistctrl__ongetcellfont)</ept>","source":"[CMFCListCtrl::OnGetCellFont](#cmfclistctrl__ongetcellfont)"},{"content":"Called by the framework when it must obtain the font for the cell being drawn.","pos":[1905,1983]},{"pos":[1988,2057],"content":"<bpt id=\"p1\">[</bpt>CMFCListCtrl::OnGetCellTextColor<ept id=\"p1\">](#cmfclistctrl__ongetcelltextcolor)</ept>","source":"[CMFCListCtrl::OnGetCellTextColor](#cmfclistctrl__ongetcelltextcolor)"},{"content":"Called by the framework when it must determine the text color of an individual cell.","pos":[2058,2142]},{"pos":[2147,2212],"content":"<bpt id=\"p1\">[</bpt>CMFCListCtrl::RemoveSortColumn<ept id=\"p1\">](#cmfclistctrl__removesortcolumn)</ept>","source":"[CMFCListCtrl::RemoveSortColumn](#cmfclistctrl__removesortcolumn)"},{"content":"Removes a sort column from the list of sorted columns.","pos":[2213,2267]},{"pos":[2272,2331],"content":"<bpt id=\"p1\">[</bpt>CMFCListCtrl::SetSortColumn<ept id=\"p1\">](#cmfclistctrl__setsortcolumn)</ept>","source":"[CMFCListCtrl::SetSortColumn](#cmfclistctrl__setsortcolumn)"},{"content":"Sets the current sorted column and the sort order.","pos":[2332,2382]},{"pos":[2387,2428],"content":"<bpt id=\"p1\">[</bpt>CMFCListCtrl::Sort<ept id=\"p1\">](#cmfclistctrl__sort)</ept>","source":"[CMFCListCtrl::Sort](#cmfclistctrl__sort)"},{"content":"Sorts the list control.","pos":[2429,2452]},{"pos":[2462,2469],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CMFCListCtrl`</ph> offers two enhancements to <bpt id=\"p1\">[</bpt>CListCtrl Class<ept id=\"p1\">](../../mfc/reference/clistctrl-class.md)</ept> class.","pos":[2473,2579],"source":"`CMFCListCtrl` offers two enhancements to [CListCtrl Class](../../mfc/reference/clistctrl-class.md) class."},{"content":"First, it indicates that column sorting is an available option by automatically drawing a sort arrow on the header.","pos":[2580,2695]},{"content":"Second, it supports data sorting on multiple columns at the same time.","pos":[2696,2766]},{"pos":[2775,2782],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to use various methods in the <ph id=\"ph1\">`CMFCListCtrl`</ph> class.","pos":[2786,2876],"source":"The following example demonstrates how to use various methods in the `CMFCListCtrl` class."},{"content":"The example shows how to create a list control, insert columns, insert items, set the text of an item, and set the font of the list control.","pos":[2877,3017]},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Visual Studio Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[3018,3108],"source":" This code snippet is part of the [Visual Studio Demo sample](../../visual-cpp-samples.md)."},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_VisualStudioDemo#25<ept id=\"p2\">](../../mfc/codesnippet/cpp/cmfclistctrl-class_1.h)</ept><ept id=\"p1\">]</ept>","pos":[3115,3205],"source":"[!code-cpp[NVC_MFC_VisualStudioDemo#25](../../mfc/codesnippet/cpp/cmfclistctrl-class_1.h)]"},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_VisualStudioDemo#26<ept id=\"p2\">](../../mfc/codesnippet/cpp/cmfclistctrl-class_2.cpp)</ept><ept id=\"p1\">]</ept>","pos":[3208,3300],"source":"[!code-cpp[NVC_MFC_VisualStudioDemo#26](../../mfc/codesnippet/cpp/cmfclistctrl-class_2.cpp)]"},{"pos":[3309,3330],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3334,3381],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[3388,3441],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[3448,3489],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[3496,3547],"content":"<bpt id=\"p1\">[</bpt>CListCtrl<ept id=\"p1\">](../../mfc/reference/clistctrl-class.md)</ept>","source":"[CListCtrl](../../mfc/reference/clistctrl-class.md)"},{"pos":[3554,3611],"content":"<bpt id=\"p1\">[</bpt>CMFCListCtrl<ept id=\"p1\">](../../mfc/reference/cmfclistctrl-class.md)</ept>","source":"[CMFCListCtrl](../../mfc/reference/cmfclistctrl-class.md)"},{"pos":[3620,3632],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3636,3661],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxlistctrl.h","source":"**Header:** afxlistctrl.h"},{"pos":[3671,3760],"content":"<bpt id=\"p1\">&lt;a name=\"cmfclistctrl__enablemarksortedcolumn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCListCtrl::EnableMarkSortedColumn","linkify":"<a name=\"cmfclistctrl__enablemarksortedcolumn\"></a>  CMFCListCtrl::EnableMarkSortedColumn","source":"<a name=\"cmfclistctrl__enablemarksortedcolumn\"></a>  CMFCListCtrl::EnableMarkSortedColumn"},{"content":"Marks the sorted columns with a different background color.","pos":[3764,3823]},{"pos":[3928,3938],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bMark`</ph>","pos":[3942,3954],"source":"[in] `bMark`"},{"content":"A Boolean parameter that determines whether to enable a different background color.","pos":[3958,4041]},{"content":"[in] <ph id=\"ph1\">`bRedraw`</ph>","pos":[4048,4062],"source":"[in] `bRedraw`"},{"content":"A Boolean parameter that determines whether to redraw the control immediately.","pos":[4066,4144]},{"pos":[4154,4161],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`EnableMarkSortedColumn`</ph> uses the method <ph id=\"ph2\">`CDrawingManager::PixelAlpha`</ph> to calculate what color to use for sorted columns.","pos":[4165,4286],"source":"`EnableMarkSortedColumn` uses the method `CDrawingManager::PixelAlpha` to calculate what color to use for sorted columns."},{"content":"The color picked is based upon the regular background color.","pos":[4287,4347]},{"pos":[4357,4438],"content":"<bpt id=\"p1\">&lt;a name=\"cmfclistctrl__enablemultiplesort\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCListCtrl::EnableMultipleSort","linkify":"<a name=\"cmfclistctrl__enablemultiplesort\"></a>  CMFCListCtrl::EnableMultipleSort","source":"<a name=\"cmfclistctrl__enablemultiplesort\"></a>  CMFCListCtrl::EnableMultipleSort"},{"content":"Enables sorting the rows of data in the list control by multiple columns.","pos":[4442,4515]},{"pos":[4586,4596],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bEnable`</ph>","pos":[4600,4614],"source":"[in] `bEnable`"},{"content":"A Boolean that specifies whether to enable multiple column sort mode.","pos":[4618,4687]},{"pos":[4697,4704],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When you enable sorting based on multiple columns, the columns do have a hierarchy.","pos":[4708,4791]},{"content":"The rows of data will first be sorted by the primary column.","pos":[4792,4852]},{"content":"Any equivalent values are then sorted by each subsequent column based on priority.","pos":[4853,4935]},{"pos":[4945,5016],"content":"<bpt id=\"p1\">&lt;a name=\"cmfclistctrl__getheaderctrl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCListCtrl::GetHeaderCtrl","linkify":"<a name=\"cmfclistctrl__getheaderctrl\"></a>  CMFCListCtrl::GetHeaderCtrl","source":"<a name=\"cmfclistctrl__getheaderctrl\"></a>  CMFCListCtrl::GetHeaderCtrl"},{"content":"Returns a reference to the header control.","pos":[5020,5062]},{"pos":[5128,5140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5144,5243],"content":"A reference to the underlying <bpt id=\"p1\">[</bpt>CMFCHeaderCtrl<ept id=\"p1\">](../../mfc/reference/cmfcheaderctrl-class.md)</ept> object.","source":"A reference to the underlying [CMFCHeaderCtrl](../../mfc/reference/cmfcheaderctrl-class.md) object."},{"pos":[5253,5260],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The header control for a list control is the window that contains the titles for the columns.","pos":[5264,5357]},{"content":"It is usually positioned directly above the columns.","pos":[5358,5410]},{"pos":[5420,5493],"content":"<bpt id=\"p1\">&lt;a name=\"cmfclistctrl__ismultiplesort\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCListCtrl::IsMultipleSort","linkify":"<a name=\"cmfclistctrl__ismultiplesort\"></a>  CMFCListCtrl::IsMultipleSort","source":"<a name=\"cmfclistctrl__ismultiplesort\"></a>  CMFCListCtrl::IsMultipleSort"},{"content":"Checks whether the list control currently supports sorting on multiple columns.","pos":[5497,5576]},{"pos":[5633,5645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5649,5718],"content":"<ph id=\"ph1\">`TRUE`</ph> if the list control supports multiple sort; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the list control supports multiple sort; `FALSE` otherwise."},{"pos":[5728,5735],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a <bpt id=\"p1\">[</bpt>CMFCListCtrl Class<ept id=\"p1\">](../../mfc/reference/cmfclistctrl-class.md)</ept> supports multiple sorting, the user can sort the data in the list control by multiple columns.","pos":[5739,5904],"source":"When a [CMFCListCtrl Class](../../mfc/reference/cmfclistctrl-class.md) supports multiple sorting, the user can sort the data in the list control by multiple columns."},{"content":"To enable multiple sorting, call <bpt id=\"p1\">[</bpt>CMFCListCtrl::EnableMultipleSort<ept id=\"p1\">](#cmfclistctrl__enablemultiplesort)</ept>.","pos":[5905,6008],"source":" To enable multiple sorting, call [CMFCListCtrl::EnableMultipleSort](#cmfclistctrl__enablemultiplesort)."},{"pos":[6018,6091],"content":"<bpt id=\"p1\">&lt;a name=\"cmfclistctrl__oncompareitems\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCListCtrl::OnCompareItems","linkify":"<a name=\"cmfclistctrl__oncompareitems\"></a>  CMFCListCtrl::OnCompareItems","source":"<a name=\"cmfclistctrl__oncompareitems\"></a>  CMFCListCtrl::OnCompareItems"},{"content":"The framework calls this method when it compares two items.","pos":[6095,6154]},{"pos":[6269,6279],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lParam1`</ph>","pos":[6283,6297],"source":"[in] `lParam1`"},{"content":"The first item to compare.","pos":[6301,6327]},{"content":"[in] <ph id=\"ph1\">`lParam2`</ph>","pos":[6334,6348],"source":"[in] `lParam2`"},{"content":"The second item to compare.","pos":[6352,6379]},{"content":"[in] <ph id=\"ph1\">`iColumn`</ph>","pos":[6386,6400],"source":"[in] `iColumn`"},{"content":"The index of the column that this method is sorting.","pos":[6404,6456]},{"pos":[6466,6478],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates the relative position of the two items.","pos":[6482,6547]},{"content":"A negative value indicates that the first item should precede the second, positive value indicates that the first item should follow the second, and zero means that the two items are equivalent.","pos":[6548,6742]},{"pos":[6752,6759],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation always returns 0.","pos":[6763,6807]},{"content":"You must override this function to provide a sorting algorithm.","pos":[6808,6871]},{"pos":[6881,6958],"content":"<bpt id=\"p1\">&lt;a name=\"cmfclistctrl__ongetcellbkcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCListCtrl::OnGetCellBkColor","linkify":"<a name=\"cmfclistctrl__ongetcellbkcolor\"></a>  CMFCListCtrl::OnGetCellBkColor","source":"<a name=\"cmfclistctrl__ongetcellbkcolor\"></a>  CMFCListCtrl::OnGetCellBkColor"},{"content":"The framework calls this method when it must determine the background color of an individual cell.","pos":[6962,7060]},{"pos":[7154,7164],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nRow`</ph>","pos":[7168,7179],"source":"[in] `nRow`"},{"content":"The row of the cell in question.","pos":[7183,7215]},{"content":"[in] <ph id=\"ph1\">`nColumn`</ph>","pos":[7222,7236],"source":"[in] `nColumn`"},{"content":"The column of the cell in question.","pos":[7240,7275]},{"pos":[7285,7297],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7301,7367],"content":"A <ph id=\"ph1\">`COLOREF`</ph> value that specifies the background color of the cell.","source":"A `COLOREF` value that specifies the background color of the cell."},{"pos":[7377,7384],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of <ph id=\"ph1\">`OnGetCellBkColor`</ph> does not use the supplied input parameters and instead simply calls <ph id=\"ph2\">`GetBkColor`</ph>.","pos":[7388,7518],"source":"The default implementation of `OnGetCellBkColor` does not use the supplied input parameters and instead simply calls `GetBkColor`."},{"content":"Therefore, by default, the whole list control will have the same background color.","pos":[7519,7601]},{"content":"You can override <ph id=\"ph1\">`OnGetCellBkColor`</ph> in a derived class to mark individual cells with a separate background color.","pos":[7602,7715],"source":" You can override `OnGetCellBkColor` in a derived class to mark individual cells with a separate background color."},{"pos":[7725,7796],"content":"<bpt id=\"p1\">&lt;a name=\"cmfclistctrl__ongetcellfont\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCListCtrl::OnGetCellFont","linkify":"<a name=\"cmfclistctrl__ongetcellfont\"></a>  CMFCListCtrl::OnGetCellFont","source":"<a name=\"cmfclistctrl__ongetcellfont\"></a>  CMFCListCtrl::OnGetCellFont"},{"content":"The framework calls this method when it obtains the font for an individual cell.","pos":[7800,7880]},{"pos":[7992,8002],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nRow`</ph>","pos":[8006,8017],"source":"[in] `nRow`"},{"content":"The row of the cell in question.","pos":[8021,8053]},{"content":"[in] <ph id=\"ph1\">`nColumn`</ph>","pos":[8060,8074],"source":"[in] `nColumn`"},{"content":"The column of the cell in question.","pos":[8078,8113]},{"content":"[in] <ph id=\"ph1\">`dwData`</ph>","pos":[8120,8133],"source":"[in] `dwData`"},{"content":"User-defined data.","pos":[8137,8155]},{"content":"The default implementation does not use this parameter.","pos":[8156,8211]},{"pos":[8221,8233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A handle to the font that is used for the current cell.","pos":[8237,8292]},{"pos":[8302,8309],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, this method returns <ph id=\"ph1\">`NULL`</ph>.","pos":[8313,8352],"source":"By default, this method returns `NULL`."},{"content":"All of the cells in a list control have the same font.","pos":[8353,8407]},{"content":"Override this method in order to provide different fonts for different cells.","pos":[8408,8485]},{"pos":[8495,8576],"content":"<bpt id=\"p1\">&lt;a name=\"cmfclistctrl__ongetcelltextcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCListCtrl::OnGetCellTextColor","linkify":"<a name=\"cmfclistctrl__ongetcelltextcolor\"></a>  CMFCListCtrl::OnGetCellTextColor","source":"<a name=\"cmfclistctrl__ongetcelltextcolor\"></a>  CMFCListCtrl::OnGetCellTextColor"},{"content":"The framework calls this method when it must determine the text color of an individual cell.","pos":[8580,8672]},{"pos":[8768,8778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nRow`</ph>","pos":[8782,8793],"source":"[in] `nRow`"},{"content":"The row of the cell in question.","pos":[8797,8829]},{"content":"[in] <ph id=\"ph1\">`nColumn`</ph>","pos":[8836,8850],"source":"[in] `nColumn`"},{"content":"The column of the cell in question.","pos":[8854,8889]},{"pos":[8899,8911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8915,8975],"content":"A <ph id=\"ph1\">`COLOREF`</ph> value that specifies the text color of the cell.","source":"A `COLOREF` value that specifies the text color of the cell."},{"pos":[8985,8992],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, this method calls <ph id=\"ph1\">`GetTextColor`</ph> regardless of input parameters.","pos":[8996,9072],"source":"By default, this method calls `GetTextColor` regardless of input parameters."},{"content":"The whole list control will have the same text color.","pos":[9073,9126]},{"content":"You can override <ph id=\"ph1\">`OnGetCellTextColor`</ph> in a derived class to mark individual cells with a separate text color.","pos":[9127,9236],"source":" You can override `OnGetCellTextColor` in a derived class to mark individual cells with a separate text color."},{"pos":[9246,9323],"content":"<bpt id=\"p1\">&lt;a name=\"cmfclistctrl__removesortcolumn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCListCtrl::RemoveSortColumn","linkify":"<a name=\"cmfclistctrl__removesortcolumn\"></a>  CMFCListCtrl::RemoveSortColumn","source":"<a name=\"cmfclistctrl__removesortcolumn\"></a>  CMFCListCtrl::RemoveSortColumn"},{"content":"Removes a sort column from the list of sorted columns.","pos":[9327,9381]},{"pos":[9442,9452],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iColumn`</ph>","pos":[9456,9470],"source":"[in] `iColumn`"},{"content":"The column to remove.","pos":[9474,9495]},{"pos":[9505,9512],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method removes a sort column from the header control.","pos":[9516,9574]},{"content":"It calls <bpt id=\"p1\">[</bpt>CMFCHeaderCtrl::RemoveSortColumn<ept id=\"p1\">](../../mfc/reference/cmfcheaderctrl-class.md#cmfcheaderctrl__removesortcolumn)</ept>.","pos":[9575,9697],"source":" It calls [CMFCHeaderCtrl::RemoveSortColumn](../../mfc/reference/cmfcheaderctrl-class.md#cmfcheaderctrl__removesortcolumn)."},{"pos":[9707,9778],"content":"<bpt id=\"p1\">&lt;a name=\"cmfclistctrl__setsortcolumn\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCListCtrl::SetSortColumn","linkify":"<a name=\"cmfclistctrl__setsortcolumn\"></a>  CMFCListCtrl::SetSortColumn","source":"<a name=\"cmfclistctrl__setsortcolumn\"></a>  CMFCListCtrl::SetSortColumn"},{"content":"Sets the current sorted column and the sort order.","pos":[9782,9832]},{"pos":[9950,9960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iColumn`</ph>","pos":[9964,9978],"source":"[in] `iColumn`"},{"content":"The column to sort.","pos":[9982,10001]},{"content":"[in] <ph id=\"ph1\">`bAscending`</ph>","pos":[10008,10025],"source":"[in] `bAscending`"},{"content":"A Boolean that specifies the sort order.","pos":[10029,10069]},{"content":"[in] <ph id=\"ph1\">`bAdd`</ph>","pos":[10076,10087],"source":"[in] `bAdd`"},{"content":"A Boolean that specifies whether the method adds the column indicated by <ph id=\"ph1\">`iColumn`</ph> to the list of sort columns.","pos":[10091,10202],"source":" A Boolean that specifies whether the method adds the column indicated by `iColumn` to the list of sort columns."},{"pos":[10212,10219],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10223,10412],"content":"This method passes the input parameters to the header control by using the method <bpt id=\"p1\">[</bpt>CMFCHeaderCtrl::SetSortColumn<ept id=\"p1\">](../../mfc/reference/cmfcheaderctrl-class.md#cmfcheaderctrl__setsortcolumn)</ept>.","source":"This method passes the input parameters to the header control by using the method [CMFCHeaderCtrl::SetSortColumn](../../mfc/reference/cmfcheaderctrl-class.md#cmfcheaderctrl__setsortcolumn)."},{"pos":[10422,10475],"content":"<bpt id=\"p1\">&lt;a name=\"cmfclistctrl__sort\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCListCtrl::Sort","linkify":"<a name=\"cmfclistctrl__sort\"></a>  CMFCListCtrl::Sort","source":"<a name=\"cmfclistctrl__sort\"></a>  CMFCListCtrl::Sort"},{"content":"Sorts the list control.","pos":[10479,10502]},{"pos":[10619,10629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iColumn`</ph>","pos":[10633,10647],"source":"[in] `iColumn`"},{"content":"The column to sort.","pos":[10651,10670]},{"content":"[in] <ph id=\"ph1\">`bAscending`</ph>","pos":[10677,10694],"source":"[in] `bAscending`"},{"content":"A Boolean that specifies the sort order.","pos":[10698,10738]},{"content":"[in] <ph id=\"ph1\">`bAdd`</ph>","pos":[10745,10756],"source":"[in] `bAdd`"},{"content":"A Boolean that specifies whether this method adds the column indicated by <ph id=\"ph1\">`iColumn`</ph> to the list of sort columns.","pos":[10760,10872],"source":" A Boolean that specifies whether this method adds the column indicated by `iColumn` to the list of sort columns."},{"pos":[10881,10889],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[10893,10941],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[10944,10991],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CListCtrl Class<ept id=\"p1\">](../../mfc/reference/clistctrl-class.md)</ept>","pos":[10994,11052],"source":" [CListCtrl Class](../../mfc/reference/clistctrl-class.md)"}],"content":"---\ntitle: \"CMFCListCtrl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCListCtrl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCListCtrl class\"\nms.assetid: 50d16aee-138c-4f34-8690-cb75d544ef2e\ncaps.latest.revision: 29\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCListCtrl Class\nThe `CMFCListCtrl` class extends the functionality of [CListCtrl Class](../../mfc/reference/clistctrl-class.md) class by supporting the advanced header control functionality of the [CMFCHeaderCtrl Class](../../mfc/reference/cmfcheaderctrl-class.md).  \n  \n## Syntax  \n  \n```  \nclass CMFCListCtrl : public CListCtrl  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCListCtrl::EnableMarkSortedColumn](#cmfclistctrl__enablemarksortedcolumn)|Enables the ability to mark a sorted column with a different background color.|  \n|[CMFCListCtrl::EnableMultipleSort](#cmfclistctrl__enablemultiplesort)|Enables multiple sort mode.|  \n|[CMFCListCtrl::GetHeaderCtrl](#cmfclistctrl__getheaderctrl)|Returns a reference to the underlined header control.|  \n|[CMFCListCtrl::IsMultipleSort](#cmfclistctrl__ismultiplesort)|Checks if the list control is in multiple sort mode.|  \n|[CMFCListCtrl::OnCompareItems](#cmfclistctrl__oncompareitems)|Called by the framework when it must compare two list control items.|  \n|[CMFCListCtrl::OnGetCellBkColor](#cmfclistctrl__ongetcellbkcolor)|Called by the framework when it must determine the background color of an individual cell.|  \n|[CMFCListCtrl::OnGetCellFont](#cmfclistctrl__ongetcellfont)|Called by the framework when it must obtain the font for the cell being drawn.|  \n|[CMFCListCtrl::OnGetCellTextColor](#cmfclistctrl__ongetcelltextcolor)|Called by the framework when it must determine the text color of an individual cell.|  \n|[CMFCListCtrl::RemoveSortColumn](#cmfclistctrl__removesortcolumn)|Removes a sort column from the list of sorted columns.|  \n|[CMFCListCtrl::SetSortColumn](#cmfclistctrl__setsortcolumn)|Sets the current sorted column and the sort order.|  \n|[CMFCListCtrl::Sort](#cmfclistctrl__sort)|Sorts the list control.|  \n  \n## Remarks  \n `CMFCListCtrl` offers two enhancements to [CListCtrl Class](../../mfc/reference/clistctrl-class.md) class. First, it indicates that column sorting is an available option by automatically drawing a sort arrow on the header. Second, it supports data sorting on multiple columns at the same time.  \n  \n## Example  \n The following example demonstrates how to use various methods in the `CMFCListCtrl` class. The example shows how to create a list control, insert columns, insert items, set the text of an item, and set the font of the list control. This code snippet is part of the [Visual Studio Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_VisualStudioDemo#25](../../mfc/codesnippet/cpp/cmfclistctrl-class_1.h)]  \n[!code-cpp[NVC_MFC_VisualStudioDemo#26](../../mfc/codesnippet/cpp/cmfclistctrl-class_2.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CListCtrl](../../mfc/reference/clistctrl-class.md)  \n  \n [CMFCListCtrl](../../mfc/reference/cmfclistctrl-class.md)  \n  \n## Requirements  \n **Header:** afxlistctrl.h  \n  \n##  <a name=\"cmfclistctrl__enablemarksortedcolumn\"></a>  CMFCListCtrl::EnableMarkSortedColumn  \n Marks the sorted columns with a different background color.  \n  \n```  \nvoid EnableMarkSortedColumn(\n    BOOL bMark = TRUE,  \n    BOOL bRedraw = TRUE);\n```  \n  \n### Parameters  \n [in] `bMark`  \n A Boolean parameter that determines whether to enable a different background color.  \n  \n [in] `bRedraw`  \n A Boolean parameter that determines whether to redraw the control immediately.  \n  \n### Remarks  \n `EnableMarkSortedColumn` uses the method `CDrawingManager::PixelAlpha` to calculate what color to use for sorted columns. The color picked is based upon the regular background color.  \n  \n##  <a name=\"cmfclistctrl__enablemultiplesort\"></a>  CMFCListCtrl::EnableMultipleSort  \n Enables sorting the rows of data in the list control by multiple columns.  \n  \n```  \nvoid EnableMultipleSort(BOOL bEnable = TRUE);\n```  \n  \n### Parameters  \n [in] `bEnable`  \n A Boolean that specifies whether to enable multiple column sort mode.  \n  \n### Remarks  \n When you enable sorting based on multiple columns, the columns do have a hierarchy. The rows of data will first be sorted by the primary column. Any equivalent values are then sorted by each subsequent column based on priority.  \n  \n##  <a name=\"cmfclistctrl__getheaderctrl\"></a>  CMFCListCtrl::GetHeaderCtrl  \n Returns a reference to the header control.  \n  \n```  \nvirtual CMFCHeaderCtrl& GetHeaderCtrl();\n```  \n  \n### Return Value  \n A reference to the underlying [CMFCHeaderCtrl](../../mfc/reference/cmfcheaderctrl-class.md) object.  \n  \n### Remarks  \n The header control for a list control is the window that contains the titles for the columns. It is usually positioned directly above the columns.  \n  \n##  <a name=\"cmfclistctrl__ismultiplesort\"></a>  CMFCListCtrl::IsMultipleSort  \n Checks whether the list control currently supports sorting on multiple columns.  \n  \n```  \nBOOL IsMultipleSort() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the list control supports multiple sort; `FALSE` otherwise.  \n  \n### Remarks  \n When a [CMFCListCtrl Class](../../mfc/reference/cmfclistctrl-class.md) supports multiple sorting, the user can sort the data in the list control by multiple columns. To enable multiple sorting, call [CMFCListCtrl::EnableMultipleSort](#cmfclistctrl__enablemultiplesort).  \n  \n##  <a name=\"cmfclistctrl__oncompareitems\"></a>  CMFCListCtrl::OnCompareItems  \n The framework calls this method when it compares two items.  \n  \n```  \nvirtual int OnCompareItems(\n    LPARAM lParam1,  \n    LPARAM lParam2,  \n    int iColumn);\n```  \n  \n### Parameters  \n [in] `lParam1`  \n The first item to compare.  \n  \n [in] `lParam2`  \n The second item to compare.  \n  \n [in] `iColumn`  \n The index of the column that this method is sorting.  \n  \n### Return Value  \n An integer that indicates the relative position of the two items. A negative value indicates that the first item should precede the second, positive value indicates that the first item should follow the second, and zero means that the two items are equivalent.  \n  \n### Remarks  \n The default implementation always returns 0. You must override this function to provide a sorting algorithm.  \n  \n##  <a name=\"cmfclistctrl__ongetcellbkcolor\"></a>  CMFCListCtrl::OnGetCellBkColor  \n The framework calls this method when it must determine the background color of an individual cell.  \n  \n```  \nvirtual COLORREF OnGetCellBkColor(\n    int nRow,  \n    int nColumn);\n```  \n  \n### Parameters  \n [in] `nRow`  \n The row of the cell in question.  \n  \n [in] `nColumn`  \n The column of the cell in question.  \n  \n### Return Value  \n A `COLOREF` value that specifies the background color of the cell.  \n  \n### Remarks  \n The default implementation of `OnGetCellBkColor` does not use the supplied input parameters and instead simply calls `GetBkColor`. Therefore, by default, the whole list control will have the same background color. You can override `OnGetCellBkColor` in a derived class to mark individual cells with a separate background color.  \n  \n##  <a name=\"cmfclistctrl__ongetcellfont\"></a>  CMFCListCtrl::OnGetCellFont  \n The framework calls this method when it obtains the font for an individual cell.  \n  \n```  \nvirtual HFONT OnGetCellFont(\n    int nRow,  \n    int nColumn,  \n    DWORD dwData = 0);\n```  \n  \n### Parameters  \n [in] `nRow`  \n The row of the cell in question.  \n  \n [in] `nColumn`  \n The column of the cell in question.  \n  \n [in] `dwData`  \n User-defined data. The default implementation does not use this parameter.  \n  \n### Return Value  \n A handle to the font that is used for the current cell.  \n  \n### Remarks  \n By default, this method returns `NULL`. All of the cells in a list control have the same font. Override this method in order to provide different fonts for different cells.  \n  \n##  <a name=\"cmfclistctrl__ongetcelltextcolor\"></a>  CMFCListCtrl::OnGetCellTextColor  \n The framework calls this method when it must determine the text color of an individual cell.  \n  \n```  \nvirtual COLORREF OnGetCellTextColor(\n    int nRow,  \n    int nColumn);\n```  \n  \n### Parameters  \n [in] `nRow`  \n The row of the cell in question.  \n  \n [in] `nColumn`  \n The column of the cell in question.  \n  \n### Return Value  \n A `COLOREF` value that specifies the text color of the cell.  \n  \n### Remarks  \n By default, this method calls `GetTextColor` regardless of input parameters. The whole list control will have the same text color. You can override `OnGetCellTextColor` in a derived class to mark individual cells with a separate text color.  \n  \n##  <a name=\"cmfclistctrl__removesortcolumn\"></a>  CMFCListCtrl::RemoveSortColumn  \n Removes a sort column from the list of sorted columns.  \n  \n```  \nvoid RemoveSortColumn(int iColumn);\n```  \n  \n### Parameters  \n [in] `iColumn`  \n The column to remove.  \n  \n### Remarks  \n This method removes a sort column from the header control. It calls [CMFCHeaderCtrl::RemoveSortColumn](../../mfc/reference/cmfcheaderctrl-class.md#cmfcheaderctrl__removesortcolumn).  \n  \n##  <a name=\"cmfclistctrl__setsortcolumn\"></a>  CMFCListCtrl::SetSortColumn  \n Sets the current sorted column and the sort order.  \n  \n```  \nvoid SetSortColumn(\n    int iColumn,  \n    BOOL bAscending = TRUE,  \n    BOOL bAdd = FALSE);\n```  \n  \n### Parameters  \n [in] `iColumn`  \n The column to sort.  \n  \n [in] `bAscending`  \n A Boolean that specifies the sort order.  \n  \n [in] `bAdd`  \n A Boolean that specifies whether the method adds the column indicated by `iColumn` to the list of sort columns.  \n  \n### Remarks  \n This method passes the input parameters to the header control by using the method [CMFCHeaderCtrl::SetSortColumn](../../mfc/reference/cmfcheaderctrl-class.md#cmfcheaderctrl__setsortcolumn).  \n  \n##  <a name=\"cmfclistctrl__sort\"></a>  CMFCListCtrl::Sort  \n Sorts the list control.  \n  \n```  \nvirtual void Sort(\n    int iColumn,  \n    BOOL bAscending = TRUE,  \n    BOOL bAdd = FALSE);\n```  \n  \n### Parameters  \n [in] `iColumn`  \n The column to sort.  \n  \n [in] `bAscending`  \n A Boolean that specifies the sort order.  \n  \n [in] `bAdd`  \n A Boolean that specifies whether this method adds the column indicated by `iColumn` to the list of sort columns.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CListCtrl Class](../../mfc/reference/clistctrl-class.md)\n"}