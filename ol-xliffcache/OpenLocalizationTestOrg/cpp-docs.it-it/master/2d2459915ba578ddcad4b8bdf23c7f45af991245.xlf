<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d2459915ba578ddcad4b8bdf23c7f45af991245</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\understanding-backus-nauer-form-bnf-syntax.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf6f6465663c9acb6e6b5069d77f1ef7804eb5ae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ece835c0965e150224e4258d417936c29cdb8a7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Understanding Backus Nauer Form (BNF) Syntax | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Understanding Backus Nauer Form (BNF) Syntax</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The scripts used by the ATL Registrar are described in this topic using BNF syntax, which uses the notation shown in the following table.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Convention/symbol</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Equivalent</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>OR</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>One or more <ph id="ph1">`X`</ph>s.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>is optional.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Optional delimiters are denoted by <ph id="ph1">`[]`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Any <bpt id="p1">**</bpt>bold<ept id="p1">**</ept> text</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A string literal.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Any <bpt id="p1">*</bpt>italicized<ept id="p1">*</ept> text</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>How to construct the string literal.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>As indicated in the preceding table, registrar scripts use string literals.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These values are actual text that must appear in your script.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following table describes the string literals used in an ATL Registrar script.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>String literal</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Action</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>ForceRemove</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Completely removes the next key (if it exists) and then re-creates it.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>NoRemove</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Does not remove the next key during Unregister.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>val</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Specifies that <ph id="ph1">`&lt;Key Name&gt;`</ph> is actually a named value.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Delete</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Deletes the next key during Register.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>s</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Specifies that the next value is a string (<bpt id="p1">**</bpt>REG_SZ<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>d</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Specifies that the next value is a <bpt id="p1">**</bpt>DWORD<ept id="p1">**</ept> (<bpt id="p2">**</bpt>REG_DWORD<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>m</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Specifies that the next value is a multistring (<bpt id="p1">**</bpt>REG_MULTI_SZ<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>b</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Specifies that the next value is a binary value (<bpt id="p1">**</bpt>REG_BINARY<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>BNF Syntax Examples</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Here are a few syntax examples to help you understand how the notation and string literals work in an ATL Registrar script.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Syntax Example 1</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>specifies that <ph id="ph1">`registry expression`</ph> is equivalent to <ph id="ph2">`Add Key`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Syntax Example 2</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>specifies that <ph id="ph1">`registry expression`</ph> is equivalent to either <ph id="ph2">`Add Key`</ph> or <ph id="ph3">`Delete Key`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Syntax Example 3</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>specifies that <ph id="ph1">`Key Name`</ph> is equivalent to one or more <ph id="ph2">`AlphaNumerics`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Syntax Example 4</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>specifies that <ph id="ph1">`Add Key`</ph> is equivalent to <ph id="ph2">`Key Name`</ph>, and that the string literals, <ph id="ph3">`ForceRemove`</ph>, <ph id="ph4">`NoRemove`</ph>, and <ph id="ph5">`val`</ph>, are optional.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Syntax Example 5</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>specifies that <ph id="ph1">`AlphaNumeric`</ph> is equivalent to any non-NULL character.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Syntax Example 6</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>specifies that the key name <ph id="ph1">`testmulti`</ph> is a multistring value composed of <ph id="ph2">`String 1`</ph> and <ph id="ph3">`String 2`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Syntax Example 7</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>specifies that the key name <ph id="ph1">`testhex`</ph> is a <bpt id="p1">**</bpt>DWORD<ept id="p1">**</ept> value set to hexadecimal 55 (decimal 85).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Note this format adheres to the <bpt id="p1">**</bpt>&amp;H<ept id="p1">**</ept> notation as found in the Visual Basic specification.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Creating Registrar Scripts</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>