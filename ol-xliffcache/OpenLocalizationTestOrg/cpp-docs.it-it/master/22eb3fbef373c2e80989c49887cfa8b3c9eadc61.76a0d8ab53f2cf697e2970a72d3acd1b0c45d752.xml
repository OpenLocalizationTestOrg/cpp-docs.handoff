{"nodes":[{"pos":[12,83],"content":"Overloading the &lt;&lt; Operator for Your Own Classes | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Overloading the <ph id=\"ph1\">&amp;lt;&amp;lt;</ph> Operator for Your Own Classes | Microsoft Docs","pos":[0,71],"source":"Overloading the &lt;&lt; Operator for Your Own Classes | Microsoft Docs"}]},{"content":"Overloading the <ph id=\"ph1\">&amp;lt;&amp;lt;</ph> Operator for Your Own Classes","pos":[689,743],"source":"Overloading the &lt;&lt; Operator for Your Own Classes"},{"content":"Output streams use the insertion (<ph id=\"ph1\">`&lt;&lt;`</ph>) operator for standard types.","pos":[744,812],"source":"Output streams use the insertion (`<<`) operator for standard types."},{"content":"You can also overload the <ph id=\"ph1\">`&lt;&lt;`</ph> operator for your own classes.","pos":[813,874],"source":" You can also overload the `<<` operator for your own classes."},{"content":"Example","pos":[883,890]},{"content":"The <ph id=\"ph1\">`write`</ph> function example showed the use of a <ph id=\"ph2\">`Date`</ph> structure.","pos":[894,960],"source":"The `write` function example showed the use of a `Date` structure."},{"content":"A date is an ideal candidate for a C++ class in which the data members (month, day, and year) are hidden from view.","pos":[961,1076]},{"content":"An output stream is the logical destination for displaying such a structure.","pos":[1077,1153]},{"content":"This code displays a date using the <ph id=\"ph1\">`cout`</ph> object:","pos":[1154,1204],"source":" This code displays a date using the `cout` object:"},{"content":"To get <ph id=\"ph1\">`cout`</ph> to accept a <ph id=\"ph2\">`Date`</ph> object after the insertion operator, overload the insertion operator to recognize an <ph id=\"ph3\">`ostream`</ph> object on the left and a <ph id=\"ph4\">`Date`</ph> on the right.","pos":[1259,1432],"source":"To get `cout` to accept a `Date` object after the insertion operator, overload the insertion operator to recognize an `ostream` object on the left and a `Date` on the right."},{"content":"The overloaded <ph id=\"ph1\">`&lt;&lt;`</ph> operator function must then be declared as a friend of class <ph id=\"ph2\">`Date`</ph> so it can access the private data within a <ph id=\"ph3\">`Date`</ph> object.","pos":[1433,1578],"source":" The overloaded `<<` operator function must then be declared as a friend of class `Date` so it can access the private data within a `Date` object."},{"content":"Remarks","pos":[2124,2131]},{"pos":[2135,2252],"content":"The overloaded operator returns a reference to the original <ph id=\"ph1\">`ostream`</ph> object, which means you can combine insertions:","source":"The overloaded operator returns a reference to the original `ostream` object, which means you can combine insertions:"},{"content":"See Also","pos":[2313,2321]},{"content":"Output Streams","pos":[2326,2340]}],"content":"---\ntitle: \"Overloading the &lt;&lt; Operator for Your Own Classes | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator<<, overloading for your own classes\"\n  - \"operator <<, overloading for your own classes\"\nms.assetid: ad1d2c49-d84e-48a8-9c09-121f28b10bf0\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Overloading the &lt;&lt; Operator for Your Own Classes\nOutput streams use the insertion (`<<`) operator for standard types. You can also overload the `<<` operator for your own classes.  \n  \n## Example  \n The `write` function example showed the use of a `Date` structure. A date is an ideal candidate for a C++ class in which the data members (month, day, and year) are hidden from view. An output stream is the logical destination for displaying such a structure. This code displays a date using the `cout` object:  \n  \n```  \nDate dt(1, 2, 92);\n\ncout <<dt;  \n```  \n  \n To get `cout` to accept a `Date` object after the insertion operator, overload the insertion operator to recognize an `ostream` object on the left and a `Date` on the right. The overloaded `<<` operator function must then be declared as a friend of class `Date` so it can access the private data within a `Date` object.  \n  \n```  \n// overload_date.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nclass Date  \n{  \n    int mo, da, yr;  \npublic:  \n    Date(int m, int d, int y)  \n    {  \n        mo = m; da = d; yr = y;  \n    }  \n    friend ostream& operator<<(ostream& os, const Date& dt);  \n};  \n  \nostream& operator<<(ostream& os, const Date& dt)  \n{  \n    os << dt.mo << '/' << dt.da << '/' << dt.yr;  \n    return os;  \n}  \n  \nint main()  \n{  \n    Date dt(5, 6, 92);  \n    cout << dt;  \n}  \n```  \n  \n```Output  \n5/6/92  \n```  \n  \n## Remarks  \n The overloaded operator returns a reference to the original `ostream` object, which means you can combine insertions:  \n  \n```  \ncout <<\"The date is\" <<dt <<flush;  \n```  \n  \n## See Also  \n [Output Streams](../standard-library/output-streams.md)\n\n"}