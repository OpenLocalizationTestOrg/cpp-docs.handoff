{"nodes":[{"pos":[12,48],"content":"CMouseManager Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMouseManager Class | Microsoft Docs","pos":[0,36]}]},{"pos":[613,632],"content":"CMouseManager Class","linkify":"CMouseManager Class","nodes":[{"content":"CMouseManager Class","pos":[0,19]}]},{"pos":[633,793],"content":"Allows a user to associate different commands with a particular <bpt id=\"p1\">[</bpt>CView<ept id=\"p1\">](../../mfc/reference/cview-class.md)</ept> object when the user double-clicks inside that view.","source":"Allows a user to associate different commands with a particular [CView](../../mfc/reference/cview-class.md) object when the user double-clicks inside that view."},{"pos":[802,808],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[871,878],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[888,902],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[909,913]},{"content":"Description","pos":[914,925]},{"pos":[963,1012],"content":"<bpt id=\"p1\">[</bpt>CMouseManager::AddView<ept id=\"p1\">](#cmousemanager__addview)</ept>","source":"[CMouseManager::AddView](#cmousemanager__addview)"},{"content":"Adds a <ph id=\"ph1\">`CView`</ph> object to the <bpt id=\"p1\">**</bpt>Customization<ept id=\"p1\">**</ept> dialog box.","pos":[1013,1071],"source":"Adds a `CView` object to the **Customization** dialog box."},{"content":"The <bpt id=\"p1\">**</bpt>Customization<ept id=\"p1\">**</ept> dialog box enables the user to associate a double-click with a command for each of the listed views.","pos":[1072,1194],"source":" The **Customization** dialog box enables the user to associate a double-click with a command for each of the listed views."},{"pos":[1199,1278],"content":"<bpt id=\"p1\">[</bpt>CMouseManager::GetViewDblClickCommand<ept id=\"p1\">](#cmousemanager__getviewdblclickcommand)</ept>","source":"[CMouseManager::GetViewDblClickCommand](#cmousemanager__getviewdblclickcommand)"},{"content":"Returns the command that is executed when the user double-clicks inside the provided view.","pos":[1279,1369]},{"pos":[1374,1435],"content":"<bpt id=\"p1\">[</bpt>CMouseManager::GetViewIconId<ept id=\"p1\">](#cmousemanager__getviewiconid)</ept>","source":"[CMouseManager::GetViewIconId](#cmousemanager__getviewiconid)"},{"content":"Returns the icon associated with the provided view ID.","pos":[1436,1490]},{"pos":[1495,1560],"content":"<bpt id=\"p1\">[</bpt>CMouseManager::GetViewIdByName<ept id=\"p1\">](#cmousemanager__getviewidbyname)</ept>","source":"[CMouseManager::GetViewIdByName](#cmousemanager__getviewidbyname)"},{"content":"Returns the view ID associated with the provided view name.","pos":[1561,1620]},{"pos":[1625,1684],"content":"<bpt id=\"p1\">[</bpt>CMouseManager::GetViewNames<ept id=\"p1\">](#cmousemanager__getviewnames)</ept>","source":"[CMouseManager::GetViewNames](#cmousemanager__getviewnames)"},{"content":"Retrieves a list of all added view names.","pos":[1685,1726]},{"pos":[1731,1784],"content":"<bpt id=\"p1\">[</bpt>CMouseManager::LoadState<ept id=\"p1\">](#cmousemanager__loadstate)</ept>","source":"[CMouseManager::LoadState](#cmousemanager__loadstate)"},{"pos":[1785,1843],"content":"Loads the <ph id=\"ph1\">`CMouseManager`</ph> state from the Windows registry.","source":"Loads the `CMouseManager` state from the Windows registry."},{"pos":[1848,1901],"content":"<bpt id=\"p1\">[</bpt>CMouseManager::SaveState<ept id=\"p1\">](#cmousemanager__savestate)</ept>","source":"[CMouseManager::SaveState](#cmousemanager__savestate)"},{"pos":[1902,1959],"content":"Writes the <ph id=\"ph1\">`CMouseManager`</ph> state to the Windows registry.","source":"Writes the `CMouseManager` state to the Windows registry."},{"pos":[1964,2037],"content":"<bpt id=\"p1\">[</bpt>CMouseManager::SetCommandForDblClk<ept id=\"p1\">](#cmousemanager__setcommandfordblclk)</ept>","source":"[CMouseManager::SetCommandForDblClk](#cmousemanager__setcommandfordblclk)"},{"content":"Associates the provided command and the provided view.","pos":[2038,2092]},{"pos":[2102,2109],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`CMouseManager`</ph> class maintains a collection of <ph id=\"ph2\">`CView`</ph> objects.","pos":[2113,2181],"source":"The `CMouseManager` class maintains a collection of `CView` objects."},{"content":"Each view is identified by a name and by an ID.","pos":[2182,2229]},{"content":"These views are shown in the <bpt id=\"p1\">**</bpt>Customization<ept id=\"p1\">**</ept> dialog box.","pos":[2230,2288],"source":" These views are shown in the **Customization** dialog box."},{"content":"The user can change the command that is associated with any view through the <bpt id=\"p1\">**</bpt>Customization<ept id=\"p1\">**</ept> dialog box.","pos":[2289,2395],"source":" The user can change the command that is associated with any view through the **Customization** dialog box."},{"content":"The associated command is executed when the user double-clicks in that view.","pos":[2396,2472]},{"content":"To support this from a coding perspective, you must process the <ph id=\"ph1\">`WM_LBUTTONDBLCLK`</ph> message and call the <bpt id=\"p1\">[</bpt>CWinAppEx::OnViewDoubleClick<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__onviewdoubleclick)</ept> function in the code for that <ph id=\"ph2\">`CView`</ph> object..","pos":[2473,2723],"source":" To support this from a coding perspective, you must process the `WM_LBUTTONDBLCLK` message and call the [CWinAppEx::OnViewDoubleClick](../../mfc/reference/cwinappex-class.md#cwinappex__onviewdoubleclick) function in the code for that `CView` object.."},{"content":"You should not create a <ph id=\"ph1\">`CMouseManager`</ph> object manually.","pos":[2730,2786],"source":"You should not create a `CMouseManager` object manually."},{"content":"It will be created by the framework of your application.","pos":[2787,2843]},{"content":"It will also be destroyed automatically when the user exits the application.","pos":[2844,2920]},{"content":"To get a pointer to the mouse manager for your application, call <bpt id=\"p1\">[</bpt>CWinAppEx::GetMouseManager<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__getmousemanager)</ept>.","pos":[2921,3082],"source":" To get a pointer to the mouse manager for your application, call [CWinAppEx::GetMouseManager](../../mfc/reference/cwinappex-class.md#cwinappex__getmousemanager)."},{"pos":[3091,3112],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3116,3163],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[3170,3229],"content":"<bpt id=\"p1\">[</bpt>CMouseManager<ept id=\"p1\">](../../mfc/reference/cmousemanager-class.md)</ept>","source":"[CMouseManager](../../mfc/reference/cmousemanager-class.md)"},{"pos":[3238,3250],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3254,3283],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxmousemanager.h","source":"**Header:** afxmousemanager.h"},{"pos":[3293,3354],"content":"<bpt id=\"p1\">&lt;a name=\"cmousemanager__addview\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMouseManager::AddView","linkify":"<a name=\"cmousemanager__addview\"></a>  CMouseManager::AddView","source":"<a name=\"cmousemanager__addview\"></a>  CMouseManager::AddView"},{"pos":[3358,3529],"content":"Registers a <bpt id=\"p1\">[</bpt>CView<ept id=\"p1\">](../../mfc/reference/cview-class.md)</ept> object with the <bpt id=\"p2\">[</bpt>CMouseManager Class<ept id=\"p2\">](../../mfc/reference/cmousemanager-class.md)</ept> to support custom mouse behavior.","source":"Registers a [CView](../../mfc/reference/cview-class.md) object with the [CMouseManager Class](../../mfc/reference/cmousemanager-class.md) to support custom mouse behavior."},{"pos":[3723,3733],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iViewId`</ph>","pos":[3737,3751],"source":"[in] `iViewId`"},{"content":"A view ID.","pos":[3755,3765]},{"content":"[in] <ph id=\"ph1\">`uiViewNameResId`</ph>","pos":[3772,3794],"source":"[in] `uiViewNameResId`"},{"content":"A resource string ID that references the view name.","pos":[3798,3849]},{"content":"[in] <ph id=\"ph1\">`uiIconId`</ph>","pos":[3856,3871],"source":"[in] `uiIconId`"},{"content":"A view icon ID.","pos":[3875,3890]},{"content":"[in] <ph id=\"ph1\">`iId`</ph>","pos":[3897,3907],"source":"[in] `iId`"},{"content":"A view ID.","pos":[3911,3921]},{"content":"[in] <ph id=\"ph1\">`lpszViewName`</ph>","pos":[3928,3947],"source":"[in] `lpszViewName`"},{"content":"A view name.","pos":[3951,3963]},{"pos":[3973,3985],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[3989,4024]},{"pos":[4034,4041],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In order to support custom mouse behavior, a view must be registered with the <ph id=\"ph1\">`CMouseManager`</ph> object.","pos":[4045,4146],"source":"In order to support custom mouse behavior, a view must be registered with the `CMouseManager` object."},{"content":"Any object derived from the <ph id=\"ph1\">`CView`</ph> class can be registered with the mouse manager.","pos":[4147,4230],"source":" Any object derived from the `CView` class can be registered with the mouse manager."},{"content":"The string and icon associated with a view are displayed in the <bpt id=\"p1\">**</bpt>Mouse<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> dialog box.","pos":[4231,4341],"source":" The string and icon associated with a view are displayed in the **Mouse** tab of the **Customize** dialog box."},{"pos":[4348,4451],"content":"It is the responsibility of the programmer to create and maintain view IDs such as <ph id=\"ph1\">`iViewId`</ph> and <ph id=\"ph2\">`iId`</ph>.","source":"It is the responsibility of the programmer to create and maintain view IDs such as `iViewId` and `iId`."},{"pos":[4458,4609],"content":"For more information about how to provide custom mouse behavior, see <bpt id=\"p1\">[</bpt>Keyboard and Mouse Customization<ept id=\"p1\">](../../mfc/keyboard-and-mouse-customization.md)</ept>.","source":"For more information about how to provide custom mouse behavior, see [Keyboard and Mouse Customization](../../mfc/keyboard-and-mouse-customization.md)."},{"pos":[4619,4626],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to retrieve a pointer to a <ph id=\"ph1\">`CMouseManager`</ph> object by using the <ph id=\"ph2\">`CWinAppEx::GetMouseManager`</ph> method and the <ph id=\"ph3\">`AddView`</ph> method in the <ph id=\"ph4\">`CMouseManager`</ph> class.","pos":[4630,4822],"source":"The following example demonstrates how to retrieve a pointer to a `CMouseManager` object by using the `CWinAppEx::GetMouseManager` method and the `AddView` method in the `CMouseManager` class."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>State Collection sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[4823,4911],"source":" This code snippet is part of the [State Collection sample](../../visual-cpp-samples.md)."},{"pos":[4918,5019],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_StateCollection#4<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cmousemanager-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_StateCollection#4](../../mfc/reference/codesnippet/cpp/cmousemanager-class_1.cpp)]"},{"pos":[5029,5120],"content":"<bpt id=\"p1\">&lt;a name=\"cmousemanager__getviewdblclickcommand\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMouseManager::GetViewDblClickCommand","linkify":"<a name=\"cmousemanager__getviewdblclickcommand\"></a>  CMouseManager::GetViewDblClickCommand","source":"<a name=\"cmousemanager__getviewdblclickcommand\"></a>  CMouseManager::GetViewDblClickCommand"},{"content":"Returns the command that is executed when the user double-clicks inside the provided view.","pos":[5124,5214]},{"pos":[5286,5296],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iId`</ph>","pos":[5300,5310],"source":"[in] `iId`"},{"content":"The view ID.","pos":[5314,5326]},{"pos":[5336,5348],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The command identifier if the view is associated with a command; otherwise 0.","pos":[5352,5429]},{"pos":[5439,5512],"content":"<bpt id=\"p1\">&lt;a name=\"cmousemanager__getviewiconid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMouseManager::GetViewIconId","linkify":"<a name=\"cmousemanager__getviewiconid\"></a>  CMouseManager::GetViewIconId","source":"<a name=\"cmousemanager__getviewiconid\"></a>  CMouseManager::GetViewIconId"},{"content":"Retrieves the icon associated with a view ID.","pos":[5516,5561]},{"pos":[5628,5638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iViewId`</ph>","pos":[5642,5656],"source":"[in] `iViewId`"},{"content":"The view ID.","pos":[5660,5672]},{"pos":[5682,5694],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An icon resource identifier if successful; otherwise 0.","pos":[5698,5753]},{"pos":[5763,5770],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5774,5891],"content":"This method will fail if the view is not first registered by using <bpt id=\"p1\">[</bpt>CMouseManager::AddView<ept id=\"p1\">](#cmousemanager__addview)</ept>.","source":"This method will fail if the view is not first registered by using [CMouseManager::AddView](#cmousemanager__addview)."},{"pos":[5901,5978],"content":"<bpt id=\"p1\">&lt;a name=\"cmousemanager__getviewidbyname\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMouseManager::GetViewIdByName","linkify":"<a name=\"cmousemanager__getviewidbyname\"></a>  CMouseManager::GetViewIdByName","source":"<a name=\"cmousemanager__getviewidbyname\"></a>  CMouseManager::GetViewIdByName"},{"content":"Retrieves the view ID associated with a view name.","pos":[5982,6032]},{"pos":[6105,6115],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszName`</ph>","pos":[6119,6134],"source":"[in] `lpszName`"},{"content":"The view name.","pos":[6138,6152]},{"pos":[6162,6174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A view ID if successful; otherwise 0.","pos":[6178,6215]},{"pos":[6225,6232],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6236,6341],"content":"This method searches through views registered by using <bpt id=\"p1\">[</bpt>CMouseManager::AddView<ept id=\"p1\">](#cmousemanager__addview)</ept>.","source":"This method searches through views registered by using [CMouseManager::AddView](#cmousemanager__addview)."},{"pos":[6351,6422],"content":"<bpt id=\"p1\">&lt;a name=\"cmousemanager__getviewnames\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMouseManager::GetViewNames","linkify":"<a name=\"cmousemanager__getviewnames\"></a>  CMouseManager::GetViewNames","source":"<a name=\"cmousemanager__getviewnames\"></a>  CMouseManager::GetViewNames"},{"content":"Retrieves a list of all the registered view names.","pos":[6426,6476]},{"pos":[6555,6565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`listOfNames`</ph>","pos":[6569,6588],"source":"[out] `listOfNames`"},{"content":"A reference to <ph id=\"ph1\">`CStringList`</ph> object.","pos":[6592,6628],"source":" A reference to `CStringList` object."},{"pos":[6638,6645],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6649,6797],"content":"This method fills the parameter <ph id=\"ph1\">`listOfNames`</ph> with the names of all the views registered by using <bpt id=\"p1\">[</bpt>CMouseManager::AddView<ept id=\"p1\">](#cmousemanager__addview)</ept>.","source":"This method fills the parameter `listOfNames` with the names of all the views registered by using [CMouseManager::AddView](#cmousemanager__addview)."},{"pos":[6807,6872],"content":"<bpt id=\"p1\">&lt;a name=\"cmousemanager__loadstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMouseManager::LoadState","linkify":"<a name=\"cmousemanager__loadstate\"></a>  CMouseManager::LoadState","source":"<a name=\"cmousemanager__loadstate\"></a>  CMouseManager::LoadState"},{"pos":[6876,6983],"content":"Loads the state of the <bpt id=\"p1\">[</bpt>CMouseManager Class<ept id=\"p1\">](../../mfc/reference/cmousemanager-class.md)</ept> from the registry.","source":"Loads the state of the [CMouseManager Class](../../mfc/reference/cmousemanager-class.md) from the registry."},{"pos":[7056,7066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszProfileName`</ph>","pos":[7070,7092],"source":"[in] `lpszProfileName`"},{"content":"A path of a registry key.","pos":[7096,7121]},{"pos":[7131,7143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[7147,7182]},{"pos":[7192,7199],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The state information loaded from the registry includes the registered views, view identifiers, and the associated commands.","pos":[7203,7327]},{"content":"If the parameter <ph id=\"ph1\">`lpszProfileName`</ph> is <ph id=\"ph2\">`NULL`</ph>, this function loads the <ph id=\"ph3\">`CMouseManager`</ph> data from the default registry location controlled by the <bpt id=\"p1\">[</bpt>CWinAppEx Class<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md)</ept>.","pos":[7328,7530],"source":" If the parameter `lpszProfileName` is `NULL`, this function loads the `CMouseManager` data from the default registry location controlled by the [CWinAppEx Class](../../mfc/reference/cwinappex-class.md)."},{"content":"In most cases, you do not have to call this function directly.","pos":[7537,7599]},{"content":"It is called as a part of the workspace initialization process.","pos":[7600,7663]},{"content":"For more information about the workspace initialization process, see <bpt id=\"p1\">[</bpt>CWinAppEx::LoadState<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__loadstate)</ept>.","pos":[7664,7817],"source":" For more information about the workspace initialization process, see [CWinAppEx::LoadState](../../mfc/reference/cwinappex-class.md#cwinappex__loadstate)."},{"pos":[7827,7892],"content":"<bpt id=\"p1\">&lt;a name=\"cmousemanager__savestate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMouseManager::SaveState","linkify":"<a name=\"cmousemanager__savestate\"></a>  CMouseManager::SaveState","source":"<a name=\"cmousemanager__savestate\"></a>  CMouseManager::SaveState"},{"pos":[7896,8002],"content":"Writes the state of the <bpt id=\"p1\">[</bpt>CMouseManager Class<ept id=\"p1\">](../../mfc/reference/cmousemanager-class.md)</ept> to the registry.","source":"Writes the state of the [CMouseManager Class](../../mfc/reference/cmousemanager-class.md) to the registry."},{"pos":[8075,8085],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszProfileName`</ph>","pos":[8089,8111],"source":"[in] `lpszProfileName`"},{"content":"A path of a registry key.","pos":[8115,8140]},{"pos":[8150,8162],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[8166,8201]},{"pos":[8211,8218],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The state information written to the registry includes all registered views, view identifiers, and the associated commands.","pos":[8222,8345]},{"content":"If the parameter <ph id=\"ph1\">`lpszProfileName`</ph> is <ph id=\"ph2\">`NULL`</ph>, this function writes the <ph id=\"ph3\">`CMouseManager`</ph> data to the default registry location controlled by the <bpt id=\"p1\">[</bpt>CWinAppEx Class<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md)</ept>.","pos":[8346,8547],"source":" If the parameter `lpszProfileName` is `NULL`, this function writes the `CMouseManager` data to the default registry location controlled by the [CWinAppEx Class](../../mfc/reference/cwinappex-class.md)."},{"content":"In most cases, you do not have to call this function directly.","pos":[8554,8616]},{"content":"It is called as a part of the workspace serialization process.","pos":[8617,8679]},{"content":"For more information about the workspace serialization process, see <bpt id=\"p1\">[</bpt>CWinAppEx::SaveState<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__savestate)</ept>.","pos":[8680,8832],"source":" For more information about the workspace serialization process, see [CWinAppEx::SaveState](../../mfc/reference/cwinappex-class.md#cwinappex__savestate)."},{"pos":[8842,8927],"content":"<bpt id=\"p1\">&lt;a name=\"cmousemanager__setcommandfordblclk\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMouseManager::SetCommandForDblClk","linkify":"<a name=\"cmousemanager__setcommandfordblclk\"></a>  CMouseManager::SetCommandForDblClk","source":"<a name=\"cmousemanager__setcommandfordblclk\"></a>  CMouseManager::SetCommandForDblClk"},{"content":"Associates a custom command with a view that is first registered with the mouse manager.","pos":[8931,9019]},{"pos":[9106,9116],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`iViewId`</ph>","pos":[9120,9134],"source":"[in] `iViewId`"},{"content":"The view identifier.","pos":[9138,9158]},{"content":"[in] <ph id=\"ph1\">`uiCmd`</ph>","pos":[9165,9177],"source":"[in] `uiCmd`"},{"content":"The command identifier.","pos":[9181,9204]},{"pos":[9214,9221],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In order to associate a custom command with a view, you must first register the view by using <bpt id=\"p1\">[</bpt>CMouseManager::AddView<ept id=\"p1\">](#cmousemanager__addview)</ept>.","pos":[9225,9369],"source":"In order to associate a custom command with a view, you must first register the view by using [CMouseManager::AddView](#cmousemanager__addview)."},{"content":"The <ph id=\"ph1\">`AddView`</ph> method requires a view identifier as an input parameter.","pos":[9370,9440],"source":" The `AddView` method requires a view identifier as an input parameter."},{"content":"Once you register a view, you can call <ph id=\"ph1\">`CMouseManager::SetCommandForDblClk`</ph> with the same view identifier input parameter that you supplied to <ph id=\"ph2\">`AddView`</ph>.","pos":[9441,9594],"source":" Once you register a view, you can call `CMouseManager::SetCommandForDblClk` with the same view identifier input parameter that you supplied to `AddView`."},{"content":"Thereafter, when the user double-clicks the mouse in the registered view, the application will execute the command indicated by <ph id=\"ph1\">`uiCmd.`</ph> To support the custom mouse behavior, you will also need to customize the view registered with the mouse manager.","pos":[9595,9845],"source":" Thereafter, when the user double-clicks the mouse in the registered view, the application will execute the command indicated by `uiCmd.` To support the custom mouse behavior, you will also need to customize the view registered with the mouse manager."},{"content":"For more information about custom mouse behavior, see [Keyboard and Mouse Customization]--brokenlink--(../mouse-and-keyboard-customization.md).","pos":[9846,9989]},{"pos":[9996,10078],"content":"If <ph id=\"ph1\">`uiCmd`</ph> is set to 0, the specified view is no longer associated with a command.","source":"If `uiCmd` is set to 0, the specified view is no longer associated with a command."},{"pos":[10087,10095],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[10099,10147],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[10150,10197],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWinAppEx Class<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[10200,10259],"source":" [CWinAppEx Class](../../mfc/reference/cwinappex-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Keyboard and Mouse Customization<ept id=\"p1\">](../../mfc/keyboard-and-mouse-customization.md)</ept>","pos":[10262,10344],"source":" [Keyboard and Mouse Customization](../../mfc/keyboard-and-mouse-customization.md)"}],"content":"---\ntitle: \"CMouseManager Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMouseManager\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMouseManager class\"\nms.assetid: a4d05017-4e44-4a40-8b57-4ece0de20481\ncaps.latest.revision: 26\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMouseManager Class\nAllows a user to associate different commands with a particular [CView](../../mfc/reference/cview-class.md) object when the user double-clicks inside that view.  \n  \n## Syntax  \n  \n```  \nclass CMouseManager : public CObject  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMouseManager::AddView](#cmousemanager__addview)|Adds a `CView` object to the **Customization** dialog box. The **Customization** dialog box enables the user to associate a double-click with a command for each of the listed views.|  \n|[CMouseManager::GetViewDblClickCommand](#cmousemanager__getviewdblclickcommand)|Returns the command that is executed when the user double-clicks inside the provided view.|  \n|[CMouseManager::GetViewIconId](#cmousemanager__getviewiconid)|Returns the icon associated with the provided view ID.|  \n|[CMouseManager::GetViewIdByName](#cmousemanager__getviewidbyname)|Returns the view ID associated with the provided view name.|  \n|[CMouseManager::GetViewNames](#cmousemanager__getviewnames)|Retrieves a list of all added view names.|  \n|[CMouseManager::LoadState](#cmousemanager__loadstate)|Loads the `CMouseManager` state from the Windows registry.|  \n|[CMouseManager::SaveState](#cmousemanager__savestate)|Writes the `CMouseManager` state to the Windows registry.|  \n|[CMouseManager::SetCommandForDblClk](#cmousemanager__setcommandfordblclk)|Associates the provided command and the provided view.|  \n  \n## Remarks  \n The `CMouseManager` class maintains a collection of `CView` objects. Each view is identified by a name and by an ID. These views are shown in the **Customization** dialog box. The user can change the command that is associated with any view through the **Customization** dialog box. The associated command is executed when the user double-clicks in that view. To support this from a coding perspective, you must process the `WM_LBUTTONDBLCLK` message and call the [CWinAppEx::OnViewDoubleClick](../../mfc/reference/cwinappex-class.md#cwinappex__onviewdoubleclick) function in the code for that `CView` object..  \n  \n You should not create a `CMouseManager` object manually. It will be created by the framework of your application. It will also be destroyed automatically when the user exits the application. To get a pointer to the mouse manager for your application, call [CWinAppEx::GetMouseManager](../../mfc/reference/cwinappex-class.md#cwinappex__getmousemanager).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CMouseManager](../../mfc/reference/cmousemanager-class.md)  \n  \n## Requirements  \n **Header:** afxmousemanager.h  \n  \n##  <a name=\"cmousemanager__addview\"></a>  CMouseManager::AddView  \n Registers a [CView](../../mfc/reference/cview-class.md) object with the [CMouseManager Class](../../mfc/reference/cmousemanager-class.md) to support custom mouse behavior.  \n  \n```  \nBOOL AddView(\n    int iViewId,  \n    UINT uiViewNameResId,  \n    UINT uiIconId = 0);\n\n \nBOOL AddView(\n    int iId,  \n    LPCTSTR lpszViewName,  \n    UINT uiIconId = 0);\n```  \n  \n### Parameters  \n [in] `iViewId`  \n A view ID.  \n  \n [in] `uiViewNameResId`  \n A resource string ID that references the view name.  \n  \n [in] `uiIconId`  \n A view icon ID.  \n  \n [in] `iId`  \n A view ID.  \n  \n [in] `lpszViewName`  \n A view name.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n In order to support custom mouse behavior, a view must be registered with the `CMouseManager` object. Any object derived from the `CView` class can be registered with the mouse manager. The string and icon associated with a view are displayed in the **Mouse** tab of the **Customize** dialog box.  \n  \n It is the responsibility of the programmer to create and maintain view IDs such as `iViewId` and `iId`.  \n  \n For more information about how to provide custom mouse behavior, see [Keyboard and Mouse Customization](../../mfc/keyboard-and-mouse-customization.md).  \n  \n### Example  \n The following example demonstrates how to retrieve a pointer to a `CMouseManager` object by using the `CWinAppEx::GetMouseManager` method and the `AddView` method in the `CMouseManager` class. This code snippet is part of the [State Collection sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_StateCollection#4](../../mfc/reference/codesnippet/cpp/cmousemanager-class_1.cpp)]  \n  \n##  <a name=\"cmousemanager__getviewdblclickcommand\"></a>  CMouseManager::GetViewDblClickCommand  \n Returns the command that is executed when the user double-clicks inside the provided view.  \n  \n```  \nUINT GetViewDblClickCommand(int iId) const;\n\n \n```  \n  \n### Parameters  \n [in] `iId`  \n The view ID.  \n  \n### Return Value  \n The command identifier if the view is associated with a command; otherwise 0.  \n  \n##  <a name=\"cmousemanager__getviewiconid\"></a>  CMouseManager::GetViewIconId  \n Retrieves the icon associated with a view ID.  \n  \n```  \nUINT GetViewIconId(int iViewId) const;\n\n \n```  \n  \n### Parameters  \n [in] `iViewId`  \n The view ID.  \n  \n### Return Value  \n An icon resource identifier if successful; otherwise 0.  \n  \n### Remarks  \n This method will fail if the view is not first registered by using [CMouseManager::AddView](#cmousemanager__addview).  \n  \n##  <a name=\"cmousemanager__getviewidbyname\"></a>  CMouseManager::GetViewIdByName  \n Retrieves the view ID associated with a view name.  \n  \n```  \nint GetViewIdByName(LPCTSTR lpszName) const;\n\n \n```  \n  \n### Parameters  \n [in] `lpszName`  \n The view name.  \n  \n### Return Value  \n A view ID if successful; otherwise 0.  \n  \n### Remarks  \n This method searches through views registered by using [CMouseManager::AddView](#cmousemanager__addview).  \n  \n##  <a name=\"cmousemanager__getviewnames\"></a>  CMouseManager::GetViewNames  \n Retrieves a list of all the registered view names.  \n  \n```  \nvoid GetViewNames(CStringList& listOfNames) const;\n\n \n```  \n  \n### Parameters  \n [out] `listOfNames`  \n A reference to `CStringList` object.  \n  \n### Remarks  \n This method fills the parameter `listOfNames` with the names of all the views registered by using [CMouseManager::AddView](#cmousemanager__addview).  \n  \n##  <a name=\"cmousemanager__loadstate\"></a>  CMouseManager::LoadState  \n Loads the state of the [CMouseManager Class](../../mfc/reference/cmousemanager-class.md) from the registry.  \n  \n```  \nBOOL LoadState(LPCTSTR lpszProfileName = NULL);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n A path of a registry key.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The state information loaded from the registry includes the registered views, view identifiers, and the associated commands. If the parameter `lpszProfileName` is `NULL`, this function loads the `CMouseManager` data from the default registry location controlled by the [CWinAppEx Class](../../mfc/reference/cwinappex-class.md).  \n  \n In most cases, you do not have to call this function directly. It is called as a part of the workspace initialization process. For more information about the workspace initialization process, see [CWinAppEx::LoadState](../../mfc/reference/cwinappex-class.md#cwinappex__loadstate).  \n  \n##  <a name=\"cmousemanager__savestate\"></a>  CMouseManager::SaveState  \n Writes the state of the [CMouseManager Class](../../mfc/reference/cmousemanager-class.md) to the registry.  \n  \n```  \nBOOL SaveState(LPCTSTR lpszProfileName = NULL);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n A path of a registry key.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n The state information written to the registry includes all registered views, view identifiers, and the associated commands. If the parameter `lpszProfileName` is `NULL`, this function writes the `CMouseManager` data to the default registry location controlled by the [CWinAppEx Class](../../mfc/reference/cwinappex-class.md).  \n  \n In most cases, you do not have to call this function directly. It is called as a part of the workspace serialization process. For more information about the workspace serialization process, see [CWinAppEx::SaveState](../../mfc/reference/cwinappex-class.md#cwinappex__savestate).  \n  \n##  <a name=\"cmousemanager__setcommandfordblclk\"></a>  CMouseManager::SetCommandForDblClk  \n Associates a custom command with a view that is first registered with the mouse manager.  \n  \n```  \nvoid SetCommandForDblClk(\n    int iViewId,  \n    UINT uiCmd);\n```  \n  \n### Parameters  \n [in] `iViewId`  \n The view identifier.  \n  \n [in] `uiCmd`  \n The command identifier.  \n  \n### Remarks  \n In order to associate a custom command with a view, you must first register the view by using [CMouseManager::AddView](#cmousemanager__addview). The `AddView` method requires a view identifier as an input parameter. Once you register a view, you can call `CMouseManager::SetCommandForDblClk` with the same view identifier input parameter that you supplied to `AddView`. Thereafter, when the user double-clicks the mouse in the registered view, the application will execute the command indicated by `uiCmd.` To support the custom mouse behavior, you will also need to customize the view registered with the mouse manager. For more information about custom mouse behavior, see [Keyboard and Mouse Customization]--brokenlink--(../mouse-and-keyboard-customization.md).  \n  \n If `uiCmd` is set to 0, the specified view is no longer associated with a command.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CWinAppEx Class](../../mfc/reference/cwinappex-class.md)   \n [Keyboard and Mouse Customization](../../mfc/keyboard-and-mouse-customization.md)\n\n\n\n"}