{"nodes":[{"pos":[12,46],"content":"_CrtSetDumpClient | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_CrtSetDumpClient | Microsoft Docs","pos":[0,34]}]},{"pos":[988,1005],"content":"_CrtSetDumpClient","linkify":"_CrtSetDumpClient","nodes":[{"content":"_CrtSetDumpClient","pos":[0,17]}]},{"pos":[1006,1111],"content":"Installs an application-defined function to dump <ph id=\"ph1\">`_CLIENT_BLOCK`</ph> type memory blocks (debug version only).","source":"Installs an application-defined function to dump `_CLIENT_BLOCK` type memory blocks (debug version only)."},{"pos":[1120,1126],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1239,1249],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"New client-defined memory dump function to hook into the C run-time debug memory dump process.","pos":[1269,1363]},{"pos":[1372,1384],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the previously defined client block dump function.","pos":[1388,1446]},{"pos":[1455,1462],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_CrtSetDumpClient`</ph> function allows the application to hook its own function to dump objects stored in <ph id=\"ph2\">`_CLIENT_BLOCK`</ph> memory blocks into the C run-time debug memory dump process.","pos":[1466,1649],"source":"The `_CrtSetDumpClient` function allows the application to hook its own function to dump objects stored in `_CLIENT_BLOCK` memory blocks into the C run-time debug memory dump process."},{"content":"As a result, every time a debug dump function such as <bpt id=\"p1\">[</bpt>_CrtMemDumpAllObjectsSince<ept id=\"p1\">](../../c-runtime-library/reference/crtmemdumpallobjectssince.md)</ept> or <bpt id=\"p2\">[</bpt>_CrtDumpMemoryLeaks<ept id=\"p2\">](../../c-runtime-library/reference/crtdumpmemoryleaks.md)</ept> dumps a <ph id=\"ph1\">`_CLIENT_BLOCK`</ph> memory block, the application's dump function is called as well.","pos":[1650,1967],"source":" As a result, every time a debug dump function such as [_CrtMemDumpAllObjectsSince](../../c-runtime-library/reference/crtmemdumpallobjectssince.md) or [_CrtDumpMemoryLeaks](../../c-runtime-library/reference/crtdumpmemoryleaks.md) dumps a `_CLIENT_BLOCK` memory block, the application's dump function is called as well."},{"content":"<ph id=\"ph1\">`_CrtSetDumpClient`</ph> provides an application with an easy method for detecting memory leaks and validating or reporting the contents of data stored in <ph id=\"ph2\">`_CLIENT_BLOCK`</ph> blocks.","pos":[1968,2141],"source":"`_CrtSetDumpClient` provides an application with an easy method for detecting memory leaks and validating or reporting the contents of data stored in `_CLIENT_BLOCK` blocks."},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id=\"ph1\">`_CrtSetDumpClient`</ph> are removed during preprocessing.","pos":[2142,2268],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtSetDumpClient` are removed during preprocessing."},{"content":"The <ph id=\"ph1\">`_CrtSetDumpClient`</ph> function installs the new application-defined dump function specified in <ph id=\"ph2\">`dumpClient`</ph> and returns the previously defined dump function.","pos":[2275,2434],"source":"The `_CrtSetDumpClient` function installs the new application-defined dump function specified in `dumpClient` and returns the previously defined dump function."},{"content":"An example of a client block dump function is as follows:","pos":[2435,2492]},{"content":"The <ph id=\"ph1\">`userPortion`</ph> argument is a pointer to the beginning of the user data portion of the memory block and <ph id=\"ph2\">`blockSize`</ph> specifies the size of the allocated memory block in bytes.","pos":[2580,2756],"source":"The `userPortion` argument is a pointer to the beginning of the user data portion of the memory block and `blockSize` specifies the size of the allocated memory block in bytes."},{"content":"The client block dump function must return <ph id=\"ph1\">`void`</ph>.","pos":[2757,2807],"source":" The client block dump function must return `void`."},{"content":"The pointer to the client dump function that is passed to <ph id=\"ph1\">`_CrtSetDumpClient`</ph> is of type <ph id=\"ph2\">`_CRT_DUMP_CLIENT`</ph>, as defined in Crtdbg.h:","pos":[2808,2940],"source":" The pointer to the client dump function that is passed to `_CrtSetDumpClient` is of type `_CRT_DUMP_CLIENT`, as defined in Crtdbg.h:"},{"content":"For more information about functions that operate on <ph id=\"ph1\">`_CLIENT_BLOCK`</ph> type memory blocks, see <bpt id=\"p1\">[</bpt>Client Block Hook Functions<ept id=\"p1\">](/visualstudio/debugger/client-block-hook-functions)</ept>.","pos":[3024,3199],"source":"For more information about functions that operate on `_CLIENT_BLOCK` type memory blocks, see [Client Block Hook Functions](/visualstudio/debugger/client-block-hook-functions)."},{"content":"The <bpt id=\"p1\">[</bpt>_CrtReportBlockType<ept id=\"p1\">](../../c-runtime-library/reference/crtreportblocktype.md)</ept> function can be used to return information about block types and subtypes.","pos":[3200,3357],"source":" The [_CrtReportBlockType](../../c-runtime-library/reference/crtreportblocktype.md) function can be used to return information about block types and subtypes."},{"pos":[3366,3378],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3385,3392]},{"content":"Required header","pos":[3393,3408]},{"content":"<ph id=\"ph1\">\\&lt;</ph>crtdbg.h&gt;","pos":[3473,3484],"source":"\\<crtdbg.h>"},{"pos":[3492,3610],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3619,3628],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[3632,3727],"content":"Debug versions of <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"pos":[3736,3761],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3765,3780]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3781,3828],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3829,3954],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3963,3971],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Debug Routines<ept id=\"p1\">](../../c-runtime-library/debug-routines.md)</ept><ph id=\"ph1\"> </ph>","pos":[3975,4035],"source":"[Debug Routines](../../c-runtime-library/debug-routines.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_CrtReportBlockType<ept id=\"p1\">](../../c-runtime-library/reference/crtreportblocktype.md)</ept><ph id=\"ph1\"> </ph>","pos":[4038,4118],"source":" [_CrtReportBlockType](../../c-runtime-library/reference/crtreportblocktype.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_CrtGetDumpClient<ept id=\"p1\">](../../c-runtime-library/reference/crtgetdumpclient.md)</ept>","pos":[4121,4196],"source":" [_CrtGetDumpClient](../../c-runtime-library/reference/crtgetdumpclient.md)"}],"content":"---\ntitle: \"_CrtSetDumpClient | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_CrtSetDumpClient\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_CrtSetDumpClient\"\n  - \"CrtSetDumpClient\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_CrtSetDumpClient function\"\n  - \"CrtSetDumpClient function\"\nms.assetid: f3dd06d0-c331-4a12-b68d-25378d112033\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _CrtSetDumpClient\nInstalls an application-defined function to dump `_CLIENT_BLOCK` type memory blocks (debug version only).  \n  \n## Syntax  \n  \n```  \n  \n      _CRT_DUMP_CLIENT _CrtSetDumpClient(   \n   _CRT_DUMP_CLIENT dumpClient   \n);  \n```  \n  \n#### Parameters  \n `dumpClient`  \n New client-defined memory dump function to hook into the C run-time debug memory dump process.  \n  \n## Return Value  \n Returns the previously defined client block dump function.  \n  \n## Remarks  \n The `_CrtSetDumpClient` function allows the application to hook its own function to dump objects stored in `_CLIENT_BLOCK` memory blocks into the C run-time debug memory dump process. As a result, every time a debug dump function such as [_CrtMemDumpAllObjectsSince](../../c-runtime-library/reference/crtmemdumpallobjectssince.md) or [_CrtDumpMemoryLeaks](../../c-runtime-library/reference/crtdumpmemoryleaks.md) dumps a `_CLIENT_BLOCK` memory block, the application's dump function is called as well. `_CrtSetDumpClient` provides an application with an easy method for detecting memory leaks and validating or reporting the contents of data stored in `_CLIENT_BLOCK` blocks. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtSetDumpClient` are removed during preprocessing.  \n  \n The `_CrtSetDumpClient` function installs the new application-defined dump function specified in `dumpClient` and returns the previously defined dump function. An example of a client block dump function is as follows:  \n  \n```  \nvoid DumpClientFunction( void *userPortion, size_t blockSize );  \n```  \n  \n The `userPortion` argument is a pointer to the beginning of the user data portion of the memory block and `blockSize` specifies the size of the allocated memory block in bytes. The client block dump function must return `void`. The pointer to the client dump function that is passed to `_CrtSetDumpClient` is of type `_CRT_DUMP_CLIENT`, as defined in Crtdbg.h:  \n  \n```  \ntypedef void (__cdecl *_CRT_DUMP_CLIENT)( void *, size_t );  \n```  \n  \n For more information about functions that operate on `_CLIENT_BLOCK` type memory blocks, see [Client Block Hook Functions](/visualstudio/debugger/client-block-hook-functions). The [_CrtReportBlockType](../../c-runtime-library/reference/crtreportblocktype.md) function can be used to return information about block types and subtypes.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_CrtSetDumpClient`|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)   \n [_CrtReportBlockType](../../c-runtime-library/reference/crtreportblocktype.md)   \n [_CrtGetDumpClient](../../c-runtime-library/reference/crtgetdumpclient.md)"}