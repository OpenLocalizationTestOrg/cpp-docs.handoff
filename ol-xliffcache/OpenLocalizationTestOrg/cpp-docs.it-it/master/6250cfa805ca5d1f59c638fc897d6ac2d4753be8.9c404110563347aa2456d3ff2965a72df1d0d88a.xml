{"nodes":[{"pos":[12,80],"content":"E. Implementation-Defined Behaviors in OpenMP C-C++ | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"E. Implementation-Defined Behaviors in OpenMP C-C++ | Microsoft Docs","pos":[0,68],"nodes":[{"content":"E.","pos":[0,2]},{"content":"Implementation-Defined Behaviors in OpenMP C-C++ | Microsoft Docs","pos":[3,68]}]}]},{"content":"E.","pos":[560,562]},{"content":"Implementation-Defined Behaviors in OpenMP C/C++","pos":[563,611]},{"content":"This appendix summarizes the behaviors that are described as \"implementation-defined\" in this API.","pos":[612,710]},{"content":"Each behavior is cross-referenced back to its description in the main specification.","pos":[712,796]},{"content":"Remarks","pos":[805,812]},{"content":"An implementation is required to define and document its behavior in these cases, but this list may be incomplete.","pos":[816,930]},{"pos":[940,1245],"content":"<bpt id=\"p1\">**</bpt>Number of threads:<ept id=\"p1\">**</ept> If a parallel region is encountered while dynamic adjustment of the number of threads is disabled, and the number of threads requested for the parallel region exceeds the number that the run-time system can supply, the behavior of the program is implementation-defined (see page 9).","source":"**Number of threads:** If a parallel region is encountered while dynamic adjustment of the number of threads is disabled, and the number of threads requested for the parallel region exceeds the number that the run-time system can supply, the behavior of the program is implementation-defined (see page 9)."},{"content":"In Visual C++, for a non-nested parallel region, 64 threads (the maximum) will be provided.","pos":[1256,1347]},{"pos":[1357,1504],"content":"<bpt id=\"p1\">**</bpt>Number of processors:<ept id=\"p1\">**</ept> The number of physical processors actually hosting the threads at any given time is implementation-defined (see page 10).","source":"**Number of processors:** The number of physical processors actually hosting the threads at any given time is implementation-defined (see page 10)."},{"content":"In Visual C++, this number is not constant, and is controlled by the operating system.","pos":[1515,1601]},{"pos":[1611,1752],"content":"<bpt id=\"p1\">**</bpt>Creating teams of threads:<ept id=\"p1\">**</ept> The number of threads in a team that execute a nested parallel region is implementation-defined.(see page 10).","source":"**Creating teams of threads:** The number of threads in a team that execute a nested parallel region is implementation-defined.(see page 10)."},{"content":"In Visual C++, this is determined by the operating system.","pos":[1763,1821]},{"content":"<bpt id=\"p1\">**</bpt>schedule(runtime):<ept id=\"p1\">**</ept> The decision regarding scheduling is deferred until run time.","pos":[1831,1915],"source":"**schedule(runtime):** The decision regarding scheduling is deferred until run time."},{"content":"The schedule type and chunk size can be chosen at run time by setting the <ph id=\"ph1\">`OMP_SCHEDULE`</ph> environment variable.","pos":[1916,2026],"source":" The schedule type and chunk size can be chosen at run time by setting the `OMP_SCHEDULE` environment variable."},{"content":"If this environment variable is not set, the resulting schedule is implementation-defined (see page 13).","pos":[2027,2131]},{"pos":[2142,2202],"content":"In Visual C++, schedule type is <ph id=\"ph1\">`static`</ph> with no chunk size.","source":"In Visual C++, schedule type is `static` with no chunk size."},{"pos":[2212,2336],"content":"<bpt id=\"p1\">**</bpt>Default scheduling:<ept id=\"p1\">**</ept> In the absence of the schedule clause, the default schedule is implementation-defined (see page 13).","source":"**Default scheduling:** In the absence of the schedule clause, the default schedule is implementation-defined (see page 13)."},{"pos":[2347,2419],"content":"In Visual C++, the default schedule type is <ph id=\"ph1\">`static`</ph> with no chunk size.","source":"In Visual C++, the default schedule type is `static` with no chunk size."},{"pos":[2429,2603],"content":"<bpt id=\"p1\">**</bpt>ATOMIC:<ept id=\"p1\">**</ept> It is implementation-defined whether an implementation replaces all <ph id=\"ph1\">`atomic`</ph> directives with <bpt id=\"p2\">**</bpt>critical<ept id=\"p2\">**</ept> directives that have the same unique name (see page 20).","source":"**ATOMIC:** It is implementation-defined whether an implementation replaces all `atomic` directives with **critical** directives that have the same unique name (see page 20)."},{"content":"In Visual C++, if data modified by <bpt id=\"p1\">[</bpt>atomic<ept id=\"p1\">](../../parallel/openmp/reference/atomic.md)</ept> is not on a natural alignment or if it is 1 or 2 bytes long all atomic operations that satisfy that property will use one critical section.","pos":[2614,2840],"source":"In Visual C++, if data modified by [atomic](../../parallel/openmp/reference/atomic.md) is not on a natural alignment or if it is 1 or 2 bytes long all atomic operations that satisfy that property will use one critical section."},{"content":"Otherwise, critical sections will not be used.","pos":[2841,2887]},{"pos":[2897,3132],"content":"<bpt id=\"p1\">**</bpt>omp_get_num_threads:<ept id=\"p1\">**</ept> If the number of threads has not been explicitly set by the user, the default is implementation-defined (see page 9, and <bpt id=\"p2\">[</bpt>Section 3.1.2<ept id=\"p2\">](../../parallel/openmp/3-1-2-omp-get-num-threads-function.md)</ept> on page 37).","source":"**omp_get_num_threads:** If the number of threads has not been explicitly set by the user, the default is implementation-defined (see page 9, and [Section 3.1.2](../../parallel/openmp/3-1-2-omp-get-num-threads-function.md) on page 37)."},{"content":"In Visual C++, the default number of threads is equal to the number of processors.","pos":[3143,3225]},{"pos":[3235,3414],"content":"<bpt id=\"p1\">**</bpt>omp_set_dynamic:<ept id=\"p1\">**</ept> The default for dynamic thread adjustment is implementation-defined (see <bpt id=\"p2\">[</bpt>Section 3.1.7<ept id=\"p2\">](../../parallel/openmp/3-1-7-omp-set-dynamic-function.md)</ept> on page 39).","source":"**omp_set_dynamic:** The default for dynamic thread adjustment is implementation-defined (see [Section 3.1.7](../../parallel/openmp/3-1-7-omp-set-dynamic-function.md) on page 39)."},{"pos":[3425,3463],"content":"In Visual C++, the default is <ph id=\"ph1\">`FALSE`</ph>.","source":"In Visual C++, the default is `FALSE`."},{"pos":[3473,3706],"content":"<bpt id=\"p1\">**</bpt>omp_set_nested:<ept id=\"p1\">**</ept> When nested parallelism is enabled, the number of threads used to execute nested parallel regions is implementation-defined (see <bpt id=\"p2\">[</bpt>Section 3.1.9<ept id=\"p2\">](../../parallel/openmp/3-1-9-omp-set-nested-function.md)</ept> on page 40).","source":"**omp_set_nested:** When nested parallelism is enabled, the number of threads used to execute nested parallel regions is implementation-defined (see [Section 3.1.9](../../parallel/openmp/3-1-9-omp-set-nested-function.md) on page 40)."},{"content":"In Visual C++, the number of threads is determined by the operating system.","pos":[3717,3792]},{"pos":[3817,3987],"content":"environment variable: The default value for this environment variable is implementation-defined (see <bpt id=\"p1\">[</bpt>Section 4.1<ept id=\"p1\">](../../parallel/openmp/4-1-omp-schedule.md)</ept> on page 48).","source":" environment variable: The default value for this environment variable is implementation-defined (see [Section 4.1](../../parallel/openmp/4-1-omp-schedule.md) on page 48)."},{"pos":[3998,4058],"content":"In Visual C++, schedule type is <ph id=\"ph1\">`static`</ph> with no chunk size.","source":"In Visual C++, schedule type is `static` with no chunk size."},{"pos":[4086,4452],"content":"environment variable: If no value is specified for the <ph id=\"ph1\">`OMP_NUM_THREADS`</ph> environment variable, or if the value specified is not a positive integer, or if the value is greater than the maximum number of threads the system can support, the number of threads to use is implementation-defined (see <bpt id=\"p1\">[</bpt>Section 4.2<ept id=\"p1\">](../../parallel/openmp/4-2-omp-num-threads.md)</ept> on page 48).","source":" environment variable: If no value is specified for the `OMP_NUM_THREADS` environment variable, or if the value specified is not a positive integer, or if the value is greater than the maximum number of threads the system can support, the number of threads to use is implementation-defined (see [Section 4.2](../../parallel/openmp/4-2-omp-num-threads.md) on page 48)."},{"content":"In Visual C++, if value specified is zero or less, the number of threads is equal to the number of processors.","pos":[4463,4573]},{"content":"If value is greater than 64, the number of threads is 64.","pos":[4575,4632]},{"pos":[4656,4795],"content":"environment variable: The default value is implementation-defined (see <bpt id=\"p1\">[</bpt>Section 4.3<ept id=\"p1\">](../../parallel/openmp/4-3-omp-dynamic.md)</ept> on page 49).","source":" environment variable: The default value is implementation-defined (see [Section 4.3](../../parallel/openmp/4-3-omp-dynamic.md) on page 49)."},{"pos":[4806,4844],"content":"In Visual C++, the default is <ph id=\"ph1\">`FALSE`</ph>.","source":"In Visual C++, the default is `FALSE`."}],"content":"---\ntitle: \"E. Implementation-Defined Behaviors in OpenMP C-C++ | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: b8d660ca-9bb3-4b6b-87af-45c67d43a731\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# E. Implementation-Defined Behaviors in OpenMP C/C++\nThis appendix summarizes the behaviors that are described as \"implementation-defined\" in this API.  Each behavior is cross-referenced back to its description in the main specification.  \n  \n## Remarks  \n An implementation is required to define and document its behavior in these cases, but this list may be incomplete.  \n  \n-   **Number of threads:** If a parallel region is encountered while dynamic adjustment of the number of threads is disabled, and the number of threads requested for the parallel region exceeds the number that the run-time system can supply, the behavior of the program is implementation-defined (see page 9).  \n  \n     In Visual C++, for a non-nested parallel region, 64 threads (the maximum) will be provided.  \n  \n-   **Number of processors:** The number of physical processors actually hosting the threads at any given time is implementation-defined (see page 10).  \n  \n     In Visual C++, this number is not constant, and is controlled by the operating system.  \n  \n-   **Creating teams of threads:** The number of threads in a team that execute a nested parallel region is implementation-defined.(see page 10).  \n  \n     In Visual C++, this is determined by the operating system.  \n  \n-   **schedule(runtime):** The decision regarding scheduling is deferred until run time. The schedule type and chunk size can be chosen at run time by setting the `OMP_SCHEDULE` environment variable. If this environment variable is not set, the resulting schedule is implementation-defined (see page 13).  \n  \n     In Visual C++, schedule type is `static` with no chunk size.  \n  \n-   **Default scheduling:** In the absence of the schedule clause, the default schedule is implementation-defined (see page 13).  \n  \n     In Visual C++, the default schedule type is `static` with no chunk size.  \n  \n-   **ATOMIC:** It is implementation-defined whether an implementation replaces all `atomic` directives with **critical** directives that have the same unique name (see page 20).  \n  \n     In Visual C++, if data modified by [atomic](../../parallel/openmp/reference/atomic.md) is not on a natural alignment or if it is 1 or 2 bytes long all atomic operations that satisfy that property will use one critical section. Otherwise, critical sections will not be used.  \n  \n-   **omp_get_num_threads:** If the number of threads has not been explicitly set by the user, the default is implementation-defined (see page 9, and [Section 3.1.2](../../parallel/openmp/3-1-2-omp-get-num-threads-function.md) on page 37).  \n  \n     In Visual C++, the default number of threads is equal to the number of processors.  \n  \n-   **omp_set_dynamic:** The default for dynamic thread adjustment is implementation-defined (see [Section 3.1.7](../../parallel/openmp/3-1-7-omp-set-dynamic-function.md) on page 39).  \n  \n     In Visual C++, the default is `FALSE`.  \n  \n-   **omp_set_nested:** When nested parallelism is enabled, the number of threads used to execute nested parallel regions is implementation-defined (see [Section 3.1.9](../../parallel/openmp/3-1-9-omp-set-nested-function.md) on page 40).  \n  \n     In Visual C++, the number of threads is determined by the operating system.  \n  \n-   `OMP_SCHEDULE` environment variable: The default value for this environment variable is implementation-defined (see [Section 4.1](../../parallel/openmp/4-1-omp-schedule.md) on page 48).  \n  \n     In Visual C++, schedule type is `static` with no chunk size.  \n  \n-   `OMP_NUM_THREADS` environment variable: If no value is specified for the `OMP_NUM_THREADS` environment variable, or if the value specified is not a positive integer, or if the value is greater than the maximum number of threads the system can support, the number of threads to use is implementation-defined (see [Section 4.2](../../parallel/openmp/4-2-omp-num-threads.md) on page 48).  \n  \n     In Visual C++, if value specified is zero or less, the number of threads is equal to the number of processors.  If value is greater than 64, the number of threads is 64.  \n  \n-   `OMP_DYNAMIC` environment variable: The default value is implementation-defined (see [Section 4.3](../../parallel/openmp/4-3-omp-dynamic.md) on page 49).  \n  \n     In Visual C++, the default is `FALSE`."}