{"nodes":[{"pos":[12,57],"content":"checked_array_iterator Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"checked_array_iterator Class | Microsoft Docs","pos":[0,45]}]},{"content":"checked_array_iterator Class","pos":[809,837]},{"content":"The <ph id=\"ph1\">`checked_array_iterator`</ph> class allows you to transform an array or pointer into a checked iterator.","pos":[838,941],"source":"The `checked_array_iterator` class allows you to transform an array or pointer into a checked iterator."},{"content":"Use this class as a wrapper (using the <bpt id=\"p1\">[</bpt>make_checked_array_iterator<ept id=\"p1\">](../standard-library/iterator-functions.md#make_checked_array_iterator)</ept> function) for raw pointers or arrays as a targeted way to provide checking and to manage unchecked pointer warnings instead of globally silencing these warnings.","pos":[942,1243],"source":" Use this class as a wrapper (using the [make_checked_array_iterator](../standard-library/iterator-functions.md#make_checked_array_iterator) function) for raw pointers or arrays as a targeted way to provide checking and to manage unchecked pointer warnings instead of globally silencing these warnings."},{"content":"If necessary, you can use the unchecked version of this class, <bpt id=\"p1\">[</bpt>unchecked_array_iterator<ept id=\"p1\">](../standard-library/unchecked-array-iterator-class.md)</ept>.","pos":[1244,1389],"source":" If necessary, you can use the unchecked version of this class, [unchecked_array_iterator](../standard-library/unchecked-array-iterator-class.md)."},{"pos":[1397,1731],"content":"[!NOTE]\n This class is a Microsoft extension of the Standard C++ Library. Code implemented by using this function is not portable to C++ Standard build environments that do not support this Microsoft extension. For an example demonstrating how to write code that does not require the use of this class, see the second example below.","leadings":["","> "],"nodes":[{"content":" This class is a Microsoft extension of the Standard C++ Library. Code implemented by using this function is not portable to C++ Standard build environments that do not support this Microsoft extension. For an example demonstrating how to write code that does not require the use of this class, see the second example below.","pos":[8,332],"nodes":[{"content":"This class is a Microsoft extension of the Standard C++ Library.","pos":[1,65]},{"content":"Code implemented by using this function is not portable to C++ Standard build environments that do not support this Microsoft extension.","pos":[66,202]},{"content":"For an example demonstrating how to write code that does not require the use of this class, see the second example below.","pos":[203,324]}]}]},{"content":"Syntax","pos":[1740,1746]},{"content":"Remarks","pos":[1827,1834]},{"pos":[1838,1927],"content":"This class is defined in the <bpt id=\"p1\">[</bpt>stdext<ept id=\"p1\">](../standard-library/stdext-namespace.md)</ept> namespace.","source":"This class is defined in the [stdext](../standard-library/stdext-namespace.md) namespace."},{"pos":[1934,2071],"content":"For more information and example code on the checked iterator feature, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information and example code on the checked iterator feature, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[2080,2087]},{"content":"The following sample shows how to define and use a checked array iterator.","pos":[2091,2165]},{"content":"If the destination is not large enough to hold all the elements being copied, such as would be the case if you changed the line:","pos":[2172,2300]},{"content":"to","pos":[2375,2377]},{"content":"A runtime error will occur.","pos":[2452,2479]},{"content":"Example","pos":[3164,3171]},{"content":"To avoid the need for the <ph id=\"ph1\">`checked_array_iterator`</ph> class when using Standard C++ Library algorithms, consider using a <ph id=\"ph2\">`vector`</ph> instead of a dynamically allocated array.","pos":[3175,3343],"source":"To avoid the need for the `checked_array_iterator` class when using Standard C++ Library algorithms, consider using a `vector` instead of a dynamically allocated array."},{"content":"The following example demonstrates how to do this.","pos":[3344,3394]},{"content":"Constructors","pos":[4526,4538]},{"content":"checked_array_iterator","pos":[4560,4582]},{"pos":[4633,4737],"content":"Constructs a default <ph id=\"ph1\">`checked_array_iterator`</ph> or a <ph id=\"ph2\">`checked_array_iterator`</ph> from an underlying iterator.","source":"Constructs a default `checked_array_iterator` or a `checked_array_iterator` from an underlying iterator."},{"content":"Typedefs","pos":[4748,4756]},{"content":"difference_type","pos":[4778,4793]},{"pos":[4837,4959],"content":"A type that provides the difference between two <ph id=\"ph1\">`checked_array_iterator`</ph>s referring to elements within the same container.","source":"A type that provides the difference between two `checked_array_iterator`s referring to elements within the same container."},{"content":"pointer","pos":[4965,4972]},{"pos":[5008,5093],"content":"A type that provides a pointer to an element addressed by a <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"A type that provides a pointer to an element addressed by a `checked_array_iterator`."},{"content":"reference","pos":[5099,5108]},{"pos":[5146,5233],"content":"A type that provides a reference to an element addressed by a <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"A type that provides a reference to an element addressed by a `checked_array_iterator`."},{"content":"Member Functions","pos":[5244,5260]},{"content":"base","pos":[5282,5286]},{"pos":[5319,5386],"content":"Recovers the underlying iterator from its <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"Recovers the underlying iterator from its `checked_array_iterator`."},{"content":"Operators","pos":[5397,5406]},{"content":"operator==","pos":[5428,5438]},{"pos":[5481,5530],"content":"Tests two <ph id=\"ph1\">`checked_array_iterator`</ph>s for equality.","source":"Tests two `checked_array_iterator`s for equality."},{"content":"operator!=","pos":[5536,5546]},{"pos":[5587,5638],"content":"Tests two <ph id=\"ph1\">`checked_array_iterator`</ph>s for inequality.","source":"Tests two `checked_array_iterator`s for inequality."},{"content":"operator&lt;","pos":[5644,5653],"source":"operator<"},{"pos":[5694,5825],"content":"Tests if the <ph id=\"ph1\">`checked_array_iterator`</ph> on the left side of the operator is less than the <ph id=\"ph2\">`checked_array_iterator`</ph> on the right side.","source":"Tests if the `checked_array_iterator` on the left side of the operator is less than the `checked_array_iterator` on the right side."},{"content":"operator&gt;","pos":[5831,5840],"source":"operator>"},{"pos":[5881,6015],"content":"Tests if the <ph id=\"ph1\">`checked_array_iterator`</ph> on the left side of the operator is greater than the <ph id=\"ph2\">`checked_array_iterator`</ph> on the right side.","source":"Tests if the `checked_array_iterator` on the left side of the operator is greater than the `checked_array_iterator` on the right side."},{"content":"operator&lt;=","pos":[6021,6031],"source":"operator<="},{"pos":[6075,6218],"content":"Tests if the <ph id=\"ph1\">`checked_array_iterator`</ph> on the left side of the operator is less than or equal to the <ph id=\"ph2\">`checked_array_iterator`</ph> on the right side.","source":"Tests if the `checked_array_iterator` on the left side of the operator is less than or equal to the `checked_array_iterator` on the right side."},{"content":"operator&gt;=","pos":[6224,6234],"source":"operator>="},{"pos":[6278,6424],"content":"Tests if the <ph id=\"ph1\">`checked_array_iterator`</ph> on the left side of the operator is greater than or equal to the <ph id=\"ph2\">`checked_array_iterator`</ph> on the right side.","source":"Tests if the `checked_array_iterator` on the left side of the operator is greater than or equal to the `checked_array_iterator` on the right side."},{"content":"operator*","pos":[6430,6439]},{"pos":[6481,6543],"content":"Returns the element that a <ph id=\"ph1\">`checked_array_iterator`</ph> addresses.","source":"Returns the element that a `checked_array_iterator` addresses."},{"content":"operator-&gt;","pos":[6549,6559],"source":"operator->"},{"pos":[6601,6676],"content":"Returns a pointer to the element addressed by the <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"Returns a pointer to the element addressed by the `checked_array_iterator`."},{"content":"operator++","pos":[6682,6692]},{"pos":[6737,6797],"content":"Increments the <ph id=\"ph1\">`checked_array_iterator`</ph> to the next element.","source":"Increments the `checked_array_iterator` to the next element."},{"content":"operator--","pos":[6803,6813]},{"pos":[6852,6916],"content":"Decrements the <ph id=\"ph1\">`checked_array_iterator`</ph> to the previous element.","source":"Decrements the `checked_array_iterator` to the previous element."},{"content":"operator+=","pos":[6922,6932]},{"pos":[6976,7030],"content":"Adds a specified offset to a <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"Adds a specified offset to a `checked_array_iterator`."},{"content":"operator+","pos":[7036,7045]},{"pos":[7086,7220],"content":"Adds an offset to an iterator and returns the new <ph id=\"ph1\">`checked_array_iterator`</ph> addressing the inserted element at the new offset position.","source":"Adds an offset to an iterator and returns the new `checked_array_iterator` addressing the inserted element at the new offset position."},{"content":"operator-=","pos":[7226,7236]},{"pos":[7277,7339],"content":"Decrements a specified offset from a <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"Decrements a specified offset from a `checked_array_iterator`."},{"content":"operator-","pos":[7345,7354]},{"pos":[7392,7534],"content":"Decrements an offset from an iterator and returns the new <ph id=\"ph1\">`checked_array_iterator`</ph> addressing the inserted element at the new offset position.","source":"Decrements an offset from an iterator and returns the new `checked_array_iterator` addressing the inserted element at the new offset position."},{"content":"operator&amp;#91;&amp;#93;","pos":[7540,7558],"source":"operator&#91;&#93;"},{"pos":[7598,7731],"content":"Returns a reference to an element offset from the element addressed by a <ph id=\"ph1\">`checked_array_iterator`</ph> by a specified number of positions.","source":"Returns a reference to an element offset from the element addressed by a `checked_array_iterator` by a specified number of positions."},{"content":"Requirements","pos":[7741,7753]},{"pos":[7757,7780],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>iterator&gt;","source":"**Header:** \\<iterator>"},{"pos":[7787,7808],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> stdext","source":"**Namespace:** stdext"},{"pos":[7863,7891],"content":"checked_array_iterator::base"},{"pos":[7895,7962],"content":"Recovers the underlying iterator from its <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"Recovers the underlying iterator from its `checked_array_iterator`."},{"content":"Remarks","pos":[8009,8016]},{"pos":[8020,8108],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[8118,8125]},{"pos":[8771,8817],"content":"checked_array_iterator::checked_array_iterator"},{"pos":[8821,8926],"content":"Constructs a default <ph id=\"ph1\">`checked_array_iterator`</ph> or a <ph id=\"ph2\">`checked_array _iterator`</ph> from an underlying iterator.","source":"Constructs a default `checked_array_iterator` or a `checked_array _iterator` from an underlying iterator."},{"content":"Parameters","pos":[9058,9068]},{"content":"A pointer to the array.","pos":[9081,9104]},{"content":"The size of the array.","pos":[9121,9143]},{"content":"(Optional) An element in the array, to initialize the iterator.","pos":[9161,9224]},{"content":"By default, the iterator is initialized to the first element in the array.","pos":[9226,9300]},{"content":"Remarks","pos":[9310,9317]},{"pos":[9321,9409],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[9419,9426]},{"pos":[10245,10284],"content":"checked_array_iterator::difference_type"},{"pos":[10288,10410],"content":"A type that provides the difference between two <ph id=\"ph1\">`checked_array_iterator`</ph>s referring to elements within the same container.","source":"A type that provides the difference between two `checked_array_iterator`s referring to elements within the same container."},{"content":"Remarks","pos":[10511,10518]},{"pos":[10522,10611],"content":"The <ph id=\"ph1\">`checked_array_iterator`</ph> difference type is the same as the iterator difference type.","source":"The `checked_array_iterator` difference type is the same as the iterator difference type."},{"pos":[10618,10715],"content":"See <bpt id=\"p1\">[</bpt>checked_array_iterator::operator[]<ept id=\"p1\">](#checked_array_iterator__operator_at)</ept> for a code sample.","source":"See [checked_array_iterator::operator[]](#checked_array_iterator__operator_at) for a code sample."},{"pos":[10722,10810],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"pos":[10875,10909],"content":"checked_array_iterator::operator=="},{"pos":[10913,10962],"content":"Tests two <ph id=\"ph1\">`checked_array_iterator`</ph>s for equality.","source":"Tests two `checked_array_iterator`s for equality."},{"content":"Parameters","pos":[11056,11066]},{"content":"The <ph id=\"ph1\">`checked_array_iterator`</ph> against which to check for equality.","pos":[11081,11146],"source":" The `checked_array_iterator` against which to check for equality."},{"content":"Remarks","pos":[11156,11163]},{"pos":[11167,11255],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[11265,11272]},{"pos":[12405,12439],"content":"checked_array_iterator::operator!="},{"pos":[12443,12494],"content":"Tests two <ph id=\"ph1\">`checked_array_iterator`</ph>s for inequality.","source":"Tests two `checked_array_iterator`s for inequality."},{"content":"Parameters","pos":[12588,12598]},{"content":"The <ph id=\"ph1\">`checked_array_iterator`</ph> against which to check for inequality.","pos":[12613,12680],"source":" The `checked_array_iterator` against which to check for inequality."},{"content":"Remarks","pos":[12690,12697]},{"pos":[12701,12789],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[12799,12806]},{"pos":[13940,13972],"content":"checked_array_iterator::operator"},{"pos":[13980,14111],"content":"Tests if the <ph id=\"ph1\">`checked_array_iterator`</ph> on the left side of the operator is less than the <ph id=\"ph2\">`checked_array_iterator`</ph> on the right side.","source":"Tests if the `checked_array_iterator` on the left side of the operator is less than the `checked_array_iterator` on the right side."},{"content":"Parameters","pos":[14204,14214]},{"content":"The <ph id=\"ph1\">`checked_array_iterator`</ph> against which to check for inequality.","pos":[14229,14296],"source":" The `checked_array_iterator` against which to check for inequality."},{"content":"Remarks","pos":[14306,14313]},{"pos":[14317,14405],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[14415,14422]},{"pos":[15721,15753],"content":"checked_array_iterator::operator"},{"pos":[15761,15895],"content":"Tests if the <ph id=\"ph1\">`checked_array_iterator`</ph> on the left side of the operator is greater than the <ph id=\"ph2\">`checked_array_iterator`</ph> on the right side.","source":"Tests if the `checked_array_iterator` on the left side of the operator is greater than the `checked_array_iterator` on the right side."},{"content":"Parameters","pos":[15988,15998]},{"content":"The <ph id=\"ph1\">`checked_array_iterator`</ph> to compare against.","pos":[16013,16061],"source":" The `checked_array_iterator` to compare against."},{"content":"Remarks","pos":[16071,16078]},{"pos":[16082,16182],"content":"See <bpt id=\"p1\">[</bpt>checked_array_iterator::operator<ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#checked_array_iterator__operator_lt_)</ept> for a code sample.","source":"See [checked_array_iterator::operator&lt;](#checked_array_iterator__operator_lt_) for a code sample."},{"pos":[16189,16277],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"pos":[16343,16375],"content":"checked_array_iterator::operator"},{"pos":[16384,16527],"content":"Tests if the <ph id=\"ph1\">`checked_array_iterator`</ph> on the left side of the operator is less than or equal to the <ph id=\"ph2\">`checked_array_iterator`</ph> on the right side.","source":"Tests if the `checked_array_iterator` on the left side of the operator is less than or equal to the `checked_array_iterator` on the right side."},{"content":"Parameters","pos":[16621,16631]},{"content":"The <ph id=\"ph1\">`checked_array_iterator`</ph> to compare against.","pos":[16646,16694],"source":" The `checked_array_iterator` to compare against."},{"content":"Remarks","pos":[16704,16711]},{"pos":[16715,16819],"content":"See <bpt id=\"p1\">[</bpt>checked_array_iterator::operator<ph id=\"ph1\">&amp;gt;=</ph><ept id=\"p1\">](#checked_array_iterator__operator_gt__eq)</ept> for a code sample.","source":"See [checked_array_iterator::operator&gt;=](#checked_array_iterator__operator_gt__eq) for a code sample."},{"pos":[16826,16914],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"pos":[16980,17012],"content":"checked_array_iterator::operator"},{"pos":[17021,17167],"content":"Tests if the <ph id=\"ph1\">`checked_array_iterator`</ph> on the left side of the operator is greater than or equal to the <ph id=\"ph2\">`checked_array_iterator`</ph> on the right side.","source":"Tests if the `checked_array_iterator` on the left side of the operator is greater than or equal to the `checked_array_iterator` on the right side."},{"content":"Parameters","pos":[17261,17271]},{"content":"The <ph id=\"ph1\">`checked_array_iterator`</ph> to compare against.","pos":[17286,17334],"source":" The `checked_array_iterator` to compare against."},{"content":"Remarks","pos":[17344,17351]},{"pos":[17355,17443],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[17453,17460]},{"pos":[18797,18830],"content":"checked_array_iterator::operator*"},{"pos":[18834,18896],"content":"Returns the element that a <ph id=\"ph1\">`checked_array_iterator`</ph> addresses.","source":"Returns the element that a `checked_array_iterator` addresses."},{"content":"Return Value","pos":[18948,18960]},{"pos":[18964,19031],"content":"The value of the element addressed by the <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"The value of the element addressed by the `checked_array_iterator`."},{"content":"Remarks","pos":[19041,19048]},{"pos":[19052,19140],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[19150,19157]},{"pos":[20166,20199],"content":"checked_array_iterator::operator-"},{"pos":[20207,20282],"content":"Returns a pointer to the element addressed by the <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"Returns a pointer to the element addressed by the `checked_array_iterator`."},{"content":"Return Value","pos":[20333,20345]},{"pos":[20349,20416],"content":"A pointer to the element addressed by the <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"A pointer to the element addressed by the `checked_array_iterator`."},{"content":"Remarks","pos":[20426,20433]},{"pos":[20437,20527],"content":"See <bpt id=\"p1\">[</bpt>checked_array_iterator::pointer<ept id=\"p1\">](#checked_array_iterator__pointer)</ept> for a code sample.","source":"See [checked_array_iterator::pointer](#checked_array_iterator__pointer) for a code sample."},{"pos":[20534,20622],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"pos":[20689,20723],"content":"checked_array_iterator::operator++"},{"pos":[20727,20787],"content":"Increments the <ph id=\"ph1\">`checked_array_iterator`</ph> to the next element.","source":"Increments the `checked_array_iterator` to the next element."},{"content":"Return Value","pos":[20900,20912]},{"pos":[20916,21090],"content":"The first operator returns the preincremented <ph id=\"ph1\">`checked_array_iterator`</ph> and the second, the postincrement operator, returns a copy of the incremented <ph id=\"ph2\">`checked_array_iterator`</ph>.","source":"The first operator returns the preincremented `checked_array_iterator` and the second, the postincrement operator, returns a copy of the incremented `checked_array_iterator`."},{"content":"Remarks","pos":[21100,21107]},{"pos":[21111,21199],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[21209,21216]},{"pos":[21900,21934],"content":"checked_array_iterator::operator--"},{"pos":[21938,22002],"content":"Decrements the <ph id=\"ph1\">`checked_array_iterator`</ph> to the previous element.","source":"Decrements the `checked_array_iterator` to the previous element."},{"content":"Return Value","pos":[22126,22138]},{"pos":[22142,22316],"content":"The first operator returns the predecremented <ph id=\"ph1\">`checked_array_iterator`</ph> and the second, the postdecrement operator, returns a copy of the decremented <ph id=\"ph2\">`checked_array_iterator`</ph>.","source":"The first operator returns the predecremented `checked_array_iterator` and the second, the postdecrement operator, returns a copy of the decremented `checked_array_iterator`."},{"content":"Remarks","pos":[22326,22333]},{"pos":[22337,22425],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[22435,22442]},{"pos":[23132,23166],"content":"checked_array_iterator::operator+="},{"pos":[23170,23224],"content":"Adds a specified offset to a <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"Adds a specified offset to a `checked_array_iterator`."},{"content":"Parameters","pos":[23316,23326]},{"content":"The offset by which to increment the iterator.","pos":[23340,23386]},{"content":"Return Value","pos":[23396,23408]},{"pos":[23412,23481],"content":"A reference to the element addressed by the <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"A reference to the element addressed by the `checked_array_iterator`."},{"content":"Remarks","pos":[23491,23498]},{"pos":[23502,23590],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[23600,23607]},{"pos":[24212,24245],"content":"checked_array_iterator::operator+"},{"pos":[24249,24383],"content":"Adds an offset to an iterator and returns the new <ph id=\"ph1\">`checked_array_iterator`</ph> addressing the inserted element at the new offset position.","source":"Adds an offset to an iterator and returns the new `checked_array_iterator` addressing the inserted element at the new offset position."},{"content":"Parameters","pos":[24479,24489]},{"content":"The offset to be added to the <ph id=\"ph1\">`checked_array_iterator`</ph>.","pos":[24503,24558],"source":" The offset to be added to the `checked_array_iterator`."},{"content":"Return Value","pos":[24568,24580]},{"pos":[24584,24641],"content":"A <ph id=\"ph1\">`checked_array_iterator`</ph> addressing the offset element.","source":"A `checked_array_iterator` addressing the offset element."},{"content":"Remarks","pos":[24651,24658]},{"pos":[24662,24750],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[24760,24767]},{"pos":[25394,25428],"content":"checked_array_iterator::operator-="},{"pos":[25432,25494],"content":"Decrements a specified offset from a <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"Decrements a specified offset from a `checked_array_iterator`."},{"content":"Parameters","pos":[25586,25596]},{"content":"The offset by which to increment the iterator.","pos":[25610,25656]},{"content":"Return Value","pos":[25666,25678]},{"pos":[25682,25751],"content":"A reference to the element addressed by the <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"A reference to the element addressed by the `checked_array_iterator`."},{"content":"Remarks","pos":[25761,25768]},{"pos":[25772,25860],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[25870,25877]},{"pos":[26515,26548],"content":"checked_array_iterator::operator-"},{"pos":[26552,26694],"content":"Decrements an offset from an iterator and returns the new <ph id=\"ph1\">`checked_array_iterator`</ph> addressing the inserted element at the new offset position.","source":"Decrements an offset from an iterator and returns the new `checked_array_iterator` addressing the inserted element at the new offset position."},{"content":"Parameters","pos":[26861,26871]},{"content":"The offset to be decremented from the <ph id=\"ph1\">`checked_array_iterator`</ph>.","pos":[26885,26948],"source":" The offset to be decremented from the `checked_array_iterator`."},{"content":"Return Value","pos":[26958,26970]},{"pos":[26974,27031],"content":"A <ph id=\"ph1\">`checked_array_iterator`</ph> addressing the offset element.","source":"A `checked_array_iterator` addressing the offset element."},{"content":"Remarks","pos":[27041,27048]},{"pos":[27052,27146],"content":"See <bpt id=\"p1\">[</bpt>checked_array_iterator::operator-<ept id=\"p1\">](#checked_array_iterator__operator-)</ept> for a code sample.","source":"See [checked_array_iterator::operator-](#checked_array_iterator__operator-) for a code sample."},{"pos":[27153,27241],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"pos":[27303,27337],"content":"checked_array_iterator::operator[]"},{"pos":[27341,27474],"content":"Returns a reference to an element offset from the element addressed by a <ph id=\"ph1\">`checked_array_iterator`</ph> by a specified number of positions.","source":"Returns a reference to an element offset from the element addressed by a `checked_array_iterator` by a specified number of positions."},{"content":"Parameters","pos":[27547,27557]},{"content":"The offset from the <ph id=\"ph1\">`checked_array_iterator`</ph> address.","pos":[27571,27624],"source":" The offset from the `checked_array_iterator` address."},{"content":"Return Value","pos":[27634,27646]},{"content":"The reference to the element offset.","pos":[27650,27686]},{"content":"Remarks","pos":[27696,27703]},{"pos":[27707,27795],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"Example","pos":[27805,27812]},{"pos":[28449,28480],"content":"checked_array_iterator::pointer"},{"pos":[28484,28569],"content":"A type that provides a pointer to an element addressed by a <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"A type that provides a pointer to an element addressed by a `checked_array_iterator`."},{"content":"Remarks","pos":[28654,28661]},{"pos":[28665,28763],"content":"See <bpt id=\"p1\">[</bpt>checked_array_iterator::operator*<ept id=\"p1\">](#checked_array_iterator__operator_star)</ept> for a code sample.","source":"See [checked_array_iterator::operator*](#checked_array_iterator__operator_star) for a code sample."},{"pos":[28770,28858],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"pos":[28918,28951],"content":"checked_array_iterator::reference"},{"pos":[28955,29042],"content":"A type that provides a reference to an element addressed by a <ph id=\"ph1\">`checked_array_iterator`</ph>.","source":"A type that provides a reference to an element addressed by a `checked_array_iterator`."},{"content":"Remarks","pos":[29131,29138]},{"pos":[29142,29239],"content":"See <bpt id=\"p1\">[</bpt>checked_array_iterator::operator[]<ept id=\"p1\">](#checked_array_iterator__operator_at)</ept> for a code sample.","source":"See [checked_array_iterator::operator[]](#checked_array_iterator__operator_at) for a code sample."},{"pos":[29246,29334],"content":"For more information, see <bpt id=\"p1\">[</bpt>Checked Iterators<ept id=\"p1\">](../standard-library/checked-iterators.md)</ept>.","source":"For more information, see [Checked Iterators](../standard-library/checked-iterators.md)."},{"content":"See Also","pos":[29343,29351]},{"content":"iterator&gt;","pos":[29358,29367],"source":"iterator>"},{"content":"C++ Standard Library Reference","pos":[29407,29437]}],"content":"---\ntitle: \"checked_array_iterator Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"iterator/checked_array_iterator\"\n  - \"checked_array_iterator\"\n  - \"std::checked_array_iterator\"\n  - \"std.checked_array_iterator\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"checked_array_iterator, syntax\"\n  - \"checked_array_iterator class\"\n  - \"checked_array_iterator\"\nms.assetid: 7f07185e-d588-4ae3-9c4f-84ec4aa25a28\ncaps.latest.revision: 28\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# checked_array_iterator Class\nThe `checked_array_iterator` class allows you to transform an array or pointer into a checked iterator. Use this class as a wrapper (using the [make_checked_array_iterator](../standard-library/iterator-functions.md#make_checked_array_iterator) function) for raw pointers or arrays as a targeted way to provide checking and to manage unchecked pointer warnings instead of globally silencing these warnings. If necessary, you can use the unchecked version of this class, [unchecked_array_iterator](../standard-library/unchecked-array-iterator-class.md).  \n  \n> [!NOTE]\n>  This class is a Microsoft extension of the Standard C++ Library. Code implemented by using this function is not portable to C++ Standard build environments that do not support this Microsoft extension. For an example demonstrating how to write code that does not require the use of this class, see the second example below.  \n  \n## Syntax  \n  \n```\ntemplate <class _Iterator>  \nclass checked_array_iterator;\n```  \n  \n## Remarks  \n This class is defined in the [stdext](../standard-library/stdext-namespace.md) namespace.  \n  \n For more information and example code on the checked iterator feature, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n## Example  \n The following sample shows how to define and use a checked array iterator.  \n  \n If the destination is not large enough to hold all the elements being copied, such as would be the case if you changed the line:  \n  \n```cpp\ncopy(a, a + 5, checked_array_iterator<int*>(b, 5));\n```  \n  \n to  \n  \n```cpp\ncopy(a, a + 5, checked_array_iterator<int*>(b, 4));\n```  \n  \n A runtime error will occur.  \n  \n```cpp  \n// compile with: /EHsc /W4 /MTd  \n#include <algorithm>  \n#include <iostream>  \n  \nusing namespace std;  \nusing namespace stdext;  \n  \nint main() {  \n   int a[]={0, 1, 2, 3, 4};  \n   int b[5];  \n   copy(a, a + 5, checked_array_iterator<int*>(b, 5));  \n  \n   cout << \"(\";  \n   for (int i = 0 ; i < 5 ; i++)  \n      cout << \" \" << b[i];  \n   cout << \" )\" << endl;  \n  \n   // constructor example  \n   checked_array_iterator<int*> checked_out_iter(b, 5);  \n   copy(a, a + 5, checked_out_iter);  \n  \n   cout << \"(\";  \n   for (int i = 0 ; i < 5 ; i++)  \n      cout << \" \" << b[i];  \n   cout << \" )\" << endl;  \n}  \n\\* Output:   \n( 0 1 2 3 4 )  \n( 0 1 2 3 4 )  \n*\\  \n```  \n  \n## Example  \n To avoid the need for the `checked_array_iterator` class when using Standard C++ Library algorithms, consider using a `vector` instead of a dynamically allocated array. The following example demonstrates how to do this.  \n  \n```cpp  \n// compile with: /EHsc /W4 /MTd  \n  \n#include <algorithm>  \n#include <iostream>  \n#include <vector>  \n  \nusing namespace std;  \n  \nint main()  \n{  \n    std::vector<int> v(10);  \n    int *arr = new int[10];  \n    for (int i = 0; i < 10; ++i)  \n    {  \n        v[i] = i;  \n        arr[i] = i;  \n    }  \n  \n    // std::copy(v.begin(), v.end(), arr); will result in  \n    // warning C4996. To avoid this warning while using int *,  \n    // use the Microsoft extension checked_array_iterator.  \n    std::copy(v.begin(), v.end(),  \n              stdext::checked_array_iterator<int *>(arr, 10));  \n  \n    // Instead of using stdext::checked_array_iterator and int *,  \n    // consider using std::vector to encapsulate the array. This will  \n    // result in no warnings, and the code will be portable.  \n    std::vector<int> arr2(10);    // Similar to int *arr = new int[10];  \n    std::copy(v.begin(), v.end(), arr2.begin());  \n  \n    for (int j = 0; j < arr2.size(); ++j)  \n    {  \n        cout << \" \" << arr2[j];  \n    }  \n    cout << endl;  \n  \n    return 0;  \n}  \n\\* Output:   \n 0 1 2 3 4 5 6 7 8 9  \n*\\  \n```  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[checked_array_iterator](#checked_array_iterator__checked_array_iterator)|Constructs a default `checked_array_iterator` or a `checked_array_iterator` from an underlying iterator.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[difference_type](#checked_array_iterator__difference_type)|A type that provides the difference between two `checked_array_iterator`s referring to elements within the same container.|  \n|[pointer](#checked_array_iterator__pointer)|A type that provides a pointer to an element addressed by a `checked_array_iterator`.|  \n|[reference](#checked_array_iterator__reference)|A type that provides a reference to an element addressed by a `checked_array_iterator`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[base](#checked_array_iterator__base)|Recovers the underlying iterator from its `checked_array_iterator`.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator==](#checked_array_iterator__operator_eq_eq)|Tests two `checked_array_iterator`s for equality.|  \n|[operator!=](#checked_array_iterator__operator_neq)|Tests two `checked_array_iterator`s for inequality.|  \n|[operator<](#checked_array_iterator__operator_lt_)|Tests if the `checked_array_iterator` on the left side of the operator is less than the `checked_array_iterator` on the right side.|  \n|[operator>](#checked_array_iterator__operator_gt_)|Tests if the `checked_array_iterator` on the left side of the operator is greater than the `checked_array_iterator` on the right side.|  \n|[operator<=](#checked_array_iterator__operator_lt__eq)|Tests if the `checked_array_iterator` on the left side of the operator is less than or equal to the `checked_array_iterator` on the right side.|  \n|[operator>=](#checked_array_iterator__operator_gt__eq)|Tests if the `checked_array_iterator` on the left side of the operator is greater than or equal to the `checked_array_iterator` on the right side.|  \n|[operator*](#checked_array_iterator__operator_star)|Returns the element that a `checked_array_iterator` addresses.|  \n|[operator->](#checked_array_iterator__operator-_gt_)|Returns a pointer to the element addressed by the `checked_array_iterator`.|  \n|[operator++](#checked_array_iterator__operator_add_add)|Increments the `checked_array_iterator` to the next element.|  \n|[operator--](#checked_array_iterator__operator--)|Decrements the `checked_array_iterator` to the previous element.|  \n|[operator+=](#checked_array_iterator__operator_add_eq)|Adds a specified offset to a `checked_array_iterator`.|  \n|[operator+](#checked_array_iterator__operator_add)|Adds an offset to an iterator and returns the new `checked_array_iterator` addressing the inserted element at the new offset position.|  \n|[operator-=](#checked_array_iterator__operator-_eq)|Decrements a specified offset from a `checked_array_iterator`.|  \n|[operator-](#checked_array_iterator__operator-)|Decrements an offset from an iterator and returns the new `checked_array_iterator` addressing the inserted element at the new offset position.|  \n|[operator&#91;&#93;](#checked_array_iterator__operator_at)|Returns a reference to an element offset from the element addressed by a `checked_array_iterator` by a specified number of positions.|  \n  \n## Requirements  \n **Header:** \\<iterator>  \n  \n **Namespace:** stdext  \n  \n##  <a name=\"checked_array_iterator__base\"></a>  checked_array_iterator::base  \n Recovers the underlying iterator from its `checked_array_iterator`.  \n  \n```\n_Iterator base() const;\n```  \n  \n### Remarks  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  \n```cpp  \n// checked_array_iterators_base.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <vector>  \n#include <iostream>  \n  \nint main() {  \n   using namespace std;  \n  \n   int V1[10];  \n  \n   for (int i = 0; i < 10 ; i++)  \n      V1[i] = i;  \n  \n   int* bpos;  \n  \n   stdext::checked_array_iterator<int*> rpos(V1, 10);  \n   rpos++;  \n  \n   bpos = rpos.base ( );  \n   cout << \"The iterator underlying rpos is bpos & it points to: \"   \n        << *bpos << \".\" << endl;  \n}  \n\\* Output:   \nThe iterator underlying rpos is bpos & it points to: 1.  \n*\\  \n```  \n  \n##  <a name=\"checked_array_iterator__checked_array_iterator\"></a>  checked_array_iterator::checked_array_iterator  \n Constructs a default `checked_array_iterator` or a `checked_array _iterator` from an underlying iterator.  \n  \n```\nchecked_array_iterator();\n\nchecked_array_iterator(\n    ITerator ptr,\n    size_t size,\n    size_t index = 0);\n```  \n  \n### Parameters  \n `ptr`  \n A pointer to the array.  \n  \n `size`  \n The size of the array.  \n  \n `index`  \n (Optional) An element in the array, to initialize the iterator.  By default, the iterator is initialized to the first element in the array.  \n  \n### Remarks  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  \n```cpp  \n// checked_array_iterators_ctor.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <iostream>   \n  \nusing namespace std;  \nusing namespace stdext;  \n  \nint main() {  \n   int a[] = {0, 1, 2, 3, 4};  \n   int b[5];  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n  \n   for (int i = 0 ; i < 5 ; i++)  \n      cout << b[i] << \" \";  \n   cout << endl;  \n  \n   checked_array_iterator<int*> checked_output_iterator(b,5);  \n   copy (a, a + 5, checked_output_iterator);  \n   for (int i = 0 ; i < 5 ; i++)  \n      cout << b[i] << \" \";  \n   cout << endl;  \n  \n   checked_array_iterator<int*> checked_output_iterator2(b,5,3);  \n   cout << *checked_output_iterator2 << endl;  \n}  \n\\* Output:   \n0 1 2 3 4   \n0 1 2 3 4   \n3  \n*\\  \n```  \n  \n##  <a name=\"checked_array_iterator__difference_type\"></a>  checked_array_iterator::difference_type  \n A type that provides the difference between two `checked_array_iterator`s referring to elements within the same container.  \n  \n```\ntypedef typename iterator_traits<_Iterator>::difference_type difference_type;\n```  \n  \n### Remarks  \n The `checked_array_iterator` difference type is the same as the iterator difference type.  \n  \n See [checked_array_iterator::operator[]](#checked_array_iterator__operator_at) for a code sample.  \n  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n##  <a name=\"checked_array_iterator__operator_eq_eq\"></a>  checked_array_iterator::operator==  \n Tests two `checked_array_iterator`s for equality.  \n  \n```\nbool operator==(const checked_array_iterator<_Iterator>& right) const;\n```  \n  \n### Parameters  \n `right`  \n The `checked_array_iterator` against which to check for equality.  \n  \n### Remarks  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  \n```cpp  \n// checked_array_iterators_opeq.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <iostream>   \n  \nusing namespace std;  \nusing namespace stdext;  \n  \nint main() {  \n   int a[] = {0, 1, 2, 3, 4};  \n   int b[5];  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n  \n   checked_array_iterator<int*> checked_output_iterator(b,5);  \n   checked_array_iterator<int*> checked_output_iterator2(b,5);  \n  \n   if (checked_output_iterator2 == checked_output_iterator)  \n      cout << \"checked_array_iterators are equal\" << endl;  \n   else  \n      cout << \"checked_array_iterators are not equal\" << endl;  \n  \n   copy (a, a + 5, checked_output_iterator);  \n   checked_output_iterator++;  \n  \n   if (checked_output_iterator2 == checked_output_iterator)  \n      cout << \"checked_array_iterators are equal\" << endl;  \n   else  \n      cout << \"checked_array_iterators are not equal\" << endl;  \n}  \n\\* Output:   \nchecked_array_iterators are equal  \nchecked_array_iterators are not equal  \n*\\  \n```  \n  \n##  <a name=\"checked_array_iterator__operator_neq\"></a>  checked_array_iterator::operator!=  \n Tests two `checked_array_iterator`s for inequality.  \n  \n```\nbool operator!=(const checked_array_iterator<_Iterator>& right) const;\n```  \n  \n### Parameters  \n `right`  \n The `checked_array_iterator` against which to check for inequality.  \n  \n### Remarks  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  \n```cpp  \n// checked_array_iterators_opneq.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <iostream>   \n  \nusing namespace std;  \nusing namespace stdext;  \n  \nint main() {  \n   int a[] = {0, 1, 2, 3, 4};  \n   int b[5];  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n  \n   checked_array_iterator<int*> checked_output_iterator(b,5);  \n   checked_array_iterator<int*> checked_output_iterator2(b,5);  \n  \n   if (checked_output_iterator2 != checked_output_iterator)  \n      cout << \"checked_array_iterators are not equal\" << endl;  \n   else  \n      cout << \"checked_array_iterators are equal\" << endl;  \n  \n   copy (a, a + 5, checked_output_iterator);  \n   checked_output_iterator++;  \n  \n   if (checked_output_iterator2 != checked_output_iterator)  \n      cout << \"checked_array_iterators are not equal\" << endl;  \n   else  \n      cout << \"checked_array_iterators are equal\" << endl;  \n}  \n\\* Output:   \nchecked_array_iterators are equal  \nchecked_array_iterators are not equal  \n*\\  \n```  \n  \n##  <a name=\"checked_array_iterator__operator_lt_\"></a>  checked_array_iterator::operator&lt;  \n Tests if the `checked_array_iterator` on the left side of the operator is less than the `checked_array_iterator` on the right side.  \n  \n```\nbool operator<(const checked_array_iterator<_Iterator>& right) const;\n```  \n  \n### Parameters  \n `right`  \n The `checked_array_iterator` against which to check for inequality.  \n  \n### Remarks  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  \n```cpp  \n// checked_array_iterators_oplt.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <iostream>   \n  \nusing namespace std;  \nusing namespace stdext;  \n  \nint main() {  \n   int a[] = {0, 1, 2, 3, 4};  \n   int b[5];  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n  \n   checked_array_iterator<int*> checked_output_iterator(b,5);  \n   checked_array_iterator<int*> checked_output_iterator2(b,5);  \n  \n   if (checked_output_iterator2 < checked_output_iterator)  \n      cout << \"checked_output_iterator2 is less than checked_output_iterator\" << endl;  \n   else  \n      cout << \"checked_output_iterator2 is not less than checked_output_iterator\" << endl;  \n  \n   copy (a, a + 5, checked_output_iterator);  \n   checked_output_iterator++;  \n  \n   if (checked_output_iterator2 < checked_output_iterator)  \n      cout << \"checked_output_iterator2 is less than checked_output_iterator\" << endl;  \n   else  \n      cout << \"checked_output_iterator2 is not less than checked_output_iterator\" << endl;  \n}  \n\\* Output:   \nchecked_output_iterator2 is not less than checked_output_iterator  \nchecked_output_iterator2 is less than checked_output_iterator  \n*\\  \n```  \n  \n##  <a name=\"checked_array_iterator__operator_gt_\"></a>  checked_array_iterator::operator&gt;  \n Tests if the `checked_array_iterator` on the left side of the operator is greater than the `checked_array_iterator` on the right side.  \n  \n```\nbool operator>(const checked_array_iterator<_Iterator>& right) const;\n```  \n  \n### Parameters  \n `right`  \n The `checked_array_iterator` to compare against.  \n  \n### Remarks  \n See [checked_array_iterator::operator&lt;](#checked_array_iterator__operator_lt_) for a code sample.  \n  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n##  <a name=\"checked_array_iterator__operator_lt__eq\"></a>  checked_array_iterator::operator&lt;=  \n Tests if the `checked_array_iterator` on the left side of the operator is less than or equal to the `checked_array_iterator` on the right side.  \n  \n```\nbool operator<=(const checked_array_iterator<_Iterator>& right) const;\n```  \n  \n### Parameters  \n `right`  \n The `checked_array_iterator` to compare against.  \n  \n### Remarks  \n See [checked_array_iterator::operator&gt;=](#checked_array_iterator__operator_gt__eq) for a code sample.  \n  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n##  <a name=\"checked_array_iterator__operator_gt__eq\"></a>  checked_array_iterator::operator&gt;=  \n Tests if the `checked_array_iterator` on the left side of the operator is greater than or equal to the `checked_array_iterator` on the right side.  \n  \n```\nbool operator>=(const checked_array_iterator<_Iterator>& right) const;\n```  \n  \n### Parameters  \n `right`  \n The `checked_array_iterator` to compare against.  \n  \n### Remarks  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  \n```cpp  \n// checked_array_iterators_opgteq.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <iostream>   \n  \nusing namespace std;  \nusing namespace stdext;  \n  \nint main() {  \n   int a[] = {0, 1, 2, 3, 4};  \n   int b[5];  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n  \n   checked_array_iterator<int*> checked_output_iterator(b,5);  \n   checked_array_iterator<int*> checked_output_iterator2(b,5);  \n  \n   if (checked_output_iterator2 >= checked_output_iterator)  \n      cout << \"checked_output_iterator2 is greater than or equal to checked_output_iterator\" << endl;  \n   else  \n      cout << \"checked_output_iterator2 is less than checked_output_iterator\" << endl;  \n  \n   copy (a, a + 5, checked_output_iterator);  \n   checked_output_iterator++;  \n  \n   if (checked_output_iterator2 >= checked_output_iterator)  \n      cout << \"checked_output_iterator2 is greater than or equal to checked_output_iterator\" << endl;  \n   else  \n      cout << \"checked_output_iterator2 is less than checked_output_iterator\" << endl;  \n}  \n\\* Output:   \nchecked_output_iterator2 is greater than or equal to checked_output_iterator  \nchecked_output_iterator2 is less than checked_output_iterator  \n*\\  \n```  \n  \n##  <a name=\"checked_array_iterator__operator_star\"></a>  checked_array_iterator::operator*  \n Returns the element that a `checked_array_iterator` addresses.  \n  \n```\nreference operator*() const;\n```  \n  \n### Return Value  \n The value of the element addressed by the `checked_array_iterator`.  \n  \n### Remarks  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  \n```cpp  \n// checked_array_iterator_pointer.cpp  \n// compile with: /EHsc  \n#include <iterator>  \n#include <algorithm>  \n#include <vector>  \n#include <utility>  \n#include <iostream>  \n  \nusing namespace std;  \nusing namespace stdext;  \n  \nint main() {  \n   int a[] = {0, 1, 2, 3, 4};  \n   int b[5];  \n   pair<int, int> c[1];  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n  \n   for (int i = 0 ; i < 5 ; i++)  \n      cout << b[i] << endl;  \n  \n    c[0].first = 10;  \n    c[0].second = 20;  \n  \n   checked_array_iterator<int*> checked_output_iterator(b,5);  \n   checked_array_iterator<int*>::pointer p = &(*checked_output_iterator);  \n   checked_array_iterator<pair<int, int>*> chk_c(c, 1);  \n   checked_array_iterator<pair<int, int>*>::pointer p_c = &(*chk_c);  \n  \n   cout << \"b[0] = \" << *p << endl;  \n   cout << \"c[0].first = \" << p_c->first << endl;  \n}  \n\\* Output:   \n0  \n1  \n2  \n3  \n4  \nb[0] = 0  \nc[0].first = 10  \n*\\  \n```  \n  \n##  <a name=\"checked_array_iterator__operator-_gt_\"></a>  checked_array_iterator::operator-&gt;  \n Returns a pointer to the element addressed by the `checked_array_iterator`.  \n  \n```\npointer operator->() const;\n```  \n  \n### Return Value  \n A pointer to the element addressed by the `checked_array_iterator`.  \n  \n### Remarks  \n See [checked_array_iterator::pointer](#checked_array_iterator__pointer) for a code sample.  \n  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n##  <a name=\"checked_array_iterator__operator_add_add\"></a>  checked_array_iterator::operator++  \n Increments the `checked_array_iterator` to the next element.  \n  \n```\nchecked_array_iterator& operator++();\n\nchecked_array_iterator<_Iterator> operator++(int);\n```  \n  \n### Return Value  \n The first operator returns the preincremented `checked_array_iterator` and the second, the postincrement operator, returns a copy of the incremented `checked_array_iterator`.  \n  \n### Remarks  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  \n```cpp  \n// checked_array_iterators_op_plus_plus.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main() {  \n   using namespace stdext;  \n   using namespace std;  \n   int a[] = {6, 3, 77, 199, 222};  \n   int b[5];  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n  \n   checked_array_iterator<int*> checked_output_iterator(b,5);  \n  \n   cout << *checked_output_iterator << endl;  \n   ++checked_output_iterator;  \n   cout << *checked_output_iterator << endl;  \n   checked_output_iterator++;  \n   cout << *checked_output_iterator << endl;  \n}  \n\\* Output:   \n6  \n3  \n77  \n*\\  \n```  \n  \n##  <a name=\"checked_array_iterator__operator--\"></a>  checked_array_iterator::operator--  \n Decrements the `checked_array_iterator` to the previous element.  \n  \n```\nchecked_array_iterator<_Iterator>& operator--();\n\nchecked_array_iterator<_Iterator> operator--(int);\n```  \n  \n### Return Value  \n The first operator returns the predecremented `checked_array_iterator` and the second, the postdecrement operator, returns a copy of the decremented `checked_array_iterator`.  \n  \n### Remarks  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  \n```cpp  \n// checked_array_iterators_op_minus_minus.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main() {  \n   using namespace stdext;  \n   using namespace std;  \n   int a[] = {6, 3, 77, 199, 222};  \n   int b[5];  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n  \n   checked_array_iterator<int*> checked_output_iterator(b,5);  \n  \n   cout << *checked_output_iterator << endl;  \n   checked_output_iterator++;  \n   cout << *checked_output_iterator << endl;  \n   checked_output_iterator--;  \n   cout << *checked_output_iterator << endl;  \n}  \n\\* Output:   \n6  \n3  \n6  \n*\\  \n```  \n  \n##  <a name=\"checked_array_iterator__operator_add_eq\"></a>  checked_array_iterator::operator+=  \n Adds a specified offset to a `checked_array_iterator`.  \n  \n```\nchecked_array_iterator<_Iterator>& operator+=(difference_type _Off);\n```  \n  \n### Parameters  \n `_Off`  \n The offset by which to increment the iterator.  \n  \n### Return Value  \n A reference to the element addressed by the `checked_array_iterator`.  \n  \n### Remarks  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  \n```cpp  \n// checked_array_iterators_op_plus_eq.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main() {  \n   using namespace stdext;  \n   using namespace std;  \n   int a[] = {6, 3, 77, 199, 222};  \n   int b[5];  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n  \n   checked_array_iterator<int*> checked_output_iterator(b,5);  \n  \n   cout << *checked_output_iterator << endl;  \n   checked_output_iterator += 3;  \n   cout << *checked_output_iterator << endl;  \n}  \n\\* Output:   \n6  \n199  \n*\\  \n```  \n  \n##  <a name=\"checked_array_iterator__operator_add\"></a>  checked_array_iterator::operator+  \n Adds an offset to an iterator and returns the new `checked_array_iterator` addressing the inserted element at the new offset position.  \n  \n```\nchecked_array_iterator<_Iterator> operator+(difference_type _Off) const;\n```  \n  \n### Parameters  \n `_Off`  \n The offset to be added to the `checked_array_iterator`.  \n  \n### Return Value  \n A `checked_array_iterator` addressing the offset element.  \n  \n### Remarks  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  \n```cpp  \n// checked_array_iterators_op_plus.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main() {  \n   using namespace stdext;  \n   using namespace std;  \n   int a[] = {6, 3, 77, 199, 222};  \n   int b[5];  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n  \n   checked_array_iterator<int*> checked_output_iterator(b,5);  \n  \n   cout << *checked_output_iterator << endl;  \n   checked_output_iterator = checked_output_iterator + 3;  \n   cout << *checked_output_iterator << endl;  \n}  \n\\* Output:   \n6  \n199  \n*\\  \n```  \n  \n##  <a name=\"checked_array_iterator__operator-_eq\"></a>  checked_array_iterator::operator-=  \n Decrements a specified offset from a `checked_array_iterator`.  \n  \n```\nchecked_array_iterator<_Iterator>& operator-=(difference_type _Off);\n```  \n  \n### Parameters  \n `_Off`  \n The offset by which to increment the iterator.  \n  \n### Return Value  \n A reference to the element addressed by the `checked_array_iterator`.  \n  \n### Remarks  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  \n```cpp  \n// checked_array_iterators_op_minus_eq.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main() {  \n   using namespace stdext;  \n   using namespace std;  \n   int a[] = {6, 3, 77, 199, 222};  \n   int b[5];  \n   copy(a, a + 5, checked_array_iterator<int*>(b,5));  \n  \n   checked_array_iterator<int*> checked_output_iterator(b,5);  \n  \n   checked_output_iterator += 3;  \n   cout << *checked_output_iterator << endl;  \n   checked_output_iterator -= 2;  \n   cout << *checked_output_iterator << endl;  \n}  \n\\* Output:   \n199  \n3  \n*\\  \n```  \n  \n##  <a name=\"checked_array_iterator__operator-\"></a>  checked_array_iterator::operator-  \n Decrements an offset from an iterator and returns the new `checked_array_iterator` addressing the inserted element at the new offset position.  \n  \n```\nchecked_array_iterator<_Iterator> operator-(difference_type _Off) const;\n\ndifference_type operator-(const checked_array_iterator& right) const;\n```  \n  \n### Parameters  \n `_Off`  \n The offset to be decremented from the `checked_array_iterator`.  \n  \n### Return Value  \n A `checked_array_iterator` addressing the offset element.  \n  \n### Remarks  \n See [checked_array_iterator::operator-](#checked_array_iterator__operator-) for a code sample.  \n  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n##  <a name=\"checked_array_iterator__operator_at\"></a>  checked_array_iterator::operator[]  \n Returns a reference to an element offset from the element addressed by a `checked_array_iterator` by a specified number of positions.  \n  \n```\nreference operator[](difference_type _Off) const;\n```  \n  \n### Parameters  \n `_Off`  \n The offset from the `checked_array_iterator` address.  \n  \n### Return Value  \n The reference to the element offset.  \n  \n### Remarks  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n### Example  \n  \n```cpp  \n// checked_array_iterators_op_diff.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <iostream>  \n  \nint main() {  \n   using namespace std;     \n   int V1[10];  \n  \n   for (int i = 0; i < 10 ; i++)  \n      V1[i] = i;  \n  \n   // Declare a difference type for a parameter  \n   stdext::checked_array_iterator<int*>::difference_type diff = 2;  \n  \n   stdext::checked_array_iterator<int*> VChkIter(V1, 10);  \n  \n   stdext::checked_array_iterator<int*>::reference refrpos = VChkIter [diff];  \n  \n   cout << refrpos + 1 << endl;  \n}  \n\\* Output:   \n3  \n*\\  \n```  \n  \n##  <a name=\"checked_array_iterator__pointer\"></a>  checked_array_iterator::pointer  \n A type that provides a pointer to an element addressed by a `checked_array_iterator`.  \n  \n```\ntypedef typename iterator_traits<_Iterator>::pointer pointer;\n```  \n  \n### Remarks  \n See [checked_array_iterator::operator*](#checked_array_iterator__operator_star) for a code sample.  \n  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n##  <a name=\"checked_array_iterator__reference\"></a>  checked_array_iterator::reference  \n A type that provides a reference to an element addressed by a `checked_array_iterator`.  \n  \n```\ntypedef typename iterator_traits<_Iterator>::reference reference;\n```  \n  \n### Remarks  \n See [checked_array_iterator::operator[]](#checked_array_iterator__operator_at) for a code sample.  \n  \n For more information, see [Checked Iterators](../standard-library/checked-iterators.md).  \n  \n## See Also  \n [\\<iterator>](../standard-library/iterator.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}