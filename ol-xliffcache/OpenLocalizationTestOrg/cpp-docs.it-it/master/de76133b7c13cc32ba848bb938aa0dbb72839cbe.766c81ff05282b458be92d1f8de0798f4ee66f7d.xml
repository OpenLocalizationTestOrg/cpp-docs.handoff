{"nodes":[{"pos":[12,50],"content":"_spawnlpe, _wspawnlpe | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_spawnlpe, _wspawnlpe | Microsoft Docs","pos":[0,38]}]},{"content":"_spawnlpe, _wspawnlpe","pos":[1147,1168]},{"content":"Creates and executes a new process.","pos":[1169,1204]},{"pos":[1212,1472],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,258],"nodes":[{"content":"This API cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[1,117],"source":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[118,245],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[1481,1487]},{"content":"Parameters","pos":[1893,1903]},{"content":"Execution mode for the calling process.","pos":[1917,1956]},{"content":"Path of the file to be executed.","pos":[1976,2008]},{"content":"List of pointers to arguments.","pos":[2041,2071]},{"content":"The <ph id=\"ph1\">`arg0`</ph> argument is typically a pointer to <ph id=\"ph2\">`cmdname`</ph>.","pos":[2072,2128],"source":" The `arg0` argument is typically a pointer to `cmdname`."},{"content":"The arguments <ph id=\"ph1\">`arg1`</ph> through <ph id=\"ph2\">`argn`</ph> are pointers to the character strings that form the new argument list.","pos":[2129,2235],"source":" The arguments `arg1` through `argn` are pointers to the character strings that form the new argument list."},{"content":"Following <ph id=\"ph1\">`argn`</ph>, there must be a <ph id=\"ph2\">`NULL`</ph> pointer to mark the end of the argument list.","pos":[2236,2322],"source":" Following `argn`, there must be a `NULL` pointer to mark the end of the argument list."},{"content":"Array of pointers to environment settings.","pos":[2339,2381]},{"content":"Return Value","pos":[2390,2402]},{"content":"The return value from a synchronous <ph id=\"ph1\">`_spawnlpe`</ph> or <ph id=\"ph2\">`_wspawnlpe`</ph> (<ph id=\"ph3\">`_P_WAIT`</ph> specified for <ph id=\"ph4\">`mode`</ph>) is the exit status of the new process.","pos":[2406,2541],"source":"The return value from a synchronous `_spawnlpe` or `_wspawnlpe` (`_P_WAIT` specified for `mode`) is the exit status of the new process."},{"content":"The return value from an asynchronous <ph id=\"ph1\">`_spawnlpe`</ph> or <ph id=\"ph2\">`_wspawnlpe`</ph> (<ph id=\"ph3\">`_P_NOWAIT`</ph> or <ph id=\"ph4\">`_P_NOWAITO`</ph> specified for <ph id=\"ph5\">`mode`</ph>) is the process handle.","pos":[2542,2681],"source":" The return value from an asynchronous `_spawnlpe` or `_wspawnlpe` (`_P_NOWAIT` or `_P_NOWAITO` specified for `mode`) is the process handle."},{"content":"The exit status is 0 if the process terminated normally.","pos":[2682,2738]},{"content":"You can set the exit status to a nonzero value if the spawned process specifically uses a nonzero argument to call the <ph id=\"ph1\">`exit`</ph> routine.","pos":[2739,2873],"source":" You can set the exit status to a nonzero value if the spawned process specifically uses a nonzero argument to call the `exit` routine."},{"content":"If the new process did not explicitly set a positive exit status, a positive exit status indicates an abnormal exit caused by an abort or an interrupt.","pos":[2874,3025]},{"content":"A return value of â€“1 indicates an error (the new process is not started).","pos":[3026,3099]},{"content":"In this case, <ph id=\"ph1\">`errno`</ph> is set to one of the following values.","pos":[3100,3160],"source":" In this case, `errno` is set to one of the following values."},{"content":"Argument list exceeds 1024 bytes.","pos":[3178,3211]},{"content":"argument is invalid.","pos":[3237,3257]},{"content":"File or path is not found.","pos":[3276,3302]},{"content":"Specified file is not executable or has an invalid executable-file format.","pos":[3322,3396]},{"content":"Not enough memory is available to execute the new process.","pos":[3415,3473]},{"pos":[3480,3657],"content":"For more information about these and other return codes, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about these and other return codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[3666,3673]},{"content":"Each of these functions creates and executes a new process, passes each command-line argument as a separate parameter, and passes an array of pointers to environment settings.","pos":[3677,3852]},{"content":"These functions use the <ph id=\"ph1\">`PATH`</ph> environment variable to find the file to execute.","pos":[3853,3933],"source":" These functions use the `PATH` environment variable to find the file to execute."},{"content":"These functions validate their parameters.","pos":[3940,3982]},{"content":"If either <ph id=\"ph1\">`cmdname`</ph> or <ph id=\"ph2\">`arg0`</ph> is an empty string or a null pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3983,4181],"source":" If either `cmdname` or `arg0` is an empty string or a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>, and return -1.","pos":[4182,4274],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL`, and return -1."},{"content":"No new process is spawned.","pos":[4275,4301]},{"content":"Requirements","pos":[4310,4322]},{"content":"Routine","pos":[4329,4336]},{"content":"Required header","pos":[4337,4352]},{"content":"process.h&gt;","pos":[4411,4421],"source":"process.h>"},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4441,4463],"source":"stdio.h> or \\<wchar.h>"},{"pos":[4471,4569],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[4578,4585]},{"pos":[4589,4687],"content":"See the example in <bpt id=\"p1\">[</bpt>_spawn, _wspawn Functions<ept id=\"p1\">](../../c-runtime-library/spawn-wspawn-functions.md)</ept>.","source":"See the example in [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)."},{"content":".NET Framework Equivalent","pos":[4696,4721]},{"content":"System::Diagnostics::Process Class","pos":[4732,4766]},{"content":"System::Diagnostics::ProcessStartInfo Class","pos":[4852,4895]},{"content":"See Also","pos":[4988,4996]},{"content":"Process and Environment Control","pos":[5001,5032]},{"content":"_spawn, _wspawn Functions","pos":[5099,5124]},{"content":"abort","pos":[5182,5187]},{"content":"atexit","pos":[5238,5244]},{"content":"_exec, _wexec Functions","pos":[5296,5319]},{"content":"exit, _Exit, _exit","pos":[5375,5393]},{"content":"_flushall","pos":[5453,5462]},{"content":"_getmbcp","pos":[5516,5524]},{"content":"_onexit, _onexit_m","pos":[5577,5595]},{"content":"_setmbcp","pos":[5656,5664]},{"content":"system, _wsystem","pos":[5717,5733]}],"content":"---\ntitle: \"_spawnlpe, _wspawnlpe | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_spawnlpe\"\n  - \"_wspawnlpe\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-process-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"spawnlpe\"\n  - \"_wspawnlpe\"\n  - \"_spawnlpe\"\n  - \"wspawnlpe\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_wspawnlpe function\"\n  - \"wspawnlpe function\"\n  - \"processes, creating\"\n  - \"spawnlpe function\"\n  - \"_spawnlpe function\"\n  - \"processes, executing new\"\n  - \"process creation\"\nms.assetid: e171ebfa-70e7-4c44-8331-2a291fc17bd6\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _spawnlpe, _wspawnlpe\nCreates and executes a new process.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nintptr_t _spawnlpe(  \n   int mode,  \n   const char *cmdname,  \n   const char *arg0,  \n   const char *arg1,  \n   ... const char *argn,  \n   NULL,  \n   const char *const *envp   \n);  \nintptr_t _wspawnlpe(  \n   int mode,  \n   const wchar_t *cmdname,  \n   const wchar_t *arg0,  \n   const wchar_t *arg1,  \n   ... const wchar_t *argn,  \n   NULL,  \n   const wchar_t *const *envp   \n);  \n```  \n  \n#### Parameters  \n `mode`  \n Execution mode for the calling process.  \n  \n `cmdname`  \n Path of the file to be executed.  \n  \n `arg0, arg1, ... argn`  \n List of pointers to arguments. The `arg0` argument is typically a pointer to `cmdname`. The arguments `arg1` through `argn` are pointers to the character strings that form the new argument list. Following `argn`, there must be a `NULL` pointer to mark the end of the argument list.  \n  \n `envp`  \n Array of pointers to environment settings.  \n  \n## Return Value  \n The return value from a synchronous `_spawnlpe` or `_wspawnlpe` (`_P_WAIT` specified for `mode`) is the exit status of the new process. The return value from an asynchronous `_spawnlpe` or `_wspawnlpe` (`_P_NOWAIT` or `_P_NOWAITO` specified for `mode`) is the process handle. The exit status is 0 if the process terminated normally. You can set the exit status to a nonzero value if the spawned process specifically uses a nonzero argument to call the `exit` routine. If the new process did not explicitly set a positive exit status, a positive exit status indicates an abnormal exit caused by an abort or an interrupt. A return value of â€“1 indicates an error (the new process is not started). In this case, `errno` is set to one of the following values.  \n  \n `E2BIG`  \n Argument list exceeds 1024 bytes.  \n  \n `EINVAL`  \n `mode` argument is invalid.  \n  \n `ENOENT`  \n File or path is not found.  \n  \n `ENOEXEC`  \n Specified file is not executable or has an invalid executable-file format.  \n  \n `ENOMEM`  \n Not enough memory is available to execute the new process.  \n  \n For more information about these and other return codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Each of these functions creates and executes a new process, passes each command-line argument as a separate parameter, and passes an array of pointers to environment settings. These functions use the `PATH` environment variable to find the file to execute.  \n  \n These functions validate their parameters. If either `cmdname` or `arg0` is an empty string or a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL`, and return -1. No new process is spawned.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_spawnlpe`|\\<process.h>|  \n|`_wspawnlpe`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n See the example in [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md).  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Diagnostics::Process Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)  \n  \n-   [System::Diagnostics::ProcessStartInfo Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)   \n [abort](../../c-runtime-library/reference/abort.md)   \n [atexit](../../c-runtime-library/reference/atexit.md)   \n [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md)   \n [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md)   \n [_flushall](../../c-runtime-library/reference/flushall.md)   \n [_getmbcp](../../c-runtime-library/reference/getmbcp.md)   \n [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md)   \n [_setmbcp](../../c-runtime-library/reference/setmbcp.md)   \n [system, _wsystem](../../c-runtime-library/reference/system-wsystem.md)"}