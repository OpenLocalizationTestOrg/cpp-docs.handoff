<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a8e0173f1b4a6e485b249472262e629d528eba2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\numeric-boolean-and-pointer-literals-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c3e66e3846b54628374b44611113f4ad4732e9b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d991ca2d6463b6c70c133651b15843ec498fa41a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Numeric, Boolean and Pointer Literals  (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Numeric, Boolean and Pointer Literals  (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A literal is a program element that directly represents a value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article covers literals of type integer, floating-point, boolean and pointer.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about string and character literals, see <bpt id="p1">[</bpt>String and Character Literals  (C++)<ept id="p1">](../cpp/string-and-character-literals-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can also define your own literals based on any of these categories; for more information see <bpt id="p1">[</bpt>User-Defined Literals  (C++)<ept id="p1">](../cpp/user-defined-literals-cpp.md)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use literals in many contexts, but most commonly to initialize named variables and to pass arguments to functions:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Sometimes it's important to tell the compiler how to interpret a literal, or what specific type to give to it.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You do this by appending prefixes or suffixes to the literal.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, the  prefix 0x tells the compiler to interpret the number that follows it as a hexadecimal value, for example 0x35.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The ULL suffix tells the compiler to treat the value as an <ph id="ph1">`unsigned long long`</ph> type, as in 5894345ULL.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See the following sections for the complete list of prefixes and suffixes for each literal type.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Integer literals</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Integer literals begin with a digit and have no fractional parts or exponents.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can specify integer literals in decimal, octal, or hexadecimal form.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>They can specify signed or unsigned types and long or short types.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When no prefix or suffix is present, the compiler will give an integral literal value type <ph id="ph1">`int`</ph> (32 bits), if the value will fit, otherwise it will give it type <ph id="ph2">`long long`</ph> (64 bits).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To specify a decimal integral literal, begin the specification with a nonzero digit.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To specify an octal integral literal, begin the specification with 0, followed by a sequence of digits in the range 0 through 7.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The digits 8 and 9 are errors in specifying an octal literal.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To specify a hexadecimal integral literal, begin the specification with <ph id="ph1">`0x`</ph> or <ph id="ph2">`0X`</ph> (the case of the "x" does not matter), followed by a sequence of digits in the range <ph id="ph3">`0`</ph> through <ph id="ph4">`9`</ph> and <ph id="ph5">`a`</ph> (or <ph id="ph6">`A`</ph>) through <ph id="ph7">`f`</ph> (or <ph id="ph8">`F`</ph>).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Hexadecimal digits <ph id="ph1">`a`</ph> (or <ph id="ph2">`A`</ph>) through <ph id="ph3">`f`</ph> (or <ph id="ph4">`F`</ph>) represent values in the range 10 through 15.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To specify an unsigned type, use either the <bpt id="p1">**</bpt>u<ept id="p1">**</ept> or <bpt id="p2">**</bpt>U<ept id="p2">**</ept> suffix.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To specify a long type, use either the <bpt id="p1">**</bpt>l<ept id="p1">**</ept> or <bpt id="p2">**</bpt>L<ept id="p2">**</ept> suffix.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To specify a 64-bit integral type, use the LL, or ll suffix.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The i64 suffix is still supported but should be avoided because it is specific to Microsoft and is not portable.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Digit separators<ept id="p1">**</ept>: You can use the single-quote character (apostrophe) to separate place values in larger numbers to make them easier for humans to read.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Separators have no effect on compilation.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Floating point literals</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Floating-point literals specify values that must have a fractional part.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>These values contain decimal points (<bpt id="p1">**</bpt>.<ept id="p1">**</ept>) and can contain exponents.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Floating-point literals have a "mantissa," which specifies the value of the number, an "exponent," which specifies the magnitude of the number, and an optional suffix that specifies the literal's type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The mantissa is specified as a sequence of digits followed by a period, followed by an optional sequence of digits representing the fractional part of the number.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The exponent, if present, specifies the magnitude of the number as a power of 10, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The exponent may be specified using <bpt id="p1">**</bpt>e<ept id="p1">**</ept> or <bpt id="p2">**</bpt>E<ept id="p2">**</ept>, which have the same meaning, followed by an optional sign (+ or -) and a sequence of digits.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If an exponent is present, the trailing decimal point is unnecessary in whole numbers such as <ph id="ph1">`18E0`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Floating-point literals default to type <bpt id="p1">**</bpt>double<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>By using the suffixes <bpt id="p1">**</bpt>f<ept id="p1">**</ept> or <bpt id="p2">**</bpt>l<ept id="p2">**</ept> (or <bpt id="p3">**</bpt>F<ept id="p3">**</ept> or <bpt id="p4">**</bpt>L<ept id="p4">**</ept> — the suffix is not case sensitive), the literal can be specified as <bpt id="p5">**</bpt>float<ept id="p5">**</ept> or <ph id="ph1">`long double`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Although <ph id="ph1">`long double`</ph> and <bpt id="p1">**</bpt>double<ept id="p1">**</ept> have the same representation, they are not the same type.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, you can have overloaded functions like</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>and</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Boolean literals</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The boolean literals are <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Pointer literal (C++11)</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>C++ introduces the <bpt id="p1">[</bpt>nullptr<ept id="p1">](../cpp/nullptr.md)</ept> literal to specify a zero-initialized pointer.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In portable code, <ph id="ph1">`nullptr`</ph> should be used instead of integral-type zero or macros such as NULL.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Binary literals (C++14)</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A binary literal can be specified by the use of the <ph id="ph1">`0B`</ph> or <ph id="ph2">`0b`</ph> prefix, followed by a sequence of 1's and 0's:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Avoid using literals as "magic constants"</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can use literals directly in expressions and statements although it's not always good programming practice:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the previous example, it might be better to use a named constant that conveys a clear meaning, for example "MAXIMUM_ERROR_THRESHOLD".</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>And if the return value "Success" is seen by end users, then it might be better to use a named string constant that can be stored in a single location in a file from where it can be localized into other languages.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Using named constants helps others as well as yourself to understand the intent of the code.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Lexical Conventions</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>C++ Integer Constants</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>C++ Character Literals</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>C++ Floating-Point Constants</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>C++ String Literals</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>C++ User-Defined Literals</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>