{"nodes":[{"pos":[12,58],"content":"enable_shared_from_this Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"enable_shared_from_this Class | Microsoft Docs","pos":[0,46]}]},{"content":"enable_shared_from_this Class","pos":[953,982]},{"pos":[983,1013],"content":"Helps generate a <ph id=\"ph1\">`shared_ptr`</ph>.","source":"Helps generate a `shared_ptr`."},{"content":"Syntax","pos":[1022,1028]},{"content":"Parameters","pos":[1398,1408]},{"content":"The type controlled by the shared pointer.","pos":[1420,1462]},{"content":"Remarks","pos":[1471,1478]},{"content":"Objects derived from <ph id=\"ph1\">`enable_shared_from_this`</ph> can use the <ph id=\"ph2\">`shared_from_this`</ph> methods in member functions to create <bpt id=\"p1\">[</bpt>shared_ptr<ept id=\"p1\">](../standard-library/shared-ptr-class.md)</ept> owners of the instance that share ownership with existing <ph id=\"ph3\">`shared_ptr`</ph> owners.","pos":[1482,1730],"source":"Objects derived from `enable_shared_from_this` can use the `shared_from_this` methods in member functions to create [shared_ptr](../standard-library/shared-ptr-class.md) owners of the instance that share ownership with existing `shared_ptr` owners."},{"content":"Otherwise, if you create a new <ph id=\"ph1\">`shared_ptr`</ph> by using <ph id=\"ph2\">`this`</ph>, it is distinct from existing <ph id=\"ph3\">`shared_ptr`</ph> owners, which can lead to invalid references or cause the object to be deleted more than once.","pos":[1731,1928],"source":" Otherwise, if you create a new `shared_ptr` by using `this`, it is distinct from existing `shared_ptr` owners, which can lead to invalid references or cause the object to be deleted more than once."},{"content":"The constructors, destructor, and assignment operator are protected to help prevent accidental misuse.","pos":[1935,2037]},{"content":"The template argument type <ph id=\"ph1\">`Ty`</ph> must be the type of the derived class.","pos":[2038,2108],"source":" The template argument type `Ty` must be the type of the derived class."},{"pos":[2115,2232],"content":"For an example of usage, see <bpt id=\"p1\">[</bpt>enable_shared_from_this::shared_from_this<ept id=\"p1\">](#enable_shared_from_this__shared_from_this)</ept>.","source":"For an example of usage, see [enable_shared_from_this::shared_from_this](#enable_shared_from_this__shared_from_this)."},{"content":"Requirements","pos":[2241,2253]},{"pos":[2257,2278],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>memory&gt;","source":"**Header:** \\<memory>"},{"pos":[2285,2303],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2371,2412],"content":"enable_shared_from_this::shared_from_this"},{"pos":[2416,2513],"content":"Generates a <ph id=\"ph1\">`shared_ptr`</ph> that shares ownership of the instance with existing <ph id=\"ph2\">`shared_ptr`</ph> owners.","source":"Generates a `shared_ptr` that shares ownership of the instance with existing `shared_ptr` owners."},{"content":"Remarks","pos":[2618,2625]},{"content":"When you derive objects from the <ph id=\"ph1\">`enable_shared_from_this`</ph> base class, the <ph id=\"ph2\">`shared_from_this`</ph> template member functions return a <bpt id=\"p1\">[</bpt>shared_ptr Class<ept id=\"p1\">](../standard-library/shared-ptr-class.md)</ept> object that shares ownership of this instance with existing <ph id=\"ph3\">`shared_ptr`</ph> owners.","pos":[2629,2898],"source":"When you derive objects from the `enable_shared_from_this` base class, the `shared_from_this` template member functions return a [shared_ptr Class](../standard-library/shared-ptr-class.md) object that shares ownership of this instance with existing `shared_ptr` owners."},{"content":"Otherwise, if you create a new <ph id=\"ph1\">`shared_ptr`</ph> from <ph id=\"ph2\">`this`</ph>, it is distinct from existing <ph id=\"ph3\">`shared_ptr`</ph> owners, which can lead to invalid references or cause the object to be deleted more than once.","pos":[2899,3092],"source":" Otherwise, if you create a new `shared_ptr` from `this`, it is distinct from existing `shared_ptr` owners, which can lead to invalid references or cause the object to be deleted more than once."},{"content":"The  behavior is undefined if you call <ph id=\"ph1\">`shared_from_this`</ph> on an instance that is not already owned by a <ph id=\"ph2\">`shared_ptr`</ph> object.","pos":[3093,3217],"source":" The  behavior is undefined if you call `shared_from_this` on an instance that is not already owned by a `shared_ptr` object."},{"content":"Example","pos":[3227,3234]},{"content":"See Also","pos":[3796,3804]},{"content":"enable_shared_from_this::shared_from_this","pos":[3809,3850]},{"content":"shared_ptr Class","pos":[3901,3917]}],"content":"---\ntitle: \"enable_shared_from_this Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"tr1.enable_shared_from_this\"\n  - \"enable_shared_from_this\"\n  - \"std.tr1.enable_shared_from_this\"\n  - \"memory/std::tr1::enable_shared_from_this\"\n  - \"std::tr1::enable_shared_from_this\"\n  - \"tr1::enable_shared_from_this\"\n  - \"std.enable_shared_from_this\"\n  - \"memory/std::enable_shared_from_this\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"enable_shared_from_this class\"\n  - \"enable_shared_from_this class [TR1]\"\nms.assetid: 9237603d-22e2-421f-b070-838ac006baf5\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# enable_shared_from_this Class\nHelps generate a `shared_ptr`.  \n  \n## Syntax  \n```    \nclass enable_shared_from_this {\npublic:\n    shared_ptr<Ty>\n        shared_from_this();\n    shared_ptr<const Ty> shared_from_this() const;\nprotected:\n    enable_shared_from_this();\n    enable_shared_from_this(const enable_shared_from_this&);\n    enable_shared_from_this& operator=(const enable_shared_from_this&);\n    ~enable_shared_from_this();\n}; \n``` \n#### Parameters  \n `Ty`  \n The type controlled by the shared pointer.  \n  \n## Remarks  \n Objects derived from `enable_shared_from_this` can use the `shared_from_this` methods in member functions to create [shared_ptr](../standard-library/shared-ptr-class.md) owners of the instance that share ownership with existing `shared_ptr` owners. Otherwise, if you create a new `shared_ptr` by using `this`, it is distinct from existing `shared_ptr` owners, which can lead to invalid references or cause the object to be deleted more than once.  \n  \n The constructors, destructor, and assignment operator are protected to help prevent accidental misuse. The template argument type `Ty` must be the type of the derived class.  \n  \n For an example of usage, see [enable_shared_from_this::shared_from_this](#enable_shared_from_this__shared_from_this).  \n  \n## Requirements  \n **Header:** \\<memory>  \n  \n **Namespace:** std  \n  \n##  <a name=\"enable_shared_from_this__shared_from_this\"></a>  enable_shared_from_this::shared_from_this  \n Generates a `shared_ptr` that shares ownership of the instance with existing `shared_ptr` owners.  \n  \n```  \nshared_ptr<T> shared_from_this();\nshared_ptr<const T> shared_from_this() const;\n```  \n  \n### Remarks  \n When you derive objects from the `enable_shared_from_this` base class, the `shared_from_this` template member functions return a [shared_ptr Class](../standard-library/shared-ptr-class.md) object that shares ownership of this instance with existing `shared_ptr` owners. Otherwise, if you create a new `shared_ptr` from `this`, it is distinct from existing `shared_ptr` owners, which can lead to invalid references or cause the object to be deleted more than once. The  behavior is undefined if you call `shared_from_this` on an instance that is not already owned by a `shared_ptr` object.  \n  \n### Example  \n  \n```cpp  \n// std_memory_shared_from_this.cpp   \n// compile with: /EHsc   \n#include <memory>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nstruct base : public std::enable_shared_from_this<base>  \n{  \n    int val;    \n    shared_ptr<base> share_more()  \n    {  \n        return shared_from_this();  \n    }  \n};  \n  \nint main()  \n{  \n    auto sp1 = make_shared<base>();  \n    auto sp2 = sp1->share_more();  \n  \n    sp1->val = 3;  \n    cout << \"sp2->val == \" << sp2->val << endl;    \n    return 0;  \n}   \n```  \n  \n```Output  \nsp2->val == 3  \n```  \n  \n## See Also  \n [enable_shared_from_this::shared_from_this](#enable_shared_from_this__shared_from_this)   \n [shared_ptr Class](../standard-library/shared-ptr-class.md)"}