{"nodes":[{"pos":[12,36],"content":"coclass | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"coclass | Microsoft Docs","pos":[0,24]}]},{"content":"coclass","pos":[610,617]},{"content":"Creates a COM object, which can implement a COM interface.","pos":[618,676]},{"content":"Syntax","pos":[685,691]},{"content":"Remarks","pos":[733,740]},{"pos":[744,828],"content":"The <bpt id=\"p1\">**</bpt>coclass<ept id=\"p1\">**</ept> C++ attribute places a coclass construct in the generated .idl file.","source":"The **coclass** C++ attribute places a coclass construct in the generated .idl file."},{"content":"When defining a coclass, you can also specify the <bpt id=\"p1\">[</bpt>uuid<ept id=\"p1\">](../windows/uuid-cpp-attributes.md)</ept>, <bpt id=\"p2\">[</bpt>version<ept id=\"p2\">](../windows/version-cpp.md)</ept>, <bpt id=\"p3\">[</bpt>threading<ept id=\"p3\">](../windows/threading-cpp.md)</ept>, <bpt id=\"p4\">[</bpt>vi_progid<ept id=\"p4\">](../windows/vi-progid.md)</ept>, and <bpt id=\"p5\">[</bpt>progid<ept id=\"p5\">](../windows/progid.md)</ept> attributes.","pos":[835,1092],"source":"When defining a coclass, you can also specify the [uuid](../windows/uuid-cpp-attributes.md), [version](../windows/version-cpp.md), [threading](../windows/threading-cpp.md), [vi_progid](../windows/vi-progid.md), and [progid](../windows/progid.md) attributes."},{"content":"If any one of them is not specified, it will be generated.","pos":[1093,1151]},{"content":"If two header files contain classes with the <bpt id=\"p1\">**</bpt>coclass<ept id=\"p1\">**</ept> attribute and don't specify a GUID, the compiler will use the same GUID for both classes, and that will result in a MIDL error.","pos":[1158,1342],"source":"If two header files contain classes with the **coclass** attribute and don't specify a GUID, the compiler will use the same GUID for both classes, and that will result in a MIDL error."},{"content":"Therefore, you should use the <ph id=\"ph1\">`uuid`</ph> attribute when you use <bpt id=\"p1\">**</bpt>coclass<ept id=\"p1\">**</ept>.","pos":[1344,1416],"source":"  Therefore, you should use the `uuid` attribute when you use **coclass**."},{"content":"ATL Projects","pos":[1425,1437]},{"content":"When this attribute precedes a class or structure definition in an ATL project, it:","pos":[1446,1529]},{"content":"Injects code or data to support auto registration for the object.","pos":[1539,1604]},{"content":"Injects code or data to support a COM class factory for the object.","pos":[1614,1681]},{"pos":[1691,1781],"content":"Injects code or data to implement <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> and make the object a COM-creatable object.","source":"Injects code or data to implement **IUnknown** and make the object a COM-creatable object."},{"content":"Specifically, the following base classes are added to the target object:","pos":[1788,1860]},{"pos":[1870,2001],"content":"<bpt id=\"p1\">[</bpt>CComCoClass Class<ept id=\"p1\">](../atl/reference/ccomcoclass-class.md)</ept> provides the default class factory and aggregation model for the object.","source":"[CComCoClass Class](../atl/reference/ccomcoclass-class.md) provides the default class factory and aggregation model for the object."},{"content":"<bpt id=\"p1\">[</bpt>CComObjectRootEx Class<ept id=\"p1\">](../atl/reference/ccomobjectrootex-class.md)</ept> has a template based on the threading model class specified by the <bpt id=\"p2\">[</bpt>threading<ept id=\"p2\">](../windows/threading-cpp.md)</ept> attribute.","pos":[2011,2198],"source":"[CComObjectRootEx Class](../atl/reference/ccomobjectrootex-class.md) has a template based on the threading model class specified by the [threading](../windows/threading-cpp.md) attribute."},{"content":"If the <bpt id=\"p1\">**</bpt>threading<ept id=\"p1\">**</ept> attribute is not specified, the default threading model is apartment.","pos":[2199,2289],"source":" If the **threading** attribute is not specified, the default threading model is apartment."},{"pos":[2299,2482],"content":"<bpt id=\"p1\">[</bpt>IProvideClassInfo2Impl<ept id=\"p1\">](../atl/reference/iprovideclassinfo2impl-class.md)</ept> is added if the <bpt id=\"p2\">[</bpt>noncreatable<ept id=\"p2\">](../windows/noncreatable.md)</ept> attribute is not specified for the target object.","source":"[IProvideClassInfo2Impl](../atl/reference/iprovideclassinfo2impl-class.md) is added if the [noncreatable](../windows/noncreatable.md) attribute is not specified for the target object."},{"content":"Finally, any dual interface that is not defined using embedded IDL is replaced with the corresponding <bpt id=\"p1\">[</bpt>IDispatchImpl<ept id=\"p1\">](../atl/reference/idispatchimpl-class.md)</ept> class.","pos":[2489,2654],"source":"Finally, any dual interface that is not defined using embedded IDL is replaced with the corresponding [IDispatchImpl](../atl/reference/idispatchimpl-class.md) class."},{"content":"If the dual interface is defined in embedded IDL, the particular interface in the base list is not modified.","pos":[2655,2763]},{"pos":[2770,2947],"content":"The <bpt id=\"p1\">**</bpt>coclass<ept id=\"p1\">**</ept> attribute also makes the following functions available via injected code, or in the case of <ph id=\"ph1\">`GetObjectCLSID`</ph>, as a static method in the base class <ph id=\"ph2\">`CComCoClass`</ph>:","source":"The **coclass** attribute also makes the following functions available via injected code, or in the case of `GetObjectCLSID`, as a static method in the base class `CComCoClass`:"},{"pos":[2974,3024],"content":"registers the class factories of the target class."},{"pos":[3050,3143],"content":", which is related to registration, can also be used to obtain the CLSID of the target class."},{"content":"<bpt id=\"p1\">**</bpt>GetObjectFriendlyName<ept id=\"p1\">**</ept> by default returns a string of the format \"<ph id=\"ph1\">\\&lt;</ph><bpt id=\"p2\">*</bpt>target class name<ept id=\"p2\">*</ept><ph id=\"ph2\">&gt; `Object`</ph>\".","pos":[3153,3255],"source":"**GetObjectFriendlyName** by default returns a string of the format \"\\<*target class name*> `Object`\"."},{"content":"If this function is already present, it is not added.","pos":[3256,3309]},{"content":"Add this function to the target class to return a friendlier name than the one automatically generated.","pos":[3310,3413]},{"pos":[3423,3551],"content":"<bpt id=\"p1\">**</bpt>GetProgID<ept id=\"p1\">**</ept>, which is related to registration, returns the string specified with the <bpt id=\"p2\">[</bpt>progid<ept id=\"p2\">](../windows/progid.md)</ept> attribute.","source":"**GetProgID**, which is related to registration, returns the string specified with the [progid](../windows/progid.md) attribute."},{"pos":[3561,3716],"content":"<bpt id=\"p1\">**</bpt>GetVersionIndependentProgID<ept id=\"p1\">**</ept> has the same functionality as <bpt id=\"p2\">**</bpt>GetProgID<ept id=\"p2\">**</ept>, but it returns the string specified with <bpt id=\"p3\">[</bpt>vi_progid<ept id=\"p3\">](../windows/vi-progid.md)</ept>.","source":"**GetVersionIndependentProgID** has the same functionality as **GetProgID**, but it returns the string specified with [vi_progid](../windows/vi-progid.md)."},{"content":"The following changes, which are related to the COM map, are made to the target class:","pos":[3723,3809]},{"pos":[3819,4084],"content":"A COM map is added with entries for all interfaces the target class derives from and all entries specified by the <bpt id=\"p1\">[</bpt>COM Interface Entry Points<ept id=\"p1\">](../mfc/com-interface-entry-points.md)</ept> attribute or those required by the <bpt id=\"p2\">[</bpt>aggregates<ept id=\"p2\">](../windows/aggregates.md)</ept> attribute.","source":"A COM map is added with entries for all interfaces the target class derives from and all entries specified by the [COM Interface Entry Points](../mfc/com-interface-entry-points.md) attribute or those required by the [aggregates](../windows/aggregates.md) attribute."},{"content":"An <bpt id=\"p1\">[</bpt>OBJECT_ENTRY_AUTO<ept id=\"p1\">](http://msdn.microsoft.com/Library/5a0f4fa5-0905-43d2-b337-e22f979c9e4c)</ept> macro is inserted into the COM map.","pos":[4094,4224],"source":"An [OBJECT_ENTRY_AUTO](http://msdn.microsoft.com/Library/5a0f4fa5-0905-43d2-b337-e22f979c9e4c) macro is inserted into the COM map."},{"content":"This macro is similar to <bpt id=\"p1\">[</bpt>OBJECT_ENTRY<ept id=\"p1\">](http://msdn.microsoft.com/en-us/abd10ee2-54f0-4f94-9ec2-ddf8f4c8c8cd)</ept> in terms of functionality but does not need to be part of the COM map of the target class.","pos":[4225,4425],"source":" This macro is similar to [OBJECT_ENTRY](http://msdn.microsoft.com/en-us/abd10ee2-54f0-4f94-9ec2-ddf8f4c8c8cd) in terms of functionality but does not need to be part of the COM map of the target class."},{"content":"The name of the coclass generated in the .idl file for the class will have the same name as the class.","pos":[4432,4534]},{"content":"For example, and referring to the following sample, to access the class ID for a coclass CMyClass, in a client through the MIDL-generated header file, use CLSID_CMyClass.","pos":[4536,4706]},{"content":"Example","pos":[4715,4722]},{"pos":[4726,4788],"content":"The following code shows how to use the <bpt id=\"p1\">**</bpt>coclass<ept id=\"p1\">**</ept> attribute:","source":"The following code shows how to use the **coclass** attribute:"},{"content":"The following sample shows how to override the default implementation of a function that appears in the code injected by the <bpt id=\"p1\">**</bpt>coclass<ept id=\"p1\">**</ept> attribute.","pos":[5188,5335],"source":"The following sample shows how to override the default implementation of a function that appears in the code injected by the **coclass** attribute."},{"content":"See <bpt id=\"p1\">[</bpt>/Fx<ept id=\"p1\">](../build/reference/fx-merge-injected-code.md)</ept> for more information on viewing injected code.","pos":[5336,5438],"source":" See [/Fx](../build/reference/fx-merge-injected-code.md) for more information on viewing injected code."},{"content":"Any base classes or interfaces that you use for a class will be appear in the injected code.","pos":[5439,5531]},{"content":"Further, if a class is included by default in the injected code and you explicitly specify that class as a base for your coclass, the attribute provider will use the form specified in your code.","pos":[5534,5728]},{"content":"Requirements","pos":[6780,6792]},{"content":"Attribute Context","pos":[6802,6819]},{"content":"Applies to","pos":[6842,6852]},{"pos":[6855,6865],"content":"<bpt id=\"p1\">**</bpt>class<ept id=\"p1\">**</ept>,","source":"**class**, "},{"content":"Repeatable","pos":[6881,6891]},{"content":"No","pos":[6894,6896]},{"content":"Required attributes","pos":[6903,6922]},{"content":"None","pos":[6925,6929]},{"content":"Invalid attributes","pos":[6936,6954]},{"content":"None","pos":[6957,6961]},{"pos":[6969,7079],"content":"For more information about the attribute contexts, see <bpt id=\"p1\">[</bpt>Attribute Contexts<ept id=\"p1\">](../windows/attribute-contexts.md)</ept>.","source":"For more information about the attribute contexts, see [Attribute Contexts](../windows/attribute-contexts.md)."},{"content":"See Also","pos":[7088,7096]},{"content":"IDL Attributes","pos":[7101,7115]},{"content":"COM Attributes","pos":[7152,7166]},{"content":"Class Attributes","pos":[7203,7219]},{"content":"Typedef, Enum, Union, and Struct Attributes","pos":[7258,7301]},{"content":"appobject","pos":[7364,7373]}],"content":"---\ntitle: \"coclass | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"vc-attr.coclass\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"coclass attribute\"\nms.assetid: 42da6a10-3af9-4b43-9a1d-689d00b61eb3\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# coclass\nCreates a COM object, which can implement a COM interface.  \n  \n## Syntax  \n  \n```  \n  \n[coclass]  \n  \n```  \n  \n## Remarks  \n The **coclass** C++ attribute places a coclass construct in the generated .idl file.  \n  \n When defining a coclass, you can also specify the [uuid](../windows/uuid-cpp-attributes.md), [version](../windows/version-cpp.md), [threading](../windows/threading-cpp.md), [vi_progid](../windows/vi-progid.md), and [progid](../windows/progid.md) attributes. If any one of them is not specified, it will be generated.  \n  \n If two header files contain classes with the **coclass** attribute and don't specify a GUID, the compiler will use the same GUID for both classes, and that will result in a MIDL error.  Therefore, you should use the `uuid` attribute when you use **coclass**.  \n  \n **ATL Projects**  \n  \n When this attribute precedes a class or structure definition in an ATL project, it:  \n  \n-   Injects code or data to support auto registration for the object.  \n  \n-   Injects code or data to support a COM class factory for the object.  \n  \n-   Injects code or data to implement **IUnknown** and make the object a COM-creatable object.  \n  \n Specifically, the following base classes are added to the target object:  \n  \n-   [CComCoClass Class](../atl/reference/ccomcoclass-class.md) provides the default class factory and aggregation model for the object.  \n  \n-   [CComObjectRootEx Class](../atl/reference/ccomobjectrootex-class.md) has a template based on the threading model class specified by the [threading](../windows/threading-cpp.md) attribute. If the **threading** attribute is not specified, the default threading model is apartment.  \n  \n-   [IProvideClassInfo2Impl](../atl/reference/iprovideclassinfo2impl-class.md) is added if the [noncreatable](../windows/noncreatable.md) attribute is not specified for the target object.  \n  \n Finally, any dual interface that is not defined using embedded IDL is replaced with the corresponding [IDispatchImpl](../atl/reference/idispatchimpl-class.md) class. If the dual interface is defined in embedded IDL, the particular interface in the base list is not modified.  \n  \n The **coclass** attribute also makes the following functions available via injected code, or in the case of `GetObjectCLSID`, as a static method in the base class `CComCoClass`:  \n  \n-   `UpdateRegistry` registers the class factories of the target class.  \n  \n-   `GetObjectCLSID`, which is related to registration, can also be used to obtain the CLSID of the target class.  \n  \n-   **GetObjectFriendlyName** by default returns a string of the format \"\\<*target class name*> `Object`\". If this function is already present, it is not added. Add this function to the target class to return a friendlier name than the one automatically generated.  \n  \n-   **GetProgID**, which is related to registration, returns the string specified with the [progid](../windows/progid.md) attribute.  \n  \n-   **GetVersionIndependentProgID** has the same functionality as **GetProgID**, but it returns the string specified with [vi_progid](../windows/vi-progid.md).  \n  \n The following changes, which are related to the COM map, are made to the target class:  \n  \n-   A COM map is added with entries for all interfaces the target class derives from and all entries specified by the [COM Interface Entry Points](../mfc/com-interface-entry-points.md) attribute or those required by the [aggregates](../windows/aggregates.md) attribute.  \n  \n-   An [OBJECT_ENTRY_AUTO](http://msdn.microsoft.com/Library/5a0f4fa5-0905-43d2-b337-e22f979c9e4c) macro is inserted into the COM map. This macro is similar to [OBJECT_ENTRY](http://msdn.microsoft.com/en-us/abd10ee2-54f0-4f94-9ec2-ddf8f4c8c8cd) in terms of functionality but does not need to be part of the COM map of the target class.  \n  \n The name of the coclass generated in the .idl file for the class will have the same name as the class.  For example, and referring to the following sample, to access the class ID for a coclass CMyClass, in a client through the MIDL-generated header file, use CLSID_CMyClass.  \n  \n## Example  \n The following code shows how to use the **coclass** attribute:  \n  \n```  \n// cpp_attr_ref_coclass1.cpp  \n// compile with: /LD  \n#include \"unknwn.h\"  \n[module(name=\"MyLib\")];  \n  \n[ object, uuid(\"00000000-0000-0000-0000-000000000001\") ]  \n__interface I {  \n   HRESULT func();  \n};  \n  \n[coclass, progid(\"MyCoClass.coclass.1\"), vi_progid(\"MyCoClass.coclass\"),   \nappobject, uuid(\"9E66A294-4365-11D2-A997-00C04FA37DDB\")]  \nclass CMyClass : public I {};  \n```  \n  \n The following sample shows how to override the default implementation of a function that appears in the code injected by the **coclass** attribute. See [/Fx](../build/reference/fx-merge-injected-code.md) for more information on viewing injected code. Any base classes or interfaces that you use for a class will be appear in the injected code.   Further, if a class is included by default in the injected code and you explicitly specify that class as a base for your coclass, the attribute provider will use the form specified in your code.  \n  \n```  \n// cpp_attr_ref_coclass2.cpp  \n// compile with: /LD  \n#include <atlbase.h>  \n#include <atlcom.h>  \n#include <atlwin.h>  \n#include <atltypes.h>  \n#include <atlctl.h>  \n#include <atlhost.h>  \n#include <atlplus.h>  \n  \n[module(name=\"MyLib\")];  \n  \n[object, uuid(\"00000000-0000-0000-0000-000000000000\")]  \n__interface bb {};  \n  \n[coclass, uuid(\"00000000-0000-0000-0000-000000000001\")]  \nclass CMyClass : public bb {  \npublic:  \n   // by adding the definition of UpdateRegistry to your code,   \n   // the function will not be included in the injected code  \n   static HRESULT WINAPI UpdateRegistry(BOOL bRegister) {  \n      // you can add to the default implementation  \n      CRegistryVirtualMachine rvm;  \n      HRESULT hr;  \n      if (FAILED(hr = rvm.AddStandardReplacements()))  \n         return hr;  \n      rvm.AddReplacement(_T(\"FriendlyName\"), GetObjectFriendlyName());  \n      return rvm.VMUpdateRegistry(GetOpCodes(), GetOpcodeStringVals(),  \n         GetOpcodeDWORDVals(), GetOpcodeBinaryVals(), bRegister);  \n   }  \n};  \n```  \n  \n## Requirements  \n  \n### Attribute Context  \n  \n|||  \n|-|-|  \n|**Applies to**|**class**, `struct`|  \n|**Repeatable**|No|  \n|**Required attributes**|None|  \n|**Invalid attributes**|None|  \n  \n For more information about the attribute contexts, see [Attribute Contexts](../windows/attribute-contexts.md).  \n  \n## See Also  \n [IDL Attributes](../windows/idl-attributes.md)   \n [COM Attributes](../windows/com-attributes.md)   \n [Class Attributes](../windows/class-attributes.md)   \n [Typedef, Enum, Union, and Struct Attributes](../windows/typedef-enum-union-and-struct-attributes.md)   \n [appobject](../windows/appobject.md)"}