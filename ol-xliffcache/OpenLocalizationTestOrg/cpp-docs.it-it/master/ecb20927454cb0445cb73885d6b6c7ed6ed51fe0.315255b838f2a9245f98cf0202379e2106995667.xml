{"nodes":[{"pos":[12,91],"content":"strncat, _strncat_l, wcsncat, _wcsncat_l, _mbsncat, _mbsncat_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"strncat, _strncat_l, wcsncat, _wcsncat_l, _mbsncat, _mbsncat_l | Microsoft Docs","pos":[0,79]}]},{"content":"strncat, _strncat_l, wcsncat, _wcsncat_l, _mbsncat, _mbsncat_l","pos":[1775,1837]},{"content":"Appends characters of a string.","pos":[1838,1869]},{"content":"More secure versions of these functions are available, see <bpt id=\"p1\">[</bpt>strncat_s, _strncat_s_l, wcsncat_s, _wcsncat_s_l, _mbsncat_s, _mbsncat_s_l<ept id=\"p1\">](../../c-runtime-library/reference/strncat-s-strncat-s-l-wcsncat-s-wcsncat-s-l-mbsncat-s-mbsncat-s-l.md)</ept> .","pos":[1870,2111],"source":" More secure versions of these functions are available, see [strncat_s, _strncat_s_l, wcsncat_s, _wcsncat_s_l, _mbsncat_s, _mbsncat_s_l](../../c-runtime-library/reference/strncat-s-strncat-s-l-wcsncat-s-wcsncat-s-l-mbsncat-s-mbsncat-s-l.md) ."},{"pos":[2119,2358],"content":"[!IMPORTANT]\n `_mbsncat` and `_mbsncat_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" and `_mbsncat_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[24,237],"nodes":[{"content":"and <ph id=\"ph1\">`_mbsncat_l`</ph> cannot be used in applications that execute in the Windows Runtime.","pos":[1,85],"source":" and `_mbsncat_l` cannot be used in applications that execute in the Windows Runtime."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[86,213],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[2367,2373]},{"content":"Parameters","pos":[3467,3477]},{"content":"Null-terminated destination string.","pos":[3494,3529]},{"content":"Null-terminated source string.","pos":[3551,3581]},{"content":"Number of characters to append.","pos":[3599,3630]},{"content":"Locale to use.","pos":[3649,3663]},{"content":"Return Value","pos":[3672,3684]},{"content":"Returns a pointer to the destination string.","pos":[3688,3732]},{"content":"No return value is reserved to indicate an error.","pos":[3733,3782]},{"content":"Remarks","pos":[3791,3798]},{"content":"The <ph id=\"ph1\">`strncat`</ph> function appends, at most, the first <ph id=\"ph2\">`count`</ph> characters of <ph id=\"ph3\">`strSource`</ph> to <ph id=\"ph4\">`strDest`</ph>.","pos":[3802,3900],"source":"The `strncat` function appends, at most, the first `count` characters of `strSource` to `strDest`."},{"content":"The initial character of <ph id=\"ph1\">`strSource`</ph> overwrites the terminating null character of <ph id=\"ph2\">`strDest`</ph>.","pos":[3901,3993],"source":" The initial character of `strSource` overwrites the terminating null character of `strDest`."},{"content":"If a null character appears in <ph id=\"ph1\">`strSource`</ph> before <ph id=\"ph2\">`count`</ph> characters are appended, <ph id=\"ph3\">`strncat`</ph> appends all characters from <ph id=\"ph4\">`strSource`</ph>, up to the null character.","pos":[3994,4153],"source":" If a null character appears in `strSource` before `count` characters are appended, `strncat` appends all characters from `strSource`, up to the null character."},{"content":"If <ph id=\"ph1\">`count`</ph> is greater than the length of <ph id=\"ph2\">`strSource`</ph>, the length of <ph id=\"ph3\">`strSource`</ph> is used in place of <ph id=\"ph4\">`count`</ph>.","pos":[4154,4262],"source":" If `count` is greater than the length of `strSource`, the length of `strSource` is used in place of `count`."},{"content":"The all cases, the resulting string is terminated with a null character.","pos":[4263,4335]},{"content":"If copying takes place between strings that overlap, the behavior is undefined.","pos":[4336,4415]},{"pos":[4423,4801],"content":"[!IMPORTANT]\n `strncat` does not check for sufficient space in `strDest`; it is therefore a potential cause of buffer overruns. Keep in mind that `count` limits the number of characters appended; it is not a limit on the size of `strDest`. See the example below. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","leadings":["","> "],"nodes":[{"content":" does not check for sufficient space in `strDest`; it is therefore a potential cause of buffer overruns. Keep in mind that `count` limits the number of characters appended; it is not a limit on the size of `strDest`. See the example below. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).","pos":[23,376],"nodes":[{"content":"does not check for sufficient space in <ph id=\"ph1\">`strDest`</ph>; it is therefore a potential cause of buffer overruns.","pos":[1,104],"source":" does not check for sufficient space in `strDest`; it is therefore a potential cause of buffer overruns."},{"content":"Keep in mind that <ph id=\"ph1\">`count`</ph> limits the number of characters appended; it is not a limit on the size of <ph id=\"ph2\">`strDest`</ph>.","pos":[105,216],"source":" Keep in mind that `count` limits the number of characters appended; it is not a limit on the size of `strDest`."},{"content":"See the example below.","pos":[217,239]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[240,353],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."}]}]},{"content":"and <ph id=\"ph1\">`_mbsncat`</ph> are wide-character and multibyte-character versions of <ph id=\"ph2\">`strncat`</ph>.","pos":[4818,4898],"source":" and `_mbsncat` are wide-character and multibyte-character versions of `strncat`."},{"content":"The string arguments and return value of <ph id=\"ph1\">`wcsncat`</ph> are wide-character strings; those of <ph id=\"ph2\">`_mbsncat`</ph> are multibyte-character strings.","pos":[4899,5030],"source":" The string arguments and return value of `wcsncat` are wide-character strings; those of `_mbsncat` are multibyte-character strings."},{"content":"These three functions behave identically otherwise.","pos":[5031,5082]},{"content":"The output value is affected by the setting of the <ph id=\"ph1\">`LC_CTYPE`</ph> category setting of the locale; see <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept> for more information.","pos":[5089,5279],"source":"The output value is affected by the setting of the `LC_CTYPE` category setting of the locale; see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md) for more information."},{"content":"The versions of these functions without the <ph id=\"ph1\">`_l`</ph> suffix use the current locale for this locale-dependent behavior; the versions with the <ph id=\"ph2\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead.","pos":[5280,5503],"source":" The versions of these functions without the `_l` suffix use the current locale for this locale-dependent behavior; the versions with the `_l` suffix are identical except that they use the locale parameter passed in instead."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[5504,5574],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"content":"In C++, these functions have template overloads.","pos":[5581,5629]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[5630,5738],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Generic-Text Routine Mappings","pos":[5748,5777]},{"content":"TCHAR.H routine","pos":[5784,5799]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[5800,5828],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[5829,5842]},{"content":"_UNICODE defined","pos":[5843,5859]},{"pos":[6080,6239],"content":"[!NOTE]\n `_strncat_l` and `_wcsncat_l` have no locale dependence and are not meant to be called directly. They are provided for internal use by `_tcsncat_l`.","leadings":["","> "],"nodes":[{"content":" and `_wcsncat_l` have no locale dependence and are not meant to be called directly. They are provided for internal use by `_tcsncat_l`.","pos":[21,157],"nodes":[{"content":"and <ph id=\"ph1\">`_wcsncat_l`</ph> have no locale dependence and are not meant to be called directly.","pos":[1,84],"source":" and `_wcsncat_l` have no locale dependence and are not meant to be called directly."},{"content":"They are provided for internal use by <ph id=\"ph1\">`_tcsncat_l`</ph>.","pos":[85,136],"source":" They are provided for internal use by `_tcsncat_l`."}]}]},{"content":"Requirements","pos":[6248,6260]},{"content":"Routine","pos":[6267,6274]},{"content":"Required header","pos":[6275,6290]},{"content":"string.h&gt;","pos":[6347,6356],"source":"string.h>"},{"content":"string.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[6373,6396],"source":"string.h> or \\<wchar.h>"},{"content":"mbstring.h&gt;","pos":[6414,6425],"source":"mbstring.h>"},{"content":"mbstring.h&gt;","pos":[6445,6456],"source":"mbstring.h>"},{"pos":[6464,6568],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[6577,6584]},{"content":"Output","pos":[7623,7629]},{"pos":[7841,7887],"content":"Note that <ph id=\"ph1\">`BadAppend`</ph> caused a buffer overrun.","source":"Note that `BadAppend` caused a buffer overrun."},{"content":".NET Framework Equivalent","pos":[7896,7921]},{"content":"System::String::Concat","pos":[7926,7948]},{"content":"See Also","pos":[8026,8034]},{"content":"String Manipulation","pos":[8039,8058]},{"content":"_mbsnbcat, _mbsnbcat_l","pos":[8117,8139]},{"content":"strcat, wcscat, _mbscat","pos":[8204,8227]},{"content":"strcmp, wcscmp, _mbscmp","pos":[8293,8316]},{"content":"strcpy, wcscpy, _mbscpy","pos":[8382,8405]},{"content":"strncmp, wcsncmp, _mbsncmp, _mbsncmp_l","pos":[8471,8509]},{"content":"strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l","pos":[8588,8650]},{"content":"_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l","pos":[8749,8819]},{"content":"strrchr, wcsrchr, _mbsrchr, _mbsrchr_l","pos":[8924,8962]},{"content":"_strset, _strset_l, _wcsset, _wcsset_l, _mbsset, _mbsset_l","pos":[9041,9099]},{"content":"strspn, wcsspn, _mbsspn, _mbsspn_l","pos":[9192,9226]},{"content":"Locale","pos":[9301,9307]},{"content":"Interpretation of Multibyte-Character Sequences","pos":[9349,9396]}],"content":"---\ntitle: \"strncat, _strncat_l, wcsncat, _wcsncat_l, _mbsncat, _mbsncat_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"strncat\"\n  - \"_strncat_l\"\n  - \"_mbsncat\"\n  - \"_mbsncat_l\"\n  - \"wcsncat\"\n  - \"wcsncat_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-multibyte-l1-1-0.dll\"\n  - \"api-ms-win-crt-string-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_tcsncat_l\"\n  - \"_wcsncat_l\"\n  - \"_tcsnccat_l\"\n  - \"_mbsncat\"\n  - \"_strncat_l\"\n  - \"strncat\"\n  - \"_tcsnccat\"\n  - \"_mbsncat_l\"\n  - \"_ftcsncat\"\n  - \"wcsncat\"\n  - \"_tcsncat\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"concatenating strings\"\n  - \"ftcsncat function\"\n  - \"tcsncat_l function\"\n  - \"_tcsnccat_l function\"\n  - \"_tcsncat function\"\n  - \"strncat function\"\n  - \"_ftcsncat function\"\n  - \"mbsncat function\"\n  - \"mbsncat_l function\"\n  - \"strings [C++], appending\"\n  - \"wcsncat function\"\n  - \"tcsnccat function\"\n  - \"tcsnccat_l function\"\n  - \"_tcsnccat function\"\n  - \"string concatenation [C++]\"\n  - \"appending strings\"\n  - \"characters [C++], appending to strings\"\n  - \"_mbsncat function\"\n  - \"_tcsncat_l function\"\n  - \"_mbsncat_l function\"\n  - \"tcsncat function\"\nms.assetid: de67363b-68c6-4ca5-91e3-478610ad8159\ncaps.latest.revision: 27\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# strncat, _strncat_l, wcsncat, _wcsncat_l, _mbsncat, _mbsncat_l\nAppends characters of a string. More secure versions of these functions are available, see [strncat_s, _strncat_s_l, wcsncat_s, _wcsncat_s_l, _mbsncat_s, _mbsncat_s_l](../../c-runtime-library/reference/strncat-s-strncat-s-l-wcsncat-s-wcsncat-s-l-mbsncat-s-mbsncat-s-l.md) .  \n  \n> [!IMPORTANT]\n>  `_mbsncat` and `_mbsncat_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nchar *strncat(  \n   char *strDest,  \n   const char *strSource,  \n   size_t count   \n);  \nwchar_t *wcsncat(  \n   wchar_t *strDest,  \n   const wchar_t *strSource,  \n   size_t count   \n);  \nunsigned char *_mbsncat(  \n   unsigned char *strDest,  \n   const unsigned char *strSource,  \n   size_t count  \n);  \nunsigned char *_mbsncat_l(  \n   unsigned char *strDest,  \n   const unsigned char *strSource,  \n   size_t count,  \n   _locale_t locale  \n);  \ntemplate <size_t size>  \nchar *strncat(  \n   char (&strDest)[size],  \n   const char *strSource,  \n   size_t count   \n); // C++ only  \ntemplate <size_t size>  \nwchar_t *wcsncat(  \n   wchar_t (&strDest)[size],  \n   const wchar_t *strSource,  \n   size_t count   \n); // C++ only  \ntemplate <size_t size>  \nunsigned char *_mbsncat(  \n   unsigned char (&strDest)[size],  \n   const unsigned char *strSource,  \n   size_t count  \n); // C++ only  \ntemplate <size_t size>  \nunsigned char *_mbsncat_l(  \n   unsigned char (&strDest)[size],  \n   const unsigned char *strSource,  \n   size_t count,  \n   _locale_t locale  \n); // C++ only  \n```  \n  \n#### Parameters  \n `strDest`  \n Null-terminated destination string.  \n  \n `strSource`  \n Null-terminated source string.  \n  \n `count`  \n Number of characters to append.  \n  \n `locale`  \n Locale to use.  \n  \n## Return Value  \n Returns a pointer to the destination string. No return value is reserved to indicate an error.  \n  \n## Remarks  \n The `strncat` function appends, at most, the first `count` characters of `strSource` to `strDest`. The initial character of `strSource` overwrites the terminating null character of `strDest`. If a null character appears in `strSource` before `count` characters are appended, `strncat` appends all characters from `strSource`, up to the null character. If `count` is greater than the length of `strSource`, the length of `strSource` is used in place of `count`. The all cases, the resulting string is terminated with a null character. If copying takes place between strings that overlap, the behavior is undefined.  \n  \n> [!IMPORTANT]\n>  `strncat` does not check for sufficient space in `strDest`; it is therefore a potential cause of buffer overruns. Keep in mind that `count` limits the number of characters appended; it is not a limit on the size of `strDest`. See the example below. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n `wcsncat` and `_mbsncat` are wide-character and multibyte-character versions of `strncat`. The string arguments and return value of `wcsncat` are wide-character strings; those of `_mbsncat` are multibyte-character strings. These three functions behave identically otherwise.  \n  \n The output value is affected by the setting of the `LC_CTYPE` category setting of the locale; see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md) for more information. The versions of these functions without the `_l` suffix use the current locale for this locale-dependent behavior; the versions with the `_l` suffix are identical except that they use the locale parameter passed in instead. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n In C++, these functions have template overloads. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tcsncat`|`strncat`|`_mbsnbcat`|`wcsncat`|  \n|`_tcsncat_l`|`_strncat_l`|`_mbsnbcat_l`|`_wcsncat_l`|  \n  \n> [!NOTE]\n>  `_strncat_l` and `_wcsncat_l` have no locale dependence and are not meant to be called directly. They are provided for internal use by `_tcsncat_l`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`strncat`|\\<string.h>|  \n|`wcsncat`|\\<string.h> or \\<wchar.h>|  \n|`_mbsncat`|\\<mbstring.h>|  \n|`_mbsncat_l`|\\<mbstring.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_strncat.c  \n// Use strcat and strncat to append to a string.  \n#include <stdlib.h>  \n  \n#define MAXSTRINGLEN 39  \n  \nchar string[MAXSTRINGLEN+1];  \n// or char *string = malloc(MAXSTRINGLEN+1);  \n  \nvoid BadAppend( char suffix[], int n )  \n{  \n   strncat( string, suffix, n );  \n}  \n  \nvoid GoodAppend( char suffix[], size_t n )  \n{  \n   strncat( string, suffix, __min( n, MAXSTRINGLEN-strlen(string)) );  \n}  \n  \nint main( void )  \n{  \n   string[0] = '\\0';  \n   printf( \"string can hold up to %d characters\\n\", MAXSTRINGLEN );  \n  \n   strcpy( string, \"This is the initial string!\" );  \n   // concatenate up to 20 characters...  \n   BadAppend( \"Extra text to add to the string...\", 20 );  \n   printf( \"After BadAppend :  %s (%d chars)\\n\", string, strlen(string) );  \n  \n   strcpy( string, \"This is the initial string!\" );  \n   // concatenate up to 20 characters...  \n   GoodAppend( \"Extra text to add to the string...\", 20 );  \n   printf( \"After GoodAppend:  %s (%d chars)\\n\", string, strlen(string) );  \n}  \n```  \n  \n## Output  \n  \n```  \nstring can hold up to 39 characters  \nAfter BadAppend :  This is the initial string!Extra text to add to (47 chars)  \nAfter GoodAppend:  This is the initial string!Extra text t (39 chars)  \n```  \n  \n Note that `BadAppend` caused a buffer overrun.  \n  \n## .NET Framework Equivalent  \n [System::String::Concat](https://msdn.microsoft.com/en-us/library/system.string.concat.aspx)  \n  \n## See Also  \n [String Manipulation](../../c-runtime-library/string-manipulation-crt.md)   \n [_mbsnbcat, _mbsnbcat_l](../../c-runtime-library/reference/mbsnbcat-mbsnbcat-l.md)   \n [strcat, wcscat, _mbscat](../../c-runtime-library/reference/strcat-wcscat-mbscat.md)   \n [strcmp, wcscmp, _mbscmp](../../c-runtime-library/reference/strcmp-wcscmp-mbscmp.md)   \n [strcpy, wcscpy, _mbscpy](../../c-runtime-library/reference/strcpy-wcscpy-mbscpy.md)   \n [strncmp, wcsncmp, _mbsncmp, _mbsncmp_l](../../c-runtime-library/reference/strncmp-wcsncmp-mbsncmp-mbsncmp-l.md)   \n [strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l](../../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md)   \n [_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l](../../c-runtime-library/reference/strnicmp-wcsnicmp-mbsnicmp-strnicmp-l-wcsnicmp-l-mbsnicmp-l.md)   \n [strrchr, wcsrchr, _mbsrchr, _mbsrchr_l](../../c-runtime-library/reference/strrchr-wcsrchr-mbsrchr-mbsrchr-l.md)   \n [_strset, _strset_l, _wcsset, _wcsset_l, _mbsset, _mbsset_l](../../c-runtime-library/reference/strset-strset-l-wcsset-wcsset-l-mbsset-mbsset-l.md)   \n [strspn, wcsspn, _mbsspn, _mbsspn_l](../../c-runtime-library/reference/strspn-wcsspn-mbsspn-mbsspn-l.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)"}