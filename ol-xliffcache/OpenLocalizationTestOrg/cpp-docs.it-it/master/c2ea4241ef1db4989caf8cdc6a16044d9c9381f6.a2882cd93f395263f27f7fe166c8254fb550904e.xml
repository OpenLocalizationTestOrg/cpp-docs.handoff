{"nodes":[{"pos":[12,53],"content":"&lt;chrono&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>chrono<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,41],"source":"&lt;chrono&gt; operators | Microsoft Docs"}]},{"pos":[255,279],"content":"&lt;chrono&gt; operators","linkify":"&lt;chrono&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>chrono<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,24],"source":"&lt;chrono&gt; operators"}]},{"pos":[298,333],"content":"<bpt id=\"p1\">[</bpt>operator modulo<ept id=\"p1\">](#operator_modulo)</ept>","source":"[operator modulo](#operator_modulo)"},{"pos":[334,361],"content":"<bpt id=\"p1\">[</bpt>operator!=<ept id=\"p1\">](#operator_neq)</ept>","source":"[operator!=](#operator_neq)"},{"pos":[362,391],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">](#operator_gt_)</ept>","source":"[operator&gt;](#operator_gt_)"},{"pos":[396,429],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_gt__eq)</ept>","source":"[operator&gt;=](#operator_gt__eq)"},{"pos":[430,459],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#operator_lt_)</ept>","source":"[operator&lt;](#operator_lt_)"},{"pos":[460,493],"content":"<bpt id=\"p1\">[</bpt>operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#operator_lt__eq)</ept>","source":"[operator&lt;=](#operator_lt__eq)"},{"pos":[498,525],"content":"<bpt id=\"p1\">[</bpt>operator*<ept id=\"p1\">](#operator_star)</ept>","source":"[operator*](#operator_star)"},{"pos":[526,552],"content":"<bpt id=\"p1\">[</bpt>operator+<ept id=\"p1\">](#operator_add)</ept>","source":"[operator+](#operator_add)"},{"pos":[553,576],"content":"<bpt id=\"p1\">[</bpt>operator-<ept id=\"p1\">](#operator-)</ept>","source":"[operator-](#operator-)"},{"pos":[581,604],"content":"<bpt id=\"p1\">[</bpt>operator/<ept id=\"p1\">](#operator_)</ept>","source":"[operator/](#operator_)"},{"pos":[605,634],"content":"<bpt id=\"p1\">[</bpt>operator==<ept id=\"p1\">](#operator_eq_eq)</ept>","source":"[operator==](#operator_eq_eq)"},{"pos":[645,680],"content":"<bpt id=\"p1\">&lt;a name=\"operator-\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator-","linkify":"<a name=\"operator-\"></a>  operator-","source":"<a name=\"operator-\"></a>  operator-"},{"pos":[684,840],"content":"Operator for subtraction or negation of <bpt id=\"p1\">[</bpt>duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> and <bpt id=\"p2\">[</bpt>time_point<ept id=\"p2\">](../standard-library/time-point-class.md)</ept> objects.","source":"Operator for subtraction or negation of [duration](../standard-library/duration-class.md) and [time_point](../standard-library/time-point-class.md) objects."},{"pos":[1634,1644],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[1658,1701],"source":" The left `duration` or `time_point` object."},{"content":"The right <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[1719,1763],"source":" The right `duration` or `time_point` object."},{"content":"A <ph id=\"ph1\">`time_point`</ph> object.","pos":[1780,1802],"source":" A `time_point` object."},{"content":"A <ph id=\"ph1\">`duration`</ph> object.","pos":[1818,1838],"source":" A `duration` object."},{"pos":[1848,1860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1864,1999],"content":"The first function returns a <ph id=\"ph1\">`duration`</ph> object whose interval length is the difference between the time intervals of the two arguments.","source":"The first function returns a `duration` object whose interval length is the difference between the time intervals of the two arguments."},{"pos":[2006,2225],"content":"The second function returns a <ph id=\"ph1\">`time_point`</ph> object that represents a point in time that is displaced, by the negation of the time interval that is represented by <ph id=\"ph2\">`Dur`</ph>, from the point in time that is specified by <ph id=\"ph3\">`Time`</ph>.","source":"The second function returns a `time_point` object that represents a point in time that is displaced, by the negation of the time interval that is represented by `Dur`, from the point in time that is specified by `Time`."},{"pos":[2232,2340],"content":"The third function returns a <ph id=\"ph1\">`duration`</ph> object that represents the time interval between <ph id=\"ph2\">`Left`</ph> and <ph id=\"ph3\">`Right`</ph>.","source":"The third function returns a `duration` object that represents the time interval between `Left` and `Right`."},{"pos":[2350,2389],"content":"<bpt id=\"p1\">&lt;a name=\"operator_neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator!=","linkify":"<a name=\"operator_neq\"></a>  operator!=","source":"<a name=\"operator_neq\"></a>  operator!="},{"pos":[2393,2532],"content":"Inequality operator for <bpt id=\"p1\">[</bpt>duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> or <bpt id=\"p2\">[</bpt>time_point<ept id=\"p2\">](../standard-library/time-point-class.md)</ept> objects.","source":"Inequality operator for [duration](../standard-library/duration-class.md) or [time_point](../standard-library/time-point-class.md) objects."},{"pos":[2921,2931],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[2945,2988],"source":" The left `duration` or `time_point` object."},{"content":"The right <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[3006,3050],"source":" The right `duration` or `time_point` object."},{"pos":[3060,3072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3076,3117],"content":"Each function returns <ph id=\"ph1\">`!(Left == Right)`</ph>.","source":"Each function returns `!(Left == Right)`."},{"pos":[3127,3166],"content":"<bpt id=\"p1\">&lt;a name=\"operator_star\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator*","linkify":"<a name=\"operator_star\"></a>  operator*","source":"<a name=\"operator_star\"></a>  operator*"},{"pos":[3170,3272],"content":"Multiplication operator for <bpt id=\"p1\">[</bpt>duration<ept id=\"p1\">](../standard-library/chrono-operators.md#operator_star)</ept> objects.","source":"Multiplication operator for [duration](../standard-library/chrono-operators.md#operator_star) objects."},{"pos":[3713,3723],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`duration`</ph> object.","pos":[3736,3756],"source":" A `duration` object."},{"content":"An integral value.","pos":[3773,3791]},{"pos":[3801,3813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3817,3925],"content":"Each function returns a <ph id=\"ph1\">`duration`</ph> object whose interval length is <ph id=\"ph2\">`Mult`</ph> multiplied by the length of <ph id=\"ph3\">`Dur`</ph>.","source":"Each function returns a `duration` object whose interval length is `Mult` multiplied by the length of `Dur`."},{"content":"Unless <ph id=\"ph1\">`is_convertible&lt;Rep2, common_type&lt;Rep1, Rep2&gt;&gt;`</ph><bpt id=\"p1\">*</bpt>holds true<ept id=\"p1\">*</ept>, the first function does not participate in overload resolution.","pos":[3932,4063],"source":"Unless `is_convertible<Rep2, common_type<Rep1, Rep2>>`*holds true*, the first function does not participate in overload resolution."},{"content":"For more information, sssee <bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept>.","pos":[4064,4144],"source":" For more information, sssee [<type_traits>](../standard-library/type-traits.md)."},{"content":"Unless <ph id=\"ph1\">`is_convertible&lt;Rep1, common_type&lt;Rep1, Rep2&gt;&gt;`</ph><bpt id=\"p1\">*</bpt>holds true<ept id=\"p1\">*</ept>, the second function does not participate in overload resolution.","pos":[4151,4283],"source":"Unless `is_convertible<Rep1, common_type<Rep1, Rep2>>`*holds true*, the second function does not participate in overload resolution."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept>.","pos":[4284,4362],"source":" For more information, see [<type_traits>](../standard-library/type-traits.md)."},{"pos":[4372,4407],"content":"<bpt id=\"p1\">&lt;a name=\"operator_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator/","linkify":"<a name=\"operator_\"></a>  operator/","source":"<a name=\"operator_\"></a>  operator/"},{"pos":[4411,4507],"content":"Division operator for <bpt id=\"p1\">[</bpt>duration<ept id=\"p1\">](../standard-library/chrono-operators.md#operator_star)</ept> objects.","source":"Division operator for [duration](../standard-library/chrono-operators.md#operator_star) objects."},{"pos":[4953,4963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`duration`</ph> object.","pos":[4976,4996],"source":" A `duration` object."},{"content":"An integral value.","pos":[5012,5030]},{"content":"The left <ph id=\"ph1\">`duration`</ph> object.","pos":[5047,5074],"source":" The left `duration` object."},{"content":"The right <ph id=\"ph1\">`duration`</ph> object.","pos":[5092,5120],"source":" The right `duration` object."},{"pos":[5130,5142],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5146,5263],"content":"The first operator returns a duration object whose interval length is the length of <ph id=\"ph1\">`Dur`</ph> divided by the value <ph id=\"ph2\">`Div`</ph>.","source":"The first operator returns a duration object whose interval length is the length of `Dur` divided by the value `Div`."},{"pos":[5270,5354],"content":"The second operator returns the ratio of the interval lengths of <ph id=\"ph1\">`Left`</ph> and <ph id=\"ph2\">`Right`</ph>.","source":"The second operator returns the ratio of the interval lengths of `Left` and `Right`."},{"content":"Unless <ph id=\"ph1\">`is_convertible&lt;Rep2, common_type&lt;Rep1, Rep2&gt;&gt;`</ph><bpt id=\"p1\">*</bpt>holds true<ept id=\"p1\">*</ept>, and <ph id=\"ph2\">`Rep2`</ph> is not an instantiation of <ph id=\"ph3\">`duration`</ph>, the first operator does not participate in overload resolution.","pos":[5361,5542],"source":"Unless `is_convertible<Rep2, common_type<Rep1, Rep2>>`*holds true*, and `Rep2` is not an instantiation of `duration`, the first operator does not participate in overload resolution."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>&lt;type_traits&gt;<ept id=\"p1\">](../standard-library/type-traits.md)</ept>.","pos":[5543,5621],"source":" For more information, see [<type_traits>](../standard-library/type-traits.md)."},{"pos":[5631,5669],"content":"<bpt id=\"p1\">&lt;a name=\"operator_add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator+","linkify":"<a name=\"operator_add\"></a>  operator+","source":"<a name=\"operator_add\"></a>  operator+"},{"pos":[5673,5794],"content":"Adds <bpt id=\"p1\">[</bpt>duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> and <bpt id=\"p2\">[</bpt>time_point<ept id=\"p2\">](../standard-library/time-point-class.md)</ept> objects.","source":"Adds [duration](../standard-library/duration-class.md) and [time_point](../standard-library/time-point-class.md) objects."},{"pos":[6619,6629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[6643,6686],"source":" The left `duration` or `time_point` object."},{"content":"The right <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[6704,6748],"source":" The right `duration` or `time_point` object."},{"content":"A <ph id=\"ph1\">`time_point`</ph> object.","pos":[6765,6787],"source":" A `time_point` object."},{"content":"A <ph id=\"ph1\">`duration`</ph> object.","pos":[6803,6823],"source":" A `duration` object."},{"pos":[6833,6845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6849,6985],"content":"The first function returns a <ph id=\"ph1\">`duration`</ph> object that has a time interval that is equal to the sum of the intervals of <ph id=\"ph2\">`Left`</ph> and <ph id=\"ph3\">`Right`</ph>.","source":"The first function returns a `duration` object that has a time interval that is equal to the sum of the intervals of `Left` and `Right`."},{"pos":[6992,7156],"content":"The second and third functions return a <ph id=\"ph1\">`time_point`</ph> object that represents a point in time that is displaced, by the interval <ph id=\"ph2\">`Dur`</ph>, from the point in time <ph id=\"ph3\">`Time`</ph>.","source":"The second and third functions return a `time_point` object that represents a point in time that is displaced, by the interval `Dur`, from the point in time `Time`."},{"pos":[7166,7207],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"operator_lt_\"></a>  operator&lt;","source":"<a name=\"operator_lt_\"></a>  operator&lt;"},{"pos":[7211,7403],"content":"Determines whether one <bpt id=\"p1\">[</bpt>duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> or <bpt id=\"p2\">[</bpt>time_point<ept id=\"p2\">](../standard-library/time-point-class.md)</ept> object is less than another <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","source":"Determines whether one [duration](../standard-library/duration-class.md) or [time_point](../standard-library/time-point-class.md) object is less than another `duration` or `time_point` object."},{"pos":[7790,7800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[7814,7857],"source":" The left `duration` or `time_point` object."},{"content":"The right <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[7875,7919],"source":" The right `duration` or `time_point` object."},{"pos":[7929,7941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The first function returns <ph id=\"ph1\">`true`</ph> if the interval length of <ph id=\"ph2\">`Left`</ph> is less than the interval length of <ph id=\"ph3\">`Right`</ph>.","pos":[7945,8056],"source":"The first function returns `true` if the interval length of `Left` is less than the interval length of `Right`."},{"content":"Otherwise, the function returns <ph id=\"ph1\">`false`</ph>.","pos":[8057,8097],"source":" Otherwise, the function returns `false`."},{"content":"The second function returns <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`Left`</ph> precedes <ph id=\"ph3\">`Right`</ph>.","pos":[8104,8166],"source":"The second function returns `true` if `Left` precedes `Right`."},{"content":"Otherwise, the function returns <ph id=\"ph1\">`false`</ph>.","pos":[8167,8207],"source":" Otherwise, the function returns `false`."},{"pos":[8217,8262],"content":"<bpt id=\"p1\">&lt;a name=\"operator_lt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_lt__eq\"></a>  operator&lt;=","source":"<a name=\"operator_lt__eq\"></a>  operator&lt;="},{"pos":[8266,8470],"content":"Determines whether one <bpt id=\"p1\">[</bpt>duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> or <bpt id=\"p2\">[</bpt>time_point<ept id=\"p2\">](../standard-library/time-point-class.md)</ept> object is less than or equal to another <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","source":"Determines whether one [duration](../standard-library/duration-class.md) or [time_point](../standard-library/time-point-class.md) object is less than or equal to another `duration` or `time_point` object."},{"pos":[8858,8868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[8882,8925],"source":" The left `duration` or `time_point` object."},{"content":"The right <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[8943,8987],"source":" The right `duration` or `time_point` object."},{"pos":[8997,9009],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9013,9053],"content":"Each function returns <ph id=\"ph1\">`!(Right &lt; Left)`</ph>.","source":"Each function returns `!(Right < Left)`."},{"pos":[9063,9104],"content":"<bpt id=\"p1\">&lt;a name=\"operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator==","linkify":"<a name=\"operator_eq_eq\"></a>  operator==","source":"<a name=\"operator_eq_eq\"></a>  operator=="},{"pos":[9108,9271],"content":"Determines whether two <ph id=\"ph1\">`duration`</ph> objects represent time intervals that have the same length, or whether two <ph id=\"ph2\">`time_point`</ph> objects represent the same point in time.","source":"Determines whether two `duration` objects represent time intervals that have the same length, or whether two `time_point` objects represent the same point in time."},{"pos":[9659,9669],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[9683,9726],"source":" The left `duration` or `time_point` object."},{"content":"The right <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[9744,9788],"source":" The right `duration` or `time_point` object."},{"pos":[9798,9810],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The first function returns <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`Left`</ph> and <ph id=\"ph3\">`Right`</ph> represent time intervals that have the same length.","pos":[9814,9921],"source":"The first function returns `true` if `Left` and `Right` represent time intervals that have the same length."},{"content":"Otherwise, the function returns <ph id=\"ph1\">`false`</ph>.","pos":[9922,9962],"source":" Otherwise, the function returns `false`."},{"content":"The second function returns <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`Left`</ph> and <ph id=\"ph3\">`Right`</ph> represent the same point in time.","pos":[9969,10059],"source":"The second function returns `true` if `Left` and `Right` represent the same point in time."},{"content":"Otherwise, the function returns <ph id=\"ph1\">`false`</ph>.","pos":[10060,10100],"source":" Otherwise, the function returns `false`."},{"pos":[10110,10151],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt_\"></a>  operator&gt;","source":"<a name=\"operator_gt_\"></a>  operator&gt;"},{"pos":[10155,10350],"content":"Determines whether one <bpt id=\"p1\">[</bpt>duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> or <bpt id=\"p2\">[</bpt>time_point<ept id=\"p2\">](../standard-library/time-point-class.md)</ept> object is greater than another <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","source":"Determines whether one [duration](../standard-library/duration-class.md) or [time_point](../standard-library/time-point-class.md) object is greater than another `duration` or `time_point` object."},{"pos":[10736,10746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[10760,10803],"source":" The left `duration` or `time_point` object."},{"content":"The right <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[10821,10865],"source":" The right `duration` or `time_point` object."},{"pos":[10875,10887],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10891,10928],"content":"Each function returns <ph id=\"ph1\">`Right &lt; Left`</ph>.","source":"Each function returns `Right < Left`."},{"pos":[10938,10983],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"operator_gt__eq\"></a>  operator&gt;=","source":"<a name=\"operator_gt__eq\"></a>  operator&gt;="},{"pos":[10987,11194],"content":"Determines whether one <bpt id=\"p1\">[</bpt>duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> or <bpt id=\"p2\">[</bpt>time_point<ept id=\"p2\">](../standard-library/time-point-class.md)</ept> object is greater than or equal to another <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","source":"Determines whether one [duration](../standard-library/duration-class.md) or [time_point](../standard-library/time-point-class.md) object is greater than or equal to another `duration` or `time_point` object."},{"pos":[11582,11592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The left <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[11606,11649],"source":" The left `duration` or `time_point` object."},{"content":"The right <ph id=\"ph1\">`duration`</ph> or <ph id=\"ph2\">`time_point`</ph> object.","pos":[11667,11711],"source":" The right `duration` or `time_point` object."},{"pos":[11721,11733],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11737,11777],"content":"Each function returns <ph id=\"ph1\">`!(Left &lt; Right)`</ph>.","source":"Each function returns `!(Left < Right)`."},{"pos":[11787,11834],"content":"<bpt id=\"p1\">&lt;a name=\"operator_modulo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator modulo","linkify":"<a name=\"operator_modulo\"></a>  operator modulo","source":"<a name=\"operator_modulo\"></a>  operator modulo"},{"pos":[11838,11930],"content":"Operator for modulo operations on <bpt id=\"p1\">[</bpt>duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> objects.","source":"Operator for modulo operations on [duration](../standard-library/duration-class.md) objects."},{"pos":[12392,12402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`duration`</ph> object.","pos":[12415,12435],"source":" A `duration` object."},{"content":"An integral value.","pos":[12451,12469]},{"content":"The left <ph id=\"ph1\">`duration`</ph> object.","pos":[12486,12513],"source":" The left `duration` object."},{"content":"The right <ph id=\"ph1\">`duration`</ph> object.","pos":[12531,12559],"source":" The right `duration` object."},{"pos":[12569,12581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12585,12676],"content":"The first function returns a <ph id=\"ph1\">`duration`</ph> object whose interval length is <ph id=\"ph2\">`Dur`</ph> modulo <ph id=\"ph3\">`Div`</ph>.","source":"The first function returns a `duration` object whose interval length is `Dur` modulo `Div`."},{"pos":[12683,12757],"content":"The second function returns a value that represents <ph id=\"ph1\">`Left`</ph> modulo <ph id=\"ph2\">`Right`</ph>.","source":"The second function returns a value that represents `Left` modulo `Right`."},{"pos":[12766,12774],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[12778,12820],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>chrono&gt;<ept id=\"p1\">](../standard-library/chrono.md)</ept>","source":"[\\<chrono>](../standard-library/chrono.md)"}],"content":"---\ntitle: \"&lt;chrono&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: c5a19267-4684-40c1-b7a9-cc1012b058f3\ncaps.latest.revision: 8\nmanager: \"ghogen\"\n---\n# &lt;chrono&gt; operators\n||||  \n|-|-|-|  \n|[operator modulo](#operator_modulo)|[operator!=](#operator_neq)|[operator&gt;](#operator_gt_)|  \n|[operator&gt;=](#operator_gt__eq)|[operator&lt;](#operator_lt_)|[operator&lt;=](#operator_lt__eq)|  \n|[operator*](#operator_star)|[operator+](#operator_add)|[operator-](#operator-)|  \n|[operator/](#operator_)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator-\"></a>  operator-  \n Operator for subtraction or negation of [duration](../standard-library/duration-class.md) and [time_point](../standard-library/time-point-class.md) objects.  \n  \n```  \ntemplate <class Rep1, class Period1, class Rep2, class Period2>  \nconstexpr typename common_type<duration<Rep1, Period1>, duration<Rep2, Period2>>::type \n   operator-(\n       const duration<Rep1, Period1>& Left, \n       cconst duration<Rep2, Period2>& Right);\n \ntemplate <class Clock, class Duration1, class Rep2, class Period2>  \nconstexpr time_point<Clock, typename common_type<Duration1, duration<Rep2, Period2>>::type  \n   operator-(\n       const time_point<Clock, Duration1>& Time, \n       const duration<Rep2, Period2>& Dur);\n\n \ntemplate <class Clock, class Duration1, class Duration2>  \nconstexpr typename common_type<Duration1, Duration2>::type \n   operator-(\n       const time_point<Clock, Duration1>& Left, \n       const time_point<Clock, Duration2>& Right);\n```  \n  \n### Parameters  \n `Left`  \n The left `duration` or `time_point` object.  \n  \n `Right`  \n The right `duration` or `time_point` object.  \n  \n `Time`  \n A `time_point` object.  \n  \n `Dur`  \n A `duration` object.  \n  \n### Return Value  \n The first function returns a `duration` object whose interval length is the difference between the time intervals of the two arguments.  \n  \n The second function returns a `time_point` object that represents a point in time that is displaced, by the negation of the time interval that is represented by `Dur`, from the point in time that is specified by `Time`.  \n  \n The third function returns a `duration` object that represents the time interval between `Left` and `Right`.  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Inequality operator for [duration](../standard-library/duration-class.md) or [time_point](../standard-library/time-point-class.md) objects.  \n  \n```  \ntemplate <class Rep1, class Period1, class Rep2, class Period2>  \nconstexpr bool operator!=(\n    const duration<Rep1, Period1>& Left,  \n    const duration<Rep2, Period2>& Right);\n\n \ntemplate <class Clock, class Duration1, class Duration2>  \nconstexpr bool operator!=(\n    const time_point<Clock, Duration1>& Left,  \n    const time_point<Clock, Duration2>& Right);\n```  \n  \n### Parameters  \n `Left`  \n The left `duration` or `time_point` object.  \n  \n `Right`  \n The right `duration` or `time_point` object.  \n  \n### Return Value  \n Each function returns `!(Left == Right)`.  \n  \n##  <a name=\"operator_star\"></a>  operator*  \n Multiplication operator for [duration](../standard-library/chrono-operators.md#operator_star) objects.  \n  \n```  \ntemplate <class Rep1, class Period1, class Rep2>  \nconstexpr duration<typename common_type<Rep1, Rep2>::type, Period1> \n   operator*(\n      const duration<Rep1, Period1>& Dur, \n      const Rep2& Mult);\n\n \ntemplate <class Rep1, class Rep2, class Period2>  \nconstexpr duration<typename common_type<Rep1, Rep2>::type, Period2> \n   operator*(\n       const Rep1& Mult,\n       const duration<Rep2, \n       Period2>& Dur);\n```  \n  \n### Parameters  \n `Dur`  \n A `duration` object.  \n  \n `Mult`  \n An integral value.  \n  \n### Return Value  \n Each function returns a `duration` object whose interval length is `Mult` multiplied by the length of `Dur`.  \n  \n Unless `is_convertible<Rep2, common_type<Rep1, Rep2>>`*holds true*, the first function does not participate in overload resolution. For more information, sssee [<type_traits>](../standard-library/type-traits.md).  \n  \n Unless `is_convertible<Rep1, common_type<Rep1, Rep2>>`*holds true*, the second function does not participate in overload resolution. For more information, see [<type_traits>](../standard-library/type-traits.md).  \n  \n##  <a name=\"operator_\"></a>  operator/  \n Division operator for [duration](../standard-library/chrono-operators.md#operator_star) objects.  \n  \n```  \ntemplate <class Rep1, class Period1, class Rep2>  \nconstexpr duration<typename common_type<Rep1, Rep2>::type, Period1> \n   operator/(\n     const duration<Rep1, Period1>& Dur,  \n     const Rep2& Div);\n\n \ntemplate <class Rep1, class Period1, class Rep2, class Period2>  \nconstexpr typename common_type<Rep1, Rep2>::type \n   operator/(\n     const duration<Rep1, Period1>& Left,  \n     const duration<Rep2, Period2>& Right);\n```  \n  \n### Parameters  \n `Dur`  \n A `duration` object.  \n  \n `Div`  \n An integral value.  \n  \n `Left`  \n The left `duration` object.  \n  \n `Right`  \n The right `duration` object.  \n  \n### Return Value  \n The first operator returns a duration object whose interval length is the length of `Dur` divided by the value `Div`.  \n  \n The second operator returns the ratio of the interval lengths of `Left` and `Right`.  \n  \n Unless `is_convertible<Rep2, common_type<Rep1, Rep2>>`*holds true*, and `Rep2` is not an instantiation of `duration`, the first operator does not participate in overload resolution. For more information, see [<type_traits>](../standard-library/type-traits.md).  \n  \n##  <a name=\"operator_add\"></a>  operator+  \n Adds [duration](../standard-library/duration-class.md) and [time_point](../standard-library/time-point-class.md) objects.  \n  \n```  \ntemplate <class Rep1, class Period1, class Rep2, class Period2>  \nconstexpr typename common_type<duration<Rep1, Period1>, duration<Rep2, Period2>>::type \n   operator+(\n      const duration<Rep1, Period1>& Left,  \n      const duration<Rep2, Period2>& Right);\n\n \ntemplate <class Clock, class Duration1, class Rep2, class Period2>  \nconstexpr time_point<Clock, typename common_type<Duration1, duration<Rep2, Period2>>::type>\n   operator+(\n      const time_point<Clock, Duration1>& Time,  \n      const duration<Rep2, Period2>& Dur);\n\n \ntemplate <class Rep1, class Period1, class Clock, class Duration2>  \ntime_point<Clock, constexpr typename common_type<duration<Rep1, Period1>, Duration2>::type>\n   operator+(\n      const duration<Rep1, Period1>& Dur,  \n      const time_point<Clock, Duration2>& Time);\n```  \n  \n### Parameters  \n `Left`  \n The left `duration` or `time_point` object.  \n  \n `Right`  \n The right `duration` or `time_point` object.  \n  \n `Time`  \n A `time_point` object.  \n  \n `Dur`  \n A `duration` object.  \n  \n### Return Value  \n The first function returns a `duration` object that has a time interval that is equal to the sum of the intervals of `Left` and `Right`.  \n  \n The second and third functions return a `time_point` object that represents a point in time that is displaced, by the interval `Dur`, from the point in time `Time`.  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Determines whether one [duration](../standard-library/duration-class.md) or [time_point](../standard-library/time-point-class.md) object is less than another `duration` or `time_point` object.  \n  \n```  \ntemplate <class Rep1, class Period1, class Rep2, class Period2>  \nconstexpr bool operator<(\n    const duration<Rep1, Period1>& Left,  \n    const duration<Rep2, Period2>& Right);\n\n \ntemplate <class Clock, class Duration1, class Duration2>  \nconstexpr bool operator<(\n    const time_point<Clock, Duration1>& Left,  \n    const time_point<Clock, Duration2>& Right);\n```  \n  \n### Parameters  \n `Left`  \n The left `duration` or `time_point` object.  \n  \n `Right`  \n The right `duration` or `time_point` object.  \n  \n### Return Value  \n The first function returns `true` if the interval length of `Left` is less than the interval length of `Right`. Otherwise, the function returns `false`.  \n  \n The second function returns `true` if `Left` precedes `Right`. Otherwise, the function returns `false`.  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Determines whether one [duration](../standard-library/duration-class.md) or [time_point](../standard-library/time-point-class.md) object is less than or equal to another `duration` or `time_point` object.  \n  \n```  \ntemplate <class Rep1, class Period1, class Rep2, class Period2>  \nconstexpr bool operator<=(\n    const duration<Rep1, Period1>& Left,  \n    const duration<Rep2, Period2>& Right);\n \ntemplate <class Clock, class Duration1, class Duration2>  \nconstexpr bool operator<=(\n    const time_point<Clock, Duration1>& Left,  \n    const time_point<Clock, Duration2>& Right);\n```  \n  \n### Parameters  \n `Left`  \n The left `duration` or `time_point` object.  \n  \n `Right`  \n The right `duration` or `time_point` object.  \n  \n### Return Value  \n Each function returns `!(Right < Left)`.  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Determines whether two `duration` objects represent time intervals that have the same length, or whether two `time_point` objects represent the same point in time.  \n  \n```  \ntemplate <class Rep1, class Period1, class Rep2, class Period2>  \nconstexpr bool operator==(\n    const duration<Rep1, Period1>& Left,  \n    const duration<Rep2, Period2>& Right);\n \ntemplate <class Clock, class Duration1, class Duration2>  \nconstexpr bool operator==(\n    const time_point<Clock, Duration1>& Left,  \n    const time_point<Clock, Duration2>& Right);\n```  \n  \n### Parameters  \n `Left`  \n The left `duration` or `time_point` object.  \n  \n `Right`  \n The right `duration` or `time_point` object.  \n  \n### Return Value  \n The first function returns `true` if `Left` and `Right` represent time intervals that have the same length. Otherwise, the function returns `false`.  \n  \n The second function returns `true` if `Left` and `Right` represent the same point in time. Otherwise, the function returns `false`.  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Determines whether one [duration](../standard-library/duration-class.md) or [time_point](../standard-library/time-point-class.md) object is greater than another `duration` or `time_point` object.  \n  \n```  \ntemplate <class Rep1, class Period1, class Rep2, class Period2>  \nconstexpr bool operator>(\n    const duration<Rep1, Period1>& Left,  \n    const duration<Rep2, Period2>& Right);\n \ntemplate <class Clock, class Duration1, class Duration2>  \nconstexpr bool operator>(\n    const time_point<Clock, Duration1>& Left,  \n    const time_point<Clock, Duration2>& Right);\n```  \n  \n### Parameters  \n `Left`  \n The left `duration` or `time_point` object.  \n  \n `Right`  \n The right `duration` or `time_point` object.  \n  \n### Return Value  \n Each function returns `Right < Left`.  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Determines whether one [duration](../standard-library/duration-class.md) or [time_point](../standard-library/time-point-class.md) object is greater than or equal to another `duration` or `time_point` object.  \n  \n```  \ntemplate <class Rep1, class Period1, class Rep2, class Period2>  \nconstexpr bool operator>=(\n    const duration<Rep1, Period1>& Left,  \n    const duration<Rep2, Period2>& Right);\n \ntemplate <class Clock, class Duration1, class Duration2>  \nconstexpr bool operator>=(\n    const time_point<Clock, Duration1>& Left,  \n    const time_point<Clock, Duration2>& Right);\n```  \n  \n### Parameters  \n `Left`  \n The left `duration` or `time_point` object.  \n  \n `Right`  \n The right `duration` or `time_point` object.  \n  \n### Return Value  \n Each function returns `!(Left < Right)`.  \n  \n##  <a name=\"operator_modulo\"></a>  operator modulo  \n Operator for modulo operations on [duration](../standard-library/duration-class.md) objects.  \n  \n```  \ntemplate <class Rep1, class Period1, class Rep2>  \nconstexpr duration<Rep1, Period1, Rep2>::type \n   operator%(\n      const duration<Rep1, Period1>& Dur,  \n      const Rep2& Div);\n\ntemplate <class Rep1, class Period1, class Rep2, class Period2>  \nconstexpr typename common_type<duration<Rep1, _Period1>, duration<Rep2, Period2>>::type\n   operator%(\n     const duration<Rep1, Period1>& Left,  \n     const duration<Rep2, Period2>& Right);\n```  \n  \n### Parameters  \n `Dur`  \n A `duration` object.  \n  \n `Div`  \n An integral value.  \n  \n `Left`  \n The left `duration` object.  \n  \n `Right`  \n The right `duration` object.  \n  \n### Return Value  \n The first function returns a `duration` object whose interval length is `Dur` modulo `Div`.  \n  \n The second function returns a value that represents `Left` modulo `Right`.  \n  \n## See Also  \n [\\<chrono>](../standard-library/chrono.md)\n\n"}