{"nodes":[{"pos":[12,37],"content":"_matherr | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_matherr | Microsoft Docs","pos":[0,25]}]},{"content":"_matherr","pos":[908,916]},{"content":"Handles math errors.","pos":[917,937]},{"content":"Syntax","pos":[946,952]},{"content":"Parameters","pos":[1040,1050]},{"content":"except","pos":[1055,1061]},{"content":"Pointer to the structure containing error information.","pos":[1066,1120]},{"content":"Return Value","pos":[1129,1141]},{"content":"_<bpt id=\"p1\">**</bpt>matherr<ept id=\"p1\">**</ept> returns 0 to indicate an error or a nonzero value to indicate success.","pos":[1145,1228],"source":"_**matherr** returns 0 to indicate an error or a nonzero value to indicate success."},{"content":"If <ph id=\"ph1\">\\_</ph><bpt id=\"p1\">**</bpt>matherr<ept id=\"p1\">**</ept> returns 0, an error message can be displayed and <ph id=\"ph2\">`errno`</ph> is set to an appropriate error value.","pos":[1229,1340],"source":" If \\_**matherr** returns 0, an error message can be displayed and `errno` is set to an appropriate error value."},{"content":"If <ph id=\"ph1\">\\_</ph><bpt id=\"p1\">**</bpt>matherr<ept id=\"p1\">**</ept> returns a nonzero value, no error message is displayed and <ph id=\"ph2\">`errno`</ph> remains unchanged.","pos":[1341,1443],"source":" If \\_**matherr** returns a nonzero value, no error message is displayed and `errno` remains unchanged."},{"pos":[1450,1611],"content":"For more information about return codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[1620,1627]},{"content":"The _<bpt id=\"p1\">**</bpt>matherr<ept id=\"p1\">**</ept> function processes errors generated by the floating-point functions of the math library.","pos":[1631,1736],"source":"The _**matherr** function processes errors generated by the floating-point functions of the math library."},{"content":"These functions call <ph id=\"ph1\">\\_</ph><bpt id=\"p1\">**</bpt>matherr<ept id=\"p1\">**</ept> when an error is detected.","pos":[1737,1798],"source":" These functions call \\_**matherr** when an error is detected."},{"content":"For special error handling, you can provide a different definition of _<bpt id=\"p1\">**</bpt>matherr<ept id=\"p1\">**</ept>.","pos":[1805,1888],"source":"For special error handling, you can provide a different definition of _**matherr**."},{"content":"If you use the dynamically linked version of the C run-time library (Msvcr90.dll), you can replace the default <ph id=\"ph1\">\\_</ph><bpt id=\"p1\">**</bpt>matherr<ept id=\"p1\">**</ept> routine in a client executable with a user-defined version.","pos":[1889,2073],"source":" If you use the dynamically linked version of the C run-time library (Msvcr90.dll), you can replace the default \\_**matherr** routine in a client executable with a user-defined version."},{"content":"However, you cannot replace the default <ph id=\"ph1\">`_matherr`</ph> routine in a DLL client of Msvcr90.dll.","pos":[2074,2164],"source":" However, you cannot replace the default `_matherr` routine in a DLL client of Msvcr90.dll."},{"content":"When an error occurs in a math routine, _<bpt id=\"p1\">**</bpt>matherr<ept id=\"p1\">**</ept> is called with a pointer to an <bpt id=\"p2\">**</bpt>_exception<ept id=\"p2\">**</ept> type structure (defined in Math.h) as an argument.","pos":[2171,2320],"source":"When an error occurs in a math routine, _**matherr** is called with a pointer to an **_exception** type structure (defined in Math.h) as an argument."},{"content":"The <bpt id=\"p1\">**</bpt>_exception<ept id=\"p1\">**</ept> structure contains the following elements.","pos":[2321,2382],"source":" The **_exception** structure contains the following elements."},{"content":"int type","pos":[2391,2399]},{"content":"Exception type.","pos":[2405,2420]},{"content":"char <ph id=\"ph1\">\\*</ph>name","pos":[2429,2440],"source":"char \\*name"},{"content":"Name of the function where error occurred.","pos":[2446,2488]},{"content":"<bpt id=\"p1\">**</bpt>double arg1<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>arg2<ept id=\"p2\">**</ept>","pos":[2495,2520],"source":"**double arg1**, **arg2**"},{"content":"First and second (if any) arguments to the function.","pos":[2524,2576]},{"content":"double retval","pos":[2585,2598]},{"content":"Value to be returned by the function.","pos":[2604,2641]},{"content":"The <bpt id=\"p1\">**</bpt>type<ept id=\"p1\">**</ept> specifies the type of math error.","pos":[2648,2694],"source":"The **type** specifies the type of math error."},{"content":"It is one of the following values, defined in Math.h.","pos":[2695,2748]},{"content":"Argument domain error.","pos":[2768,2790]},{"content":"Argument singularity.","pos":[2808,2829]},{"content":"Overflow range error.","pos":[2851,2872]},{"content":"Partial loss of significance.","pos":[2891,2920]},{"content":"Total loss of significance.","pos":[2939,2966]},{"content":"The result is too small to be represented.","pos":[2989,3031]},{"content":"(This condition is not currently supported.)","pos":[3032,3076]},{"content":"The structure member <bpt id=\"p1\">**</bpt>name<ept id=\"p1\">**</ept> is a pointer to a null-terminated string containing the name of the function that caused the error.","pos":[3083,3212],"source":"The structure member **name** is a pointer to a null-terminated string containing the name of the function that caused the error."},{"content":"The structure members <bpt id=\"p1\">**</bpt>arg1<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>arg2<ept id=\"p2\">**</ept> specify the values that caused the error.","pos":[3213,3298],"source":" The structure members **arg1** and **arg2** specify the values that caused the error."},{"content":"(If only one argument is given, it is stored in <bpt id=\"p1\">**</bpt>arg1<ept id=\"p1\">**</ept>.)","pos":[3299,3357],"source":" (If only one argument is given, it is stored in **arg1**.)"},{"content":"The default return value for the given error is <bpt id=\"p1\">**</bpt>retval<ept id=\"p1\">**</ept>.","pos":[3364,3423],"source":"The default return value for the given error is **retval**."},{"content":"If you change the return value, it must specify whether an error actually occurred.","pos":[3424,3507]},{"content":"Requirements","pos":[3516,3528]},{"content":"Routine","pos":[3535,3542]},{"content":"Required header","pos":[3543,3558]},{"content":"math.h&gt;","pos":[3616,3623],"source":"math.h>"},{"pos":[3631,3749],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[3758,3767]},{"pos":[3771,3863],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"content":"Example","pos":[3872,3879]},{"content":"Output","pos":[5532,5538]},{"content":".NET Framework Equivalent","pos":[5768,5793]},{"content":"Not applicable.","pos":[5797,5812]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[5813,5860],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[5861,5986],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[5995,6003]},{"content":"Floating-Point Support","pos":[6008,6030]}],"content":"---\ntitle: \"_matherr | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_matherr\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_matherr\"\n  - \"matherr\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_matherr function\"\n  - \"matherr function\"\nms.assetid: b600d66e-165a-4608-a856-8fb418d46760\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _matherr\nHandles math errors.  \n  \n## Syntax  \n  \n```  \n  \n      int _matherr(  \n   struct _exception *except   \n);  \n```  \n  \n#### Parameters  \n *except*  \n Pointer to the structure containing error information.  \n  \n## Return Value  \n _**matherr** returns 0 to indicate an error or a nonzero value to indicate success. If \\_**matherr** returns 0, an error message can be displayed and `errno` is set to an appropriate error value. If \\_**matherr** returns a nonzero value, no error message is displayed and `errno` remains unchanged.  \n  \n For more information about return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The _**matherr** function processes errors generated by the floating-point functions of the math library. These functions call \\_**matherr** when an error is detected.  \n  \n For special error handling, you can provide a different definition of _**matherr**. If you use the dynamically linked version of the C run-time library (Msvcr90.dll), you can replace the default \\_**matherr** routine in a client executable with a user-defined version. However, you cannot replace the default `_matherr` routine in a DLL client of Msvcr90.dll.  \n  \n When an error occurs in a math routine, _**matherr** is called with a pointer to an **_exception** type structure (defined in Math.h) as an argument. The **_exception** structure contains the following elements.  \n  \n **int type**  \n Exception type.  \n  \n **char \\*name**  \n Name of the function where error occurred.  \n  \n **double arg1**, **arg2**  \n First and second (if any) arguments to the function.  \n  \n **double retval**  \n Value to be returned by the function.  \n  \n The **type** specifies the type of math error. It is one of the following values, defined in Math.h.  \n  \n `_DOMAIN`  \n Argument domain error.  \n  \n `_SING`  \n Argument singularity.  \n  \n `_OVERFLOW`  \n Overflow range error.  \n  \n `_PLOSS`  \n Partial loss of significance.  \n  \n `_TLOSS`  \n Total loss of significance.  \n  \n `_UNDERFLOW`  \n The result is too small to be represented. (This condition is not currently supported.)  \n  \n The structure member **name** is a pointer to a null-terminated string containing the name of the function that caused the error. The structure members **arg1** and **arg2** specify the values that caused the error. (If only one argument is given, it is stored in **arg1**.)  \n  \n The default return value for the given error is **retval**. If you change the return value, it must specify whether an error actually occurred.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_matherr`|\\<math.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_matherr.c  \n/* illustrates writing an error routine for math   \n * functions. The error function must be:  \n *      _matherr  \n */  \n  \n#include <math.h>  \n#include <string.h>  \n#include <stdio.h>  \n  \nint main()  \n{  \n    /* Do several math operations that cause errors. The _matherr  \n     * routine handles _DOMAIN errors, but lets the system handle  \n     * other errors normally.  \n     */  \n    printf( \"log( -2.0 ) = %e\\n\", log( -2.0 ) );  \n    printf( \"log10( -5.0 ) = %e\\n\", log10( -5.0 ) );  \n    printf( \"log( 0.0 ) = %e\\n\", log( 0.0 ) );  \n}  \n  \n/* Handle several math errors caused by passing a negative argument  \n * to log or log10 (_DOMAIN errors). When this happens, _matherr  \n * returns the natural or base-10 logarithm of the absolute value  \n * of the argument and suppresses the usual error message.  \n */  \nint _matherr( struct _exception *except )  \n{  \n    /* Handle _DOMAIN errors for log or log10. */  \n    if( except->type == _DOMAIN )  \n    {  \n        if( strcmp( except->name, \"log\" ) == 0 )  \n        {  \n            except->retval = log( -(except->arg1) );  \n            printf( \"Special: using absolute value: %s: _DOMAIN \"  \n                     \"error\\n\", except->name );  \n            return 1;  \n        }  \n        else if( strcmp( except->name, \"log10\" ) == 0 )  \n        {  \n            except->retval = log10( -(except->arg1) );  \n            printf( \"Special: using absolute value: %s: _DOMAIN \"  \n                     \"error\\n\", except->name );  \n            return 1;  \n        }  \n    }  \n    printf( \"Normal: \" );  \n    return 0;    /* Else use the default actions */  \n}  \n```  \n  \n## Output  \n  \n```  \nSpecial: using absolute value: log: _DOMAIN error  \nlog( -2.0 ) = 6.931472e-001  \nSpecial: using absolute value: log10: _DOMAIN error  \nlog10( -5.0 ) = 6.989700e-001  \nNormal: log( 0.0 ) = -1.#INF00e+000  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   "}