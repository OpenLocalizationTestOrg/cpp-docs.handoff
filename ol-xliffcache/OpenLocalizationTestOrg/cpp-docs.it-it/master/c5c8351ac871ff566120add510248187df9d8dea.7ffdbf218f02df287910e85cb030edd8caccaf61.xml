{"nodes":[{"pos":[12,40],"content":"CPane Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CPane Class | Microsoft Docs","pos":[0,28]}]},{"pos":[589,600],"content":"CPane Class","linkify":"CPane Class","nodes":[{"content":"CPane Class","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`CPane`</ph> class is an enhancement of the <bpt id=\"p1\">[</bpt>CControlBar Class<ept id=\"p1\">](../../mfc/reference/ccontrolbar-class.md)</ept>.","pos":[601,706],"source":"The `CPane` class is an enhancement of the [CControlBar Class](../../mfc/reference/ccontrolbar-class.md)."},{"content":"If you are upgrading an existing MFC project, replace all occurrences of <ph id=\"ph1\">`CControlBar`</ph> with <ph id=\"ph2\">`CPane`</ph>.","pos":[707,807],"source":" If you are upgrading an existing MFC project, replace all occurrences of `CControlBar` with `CPane`."},{"pos":[816,822],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[879,886],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[896,915],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[922,926]},{"content":"Description","pos":[927,938]},{"content":"Destructor.","pos":[992,1003]},{"pos":[1014,1028],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1035,1039]},{"content":"Description","pos":[1040,1051]},{"pos":[1089,1146],"content":"<bpt id=\"p1\">[</bpt>CPane::AdjustSizeImmediate<ept id=\"p1\">](#cpane__adjustsizeimmediate)</ept>","source":"[CPane::AdjustSizeImmediate](#cpane__adjustsizeimmediate)"},{"content":"Immediately recalculates the layout of a pane.","pos":[1147,1193]},{"pos":[1198,1243],"content":"<bpt id=\"p1\">[</bpt>CPane::AllocElements<ept id=\"p1\">](#cpane__allocelements)</ept>","source":"[CPane::AllocElements](#cpane__allocelements)"},{"content":"Allocates storage for internal use.","pos":[1244,1279]},{"pos":[1284,1341],"content":"<bpt id=\"p1\">[</bpt>CPane::AllowShowOnPaneMenu<ept id=\"p1\">](#cpane__allowshowonpanemenu)</ept>","source":"[CPane::AllowShowOnPaneMenu](#cpane__allowshowonpanemenu)"},{"content":"Specifies whether the pane is listed in the runtime-generated list of panes for the application.","pos":[1342,1438]},{"pos":[1443,1496],"content":"<bpt id=\"p1\">[</bpt>CPane::CalcAvailableSize<ept id=\"p1\">](#cpane__calcavailablesize)</ept>","source":"[CPane::CalcAvailableSize](#cpane__calcavailablesize)"},{"content":"Calculates the difference in size between a specified rectangle and the current window rectangle.","pos":[1497,1594]},{"pos":[1599,1646],"content":"<bpt id=\"p1\">[</bpt>CPane::CalcInsideRect<ept id=\"p1\">](#cpane__calcinsiderect)</ept>","source":"[CPane::CalcInsideRect](#cpane__calcinsiderect)"},{"content":"Calculates the inside rectangle of a pane, taking into account the borders and grippers.","pos":[1647,1735]},{"pos":[1740,1799],"content":"<bpt id=\"p1\">[</bpt>CPane::CalcRecentDockedRect<ept id=\"p1\">](#cpane__calcrecentdockedrect)</ept>","source":"[CPane::CalcRecentDockedRect](#cpane__calcrecentdockedrect)"},{"content":"Calculates the recently docked rectangle.","pos":[1800,1841]},{"pos":[1846,1881],"content":"<bpt id=\"p1\">[</bpt>CPane::CalcSize<ept id=\"p1\">](#cpane__calcsize)</ept>","source":"[CPane::CalcSize](#cpane__calcsize)"},{"content":"Calculates the size of the pane.","pos":[1882,1914]},{"pos":[1919,1960],"content":"<bpt id=\"p1\">[</bpt>CPane::CanBeDocked<ept id=\"p1\">](#cpane__canbedocked)</ept>","source":"[CPane::CanBeDocked](#cpane__canbedocked)"},{"content":"Determines whether the pane can be docked at the specified base pane.","pos":[1961,2030]},{"pos":[2035,2092],"content":"<bpt id=\"p1\">[</bpt>CPane::CanBeTabbedDocument<ept id=\"p1\">](#cpane__canbetabbeddocument)</ept>","source":"[CPane::CanBeTabbedDocument](#cpane__canbetabbeddocument)"},{"content":"Determines whether the pane can be converted to a tabbed document.","pos":[2093,2159]},{"pos":[2164,2229],"content":"<bpt id=\"p1\">[</bpt>CPane::ConvertToTabbedDocument<ept id=\"p1\">](#cpane__converttotabbeddocument)</ept>","source":"[CPane::ConvertToTabbedDocument](#cpane__converttotabbeddocument)"},{"content":"Converts a dockable pane to a tabbed document.","pos":[2230,2276]},{"pos":[2281,2318],"content":"<bpt id=\"p1\">[</bpt>CPane::CopyState<ept id=\"p1\">](#cpane__copystate)</ept>","source":"[CPane::CopyState](#cpane__copystate)"},{"content":"Copies the state of a pane.","pos":[2319,2346]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::CopyState<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__copystate)</ept>.)","pos":[2347,2443],"source":" (Overrides [CBasePane::CopyState](../../mfc/reference/cbasepane-class.md#cbasepane__copystate).)"},{"pos":[2448,2479],"content":"<bpt id=\"p1\">[</bpt>CPane::Create<ept id=\"p1\">](#cpane__create)</ept>","source":"[CPane::Create](#cpane__create)"},{"pos":[2480,2540],"content":"Creates a control bar and attaches it to the <ph id=\"ph1\">`CPane`</ph> object.","source":"Creates a control bar and attaches it to the `CPane` object."},{"pos":[2545,2608],"content":"<bpt id=\"p1\">[</bpt>CPane::CreateDefaultMiniframe<ept id=\"p1\">](#cpane__createdefaultminiframe)</ept>","source":"[CPane::CreateDefaultMiniframe](#cpane__createdefaultminiframe)"},{"content":"Creates a mini-frame window for a floating pane.","pos":[2609,2657]},{"pos":[2662,2697],"content":"<bpt id=\"p1\">[</bpt>CPane::CreateEx<ept id=\"p1\">](#cpane__createex)</ept>","source":"[CPane::CreateEx](#cpane__createex)"},{"pos":[2698,2758],"content":"Creates a control bar and attaches it to the <ph id=\"ph1\">`CPane`</ph> object.","source":"Creates a control bar and attaches it to the `CPane` object."},{"content":"Used by the framework to create a dynamic instance of this class type.","pos":[2785,2855]},{"pos":[2860,2901],"content":"<bpt id=\"p1\">[</bpt>CPane::DockByMouse<ept id=\"p1\">](#cpane__dockbymouse)</ept>","source":"[CPane::DockByMouse](#cpane__dockbymouse)"},{"content":"Docks a pane by using the mouse docking method.","pos":[2902,2949]},{"pos":[2954,2989],"content":"<bpt id=\"p1\">[</bpt>CPane::DockPane<ept id=\"p1\">](#cpane__dockpane)</ept>","source":"[CPane::DockPane](#cpane__dockpane)"},{"content":"Docks the floating pane to a base pane.","pos":[2990,3029]},{"pos":[3034,3085],"content":"<bpt id=\"p1\">[</bpt>CPane::DockPaneStandard<ept id=\"p1\">](#cpane__dockpanestandard)</ept>","source":"[CPane::DockPaneStandard](#cpane__dockpanestandard)"},{"content":"Docks a pane by using outline (standard) docking.","pos":[3086,3135]},{"pos":[3140,3193],"content":"<bpt id=\"p1\">[</bpt>CPane::DockToFrameWindow<ept id=\"p1\">](#cpane__docktoframewindow)</ept>","source":"[CPane::DockToFrameWindow](#cpane__docktoframewindow)"},{"content":"Docks a dockable pane to a frame.","pos":[3194,3227]},{"content":"(Overrides <ph id=\"ph1\">`CBasePane::DockToFrameWindow`</ph>.)","pos":[3228,3271],"source":" (Overrides `CBasePane::DockToFrameWindow`.)"},{"pos":[3276,3335],"content":"<bpt id=\"p1\">[</bpt>CPane::DoesAllowSiblingBars<ept id=\"p1\">](#cpane__doesallowsiblingbars)</ept>","source":"[CPane::DoesAllowSiblingBars](#cpane__doesallowsiblingbars)"},{"content":"Indicates whether you can dock another pane at the same row where the current pane is docked.","pos":[3336,3429]},{"pos":[3434,3471],"content":"<bpt id=\"p1\">[</bpt>CPane::FloatPane<ept id=\"p1\">](#cpane__floatpane)</ept>","source":"[CPane::FloatPane](#cpane__floatpane)"},{"content":"Floats the pane.","pos":[3472,3488]},{"pos":[3493,3556],"content":"<bpt id=\"p1\">[</bpt>CPane::GetAvailableExpandSize<ept id=\"p1\">](#cpane__getavailableexpandsize)</ept>","source":"[CPane::GetAvailableExpandSize](#cpane__getavailableexpandsize)"},{"content":"Returns the amount, in pixels, that the pane can expand.","pos":[3557,3613]},{"pos":[3618,3683],"content":"<bpt id=\"p1\">[</bpt>CPane::GetAvailableStretchSize<ept id=\"p1\">](#cpane__getavailablestretchsize)</ept>","source":"[CPane::GetAvailableStretchSize](#cpane__getavailablestretchsize)"},{"content":"Returns the amount, in pixels, that the pane can shrink.","pos":[3684,3740]},{"pos":[3745,3784],"content":"<bpt id=\"p1\">[</bpt>CPane::GetBorders<ept id=\"p1\">](#cpane__getborders)</ept>","source":"[CPane::GetBorders](#cpane__getborders)"},{"content":"Returns the width of the borders of the pane.","pos":[3785,3830]},{"pos":[3835,3886],"content":"<bpt id=\"p1\">[</bpt>CPane::GetClientHotSpot<ept id=\"p1\">](#cpane__getclienthotspot)</ept>","source":"[CPane::GetClientHotSpot](#cpane__getclienthotspot)"},{"pos":[3887,3923],"content":"Returns the <bpt id=\"p1\">*</bpt>hot spot<ept id=\"p1\">*</ept> for the pane.","source":"Returns the *hot spot* for the pane."},{"pos":[3928,3975],"content":"<bpt id=\"p1\">[</bpt>CPane::GetDockSiteRow<ept id=\"p1\">](#cpane__getdocksiterow)</ept>","source":"[CPane::GetDockSiteRow](#cpane__getdocksiterow)"},{"content":"Returns the dock row in which the pane is docked.","pos":[3976,4025]},{"pos":[4030,4087],"content":"<bpt id=\"p1\">[</bpt>CPane::GetExclusiveRowMode<ept id=\"p1\">](#cpane__getexclusiverowmode)</ept>","source":"[CPane::GetExclusiveRowMode](#cpane__getexclusiverowmode)"},{"content":"Determines whether the pane is in exclusive row mode.","pos":[4088,4141]},{"pos":[4146,4185],"content":"<bpt id=\"p1\">[</bpt>CPane::GetHotSpot<ept id=\"p1\">](#cpane__gethotspot)</ept>","source":"[CPane::GetHotSpot](#cpane__gethotspot)"},{"pos":[4186,4266],"content":"Returns the hot spot that is stored in an underlying <ph id=\"ph1\">`CMFCDragFrameImpl`</ph> object.","source":"Returns the hot spot that is stored in an underlying `CMFCDragFrameImpl` object."},{"pos":[4271,4310],"content":"<bpt id=\"p1\">[</bpt>CPane::GetMinSize<ept id=\"p1\">](#cpane__getminsize)</ept>","source":"[CPane::GetMinSize](#cpane__getminsize)"},{"content":"Retrieves the minimum allowed size for the pane.","pos":[4311,4359]},{"pos":[4364,4405],"content":"<bpt id=\"p1\">[</bpt>CPane::GetPaneName<ept id=\"p1\">](#cpane__getpanename)</ept>","source":"[CPane::GetPaneName](#cpane__getpanename)"},{"content":"Retrieves the title for the pane.","pos":[4406,4439]},{"content":"Used internally.","pos":[4467,4483]},{"pos":[4510,4670],"content":"Used by the framework to obtain a pointer to the <bpt id=\"p1\">[</bpt>CRuntimeClass<ept id=\"p1\">](../../mfc/reference/cruntimeclass-structure.md)</ept> object that is associated with this class type.","source":"Used by the framework to obtain a pointer to the [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) object that is associated with this class type."},{"pos":[4675,4722],"content":"<bpt id=\"p1\">[</bpt>CPane::GetVirtualRect<ept id=\"p1\">](#cpane__getvirtualrect)</ept>","source":"[CPane::GetVirtualRect](#cpane__getvirtualrect)"},{"pos":[4723,4769],"content":"Retrieves the <bpt id=\"p1\">*</bpt>virtual rectangle<ept id=\"p1\">*</ept> of the pane.","source":"Retrieves the *virtual rectangle* of the pane."},{"pos":[4774,4819],"content":"<bpt id=\"p1\">[</bpt>CPane::IsChangeState<ept id=\"p1\">](#cpane__ischangestate)</ept>","source":"[CPane::IsChangeState](#cpane__ischangestate)"},{"pos":[4820,5004],"content":"As the pane is being moved, this method analyzes the position of the pane relative to other panes, dock rows, and mini-frame windows, and returns the appropriate <ph id=\"ph1\">`AFX_CS_STATUS`</ph> value.","source":"As the pane is being moved, this method analyzes the position of the pane relative to other panes, dock rows, and mini-frame windows, and returns the appropriate `AFX_CS_STATUS` value."},{"pos":[5009,5048],"content":"<bpt id=\"p1\">[</bpt>CPane::IsDragMode<ept id=\"p1\">](#cpane__isdragmode)</ept>","source":"[CPane::IsDragMode](#cpane__isdragmode)"},{"content":"Specifies whether the pane is being dragged.","pos":[5049,5093]},{"pos":[5098,5175],"content":"<bpt id=\"p1\">[</bpt>CPane::IsInFloatingMultiPaneFrameWnd<ept id=\"p1\">](#cpane__isinfloatingmultipaneframewnd)</ept>","source":"[CPane::IsInFloatingMultiPaneFrameWnd](#cpane__isinfloatingmultipaneframewnd)"},{"content":"Specifies whether the pane is in a multi-pane frame window.","pos":[5176,5235]},{"content":"(Overrides <ph id=\"ph1\">`CBasePane::IsInFloatingMultiPaneFrameWnd`</ph>.)","pos":[5236,5291],"source":" (Overrides `CBasePane::IsInFloatingMultiPaneFrameWnd`.)"},{"pos":[5296,5331],"content":"<bpt id=\"p1\">[</bpt>CPane::IsLeftOf<ept id=\"p1\">](#cpane__isleftof)</ept>","source":"[CPane::IsLeftOf](#cpane__isleftof)"},{"content":"Determines whether the pane is left of (or above) the specified rectangle.","pos":[5332,5406]},{"pos":[5411,5452],"content":"<bpt id=\"p1\">[</bpt>CPane::IsResizable<ept id=\"p1\">](#cpane__isresizable)</ept>","source":"[CPane::IsResizable](#cpane__isresizable)"},{"content":"Determines whether the pane can be resized.","pos":[5453,5496]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::IsResizable<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__isresizable)</ept>.)","pos":[5497,5597],"source":" (Overrides [CBasePane::IsResizable](../../mfc/reference/cbasepane-class.md#cbasepane__isresizable).)"},{"pos":[5602,5637],"content":"<bpt id=\"p1\">[</bpt>CPane::IsTabbed<ept id=\"p1\">](#cpane__istabbed)</ept>","source":"[CPane::IsTabbed](#cpane__istabbed)"},{"content":"Determines whether the pane has been inserted in the tab control of a tabbed window.","pos":[5638,5722]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::IsTabbed<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__istabbed)</ept>.)","pos":[5723,5817],"source":" (Overrides [CBasePane::IsTabbed](../../mfc/reference/cbasepane-class.md#cbasepane__istabbed).)"},{"pos":[5822,5859],"content":"<bpt id=\"p1\">[</bpt>CPane::LoadState<ept id=\"p1\">](#cpane__loadstate)</ept>","source":"[CPane::LoadState](#cpane__loadstate)"},{"content":"Loads the state of the pane from the registry.","pos":[5860,5906]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::LoadState<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__loadstate)</ept>.)","pos":[5907,6003],"source":" (Overrides [CBasePane::LoadState](../../mfc/reference/cbasepane-class.md#cbasepane__loadstate).)"},{"pos":[6008,6057],"content":"<bpt id=\"p1\">[</bpt>CPane::MoveByAlignment<ept id=\"p1\">](#cpane__movebyalignment)</ept>","source":"[CPane::MoveByAlignment](#cpane__movebyalignment)"},{"content":"Moves the pane and the virtual rectangle by the specified amount.","pos":[6058,6123]},{"pos":[6128,6163],"content":"<bpt id=\"p1\">[</bpt>CPane::MovePane<ept id=\"p1\">](#cpane__movepane)</ept>","source":"[CPane::MovePane](#cpane__movepane)"},{"content":"Moves the pane to the specified rectangle.","pos":[6164,6206]},{"pos":[6211,6268],"content":"<bpt id=\"p1\">[</bpt>CPane::OnAfterChangeParent<ept id=\"p1\">](#cpane__onafterchangeparent)</ept>","source":"[CPane::OnAfterChangeParent](#cpane__onafterchangeparent)"},{"content":"Called by the framework when the parent of a pane has changed.","pos":[6269,6331]},{"pos":[6336,6395],"content":"<bpt id=\"p1\">[</bpt>CPane::OnBeforeChangeParent<ept id=\"p1\">](#cpane__onbeforechangeparent)</ept>","source":"[CPane::OnBeforeChangeParent](#cpane__onbeforechangeparent)"},{"content":"Called by the framework when the parent of the pane is about to change.","pos":[6396,6467]},{"pos":[6472,6527],"content":"<bpt id=\"p1\">[</bpt>CPane::OnPressCloseButton<ept id=\"p1\">](#cpane__onpressclosebutton)</ept>","source":"[CPane::OnPressCloseButton](#cpane__onpressclosebutton)"},{"content":"Called by the framework when the user chooses the Close button on the caption for the pane.","pos":[6528,6619]},{"content":"Used internally.","pos":[6649,6665]},{"pos":[6670,6729],"content":"<bpt id=\"p1\">[</bpt>CPane::OnShowControlBarMenu<ept id=\"p1\">](#cpane__onshowcontrolbarmenu)</ept>","source":"[CPane::OnShowControlBarMenu](#cpane__onshowcontrolbarmenu)"},{"content":"Called by the framework when a special pane menu is about to be displayed.","pos":[6730,6804]},{"pos":[6809,6868],"content":"<bpt id=\"p1\">[</bpt>CPane::OnShowControlBarMenu<ept id=\"p1\">](#cpane__onshowcontrolbarmenu)</ept>","source":"[CPane::OnShowControlBarMenu](#cpane__onshowcontrolbarmenu)"},{"content":"Called by the framework when a special pane menu is about to be displayed.","pos":[6869,6943]},{"content":"Used internally.","pos":[6971,6987]},{"pos":[6992,7035],"content":"<bpt id=\"p1\">[</bpt>CPane::RecalcLayout<ept id=\"p1\">](#cpane__recalclayout)</ept>","source":"[CPane::RecalcLayout](#cpane__recalclayout)"},{"content":"Recalculates layout information for the pane.","pos":[7036,7081]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::RecalcLayout<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__recalclayout)</ept>.)","pos":[7082,7184],"source":" (Overrides [CBasePane::RecalcLayout](../../mfc/reference/cbasepane-class.md#cbasepane__recalclayout).)"},{"pos":[7189,7226],"content":"<bpt id=\"p1\">[</bpt>CPane::SaveState<ept id=\"p1\">](#cpane__savestate)</ept>","source":"[CPane::SaveState](#cpane__savestate)"},{"content":"Saves the state of the pane to the registry.","pos":[7227,7271]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::SaveState<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__savestate)</ept>.)","pos":[7272,7368],"source":" (Overrides [CBasePane::SaveState](../../mfc/reference/cbasepane-class.md#cbasepane__savestate).)"},{"pos":[7373,7424],"content":"<bpt id=\"p1\">[</bpt>CPane::SetActiveInGroup<ept id=\"p1\">](#cpane__setactiveingroup)</ept>","source":"[CPane::SetActiveInGroup](#cpane__setactiveingroup)"},{"content":"Flags a pane as active.","pos":[7425,7448]},{"pos":[7453,7492],"content":"<bpt id=\"p1\">[</bpt>CPane::SetBorders<ept id=\"p1\">](#cpane__setborders)</ept>","source":"[CPane::SetBorders](#cpane__setborders)"},{"content":"Sets the border values of the pane.","pos":[7493,7528]},{"pos":[7533,7584],"content":"<bpt id=\"p1\">[</bpt>CPane::SetClientHotSpot<ept id=\"p1\">](#cpane__setclienthotspot)</ept>","source":"[CPane::SetClientHotSpot](#cpane__setclienthotspot)"},{"content":"Sets the hot spot for the pane.","pos":[7585,7616]},{"pos":[7621,7664],"content":"<bpt id=\"p1\">[</bpt>CPane::SetDockState<ept id=\"p1\">](#cpane__setdockstate)</ept>","source":"[CPane::SetDockState](#cpane__setdockstate)"},{"content":"Restores docking state information for the pane.","pos":[7665,7713]},{"pos":[7718,7775],"content":"<bpt id=\"p1\">[</bpt>CPane::SetExclusiveRowMode<ept id=\"p1\">](#cpane__setexclusiverowmode)</ept>","source":"[CPane::SetExclusiveRowMode](#cpane__setexclusiverowmode)"},{"content":"Enables or disables the exclusive row mode.","pos":[7776,7819]},{"pos":[7824,7873],"content":"<bpt id=\"p1\">[</bpt>CPane::SetMiniFrameRTC<ept id=\"p1\">](#cpane__setminiframertc)</ept>","source":"[CPane::SetMiniFrameRTC](#cpane__setminiframertc)"},{"content":"Sets the runtime class information for the default mini-frame window.","pos":[7874,7943]},{"pos":[7948,7987],"content":"<bpt id=\"p1\">[</bpt>CPane::SetMinSize<ept id=\"p1\">](#cpane__setminsize)</ept>","source":"[CPane::SetMinSize](#cpane__setminsize)"},{"content":"Sets the minimum allowed size for the pane.","pos":[7988,8031]},{"pos":[8036,8083],"content":"<bpt id=\"p1\">[</bpt>CPane::SetVirtualRect<ept id=\"p1\">](#cpane__setvirtualrect)</ept>","source":"[CPane::SetVirtualRect](#cpane__setvirtualrect)"},{"pos":[8084,8125],"content":"Sets the <bpt id=\"p1\">*</bpt>virtual rectangle<ept id=\"p1\">*</ept> of the pane.","source":"Sets the *virtual rectangle* of the pane."},{"pos":[8130,8193],"content":"<bpt id=\"p1\">[</bpt>CPane::StretchPaneDeferWndPos<ept id=\"p1\">](#cpane__stretchpanedeferwndpos)</ept>","source":"[CPane::StretchPaneDeferWndPos](#cpane__stretchpanedeferwndpos)"},{"content":"Stretches the pane vertically or horizontally based on docking style.","pos":[8194,8263]},{"pos":[8268,8315],"content":"<bpt id=\"p1\">[</bpt>CPane::ToggleAutoHide<ept id=\"p1\">](#cpane__toggleautohide)</ept>","source":"[CPane::ToggleAutoHide](#cpane__toggleautohide)"},{"content":"Toggles auto-hide mode.","pos":[8316,8339]},{"pos":[8344,8383],"content":"<bpt id=\"p1\">[</bpt>CPane::UndockPane<ept id=\"p1\">](#cpane__undockpane)</ept>","source":"[CPane::UndockPane](#cpane__undockpane)"},{"content":"Removes the pane from the dock site, default slider, or mini-frame window where it is currently docked.","pos":[8384,8487]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::UndockPane<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__undockpane)</ept>.)","pos":[8488,8586],"source":" (Overrides [CBasePane::UndockPane](../../mfc/reference/cbasepane-class.md#cbasepane__undockpane).)"},{"pos":[8591,8644],"content":"<bpt id=\"p1\">[</bpt>CPane::UpdateVirtualRect<ept id=\"p1\">](#cpane__updatevirtualrect)</ept>","source":"[CPane::UpdateVirtualRect](#cpane__updatevirtualrect)"},{"content":"Updates the virtual rectangle.","pos":[8645,8675]},{"pos":[8686,8703],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[8710,8714]},{"content":"Description","pos":[8715,8726]},{"pos":[8764,8805],"content":"<bpt id=\"p1\">[</bpt>CPane::OnAfterDock<ept id=\"p1\">](#cpane__onafterdock)</ept>","source":"[CPane::OnAfterDock](#cpane__onafterdock)"},{"content":"Called by the framework when a pane has been docked.","pos":[8806,8858]},{"pos":[8863,8906],"content":"<bpt id=\"p1\">[</bpt>CPane::OnAfterFloat<ept id=\"p1\">](#cpane__onafterfloat)</ept>","source":"[CPane::OnAfterFloat](#cpane__onafterfloat)"},{"content":"Called by the framework when a pane has been floated.","pos":[8907,8960]},{"pos":[8965,9008],"content":"<bpt id=\"p1\">[</bpt>CPane::OnBeforeDock<ept id=\"p1\">](#cpane__onbeforedock)</ept>","source":"[CPane::OnBeforeDock](#cpane__onbeforedock)"},{"content":"Called by the framework when the pane is about to be docked.","pos":[9009,9069]},{"pos":[9074,9119],"content":"<bpt id=\"p1\">[</bpt>CPane::OnBeforeFloat<ept id=\"p1\">](#cpane__onbeforefloat)</ept>","source":"[CPane::OnBeforeFloat](#cpane__onbeforefloat)"},{"content":"Called by the framework when a pane is about to be floated.","pos":[9120,9179]},{"pos":[9190,9202],"content":"Data Members","linkify":"Data Members","nodes":[{"content":"Data Members","pos":[0,12]}]},{"content":"Name","pos":[9209,9213]},{"content":"Description","pos":[9214,9225]},{"pos":[9263,9314],"content":"<bpt id=\"p1\">[</bpt>CPane::m_bHandleMinSize<ept id=\"p1\">](#cpane__m_bhandleminsize)</ept>","source":"[CPane::m_bHandleMinSize](#cpane__m_bhandleminsize)"},{"content":"Enables consistent handling of the minimal size for panes.","pos":[9315,9373]},{"pos":[9378,9429],"content":"<bpt id=\"p1\">[</bpt>CPane::m_recentDockInfo<ept id=\"p1\">](#cpane__m_recentdockinfo)</ept>","source":"[CPane::m_recentDockInfo](#cpane__m_recentdockinfo)"},{"content":"Contains recent docking information.","pos":[9430,9466]},{"pos":[9476,9483],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, <ph id=\"ph1\">`CPane`</ph> objects are not instantiated directly.","pos":[9487,9544],"source":"Typically, `CPane` objects are not instantiated directly."},{"content":"If you require a pane that has docking functionality, derive your object from <bpt id=\"p1\">[</bpt>CDockablePane<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept>.","pos":[9545,9683],"source":" If you require a pane that has docking functionality, derive your object from [CDockablePane](../../mfc/reference/cdockablepane-class.md)."},{"content":"If you require toolbar functionality, derive your object from <bpt id=\"p1\">[</bpt>CMFCToolBar<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept>.","pos":[9684,9802],"source":" If you require toolbar functionality, derive your object from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md)."},{"pos":[9809,10008],"content":"When you derive a class from <ph id=\"ph1\">`CPane`</ph>, it can be docked in a <bpt id=\"p1\">[</bpt>CDockSite<ept id=\"p1\">](../../mfc/reference/cdocksite-class.md)</ept> and it can be floated in a <bpt id=\"p2\">[</bpt>CPaneFrameWnd<ept id=\"p2\">](../../mfc/reference/cpaneframewnd-class.md)</ept>.","source":"When you derive a class from `CPane`, it can be docked in a [CDockSite](../../mfc/reference/cdocksite-class.md) and it can be floated in a [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md)."},{"pos":[10017,10038],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[10042,10089],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[10096,10149],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[10156,10197],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[10204,10255],"content":"<bpt id=\"p1\">[</bpt>CBasePane<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md)</ept>","source":"[CBasePane](../../mfc/reference/cbasepane-class.md)"},{"pos":[10262,10305],"content":"<bpt id=\"p1\">[</bpt>CPane<ept id=\"p1\">](../../mfc/reference/cpane-class.md)</ept>","source":"[CPane](../../mfc/reference/cpane-class.md)"},{"pos":[10314,10326],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[10330,10351],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxPane.h","source":"**Header:** afxPane.h"},{"pos":[10361,10430],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__adjustsizeimmediate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::AdjustSizeImmediate","linkify":"<a name=\"cpane__adjustsizeimmediate\"></a>  CPane::AdjustSizeImmediate","source":"<a name=\"cpane__adjustsizeimmediate\"></a>  CPane::AdjustSizeImmediate"},{"content":"Immediately recalculates the layout of a pane.","pos":[10434,10480]},{"pos":[10566,10576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bRecalcLayout`</ph>","pos":[10580,10600],"source":"[in] `bRecalcLayout`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to automatically recalculate the layout of the pane; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[10603,10683],"source":" `TRUE` to automatically recalculate the layout of the pane; otherwise, `FALSE`."},{"pos":[10693,10700],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method when you dynamically change the layout of a pane.","pos":[10704,10770]},{"content":"For example, you may want to call this method when you hide or show toolbar buttons.","pos":[10771,10855]},{"pos":[10865,10922],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__allocelements\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::AllocElements","linkify":"<a name=\"cpane__allocelements\"></a>  CPane::AllocElements","source":"<a name=\"cpane__allocelements\"></a>  CPane::AllocElements"},{"content":"Allocates storage for internal use.","pos":[10926,10961]},{"pos":[11047,11057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nElements`</ph>","pos":[11061,11077],"source":"[in] `nElements`"},{"content":"The number of elements for which to allocate storage.","pos":[11081,11134]},{"content":"[in] <ph id=\"ph1\">`cbElement`</ph>","pos":[11141,11157],"source":"[in] `cbElement`"},{"content":"The size, in bytes, of an element.","pos":[11161,11195]},{"pos":[11205,11217],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11221,11275],"content":"<ph id=\"ph1\">`FALSE`</ph> if memory allocation fails; otherwise, <ph id=\"ph2\">`TRUE`</ph>.","source":"`FALSE` if memory allocation fails; otherwise, `TRUE`."},{"pos":[11285,11354],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__allowshowonpanemenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::AllowShowOnPaneMenu","linkify":"<a name=\"cpane__allowshowonpanemenu\"></a>  CPane::AllowShowOnPaneMenu","source":"<a name=\"cpane__allowshowonpanemenu\"></a>  CPane::AllowShowOnPaneMenu"},{"content":"Specifies whether the pane is listed in the runtime-generated list of panes for the application.","pos":[11358,11454]},{"pos":[11524,11536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane is displayed in the list; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[11540,11604],"source":"`TRUE` if the pane is displayed in the list; otherwise, `FALSE`."},{"content":"The base implementation always returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[11605,11651],"source":" The base implementation always returns `TRUE`."},{"pos":[11661,11668],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The AppWizard-generated application contains a menu option that lists panes that it contains.","pos":[11672,11765]},{"content":"This method determines whether the pane is displayed in the list.","pos":[11766,11831]},{"pos":[11841,11906],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__calcavailablesize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::CalcAvailableSize","linkify":"<a name=\"cpane__calcavailablesize\"></a>  CPane::CalcAvailableSize","source":"<a name=\"cpane__calcavailablesize\"></a>  CPane::CalcAvailableSize"},{"content":"Calculates the difference in size between a specified rectangle and the current window rectangle.","pos":[11910,12007]},{"pos":[12085,12095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`rectRequired`</ph>","pos":[12099,12118],"source":"[in] `rectRequired`"},{"content":"The required rectangle.","pos":[12122,12145]},{"pos":[12155,12167],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12171,12262],"content":"The difference in width and height between <ph id=\"ph1\">`rectRequired`</ph> and the current window rectangle.","source":"The difference in width and height between `rectRequired` and the current window rectangle."},{"pos":[12272,12331],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__calcinsiderect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::CalcInsideRect","linkify":"<a name=\"cpane__calcinsiderect\"></a>  CPane::CalcInsideRect","source":"<a name=\"cpane__calcinsiderect\"></a>  CPane::CalcInsideRect"},{"content":"Calculates the inside rectangle of a pane, including the borders and grippers.","pos":[12335,12413]},{"pos":[12504,12514],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`rect`</ph>","pos":[12518,12530],"source":"[out] `rect`"},{"content":"Contains the size and offset of the client area of the pane.","pos":[12534,12594]},{"content":"[in] <ph id=\"ph1\">`bHorz`</ph>","pos":[12601,12613],"source":"[in] `bHorz`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the pane is oriented horizontally; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[12616,12681],"source":" `TRUE` if the pane is oriented horizontally; otherwise, `FALSE`."},{"pos":[12691,12698],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework when it has to recalculate the layout for a pane.","pos":[12702,12790]},{"content":"The <ph id=\"ph1\">`rect`</ph> parameter is filled with the size and offset of the client area of the pane.","pos":[12791,12878],"source":" The `rect` parameter is filled with the size and offset of the client area of the pane."},{"content":"This includes its borders and grippers.","pos":[12879,12918]},{"pos":[12928,12999],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__calcrecentdockedrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::CalcRecentDockedRect","linkify":"<a name=\"cpane__calcrecentdockedrect\"></a>  CPane::CalcRecentDockedRect","source":"<a name=\"cpane__calcrecentdockedrect\"></a>  CPane::CalcRecentDockedRect"},{"content":"Calculates the recently docked rectangle.","pos":[13003,13044]},{"pos":[13098,13105],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13109,13181],"content":"This method updates <bpt id=\"p1\">[</bpt>CPane::m_recentDockInfo<ept id=\"p1\">](#cpane__m_recentdockinfo)</ept>.","source":"This method updates [CPane::m_recentDockInfo](#cpane__m_recentdockinfo)."},{"pos":[13191,13238],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__calcsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::CalcSize","linkify":"<a name=\"cpane__calcsize\"></a>  CPane::CalcSize","source":"<a name=\"cpane__calcsize\"></a>  CPane::CalcSize"},{"content":"Calculates the size of the pane.","pos":[13242,13274]},{"pos":[13339,13349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bVertDock`</ph>","pos":[13353,13369],"source":"[in] `bVertDock`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the pane is being docked vertically, <ph id=\"ph2\">`FALSE`</ph> otherwise.","pos":[13372,13438],"source":" `TRUE` if the pane is being docked vertically, `FALSE` otherwise."},{"pos":[13448,13460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The default implementation of this method returns a size of (0, 0).","pos":[13464,13531]},{"pos":[13541,13548],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Derived classes should override this method.","pos":[13552,13596]},{"pos":[13606,13659],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__canbedocked\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::CanBeDocked","linkify":"<a name=\"cpane__canbedocked\"></a>  CPane::CanBeDocked","source":"<a name=\"cpane__canbedocked\"></a>  CPane::CanBeDocked"},{"content":"Determines if the pane can be docked at the specified base pane.","pos":[13663,13727]},{"pos":[13808,13818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDockBar`</ph>","pos":[13822,13837],"source":"[in] `pDockBar`"},{"content":"Specifies the pane where this pane is to be docked.","pos":[13841,13892]},{"pos":[13902,13914],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13918,14002],"content":"<ph id=\"ph1\">`TRUE`</ph> if this pane can be docked at the specified docking pane; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if this pane can be docked at the specified docking pane; otherwise, `FALSE`."},{"pos":[14012,14019],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is usually called by the framework to determine whether a pane can be docked at the specified docking pane.","pos":[14023,14142]},{"content":"To determine whether the pane can be docked, the method evaluates the pane's currently enabled docking alignment.","pos":[14143,14256]},{"pos":[14263,14426],"content":"You enable docking to the various sides of the frame window by calling <bpt id=\"p1\">[</bpt>CBasePane::EnableDocking<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)</ept>.","source":"You enable docking to the various sides of the frame window by calling [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)."},{"pos":[14436,14505],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__canbetabbeddocument\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::CanBeTabbedDocument","linkify":"<a name=\"cpane__canbetabbeddocument\"></a>  CPane::CanBeTabbedDocument","source":"<a name=\"cpane__canbetabbeddocument\"></a>  CPane::CanBeTabbedDocument"},{"content":"Determines if the pane can be converted to a tabbed document.","pos":[14509,14570]},{"pos":[14640,14652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14656,14733],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane can be converted to a tabbed document; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane can be converted to a tabbed document; otherwise, `FALSE`."},{"pos":[14743,14750],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method in a derived class and return <ph id=\"ph1\">`FALSE`</ph> if you want to prevent a pane from being converted to a tabbed document.","pos":[14754,14885],"source":"Override this method in a derived class and return `FALSE` if you want to prevent a pane from being converted to a tabbed document."},{"content":"A tabbed document will not be listed in the Window Position menu.","pos":[14886,14951]},{"pos":[14961,15038],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__converttotabbeddocument\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::ConvertToTabbedDocument","linkify":"<a name=\"cpane__converttotabbeddocument\"></a>  CPane::ConvertToTabbedDocument","source":"<a name=\"cpane__converttotabbeddocument\"></a>  CPane::ConvertToTabbedDocument"},{"content":"Converts a dockable pane to a tabbed document.","pos":[15042,15088]},{"pos":[15179,15189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bActiveTabOnly`</ph>","pos":[15193,15214],"source":"[in] `bActiveTabOnly`"},{"content":"Not used in <ph id=\"ph1\">`CPane::ConvertToTabbedDocument`</ph>.","pos":[15218,15263],"source":" Not used in `CPane::ConvertToTabbedDocument`."},{"pos":[15273,15280],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Only dockable panes can be converted to tabbed documents.","pos":[15284,15341]},{"content":"For information, see <bpt id=\"p1\">[</bpt>CDockablePane::ConvertToTabbedDocument<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md#cdockablepane__converttotabbeddocument)</ept>.","pos":[15342,15487],"source":" For information, see [CDockablePane::ConvertToTabbedDocument](../../mfc/reference/cdockablepane-class.md#cdockablepane__converttotabbeddocument)."},{"pos":[15497,15546],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__copystate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::CopyState","linkify":"<a name=\"cpane__copystate\"></a>  CPane::CopyState","source":"<a name=\"cpane__copystate\"></a>  CPane::CopyState"},{"content":"Copies the state of a pane.","pos":[15550,15577]},{"pos":[15642,15652],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pOrgBar`</ph>","pos":[15656,15670],"source":"[in] `pOrgBar`"},{"content":"A pointer to a pane.","pos":[15674,15694]},{"pos":[15704,15711],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15715,15777],"content":"This method copies the state of <ph id=\"ph1\">`pOrgBar`</ph> to the current pane.","source":"This method copies the state of `pOrgBar` to the current pane."},{"pos":[15787,15830],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::Create","linkify":"<a name=\"cpane__create\"></a>  CPane::Create","source":"<a name=\"cpane__create\"></a>  CPane::Create"},{"pos":[15834,15930],"content":"Creates a control bar and attaches it to the <bpt id=\"p1\">[</bpt>CPane<ept id=\"p1\">](../../mfc/reference/cpane-class.md)</ept> object.","source":"Creates a control bar and attaches it to the [CPane](../../mfc/reference/cpane-class.md) object."},{"pos":[16184,16194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszClassName`</ph>","pos":[16198,16218],"source":"[in] `lpszClassName`"},{"content":"Specifies the name of the Windows class.","pos":[16222,16262]},{"content":"[in] <ph id=\"ph1\">`dwStyle`</ph>","pos":[16269,16283],"source":"[in] `dwStyle`"},{"content":"Specifies the window style attributes.","pos":[16287,16325]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Window Styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept>.","pos":[16326,16406],"source":" For more information, see [Window Styles](../../mfc/reference/window-styles.md)."},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[16413,16424],"source":"[in] `rect`"},{"content":"Specifies the initial size and position of the <ph id=\"ph1\">`pParentWnd`</ph> window, in client coordinates.","pos":[16428,16518],"source":" Specifies the initial size and position of the `pParentWnd` window, in client coordinates."},{"content":"[in] [out] <ph id=\"ph1\">`pParentWnd`</ph>","pos":[16525,16548],"source":"[in] [out] `pParentWnd`"},{"content":"Specifies the parent window of this pane.","pos":[16552,16593]},{"content":"[in] <ph id=\"ph1\">`nID`</ph>","pos":[16600,16610],"source":"[in] `nID`"},{"content":"Specifies the ID of the pane.","pos":[16614,16643]},{"content":"[in] <ph id=\"ph1\">`dwControlBarStyle`</ph>","pos":[16650,16674],"source":"[in] `dwControlBarStyle`"},{"content":"Specifies the style for the pane.","pos":[16678,16711]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CBasePane::CreateEx<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__createex)</ept>.","pos":[16712,16820],"source":" For more information, see [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex)."},{"content":"[in] [out] <ph id=\"ph1\">`pContext`</ph>","pos":[16827,16848],"source":"[in] [out] `pContext`"},{"content":"Specifies the create context of the pane.","pos":[16852,16893]},{"pos":[16903,16915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16919,16983],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane was created successfully; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane was created successfully; otherwise, `FALSE`."},{"pos":[16993,17000],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17004,17077],"content":"This method creates a Windows pane and attaches it to the <ph id=\"ph1\">`CPane`</ph> object.","source":"This method creates a Windows pane and attaches it to the `CPane` object."},{"pos":[17084,17286],"content":"If you have not explicitly initialized <bpt id=\"p1\">[</bpt>CPane::m_recentDockInfo<ept id=\"p1\">](#cpane__m_recentdockinfo)</ept> before you call <ph id=\"ph1\">`Create`</ph>, the parameter <ph id=\"ph2\">`rect`</ph> will be used as the rectangle when floating or docking the pane.","source":"If you have not explicitly initialized [CPane::m_recentDockInfo](#cpane__m_recentdockinfo) before you call `Create`, the parameter `rect` will be used as the rectangle when floating or docking the pane."},{"pos":[17296,17371],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__createdefaultminiframe\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::CreateDefaultMiniframe","linkify":"<a name=\"cpane__createdefaultminiframe\"></a>  CPane::CreateDefaultMiniframe","source":"<a name=\"cpane__createdefaultminiframe\"></a>  CPane::CreateDefaultMiniframe"},{"content":"Creates a mini-frame window for a floating pane.","pos":[17375,17423]},{"pos":[17514,17524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`rectInitial`</ph>","pos":[17528,17546],"source":"[in] `rectInitial`"},{"content":"Specifies the initial size and position, in screen coordinates, of the mini-frame window to create.","pos":[17550,17649]},{"pos":[17659,17671],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The newly created mini-frame window.","pos":[17675,17711]},{"pos":[17721,17728],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework to create a mini-frame window when a pane is floated.","pos":[17732,17824]},{"content":"The mini-frame window can be of type <bpt id=\"p1\">[</bpt>CPaneFrameWnd<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> or of type <bpt id=\"p2\">[</bpt>CMultiPaneFrameWnd<ept id=\"p2\">](../../mfc/reference/cmultipaneframewnd-class.md)</ept>.","pos":[17825,18003],"source":" The mini-frame window can be of type [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) or of type [CMultiPaneFrameWnd](../../mfc/reference/cmultipaneframewnd-class.md)."},{"content":"A multi mini-frame window is created if the pane has the <ph id=\"ph1\">`AFX_CBRS_FLOAT_MULTI`</ph> style.","pos":[18004,18090],"source":" A multi mini-frame window is created if the pane has the `AFX_CBRS_FLOAT_MULTI` style."},{"content":"The runtime class information for the mini-frame window is stored in the <ph id=\"ph1\">`CPane::m_pMiniFrameRTC`</ph> member.","pos":[18097,18202],"source":"The runtime class information for the mini-frame window is stored in the `CPane::m_pMiniFrameRTC` member."},{"content":"You can use a derived class to set this member if you decide to create customized mini-frame windows.","pos":[18203,18304]},{"pos":[18314,18361],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__createex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::CreateEx","linkify":"<a name=\"cpane__createex\"></a>  CPane::CreateEx","source":"<a name=\"cpane__createex\"></a>  CPane::CreateEx"},{"pos":[18365,18461],"content":"Creates a control bar and attaches it to the <bpt id=\"p1\">[</bpt>CPane<ept id=\"p1\">](../../mfc/reference/cpane-class.md)</ept> object.","source":"Creates a control bar and attaches it to the [CPane](../../mfc/reference/cpane-class.md) object."},{"pos":[18740,18750],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwStyleEx`</ph>","pos":[18754,18770],"source":"[in] `dwStyleEx`"},{"content":"Specifies extended window style attributes.","pos":[18774,18817]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Extended Window Styles<ept id=\"p1\">](../../mfc/reference/extended-window-styles.md)</ept>.","pos":[18818,18916],"source":" For more information, see [Extended Window Styles](../../mfc/reference/extended-window-styles.md)."},{"content":"[in] <ph id=\"ph1\">`lpszClassName`</ph>","pos":[18923,18943],"source":"[in] `lpszClassName`"},{"content":"Specifies the name of the Windows class.","pos":[18947,18987]},{"content":"[in] <ph id=\"ph1\">`dwStyle`</ph>","pos":[18994,19008],"source":"[in] `dwStyle`"},{"content":"Specifies window style attributes.","pos":[19012,19046]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Window Styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept>.","pos":[19047,19127],"source":" For more information, see [Window Styles](../../mfc/reference/window-styles.md)."},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[19134,19145],"source":"[in] `rect`"},{"content":"Specifies the initial size and position of the <ph id=\"ph1\">`pParentWnd`</ph> window, in client coordinates.","pos":[19149,19239],"source":" Specifies the initial size and position of the `pParentWnd` window, in client coordinates."},{"content":"[in] [out] <ph id=\"ph1\">`pParentWnd`</ph>","pos":[19246,19269],"source":"[in] [out] `pParentWnd`"},{"content":"Specifies the parent window of this pane.","pos":[19273,19314]},{"content":"[in] <ph id=\"ph1\">`nID`</ph>","pos":[19321,19331],"source":"[in] `nID`"},{"content":"Specifies the ID of the pane.","pos":[19335,19364]},{"content":"[in] <ph id=\"ph1\">`dwControlBarStyle`</ph>","pos":[19371,19395],"source":"[in] `dwControlBarStyle`"},{"content":"Specifies the style for the pane.","pos":[19399,19432]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CBasePane::CreateEx<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__createex)</ept>.","pos":[19433,19541],"source":" For more information, see [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex)."},{"content":"[in] [out] <ph id=\"ph1\">`pContext`</ph>","pos":[19548,19569],"source":"[in] [out] `pContext`"},{"content":"Specifies the create context for the pane.","pos":[19573,19615]},{"pos":[19625,19637],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19641,19705],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane was created successfully; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane was created successfully; otherwise, `FALSE`."},{"pos":[19715,19722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19726,19799],"content":"This method creates a Windows pane and attaches it to the <ph id=\"ph1\">`CPane`</ph> object.","source":"This method creates a Windows pane and attaches it to the `CPane` object."},{"pos":[19806,20010],"content":"If you have not explicitly initialized <bpt id=\"p1\">[</bpt>CPane::m_recentDockInfo<ept id=\"p1\">](#cpane__m_recentdockinfo)</ept> before you call <ph id=\"ph1\">`CreateEx`</ph>, the parameter <ph id=\"ph2\">`rect`</ph> will be used as the rectangle when floating or docking the pane.","source":"If you have not explicitly initialized [CPane::m_recentDockInfo](#cpane__m_recentdockinfo) before you call `CreateEx`, the parameter `rect` will be used as the rectangle when floating or docking the pane."},{"pos":[20020,20073],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__dockbymouse\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::DockByMouse","linkify":"<a name=\"cpane__dockbymouse\"></a>  CPane::DockByMouse","source":"<a name=\"cpane__dockbymouse\"></a>  CPane::DockByMouse"},{"content":"Docks a pane by using the mouse.","pos":[20077,20109]},{"pos":[20181,20191],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDockBar`</ph>","pos":[20195,20210],"source":"[in] `pDockBar`"},{"content":"Specifies the base pane to which to dock this pane.","pos":[20214,20265]},{"pos":[20275,20287],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20291,20354],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane was docked successfully; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane was docked successfully; otherwise, `FALSE`."},{"pos":[20364,20411],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__dockpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::DockPane","linkify":"<a name=\"cpane__dockpane\"></a>  CPane::DockPane","source":"<a name=\"cpane__dockpane\"></a>  CPane::DockPane"},{"content":"Docks the floating pane to a base pane.","pos":[20415,20454]},{"pos":[20584,20594],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] [out] <ph id=\"ph1\">`pDockBar`</ph>","pos":[20598,20619],"source":"[in] [out] `pDockBar`"},{"content":"Specifies the base pane to dock this pane to.","pos":[20623,20668]},{"content":"[in] <ph id=\"ph1\">`lpRect`</ph>","pos":[20675,20688],"source":"[in] `lpRect`"},{"content":"Specifies the rectangle on the base pane where this pane is to be docked.","pos":[20692,20765]},{"content":"[in] <ph id=\"ph1\">`dockMethod`</ph>","pos":[20772,20789],"source":"[in] `dockMethod`"},{"content":"Specifies the docking method to use.","pos":[20793,20829]},{"content":"Available options are as follows:","pos":[20830,20863]},{"content":"Option","pos":[20870,20876]},{"content":"Description","pos":[20877,20888]},{"content":"The framework uses this option when the docking method is unknown.","pos":[20941,21007]},{"content":"The pane does not store its most recent floating position.","pos":[21008,21066]},{"content":"You can also use this option to programmatically dock a pane when you do not have to store the recent floating position.","pos":[21067,21187]},{"content":"Used internally.","pos":[21203,21219]},{"content":"This option is used when the gripper is double-clicked.","pos":[21239,21294]},{"content":"The pane is repositioned at its most recent docking position.","pos":[21295,21356]},{"content":"If the pane is undocked by double-clicking, the pane is repositioned at its most recent floating position.","pos":[21357,21463]},{"content":"This option can be used to programmatically dock the pane.","pos":[21478,21536]},{"content":"The pane stores its most recent floating position.","pos":[21537,21587]},{"pos":[21602,21665],"content":"The pane is docked in the region that is specified by <ph id=\"ph1\">`lpRect`</ph>.","source":"The pane is docked in the region that is specified by `lpRect`."},{"content":"When you use this option, the framework draws the pane as an outline frame while it is being moved.","pos":[21684,21783]},{"pos":[21794,21806],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21810,21873],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane was docked successfully; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane was docked successfully; otherwise, `FALSE`."},{"pos":[21883,21890],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method docks the pane to the base pane that is specified by the <ph id=\"ph1\">`pDockBar`</ph> parameter.","pos":[21894,21984],"source":"This method docks the pane to the base pane that is specified by the `pDockBar` parameter."},{"content":"You must first enable docking by calling <bpt id=\"p1\">[</bpt>CBasePane::EnableDocking<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)</ept>.","pos":[21985,22118],"source":" You must first enable docking by calling [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking)."},{"pos":[22128,22191],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__dockpanestandard\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::DockPaneStandard","linkify":"<a name=\"cpane__dockpanestandard\"></a>  CPane::DockPaneStandard","source":"<a name=\"cpane__dockpanestandard\"></a>  CPane::DockPaneStandard"},{"content":"Docks a pane by using outline (standard) docking.","pos":[22195,22244]},{"pos":[22320,22330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bWasDocked`</ph>","pos":[22334,22351],"source":"[in] `bWasDocked`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the pane was successfully docked; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[22354,22418],"source":" `TRUE` if the pane was successfully docked; otherwise, `FALSE`."},{"pos":[22428,22440],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22444,22490],"content":"This method always returns the <ph id=\"ph1\">`this`</ph> pointer.","source":"This method always returns the `this` pointer."},{"pos":[22500,22507],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used only for panes that are derived from the <bpt id=\"p1\">[</bpt>CDockablePane Class<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept>.","pos":[22511,22638],"source":"This method is used only for panes that are derived from the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CDockablePane::DockPaneStandard<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md#cdockablepane__dockpanestandard)</ept>.","pos":[22639,22775],"source":" For more information, see [CDockablePane::DockPaneStandard](../../mfc/reference/cdockablepane-class.md#cdockablepane__dockpanestandard)."},{"pos":[22785,22850],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__docktoframewindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::DockToFrameWindow","linkify":"<a name=\"cpane__docktoframewindow\"></a>  CPane::DockToFrameWindow","source":"<a name=\"cpane__docktoframewindow\"></a>  CPane::DockToFrameWindow"},{"content":"Docks a dockable pane to a frame.","pos":[22854,22887]},{"pos":[23137,23147],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwAlignment`</ph>","pos":[23151,23169],"source":"[in] `dwAlignment`"},{"content":"The side of the parent frame that you want to dock the pane to.","pos":[23173,23236]},{"content":"[in] <ph id=\"ph1\">`lpRect`</ph>","pos":[23243,23256],"source":"[in] `lpRect`"},{"content":"The specified size.","pos":[23260,23279]},{"content":"[in] <ph id=\"ph1\">`dwDockFlags`</ph>","pos":[23286,23304],"source":"[in] `dwDockFlags`"},{"content":"Ignored.","pos":[23308,23316]},{"content":"[in] <ph id=\"ph1\">`pRelativeBar`</ph>","pos":[23323,23342],"source":"[in] `pRelativeBar`"},{"content":"Ignored.","pos":[23346,23354]},{"content":"[in] <ph id=\"ph1\">`nRelativeIndex`</ph>","pos":[23361,23382],"source":"[in] `nRelativeIndex`"},{"content":"Ignored.","pos":[23386,23394]},{"content":"[in] <ph id=\"ph1\">`bOuterEdge`</ph>","pos":[23401,23418],"source":"[in] `bOuterEdge`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph> and there are other dockable panes at the side that are specified by <ph id=\"ph2\">`dwAlignment`</ph>, the pane is docked outside the other panes, closer to the edge of the parent frame.","pos":[23422,23599],"source":" If `TRUE` and there are other dockable panes at the side that are specified by `dwAlignment`, the pane is docked outside the other panes, closer to the edge of the parent frame."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, the pane is docked closer to the center of the client area.","pos":[23600,23671],"source":" If `FALSE`, the pane is docked closer to the center of the client area."},{"pos":[23681,23693],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23697,23827],"content":"<ph id=\"ph1\">`FALSE`</ph> if a pane divider ( <bpt id=\"p1\">[</bpt>CPaneDivider Class<ept id=\"p1\">](../../mfc/reference/cpanedivider-class.md)</ept>) cannot be created; otherwise, <ph id=\"ph2\">`TRUE`</ph>.","source":"`FALSE` if a pane divider ( [CPaneDivider Class](../../mfc/reference/cpanedivider-class.md)) cannot be created; otherwise, `TRUE`."},{"pos":[23837,23844],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23854,23925],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__doesallowsiblingbars\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::DoesAllowSiblingBars","linkify":"<a name=\"cpane__doesallowsiblingbars\"></a>  CPane::DoesAllowSiblingBars","source":"<a name=\"cpane__doesallowsiblingbars\"></a>  CPane::DoesAllowSiblingBars"},{"content":"Indicates whether you can dock another pane at the same row where the current pane is docked.","pos":[23929,24022]},{"pos":[24093,24105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24109,24200],"content":"<ph id=\"ph1\">`TRUE`</ph> if this pane can dock to another pane on the same row as itself; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if this pane can dock to another pane on the same row as itself; otherwise, `FALSE`."},{"pos":[24210,24217],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24221,24330],"content":"You can enable or disable this behavior by calling <bpt id=\"p1\">[</bpt>CPane::SetExclusiveRowMode<ept id=\"p1\">](#cpane__setexclusiverowmode)</ept>.","source":"You can enable or disable this behavior by calling [CPane::SetExclusiveRowMode](#cpane__setexclusiverowmode)."},{"content":"By default, toolbars have exclusive row mode disabled and the menu bar has exclusive row mode enabled.","pos":[24337,24439]},{"pos":[24449,24498],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__floatpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::FloatPane","linkify":"<a name=\"cpane__floatpane\"></a>  CPane::FloatPane","source":"<a name=\"cpane__floatpane\"></a>  CPane::FloatPane"},{"content":"Floats the pane.","pos":[24502,24518]},{"pos":[24661,24671],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`rectFloat`</ph>","pos":[24675,24691],"source":"[in] `rectFloat`"},{"content":"Specifies the location, in screen coordinates, to position the pane when it is floated.","pos":[24695,24782]},{"content":"[in] <ph id=\"ph1\">`dockMethod`</ph>","pos":[24789,24806],"source":"[in] `dockMethod`"},{"content":"Specifies the docking method to use when the pane is floated.","pos":[24810,24871]},{"content":"For a list of possible values, see <bpt id=\"p1\">[</bpt>CPane::DockPane<ept id=\"p1\">](#cpane__dockpane)</ept>.","pos":[24872,24943],"source":" For a list of possible values, see [CPane::DockPane](#cpane__dockpane)."},{"content":"[in] <ph id=\"ph1\">`bShow`</ph>","pos":[24950,24962],"source":"[in] `bShow`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to show the pane when floated; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[24965,25023],"source":" `TRUE` to show the pane when floated; otherwise, `FALSE`."},{"pos":[25033,25045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25049,25252],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane was floated successfully or if the pane cannot be floated because <bpt id=\"p1\">[</bpt>CBasePane::CanFloat<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__canfloat)</ept> returns <ph id=\"ph2\">`FALSE`</ph>; otherwise, <ph id=\"ph3\">`FALSE`</ph>.","source":"`TRUE` if the pane was floated successfully or if the pane cannot be floated because [CBasePane::CanFloat](../../mfc/reference/cbasepane-class.md#cbasepane__canfloat) returns `FALSE`; otherwise, `FALSE`."},{"pos":[25262,25269],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to float the pane at the position that is specified by the <ph id=\"ph1\">`rectFloat`</ph> parameter.","pos":[25273,25371],"source":"Call this method to float the pane at the position that is specified by the `rectFloat` parameter."},{"content":"This method automatically creates a parent mini-frame window for the pane.","pos":[25372,25446]},{"pos":[25456,25531],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__getavailableexpandsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::GetAvailableExpandSize","linkify":"<a name=\"cpane__getavailableexpandsize\"></a>  CPane::GetAvailableExpandSize","source":"<a name=\"cpane__getavailableexpandsize\"></a>  CPane::GetAvailableExpandSize"},{"content":"Returns the amount, in pixels, that the pane can expand.","pos":[25535,25591]},{"pos":[25663,25675],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the pane is docked horizontally, the return value is the available width; otherwise, the return value is the available height.","pos":[25679,25808]},{"pos":[25818,25825],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25835,25912],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__getavailablestretchsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::GetAvailableStretchSize","linkify":"<a name=\"cpane__getavailablestretchsize\"></a>  CPane::GetAvailableStretchSize","source":"<a name=\"cpane__getavailablestretchsize\"></a>  CPane::GetAvailableStretchSize"},{"content":"Returns the amount, in pixels, that the pane can shrink.","pos":[25916,25972]},{"pos":[26045,26057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The amount, in pixels, that the pane can shrink.","pos":[26061,26109]},{"content":"If the pane is docked horizontally, this amount is the available width; otherwise, it is the available height.","pos":[26110,26220]},{"pos":[26230,26237],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26241,26480],"content":"The available stretch size is calculated by subtracting the minimum allowed size for the pane ( <bpt id=\"p1\">[</bpt>CPane::GetMinSize<ept id=\"p1\">](#cpane__getminsize)</ept>) from the current size ( <bpt id=\"p2\">[</bpt>CWnd::GetWindowRect<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__getwindowrect)</ept>).","source":"The available stretch size is calculated by subtracting the minimum allowed size for the pane ( [CPane::GetMinSize](#cpane__getminsize)) from the current size ( [CWnd::GetWindowRect](../../mfc/reference/cwnd-class.md#cwnd__getwindowrect))."},{"pos":[26490,26541],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__getborders\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::GetBorders","linkify":"<a name=\"cpane__getborders\"></a>  CPane::GetBorders","source":"<a name=\"cpane__getborders\"></a>  CPane::GetBorders"},{"content":"Returns the width of the borders of the pane.","pos":[26545,26590]},{"pos":[26644,26656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that contains the current width, in pixels, of each side of the pane.","pos":[26660,26793],"source":"A [CRect](../../atl-mfc-shared/reference/crect-class.md) object that contains the current width, in pixels, of each side of the pane."},{"content":"For example, the value of the <ph id=\"ph1\">`left`</ph> member of the <ph id=\"ph2\">`CRect`</ph> object is the width of the left border.","pos":[26794,26892],"source":" For example, the value of the `left` member of the `CRect` object is the width of the left border."},{"pos":[26902,26909],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26913,26990],"content":"To set the size of the borders, call <bpt id=\"p1\">[</bpt>CPane::SetBorders<ept id=\"p1\">](#cpane__setborders)</ept>.","source":"To set the size of the borders, call [CPane::SetBorders](#cpane__setborders)."},{"pos":[27000,27063],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__getclienthotspot\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::GetClientHotSpot","linkify":"<a name=\"cpane__getclienthotspot\"></a>  CPane::GetClientHotSpot","source":"<a name=\"cpane__getclienthotspot\"></a>  CPane::GetClientHotSpot"},{"pos":[27067,27103],"content":"Returns the <bpt id=\"p1\">*</bpt>hot spot<ept id=\"p1\">*</ept> for the pane.","source":"Returns the *hot spot* for the pane."},{"pos":[27164,27176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27186,27193],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">*</bpt>hot spot<ept id=\"p1\">*</ept> is the point on the pane that the user selects and holds to move the pane.","pos":[27197,27286],"source":"The *hot spot* is the point on the pane that the user selects and holds to move the pane."},{"content":"A hot spot is used for smooth animation when the pane is moved from a docked position.","pos":[27287,27373]},{"pos":[27383,27442],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__getdocksiterow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::GetDockSiteRow","linkify":"<a name=\"cpane__getdocksiterow\"></a>  CPane::GetDockSiteRow","source":"<a name=\"cpane__getdocksiterow\"></a>  CPane::GetDockSiteRow"},{"pos":[27446,27570],"content":"Returns the dock row ( <bpt id=\"p1\">[</bpt>CDockingPanesRow Class<ept id=\"p1\">](../../mfc/reference/cdockingpanesrow-class.md)</ept>) in which the pane is docked.","source":"Returns the dock row ( [CDockingPanesRow Class](../../mfc/reference/cdockingpanesrow-class.md)) in which the pane is docked."},{"pos":[27640,27652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27656,27771],"content":"A <ph id=\"ph1\">`CDockingPanesRow`</ph>* that points to the dock row in which the pane is docked, or <ph id=\"ph2\">`NULL`</ph> if the pane is not docked.","source":"A `CDockingPanesRow`* that points to the dock row in which the pane is docked, or `NULL` if the pane is not docked."},{"pos":[27781,27850],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__getexclusiverowmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::GetExclusiveRowMode","linkify":"<a name=\"cpane__getexclusiverowmode\"></a>  CPane::GetExclusiveRowMode","source":"<a name=\"cpane__getexclusiverowmode\"></a>  CPane::GetExclusiveRowMode"},{"content":"Determines if the pane is in exclusive row mode.","pos":[27854,27902]},{"pos":[27972,27984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27988,28052],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane is in exclusive row mode; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane is in exclusive row mode; otherwise, `FALSE`."},{"pos":[28062,28069],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28073,28182],"content":"For more information about exclusive row mode, see <bpt id=\"p1\">[</bpt>CPane::SetExclusiveRowMode<ept id=\"p1\">](#cpane__setexclusiverowmode)</ept>.","source":"For more information about exclusive row mode, see [CPane::SetExclusiveRowMode](#cpane__setexclusiverowmode)."},{"pos":[28192,28243],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__gethotspot\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::GetHotSpot","linkify":"<a name=\"cpane__gethotspot\"></a>  CPane::GetHotSpot","source":"<a name=\"cpane__gethotspot\"></a>  CPane::GetHotSpot"},{"pos":[28247,28327],"content":"Returns the hot spot that is stored in an underlying <ph id=\"ph1\">`CMFCDragFrameImpl`</ph> object.","source":"Returns the hot spot that is stored in an underlying `CMFCDragFrameImpl` object."},{"pos":[28382,28394],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28404,28411],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`CPane`</ph> class contains a <ph id=\"ph2\">`CMFCDragFrameImpl`</ph> object, <ph id=\"ph3\">`m_dragFrameImpl`</ph>, that is responsible for drawing the rectangle that appears when the user moves a pane in the standard docking mode.","pos":[28415,28606],"source":"The `CPane` class contains a `CMFCDragFrameImpl` object, `m_dragFrameImpl`, that is responsible for drawing the rectangle that appears when the user moves a pane in the standard docking mode."},{"content":"The hot spot is used to draw the rectangle relative to the current mouse position as the user moves the pane.","pos":[28607,28716]},{"pos":[28726,28777],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__getminsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::GetMinSize","linkify":"<a name=\"cpane__getminsize\"></a>  CPane::GetMinSize","source":"<a name=\"cpane__getminsize\"></a>  CPane::GetMinSize"},{"content":"Retrieves the minimum allowed size for the pane.","pos":[28781,28829]},{"pos":[28901,28911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`size`</ph>","pos":[28915,28927],"source":"[out] `size`"},{"content":"A <ph id=\"ph1\">`CSize`</ph> object that is filled with the minimum allowed size.","pos":[28931,28993],"source":" A `CSize` object that is filled with the minimum allowed size."},{"pos":[29003,29010],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29020,29073],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__getpanename\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::GetPaneName","linkify":"<a name=\"cpane__getpanename\"></a>  CPane::GetPaneName","source":"<a name=\"cpane__getpanename\"></a>  CPane::GetPaneName"},{"content":"Retrieves the title for the pane.","pos":[29077,29110]},{"pos":[29188,29198],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`strName`</ph>","pos":[29202,29217],"source":"[out] `strName`"},{"content":"A <ph id=\"ph1\">`CString`</ph> object that is filled with the caption name.","pos":[29221,29277],"source":" A `CString` object that is filled with the caption name."},{"pos":[29287,29294],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The pane title is displayed in the caption area when the pane is docked or floating.","pos":[29298,29382]},{"content":"If the pane is part of a tabbed group, the title is displayed in the tab area.","pos":[29383,29461]},{"content":"If the pane is in auto-hide mode, the title is displayed on a <ph id=\"ph1\">`CMFCAutoHideButton`</ph>.","pos":[29462,29545],"source":" If the pane is in auto-hide mode, the title is displayed on a `CMFCAutoHideButton`."},{"pos":[29555,29614],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__getvirtualrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::GetVirtualRect","linkify":"<a name=\"cpane__getvirtualrect\"></a>  CPane::GetVirtualRect","source":"<a name=\"cpane__getvirtualrect\"></a>  CPane::GetVirtualRect"},{"pos":[29618,29664],"content":"Retrieves the <bpt id=\"p1\">*</bpt>virtual rectangle<ept id=\"p1\">*</ept> of the pane.","source":"Retrieves the *virtual rectangle* of the pane."},{"pos":[29739,29749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`rectVirtual`</ph>","pos":[29753,29772],"source":"[out] `rectVirtual`"},{"content":"A <ph id=\"ph1\">`CRect`</ph> object that is filled with the virtual rectangle.","pos":[29776,29835],"source":" A `CRect` object that is filled with the virtual rectangle."},{"pos":[29845,29852],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a pane is moved, the framework stores the original position of the pane in a virtual rectangle.","pos":[29856,29956]},{"content":"The framework can use the virtual rectangle to restore the original position of the pane.","pos":[29957,30046]},{"content":"Do not call methods that are related to virtual rectangles unless you are moving panes programmatically.","pos":[30053,30157]},{"pos":[30167,30224],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__ischangestate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::IsChangeState","linkify":"<a name=\"cpane__ischangestate\"></a>  CPane::IsChangeState","source":"<a name=\"cpane__ischangestate\"></a>  CPane::IsChangeState"},{"pos":[30228,30400],"content":"As the pane is being moved, this method analyzes its position relative to other panes, dock rows, and mini-frame windows, and returns the appropriate <ph id=\"ph1\">`AFX_CS_STATUS`</ph> value.","source":"As the pane is being moved, this method analyzes its position relative to other panes, dock rows, and mini-frame windows, and returns the appropriate `AFX_CS_STATUS` value."},{"pos":[30520,30530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nOffset`</ph>","pos":[30534,30548],"source":"[in] `nOffset`"},{"content":"Specifies docking sensitivity.","pos":[30552,30582]},{"content":"For example, a pane that is moved within <ph id=\"ph1\">`nOffset`</ph> pixels from a dock row will be docked.","pos":[30583,30672],"source":" For example, a pane that is moved within `nOffset` pixels from a dock row will be docked."},{"content":"[in] <ph id=\"ph1\">`ppTargetBar`</ph>","pos":[30679,30697],"source":"[in] `ppTargetBar`"},{"content":"When the method returns, <ph id=\"ph1\">`ppTargetBar`</ph> contains either a pointer to the object to which the current pane should be docked, or <ph id=\"ph2\">`NULL`</ph> if no docking should occur.","pos":[30701,30861],"source":" When the method returns, `ppTargetBar` contains either a pointer to the object to which the current pane should be docked, or `NULL` if no docking should occur."},{"pos":[30871,30883],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30887,30931],"content":"One of the following <ph id=\"ph1\">`AFX_CS_STATUS`</ph> values:","source":"One of the following `AFX_CS_STATUS` values:"},{"content":"Value","pos":[30938,30943]},{"content":"Description","pos":[30944,30955]},{"content":"The pane is not near a dock site.","pos":[31007,31040]},{"content":"The framework does not dock the pane.","pos":[31041,31078]},{"content":"The pane is over a dock site, and the <ph id=\"ph1\">`DT_IMMEDIATE`</ph> style is enabled.","pos":[31105,31175],"source":"The pane is over a dock site, and the `DT_IMMEDIATE` style is enabled."},{"content":"The framework docks the pane immediately.","pos":[31176,31217]},{"content":"The pane is over a dock site that is either another docking pane or an edge of the main frame.","pos":[31238,31332]},{"content":"The framework docks the pane when the user releases the move.","pos":[31333,31394]},{"content":"The pane is over a dock site that causes the pane to be docked in a tabbed window.","pos":[31422,31504]},{"content":"This occurs when the pane is either over the caption of another docking pane or over the tab area of a tabbed pane.","pos":[31505,31620]},{"content":"The framework docks the pane when the user releases the move.","pos":[31621,31682]},{"pos":[31693,31744],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__isdragmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::IsDragMode","linkify":"<a name=\"cpane__isdragmode\"></a>  CPane::IsDragMode","source":"<a name=\"cpane__isdragmode\"></a>  CPane::IsDragMode"},{"content":"Specifies whether the pane is being moved.","pos":[31748,31790]},{"pos":[31851,31863],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31867,31921],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane is being moved; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane is being moved; otherwise, `FALSE`."},{"pos":[31931,31938],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31948,32037],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__isinfloatingmultipaneframewnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::IsInFloatingMultiPaneFrameWnd","linkify":"<a name=\"cpane__isinfloatingmultipaneframewnd\"></a>  CPane::IsInFloatingMultiPaneFrameWnd","source":"<a name=\"cpane__isinfloatingmultipaneframewnd\"></a>  CPane::IsInFloatingMultiPaneFrameWnd"},{"pos":[32041,32179],"content":"Specifies whether the pane is in a multi-pane frame window ( <bpt id=\"p1\">[</bpt>CMultiPaneFrameWnd Class<ept id=\"p1\">](../../mfc/reference/cmultipaneframewnd-class.md)</ept>).","source":"Specifies whether the pane is in a multi-pane frame window ( [CMultiPaneFrameWnd Class](../../mfc/reference/cmultipaneframewnd-class.md))."},{"pos":[32259,32271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[32275,32346],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane is in a multi-pane frame window; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane is in a multi-pane frame window; otherwise, `FALSE`."},{"pos":[32356,32363],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Only dockable panes can float in a multi-pane frame window.","pos":[32367,32426]},{"content":"Therefore, <ph id=\"ph1\">`CPane::IsInFloatingMultiPaneFrameWnd`</ph> always returns <ph id=\"ph2\">`FALSE`</ph>.","pos":[32427,32500],"source":" Therefore, `CPane::IsInFloatingMultiPaneFrameWnd` always returns `FALSE`."},{"pos":[32510,32557],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__isleftof\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::IsLeftOf","linkify":"<a name=\"cpane__isleftof\"></a>  CPane::IsLeftOf","source":"<a name=\"cpane__isleftof\"></a>  CPane::IsLeftOf"},{"content":"Determines whether the pane is left of (or above) the specified rectangle.","pos":[32561,32635]},{"pos":[32732,32742],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[32746,32757],"source":"[in] `rect`"},{"content":"A <ph id=\"ph1\">`CRect`</ph> object that is used for comparison.","pos":[32761,32806],"source":" A `CRect` object that is used for comparison."},{"content":"[in] <ph id=\"ph1\">`bWindowRect`</ph>","pos":[32813,32831],"source":"[in] `bWindowRect`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, <ph id=\"ph2\">`rect`</ph> is assumed to contain screen coordinates; if <ph id=\"ph3\">`FALSE`</ph>, <ph id=\"ph4\">`rect`</ph> is assumed to contain client coordinates.","pos":[32835,32955],"source":" If `TRUE`, `rect` is assumed to contain screen coordinates; if `FALSE`, `rect` is assumed to contain client coordinates."},{"pos":[32965,32977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[32987,32994],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the pane is docked horizontally, this method checks whether its location is left of <ph id=\"ph1\">`rect`</ph>.","pos":[32998,33092],"source":"If the pane is docked horizontally, this method checks whether its location is left of `rect`."},{"content":"Otherwise, this method checks whether the location is above <ph id=\"ph1\">`rect`</ph>.","pos":[33093,33160],"source":" Otherwise, this method checks whether the location is above `rect`."},{"pos":[33170,33223],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__isresizable\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::IsResizable","linkify":"<a name=\"cpane__isresizable\"></a>  CPane::IsResizable","source":"<a name=\"cpane__isresizable\"></a>  CPane::IsResizable"},{"content":"Specifies whether the pane is resizable.","pos":[33227,33267]},{"pos":[33329,33341],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33345,33397],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane is resizable; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane is resizable; otherwise, `FALSE`."},{"pos":[33407,33414],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33418,33457],"content":"Base <ph id=\"ph1\">`CPane`</ph> objects are not resizable.","source":"Base `CPane` objects are not resizable."},{"content":"The docking manager uses the resizable flag to determine pane layout.","pos":[33464,33533]},{"content":"Non-resizable panes are always located at the outer edges of the parent frame.","pos":[33534,33612]},{"content":"Non-resizable panes cannot reside in docking containers.","pos":[33619,33675]},{"pos":[33685,33732],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__istabbed\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::IsTabbed","linkify":"<a name=\"cpane__istabbed\"></a>  CPane::IsTabbed","source":"<a name=\"cpane__istabbed\"></a>  CPane::IsTabbed"},{"content":"Determines whether the pane has been inserted into the tab control of a tabbed window.","pos":[33736,33822]},{"pos":[33881,33893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33897,33946],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane is tabbed; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane is tabbed; otherwise, `FALSE`."},{"pos":[33956,33963],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The tabbed state is treated separately from the floating, docked, and auto-hide states.","pos":[33967,34054]},{"pos":[34064,34113],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__loadstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::LoadState","linkify":"<a name=\"cpane__loadstate\"></a>  CPane::LoadState","source":"<a name=\"cpane__loadstate\"></a>  CPane::LoadState"},{"content":"Loads the state of the pane from the registry.","pos":[34117,34163]},{"pos":[34301,34311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszProfileName`</ph>","pos":[34315,34337],"source":"[in] `lpszProfileName`"},{"content":"Profile name.","pos":[34341,34354]},{"content":"[in] <ph id=\"ph1\">`nIndex`</ph>","pos":[34361,34374],"source":"[in] `nIndex`"},{"content":"Profile index.","pos":[34378,34392]},{"content":"[in] <ph id=\"ph1\">`uiID`</ph>","pos":[34399,34410],"source":"[in] `uiID`"},{"content":"Pane ID.","pos":[34414,34422]},{"pos":[34432,34444],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34448,34517],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane state was loaded successfully; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane state was loaded successfully; otherwise, `FALSE`."},{"pos":[34527,34534],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method to load the pane state from the registry.","pos":[34538,34611]},{"content":"Override it in a derived class to load additional information that is saved by <bpt id=\"p1\">[</bpt>CPane::SaveState<ept id=\"p1\">](#cpane__savestate)</ept>.","pos":[34612,34729],"source":" Override it in a derived class to load additional information that is saved by [CPane::SaveState](#cpane__savestate)."},{"pos":[34736,34848],"content":"When you override this method, also call the base method, and return <ph id=\"ph1\">`FALSE`</ph> if the base method returns <ph id=\"ph2\">`FALSE`</ph>.","source":"When you override this method, also call the base method, and return `FALSE` if the base method returns `FALSE`."},{"pos":[34858,34921],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__m_bhandleminsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::m_bHandleMinSize","linkify":"<a name=\"cpane__m_bhandleminsize\"></a>  CPane::m_bHandleMinSize","source":"<a name=\"cpane__m_bhandleminsize\"></a>  CPane::m_bHandleMinSize"},{"content":"Enables consistent handling of minimum pane sizes.","pos":[34925,34975]},{"pos":[35048,35055],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35059,35299],"content":"If one or more docking panes in your application override <ph id=\"ph1\">`GetMinSize`</ph>, or if your application calls <ph id=\"ph2\">`SetMinSize`</ph>, you may want to set this static member to <ph id=\"ph3\">`TRUE`</ph> in order to enable the framework to consistently handle how panes are sized.","source":"If one or more docking panes in your application override `GetMinSize`, or if your application calls `SetMinSize`, you may want to set this static member to `TRUE` in order to enable the framework to consistently handle how panes are sized."},{"content":"If this value is set to <ph id=\"ph1\">`TRUE`</ph>, all panes whose size should be reduced below their minimum size are clipped, not stretched.","pos":[35306,35429],"source":"If this value is set to `TRUE`, all panes whose size should be reduced below their minimum size are clipped, not stretched."},{"content":"Because the framework uses window regions for pane sizing purposes, do not change the size of the window region for docking panes if this value is set to <ph id=\"ph1\">`TRUE`</ph>.","pos":[35430,35591],"source":" Because the framework uses window regions for pane sizing purposes, do not change the size of the window region for docking panes if this value is set to `TRUE`."},{"pos":[35601,35664],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__m_recentdockinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::m_recentDockInfo","linkify":"<a name=\"cpane__m_recentdockinfo\"></a>  CPane::m_recentDockInfo","source":"<a name=\"cpane__m_recentdockinfo\"></a>  CPane::m_recentDockInfo"},{"content":"Contains recent docking information.","pos":[35668,35704]},{"pos":[35769,35776],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework stores the latest docking state information for the pane in this member.","pos":[35780,35866]},{"pos":[35876,35937],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__movebyalignment\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::MoveByAlignment","linkify":"<a name=\"cpane__movebyalignment\"></a>  CPane::MoveByAlignment","source":"<a name=\"cpane__movebyalignment\"></a>  CPane::MoveByAlignment"},{"content":"Moves the pane and the virtual rectangle by the specified amount.","pos":[35941,36006]},{"pos":[36096,36106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwAlignment`</ph>","pos":[36110,36128],"source":"[in] `dwAlignment`"},{"content":"Specifies pane alignment.","pos":[36132,36157]},{"content":"[in] <ph id=\"ph1\">`nOffset`</ph>","pos":[36164,36178],"source":"[in] `nOffset`"},{"content":"The amount, in pixels, by which to move the pane and the virtual rectangle.","pos":[36182,36257]},{"pos":[36267,36279],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36289,36296],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36300,36349],"content":"<ph id=\"ph1\">`dwAlignment`</ph> can be any of the following values:","source":"`dwAlignment` can be any of the following values:"},{"content":"Value","pos":[36356,36361]},{"content":"Description","pos":[36362,36373]},{"content":"Enables the pane to be docked to the top of the client area of a frame window.","pos":[36429,36507]},{"content":"Enables the pane to be docked to the bottom of the client area of a frame window.","pos":[36532,36613]},{"content":"Enables the pane to be docked to the left side of the client area of a frame window.","pos":[36636,36720]},{"content":"Enables the pane to be docked to the right side of the client area of a frame window.","pos":[36744,36829]},{"content":"Enables the pane to be docked to any side of the client area of a frame window.","pos":[36851,36930]},{"pos":[36938,37208],"content":"If <ph id=\"ph1\">`dwAlignment`</ph> contains the <ph id=\"ph2\">`CBRS_ALIGN_LEFT`</ph> or <ph id=\"ph3\">`CBRS_ALIGN_RIGHT`</ph> flag, the pane and virtual rectangle are moved horizontally; otherwise, if <ph id=\"ph4\">`dwAlignment`</ph> contains the <ph id=\"ph5\">`CBRS_ALIGN_TOP`</ph> or <ph id=\"ph6\">`CBRS_ALIGN_BOTTOM`</ph> flag, the pane and virtual rectangle are moved vertically.","source":"If `dwAlignment` contains the `CBRS_ALIGN_LEFT` or `CBRS_ALIGN_RIGHT` flag, the pane and virtual rectangle are moved horizontally; otherwise, if `dwAlignment` contains the `CBRS_ALIGN_TOP` or `CBRS_ALIGN_BOTTOM` flag, the pane and virtual rectangle are moved vertically."},{"pos":[37218,37265],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__movepane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::MovePane","linkify":"<a name=\"cpane__movepane\"></a>  CPane::MovePane","source":"<a name=\"cpane__movepane\"></a>  CPane::MovePane"},{"content":"Moves the pane to the specified rectangle.","pos":[37269,37311]},{"pos":[37421,37431],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`rectNew`</ph>","pos":[37435,37449],"source":"[in] `rectNew`"},{"content":"Specifies the new rectangle for the pane.","pos":[37453,37494]},{"content":"[in] <ph id=\"ph1\">`bForceMove`</ph>","pos":[37501,37518],"source":"[in] `bForceMove`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, this method ignores the minimum allowed pane size ( <bpt id=\"p1\">[</bpt>CPane::GetMinSize<ept id=\"p1\">](#cpane__getminsize)</ept>); otherwise, the pane is adjusted, if necessary, to ensure that it is at least the minimum allowed size.","pos":[37522,37729],"source":" If `TRUE`, this method ignores the minimum allowed pane size ( [CPane::GetMinSize](#cpane__getminsize)); otherwise, the pane is adjusted, if necessary, to ensure that it is at least the minimum allowed size."},{"content":"[in] <ph id=\"ph1\">`hdwp`</ph>","pos":[37736,37747],"source":"[in] `hdwp`"},{"content":"Not used.","pos":[37751,37760]},{"pos":[37770,37782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37786,37916],"content":"A <ph id=\"ph1\">`CSize`</ph> object that contains the differences in width and height between the new and old rectangles (old rectangle – <ph id=\"ph2\">`rectNew`</ph>).","source":"A `CSize` object that contains the differences in width and height between the new and old rectangles (old rectangle – `rectNew`)."},{"pos":[37926,37933],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used only for dockable panes.","pos":[37937,37981]},{"pos":[37991,38060],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__onafterchangeparent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::OnAfterChangeParent","linkify":"<a name=\"cpane__onafterchangeparent\"></a>  CPane::OnAfterChangeParent","source":"<a name=\"cpane__onafterchangeparent\"></a>  CPane::OnAfterChangeParent"},{"content":"Called by the framework when the parent of a pane has changed.","pos":[38064,38126]},{"pos":[38206,38216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] [out] <ph id=\"ph1\">`pWndOldParent`</ph>","pos":[38220,38246],"source":"[in] [out] `pWndOldParent`"},{"content":"The pane's previous parent window.","pos":[38250,38284]},{"pos":[38294,38301],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework when the parent of a pane has changed because of a docking or floating operation.","pos":[38305,38425]},{"pos":[38435,38488],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__onafterdock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::OnAfterDock","linkify":"<a name=\"cpane__onafterdock\"></a>  CPane::OnAfterDock","source":"<a name=\"cpane__onafterdock\"></a>  CPane::OnAfterDock"},{"content":"Called by the framework when a pane has been docked.","pos":[38492,38544]},{"pos":[38673,38683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[38687,38698],"source":"[in] `pBar`"},{"content":"This parameter is not used.","pos":[38702,38729]},{"content":"[in] <ph id=\"ph1\">`lpRect`</ph>","pos":[38736,38749],"source":"[in] `lpRect`"},{"content":"This parameter is not used.","pos":[38753,38780]},{"content":"[in] <ph id=\"ph1\">`dockMethod`</ph>","pos":[38787,38804],"source":"[in] `dockMethod`"},{"content":"This parameter is not used.","pos":[38808,38835]},{"pos":[38845,38900],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__onafterfloat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::OnAfterFloat","linkify":"<a name=\"cpane__onafterfloat\"></a>  CPane::OnAfterFloat","source":"<a name=\"cpane__onafterfloat\"></a>  CPane::OnAfterFloat"},{"content":"Called by the framework after a pane floats.","pos":[38904,38948]},{"pos":[39002,39009],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method in a derived class if you want to perform any processing after a pane floats.","pos":[39013,39119]},{"pos":[39129,39200],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__onbeforechangeparent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::OnBeforeChangeParent","linkify":"<a name=\"cpane__onbeforechangeparent\"></a>  CPane::OnBeforeChangeParent","source":"<a name=\"cpane__onbeforechangeparent\"></a>  CPane::OnBeforeChangeParent"},{"content":"Called by the framework when the parent of the pane is about to change.","pos":[39204,39275]},{"pos":[39388,39398],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] [out] <ph id=\"ph1\">`pWndNewParent`</ph>","pos":[39402,39428],"source":"[in] [out] `pWndNewParent`"},{"content":"Specifies the new parent window.","pos":[39432,39464]},{"content":"[in] <ph id=\"ph1\">`bDelay`</ph>","pos":[39471,39484],"source":"[in] `bDelay`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to delay the global docking layout adjustment; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[39487,39561],"source":" `TRUE` to delay the global docking layout adjustment; otherwise, `FALSE`."},{"pos":[39571,39578],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework when the parent of the pane is about to change because the pane is being docked or floated.","pos":[39582,39712]},{"pos":[39719,39813],"content":"By default, the pane is unregistered with the docking pane by calling <ph id=\"ph1\">`CDockSite::RemovePane`</ph>.","source":"By default, the pane is unregistered with the docking pane by calling `CDockSite::RemovePane`."},{"pos":[39823,39878],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__onbeforedock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::OnBeforeDock","linkify":"<a name=\"cpane__onbeforedock\"></a>  CPane::OnBeforeDock","source":"<a name=\"cpane__onbeforedock\"></a>  CPane::OnBeforeDock"},{"content":"Called by the framework when the pane is about to dock.","pos":[39882,39937]},{"pos":[40073,40083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] [out] <ph id=\"ph1\">`ppDockBar`</ph>","pos":[40087,40109],"source":"[in] [out] `ppDockBar`"},{"content":"Specifies the pane that this pane is docking to.","pos":[40113,40161]},{"content":"[in] <ph id=\"ph1\">`lpRect`</ph>","pos":[40168,40181],"source":"[in] `lpRect`"},{"content":"Specifies the docking rectangle.","pos":[40185,40217]},{"content":"[in] <ph id=\"ph1\">`dockMethod`</ph>","pos":[40224,40241],"source":"[in] `dockMethod`"},{"content":"Specifies the docking method.","pos":[40245,40274]},{"pos":[40284,40296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane can be docked.","pos":[40300,40333],"source":"`TRUE` if the pane can be docked."},{"content":"If the function returns <ph id=\"ph1\">`FALSE`</ph>, the docking operation will be aborted.","pos":[40334,40405],"source":" If the function returns `FALSE`, the docking operation will be aborted."},{"pos":[40415,40422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework when a pane is about to be docked.","pos":[40426,40499]},{"content":"You can override this method in a derived class if you want to perform any processing before a pane is finally docked.","pos":[40500,40618]},{"pos":[40628,40685],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__onbeforefloat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::OnBeforeFloat","linkify":"<a name=\"cpane__onbeforefloat\"></a>  CPane::OnBeforeFloat","source":"<a name=\"cpane__onbeforefloat\"></a>  CPane::OnBeforeFloat"},{"content":"Called by the framework when a pane is about to float.","pos":[40689,40743]},{"pos":[40853,40863],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`rectFloat`</ph>","pos":[40867,40883],"source":"[in] `rectFloat`"},{"content":"Specifies the position and size of the pane when it is in a floating state.","pos":[40887,40962]},{"content":"[in] <ph id=\"ph1\">`dockMethod`</ph>","pos":[40969,40986],"source":"[in] `dockMethod`"},{"content":"Specifies the docking method of the pane.","pos":[40990,41031]},{"pos":[41041,41053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41057,41111],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane can be floated; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane can be floated; otherwise, `FALSE`."},{"pos":[41121,41128],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework when a pane is about to float.","pos":[41132,41201]},{"content":"You can override this method in a derived class if you want to perform any processing before the pane finally floats.","pos":[41202,41319]},{"pos":[41329,41396],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__onpressclosebutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::OnPressCloseButton","linkify":"<a name=\"cpane__onpressclosebutton\"></a>  CPane::OnPressCloseButton","source":"<a name=\"cpane__onpressclosebutton\"></a>  CPane::OnPressCloseButton"},{"content":"Called by the framework when the user presses the close button on the caption for the pane.","pos":[41400,41491]},{"pos":[41551,41558],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework when a user presses the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button on the pane's caption.","pos":[41562,41664],"source":"This method is called by the framework when a user presses the **Close** button on the pane's caption."},{"content":"To receive notifications about the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> event, you can override this method in a derived class.","pos":[41665,41765],"source":" To receive notifications about the **Close** event, you can override this method in a derived class."},{"pos":[41775,41846],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__onshowcontrolbarmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::OnShowControlBarMenu","linkify":"<a name=\"cpane__onshowcontrolbarmenu\"></a>  CPane::OnShowControlBarMenu","source":"<a name=\"cpane__onshowcontrolbarmenu\"></a>  CPane::OnShowControlBarMenu"},{"content":"Called by the framework when a special pane menu is about to be displayed.","pos":[41850,41924]},{"pos":[41998,42008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[42012,42024],"source":"[in] `point`"},{"content":"Specifies the menu location.","pos":[42028,42056]},{"pos":[42066,42078],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42082,42138],"content":"<ph id=\"ph1\">`TRUE`</ph> if the menu can be displayed; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the menu can be displayed; otherwise, `FALSE`."},{"pos":[42148,42155],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The menu contains several items that enable you to specify the pane's behavior, namely: <bpt id=\"p1\">**</bpt>Floating<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Docking<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>AutoHide<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>Hide<ept id=\"p4\">**</ept>.","pos":[42159,42301],"source":"The menu contains several items that enable you to specify the pane's behavior, namely: **Floating**, **Docking**, **AutoHide**, and **Hide**."},{"content":"You can enable this menu for all panes by calling <bpt id=\"p1\">[</bpt>CDockingManager::EnableDockSiteMenu<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__enabledocksitemenu)</ept>.","pos":[42302,42472],"source":" You can enable this menu for all panes by calling [CDockingManager::EnableDockSiteMenu](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__enabledocksitemenu)."},{"pos":[42482,42537],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__recalclayout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::RecalcLayout","linkify":"<a name=\"cpane__recalclayout\"></a>  CPane::RecalcLayout","source":"<a name=\"cpane__recalclayout\"></a>  CPane::RecalcLayout"},{"content":"Recalculates layout information for the pane.","pos":[42541,42586]},{"pos":[42640,42647],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the pane is docked, this method updates the virtual rectangle for the pane by setting its size to the current size of the pane.","pos":[42651,42781]},{"content":"If the pane is floating, this method notifies the parent mini-frame to adjust the size of the pane to the size of the mini-frame.","pos":[42788,42917]},{"content":"The framework ensures that the mini-frame is at least the minimum allowed size for the pane ( <bpt id=\"p1\">[</bpt>CPane::GetMinSize<ept id=\"p1\">](#cpane__getminsize)</ept>) and resizes the mini-frame if necessary.","pos":[42918,43093],"source":" The framework ensures that the mini-frame is at least the minimum allowed size for the pane ( [CPane::GetMinSize](#cpane__getminsize)) and resizes the mini-frame if necessary."},{"pos":[43103,43152],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__savestate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::SaveState","linkify":"<a name=\"cpane__savestate\"></a>  CPane::SaveState","source":"<a name=\"cpane__savestate\"></a>  CPane::SaveState"},{"content":"Saves the state of the pane to the registry.","pos":[43156,43200]},{"pos":[43338,43348],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszProfileName`</ph>","pos":[43352,43374],"source":"[in] `lpszProfileName`"},{"content":"Profile name.","pos":[43378,43391]},{"content":"[in] <ph id=\"ph1\">`nIndex`</ph>","pos":[43398,43411],"source":"[in] `nIndex`"},{"content":"Profile index.","pos":[43415,43429]},{"content":"[in] <ph id=\"ph1\">`uiID`</ph>","pos":[43436,43447],"source":"[in] `uiID`"},{"content":"Pane ID.","pos":[43451,43459]},{"pos":[43469,43481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43485,43548],"content":"<ph id=\"ph1\">`TRUE`</ph> if the state was saved successfully; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the state was saved successfully; otherwise, `FALSE`."},{"pos":[43558,43565],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method when it saves the state of the pane to the registry.","pos":[43569,43653]},{"content":"Override <ph id=\"ph1\">`SaveState`</ph> in a derived class to store additional information.","pos":[43654,43726],"source":" Override `SaveState` in a derived class to store additional information."},{"pos":[43733,43845],"content":"When you override this method, also call the base method, and return <ph id=\"ph1\">`FALSE`</ph> if the base method returns <ph id=\"ph2\">`FALSE`</ph>.","source":"When you override this method, also call the base method, and return `FALSE` if the base method returns `FALSE`."},{"pos":[43855,43918],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__setactiveingroup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::SetActiveInGroup","linkify":"<a name=\"cpane__setactiveingroup\"></a>  CPane::SetActiveInGroup","source":"<a name=\"cpane__setactiveingroup\"></a>  CPane::SetActiveInGroup"},{"content":"Flags a pane as active.","pos":[43922,43945]},{"pos":[44015,44025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bActive`</ph>","pos":[44029,44043],"source":"[in] `bActive`"},{"content":"A <ph id=\"ph1\">`BOOL`</ph> that specifies whether the pane is flagged as active.","pos":[44047,44109],"source":" A `BOOL` that specifies whether the pane is flagged as active."},{"pos":[44119,44126],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a dockable pane is shown or an auto-hide button is chosen, the corresponding auto-hide pane is marked as active.","pos":[44130,44247]},{"content":"The appearance of an auto-hide button that is associated with the pane is based on two factors.","pos":[44254,44349]},{"content":"If the pane is active, and the <ph id=\"ph1\">`static``BOOL``CMFCAutoHideButton::m_bOverlappingTabs`</ph> is <ph id=\"ph2\">`TRUE`</ph>, the framework displays the auto-hide button as an icon and a label.","pos":[44350,44514],"source":" If the pane is active, and the `static``BOOL``CMFCAutoHideButton::m_bOverlappingTabs` is `TRUE`, the framework displays the auto-hide button as an icon and a label."},{"content":"For an inactive pane, the framework displays only the auto-hide icon.","pos":[44515,44584]},{"pos":[44591,44767],"content":"If <ph id=\"ph1\">`CMFCAutoHideButton::m_bOverlappingTabs`</ph> is <ph id=\"ph2\">`FALSE`</ph>, or if the pane is not located in a group, the framework displays the associated auto-hide button as an icon and a label.","source":"If `CMFCAutoHideButton::m_bOverlappingTabs` is `FALSE`, or if the pane is not located in a group, the framework displays the associated auto-hide button as an icon and a label."},{"pos":[44777,44828],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__setborders\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::SetBorders","linkify":"<a name=\"cpane__setborders\"></a>  CPane::SetBorders","source":"<a name=\"cpane__setborders\"></a>  CPane::SetBorders"},{"content":"Sets the border values of the pane.","pos":[44832,44867]},{"pos":[45039,45049],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`cxLeft`</ph>","pos":[45053,45066],"source":"[in] `cxLeft`"},{"content":"Specifies the width, in pixels, of the left border of the pane.","pos":[45070,45133]},{"content":"[in] <ph id=\"ph1\">`cyTop`</ph>","pos":[45140,45152],"source":"[in] `cyTop`"},{"content":"Specifies the width, in pixels, of the top border of the pane.","pos":[45156,45218]},{"content":"[in] <ph id=\"ph1\">`cxRight`</ph>","pos":[45225,45239],"source":"[in] `cxRight`"},{"content":"Specifies the width, in pixels, of the right border of the pane.","pos":[45243,45307]},{"content":"[in] <ph id=\"ph1\">`cyBottom`</ph>","pos":[45314,45329],"source":"[in] `cyBottom`"},{"content":"Specifies the width, in pixels, of the bottom border of the pane.","pos":[45333,45398]},{"content":"[in] <ph id=\"ph1\">`lpRect`</ph>","pos":[45405,45418],"source":"[in] `lpRect`"},{"content":"A <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object that contains the width, in pixels, of each border of the pane.","pos":[45422,45549],"source":" A [CRect](../../atl-mfc-shared/reference/crect-class.md) object that contains the width, in pixels, of each border of the pane."},{"pos":[45559,45566],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this function to set the sizes of the pane's borders.","pos":[45570,45628]},{"pos":[45638,45701],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__setclienthotspot\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::SetClientHotSpot","linkify":"<a name=\"cpane__setclienthotspot\"></a>  CPane::SetClientHotSpot","source":"<a name=\"cpane__setclienthotspot\"></a>  CPane::SetClientHotSpot"},{"pos":[45705,45738],"content":"Sets the <bpt id=\"p1\">*</bpt>hot spot<ept id=\"p1\">*</ept> for the pane.","source":"Sets the *hot spot* for the pane."},{"pos":[45807,45817],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`ptNew`</ph>","pos":[45821,45833],"source":"[in] `ptNew`"},{"content":"A <ph id=\"ph1\">`CPoint`</ph> object that specifies the new hot spot.","pos":[45837,45887],"source":" A `CPoint` object that specifies the new hot spot."},{"pos":[45897,45904],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">*</bpt>hot spot<ept id=\"p1\">*</ept> is the point on the pane that the user selects and holds to move the pane.","pos":[45908,45997],"source":"The *hot spot* is the point on the pane that the user selects and holds to move the pane."},{"content":"A hot spot is used for smooth animation when the pane is dragged from a docked position.","pos":[45998,46086]},{"pos":[46096,46151],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__setdockstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::SetDockState","linkify":"<a name=\"cpane__setdockstate\"></a>  CPane::SetDockState","source":"<a name=\"cpane__setdockstate\"></a>  CPane::SetDockState"},{"content":"Restores docking state information for the pane.","pos":[46155,46203]},{"pos":[46286,46296],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDockManager`</ph>","pos":[46300,46319],"source":"[in] `pDockManager`"},{"content":"Pointer to the docking manager for the main frame window.","pos":[46323,46380]},{"pos":[46390,46397],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework to restore recent docking state information for the pane.","pos":[46401,46497]},{"content":"A pane stores recent docking state information in <bpt id=\"p1\">[</bpt>CPane::m_recentDockInfo<ept id=\"p1\">](#cpane__m_recentdockinfo)</ept>.","pos":[46498,46600],"source":" A pane stores recent docking state information in [CPane::m_recentDockInfo](#cpane__m_recentdockinfo)."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>CRecentDockSiteInfo Class<ept id=\"p1\">](../../mfc/reference/crecentdocksiteinfo-class.md)</ept>.","pos":[46601,46709],"source":" For more information, see the [CRecentDockSiteInfo Class](../../mfc/reference/crecentdocksiteinfo-class.md)."},{"content":"You can also call this method to set the docking state when you load pane information from an external source.","pos":[46716,46826]},{"pos":[46836,46905],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__setexclusiverowmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::SetExclusiveRowMode","linkify":"<a name=\"cpane__setexclusiverowmode\"></a>  CPane::SetExclusiveRowMode","source":"<a name=\"cpane__setexclusiverowmode\"></a>  CPane::SetExclusiveRowMode"},{"content":"Enables or disables the exclusive row mode.","pos":[46909,46952]},{"pos":[47035,47045],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bExclusive`</ph>","pos":[47049,47066],"source":"[in] `bExclusive`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to enable exclusive row mode; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[47069,47126],"source":" `TRUE` to enable exclusive row mode; otherwise, `FALSE`."},{"pos":[47136,47143],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to enable or disable exclusive row mode.","pos":[47147,47204]},{"content":"When a pane is in exclusive row mode, it cannot share the same row with any other toolbars.","pos":[47205,47296]},{"content":"By default, all toolbars have exclusive row mode disabled and the menu bar has exclusive row mode enabled.","pos":[47303,47409]},{"pos":[47419,47470],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__setminsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::SetMinSize","linkify":"<a name=\"cpane__setminsize\"></a>  CPane::SetMinSize","source":"<a name=\"cpane__setminsize\"></a>  CPane::SetMinSize"},{"content":"Sets the minimum allowed size for the pane.","pos":[47474,47517]},{"pos":[47578,47588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`size`</ph>","pos":[47592,47603],"source":"[in] `size`"},{"content":"A <ph id=\"ph1\">`CSize`</ph> object that contains the minimum allowed size for the pane.","pos":[47607,47676],"source":" A `CSize` object that contains the minimum allowed size for the pane."},{"pos":[47686,47693],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47703,47762],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__setvirtualrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::SetVirtualRect","linkify":"<a name=\"cpane__setvirtualrect\"></a>  CPane::SetVirtualRect","source":"<a name=\"cpane__setvirtualrect\"></a>  CPane::SetVirtualRect"},{"pos":[47766,47807],"content":"Sets the <bpt id=\"p1\">*</bpt>virtual rectangle<ept id=\"p1\">*</ept> of the pane.","source":"Sets the *virtual rectangle* of the pane."},{"pos":[47909,47919],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[47923,47934],"source":"[in] `rect`"},{"content":"A <ph id=\"ph1\">`CRect`</ph> object that specifies the virtual rectangle to be set.","pos":[47938,48002],"source":" A `CRect` object that specifies the virtual rectangle to be set."},{"content":"[in] <ph id=\"ph1\">`bMapToParent`</ph>","pos":[48009,48028],"source":"[in] `bMapToParent`"},{"content":"Specify <ph id=\"ph1\">`TRUE`</ph> if <ph id=\"ph2\">`rect`</ph> contains points relative to the parent window.","pos":[48032,48103],"source":" Specify `TRUE` if `rect` contains points relative to the parent window."},{"pos":[48113,48120],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A <bpt id=\"p1\">*</bpt>virtual rectangle<ept id=\"p1\">*</ept> stores the original position of a pane when it is moved.","pos":[48124,48202],"source":"A *virtual rectangle* stores the original position of a pane when it is moved."},{"content":"The framework can use the virtual rectangle to restore the original position.","pos":[48203,48280]},{"content":"Do not call methods that are related to virtual rectangles unless you are moving panes programmatically.","pos":[48287,48391]},{"pos":[48401,48462],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__setminiframertc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::SetMiniFrameRTC","linkify":"<a name=\"cpane__setminiframertc\"></a>  CPane::SetMiniFrameRTC","source":"<a name=\"cpane__setminiframertc\"></a>  CPane::SetMiniFrameRTC"},{"content":"Sets the runtime class information for the default mini-frame window.","pos":[48466,48535]},{"pos":[48605,48615],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] [out] <ph id=\"ph1\">`pClass`</ph>","pos":[48619,48638],"source":"[in] [out] `pClass`"},{"content":"Specifies the runtime class information for the mini-frame window.","pos":[48642,48708]},{"pos":[48718,48725],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a pane is floated, it is put on a <bpt id=\"p1\">[</bpt>CPaneFrameWnd<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> (mini-frame) window.","pos":[48729,48848],"source":"When a pane is floated, it is put on a [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) (mini-frame) window."},{"content":"You can provide a custom <ph id=\"ph1\">`CPaneFrameWnd`</ph>-derived class that will be used when <bpt id=\"p1\">[</bpt>CPane::CreateDefaultMiniframe<ept id=\"p1\">](#cpane__createdefaultminiframe)</ept> is called.","pos":[48849,49001],"source":" You can provide a custom `CPaneFrameWnd`-derived class that will be used when [CPane::CreateDefaultMiniframe](#cpane__createdefaultminiframe) is called."},{"pos":[49011,49086],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__stretchpanedeferwndpos\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::StretchPaneDeferWndPos","linkify":"<a name=\"cpane__stretchpanedeferwndpos\"></a>  CPane::StretchPaneDeferWndPos","source":"<a name=\"cpane__stretchpanedeferwndpos\"></a>  CPane::StretchPaneDeferWndPos"},{"content":"Stretches the pane vertically or horizontally based on docking style.","pos":[49090,49159]},{"pos":[49261,49271],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nStretchSize`</ph>","pos":[49275,49294],"source":"[in] `nStretchSize`"},{"content":"The amount, in pixels, to stretch the pane.","pos":[49298,49341]},{"content":"Use a negative value to shrink the pane.","pos":[49342,49382]},{"content":"[in] <ph id=\"ph1\">`hdwp`</ph>","pos":[49389,49400],"source":"[in] `hdwp`"},{"content":"Not used.","pos":[49404,49413]},{"pos":[49423,49435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The actual amount, in pixels, that the pane was stretched.","pos":[49439,49497]},{"pos":[49507,49514],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If necessary, this method modifies <ph id=\"ph1\">`nStretchSize`</ph> to ensure that the pane does not exceed size limits.","pos":[49518,49620],"source":"If necessary, this method modifies `nStretchSize` to ensure that the pane does not exceed size limits."},{"content":"These limits are obtained by calling <bpt id=\"p1\">[</bpt>CPane::GetAvailableStretchSize<ept id=\"p1\">](#cpane__getavailablestretchsize)</ept> and <bpt id=\"p2\">[</bpt>CPane::GetAvailableExpandSize<ept id=\"p2\">](#cpane__getavailableexpandsize)</ept>.","pos":[49621,49792],"source":" These limits are obtained by calling [CPane::GetAvailableStretchSize](#cpane__getavailablestretchsize) and [CPane::GetAvailableExpandSize](#cpane__getavailableexpandsize)."},{"pos":[49802,49861],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__toggleautohide\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::ToggleAutoHide","linkify":"<a name=\"cpane__toggleautohide\"></a>  CPane::ToggleAutoHide","source":"<a name=\"cpane__toggleautohide\"></a>  CPane::ToggleAutoHide"},{"content":"Toggles auto-hide mode.","pos":[49865,49888]},{"pos":[49944,49951],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to toggle auto-hide mode.","pos":[49955,49997]},{"content":"A pane must be docked to a main frame window in order to be switch to auto-hide mode.","pos":[49998,50083]},{"pos":[50093,50144],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__undockpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::UndockPane","linkify":"<a name=\"cpane__undockpane\"></a>  CPane::UndockPane","source":"<a name=\"cpane__undockpane\"></a>  CPane::UndockPane"},{"content":"Removes the pane from the dock site, default slider, or mini-frame window where it is currently docked.","pos":[50148,50251]},{"pos":[50322,50332],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bDelay`</ph>","pos":[50336,50349],"source":"[in] `bDelay`"},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, the framework calls <bpt id=\"p1\">[</bpt>CBasePane::AdjustDockingLayout<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__adjustdockinglayout)</ept> to adjust the docking layout.","pos":[50353,50518],"source":" If `FALSE`, the framework calls [CBasePane::AdjustDockingLayout](../../mfc/reference/cbasepane-class.md#cbasepane__adjustdockinglayout) to adjust the docking layout."},{"pos":[50528,50535],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this method to programmatically undock a pane.","pos":[50539,50589]},{"pos":[50599,50664],"content":"<bpt id=\"p1\">&lt;a name=\"cpane__updatevirtualrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPane::UpdateVirtualRect","linkify":"<a name=\"cpane__updatevirtualrect\"></a>  CPane::UpdateVirtualRect","source":"<a name=\"cpane__updatevirtualrect\"></a>  CPane::UpdateVirtualRect"},{"content":"Updates the virtual rectangle.","pos":[50668,50698]},{"pos":[50835,50845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`ptOffset`</ph>","pos":[50849,50864],"source":"[in] `ptOffset`"},{"content":"A <ph id=\"ph1\">`CPoint`</ph> object that specifies an offset by which to shift the pane.","pos":[50868,50938],"source":" A `CPoint` object that specifies an offset by which to shift the pane."},{"content":"[in] <ph id=\"ph1\">`sizeNew`</ph>","pos":[50945,50959],"source":"[in] `sizeNew`"},{"content":"A <ph id=\"ph1\">`CSize`</ph> object that specifies a new size for the  pane.","pos":[50963,51020],"source":" A `CSize` object that specifies a new size for the  pane."},{"pos":[51030,51037],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first overload sets the virtual rectangle by using the current position and size of the pane.","pos":[51041,51138]},{"pos":[51145,51240],"content":"The second overload shifts the virtual rectangle by the amount that is specified by <ph id=\"ph1\">`ptOffset`</ph>.","source":"The second overload shifts the virtual rectangle by the amount that is specified by `ptOffset`."},{"pos":[51247,51379],"content":"The third overload sets the virtual rectangle by using the current position of the pane and the size that is specified by <ph id=\"ph1\">`sizeNew`</ph>.","source":"The third overload sets the virtual rectangle by using the current position of the pane and the size that is specified by `sizeNew`."},{"pos":[51388,51396],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[51400,51448],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[51451,51498],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CBasePane Class<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md)</ept>","pos":[51501,51559],"source":" [CBasePane Class](../../mfc/reference/cbasepane-class.md)"}],"content":"---\ntitle: \"CPane Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CPane\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CPane class\"\nms.assetid: 5c651a64-3c79-4d94-9676-45f6402a6bc5\ncaps.latest.revision: 30\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CPane Class\nThe `CPane` class is an enhancement of the [CControlBar Class](../../mfc/reference/ccontrolbar-class.md). If you are upgrading an existing MFC project, replace all occurrences of `CControlBar` with `CPane`.  \n  \n## Syntax  \n  \n```  \nclass CPane : public CBasePane  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`CPane::~CPane`|Destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPane::AdjustSizeImmediate](#cpane__adjustsizeimmediate)|Immediately recalculates the layout of a pane.|  \n|[CPane::AllocElements](#cpane__allocelements)|Allocates storage for internal use.|  \n|[CPane::AllowShowOnPaneMenu](#cpane__allowshowonpanemenu)|Specifies whether the pane is listed in the runtime-generated list of panes for the application.|  \n|[CPane::CalcAvailableSize](#cpane__calcavailablesize)|Calculates the difference in size between a specified rectangle and the current window rectangle.|  \n|[CPane::CalcInsideRect](#cpane__calcinsiderect)|Calculates the inside rectangle of a pane, taking into account the borders and grippers.|  \n|[CPane::CalcRecentDockedRect](#cpane__calcrecentdockedrect)|Calculates the recently docked rectangle.|  \n|[CPane::CalcSize](#cpane__calcsize)|Calculates the size of the pane.|  \n|[CPane::CanBeDocked](#cpane__canbedocked)|Determines whether the pane can be docked at the specified base pane.|  \n|[CPane::CanBeTabbedDocument](#cpane__canbetabbeddocument)|Determines whether the pane can be converted to a tabbed document.|  \n|[CPane::ConvertToTabbedDocument](#cpane__converttotabbeddocument)|Converts a dockable pane to a tabbed document.|  \n|[CPane::CopyState](#cpane__copystate)|Copies the state of a pane. (Overrides [CBasePane::CopyState](../../mfc/reference/cbasepane-class.md#cbasepane__copystate).)|  \n|[CPane::Create](#cpane__create)|Creates a control bar and attaches it to the `CPane` object.|  \n|[CPane::CreateDefaultMiniframe](#cpane__createdefaultminiframe)|Creates a mini-frame window for a floating pane.|  \n|[CPane::CreateEx](#cpane__createex)|Creates a control bar and attaches it to the `CPane` object.|  \n|`CPane::CreateObject`|Used by the framework to create a dynamic instance of this class type.|  \n|[CPane::DockByMouse](#cpane__dockbymouse)|Docks a pane by using the mouse docking method.|  \n|[CPane::DockPane](#cpane__dockpane)|Docks the floating pane to a base pane.|  \n|[CPane::DockPaneStandard](#cpane__dockpanestandard)|Docks a pane by using outline (standard) docking.|  \n|[CPane::DockToFrameWindow](#cpane__docktoframewindow)|Docks a dockable pane to a frame. (Overrides `CBasePane::DockToFrameWindow`.)|  \n|[CPane::DoesAllowSiblingBars](#cpane__doesallowsiblingbars)|Indicates whether you can dock another pane at the same row where the current pane is docked.|  \n|[CPane::FloatPane](#cpane__floatpane)|Floats the pane.|  \n|[CPane::GetAvailableExpandSize](#cpane__getavailableexpandsize)|Returns the amount, in pixels, that the pane can expand.|  \n|[CPane::GetAvailableStretchSize](#cpane__getavailablestretchsize)|Returns the amount, in pixels, that the pane can shrink.|  \n|[CPane::GetBorders](#cpane__getborders)|Returns the width of the borders of the pane.|  \n|[CPane::GetClientHotSpot](#cpane__getclienthotspot)|Returns the *hot spot* for the pane.|  \n|[CPane::GetDockSiteRow](#cpane__getdocksiterow)|Returns the dock row in which the pane is docked.|  \n|[CPane::GetExclusiveRowMode](#cpane__getexclusiverowmode)|Determines whether the pane is in exclusive row mode.|  \n|[CPane::GetHotSpot](#cpane__gethotspot)|Returns the hot spot that is stored in an underlying `CMFCDragFrameImpl` object.|  \n|[CPane::GetMinSize](#cpane__getminsize)|Retrieves the minimum allowed size for the pane.|  \n|[CPane::GetPaneName](#cpane__getpanename)|Retrieves the title for the pane.|  \n|`CPane::GetResizeStep`|Used internally.|  \n|`CPane::GetThisClass`|Used by the framework to obtain a pointer to the [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) object that is associated with this class type.|  \n|[CPane::GetVirtualRect](#cpane__getvirtualrect)|Retrieves the *virtual rectangle* of the pane.|  \n|[CPane::IsChangeState](#cpane__ischangestate)|As the pane is being moved, this method analyzes the position of the pane relative to other panes, dock rows, and mini-frame windows, and returns the appropriate `AFX_CS_STATUS` value.|  \n|[CPane::IsDragMode](#cpane__isdragmode)|Specifies whether the pane is being dragged.|  \n|[CPane::IsInFloatingMultiPaneFrameWnd](#cpane__isinfloatingmultipaneframewnd)|Specifies whether the pane is in a multi-pane frame window. (Overrides `CBasePane::IsInFloatingMultiPaneFrameWnd`.)|  \n|[CPane::IsLeftOf](#cpane__isleftof)|Determines whether the pane is left of (or above) the specified rectangle.|  \n|[CPane::IsResizable](#cpane__isresizable)|Determines whether the pane can be resized. (Overrides [CBasePane::IsResizable](../../mfc/reference/cbasepane-class.md#cbasepane__isresizable).)|  \n|[CPane::IsTabbed](#cpane__istabbed)|Determines whether the pane has been inserted in the tab control of a tabbed window. (Overrides [CBasePane::IsTabbed](../../mfc/reference/cbasepane-class.md#cbasepane__istabbed).)|  \n|[CPane::LoadState](#cpane__loadstate)|Loads the state of the pane from the registry. (Overrides [CBasePane::LoadState](../../mfc/reference/cbasepane-class.md#cbasepane__loadstate).)|  \n|[CPane::MoveByAlignment](#cpane__movebyalignment)|Moves the pane and the virtual rectangle by the specified amount.|  \n|[CPane::MovePane](#cpane__movepane)|Moves the pane to the specified rectangle.|  \n|[CPane::OnAfterChangeParent](#cpane__onafterchangeparent)|Called by the framework when the parent of a pane has changed.|  \n|[CPane::OnBeforeChangeParent](#cpane__onbeforechangeparent)|Called by the framework when the parent of the pane is about to change.|  \n|[CPane::OnPressCloseButton](#cpane__onpressclosebutton)|Called by the framework when the user chooses the Close button on the caption for the pane.|  \n|`CPane::OnProcessDblClk`|Used internally.|  \n|[CPane::OnShowControlBarMenu](#cpane__onshowcontrolbarmenu)|Called by the framework when a special pane menu is about to be displayed.|  \n|[CPane::OnShowControlBarMenu](#cpane__onshowcontrolbarmenu)|Called by the framework when a special pane menu is about to be displayed.|  \n|`CPane::PrepareToDock`|Used internally.|  \n|[CPane::RecalcLayout](#cpane__recalclayout)|Recalculates layout information for the pane. (Overrides [CBasePane::RecalcLayout](../../mfc/reference/cbasepane-class.md#cbasepane__recalclayout).)|  \n|[CPane::SaveState](#cpane__savestate)|Saves the state of the pane to the registry. (Overrides [CBasePane::SaveState](../../mfc/reference/cbasepane-class.md#cbasepane__savestate).)|  \n|[CPane::SetActiveInGroup](#cpane__setactiveingroup)|Flags a pane as active.|  \n|[CPane::SetBorders](#cpane__setborders)|Sets the border values of the pane.|  \n|[CPane::SetClientHotSpot](#cpane__setclienthotspot)|Sets the hot spot for the pane.|  \n|[CPane::SetDockState](#cpane__setdockstate)|Restores docking state information for the pane.|  \n|[CPane::SetExclusiveRowMode](#cpane__setexclusiverowmode)|Enables or disables the exclusive row mode.|  \n|[CPane::SetMiniFrameRTC](#cpane__setminiframertc)|Sets the runtime class information for the default mini-frame window.|  \n|[CPane::SetMinSize](#cpane__setminsize)|Sets the minimum allowed size for the pane.|  \n|[CPane::SetVirtualRect](#cpane__setvirtualrect)|Sets the *virtual rectangle* of the pane.|  \n|[CPane::StretchPaneDeferWndPos](#cpane__stretchpanedeferwndpos)|Stretches the pane vertically or horizontally based on docking style.|  \n|[CPane::ToggleAutoHide](#cpane__toggleautohide)|Toggles auto-hide mode.|  \n|[CPane::UndockPane](#cpane__undockpane)|Removes the pane from the dock site, default slider, or mini-frame window where it is currently docked. (Overrides [CBasePane::UndockPane](../../mfc/reference/cbasepane-class.md#cbasepane__undockpane).)|  \n|[CPane::UpdateVirtualRect](#cpane__updatevirtualrect)|Updates the virtual rectangle.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPane::OnAfterDock](#cpane__onafterdock)|Called by the framework when a pane has been docked.|  \n|[CPane::OnAfterFloat](#cpane__onafterfloat)|Called by the framework when a pane has been floated.|  \n|[CPane::OnBeforeDock](#cpane__onbeforedock)|Called by the framework when the pane is about to be docked.|  \n|[CPane::OnBeforeFloat](#cpane__onbeforefloat)|Called by the framework when a pane is about to be floated.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPane::m_bHandleMinSize](#cpane__m_bhandleminsize)|Enables consistent handling of the minimal size for panes.|  \n|[CPane::m_recentDockInfo](#cpane__m_recentdockinfo)|Contains recent docking information.|  \n  \n## Remarks  \n Typically, `CPane` objects are not instantiated directly. If you require a pane that has docking functionality, derive your object from [CDockablePane](../../mfc/reference/cdockablepane-class.md). If you require toolbar functionality, derive your object from [CMFCToolBar](../../mfc/reference/cmfctoolbar-class.md).  \n  \n When you derive a class from `CPane`, it can be docked in a [CDockSite](../../mfc/reference/cdocksite-class.md) and it can be floated in a [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CBasePane](../../mfc/reference/cbasepane-class.md)  \n  \n [CPane](../../mfc/reference/cpane-class.md)  \n  \n## Requirements  \n **Header:** afxPane.h  \n  \n##  <a name=\"cpane__adjustsizeimmediate\"></a>  CPane::AdjustSizeImmediate  \n Immediately recalculates the layout of a pane.  \n  \n```  \nvirtual void AdjustSizeImmediate(BOOL bRecalcLayout = TRUE);\n```  \n  \n### Parameters  \n [in] `bRecalcLayout`  \n `TRUE` to automatically recalculate the layout of the pane; otherwise, `FALSE`.  \n  \n### Remarks  \n Call this method when you dynamically change the layout of a pane. For example, you may want to call this method when you hide or show toolbar buttons.  \n  \n##  <a name=\"cpane__allocelements\"></a>  CPane::AllocElements  \n Allocates storage for internal use.  \n  \n```  \nBOOL AllocElements(\n    int nElements,  \n    int cbElement);\n```  \n  \n### Parameters  \n [in] `nElements`  \n The number of elements for which to allocate storage.  \n  \n [in] `cbElement`  \n The size, in bytes, of an element.  \n  \n### Return Value  \n `FALSE` if memory allocation fails; otherwise, `TRUE`.  \n  \n##  <a name=\"cpane__allowshowonpanemenu\"></a>  CPane::AllowShowOnPaneMenu  \n Specifies whether the pane is listed in the runtime-generated list of panes for the application.  \n  \n```  \nvirtual BOOL AllowShowOnPaneMenu() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is displayed in the list; otherwise, `FALSE`. The base implementation always returns `TRUE`.  \n  \n### Remarks  \n The AppWizard-generated application contains a menu option that lists panes that it contains. This method determines whether the pane is displayed in the list.  \n  \n##  <a name=\"cpane__calcavailablesize\"></a>  CPane::CalcAvailableSize  \n Calculates the difference in size between a specified rectangle and the current window rectangle.  \n  \n```  \nvirtual CSize CalcAvailableSize(CRect rectRequired);\n```  \n  \n### Parameters  \n [in] `rectRequired`  \n The required rectangle.  \n  \n### Return Value  \n The difference in width and height between `rectRequired` and the current window rectangle.  \n  \n##  <a name=\"cpane__calcinsiderect\"></a>  CPane::CalcInsideRect  \n Calculates the inside rectangle of a pane, including the borders and grippers.  \n  \n```  \nvoid CalcInsideRect(\n    CRect& rect,  \n    BOOL bHorz) const;\n\n \n```  \n  \n### Parameters  \n [out] `rect`  \n Contains the size and offset of the client area of the pane.  \n  \n [in] `bHorz`  \n `TRUE` if the pane is oriented horizontally; otherwise, `FALSE`.  \n  \n### Remarks  \n This method is called by the framework when it has to recalculate the layout for a pane. The `rect` parameter is filled with the size and offset of the client area of the pane. This includes its borders and grippers.  \n  \n##  <a name=\"cpane__calcrecentdockedrect\"></a>  CPane::CalcRecentDockedRect  \n Calculates the recently docked rectangle.  \n  \n```  \nvoid CalcRecentDockedRect();\n```  \n  \n### Remarks  \n This method updates [CPane::m_recentDockInfo](#cpane__m_recentdockinfo).  \n  \n##  <a name=\"cpane__calcsize\"></a>  CPane::CalcSize  \n Calculates the size of the pane.  \n  \n```  \nvirtual CSize CalcSize(BOOL bVertDock);\n```  \n  \n### Parameters  \n [in] `bVertDock`  \n `TRUE` if the pane is being docked vertically, `FALSE` otherwise.  \n  \n### Return Value  \n The default implementation of this method returns a size of (0, 0).  \n  \n### Remarks  \n Derived classes should override this method.  \n  \n##  <a name=\"cpane__canbedocked\"></a>  CPane::CanBeDocked  \n Determines if the pane can be docked at the specified base pane.  \n  \n```  \nvirtual BOOL CanBeDocked(CBasePane* pDockBar) const;\n\n \n```  \n  \n### Parameters  \n [in] `pDockBar`  \n Specifies the pane where this pane is to be docked.  \n  \n### Return Value  \n `TRUE` if this pane can be docked at the specified docking pane; otherwise, `FALSE`.  \n  \n### Remarks  \n This method is usually called by the framework to determine whether a pane can be docked at the specified docking pane. To determine whether the pane can be docked, the method evaluates the pane's currently enabled docking alignment.  \n  \n You enable docking to the various sides of the frame window by calling [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking).  \n  \n##  <a name=\"cpane__canbetabbeddocument\"></a>  CPane::CanBeTabbedDocument  \n Determines if the pane can be converted to a tabbed document.  \n  \n```  \nvirtual BOOL CanBeTabbedDocument() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane can be converted to a tabbed document; otherwise, `FALSE`.  \n  \n### Remarks  \n Override this method in a derived class and return `FALSE` if you want to prevent a pane from being converted to a tabbed document. A tabbed document will not be listed in the Window Position menu.  \n  \n##  <a name=\"cpane__converttotabbeddocument\"></a>  CPane::ConvertToTabbedDocument  \n Converts a dockable pane to a tabbed document.  \n  \n```  \nvirtual void ConvertToTabbedDocument(BOOL bActiveTabOnly = TRUE);\n```  \n  \n### Parameters  \n [in] `bActiveTabOnly`  \n Not used in `CPane::ConvertToTabbedDocument`.  \n  \n### Remarks  \n Only dockable panes can be converted to tabbed documents. For information, see [CDockablePane::ConvertToTabbedDocument](../../mfc/reference/cdockablepane-class.md#cdockablepane__converttotabbeddocument).  \n  \n##  <a name=\"cpane__copystate\"></a>  CPane::CopyState  \n Copies the state of a pane.  \n  \n```  \nvirtual void CopyState(CPane* pOrgBar);\n```  \n  \n### Parameters  \n [in] `pOrgBar`  \n A pointer to a pane.  \n  \n### Remarks  \n This method copies the state of `pOrgBar` to the current pane.  \n  \n##  <a name=\"cpane__create\"></a>  CPane::Create  \n Creates a control bar and attaches it to the [CPane](../../mfc/reference/cpane-class.md) object.  \n  \n```  \nvirtual BOOL Create(\n    LPCTSTR lpszClassName,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID,  \n    DWORD dwControlBarStyle = AFX_DEFAULT_PANE_STYLE,  \n    CCreateContext* pContext = NULL);\n```  \n  \n### Parameters  \n [in] `lpszClassName`  \n Specifies the name of the Windows class.  \n  \n [in] `dwStyle`  \n Specifies the window style attributes. For more information, see [Window Styles](../../mfc/reference/window-styles.md).  \n  \n [in] `rect`  \n Specifies the initial size and position of the `pParentWnd` window, in client coordinates.  \n  \n [in] [out] `pParentWnd`  \n Specifies the parent window of this pane.  \n  \n [in] `nID`  \n Specifies the ID of the pane.  \n  \n [in] `dwControlBarStyle`  \n Specifies the style for the pane. For more information, see [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex).  \n  \n [in] [out] `pContext`  \n Specifies the create context of the pane.  \n  \n### Return Value  \n `TRUE` if the pane was created successfully; otherwise, `FALSE`.  \n  \n### Remarks  \n This method creates a Windows pane and attaches it to the `CPane` object.  \n  \n If you have not explicitly initialized [CPane::m_recentDockInfo](#cpane__m_recentdockinfo) before you call `Create`, the parameter `rect` will be used as the rectangle when floating or docking the pane.  \n  \n##  <a name=\"cpane__createdefaultminiframe\"></a>  CPane::CreateDefaultMiniframe  \n Creates a mini-frame window for a floating pane.  \n  \n```  \nvirtual CPaneFrameWnd* CreateDefaultMiniframe(CRect rectInitial);\n```  \n  \n### Parameters  \n [in] `rectInitial`  \n Specifies the initial size and position, in screen coordinates, of the mini-frame window to create.  \n  \n### Return Value  \n The newly created mini-frame window.  \n  \n### Remarks  \n This method is called by the framework to create a mini-frame window when a pane is floated. The mini-frame window can be of type [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) or of type [CMultiPaneFrameWnd](../../mfc/reference/cmultipaneframewnd-class.md). A multi mini-frame window is created if the pane has the `AFX_CBRS_FLOAT_MULTI` style.  \n  \n The runtime class information for the mini-frame window is stored in the `CPane::m_pMiniFrameRTC` member. You can use a derived class to set this member if you decide to create customized mini-frame windows.  \n  \n##  <a name=\"cpane__createex\"></a>  CPane::CreateEx  \n Creates a control bar and attaches it to the [CPane](../../mfc/reference/cpane-class.md) object.  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwStyleEx,  \n    LPCTSTR lpszClassName,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID,  \n    DWORD dwControlBarStyle = AFX_DEFAULT_PANE_STYLE,  \n    CCreateContext* pContext = NULL);\n```  \n  \n### Parameters  \n [in] `dwStyleEx`  \n Specifies extended window style attributes. For more information, see [Extended Window Styles](../../mfc/reference/extended-window-styles.md).  \n  \n [in] `lpszClassName`  \n Specifies the name of the Windows class.  \n  \n [in] `dwStyle`  \n Specifies window style attributes. For more information, see [Window Styles](../../mfc/reference/window-styles.md).  \n  \n [in] `rect`  \n Specifies the initial size and position of the `pParentWnd` window, in client coordinates.  \n  \n [in] [out] `pParentWnd`  \n Specifies the parent window of this pane.  \n  \n [in] `nID`  \n Specifies the ID of the pane.  \n  \n [in] `dwControlBarStyle`  \n Specifies the style for the pane. For more information, see [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex).  \n  \n [in] [out] `pContext`  \n Specifies the create context for the pane.  \n  \n### Return Value  \n `TRUE` if the pane was created successfully; otherwise, `FALSE`.  \n  \n### Remarks  \n This method creates a Windows pane and attaches it to the `CPane` object.  \n  \n If you have not explicitly initialized [CPane::m_recentDockInfo](#cpane__m_recentdockinfo) before you call `CreateEx`, the parameter `rect` will be used as the rectangle when floating or docking the pane.  \n  \n##  <a name=\"cpane__dockbymouse\"></a>  CPane::DockByMouse  \n Docks a pane by using the mouse.  \n  \n```  \nvirtual BOOL DockByMouse(CBasePane* pDockBar);\n```  \n  \n### Parameters  \n [in] `pDockBar`  \n Specifies the base pane to which to dock this pane.  \n  \n### Return Value  \n `TRUE` if the pane was docked successfully; otherwise, `FALSE`.  \n  \n##  <a name=\"cpane__dockpane\"></a>  CPane::DockPane  \n Docks the floating pane to a base pane.  \n  \n```  \nvirtual BOOL DockPane(\n    CBasePane* pDockBar,  \n    LPCRECT lpRect,  \n    AFX_DOCK_METHOD dockMethod);\n```  \n  \n### Parameters  \n [in] [out] `pDockBar`  \n Specifies the base pane to dock this pane to.  \n  \n [in] `lpRect`  \n Specifies the rectangle on the base pane where this pane is to be docked.  \n  \n [in] `dockMethod`  \n Specifies the docking method to use. Available options are as follows:  \n  \n|Option|Description|  \n|------------|-----------------|  \n|`DM_UNKNOWN`|The framework uses this option when the docking method is unknown. The pane does not store its most recent floating position. You can also use this option to programmatically dock a pane when you do not have to store the recent floating position.|  \n|`DM_MOUSE`|Used internally.|  \n|`DM_DBL_CLICK`|This option is used when the gripper is double-clicked. The pane is repositioned at its most recent docking position. If the pane is undocked by double-clicking, the pane is repositioned at its most recent floating position.|  \n|`DM_SHOW`|This option can be used to programmatically dock the pane. The pane stores its most recent floating position.|  \n|`DM_RECT`|The pane is docked in the region that is specified by `lpRect`.|  \n|`DM_STANDARD`|When you use this option, the framework draws the pane as an outline frame while it is being moved.|  \n  \n### Return Value  \n `TRUE` if the pane was docked successfully; otherwise, `FALSE`.  \n  \n### Remarks  \n This method docks the pane to the base pane that is specified by the `pDockBar` parameter. You must first enable docking by calling [CBasePane::EnableDocking](../../mfc/reference/cbasepane-class.md#cbasepane__enabledocking).  \n  \n##  <a name=\"cpane__dockpanestandard\"></a>  CPane::DockPaneStandard  \n Docks a pane by using outline (standard) docking.  \n  \n```  \nvirtual CPane* DockPaneStandard(BOOL& bWasDocked);\n```  \n  \n### Parameters  \n [in] `bWasDocked`  \n `TRUE` if the pane was successfully docked; otherwise, `FALSE`.  \n  \n### Return Value  \n This method always returns the `this` pointer.  \n  \n### Remarks  \n This method is used only for panes that are derived from the [CDockablePane Class](../../mfc/reference/cdockablepane-class.md). For more information, see [CDockablePane::DockPaneStandard](../../mfc/reference/cdockablepane-class.md#cdockablepane__dockpanestandard).  \n  \n##  <a name=\"cpane__docktoframewindow\"></a>  CPane::DockToFrameWindow  \n Docks a dockable pane to a frame.  \n  \n```  \nvirtual BOOL DockToFrameWindow(\n    DWORD dwAlignment,  \n    LPCRECT lpRect = NULL,  \n    DWORD dwDockFlags = DT_DOCK_LAST,  \n    CBasePane* pRelativeBar = NULL,  \n    int nRelativeIndex = -1,  \n    BOOL bOuterEdge = FALSE);\n```  \n  \n### Parameters  \n [in] `dwAlignment`  \n The side of the parent frame that you want to dock the pane to.  \n  \n [in] `lpRect`  \n The specified size.  \n  \n [in] `dwDockFlags`  \n Ignored.  \n  \n [in] `pRelativeBar`  \n Ignored.  \n  \n [in] `nRelativeIndex`  \n Ignored.  \n  \n [in] `bOuterEdge`  \n If `TRUE` and there are other dockable panes at the side that are specified by `dwAlignment`, the pane is docked outside the other panes, closer to the edge of the parent frame. If `FALSE`, the pane is docked closer to the center of the client area.  \n  \n### Return Value  \n `FALSE` if a pane divider ( [CPaneDivider Class](../../mfc/reference/cpanedivider-class.md)) cannot be created; otherwise, `TRUE`.  \n  \n### Remarks  \n  \n##  <a name=\"cpane__doesallowsiblingbars\"></a>  CPane::DoesAllowSiblingBars  \n Indicates whether you can dock another pane at the same row where the current pane is docked.  \n  \n```  \nvirtual BOOL DoesAllowSiblingBars() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if this pane can dock to another pane on the same row as itself; otherwise, `FALSE`.  \n  \n### Remarks  \n You can enable or disable this behavior by calling [CPane::SetExclusiveRowMode](#cpane__setexclusiverowmode).  \n  \n By default, toolbars have exclusive row mode disabled and the menu bar has exclusive row mode enabled.  \n  \n##  <a name=\"cpane__floatpane\"></a>  CPane::FloatPane  \n Floats the pane.  \n  \n```  \nvirtual BOOL FloatPane(\n    CRect rectFloat,  \n    AFX_DOCK_METHOD dockMethod = DM_UNKNOWN,  \n    bool bShow = true);\n```  \n  \n### Parameters  \n [in] `rectFloat`  \n Specifies the location, in screen coordinates, to position the pane when it is floated.  \n  \n [in] `dockMethod`  \n Specifies the docking method to use when the pane is floated. For a list of possible values, see [CPane::DockPane](#cpane__dockpane).  \n  \n [in] `bShow`  \n `TRUE` to show the pane when floated; otherwise, `FALSE`.  \n  \n### Return Value  \n `TRUE` if the pane was floated successfully or if the pane cannot be floated because [CBasePane::CanFloat](../../mfc/reference/cbasepane-class.md#cbasepane__canfloat) returns `FALSE`; otherwise, `FALSE`.  \n  \n### Remarks  \n Call this method to float the pane at the position that is specified by the `rectFloat` parameter. This method automatically creates a parent mini-frame window for the pane.  \n  \n##  <a name=\"cpane__getavailableexpandsize\"></a>  CPane::GetAvailableExpandSize  \n Returns the amount, in pixels, that the pane can expand.  \n  \n```  \nvirtual int GetAvailableExpandSize() const;\n\n \n```  \n  \n### Return Value  \n If the pane is docked horizontally, the return value is the available width; otherwise, the return value is the available height.  \n  \n### Remarks  \n  \n##  <a name=\"cpane__getavailablestretchsize\"></a>  CPane::GetAvailableStretchSize  \n Returns the amount, in pixels, that the pane can shrink.  \n  \n```  \nvirtual int GetAvailableStretchSize() const;\n\n \n```  \n  \n### Return Value  \n The amount, in pixels, that the pane can shrink. If the pane is docked horizontally, this amount is the available width; otherwise, it is the available height.  \n  \n### Remarks  \n The available stretch size is calculated by subtracting the minimum allowed size for the pane ( [CPane::GetMinSize](#cpane__getminsize)) from the current size ( [CWnd::GetWindowRect](../../mfc/reference/cwnd-class.md#cwnd__getwindowrect)).  \n  \n##  <a name=\"cpane__getborders\"></a>  CPane::GetBorders  \n Returns the width of the borders of the pane.  \n  \n```  \nCRect GetBorders() const;\n\n \n```  \n  \n### Return Value  \n A [CRect](../../atl-mfc-shared/reference/crect-class.md) object that contains the current width, in pixels, of each side of the pane. For example, the value of the `left` member of the `CRect` object is the width of the left border.  \n  \n### Remarks  \n To set the size of the borders, call [CPane::SetBorders](#cpane__setborders).  \n  \n##  <a name=\"cpane__getclienthotspot\"></a>  CPane::GetClientHotSpot  \n Returns the *hot spot* for the pane.  \n  \n```  \nCPoint GetClientHotSpot() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n The *hot spot* is the point on the pane that the user selects and holds to move the pane. A hot spot is used for smooth animation when the pane is moved from a docked position.  \n  \n##  <a name=\"cpane__getdocksiterow\"></a>  CPane::GetDockSiteRow  \n Returns the dock row ( [CDockingPanesRow Class](../../mfc/reference/cdockingpanesrow-class.md)) in which the pane is docked.  \n  \n```  \nCDockingPanesRow* GetDockSiteRow() const;\n\n \n```  \n  \n### Return Value  \n A `CDockingPanesRow`* that points to the dock row in which the pane is docked, or `NULL` if the pane is not docked.  \n  \n##  <a name=\"cpane__getexclusiverowmode\"></a>  CPane::GetExclusiveRowMode  \n Determines if the pane is in exclusive row mode.  \n  \n```  \nvirtual BOOL GetExclusiveRowMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is in exclusive row mode; otherwise, `FALSE`.  \n  \n### Remarks  \n For more information about exclusive row mode, see [CPane::SetExclusiveRowMode](#cpane__setexclusiverowmode).  \n  \n##  <a name=\"cpane__gethotspot\"></a>  CPane::GetHotSpot  \n Returns the hot spot that is stored in an underlying `CMFCDragFrameImpl` object.  \n  \n```  \nCPoint GetHotSpot() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n The `CPane` class contains a `CMFCDragFrameImpl` object, `m_dragFrameImpl`, that is responsible for drawing the rectangle that appears when the user moves a pane in the standard docking mode. The hot spot is used to draw the rectangle relative to the current mouse position as the user moves the pane.  \n  \n##  <a name=\"cpane__getminsize\"></a>  CPane::GetMinSize  \n Retrieves the minimum allowed size for the pane.  \n  \n```  \nvirtual void GetMinSize(CSize& size) const;\n\n \n```  \n  \n### Parameters  \n [out] `size`  \n A `CSize` object that is filled with the minimum allowed size.  \n  \n### Remarks  \n  \n##  <a name=\"cpane__getpanename\"></a>  CPane::GetPaneName  \n Retrieves the title for the pane.  \n  \n```  \nvirtual void GetPaneName(CString& strName) const;\n\n \n```  \n  \n### Parameters  \n [out] `strName`  \n A `CString` object that is filled with the caption name.  \n  \n### Remarks  \n The pane title is displayed in the caption area when the pane is docked or floating. If the pane is part of a tabbed group, the title is displayed in the tab area. If the pane is in auto-hide mode, the title is displayed on a `CMFCAutoHideButton`.  \n  \n##  <a name=\"cpane__getvirtualrect\"></a>  CPane::GetVirtualRect  \n Retrieves the *virtual rectangle* of the pane.  \n  \n```  \nvoid GetVirtualRect(CRect& rectVirtual) const;\n\n \n```  \n  \n### Parameters  \n [out] `rectVirtual`  \n A `CRect` object that is filled with the virtual rectangle.  \n  \n### Remarks  \n When a pane is moved, the framework stores the original position of the pane in a virtual rectangle. The framework can use the virtual rectangle to restore the original position of the pane.  \n  \n Do not call methods that are related to virtual rectangles unless you are moving panes programmatically.  \n  \n##  <a name=\"cpane__ischangestate\"></a>  CPane::IsChangeState  \n As the pane is being moved, this method analyzes its position relative to other panes, dock rows, and mini-frame windows, and returns the appropriate `AFX_CS_STATUS` value.  \n  \n```  \nvirtual AFX_CS_STATUS IsChangeState(\n    int nOffset,  \n    CBasePane** ppTargetBar) const;\n\n \n```  \n  \n### Parameters  \n [in] `nOffset`  \n Specifies docking sensitivity. For example, a pane that is moved within `nOffset` pixels from a dock row will be docked.  \n  \n [in] `ppTargetBar`  \n When the method returns, `ppTargetBar` contains either a pointer to the object to which the current pane should be docked, or `NULL` if no docking should occur.  \n  \n### Return Value  \n One of the following `AFX_CS_STATUS` values:  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`CS_NOTHING`|The pane is not near a dock site. The framework does not dock the pane.|  \n|`CS_DOCK_IMMEDIATELY`|The pane is over a dock site, and the `DT_IMMEDIATE` style is enabled. The framework docks the pane immediately.|  \n|`CS_DELAY_DOCK`|The pane is over a dock site that is either another docking pane or an edge of the main frame. The framework docks the pane when the user releases the move.|  \n|`CS_DELAY_DOCK_TO_TAB`|The pane is over a dock site that causes the pane to be docked in a tabbed window. This occurs when the pane is either over the caption of another docking pane or over the tab area of a tabbed pane. The framework docks the pane when the user releases the move.|  \n  \n##  <a name=\"cpane__isdragmode\"></a>  CPane::IsDragMode  \n Specifies whether the pane is being moved.  \n  \n```  \nvirtual BOOL IsDragMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is being moved; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cpane__isinfloatingmultipaneframewnd\"></a>  CPane::IsInFloatingMultiPaneFrameWnd  \n Specifies whether the pane is in a multi-pane frame window ( [CMultiPaneFrameWnd Class](../../mfc/reference/cmultipaneframewnd-class.md)).  \n  \n```  \nvirtual BOOL IsInFloatingMultiPaneFrameWnd() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is in a multi-pane frame window; otherwise, `FALSE`.  \n  \n### Remarks  \n Only dockable panes can float in a multi-pane frame window. Therefore, `CPane::IsInFloatingMultiPaneFrameWnd` always returns `FALSE`.  \n  \n##  <a name=\"cpane__isleftof\"></a>  CPane::IsLeftOf  \n Determines whether the pane is left of (or above) the specified rectangle.  \n  \n```  \nbool IsLeftOf(\n    CRect rect,  \n    bool bWindowRect = true) const;\n\n \n```  \n  \n### Parameters  \n [in] `rect`  \n A `CRect` object that is used for comparison.  \n  \n [in] `bWindowRect`  \n If `TRUE`, `rect` is assumed to contain screen coordinates; if `FALSE`, `rect` is assumed to contain client coordinates.  \n  \n### Return Value  \n  \n### Remarks  \n If the pane is docked horizontally, this method checks whether its location is left of `rect`. Otherwise, this method checks whether the location is above `rect`.  \n  \n##  <a name=\"cpane__isresizable\"></a>  CPane::IsResizable  \n Specifies whether the pane is resizable.  \n  \n```  \nvirtual BOOL IsResizable() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is resizable; otherwise, `FALSE`.  \n  \n### Remarks  \n Base `CPane` objects are not resizable.  \n  \n The docking manager uses the resizable flag to determine pane layout. Non-resizable panes are always located at the outer edges of the parent frame.  \n  \n Non-resizable panes cannot reside in docking containers.  \n  \n##  <a name=\"cpane__istabbed\"></a>  CPane::IsTabbed  \n Determines whether the pane has been inserted into the tab control of a tabbed window.  \n  \n```  \nvirtual BOOL IsTabbed() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane is tabbed; otherwise, `FALSE`.  \n  \n### Remarks  \n The tabbed state is treated separately from the floating, docked, and auto-hide states.  \n  \n##  <a name=\"cpane__loadstate\"></a>  CPane::LoadState  \n Loads the state of the pane from the registry.  \n  \n```  \nvirtual BOOL LoadState(\n    LPCTSTR lpszProfileName = NULL,  \n    int nIndex = -1,  \n    UINT uiID = (UINT) -1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n Profile name.  \n  \n [in] `nIndex`  \n Profile index.  \n  \n [in] `uiID`  \n Pane ID.  \n  \n### Return Value  \n `TRUE` if the pane state was loaded successfully; otherwise, `FALSE`.  \n  \n### Remarks  \n The framework calls this method to load the pane state from the registry. Override it in a derived class to load additional information that is saved by [CPane::SaveState](#cpane__savestate).  \n  \n When you override this method, also call the base method, and return `FALSE` if the base method returns `FALSE`.  \n  \n##  <a name=\"cpane__m_bhandleminsize\"></a>  CPane::m_bHandleMinSize  \n Enables consistent handling of minimum pane sizes.  \n  \n```  \nAFX_IMPORT_DATA static BOOL m_bHandleMinSize;  \n```  \n  \n### Remarks  \n If one or more docking panes in your application override `GetMinSize`, or if your application calls `SetMinSize`, you may want to set this static member to `TRUE` in order to enable the framework to consistently handle how panes are sized.  \n  \n If this value is set to `TRUE`, all panes whose size should be reduced below their minimum size are clipped, not stretched. Because the framework uses window regions for pane sizing purposes, do not change the size of the window region for docking panes if this value is set to `TRUE`.  \n  \n##  <a name=\"cpane__m_recentdockinfo\"></a>  CPane::m_recentDockInfo  \n Contains recent docking information.  \n  \n```  \nCRecentDockSiteInfo m_recentDockInfo;  \n```  \n  \n### Remarks  \n The framework stores the latest docking state information for the pane in this member.  \n  \n##  <a name=\"cpane__movebyalignment\"></a>  CPane::MoveByAlignment  \n Moves the pane and the virtual rectangle by the specified amount.  \n  \n```  \nBOOL MoveByAlignment(\n    DWORD dwAlignment,  \n    int nOffset);\n```  \n  \n### Parameters  \n [in] `dwAlignment`  \n Specifies pane alignment.  \n  \n [in] `nOffset`  \n The amount, in pixels, by which to move the pane and the virtual rectangle.  \n  \n### Return Value  \n  \n### Remarks  \n `dwAlignment` can be any of the following values:  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`CBRS_ALIGN_TOP`|Enables the pane to be docked to the top of the client area of a frame window.|  \n|`CBRS_ALIGN_BOTTOM`|Enables the pane to be docked to the bottom of the client area of a frame window.|  \n|`CBRS_ALIGN_LEFT`|Enables the pane to be docked to the left side of the client area of a frame window.|  \n|`CBRS_ALIGN_RIGHT`|Enables the pane to be docked to the right side of the client area of a frame window.|  \n|`CBRS_ALIGN_ANY`|Enables the pane to be docked to any side of the client area of a frame window.|  \n  \n If `dwAlignment` contains the `CBRS_ALIGN_LEFT` or `CBRS_ALIGN_RIGHT` flag, the pane and virtual rectangle are moved horizontally; otherwise, if `dwAlignment` contains the `CBRS_ALIGN_TOP` or `CBRS_ALIGN_BOTTOM` flag, the pane and virtual rectangle are moved vertically.  \n  \n##  <a name=\"cpane__movepane\"></a>  CPane::MovePane  \n Moves the pane to the specified rectangle.  \n  \n```  \nvirtual CSize MovePane(\n    CRect rectNew,  \n    BOOL bForceMove,  \n    HDWP& hdwp);\n```  \n  \n### Parameters  \n [in] `rectNew`  \n Specifies the new rectangle for the pane.  \n  \n [in] `bForceMove`  \n If `TRUE`, this method ignores the minimum allowed pane size ( [CPane::GetMinSize](#cpane__getminsize)); otherwise, the pane is adjusted, if necessary, to ensure that it is at least the minimum allowed size.  \n  \n [in] `hdwp`  \n Not used.  \n  \n### Return Value  \n A `CSize` object that contains the differences in width and height between the new and old rectangles (old rectangle – `rectNew`).  \n  \n### Remarks  \n This method is used only for dockable panes.  \n  \n##  <a name=\"cpane__onafterchangeparent\"></a>  CPane::OnAfterChangeParent  \n Called by the framework when the parent of a pane has changed.  \n  \n```  \nvirtual void OnAfterChangeParent(CWnd* pWndOldParent);\n```  \n  \n### Parameters  \n [in] [out] `pWndOldParent`  \n The pane's previous parent window.  \n  \n### Remarks  \n This method is called by the framework when the parent of a pane has changed because of a docking or floating operation.  \n  \n##  <a name=\"cpane__onafterdock\"></a>  CPane::OnAfterDock  \n Called by the framework when a pane has been docked.  \n  \n```  \nvirtual void OnAfterDock(\n    CBasePane* pBar,  \n    LPCRECT lpRect,  \n    AFX_DOCK_METHOD dockMethod);\n```  \n  \n### Parameters  \n [in] `pBar`  \n This parameter is not used.  \n  \n [in] `lpRect`  \n This parameter is not used.  \n  \n [in] `dockMethod`  \n This parameter is not used.  \n  \n##  <a name=\"cpane__onafterfloat\"></a>  CPane::OnAfterFloat  \n Called by the framework after a pane floats.  \n  \n```  \nvirtual void OnAfterFloat();\n```  \n  \n### Remarks  \n You can override this method in a derived class if you want to perform any processing after a pane floats.  \n  \n##  <a name=\"cpane__onbeforechangeparent\"></a>  CPane::OnBeforeChangeParent  \n Called by the framework when the parent of the pane is about to change.  \n  \n```  \nvirtual void OnBeforeChangeParent(\n    CWnd* pWndNewParent,  \n    BOOL bDelay = FALSE);\n```  \n  \n### Parameters  \n [in] [out] `pWndNewParent`  \n Specifies the new parent window.  \n  \n [in] `bDelay`  \n `TRUE` to delay the global docking layout adjustment; otherwise, `FALSE`.  \n  \n### Remarks  \n This method is called by the framework when the parent of the pane is about to change because the pane is being docked or floated.  \n  \n By default, the pane is unregistered with the docking pane by calling `CDockSite::RemovePane`.  \n  \n##  <a name=\"cpane__onbeforedock\"></a>  CPane::OnBeforeDock  \n Called by the framework when the pane is about to dock.  \n  \n```  \nvirtual BOOL OnBeforeDock(\n    CBasePane** ppDockBar,  \n    LPCRECT lpRect,  \n    AFX_DOCK_METHOD dockMethod);\n```  \n  \n### Parameters  \n [in] [out] `ppDockBar`  \n Specifies the pane that this pane is docking to.  \n  \n [in] `lpRect`  \n Specifies the docking rectangle.  \n  \n [in] `dockMethod`  \n Specifies the docking method.  \n  \n### Return Value  \n `TRUE` if the pane can be docked. If the function returns `FALSE`, the docking operation will be aborted.  \n  \n### Remarks  \n This method is called by the framework when a pane is about to be docked. You can override this method in a derived class if you want to perform any processing before a pane is finally docked.  \n  \n##  <a name=\"cpane__onbeforefloat\"></a>  CPane::OnBeforeFloat  \n Called by the framework when a pane is about to float.  \n  \n```  \nvirtual BOOL OnBeforeFloat(\n    CRect& rectFloat,  \n    AFX_DOCK_METHOD dockMethod);\n```  \n  \n### Parameters  \n [in] `rectFloat`  \n Specifies the position and size of the pane when it is in a floating state.  \n  \n [in] `dockMethod`  \n Specifies the docking method of the pane.  \n  \n### Return Value  \n `TRUE` if the pane can be floated; otherwise, `FALSE`.  \n  \n### Remarks  \n This method is called by the framework when a pane is about to float. You can override this method in a derived class if you want to perform any processing before the pane finally floats.  \n  \n##  <a name=\"cpane__onpressclosebutton\"></a>  CPane::OnPressCloseButton  \n Called by the framework when the user presses the close button on the caption for the pane.  \n  \n```  \nvirtual void OnPressCloseButton();\n```  \n  \n### Remarks  \n This method is called by the framework when a user presses the **Close** button on the pane's caption. To receive notifications about the **Close** event, you can override this method in a derived class.  \n  \n##  <a name=\"cpane__onshowcontrolbarmenu\"></a>  CPane::OnShowControlBarMenu  \n Called by the framework when a special pane menu is about to be displayed.  \n  \n```  \nvirtual BOOL OnShowControlBarMenu(CPoint point);\n```  \n  \n### Parameters  \n [in] `point`  \n Specifies the menu location.  \n  \n### Return Value  \n `TRUE` if the menu can be displayed; otherwise, `FALSE`.  \n  \n### Remarks  \n The menu contains several items that enable you to specify the pane's behavior, namely: **Floating**, **Docking**, **AutoHide**, and **Hide**. You can enable this menu for all panes by calling [CDockingManager::EnableDockSiteMenu](../../mfc/reference/cdockingmanager-class.md#cdockingmanager__enabledocksitemenu).  \n  \n##  <a name=\"cpane__recalclayout\"></a>  CPane::RecalcLayout  \n Recalculates layout information for the pane.  \n  \n```  \nvirtual void RecalcLayout();\n```  \n  \n### Remarks  \n If the pane is docked, this method updates the virtual rectangle for the pane by setting its size to the current size of the pane.  \n  \n If the pane is floating, this method notifies the parent mini-frame to adjust the size of the pane to the size of the mini-frame. The framework ensures that the mini-frame is at least the minimum allowed size for the pane ( [CPane::GetMinSize](#cpane__getminsize)) and resizes the mini-frame if necessary.  \n  \n##  <a name=\"cpane__savestate\"></a>  CPane::SaveState  \n Saves the state of the pane to the registry.  \n  \n```  \nvirtual BOOL SaveState(\n    LPCTSTR lpszProfileName = NULL,  \n    int nIndex = -1,  \n    UINT uiID = (UINT) -1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n Profile name.  \n  \n [in] `nIndex`  \n Profile index.  \n  \n [in] `uiID`  \n Pane ID.  \n  \n### Return Value  \n `TRUE` if the state was saved successfully; otherwise, `FALSE`.  \n  \n### Remarks  \n The framework calls this method when it saves the state of the pane to the registry. Override `SaveState` in a derived class to store additional information.  \n  \n When you override this method, also call the base method, and return `FALSE` if the base method returns `FALSE`.  \n  \n##  <a name=\"cpane__setactiveingroup\"></a>  CPane::SetActiveInGroup  \n Flags a pane as active.  \n  \n```  \nvirtual void SetActiveInGroup(BOOL bActive);\n```  \n  \n### Parameters  \n [in] `bActive`  \n A `BOOL` that specifies whether the pane is flagged as active.  \n  \n### Remarks  \n When a dockable pane is shown or an auto-hide button is chosen, the corresponding auto-hide pane is marked as active.  \n  \n The appearance of an auto-hide button that is associated with the pane is based on two factors. If the pane is active, and the `static``BOOL``CMFCAutoHideButton::m_bOverlappingTabs` is `TRUE`, the framework displays the auto-hide button as an icon and a label. For an inactive pane, the framework displays only the auto-hide icon.  \n  \n If `CMFCAutoHideButton::m_bOverlappingTabs` is `FALSE`, or if the pane is not located in a group, the framework displays the associated auto-hide button as an icon and a label.  \n  \n##  <a name=\"cpane__setborders\"></a>  CPane::SetBorders  \n Sets the border values of the pane.  \n  \n```  \nvoid SetBorders(\n    int cxLeft = 0,  \n    int cyTop = 0,  \n    int cxRight = 0,  \n    int cyBottom = 0);\n\n \nvoid SetBorders(\n    LPCRECT lpRect);\n```  \n  \n### Parameters  \n [in] `cxLeft`  \n Specifies the width, in pixels, of the left border of the pane.  \n  \n [in] `cyTop`  \n Specifies the width, in pixels, of the top border of the pane.  \n  \n [in] `cxRight`  \n Specifies the width, in pixels, of the right border of the pane.  \n  \n [in] `cyBottom`  \n Specifies the width, in pixels, of the bottom border of the pane.  \n  \n [in] `lpRect`  \n A [CRect](../../atl-mfc-shared/reference/crect-class.md) object that contains the width, in pixels, of each border of the pane.  \n  \n### Remarks  \n Call this function to set the sizes of the pane's borders.  \n  \n##  <a name=\"cpane__setclienthotspot\"></a>  CPane::SetClientHotSpot  \n Sets the *hot spot* for the pane.  \n  \n```  \nvoid SetClientHotSpot(const CPoint& ptNew);\n```  \n  \n### Parameters  \n [in] `ptNew`  \n A `CPoint` object that specifies the new hot spot.  \n  \n### Remarks  \n The *hot spot* is the point on the pane that the user selects and holds to move the pane. A hot spot is used for smooth animation when the pane is dragged from a docked position.  \n  \n##  <a name=\"cpane__setdockstate\"></a>  CPane::SetDockState  \n Restores docking state information for the pane.  \n  \n```  \nvirtual void SetDockState(CDockingManager* pDockManager);\n```  \n  \n### Parameters  \n [in] `pDockManager`  \n Pointer to the docking manager for the main frame window.  \n  \n### Remarks  \n This method is called by the framework to restore recent docking state information for the pane. A pane stores recent docking state information in [CPane::m_recentDockInfo](#cpane__m_recentdockinfo). For more information, see the [CRecentDockSiteInfo Class](../../mfc/reference/crecentdocksiteinfo-class.md).  \n  \n You can also call this method to set the docking state when you load pane information from an external source.  \n  \n##  <a name=\"cpane__setexclusiverowmode\"></a>  CPane::SetExclusiveRowMode  \n Enables or disables the exclusive row mode.  \n  \n```  \nvirtual void SetExclusiveRowMode(BOOL bExclusive = TRUE);\n```  \n  \n### Parameters  \n [in] `bExclusive`  \n `TRUE` to enable exclusive row mode; otherwise, `FALSE`.  \n  \n### Remarks  \n Call this method to enable or disable exclusive row mode. When a pane is in exclusive row mode, it cannot share the same row with any other toolbars.  \n  \n By default, all toolbars have exclusive row mode disabled and the menu bar has exclusive row mode enabled.  \n  \n##  <a name=\"cpane__setminsize\"></a>  CPane::SetMinSize  \n Sets the minimum allowed size for the pane.  \n  \n```  \nvoid SetMinSize(const CSize& size);\n```  \n  \n### Parameters  \n [in] `size`  \n A `CSize` object that contains the minimum allowed size for the pane.  \n  \n### Remarks  \n  \n##  <a name=\"cpane__setvirtualrect\"></a>  CPane::SetVirtualRect  \n Sets the *virtual rectangle* of the pane.  \n  \n```  \nvoid SetVirtualRect(\n    const CRect& rect,  \n    BOOL bMapToParent = TRUE);\n```  \n  \n### Parameters  \n [in] `rect`  \n A `CRect` object that specifies the virtual rectangle to be set.  \n  \n [in] `bMapToParent`  \n Specify `TRUE` if `rect` contains points relative to the parent window.  \n  \n### Remarks  \n A *virtual rectangle* stores the original position of a pane when it is moved. The framework can use the virtual rectangle to restore the original position.  \n  \n Do not call methods that are related to virtual rectangles unless you are moving panes programmatically.  \n  \n##  <a name=\"cpane__setminiframertc\"></a>  CPane::SetMiniFrameRTC  \n Sets the runtime class information for the default mini-frame window.  \n  \n```  \nvoid SetMiniFrameRTC(CRuntimeClass* pClass);\n```  \n  \n### Parameters  \n [in] [out] `pClass`  \n Specifies the runtime class information for the mini-frame window.  \n  \n### Remarks  \n When a pane is floated, it is put on a [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) (mini-frame) window. You can provide a custom `CPaneFrameWnd`-derived class that will be used when [CPane::CreateDefaultMiniframe](#cpane__createdefaultminiframe) is called.  \n  \n##  <a name=\"cpane__stretchpanedeferwndpos\"></a>  CPane::StretchPaneDeferWndPos  \n Stretches the pane vertically or horizontally based on docking style.  \n  \n```  \nvirtual int StretchPaneDeferWndPos(\n    int nStretchSize,  \n    HDWP& hdwp);\n```  \n  \n### Parameters  \n [in] `nStretchSize`  \n The amount, in pixels, to stretch the pane. Use a negative value to shrink the pane.  \n  \n [in] `hdwp`  \n Not used.  \n  \n### Return Value  \n The actual amount, in pixels, that the pane was stretched.  \n  \n### Remarks  \n If necessary, this method modifies `nStretchSize` to ensure that the pane does not exceed size limits. These limits are obtained by calling [CPane::GetAvailableStretchSize](#cpane__getavailablestretchsize) and [CPane::GetAvailableExpandSize](#cpane__getavailableexpandsize).  \n  \n##  <a name=\"cpane__toggleautohide\"></a>  CPane::ToggleAutoHide  \n Toggles auto-hide mode.  \n  \n```  \nvirtual void ToggleAutoHide();\n```  \n  \n### Remarks  \n Call this method to toggle auto-hide mode. A pane must be docked to a main frame window in order to be switch to auto-hide mode.  \n  \n##  <a name=\"cpane__undockpane\"></a>  CPane::UndockPane  \n Removes the pane from the dock site, default slider, or mini-frame window where it is currently docked.  \n  \n```  \nvirtual void UndockPane(BOOL bDelay = FALSE);\n```  \n  \n### Parameters  \n [in] `bDelay`  \n If `FALSE`, the framework calls [CBasePane::AdjustDockingLayout](../../mfc/reference/cbasepane-class.md#cbasepane__adjustdockinglayout) to adjust the docking layout.  \n  \n### Remarks  \n Use this method to programmatically undock a pane.  \n  \n##  <a name=\"cpane__updatevirtualrect\"></a>  CPane::UpdateVirtualRect  \n Updates the virtual rectangle.  \n  \n```  \nvoid UpdateVirtualRect();\n\n \nvoid UpdateVirtualRect(CPoint ptOffset);\n\n \nvoid UpdateVirtualRect(CSize sizeNew);\n```  \n  \n### Parameters  \n [in] `ptOffset`  \n A `CPoint` object that specifies an offset by which to shift the pane.  \n  \n [in] `sizeNew`  \n A `CSize` object that specifies a new size for the  pane.  \n  \n### Remarks  \n The first overload sets the virtual rectangle by using the current position and size of the pane.  \n  \n The second overload shifts the virtual rectangle by the amount that is specified by `ptOffset`.  \n  \n The third overload sets the virtual rectangle by using the current position of the pane and the size that is specified by `sizeNew`.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CBasePane Class](../../mfc/reference/cbasepane-class.md)\n"}