{"nodes":[{"pos":[12,52],"content":"&lt;queue&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"queue<ph id=\"ph1\">&amp;gt;</ph> operators | Microsoft Docs","pos":[4,40],"source":"queue&gt; operators | Microsoft Docs"}]},{"content":"queue<ph id=\"ph1\">&amp;gt;</ph> operators","pos":[259,278],"source":"queue&gt; operators"},{"content":"operator!=","pos":[298,308]},{"content":"operator","pos":[326,334]},{"content":"operator","pos":[356,364]},{"content":"operator","pos":[394,402]},{"content":"operator","pos":[424,432]},{"content":"operator==","pos":[458,468]},{"pos":[526,536],"content":"operator!="},{"content":"Tests if the queue object on the left side of the operator is not equal to the queue object on the right side.","pos":[540,650]},{"content":"Parameters","pos":[768,778]},{"content":"An object of type <bpt id=\"p1\">**</bpt>queue<ept id=\"p1\">**</ept>.","pos":[793,821],"source":" An object of type **queue**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>queue<ept id=\"p1\">**</ept>.","pos":[840,868],"source":" An object of type **queue**."},{"content":"Return Value","pos":[878,890]},{"pos":[894,962],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the queues are not equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if queues are equal.","source":"**true** if the queues are not equal; **false** if queues are equal."},{"content":"Remarks","pos":[972,979]},{"content":"The comparison between queue objects is based on a pairwise comparison of their elements.","pos":[983,1072]},{"content":"Two queues are equal if they have the same number of elements and their respective elements have the same values.","pos":[1073,1186]},{"content":"Otherwise, they are unequal.","pos":[1187,1215]},{"content":"Example","pos":[1225,1232]},{"pos":[2242,2250],"content":"operator"},{"content":"Tests if the queue object on the left side of the operator is less than the queue object on the right side.","pos":[2258,2365]},{"content":"Parameters","pos":[2482,2492]},{"content":"An object of type <bpt id=\"p1\">**</bpt>queue<ept id=\"p1\">**</ept>.","pos":[2507,2535],"source":" An object of type **queue**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>queue<ept id=\"p1\">**</ept>.","pos":[2554,2582],"source":" An object of type **queue**."},{"content":"Return Value","pos":[2592,2604]},{"pos":[2608,2758],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the queue on the left side of the operator is less than and not equal to the queue on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the queue on the left side of the operator is less than and not equal to the queue on the right side of the operator; otherwise **false**."},{"content":"Remarks","pos":[2768,2775]},{"content":"The comparison between queue objects is based on a pairwise comparison of their elements.","pos":[2779,2868]},{"content":"The less-than relationship between two queue objects is based on a comparison of the first pair of unequal elements.","pos":[2869,2985]},{"content":"Example","pos":[2995,3002]},{"pos":[3859,3867],"content":"operator"},{"content":"Tests if the queue object on the left side of the operator is less than or equal to the queue object on the right side.","pos":[3876,3995]},{"content":"Parameters","pos":[4113,4123]},{"content":"An object of type <bpt id=\"p1\">**</bpt>queue<ept id=\"p1\">**</ept>.","pos":[4138,4166],"source":" An object of type **queue**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>queue<ept id=\"p1\">**</ept>.","pos":[4185,4213],"source":" An object of type **queue**."},{"content":"Return Value","pos":[4223,4235]},{"pos":[4239,4381],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the queue on the left side of the operator is strictly less than the queue on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the queue on the left side of the operator is strictly less than the queue on the right side of the operator; otherwise **false**."},{"content":"Remarks","pos":[4391,4398]},{"content":"The comparison between queue objects is based on a pairwise comparison of their elements.","pos":[4402,4491]},{"content":"The less than or equal to relationship between two queue objects is based on a comparison of the first pair of unequal elements.","pos":[4492,4620]},{"content":"Example","pos":[4630,4637]},{"pos":[5544,5554],"content":"operator=="},{"content":"Tests if the queue object on the left side of the operator is equal to queue object on the right side.","pos":[5558,5660]},{"content":"Parameters","pos":[5778,5788]},{"content":"An object of type <bpt id=\"p1\">**</bpt>queue<ept id=\"p1\">**</ept>.","pos":[5803,5831],"source":" An object of type **queue**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>queue<ept id=\"p1\">**</ept>.","pos":[5850,5878],"source":" An object of type **queue**."},{"content":"Return Value","pos":[5888,5900]},{"pos":[5904,5972],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the queues are not equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if queues are equal.","source":"**true** if the queues are not equal; **false** if queues are equal."},{"content":"Remarks","pos":[5982,5989]},{"content":"The comparison between queue objects is based on a pairwise comparison of their elements.","pos":[5993,6082]},{"content":"Two queues are equal if they have the same number of elements and their respective elements have the same values.","pos":[6083,6196]},{"content":"Otherwise, they are unequal.","pos":[6197,6225]},{"content":"Example","pos":[6235,6242]},{"pos":[7233,7241],"content":"operator"},{"content":"Tests if the queue object on the left side of the operator is greater than the queue object on the right side.","pos":[7249,7359]},{"content":"Parameters","pos":[7476,7486]},{"content":"An object of type <bpt id=\"p1\">**</bpt>queue<ept id=\"p1\">**</ept>.","pos":[7501,7529],"source":" An object of type **queue**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>queue<ept id=\"p1\">**</ept>.","pos":[7548,7576],"source":" An object of type **queue**."},{"content":"Return Value","pos":[7586,7598]},{"pos":[7602,7744],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the queue on the left side of the operator is strictly less than the queue on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the queue on the left side of the operator is strictly less than the queue on the right side of the operator; otherwise **false**."},{"content":"Remarks","pos":[7754,7761]},{"content":"The comparison between queue objects is based on a pairwise comparison of their elements.","pos":[7765,7854]},{"content":"The greater-than relationship between two queue objects is based on a comparison of the first pair of unequal elements.","pos":[7855,7974]},{"content":"Example","pos":[7984,7991]},{"pos":[8899,8907],"content":"operator"},{"content":"Tests if the queue object on the left side of the operator is greater than or equal to the queue object on the right side.","pos":[8916,9038]},{"content":"Parameters","pos":[9156,9166]},{"content":"An object of type <bpt id=\"p1\">**</bpt>queue<ept id=\"p1\">**</ept>.","pos":[9181,9209],"source":" An object of type **queue**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>queue<ept id=\"p1\">**</ept>.","pos":[9228,9256],"source":" An object of type **queue**."},{"content":"Return Value","pos":[9266,9278]},{"pos":[9282,9424],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the queue on the left side of the operator is strictly less than the queue on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the queue on the left side of the operator is strictly less than the queue on the right side of the operator; otherwise **false**."},{"content":"Remarks","pos":[9434,9441]},{"content":"The comparison between queue objects is based on a pairwise comparison of their elements.","pos":[9445,9534]},{"content":"Two queues are equal if they have the same number of elements and their respective elements have the same values.","pos":[9535,9648]},{"content":"Otherwise, they are unequal.","pos":[9649,9677]},{"content":"Example","pos":[9687,9694]},{"content":"See Also","pos":[10567,10575]},{"content":"queue&gt;","pos":[10582,10588],"source":"queue>"}],"content":"---\ntitle: \"&lt;queue&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 7c435b48-175c-45b0-88eb-24561044019c\ncaps.latest.revision: 13\nmanager: \"ghogen\"\n---\n# &lt;queue&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator&gt;](#operator_gt_)|[operator&gt;=](#operator_gt__eq)|  \n|[operator&lt;](#operator_lt_)|[operator&lt;=](#operator_lt__eq)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests if the queue object on the left side of the operator is not equal to the queue object on the right side.  \n  \n```  \nbool operator!=(const queue <Type, Container>& left, const queue <Type, Container>& right,);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **queue**.  \n  \n ` right`  \n An object of type **queue**.  \n  \n### Return Value  \n **true** if the queues are not equal; **false** if queues are equal.  \n  \n### Remarks  \n The comparison between queue objects is based on a pairwise comparison of their elements. Two queues are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// queue_op_ne.cpp  \n// compile with: /EHsc  \n#include <queue>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // Declares queues with list base containers  \n   queue <int, list<int> > q1, q2, q3;  \n  \n   // The following line would have caused an error because vector   \n   // does not support pop_front( ) and so cannot be adapted  \n   // by queue as a base container  \n   // queue <int, vector<int> > q1, q2, q3;  \n  \n   q1.push( 1 );  \n   q2.push( 1 );  \n   q2.push( 2 );  \n   q3.push( 1 );  \n  \n   if ( q1 != q2 )  \n      cout << \"The queues q1 and q2 are not equal.\" << endl;  \n   else  \n      cout << \"The queues q1 and q2 are equal.\" << endl;  \n  \n   if ( q1 != q3 )  \n      cout << \"The queues q1 and q3 are not equal.\" << endl;  \n   else  \n      cout << \"The queues q1 and q3 are equal.\" << endl;  \n}  \n```  \n  \n```Output  \nThe queues q1 and q2 are not equal.  \nThe queues q1 and q3 are equal.  \n```  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Tests if the queue object on the left side of the operator is less than the queue object on the right side.  \n  \n```  \nbool operator<(const queue <Type, Container>& left, const queue <Type, Container>& right,);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **queue**.  \n  \n ` right`  \n An object of type **queue**.  \n  \n### Return Value  \n **true** if the queue on the left side of the operator is less than and not equal to the queue on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between queue objects is based on a pairwise comparison of their elements. The less-than relationship between two queue objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// queue_op_lt.cpp  \n// compile with: /EHsc  \n#include <queue>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // Declares queues with default deque base container  \n   queue <int> q1, q2, q3;  \n  \n   q1.push( 1 );  \n   q1.push( 2 );  \n   q2.push( 5 );  \n   q2.push( 10 );  \n   q3.push( 1 );  \n   q3.push( 2 );  \n  \n   if ( q1 < q2 )  \n      cout << \"The queue q1 is less than the queue q2.\" << endl;  \n   else  \n      cout << \"The queue q1 is not less than the queue q2.\" << endl;  \n  \n   if ( q1 < q3 )  \n      cout << \"The queue q1 is less than the queue q3.\" << endl;  \n   else  \n      cout << \"The queue q1 is not less than the queue q3.\" << endl;  \n}  \n```  \n  \n```Output  \nThe queue q1 is less than the queue q2.  \nThe queue q1 is not less than the queue q3.  \n```  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Tests if the queue object on the left side of the operator is less than or equal to the queue object on the right side.  \n  \n```  \nbool operator<=(const queue <Type, Container>& left, const queue <Type, Container>& right,);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **queue**.  \n  \n ` right`  \n An object of type **queue**.  \n  \n### Return Value  \n **true** if the queue on the left side of the operator is strictly less than the queue on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between queue objects is based on a pairwise comparison of their elements. The less than or equal to relationship between two queue objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// queue_op_le.cpp  \n// compile with: /EHsc  \n#include <queue>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   queue <int> q1, q2, q3;  \n  \n   q1.push( 5 );  \n   q1.push( 10 );  \n   q2.push( 1 );  \n   q2.push( 2 );  \n   q3.push( 5 );  \n   q3.push( 10 );  \n  \n   if ( q1 <= q2 )  \n      cout << \"The queue q1 is less than or equal to \"  \n           << \"the queue q2.\" << endl;  \n   else  \n      cout << \"The queue q1 is greater than \"  \n           << \"the queue q2.\" << endl;  \n  \n   if ( q1 <= q3 )  \n      cout << \"The queue q1 is less than or equal to \"  \n           << \"the queue q3.\" << endl;  \n   else  \n      cout << \"The queue q1 is greater than \"  \n           << \"the queue q3.\" << endl;  \n}  \n```  \n  \n```Output  \nThe queue q1 is greater than the queue q2.  \nThe queue q1 is less than or equal to the queue q3.  \n```  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests if the queue object on the left side of the operator is equal to queue object on the right side.  \n  \n```  \nbool operator==(const queue <Type, Container>& left, const queue <Type, Container>& right,);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **queue**.  \n  \n ` right`  \n An object of type **queue**.  \n  \n### Return Value  \n **true** if the queues are not equal; **false** if queues are equal.  \n  \n### Remarks  \n The comparison between queue objects is based on a pairwise comparison of their elements. Two queues are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// queue_op_eq.cpp  \n// compile with: /EHsc  \n#include <queue>  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   // Declares queues with list base containers  \n   queue <int, list<int> > q1, q2, q3;  \n  \n   // The following line would have caused an error because vector   \n   // does not support pop_front( ) and so cannot be adapted  \n   // by queue as a base container  \n   // queue <int, vector<int> > q1, q2, q3;  \n  \n   q1.push( 1 );  \n   q2.push( 2 );  \n   q3.push( 1 );  \n  \n   if ( q1 != q2 )  \n      cout << \"The queues q1 and q2 are not equal.\" << endl;  \n   else  \n      cout << \"The queues q1 and q2 are equal.\" << endl;  \n  \n   if ( q1 != q3 )  \n      cout << \"The queues q1 and q3 are not equal.\" << endl;  \n   else  \n      cout << \"The queues q1 and q3 are equal.\" << endl;  \n}  \n```  \n  \n```Output  \nThe queues q1 and q2 are not equal.  \nThe queues q1 and q3 are equal.  \n```  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Tests if the queue object on the left side of the operator is greater than the queue object on the right side.  \n  \n```  \nbool operator>(const queue <Type, Container>& left, const queue <Type, Container>& right,);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **queue**.  \n  \n ` right`  \n An object of type **queue**.  \n  \n### Return Value  \n **true** if the queue on the left side of the operator is strictly less than the queue on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between queue objects is based on a pairwise comparison of their elements. The greater-than relationship between two queue objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// queue_op_gt.cpp  \n// compile with: /EHsc  \n#include <queue>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   queue <int> q1, q2, q3;  \n  \n   q1.push( 1 );  \n   q1.push( 2 );  \n   q1.push( 3 );  \n   q2.push( 5 );  \n   q2.push( 10 );  \n   q3.push( 1 );  \n   q3.push( 2 );  \n  \n   if ( q1 > q2 )  \n      cout << \"The queue q1 is greater than \"  \n           << \"the queue q2.\" << endl;  \n   else  \n      cout << \"The queue q1 is not greater than \"  \n           << \"the queue q2.\" << endl;  \n  \n   if ( q1> q3 )  \n      cout << \"The queue q1 is greater than \"  \n           << \"the queue q3.\" << endl;  \n   else  \n      cout << \"The queue q1 is not greater than \"  \n           << \"the queue q3.\" << endl;  \n}  \n```  \n  \n```Output  \nThe queue q1 is not greater than the queue q2.  \nThe queue q1 is greater than the queue q3.  \n```  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Tests if the queue object on the left side of the operator is greater than or equal to the queue object on the right side.  \n  \n```  \nbool operator>=(const queue <Type, Container>& left, const queue <Type, Container>& right,);\n```  \n  \n### Parameters  \n ` left`  \n An object of type **queue**.  \n  \n ` right`  \n An object of type **queue**.  \n  \n### Return Value  \n **true** if the queue on the left side of the operator is strictly less than the queue on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between queue objects is based on a pairwise comparison of their elements. Two queues are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// queue_op_ge.cpp  \n// compile with: /EHsc  \n#include <queue>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   queue <int> q1, q2, q3;  \n  \n   q1.push( 1 );  \n   q1.push( 2 );  \n   q2.push( 5 );  \n   q2.push( 10 );  \n   q3.push( 1 );  \n   q3.push( 2 );  \n  \n   if ( q1 >= q2 )  \n      cout << \"The queue q1 is greater than or equal to \"  \n           << \"the queue q2.\" << endl;  \n   else  \n      cout << \"The queue q1 is less than \"  \n           << \"the queue q2.\" << endl;  \n  \n   if ( q1>= q3 )  \n      cout << \"The queue q1 is greater than or equal to \"  \n           << \"the queue q3.\" << endl;  \n   else  \n      cout << \"The queue q1 is less than \"  \n           << \"the queue q3.\" << endl;  \n}  \n```  \n  \n```Output  \nThe queue q1 is less than the queue q2.  \nThe queue q1 is greater than or equal to the queue q3.  \n```  \n  \n## See Also  \n [\\<queue>](../standard-library/queue.md)\n\n"}