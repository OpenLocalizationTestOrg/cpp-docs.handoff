{"nodes":[{"pos":[12,79],"content":"How to: Do DDX-DDV Data Binding with Windows Forms | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Do DDX-DDV Data Binding with Windows Forms | Microsoft Docs","pos":[0,67]}]},{"content":"How to: Do DDX/DDV Data Binding with Windows Forms","pos":[682,732]},{"content":"<bpt id=\"p1\">[</bpt>DDX_ManagedControl<ept id=\"p1\">](http://msdn.microsoft.com/Library/61b55a90-c993-478e-9dea-db27fbf0e193)</ept> calls <bpt id=\"p2\">[</bpt>CWinFormsControl::CreateManagedControl<ept id=\"p2\">](../mfc/reference/cwinformscontrol-class.md#cwinformscontrol__createmanagedcontrol)</ept> to create a control matching the resource control ID.","pos":[733,1009],"source":"[DDX_ManagedControl](http://msdn.microsoft.com/Library/61b55a90-c993-478e-9dea-db27fbf0e193) calls [CWinFormsControl::CreateManagedControl](../mfc/reference/cwinformscontrol-class.md#cwinformscontrol__createmanagedcontrol) to create a control matching the resource control ID."},{"content":"If you use <ph id=\"ph1\">`DDX_ManagedControl`</ph> for a <ph id=\"ph2\">`CWinFormsControl`</ph> control (in wizard-generated code), you should not call <ph id=\"ph3\">`CreateManagedControl`</ph> explicitly for the same control.","pos":[1010,1178],"source":" If you use `DDX_ManagedControl` for a `CWinFormsControl` control (in wizard-generated code), you should not call `CreateManagedControl` explicitly for the same control."},{"content":"Call <ph id=\"ph1\">`DDX_ManagedControl`</ph> in <bpt id=\"p1\">[</bpt>CWnd::DoDataExchange<ept id=\"p1\">](../mfc/reference/cwnd-class.md#cwnd__dodataexchange)</ept> to create controls from resource IDs.","pos":[1185,1327],"source":"Call `DDX_ManagedControl` in [CWnd::DoDataExchange](../mfc/reference/cwnd-class.md#cwnd__dodataexchange) to create controls from resource IDs."},{"content":"For data exchange, you do not need to use the DDX/DDV functions with Windows Forms controls.","pos":[1328,1420]},{"content":"Instead, you can place code to access the properties of the managed control in the <ph id=\"ph1\">`DoDataExchange`</ph> method of your dialog (or view) class, as in the following example.","pos":[1421,1588],"source":" Instead, you can place code to access the properties of the managed control in the `DoDataExchange` method of your dialog (or view) class, as in the following example."},{"content":"The following example shows how to bind a native C++ string to a .NET user control.","pos":[1595,1678]},{"content":"Example","pos":[1687,1694]},{"pos":[1698,1840],"content":"The following is an example of DDX/DDV data binding of an MFC string <ph id=\"ph1\">`m_str`</ph> with the user-defined <ph id=\"ph2\">`NameText`</ph> property of a .NET user control.","source":"The following is an example of DDX/DDV data binding of an MFC string `m_str` with the user-defined `NameText` property of a .NET user control."},{"pos":[1847,2097],"content":"The control is created when <bpt id=\"p1\">[</bpt>CDialog::OnInitDialog<ept id=\"p1\">](../mfc/reference/cdialog-class.md#cdialog__oninitdialog)</ept> calls <ph id=\"ph1\">`CMyDlg::DoDataExchange`</ph> for the first time, so any code that references <ph id=\"ph2\">`m_UserControl`</ph> must come after the <ph id=\"ph3\">`DDX_ManagedControl`</ph> call.","source":"The control is created when [CDialog::OnInitDialog](../mfc/reference/cdialog-class.md#cdialog__oninitdialog) calls `CMyDlg::DoDataExchange` for the first time, so any code that references `m_UserControl` must come after the `DDX_ManagedControl` call."},{"pos":[2104,2301],"content":"You can implement this code in the MFC01 application you created in <bpt id=\"p1\">[</bpt>How to: Create the User Control and Host in a Dialog Box<ept id=\"p1\">](../dotnet/how-to-create-the-user-control-and-host-in-a-dialog-box.md)</ept>.","source":"You can implement this code in the MFC01 application you created in [How to: Create the User Control and Host in a Dialog Box](../dotnet/how-to-create-the-user-control-and-host-in-a-dialog-box.md)."},{"content":"Put the following code in the declaration of CMFC01Dlg:","pos":[2308,2363]},{"content":"Example","pos":[2529,2536]},{"content":"Put the following code in the implementation of CMFC01Dlg:","pos":[2540,2598]},{"content":"Example","pos":[2949,2956]},{"content":"Now we will add the handler method for a click on the OK button.","pos":[2960,3024]},{"content":"Click the <bpt id=\"p1\">**</bpt>Resource View<ept id=\"p1\">**</ept> tab.","pos":[3025,3057],"source":" Click the **Resource View** tab."},{"content":"In Resource View, double-click on <ph id=\"ph1\">`IDD_MFC01_DIALOG`</ph>.","pos":[3058,3111],"source":" In Resource View, double-click on `IDD_MFC01_DIALOG`."},{"content":"The dialog resource appears in Resource Editor.","pos":[3112,3159]},{"content":"Then double click the OK button..","pos":[3160,3193]},{"content":"Define the handler as follows.","pos":[3200,3230]},{"content":"Example","pos":[3380,3387]},{"content":"And add the following line to the implementation of BOOL CMFC01Dlg::OnInitDialog().","pos":[3391,3474]},{"content":"You can now build and run the application.","pos":[3550,3592]},{"content":"Notice that any text in the text box will be displayed in a pop-up message box when the application closes.","pos":[3593,3700]},{"content":"See Also","pos":[3709,3717]},{"content":"CWinFormsControl Class","pos":[3722,3744]},{"content":"DDX_ManagedControl","pos":[3795,3813]},{"content":"CWnd::DoDataExchange","pos":[3892,3912]}],"content":"---\ntitle: \"How to: Do DDX-DDV Data Binding with Windows Forms | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"get-started-article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"MFC [C++], hosting a Windows Forms Control\"\n  - \"Windows Forms [C++], MFC support\"\nms.assetid: b2957370-cf1f-4779-94ac-228cd393686c\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Do DDX/DDV Data Binding with Windows Forms\n[DDX_ManagedControl](http://msdn.microsoft.com/Library/61b55a90-c993-478e-9dea-db27fbf0e193) calls [CWinFormsControl::CreateManagedControl](../mfc/reference/cwinformscontrol-class.md#cwinformscontrol__createmanagedcontrol) to create a control matching the resource control ID. If you use `DDX_ManagedControl` for a `CWinFormsControl` control (in wizard-generated code), you should not call `CreateManagedControl` explicitly for the same control.  \n  \n Call `DDX_ManagedControl` in [CWnd::DoDataExchange](../mfc/reference/cwnd-class.md#cwnd__dodataexchange) to create controls from resource IDs. For data exchange, you do not need to use the DDX/DDV functions with Windows Forms controls. Instead, you can place code to access the properties of the managed control in the `DoDataExchange` method of your dialog (or view) class, as in the following example.  \n  \n The following example shows how to bind a native C++ string to a .NET user control.  \n  \n## Example  \n The following is an example of DDX/DDV data binding of an MFC string `m_str` with the user-defined `NameText` property of a .NET user control.  \n  \n The control is created when [CDialog::OnInitDialog](../mfc/reference/cdialog-class.md#cdialog__oninitdialog) calls `CMyDlg::DoDataExchange` for the first time, so any code that references `m_UserControl` must come after the `DDX_ManagedControl` call.  \n  \n You can implement this code in the MFC01 application you created in [How to: Create the User Control and Host in a Dialog Box](../dotnet/how-to-create-the-user-control-and-host-in-a-dialog-box.md).  \n  \n Put the following code in the declaration of CMFC01Dlg:  \n  \n```  \nclass CMFC01Dlg : public CDialog  \n{  \n   CWinFormsControl<WindowsFormsControlLibrary1::UserControl1> m_MyControl;  \n   CString m_str;  \n};  \n```  \n  \n## Example  \n Put the following code in the implementation of CMFC01Dlg:  \n  \n```  \nvoid CMFC01Dlg::DoDataExchange(CDataExchange* pDX)  \n{  \n   CDialog::DoDataExchange(pDX);  \n   DDX_ManagedControl(pDX, IDC_CTRL1, m_MyControl);  \n  \n   if (pDX->m_bSaveAndValidate) {  \n      m_str = m_MyControl->textBox1->Text;  \n   } else  \n   {  \n      m_MyControl->textBox1->Text = gcnew System::String(m_str);  \n   }  \n}  \n```  \n  \n## Example  \n Now we will add the handler method for a click on the OK button. Click the **Resource View** tab. In Resource View, double-click on `IDD_MFC01_DIALOG`. The dialog resource appears in Resource Editor. Then double click the OK button..  \n  \n Define the handler as follows.  \n  \n```  \nvoid CMFC01Dlg::OnBnClickedOk()  \n{  \n   AfxMessageBox(CString(m_MyControl.GetControl()->textBox1->Text));  \n   OnOK();  \n}  \n```  \n  \n## Example  \n And add the following line to the implementation of BOOL CMFC01Dlg::OnInitDialog().  \n  \n```  \nm_MyControl.GetControl()->textBox1->Text = \"hello\";  \n```  \n  \n You can now build and run the application. Notice that any text in the text box will be displayed in a pop-up message box when the application closes.  \n  \n## See Also  \n [CWinFormsControl Class](../mfc/reference/cwinformscontrol-class.md)   \n [DDX_ManagedControl](http://msdn.microsoft.com/Library/61b55a90-c993-478e-9dea-db27fbf0e193)   \n [CWnd::DoDataExchange](../mfc/reference/cwnd-class.md#cwnd__dodataexchange)"}