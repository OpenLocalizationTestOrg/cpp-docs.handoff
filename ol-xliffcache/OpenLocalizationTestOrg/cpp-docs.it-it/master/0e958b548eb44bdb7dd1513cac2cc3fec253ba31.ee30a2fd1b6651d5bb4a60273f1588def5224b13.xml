{"nodes":[{"pos":[12,53],"content":"vector::insert (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vector::insert (STL-CLR) | Microsoft Docs","pos":[0,41]}]},{"content":"vector::insert (STL/CLR)","pos":[631,655]},{"content":"Adds elements at a specified position.","pos":[656,694]},{"content":"Syntax","pos":[703,709]},{"content":"Parameters","pos":[1028,1038]},{"content":"count","pos":[1042,1047]},{"content":"Number of elements to insert.","pos":[1051,1080]},{"content":"first","pos":[1087,1092]},{"content":"Beginning of range to insert.","pos":[1096,1125]},{"content":"last","pos":[1132,1136]},{"content":"End of range to insert.","pos":[1140,1163]},{"content":"right","pos":[1170,1175]},{"content":"Enumeration to insert.","pos":[1179,1201]},{"content":"val","pos":[1208,1211]},{"content":"Value of the element to insert.","pos":[1215,1246]},{"content":"where","pos":[1253,1258]},{"content":"Where in container to insert before.","pos":[1262,1298]},{"content":"Remarks","pos":[1307,1314]},{"pos":[1318,1472],"content":"Each of the member functions inserts, before the element pointed to by <ph id=\"ph1\">`where`</ph> in the controlled sequence, a sequence specified by the remaining operands.","source":"Each of the member functions inserts, before the element pointed to by `where` in the controlled sequence, a sequence specified by the remaining operands."},{"content":"The first member function inserts an element with value <ph id=\"ph1\">`val`</ph> and returns an iterator that designates the newly inserted element.","pos":[1479,1608],"source":"The first member function inserts an element with value `val` and returns an iterator that designates the newly inserted element."},{"content":"You use it to insert a single element before a place designated by an iterator.","pos":[1609,1688]},{"content":"The second member function inserts a repetition of <ph id=\"ph1\">`count`</ph> elements of value <ph id=\"ph2\">`val`</ph>.","pos":[1695,1778],"source":"The second member function inserts a repetition of `count` elements of value `val`."},{"content":"You use it to insert zero or more contiguous elements which are all copies of the same value.","pos":[1779,1872]},{"content":"If <ph id=\"ph1\">`InIt`</ph> is an integer type, the third member function behaves the same as <ph id=\"ph2\">`insert(``where``, (size_type)``first``, (value_type)``last``)`</ph>.","pos":[1879,2019],"source":"If `InIt` is an integer type, the third member function behaves the same as `insert(``where``, (size_type)``first``, (value_type)``last``)`."},{"content":"Otherwise, it inserts the sequence <ph id=\"ph1\">`[``first``,`</ph> <ph id=\"ph2\">`last``)`</ph>.","pos":[2020,2079],"source":" Otherwise, it inserts the sequence `[``first``,` `last``)`."},{"content":"You use it to insert zero or more contiguous elements copied from another sequence.","pos":[2080,2163]},{"content":"The fourth member function inserts the sequence designated by the <ph id=\"ph1\">`right`</ph>.","pos":[2170,2244],"source":"The fourth member function inserts the sequence designated by the `right`."},{"content":"You use it to insert a sequence described by an enumerator.","pos":[2245,2304]},{"content":"When inserting a single element, the number of element copies is linear in the number of elements between the insertion point and the nearer end of the sequence.","pos":[2311,2472]},{"content":"(When inserting one or more elements at either end of the sequence, no element copies occur.) If <ph id=\"ph1\">`InIt`</ph> is an input iterator, the third member function effectively performs a single insertion for each element in the sequence.","pos":[2473,2698],"source":" (When inserting one or more elements at either end of the sequence, no element copies occur.) If `InIt` is an input iterator, the third member function effectively performs a single insertion for each element in the sequence."},{"content":"Otherwise, when inserting <ph id=\"ph1\">`N`</ph> elements, the number of element copies is linear in <ph id=\"ph2\">`N`</ph> plus the number of elements between the insertion point and the nearer end of the sequence.","pos":[2699,2876],"source":" Otherwise, when inserting `N` elements, the number of element copies is linear in `N` plus the number of elements between the insertion point and the nearer end of the sequence."},{"content":"Example","pos":[2885,2892]},{"content":"Requirements","pos":[4524,4536]},{"pos":[4540,4568],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/vector&gt;","source":"**Header:** \\<cliext/vector>"},{"pos":[4575,4596],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[4605,4613]},{"content":"vector (STL/CLR)","pos":[4618,4634]},{"content":"vector::assign (STL/CLR)","pos":[4670,4694]}],"content":"---\ntitle: \"vector::insert (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::vector::insert\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"insert member [STL/CLR]\"\nms.assetid: f240cabf-f9d1-40c1-9cfb-975a90955546\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vector::insert (STL/CLR)\nAdds elements at a specified position.  \n  \n## Syntax  \n  \n```  \niterator insert(iterator where, value_type val);  \nvoid insert(iterator where, size_type count, value_type val);  \ntemplate<typename InIt>  \n    void insert(iterator where, InIt first, InIt last);  \nvoid insert(iterator where,  \n    System::Collections::Generic::IEnumerable<Value>^ right);  \n```  \n  \n#### Parameters  \n count  \n Number of elements to insert.  \n  \n first  \n Beginning of range to insert.  \n  \n last  \n End of range to insert.  \n  \n right  \n Enumeration to insert.  \n  \n val  \n Value of the element to insert.  \n  \n where  \n Where in container to insert before.  \n  \n## Remarks  \n Each of the member functions inserts, before the element pointed to by `where` in the controlled sequence, a sequence specified by the remaining operands.  \n  \n The first member function inserts an element with value `val` and returns an iterator that designates the newly inserted element. You use it to insert a single element before a place designated by an iterator.  \n  \n The second member function inserts a repetition of `count` elements of value `val`. You use it to insert zero or more contiguous elements which are all copies of the same value.  \n  \n If `InIt` is an integer type, the third member function behaves the same as `insert(``where``, (size_type)``first``, (value_type)``last``)`. Otherwise, it inserts the sequence `[``first``,` `last``)`. You use it to insert zero or more contiguous elements copied from another sequence.  \n  \n The fourth member function inserts the sequence designated by the `right`. You use it to insert a sequence described by an enumerator.  \n  \n When inserting a single element, the number of element copies is linear in the number of elements between the insertion point and the nearer end of the sequence. (When inserting one or more elements at either end of the sequence, no element copies occur.) If `InIt` is an input iterator, the third member function effectively performs a single insertion for each element in the sequence. Otherwise, when inserting `N` elements, the number of element copies is linear in `N` plus the number of elements between the insertion point and the nearer end of the sequence.  \n  \n## Example  \n  \n```  \n// cliext_vector_insert.cpp   \n// compile with: /clr   \n#include <cliext/vector>   \n  \nint main()   \n    {   \n    cliext::vector<wchar_t> c1;   \n    c1.push_back(L'a');   \n    c1.push_back(L'b');   \n    c1.push_back(L'c');   \n  \n// display initial contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// insert a single value using iterator   \n    cliext::vector<wchar_t>::iterator it = c1.begin();   \n    System::Console::WriteLine(\"insert(begin()+1, L'x') = {0}\",   \n        *c1.insert(++it, L'x'));   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// insert a repetition of values   \n    cliext::vector<wchar_t> c2;   \n    c2.insert(c2.begin(), 2, L'y');   \n    for each (wchar_t elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// insert an iterator range   \n    it = c1.end();   \n    c2.insert(c2.end(), c1.begin(), --it);   \n    for each (wchar_t elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// insert an enumeration   \n    c2.insert(c2.begin(),   // NOTE: cast is not needed   \n        (System::Collections::Generic::IEnumerable<wchar_t>^)%c1);   \n    for each (wchar_t elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \ninsert(begin()+1, L'x') = x  \n a x b c  \n y y  \n y y a x b  \n a x b c y y a x b  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/vector>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [vector (STL/CLR)](../dotnet/vector-stl-clr.md)   \n [vector::assign (STL/CLR)](../dotnet/vector-assign-stl-clr.md)"}