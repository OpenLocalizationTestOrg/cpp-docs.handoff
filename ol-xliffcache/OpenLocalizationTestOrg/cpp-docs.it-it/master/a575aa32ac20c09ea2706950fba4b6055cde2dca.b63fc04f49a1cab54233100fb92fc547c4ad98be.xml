{"nodes":[{"pos":[12,44],"content":"CComboBox Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComboBox Class | Microsoft Docs","pos":[0,32]}]},{"pos":[638,653],"content":"CComboBox Class","linkify":"CComboBox Class","nodes":[{"content":"CComboBox Class","pos":[0,15]}]},{"content":"Provides the functionality of a Windows combo box.","pos":[654,704]},{"pos":[713,719],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[775,782],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[792,811],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[818,822]},{"content":"Description","pos":[823,834]},{"pos":[872,917],"content":"<bpt id=\"p1\">[</bpt>CComboBox::CComboBox<ept id=\"p1\">](#ccombobox__ccombobox)</ept>","source":"[CComboBox::CComboBox](#ccombobox__ccombobox)"},{"pos":[918,950],"content":"Constructs a <ph id=\"ph1\">`CComboBox`</ph> object.","source":"Constructs a `CComboBox` object."},{"pos":[961,975],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[982,986]},{"content":"Description","pos":[987,998]},{"pos":[1036,1081],"content":"<bpt id=\"p1\">[</bpt>CComboBox::AddString<ept id=\"p1\">](#ccombobox__addstring)</ept>","source":"[CComboBox::AddString](#ccombobox__addstring)"},{"pos":[1082,1220],"content":"Adds a string to the end of the list in the list box of a combo box, or at the sorted position for list boxes with the <bpt id=\"p1\">**</bpt>CBS_SORT<ept id=\"p1\">**</ept> style.","source":"Adds a string to the end of the list in the list box of a combo box, or at the sorted position for list boxes with the **CBS_SORT** style."},{"pos":[1225,1262],"content":"<bpt id=\"p1\">[</bpt>CComboBox::Clear<ept id=\"p1\">](#ccombobox__clear)</ept>","source":"[CComboBox::Clear](#ccombobox__clear)"},{"content":"Deletes (clears) the current selection, if any, in the edit control.","pos":[1263,1331]},{"pos":[1336,1385],"content":"<bpt id=\"p1\">[</bpt>CComboBox::CompareItem<ept id=\"p1\">](#ccombobox__compareitem)</ept>","source":"[CComboBox::CompareItem](#ccombobox__compareitem)"},{"content":"Called by the framework to determine the relative position of a new list item in a sorted owner-drawn combo box.","pos":[1386,1498]},{"pos":[1503,1538],"content":"<bpt id=\"p1\">[</bpt>CComboBox::Copy<ept id=\"p1\">](#ccombobox__copy)</ept>","source":"[CComboBox::Copy](#ccombobox__copy)"},{"pos":[1539,1618],"content":"Copies the current selection, if any, onto the Clipboard in <bpt id=\"p1\">**</bpt>CF_TEXT<ept id=\"p1\">**</ept> format.","source":"Copies the current selection, if any, onto the Clipboard in **CF_TEXT** format."},{"pos":[1623,1662],"content":"<bpt id=\"p1\">[</bpt>CComboBox::Create<ept id=\"p1\">](#ccombobox__create)</ept>","source":"[CComboBox::Create](#ccombobox__create)"},{"pos":[1663,1727],"content":"Creates the combo box and attaches it to the <ph id=\"ph1\">`CComboBox`</ph> object.","source":"Creates the combo box and attaches it to the `CComboBox` object."},{"pos":[1732,1765],"content":"<bpt id=\"p1\">[</bpt>CComboBox::Cut<ept id=\"p1\">](#ccombobox__cut)</ept>","source":"[CComboBox::Cut](#ccombobox__cut)"},{"pos":[1766,1901],"content":"Deletes (cuts) the current selection, if any, in the edit control and copies the deleted text onto the Clipboard in <bpt id=\"p1\">**</bpt>CF_TEXT<ept id=\"p1\">**</ept> format.","source":"Deletes (cuts) the current selection, if any, in the edit control and copies the deleted text onto the Clipboard in **CF_TEXT** format."},{"pos":[1906,1953],"content":"<bpt id=\"p1\">[</bpt>CComboBox::DeleteItem<ept id=\"p1\">](#ccombobox__deleteitem)</ept>","source":"[CComboBox::DeleteItem](#ccombobox__deleteitem)"},{"content":"Called by the framework when a list item is deleted from an owner-drawn combo box.","pos":[1954,2036]},{"pos":[2041,2092],"content":"<bpt id=\"p1\">[</bpt>CComboBox::DeleteString<ept id=\"p1\">](#ccombobox__deletestring)</ept>","source":"[CComboBox::DeleteString](#ccombobox__deletestring)"},{"content":"Deletes a string from the list box of a combo box.","pos":[2093,2143]},{"pos":[2148,2181],"content":"<bpt id=\"p1\">[</bpt>CComboBox::Dir<ept id=\"p1\">](#ccombobox__dir)</ept>","source":"[CComboBox::Dir](#ccombobox__dir)"},{"content":"Adds a list of file names to the list box of a combo box.","pos":[2182,2239]},{"pos":[2244,2287],"content":"<bpt id=\"p1\">[</bpt>CComboBox::DrawItem<ept id=\"p1\">](#ccombobox__drawitem)</ept>","source":"[CComboBox::DrawItem](#ccombobox__drawitem)"},{"content":"Called by the framework when a visual aspect of an owner-drawn combo box changes.","pos":[2288,2369]},{"pos":[2374,2421],"content":"<bpt id=\"p1\">[</bpt>CComboBox::FindString<ept id=\"p1\">](#ccombobox__findstring)</ept>","source":"[CComboBox::FindString](#ccombobox__findstring)"},{"content":"Finds the first string that contains the specified prefix in the list box of a combo box.","pos":[2422,2511]},{"pos":[2516,2573],"content":"<bpt id=\"p1\">[</bpt>CComboBox::FindStringExact<ept id=\"p1\">](#ccombobox__findstringexact)</ept>","source":"[CComboBox::FindStringExact](#ccombobox__findstringexact)"},{"content":"Finds the first list-box string (in a combo box) that matches the specified string.","pos":[2574,2657]},{"pos":[2662,2719],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetComboBoxInfo<ept id=\"p1\">](#ccombobox__getcomboboxinfo)</ept>","source":"[CComboBox::GetComboBoxInfo](#ccombobox__getcomboboxinfo)"},{"pos":[2720,2771],"content":"Retrieves information about the <ph id=\"ph1\">`CComboBox`</ph> object.","source":"Retrieves information about the `CComboBox` object."},{"pos":[2776,2819],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetCount<ept id=\"p1\">](#ccombobox__getcount)</ept>","source":"[CComboBox::GetCount](#ccombobox__getcount)"},{"content":"Retrieves the number of items in the list box of a combo box.","pos":[2820,2881]},{"pos":[2886,2937],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetCueBanner<ept id=\"p1\">](#ccombobox__getcuebanner)</ept>","source":"[CComboBox::GetCueBanner](#ccombobox__getcuebanner)"},{"content":"Gets the cue text that is displayed for a combo box control.","pos":[2938,2998]},{"pos":[3003,3048],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetCurSel<ept id=\"p1\">](#ccombobox__getcursel)</ept>","source":"[CComboBox::GetCurSel](#ccombobox__getcursel)"},{"content":"Retrieves the index of the currently selected item, if any, in the list box of a combo box.","pos":[3049,3140]},{"pos":[3145,3214],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetDroppedControlRect<ept id=\"p1\">](#ccombobox__getdroppedcontrolrect)</ept>","source":"[CComboBox::GetDroppedControlRect](#ccombobox__getdroppedcontrolrect)"},{"content":"Retrieves the screen coordinates of the visible (dropped down) list box of a drop-down combo box.","pos":[3215,3312]},{"pos":[3317,3374],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetDroppedState<ept id=\"p1\">](#ccombobox__getdroppedstate)</ept>","source":"[CComboBox::GetDroppedState](#ccombobox__getdroppedstate)"},{"content":"Determines whether the list box of a drop-down combo box is visible (dropped down).","pos":[3375,3458]},{"pos":[3463,3520],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetDroppedWidth<ept id=\"p1\">](#ccombobox__getdroppedwidth)</ept>","source":"[CComboBox::GetDroppedWidth](#ccombobox__getdroppedwidth)"},{"content":"Retrieves the minimum allowed width for the drop-down list-box portion of a combo box.","pos":[3521,3607]},{"pos":[3612,3659],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetEditSel<ept id=\"p1\">](#ccombobox__geteditsel)</ept>","source":"[CComboBox::GetEditSel](#ccombobox__geteditsel)"},{"content":"Gets the starting and ending character positions of the current selection in the edit control of a combo box.","pos":[3660,3769]},{"pos":[3774,3827],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetExtendedUI<ept id=\"p1\">](#ccombobox__getextendedui)</ept>","source":"[CComboBox::GetExtendedUI](#ccombobox__getextendedui)"},{"content":"Determines whether a combo box has the default user interface or the extended user interface.","pos":[3828,3921]},{"pos":[3926,3991],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetHorizontalExtent<ept id=\"p1\">](#ccombobox__gethorizontalextent)</ept>","source":"[CComboBox::GetHorizontalExtent](#ccombobox__gethorizontalextent)"},{"content":"Returns the width in pixels that the list-box portion of the combo box can be scrolled horizontally.","pos":[3992,4092]},{"pos":[4097,4146],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetItemData<ept id=\"p1\">](#ccombobox__getitemdata)</ept>","source":"[CComboBox::GetItemData](#ccombobox__getitemdata)"},{"content":"Retrieves the application-supplied 32-bit value associated with the specified combo-box item.","pos":[4147,4240]},{"pos":[4245,4300],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetItemDataPtr<ept id=\"p1\">](#ccombobox__getitemdataptr)</ept>","source":"[CComboBox::GetItemDataPtr](#ccombobox__getitemdataptr)"},{"content":"Retrieves the application-supplied 32-bit pointer that is associated with the specified combo-box item.","pos":[4301,4404]},{"pos":[4409,4462],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetItemHeight<ept id=\"p1\">](#ccombobox__getitemheight)</ept>","source":"[CComboBox::GetItemHeight](#ccombobox__getitemheight)"},{"content":"Retrieves the height of list items in a combo box.","pos":[4463,4513]},{"pos":[4518,4563],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetLBText<ept id=\"p1\">](#ccombobox__getlbtext)</ept>","source":"[CComboBox::GetLBText](#ccombobox__getlbtext)"},{"content":"Gets a string from the list box of a combo box.","pos":[4564,4611]},{"pos":[4616,4667],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetLBTextLen<ept id=\"p1\">](#ccombobox__getlbtextlen)</ept>","source":"[CComboBox::GetLBTextLen](#ccombobox__getlbtextlen)"},{"content":"Gets the length of a string in the list box of a combo box.","pos":[4668,4727]},{"pos":[4732,4777],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetLocale<ept id=\"p1\">](#ccombobox__getlocale)</ept>","source":"[CComboBox::GetLocale](#ccombobox__getlocale)"},{"content":"Retrieves the locale identifier for a combo box.","pos":[4778,4826]},{"pos":[4831,4884],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetMinVisible<ept id=\"p1\">](#ccombobox__getminvisible)</ept>","source":"[CComboBox::GetMinVisible](#ccombobox__getminvisible)"},{"content":"Gets the minimum number of visible items in the drop-down list of the current combo box.","pos":[4885,4973]},{"pos":[4978,5027],"content":"<bpt id=\"p1\">[</bpt>CComboBox::GetTopIndex<ept id=\"p1\">](#ccombobox__gettopindex)</ept>","source":"[CComboBox::GetTopIndex](#ccombobox__gettopindex)"},{"content":"Returns the index of the first visible item in the list-box portion of the combo box.","pos":[5028,5113]},{"pos":[5118,5167],"content":"<bpt id=\"p1\">[</bpt>CComboBox::InitStorage<ept id=\"p1\">](#ccombobox__initstorage)</ept>","source":"[CComboBox::InitStorage](#ccombobox__initstorage)"},{"content":"Preallocates blocks of memory for items and strings in the list-box portion of the combo box.","pos":[5168,5261]},{"pos":[5266,5317],"content":"<bpt id=\"p1\">[</bpt>CComboBox::InsertString<ept id=\"p1\">](#ccombobox__insertstring)</ept>","source":"[CComboBox::InsertString](#ccombobox__insertstring)"},{"content":"Inserts a string into the list box of a combo box.","pos":[5318,5368]},{"pos":[5373,5418],"content":"<bpt id=\"p1\">[</bpt>CComboBox::LimitText<ept id=\"p1\">](#ccombobox__limittext)</ept>","source":"[CComboBox::LimitText](#ccombobox__limittext)"},{"content":"Limits the length of the text that the user can enter into the edit control of a combo box.","pos":[5419,5510]},{"pos":[5515,5564],"content":"<bpt id=\"p1\">[</bpt>CComboBox::MeasureItem<ept id=\"p1\">](#ccombobox__measureitem)</ept>","source":"[CComboBox::MeasureItem](#ccombobox__measureitem)"},{"content":"Called by the framework to determine combo box dimensions when an owner-drawn combo box is created.","pos":[5565,5664]},{"pos":[5669,5706],"content":"<bpt id=\"p1\">[</bpt>CComboBox::Paste<ept id=\"p1\">](#ccombobox__paste)</ept>","source":"[CComboBox::Paste](#ccombobox__paste)"},{"content":"Inserts the data from the Clipboard into the edit control at the current cursor position.","pos":[5707,5796]},{"content":"Data is inserted only if the Clipboard contains data in <bpt id=\"p1\">**</bpt>CF_TEXT<ept id=\"p1\">**</ept> format.","pos":[5797,5872],"source":" Data is inserted only if the Clipboard contains data in **CF_TEXT** format."},{"pos":[5877,5928],"content":"<bpt id=\"p1\">[</bpt>CComboBox::ResetContent<ept id=\"p1\">](#ccombobox__resetcontent)</ept>","source":"[CComboBox::ResetContent](#ccombobox__resetcontent)"},{"content":"Removes all items from the list box and edit control of a combo box.","pos":[5929,5997]},{"pos":[6002,6053],"content":"<bpt id=\"p1\">[</bpt>CComboBox::SelectString<ept id=\"p1\">](#ccombobox__selectstring)</ept>","source":"[CComboBox::SelectString](#ccombobox__selectstring)"},{"content":"Searches for a string in the list box of a combo box and, if the string is found, selects the string in the list box and copies the string to the edit control.","pos":[6054,6213]},{"pos":[6218,6269],"content":"<bpt id=\"p1\">[</bpt>CComboBox::SetCueBanner<ept id=\"p1\">](#ccombobox__setcuebanner)</ept>","source":"[CComboBox::SetCueBanner](#ccombobox__setcuebanner)"},{"content":"Sets the cue text that is displayed for a combo box control.","pos":[6270,6330]},{"pos":[6335,6380],"content":"<bpt id=\"p1\">[</bpt>CComboBox::SetCurSel<ept id=\"p1\">](#ccombobox__setcursel)</ept>","source":"[CComboBox::SetCurSel](#ccombobox__setcursel)"},{"content":"Selects a string in the list box of a combo box.","pos":[6381,6429]},{"pos":[6434,6491],"content":"<bpt id=\"p1\">[</bpt>CComboBox::SetDroppedWidth<ept id=\"p1\">](#ccombobox__setdroppedwidth)</ept>","source":"[CComboBox::SetDroppedWidth](#ccombobox__setdroppedwidth)"},{"content":"Sets the minimum allowed width for the drop-down list-box portion of a combo box.","pos":[6492,6573]},{"pos":[6578,6625],"content":"<bpt id=\"p1\">[</bpt>CComboBox::SetEditSel<ept id=\"p1\">](#ccombobox__seteditsel)</ept>","source":"[CComboBox::SetEditSel](#ccombobox__seteditsel)"},{"content":"Selects characters in the edit control of a combo box.","pos":[6626,6680]},{"pos":[6685,6738],"content":"<bpt id=\"p1\">[</bpt>CComboBox::SetExtendedUI<ept id=\"p1\">](#ccombobox__setextendedui)</ept>","source":"[CComboBox::SetExtendedUI](#ccombobox__setextendedui)"},{"pos":[6739,6888],"content":"Selects either the default user interface or the extended user interface for a combo box that has the <bpt id=\"p1\">**</bpt>CBS_DROPDOWN<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>CBS_DROPDOWNLIST<ept id=\"p2\">**</ept> style.","source":"Selects either the default user interface or the extended user interface for a combo box that has the **CBS_DROPDOWN** or **CBS_DROPDOWNLIST** style."},{"pos":[6893,6958],"content":"<bpt id=\"p1\">[</bpt>CComboBox::SetHorizontalExtent<ept id=\"p1\">](#ccombobox__sethorizontalextent)</ept>","source":"[CComboBox::SetHorizontalExtent](#ccombobox__sethorizontalextent)"},{"content":"Sets the width in pixels that the list-box portion of the combo box can be scrolled horizontally.","pos":[6959,7056]},{"pos":[7061,7110],"content":"<bpt id=\"p1\">[</bpt>CComboBox::SetItemData<ept id=\"p1\">](#ccombobox__setitemdata)</ept>","source":"[CComboBox::SetItemData](#ccombobox__setitemdata)"},{"content":"Sets the 32-bit value associated with the specified item in a combo box.","pos":[7111,7183]},{"pos":[7188,7243],"content":"<bpt id=\"p1\">[</bpt>CComboBox::SetItemDataPtr<ept id=\"p1\">](#ccombobox__setitemdataptr)</ept>","source":"[CComboBox::SetItemDataPtr](#ccombobox__setitemdataptr)"},{"content":"Sets the 32-bit pointer associated with the specified item in a combo box.","pos":[7244,7318]},{"pos":[7323,7376],"content":"<bpt id=\"p1\">[</bpt>CComboBox::SetItemHeight<ept id=\"p1\">](#ccombobox__setitemheight)</ept>","source":"[CComboBox::SetItemHeight](#ccombobox__setitemheight)"},{"content":"Sets the height of list items in a combo box or the height of the edit-control (or static-text) portion of a combo box.","pos":[7377,7496]},{"pos":[7501,7546],"content":"<bpt id=\"p1\">[</bpt>CComboBox::SetLocale<ept id=\"p1\">](#ccombobox__setlocale)</ept>","source":"[CComboBox::SetLocale](#ccombobox__setlocale)"},{"content":"Sets the locale identifier for a combo box.","pos":[7547,7590]},{"pos":[7595,7658],"content":"<bpt id=\"p1\">[</bpt>CComboBox::SetMinVisibleItems<ept id=\"p1\">](#ccombobox__setminvisibleitems)</ept>","source":"[CComboBox::SetMinVisibleItems](#ccombobox__setminvisibleitems)"},{"content":"Sets the minimum number of visible items in the drop-down list of the current combo box.","pos":[7659,7747]},{"pos":[7752,7801],"content":"<bpt id=\"p1\">[</bpt>CComboBox::SetTopIndex<ept id=\"p1\">](#ccombobox__settopindex)</ept>","source":"[CComboBox::SetTopIndex](#ccombobox__settopindex)"},{"content":"Tells the list-box portion of the combo box to display the item with the specified index at the top.","pos":[7802,7902]},{"pos":[7907,7958],"content":"<bpt id=\"p1\">[</bpt>CComboBox::ShowDropDown<ept id=\"p1\">](#ccombobox__showdropdown)</ept>","source":"[CComboBox::ShowDropDown](#ccombobox__showdropdown)"},{"pos":[7959,8062],"content":"Shows or hides the list box of a combo box that has the <bpt id=\"p1\">**</bpt>CBS_DROPDOWN<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>CBS_DROPDOWNLIST<ept id=\"p2\">**</ept> style.","source":"Shows or hides the list box of a combo box that has the **CBS_DROPDOWN** or **CBS_DROPDOWNLIST** style."},{"pos":[8072,8079],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A combo box consists of a list box combined with either a static control or edit control.","pos":[8083,8172]},{"content":"The list-box portion of the control may be displayed at all times or may only drop down when the user selects the drop-down arrow next to the control.","pos":[8173,8323]},{"content":"The currently selected item (if any) in the list box is displayed in the static or edit control.","pos":[8330,8426]},{"content":"In addition, if the combo box has the drop-down list style, the user can type the initial character of one of the items in the list, and the list box, if visible, will highlight the next item with that initial character.","pos":[8427,8647]},{"pos":[8654,8753],"content":"The following table compares the three combo-box <bpt id=\"p1\">[</bpt>styles<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept>.","source":"The following table compares the three combo-box [styles](../../mfc/reference/combo-box-styles.md)."},{"content":"Style","pos":[8760,8765]},{"content":"When is list box visible","pos":[8766,8790]},{"content":"Static or edit control","pos":[8791,8813]},{"content":"Simple","pos":[8896,8902]},{"content":"Always","pos":[8903,8909]},{"content":"Edit","pos":[8910,8914]},{"content":"Drop-down","pos":[8919,8928]},{"content":"When dropped down","pos":[8929,8946]},{"content":"Edit","pos":[8947,8951]},{"content":"Drop-down list","pos":[8956,8970]},{"content":"When dropped down","pos":[8971,8988]},{"content":"Static","pos":[8989,8995]},{"content":"You can create a <ph id=\"ph1\">`CComboBox`</ph> object from either a dialog template or directly in your code.","pos":[9003,9094],"source":"You can create a `CComboBox` object from either a dialog template or directly in your code."},{"content":"In both cases, first call the constructor <ph id=\"ph1\">`CComboBox`</ph> to construct the <ph id=\"ph2\">`CComboBox`</ph> object; then call the <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#ccombobox__create)</ept> member function to create the control and attach it to the <ph id=\"ph3\">`CComboBox`</ph> object.","pos":[9095,9307],"source":" In both cases, first call the constructor `CComboBox` to construct the `CComboBox` object; then call the [Create](#ccombobox__create) member function to create the control and attach it to the `CComboBox` object."},{"pos":[9314,9539],"content":"If you want to handle Windows notification messages sent by a combo box to its parent (usually a class derived from <ph id=\"ph1\">`CDialog`</ph>), add a message-map entry and message-handler member function to the parent class for each message.","source":"If you want to handle Windows notification messages sent by a combo box to its parent (usually a class derived from `CDialog`), add a message-map entry and message-handler member function to the parent class for each message."},{"content":"Each message-map entry takes the following form:","pos":[9546,9594]},{"pos":[9601,9651],"content":"<bpt id=\"p1\">**</bpt>ON_<ept id=\"p1\">**</ept>Notification <bpt id=\"p2\">**</bpt>(<ept id=\"p2\">**</ept><ph id=\"ph1\">`id`</ph><bpt id=\"p3\">**</bpt>,<ept id=\"p3\">**</ept><ph id=\"ph2\">`memberFxn`</ph><bpt id=\"p4\">**</bpt>)<ept id=\"p4\">**</ept>","source":"**ON_**Notification **(**`id`**,**`memberFxn`**)**"},{"pos":[9658,9851],"content":"where <ph id=\"ph1\">`id`</ph> specifies the child-window ID of the combo-box control sending the notification and <ph id=\"ph2\">`memberFxn`</ph> is the name of the parent member function you have written to handle the notification.","source":"where `id` specifies the child-window ID of the combo-box control sending the notification and `memberFxn` is the name of the parent member function you have written to handle the notification."},{"content":"The parent's function prototype is as follows:","pos":[9858,9904]},{"pos":[9911,9950],"content":"<bpt id=\"p1\">**</bpt>afx_msg<ept id=\"p1\">**</ept> <ph id=\"ph1\">`void`</ph> <ph id=\"ph2\">`memberFxn`</ph> <bpt id=\"p2\">**</bpt>( );<ept id=\"p2\">**</ept>","source":"**afx_msg** `void` `memberFxn` **( );**"},{"content":"The order in which certain notifications will be sent cannot be predicted.","pos":[9957,10031]},{"content":"In particular, a <bpt id=\"p1\">**</bpt>CBN_SELCHANGE<ept id=\"p1\">**</ept> notification may occur either before or after a <bpt id=\"p2\">**</bpt>CBN_CLOSEUP<ept id=\"p2\">**</ept> notification.","pos":[10032,10144],"source":" In particular, a **CBN_SELCHANGE** notification may occur either before or after a **CBN_CLOSEUP** notification."},{"content":"Potential message-map entries are the following:","pos":[10151,10199]},{"content":"<bpt id=\"p1\">**</bpt>ON_CBN_CLOSEUP<ept id=\"p1\">**</ept> (Windows 3.1 and later.) The list box of a combo box has closed.","pos":[10207,10290],"source":"**ON_CBN_CLOSEUP** (Windows 3.1 and later.) The list box of a combo box has closed."},{"content":"This notification message is not sent for a combo box that has the <bpt id=\"p1\">[</bpt>CBS_SIMPLE<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> style.","pos":[10291,10418],"source":" This notification message is not sent for a combo box that has the [CBS_SIMPLE](../../mfc/reference/combo-box-styles.md) style."},{"content":"<bpt id=\"p1\">**</bpt>ON_CBN_DBLCLK<ept id=\"p1\">**</ept> The user double-clicks a string in the list box of a combo box.","pos":[10426,10507],"source":"**ON_CBN_DBLCLK** The user double-clicks a string in the list box of a combo box."},{"content":"This notification message is only sent for a combo box with the <bpt id=\"p1\">**</bpt>CBS_SIMPLE<ept id=\"p1\">**</ept> style.","pos":[10508,10593],"source":" This notification message is only sent for a combo box with the **CBS_SIMPLE** style."},{"content":"For a combo box with the <bpt id=\"p1\">[</bpt>CBS_DROPDOWN<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> or <bpt id=\"p2\">[</bpt>CBS_DROPDOWNLIST<ept id=\"p2\">](../../mfc/reference/combo-box-styles.md)</ept> style, a double-click cannot occur because a single click hides the list box.","pos":[10594,10815],"source":" For a combo box with the [CBS_DROPDOWN](../../mfc/reference/combo-box-styles.md) or [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style, a double-click cannot occur because a single click hides the list box."},{"content":"<bpt id=\"p1\">**</bpt>ON_CBN_DROPDOWN<ept id=\"p1\">**</ept> The list box of a combo box is about to drop down (be made visible).","pos":[10823,10911],"source":"**ON_CBN_DROPDOWN** The list box of a combo box is about to drop down (be made visible)."},{"content":"This notification message can occur only for a combo box with the <bpt id=\"p1\">**</bpt>CBS_DROPDOWN<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>CBS_DROPDOWNLIST<ept id=\"p2\">**</ept> style.","pos":[10912,11025],"source":" This notification message can occur only for a combo box with the **CBS_DROPDOWN** or **CBS_DROPDOWNLIST** style."},{"content":"<bpt id=\"p1\">**</bpt>ON_CBN_EDITCHANGE<ept id=\"p1\">**</ept> The user has taken an action that may have altered the text in the edit-control portion of a combo box.","pos":[11033,11158],"source":"**ON_CBN_EDITCHANGE** The user has taken an action that may have altered the text in the edit-control portion of a combo box."},{"content":"Unlike the <bpt id=\"p1\">**</bpt>CBN_EDITUPDATE<ept id=\"p1\">**</ept> message, this message is sent after Windows updates the screen.","pos":[11159,11252],"source":" Unlike the **CBN_EDITUPDATE** message, this message is sent after Windows updates the screen."},{"content":"It is not sent if the combo box has the <bpt id=\"p1\">**</bpt>CBS_DROPDOWNLIST<ept id=\"p1\">**</ept> style.","pos":[11253,11320],"source":" It is not sent if the combo box has the **CBS_DROPDOWNLIST** style."},{"content":"<bpt id=\"p1\">**</bpt>ON_CBN_EDITUPDATE<ept id=\"p1\">**</ept> The edit-control portion of a combo box is about to display altered text.","pos":[11328,11423],"source":"**ON_CBN_EDITUPDATE** The edit-control portion of a combo box is about to display altered text."},{"content":"This notification message is sent after the control has formatted the text but before it displays the text.","pos":[11424,11531]},{"content":"It is not sent if the combo box has the <bpt id=\"p1\">**</bpt>CBS_DROPDOWNLIST<ept id=\"p1\">**</ept> style.","pos":[11532,11599],"source":" It is not sent if the combo box has the **CBS_DROPDOWNLIST** style."},{"pos":[11607,11698],"content":"<bpt id=\"p1\">**</bpt>ON_CBN_ERRSPACE<ept id=\"p1\">**</ept> The combo box cannot allocate enough memory to meet a specific request.","source":"**ON_CBN_ERRSPACE** The combo box cannot allocate enough memory to meet a specific request."},{"content":"<bpt id=\"p1\">**</bpt>ON_CBN_SELENDCANCEL<ept id=\"p1\">**</ept> (Windows 3.1 and later.) Indicates the user's selection should be canceled.","pos":[11706,11805],"source":"**ON_CBN_SELENDCANCEL** (Windows 3.1 and later.) Indicates the user's selection should be canceled."},{"content":"The user clicks an item and then clicks another window or control to hide the list box of a combo box.","pos":[11806,11908]},{"content":"This notification message is sent before the <bpt id=\"p1\">**</bpt>CBN_CLOSEUP<ept id=\"p1\">**</ept> notification message to indicate that the user's selection should be ignored.","pos":[11909,12047],"source":" This notification message is sent before the **CBN_CLOSEUP** notification message to indicate that the user's selection should be ignored."},{"content":"The <bpt id=\"p1\">**</bpt>CBN_SELENDCANCEL<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>CBN_SELENDOK<ept id=\"p2\">**</ept> notification message is sent even if the <bpt id=\"p3\">**</bpt>CBN_CLOSEUP<ept id=\"p3\">**</ept> notification message is not sent (as in the case of a combo box with the <bpt id=\"p4\">**</bpt>CBS_SIMPLE<ept id=\"p4\">**</ept> style).","pos":[12048,12245],"source":" The **CBN_SELENDCANCEL** or **CBN_SELENDOK** notification message is sent even if the **CBN_CLOSEUP** notification message is not sent (as in the case of a combo box with the **CBS_SIMPLE** style)."},{"content":"<bpt id=\"p1\">**</bpt>ON_CBN_SELENDOK<ept id=\"p1\">**</ept> The user selects an item and then either presses the ENTER key or clicks the DOWN ARROW key to hide the list box of a combo box.","pos":[12253,12401],"source":"**ON_CBN_SELENDOK** The user selects an item and then either presses the ENTER key or clicks the DOWN ARROW key to hide the list box of a combo box."},{"content":"This notification message is sent before the <bpt id=\"p1\">**</bpt>CBN_CLOSEUP<ept id=\"p1\">**</ept> message to indicate that the user's selection should be considered valid.","pos":[12402,12536],"source":" This notification message is sent before the **CBN_CLOSEUP** message to indicate that the user's selection should be considered valid."},{"content":"The <bpt id=\"p1\">**</bpt>CBN_SELENDCANCEL<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>CBN_SELENDOK<ept id=\"p2\">**</ept> notification message is sent even if the <bpt id=\"p3\">**</bpt>CBN_CLOSEUP<ept id=\"p3\">**</ept> notification message is not sent (as in the case of a combo box with the <bpt id=\"p4\">**</bpt>CBS_SIMPLE<ept id=\"p4\">**</ept> style).","pos":[12537,12734],"source":" The **CBN_SELENDCANCEL** or **CBN_SELENDOK** notification message is sent even if the **CBN_CLOSEUP** notification message is not sent (as in the case of a combo box with the **CBS_SIMPLE** style)."},{"pos":[12742,12803],"content":"<bpt id=\"p1\">**</bpt>ON_CBN_KILLFOCUS<ept id=\"p1\">**</ept> The combo box is losing the input focus.","source":"**ON_CBN_KILLFOCUS** The combo box is losing the input focus."},{"content":"<bpt id=\"p1\">**</bpt>ON_CBN_SELCHANGE<ept id=\"p1\">**</ept> The selection in the list box of a combo box is about to be changed as a result of the user either clicking in the list box or changing the selection by using the arrow keys.","pos":[12811,13006],"source":"**ON_CBN_SELCHANGE** The selection in the list box of a combo box is about to be changed as a result of the user either clicking in the list box or changing the selection by using the arrow keys."},{"content":"When processing this message, the text in the edit control of the combo box can only be retrieved via <ph id=\"ph1\">`GetLBText`</ph> or another similar function.","pos":[13007,13149],"source":" When processing this message, the text in the edit control of the combo box can only be retrieved via `GetLBText` or another similar function."},{"content":"<ph id=\"ph1\">`GetWindowText`</ph> cannot be used.","pos":[13150,13181],"source":"`GetWindowText` cannot be used."},{"pos":[13189,13248],"content":"<bpt id=\"p1\">**</bpt>ON_CBN_SETFOCUS<ept id=\"p1\">**</ept> The combo box receives the input focus.","source":"**ON_CBN_SETFOCUS** The combo box receives the input focus."},{"pos":[13255,13425],"content":"If you create a <ph id=\"ph1\">`CComboBox`</ph> object within a dialog box (through a dialog resource), the <ph id=\"ph2\">`CComboBox`</ph> object is automatically destroyed when the user closes the dialog box.","source":"If you create a `CComboBox` object within a dialog box (through a dialog resource), the `CComboBox` object is automatically destroyed when the user closes the dialog box."},{"content":"If you embed a <ph id=\"ph1\">`CComboBox`</ph> object within another window object, you do not need to destroy it.","pos":[13432,13526],"source":"If you embed a `CComboBox` object within another window object, you do not need to destroy it."},{"content":"If you create the <ph id=\"ph1\">`CComboBox`</ph> object on the stack, it is destroyed automatically.","pos":[13527,13608],"source":" If you create the `CComboBox` object on the stack, it is destroyed automatically."},{"content":"If you create the <ph id=\"ph1\">`CComboBox`</ph> object on the heap by using the <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> function, you must call <bpt id=\"p2\">**</bpt>delete<ept id=\"p2\">**</ept> on the object to destroy it when the Windows combo box is destroyed.","pos":[13609,13782],"source":" If you create the `CComboBox` object on the heap by using the **new** function, you must call **delete** on the object to destroy it when the Windows combo box is destroyed."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> If you want to handle <ph id=\"ph1\">`WM_KEYDOWN`</ph> and <ph id=\"ph2\">`WM_CHAR`</ph> messages, you have to subclass the combo box's edit and list box controls, derive classes from <ph id=\"ph3\">`CEdit`</ph> and <ph id=\"ph4\">`CListBox`</ph>, and add handlers for those messages to the derived classes.","pos":[13789,14025],"source":"**Note** If you want to handle `WM_KEYDOWN` and `WM_CHAR` messages, you have to subclass the combo box's edit and list box controls, derive classes from `CEdit` and `CListBox`, and add handlers for those messages to the derived classes."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>http://support.microsoft.com/default.aspxscid=kb;en-us;Q174667<ept id=\"p1\">](http://support.microsoft.com/default.aspxscid=kb;en-us;q174667)</ept> and <bpt id=\"p2\">[</bpt>CWnd::SubclassWindow<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__subclasswindow)</ept>.","pos":[14026,14264],"source":" For more information, see [http://support.microsoft.com/default.aspxscid=kb;en-us;Q174667](http://support.microsoft.com/default.aspxscid=kb;en-us;q174667) and [CWnd::SubclassWindow](../../mfc/reference/cwnd-class.md#cwnd__subclasswindow)."},{"pos":[14273,14294],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[14298,14345],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[14352,14405],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[14412,14453],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[14480,14492],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[14496,14516],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[14526,14583],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__addstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::AddString","linkify":"<a name=\"ccombobox__addstring\"></a>  CComboBox::AddString","source":"<a name=\"ccombobox__addstring\"></a>  CComboBox::AddString"},{"content":"Adds a string to the list box of a combo box.","pos":[14587,14632]},{"pos":[14692,14702],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the null-terminated string that is to be added.","pos":[14722,14779]},{"pos":[14789,14801],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the return value is greater than or equal to 0, it is the zero-based index to the string in the list box.","pos":[14805,14913]},{"content":"The return value is <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if an error occurs; the return value is <bpt id=\"p2\">**</bpt>CB_ERRSPACE<ept id=\"p2\">**</ept> if insufficient space is available to store the new string.","pos":[14914,15060],"source":" The return value is **CB_ERR** if an error occurs; the return value is **CB_ERRSPACE** if insufficient space is available to store the new string."},{"pos":[15070,15077],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the list box was not created with the <bpt id=\"p1\">[</bpt>CBS_SORT<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> style, the string is added to the end of the list.","pos":[15081,15224],"source":"If the list box was not created with the [CBS_SORT](../../mfc/reference/combo-box-styles.md) style, the string is added to the end of the list."},{"content":"Otherwise, the string is inserted into the list, and the list is sorted.","pos":[15225,15297]},{"pos":[15305,15569],"content":"[!NOTE]\n This function is not supported by the Windows **ComboBoxEx** control. For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].","leadings":["","> "],"nodes":[{"content":" This function is not supported by the Windows **ComboBoxEx** control. For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].","pos":[8,262],"nodes":[{"content":"This function is not supported by the Windows <bpt id=\"p1\">**</bpt>ComboBoxEx<ept id=\"p1\">**</ept> control.","pos":[1,70],"source":" This function is not supported by the Windows **ComboBoxEx** control."},{"content":"For more information on this control, see <bpt id=\"p1\">[</bpt>ComboBoxEx Controls<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775738)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[71,254],"source":" For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."}]}]},{"pos":[15576,15702],"content":"To insert a string into a specific location within the list, use the <bpt id=\"p1\">[</bpt>InsertString<ept id=\"p1\">](#ccombobox__insertstring)</ept> member function.","source":"To insert a string into a specific location within the list, use the [InsertString](#ccombobox__insertstring) member function."},{"pos":[15712,15719],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15723,15814],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#3<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#3](../../mfc/reference/codesnippet/cpp/ccombobox-class_1.cpp)]"},{"pos":[15824,15881],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__ccombobox\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::CComboBox","linkify":"<a name=\"ccombobox__ccombobox\"></a>  CComboBox::CComboBox","source":"<a name=\"ccombobox__ccombobox\"></a>  CComboBox::CComboBox"},{"pos":[15885,15917],"content":"Constructs a <ph id=\"ph1\">`CComboBox`</ph> object.","source":"Constructs a `CComboBox` object."},{"pos":[15955,15962],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15966,16057],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#1](../../mfc/reference/codesnippet/cpp/ccombobox-class_2.cpp)]"},{"pos":[16067,16116],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__clear\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::Clear","linkify":"<a name=\"ccombobox__clear\"></a>  CComboBox::Clear","source":"<a name=\"ccombobox__clear\"></a>  CComboBox::Clear"},{"content":"Deletes (clears) the current selection, if any, in the edit control of the combo box.","pos":[16120,16205]},{"pos":[16244,16251],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16255,16385],"content":"To delete the current selection and place the deleted contents onto the Clipboard, use the <bpt id=\"p1\">[</bpt>Cut<ept id=\"p1\">](#ccombobox__cut)</ept> member function.","source":"To delete the current selection and place the deleted contents onto the Clipboard, use the [Cut](#ccombobox__cut) member function."},{"pos":[16395,16402],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16406,16497],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#4<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#4](../../mfc/reference/codesnippet/cpp/ccombobox-class_3.cpp)]"},{"pos":[16507,16568],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__compareitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::CompareItem","linkify":"<a name=\"ccombobox__compareitem\"></a>  CComboBox::CompareItem","source":"<a name=\"ccombobox__compareitem\"></a>  CComboBox::CompareItem"},{"content":"Called by the framework to determine the relative position of a new item in the list-box portion of a sorted owner-draw combo box.","pos":[16572,16702]},{"pos":[16793,16803],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A long pointer to a <bpt id=\"p1\">[</bpt>COMPAREITEMSTRUCT<ept id=\"p1\">](../../mfc/reference/compareitemstruct-structure.md)</ept> structure.","pos":[16832,16934],"source":" A long pointer to a [COMPAREITEMSTRUCT](../../mfc/reference/compareitemstruct-structure.md) structure."},{"pos":[16944,16956],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Indicates the relative position of the two items described in the <ph id=\"ph1\">`COMPAREITEMSTRUCT`</ph> structure.","pos":[16960,17056],"source":"Indicates the relative position of the two items described in the `COMPAREITEMSTRUCT` structure."},{"content":"It can be any of the following values:","pos":[17057,17095]},{"content":"Value","pos":[17102,17107]},{"content":"Meaning","pos":[17108,17115]},{"content":"– 1","pos":[17150,17153]},{"content":"Item 1 sorts before item 2.","pos":[17154,17181]},{"content":"0","pos":[17186,17187]},{"content":"Item 1 and item 2 sort the same.","pos":[17188,17220]},{"content":"1","pos":[17225,17226]},{"content":"Item 1 sorts after item 2.","pos":[17227,17253]},{"pos":[17261,17383],"content":"See <bpt id=\"p1\">[</bpt>CWnd::OnCompareItem<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__oncompareitem)</ept> for a description of <ph id=\"ph1\">`COMPAREITEMSTRUCT`</ph>.","source":"See [CWnd::OnCompareItem](../../mfc/reference/cwnd-class.md#cwnd__oncompareitem) for a description of `COMPAREITEMSTRUCT`."},{"pos":[17393,17400],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, this member function does nothing.","pos":[17404,17450]},{"content":"If you create an owner-draw combo box with the <bpt id=\"p1\">**</bpt>LBS_SORT<ept id=\"p1\">**</ept> style, you must override this member function to assist the framework in sorting new items added to the list box.","pos":[17451,17624],"source":" If you create an owner-draw combo box with the **LBS_SORT** style, you must override this member function to assist the framework in sorting new items added to the list box."},{"pos":[17634,17641],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17645,17736],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#5<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#5](../../mfc/reference/codesnippet/cpp/ccombobox-class_4.cpp)]"},{"pos":[17746,17793],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__copy\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::Copy","linkify":"<a name=\"ccombobox__copy\"></a>  CComboBox::Copy","source":"<a name=\"ccombobox__copy\"></a>  CComboBox::Copy"},{"pos":[17797,17913],"content":"Copies the current selection, if any, in the edit control of the combo box onto the Clipboard in <bpt id=\"p1\">**</bpt>CF_TEXT<ept id=\"p1\">**</ept> format.","source":"Copies the current selection, if any, in the edit control of the combo box onto the Clipboard in **CF_TEXT** format."},{"pos":[17951,17958],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17962,18053],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#6<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#6](../../mfc/reference/codesnippet/cpp/ccombobox-class_5.cpp)]"},{"pos":[18063,18114],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::Create","linkify":"<a name=\"ccombobox__create\"></a>  CComboBox::Create","source":"<a name=\"ccombobox__create\"></a>  CComboBox::Create"},{"pos":[18118,18182],"content":"Creates the combo box and attaches it to the <ph id=\"ph1\">`CComboBox`</ph> object.","source":"Creates the combo box and attaches it to the `CComboBox` object."},{"pos":[18312,18322],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the style of the combo box.","pos":[18339,18376]},{"content":"Apply any combination of <bpt id=\"p1\">[</bpt>combo-box styles<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> to the box.","pos":[18377,18473],"source":" Apply any combination of [combo-box styles](../../mfc/reference/combo-box-styles.md) to the box."},{"content":"Points to the position and size of the combo box.","pos":[18490,18539]},{"content":"Can be a <bpt id=\"p1\">[</bpt>RECT structure<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> or a <ph id=\"ph1\">`CRect`</ph> object.","pos":[18540,18626],"source":" Can be a [RECT structure](../../mfc/reference/rect-structure1.md) or a `CRect` object."},{"content":"Specifies the combo box's parent window (usually a <ph id=\"ph1\">`CDialog`</ph>).","pos":[18649,18711],"source":" Specifies the combo box's parent window (usually a `CDialog`)."},{"content":"It must not be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[18712,18736],"source":" It must not be **NULL**."},{"content":"Specifies the combo box's control ID.","pos":[18752,18789]},{"pos":[18799,18811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[18815,18850]},{"pos":[18860,18867],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You construct a <ph id=\"ph1\">`CComboBox`</ph> object in two steps.","pos":[18871,18919],"source":"You construct a `CComboBox` object in two steps."},{"content":"First, call the constructor and then call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, which creates the Windows combo box and attaches it to the <ph id=\"ph1\">`CComboBox`</ph> object.","pos":[18920,19052],"source":" First, call the constructor and then call **Create**, which creates the Windows combo box and attaches it to the `CComboBox` object."},{"pos":[19059,19410],"content":"When <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> executes, Windows sends the <bpt id=\"p2\">[</bpt>WM_NCCREATE<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id=\"p3\">[</bpt>WM_CREATE<ept id=\"p3\">](../../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept>, <bpt id=\"p4\">[</bpt>WM_NCCALCSIZE<ept id=\"p4\">](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize)</ept>, and <bpt id=\"p5\">[</bpt>WM_GETMINMAXINFO<ept id=\"p5\">](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo)</ept> messages to the combo box.","source":"When **Create** executes, Windows sends the [WM_NCCREATE](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [WM_CREATE](../../mfc/reference/cwnd-class.md#cwnd__oncreate), [WM_NCCALCSIZE](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), and [WM_GETMINMAXINFO](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) messages to the combo box."},{"content":"These messages are handled by default by the <bpt id=\"p1\">[</bpt>OnNcCreate<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id=\"p2\">[</bpt>OnCreate<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept>, <bpt id=\"p3\">[</bpt>OnNcCalcSize<ept id=\"p3\">](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize)</ept>, and <bpt id=\"p4\">[</bpt>OnGetMinMaxInfo<ept id=\"p4\">](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo)</ept> member functions in the <ph id=\"ph1\">`CWnd`</ph> base class.","pos":[19417,19781],"source":"These messages are handled by default by the [OnNcCreate](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [OnCreate](../../mfc/reference/cwnd-class.md#cwnd__oncreate), [OnNcCalcSize](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), and [OnGetMinMaxInfo](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) member functions in the `CWnd` base class."},{"content":"To extend the default message handling, derive a class from <ph id=\"ph1\">`CComboBox`</ph>, add a message map to the new class, and override the preceding message-handler member functions.","pos":[19782,19951],"source":" To extend the default message handling, derive a class from `CComboBox`, add a message map to the new class, and override the preceding message-handler member functions."},{"content":"Override <ph id=\"ph1\">`OnCreate`</ph>, for example, to perform needed initialization for a new class.","pos":[19952,20035],"source":" Override `OnCreate`, for example, to perform needed initialization for a new class."},{"content":"Apply the following <bpt id=\"p1\">[</bpt>window styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept> to a combo-box control.","pos":[20042,20139],"source":"Apply the following [window styles](../../mfc/reference/window-styles.md) to a combo-box control."},{"content":":","pos":[20140,20141]},{"pos":[20149,20168],"content":"<bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> Always","source":"**WS_CHILD** Always"},{"pos":[20176,20198],"content":"<bpt id=\"p1\">**</bpt>WS_VISIBLE<ept id=\"p1\">**</ept> Usually","source":"**WS_VISIBLE** Usually"},{"pos":[20206,20228],"content":"<bpt id=\"p1\">**</bpt>WS_DISABLED<ept id=\"p1\">**</ept> Rarely","source":"**WS_DISABLED** Rarely"},{"pos":[20236,20310],"content":"<bpt id=\"p1\">**</bpt>WS_VSCROLL<ept id=\"p1\">**</ept> To add vertical scrolling for the list box in the combo box","source":"**WS_VSCROLL** To add vertical scrolling for the list box in the combo box"},{"pos":[20318,20394],"content":"<bpt id=\"p1\">**</bpt>WS_HSCROLL<ept id=\"p1\">**</ept> To add horizontal scrolling for the list box in the combo box","source":"**WS_HSCROLL** To add horizontal scrolling for the list box in the combo box"},{"pos":[20402,20432],"content":"<bpt id=\"p1\">**</bpt>WS_GROUP<ept id=\"p1\">**</ept> To group controls","source":"**WS_GROUP** To group controls"},{"pos":[20440,20500],"content":"<bpt id=\"p1\">**</bpt>WS_TABSTOP<ept id=\"p1\">**</ept> To include the combo box in the tabbing order","source":"**WS_TABSTOP** To include the combo box in the tabbing order"},{"pos":[20510,20517],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20521,20612],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#2<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#2](../../mfc/reference/codesnippet/cpp/ccombobox-class_6.cpp)]"},{"pos":[20622,20667],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__cut\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::Cut","linkify":"<a name=\"ccombobox__cut\"></a>  CComboBox::Cut","source":"<a name=\"ccombobox__cut\"></a>  CComboBox::Cut"},{"pos":[20671,20816],"content":"Deletes (cuts) the current selection, if any, in the combo-box edit control and copies the deleted text onto the Clipboard in <bpt id=\"p1\">**</bpt>CF_TEXT<ept id=\"p1\">**</ept> format.","source":"Deletes (cuts) the current selection, if any, in the combo-box edit control and copies the deleted text onto the Clipboard in **CF_TEXT** format."},{"pos":[20853,20860],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20864,21001],"content":"To delete the current selection without placing the deleted text onto the Clipboard, call the <bpt id=\"p1\">[</bpt>Clear<ept id=\"p1\">](#ccombobox__clear)</ept> member function.","source":"To delete the current selection without placing the deleted text onto the Clipboard, call the [Clear](#ccombobox__clear) member function."},{"pos":[21011,21018],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21022,21113],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#7<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#7](../../mfc/reference/codesnippet/cpp/ccombobox-class_7.cpp)]"},{"pos":[21123,21182],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__deleteitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::DeleteItem","linkify":"<a name=\"ccombobox__deleteitem\"></a>  CComboBox::DeleteItem","source":"<a name=\"ccombobox__deleteitem\"></a>  CComboBox::DeleteItem"},{"pos":[21186,21304],"content":"Called by the framework when the user deletes an item from an owner-draw <ph id=\"ph1\">`CComboBox`</ph> object or destroys the combo box.","source":"Called by the framework when the user deletes an item from an owner-draw `CComboBox` object or destroys the combo box."},{"pos":[21393,21403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A long pointer to a Windows <bpt id=\"p1\">[</bpt>DELETEITEMSTRUCT<ept id=\"p1\">](../../mfc/reference/deleteitemstruct-structure.md)</ept> structure that contains information about the deleted item.","pos":[21431,21588],"source":" A long pointer to a Windows [DELETEITEMSTRUCT](../../mfc/reference/deleteitemstruct-structure.md) structure that contains information about the deleted item."},{"content":"See <bpt id=\"p1\">[</bpt>CWnd::OnDeleteItem<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__ondeleteitem)</ept> for a description of this structure.","pos":[21589,21704],"source":" See [CWnd::OnDeleteItem](../../mfc/reference/cwnd-class.md#cwnd__ondeleteitem) for a description of this structure."},{"pos":[21714,21721],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation of this function does nothing.","pos":[21725,21782]},{"content":"Override this function to redraw the combo box as needed.","pos":[21783,21840]},{"pos":[21850,21857],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21861,21952],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#8<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#8](../../mfc/reference/codesnippet/cpp/ccombobox-class_8.cpp)]"},{"pos":[21962,22025],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__deletestring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::DeleteString","linkify":"<a name=\"ccombobox__deletestring\"></a>  CComboBox::DeleteString","source":"<a name=\"ccombobox__deletestring\"></a>  CComboBox::DeleteString"},{"pos":[22029,22086],"content":"Deletes the item in position <ph id=\"ph1\">`nIndex`</ph> from the combo box.","source":"Deletes the item in position `nIndex` from the combo box."},{"pos":[22142,22152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the index to the string that is to be deleted.","pos":[22168,22224]},{"pos":[22234,22246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the return value is greater than or equal to 0, then it is a count of the strings remaining in the list.","pos":[22250,22357]},{"content":"The return value is <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`nIndex`</ph> specifies an index greater than the number of items in the list.","pos":[22358,22465],"source":" The return value is **CB_ERR** if `nIndex` specifies an index greater than the number of items in the list."},{"pos":[22475,22482],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"All items following <ph id=\"ph1\">`nIndex`</ph> now move down one position.","pos":[22486,22542],"source":"All items following `nIndex` now move down one position."},{"content":"For example, if a combo box contains two items, deleting the first item will cause the remaining item to now be in the first position.","pos":[22543,22677]},{"content":"<ph id=\"ph1\">`nIndex`</ph>=0 for the item in the first position.","pos":[22678,22724],"source":"`nIndex`=0 for the item in the first position."},{"pos":[22734,22741],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22745,22836],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#9<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#9](../../mfc/reference/codesnippet/cpp/ccombobox-class_9.cpp)]"},{"pos":[22846,22891],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__dir\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::Dir","linkify":"<a name=\"ccombobox__dir\"></a>  CComboBox::Dir","source":"<a name=\"ccombobox__dir\"></a>  CComboBox::Dir"},{"content":"Adds a list of filenames or drives to the list box of a combo box.","pos":[22895,22961]},{"pos":[23039,23049],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Can be any combination of the <ph id=\"ph1\">`enum`</ph> values described in <bpt id=\"p1\">[</bpt>CFile::GetStatus<ept id=\"p1\">](../../mfc/reference/cfile-class.md#cfile__getstatus)</ept> or any combination of the following values:","pos":[23063,23235],"source":" Can be any combination of the `enum` values described in [CFile::GetStatus](../../mfc/reference/cfile-class.md#cfile__getstatus) or any combination of the following values:"},{"pos":[23243,23297],"content":"<bpt id=\"p1\">**</bpt>DDL_READWRITE<ept id=\"p1\">**</ept> File can be read from or written to.","source":"**DDL_READWRITE** File can be read from or written to."},{"pos":[23305,23363],"content":"<bpt id=\"p1\">**</bpt>DDL_READONLY<ept id=\"p1\">**</ept> File can be read from but not written to.","source":"**DDL_READONLY** File can be read from but not written to."},{"pos":[23371,23444],"content":"<bpt id=\"p1\">**</bpt>DDL_HIDDEN<ept id=\"p1\">**</ept> File is hidden and does not appear in a directory listing.","source":"**DDL_HIDDEN** File is hidden and does not appear in a directory listing."},{"pos":[23452,23489],"content":"<bpt id=\"p1\">**</bpt>DDL_SYSTEM<ept id=\"p1\">**</ept> File is a system file.","source":"**DDL_SYSTEM** File is a system file."},{"pos":[23497,23574],"content":"<bpt id=\"p1\">**</bpt>DDL_DIRECTORY<ept id=\"p1\">**</ept> The name specified by <ph id=\"ph1\">`lpszWildCard`</ph> specifies a directory.","source":"**DDL_DIRECTORY** The name specified by `lpszWildCard` specifies a directory."},{"pos":[23582,23621],"content":"<bpt id=\"p1\">**</bpt>DDL_ARCHIVE<ept id=\"p1\">**</ept> File has been archived.","source":"**DDL_ARCHIVE** File has been archived."},{"pos":[23629,23711],"content":"<bpt id=\"p1\">**</bpt>DDL_DRIVES<ept id=\"p1\">**</ept> Include all drives that match the name specified by <ph id=\"ph1\">`lpszWildCard`</ph>.","source":"**DDL_DRIVES** Include all drives that match the name specified by `lpszWildCard`."},{"content":"<bpt id=\"p1\">**</bpt>DDL_EXCLUSIVE<ept id=\"p1\">**</ept> Exclusive flag.","pos":[23719,23752],"source":"**DDL_EXCLUSIVE** Exclusive flag."},{"content":"If the exclusive flag is set, only files of the specified type are listed.","pos":[23753,23827]},{"content":"Otherwise, files of the specified type are listed in addition to \"normal\" files.","pos":[23828,23908]},{"pos":[23915,24025],"content":"`lpszWildCard`  \nPoints to a file-specification string. The string can contain wildcards (for example, *.\\*).","leadings":[""," "],"nodes":[{"content":"Points to a file-specification string. The string can contain wildcards (for example, *.\\*).","pos":[17,109],"nodes":[{"content":"Points to a file-specification string.","pos":[0,38]},{"content":"The string can contain wildcards (for example, *.<ph id=\"ph1\">\\*</ph>).","pos":[39,92],"source":" The string can contain wildcards (for example, *.\\*)."}]}]},{"pos":[24035,24047],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the return value is greater than or equal to 0, it is the zero-based index of the last filename added to the list.","pos":[24051,24168]},{"content":"The return value is <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if an error occurs; the return value is <bpt id=\"p2\">**</bpt>CB_ERRSPACE<ept id=\"p2\">**</ept> if insufficient space is available to store the new strings.","pos":[24169,24316],"source":" The return value is **CB_ERR** if an error occurs; the return value is **CB_ERRSPACE** if insufficient space is available to store the new strings."},{"pos":[24326,24333],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is not supported by the Windows <bpt id=\"p1\">**</bpt>ComboBoxEx<ept id=\"p1\">**</ept> control.","pos":[24337,24406],"source":"This function is not supported by the Windows **ComboBoxEx** control."},{"content":"For more information on this control, see <bpt id=\"p1\">[</bpt>ComboBoxEx Controls<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775738)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[24407,24590],"source":" For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[24600,24607],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24611,24704],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#10<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#10](../../mfc/reference/codesnippet/cpp/ccombobox-class_10.cpp)]"},{"pos":[24714,24769],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__drawitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::DrawItem","linkify":"<a name=\"ccombobox__drawitem\"></a>  CComboBox::DrawItem","source":"<a name=\"ccombobox__drawitem\"></a>  CComboBox::DrawItem"},{"content":"Called by the framework when a visual aspect of an owner-draw combo box changes.","pos":[24773,24853]},{"pos":[24936,24946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>DRAWITEMSTRUCT<ept id=\"p1\">](../../mfc/reference/drawitemstruct-structure.md)</ept> structure that contains information about the type of drawing required.","pos":[24972,25124],"source":" A pointer to a [DRAWITEMSTRUCT](../../mfc/reference/drawitemstruct-structure.md) structure that contains information about the type of drawing required."},{"pos":[25134,25141],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">**</bpt>itemAction<ept id=\"p1\">**</ept> member of the <ph id=\"ph1\">`DRAWITEMSTRUCT`</ph> structure defines the drawing action that is to be performed.","pos":[25145,25256],"source":"The **itemAction** member of the `DRAWITEMSTRUCT` structure defines the drawing action that is to be performed."},{"content":"See <bpt id=\"p1\">[</bpt>CWnd::OnDrawItem<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__ondrawitem)</ept> for a description of this structure.","pos":[25257,25368],"source":" See [CWnd::OnDrawItem](../../mfc/reference/cwnd-class.md#cwnd__ondrawitem) for a description of this structure."},{"content":"By default, this member function does nothing.","pos":[25375,25421]},{"content":"Override this member function to implement drawing for an owner-draw <ph id=\"ph1\">`CComboBox`</ph> object.","pos":[25422,25510],"source":" Override this member function to implement drawing for an owner-draw `CComboBox` object."},{"content":"Before this member function terminates, the application should restore all graphics device interface (GDI) objects selected for the display context supplied in <ph id=\"ph1\">`lpDrawItemStruct`</ph>.","pos":[25511,25690],"source":" Before this member function terminates, the application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct`."},{"pos":[25700,25707],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[25711,25804],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#11<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#11](../../mfc/reference/codesnippet/cpp/ccombobox-class_11.cpp)]"},{"pos":[25814,25873],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__findstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::FindString","linkify":"<a name=\"ccombobox__findstring\"></a>  CComboBox::FindString","source":"<a name=\"ccombobox__findstring\"></a>  CComboBox::FindString"},{"content":"Finds, but doesn't select, the first string that contains the specified prefix in the list box of a combo box.","pos":[25877,25987]},{"pos":[26085,26095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains the zero-based index of the item before the first item to be searched.","pos":[26116,26195]},{"content":"When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by <ph id=\"ph1\">`nStartAfter`</ph>.","pos":[26196,26334],"source":" When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by `nStartAfter`."},{"content":"If –1, the entire list box is searched from the beginning.","pos":[26335,26393]},{"content":"Points to the null-terminated string that contains the prefix to search for.","pos":[26416,26492]},{"content":"The search is case independent, so this string can contain any combination of uppercase and lowercase letters.","pos":[26493,26603]},{"pos":[26613,26625],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the return value is greater than or equal to 0, it is the zero-based index of the matching item.","pos":[26629,26728]},{"content":"It is <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if the search was unsuccessful.","pos":[26729,26777],"source":" It is **CB_ERR** if the search was unsuccessful."},{"pos":[26787,26794],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is not supported by the Windows <bpt id=\"p1\">**</bpt>ComboBoxEx<ept id=\"p1\">**</ept> control.","pos":[26798,26867],"source":"This function is not supported by the Windows **ComboBoxEx** control."},{"content":"For more information on this control, see <bpt id=\"p1\">[</bpt>ComboBoxEx Controls<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775738)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[26868,27051],"source":" For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[27061,27068],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[27072,27165],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#12<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_12.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#12](../../mfc/reference/codesnippet/cpp/ccombobox-class_12.cpp)]"},{"pos":[27175,27244],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__findstringexact\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::FindStringExact","linkify":"<a name=\"ccombobox__findstringexact\"></a>  CComboBox::FindStringExact","source":"<a name=\"ccombobox__findstringexact\"></a>  CComboBox::FindStringExact"},{"pos":[27248,27390],"content":"Call the <ph id=\"ph1\">`FindStringExact`</ph> member function to find the first list-box string (in a combo box) that matches the string specified in <ph id=\"ph2\">`lpszFind`</ph>.","source":"Call the `FindStringExact` member function to find the first list-box string (in a combo box) that matches the string specified in `lpszFind`."},{"pos":[27491,27501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the item before the first item to be searched.","pos":[27522,27602]},{"content":"When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by <ph id=\"ph1\">`nIndexStart`</ph>.","pos":[27603,27741],"source":" When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by `nIndexStart`."},{"content":"If <ph id=\"ph1\">`nIndexStart`</ph> is –1, the entire list box is searched from the beginning.","pos":[27742,27817],"source":" If `nIndexStart` is –1, the entire list box is searched from the beginning."},{"content":"Points to the null-terminated string to search for.","pos":[27838,27889]},{"content":"This string can contain a complete filename, including the extension.","pos":[27890,27959]},{"content":"The search is not case sensitive, so this string can contain any combination of uppercase and lowercase letters.","pos":[27960,28072]},{"pos":[28082,28094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28098,28186],"content":"The zero-based index of the matching item, or <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if the search was unsuccessful.","source":"The zero-based index of the matching item, or **CB_ERR** if the search was unsuccessful."},{"pos":[28196,28203],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28207,28431],"content":"If the combo box was created with an owner-draw style but without the <bpt id=\"p1\">[</bpt>CBS_HASSTRINGS<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> style, <ph id=\"ph1\">`FindStringExact`</ph> attempts to match the doubleword value against the value of <ph id=\"ph2\">`lpszFind`</ph>.","source":"If the combo box was created with an owner-draw style but without the [CBS_HASSTRINGS](../../mfc/reference/combo-box-styles.md) style, `FindStringExact` attempts to match the doubleword value against the value of `lpszFind`."},{"pos":[28441,28448],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28452,28545],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#13<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_13.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#13](../../mfc/reference/codesnippet/cpp/ccombobox-class_13.cpp)]"},{"pos":[28555,28624],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getcomboboxinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetComboBoxInfo","linkify":"<a name=\"ccombobox__getcomboboxinfo\"></a>  CComboBox::GetComboBoxInfo","source":"<a name=\"ccombobox__getcomboboxinfo\"></a>  CComboBox::GetComboBoxInfo"},{"pos":[28628,28677],"content":"Retrieves information for the <ph id=\"ph1\">`CComboBox`</ph> object.","source":"Retrieves information for the `CComboBox` object."},{"pos":[28753,28763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pcbi<ept id=\"p1\">*</ept>","pos":[28767,28773],"source":"*pcbi*"},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>COMBOBOXINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775798)</ept> structure.","pos":[28777,28879],"source":" A pointer to the [COMBOBOXINFO](http://msdn.microsoft.com/library/windows/desktop/bb775798) structure."},{"pos":[28889,28901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28905,28955],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"pos":[28965,28972],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28976,29193],"content":"This member function emulates the functionality of the <bpt id=\"p1\">[</bpt>CB_GETCOMBOBOXINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775839)</ept> message, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the [CB_GETCOMBOBOXINFO](http://msdn.microsoft.com/library/windows/desktop/bb775839) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[29203,29258],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetCount","linkify":"<a name=\"ccombobox__getcount\"></a>  CComboBox::GetCount","source":"<a name=\"ccombobox__getcount\"></a>  CComboBox::GetCount"},{"content":"Call this member function to retrieve the number of items in the list-box portion of a combo box.","pos":[29262,29359]},{"pos":[29409,29421],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of items.","pos":[29425,29445]},{"content":"The returned count is one greater than the index value of the last item (the index is zero-based).","pos":[29446,29544]},{"content":"It is <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if an error occurs.","pos":[29545,29581],"source":" It is **CB_ERR** if an error occurs."},{"pos":[29591,29598],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[29602,29695],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#14<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_14.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#14](../../mfc/reference/codesnippet/cpp/ccombobox-class_14.cpp)]"},{"pos":[29705,29768],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getcuebanner\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetCueBanner","linkify":"<a name=\"ccombobox__getcuebanner\"></a>  CComboBox::GetCueBanner","source":"<a name=\"ccombobox__getcuebanner\"></a>  CComboBox::GetCueBanner"},{"content":"Gets the cue text that is displayed for a combo box control.","pos":[29772,29832]},{"pos":[29960,29970],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[29977,29986]},{"content":"Description","pos":[29987,29998]},{"pos":[30041,30057],"content":"[out] <ph id=\"ph1\">`lpszText`</ph>","source":"[out] `lpszText`"},{"content":"Pointer to a buffer that receives the cue banner text.","pos":[30058,30112]},{"pos":[30117,30131],"content":"[in] <ph id=\"ph1\">`cchText`</ph>","source":"[in] `cchText`"},{"pos":[30132,30191],"content":"Size of the buffer that the <ph id=\"ph1\">`lpszText`</ph> parameter points to.","source":"Size of the buffer that the `lpszText` parameter points to."},{"pos":[30202,30214],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30218,30398],"content":"In the first overload, a <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/using-cstring.md)</ept> object that contains the cue banner text if it exists; otherwise, a <ph id=\"ph1\">`CString`</ph> object that has zero length.","source":"In the first overload, a [CString](../../atl-mfc-shared/using-cstring.md) object that contains the cue banner text if it exists; otherwise, a `CString` object that has zero length."},{"content":"-or-","pos":[30405,30409]},{"pos":[30416,30496],"content":"In the second overload, <ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"In the second overload, `true` if this method is successful; otherwise, `false`."},{"pos":[30506,30513],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Cue text is a prompt that is displayed in the input area of the combo box control.","pos":[30517,30599]},{"content":"The cue text is displayed until the user provides input.","pos":[30600,30656]},{"pos":[30663,30850],"content":"This method sends the <bpt id=\"p1\">[</bpt>CB_GETCUEBANNER<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775843)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [CB_GETCUEBANNER](http://msdn.microsoft.com/library/windows/desktop/bb775843) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[30860,30917],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getcursel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetCurSel","linkify":"<a name=\"ccombobox__getcursel\"></a>  CComboBox::GetCurSel","source":"<a name=\"ccombobox__getcursel\"></a>  CComboBox::GetCurSel"},{"content":"Call this member function to determine which item in the combo box is selected.","pos":[30921,31000]},{"pos":[31051,31063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31067,31188],"content":"The zero-based index of the currently selected item in the list box of a combo box, or <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if no item is selected.","source":"The zero-based index of the currently selected item in the list box of a combo box, or **CB_ERR** if no item is selected."},{"pos":[31198,31205],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31209,31252],"content":"<ph id=\"ph1\">`GetCurSel`</ph> returns an index into the list.","source":"`GetCurSel` returns an index into the list."},{"pos":[31262,31269],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31273,31366],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#15<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_15.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#15](../../mfc/reference/codesnippet/cpp/ccombobox-class_15.cpp)]"},{"pos":[31376,31457],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getdroppedcontrolrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetDroppedControlRect","linkify":"<a name=\"ccombobox__getdroppedcontrolrect\"></a>  CComboBox::GetDroppedControlRect","source":"<a name=\"ccombobox__getdroppedcontrolrect\"></a>  CComboBox::GetDroppedControlRect"},{"pos":[31461,31609],"content":"Call the <ph id=\"ph1\">`GetDroppedControlRect`</ph> member function to retrieve the screen coordinates of the visible (dropped-down) list box of a drop-down combo box.","source":"Call the `GetDroppedControlRect` member function to retrieve the screen coordinates of the visible (dropped-down) list box of a drop-down combo box."},{"pos":[31686,31696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>lprect<ept id=\"p1\">*</ept>","pos":[31700,31708],"source":"*lprect*"},{"content":"Points to the <bpt id=\"p1\">[</bpt>RECT structure<ept id=\"p1\">](../../mfc/reference/rect-structure1.md)</ept> that is to receive the coordinates.","pos":[31712,31818],"source":" Points to the [RECT structure](../../mfc/reference/rect-structure1.md) that is to receive the coordinates."},{"pos":[31828,31835],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31839,31932],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#16<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_16.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#16](../../mfc/reference/codesnippet/cpp/ccombobox-class_16.cpp)]"},{"pos":[31942,32011],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getdroppedstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetDroppedState","linkify":"<a name=\"ccombobox__getdroppedstate\"></a>  CComboBox::GetDroppedState","source":"<a name=\"ccombobox__getdroppedstate\"></a>  CComboBox::GetDroppedState"},{"pos":[32015,32143],"content":"Call the <ph id=\"ph1\">`GetDroppedState`</ph> member function to determine whether the list box of a drop-down combo box is visible (dropped down).","source":"Call the `GetDroppedState` member function to determine whether the list box of a drop-down combo box is visible (dropped down)."},{"pos":[32201,32213],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the list box is visible; otherwise 0.","pos":[32217,32265]},{"pos":[32275,32282],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[32286,32379],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#17<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_17.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#17](../../mfc/reference/codesnippet/cpp/ccombobox-class_17.cpp)]"},{"pos":[32389,32458],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getdroppedwidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetDroppedWidth","linkify":"<a name=\"ccombobox__getdroppedwidth\"></a>  CComboBox::GetDroppedWidth","source":"<a name=\"ccombobox__getdroppedwidth\"></a>  CComboBox::GetDroppedWidth"},{"content":"Call this function to retrieve the minimum allowable width, in pixels, of the list box of a combo box.","pos":[32462,32564]},{"pos":[32621,32633],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[32637,32714],"content":"If successful, the minimum allowable width, in pixels; otherwise, <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept>.","source":"If successful, the minimum allowable width, in pixels; otherwise, **CB_ERR**."},{"pos":[32724,32731],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32735,32911],"content":"This function only applies to combo boxes with the <bpt id=\"p1\">[</bpt>CBS_DROPDOWN<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> or <bpt id=\"p2\">[</bpt>CBS_DROPDOWNLIST<ept id=\"p2\">](../../mfc/reference/combo-box-styles.md)</ept> style.","source":"This function only applies to combo boxes with the [CBS_DROPDOWN](../../mfc/reference/combo-box-styles.md) or [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style."},{"content":"By default, the minimum allowable width of the drop-down list box is 0.","pos":[32918,32989]},{"content":"The minimum allowable width can be set by calling <bpt id=\"p1\">[</bpt>SetDroppedWidth<ept id=\"p1\">](#ccombobox__setdroppedwidth)</ept>.","pos":[32990,33087],"source":" The minimum allowable width can be set by calling [SetDroppedWidth](#ccombobox__setdroppedwidth)."},{"content":"When the list-box portion of the combo box is displayed, its width is the larger of the minimum allowable width or the combo box width.","pos":[33088,33223]},{"pos":[33233,33240],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33245,33312],"content":"See the example for <bpt id=\"p1\">[</bpt>SetDroppedWidth<ept id=\"p1\">](#ccombobox__setdroppedwidth)</ept>.","source":"See the example for [SetDroppedWidth](#ccombobox__setdroppedwidth)."},{"pos":[33322,33381],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__geteditsel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetEditSel","linkify":"<a name=\"ccombobox__geteditsel\"></a>  CComboBox::GetEditSel","source":"<a name=\"ccombobox__geteditsel\"></a>  CComboBox::GetEditSel"},{"content":"Gets the starting and ending character positions of the current selection in the edit control of a combo box.","pos":[33385,33494]},{"pos":[33548,33560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A 32-bit value that contains the starting position in the low-order word and the position of the first nonselected character after the end of the selection in the high-order word.","pos":[33564,33743]},{"content":"If this function is used on a combo box without an edit control, <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> is returned.","pos":[33744,33832],"source":" If this function is used on a combo box without an edit control, **CB_ERR** is returned."},{"pos":[33842,33849],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[33853,33946],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#18<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_18.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#18](../../mfc/reference/codesnippet/cpp/ccombobox-class_18.cpp)]"},{"pos":[33956,34021],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getextendedui\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetExtendedUI","linkify":"<a name=\"ccombobox__getextendedui\"></a>  CComboBox::GetExtendedUI","source":"<a name=\"ccombobox__getextendedui\"></a>  CComboBox::GetExtendedUI"},{"pos":[34025,34161],"content":"Call the <ph id=\"ph1\">`GetExtendedUI`</ph> member function to determine whether a combo box has the default user interface or the extended user interface.","source":"Call the `GetExtendedUI` member function to determine whether a combo box has the default user interface or the extended user interface."},{"pos":[34217,34229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the combo box has the extended user interface; otherwise 0.","pos":[34233,34303]},{"pos":[34313,34320],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The extended user interface can be identified in the following ways:","pos":[34324,34392]},{"pos":[34402,34548],"content":"Clicking the static control displays the list box only for combo boxes with the <bpt id=\"p1\">[</bpt>CBS_DROPDOWNLIST<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> style.","source":"Clicking the static control displays the list box only for combo boxes with the [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style."},{"content":"Pressing the DOWN ARROW key displays the list box (F4 is disabled).","pos":[34558,34625]},{"content":"Scrolling in the static control is disabled when the item list is not visible (arrow keys are disabled).","pos":[34632,34736]},{"pos":[34746,34753],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[34757,34850],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#19<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_19.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#19](../../mfc/reference/codesnippet/cpp/ccombobox-class_19.cpp)]"},{"pos":[34860,34937],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__gethorizontalextent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetHorizontalExtent","linkify":"<a name=\"ccombobox__gethorizontalextent\"></a>  CComboBox::GetHorizontalExtent","source":"<a name=\"ccombobox__gethorizontalextent\"></a>  CComboBox::GetHorizontalExtent"},{"content":"Retrieves from the combo box the width in pixels by which the list-box portion of the combo box can be scrolled horizontally.","pos":[34941,35066]},{"pos":[35128,35140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The scrollable width of the list-box portion of the combo box, in pixels.","pos":[35144,35217]},{"pos":[35227,35234],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This is applicable only if the list-box portion of the combo box has a horizontal scroll bar.","pos":[35238,35331]},{"pos":[35341,35348],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[35352,35445],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#20<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_20.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#20](../../mfc/reference/codesnippet/cpp/ccombobox-class_20.cpp)]"},{"pos":[35455,35516],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getitemdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetItemData","linkify":"<a name=\"ccombobox__getitemdata\"></a>  CComboBox::GetItemData","source":"<a name=\"ccombobox__getitemdata\"></a>  CComboBox::GetItemData"},{"content":"Retrieves the application-supplied 32-bit value associated with the specified combo-box item.","pos":[35520,35613]},{"pos":[35682,35692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains the zero-based index of an item in the combo box's list box.","pos":[35708,35777]},{"pos":[35787,35799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35803,35879],"content":"The 32-bit value associated with the item, or <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if an error occurs.","source":"The 32-bit value associated with the item, or **CB_ERR** if an error occurs."},{"pos":[35889,35896],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The 32-bit value can be set with the <ph id=\"ph1\">`dwItemData`</ph> parameter of a <bpt id=\"p1\">[</bpt>SetItemData<ept id=\"p1\">](#ccombobox__setitemdata)</ept> member function call.","pos":[35900,36025],"source":"The 32-bit value can be set with the `dwItemData` parameter of a [SetItemData](#ccombobox__setitemdata) member function call."},{"content":"Use the <ph id=\"ph1\">`GetItemDataPtr`</ph> member function if the 32-bit value to be retrieved is a pointer ( <bpt id=\"p1\">**</bpt>void<ph id=\"ph2\">\\*</ph><ept id=\"p1\">**</ept>).","pos":[36026,36130],"source":" Use the `GetItemDataPtr` member function if the 32-bit value to be retrieved is a pointer ( **void\\***)."},{"pos":[36140,36147],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[36151,36244],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#21<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_21.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#21](../../mfc/reference/codesnippet/cpp/ccombobox-class_21.cpp)]"},{"pos":[36254,36321],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getitemdataptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetItemDataPtr","linkify":"<a name=\"ccombobox__getitemdataptr\"></a>  CComboBox::GetItemDataPtr","source":"<a name=\"ccombobox__getitemdataptr\"></a>  CComboBox::GetItemDataPtr"},{"pos":[36325,36445],"content":"Retrieves the application-supplied 32-bit value associated with the specified combo-box item as a pointer ( <bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>).","source":"Retrieves the application-supplied 32-bit value associated with the specified combo-box item as a pointer ( **void\\***)."},{"pos":[36513,36523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains the zero-based index of an item in the combo box's list box.","pos":[36539,36608]},{"pos":[36618,36630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Retrieves a pointer, or –1 if an error occurs.","pos":[36634,36680]},{"pos":[36690,36697],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[36701,36794],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#22<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_22.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#22](../../mfc/reference/codesnippet/cpp/ccombobox-class_22.cpp)]"},{"pos":[36804,36869],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getitemheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetItemHeight","linkify":"<a name=\"ccombobox__getitemheight\"></a>  CComboBox::GetItemHeight","source":"<a name=\"ccombobox__getitemheight\"></a>  CComboBox::GetItemHeight"},{"pos":[36873,36966],"content":"Call the <ph id=\"ph1\">`GetItemHeight`</ph> member function to retrieve the height of list items in a combo box.","source":"Call the `GetItemHeight` member function to retrieve the height of list items in a combo box."},{"pos":[37031,37041],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the component of the combo box whose height is to be retrieved.","pos":[37057,37130]},{"content":"If the <ph id=\"ph1\">`nIndex`</ph> parameter is –1, the height of the edit-control (or static-text) portion of the combo box is retrieved.","pos":[37131,37250],"source":" If the `nIndex` parameter is –1, the height of the edit-control (or static-text) portion of the combo box is retrieved."},{"content":"If the combo box has the <bpt id=\"p1\">[</bpt>CBS_OWNERDRAWVARIABLE<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> style, <ph id=\"ph1\">`nIndex`</ph> specifies the zero-based index of the list item whose height is to be retrieved.","pos":[37251,37437],"source":" If the combo box has the [CBS_OWNERDRAWVARIABLE](../../mfc/reference/combo-box-styles.md) style, `nIndex` specifies the zero-based index of the list item whose height is to be retrieved."},{"content":"Otherwise, <ph id=\"ph1\">`nIndex`</ph> should be set to 0.","pos":[37438,37477],"source":" Otherwise, `nIndex` should be set to 0."},{"pos":[37487,37499],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height, in pixels, of the specified item in a combo box.","pos":[37503,37563]},{"content":"The return value is <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if an error occurs.","pos":[37564,37614],"source":" The return value is **CB_ERR** if an error occurs."},{"pos":[37624,37631],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[37635,37728],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#23<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_23.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#23](../../mfc/reference/codesnippet/cpp/ccombobox-class_23.cpp)]"},{"pos":[37738,37795],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getlbtext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetLBText","linkify":"<a name=\"ccombobox__getlbtext\"></a>  CComboBox::GetLBText","source":"<a name=\"ccombobox__getlbtext\"></a>  CComboBox::GetLBText"},{"content":"Gets a string from the list box of a combo box.","pos":[37799,37846]},{"pos":[38003,38013],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains the zero-based index of the list-box string to be copied.","pos":[38029,38095]},{"content":"Points to a buffer that is to receive the string.","pos":[38116,38165]},{"content":"The buffer must have sufficient space for the string and a terminating null character.","pos":[38166,38252]},{"content":"A reference to a <ph id=\"ph1\">`CString`</ph>.","pos":[38272,38299],"source":" A reference to a `CString`."},{"pos":[38309,38321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The length (in bytes) of the string, excluding the terminating null character.","pos":[38325,38403]},{"content":"If <ph id=\"ph1\">`nIndex`</ph> does not specify a valid index, the return value is <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept>.","pos":[38404,38479],"source":" If `nIndex` does not specify a valid index, the return value is **CB_ERR**."},{"pos":[38489,38496],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38500,38586],"content":"The second form of this member function fills a <ph id=\"ph1\">`CString`</ph> object with the item's text.","source":"The second form of this member function fills a `CString` object with the item's text."},{"pos":[38596,38603],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[38607,38700],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#24<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_24.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#24](../../mfc/reference/codesnippet/cpp/ccombobox-class_24.cpp)]"},{"pos":[38710,38773],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getlbtextlen\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetLBTextLen","linkify":"<a name=\"ccombobox__getlbtextlen\"></a>  CComboBox::GetLBTextLen","source":"<a name=\"ccombobox__getlbtextlen\"></a>  CComboBox::GetLBTextLen"},{"content":"Gets the length of a string in the list box of a combo box.","pos":[38777,38836]},{"pos":[38900,38910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains the zero-based index of the list-box string.","pos":[38926,38979]},{"pos":[38989,39001],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The length of the string in bytes, excluding the terminating null character.","pos":[39005,39081]},{"content":"If <ph id=\"ph1\">`nIndex`</ph> does not specify a valid index, the return value is <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept>.","pos":[39082,39157],"source":" If `nIndex` does not specify a valid index, the return value is **CB_ERR**."},{"pos":[39167,39174],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[39179,39245],"content":"See the example for <bpt id=\"p1\">[</bpt>CComboBox::GetLBText<ept id=\"p1\">](#ccombobox__getlbtext)</ept>.","source":"See the example for [CComboBox::GetLBText](#ccombobox__getlbtext)."},{"pos":[39255,39312],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getlocale\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetLocale","linkify":"<a name=\"ccombobox__getlocale\"></a>  CComboBox::GetLocale","source":"<a name=\"ccombobox__getlocale\"></a>  CComboBox::GetLocale"},{"content":"Retrieves the locale used by the combo box.","pos":[39316,39359]},{"pos":[39411,39423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The locale identifier (LCID) value for the strings in the combo box.","pos":[39427,39495]},{"pos":[39505,39512],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The locale is used, for example, to determine the sort order of the strings in a sorted combo box.","pos":[39516,39614]},{"pos":[39624,39631],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[39636,39702],"content":"See the example for <bpt id=\"p1\">[</bpt>CComboBox::SetLocale<ept id=\"p1\">](#ccombobox__setlocale)</ept>.","source":"See the example for [CComboBox::SetLocale](#ccombobox__setlocale)."},{"pos":[39712,39777],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__getminvisible\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetMinVisible","linkify":"<a name=\"ccombobox__getminvisible\"></a>  CComboBox::GetMinVisible","source":"<a name=\"ccombobox__getminvisible\"></a>  CComboBox::GetMinVisible"},{"content":"Gets the minimum number of visible items in the drop-down list of the current combo box control.","pos":[39781,39877]},{"pos":[39932,39944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The minimum number of visible items in the current drop-down list.","pos":[39948,40014]},{"pos":[40024,40031],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40035,40223],"content":"This method sends the <bpt id=\"p1\">[</bpt>CB_GETMINVISIBLE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775915)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [CB_GETMINVISIBLE](http://msdn.microsoft.com/library/windows/desktop/bb775915) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[40233,40294],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__gettopindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::GetTopIndex","linkify":"<a name=\"ccombobox__gettopindex\"></a>  CComboBox::GetTopIndex","source":"<a name=\"ccombobox__gettopindex\"></a>  CComboBox::GetTopIndex"},{"content":"Retrieves the zero-based index of the first visible item in the list-box portion of the combo box.","pos":[40298,40396]},{"pos":[40449,40461],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40465,40589],"content":"The zero-based index of the first visible item in the list-box portion of the combo box if successful, <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> otherwise.","source":"The zero-based index of the first visible item in the list-box portion of the combo box if successful, **CB_ERR** otherwise."},{"pos":[40599,40606],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Initially, item 0 is at the top of the list box, but if the list box is scrolled, another item may be at the top.","pos":[40610,40723]},{"pos":[40733,40740],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[40744,40837],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#25<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_25.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#25](../../mfc/reference/codesnippet/cpp/ccombobox-class_25.cpp)]"},{"pos":[40847,40908],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__initstorage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::InitStorage","linkify":"<a name=\"ccombobox__initstorage\"></a>  CComboBox::InitStorage","source":"<a name=\"ccombobox__initstorage\"></a>  CComboBox::InitStorage"},{"content":"Allocates memory for storing list box items in the list-box portion of the combo box.","pos":[40912,40997]},{"pos":[41075,41085],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the number of items to add.","pos":[41101,41138]},{"content":"Specifies the amount of memory, in bytes, to allocate for item strings.","pos":[41157,41228]},{"pos":[41238,41250],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41254,41456],"content":"If successful, the maximum number of items that the list-box portion of the combo box can store before a memory reallocation is needed, otherwise <bpt id=\"p1\">**</bpt>CB_ERRSPACE<ept id=\"p1\">**</ept>, meaning not enough memory is available.","source":"If successful, the maximum number of items that the list-box portion of the combo box can store before a memory reallocation is needed, otherwise **CB_ERRSPACE**, meaning not enough memory is available."},{"pos":[41466,41473],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41477,41577],"content":"Call this function before adding a large number of items to the list-box portion of the <ph id=\"ph1\">`CComboBox`</ph>.","source":"Call this function before adding a large number of items to the list-box portion of the `CComboBox`."},{"content":"Windows 95/98 only: The <ph id=\"ph1\">`wParam`</ph> parameter is limited to 16-bit values.","pos":[41584,41655],"source":"Windows 95/98 only: The `wParam` parameter is limited to 16-bit values."},{"content":"This means list boxes cannot contain more than 32,767 items.","pos":[41656,41716]},{"content":"Although the number of items is restricted, the total size of the items in a list box is limited only by available memory.","pos":[41717,41839]},{"content":"This function helps speed up the initialization of list boxes that have a large number of items (more than 100).","pos":[41846,41958]},{"content":"It preallocates the specified amount of memory so that subsequent <bpt id=\"p1\">[</bpt>AddString<ept id=\"p1\">](#ccombobox__addstring)</ept>, <bpt id=\"p2\">[</bpt>InsertString<ept id=\"p2\">](#ccombobox__insertstring)</ept>, and <bpt id=\"p3\">[</bpt>Dir<ept id=\"p3\">](#ccombobox__dir)</ept> functions take the shortest possible time.","pos":[41959,42172],"source":" It preallocates the specified amount of memory so that subsequent [AddString](#ccombobox__addstring), [InsertString](#ccombobox__insertstring), and [Dir](#ccombobox__dir) functions take the shortest possible time."},{"content":"You can use estimates for the parameters.","pos":[42173,42214]},{"content":"If you overestimate, some extra memory is allocated; if you underestimate, the normal allocation is used for items that exceed the preallocated amount.","pos":[42215,42366]},{"pos":[42376,42383],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[42387,42480],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#26<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_26.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#26](../../mfc/reference/codesnippet/cpp/ccombobox-class_26.cpp)]"},{"pos":[42490,42553],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__insertstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::InsertString","linkify":"<a name=\"ccombobox__insertstring\"></a>  CComboBox::InsertString","source":"<a name=\"ccombobox__insertstring\"></a>  CComboBox::InsertString"},{"content":"Inserts a string into the list box of a combo box.","pos":[42557,42607]},{"pos":[42693,42703],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains the zero-based index to the position in the list box that will receive the string.","pos":[42719,42810]},{"content":"If this parameter is –1, the string is added to the end of the list.","pos":[42811,42879]},{"content":"Points to the null-terminated string that is to be inserted.","pos":[42902,42962]},{"pos":[42972,42984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of the position at which the string was inserted.","pos":[42988,43058]},{"content":"The return value is <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if an error occurs.","pos":[43059,43109],"source":" The return value is **CB_ERR** if an error occurs."},{"content":"The return value is <bpt id=\"p1\">**</bpt>CB_ERRSPACE<ept id=\"p1\">**</ept> if insufficient space is available to store the new string.","pos":[43110,43205],"source":" The return value is **CB_ERRSPACE** if insufficient space is available to store the new string."},{"pos":[43215,43222],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[43226,43426],"content":"Unlike the <bpt id=\"p1\">[</bpt>AddString<ept id=\"p1\">](#ccombobox__addstring)</ept> member function, the <ph id=\"ph1\">`InsertString`</ph> member function does not cause a list with the <bpt id=\"p2\">[</bpt>CBS_SORT<ept id=\"p2\">](../../mfc/reference/combo-box-styles.md)</ept> style to be sorted.","source":"Unlike the [AddString](#ccombobox__addstring) member function, the `InsertString` member function does not cause a list with the [CBS_SORT](../../mfc/reference/combo-box-styles.md) style to be sorted."},{"pos":[43434,43698],"content":"[!NOTE]\n This function is not supported by the Windows **ComboBoxEx** control. For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].","leadings":["","> "],"nodes":[{"content":" This function is not supported by the Windows **ComboBoxEx** control. For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].","pos":[8,262],"nodes":[{"content":"This function is not supported by the Windows <bpt id=\"p1\">**</bpt>ComboBoxEx<ept id=\"p1\">**</ept> control.","pos":[1,70],"source":" This function is not supported by the Windows **ComboBoxEx** control."},{"content":"For more information on this control, see <bpt id=\"p1\">[</bpt>ComboBoxEx Controls<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775738)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[71,254],"source":" For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."}]}]},{"pos":[43708,43715],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[43719,43812],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#27<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_27.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#27](../../mfc/reference/codesnippet/cpp/ccombobox-class_27.cpp)]"},{"pos":[43822,43879],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__limittext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::LimitText","linkify":"<a name=\"ccombobox__limittext\"></a>  CComboBox::LimitText","source":"<a name=\"ccombobox__limittext\"></a>  CComboBox::LimitText"},{"content":"Limits the length in bytes of the text that the user can enter into the edit control of a combo box.","pos":[43883,43983]},{"pos":[44039,44049],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the length (in bytes) of the text that the user can enter.","pos":[44068,44136]},{"content":"If this parameter is 0, the text length is set to 65,535 bytes.","pos":[44137,44200]},{"pos":[44210,44222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful.","pos":[44226,44248]},{"content":"If called for a combo box with the style <bpt id=\"p1\">[</bpt>CBS_DROPDOWNLIST<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> or for a combo box without an edit control, the return value is <bpt id=\"p2\">**</bpt>CB_ERR<ept id=\"p2\">**</ept>.","pos":[44249,44425],"source":" If called for a combo box with the style [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) or for a combo box without an edit control, the return value is **CB_ERR**."},{"pos":[44435,44442],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44446,44637],"content":"If the combo box does not have the style <bpt id=\"p1\">[</bpt>CBS_AUTOHSCROLL<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept>, setting the text limit to be larger than the size of the edit control will have no effect.","source":"If the combo box does not have the style [CBS_AUTOHSCROLL](../../mfc/reference/combo-box-styles.md), setting the text limit to be larger than the size of the edit control will have no effect."},{"content":"<ph id=\"ph1\">`LimitText`</ph> only limits the text the user can enter.","pos":[44644,44696],"source":"`LimitText` only limits the text the user can enter."},{"content":"It has no effect on any text already in the edit control when the message is sent, nor does it affect the length of the text copied to the edit control when a string in the list box is selected.","pos":[44697,44891]},{"pos":[44901,44908],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[44912,45005],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#28<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_28.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#28](../../mfc/reference/codesnippet/cpp/ccombobox-class_28.cpp)]"},{"pos":[45015,45076],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__measureitem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::MeasureItem","linkify":"<a name=\"ccombobox__measureitem\"></a>  CComboBox::MeasureItem","source":"<a name=\"ccombobox__measureitem\"></a>  CComboBox::MeasureItem"},{"content":"Called by the framework when a combo box with an owner-draw style is created.","pos":[45080,45157]},{"pos":[45249,45259],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A long pointer to a <bpt id=\"p1\">[</bpt>MEASUREITEMSTRUCT<ept id=\"p1\">](../../mfc/reference/measureitemstruct-structure.md)</ept> structure.","pos":[45288,45390],"source":" A long pointer to a [MEASUREITEMSTRUCT](../../mfc/reference/measureitemstruct-structure.md) structure."},{"pos":[45400,45407],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, this member function does nothing.","pos":[45411,45457]},{"content":"Override this member function and fill in the <ph id=\"ph1\">`MEASUREITEMSTRUCT`</ph> structure to inform Windows of the dimensions of the list box in the combo box.","pos":[45458,45603],"source":" Override this member function and fill in the `MEASUREITEMSTRUCT` structure to inform Windows of the dimensions of the list box in the combo box."},{"content":"If the combo box is created with the <bpt id=\"p1\">[</bpt>CBS_OWNERDRAWVARIABLE<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> style, the framework calls this member function for each item in the list box.","pos":[45604,45784],"source":" If the combo box is created with the [CBS_OWNERDRAWVARIABLE](../../mfc/reference/combo-box-styles.md) style, the framework calls this member function for each item in the list box."},{"content":"Otherwise, this member is called only once.","pos":[45785,45828]},{"content":"Using the <bpt id=\"p1\">**</bpt>CBS_OWNERDRAWFIXED<ept id=\"p1\">**</ept> style in an owner-draw combo box created with the <bpt id=\"p2\">[</bpt>SubclassDlgItem<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__subclassdlgitem)</ept> member function of <ph id=\"ph1\">`CWnd`</ph> involves further programming considerations.","pos":[45835,46063],"source":"Using the **CBS_OWNERDRAWFIXED** style in an owner-draw combo box created with the [SubclassDlgItem](../../mfc/reference/cwnd-class.md#cwnd__subclassdlgitem) member function of `CWnd` involves further programming considerations."},{"content":"See the discussion in <bpt id=\"p1\">[</bpt>Technical Note 14<ept id=\"p1\">](../../mfc/tn014-custom-controls.md)</ept>.","pos":[46064,46142],"source":" See the discussion in [Technical Note 14](../../mfc/tn014-custom-controls.md)."},{"pos":[46149,46285],"content":"See <bpt id=\"p1\">[</bpt>CWnd::OnMeasureItem<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__onmeasureitem)</ept> for a description of the <ph id=\"ph1\">`MEASUREITEMSTRUCT`</ph> structure.","source":"See [CWnd::OnMeasureItem](../../mfc/reference/cwnd-class.md#cwnd__onmeasureitem) for a description of the `MEASUREITEMSTRUCT` structure."},{"pos":[46295,46302],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[46306,46399],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#29<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_29.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#29](../../mfc/reference/codesnippet/cpp/ccombobox-class_29.cpp)]"},{"pos":[46409,46458],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__paste\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::Paste","linkify":"<a name=\"ccombobox__paste\"></a>  CComboBox::Paste","source":"<a name=\"ccombobox__paste\"></a>  CComboBox::Paste"},{"content":"Inserts the data from the Clipboard into the edit control of the combo box at the current cursor position.","pos":[46462,46568]},{"pos":[46607,46614],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[46618,46693],"content":"Data is inserted only if the Clipboard contains data in <bpt id=\"p1\">**</bpt>CF_TEXT<ept id=\"p1\">**</ept> format.","source":"Data is inserted only if the Clipboard contains data in **CF_TEXT** format."},{"pos":[46703,46710],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[46714,46807],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#30<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_30.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#30](../../mfc/reference/codesnippet/cpp/ccombobox-class_30.cpp)]"},{"pos":[46817,46880],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__resetcontent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::ResetContent","linkify":"<a name=\"ccombobox__resetcontent\"></a>  CComboBox::ResetContent","source":"<a name=\"ccombobox__resetcontent\"></a>  CComboBox::ResetContent"},{"content":"Removes all items from the list box and edit control of a combo box.","pos":[46884,46952]},{"pos":[46998,47005],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[47009,47102],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#31<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_31.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#31](../../mfc/reference/codesnippet/cpp/ccombobox-class_31.cpp)]"},{"pos":[47112,47175],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__selectstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::SelectString","linkify":"<a name=\"ccombobox__selectstring\"></a>  CComboBox::SelectString","source":"<a name=\"ccombobox__selectstring\"></a>  CComboBox::SelectString"},{"content":"Searches for a string in the list box of a combo box, and if the string is found, selects the string in the list box and copies it to the edit control.","pos":[47179,47330]},{"pos":[47421,47431],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains the zero-based index of the item before the first item to be searched.","pos":[47452,47531]},{"content":"When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by <ph id=\"ph1\">`nStartAfter`</ph>.","pos":[47532,47670],"source":" When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by `nStartAfter`."},{"content":"If –1, the entire list box is searched from the beginning.","pos":[47671,47729]},{"content":"Points to the null-terminated string that contains the prefix to search for.","pos":[47752,47828]},{"content":"The search is case independent, so this string can contain any combination of uppercase and lowercase letters.","pos":[47829,47939]},{"pos":[47949,47961],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of the selected item if the string was found.","pos":[47965,48031]},{"content":"If the search was unsuccessful, the return value is <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> and the current selection is not changed.","pos":[48032,48136],"source":" If the search was unsuccessful, the return value is **CB_ERR** and the current selection is not changed."},{"pos":[48146,48153],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A string is selected only if its initial characters (from the starting point) match the characters in the prefix string.","pos":[48157,48277]},{"pos":[48284,48430],"content":"Note that the <ph id=\"ph1\">`SelectString`</ph> and <ph id=\"ph2\">`FindString`</ph> member functions both find a string, but the <ph id=\"ph3\">`SelectString`</ph> member function also selects the string.","source":"Note that the `SelectString` and `FindString` member functions both find a string, but the `SelectString` member function also selects the string."},{"pos":[48440,48447],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[48451,48544],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#32<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_32.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#32](../../mfc/reference/codesnippet/cpp/ccombobox-class_32.cpp)]"},{"pos":[48554,48617],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__setcuebanner\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::SetCueBanner","linkify":"<a name=\"ccombobox__setcuebanner\"></a>  CComboBox::SetCueBanner","source":"<a name=\"ccombobox__setcuebanner\"></a>  CComboBox::SetCueBanner"},{"content":"Sets the cue text that is displayed for a combo box control.","pos":[48621,48681]},{"pos":[48743,48753],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[48760,48769]},{"content":"Description","pos":[48770,48781]},{"pos":[48824,48839],"content":"[in] <bpt id=\"p1\">*</bpt>lpszText<ept id=\"p1\">*</ept>","source":"[in] *lpszText*"},{"content":"Pointer to a null-terminated buffer that contains the cue text.","pos":[48840,48903]},{"pos":[48914,48926],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48930,48985],"content":"<ph id=\"ph1\">`true`</ph> if the method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the method is successful; otherwise, `false`."},{"pos":[48995,49002],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Cue text is a prompt that is displayed in the input area of the combo box control.","pos":[49006,49088]},{"content":"The cue text is displayed until the user provides input.","pos":[49089,49145]},{"pos":[49152,49339],"content":"This method sends the <bpt id=\"p1\">[</bpt>CB_SETCUEBANNER<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775897)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [CB_SETCUEBANNER](http://msdn.microsoft.com/library/windows/desktop/bb775897) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[49349,49356],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines the variable, <ph id=\"ph1\">`m_combobox`</ph>, that is used to programmatically access the combo box control.","pos":[49360,49485],"source":"The following code example defines the variable, `m_combobox`, that is used to programmatically access the combo box control."},{"content":"This variable is used in the next example.","pos":[49486,49528]},{"pos":[49535,49628],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox_s1#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_33.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox_s1#1](../../mfc/reference/codesnippet/cpp/ccombobox-class_33.h)]"},{"pos":[49638,49645],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example sets the cue banner for the combo box control.","pos":[49649,49722]},{"pos":[49729,49824],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox_s1#2<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_34.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox_s1#2](../../mfc/reference/codesnippet/cpp/ccombobox-class_34.cpp)]"},{"pos":[49834,49891],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__setcursel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::SetCurSel","linkify":"<a name=\"ccombobox__setcursel\"></a>  CComboBox::SetCurSel","source":"<a name=\"ccombobox__setcursel\"></a>  CComboBox::SetCurSel"},{"content":"Selects a string in the list box of a combo box.","pos":[49895,49943]},{"pos":[49996,50006],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the string to select.","pos":[50023,50078]},{"content":"If –1, any current selection in the list box is removed and the edit control is cleared.","pos":[50079,50167]},{"pos":[50177,50189],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of the item selected if the message is successful.","pos":[50193,50264]},{"content":"The return value is <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`nSelect`</ph> is greater than the number of items in the list or if <ph id=\"ph2\">`nSelect`</ph> is set to –1, which clears the selection.","pos":[50265,50414],"source":" The return value is **CB_ERR** if `nSelect` is greater than the number of items in the list or if `nSelect` is set to –1, which clears the selection."},{"pos":[50424,50431],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If necessary, the list box scrolls the string into view (if the list box is visible).","pos":[50435,50520]},{"content":"The text in the edit control of the combo box is changed to reflect the new selection.","pos":[50521,50607]},{"content":"Any previous selection in the list box is removed.","pos":[50608,50658]},{"pos":[50668,50675],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[50679,50772],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#33<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_35.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#33](../../mfc/reference/codesnippet/cpp/ccombobox-class_35.cpp)]"},{"pos":[50782,50851],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__setdroppedwidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::SetDroppedWidth","linkify":"<a name=\"ccombobox__setdroppedwidth\"></a>  CComboBox::SetDroppedWidth","source":"<a name=\"ccombobox__setdroppedwidth\"></a>  CComboBox::SetDroppedWidth"},{"content":"Call this function to set the minimum allowable width, in pixels, of the list box of a combo box.","pos":[50855,50952]},{"pos":[51011,51021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The minimum allowable width of the list-box portion of the combo box, in pixels.","pos":[51037,51117]},{"pos":[51127,51139],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51143,51210],"content":"If successful, the new width of the list box, otherwise <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept>.","source":"If successful, the new width of the list box, otherwise **CB_ERR**."},{"pos":[51220,51227],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[51231,51407],"content":"This function only applies to combo boxes with the <bpt id=\"p1\">[</bpt>CBS_DROPDOWN<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> or <bpt id=\"p2\">[</bpt>CBS_DROPDOWNLIST<ept id=\"p2\">](../../mfc/reference/combo-box-styles.md)</ept> style.","source":"This function only applies to combo boxes with the [CBS_DROPDOWN](../../mfc/reference/combo-box-styles.md) or [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style."},{"content":"By default, the minimum allowable width of the drop-down list box is 0.","pos":[51414,51485]},{"content":"When the list-box portion of the combo box is displayed, its width is the larger of the minimum allowable width or the combo box width.","pos":[51486,51621]},{"pos":[51631,51638],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[51642,51735],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#34<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_36.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#34](../../mfc/reference/codesnippet/cpp/ccombobox-class_36.cpp)]"},{"pos":[51745,51804],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__seteditsel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::SetEditSel","linkify":"<a name=\"ccombobox__seteditsel\"></a>  CComboBox::SetEditSel","source":"<a name=\"ccombobox__seteditsel\"></a>  CComboBox::SetEditSel"},{"content":"Selects characters in the edit control of a combo box.","pos":[51808,51862]},{"pos":[51945,51955],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the starting position.","pos":[51975,52007]},{"content":"If the starting position is set to –1, then any existing selection is removed.","pos":[52008,52086]},{"content":"Specifies the ending position.","pos":[52107,52137]},{"content":"If the ending position is set to –1, then all text from the starting position to the last character in the edit control is selected.","pos":[52138,52270]},{"pos":[52280,52292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the member function is successful; otherwise 0.","pos":[52296,52354]},{"content":"It is <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`CComboBox`</ph> has the <bpt id=\"p2\">[</bpt>CBS_DROPDOWNLIST<ept id=\"p2\">](../../mfc/reference/combo-box-styles.md)</ept> style or does not have a list box.","pos":[52355,52489],"source":" It is **CB_ERR** if `CComboBox` has the [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style or does not have a list box."},{"pos":[52499,52506],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The positions are zero-based.","pos":[52510,52539]},{"content":"To select the first character of the edit control, you specify a starting position of 0.","pos":[52540,52628]},{"content":"The ending position is for the character just after the last character to select.","pos":[52629,52710]},{"content":"For example, to select the first four characters of the edit control, you would use a starting position of 0 and an ending position of 4.","pos":[52711,52848]},{"pos":[52856,53120],"content":"[!NOTE]\n This function is not supported by the Windows **ComboBoxEx** control. For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].","leadings":["","> "],"nodes":[{"content":" This function is not supported by the Windows **ComboBoxEx** control. For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].","pos":[8,262],"nodes":[{"content":"This function is not supported by the Windows <bpt id=\"p1\">**</bpt>ComboBoxEx<ept id=\"p1\">**</ept> control.","pos":[1,70],"source":" This function is not supported by the Windows **ComboBoxEx** control."},{"content":"For more information on this control, see <bpt id=\"p1\">[</bpt>ComboBoxEx Controls<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775738)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[71,254],"source":" For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."}]}]},{"pos":[53130,53137],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[53142,53210],"content":"See the example for <bpt id=\"p1\">[</bpt>CComboBox::GetEditSel<ept id=\"p1\">](#ccombobox__geteditsel)</ept>.","source":"See the example for [CComboBox::GetEditSel](#ccombobox__geteditsel)."},{"pos":[53220,53285],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__setextendedui\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::SetExtendedUI","linkify":"<a name=\"ccombobox__setextendedui\"></a>  CComboBox::SetExtendedUI","source":"<a name=\"ccombobox__setextendedui\"></a>  CComboBox::SetExtendedUI"},{"pos":[53289,53559],"content":"Call the <ph id=\"ph1\">`SetExtendedUI`</ph> member function to select either the default user interface or the extended user interface for a combo box that has the <bpt id=\"p1\">[</bpt>CBS_DROPDOWN<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> or <bpt id=\"p2\">[</bpt>CBS_DROPDOWNLIST<ept id=\"p2\">](../../mfc/reference/combo-box-styles.md)</ept> style.","source":"Call the `SetExtendedUI` member function to select either the default user interface or the extended user interface for a combo box that has the [CBS_DROPDOWN](../../mfc/reference/combo-box-styles.md) or [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style."},{"pos":[53626,53636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>bExtended<ept id=\"p1\">*</ept>","pos":[53640,53651],"source":"*bExtended*"},{"content":"Specifies whether the combo box should use the extended user interface or the default user interface.","pos":[53655,53756]},{"content":"A value of <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> selects the extended user interface; a value of <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> selects the standard user interface.","pos":[53757,53871],"source":" A value of **TRUE** selects the extended user interface; a value of **FALSE** selects the standard user interface."},{"pos":[53881,53893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[53897,53974],"content":"<bpt id=\"p1\">**</bpt>CB_OKAY<ept id=\"p1\">**</ept> if the operation is successful, or <bpt id=\"p2\">**</bpt>CB_ERR<ept id=\"p2\">**</ept> if an error occurs.","source":"**CB_OKAY** if the operation is successful, or **CB_ERR** if an error occurs."},{"pos":[53984,53991],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The extended user interface can be identified in the following ways:","pos":[53995,54063]},{"pos":[54073,54180],"content":"Clicking the static control displays the list box only for combo boxes with the <bpt id=\"p1\">**</bpt>CBS_DROPDOWNLIST<ept id=\"p1\">**</ept> style.","source":"Clicking the static control displays the list box only for combo boxes with the **CBS_DROPDOWNLIST** style."},{"content":"Pressing the DOWN ARROW key displays the list box (F4 is disabled).","pos":[54190,54257]},{"content":"Scrolling in the static control is disabled when the item list is not visible (the arrow keys are disabled).","pos":[54264,54372]},{"pos":[54382,54389],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[54394,54468],"content":"See the example for <bpt id=\"p1\">[</bpt>CComboBox::GetExtendedUI<ept id=\"p1\">](#ccombobox__getextendedui)</ept>.","source":"See the example for [CComboBox::GetExtendedUI](#ccombobox__getextendedui)."},{"pos":[54478,54555],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__sethorizontalextent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::SetHorizontalExtent","linkify":"<a name=\"ccombobox__sethorizontalextent\"></a>  CComboBox::SetHorizontalExtent","source":"<a name=\"ccombobox__sethorizontalextent\"></a>  CComboBox::SetHorizontalExtent"},{"content":"Sets the width, in pixels, by which the list-box portion of the combo box can be scrolled horizontally.","pos":[54559,54662]},{"pos":[54727,54737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>nExtent<ept id=\"p1\">*</ept>","pos":[54741,54750],"source":"*nExtent*"},{"content":"Specifies the number of pixels by which the list-box portion of the combo box can be scrolled horizontally.","pos":[54754,54861]},{"pos":[54871,54878],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the width of the list box is smaller than this value, the horizontal scroll bar will horizontally scroll items in the list box.","pos":[54882,55012]},{"content":"If the width of the list box is equal to or greater than this value, the horizontal scroll bar is hidden or, if the combo box has the <bpt id=\"p1\">[</bpt>CBS_DISABLENOSCROLL<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> style, disabled.","pos":[55013,55226],"source":" If the width of the list box is equal to or greater than this value, the horizontal scroll bar is hidden or, if the combo box has the [CBS_DISABLENOSCROLL](../../mfc/reference/combo-box-styles.md) style, disabled."},{"pos":[55236,55243],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[55247,55340],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#35<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_37.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#35](../../mfc/reference/codesnippet/cpp/ccombobox-class_37.cpp)]"},{"pos":[55350,55411],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__setitemdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::SetItemData","linkify":"<a name=\"ccombobox__setitemdata\"></a>  CComboBox::SetItemData","source":"<a name=\"ccombobox__setitemdata\"></a>  CComboBox::SetItemData"},{"content":"Sets the 32-bit value associated with the specified item in a combo box.","pos":[55415,55487]},{"pos":[55574,55584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains a zero-based index to the item to set.","pos":[55600,55647]},{"content":"Contains the new value to associate with the item.","pos":[55670,55720]},{"pos":[55730,55742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55746,55776],"content":"<bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if an error occurs.","source":"**CB_ERR** if an error occurs."},{"pos":[55786,55793],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[55797,55876],"content":"Use the <ph id=\"ph1\">`SetItemDataPtr`</ph> member function if the 32-bit item is to be a pointer.","source":"Use the `SetItemDataPtr` member function if the 32-bit item is to be a pointer."},{"pos":[55886,55893],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[55897,55990],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#36<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_38.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#36](../../mfc/reference/codesnippet/cpp/ccombobox-class_38.cpp)]"},{"pos":[56000,56067],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__setitemdataptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::SetItemDataPtr","linkify":"<a name=\"ccombobox__setitemdataptr\"></a>  CComboBox::SetItemDataPtr","source":"<a name=\"ccombobox__setitemdataptr\"></a>  CComboBox::SetItemDataPtr"},{"pos":[56071,56185],"content":"Sets the 32-bit value associated with the specified item in a combo box to be the specified pointer ( <bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>).","source":"Sets the 32-bit value associated with the specified item in a combo box to be the specified pointer ( **void\\***)."},{"pos":[56266,56276],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Contains a zero-based index to the item.","pos":[56292,56332]},{"content":"Contains the pointer to associate with the item.","pos":[56350,56398]},{"pos":[56408,56420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56424,56454],"content":"<bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if an error occurs.","source":"**CB_ERR** if an error occurs."},{"pos":[56464,56471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This pointer remains valid for the life of the combo box, even though the item's relative position within the combo box might change as items are added or removed.","pos":[56475,56638]},{"content":"Hence, the item's index within the box can change, but the pointer remains reliable.","pos":[56639,56723]},{"pos":[56733,56740],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[56744,56837],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#37<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_39.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#37](../../mfc/reference/codesnippet/cpp/ccombobox-class_39.cpp)]"},{"pos":[56847,56912],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__setitemheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::SetItemHeight","linkify":"<a name=\"ccombobox__setitemheight\"></a>  CComboBox::SetItemHeight","source":"<a name=\"ccombobox__setitemheight\"></a>  CComboBox::SetItemHeight"},{"pos":[56916,57078],"content":"Call the <ph id=\"ph1\">`SetItemHeight`</ph> member function to set the height of list items in a combo box or the height of the edit-control (or static-text) portion of a combo box.","source":"Call the `SetItemHeight` member function to set the height of list items in a combo box or the height of the edit-control (or static-text) portion of a combo box."},{"pos":[57164,57174],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies whether the height of list items or the height of the edit-control (or static-text) portion of the combo box is set.","pos":[57190,57316]},{"pos":[57323,57579],"content":"If the combo box has the <bpt id=\"p1\">[</bpt>CBS_OWNERDRAWVARIABLE<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> style, <ph id=\"ph1\">`nIndex`</ph> specifies the zero-based index of the list item whose height is to be set; otherwise, <ph id=\"ph2\">`nIndex`</ph> must be 0 and the height of all list items will be set.","source":"If the combo box has the [CBS_OWNERDRAWVARIABLE](../../mfc/reference/combo-box-styles.md) style, `nIndex` specifies the zero-based index of the list item whose height is to be set; otherwise, `nIndex` must be 0 and the height of all list items will be set."},{"pos":[57586,57689],"content":"If <ph id=\"ph1\">`nIndex`</ph> is –1, the height of the edit-control or static-text portion of the combo box is to be set.","source":"If `nIndex` is –1, the height of the edit-control or static-text portion of the combo box is to be set."},{"content":"Specifies the height, in pixels, of the combo-box component identified by <ph id=\"ph1\">`nIndex`</ph>.","pos":[57714,57797],"source":" Specifies the height, in pixels, of the combo-box component identified by `nIndex`."},{"pos":[57807,57819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57823,57881],"content":"<bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if the index or height is invalid; otherwise 0.","source":"**CB_ERR** if the index or height is invalid; otherwise 0."},{"pos":[57891,57898],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the edit-control (or static-text) portion of the combo box is set independently of the height of the list items.","pos":[57902,58028]},{"content":"An application must ensure that the height of the edit-control (or static-text) portion is not smaller than the height of a particular list-box item.","pos":[58029,58178]},{"pos":[58188,58195],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[58199,58292],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#38<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_40.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#38](../../mfc/reference/codesnippet/cpp/ccombobox-class_40.cpp)]"},{"pos":[58302,58359],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__setlocale\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::SetLocale","linkify":"<a name=\"ccombobox__setlocale\"></a>  CComboBox::SetLocale","source":"<a name=\"ccombobox__setlocale\"></a>  CComboBox::SetLocale"},{"content":"Sets the locale identifier for this combo box.","pos":[58363,58409]},{"pos":[58467,58477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The new locale identifier (LCID) value to set for the combo box.","pos":[58497,58561]},{"pos":[58571,58583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The previous locale identifier (LCID) value for this combo box.","pos":[58587,58650]},{"pos":[58660,58667],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <bpt id=\"p1\">**</bpt>SetLocale<ept id=\"p1\">**</ept> is not called, the default locale is obtained from the system.","pos":[58671,58750],"source":"If **SetLocale** is not called, the default locale is obtained from the system."},{"content":"This system default locale can be modified by using Control Panel's Regional (or International) application.","pos":[58751,58859]},{"pos":[58869,58876],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[58880,58973],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#39<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_41.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#39](../../mfc/reference/codesnippet/cpp/ccombobox-class_41.cpp)]"},{"pos":[58983,59058],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__setminvisibleitems\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::SetMinVisibleItems","linkify":"<a name=\"ccombobox__setminvisibleitems\"></a>  CComboBox::SetMinVisibleItems","source":"<a name=\"ccombobox__setminvisibleitems\"></a>  CComboBox::SetMinVisibleItems"},{"content":"Sets the minimum number of visible items in the drop-down list of the current combo box control.","pos":[59062,59158]},{"pos":[59225,59235],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[59242,59251]},{"content":"Description","pos":[59252,59263]},{"pos":[59306,59324],"content":"[in] <ph id=\"ph1\">`iMinVisible`</ph>","source":"[in] `iMinVisible`"},{"content":"Specifies the minimum number of visible items.","pos":[59325,59371]},{"pos":[59382,59394],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59398,59454],"content":"<ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method is successful; otherwise, `false`."},{"pos":[59464,59471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[59475,59663],"content":"This method sends the <bpt id=\"p1\">[</bpt>CB_SETMINVISIBLE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775915)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [CB_SETMINVISIBLE](http://msdn.microsoft.com/library/windows/desktop/bb775915) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[59673,59680],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example defines the variable, <ph id=\"ph1\">`m_combobox`</ph>, that is used to programmatically access the combo box control.","pos":[59684,59809],"source":"The following code example defines the variable, `m_combobox`, that is used to programmatically access the combo box control."},{"content":"This variable is used in the next example.","pos":[59810,59852]},{"pos":[59859,59952],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox_s1#1<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_33.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox_s1#1](../../mfc/reference/codesnippet/cpp/ccombobox-class_33.h)]"},{"pos":[59962,59969],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example inserts 20 items into the drop-down list of a combo box control.","pos":[59973,60064]},{"content":"Then it specifies that a minimum of 10 items be displayed when a user presses the drop-down arrow.","pos":[60065,60163]},{"pos":[60170,60265],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox_s1#2<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_34.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox_s1#2](../../mfc/reference/codesnippet/cpp/ccombobox-class_34.cpp)]"},{"pos":[60275,60336],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__settopindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::SetTopIndex","linkify":"<a name=\"ccombobox__settopindex\"></a>  CComboBox::SetTopIndex","source":"<a name=\"ccombobox__settopindex\"></a>  CComboBox::SetTopIndex"},{"content":"Ensures that a particular item is visible in the list-box portion of the combo box.","pos":[60340,60423]},{"pos":[60477,60487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Specifies the zero-based index of the list-box item.","pos":[60503,60555]},{"pos":[60565,60577],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60581,60634],"content":"Zero if successful, or <bpt id=\"p1\">**</bpt>CB_ERR<ept id=\"p1\">**</ept> if an error occurs.","source":"Zero if successful, or **CB_ERR** if an error occurs."},{"pos":[60644,60651],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[60655,60811],"content":"The system scrolls the list box until either the item specified by <ph id=\"ph1\">`nIndex`</ph> appears at the top of the list box or the maximum scroll range has been reached.","source":"The system scrolls the list box until either the item specified by `nIndex` appears at the top of the list box or the maximum scroll range has been reached."},{"pos":[60821,60828],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[60832,60925],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_CComboBox#40<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/ccombobox-class_42.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_CComboBox#40](../../mfc/reference/codesnippet/cpp/ccombobox-class_42.cpp)]"},{"pos":[60935,60998],"content":"<bpt id=\"p1\">&lt;a name=\"ccombobox__showdropdown\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComboBox::ShowDropDown","linkify":"<a name=\"ccombobox__showdropdown\"></a>  CComboBox::ShowDropDown","source":"<a name=\"ccombobox__showdropdown\"></a>  CComboBox::ShowDropDown"},{"pos":[61002,61183],"content":"Shows or hides the list box of a combo box that has the <bpt id=\"p1\">[</bpt>CBS_DROPDOWN<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> or <bpt id=\"p2\">[</bpt>CBS_DROPDOWNLIST<ept id=\"p2\">](../../mfc/reference/combo-box-styles.md)</ept> style.","source":"Shows or hides the list box of a combo box that has the [CBS_DROPDOWN](../../mfc/reference/combo-box-styles.md) or [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style."},{"pos":[61248,61258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>bShowIt<ept id=\"p1\">*</ept>","pos":[61262,61271],"source":"*bShowIt*"},{"content":"Specifies whether the drop-down list box is to be shown or hidden.","pos":[61275,61341]},{"content":"A value of <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> shows the list box.","pos":[61342,61381],"source":" A value of **TRUE** shows the list box."},{"content":"A value of <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> hides the list box.","pos":[61382,61422],"source":" A value of **FALSE** hides the list box."},{"pos":[61432,61439],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, a combo box of this style will show the list box.","pos":[61443,61504]},{"pos":[61511,61638],"content":"This member function has no effect on a combo box created with the <bpt id=\"p1\">[</bpt>CBS_SIMPLE<ept id=\"p1\">](../../mfc/reference/combo-box-styles.md)</ept> style.","source":"This member function has no effect on a combo box created with the [CBS_SIMPLE](../../mfc/reference/combo-box-styles.md) style."},{"pos":[61648,61655],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[61660,61738],"content":"See the example for <bpt id=\"p1\">[</bpt>CComboBox::GetDroppedState<ept id=\"p1\">](#ccombobox__getdroppedstate)</ept>.","source":"See the example for [CComboBox::GetDroppedState](#ccombobox__getdroppedstate)."},{"pos":[61747,61755],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample CTRLBARS<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[61759,61810],"source":"[MFC Sample CTRLBARS](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[61813,61862],"source":" [CWnd Class](../../mfc/reference/cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[61865,61914],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[61917,61966],"source":" [CWnd Class](../../mfc/reference/cwnd-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CButton Class<ept id=\"p1\">](../../mfc/reference/cbutton-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[61969,62024],"source":" [CButton Class](../../mfc/reference/cbutton-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CEdit Class<ept id=\"p1\">](../../mfc/reference/cedit-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[62027,62078],"source":" [CEdit Class](../../mfc/reference/cedit-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CListBox Class<ept id=\"p1\">](../../mfc/reference/clistbox-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[62081,62138],"source":" [CListBox Class](../../mfc/reference/clistbox-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CScrollBar Class<ept id=\"p1\">](../../mfc/reference/cscrollbar-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[62141,62202],"source":" [CScrollBar Class](../../mfc/reference/cscrollbar-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CStatic Class<ept id=\"p1\">](../../mfc/reference/cstatic-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[62205,62260],"source":" [CStatic Class](../../mfc/reference/cstatic-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CDialog Class<ept id=\"p1\">](../../mfc/reference/cdialog-class.md)</ept>","pos":[62263,62317],"source":" [CDialog Class](../../mfc/reference/cdialog-class.md)"}],"content":"---\ntitle: \"CComboBox Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CComboBox\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"combo boxes, CComboBox objects\"\n  - \"CComboBox class\"\nms.assetid: 4e73b5df-0d2e-4658-9706-38133fb10513\ncaps.latest.revision: 25\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComboBox Class\nProvides the functionality of a Windows combo box.  \n  \n## Syntax  \n  \n```  \nclass CComboBox : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComboBox::CComboBox](#ccombobox__ccombobox)|Constructs a `CComboBox` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComboBox::AddString](#ccombobox__addstring)|Adds a string to the end of the list in the list box of a combo box, or at the sorted position for list boxes with the **CBS_SORT** style.|  \n|[CComboBox::Clear](#ccombobox__clear)|Deletes (clears) the current selection, if any, in the edit control.|  \n|[CComboBox::CompareItem](#ccombobox__compareitem)|Called by the framework to determine the relative position of a new list item in a sorted owner-drawn combo box.|  \n|[CComboBox::Copy](#ccombobox__copy)|Copies the current selection, if any, onto the Clipboard in **CF_TEXT** format.|  \n|[CComboBox::Create](#ccombobox__create)|Creates the combo box and attaches it to the `CComboBox` object.|  \n|[CComboBox::Cut](#ccombobox__cut)|Deletes (cuts) the current selection, if any, in the edit control and copies the deleted text onto the Clipboard in **CF_TEXT** format.|  \n|[CComboBox::DeleteItem](#ccombobox__deleteitem)|Called by the framework when a list item is deleted from an owner-drawn combo box.|  \n|[CComboBox::DeleteString](#ccombobox__deletestring)|Deletes a string from the list box of a combo box.|  \n|[CComboBox::Dir](#ccombobox__dir)|Adds a list of file names to the list box of a combo box.|  \n|[CComboBox::DrawItem](#ccombobox__drawitem)|Called by the framework when a visual aspect of an owner-drawn combo box changes.|  \n|[CComboBox::FindString](#ccombobox__findstring)|Finds the first string that contains the specified prefix in the list box of a combo box.|  \n|[CComboBox::FindStringExact](#ccombobox__findstringexact)|Finds the first list-box string (in a combo box) that matches the specified string.|  \n|[CComboBox::GetComboBoxInfo](#ccombobox__getcomboboxinfo)|Retrieves information about the `CComboBox` object.|  \n|[CComboBox::GetCount](#ccombobox__getcount)|Retrieves the number of items in the list box of a combo box.|  \n|[CComboBox::GetCueBanner](#ccombobox__getcuebanner)|Gets the cue text that is displayed for a combo box control.|  \n|[CComboBox::GetCurSel](#ccombobox__getcursel)|Retrieves the index of the currently selected item, if any, in the list box of a combo box.|  \n|[CComboBox::GetDroppedControlRect](#ccombobox__getdroppedcontrolrect)|Retrieves the screen coordinates of the visible (dropped down) list box of a drop-down combo box.|  \n|[CComboBox::GetDroppedState](#ccombobox__getdroppedstate)|Determines whether the list box of a drop-down combo box is visible (dropped down).|  \n|[CComboBox::GetDroppedWidth](#ccombobox__getdroppedwidth)|Retrieves the minimum allowed width for the drop-down list-box portion of a combo box.|  \n|[CComboBox::GetEditSel](#ccombobox__geteditsel)|Gets the starting and ending character positions of the current selection in the edit control of a combo box.|  \n|[CComboBox::GetExtendedUI](#ccombobox__getextendedui)|Determines whether a combo box has the default user interface or the extended user interface.|  \n|[CComboBox::GetHorizontalExtent](#ccombobox__gethorizontalextent)|Returns the width in pixels that the list-box portion of the combo box can be scrolled horizontally.|  \n|[CComboBox::GetItemData](#ccombobox__getitemdata)|Retrieves the application-supplied 32-bit value associated with the specified combo-box item.|  \n|[CComboBox::GetItemDataPtr](#ccombobox__getitemdataptr)|Retrieves the application-supplied 32-bit pointer that is associated with the specified combo-box item.|  \n|[CComboBox::GetItemHeight](#ccombobox__getitemheight)|Retrieves the height of list items in a combo box.|  \n|[CComboBox::GetLBText](#ccombobox__getlbtext)|Gets a string from the list box of a combo box.|  \n|[CComboBox::GetLBTextLen](#ccombobox__getlbtextlen)|Gets the length of a string in the list box of a combo box.|  \n|[CComboBox::GetLocale](#ccombobox__getlocale)|Retrieves the locale identifier for a combo box.|  \n|[CComboBox::GetMinVisible](#ccombobox__getminvisible)|Gets the minimum number of visible items in the drop-down list of the current combo box.|  \n|[CComboBox::GetTopIndex](#ccombobox__gettopindex)|Returns the index of the first visible item in the list-box portion of the combo box.|  \n|[CComboBox::InitStorage](#ccombobox__initstorage)|Preallocates blocks of memory for items and strings in the list-box portion of the combo box.|  \n|[CComboBox::InsertString](#ccombobox__insertstring)|Inserts a string into the list box of a combo box.|  \n|[CComboBox::LimitText](#ccombobox__limittext)|Limits the length of the text that the user can enter into the edit control of a combo box.|  \n|[CComboBox::MeasureItem](#ccombobox__measureitem)|Called by the framework to determine combo box dimensions when an owner-drawn combo box is created.|  \n|[CComboBox::Paste](#ccombobox__paste)|Inserts the data from the Clipboard into the edit control at the current cursor position. Data is inserted only if the Clipboard contains data in **CF_TEXT** format.|  \n|[CComboBox::ResetContent](#ccombobox__resetcontent)|Removes all items from the list box and edit control of a combo box.|  \n|[CComboBox::SelectString](#ccombobox__selectstring)|Searches for a string in the list box of a combo box and, if the string is found, selects the string in the list box and copies the string to the edit control.|  \n|[CComboBox::SetCueBanner](#ccombobox__setcuebanner)|Sets the cue text that is displayed for a combo box control.|  \n|[CComboBox::SetCurSel](#ccombobox__setcursel)|Selects a string in the list box of a combo box.|  \n|[CComboBox::SetDroppedWidth](#ccombobox__setdroppedwidth)|Sets the minimum allowed width for the drop-down list-box portion of a combo box.|  \n|[CComboBox::SetEditSel](#ccombobox__seteditsel)|Selects characters in the edit control of a combo box.|  \n|[CComboBox::SetExtendedUI](#ccombobox__setextendedui)|Selects either the default user interface or the extended user interface for a combo box that has the **CBS_DROPDOWN** or **CBS_DROPDOWNLIST** style.|  \n|[CComboBox::SetHorizontalExtent](#ccombobox__sethorizontalextent)|Sets the width in pixels that the list-box portion of the combo box can be scrolled horizontally.|  \n|[CComboBox::SetItemData](#ccombobox__setitemdata)|Sets the 32-bit value associated with the specified item in a combo box.|  \n|[CComboBox::SetItemDataPtr](#ccombobox__setitemdataptr)|Sets the 32-bit pointer associated with the specified item in a combo box.|  \n|[CComboBox::SetItemHeight](#ccombobox__setitemheight)|Sets the height of list items in a combo box or the height of the edit-control (or static-text) portion of a combo box.|  \n|[CComboBox::SetLocale](#ccombobox__setlocale)|Sets the locale identifier for a combo box.|  \n|[CComboBox::SetMinVisibleItems](#ccombobox__setminvisibleitems)|Sets the minimum number of visible items in the drop-down list of the current combo box.|  \n|[CComboBox::SetTopIndex](#ccombobox__settopindex)|Tells the list-box portion of the combo box to display the item with the specified index at the top.|  \n|[CComboBox::ShowDropDown](#ccombobox__showdropdown)|Shows or hides the list box of a combo box that has the **CBS_DROPDOWN** or **CBS_DROPDOWNLIST** style.|  \n  \n## Remarks  \n A combo box consists of a list box combined with either a static control or edit control. The list-box portion of the control may be displayed at all times or may only drop down when the user selects the drop-down arrow next to the control.  \n  \n The currently selected item (if any) in the list box is displayed in the static or edit control. In addition, if the combo box has the drop-down list style, the user can type the initial character of one of the items in the list, and the list box, if visible, will highlight the next item with that initial character.  \n  \n The following table compares the three combo-box [styles](../../mfc/reference/combo-box-styles.md).  \n  \n|Style|When is list box visible|Static or edit control|  \n|-----------|-------------------------------|-----------------------------|  \n|Simple|Always|Edit|  \n|Drop-down|When dropped down|Edit|  \n|Drop-down list|When dropped down|Static|  \n  \n You can create a `CComboBox` object from either a dialog template or directly in your code. In both cases, first call the constructor `CComboBox` to construct the `CComboBox` object; then call the [Create](#ccombobox__create) member function to create the control and attach it to the `CComboBox` object.  \n  \n If you want to handle Windows notification messages sent by a combo box to its parent (usually a class derived from `CDialog`), add a message-map entry and message-handler member function to the parent class for each message.  \n  \n Each message-map entry takes the following form:  \n  \n **ON_**Notification **(**`id`**,**`memberFxn`**)**  \n  \n where `id` specifies the child-window ID of the combo-box control sending the notification and `memberFxn` is the name of the parent member function you have written to handle the notification.  \n  \n The parent's function prototype is as follows:  \n  \n **afx_msg** `void` `memberFxn` **( );**  \n  \n The order in which certain notifications will be sent cannot be predicted. In particular, a **CBN_SELCHANGE** notification may occur either before or after a **CBN_CLOSEUP** notification.  \n  \n Potential message-map entries are the following:  \n  \n- **ON_CBN_CLOSEUP** (Windows 3.1 and later.) The list box of a combo box has closed. This notification message is not sent for a combo box that has the [CBS_SIMPLE](../../mfc/reference/combo-box-styles.md) style.  \n  \n- **ON_CBN_DBLCLK** The user double-clicks a string in the list box of a combo box. This notification message is only sent for a combo box with the **CBS_SIMPLE** style. For a combo box with the [CBS_DROPDOWN](../../mfc/reference/combo-box-styles.md) or [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style, a double-click cannot occur because a single click hides the list box.  \n  \n- **ON_CBN_DROPDOWN** The list box of a combo box is about to drop down (be made visible). This notification message can occur only for a combo box with the **CBS_DROPDOWN** or **CBS_DROPDOWNLIST** style.  \n  \n- **ON_CBN_EDITCHANGE** The user has taken an action that may have altered the text in the edit-control portion of a combo box. Unlike the **CBN_EDITUPDATE** message, this message is sent after Windows updates the screen. It is not sent if the combo box has the **CBS_DROPDOWNLIST** style.  \n  \n- **ON_CBN_EDITUPDATE** The edit-control portion of a combo box is about to display altered text. This notification message is sent after the control has formatted the text but before it displays the text. It is not sent if the combo box has the **CBS_DROPDOWNLIST** style.  \n  \n- **ON_CBN_ERRSPACE** The combo box cannot allocate enough memory to meet a specific request.  \n  \n- **ON_CBN_SELENDCANCEL** (Windows 3.1 and later.) Indicates the user's selection should be canceled. The user clicks an item and then clicks another window or control to hide the list box of a combo box. This notification message is sent before the **CBN_CLOSEUP** notification message to indicate that the user's selection should be ignored. The **CBN_SELENDCANCEL** or **CBN_SELENDOK** notification message is sent even if the **CBN_CLOSEUP** notification message is not sent (as in the case of a combo box with the **CBS_SIMPLE** style).  \n  \n- **ON_CBN_SELENDOK** The user selects an item and then either presses the ENTER key or clicks the DOWN ARROW key to hide the list box of a combo box. This notification message is sent before the **CBN_CLOSEUP** message to indicate that the user's selection should be considered valid. The **CBN_SELENDCANCEL** or **CBN_SELENDOK** notification message is sent even if the **CBN_CLOSEUP** notification message is not sent (as in the case of a combo box with the **CBS_SIMPLE** style).  \n  \n- **ON_CBN_KILLFOCUS** The combo box is losing the input focus.  \n  \n- **ON_CBN_SELCHANGE** The selection in the list box of a combo box is about to be changed as a result of the user either clicking in the list box or changing the selection by using the arrow keys. When processing this message, the text in the edit control of the combo box can only be retrieved via `GetLBText` or another similar function. `GetWindowText` cannot be used.  \n  \n- **ON_CBN_SETFOCUS** The combo box receives the input focus.  \n  \n If you create a `CComboBox` object within a dialog box (through a dialog resource), the `CComboBox` object is automatically destroyed when the user closes the dialog box.  \n  \n If you embed a `CComboBox` object within another window object, you do not need to destroy it. If you create the `CComboBox` object on the stack, it is destroyed automatically. If you create the `CComboBox` object on the heap by using the **new** function, you must call **delete** on the object to destroy it when the Windows combo box is destroyed.  \n  \n **Note** If you want to handle `WM_KEYDOWN` and `WM_CHAR` messages, you have to subclass the combo box's edit and list box controls, derive classes from `CEdit` and `CListBox`, and add handlers for those messages to the derived classes. For more information, see [http://support.microsoft.com/default.aspxscid=kb;en-us;Q174667](http://support.microsoft.com/default.aspxscid=kb;en-us;q174667) and [CWnd::SubclassWindow](../../mfc/reference/cwnd-class.md#cwnd__subclasswindow).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n `CComboBox`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"ccombobox__addstring\"></a>  CComboBox::AddString  \n Adds a string to the list box of a combo box.  \n  \n```  \nint AddString(LPCTSTR lpszString);\n```  \n  \n### Parameters  \n `lpszString`  \n Points to the null-terminated string that is to be added.  \n  \n### Return Value  \n If the return value is greater than or equal to 0, it is the zero-based index to the string in the list box. The return value is **CB_ERR** if an error occurs; the return value is **CB_ERRSPACE** if insufficient space is available to store the new string.  \n  \n### Remarks  \n If the list box was not created with the [CBS_SORT](../../mfc/reference/combo-box-styles.md) style, the string is added to the end of the list. Otherwise, the string is inserted into the list, and the list is sorted.  \n  \n> [!NOTE]\n>  This function is not supported by the Windows **ComboBoxEx** control. For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n To insert a string into a specific location within the list, use the [InsertString](#ccombobox__insertstring) member function.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#3](../../mfc/reference/codesnippet/cpp/ccombobox-class_1.cpp)]  \n  \n##  <a name=\"ccombobox__ccombobox\"></a>  CComboBox::CComboBox  \n Constructs a `CComboBox` object.  \n  \n```  \nCComboBox();\n```  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#1](../../mfc/reference/codesnippet/cpp/ccombobox-class_2.cpp)]  \n  \n##  <a name=\"ccombobox__clear\"></a>  CComboBox::Clear  \n Deletes (clears) the current selection, if any, in the edit control of the combo box.  \n  \n```  \nvoid Clear();\n```  \n  \n### Remarks  \n To delete the current selection and place the deleted contents onto the Clipboard, use the [Cut](#ccombobox__cut) member function.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#4](../../mfc/reference/codesnippet/cpp/ccombobox-class_3.cpp)]  \n  \n##  <a name=\"ccombobox__compareitem\"></a>  CComboBox::CompareItem  \n Called by the framework to determine the relative position of a new item in the list-box portion of a sorted owner-draw combo box.  \n  \n```  \nvirtual int CompareItem(LPCOMPAREITEMSTRUCT lpCompareItemStruct);\n```  \n  \n### Parameters  \n `lpCompareItemStruct`  \n A long pointer to a [COMPAREITEMSTRUCT](../../mfc/reference/compareitemstruct-structure.md) structure.  \n  \n### Return Value  \n Indicates the relative position of the two items described in the `COMPAREITEMSTRUCT` structure. It can be any of the following values:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|– 1|Item 1 sorts before item 2.|  \n|0|Item 1 and item 2 sort the same.|  \n|1|Item 1 sorts after item 2.|  \n  \n See [CWnd::OnCompareItem](../../mfc/reference/cwnd-class.md#cwnd__oncompareitem) for a description of `COMPAREITEMSTRUCT`.  \n  \n### Remarks  \n By default, this member function does nothing. If you create an owner-draw combo box with the **LBS_SORT** style, you must override this member function to assist the framework in sorting new items added to the list box.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#5](../../mfc/reference/codesnippet/cpp/ccombobox-class_4.cpp)]  \n  \n##  <a name=\"ccombobox__copy\"></a>  CComboBox::Copy  \n Copies the current selection, if any, in the edit control of the combo box onto the Clipboard in **CF_TEXT** format.  \n  \n```  \nvoid Copy();\n```  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#6](../../mfc/reference/codesnippet/cpp/ccombobox-class_5.cpp)]  \n  \n##  <a name=\"ccombobox__create\"></a>  CComboBox::Create  \n Creates the combo box and attaches it to the `CComboBox` object.  \n  \n```  \nvirtual BOOL Create(\n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwStyle`  \n Specifies the style of the combo box. Apply any combination of [combo-box styles](../../mfc/reference/combo-box-styles.md) to the box.  \n  \n `rect`  \n Points to the position and size of the combo box. Can be a [RECT structure](../../mfc/reference/rect-structure1.md) or a `CRect` object.  \n  \n `pParentWnd`  \n Specifies the combo box's parent window (usually a `CDialog`). It must not be **NULL**.  \n  \n `nID`  \n Specifies the combo box's control ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n You construct a `CComboBox` object in two steps. First, call the constructor and then call **Create**, which creates the Windows combo box and attaches it to the `CComboBox` object.  \n  \n When **Create** executes, Windows sends the [WM_NCCREATE](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [WM_CREATE](../../mfc/reference/cwnd-class.md#cwnd__oncreate), [WM_NCCALCSIZE](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), and [WM_GETMINMAXINFO](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) messages to the combo box.  \n  \n These messages are handled by default by the [OnNcCreate](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [OnCreate](../../mfc/reference/cwnd-class.md#cwnd__oncreate), [OnNcCalcSize](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), and [OnGetMinMaxInfo](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) member functions in the `CWnd` base class. To extend the default message handling, derive a class from `CComboBox`, add a message map to the new class, and override the preceding message-handler member functions. Override `OnCreate`, for example, to perform needed initialization for a new class.  \n  \n Apply the following [window styles](../../mfc/reference/window-styles.md) to a combo-box control. :  \n  \n- **WS_CHILD** Always  \n  \n- **WS_VISIBLE** Usually  \n  \n- **WS_DISABLED** Rarely  \n  \n- **WS_VSCROLL** To add vertical scrolling for the list box in the combo box  \n  \n- **WS_HSCROLL** To add horizontal scrolling for the list box in the combo box  \n  \n- **WS_GROUP** To group controls  \n  \n- **WS_TABSTOP** To include the combo box in the tabbing order  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#2](../../mfc/reference/codesnippet/cpp/ccombobox-class_6.cpp)]  \n  \n##  <a name=\"ccombobox__cut\"></a>  CComboBox::Cut  \n Deletes (cuts) the current selection, if any, in the combo-box edit control and copies the deleted text onto the Clipboard in **CF_TEXT** format.  \n  \n```  \nvoid Cut();\n```  \n  \n### Remarks  \n To delete the current selection without placing the deleted text onto the Clipboard, call the [Clear](#ccombobox__clear) member function.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#7](../../mfc/reference/codesnippet/cpp/ccombobox-class_7.cpp)]  \n  \n##  <a name=\"ccombobox__deleteitem\"></a>  CComboBox::DeleteItem  \n Called by the framework when the user deletes an item from an owner-draw `CComboBox` object or destroys the combo box.  \n  \n```  \nvirtual void DeleteItem(LPDELETEITEMSTRUCT lpDeleteItemStruct);\n```  \n  \n### Parameters  \n `lpDeleteItemStruct`  \n A long pointer to a Windows [DELETEITEMSTRUCT](../../mfc/reference/deleteitemstruct-structure.md) structure that contains information about the deleted item. See [CWnd::OnDeleteItem](../../mfc/reference/cwnd-class.md#cwnd__ondeleteitem) for a description of this structure.  \n  \n### Remarks  \n The default implementation of this function does nothing. Override this function to redraw the combo box as needed.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#8](../../mfc/reference/codesnippet/cpp/ccombobox-class_8.cpp)]  \n  \n##  <a name=\"ccombobox__deletestring\"></a>  CComboBox::DeleteString  \n Deletes the item in position `nIndex` from the combo box.  \n  \n```  \nint DeleteString(UINT nIndex);\n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the index to the string that is to be deleted.  \n  \n### Return Value  \n If the return value is greater than or equal to 0, then it is a count of the strings remaining in the list. The return value is **CB_ERR** if `nIndex` specifies an index greater than the number of items in the list.  \n  \n### Remarks  \n All items following `nIndex` now move down one position. For example, if a combo box contains two items, deleting the first item will cause the remaining item to now be in the first position. `nIndex`=0 for the item in the first position.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#9](../../mfc/reference/codesnippet/cpp/ccombobox-class_9.cpp)]  \n  \n##  <a name=\"ccombobox__dir\"></a>  CComboBox::Dir  \n Adds a list of filenames or drives to the list box of a combo box.  \n  \n```  \nint Dir(\n    UINT attr,  \n    LPCTSTR lpszWildCard);\n```  \n  \n### Parameters  \n `attr`  \n Can be any combination of the `enum` values described in [CFile::GetStatus](../../mfc/reference/cfile-class.md#cfile__getstatus) or any combination of the following values:  \n  \n- **DDL_READWRITE** File can be read from or written to.  \n  \n- **DDL_READONLY** File can be read from but not written to.  \n  \n- **DDL_HIDDEN** File is hidden and does not appear in a directory listing.  \n  \n- **DDL_SYSTEM** File is a system file.  \n  \n- **DDL_DIRECTORY** The name specified by `lpszWildCard` specifies a directory.  \n  \n- **DDL_ARCHIVE** File has been archived.  \n  \n- **DDL_DRIVES** Include all drives that match the name specified by `lpszWildCard`.  \n  \n- **DDL_EXCLUSIVE** Exclusive flag. If the exclusive flag is set, only files of the specified type are listed. Otherwise, files of the specified type are listed in addition to \"normal\" files.  \n  \n `lpszWildCard`  \n Points to a file-specification string. The string can contain wildcards (for example, *.\\*).  \n  \n### Return Value  \n If the return value is greater than or equal to 0, it is the zero-based index of the last filename added to the list. The return value is **CB_ERR** if an error occurs; the return value is **CB_ERRSPACE** if insufficient space is available to store the new strings.  \n  \n### Remarks  \n This function is not supported by the Windows **ComboBoxEx** control. For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#10](../../mfc/reference/codesnippet/cpp/ccombobox-class_10.cpp)]  \n  \n##  <a name=\"ccombobox__drawitem\"></a>  CComboBox::DrawItem  \n Called by the framework when a visual aspect of an owner-draw combo box changes.  \n  \n```  \nvirtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);\n```  \n  \n### Parameters  \n `lpDrawItemStruct`  \n A pointer to a [DRAWITEMSTRUCT](../../mfc/reference/drawitemstruct-structure.md) structure that contains information about the type of drawing required.  \n  \n### Remarks  \n The **itemAction** member of the `DRAWITEMSTRUCT` structure defines the drawing action that is to be performed. See [CWnd::OnDrawItem](../../mfc/reference/cwnd-class.md#cwnd__ondrawitem) for a description of this structure.  \n  \n By default, this member function does nothing. Override this member function to implement drawing for an owner-draw `CComboBox` object. Before this member function terminates, the application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct`.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#11](../../mfc/reference/codesnippet/cpp/ccombobox-class_11.cpp)]  \n  \n##  <a name=\"ccombobox__findstring\"></a>  CComboBox::FindString  \n Finds, but doesn't select, the first string that contains the specified prefix in the list box of a combo box.  \n  \n```  \nint FindString(\n    int nStartAfter,  \n    LPCTSTR lpszString) const;\n\n \n```  \n  \n### Parameters  \n `nStartAfter`  \n Contains the zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by `nStartAfter`. If –1, the entire list box is searched from the beginning.  \n  \n `lpszString`  \n Points to the null-terminated string that contains the prefix to search for. The search is case independent, so this string can contain any combination of uppercase and lowercase letters.  \n  \n### Return Value  \n If the return value is greater than or equal to 0, it is the zero-based index of the matching item. It is **CB_ERR** if the search was unsuccessful.  \n  \n### Remarks  \n This function is not supported by the Windows **ComboBoxEx** control. For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#12](../../mfc/reference/codesnippet/cpp/ccombobox-class_12.cpp)]  \n  \n##  <a name=\"ccombobox__findstringexact\"></a>  CComboBox::FindStringExact  \n Call the `FindStringExact` member function to find the first list-box string (in a combo box) that matches the string specified in `lpszFind`.  \n  \n```  \nint FindStringExact(\n    int nIndexStart,  \n    LPCTSTR lpszFind) const;\n\n \n```  \n  \n### Parameters  \n `nIndexStart`  \n Specifies the zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by `nIndexStart`. If `nIndexStart` is –1, the entire list box is searched from the beginning.  \n  \n `lpszFind`  \n Points to the null-terminated string to search for. This string can contain a complete filename, including the extension. The search is not case sensitive, so this string can contain any combination of uppercase and lowercase letters.  \n  \n### Return Value  \n The zero-based index of the matching item, or **CB_ERR** if the search was unsuccessful.  \n  \n### Remarks  \n If the combo box was created with an owner-draw style but without the [CBS_HASSTRINGS](../../mfc/reference/combo-box-styles.md) style, `FindStringExact` attempts to match the doubleword value against the value of `lpszFind`.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#13](../../mfc/reference/codesnippet/cpp/ccombobox-class_13.cpp)]  \n  \n##  <a name=\"ccombobox__getcomboboxinfo\"></a>  CComboBox::GetComboBoxInfo  \n Retrieves information for the `CComboBox` object.  \n  \n```  \nBOOL GetComboBoxInfo(PCOMBOBOXINFO pcbi) const;\n\n \n```  \n  \n### Parameters  \n *pcbi*  \n A pointer to the [COMBOBOXINFO](http://msdn.microsoft.com/library/windows/desktop/bb775798) structure.  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n This member function emulates the functionality of the [CB_GETCOMBOBOXINFO](http://msdn.microsoft.com/library/windows/desktop/bb775839) message, as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ccombobox__getcount\"></a>  CComboBox::GetCount  \n Call this member function to retrieve the number of items in the list-box portion of a combo box.  \n  \n```  \nint GetCount() const;\n\n \n```  \n  \n### Return Value  \n The number of items. The returned count is one greater than the index value of the last item (the index is zero-based). It is **CB_ERR** if an error occurs.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#14](../../mfc/reference/codesnippet/cpp/ccombobox-class_14.cpp)]  \n  \n##  <a name=\"ccombobox__getcuebanner\"></a>  CComboBox::GetCueBanner  \n Gets the cue text that is displayed for a combo box control.  \n  \n```  \nCString GetCueBanner() const;\n\n \nBOOL GetCueBanner(\n    LPTSTR lpszText,   \n    int cchText) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[out] `lpszText`|Pointer to a buffer that receives the cue banner text.|  \n|[in] `cchText`|Size of the buffer that the `lpszText` parameter points to.|  \n  \n### Return Value  \n In the first overload, a [CString](../../atl-mfc-shared/using-cstring.md) object that contains the cue banner text if it exists; otherwise, a `CString` object that has zero length.  \n  \n -or-  \n  \n In the second overload, `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n Cue text is a prompt that is displayed in the input area of the combo box control. The cue text is displayed until the user provides input.  \n  \n This method sends the [CB_GETCUEBANNER](http://msdn.microsoft.com/library/windows/desktop/bb775843) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ccombobox__getcursel\"></a>  CComboBox::GetCurSel  \n Call this member function to determine which item in the combo box is selected.  \n  \n```  \nint GetCurSel() const;\n\n \n```  \n  \n### Return Value  \n The zero-based index of the currently selected item in the list box of a combo box, or **CB_ERR** if no item is selected.  \n  \n### Remarks  \n `GetCurSel` returns an index into the list.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#15](../../mfc/reference/codesnippet/cpp/ccombobox-class_15.cpp)]  \n  \n##  <a name=\"ccombobox__getdroppedcontrolrect\"></a>  CComboBox::GetDroppedControlRect  \n Call the `GetDroppedControlRect` member function to retrieve the screen coordinates of the visible (dropped-down) list box of a drop-down combo box.  \n  \n```  \nvoid GetDroppedControlRect(LPRECT lprect) const;\n\n \n```  \n  \n### Parameters  \n *lprect*  \n Points to the [RECT structure](../../mfc/reference/rect-structure1.md) that is to receive the coordinates.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#16](../../mfc/reference/codesnippet/cpp/ccombobox-class_16.cpp)]  \n  \n##  <a name=\"ccombobox__getdroppedstate\"></a>  CComboBox::GetDroppedState  \n Call the `GetDroppedState` member function to determine whether the list box of a drop-down combo box is visible (dropped down).  \n  \n```  \nBOOL GetDroppedState() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the list box is visible; otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#17](../../mfc/reference/codesnippet/cpp/ccombobox-class_17.cpp)]  \n  \n##  <a name=\"ccombobox__getdroppedwidth\"></a>  CComboBox::GetDroppedWidth  \n Call this function to retrieve the minimum allowable width, in pixels, of the list box of a combo box.  \n  \n```  \nint GetDroppedWidth() const;\n\n \n```  \n  \n### Return Value  \n If successful, the minimum allowable width, in pixels; otherwise, **CB_ERR**.  \n  \n### Remarks  \n This function only applies to combo boxes with the [CBS_DROPDOWN](../../mfc/reference/combo-box-styles.md) or [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style.  \n  \n By default, the minimum allowable width of the drop-down list box is 0. The minimum allowable width can be set by calling [SetDroppedWidth](#ccombobox__setdroppedwidth). When the list-box portion of the combo box is displayed, its width is the larger of the minimum allowable width or the combo box width.  \n  \n### Example  \n  See the example for [SetDroppedWidth](#ccombobox__setdroppedwidth).  \n  \n##  <a name=\"ccombobox__geteditsel\"></a>  CComboBox::GetEditSel  \n Gets the starting and ending character positions of the current selection in the edit control of a combo box.  \n  \n```  \nDWORD GetEditSel() const;\n\n \n```  \n  \n### Return Value  \n A 32-bit value that contains the starting position in the low-order word and the position of the first nonselected character after the end of the selection in the high-order word. If this function is used on a combo box without an edit control, **CB_ERR** is returned.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#18](../../mfc/reference/codesnippet/cpp/ccombobox-class_18.cpp)]  \n  \n##  <a name=\"ccombobox__getextendedui\"></a>  CComboBox::GetExtendedUI  \n Call the `GetExtendedUI` member function to determine whether a combo box has the default user interface or the extended user interface.  \n  \n```  \nBOOL GetExtendedUI() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if the combo box has the extended user interface; otherwise 0.  \n  \n### Remarks  \n The extended user interface can be identified in the following ways:  \n  \n-   Clicking the static control displays the list box only for combo boxes with the [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style.  \n  \n-   Pressing the DOWN ARROW key displays the list box (F4 is disabled).  \n  \n Scrolling in the static control is disabled when the item list is not visible (arrow keys are disabled).  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#19](../../mfc/reference/codesnippet/cpp/ccombobox-class_19.cpp)]  \n  \n##  <a name=\"ccombobox__gethorizontalextent\"></a>  CComboBox::GetHorizontalExtent  \n Retrieves from the combo box the width in pixels by which the list-box portion of the combo box can be scrolled horizontally.  \n  \n```  \nUINT GetHorizontalExtent() const;\n\n \n```  \n  \n### Return Value  \n The scrollable width of the list-box portion of the combo box, in pixels.  \n  \n### Remarks  \n This is applicable only if the list-box portion of the combo box has a horizontal scroll bar.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#20](../../mfc/reference/codesnippet/cpp/ccombobox-class_20.cpp)]  \n  \n##  <a name=\"ccombobox__getitemdata\"></a>  CComboBox::GetItemData  \n Retrieves the application-supplied 32-bit value associated with the specified combo-box item.  \n  \n```  \nDWORD_PTR GetItemData(int nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Contains the zero-based index of an item in the combo box's list box.  \n  \n### Return Value  \n The 32-bit value associated with the item, or **CB_ERR** if an error occurs.  \n  \n### Remarks  \n The 32-bit value can be set with the `dwItemData` parameter of a [SetItemData](#ccombobox__setitemdata) member function call. Use the `GetItemDataPtr` member function if the 32-bit value to be retrieved is a pointer ( **void\\***).  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#21](../../mfc/reference/codesnippet/cpp/ccombobox-class_21.cpp)]  \n  \n##  <a name=\"ccombobox__getitemdataptr\"></a>  CComboBox::GetItemDataPtr  \n Retrieves the application-supplied 32-bit value associated with the specified combo-box item as a pointer ( **void\\***).  \n  \n```  \nvoid* GetItemDataPtr(int nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Contains the zero-based index of an item in the combo box's list box.  \n  \n### Return Value  \n Retrieves a pointer, or –1 if an error occurs.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#22](../../mfc/reference/codesnippet/cpp/ccombobox-class_22.cpp)]  \n  \n##  <a name=\"ccombobox__getitemheight\"></a>  CComboBox::GetItemHeight  \n Call the `GetItemHeight` member function to retrieve the height of list items in a combo box.  \n  \n```  \nint GetItemHeight(int nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the component of the combo box whose height is to be retrieved. If the `nIndex` parameter is –1, the height of the edit-control (or static-text) portion of the combo box is retrieved. If the combo box has the [CBS_OWNERDRAWVARIABLE](../../mfc/reference/combo-box-styles.md) style, `nIndex` specifies the zero-based index of the list item whose height is to be retrieved. Otherwise, `nIndex` should be set to 0.  \n  \n### Return Value  \n The height, in pixels, of the specified item in a combo box. The return value is **CB_ERR** if an error occurs.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#23](../../mfc/reference/codesnippet/cpp/ccombobox-class_23.cpp)]  \n  \n##  <a name=\"ccombobox__getlbtext\"></a>  CComboBox::GetLBText  \n Gets a string from the list box of a combo box.  \n  \n```  \nint GetLBText(\n    int nIndex,  \n    LPTSTR lpszText) const;\n\n \n \nvoid GetLBText(\n    int nIndex,  \n    CString& rString) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Contains the zero-based index of the list-box string to be copied.  \n  \n `lpszText`  \n Points to a buffer that is to receive the string. The buffer must have sufficient space for the string and a terminating null character.  \n  \n `rString`  \n A reference to a `CString`.  \n  \n### Return Value  \n The length (in bytes) of the string, excluding the terminating null character. If `nIndex` does not specify a valid index, the return value is **CB_ERR**.  \n  \n### Remarks  \n The second form of this member function fills a `CString` object with the item's text.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#24](../../mfc/reference/codesnippet/cpp/ccombobox-class_24.cpp)]  \n  \n##  <a name=\"ccombobox__getlbtextlen\"></a>  CComboBox::GetLBTextLen  \n Gets the length of a string in the list box of a combo box.  \n  \n```  \nint GetLBTextLen(int nIndex) const;\n\n \n```  \n  \n### Parameters  \n `nIndex`  \n Contains the zero-based index of the list-box string.  \n  \n### Return Value  \n The length of the string in bytes, excluding the terminating null character. If `nIndex` does not specify a valid index, the return value is **CB_ERR**.  \n  \n### Example  \n  See the example for [CComboBox::GetLBText](#ccombobox__getlbtext).  \n  \n##  <a name=\"ccombobox__getlocale\"></a>  CComboBox::GetLocale  \n Retrieves the locale used by the combo box.  \n  \n```  \nLCID GetLocale() const;\n\n \n```  \n  \n### Return Value  \n The locale identifier (LCID) value for the strings in the combo box.  \n  \n### Remarks  \n The locale is used, for example, to determine the sort order of the strings in a sorted combo box.  \n  \n### Example  \n  See the example for [CComboBox::SetLocale](#ccombobox__setlocale).  \n  \n##  <a name=\"ccombobox__getminvisible\"></a>  CComboBox::GetMinVisible  \n Gets the minimum number of visible items in the drop-down list of the current combo box control.  \n  \n```  \nint GetMinVisible() const;\n\n \n```  \n  \n### Return Value  \n The minimum number of visible items in the current drop-down list.  \n  \n### Remarks  \n This method sends the [CB_GETMINVISIBLE](http://msdn.microsoft.com/library/windows/desktop/bb775915) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"ccombobox__gettopindex\"></a>  CComboBox::GetTopIndex  \n Retrieves the zero-based index of the first visible item in the list-box portion of the combo box.  \n  \n```  \nint GetTopIndex() const;\n\n \n```  \n  \n### Return Value  \n The zero-based index of the first visible item in the list-box portion of the combo box if successful, **CB_ERR** otherwise.  \n  \n### Remarks  \n Initially, item 0 is at the top of the list box, but if the list box is scrolled, another item may be at the top.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#25](../../mfc/reference/codesnippet/cpp/ccombobox-class_25.cpp)]  \n  \n##  <a name=\"ccombobox__initstorage\"></a>  CComboBox::InitStorage  \n Allocates memory for storing list box items in the list-box portion of the combo box.  \n  \n```  \nint InitStorage(\n    int nItems,  \n    UINT nBytes);\n```  \n  \n### Parameters  \n `nItems`  \n Specifies the number of items to add.  \n  \n `nBytes`  \n Specifies the amount of memory, in bytes, to allocate for item strings.  \n  \n### Return Value  \n If successful, the maximum number of items that the list-box portion of the combo box can store before a memory reallocation is needed, otherwise **CB_ERRSPACE**, meaning not enough memory is available.  \n  \n### Remarks  \n Call this function before adding a large number of items to the list-box portion of the `CComboBox`.  \n  \n Windows 95/98 only: The `wParam` parameter is limited to 16-bit values. This means list boxes cannot contain more than 32,767 items. Although the number of items is restricted, the total size of the items in a list box is limited only by available memory.  \n  \n This function helps speed up the initialization of list boxes that have a large number of items (more than 100). It preallocates the specified amount of memory so that subsequent [AddString](#ccombobox__addstring), [InsertString](#ccombobox__insertstring), and [Dir](#ccombobox__dir) functions take the shortest possible time. You can use estimates for the parameters. If you overestimate, some extra memory is allocated; if you underestimate, the normal allocation is used for items that exceed the preallocated amount.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#26](../../mfc/reference/codesnippet/cpp/ccombobox-class_26.cpp)]  \n  \n##  <a name=\"ccombobox__insertstring\"></a>  CComboBox::InsertString  \n Inserts a string into the list box of a combo box.  \n  \n```  \nint InsertString(\n    int nIndex,  \n    LPCTSTR lpszString);\n```  \n  \n### Parameters  \n `nIndex`  \n Contains the zero-based index to the position in the list box that will receive the string. If this parameter is –1, the string is added to the end of the list.  \n  \n `lpszString`  \n Points to the null-terminated string that is to be inserted.  \n  \n### Return Value  \n The zero-based index of the position at which the string was inserted. The return value is **CB_ERR** if an error occurs. The return value is **CB_ERRSPACE** if insufficient space is available to store the new string.  \n  \n### Remarks  \n Unlike the [AddString](#ccombobox__addstring) member function, the `InsertString` member function does not cause a list with the [CBS_SORT](../../mfc/reference/combo-box-styles.md) style to be sorted.  \n  \n> [!NOTE]\n>  This function is not supported by the Windows **ComboBoxEx** control. For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#27](../../mfc/reference/codesnippet/cpp/ccombobox-class_27.cpp)]  \n  \n##  <a name=\"ccombobox__limittext\"></a>  CComboBox::LimitText  \n Limits the length in bytes of the text that the user can enter into the edit control of a combo box.  \n  \n```  \nBOOL LimitText(int nMaxChars);\n```  \n  \n### Parameters  \n `nMaxChars`  \n Specifies the length (in bytes) of the text that the user can enter. If this parameter is 0, the text length is set to 65,535 bytes.  \n  \n### Return Value  \n Nonzero if successful. If called for a combo box with the style [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) or for a combo box without an edit control, the return value is **CB_ERR**.  \n  \n### Remarks  \n If the combo box does not have the style [CBS_AUTOHSCROLL](../../mfc/reference/combo-box-styles.md), setting the text limit to be larger than the size of the edit control will have no effect.  \n  \n `LimitText` only limits the text the user can enter. It has no effect on any text already in the edit control when the message is sent, nor does it affect the length of the text copied to the edit control when a string in the list box is selected.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#28](../../mfc/reference/codesnippet/cpp/ccombobox-class_28.cpp)]  \n  \n##  <a name=\"ccombobox__measureitem\"></a>  CComboBox::MeasureItem  \n Called by the framework when a combo box with an owner-draw style is created.  \n  \n```  \nvirtual void MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);\n```  \n  \n### Parameters  \n `lpMeasureItemStruct`  \n A long pointer to a [MEASUREITEMSTRUCT](../../mfc/reference/measureitemstruct-structure.md) structure.  \n  \n### Remarks  \n By default, this member function does nothing. Override this member function and fill in the `MEASUREITEMSTRUCT` structure to inform Windows of the dimensions of the list box in the combo box. If the combo box is created with the [CBS_OWNERDRAWVARIABLE](../../mfc/reference/combo-box-styles.md) style, the framework calls this member function for each item in the list box. Otherwise, this member is called only once.  \n  \n Using the **CBS_OWNERDRAWFIXED** style in an owner-draw combo box created with the [SubclassDlgItem](../../mfc/reference/cwnd-class.md#cwnd__subclassdlgitem) member function of `CWnd` involves further programming considerations. See the discussion in [Technical Note 14](../../mfc/tn014-custom-controls.md).  \n  \n See [CWnd::OnMeasureItem](../../mfc/reference/cwnd-class.md#cwnd__onmeasureitem) for a description of the `MEASUREITEMSTRUCT` structure.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#29](../../mfc/reference/codesnippet/cpp/ccombobox-class_29.cpp)]  \n  \n##  <a name=\"ccombobox__paste\"></a>  CComboBox::Paste  \n Inserts the data from the Clipboard into the edit control of the combo box at the current cursor position.  \n  \n```  \nvoid Paste();\n```  \n  \n### Remarks  \n Data is inserted only if the Clipboard contains data in **CF_TEXT** format.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#30](../../mfc/reference/codesnippet/cpp/ccombobox-class_30.cpp)]  \n  \n##  <a name=\"ccombobox__resetcontent\"></a>  CComboBox::ResetContent  \n Removes all items from the list box and edit control of a combo box.  \n  \n```  \nvoid ResetContent();\n```  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#31](../../mfc/reference/codesnippet/cpp/ccombobox-class_31.cpp)]  \n  \n##  <a name=\"ccombobox__selectstring\"></a>  CComboBox::SelectString  \n Searches for a string in the list box of a combo box, and if the string is found, selects the string in the list box and copies it to the edit control.  \n  \n```  \nint SelectString(\n    int nStartAfter,  \n    LPCTSTR lpszString);\n```  \n  \n### Parameters  \n `nStartAfter`  \n Contains the zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by `nStartAfter`. If –1, the entire list box is searched from the beginning.  \n  \n `lpszString`  \n Points to the null-terminated string that contains the prefix to search for. The search is case independent, so this string can contain any combination of uppercase and lowercase letters.  \n  \n### Return Value  \n The zero-based index of the selected item if the string was found. If the search was unsuccessful, the return value is **CB_ERR** and the current selection is not changed.  \n  \n### Remarks  \n A string is selected only if its initial characters (from the starting point) match the characters in the prefix string.  \n  \n Note that the `SelectString` and `FindString` member functions both find a string, but the `SelectString` member function also selects the string.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#32](../../mfc/reference/codesnippet/cpp/ccombobox-class_32.cpp)]  \n  \n##  <a name=\"ccombobox__setcuebanner\"></a>  CComboBox::SetCueBanner  \n Sets the cue text that is displayed for a combo box control.  \n  \n```  \nBOOL SetCueBanner(LPCTSTR lpszText);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] *lpszText*|Pointer to a null-terminated buffer that contains the cue text.|  \n  \n### Return Value  \n `true` if the method is successful; otherwise, `false`.  \n  \n### Remarks  \n Cue text is a prompt that is displayed in the input area of the combo box control. The cue text is displayed until the user provides input.  \n  \n This method sends the [CB_SETCUEBANNER](http://msdn.microsoft.com/library/windows/desktop/bb775897) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines the variable, `m_combobox`, that is used to programmatically access the combo box control. This variable is used in the next example.  \n  \n [!code-cpp[NVC_MFC_CComboBox_s1#1](../../mfc/reference/codesnippet/cpp/ccombobox-class_33.h)]  \n  \n### Example  \n The following code example sets the cue banner for the combo box control.  \n  \n [!code-cpp[NVC_MFC_CComboBox_s1#2](../../mfc/reference/codesnippet/cpp/ccombobox-class_34.cpp)]  \n  \n##  <a name=\"ccombobox__setcursel\"></a>  CComboBox::SetCurSel  \n Selects a string in the list box of a combo box.  \n  \n```  \nint SetCurSel(int nSelect);\n```  \n  \n### Parameters  \n `nSelect`  \n Specifies the zero-based index of the string to select. If –1, any current selection in the list box is removed and the edit control is cleared.  \n  \n### Return Value  \n The zero-based index of the item selected if the message is successful. The return value is **CB_ERR** if `nSelect` is greater than the number of items in the list or if `nSelect` is set to –1, which clears the selection.  \n  \n### Remarks  \n If necessary, the list box scrolls the string into view (if the list box is visible). The text in the edit control of the combo box is changed to reflect the new selection. Any previous selection in the list box is removed.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#33](../../mfc/reference/codesnippet/cpp/ccombobox-class_35.cpp)]  \n  \n##  <a name=\"ccombobox__setdroppedwidth\"></a>  CComboBox::SetDroppedWidth  \n Call this function to set the minimum allowable width, in pixels, of the list box of a combo box.  \n  \n```  \nint SetDroppedWidth(UINT nWidth);\n```  \n  \n### Parameters  \n `nWidth`  \n The minimum allowable width of the list-box portion of the combo box, in pixels.  \n  \n### Return Value  \n If successful, the new width of the list box, otherwise **CB_ERR**.  \n  \n### Remarks  \n This function only applies to combo boxes with the [CBS_DROPDOWN](../../mfc/reference/combo-box-styles.md) or [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style.  \n  \n By default, the minimum allowable width of the drop-down list box is 0. When the list-box portion of the combo box is displayed, its width is the larger of the minimum allowable width or the combo box width.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#34](../../mfc/reference/codesnippet/cpp/ccombobox-class_36.cpp)]  \n  \n##  <a name=\"ccombobox__seteditsel\"></a>  CComboBox::SetEditSel  \n Selects characters in the edit control of a combo box.  \n  \n```  \nBOOL SetEditSel(\n    int nStartChar,  \n    int nEndChar);\n```  \n  \n### Parameters  \n `nStartChar`  \n Specifies the starting position. If the starting position is set to –1, then any existing selection is removed.  \n  \n `nEndChar`  \n Specifies the ending position. If the ending position is set to –1, then all text from the starting position to the last character in the edit control is selected.  \n  \n### Return Value  \n Nonzero if the member function is successful; otherwise 0. It is **CB_ERR** if `CComboBox` has the [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style or does not have a list box.  \n  \n### Remarks  \n The positions are zero-based. To select the first character of the edit control, you specify a starting position of 0. The ending position is for the character just after the last character to select. For example, to select the first four characters of the edit control, you would use a starting position of 0 and an ending position of 4.  \n  \n> [!NOTE]\n>  This function is not supported by the Windows **ComboBoxEx** control. For more information on this control, see [ComboBoxEx Controls](http://msdn.microsoft.com/library/windows/desktop/bb775738) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CComboBox::GetEditSel](#ccombobox__geteditsel).  \n  \n##  <a name=\"ccombobox__setextendedui\"></a>  CComboBox::SetExtendedUI  \n Call the `SetExtendedUI` member function to select either the default user interface or the extended user interface for a combo box that has the [CBS_DROPDOWN](../../mfc/reference/combo-box-styles.md) or [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style.  \n  \n```  \nint SetExtendedUI(BOOL bExtended = TRUE);\n```  \n  \n### Parameters  \n *bExtended*  \n Specifies whether the combo box should use the extended user interface or the default user interface. A value of **TRUE** selects the extended user interface; a value of **FALSE** selects the standard user interface.  \n  \n### Return Value  \n **CB_OKAY** if the operation is successful, or **CB_ERR** if an error occurs.  \n  \n### Remarks  \n The extended user interface can be identified in the following ways:  \n  \n-   Clicking the static control displays the list box only for combo boxes with the **CBS_DROPDOWNLIST** style.  \n  \n-   Pressing the DOWN ARROW key displays the list box (F4 is disabled).  \n  \n Scrolling in the static control is disabled when the item list is not visible (the arrow keys are disabled).  \n  \n### Example  \n  See the example for [CComboBox::GetExtendedUI](#ccombobox__getextendedui).  \n  \n##  <a name=\"ccombobox__sethorizontalextent\"></a>  CComboBox::SetHorizontalExtent  \n Sets the width, in pixels, by which the list-box portion of the combo box can be scrolled horizontally.  \n  \n```  \nvoid SetHorizontalExtent(UINT nExtent);\n```  \n  \n### Parameters  \n *nExtent*  \n Specifies the number of pixels by which the list-box portion of the combo box can be scrolled horizontally.  \n  \n### Remarks  \n If the width of the list box is smaller than this value, the horizontal scroll bar will horizontally scroll items in the list box. If the width of the list box is equal to or greater than this value, the horizontal scroll bar is hidden or, if the combo box has the [CBS_DISABLENOSCROLL](../../mfc/reference/combo-box-styles.md) style, disabled.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#35](../../mfc/reference/codesnippet/cpp/ccombobox-class_37.cpp)]  \n  \n##  <a name=\"ccombobox__setitemdata\"></a>  CComboBox::SetItemData  \n Sets the 32-bit value associated with the specified item in a combo box.  \n  \n```  \nint SetItemData(\n    int nIndex,  \n    DWORD_PTR dwItemData);\n```  \n  \n### Parameters  \n `nIndex`  \n Contains a zero-based index to the item to set.  \n  \n `dwItemData`  \n Contains the new value to associate with the item.  \n  \n### Return Value  \n **CB_ERR** if an error occurs.  \n  \n### Remarks  \n Use the `SetItemDataPtr` member function if the 32-bit item is to be a pointer.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#36](../../mfc/reference/codesnippet/cpp/ccombobox-class_38.cpp)]  \n  \n##  <a name=\"ccombobox__setitemdataptr\"></a>  CComboBox::SetItemDataPtr  \n Sets the 32-bit value associated with the specified item in a combo box to be the specified pointer ( **void\\***).  \n  \n```  \nint SetItemDataPtr(\n    int nIndex,  \n    void* pData);\n```  \n  \n### Parameters  \n `nIndex`  \n Contains a zero-based index to the item.  \n  \n `pData`  \n Contains the pointer to associate with the item.  \n  \n### Return Value  \n **CB_ERR** if an error occurs.  \n  \n### Remarks  \n This pointer remains valid for the life of the combo box, even though the item's relative position within the combo box might change as items are added or removed. Hence, the item's index within the box can change, but the pointer remains reliable.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#37](../../mfc/reference/codesnippet/cpp/ccombobox-class_39.cpp)]  \n  \n##  <a name=\"ccombobox__setitemheight\"></a>  CComboBox::SetItemHeight  \n Call the `SetItemHeight` member function to set the height of list items in a combo box or the height of the edit-control (or static-text) portion of a combo box.  \n  \n```  \nint SetItemHeight(\n    int nIndex,  \n    UINT cyItemHeight);\n```  \n  \n### Parameters  \n `nIndex`  \n Specifies whether the height of list items or the height of the edit-control (or static-text) portion of the combo box is set.  \n  \n If the combo box has the [CBS_OWNERDRAWVARIABLE](../../mfc/reference/combo-box-styles.md) style, `nIndex` specifies the zero-based index of the list item whose height is to be set; otherwise, `nIndex` must be 0 and the height of all list items will be set.  \n  \n If `nIndex` is –1, the height of the edit-control or static-text portion of the combo box is to be set.  \n  \n `cyItemHeight`  \n Specifies the height, in pixels, of the combo-box component identified by `nIndex`.  \n  \n### Return Value  \n **CB_ERR** if the index or height is invalid; otherwise 0.  \n  \n### Remarks  \n The height of the edit-control (or static-text) portion of the combo box is set independently of the height of the list items. An application must ensure that the height of the edit-control (or static-text) portion is not smaller than the height of a particular list-box item.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#38](../../mfc/reference/codesnippet/cpp/ccombobox-class_40.cpp)]  \n  \n##  <a name=\"ccombobox__setlocale\"></a>  CComboBox::SetLocale  \n Sets the locale identifier for this combo box.  \n  \n```  \nLCID SetLocale(LCID nNewLocale);\n```  \n  \n### Parameters  \n `nNewLocale`  \n The new locale identifier (LCID) value to set for the combo box.  \n  \n### Return Value  \n The previous locale identifier (LCID) value for this combo box.  \n  \n### Remarks  \n If **SetLocale** is not called, the default locale is obtained from the system. This system default locale can be modified by using Control Panel's Regional (or International) application.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#39](../../mfc/reference/codesnippet/cpp/ccombobox-class_41.cpp)]  \n  \n##  <a name=\"ccombobox__setminvisibleitems\"></a>  CComboBox::SetMinVisibleItems  \n Sets the minimum number of visible items in the drop-down list of the current combo box control.  \n  \n```  \nBOOL SetMinVisibleItems(int iMinVisible);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `iMinVisible`|Specifies the minimum number of visible items.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n This method sends the [CB_SETMINVISIBLE](http://msdn.microsoft.com/library/windows/desktop/bb775915) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines the variable, `m_combobox`, that is used to programmatically access the combo box control. This variable is used in the next example.  \n  \n [!code-cpp[NVC_MFC_CComboBox_s1#1](../../mfc/reference/codesnippet/cpp/ccombobox-class_33.h)]  \n  \n### Example  \n The following code example inserts 20 items into the drop-down list of a combo box control. Then it specifies that a minimum of 10 items be displayed when a user presses the drop-down arrow.  \n  \n [!code-cpp[NVC_MFC_CComboBox_s1#2](../../mfc/reference/codesnippet/cpp/ccombobox-class_34.cpp)]  \n  \n##  <a name=\"ccombobox__settopindex\"></a>  CComboBox::SetTopIndex  \n Ensures that a particular item is visible in the list-box portion of the combo box.  \n  \n```  \nint SetTopIndex(int nIndex);\n```  \n  \n### Parameters  \n `nIndex`  \n Specifies the zero-based index of the list-box item.  \n  \n### Return Value  \n Zero if successful, or **CB_ERR** if an error occurs.  \n  \n### Remarks  \n The system scrolls the list box until either the item specified by `nIndex` appears at the top of the list box or the maximum scroll range has been reached.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CComboBox#40](../../mfc/reference/codesnippet/cpp/ccombobox-class_42.cpp)]  \n  \n##  <a name=\"ccombobox__showdropdown\"></a>  CComboBox::ShowDropDown  \n Shows or hides the list box of a combo box that has the [CBS_DROPDOWN](../../mfc/reference/combo-box-styles.md) or [CBS_DROPDOWNLIST](../../mfc/reference/combo-box-styles.md) style.  \n  \n```  \nvoid ShowDropDown(BOOL bShowIt = TRUE);\n```  \n  \n### Parameters  \n *bShowIt*  \n Specifies whether the drop-down list box is to be shown or hidden. A value of **TRUE** shows the list box. A value of **FALSE** hides the list box.  \n  \n### Remarks  \n By default, a combo box of this style will show the list box.  \n  \n This member function has no effect on a combo box created with the [CBS_SIMPLE](../../mfc/reference/combo-box-styles.md) style.  \n  \n### Example  \n  See the example for [CComboBox::GetDroppedState](#ccombobox__getdroppedstate).  \n  \n## See Also  \n [MFC Sample CTRLBARS](../../visual-cpp-samples.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [CButton Class](../../mfc/reference/cbutton-class.md)   \n [CEdit Class](../../mfc/reference/cedit-class.md)   \n [CListBox Class](../../mfc/reference/clistbox-class.md)   \n [CScrollBar Class](../../mfc/reference/cscrollbar-class.md)   \n [CStatic Class](../../mfc/reference/cstatic-class.md)   \n [CDialog Class](../../mfc/reference/cdialog-class.md)\n"}