{"nodes":[{"pos":[12,47],"content":"codecvt_base Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"codecvt_base Class | Microsoft Docs","pos":[0,35]}]},{"pos":[687,705],"content":"codecvt_base Class","linkify":"codecvt_base Class","nodes":[{"content":"codecvt_base Class","pos":[0,18]}]},{"pos":[706,905],"content":"A base class for the codecvt class that is used to define an enumeration type referred to as <bpt id=\"p1\">**</bpt>result<ept id=\"p1\">**</ept>, used as the return type for the facet member functions to indicate the result of a conversion.","source":"A base class for the codecvt class that is used to define an enumeration type referred to as **result**, used as the return type for the facet member functions to indicate the result of a conversion."},{"pos":[914,920],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1317,1324],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The class describes an enumeration common to all specializations of template class <bpt id=\"p1\">[</bpt>codecvt<ept id=\"p1\">](../standard-library/codecvt-class.md)</ept>.","pos":[1328,1459],"source":"The class describes an enumeration common to all specializations of template class [codecvt](../standard-library/codecvt-class.md)."},{"content":"The enumeration result describes the possible return values from <bpt id=\"p1\">[</bpt>do_in<ept id=\"p1\">](../standard-library/codecvt-class.md#codecvt__do_in)</ept> or <bpt id=\"p2\">[</bpt>do_out<ept id=\"p2\">](../standard-library/codecvt-class.md#codecvt__do_out)</ept>:","pos":[1460,1652],"source":" The enumeration result describes the possible return values from [do_in](../standard-library/codecvt-class.md#codecvt__do_in) or [do_out](../standard-library/codecvt-class.md#codecvt__do_out):"},{"pos":[1660,1744],"content":"<bpt id=\"p1\">**</bpt>ok<ept id=\"p1\">**</ept> if the conversion between internal and external character encodings succeeds.","source":"**ok** if the conversion between internal and external character encodings succeeds."},{"pos":[1752,1833],"content":"<bpt id=\"p1\">**</bpt>partial<ept id=\"p1\">**</ept> if the destination is not large enough for the conversion to succeed.","source":"**partial** if the destination is not large enough for the conversion to succeed."},{"pos":[1841,1888],"content":"<bpt id=\"p1\">**</bpt>error<ept id=\"p1\">**</ept> if the source sequence is ill formed.","source":"**error** if the source sequence is ill formed."},{"pos":[1896,1946],"content":"<bpt id=\"p1\">**</bpt>noconv<ept id=\"p1\">**</ept> if the function performs no conversion.","source":"**noconv** if the function performs no conversion."},{"pos":[1955,1967],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1971,1992],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>locale&gt;","source":"**Header:** \\<locale>"},{"pos":[1999,2017],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2026,2034],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2038,2147],"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept>","source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)"}],"content":"---\ntitle: \"codecvt_base Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"codecvt_base\"\n  - \"xlocale/std::codecvt_base\"\n  - \"std.codecvt_base\"\n  - \"std::codecvt_base\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"codecvt_base class\"\nms.assetid: 7e95c083-91b4-4b3f-8918-0d4ea244a040\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# codecvt_base Class\nA base class for the codecvt class that is used to define an enumeration type referred to as **result**, used as the return type for the facet member functions to indicate the result of a conversion.  \n  \n## Syntax  \n  \n```\nclass codecvt_base : public locale::facet {\npublic:\n    enum result {ok, partial, error, noconv};\n    codecvt_base( size_t _Refs = 0);\n    bool always_noconv() const;\n    int max_length() const;\n    int encoding() const;\n    ~codecvt_base()\n\nprotected:\n    virtual bool do_always_noconv() const;\n    virtual int do_max_length() const;\n    virtual int do_encoding() const;\n};\n```  \n  \n## Remarks  \n The class describes an enumeration common to all specializations of template class [codecvt](../standard-library/codecvt-class.md). The enumeration result describes the possible return values from [do_in](../standard-library/codecvt-class.md#codecvt__do_in) or [do_out](../standard-library/codecvt-class.md#codecvt__do_out):  \n  \n- **ok** if the conversion between internal and external character encodings succeeds.  \n  \n- **partial** if the destination is not large enough for the conversion to succeed.  \n  \n- **error** if the source sequence is ill formed.  \n  \n- **noconv** if the function performs no conversion.  \n  \n## Requirements  \n **Header:** \\<locale>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n\n\n"}