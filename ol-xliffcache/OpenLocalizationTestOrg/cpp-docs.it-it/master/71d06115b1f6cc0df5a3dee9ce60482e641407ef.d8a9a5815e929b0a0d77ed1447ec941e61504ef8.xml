{"nodes":[{"pos":[12,44],"content":"binder1st Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"binder1st Class | Microsoft Docs","pos":[0,32]}]},{"pos":[673,688],"content":"binder1st Class","linkify":"binder1st Class","nodes":[{"content":"binder1st Class","pos":[0,15]}]},{"content":"A template class providing a constructor that converts a binary function object into a unary function object by binding the first argument of the binary function to a specified value.","pos":[689,872]},{"pos":[881,887],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1531,1541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The binary function object to be converted to a unary function object.","pos":[1555,1625]},{"content":"The value to which the first argument of the binary function object is to be bound.","pos":[1642,1725]},{"content":"The value of the argument that the adapted binary object compares to the fixed value of the second argument.","pos":[1743,1851]},{"pos":[1860,1872],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1876,1997],"content":"The unary function object that results from binding the first argument of the binary function object to the value <ph id=\"ph1\">`left.`</ph>","source":"The unary function object that results from binding the first argument of the binary function object to the value `left.`"},{"pos":[2006,2013],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class stores a copy of a binary function object <ph id=\"ph1\">`Func`</ph> in <bpt id=\"p1\">**</bpt>op<ept id=\"p1\">**</ept>, and a copy of <ph id=\"ph2\">`left`</ph> in <bpt id=\"p2\">**</bpt>value<ept id=\"p2\">**</ept>.","pos":[2017,2130],"source":"The template class stores a copy of a binary function object `Func` in **op**, and a copy of `left` in **value**."},{"content":"It defines its member function <ph id=\"ph1\">`operator()`</ph> as returning <bpt id=\"p1\">**</bpt>op<ept id=\"p1\">**</ept>( <bpt id=\"p2\">**</bpt>value<ept id=\"p2\">**</ept>, <ph id=\"ph2\">`right`</ph>).","pos":[2131,2216],"source":" It defines its member function `operator()` as returning **op**( **value**, `right`)."},{"pos":[2223,2501],"content":"If <ph id=\"ph1\">`Func`</ph> is an object of type <bpt id=\"p1\">**</bpt>Operation<ept id=\"p1\">**</ept> and <ph id=\"ph2\">`c`</ph> is a constant , then <bpt id=\"p2\">[</bpt>bind1st<ept id=\"p2\">](../standard-library/functional-functions.md#bind1st_function)</ept> ( <ph id=\"ph3\">`Func`</ph>, <ph id=\"ph4\">`c`</ph> ) is equivalent to the <ph id=\"ph5\">`binder1st`</ph> class constructor <ph id=\"ph6\">`binder1st`</ph><ph id=\"ph7\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>Operation<ept id=\"p3\">**</ept>&gt; ( <ph id=\"ph8\">`Func`</ph>, <ph id=\"ph9\">`c`</ph> ) and more convenient.","source":"If `Func` is an object of type **Operation** and `c` is a constant , then [bind1st](../standard-library/functional-functions.md#bind1st_function) ( `Func`, `c` ) is equivalent to the `binder1st` class constructor `binder1st`\\< **Operation**> ( `Func`, `c` ) and more convenient."},{"pos":[2510,2517],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3888,3900],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3904,3929],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[3936,3954],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3963,3971],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[3975,4085],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[4088,4176],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"binder1st Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"xfunctional/std::binder1st\"\n  - \"std::binder1st\"\n  - \"binder1st\"\n  - \"std.binder1st\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"binder1st class\"\nms.assetid: 6b8ee343-c82f-48f8-867d-06f9d1d324c0\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# binder1st Class\nA template class providing a constructor that converts a binary function object into a unary function object by binding the first argument of the binary function to a specified value.  \n  \n## Syntax  \n  \n```\ntemplate <class Operation>\nclass binder1st\n    : public unaryFunction <typename Operation::second_argument_type,\n                             typename Operation::result_type>\n{\npublic:\n    typedef typename Operation::argument_type argument_type;\n    typedef typename Operation::result_type result_type;\n    binder1st(\n        const Operation& Func,\n        const typename Operation::first_argument_type& left);\n\n    result_type operator()(const argument_type& right) const;\n    result_type operator()(const argument_type& right) const;\n\nprotected:\n    Operation op;\n    typename Operation::first_argument_type value;\n};\n```  \n  \n#### Parameters  \n `Func`  \n The binary function object to be converted to a unary function object.  \n  \n `left`  \n The value to which the first argument of the binary function object is to be bound.  \n  \n `right`  \n The value of the argument that the adapted binary object compares to the fixed value of the second argument.  \n  \n## Return Value  \n The unary function object that results from binding the first argument of the binary function object to the value `left.`  \n  \n## Remarks  \n The template class stores a copy of a binary function object `Func` in **op**, and a copy of `left` in **value**. It defines its member function `operator()` as returning **op**( **value**, `right`).  \n  \n If `Func` is an object of type **Operation** and `c` is a constant , then [bind1st](../standard-library/functional-functions.md#bind1st_function) ( `Func`, `c` ) is equivalent to the `binder1st` class constructor `binder1st`\\< **Operation**> ( `Func`, `c` ) and more convenient.  \n  \n## Example  \n  \n```cpp  \n// functional_binder1st.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <functional>  \n#include <algorithm>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main()  \n{  \n    vector<int> v1;  \n    vector<int>::iterator Iter;  \n  \n    int i;  \n    for (i = 0; i <= 5; i++)  \n    {  \n        v1.push_back(5 * i);  \n    }  \n  \n    cout << \"The vector v1 = ( \";  \n    for (Iter = v1.begin(); Iter != v1.end(); Iter++)  \n        cout << *Iter << \" \";  \n    cout << \")\" << endl;  \n  \n    // Count the number of integers > 10 in the vector  \n    vector<int>::iterator::difference_type result1;  \n    result1 = count_if(v1.begin(), v1.end(),  \n        binder1st<less<int> >(less<int>(), 10));  \n    cout << \"The number of elements in v1 greater than 10 is: \"  \n         << result1 << \".\" << endl;  \n  \n    // Compare use of binder2nd fixing 2nd argument:  \n    // count the number of integers < 10 in the vector  \n    vector<int>::iterator::difference_type result2;  \n    result2 = count_if(v1.begin(), v1.end(),  \n        binder2nd<less<int> >(less<int>(), 10));  \n    cout << \"The number of elements in v1 less than 10 is: \"  \n         << result2 << \".\" << endl;  \n}  \n\\* Output:   \nThe vector v1 = ( 0 5 10 15 20 25 )  \nThe number of elements in v1 greater than 10 is: 3.  \nThe number of elements in v1 less than 10 is: 2.  \n*\\  \n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}