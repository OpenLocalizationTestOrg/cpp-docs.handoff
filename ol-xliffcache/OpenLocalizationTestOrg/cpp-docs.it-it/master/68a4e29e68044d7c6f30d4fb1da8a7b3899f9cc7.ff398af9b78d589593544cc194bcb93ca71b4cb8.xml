{"nodes":[{"pos":[12,49],"content":"Delegates and Events | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Delegates and Events | Microsoft Docs","pos":[0,37]}]},{"content":"Delegates and Events","pos":[786,806]},{"pos":[807,966],"content":"The way to declare delegates and events has changed from Managed Extensions for C++ to <ph id=\"ph1\">[!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]</ph>.","source":"The way to declare delegates and events has changed from Managed Extensions for C++ to [!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]."},{"content":"The double underscore is no longer needed, as shown in the following sample.","pos":[973,1049]},{"content":"Here a sample code in Managed Extensions:","pos":[1050,1091]},{"content":"The same code in the new syntax looks as follows:","pos":[1339,1388]},{"content":"Events (and delegates) are reference types, which is clear in the new syntax because of the use of the hat (<ph id=\"ph1\">`^`</ph>).","pos":[1629,1742],"source":"Events (and delegates) are reference types, which is clear in the new syntax because of the use of the hat (`^`)."},{"content":"Events support both an explicit declaration syntax and the trivial form shown in the preceding code.","pos":[1744,1844]},{"content":"In the explicit form, the user specifies the <ph id=\"ph1\">`add`</ph>, <ph id=\"ph2\">`raise`</ph>, and <ph id=\"ph3\">`remove`</ph> methods associated with the event.","pos":[1845,1953],"source":" In the explicit form, the user specifies the `add`, `raise`, and `remove` methods associated with the event."},{"content":"(Only the <ph id=\"ph1\">`add`</ph> and <ph id=\"ph2\">`remove`</ph> methods are required; the <ph id=\"ph3\">`raise`</ph> method is optional.)","pos":[1954,2037],"source":" (Only the `add` and `remove` methods are required; the `raise` method is optional.)"},{"content":"Under Managed Extensions, if you provide these methods, you do not also provide an explicit event declaration, but you must decide on a name for the event that is not present.","pos":[2044,2219]},{"content":"Each method is specified in the form <ph id=\"ph1\">`add_EventName`</ph>, <ph id=\"ph2\">`raise_EventName`</ph>, and <ph id=\"ph3\">`remove_EventName`</ph>, as in the following example taken from the Managed Extensions specification:","pos":[2220,2393],"source":" Each method is specified in the form `add_EventName`, `raise_EventName`, and `remove_EventName`, as in the following example taken from the Managed Extensions specification:"},{"content":"The new syntax simplifies the declaration, as the following translation demonstrates.","pos":[2970,3055]},{"content":"An event specifies the two or three methods enclosed in a pair of braces  and placed immediately after the declaration of the event and its associated delegate type, as shown here:","pos":[3056,3236]},{"content":"See Also","pos":[4023,4031]},{"content":"Member Declarations within a Class or Interface (C++/CLI)","pos":[4036,4093]},{"content":"delegate  (C++ Component Extensions)","pos":[4170,4206]},{"content":"event","pos":[4262,4267]}],"content":"---\ntitle: \"Delegates and Events | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__event keyword [C++]\"\n  - \"delegate keyword [C++]\"\n  - \"delegates [C++], upgrading from Managed Extensions for C++\"\n  - \"__delegate keyword\"\n  - \"events [C++], upgrading from Managed Extensions for C++\"\n  - \"event keyword [C++]\"\nms.assetid: 3505c626-7e5f-4492-a947-0e2248f7b84a\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Delegates and Events\nThe way to declare delegates and events has changed from Managed Extensions for C++ to [!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)].  \n  \n The double underscore is no longer needed, as shown in the following sample. Here a sample code in Managed Extensions:  \n  \n```  \n__delegate void ClickEventHandler(int, double);  \n__delegate void DblClickEventHandler(String*);  \n  \n__gc class EventSource {  \n   __event ClickEventHandler* OnClick;    \n   __event DblClickEventHandler* OnDblClick;    \n};  \n```  \n  \n The same code in the new syntax looks as follows:  \n  \n```  \ndelegate void ClickEventHandler( int, double );  \ndelegate void DblClickEventHandler( String^ );  \n  \nref class EventSource {  \n   event ClickEventHandler^ OnClick;   \n   event DblClickEventHandler^ OnDblClick;   \n};  \n```  \n  \n Events (and delegates) are reference types, which is clear in the new syntax because of the use of the hat (`^`).  Events support both an explicit declaration syntax and the trivial form shown in the preceding code. In the explicit form, the user specifies the `add`, `raise`, and `remove` methods associated with the event. (Only the `add` and `remove` methods are required; the `raise` method is optional.)  \n  \n Under Managed Extensions, if you provide these methods, you do not also provide an explicit event declaration, but you must decide on a name for the event that is not present. Each method is specified in the form `add_EventName`, `raise_EventName`, and `remove_EventName`, as in the following example taken from the Managed Extensions specification:  \n  \n```  \n// explicit implementations of add, remove, raise  \npublic __delegate void f(int);  \npublic __gc struct E {  \n   f* _E;  \npublic:  \n   E() { _E = 0; }  \n  \n   __event void add_E1(f* d) { _E += d; }  \n  \n   static void Go() {  \n      E* pE = new E;  \n      pE->E1 += new f(pE, &E::handler);  \n      pE->E1(17);   \n      pE->E1 -= new f(pE, &E::handler);  \n      pE->E1(17);   \n   }  \n  \nprivate:  \n   __event void raise_E1(int i) {  \n      if (_E)  \n         _E(i);  \n   }  \n  \nprotected:  \n   __event void remove_E1(f* d) {  \n      _E -= d;  \n   }  \n};  \n```  \n  \n The new syntax simplifies the declaration, as the following translation demonstrates. An event specifies the two or three methods enclosed in a pair of braces  and placed immediately after the declaration of the event and its associated delegate type, as shown here:  \n  \n```  \npublic delegate void f( int );  \npublic ref struct E {  \nprivate:  \n   f^ _E; // delegates are also reference types  \n  \npublic:  \n   E() {  // note the replacement of 0 with nullptr!  \n      _E = nullptr;   \n   }  \n  \n   // the new aggregate syntax of an explicit event declaration  \n   event f^ E1 {  \n   public:  \n      void add( f^ d ) {  \n         _E += d;  \n      }  \n  \n   protected:  \n      void remove( f^ d ) {  \n         _E -= d;  \n      }  \n  \n   private:  \n      void raise( int i ) {  \n         if ( _E )  \n            _E( i );  \n      }  \n   }  \n  \n   static void Go() {  \n      E^ pE = gcnew E;  \n      pE->E1 += gcnew f( pE, &E::handler );  \n      pE->E1( 17 );   \n      pE->E1 -= gcnew f( pE, &E::handler );  \n      pE->E1( 17 );   \n   }  \n};  \n```  \n  \n## See Also  \n [Member Declarations within a Class or Interface (C++/CLI)](../dotnet/member-declarations-within-a-class-or-interface-cpp-cli.md)   \n [delegate  (C++ Component Extensions)](../windows/delegate-cpp-component-extensions.md)   \n [event](../windows/event-cpp-component-extensions.md)"}