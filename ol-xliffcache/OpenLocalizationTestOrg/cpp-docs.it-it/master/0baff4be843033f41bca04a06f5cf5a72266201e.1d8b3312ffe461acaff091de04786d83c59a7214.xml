{"nodes":[{"pos":[12,54],"content":"CContextMenuManager Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CContextMenuManager Class | Microsoft Docs","pos":[0,42]}]},{"content":"CContextMenuManager Class","pos":[631,656]},{"pos":[657,742],"content":"The <ph id=\"ph1\">`CContextMenuManager`</ph> object manages shortcut menus, also known as context menus.","source":"The `CContextMenuManager` object manages shortcut menus, also known as context menus."},{"content":"Syntax","pos":[751,757]},{"content":"Members","pos":[826,833]},{"content":"Public Constructors","pos":[843,862]},{"content":"Name","pos":[869,873]},{"content":"Description","pos":[874,885]},{"content":"CContextMenuManager::CContextMenuManager","pos":[924,964]},{"pos":[1009,1051],"content":"Constructs a <ph id=\"ph1\">`CContextMenuManager`</ph> object.","source":"Constructs a `CContextMenuManager` object."},{"content":"Destructor.","pos":[1100,1111]},{"content":"Public Methods","pos":[1122,1136]},{"content":"Name","pos":[1143,1147]},{"content":"Description","pos":[1148,1159]},{"content":"CContextMenuManager::AddMenu","pos":[1198,1226]},{"content":"Adds a new shortcut menu.","pos":[1259,1284]},{"content":"CContextMenuManager::GetMenuById","pos":[1290,1322]},{"content":"Returns a handle to the menu associated with the provided resource ID.","pos":[1359,1429]},{"content":"CContextMenuManager::GetMenuByName","pos":[1435,1469]},{"content":"Returns a handle to the menu that matches the provided menu name.","pos":[1508,1573]},{"content":"CContextMenuManager::GetMenuNames","pos":[1579,1612]},{"content":"Returns a list of menu names.","pos":[1650,1679]},{"content":"CContextMenuManager::LoadState","pos":[1685,1715]},{"content":"Loads shortcut menus stored in the Windows registry.","pos":[1750,1802]},{"content":"CContextMenuManager::ResetState","pos":[1808,1839]},{"content":"Clears the shortcut menus from the context menu manager.","pos":[1875,1931]},{"content":"CContextMenuManager::SaveState","pos":[1937,1967]},{"content":"Saves shortcut menus to the Windows registry.","pos":[2002,2047]},{"content":"CContextMenuManager::SetDontCloseActiveMenu","pos":[2053,2096]},{"pos":[2144,2253],"content":"Controls whether the <ph id=\"ph1\">`CContextMenuManager`</ph> closes the active shortcut menu when it shows a new shortcut menu.","source":"Controls whether the `CContextMenuManager` closes the active shortcut menu when it shows a new shortcut menu."},{"content":"CContextMenuManager::ShowPopupMenu","pos":[2259,2293]},{"content":"Displays the specified shortcut menu.","pos":[2332,2369]},{"content":"CContextMenuManager::TrackPopupMenu","pos":[2375,2410]},{"content":"Displays the specified shortcut menu.","pos":[2450,2487]},{"content":"Returns the index of the selected menu command.","pos":[2488,2535]},{"content":"Remarks","pos":[2545,2552]},{"pos":[2578,2655],"content":"manages shortcut menus and makes sure that they have a consistent appearance."},{"content":"You should not create a <ph id=\"ph1\">`CContextMenuManager`</ph> object manually.","pos":[2662,2724],"source":"You should not create a `CContextMenuManager` object manually."},{"content":"The framework of your application creates the <ph id=\"ph1\">`CContextMenuManager`</ph> object.","pos":[2725,2800],"source":" The framework of your application creates the `CContextMenuManager` object."},{"content":"However, you should call <bpt id=\"p1\">[</bpt>CWinAppEx::InitContextMenuManager<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__initcontextmenumanager)</ept> when your application is initialized.","pos":[2801,2973],"source":" However, you should call [CWinAppEx::InitContextMenuManager](../../mfc/reference/cwinappex-class.md#cwinappex__initcontextmenumanager) when your application is initialized."},{"content":"After initializing the context manager, use the method <bpt id=\"p1\">[</bpt>CWinAppEx::GetContextMenuManager<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__getcontextmenumanager)</ept> to obtain a pointer to the context manager for your application.","pos":[2974,3201],"source":" After initializing the context manager, use the method [CWinAppEx::GetContextMenuManager](../../mfc/reference/cwinappex-class.md#cwinappex__getcontextmenumanager) to obtain a pointer to the context manager for your application."},{"content":"You can create shortcut menus at runtime by calling <ph id=\"ph1\">`AddMenu`</ph>.","pos":[3208,3270],"source":"You can create shortcut menus at runtime by calling `AddMenu`."},{"content":"If you want to show the menu without first receiving user input, call <ph id=\"ph1\">`ShowPopupMenu`</ph>.","pos":[3271,3357],"source":" If you want to show the menu without first receiving user input, call `ShowPopupMenu`."},{"content":"is used when you want to create a menu and wait for user input.","pos":[3375,3438]},{"content":"returns the index of the selected command or 0 if the user exited without selecting anything.","pos":[3456,3549]},{"pos":[3556,3639],"content":"The <ph id=\"ph1\">`CContextMenuManager`</ph> can also save and load its state to the Windows registry.","source":"The `CContextMenuManager` can also save and load its state to the Windows registry."},{"content":"Example","pos":[3648,3655]},{"content":"The following example demonstrates how to add a menu to a <ph id=\"ph1\">`CContextMenuManager`</ph> object, and how not to close the active pop-up menu when the <ph id=\"ph2\">`CContextMenuManager`</ph> object displays a new pop-up menu.","pos":[3659,3856],"source":"The following example demonstrates how to add a menu to a `CContextMenuManager` object, and how not to close the active pop-up menu when the `CContextMenuManager` object displays a new pop-up menu."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Custom Pages sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[3857,3941],"source":" This code snippet is part of the [Custom Pages sample](../../visual-cpp-samples.md)."},{"pos":[3959,3980],"content":"NVC_MFC_CustomPages#4"},{"content":"Inheritance Hierarchy","pos":[4060,4081]},{"content":"CObject","pos":[4086,4093]},{"content":"CContextMenuManager","pos":[4140,4159]},{"content":"Requirements","pos":[4219,4231]},{"pos":[4235,4270],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcontextmenumanager.h","source":"**Header:** afxcontextmenumanager.h"},{"pos":[4325,4353],"content":"CContextMenuManager::AddMenu"},{"pos":[4357,4461],"content":"Adds a new shortcut menu to the <bpt id=\"p1\">[</bpt>CContextMenuManager<ept id=\"p1\">](../../mfc/reference/ccontextmenumanager-class.md)</ept>.","source":"Adds a new shortcut menu to the [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md)."},{"content":"Parameters","pos":[4615,4625]},{"content":"[in]","pos":[4629,4633]},{"content":"A resource ID for a string that contains the name for the new menu.","pos":[4655,4722]},{"content":"[in]","pos":[4729,4733]},{"content":"The menu resource ID.","pos":[4751,4772]},{"content":"[in]","pos":[4779,4783]},{"content":"A string that contains the name for the new menu.","pos":[4798,4847]},{"content":"Return Value","pos":[4857,4869]},{"content":"Nonzero if the method was successful; 0 if the method fails.","pos":[4873,4933]},{"content":"Remarks","pos":[4943,4950]},{"pos":[4954,5078],"content":"This method fails if <ph id=\"ph1\">`uiMenuResId`</ph> is invalid or if another menu with the same name already is in the <ph id=\"ph2\">`CContextMenuManager`</ph>.","source":"This method fails if `uiMenuResId` is invalid or if another menu with the same name already is in the `CContextMenuManager`."},{"pos":[5145,5185],"content":"CContextMenuManager::CContextMenuManager"},{"pos":[5189,5281],"content":"Constructs a <bpt id=\"p1\">[</bpt>CContextMenuManager<ept id=\"p1\">](../../mfc/reference/ccontextmenumanager-class.md)</ept> object.","source":"Constructs a [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md) object."},{"content":"Remarks","pos":[5329,5336]},{"content":"In most cases, you should not create a <ph id=\"ph1\">`CContextMenuManager`</ph> manually.","pos":[5340,5410],"source":"In most cases, you should not create a `CContextMenuManager` manually."},{"content":"The framework of your application creates the <ph id=\"ph1\">`CContextMenuManager`</ph> object.","pos":[5411,5486],"source":" The framework of your application creates the `CContextMenuManager` object."},{"content":"You should call <bpt id=\"p1\">[</bpt>CWinAppEx::InitContextMenuManager<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__initcontextmenumanager)</ept> during the initialization of your application.","pos":[5487,5659],"source":" You should call [CWinAppEx::InitContextMenuManager](../../mfc/reference/cwinappex-class.md#cwinappex__initcontextmenumanager) during the initialization of your application."},{"content":"To get a pointer to the context manager, call <bpt id=\"p1\">[</bpt>CWinAppEx::GetContextMenuManager<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__getcontextmenumanager)</ept>.","pos":[5660,5814],"source":" To get a pointer to the context manager, call [CWinAppEx::GetContextMenuManager](../../mfc/reference/cwinappex-class.md#cwinappex__getcontextmenumanager)."},{"pos":[5873,5905],"content":"CContextMenuManager::GetMenuById"},{"content":"Returns a handle to the menu associated with a given resource ID.","pos":[5909,5974]},{"content":"Parameters","pos":[6044,6054]},{"content":"[in]","pos":[6058,6062]},{"content":"The resource ID for the menu.","pos":[6079,6108]},{"content":"Return Value","pos":[6118,6130]},{"pos":[6134,6201],"content":"A handle to the associated menu or <ph id=\"ph1\">`NULL`</ph> if the menu is not found.","source":"A handle to the associated menu or `NULL` if the menu is not found."},{"pos":[6262,6296],"content":"CContextMenuManager::GetMenuByName"},{"content":"Returns a handle to a specific menu.","pos":[6300,6336]},{"content":"Parameters","pos":[6447,6457]},{"content":"[in]","pos":[6461,6465]},{"content":"A string that contains the name of the menu to retrieve.","pos":[6480,6536]},{"content":"[out]","pos":[6543,6548]},{"content":"A pointer to an <ph id=\"ph1\">`UINT`</ph>.","pos":[6567,6590],"source":" A pointer to an `UINT`."},{"content":"This parameter contains the resource ID of the specified menu, if found.","pos":[6591,6663]},{"content":"Return Value","pos":[6673,6685]},{"content":"A handle to the menu that matches the name that was specified by <ph id=\"ph1\">`lpszName`</ph>.","pos":[6689,6765],"source":"A handle to the menu that matches the name that was specified by `lpszName`."},{"content":"if there is no menu called <ph id=\"ph1\">`lpszName`</ph>.","pos":[6773,6811],"source":" if there is no menu called `lpszName`."},{"content":"Remarks","pos":[6821,6828]},{"pos":[6832,6961],"content":"If this method finds a menu that matches <ph id=\"ph1\">`lpszName`</ph>, <ph id=\"ph2\">`GetMenuByName`</ph> stores the menu resource ID in the parameter <ph id=\"ph3\">`puiOrigResID`</ph>.","source":"If this method finds a menu that matches `lpszName`, `GetMenuByName` stores the menu resource ID in the parameter `puiOrigResID`."},{"pos":[7021,7054],"content":"CContextMenuManager::GetMenuNames"},{"pos":[7058,7174],"content":"Returns the list of menu names added to the <bpt id=\"p1\">[</bpt>CContextMenuManager<ept id=\"p1\">](../../mfc/reference/ccontextmenumanager-class.md)</ept>.","source":"Returns the list of menu names added to the [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md)."},{"content":"Parameters","pos":[7253,7263]},{"content":"[out]","pos":[7267,7272]},{"content":"A reference to a <bpt id=\"p1\">[</bpt>CStringList<ept id=\"p1\">](../../mfc/reference/cstringlist-class.md)</ept> parameter.","pos":[7290,7373],"source":" A reference to a [CStringList](../../mfc/reference/cstringlist-class.md) parameter."},{"content":"This method writes the list of menu names to this parameter.","pos":[7374,7434]},{"pos":[7491,7521],"content":"CContextMenuManager::LoadState"},{"pos":[7525,7667],"content":"Loads information associated with the <bpt id=\"p1\">[</bpt>CContextMenuManager Class<ept id=\"p1\">](../../mfc/reference/ccontextmenumanager-class.md)</ept> from the Windows registry.","source":"Loads information associated with the [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md) from the Windows registry."},{"content":"Parameters","pos":[7748,7758]},{"content":"[in]","pos":[7762,7766]},{"content":"A string that contains the relative path of a registry key.","pos":[7788,7847]},{"content":"Return Value","pos":[7857,7869]},{"content":"Nonzero if the method is successful; otherwise 0.","pos":[7873,7922]},{"content":"Remarks","pos":[7932,7939]},{"content":"The <ph id=\"ph1\">`lpszProfileName`</ph> parameter is not the absolute path for a registry entry.","pos":[7943,8021],"source":"The `lpszProfileName` parameter is not the absolute path for a registry entry."},{"content":"It is a relative path that is added to the end of the default registry key for your application.","pos":[8022,8118]},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](../../mfc/reference/cwinappex-class.md#cwinappex__setregistrybase)</ept> respectively.","pos":[8119,8384],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](../../mfc/reference/cwinappex-class.md#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](../../mfc/reference/cwinappex-class.md#cwinappex__setregistrybase) respectively."},{"pos":[8391,8515],"content":"Use the method <bpt id=\"p1\">[</bpt>CContextMenuManager::SaveState<ept id=\"p1\">](#ccontextmenumanager__savestate)</ept> to save the shortcut menus to the registry.","source":"Use the method [CContextMenuManager::SaveState](#ccontextmenumanager__savestate) to save the shortcut menus to the registry."},{"pos":[8573,8604],"content":"CContextMenuManager::ResetState"},{"pos":[8608,8747],"content":"Clears all items from the shortcut menus associated with the <bpt id=\"p1\">[</bpt>CContextMenuManager Class<ept id=\"p1\">](../../mfc/reference/ccontextmenumanager-class.md)</ept>.","source":"Clears all items from the shortcut menus associated with the [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md)."},{"content":"Return Value","pos":[8799,8811]},{"pos":[8822,8879],"content":"if the method is successful; <ph id=\"ph1\">`FALSE`</ph> if a failure occurs.","source":" if the method is successful; `FALSE` if a failure occurs."},{"content":"Remarks","pos":[8889,8896]},{"pos":[8900,8984],"content":"This method clears the pop-up menus and removes them from the <ph id=\"ph1\">`CContextMenuManager`</ph>.","source":"This method clears the pop-up menus and removes them from the `CContextMenuManager`."},{"pos":[9041,9071],"content":"CContextMenuManager::SaveState"},{"pos":[9075,9215],"content":"Saves information associated with the <bpt id=\"p1\">[</bpt>CContextMenuManager Class<ept id=\"p1\">](../../mfc/reference/ccontextmenumanager-class.md)</ept> to the Windows registry.","source":"Saves information associated with the [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md) to the Windows registry."},{"content":"Parameters","pos":[9296,9306]},{"content":"[in]","pos":[9310,9314]},{"content":"A string that contains the relative path of a registry key.","pos":[9336,9395]},{"content":"Return Value","pos":[9405,9417]},{"content":"Nonzero if the method is successful; otherwise 0.","pos":[9421,9470]},{"content":"Remarks","pos":[9480,9487]},{"content":"The <ph id=\"ph1\">`lpszProfileName`</ph> parameter is not the absolute path for a registry entry.","pos":[9491,9569],"source":"The `lpszProfileName` parameter is not the absolute path for a registry entry."},{"content":"It is a relative path that is added to the end of the default registry key for your application.","pos":[9570,9666]},{"content":"To get or set the default registry key, use the methods <bpt id=\"p1\">[</bpt>CWinAppEx::GetRegistryBase<ept id=\"p1\">](../../mfc/reference/cwinappex-class.md#cwinappex__getregistrybase)</ept> and <bpt id=\"p2\">[</bpt>CWinAppEx::SetRegistryBase<ept id=\"p2\">](../../mfc/reference/cwinappex-class.md#cwinappex__setregistrybase)</ept> respectively.","pos":[9667,9932],"source":" To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](../../mfc/reference/cwinappex-class.md#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](../../mfc/reference/cwinappex-class.md#cwinappex__setregistrybase) respectively."},{"pos":[9939,10065],"content":"Use the method <bpt id=\"p1\">[</bpt>CContextMenuManager::LoadState<ept id=\"p1\">](#ccontextmenumanager__loadstate)</ept> to load the shortcut menus from the registry.","source":"Use the method [CContextMenuManager::LoadState](#ccontextmenumanager__loadstate) to load the shortcut menus from the registry."},{"pos":[10135,10178],"content":"CContextMenuManager::SetDontCloseActiveMenu"},{"pos":[10182,10340],"content":"Controls whether the <bpt id=\"p1\">[</bpt>CContextMenuManager<ept id=\"p1\">](../../mfc/reference/ccontextmenumanager-class.md)</ept> closes the active pop-up menu when it displays a new pop-up menu.","source":"Controls whether the [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md) closes the active pop-up menu when it displays a new pop-up menu."},{"content":"Parameters","pos":[10413,10423]},{"content":"[in]","pos":[10427,10431]},{"content":"A Boolean parameter that controls whether to close the active pop-up menu.","pos":[10442,10516]},{"content":"A value of <ph id=\"ph1\">`TRUE`</ph> indicates the active pop-up menu is not closed.","pos":[10517,10582],"source":" A value of `TRUE` indicates the active pop-up menu is not closed."},{"content":"indicates that the active pop-up menu is closed.","pos":[10591,10639]},{"content":"Remarks","pos":[10649,10656]},{"pos":[10660,10728],"content":"By default, the <ph id=\"ph1\">`CContextMenuManager`</ph> closes the active pop-up menu.","source":"By default, the `CContextMenuManager` closes the active pop-up menu."},{"pos":[10789,10823],"content":"CContextMenuManager::ShowPopupMenu"},{"content":"Displays the specified shortcut menu.","pos":[10827,10864]},{"content":"Parameters","pos":[11262,11272]},{"content":"[in]","pos":[11276,11280]},{"content":"The resource ID of the menu that this method will display.","pos":[11298,11356]},{"content":"[in]","pos":[11363,11367]},{"content":"The horizontal offset for the shortcut menu in client coordinates.","pos":[11375,11441]},{"content":"[in]","pos":[11448,11452]},{"content":"The vertical offset for the shortcut menu in client coordinates","pos":[11460,11523]},{"content":"[in]","pos":[11530,11534]},{"content":"A pointer to the parent window of the shortcut menu.","pos":[11550,11602]},{"content":"[in]","pos":[11609,11613]},{"content":"A Boolean parameter that indicates how messages are routed.","pos":[11631,11690]},{"content":"If <ph id=\"ph1\">`bOwnMessage`</ph> is <ph id=\"ph2\">`FALSE`</ph>, standard MFC routing is used.","pos":[11691,11749],"source":" If `bOwnMessage` is `FALSE`, standard MFC routing is used."},{"content":"Otherwise, <ph id=\"ph1\">`pWndOwner`</ph> receives the messages.","pos":[11750,11795],"source":" Otherwise, `pWndOwner` receives the messages."},{"content":"[in]","pos":[11802,11806]},{"content":"The handle of the menu that this method will display.","pos":[11823,11876]},{"content":"[in]","pos":[11883,11887]},{"content":"A Boolean parameter that indicates whether the menu will be automatically destroyed.","pos":[11906,11990]},{"content":"[in]","pos":[11997,12001]},{"content":"A Boolean parameter that indicates how the menu items are aligned.","pos":[12019,12085]},{"content":"If <ph id=\"ph1\">`bRightAlign`</ph> is <ph id=\"ph2\">`TRUE`</ph>, the menu is right-aligned for right-to-left reading order.","pos":[12086,12172],"source":" If `bRightAlign` is `TRUE`, the menu is right-aligned for right-to-left reading order."},{"content":"Return Value","pos":[12182,12194]},{"content":"The first method overload returns nonzero if the method shows the menu successfully; otherwise 0.","pos":[12198,12295]},{"content":"The second method overload returns a pointer to <bpt id=\"p1\">[</bpt>CMFCPopupMenu<ept id=\"p1\">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> if the shortcut menu displays correctly; otherwise <ph id=\"ph1\">`NULL`</ph>.","pos":[12296,12462],"source":" The second method overload returns a pointer to [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) if the shortcut menu displays correctly; otherwise `NULL`."},{"content":"Remarks","pos":[12472,12479]},{"content":"This method resembles the method <bpt id=\"p1\">[</bpt>CContextMenuManager::TrackPopupMenu<ept id=\"p1\">](#ccontextmenumanager__trackpopupmenu)</ept> in that both methods display a shortcut menu.","pos":[12483,12637],"source":"This method resembles the method [CContextMenuManager::TrackPopupMenu](#ccontextmenumanager__trackpopupmenu) in that both methods display a shortcut menu."},{"content":"However, <ph id=\"ph1\">`TrackPopupMenu`</ph> returns the index of the selected menu command.","pos":[12638,12711],"source":" However, `TrackPopupMenu` returns the index of the selected menu command."},{"content":"If the parameter <ph id=\"ph1\">`bAutoDestroy`</ph> is <ph id=\"ph2\">`FALSE`</ph>, you must manually call the inherited <ph id=\"ph3\">`DestroyMenu`</ph> method to release memory resources.","pos":[12718,12848],"source":"If the parameter `bAutoDestroy` is `FALSE`, you must manually call the inherited `DestroyMenu` method to release memory resources."},{"content":"The default implementation of <ph id=\"ph1\">`ShowPopupMenu`</ph> does not use the parameter <ph id=\"ph2\">`bAutoDestroy`</ph>.","pos":[12849,12937],"source":" The default implementation of `ShowPopupMenu` does not use the parameter `bAutoDestroy`."},{"content":"It is provided for future use or for custom classes derived from the <bpt id=\"p1\">[</bpt>CContextMenuManager Class<ept id=\"p1\">](../../mfc/reference/ccontextmenumanager-class.md)</ept>.","pos":[12938,13085],"source":" It is provided for future use or for custom classes derived from the [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md)."},{"pos":[13147,13182],"content":"CContextMenuManager::TrackPopupMenu"},{"content":"Displays the specified shortcut menu and returns the index of the selected shortcut menu command.","pos":[13186,13283]},{"content":"Parameters","pos":[13441,13451]},{"content":"[in]","pos":[13455,13459]},{"content":"The handle of the shortcut menu that this method displays.","pos":[13476,13534]},{"content":"[in]","pos":[13541,13545]},{"content":"The horizontal offset for the shortcut menu in client coordinates.","pos":[13553,13619]},{"content":"[in]","pos":[13626,13630]},{"content":"The vertical offset for the shortcut menu in client coordinates.","pos":[13638,13702]},{"content":"[in]","pos":[13709,13713]},{"content":"A pointer to the parent window of the shortcut menu.","pos":[13729,13781]},{"content":"[in]","pos":[13788,13792]},{"content":"A Boolean parameter that indicates how menu items are aligned.","pos":[13810,13872]},{"content":"If <ph id=\"ph1\">`bRightAlign`</ph> is <ph id=\"ph2\">`TRUE`</ph>, the menu is right-aligned for right-to-left reading order.","pos":[13873,13959],"source":" If `bRightAlign` is `TRUE`, the menu is right-aligned for right-to-left reading order."},{"content":"If <ph id=\"ph1\">`bRightAlign`</ph> is <ph id=\"ph2\">`FALSE`</ph>, the menu is left-aligned for left-to-right reading order.","pos":[13960,14046],"source":" If `bRightAlign` is `FALSE`, the menu is left-aligned for left-to-right reading order."},{"content":"Return Value","pos":[14056,14068]},{"content":"The menu command ID of the command that the user chooses; 0 if the user closes the shortcut menu without selecting a menu command.","pos":[14072,14202]},{"content":"Remarks","pos":[14212,14219]},{"content":"This method functions as a modal call to display a shortcut menu.","pos":[14223,14288]},{"content":"The application will not continue to the following line in code until the user either closes the shortcut menu or selects a command.","pos":[14289,14421]},{"content":"An alternative method that you can use to display a shortcut menu is <bpt id=\"p1\">[</bpt>CContextMenuManager::ShowPopupMenu<ept id=\"p1\">](#ccontextmenumanager__showpopupmenu)</ept>.","pos":[14422,14565],"source":" An alternative method that you can use to display a shortcut menu is [CContextMenuManager::ShowPopupMenu](#ccontextmenumanager__showpopupmenu)."},{"content":"That method is not a modal call and will not return the ID of the selected command.","pos":[14566,14649]},{"content":"See Also","pos":[14658,14666]},{"content":"Hierarchy Chart","pos":[14671,14686]},{"content":"Classes","pos":[14723,14730]},{"content":"CWinAppEx Class","pos":[14773,14788]}],"content":"---\ntitle: \"CContextMenuManager Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CContextMenuManager\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CContextMenuManager class\"\nms.assetid: 1de20640-243c-47e1-85de-1baa4153bc83\ncaps.latest.revision: 32\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CContextMenuManager Class\nThe `CContextMenuManager` object manages shortcut menus, also known as context menus.  \n  \n## Syntax  \n  \n```  \nclass CContextMenuManager : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CContextMenuManager::CContextMenuManager](#ccontextmenumanager__ccontextmenumanager)|Constructs a `CContextMenuManager` object.|  \n|`CContextMenuManager::~CContextMenuManager`|Destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CContextMenuManager::AddMenu](#ccontextmenumanager__addmenu)|Adds a new shortcut menu.|  \n|[CContextMenuManager::GetMenuById](#ccontextmenumanager__getmenubyid)|Returns a handle to the menu associated with the provided resource ID.|  \n|[CContextMenuManager::GetMenuByName](#ccontextmenumanager__getmenubyname)|Returns a handle to the menu that matches the provided menu name.|  \n|[CContextMenuManager::GetMenuNames](#ccontextmenumanager__getmenunames)|Returns a list of menu names.|  \n|[CContextMenuManager::LoadState](#ccontextmenumanager__loadstate)|Loads shortcut menus stored in the Windows registry.|  \n|[CContextMenuManager::ResetState](#ccontextmenumanager__resetstate)|Clears the shortcut menus from the context menu manager.|  \n|[CContextMenuManager::SaveState](#ccontextmenumanager__savestate)|Saves shortcut menus to the Windows registry.|  \n|[CContextMenuManager::SetDontCloseActiveMenu](#ccontextmenumanager__setdontcloseactivemenu)|Controls whether the `CContextMenuManager` closes the active shortcut menu when it shows a new shortcut menu.|  \n|[CContextMenuManager::ShowPopupMenu](#ccontextmenumanager__showpopupmenu)|Displays the specified shortcut menu.|  \n|[CContextMenuManager::TrackPopupMenu](#ccontextmenumanager__trackpopupmenu)|Displays the specified shortcut menu. Returns the index of the selected menu command.|  \n  \n## Remarks  \n `CContextMenuManager` manages shortcut menus and makes sure that they have a consistent appearance.  \n  \n You should not create a `CContextMenuManager` object manually. The framework of your application creates the `CContextMenuManager` object. However, you should call [CWinAppEx::InitContextMenuManager](../../mfc/reference/cwinappex-class.md#cwinappex__initcontextmenumanager) when your application is initialized. After initializing the context manager, use the method [CWinAppEx::GetContextMenuManager](../../mfc/reference/cwinappex-class.md#cwinappex__getcontextmenumanager) to obtain a pointer to the context manager for your application.  \n  \n You can create shortcut menus at runtime by calling `AddMenu`. If you want to show the menu without first receiving user input, call `ShowPopupMenu`. `TrackPopupMenu` is used when you want to create a menu and wait for user input. `TrackPopupMenu` returns the index of the selected command or 0 if the user exited without selecting anything.  \n  \n The `CContextMenuManager` can also save and load its state to the Windows registry.  \n  \n## Example  \n The following example demonstrates how to add a menu to a `CContextMenuManager` object, and how not to close the active pop-up menu when the `CContextMenuManager` object displays a new pop-up menu. This code snippet is part of the [Custom Pages sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_CustomPages#4](../../mfc/reference/codesnippet/cpp/ccontextmenumanager-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md)  \n  \n## Requirements  \n **Header:** afxcontextmenumanager.h  \n  \n##  <a name=\"ccontextmenumanager__addmenu\"></a>  CContextMenuManager::AddMenu  \n Adds a new shortcut menu to the [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md).  \n  \n```  \nBOOL AddMenu(\n    UINT uiMenuNameResId,  \n    UINT uiMenuResId);\n\n \nBOOL AddMenu(\n    LPCTSTR lpszName,  \n    UINT uiMenuResId);\n```  \n  \n### Parameters  \n [in] `uiMenuNameResId`  \n A resource ID for a string that contains the name for the new menu.  \n  \n [in] `uiMenuResId`  \n The menu resource ID.  \n  \n [in] `lpszName`  \n A string that contains the name for the new menu.  \n  \n### Return Value  \n Nonzero if the method was successful; 0 if the method fails.  \n  \n### Remarks  \n This method fails if `uiMenuResId` is invalid or if another menu with the same name already is in the `CContextMenuManager`.  \n  \n##  <a name=\"ccontextmenumanager__ccontextmenumanager\"></a>  CContextMenuManager::CContextMenuManager  \n Constructs a [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md) object.  \n  \n```  \nCContextMenuManager();\n```  \n  \n### Remarks  \n In most cases, you should not create a `CContextMenuManager` manually. The framework of your application creates the `CContextMenuManager` object. You should call [CWinAppEx::InitContextMenuManager](../../mfc/reference/cwinappex-class.md#cwinappex__initcontextmenumanager) during the initialization of your application. To get a pointer to the context manager, call [CWinAppEx::GetContextMenuManager](../../mfc/reference/cwinappex-class.md#cwinappex__getcontextmenumanager).  \n  \n##  <a name=\"ccontextmenumanager__getmenubyid\"></a>  CContextMenuManager::GetMenuById  \n Returns a handle to the menu associated with a given resource ID.  \n  \n```  \nHMENU GetMenuById(UINT nMenuResId) const;\n\n \n```  \n  \n### Parameters  \n [in] `nMenuResId`  \n The resource ID for the menu.  \n  \n### Return Value  \n A handle to the associated menu or `NULL` if the menu is not found.  \n  \n##  <a name=\"ccontextmenumanager__getmenubyname\"></a>  CContextMenuManager::GetMenuByName  \n Returns a handle to a specific menu.  \n  \n```  \nHMENU GetMenuByName(\n    LPCTSTR lpszName,  \n    UINT* puiOrigResID = NULL) const;\n\n \n```  \n  \n### Parameters  \n [in] `lpszName`  \n A string that contains the name of the menu to retrieve.  \n  \n [out] `puiOrigResID`  \n A pointer to an `UINT`. This parameter contains the resource ID of the specified menu, if found.  \n  \n### Return Value  \n A handle to the menu that matches the name that was specified by `lpszName`. `NULL` if there is no menu called `lpszName`.  \n  \n### Remarks  \n If this method finds a menu that matches `lpszName`, `GetMenuByName` stores the menu resource ID in the parameter `puiOrigResID`.  \n  \n##  <a name=\"ccontextmenumanager__getmenunames\"></a>  CContextMenuManager::GetMenuNames  \n Returns the list of menu names added to the [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md).  \n  \n```  \nvoid GetMenuNames(CStringList& listOfNames) const;\n\n \n```  \n  \n### Parameters  \n [out] `listOfNames`  \n A reference to a [CStringList](../../mfc/reference/cstringlist-class.md) parameter. This method writes the list of menu names to this parameter.  \n  \n##  <a name=\"ccontextmenumanager__loadstate\"></a>  CContextMenuManager::LoadState  \n Loads information associated with the [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md) from the Windows registry.  \n  \n```  \nvirtual BOOL LoadState(LPCTSTR lpszProfileName = NULL);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n A string that contains the relative path of a registry key.  \n  \n### Return Value  \n Nonzero if the method is successful; otherwise 0.  \n  \n### Remarks  \n The `lpszProfileName` parameter is not the absolute path for a registry entry. It is a relative path that is added to the end of the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](../../mfc/reference/cwinappex-class.md#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](../../mfc/reference/cwinappex-class.md#cwinappex__setregistrybase) respectively.  \n  \n Use the method [CContextMenuManager::SaveState](#ccontextmenumanager__savestate) to save the shortcut menus to the registry.  \n  \n##  <a name=\"ccontextmenumanager__resetstate\"></a>  CContextMenuManager::ResetState  \n Clears all items from the shortcut menus associated with the [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md).  \n  \n```  \nvirtual BOOL ResetState();\n```  \n  \n### Return Value  \n `TRUE` if the method is successful; `FALSE` if a failure occurs.  \n  \n### Remarks  \n This method clears the pop-up menus and removes them from the `CContextMenuManager`.  \n  \n##  <a name=\"ccontextmenumanager__savestate\"></a>  CContextMenuManager::SaveState  \n Saves information associated with the [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md) to the Windows registry.  \n  \n```  \nvirtual BOOL SaveState(LPCTSTR lpszProfileName = NULL);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n A string that contains the relative path of a registry key.  \n  \n### Return Value  \n Nonzero if the method is successful; otherwise 0.  \n  \n### Remarks  \n The `lpszProfileName` parameter is not the absolute path for a registry entry. It is a relative path that is added to the end of the default registry key for your application. To get or set the default registry key, use the methods [CWinAppEx::GetRegistryBase](../../mfc/reference/cwinappex-class.md#cwinappex__getregistrybase) and [CWinAppEx::SetRegistryBase](../../mfc/reference/cwinappex-class.md#cwinappex__setregistrybase) respectively.  \n  \n Use the method [CContextMenuManager::LoadState](#ccontextmenumanager__loadstate) to load the shortcut menus from the registry.  \n  \n##  <a name=\"ccontextmenumanager__setdontcloseactivemenu\"></a>  CContextMenuManager::SetDontCloseActiveMenu  \n Controls whether the [CContextMenuManager](../../mfc/reference/ccontextmenumanager-class.md) closes the active pop-up menu when it displays a new pop-up menu.  \n  \n```  \nvoid SetDontCloseActiveMenu (BOOL bSet = TRUE);\n```  \n  \n### Parameters  \n [in] `bSet`  \n A Boolean parameter that controls whether to close the active pop-up menu. A value of `TRUE` indicates the active pop-up menu is not closed. `FALSE` indicates that the active pop-up menu is closed.  \n  \n### Remarks  \n By default, the `CContextMenuManager` closes the active pop-up menu.  \n  \n##  <a name=\"ccontextmenumanager__showpopupmenu\"></a>  CContextMenuManager::ShowPopupMenu  \n Displays the specified shortcut menu.  \n  \n```  \nvirtual BOOL ShowPopupMenu(\n    UINT uiMenuResId,  \n    int x,  \n    int y,  \n    CWnd* pWndOwner,  \n    BOOL bOwnMessage = FALSE,  \n    BOOL bRightAlign = FALSE);\n\n \nvirtual CMFCPopupMenu* ShowPopupMenu(\n    HMENU hmenuPopup,  \n    int x,  \n    int y,  \n    CWnd* pWndOwner,  \n    BOOL bOwnMessage = FALSE,  \n    BOOL bAutoDestroy = TRUE,  \n    BOOL bRightAlign = FALSE);\n```  \n  \n### Parameters  \n [in] `uiMenuResId`  \n The resource ID of the menu that this method will display.  \n  \n [in] `x`  \n The horizontal offset for the shortcut menu in client coordinates.  \n  \n [in] `y`  \n The vertical offset for the shortcut menu in client coordinates  \n  \n [in] `pWndOwner`  \n A pointer to the parent window of the shortcut menu.  \n  \n [in] `bOwnMessage`  \n A Boolean parameter that indicates how messages are routed. If `bOwnMessage` is `FALSE`, standard MFC routing is used. Otherwise, `pWndOwner` receives the messages.  \n  \n [in] `hmenuPopup`  \n The handle of the menu that this method will display.  \n  \n [in] `bAutoDestroy`  \n A Boolean parameter that indicates whether the menu will be automatically destroyed.  \n  \n [in] `bRightAlign`  \n A Boolean parameter that indicates how the menu items are aligned. If `bRightAlign` is `TRUE`, the menu is right-aligned for right-to-left reading order.  \n  \n### Return Value  \n The first method overload returns nonzero if the method shows the menu successfully; otherwise 0. The second method overload returns a pointer to [CMFCPopupMenu](../../mfc/reference/cmfcpopupmenu-class.md) if the shortcut menu displays correctly; otherwise `NULL`.  \n  \n### Remarks  \n This method resembles the method [CContextMenuManager::TrackPopupMenu](#ccontextmenumanager__trackpopupmenu) in that both methods display a shortcut menu. However, `TrackPopupMenu` returns the index of the selected menu command.  \n  \n If the parameter `bAutoDestroy` is `FALSE`, you must manually call the inherited `DestroyMenu` method to release memory resources. The default implementation of `ShowPopupMenu` does not use the parameter `bAutoDestroy`. It is provided for future use or for custom classes derived from the [CContextMenuManager Class](../../mfc/reference/ccontextmenumanager-class.md).  \n  \n##  <a name=\"ccontextmenumanager__trackpopupmenu\"></a>  CContextMenuManager::TrackPopupMenu  \n Displays the specified shortcut menu and returns the index of the selected shortcut menu command.  \n  \n```  \nvirtual UINT TrackPopupMenu(\n    HMENU hmenuPopup,  \n    int x,  \n    int y,  \n    CWnd* pWndOwner,  \n    BOOL bRightAlign = FALSE);\n```  \n  \n### Parameters  \n [in] `hmenuPopup`  \n The handle of the shortcut menu that this method displays.  \n  \n [in] `x`  \n The horizontal offset for the shortcut menu in client coordinates.  \n  \n [in] `y`  \n The vertical offset for the shortcut menu in client coordinates.  \n  \n [in] `pWndOwner`  \n A pointer to the parent window of the shortcut menu.  \n  \n [in] `bRightAlign`  \n A Boolean parameter that indicates how menu items are aligned. If `bRightAlign` is `TRUE`, the menu is right-aligned for right-to-left reading order. If `bRightAlign` is `FALSE`, the menu is left-aligned for left-to-right reading order.  \n  \n### Return Value  \n The menu command ID of the command that the user chooses; 0 if the user closes the shortcut menu without selecting a menu command.  \n  \n### Remarks  \n This method functions as a modal call to display a shortcut menu. The application will not continue to the following line in code until the user either closes the shortcut menu or selects a command. An alternative method that you can use to display a shortcut menu is [CContextMenuManager::ShowPopupMenu](#ccontextmenumanager__showpopupmenu). That method is not a modal call and will not return the ID of the selected command.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CWinAppEx Class](../../mfc/reference/cwinappex-class.md)\n"}