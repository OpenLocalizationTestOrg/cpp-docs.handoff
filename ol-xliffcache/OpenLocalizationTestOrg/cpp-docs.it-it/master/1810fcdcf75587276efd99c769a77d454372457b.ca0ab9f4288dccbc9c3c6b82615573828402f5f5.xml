{"nodes":[{"pos":[12,48],"content":"Pointers to Members | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Pointers to Members | Microsoft Docs","pos":[0,36]}]},{"content":"Pointers to Members","pos":[706,725]},{"content":"Declarations of pointers to members are special cases of pointer declarations.","pos":[726,804]},{"content":"They are declared using the following sequence:","pos":[806,853]},{"content":"The declaration specifier:","pos":[1037,1063]},{"content":"An optional storage class specifier.","pos":[1077,1113]},{"pos":[1127,1175],"content":"Optional <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> and/or <ph id=\"ph1\">`volatile`</ph> specifiers.","source":"Optional **const** and/or `volatile` specifiers."},{"content":"The type specifier: the name of a type.","pos":[1189,1228]},{"content":"This is the type of the member to be pointed to, not the class.","pos":[1230,1293]},{"content":"The declarator:","pos":[1303,1318]},{"content":"An optional Microsoft specific modifier.","pos":[1332,1372]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Microsoft-Specific Modifiers<ept id=\"p1\">](../cpp/microsoft-specific-modifiers.md)</ept>.","pos":[1373,1470],"source":" For more information, see [Microsoft-Specific Modifiers](../cpp/microsoft-specific-modifiers.md)."},{"content":"The qualified name of the class containing the members to be pointed to.","pos":[1484,1556]},{"content":"The :: operator.","pos":[1571,1587]},{"pos":[1601,1621],"content":"The <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> operator.","source":"The **\\*** operator."},{"pos":[1635,1683],"content":"Optional <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> and/or <ph id=\"ph1\">`volatile`</ph> specifiers.","source":"Optional **const** and/or `volatile` specifiers."},{"content":"The identifier naming the pointer to member.","pos":[1697,1741]},{"content":"An optional initializer:","pos":[1755,1779]},{"pos":[1786,1805],"content":"The <bpt id=\"p1\">**</bpt><ph id=\"ph1\">=</ph><ept id=\"p1\">**</ept> operator.","source":"The **=** operator."},{"pos":[1812,1831],"content":"The <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;</ph><ept id=\"p1\">**</ept> operator.","source":"The **&** operator."},{"content":"The qualified name of the class.","pos":[1838,1870]},{"pos":[1877,1895],"content":"The <ph id=\"ph1\">`::`</ph> operator.","source":"The `::` operator."},{"content":"The name of a nonstatic member of the class of the appropriate type.","pos":[1902,1970]},{"content":"As always, multiple declarators (and any associated initializers) are allowed in a single declaration.","pos":[1977,2079]},{"content":"A pointer to a member of a class differs from a normal pointer because it has type information for the type of the member and for the class to which the member belongs.","pos":[2086,2254]},{"content":"A normal pointer identifies (has the address of) only a single object in memory.","pos":[2255,2335]},{"content":"A pointer to a member of a class identifies that member in any instance of the class.","pos":[2336,2421]},{"content":"The following example declares a class, <ph id=\"ph1\">`Window`</ph>, and some pointers to member data.","pos":[2422,2505],"source":" The following example declares a class, `Window`, and some pointers to member data."},{"content":"In the preceding example, <ph id=\"ph1\">`pwCaption`</ph> is a pointer to any member of class <ph id=\"ph2\">`Window`</ph> that has type <bpt id=\"p1\">**</bpt>char<ph id=\"ph3\">\\*</ph><ept id=\"p1\">**</ept>.","pos":[3124,3232],"source":"In the preceding example, `pwCaption` is a pointer to any member of class `Window` that has type **char\\***."},{"content":"The type of <ph id=\"ph1\">`pwCaption`</ph> is <ph id=\"ph2\">`char * Window::*`</ph>.","pos":[3233,3279],"source":" The type of `pwCaption` is `char * Window::*`."},{"content":"The next code fragment declares pointers to the <ph id=\"ph1\">`SetCaption`</ph> and <ph id=\"ph2\">`GetCaption`</ph> member functions.","pos":[3280,3375],"source":" The next code fragment declares pointers to the `SetCaption` and `GetCaption` member functions."},{"content":"The pointers <ph id=\"ph1\">`pfnwGC`</ph> and <ph id=\"ph2\">`pfnwSC`</ph> point to <ph id=\"ph3\">`GetCaption`</ph> and <ph id=\"ph4\">`SetCaption`</ph> of the <ph id=\"ph5\">`Window`</ph> class, respectively.","pos":[3519,3629],"source":"The pointers `pfnwGC` and `pfnwSC` point to `GetCaption` and `SetCaption` of the `Window` class, respectively."},{"content":"The code copies information to the window caption directly using the pointer to member <ph id=\"ph1\">`pwCaption`</ph>:","pos":[3630,3729],"source":" The code copies information to the window caption directly using the pointer to member `pwCaption`:"},{"content":"The difference between the <bpt id=\"p1\">**</bpt>.<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>","pos":[4277,4311],"source":"The difference between the **.\\***"},{"content":"and <bpt id=\"p1\">**</bpt>–&gt;<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> operators (the pointer-to-member operators) is that the <bpt id=\"p2\">**</bpt>.<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept>","pos":[4312,4388],"source":" and **–>\\*** operators (the pointer-to-member operators) is that the **.\\***"},{"content":"operator selects members given an object or object reference, while the <bpt id=\"p1\">**</bpt>–&gt;<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> operator selects members through a pointer.","pos":[4389,4513],"source":" operator selects members given an object or object reference, while the **–>\\*** operator selects members through a pointer."},{"content":"(For more about these operators, see <bpt id=\"p1\">[</bpt>Expressions with Pointer-to-Member Operators<ept id=\"p1\">](../cpp/pointer-to-member-operators-dot-star-and-star.md)</ept>.)","pos":[4514,4656],"source":" (For more about these operators, see [Expressions with Pointer-to-Member Operators](../cpp/pointer-to-member-operators-dot-star-and-star.md).)"},{"pos":[4663,4763],"content":"The result of the pointer-to-member operators is the type of the member — in this case, <bpt id=\"p1\">**</bpt>char <ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>.","source":"The result of the pointer-to-member operators is the type of the member — in this case, **char \\***."},{"pos":[4770,4883],"content":"The following code fragment invokes the member functions <ph id=\"ph1\">`GetCaption`</ph> and <ph id=\"ph2\">`SetCaption`</ph> using pointers to members:","source":"The following code fragment invokes the member functions `GetCaption` and `SetCaption` using pointers to members:"},{"content":"Restrictions on Pointers to Members","pos":[5295,5330]},{"content":"The address of a static member is not a pointer to a member.","pos":[5334,5394]},{"content":"It is a regular pointer to the one instance of the static member.","pos":[5395,5460]},{"content":"Because only one instance of a static member exists for all objects of a given class, the ordinary address-of <bpt id=\"p1\">**</bpt>(&amp;)<ept id=\"p1\">**</ept> and dereference <bpt id=\"p2\">**</bpt>(<ph id=\"ph1\">\\*</ph>)<ept id=\"p2\">**</ept> operators can be used.","pos":[5461,5626],"source":" Because only one instance of a static member exists for all objects of a given class, the ordinary address-of **(&)** and dereference **(\\*)** operators can be used."},{"content":"Pointers to Members and Virtual Functions","pos":[5635,5676]},{"content":"Invoking a virtual function through a pointer-to-member function works as if the function had been called directly; the correct function is looked up in the v-table and invoked.","pos":[5680,5857]},{"content":"The key to virtual functions working, as always, is invoking them through a pointer to a base class.","pos":[5864,5964]},{"content":"(For more information about virtual functions, see <bpt id=\"p1\">[</bpt>Virtual Functions<ept id=\"p1\">](../cpp/virtual-functions.md)</ept>.)","pos":[5965,6066],"source":" (For more information about virtual functions, see [Virtual Functions](../cpp/virtual-functions.md).)"},{"content":"The following code shows how to invoke a virtual function through a pointer-to-member function:","pos":[6073,6168]},{"content":"See Also","pos":[6995,7003]},{"content":"C++ Abstract Declarators","pos":[7008,7032]}],"content":"---\ntitle: \"Pointers to Members | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"declarations, pointers\"\n  - \"class members, pointers to\"\n  - \"pointers, to members\"\n  - \"members, pointers to\"\n  - \"pointers, declarations\"\nms.assetid: f42ddb79-9721-4e39-95b1-c56b55591f68\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Pointers to Members\nDeclarations of pointers to members are special cases of pointer declarations.  They are declared using the following sequence:  \n  \n```  \n[storage-class-specifiers] [cv-qualifiers] type-specifiers [ms-modifier]qualified-name ::* [cv-qualifiers] identifier  \n[= & qualified-name :: member-name];  \n```  \n  \n1.  The declaration specifier:  \n  \n    -   An optional storage class specifier.  \n  \n    -   Optional **const** and/or `volatile` specifiers.  \n  \n    -   The type specifier: the name of a type.  This is the type of the member to be pointed to, not the class.  \n  \n2.  The declarator:  \n  \n    -   An optional Microsoft specific modifier. For more information, see [Microsoft-Specific Modifiers](../cpp/microsoft-specific-modifiers.md).  \n  \n    -   The qualified name of the class containing the members to be pointed to.   \n  \n    -   The :: operator.  \n  \n    -   The **\\*** operator.  \n  \n    -   Optional **const** and/or `volatile` specifiers.  \n  \n    -   The identifier naming the pointer to member.  \n  \n    -   An optional initializer:  \n  \n The **=** operator.  \n  \n The **&** operator.  \n  \n The qualified name of the class.  \n  \n The `::` operator.  \n  \n The name of a nonstatic member of the class of the appropriate type.  \n  \n As always, multiple declarators (and any associated initializers) are allowed in a single declaration.  \n  \n A pointer to a member of a class differs from a normal pointer because it has type information for the type of the member and for the class to which the member belongs. A normal pointer identifies (has the address of) only a single object in memory. A pointer to a member of a class identifies that member in any instance of the class. The following example declares a class, `Window`, and some pointers to member data.  \n  \n```  \n// pointers_to_members1.cpp  \nclass Window  \n{  \npublic:  \n   Window();                               // Default constructor.  \n   Window( int x1, int y1,                 // Constructor specifying  \n   int x2, int y2 );                       //  window size.  \nbool SetCaption( const char *szTitle ); // Set window caption.  \n   const char *GetCaption();               // Get window caption.  \n   char *szWinCaption;                     // Window caption.  \n};  \n  \n// Declare a pointer to the data member szWinCaption.  \nchar * Window::* pwCaption = &Window::szWinCaption;  \nint main()  \n{  \n}  \n```  \n  \n In the preceding example, `pwCaption` is a pointer to any member of class `Window` that has type **char\\***. The type of `pwCaption` is `char * Window::*`. The next code fragment declares pointers to the `SetCaption` and `GetCaption` member functions.  \n  \n```  \nconst char * (Window::*pfnwGC)() = &Window::GetCaption;  \nbool (Window::*pfnwSC)( const char * ) = &Window::SetCaption;  \n```  \n  \n The pointers `pfnwGC` and `pfnwSC` point to `GetCaption` and `SetCaption` of the `Window` class, respectively. The code copies information to the window caption directly using the pointer to member `pwCaption`:  \n  \n```  \nWindow wMainWindow;  \nWindow *pwChildWindow = new Window;  \nchar   *szUntitled    = \"Untitled -  \";  \nint    cUntitledLen   = strlen( szUntitled );  \n  \nstrcpy_s( wMainWindow.*pwCaption, cUntitledLen, szUntitled );  \n(wMainWindow.*pwCaption)[cUntitledLen - 1] = '1';     //same as  \n//wMainWindow.SzWinCaption [cUntitledLen - 1] = '1';  \nstrcpy_s( pwChildWindow->*pwCaption, cUntitledLen, szUntitled );   \n(pwChildWindow->*pwCaption)[cUntitledLen - 1] = '2'; //same as //pwChildWindow->szWinCaption[cUntitledLen - 1] = '2';  \n```  \n  \n The difference between the **.\\*** and **–>\\*** operators (the pointer-to-member operators) is that the **.\\*** operator selects members given an object or object reference, while the **–>\\*** operator selects members through a pointer. (For more about these operators, see [Expressions with Pointer-to-Member Operators](../cpp/pointer-to-member-operators-dot-star-and-star.md).)  \n  \n The result of the pointer-to-member operators is the type of the member — in this case, **char \\***.  \n  \n The following code fragment invokes the member functions `GetCaption` and `SetCaption` using pointers to members:  \n  \n```  \n// Allocate a buffer.  \nenum {  \n    sizeOfBuffer = 100  \n};  \nchar szCaptionBase[sizeOfBuffer];  \n  \n// Copy the main window caption into the buffer  \n//  and append \" [View 1]\".  \nstrcpy_s( szCaptionBase, sizeOfBuffer, (wMainWindow.*pfnwGC)() );  \nstrcat_s( szCaptionBase, sizeOfBuffer, \" [View 1]\" );  \n// Set the child window's caption.  \n(pwChildWindow->*pfnwSC)( szCaptionBase );  \n```  \n  \n## Restrictions on Pointers to Members  \n The address of a static member is not a pointer to a member. It is a regular pointer to the one instance of the static member. Because only one instance of a static member exists for all objects of a given class, the ordinary address-of **(&)** and dereference **(\\*)** operators can be used.  \n  \n## Pointers to Members and Virtual Functions  \n Invoking a virtual function through a pointer-to-member function works as if the function had been called directly; the correct function is looked up in the v-table and invoked.  \n  \n The key to virtual functions working, as always, is invoking them through a pointer to a base class. (For more information about virtual functions, see [Virtual Functions](../cpp/virtual-functions.md).)  \n  \n The following code shows how to invoke a virtual function through a pointer-to-member function:  \n  \n```  \n// virtual_functions.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nclass Base  \n{  \npublic:  \nvirtual void Print();  \n};  \nvoid (Base ::* bfnPrint)() = &Base :: Print;  \nvoid Base :: Print()  \n{  \ncout << \"Print function for class Base\\n\";  \n}  \n  \nclass Derived : public Base  \n{  \npublic:  \nvoid Print();  // Print is still a virtual function.  \n};  \n  \nvoid Derived :: Print()  \n{  \ncout << \"Print function for class Derived\\n\";  \n}  \n  \nint main()  \n{  \n    Base   *bPtr;  \n    Base    bObject;  \nDerived dObject;  \nbPtr = &bObject;    // Set pointer to address of bObject.  \n(bPtr->*bfnPrint)();  \nbPtr = &dObject;    // Set pointer to address of dObject.  \n(bPtr->*bfnPrint)();  \n}  \n  \n//Output: Print function for class Base  \nPrint function for class Derived  \n```  \n  \n## See Also  \n [C++ Abstract Declarators](http://msdn.microsoft.com/en-us/e7e18c18-0cad-4450-942b-d27e1d4dd088)"}