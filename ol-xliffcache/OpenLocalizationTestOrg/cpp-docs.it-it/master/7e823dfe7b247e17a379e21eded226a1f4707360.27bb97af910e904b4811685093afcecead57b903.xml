{"nodes":[{"pos":[12,38],"content":"exp, expf | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"exp, expf | Microsoft Docs","pos":[0,26]}]},{"pos":[1036,1045],"content":"exp, expf","linkify":"exp, expf","nodes":[{"content":"exp, expf","pos":[0,9]}]},{"content":"Calculates the exponential.","pos":[1046,1073]},{"pos":[1082,1088],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1281,1291],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value.","pos":[1302,1323]},{"pos":[1332,1344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The <ph id=\"ph1\">`exp`</ph> function returns the exponential value of the floating-point parameter, <ph id=\"ph2\">`x`</ph>, if successful.","pos":[1348,1449],"source":"The `exp` function returns the exponential value of the floating-point parameter, `x`, if successful."},{"content":"That is, the result is e to the power <ph id=\"ph1\">`x`</ph>, where e is the base of the natural logarithm.","pos":[1450,1538],"source":" That is, the result is e to the power `x`, where e is the base of the natural logarithm."},{"content":"On overflow, the function returns INF (infinite) and on underflow, <ph id=\"ph1\">`exp`</ph> returns 0.","pos":[1539,1622],"source":" On overflow, the function returns INF (infinite) and on underflow, `exp` returns 0."},{"content":"Input","pos":[1629,1634]},{"content":"SEH Exception","pos":[1635,1648]},{"content":"Matherr Exception","pos":[1649,1666]},{"content":"± QNAN,IND","pos":[1731,1741]},{"content":"None","pos":[1742,1746]},{"content":"_DOMAIN","pos":[1747,1754]},{"content":"± ∞","pos":[1759,1762]},{"content":"INVALID","pos":[1763,1770]},{"content":"_DOMAIN","pos":[1771,1778]},{"content":"x ≥ 7.097827e+002","pos":[1783,1800]},{"content":"INEXACT+OVERFLOW","pos":[1801,1817]},{"content":"OVERFLOW","pos":[1818,1826]},{"content":"X ≤ -7.083964e+002","pos":[1831,1849]},{"content":"INEXACT+UNDERFLOW","pos":[1850,1867]},{"content":"UNDERFLOW","pos":[1868,1877]},{"content":"<ph id=\"ph1\">`exp`</ph> has an implementation that uses Streaming SIMD Extensions 2 (SSE2).","pos":[1885,1958],"source":"`exp` has an implementation that uses Streaming SIMD Extensions 2 (SSE2)."},{"content":"See <bpt id=\"p1\">[</bpt>_set_SSE2_enable<ept id=\"p1\">](../../c-runtime-library/reference/set-sse2-enable.md)</ept> for information and restrictions on using the SSE2 implementation.","pos":[1959,2102],"source":" See [_set_SSE2_enable](../../c-runtime-library/reference/set-sse2-enable.md) for information and restrictions on using the SSE2 implementation."},{"pos":[2111,2118],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"C++ allows overloading, so you can call overloads of <ph id=\"ph1\">`exp`</ph>.","pos":[2122,2181],"source":"C++ allows overloading, so you can call overloads of `exp`."},{"content":"In a C program, <ph id=\"ph1\">`exp`</ph> always takes and returns a double.","pos":[2182,2238],"source":" In a C program, `exp` always takes and returns a double."},{"pos":[2247,2259],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[2266,2274]},{"content":"Required header","pos":[2275,2290]},{"pos":[2336,2349],"content":"<ph id=\"ph1\">`exp`</ph>, <ph id=\"ph2\">`expf`</ph>","source":"`exp`, `expf`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt;","pos":[2350,2359],"source":"\\<math.h>"},{"pos":[2367,2491],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2500,2507],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2766,2791],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[2795,2877],"content":"<bpt id=\"p1\">[</bpt>System::Math::Exp<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.math.exp.aspx)</ept>","source":"[System::Math::Exp](https://msdn.microsoft.com/en-us/library/system.math.exp.aspx)"},{"pos":[2886,2894],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[2898,2974],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>log, logf, log10, log10f<ept id=\"p1\">](../../c-runtime-library/reference/log-logf-log10-log10f.md)</ept><ph id=\"ph1\"> </ph>","pos":[2977,3065],"source":" [log, logf, log10, log10f](../../c-runtime-library/reference/log-logf-log10-log10f.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_CIexp<ept id=\"p1\">](../../c-runtime-library/ciexp.md)</ept>","pos":[3068,3111],"source":" [_CIexp](../../c-runtime-library/ciexp.md)"}],"content":"---\ntitle: \"exp, expf | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"expf\"\n  - \"exp\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_expl\"\n  - \"expf\"\n  - \"exp\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"exponential calculations\"\n  - \"expf function\"\n  - \"calculating exponentials\"\n  - \"exp function\"\nms.assetid: 7070016d-1143-407e-9e9a-6b059bb88867\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# exp, expf\nCalculates the exponential.  \n  \n## Syntax  \n  \n```  \ndouble exp(   \n   double x  \n);  \nfloat exp(  \n   float x  \n);  // C++ only  \nlong double exp(  \n   long double x  \n);  // C++ only  \nfloat expf(   \n   float x  \n);  \n```  \n  \n#### Parameters  \n `x`  \n Floating-point value.  \n  \n## Return Value  \n The `exp` function returns the exponential value of the floating-point parameter, `x`, if successful. That is, the result is e to the power `x`, where e is the base of the natural logarithm. On overflow, the function returns INF (infinite) and on underflow, `exp` returns 0.  \n  \n|Input|SEH Exception|Matherr Exception|  \n|-----------|-------------------|-----------------------|  \n|± QNAN,IND|None|_DOMAIN|  \n|± ∞|INVALID|_DOMAIN|  \n|x ≥ 7.097827e+002|INEXACT+OVERFLOW|OVERFLOW|  \n|X ≤ -7.083964e+002|INEXACT+UNDERFLOW|UNDERFLOW|  \n  \n `exp` has an implementation that uses Streaming SIMD Extensions 2 (SSE2). See [_set_SSE2_enable](../../c-runtime-library/reference/set-sse2-enable.md) for information and restrictions on using the SSE2 implementation.  \n  \n## Remarks  \n C++ allows overloading, so you can call overloads of `exp`. In a C program, `exp` always takes and returns a double.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`exp`, `expf`|\\<math.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_exp.c  \n  \n#include <math.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   double x = 2.302585093, y;  \n  \n   y = exp( x );  \n   printf( \"exp( %f ) = %f\\n\", x, y );  \n}  \n```  \n  \n```Output  \nexp( 2.302585 ) = 10.000000  \n```  \n  \n## .NET Framework Equivalent  \n [System::Math::Exp](https://msdn.microsoft.com/en-us/library/system.math.exp.aspx)  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [log, logf, log10, log10f](../../c-runtime-library/reference/log-logf-log10-log10f.md)   \n [_CIexp](../../c-runtime-library/ciexp.md)"}