{"nodes":[{"pos":[12,60],"content":"OLE DB Provider Templates (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"OLE DB Provider Templates (C++) | Microsoft Docs","pos":[0,48]}]},{"content":"OLE DB Provider Templates (C++)","pos":[750,781]},{"content":"OLE DB is an important part of the Microsoft Universal Data Access strategy.","pos":[782,858]},{"content":"The OLE DB design allows high-performance data access from any data source.","pos":[859,934]},{"content":"Any tabular data is viewable through OLE DB regardless of whether it came from a database.","pos":[935,1025]},{"content":"The flexibility gives you a tremendous amount of power.","pos":[1026,1081]},{"content":"As explained in <bpt id=\"p1\">[</bpt>OLE DB Consumers and Providers<ept id=\"p1\">](../../data/oledb/ole-db-consumers-and-providers.md)</ept>, OLE DB uses the concept of consumers and providers.","pos":[1088,1241],"source":"As explained in [OLE DB Consumers and Providers](../../data/oledb/ole-db-consumers-and-providers.md), OLE DB uses the concept of consumers and providers."},{"content":"The consumer makes requests for data; the provider returns data in a tabular format to the consumer.","pos":[1242,1342]},{"content":"From a programming perspective, the most important implication of this model is that the provider must implement any call the consumer can make.","pos":[1343,1487]},{"content":"What Is a Provider?","pos":[1496,1515]},{"content":"An OLE DB provider is a set of COM objects that serve interface calls from a consumer object, transferring data in a tabular format from a durable source (called a data store) to the consumer.","pos":[1519,1711]},{"content":"Providers can be simple or complex.","pos":[1718,1753]},{"content":"The provider can support a minimal amount of functionality or a full-blown production quality provider by implementing more interfaces.","pos":[1754,1889]},{"content":"A provider can return a table, allow the client to determine the format of that table, and perform operations on that data.","pos":[1890,2013]},{"content":"Each provider implements a standard set of COM objects to handle requests from the client, with standard meaning that any OLE DB consumer can access data from any provider, regardless of language (such as C++ and Basic).","pos":[2020,2240]},{"content":"Each COM object contains several interfaces, some of which are required and some of which are optional.","pos":[2247,2350]},{"content":"By implementing the mandatory interfaces, a provider guarantees a minimum level of functionality (called compliance) that any client should be able to use.","pos":[2351,2506]},{"content":"A provider can implement optional interfaces to provide additional functionality.","pos":[2507,2588]},{"content":"<bpt id=\"p1\">[</bpt>The OLE DB Provider Template Architecture<ept id=\"p1\">](../../data/oledb/ole-db-provider-template-architecture.md)</ept> describes these interfaces in detail.","pos":[2589,2729],"source":"[The OLE DB Provider Template Architecture](../../data/oledb/ole-db-provider-template-architecture.md) describes these interfaces in detail."},{"content":"The client should always call <ph id=\"ph1\">`QueryInterface`</ph> to determine if a provider supports a given interface.","pos":[2730,2831],"source":" The client should always call `QueryInterface` to determine if a provider supports a given interface."},{"content":"OLE DB Specification Level Support","pos":[2840,2874]},{"content":"The OLE DB provider templates support the OLE DB version 2.7 specification.","pos":[2878,2953]},{"content":"Using the OLE DB provider templates, you can implement a level 0 compliant provider.","pos":[2954,3038]},{"content":"The Provider sample, for example, uses the templates to implement a non-SQL (MS-DOS) command server that executes the DOS DIR command to query the file system.","pos":[3039,3198]},{"content":"The Provider sample returns the directory information in a rowset, which is the standard OLE DB mechanism for returning tabular data.","pos":[3199,3332]},{"content":"The simplest type of provider supported by the OLE DB templates is a read-only provider with no commands.","pos":[3339,3444]},{"content":"Providers with commands are also supported, as are bookmarking and read/write capability.","pos":[3445,3534]},{"content":"You can implement a read/write provider by writing additional code.","pos":[3535,3602]},{"content":"Dynamic rowsets and transactions are not supported by the current version, but you can add them if you want.","pos":[3603,3711]},{"content":"When Do You Need to Create an OLE DB Provider?","pos":[3720,3766]},{"content":"You do not always need to create your own provider; Microsoft provides several prepackaged, standard providers in the <bpt id=\"p1\">**</bpt>Data Link Properties<ept id=\"p1\">**</ept> dialog box in Visual C++.","pos":[3770,3938],"source":"You do not always need to create your own provider; Microsoft provides several prepackaged, standard providers in the **Data Link Properties** dialog box in Visual C++."},{"content":"The main reason to create an OLE DB provider is to take advantage of the Universal Data Access strategy.","pos":[3939,4043]},{"content":"Some of advantages of doing so are:","pos":[4044,4079]},{"content":"Accessing data through any language such as C++, Basic, and Visual Basic Scripting Edition.","pos":[4089,4180]},{"content":"It allows different programmers in your organization to access the same data in the same way, regardless of what language they use.","pos":[4181,4312]},{"content":"Exposing your data to other data sources such as SQL Server, Excel, and Access.","pos":[4322,4401]},{"content":"This can be very useful if you want to transfer data among different formats.","pos":[4402,4479]},{"content":"Participating in crossâ€“data source (heterogeneous) operations.","pos":[4489,4551]},{"content":"This can be a very effective way of data warehousing.","pos":[4552,4605]},{"content":"By using OLE DB providers, you can keep data in its native format and still be able to access it in a simple operation.","pos":[4606,4725]},{"content":"Adding additional capabilities to your data, such as query processing.","pos":[4735,4805]},{"content":"Increasing performance of accessing data by controlling how it is manipulated.","pos":[4815,4893]},{"content":"Increasing robustness.","pos":[4903,4925]},{"content":"If you have a proprietary data format that only one programmer can access, you are at risk.","pos":[4926,5017]},{"content":"Using OLE DB providers, you can open that proprietary format to all your programmers.","pos":[5018,5103]},{"content":"Read-Only and Updatable Providers","pos":[5112,5145]},{"content":"Providers can vary greatly in complexity and functionality.","pos":[5149,5208]},{"content":"It is useful to categorize providers into read-only providers and updatable providers:","pos":[5209,5295]},{"content":"Visual C++ 6.0 supported only read-only providers.","pos":[5305,5355]},{"content":"<bpt id=\"p1\">[</bpt>Creating an OLE DB Provider<ept id=\"p1\">](../../data/oledb/creating-an-ole-db-provider.md)</ept> discusses how to create a read-only provider.","pos":[5356,5480],"source":"[Creating an OLE DB Provider](../../data/oledb/creating-an-ole-db-provider.md) discusses how to create a read-only provider."},{"content":"Visual C++ .NET supports updatable providers, which can update (write to) the data store.","pos":[5490,5579]},{"content":"For information about updatable providers, see <bpt id=\"p1\">[</bpt>Creating an Updatable Provider<ept id=\"p1\">](../../data/oledb/creating-an-updatable-provider.md)</ept>; the <bpt id=\"p2\">[</bpt>UpdatePV<ept id=\"p2\">](http://msdn.microsoft.com/en-us/c8bed873-223c-4a7d-af55-f90138c6f38f)</ept> sample is an example of an updatable provider.","pos":[5580,5844],"source":" For information about updatable providers, see [Creating an Updatable Provider](../../data/oledb/creating-an-updatable-provider.md); the [UpdatePV](http://msdn.microsoft.com/en-us/c8bed873-223c-4a7d-af55-f90138c6f38f) sample is an example of an updatable provider."},{"content":"For more information, see:","pos":[5851,5877]},{"content":"The OLE DB Provider Template Architecture","pos":[5888,5929]},{"content":"Creating an OLE DB Provider","pos":[6000,6027]},{"content":"OLE DB Programming","pos":[6088,6106]},{"content":"See Also","pos":[6156,6164]},{"content":"Data Access","pos":[6169,6180]},{"content":"OLE DB SDK Documentation","pos":[6259,6283]},{"content":"OLE DB Programmer's Reference","pos":[6346,6375]}],"content":"---\ntitle: \"OLE DB Provider Templates (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"OLE DB providers [C++], about providers\"\n  - \"databases [C++], OLE DB templates\"\n  - \"OLE DB provider templates [C++], about OLE DB provider templates\"\n  - \"templates [C++], OLE DB\"\nms.assetid: fccff85f-2af8-4500-82bd-6312d28a74b8\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# OLE DB Provider Templates (C++)\nOLE DB is an important part of the Microsoft Universal Data Access strategy. The OLE DB design allows high-performance data access from any data source. Any tabular data is viewable through OLE DB regardless of whether it came from a database. The flexibility gives you a tremendous amount of power.  \n  \n As explained in [OLE DB Consumers and Providers](../../data/oledb/ole-db-consumers-and-providers.md), OLE DB uses the concept of consumers and providers. The consumer makes requests for data; the provider returns data in a tabular format to the consumer. From a programming perspective, the most important implication of this model is that the provider must implement any call the consumer can make.  \n  \n## What Is a Provider?  \n An OLE DB provider is a set of COM objects that serve interface calls from a consumer object, transferring data in a tabular format from a durable source (called a data store) to the consumer.  \n  \n Providers can be simple or complex. The provider can support a minimal amount of functionality or a full-blown production quality provider by implementing more interfaces. A provider can return a table, allow the client to determine the format of that table, and perform operations on that data.  \n  \n Each provider implements a standard set of COM objects to handle requests from the client, with standard meaning that any OLE DB consumer can access data from any provider, regardless of language (such as C++ and Basic).  \n  \n Each COM object contains several interfaces, some of which are required and some of which are optional. By implementing the mandatory interfaces, a provider guarantees a minimum level of functionality (called compliance) that any client should be able to use. A provider can implement optional interfaces to provide additional functionality. [The OLE DB Provider Template Architecture](../../data/oledb/ole-db-provider-template-architecture.md) describes these interfaces in detail. The client should always call `QueryInterface` to determine if a provider supports a given interface.  \n  \n## OLE DB Specification Level Support  \n The OLE DB provider templates support the OLE DB version 2.7 specification. Using the OLE DB provider templates, you can implement a level 0 compliant provider. The Provider sample, for example, uses the templates to implement a non-SQL (MS-DOS) command server that executes the DOS DIR command to query the file system. The Provider sample returns the directory information in a rowset, which is the standard OLE DB mechanism for returning tabular data.  \n  \n The simplest type of provider supported by the OLE DB templates is a read-only provider with no commands. Providers with commands are also supported, as are bookmarking and read/write capability. You can implement a read/write provider by writing additional code. Dynamic rowsets and transactions are not supported by the current version, but you can add them if you want.  \n  \n## When Do You Need to Create an OLE DB Provider?  \n You do not always need to create your own provider; Microsoft provides several prepackaged, standard providers in the **Data Link Properties** dialog box in Visual C++. The main reason to create an OLE DB provider is to take advantage of the Universal Data Access strategy. Some of advantages of doing so are:  \n  \n-   Accessing data through any language such as C++, Basic, and Visual Basic Scripting Edition. It allows different programmers in your organization to access the same data in the same way, regardless of what language they use.  \n  \n-   Exposing your data to other data sources such as SQL Server, Excel, and Access. This can be very useful if you want to transfer data among different formats.  \n  \n-   Participating in crossâ€“data source (heterogeneous) operations. This can be a very effective way of data warehousing. By using OLE DB providers, you can keep data in its native format and still be able to access it in a simple operation.  \n  \n-   Adding additional capabilities to your data, such as query processing.  \n  \n-   Increasing performance of accessing data by controlling how it is manipulated.  \n  \n-   Increasing robustness. If you have a proprietary data format that only one programmer can access, you are at risk. Using OLE DB providers, you can open that proprietary format to all your programmers.  \n  \n## Read-Only and Updatable Providers  \n Providers can vary greatly in complexity and functionality. It is useful to categorize providers into read-only providers and updatable providers:  \n  \n-   Visual C++ 6.0 supported only read-only providers. [Creating an OLE DB Provider](../../data/oledb/creating-an-ole-db-provider.md) discusses how to create a read-only provider.  \n  \n-   Visual C++ .NET supports updatable providers, which can update (write to) the data store. For information about updatable providers, see [Creating an Updatable Provider](../../data/oledb/creating-an-updatable-provider.md); the [UpdatePV](http://msdn.microsoft.com/en-us/c8bed873-223c-4a7d-af55-f90138c6f38f) sample is an example of an updatable provider.  \n  \n For more information, see:  \n  \n-   [The OLE DB Provider Template Architecture](../../data/oledb/ole-db-provider-template-architecture.md)  \n  \n-   [Creating an OLE DB Provider](../../data/oledb/creating-an-ole-db-provider.md)  \n  \n-   [OLE DB Programming](../../data/oledb/ole-db-programming.md)  \n  \n## See Also  \n [Data Access](http://msdn.microsoft.com/library/a9455752-39c4-4457-b14e-197772d3df0b)   \n [OLE DB SDK Documentation](https://msdn.microsoft.com/en-us/library/ms722784.aspx)   \n [OLE DB Programmer's Reference](https://msdn.microsoft.com/en-us/library/ms713643.aspx)"}