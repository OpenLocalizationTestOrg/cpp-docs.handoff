{"nodes":[{"pos":[12,45],"content":"lock_guard Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"lock_guard Class | Microsoft Docs","pos":[0,33]}]},{"pos":[593,609],"content":"lock_guard Class","linkify":"lock_guard Class","nodes":[{"content":"lock_guard Class","pos":[0,16]}]},{"pos":[610,712],"content":"Represents a template that can be instantiated to create an object whose destructor unlocks a <ph id=\"ph1\">`mutex`</ph>.","source":"Represents a template that can be instantiated to create an object whose destructor unlocks a `mutex`."},{"pos":[721,727],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[790,797],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[801,856],"content":"The template argument <ph id=\"ph1\">`Mutex`</ph> must name a <bpt id=\"p1\">*</bpt>mutex type<ept id=\"p1\">*</ept>.","source":"The template argument `Mutex` must name a *mutex type*."},{"pos":[865,872],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[882,897],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[904,908]},{"content":"Description","pos":[909,920]},{"pos":[983,1025],"content":"Synonym for the template argument <ph id=\"ph1\">`Mutex`</ph>.","source":"Synonym for the template argument `Mutex`."},{"pos":[1036,1055],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1062,1066]},{"content":"Description","pos":[1067,1078]},{"pos":[1116,1189],"content":"<bpt id=\"p1\">[</bpt>lock_guard::lock_guard Constructor<ept id=\"p1\">](#lock_guard__lock_guard_constructor)</ept>","source":"[lock_guard::lock_guard Constructor](#lock_guard__lock_guard_constructor)"},{"pos":[1190,1223],"content":"Constructs a <ph id=\"ph1\">`lock_guard`</ph> object.","source":"Constructs a `lock_guard` object."},{"pos":[1228,1305],"content":"<bpt id=\"p1\">[</bpt>lock_guard::~lock_guard Destructor<ept id=\"p1\">](#lock_guard___dtorlock_guard_destructor)</ept>","source":"[lock_guard::~lock_guard Destructor](#lock_guard___dtorlock_guard_destructor)"},{"pos":[1306,1361],"content":"Unlocks the <ph id=\"ph1\">`mutex`</ph> that was passed to the constructor.","source":"Unlocks the `mutex` that was passed to the constructor."},{"pos":[1371,1383],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1387,1404],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> mutex","source":"**Header:** mutex"},{"pos":[1411,1429],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[1439,1524],"content":"<bpt id=\"p1\">&lt;a name=\"lock_guard__lock_guard_constructor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  lock_guard::lock_guard Constructor","linkify":"<a name=\"lock_guard__lock_guard_constructor\"></a>  lock_guard::lock_guard Constructor","source":"<a name=\"lock_guard__lock_guard_constructor\"></a>  lock_guard::lock_guard Constructor"},{"pos":[1528,1561],"content":"Constructs a <ph id=\"ph1\">`lock_guard`</ph> object.","source":"Constructs a `lock_guard` object."},{"pos":[1669,1679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">*</bpt>mutex type<ept id=\"p1\">*</ept> object.","pos":[1692,1714],"source":" A *mutex type* object."},{"pos":[1724,1731],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first constructor constructs an object of type <ph id=\"ph1\">`lock_guard`</ph> and locks <ph id=\"ph2\">`Mtx`</ph>.","pos":[1735,1815],"source":"The first constructor constructs an object of type `lock_guard` and locks `Mtx`."},{"content":"If <ph id=\"ph1\">`Mtx`</ph> is not a recursive mutex, it must be unlocked when this constructor is called.","pos":[1816,1903],"source":" If `Mtx` is not a recursive mutex, it must be unlocked when this constructor is called."},{"content":"The second constructor does not lock <ph id=\"ph1\">`Mtx`</ph>.","pos":[1910,1953],"source":"The second constructor does not lock `Mtx`."},{"content":"<ph id=\"ph1\">`Mtx`</ph> must be locked when this constructor is called.","pos":[1954,2007],"source":"`Mtx` must be locked when this constructor is called."},{"content":"The constructor throws no exceptions.","pos":[2008,2045]},{"pos":[2055,2144],"content":"<bpt id=\"p1\">&lt;a name=\"lock_guard___dtorlock_guard_destructor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  lock_guard::~lock_guard Destructor","linkify":"<a name=\"lock_guard___dtorlock_guard_destructor\"></a>  lock_guard::~lock_guard Destructor","source":"<a name=\"lock_guard___dtorlock_guard_destructor\"></a>  lock_guard::~lock_guard Destructor"},{"pos":[2148,2203],"content":"Unlocks the <ph id=\"ph1\">`mutex`</ph> that was passed to the constructor.","source":"Unlocks the `mutex` that was passed to the constructor."},{"pos":[2250,2257],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2261,2343],"content":"If the <ph id=\"ph1\">`mutex`</ph> does not exist when the destructor runs, the behavior is undefined.","source":"If the `mutex` does not exist when the destructor runs, the behavior is undefined."},{"pos":[2352,2360],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Header Files Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-header-files.md)</ept><ph id=\"ph1\"> </ph>","pos":[2364,2447],"source":"[Header Files Reference](../standard-library/cpp-standard-library-header-files.md) "},{"content":"<bpt id=\"p1\"> [</bpt><ph id=\"ph1\">\\&lt;</ph>mutex&gt;<ept id=\"p1\">](../standard-library/mutex.md)</ept>","pos":[2450,2491],"source":" [\\<mutex>](../standard-library/mutex.md)"}],"content":"---\ntitle: \"lock_guard Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"mutex/std::lock_guard\"\ndev_langs: \n  - \"C++\"\nms.assetid: 57121f0d-9c50-481c-b971-54e64df864e0\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# lock_guard Class\nRepresents a template that can be instantiated to create an object whose destructor unlocks a `mutex`.  \n  \n## Syntax  \n  \n```\ntemplate <class Mutex>\nclass lock_guard;\n```  \n  \n## Remarks  \n The template argument `Mutex` must name a *mutex type*.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`lock_guard::mutex_type`|Synonym for the template argument `Mutex`.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[lock_guard::lock_guard Constructor](#lock_guard__lock_guard_constructor)|Constructs a `lock_guard` object.|  \n|[lock_guard::~lock_guard Destructor](#lock_guard___dtorlock_guard_destructor)|Unlocks the `mutex` that was passed to the constructor.|  \n  \n## Requirements  \n **Header:** mutex  \n  \n **Namespace:** std  \n  \n##  <a name=\"lock_guard__lock_guard_constructor\"></a>  lock_guard::lock_guard Constructor  \n Constructs a `lock_guard` object.  \n  \n```cpp\nexplicit lock_guard(mutex_type& Mtx);\n\nlock_guard(mutex_type& Mtx, adopt_lock_t);\n```  \n  \n### Parameters  \n `Mtx`  \n A *mutex type* object.  \n  \n### Remarks  \n The first constructor constructs an object of type `lock_guard` and locks `Mtx`. If `Mtx` is not a recursive mutex, it must be unlocked when this constructor is called.  \n  \n The second constructor does not lock `Mtx`. `Mtx` must be locked when this constructor is called. The constructor throws no exceptions.  \n  \n##  <a name=\"lock_guard___dtorlock_guard_destructor\"></a>  lock_guard::~lock_guard Destructor  \n Unlocks the `mutex` that was passed to the constructor.  \n  \n```\n~lock_guard() noexcept;\n```  \n  \n### Remarks  \n If the `mutex` does not exist when the destructor runs, the behavior is undefined.  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [\\<mutex>](../standard-library/mutex.md)\n\n\n\n"}