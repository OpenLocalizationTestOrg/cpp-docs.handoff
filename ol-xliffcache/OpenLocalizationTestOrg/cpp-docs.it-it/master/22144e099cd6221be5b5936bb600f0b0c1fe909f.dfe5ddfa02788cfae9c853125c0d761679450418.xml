{"nodes":[{"pos":[12,67],"content":"Compiler Warning (level 1 and 3) C4793 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 1 and 3) C4793 | Microsoft Docs","pos":[0,55]}]},{"content":"Compiler Warning (level 1 and 3) C4793","pos":[724,762]},{"content":"'function' : function is compiled as native code: 'reason'","pos":[763,821]},{"content":"The compiler cannot compile <bpt id=\"p1\">*</bpt>function<ept id=\"p1\">*</ept> into managed code, even though the <bpt id=\"p2\">[</bpt>/clr<ept id=\"p2\">](../../build/reference/clr-common-language-runtime-compilation.md)</ept> compiler option is specified.","pos":[828,1004],"source":"The compiler cannot compile *function* into managed code, even though the [/clr](../../build/reference/clr-common-language-runtime-compilation.md) compiler option is specified."},{"content":"Instead, the compiler emits warning C4793 and an explanatory continuation message, and then compiles <bpt id=\"p1\">*</bpt>function<ept id=\"p1\">*</ept> into native code.","pos":[1005,1134],"source":" Instead, the compiler emits warning C4793 and an explanatory continuation message, and then compiles *function* into native code."},{"content":"The continuation message contains the <bpt id=\"p1\">*</bpt>reason<ept id=\"p1\">*</ept> text that explains why <bpt id=\"p2\">*</bpt>function<ept id=\"p2\">*</ept> cannot be compiled to <ph id=\"ph1\">`MSIL`</ph>.","pos":[1135,1245],"source":" The continuation message contains the *reason* text that explains why *function* cannot be compiled to `MSIL`."},{"pos":[1252,1327],"content":"This is a level 1 warning when you specify the <ph id=\"ph1\">`/clr:pure`</ph> compiler option.","source":"This is a level 1 warning when you specify the `/clr:pure` compiler option."},{"content":"The following table lists all possible continuation messages.","pos":[1334,1395]},{"content":"Reason message","pos":[1402,1416]},{"content":"Remarks","pos":[1417,1424]},{"content":"Aligned data types are not supported in managed code","pos":[1468,1520]},{"pos":[1521,1710],"content":"The CLR must be able to allocate data as needed, which might not be possible if the data is aligned with declarations such as <bpt id=\"p1\">[</bpt>__m128<ept id=\"p1\">](../../cpp/m128.md)</ept> or <bpt id=\"p2\">[</bpt>align<ept id=\"p2\">](../../cpp/align-cpp.md)</ept>.","source":"The CLR must be able to allocate data as needed, which might not be possible if the data is aligned with declarations such as [__m128](../../cpp/m128.md) or [align](../../cpp/align-cpp.md)."},{"content":"Functions that use '__ImageBase' are not supported in managed code","pos":[1715,1781]},{"pos":[1796,1890],"content":"is a special linker symbol that is typically used only by low-level native code to load a DLL."},{"content":"varargs are not supported by the '/clr' compiler option","pos":[1895,1950]},{"content":"Native functions cannot call managed functions that have <bpt id=\"p1\">[</bpt>variable argument lists<ept id=\"p1\">](../../cpp/functions-with-variable-argument-lists-cpp.md)</ept> (varargs) because the functions have different stack layout requirements.","pos":[1951,2164],"source":"Native functions cannot call managed functions that have [variable argument lists](../../cpp/functions-with-variable-argument-lists-cpp.md) (varargs) because the functions have different stack layout requirements."},{"content":"However, if you specify the <ph id=\"ph1\">`/clr:pure`</ph> compiler option, variable argument lists are supported because the assembly can contain only managed functions.","pos":[2165,2316],"source":" However, if you specify the `/clr:pure` compiler option, variable argument lists are supported because the assembly can contain only managed functions."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Pure and Verifiable Code (C++/CLI)<ept id=\"p1\">](../../dotnet/pure-and-verifiable-code-cpp-cli.md)</ept>.","pos":[2317,2430],"source":" For more information, see [Pure and Verifiable Code (C++/CLI)](../../dotnet/pure-and-verifiable-code-cpp-cli.md)."},{"content":"The 64-bit CLR does not support data declared with the __ptr32 modifier","pos":[2435,2506]},{"content":"A pointer must be the same size as a native pointer on the current platform.","pos":[2507,2583]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>__ptr32, <ph id=\"ph1\">\\_</ph>_ptr64<ept id=\"p1\">](../../cpp/ptr32-ptr64.md)</ept>.","pos":[2584,2656],"source":" For more information, see [__ptr32, \\__ptr64](../../cpp/ptr32-ptr64.md)."},{"content":"The 32-bit CLR does not support data declared with the __ptr64 modifier","pos":[2661,2732]},{"content":"A pointer must be the same size as a native pointer on the current platform.","pos":[2733,2809]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>__ptr32, <ph id=\"ph1\">\\_</ph>_ptr64<ept id=\"p1\">](../../cpp/ptr32-ptr64.md)</ept>.","pos":[2810,2882],"source":" For more information, see [__ptr32, \\__ptr64](../../cpp/ptr32-ptr64.md)."},{"content":"One or more intrinsics is not supported in managed code","pos":[2887,2942]},{"content":"The name of the intrinsic is not available at the time the message is emitted.","pos":[2943,3021]},{"content":"However, an intrinsic that causes this message typically represents a low-level machine instruction.","pos":[3022,3122]},{"content":"Inline native assembly ('__asm') is not supported in managed code","pos":[3127,3192]},{"pos":[3193,3306],"content":"<bpt id=\"p1\">[</bpt>Inline assembly code<ept id=\"p1\">](../../assembler/inline/asm.md)</ept> can contain arbitrary native code, which cannot be managed.","source":"[Inline assembly code](../../assembler/inline/asm.md) can contain arbitrary native code, which cannot be managed."},{"content":"A non-__clrcall virtual function thunk must be compiled as native","pos":[3311,3376]},{"pos":[3377,3470],"content":"A non-<bpt id=\"p1\">[</bpt>__clrcall<ept id=\"p1\">](../../cpp/clrcall.md)</ept> virtual function thunk must use an unmanaged address.","source":"A non-[__clrcall](../../cpp/clrcall.md) virtual function thunk must use an unmanaged address."},{"content":"A function using '_setjmp' must be compiled as native","pos":[3475,3528]},{"content":"The CLR must be able to control program execution.","pos":[3529,3579]},{"content":"However, the <bpt id=\"p1\">[</bpt>setjmp<ept id=\"p1\">](../../cpp/using-setjmp-longjmp.md)</ept> function bypasses regular program execution by saving and restoring low-level information such as registers and execution state.","pos":[3580,3765],"source":" However, the [setjmp](../../cpp/using-setjmp-longjmp.md) function bypasses regular program execution by saving and restoring low-level information such as registers and execution state."},{"content":"Example","pos":[3775,3782]},{"content":"The following sample generates C4793.","pos":[3786,3823]},{"content":"Example","pos":[4189,4196]},{"content":"The following sample generates C4793.","pos":[4200,4237]}],"content":"---\ntitle: \"Compiler Warning (level 1 and 3) C4793 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4793\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C6634\"\n  - \"C6635\"\n  - \"C6640\"\n  - \"C6630\"\n  - \"C6639\"\n  - \"C6636\"\n  - \"C6638\"\n  - \"C6631\"\n  - \"C6637\"\n  - \"C4793\"\nms.assetid: 819ada53-1d9c-49b8-a629-baf8c12314e6\ncaps.latest.revision: 28\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Warning (level 1 and 3) C4793\n'function' : function is compiled as native code: 'reason'  \n  \n The compiler cannot compile *function* into managed code, even though the [/clr](../../build/reference/clr-common-language-runtime-compilation.md) compiler option is specified. Instead, the compiler emits warning C4793 and an explanatory continuation message, and then compiles *function* into native code. The continuation message contains the *reason* text that explains why *function* cannot be compiled to `MSIL`.  \n  \n This is a level 1 warning when you specify the `/clr:pure` compiler option.  \n  \n The following table lists all possible continuation messages.  \n  \n|Reason message|Remarks|  \n|--------------------|-------------|  \n|Aligned data types are not supported in managed code|The CLR must be able to allocate data as needed, which might not be possible if the data is aligned with declarations such as [__m128](../../cpp/m128.md) or [align](../../cpp/align-cpp.md).|  \n|Functions that use '__ImageBase' are not supported in managed code|`__ImageBase` is a special linker symbol that is typically used only by low-level native code to load a DLL.|  \n|varargs are not supported by the '/clr' compiler option|Native functions cannot call managed functions that have [variable argument lists](../../cpp/functions-with-variable-argument-lists-cpp.md) (varargs) because the functions have different stack layout requirements. However, if you specify the `/clr:pure` compiler option, variable argument lists are supported because the assembly can contain only managed functions. For more information, see [Pure and Verifiable Code (C++/CLI)](../../dotnet/pure-and-verifiable-code-cpp-cli.md).|  \n|The 64-bit CLR does not support data declared with the __ptr32 modifier|A pointer must be the same size as a native pointer on the current platform. For more information, see [__ptr32, \\__ptr64](../../cpp/ptr32-ptr64.md).|  \n|The 32-bit CLR does not support data declared with the __ptr64 modifier|A pointer must be the same size as a native pointer on the current platform. For more information, see [__ptr32, \\__ptr64](../../cpp/ptr32-ptr64.md).|  \n|One or more intrinsics is not supported in managed code|The name of the intrinsic is not available at the time the message is emitted. However, an intrinsic that causes this message typically represents a low-level machine instruction.|  \n|Inline native assembly ('__asm') is not supported in managed code|[Inline assembly code](../../assembler/inline/asm.md) can contain arbitrary native code, which cannot be managed.|  \n|A non-__clrcall virtual function thunk must be compiled as native|A non-[__clrcall](../../cpp/clrcall.md) virtual function thunk must use an unmanaged address.|  \n|A function using '_setjmp' must be compiled as native|The CLR must be able to control program execution. However, the [setjmp](../../cpp/using-setjmp-longjmp.md) function bypasses regular program execution by saving and restoring low-level information such as registers and execution state.|  \n  \n## Example  \n The following sample generates C4793.  \n  \n```  \n// C4793.cpp  \n// compile with: /c /clr /W3   \n// processor: x86  \nint asmfunc(void) {   // C4793, compiled as unmanaged, native code  \n   __asm {  \n      mov eax, 0  \n   }  \n}  \n```  \n  \n```Output  \nwarning C4793: 'asmfunc' : function is compiled as native code:  \n        Inline native assembly ('__asm') is not supported in managed code  \n```  \n  \n## Example  \n The following sample generates C4793.  \n  \n```  \n// C4793_b.cpp  \n// compile with: /c /clr /W3  \n#include <setjmp.h>  \njmp_buf test_buf;  \n  \nvoid f() {  \n   setjmp(test_buf);   // C4793 warning  \n}  \n```  \n  \n```Output  \nwarning C4793: 'f' : function is compiled as native code:  \n        A function using '_setjmp' must be compiled as native  \n```"}