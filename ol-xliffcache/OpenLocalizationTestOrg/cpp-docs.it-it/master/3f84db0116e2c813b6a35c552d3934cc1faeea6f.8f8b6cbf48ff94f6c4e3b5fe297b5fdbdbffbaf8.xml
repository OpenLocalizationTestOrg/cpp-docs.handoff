{"nodes":[{"pos":[12,85],"content":"How to: Catch Exceptions in Native Code Thrown from MSIL | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Catch Exceptions in Native Code Thrown from MSIL | Microsoft Docs","pos":[0,73]}]},{"content":"How to: Catch Exceptions in Native Code Thrown from MSIL","pos":[705,761]},{"content":"In native code, you can catch native C++ exception from MSIL.","pos":[762,823]},{"content":"You can catch CLR exceptions with <ph id=\"ph1\">`__try`</ph> and <ph id=\"ph2\">`__except`</ph>.","pos":[825,882],"source":"  You can catch CLR exceptions with `__try` and `__except`."},{"pos":[889,1065],"content":"For more information, see <bpt id=\"p1\">[</bpt>Structured Exception Handling (C/C++)<ept id=\"p1\">](../cpp/structured-exception-handling-c-cpp.md)</ept> and <bpt id=\"p2\">[</bpt>C++ Exception Handling<ept id=\"p2\">](../cpp/cpp-exception-handling.md)</ept>.","source":"For more information, see [Structured Exception Handling (C/C++)](../cpp/structured-exception-handling-c-cpp.md) and [C++ Exception Handling](../cpp/cpp-exception-handling.md)."},{"content":"Example","pos":[1074,1081]},{"content":"The following sample defines a module with two functions, one that throws a native exception, and another that throws an MSIL exception.","pos":[1085,1221]},{"content":"Example","pos":[1416,1423]},{"content":"The following sample defines a module that catches a native and MSIL exception.","pos":[1427,1506]},{"content":"See Also","pos":[2190,2198]},{"content":"Exception Handling","pos":[2203,2221]}],"content":"---\ntitle: \"How to: Catch Exceptions in Native Code Thrown from MSIL | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"exceptions, catching\"\n  - \"catching exceptions, thrown from MSIL\"\n  - \"MSIL, catching exceptions in native code\"\nms.assetid: c15afd2b-8505-43bf-8a4a-f1d41532a124\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Catch Exceptions in Native Code Thrown from MSIL\nIn native code, you can catch native C++ exception from MSIL.  You can catch CLR exceptions with `__try` and `__except`.  \n  \n For more information, see [Structured Exception Handling (C/C++)](../cpp/structured-exception-handling-c-cpp.md) and [C++ Exception Handling](../cpp/cpp-exception-handling.md).  \n  \n## Example  \n The following sample defines a module with two functions, one that throws a native exception, and another that throws an MSIL exception.  \n  \n```  \n// catch_MSIL_in_native.cpp  \n// compile with: /clr /c  \nvoid Test() {  \n   throw (\"error\");  \n}  \n  \nvoid Test2() {  \n   throw (gcnew System::Exception(\"error2\"));  \n}  \n```  \n  \n## Example  \n The following sample defines a module that catches a native and MSIL exception.  \n  \n```  \n// catch_MSIL_in_native_2.cpp  \n// compile with: /clr catch_MSIL_in_native.obj  \n#include <iostream>  \nusing namespace std;  \nvoid Test();  \nvoid Test2();  \n  \nvoid Func() {  \n   // catch any exception from MSIL  \n   // should not catch Visual C++ exceptions like this  \n   // runtime may not destroy the object thrown  \n   __try {  \n      Test2();  \n   }  \n   __except(1) {  \n      cout << \"caught an exception\" << endl;  \n   }  \n  \n}  \n  \nint main() {  \n   // catch native C++ exception from MSIL  \n   try {  \n      Test();  \n   }  \n   catch(char * S) {  \n      cout << S << endl;  \n   }  \n   Func();  \n}  \n```  \n  \n```Output  \nerror  \ncaught an exception  \n```  \n  \n## See Also  \n [Exception Handling](../windows/exception-handling-cpp-component-extensions.md)"}