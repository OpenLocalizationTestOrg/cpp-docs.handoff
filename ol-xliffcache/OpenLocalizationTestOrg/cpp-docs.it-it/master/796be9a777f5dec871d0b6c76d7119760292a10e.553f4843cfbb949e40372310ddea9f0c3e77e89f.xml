{"nodes":[{"pos":[12,61],"content":"pointer_to_binary_function Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"pointer_to_binary_function Class | Microsoft Docs","pos":[0,49]}]},{"content":"pointer_to_binary_function Class","pos":[817,849]},{"content":"Converts a binary function pointer into an adaptable binary function.","pos":[850,919]},{"content":"Syntax","pos":[928,934]},{"content":"Parameters","pos":[1232,1242]},{"content":"The binary function to be converted.","pos":[1257,1293]},{"content":"The left object that the <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\*</ph>pfunc<ept id=\"p1\">*</ept> is called on.","pos":[1310,1358],"source":" The left object that the *\\*pfunc* is called on."},{"content":"The right object that the <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\*</ph>pfunc<ept id=\"p1\">*</ept> is called on.","pos":[1376,1425],"source":" The right object that the *\\*pfunc* is called on."},{"content":"Return Value","pos":[1434,1446]},{"content":"The template class stores a copy of <bpt id=\"p1\">**</bpt>pfunc<ept id=\"p1\">**</ept>.","pos":[1450,1496],"source":"The template class stores a copy of **pfunc**."},{"content":"It defines its member function <ph id=\"ph1\">`operator()`</ph> as returning (<ph id=\"ph2\">\\*</ph> <bpt id=\"p1\">**</bpt>pfunc<ept id=\"p1\">**</ept>)(_ <bpt id=\"p2\">*</bpt>Left<ept id=\"p2\">*</ept>, <ph id=\"ph3\">\\_</ph> <bpt id=\"p3\">*</bpt>Right<ept id=\"p3\">*</ept>).","pos":[1497,1591],"source":" It defines its member function `operator()` as returning (\\* **pfunc**)(_ *Left*, \\_ *Right*)."},{"content":"Remarks","pos":[1600,1607]},{"content":"A binary function pointer is a function object and may be passed to any Standard Template Library algorithm that is expecting a binary function as a parameter, but it is not adaptable.","pos":[1611,1795]},{"content":"To use it with an adaptor, such as binding a value to it or using it with a negator, it must be supplied with the nested types <bpt id=\"p1\">**</bpt>first_argument_type<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>second_argument_type<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>result_type<ept id=\"p3\">**</ept> that make such an adaptation possible.","pos":[1796,2032],"source":" To use it with an adaptor, such as binding a value to it or using it with a negator, it must be supplied with the nested types **first_argument_type**, **second_argument_type**, and **result_type** that make such an adaptation possible."},{"content":"The conversion by <ph id=\"ph1\">`pointer_to_binary_function`</ph> allows the function adaptors to work with binary function pointers.","pos":[2033,2147],"source":" The conversion by `pointer_to_binary_function` allows the function adaptors to work with binary function pointers."},{"content":"Example","pos":[2156,2163]},{"content":"The constructor of <ph id=\"ph1\">`pointer_to_binary_function`</ph> is rarely used directly.","pos":[2167,2239],"source":"The constructor of `pointer_to_binary_function` is rarely used directly."},{"content":"See the helper function <bpt id=\"p1\">[</bpt>ptr_fun<ept id=\"p1\">](../standard-library/functional-functions.md#ptr_fun_function)</ept> for an example of how to declare and use the <ph id=\"ph1\">`pointer_to_binary_function`</ph> adaptor predicate.","pos":[2240,2428],"source":" See the helper function [ptr_fun](../standard-library/functional-functions.md#ptr_fun_function) for an example of how to declare and use the `pointer_to_binary_function` adaptor predicate."},{"content":"Requirements","pos":[2437,2449]},{"pos":[2453,2478],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[2485,2503],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[2512,2520]},{"content":"C++ Standard Library Reference","pos":[2525,2555]}],"content":"---\ntitle: \"pointer_to_binary_function Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::pointer_to_binary_function\"\n  - \"xfunctional/std::pointer_to_binary_function\"\n  - \"pointer_to_binary_function\"\n  - \"std.pointer_to_binary_function\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"pointer_to_binary_function function\"\n  - \"pointer_to_binary_function class\"\nms.assetid: fb50599f-bcb3-4076-a669-6dcc3eb189a5\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# pointer_to_binary_function Class\nConverts a binary function pointer into an adaptable binary function.  \n  \n## Syntax  \n  \n```\ntemplate <class Arg1, class Arg2, class Result>\nclass pointer_to_binary_function\n    : public binary_function <Arg1, Arg2, Result>\n{\npublic:\n    explicit pointer_to_binary_function(\n        Result(*pfunc)(Arg1, Arg2));\n    Result operator()(Arg1 left, Arg2 right) const;\n};\n```  \n  \n#### Parameters  \n `pfunc`  \n The binary function to be converted.  \n  \n `left`  \n The left object that the *\\*pfunc* is called on.  \n  \n `right`  \n The right object that the *\\*pfunc* is called on.  \n  \n## Return Value  \n The template class stores a copy of **pfunc**. It defines its member function `operator()` as returning (\\* **pfunc**)(_ *Left*, \\_ *Right*).  \n  \n## Remarks  \n A binary function pointer is a function object and may be passed to any Standard Template Library algorithm that is expecting a binary function as a parameter, but it is not adaptable. To use it with an adaptor, such as binding a value to it or using it with a negator, it must be supplied with the nested types **first_argument_type**, **second_argument_type**, and **result_type** that make such an adaptation possible. The conversion by `pointer_to_binary_function` allows the function adaptors to work with binary function pointers.  \n  \n## Example  \n The constructor of `pointer_to_binary_function` is rarely used directly. See the helper function [ptr_fun](../standard-library/functional-functions.md#ptr_fun_function) for an example of how to declare and use the `pointer_to_binary_function` adaptor predicate.  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}