{"nodes":[{"pos":[12,46],"content":"_execlp, _wexeclp | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_execlp, _wexeclp | Microsoft Docs","pos":[0,34]}]},{"content":"_execlp, _wexeclp","pos":[1030,1047]},{"content":"Loads and executes new child processes.","pos":[1048,1087]},{"pos":[1095,1315],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,218],"nodes":[{"content":"This API cannot be used in applications that execute in the Windows Runtime.","pos":[1,77]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[78,205],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[1324,1330]},{"content":"Parameters","pos":[1592,1602]},{"content":"Path of the file to execute.","pos":[1619,1647]},{"content":",","pos":[1660,1661]},{"content":"List of pointers to parameters.","pos":[1677,1708]},{"content":"Return Value","pos":[1717,1729]},{"content":"If successful, these functions do not return to the calling process.","pos":[1733,1801]},{"content":"A return value of –1 indicates an error, in which case the <ph id=\"ph1\">`errno`</ph> global variable is set.","pos":[1802,1892],"source":" A return value of –1 indicates an error, in which case the `errno` global variable is set."},{"pos":[1907,1912],"content":"value"},{"content":"Description","pos":[1913,1924]},{"content":"The space required for the arguments and environment settings exceeds 32 KB.","pos":[1979,2055]},{"content":"The specified file has a locking or sharing violation.","pos":[2069,2123]},{"content":"Invalid parameter.","pos":[2137,2155]},{"content":"Too many files open (the specified file must be opened to determine whether it is executable).","pos":[2169,2263]},{"content":"The file or path not found.","pos":[2277,2304]},{"content":"The specified file is not executable or has an invalid executable-file format.","pos":[2319,2397]},{"content":"Not enough memory is available to execute the new process; the available memory has been corrupted; or an invalid block exists, indicating that the calling process was not allocated properly.","pos":[2411,2602]},{"pos":[2610,2787],"content":"For more information about these and other return codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[2796,2803]},{"pos":[2807,2994],"content":"Each of these functions loads and executes a new process, passing each command-line argument as a separate parameter and using the <ph id=\"ph1\">`PATH`</ph> environment variable to find the file to execute.","source":"Each of these functions loads and executes a new process, passing each command-line argument as a separate parameter and using the `PATH` environment variable to find the file to execute."},{"content":"The <ph id=\"ph1\">`_execlp`</ph> functions validate their parameters.","pos":[3001,3051],"source":"The `_execlp` functions validate their parameters."},{"content":"If <ph id=\"ph1\">`cmdname`</ph> or <ph id=\"ph2\">`arg0`</ph> is a null pointer or empty string, these functions invoke the invalid parameter handler as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3052,3251],"source":" If `cmdname` or `arg0` is a null pointer or empty string, these functions invoke the invalid parameter handler as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return -1.","pos":[3252,3343],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return -1."},{"content":"No new process is launched.","pos":[3344,3371]},{"content":"Requirements","pos":[3380,3392]},{"content":"Function","pos":[3399,3407]},{"content":"Required header","pos":[3408,3423]},{"content":"Optional header","pos":[3424,3439]},{"content":"process.h&gt;","pos":[3519,3529],"source":"process.h>"},{"content":"errno.h&gt;","pos":[3532,3540],"source":"errno.h>"},{"content":"process.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[3558,3582],"source":"process.h> or \\<wchar.h>"},{"content":"errno.h&gt;","pos":[3585,3593],"source":"errno.h>"},{"pos":[3601,3699],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[3708,3715]},{"pos":[3719,3813],"content":"See the example in <bpt id=\"p1\">[</bpt>_exec, _wexec Functions<ept id=\"p1\">](../../c-runtime-library/exec-wexec-functions.md)</ept>.","source":"See the example in [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md)."},{"content":".NET Framework Equivalent","pos":[3822,3847]},{"content":"System::Diagnostics::Process Class","pos":[3858,3892]},{"content":"System::Diagnostics::ProcessStartInfo Class","pos":[3978,4021]},{"content":"See Also","pos":[4114,4122]},{"content":"Process and Environment Control","pos":[4127,4158]},{"content":"_exec, _wexec Functions","pos":[4225,4248]},{"content":"abort","pos":[4304,4309]},{"content":"atexit","pos":[4360,4366]},{"content":"exit, _Exit, _exit","pos":[4418,4436]},{"content":"_onexit, _onexit_m","pos":[4496,4514]},{"content":"_spawn, _wspawn Functions","pos":[4575,4600]},{"content":"system, _wsystem","pos":[4658,4674]}],"content":"---\ntitle: \"_execlp, _wexeclp | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wexeclp\"\n  - \"_execlp\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-process-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_wexeclp\"\n  - \"wexeclp\"\n  - \"_execlp\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"execlp function\"\n  - \"_execlp function\"\n  - \"_wexeclp function\"\n  - \"wexeclp function\"\nms.assetid: 7b179163-4bcd-4d6a-8baf-68f886791928\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _execlp, _wexeclp\nLoads and executes new child processes.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nintptr_t _execlp(   \n   const char *cmdname,  \n   const char *arg0,  \n   ... const char *argn,  \n   NULL   \n);  \nintptr_t _wexeclp(   \n   const wchar_t *cmdname,  \n   const wchar_t *arg0,  \n   ... const wchar_t *argn,  \n   NULL   \n);  \n```  \n  \n#### Parameters  \n `cmdname`  \n Path of the file to execute.  \n  \n `arg0`, `...``argn`  \n List of pointers to parameters.  \n  \n## Return Value  \n If successful, these functions do not return to the calling process. A return value of –1 indicates an error, in which case the `errno` global variable is set.  \n  \n|`errno` value|Description|  \n|-------------------|-----------------|  \n|`E2BIG`|The space required for the arguments and environment settings exceeds 32 KB.|  \n|`EACCES`|The specified file has a locking or sharing violation.|  \n|`EINVAL`|Invalid parameter.|  \n|`EMFILE`|Too many files open (the specified file must be opened to determine whether it is executable).|  \n|`ENOENT`|The file or path not found.|  \n|`ENOEXEC`|The specified file is not executable or has an invalid executable-file format.|  \n|`ENOMEM`|Not enough memory is available to execute the new process; the available memory has been corrupted; or an invalid block exists, indicating that the calling process was not allocated properly.|  \n  \n For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Each of these functions loads and executes a new process, passing each command-line argument as a separate parameter and using the `PATH` environment variable to find the file to execute.  \n  \n The `_execlp` functions validate their parameters. If `cmdname` or `arg0` is a null pointer or empty string, these functions invoke the invalid parameter handler as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL` and return -1. No new process is launched.  \n  \n## Requirements  \n  \n|Function|Required header|Optional header|  \n|--------------|---------------------|---------------------|  \n|`_execlp`|\\<process.h>|\\<errno.h>|  \n|`_wexeclp`|\\<process.h> or \\<wchar.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n See the example in [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md).  \n  \n## .NET Framework Equivalent  \n  \n-   [System::Diagnostics::Process Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.process.aspx)  \n  \n-   [System::Diagnostics::ProcessStartInfo Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.aspx)  \n  \n## See Also  \n [Process and Environment Control](../../c-runtime-library/process-and-environment-control.md)   \n [_exec, _wexec Functions](../../c-runtime-library/exec-wexec-functions.md)   \n [abort](../../c-runtime-library/reference/abort.md)   \n [atexit](../../c-runtime-library/reference/atexit.md)   \n [exit, _Exit, _exit](../../c-runtime-library/reference/exit-exit-exit.md)   \n [_onexit, _onexit_m](../../c-runtime-library/reference/onexit-onexit-m.md)   \n [_spawn, _wspawn Functions](../../c-runtime-library/spawn-wspawn-functions.md)   \n [system, _wsystem](../../c-runtime-library/reference/system-wsystem.md)"}