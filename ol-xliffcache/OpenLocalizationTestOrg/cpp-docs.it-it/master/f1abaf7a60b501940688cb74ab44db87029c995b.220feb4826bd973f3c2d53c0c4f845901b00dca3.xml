{"nodes":[{"pos":[12,52],"content":"deque::resize (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"deque::resize (STL-CLR) | Microsoft Docs","pos":[0,40]}]},{"content":"deque::resize (STL/CLR)","pos":[629,652]},{"content":"Changes the number of elements.","pos":[653,684]},{"content":"Syntax","pos":[693,699]},{"content":"Parameters","pos":[811,821]},{"content":"new_size","pos":[825,833]},{"content":"New size of the controlled sequence.","pos":[837,873]},{"content":"val","pos":[880,883]},{"content":"Value of the padding element.","pos":[887,916]},{"content":"Remarks","pos":[925,932]},{"content":"The member functions both ensure that <bpt id=\"p1\">[</bpt>deque::size (STL/CLR)<ept id=\"p1\">](../dotnet/deque-size-stl-clr.md)</ept><ph id=\"ph1\">`()`</ph> henceforth returns <ph id=\"ph2\">`new_size`</ph>.","pos":[936,1065],"source":"The member functions both ensure that [deque::size (STL/CLR)](../dotnet/deque-size-stl-clr.md)`()` henceforth returns `new_size`."},{"content":"If it must make the controlled sequence longer, the first member function appends elements with value <ph id=\"ph1\">`value_type()`</ph>, while the second member function appends elements with value <ph id=\"ph2\">`val`</ph>.","pos":[1066,1251],"source":" If it must make the controlled sequence longer, the first member function appends elements with value `value_type()`, while the second member function appends elements with value `val`."},{"content":"To make the controlled sequence shorter, both member functions effectively erase the last element <bpt id=\"p1\">[</bpt>deque::size (STL/CLR)<ept id=\"p1\">](../dotnet/deque-size-stl-clr.md)</ept><ph id=\"ph1\">`() -`</ph> <ph id=\"ph2\">`new_size`</ph> times.","pos":[1252,1430],"source":" To make the controlled sequence shorter, both member functions effectively erase the last element [deque::size (STL/CLR)](../dotnet/deque-size-stl-clr.md)`() -` `new_size` times."},{"content":"You use it to ensure that the controlled sequence has size <ph id=\"ph1\">`new_size`</ph>, by either trimming or padding the current controlled sequence.","pos":[1431,1564],"source":" You use it to ensure that the controlled sequence has size `new_size`, by either trimming or padding the current controlled sequence."},{"content":"Example","pos":[1573,1580]},{"content":"Requirements","pos":[2403,2415]},{"pos":[2419,2446],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/deque&gt;","source":"**Header:** \\<cliext/deque>"},{"pos":[2453,2474],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2483,2491]},{"content":"deque (STL/CLR)","pos":[2496,2511]},{"content":"deque::clear (STL/CLR)","pos":[2546,2568]},{"content":"deque::erase (STL/CLR)","pos":[2609,2631]},{"content":"deque::insert (STL/CLR)","pos":[2672,2695]}],"content":"---\ntitle: \"deque::resize (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::deque::resize\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"resize member [STL/CLR]\"\nms.assetid: c83f3c57-38b3-4706-a124-59bafbf88484\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# deque::resize (STL/CLR)\nChanges the number of elements.  \n  \n## Syntax  \n  \n```  \nvoid resize(size_type new_size);  \nvoid resize(size_type new_size, value_type val);  \n```  \n  \n#### Parameters  \n new_size  \n New size of the controlled sequence.  \n  \n val  \n Value of the padding element.  \n  \n## Remarks  \n The member functions both ensure that [deque::size (STL/CLR)](../dotnet/deque-size-stl-clr.md)`()` henceforth returns `new_size`. If it must make the controlled sequence longer, the first member function appends elements with value `value_type()`, while the second member function appends elements with value `val`. To make the controlled sequence shorter, both member functions effectively erase the last element [deque::size (STL/CLR)](../dotnet/deque-size-stl-clr.md)`() -` `new_size` times. You use it to ensure that the controlled sequence has size `new_size`, by either trimming or padding the current controlled sequence.  \n  \n## Example  \n  \n```  \n// cliext_deque_resize.cpp   \n// compile with: /clr   \n#include <cliext/deque>   \n  \nint main()   \n    {   \n// construct an empty container and pad with default values   \n    cliext::deque<wchar_t> c1;   \n    System::Console::WriteLine(\"size() = {0}\", c1.size());   \n    c1.resize(4);   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", (int)elem);   \n    System::Console::WriteLine();   \n  \n// resize to empty   \n    c1.resize(0);   \n    System::Console::WriteLine(\"size() = {0}\", c1.size());   \n  \n// resize and pad   \n    c1.resize(5, L'x');   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nsize() = 0  \n 0 0 0 0  \nsize() = 0  \n x x x x x  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/deque>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [deque (STL/CLR)](../dotnet/deque-stl-clr.md)   \n [deque::clear (STL/CLR)](../dotnet/deque-clear-stl-clr.md)   \n [deque::erase (STL/CLR)](../dotnet/deque-erase-stl-clr.md)   \n [deque::insert (STL/CLR)](../dotnet/deque-insert-stl-clr.md)"}