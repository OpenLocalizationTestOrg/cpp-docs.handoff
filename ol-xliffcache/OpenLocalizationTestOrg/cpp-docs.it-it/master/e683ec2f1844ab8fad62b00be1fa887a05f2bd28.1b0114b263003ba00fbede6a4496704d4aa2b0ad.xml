{"nodes":[{"pos":[12,71],"content":"Type and Variable Sizes in Inline Assembly | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Type and Variable Sizes in Inline Assembly | Microsoft Docs","pos":[0,59]}]},{"content":"Type and Variable Sizes in Inline Assembly","pos":[824,866]},{"content":"Microsoft Specific","pos":[869,887]},{"content":"The <bpt id=\"p1\">**</bpt>LENGTH<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>SIZE<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>TYPE<ept id=\"p3\">**</ept> operators have a limited meaning in inline assembly.","pos":[896,987],"source":"The **LENGTH**, **SIZE**, and **TYPE** operators have a limited meaning in inline assembly."},{"content":"They cannot be used at all with the <ph id=\"ph1\">`DUP`</ph> operator (because you cannot define data with MASM directives or operators).","pos":[988,1106],"source":" They cannot be used at all with the `DUP` operator (because you cannot define data with MASM directives or operators)."},{"content":"But you can use them to find the size of C or C++ variables or types:","pos":[1107,1176]},{"content":"The <bpt id=\"p1\">**</bpt>LENGTH<ept id=\"p1\">**</ept> operator can return the number of elements in an array.","pos":[1186,1256],"source":"The **LENGTH** operator can return the number of elements in an array."},{"content":"It returns the value 1 for non-array variables.","pos":[1257,1304]},{"content":"The <bpt id=\"p1\">**</bpt>SIZE<ept id=\"p1\">**</ept> operator can return the size of a C or C++ variable.","pos":[1314,1379],"source":"The **SIZE** operator can return the size of a C or C++ variable."},{"content":"A variable's size is the product of its <bpt id=\"p1\">**</bpt>LENGTH<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>TYPE<ept id=\"p2\">**</ept>.","pos":[1380,1444],"source":" A variable's size is the product of its **LENGTH** and **TYPE**."},{"content":"The <bpt id=\"p1\">**</bpt>TYPE<ept id=\"p1\">**</ept> operator can return the size of a C or C++ type or variable.","pos":[1454,1527],"source":"The **TYPE** operator can return the size of a C or C++ type or variable."},{"content":"If the variable is an array, <bpt id=\"p1\">**</bpt>TYPE<ept id=\"p1\">**</ept> returns the size of a single element of the array.","pos":[1528,1616],"source":" If the variable is an array, **TYPE** returns the size of a single element of the array."},{"pos":[1623,1681],"content":"For example, if your program has an 8-element <ph id=\"ph1\">`int`</ph> array,","source":"For example, if your program has an 8-element `int` array,"},{"pos":[1717,1799],"content":"the following C and assembly expressions yield the size of <ph id=\"ph1\">`arr`</ph> and its elements.","source":"the following C and assembly expressions yield the size of `arr` and its elements."},{"content":"__asm","pos":[1806,1811]},{"content":"C","pos":[1812,1813]},{"content":"Size","pos":[1814,1818]},{"pos":[1860,1874],"content":"<bpt id=\"p1\">**</bpt>LENGTH<ept id=\"p1\">**</ept> arr","source":"**LENGTH** arr"},{"pos":[1883,1905],"content":"(arr)/<ph id=\"ph1\">`sizeof`</ph>(arr[0])","source":"(arr)/`sizeof`(arr[0])"},{"content":"8","pos":[1906,1907]},{"pos":[1912,1924],"content":"<bpt id=\"p1\">**</bpt>SIZE<ept id=\"p1\">**</ept> arr","source":"**SIZE** arr"},{"pos":[1933,1938],"content":"(arr)"},{"content":"32","pos":[1939,1941]},{"pos":[1946,1958],"content":"<bpt id=\"p1\">**</bpt>TYPE<ept id=\"p1\">**</ept> arr","source":"**TYPE** arr"},{"pos":[1967,1975],"content":"(arr[0])"},{"content":"4","pos":[1976,1977]},{"content":"END Microsoft Specific","pos":[1987,2009]},{"content":"See Also","pos":[2020,2028]},{"content":"Using Assembly Language in __asm Blocks","pos":[2033,2072]}],"content":"---\ntitle: \"Type and Variable Sizes in Inline Assembly | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"length\"\n  - \"Type\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"variables, length\"\n  - \"size, getting in inline assembly\"\n  - \"size\"\n  - \"LENGTH operator\"\n  - \"TYPE operator\"\n  - \"SIZE operator\"\n  - \"inline assembly, operators\"\n  - \"variables, type\"\n  - \"variables, size\"\nms.assetid: b62c2f2b-a7ad-4145-bae4-d890db86d348\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Type and Variable Sizes in Inline Assembly\n**Microsoft Specific**  \n  \n The **LENGTH**, **SIZE**, and **TYPE** operators have a limited meaning in inline assembly. They cannot be used at all with the `DUP` operator (because you cannot define data with MASM directives or operators). But you can use them to find the size of C or C++ variables or types:  \n  \n-   The **LENGTH** operator can return the number of elements in an array. It returns the value 1 for non-array variables.  \n  \n-   The **SIZE** operator can return the size of a C or C++ variable. A variable's size is the product of its **LENGTH** and **TYPE**.  \n  \n-   The **TYPE** operator can return the size of a C or C++ type or variable. If the variable is an array, **TYPE** returns the size of a single element of the array.  \n  \n For example, if your program has an 8-element `int` array,  \n  \n```  \nint arr[8];  \n```  \n  \n the following C and assembly expressions yield the size of `arr` and its elements.  \n  \n|__asm|C|Size|  \n|-------------|-------|----------|  \n|**LENGTH** arr|`sizeof`(arr)/`sizeof`(arr[0])|8|  \n|**SIZE** arr|`sizeof`(arr)|32|  \n|**TYPE** arr|`sizeof`(arr[0])|4|  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Using Assembly Language in __asm Blocks](../../assembler/inline/using-assembly-language-in-asm-blocks.md)"}