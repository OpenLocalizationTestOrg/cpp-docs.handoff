{"nodes":[{"pos":[12,50],"content":"_fullpath, _wfullpath | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_fullpath, _wfullpath | Microsoft Docs","pos":[0,38]}]},{"content":"_fullpath, _wfullpath","pos":[1117,1138]},{"content":"Creates an absolute or full path name for the specified relative path name.","pos":[1139,1214]},{"content":"Syntax","pos":[1223,1229]},{"content":"Parameters","pos":[1453,1463]},{"content":"Pointer to a buffer containing the absolute or full path name, or NULL.","pos":[1480,1551]},{"content":"Relative path name.","pos":[1571,1590]},{"content":"Maximum length of the absolute path name buffer (<ph id=\"ph1\">`absPath`</ph>).","pos":[1612,1672],"source":" Maximum length of the absolute path name buffer (`absPath`)."},{"content":"This length is in bytes for <ph id=\"ph1\">`_fullpath`</ph> but in wide characters (<ph id=\"ph2\">`wchar_t`</ph>) for <ph id=\"ph3\">`_wfullpath`</ph>.","pos":[1673,1765],"source":" This length is in bytes for `_fullpath` but in wide characters (`wchar_t`) for `_wfullpath`."},{"content":"Return Value","pos":[1774,1786]},{"content":"Each of these functions returns a pointer to a buffer containing the absolute path name (<ph id=\"ph1\">`absPath`</ph>).","pos":[1790,1890],"source":"Each of these functions returns a pointer to a buffer containing the absolute path name (`absPath`)."},{"content":"If there is an error (for example, if the value passed in <ph id=\"ph1\">`relPath`</ph> includes a drive letter that is not valid or cannot be found, or if the length of the created absolute path name (<ph id=\"ph2\">`absPath`</ph>) is greater than <ph id=\"ph3\">`maxLength`</ph>), the function returns <ph id=\"ph4\">`NULL`</ph>.","pos":[1891,2142],"source":" If there is an error (for example, if the value passed in `relPath` includes a drive letter that is not valid or cannot be found, or if the length of the created absolute path name (`absPath`) is greater than `maxLength`), the function returns `NULL`."},{"content":"Remarks","pos":[2151,2158]},{"content":"The <ph id=\"ph1\">`_fullpath`</ph> function expands the relative path name in <ph id=\"ph2\">`relPath`</ph> to its fully qualified or absolute path and stores this name in <ph id=\"ph3\">`absPath`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[2162,2307],"source":"The `_fullpath` function expands the relative path name in `relPath` to its fully qualified or absolute path and stores this name in `absPath`*.*"},{"content":"If <ph id=\"ph1\">`absPath`</ph> is NULL, <ph id=\"ph2\">`malloc`</ph> is used to allocate a buffer of sufficient length to hold the path name.","pos":[2308,2411],"source":" If `absPath` is NULL, `malloc` is used to allocate a buffer of sufficient length to hold the path name."},{"content":"It is the responsibility of the caller to free this buffer.","pos":[2412,2471]},{"content":"A relative path name specifies a path to another location from the current location (such as the current working directory: \".\").","pos":[2472,2601]},{"content":"An absolute path name is the expansion of a relative path name that states the entire path required to reach the desired location from the root of the file system.","pos":[2602,2765]},{"content":"Unlike <ph id=\"ph1\">`_makepath`</ph>, <ph id=\"ph2\">`_fullpath`</ph> can be used to obtain the absolute path name for relative paths (<ph id=\"ph3\">`relPath`</ph>) that include \"./\" or \"../\" in their names.","pos":[2766,2916],"source":" Unlike `_makepath`, `_fullpath` can be used to obtain the absolute path name for relative paths (`relPath`) that include \"./\" or \"../\" in their names."},{"content":"For example, to use C run-time routines, the application must include the header files that contain the declarations for the routines.","pos":[2923,3057]},{"content":"Each header file include statement references the location of the file in a relative manner (from the application's working directory):","pos":[3058,3193]},{"content":"when the absolute path (actual file system location) of the file might be:","pos":[3237,3311]},{"content":"automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use.","pos":[3400,3571]},{"content":"is a wide-character version of <ph id=\"ph1\">`_fullpath`</ph>; the string arguments to <ph id=\"ph2\">`_wfullpath`</ph> are wide-character strings.","pos":[3585,3693],"source":" is a wide-character version of `_fullpath`; the string arguments to `_wfullpath` are wide-character strings."},{"content":"and <ph id=\"ph1\">`_fullpath`</ph> behave identically except that <ph id=\"ph2\">`_wfullpath`</ph> does not handle multibyte-character strings.","pos":[3707,3811],"source":" and `_fullpath` behave identically except that `_wfullpath` does not handle multibyte-character strings."},{"content":"If <ph id=\"ph1\">`_DEBUG`</ph> and <ph id=\"ph2\">`_CRTDBG_MAP_ALLOC`</ph> are both defined, calls to <ph id=\"ph3\">`_fullpath`</ph> and <ph id=\"ph4\">`_wfullpath`</ph> are replaced by calls to <ph id=\"ph5\">`_fullpath_dbg`</ph> and <ph id=\"ph6\">`_wfullpath_dbg`</ph> to allow for debugging memory allocations.","pos":[3818,4014],"source":"If `_DEBUG` and `_CRTDBG_MAP_ALLOC` are both defined, calls to `_fullpath` and `_wfullpath` are replaced by calls to `_fullpath_dbg` and `_wfullpath_dbg` to allow for debugging memory allocations."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>_fullpath_dbg, _wfullpath_dbg<ept id=\"p1\">](../../c-runtime-library/reference/fullpath-dbg-wfullpath-dbg.md)</ept>.","pos":[4015,4138],"source":" For more information, see [_fullpath_dbg, _wfullpath_dbg](../../c-runtime-library/reference/fullpath-dbg-wfullpath-dbg.md)."},{"content":"This function invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>, if <ph id=\"ph1\">`maxlen`</ph> is less than or equal to 0.","pos":[4145,4326],"source":"This function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md), if `maxlen` is less than or equal to 0."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns <ph id=\"ph3\">`NULL`</ph>.","pos":[4327,4422],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `NULL`."},{"content":"Generic-Text Routine Mappings","pos":[4432,4461]},{"content":"Tchar.h routine","pos":[4468,4483]},{"content":"_UNICODE and _MBCS not defined","pos":[4484,4514]},{"content":"_MBCS defined","pos":[4515,4528]},{"content":"_UNICODE defined","pos":[4529,4545]},{"content":"If the <ph id=\"ph1\">`absPath`</ph> buffer is <ph id=\"ph2\">`NULL`</ph>, <ph id=\"ph3\">`_fullpath`</ph> calls <bpt id=\"p1\">[</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept> to allocate a buffer and ignores the <ph id=\"ph4\">`maxLength`</ph> argument.","pos":[4717,4882],"source":"If the `absPath` buffer is `NULL`, `_fullpath` calls [malloc](../../c-runtime-library/reference/malloc.md) to allocate a buffer and ignores the `maxLength` argument."},{"content":"It is the caller's responsibility to deallocate this buffer (using <bpt id=\"p1\">[</bpt>free<ept id=\"p1\">](../../c-runtime-library/reference/free.md)</ept>) as appropriate.","pos":[4883,5016],"source":" It is the caller's responsibility to deallocate this buffer (using [free](../../c-runtime-library/reference/free.md)) as appropriate."},{"content":"If the <ph id=\"ph1\">`relPath`</ph> argument specifies a disk drive, the current directory of this drive is combined with the path.","pos":[5017,5129],"source":" If the `relPath` argument specifies a disk drive, the current directory of this drive is combined with the path."},{"content":"Requirements","pos":[5138,5150]},{"content":"Function","pos":[5157,5165]},{"content":"Required header","pos":[5166,5181]},{"content":"stdlib.h&gt;","pos":[5241,5250],"source":"stdlib.h>"},{"content":"stdlib.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[5270,5293],"source":"stdlib.h> or \\<wchar.h>"},{"pos":[5301,5419],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[5428,5435]},{"content":".NET Framework Equivalent","pos":[6181,6206]},{"content":"System::IO::File::Create","pos":[6211,6235]},{"content":"See Also","pos":[6314,6322]},{"content":"File Handling","pos":[6327,6340]},{"content":"_getcwd, _wgetcwd","pos":[6389,6406]},{"content":"_getdcwd, _wgetdcwd","pos":[6466,6485]},{"content":"_makepath, _wmakepath","pos":[6547,6568]},{"content":"_splitpath, _wsplitpath","pos":[6632,6655]}],"content":"---\ntitle: \"_fullpath, _wfullpath | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_fullpath\"\n  - \"_wfullpath\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-filesystem-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wfullpath\"\n  - \"fullpath\"\n  - \"_wfullpath\"\n  - \"_fullpath\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_wfullpath function\"\n  - \"relative file paths\"\n  - \"absolute paths\"\n  - \"wfullpath function\"\n  - \"_fullpath function\"\n  - \"fullpath function\"\nms.assetid: 4161ec17-0d22-45dd-b07d-0222553afae9\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _fullpath, _wfullpath\nCreates an absolute or full path name for the specified relative path name.  \n  \n## Syntax  \n  \n```  \nchar *_fullpath(   \n   char *absPath,  \n   const char *relPath,  \n   size_t maxLength   \n);  \nwchar_t *_wfullpath(   \n   wchar_t *absPath,  \n   const wchar_t *relPath,  \n   size_t maxLength   \n);  \n```  \n  \n#### Parameters  \n `absPath`  \n Pointer to a buffer containing the absolute or full path name, or NULL.  \n  \n `relPath`  \n Relative path name.  \n  \n `maxLength`  \n Maximum length of the absolute path name buffer (`absPath`). This length is in bytes for `_fullpath` but in wide characters (`wchar_t`) for `_wfullpath`.  \n  \n## Return Value  \n Each of these functions returns a pointer to a buffer containing the absolute path name (`absPath`). If there is an error (for example, if the value passed in `relPath` includes a drive letter that is not valid or cannot be found, or if the length of the created absolute path name (`absPath`) is greater than `maxLength`), the function returns `NULL`.  \n  \n## Remarks  \n The `_fullpath` function expands the relative path name in `relPath` to its fully qualified or absolute path and stores this name in `absPath`*.* If `absPath` is NULL, `malloc` is used to allocate a buffer of sufficient length to hold the path name. It is the responsibility of the caller to free this buffer. A relative path name specifies a path to another location from the current location (such as the current working directory: \".\"). An absolute path name is the expansion of a relative path name that states the entire path required to reach the desired location from the root of the file system. Unlike `_makepath`, `_fullpath` can be used to obtain the absolute path name for relative paths (`relPath`) that include \"./\" or \"../\" in their names.  \n  \n For example, to use C run-time routines, the application must include the header files that contain the declarations for the routines. Each header file include statement references the location of the file in a relative manner (from the application's working directory):  \n  \n```  \n#include <stdlib.h>  \n```  \n  \n when the absolute path (actual file system location) of the file might be:  \n  \n```  \n\\\\machine\\shareName\\msvcSrc\\crt\\headerFiles\\stdlib.h  \n```  \n  \n `_fullpath` automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use. `_wfullpath` is a wide-character version of `_fullpath`; the string arguments to `_wfullpath` are wide-character strings. `_wfullpath` and `_fullpath` behave identically except that `_wfullpath` does not handle multibyte-character strings.  \n  \n If `_DEBUG` and `_CRTDBG_MAP_ALLOC` are both defined, calls to `_fullpath` and `_wfullpath` are replaced by calls to `_fullpath_dbg` and `_wfullpath_dbg` to allow for debugging memory allocations. For more information, see [_fullpath_dbg, _wfullpath_dbg](../../c-runtime-library/reference/fullpath-dbg-wfullpath-dbg.md).  \n  \n This function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md), if `maxlen` is less than or equal to 0. If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `NULL`.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tfullpath`|`_fullpath`|`_fullpath`|`_wfullpath`|  \n  \n If the `absPath` buffer is `NULL`, `_fullpath` calls [malloc](../../c-runtime-library/reference/malloc.md) to allocate a buffer and ignores the `maxLength` argument. It is the caller's responsibility to deallocate this buffer (using [free](../../c-runtime-library/reference/free.md)) as appropriate. If the `relPath` argument specifies a disk drive, the current directory of this drive is combined with the path.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`_fullpath`|\\<stdlib.h>|  \n|`_wfullpath`|\\<stdlib.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_fullpath.c  \n// This program demonstrates how _fullpath  \n// creates a full path from a partial path.  \n  \n#include <stdio.h>  \n#include <conio.h>  \n#include <stdlib.h>  \n#include <direct.h>  \n  \nvoid PrintFullPath( char * partialPath )  \n{  \n   char full[_MAX_PATH];  \n   if( _fullpath( full, partialPath, _MAX_PATH ) != NULL )  \n      printf( \"Full path is: %s\\n\", full );  \n   else  \n      printf( \"Invalid path\\n\" );  \n}  \n  \nint main( void )  \n{  \n   PrintFullPath( \"test\" );  \n   PrintFullPath( \"\\\\test\" );  \n   PrintFullPath( \"..\\\\test\" );  \n}  \n```  \n  \n```Output  \nFull path is: C:\\Documents and Settings\\user\\My Documents\\test  \nFull path is: C:\\test  \nFull path is: C:\\Documents and Settings\\user\\test  \n```  \n  \n## .NET Framework Equivalent  \n [System::IO::File::Create](https://msdn.microsoft.com/en-us/library/system.io.file.create.aspx)  \n  \n## See Also  \n [File Handling](../../c-runtime-library/file-handling.md)   \n [_getcwd, _wgetcwd](../../c-runtime-library/reference/getcwd-wgetcwd.md)   \n [_getdcwd, _wgetdcwd](../../c-runtime-library/reference/getdcwd-wgetdcwd.md)   \n [_makepath, _wmakepath](../../c-runtime-library/reference/makepath-wmakepath.md)   \n [_splitpath, _wsplitpath](../../c-runtime-library/reference/splitpath-wsplitpath.md)"}