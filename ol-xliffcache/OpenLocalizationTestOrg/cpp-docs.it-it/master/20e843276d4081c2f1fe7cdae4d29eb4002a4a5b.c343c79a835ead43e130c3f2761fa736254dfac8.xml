{"nodes":[{"pos":[12,34],"content":"ldexp | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ldexp | Microsoft Docs","pos":[0,22]}]},{"content":"ldexp","pos":[1105,1110]},{"content":"Multiplies a floating-point number by an integral power of two.","pos":[1111,1174]},{"content":"Syntax","pos":[1183,1189]},{"content":"Parameters","pos":[1508,1518]},{"content":"Floating-point value.","pos":[1529,1550]},{"content":"Integer exponent.","pos":[1566,1583]},{"content":"Return Value","pos":[1592,1604]},{"content":"The <ph id=\"ph1\">`ldexp`</ph> function returns the value of <ph id=\"ph2\">`x`</ph> * 2<ph id=\"ph3\">&lt;sup&gt;</ph>exp<ph id=\"ph4\">&lt;/sup&gt;</ph> if successful.","pos":[1608,1686],"source":"The `ldexp` function returns the value of `x` * 2<sup>exp</sup> if successful."},{"content":"On overflow, and depending on the sign of <ph id=\"ph1\">`x`</ph>, <ph id=\"ph2\">`ldexp`</ph> returns +/– <ph id=\"ph3\">`HUGE_VAL`</ph>; the <ph id=\"ph4\">`errno`</ph> value is set to <ph id=\"ph5\">`ERANGE`</ph>.","pos":[1687,1803],"source":" On overflow, and depending on the sign of `x`, `ldexp` returns +/– `HUGE_VAL`; the `errno` value is set to `ERANGE`."},{"pos":[1810,1999],"content":"For more information about <ph id=\"ph1\">`errno`</ph> and possible error return values, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about `errno` and possible error return values, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[2008,2015]},{"content":"Because C++ allows overloading, you can call overloads of <ph id=\"ph1\">`ldexp`</ph> that take <ph id=\"ph2\">`float`</ph> or <ph id=\"ph3\">`long double`</ph> types.","pos":[2019,2126],"source":"Because C++ allows overloading, you can call overloads of `ldexp` that take `float` or `long double` types."},{"content":"In a C program, <ph id=\"ph1\">`ldexp`</ph> always takes a <ph id=\"ph2\">`double`</ph> and an <ph id=\"ph3\">`int`</ph> and returns a <ph id=\"ph4\">`double`</ph>.","pos":[2127,2211],"source":" In a C program, `ldexp` always takes a `double` and an `int` and returns a `double`."},{"content":"Requirements","pos":[2220,2232]},{"content":"Routine","pos":[2239,2246]},{"content":"C header","pos":[2247,2255]},{"content":"C++ header","pos":[2256,2266]},{"pos":[2330,2341],"content":", <ph id=\"ph1\">`ldexpf`</ph>,","source":", `ldexpf`, "},{"content":"math.h&gt;","pos":[2353,2360],"source":"math.h>"},{"content":"cmath&gt;","pos":[2363,2369],"source":"cmath>"},{"pos":[2377,2470],"content":"For compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[2479,2486]},{"content":"Output","pos":[2741,2747]},{"content":".NET Framework Equivalent","pos":[2813,2838]},{"content":"System::Math::Pow","pos":[2843,2860]},{"content":"See Also","pos":[2933,2941]},{"content":"Floating-Point Support","pos":[2946,2968]},{"content":"frexp","pos":[3026,3031]},{"content":"modf, modff, modfl","pos":[3082,3100]}],"content":"---\ntitle: \"ldexp | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"ldexp\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"ldexp\"\n  - \"_ldexpl\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"calculating real numbers\"\n  - \"computing real numbers\"\n  - \"mantissas, floating-point variables\"\n  - \"ldexp function\"\n  - \"exponent, floating-point numbers\"\n  - \"floating-point functions, mantissa and exponent\"\nms.assetid: aa7f5310-3879-4f63-ae74-86a39fbdedfa\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ldexp\nMultiplies a floating-point number by an integral power of two.  \n  \n## Syntax  \n  \n```  \ndouble ldexp(  \n   double x,  \n   int exp   \n);  \nfloat ldexp(  \n   float x,  \n   int exp  \n);  // C++ only  \nlong double ldexp(  \n   long double x,  \n   int exp  \n);  // C++ only   \nfloat ldexpf(  \n   float x,  \n   int exp  \n);   \nlong double ldexpl(  \n   long double x,  \n   int exp  \n);   \n```  \n  \n#### Parameters  \n `x`  \n Floating-point value.  \n  \n `exp`  \n Integer exponent.  \n  \n## Return Value  \n The `ldexp` function returns the value of `x` * 2<sup>exp</sup> if successful. On overflow, and depending on the sign of `x`, `ldexp` returns +/– `HUGE_VAL`; the `errno` value is set to `ERANGE`.  \n  \n For more information about `errno` and possible error return values, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Because C++ allows overloading, you can call overloads of `ldexp` that take `float` or `long double` types. In a C program, `ldexp` always takes a `double` and an `int` and returns a `double`.  \n  \n## Requirements  \n  \n|Routine|C header|C++ header|  \n|-------------|--------------|------------------|  \n|`ldexp`, `ldexpf`, `ldexpl`|\\<math.h>|\\<cmath>|  \n  \n For compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_ldexp.c  \n  \n#include <math.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   double x = 4.0, y;  \n   int p = 3;  \n  \n   y = ldexp( x, p );  \n   printf( \"%2.1f times two to the power of %d is %2.1f\\n\", x, p, y );  \n}  \n```  \n  \n## Output  \n  \n```  \n4.0 times two to the power of 3 is 32.0  \n```  \n  \n## .NET Framework Equivalent  \n [System::Math::Pow](https://msdn.microsoft.com/en-us/library/system.math.pow.aspx)  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [frexp](../../c-runtime-library/reference/frexp.md)   \n [modf, modff, modfl](../../c-runtime-library/reference/modf-modff-modfl.md)"}