<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3bf833b5edccb0f0da9d7b0553737dc106158e50</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmemfile-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c00688e2190d09632091bf162822afb668d8976</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">917bc628084130cbd0da1229dbbe5e64531711ad</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMemFile Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMemFile Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CFile<ept id="p1">](../../mfc/reference/cfile-class.md)</ept>-derived class that supports memory files.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CMemFile::CMemFile</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a memory file object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CMemFile::Attach</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Attaches a block of memory to <ph id="ph1">`CMemFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CMemFile::Detach</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Detaches the block of memory from <ph id="ph1">`CMemFile`</ph> and returns a pointer to the block of memory detached.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CMemFile::Alloc</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Override to modify memory allocation behavior.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CMemFile::Free</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Override to modify memory deallocation behavior.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CMemFile::GrowFile</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Override to modify behavior when growing a file.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CMemFile::Memcpy</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Override to modify memory copy behavior when reading and writing files.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CMemFile::Realloc</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Override to modify memory reallocation behavior.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>These memory files behave like disk files except that the file is stored in RAM rather than on disk.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A memory file is useful for fast temporary storage or for transferring raw bytes or serialized objects between independent processes.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>objects can automatically allocate their own memory or you can attach your own memory block to the <ph id="ph1">`CMemFile`</ph> object by calling <bpt id="p1">[</bpt>Attach<ept id="p1">](#cmemfile__attach)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In either case, memory for growing the memory file automatically is allocated in <ph id="ph1">`nGrowBytes`</ph>-sized increments if <ph id="ph2">`nGrowBytes`</ph> is not zero.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The memory block will automatically be deleted upon destruction of the <ph id="ph1">`CMemFile`</ph> object if the memory was originally allocated by the <ph id="ph2">`CMemFile`</ph> object; otherwise, you are responsible for deallocating the memory you attached to the object.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can access the memory block through the pointer supplied when you detach it from the <ph id="ph1">`CMemFile`</ph> object by calling <bpt id="p1">[</bpt>Detach<ept id="p1">](#cmemfile__detach)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The most common use of <ph id="ph1">`CMemFile`</ph> is to create a <ph id="ph2">`CMemFile`</ph> object and use it by calling <bpt id="p1">[</bpt>CFile<ept id="p1">](../../mfc/reference/cfile-class.md)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Note that creating a <ph id="ph1">`CMemFile`</ph> automatically opens it: you do not call <bpt id="p1">[</bpt>CFile::Open<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__open)</ept>, which is only used for disk files.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`CMemFile`</ph> doesn't use a disk file, the data member <ph id="ph2">`CFile::m_hFile`</ph> is not used.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CFile`</ph> member functions <bpt id="p1">[</bpt>Duplicate<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__duplicate)</ept>, <bpt id="p2">[</bpt>LockRange<ept id="p2">](../../mfc/reference/cfile-class.md#cfile__lockrange)</ept>, and <bpt id="p3">[</bpt>UnlockRange<ept id="p3">](../../mfc/reference/cfile-class.md#cfile__unlockrange)</ept> are not implemented for <ph id="ph2">`CMemFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you call these functions on a <ph id="ph1">`CMemFile`</ph> object, you will get a <bpt id="p1">[</bpt>CNotSupportedException<ept id="p1">](../../mfc/reference/cnotsupportedexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>uses the run-time library functions <bpt id="p1">[</bpt>malloc<ept id="p1">](../../c-runtime-library/reference/malloc.md)</ept>, <bpt id="p2">[</bpt>realloc<ept id="p2">](../../c-runtime-library/reference/realloc.md)</ept>, and <bpt id="p3">[</bpt>free<ept id="p3">](../../c-runtime-library/reference/free.md)</ept> to allocate, reallocate, and deallocate memory; and the intrinsic <bpt id="p4">[</bpt>memcpy<ept id="p4">](../../c-runtime-library/reference/memcpy-wmemcpy.md)</ept> to block copy memory when reading and writing.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you'd like to change this behavior or the behavior when <ph id="ph1">`CMemFile`</ph> grows a file, derive your own class from <ph id="ph2">`CMemFile`</ph> and override the appropriate functions.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CMemFile`</ph>, see the articles <bpt id="p1">[</bpt>Files in MFC<ept id="p1">](../../mfc/files-in-mfc.md)</ept> and <bpt id="p2">[</bpt>Memory Management (MFC)<ept id="p2">](../../mfc/memory-management.md)</ept> and see <bpt id="p3">[</bpt>File Handling<ept id="p3">](../../c-runtime-library/file-handling.md)</ept> in the <bpt id="p4">*</bpt>Run-Time Library Reference<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CFile</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afx.h</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CMemFile::Alloc</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This function is called by <ph id="ph1">`CMemFile`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Number of bytes of memory to be allocated.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A pointer to the memory block that was allocated, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the allocation failed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Override this function to implement custom memory allocation.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you override this function, you'll probably want to override <bpt id="p1">[</bpt>Free<ept id="p1">](#cmemfile__free)</ept> and <bpt id="p2">[</bpt>Realloc<ept id="p2">](#cmemfile__realloc)</ept> as well.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The default implementation uses the run-time library function <bpt id="p1">[</bpt>malloc<ept id="p1">](../../c-runtime-library/reference/malloc.md)</ept> to allocate memory.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CMemFile::Attach</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Call this function to attach a block of memory to <ph id="ph1">`CMemFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Pointer to the buffer to be attached to <ph id="ph1">`CMemFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An integer that specifies the size of the buffer in bytes.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The memory allocation increment in bytes.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This causes <ph id="ph1">`CMemFile`</ph> to use the block of memory as the memory file.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nGrowBytes`</ph> is 0, <ph id="ph2">`CMemFile`</ph> will set the file length to <ph id="ph3">`nBufferSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This means that the data in the memory block before it was attached to <ph id="ph1">`CMemFile`</ph> will be used as the file.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Memory files created in this manner cannot be grown.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Since the file cannot be grown, be careful not to cause <ph id="ph1">`CMemFile`</ph> to attempt to grow the file.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For example, don't call the <ph id="ph1">`CMemFile`</ph> overrides of <bpt id="p1">[</bpt>CFile:Write<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__write)</ept> to write past the end or don't call <bpt id="p2">[</bpt>CFile:SetLength<ept id="p2">](../../mfc/reference/cfile-class.md#cfile__setlength)</ept> with a length longer than <ph id="ph2">`nBufferSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nGrowBytes`</ph> is greater than 0, <ph id="ph2">`CMemFile`</ph> will ignore the contents of the memory block you've attached.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You'll have to write the contents of the memory file from scratch using the <ph id="ph1">`CMemFile`</ph> override of <ph id="ph2">`CFile::Write`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If you attempt to write past the end of the file or grow the file by calling the <ph id="ph1">`CMemFile`</ph> override of <ph id="ph2">`CFile::SetLength`</ph>, <ph id="ph3">`CMemFile`</ph> will grow the memory allocation in increments of <ph id="ph4">`nGrowBytes`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Growing the memory allocation will fail if the memory block you pass to <bpt id="p1">**</bpt>Attach<ept id="p1">**</ept> wasn't allocated with a method compatible with <bpt id="p2">[</bpt>Alloc<ept id="p2">](#cmemfile__alloc)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To be compatible with the default implementation of <ph id="ph1">`Alloc`</ph>, you must allocate the memory with the run-time library function <bpt id="p1">[</bpt>malloc<ept id="p1">](../../c-runtime-library/reference/malloc.md)</ept> or <bpt id="p2">[</bpt>calloc<ept id="p2">](../../c-runtime-library/reference/calloc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CMemFile::CMemFile</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The first overload opens an empty memory file.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The memory allocation increment in bytes.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lpBuffe<ept id="p1">*</ept>r</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Pointer to a buffer that receives information of the size <ph id="ph1">`nBufferSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>An integer that specifies the size of the file buffer, in bytes.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Note that the file is opened by the constructor and that you should not call <bpt id="p1">[</bpt>CFile::Open<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__open)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The second overload acts the same as if you used the first constructor and immediately called <bpt id="p1">[</bpt>Attach<ept id="p1">](#cmemfile__attach)</ept> with the same parameters.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">**</bpt>Attach<ept id="p1">**</ept> for details.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>NVC_MFCFiles#36</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CMemFile::Detach</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Call this function to get a pointer to the memory block being used by <ph id="ph1">`CMemFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A pointer to the memory block that contains the contents of the memory file.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Calling this function also closes the <ph id="ph1">`CMemFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can reattach the memory block to <ph id="ph1">`CMemFile`</ph> by calling <bpt id="p1">[</bpt>Attach<ept id="p1">](#cmemfile__attach)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If you want to reattach the file and use the data in it, you should call <bpt id="p1">[</bpt>CFile::GetLength<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__getlength)</ept> to get the length of the file before calling <bpt id="p2">**</bpt>Detach<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Note that if you attach a memory block to <ph id="ph1">`CMemFile`</ph> so that you can use its data ( <ph id="ph2">`nGrowBytes`</ph> == 0), then you won't be able to grow the memory file.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>CMemFile::Free</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This function is called by <ph id="ph1">`CMemFile`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Pointer to the memory to be deallocated <bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Override this function to implement custom memory deallocation.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If you override this function, you'll probably want to override <bpt id="p1">[</bpt>Alloc<ept id="p1">](#cmemfile__alloc)</ept> and <bpt id="p2">[</bpt>Realloc<ept id="p2">](#cmemfile__realloc)</ept> as well.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>CMemFile::GrowFile</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This function is called by several of the <ph id="ph1">`CMemFile`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>New size of the memory file.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You can override it if you want to change how <ph id="ph1">`CMemFile`</ph> grows its file.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The default implementation calls <bpt id="p1">[</bpt>Realloc<ept id="p1">](#cmemfile__realloc)</ept> to grow an existing block (or <bpt id="p2">[</bpt>Alloc<ept id="p2">](#cmemfile__alloc)</ept> to create a memory block), allocating memory in multiples of the <ph id="ph1">`nGrowBytes`</ph> value specified in the constructor or <bpt id="p3">[</bpt>Attach<ept id="p3">](#cmemfile__attach)</ept> call.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>CMemFile::Memcpy</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This function is called by the <ph id="ph1">`CMemFile`</ph> overrides of <bpt id="p1">[</bpt>CFile::Read<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__read)</ept> and <bpt id="p2">[</bpt>CFile::Write<ept id="p2">](../../mfc/reference/cfile-class.md#cfile__write)</ept> to transfer data to and from the memory file.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Pointer to the memory block into which the source memory will be copied.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Pointer to the source memory block.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Number of bytes to be copied.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A copy of <ph id="ph1">`lpMemTarget`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Override this function if you want to change the way that <ph id="ph1">`CMemFile`</ph> does these memory copies.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>CMemFile::Realloc</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This function is called by <ph id="ph1">`CMemFile`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A pointer to the memory block to be reallocated.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>New size for the memory block.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A pointer to the memory block that was reallocated (and possibly moved), or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if the reallocation failed.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Override this function to implement custom memory reallocation.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>If you override this function, you'll probably want to override <bpt id="p1">[</bpt>Alloc<ept id="p1">](#cmemfile__alloc)</ept> and <bpt id="p2">[</bpt>Free<ept id="p2">](#cmemfile__free)</ept> as well.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>CFile Class</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>