{"nodes":[{"pos":[12,36],"content":"_ecvt_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_ecvt_s | Microsoft Docs","pos":[0,24]}]},{"pos":[1000,1007],"content":"_ecvt_s","linkify":"_ecvt_s","nodes":[{"content":"_ecvt_s","pos":[0,7]}]},{"content":"Converts a <ph id=\"ph1\">`double`</ph> number to a string.","pos":[1008,1047],"source":"Converts a `double` number to a string."},{"content":"This is a version of <bpt id=\"p1\">[</bpt>_ecvt<ept id=\"p1\">](../../c-runtime-library/reference/ecvt.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1048,1251],"source":" This is a version of [_ecvt](../../c-runtime-library/reference/ecvt.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1260,1266],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1592,1602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`_Buffer`</ph>","pos":[1606,1621],"source":"[out] `_Buffer`"},{"content":"Filled with the pointer to the string of digits, the result of the conversion.","pos":[1625,1703]},{"content":"[in] <ph id=\"ph1\">`_SizeInBytes`</ph>","pos":[1710,1729],"source":"[in] `_SizeInBytes`"},{"content":"Size of the buffer in bytes.","pos":[1733,1761]},{"content":"[in] <ph id=\"ph1\">`_Value`</ph>","pos":[1768,1781],"source":"[in] `_Value`"},{"content":"Number to be converted.","pos":[1785,1808]},{"content":"[in] <ph id=\"ph1\">`_Count`</ph>","pos":[1815,1828],"source":"[in] `_Count`"},{"content":"Number of digits stored.","pos":[1832,1856]},{"content":"[out] <ph id=\"ph1\">`_Dec`</ph>","pos":[1863,1875],"source":"[out] `_Dec`"},{"content":"Stored decimal-point position.","pos":[1879,1909]},{"content":"[out] <ph id=\"ph1\">`_Sign`</ph>","pos":[1916,1929],"source":"[out] `_Sign`"},{"content":"Sign of the converted number.","pos":[1933,1962]},{"pos":[1971,1983],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if successful.","pos":[1987,2006]},{"content":"The return value is an error code if there is a failure.","pos":[2007,2063]},{"content":"Error codes are defined in Errno.h.","pos":[2064,2099]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[2100,2242],"source":" For more information, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"In the case of an invalid parameter, as listed in the following table, this function invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2249,2461],"source":"In the case of an invalid parameter, as listed in the following table, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns <ph id=\"ph3\">`EINVAL`</ph>.","pos":[2462,2559],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `EINVAL`."},{"pos":[2569,2585],"content":"Error Conditions","linkify":"Error Conditions","nodes":[{"content":"Error Conditions","pos":[0,16]}]},{"content":"_Value","pos":[2617,2623]},{"content":"_Count","pos":[2624,2630]},{"content":"_Dec","pos":[2631,2635]},{"content":"_Sign","pos":[2636,2641]},{"content":"Return value","pos":[2642,2654]},{"pos":[2655,2672],"content":"Value in <ph id=\"ph1\">`buffer`</ph>","source":"Value in `buffer`"},{"content":"any","pos":[2821,2824]},{"content":"any","pos":[2825,2828]},{"content":"any","pos":[2829,2832]},{"content":"any","pos":[2833,2836]},{"content":"any","pos":[2837,2840]},{"content":"Not modified.","pos":[2850,2863]},{"pos":[2868,2903],"content":"Not <ph id=\"ph1\">`NULL`</ph> (points to valid memory)","source":"Not `NULL` (points to valid memory)"},{"content":"&lt;=0","pos":[2904,2907],"source":"<=0"},{"content":"any","pos":[2908,2911]},{"content":"any","pos":[2912,2915]},{"content":"any","pos":[2916,2919]},{"content":"any","pos":[2920,2923]},{"content":"Not modified.","pos":[2933,2946]},{"content":"any","pos":[2951,2954]},{"content":"any","pos":[2955,2958]},{"content":"any","pos":[2959,2962]},{"content":"any","pos":[2963,2966]},{"content":"any","pos":[2974,2977]},{"content":"Not modified.","pos":[2987,3000]},{"content":"any","pos":[3005,3008]},{"content":"any","pos":[3009,3012]},{"content":"any","pos":[3013,3016]},{"content":"any","pos":[3017,3020]},{"content":"any","pos":[3021,3024]},{"content":"Not modified.","pos":[3041,3054]},{"pos":[3062,3081],"content":"<bpt id=\"p1\">**</bpt>Security Issues<ept id=\"p1\">**</ept>","source":"**Security Issues**"},{"pos":[3088,3194],"content":"<ph id=\"ph1\">`_ecvt_s`</ph> might generate an access violation if <ph id=\"ph2\">`buffer`</ph> does not point to valid memory and is not <ph id=\"ph3\">`NULL`</ph>.","source":"`_ecvt_s` might generate an access violation if `buffer` does not point to valid memory and is not `NULL`."},{"pos":[3203,3210],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_ecvt_s`</ph> function converts a floating-point number to a character string.","pos":[3214,3292],"source":"The `_ecvt_s` function converts a floating-point number to a character string."},{"content":"The <ph id=\"ph1\">`_Value`</ph> parameter is the floating-point number to be converted.","pos":[3293,3361],"source":" The `_Value` parameter is the floating-point number to be converted."},{"content":"This function stores up to <ph id=\"ph1\">`count`</ph> digits of <ph id=\"ph2\">`_Value`</ph> as a string and appends a null character ('\\0').","pos":[3362,3464],"source":" This function stores up to `count` digits of `_Value` as a string and appends a null character ('\\0')."},{"content":"If the number of digits in <ph id=\"ph1\">`_Value`</ph> exceeds <ph id=\"ph2\">`_Count`</ph>, the low-order digit is rounded.","pos":[3465,3550],"source":" If the number of digits in `_Value` exceeds `_Count`, the low-order digit is rounded."},{"content":"If there are fewer than <ph id=\"ph1\">`count`</ph> digits, the string is padded with zeros.","pos":[3551,3623],"source":" If there are fewer than `count` digits, the string is padded with zeros."},{"content":"Only digits are stored in the string.","pos":[3630,3667]},{"content":"The position of the decimal point and the sign of <ph id=\"ph1\">`_Value`</ph> can be obtained from <ph id=\"ph2\">`_Dec`</ph> and <ph id=\"ph3\">`_Sign`</ph> after the call.","pos":[3668,3782],"source":" The position of the decimal point and the sign of `_Value` can be obtained from `_Dec` and `_Sign` after the call."},{"content":"The <ph id=\"ph1\">`_Dec`</ph> parameter points to an integer value giving the position of the decimal point with respect to the beginning of the string.","pos":[3783,3916],"source":" The `_Dec` parameter points to an integer value giving the position of the decimal point with respect to the beginning of the string."},{"content":"A 0 or negative integer value indicates that the decimal point lies to the left of the first digit.","pos":[3917,4016]},{"content":"The <ph id=\"ph1\">`_Sign`</ph> parameter points to an integer that indicates the sign of the converted number.","pos":[4017,4108],"source":" The `_Sign` parameter points to an integer that indicates the sign of the converted number."},{"content":"If the integer value is 0, the number is positive.","pos":[4109,4159]},{"content":"Otherwise, the number is negative.","pos":[4160,4194]},{"pos":[4201,4277],"content":"A buffer of length <ph id=\"ph1\">`_CVTBUFSIZE`</ph> is sufficient for any floating-point value.","source":"A buffer of length `_CVTBUFSIZE` is sufficient for any floating-point value."},{"content":"The difference between <ph id=\"ph1\">`_ecvt_s`</ph> and <ph id=\"ph2\">`_fcvt_s`</ph> is in the interpretation of the <ph id=\"ph3\">`_Count`</ph> parameter.","pos":[4284,4382],"source":"The difference between `_ecvt_s` and `_fcvt_s` is in the interpretation of the `_Count` parameter."},{"content":"<ph id=\"ph1\">`_ecvt_s`</ph> interprets <ph id=\"ph2\">`_Count`</ph> as the total number of digits in the output string, whereas <ph id=\"ph3\">`_fcvt_s`</ph> interprets <ph id=\"ph4\">`_Count`</ph> as the number of digits after the decimal point.","pos":[4383,4551],"source":"`_ecvt_s` interprets `_Count` as the total number of digits in the output string, whereas `_fcvt_s` interprets `_Count` as the number of digits after the decimal point."},{"content":"In C++, using this function is simplified by a template overload; the overload can infer buffer length automatically, eliminating the need to specify a size argument.","pos":[4558,4724]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[4725,4833],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"The debug version of this function first fills the buffer with 0xFD.","pos":[4840,4908]},{"content":"To disable this behavior, use <bpt id=\"p1\">[</bpt>_CrtSetDebugFillThreshold<ept id=\"p1\">](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)</ept>.","pos":[4909,5030],"source":" To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)."},{"pos":[5039,5051],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[5058,5066]},{"content":"Required header","pos":[5067,5082]},{"content":"Optional header","pos":[5083,5098]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[5176,5187],"source":"\\<stdlib.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[5188,5198],"source":"\\<errno.h>"},{"pos":[5206,5324],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[5333,5340],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5839,5864],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"&lt;xref:System.Convert.ToString%2A&gt;","pos":[5868,5901],"source":"<xref:System.Convert.ToString%2A>"},{"pos":[5910,5918],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Data Conversion<ept id=\"p1\">](../../c-runtime-library/data-conversion.md)</ept><ph id=\"ph1\"> </ph>","pos":[5922,5984],"source":"[Data Conversion](../../c-runtime-library/data-conversion.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[5987,6064],"source":" [Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>atof, _atof_l, _wtof, _wtof_l<ept id=\"p1\">](../../c-runtime-library/reference/atof-atof-l-wtof-wtof-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[6067,6162],"source":" [atof, _atof_l, _wtof, _wtof_l](../../c-runtime-library/reference/atof-atof-l-wtof-wtof-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_ecvt<ept id=\"p1\">](../../c-runtime-library/reference/ecvt.md)</ept><ph id=\"ph1\"> </ph>","pos":[6165,6217],"source":" [_ecvt](../../c-runtime-library/reference/ecvt.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_fcvt_s<ept id=\"p1\">](../../c-runtime-library/reference/fcvt-s.md)</ept><ph id=\"ph1\"> </ph>","pos":[6220,6276],"source":" [_fcvt_s](../../c-runtime-library/reference/fcvt-s.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_gcvt_s<ept id=\"p1\">](../../c-runtime-library/reference/gcvt-s.md)</ept>","pos":[6279,6334],"source":" [_gcvt_s](../../c-runtime-library/reference/gcvt-s.md)"}],"content":"---\ntitle: \"_ecvt_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_ecvt_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"ecvt_s\"\n  - \"_ecvt_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_ecvt_s function\"\n  - \"ecvt_s function\"\n  - \"numbers, converting\"\n  - \"converting double numbers\"\nms.assetid: d52fb0a6-cb91-423f-80b3-952a8955d914\ncaps.latest.revision: 25\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _ecvt_s\nConverts a `double` number to a string. This is a version of [_ecvt](../../c-runtime-library/reference/ecvt.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t _ecvt_s(   \n   char * _Buffer,  \n   size_t _SizeInBytes,  \n   double _Value,  \n   int _Count,  \n   int *_Dec,  \n   int *_Sign  \n);  \ntemplate <size_t size>  \nerrno_t _ecvt_s(   \n   char (&_Buffer)[size],  \n   double _Value,  \n   int _Count,  \n   int *_Dec,  \n   int *_Sign  \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `_Buffer`  \n Filled with the pointer to the string of digits, the result of the conversion.  \n  \n [in] `_SizeInBytes`  \n Size of the buffer in bytes.  \n  \n [in] `_Value`  \n Number to be converted.  \n  \n [in] `_Count`  \n Number of digits stored.  \n  \n [out] `_Dec`  \n Stored decimal-point position.  \n  \n [out] `_Sign`  \n Sign of the converted number.  \n  \n## Return Value  \n Zero if successful. The return value is an error code if there is a failure. Error codes are defined in Errno.h. For more information, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n In the case of an invalid parameter, as listed in the following table, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `EINVAL`.  \n  \n### Error Conditions  \n  \n|`_Buffer`|`_SizeInBytes`|_Value|_Count|_Dec|_Sign|Return value|Value in `buffer`|  \n|---------------|--------------------|-------------|-------------|-----------|------------|------------------|-----------------------|  \n|`NULL`|any|any|any|any|any|`EINVAL`|Not modified.|  \n|Not `NULL` (points to valid memory)|<=0|any|any|any|any|`EINVAL`|Not modified.|  \n|any|any|any|any|`NULL`|any|`EINVAL`|Not modified.|  \n|any|any|any|any|any|`NULL`|`EINVAL`|Not modified.|  \n  \n **Security Issues**  \n  \n `_ecvt_s` might generate an access violation if `buffer` does not point to valid memory and is not `NULL`.  \n  \n## Remarks  \n The `_ecvt_s` function converts a floating-point number to a character string. The `_Value` parameter is the floating-point number to be converted. This function stores up to `count` digits of `_Value` as a string and appends a null character ('\\0'). If the number of digits in `_Value` exceeds `_Count`, the low-order digit is rounded. If there are fewer than `count` digits, the string is padded with zeros.  \n  \n Only digits are stored in the string. The position of the decimal point and the sign of `_Value` can be obtained from `_Dec` and `_Sign` after the call. The `_Dec` parameter points to an integer value giving the position of the decimal point with respect to the beginning of the string. A 0 or negative integer value indicates that the decimal point lies to the left of the first digit. The `_Sign` parameter points to an integer that indicates the sign of the converted number. If the integer value is 0, the number is positive. Otherwise, the number is negative.  \n  \n A buffer of length `_CVTBUFSIZE` is sufficient for any floating-point value.  \n  \n The difference between `_ecvt_s` and `_fcvt_s` is in the interpretation of the `_Count` parameter. `_ecvt_s` interprets `_Count` as the total number of digits in the output string, whereas `_fcvt_s` interprets `_Count` as the number of digits after the decimal point.  \n  \n In C++, using this function is simplified by a template overload; the overload can infer buffer length automatically, eliminating the need to specify a size argument. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n The debug version of this function first fills the buffer with 0xFD. To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md).  \n  \n## Requirements  \n  \n|Function|Required header|Optional header|  \n|--------------|---------------------|---------------------|  \n|`_ecvt_s`|\\<stdlib.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// ecvt_s.c  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <errno.h>  \n  \nint main( )  \n{  \n  char * buf = 0;  \n  int decimal;  \n  int sign;  \n  int err;  \n  \n  buf = (char*) malloc(_CVTBUFSIZE);  \n  err = _ecvt_s(buf, _CVTBUFSIZE, 1.2, 5, &decimal, &sign);  \n  \n  if (err != 0)  \n  {  \n     printf(\"_ecvt_s failed with error code %d\\n\", err);  \n     exit(1);  \n  }  \n  \n  printf(\"Converted value: %s\\n\", buf);    \n  \n}  \n```  \n  \n```Output  \nConverted value: 12000  \n```  \n  \n## .NET Framework Equivalent  \n <xref:System.Convert.ToString%2A>  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [atof, _atof_l, _wtof, _wtof_l](../../c-runtime-library/reference/atof-atof-l-wtof-wtof-l.md)   \n [_ecvt](../../c-runtime-library/reference/ecvt.md)   \n [_fcvt_s](../../c-runtime-library/reference/fcvt-s.md)   \n [_gcvt_s](../../c-runtime-library/reference/gcvt-s.md)"}