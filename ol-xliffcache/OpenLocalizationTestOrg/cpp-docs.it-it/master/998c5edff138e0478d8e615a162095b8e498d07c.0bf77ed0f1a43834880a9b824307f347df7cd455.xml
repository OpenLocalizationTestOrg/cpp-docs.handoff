{"nodes":[{"pos":[12,54],"content":"_makepath_s, _wmakepath_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_makepath_s, _wmakepath_s | Microsoft Docs","pos":[0,42]}]},{"content":"_makepath_s, _wmakepath_s","pos":[1132,1157]},{"content":"Creates a path name from components.","pos":[1158,1194]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>_makepath, _wmakepath<ept id=\"p1\">](../../c-runtime-library/reference/makepath-wmakepath.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1195,1429],"source":" These are versions of [_makepath, _wmakepath](../../c-runtime-library/reference/makepath-wmakepath.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"content":"Syntax","pos":[1438,1444]},{"content":"Parameters","pos":[2190,2200]},{"content":"[out]","pos":[2204,2209]},{"content":"Full path buffer.","pos":[2220,2237]},{"content":"[in]","pos":[2244,2248]},{"content":"Size of the buffer in words.","pos":[2266,2294]},{"content":"[in]","pos":[2301,2305]},{"content":"Size of the buffer in bytes.","pos":[2323,2351]},{"content":"[in]","pos":[2358,2362]},{"content":"Contains a letter (A, B, and so on) corresponding to the desired drive and an optional trailing colon.","pos":[2374,2476]},{"content":"inserts the colon automatically in the composite path if it is missing.","pos":[2491,2562]},{"content":"If <ph id=\"ph1\">`drive`</ph> is <ph id=\"ph2\">`NULL`</ph> or points to an empty string, no drive letter appears in the composite <ph id=\"ph3\">`path`</ph> string.","pos":[2563,2669],"source":" If `drive` is `NULL` or points to an empty string, no drive letter appears in the composite `path` string."},{"content":"[in]","pos":[2676,2680]},{"content":"Contains the path of directories, not including the drive designator or the actual file name.","pos":[2690,2783]},{"content":"The trailing slash is optional, and either a forward slash (/) or a backslash (<ph id=\"ph1\">\\\\</ph>) or both might be used in a single <ph id=\"ph2\">`dir`</ph> argument.","pos":[2784,2916],"source":" The trailing slash is optional, and either a forward slash (/) or a backslash (\\\\) or both might be used in a single `dir` argument."},{"content":"If no trailing slash (/ or <ph id=\"ph1\">\\\\</ph>) is specified, it is inserted automatically.","pos":[2917,2991],"source":" If no trailing slash (/ or \\\\) is specified, it is inserted automatically."},{"content":"If <ph id=\"ph1\">`dir`</ph> is <ph id=\"ph2\">`NULL`</ph> or points to an empty string, no directory path is inserted in the composite <ph id=\"ph3\">`path`</ph> string.","pos":[2992,3102],"source":" If `dir` is `NULL` or points to an empty string, no directory path is inserted in the composite `path` string."},{"content":"[in]","pos":[3109,3113]},{"content":"Contains the base file name without any file name extensions.","pos":[3125,3186]},{"content":"If <ph id=\"ph1\">`fname`</ph> is <ph id=\"ph2\">`NULL`</ph> or points to an empty string, no filename is inserted in the composite <ph id=\"ph3\">`path`</ph> string.","pos":[3187,3293],"source":" If `fname` is `NULL` or points to an empty string, no filename is inserted in the composite `path` string."},{"content":"[in]","pos":[3300,3304]},{"content":"Contains the actual file name extension, with or without a leading period (.).","pos":[3314,3392]},{"content":"inserts the period automatically if it does not appear in <ph id=\"ph1\">`ext`</ph>.","pos":[3407,3471],"source":" inserts the period automatically if it does not appear in `ext`."},{"content":"If <ph id=\"ph1\">`ext`</ph> is <ph id=\"ph2\">`NULL`</ph> or points to an empty string, no extension is inserted in the composite <ph id=\"ph3\">`path`</ph> string.","pos":[3472,3577],"source":" If `ext` is `NULL` or points to an empty string, no extension is inserted in the composite `path` string."},{"content":"Return Value","pos":[3586,3598]},{"content":"Zero if successful; an error code on failure.","pos":[3602,3647]},{"content":"Error Conditions","pos":[3657,3673]},{"content":"Return","pos":[3717,3723]},{"pos":[3724,3735],"content":"Contents of"},{"content":"any","pos":[3846,3849]},{"content":"not modified","pos":[3859,3871]},{"content":"any","pos":[3876,3879]},{"content":"&lt;= 0","pos":[3880,3884],"source":"<= 0"},{"content":"not modified","pos":[3894,3906]},{"content":"If any of the above error conditions occurs, these functions invoke the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3914,4101],"source":"If any of the above error conditions occurs, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to<ph id=\"ph2\">`EINVAL`</ph> and the functions returns<ph id=\"ph3\">`EINVAL`</ph><bpt id=\"p1\">**</bpt>.<ept id=\"p1\">**</ept>","pos":[4102,4203],"source":" If execution is allowed to continue, `errno` is set to`EINVAL` and the functions returns`EINVAL`**.**"},{"content":"is allowed for the parameters <ph id=\"ph1\">`drive`</ph>, <ph id=\"ph2\">`fname`</ph>, and <ph id=\"ph3\">`ext`</ph>.","pos":[4211,4269],"source":" is allowed for the parameters `drive`, `fname`, and `ext`."},{"content":"For information about the behavior when these parameters are null pointers or empty strings, see the Remarks section.","pos":[4270,4387]},{"content":"Remarks","pos":[4396,4403]},{"content":"The <ph id=\"ph1\">`_makepath_s`</ph> function creates a composite path string from individual components, storing the result in <ph id=\"ph2\">`path`</ph>.","pos":[4407,4523],"source":"The `_makepath_s` function creates a composite path string from individual components, storing the result in `path`."},{"content":"The <ph id=\"ph1\">`path`</ph> might include a drive letter, directory path, file name, and file name extension.","pos":[4524,4616],"source":" The `path` might include a drive letter, directory path, file name, and file name extension."},{"content":"is a wide-character version of <ph id=\"ph1\">`_makepath_s`</ph>; the arguments to <ph id=\"ph2\">`_wmakepath_s`</ph> are wide-character strings.","pos":[4632,4737],"source":" is a wide-character version of `_makepath_s`; the arguments to `_wmakepath_s` are wide-character strings."},{"content":"and <ph id=\"ph1\">`_makepath_s`</ph> behave identically otherwise.","pos":[4753,4800],"source":" and `_makepath_s` behave identically otherwise."},{"content":"Generic-Text Routine Mappings","pos":[4810,4839]},{"content":"Tchar.h routine","pos":[4846,4861]},{"content":"_UNICODE and _MBCS not defined","pos":[4862,4892]},{"content":"_MBCS defined","pos":[4893,4906]},{"content":"_UNICODE defined","pos":[4907,4923]},{"content":"The <ph id=\"ph1\">`path`</ph> argument must point to an empty buffer large enough to hold the complete path.","pos":[5103,5192],"source":"The `path` argument must point to an empty buffer large enough to hold the complete path."},{"content":"The composite <ph id=\"ph1\">`path`</ph> must be no larger than the <ph id=\"ph2\">`_MAX_PATH`</ph> constant, defined in Stdlib.h.","pos":[5193,5283],"source":" The composite `path` must be no larger than the `_MAX_PATH` constant, defined in Stdlib.h."},{"content":"If path is <ph id=\"ph1\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[5290,5439],"source":"If path is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"In addition, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[5440,5480],"source":" In addition, `errno` is set to `EINVAL`."},{"content":"values are allowed for all other parameters.","pos":[5488,5532]},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.","pos":[5539,5809]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[5810,5918],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"The debug versions of these functions first fill the buffer with 0xFD.","pos":[5925,5995]},{"content":"To disable this behavior, use <bpt id=\"p1\">[</bpt>_CrtSetDebugFillThreshold<ept id=\"p1\">](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)</ept>.","pos":[5996,6117],"source":" To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)."},{"content":"Requirements","pos":[6126,6138]},{"content":"Routine","pos":[6145,6152]},{"content":"Required header","pos":[6153,6168]},{"content":"stdlib.h&gt;","pos":[6229,6238],"source":"stdlib.h>"},{"content":"stdlib.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[6260,6283],"source":"stdlib.h> or \\<wchar.h>"},{"pos":[6291,6409],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[6418,6425]},{"content":"Output","pos":[7467,7473]},{"content":".NET Framework Equivalent","pos":[7677,7702]},{"content":"System::IO::File::Create","pos":[7707,7731]},{"content":"See Also","pos":[7810,7818]},{"content":"File Handling","pos":[7823,7836]},{"content":"_fullpath, _wfullpath","pos":[7885,7906]},{"content":"_splitpath_s, _wsplitpath_s","pos":[7970,7997]},{"content":"_makepath, _wmakepath","pos":[8067,8088]}],"content":"---\ntitle: \"_makepath_s, _wmakepath_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wmakepath_s\"\n  - \"_makepath_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-filesystem-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_wmakepath_s\"\n  - \"makepath_s\"\n  - \"_makepath_s\"\n  - \"wmakepath_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_makepath_s function\"\n  - \"wmakepath_s function\"\n  - \"paths\"\n  - \"_wmakepath_s function\"\n  - \"makepath_s function\"\nms.assetid: 4405e43c-3d63-4697-bb80-9b8dcd21d027\ncaps.latest.revision: 29\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _makepath_s, _wmakepath_s\nCreates a path name from components. These are versions of [_makepath, _wmakepath](../../c-runtime-library/reference/makepath-wmakepath.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nerrno_t _makepath_s(  \n   char *path,  \n   size_t sizeInBytes,  \n   const char *drive,  \n   const char *dir,  \n   const char *fname,  \n   const char *ext   \n);  \nerrno_t _wmakepath_s(  \n   wchar_t *path,  \n   size_t sizeInWords,  \n   const wchar_t *drive,  \n   const wchar_t *dir,  \n   const wchar_t *fname,  \n   const wchar_t *ext   \n);  \ntemplate <size_t size>  \nerrno_t _makepath_s(  \n   char (&path)[size],  \n   const char *drive,  \n   const char *dir,  \n   const char *fname,  \n   const char *ext   \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _wmakepath_s(  \n   wchar_t (&path)[size],  \n   const wchar_t *drive,  \n   const wchar_t *dir,  \n   const wchar_t *fname,  \n   const wchar_t *ext   \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `path`  \n Full path buffer.  \n  \n [in] `sizeInWords`  \n Size of the buffer in words.  \n  \n [in] `sizeInBytes`  \n Size of the buffer in bytes.  \n  \n [in] `drive`  \n Contains a letter (A, B, and so on) corresponding to the desired drive and an optional trailing colon. `_makepath_s` inserts the colon automatically in the composite path if it is missing. If `drive` is `NULL` or points to an empty string, no drive letter appears in the composite `path` string.  \n  \n [in] `dir`  \n Contains the path of directories, not including the drive designator or the actual file name. The trailing slash is optional, and either a forward slash (/) or a backslash (\\\\) or both might be used in a single `dir` argument. If no trailing slash (/ or \\\\) is specified, it is inserted automatically. If `dir` is `NULL` or points to an empty string, no directory path is inserted in the composite `path` string.  \n  \n [in] `fname`  \n Contains the base file name without any file name extensions. If `fname` is `NULL` or points to an empty string, no filename is inserted in the composite `path` string.  \n  \n [in] `ext`  \n Contains the actual file name extension, with or without a leading period (.). `_makepath_s` inserts the period automatically if it does not appear in `ext`. If `ext` is `NULL` or points to an empty string, no extension is inserted in the composite `path` string.  \n  \n## Return Value  \n Zero if successful; an error code on failure.  \n  \n### Error Conditions  \n  \n|`path`|`sizeInWords` / `sizeInBytes`|Return|Contents of `path`|  \n|------------|------------------------------------|------------|------------------------|  \n|`NULL`|any|`EINVAL`|not modified|  \n|any|<= 0|`EINVAL`|not modified|  \n  \n If any of the above error conditions occurs, these functions invoke the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to`EINVAL` and the functions returns`EINVAL`**.** `NULL` is allowed for the parameters `drive`, `fname`, and `ext`. For information about the behavior when these parameters are null pointers or empty strings, see the Remarks section.  \n  \n## Remarks  \n The `_makepath_s` function creates a composite path string from individual components, storing the result in `path`. The `path` might include a drive letter, directory path, file name, and file name extension. `_wmakepath_s` is a wide-character version of `_makepath_s`; the arguments to `_wmakepath_s` are wide-character strings. `_wmakepath_s` and `_makepath_s` behave identically otherwise.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tmakepath_s`|`_makepath_s`|`_makepath_s`|`_wmakepath_s`|  \n  \n The `path` argument must point to an empty buffer large enough to hold the complete path. The composite `path` must be no larger than the `_MAX_PATH` constant, defined in Stdlib.h.  \n  \n If path is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). In addition, `errno` is set to `EINVAL`. `NULL` values are allowed for all other parameters.  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n The debug versions of these functions first fill the buffer with 0xFD. To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_makepath_s`|\\<stdlib.h>|  \n|`_wmakepath_s`|\\<stdlib.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_makepath_s.c  \n  \n#include <stdlib.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   char path_buffer[_MAX_PATH];  \n   char drive[_MAX_DRIVE];  \n   char dir[_MAX_DIR];  \n   char fname[_MAX_FNAME];  \n   char ext[_MAX_EXT];  \n   errno_t err;  \n  \n   err = _makepath_s( path_buffer, _MAX_PATH, \"c\", \"\\\\sample\\\\crt\\\\\",  \n                      \"crt_makepath_s\", \"c\" );  \n   if (err != 0)  \n   {  \n      printf(\"Error creating path. Error code %d.\\n\", err);  \n      exit(1);  \n   }  \n   printf( \"Path created with _makepath_s: %s\\n\\n\", path_buffer );  \n   err = _splitpath_s( path_buffer, drive, _MAX_DRIVE, dir, _MAX_DIR, fname,  \n                       _MAX_FNAME, ext, _MAX_EXT );  \n   if (err != 0)  \n   {  \n      printf(\"Error splitting the path. Error code %d.\\n\", err);  \n      exit(1);  \n   }  \n   printf( \"Path extracted with _splitpath_s:\\n\" );  \n   printf( \"  Drive: %s\\n\", drive );  \n   printf( \"  Dir: %s\\n\", dir );  \n   printf( \"  Filename: %s\\n\", fname );  \n   printf( \"  Ext: %s\\n\", ext );  \n}  \n```  \n  \n## Output  \n  \n```  \nPath created with _makepath_s: c:\\sample\\crt\\crt_makepath_s.c  \n  \nPath extracted with _splitpath_s:  \n  Drive: c:  \n  Dir: \\sample\\crt\\  \n  Filename: crt_makepath_s  \n  Ext: .c  \n```  \n  \n## .NET Framework Equivalent  \n [System::IO::File::Create](https://msdn.microsoft.com/en-us/library/system.io.file.create.aspx)  \n  \n## See Also  \n [File Handling](../../c-runtime-library/file-handling.md)   \n [_fullpath, _wfullpath](../../c-runtime-library/reference/fullpath-wfullpath.md)   \n [_splitpath_s, _wsplitpath_s](../../c-runtime-library/reference/splitpath-s-wsplitpath-s.md)   \n [_makepath, _wmakepath](../../c-runtime-library/reference/makepath-wmakepath.md)"}