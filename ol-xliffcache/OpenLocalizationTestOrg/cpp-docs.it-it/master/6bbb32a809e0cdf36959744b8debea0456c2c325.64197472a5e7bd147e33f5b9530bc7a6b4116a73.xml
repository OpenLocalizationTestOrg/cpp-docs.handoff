{"nodes":[{"pos":[12,43],"content":"__shiftleft128 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__shiftleft128 | Microsoft Docs","pos":[0,31]}]},{"content":"__shiftleft128","pos":[612,626]},{"content":"Microsoft Specific","pos":[629,647]},{"pos":[656,842],"content":"Shifts a 128-bit quantity, represented as two 64-bit quantities <ph id=\"ph1\">`LowPart`</ph> and <ph id=\"ph2\">`HighPart`</ph>, to the left by a number of bits specified by <ph id=\"ph3\">`Shift`</ph> and returns the high 64 bits of the result.","source":"Shifts a 128-bit quantity, represented as two 64-bit quantities `LowPart` and `HighPart`, to the left by a number of bits specified by `Shift` and returns the high 64 bits of the result."},{"content":"Syntax","pos":[851,857]},{"content":"Parameters","pos":[1015,1025]},{"content":"[in]","pos":[1029,1033]},{"content":"The low 64 bits of the 128-bit quantity to shift.","pos":[1047,1096]},{"content":"[in]","pos":[1103,1107]},{"content":"The high 64 bits of the 128-bit quantity to shift.","pos":[1122,1172]},{"content":"[in]","pos":[1179,1183]},{"content":"The number of bits to shift.","pos":[1195,1223]},{"content":"Return Value","pos":[1232,1244]},{"content":"The high 64 bits of the result.","pos":[1248,1279]},{"content":"Requirements","pos":[1288,1300]},{"content":"Intrinsic","pos":[1307,1316]},{"content":"Architecture","pos":[1317,1329]},{"pos":[1461,1488],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>intrin.h&gt;","source":"**Header file** \\<intrin.h>"},{"content":"Remarks","pos":[1497,1504]},{"pos":[1508,1732],"content":"The <ph id=\"ph1\">`Shift`</ph> value is always modulo 64 so that, for example, if you call <ph id=\"ph2\">`__shiftleft128(1, 0, 64)`</ph>, the function will shift the low part <ph id=\"ph3\">`0`</ph> bits left and return a high part of <ph id=\"ph4\">`0`</ph> and not <ph id=\"ph5\">`1`</ph> as might otherwise be expected.","source":"The `Shift` value is always modulo 64 so that, for example, if you call `__shiftleft128(1, 0, 64)`, the function will shift the low part `0` bits left and return a high part of `0` and not `1` as might otherwise be expected."},{"content":"Example","pos":[1741,1748]},{"content":"END Microsoft Specific","pos":[2730,2752]},{"content":"See Also","pos":[2761,2769]},{"content":"__shiftright128","pos":[2774,2789]},{"content":"Compiler Intrinsics","pos":[2828,2847]}],"content":"---\ntitle: \"__shiftleft128 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"__shiftleft128\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__shiftleft128 intrinsic\"\nms.assetid: 557b846a-8fb0-469d-91ac-1b1fad80dc2a\ncaps.latest.revision: 17\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# __shiftleft128\n**Microsoft Specific**  \n  \n Shifts a 128-bit quantity, represented as two 64-bit quantities `LowPart` and `HighPart`, to the left by a number of bits specified by `Shift` and returns the high 64 bits of the result.  \n  \n## Syntax  \n  \n```  \nunsigned __int64 __shiftleft128(   \n   unsigned __int64 LowPart,   \n   unsigned __int64 HighPart,   \n   unsigned char Shift   \n);  \n```  \n  \n#### Parameters  \n [in] `LowPart`  \n The low 64 bits of the 128-bit quantity to shift.  \n  \n [in] `HighPart`  \n The high 64 bits of the 128-bit quantity to shift.  \n  \n [in] `Shift`  \n The number of bits to shift.  \n  \n## Return Value  \n The high 64 bits of the result.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`__shiftleft128`|[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n  \n **Header file** \\<intrin.h>  \n  \n## Remarks  \n The `Shift` value is always modulo 64 so that, for example, if you call `__shiftleft128(1, 0, 64)`, the function will shift the low part `0` bits left and return a high part of `0` and not `1` as might otherwise be expected.  \n  \n## Example  \n  \n```  \n// shiftleft128.c  \n// processor: IPF, x64  \n#include <stdio.h>  \n#include <intrin.h>  \n  \n#pragma intrinsic (__shiftleft128, __shiftright128)  \n  \nint main()  \n{  \n    unsigned __int64 i = 0x1I64;  \n    unsigned __int64 j = 0x10I64;  \n    unsigned __int64 ResultLowPart;  \n    unsigned __int64 ResultHighPart;  \n  \n    ResultLowPart = i << 1;  \n    ResultHighPart = __shiftleft128(i, j, 1);  \n  \n    // concatenate the low and high parts padded with 0's  \n    // to display correct hexadecimal 128 bit values  \n    printf_s(\"0x%02I64x%016I64x << 1 = 0x%02I64x%016I64x\\n\",  \n             j, i, ResultHighPart, ResultLowPart);  \n  \n    ResultHighPart = j >> 1;  \n    ResultLowPart = __shiftright128(i, j, 1);  \n  \n    printf_s(\"0x%02I64x%016I64x >> 1 = 0x%02I64x%016I64x\\n\",  \n             j, i, ResultHighPart, ResultLowPart);    \n}  \n```  \n  \n```Output  \n0x100000000000000001 << 1 = 0x200000000000000002  \n0x100000000000000001 >> 1 = 0x080000000000000000  \n```  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [__shiftright128](../intrinsics/shiftright128.md)   \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)"}