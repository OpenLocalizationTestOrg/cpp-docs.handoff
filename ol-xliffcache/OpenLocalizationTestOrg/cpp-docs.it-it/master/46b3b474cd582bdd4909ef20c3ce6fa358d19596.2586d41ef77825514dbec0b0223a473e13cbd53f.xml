{"nodes":[{"pos":[12,63],"content":"Lvalue Reference Declarator: &amp; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Lvalue Reference Declarator: <ph id=\"ph1\">&amp;amp;</ph> | Microsoft Docs","pos":[0,51],"source":"Lvalue Reference Declarator: &amp; | Microsoft Docs"}]},{"content":"Lvalue Reference Declarator:","pos":[661,689]},{"content":"Holds the address of an object but behaves syntactically like an object.","pos":[696,768]},{"content":"Syntax","pos":[777,783]},{"content":"Remarks","pos":[838,845]},{"content":"You can think of an lvalue reference as another name for an object.","pos":[849,916]},{"content":"An lvalue reference declaration consists of an optional list of specifiers followed by a reference declarator.","pos":[917,1027]},{"content":"A reference must be initialized and cannot be changed.","pos":[1028,1082]},{"content":"Any object whose address can be converted to a given pointer type can also be converted to the similar reference type.","pos":[1089,1207]},{"content":"For example, any object whose address can be converted to type <ph id=\"ph1\">`char *`</ph> can also be converted to type <ph id=\"ph2\">`char &amp;`</ph>.","pos":[1208,1319],"source":" For example, any object whose address can be converted to type `char *` can also be converted to type `char &`."},{"content":"Do not confuse reference declarations with use of the <bpt id=\"p1\">[</bpt>address-of operator<ept id=\"p1\">](../cpp/address-of-operator-amp.md)</ept>.","pos":[1326,1437],"source":"Do not confuse reference declarations with use of the [address-of operator](../cpp/address-of-operator-amp.md)."},{"content":"When the <ph id=\"ph1\">`&amp;`</ph><bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept> is preceded by a type, such as <ph id=\"ph2\">`int`</ph> or <ph id=\"ph3\">`char`</ph>, <bpt id=\"p2\">*</bpt>identifier<ept id=\"p2\">*</ept> is declared as a reference to the type.","pos":[1438,1563],"source":" When the `&`*identifier* is preceded by a type, such as `int` or `char`, *identifier* is declared as a reference to the type."},{"content":"When <ph id=\"ph1\">`&amp;`</ph><bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept> is not preceded by a type, the usage is that of the address-of operator.","pos":[1564,1657],"source":" When `&`*identifier* is not preceded by a type, the usage is that of the address-of operator."},{"content":"Example","pos":[1666,1673]},{"content":"The following example demonstrates the reference declarator by declaring a <ph id=\"ph1\">`Person`</ph> object and a reference to that object.","pos":[1677,1799],"source":"The following example demonstrates the reference declarator by declaring a `Person` object and a reference to that object."},{"content":"Because <ph id=\"ph1\">`rFriend`</ph> is a reference to <ph id=\"ph2\">`myFriend`</ph>, updating either variable changes the same object.","pos":[1800,1897],"source":" Because `rFriend` is a reference to `myFriend`, updating either variable changes the same object."},{"content":"See Also","pos":[2611,2619]},{"content":"References","pos":[2624,2634]},{"content":"Reference-Type Function Arguments","pos":[2667,2700]},{"content":"Reference-Type Function Returns","pos":[2752,2783]},{"content":"References to Pointers","pos":[2833,2855]}],"content":"---\ntitle: \"Lvalue Reference Declarator: &amp; | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"&\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"reference operator\"\n  - \"& operator, reference operator\"\nms.assetid: edf0513d-3dcc-4663-b276-1269795dda51\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Lvalue Reference Declarator: &amp;\nHolds the address of an object but behaves syntactically like an object.  \n  \n## Syntax  \n  \n```  \n  \ntype-id & cast-expression  \n```  \n  \n## Remarks  \n You can think of an lvalue reference as another name for an object. An lvalue reference declaration consists of an optional list of specifiers followed by a reference declarator. A reference must be initialized and cannot be changed.  \n  \n Any object whose address can be converted to a given pointer type can also be converted to the similar reference type. For example, any object whose address can be converted to type `char *` can also be converted to type `char &`.  \n  \n Do not confuse reference declarations with use of the [address-of operator](../cpp/address-of-operator-amp.md). When the `&`*identifier* is preceded by a type, such as `int` or `char`, *identifier* is declared as a reference to the type. When `&`*identifier* is not preceded by a type, the usage is that of the address-of operator.  \n  \n## Example  \n The following example demonstrates the reference declarator by declaring a `Person` object and a reference to that object. Because `rFriend` is a reference to `myFriend`, updating either variable changes the same object.  \n  \n```  \n// reference_declarator.cpp  \n// compile with: /EHsc  \n// Demonstrates the reference declarator.  \n#include <iostream>  \nusing namespace std;  \n  \nstruct Person  \n{  \n    char* Name;  \n    short Age;  \n};  \n  \nint main()  \n{  \n   // Declare a Person object.  \n   Person myFriend;  \n  \n   // Declare a reference to the Person object.  \n   Person& rFriend = myFriend;  \n  \n   // Set the fields of the Person object.  \n   // Updating either variable changes the same object.  \n   myFriend.Name = \"Bill\";  \n   rFriend.Age = 40;  \n  \n   // Print the fields of the Person object to the console.  \n   cout << rFriend.Name << \" is \" << myFriend.Age << endl;  \n}  \n```  \n  \n```Output  \nBill is 40  \n```  \n  \n## See Also  \n [References](../cpp/references-cpp.md)   \n [Reference-Type Function Arguments](../cpp/reference-type-function-arguments.md)   \n [Reference-Type Function Returns](../cpp/reference-type-function-returns.md)   \n [References to Pointers](../cpp/references-to-pointers.md)"}