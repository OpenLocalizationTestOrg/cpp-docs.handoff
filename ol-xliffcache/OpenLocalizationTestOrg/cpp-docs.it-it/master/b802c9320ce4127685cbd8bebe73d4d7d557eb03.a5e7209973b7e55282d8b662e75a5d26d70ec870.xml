{"nodes":[{"pos":[12,48],"content":"_getdcwd, _wgetdcwd | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_getdcwd, _wgetdcwd | Microsoft Docs","pos":[0,36]}]},{"content":"_getdcwd, _wgetdcwd","pos":[1181,1200]},{"content":"Gets the full path of the current working directory on the specified drive.","pos":[1201,1276]},{"content":"Syntax","pos":[1285,1291]},{"content":"Parameters","pos":[1476,1486]},{"content":"A non-negative integer that specifies the drive (0 = default drive, 1 = A, 2 = B, and so on).","pos":[1501,1594]},{"pos":[1601,1890],"content":"If the specified drive is not available, or the kind of drive (for example, removable, fixed, CD-ROM, RAM disk, or network drive) cannot be determined, the invalid-parameter handler, which is described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>, is invoked.","source":"If the specified drive is not available, or the kind of drive (for example, removable, fixed, CD-ROM, RAM disk, or network drive) cannot be determined, the invalid-parameter handler, which is described in [Parameter Validation](../../c-runtime-library/parameter-validation.md), is invoked."},{"content":"Storage location for the path, or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[1909,1952],"source":" Storage location for the path, or **NULL**."},{"content":"If <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> is specified, this function allocates a buffer of at least <ph id=\"ph1\">`maxlen`</ph> size by using <bpt id=\"p2\">**</bpt>malloc<ept id=\"p2\">**</ept>, and the return value of <ph id=\"ph2\">`_getdcwd`</ph> is a pointer to the allocated buffer.","pos":[1959,2137],"source":"If **NULL** is specified, this function allocates a buffer of at least `maxlen` size by using **malloc**, and the return value of `_getdcwd` is a pointer to the allocated buffer."},{"content":"The buffer can be freed by calling <ph id=\"ph1\">`free`</ph> and passing it the pointer.","pos":[2138,2207],"source":" The buffer can be freed by calling `free` and passing it the pointer."},{"content":"A nonzero positive integer that specifies the maximum length of the path, in characters: <ph id=\"ph1\">`char`</ph> for <ph id=\"ph2\">`_getdcwd`</ph> and <ph id=\"ph3\">`wchar_t`</ph> for <ph id=\"ph4\">`_wgetdcwd`</ph>.","pos":[2226,2367],"source":" A nonzero positive integer that specifies the maximum length of the path, in characters: `char` for `_getdcwd` and `wchar_t` for `_wgetdcwd`."},{"pos":[2374,2549],"content":"If <ph id=\"ph1\">`maxlen`</ph> is not greater than zero, the invalid-parameter handler, which is described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>, is invoked.","source":"If `maxlen` is not greater than zero, the invalid-parameter handler, which is described in [Parameter Validation](../../c-runtime-library/parameter-validation.md), is invoked."},{"content":"Return Value","pos":[2558,2570]},{"pos":[2574,2717],"content":"Pointer to a string that represents the full path of the current working directory on the specified drive, or <ph id=\"ph1\">`NULL`</ph>, which indicates an error.","source":"Pointer to a string that represents the full path of the current working directory on the specified drive, or `NULL`, which indicates an error."},{"content":"If <ph id=\"ph1\">`buffer`</ph> is specified as <ph id=\"ph2\">`NULL`</ph> and there is insufficient memory to allocate <ph id=\"ph3\">`maxlen`</ph> characters, an error occurs and <ph id=\"ph4\">`errno`</ph> is set to <ph id=\"ph5\">`ENOMEM`</ph>.","pos":[2724,2872],"source":"If `buffer` is specified as `NULL` and there is insufficient memory to allocate `maxlen` characters, an error occurs and `errno` is set to `ENOMEM`."},{"content":"If the length of the path,  which includes the terminating null character, exceeds <ph id=\"ph1\">`maxlen`</ph>, an error occurs and <ph id=\"ph2\">`errno`</ph> is set to <ph id=\"ph3\">`ERANGE`</ph>.","pos":[2873,3013],"source":" If the length of the path,  which includes the terminating null character, exceeds `maxlen`, an error occurs and `errno` is set to `ERANGE`."},{"content":"For more information about these error codes, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","pos":[3014,3180],"source":" For more information about these error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[3189,3196]},{"content":"The <ph id=\"ph1\">`_getdcwd`</ph> function gets the full path of the current working directory on the specified drive and stores it at <ph id=\"ph2\">`buffer`</ph>.","pos":[3200,3325],"source":"The `_getdcwd` function gets the full path of the current working directory on the specified drive and stores it at `buffer`."},{"content":"If the current working directory is set to the root, the string ends with a backslash (<ph id=\"ph1\">\\\\</ph>).","pos":[3326,3417],"source":" If the current working directory is set to the root, the string ends with a backslash (\\\\)."},{"content":"If the current working directory is set to a directory other than the root, the string ends with the name of the directory and not with a backslash.","pos":[3418,3566]},{"content":"is a wide-character version of <ph id=\"ph1\">`_getdcwd`</ph>, and its <ph id=\"ph2\">`buffer`</ph> parameter and return value are wide-character strings.","pos":[3585,3699],"source":" is a wide-character version of `_getdcwd`, and its `buffer` parameter and return value are wide-character strings."},{"content":"Otherwise, <ph id=\"ph1\">`_wgetdcwd`</ph> and <ph id=\"ph2\">`_getdcwd`</ph> behave identically.","pos":[3700,3757],"source":" Otherwise, `_wgetdcwd` and `_getdcwd` behave identically."},{"content":"This function is thread-safe even though it depends on <bpt id=\"p1\">**</bpt>GetFullPathName<ept id=\"p1\">**</ept>, which is itself not thread-safe.","pos":[3764,3872],"source":"This function is thread-safe even though it depends on **GetFullPathName**, which is itself not thread-safe."},{"content":"However, you can violate thread safety if your multithreaded application calls both this function and <bpt id=\"p1\">**</bpt>GetFullPathName<ept id=\"p1\">**</ept>.","pos":[3873,3995],"source":" However, you can violate thread safety if your multithreaded application calls both this function and **GetFullPathName**."},{"content":"For more information, go to <bpt id=\"p1\">[</bpt>MSDN Library<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=150542)</ept> and then search for <bpt id=\"p2\">**</bpt>GetFullPathName<ept id=\"p2\">**</ept>.","pos":[3996,4126],"source":" For more information, go to [MSDN Library](http://go.microsoft.com/fwlink/?LinkID=150542) and then search for **GetFullPathName**."},{"content":"The version of this function that has the <ph id=\"ph1\">`_nolock`</ph> suffix behaves identically to this function except that it is not thread-safe and is not protected from interference by other threads.","pos":[4133,4319],"source":"The version of this function that has the `_nolock` suffix behaves identically to this function except that it is not thread-safe and is not protected from interference by other threads."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>_getdcwd_nolock, _wgetdcwd_nolock<ept id=\"p1\">](../../c-runtime-library/reference/getdcwd-nolock-wgetdcwd-nolock.md)</ept>.","pos":[4320,4451],"source":" For more information, see [_getdcwd_nolock, _wgetdcwd_nolock](../../c-runtime-library/reference/getdcwd-nolock-wgetdcwd-nolock.md)."},{"content":"When <ph id=\"ph1\">`_DEBUG`</ph> and <ph id=\"ph2\">`_CRTDBG_MAP_ALLOC`</ph> are defined, calls to <ph id=\"ph3\">`_getdcwd`</ph> and <ph id=\"ph4\">`_wgetdcwd`</ph> are replaced by calls to <ph id=\"ph5\">`_getdcwd_dbg`</ph> and <ph id=\"ph6\">`_wgetdcwd_dbg`</ph> so that you can debug memory allocations.","pos":[4458,4646],"source":"When `_DEBUG` and `_CRTDBG_MAP_ALLOC` are defined, calls to `_getdcwd` and `_wgetdcwd` are replaced by calls to `_getdcwd_dbg` and `_wgetdcwd_dbg` so that you can debug memory allocations."},{"content":"For more information, see<bpt id=\"p1\">[</bpt>_getdcwd_dbg, _wgetdcwd_dbg<ept id=\"p1\">](../../c-runtime-library/reference/getdcwd-dbg-wgetdcwd-dbg.md)</ept>.","pos":[4647,4765],"source":" For more information, see[_getdcwd_dbg, _wgetdcwd_dbg](../../c-runtime-library/reference/getdcwd-dbg-wgetdcwd-dbg.md)."},{"content":"Generic-Text Routine Mappings","pos":[4775,4804]},{"content":"Tchar.h routine","pos":[4811,4826]},{"content":"_UNICODE and _MBCS not defined","pos":[4827,4857]},{"content":"_MBCS defined","pos":[4858,4871]},{"content":"_UNICODE defined","pos":[4872,4888]},{"content":"Requirements","pos":[5058,5070]},{"content":"Routine","pos":[5077,5084]},{"content":"Required header","pos":[5085,5100]},{"content":"direct.h&gt;","pos":[5158,5167],"source":"direct.h>"},{"content":"direct.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[5186,5209],"source":"direct.h> or \\<wchar.h>"},{"pos":[5217,5315],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[5324,5331]},{"pos":[5335,5413],"content":"See the example in <bpt id=\"p1\">[</bpt>_getdrive<ept id=\"p1\">](../../c-runtime-library/reference/getdrive.md)</ept>.","source":"See the example in [_getdrive](../../c-runtime-library/reference/getdrive.md)."},{"content":".NET Framework Equivalent","pos":[5422,5447]},{"content":"System::Environment::CurrentDirectory","pos":[5452,5489]},{"content":"See Also","pos":[5582,5590]},{"content":"Directory Control","pos":[5595,5612]},{"content":"_chdir, _wchdir","pos":[5665,5680]},{"content":"_getcwd, _wgetcwd","pos":[5738,5755]},{"content":"_getdrive","pos":[5815,5824]},{"content":"_mkdir, _wmkdir","pos":[5878,5893]},{"content":"_rmdir, _wrmdir","pos":[5951,5966]}],"content":"---\ntitle: \"_getdcwd, _wgetdcwd | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_getdcwd\"\n  - \"_wgetdcwd\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wgetdcwd\"\n  - \"getdcwd\"\n  - \"_getdcwd\"\n  - \"tgetdcwd\"\n  - \"_wgetdcwd\"\n  - \"_tgetdcwd\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"wgetdcwd function\"\n  - \"working directory\"\n  - \"getdcwd function\"\n  - \"_getdcwd function\"\n  - \"_wgetdcwd function\"\n  - \"current working directory\"\n  - \"directories [C++], current working\"\nms.assetid: 184152f5-c7b0-495b-918d-f9a6adc178bd\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _getdcwd, _wgetdcwd\nGets the full path of the current working directory on the specified drive.  \n  \n## Syntax  \n  \n```  \nchar *_getdcwd(   \n   int drive,  \n   char *buffer,  \n   int maxlen   \n);  \nwchar_t *_wgetdcwd(   \n   int drive,  \n   wchar_t *buffer,  \n   int maxlen   \n);  \n```  \n  \n#### Parameters  \n `drive`  \n A non-negative integer that specifies the drive (0 = default drive, 1 = A, 2 = B, and so on).  \n  \n If the specified drive is not available, or the kind of drive (for example, removable, fixed, CD-ROM, RAM disk, or network drive) cannot be determined, the invalid-parameter handler, which is described in [Parameter Validation](../../c-runtime-library/parameter-validation.md), is invoked.  \n  \n `buffer`  \n Storage location for the path, or **NULL**.  \n  \n If **NULL** is specified, this function allocates a buffer of at least `maxlen` size by using **malloc**, and the return value of `_getdcwd` is a pointer to the allocated buffer. The buffer can be freed by calling `free` and passing it the pointer.  \n  \n `maxlen`  \n A nonzero positive integer that specifies the maximum length of the path, in characters: `char` for `_getdcwd` and `wchar_t` for `_wgetdcwd`.  \n  \n If `maxlen` is not greater than zero, the invalid-parameter handler, which is described in [Parameter Validation](../../c-runtime-library/parameter-validation.md), is invoked.  \n  \n## Return Value  \n Pointer to a string that represents the full path of the current working directory on the specified drive, or `NULL`, which indicates an error.  \n  \n If `buffer` is specified as `NULL` and there is insufficient memory to allocate `maxlen` characters, an error occurs and `errno` is set to `ENOMEM`. If the length of the path,  which includes the terminating null character, exceeds `maxlen`, an error occurs and `errno` is set to `ERANGE`. For more information about these error codes, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `_getdcwd` function gets the full path of the current working directory on the specified drive and stores it at `buffer`. If the current working directory is set to the root, the string ends with a backslash (\\\\). If the current working directory is set to a directory other than the root, the string ends with the name of the directory and not with a backslash.  \n  \n `_wgetdcwd` is a wide-character version of `_getdcwd`, and its `buffer` parameter and return value are wide-character strings. Otherwise, `_wgetdcwd` and `_getdcwd` behave identically.  \n  \n This function is thread-safe even though it depends on **GetFullPathName**, which is itself not thread-safe. However, you can violate thread safety if your multithreaded application calls both this function and **GetFullPathName**. For more information, go to [MSDN Library](http://go.microsoft.com/fwlink/?LinkID=150542) and then search for **GetFullPathName**.  \n  \n The version of this function that has the `_nolock` suffix behaves identically to this function except that it is not thread-safe and is not protected from interference by other threads. For more information, see [_getdcwd_nolock, _wgetdcwd_nolock](../../c-runtime-library/reference/getdcwd-nolock-wgetdcwd-nolock.md).  \n  \n When `_DEBUG` and `_CRTDBG_MAP_ALLOC` are defined, calls to `_getdcwd` and `_wgetdcwd` are replaced by calls to `_getdcwd_dbg` and `_wgetdcwd_dbg` so that you can debug memory allocations. For more information, see[_getdcwd_dbg, _wgetdcwd_dbg](../../c-runtime-library/reference/getdcwd-dbg-wgetdcwd-dbg.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tgetdcwd`|`_getdcwd`|`_getdcwd`|`_wgetdcwd`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_getdcwd`|\\<direct.h>|  \n|`_wgetdcwd`|\\<direct.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n See the example in [_getdrive](../../c-runtime-library/reference/getdrive.md).  \n  \n## .NET Framework Equivalent  \n [System::Environment::CurrentDirectory](https://msdn.microsoft.com/en-us/library/system.environment.currentdirectory.aspx)  \n  \n## See Also  \n [Directory Control](../../c-runtime-library/directory-control.md)   \n [_chdir, _wchdir](../../c-runtime-library/reference/chdir-wchdir.md)   \n [_getcwd, _wgetcwd](../../c-runtime-library/reference/getcwd-wgetcwd.md)   \n [_getdrive](../../c-runtime-library/reference/getdrive.md)   \n [_mkdir, _wmkdir](../../c-runtime-library/reference/mkdir-wmkdir.md)   \n [_rmdir, _wrmdir](../../c-runtime-library/reference/rmdir-wrmdir.md)"}