{"nodes":[{"pos":[12,54],"content":"Reading and Writing Files | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Reading and Writing Files | Microsoft Docs","pos":[0,42]}]},{"content":"Reading and Writing Files","pos":[851,876]},{"content":"If you've used the C run-time library file-handling functions, MFC reading and writing operations will appear familiar.","pos":[877,996]},{"content":"This article describes reading directly from and writing directly to a <ph id=\"ph1\">`CFile`</ph> object.","pos":[997,1083],"source":" This article describes reading directly from and writing directly to a `CFile` object."},{"content":"You can also do buffered file I/O with the <bpt id=\"p1\">[</bpt>CArchive<ept id=\"p1\">](../mfc/reference/carchive-class.md)</ept> class.","pos":[1084,1180],"source":" You can also do buffered file I/O with the [CArchive](../mfc/reference/carchive-class.md) class."},{"content":"To read from and write to the file","pos":[1191,1225]},{"pos":[1235,1318],"content":"Use the <bpt id=\"p1\">**</bpt>Read<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Write<ept id=\"p2\">**</ept> member functions to read and write data in the file.","source":"Use the **Read** and **Write** member functions to read and write data in the file."},{"content":"-or-","pos":[1329,1333]},{"pos":[1343,1436],"content":"The <ph id=\"ph1\">`Seek`</ph> member function is also available for moving to a specific offset within the file.","source":"The `Seek` member function is also available for moving to a specific offset within the file."},{"content":"<bpt id=\"p1\">**</bpt>Read<ept id=\"p1\">**</ept> takes a pointer to a buffer and the number of bytes to read and returns the actual number of bytes that were read.","pos":[1443,1566],"source":"**Read** takes a pointer to a buffer and the number of bytes to read and returns the actual number of bytes that were read."},{"content":"If the required number of bytes could not be read because end-of-file (EOF) is reached, the actual number of bytes read is returned.","pos":[1567,1699]},{"content":"If any read error occurs, an exception is thrown.","pos":[1700,1749]},{"content":"<bpt id=\"p1\">**</bpt>Write<ept id=\"p1\">**</ept> is similar to <bpt id=\"p2\">**</bpt>Read<ept id=\"p2\">**</ept>, but the number of bytes written is not returned.","pos":[1750,1832],"source":"**Write** is similar to **Read**, but the number of bytes written is not returned."},{"content":"If a write error occurs, including not writing all the bytes specified, an exception is thrown.","pos":[1833,1928]},{"content":"If you have a valid <ph id=\"ph1\">`CFile`</ph> object, you can read from it or write to it as shown in the following example:","pos":[1929,2035],"source":" If you have a valid `CFile` object, you can read from it or write to it as shown in the following example:"},{"pos":[2053,2067],"content":"NVC_MFCFiles#2"},{"pos":[2154,2362],"content":"[!NOTE]\n You should normally carry out input/output operations within a **try**/**catch** exception handling block. For more information, see [Exception Handling (MFC)](../mfc/exception-handling-in-mfc.md).","leadings":["","> "],"nodes":[{"content":" You should normally carry out input/output operations within a **try**/**catch** exception handling block. For more information, see [Exception Handling (MFC)](../mfc/exception-handling-in-mfc.md).","pos":[8,206],"nodes":[{"content":"You should normally carry out input/output operations within a <bpt id=\"p1\">**</bpt>try<ept id=\"p1\">**</ept><ph id=\"ph1\">/</ph><bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> exception handling block.","pos":[1,107],"source":" You should normally carry out input/output operations within a **try**/**catch** exception handling block."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Exception Handling (MFC)<ept id=\"p1\">](../mfc/exception-handling-in-mfc.md)</ept>.","pos":[108,198],"source":" For more information, see [Exception Handling (MFC)](../mfc/exception-handling-in-mfc.md)."}]}]},{"content":"See Also","pos":[2371,2379]},{"content":"Files","pos":[2384,2389]}],"content":"---\ntitle: \"Reading and Writing Files | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CFile class, objects\"\n  - \"examples [MFC], reading files\"\n  - \"files [C++], writing to\"\n  - \"examples [MFC], writing to files\"\n  - \"files [C++], reading\"\n  - \"MFC [C++], file operations\"\n  - \"CFile class, reading and writing CFile objects\"\n  - \"reading files\"\n  - \"writing to files [C++]\"\nms.assetid: cac0c826-ba56-495f-99b3-ce6336f65763\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Reading and Writing Files\nIf you've used the C run-time library file-handling functions, MFC reading and writing operations will appear familiar. This article describes reading directly from and writing directly to a `CFile` object. You can also do buffered file I/O with the [CArchive](../mfc/reference/carchive-class.md) class.  \n  \n#### To read from and write to the file  \n  \n1.  Use the **Read** and **Write** member functions to read and write data in the file.  \n  \n     -or-  \n  \n2.  The `Seek` member function is also available for moving to a specific offset within the file.  \n  \n **Read** takes a pointer to a buffer and the number of bytes to read and returns the actual number of bytes that were read. If the required number of bytes could not be read because end-of-file (EOF) is reached, the actual number of bytes read is returned. If any read error occurs, an exception is thrown. **Write** is similar to **Read**, but the number of bytes written is not returned. If a write error occurs, including not writing all the bytes specified, an exception is thrown. If you have a valid `CFile` object, you can read from it or write to it as shown in the following example:  \n  \n [!code-cpp[NVC_MFCFiles#2](../atl-mfc-shared/reference/codesnippet/cpp/reading-and-writing-files_1.cpp)]  \n  \n> [!NOTE]\n>  You should normally carry out input/output operations within a **try**/**catch** exception handling block. For more information, see [Exception Handling (MFC)](../mfc/exception-handling-in-mfc.md).  \n  \n## See Also  \n [Files](../mfc/files-in-mfc.md)\n\n"}