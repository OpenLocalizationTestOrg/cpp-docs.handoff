{"nodes":[{"pos":[12,58],"content":"atof, _atof_l, _wtof, _wtof_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"atof, _atof_l, _wtof, _wtof_l | Microsoft Docs","pos":[0,46]}]},{"content":"atof, _atof_l, _wtof, _wtof_l","pos":[1448,1477]},{"content":"Convert a string to double.","pos":[1478,1505]},{"content":"Syntax","pos":[1514,1520]},{"content":"Parameters","pos":[1769,1779]},{"content":"String to be converted.","pos":[1792,1815]},{"content":"Locale to use.","pos":[1834,1848]},{"content":"Return Value","pos":[1857,1869]},{"content":"Each function returns the <ph id=\"ph1\">`double`</ph> value produced by interpreting the input characters as a number.","pos":[1873,1972],"source":"Each function returns the `double` value produced by interpreting the input characters as a number."},{"content":"The return value is 0.0 if the input cannot be converted to a value of that type.","pos":[1973,2054]},{"content":"In all out-of-range cases, errno is set to <ph id=\"ph1\">`ERANGE`</ph>.","pos":[2061,2113],"source":"In all out-of-range cases, errno is set to `ERANGE`."},{"content":"If the parameter passed in is <ph id=\"ph1\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2114,2282],"source":" If the parameter passed in is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and return 0.","pos":[2283,2373],"source":" If execution is allowed to continue, these functions set `errno` to `EINVAL` and return 0."},{"content":"Remarks","pos":[2382,2389]},{"content":"These functions convert a character string to a double-precision, floating-point value.","pos":[2393,2480]},{"content":"The input string is a sequence of characters that can be interpreted as a numerical value of the specified type.","pos":[2487,2599]},{"content":"The function stops reading the input string at the first character that it cannot recognize as part of a number.","pos":[2600,2712]},{"content":"This character may be the null character ('\\0' or L'\\0') terminating the string.","pos":[2713,2793]},{"pos":[2800,2864],"content":"The <ph id=\"ph1\">`str`</ph> argument to <ph id=\"ph2\">`atof`</ph> and <ph id=\"ph3\">`_wtof`</ph> has the following form:","source":"The `str` argument to `atof` and `_wtof` has the following form:"},{"pos":[2871,2954],"content":"[<ph id=\"ph1\">`whitespace`</ph>] [<ph id=\"ph2\">`sign`</ph>] [<ph id=\"ph3\">`digits`</ph>] [<ph id=\"ph4\">`.digits`</ph>] [ {<ph id=\"ph5\">`e`</ph> &amp;#124; <ph id=\"ph6\">`E`</ph> }[<ph id=\"ph7\">`sign`</ph>]<ph id=\"ph8\">`digits`</ph>]","source":"[`whitespace`] [`sign`] [`digits`] [`.digits`] [ {`e` &#124; `E` }[`sign`]`digits`]"},{"content":"A <ph id=\"ph1\">`whitespace`</ph> consists of space or tab characters, which are ignored; <ph id=\"ph2\">`sign`</ph> is either plus (+) or minus (–); and <ph id=\"ph3\">`digits`</ph> are one or more decimal digits.","pos":[2961,3116],"source":"A `whitespace` consists of space or tab characters, which are ignored; `sign` is either plus (+) or minus (–); and `digits` are one or more decimal digits."},{"content":"If no digits appear before the decimal point, at least one must appear after the decimal point.","pos":[3117,3212]},{"content":"The decimal digits may be followed by an exponent, which consists of an introductory letter (<ph id=\"ph1\">`e`</ph>, or <ph id=\"ph2\">`E`</ph>) and an optionally signed decimal integer.","pos":[3213,3360],"source":" The decimal digits may be followed by an exponent, which consists of an introductory letter (`e`, or `E`) and an optionally signed decimal integer."},{"content":"The UCRT versions of these functions do not support conversion of Fortran-style (<ph id=\"ph1\">`d`</ph> or <ph id=\"ph2\">`D`</ph>) exponent letters.","pos":[3366,3476],"source":"The UCRT versions of these functions do not support conversion of Fortran-style (`d` or `D`) exponent letters."},{"content":"This non-standard extension was supported by earlier versions of the CRT, and may be a breaking change for your code.","pos":[3477,3594]},{"pos":[3601,3750],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current locale."},{"content":"Generic-Text Routine Mappings","pos":[3760,3789]},{"content":"TCHAR.H routine","pos":[3796,3811]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3812,3840],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3841,3854]},{"content":"_UNICODE defined","pos":[3855,3871]},{"content":"Requirements","pos":[4058,4070]},{"content":"Routine(s)","pos":[4077,4087]},{"content":"Required header","pos":[4088,4103]},{"pos":[4159,4160],"content":","},{"content":"C: <ph id=\"ph1\">\\&lt;</ph>math.h&gt; or <ph id=\"ph2\">\\&lt;</ph>stdlib.h&gt; C++: <ph id=\"ph3\">\\&lt;</ph>cstdlib&gt;, <ph id=\"ph4\">\\&lt;</ph>stdlib.h&gt;, <ph id=\"ph5\">\\&lt;</ph>cmath&gt; or <ph id=\"ph6\">\\&lt;</ph>math.h&gt;","pos":[4171,4250],"source":"C: \\<math.h> or \\<stdlib.h> C++: \\<cstdlib>, \\<stdlib.h>, \\<cmath> or \\<math.h>"},{"pos":[4262,4263],"content":","},{"content":"C: <ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt; C++: <ph id=\"ph3\">\\&lt;</ph>cstdlib&gt;, <ph id=\"ph4\">\\&lt;</ph>stdlib.h&gt; or <ph id=\"ph5\">\\&lt;</ph>wchar.h&gt;","pos":[4274,4345],"source":"C: \\<stdlib.h> or \\<wchar.h> C++: \\<cstdlib>, \\<stdlib.h> or \\<wchar.h>"},{"content":"Example","pos":[4355,4362]},{"pos":[4366,4491],"content":"This program shows how numbers stored as strings can be converted to numeric values using the <ph id=\"ph1\">`atof`</ph> and <ph id=\"ph2\">`_atof_l`</ph> functions.","source":"This program shows how numbers stored as strings can be converted to numeric values using the `atof` and `_atof_l` functions."},{"content":"See Also","pos":[5890,5898]},{"content":"Data Conversion","pos":[5903,5918]},{"content":"Floating-Point Support","pos":[5969,5991]},{"content":"Locale","pos":[6049,6055]},{"content":"_ecvt","pos":[6097,6102]},{"content":"_fcvt","pos":[6152,6157]},{"content":"_gcvt","pos":[6207,6212]},{"content":"setlocale, _wsetlocale","pos":[6262,6284]},{"content":"_atodbl, _atodbl_l, _atoldbl, _atoldbl_l, _atoflt, _atoflt_l","pos":[6350,6410]}],"content":"---\ntitle: \"atof, _atof_l, _wtof, _wtof_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wtof_l\"\n  - \"atof\"\n  - \"_atof_l\"\n  - \"_wtof\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_tstof\"\n  - \"_ttof\"\n  - \"atof\"\n  - \"stdlib/atof\"\n  - \"math/atof\"\n  - \"_atof_l\"\n  - \"stdlib/_atof_l\"\n  - \"math/_atof_l\"\n  - \"_wtof\"\n  - \"corecrt_wstdlib/_wtof\"\n  - \"_wtof_l\"\n  - \"corecrt_wstdlib/_wtof_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"tstof function\"\n  - \"atof_l function\"\n  - \"_atof_l function\"\n  - \"atof function\"\n  - \"_tstof function\"\n  - \"_ttof function\"\n  - \"wtof function\"\n  - \"_wtof_l function\"\n  - \"ttof function\"\n  - \"wtof_l function\"\n  - \"_wtof function\"\n  - \"string conversion, to floating point values\"\nms.assetid: eb513241-c9a9-4f5c-b7e7-a49b14abfb75\ncaps.latest.revision: 26\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# atof, _atof_l, _wtof, _wtof_l\nConvert a string to double.  \n  \n## Syntax  \n  \n```  \ndouble atof(  \n   const char *str   \n);  \ndouble _atof_l(  \n   const char *str,  \n   _locale_t locale  \n);  \ndouble _wtof(  \n   const wchar_t *str   \n);  \ndouble _wtof_l(  \n   const wchar_t *str,  \n   _locale_t locale  \n);  \n```  \n  \n## Parameters  \n `str`  \n String to be converted.  \n  \n `locale`  \n Locale to use.  \n  \n## Return Value  \n Each function returns the `double` value produced by interpreting the input characters as a number. The return value is 0.0 if the input cannot be converted to a value of that type.  \n  \n In all out-of-range cases, errno is set to `ERANGE`. If the parameter passed in is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions set `errno` to `EINVAL` and return 0.  \n  \n## Remarks  \n These functions convert a character string to a double-precision, floating-point value.  \n  \n The input string is a sequence of characters that can be interpreted as a numerical value of the specified type. The function stops reading the input string at the first character that it cannot recognize as part of a number. This character may be the null character ('\\0' or L'\\0') terminating the string.  \n  \n The `str` argument to `atof` and `_wtof` has the following form:  \n  \n [`whitespace`] [`sign`] [`digits`] [`.digits`] [ {`e` &#124; `E` }[`sign`]`digits`]  \n  \n A `whitespace` consists of space or tab characters, which are ignored; `sign` is either plus (+) or minus (–); and `digits` are one or more decimal digits. If no digits appear before the decimal point, at least one must appear after the decimal point. The decimal digits may be followed by an exponent, which consists of an introductory letter (`e`, or `E`) and an optionally signed decimal integer.  \n \n The UCRT versions of these functions do not support conversion of Fortran-style (`d` or `D`) exponent letters. This non-standard extension was supported by earlier versions of the CRT, and may be a breaking change for your code.  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current locale.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tstof`|`atof`|`atof`|`_wtof`|  \n|`_ttof`|`atof`|`atof`|`_wtof`|  \n  \n## Requirements  \n  \n|Routine(s)|Required header|  \n|------------------|---------------------|  \n|`atof`, `_atof_l`|C: \\<math.h> or \\<stdlib.h> C++: \\<cstdlib>, \\<stdlib.h>, \\<cmath> or \\<math.h>|  \n|`_wtof`, `_wtof_l`|C: \\<stdlib.h> or \\<wchar.h> C++: \\<cstdlib>, \\<stdlib.h> or \\<wchar.h>|  \n  \n## Example  \n This program shows how numbers stored as strings can be converted to numeric values using the `atof` and `_atof_l` functions.  \n  \n```C  \n// crt_atof.c  \n//  \n// This program shows how numbers stored as   \n// strings can be converted to numeric  \n// values using the atof and _atof_l functions.  \n\n#include <stdlib.h>  \n#include <stdio.h>  \n#include <locale.h>  \n\nint main(void)\n{\n    char    *str = NULL;\n    double value = 0;\n    _locale_t fr = _create_locale(LC_NUMERIC, \"fr-FR\");\n\n    // An example of the atof function  \n    // using leading and training spaces.  \n    str = \"  3336402735171707160320 \";\n    value = atof(str);\n    printf(\"Function: atof(\\\"%s\\\") = %e\\n\", str, value);\n\n    // Another example of the atof function  \n    // using the 'E' exponential formatting keyword.  \n    str = \"3.1412764583E210\";\n    value = atof(str);\n    printf(\"Function: atof(\\\"%s\\\") = %e\\n\", str, value);\n\n    // An example of the atof and _atof_l functions  \n    // using the 'e' exponential formatting keyword  \n    // and showing different decimal point interpretations.  \n    str = \"  -2,309e-25\";\n    value = atof(str);\n    printf(\"Function: atof(\\\"%s\\\") = %e\\n\", str, value);\n    value = _atof_l(str, fr);\n    printf(\"Function: _atof_l(\\\"%s\\\", fr)) = %e\\n\", str, value);\n}  \n```  \n  \n```Output  \nFunction: atof(\"  3336402735171707160320 \") = 3.336403e+21\nFunction: atof(\"3.1412764583E210\") = 3.141276e+210\nFunction: atof(\"  -2,309e-25\") = -2.000000e+00\nFunction: _atof_l(\"  -2,309e-25\", fr)) = -2.309000e-25  \n```  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [_ecvt](../../c-runtime-library/reference/ecvt.md)   \n [_fcvt](../../c-runtime-library/reference/fcvt.md)   \n [_gcvt](../../c-runtime-library/reference/gcvt.md)   \n [setlocale, _wsetlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md)   \n [_atodbl, _atodbl_l, _atoldbl, _atoldbl_l, _atoflt, _atoflt_l](../../c-runtime-library/reference/atodbl-atodbl-l-atoldbl-atoldbl-l-atoflt-atoflt-l.md)"}