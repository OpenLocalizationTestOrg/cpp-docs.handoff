{"nodes":[{"pos":[12,57],"content":"Event Handling in Native C++ | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Event Handling in Native C++ | Microsoft Docs","pos":[0,45]}]},{"content":"Event Handling in Native C++","pos":[603,631]},{"content":"In native C++ event handling, you set up an event source and event receiver using the <bpt id=\"p1\">[</bpt>event_source<ept id=\"p1\">](../windows/event-source.md)</ept> and <bpt id=\"p2\">[</bpt>event_receiver<ept id=\"p2\">](../windows/event-receiver.md)</ept> attributes, respectively, specifying <ph id=\"ph1\">`type`=`native`</ph>.","pos":[632,865],"source":"In native C++ event handling, you set up an event source and event receiver using the [event_source](../windows/event-source.md) and [event_receiver](../windows/event-receiver.md) attributes, respectively, specifying `type`=`native`."},{"content":"These attributes allow the classes to which they are applied to fire events and handle events in a native, non-COM context.","pos":[866,989]},{"content":"Declaring Events","pos":[998,1014]},{"content":"In an event source class, use the <bpt id=\"p1\">[</bpt>__event<ept id=\"p1\">](../cpp/event.md)</ept> keyword on a method declaration to declare the method as an event.","pos":[1018,1145],"source":"In an event source class, use the [__event](../cpp/event.md) keyword on a method declaration to declare the method as an event."},{"content":"Make sure to declare the method, but do not define it; to do so will generate a compiler error, because the compiler defines the method implicitly when it is made into an event.","pos":[1146,1323]},{"content":"Native events can be methods with zero or more parameters.","pos":[1324,1382]},{"content":"The return type can be void or any integral type.","pos":[1383,1432]},{"content":"Defining Event Handlers","pos":[1441,1464]},{"content":"In an event receiver class, you define event handlers, which are methods with signatures (return types, calling conventions, and arguments) that match the event that they will handle.","pos":[1468,1651]},{"content":"Hooking Event Handlers to Events","pos":[1660,1692]},{"content":"Also in an event receiver class, you use the intrinsic function <bpt id=\"p1\">[</bpt>__hook<ept id=\"p1\">](../cpp/hook.md)</ept> to associate events with event handlers and <bpt id=\"p2\">[</bpt>__unhook<ept id=\"p2\">](../cpp/unhook.md)</ept> to dissociate events from event handlers.","pos":[1696,1899],"source":"Also in an event receiver class, you use the intrinsic function [__hook](../cpp/hook.md) to associate events with event handlers and [__unhook](../cpp/unhook.md) to dissociate events from event handlers."},{"content":"You can hook several events to an event handler, or several event handlers to an event.","pos":[1900,1987]},{"content":"Firing Events","pos":[1996,2009]},{"content":"To fire an event, simply call the method declared as an event in the event source class.","pos":[2013,2101]},{"content":"If handlers have been hooked to the event, the handlers will be called.","pos":[2102,2173]},{"content":"Native C++ Event Code","pos":[2183,2204]},{"content":"The following example shows how to fire an event in native C++.","pos":[2208,2271]},{"content":"To compile and run the example, refer to the comments in the code.","pos":[2272,2338]},{"content":"Example","pos":[2347,2354]},{"content":"Code","pos":[2364,2368]},{"content":"Output","pos":[3375,3381]},{"content":"See Also","pos":[3485,3493]},{"content":"Event Handling","pos":[3498,3512]}],"content":"---\ntitle: \"Event Handling in Native C++ | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"event handling, Visual C++\"\nms.assetid: e4b9219a-15d8-42fb-83c8-6d2e4e087c8d\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Event Handling in Native C++\nIn native C++ event handling, you set up an event source and event receiver using the [event_source](../windows/event-source.md) and [event_receiver](../windows/event-receiver.md) attributes, respectively, specifying `type`=`native`. These attributes allow the classes to which they are applied to fire events and handle events in a native, non-COM context.  \n  \n## Declaring Events  \n In an event source class, use the [__event](../cpp/event.md) keyword on a method declaration to declare the method as an event. Make sure to declare the method, but do not define it; to do so will generate a compiler error, because the compiler defines the method implicitly when it is made into an event. Native events can be methods with zero or more parameters. The return type can be void or any integral type.  \n  \n## Defining Event Handlers  \n In an event receiver class, you define event handlers, which are methods with signatures (return types, calling conventions, and arguments) that match the event that they will handle.  \n  \n## Hooking Event Handlers to Events  \n Also in an event receiver class, you use the intrinsic function [__hook](../cpp/hook.md) to associate events with event handlers and [__unhook](../cpp/unhook.md) to dissociate events from event handlers. You can hook several events to an event handler, or several event handlers to an event.  \n  \n## Firing Events  \n To fire an event, simply call the method declared as an event in the event source class. If handlers have been hooked to the event, the handlers will be called.  \n  \n### Native C++ Event Code  \n The following example shows how to fire an event in native C++. To compile and run the example, refer to the comments in the code.  \n  \n## Example  \n  \n### Code  \n  \n```  \n// evh_native.cpp  \n#include <stdio.h>  \n  \n[event_source(native)]  \nclass CSource {  \npublic:  \n   __event void MyEvent(int nValue);  \n};  \n  \n[event_receiver(native)]  \nclass CReceiver {  \npublic:  \n   void MyHandler1(int nValue) {  \n      printf_s(\"MyHandler1 was called with value %d.\\n\", nValue);  \n   }  \n  \n   void MyHandler2(int nValue) {  \n      printf_s(\"MyHandler2 was called with value %d.\\n\", nValue);  \n   }  \n  \n   void hookEvent(CSource* pSource) {  \n      __hook(&CSource::MyEvent, pSource, &CReceiver::MyHandler1);  \n      __hook(&CSource::MyEvent, pSource, &CReceiver::MyHandler2);  \n   }  \n  \n   void unhookEvent(CSource* pSource) {  \n      __unhook(&CSource::MyEvent, pSource, &CReceiver::MyHandler1);  \n      __unhook(&CSource::MyEvent, pSource, &CReceiver::MyHandler2);  \n   }  \n};  \n  \nint main() {  \n   CSource source;  \n   CReceiver receiver;  \n  \n   receiver.hookEvent(&source);  \n   __raise source.MyEvent(123);  \n   receiver.unhookEvent(&source);  \n}  \n```  \n  \n### Output  \n  \n```  \nMyHandler2 was called with value 123.  \nMyHandler1 was called with value 123.  \n```  \n  \n## See Also  \n [Event Handling](../cpp/event-handling.md)"}