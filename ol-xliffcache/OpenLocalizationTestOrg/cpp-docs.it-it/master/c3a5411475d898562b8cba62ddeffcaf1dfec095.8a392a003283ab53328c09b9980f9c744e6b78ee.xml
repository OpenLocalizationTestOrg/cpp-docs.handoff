{"nodes":[{"pos":[12,61],"content":"Compiler Warning (level 1) C4350 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Warning (level 1) C4350 | Microsoft Docs","pos":[0,49]}]},{"pos":[635,667],"content":"Compiler Warning (level 1) C4350","linkify":"Compiler Warning (level 1) C4350","nodes":[{"content":"Compiler Warning (level 1) C4350","pos":[0,32]}]},{"content":"behavior change: 'member1' called instead of 'member2'","pos":[668,722]},{"content":"An rvalue cannot be bound to a non-const reference.","pos":[729,780]},{"content":"In previous versions of Visual C++, it was possible to bind an rvalue to a non-const reference in a direct initialization.","pos":[781,903]},{"content":"This code now gives a warning.","pos":[904,934]},{"content":"For backward compatibility, it is still possible to bind rvalues to non-const references, but standard conversions are preferred wherever possible.","pos":[941,1088]},{"content":"This warning represents a change of behavior from the Visual C++ .NET 2002 compiler.","pos":[1095,1179]},{"content":"If enabled, this warning could possibly be given for correct code.","pos":[1180,1246]},{"content":"For example, it could be given when using the <bpt id=\"p1\">**</bpt>std::auto_ptr<ept id=\"p1\">**</ept> class template.","pos":[1247,1326],"source":" For example, it could be given when using the **std::auto_ptr** class template."},{"content":"If you get this warning, examine your code to see if it depends on binding rvalues to non-const references.","pos":[1333,1440]},{"content":"Adding a const to the reference or providing a additional const-reference overload may solve the problem.","pos":[1441,1546]},{"content":"This warning is off by default.","pos":[1553,1584]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Compiler Warnings That Are Off by Default<ept id=\"p1\">](../../preprocessor/compiler-warnings-that-are-off-by-default.md)</ept>.","pos":[1585,1720],"source":" For more information, see [Compiler Warnings That Are Off by Default](../../preprocessor/compiler-warnings-that-are-off-by-default.md)."},{"content":"The following sample generates C4350:","pos":[1727,1764]}],"content":"---\ntitle: \"Compiler Warning (level 1) C4350 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C4350\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C4350\"\nms.assetid: 4cc8ed67-64c4-4da5-a7a5-a639232baa23\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Compiler Warning (level 1) C4350\nbehavior change: 'member1' called instead of 'member2'  \n  \n An rvalue cannot be bound to a non-const reference. In previous versions of Visual C++, it was possible to bind an rvalue to a non-const reference in a direct initialization. This code now gives a warning.  \n  \n For backward compatibility, it is still possible to bind rvalues to non-const references, but standard conversions are preferred wherever possible.  \n  \n This warning represents a change of behavior from the Visual C++ .NET 2002 compiler. If enabled, this warning could possibly be given for correct code. For example, it could be given when using the **std::auto_ptr** class template.  \n  \n If you get this warning, examine your code to see if it depends on binding rvalues to non-const references. Adding a const to the reference or providing a additional const-reference overload may solve the problem.  \n  \n This warning is off by default. For more information, see [Compiler Warnings That Are Off by Default](../../preprocessor/compiler-warnings-that-are-off-by-default.md).  \n  \n The following sample generates C4350:  \n  \n```  \n// C4350.cpp  \n// compile with: /W1  \n#pragma warning (default : 4350)  \nclass A {};  \n  \nclass B  \n{  \npublic:  \n   B(B&){}  \n   // try the following instead  \n   // B(const B&){}  \n  \n   B(A){}  \n   operator A(){ return A();}  \n};  \n  \nB source() { return A(); }  \n  \nint main()  \n{  \n   B ap(source());   // C4350  \n}  \n```"}