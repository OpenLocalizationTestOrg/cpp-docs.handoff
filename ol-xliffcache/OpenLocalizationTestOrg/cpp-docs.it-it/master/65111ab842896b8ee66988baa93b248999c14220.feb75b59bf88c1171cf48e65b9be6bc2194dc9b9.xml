{"nodes":[{"pos":[12,53],"content":"#import Attributes (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"import Attributes (C++) | Microsoft Docs","pos":[1,41]}]},{"content":"import Attributes (C++)","pos":[600,623]},{"content":"Provides links to attributes used with the #import directive.","pos":[624,685]},{"content":"Microsoft Specific","pos":[694,712]},{"content":"The following attributes are available to the #import directive.","pos":[721,785]},{"content":"Attribute","pos":[792,801]},{"content":"Description","pos":[802,813]},{"content":"auto_rename","pos":[857,868]},{"content":"Renames C++ reserved words by appending two underscores (__) to the variable name to resolve potential name conflicts.","pos":[902,1020]},{"content":"auto_search","pos":[1026,1037]},{"content":"Specifies that, when a type library is referenced with #import and itself references another type library, the compiler can do an implicit #import for the other type library.","pos":[1071,1245]},{"content":"embedded_idl","pos":[1251,1263]},{"content":"Specifies that the type library is written to the .tlh file with the attribute-generated code preserved.","pos":[1298,1402]},{"content":"exclude","pos":[1408,1415]},{"content":"Excludes items from the type library header files being generated.","pos":[1457,1523]},{"content":"high_method_prefix","pos":[1529,1547]},{"content":"Specifies a prefix to be used in naming high-level properties and methods.","pos":[1588,1662]},{"content":"high_property_prefixes","pos":[1668,1690]},{"content":"Specifies alternate prefixes for three property methods.","pos":[1735,1791]},{"content":"implementation_only","pos":[1797,1816]},{"content":"Suppresses the generation of the .tlh header file (the primary header file).","pos":[1858,1934]},{"content":"include()","pos":[1940,1949]},{"content":"Disables automatic exclusion.","pos":[1986,2015]},{"content":"inject_statement","pos":[2021,2037]},{"content":"Inserts its argument as source text into the type-library header.","pos":[2076,2141]},{"content":"named_guids","pos":[2147,2158]},{"pos":[2192,2365],"content":"Tells the compiler to define and initialize GUID variables in old style, of the form <bpt id=\"p1\">**</bpt>LIBID_MyLib<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>CLSID_MyCoClass<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>IID_MyInterface<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>DIID_MyDispInterface<ept id=\"p4\">**</ept>.","source":"Tells the compiler to define and initialize GUID variables in old style, of the form **LIBID_MyLib**, **CLSID_MyCoClass**, **IID_MyInterface**, and **DIID_MyDispInterface**."},{"content":"no_auto_exclude","pos":[2371,2386]},{"content":"Disables automatic exclusion.","pos":[2424,2453]},{"content":"no_dual_interfaces","pos":[2459,2477]},{"content":"Changes the way the compiler generates wrapper functions for dual interface methods.","pos":[2518,2602]},{"content":"no_implementation","pos":[2608,2625]},{"content":"Suppresses the generation of the .tli header, which contains the implementations of the wrapper member functions.","pos":[2665,2778]},{"content":"no_namespace","pos":[2784,2796]},{"content":"Specifies that the namespace name is not generated by the compiler.","pos":[2831,2898]},{"content":"no_registry","pos":[2904,2915]},{"content":"Tells the compiler not to search the registry for type libraries.","pos":[2949,3014]},{"content":"no_search_namespace","pos":[3020,3039]},{"pos":[3081,3303],"content":"Has the same functionality as the <bpt id=\"p1\">[</bpt>no_namespace<ept id=\"p1\">](../preprocessor/no-namespace.md)</ept> attribute but is used on type libraries that you use the #import directive with the <bpt id=\"p2\">[</bpt>auto_search<ept id=\"p2\">](../preprocessor/auto-search.md)</ept> attribute.","source":"Has the same functionality as the [no_namespace](../preprocessor/no-namespace.md) attribute but is used on type libraries that you use the #import directive with the [auto_search](../preprocessor/auto-search.md) attribute."},{"content":"no_smart_pointers","pos":[3309,3326]},{"content":"Suppresses the creation of smart pointers for all interfaces in the type library.","pos":[3366,3447]},{"content":"raw_dispinterfaces","pos":[3453,3471]},{"pos":[3512,3680],"content":"Tells the compiler to generate low-level wrapper functions for dispinterface methods and properties that call <bpt id=\"p1\">**</bpt>IDispatch::Invoke<ept id=\"p1\">**</ept> and return the <ph id=\"ph1\">`HRESULT`</ph> error code.","source":"Tells the compiler to generate low-level wrapper functions for dispinterface methods and properties that call **IDispatch::Invoke** and return the `HRESULT` error code."},{"content":"raw_interfaces_only","pos":[3686,3705]},{"pos":[3747,3894],"content":"Suppresses the generation of error-handling wrapper functions and <bpt id=\"p1\">[</bpt>property<ept id=\"p1\">](../cpp/property-cpp.md)</ept> declarations that use those wrapper functions.","source":"Suppresses the generation of error-handling wrapper functions and [property](../cpp/property-cpp.md) declarations that use those wrapper functions."},{"content":"raw_method_prefix","pos":[3900,3917]},{"content":"Specifies a different prefix to avoid name collisions.","pos":[3957,4011]},{"content":"raw_native_types","pos":[4017,4033]},{"content":"Disables the use of COM support classes in the high-level wrapper functions and forces the use of low-level data types instead.","pos":[4072,4199]},{"content":"raw_property_prefixes","pos":[4205,4226]},{"content":"Specifies alternate prefixes for three property methods.","pos":[4270,4326]},{"content":"rename","pos":[4332,4338]},{"content":"Works around name collision problems.","pos":[4379,4416]},{"content":"rename_namespace","pos":[4422,4438]},{"content":"Renames the namespace that contains the contents of the type library.","pos":[4477,4546]},{"content":"rename_search_namespace","pos":[4552,4575]},{"pos":[4621,4851],"content":"Has the same functionality as the <bpt id=\"p1\">[</bpt>rename_namespace<ept id=\"p1\">](../preprocessor/rename-namespace.md)</ept> attribute but is used on type libraries that you use the #import directive with the <bpt id=\"p2\">[</bpt>auto_search<ept id=\"p2\">](../preprocessor/auto-search.md)</ept> attribute.","source":"Has the same functionality as the [rename_namespace](../preprocessor/rename-namespace.md) attribute but is used on type libraries that you use the #import directive with the [auto_search](../preprocessor/auto-search.md) attribute."},{"content":"tlbid","pos":[4857,4862]},{"content":"Allows for loading libraries other than the primary type library.","pos":[4890,4955]},{"content":"END Microsoft Specific","pos":[4965,4987]},{"content":"See Also","pos":[4998,5006]},{"content":"import Directive","pos":[5012,5028]}],"content":"---\ntitle: \"#import Attributes (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"#import directive, attributes\"\nms.assetid: 2a5085e3-82ee-4f83-892b-0aa6cc13863b\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# #import Attributes (C++)\nProvides links to attributes used with the #import directive.  \n  \n **Microsoft Specific**  \n  \n The following attributes are available to the #import directive.  \n  \n|Attribute|Description|  \n|---------------|-----------------|  \n|[auto_rename](../preprocessor/auto-rename.md)|Renames C++ reserved words by appending two underscores (__) to the variable name to resolve potential name conflicts.|  \n|[auto_search](../preprocessor/auto-search.md)|Specifies that, when a type library is referenced with #import and itself references another type library, the compiler can do an implicit #import for the other type library.|  \n|[embedded_idl](../preprocessor/embedded-idl.md)|Specifies that the type library is written to the .tlh file with the attribute-generated code preserved.|  \n|[exclude](../preprocessor/exclude-hash-import.md)|Excludes items from the type library header files being generated.|  \n|[high_method_prefix](../preprocessor/high-method-prefix.md)|Specifies a prefix to be used in naming high-level properties and methods.|  \n|[high_property_prefixes](../preprocessor/high-property-prefixes.md)|Specifies alternate prefixes for three property methods.|  \n|[implementation_only](../preprocessor/implementation-only.md)|Suppresses the generation of the .tlh header file (the primary header file).|  \n|[include()](../preprocessor/include-parens.md)|Disables automatic exclusion.|  \n|[inject_statement](../preprocessor/inject-statement.md)|Inserts its argument as source text into the type-library header.|  \n|[named_guids](../preprocessor/named-guids.md)|Tells the compiler to define and initialize GUID variables in old style, of the form **LIBID_MyLib**, **CLSID_MyCoClass**, **IID_MyInterface**, and **DIID_MyDispInterface**.|  \n|[no_auto_exclude](../preprocessor/no-auto-exclude.md)|Disables automatic exclusion.|  \n|[no_dual_interfaces](../preprocessor/no-dual-interfaces.md)|Changes the way the compiler generates wrapper functions for dual interface methods.|  \n|[no_implementation](../preprocessor/no-implementation.md)|Suppresses the generation of the .tli header, which contains the implementations of the wrapper member functions.|  \n|[no_namespace](../preprocessor/no-namespace.md)|Specifies that the namespace name is not generated by the compiler.|  \n|[no_registry](../preprocessor/no-registry.md)|Tells the compiler not to search the registry for type libraries.|  \n|[no_search_namespace](../preprocessor/no-search-namespace.md)|Has the same functionality as the [no_namespace](../preprocessor/no-namespace.md) attribute but is used on type libraries that you use the #import directive with the [auto_search](../preprocessor/auto-search.md) attribute.|  \n|[no_smart_pointers](../preprocessor/no-smart-pointers.md)|Suppresses the creation of smart pointers for all interfaces in the type library.|  \n|[raw_dispinterfaces](../preprocessor/raw-dispinterfaces.md)|Tells the compiler to generate low-level wrapper functions for dispinterface methods and properties that call **IDispatch::Invoke** and return the `HRESULT` error code.|  \n|[raw_interfaces_only](../preprocessor/raw-interfaces-only.md)|Suppresses the generation of error-handling wrapper functions and [property](../cpp/property-cpp.md) declarations that use those wrapper functions.|  \n|[raw_method_prefix](../preprocessor/raw-method-prefix.md)|Specifies a different prefix to avoid name collisions.|  \n|[raw_native_types](../preprocessor/raw-native-types.md)|Disables the use of COM support classes in the high-level wrapper functions and forces the use of low-level data types instead.|  \n|[raw_property_prefixes](../preprocessor/raw-property-prefixes.md)|Specifies alternate prefixes for three property methods.|  \n|[rename](../preprocessor/rename-hash-import.md)|Works around name collision problems.|  \n|[rename_namespace](../preprocessor/rename-namespace.md)|Renames the namespace that contains the contents of the type library.|  \n|[rename_search_namespace](../preprocessor/rename-search-namespace.md)|Has the same functionality as the [rename_namespace](../preprocessor/rename-namespace.md) attribute but is used on type libraries that you use the #import directive with the [auto_search](../preprocessor/auto-search.md) attribute.|  \n|[tlbid](../preprocessor/tlbid.md)|Allows for loading libraries other than the primary type library.|  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [#import Directive](../preprocessor/hash-import-directive-cpp.md)"}