{"nodes":[{"pos":[12,65],"content":"Jumping to Labels in Inline Assembly | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Jumping to Labels in Inline Assembly | Microsoft Docs","pos":[0,53]}]},{"content":"Jumping to Labels in Inline Assembly","pos":[798,834]},{"content":"Microsoft Specific","pos":[838,856]},{"content":"Like an ordinary C or C++ label, a label in an <ph id=\"ph1\">`__asm`</ph> block has scope throughout the function in which it is defined (not only in the block).","pos":[860,1002],"source":"Like an ordinary C or C++ label, a label in an `__asm` block has scope throughout the function in which it is defined (not only in the block)."},{"content":"Both assembly instructions and <ph id=\"ph1\">`goto`</ph> statements can jump to labels inside or outside the <ph id=\"ph2\">`__asm`</ph> block.","pos":[1003,1107],"source":" Both assembly instructions and `goto` statements can jump to labels inside or outside the `__asm` block."},{"content":"Labels defined in <ph id=\"ph1\">`__asm`</ph> blocks are not case sensitive; both <ph id=\"ph2\">`goto`</ph> statements and assembly instructions can refer to those labels without regard to case.","pos":[1114,1269],"source":"Labels defined in `__asm` blocks are not case sensitive; both `goto` statements and assembly instructions can refer to those labels without regard to case."},{"content":"C and C++ labels are case sensitive only when used by <ph id=\"ph1\">`goto`</ph> statements.","pos":[1270,1342],"source":" C and C++ labels are case sensitive only when used by `goto` statements."},{"content":"Assembly instructions can jump to a C or C++ label without regard to case.","pos":[1343,1417]},{"content":"The following code shows all the permutations:","pos":[1424,1470]},{"content":"Don't use C library function names as labels in <ph id=\"ph1\">`__asm`</ph> blocks.","pos":[2017,2080],"source":"Don't use C library function names as labels in `__asm` blocks."},{"content":"For instance, you might be tempted to use <ph id=\"ph1\">`exit`</ph> as a label, as follows:","pos":[2081,2153],"source":" For instance, you might be tempted to use `exit` as a label, as follows:"},{"pos":[2302,2445],"content":"Because <bpt id=\"p1\">**</bpt>exit<ept id=\"p1\">**</ept> is the name of a C library function, this code might cause a jump to the <bpt id=\"p2\">**</bpt>exit<ept id=\"p2\">**</ept> function instead of to the desired location.","source":"Because **exit** is the name of a C library function, this code might cause a jump to the **exit** function instead of to the desired location."},{"content":"As in MASM programs, the dollar symbol (<ph id=\"ph1\">`$`</ph>) serves as the current location counter.","pos":[2452,2536],"source":"As in MASM programs, the dollar symbol (`$`) serves as the current location counter."},{"content":"It is a label for the instruction currently being assembled.","pos":[2537,2597]},{"content":"In <ph id=\"ph1\">`__asm`</ph> blocks, its main use is to make long conditional jumps:","pos":[2598,2664],"source":" In `__asm` blocks, its main use is to make long conditional jumps:"},{"content":"END Microsoft Specific","pos":[2789,2811]},{"content":"See Also","pos":[2822,2830]},{"content":"Inline Assembler","pos":[2835,2851]}],"content":"---\ntitle: \"Jumping to Labels in Inline Assembly | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"inline assembly, jumping to labels\"\n  - \"labels, in inline assembly\"\n  - \"__asm keyword [C++], labels\"\n  - \"case sensitivity, labels in inline assembly\"\n  - \"labels, in __asm blocks\"\n  - \"jumping to labels in inline assembly\"\nms.assetid: 36c18b97-8981-4631-9dfd-af6c14a04297\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Jumping to Labels in Inline Assembly\n## Microsoft Specific  \n Like an ordinary C or C++ label, a label in an `__asm` block has scope throughout the function in which it is defined (not only in the block). Both assembly instructions and `goto` statements can jump to labels inside or outside the `__asm` block.  \n  \n Labels defined in `__asm` blocks are not case sensitive; both `goto` statements and assembly instructions can refer to those labels without regard to case. C and C++ labels are case sensitive only when used by `goto` statements. Assembly instructions can jump to a C or C++ label without regard to case.  \n  \n The following code shows all the permutations:  \n  \n```  \nvoid func( void )  \n{  \n   goto C_Dest;  /* Legal: correct case   */  \n   goto c_dest;  /* Error: incorrect case */  \n  \n   goto A_Dest;  /* Legal: correct case   */  \n   goto a_dest;  /* Legal: incorrect case */  \n  \n   __asm  \n   {  \n      jmp C_Dest ; Legal: correct case  \n      jmp c_dest ; Legal: incorrect case  \n  \n      jmp A_Dest ; Legal: correct case  \n      jmp a_dest ; Legal: incorrect case  \n  \n      a_dest:    ; __asm label  \n   }  \n  \n   C_Dest:       /* C label */   \n   return;  \n}  \nint main()  \n{  \n}  \n```  \n  \n Don't use C library function names as labels in `__asm` blocks. For instance, you might be tempted to use `exit` as a label, as follows:  \n  \n```  \n; BAD TECHNIQUE: using library function name as label  \njne exit  \n   .  \n   .  \n   .  \nexit:  \n   ; More __asm code follows  \n```  \n  \n Because **exit** is the name of a C library function, this code might cause a jump to the **exit** function instead of to the desired location.  \n  \n As in MASM programs, the dollar symbol (`$`) serves as the current location counter. It is a label for the instruction currently being assembled. In `__asm` blocks, its main use is to make long conditional jumps:  \n  \n```  \njne $+5 ; next instruction is 5 bytes long  \njmp farlabel  \n; $+5  \n   .  \n   .  \n   .  \nfarlabel:  \n```  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Inline Assembler](../../assembler/inline/inline-assembler.md)"}