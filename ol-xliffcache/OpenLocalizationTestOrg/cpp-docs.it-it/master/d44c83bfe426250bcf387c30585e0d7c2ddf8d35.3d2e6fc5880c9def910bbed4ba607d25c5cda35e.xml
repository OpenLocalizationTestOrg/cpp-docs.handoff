{"nodes":[{"pos":[12,77],"content":"Avoiding Problem Areas with Multithread Programs | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Avoiding Problem Areas with Multithread Programs | Microsoft Docs","pos":[0,65]}]},{"content":"Avoiding Problem Areas with Multithread Programs","pos":[749,797]},{"content":"There are several problems you might encounter in creating, linking, or executing a multithread C program.","pos":[798,904]},{"content":"Some of the more common problems are described in the following table.","pos":[905,975]},{"content":"(For a similar discussion from the MFC point of view, see <bpt id=\"p1\">[</bpt>Multithreading: Programming Tips<ept id=\"p1\">](../parallel/multithreading-programming-tips.md)</ept>.)","pos":[976,1118],"source":" (For a similar discussion from the MFC point of view, see [Multithreading: Programming Tips](../parallel/multithreading-programming-tips.md).)"},{"content":"Problem","pos":[1125,1132]},{"content":"Probable cause","pos":[1133,1147]},{"content":"You get a message box showing that your program caused a protection violation.","pos":[1191,1269]},{"content":"Many Win32 programming errors cause protection violations.","pos":[1270,1328]},{"content":"A common cause of protection violations is the indirect assignment of data to null pointers.","pos":[1329,1421]},{"content":"Because this results in your program trying to access memory that does not belong to it, a protection violation is issued.","pos":[1422,1544]},{"content":"An easy way to detect the cause of a protection violation is to compile your program with debugging information and then run it through the debugger in the Visual C++ environment.","pos":[1557,1736]},{"content":"When the protection fault occurs, Windows transfers control to the debugger and the cursor is positioned on the line that caused the problem.","pos":[1737,1878]},{"content":"Your program generates numerous compile and link errors.","pos":[1883,1939]},{"content":"You can eliminate many potential problems by setting the compiler's warning level to one of its highest values and heeding the warning messages.","pos":[1940,2084]},{"content":"By using the level 3 or level 4 warning level options, you can detect unintentional data conversions, missing function prototypes, and use of non-ANSI features.","pos":[2085,2245]},{"content":"See Also","pos":[2255,2263]},{"content":"Multithreading with C and Win32","pos":[2268,2299]}],"content":"---\ntitle: \"Avoiding Problem Areas with Multithread Programs | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"multithreading [C++], troubleshooting\"\n  - \"errors [C++], multithreaded programs\"\n  - \"threading [C++], troubleshooting\"\n  - \"troubleshooting [C++], multithreading\"\nms.assetid: 06cc231d-bb5a-409d-8bd3-676c9e2a8c5b\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Avoiding Problem Areas with Multithread Programs\nThere are several problems you might encounter in creating, linking, or executing a multithread C program. Some of the more common problems are described in the following table. (For a similar discussion from the MFC point of view, see [Multithreading: Programming Tips](../parallel/multithreading-programming-tips.md).)  \n  \n|Problem|Probable cause|  \n|-------------|--------------------|  \n|You get a message box showing that your program caused a protection violation.|Many Win32 programming errors cause protection violations. A common cause of protection violations is the indirect assignment of data to null pointers. Because this results in your program trying to access memory that does not belong to it, a protection violation is issued.<br /><br /> An easy way to detect the cause of a protection violation is to compile your program with debugging information and then run it through the debugger in the Visual C++ environment. When the protection fault occurs, Windows transfers control to the debugger and the cursor is positioned on the line that caused the problem.|  \n|Your program generates numerous compile and link errors.|You can eliminate many potential problems by setting the compiler's warning level to one of its highest values and heeding the warning messages. By using the level 3 or level 4 warning level options, you can detect unintentional data conversions, missing function prototypes, and use of non-ANSI features.|  \n  \n## See Also  \n [Multithreading with C and Win32](../parallel/multithreading-with-c-and-win32.md)"}