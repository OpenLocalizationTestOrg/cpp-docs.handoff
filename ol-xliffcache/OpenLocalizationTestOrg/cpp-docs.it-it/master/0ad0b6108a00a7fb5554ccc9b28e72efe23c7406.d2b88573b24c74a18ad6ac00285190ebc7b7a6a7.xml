{"nodes":[{"pos":[12,59],"content":"operator== (multimap) (STL-LR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"operator== (multimap) (STL-LR) | Microsoft Docs","pos":[0,47]}]},{"content":"operator== (multimap) (STL/CLR)","pos":[647,678]},{"content":"List equal comparison.","pos":[679,701]},{"content":"Syntax","pos":[710,716]},{"content":"Parameters","pos":[882,892]},{"content":"left","pos":[896,900]},{"content":"Left container to compare.","pos":[904,930]},{"content":"right","pos":[937,942]},{"content":"Right container to compare.","pos":[946,973]},{"content":"Remarks","pos":[982,989]},{"content":"The operator function returns true only if the sequences controlled by <ph id=\"ph1\">`left`</ph> and <ph id=\"ph2\">`right`</ph> have the same length and, for each position <ph id=\"ph3\">`i`</ph>, <ph id=\"ph4\">`left``[i] ==`</ph> <ph id=\"ph5\">`right``[i]`</ph>.","pos":[993,1160],"source":"The operator function returns true only if the sequences controlled by `left` and `right` have the same length and, for each position `i`, `left``[i] ==` `right``[i]`."},{"content":"You use it to test whether <ph id=\"ph1\">`left`</ph> is ordered the same as <ph id=\"ph2\">`right`</ph> when the two multimaps are compared element by element.","pos":[1161,1281],"source":" You use it to test whether `left` is ordered the same as `right` when the two multimaps are compared element by element."},{"content":"Example","pos":[1290,1297]},{"content":"Requirements","pos":[2623,2635]},{"pos":[2639,2664],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/map&gt;","source":"**Header:** \\<cliext/map>"},{"pos":[2671,2692],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2701,2709]},{"content":"multimap (STL/CLR)","pos":[2714,2732]},{"content":"operator!= (multimap) (STL/CLR)","pos":[2770,2801]},{"content":"operator<ph id=\"ph1\">\\&lt;</ph> (multimap) (STL/CLR)","pos":[2859,2890],"source":"operator\\< (multimap) (STL/CLR)"},{"content":"operator&gt;= (multimap) (STL/CLR)","pos":[2947,2978],"source":"operator>= (multimap) (STL/CLR)"},{"content":"operator&gt; (multimap) (STL/CLR)","pos":[3042,3072],"source":"operator> (multimap) (STL/CLR)"},{"content":"operator&lt;= (multimap) (STL/CLR)","pos":[3132,3163],"source":"operator<= (multimap) (STL/CLR)"}],"content":"---\ntitle: \"operator== (multimap) (STL-LR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::multimap::operator==\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator== member [STL/CLR]\"\nms.assetid: 19f22238-7acf-47dc-b95e-310b39f554ad\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# operator== (multimap) (STL/CLR)\nList equal comparison.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Key,  \n    typename Mapped>  \n    bool operator==(multimap<Key, Mapped>% left,  \n        multimap<Key, Mapped>% right);  \n```  \n  \n#### Parameters  \n left  \n Left container to compare.  \n  \n right  \n Right container to compare.  \n  \n## Remarks  \n The operator function returns true only if the sequences controlled by `left` and `right` have the same length and, for each position `i`, `left``[i] ==` `right``[i]`. You use it to test whether `left` is ordered the same as `right` when the two multimaps are compared element by element.  \n  \n## Example  \n  \n```  \n// cliext_multimap_operator_eq.cpp   \n// compile with: /clr   \n#include <cliext/map>   \n  \ntypedef cliext::multimap<wchar_t, int> Mymultimap;   \nint main()   \n    {   \n    Mymultimap c1;   \n    c1.insert(Mymultimap::make_value(L'a', 1));   \n    c1.insert(Mymultimap::make_value(L'b', 2));   \n    c1.insert(Mymultimap::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Mymultimap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// assign to a new container   \n    Mymultimap c2;   \n    c2.insert(Mymultimap::make_value(L'a', 1));   \n    c2.insert(Mymultimap::make_value(L'b', 2));   \n    c2.insert(Mymultimap::make_value(L'd', 4));   \n  \n// display contents \" [a 1] [b 2] [d 4]\"   \n    for each (Mymultimap::value_type elem in c2)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"[a b c] == [a b c] is {0}\",   \n        c1 == c1);   \n    System::Console::WriteLine(\"[a b c] == [a b d] is {0}\",   \n        c1 == c2);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [a 1] [b 2] [c 3]  \n [a 1] [b 2] [d 4]  \n[a b c] == [a b c] is True  \n[a b c] == [a b d] is False  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [multimap (STL/CLR)](../dotnet/multimap-stl-clr.md)   \n [operator!= (multimap) (STL/CLR)](../dotnet/operator-inequality-multimap-stl-clr.md)   \n [operator\\< (multimap) (STL/CLR)](../dotnet/operator-less-than-multimap-stl-clr.md)   \n [operator>= (multimap) (STL/CLR)](../dotnet/operator-greater-or-equal-multimap-stl-clr.md)   \n [operator> (multimap) (STL/CLR)](../dotnet/operator-greater-than-multimap-stl-clr.md)   \n [operator<= (multimap) (STL/CLR)](../dotnet/operator-less-or-equal-multimap-stl-clr.md)"}