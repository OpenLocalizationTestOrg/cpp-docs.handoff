{"nodes":[{"pos":[12,76],"content":"Multithreading: Creating User-Interface Threads | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Multithreading: Creating User-Interface Threads | Microsoft Docs","pos":[0,64]}]},{"content":"Multithreading: Creating User-Interface Threads","pos":[859,906]},{"content":"A user-interface thread is commonly used to handle user input and respond to user events independently of threads executing other portions of the application.","pos":[907,1065]},{"content":"The main application thread (provided in your <ph id=\"ph1\">`CWinApp`</ph>-derived class) is already created and started for you.","pos":[1066,1176],"source":" The main application thread (provided in your `CWinApp`-derived class) is already created and started for you."},{"content":"This topic describes the steps necessary to create additional user-interface threads.","pos":[1177,1262]},{"content":"The first thing you must do when creating a user-interface thread is derive a class from <bpt id=\"p1\">[</bpt>CWinThread<ept id=\"p1\">](../mfc/reference/cwinthread-class.md)</ept>.","pos":[1269,1409],"source":"The first thing you must do when creating a user-interface thread is derive a class from [CWinThread](../mfc/reference/cwinthread-class.md)."},{"content":"You must declare and implement this class, using the <bpt id=\"p1\">[</bpt>DECLARE_DYNCREATE<ept id=\"p1\">](http://msdn.microsoft.com/library/f550e757-9dec-4875-b13f-841a982f5314)</ept> and <bpt id=\"p2\">[</bpt>IMPLEMENT_DYNCREATE<ept id=\"p2\">](http://msdn.microsoft.com/library/89ebcfa1-cc4d-49eb-a09b-8618f44f5e98)</ept> macros.","pos":[1410,1660],"source":" You must declare and implement this class, using the [DECLARE_DYNCREATE](http://msdn.microsoft.com/library/f550e757-9dec-4875-b13f-841a982f5314) and [IMPLEMENT_DYNCREATE](http://msdn.microsoft.com/library/89ebcfa1-cc4d-49eb-a09b-8618f44f5e98) macros."},{"content":"This class must override some functions and can override others.","pos":[1661,1725]},{"content":"These functions and what they should do are presented in the following table.","pos":[1726,1803]},{"content":"Functions to Override When Creating a User-Interface Thread","pos":[1813,1872]},{"content":"Function","pos":[1879,1887]},{"content":"Purpose","pos":[1888,1895]},{"content":"<bpt id=\"p1\">[</bpt>ExitInstance<ept id=\"p1\">](../mfc/reference/cwinthread-class.md#cwinthread__exitinstance)</ept>|Perform cleanup when thread terminates.","pos":[1934,2051],"source":"[ExitInstance](../mfc/reference/cwinthread-class.md#cwinthread__exitinstance)|Perform cleanup when thread terminates."},{"content":"Usually overridden.|","pos":[2052,2072]},{"content":"<bpt id=\"p1\">[</bpt>InitInstance<ept id=\"p1\">](../mfc/reference/cwinthread-class.md#cwinthread__initinstance)</ept>|Perform thread instance initialization.","pos":[2076,2193],"source":"[InitInstance](../mfc/reference/cwinthread-class.md#cwinthread__initinstance)|Perform thread instance initialization."},{"content":"Must be overridden.|","pos":[2194,2214]},{"content":"<bpt id=\"p1\">[</bpt>OnIdle<ept id=\"p1\">](../mfc/reference/cwinthread-class.md#cwinthread__onidle)</ept>|Perform thread-specific idle-time processing.","pos":[2218,2329],"source":"[OnIdle](../mfc/reference/cwinthread-class.md#cwinthread__onidle)|Perform thread-specific idle-time processing."},{"content":"Not usually overridden.|","pos":[2330,2354]},{"content":"<bpt id=\"p1\">[</bpt>PreTranslateMessage<ept id=\"p1\">](../mfc/reference/cwinthread-class.md#cwinthread__pretranslatemessage)</ept>|Filter messages before they are dispatched to <bpt id=\"p2\">**</bpt>TranslateMessage<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>DispatchMessage<ept id=\"p3\">**</ept>.","pos":[2358,2541],"source":"[PreTranslateMessage](../mfc/reference/cwinthread-class.md#cwinthread__pretranslatemessage)|Filter messages before they are dispatched to **TranslateMessage** and **DispatchMessage**."},{"content":"Not usually overridden.|","pos":[2542,2566]},{"content":"<bpt id=\"p1\">[</bpt>ProcessWndProcException<ept id=\"p1\">](../mfc/reference/cwinthread-class.md#cwinthread__processwndprocexception)</ept>|Intercept unhandled exceptions thrown by the thread's message and command handlers.","pos":[2570,2753],"source":"[ProcessWndProcException](../mfc/reference/cwinthread-class.md#cwinthread__processwndprocexception)|Intercept unhandled exceptions thrown by the thread's message and command handlers."},{"content":"Not usually overridden.|","pos":[2754,2778]},{"content":"<bpt id=\"p1\">[</bpt>Run<ept id=\"p1\">](../mfc/reference/cwinthread-class.md#cwinthread__run)</ept>|Controlling function for the thread.","pos":[2782,2878],"source":"[Run](../mfc/reference/cwinthread-class.md#cwinthread__run)|Controlling function for the thread."},{"content":"Contains the message pump.","pos":[2879,2905]},{"content":"Rarely overridden.|","pos":[2906,2925]},{"content":"MFC provides two versions of <ph id=\"ph1\">`AfxBeginThread`</ph> through parameter overloading: one that can only create worker threads and one that can create user-interface threads or worker threads.","pos":[2933,3115],"source":"MFC provides two versions of `AfxBeginThread` through parameter overloading: one that can only create worker threads and one that can create user-interface threads or worker threads."},{"content":"To start your user-interface thread, call the second overload of <bpt id=\"p1\">[</bpt>AfxBeginThread<ept id=\"p1\">](http://msdn.microsoft.com/library/e9e8684d-24f7-4599-8fdf-1f4f560a753b)</ept>, providing the following information:","pos":[3116,3307],"source":" To start your user-interface thread, call the second overload of [AfxBeginThread](http://msdn.microsoft.com/library/e9e8684d-24f7-4599-8fdf-1f4f560a753b), providing the following information:"},{"pos":[3317,3452],"content":"The <bpt id=\"p1\">[</bpt>RUNTIME_CLASS<ept id=\"p1\">](http://msdn.microsoft.com/library/98cbea2a-a210-44f3-8bc0-0bed990d7014)</ept> of the class you derived from <ph id=\"ph1\">`CWinThread`</ph>.","source":"The [RUNTIME_CLASS](http://msdn.microsoft.com/library/98cbea2a-a210-44f3-8bc0-0bed990d7014) of the class you derived from `CWinThread`."},{"content":"(Optional) The desired priority level.","pos":[3462,3500]},{"content":"The default is normal priority.","pos":[3501,3532]},{"content":"For more information about the available priority levels, see <bpt id=\"p1\">[</bpt>SetThreadPriority<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686277)</ept> in the <ph id=\"ph1\">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.","pos":[3533,3762],"source":" For more information about the available priority levels, see [SetThreadPriority](http://msdn.microsoft.com/library/windows/desktop/ms686277) in the [!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]."},{"content":"(Optional) The desired stack size for the thread.","pos":[3772,3821]},{"content":"The default is the same size stack as the creating thread.","pos":[3822,3880]},{"content":"(Optional) <bpt id=\"p1\">**</bpt>CREATE_SUSPENDED<ept id=\"p1\">**</ept> if you want the thread to be created in a suspended state.","pos":[3890,3980],"source":"(Optional) **CREATE_SUSPENDED** if you want the thread to be created in a suspended state."},{"content":"The default is 0, or start the thread normally.","pos":[3981,4028]},{"content":"(Optional) The desired security attributes.","pos":[4038,4081]},{"content":"The default is the same access as the parent thread.","pos":[4082,4134]},{"content":"For more information about the format of this security information, see <bpt id=\"p1\">[</bpt>SECURITY_ATTRIBUTES<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa379560)</ept> in the <ph id=\"ph1\">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.","pos":[4135,4376],"source":" For more information about the format of this security information, see [SECURITY_ATTRIBUTES](http://msdn.microsoft.com/library/windows/desktop/aa379560) in the [!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]."},{"content":"does most of the work for you.","pos":[4400,4430]},{"content":"It creates a new object of your class, initializes it with the information you supply, and calls <bpt id=\"p1\">[</bpt>CWinThread::CreateThread<ept id=\"p1\">](../mfc/reference/cwinthread-class.md#cwinthread__createthread)</ept> to start executing the thread.","pos":[4431,4648],"source":" It creates a new object of your class, initializes it with the information you supply, and calls [CWinThread::CreateThread](../mfc/reference/cwinthread-class.md#cwinthread__createthread) to start executing the thread."},{"content":"Checks are made throughout the procedure to make sure all objects are deallocated properly should any part of the creation fail.","pos":[4649,4777]},{"content":"What do you want to know more about?","pos":[4786,4822]},{"content":"Multithreading: Terminating Threads","pos":[4833,4868]},{"content":"Multithreading: Creating Worker Threads","pos":[4931,4970]},{"content":"Processes and Threads","pos":[5037,5058]},{"content":"See Also","pos":[5128,5136]},{"content":"Multithreading with C++ and MFC","pos":[5141,5172]}],"content":"---\ntitle: \"Multithreading: Creating User-Interface Threads | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"CREATE_SUSPENDED\"\n  - \"SECURITY_ATTRIBUTES\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"multithreading [C++], user interface threads\"\n  - \"threading [C++], creating threads\"\n  - \"threading [C++], user interface threads\"\n  - \"user interface threads [C++]\"\n  - \"threading [MFC], user interface threads\"\nms.assetid: 446925c1-db59-46ea-ae5b-d5ae5d5b91d8\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Multithreading: Creating User-Interface Threads\nA user-interface thread is commonly used to handle user input and respond to user events independently of threads executing other portions of the application. The main application thread (provided in your `CWinApp`-derived class) is already created and started for you. This topic describes the steps necessary to create additional user-interface threads.  \n  \n The first thing you must do when creating a user-interface thread is derive a class from [CWinThread](../mfc/reference/cwinthread-class.md). You must declare and implement this class, using the [DECLARE_DYNCREATE](http://msdn.microsoft.com/library/f550e757-9dec-4875-b13f-841a982f5314) and [IMPLEMENT_DYNCREATE](http://msdn.microsoft.com/library/89ebcfa1-cc4d-49eb-a09b-8618f44f5e98) macros. This class must override some functions and can override others. These functions and what they should do are presented in the following table.  \n  \n### Functions to Override When Creating a User-Interface Thread  \n  \n|Function|Purpose|  \n|--------------|-------------|  \n\n|[ExitInstance](../mfc/reference/cwinthread-class.md#cwinthread__exitinstance)|Perform cleanup when thread terminates. Usually overridden.|  \n|[InitInstance](../mfc/reference/cwinthread-class.md#cwinthread__initinstance)|Perform thread instance initialization. Must be overridden.|  \n|[OnIdle](../mfc/reference/cwinthread-class.md#cwinthread__onidle)|Perform thread-specific idle-time processing. Not usually overridden.|  \n|[PreTranslateMessage](../mfc/reference/cwinthread-class.md#cwinthread__pretranslatemessage)|Filter messages before they are dispatched to **TranslateMessage** and **DispatchMessage**. Not usually overridden.|  \n|[ProcessWndProcException](../mfc/reference/cwinthread-class.md#cwinthread__processwndprocexception)|Intercept unhandled exceptions thrown by the thread's message and command handlers. Not usually overridden.|  \n|[Run](../mfc/reference/cwinthread-class.md#cwinthread__run)|Controlling function for the thread. Contains the message pump. Rarely overridden.|  \n\n  \n MFC provides two versions of `AfxBeginThread` through parameter overloading: one that can only create worker threads and one that can create user-interface threads or worker threads. To start your user-interface thread, call the second overload of [AfxBeginThread](http://msdn.microsoft.com/library/e9e8684d-24f7-4599-8fdf-1f4f560a753b), providing the following information:  \n  \n-   The [RUNTIME_CLASS](http://msdn.microsoft.com/library/98cbea2a-a210-44f3-8bc0-0bed990d7014) of the class you derived from `CWinThread`.  \n  \n-   (Optional) The desired priority level. The default is normal priority. For more information about the available priority levels, see [SetThreadPriority](http://msdn.microsoft.com/library/windows/desktop/ms686277) in the [!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)].  \n  \n-   (Optional) The desired stack size for the thread. The default is the same size stack as the creating thread.  \n  \n-   (Optional) **CREATE_SUSPENDED** if you want the thread to be created in a suspended state. The default is 0, or start the thread normally.  \n  \n-   (Optional) The desired security attributes. The default is the same access as the parent thread. For more information about the format of this security information, see [SECURITY_ATTRIBUTES](http://msdn.microsoft.com/library/windows/desktop/aa379560) in the [!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)].  \n  \n `AfxBeginThread` does most of the work for you. It creates a new object of your class, initializes it with the information you supply, and calls [CWinThread::CreateThread](../mfc/reference/cwinthread-class.md#cwinthread__createthread) to start executing the thread. Checks are made throughout the procedure to make sure all objects are deallocated properly should any part of the creation fail.  \n  \n## What do you want to know more about?  \n  \n-   [Multithreading: Terminating Threads](../parallel/multithreading-terminating-threads.md)  \n  \n-   [Multithreading: Creating Worker Threads](../parallel/multithreading-creating-worker-threads.md)  \n  \n-   [Processes and Threads](http://msdn.microsoft.com/library/windows/desktop/ms684841)  \n  \n## See Also  \n [Multithreading with C++ and MFC](../parallel/multithreading-with-cpp-and-mfc.md)"}