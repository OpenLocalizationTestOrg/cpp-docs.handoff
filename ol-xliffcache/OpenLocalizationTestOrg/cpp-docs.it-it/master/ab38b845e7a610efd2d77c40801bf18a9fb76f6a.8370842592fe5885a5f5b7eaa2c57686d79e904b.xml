{"nodes":[{"pos":[12,57],"content":"&lt;filesystem&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>filesystem<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,45],"source":"&lt;filesystem&gt; operators | Microsoft Docs"}]},{"pos":[1509,1537],"content":"&lt;filesystem&gt; operators","linkify":"&lt;filesystem&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>filesystem<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,28],"source":"&lt;filesystem&gt; operators"}]},{"content":"The operators perform a lexical comparison of two paths as strings.","pos":[1538,1605]},{"content":"Use the <bpt id=\"p1\">**</bpt>equivalent<ept id=\"p1\">**</ept> function to determine whether two paths (for example a relative path and an absolute path) refer to the same file or directory on disk.","pos":[1606,1764],"source":" Use the **equivalent** function to determine whether two paths (for example a relative path and an absolute path) refer to the same file or directory on disk."},{"pos":[1866,1970],"content":"For more information, see <bpt id=\"p1\">[</bpt>File System Navigation (C++)<ept id=\"p1\">](../standard-library/file-system-navigation.md)</ept>.","source":"For more information, see [File System Navigation (C++)](../standard-library/file-system-navigation.md)."},{"pos":[1979,1989],"content":"operator==","linkify":"operator==","nodes":[{"content":"operator==","pos":[0,10]}]},{"content":"The function returns left.native() == right.native().","pos":[2076,2129]},{"pos":[2138,2148],"content":"operator!=","linkify":"operator!=","nodes":[{"content":"operator!=","pos":[0,10]}]},{"content":"The function returns !(left == right).","pos":[2235,2273]},{"pos":[2282,2291],"content":"operator<","linkify":"operator<","nodes":[{"content":"operator&lt;","pos":[0,9],"source":"operator<"}]},{"content":"The function returns left.native() &lt; right.native().","pos":[2377,2429],"source":"The function returns left.native() < right.native()."},{"pos":[2438,2448],"content":"operator<=","linkify":"operator<=","nodes":[{"content":"operator&lt;=","pos":[0,10],"source":"operator<="}]},{"content":"The function returns !(right <ph id=\"ph1\">\\&lt;</ph> left).","pos":[2535,2573],"source":"The function returns !(right \\< left)."},{"pos":[2582,2591],"content":"operator>","linkify":"operator>","nodes":[{"content":"operator&gt;","pos":[0,9],"source":"operator>"}]},{"content":"The function returns right <ph id=\"ph1\">\\&lt;</ph> left.","pos":[2677,2712],"source":"The function returns right \\< left."},{"pos":[2721,2731],"content":"operator>=","linkify":"operator>=","nodes":[{"content":"operator&gt;=","pos":[0,10],"source":"operator>="}]},{"content":"The function returns !(left &lt; right).","pos":[2818,2855],"source":"The function returns !(left < right)."},{"pos":[2864,2873],"content":"operator/","linkify":"operator/","nodes":[{"content":"operator/","pos":[0,9]}]},{"content":"The function executes:","pos":[2948,2970]},{"pos":[3070,3080],"content":"operator<<","linkify":"operator<<","nodes":[{"content":"operator&lt;&lt;","pos":[0,10],"source":"operator<<"}]},{"content":"The function returns os &lt;&lt; pval.string<ph id=\"ph1\">\\&lt;</ph>Elem, Traits&gt;().","pos":[3232,3288],"source":"The function returns os << pval.string\\<Elem, Traits>()."},{"pos":[3297,3307],"content":"operator>>","linkify":"operator>>","nodes":[{"content":"operator&gt;&gt;","pos":[0,10],"source":"operator>>"}]},{"content":"The function executes:","pos":[3459,3481]},{"pos":[3578,3586],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>path Class (C++ Standard Template Library)<ept id=\"p1\">](../standard-library/path-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[3590,3670],"source":"[path Class (C++ Standard Template Library)](../standard-library/path-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>File System Navigation (C++)<ept id=\"p1\">](../standard-library/file-system-navigation.md)</ept><ph id=\"ph1\"> </ph>","pos":[3673,3752],"source":" [File System Navigation (C++)](../standard-library/file-system-navigation.md) "},{"content":"<bpt id=\"p1\"> [</bpt><ph id=\"ph1\">\\&lt;</ph>filesystem&gt;<ept id=\"p1\">](../standard-library/filesystem.md)</ept>","pos":[3755,3806],"source":" [\\<filesystem>](../standard-library/filesystem.md)"}],"content":"---\ntitle: \"&lt;filesystem&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"FILESYSTEM/std::experimental::filesystem::operator==\"\n  - \"std::experimental::filesystem::operator==\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator!=\"\n  - \"std::experimental::filesystem::operator!=\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator<\"\n  - \"std::experimental::filesystem::operator<\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator<=\"\n  - \"std::experimental::filesystem::operator<=\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator>\"\n  - \"std::experimental::filesystem::operator>\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator>=\"\n  - \"std::experimental::filesystem::operator>=\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator/\"\n  - \"std::experimental::filesystem::operator/\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator<<\"\n  - \"std::experimental::filesystem::operator<<\"\n  - \"FILESYSTEM/std::experimental::filesystem::operator>>\"\n  - \"std::experimental::filesystem::operator>>\"\ndev_langs: \n  - \"C++\"\nms.assetid: 102c4833-aa3b-41a8-8998-f5003c546bfd\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;filesystem&gt; operators\nThe operators perform a lexical comparison of two paths as strings. Use the **equivalent** function to determine whether two paths (for example a relative path and an absolute path) refer to the same file or directory on disk.  \n  \n```  \nC:\\root> D:\\root: false  \nC:\\root> C:\\root\\sub: false  \nC:\\root> C:\\roo: true  \n```  \n  \n For more information, see [File System Navigation (C++)](../standard-library/file-system-navigation.md).  \n  \n## operator==  \n  \n```  \nbool operator==(const path& left, const path& right) noexcept;  \n```  \n  \n The function returns left.native() == right.native().  \n  \n## operator!=  \n  \n```  \nbool operator!=(const path& left, const path& right) noexcept;  \n```  \n  \n The function returns !(left == right).  \n  \n## operator<  \n  \n```  \nbool operator<(const path& left, const path& right) noexcept;  \n```  \n  \n The function returns left.native() < right.native().  \n  \n## operator<=  \n  \n```  \nbool operator<=(const path& left, const path& right) noexcept;  \n```  \n  \n The function returns !(right \\< left).  \n  \n## operator>  \n  \n```  \nbool operator>(const path& left, const path& right) noexcept;  \n```  \n  \n The function returns right \\< left.  \n  \n## operator>=  \n  \n```  \nbool operator>=(const path& left, const path& right) noexcept;  \n```  \n  \n The function returns !(left < right).  \n  \n## operator/  \n  \n```  \npath operator/(const path& left, const path& right);\n```  \n  \n The function executes:  \n  \n```  \nbasic_string<Elem, Traits> str;  \npath ans = left;  \nreturn (ans /= right);\n```  \n  \n## operator<<  \n  \n```  \ntemplate <class Elem, class Traits>  \nbasic_ostream<Elem, Traits>& operator<<(basic_ostream<Elem, Traits>& os, const path& pval);\n```  \n  \n The function returns os << pval.string\\<Elem, Traits>().  \n  \n## operator>>  \n  \n```  \ntemplate <class Elem, class Traits>  \nbasic_istream<Elem, Traits>& operator<<(basic_istream<Elem, Traits>& is, const path& pval);\n```  \n  \n The function executes:  \n  \n```  \nbasic_string<Elem, Traits> str;  \nis>> str;  \npval = str;  \nreturn (is);\n```  \n  \n## See Also  \n [path Class (C++ Standard Template Library)](../standard-library/path-class.md)   \n [File System Navigation (C++)](../standard-library/file-system-navigation.md)   \n [\\<filesystem>](../standard-library/filesystem.md)\n\n"}