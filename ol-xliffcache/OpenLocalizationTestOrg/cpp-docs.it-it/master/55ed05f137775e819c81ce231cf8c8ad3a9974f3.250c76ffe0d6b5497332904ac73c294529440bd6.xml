{"nodes":[{"pos":[12,54],"content":"IUMSThreadProxy Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IUMSThreadProxy Structure | Microsoft Docs","pos":[0,42]}]},{"content":"IUMSThreadProxy Structure","pos":[647,672]},{"content":"An abstraction for a thread of execution.","pos":[673,714]},{"content":"If you want your scheduler to be granted user-mode schedulable (UMS) threads, set the value for the scheduler policy element <ph id=\"ph1\">`SchedulerKind`</ph> to <ph id=\"ph2\">`UmsThreadDefault`</ph>, and implement the <ph id=\"ph3\">`IUMSScheduler`</ph> interface.","pos":[715,923],"source":" If you want your scheduler to be granted user-mode schedulable (UMS) threads, set the value for the scheduler policy element `SchedulerKind` to `UmsThreadDefault`, and implement the `IUMSScheduler` interface."},{"content":"UMS threads are only supported on 64-bit operating systems with version Windows 7 and higher.","pos":[924,1017]},{"content":"Syntax","pos":[1026,1032]},{"content":"Members","pos":[1100,1107]},{"content":"Public Methods","pos":[1117,1131]},{"content":"Name","pos":[1138,1142]},{"content":"Description","pos":[1143,1154]},{"content":"IUMSThreadProxy::EnterCriticalRegion Method","pos":[1193,1236]},{"content":"Called in order to enter a critical region.","pos":[1260,1303]},{"content":"When inside a critical region, the scheduler will not observe asynchronous blocking operations that happen during the region.","pos":[1304,1429]},{"content":"This means that the scheduler will not be reentered for page faults, thread suspensions, kernel asynchronous procedure calls (APCs), and so forth, for a UMS thread.","pos":[1430,1594]},{"content":"IUMSThreadProxy::EnterHyperCriticalRegion Method","pos":[1600,1648]},{"content":"Called in order to enter a hyper-critical region.","pos":[1677,1726]},{"content":"When inside a hyper-critical region, the scheduler will not observe any blocking operations that happen during the region.","pos":[1727,1849]},{"content":"This means the scheduler will not be reentered for blocking function calls, lock acquisition attempts which block, page faults, thread suspensions, kernel asynchronous procedure calls (APCs), and so forth, for a UMS thread.","pos":[1850,2073]},{"content":"IUMSThreadProxy::ExitCriticalRegion Method","pos":[2079,2121]},{"content":"Called in order to exit a critical region.","pos":[2144,2186]},{"content":"IUMSThreadProxy::ExitHyperCriticalRegion Method","pos":[2192,2239]},{"content":"Called in order to exit a hyper-critical region.","pos":[2267,2315]},{"content":"IUMSThreadProxy::GetCriticalRegionType Method","pos":[2321,2366]},{"content":"Returns what kind of critical region the thread proxy is within.","pos":[2392,2456]},{"content":"Because hyper-critical regions are a superset of critical regions, if code has entered a critical region and then a hyper-critical region, <ph id=\"ph1\">`InsideHyperCriticalRegion`</ph> will be returned.","pos":[2457,2641],"source":" Because hyper-critical regions are a superset of critical regions, if code has entered a critical region and then a hyper-critical region, `InsideHyperCriticalRegion` will be returned."},{"content":"Inheritance Hierarchy","pos":[2651,2672]},{"content":"IThreadProxy","pos":[2677,2689]},{"content":"Requirements","pos":[2750,2762]},{"pos":[2766,2788],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> concrtrm.h","source":"**Header:** concrtrm.h"},{"pos":[2795,2821],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2867,2910],"content":"IUMSThreadProxy::EnterCriticalRegion Method"},{"content":"Called in order to enter a critical region.","pos":[2914,2957]},{"content":"When inside a critical region, the scheduler will not observe asynchronous blocking operations that happen during the region.","pos":[2958,3083]},{"content":"This means that the scheduler will not be reentered for page faults, thread suspensions, kernel asynchronous procedure calls (APCs), and so forth, for a UMS thread.","pos":[3084,3248]},{"content":"Return Value","pos":[3310,3322]},{"content":"The new depth of critical region.","pos":[3326,3359]},{"content":"Critical regions are reentrant.","pos":[3360,3391]},{"pos":[3442,3490],"content":"IUMSThreadProxy::EnterHyperCriticalRegion Method"},{"content":"Called in order to enter a hyper-critical region.","pos":[3494,3543]},{"content":"When inside a hyper-critical region, the scheduler will not observe any blocking operations that happen during the region.","pos":[3544,3666]},{"content":"This means the scheduler will not be reentered for blocking function calls, lock acquisition attempts which block, page faults, thread suspensions, kernel asynchronous procedure calls (APCs), and so forth, for a UMS thread.","pos":[3667,3890]},{"content":"Return Value","pos":[3957,3969]},{"content":"The new depth of hyper-critical region.","pos":[3973,4012]},{"content":"Hyper-critical regions are reentrant.","pos":[4013,4050]},{"content":"Remarks","pos":[4060,4067]},{"content":"The scheduler must be extraordinarily careful about what methods it calls and what locks it acquires in such regions.","pos":[4071,4188]},{"content":"If code in such a region blocks on a lock that is held by something the scheduler is responsible for scheduling, deadlock may ensue.","pos":[4189,4321]},{"pos":[4366,4408],"content":"IUMSThreadProxy::ExitCriticalRegion Method"},{"content":"Called in order to exit a critical region.","pos":[4412,4454]},{"content":"Return Value","pos":[4515,4527]},{"content":"The new depth of critical region.","pos":[4531,4564]},{"content":"Critical regions are reentrant.","pos":[4565,4596]},{"pos":[4646,4693],"content":"IUMSThreadProxy::ExitHyperCriticalRegion Method"},{"content":"Called in order to exit a hyper-critical region.","pos":[4697,4745]},{"content":"Return Value","pos":[4811,4823]},{"content":"The new depth of hyper-critical region.","pos":[4827,4866]},{"content":"Hyper-critical regions are reentrant.","pos":[4867,4904]},{"pos":[4952,4997],"content":"IUMSThreadProxy::GetCriticalRegionType Method"},{"content":"Returns what kind of critical region the thread proxy is within.","pos":[5001,5065]},{"content":"Because hyper-critical regions are a superset of critical regions, if code has entered a critical region and then a hyper-critical region, <ph id=\"ph1\">`InsideHyperCriticalRegion`</ph> will be returned.","pos":[5066,5250],"source":" Because hyper-critical regions are a superset of critical regions, if code has entered a critical region and then a hyper-critical region, `InsideHyperCriticalRegion` will be returned."},{"content":"Return Value","pos":[5335,5347]},{"content":"The type of critical region the thread proxy is within.","pos":[5351,5406]},{"content":"See Also","pos":[5415,5423]},{"content":"concurrency Namespace","pos":[5428,5449]},{"content":"IUMSScheduler Structure","pos":[5482,5505]}],"content":"---\ntitle: \"IUMSThreadProxy Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"concrtrm/concurrency::IUMSThreadProxy\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"IUMSThreadProxy structure\"\nms.assetid: 61c69b7e-5c37-4048-bcb4-e75c536afd86\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IUMSThreadProxy Structure\nAn abstraction for a thread of execution. If you want your scheduler to be granted user-mode schedulable (UMS) threads, set the value for the scheduler policy element `SchedulerKind` to `UmsThreadDefault`, and implement the `IUMSScheduler` interface. UMS threads are only supported on 64-bit operating systems with version Windows 7 and higher.  \n  \n## Syntax  \n  \n```\nstruct IUMSThreadProxy : public IThreadProxy;\n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[IUMSThreadProxy::EnterCriticalRegion Method](#entercriticalregion)|Called in order to enter a critical region. When inside a critical region, the scheduler will not observe asynchronous blocking operations that happen during the region. This means that the scheduler will not be reentered for page faults, thread suspensions, kernel asynchronous procedure calls (APCs), and so forth, for a UMS thread.|  \n|[IUMSThreadProxy::EnterHyperCriticalRegion Method](#enterhypercriticalregion)|Called in order to enter a hyper-critical region. When inside a hyper-critical region, the scheduler will not observe any blocking operations that happen during the region. This means the scheduler will not be reentered for blocking function calls, lock acquisition attempts which block, page faults, thread suspensions, kernel asynchronous procedure calls (APCs), and so forth, for a UMS thread.|  \n|[IUMSThreadProxy::ExitCriticalRegion Method](#exitcriticalregion)|Called in order to exit a critical region.|  \n|[IUMSThreadProxy::ExitHyperCriticalRegion Method](#exithypercriticalregion)|Called in order to exit a hyper-critical region.|  \n|[IUMSThreadProxy::GetCriticalRegionType Method](#getcriticalregiontype)|Returns what kind of critical region the thread proxy is within. Because hyper-critical regions are a superset of critical regions, if code has entered a critical region and then a hyper-critical region, `InsideHyperCriticalRegion` will be returned.|  \n  \n## Inheritance Hierarchy  \n [IThreadProxy](ithreadproxy-structure.md)  \n  \n `IUMSThreadProxy`  \n  \n## Requirements  \n **Header:** concrtrm.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"entercriticalregion\"></a>  IUMSThreadProxy::EnterCriticalRegion Method  \n Called in order to enter a critical region. When inside a critical region, the scheduler will not observe asynchronous blocking operations that happen during the region. This means that the scheduler will not be reentered for page faults, thread suspensions, kernel asynchronous procedure calls (APCs), and so forth, for a UMS thread.  \n  \n```\nvirtual int EnterCriticalRegion() = 0;\n```  \n  \n### Return Value  \n The new depth of critical region. Critical regions are reentrant.  \n  \n##  <a name=\"enterhypercriticalregion\"></a>  IUMSThreadProxy::EnterHyperCriticalRegion Method  \n Called in order to enter a hyper-critical region. When inside a hyper-critical region, the scheduler will not observe any blocking operations that happen during the region. This means the scheduler will not be reentered for blocking function calls, lock acquisition attempts which block, page faults, thread suspensions, kernel asynchronous procedure calls (APCs), and so forth, for a UMS thread.  \n  \n```\nvirtual int EnterHyperCriticalRegion() = 0;\n```  \n  \n### Return Value  \n The new depth of hyper-critical region. Hyper-critical regions are reentrant.  \n  \n### Remarks  \n The scheduler must be extraordinarily careful about what methods it calls and what locks it acquires in such regions. If code in such a region blocks on a lock that is held by something the scheduler is responsible for scheduling, deadlock may ensue.  \n  \n##  <a name=\"exitcriticalregion\"></a>  IUMSThreadProxy::ExitCriticalRegion Method  \n Called in order to exit a critical region.  \n  \n```\nvirtual int ExitCriticalRegion() = 0;\n```  \n  \n### Return Value  \n The new depth of critical region. Critical regions are reentrant.  \n  \n##  <a name=\"exithypercriticalregion\"></a>  IUMSThreadProxy::ExitHyperCriticalRegion Method  \n Called in order to exit a hyper-critical region.  \n  \n```\nvirtual int ExitHyperCriticalRegion() = 0;\n```  \n  \n### Return Value  \n The new depth of hyper-critical region. Hyper-critical regions are reentrant.  \n  \n##  <a name=\"getcriticalregiontype\"></a>  IUMSThreadProxy::GetCriticalRegionType Method  \n Returns what kind of critical region the thread proxy is within. Because hyper-critical regions are a superset of critical regions, if code has entered a critical region and then a hyper-critical region, `InsideHyperCriticalRegion` will be returned.  \n  \n```\nvirtual CriticalRegionType GetCriticalRegionType() const = 0;\n```  \n  \n### Return Value  \n The type of critical region the thread proxy is within.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [IUMSScheduler Structure](iumsscheduler-structure.md)\n"}