{"nodes":[{"pos":[12,41],"content":"CImage Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CImage Class | Microsoft Docs","pos":[0,29]}]},{"pos":[869,881],"content":"CImage Class","linkify":"CImage Class","nodes":[{"content":"CImage Class","pos":[0,12]}]},{"pos":[882,1034],"content":"<ph id=\"ph1\">`CImage`</ph> provides enhanced bitmap support, including the ability to load and save images in JPEG, GIF, BMP, and Portable Network Graphics (PNG) formats.","source":"`CImage` provides enhanced bitmap support, including the ability to load and save images in JPEG, GIF, BMP, and Portable Network Graphics (PNG) formats."},{"pos":[1042,1152],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"pos":[1161,1167],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1202,1209],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1219,1238],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1245,1249]},{"content":"Description","pos":[1250,1261]},{"pos":[1299,1332],"content":"<bpt id=\"p1\">[</bpt>CImage::CImage<ept id=\"p1\">](#cimage__cimage)</ept>","source":"[CImage::CImage](#cimage__cimage)"},{"content":"The constructor.","pos":[1333,1349]},{"pos":[1360,1374],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1381,1385]},{"content":"Description","pos":[1386,1397]},{"pos":[1435,1476],"content":"<bpt id=\"p1\">[</bpt>CImage::AlphaBlend<ept id=\"p1\">](#cimage__alphablend)</ept>","source":"[CImage::AlphaBlend](#cimage__alphablend)"},{"content":"Displays bitmaps that have transparent or semitransparent pixels.","pos":[1477,1542]},{"pos":[1547,1580],"content":"<bpt id=\"p1\">[</bpt>CImage::Attach<ept id=\"p1\">](#cimage__attach)</ept>","source":"[CImage::Attach](#cimage__attach)"},{"content":"Attaches an <ph id=\"ph1\">`HBITMAP`</ph> to a <ph id=\"ph2\">`CImage`</ph> object.","pos":[1581,1624],"source":"Attaches an `HBITMAP` to a `CImage` object."},{"content":"Can be used with either non-DIB section bitmaps or DIB section bitmaps.","pos":[1625,1696]},{"pos":[1701,1734],"content":"<bpt id=\"p1\">[</bpt>CImage::BitBlt<ept id=\"p1\">](#cimage__bitblt)</ept>","source":"[CImage::BitBlt](#cimage__bitblt)"},{"content":"Copies a bitmap from the source device context to this current device context.","pos":[1735,1813]},{"pos":[1818,1851],"content":"<bpt id=\"p1\">[</bpt>CImage::Create<ept id=\"p1\">](#cimage__create)</ept>","source":"[CImage::Create](#cimage__create)"},{"pos":[1852,1943],"content":"Creates a DIB section bitmap and attaches it to the previously constructed <ph id=\"ph1\">`CImage`</ph> object.","source":"Creates a DIB section bitmap and attaches it to the previously constructed `CImage` object."},{"pos":[1948,1985],"content":"<bpt id=\"p1\">[</bpt>CImage::CreateEx<ept id=\"p1\">](#cimage__createex)</ept>","source":"[CImage::CreateEx](#cimage__createex)"},{"pos":[1986,2106],"content":"Creates a DIB section bitmap (with additional parameters) and attaches it to the previously constructed <ph id=\"ph1\">`CImage`</ph> object.","source":"Creates a DIB section bitmap (with additional parameters) and attaches it to the previously constructed `CImage` object."},{"pos":[2111,2146],"content":"<bpt id=\"p1\">[</bpt>CImage::Destroy<ept id=\"p1\">](#cimage__destroy)</ept>","source":"[CImage::Destroy](#cimage__destroy)"},{"pos":[2147,2216],"content":"Detaches the bitmap from the <ph id=\"ph1\">`CImage`</ph> object and destroys the bitmap.","source":"Detaches the bitmap from the `CImage` object and destroys the bitmap."},{"pos":[2221,2254],"content":"<bpt id=\"p1\">[</bpt>CImage::Detach<ept id=\"p1\">](#cimage__detach)</ept>","source":"[CImage::Detach](#cimage__detach)"},{"pos":[2255,2298],"content":"Detaches the bitmap from a <ph id=\"ph1\">`CImage`</ph> object.","source":"Detaches the bitmap from a `CImage` object."},{"pos":[2303,2332],"content":"<bpt id=\"p1\">[</bpt>CImage::Draw<ept id=\"p1\">](#cimage__draw)</ept>","source":"[CImage::Draw](#cimage__draw)"},{"content":"Copies a bitmap from a source rectangle into a destination rectangle.","pos":[2333,2402]},{"content":"<bpt id=\"p1\">**</bpt>Draw<ept id=\"p1\">**</ept> stretches or compresses the bitmap to fit the dimensions of the destination rectangle, if necessary, and handles alpha blending and transparent colors.","pos":[2403,2563],"source":"**Draw** stretches or compresses the bitmap to fit the dimensions of the destination rectangle, if necessary, and handles alpha blending and transparent colors."},{"pos":[2568,2603],"content":"<bpt id=\"p1\">[</bpt>CImage::GetBits<ept id=\"p1\">](#cimage__getbits)</ept>","source":"[CImage::GetBits](#cimage__getbits)"},{"content":"Retrieves a pointer to the actual pixel values of the bitmap.","pos":[2604,2665]},{"pos":[2670,2703],"content":"<bpt id=\"p1\">[</bpt>CImage::GetBPP<ept id=\"p1\">](#cimage__getbpp)</ept>","source":"[CImage::GetBPP](#cimage__getbpp)"},{"content":"Retrieves the bits per pixel.","pos":[2704,2733]},{"pos":[2738,2785],"content":"<bpt id=\"p1\">[</bpt>CImage::GetColorTable<ept id=\"p1\">](#cimage__getcolortable)</ept>","source":"[CImage::GetColorTable](#cimage__getcolortable)"},{"content":"Retrieves red, green, blue (RGB) color values from a range of entries in the color table.","pos":[2786,2875]},{"pos":[2880,2911],"content":"<bpt id=\"p1\">[</bpt>CImage::GetDC<ept id=\"p1\">](#cimage__getdc)</ept>","source":"[CImage::GetDC](#cimage__getdc)"},{"content":"Retrieves the device context into which the current bitmap is selected.","pos":[2912,2983]},{"pos":[2988,3055],"content":"<bpt id=\"p1\">[</bpt>CImage::GetExporterFilterString<ept id=\"p1\">](#cimage__getexporterfilterstring)</ept>","source":"[CImage::GetExporterFilterString](#cimage__getexporterfilterstring)"},{"content":"Finds the available image formats and their descriptions.","pos":[3056,3113]},{"pos":[3118,3157],"content":"<bpt id=\"p1\">[</bpt>CImage::GetHeight<ept id=\"p1\">](#cimage__getheight)</ept>","source":"[CImage::GetHeight](#cimage__getheight)"},{"content":"Retrieves the height of the current image in pixels.","pos":[3158,3210]},{"pos":[3215,3282],"content":"<bpt id=\"p1\">[</bpt>CImage::GetImporterFilterString<ept id=\"p1\">](#cimage__getimporterfilterstring)</ept>","source":"[CImage::GetImporterFilterString](#cimage__getimporterfilterstring)"},{"content":"Finds the available image formats and their descriptions.","pos":[3283,3340]},{"pos":[3345,3412],"content":"<bpt id=\"p1\">[</bpt>CImage::GetMaxColorTableEntries<ept id=\"p1\">](#cimage__getmaxcolortableentries)</ept>","source":"[CImage::GetMaxColorTableEntries](#cimage__getmaxcolortableentries)"},{"content":"Retrieves the maximum number of entries in the color table.","pos":[3413,3472]},{"pos":[3477,3514],"content":"<bpt id=\"p1\">[</bpt>CImage::GetPitch<ept id=\"p1\">](#cimage__getpitch)</ept>","source":"[CImage::GetPitch](#cimage__getpitch)"},{"content":"Retrieves the pitch of the current image, in bytes.","pos":[3515,3566]},{"pos":[3571,3608],"content":"<bpt id=\"p1\">[</bpt>CImage::GetPixel<ept id=\"p1\">](#cimage__getpixel)</ept>","source":"[CImage::GetPixel](#cimage__getpixel)"},{"pos":[3609,3667],"content":"Retrieves the color of the pixel specified by <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept>.","source":"Retrieves the color of the pixel specified by *x* and *y*."},{"pos":[3672,3723],"content":"<bpt id=\"p1\">[</bpt>CImage::GetPixelAddress<ept id=\"p1\">](#cimage__getpixeladdress)</ept>","source":"[CImage::GetPixelAddress](#cimage__getpixeladdress)"},{"content":"Retrieves the address of a given pixel.","pos":[3724,3763]},{"pos":[3768,3827],"content":"<bpt id=\"p1\">[</bpt>CImage::GetTransparentColor<ept id=\"p1\">](#cimage__gettransparentcolor)</ept>","source":"[CImage::GetTransparentColor](#cimage__gettransparentcolor)"},{"content":"Retrieves the position of the transparent color in the color table.","pos":[3828,3895]},{"pos":[3900,3937],"content":"<bpt id=\"p1\">[</bpt>CImage::GetWidth<ept id=\"p1\">](#cimage__getwidth)</ept>","source":"[CImage::GetWidth](#cimage__getwidth)"},{"content":"Retrieves the width of the current image in pixels.","pos":[3938,3989]},{"pos":[3994,4039],"content":"<bpt id=\"p1\">[</bpt>CImage::IsDIBSection<ept id=\"p1\">](#cimage__isdibsection)</ept>","source":"[CImage::IsDIBSection](#cimage__isdibsection)"},{"content":"Determines if the attached bitmap is a DIB section.","pos":[4040,4091]},{"pos":[4096,4135],"content":"<bpt id=\"p1\">[</bpt>CImage::IsIndexed<ept id=\"p1\">](#cimage__isindexed)</ept>","source":"[CImage::IsIndexed](#cimage__isindexed)"},{"content":"Indicates that a bitmap's colors are mapped to an indexed palette.","pos":[4136,4202]},{"pos":[4207,4240],"content":"<bpt id=\"p1\">[</bpt>CImage::IsNull<ept id=\"p1\">](#cimage__isnull)</ept>","source":"[CImage::IsNull](#cimage__isnull)"},{"content":"Indicates if a source bitmap is currently loaded.","pos":[4241,4290]},{"pos":[4295,4362],"content":"<bpt id=\"p1\">[</bpt>CImage::IsTransparencySupported<ept id=\"p1\">](#cimage__istransparencysupported)</ept>","source":"[CImage::IsTransparencySupported](#cimage__istransparencysupported)"},{"content":"Indicates whether the application supports transparent bitmaps and was compiled for Windows 2000 or later.","pos":[4363,4469]},{"pos":[4474,4503],"content":"<bpt id=\"p1\">[</bpt>CImage::Load<ept id=\"p1\">](#cimage__load)</ept>","source":"[CImage::Load](#cimage__load)"},{"content":"Loads an image from the specified file.","pos":[4504,4543]},{"pos":[4548,4601],"content":"<bpt id=\"p1\">[</bpt>CImage::LoadFromResource<ept id=\"p1\">](#cimage__loadfromresource)</ept>","source":"[CImage::LoadFromResource](#cimage__loadfromresource)"},{"content":"Loads an image from the specified resource.","pos":[4602,4645]},{"pos":[4650,4685],"content":"<bpt id=\"p1\">[</bpt>CImage::MaskBlt<ept id=\"p1\">](#cimage__maskblt)</ept>","source":"[CImage::MaskBlt](#cimage__maskblt)"},{"content":"Combines the color data for the source and destination bitmaps using the specified mask and raster operation.","pos":[4686,4795]},{"pos":[4800,4833],"content":"<bpt id=\"p1\">[</bpt>CImage::PlgBlt<ept id=\"p1\">](#cimage__plgblt)</ept>","source":"[CImage::PlgBlt](#cimage__plgblt)"},{"content":"Performs a bit-block transfer from a rectangle in a source device context into a parallelogram in a destination device context.","pos":[4834,4961]},{"pos":[4966,5005],"content":"<bpt id=\"p1\">[</bpt>CImage::ReleaseDC<ept id=\"p1\">](#cimage__releasedc)</ept>","source":"[CImage::ReleaseDC](#cimage__releasedc)"},{"pos":[5006,5090],"content":"Releases the device context that was retrieved with <bpt id=\"p1\">[</bpt>CImage::GetDC<ept id=\"p1\">](#cimage__getdc)</ept>.","source":"Releases the device context that was retrieved with [CImage::GetDC](#cimage__getdc)."},{"pos":[5095,5144],"content":"<bpt id=\"p1\">[</bpt>CImage::ReleaseGDIPlus<ept id=\"p1\">](#cimage__releasegdiplus)</ept>","source":"[CImage::ReleaseGDIPlus](#cimage__releasegdiplus)"},{"content":"Releases resources used by GDI+.","pos":[5145,5177]},{"content":"Must be called to free resources created by a global <ph id=\"ph1\">`CImage`</ph> object.","pos":[5178,5247],"source":" Must be called to free resources created by a global `CImage` object."},{"pos":[5252,5281],"content":"<bpt id=\"p1\">[</bpt>CImage::Save<ept id=\"p1\">](#cimage__save)</ept>","source":"[CImage::Save](#cimage__save)"},{"content":"Saves an image as the specified type.","pos":[5282,5319]},{"content":"<bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept> cannot specify image options.","pos":[5320,5358],"source":"**Save** cannot specify image options."},{"pos":[5363,5410],"content":"<bpt id=\"p1\">[</bpt>CImage::SetColorTable<ept id=\"p1\">](#cimage__setcolortable)</ept>","source":"[CImage::SetColorTable](#cimage__setcolortable)"},{"content":"Sets red, green, blue RGB) color values in a range of entries in the color table of the DIB section.","pos":[5411,5511]},{"pos":[5516,5553],"content":"<bpt id=\"p1\">[</bpt>CImage::SetPixel<ept id=\"p1\">](#cimage__setpixel)</ept>","source":"[CImage::SetPixel](#cimage__setpixel)"},{"content":"Sets the pixel at the specified coordinates to the specified color.","pos":[5554,5621]},{"pos":[5626,5677],"content":"<bpt id=\"p1\">[</bpt>CImage::SetPixelIndexed<ept id=\"p1\">](#cimage__setpixelindexed)</ept>","source":"[CImage::SetPixelIndexed](#cimage__setpixelindexed)"},{"content":"Sets the pixel at the specified coordinates to the color at the specified index of the palette.","pos":[5678,5773]},{"pos":[5778,5821],"content":"<bpt id=\"p1\">[</bpt>CImage::SetPixelRGB<ept id=\"p1\">](#cimage__setpixelrgb)</ept>","source":"[CImage::SetPixelRGB](#cimage__setpixelrgb)"},{"content":"Sets the pixel at the specified coordinates to the specified red, green, blue (RGB) value.","pos":[5822,5912]},{"pos":[5917,5976],"content":"<bpt id=\"p1\">[</bpt>CImage::SetTransparentColor<ept id=\"p1\">](#cimage__settransparentcolor)</ept>","source":"[CImage::SetTransparentColor](#cimage__settransparentcolor)"},{"content":"Sets the index of the color to be treated as transparent.","pos":[5977,6034]},{"content":"Only one color in a palette can be transparent.","pos":[6035,6082]},{"pos":[6087,6128],"content":"<bpt id=\"p1\">[</bpt>CImage::StretchBlt<ept id=\"p1\">](#cimage__stretchblt)</ept>","source":"[CImage::StretchBlt](#cimage__stretchblt)"},{"content":"Copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the dimensions of the destination rectangle, if necessary.","pos":[6129,6301]},{"pos":[6306,6355],"content":"<bpt id=\"p1\">[</bpt>CImage::TransparentBlt<ept id=\"p1\">](#cimage__transparentblt)</ept>","source":"[CImage::TransparentBlt](#cimage__transparentblt)"},{"content":"Copies a bitmap with transparent color from the source device context to this current device context.","pos":[6356,6457]},{"pos":[6468,6484],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[6491,6495]},{"content":"Description","pos":[6496,6507]},{"pos":[6545,6598],"content":"<bpt id=\"p1\">[</bpt>CImage::operator HBITMAP<ept id=\"p1\">](#cimage__operator_hbitmap)</ept>","source":"[CImage::operator HBITMAP](#cimage__operator_hbitmap)"},{"pos":[6599,6658],"content":"Returns the Windows handle attached to the <ph id=\"ph1\">`CImage`</ph> object.","source":"Returns the Windows handle attached to the `CImage` object."},{"pos":[6668,6675],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CImage`</ph> takes bitmaps that are either device-independent bitmap (DIB) sections or not; however, you can use <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cimage__create)</ept> or <bpt id=\"p2\">[</bpt>CImage::Load<ept id=\"p2\">](#cimage__load)</ept> with only DIB sections.","pos":[6679,6870],"source":"`CImage` takes bitmaps that are either device-independent bitmap (DIB) sections or not; however, you can use [Create](#cimage__create) or [CImage::Load](#cimage__load) with only DIB sections."},{"content":"You can attach a non-DIB section bitmap to a <ph id=\"ph1\">`CImage`</ph> object using <bpt id=\"p1\">[</bpt>Attach<ept id=\"p1\">](#cimage__attach)</ept>, but then you cannot use the following <ph id=\"ph2\">`CImage`</ph> methods, which support only DIB section bitmaps:","pos":[6871,7060],"source":" You can attach a non-DIB section bitmap to a `CImage` object using [Attach](#cimage__attach), but then you cannot use the following `CImage` methods, which support only DIB section bitmaps:"},{"pos":[7068,7095],"content":"<bpt id=\"p1\">[</bpt>GetBits<ept id=\"p1\">](#cimage__getbits)</ept>","source":"[GetBits](#cimage__getbits)"},{"pos":[7103,7142],"content":"<bpt id=\"p1\">[</bpt>GetColorTable<ept id=\"p1\">](#cimage__getcolortable)</ept>","source":"[GetColorTable](#cimage__getcolortable)"},{"pos":[7150,7209],"content":"<bpt id=\"p1\">[</bpt>GetMaxColorTableEntries<ept id=\"p1\">](#cimage__getmaxcolortableentries)</ept>","source":"[GetMaxColorTableEntries](#cimage__getmaxcolortableentries)"},{"pos":[7217,7246],"content":"<bpt id=\"p1\">[</bpt>GetPitch<ept id=\"p1\">](#cimage__getpitch)</ept>","source":"[GetPitch](#cimage__getpitch)"},{"pos":[7254,7297],"content":"<bpt id=\"p1\">[</bpt>GetPixelAddress<ept id=\"p1\">](#cimage__getpixeladdress)</ept>","source":"[GetPixelAddress](#cimage__getpixeladdress)"},{"pos":[7305,7336],"content":"<bpt id=\"p1\">[</bpt>IsIndexed<ept id=\"p1\">](#cimage__isindexed)</ept>","source":"[IsIndexed](#cimage__isindexed)"},{"pos":[7344,7383],"content":"<bpt id=\"p1\">[</bpt>SetColorTable<ept id=\"p1\">](#cimage__setcolortable)</ept>","source":"[SetColorTable](#cimage__setcolortable)"},{"pos":[7390,7490],"content":"To determine if an attached bitmap is a DIB section, call <bpt id=\"p1\">[</bpt>IsDibSection<ept id=\"p1\">](#cimage__isdibsection)</ept><bpt id=\"p2\">**</bpt>.<ept id=\"p2\">**</ept>","source":"To determine if an attached bitmap is a DIB section, call [IsDibSection](#cimage__isdibsection)**.**"},{"pos":[7498,7901],"content":"[!NOTE]\n**Note** In Visual Studio .NET 2003, this class keeps a count of the number of `CImage` objects created. Whenever the count goes to 0, the function **GdiplusShutdown** is automatically called to release resources used by GDI+. This ensures that any `CImage` objects created directly or indirectly by DLLs are always destroyed properly and that **GdiplusShutdown** is not called from `DllMain`.","leadings":["","> "],"nodes":[{"content":"**Note** In Visual Studio .NET 2003, this class keeps a count of the number of `CImage` objects created. Whenever the count goes to 0, the function **GdiplusShutdown** is automatically called to release resources used by GDI+. This ensures that any `CImage` objects created directly or indirectly by DLLs are always destroyed properly and that **GdiplusShutdown** is not called from `DllMain`.","pos":[8,401],"nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> In Visual Studio .NET 2003, this class keeps a count of the number of <ph id=\"ph1\">`CImage`</ph> objects created.","pos":[0,104],"source":"**Note** In Visual Studio .NET 2003, this class keeps a count of the number of `CImage` objects created."},{"content":"Whenever the count goes to 0, the function <bpt id=\"p1\">**</bpt>GdiplusShutdown<ept id=\"p1\">**</ept> is automatically called to release resources used by GDI+.","pos":[105,226],"source":" Whenever the count goes to 0, the function **GdiplusShutdown** is automatically called to release resources used by GDI+."},{"content":"This ensures that any <ph id=\"ph1\">`CImage`</ph> objects created directly or indirectly by DLLs are always destroyed properly and that <bpt id=\"p1\">**</bpt>GdiplusShutdown<ept id=\"p1\">**</ept> is not called from <ph id=\"ph2\">`DllMain`</ph>.","pos":[227,393],"source":" This ensures that any `CImage` objects created directly or indirectly by DLLs are always destroyed properly and that **GdiplusShutdown** is not called from `DllMain`."}]}]},{"pos":[7909,8133],"content":"[!NOTE]\n Using global `CImage` objects in a DLL is not recommended. If you need to use a global `CImage` object in a DLL, call [CImage::ReleaseGDIPlus](#cimage__releasegdiplus) to explicitly release resources used by GDI+.","leadings":["","> "],"nodes":[{"content":" Using global `CImage` objects in a DLL is not recommended. If you need to use a global `CImage` object in a DLL, call [CImage::ReleaseGDIPlus](#cimage__releasegdiplus) to explicitly release resources used by GDI+.","pos":[8,222],"nodes":[{"content":"Using global <ph id=\"ph1\">`CImage`</ph> objects in a DLL is not recommended.","pos":[1,59],"source":" Using global `CImage` objects in a DLL is not recommended."},{"content":"If you need to use a global <ph id=\"ph1\">`CImage`</ph> object in a DLL, call <bpt id=\"p1\">[</bpt>CImage::ReleaseGDIPlus<ept id=\"p1\">](#cimage__releasegdiplus)</ept> to explicitly release resources used by GDI+.","pos":[60,214],"source":" If you need to use a global `CImage` object in a DLL, call [CImage::ReleaseGDIPlus](#cimage__releasegdiplus) to explicitly release resources used by GDI+."}]}]},{"content":"<ph id=\"ph1\">`CImage`</ph> cannot be selected into a new <bpt id=\"p1\">[</bpt>CDC<ept id=\"p1\">](../../mfc/reference/cdc-class.md)</ept>.","pos":[8140,8219],"source":"`CImage` cannot be selected into a new [CDC](../../mfc/reference/cdc-class.md)."},{"content":"<ph id=\"ph1\">`CImage`</ph> creates its own <bpt id=\"p1\">**</bpt>HDC<ept id=\"p1\">**</ept> for the image.","pos":[8220,8267],"source":"`CImage` creates its own **HDC** for the image."},{"content":"Because an <ph id=\"ph1\">`HBITMAP`</ph> can only be selected into one <bpt id=\"p1\">**</bpt>HDC<ept id=\"p1\">**</ept> at a time, the <ph id=\"ph2\">`HBITMAP`</ph> associated with the <ph id=\"ph3\">`CImage`</ph> cannot be selected into another <bpt id=\"p2\">**</bpt>HDC<ept id=\"p2\">**</ept>.","pos":[8268,8421],"source":" Because an `HBITMAP` can only be selected into one **HDC** at a time, the `HBITMAP` associated with the `CImage` cannot be selected into another **HDC**."},{"content":"If you need a <ph id=\"ph1\">`CDC`</ph>, retrieve the <bpt id=\"p1\">**</bpt>HDC<ept id=\"p1\">**</ept> from the <ph id=\"ph2\">`CImage`</ph> and give it to [CDC::FromHandle](../../mfc/reference/cdc-class.md#cdc__fromhandle.","pos":[8422,8564],"source":" If you need a `CDC`, retrieve the **HDC** from the `CImage` and give it to [CDC::FromHandle](../../mfc/reference/cdc-class.md#cdc__fromhandle."},{"pos":[8573,8580],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"When you use <ph id=\"ph1\">`CImage`</ph> in an MFC project, note which member functions in your project expect a pointer to a <bpt id=\"p1\">[</bpt>CBitmap<ept id=\"p1\">](../../mfc/reference/cbitmap-class.md)</ept> object.","pos":[8747,8909],"source":"When you use `CImage` in an MFC project, note which member functions in your project expect a pointer to a [CBitmap](../../mfc/reference/cbitmap-class.md) object."},{"content":"If you want to use <ph id=\"ph1\">`CImage`</ph> with such a function, like <bpt id=\"p1\">[</bpt>CMenu::AppendMenu<ept id=\"p1\">](../../mfc/reference/cmenu-class.md#cmenu__appendmenu)</ept>, use <bpt id=\"p2\">[</bpt>CBitmap::FromHandle<ept id=\"p2\">](../../mfc/reference/cbitmap-class.md#cbitmap__fromhandle)</ept>, pass it your <ph id=\"ph2\">`CImage`</ph> <ph id=\"ph3\">`HBITMAP`</ph>, and use the returned <ph id=\"ph4\">`CBitmap*`</ph>.","pos":[8910,9190],"source":" If you want to use `CImage` with such a function, like [CMenu::AppendMenu](../../mfc/reference/cmenu-class.md#cmenu__appendmenu), use [CBitmap::FromHandle](../../mfc/reference/cbitmap-class.md#cbitmap__fromhandle), pass it your `CImage` `HBITMAP`, and use the returned `CBitmap*`."},{"pos":[9200,9207],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Through <ph id=\"ph1\">`CImage`</ph>, you have access to the actual bits of a DIB section.","pos":[9552,9622],"source":"Through `CImage`, you have access to the actual bits of a DIB section."},{"content":"You can use a <ph id=\"ph1\">`CImage`</ph> object anywhere you previously used a Win32 HBITMAP or DIB section.","pos":[9623,9713],"source":" You can use a `CImage` object anywhere you previously used a Win32 HBITMAP or DIB section."},{"pos":[9721,9793],"content":"[!NOTE]\n The following `CImage` methods have limitations on their use:","leadings":["","> "],"nodes":[{"content":"The following <ph id=\"ph1\">`CImage`</ph> methods have limitations on their use:","pos":[9,70],"source":" The following `CImage` methods have limitations on their use:"}]},{"content":"Method","pos":[9800,9806]},{"content":"Limitation","pos":[9807,9817]},{"pos":[9856,9881],"content":"<bpt id=\"p1\">[</bpt>PlgBlt<ept id=\"p1\">](#cimage__plgblt)</ept>","source":"[PlgBlt](#cimage__plgblt)"},{"content":"Works with only Windows NT 4.0 or later.","pos":[9882,9922]},{"content":"Will not work on applications running on Windows 95/98 or later.","pos":[9923,9987]},{"pos":[9992,10019],"content":"<bpt id=\"p1\">[</bpt>MaskBlt<ept id=\"p1\">](#cimage__maskblt)</ept>","source":"[MaskBlt](#cimage__maskblt)"},{"content":"Works with only Windows NT 4.0 or later.","pos":[10020,10060]},{"content":"Will not work on applications running on Windows 95/98 or later.","pos":[10061,10125]},{"pos":[10130,10163],"content":"<bpt id=\"p1\">[</bpt>AlphaBlend<ept id=\"p1\">](#cimage__alphablend)</ept>","source":"[AlphaBlend](#cimage__alphablend)"},{"content":"Works with only Windows 2000, Windows 98, and later systems.","pos":[10164,10224]},{"pos":[10229,10270],"content":"<bpt id=\"p1\">[</bpt>TransparentBlt<ept id=\"p1\">](#cimage__transparentblt)</ept>","source":"[TransparentBlt](#cimage__transparentblt)"},{"content":"Works with only Windows 2000, Windows 98, and later systems.","pos":[10271,10331]},{"pos":[10336,10357],"content":"<bpt id=\"p1\">[</bpt>Draw<ept id=\"p1\">](#cimage__draw)</ept>","source":"[Draw](#cimage__draw)"},{"content":"Supports transparency with only Windows 2000, Windows 98, and later systems.","pos":[10358,10434]},{"pos":[10442,10486],"content":"You can use <ph id=\"ph1\">`CImage`</ph> from either MFC or ATL.","source":"You can use `CImage` from either MFC or ATL."},{"pos":[10494,10819],"content":"[!NOTE]\n When you create a project using `CImage`, you must define `CString` before you include `atlimage.h`. If your project uses ATL without MFC, include `atlstr.h` before you include `atlimage.h`. If your project uses MFC (or if it is an ATL project with MFC support), include `afxstr.h` before you include `atlimage.h`.","leadings":["","> "],"nodes":[{"content":" When you create a project using `CImage`, you must define `CString` before you include `atlimage.h`. If your project uses ATL without MFC, include `atlstr.h` before you include `atlimage.h`. If your project uses MFC (or if it is an ATL project with MFC support), include `afxstr.h` before you include `atlimage.h`.","pos":[8,323],"nodes":[{"content":"When you create a project using <ph id=\"ph1\">`CImage`</ph>, you must define <ph id=\"ph2\">`CString`</ph> before you include <ph id=\"ph3\">`atlimage.h`</ph>.","pos":[1,101],"source":" When you create a project using `CImage`, you must define `CString` before you include `atlimage.h`."},{"content":"If your project uses ATL without MFC, include <ph id=\"ph1\">`atlstr.h`</ph> before you include <ph id=\"ph2\">`atlimage.h`</ph>.","pos":[102,191],"source":" If your project uses ATL without MFC, include `atlstr.h` before you include `atlimage.h`."},{"content":"If your project uses MFC (or if it is an ATL project with MFC support), include <ph id=\"ph1\">`afxstr.h`</ph> before you include <ph id=\"ph2\">`atlimage.h`</ph>.","pos":[192,315],"source":" If your project uses MFC (or if it is an ATL project with MFC support), include `afxstr.h` before you include `atlimage.h`."}]}]},{"content":"Likewise, you must include <ph id=\"ph1\">`atlimage.h`</ph> before you include <ph id=\"ph2\">`atlimpl.cpp`</ph>.","pos":[10830,10903],"source":"Likewise, you must include `atlimage.h` before you include `atlimpl.cpp`."},{"content":"To accomplish this easily, include <ph id=\"ph1\">`atlimage.h`</ph> in your <ph id=\"ph2\">`stdafx.h`</ph>.","pos":[10904,10971],"source":" To accomplish this easily, include `atlimage.h` in your `stdafx.h`."},{"pos":[10980,10992],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[10996,11018],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlimage.h","source":"**Header:** atlimage.h"},{"pos":[11028,11081],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__alphablend\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::AlphaBlend","linkify":"<a name=\"cimage__alphablend\"></a>  CImage::AlphaBlend","source":"<a name=\"cimage__alphablend\"></a>  CImage::AlphaBlend"},{"content":"Displays bitmaps that have transparent or semitransparent pixels.","pos":[11085,11150]},{"pos":[11811,11821],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle to the destination device context.","pos":[11838,11879]},{"content":"The x-coordinate, in logical units, of the upper left corner of the destination rectangle.","pos":[11897,11987]},{"content":"The y-coordinate, in logical units, of the upper left corner of the destination rectangle.","pos":[12005,12095]},{"content":"<bpt id=\"p1\">*</bpt>bSrcAlpha<ept id=\"p1\">*</ept>","pos":[12102,12113],"source":"*bSrcAlpha*"},{"content":"An alpha transparency value to be used on the entire source bitmap.","pos":[12117,12184]},{"content":"The default 0xff (255) assumes that your image is opaque, and that you want to use per-pixel alpha values only.","pos":[12185,12296]},{"content":"The alpha-blending function for source and destination bitmaps, a global alpha value to be applied to the entire source bitmap, and format information for the source bitmap.","pos":[12317,12490]},{"content":"The source and destination blend functions are currently limited to <bpt id=\"p1\">**</bpt>AC_SRC_OVER<ept id=\"p1\">**</ept>.","pos":[12491,12575],"source":" The source and destination blend functions are currently limited to **AC_SRC_OVER**."},{"content":"A reference to a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure that identifies the upper left corner of the destination rectangle, in logical units.","pos":[12597,12777],"source":" A reference to a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that identifies the upper left corner of the destination rectangle, in logical units."},{"content":"The width, in logical units, of the destination rectangle.","pos":[12800,12858]},{"content":"The height, in logical units, of the destination rectangle.","pos":[12882,12941]},{"content":"The logical x-coordinate of the upper left corner of the source rectangle.","pos":[12958,13032]},{"content":"The logical y-coordinate of the upper left corner of the source rectangle.","pos":[13049,13123]},{"content":"The width, in logical units, of the source rectangle.","pos":[13145,13198]},{"content":"The height, in logical units, of the source rectangle.","pos":[13221,13275]},{"content":"A reference to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure, identifying the destination.","pos":[13296,13419],"source":" A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure, identifying the destination."},{"content":"A reference to a <ph id=\"ph1\">`RECT`</ph> structure, identifying the source.","pos":[13439,13497],"source":" A reference to a `RECT` structure, identifying the source."},{"pos":[13507,13519],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[13523,13558]},{"pos":[13568,13575],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Alpha-blend bitmaps support color blending on a per-pixel basis.","pos":[13579,13643]},{"pos":[13650,13811],"content":"When <ph id=\"ph1\">`bBlendOp`</ph> is set to the default of <bpt id=\"p1\">**</bpt>AC_SRC_OVER<ept id=\"p1\">**</ept>, the source bitmap is placed over the destination bitmap based on the alpha values of the source pixels.","source":"When `bBlendOp` is set to the default of **AC_SRC_OVER**, the source bitmap is placed over the destination bitmap based on the alpha values of the source pixels."},{"pos":[13819,13864],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__attach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::Attach","linkify":"<a name=\"cimage__attach\"></a>  CImage::Attach","source":"<a name=\"cimage__attach\"></a>  CImage::Attach"},{"pos":[13868,13908],"content":"Attaches <ph id=\"ph1\">`hBitmap`</ph> to a <ph id=\"ph2\">`CImage`</ph> object.","source":"Attaches `hBitmap` to a `CImage` object."},{"pos":[14016,14026],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A handle to an <ph id=\"ph1\">`HBITMAP`</ph>.","pos":[14043,14068],"source":" A handle to an `HBITMAP`."},{"content":"<bpt id=\"p1\">*</bpt>eOrientation<ept id=\"p1\">*</ept>","pos":[14075,14089],"source":"*eOrientation*"},{"content":"Specifies the orientation of the bitmap.","pos":[14093,14133]},{"content":"Can be one of the following:","pos":[14134,14162]},{"content":"<bpt id=\"p1\">**</bpt>DIBOR_DEFAULT<ept id=\"p1\">**</ept> The orientation of the bitmap is determined by the operating system.","pos":[14170,14256],"source":"**DIBOR_DEFAULT** The orientation of the bitmap is determined by the operating system."},{"content":"However, this may not always have the intended results on all operating systems.","pos":[14257,14337]},{"content":"For more information on this, see the following Knowledge Base article ( <bpt id=\"p1\">**</bpt>Q186586<ept id=\"p1\">**</ept>): PRB: GetObject() Always Returns Positive Height For DIB Sections.","pos":[14338,14490],"source":" For more information on this, see the following Knowledge Base article ( **Q186586**): PRB: GetObject() Always Returns Positive Height For DIB Sections."},{"content":"<bpt id=\"p1\">**</bpt>DIBOR_BOTTOMUP<ept id=\"p1\">**</ept> The lines of the bitmap are in reverse order.","pos":[14498,14562],"source":"**DIBOR_BOTTOMUP** The lines of the bitmap are in reverse order."},{"content":"This causes <bpt id=\"p1\">[</bpt>CImage::GetBits<ept id=\"p1\">](#cimage__getbits)</ept> to return a pointer near the end of the bitmap buffer and <bpt id=\"p2\">[</bpt>CImage::GetPitch<ept id=\"p2\">](#cimage__getpitch)</ept> to return a negative number.","pos":[14563,14735],"source":" This causes [CImage::GetBits](#cimage__getbits) to return a pointer near the end of the bitmap buffer and [CImage::GetPitch](#cimage__getpitch) to return a negative number."},{"content":"<bpt id=\"p1\">**</bpt>DIBOR_TOPDOWN<ept id=\"p1\">**</ept>  The lines of the bitmap are in top to bottom order.","pos":[14743,14813],"source":"**DIBOR_TOPDOWN**  The lines of the bitmap are in top to bottom order."},{"content":"This causes <bpt id=\"p1\">[</bpt>CImage::GetBits<ept id=\"p1\">](#cimage__getbits)</ept> to return a pointer to the first byte of the bitmap buffer and <bpt id=\"p2\">[</bpt>CImage::GetPitch<ept id=\"p2\">](#cimage__getpitch)</ept> to return a positive number.","pos":[14814,14991],"source":" This causes [CImage::GetBits](#cimage__getbits) to return a pointer to the first byte of the bitmap buffer and [CImage::GetPitch](#cimage__getpitch) to return a positive number."},{"pos":[15001,15008],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The bitmap can be either a non-DIB section bitmap or a DIB section bitmap.","pos":[15012,15086]},{"content":"See <bpt id=\"p1\">[</bpt>IsDIBSection<ept id=\"p1\">](#cimage__isdibsection)</ept> for a list of methods that you can use only with DIB section bitmaps.","pos":[15087,15198],"source":" See [IsDIBSection](#cimage__isdibsection) for a list of methods that you can use only with DIB section bitmaps."},{"pos":[15208,15253],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__bitblt\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::BitBlt","linkify":"<a name=\"cimage__bitblt\"></a>  CImage::BitBlt","source":"<a name=\"cimage__bitblt\"></a>  CImage::BitBlt"},{"content":"Copies a bitmap from the source device context to this current device context.","pos":[15257,15335]},{"pos":[15839,15849],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The destination <bpt id=\"p1\">**</bpt>HDC<ept id=\"p1\">**</ept>.","pos":[15866,15890],"source":" The destination **HDC**."},{"content":"The logical x-coordinate of the upper left corner of the destination rectangle.","pos":[15908,15987]},{"content":"The logical y-coordinate of the upper left corner of the destination rectangle.","pos":[16005,16084]},{"content":"The raster operation to be performed.","pos":[16102,16139]},{"content":"Raster-operation codes define exactly how to combine the bits of the source, the destination, and the pattern (as defined by the currently selected brush) to form the destination.","pos":[16140,16319]},{"content":"See <bpt id=\"p1\">[</bpt>BitBlt<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183370)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph> for a list of other raster-operation codes and their descriptions.","pos":[16320,16510],"source":" See [BitBlt](http://msdn.microsoft.com/library/windows/desktop/dd183370) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] for a list of other raster-operation codes and their descriptions."},{"content":"A <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure indicating the upper left corner of the destination rectangle.","pos":[16532,16674],"source":" A [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure indicating the upper left corner of the destination rectangle."},{"content":"The width, in logical units, of the destination rectangle.","pos":[16697,16755]},{"content":"The height, in logical units, of the destination rectangle.","pos":[16779,16838]},{"content":"The logical x-coordinate of the upper left corner of the source rectangle.","pos":[16855,16929]},{"content":"The logical y-coordinate of the upper left corner of the source rectangle.","pos":[16946,17020]},{"content":"A <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure indicating the destination rectangle.","pos":[17041,17157],"source":" A [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure indicating the destination rectangle."},{"content":"A <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> structure indicating the upper left corner of the source rectangle.","pos":[17178,17257],"source":" A **POINT** structure indicating the upper left corner of the source rectangle."},{"pos":[17267,17279],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise zero.","pos":[17283,17321]},{"pos":[17331,17338],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17342,17488],"content":"For more information, see <bpt id=\"p1\">[</bpt>BitBlt<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183370)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"For more information, see [BitBlt](http://msdn.microsoft.com/library/windows/desktop/dd183370) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[17498,17543],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__cimage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::CImage","linkify":"<a name=\"cimage__cimage\"></a>  CImage::CImage","source":"<a name=\"cimage__cimage\"></a>  CImage::CImage"},{"pos":[17547,17576],"content":"Constructs a <ph id=\"ph1\">`CImage`</ph> object.","source":"Constructs a `CImage` object."},{"pos":[17617,17624],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17628,17830],"content":"Once you have constructed the object, call <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cimage__create)</ept>, <bpt id=\"p2\">[</bpt>Load<ept id=\"p2\">](#cimage__load)</ept>, <bpt id=\"p3\">[</bpt>LoadFromResource<ept id=\"p3\">](#cimage__loadfromresource)</ept>, or <bpt id=\"p4\">[</bpt>Attach<ept id=\"p4\">](#cimage__attach)</ept> to attach a bitmap to the object.","source":"Once you have constructed the object, call [Create](#cimage__create), [Load](#cimage__load), [LoadFromResource](#cimage__loadfromresource), or [Attach](#cimage__attach) to attach a bitmap to the object."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> In Visual Studio, this class keeps a count of the number of <ph id=\"ph1\">`CImage`</ph> objects created.","pos":[17837,17931],"source":"**Note** In Visual Studio, this class keeps a count of the number of `CImage` objects created."},{"content":"Whenever the count goes to 0, the function <bpt id=\"p1\">**</bpt>GdiplusShutdown<ept id=\"p1\">**</ept> is automatically called to release resources used by GDI+.","pos":[17932,18053],"source":" Whenever the count goes to 0, the function **GdiplusShutdown** is automatically called to release resources used by GDI+."},{"content":"This ensures that any <ph id=\"ph1\">`CImage`</ph> objects created directly or indirectly by DLLs are always destroyed properly and that <bpt id=\"p1\">**</bpt>GdiplusShutdown<ept id=\"p1\">**</ept> is not called from DllMain.","pos":[18054,18218],"source":" This ensures that any `CImage` objects created directly or indirectly by DLLs are always destroyed properly and that **GdiplusShutdown** is not called from DllMain."},{"content":"Using global <ph id=\"ph1\">`CImage`</ph> objects in a DLL is not recommended.","pos":[18225,18283],"source":"Using global `CImage` objects in a DLL is not recommended."},{"content":"If you need to use a global <ph id=\"ph1\">`CImage`</ph> object in a DLL, call <bpt id=\"p1\">[</bpt>CImage::ReleaseGDIPlus<ept id=\"p1\">](#cimage__releasegdiplus)</ept> to explicitly release resources used by GDI+.","pos":[18284,18438],"source":" If you need to use a global `CImage` object in a DLL, call [CImage::ReleaseGDIPlus](#cimage__releasegdiplus) to explicitly release resources used by GDI+."},{"pos":[18448,18493],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::Create","linkify":"<a name=\"cimage__create\"></a>  CImage::Create","source":"<a name=\"cimage__create\"></a>  CImage::Create"},{"pos":[18497,18583],"content":"Creates a <ph id=\"ph1\">`CImage`</ph> bitmap and attach it to the previously constructed <ph id=\"ph2\">`CImage`</ph> object.","source":"Creates a `CImage` bitmap and attach it to the previously constructed `CImage` object."},{"pos":[18693,18703],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The width of the <ph id=\"ph1\">`CImage`</ph> bitmap, in pixels.","pos":[18719,18763],"source":" The width of the `CImage` bitmap, in pixels."},{"content":"The height of the <ph id=\"ph1\">`CImage`</ph> bitmap, in pixels.","pos":[18783,18828],"source":" The height of the `CImage` bitmap, in pixels."},{"content":"If <ph id=\"ph1\">`nHeight`</ph> is positive, the bitmap is a bottom-up DIB and its origin is the lower left corner.","pos":[18829,18925],"source":" If `nHeight` is positive, the bitmap is a bottom-up DIB and its origin is the lower left corner."},{"content":"If <ph id=\"ph1\">`nHeight`</ph> is negative, the bitmap is a top-down DIB and its origin is the upper left corner.","pos":[18926,19021],"source":" If `nHeight` is negative, the bitmap is a top-down DIB and its origin is the upper left corner."},{"content":"The numbers of bits per pixel in the bitmap.","pos":[19038,19082]},{"content":"Usually 4, 8, 16, 24, or 32.","pos":[19083,19111]},{"content":"Can be 1 for monochrome bitmaps or masks.","pos":[19112,19153]},{"content":"Specifies if the bitmap object has an alpha channel.","pos":[19173,19225]},{"content":"Can be a combination of zero or more of the following values:","pos":[19226,19287]},{"content":"<bpt id=\"p1\">**</bpt>createAlphaChannel<ept id=\"p1\">**</ept> Can only be used if <ph id=\"ph1\">`nBPP`</ph> is 32, and <ph id=\"ph2\">`eCompression`</ph> is <bpt id=\"p2\">**</bpt>BI_RGB<ept id=\"p2\">**</ept>.","pos":[19295,19385],"source":"**createAlphaChannel** Can only be used if `nBPP` is 32, and `eCompression` is **BI_RGB**."},{"content":"If specified, the created image has an alpha (transparency) value for each pixel, stored in the 4th byte of each pixel (unused in a non-alpha 32-bit image).","pos":[19386,19542]},{"content":"This alpha channel is automatically used when calling <bpt id=\"p1\">[</bpt>CImage::AlphaBlend<ept id=\"p1\">](#cimage__alphablend)</ept>.","pos":[19543,19639],"source":" This alpha channel is automatically used when calling [CImage::AlphaBlend](#cimage__alphablend)."},{"pos":[19647,19781],"content":"[!NOTE]\n In calls to [CImage::Draw](#cimage__draw), images with an alpha channel are automatically alpha blended to the destination.","leadings":["","> "],"nodes":[{"content":"In calls to <bpt id=\"p1\">[</bpt>CImage::Draw<ept id=\"p1\">](#cimage__draw)</ept>, images with an alpha channel are automatically alpha blended to the destination.","pos":[9,132],"source":" In calls to [CImage::Draw](#cimage__draw), images with an alpha channel are automatically alpha blended to the destination."}]},{"pos":[19791,19803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[19807,19842]},{"pos":[19852,19901],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__createex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::CreateEx","linkify":"<a name=\"cimage__createex\"></a>  CImage::CreateEx","source":"<a name=\"cimage__createex\"></a>  CImage::CreateEx"},{"pos":[19905,19991],"content":"Creates a <ph id=\"ph1\">`CImage`</ph> bitmap and attach it to the previously constructed <ph id=\"ph2\">`CImage`</ph> object.","source":"Creates a `CImage` bitmap and attach it to the previously constructed `CImage` object."},{"pos":[20164,20174],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The width of the <ph id=\"ph1\">`CImage`</ph> bitmap, in pixels.","pos":[20190,20234],"source":" The width of the `CImage` bitmap, in pixels."},{"content":"The height of the <ph id=\"ph1\">`CImage`</ph> bitmap, in pixels.","pos":[20254,20299],"source":" The height of the `CImage` bitmap, in pixels."},{"content":"If <ph id=\"ph1\">`nHeight`</ph> is positive, the bitmap is a bottom-up DIB and its origin is the lower left corner.","pos":[20300,20396],"source":" If `nHeight` is positive, the bitmap is a bottom-up DIB and its origin is the lower left corner."},{"content":"If <ph id=\"ph1\">`nHeight`</ph> is negative, the bitmap is a top-down DIB and its origin is the upper left corner.","pos":[20397,20492],"source":" If `nHeight` is negative, the bitmap is a top-down DIB and its origin is the upper left corner."},{"content":"The numbers of bits per pixel in the bitmap.","pos":[20509,20553]},{"content":"Usually 4, 8, 16, 24, or 32.","pos":[20554,20582]},{"content":"Can be 1 for monochrome bitmaps or masks.","pos":[20583,20624]},{"content":"Specifies the type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed).","pos":[20649,20754]},{"content":"Can be one of the following values:","pos":[20755,20790]},{"content":"<bpt id=\"p1\">**</bpt>BI_RGB<ept id=\"p1\">**</ept> The format is uncompressed.","pos":[20798,20836],"source":"**BI_RGB** The format is uncompressed."},{"content":"Specifying this value when calling <ph id=\"ph1\">`CImage::CreateEx`</ph> is equivalent to calling <ph id=\"ph2\">`CImage::Create`</ph>.","pos":[20837,20933],"source":" Specifying this value when calling `CImage::CreateEx` is equivalent to calling `CImage::Create`."},{"content":"<bpt id=\"p1\">**</bpt>BI_BITFIELDS<ept id=\"p1\">**</ept> The format is uncompressed and the color table consists of three <ph id=\"ph1\">`DWORD`</ph> color masks that specify the red, green, and blue components, respectively, of each pixel.","pos":[20941,21121],"source":"**BI_BITFIELDS** The format is uncompressed and the color table consists of three `DWORD` color masks that specify the red, green, and blue components, respectively, of each pixel."},{"content":"This is valid when used with 16- and 32-bpp bitmaps.","pos":[21122,21174]},{"pos":[21181,21633],"content":"*pdwBitfields*  \nOnly used if `eCompression` is set to **BI_BITFIELDS**, otherwise it must be **NULL**. A pointer to an array of three `DWORD` bitmasks, specifying which bits of each pixel are used for the red, green, and blue components of the color, respectively. For information on restrictions for the bitfields, see [BITMAPINFOHEADER](http://msdn.microsoft.com/library/windows/desktop/dd183376) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].","leadings":[""," "],"nodes":[{"content":"<bpt id=\"p1\">*</bpt>pdwBitfields<ept id=\"p1\">*</ept>","pos":[0,14],"source":"*pdwBitfields*"},{"content":"Only used if `eCompression` is set to **BI_BITFIELDS**, otherwise it must be **NULL**. A pointer to an array of three `DWORD` bitmasks, specifying which bits of each pixel are used for the red, green, and blue components of the color, respectively. For information on restrictions for the bitfields, see [BITMAPINFOHEADER](http://msdn.microsoft.com/library/windows/desktop/dd183376) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].","pos":[17,451],"nodes":[{"content":"Only used if <ph id=\"ph1\">`eCompression`</ph> is set to <bpt id=\"p1\">**</bpt>BI_BITFIELDS<ept id=\"p1\">**</ept>, otherwise it must be <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","pos":[0,86],"source":"Only used if `eCompression` is set to **BI_BITFIELDS**, otherwise it must be **NULL**."},{"content":"A pointer to an array of three <ph id=\"ph1\">`DWORD`</ph> bitmasks, specifying which bits of each pixel are used for the red, green, and blue components of the color, respectively.","pos":[87,248],"source":" A pointer to an array of three `DWORD` bitmasks, specifying which bits of each pixel are used for the red, green, and blue components of the color, respectively."},{"content":"For information on restrictions for the bitfields, see <bpt id=\"p1\">[</bpt>BITMAPINFOHEADER<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183376)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[249,434],"source":" For information on restrictions for the bitfields, see [BITMAPINFOHEADER](http://msdn.microsoft.com/library/windows/desktop/dd183376) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."}]}]},{"pos":[21640,21767],"content":"`dwFlags`  \nSpecifies if the bitmap object has an alpha channel. Can be a combination of zero or more of the following values:","leadings":[""," "],"nodes":[{"content":"Specifies if the bitmap object has an alpha channel. Can be a combination of zero or more of the following values:","pos":[12,126],"nodes":[{"content":"Specifies if the bitmap object has an alpha channel.","pos":[0,52]},{"content":"Can be a combination of zero or more of the following values:","pos":[53,114]}]}]},{"content":"<bpt id=\"p1\">**</bpt>createAlphaChannel<ept id=\"p1\">**</ept> Can only be used if <ph id=\"ph1\">`nBPP`</ph> is 32, and <ph id=\"ph2\">`eCompression`</ph> is <bpt id=\"p2\">**</bpt>BI_RGB<ept id=\"p2\">**</ept>.","pos":[21775,21865],"source":"**createAlphaChannel** Can only be used if `nBPP` is 32, and `eCompression` is **BI_RGB**."},{"content":"If specified, the created image has an alpha (transparency) value for each pixel, stored in the 4th byte of each pixel (unused in a non-alpha 32-bit image).","pos":[21866,22022]},{"content":"This alpha channel is automatically used when calling <bpt id=\"p1\">[</bpt>CImage::AlphaBlend<ept id=\"p1\">](#cimage__alphablend)</ept>.","pos":[22023,22119],"source":" This alpha channel is automatically used when calling [CImage::AlphaBlend](#cimage__alphablend)."},{"pos":[22131,22269],"content":"[!NOTE]\nIn calls to [CImage::Draw](#cimage__draw), images with an alpha channel are automatically alpha blended to the destination.","leadings":["","    >  "],"nodes":[{"content":"In calls to <bpt id=\"p1\">[</bpt>CImage::Draw<ept id=\"p1\">](#cimage__draw)</ept>, images with an alpha channel are automatically alpha blended to the destination.","pos":[8,131],"source":"In calls to [CImage::Draw](#cimage__draw), images with an alpha channel are automatically alpha blended to the destination."}]},{"pos":[22279,22291],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if successful.","pos":[22295,22318],"source":"**TRUE** if successful."},{"content":"Otherwise <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","pos":[22319,22339],"source":" Otherwise **FALSE**."},{"pos":[22349,22356],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example creates a 100x100 pixel bitmap, using 16 bits to encode each pixel.","pos":[22360,22449]},{"content":"In a given 16-bit pixel, bits 0-3 encode the red component, bits 4-7 encode green, and bits 8-11 encode blue.","pos":[22450,22559]},{"content":"The remaining 4 bits are unused.","pos":[22560,22592]},{"pos":[22743,22790],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__destroy\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::Destroy","linkify":"<a name=\"cimage__destroy\"></a>  CImage::Destroy","source":"<a name=\"cimage__destroy\"></a>  CImage::Destroy"},{"pos":[22794,22863],"content":"Detaches the bitmap from the <ph id=\"ph1\">`CImage`</ph> object and destroys the bitmap.","source":"Detaches the bitmap from the `CImage` object and destroys the bitmap."},{"pos":[22910,22955],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__detach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::Detach","linkify":"<a name=\"cimage__detach\"></a>  CImage::Detach","source":"<a name=\"cimage__detach\"></a>  CImage::Detach"},{"pos":[22959,23000],"content":"Detaches a bitmap from a <ph id=\"ph1\">`CImage`</ph> object.","source":"Detaches a bitmap from a `CImage` object."},{"pos":[23049,23061],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23065,23135],"content":"A handle to the bitmap detached, or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no bitmap is attached.","source":"A handle to the bitmap detached, or **NULL** if no bitmap is attached."},{"pos":[23145,23186],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__draw\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::Draw","linkify":"<a name=\"cimage__draw\"></a>  CImage::Draw","source":"<a name=\"cimage__draw\"></a>  CImage::Draw"},{"content":"Copies a bitmap from the source device context to the current device context.","pos":[23190,23267]},{"pos":[23867,23877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A handle to the destination device context.","pos":[23894,23937]},{"content":"The x-coordinate, in logical units, of the upper left corner of the destination rectangle.","pos":[23955,24045]},{"content":"The y-coordinate, in logical units, of the upper left corner of the destination rectangle.","pos":[24063,24153]},{"content":"The width, in logical units, of the destination rectangle.","pos":[24176,24234]},{"content":"The height, in logical units, of the destination rectangle.","pos":[24258,24317]},{"content":"The x-coordinate, in logical units, of the upper left corner of the source rectangle.","pos":[24334,24419]},{"content":"The y-coordinate, in logical units, of the upper left corner of the source rectangle.","pos":[24436,24521]},{"content":"The width, in logical units, of the source rectangle.","pos":[24543,24596]},{"content":"The height, in logical units, of the source rectangle.","pos":[24619,24673]},{"content":"A reference to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure, identifying the destination.","pos":[24694,24817],"source":" A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure, identifying the destination."},{"content":"A reference to a <ph id=\"ph1\">`RECT`</ph> structure, identifying the source.","pos":[24837,24895],"source":" A reference to a `RECT` structure, identifying the source."},{"content":"A reference to a <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure that identifies the upper left corner of the destination rectangle, in logical units.","pos":[24917,25097],"source":" A reference to a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that identifies the upper left corner of the destination rectangle, in logical units."},{"pos":[25107,25119],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[25123,25158]},{"pos":[25168,25175],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<bpt id=\"p1\">**</bpt>Draw<ept id=\"p1\">**</ept> performs the same operation as <bpt id=\"p2\">[</bpt>StretchBlt<ept id=\"p2\">](#cimage__stretchblt)</ept>, unless the image contains a transparent color or alpha channel.","pos":[25179,25317],"source":"**Draw** performs the same operation as [StretchBlt](#cimage__stretchblt), unless the image contains a transparent color or alpha channel."},{"content":"In that case, <bpt id=\"p1\">**</bpt>Draw<ept id=\"p1\">**</ept> performs the same operation as either <bpt id=\"p2\">[</bpt>TransparentBlt<ept id=\"p2\">](#cimage__transparentblt)</ept> or <bpt id=\"p3\">[</bpt>AlphaBlend<ept id=\"p3\">](#cimage__alphablend)</ept> as required.","pos":[25318,25470],"source":" In that case, **Draw** performs the same operation as either [TransparentBlt](#cimage__transparentblt) or [AlphaBlend](#cimage__alphablend) as required."},{"content":"For versions of <bpt id=\"p1\">**</bpt>Draw<ept id=\"p1\">**</ept> that do not specify a source rectangle, the entire source image is the default.","pos":[25477,25581],"source":"For versions of **Draw** that do not specify a source rectangle, the entire source image is the default."},{"content":"For the version of <bpt id=\"p1\">**</bpt>Draw<ept id=\"p1\">**</ept> that does not specify a size for the destination rectangle, the size of the source image is the default and no stretching or shrinking occurs.","pos":[25582,25752],"source":" For the version of **Draw** that does not specify a size for the destination rectangle, the size of the source image is the default and no stretching or shrinking occurs."},{"pos":[25762,25809],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__getbits\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::GetBits","linkify":"<a name=\"cimage__getbits\"></a>  CImage::GetBits","source":"<a name=\"cimage__getbits\"></a>  CImage::GetBits"},{"content":"Retrieves a pointer to the actual bit values of a given pixel in a bitmap.","pos":[25813,25887]},{"pos":[25935,25947],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the bitmap buffer.","pos":[25951,25982]},{"content":"If the bitmap is a bottom-up DIB, the pointer points near the end of the buffer.","pos":[25983,26063]},{"content":"If the bitmap is a top-down DIB, the pointer points to the first byte of the buffer.","pos":[26064,26148]},{"pos":[26158,26165],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26169,26309],"content":"Using this pointer, along with the value returned by <bpt id=\"p1\">[</bpt>GetPitch<ept id=\"p1\">](#cimage__getpitch)</ept>, you can locate and change individual pixels in an image.","source":"Using this pointer, along with the value returned by [GetPitch](#cimage__getpitch), you can locate and change individual pixels in an image."},{"pos":[26317,26548],"content":"[!NOTE]\n This method supports only DIB section bitmaps; consequently, you access the pixels of a `CImage` object the same way you would the pixels of a DIB section. The returned pointer points to the pixel at the location (0, 0).","leadings":["","> "],"nodes":[{"content":" This method supports only DIB section bitmaps; consequently, you access the pixels of a `CImage` object the same way you would the pixels of a DIB section. The returned pointer points to the pixel at the location (0, 0).","pos":[8,229],"nodes":[{"content":"This method supports only DIB section bitmaps; consequently, you access the pixels of a <ph id=\"ph1\">`CImage`</ph> object the same way you would the pixels of a DIB section.","pos":[1,156],"source":" This method supports only DIB section bitmaps; consequently, you access the pixels of a `CImage` object the same way you would the pixels of a DIB section."},{"content":"The returned pointer points to the pixel at the location (0, 0).","pos":[157,221]}]}]},{"pos":[26558,26603],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__getbpp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::GetBPP","linkify":"<a name=\"cimage__getbpp\"></a>  CImage::GetBPP","source":"<a name=\"cimage__getbpp\"></a>  CImage::GetBPP"},{"content":"Retrieves the bits-per-pixel value.","pos":[26607,26642]},{"pos":[26693,26705],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of bits per pixel.","pos":[26709,26738]},{"pos":[26748,26755],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This value determines the number of bits that define each pixel and the maximum number of colors in the bitmap.","pos":[26759,26870]},{"content":"The bits per pixel is usually 1, 4, 8, 16, 24, or 32.","pos":[26877,26930]},{"content":"See the <bpt id=\"p1\">**</bpt>biBitCount<ept id=\"p1\">**</ept> member of <bpt id=\"p2\">[</bpt>BITMAPINFOHEADER<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd183376)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph> for more information about this value.","pos":[26931,27132],"source":" See the **biBitCount** member of [BITMAPINFOHEADER](http://msdn.microsoft.com/library/windows/desktop/dd183376) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] for more information about this value."},{"pos":[27142,27201],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__getcolortable\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::GetColorTable","linkify":"<a name=\"cimage__getcolortable\"></a>  CImage::GetColorTable","source":"<a name=\"cimage__getcolortable\"></a>  CImage::GetColorTable"},{"content":"Retrieves red, green, blue (RGB) color values from a range of entries in the palette of the DIB section.","pos":[27205,27309]},{"pos":[27427,27437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The color table index of the first entry to retrieve.","pos":[27458,27511]},{"content":"The number of color table entries to retrieve.","pos":[27531,27577]},{"content":"A pointer to the array of <bpt id=\"p1\">[</bpt>RGBQUAD<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162938)</ept> structures to retrieve the color table entries.","pos":[27600,27743],"source":" A pointer to the array of [RGBQUAD](http://msdn.microsoft.com/library/windows/desktop/dd162938) structures to retrieve the color table entries."},{"pos":[27753,27796],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__getdc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::GetDC","linkify":"<a name=\"cimage__getdc\"></a>  CImage::GetDC","source":"<a name=\"cimage__getdc\"></a>  CImage::GetDC"},{"content":"Retrieves the device context that currently has the image selected into it.","pos":[27800,27875]},{"pos":[27925,27937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A handle to a device context.","pos":[27941,27970]},{"pos":[27980,27987],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27991,28084],"content":"For each call to <ph id=\"ph1\">`GetDC`</ph>, you must have a subsequent call to <bpt id=\"p1\">[</bpt>ReleaseDC<ept id=\"p1\">](#cimage__releasedc)</ept>.","source":"For each call to `GetDC`, you must have a subsequent call to [ReleaseDC](#cimage__releasedc)."},{"pos":[28094,28173],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__getexporterfilterstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::GetExporterFilterString","linkify":"<a name=\"cimage__getexporterfilterstring\"></a>  CImage::GetExporterFilterString","source":"<a name=\"cimage__getexporterfilterstring\"></a>  CImage::GetExporterFilterString"},{"content":"Finds image formats available for saving images.","pos":[28177,28225]},{"pos":[28475,28485],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>strExporters<ept id=\"p1\">*</ept>","pos":[28489,28503],"source":"*strExporters*"},{"content":"A reference to a <bpt id=\"p1\">**</bpt>CSimpleString<ept id=\"p1\">**</ept> object.","pos":[28507,28549],"source":" A reference to a **CSimpleString** object."},{"content":"See <bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept> for more information.","pos":[28550,28587],"source":" See **Remarks** for more information."},{"content":"An array of GUIDs, with each element corresponding to one of the file types in the string.","pos":[28614,28704]},{"content":"In the example in <ph id=\"ph1\">`pszAllFilesDescription`</ph> below, <ph id=\"ph2\">`aguidFileTypes`</ph>[0] is <ph id=\"ph3\">`GUID_NULL`</ph> and the remaining array values are the image file formats supported by the current operating system.","pos":[28705,28890],"source":" In the example in `pszAllFilesDescription` below, `aguidFileTypes`[0] is `GUID_NULL` and the remaining array values are the image file formats supported by the current operating system."},{"pos":[28898,29030],"content":"[!NOTE]\n For a complete list of constants, see **Image File Format Constants** in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].","leadings":["","> "],"nodes":[{"content":"For a complete list of constants, see <bpt id=\"p1\">**</bpt>Image File Format Constants<ept id=\"p1\">**</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[9,130],"source":" For a complete list of constants, see **Image File Format Constants** in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."}]},{"content":"If this parameter is not <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the filter string will have one additional filter at the beginning of the list.","pos":[29065,29179],"source":" If this parameter is not **NULL**, the filter string will have one additional filter at the beginning of the list."},{"content":"This filter will have the current value of <ph id=\"ph1\">`pszAllFilesDescription`</ph> for its description, and accepts files of any extension supported by any other exporter in the list.","pos":[29180,29348],"source":" This filter will have the current value of `pszAllFilesDescription` for its description, and accepts files of any extension supported by any other exporter in the list."},{"content":"For example:","pos":[29355,29367]},{"content":"Set of bit flags specifying which file types to exclude from the list.","pos":[29631,29701]},{"content":"Allowable flags are:","pos":[29702,29722]},{"pos":[29730,29773],"content":"<bpt id=\"p1\">**</bpt>excludeGIF<ept id=\"p1\">**</ept> = 0x01   Excludes GIF files.","source":"**excludeGIF** = 0x01   Excludes GIF files."},{"pos":[29781,29841],"content":"<bpt id=\"p1\">**</bpt>excludeBMP<ept id=\"p1\">**</ept> = 0x02   Excludes BMP (Windows Bitmap) files.","source":"**excludeBMP** = 0x02   Excludes BMP (Windows Bitmap) files."},{"pos":[29849,29912],"content":"<bpt id=\"p1\">**</bpt>excludeEMF<ept id=\"p1\">**</ept> = 0x04   Excludes EMF (Enhanced Metafile) files.","source":"**excludeEMF** = 0x04   Excludes EMF (Enhanced Metafile) files."},{"pos":[29920,29982],"content":"<bpt id=\"p1\">**</bpt>excludeWMF<ept id=\"p1\">**</ept> = 0x08   Excludes WMF (Windows Metafile) files.","source":"**excludeWMF** = 0x08   Excludes WMF (Windows Metafile) files."},{"pos":[29990,30035],"content":"<bpt id=\"p1\">**</bpt>excludeJPEG<ept id=\"p1\">**</ept> = 0x10   Excludes JPEG files.","source":"**excludeJPEG** = 0x10   Excludes JPEG files."},{"pos":[30043,30086],"content":"<bpt id=\"p1\">**</bpt>excludePNG<ept id=\"p1\">**</ept> = 0x20   Excludes PNG files.","source":"**excludePNG** = 0x20   Excludes PNG files."},{"pos":[30094,30139],"content":"<bpt id=\"p1\">**</bpt>excludeTIFF<ept id=\"p1\">**</ept> = 0x40   Excludes TIFF files.","source":"**excludeTIFF** = 0x40   Excludes TIFF files."},{"pos":[30147,30206],"content":"<bpt id=\"p1\">**</bpt>excludeIcon<ept id=\"p1\">**</ept> = 0x80   Excludes ICO (Windows Icon) files.","source":"**excludeIcon** = 0x80   Excludes ICO (Windows Icon) files."},{"pos":[30214,30292],"content":"<bpt id=\"p1\">**</bpt>excludeOther<ept id=\"p1\">**</ept> = 0x80000000   Excludes any other file type not listed above.","source":"**excludeOther** = 0x80000000   Excludes any other file type not listed above."},{"pos":[30300,30377],"content":"<bpt id=\"p1\">**</bpt>excludeDefaultLoad<ept id=\"p1\">**</ept> = 0   For load, all file types are included by default","source":"**excludeDefaultLoad** = 0   For load, all file types are included by default"},{"pos":[30385,30557],"content":"<bpt id=\"p1\">**</bpt>excludeDefaultSave<ept id=\"p1\">**</ept><ph id=\"ph1\"> = </ph><bpt id=\"p2\">**</bpt>excludeIcon &amp;#124; excludeEMF &amp;#124; excludeWMF<ept id=\"p2\">**</ept> For saving, these files are excluded by default because they usually have special requirements.","source":"**excludeDefaultSave** = **excludeIcon &#124; excludeEMF &#124; excludeWMF** For saving, these files are excluded by default because they usually have special requirements."},{"pos":[30564,30664],"content":"`chSeparator`  \nThe separator used between the image formats. See **Remarks** for more information.","leadings":[""," "],"nodes":[{"content":"The separator used between the image formats. See **Remarks** for more information.","pos":[16,99],"nodes":[{"content":"The separator used between the image formats.","pos":[0,45]},{"content":"See <bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept> for more information.","pos":[46,83],"source":" See **Remarks** for more information."}]}]},{"pos":[30674,30686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30690,30711],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph>.","source":"A standard `HRESULT`."},{"pos":[30721,30728],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30732,30940],"content":"You can pass the resulting format string to your MFC <bpt id=\"p1\">[</bpt>CFileDialog<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept> object to expose the file extensions of the available image formats in the File Save As dialog box.","source":"You can pass the resulting format string to your MFC [CFileDialog](../../mfc/reference/cfiledialog-class.md) object to expose the file extensions of the available image formats in the File Save As dialog box."},{"pos":[30947,30990],"content":"The parameter <bpt id=\"p1\">*</bpt>strExporter<ept id=\"p1\">*</ept> has the format:","source":"The parameter *strExporter* has the format:"},{"pos":[30997,31119],"content":"file description0&amp;#124;<ph id=\"ph1\">\\*</ph>.ext0&amp;#124;filedescription1&amp;#124;<ph id=\"ph2\">\\*</ph>.ext1&amp;#124;...file description <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>&amp;#124;<ph id=\"ph3\">\\*</ph>.ext <bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept>&amp;#124;&amp;#124;","source":"file description0&#124;\\*.ext0&#124;filedescription1&#124;\\*.ext1&#124;...file description *n*&#124;\\*.ext *n*&#124;&#124;"},{"content":"where '&amp;#124;' is the separator character specified by <ph id=\"ph1\">`chSeparator`</ph>.","pos":[31126,31195],"source":"where '&#124;' is the separator character specified by `chSeparator`."},{"content":"For example:","pos":[31196,31208]},{"content":"Use the default separator '&amp;#124;' if you pass this string to an MFC <ph id=\"ph1\">`CFileDialog`</ph> object.","pos":[31299,31389],"source":"Use the default separator '&#124;' if you pass this string to an MFC `CFileDialog` object."},{"content":"Use the null separator '\\0' if you pass this string to a common File Save dialog box.","pos":[31390,31475]},{"pos":[31485,31536],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__getheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::GetHeight","linkify":"<a name=\"cimage__getheight\"></a>  CImage::GetHeight","source":"<a name=\"cimage__getheight\"></a>  CImage::GetHeight"},{"content":"Retrieves the height, in pixels, of an image.","pos":[31540,31585]},{"pos":[31639,31651],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height, in pixels, of an image.","pos":[31655,31690]},{"pos":[31700,31779],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__getimporterfilterstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::GetImporterFilterString","linkify":"<a name=\"cimage__getimporterfilterstring\"></a>  CImage::GetImporterFilterString","source":"<a name=\"cimage__getimporterfilterstring\"></a>  CImage::GetImporterFilterString"},{"content":"Finds image formats available for loading images.","pos":[31783,31832]},{"pos":[32082,32092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>strImporters<ept id=\"p1\">*</ept>","pos":[32096,32110],"source":"*strImporters*"},{"content":"A reference to a <bpt id=\"p1\">**</bpt>CSimpleString<ept id=\"p1\">**</ept> object.","pos":[32114,32156],"source":" A reference to a **CSimpleString** object."},{"content":"See <bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept> for more information.","pos":[32157,32194],"source":" See **Remarks** for more information."},{"content":"An array of GUIDs, with each element corresponding to one of the file types in the string.","pos":[32221,32311]},{"content":"In the example in <ph id=\"ph1\">`pszAllFilesDescription`</ph> below, <ph id=\"ph2\">`aguidFileTypes`</ph>[0] is <ph id=\"ph3\">`GUID_NULL`</ph> with the remaining array values are the image file formats supported by the current operating system.","pos":[32312,32498],"source":" In the example in `pszAllFilesDescription` below, `aguidFileTypes`[0] is `GUID_NULL` with the remaining array values are the image file formats supported by the current operating system."},{"pos":[32506,32638],"content":"[!NOTE]\n For a complete list of constants, see **Image File Format Constants** in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].","leadings":["","> "],"nodes":[{"content":"For a complete list of constants, see <bpt id=\"p1\">**</bpt>Image File Format Constants<ept id=\"p1\">**</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[9,130],"source":" For a complete list of constants, see **Image File Format Constants** in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."}]},{"content":"If this parameter is not <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the filter string will have one additional filter at the beginning of the list.","pos":[32673,32787],"source":" If this parameter is not **NULL**, the filter string will have one additional filter at the beginning of the list."},{"content":"This filter will have the current value of <ph id=\"ph1\">`pszAllFilesDescription`</ph> for its description, and accepts files of any extension supported by any other exporter in the list.","pos":[32788,32956],"source":" This filter will have the current value of `pszAllFilesDescription` for its description, and accepts files of any extension supported by any other exporter in the list."},{"content":"For example:","pos":[32963,32975]},{"content":"Set of bit flags specifying which file types to exclude from the list.","pos":[33239,33309]},{"content":"Allowable flags are:","pos":[33310,33330]},{"pos":[33338,33381],"content":"<bpt id=\"p1\">**</bpt>excludeGIF<ept id=\"p1\">**</ept> = 0x01   Excludes GIF files.","source":"**excludeGIF** = 0x01   Excludes GIF files."},{"pos":[33389,33449],"content":"<bpt id=\"p1\">**</bpt>excludeBMP<ept id=\"p1\">**</ept> = 0x02   Excludes BMP (Windows Bitmap) files.","source":"**excludeBMP** = 0x02   Excludes BMP (Windows Bitmap) files."},{"pos":[33457,33520],"content":"<bpt id=\"p1\">**</bpt>excludeEMF<ept id=\"p1\">**</ept> = 0x04   Excludes EMF (Enhanced Metafile) files.","source":"**excludeEMF** = 0x04   Excludes EMF (Enhanced Metafile) files."},{"pos":[33528,33590],"content":"<bpt id=\"p1\">**</bpt>excludeWMF<ept id=\"p1\">**</ept> = 0x08   Excludes WMF (Windows Metafile) files.","source":"**excludeWMF** = 0x08   Excludes WMF (Windows Metafile) files."},{"pos":[33598,33643],"content":"<bpt id=\"p1\">**</bpt>excludeJPEG<ept id=\"p1\">**</ept> = 0x10   Excludes JPEG files.","source":"**excludeJPEG** = 0x10   Excludes JPEG files."},{"pos":[33651,33694],"content":"<bpt id=\"p1\">**</bpt>excludePNG<ept id=\"p1\">**</ept> = 0x20   Excludes PNG files.","source":"**excludePNG** = 0x20   Excludes PNG files."},{"pos":[33702,33747],"content":"<bpt id=\"p1\">**</bpt>excludeTIFF<ept id=\"p1\">**</ept> = 0x40   Excludes TIFF files.","source":"**excludeTIFF** = 0x40   Excludes TIFF files."},{"pos":[33755,33814],"content":"<bpt id=\"p1\">**</bpt>excludeIcon<ept id=\"p1\">**</ept> = 0x80   Excludes ICO (Windows Icon) files.","source":"**excludeIcon** = 0x80   Excludes ICO (Windows Icon) files."},{"pos":[33822,33900],"content":"<bpt id=\"p1\">**</bpt>excludeOther<ept id=\"p1\">**</ept> = 0x80000000   Excludes any other file type not listed above.","source":"**excludeOther** = 0x80000000   Excludes any other file type not listed above."},{"pos":[33908,33985],"content":"<bpt id=\"p1\">**</bpt>excludeDefaultLoad<ept id=\"p1\">**</ept> = 0   For load, all file types are included by default","source":"**excludeDefaultLoad** = 0   For load, all file types are included by default"},{"pos":[33993,34165],"content":"<bpt id=\"p1\">**</bpt>excludeDefaultSave<ept id=\"p1\">**</ept><ph id=\"ph1\"> = </ph><bpt id=\"p2\">**</bpt>excludeIcon &amp;#124; excludeEMF &amp;#124; excludeWMF<ept id=\"p2\">**</ept> For saving, these files are excluded by default because they usually have special requirements.","source":"**excludeDefaultSave** = **excludeIcon &#124; excludeEMF &#124; excludeWMF** For saving, these files are excluded by default because they usually have special requirements."},{"pos":[34172,34272],"content":"`chSeparator`  \nThe separator used between the image formats. See **Remarks** for more information.","leadings":[""," "],"nodes":[{"content":"The separator used between the image formats. See **Remarks** for more information.","pos":[16,99],"nodes":[{"content":"The separator used between the image formats.","pos":[0,45]},{"content":"See <bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept> for more information.","pos":[46,83],"source":" See **Remarks** for more information."}]}]},{"pos":[34282,34289],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[34293,34502],"content":"You can pass the resulting format string to your MFC <bpt id=\"p1\">[</bpt>CFileDialog<ept id=\"p1\">](../../mfc/reference/cfiledialog-class.md)</ept> object to expose the file extensions of the available image formats in the <bpt id=\"p2\">**</bpt>File Open<ept id=\"p2\">**</ept> dialog box.","source":"You can pass the resulting format string to your MFC [CFileDialog](../../mfc/reference/cfiledialog-class.md) object to expose the file extensions of the available image formats in the **File Open** dialog box."},{"pos":[34509,34552],"content":"The parameter <bpt id=\"p1\">*</bpt>strImporter<ept id=\"p1\">*</ept> has the format:","source":"The parameter *strImporter* has the format:"},{"pos":[34559,34681],"content":"file description0&amp;#124;<ph id=\"ph1\">\\*</ph>.ext0&amp;#124;filedescription1&amp;#124;<ph id=\"ph2\">\\*</ph>.ext1&amp;#124;...file description <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>&amp;#124;<ph id=\"ph3\">\\*</ph>.ext <bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept>&amp;#124;&amp;#124;","source":"file description0&#124;\\*.ext0&#124;filedescription1&#124;\\*.ext1&#124;...file description *n*&#124;\\*.ext *n*&#124;&#124;"},{"content":"where '&amp;#124;' is the separator character specified by <ph id=\"ph1\">`chSeparator`</ph>.","pos":[34688,34757],"source":"where '&#124;' is the separator character specified by `chSeparator`."},{"content":"For example:","pos":[34758,34770]},{"content":"Use the default separator '&amp;#124;' if you pass this string to an MFC <ph id=\"ph1\">`CFileDialog`</ph> object.","pos":[34861,34951],"source":"Use the default separator '&#124;' if you pass this string to an MFC `CFileDialog` object."},{"content":"Use the null separator '\\0' if you pass this string to a common <bpt id=\"p1\">**</bpt>File Open<ept id=\"p1\">**</ept> dialog box.","pos":[34952,35041],"source":" Use the null separator '\\0' if you pass this string to a common **File Open** dialog box."},{"pos":[35051,35130],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__getmaxcolortableentries\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::GetMaxColorTableEntries","linkify":"<a name=\"cimage__getmaxcolortableentries\"></a>  CImage::GetMaxColorTableEntries","source":"<a name=\"cimage__getmaxcolortableentries\"></a>  CImage::GetMaxColorTableEntries"},{"content":"Retrieves the maximum number of entries in the color table.","pos":[35134,35193]},{"pos":[35261,35273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of entries in the color table.","pos":[35277,35318]},{"pos":[35328,35335],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method supports only DIB section bitmaps.","pos":[35339,35385]},{"pos":[35395,35444],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__getpitch\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::GetPitch","linkify":"<a name=\"cimage__getpitch\"></a>  CImage::GetPitch","source":"<a name=\"cimage__getpitch\"></a>  CImage::GetPitch"},{"content":"Retrieves the pitch of an image.","pos":[35448,35480]},{"pos":[35533,35545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The pitch of the image.","pos":[35549,35572]},{"content":"If the return value is negative, the bitmap is a bottom-up DIB and its origin is the lower left corner.","pos":[35573,35676]},{"content":"If the return value is positive, the bitmap is a top-down DIB and its origin is the upper left corner.","pos":[35677,35779]},{"pos":[35789,35796],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The pitch is the distance, in bytes, between two memory addresses that represent the beginning of one bitmap line and the beginning of the next bitmap line.","pos":[35800,35956]},{"content":"Because pitch is measured in bytes, the pitch of an image helps you to determine the pixel format.","pos":[35957,36055]},{"content":"The pitch can also include additional memory, reserved for the bitmap.","pos":[36056,36126]},{"pos":[36133,36219],"content":"Use <ph id=\"ph1\">`GetPitch`</ph> with <bpt id=\"p1\">[</bpt>GetBits<ept id=\"p1\">](#cimage__getbits)</ept> to find individual pixels of an image.","source":"Use `GetPitch` with [GetBits](#cimage__getbits) to find individual pixels of an image."},{"pos":[36227,36284],"content":"[!NOTE]\n This method supports only DIB section bitmaps.","leadings":["","> "],"nodes":[{"content":"This method supports only DIB section bitmaps.","pos":[9,55]}]},{"pos":[36294,36343],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__getpixel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::GetPixel","linkify":"<a name=\"cimage__getpixel\"></a>  CImage::GetPixel","source":"<a name=\"cimage__getpixel\"></a>  CImage::GetPixel"},{"pos":[36347,36421],"content":"Retrieves the color of the pixel at the location specified by <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept>.","source":"Retrieves the color of the pixel at the location specified by *x* and *y*."},{"pos":[36490,36500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[36504,36507],"source":"*x*"},{"content":"The x-coordinate of the pixel.","pos":[36511,36541]},{"content":"<bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>","pos":[36548,36551],"source":"*y*"},{"content":"The y-coordinate of the pixel.","pos":[36555,36585]},{"pos":[36595,36607],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The red, green, blue (RGB) value of the pixel.","pos":[36611,36657]},{"content":"If the pixel is outside of the current clipping region, the return value is <bpt id=\"p1\">**</bpt>CLR_INVALID<ept id=\"p1\">**</ept>.","pos":[36658,36750],"source":" If the pixel is outside of the current clipping region, the return value is **CLR_INVALID**."},{"pos":[36760,36823],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__getpixeladdress\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::GetPixelAddress","linkify":"<a name=\"cimage__getpixeladdress\"></a>  CImage::GetPixelAddress","source":"<a name=\"cimage__getpixeladdress\"></a>  CImage::GetPixelAddress"},{"content":"Retrieves the exact address of a pixel.","pos":[36827,36866]},{"pos":[36933,36943],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[36947,36950],"source":"*x*"},{"content":"The x-coordinate of the pixel.","pos":[36954,36984]},{"content":"<bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>","pos":[36991,36994],"source":"*y*"},{"content":"The y-coordinate of the pixel.","pos":[36998,37028]},{"pos":[37038,37045],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The address is determined according to the coordinates of a pixel, the pitch of the bitmap, and the bits per pixel.","pos":[37049,37164]},{"content":"For formats that have less than 8 bits per pixel, this method returns the address of the byte containing the pixel.","pos":[37171,37286]},{"content":"For example, if your image format has 4 bits per pixel, <ph id=\"ph1\">`GetPixelAddress`</ph> returns the address of the first pixel in the byte, and you must calculate for 2 pixels per byte.","pos":[37287,37458],"source":" For example, if your image format has 4 bits per pixel, `GetPixelAddress` returns the address of the first pixel in the byte, and you must calculate for 2 pixels per byte."},{"pos":[37466,37523],"content":"[!NOTE]\n This method supports only DIB section bitmaps.","leadings":["","> "],"nodes":[{"content":"This method supports only DIB section bitmaps.","pos":[9,55]}]},{"pos":[37533,37604],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__gettransparentcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::GetTransparentColor","linkify":"<a name=\"cimage__gettransparentcolor\"></a>  CImage::GetTransparentColor","source":"<a name=\"cimage__gettransparentcolor\"></a>  CImage::GetTransparentColor"},{"content":"Retrieves the indexed location of the transparent color in the color palette.","pos":[37608,37685]},{"pos":[37750,37762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the transparent color.","pos":[37766,37801]},{"pos":[37811,37860],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__getwidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::GetWidth","linkify":"<a name=\"cimage__getwidth\"></a>  CImage::GetWidth","source":"<a name=\"cimage__getwidth\"></a>  CImage::GetWidth"},{"content":"Retrieves the width, in pixels, of an image.","pos":[37864,37908]},{"pos":[37961,37973],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the bitmap, in pixels.","pos":[37977,38012]},{"pos":[38022,38079],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__isdibsection\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::IsDIBSection","linkify":"<a name=\"cimage__isdibsection\"></a>  CImage::IsDIBSection","source":"<a name=\"cimage__isdibsection\"></a>  CImage::IsDIBSection"},{"content":"Determines if the attached bitmap is a DIB section.","pos":[38083,38134]},{"pos":[38192,38204],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the attached bitmap is a DIB section.","pos":[38208,38257],"source":"**true** if the attached bitmap is a DIB section."},{"content":"Otherwise <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","pos":[38258,38278],"source":" Otherwise **false**."},{"pos":[38288,38295],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38299,38421],"content":"If the bitmap is not a DIB section, you cannot use the following <ph id=\"ph1\">`CImage`</ph> methods, which support only DIB section bitmaps:","source":"If the bitmap is not a DIB section, you cannot use the following `CImage` methods, which support only DIB section bitmaps:"},{"pos":[38429,38456],"content":"<bpt id=\"p1\">[</bpt>GetBits<ept id=\"p1\">](#cimage__getbits)</ept>","source":"[GetBits](#cimage__getbits)"},{"pos":[38464,38503],"content":"<bpt id=\"p1\">[</bpt>GetColorTable<ept id=\"p1\">](#cimage__getcolortable)</ept>","source":"[GetColorTable](#cimage__getcolortable)"},{"pos":[38511,38570],"content":"<bpt id=\"p1\">[</bpt>GetMaxColorTableEntries<ept id=\"p1\">](#cimage__getmaxcolortableentries)</ept>","source":"[GetMaxColorTableEntries](#cimage__getmaxcolortableentries)"},{"pos":[38578,38607],"content":"<bpt id=\"p1\">[</bpt>GetPitch<ept id=\"p1\">](#cimage__getpitch)</ept>","source":"[GetPitch](#cimage__getpitch)"},{"pos":[38615,38658],"content":"<bpt id=\"p1\">[</bpt>GetPixelAddress<ept id=\"p1\">](#cimage__getpixeladdress)</ept>","source":"[GetPixelAddress](#cimage__getpixeladdress)"},{"pos":[38666,38697],"content":"<bpt id=\"p1\">[</bpt>IsIndexed<ept id=\"p1\">](#cimage__isindexed)</ept>","source":"[IsIndexed](#cimage__isindexed)"},{"pos":[38705,38744],"content":"<bpt id=\"p1\">[</bpt>SetColorTable<ept id=\"p1\">](#cimage__setcolortable)</ept>","source":"[SetColorTable](#cimage__setcolortable)"},{"pos":[38754,38805],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__isindexed\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::IsIndexed","linkify":"<a name=\"cimage__isindexed\"></a>  CImage::IsIndexed","source":"<a name=\"cimage__isindexed\"></a>  CImage::IsIndexed"},{"content":"Determines whether a bitmap's pixels are mapped to a color palette.","pos":[38809,38876]},{"pos":[38931,38943],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38947,38988],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if indexed; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if indexed; otherwise **false**."},{"pos":[38998,39005],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39009,39087],"content":"This method returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> only if the bitmap is 8-bit (256 colors) or less.","source":"This method returns **true** only if the bitmap is 8-bit (256 colors) or less."},{"pos":[39095,39152],"content":"[!NOTE]\n This method supports only DIB section bitmaps.","leadings":["","> "],"nodes":[{"content":"This method supports only DIB section bitmaps.","pos":[9,55]}]},{"pos":[39162,39207],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__isnull\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::IsNull","linkify":"<a name=\"cimage__isnull\"></a>  CImage::IsNull","source":"<a name=\"cimage__isnull\"></a>  CImage::IsNull"},{"content":"Determines if a bitmap is currently loaded.","pos":[39211,39254]},{"pos":[39306,39313],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39317,39403],"content":"This method returns <bpt id=\"p1\">**</bpt>True<ept id=\"p1\">**</ept> if a bitmap is not currently loaded; otherwise <bpt id=\"p2\">**</bpt>False<ept id=\"p2\">**</ept>.","source":"This method returns **True** if a bitmap is not currently loaded; otherwise **False**."},{"pos":[39413,39492],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__istransparencysupported\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::IsTransparencySupported","linkify":"<a name=\"cimage__istransparencysupported\"></a>  CImage::IsTransparencySupported","source":"<a name=\"cimage__istransparencysupported\"></a>  CImage::IsTransparencySupported"},{"content":"Indicates whether the application supports transparent bitmaps and was compiled for Windows 2000 or later.","pos":[39496,39602]},{"pos":[39672,39684],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the current platform supports transparency.","pos":[39688,39742]},{"content":"Otherwise 0.","pos":[39743,39755]},{"pos":[39765,39772],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[39776,39983],"content":"If the return value is nonzero, and transparency is supported, a call to <bpt id=\"p1\">[</bpt>AlphaBlend<ept id=\"p1\">](#cimage__alphablend)</ept>, <bpt id=\"p2\">[</bpt>TransparentBlt<ept id=\"p2\">](#cimage__transparentblt)</ept>, or <bpt id=\"p3\">[</bpt>Draw<ept id=\"p3\">](#cimage__draw)</ept> will handle transparent colors.","source":"If the return value is nonzero, and transparency is supported, a call to [AlphaBlend](#cimage__alphablend), [TransparentBlt](#cimage__transparentblt), or [Draw](#cimage__draw) will handle transparent colors."},{"content":"If the application is compiled for use with operating systems before Windows 2000 or Windows 98, this method will always return 0, even on newer operating systems.","pos":[39990,40153]},{"pos":[40164,40205],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__load\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::Load","linkify":"<a name=\"cimage__load\"></a>  CImage::Load","source":"<a name=\"cimage__load\"></a>  CImage::Load"},{"content":"Loads an image.","pos":[40209,40224]},{"pos":[40331,40341],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a string containing the name of the image file to load.","pos":[40362,40430]},{"content":"A pointer to a stream containing the name of the image file to load.","pos":[40450,40518]},{"pos":[40528,40540],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40544,40565],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph>.","source":"A standard `HRESULT`."},{"pos":[40575,40582],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40586,40642],"content":"Loads the image specified by <bpt id=\"p1\">*</bpt>pszFileName<ept id=\"p1\">*</ept> or <ph id=\"ph1\">`pStream`</ph>.","source":"Loads the image specified by *pszFileName* or `pStream`."},{"content":"Valid image types are BMP, GIF, JPEG, PNG, and TIFF.","pos":[40649,40701]},{"pos":[40711,40776],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__loadfromresource\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::LoadFromResource","linkify":"<a name=\"cimage__loadfromresource\"></a>  CImage::LoadFromResource","source":"<a name=\"cimage__loadfromresource\"></a>  CImage::LoadFromResource"},{"pos":[40780,40820],"content":"Loads an image from a <ph id=\"ph1\">`BITMAP`</ph> resource.","source":"Loads an image from a `BITMAP` resource."},{"pos":[40999,41009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Handle to an instance of the module that contains the image to be loaded.","pos":[41028,41101]},{"content":"A pointer to the string containing the name of the resource containing the image to load.","pos":[41129,41218]},{"content":"The ID of the resource to load.","pos":[41242,41273]},{"pos":[41283,41290],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41294,41332],"content":"The resource must be of type <ph id=\"ph1\">`BITMAP`</ph>.","source":"The resource must be of type `BITMAP`."},{"pos":[41342,41389],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__maskblt\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::MaskBlt","linkify":"<a name=\"cimage__maskblt\"></a>  CImage::MaskBlt","source":"<a name=\"cimage__maskblt\"></a>  CImage::MaskBlt"},{"content":"Combines the color data for the source and destination bitmaps using the specified mask and raster operation.","pos":[41393,41502]},{"pos":[42152,42162],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The handle to the module whose executable contains the resource.","pos":[42179,42243]},{"content":"The x-coordinate, in logical units, of the upper left corner of the destination rectangle.","pos":[42261,42351]},{"content":"The y-coordinate, in logical units, of the upper left corner of the destination rectangle.","pos":[42369,42459]},{"content":"The width, in logical units, of the destination rectangle and source bitmap.","pos":[42482,42558]},{"content":"The height, in logical units, of the destination rectangle and source bitmap.","pos":[42582,42659]},{"content":"The logical x-coordinate of the upper left corner of the source bitmap.","pos":[42676,42747]},{"content":"The logical y-coordinate of the upper left corner of the source bitmap.","pos":[42764,42835]},{"content":"Handle to the monochrome mask bitmap combined with the color bitmap in the source device context.","pos":[42855,42952]},{"content":"The horizontal pixel offset for the mask bitmap specified by the <ph id=\"ph1\">`hbmMask`</ph> parameter.","pos":[42970,43055],"source":" The horizontal pixel offset for the mask bitmap specified by the `hbmMask` parameter."},{"content":"The vertical pixel offset for the mask bitmap specified by the <ph id=\"ph1\">`hbmMask`</ph> parameter.","pos":[43073,43156],"source":" The vertical pixel offset for the mask bitmap specified by the `hbmMask` parameter."},{"content":"Specifies both foreground and background ternary raster operation codes that the method uses to control the combination of source and destination data.","pos":[43174,43325]},{"content":"The background raster operation code is stored in the high-order byte of the high-order word of this value; the foreground raster operation code is stored in the low-order byte of the high-order word of this value; the low-order word of this value is ignored, and should be zero.","pos":[43326,43605]},{"content":"For a discussion of foreground and background in the context of this method, see <ph id=\"ph1\">`MaskBlt`</ph> in the <ph id=\"ph2\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[43606,43748],"source":" For a discussion of foreground and background in the context of this method, see `MaskBlt` in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"For a list of common raster operation codes, see <ph id=\"ph1\">`BitBlt`</ph> in the <ph id=\"ph2\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[43749,43858],"source":" For a list of common raster operation codes, see `BitBlt` in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"content":"A reference to a <ph id=\"ph1\">`RECT`</ph> structure, identifying the destination.","pos":[43879,43942],"source":" A reference to a `RECT` structure, identifying the destination."},{"content":"A <ph id=\"ph1\">`POINT`</ph> structure indicating the upper left corner of the source rectangle.","pos":[43963,44040],"source":" A `POINT` structure indicating the upper left corner of the source rectangle."},{"content":"A <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> structure indicating the upper left corner of the mask bitmap.","pos":[44062,44136],"source":" A **POINT** structure indicating the upper left corner of the mask bitmap."},{"content":"A reference to a <bpt id=\"p1\">**</bpt>POINT<ept id=\"p1\">**</ept> structure that identifies the upper left corner of the destination rectangle, in logical units.","pos":[44158,44280],"source":" A reference to a **POINT** structure that identifies the upper left corner of the destination rectangle, in logical units."},{"pos":[44290,44302],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful, otherwise 0.","pos":[44306,44341]},{"pos":[44351,44358],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method applies to Windows NT, versions 4.0 and later only.","pos":[44362,44425]},{"pos":[44435,44500],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__operator_hbitmap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::operator HBITMAP","linkify":"<a name=\"cimage__operator_hbitmap\"></a>  CImage::operator HBITMAP","source":"<a name=\"cimage__operator_hbitmap\"></a>  CImage::operator HBITMAP"},{"content":"Use this operator to get the attached Windows GDI handle of the <ph id=\"ph1\">`CImage`</ph> object.","pos":[44504,44584],"source":"Use this operator to get the attached Windows GDI handle of the `CImage` object."},{"content":"This operator is a casting operator, which supports direct use of an <ph id=\"ph1\">`HBITMAP`</ph> object.","pos":[44585,44671],"source":" This operator is a casting operator, which supports direct use of an `HBITMAP` object."},{"pos":[44681,44726],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__plgblt\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::PlgBlt","linkify":"<a name=\"cimage__plgblt\"></a>  CImage::PlgBlt","source":"<a name=\"cimage__plgblt\"></a>  CImage::PlgBlt"},{"content":"Performs a bit-block transfer from a rectangle in a source device context into a parallelogram in a destination device context.","pos":[44730,44857]},{"pos":[45341,45351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A handle to the destination device context.","pos":[45368,45411]},{"content":"<bpt id=\"p1\">*</bpt>pPoints<ept id=\"p1\">*</ept>","pos":[45418,45427],"source":"*pPoints*"},{"content":"A pointer to an array of three points in logical space that identify three corners of the destination parallelogram.","pos":[45431,45547]},{"content":"The upper left corner of the source rectangle is mapped to the first point in this array, the upper-right corner to the second point in this array, and the lower left corner to the third point.","pos":[45548,45741]},{"content":"The lower-right corner of the source rectangle is mapped to the implicit fourth point in the parallelogram.","pos":[45742,45849]},{"content":"A handle to an optional monochrome bitmap that is used to mask the colors of the source rectangle.","pos":[45869,45967]},{"content":"The x-coordinate, in logical units, of the upper left corner of the source rectangle.","pos":[45984,46069]},{"content":"The y-coordinate, in logical units, of the upper left corner of the source rectangle.","pos":[46086,46171]},{"content":"The width, in logical units, of the source rectangle.","pos":[46193,46246]},{"content":"The height, in logical units, of the source rectangle.","pos":[46269,46323]},{"content":"The x-coordinate of the upper left corner of the monochrome bitmap.","pos":[46341,46408]},{"content":"The y-coordinate of the upper left corner of the monochrome bitmap.","pos":[46426,46493]},{"content":"A reference to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure specifying the coordinates of the source rectangle.","pos":[46513,46658],"source":" A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure specifying the coordinates of the source rectangle."},{"content":"A <bpt id=\"p1\">[</bpt>POINT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> structure indicating the upper left corner of the mask bitmap.","pos":[46680,46812],"source":" A [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure indicating the upper left corner of the mask bitmap."},{"pos":[46822,46834],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful, otherwise 0.","pos":[46838,46873]},{"pos":[46883,46890],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[46894,47030],"content":"If <ph id=\"ph1\">`hbmMask`</ph> identifies a valid monochrome bitmap, <bpt id=\"p1\">**</bpt>PlgBit<ept id=\"p1\">**</ept> uses this bitmap to mask the bits of color data from the source rectangle.","source":"If `hbmMask` identifies a valid monochrome bitmap, **PlgBit** uses this bitmap to mask the bits of color data from the source rectangle."},{"content":"This method applies to Windows NT, versions 4.0 and later only.","pos":[47037,47100]},{"content":"See <bpt id=\"p1\">[</bpt>PlgBlt<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162804)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph> for more detailed information.","pos":[47101,47255],"source":" See [PlgBlt](http://msdn.microsoft.com/library/windows/desktop/dd162804) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] for more detailed information."},{"pos":[47265,47316],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__releasedc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::ReleaseDC","linkify":"<a name=\"cimage__releasedc\"></a>  CImage::ReleaseDC","source":"<a name=\"cimage__releasedc\"></a>  CImage::ReleaseDC"},{"content":"Releases the device context.","pos":[47320,47348]},{"pos":[47403,47410],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[47414,47554],"content":"Because only one bitmap can be selected into a device context at a time, you must call <ph id=\"ph1\">`ReleaseDC`</ph> for each call to <bpt id=\"p1\">[</bpt>GetDC<ept id=\"p1\">](#cimage__getdc)</ept>.","source":"Because only one bitmap can be selected into a device context at a time, you must call `ReleaseDC` for each call to [GetDC](#cimage__getdc)."},{"pos":[47564,47625],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__releasegdiplus\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::ReleaseGDIPlus","linkify":"<a name=\"cimage__releasegdiplus\"></a>  CImage::ReleaseGDIPlus","source":"<a name=\"cimage__releasegdiplus\"></a>  CImage::ReleaseGDIPlus"},{"content":"Releases resources used by GDI+.","pos":[47629,47661]},{"pos":[47715,47722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method must be called to free resources allocated by a global <ph id=\"ph1\">`CImage`</ph> object.","pos":[47726,47809],"source":"This method must be called to free resources allocated by a global `CImage` object."},{"content":"See <bpt id=\"p1\">[</bpt>CImage::CImage<ept id=\"p1\">](#cimage__cimage)</ept>.","pos":[47810,47848],"source":" See [CImage::CImage](#cimage__cimage)."},{"pos":[47858,47899],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__save\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::Save","linkify":"<a name=\"cimage__save\"></a>  CImage::Save","source":"<a name=\"cimage__save\"></a>  CImage::Save"},{"content":"Saves an image to the specified stream or file on disk.","pos":[47903,47958]},{"pos":[48140,48150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a COM IStream object containing the file image data.","pos":[48167,48232]},{"content":"<bpt id=\"p1\">*</bpt>pszFileName<ept id=\"p1\">*</ept>","pos":[48239,48252],"source":"*pszFileName*"},{"content":"A pointer to the file name for the image.","pos":[48256,48297]},{"content":"The file type to save the image as.","pos":[48322,48357]},{"content":"Can be one of the following:","pos":[48358,48386]},{"pos":[48394,48442],"content":"<bpt id=\"p1\">**</bpt>ImageFormatBMP<ept id=\"p1\">**</ept> An uncompressed bitmap image.","source":"**ImageFormatBMP** An uncompressed bitmap image."},{"pos":[48450,48519],"content":"<bpt id=\"p1\">**</bpt>ImageFormatPNG<ept id=\"p1\">**</ept> A Portable Network Graphic (PNG) compressed image.","source":"**ImageFormatPNG** A Portable Network Graphic (PNG) compressed image."},{"pos":[48527,48571],"content":"<bpt id=\"p1\">**</bpt>ImageFormatJPEG<ept id=\"p1\">**</ept> A JPEG compressed image.","source":"**ImageFormatJPEG** A JPEG compressed image."},{"pos":[48579,48621],"content":"<bpt id=\"p1\">**</bpt>ImageFormatGIF<ept id=\"p1\">**</ept> A GIF compressed image.","source":"**ImageFormatGIF** A GIF compressed image."},{"pos":[48629,48761],"content":"[!NOTE]\n For a complete list of constants, see **Image File Format Constants** in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].","leadings":["","> "],"nodes":[{"content":"For a complete list of constants, see <bpt id=\"p1\">**</bpt>Image File Format Constants<ept id=\"p1\">**</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","pos":[9,130],"source":" For a complete list of constants, see **Image File Format Constants** in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."}]},{"pos":[48771,48783],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48787,48808],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph>.","source":"A standard `HRESULT`."},{"pos":[48818,48825],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this function to save the image using a specified name and type.","pos":[48829,48898]},{"content":"If the <ph id=\"ph1\">`guidFileType`</ph> parameter is not included, the file name's file extension will be used to determine the image format.","pos":[48899,49022],"source":" If the `guidFileType` parameter is not included, the file name's file extension will be used to determine the image format."},{"content":"If no extension is provided, the image will be saved in BMP format.","pos":[49023,49090]},{"pos":[49100,49159],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__setcolortable\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::SetColorTable","linkify":"<a name=\"cimage__setcolortable\"></a>  CImage::SetColorTable","source":"<a name=\"cimage__setcolortable\"></a>  CImage::SetColorTable"},{"content":"Sets the red, green, blue (RGB) color values for a range of entries in the palette of the DIB section.","pos":[49163,49265]},{"pos":[49383,49393],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The color table index of the first entry to set.","pos":[49414,49462]},{"content":"The number of color table entries to set.","pos":[49482,49523]},{"content":"A pointer to the array of <bpt id=\"p1\">[</bpt>RGBQUAD<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162938)</ept> structures to set the color table entries.","pos":[49546,49684],"source":" A pointer to the array of [RGBQUAD](http://msdn.microsoft.com/library/windows/desktop/dd162938) structures to set the color table entries."},{"pos":[49694,49701],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method supports only DIB section bitmaps.","pos":[49705,49751]},{"pos":[49761,49810],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__setpixel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::SetPixel","linkify":"<a name=\"cimage__setpixel\"></a>  CImage::SetPixel","source":"<a name=\"cimage__setpixel\"></a>  CImage::SetPixel"},{"content":"Sets the color of a pixel at a given location in the bitmap.","pos":[49814,49874]},{"pos":[49958,49968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[49972,49975],"source":"*x*"},{"content":"The horizontal location of the pixel to set.","pos":[49979,50023]},{"content":"<bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>","pos":[50030,50033],"source":"*y*"},{"content":"The vertical location of the pixel to set.","pos":[50037,50079]},{"content":"The color to which you set the pixel.","pos":[50097,50134]},{"pos":[50144,50151],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method fails if the pixel coordinates lie outside of the selected clipping region.","pos":[50155,50242]},{"pos":[50252,50315],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__setpixelindexed\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::SetPixelIndexed","linkify":"<a name=\"cimage__setpixelindexed\"></a>  CImage::SetPixelIndexed","source":"<a name=\"cimage__setpixelindexed\"></a>  CImage::SetPixelIndexed"},{"pos":[50319,50394],"content":"Sets the pixel color to the color located at <ph id=\"ph1\">`iIndex`</ph> in the color palette.","source":"Sets the pixel color to the color located at `iIndex` in the color palette."},{"pos":[50481,50491],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[50495,50498],"source":"*x*"},{"content":"The horizontal location of the pixel to set.","pos":[50502,50546]},{"content":"<bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>","pos":[50553,50556],"source":"*y*"},{"content":"The vertical location of the pixel to set.","pos":[50560,50602]},{"content":"The index of a color in the color palette.","pos":[50621,50663]},{"pos":[50673,50728],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__setpixelrgb\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::SetPixelRGB","linkify":"<a name=\"cimage__setpixelrgb\"></a>  CImage::SetPixelRGB","source":"<a name=\"cimage__setpixelrgb\"></a>  CImage::SetPixelRGB"},{"pos":[50732,50869],"content":"Sets the pixel at the locations specified by <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> to the colors indicated by <bpt id=\"p3\">*</bpt>r<ept id=\"p3\">*</ept>, <bpt id=\"p4\">*</bpt>g<ept id=\"p4\">*</ept>, and <bpt id=\"p5\">*</bpt>b<ept id=\"p5\">*</ept>, in a red, green, blue (RGB) image.","source":"Sets the pixel at the locations specified by *x* and *y* to the colors indicated by *r*, *g*, and *b*, in a red, green, blue (RGB) image."},{"pos":[50972,50982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[50986,50989],"source":"*x*"},{"content":"The horizontal location of the pixel to set.","pos":[50993,51037]},{"content":"<bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>","pos":[51044,51047],"source":"*y*"},{"content":"The vertical location of the pixel to set.","pos":[51051,51093]},{"content":"<bpt id=\"p1\">*</bpt>r<ept id=\"p1\">*</ept>","pos":[51100,51103],"source":"*r*"},{"content":"The intensity of the red color.","pos":[51107,51138]},{"content":"<bpt id=\"p1\">*</bpt>g<ept id=\"p1\">*</ept>","pos":[51145,51148],"source":"*g*"},{"content":"The intensity of the green color.","pos":[51152,51185]},{"content":"<bpt id=\"p1\">*</bpt>b<ept id=\"p1\">*</ept>","pos":[51192,51195],"source":"*b*"},{"content":"The intensity of the blue color.","pos":[51199,51231]},{"pos":[51241,51248],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The red, green, and blue parameters are each represented by a number between 0 and 255.","pos":[51252,51339]},{"content":"If you set all three parameters to zero, the combined resulting color is black.","pos":[51340,51419]},{"content":"If you set all three parameters to 255, the combined resulting color is white.","pos":[51420,51498]},{"pos":[51508,51579],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__settransparentcolor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::SetTransparentColor","linkify":"<a name=\"cimage__settransparentcolor\"></a>  CImage::SetTransparentColor","source":"<a name=\"cimage__settransparentcolor\"></a>  CImage::SetTransparentColor"},{"content":"Sets a color at a given indexed location as transparent.","pos":[51583,51639]},{"pos":[51720,51730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>iTransparentColor<ept id=\"p1\">*</ept>","pos":[51734,51753],"source":"*iTransparentColor*"},{"content":"The index, in a color palette, of the color to set to transparent.","pos":[51757,51823]},{"content":"If –1, no color is set to transparent.","pos":[51824,51862]},{"pos":[51872,51884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The index of the color previously set as transparent.","pos":[51888,51941]},{"pos":[51951,52004],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__stretchblt\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::StretchBlt","linkify":"<a name=\"cimage__stretchblt\"></a>  CImage::StretchBlt","source":"<a name=\"cimage__stretchblt\"></a>  CImage::StretchBlt"},{"content":"Copies a bitmap from the source device context to this current device context.","pos":[52008,52086]},{"pos":[52682,52692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A handle to the destination device context.","pos":[52709,52752]},{"content":"The x-coordinate, in logical units, of the upper left corner of the destination rectangle.","pos":[52770,52860]},{"content":"The y-coordinate, in logical units, of the upper left corner of the destination rectangle.","pos":[52878,52968]},{"content":"The width, in logical units, of the destination rectangle.","pos":[52991,53049]},{"content":"The height, in logical units, of the destination rectangle.","pos":[53073,53132]},{"content":"The raster operation to be performed.","pos":[53150,53187]},{"content":"Raster-operation codes define exactly how to combine the bits of the source, the destination, and the pattern (as defined by the currently selected brush) to form the destination.","pos":[53188,53367]},{"content":"See <bpt id=\"p1\">[</bpt>BitBlt<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183370)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph> for a list of other raster-operation codes and their descriptions.","pos":[53368,53558],"source":" See [BitBlt](http://msdn.microsoft.com/library/windows/desktop/dd183370) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] for a list of other raster-operation codes and their descriptions."},{"content":"A reference to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure, identifying the destination.","pos":[53579,53702],"source":" A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure, identifying the destination."},{"content":"The x-coordinate, in logical units, of the upper left corner of the source rectangle.","pos":[53719,53804]},{"content":"The y-coordinate, in logical units, of the upper left corner of the source rectangle.","pos":[53821,53906]},{"content":"The width, in logical units, of the source rectangle.","pos":[53928,53981]},{"content":"The height, in logical units, of the source rectangle.","pos":[54004,54058]},{"content":"A reference to a <ph id=\"ph1\">`RECT`</ph> structure, identifying the source.","pos":[54078,54136],"source":" A reference to a `RECT` structure, identifying the source."},{"pos":[54146,54158],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful, otherwise 0.","pos":[54162,54197]},{"pos":[54207,54214],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[54218,54368],"content":"For more information, see <bpt id=\"p1\">[</bpt>StretchBlt<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145120)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](./includes/winsdk_md.md)]</ph>.","source":"For more information, see [StretchBlt](http://msdn.microsoft.com/library/windows/desktop/dd145120) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]."},{"pos":[54378,54439],"content":"<bpt id=\"p1\">&lt;a name=\"cimage__transparentblt\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CImage::TransparentBlt","linkify":"<a name=\"cimage__transparentblt\"></a>  CImage::TransparentBlt","source":"<a name=\"cimage__transparentblt\"></a>  CImage::TransparentBlt"},{"content":"Copies a bitmap from the source device context to this current device context.","pos":[54443,54521]},{"pos":[55177,55187],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A handle to the destination device context.","pos":[55204,55247]},{"content":"The x-coordinate, in logical units, of the upper left corner of the destination rectangle.","pos":[55265,55355]},{"content":"The y-coordinate, in logical units, of the upper left corner of the destination rectangle.","pos":[55373,55463]},{"content":"The width, in logical units, of the destination rectangle.","pos":[55486,55544]},{"content":"The height, in logical units, of the destination rectangle.","pos":[55568,55627]},{"content":"<bpt id=\"p1\">*</bpt>crTransparent<ept id=\"p1\">*</ept>","pos":[55634,55649],"source":"*crTransparent*"},{"content":"The color in the source bitmap to treat as transparent.","pos":[55653,55708]},{"content":"By default, <bpt id=\"p1\">**</bpt>CLR_INVALID<ept id=\"p1\">**</ept>, indicating that the color currently set as the transparent color of the image should be used.","pos":[55709,55831],"source":" By default, **CLR_INVALID**, indicating that the color currently set as the transparent color of the image should be used."},{"content":"A reference to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure, identifying the destination.","pos":[55852,55975],"source":" A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure, identifying the destination."},{"content":"The x-coordinate, in logical units, of the upper left corner of the source rectangle.","pos":[55992,56077]},{"content":"The y-coordinate, in logical units, of the upper left corner of the source rectangle.","pos":[56094,56179]},{"content":"The width, in logical units, of the source rectangle.","pos":[56201,56254]},{"content":"The height, in logical units, of the source rectangle.","pos":[56277,56331]},{"content":"A reference to a <ph id=\"ph1\">`RECT`</ph> structure, identifying the source.","pos":[56351,56409],"source":" A reference to a `RECT` structure, identifying the source."},{"pos":[56419,56431],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56435,56479],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if successful, otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if successful, otherwise **FALSE**."},{"pos":[56489,56496],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`TransparentBlt`</ph> is supported for source bitmaps of 4 bits per pixel and 8 bits per pixel.","pos":[56500,56590],"source":"`TransparentBlt` is supported for source bitmaps of 4 bits per pixel and 8 bits per pixel."},{"content":"Use <bpt id=\"p1\">[</bpt>CImage::AlphaBlend<ept id=\"p1\">](#cimage__alphablend)</ept> to specify 32 bits-per-pixel bitmaps with transparency.","pos":[56591,56692],"source":" Use [CImage::AlphaBlend](#cimage__alphablend) to specify 32 bits-per-pixel bitmaps with transparency."},{"pos":[56705,56712],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[57395,57403],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MMXSwarm Sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[57407,57454],"source":"[MMXSwarm Sample](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>SimpleImage Sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[57457,57508],"source":" [SimpleImage Sample](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Device-Independent Bitmaps<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183562)</ept><ph id=\"ph1\"> </ph>","pos":[57511,57601],"source":" [Device-Independent Bitmaps](http://msdn.microsoft.com/library/windows/desktop/dd183562) "},{"content":"<bpt id=\"p1\"> [</bpt>CreateDIBSection<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183494)</ept><ph id=\"ph1\"> </ph>","pos":[57604,57684],"source":" [CreateDIBSection](http://msdn.microsoft.com/library/windows/desktop/dd183494) "},{"content":"<bpt id=\"p1\"> [</bpt>ATL COM Desktop Components<ept id=\"p1\">](../../atl/atl-com-desktop-components.md)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\"> [</bpt>Device-Independent Bitmaps<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd183562)</ept><ph id=\"ph2\"> </ph>","pos":[57687,57848],"source":" [ATL COM Desktop Components](../../atl/atl-com-desktop-components.md)\n [Device-Independent Bitmaps](http://msdn.microsoft.com/library/windows/desktop/dd183562) "},{"content":"<bpt id=\"p1\"> [</bpt>CreateDIBSection<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd183494)</ept>","pos":[57851,57930],"source":" [CreateDIBSection](http://msdn.microsoft.com/library/windows/desktop/dd183494)"}],"content":"---\ntitle: \"CImage Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CImage\"\n  - \"ATL.CImage\"\n  - \"ATL::CImage\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"jpeg files\"\n  - \"bitmaps [C++], ATL and MFC support for\"\n  - \"images [C++], ATL and MFC support for\"\n  - \"gif files, ATL and MFC support\"\n  - \".gif files, ATL and MFC support\"\n  - \"PNG files, ATL and MFC support\"\n  - \"CImage class\"\n  - \"transparent color\"\nms.assetid: 52861e3d-bf7e-481f-a240-90e88f76c490\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CImage Class\n`CImage` provides enhanced bitmap support, including the ability to load and save images in JPEG, GIF, BMP, and Portable Network Graphics (PNG) formats.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\nclass CImage\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CImage::CImage](#cimage__cimage)|The constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CImage::AlphaBlend](#cimage__alphablend)|Displays bitmaps that have transparent or semitransparent pixels.|  \n|[CImage::Attach](#cimage__attach)|Attaches an `HBITMAP` to a `CImage` object. Can be used with either non-DIB section bitmaps or DIB section bitmaps.|  \n|[CImage::BitBlt](#cimage__bitblt)|Copies a bitmap from the source device context to this current device context.|  \n|[CImage::Create](#cimage__create)|Creates a DIB section bitmap and attaches it to the previously constructed `CImage` object.|  \n|[CImage::CreateEx](#cimage__createex)|Creates a DIB section bitmap (with additional parameters) and attaches it to the previously constructed `CImage` object.|  \n|[CImage::Destroy](#cimage__destroy)|Detaches the bitmap from the `CImage` object and destroys the bitmap.|  \n|[CImage::Detach](#cimage__detach)|Detaches the bitmap from a `CImage` object.|  \n|[CImage::Draw](#cimage__draw)|Copies a bitmap from a source rectangle into a destination rectangle. **Draw** stretches or compresses the bitmap to fit the dimensions of the destination rectangle, if necessary, and handles alpha blending and transparent colors.|  \n|[CImage::GetBits](#cimage__getbits)|Retrieves a pointer to the actual pixel values of the bitmap.|  \n|[CImage::GetBPP](#cimage__getbpp)|Retrieves the bits per pixel.|  \n|[CImage::GetColorTable](#cimage__getcolortable)|Retrieves red, green, blue (RGB) color values from a range of entries in the color table.|  \n|[CImage::GetDC](#cimage__getdc)|Retrieves the device context into which the current bitmap is selected.|  \n|[CImage::GetExporterFilterString](#cimage__getexporterfilterstring)|Finds the available image formats and their descriptions.|  \n|[CImage::GetHeight](#cimage__getheight)|Retrieves the height of the current image in pixels.|  \n|[CImage::GetImporterFilterString](#cimage__getimporterfilterstring)|Finds the available image formats and their descriptions.|  \n|[CImage::GetMaxColorTableEntries](#cimage__getmaxcolortableentries)|Retrieves the maximum number of entries in the color table.|  \n|[CImage::GetPitch](#cimage__getpitch)|Retrieves the pitch of the current image, in bytes.|  \n|[CImage::GetPixel](#cimage__getpixel)|Retrieves the color of the pixel specified by *x* and *y*.|  \n|[CImage::GetPixelAddress](#cimage__getpixeladdress)|Retrieves the address of a given pixel.|  \n|[CImage::GetTransparentColor](#cimage__gettransparentcolor)|Retrieves the position of the transparent color in the color table.|  \n|[CImage::GetWidth](#cimage__getwidth)|Retrieves the width of the current image in pixels.|  \n|[CImage::IsDIBSection](#cimage__isdibsection)|Determines if the attached bitmap is a DIB section.|  \n|[CImage::IsIndexed](#cimage__isindexed)|Indicates that a bitmap's colors are mapped to an indexed palette.|  \n|[CImage::IsNull](#cimage__isnull)|Indicates if a source bitmap is currently loaded.|  \n|[CImage::IsTransparencySupported](#cimage__istransparencysupported)|Indicates whether the application supports transparent bitmaps and was compiled for Windows 2000 or later.|  \n|[CImage::Load](#cimage__load)|Loads an image from the specified file.|  \n|[CImage::LoadFromResource](#cimage__loadfromresource)|Loads an image from the specified resource.|  \n|[CImage::MaskBlt](#cimage__maskblt)|Combines the color data for the source and destination bitmaps using the specified mask and raster operation.|  \n|[CImage::PlgBlt](#cimage__plgblt)|Performs a bit-block transfer from a rectangle in a source device context into a parallelogram in a destination device context.|  \n|[CImage::ReleaseDC](#cimage__releasedc)|Releases the device context that was retrieved with [CImage::GetDC](#cimage__getdc).|  \n|[CImage::ReleaseGDIPlus](#cimage__releasegdiplus)|Releases resources used by GDI+. Must be called to free resources created by a global `CImage` object.|  \n|[CImage::Save](#cimage__save)|Saves an image as the specified type. **Save** cannot specify image options.|  \n|[CImage::SetColorTable](#cimage__setcolortable)|Sets red, green, blue RGB) color values in a range of entries in the color table of the DIB section.|  \n|[CImage::SetPixel](#cimage__setpixel)|Sets the pixel at the specified coordinates to the specified color.|  \n|[CImage::SetPixelIndexed](#cimage__setpixelindexed)|Sets the pixel at the specified coordinates to the color at the specified index of the palette.|  \n|[CImage::SetPixelRGB](#cimage__setpixelrgb)|Sets the pixel at the specified coordinates to the specified red, green, blue (RGB) value.|  \n|[CImage::SetTransparentColor](#cimage__settransparentcolor)|Sets the index of the color to be treated as transparent. Only one color in a palette can be transparent.|  \n|[CImage::StretchBlt](#cimage__stretchblt)|Copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the dimensions of the destination rectangle, if necessary.|  \n|[CImage::TransparentBlt](#cimage__transparentblt)|Copies a bitmap with transparent color from the source device context to this current device context.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CImage::operator HBITMAP](#cimage__operator_hbitmap)|Returns the Windows handle attached to the `CImage` object.|  \n  \n## Remarks  \n `CImage` takes bitmaps that are either device-independent bitmap (DIB) sections or not; however, you can use [Create](#cimage__create) or [CImage::Load](#cimage__load) with only DIB sections. You can attach a non-DIB section bitmap to a `CImage` object using [Attach](#cimage__attach), but then you cannot use the following `CImage` methods, which support only DIB section bitmaps:  \n  \n- [GetBits](#cimage__getbits)  \n  \n- [GetColorTable](#cimage__getcolortable)  \n  \n- [GetMaxColorTableEntries](#cimage__getmaxcolortableentries)  \n  \n- [GetPitch](#cimage__getpitch)  \n  \n- [GetPixelAddress](#cimage__getpixeladdress)  \n  \n- [IsIndexed](#cimage__isindexed)  \n  \n- [SetColorTable](#cimage__setcolortable)  \n  \n To determine if an attached bitmap is a DIB section, call [IsDibSection](#cimage__isdibsection)**.**  \n  \n> [!NOTE]\n> **Note** In Visual Studio .NET 2003, this class keeps a count of the number of `CImage` objects created. Whenever the count goes to 0, the function **GdiplusShutdown** is automatically called to release resources used by GDI+. This ensures that any `CImage` objects created directly or indirectly by DLLs are always destroyed properly and that **GdiplusShutdown** is not called from `DllMain`.  \n  \n> [!NOTE]\n>  Using global `CImage` objects in a DLL is not recommended. If you need to use a global `CImage` object in a DLL, call [CImage::ReleaseGDIPlus](#cimage__releasegdiplus) to explicitly release resources used by GDI+.  \n  \n `CImage` cannot be selected into a new [CDC](../../mfc/reference/cdc-class.md). `CImage` creates its own **HDC** for the image. Because an `HBITMAP` can only be selected into one **HDC** at a time, the `HBITMAP` associated with the `CImage` cannot be selected into another **HDC**. If you need a `CDC`, retrieve the **HDC** from the `CImage` and give it to [CDC::FromHandle](../../mfc/reference/cdc-class.md#cdc__fromhandle.  \n  \n## Example  \n```cpp\n// Get a CDC for the image\nCDC* pDC = CDC::FromHandle(m_myImage.GetDC());\n\n// Use pDC here\npDC->Rectangle(0, 40, 100, 50);\n\nm_myImage.ReleaseDC();\n```  \n  \n When you use `CImage` in an MFC project, note which member functions in your project expect a pointer to a [CBitmap](../../mfc/reference/cbitmap-class.md) object. If you want to use `CImage` with such a function, like [CMenu::AppendMenu](../../mfc/reference/cmenu-class.md#cmenu__appendmenu), use [CBitmap::FromHandle](../../mfc/reference/cbitmap-class.md#cbitmap__fromhandle), pass it your `CImage` `HBITMAP`, and use the returned `CBitmap*`.  \n\n  \n## Example  \n```cpp\nvoid CMyDlg::OnRButtonDown(UINT nFlags, CPoint point)\n{\n   UNREFERENCED_PARAMETER(nFlags);\n\n   CBitmap* pBitmap = CBitmap::FromHandle(m_myImage);\n   m_pmenuPop->AppendMenu(0, ID_BMPCOMMAND, pBitmap);\n   ClientToScreen(&point);\n   m_pmenuPop->TrackPopupMenu(TPM_RIGHTBUTTON | TPM_LEFTALIGN, point.x, \n      point.y, this);\n}\n```  \n\n  \n Through `CImage`, you have access to the actual bits of a DIB section. You can use a `CImage` object anywhere you previously used a Win32 HBITMAP or DIB section.  \n  \n> [!NOTE]\n>  The following `CImage` methods have limitations on their use:  \n  \n|Method|Limitation|  \n|------------|----------------|  \n|[PlgBlt](#cimage__plgblt)|Works with only Windows NT 4.0 or later. Will not work on applications running on Windows 95/98 or later.|  \n|[MaskBlt](#cimage__maskblt)|Works with only Windows NT 4.0 or later. Will not work on applications running on Windows 95/98 or later.|  \n|[AlphaBlend](#cimage__alphablend)|Works with only Windows 2000, Windows 98, and later systems.|  \n|[TransparentBlt](#cimage__transparentblt)|Works with only Windows 2000, Windows 98, and later systems.|  \n|[Draw](#cimage__draw)|Supports transparency with only Windows 2000, Windows 98, and later systems.|  \n  \n You can use `CImage` from either MFC or ATL.  \n  \n> [!NOTE]\n>  When you create a project using `CImage`, you must define `CString` before you include `atlimage.h`. If your project uses ATL without MFC, include `atlstr.h` before you include `atlimage.h`. If your project uses MFC (or if it is an ATL project with MFC support), include `afxstr.h` before you include `atlimage.h`.  \n>   \n>  Likewise, you must include `atlimage.h` before you include `atlimpl.cpp`. To accomplish this easily, include `atlimage.h` in your `stdafx.h`.  \n  \n## Requirements  \n **Header:** atlimage.h  \n  \n##  <a name=\"cimage__alphablend\"></a>  CImage::AlphaBlend  \n Displays bitmaps that have transparent or semitransparent pixels.  \n  \n```\nBOOL AlphaBlend(HDC hDestDC,\n    int xDest,\n    int yDest,\n    BYTE bSrcAlpha = 0xff,\n    BYTE bBlendOp = AC_SRC_OVER) const throw();\n\nBOOL AlphaBlend(HDC hDestDC,\n    const POINT& pointDest,\n    BYTE bSrcAlpha = 0xff,\n    BYTE bBlendOp = AC_SRC_OVER) const throw();\n\nBOOL AlphaBlend(HDC hDestDC,\n    int xDest,\n    int yDest,\n    int nDestWidth,\n    int nDestHeight,\n    int xSrc,\n    int ySrc,\n    int nSrcWidth,\n    int nSrcHeight,\n    BYTE bSrcAlpha = 0xff,\n    BYTE bBlendOp = AC_SRC_OVER);\n\nBOOL AlphaBlend(HDC hDestDC,\n    const RECT& rectDest,\n    const RECT& rectSrc,\n    BYTE bSrcAlpha = 0xff,\n    BYTE bBlendOp = AC_SRC_OVER);\n```  \n  \n### Parameters  \n `hDestDC`  \n Handle to the destination device context.  \n  \n `xDest`  \n The x-coordinate, in logical units, of the upper left corner of the destination rectangle.  \n  \n `yDest`  \n The y-coordinate, in logical units, of the upper left corner of the destination rectangle.  \n  \n *bSrcAlpha*  \n An alpha transparency value to be used on the entire source bitmap. The default 0xff (255) assumes that your image is opaque, and that you want to use per-pixel alpha values only.  \n  \n `bBlendOp`  \n The alpha-blending function for source and destination bitmaps, a global alpha value to be applied to the entire source bitmap, and format information for the source bitmap. The source and destination blend functions are currently limited to **AC_SRC_OVER**.  \n  \n `pointDest`  \n A reference to a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that identifies the upper left corner of the destination rectangle, in logical units.  \n  \n `nDestWidth`  \n The width, in logical units, of the destination rectangle.  \n  \n `nDestHeight`  \n The height, in logical units, of the destination rectangle.  \n  \n `xSrc`  \n The logical x-coordinate of the upper left corner of the source rectangle.  \n  \n `ySrc`  \n The logical y-coordinate of the upper left corner of the source rectangle.  \n  \n `nSrcWidth`  \n The width, in logical units, of the source rectangle.  \n  \n `nSrcHeight`  \n The height, in logical units, of the source rectangle.  \n  \n `rectDest`  \n A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure, identifying the destination.  \n  \n `rectSrc`  \n A reference to a `RECT` structure, identifying the source.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Alpha-blend bitmaps support color blending on a per-pixel basis.  \n  \n When `bBlendOp` is set to the default of **AC_SRC_OVER**, the source bitmap is placed over the destination bitmap based on the alpha values of the source pixels.  \n\n##  <a name=\"cimage__attach\"></a>  CImage::Attach  \n Attaches `hBitmap` to a `CImage` object.  \n  \n```\nvoid Attach(HBITMAP hBitmap,   DIBOrientation eOrientation = DIBOR_DEFAULT) throw();\n```  \n  \n### Parameters  \n `hBitmap`  \n A handle to an `HBITMAP`.  \n  \n *eOrientation*  \n Specifies the orientation of the bitmap. Can be one of the following:  \n  \n- **DIBOR_DEFAULT** The orientation of the bitmap is determined by the operating system. However, this may not always have the intended results on all operating systems. For more information on this, see the following Knowledge Base article ( **Q186586**): PRB: GetObject() Always Returns Positive Height For DIB Sections.  \n  \n- **DIBOR_BOTTOMUP** The lines of the bitmap are in reverse order. This causes [CImage::GetBits](#cimage__getbits) to return a pointer near the end of the bitmap buffer and [CImage::GetPitch](#cimage__getpitch) to return a negative number.  \n  \n- **DIBOR_TOPDOWN**  The lines of the bitmap are in top to bottom order. This causes [CImage::GetBits](#cimage__getbits) to return a pointer to the first byte of the bitmap buffer and [CImage::GetPitch](#cimage__getpitch) to return a positive number.  \n  \n### Remarks  \n The bitmap can be either a non-DIB section bitmap or a DIB section bitmap. See [IsDIBSection](#cimage__isdibsection) for a list of methods that you can use only with DIB section bitmaps.  \n  \n##  <a name=\"cimage__bitblt\"></a>  CImage::BitBlt  \n Copies a bitmap from the source device context to this current device context.  \n  \n```\nBOOL BitBlt(HDC hDestDC,\n    int xDest,\n    int yDest,\n    DWORD dwROP = SRCCOPY) const throw();\n\nBOOL BitBlt(HDC hDestDC,\n    const POINT& pointDest,\n    DWORD dwROP = SRCCOPY) const throw();\n\nBOOL BitBlt(HDC hDestDC,\n    int xDest,\n    int yDest,\n    int nDestWidth,\n    int nDestHeight,\n    int xSrc,\n    int ySrc,\n    DWORD dwROP = SRCCOPY) const throw();\n\nBOOL BitBlt(HDC hDestDC,\n    const RECT& rectDest,\n    const POINT& pointSrc,\n    DWORD dwROP = SRCCOPY) const throw();\n```  \n  \n### Parameters  \n `hDestDC`  \n The destination **HDC**.  \n  \n `xDest`  \n The logical x-coordinate of the upper left corner of the destination rectangle.  \n  \n `yDest`  \n The logical y-coordinate of the upper left corner of the destination rectangle.  \n  \n `dwROP`  \n The raster operation to be performed. Raster-operation codes define exactly how to combine the bits of the source, the destination, and the pattern (as defined by the currently selected brush) to form the destination. See [BitBlt](http://msdn.microsoft.com/library/windows/desktop/dd183370) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] for a list of other raster-operation codes and their descriptions.  \n  \n `pointDest`  \n A [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure indicating the upper left corner of the destination rectangle.  \n  \n `nDestWidth`  \n The width, in logical units, of the destination rectangle.  \n  \n `nDestHeight`  \n The height, in logical units, of the destination rectangle.  \n  \n `xSrc`  \n The logical x-coordinate of the upper left corner of the source rectangle.  \n  \n `ySrc`  \n The logical y-coordinate of the upper left corner of the source rectangle.  \n  \n `rectDest`  \n A [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure indicating the destination rectangle.  \n  \n `pointSrc`  \n A **POINT** structure indicating the upper left corner of the source rectangle.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n For more information, see [BitBlt](http://msdn.microsoft.com/library/windows/desktop/dd183370) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"cimage__cimage\"></a>  CImage::CImage  \n Constructs a `CImage` object.  \n  \n```\nCImage() throw();\n```  \n  \n### Remarks  \n Once you have constructed the object, call [Create](#cimage__create), [Load](#cimage__load), [LoadFromResource](#cimage__loadfromresource), or [Attach](#cimage__attach) to attach a bitmap to the object.  \n  \n **Note** In Visual Studio, this class keeps a count of the number of `CImage` objects created. Whenever the count goes to 0, the function **GdiplusShutdown** is automatically called to release resources used by GDI+. This ensures that any `CImage` objects created directly or indirectly by DLLs are always destroyed properly and that **GdiplusShutdown** is not called from DllMain.  \n  \n Using global `CImage` objects in a DLL is not recommended. If you need to use a global `CImage` object in a DLL, call [CImage::ReleaseGDIPlus](#cimage__releasegdiplus) to explicitly release resources used by GDI+.  \n  \n##  <a name=\"cimage__create\"></a>  CImage::Create  \n Creates a `CImage` bitmap and attach it to the previously constructed `CImage` object.  \n  \n```\nBOOL Create(int nWidth,\n    int nHeight,\n    int nBPP,\n    DWORD dwFlags = 0) throw();\n```  \n  \n### Parameters  \n `nWidth`  \n The width of the `CImage` bitmap, in pixels.  \n  \n `nHeight`  \n The height of the `CImage` bitmap, in pixels. If `nHeight` is positive, the bitmap is a bottom-up DIB and its origin is the lower left corner. If `nHeight` is negative, the bitmap is a top-down DIB and its origin is the upper left corner.  \n  \n `nBPP`  \n The numbers of bits per pixel in the bitmap. Usually 4, 8, 16, 24, or 32. Can be 1 for monochrome bitmaps or masks.  \n  \n `dwFlags`  \n Specifies if the bitmap object has an alpha channel. Can be a combination of zero or more of the following values:  \n  \n- **createAlphaChannel** Can only be used if `nBPP` is 32, and `eCompression` is **BI_RGB**. If specified, the created image has an alpha (transparency) value for each pixel, stored in the 4th byte of each pixel (unused in a non-alpha 32-bit image). This alpha channel is automatically used when calling [CImage::AlphaBlend](#cimage__alphablend).  \n  \n> [!NOTE]\n>  In calls to [CImage::Draw](#cimage__draw), images with an alpha channel are automatically alpha blended to the destination.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n##  <a name=\"cimage__createex\"></a>  CImage::CreateEx  \n Creates a `CImage` bitmap and attach it to the previously constructed `CImage` object.  \n  \n```\nBOOL CreateEx(int nWidth,\n    int nHeight,\n    int nBPP,\n    DWORD eCompression,\n    const DWORD* pdwBitmasks = NULL,\n    DWORD dwFlags = 0) throw();\n```  \n  \n### Parameters  \n `nWidth`  \n The width of the `CImage` bitmap, in pixels.  \n  \n `nHeight`  \n The height of the `CImage` bitmap, in pixels. If `nHeight` is positive, the bitmap is a bottom-up DIB and its origin is the lower left corner. If `nHeight` is negative, the bitmap is a top-down DIB and its origin is the upper left corner.  \n  \n `nBPP`  \n The numbers of bits per pixel in the bitmap. Usually 4, 8, 16, 24, or 32. Can be 1 for monochrome bitmaps or masks.  \n  \n `eCompression`  \n Specifies the type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed). Can be one of the following values:  \n  \n- **BI_RGB** The format is uncompressed. Specifying this value when calling `CImage::CreateEx` is equivalent to calling `CImage::Create`.  \n  \n- **BI_BITFIELDS** The format is uncompressed and the color table consists of three `DWORD` color masks that specify the red, green, and blue components, respectively, of each pixel. This is valid when used with 16- and 32-bpp bitmaps.  \n  \n *pdwBitfields*  \n Only used if `eCompression` is set to **BI_BITFIELDS**, otherwise it must be **NULL**. A pointer to an array of three `DWORD` bitmasks, specifying which bits of each pixel are used for the red, green, and blue components of the color, respectively. For information on restrictions for the bitfields, see [BITMAPINFOHEADER](http://msdn.microsoft.com/library/windows/desktop/dd183376) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n `dwFlags`  \n Specifies if the bitmap object has an alpha channel. Can be a combination of zero or more of the following values:  \n  \n- **createAlphaChannel** Can only be used if `nBPP` is 32, and `eCompression` is **BI_RGB**. If specified, the created image has an alpha (transparency) value for each pixel, stored in the 4th byte of each pixel (unused in a non-alpha 32-bit image). This alpha channel is automatically used when calling [CImage::AlphaBlend](#cimage__alphablend).  \n  \n    > [!NOTE]\n    >  In calls to [CImage::Draw](#cimage__draw), images with an alpha channel are automatically alpha blended to the destination.  \n  \n### Return Value  \n **TRUE** if successful. Otherwise **FALSE**.  \n  \n### Example  \n The following example creates a 100x100 pixel bitmap, using 16 bits to encode each pixel. In a given 16-bit pixel, bits 0-3 encode the red component, bits 4-7 encode green, and bits 8-11 encode blue. The remaining 4 bits are unused.  \n  \n\n```cpp\nDWORD adwBitmasks[3] = { 0x0000000f, 0x000000f0, 0x00000f00 };\nm_myImage.CreateEx(100, 100, 16, BI_BITFIELDS, adwBitmasks, 0);\n```\n\n\n##  <a name=\"cimage__destroy\"></a>  CImage::Destroy  \n Detaches the bitmap from the `CImage` object and destroys the bitmap.  \n  \n```\nvoid Destroy() throw();\n```  \n  \n##  <a name=\"cimage__detach\"></a>  CImage::Detach  \n Detaches a bitmap from a `CImage` object.  \n  \n```\nHBITMAP Detach() throw();\n```  \n  \n### Return Value  \n A handle to the bitmap detached, or **NULL** if no bitmap is attached.  \n  \n##  <a name=\"cimage__draw\"></a>  CImage::Draw  \n Copies a bitmap from the source device context to the current device context.  \n  \n```\nBOOL Draw(HDC hDestDC,\n    int xDest,\n    int yDest,\n    int nDestWidth,\n    int nDestHeight,\n    int xSrc,\n    int ySrc,\n    int nSrcWidth,\n    int nSrcHeight) const throw();\n\nBOOL Draw(HDC hDestDC,\n    const RECT& rectDest,\n    const RECT& rectSrc) const throw();\n\nBOOL Draw(HDC hDestDC,\n    int xDest,\n    int yDest) const throw();\n\nBOOL Draw(HDC hDestDC,\n    const POINT& pointDest) const throw();\n\nBOOL Draw(HDC hDestDC,\n    int xDest,\n    int yDest,\n    int nDestWidth,\n    int nDestHeight) const throw();\n\nBOOL Draw(HDC hDestDC,\n    const RECT& rectDest) const throw();\n```  \n  \n### Parameters  \n `hDestDC`  \n A handle to the destination device context.  \n  \n `xDest`  \n The x-coordinate, in logical units, of the upper left corner of the destination rectangle.  \n  \n `yDest`  \n The y-coordinate, in logical units, of the upper left corner of the destination rectangle.  \n  \n `nDestWidth`  \n The width, in logical units, of the destination rectangle.  \n  \n `nDestHeight`  \n The height, in logical units, of the destination rectangle.  \n  \n `xSrc`  \n The x-coordinate, in logical units, of the upper left corner of the source rectangle.  \n  \n `ySrc`  \n The y-coordinate, in logical units, of the upper left corner of the source rectangle.  \n  \n `nSrcWidth`  \n The width, in logical units, of the source rectangle.  \n  \n `nSrcHeight`  \n The height, in logical units, of the source rectangle.  \n  \n `rectDest`  \n A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure, identifying the destination.  \n  \n `rectSrc`  \n A reference to a `RECT` structure, identifying the source.  \n  \n `pointDest`  \n A reference to a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure that identifies the upper left corner of the destination rectangle, in logical units.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n **Draw** performs the same operation as [StretchBlt](#cimage__stretchblt), unless the image contains a transparent color or alpha channel. In that case, **Draw** performs the same operation as either [TransparentBlt](#cimage__transparentblt) or [AlphaBlend](#cimage__alphablend) as required.  \n  \n For versions of **Draw** that do not specify a source rectangle, the entire source image is the default. For the version of **Draw** that does not specify a size for the destination rectangle, the size of the source image is the default and no stretching or shrinking occurs.  \n  \n##  <a name=\"cimage__getbits\"></a>  CImage::GetBits  \n Retrieves a pointer to the actual bit values of a given pixel in a bitmap.  \n  \n```\nvoid* GetBits() throw();\n```  \n  \n### Return Value  \n A pointer to the bitmap buffer. If the bitmap is a bottom-up DIB, the pointer points near the end of the buffer. If the bitmap is a top-down DIB, the pointer points to the first byte of the buffer.  \n  \n### Remarks  \n Using this pointer, along with the value returned by [GetPitch](#cimage__getpitch), you can locate and change individual pixels in an image.  \n  \n> [!NOTE]\n>  This method supports only DIB section bitmaps; consequently, you access the pixels of a `CImage` object the same way you would the pixels of a DIB section. The returned pointer points to the pixel at the location (0, 0).  \n  \n##  <a name=\"cimage__getbpp\"></a>  CImage::GetBPP  \n Retrieves the bits-per-pixel value.  \n  \n```\nint GetBPP() const throw();\n```  \n  \n### Return Value  \n The number of bits per pixel.  \n  \n### Remarks  \n This value determines the number of bits that define each pixel and the maximum number of colors in the bitmap.  \n  \n The bits per pixel is usually 1, 4, 8, 16, 24, or 32. See the **biBitCount** member of [BITMAPINFOHEADER](http://msdn.microsoft.com/library/windows/desktop/dd183376) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] for more information about this value.  \n  \n##  <a name=\"cimage__getcolortable\"></a>  CImage::GetColorTable  \n Retrieves red, green, blue (RGB) color values from a range of entries in the palette of the DIB section.  \n  \n```\nvoid GetColorTable(UINT iFirstColor,\n    UINT nColors,\n    RGBQUAD* prgbColors) const throw();\n```  \n  \n### Parameters  \n `iFirstColor`  \n The color table index of the first entry to retrieve.  \n  \n `nColors`  \n The number of color table entries to retrieve.  \n  \n `prgbColors`  \n A pointer to the array of [RGBQUAD](http://msdn.microsoft.com/library/windows/desktop/dd162938) structures to retrieve the color table entries.  \n  \n##  <a name=\"cimage__getdc\"></a>  CImage::GetDC  \n Retrieves the device context that currently has the image selected into it.  \n  \n```\nHDC GetDC() const throw();\n```  \n  \n### Return Value  \n A handle to a device context.  \n  \n### Remarks  \n For each call to `GetDC`, you must have a subsequent call to [ReleaseDC](#cimage__releasedc).  \n  \n##  <a name=\"cimage__getexporterfilterstring\"></a>  CImage::GetExporterFilterString  \n Finds image formats available for saving images.  \n  \n```\nstatic HRESULT GetExporterFilterString(CSimpleString& strExporters,\n    CSimpleArray<GUID>& aguidFileTypes,\n    LPCTSTR pszAllFilesDescription = NULL,\n    DWORD dwExclude = excludeDefaultSave,\n    TCHAR chSeparator = _T('|'));\n```  \n  \n### Parameters  \n *strExporters*  \n A reference to a **CSimpleString** object. See **Remarks** for more information.  \n  \n `aguidFileTypes`  \n An array of GUIDs, with each element corresponding to one of the file types in the string. In the example in `pszAllFilesDescription` below, `aguidFileTypes`[0] is `GUID_NULL` and the remaining array values are the image file formats supported by the current operating system.  \n  \n> [!NOTE]\n>  For a complete list of constants, see **Image File Format Constants** in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n `pszAllFilesDescription`  \n If this parameter is not **NULL**, the filter string will have one additional filter at the beginning of the list. This filter will have the current value of `pszAllFilesDescription` for its description, and accepts files of any extension supported by any other exporter in the list.  \n  \n For example:  \n  \n\n ```cpp\n//First filter in the list will be titled \"All Image Files\", and\n//will accept files with any extension supported by any exporter.\nCImage::GetExporterFilterString( strExporters, aguidFileTypes, \n    _T(\"All Image Files\"));\n```  \n\n  \n `dwExclude`  \n Set of bit flags specifying which file types to exclude from the list. Allowable flags are:  \n  \n- **excludeGIF** = 0x01   Excludes GIF files.  \n  \n- **excludeBMP** = 0x02   Excludes BMP (Windows Bitmap) files.  \n  \n- **excludeEMF** = 0x04   Excludes EMF (Enhanced Metafile) files.  \n  \n- **excludeWMF** = 0x08   Excludes WMF (Windows Metafile) files.  \n  \n- **excludeJPEG** = 0x10   Excludes JPEG files.  \n  \n- **excludePNG** = 0x20   Excludes PNG files.  \n  \n- **excludeTIFF** = 0x40   Excludes TIFF files.  \n  \n- **excludeIcon** = 0x80   Excludes ICO (Windows Icon) files.  \n  \n- **excludeOther** = 0x80000000   Excludes any other file type not listed above.  \n  \n- **excludeDefaultLoad** = 0   For load, all file types are included by default  \n  \n- **excludeDefaultSave** = **excludeIcon &#124; excludeEMF &#124; excludeWMF** For saving, these files are excluded by default because they usually have special requirements.  \n  \n `chSeparator`  \n The separator used between the image formats. See **Remarks** for more information.  \n  \n### Return Value  \n A standard `HRESULT`.  \n  \n### Remarks  \n You can pass the resulting format string to your MFC [CFileDialog](../../mfc/reference/cfiledialog-class.md) object to expose the file extensions of the available image formats in the File Save As dialog box.  \n  \n The parameter *strExporter* has the format:  \n  \n file description0&#124;\\*.ext0&#124;filedescription1&#124;\\*.ext1&#124;...file description *n*&#124;\\*.ext *n*&#124;&#124;  \n  \n where '&#124;' is the separator character specified by `chSeparator`. For example:  \n  \n `\"Bitmap format|*.bmp|JPEG format|*.jpg|GIF format|*.gif|PNG format|*.png||\"`  \n  \n Use the default separator '&#124;' if you pass this string to an MFC `CFileDialog` object. Use the null separator '\\0' if you pass this string to a common File Save dialog box.  \n  \n##  <a name=\"cimage__getheight\"></a>  CImage::GetHeight  \n Retrieves the height, in pixels, of an image.  \n  \n```\nint GetHeight() const throw();\n```  \n  \n### Return Value  \n The height, in pixels, of an image.  \n  \n##  <a name=\"cimage__getimporterfilterstring\"></a>  CImage::GetImporterFilterString  \n Finds image formats available for loading images.  \n  \n```\nstatic HRESULT GetImporterFilterString(CSimpleString& strImporters,\n    CSimpleArray<GUID>& aguidFileTypes,\n    LPCTSTR pszAllFilesDescription = NULL,\n    DWORD dwExclude = excludeDefaultLoad,\n    TCHAR chSeparator = _T('|'));\n```  \n  \n### Parameters  \n *strImporters*  \n A reference to a **CSimpleString** object. See **Remarks** for more information.  \n  \n `aguidFileTypes`  \n An array of GUIDs, with each element corresponding to one of the file types in the string. In the example in `pszAllFilesDescription` below, `aguidFileTypes`[0] is `GUID_NULL` with the remaining array values are the image file formats supported by the current operating system.  \n  \n> [!NOTE]\n>  For a complete list of constants, see **Image File Format Constants** in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n `pszAllFilesDescription`  \n If this parameter is not **NULL**, the filter string will have one additional filter at the beginning of the list. This filter will have the current value of `pszAllFilesDescription` for its description, and accepts files of any extension supported by any other exporter in the list.  \n  \n For example:  \n  \n\n ```cpp\n//First filter in the list will be titled \"All Image Files\", and\n//will accept files with any extension supported by any importer.\nCImage::GetImporterFilterString( strImporters, aguidFileTypes, \n    _T(\"All Image Files\"));\n```  \n\n  \n `dwExclude`  \n Set of bit flags specifying which file types to exclude from the list. Allowable flags are:  \n  \n- **excludeGIF** = 0x01   Excludes GIF files.  \n  \n- **excludeBMP** = 0x02   Excludes BMP (Windows Bitmap) files.  \n  \n- **excludeEMF** = 0x04   Excludes EMF (Enhanced Metafile) files.  \n  \n- **excludeWMF** = 0x08   Excludes WMF (Windows Metafile) files.  \n  \n- **excludeJPEG** = 0x10   Excludes JPEG files.  \n  \n- **excludePNG** = 0x20   Excludes PNG files.  \n  \n- **excludeTIFF** = 0x40   Excludes TIFF files.  \n  \n- **excludeIcon** = 0x80   Excludes ICO (Windows Icon) files.  \n  \n- **excludeOther** = 0x80000000   Excludes any other file type not listed above.  \n  \n- **excludeDefaultLoad** = 0   For load, all file types are included by default  \n  \n- **excludeDefaultSave** = **excludeIcon &#124; excludeEMF &#124; excludeWMF** For saving, these files are excluded by default because they usually have special requirements.  \n  \n `chSeparator`  \n The separator used between the image formats. See **Remarks** for more information.  \n  \n### Remarks  \n You can pass the resulting format string to your MFC [CFileDialog](../../mfc/reference/cfiledialog-class.md) object to expose the file extensions of the available image formats in the **File Open** dialog box.  \n  \n The parameter *strImporter* has the format:  \n  \n file description0&#124;\\*.ext0&#124;filedescription1&#124;\\*.ext1&#124;...file description *n*&#124;\\*.ext *n*&#124;&#124;  \n  \n where '&#124;' is the separator character specified by `chSeparator`. For example:  \n  \n `\"Bitmap format|*.bmp|JPEG format|*.jpg|GIF format|*.gif|PNG format|*.png||\"`  \n  \n Use the default separator '&#124;' if you pass this string to an MFC `CFileDialog` object. Use the null separator '\\0' if you pass this string to a common **File Open** dialog box.  \n  \n##  <a name=\"cimage__getmaxcolortableentries\"></a>  CImage::GetMaxColorTableEntries  \n Retrieves the maximum number of entries in the color table.  \n  \n```\nint GetMaxColorTableEntries() const throw();\n```  \n  \n### Return Value  \n The number of entries in the color table.  \n  \n### Remarks  \n This method supports only DIB section bitmaps.  \n  \n##  <a name=\"cimage__getpitch\"></a>  CImage::GetPitch  \n Retrieves the pitch of an image.  \n  \n```\nint GetPitch() const throw();\n```  \n  \n### Return Value  \n The pitch of the image. If the return value is negative, the bitmap is a bottom-up DIB and its origin is the lower left corner. If the return value is positive, the bitmap is a top-down DIB and its origin is the upper left corner.  \n  \n### Remarks  \n The pitch is the distance, in bytes, between two memory addresses that represent the beginning of one bitmap line and the beginning of the next bitmap line. Because pitch is measured in bytes, the pitch of an image helps you to determine the pixel format. The pitch can also include additional memory, reserved for the bitmap.  \n  \n Use `GetPitch` with [GetBits](#cimage__getbits) to find individual pixels of an image.  \n  \n> [!NOTE]\n>  This method supports only DIB section bitmaps.  \n  \n##  <a name=\"cimage__getpixel\"></a>  CImage::GetPixel  \n Retrieves the color of the pixel at the location specified by *x* and *y*.  \n  \n```\nCOLORREF GetPixel(int x,int y) const throw();\n```  \n  \n### Parameters  \n *x*  \n The x-coordinate of the pixel.  \n  \n *y*  \n The y-coordinate of the pixel.  \n  \n### Return Value  \n The red, green, blue (RGB) value of the pixel. If the pixel is outside of the current clipping region, the return value is **CLR_INVALID**.  \n  \n##  <a name=\"cimage__getpixeladdress\"></a>  CImage::GetPixelAddress  \n Retrieves the exact address of a pixel.  \n  \n```\nvoid* GetPixelAddress(int x,int y) throw();\n```  \n  \n### Parameters  \n *x*  \n The x-coordinate of the pixel.  \n  \n *y*  \n The y-coordinate of the pixel.  \n  \n### Remarks  \n The address is determined according to the coordinates of a pixel, the pitch of the bitmap, and the bits per pixel.  \n  \n For formats that have less than 8 bits per pixel, this method returns the address of the byte containing the pixel. For example, if your image format has 4 bits per pixel, `GetPixelAddress` returns the address of the first pixel in the byte, and you must calculate for 2 pixels per byte.  \n  \n> [!NOTE]\n>  This method supports only DIB section bitmaps.  \n  \n##  <a name=\"cimage__gettransparentcolor\"></a>  CImage::GetTransparentColor  \n Retrieves the indexed location of the transparent color in the color palette.  \n  \n```\nLONG GetTransparentColor() const throw();\n```  \n  \n### Return Value  \n The index of the transparent color.  \n  \n##  <a name=\"cimage__getwidth\"></a>  CImage::GetWidth  \n Retrieves the width, in pixels, of an image.  \n  \n```\nint GetWidth() const throw();\n```  \n  \n### Return Value  \n The width of the bitmap, in pixels.  \n  \n##  <a name=\"cimage__isdibsection\"></a>  CImage::IsDIBSection  \n Determines if the attached bitmap is a DIB section.  \n  \n```\nbool IsDIBSection() const throw();\n```  \n  \n### Return Value  \n **true** if the attached bitmap is a DIB section. Otherwise **false**.  \n  \n### Remarks  \n If the bitmap is not a DIB section, you cannot use the following `CImage` methods, which support only DIB section bitmaps:  \n  \n- [GetBits](#cimage__getbits)  \n  \n- [GetColorTable](#cimage__getcolortable)  \n  \n- [GetMaxColorTableEntries](#cimage__getmaxcolortableentries)  \n  \n- [GetPitch](#cimage__getpitch)  \n  \n- [GetPixelAddress](#cimage__getpixeladdress)  \n  \n- [IsIndexed](#cimage__isindexed)  \n  \n- [SetColorTable](#cimage__setcolortable)  \n  \n##  <a name=\"cimage__isindexed\"></a>  CImage::IsIndexed  \n Determines whether a bitmap's pixels are mapped to a color palette.  \n  \n```\nbool IsIndexed() const throw();\n```  \n  \n### Return Value  \n **true** if indexed; otherwise **false**.  \n  \n### Remarks  \n This method returns **true** only if the bitmap is 8-bit (256 colors) or less.  \n  \n> [!NOTE]\n>  This method supports only DIB section bitmaps.  \n  \n##  <a name=\"cimage__isnull\"></a>  CImage::IsNull  \n Determines if a bitmap is currently loaded.  \n  \n```\nbool IsNull() const throw();\n```  \n  \n### Remarks  \n This method returns **True** if a bitmap is not currently loaded; otherwise **False**.  \n  \n##  <a name=\"cimage__istransparencysupported\"></a>  CImage::IsTransparencySupported  \n Indicates whether the application supports transparent bitmaps and was compiled for Windows 2000 or later.  \n  \n```\nstatic BOOL IsTransparencySupported() throw();\n```  \n  \n### Return Value  \n Nonzero if the current platform supports transparency. Otherwise 0.  \n  \n### Remarks  \n If the return value is nonzero, and transparency is supported, a call to [AlphaBlend](#cimage__alphablend), [TransparentBlt](#cimage__transparentblt), or [Draw](#cimage__draw) will handle transparent colors.  \n  \n If the application is compiled for use with operating systems before Windows 2000 or Windows 98, this method will always return 0, even on newer operating systems.  \n  \n\n##  <a name=\"cimage__load\"></a>  CImage::Load  \n Loads an image.  \n  \n```\nHRESULT Load(LPCTSTR pszFileName) throw();\n\nHRESULT Load(IStream* pStream) throw();\n```  \n  \n### Parameters  \n `pszFileName`  \n A pointer to a string containing the name of the image file to load.  \n  \n `pStream`  \n A pointer to a stream containing the name of the image file to load.  \n  \n### Return Value  \n A standard `HRESULT`.  \n  \n### Remarks  \n Loads the image specified by *pszFileName* or `pStream`.  \n  \n Valid image types are BMP, GIF, JPEG, PNG, and TIFF.  \n  \n##  <a name=\"cimage__loadfromresource\"></a>  CImage::LoadFromResource  \n Loads an image from a `BITMAP` resource.  \n  \n```\nvoid LoadFromResource(HINSTANCE hInstance,\n    LPCTSTR pszResourceName) throw();\n\nvoid LoadFromResource(HINSTANCE hInstance,\n    UINT nIDResource) throw();\n```  \n  \n### Parameters  \n `hInstance`  \n Handle to an instance of the module that contains the image to be loaded.  \n  \n `pszResourceName`  \n A pointer to the string containing the name of the resource containing the image to load.  \n  \n `nIDResource`  \n The ID of the resource to load.  \n  \n### Remarks  \n The resource must be of type `BITMAP`.  \n  \n##  <a name=\"cimage__maskblt\"></a>  CImage::MaskBlt  \n Combines the color data for the source and destination bitmaps using the specified mask and raster operation.  \n  \n```\nBOOL MaskBlt(HDC hDestDC,\n    int xDest,\n    int yDest,\n    int nDestWidth,\n    int nDestHeight,\n    int xSrc,\n    int ySrc,\n    HBITMAP hbmMask,\n    int xMask,\n    int yMask,\n    DWORD dwROP = SRCCOPY) const throw();\n\nBOOL MaskBlt(HDC hDestDC,\n    const RECT& rectDest,\n    const POINT& pointSrc,\n    HBITMAP hbmMask,\n    const POINT& pointMask,\n    DWORD dwROP = SRCCOPY) const throw();\n\nBOOL MaskBlt(HDC hDestDC,\n    int xDest,\n    int yDest,\n    HBITMAP hbmMask,\n    DWORD dwROP = SRCCOPY) const throw();\n\nBOOL MaskBlt(HDC hDestDC,\n    const POINT& pointDest,\n    HBITMAP hbmMask,\n    DWORD dwROP = SRCCOPY) const throw();\n```  \n  \n### Parameters  \n `hDestDC`  \n The handle to the module whose executable contains the resource.  \n  \n `xDest`  \n The x-coordinate, in logical units, of the upper left corner of the destination rectangle.  \n  \n `yDest`  \n The y-coordinate, in logical units, of the upper left corner of the destination rectangle.  \n  \n `nDestWidth`  \n The width, in logical units, of the destination rectangle and source bitmap.  \n  \n `nDestHeight`  \n The height, in logical units, of the destination rectangle and source bitmap.  \n  \n `xSrc`  \n The logical x-coordinate of the upper left corner of the source bitmap.  \n  \n `ySrc`  \n The logical y-coordinate of the upper left corner of the source bitmap.  \n  \n `hbmMask`  \n Handle to the monochrome mask bitmap combined with the color bitmap in the source device context.  \n  \n `xMask`  \n The horizontal pixel offset for the mask bitmap specified by the `hbmMask` parameter.  \n  \n `yMask`  \n The vertical pixel offset for the mask bitmap specified by the `hbmMask` parameter.  \n  \n `dwROP`  \n Specifies both foreground and background ternary raster operation codes that the method uses to control the combination of source and destination data. The background raster operation code is stored in the high-order byte of the high-order word of this value; the foreground raster operation code is stored in the low-order byte of the high-order word of this value; the low-order word of this value is ignored, and should be zero. For a discussion of foreground and background in the context of this method, see `MaskBlt` in the [!INCLUDE[winSDK](./includes/winsdk_md.md)]. For a list of common raster operation codes, see `BitBlt` in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n `rectDest`  \n A reference to a `RECT` structure, identifying the destination.  \n  \n `pointSrc`  \n A `POINT` structure indicating the upper left corner of the source rectangle.  \n  \n `pointMask`  \n A **POINT** structure indicating the upper left corner of the mask bitmap.  \n  \n `pointDest`  \n A reference to a **POINT** structure that identifies the upper left corner of the destination rectangle, in logical units.  \n  \n### Return Value  \n Nonzero if successful, otherwise 0.  \n  \n### Remarks  \n This method applies to Windows NT, versions 4.0 and later only.  \n  \n##  <a name=\"cimage__operator_hbitmap\"></a>  CImage::operator HBITMAP  \n Use this operator to get the attached Windows GDI handle of the `CImage` object. This operator is a casting operator, which supports direct use of an `HBITMAP` object.  \n  \n##  <a name=\"cimage__plgblt\"></a>  CImage::PlgBlt  \n Performs a bit-block transfer from a rectangle in a source device context into a parallelogram in a destination device context.  \n  \n```\nBOOL PlgBlt(HDC hDestDC,\n    const POINT* pPoints,\n    HBITMAP hbmMask = NULL) const throw();\n\nBOOL PlgBlt(HDC hDestDC,\n    const POINT* pPoints,\n    int xSrc,\n    int ySrc,\n    int nSrcWidth,\n    int nSrcHeight,\n    HBITMAP hbmMask = NULL,\n    int xMask = 0,\n    int yMask = 0) const throw();\n\nBOOL PlgBlt(HDC hDestDC,\n    const POINT* pPoints,\n    const RECT& rectSrc,\n    HBITMAP hbmMask = NULL,\n    const POINT& pointMask = CPoint(0,\n    0)) const throw();\n```  \n  \n### Parameters  \n `hDestDC`  \n A handle to the destination device context.  \n  \n *pPoints*  \n A pointer to an array of three points in logical space that identify three corners of the destination parallelogram. The upper left corner of the source rectangle is mapped to the first point in this array, the upper-right corner to the second point in this array, and the lower left corner to the third point. The lower-right corner of the source rectangle is mapped to the implicit fourth point in the parallelogram.  \n  \n `hbmMask`  \n A handle to an optional monochrome bitmap that is used to mask the colors of the source rectangle.  \n  \n `xSrc`  \n The x-coordinate, in logical units, of the upper left corner of the source rectangle.  \n  \n `ySrc`  \n The y-coordinate, in logical units, of the upper left corner of the source rectangle.  \n  \n `nSrcWidth`  \n The width, in logical units, of the source rectangle.  \n  \n `nSrcHeight`  \n The height, in logical units, of the source rectangle.  \n  \n `xMask`  \n The x-coordinate of the upper left corner of the monochrome bitmap.  \n  \n `yMask`  \n The y-coordinate of the upper left corner of the monochrome bitmap.  \n  \n `rectSrc`  \n A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure specifying the coordinates of the source rectangle.  \n  \n `pointMask`  \n A [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) structure indicating the upper left corner of the mask bitmap.  \n  \n### Return Value  \n Nonzero if successful, otherwise 0.  \n  \n### Remarks  \n If `hbmMask` identifies a valid monochrome bitmap, **PlgBit** uses this bitmap to mask the bits of color data from the source rectangle.  \n  \n This method applies to Windows NT, versions 4.0 and later only. See [PlgBlt](http://msdn.microsoft.com/library/windows/desktop/dd162804) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] for more detailed information.  \n  \n##  <a name=\"cimage__releasedc\"></a>  CImage::ReleaseDC  \n Releases the device context.  \n  \n```\nvoid ReleaseDC() const throw();\n```  \n  \n### Remarks  \n Because only one bitmap can be selected into a device context at a time, you must call `ReleaseDC` for each call to [GetDC](#cimage__getdc).  \n  \n##  <a name=\"cimage__releasegdiplus\"></a>  CImage::ReleaseGDIPlus  \n Releases resources used by GDI+.  \n  \n```\nvoid ReleaseGDIPlus() throw();\n```  \n  \n### Remarks  \n This method must be called to free resources allocated by a global `CImage` object. See [CImage::CImage](#cimage__cimage).  \n  \n##  <a name=\"cimage__save\"></a>  CImage::Save  \n Saves an image to the specified stream or file on disk.  \n  \n```\nHRESULT Save(IStream* pStream,\n    REFGUID guidFileType) const throw();\n\nHRESULT Save(LPCTSTR pszFileName,\n    REFGUID guidFileType= GUID_NULL) const throw();\n```  \n  \n### Parameters  \n `pStream`  \n A pointer to a COM IStream object containing the file image data.  \n  \n *pszFileName*  \n A pointer to the file name for the image.  \n  \n `guidFileType`  \n The file type to save the image as. Can be one of the following:  \n  \n- **ImageFormatBMP** An uncompressed bitmap image.  \n  \n- **ImageFormatPNG** A Portable Network Graphic (PNG) compressed image.  \n  \n- **ImageFormatJPEG** A JPEG compressed image.  \n  \n- **ImageFormatGIF** A GIF compressed image.  \n  \n> [!NOTE]\n>  For a complete list of constants, see **Image File Format Constants** in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n### Return Value  \n A standard `HRESULT`.  \n  \n### Remarks  \n Call this function to save the image using a specified name and type. If the `guidFileType` parameter is not included, the file name's file extension will be used to determine the image format. If no extension is provided, the image will be saved in BMP format.  \n  \n##  <a name=\"cimage__setcolortable\"></a>  CImage::SetColorTable  \n Sets the red, green, blue (RGB) color values for a range of entries in the palette of the DIB section.  \n  \n```\nvoid SetColorTable(UINT iFirstColor,\n    UINT nColors,\n    const RGBQUAD* prgbColors) throw();\n```  \n  \n### Parameters  \n `iFirstColor`  \n The color table index of the first entry to set.  \n  \n `nColors`  \n The number of color table entries to set.  \n  \n `prgbColors`  \n A pointer to the array of [RGBQUAD](http://msdn.microsoft.com/library/windows/desktop/dd162938) structures to set the color table entries.  \n  \n### Remarks  \n This method supports only DIB section bitmaps.  \n  \n##  <a name=\"cimage__setpixel\"></a>  CImage::SetPixel  \n Sets the color of a pixel at a given location in the bitmap.  \n  \n```\nvoid SetPixel(int x,\n    int y,\n    COLORREF color) throw();\n```  \n  \n### Parameters  \n *x*  \n The horizontal location of the pixel to set.  \n  \n *y*  \n The vertical location of the pixel to set.  \n  \n `color`  \n The color to which you set the pixel.  \n  \n### Remarks  \n This method fails if the pixel coordinates lie outside of the selected clipping region.  \n  \n##  <a name=\"cimage__setpixelindexed\"></a>  CImage::SetPixelIndexed  \n Sets the pixel color to the color located at `iIndex` in the color palette.  \n  \n```\nvoid SetPixelIndexed(int x,\n    int y,\n    int iIndex) throw();\n```  \n  \n### Parameters  \n *x*  \n The horizontal location of the pixel to set.  \n  \n *y*  \n The vertical location of the pixel to set.  \n  \n `iIndex`  \n The index of a color in the color palette.  \n  \n##  <a name=\"cimage__setpixelrgb\"></a>  CImage::SetPixelRGB  \n Sets the pixel at the locations specified by *x* and *y* to the colors indicated by *r*, *g*, and *b*, in a red, green, blue (RGB) image.  \n  \n```\nvoid SetPixelRGB(int x,\n    int y,\n    BYTE r,\n    BYTE g,\n    BYTE b) throw();\n```  \n  \n### Parameters  \n *x*  \n The horizontal location of the pixel to set.  \n  \n *y*  \n The vertical location of the pixel to set.  \n  \n *r*  \n The intensity of the red color.  \n  \n *g*  \n The intensity of the green color.  \n  \n *b*  \n The intensity of the blue color.  \n  \n### Remarks  \n The red, green, and blue parameters are each represented by a number between 0 and 255. If you set all three parameters to zero, the combined resulting color is black. If you set all three parameters to 255, the combined resulting color is white.  \n  \n##  <a name=\"cimage__settransparentcolor\"></a>  CImage::SetTransparentColor  \n Sets a color at a given indexed location as transparent.  \n  \n```\nLONG SetTransparentColor(LONG iTransparentColor) throw();\n```  \n  \n### Parameters  \n *iTransparentColor*  \n The index, in a color palette, of the color to set to transparent. If –1, no color is set to transparent.  \n  \n### Return Value  \n The index of the color previously set as transparent.  \n  \n##  <a name=\"cimage__stretchblt\"></a>  CImage::StretchBlt  \n Copies a bitmap from the source device context to this current device context.  \n  \n```\nBOOL StretchBlt(HDC hDestDC,\n    int xDest,\n    int yDest,\n    int nDestWidth,\n    int nDestHeight,\n    DWORD dwROP = SRCCOPY) const throw();\n\nBOOL StretchBlt(HDC hDestDC,\n    const RECT& rectDest,\n    DWORD dwROP = SRCCOPY) const throw();\n\nBOOL StretchBlt(HDC hDestDC,\n    int xDest,\n    int yDest,\n    int nDestWidth,\n    int nDestHeight,\n    int xSrc,\n    int ySrc,\n    int nSrcWidth,\n    int nSrcHeight,\n    DWORD dwROP = SRCCOPY) const throw();\n\nBOOL StretchBlt(HDC hDestDC,\n    const RECT& rectDest,\n    const RECT& rectSrc,\n    DWORD dwROP = SRCCOPY) const throw();\n```  \n  \n### Parameters  \n `hDestDC`  \n A handle to the destination device context.  \n  \n `xDest`  \n The x-coordinate, in logical units, of the upper left corner of the destination rectangle.  \n  \n `yDest`  \n The y-coordinate, in logical units, of the upper left corner of the destination rectangle.  \n  \n `nDestWidth`  \n The width, in logical units, of the destination rectangle.  \n  \n `nDestHeight`  \n The height, in logical units, of the destination rectangle.  \n  \n `dwROP`  \n The raster operation to be performed. Raster-operation codes define exactly how to combine the bits of the source, the destination, and the pattern (as defined by the currently selected brush) to form the destination. See [BitBlt](http://msdn.microsoft.com/library/windows/desktop/dd183370) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)] for a list of other raster-operation codes and their descriptions.  \n  \n `rectDest`  \n A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure, identifying the destination.  \n  \n `xSrc`  \n The x-coordinate, in logical units, of the upper left corner of the source rectangle.  \n  \n `ySrc`  \n The y-coordinate, in logical units, of the upper left corner of the source rectangle.  \n  \n `nSrcWidth`  \n The width, in logical units, of the source rectangle.  \n  \n `nSrcHeight`  \n The height, in logical units, of the source rectangle.  \n  \n `rectSrc`  \n A reference to a `RECT` structure, identifying the source.  \n  \n### Return Value  \n Nonzero if successful, otherwise 0.  \n  \n### Remarks  \n For more information, see [StretchBlt](http://msdn.microsoft.com/library/windows/desktop/dd145120) in the [!INCLUDE[winSDK](./includes/winsdk_md.md)].  \n  \n##  <a name=\"cimage__transparentblt\"></a>  CImage::TransparentBlt  \n Copies a bitmap from the source device context to this current device context.  \n  \n```\nBOOL TransparentBlt(HDC hDestDC,\n    int xDest,\n    int yDest,\n    int nDestWidth,\n    int nDestHeight,\n    UINT crTransparent = CLR_INVALID) const throw();\n\nBOOL TransparentBlt(HDC hDestDC,\n    const RECT& rectDest,\n    UINT crTransparent = CLR_INVALID) const throw();\n\nBOOL TransparentBlt(HDC hDestDC,\n    int xDest,\n    int yDest,\n    int nDestWidth,\n    int nDestHeight,\n    int xSrc,\n    int ySrc,\n    int nSrcWidth,\n    int nSrcHeight,\n    UINT crTransparent = CLR_INVALID) const throw();\n\nBOOL TransparentBlt(HDC hDestDC,\n    const RECT& rectDest,\n    const RECT& rectSrc,\n    UINT crTransparent = CLR_INVALID) const throw();\n```  \n  \n### Parameters  \n `hDestDC`  \n A handle to the destination device context.  \n  \n `xDest`  \n The x-coordinate, in logical units, of the upper left corner of the destination rectangle.  \n  \n `yDest`  \n The y-coordinate, in logical units, of the upper left corner of the destination rectangle.  \n  \n `nDestWidth`  \n The width, in logical units, of the destination rectangle.  \n  \n `nDestHeight`  \n The height, in logical units, of the destination rectangle.  \n  \n *crTransparent*  \n The color in the source bitmap to treat as transparent. By default, **CLR_INVALID**, indicating that the color currently set as the transparent color of the image should be used.  \n  \n `rectDest`  \n A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure, identifying the destination.  \n  \n `xSrc`  \n The x-coordinate, in logical units, of the upper left corner of the source rectangle.  \n  \n `ySrc`  \n The y-coordinate, in logical units, of the upper left corner of the source rectangle.  \n  \n `nSrcWidth`  \n The width, in logical units, of the source rectangle.  \n  \n `nSrcHeight`  \n The height, in logical units, of the source rectangle.  \n  \n `rectSrc`  \n A reference to a `RECT` structure, identifying the source.  \n  \n### Return Value  \n **TRUE** if successful, otherwise **FALSE**.  \n  \n### Remarks  \n `TransparentBlt` is supported for source bitmaps of 4 bits per pixel and 8 bits per pixel. Use [CImage::AlphaBlend](#cimage__alphablend) to specify 32 bits-per-pixel bitmaps with transparency.  \n  \n  \n### Example  \n\n```cpp\n// Performs a transparent blit from the source image to the destination \n// image using the images' current transparency settings\nBOOL TransparentBlt(CImage* pSrcImage, CImage* pDstImage, int xDest, int yDest,\n   int nDestWidth, int nDestHeight)\n{\n   HDC hDstDC = NULL;\n   BOOL bResult;\n\n   if(pSrcImage == NULL || pDstImage == NULL)\n   {\n      // Invalid parameter\n      return FALSE;\n   }\n\n   // Obtain a DC to the destination image\n   hDstDC = pDstImage->GetDC();\n\n   // Perform the blit\n   bResult = pSrcImage->TransparentBlt(hDstDC, xDest, yDest, nDestWidth, nDestHeight);\n\n   // Release the destination DC\n   pDstImage->ReleaseDC();\n\n   return bResult;\n}\n```\n\n  \n## See Also  \n [MMXSwarm Sample](../../visual-cpp-samples.md)   \n [SimpleImage Sample](../../visual-cpp-samples.md)   \n [Device-Independent Bitmaps](http://msdn.microsoft.com/library/windows/desktop/dd183562)   \n [CreateDIBSection](http://msdn.microsoft.com/library/windows/desktop/dd183494)   \n [ATL COM Desktop Components](../../atl/atl-com-desktop-components.md)\n [Device-Independent Bitmaps](http://msdn.microsoft.com/library/windows/desktop/dd183562)   \n [CreateDIBSection](http://msdn.microsoft.com/library/windows/desktop/dd183494)   \n\n\n\n\n\n\n\n\n\n"}