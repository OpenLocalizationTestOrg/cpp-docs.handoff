{"nodes":[{"pos":[12,41],"content":"CAdapt Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAdapt Class | Microsoft Docs","pos":[0,29]}]},{"pos":[780,792],"content":"CAdapt Class","linkify":"CAdapt Class","nodes":[{"content":"CAdapt Class","pos":[0,12]}]},{"content":"This template is used to wrap classes that redefine the address-of operator to return something other than the address of the object.","pos":[793,926]},{"pos":[935,941],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[998,1008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The adapted type.","pos":[1019,1036]},{"pos":[1045,1052],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1062,1081],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1088,1092]},{"content":"Description","pos":[1093,1104]},{"pos":[1142,1175],"content":"<bpt id=\"p1\">[</bpt>CAdapt::CAdapt<ept id=\"p1\">](#cadapt__cadapt)</ept>","source":"[CAdapt::CAdapt](#cadapt__cadapt)"},{"content":"The constructor.","pos":[1176,1192]},{"pos":[1203,1219],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1226,1230]},{"content":"Description","pos":[1231,1242]},{"pos":[1280,1338],"content":"<bpt id=\"p1\">[</bpt>CAdapt::operator const T&amp;<ept id=\"p1\">](#cadapt__operator_const_t_amp)</ept>","source":"[CAdapt::operator const T&](#cadapt__operator_const_t_amp)"},{"pos":[1339,1376],"content":"Returns a <ph id=\"ph1\">`const`</ph> reference to <ph id=\"ph2\">`m_T`</ph>.","source":"Returns a `const` reference to `m_T`."},{"pos":[1381,1427],"content":"<bpt id=\"p1\">[</bpt>CAdapt::operator T&amp;<ept id=\"p1\">](#cadapt__operator_t_amp)</ept>","source":"[CAdapt::operator T&](#cadapt__operator_t_amp)"},{"pos":[1428,1457],"content":"Returns a reference to <ph id=\"ph1\">`m_T`</ph>.","source":"Returns a reference to `m_T`."},{"pos":[1462,1504],"content":"<bpt id=\"p1\">[</bpt>CAdapt::operator &lt;<ept id=\"p1\">](#cadapt__operator_lt)</ept>","source":"[CAdapt::operator <](#cadapt__operator_lt)"},{"pos":[1505,1555],"content":"Compares an object of the adapted type with <ph id=\"ph1\">`m_T`</ph>.","source":"Compares an object of the adapted type with `m_T`."},{"pos":[1560,1602],"content":"<bpt id=\"p1\">[</bpt>CAdapt::operator =<ept id=\"p1\">](#cadapt__operator_eq)</ept>","source":"[CAdapt::operator =](#cadapt__operator_eq)"},{"pos":[1603,1650],"content":"Assigns an object of the adapted type to <ph id=\"ph1\">`m_T`</ph>.","source":"Assigns an object of the adapted type to `m_T`."},{"pos":[1655,1701],"content":"<bpt id=\"p1\">[</bpt>CAdapt::operator ==<ept id=\"p1\">](#cadapt__operator_eq_eq)</ept>","source":"[CAdapt::operator ==](#cadapt__operator_eq_eq)"},{"pos":[1702,1752],"content":"Compares an object of the adapted type with <ph id=\"ph1\">`m_T`</ph>.","source":"Compares an object of the adapted type with `m_T`."},{"pos":[1763,1782],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[1789,1793]},{"content":"Description","pos":[1794,1805]},{"pos":[1843,1870],"content":"<bpt id=\"p1\">[</bpt>CAdapt::m_T<ept id=\"p1\">](#cadapt__m_t)</ept>","source":"[CAdapt::m_T](#cadapt__m_t)"},{"content":"The data being adapted.","pos":[1871,1894]},{"pos":[1904,1911],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CAdapt`</ph> is a simple template used to wrap classes that redefine the address-of operator ( <ph id=\"ph2\">`operator &amp;`</ph>) to return something other than the address of the object.","pos":[1915,2077],"source":"`CAdapt` is a simple template used to wrap classes that redefine the address-of operator ( `operator &`) to return something other than the address of the object."},{"content":"Examples of such classes include ATL's <ph id=\"ph1\">`CComBSTR`</ph>, <ph id=\"ph2\">`CComPtr`</ph>, and <ph id=\"ph3\">`CComQIPtr`</ph> classes, and the compiler COM support class, <ph id=\"ph4\">`_com_ptr_t`</ph>.","pos":[2078,2214],"source":" Examples of such classes include ATL's `CComBSTR`, `CComPtr`, and `CComQIPtr` classes, and the compiler COM support class, `_com_ptr_t`."},{"content":"These classes all redefine the address-of operator to return the address of one of their data members (a <ph id=\"ph1\">`BSTR`</ph> in the case of <ph id=\"ph2\">`CComBSTR`</ph>, and an interface pointer in the case of the other classes).","pos":[2215,2413],"source":" These classes all redefine the address-of operator to return the address of one of their data members (a `BSTR` in the case of `CComBSTR`, and an interface pointer in the case of the other classes)."},{"content":"<ph id=\"ph1\">`CAdapt`</ph>'s primary role is to hide the address-of operator defined by class <ph id=\"ph2\">`T`</ph>, yet still retain the characteristics of the adapted class.","pos":[2420,2559],"source":"`CAdapt`'s primary role is to hide the address-of operator defined by class `T`, yet still retain the characteristics of the adapted class."},{"content":"<ph id=\"ph1\">`CAdapt`</ph> fulfils this role by holding a public member, <bpt id=\"p1\">[</bpt>m_T<ept id=\"p1\">](#cadapt__m_t)</ept>, of type <ph id=\"ph2\">`T`</ph>, and by defining conversion operators, comparison operators, and a copy constructor to allow specializations of <ph id=\"ph3\">`CAdapt`</ph> to be treated as if they are objects of type <ph id=\"ph4\">`T`</ph>.","pos":[2560,2818],"source":"`CAdapt` fulfils this role by holding a public member, [m_T](#cadapt__m_t), of type `T`, and by defining conversion operators, comparison operators, and a copy constructor to allow specializations of `CAdapt` to be treated as if they are objects of type `T`."},{"content":"The adapter class <ph id=\"ph1\">`CAdapt`</ph> is useful because some container-style classes expect to be able to obtain the addresses of their contained objects using the address-of operator.","pos":[2825,2998],"source":"The adapter class `CAdapt` is useful because some container-style classes expect to be able to obtain the addresses of their contained objects using the address-of operator."},{"content":"The redefinition of the address-of operator can confound this requirement, typically causing compilation errors and preventing the use of the non-adapted type with classes that expect it to \"just work\".","pos":[2999,3201]},{"content":"<ph id=\"ph1\">`CAdapt`</ph> provides a way around those problems.","pos":[3202,3248],"source":"`CAdapt` provides a way around those problems."},{"content":"Typically, you will use <ph id=\"ph1\">`CAdapt`</ph> when you want to store <ph id=\"ph2\">`CComBSTR`</ph>, <ph id=\"ph3\">`CComPtr`</ph>, <ph id=\"ph4\">`CComQIPtr`</ph>, or <ph id=\"ph5\">`_com_ptr_t`</ph> objects in a container-style class.","pos":[3255,3398],"source":"Typically, you will use `CAdapt` when you want to store `CComBSTR`, `CComPtr`, `CComQIPtr`, or `_com_ptr_t` objects in a container-style class."},{"content":"This was most commonly necessary for C++ Standard Library containers prior to support for the C++11 Standard, but C++11 Standard Library containers automatically work with types that have overloaded <ph id=\"ph1\">`operator&amp;()`</ph>.","pos":[3399,3612],"source":" This was most commonly necessary for C++ Standard Library containers prior to support for the C++11 Standard, but C++11 Standard Library containers automatically work with types that have overloaded `operator&()`."},{"content":"The Standard Library achieves this by internally using <bpt id=\"p1\">[</bpt>std::addressof()<ept id=\"p1\">](http://msdn.microsoft.com/library/6243ddc8-486a-4961-8b0c-33e9dc2e0648)</ept> to get the true addresses of objects.","pos":[3613,3796],"source":" The Standard Library achieves this by internally using [std::addressof()](http://msdn.microsoft.com/library/6243ddc8-486a-4961-8b0c-33e9dc2e0648) to get the true addresses of objects."},{"pos":[3805,3817],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3821,3844],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcomcli.h","source":"**Header:** atlcomcli.h"},{"pos":[3854,3899],"content":"<bpt id=\"p1\">&lt;a name=\"cadapt__cadapt\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAdapt::CAdapt","linkify":"<a name=\"cadapt__cadapt\"></a>  CAdapt::CAdapt","source":"<a name=\"cadapt__cadapt\"></a>  CAdapt::CAdapt"},{"content":"The constructors allow an adapter object to be default constructed, copied from an object of the adapted type, or copied from another adapter object.","pos":[3903,4052]},{"pos":[4142,4152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A variable of the type being adapted to be copied into the newly constructed adapter object.","pos":[4166,4258]},{"content":"<bpt id=\"p1\">*</bpt>rSrCA<ept id=\"p1\">*</ept>","pos":[4265,4272],"source":"*rSrCA*"},{"content":"An adapter object whose contained data should be copied into the newly constructed adapter object.","pos":[4276,4374]},{"pos":[4384,4423],"content":"<bpt id=\"p1\">&lt;a name=\"cadapt__m_t\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAdapt::m_T","linkify":"<a name=\"cadapt__m_t\"></a>  CAdapt::m_T","source":"<a name=\"cadapt__m_t\"></a>  CAdapt::m_T"},{"content":"Holds the data being adapted.","pos":[4427,4456]},{"pos":[4486,4493],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4497,4663],"content":"This <bpt id=\"p1\">**</bpt>public<ept id=\"p1\">**</ept> data member can be accessed directly or indirectly with <bpt id=\"p2\">[</bpt>operator const T&amp;<ept id=\"p2\">](#cadapt__operator_const_t_amp)</ept> and <bpt id=\"p3\">[</bpt>operator T&amp;<ept id=\"p3\">](#cadapt__operator_t_amp)</ept>.","source":"This **public** data member can be accessed directly or indirectly with [operator const T&](#cadapt__operator_const_t_amp) and [operator T&](#cadapt__operator_t_amp)."},{"pos":[4673,4747],"content":"<bpt id=\"p1\">&lt;a name=\"cadapt__operator_const_t_amp\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAdapt::operator const T<ph id=\"ph1\">&amp;amp;</ph>","linkify":"<a name=\"cadapt__operator_const_t_amp\"></a>  CAdapt::operator const T&amp;","source":"<a name=\"cadapt__operator_const_t_amp\"></a>  CAdapt::operator const T&amp;"},{"pos":[4751,4894],"content":"Returns a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> reference to the <bpt id=\"p2\">[</bpt>m_T<ept id=\"p2\">](#cadapt__m_t)</ept> member, allowing the adapter object to be treated as if it were an object of type <ph id=\"ph1\">`T`</ph>.","source":"Returns a **const** reference to the [m_T](#cadapt__m_t) member, allowing the adapter object to be treated as if it were an object of type `T`."},{"content":"```operator const T&amp;() const;","pos":[4900,4929],"source":"```operator const T&() const;"},{"pos":[5239,5251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5255,5276],"content":"A reference to <ph id=\"ph1\">`m_T`</ph>.","source":"A reference to `m_T`."},{"pos":[5286,5343],"content":"<bpt id=\"p1\">&lt;a name=\"cadapt__operator_lt\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAdapt::operator <ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"cadapt__operator_lt\"></a>  CAdapt::operator &lt;","source":"<a name=\"cadapt__operator_lt\"></a>  CAdapt::operator &lt;"},{"pos":[5347,5411],"content":"Compares an object of the adapted type with <bpt id=\"p1\">[</bpt>m_T<ept id=\"p1\">](#cadapt__m_t)</ept>.","source":"Compares an object of the adapted type with [m_T](#cadapt__m_t)."},{"pos":[5471,5481],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to the object to be compared.","pos":[5495,5536]},{"pos":[5546,5558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5562,5616],"content":"The result of the comparison between <ph id=\"ph1\">`m_T`</ph> and <ph id=\"ph2\">`rSrc`</ph>.","source":"The result of the comparison between `m_T` and `rSrc`."},{"pos":[5626,5680],"content":"<bpt id=\"p1\">&lt;a name=\"cadapt__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAdapt::operator =","linkify":"<a name=\"cadapt__operator_eq\"></a>  CAdapt::operator =","source":"<a name=\"cadapt__operator_eq\"></a>  CAdapt::operator ="},{"pos":[5684,5816],"content":"The assignment operator assigns the argument, <ph id=\"ph1\">`rSrc`</ph>, to the data member <bpt id=\"p1\">[</bpt>m_T<ept id=\"p1\">](#cadapt__m_t)</ept> and returns the current adapter object.","source":"The assignment operator assigns the argument, `rSrc`, to the data member [m_T](#cadapt__m_t) and returns the current adapter object."},{"pos":[5874,5884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to an object of the adapted type to be copied.","pos":[5898,5956]},{"pos":[5966,5978],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to the current object.","pos":[5982,6016]},{"pos":[6026,6084],"content":"<bpt id=\"p1\">&lt;a name=\"cadapt__operator_eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAdapt::operator ==","linkify":"<a name=\"cadapt__operator_eq_eq\"></a>  CAdapt::operator ==","source":"<a name=\"cadapt__operator_eq_eq\"></a>  CAdapt::operator =="},{"pos":[6088,6152],"content":"Compares an object of the adapted type with <bpt id=\"p1\">[</bpt>m_T<ept id=\"p1\">](#cadapt__m_t)</ept>.","source":"Compares an object of the adapted type with [m_T](#cadapt__m_t)."},{"pos":[6214,6224],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A reference to the object to be compared.","pos":[6238,6279]},{"pos":[6289,6301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6305,6359],"content":"The result of the comparison between <ph id=\"ph1\">`m_T`</ph> and <ph id=\"ph2\">`rSrc`</ph>.","source":"The result of the comparison between `m_T` and `rSrc`."},{"pos":[6368,6376],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6380,6429],"content":"<bpt id=\"p1\">[</bpt>Class Overview<ept id=\"p1\">](../../atl/atl-class-overview.md)</ept>","source":"[Class Overview](../../atl/atl-class-overview.md)"}],"content":"---\ntitle: \"CAdapt Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CAdapt\"\n  - \"ATL.CAdapt<T>\"\n  - \"ATL::CAdapt\"\n  - \"ATL::CAdapt<T>\"\n  - \"CAdapt\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"address-of operator\"\n  - \"adapter objects\"\n  - \"& operator, address-of operator\"\n  - \"CAdapt class\"\nms.assetid: 0bb695a5-72fe-43d1-8f39-7e4da6e34765\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# CAdapt Class\nThis template is used to wrap classes that redefine the address-of operator to return something other than the address of the object.  \n  \n## Syntax  \n  \n```\ntemplate <class T>  class CAdapt\n```  \n  \n#### Parameters  \n `T`  \n The adapted type.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAdapt::CAdapt](#cadapt__cadapt)|The constructor.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAdapt::operator const T&](#cadapt__operator_const_t_amp)|Returns a `const` reference to `m_T`.|  \n|[CAdapt::operator T&](#cadapt__operator_t_amp)|Returns a reference to `m_T`.|  \n|[CAdapt::operator <](#cadapt__operator_lt)|Compares an object of the adapted type with `m_T`.|  \n|[CAdapt::operator =](#cadapt__operator_eq)|Assigns an object of the adapted type to `m_T`.|  \n|[CAdapt::operator ==](#cadapt__operator_eq_eq)|Compares an object of the adapted type with `m_T`.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAdapt::m_T](#cadapt__m_t)|The data being adapted.|  \n  \n## Remarks  \n `CAdapt` is a simple template used to wrap classes that redefine the address-of operator ( `operator &`) to return something other than the address of the object. Examples of such classes include ATL's `CComBSTR`, `CComPtr`, and `CComQIPtr` classes, and the compiler COM support class, `_com_ptr_t`. These classes all redefine the address-of operator to return the address of one of their data members (a `BSTR` in the case of `CComBSTR`, and an interface pointer in the case of the other classes).  \n  \n `CAdapt`'s primary role is to hide the address-of operator defined by class `T`, yet still retain the characteristics of the adapted class. `CAdapt` fulfils this role by holding a public member, [m_T](#cadapt__m_t), of type `T`, and by defining conversion operators, comparison operators, and a copy constructor to allow specializations of `CAdapt` to be treated as if they are objects of type `T`.  \n  \n The adapter class `CAdapt` is useful because some container-style classes expect to be able to obtain the addresses of their contained objects using the address-of operator. The redefinition of the address-of operator can confound this requirement, typically causing compilation errors and preventing the use of the non-adapted type with classes that expect it to \"just work\". `CAdapt` provides a way around those problems.  \n  \n Typically, you will use `CAdapt` when you want to store `CComBSTR`, `CComPtr`, `CComQIPtr`, or `_com_ptr_t` objects in a container-style class. This was most commonly necessary for C++ Standard Library containers prior to support for the C++11 Standard, but C++11 Standard Library containers automatically work with types that have overloaded `operator&()`. The Standard Library achieves this by internally using [std::addressof()](http://msdn.microsoft.com/library/6243ddc8-486a-4961-8b0c-33e9dc2e0648) to get the true addresses of objects.  \n  \n## Requirements  \n **Header:** atlcomcli.h  \n  \n##  <a name=\"cadapt__cadapt\"></a>  CAdapt::CAdapt  \n The constructors allow an adapter object to be default constructed, copied from an object of the adapted type, or copied from another adapter object.  \n  \n```\nCAdapt();\nCAdapt(const T& rSrc);\n\n    CAdapt(const CAdapt& rSrCA);\n```  \n  \n### Parameters  \n `rSrc`  \n A variable of the type being adapted to be copied into the newly constructed adapter object.  \n  \n *rSrCA*  \n An adapter object whose contained data should be copied into the newly constructed adapter object.  \n  \n##  <a name=\"cadapt__m_t\"></a>  CAdapt::m_T  \n Holds the data being adapted.  \n  \n```\nT m_T;\n```  \n  \n### Remarks  \n This **public** data member can be accessed directly or indirectly with [operator const T&](#cadapt__operator_const_t_amp) and [operator T&](#cadapt__operator_t_amp).  \n  \n##  <a name=\"cadapt__operator_const_t_amp\"></a>  CAdapt::operator const T&amp;  \n Returns a **const** reference to the [m_T](#cadapt__m_t) member, allowing the adapter object to be treated as if it were an object of type `T`.  \n  \n```operator const T&() const;\n```  \n  \n### Return Value  \n A **const** reference to `m_T`.  \n  \n##  <a name=\"cadapt__operator_t_amp\"></a>  CAdapt::operator T&amp;  \n Returns a reference to the [m_T](#cadapt__m_t) member, allowing the adapter object to be treated as if it were an object of type `T`.  \n  \n```operator T&();\n```     \n  \n### Return Value  \n A reference to `m_T`.  \n  \n##  <a name=\"cadapt__operator_lt\"></a>  CAdapt::operator &lt;  \n Compares an object of the adapted type with [m_T](#cadapt__m_t).  \n  \n```\nbool operator<(const T& rSrc) const;\n```  \n  \n### Parameters  \n `rSrc`  \n A reference to the object to be compared.  \n  \n### Return Value  \n The result of the comparison between `m_T` and `rSrc`.  \n  \n##  <a name=\"cadapt__operator_eq\"></a>  CAdapt::operator =  \n The assignment operator assigns the argument, `rSrc`, to the data member [m_T](#cadapt__m_t) and returns the current adapter object.  \n  \n```\nCAdapt& operator= (const T& rSrc);\n```  \n  \n### Parameters  \n `rSrc`  \n A reference to an object of the adapted type to be copied.  \n  \n### Return Value  \n A reference to the current object.  \n  \n##  <a name=\"cadapt__operator_eq_eq\"></a>  CAdapt::operator ==  \n Compares an object of the adapted type with [m_T](#cadapt__m_t).  \n  \n```\nbool operator== (const T& rSrc) const;\n```  \n  \n### Parameters  \n `rSrc`  \n A reference to the object to be compared.  \n  \n### Return Value  \n The result of the comparison between `m_T` and `rSrc`.  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)\n"}