<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb8b0db0bed4e44cf68e30a3207cb069948ebbd0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\single-inheritance.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11f4940c42e6e49441c71d1fe93400964702d742</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbdeca777eb42ed576458374335caab91a34a362</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Single Inheritance | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Single Inheritance</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In "single inheritance," a common form of inheritance, classes have only one base class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Consider the relationship illustrated in the following figure.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Basic single&amp;#45;inheritance graph</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Simple Single-Inheritance Graph</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Note the progression from general to specific in the figure.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Another common attribute found in the design of most class hierarchies is that the derived class has a "kind of" relationship with the base class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the figure, a <ph id="ph1">`Book`</ph> is a kind of a <ph id="ph2">`PrintedDocument`</ph>, and a <ph id="ph3">`PaperbackBook`</ph> is a kind of a <ph id="ph4">`book`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>One other item of note in the figure: <ph id="ph1">`Book`</ph> is both a derived class (from <ph id="ph2">`PrintedDocument`</ph>) and a base class (<ph id="ph3">`PaperbackBook`</ph> is derived from <ph id="ph4">`Book`</ph>).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A skeletal declaration of such a class hierarchy is shown in the following example:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>is considered a "direct base" class to <ph id="ph1">`Book`</ph>; it is an "indirect base" class to <ph id="ph2">`PaperbackBook`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The difference is that a direct base class appears in the base list of a class declaration and an indirect base does not.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The base class from which each class is derived is declared before the declaration of the derived class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It is not sufficient to provide a forward-referencing declaration for a base class; it must be a complete declaration.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the preceding example, the access specifier <bpt id="p1">**</bpt>public<ept id="p1">**</ept> is used.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The meaning of public, protected, and private inheritance is described in <bpt id="p1">[</bpt>Member-Access Control.<ept id="p1">](../cpp/member-access-control-cpp.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A class can serve as the base class for many specific classes, as illustrated in the following figure.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Directed acyclic graph</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Sample of Directed Acyclic Graph</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the diagram shown above, called a "directed acyclic graph" (or "DAG"), some of the classes are base classes for more than one derived class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, the reverse is not true: there is only one direct base class for any given derived class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The graph in the figure depicts a "single inheritance" structure.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Directed acyclic graphs are not unique to single inheritance.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>They are also used to depict multiple-inheritance graphs.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This topic is covered in <bpt id="p1">[</bpt>Multiple Inheritance<ept id="p1">](http://msdn.microsoft.com/en-us/3b74185e-2beb-4e29-8684-441e51d2a2ca)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In inheritance, the derived class contains the members of the base class plus any new members you add.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As a result, a derived class can refer to members of the base class (unless those members are redefined in the derived class).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The scope-resolution operator (<ph id="ph1">`::`</ph>) can be used to refer to members of direct or indirect base classes when those members have been redefined in the derived class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Consider this example:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Note that the constructor for <ph id="ph1">`Book`</ph>, (<ph id="ph2">`Book::Book`</ph>), has access to the data member, <ph id="ph3">`Name`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In a program, an object of type <ph id="ph1">`Book`</ph> can be created and used as follows:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>As the preceding example demonstrates, class-member and inherited data and functions are used identically.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the implementation for class <ph id="ph1">`Book`</ph> calls for a reimplementation of the <ph id="ph2">`PrintNameOf`</ph> function, the function that belongs to the <ph id="ph3">`Document`</ph> class can be called only by using the scope-resolution (<ph id="ph4">`::`</ph>) operator:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Pointers and references to derived classes can be implicitly converted to pointers and references to their base classes if there is an accessible, unambiguous base class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following code demonstrates this concept using pointers (the same principle applies to references):</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the preceding example, different types are created.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, because these types are all derived from the <ph id="ph1">`Document`</ph> class, there is an implicit conversion to <ph id="ph2">`Document *`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>As a result, <ph id="ph1">`DocLib`</ph> is a "heterogeneous list" (a list in which not all objects are of the same type) containing different kinds of objects.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`Document`</ph> class has a <ph id="ph2">`PrintNameOf`</ph> function, it can print the name of each book in the library, although it may omit some of the information specific to the type of document (page count for <ph id="ph3">`Book`</ph>, number of bytes for <ph id="ph4">`HelpFile`</ph>, and so on).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Forcing the base class to implement a function such as <ph id="ph1">`PrintNameOf`</ph> is often not the best design.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Virtual Functions<ept id="p1">](../cpp/virtual-functions.md)</ept> offers other design alternatives.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>