{"nodes":[{"pos":[12,34],"content":"_gcvt | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_gcvt | Microsoft Docs","pos":[0,22]}]},{"content":"_gcvt","pos":[1148,1153]},{"content":"Converts a floating-point value to a string, which it stores in a buffer.","pos":[1154,1227]},{"content":"A more secure version of this function is available; see <bpt id=\"p1\">[</bpt>_gcvt_s<ept id=\"p1\">](../../c-runtime-library/reference/gcvt-s.md)</ept>.","pos":[1228,1340],"source":" A more secure version of this function is available; see [_gcvt_s](../../c-runtime-library/reference/gcvt-s.md)."},{"content":"Syntax","pos":[1349,1355]},{"content":"Parameters","pos":[1457,1467]},{"content":"Value to be converted.","pos":[1482,1504]},{"content":"Number of significant digits stored.","pos":[1523,1559]},{"content":"Storage location for the result.","pos":[1578,1610]},{"content":"Return Value","pos":[1619,1631]},{"pos":[1643,1685],"content":"returns a pointer to the string of digits."},{"content":"Remarks","pos":[1694,1701]},{"content":"The <ph id=\"ph1\">`_gcvt`</ph> function converts a floating-point <ph id=\"ph2\">`value`</ph> to a character string (which includes a decimal point and a possible sign byte) and stores the string in <ph id=\"ph3\">`buffer`</ph>.","pos":[1705,1874],"source":"The `_gcvt` function converts a floating-point `value` to a character string (which includes a decimal point and a possible sign byte) and stores the string in `buffer`."},{"content":"The <ph id=\"ph1\">`buffer`</ph> should be large enough to accommodate the converted value plus a terminating null character, which is appended automatically.","pos":[1875,2013],"source":" The `buffer` should be large enough to accommodate the converted value plus a terminating null character, which is appended automatically."},{"content":"If a buffer size of <ph id=\"ph1\">`digits`</ph> + 1 is used, the function overwrites the end of the buffer.","pos":[2014,2102],"source":" If a buffer size of `digits` + 1 is used, the function overwrites the end of the buffer."},{"content":"This is because the converted string includes a decimal point and can contain sign and exponent information.","pos":[2103,2211]},{"content":"There is no provision for overflow.","pos":[2212,2247]},{"content":"attempts to produce <ph id=\"ph1\">`digits`</ph> digits in decimal format.","pos":[2256,2310],"source":" attempts to produce `digits` digits in decimal format."},{"content":"If it cannot, it produces <ph id=\"ph1\">`digits`</ph> digits in exponential format.","pos":[2311,2375],"source":" If it cannot, it produces `digits` digits in exponential format."},{"content":"Trailing zeros might be suppressed in the conversion.","pos":[2376,2429]},{"pos":[2436,2514],"content":"A <ph id=\"ph1\">`buffer`</ph> of length <ph id=\"ph2\">`_CVTBUFSIZE`</ph> is sufficient for any floating point value.","source":"A `buffer` of length `_CVTBUFSIZE` is sufficient for any floating point value."},{"content":"This function validates its parameters.","pos":[2521,2560]},{"content":"If <ph id=\"ph1\">`buffer`</ph> is <ph id=\"ph2\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2561,2714],"source":" If `buffer` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, this function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns <ph id=\"ph3\">`NULL`</ph>.","pos":[2715,2810],"source":" If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `NULL`."},{"content":"Requirements","pos":[2819,2831]},{"content":"Routine","pos":[2838,2845]},{"content":"Required header","pos":[2846,2861]},{"content":"stdlib.h&gt;","pos":[2916,2925],"source":"stdlib.h>"},{"pos":[2933,3051],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[3060,3067]},{"content":".NET Framework Equivalent","pos":[4889,4914]},{"content":"System::Convert::ToString","pos":[4919,4944]},{"content":"See Also","pos":[5025,5033]},{"content":"Data Conversion","pos":[5038,5053]},{"content":"Floating-Point Support","pos":[5104,5126]},{"content":"atof, _atof_l, _wtof, _wtof_l","pos":[5184,5213]},{"content":"_ecvt","pos":[5282,5287]},{"content":"_fcvt","pos":[5337,5342]}],"content":"---\ntitle: \"_gcvt | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_gcvt\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_gcvt\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_gcvt function\"\n  - \"_CVTBUFSIZE\"\n  - \"gcvt function\"\n  - \"floating-point functions, converting number to string\"\n  - \"numbers, converting to strings\"\n  - \"conversions, floating point to strings\"\n  - \"strings [C++], converting from floating point\"\n  - \"CVTBUFSIZE\"\nms.assetid: 5761411e-c06b-409a-912f-810fe7f4bcb5\ncaps.latest.revision: 25\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _gcvt\nConverts a floating-point value to a string, which it stores in a buffer. A more secure version of this function is available; see [_gcvt_s](../../c-runtime-library/reference/gcvt-s.md).  \n  \n## Syntax  \n  \n```  \nchar *_gcvt(   \n   double value,  \n   int digits,  \n   char *buffer   \n);  \n```  \n  \n#### Parameters  \n `value`  \n Value to be converted.  \n  \n `digits`  \n Number of significant digits stored.  \n  \n `buffer`  \n Storage location for the result.  \n  \n## Return Value  \n `_gcvt` returns a pointer to the string of digits.  \n  \n## Remarks  \n The `_gcvt` function converts a floating-point `value` to a character string (which includes a decimal point and a possible sign byte) and stores the string in `buffer`. The `buffer` should be large enough to accommodate the converted value plus a terminating null character, which is appended automatically. If a buffer size of `digits` + 1 is used, the function overwrites the end of the buffer. This is because the converted string includes a decimal point and can contain sign and exponent information. There is no provision for overflow. `_gcvt` attempts to produce `digits` digits in decimal format. If it cannot, it produces `digits` digits in exponential format. Trailing zeros might be suppressed in the conversion.  \n  \n A `buffer` of length `_CVTBUFSIZE` is sufficient for any floating point value.  \n  \n This function validates its parameters. If `buffer` is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, this function sets `errno` to `EINVAL` and returns `NULL`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_gcvt`|\\<stdlib.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_gcvt.c  \n// compile with: /W3  \n#include <stdlib.h>  \n#include <stdio.h>  \n#include <string.h>  \n  \nint main( void )  \n{  \n   char buffer[_CVTBUFSIZE];  \n   double value = -1234567890.123;  \n   printf( \"The following numbers were converted by _gcvt(value,12,buffer):\\n\" );  \n   _gcvt( value, 12, buffer ); // C4996  \n   // Note: _gcvt is deprecated; consider using _gcvt_s instead  \n   printf( \"buffer: '%s' (%d chars)\\n\", buffer, strlen(buffer) );  \n   value *= 10;  \n   _gcvt( value, 12, buffer ); // C4996  \n   printf( \"buffer: '%s' (%d chars)\\n\", buffer, strlen(buffer) );  \n   value *= 10;  \n   _gcvt( value, 12, buffer ); // C4996  \n   printf( \"buffer: '%s' (%d chars)\\n\", buffer, strlen(buffer) );  \n   value *= 10;  \n   _gcvt( value, 12, buffer ); // C4996  \n   printf( \"buffer: '%s' (%d chars)\\n\", buffer, strlen(buffer) );  \n  \n   printf( \"\\n\" );  \n   value = -12.34567890123;  \n   _gcvt( value, 12, buffer ); // C4996  \n   printf( \"buffer: '%s' (%d chars)\\n\", buffer, strlen(buffer) );  \n   value /= 10;  \n   _gcvt( value, 12, buffer ); // C4996  \n   printf( \"buffer: '%s' (%d chars)\\n\", buffer, strlen(buffer) );  \n   value /= 10;  \n   _gcvt( value, 12, buffer ); // C4996  \n   printf( \"buffer: '%s' (%d chars)\\n\", buffer, strlen(buffer) );  \n   value /= 10;  \n   _gcvt( value, 12, buffer ); // C4996  \n   printf( \"buffer: '%s' (%d chars)\\n\", buffer, strlen(buffer) );  \n}  \n```  \n  \n```Output  \nThe following numbers were converted by _gcvt(value,12,buffer):  \nbuffer: '-1234567890.12' (14 chars)  \nbuffer: '-12345678901.2' (14 chars)  \nbuffer: '-123456789012' (13 chars)  \nbuffer: '-1.23456789012e+012' (19 chars)  \n  \nbuffer: '-12.3456789012' (14 chars)  \nbuffer: '-1.23456789012' (14 chars)  \nbuffer: '-0.123456789012' (15 chars)  \nbuffer: '-1.23456789012e-002' (19 chars)  \n```  \n  \n## .NET Framework Equivalent  \n [System::Convert::ToString](https://msdn.microsoft.com/en-us/library/system.convert.tostring.aspx)  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [atof, _atof_l, _wtof, _wtof_l](../../c-runtime-library/reference/atof-atof-l-wtof-wtof-l.md)   \n [_ecvt](../../c-runtime-library/reference/ecvt.md)   \n [_fcvt](../../c-runtime-library/reference/fcvt.md)"}