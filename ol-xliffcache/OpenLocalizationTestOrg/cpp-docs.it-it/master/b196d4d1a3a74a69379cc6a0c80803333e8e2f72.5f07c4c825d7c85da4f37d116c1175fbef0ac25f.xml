{"nodes":[{"pos":[12,53],"content":"multiset::find (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"multiset::find (STL-CLR) | Microsoft Docs","pos":[0,41]}]},{"content":"multiset::find (STL/CLR)","pos":[629,653]},{"content":"Finds an element that matches a specified key.","pos":[654,700]},{"content":"Syntax","pos":[709,715]},{"content":"Parameters","pos":[772,782]},{"content":"key","pos":[786,789]},{"content":"Key value to search for.","pos":[793,817]},{"content":"Remarks","pos":[826,833]},{"content":"If at least one element in the controlled sequence has equivalent ordering with <ph id=\"ph1\">`key`</ph>, the member function returns an iterator designating one of those elements; otherwise it returns <bpt id=\"p1\">[</bpt>multiset::end (STL/CLR)<ept id=\"p1\">](../dotnet/multiset-end-stl-clr.md)</ept><ph id=\"ph2\">`()`</ph>.","pos":[837,1085],"source":"If at least one element in the controlled sequence has equivalent ordering with `key`, the member function returns an iterator designating one of those elements; otherwise it returns [multiset::end (STL/CLR)](../dotnet/multiset-end-stl-clr.md)`()`."},{"content":"You use it to locate an element currently in the controlled sequence that matches a specified key.","pos":[1086,1184]},{"content":"Example","pos":[1193,1200]},{"content":"Description","pos":[2030,2041]},{"pos":[2045,2115],"content":"Note that <ph id=\"ph1\">`find`</ph> does not guarantee which of several element it finds.","source":"Note that `find` does not guarantee which of several element it finds."},{"content":"Requirements","pos":[2124,2136]},{"pos":[2140,2165],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/set&gt;","source":"**Header:** \\<cliext/set>"},{"pos":[2172,2193],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2202,2210]},{"content":"multiset (STL/CLR)","pos":[2215,2233]},{"content":"multiset::equal_range (STL/CLR)","pos":[2271,2302]},{"content":"multiset::lower_bound (STL/CLR)","pos":[2352,2383]},{"content":"multiset::upper_bound (STL/CLR)","pos":[2433,2464]}],"content":"---\ntitle: \"multiset::find (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::multiset::find\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"find member [STL/CLR]\"\nms.assetid: 162c9002-fb34-44f9-8e42-6bacecd0ebbc\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# multiset::find (STL/CLR)\nFinds an element that matches a specified key.  \n  \n## Syntax  \n  \n```  \niterator find(key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n If at least one element in the controlled sequence has equivalent ordering with `key`, the member function returns an iterator designating one of those elements; otherwise it returns [multiset::end (STL/CLR)](../dotnet/multiset-end-stl-clr.md)`()`. You use it to locate an element currently in the controlled sequence that matches a specified key.  \n  \n## Example  \n  \n```  \n// cliext_multiset_find.cpp   \n// compile with: /clr   \n#include <cliext/set>   \n  \ntypedef cliext::multiset<wchar_t> Mymultiset;   \nint main()   \n    {   \n    Mymultiset c1;   \n    c1.insert(L'a');   \n    c1.insert(L'b');   \n    c1.insert(L'c');   \n  \n// display initial contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"find {0} = {1}\",   \n        L'A', c1.find(L'A') != c1.end());   \n    System::Console::WriteLine(\"find {0} = {1}\",   \n        L'b', *c1.find(L'b'));   \n    System::Console::WriteLine(\"find {0} = {1}\",   \n        L'C', c1.find(L'C') != c1.end());   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \nfind A = False  \nfind b = b  \nfind C = False  \n```  \n  \n## Description  \n Note that `find` does not guarantee which of several element it finds.  \n  \n## Requirements  \n **Header:** \\<cliext/set>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [multiset (STL/CLR)](../dotnet/multiset-stl-clr.md)   \n [multiset::equal_range (STL/CLR)](../dotnet/multiset-equal-range-stl-clr.md)   \n [multiset::lower_bound (STL/CLR)](../dotnet/multiset-lower-bound-stl-clr.md)   \n [multiset::upper_bound (STL/CLR)](../dotnet/multiset-upper-bound-stl-clr.md)"}