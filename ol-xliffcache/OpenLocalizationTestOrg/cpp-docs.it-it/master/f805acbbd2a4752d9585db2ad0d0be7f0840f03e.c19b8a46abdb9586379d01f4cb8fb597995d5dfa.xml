{"nodes":[{"pos":[12,49],"content":"Compiler Error C2712 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error C2712 | Microsoft Docs","pos":[0,37]}]},{"pos":[598,618],"content":"Compiler Error C2712","linkify":"Compiler Error C2712","nodes":[{"content":"Compiler Error C2712","pos":[0,20]}]},{"content":"cannot use __try in functions that require object unwinding","pos":[619,678]},{"pos":[685,885],"content":"Error C2712 can occur if you use <bpt id=\"p1\">[</bpt>/EHsc<ept id=\"p1\">](../../build/reference/eh-exception-handling-model.md)</ept>, and a function with structured exception handling also has objects that require unwinding (destruction).","source":"Error C2712 can occur if you use [/EHsc](../../build/reference/eh-exception-handling-model.md), and a function with structured exception handling also has objects that require unwinding (destruction)."},{"content":"Possible solutions:","pos":[892,911]},{"content":"Move code that requires SEH to another function","pos":[921,968]},{"content":"Rewrite functions that use SEH to avoid the use of local variables and parameters that have destructors.","pos":[978,1082]},{"content":"Do not use SEH in constructors or destructors","pos":[1083,1128]},{"content":"Compile without /EHsc","pos":[1138,1159]},{"content":"Error C2712 can also occur if you call a method declared by using the <bpt id=\"p1\">[</bpt>__event<ept id=\"p1\">](../../cpp/event.md)</ept> keyword.","pos":[1166,1274],"source":"Error C2712 can also occur if you call a method declared by using the [__event](../../cpp/event.md) keyword."},{"content":"Because the event might be used in a multithreaded environment, the compiler generates code that prevents manipulation of the underlying event object, and then encloses the generated code in an SEH <bpt id=\"p1\">[</bpt>try-finally statement<ept id=\"p1\">](../../cpp/try-finally-statement.md)</ept>.","pos":[1275,1533],"source":" Because the event might be used in a multithreaded environment, the compiler generates code that prevents manipulation of the underlying event object, and then encloses the generated code in an SEH [try-finally statement](../../cpp/try-finally-statement.md)."},{"content":"Consequently, error C2712 will occur if you call the event method and pass by value an argument whose type has a destructor.","pos":[1534,1658]},{"content":"One solution in this case is to pass the argument as a constant reference.","pos":[1659,1733]},{"pos":[1742,1749],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"C2712 can also occur if you compile with <bpt id=\"p1\">**</bpt>/clr:pure<ept id=\"p1\">**</ept> and declare a static array of pointers-to-functions in a <ph id=\"ph1\">`__try`</ph> block.","pos":[1753,1879],"source":"C2712 can also occur if you compile with **/clr:pure** and declare a static array of pointers-to-functions in a `__try` block."},{"content":"A static member requires the compiler to use dynamic initialization under <bpt id=\"p1\">**</bpt>/clr:pure<ept id=\"p1\">**</ept>, which implies C++ exception handling.","pos":[1880,2006],"source":" A static member requires the compiler to use dynamic initialization under **/clr:pure**, which implies C++ exception handling."},{"content":"However, C++ exception handling is not allowed in a <ph id=\"ph1\">`__try`</ph> block.","pos":[2007,2073],"source":" However, C++ exception handling is not allowed in a `__try` block."},{"content":"The following sample generates C2712 and shows how to fix it.","pos":[2080,2141]}],"content":"---\ntitle: \"Compiler Error C2712 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"C2712\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"C2712\"\nms.assetid: f7d4ffcc-7ed2-459b-8067-a728ce647071\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error C2712\ncannot use __try in functions that require object unwinding  \n  \n Error C2712 can occur if you use [/EHsc](../../build/reference/eh-exception-handling-model.md), and a function with structured exception handling also has objects that require unwinding (destruction).  \n  \n Possible solutions:  \n  \n-   Move code that requires SEH to another function  \n  \n-   Rewrite functions that use SEH to avoid the use of local variables and parameters that have destructors. Do not use SEH in constructors or destructors  \n  \n-   Compile without /EHsc  \n  \n Error C2712 can also occur if you call a method declared by using the [__event](../../cpp/event.md) keyword. Because the event might be used in a multithreaded environment, the compiler generates code that prevents manipulation of the underlying event object, and then encloses the generated code in an SEH [try-finally statement](../../cpp/try-finally-statement.md). Consequently, error C2712 will occur if you call the event method and pass by value an argument whose type has a destructor. One solution in this case is to pass the argument as a constant reference.  \n  \n## Example  \n C2712 can also occur if you compile with **/clr:pure** and declare a static array of pointers-to-functions in a `__try` block. A static member requires the compiler to use dynamic initialization under **/clr:pure**, which implies C++ exception handling. However, C++ exception handling is not allowed in a `__try` block.  \n  \n The following sample generates C2712 and shows how to fix it.  \n  \n```  \n// C2712.cpp  \n// compile with: /clr:pure /c  \nstruct S1 {  \n   static int smf();  \n   void fnc();  \n};  \n  \nvoid S1::fnc() {  \n   __try {  \n      static int (*array_1[])() = {smf,};   // C2712  \n  \n      // OK  \n      static int (*array_2[2])();  \n      array_2[0] = smf;  \n    }  \n    __except(0) {}  \n}  \n```"}