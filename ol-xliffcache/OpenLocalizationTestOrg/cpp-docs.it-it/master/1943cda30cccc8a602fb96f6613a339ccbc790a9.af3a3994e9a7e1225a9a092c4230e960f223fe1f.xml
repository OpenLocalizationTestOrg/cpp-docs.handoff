{"nodes":[{"pos":[12,36],"content":"tmpfile | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"tmpfile | Microsoft Docs","pos":[0,24]}]},{"pos":[985,992],"content":"tmpfile","linkify":"tmpfile","nodes":[{"content":"tmpfile","pos":[0,7]}]},{"content":"Creates a temporary file.","pos":[993,1018]},{"content":"This function is deprecated because a more secure version is available; see <bpt id=\"p1\">[</bpt>tmpfile_s<ept id=\"p1\">](../../c-runtime-library/reference/tmpfile-s.md)</ept>.","pos":[1019,1155],"source":" This function is deprecated because a more secure version is available; see [tmpfile_s](../../c-runtime-library/reference/tmpfile-s.md)."},{"pos":[1164,1170],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1219,1231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If successful, <ph id=\"ph1\">`tmpfile`</ph> returns a stream pointer.","pos":[1235,1285],"source":"If successful, `tmpfile` returns a stream pointer."},{"content":"Otherwise, it returns a <ph id=\"ph1\">`NULL`</ph> pointer.","pos":[1286,1325],"source":" Otherwise, it returns a `NULL` pointer."},{"pos":[1334,1341],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`tmpfile`</ph> function creates a temporary file and returns a pointer to that stream.","pos":[1345,1430],"source":"The `tmpfile` function creates a temporary file and returns a pointer to that stream."},{"content":"The temporary file is created in the root directory.","pos":[1431,1483]},{"content":"To create a temporary file in a directory other than the root, use <bpt id=\"p1\">[</bpt>tmpnam<ept id=\"p1\">](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)</ept> or <bpt id=\"p2\">[</bpt>tempnam<ept id=\"p2\">](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)</ept> in conjunction with <bpt id=\"p3\">[</bpt>fopen<ept id=\"p3\">](../../c-runtime-library/reference/fopen-wfopen.md)</ept>.","pos":[1484,1792],"source":" To create a temporary file in a directory other than the root, use [tmpnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md) or [tempnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md) in conjunction with [fopen](../../c-runtime-library/reference/fopen-wfopen.md)."},{"content":"If the file cannot be opened, <ph id=\"ph1\">`tmpfile`</ph> returns a <ph id=\"ph2\">`NULL`</ph> pointer.","pos":[1799,1864],"source":"If the file cannot be opened, `tmpfile` returns a `NULL` pointer."},{"content":"This temporary file is automatically deleted when the file is closed, when the program terminates normally, or when <ph id=\"ph1\">`_rmtmp`</ph> is called, assuming that the current working directory does not change.","pos":[1865,2061],"source":" This temporary file is automatically deleted when the file is closed, when the program terminates normally, or when `_rmtmp` is called, assuming that the current working directory does not change."},{"content":"The temporary file is opened in <ph id=\"ph1\">`w+b`</ph> (binary read/write) mode.","pos":[2062,2125],"source":" The temporary file is opened in `w+b` (binary read/write) mode."},{"pos":[2132,2218],"content":"Failure can occur if you attempt more than TMP_MAX (see STDIO.H) calls with <ph id=\"ph1\">`tmpfile`</ph>.","source":"Failure can occur if you attempt more than TMP_MAX (see STDIO.H) calls with `tmpfile`."},{"pos":[2227,2239],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2246,2253]},{"content":"Required header","pos":[2254,2269]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt;","pos":[2324,2334],"source":"\\<stdio.h>"},{"pos":[2342,2466],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2475,2482],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2490,2573],"content":"[!NOTE]\n This example requires administrative privileges to run on Windows Vista.","leadings":["","> "],"nodes":[{"content":"This example requires administrative privileges to run on Windows Vista.","pos":[9,81]}]},{"pos":[3393,3418],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[3422,3437]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3438,3485],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3486,3611],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3620,3628],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[3632,3684],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_rmtmp<ept id=\"p1\">](../../c-runtime-library/reference/rmtmp.md)</ept><ph id=\"ph1\"> </ph>","pos":[3687,3741],"source":" [_rmtmp](../../c-runtime-library/reference/rmtmp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_tempnam, _wtempnam, tmpnam, _wtmpnam<ept id=\"p1\">](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)</ept>","pos":[3744,3854],"source":" [_tempnam, _wtempnam, tmpnam, _wtmpnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)"}],"content":"---\ntitle: \"tmpfile | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"tmpfile\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"tmpfile\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"temporary files\"\n  - \"tmpfile function\"\n  - \"temporary files, creating\"\nms.assetid: c4a4dc24-70da-438d-ae4e-98352d88e375\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# tmpfile\nCreates a temporary file. This function is deprecated because a more secure version is available; see [tmpfile_s](../../c-runtime-library/reference/tmpfile-s.md).  \n  \n## Syntax  \n  \n```  \nFILE *tmpfile( void );  \n```  \n  \n## Return Value  \n If successful, `tmpfile` returns a stream pointer. Otherwise, it returns a `NULL` pointer.  \n  \n## Remarks  \n The `tmpfile` function creates a temporary file and returns a pointer to that stream. The temporary file is created in the root directory. To create a temporary file in a directory other than the root, use [tmpnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md) or [tempnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md) in conjunction with [fopen](../../c-runtime-library/reference/fopen-wfopen.md).  \n  \n If the file cannot be opened, `tmpfile` returns a `NULL` pointer. This temporary file is automatically deleted when the file is closed, when the program terminates normally, or when `_rmtmp` is called, assuming that the current working directory does not change. The temporary file is opened in `w+b` (binary read/write) mode.  \n  \n Failure can occur if you attempt more than TMP_MAX (see STDIO.H) calls with `tmpfile`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`tmpfile`|\\<stdio.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n> [!NOTE]\n>  This example requires administrative privileges to run on Windows Vista.  \n  \n```  \n// crt_tmpfile.c  \n// compile with: /W3  \n// This program uses tmpfile to create a  \n// temporary file, then deletes this file with _rmtmp.  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   FILE *stream;  \n   int  i;  \n  \n   // Create temporary files.  \n   for( i = 1; i <= 3; i++ )  \n   {  \n      if( (stream = tmpfile()) == NULL ) // C4996  \n      // Note: tmpfile is deprecated; consider using tmpfile_s instead  \n         perror( \"Could not open new temporary file\\n\" );  \n      else  \n         printf( \"Temporary file %d was created\\n\", i );  \n   }  \n  \n   // Remove temporary files.  \n   printf( \"%d temporary files deleted\\n\", _rmtmp() );  \n}  \n```  \n  \n```Output  \nTemporary file 1 was created  \nTemporary file 2 was created  \nTemporary file 3 was created  \n3 temporary files deleted  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_rmtmp](../../c-runtime-library/reference/rmtmp.md)   \n [_tempnam, _wtempnam, tmpnam, _wtmpnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)"}