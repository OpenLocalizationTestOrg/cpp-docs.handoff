{"nodes":[{"pos":[12,43],"content":"CAutoPtr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAutoPtr Class | Microsoft Docs","pos":[0,31]}]},{"pos":[598,612],"content":"CAutoPtr Class","linkify":"CAutoPtr Class","nodes":[{"content":"CAutoPtr Class","pos":[0,14]}]},{"content":"This class represents a smart pointer object.","pos":[613,658]},{"pos":[666,776],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"pos":[785,791],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[858,868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The pointer type.","pos":[879,896]},{"pos":[905,912],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[922,941],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[948,952]},{"content":"Description","pos":[953,964]},{"pos":[1002,1043],"content":"<bpt id=\"p1\">[</bpt>CAutoPtr::CAutoPtr<ept id=\"p1\">](#cautoptr__cautoptr)</ept>","source":"[CAutoPtr::CAutoPtr](#cautoptr__cautoptr)"},{"content":"The constructor.","pos":[1044,1060]},{"pos":[1065,1112],"content":"<bpt id=\"p1\">[</bpt>CAutoPtr::~CAutoPtr<ept id=\"p1\">](#cautoptr___dtorcautoptr)</ept>","source":"[CAutoPtr::~CAutoPtr](#cautoptr___dtorcautoptr)"},{"content":"The destructor.","pos":[1113,1128]},{"pos":[1139,1153],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1160,1164]},{"content":"Description","pos":[1165,1176]},{"pos":[1214,1251],"content":"<bpt id=\"p1\">[</bpt>CAutoPtr::Attach<ept id=\"p1\">](#cautoptr__attach)</ept>","source":"[CAutoPtr::Attach](#cautoptr__attach)"},{"content":"Call this method to take ownership of an existing pointer.","pos":[1252,1310]},{"pos":[1315,1352],"content":"<bpt id=\"p1\">[</bpt>CAutoPtr::Detach<ept id=\"p1\">](#cautoptr__detach)</ept>","source":"[CAutoPtr::Detach](#cautoptr__detach)"},{"content":"Call this method to release ownership of a pointer.","pos":[1353,1404]},{"pos":[1409,1442],"content":"<bpt id=\"p1\">[</bpt>CAutoPtr::Free<ept id=\"p1\">](#cautoptr__free)</ept>","source":"[CAutoPtr::Free](#cautoptr__free)"},{"pos":[1443,1507],"content":"Call this method to delete an object pointed to by a <ph id=\"ph1\">`CAutoPtr`</ph>.","source":"Call this method to delete an object pointed to by a `CAutoPtr`."},{"pos":[1518,1534],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1541,1545]},{"content":"Description","pos":[1546,1557]},{"pos":[1595,1646],"content":"<bpt id=\"p1\">[</bpt>CAutoPtr::operator T*<ept id=\"p1\">](#cautoptr__operator_t_star)</ept>","source":"[CAutoPtr::operator T*](#cautoptr__operator_t_star)"},{"content":"The cast operator.","pos":[1647,1665]},{"pos":[1670,1716],"content":"<bpt id=\"p1\">[</bpt>CAutoPtr::operator =<ept id=\"p1\">](#cautoptr__operator_eq)</ept>","source":"[CAutoPtr::operator =](#cautoptr__operator_eq)"},{"content":"The assignment operator.","pos":[1717,1741]},{"pos":[1746,1794],"content":"<bpt id=\"p1\">[</bpt>CAutoPtr::operator -&gt;<ept id=\"p1\">](#cautoptr__operator_ptr)</ept>","source":"[CAutoPtr::operator ->](#cautoptr__operator_ptr)"},{"content":"The pointer-to-member operator.","pos":[1795,1826]},{"pos":[1837,1856],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[1863,1867]},{"content":"Description","pos":[1868,1879]},{"pos":[1917,1948],"content":"<bpt id=\"p1\">[</bpt>CAutoPtr::m_p<ept id=\"p1\">](#cautoptr__m_p)</ept>","source":"[CAutoPtr::m_p](#cautoptr__m_p)"},{"content":"The pointer data member variable.","pos":[1949,1982]},{"pos":[1992,1999],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class provides methods for creating and managing a smart pointer, which will help protect against memory leaks by automatically freeing resources when it falls out of scope.","pos":[2003,2181]},{"content":"Further, <ph id=\"ph1\">`CAutoPtr`</ph>'s copy constructor and assignment operator transfer ownership of the pointer, copying the source pointer to the destination pointer and setting the source pointer to NULL.","pos":[2188,2379],"source":"Further, `CAutoPtr`'s copy constructor and assignment operator transfer ownership of the pointer, copying the source pointer to the destination pointer and setting the source pointer to NULL."},{"content":"It is therefore impossible to have two <ph id=\"ph1\">`CAutoPtr`</ph> objects each storing the same pointer, and this reduces the possibility of deleting the same pointer twice.","pos":[2380,2537],"source":" It is therefore impossible to have two `CAutoPtr` objects each storing the same pointer, and this reduces the possibility of deleting the same pointer twice."},{"content":"<ph id=\"ph1\">`CAutoPtr`</ph> also simplifies the creation of collections of pointers.","pos":[2544,2611],"source":"`CAutoPtr` also simplifies the creation of collections of pointers."},{"content":"Instead of deriving a collection class and overriding the destructor, it's simpler to make a collection of <ph id=\"ph1\">`CAutoPtr`</ph> objects.","pos":[2612,2738],"source":" Instead of deriving a collection class and overriding the destructor, it's simpler to make a collection of `CAutoPtr` objects."},{"content":"When the collection is deleted, the <ph id=\"ph1\">`CAutoPtr`</ph> objects will go out of scope and automatically delete themselves.","pos":[2739,2851],"source":" When the collection is deleted, the `CAutoPtr` objects will go out of scope and automatically delete themselves."},{"content":"<bpt id=\"p1\">[</bpt>CHeapPtr<ept id=\"p1\">](../../atl/reference/cheapptr-class.md)</ept> and variants work in the same way as <ph id=\"ph1\">`CAutoPtr`</ph>, except that they allocate and free memory using different heap functions instead of the C++ <bpt id=\"p2\">**</bpt>new<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>delete<ept id=\"p3\">**</ept> operators.","pos":[2858,3082],"source":"[CHeapPtr](../../atl/reference/cheapptr-class.md) and variants work in the same way as `CAutoPtr`, except that they allocate and free memory using different heap functions instead of the C++ **new** and **delete** operators."},{"content":"<bpt id=\"p1\">[</bpt>CAutoVectorPtr<ept id=\"p1\">](../../atl/reference/cautovectorptr-class.md)</ept> is similar to <ph id=\"ph1\">`CAutoPtr`</ph>, the only difference being that it uses <bpt id=\"p2\">**</bpt>vector new[]<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>vector delete[]<ept id=\"p3\">**</ept> to allocate and free memory.","pos":[3083,3279],"source":"[CAutoVectorPtr](../../atl/reference/cautovectorptr-class.md) is similar to `CAutoPtr`, the only difference being that it uses **vector new[]** and **vector delete[]** to allocate and free memory."},{"pos":[3286,3469],"content":"See also <bpt id=\"p1\">[</bpt>CAutoPtrArray<ept id=\"p1\">](../../atl/reference/cautoptrarray-class.md)</ept> and <bpt id=\"p2\">[</bpt>CAutoPtrList<ept id=\"p2\">](../../atl/reference/cautoptrlist-class.md)</ept> when arrays or lists of smart pointers are required.","source":"See also [CAutoPtrArray](../../atl/reference/cautoptrarray-class.md) and [CAutoPtrList](../../atl/reference/cautoptrlist-class.md) when arrays or lists of smart pointers are required."},{"pos":[3478,3490],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3494,3515],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlbase.h","source":"**Header:** atlbase.h"},{"pos":[3524,3531],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3535,3616],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#74<ept id=\"p2\">](../../atl/codesnippet/cpp/cautoptr-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#74](../../atl/codesnippet/cpp/cautoptr-class_1.cpp)]"},{"pos":[3626,3675],"content":"<bpt id=\"p1\">&lt;a name=\"cautoptr__attach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAutoPtr::Attach","linkify":"<a name=\"cautoptr__attach\"></a>  CAutoPtr::Attach","source":"<a name=\"cautoptr__attach\"></a>  CAutoPtr::Attach"},{"content":"Call this method to take ownership of an existing pointer.","pos":[3679,3737]},{"pos":[3787,3797],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`CAutoPtr`</ph> object will take ownership of this pointer.","pos":[3808,3866],"source":" The `CAutoPtr` object will take ownership of this pointer."},{"pos":[3876,3883],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a <ph id=\"ph1\">`CAutoPtr`</ph> object takes ownership of a pointer, it will automatically delete the pointer and any allocated data when it goes out of scope.","pos":[3887,4032],"source":"When a `CAutoPtr` object takes ownership of a pointer, it will automatically delete the pointer and any allocated data when it goes out of scope."},{"content":"If <bpt id=\"p1\">[</bpt>CAutoPtr::Detach<ept id=\"p1\">](#cautoptr__detach)</ept> is called, the programmer is again given responsibility for freeing any allocated resources.","pos":[4033,4166],"source":" If [CAutoPtr::Detach](#cautoptr__detach) is called, the programmer is again given responsibility for freeing any allocated resources."},{"pos":[4173,4345],"content":"In debug builds, an assertion failure will occur if the <bpt id=\"p1\">[</bpt>CAutoPtr::m_p<ept id=\"p1\">](#cautoptr__m_p)</ept> data member currently points to an existing value; that is, it is not equal to NULL.","source":"In debug builds, an assertion failure will occur if the [CAutoPtr::m_p](#cautoptr__m_p) data member currently points to an existing value; that is, it is not equal to NULL."},{"pos":[4355,4362],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4366,4448],"content":"See the example in the <bpt id=\"p1\">[</bpt>CAutoPtr Overview<ept id=\"p1\">](../../atl/reference/cautoptr-class.md)</ept>.","source":"See the example in the [CAutoPtr Overview](../../atl/reference/cautoptr-class.md)."},{"pos":[4458,4511],"content":"<bpt id=\"p1\">&lt;a name=\"cautoptr__cautoptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAutoPtr::CAutoPtr","linkify":"<a name=\"cautoptr__cautoptr\"></a>  CAutoPtr::CAutoPtr","source":"<a name=\"cautoptr__cautoptr\"></a>  CAutoPtr::CAutoPtr"},{"content":"The constructor.","pos":[4515,4531]},{"pos":[4715,4725],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An existing pointer.","pos":[4736,4756]},{"content":"The type being managed by another <ph id=\"ph1\">`CAutoPtr`</ph>, used to initialize the current object.","pos":[4773,4857],"source":" The type being managed by another `CAutoPtr`, used to initialize the current object."},{"pos":[4867,4874],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4878,4994],"content":"The <ph id=\"ph1\">`CAutoPtr`</ph> object can be created using an existing pointer, in which case it transfers ownership of the pointer.","source":"The `CAutoPtr` object can be created using an existing pointer, in which case it transfers ownership of the pointer."},{"pos":[5004,5011],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5015,5097],"content":"See the example in the <bpt id=\"p1\">[</bpt>CAutoPtr Overview<ept id=\"p1\">](../../atl/reference/cautoptr-class.md)</ept>.","source":"See the example in the [CAutoPtr Overview](../../atl/reference/cautoptr-class.md)."},{"pos":[5107,5166],"content":"<bpt id=\"p1\">&lt;a name=\"cautoptr___dtorcautoptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAutoPtr::~CAutoPtr","linkify":"<a name=\"cautoptr___dtorcautoptr\"></a>  CAutoPtr::~CAutoPtr","source":"<a name=\"cautoptr___dtorcautoptr\"></a>  CAutoPtr::~CAutoPtr"},{"content":"The destructor.","pos":[5170,5185]},{"pos":[5229,5236],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Frees any allocated resources.","pos":[5240,5270]},{"content":"Calls <bpt id=\"p1\">[</bpt>CAutoPtr::Free<ept id=\"p1\">](#cautoptr__free)</ept>.","pos":[5271,5311],"source":" Calls [CAutoPtr::Free](#cautoptr__free)."},{"pos":[5321,5370],"content":"<bpt id=\"p1\">&lt;a name=\"cautoptr__detach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAutoPtr::Detach","linkify":"<a name=\"cautoptr__detach\"></a>  CAutoPtr::Detach","source":"<a name=\"cautoptr__detach\"></a>  CAutoPtr::Detach"},{"content":"Call this method to release ownership of a pointer.","pos":[5374,5425]},{"pos":[5469,5481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a copy of the pointer.","pos":[5485,5515]},{"pos":[5525,5532],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Releases ownership of a pointer, sets the <bpt id=\"p1\">[</bpt>CAutoPtr::m_p<ept id=\"p1\">](#cautoptr__m_p)</ept> data member variable to NULL, and returns a copy of the pointer.","pos":[5536,5674],"source":"Releases ownership of a pointer, sets the [CAutoPtr::m_p](#cautoptr__m_p) data member variable to NULL, and returns a copy of the pointer."},{"content":"After calling <bpt id=\"p1\">**</bpt>Detach<ept id=\"p1\">**</ept>, it is up to the programmer to free any allocated resources over which the <ph id=\"ph1\">`CAutoPtr`</ph> object may have previously assumed reponsibility.","pos":[5675,5835],"source":" After calling **Detach**, it is up to the programmer to free any allocated resources over which the `CAutoPtr` object may have previously assumed reponsibility."},{"pos":[5845,5852],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5856,5938],"content":"See the example in the <bpt id=\"p1\">[</bpt>CAutoPtr Overview<ept id=\"p1\">](../../atl/reference/cautoptr-class.md)</ept>.","source":"See the example in the [CAutoPtr Overview](../../atl/reference/cautoptr-class.md)."},{"pos":[5948,5993],"content":"<bpt id=\"p1\">&lt;a name=\"cautoptr__free\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAutoPtr::Free","linkify":"<a name=\"cautoptr__free\"></a>  CAutoPtr::Free","source":"<a name=\"cautoptr__free\"></a>  CAutoPtr::Free"},{"pos":[5997,6061],"content":"Call this method to delete an object pointed to by a <ph id=\"ph1\">`CAutoPtr`</ph>.","source":"Call this method to delete an object pointed to by a `CAutoPtr`."},{"pos":[6105,6112],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6116,6242],"content":"The object pointed to by the <ph id=\"ph1\">`CAutoPtr`</ph> is freed, and the <bpt id=\"p1\">[</bpt>CAutoPtr::m_p<ept id=\"p1\">](#cautoptr__m_p)</ept> data member variable is set to NULL.","source":"The object pointed to by the `CAutoPtr` is freed, and the [CAutoPtr::m_p](#cautoptr__m_p) data member variable is set to NULL."},{"pos":[6252,6295],"content":"<bpt id=\"p1\">&lt;a name=\"cautoptr__m_p\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAutoPtr::m_p","linkify":"<a name=\"cautoptr__m_p\"></a>  CAutoPtr::m_p","source":"<a name=\"cautoptr__m_p\"></a>  CAutoPtr::m_p"},{"content":"The pointer data member variable.","pos":[6299,6332]},{"pos":[6363,6370],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This member variable holds the pointer information.","pos":[6374,6425]},{"pos":[6435,6493],"content":"<bpt id=\"p1\">&lt;a name=\"cautoptr__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAutoPtr::operator =","linkify":"<a name=\"cautoptr__operator_eq\"></a>  CAutoPtr::operator =","source":"<a name=\"cautoptr__operator_eq\"></a>  CAutoPtr::operator ="},{"content":"The assignment operator.","pos":[6497,6521]},{"pos":[6665,6675],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer.","pos":[6686,6696]},{"content":"A class type.","pos":[6713,6726]},{"pos":[6736,6748],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6752,6796],"content":"Returns a reference to a <bpt id=\"p1\">**</bpt>CAutoPtr<ph id=\"ph1\">\\&lt;</ph> T &gt;<ept id=\"p1\">**</ept>.","source":"Returns a reference to a **CAutoPtr\\< T >**."},{"pos":[6806,6813],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6817,6945],"content":"The assignment operator detaches the <ph id=\"ph1\">`CAutoPtr`</ph> object from any current pointer and attaches the new pointer, <ph id=\"ph2\">`p`</ph>, in its place.","source":"The assignment operator detaches the `CAutoPtr` object from any current pointer and attaches the new pointer, `p`, in its place."},{"pos":[6955,6962],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6966,7048],"content":"See the example in the <bpt id=\"p1\">[</bpt>CAutoPtr Overview<ept id=\"p1\">](../../atl/reference/cautoptr-class.md)</ept>.","source":"See the example in the [CAutoPtr Overview](../../atl/reference/cautoptr-class.md)."},{"pos":[7058,7121],"content":"<bpt id=\"p1\">&lt;a name=\"cautoptr__operator_ptr\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAutoPtr::operator -<ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"cautoptr__operator_ptr\"></a>  CAutoPtr::operator -&gt;","source":"<a name=\"cautoptr__operator_ptr\"></a>  CAutoPtr::operator -&gt;"},{"content":"The pointer-to-member operator.","pos":[7125,7156]},{"pos":[7210,7222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7226,7304],"content":"Returns the value of the <bpt id=\"p1\">[</bpt>CAutoPtr::m_p<ept id=\"p1\">](#cautoptr__m_p)</ept> data member variable.","source":"Returns the value of the [CAutoPtr::m_p](#cautoptr__m_p) data member variable."},{"pos":[7314,7321],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this operator to call a method in a class pointed to by the <ph id=\"ph1\">`CAutoPtr`</ph> object.","pos":[7325,7407],"source":"Use this operator to call a method in a class pointed to by the `CAutoPtr` object."},{"content":"In debug builds, an assertion failure will occur if the <ph id=\"ph1\">`CAutoPtr`</ph> points to NULL.","pos":[7408,7490],"source":" In debug builds, an assertion failure will occur if the `CAutoPtr` points to NULL."},{"pos":[7500,7507],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7511,7593],"content":"See the example in the <bpt id=\"p1\">[</bpt>CAutoPtr Overview<ept id=\"p1\">](../../atl/reference/cautoptr-class.md)</ept>.","source":"See the example in the [CAutoPtr Overview](../../atl/reference/cautoptr-class.md)."},{"pos":[7603,7666],"content":"<bpt id=\"p1\">&lt;a name=\"cautoptr__operator_t_star\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAutoPtr::operator T*","linkify":"<a name=\"cautoptr__operator_t_star\"></a>  CAutoPtr::operator T*","source":"<a name=\"cautoptr__operator_t_star\"></a>  CAutoPtr::operator T*"},{"content":"The cast operator.","pos":[7670,7688]},{"content":"```operator T* () const throw();","pos":[7694,7726]}],"content":"---\ntitle: \"CAutoPtr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CAutoPtr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CAutoPtr class\"\nms.assetid: 08988d53-4fb0-4711-bdfc-8ac29c63f410\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAutoPtr Class\nThis class represents a smart pointer object.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\ntemplate <typename   T>\n    class CAutoPtr\n```  \n  \n#### Parameters  \n `T`  \n The pointer type.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAutoPtr::CAutoPtr](#cautoptr__cautoptr)|The constructor.|  \n|[CAutoPtr::~CAutoPtr](#cautoptr___dtorcautoptr)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAutoPtr::Attach](#cautoptr__attach)|Call this method to take ownership of an existing pointer.|  \n|[CAutoPtr::Detach](#cautoptr__detach)|Call this method to release ownership of a pointer.|  \n|[CAutoPtr::Free](#cautoptr__free)|Call this method to delete an object pointed to by a `CAutoPtr`.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAutoPtr::operator T*](#cautoptr__operator_t_star)|The cast operator.|  \n|[CAutoPtr::operator =](#cautoptr__operator_eq)|The assignment operator.|  \n|[CAutoPtr::operator ->](#cautoptr__operator_ptr)|The pointer-to-member operator.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAutoPtr::m_p](#cautoptr__m_p)|The pointer data member variable.|  \n  \n## Remarks  \n This class provides methods for creating and managing a smart pointer, which will help protect against memory leaks by automatically freeing resources when it falls out of scope.  \n  \n Further, `CAutoPtr`'s copy constructor and assignment operator transfer ownership of the pointer, copying the source pointer to the destination pointer and setting the source pointer to NULL. It is therefore impossible to have two `CAutoPtr` objects each storing the same pointer, and this reduces the possibility of deleting the same pointer twice.  \n  \n `CAutoPtr` also simplifies the creation of collections of pointers. Instead of deriving a collection class and overriding the destructor, it's simpler to make a collection of `CAutoPtr` objects. When the collection is deleted, the `CAutoPtr` objects will go out of scope and automatically delete themselves.  \n  \n [CHeapPtr](../../atl/reference/cheapptr-class.md) and variants work in the same way as `CAutoPtr`, except that they allocate and free memory using different heap functions instead of the C++ **new** and **delete** operators. [CAutoVectorPtr](../../atl/reference/cautovectorptr-class.md) is similar to `CAutoPtr`, the only difference being that it uses **vector new[]** and **vector delete[]** to allocate and free memory.  \n  \n See also [CAutoPtrArray](../../atl/reference/cautoptrarray-class.md) and [CAutoPtrList](../../atl/reference/cautoptrlist-class.md) when arrays or lists of smart pointers are required.  \n  \n## Requirements  \n **Header:** atlbase.h  \n  \n## Example  \n [!code-cpp[NVC_ATL_Utilities#74](../../atl/codesnippet/cpp/cautoptr-class_1.cpp)]  \n  \n##  <a name=\"cautoptr__attach\"></a>  CAutoPtr::Attach  \n Call this method to take ownership of an existing pointer.  \n  \n```\nvoid Attach(T* p) throw();\n```  \n  \n### Parameters  \n `p`  \n The `CAutoPtr` object will take ownership of this pointer.  \n  \n### Remarks  \n When a `CAutoPtr` object takes ownership of a pointer, it will automatically delete the pointer and any allocated data when it goes out of scope. If [CAutoPtr::Detach](#cautoptr__detach) is called, the programmer is again given responsibility for freeing any allocated resources.  \n  \n In debug builds, an assertion failure will occur if the [CAutoPtr::m_p](#cautoptr__m_p) data member currently points to an existing value; that is, it is not equal to NULL.  \n  \n### Example  \n See the example in the [CAutoPtr Overview](../../atl/reference/cautoptr-class.md).  \n  \n##  <a name=\"cautoptr__cautoptr\"></a>  CAutoPtr::CAutoPtr  \n The constructor.  \n  \n```\nCAutoPtr() throw();\nexplicit CAutoPtr(T* p) throw();\n\ntemplate<typename TSrc> CAutoPtr(CAutoPtr<TSrc>& p) throw();\n\ntemplate<> CAutoPtr(CAutoPtr<T>& p) throw();\n```  \n  \n### Parameters  \n `p`  \n An existing pointer.  \n  \n `TSrc`  \n The type being managed by another `CAutoPtr`, used to initialize the current object.  \n  \n### Remarks  \n The `CAutoPtr` object can be created using an existing pointer, in which case it transfers ownership of the pointer.  \n  \n### Example  \n See the example in the [CAutoPtr Overview](../../atl/reference/cautoptr-class.md).  \n  \n##  <a name=\"cautoptr___dtorcautoptr\"></a>  CAutoPtr::~CAutoPtr  \n The destructor.  \n  \n```\n~CAutoPtr() throw();\n```  \n  \n### Remarks  \n Frees any allocated resources. Calls [CAutoPtr::Free](#cautoptr__free).  \n  \n##  <a name=\"cautoptr__detach\"></a>  CAutoPtr::Detach  \n Call this method to release ownership of a pointer.  \n  \n```\nT* Detach() throw();\n```  \n  \n### Return Value  \n Returns a copy of the pointer.  \n  \n### Remarks  \n Releases ownership of a pointer, sets the [CAutoPtr::m_p](#cautoptr__m_p) data member variable to NULL, and returns a copy of the pointer. After calling **Detach**, it is up to the programmer to free any allocated resources over which the `CAutoPtr` object may have previously assumed reponsibility.  \n  \n### Example  \n See the example in the [CAutoPtr Overview](../../atl/reference/cautoptr-class.md).  \n  \n##  <a name=\"cautoptr__free\"></a>  CAutoPtr::Free  \n Call this method to delete an object pointed to by a `CAutoPtr`.  \n  \n```\nvoid Free() throw();\n```  \n  \n### Remarks  \n The object pointed to by the `CAutoPtr` is freed, and the [CAutoPtr::m_p](#cautoptr__m_p) data member variable is set to NULL.  \n  \n##  <a name=\"cautoptr__m_p\"></a>  CAutoPtr::m_p  \n The pointer data member variable.  \n  \n```\nT* m_p;\n```  \n  \n### Remarks  \n This member variable holds the pointer information.  \n  \n##  <a name=\"cautoptr__operator_eq\"></a>  CAutoPtr::operator =  \n The assignment operator.  \n  \n```\ntemplate<>\nCAutoPtr<T>& operator= (CAutoPtr<T>& p);\n\ntemplate<typename TSrc>\nCAutoPtr<T>& operator= (CAutoPtr<TSrc>& p);\n```  \n  \n### Parameters  \n `p`  \n A pointer.  \n  \n `TSrc`  \n A class type.  \n  \n### Return Value  \n Returns a reference to a **CAutoPtr\\< T >**.  \n  \n### Remarks  \n The assignment operator detaches the `CAutoPtr` object from any current pointer and attaches the new pointer, `p`, in its place.  \n  \n### Example  \n See the example in the [CAutoPtr Overview](../../atl/reference/cautoptr-class.md).  \n  \n##  <a name=\"cautoptr__operator_ptr\"></a>  CAutoPtr::operator -&gt;  \n The pointer-to-member operator.  \n  \n```\nT* operator->() const throw();\n```  \n  \n### Return Value  \n Returns the value of the [CAutoPtr::m_p](#cautoptr__m_p) data member variable.  \n  \n### Remarks  \n Use this operator to call a method in a class pointed to by the `CAutoPtr` object. In debug builds, an assertion failure will occur if the `CAutoPtr` points to NULL.  \n  \n### Example  \n See the example in the [CAutoPtr Overview](../../atl/reference/cautoptr-class.md).  \n  \n##  <a name=\"cautoptr__operator_t_star\"></a>  CAutoPtr::operator T*  \n The cast operator.  \n  \n```operator T* () const throw();\n```  \n  \n### Return Value  \n Returns a pointer to the object data type defined in the class template.  \n  \n### Example  \n See the example in the [CAutoPtr Overview](../../atl/reference/cautoptr-class.md).  \n  \n## See Also  \n [CHeapPtr Class](../../atl/reference/cheapptr-class.md)   \n [CAutoVectorPtr Class](../../atl/reference/cautovectorptr-class.md)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}