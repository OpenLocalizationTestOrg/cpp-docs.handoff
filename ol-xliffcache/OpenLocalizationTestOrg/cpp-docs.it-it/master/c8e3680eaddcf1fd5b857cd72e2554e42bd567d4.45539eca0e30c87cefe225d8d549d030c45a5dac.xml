{"nodes":[{"pos":[12,68],"content":"Enhancing the Simple Read-Only Provider | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Enhancing the Simple Read-Only Provider | Microsoft Docs","pos":[0,56]}]},{"content":"Enhancing the Simple Read-Only Provider","pos":[728,767]},{"content":"This section shows how to enhance the <bpt id=\"p1\">[</bpt>simple read-only provider<ept id=\"p1\">](../../data/oledb/implementing-the-simple-read-only-provider.md)</ept> created in the previous section.","pos":[768,930],"source":"This section shows how to enhance the [simple read-only provider](../../data/oledb/implementing-the-simple-read-only-provider.md) created in the previous section."},{"content":"creates an implementation for the <ph id=\"ph1\">`IRowsetLocate`</ph> interface and adds bookmark support for you.","pos":[951,1045],"source":" creates an implementation for the `IRowsetLocate` interface and adds bookmark support for you."},{"content":"When you have a working provider, you might want to enhance it to make the provider update, handle transactions, or enhance the performance of the row-fetching algorithm.","pos":[1052,1222]},{"content":"Most provider enhancements involve adding an interface to an existing COM object.","pos":[1223,1304]},{"content":"The example in the following topics enhances the row-fetching mechanism by adding the <ph id=\"ph1\">`IRowsetLocate`</ph> interface to <ph id=\"ph2\">`CAgentRowset`</ph>.","pos":[1311,1441],"source":"The example in the following topics enhances the row-fetching mechanism by adding the `IRowsetLocate` interface to `CAgentRowset`."},{"content":"The topics show you how to:","pos":[1442,1469]},{"pos":[1479,1599],"content":"<bpt id=\"p1\">[</bpt>Make RMyProviderRowset inherit from IRowsetLocate<ept id=\"p1\">](../../data/oledb/modifying-the-inheritance-of-rmyproviderrowset.md)</ept>.","source":"[Make RMyProviderRowset inherit from IRowsetLocate](../../data/oledb/modifying-the-inheritance-of-rmyproviderrowset.md)."},{"pos":[1609,1748],"content":"<bpt id=\"p1\">[</bpt>Dynamically determine the columns returned to the consumer<ept id=\"p1\">](../../data/oledb/dynamically-determining-columns-returned-to-the-consumer.md)</ept>.","source":"[Dynamically determine the columns returned to the consumer](../../data/oledb/dynamically-determining-columns-returned-to-the-consumer.md)."},{"content":"See Also","pos":[1757,1765]},{"content":"Creating a Simple Read-Only Provider","pos":[1770,1806]}],"content":"---\ntitle: \"Enhancing the Simple Read-Only Provider | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"read-only poviders [C++]\"\n  - \"IRowsetLocate class\"\n  - \"IRowsetLocate class, adding to OLE DB template providers\"\n  - \"simple read-only poviders [C++]\"\nms.assetid: cba0e09f-44c1-41c1-9456-332aa13dc158\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Enhancing the Simple Read-Only Provider\nThis section shows how to enhance the [simple read-only provider](../../data/oledb/implementing-the-simple-read-only-provider.md) created in the previous section. `IRowsetLocateImpl` creates an implementation for the `IRowsetLocate` interface and adds bookmark support for you.  \n  \n When you have a working provider, you might want to enhance it to make the provider update, handle transactions, or enhance the performance of the row-fetching algorithm. Most provider enhancements involve adding an interface to an existing COM object.  \n  \n The example in the following topics enhances the row-fetching mechanism by adding the `IRowsetLocate` interface to `CAgentRowset`. The topics show you how to:  \n  \n-   [Make RMyProviderRowset inherit from IRowsetLocate](../../data/oledb/modifying-the-inheritance-of-rmyproviderrowset.md).  \n  \n-   [Dynamically determine the columns returned to the consumer](../../data/oledb/dynamically-determining-columns-returned-to-the-consumer.md).  \n  \n## See Also  \n [Creating a Simple Read-Only Provider](../../data/oledb/creating-a-simple-read-only-provider.md)"}