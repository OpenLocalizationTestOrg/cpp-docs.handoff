{"nodes":[{"pos":[12,52],"content":"message_processor Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"message_processor Class | Microsoft Docs","pos":[0,40]}]},{"content":"message_processor Class","pos":[643,666]},{"content":"The <ph id=\"ph1\">`message_processor`</ph> class is the abstract base class for processing of <ph id=\"ph2\">`message`</ph> objects.","pos":[667,760],"source":"The `message_processor` class is the abstract base class for processing of `message` objects."},{"content":"There is no guarantee on the ordering of the messages.","pos":[761,815]},{"content":"Syntax","pos":[824,830]},{"content":"Parameters","pos":[897,907]},{"content":"The data type of the payload within messages handled by this <ph id=\"ph1\">`message_processor`</ph> object.","pos":[918,1006],"source":" The data type of the payload within messages handled by this `message_processor` object."},{"content":"Members","pos":[1015,1022]},{"content":"Public Typedefs","pos":[1032,1047]},{"content":"Name","pos":[1054,1058]},{"content":"Description","pos":[1059,1070]},{"pos":[1115,1136],"content":"A type alias for <ph id=\"ph1\">`T`</ph>.","source":"A type alias for `T`."},{"content":"Public Methods","pos":[1147,1161]},{"content":"Name","pos":[1168,1172]},{"content":"Description","pos":[1173,1184]},{"content":"message_processor::async_send Method","pos":[1223,1259]},{"content":"When overridden in a derived class, places messages into the block asynchronously.","pos":[1274,1356]},{"content":"message_processor::sync_send Method","pos":[1362,1397]},{"content":"When overridden in a derived class, places messages into the block synchronously.","pos":[1411,1492]},{"content":"message_processor::wait Method","pos":[1498,1528]},{"content":"When overridden in a derived class, waits for all asynchronous operations to complete.","pos":[1537,1623]},{"content":"Protected Methods","pos":[1634,1651]},{"content":"Name","pos":[1658,1662]},{"content":"Description","pos":[1663,1674]},{"content":"message_processor::process_incoming_message Method","pos":[1713,1763]},{"content":"When overridden in a derived class, performs the forward processing of messages into the block.","pos":[1792,1887]},{"content":"Called once every time a new message is added and the queue is found to be empty.","pos":[1888,1969]},{"content":"Inheritance Hierarchy","pos":[1979,2000]},{"content":"Requirements","pos":[2032,2044]},{"pos":[2048,2068],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[2075,2101],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[2138,2174],"content":"message_processor::async_send Method"},{"content":"When overridden in a derived class, places messages into the block asynchronously.","pos":[2178,2260]},{"content":"Parameters","pos":[2342,2352]},{"content":"A <ph id=\"ph1\">`message`</ph> object to send asynchronously.","pos":[2366,2408],"source":" A `message` object to send asynchronously."},{"content":"Remarks","pos":[2418,2425]},{"content":"Processor implementations should override this method.","pos":[2429,2483]},{"pos":[2534,2584],"content":"message_processor::process_incoming_message Method"},{"content":"When overridden in a derived class, performs the forward processing of messages into the block.","pos":[2588,2683]},{"content":"Called once every time a new message is added and the queue is found to be empty.","pos":[2684,2765]},{"content":"Remarks","pos":[2833,2840]},{"content":"Message block implementations should override this method.","pos":[2844,2902]},{"pos":[2938,2973],"content":"message_processor::sync_send Method"},{"content":"When overridden in a derived class, places messages into the block synchronously.","pos":[2977,3058]},{"content":"Parameters","pos":[3139,3149]},{"content":"A <ph id=\"ph1\">`message`</ph> object to send synchronously.","pos":[3163,3204],"source":" A `message` object to send synchronously."},{"content":"Remarks","pos":[3214,3221]},{"content":"Processor implementations should override this method.","pos":[3225,3279]},{"pos":[3310,3340],"content":"message_processor::wait Method"},{"content":"When overridden in a derived class, waits for all asynchronous operations to complete.","pos":[3344,3430]},{"content":"Remarks","pos":[3478,3485]},{"content":"Processor implementations should override this method.","pos":[3489,3543]},{"content":"See Also","pos":[3552,3560]},{"content":"concurrency Namespace","pos":[3565,3586]},{"content":"ordered_message_processor Class","pos":[3619,3650]}],"content":"---\ntitle: \"message_processor Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::message_processor\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"message_processor class\"\nms.assetid: 23afb052-daa7-44ed-bf24-d2513db748da\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# message_processor Class\nThe `message_processor` class is the abstract base class for processing of `message` objects. There is no guarantee on the ordering of the messages.  \n  \n## Syntax  \n  \n```\ntemplate<class T>\nclass message_processor;\n```  \n  \n#### Parameters  \n `T`  \n The data type of the payload within messages handled by this `message_processor` object.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`type`|A type alias for `T`.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[message_processor::async_send Method](#async_send)|When overridden in a derived class, places messages into the block asynchronously.|  \n|[message_processor::sync_send Method](#sync_send)|When overridden in a derived class, places messages into the block synchronously.|  \n|[message_processor::wait Method](#wait)|When overridden in a derived class, waits for all asynchronous operations to complete.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[message_processor::process_incoming_message Method](#process_incoming_message)|When overridden in a derived class, performs the forward processing of messages into the block. Called once every time a new message is added and the queue is found to be empty.|  \n  \n## Inheritance Hierarchy  \n `message_processor`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"async_send\"></a>  message_processor::async_send Method  \n When overridden in a derived class, places messages into the block asynchronously.  \n  \n```\nvirtual void async_send(_Inout_opt_ message<T>* _Msg) = 0;\n```  \n  \n### Parameters  \n `_Msg`  \n A `message` object to send asynchronously.  \n  \n### Remarks  \n Processor implementations should override this method.  \n  \n##  <a name=\"process_incoming_message\"></a>  message_processor::process_incoming_message Method  \n When overridden in a derived class, performs the forward processing of messages into the block. Called once every time a new message is added and the queue is found to be empty.  \n  \n```\nvirtual void process_incoming_message() = 0;\n```  \n  \n### Remarks  \n Message block implementations should override this method.  \n  \n##  <a name=\"sync_send\"></a>  message_processor::sync_send Method  \n When overridden in a derived class, places messages into the block synchronously.  \n  \n```\nvirtual void sync_send(_Inout_opt_ message<T>* _Msg) = 0;\n```  \n  \n### Parameters  \n `_Msg`  \n A `message` object to send synchronously.  \n  \n### Remarks  \n Processor implementations should override this method.  \n  \n##  <a name=\"wait\"></a>  message_processor::wait Method  \n When overridden in a derived class, waits for all asynchronous operations to complete.  \n  \n```\nvirtual void wait() = 0;\n```  \n  \n### Remarks  \n Processor implementations should override this method.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [ordered_message_processor Class](ordered-message-processor-class.md)\n"}