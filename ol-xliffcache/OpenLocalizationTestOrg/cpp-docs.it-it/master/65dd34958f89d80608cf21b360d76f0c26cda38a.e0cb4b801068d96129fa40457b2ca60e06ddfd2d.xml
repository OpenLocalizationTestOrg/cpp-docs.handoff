{"nodes":[{"pos":[12,40],"content":"plus Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"plus Struct | Microsoft Docs","pos":[0,28]}]},{"content":"plus Struct","pos":[688,699]},{"pos":[700,804],"content":"A predefined function object that performs the addition operation (binary <ph id=\"ph1\">`operator+`</ph>) on its arguments.","source":"A predefined function object that performs the addition operation (binary `operator+`) on its arguments."},{"content":"Syntax","pos":[813,819]},{"content":"Parameters","pos":[1230,1240]},{"content":", <ph id=\"ph1\">`T`</ph>,","pos":[1250,1256],"source":", `T`, "},{"content":"A type that supports a binary <ph id=\"ph1\">`operator+`</ph> that takes operands of the specified or inferred types.","pos":[1264,1361],"source":" A type that supports a binary `operator+` that takes operands of the specified or inferred types."},{"content":"The left operand of the addition operation.","pos":[1378,1421]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1422,1499],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`T`</ph>.","pos":[1500,1611],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`."},{"content":"The right operand of the addition operation.","pos":[1629,1673]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1674,1751],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`U`</ph>.","pos":[1752,1863],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`."},{"content":"Return Value","pos":[1872,1884]},{"content":"The result of <ph id=\"ph1\">`Left``+``Right`</ph>.","pos":[1888,1919],"source":"The result of `Left``+``Right`."},{"content":"The specialized template does perfect forwarding of the result, which has the type that's returned by binary <ph id=\"ph1\">`operator+`</ph>.","pos":[1920,2041],"source":" The specialized template does perfect forwarding of the result, which has the type that's returned by binary `operator+`."},{"content":"Example","pos":[2050,2057]},{"content":"Requirements","pos":[3323,3335]},{"pos":[3339,3364],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[3371,3389],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[3398,3406]},{"content":"Thread Safety in the C++ Standard Library","pos":[3411,3452]},{"content":"C++ Standard Library Reference","pos":[3525,3555]}],"content":"---\ntitle: \"plus Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"xfunctional/std::plus\"\n  - \"std.plus\"\n  - \"plus\"\n  - \"std::plus\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"plus class\"\n  - \"plus struct\"\nms.assetid: 4594abd5-b2f2-4fac-9b6b-fc9a2723f8cf\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# plus Struct\nA predefined function object that performs the addition operation (binary `operator+`) on its arguments.  \n  \n## Syntax  \n  \n```\ntemplate <class Type = void>\nstruct plus : public binary_function <Type, Type, Type>  \n{\n    Type operator()(const Type& Left, const Type& Right) const;\n};\n\n// specialized transparent functor for operator+\ntemplate <>  \nstruct plus<void>  \n{\n  template <class T, class U>\n  auto operator()(T&& Left, U&& Right) const`\n    -> decltype(std::forward<T>(Left) + std::forward<U>(Right));\n };\n```  \n  \n#### Parameters  \n `Type`, `T`, `U`  \n A type that supports a binary `operator+` that takes operands of the specified or inferred types.  \n  \n `Left`  \n The left operand of the addition operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`.  \n  \n `Right`  \n The right operand of the addition operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`.  \n  \n## Return Value  \n The result of `Left``+``Right`. The specialized template does perfect forwarding of the result, which has the type that's returned by binary `operator+`.  \n  \n## Example  \n  \n```cpp  \n// functional_plus.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <functional>  \n#include <algorithm>  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main( )  \n{  \n   vector <double> v1, v2, v3 ( 6 );  \n   vector <double>::iterator Iter1, Iter2, Iter3;  \n  \n   int i;  \n   for ( i = 0 ; i <= 5 ; i++ )  \n      v1.push_back( 4 * i );  \n  \n   int j;  \n   for ( j = 0 ; j <= 5 ; j++ )  \n      v2.push_back( -2.0 * j - 4 );  \n  \n   cout << \"The vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )  \n      cout << *Iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   cout << \"The vector v2 = ( \" ;  \n   for ( Iter2 = v2.begin( ) ; Iter2 != v2.end( ) ; Iter2++ )  \n      cout << *Iter2 << \" \";  \n   cout << \")\" << endl;  \n  \n   // Finding the element-wise sums of the elements of v1 & v2  \n   transform (v1.begin( ), v1.end( ), v2.begin( ), v3.begin ( ), plus<double>( ) );  \n  \n   cout << \"The element-wise sums are: ( \" ;  \n   for ( Iter3 = v3.begin( ) ; Iter3 != v3.end( ) ; Iter3++ )  \n      cout << *Iter3 << \" \";  \n   cout << \")\" << endl;  \n}  \n\\* Output:   \nThe vector v1 = ( 0 4 8 12 16 20 )  \nThe vector v2 = ( -4 -6 -8 -10 -12 -14 )  \nThe element-wise sums are: ( -4 -2 0 2 4 6 )  \n*\\  \n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}