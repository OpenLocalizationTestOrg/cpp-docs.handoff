{"nodes":[{"pos":[12,48],"content":"_cgets_s, _cgetws_s | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_cgets_s, _cgetws_s | Microsoft Docs","pos":[0,36]}]},{"pos":[1130,1149],"content":"_cgets_s, _cgetws_s","linkify":"_cgets_s, _cgetws_s","nodes":[{"content":"_cgets_s, _cgetws_s","pos":[0,19]}]},{"content":"Gets a character string from the console.","pos":[1150,1191]},{"content":"These versions of <bpt id=\"p1\">[</bpt>_cgets and _cgetws<ept id=\"p1\">](../../c-runtime-library/cgets-cgetws.md)</ept> have security enhancements, as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1192,1404],"source":" These versions of [_cgets and _cgetws](../../c-runtime-library/cgets-cgetws.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1412,1672],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,258],"nodes":[{"content":"This API cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[1,117],"source":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[118,245],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"pos":[1681,1687],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2140,2150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`buffer`</ph>","pos":[2154,2168],"source":"[out] `buffer`"},{"content":"Storage location for data.","pos":[2172,2198]},{"content":"[in] <ph id=\"ph1\">`numberOfElements`</ph>","pos":[2205,2228],"source":"[in] `numberOfElements`"},{"content":"The size of the buffer in single-byte or wide characters, which is also the maximum number of characters to be read.","pos":[2232,2348]},{"content":"[in] <ph id=\"ph1\">`pSizeRead`</ph>","pos":[2355,2371],"source":"[in] `pSizeRead`"},{"content":"The number of characters actually read.","pos":[2375,2414]},{"pos":[2423,2435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The return value is zero if successful; otherwise, an error code if a failure occurs.","pos":[2439,2524]},{"pos":[2534,2550],"content":"Error Conditions","linkify":"Error Conditions","nodes":[{"content":"Error Conditions","pos":[0,16]}]},{"content":"Return","pos":[2597,2603]},{"pos":[2604,2624],"content":"Contents of <ph id=\"ph1\">`buffer`</ph>","source":"Contents of `buffer`"},{"content":"any","pos":[2738,2741]},{"content":"any","pos":[2742,2745]},{"content":"n/a","pos":[2755,2758]},{"pos":[2763,2773],"content":"not <ph id=\"ph1\">`NULL`</ph>","source":"not `NULL`"},{"content":"zero","pos":[2774,2778]},{"content":"any","pos":[2779,2782]},{"content":"not modified","pos":[2792,2804]},{"pos":[2809,2819],"content":"not <ph id=\"ph1\">`NULL`</ph>","source":"not `NULL`"},{"content":"any","pos":[2820,2823]},{"content":"zero-length string","pos":[2840,2858]},{"pos":[2868,2875],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`_cgets_s`</ph> and <ph id=\"ph2\">`_cgetws_s`</ph> read a string from the console and copy the string (with a null terminator) into <ph id=\"ph3\">`buffer`</ph>.","pos":[2879,2996],"source":"`_cgets_s` and `_cgetws_s` read a string from the console and copy the string (with a null terminator) into `buffer`."},{"content":"<ph id=\"ph1\">`_cgetws_s`</ph> is the wide character version of the function; other than the character size, the behavior of these two functions is identical.","pos":[2997,3136],"source":"`_cgetws_s` is the wide character version of the function; other than the character size, the behavior of these two functions is identical."},{"content":"The maximum size of the string to be read is passed in as the <ph id=\"ph1\">`numberOfElements`</ph> parameter.","pos":[3137,3228],"source":" The maximum size of the string to be read is passed in as the `numberOfElements` parameter."},{"content":"This size should include an extra character for the terminating null.","pos":[3229,3298]},{"content":"The actual number of characters read is placed in <ph id=\"ph1\">`pSizeRead`</ph>.","pos":[3299,3361],"source":" The actual number of characters read is placed in `pSizeRead`."},{"content":"If an error occurs during the operation or in the validating of the parameters, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept> .","pos":[3368,3579],"source":"If an error occurs during the operation or in the validating of the parameters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) ."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph> and <ph id=\"ph3\">`EINVAL`</ph> is returned.","pos":[3580,3669],"source":" If execution is allowed to continue, `errno` is set to `EINVAL` and `EINVAL` is returned."},{"content":"In C++, the use of these functions is simplified by template overloads; the overloads can infer buffer length automatically, thereby eliminating the need to specify a size argument, and they can automatically replace older, less-secure functions with their newer, more secure counterparts.","pos":[3676,3965]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[3966,4074],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"pos":[4084,4113],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"Tchar.h routine","pos":[4120,4135]},{"content":"_UNICODE and _MBCS not defined","pos":[4136,4166]},{"content":"_MBCS defined","pos":[4167,4180]},{"content":"_UNICODE defined","pos":[4181,4197]},{"pos":[4367,4379],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[4386,4393]},{"content":"Required header","pos":[4394,4409]},{"content":"<ph id=\"ph1\">\\&lt;</ph>conio.h&gt;","pos":[4465,4475],"source":"\\<conio.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>conio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;","pos":[4492,4516],"source":"\\<conio.h> or \\<wchar.h>"},{"pos":[4524,4622],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[4631,4656],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[4660,4675]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[4676,4723],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4724,4849],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[4858,4866],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Console and Port I/O<ept id=\"p1\">](../../c-runtime-library/console-and-port-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[4870,4942],"source":"[Console and Port I/O](../../c-runtime-library/console-and-port-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_getch, _getwch<ept id=\"p1\">](../../c-runtime-library/reference/getch-getwch.md)</ept>","pos":[4945,5014],"source":" [_getch, _getwch](../../c-runtime-library/reference/getch-getwch.md)"}],"content":"---\ntitle: \"_cgets_s, _cgetws_s | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_cgetws_s\"\n  - \"_cgets_s\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-conio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_cgets_s\"\n  - \"cgets_s\"\n  - \"cgetws_s\"\n  - \"_cgetws_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"strings [C++], getting from console\"\n  - \"console, getting strings from\"\n  - \"_cgets_s function\"\n  - \"cget_s function\"\n  - \"_cgetws_s function\"\n  - \"cgetws_s function\"\nms.assetid: 38b74897-afe6-4dd9-a43f-36a3c0d72c5c\ncaps.latest.revision: 31\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _cgets_s, _cgetws_s\nGets a character string from the console. These versions of [_cgets and _cgetws](../../c-runtime-library/cgets-cgetws.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nerrno_t _cgets_s(   \n   char *buffer,  \n   size_t numberOfElements,  \n   size_t *pSizeRead  \n);  \nerrno_t _cgetws_s(  \n   wchar_t *buffer  \n   size_t numberOfElements,  \n   size_t *pSizeRead  \n);  \ntemplate <size_t size>  \nerrno_t _cgets_s(   \n   char (&buffer)[size],  \n   size_t *pSizeRead  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _cgetws_s(  \n   wchar_t (&buffer)[size],  \n   size_t *pSizeRead  \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `buffer`  \n Storage location for data.  \n  \n [in] `numberOfElements`  \n The size of the buffer in single-byte or wide characters, which is also the maximum number of characters to be read.  \n  \n [in] `pSizeRead`  \n The number of characters actually read.  \n  \n## Return Value  \n The return value is zero if successful; otherwise, an error code if a failure occurs.  \n  \n### Error Conditions  \n  \n|`buffer`|`numberOfElements`|`pSizeRead`|Return|Contents of `buffer`|  \n|--------------|------------------------|-----------------|------------|--------------------------|  \n|`NULL`|any|any|`EINVAL`|n/a|  \n|not `NULL`|zero|any|`EINVAL`|not modified|  \n|not `NULL`|any|`NULL`|`EINVAL`|zero-length string|  \n  \n## Remarks  \n `_cgets_s` and `_cgetws_s` read a string from the console and copy the string (with a null terminator) into `buffer`. `_cgetws_s` is the wide character version of the function; other than the character size, the behavior of these two functions is identical. The maximum size of the string to be read is passed in as the `numberOfElements` parameter. This size should include an extra character for the terminating null. The actual number of characters read is placed in `pSizeRead`.  \n  \n If an error occurs during the operation or in the validating of the parameters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) . If execution is allowed to continue, `errno` is set to `EINVAL` and `EINVAL` is returned.  \n  \n In C++, the use of these functions is simplified by template overloads; the overloads can infer buffer length automatically, thereby eliminating the need to specify a size argument, and they can automatically replace older, less-secure functions with their newer, more secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_cgetts_s`|`_cgets_s`|`_cgets_s`|`_cgetws_s`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_cgets_s`|\\<conio.h>|  \n|`_cgetws_s`|\\<conio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Console and Port I/O](../../c-runtime-library/console-and-port-i-o.md)   \n [_getch, _getwch](../../c-runtime-library/reference/getch-getwch.md)"}