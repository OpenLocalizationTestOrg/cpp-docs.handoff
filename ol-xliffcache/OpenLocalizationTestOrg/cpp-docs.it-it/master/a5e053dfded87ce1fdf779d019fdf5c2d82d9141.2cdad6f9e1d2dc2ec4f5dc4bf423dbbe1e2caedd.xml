{"nodes":[{"pos":[12,58],"content":"_fgetc_nolock, _fgetwc_nolock | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_fgetc_nolock, _fgetwc_nolock | Microsoft Docs","pos":[0,46]}]},{"content":"_fgetc_nolock, _fgetwc_nolock","pos":[1316,1345]},{"content":"Reads a character from a stream without locking the thread.","pos":[1346,1405]},{"content":"Syntax","pos":[1414,1420]},{"content":"Parameters","pos":[1542,1552]},{"content":"Pointer to the <ph id=\"ph1\">`FILE`</ph> structure.","pos":[1568,1600],"source":" Pointer to the `FILE` structure."},{"content":"Return Value","pos":[1609,1621]},{"pos":[1625,1695],"content":"See<bpt id=\"p1\">[</bpt>fgetc, fgetwc<ept id=\"p1\">](../../c-runtime-library/reference/fgetc-fgetwc.md)</ept>.","source":"See[fgetc, fgetwc](../../c-runtime-library/reference/fgetc-fgetwc.md)."},{"content":"Remarks","pos":[1704,1711]},{"content":"and <ph id=\"ph1\">`_fgetwc_nolock`</ph> are identical to <ph id=\"ph2\">`fgetc`</ph> and <ph id=\"ph3\">`fgetwc`</ph>, respectively, except that they are not protected from interference by other threads.","pos":[1731,1875],"source":" and `_fgetwc_nolock` are identical to `fgetc` and `fgetwc`, respectively, except that they are not protected from interference by other threads."},{"content":"They might be faster because they do not incur the overhead of locking out other threads.","pos":[1876,1965]},{"content":"Use these functions only in thread-safe contexts such as single-threaded applications or where the calling scope already handles thread isolation.","pos":[1966,2112]},{"content":"Generic-Text Routine Mappings","pos":[2122,2151]},{"content":"Tchar.h routine","pos":[2158,2173]},{"content":"_UNICODE and _MBCS not defined","pos":[2174,2204]},{"content":"_MBCS defined","pos":[2205,2218]},{"content":"_UNICODE defined","pos":[2219,2235]},{"content":"Requirements","pos":[2425,2437]},{"content":"Function","pos":[2444,2452]},{"content":"Required header","pos":[2453,2468]},{"content":"stdio.h&gt;","pos":[2532,2540],"source":"stdio.h>"},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[2564,2586],"source":"stdio.h> or \\<wchar.h>"},{"pos":[2594,2712],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[2721,2728]},{"content":"Input: crt_fgetc_nolock.txt","pos":[3528,3555]},{"content":"Output","pos":[3604,3610]},{"content":".NET Framework Equivalent","pos":[3658,3683]},{"content":"System::IO::StreamReader::Read","pos":[3694,3724]},{"content":"System::Console::Read","pos":[3811,3832]},{"content":"See Also","pos":[3909,3917]},{"content":"Stream I/O","pos":[3922,3932]},{"content":"fputc, fputwc","pos":[3978,3991]},{"content":"getc, getwc","pos":[4049,4060]}],"content":"---\ntitle: \"_fgetc_nolock, _fgetwc_nolock | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_fgetc_nolock\"\n  - \"_fgetwc_nolock\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_fgetwc_nolock\"\n  - \"fgettc_nolock\"\n  - \"fgetwc_nolock\"\n  - \"_fgetc_nolock\"\n  - \"_fgettc_nolock\"\n  - \"fgetc_nolock\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"fgetc_nolock function\"\n  - \"fgetwc_nolock function\"\n  - \"_fgetwc_nolock function\"\n  - \"characters, reading\"\n  - \"_fgetc_nolock function\"\n  - \"streams, reading characters from\"\n  - \"fgettc_nolock function\"\n  - \"reading characters from streams\"\n  - \"_fgettc_nolock function\"\nms.assetid: fb8e7c5b-4503-493a-879e-6a1db75aa114\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _fgetc_nolock, _fgetwc_nolock\nReads a character from a stream without locking the thread.  \n  \n## Syntax  \n  \n```  \nint _fgetc_nolock(   \n   FILE *stream   \n);  \nwint_t _fgetwc_nolock(   \n   FILE *stream   \n);  \n```  \n  \n#### Parameters  \n `stream`  \n Pointer to the `FILE` structure.  \n  \n## Return Value  \n See[fgetc, fgetwc](../../c-runtime-library/reference/fgetc-fgetwc.md).  \n  \n## Remarks  \n `_fgetc_nolock` and `_fgetwc_nolock` are identical to `fgetc` and `fgetwc`, respectively, except that they are not protected from interference by other threads. They might be faster because they do not incur the overhead of locking out other threads. Use these functions only in thread-safe contexts such as single-threaded applications or where the calling scope already handles thread isolation.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_fgettc_nolock`|`_fgetc_nolock`|`_fgetc_nolock`|`_fgetwc_nolock`|  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`_fgetc_nolock`|\\<stdio.h>|  \n|`_fgetwc_nolock`|\\<stdio.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_fgetc_nolock.c  \n// This program uses getc to read the first  \n// 80 input characters (or until the end of input)  \n// and place them into a string named buffer.  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n  \nint main( void )  \n{  \n   FILE *stream;  \n   char buffer[81];  \n   int  i, ch;  \n  \n   // Open file to read line from:   \n   if( fopen_s( &stream, \"crt_fgetc_nolock.txt\", \"r\" ) != 0 )  \n      exit( 0 );  \n  \n   // Read in first 80 characters and place them in \"buffer\":  \n   ch = fgetc( stream );  \n   for( i=0; (i < 80 ) && ( feof( stream ) == 0 ); i++ )  \n   {  \n      buffer[i] = (char)ch;  \n      ch = _fgetc_nolock( stream );  \n   }  \n  \n   // Add null to end string   \n   buffer[i] = '\\0';  \n   printf( \"%s\\n\", buffer );  \n   fclose( stream );  \n}  \n```  \n  \n## Input: crt_fgetc_nolock.txt  \n  \n```  \nLine one.  \nLine two.  \n```  \n  \n### Output  \n  \n```  \nLine one.  \nLine two.  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::IO::StreamReader::Read](https://msdn.microsoft.com/en-us/library/system.io.streamreader.read.aspx)  \n  \n-   [System::Console::Read](https://msdn.microsoft.com/en-us/library/system.console.read.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [fputc, fputwc](../../c-runtime-library/reference/fputc-fputwc.md)   \n [getc, getwc](../../c-runtime-library/reference/getc-getwc.md)"}