{"nodes":[{"pos":[12,44],"content":"terminate (CRT) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"terminate (CRT) | Microsoft Docs","pos":[0,32]}]},{"pos":[959,974],"content":"terminate (CRT)","linkify":"terminate (CRT)","nodes":[{"content":"terminate (CRT)","pos":[0,15]}]},{"pos":[975,1037],"content":"Calls <ph id=\"ph1\">`abort`</ph> or a function you specify using <ph id=\"ph2\">`set_terminate`</ph>.","source":"Calls `abort` or a function you specify using `set_terminate`."},{"pos":[1046,1052],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1102,1109],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1113,1211],"content":"The <ph id=\"ph1\">`terminate`</ph> function is used with C++ exception handling and is called in the following cases:","source":"The `terminate` function is used with C++ exception handling and is called in the following cases:"},{"content":"A matching catch handler cannot be found for a thrown C++ exception.","pos":[1221,1289]},{"content":"An exception is thrown by a destructor function during stack unwind.","pos":[1299,1367]},{"content":"The stack is corrupted after throwing an exception.","pos":[1377,1428]},{"content":"<ph id=\"ph1\">`terminate`</ph> calls <ph id=\"ph2\">`abort`</ph> by default.","pos":[1435,1472],"source":"`terminate` calls `abort` by default."},{"content":"You can change this default by writing your own termination function and calling <ph id=\"ph1\">`set_terminate`</ph> with the name of your function as its argument.","pos":[1473,1617],"source":" You can change this default by writing your own termination function and calling `set_terminate` with the name of your function as its argument."},{"content":"<ph id=\"ph1\">`terminate`</ph> calls the last function given as an argument to <ph id=\"ph2\">`set_terminate`</ph>.","pos":[1618,1694],"source":"`terminate` calls the last function given as an argument to `set_terminate`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Unhandled C++ Exceptions<ept id=\"p1\">](../../cpp/unhandled-cpp-exceptions.md)</ept>.","pos":[1695,1787],"source":" For more information, see [Unhandled C++ Exceptions](../../cpp/unhandled-cpp-exceptions.md)."},{"pos":[1796,1808],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[1815,1822]},{"content":"Required header","pos":[1823,1838]},{"content":"<ph id=\"ph1\">\\&lt;</ph>eh.h&gt;","pos":[1895,1902],"source":"\\<eh.h>"},{"pos":[1910,2034],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[2043,2050],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2861,2886],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[2890,2905]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[2906,2953],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[2954,3079],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[3088,3096],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Exception Handling Routines<ept id=\"p1\">](../../c-runtime-library/exception-handling-routines.md)</ept><ph id=\"ph1\"> </ph>","pos":[3100,3186],"source":"[Exception Handling Routines](../../c-runtime-library/exception-handling-routines.md) "},{"content":"<bpt id=\"p1\"> [</bpt>abort<ept id=\"p1\">](../../c-runtime-library/reference/abort.md)</ept><ph id=\"ph1\"> </ph>","pos":[3189,3242],"source":" [abort](../../c-runtime-library/reference/abort.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_set_se_translator<ept id=\"p1\">](../../c-runtime-library/reference/set-se-translator.md)</ept><ph id=\"ph1\"> </ph>","pos":[3245,3323],"source":" [_set_se_translator](../../c-runtime-library/reference/set-se-translator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>set_terminate<ept id=\"p1\">](../../c-runtime-library/reference/set-terminate-crt.md)</ept><ph id=\"ph1\"> </ph>","pos":[3326,3399],"source":" [set_terminate](../../c-runtime-library/reference/set-terminate-crt.md) "},{"content":"<bpt id=\"p1\"> [</bpt>set_unexpected<ept id=\"p1\">](../../c-runtime-library/reference/set-unexpected-crt.md)</ept><ph id=\"ph1\"> </ph>","pos":[3402,3477],"source":" [set_unexpected](../../c-runtime-library/reference/set-unexpected-crt.md) "},{"content":"<bpt id=\"p1\"> [</bpt>unexpected<ept id=\"p1\">](../../c-runtime-library/reference/unexpected-crt.md)</ept>","pos":[3480,3546],"source":" [unexpected](../../c-runtime-library/reference/unexpected-crt.md)"}],"content":"---\ntitle: \"terminate (CRT) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"terminate\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"terminate\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"terminate function\"\n  - \"exception handling, termination\"\nms.assetid: 90e67402-08e9-4b2a-962c-66a8afd3ccb4\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# terminate (CRT)\nCalls `abort` or a function you specify using `set_terminate`.  \n  \n## Syntax  \n  \n```  \nvoid terminate( void );  \n```  \n  \n## Remarks  \n The `terminate` function is used with C++ exception handling and is called in the following cases:  \n  \n-   A matching catch handler cannot be found for a thrown C++ exception.  \n  \n-   An exception is thrown by a destructor function during stack unwind.  \n  \n-   The stack is corrupted after throwing an exception.  \n  \n `terminate` calls `abort` by default. You can change this default by writing your own termination function and calling `set_terminate` with the name of your function as its argument. `terminate` calls the last function given as an argument to `set_terminate`. For more information, see [Unhandled C++ Exceptions](../../cpp/unhandled-cpp-exceptions.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`terminate`|\\<eh.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_terminate.cpp  \n// compile with: /EHsc  \n#include <eh.h>  \n#include <process.h>  \n#include <iostream>  \nusing namespace std;  \n  \nvoid term_func();  \n  \nint main()  \n{  \n    int i = 10, j = 0, result;  \n    set_terminate( term_func );  \n    try  \n    {  \n        if( j == 0 )  \n            throw \"Divide by zero!\";  \n        else  \n            result = i/j;  \n    }  \n    catch( int )  \n    {  \n        cout << \"Caught some integer exception.\\n\";  \n    }  \n    cout << \"This should never print.\\n\";  \n}  \n  \nvoid term_func()  \n{  \n    cout << \"term_func() was called by terminate().\\n\";  \n  \n    // ... cleanup tasks performed here  \n  \n    // If this function does not exit, abort is called.  \n  \n    exit(-1);  \n}  \n```  \n  \n```Output  \nterm_func() was called by terminate().  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Exception Handling Routines](../../c-runtime-library/exception-handling-routines.md)   \n [abort](../../c-runtime-library/reference/abort.md)   \n [_set_se_translator](../../c-runtime-library/reference/set-se-translator.md)   \n [set_terminate](../../c-runtime-library/reference/set-terminate-crt.md)   \n [set_unexpected](../../c-runtime-library/reference/set-unexpected-crt.md)   \n [unexpected](../../c-runtime-library/reference/unexpected-crt.md)"}