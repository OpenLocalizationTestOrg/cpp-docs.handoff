{"nodes":[{"pos":[12,43],"content":"CCommand::Open | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CCommand::Open | Microsoft Docs","pos":[0,31]}]},{"content":"CCommand::Open","pos":[669,683]},{"content":"Executes and optionally binds the command.","pos":[684,726]},{"content":"Syntax","pos":[735,741]},{"content":"Parameters","pos":[1678,1688]},{"content":"[in] The session in which to execute the command.","pos":[1705,1754]},{"content":"[in] The command to execute, passed as a Unicode string.","pos":[1777,1833]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> when using <ph id=\"ph1\">`CAccessor`</ph>, in which case the command will be retrieved from the value passed to the <bpt id=\"p2\">[</bpt>DEFINE_COMMAND<ept id=\"p2\">](../../data/oledb/define-command.md)</ept> macro.","pos":[1834,2006],"source":" Can be **NULL** when using `CAccessor`, in which case the command will be retrieved from the value passed to the [DEFINE_COMMAND](../../data/oledb/define-command.md) macro."},{"content":"See <bpt id=\"p1\">[</bpt>ICommand::Execute<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/ms718095.aspx)</ept> in the <bpt id=\"p2\">*</bpt>OLE DB Programmer's Reference<ept id=\"p2\">*</ept> for details.","pos":[2007,2138],"source":" See [ICommand::Execute](https://msdn.microsoft.com/en-us/library/ms718095.aspx) in the *OLE DB Programmer's Reference* for details."},{"content":"[in] Same as <ph id=\"ph1\">`wszCommand`</ph> except that this parameter takes an ANSI command string.","pos":[2160,2242],"source":" [in] Same as `wszCommand` except that this parameter takes an ANSI command string."},{"content":"The fourth form of this method can take a NULL value.","pos":[2243,2296]},{"content":"See \"Remarks\" later in this topic for details.","pos":[2297,2343]},{"content":"pPropSet","pos":[2351,2359]},{"content":"[in] A pointer to an array of <bpt id=\"p1\">[</bpt>DBPROPSET<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/ms714367.aspx)</ept> structures containing properties and values to be set.","pos":[2364,2516],"source":" [in] A pointer to an array of [DBPROPSET](https://msdn.microsoft.com/en-us/library/ms714367.aspx) structures containing properties and values to be set."},{"content":"See <bpt id=\"p1\">[</bpt>Property Sets and Property Groups<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/ms713696.aspx)</ept> in the <bpt id=\"p2\">*</bpt>OLE DB Programmer's Reference<ept id=\"p2\">*</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[2517,2711],"source":" See [Property Sets and Property Groups](https://msdn.microsoft.com/en-us/library/ms713696.aspx) in the *OLE DB Programmer's Reference* in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"[in/out] A pointer to memory where the count of rows affected by a command is returned.","pos":[2737,2824]},{"content":"If <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\*</ph>pRowsAffected<ept id=\"p1\">*</ept> is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>, no row count is returned.","pos":[2825,2884],"source":" If *\\*pRowsAffected* is **NULL**, no row count is returned."},{"content":"Otherwise, <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> sets *<ph id=\"ph1\">`pRowsAffected`</ph> according to the following conditions:","pos":[2885,2965],"source":" Otherwise, **Open** sets *`pRowsAffected` according to the following conditions:"},{"content":"If","pos":[2972,2974]},{"content":"Then","pos":[2975,2979]},{"pos":[3008,3065],"content":"The <bpt id=\"p1\">**</bpt>cParamSets<ept id=\"p1\">**</ept> element of <ph id=\"ph1\">`pParams`</ph> is greater than 1","source":"The **cParamSets** element of `pParams` is greater than 1"},{"pos":[3083,3184],"content":"represents the total number of rows affected by all of the parameter sets specified in the execution."},{"content":"The number of affected rows is not available","pos":[3189,3233]},{"pos":[3251,3264],"content":"is set to â€“1."},{"content":"The command does not update, delete, or insert rows","pos":[3269,3320]},{"pos":[3338,3351],"content":"is undefined."},{"content":"[in] A GUID that specifies the syntax and general rules for the provider to use in parsing the command text.","pos":[3376,3484]},{"content":"See <bpt id=\"p1\">[</bpt>ICommandText::GetCommandText<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/ms709825.aspx)</ept> and <bpt id=\"p2\">[</bpt>ICommandText::SetCommandText<ept id=\"p2\">](https://msdn.microsoft.com/en-us/library/ms709757.aspx)</ept> in the <bpt id=\"p3\">*</bpt>OLE DB Programmer's Reference<ept id=\"p3\">*</ept> for details.","pos":[3485,3718],"source":" See [ICommandText::GetCommandText](https://msdn.microsoft.com/en-us/library/ms709825.aspx) and [ICommandText::SetCommandText](https://msdn.microsoft.com/en-us/library/ms709757.aspx) in the *OLE DB Programmer's Reference* for details."},{"content":"[in] Specifies whether to bind the command automatically after being executed.","pos":[3736,3814]},{"content":"The default is <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>, which causes the command to be bound automatically.","pos":[3815,3891],"source":" The default is **true**, which causes the command to be bound automatically."},{"content":"Setting <ph id=\"ph1\">`bBind`</ph> to <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> prevents the automatic binding of the command so that you can bind manually.","pos":[3892,3997],"source":" Setting `bBind` to **false** prevents the automatic binding of the command so that you can bind manually."},{"content":"(Manual binding is of particular interest to OLAP users.)","pos":[3998,4055]},{"content":"[in] The number of <bpt id=\"p1\">[</bpt>DBPROPSET<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/ms714367.aspx)</ept> structures passed in the <bpt id=\"p2\">*</bpt>pPropSet<ept id=\"p2\">*</ept> argument.","pos":[4078,4210],"source":" [in] The number of [DBPROPSET](https://msdn.microsoft.com/en-us/library/ms714367.aspx) structures passed in the *pPropSet* argument."},{"content":"Return Value","pos":[4219,4231]},{"pos":[4235,4256],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph>.","source":"A standard `HRESULT`."},{"content":"Remarks","pos":[4265,4272]},{"pos":[4276,4405],"content":"The first three forms of <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> take a session, create a command, and execute the command, binding any parameters as necessary.","source":"The first three forms of **Open** take a session, create a command, and execute the command, binding any parameters as necessary."},{"pos":[4412,4495],"content":"The first form of <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> takes a Unicode command string and has no default value.","source":"The first form of **Open** takes a Unicode command string and has no default value."},{"pos":[4502,4650],"content":"The second form of <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> takes an ANSI command string and no default value (provided for backward compatibility with existing ANSI applications).","source":"The second form of **Open** takes an ANSI command string and no default value (provided for backward compatibility with existing ANSI applications)."},{"content":"The third form of <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> allows the command string to be NULL, because of type <ph id=\"ph1\">`int`</ph> with a default value of NULL.","pos":[4657,4773],"source":"The third form of **Open** allows the command string to be NULL, because of type `int` with a default value of NULL."},{"content":"It is provided for calling <ph id=\"ph1\">`Open(session, NULL);`</ph> or <ph id=\"ph2\">`Open(session);`</ph> because NULL is of type <ph id=\"ph3\">`int`</ph>.","pos":[4774,4874],"source":" It is provided for calling `Open(session, NULL);` or `Open(session);` because NULL is of type `int`."},{"content":"This version requires and asserts that the <ph id=\"ph1\">`int`</ph> parameter be NULL.","pos":[4875,4942],"source":" This version requires and asserts that the `int` parameter be NULL."},{"pos":[4949,5126],"content":"Use the fourth form of <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> when you have already created a command and you want to perform a single <bpt id=\"p2\">[</bpt>Prepare<ept id=\"p2\">](../../data/oledb/ccommand-prepare.md)</ept> and multiple executions.","source":"Use the fourth form of **Open** when you have already created a command and you want to perform a single [Prepare](../../data/oledb/ccommand-prepare.md) and multiple executions."},{"pos":[5134,5209],"content":"[!NOTE]\n **Open** calls **Execute**, which in turn calls `GetNextResult`.","leadings":["","> "],"nodes":[{"content":"<bpt id=\"p1\"> **</bpt>Open<ept id=\"p1\">**</ept> calls <bpt id=\"p2\">**</bpt>Execute<ept id=\"p2\">**</ept>, which in turn calls <ph id=\"ph1\">`GetNextResult`</ph>.","pos":[8,73],"source":" **Open** calls **Execute**, which in turn calls `GetNextResult`."}]},{"content":"Requirements","pos":[5218,5230]},{"pos":[5234,5256],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atldbcli.h","source":"**Header:** atldbcli.h"},{"content":"See Also","pos":[5265,5273]},{"content":"CCommand Class","pos":[5278,5292]}],"content":"---\ntitle: \"CCommand::Open | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ATL.CCommand.Open\"\n  - \"ATL::CCommand::Open\"\n  - \"CCommand.Open\"\n  - \"CCommand::Open\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Open method\"\nms.assetid: 4c9b8f31-faf3-452d-9a29-3d3e5f54d6f8\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CCommand::Open\nExecutes and optionally binds the command.  \n  \n## Syntax  \n  \n```  \n  \n      HRESULT Open(  \n   const CSession& session,  \n   LPCWSTR wszCommand,  \n   DBPROPSET *pPropSet = NULL,  \n   DBROWCOUNT* pRowsAffected = NULL,  \n   REFGUID guidCommand = DBGUID_DEFAULT,  \n   bool bBind = true,  \n   ULONG ulPropSets = 0  \n) throw( );  \nHRESULT Open(  \n   const CSession& session,  \n   LPCSTR szCommand,  \n   DBPROPSET *pPropSet = NULL,  \n   DBROWCOUNT* pRowsAffected = NULL,  \n   REFGUID guidCommand = DBGUID_DEFAULT,  \n   bool bBind = true,  \n   ULONG ulPropSets = 0  \n) throw( );  \nHRESULT Open(  \n   const CSession& session,  \n   INT szCommand = NULL,  \n   DBPROPSET *pPropSet = NULL,  \n   DBROWCOUNT* pRowsAffected = NULL,  \n   REFGUID guidCommand = DBGUID_DEFAULT,  \n   bool bBind = true,  \n   ULONG ulPropSets = 0  \n) throw( );  \nHRESULT Open(  \n   DBPROPSET *pPropSet = NULL,  \n   DBROWCOUNT* pRowsAffected = NULL,  \n   bool bBind = true,  \n   ULONG ulPropSets = 0  \n) throw( );  \n```  \n  \n#### Parameters  \n `session`  \n [in] The session in which to execute the command.  \n  \n `wszCommand`  \n [in] The command to execute, passed as a Unicode string. Can be **NULL** when using `CAccessor`, in which case the command will be retrieved from the value passed to the [DEFINE_COMMAND](../../data/oledb/define-command.md) macro. See [ICommand::Execute](https://msdn.microsoft.com/en-us/library/ms718095.aspx) in the *OLE DB Programmer's Reference* for details.  \n  \n `szCommand`  \n [in] Same as `wszCommand` except that this parameter takes an ANSI command string. The fourth form of this method can take a NULL value. See \"Remarks\" later in this topic for details.  \n  \n *pPropSet*  \n [in] A pointer to an array of [DBPROPSET](https://msdn.microsoft.com/en-us/library/ms714367.aspx) structures containing properties and values to be set. See [Property Sets and Property Groups](https://msdn.microsoft.com/en-us/library/ms713696.aspx) in the *OLE DB Programmer's Reference* in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `pRowsAffected`  \n [in/out] A pointer to memory where the count of rows affected by a command is returned. If *\\*pRowsAffected* is **NULL**, no row count is returned. Otherwise, **Open** sets *`pRowsAffected` according to the following conditions:  \n  \n|If|Then|  \n|--------|----------|  \n|The **cParamSets** element of `pParams` is greater than 1|*`pRowsAffected` represents the total number of rows affected by all of the parameter sets specified in the execution.|  \n|The number of affected rows is not available|*`pRowsAffected` is set to â€“1.|  \n|The command does not update, delete, or insert rows|*`pRowsAffected` is undefined.|  \n  \n `guidCommand`  \n [in] A GUID that specifies the syntax and general rules for the provider to use in parsing the command text. See [ICommandText::GetCommandText](https://msdn.microsoft.com/en-us/library/ms709825.aspx) and [ICommandText::SetCommandText](https://msdn.microsoft.com/en-us/library/ms709757.aspx) in the *OLE DB Programmer's Reference* for details.  \n  \n `bBind`  \n [in] Specifies whether to bind the command automatically after being executed. The default is **true**, which causes the command to be bound automatically. Setting `bBind` to **false** prevents the automatic binding of the command so that you can bind manually. (Manual binding is of particular interest to OLAP users.)  \n  \n `ulPropSets`  \n [in] The number of [DBPROPSET](https://msdn.microsoft.com/en-us/library/ms714367.aspx) structures passed in the *pPropSet* argument.  \n  \n## Return Value  \n A standard `HRESULT`.  \n  \n## Remarks  \n The first three forms of **Open** take a session, create a command, and execute the command, binding any parameters as necessary.  \n  \n The first form of **Open** takes a Unicode command string and has no default value.  \n  \n The second form of **Open** takes an ANSI command string and no default value (provided for backward compatibility with existing ANSI applications).  \n  \n The third form of **Open** allows the command string to be NULL, because of type `int` with a default value of NULL. It is provided for calling `Open(session, NULL);` or `Open(session);` because NULL is of type `int`. This version requires and asserts that the `int` parameter be NULL.  \n  \n Use the fourth form of **Open** when you have already created a command and you want to perform a single [Prepare](../../data/oledb/ccommand-prepare.md) and multiple executions.  \n  \n> [!NOTE]\n>  **Open** calls **Execute**, which in turn calls `GetNextResult`.  \n  \n## Requirements  \n **Header:** atldbcli.h  \n  \n## See Also  \n [CCommand Class](../../data/oledb/ccommand-class.md)"}