{"nodes":[{"pos":[12,56],"content":"_tempnam_dbg, _wtempnam_dbg | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_tempnam_dbg, _wtempnam_dbg | Microsoft Docs","pos":[0,44]}]},{"content":"_tempnam_dbg, _wtempnam_dbg","pos":[1172,1199]},{"pos":[1200,1383],"content":"Function versions of <bpt id=\"p1\">[</bpt>_tempnam, _wtempnam, tmpnam, _wtmpnam<ept id=\"p1\">](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)</ept> that use the debug version of <ph id=\"ph1\">`malloc, _malloc_dbg`</ph>.","source":"Function versions of [_tempnam, _wtempnam, tmpnam, _wtmpnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md) that use the debug version of `malloc, _malloc_dbg`."},{"content":"Syntax","pos":[1392,1398]},{"content":"Parameters","pos":[1718,1728]},{"content":"The path used in the file name if there is no TMP environment variable, or if TMP is not a valid directory.","pos":[1741,1848]},{"content":"The string that will be pre-pended to names returned by <ph id=\"ph1\">`_tempnam`</ph>.","pos":[1867,1934],"source":" The string that will be pre-pended to names returned by `_tempnam`."},{"content":"Requested type of memory block: <ph id=\"ph1\">`_CLIENT_BLOCK`</ph>or <ph id=\"ph2\">`_NORMAL_BLOCK`</ph>.","pos":[1956,2022],"source":" Requested type of memory block: `_CLIENT_BLOCK`or `_NORMAL_BLOCK`."},{"content":"Pointer to name of source file that requested allocation operation or <ph id=\"ph1\">`NULL`</ph>.","pos":[2043,2120],"source":" Pointer to name of source file that requested allocation operation or `NULL`."},{"content":"Line number in source file where allocation operation was requested or <ph id=\"ph1\">`NULL`</ph>.","pos":[2143,2221],"source":" Line number in source file where allocation operation was requested or `NULL`."},{"content":"Return Value","pos":[2230,2242]},{"content":"Each function returns a pointer to the name generated or <ph id=\"ph1\">`NULL`</ph> if there is a failure.","pos":[2246,2332],"source":"Each function returns a pointer to the name generated or `NULL` if there is a failure."},{"content":"Failure can occur if there is an invalid directory name specified in the TMP environment variable and in the <ph id=\"ph1\">`dir`</ph> parameter.","pos":[2333,2458],"source":" Failure can occur if there is an invalid directory name specified in the TMP environment variable and in the `dir` parameter."},{"pos":[2466,2584],"content":"[!NOTE]\n `free` (or `free_dbg`) does need to be called for pointers allocated by `_tempnam_dbg` and `_wtempnam_dbg`.","leadings":["","> "],"nodes":[{"content":"(or <ph id=\"ph1\">`free_dbg`</ph>) does need to be called for pointers allocated by <ph id=\"ph2\">`_tempnam_dbg`</ph> and <ph id=\"ph3\">`_wtempnam_dbg`</ph>.","pos":[16,116],"source":" (or `free_dbg`) does need to be called for pointers allocated by `_tempnam_dbg` and `_wtempnam_dbg`."}]},{"content":"Remarks","pos":[2593,2600]},{"content":"The <ph id=\"ph1\">`_tempnam_dbg`</ph>and <ph id=\"ph2\">`_wtempnam_dbg`</ph>functions are identical to <ph id=\"ph3\">`_tempnam`</ph>and <ph id=\"ph4\">`_wtempnam`</ph>except that, when <ph id=\"ph5\">`_DEBUG`</ph>is defined, these functions use the debug version of <ph id=\"ph6\">`malloc`</ph> and <ph id=\"ph7\">`_malloc_dbg`</ph>, to allocate memory if <ph id=\"ph8\">`NULL`</ph> is passed as the first parameter.","pos":[2604,2862],"source":"The `_tempnam_dbg`and `_wtempnam_dbg`functions are identical to `_tempnam`and `_wtempnam`except that, when `_DEBUG`is defined, these functions use the debug version of `malloc` and `_malloc_dbg`, to allocate memory if `NULL` is passed as the first parameter."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>_malloc_dbg<ept id=\"p1\">](../../c-runtime-library/reference/malloc-dbg.md)</ept>.","pos":[2863,2952],"source":" For more information, see [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md)."},{"content":"You do not need to call these functions explicitly in most cases.","pos":[2959,3024]},{"content":"Instead, you can define the flag <ph id=\"ph1\">`_CRTDBG_MAP_ALLOC`</ph>.","pos":[3025,3078],"source":" Instead, you can define the flag `_CRTDBG_MAP_ALLOC`."},{"content":"When <ph id=\"ph1\">`_CRTDBG_MAP_ALLOC`</ph> is defined, calls to <ph id=\"ph2\">`_tempnam`</ph> and <ph id=\"ph3\">`_wtempnam`</ph> are remapped to <ph id=\"ph4\">`_tempnam_dbg`</ph> and <ph id=\"ph5\">`_wtempnam_dbg`</ph>, respectively, with the <ph id=\"ph6\">`blockType`</ph> set to <ph id=\"ph7\">`_NORMAL_BLOCK`</ph>.","pos":[3079,3262],"source":" When `_CRTDBG_MAP_ALLOC` is defined, calls to `_tempnam` and `_wtempnam` are remapped to `_tempnam_dbg` and `_wtempnam_dbg`, respectively, with the `blockType` set to `_NORMAL_BLOCK`."},{"content":"Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as <ph id=\"ph1\">`_CLIENT_BLOCK`</ph>.","pos":[3263,3379],"source":" Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as `_CLIENT_BLOCK`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Types of blocks on the debug heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[3380,3489],"source":" For more information, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"Generic-Text Routine Mappings","pos":[3499,3528]},{"content":"TCHAR.H routine","pos":[3535,3550]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[3551,3579],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[3580,3593]},{"content":"_UNICODE defined","pos":[3594,3610]},{"content":"Requirements","pos":[3794,3806]},{"content":"Routine","pos":[3813,3820]},{"content":"Required header","pos":[3821,3836]},{"pos":[3895,3896],"content":","},{"content":"crtdbg.h&gt;","pos":[3915,3924],"source":"crtdbg.h>"},{"pos":[3932,4056],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":".NET Framework Equivalent","pos":[4065,4090]},{"content":"Not applicable.","pos":[4094,4109]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[4110,4157],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4158,4283],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[4292,4300]},{"content":"_tempnam, _wtempnam, tmpnam, _wtmpnam","pos":[4305,4342]},{"content":"Stream I/O","pos":[4419,4429]},{"content":"Debug Versions of Heap Allocation Functions","pos":[4475,4518]}],"content":"---\ntitle: \"_tempnam_dbg, _wtempnam_dbg | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wtempnam_dbg\"\n  - \"_tempnam_dbg\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wtempnam_dbg\"\n  - \"tempnam_dbg\"\n  - \"_tempnam_dbg\"\n  - \"_wtempnam_dbg\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"file names [C++], creating temporary\"\n  - \"tempnam_dbg function\"\n  - \"temporary files, creating\"\n  - \"file names [C++], temporary\"\n  - \"wtempnam_dbg function\"\n  - \"_tempnam_dbg function\"\n  - \"_wtempnam_dbg function\"\nms.assetid: e3760bb4-bb01-4808-b689-2c45af56a170\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _tempnam_dbg, _wtempnam_dbg\nFunction versions of [_tempnam, _wtempnam, tmpnam, _wtmpnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md) that use the debug version of `malloc, _malloc_dbg`.  \n  \n## Syntax  \n  \n```  \nchar *_tempnam_dbg(  \n   const char *dir,  \n   const char *prefix,  \n   int blockType,  \n   const char *filename,  \n   int linenumber   \n);  \nwchar_t *_wtempnam_dbg(  \n   const wchar_t *dir,  \n   const wchar_t *prefix,  \n   int blockType,  \n   const char *filename,  \n   int linenumber   \n);  \n```  \n  \n#### Parameters  \n `dir`  \n The path used in the file name if there is no TMP environment variable, or if TMP is not a valid directory.  \n  \n `prefix`  \n The string that will be pre-pended to names returned by `_tempnam`.  \n  \n `blockType`  \n Requested type of memory block: `_CLIENT_BLOCK`or `_NORMAL_BLOCK`.  \n  \n `filename`  \n Pointer to name of source file that requested allocation operation or `NULL`.  \n  \n `linenumber`  \n Line number in source file where allocation operation was requested or `NULL`.  \n  \n## Return Value  \n Each function returns a pointer to the name generated or `NULL` if there is a failure. Failure can occur if there is an invalid directory name specified in the TMP environment variable and in the `dir` parameter.  \n  \n> [!NOTE]\n>  `free` (or `free_dbg`) does need to be called for pointers allocated by `_tempnam_dbg` and `_wtempnam_dbg`.  \n  \n## Remarks  \n The `_tempnam_dbg`and `_wtempnam_dbg`functions are identical to `_tempnam`and `_wtempnam`except that, when `_DEBUG`is defined, these functions use the debug version of `malloc` and `_malloc_dbg`, to allocate memory if `NULL` is passed as the first parameter. For more information, see [_malloc_dbg](../../c-runtime-library/reference/malloc-dbg.md).  \n  \n You do not need to call these functions explicitly in most cases. Instead, you can define the flag `_CRTDBG_MAP_ALLOC`. When `_CRTDBG_MAP_ALLOC` is defined, calls to `_tempnam` and `_wtempnam` are remapped to `_tempnam_dbg` and `_wtempnam_dbg`, respectively, with the `blockType` set to `_NORMAL_BLOCK`. Thus, you do not need to call these functions explicitly unless you want to mark the heap blocks as `_CLIENT_BLOCK`. For more information, see [Types of blocks on the debug heap](/visualstudio/debugger/crt-debug-heap-details).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_ttempnam_dbg`|`_tempnam_dbg`|`_tempnam_dbg`|`_wtempnam_dbg`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_tempnam_dbg`, `_wtempnam_dbg`|\\<crtdbg.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [_tempnam, _wtempnam, tmpnam, _wtmpnam](../../c-runtime-library/reference/tempnam-wtempnam-tmpnam-wtmpnam.md)   \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [Debug Versions of Heap Allocation Functions](/visualstudio/debugger/debug-versions-of-heap-allocation-functions)"}