{"nodes":[{"pos":[12,52],"content":"binary_negate (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"binary_negate (STL-CLR) | Microsoft Docs","pos":[0,40]}]},{"content":"binary_negate (STL/CLR)","pos":[638,661]},{"content":"The template class describes a functor that, when called, returns the logical NOT of its stored two-argument functor.","pos":[662,779]},{"content":"You use it specify a function object in terms of its stored functor.","pos":[780,848]},{"content":"Syntax","pos":[857,863]},{"content":"Parameters","pos":[1576,1586]},{"content":"Fun","pos":[1590,1593]},{"content":"The type of the stored functor.","pos":[1597,1628]},{"content":"Member Functions","pos":[1637,1653]},{"content":"Type Definition","pos":[1660,1675]},{"content":"Description","pos":[1676,1687]},{"content":"delegate_type","pos":[1736,1749]},{"content":"The type of the generic delegate.","pos":[1750,1783]},{"content":"first_argument_type","pos":[1788,1807]},{"content":"The type of the functor first argument.","pos":[1808,1847]},{"content":"result_type","pos":[1852,1863]},{"content":"The type of the functor result.","pos":[1864,1895]},{"content":"second_argument_type","pos":[1900,1920]},{"content":"The type of the functor second argument.","pos":[1921,1961]},{"content":"stored_function_type","pos":[1966,1986]},{"content":"The type of the functor.","pos":[1987,2011]},{"content":"Member","pos":[2019,2025]},{"content":"Description","pos":[2026,2037]},{"content":"binary_negate","pos":[2077,2090]},{"content":"Constructs the functor.","pos":[2091,2114]},{"content":"Operator","pos":[2122,2130]},{"content":"Description","pos":[2131,2142]},{"content":"operator()","pos":[2184,2194]},{"content":"Computes the desired function.","pos":[2195,2225]},{"content":"operator delegate_type^()","pos":[2230,2255]},{"content":"Casts the functor to a delegate.","pos":[2256,2288]},{"content":"Remarks","pos":[2298,2305]},{"content":"The template class describes a two-argument functor that stores another two-argument functor.","pos":[2309,2402]},{"content":"It defines the member operator <ph id=\"ph1\">`operator()`</ph> so that, when the object is called as a function, it returns the logical NOT of the stored functor called with the two arguments.","pos":[2403,2576],"source":" It defines the member operator `operator()` so that, when the object is called as a function, it returns the logical NOT of the stored functor called with the two arguments."},{"pos":[2583,2705],"content":"You can also pass the object as a function argument whose type is <ph id=\"ph1\">`delegate_type^`</ph> and it will be converted appropriately.","source":"You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately."},{"content":"Example","pos":[2714,2721]},{"content":"Requirements","pos":[4104,4116]},{"pos":[4120,4152],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[4159,4180],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[4189,4197]},{"content":"not2 (STL/CLR)","pos":[4202,4216]}],"content":"---\ntitle: \"binary_negate (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::binary_negate\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"binary_negate function [STL/CLR]\"\nms.assetid: 0c3b47eb-0f37-4cb2-b879-4c9f0e57d275\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# binary_negate (STL/CLR)\nThe template class describes a functor that, when called, returns the logical NOT of its stored two-argument functor. You use it specify a function object in terms of its stored functor.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Fun>  \n    ref class binary_negate  \n    { // wrap operator()  \npublic:  \n    typedef Fun stored_function_type;  \n    typedef typename Fun::first_argument_type first_argument_type;  \n    typedef typename Fun::second_argument_type second_argument_type;  \n    typedef bool result_type;  \n    typedef Microsoft::VisualC::StlClr::BinaryDelegate<  \n        first_argument_type, second_argument_type, result_type>  \n        delegate_type;  \n  \n    explicit binary_negate(Fun% functor);  \n    binary_negate(binary_negate<Arg>% right);  \n  \n    result_type operator()(first_argument_type left,  \n        second_argument_type right);  \n    operator delegate_type^();  \n    };  \n```  \n  \n#### Parameters  \n Fun  \n The type of the stored functor.  \n  \n## Member Functions  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|delegate_type|The type of the generic delegate.|  \n|first_argument_type|The type of the functor first argument.|  \n|result_type|The type of the functor result.|  \n|second_argument_type|The type of the functor second argument.|  \n|stored_function_type|The type of the functor.|  \n  \n|Member|Description|  \n|------------|-----------------|  \n|binary_negate|Constructs the functor.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|operator()|Computes the desired function.|  \n|operator delegate_type^()|Casts the functor to a delegate.|  \n  \n## Remarks  \n The template class describes a two-argument functor that stores another two-argument functor. It defines the member operator `operator()` so that, when the object is called as a function, it returns the logical NOT of the stored functor called with the two arguments.  \n  \n You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately.  \n  \n## Example  \n  \n```  \n// cliext_binary_negate.cpp   \n// compile with: /clr   \n#include <cliext/algorithm>   \n#include <cliext/functional>   \n#include <cliext/vector>   \n  \ntypedef cliext::vector<int> Myvector;   \nint main()   \n    {   \n    Myvector c1;   \n    c1.push_back(4);   \n    c1.push_back(3);   \n    Myvector c2;   \n    c2.push_back(4);   \n    c2.push_back(4);   \n    Myvector c3(2, 0);   \n  \n// display initial contents \" 4 3\" and \" 4 4\"   \n    for each (int elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    for each (int elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display   \n    cliext::less<int> less_op;   \n  \n    cliext::transform(c1.begin(), c1.begin() + 2,   \n        c2.begin(), c3.begin(),   \n        cliext::binary_negate<cliext::less<int> >(less_op));   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display with function   \n    cliext::transform(c1.begin(), c1.begin() + 2,   \n        c2.begin(), c3.begin(), cliext::not2(less_op));   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n4 3  \n4 4  \n1 0  \n1 0  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [not2 (STL/CLR)](../dotnet/not2-stl-clr.md)"}