{"nodes":[{"pos":[12,44],"content":"stack (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"stack (STL-CLR) | Microsoft Docs","pos":[0,32]}]},{"content":"stack (STL/CLR)","pos":[680,695]},{"content":"The template class describes an object that controls a varying-length sequence of elements that has last-in first-out access.","pos":[696,821]},{"content":"You use the container adapter <ph id=\"ph1\">`stack`</ph> to manage an underlying container as a push-down stack.","pos":[822,915],"source":" You use the container adapter `stack` to manage an underlying container as a push-down stack."},{"content":"In the description below, <ph id=\"ph1\">`GValue`</ph> is the same as <ph id=\"ph2\">`Value`</ph> unless the latter is a ref type, in which case it is <ph id=\"ph3\">`Value^`</ph>.","pos":[922,1042],"source":"In the description below, `GValue` is the same as `Value` unless the latter is a ref type, in which case it is `Value^`."},{"content":"Similarly, <ph id=\"ph1\">`GContainer`</ph> is the same as <ph id=\"ph2\">`Container`</ph> unless the latter is a ref type, in which case it is <ph id=\"ph3\">`Container^`</ph>.","pos":[1043,1160],"source":" Similarly, `GContainer` is the same as `Container` unless the latter is a ref type, in which case it is `Container^`."},{"content":"Syntax","pos":[1169,1175]},{"content":"Parameters","pos":[1409,1419]},{"content":"Value","pos":[1423,1428]},{"content":"The type of an element in the controlled sequence.","pos":[1432,1482]},{"content":"Container","pos":[1489,1498]},{"content":"The type of the underlying container.","pos":[1502,1539]},{"content":"Members","pos":[1548,1555]},{"content":"Type Definition","pos":[1562,1577]},{"content":"Description","pos":[1578,1589]},{"content":"stack::const_reference (STL/CLR)","pos":[1639,1671]},{"content":"The type of a constant reference to an element.","pos":[1717,1764]},{"content":"stack::container_type (STL/CLR)","pos":[1770,1801]},{"content":"The type of the underlying container.","pos":[1846,1883]},{"content":"stack::difference_type (STL/CLR)","pos":[1889,1921]},{"content":"The type of a signed distance between two elements.","pos":[1967,2018]},{"content":"stack::generic_container (STL/CLR)","pos":[2024,2058]},{"content":"The type of the generic interface for the container adapter.","pos":[2106,2166]},{"content":"stack::generic_value (STL/CLR)","pos":[2172,2202]},{"content":"The type of an element for the generic interface for the container adapter.","pos":[2246,2321]},{"content":"stack::reference (STL/CLR)","pos":[2327,2353]},{"content":"The type of a reference to an element.","pos":[2393,2431]},{"content":"stack::size_type (STL/CLR)","pos":[2437,2463]},{"content":"The type of a signed distance between two elements.","pos":[2503,2554]},{"content":"stack::value_type (STL/CLR)","pos":[2560,2587]},{"content":"The type of an element.","pos":[2628,2651]},{"content":"Member Function","pos":[2659,2674]},{"content":"Description","pos":[2675,2686]},{"content":"stack::assign (STL/CLR)","pos":[2736,2759]},{"content":"Replaces all elements.","pos":[2796,2818]},{"content":"stack::empty (STL/CLR)","pos":[2824,2846]},{"content":"Tests whether no elements are present.","pos":[2882,2920]},{"content":"stack::get_container (STL/CLR)","pos":[2926,2956]},{"content":"Accesses the underlying container.","pos":[3000,3034]},{"content":"stack::pop (STL/CLR)","pos":[3040,3060]},{"content":"Removes the last element.","pos":[3094,3119]},{"content":"stack::push (STL/CLR)","pos":[3125,3146]},{"content":"Adds a new last element.","pos":[3181,3205]},{"content":"stack::size (STL/CLR)","pos":[3211,3232]},{"content":"Counts the number of elements.","pos":[3267,3297]},{"content":"stack::stack (STL/CLR)","pos":[3303,3325]},{"content":"Constructs a container object.","pos":[3361,3391]},{"content":"stack::top (STL/CLR)","pos":[3397,3417]},{"content":"Accesses the last element.","pos":[3451,3477]},{"content":"stack::to_array (STL/CLR)","pos":[3483,3508]},{"content":"Copies the controlled sequence to a new array.","pos":[3547,3593]},{"content":"Property","pos":[3601,3609]},{"content":"Description","pos":[3610,3621]},{"content":"stack::top_item (STL/CLR)","pos":[3664,3689]},{"content":"Accesses the last element.","pos":[3728,3754]},{"content":"Operator","pos":[3762,3770]},{"content":"Description","pos":[3771,3782]},{"content":"stack::operator= (STL/CLR)","pos":[3825,3851]},{"content":"Replaces the controlled sequence.","pos":[3897,3930]},{"content":"operator!= (stack) (STL/CLR)","pos":[3936,3964]},{"pos":[4014,4084],"content":"Determines if a <ph id=\"ph1\">`stack`</ph> object is not equal to another <ph id=\"ph2\">`stack`</ph> object.","source":"Determines if a `stack` object is not equal to another `stack` object."},{"content":"operator&lt; (stack) (STL/CLR)","pos":[4090,4117],"source":"operator< (stack) (STL/CLR)"},{"pos":[4166,4233],"content":"Determines if a <ph id=\"ph1\">`stack`</ph> object is less than another <ph id=\"ph2\">`stack`</ph> object.","source":"Determines if a `stack` object is less than another `stack` object."},{"content":"operator&lt;= (stack) (STL/CLR)","pos":[4239,4267],"source":"operator<= (stack) (STL/CLR)"},{"pos":[4320,4399],"content":"Determines if a <ph id=\"ph1\">`stack`</ph> object is less than or equal to another <ph id=\"ph2\">`stack`</ph> object.","source":"Determines if a `stack` object is less than or equal to another `stack` object."},{"content":"operator== (stack) (STL/CLR)","pos":[4405,4433]},{"pos":[4481,4547],"content":"Determines if a <ph id=\"ph1\">`stack`</ph> object is equal to another <ph id=\"ph2\">`stack`</ph> object.","source":"Determines if a `stack` object is equal to another `stack` object."},{"content":"operator&gt; (stack) (STL/CLR)","pos":[4553,4580],"source":"operator> (stack) (STL/CLR)"},{"pos":[4632,4702],"content":"Determines if a <ph id=\"ph1\">`stack`</ph> object is greater than another <ph id=\"ph2\">`stack`</ph> object.","source":"Determines if a `stack` object is greater than another `stack` object."},{"content":"operator&gt;= (stack) (STL/CLR)","pos":[4708,4736],"source":"operator>= (stack) (STL/CLR)"},{"pos":[4792,4874],"content":"Determines if a <ph id=\"ph1\">`stack`</ph> object is greater than or equal to another <ph id=\"ph2\">`stack`</ph> object.","source":"Determines if a `stack` object is greater than or equal to another `stack` object."},{"content":"Interfaces","pos":[4884,4894]},{"content":"Interface","pos":[4901,4910]},{"content":"Description","pos":[4911,4922]},{"content":"&lt;xref:System.ICloneable&gt;","pos":[4965,4989],"source":"<xref:System.ICloneable>"},{"content":"Duplicate an object.","pos":[4990,5010]},{"content":"IStack<ph id=\"ph1\">\\&lt;</ph>Value, Container&gt;","pos":[5015,5040],"source":"IStack\\<Value, Container>"},{"content":"Maintain generic container adapter.","pos":[5041,5076]},{"content":"Remarks","pos":[5086,5093]},{"content":"The object allocates and frees storage for the sequence it controls through an underlying container, of type <ph id=\"ph1\">`Container`</ph>, that stores <ph id=\"ph2\">`Value`</ph> elements and grows on demand.","pos":[5097,5268],"source":"The object allocates and frees storage for the sequence it controls through an underlying container, of type `Container`, that stores `Value` elements and grows on demand."},{"content":"The object restricts access to pushing and popping just the last element, implementing a last-in first-out queue (also known as a LIFO queue, or stack).","pos":[5269,5421]},{"content":"Requirements","pos":[5430,5442]},{"pos":[5446,5473],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/stack&gt;","source":"**Header:** \\<cliext/stack>"},{"pos":[5480,5501],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[5510,5518]},{"content":"deque (STL/CLR)","pos":[5523,5538]},{"content":"list (STL/CLR)","pos":[5573,5587]},{"content":"priority_queue (STL/CLR)","pos":[5621,5645]},{"content":"queue (STL/CLR)","pos":[5689,5704]},{"content":"vector (STL/CLR)","pos":[5739,5755]},{"content":"STL/CLR Library Reference","pos":[5791,5816]}],"content":"---\ntitle: \"stack (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::stack\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"<stack> header [STL/CLR]\"\n  - \"<cliext/stack> header [STL/CLR]\"\n  - \"stack class [STL/CLR]\"\nms.assetid: 6ee96b9f-8a33-4cf7-b7e0-6535c24bdefb\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# stack (STL/CLR)\nThe template class describes an object that controls a varying-length sequence of elements that has last-in first-out access. You use the container adapter `stack` to manage an underlying container as a push-down stack.  \n  \n In the description below, `GValue` is the same as `Value` unless the latter is a ref type, in which case it is `Value^`. Similarly, `GContainer` is the same as `Container` unless the latter is a ref type, in which case it is `Container^`.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Value,  \n    typename Container>  \n    ref class stack  \n        :   public  \n        System::ICloneable,  \n        Microsoft::VisualC::StlClr::IStack<GValue, GContainer>  \n    { ..... };  \n```  \n  \n#### Parameters  \n Value  \n The type of an element in the controlled sequence.  \n  \n Container  \n The type of the underlying container.  \n  \n## Members  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|[stack::const_reference (STL/CLR)](../dotnet/stack-const-reference-stl-clr.md)|The type of a constant reference to an element.|  \n|[stack::container_type (STL/CLR)](../dotnet/stack-container-type-stl-clr.md)|The type of the underlying container.|  \n|[stack::difference_type (STL/CLR)](../dotnet/stack-difference-type-stl-clr.md)|The type of a signed distance between two elements.|  \n|[stack::generic_container (STL/CLR)](../dotnet/stack-generic-container-stl-clr.md)|The type of the generic interface for the container adapter.|  \n|[stack::generic_value (STL/CLR)](../dotnet/stack-generic-value-stl-clr.md)|The type of an element for the generic interface for the container adapter.|  \n|[stack::reference (STL/CLR)](../dotnet/stack-reference-stl-clr.md)|The type of a reference to an element.|  \n|[stack::size_type (STL/CLR)](../dotnet/stack-size-type-stl-clr.md)|The type of a signed distance between two elements.|  \n|[stack::value_type (STL/CLR)](../dotnet/stack-value-type-stl-clr.md)|The type of an element.|  \n  \n|Member Function|Description|  \n|---------------------|-----------------|  \n|[stack::assign (STL/CLR)](../dotnet/stack-assign-stl-clr.md)|Replaces all elements.|  \n|[stack::empty (STL/CLR)](../dotnet/stack-empty-stl-clr.md)|Tests whether no elements are present.|  \n|[stack::get_container (STL/CLR)](../dotnet/stack-get-container-stl-clr.md)|Accesses the underlying container.|  \n|[stack::pop (STL/CLR)](../dotnet/stack-pop-stl-clr.md)|Removes the last element.|  \n|[stack::push (STL/CLR)](../dotnet/stack-push-stl-clr.md)|Adds a new last element.|  \n|[stack::size (STL/CLR)](../dotnet/stack-size-stl-clr.md)|Counts the number of elements.|  \n|[stack::stack (STL/CLR)](../dotnet/stack-stack-stl-clr.md)|Constructs a container object.|  \n|[stack::top (STL/CLR)](../dotnet/stack-top-stl-clr.md)|Accesses the last element.|  \n|[stack::to_array (STL/CLR)](../dotnet/stack-to-array-stl-clr.md)|Copies the controlled sequence to a new array.|  \n  \n|Property|Description|  \n|--------------|-----------------|  \n|[stack::top_item (STL/CLR)](../dotnet/stack-top-item-stl-clr.md)|Accesses the last element.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|[stack::operator= (STL/CLR)](../dotnet/stack-operator-assign-stl-clr.md)|Replaces the controlled sequence.|  \n|[operator!= (stack) (STL/CLR)](../dotnet/operator-inequality-stack-stl-clr.md)|Determines if a `stack` object is not equal to another `stack` object.|  \n|[operator< (stack) (STL/CLR)](../dotnet/operator-less-than-stack-stl-clr.md)|Determines if a `stack` object is less than another `stack` object.|  \n|[operator<= (stack) (STL/CLR)](../dotnet/operator-less-or-equal-stack-stl-clr.md)|Determines if a `stack` object is less than or equal to another `stack` object.|  \n|[operator== (stack) (STL/CLR)](../dotnet/operator-equality-stack-stl-clr.md)|Determines if a `stack` object is equal to another `stack` object.|  \n|[operator> (stack) (STL/CLR)](../dotnet/operator-greater-than-stack-stl-clr.md)|Determines if a `stack` object is greater than another `stack` object.|  \n|[operator>= (stack) (STL/CLR)](../dotnet/operator-greater-or-equal-stack-stl-clr.md)|Determines if a `stack` object is greater than or equal to another `stack` object.|  \n  \n## Interfaces  \n  \n|Interface|Description|  \n|---------------|-----------------|  \n|<xref:System.ICloneable>|Duplicate an object.|  \n|IStack\\<Value, Container>|Maintain generic container adapter.|  \n  \n## Remarks  \n The object allocates and frees storage for the sequence it controls through an underlying container, of type `Container`, that stores `Value` elements and grows on demand. The object restricts access to pushing and popping just the last element, implementing a last-in first-out queue (also known as a LIFO queue, or stack).  \n  \n## Requirements  \n **Header:** \\<cliext/stack>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [deque (STL/CLR)](../dotnet/deque-stl-clr.md)   \n [list (STL/CLR)](../dotnet/list-stl-clr.md)   \n [priority_queue (STL/CLR)](../dotnet/priority-queue-stl-clr.md)   \n [queue (STL/CLR)](../dotnet/queue-stl-clr.md)   \n [vector (STL/CLR)](../dotnet/vector-stl-clr.md)   \n [STL/CLR Library Reference](../dotnet/stl-clr-library-reference.md)"}