{"nodes":[{"pos":[12,53],"content":"vector::resize (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vector::resize (STL-CLR) | Microsoft Docs","pos":[0,41]}]},{"content":"vector::resize (STL/CLR)","pos":[631,655]},{"content":"Changes the number of elements.","pos":[656,687]},{"content":"Syntax","pos":[696,702]},{"content":"Parameters","pos":[814,824]},{"content":"new_size","pos":[828,836]},{"content":"New size of the controlled sequence.","pos":[840,876]},{"content":"val","pos":[883,886]},{"content":"Value of the padding element.","pos":[890,919]},{"content":"Remarks","pos":[928,935]},{"content":"The member functions both ensure that <bpt id=\"p1\">[</bpt>vector::size (STL/CLR)<ept id=\"p1\">](../dotnet/vector-size-stl-clr.md)</ept><ph id=\"ph1\">`()`</ph> henceforth returns <ph id=\"ph2\">`new_size`</ph>.","pos":[939,1070],"source":"The member functions both ensure that [vector::size (STL/CLR)](../dotnet/vector-size-stl-clr.md)`()` henceforth returns `new_size`."},{"content":"If it must make the controlled sequence longer, the first member function appends elements with value <ph id=\"ph1\">`value_type()`</ph>, while the second member function appends elements with value <ph id=\"ph2\">`val`</ph>.","pos":[1071,1256],"source":" If it must make the controlled sequence longer, the first member function appends elements with value `value_type()`, while the second member function appends elements with value `val`."},{"content":"To make the controlled sequence shorter, both member functions effectively erase the last element <bpt id=\"p1\">[</bpt>vector::size (STL/CLR)<ept id=\"p1\">](../dotnet/vector-size-stl-clr.md)</ept><ph id=\"ph1\">`() -`</ph> <ph id=\"ph2\">`new_size`</ph> times.","pos":[1257,1437],"source":" To make the controlled sequence shorter, both member functions effectively erase the last element [vector::size (STL/CLR)](../dotnet/vector-size-stl-clr.md)`() -` `new_size` times."},{"content":"You use it to ensure that the controlled sequence has size <ph id=\"ph1\">`new_size`</ph>, by either trimming or padding the current controlled sequence.","pos":[1438,1571],"source":" You use it to ensure that the controlled sequence has size `new_size`, by either trimming or padding the current controlled sequence."},{"content":"Example","pos":[1580,1587]},{"content":"Requirements","pos":[2413,2425]},{"pos":[2429,2457],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/vector&gt;","source":"**Header:** \\<cliext/vector>"},{"pos":[2464,2485],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2494,2502]},{"content":"vector (STL/CLR)","pos":[2507,2523]},{"content":"vector::clear (STL/CLR)","pos":[2559,2582]},{"content":"vector::erase (STL/CLR)","pos":[2624,2647]},{"content":"vector::insert (STL/CLR)","pos":[2689,2713]}],"content":"---\ntitle: \"vector::resize (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::vector::resize\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"resize member [STL/CLR]\"\nms.assetid: a3556fbc-67d9-463a-9ffc-cb43ee15657f\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# vector::resize (STL/CLR)\nChanges the number of elements.  \n  \n## Syntax  \n  \n```  \nvoid resize(size_type new_size);  \nvoid resize(size_type new_size, value_type val);  \n```  \n  \n#### Parameters  \n new_size  \n New size of the controlled sequence.  \n  \n val  \n Value of the padding element.  \n  \n## Remarks  \n The member functions both ensure that [vector::size (STL/CLR)](../dotnet/vector-size-stl-clr.md)`()` henceforth returns `new_size`. If it must make the controlled sequence longer, the first member function appends elements with value `value_type()`, while the second member function appends elements with value `val`. To make the controlled sequence shorter, both member functions effectively erase the last element [vector::size (STL/CLR)](../dotnet/vector-size-stl-clr.md)`() -` `new_size` times. You use it to ensure that the controlled sequence has size `new_size`, by either trimming or padding the current controlled sequence.  \n  \n## Example  \n  \n```  \n// cliext_vector_resize.cpp   \n// compile with: /clr   \n#include <cliext/vector>   \n  \nint main()   \n    {   \n// construct an empty container and pad with default values   \n    cliext::vector<wchar_t> c1;   \n    System::Console::WriteLine(\"size() = {0}\", c1.size());   \n    c1.resize(4);   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", (int)elem);   \n    System::Console::WriteLine();   \n  \n// resize to empty   \n    c1.resize(0);   \n    System::Console::WriteLine(\"size() = {0}\", c1.size());   \n  \n// resize and pad   \n    c1.resize(5, L'x');   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nsize() = 0  \n 0 0 0 0  \nsize() = 0  \n x x x x x  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/vector>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [vector (STL/CLR)](../dotnet/vector-stl-clr.md)   \n [vector::clear (STL/CLR)](../dotnet/vector-clear-stl-clr.md)   \n [vector::erase (STL/CLR)](../dotnet/vector-erase-stl-clr.md)   \n [vector::insert (STL/CLR)](../dotnet/vector-insert-stl-clr.md)"}