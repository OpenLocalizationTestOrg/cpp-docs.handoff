<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd9d33a34cd04d07b673fe271ae682ddcd5f299c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\text\generic-text-mappings-in-tchar-h.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1805a541fb952ed55428c8781b6ba90bed4d6118</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d83b47deee2e7795fb2ec2542a9d2c5666b4d58d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Generic-Text Mappings in Tchar.h | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Generic-Text Mappings in Tchar.h</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To simplify the transporting of code for international use, the <ph id="ph1">[!INCLUDE[TLA#tla_ms](../text/includes/tlasharptla_ms_md.md)]</ph> run-time library provides <ph id="ph2">[!INCLUDE[TLA#tla_ms](../text/includes/tlasharptla_ms_md.md)]</ph>-specific generic-text mappings for many data types, routines, and other objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use these mappings, which are defined in Tchar.h, to write generic code that can be compiled for single-byte, multibyte, or <ph id="ph1">[!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)]</ph> character sets, depending on a manifest constant that you define by using a <ph id="ph2">`#define`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Generic-text mappings are <ph id="ph1">[!INCLUDE[TLA#tla_ms](../text/includes/tlasharptla_ms_md.md)]</ph> extensions that are not <ph id="ph2">[!INCLUDE[vcpransi](../atl-mfc-shared/reference/includes/vcpransi_md.md)]</ph> compatible.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By using the Tchar.h, you can build single-byte, Multibyte Character Set (MBCS), and <ph id="ph1">[!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)]</ph> applications from the same sources.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Tchar.h defines macros (which have the prefix <ph id="ph1">`_tcs`</ph>) that, with the correct preprocessor definitions, map to <ph id="ph2">`str`</ph>, <ph id="ph3">`_mbs`</ph>, or <ph id="ph4">`wcs`</ph> functions, as appropriate.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To build MBCS, define the symbol <ph id="ph1">`_MBCS`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To build <ph id="ph1">[!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)]</ph>, define the symbol <ph id="ph2">`_UNICODE`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To build a single-byte application, define neither (the default).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`_MBCS`</ph> is defined for MFC applications.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_TCHAR`</ph> data type is defined conditionally in Tchar.h.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the symbol <ph id="ph1">`_UNICODE`</ph> is defined for your build, <ph id="ph2">`_TCHAR`</ph> is defined as <ph id="ph3">`wchar_t`</ph>; otherwise, for single-byte and MBCS builds, it is defined as <ph id="ph4">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">`wchar_t`</ph>, the basic Unicode wide-character data type, is the 16-bit counterpart to an 8-bit signed <ph id="ph2">`char`</ph>.) For international applications, use the <ph id="ph3">`_tcs`</ph> family of functions, which operate in <ph id="ph4">`_TCHAR`</ph> units, not bytes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`_tcsncpy`</ph> copies <ph id="ph2">`n`</ph> <ph id="ph3">`_TCHARs`</ph>, not <ph id="ph4">`n`</ph> bytes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because some Single Byte Character Set (SBCS) string-handling functions take (signed) <ph id="ph1">`char*`</ph> parameters, a type mismatch compiler warning results when <ph id="ph2">`_MBCS`</ph> is defined.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There are three ways to avoid this warning:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use the type-safe inline function thunks in Tchar.h.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is the default behavior.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use the direct macros in Tchar.h by defining <ph id="ph1">`_MB_MAP_DIRECT`</ph> on the command line.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you do this, you must manually match types.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is the fastest method, but is not type-safe.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use the type-safe statically linked library function thunks in Tchar.h.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To do so, define the constant <ph id="ph1">`_NO_INLINING`</ph> on the command line.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is the slowest method, but the most type-safe.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Preprocessor Directives for Generic-Text Mappings</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>define</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Compiled version</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>(wide-character)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>maps to</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Multibyte-character</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>maps to</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>None (the default has neither <ph id="ph1">`_UNICODE`</ph> nor <ph id="ph2">`_MBCS`</ph> defined)</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>SBCS (<ph id="ph1">[!INCLUDE[TLA#tla_ascii](../text/includes/tlasharptla_ascii_md.md)]</ph>)</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>maps to</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, the generic-text function <ph id="ph1">`_tcsrev`</ph>, which is defined in Tchar.h, maps to <ph id="ph2">`_mbsrev`</ph> if you defined <ph id="ph3">`_MBCS`</ph> in your program, or to <ph id="ph4">`_wcsrev`</ph> if you defined <ph id="ph5">`_UNICODE`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`_tcsrev`</ph> maps to <ph id="ph2">`strrev`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Other data type mappings are provided in Tchar.h for programming convenience, but <ph id="ph1">`_TCHAR`</ph> is the most useful.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Generic-Text Data Type Mappings</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Generic-Text</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Data Type Name</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp;</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>_MBCS Not Defined</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>_MBCS</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Defined</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>_UNICODE</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Defined</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>or</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>No effect (removed by preprocessor)</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>No effect (removed by preprocessor)</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>(converts the following character or string to its <ph id="ph1">[!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)]</ph> counterpart)</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For a list of generic-text mappings of routines, variables, and other objects, see <bpt id="p1">[</bpt>Generic-Text Mappings<ept id="p1">](../c-runtime-library/generic-text-mappings.md)</ept> in the Run-Time Library Reference.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Do not use the <ph id="ph1">`str`</ph> family of functions with Unicode strings, which are likely to contain embedded null bytes.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Similarly, do not use the <ph id="ph1">`wcs`</ph> family of functions with MBCS (or SBCS) strings.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following code fragments illustrate the use of <ph id="ph1">`_TCHAR`</ph> and <ph id="ph2">`_tcsrev`</ph> for mapping to the MBCS, <ph id="ph3">[!INCLUDE[TLA#tla_unicode](../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)]</ph>, and SBCS models.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_MBCS`</ph> has been defined, the preprocessor maps this fragment to this code:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_UNICODE`</ph> has been defined, the preprocessor maps this fragment to this code:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If neither <ph id="ph1">`_MBCS`</ph> nor <ph id="ph2">`_UNICODE`</ph> have been defined, the preprocessor maps the fragment to single-byte <ph id="ph3">[!INCLUDE[TLA#tla_ascii](../text/includes/tlasharptla_ascii_md.md)]</ph> code, as follows:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Therefore, you can write, maintain, and compile a single-source code file to run with routines that are specific to any of the three kinds of character sets.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Text and Strings</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Using TCHAR.H Data Types with _MBCS Code</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>