{"nodes":[{"pos":[12,86],"content":"Format Specification Syntax: printf and wprintf Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Format Specification Syntax: printf and wprintf Functions | Microsoft Docs","pos":[0,74]}]},{"content":"Format Specification Syntax: printf and wprintf Functions","pos":[1060,1117]},{"content":"Describes the syntax for format string arguments to <ph id=\"ph1\">`printf`</ph>, <ph id=\"ph2\">`wprintf`</ph>, and related functions.","pos":[1118,1213],"source":"Describes the syntax for format string arguments to `printf`, `wprintf`, and related functions."},{"content":"More secure versions of these functions are available; for more information, see <bpt id=\"p1\">[</bpt>Security Features in the CRT<ept id=\"p1\">](../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1214,1380],"source":" More secure versions of these functions are available; for more information, see [Security Features in the CRT](../c-runtime-library/security-features-in-the-crt.md)."},{"content":"For information about the individual functions, see the documentation for those specific functions.","pos":[1381,1480]},{"content":"For a listing of these functions, see <bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../c-runtime-library/stream-i-o.md)</ept>.","pos":[1481,1568],"source":" For a listing of these functions, see [Stream I/O](../c-runtime-library/stream-i-o.md)."},{"content":"A format specification, which consists of optional and required fields, has the following form:","pos":[1575,1670]},{"pos":[1680,2000],"content":"[<bpt id=\"p1\">[</bpt>flags<ept id=\"p1\">](../c-runtime-library/flag-directives.md)</ept>] [<bpt id=\"p2\">[</bpt>width<ept id=\"p2\">](../c-runtime-library/printf-width-specification.md)</ept>] [<bpt id=\"p3\">**</bpt>.<ept id=\"p3\">**</ept><bpt id=\"p4\">[</bpt>precision<ept id=\"p4\">](../c-runtime-library/precision-specification.md)</ept>] [{<ph id=\"ph1\">`h`</ph> &amp;#124; <ph id=\"ph2\">`l`</ph> &amp;#124; <ph id=\"ph3\">`ll`</ph> &amp;#124; <ph id=\"ph4\">`w`</ph> &amp;#124; <ph id=\"ph5\">`I`</ph> &amp;#124; <ph id=\"ph6\">`I32`</ph> &amp;#124; <ph id=\"ph7\">`I64`</ph>}] <bpt id=\"p5\">[</bpt>type<ept id=\"p5\">](../c-runtime-library/printf-type-field-characters.md)</ept>","source":"[[flags](../c-runtime-library/flag-directives.md)] [[width](../c-runtime-library/printf-width-specification.md)] [**.**[precision](../c-runtime-library/precision-specification.md)] [{`h` &#124; `l` &#124; `ll` &#124; `w` &#124; `I` &#124; `I32` &#124; `I64`}] [type](../c-runtime-library/printf-type-field-characters.md)"},{"content":"Each field of the format specification is a character or a number that signifies a particular format option or conversion specifier.","pos":[2007,2139]},{"content":"The required <ph id=\"ph1\">`type`</ph> character specifies the kind of conversion to be applied to an argument.","pos":[2140,2232],"source":" The required `type` character specifies the kind of conversion to be applied to an argument."},{"content":"The optional <ph id=\"ph1\">`flags`</ph>, <ph id=\"ph2\">`width`</ph>, and <ph id=\"ph3\">`precision`</ph> fields control additional format aspects.","pos":[2233,2321],"source":" The optional `flags`, `width`, and `precision` fields control additional format aspects."},{"content":"A basic format specification contains only the percent sign and a <ph id=\"ph1\">`type`</ph> character—for example, <ph id=\"ph2\">`%s`</ph>, which specifies a string conversion.","pos":[2322,2460],"source":" A basic format specification contains only the percent sign and a `type` character—for example, `%s`, which specifies a string conversion."},{"content":"In the secure versions of the functions, if a percent sign is followed by a character that has no meaning as a format field, the invalid parameter handler is invoked.","pos":[2461,2627]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../c-runtime-library/parameter-validation.md)</ept>.","pos":[2628,2723],"source":" For more information, see [Parameter Validation](../c-runtime-library/parameter-validation.md)."},{"content":"In the non-secure versions, the character is copied to the output unchanged.","pos":[2724,2800]},{"content":"To print a percent-sign character, use <ph id=\"ph1\">`%%`</ph>.","pos":[2801,2845],"source":" To print a percent-sign character, use `%%`."},{"content":"The fields of the format specification control the following aspects of argument conversion and formatting:","pos":[2852,2959]},{"content":"Required conversion specifier character that determines whether the associated <ph id=\"ph1\">`argument`</ph> is interpreted as a character, a string, an integer, or a floating-point number.","pos":[2976,3146],"source":" Required conversion specifier character that determines whether the associated `argument` is interpreted as a character, a string, an integer, or a floating-point number."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>printf Type Field Characters<ept id=\"p1\">](../c-runtime-library/printf-type-field-characters.md)</ept>.","pos":[3147,3258],"source":" For more information, see [printf Type Field Characters](../c-runtime-library/printf-type-field-characters.md)."},{"content":"Optional character or characters that control output justification and output of signs, blanks, leading zeros, decimal points, and octal and hexadecimal prefixes.","pos":[3276,3438]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Flag Directives<ept id=\"p1\">](../c-runtime-library/flag-directives.md)</ept>.","pos":[3439,3524],"source":" For more information, see [Flag Directives](../c-runtime-library/flag-directives.md)."},{"content":"More than one flag can appear in a format specification, and flags can appear in any order.","pos":[3525,3616]},{"content":"Optional decimal number that specifies the minimum number of characters that are output.","pos":[3634,3722]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>printf Width Specification<ept id=\"p1\">](../c-runtime-library/printf-width-specification.md)</ept>.","pos":[3723,3830],"source":" For more information, see [printf Width Specification](../c-runtime-library/printf-width-specification.md)."},{"content":"Optional decimal number that specifies the maximum number of characters that are printed for strings, the number of significant digits or the number of digits after the decimal-point character for floating-point values, or the minimum number of digits that are printed for integer values.","pos":[3852,4140]},{"content":"For more information, see \"How Precision Values Affect Type\" in <bpt id=\"p1\">[</bpt>Precision Specification<ept id=\"p1\">](../c-runtime-library/precision-specification.md)</ept>.","pos":[4141,4280],"source":" For more information, see \"How Precision Values Affect Type\" in [Precision Specification](../c-runtime-library/precision-specification.md)."},{"content":"&amp;#124; <ph id=\"ph1\">`l`</ph> &amp;#124; <ph id=\"ph2\">`ll`</ph> &amp;#124; <ph id=\"ph3\">`w`</ph> &amp;#124; <ph id=\"ph4\">`I`</ph> &amp;#124; <ph id=\"ph5\">`I32`</ph> &amp;#124;","pos":[4291,4355],"source":" &#124; `l` &#124; `ll` &#124; `w` &#124; `I` &#124; `I32` &#124; "},{"content":"Optional prefixes to <ph id=\"ph1\">`type`</ph> that specify the size of the corresponding argument.","pos":[4365,4445],"source":" Optional prefixes to `type` that specify the size of the corresponding argument."},{"content":"For more information, see\"Size Prefixes\" in <bpt id=\"p1\">[</bpt>Size Specification<ept id=\"p1\">](../c-runtime-library/size-specification.md)</ept>.","pos":[4446,4555],"source":" For more information, see\"Size Prefixes\" in [Size Specification](../c-runtime-library/size-specification.md)."},{"pos":[4563,4807],"content":"[!IMPORTANT]\n Ensure that format specification strings are not user-defined. For example, consider a program that prompts the user to enter a name and stores the input in a string variable that's named `name`. To print `name`, do not do this:","leadings":["","> "],"nodes":[{"content":" Ensure that format specification strings are not user-defined. For example, consider a program that prompts the user to enter a name and stores the input in a string variable that's named `name`. To print `name`, do not do this:","pos":[13,242],"nodes":[{"content":"Ensure that format specification strings are not user-defined.","pos":[1,63]},{"content":"For example, consider a program that prompts the user to enter a name and stores the input in a string variable that's named <ph id=\"ph1\">`name`</ph>.","pos":[64,196],"source":" For example, consider a program that prompts the user to enter a name and stores the input in a string variable that's named `name`."},{"content":"To print <ph id=\"ph1\">`name`</ph>, do not do this:","pos":[197,229],"source":" To print `name`, do not do this:"}]}]},{"content":"Instead, do this:","pos":[4903,4920]},{"content":"See Also","pos":[4963,4971]},{"content":"printf, _printf_l, wprintf, _wprintf_l","pos":[4976,5014]},{"content":"printf_s, _printf_s_l, wprintf_s, _wprintf_s_l","pos":[5090,5136]},{"content":"printf_p Positional Parameters","pos":[5220,5250]},{"content":"Flag Directives","pos":[5313,5328]},{"content":"printf Width Specification","pos":[5376,5402]},{"content":"Precision Specification","pos":[5461,5484]},{"content":"Size Specification","pos":[5540,5558]},{"content":"printf Type Field Characters","pos":[5609,5637]}],"content":"---\ntitle: \"Format Specification Syntax: printf and wprintf Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napilocation: \n  - \"msvcr90.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr120.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wprintf\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"format specification fields for printf function\"\n  - \"print flag directives\"\n  - \"printf function, precision\"\n  - \"type fields, printf function\"\n  - \"precision fields\"\n  - \"printf function, format specification fields\"\n  - \"flag directives printf function\"\n  - \"type fields\"\nms.assetid: 664b1717-2760-4c61-bd9c-22eee618d825\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Format Specification Syntax: printf and wprintf Functions\nDescribes the syntax for format string arguments to `printf`, `wprintf`, and related functions. More secure versions of these functions are available; for more information, see [Security Features in the CRT](../c-runtime-library/security-features-in-the-crt.md). For information about the individual functions, see the documentation for those specific functions. For a listing of these functions, see [Stream I/O](../c-runtime-library/stream-i-o.md).  \n  \n A format specification, which consists of optional and required fields, has the following form:  \n  \n `%`[[flags](../c-runtime-library/flag-directives.md)] [[width](../c-runtime-library/printf-width-specification.md)] [**.**[precision](../c-runtime-library/precision-specification.md)] [{`h` &#124; `l` &#124; `ll` &#124; `w` &#124; `I` &#124; `I32` &#124; `I64`}] [type](../c-runtime-library/printf-type-field-characters.md)  \n  \n Each field of the format specification is a character or a number that signifies a particular format option or conversion specifier. The required `type` character specifies the kind of conversion to be applied to an argument. The optional `flags`, `width`, and `precision` fields control additional format aspects. A basic format specification contains only the percent sign and a `type` character—for example, `%s`, which specifies a string conversion. In the secure versions of the functions, if a percent sign is followed by a character that has no meaning as a format field, the invalid parameter handler is invoked. For more information, see [Parameter Validation](../c-runtime-library/parameter-validation.md). In the non-secure versions, the character is copied to the output unchanged. To print a percent-sign character, use `%%`.  \n  \n The fields of the format specification control the following aspects of argument conversion and formatting:  \n  \n `type`  \n Required conversion specifier character that determines whether the associated `argument` is interpreted as a character, a string, an integer, or a floating-point number. For more information, see [printf Type Field Characters](../c-runtime-library/printf-type-field-characters.md).  \n  \n `flags`  \n Optional character or characters that control output justification and output of signs, blanks, leading zeros, decimal points, and octal and hexadecimal prefixes. For more information, see [Flag Directives](../c-runtime-library/flag-directives.md). More than one flag can appear in a format specification, and flags can appear in any order.  \n  \n `width`  \n Optional decimal number that specifies the minimum number of characters that are output. For more information, see [printf Width Specification](../c-runtime-library/printf-width-specification.md).  \n  \n `precision`  \n Optional decimal number that specifies the maximum number of characters that are printed for strings, the number of significant digits or the number of digits after the decimal-point character for floating-point values, or the minimum number of digits that are printed for integer values. For more information, see \"How Precision Values Affect Type\" in [Precision Specification](../c-runtime-library/precision-specification.md).  \n  \n `h` &#124; `l` &#124; `ll` &#124; `w` &#124; `I` &#124; `I32` &#124; `I64`  \n Optional prefixes to `type` that specify the size of the corresponding argument. For more information, see\"Size Prefixes\" in [Size Specification](../c-runtime-library/size-specification.md).  \n  \n> [!IMPORTANT]\n>  Ensure that format specification strings are not user-defined. For example, consider a program that prompts the user to enter a name and stores the input in a string variable that's named `name`. To print `name`, do not do this:  \n>   \n>  `printf( name ); /* Danger!  If name contains \"%s\", program will crash */`  \n>   \n>  Instead, do this:  \n>   \n>  `printf( \"%s\", name );`  \n  \n## See Also  \n [printf, _printf_l, wprintf, _wprintf_l](../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [printf_s, _printf_s_l, wprintf_s, _wprintf_s_l](../c-runtime-library/reference/printf-s-printf-s-l-wprintf-s-wprintf-s-l.md)   \n [printf_p Positional Parameters](../c-runtime-library/printf-p-positional-parameters.md)   \n [Flag Directives](../c-runtime-library/flag-directives.md)   \n [printf Width Specification](../c-runtime-library/printf-width-specification.md)   \n [Precision Specification](../c-runtime-library/precision-specification.md)   \n [Size Specification](../c-runtime-library/size-specification.md)   \n [printf Type Field Characters](../c-runtime-library/printf-type-field-characters.md)"}