{"nodes":[{"pos":[12,47],"content":"CPaneDivider Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CPaneDivider Class | Microsoft Docs","pos":[0,35]}]},{"pos":[610,628],"content":"CPaneDivider Class","linkify":"CPaneDivider Class","nodes":[{"content":"CPaneDivider Class","pos":[0,18]}]},{"pos":[735,884],"content":"The <ph id=\"ph1\">`CPaneDivider`</ph> class divides two panes, divides two groups of panes, or separates a group of panes from the client area of the main frame window.","source":"The `CPaneDivider` class divides two panes, divides two groups of panes, or separates a group of panes from the client area of the main frame window."},{"pos":[893,899],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[963,970],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[980,999],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1006,1010]},{"content":"Description","pos":[1011,1022]},{"pos":[1060,1117],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::CPaneDivider<ept id=\"p1\">](#cpanedivider__cpanedivider)</ept>","source":"[CPaneDivider::CPaneDivider](#cpanedivider__cpanedivider)"},{"pos":[1129,1143],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1150,1154]},{"content":"Description","pos":[1155,1166]},{"pos":[1204,1269],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::AddPaneContainer<ept id=\"p1\">](#cpanedivider__addpanecontainer)</ept>","source":"[CPaneDivider::AddPaneContainer](#cpanedivider__addpanecontainer)"},{"pos":[1275,1322],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::AddPane<ept id=\"p1\">](#cpanedivider__addpane)</ept>","source":"[CPaneDivider::AddPane](#cpanedivider__addpane)"},{"pos":[1328,1387],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::AddRecentPane<ept id=\"p1\">](#cpanedivider__addrecentpane)</ept>","source":"[CPaneDivider::AddRecentPane](#cpanedivider__addrecentpane)"},{"pos":[1393,1470],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::CalcExpectedDockedRect<ept id=\"p1\">](#cpanedivider__calcexpecteddockedrect)</ept>","source":"[CPaneDivider::CalcExpectedDockedRect](#cpanedivider__calcexpecteddockedrect)"},{"pos":[1476,1539],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::CalcFixedLayout<ept id=\"p1\">](#cpanedivider__calcfixedlayout)</ept>","source":"[CPaneDivider::CalcFixedLayout](#cpanedivider__calcfixedlayout)"},{"pos":[1540,1648],"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::CalcFixedLayout<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__calcfixedlayout)</ept>.)","source":"(Overrides [CBasePane::CalcFixedLayout](../../mfc/reference/cbasepane-class.md#cbasepane__calcfixedlayout).)"},{"pos":[1653,1716],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::CheckVisibility<ept id=\"p1\">](#cpanedivider__checkvisibility)</ept>","source":"[CPaneDivider::CheckVisibility](#cpanedivider__checkvisibility)"},{"pos":[1722,1771],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::CreateEx<ept id=\"p1\">](#cpanedivider__createex)</ept>","source":"[CPaneDivider::CreateEx](#cpanedivider__createex)"},{"pos":[1772,1866],"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::CreateEx<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__createex)</ept>.)","source":"(Overrides [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex).)"},{"pos":[1871,1952],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::DoesAllowDynInsertBefore<ept id=\"p1\">](#cpanedivider__doesallowdyninsertbefore)</ept>","source":"[CPaneDivider::DoesAllowDynInsertBefore](#cpanedivider__doesallowdyninsertbefore)"},{"pos":[1953,2079],"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::DoesAllowDynInsertBefore<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__doesallowdyninsertbefore)</ept>.)","source":"(Overrides [CBasePane::DoesAllowDynInsertBefore](../../mfc/reference/cbasepane-class.md#cbasepane__doesallowdyninsertbefore).)"},{"pos":[2084,2163],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::DoesContainFloatingPane<ept id=\"p1\">](#cpanedivider__doescontainfloatingpane)</ept>","source":"[CPaneDivider::DoesContainFloatingPane](#cpanedivider__doescontainfloatingpane)"},{"pos":[2169,2236],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::FindPaneContainer<ept id=\"p1\">](#cpanedivider__findpanecontainer)</ept>","source":"[CPaneDivider::FindPaneContainer](#cpanedivider__findpanecontainer)"},{"pos":[2242,2303],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::FindTabbedPane<ept id=\"p1\">](#cpanedivider__findtabbedpane)</ept>","source":"[CPaneDivider::FindTabbedPane](#cpanedivider__findtabbedpane)"},{"pos":[2309,2372],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::GetDefaultWidth<ept id=\"p1\">](#cpanedivider__getdefaultwidth)</ept>","source":"[CPaneDivider::GetDefaultWidth](#cpanedivider__getdefaultwidth)"},{"pos":[2378,2435],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::GetFirstPane<ept id=\"p1\">](#cpanedivider__getfirstpane)</ept>","source":"[CPaneDivider::GetFirstPane](#cpanedivider__getfirstpane)"},{"pos":[2441,2512],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::GetPaneDividerStyle<ept id=\"p1\">](#cpanedivider__getpanedividerstyle)</ept>","source":"[CPaneDivider::GetPaneDividerStyle](#cpanedivider__getpanedividerstyle)"},{"pos":[2518,2591],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::GetRootContainerRect<ept id=\"p1\">](#cpanedivider__getrootcontainerrect)</ept>","source":"[CPaneDivider::GetRootContainerRect](#cpanedivider__getrootcontainerrect)"},{"pos":[2597,2646],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::GetWidth<ept id=\"p1\">](#cpanedivider__getwidth)</ept>","source":"[CPaneDivider::GetWidth](#cpanedivider__getwidth)"},{"pos":[2652,2693],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::Init<ept id=\"p1\">](#cpanedivider__init)</ept>","source":"[CPaneDivider::Init](#cpanedivider__init)"},{"pos":[2699,2752],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::InsertPane<ept id=\"p1\">](#cpanedivider__insertpane)</ept>","source":"[CPaneDivider::InsertPane](#cpanedivider__insertpane)"},{"pos":[2758,2819],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::IsAutoHideMode<ept id=\"p1\">](#cpanedivider__isautohidemode)</ept>","source":"[CPaneDivider::IsAutoHideMode](#cpanedivider__isautohidemode)"},{"pos":[2820,2926],"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::IsAutoHideMode<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__isautohidemode)</ept>.)","source":"(Overrides [CBasePane::IsAutoHideMode](../../mfc/reference/cbasepane-class.md#cbasepane__isautohidemode).)"},{"pos":[2931,2982],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::IsDefault<ept id=\"p1\">](#cpanedivider__isdefault)</ept>","source":"[CPaneDivider::IsDefault](#cpanedivider__isdefault)"},{"pos":[2988,3045],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::IsHorizontal<ept id=\"p1\">](#cpanedivider__ishorizontal)</ept>","source":"[CPaneDivider::IsHorizontal](#cpanedivider__ishorizontal)"},{"pos":[3046,3148],"content":"(Overrides <bpt id=\"p1\">[</bpt>CBasePane::IsHorizontal<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__ishorizontal)</ept>.)","source":"(Overrides [CBasePane::IsHorizontal](../../mfc/reference/cbasepane-class.md#cbasepane__ishorizontal).)"},{"pos":[3153,3194],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::Move<ept id=\"p1\">](#cpanedivider__move)</ept>","source":"[CPaneDivider::Move](#cpanedivider__move)"},{"pos":[3200,3269],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::NotifyAboutRelease<ept id=\"p1\">](#cpanedivider__notifyaboutrelease)</ept>","source":"[CPaneDivider::NotifyAboutRelease](#cpanedivider__notifyaboutrelease)"},{"pos":[3275,3328],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::OnShowPane<ept id=\"p1\">](#cpanedivider__onshowpane)</ept>","source":"[CPaneDivider::OnShowPane](#cpanedivider__onshowpane)"},{"pos":[3334,3419],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::ReleaseEmptyPaneContainers<ept id=\"p1\">](#cpanedivider__releaseemptypanecontainers)</ept>","source":"[CPaneDivider::ReleaseEmptyPaneContainers](#cpanedivider__releaseemptypanecontainers)"},{"pos":[3425,3478],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::RemovePane<ept id=\"p1\">](#cpanedivider__removepane)</ept>","source":"[CPaneDivider::RemovePane](#cpanedivider__removepane)"},{"pos":[3484,3539],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::ReplacePane<ept id=\"p1\">](#cpanedivider__replacepane)</ept>","source":"[CPaneDivider::ReplacePane](#cpanedivider__replacepane)"},{"pos":[3545,3608],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::RepositionPanes<ept id=\"p1\">](#cpanedivider__repositionpanes)</ept>","source":"[CPaneDivider::RepositionPanes](#cpanedivider__repositionpanes)"},{"pos":[3614,3665],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::Serialize<ept id=\"p1\">](#cpanedivider__serialize)</ept>","source":"[CPaneDivider::Serialize](#cpanedivider__serialize)"},{"pos":[3666,3701],"content":"(Overrides <ph id=\"ph1\">`CBasePane::Serialize`</ph>.)","source":"(Overrides `CBasePane::Serialize`.)"},{"pos":[3706,3769],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::SetAutoHideMode<ept id=\"p1\">](#cpanedivider__setautohidemode)</ept>","source":"[CPaneDivider::SetAutoHideMode](#cpanedivider__setautohidemode)"},{"pos":[3775,3854],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::SetPaneContainerManager<ept id=\"p1\">](#cpanedivider__setpanecontainermanager)</ept>","source":"[CPaneDivider::SetPaneContainerManager](#cpanedivider__setpanecontainermanager)"},{"pos":[3860,3913],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::ShowWindow<ept id=\"p1\">](#cpanedivider__showwindow)</ept>","source":"[CPaneDivider::ShowWindow](#cpanedivider__showwindow)"},{"pos":[3919,3998],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::StoreRecentDockSiteInfo<ept id=\"p1\">](#cpanedivider__storerecentdocksiteinfo)</ept>","source":"[CPaneDivider::StoreRecentDockSiteInfo](#cpanedivider__storerecentdocksiteinfo)"},{"pos":[4004,4087],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::StoreRecentTabRelatedInfo<ept id=\"p1\">](#cpanedivider__storerecenttabrelatedinfo)</ept>","source":"[CPaneDivider::StoreRecentTabRelatedInfo](#cpanedivider__storerecenttabrelatedinfo)"},{"pos":[4099,4113],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[4120,4124]},{"content":"Description","pos":[4125,4136]},{"pos":[4174,4223],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::GetPanes<ept id=\"p1\">](#cpanedivider__getpanes)</ept>","source":"[CPaneDivider::GetPanes](#cpanedivider__getpanes)"},{"content":"Returns the list of panes that reside in the <bpt id=\"p1\">[</bpt>CPaneContainer Class<ept id=\"p1\">](../../mfc/reference/cpanecontainer-class.md)</ept>.","pos":[4224,4337],"source":"Returns the list of panes that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)."},{"content":"This method should be called only for default pane dividers.","pos":[4338,4398]},{"pos":[4403,4466],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::GetPaneDividers<ept id=\"p1\">](#cpanedivider__getpanedividers)</ept>","source":"[CPaneDivider::GetPaneDividers](#cpanedivider__getpanedividers)"},{"content":"Returns the list of pane dividers that reside in the <bpt id=\"p1\">[</bpt>CPaneContainer Class<ept id=\"p1\">](../../mfc/reference/cpanecontainer-class.md)</ept>.","pos":[4467,4588],"source":"Returns the list of pane dividers that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)."},{"content":"This method should be called only for default pane dividers.","pos":[4589,4649]},{"pos":[4660,4672],"content":"Data Members","linkify":"Data Members","nodes":[{"content":"Data Members","pos":[0,12]}]},{"content":"Name","pos":[4679,4683]},{"content":"Description","pos":[4684,4695]},{"pos":[4733,4796],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::m_nDefaultWidth<ept id=\"p1\">](#cpanedivider__m_ndefaultwidth)</ept>","source":"[CPaneDivider::m_nDefaultWidth](#cpanedivider__m_ndefaultwidth)"},{"content":"Specifies the default width in pixels of all pane dividers in the application.","pos":[4797,4875]},{"pos":[4880,4937],"content":"<bpt id=\"p1\">[</bpt>CPaneDivider::m_pSliderRTC<ept id=\"p1\">](#cpanedivider__m_psliderrtc)</ept>","source":"[CPaneDivider::m_pSliderRTC](#cpanedivider__m_psliderrtc)"},{"pos":[4938,5025],"content":"Holds a pointer to the runtime class information about a <ph id=\"ph1\">`CPaneDivider`</ph>-derived object.","source":"Holds a pointer to the runtime class information about a `CPaneDivider`-derived object."},{"pos":[5035,5042],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5046,5127],"content":"The framework creates <ph id=\"ph1\">`CPaneDivider`</ph> objects automatically when a pane is docked.","source":"The framework creates `CPaneDivider` objects automatically when a pane is docked."},{"content":"There are two types of pane dividers:","pos":[5134,5171]},{"content":"a default pane divider is created when a group of panes is docked to a side of the main frame window.","pos":[5181,5282]},{"content":"The default pane divider holds a pointer to the <bpt id=\"p1\">[</bpt>CPaneContainerManager Class<ept id=\"p1\">](../../mfc/reference/cpanecontainermanager-class.md)</ept> and redirects most operations on the group of panes (such as resizing a pane, or docking another pane or container) to the container manager.","pos":[5283,5554],"source":" The default pane divider holds a pointer to the [CPaneContainerManager Class](../../mfc/reference/cpanecontainermanager-class.md) and redirects most operations on the group of panes (such as resizing a pane, or docking another pane or container) to the container manager."},{"content":"Each docking pane maintains a pointer to its default pane divider.","pos":[5555,5621]},{"content":"A regular pane divider just divides two panes in a container.","pos":[5631,5692]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CPaneContainer Class<ept id=\"p1\">](../../mfc/reference/cpanecontainer-class.md)</ept>.","pos":[5693,5787],"source":" For more information, see [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)."},{"pos":[5796,5803],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to get a <ph id=\"ph1\">`CPaneDivider`</ph> object from a <ph id=\"ph2\">`CWorkspaceBar`</ph> object.","pos":[5807,5907],"source":"The following example demonstrates how to get a `CPaneDivider` object from a `CWorkspaceBar` object."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>MDI Tabs Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[5908,5993],"source":" This code snippet is part of the [MDI Tabs Demo sample](../../visual-cpp-samples.md)."},{"pos":[6000,6096],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_MDITabsDemo#5<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cpanedivider-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_MDITabsDemo#5](../../mfc/reference/codesnippet/cpp/cpanedivider-class_1.cpp)]"},{"pos":[6105,6126],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[6130,6273],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept> <bpt id=\"p2\">[</bpt>CCmdTarget<ept id=\"p2\">](../../mfc/reference/ccmdtarget-class.md)</ept> <bpt id=\"p3\">[</bpt>CWnd<ept id=\"p3\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md) [CCmdTarget](../../mfc/reference/ccmdtarget-class.md) [CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[6280,6389],"content":"<bpt id=\"p1\">[</bpt>CBasePane<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md)</ept> <bpt id=\"p2\">[</bpt>CPaneDivider<ept id=\"p2\">](../../mfc/reference/cpanedivider-class.md)</ept>","source":"[CBasePane](../../mfc/reference/cbasepane-class.md) [CPaneDivider](../../mfc/reference/cpanedivider-class.md)"},{"pos":[6398,6410],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[6414,6442],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxPaneDivider.h","source":"**Header:** afxPaneDivider.h"},{"pos":[6452,6527],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__setautohidemode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::SetAutoHideMode","linkify":"<a name=\"cpanedivider__setautohidemode\"></a>  CPaneDivider::SetAutoHideMode","source":"<a name=\"cpanedivider__setautohidemode\"></a>  CPaneDivider::SetAutoHideMode"},{"pos":[6689,6699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[6703,6715],"content":"[in] <ph id=\"ph1\">`bMode`</ph>","source":"[in] `bMode`"},{"pos":[6725,6732],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6742,6833],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__setpanecontainermanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::SetPaneContainerManager","linkify":"<a name=\"cpanedivider__setpanecontainermanager\"></a>  CPaneDivider::SetPaneContainerManager","source":"<a name=\"cpanedivider__setpanecontainermanager\"></a>  CPaneDivider::SetPaneContainerManager"},{"pos":[7017,7027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[7031,7039],"content":"[in] <ph id=\"ph1\">`p`</ph>","source":"[in] `p`"},{"pos":[7049,7056],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7066,7125],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__addpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::AddPane","linkify":"<a name=\"cpanedivider__addpane\"></a>  CPaneDivider::AddPane","source":"<a name=\"cpanedivider__addpane\"></a>  CPaneDivider::AddPane"},{"pos":[7296,7306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[7310,7321],"content":"[in] <ph id=\"ph1\">`pBar`</ph>","source":"[in] `pBar`"},{"pos":[7331,7338],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7348,7425],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__addpanecontainer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::AddPaneContainer","linkify":"<a name=\"cpanedivider__addpanecontainer\"></a>  CPaneDivider::AddPaneContainer","source":"<a name=\"cpanedivider__addpanecontainer\"></a>  CPaneDivider::AddPaneContainer"},{"pos":[7797,7807],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`barContainerManager`</ph>","pos":[7811,7837],"source":"[in] `barContainerManager`"},{"content":"[in] <ph id=\"ph1\">`bOuterEdge`</ph>","pos":[7841,7858],"source":" [in] `bOuterEdge`"},{"content":"[in] <ph id=\"ph1\">`pTargetBar`</ph>","pos":[7862,7879],"source":" [in] `pTargetBar`"},{"content":"[in] <ph id=\"ph1\">`dwAlignment`</ph>","pos":[7883,7901],"source":" [in] `dwAlignment`"},{"pos":[7911,7923],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7933,7940],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7950,8021],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__addrecentpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::AddRecentPane","linkify":"<a name=\"cpanedivider__addrecentpane\"></a>  CPaneDivider::AddRecentPane","source":"<a name=\"cpanedivider__addrecentpane\"></a>  CPaneDivider::AddRecentPane"},{"pos":[8208,8218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[8222,8233],"content":"[in] <ph id=\"ph1\">`pBar`</ph>","source":"[in] `pBar`"},{"pos":[8243,8255],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8265,8272],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8282,8371],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__calcexpecteddockedrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::CalcExpectedDockedRect","linkify":"<a name=\"cpanedivider__calcexpecteddockedrect\"></a>  CPaneDivider::CalcExpectedDockedRect","source":"<a name=\"cpanedivider__calcexpecteddockedrect\"></a>  CPaneDivider::CalcExpectedDockedRect"},{"pos":[8663,8673],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWndToDock`</ph>","pos":[8677,8694],"source":"[in] `pWndToDock`"},{"content":"[in] <ph id=\"ph1\">`ptMouse`</ph>","pos":[8698,8712],"source":" [in] `ptMouse`"},{"content":"[in] <ph id=\"ph1\">`rectResult`</ph>","pos":[8716,8733],"source":" [in] `rectResult`"},{"content":"[in] <ph id=\"ph1\">`bDrawTab`</ph>","pos":[8737,8752],"source":" [in] `bDrawTab`"},{"content":"[in] <ph id=\"ph1\">`ppTargetBar`</ph>","pos":[8756,8774],"source":" [in] `ppTargetBar`"},{"pos":[8784,8791],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8801,8876],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__calcfixedlayout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::CalcFixedLayout","linkify":"<a name=\"cpanedivider__calcfixedlayout\"></a>  CPaneDivider::CalcFixedLayout","source":"<a name=\"cpanedivider__calcfixedlayout\"></a>  CPaneDivider::CalcFixedLayout"},{"pos":[9073,9083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bStretch`</ph>","pos":[9087,9102],"source":"[in] `bStretch`"},{"content":"[in] <ph id=\"ph1\">`bHorz`</ph>","pos":[9106,9118],"source":" [in] `bHorz`"},{"pos":[9128,9140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9150,9157],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9167,9242],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__checkvisibility\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::CheckVisibility","linkify":"<a name=\"cpanedivider__checkvisibility\"></a>  CPaneDivider::CheckVisibility","source":"<a name=\"cpanedivider__checkvisibility\"></a>  CPaneDivider::CheckVisibility"},{"pos":[9402,9414],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9424,9431],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9441,9510],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__cpanedivider\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::CPaneDivider","linkify":"<a name=\"cpanedivider__cpanedivider\"></a>  CPaneDivider::CPaneDivider","source":"<a name=\"cpanedivider__cpanedivider\"></a>  CPaneDivider::CPaneDivider"},{"pos":[9725,9735],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bDefaultSlider`</ph>","pos":[9739,9760],"source":"[in] `bDefaultSlider`"},{"content":"[in] <ph id=\"ph1\">`pParent`</ph>","pos":[9764,9778],"source":" [in] `pParent`"},{"pos":[9788,9800],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9810,9817],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9827,9888],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__createex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::CreateEx","linkify":"<a name=\"cpanedivider__createex\"></a>  CPaneDivider::CreateEx","source":"<a name=\"cpanedivider__createex\"></a>  CPaneDivider::CreateEx"},{"pos":[10178,10188],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwStyleEx`</ph>","pos":[10192,10208],"source":"[in] `dwStyleEx`"},{"content":"[in] <ph id=\"ph1\">`dwStyle`</ph>","pos":[10212,10226],"source":" [in] `dwStyle`"},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[10230,10241],"source":" [in] `rect`"},{"content":"[in] <ph id=\"ph1\">`pParentWnd`</ph>","pos":[10245,10262],"source":" [in] `pParentWnd`"},{"content":"[in] <ph id=\"ph1\">`nID`</ph>","pos":[10266,10276],"source":" [in] `nID`"},{"content":"[in] <ph id=\"ph1\">`pContext`</ph>","pos":[10280,10295],"source":" [in] `pContext`"},{"pos":[10305,10317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10327,10334],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10344,10437],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__doesallowdyninsertbefore\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::DoesAllowDynInsertBefore","linkify":"<a name=\"cpanedivider__doesallowdyninsertbefore\"></a>  CPaneDivider::DoesAllowDynInsertBefore","source":"<a name=\"cpanedivider__doesallowdyninsertbefore\"></a>  CPaneDivider::DoesAllowDynInsertBefore"},{"pos":[10615,10627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10637,10644],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10654,10745],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__doescontainfloatingpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::DoesContainFloatingPane","linkify":"<a name=\"cpanedivider__doescontainfloatingpane\"></a>  CPaneDivider::DoesContainFloatingPane","source":"<a name=\"cpanedivider__doescontainfloatingpane\"></a>  CPaneDivider::DoesContainFloatingPane"},{"pos":[10913,10925],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10935,10942],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10952,11031],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__findpanecontainer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::FindPaneContainer","linkify":"<a name=\"cpanedivider__findpanecontainer\"></a>  CPaneDivider::FindPaneContainer","source":"<a name=\"cpanedivider__findpanecontainer\"></a>  CPaneDivider::FindPaneContainer"},{"pos":[11242,11252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[11256,11267],"source":"[in] `pBar`"},{"content":"[in] <ph id=\"ph1\">`bLeftBar`</ph>","pos":[11271,11286],"source":" [in] `bLeftBar`"},{"pos":[11296,11308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11318,11325],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11335,11408],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__findtabbedpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::FindTabbedPane","linkify":"<a name=\"cpanedivider__findtabbedpane\"></a>  CPaneDivider::FindTabbedPane","source":"<a name=\"cpanedivider__findtabbedpane\"></a>  CPaneDivider::FindTabbedPane"},{"pos":[11577,11587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[11591,11601],"content":"[in] <ph id=\"ph1\">`nID`</ph>","source":"[in] `nID`"},{"pos":[11611,11623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11633,11640],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11650,11725],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__getdefaultwidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::GetDefaultWidth","linkify":"<a name=\"cpanedivider__getdefaultwidth\"></a>  CPaneDivider::GetDefaultWidth","source":"<a name=\"cpanedivider__getdefaultwidth\"></a>  CPaneDivider::GetDefaultWidth"},{"pos":[11893,11905],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11915,11922],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11932,12001],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__getfirstpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::GetFirstPane","linkify":"<a name=\"cpanedivider__getfirstpane\"></a>  CPaneDivider::GetFirstPane","source":"<a name=\"cpanedivider__getfirstpane\"></a>  CPaneDivider::GetFirstPane"},{"pos":[12171,12183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12193,12200],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12210,12285],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__getpanedividers\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::GetPaneDividers","linkify":"<a name=\"cpanedivider__getpanedividers\"></a>  CPaneDivider::GetPaneDividers","source":"<a name=\"cpanedivider__getpanedividers\"></a>  CPaneDivider::GetPaneDividers"},{"content":"Returns the list of pane dividers that reside in the <bpt id=\"p1\">[</bpt>CPaneContainer Class<ept id=\"p1\">](../../mfc/reference/cpanecontainer-class.md)</ept>.","pos":[12289,12410],"source":"Returns the list of pane dividers that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)."},{"content":"This method should be called only for default pane dividers.","pos":[12411,12471]},{"pos":[12539,12549],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`lstSliders`</ph>","pos":[12553,12571],"source":"[out] `lstSliders`"},{"content":"Contains the list of pane dividers that reside in the pane container.","pos":[12575,12644]},{"pos":[12654,12661],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method should be called for default pane dividers only.","pos":[12665,12725]},{"content":"A default pane divider is a divider that resizes the entire pane container.","pos":[12726,12801]},{"pos":[12811,12894],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__getpanedividerstyle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::GetPaneDividerStyle","linkify":"<a name=\"cpanedivider__getpanedividerstyle\"></a>  CPaneDivider::GetPaneDividerStyle","source":"<a name=\"cpanedivider__getpanedividerstyle\"></a>  CPaneDivider::GetPaneDividerStyle"},{"pos":[13060,13072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13082,13089],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13099,13160],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__getpanes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::GetPanes","linkify":"<a name=\"cpanedivider__getpanes\"></a>  CPaneDivider::GetPanes","source":"<a name=\"cpanedivider__getpanes\"></a>  CPaneDivider::GetPanes"},{"content":"Returns the list of panes that reside in the <bpt id=\"p1\">[</bpt>CPaneContainer Class<ept id=\"p1\">](../../mfc/reference/cpanecontainer-class.md)</ept>.","pos":[13164,13277],"source":"Returns the list of panes that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)."},{"content":"This method should be called only to retrieve default pane dividers.","pos":[13278,13346]},{"pos":[13404,13414],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`lstBars`</ph>","pos":[13418,13433],"source":"[out] `lstBars`"},{"content":"Contains the list of panes that reside in the pane container.","pos":[13437,13498]},{"pos":[13508,13515],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method should be called for default pane dividers only.","pos":[13519,13579]},{"content":"A default pane divider is a divider that resizes the entire pane container.","pos":[13580,13655]},{"pos":[13665,13750],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__getrootcontainerrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::GetRootContainerRect","linkify":"<a name=\"cpanedivider__getrootcontainerrect\"></a>  CPaneDivider::GetRootContainerRect","source":"<a name=\"cpanedivider__getrootcontainerrect\"></a>  CPaneDivider::GetRootContainerRect"},{"pos":[13908,13920],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13930,13937],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13947,14008],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__getwidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::GetWidth","linkify":"<a name=\"cpanedivider__getwidth\"></a>  CPaneDivider::GetWidth","source":"<a name=\"cpanedivider__getwidth\"></a>  CPaneDivider::GetWidth"},{"pos":[14161,14173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14183,14190],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14200,14253],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__init\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::Init","linkify":"<a name=\"cpanedivider__init\"></a>  CPaneDivider::Init","source":"<a name=\"cpanedivider__init\"></a>  CPaneDivider::Init"},{"pos":[14454,14464],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bDefaultSlider`</ph>","pos":[14468,14489],"source":"[in] `bDefaultSlider`"},{"content":"[in] <ph id=\"ph1\">`pParent`</ph>","pos":[14493,14507],"source":" [in] `pParent`"},{"pos":[14517,14524],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14534,14599],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__insertpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::InsertPane","linkify":"<a name=\"cpanedivider__insertpane\"></a>  CPaneDivider::InsertPane","source":"<a name=\"cpanedivider__insertpane\"></a>  CPaneDivider::InsertPane"},{"pos":[14873,14883],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBarToInsert`</ph>","pos":[14887,14906],"source":"[in] `pBarToInsert`"},{"content":"[in] <ph id=\"ph1\">`pTargetBar`</ph>","pos":[14910,14927],"source":" [in] `pTargetBar`"},{"content":"[in] <ph id=\"ph1\">`dwAlignment`</ph>","pos":[14931,14949],"source":" [in] `dwAlignment`"},{"content":"[in] <ph id=\"ph1\">`lpRect`</ph>","pos":[14953,14966],"source":" [in] `lpRect`"},{"pos":[14976,14988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14998,15005],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15015,15088],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__isautohidemode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::IsAutoHideMode","linkify":"<a name=\"cpanedivider__isautohidemode\"></a>  CPaneDivider::IsAutoHideMode","source":"<a name=\"cpanedivider__isautohidemode\"></a>  CPaneDivider::IsAutoHideMode"},{"pos":[15248,15260],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15270,15277],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15287,15350],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__isdefault\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::IsDefault","linkify":"<a name=\"cpanedivider__isdefault\"></a>  CPaneDivider::IsDefault","source":"<a name=\"cpanedivider__isdefault\"></a>  CPaneDivider::IsDefault"},{"pos":[15505,15517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15527,15534],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15544,15613],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__ishorizontal\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::IsHorizontal","linkify":"<a name=\"cpanedivider__ishorizontal\"></a>  CPaneDivider::IsHorizontal","source":"<a name=\"cpanedivider__ishorizontal\"></a>  CPaneDivider::IsHorizontal"},{"pos":[15771,15783],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15793,15800],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15810,15885],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__m_ndefaultwidth\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::m_nDefaultWidth","linkify":"<a name=\"cpanedivider__m_ndefaultwidth\"></a>  CPaneDivider::m_nDefaultWidth","source":"<a name=\"cpanedivider__m_ndefaultwidth\"></a>  CPaneDivider::m_nDefaultWidth"},{"content":"Specifies the default width, in pixels, of all pane dividers in the application.","pos":[15889,15969]},{"pos":[16040,16093],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__move\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::Move","linkify":"<a name=\"cpanedivider__move\"></a>  CPaneDivider::Move","source":"<a name=\"cpanedivider__move\"></a>  CPaneDivider::Move"},{"pos":[16296,16306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`ptOffset`</ph>","pos":[16310,16325],"source":"[in] `ptOffset`"},{"content":"[in] <ph id=\"ph1\">`bAdjustLayout`</ph>","pos":[16329,16349],"source":" [in] `bAdjustLayout`"},{"pos":[16359,16366],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16376,16445],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__m_psliderrtc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::m_pSliderRTC","linkify":"<a name=\"cpanedivider__m_psliderrtc\"></a>  CPaneDivider::m_pSliderRTC","source":"<a name=\"cpanedivider__m_psliderrtc\"></a>  CPaneDivider::m_pSliderRTC"},{"pos":[16449,16532],"content":"Holds a pointer to runtime class information about a <ph id=\"ph1\">`CPaneDivider`</ph>-derived object.","source":"Holds a pointer to runtime class information about a `CPaneDivider`-derived object."},{"pos":[16611,16618],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set this member variable if you create a custom pane divider.","pos":[16622,16683]},{"content":"This enables the framework to create your pane divider when the pane is drawn.","pos":[16684,16762]},{"pos":[16772,16779],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16783,16857],"content":"The following example shows how to set the <ph id=\"ph1\">`m_pSliderRTC`</ph> member variable:","source":"The following example shows how to set the `m_pSliderRTC` member variable:"},{"pos":[16997,17078],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__notifyaboutrelease\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::NotifyAboutRelease","linkify":"<a name=\"cpanedivider__notifyaboutrelease\"></a>  CPaneDivider::NotifyAboutRelease","source":"<a name=\"cpanedivider__notifyaboutrelease\"></a>  CPaneDivider::NotifyAboutRelease"},{"pos":[17241,17248],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17258,17323],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__onshowpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::OnShowPane","linkify":"<a name=\"cpanedivider__onshowpane\"></a>  CPaneDivider::OnShowPane","source":"<a name=\"cpanedivider__onshowpane\"></a>  CPaneDivider::OnShowPane"},{"pos":[17520,17530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[17534,17545],"source":"[in] `pBar`"},{"content":"[in] <ph id=\"ph1\">`bShow`</ph>","pos":[17549,17561],"source":" [in] `bShow`"},{"pos":[17571,17578],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17588,17685],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__releaseemptypanecontainers\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::ReleaseEmptyPaneContainers","linkify":"<a name=\"cpanedivider__releaseemptypanecontainers\"></a>  CPaneDivider::ReleaseEmptyPaneContainers","source":"<a name=\"cpanedivider__releaseemptypanecontainers\"></a>  CPaneDivider::ReleaseEmptyPaneContainers"},{"pos":[17848,17855],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17865,17930],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__removepane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::RemovePane","linkify":"<a name=\"cpanedivider__removepane\"></a>  CPaneDivider::RemovePane","source":"<a name=\"cpanedivider__removepane\"></a>  CPaneDivider::RemovePane"},{"pos":[18104,18114],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[18118,18129],"content":"[in] <ph id=\"ph1\">`pBar`</ph>","source":"[in] `pBar`"},{"pos":[18139,18146],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18156,18223],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__replacepane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::ReplacePane","linkify":"<a name=\"cpanedivider__replacepane\"></a>  CPaneDivider::ReplacePane","source":"<a name=\"cpanedivider__replacepane\"></a>  CPaneDivider::ReplacePane"},{"pos":[18452,18462],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBarToReplace`</ph>","pos":[18466,18486],"source":"[in] `pBarToReplace`"},{"content":"[in] <ph id=\"ph1\">`pBarToReplaceWith`</ph>","pos":[18490,18514],"source":" [in] `pBarToReplaceWith`"},{"pos":[18524,18536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18546,18553],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18563,18638],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__repositionpanes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::RepositionPanes","linkify":"<a name=\"cpanedivider__repositionpanes\"></a>  CPaneDivider::RepositionPanes","source":"<a name=\"cpanedivider__repositionpanes\"></a>  CPaneDivider::RepositionPanes"},{"pos":[18835,18845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`rectNew`</ph>","pos":[18849,18863],"source":"[in] `rectNew`"},{"content":"[in] <ph id=\"ph1\">`hdwp`</ph>","pos":[18867,18878],"source":" [in] `hdwp`"},{"pos":[18888,18895],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18905,18968],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__serialize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::Serialize","linkify":"<a name=\"cpanedivider__serialize\"></a>  CPaneDivider::Serialize","source":"<a name=\"cpanedivider__serialize\"></a>  CPaneDivider::Serialize"},{"pos":[19126,19136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[19140,19149],"content":"[in] <ph id=\"ph1\">`ar`</ph>","source":"[in] `ar`"},{"pos":[19159,19166],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19176,19241],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__showwindow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::ShowWindow","linkify":"<a name=\"cpanedivider__showwindow\"></a>  CPaneDivider::ShowWindow","source":"<a name=\"cpanedivider__showwindow\"></a>  CPaneDivider::ShowWindow"},{"pos":[19400,19410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[19414,19429],"content":"[in] <ph id=\"ph1\">`nCmdShow`</ph>","source":"[in] `nCmdShow`"},{"pos":[19439,19446],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19456,19547],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__storerecentdocksiteinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::StoreRecentDockSiteInfo","linkify":"<a name=\"cpanedivider__storerecentdocksiteinfo\"></a>  CPaneDivider::StoreRecentDockSiteInfo","source":"<a name=\"cpanedivider__storerecentdocksiteinfo\"></a>  CPaneDivider::StoreRecentDockSiteInfo"},{"pos":[19726,19736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[19740,19751],"content":"[in] <ph id=\"ph1\">`pBar`</ph>","source":"[in] `pBar`"},{"pos":[19761,19768],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19778,19873],"content":"<bpt id=\"p1\">&lt;a name=\"cpanedivider__storerecenttabrelatedinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneDivider::StoreRecentTabRelatedInfo","linkify":"<a name=\"cpanedivider__storerecenttabrelatedinfo\"></a>  CPaneDivider::StoreRecentTabRelatedInfo","source":"<a name=\"cpanedivider__storerecenttabrelatedinfo\"></a>  CPaneDivider::StoreRecentTabRelatedInfo"},{"pos":[20099,20109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDockingBar`</ph>","pos":[20113,20131],"source":"[in] `pDockingBar`"},{"content":"[in] <ph id=\"ph1\">`pTabbedBar`</ph>","pos":[20135,20152],"source":" [in] `pTabbedBar`"},{"pos":[20162,20169],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20178,20186],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[20190,20238],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[20241,20288],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CPaneContainerManager Class<ept id=\"p1\">](../../mfc/reference/cpanecontainermanager-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[20291,20374],"source":" [CPaneContainerManager Class](../../mfc/reference/cpanecontainermanager-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CPaneContainer Class<ept id=\"p1\">](../../mfc/reference/cpanecontainer-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[20377,20446],"source":" [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CDockingManager Class<ept id=\"p1\">](../../mfc/reference/cdockingmanager-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[20449,20520],"source":" [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CBasePane Class<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md)</ept>","pos":[20523,20581],"source":" [CBasePane Class](../../mfc/reference/cbasepane-class.md)"}],"content":"---\ntitle: \"CPaneDivider Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CPaneDivider\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CPaneDivider class\"\nms.assetid: 8e828a5d-232f-4127-b8e3-7fa45a7a476e\ncaps.latest.revision: 25\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CPaneDivider Class\n[!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n The `CPaneDivider` class divides two panes, divides two groups of panes, or separates a group of panes from the client area of the main frame window.  \n  \n## Syntax  \n  \n```  \nclass CPaneDivider : public CBasePane  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneDivider::CPaneDivider](#cpanedivider__cpanedivider)||  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneDivider::AddPaneContainer](#cpanedivider__addpanecontainer)||  \n|[CPaneDivider::AddPane](#cpanedivider__addpane)||  \n|[CPaneDivider::AddRecentPane](#cpanedivider__addrecentpane)||  \n|[CPaneDivider::CalcExpectedDockedRect](#cpanedivider__calcexpecteddockedrect)||  \n|[CPaneDivider::CalcFixedLayout](#cpanedivider__calcfixedlayout)|(Overrides [CBasePane::CalcFixedLayout](../../mfc/reference/cbasepane-class.md#cbasepane__calcfixedlayout).)|  \n|[CPaneDivider::CheckVisibility](#cpanedivider__checkvisibility)||  \n|[CPaneDivider::CreateEx](#cpanedivider__createex)|(Overrides [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex).)|  \n|[CPaneDivider::DoesAllowDynInsertBefore](#cpanedivider__doesallowdyninsertbefore)|(Overrides [CBasePane::DoesAllowDynInsertBefore](../../mfc/reference/cbasepane-class.md#cbasepane__doesallowdyninsertbefore).)|  \n|[CPaneDivider::DoesContainFloatingPane](#cpanedivider__doescontainfloatingpane)||  \n|[CPaneDivider::FindPaneContainer](#cpanedivider__findpanecontainer)||  \n|[CPaneDivider::FindTabbedPane](#cpanedivider__findtabbedpane)||  \n|[CPaneDivider::GetDefaultWidth](#cpanedivider__getdefaultwidth)||  \n|[CPaneDivider::GetFirstPane](#cpanedivider__getfirstpane)||  \n|[CPaneDivider::GetPaneDividerStyle](#cpanedivider__getpanedividerstyle)||  \n|[CPaneDivider::GetRootContainerRect](#cpanedivider__getrootcontainerrect)||  \n|[CPaneDivider::GetWidth](#cpanedivider__getwidth)||  \n|[CPaneDivider::Init](#cpanedivider__init)||  \n|[CPaneDivider::InsertPane](#cpanedivider__insertpane)||  \n|[CPaneDivider::IsAutoHideMode](#cpanedivider__isautohidemode)|(Overrides [CBasePane::IsAutoHideMode](../../mfc/reference/cbasepane-class.md#cbasepane__isautohidemode).)|  \n|[CPaneDivider::IsDefault](#cpanedivider__isdefault)||  \n|[CPaneDivider::IsHorizontal](#cpanedivider__ishorizontal)|(Overrides [CBasePane::IsHorizontal](../../mfc/reference/cbasepane-class.md#cbasepane__ishorizontal).)|  \n|[CPaneDivider::Move](#cpanedivider__move)||  \n|[CPaneDivider::NotifyAboutRelease](#cpanedivider__notifyaboutrelease)||  \n|[CPaneDivider::OnShowPane](#cpanedivider__onshowpane)||  \n|[CPaneDivider::ReleaseEmptyPaneContainers](#cpanedivider__releaseemptypanecontainers)||  \n|[CPaneDivider::RemovePane](#cpanedivider__removepane)||  \n|[CPaneDivider::ReplacePane](#cpanedivider__replacepane)||  \n|[CPaneDivider::RepositionPanes](#cpanedivider__repositionpanes)||  \n|[CPaneDivider::Serialize](#cpanedivider__serialize)|(Overrides `CBasePane::Serialize`.)|  \n|[CPaneDivider::SetAutoHideMode](#cpanedivider__setautohidemode)||  \n|[CPaneDivider::SetPaneContainerManager](#cpanedivider__setpanecontainermanager)||  \n|[CPaneDivider::ShowWindow](#cpanedivider__showwindow)||  \n|[CPaneDivider::StoreRecentDockSiteInfo](#cpanedivider__storerecentdocksiteinfo)||  \n|[CPaneDivider::StoreRecentTabRelatedInfo](#cpanedivider__storerecenttabrelatedinfo)||  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneDivider::GetPanes](#cpanedivider__getpanes)|Returns the list of panes that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md). This method should be called only for default pane dividers.|  \n|[CPaneDivider::GetPaneDividers](#cpanedivider__getpanedividers)|Returns the list of pane dividers that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md). This method should be called only for default pane dividers.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneDivider::m_nDefaultWidth](#cpanedivider__m_ndefaultwidth)|Specifies the default width in pixels of all pane dividers in the application.|  \n|[CPaneDivider::m_pSliderRTC](#cpanedivider__m_psliderrtc)|Holds a pointer to the runtime class information about a `CPaneDivider`-derived object.|  \n  \n## Remarks  \n The framework creates `CPaneDivider` objects automatically when a pane is docked.  \n  \n There are two types of pane dividers:  \n  \n-   a default pane divider is created when a group of panes is docked to a side of the main frame window. The default pane divider holds a pointer to the [CPaneContainerManager Class](../../mfc/reference/cpanecontainermanager-class.md) and redirects most operations on the group of panes (such as resizing a pane, or docking another pane or container) to the container manager. Each docking pane maintains a pointer to its default pane divider.  \n  \n-   A regular pane divider just divides two panes in a container. For more information, see [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md).  \n  \n## Example  \n The following example demonstrates how to get a `CPaneDivider` object from a `CWorkspaceBar` object. This code snippet is part of the [MDI Tabs Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_MDITabsDemo#5](../../mfc/reference/codesnippet/cpp/cpanedivider-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md) [CCmdTarget](../../mfc/reference/ccmdtarget-class.md) [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CBasePane](../../mfc/reference/cbasepane-class.md) [CPaneDivider](../../mfc/reference/cpanedivider-class.md)  \n  \n## Requirements  \n **Header:** afxPaneDivider.h  \n  \n##  <a name=\"cpanedivider__setautohidemode\"></a>  CPaneDivider::SetAutoHideMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetAutoHideMode(BOOL bMode);\n```  \n  \n### Parameters  \n [in] `bMode`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__setpanecontainermanager\"></a>  CPaneDivider::SetPaneContainerManager  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetPaneContainerManager(CPaneContainerManager* p);\n```  \n  \n### Parameters  \n [in] `p`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__addpane\"></a>  CPaneDivider::AddPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void AddPane(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__addpanecontainer\"></a>  CPaneDivider::AddPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL AddPaneContainer(\n    CPaneContainerManager& barContainerManager,  \n    BOOL bOuterEdge);\n\n \nvirtual BOOL AddPaneContainer(\n    CDockablePane* pTargetBar,  \n    CPaneContainerManager& barContainerManager,  \n    DWORD dwAlignment);\n```  \n  \n### Parameters  \n [in] `barContainerManager`  \n [in] `bOuterEdge`  \n [in] `pTargetBar`  \n [in] `dwAlignment`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__addrecentpane\"></a>  CPaneDivider::AddRecentPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CDockablePane* AddRecentPane(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__calcexpecteddockedrect\"></a>  CPaneDivider::CalcExpectedDockedRect  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void CalcExpectedDockedRect(\n    CWnd* pWndToDock,  \n    CPoint ptMouse,  \n    CRect& rectResult,  \n    BOOL& bDrawTab,  \n    CDockablePane** ppTargetBar);\n```  \n  \n### Parameters  \n [in] `pWndToDock`  \n [in] `ptMouse`  \n [in] `rectResult`  \n [in] `bDrawTab`  \n [in] `ppTargetBar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__calcfixedlayout\"></a>  CPaneDivider::CalcFixedLayout  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual CSize CalcFixedLayout(\n    BOOL bStretch,  \n    BOOL bHorz);\n```  \n  \n### Parameters  \n [in] `bStretch`  \n [in] `bHorz`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__checkvisibility\"></a>  CPaneDivider::CheckVisibility  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL CheckVisibility();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__cpanedivider\"></a>  CPaneDivider::CPaneDivider  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCPaneDivider();\n\n \nCPaneDivider(\n    BOOL bDefaultSlider,  \n    CWnd* pParent = NULL);\n```  \n  \n### Parameters  \n [in] `bDefaultSlider`  \n [in] `pParent`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__createex\"></a>  CPaneDivider::CreateEx  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwStyleEx,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID,  \n    CCreateContext* pContext);\n```  \n  \n### Parameters  \n [in] `dwStyleEx`  \n [in] `dwStyle`  \n [in] `rect`  \n [in] `pParentWnd`  \n [in] `nID`  \n [in] `pContext`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__doesallowdyninsertbefore\"></a>  CPaneDivider::DoesAllowDynInsertBefore  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL DoesAllowDynInsertBefore() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__doescontainfloatingpane\"></a>  CPaneDivider::DoesContainFloatingPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL DoesContainFloatingPane();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__findpanecontainer\"></a>  CPaneDivider::FindPaneContainer  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCPaneContainer* FindPaneContainer(\n    CDockablePane* pBar,  \n    BOOL& bLeftBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `bLeftBar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__findtabbedpane\"></a>  CPaneDivider::FindTabbedPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCDockablePane* FindTabbedPane(UINT nID);\n```  \n  \n### Parameters  \n [in] `nID`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__getdefaultwidth\"></a>  CPaneDivider::GetDefaultWidth  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nstatic int __stdcall GetDefaultWidth();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__getfirstpane\"></a>  CPaneDivider::GetFirstPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nconst CBasePane* GetFirstPane() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__getpanedividers\"></a>  CPaneDivider::GetPaneDividers  \n Returns the list of pane dividers that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md). This method should be called only for default pane dividers.  \n  \n```  \nvoid GetPaneDividers(CObList& lstSliders);\n```  \n  \n### Parameters  \n [out] `lstSliders`  \n Contains the list of pane dividers that reside in the pane container.  \n  \n### Remarks  \n This method should be called for default pane dividers only. A default pane divider is a divider that resizes the entire pane container.  \n  \n##  <a name=\"cpanedivider__getpanedividerstyle\"></a>  CPaneDivider::GetPaneDividerStyle  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nDWORD GetPaneDividerStyle() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__getpanes\"></a>  CPaneDivider::GetPanes  \n Returns the list of panes that reside in the [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md). This method should be called only to retrieve default pane dividers.  \n  \n```  \nvoid GetPanes(CObList& lstBars);\n```  \n  \n### Parameters  \n [out] `lstBars`  \n Contains the list of panes that reside in the pane container.  \n  \n### Remarks  \n This method should be called for default pane dividers only. A default pane divider is a divider that resizes the entire pane container.  \n  \n##  <a name=\"cpanedivider__getrootcontainerrect\"></a>  CPaneDivider::GetRootContainerRect  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCRect GetRootContainerRect();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__getwidth\"></a>  CPaneDivider::GetWidth  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nint GetWidth() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__init\"></a>  CPaneDivider::Init  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid Init(\n    BOOL bDefaultSlider = FALSE,  \n    CWnd* pParent = NULL);\n```  \n  \n### Parameters  \n [in] `bDefaultSlider`  \n [in] `pParent`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__insertpane\"></a>  CPaneDivider::InsertPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL InsertPane(\n    CDockablePane* pBarToInsert,  \n    CDockablePane* pTargetBar,  \n    DWORD dwAlignment,  \n    LPCRECT lpRect = NULL);\n```  \n  \n### Parameters  \n [in] `pBarToInsert`  \n [in] `pTargetBar`  \n [in] `dwAlignment`  \n [in] `lpRect`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__isautohidemode\"></a>  CPaneDivider::IsAutoHideMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsAutoHideMode() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__isdefault\"></a>  CPaneDivider::IsDefault  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsDefault() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__ishorizontal\"></a>  CPaneDivider::IsHorizontal  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsHorizontal() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__m_ndefaultwidth\"></a>  CPaneDivider::m_nDefaultWidth  \n Specifies the default width, in pixels, of all pane dividers in the application.  \n  \n```  \nAFX_IMPORT_DATA static int m_nDefaultWidth;  \n```  \n  \n##  <a name=\"cpanedivider__move\"></a>  CPaneDivider::Move  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void Move(\n    CPoint& ptOffset,  \n    BOOL bAdjustLayout = TRUE);\n```  \n  \n### Parameters  \n [in] `ptOffset`  \n [in] `bAdjustLayout`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__m_psliderrtc\"></a>  CPaneDivider::m_pSliderRTC  \n Holds a pointer to runtime class information about a `CPaneDivider`-derived object.  \n  \n```  \nAFX_IMPORT_DATA static CRuntimeClass* m_pSliderRTC;  \n```  \n  \n### Remarks  \n Set this member variable if you create a custom pane divider. This enables the framework to create your pane divider when the pane is drawn.  \n  \n### Example  \n The following example shows how to set the `m_pSliderRTC` member variable:  \n  \n```  \nclass CMySplitter : public CPaneDivider  \n{  \n...  \n};  \n \nCPaneDivider::m_pSliderRTC = RUNTIME_CLASS(CMySpliter);\n```  \n  \n##  <a name=\"cpanedivider__notifyaboutrelease\"></a>  CPaneDivider::NotifyAboutRelease  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void NotifyAboutRelease();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__onshowpane\"></a>  CPaneDivider::OnShowPane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void OnShowPane(\n    CDockablePane* pBar,  \n    BOOL bShow);\n```  \n  \n### Parameters  \n [in] `pBar`  \n [in] `bShow`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__releaseemptypanecontainers\"></a>  CPaneDivider::ReleaseEmptyPaneContainers  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid ReleaseEmptyPaneContainers();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__removepane\"></a>  CPaneDivider::RemovePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void RemovePane(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__replacepane\"></a>  CPaneDivider::ReplacePane  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual BOOL ReplacePane(\n    CDockablePane* pBarToReplace,  \n    CDockablePane* pBarToReplaceWith);\n```  \n  \n### Parameters  \n [in] `pBarToReplace`  \n [in] `pBarToReplaceWith`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__repositionpanes\"></a>  CPaneDivider::RepositionPanes  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void RepositionPanes(\n    CRect& rectNew,  \n    HDWP& hdwp);\n```  \n  \n### Parameters  \n [in] `rectNew`  \n [in] `hdwp`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__serialize\"></a>  CPaneDivider::Serialize  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid Serialize(CArchive& ar);\n```  \n  \n### Parameters  \n [in] `ar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__showwindow\"></a>  CPaneDivider::ShowWindow  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid ShowWindow(int nCmdShow);\n```  \n  \n### Parameters  \n [in] `nCmdShow`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__storerecentdocksiteinfo\"></a>  CPaneDivider::StoreRecentDockSiteInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid StoreRecentDockSiteInfo(CDockablePane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Remarks  \n  \n##  <a name=\"cpanedivider__storerecenttabrelatedinfo\"></a>  CPaneDivider::StoreRecentTabRelatedInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid StoreRecentTabRelatedInfo(\n    CDockablePane* pDockingBar,  \n    CDockablePane* pTabbedBar);\n```  \n  \n### Parameters  \n [in] `pDockingBar`  \n [in] `pTabbedBar`  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CPaneContainerManager Class](../../mfc/reference/cpanecontainermanager-class.md)   \n [CPaneContainer Class](../../mfc/reference/cpanecontainer-class.md)   \n [CDockingManager Class](../../mfc/reference/cdockingmanager-class.md)   \n [CBasePane Class](../../mfc/reference/cbasepane-class.md)\n"}