{"nodes":[{"pos":[12,44],"content":"CAxWindow Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAxWindow Class | Microsoft Docs","pos":[0,32]}]},{"content":"CAxWindow Class","pos":[654,669]},{"content":"This class provides methods for manipulating a window hosting an ActiveX control.","pos":[670,751]},{"pos":[759,869],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Syntax","pos":[878,884]},{"content":"Members","pos":[939,946]},{"content":"Methods","pos":[956,963]},{"content":"AttachControl","pos":[985,998]},{"pos":[1027,1090],"content":"Attaches an existing ActiveX control to the <ph id=\"ph1\">`CAxWindow`</ph> object.","source":"Attaches an existing ActiveX control to the `CAxWindow` object."},{"content":"CAxWindow","pos":[1096,1105]},{"pos":[1130,1162],"content":"Constructs a <ph id=\"ph1\">`CAxWindow`</ph> object.","source":"Constructs a `CAxWindow` object."},{"content":"CreateControl","pos":[1168,1181]},{"pos":[1210,1293],"content":"Creates an ActiveX control, initializes it, and hosts it in the <ph id=\"ph1\">`CAxWindow`</ph> window.","source":"Creates an ActiveX control, initializes it, and hosts it in the `CAxWindow` window."},{"content":"CreateControlEx","pos":[1299,1314]},{"content":"Creates an ActiveX control and retrieves an interface pointer (or pointers) from the control.","pos":[1345,1438]},{"content":"GetWndClassName","pos":[1444,1459]},{"pos":[1490,1561],"content":"(Static) Retrieves the predefined class name of the <ph id=\"ph1\">`CAxWindow`</ph> object.","source":"(Static) Retrieves the predefined class name of the `CAxWindow` object."},{"content":"QueryControl","pos":[1567,1579]},{"pos":[1607,1664],"content":"Retrieves the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the hosted ActiveX control.","source":"Retrieves the **IUnknown** of the hosted ActiveX control."},{"content":"QueryHost","pos":[1670,1679]},{"pos":[1704,1765],"content":"Retrieves the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer of the <ph id=\"ph1\">`CAxWindow`</ph> object.","source":"Retrieves the **IUnknown** pointer of the `CAxWindow` object."},{"content":"SetExternalDispatch","pos":[1771,1790]},{"pos":[1825,1893],"content":"Sets the external dispatch interface used by the <ph id=\"ph1\">`CAxWindow`</ph> object.","source":"Sets the external dispatch interface used by the `CAxWindow` object."},{"content":"SetExternalUIHandler","pos":[1899,1919]},{"pos":[1955,2036],"content":"Sets the external <bpt id=\"p1\">**</bpt>IDocHostUIHandler<ept id=\"p1\">**</ept> interface used by the <ph id=\"ph1\">`CAxWindow`</ph> object.","source":"Sets the external **IDocHostUIHandler** interface used by the `CAxWindow` object."},{"content":"Operators","pos":[2047,2056]},{"content":"operator =","pos":[2078,2088]},{"pos":[2115,2171],"content":"Assigns an <bpt id=\"p1\">**</bpt>HWND<ept id=\"p1\">**</ept> to an existing <bpt id=\"p2\">**</bpt>CAxWindow<ept id=\"p2\">**</ept> object.","source":"Assigns an **HWND** to an existing **CAxWindow** object."},{"content":"Remarks","pos":[2181,2188]},{"content":"This class provides methods for manipulating a window that hosts an ActiveX control.","pos":[2192,2276]},{"content":"The hosting is provided by \" <bpt id=\"p1\">**</bpt>AtlAxWin80\"<ept id=\"p1\">**</ept>, which is wrapped by <ph id=\"ph1\">`CAxWindow`</ph>.","pos":[2277,2355],"source":" The hosting is provided by \" **AtlAxWin80\"**, which is wrapped by `CAxWindow`."},{"content":"Class <ph id=\"ph1\">`CAxWindow`</ph> is implemented as a specialization of the <ph id=\"ph2\">`CAxWindowT`</ph> class.","pos":[2362,2441],"source":"Class `CAxWindow` is implemented as a specialization of the `CAxWindowT` class."},{"content":"This specialization is declared as:","pos":[2442,2477]},{"pos":[2531,2648],"content":"If you need to change the base class, you can use <ph id=\"ph1\">`CAxWindowT`</ph> and specify the new base class as a template argument.","source":"If you need to change the base class, you can use `CAxWindowT` and specify the new base class as a template argument."},{"content":"Requirements","pos":[2657,2669]},{"pos":[2673,2693],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlwin.h","source":"**Header:** atlwin.h"},{"pos":[2744,2768],"content":"CAxWindow::AttachControl"},{"content":"Creates a new host object if one isn't already present and attaches the specified control to the host.","pos":[2772,2874]},{"content":"Parameters","pos":[2976,2986]},{"content":"[in] A pointer to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the control.","pos":[3004,3054],"source":" [in] A pointer to the **IUnknown** of the control."},{"content":"[out] A pointer to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the host (the <bpt id=\"p2\">**</bpt>AxWin<ept id=\"p2\">**</ept> object).","pos":[3081,3152],"source":" [out] A pointer to the **IUnknown** of the host (the **AxWin** object)."},{"content":"Return Value","pos":[3162,3174]},{"pos":[3178,3205],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[3215,3222]},{"pos":[3226,3321],"content":"The control object being attached must be correctly initialized before calling <ph id=\"ph1\">`AttachControl`</ph>.","source":"The control object being attached must be correctly initialized before calling `AttachControl`."},{"pos":[3368,3388],"content":"CAxWindow::CAxWindow"},{"pos":[3392,3463],"content":"Constructs a <ph id=\"ph1\">`CAxWindow`</ph> object using an existing window object handle.","source":"Constructs a `CAxWindow` object using an existing window object handle."},{"content":"Parameters","pos":[3517,3527]},{"content":"A handle to an existing window object.","pos":[3541,3579]},{"pos":[3630,3654],"content":"CAxWindow::CreateControl"},{"content":"Creates an ActiveX control, initializes it, and hosts it in the specified window.","pos":[3658,3739]},{"content":"Parameters","pos":[3992,4002]},{"content":"A pointer to a string to create the control.","pos":[4020,4064]},{"content":"Must be formatted in one of the following ways:","pos":[4065,4112]},{"content":"A ProgID such as \"MSCAL.Calendar.7\"","pos":[4122,4157]},{"content":"A CLSID such as \"{8E27C92B-1264-101C-8A2F-040224009C02}\"","pos":[4167,4223]},{"content":"A URL such as \"http://www.microsoft.com\"","pos":[4233,4273]},{"content":"A reference to an Active document such as \"file://<ph id=\"ph1\">\\\\</ph>\\Documents\\MyDoc.doc\"","pos":[4283,4356],"source":"A reference to an Active document such as \"file://\\\\\\Documents\\MyDoc.doc\""},{"content":"A fragment of HTML such as \"MSHTML:<ph id=\"ph1\">\\&lt;</ph>HTML&gt;<ph id=\"ph2\">\\&lt;</ph>BODY&gt;This is a line of text<ph id=\"ph3\">\\&lt;</ph>/BODY&gt;<ph id=\"ph4\">\\&lt;</ph>/HTML&gt;\"","pos":[4366,4454],"source":"A fragment of HTML such as \"MSHTML:\\<HTML>\\<BODY>This is a line of text\\</BODY>\\</HTML>\""},{"pos":[4466,4822],"content":"[!NOTE]\n \"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream. Only the ProgID and CLSID are supported in Windows Mobile platforms. Windows CE embedded platforms, other than Windows Mobile with support for CE IE support all types including ProgID, CLSID, URL, reference to active document, and fragment of HTML.","leadings":["","    > "],"nodes":[{"content":" \"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream. Only the ProgID and CLSID are supported in Windows Mobile platforms. Windows CE embedded platforms, other than Windows Mobile with support for CE IE support all types including ProgID, CLSID, URL, reference to active document, and fragment of HTML.","pos":[8,350],"nodes":[{"content":"\"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.","pos":[1,93]},{"content":"Only the ProgID and CLSID are supported in Windows Mobile platforms.","pos":[94,162]},{"content":"Windows CE embedded platforms, other than Windows Mobile with support for CE IE support all types including ProgID, CLSID, URL, reference to active document, and fragment of HTML.","pos":[163,342]}]}]},{"pos":[4829,4943],"content":"`pStream`  \n[in] A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"[in] A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.","pos":[12,113],"nodes":[{"content":"[in] A pointer to a stream that is used to initialize the properties of the control.","pos":[0,84]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[85,101],"source":" Can be **NULL**."}]}]},{"pos":[4950,5070],"content":"`ppUnkContainer`  \n[out] The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"[out] The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.","pos":[19,119],"nodes":[{"content":"[out] The address of a pointer that will receive the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the container.","pos":[0,83],"source":"[out] The address of a pointer that will receive the **IUnknown** of the container."},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[84,100],"source":" Can be **NULL**."}]}]},{"pos":[5077,5205],"content":"`dwResID`  \nThe resource ID of an HTML resource. The WebBrowser control will be created and loaded with the specified resource.","leadings":[""," "],"nodes":[{"content":"The resource ID of an HTML resource. The WebBrowser control will be created and loaded with the specified resource.","pos":[12,127],"nodes":[{"content":"The resource ID of an HTML resource.","pos":[0,36]},{"content":"The WebBrowser control will be created and loaded with the specified resource.","pos":[37,115]}]}]},{"content":"Return Value","pos":[5215,5227]},{"pos":[5231,5258],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[5268,5275]},{"pos":[5279,5402],"content":"If the second version of this method is used, an HTML control is created and bound to the resource identified by <ph id=\"ph1\">`dwResID`</ph>.","source":"If the second version of this method is used, an HTML control is created and bound to the resource identified by `dwResID`."},{"content":"This method gives you the same result as calling:","pos":[5409,5458]},{"pos":[5476,5496],"content":"NVC_ATL_Windowing#42"},{"pos":[5554,5721],"content":"See <bpt id=\"p1\">[</bpt>CAxWindow2T::CreateControlLic<ept id=\"p1\">](../../atl/reference/caxwindow2t-class.md#caxwindow2t__createcontrollic)</ept> to create, initialize, and host a licensed ActiveX control.","source":"See [CAxWindow2T::CreateControlLic](../../atl/reference/caxwindow2t-class.md#caxwindow2t__createcontrollic) to create, initialize, and host a licensed ActiveX control."},{"content":"Example","pos":[5731,5738]},{"pos":[5742,5885],"content":"See <bpt id=\"p1\">[</bpt>Hosting ActiveX Controls Using ATL AXHost<ept id=\"p1\">](../../atl/hosting-activex-controls-using-atl-axhost.md)</ept> for a sample that uses <ph id=\"ph1\">`CreateControl`</ph>.","source":"See [Hosting ActiveX Controls Using ATL AXHost](../../atl/hosting-activex-controls-using-atl-axhost.md) for a sample that uses `CreateControl`."},{"pos":[5938,5964],"content":"CAxWindow::CreateControlEx"},{"content":"Creates an ActiveX control, initializes it, and hosts it in the specified window.","pos":[5968,6049]},{"content":"Parameters","pos":[6502,6512]},{"content":"A pointer to a string to create the control.","pos":[6530,6574]},{"content":"Must be formatted in one of the following ways:","pos":[6575,6622]},{"content":"A ProgID such as \"MSCAL.Calendar.7\"","pos":[6632,6667]},{"content":"A CLSID such as \"{8E27C92B-1264-101C-8A2F-040224009C02}\"","pos":[6677,6733]},{"content":"A URL such as \"http://www.microsoft.com\"","pos":[6743,6783]},{"content":"A reference to an Active document such as \"file://<ph id=\"ph1\">\\\\</ph>\\Documents\\MyDoc.doc\"","pos":[6793,6866],"source":"A reference to an Active document such as \"file://\\\\\\Documents\\MyDoc.doc\""},{"content":"A fragment of HTML such as \"MSHTML:<ph id=\"ph1\">\\&lt;</ph>HTML&gt;<ph id=\"ph2\">\\&lt;</ph>BODY&gt;This is a line of text<ph id=\"ph3\">\\&lt;</ph>/BODY&gt;<ph id=\"ph4\">\\&lt;</ph>/HTML&gt;\"","pos":[6876,6964],"source":"A fragment of HTML such as \"MSHTML:\\<HTML>\\<BODY>This is a line of text\\</BODY>\\</HTML>\""},{"pos":[6976,7332],"content":"[!NOTE]\n \"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream. Only the ProgID and CLSID are supported in Windows Mobile platforms. Windows CE embedded platforms, other than Windows Mobile with support for CE IE support all types including ProgID, CLSID, URL, reference to active document, and fragment of HTML.","leadings":["","    > "],"nodes":[{"content":" \"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream. Only the ProgID and CLSID are supported in Windows Mobile platforms. Windows CE embedded platforms, other than Windows Mobile with support for CE IE support all types including ProgID, CLSID, URL, reference to active document, and fragment of HTML.","pos":[8,350],"nodes":[{"content":"\"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream.","pos":[1,93]},{"content":"Only the ProgID and CLSID are supported in Windows Mobile platforms.","pos":[94,162]},{"content":"Windows CE embedded platforms, other than Windows Mobile with support for CE IE support all types including ProgID, CLSID, URL, reference to active document, and fragment of HTML.","pos":[163,342]}]}]},{"pos":[7339,7453],"content":"`pStream`  \n[in] A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"[in] A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.","pos":[12,113],"nodes":[{"content":"[in] A pointer to a stream that is used to initialize the properties of the control.","pos":[0,84]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[85,101],"source":" Can be **NULL**."}]}]},{"pos":[7460,7580],"content":"`ppUnkContainer`  \n[out] The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"[out] The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.","pos":[19,119],"nodes":[{"content":"[out] The address of a pointer that will receive the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the container.","pos":[0,83],"source":"[out] The address of a pointer that will receive the **IUnknown** of the container."},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[84,100],"source":" Can be **NULL**."}]}]},{"pos":[7587,7703],"content":"`ppUnkControl`  \n[out] The address of a pointer that will receive the **IUnknown** of the control. Can be **NULL**.","leadings":[""," "],"nodes":[{"content":"[out] The address of a pointer that will receive the **IUnknown** of the control. Can be **NULL**.","pos":[17,115],"nodes":[{"content":"[out] The address of a pointer that will receive the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> of the control.","pos":[0,81],"source":"[out] The address of a pointer that will receive the **IUnknown** of the control."},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[82,98],"source":" Can be **NULL**."}]}]},{"pos":[7710,7823],"content":"`iidSink`  \n[in] The interface identifier of an outgoing interface on the contained object. Can be **IID_NULL**.","leadings":[""," "],"nodes":[{"content":"[in] The interface identifier of an outgoing interface on the contained object. Can be **IID_NULL**.","pos":[12,112],"nodes":[{"content":"[in] The interface identifier of an outgoing interface on the contained object.","pos":[0,79]},{"content":"Can be <bpt id=\"p1\">**</bpt>IID_NULL<ept id=\"p1\">**</ept>.","pos":[80,100],"source":" Can be **IID_NULL**."}]}]},{"pos":[7830,7995],"content":"*punkSink*  \n[in] A pointer to the **IUnknown** interface of the sink object to be connected to the connection point on the contained object specified by `iidSink`.","leadings":[""," "],"nodes":[{"content":"punkSink","pos":[1,9]},{"content":"[in] A pointer to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> interface of the sink object to be connected to the connection point on the contained object specified by <ph id=\"ph1\">`iidSink`</ph>.","pos":[13,164],"source":"[in] A pointer to the **IUnknown** interface of the sink object to be connected to the connection point on the contained object specified by `iidSink`."}]},{"pos":[8002,8135],"content":"`dwResID`  \n[in] The resource ID of an HTML resource. The WebBrowser control will be created and loaded with the specified resource.","leadings":[""," "],"nodes":[{"content":"[in] The resource ID of an HTML resource. The WebBrowser control will be created and loaded with the specified resource.","pos":[12,132],"nodes":[{"content":"[in] The resource ID of an HTML resource.","pos":[0,41]},{"content":"The WebBrowser control will be created and loaded with the specified resource.","pos":[42,120]}]}]},{"content":"Return Value","pos":[8145,8157]},{"pos":[8161,8188],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[8198,8205]},{"pos":[8209,8473],"content":"This method is similar to <bpt id=\"p1\">[</bpt>CAxWindow::CreateControl<ept id=\"p1\">](#caxwindow__createcontrol)</ept>, but unlike that method, <ph id=\"ph1\">`CreateControlEx`</ph> also allows you to receive an interface pointer to the newly created control and set up an event sink to receive events fired by the control.","source":"This method is similar to [CAxWindow::CreateControl](#caxwindow__createcontrol), but unlike that method, `CreateControlEx` also allows you to receive an interface pointer to the newly created control and set up an event sink to receive events fired by the control."},{"pos":[8480,8651],"content":"See <bpt id=\"p1\">[</bpt>CAxWindow2T::CreateControlLicEx<ept id=\"p1\">](../../atl/reference/caxwindow2t-class.md#caxwindow2t__createcontrollicex)</ept> to create, initialize, and host a licensed ActiveX control.","source":"See [CAxWindow2T::CreateControlLicEx](../../atl/reference/caxwindow2t-class.md#caxwindow2t__createcontrollicex) to create, initialize, and host a licensed ActiveX control."},{"content":"Example","pos":[8661,8668]},{"pos":[8672,8817],"content":"See <bpt id=\"p1\">[</bpt>Hosting ActiveX Controls Using ATL AXHost<ept id=\"p1\">](../../atl/hosting-activex-controls-using-atl-axhost.md)</ept> for a sample that uses <ph id=\"ph1\">`CreateControlEx`</ph>.","source":"See [Hosting ActiveX Controls Using ATL AXHost](../../atl/hosting-activex-controls-using-atl-axhost.md) for a sample that uses `CreateControlEx`."},{"pos":[8870,8896],"content":"CAxWindow::GetWndClassName"},{"content":"Retrieves the name of the window class.","pos":[8900,8939]},{"content":"Return Value","pos":[8996,9008]},{"content":"A pointer to a string containing the name of the window class that can host nonlicensed ActiveX controls.","pos":[9012,9117]},{"pos":[9166,9187],"content":"CAxWindow::operator ="},{"pos":[9191,9243],"content":"Assigns an <ph id=\"ph1\">`HWND`</ph> to an existing <ph id=\"ph2\">`CAxWindow`</ph> object.","source":"Assigns an `HWND` to an existing `CAxWindow` object."},{"content":"Parameters","pos":[9308,9318]},{"content":"A handle to an existing window.","pos":[9332,9363]},{"content":"Return Value","pos":[9373,9385]},{"pos":[9389,9443],"content":"Returns a reference to the current <ph id=\"ph1\">`CAxWindow`</ph> object.","source":"Returns a reference to the current `CAxWindow` object."},{"pos":[9493,9516],"content":"CAxWindow::QueryControl"},{"content":"Retrieves the specified interface of the hosted control.","pos":[9520,9576]},{"content":"Parameters","pos":[9723,9733]},{"content":"[in] Specifies the IID of the control's interface.","pos":[9746,9796]},{"content":"[out] A pointer to the interface of the control.","pos":[9814,9862]},{"content":"In the template version of this method, there is no need for a reference ID as long as a typed interface with an associated UUID is passed.","pos":[9863,10002]},{"content":"[in] The interface that is being queried for.","pos":[10016,10061]},{"content":"Return Value","pos":[10071,10083]},{"pos":[10087,10114],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[10161,10181],"content":"CAxWindow::QueryHost"},{"content":"Returns the specified interface of the host.","pos":[10185,10229]},{"content":"Parameters","pos":[10370,10380]},{"content":"[in] Specifies the IID of the control's interface.","pos":[10393,10443]},{"content":"[out] A pointer to the interface on the host.","pos":[10461,10506]},{"content":"In the template version of this method, there is no need for a reference ID as long as a typed interface with an associated UUID is passed.","pos":[10507,10646]},{"content":"[in] The interface that is being queried for.","pos":[10660,10705]},{"content":"Return Value","pos":[10715,10727]},{"pos":[10731,10758],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[10768,10775]},{"pos":[10779,10904],"content":"The interface of the host allows access to the underlying functionality of the window-hosting code, implemented by <bpt id=\"p1\">**</bpt>AxWin<ept id=\"p1\">**</ept>.","source":"The interface of the host allows access to the underlying functionality of the window-hosting code, implemented by **AxWin**."},{"pos":[10961,10991],"content":"CAxWindow::SetExternalDispatch"},{"pos":[10995,11059],"content":"Sets the external dispatch interface for the <ph id=\"ph1\">`CAxWindow`</ph> object.","source":"Sets the external dispatch interface for the `CAxWindow` object."},{"content":"Parameters","pos":[11129,11139]},{"content":"[in] A pointer to an <ph id=\"ph1\">`IDispatch`</ph> interface.","pos":[11154,11197],"source":" [in] A pointer to an `IDispatch` interface."},{"content":"Return Value","pos":[11207,11219]},{"pos":[11223,11250],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[11308,11339],"content":"CAxWindow::SetExternalUIHandler"},{"pos":[11343,11486],"content":"Sets the external <bpt id=\"p1\">[</bpt>IDocHostUIHandlerDispatch<ept id=\"p1\">](../../atl/reference/idochostuihandlerdispatch-interface.md)</ept> interface for the <ph id=\"ph1\">`CAxWindow`</ph> object.","source":"Sets the external [IDocHostUIHandlerDispatch](../../atl/reference/idochostuihandlerdispatch-interface.md) interface for the `CAxWindow` object."},{"content":"Parameters","pos":[11578,11588]},{"content":"pUIHandler","pos":[11593,11603]},{"content":"[in] A pointer to an <bpt id=\"p1\">**</bpt>IDocHostUIHandlerDispatch<ept id=\"p1\">**</ept> interface.","pos":[11608,11669],"source":" [in] A pointer to an **IDocHostUIHandlerDispatch** interface."},{"content":"Return Value","pos":[11679,11691]},{"pos":[11695,11722],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[11732,11739]},{"content":"The external <ph id=\"ph1\">`IDocHostUIHandlerDispatch`</ph> interface is used by controls that query the host's site for the <ph id=\"ph2\">`IDocHostUIHandlerDispatch`</ph> interface.","pos":[11743,11887],"source":"The external `IDocHostUIHandlerDispatch` interface is used by controls that query the host's site for the `IDocHostUIHandlerDispatch` interface."},{"content":"The WebBrowser control is one control that does this.","pos":[11888,11941]},{"content":"See Also","pos":[11950,11958]},{"content":"ATLCON Sample","pos":[11963,11976]},{"content":"CWindow Class","pos":[12012,12025]},{"content":"Composite Control Fundamentals","pos":[12070,12100]},{"content":"Class Overview","pos":[12156,12170]},{"content":"Control Containment FAQ","pos":[12210,12233]}],"content":"---\ntitle: \"CAxWindow Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CAxWindowT\"\n  - \"CAxWindow\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CAxWindow class\"\n  - \"ATL, hosting ActiveX controls\"\nms.assetid: 85e79261-43e4-4770-bde0-1ff87f222b0f\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAxWindow Class\nThis class provides methods for manipulating a window hosting an ActiveX control.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\nclass CAxWindow : public CWindow\n```  \n  \n## Members  \n  \n### Methods  \n  \n|||  \n|-|-|  \n|[AttachControl](#caxwindow__attachcontrol)|Attaches an existing ActiveX control to the `CAxWindow` object.|  \n|[CAxWindow](#caxwindow__caxwindow)|Constructs a `CAxWindow` object.|  \n|[CreateControl](#caxwindow__createcontrol)|Creates an ActiveX control, initializes it, and hosts it in the `CAxWindow` window.|  \n|[CreateControlEx](#caxwindow__createcontrolex)|Creates an ActiveX control and retrieves an interface pointer (or pointers) from the control.|  \n|[GetWndClassName](#caxwindow__getwndclassname)|(Static) Retrieves the predefined class name of the `CAxWindow` object.|  \n|[QueryControl](#caxwindow__querycontrol)|Retrieves the **IUnknown** of the hosted ActiveX control.|  \n|[QueryHost](#caxwindow__queryhost)|Retrieves the **IUnknown** pointer of the `CAxWindow` object.|  \n|[SetExternalDispatch](#caxwindow__setexternaldispatch)|Sets the external dispatch interface used by the `CAxWindow` object.|  \n|[SetExternalUIHandler](#caxwindow__setexternaluihandler)|Sets the external **IDocHostUIHandler** interface used by the `CAxWindow` object.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator =](#caxwindow__operator_eq)|Assigns an **HWND** to an existing **CAxWindow** object.|  \n  \n## Remarks  \n This class provides methods for manipulating a window that hosts an ActiveX control. The hosting is provided by \" **AtlAxWin80\"**, which is wrapped by `CAxWindow`.  \n  \n Class `CAxWindow` is implemented as a specialization of the `CAxWindowT` class. This specialization is declared as:  \n  \n `typedef CAxWindowT<CWindow> CAxWindow;`  \n  \n If you need to change the base class, you can use `CAxWindowT` and specify the new base class as a template argument.  \n  \n## Requirements  \n **Header:** atlwin.h  \n  \n##  <a name=\"caxwindow__attachcontrol\"></a>  CAxWindow::AttachControl  \n Creates a new host object if one isn't already present and attaches the specified control to the host.  \n  \n```\nHRESULT AttachControl(\n    IUnknown* pControl,\n    IUnknown** ppUnkContainer);\n```  \n  \n### Parameters  \n `pControl`  \n [in] A pointer to the **IUnknown** of the control.  \n  \n `ppUnkContainer`  \n [out] A pointer to the **IUnknown** of the host (the **AxWin** object).  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The control object being attached must be correctly initialized before calling `AttachControl`.  \n  \n##  <a name=\"caxwindow__caxwindow\"></a>  CAxWindow::CAxWindow  \n Constructs a `CAxWindow` object using an existing window object handle.  \n  \n```\nCAxWindow(HWND   hWnd = NULL);\n```  \n  \n### Parameters  \n `hWnd`  \n A handle to an existing window object.  \n  \n##  <a name=\"caxwindow__createcontrol\"></a>  CAxWindow::CreateControl  \n Creates an ActiveX control, initializes it, and hosts it in the specified window.  \n  \n```\nHRESULT CreateControl(\n    LPCOLESTR lpszName,\n    IStream* pStream = NULL,\n    IUnknown** ppUnkContainer = NULL);\n\n    HRESULT CreateControl(\n    DWORD dwResID,\n    IStream* pStream = NULL,\n    IUnknown** ppUnkContainer = NULL);\n```  \n  \n### Parameters  \n `lpszName`  \n A pointer to a string to create the control. Must be formatted in one of the following ways:  \n  \n-   A ProgID such as \"MSCAL.Calendar.7\"  \n  \n-   A CLSID such as \"{8E27C92B-1264-101C-8A2F-040224009C02}\"  \n  \n-   A URL such as \"http://www.microsoft.com\"  \n  \n-   A reference to an Active document such as \"file://\\\\\\Documents\\MyDoc.doc\"  \n  \n-   A fragment of HTML such as \"MSHTML:\\<HTML>\\<BODY>This is a line of text\\</BODY>\\</HTML>\"  \n  \n    > [!NOTE]\n    >  \"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream. Only the ProgID and CLSID are supported in Windows Mobile platforms. Windows CE embedded platforms, other than Windows Mobile with support for CE IE support all types including ProgID, CLSID, URL, reference to active document, and fragment of HTML.  \n  \n `pStream`  \n [in] A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.  \n  \n `ppUnkContainer`  \n [out] The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.  \n  \n `dwResID`  \n The resource ID of an HTML resource. The WebBrowser control will be created and loaded with the specified resource.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n If the second version of this method is used, an HTML control is created and bound to the resource identified by `dwResID`.  \n  \n This method gives you the same result as calling:  \n  \n [!code-cpp[NVC_ATL_Windowing#42](../../atl/codesnippet/cpp/caxwindow-class_1.cpp)]  \n  \n See [CAxWindow2T::CreateControlLic](../../atl/reference/caxwindow2t-class.md#caxwindow2t__createcontrollic) to create, initialize, and host a licensed ActiveX control.  \n  \n### Example  \n See [Hosting ActiveX Controls Using ATL AXHost](../../atl/hosting-activex-controls-using-atl-axhost.md) for a sample that uses `CreateControl`.  \n  \n##  <a name=\"caxwindow__createcontrolex\"></a>  CAxWindow::CreateControlEx  \n Creates an ActiveX control, initializes it, and hosts it in the specified window.  \n  \n```\nHRESULT CreateControlEx(\n    LPCOLESTR lpszName,\n    IStream* pStream = NULL,\n    IUnknown** ppUnkContainer = NULL,\n    IUnknown** ppUnkControl = NULL,\n    REFIID iidSink = IID_NULL,\n    IUnknown* punkSink = NULL);\n\n    HRESULT CreateControlEx(\n    DWORD dwResID,\n    IStream* pStream = NULL,\n    IUnknown** ppUnkContainer = NULL,\n    IUnknown** ppUnkControl = NULL,\n    REFIID iidSink = IID_NULL,\n    IUnknown* punkSink = NULL);\n```  \n  \n### Parameters  \n `lpszName`  \n A pointer to a string to create the control. Must be formatted in one of the following ways:  \n  \n-   A ProgID such as \"MSCAL.Calendar.7\"  \n  \n-   A CLSID such as \"{8E27C92B-1264-101C-8A2F-040224009C02}\"  \n  \n-   A URL such as \"http://www.microsoft.com\"  \n  \n-   A reference to an Active document such as \"file://\\\\\\Documents\\MyDoc.doc\"  \n  \n-   A fragment of HTML such as \"MSHTML:\\<HTML>\\<BODY>This is a line of text\\</BODY>\\</HTML>\"  \n  \n    > [!NOTE]\n    >  \"MSHTML:\" must precede the HTML fragment so that it is designated as being an MSHTML stream. Only the ProgID and CLSID are supported in Windows Mobile platforms. Windows CE embedded platforms, other than Windows Mobile with support for CE IE support all types including ProgID, CLSID, URL, reference to active document, and fragment of HTML.  \n  \n `pStream`  \n [in] A pointer to a stream that is used to initialize the properties of the control. Can be **NULL**.  \n  \n `ppUnkContainer`  \n [out] The address of a pointer that will receive the **IUnknown** of the container. Can be **NULL**.  \n  \n `ppUnkControl`  \n [out] The address of a pointer that will receive the **IUnknown** of the control. Can be **NULL**.  \n  \n `iidSink`  \n [in] The interface identifier of an outgoing interface on the contained object. Can be **IID_NULL**.  \n  \n *punkSink*  \n [in] A pointer to the **IUnknown** interface of the sink object to be connected to the connection point on the contained object specified by `iidSink`.  \n  \n `dwResID`  \n [in] The resource ID of an HTML resource. The WebBrowser control will be created and loaded with the specified resource.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n This method is similar to [CAxWindow::CreateControl](#caxwindow__createcontrol), but unlike that method, `CreateControlEx` also allows you to receive an interface pointer to the newly created control and set up an event sink to receive events fired by the control.  \n  \n See [CAxWindow2T::CreateControlLicEx](../../atl/reference/caxwindow2t-class.md#caxwindow2t__createcontrollicex) to create, initialize, and host a licensed ActiveX control.  \n  \n### Example  \n See [Hosting ActiveX Controls Using ATL AXHost](../../atl/hosting-activex-controls-using-atl-axhost.md) for a sample that uses `CreateControlEx`.  \n  \n##  <a name=\"caxwindow__getwndclassname\"></a>  CAxWindow::GetWndClassName  \n Retrieves the name of the window class.  \n  \n```\nstatic LPCTSTR GetWndClassName();\n```  \n  \n### Return Value  \n A pointer to a string containing the name of the window class that can host nonlicensed ActiveX controls.  \n  \n##  <a name=\"caxwindow__operator_eq\"></a>  CAxWindow::operator =  \n Assigns an `HWND` to an existing `CAxWindow` object.  \n  \n```\nCAxWindow<TBase>& operator=(HWND   hWnd);\n```  \n  \n### Parameters  \n `hWnd`  \n A handle to an existing window.  \n  \n### Return Value  \n Returns a reference to the current `CAxWindow` object.  \n  \n##  <a name=\"caxwindow__querycontrol\"></a>  CAxWindow::QueryControl  \n Retrieves the specified interface of the hosted control.  \n  \n```\nHRESULT QueryControl(\n    REFIID iid,\n    void** ppUnk);\n\n    template <class  Q>\n    HRESULT QueryControl(\n    Q** ppUnk);\n```  \n  \n### Parameters  \n `iid`  \n [in] Specifies the IID of the control's interface.  \n  \n `ppUnk`  \n [out] A pointer to the interface of the control. In the template version of this method, there is no need for a reference ID as long as a typed interface with an associated UUID is passed.  \n  \n `Q`  \n [in] The interface that is being queried for.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"caxwindow__queryhost\"></a>  CAxWindow::QueryHost  \n Returns the specified interface of the host.  \n  \n```\nHRESULT QueryHost(\n    REFIID iid,\n    void** ppUnk);\n\n    template <class  Q>\n    HRESULT QueryHost(\n    Q** ppUnk);\n```  \n  \n### Parameters  \n `iid`  \n [in] Specifies the IID of the control's interface.  \n  \n `ppUnk`  \n [out] A pointer to the interface on the host. In the template version of this method, there is no need for a reference ID as long as a typed interface with an associated UUID is passed.  \n  \n `Q`  \n [in] The interface that is being queried for.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The interface of the host allows access to the underlying functionality of the window-hosting code, implemented by **AxWin**.  \n  \n##  <a name=\"caxwindow__setexternaldispatch\"></a>  CAxWindow::SetExternalDispatch  \n Sets the external dispatch interface for the `CAxWindow` object.  \n  \n```\nHRESULT SetExternalDispatch(IDispatch* pDisp);\n```  \n  \n### Parameters  \n `pDisp`  \n [in] A pointer to an `IDispatch` interface.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"caxwindow__setexternaluihandler\"></a>  CAxWindow::SetExternalUIHandler  \n Sets the external [IDocHostUIHandlerDispatch](../../atl/reference/idochostuihandlerdispatch-interface.md) interface for the `CAxWindow` object.  \n  \n```\nHRESULT SetExternalUIHandler(IDocHostUIHandlerDispatch* pUIHandler);\n```  \n  \n### Parameters  \n *pUIHandler*  \n [in] A pointer to an **IDocHostUIHandlerDispatch** interface.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The external `IDocHostUIHandlerDispatch` interface is used by controls that query the host's site for the `IDocHostUIHandlerDispatch` interface. The WebBrowser control is one control that does this.  \n  \n## See Also  \n [ATLCON Sample](../../visual-cpp-samples.md)   \n [CWindow Class](../../atl/reference/cwindow-class.md)   \n [Composite Control Fundamentals](../../atl/atl-composite-control-fundamentals.md)   \n [Class Overview](../../atl/atl-class-overview.md)   \n [Control Containment FAQ](../../atl/atl-control-containment-faq.md)\n\n\n\n\n\n\n\n\n"}