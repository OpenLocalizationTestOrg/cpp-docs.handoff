{"nodes":[{"pos":[12,48],"content":"CMapWordToPtr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMapWordToPtr Class | Microsoft Docs","pos":[0,36]}]},{"content":"CMapWordToPtr Class","pos":[639,658]},{"content":"Supports maps of void pointers keyed by 16-bit words.","pos":[659,712]},{"content":"Syntax","pos":[721,727]},{"content":"Members","pos":[790,797]},{"content":"The member functions of <ph id=\"ph1\">`CMapWordToPtr`</ph> are similar to the member functions of class <bpt id=\"p1\">[</bpt>CMapStringToOb<ept id=\"p1\">](../../mfc/reference/cmapstringtoob-class.md)</ept>.","pos":[801,948],"source":"The member functions of `CMapWordToPtr` are similar to the member functions of class [CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md)."},{"content":"Because of this similarity, you can use the <ph id=\"ph1\">`CMapStringToOb`</ph> reference documentation for member function specifics.","pos":[949,1064],"source":" Because of this similarity, you can use the `CMapStringToOb` reference documentation for member function specifics."},{"content":"Wherever you see a <ph id=\"ph1\">`CObject`</ph> pointer as a function parameter or return value, substitute a pointer to <ph id=\"ph2\">`void`</ph>.","pos":[1065,1174],"source":" Wherever you see a `CObject` pointer as a function parameter or return value, substitute a pointer to `void`."},{"content":"Wherever you see a <ph id=\"ph1\">`CString`</ph> or a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> pointer to <ph id=\"ph2\">`char`</ph> as a function parameter or return value, substitute <bpt id=\"p2\">**</bpt>WORD<ept id=\"p2\">**</ept>.","pos":[1175,1298],"source":" Wherever you see a `CString` or a **const** pointer to `char` as a function parameter or return value, substitute **WORD**."},{"content":"for example, translates to","pos":[1397,1423]},{"content":"Public Constructors","pos":[1506,1525]},{"content":"Name","pos":[1532,1536]},{"content":"Description","pos":[1537,1548]},{"content":"CMapStringToOb::CMapStringToOb","pos":[1587,1617]},{"content":"Constructor.","pos":[1695,1707]},{"content":"Public Methods","pos":[1718,1732]},{"content":"Name","pos":[1739,1743]},{"content":"Description","pos":[1744,1755]},{"content":"CMapStringToOb::GetCount","pos":[1794,1818]},{"content":"Returns the number of elements in this map.","pos":[1890,1933]},{"content":"CMapStringToOb::GetHashTableSize","pos":[1939,1971]},{"content":"Determines the current number of elements in the hash table.","pos":[2051,2111]},{"content":"CMapStringToOb::GetNextAssoc","pos":[2117,2145]},{"content":"Gets the next element for iterating.","pos":[2221,2257]},{"content":"CMapStringToOb::GetSize","pos":[2263,2286]},{"content":"Returns the number of elements in this map.","pos":[2357,2400]},{"content":"CMapStringToOb::GetStartPosition","pos":[2406,2438]},{"content":"Returns the position of the first element.","pos":[2518,2560]},{"content":"CMapStringToOb::HashKey","pos":[2566,2589]},{"content":"Calculates the hash value of a specified key.","pos":[2660,2705]},{"content":"CMapStringToOb::InitHashTable","pos":[2711,2740]},{"content":"Initializes the hash table.","pos":[2817,2844]},{"content":"CMapStringToOb::IsEmpty","pos":[2850,2873]},{"content":"Tests for the empty-map condition (no elements).","pos":[2944,2992]},{"content":"CMapStringToOb::Lookup","pos":[2998,3020]},{"content":"Looks up a void pointer based on the void pointer key.","pos":[3090,3144]},{"content":"The pointer value, not the entity it points to, is used for the key comparison.","pos":[3145,3224]},{"content":"CMapStringToOb::LookupKey","pos":[3230,3255]},{"content":"Returns a reference to the key associated with the specified key value.","pos":[3328,3399]},{"content":"CMapStringToOb::RemoveAll","pos":[3405,3430]},{"content":"Removes all the elements from this map.","pos":[3503,3542]},{"content":"CMapStringToOb::RemoveKey","pos":[3548,3573]},{"content":"Removes an element specified by a key.","pos":[3646,3684]},{"content":"CMapStringToOb::SetAt","pos":[3690,3711]},{"content":"Inserts an element into the map; replaces an existing element if a matching key is found.","pos":[3780,3869]},{"content":"Public Operators","pos":[3880,3896]},{"content":"Name","pos":[3903,3907]},{"content":"Description","pos":[3908,3919]},{"content":"CMapStringToOb::operator [ ]","pos":[3958,3986]},{"pos":[4061,4129],"content":"Inserts an element into the map — operator substitution for <ph id=\"ph1\">`SetAt`</ph>.","source":"Inserts an element into the map — operator substitution for `SetAt`."},{"content":"Remarks","pos":[4139,4146]},{"content":"incorporates the <ph id=\"ph1\">`IMPLEMENT_DYNAMIC`</ph> macro to support run-time type access and dumping to a <ph id=\"ph2\">`CDumpContext`</ph> object.","pos":[4166,4280],"source":" incorporates the `IMPLEMENT_DYNAMIC` macro to support run-time type access and dumping to a `CDumpContext` object."},{"content":"If you need a dump of individual map elements, you must set the depth of the dump context to 1 or greater.","pos":[4281,4387]},{"content":"Word-to-pointer maps may not be serialized.","pos":[4394,4437]},{"content":"When a <ph id=\"ph1\">`CMapWordToPtr`</ph> object is deleted, or when its elements are removed, the words and the pointers are removed.","pos":[4444,4559],"source":"When a `CMapWordToPtr` object is deleted, or when its elements are removed, the words and the pointers are removed."},{"content":"The entities referenced by the pointers are not removed.","pos":[4560,4616]},{"pos":[4623,4720],"content":"For more information on <ph id=\"ph1\">`CMapWordToPtr`</ph>, see the article <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept>.","source":"For more information on `CMapWordToPtr`, see the article [Collections](../../mfc/collections.md)."},{"content":"Inheritance Hierarchy","pos":[4729,4750]},{"content":"CObject","pos":[4755,4762]},{"content":"Requirements","pos":[4832,4844]},{"pos":[4848,4869],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcoll.h","source":"**Header:** afxcoll.h"},{"content":"See Also","pos":[4878,4886]},{"content":"CObject Class","pos":[4891,4904]},{"content":"Hierarchy Chart","pos":[4949,4964]}],"content":"---\ntitle: \"CMapWordToPtr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMapWordToPtr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"16-bit word mapping\"\n  - \"CMapWordToPtr class\"\nms.assetid: b204d87f-6427-43e1-93e3-a4b1bb41099f\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMapWordToPtr Class\nSupports maps of void pointers keyed by 16-bit words.  \n  \n## Syntax  \n  \n```  \nclass CMapWordToPtr : public CObject  \n```  \n  \n## Members  \n The member functions of `CMapWordToPtr` are similar to the member functions of class [CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md). Because of this similarity, you can use the `CMapStringToOb` reference documentation for member function specifics. Wherever you see a `CObject` pointer as a function parameter or return value, substitute a pointer to `void`. Wherever you see a `CString` or a **const** pointer to `char` as a function parameter or return value, substitute **WORD**.  \n  \n `BOOL CMapStringToOb::Lookup( const char* <key>,`  \n  \n `CObject*& <rValue> ) const;`  \n  \n for example, translates to  \n  \n `BOOL CMapWordToPtr::Lookup( WORD <key>, void*& <rValue> ) const;`  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::CMapStringToOb](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__cmapstringtoob)|Constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::GetCount](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getcount)|Returns the number of elements in this map.|  \n|[CMapStringToOb::GetHashTableSize](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__gethashtablesize)|Determines the current number of elements in the hash table.|  \n|[CMapStringToOb::GetNextAssoc](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getnextassoc)|Gets the next element for iterating.|  \n|[CMapStringToOb::GetSize](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getsize)|Returns the number of elements in this map.|  \n|[CMapStringToOb::GetStartPosition](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__getstartposition)|Returns the position of the first element.|  \n|[CMapStringToOb::HashKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__hashkey)|Calculates the hash value of a specified key.|  \n|[CMapStringToOb::InitHashTable](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__inithashtable)|Initializes the hash table.|  \n|[CMapStringToOb::IsEmpty](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__isempty)|Tests for the empty-map condition (no elements).|  \n|[CMapStringToOb::Lookup](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookup)|Looks up a void pointer based on the void pointer key. The pointer value, not the entity it points to, is used for the key comparison.|  \n|[CMapStringToOb::LookupKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__lookupkey)|Returns a reference to the key associated with the specified key value.|  \n|[CMapStringToOb::RemoveAll](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removeall)|Removes all the elements from this map.|  \n|[CMapStringToOb::RemoveKey](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__removekey)|Removes an element specified by a key.|  \n|[CMapStringToOb::SetAt](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__setat)|Inserts an element into the map; replaces an existing element if a matching key is found.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::operator [ ]](../../mfc/reference/cmapstringtoob-class.md#cmapstringtoob__operator_at)|Inserts an element into the map — operator substitution for `SetAt`.|  \n  \n## Remarks  \n `CMapWordToPtr` incorporates the `IMPLEMENT_DYNAMIC` macro to support run-time type access and dumping to a `CDumpContext` object. If you need a dump of individual map elements, you must set the depth of the dump context to 1 or greater.  \n  \n Word-to-pointer maps may not be serialized.  \n  \n When a `CMapWordToPtr` object is deleted, or when its elements are removed, the words and the pointers are removed. The entities referenced by the pointers are not removed.  \n  \n For more information on `CMapWordToPtr`, see the article [Collections](../../mfc/collections.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CMapWordToPtr`  \n  \n## Requirements  \n **Header:** afxcoll.h  \n  \n## See Also  \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}