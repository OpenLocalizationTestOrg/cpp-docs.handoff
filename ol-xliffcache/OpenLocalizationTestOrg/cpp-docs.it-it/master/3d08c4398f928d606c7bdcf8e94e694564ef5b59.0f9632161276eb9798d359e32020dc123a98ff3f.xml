{"nodes":[{"pos":[12,59],"content":"operator&lt; (deque) (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"operator<ph id=\"ph1\">&amp;lt;</ph> (deque) (STL-CLR) | Microsoft Docs","pos":[0,47],"source":"operator&lt; (deque) (STL-CLR) | Microsoft Docs"}]},{"content":"operator<ph id=\"ph1\">&amp;lt;</ph> (deque) (STL/CLR)","pos":[642,672],"source":"operator&lt; (deque) (STL/CLR)"},{"content":"Deque less than comparison.","pos":[673,700]},{"content":"Syntax","pos":[709,715]},{"content":"Parameters","pos":[841,851]},{"content":"left","pos":[855,859]},{"content":"Left container to compare.","pos":[863,889]},{"content":"right","pos":[896,901]},{"content":"Right container to compare.","pos":[905,932]},{"content":"Remarks","pos":[941,948]},{"content":"The operator function returns true if, for the lowest position <ph id=\"ph1\">`i`</ph> for which <ph id=\"ph2\">`!(``right``[i] &lt;`</ph> <ph id=\"ph3\">`left``[i])`</ph> it is also true that <ph id=\"ph4\">`left``[i] &lt;`</ph> <ph id=\"ph5\">`right``[i]`</ph>.","pos":[952,1109],"source":"The operator function returns true if, for the lowest position `i` for which `!(``right``[i] <` `left``[i])` it is also true that `left``[i] <` `right``[i]`."},{"content":"Otherwise, it returns <ph id=\"ph1\">`left``-&gt;size() &lt;`</ph> <ph id=\"ph2\">`right``-&gt;size()`</ph> You use it to test whether <ph id=\"ph3\">`left`</ph> is ordered before <ph id=\"ph4\">`right`</ph> when the two deques are compared element by element.","pos":[1110,1281],"source":" Otherwise, it returns `left``->size() <` `right``->size()` You use it to test whether `left` is ordered before `right` when the two deques are compared element by element."},{"content":"Example","pos":[1290,1297]},{"content":"Requirements","pos":[2310,2322]},{"pos":[2326,2353],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/deque&gt;","source":"**Header:** \\<cliext/deque>"},{"pos":[2360,2381],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2390,2398]},{"content":"deque (STL/CLR)","pos":[2403,2418]},{"content":"operator== (deque) (STL/CLR)","pos":[2453,2481]},{"content":"deque::operator!= (STL/CLR)","pos":[2534,2561]},{"content":"operator&gt;= (deque) (STL/CLR)","pos":[2616,2644],"source":"operator>= (deque) (STL/CLR)"},{"content":"operator&gt; (deque) (STL/CLR)","pos":[2705,2732],"source":"operator> (deque) (STL/CLR)"},{"content":"operator&lt;= (deque) (STL/CLR)","pos":[2789,2817],"source":"operator<= (deque) (STL/CLR)"}],"content":"---\ntitle: \"operator&lt; (deque) (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::deque::operator<\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator< member [STL/CLR]\"\nms.assetid: f2fa1bb1-bc0a-4e9e-826b-6b72a5543b29\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# operator&lt; (deque) (STL/CLR)\nDeque less than comparison.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Value>  \n    bool operator<(deque<Value>% left,  \n        deque<Value>% right);  \n```  \n  \n#### Parameters  \n left  \n Left container to compare.  \n  \n right  \n Right container to compare.  \n  \n## Remarks  \n The operator function returns true if, for the lowest position `i` for which `!(``right``[i] <` `left``[i])` it is also true that `left``[i] <` `right``[i]`. Otherwise, it returns `left``->size() <` `right``->size()` You use it to test whether `left` is ordered before `right` when the two deques are compared element by element.  \n  \n## Example  \n  \n```  \n// cliext_deque_operator_lt.cpp   \n// compile with: /clr   \n#include <cliext/deque>   \n  \nint main()   \n    {   \n    cliext::deque<wchar_t> c1;   \n    c1.push_back(L'a');   \n    c1.push_back(L'b');   \n    c1.push_back(L'c');   \n  \n// display contents \" a b c\"   \n    for each (wchar_t elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// assign to a new container   \n    cliext::deque<wchar_t> c2;   \n    c2.push_back(L'a');   \n    c2.push_back(L'b');   \n    c2.push_back(L'd');   \n  \n// display contents \" a b d\"   \n    for each (wchar_t elem in c2)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"[a b c] < [a b c] is {0}\",   \n        c1 < c1);   \n    System::Console::WriteLine(\"[a b c] < [a b d] is {0}\",   \n        c1 < c2);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \n a b d  \n[a b c] < [a b c] is False  \n[a b c] < [a b d] is True  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/deque>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [deque (STL/CLR)](../dotnet/deque-stl-clr.md)   \n [operator== (deque) (STL/CLR)](../dotnet/operator-equality-deque-stl-clr.md)   \n [deque::operator!= (STL/CLR)](../dotnet/deque-operator-inequality-stl-clr.md)   \n [operator>= (deque) (STL/CLR)](../dotnet/operator-greater-or-equal-deque-stl-clr.md)   \n [operator> (deque) (STL/CLR)](../dotnet/operator-greater-than-deque-stl-clr.md)   \n [operator<= (deque) (STL/CLR)](../dotnet/operator-less-or-equal-deque-stl-clr.md)"}