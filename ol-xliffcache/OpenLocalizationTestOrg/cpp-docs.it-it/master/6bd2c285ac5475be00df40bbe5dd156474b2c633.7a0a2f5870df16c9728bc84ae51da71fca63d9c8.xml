{"nodes":[{"pos":[12,47],"content":"target_block Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"target_block Class | Microsoft Docs","pos":[0,35]}]},{"pos":[628,646],"content":"target_block Class","linkify":"target_block Class","nodes":[{"content":"target_block Class","pos":[0,18]}]},{"pos":[647,790],"content":"The <ph id=\"ph1\">`target_block`</ph> class is an abstract base class that provides basic link management functionality and error checking for target only blocks.","source":"The `target_block` class is an abstract base class that provides basic link management functionality and error checking for target only blocks."},{"pos":[799,805],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1057,1067],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The link registry to be used for holding the source links.","pos":[1096,1154]},{"content":"The processor type for message processing.","pos":[1188,1230]},{"pos":[1239,1246],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1256,1271],"content":"Public Typedefs","linkify":"Public Typedefs","nodes":[{"content":"Public Typedefs","pos":[0,15]}]},{"content":"Name","pos":[1278,1282]},{"content":"Description","pos":[1283,1294]},{"pos":[1350,1436],"content":"The type of the iterator for the <ph id=\"ph1\">`source_link_manager`</ph> for this <ph id=\"ph2\">`target_block`</ph> object.","source":"The type of the iterator for the `source_link_manager` for this `target_block` object."},{"pos":[1447,1466],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1473,1477]},{"content":"Description","pos":[1478,1489]},{"pos":[1527,1574],"content":"<bpt id=\"p1\">[</bpt>target_block::target_block Constructor<ept id=\"p1\">](#ctor)</ept>","source":"[target_block::target_block Constructor](#ctor)"},{"pos":[1575,1610],"content":"Constructs a <ph id=\"ph1\">`target_block`</ph> object.","source":"Constructs a `target_block` object."},{"pos":[1615,1662],"content":"<bpt id=\"p1\">[</bpt>target_block::~target_block Destructor<ept id=\"p1\">](#dtor)</ept>","source":"[target_block::~target_block Destructor](#dtor)"},{"pos":[1663,1698],"content":"Destroys the <ph id=\"ph1\">`target_block`</ph> object.","source":"Destroys the `target_block` object."},{"pos":[1709,1723],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1730,1734]},{"content":"Description","pos":[1735,1746]},{"pos":[1784,1828],"content":"<bpt id=\"p1\">[</bpt>target_block::propagate Method<ept id=\"p1\">](#propagate)</ept>","source":"[target_block::propagate Method](#propagate)"},{"content":"Asynchronously passes a message from a source block to this target block.","pos":[1829,1902]},{"pos":[1907,1941],"content":"<bpt id=\"p1\">[</bpt>target_block::send Method<ept id=\"p1\">](#send)</ept>","source":"[target_block::send Method](#send)"},{"content":"Synchronously passes a message from a source block to this target block.","pos":[1942,2014]},{"pos":[2025,2042],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[2049,2053]},{"content":"Description","pos":[2054,2065]},{"pos":[2103,2149],"content":"<bpt id=\"p1\">[</bpt>target_block::async_send Method<ept id=\"p1\">](#async_send)</ept>","source":"[target_block::async_send Method](#async_send)"},{"content":"Asynchronously sends a message for processing.","pos":[2150,2196]},{"pos":[2201,2277],"content":"<bpt id=\"p1\">[</bpt>target_block::decline_incoming_messages Method<ept id=\"p1\">](#decline_incoming_messages)</ept>","source":"[target_block::decline_incoming_messages Method](#decline_incoming_messages)"},{"content":"Indicates to the block that new messages should be declined.","pos":[2278,2338]},{"pos":[2343,2419],"content":"<bpt id=\"p1\">[</bpt>target_block::enable_batched_processing Method<ept id=\"p1\">](#enable_batched_processing)</ept>","source":"[target_block::enable_batched_processing Method](#enable_batched_processing)"},{"content":"Enables batched processing for this block.","pos":[2420,2462]},{"pos":[2467,2527],"content":"<bpt id=\"p1\">[</bpt>target_block::initialize_target Method<ept id=\"p1\">](#initialize_target)</ept>","source":"[target_block::initialize_target Method](#initialize_target)"},{"content":"Initializes the base object.","pos":[2528,2556]},{"content":"Specifically, the <ph id=\"ph1\">`message_processor`</ph> object needs to be initialized.","pos":[2557,2626],"source":" Specifically, the `message_processor` object needs to be initialized."},{"pos":[2631,2679],"content":"<bpt id=\"p1\">[</bpt>target_block::link_source Method<ept id=\"p1\">](#link_source)</ept>","source":"[target_block::link_source Method](#link_source)"},{"pos":[2680,2741],"content":"Links a specified source block to this <ph id=\"ph1\">`target_block`</ph> object.","source":"Links a specified source block to this `target_block` object."},{"pos":[2746,2816],"content":"<bpt id=\"p1\">[</bpt>target_block::process_input_messages Method<ept id=\"p1\">](#process_input_messages)</ept>","source":"[target_block::process_input_messages Method](#process_input_messages)"},{"content":"Processes messages that are received as inputs.","pos":[2817,2864]},{"pos":[2869,2925],"content":"<bpt id=\"p1\">[</bpt>target_block::process_message Method<ept id=\"p1\">](#process_message)</ept>","source":"[target_block::process_message Method](#process_message)"},{"pos":[2926,3030],"content":"When overridden in a derived class, processes a message that was accepted by this <ph id=\"ph1\">`target_block`</ph> object.","source":"When overridden in a derived class, processes a message that was accepted by this `target_block` object."},{"pos":[3035,3095],"content":"<bpt id=\"p1\">[</bpt>target_block::propagate_message Method<ept id=\"p1\">](#propagate_message)</ept>","source":"[target_block::propagate_message Method](#propagate_message)"},{"content":"When overridden in a derived class, this method asynchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`target_block`</ph> object.","pos":[3096,3230],"source":"When overridden in a derived class, this method asynchronously passes a message from an `ISource` block to this `target_block` object."},{"content":"It is invoked by the <ph id=\"ph1\">`propagate`</ph> method, when called by a source block.","pos":[3231,3302],"source":" It is invoked by the `propagate` method, when called by a source block."},{"pos":[3307,3363],"content":"<bpt id=\"p1\">[</bpt>target_block::register_filter Method<ept id=\"p1\">](#register_filter)</ept>","source":"[target_block::register_filter Method](#register_filter)"},{"content":"Registers a filter method that will be invoked on every message received.","pos":[3364,3437]},{"pos":[3442,3496],"content":"<bpt id=\"p1\">[</bpt>target_block::remove_sources Method<ept id=\"p1\">](#remove_sources)</ept>","source":"[target_block::remove_sources Method](#remove_sources)"},{"content":"Unlinks all sources after waiting for outstanding asynchronous send operations to complete.","pos":[3497,3588]},{"pos":[3593,3643],"content":"<bpt id=\"p1\">[</bpt>target_block::send_message Method<ept id=\"p1\">](#send_message)</ept>","source":"[target_block::send_message Method](#send_message)"},{"content":"When overridden in a derived class, this method synchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`target_block`</ph> object.","pos":[3644,3777],"source":"When overridden in a derived class, this method synchronously passes a message from an `ISource` block to this `target_block` object."},{"content":"It is invoked by the <ph id=\"ph1\">`send`</ph> method, when called by a source block.","pos":[3778,3844],"source":" It is invoked by the `send` method, when called by a source block."},{"pos":[3849,3893],"content":"<bpt id=\"p1\">[</bpt>target_block::sync_send Method<ept id=\"p1\">](#sync_send)</ept>","source":"[target_block::sync_send Method](#sync_send)"},{"content":"Synchronously send a message for processing.","pos":[3894,3938]},{"pos":[3943,3995],"content":"<bpt id=\"p1\">[</bpt>target_block::unlink_source Method<ept id=\"p1\">](#unlink_source)</ept>","source":"[target_block::unlink_source Method](#unlink_source)"},{"pos":[3996,4061],"content":"Unlinks a specified source block from this <ph id=\"ph1\">`target_block`</ph> object.","source":"Unlinks a specified source block from this `target_block` object."},{"pos":[4066,4120],"content":"<bpt id=\"p1\">[</bpt>target_block::unlink_sources Method<ept id=\"p1\">](#unlink_sources)</ept>","source":"[target_block::unlink_sources Method](#unlink_sources)"},{"content":"Unlinks all source blocks from this <ph id=\"ph1\">`target_block`</ph> object.","pos":[4121,4179],"source":"Unlinks all source blocks from this `target_block` object."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>ITarget::unlink_sources<ept id=\"p1\">](itarget-class.md#unlink_sources)</ept>.)","pos":[4180,4251],"source":" (Overrides [ITarget::unlink_sources](itarget-class.md#unlink_sources).)"},{"pos":[4256,4322],"content":"<bpt id=\"p1\">[</bpt>target_block::wait_for_async_sends Method<ept id=\"p1\">](#wait_for_async_sends)</ept>","source":"[target_block::wait_for_async_sends Method](#wait_for_async_sends)"},{"content":"Waits for all asynchronous propagations to complete.","pos":[4323,4375]},{"pos":[4385,4406],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4410,4437],"content":"<bpt id=\"p1\">[</bpt>ITarget<ept id=\"p1\">](itarget-class.md)</ept>","source":"[ITarget](itarget-class.md)"},{"pos":[4467,4479],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4483,4503],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[4510,4536],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[4546,4604],"content":"<bpt id=\"p1\">&lt;a name=\"async_send\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::async_send Method","linkify":"<a name=\"async_send\"></a>  target_block::async_send Method","source":"<a name=\"async_send\"></a>  target_block::async_send Method"},{"content":"Asynchronously sends a message for processing.","pos":[4608,4654]},{"pos":[4740,4750],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the message being sent.","pos":[4769,4805]},{"pos":[4815,4903],"content":"<bpt id=\"p1\">&lt;a name=\"decline_incoming_messages\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::decline_incoming_messages Method","linkify":"<a name=\"decline_incoming_messages\"></a>  target_block::decline_incoming_messages Method","source":"<a name=\"decline_incoming_messages\"></a>  target_block::decline_incoming_messages Method"},{"content":"Indicates to the block that new messages should be declined.","pos":[4907,4967]},{"pos":[5024,5031],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the destructor to ensure that new messages are declined while destruction is in progress.","pos":[5035,5149]},{"pos":[5159,5247],"content":"<bpt id=\"p1\">&lt;a name=\"enable_batched_processing\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::enable_batched_processing Method","linkify":"<a name=\"enable_batched_processing\"></a>  target_block::enable_batched_processing Method","source":"<a name=\"enable_batched_processing\"></a>  target_block::enable_batched_processing Method"},{"content":"Enables batched processing for this block.","pos":[5251,5293]},{"pos":[5350,5422],"content":"<bpt id=\"p1\">&lt;a name=\"initialize_target\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::initialize_target Method","linkify":"<a name=\"initialize_target\"></a>  target_block::initialize_target Method","source":"<a name=\"initialize_target\"></a>  target_block::initialize_target Method"},{"content":"Initializes the base object.","pos":[5426,5454]},{"content":"Specifically, the <ph id=\"ph1\">`message_processor`</ph> object needs to be initialized.","pos":[5455,5524],"source":" Specifically, the `message_processor` object needs to be initialized."},{"pos":[5674,5684],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The scheduler to be used for scheduling tasks.","pos":[5705,5751]},{"content":"The schedule group to be used for scheduling tasks.","pos":[5779,5830]},{"pos":[5840,5900],"content":"<bpt id=\"p1\">&lt;a name=\"link_source\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::link_source Method","linkify":"<a name=\"link_source\"></a>  target_block::link_source Method","source":"<a name=\"link_source\"></a>  target_block::link_source Method"},{"pos":[5904,5965],"content":"Links a specified source block to this <ph id=\"ph1\">`target_block`</ph> object.","source":"Links a specified source block to this `target_block` object."},{"pos":[6055,6065],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the <ph id=\"ph1\">`ISource`</ph> block that is to be linked.","pos":[6083,6137],"source":" A pointer to the `ISource` block that is to be linked."},{"pos":[6147,6154],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function should not be called directly on a <ph id=\"ph1\">`target_block`</ph> object.","pos":[6158,6229],"source":"This function should not be called directly on a `target_block` object."},{"content":"Blocks should be connected together using the <ph id=\"ph1\">`link_target`</ph> method on <ph id=\"ph2\">`ISource`</ph> blocks, which will invoke the <ph id=\"ph3\">`link_source`</ph> method on the corresponding target.","pos":[6230,6389],"source":" Blocks should be connected together using the `link_target` method on `ISource` blocks, which will invoke the `link_source` method on the corresponding target."},{"pos":[6399,6481],"content":"<bpt id=\"p1\">&lt;a name=\"process_input_messages\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::process_input_messages Method","linkify":"<a name=\"process_input_messages\"></a>  target_block::process_input_messages Method","source":"<a name=\"process_input_messages\"></a>  target_block::process_input_messages Method"},{"content":"Processes messages that are received as inputs.","pos":[6485,6532]},{"pos":[6634,6644],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[6669,6737],"content":"<bpt id=\"p1\">&lt;a name=\"process_message\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::process_message Method","linkify":"<a name=\"process_message\"></a>  target_block::process_message Method","source":"<a name=\"process_message\"></a>  target_block::process_message Method"},{"pos":[6741,6845],"content":"When overridden in a derived class, processes a message that was accepted by this <ph id=\"ph1\">`target_block`</ph> object.","source":"When overridden in a derived class, processes a message that was accepted by this `target_block` object."},{"pos":[6923,6979],"content":"<bpt id=\"p1\">&lt;a name=\"propagate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::propagate Method","linkify":"<a name=\"propagate\"></a>  target_block::propagate Method","source":"<a name=\"propagate\"></a>  target_block::propagate Method"},{"content":"Asynchronously passes a message from a source block to this target block.","pos":[6983,7056]},{"pos":[7213,7223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[7242,7276],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[7297,7348]},{"pos":[7358,7370],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7374,7486],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"pos":[7496,7503],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7507,7670],"content":"The method throws an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception if either the <ph id=\"ph1\">`_PMessage`</ph> or <ph id=\"ph2\">`_PSource`</ph> parameter is <ph id=\"ph3\">`NULL`</ph>.","source":"The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if either the `_PMessage` or `_PSource` parameter is `NULL`."},{"pos":[7680,7752],"content":"<bpt id=\"p1\">&lt;a name=\"propagate_message\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::propagate_message Method","linkify":"<a name=\"propagate_message\"></a>  target_block::propagate_message Method","source":"<a name=\"propagate_message\"></a>  target_block::propagate_message Method"},{"content":"When overridden in a derived class, this method asynchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`target_block`</ph> object.","pos":[7756,7890],"source":"When overridden in a derived class, this method asynchronously passes a message from an `ISource` block to this `target_block` object."},{"content":"It is invoked by the <ph id=\"ph1\">`propagate`</ph> method, when called by a source block.","pos":[7891,7962],"source":" It is invoked by the `propagate` method, when called by a source block."},{"pos":[8123,8133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[8152,8186],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[8207,8258]},{"pos":[8268,8280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8284,8396],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"pos":[8406,8474],"content":"<bpt id=\"p1\">&lt;a name=\"register_filter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::register_filter Method","linkify":"<a name=\"register_filter\"></a>  target_block::register_filter Method","source":"<a name=\"register_filter\"></a>  target_block::register_filter Method"},{"content":"Registers a filter method that will be invoked on every message received.","pos":[8478,8551]},{"pos":[8626,8636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The filter method.","pos":[8653,8671]},{"pos":[8681,8747],"content":"<bpt id=\"p1\">&lt;a name=\"remove_sources\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::remove_sources Method","linkify":"<a name=\"remove_sources\"></a>  target_block::remove_sources Method","source":"<a name=\"remove_sources\"></a>  target_block::remove_sources Method"},{"content":"Unlinks all sources after waiting for outstanding asynchronous send operations to complete.","pos":[8751,8842]},{"pos":[8888,8895],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"All target blocks should call this routine to remove the sources in their destructor.","pos":[8899,8984]},{"pos":[8994,9040],"content":"<bpt id=\"p1\">&lt;a name=\"send\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::send Method","linkify":"<a name=\"send\"></a>  target_block::send Method","source":"<a name=\"send\"></a>  target_block::send Method"},{"content":"Synchronously passes a message from a source block to this target block.","pos":[9044,9116]},{"pos":[9260,9270],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[9289,9323],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[9344,9395]},{"pos":[9405,9417],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9421,9533],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"pos":[9543,9550],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9554,9717],"content":"The method throws an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception if either the <ph id=\"ph1\">`_PMessage`</ph> or <ph id=\"ph2\">`_PSource`</ph> parameter is <ph id=\"ph3\">`NULL`</ph>.","source":"The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if either the `_PMessage` or `_PSource` parameter is `NULL`."},{"pos":[9724,9859],"content":"Using the <ph id=\"ph1\">`send`</ph> method outside of message initiation and to propagate messages within a network is dangerous and can lead to deadlock.","source":"Using the `send` method outside of message initiation and to propagate messages within a network is dangerous and can lead to deadlock."},{"pos":[9866,10010],"content":"When <ph id=\"ph1\">`send`</ph> returns, the message has either already been accepted, and transferred into the target block, or it has been declined by the target.","source":"When `send` returns, the message has either already been accepted, and transferred into the target block, or it has been declined by the target."},{"pos":[10020,10082],"content":"<bpt id=\"p1\">&lt;a name=\"send_message\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::send_message Method","linkify":"<a name=\"send_message\"></a>  target_block::send_message Method","source":"<a name=\"send_message\"></a>  target_block::send_message Method"},{"content":"When overridden in a derived class, this method synchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`target_block`</ph> object.","pos":[10086,10219],"source":"When overridden in a derived class, this method synchronously passes a message from an `ISource` block to this `target_block` object."},{"content":"It is invoked by the <ph id=\"ph1\">`send`</ph> method, when called by a source block.","pos":[10220,10286],"source":" It is invoked by the `send` method, when called by a source block."},{"pos":[10421,10433],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10437,10549],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"pos":[10559,10566],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10570,10649],"content":"By default, this block returns <ph id=\"ph1\">`declined`</ph> unless overridden by a derived class.","source":"By default, this block returns `declined` unless overridden by a derived class."},{"pos":[10659,10715],"content":"<bpt id=\"p1\">&lt;a name=\"sync_send\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::sync_send Method","linkify":"<a name=\"sync_send\"></a>  target_block::sync_send Method","source":"<a name=\"sync_send\"></a>  target_block::sync_send Method"},{"content":"Synchronously send a message for processing.","pos":[10719,10763]},{"pos":[10848,10858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the message being sent.","pos":[10877,10913]},{"pos":[10923,10982],"content":"<bpt id=\"p1\">&lt;a name=\"ctor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::target_block Constructor","linkify":"<a name=\"ctor\"></a>  target_block::target_block Constructor","source":"<a name=\"ctor\"></a>  target_block::target_block Constructor"},{"pos":[10986,11021],"content":"Constructs a <ph id=\"ph1\">`target_block`</ph> object.","source":"Constructs a `target_block` object."},{"pos":[11060,11119],"content":"<bpt id=\"p1\">&lt;a name=\"dtor\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::~target_block Destructor","linkify":"<a name=\"dtor\"></a>  target_block::~target_block Destructor","source":"<a name=\"dtor\"></a>  target_block::~target_block Destructor"},{"pos":[11123,11158],"content":"Destroys the <ph id=\"ph1\">`target_block`</ph> object.","source":"Destroys the `target_block` object."},{"pos":[11206,11270],"content":"<bpt id=\"p1\">&lt;a name=\"unlink_source\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::unlink_source Method","linkify":"<a name=\"unlink_source\"></a>  target_block::unlink_source Method","source":"<a name=\"unlink_source\"></a>  target_block::unlink_source Method"},{"pos":[11274,11339],"content":"Unlinks a specified source block from this <ph id=\"ph1\">`target_block`</ph> object.","source":"Unlinks a specified source block from this `target_block` object."},{"pos":[11431,11441],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to the <ph id=\"ph1\">`ISource`</ph> block that is to be unlinked.","pos":[11459,11515],"source":" A pointer to the `ISource` block that is to be unlinked."},{"pos":[11525,11591],"content":"<bpt id=\"p1\">&lt;a name=\"unlink_sources\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::unlink_sources Method","linkify":"<a name=\"unlink_sources\"></a>  target_block::unlink_sources Method","source":"<a name=\"unlink_sources\"></a>  target_block::unlink_sources Method"},{"pos":[11595,11653],"content":"Unlinks all source blocks from this <ph id=\"ph1\">`target_block`</ph> object.","source":"Unlinks all source blocks from this `target_block` object."},{"pos":[11707,11785],"content":"<bpt id=\"p1\">&lt;a name=\"wait_for_async_sends\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  target_block::wait_for_async_sends Method","linkify":"<a name=\"wait_for_async_sends\"></a>  target_block::wait_for_async_sends Method","source":"<a name=\"wait_for_async_sends\"></a>  target_block::wait_for_async_sends Method"},{"content":"Waits for all asynchronous propagations to complete.","pos":[11789,11841]},{"pos":[11893,11900],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by message block destructors to ensure all asynchronous operations have had time to finish before destroying the block.","pos":[11904,12043]},{"pos":[12052,12060],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>concurrency Namespace<ept id=\"p1\">](concurrency-namespace.md)</ept><ph id=\"ph1\"> </ph>","pos":[12064,12114],"source":"[concurrency Namespace](concurrency-namespace.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ITarget Class<ept id=\"p1\">](itarget-class.md)</ept>","pos":[12117,12151],"source":" [ITarget Class](itarget-class.md)"}],"content":"---\ntitle: \"target_block Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::target_block\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"target_block class\"\nms.assetid: 3ce181b4-b94a-4894-bf7b-64fc09821f9f\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# target_block Class\nThe `target_block` class is an abstract base class that provides basic link management functionality and error checking for target only blocks.  \n  \n## Syntax  \n  \n```\ntemplate<class _SourceLinkRegistry, class _MessageProcessorType = ordered_message_processor<typename _SourceLinkRegistry::type::source_type>>\nclass target_block : public ITarget<typename _SourceLinkRegistry::type::source_type>;\n```  \n  \n#### Parameters  \n `_SourceLinkRegistry`  \n The link registry to be used for holding the source links.  \n  \n `_MessageProcessorType`  \n The processor type for message processing.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`source_iterator`|The type of the iterator for the `source_link_manager` for this `target_block` object.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[target_block::target_block Constructor](#ctor)|Constructs a `target_block` object.|  \n|[target_block::~target_block Destructor](#dtor)|Destroys the `target_block` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[target_block::propagate Method](#propagate)|Asynchronously passes a message from a source block to this target block.|  \n|[target_block::send Method](#send)|Synchronously passes a message from a source block to this target block.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[target_block::async_send Method](#async_send)|Asynchronously sends a message for processing.|  \n|[target_block::decline_incoming_messages Method](#decline_incoming_messages)|Indicates to the block that new messages should be declined.|  \n|[target_block::enable_batched_processing Method](#enable_batched_processing)|Enables batched processing for this block.|  \n|[target_block::initialize_target Method](#initialize_target)|Initializes the base object. Specifically, the `message_processor` object needs to be initialized.|  \n|[target_block::link_source Method](#link_source)|Links a specified source block to this `target_block` object.|  \n|[target_block::process_input_messages Method](#process_input_messages)|Processes messages that are received as inputs.|  \n|[target_block::process_message Method](#process_message)|When overridden in a derived class, processes a message that was accepted by this `target_block` object.|  \n|[target_block::propagate_message Method](#propagate_message)|When overridden in a derived class, this method asynchronously passes a message from an `ISource` block to this `target_block` object. It is invoked by the `propagate` method, when called by a source block.|  \n|[target_block::register_filter Method](#register_filter)|Registers a filter method that will be invoked on every message received.|  \n|[target_block::remove_sources Method](#remove_sources)|Unlinks all sources after waiting for outstanding asynchronous send operations to complete.|  \n|[target_block::send_message Method](#send_message)|When overridden in a derived class, this method synchronously passes a message from an `ISource` block to this `target_block` object. It is invoked by the `send` method, when called by a source block.|  \n|[target_block::sync_send Method](#sync_send)|Synchronously send a message for processing.|  \n|[target_block::unlink_source Method](#unlink_source)|Unlinks a specified source block from this `target_block` object.|  \n|[target_block::unlink_sources Method](#unlink_sources)|Unlinks all source blocks from this `target_block` object. (Overrides [ITarget::unlink_sources](itarget-class.md#unlink_sources).)|  \n|[target_block::wait_for_async_sends Method](#wait_for_async_sends)|Waits for all asynchronous propagations to complete.|  \n  \n## Inheritance Hierarchy  \n [ITarget](itarget-class.md)  \n  \n `target_block`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"async_send\"></a>  target_block::async_send Method  \n Asynchronously sends a message for processing.  \n  \n```\nvoid async_send(_Inout_opt_ message<_Source_type>* _PMessage);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the message being sent.  \n  \n##  <a name=\"decline_incoming_messages\"></a>  target_block::decline_incoming_messages Method  \n Indicates to the block that new messages should be declined.  \n  \n```\nvoid decline_incoming_messages();\n```  \n  \n### Remarks  \n This method is called by the destructor to ensure that new messages are declined while destruction is in progress.  \n  \n##  <a name=\"enable_batched_processing\"></a>  target_block::enable_batched_processing Method  \n Enables batched processing for this block.  \n  \n```\nvoid enable_batched_processing();\n```  \n  \n##  <a name=\"initialize_target\"></a>  target_block::initialize_target Method  \n Initializes the base object. Specifically, the `message_processor` object needs to be initialized.  \n  \n```\nvoid initialize_target(\n    _Inout_opt_ Scheduler* _PScheduler = NULL,\n    _Inout_opt_ ScheduleGroup* _PScheduleGroup = NULL);\n```  \n  \n### Parameters  \n `_PScheduler`  \n The scheduler to be used for scheduling tasks.  \n  \n `_PScheduleGroup`  \n The schedule group to be used for scheduling tasks.  \n  \n##  <a name=\"link_source\"></a>  target_block::link_source Method  \n Links a specified source block to this `target_block` object.  \n  \n```\nvirtual void link_source(_Inout_ ISource<_Source_type>* _PSource);\n```  \n  \n### Parameters  \n `_PSource`  \n A pointer to the `ISource` block that is to be linked.  \n  \n### Remarks  \n This function should not be called directly on a `target_block` object. Blocks should be connected together using the `link_target` method on `ISource` blocks, which will invoke the `link_source` method on the corresponding target.  \n  \n##  <a name=\"process_input_messages\"></a>  target_block::process_input_messages Method  \n Processes messages that are received as inputs.  \n  \n```\nvirtual void process_input_messages(_Inout_ message<_Source_type>* _PMessage);\n```  \n  \n### Parameters  \n `_PMessage`  \n  \n##  <a name=\"process_message\"></a>  target_block::process_message Method  \n When overridden in a derived class, processes a message that was accepted by this `target_block` object.  \n  \n```\nvirtual void process_message(message<_Source_type> *);\n```  \n  \n##  <a name=\"propagate\"></a>  target_block::propagate Method  \n Asynchronously passes a message from a source block to this target block.  \n  \n```\nvirtual message_status propagate(\n    _Inout_opt_ message<_Source_type>* _PMessage,\n    _Inout_opt_ ISource<_Source_type>* _PSource);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n### Remarks  \n The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if either the `_PMessage` or `_PSource` parameter is `NULL`.  \n  \n##  <a name=\"propagate_message\"></a>  target_block::propagate_message Method  \n When overridden in a derived class, this method asynchronously passes a message from an `ISource` block to this `target_block` object. It is invoked by the `propagate` method, when called by a source block.  \n  \n```\nvirtual message_status propagate_message(\n    _Inout_ message<_Source_type>* _PMessage,\n    _Inout_ ISource<_Source_type>* _PSource) = 0;\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n##  <a name=\"register_filter\"></a>  target_block::register_filter Method  \n Registers a filter method that will be invoked on every message received.  \n  \n```\nvoid register_filter(filter_method const& _Filter);\n```  \n  \n### Parameters  \n `_Filter`  \n The filter method.  \n  \n##  <a name=\"remove_sources\"></a>  target_block::remove_sources Method  \n Unlinks all sources after waiting for outstanding asynchronous send operations to complete.  \n  \n```\nvoid remove_sources();\n```  \n  \n### Remarks  \n All target blocks should call this routine to remove the sources in their destructor.  \n  \n##  <a name=\"send\"></a>  target_block::send Method  \n Synchronously passes a message from a source block to this target block.  \n  \n```\nvirtual message_status send(\n    _Inout_ message<_Source_type>* _PMessage,\n    _Inout_ ISource<_Source_type>* _PSource);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n### Remarks  \n The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if either the `_PMessage` or `_PSource` parameter is `NULL`.  \n  \n Using the `send` method outside of message initiation and to propagate messages within a network is dangerous and can lead to deadlock.  \n  \n When `send` returns, the message has either already been accepted, and transferred into the target block, or it has been declined by the target.  \n  \n##  <a name=\"send_message\"></a>  target_block::send_message Method  \n When overridden in a derived class, this method synchronously passes a message from an `ISource` block to this `target_block` object. It is invoked by the `send` method, when called by a source block.  \n  \n```\nvirtual message_status send_message(\n    _Inout_ message<_Source_type> *,\n    _Inout_ ISource<_Source_type> *);\n```  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n### Remarks  \n By default, this block returns `declined` unless overridden by a derived class.  \n  \n##  <a name=\"sync_send\"></a>  target_block::sync_send Method  \n Synchronously send a message for processing.  \n  \n```\nvoid sync_send(_Inout_opt_ message<_Source_type>* _PMessage);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the message being sent.  \n  \n##  <a name=\"ctor\"></a>  target_block::target_block Constructor  \n Constructs a `target_block` object.  \n  \n```\ntarget_block();\n```  \n  \n##  <a name=\"dtor\"></a>  target_block::~target_block Destructor  \n Destroys the `target_block` object.  \n  \n```\nvirtual ~target_block();\n```  \n  \n##  <a name=\"unlink_source\"></a>  target_block::unlink_source Method  \n Unlinks a specified source block from this `target_block` object.  \n  \n```\nvirtual void unlink_source(_Inout_ ISource<_Source_type>* _PSource);\n```  \n  \n### Parameters  \n `_PSource`  \n A pointer to the `ISource` block that is to be unlinked.  \n  \n##  <a name=\"unlink_sources\"></a>  target_block::unlink_sources Method  \n Unlinks all source blocks from this `target_block` object.  \n  \n```\nvirtual void unlink_sources();\n```  \n  \n##  <a name=\"wait_for_async_sends\"></a>  target_block::wait_for_async_sends Method  \n Waits for all asynchronous propagations to complete.  \n  \n```\nvoid wait_for_async_sends();\n```  \n  \n### Remarks  \n This method is used by message block destructors to ensure all asynchronous operations have had time to finish before destroying the block.  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [ITarget Class](itarget-class.md)\n"}