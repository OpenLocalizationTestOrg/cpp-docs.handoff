{"nodes":[{"pos":[12,35],"content":"_msize | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_msize | Microsoft Docs","pos":[0,23]}]},{"content":"_msize","pos":[953,959]},{"content":"Returns the size of a memory block allocated in the heap.","pos":[960,1017]},{"content":"Syntax","pos":[1026,1032]},{"content":"Parameters","pos":[1110,1120]},{"content":"Pointer to the memory block.","pos":[1138,1166]},{"content":"Return Value","pos":[1175,1187]},{"pos":[1200,1251],"content":"returns the size (in bytes) as an unsigned integer."},{"content":"Remarks","pos":[1260,1267]},{"pos":[1271,1397],"content":"The <ph id=\"ph1\">`_msize`</ph> function returns the size, in bytes, of the memory block allocated by a call to <ph id=\"ph2\">`calloc`</ph>, <ph id=\"ph3\">`malloc`</ph>, or <ph id=\"ph4\">`realloc`</ph>.","source":"The `_msize` function returns the size, in bytes, of the memory block allocated by a call to `calloc`, `malloc`, or `realloc`."},{"content":"When the application is linked with a debug version of the C run-time libraries, <ph id=\"ph1\">`_msize`</ph> resolves to <bpt id=\"p1\">[</bpt>_msize_dbg<ept id=\"p1\">](../../c-runtime-library/reference/msize-dbg.md)</ept>.","pos":[1404,1567],"source":"When the application is linked with a debug version of the C run-time libraries, `_msize` resolves to [_msize_dbg](../../c-runtime-library/reference/msize-dbg.md)."},{"content":"For more information about how the heap is managed during the debugging process, see <bpt id=\"p1\">[</bpt>The CRT Debug Heap<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[1568,1721],"source":" For more information about how the heap is managed during the debugging process, see [The CRT Debug Heap](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"This function validates its parameter.","pos":[1728,1766]},{"content":"If <ph id=\"ph1\">`memblock`</ph> is a null pointer, <ph id=\"ph2\">`_msize`</ph> invokes an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1767,1935],"source":" If `memblock` is a null pointer, `_msize` invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If the error is handled, the function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns -1.","pos":[1936,2014],"source":" If the error is handled, the function sets `errno` to `EINVAL` and returns -1."},{"content":"Requirements","pos":[2023,2035]},{"content":"Routine","pos":[2042,2049]},{"content":"Required header","pos":[2050,2065]},{"content":"malloc.h&gt;","pos":[2121,2130],"source":"malloc.h>"},{"pos":[2138,2256],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[2265,2274]},{"pos":[2278,2370],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"content":"Example","pos":[2379,2386]},{"pos":[2390,2466],"content":"See the example for <bpt id=\"p1\">[</bpt>realloc<ept id=\"p1\">](../../c-runtime-library/reference/realloc.md)</ept>.","source":"See the example for [realloc](../../c-runtime-library/reference/realloc.md)."},{"content":".NET Framework Equivalent","pos":[2475,2500]},{"content":"Not applicable.","pos":[2504,2519]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[2520,2567],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[2568,2693],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[2702,2710]},{"content":"Memory Allocation","pos":[2715,2732]},{"content":"calloc","pos":[2785,2791]},{"content":"_expand","pos":[2843,2850]},{"content":"malloc","pos":[2902,2908]},{"content":"realloc","pos":[2960,2967]}],"content":"---\ntitle: \"_msize | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_msize\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-heap-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"msize\"\n  - \"_msize\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"memory blocks\"\n  - \"msize function\"\n  - \"_msize function\"\nms.assetid: 02b1f89e-d0d7-4f12-938a-9eeba48a0f88\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _msize\nReturns the size of a memory block allocated in the heap.  \n  \n## Syntax  \n  \n```  \n  \n      size_t _msize(  \n   void *memblock   \n);  \n```  \n  \n#### Parameters  \n `memblock`  \n Pointer to the memory block.  \n  \n## Return Value  \n `_msize` returns the size (in bytes) as an unsigned integer.  \n  \n## Remarks  \n The `_msize` function returns the size, in bytes, of the memory block allocated by a call to `calloc`, `malloc`, or `realloc`.  \n  \n When the application is linked with a debug version of the C run-time libraries, `_msize` resolves to [_msize_dbg](../../c-runtime-library/reference/msize-dbg.md). For more information about how the heap is managed during the debugging process, see [The CRT Debug Heap](/visualstudio/debugger/crt-debug-heap-details).  \n  \n This function validates its parameter. If `memblock` is a null pointer, `_msize` invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If the error is handled, the function sets `errno` to `EINVAL` and returns -1.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_msize`|\\<malloc.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n See the example for [realloc](../../c-runtime-library/reference/realloc.md).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Memory Allocation](../../c-runtime-library/memory-allocation.md)   \n [calloc](../../c-runtime-library/reference/calloc.md)   \n [_expand](../../c-runtime-library/reference/expand.md)   \n [malloc](../../c-runtime-library/reference/malloc.md)   \n [realloc](../../c-runtime-library/reference/realloc.md)"}