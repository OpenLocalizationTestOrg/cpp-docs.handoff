<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16be5003d38f5aa26a98ee13eb37e6ff2ce7d474</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\for-statement-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">adac65365a9f5ba86fe23d238d785339e1b4b3e6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5136267e0e69d83ea56a24354600bc6f24619eca</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>for Statement (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>for Statement (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Executes a statement repeatedly until the condition becomes false.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For information on the range-based for statement, see <bpt id="p1">[</bpt>Range-based for Statement (C++)<ept id="p1">](../cpp/range-based-for-statement-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`for`</ph> statement to construct loops that must execute a specified number of times.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`for`</ph> statement consists of three optional parts, as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>for Loop Elements</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Syntax Name</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When Executed</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Before any other element of the <bpt id="p1">**</bpt>for<ept id="p1">**</ept> statement, <ph id="ph1">`init-expression`</ph> is executed only once.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Control then passes to <ph id="ph1">`cond-expression`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Often used to initialize loop indices.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It can contain expressions or declarations.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Before execution of each iteration of <ph id="ph1">`statement`</ph>, including the first iteration.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>is executed only if <ph id="ph1">`cond-expression`</ph> evaluates to true (nonzero).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An expression that evaluates to an integral type or a class type that has an unambiguous conversion to an integral type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Normally used to test for loop-termination criteria.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>At the end of each iteration of <ph id="ph1">`statement`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>After <ph id="ph1">`loop-expression`</ph> is executed, <ph id="ph2">`cond-expression`</ph> is evaluated.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Normally used to increment loop indices.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following examples show different ways to use the <ph id="ph1">`for`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`loop-expression`</ph> can contain multiple statements separated by commas.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>can be incremented or decremented, or modified in other ways.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`for`</ph> loop terminates when a <bpt id="p1">[</bpt>break<ept id="p1">](../cpp/break-statement-cpp.md)</ept>, <bpt id="p2">[</bpt>return<ept id="p2">](../cpp/return-statement-cpp.md)</ept>, or <bpt id="p3">[</bpt>goto<ept id="p3">](../cpp/goto-statement-cpp.md)</ept> (to a labeled statement outside the <bpt id="p4">**</bpt>for<ept id="p4">**</ept> loop) within <ph id="ph2">`statement`</ph> is executed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>continue<ept id="p1">](../cpp/continue-statement-cpp.md)</ept> statement in a <ph id="ph1">`for`</ph> loop terminates only the current iteration.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`cond-expression`</ph> is omitted, it is considered true and the <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop will not terminate without a <ph id="ph2">`break`</ph>, <ph id="ph3">`return`</ph>, or <ph id="ph4">`goto`</ph> within <ph id="ph5">`statement`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although the three fields of the <ph id="ph1">`for`</ph> statement are normally used for initialization, testing for termination, and incrementing, they are not restricted to these uses.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the following code prints the numbers 0 through 4.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`statement`</ph> is the null statement:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>for Loops and the C++ Standard</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The C++ standard says that a variable declared in a <ph id="ph1">`for`</ph> loop shall go out of scope after the <ph id="ph2">`for`</ph> loop ends.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>By default, under <bpt id="p1">[</bpt>/Ze<ept id="p1">](../build/reference/za-ze-disable-language-extensions.md)</ept>, a variable declared in a <ph id="ph1">`for`</ph> loop remains in scope until the <ph id="ph2">`for`</ph> loop's enclosing scope ends.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/Zc:forScope<ept id="p1">](../build/reference/zc-forscope-force-conformance-in-for-loop-scope.md)</ept> enables standard behavior of variables declared in for loops without needing to specify /Za.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It is also possible to use the scoping differences of the <ph id="ph1">`for`</ph> loop to redeclare variables under /Ze as follows:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This more closely mimics the standard behavior of a variable declared in a <ph id="ph1">`for`</ph> loop, which requires variables declared in a <ph id="ph2">`for`</ph> loop to go out of scope after the loop is done.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When a variable is declared in a <ph id="ph1">`for`</ph> loop, the compiler internally promotes it to a local variable in the <ph id="ph2">`for`</ph> loop's enclosing scope even if there is already a local variable with the same name.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Iteration Statements</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>while Statement (C++)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>do-while Statement (C++)</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Range-based for Statement (C++)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>