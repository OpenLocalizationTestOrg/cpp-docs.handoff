{"nodes":[{"pos":[12,55],"content":"C Floating-Point Constants | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C Floating-Point Constants | Microsoft Docs","pos":[0,43]}]},{"content":"C Floating-Point Constants","pos":[823,849]},{"content":"A \"floating-point constant\" is a decimal number that represents a signed real number.","pos":[850,935]},{"content":"The representation of a signed real number includes an integer portion, a fractional portion, and an exponent.","pos":[936,1046]},{"content":"Use floating-point constants to represent floating-point values that cannot be changed.","pos":[1047,1134]},{"content":"Syntax","pos":[1143,1149]},{"content":"<bpt id=\"p1\">*</bpt>floating-point-constant<ept id=\"p1\">*</ept>:","pos":[1153,1179],"source":"*floating-point-constant*:"},{"content":"<bpt id=\"p1\"> *</bpt>fractional-constant exponent-part<ept id=\"p1\">*</ept> opt<bpt id=\"p2\">*</bpt>floating-suffix<ept id=\"p2\">*</ept> opt","pos":[1182,1243],"source":" *fractional-constant exponent-part* opt*floating-suffix* opt"},{"pos":[1250,1300],"content":"<bpt id=\"p1\">*</bpt>digit-sequence exponent-part floating-suffix<ept id=\"p1\">*</ept> opt","source":"*digit-sequence exponent-part floating-suffix* opt"},{"content":"<bpt id=\"p1\">*</bpt>fractional-constant<ept id=\"p1\">*</ept>:","pos":[1307,1329],"source":"*fractional-constant*:"},{"content":"<bpt id=\"p1\"> *</bpt>digit-sequence<ept id=\"p1\">*</ept> opt<bpt id=\"p2\">**</bpt>.<ept id=\"p2\">**</ept>","pos":[1332,1358],"source":" *digit-sequence* opt**.**"},{"content":"digit-sequence","pos":[1360,1374]},{"pos":[1382,1405],"content":"<bpt id=\"p1\">*</bpt>digit-sequence<ept id=\"p1\">*</ept>  <bpt id=\"p2\">**</bpt>.<ept id=\"p2\">**</ept>","source":"*digit-sequence*  **.**"},{"content":"<bpt id=\"p1\">*</bpt>exponent-part<ept id=\"p1\">*</ept>:","pos":[1412,1428],"source":"*exponent-part*:"},{"content":"<bpt id=\"p1\"> **</bpt>e<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>sign<ept id=\"p2\">*</ept> opt<bpt id=\"p3\">*</bpt>digit-sequence<ept id=\"p3\">*</ept>","pos":[1431,1465],"source":" **e**  *sign* opt*digit-sequence*"},{"pos":[1472,1505],"content":"<bpt id=\"p1\">**</bpt>E<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>sign<ept id=\"p2\">*</ept> opt<bpt id=\"p3\">*</bpt>digit-sequence<ept id=\"p3\">*</ept>","source":"**E**  *sign* opt*digit-sequence*"},{"content":"<bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept> : one of","pos":[1512,1527],"source":"*sign* : one of"},{"content":"+ –","pos":[1533,1536]},{"content":"<bpt id=\"p1\">*</bpt>digit-sequence<ept id=\"p1\">*</ept>:","pos":[1545,1562],"source":"*digit-sequence*:"},{"content":"digit","pos":[1567,1572]},{"content":"digit-sequence digit","pos":[1581,1601]},{"content":"<bpt id=\"p1\">*</bpt>floating-suffix<ept id=\"p1\">*</ept> : one of","pos":[1609,1635],"source":"*floating-suffix* : one of"},{"content":"f l F L","pos":[1641,1648]},{"content":"You can omit either the digits before the decimal point (the integer portion of the value) or the digits after the decimal point (the fractional portion), but not both.","pos":[1657,1825]},{"content":"You can leave out the decimal point only if you include an exponent.","pos":[1826,1894]},{"content":"No white-space characters can separate the digits or characters of the constant.","pos":[1895,1975]},{"content":"The following examples illustrate some forms of floating-point constants and expressions:","pos":[1982,2071]},{"content":"Floating-point constants are positive unless they are preceded by a minus sign (<bpt id=\"p1\">**</bpt>–<ept id=\"p1\">**</ept>).","pos":[2213,2300],"source":"Floating-point constants are positive unless they are preceded by a minus sign (**–**)."},{"content":"In this case, the minus sign is treated as a unary arithmetic negation operator.","pos":[2301,2381]},{"content":"Floating-point constants have type <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept>, or <ph id=\"ph1\">`long double`</ph>.","pos":[2382,2457],"source":" Floating-point constants have type **float**, **double**, or `long double`."},{"content":"A floating-point constant without an <bpt id=\"p1\">**</bpt>f<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>F<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>l<ept id=\"p3\">**</ept>, or <bpt id=\"p4\">**</bpt>L<ept id=\"p4\">**</ept> suffix has type <bpt id=\"p5\">**</bpt>double<ept id=\"p5\">**</ept>.","pos":[2464,2558],"source":"A floating-point constant without an **f**, **F**, **l**, or **L** suffix has type **double**."},{"content":"If the letter <bpt id=\"p1\">**</bpt>f<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>F<ept id=\"p2\">**</ept> is the suffix, the constant has type <bpt id=\"p3\">**</bpt>float<ept id=\"p3\">**</ept>.","pos":[2559,2635],"source":" If the letter **f** or **F** is the suffix, the constant has type **float**."},{"content":"If suffixed by the letter <bpt id=\"p1\">**</bpt>l<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>L<ept id=\"p2\">**</ept>, it has type <ph id=\"ph1\">`long double`</ph>.","pos":[2636,2704],"source":" If suffixed by the letter **l** or **L**, it has type `long double`."},{"content":"For example:","pos":[2705,2717]},{"content":"Note that the Microsoft C compiler maps <bpt id=\"p1\">**</bpt>long double<ept id=\"p1\">**</ept> to type <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept>.","pos":[2811,2886],"source":"Note that the Microsoft C compiler maps **long double** to type **double**."},{"content":"See <bpt id=\"p1\">[</bpt>Storage of Basic Types<ept id=\"p1\">](../c-language/storage-of-basic-types.md)</ept> for information about type <bpt id=\"p2\">**</bpt>double<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>float<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>long<ept id=\"p4\">**</ept>.","pos":[2887,3020],"source":" See [Storage of Basic Types](../c-language/storage-of-basic-types.md) for information about type **double**, **float**, and **long**."},{"content":"You can omit the integer portion of the floating-point constant, as shown in the following examples.","pos":[3027,3127]},{"content":"The number .75 can be expressed in many ways, including the following:","pos":[3128,3198]},{"content":"See Also","pos":[3259,3267]},{"content":"C Constants","pos":[3272,3283]}],"content":"---\ntitle: \"C Floating-Point Constants | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"types [C], constants\"\n  - \"floating-point numbers, floating-point constants\"\n  - \"constants, floating-point\"\n  - \"floating-point constants\"\n  - \"floating-point constants, about floating-point constants\"\n  - \"double data type, floating-point constants\"\nms.assetid: e1bd9b44-d6ab-470c-93e5-07142c7a2062\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C Floating-Point Constants\nA \"floating-point constant\" is a decimal number that represents a signed real number. The representation of a signed real number includes an integer portion, a fractional portion, and an exponent. Use floating-point constants to represent floating-point values that cannot be changed.  \n  \n## Syntax  \n *floating-point-constant*:  \n *fractional-constant exponent-part* opt*floating-suffix* opt  \n  \n *digit-sequence exponent-part floating-suffix* opt  \n  \n *fractional-constant*:  \n *digit-sequence* opt**.** *digit-sequence*  \n  \n *digit-sequence*  **.**  \n  \n *exponent-part*:  \n **e**  *sign* opt*digit-sequence*  \n  \n **E**  *sign* opt*digit-sequence*  \n  \n *sign* : one of  \n **+ –**  \n  \n *digit-sequence*:  \n *digit*  \n  \n *digit-sequence digit*  \n  \n *floating-suffix* : one of  \n **f l F L**  \n  \n You can omit either the digits before the decimal point (the integer portion of the value) or the digits after the decimal point (the fractional portion), but not both. You can leave out the decimal point only if you include an exponent. No white-space characters can separate the digits or characters of the constant.  \n  \n The following examples illustrate some forms of floating-point constants and expressions:  \n  \n```  \n15.75  \n1.575E1   /* = 15.75   */  \n1575e-2   /* = 15.75   */  \n-2.5e-3   /* = -0.0025 */  \n25E-4     /* =  0.0025 */  \n```  \n  \n Floating-point constants are positive unless they are preceded by a minus sign (**–**). In this case, the minus sign is treated as a unary arithmetic negation operator. Floating-point constants have type **float**, **double**, or `long double`.  \n  \n A floating-point constant without an **f**, **F**, **l**, or **L** suffix has type **double**. If the letter **f** or **F** is the suffix, the constant has type **float**. If suffixed by the letter **l** or **L**, it has type `long double`. For example:  \n  \n```  \n100L  /* Has type long double  */  \n100F  /* Has type float        */  \n```  \n  \n Note that the Microsoft C compiler maps **long double** to type **double**. See [Storage of Basic Types](../c-language/storage-of-basic-types.md) for information about type **double**, **float**, and **long**.  \n  \n You can omit the integer portion of the floating-point constant, as shown in the following examples. The number .75 can be expressed in many ways, including the following:  \n  \n```  \n.0075e2  \n0.075e1  \n.075e1  \n75e-2  \n```  \n  \n## See Also  \n [C Constants](../c-language/c-constants.md)"}