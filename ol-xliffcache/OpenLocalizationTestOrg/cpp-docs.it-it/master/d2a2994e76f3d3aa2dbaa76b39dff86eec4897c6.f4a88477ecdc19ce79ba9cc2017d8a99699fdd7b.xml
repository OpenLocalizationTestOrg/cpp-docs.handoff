{"nodes":[{"pos":[12,83],"content":"vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l | Microsoft Docs","pos":[0,71]}]},{"pos":[1329,1383],"content":"vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l","linkify":"vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l","nodes":[{"content":"vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l","pos":[0,54]}]},{"content":"Write formatted output using a pointer to a list of arguments.","pos":[1384,1446]},{"content":"These are versions of <bpt id=\"p1\">[</bpt>vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, <ph id=\"ph1\">\\_</ph>_vswprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l.md)</ept> with security enhancements as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1447,1757],"source":" These are versions of [vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, \\__vswprintf_l](../../c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[1766,1772],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2609,2619],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Storage location for output.","pos":[2635,2663]},{"content":"Size of <ph id=\"ph1\">`buffer`</ph> in characters.","pos":[2692,2723],"source":" Size of `buffer` in characters."},{"content":"Format specification.","pos":[2742,2763]},{"content":"Pointer to list of arguments.","pos":[2782,2811]},{"content":"The locale to use.","pos":[2830,2848]},{"pos":[2857,2869],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`vsprintf_s`</ph> and <ph id=\"ph2\">`vswprintf_s`</ph> return the number of characters written, not including the terminating null character, or a negative value if an output error occurs.","pos":[2873,3037],"source":"`vsprintf_s` and `vswprintf_s` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs."},{"content":"If <ph id=\"ph1\">`buffer`</ph> or <ph id=\"ph2\">`format`</ph> is a null pointer, if count is zero, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3038,3293],"source":" If `buffer` or `format` is a null pointer, if count is zero, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[3294,3383],"source":" If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`."},{"pos":[3390,3558],"content":"For information on these and other error codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[3567,3574],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3578,3719],"content":"Each of these functions takes a pointer to an argument list, and then formats and writes the given data to the memory pointed to by <ph id=\"ph1\">`buffer`</ph>.","source":"Each of these functions takes a pointer to an argument list, and then formats and writes the given data to the memory pointed to by `buffer`."},{"pos":[3726,3851],"content":"<ph id=\"ph1\">`vswprintf_s`</ph> conforms to the ISO C Standard for <ph id=\"ph2\">`vswprintf`</ph>, which requires the second parameter, <ph id=\"ph3\">`count`</ph>, of type <ph id=\"ph4\">`size_t`</ph>.","source":"`vswprintf_s` conforms to the ISO C Standard for `vswprintf`, which requires the second parameter, `count`, of type `size_t`."},{"content":"These functions differ from the non-secure versions only in that the secure versions support positional parameters.","pos":[3858,3973]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>printf_p Positional Parameters<ept id=\"p1\">](../../c-runtime-library/printf-p-positional-parameters.md)</ept>.","pos":[3974,4092],"source":" For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)."},{"pos":[4099,4255],"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","source":"The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.","pos":[4262,4532]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[4533,4641],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"pos":[4651,4680],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"TCHAR.H routine","pos":[4687,4702]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[4703,4731],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[4732,4745]},{"content":"_UNICODE defined","pos":[4746,4762]},{"pos":[5009,5021],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[5028,5035]},{"content":"Required header","pos":[5036,5051]},{"content":"Optional headers","pos":[5052,5068]},{"pos":[5136,5165],"content":"<ph id=\"ph1\">`vsprintf_s`</ph>, <ph id=\"ph2\">`_vsprintf_s_l`</ph>","source":"`vsprintf_s`, `_vsprintf_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; and <ph id=\"ph2\">\\&lt;</ph>stdarg.h&gt;","pos":[5166,5192],"source":"\\<stdio.h> and \\<stdarg.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>varargs.h&gt;*","pos":[5193,5206],"source":"\\<varargs.h>*"},{"pos":[5211,5242],"content":"<ph id=\"ph1\">`vswprintf_s`</ph>, <ph id=\"ph2\">`_vswprintf_s_l`</ph>","source":"`vswprintf_s`, `_vswprintf_s_l`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdio.h&gt; or <ph id=\"ph2\">\\&lt;</ph>wchar.h&gt;, and <ph id=\"ph3\">\\&lt;</ph>stdarg.h&gt;","pos":[5243,5284],"source":"\\<stdio.h> or \\<wchar.h>, and \\<stdarg.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>varargs.h&gt;*","pos":[5285,5298],"source":"\\<varargs.h>*"},{"content":"<ph id=\"ph1\">\\*</ph> Required for UNIX V compatibility.","pos":[5306,5343],"source":"\\* Required for UNIX V compatibility."},{"pos":[5350,5474],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[5483,5490],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6245,6270],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[6274,6366],"content":"<bpt id=\"p1\">[</bpt>System::String::Format<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.string.format.aspx)</ept>","source":"[System::String::Format](https://msdn.microsoft.com/en-us/library/system.string.format.aspx)"},{"pos":[6375,6383],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Stream I/O<ept id=\"p1\">](../../c-runtime-library/stream-i-o.md)</ept><ph id=\"ph1\"> </ph>","pos":[6387,6439],"source":"[Stream I/O](../../c-runtime-library/stream-i-o.md) "},{"content":"<bpt id=\"p1\"> [</bpt>vprintf Functions<ept id=\"p1\">](../../c-runtime-library/vprintf-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[6442,6509],"source":" [vprintf Functions](../../c-runtime-library/vprintf-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Format Specification Syntax: printf and wprintf Functions<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[6512,6658],"source":" [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fprintf, _fprintf_l, fwprintf, _fwprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[6661,6783],"source":" [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>printf, _printf_l, wprintf, _wprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept><ph id=\"ph1\"> </ph>","pos":[6786,6900],"source":" [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id=\"ph1\">\\_</ph>_swprintf_l<ept id=\"p1\">](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)</ept><ph id=\"ph2\"> </ph>","pos":[6903,7051],"source":" [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md) "},{"content":"<bpt id=\"p1\"> [</bpt>va_arg, va_copy, va_end, va_start<ept id=\"p1\">](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)</ept>","pos":[7054,7159],"source":" [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)"}],"content":"---\ntitle: \"vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_vswprintf_s_l\"\n  - \"vsprintf_s\"\n  - \"vswprintf_s\"\n  - \"_vsprintf_s_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"vswprintf_s\"\n  - \"vsprintf_s\"\n  - \"_vstprintf_s\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_vstprintf_s_l function\"\n  - \"vsprintf_s_l function\"\n  - \"_vstprintf_s function\"\n  - \"vswprintf_s function\"\n  - \"vstprintf_s function\"\n  - \"vstprintf_s_l function\"\n  - \"vswprintf_s_l function\"\n  - \"vsprintf_s function\"\n  - \"_vsprintf_s_l function\"\n  - \"formatted text [C++]\"\n  - \"_vswprintf_s_l function\"\nms.assetid: 60e90518-57f0-4f1b-b732-f62a69702833\ncaps.latest.revision: 26\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# vsprintf_s, _vsprintf_s_l, vswprintf_s, _vswprintf_s_l\nWrite formatted output using a pointer to a list of arguments. These are versions of [vsprintf, _vsprintf_l, vswprintf, _vswprintf_l, \\__vswprintf_l](../../c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l.md) with security enhancements as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n## Syntax  \n  \n```  \nint vsprintf_s(  \n   char *buffer,  \n   size_t numberOfElements,  \n   const char *format,  \n   va_list argptr   \n);   \nint _vsprintf_s_l(  \n   char *buffer,  \n   size_t numberOfElements,  \n   const char *format,  \n   locale_t locale,  \n   va_list argptr   \n);   \nint vswprintf_s(  \n   wchar_t *buffer,  \n   size_t numberOfElements,  \n   const wchar_t *format,  \n   va_list argptr   \n);  \nint _vswprintf_s_l(  \n   wchar_t *buffer,  \n   size_t numberOfElements,  \n   const wchar_t *format,  \n   locale_t locale,  \n   va_list argptr   \n);  \ntemplate <size_t size>  \nint vsprintf_s(  \n   char (&buffer)[size],  \n   const char *format,  \n   va_list argptr   \n); // C++ only  \ntemplate <size_t size>  \nint vswprintf_s(  \n   wchar_t (&buffer)[size],  \n   const wchar_t *format,  \n   va_list argptr   \n); // C++ only  \n```  \n  \n#### Parameters  \n `buffer`  \n Storage location for output.  \n  \n `numberOfElements`  \n Size of `buffer` in characters.  \n  \n `format`  \n Format specification.  \n  \n `argptr`  \n Pointer to list of arguments.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n `vsprintf_s` and `vswprintf_s` return the number of characters written, not including the terminating null character, or a negative value if an output error occurs. If `buffer` or `format` is a null pointer, if count is zero, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the functions return -1 and set `errno` to `EINVAL`.  \n  \n For information on these and other error codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Each of these functions takes a pointer to an argument list, and then formats and writes the given data to the memory pointed to by `buffer`.  \n  \n `vswprintf_s` conforms to the ISO C Standard for `vswprintf`, which requires the second parameter, `count`, of type `size_t`.  \n  \n These functions differ from the non-secure versions only in that the secure versions support positional parameters. For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md).  \n  \n The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_vstprintf_s`|`vsprintf_s`|`vsprintf_s`|`vswprintf_s`|  \n|`_vstprintf_s_l`|`_vsprintf_s_l`|`_vsprintf_s_l`|`_vswprintf_s_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|Optional headers|  \n|-------------|---------------------|----------------------|  \n|`vsprintf_s`, `_vsprintf_s_l`|\\<stdio.h> and \\<stdarg.h>|\\<varargs.h>*|  \n|`vswprintf_s`, `_vswprintf_s_l`|\\<stdio.h> or \\<wchar.h>, and \\<stdarg.h>|\\<varargs.h>*|  \n  \n \\* Required for UNIX V compatibility.  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_vsprintf_s.c  \n// This program uses vsprintf_s to write to a buffer.  \n// The size of the buffer is determined by _vscprintf.  \n  \n#include <stdlib.h>  \n#include <stdarg.h>  \n  \nvoid test( char * format, ... )  \n{  \n   va_list args;  \n   int len;  \n   char * buffer;  \n  \n   va_start( args, format );  \n   len = _vscprintf( format, args ) // _vscprintf doesn't count  \n                               + 1; // terminating '\\0'  \n   buffer = malloc( len * sizeof(char) );  \n   vsprintf_s( buffer, len, format, args );  \n   puts( buffer );  \n   free( buffer );  \n}  \n  \nint main( void )  \n{  \n   test( \"%d %c %d\", 123, '<', 456 );  \n   test( \"%s\", \"This is a string\" );  \n}  \n```  \n  \n```Output  \n123 < 456  \nThis is a string  \n```  \n  \n## .NET Framework Equivalent  \n [System::String::Format](https://msdn.microsoft.com/en-us/library/system.string.format.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)   \n [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [sprintf, _sprintf_l, swprintf, _swprintf_l, \\__swprintf_l](../../c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l.md)   \n [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)"}