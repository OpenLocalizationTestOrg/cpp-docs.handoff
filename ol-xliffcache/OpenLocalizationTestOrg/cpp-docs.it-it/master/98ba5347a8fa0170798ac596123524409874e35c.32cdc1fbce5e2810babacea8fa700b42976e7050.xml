{"nodes":[{"pos":[12,52],"content":"if-else Statement (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"if-else Statement (C++) | Microsoft Docs","pos":[0,40]}]},{"content":"if-else Statement (C++)","pos":[708,731]},{"content":"Controls conditional branching.","pos":[732,763]},{"content":"Syntax","pos":[772,778]},{"content":"Remarks","pos":[872,879]},{"content":"If the value of <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> is nonzero, <bpt id=\"p2\">*</bpt>statement1<ept id=\"p2\">*</ept> is executed.","pos":[883,949],"source":"If the value of *expression* is nonzero, *statement1* is executed."},{"content":"If the optional <bpt id=\"p1\">**</bpt>else<ept id=\"p1\">**</ept> is present, <bpt id=\"p2\">*</bpt>statement2<ept id=\"p2\">*</ept> is executed if the value of <bpt id=\"p3\">*</bpt>expression<ept id=\"p3\">*</ept> is zero.","pos":[950,1049],"source":" If the optional **else** is present, *statement2* is executed if the value of *expression* is zero."},{"content":"<bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> must be of arithmetic or pointer type, or it must be of a class type that defines an unambiguous conversion to an arithmetic or pointer type.","pos":[1050,1204],"source":"*expression* must be of arithmetic or pointer type, or it must be of a class type that defines an unambiguous conversion to an arithmetic or pointer type."},{"content":"(For information about conversions, see <bpt id=\"p1\">[</bpt>Standard Conversions<ept id=\"p1\">](../cpp/standard-conversions.md)</ept>.)","pos":[1205,1301],"source":" (For information about conversions, see [Standard Conversions](../cpp/standard-conversions.md).)"},{"content":"In both forms of the <bpt id=\"p1\">**</bpt>if<ept id=\"p1\">**</ept> statement, <bpt id=\"p2\">*</bpt>expression<ept id=\"p2\">*</ept>, which can have any value except a structure, is evaluated, including all side effects.","pos":[1308,1447],"source":"In both forms of the **if** statement, *expression*, which can have any value except a structure, is evaluated, including all side effects."},{"content":"Control passes from the <bpt id=\"p1\">**</bpt>if<ept id=\"p1\">**</ept> statement to the next statement in the program unless one of the <bpt id=\"p2\">*</bpt>statement<ept id=\"p2\">*</ept>s contains a <bpt id=\"p3\">[</bpt>break<ept id=\"p3\">](../cpp/break-statement-cpp.md)</ept>, <bpt id=\"p4\">[</bpt>continue<ept id=\"p4\">](../cpp/continue-statement-cpp.md)</ept>, or <bpt id=\"p5\">[</bpt>goto<ept id=\"p5\">](../cpp/goto-statement-cpp.md)</ept>.","pos":[1448,1694],"source":" Control passes from the **if** statement to the next statement in the program unless one of the *statement*s contains a [break](../cpp/break-statement-cpp.md), [continue](../cpp/continue-statement-cpp.md), or [goto](../cpp/goto-statement-cpp.md)."},{"pos":[1701,1878],"content":"The <bpt id=\"p1\">**</bpt>else<ept id=\"p1\">**</ept> clause of an <ph id=\"ph1\">`if...else`</ph> statement is associated with the closest previous <bpt id=\"p2\">**</bpt>if<ept id=\"p2\">**</ept> statement in the same scope that does not have a corresponding <bpt id=\"p3\">**</bpt>else<ept id=\"p3\">**</ept> statement.","source":"The **else** clause of an `if...else` statement is associated with the closest previous **if** statement in the same scope that does not have a corresponding **else** statement."},{"pos":[1885,1967],"content":"For this sample to be unambiguous about <ph id=\"ph1\">`if...else`</ph> pairing, uncomment the braces.","source":"For this sample to be unambiguous about `if...else` pairing, uncomment the braces."},{"content":"Example","pos":[1976,1983]},{"content":"See Also","pos":[2494,2502]},{"content":"Selection Statements","pos":[2507,2527]},{"content":"Keywords","pos":[2570,2578]},{"content":"switch Statement (C++)","pos":[2609,2631]}],"content":"---\ntitle: \"if-else Statement (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"else_cpp\"\n  - \"else\"\n  - \"if_cpp\"\n  - \"if\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"if keyword [C++]\"\n  - \"else keyword [C++]\"\n  - \"if keyword [C++], if-else\"\nms.assetid: f8c45cde-6bce-42ae-81db-426b3dbd4caa\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# if-else Statement (C++)\nControls conditional branching.  \n  \n## Syntax  \n  \n```  \n  \n      if ( expression )  \n   statement1  \n[else  \n   statement2]  \n```  \n  \n## Remarks  \n If the value of *expression* is nonzero, *statement1* is executed. If the optional **else** is present, *statement2* is executed if the value of *expression* is zero. *expression* must be of arithmetic or pointer type, or it must be of a class type that defines an unambiguous conversion to an arithmetic or pointer type. (For information about conversions, see [Standard Conversions](../cpp/standard-conversions.md).)  \n  \n In both forms of the **if** statement, *expression*, which can have any value except a structure, is evaluated, including all side effects. Control passes from the **if** statement to the next statement in the program unless one of the *statement*s contains a [break](../cpp/break-statement-cpp.md), [continue](../cpp/continue-statement-cpp.md), or [goto](../cpp/goto-statement-cpp.md).  \n  \n The **else** clause of an `if...else` statement is associated with the closest previous **if** statement in the same scope that does not have a corresponding **else** statement.  \n  \n For this sample to be unambiguous about `if...else` pairing, uncomment the braces.  \n  \n## Example  \n  \n```  \n// if_else_statement.cpp  \n#include <stdio.h>  \n  \nint main()   \n{  \n   int x = 0;  \n   if (x == 0)  \n   {  \n      printf_s(\"x is 0!\\n\");  \n   }  \n   else  \n   {  \n      printf_s(\"x is not 0!\\n\"); // this statement will not be executed  \n   }  \n  \n   x = 1;  \n   if (x == 0)  \n   {  \n      printf_s(\"x is 0!\\n\"); // this statement will not be executed  \n   }  \n   else  \n   {  \n      printf_s(\"x is not 0!\\n\");  \n   }  \n  \n   return 0;  \n}  \n```  \n  \n```Output  \nx is 0!  \nx is not 0!  \n```  \n  \n## See Also  \n [Selection Statements](../cpp/selection-statements-cpp.md)   \n [Keywords](../cpp/keywords-cpp.md)   \n [switch Statement (C++)](../cpp/switch-statement-cpp.md)"}