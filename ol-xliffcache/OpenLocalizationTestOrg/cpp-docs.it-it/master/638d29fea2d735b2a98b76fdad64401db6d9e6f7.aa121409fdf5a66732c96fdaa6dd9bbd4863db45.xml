{"nodes":[{"pos":[12,77],"content":"How to: Create a Classic COM Component Using WRL | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Create a Classic COM Component Using WRL | Microsoft Docs","pos":[0,65]}]},{"content":"How to: Create a Classic COM Component Using WRL","pos":[559,607]},{"content":"You can use the <ph id=\"ph1\">[!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)]</ph> (<ph id=\"ph2\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph>) to create basic classic COM components for use in desktop apps, in addition to using it for <ph id=\"ph3\">[!INCLUDE[win8_appstore_long](../build/reference/includes/win8_appstore_long_md.md)]</ph> apps.","pos":[608,926],"source":"You can use the [!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)] ([!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]) to create basic classic COM components for use in desktop apps, in addition to using it for [!INCLUDE[win8_appstore_long](../build/reference/includes/win8_appstore_long_md.md)] apps."},{"content":"For the creation of COM components, the <ph id=\"ph1\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> may require less code than the ATL.","pos":[927,1067],"source":" For the creation of COM components, the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] may require less code than the ATL."},{"content":"For information about the subset of COM that the <ph id=\"ph1\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> supports, see <bpt id=\"p1\">[</bpt>Windows Runtime C++ Template Library (WRL)<ept id=\"p1\">](../windows/windows-runtime-cpp-template-library-wrl.md)</ept>.","pos":[1068,1297],"source":" For information about the subset of COM that the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] supports, see [Windows Runtime C++ Template Library (WRL)](../windows/windows-runtime-cpp-template-library-wrl.md)."},{"content":"This document shows how to use the <ph id=\"ph1\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> to create a basic COM component.","pos":[1304,1436],"source":"This document shows how to use the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] to create a basic COM component."},{"content":"Although you can use the deployment mechanism that best fits your needs, this document also shows a basic way to register and consume the COM component from a desktop app.","pos":[1437,1608]},{"pos":[1618,1733],"content":"To use the <ph id=\"ph1\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> to create a basic classic COM component","source":"To use the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] to create a basic classic COM component"},{"content":"In Visual Studio, create a <bpt id=\"p1\">**</bpt>Blank Solution<ept id=\"p1\">**</ept> project.","pos":[1743,1797],"source":"In Visual Studio, create a **Blank Solution** project."},{"content":"Name the project, for example, <ph id=\"ph1\">`WRLClassicCOM`</ph>.","pos":[1798,1845],"source":" Name the project, for example, `WRLClassicCOM`."},{"content":"Add a <bpt id=\"p1\">**</bpt>Win32 Project<ept id=\"p1\">**</ept> to the solution.","pos":[1855,1895],"source":"Add a **Win32 Project** to the solution."},{"content":"Name the project, for example, <ph id=\"ph1\">`CalculatorComponent`</ph>.","pos":[1896,1949],"source":" Name the project, for example, `CalculatorComponent`."},{"content":"On the <bpt id=\"p1\">**</bpt>Application Settings<ept id=\"p1\">**</ept> tab, select <bpt id=\"p2\">**</bpt>DLL<ept id=\"p2\">**</ept>.","pos":[1950,2002],"source":" On the **Application Settings** tab, select **DLL**."},{"content":"Add a <bpt id=\"p1\">**</bpt>Midl File (.idl)<ept id=\"p1\">**</ept> file to the project.","pos":[2012,2059],"source":"Add a **Midl File (.idl)** file to the project."},{"content":"Name the file, for example, <ph id=\"ph1\">`CalculatorComponent.idl`</ph>.","pos":[2060,2114],"source":" Name the file, for example, `CalculatorComponent.idl`."},{"content":"Add this code to CalculatorComponent.idl:","pos":[2124,2165]},{"pos":[2187,2214],"content":"wrl-classic-com-component#1"},{"content":"In CalculatorComponent.cpp, define the <ph id=\"ph1\">`CalculatorComponent`</ph> class.","pos":[2308,2375],"source":"In CalculatorComponent.cpp, define the `CalculatorComponent` class."},{"content":"The <ph id=\"ph1\">`CalculatorComponent`</ph> class inherits from <bpt id=\"p1\">[</bpt>Microsoft::WRL::RuntimeClass<ept id=\"p1\">](../windows/runtimeclass-class.md)</ept>.","pos":[2376,2487],"source":" The `CalculatorComponent` class inherits from [Microsoft::WRL::RuntimeClass](../windows/runtimeclass-class.md)."},{"content":"<bpt id=\"p1\">[</bpt>Microsoft::WRL::RuntimeClassFlags<ph id=\"ph1\">\\&lt;</ph>ClassicCom&gt;<ept id=\"p1\">](../windows/runtimeclassflags-structure.md)</ept> specifies that the class derives from <bpt id=\"p2\">[</bpt>IUnknown<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms680509\\(v=vs.85\\).aspx)</ept> and not <bpt id=\"p3\">[</bpt>IInspectable<ept id=\"p3\">](http://msdn.microsoft.com/library/br205821\\(v=vs.85\\).aspx)</ept>.","pos":[2488,2788],"source":"[Microsoft::WRL::RuntimeClassFlags\\<ClassicCom>](../windows/runtimeclassflags-structure.md) specifies that the class derives from [IUnknown](http://msdn.microsoft.com/library/windows/desktop/ms680509\\(v=vs.85\\).aspx) and not [IInspectable](http://msdn.microsoft.com/library/br205821\\(v=vs.85\\).aspx)."},{"content":"(<ph id=\"ph1\">`IInspectable`</ph> is available only to <ph id=\"ph2\">[!INCLUDE[win8_appstore_short](../windows/includes/win8_appstore_short_md.md)]</ph> app components.) <ph id=\"ph3\">`CoCreatableClass`</ph> creates a factory for the class that can be used with functions such as <bpt id=\"p1\">[</bpt>CoCreateInstance<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686615\\(v=vs.85\\).aspx)</ept>.","pos":[2789,3108],"source":" (`IInspectable` is available only to [!INCLUDE[win8_appstore_short](../windows/includes/win8_appstore_short_md.md)] app components.) `CoCreatableClass` creates a factory for the class that can be used with functions such as [CoCreateInstance](http://msdn.microsoft.com/library/windows/desktop/ms686615\\(v=vs.85\\).aspx)."},{"pos":[3130,3157],"content":"wrl-classic-com-component#2"},{"content":"Use the following code to replace the code in dllmain.cpp.","pos":[3251,3309]},{"content":"This file defines the DLL export functions.","pos":[3310,3353]},{"content":"These functions use the <bpt id=\"p1\">[</bpt>Microsoft::WRL::Module<ept id=\"p1\">](../windows/module-class.md)</ept> class to manage the class factories for the module.","pos":[3354,3482],"source":" These functions use the [Microsoft::WRL::Module](../windows/module-class.md) class to manage the class factories for the module."},{"pos":[3504,3531],"content":"wrl-classic-com-component#3"},{"content":"Add a <bpt id=\"p1\">**</bpt>Module-Definition File (.def)<ept id=\"p1\">**</ept> file to the project.","pos":[3625,3685],"source":"Add a **Module-Definition File (.def)** file to the project."},{"content":"Name the file, for example, <ph id=\"ph1\">`CalculatorComponent.def`</ph>.","pos":[3686,3740],"source":" Name the file, for example, `CalculatorComponent.def`."},{"content":"This file gives the linker the names of the functions to be exported.","pos":[3741,3810]},{"content":"Add this code to CalculatorComponent.def:","pos":[3820,3861]},{"content":"Add runtimeobject.lib to the linker line.","pos":[4034,4075]},{"content":"To learn how, see <bpt id=\"p1\">[</bpt>.Lib Files as Linker Input<ept id=\"p1\">](../build/reference/dot-lib-files-as-linker-input.md)</ept>.","pos":[4076,4176],"source":" To learn how, see [.Lib Files as Linker Input](../build/reference/dot-lib-files-as-linker-input.md)."},{"content":"To consume the COM component from a desktop app","pos":[4186,4233]},{"content":"Register the COM component with the Windows Registry.","pos":[4243,4296]},{"content":"To do so, create a registration entries file, name it <ph id=\"ph1\">`RegScript.reg`</ph>, and add the following text.","pos":[4297,4395],"source":" To do so, create a registration entries file, name it `RegScript.reg`, and add the following text."},{"content":"Replace <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\&lt;</ph>dll-path&gt;<ept id=\"p1\">*</ept> with the path of your DLL—for example, <ph id=\"ph2\">`C:\\\\temp\\\\WRLClassicCOM\\\\Debug\\\\CalculatorComponent.dll`</ph>.","pos":[4396,4515],"source":" Replace *\\<dll-path>* with the path of your DLL—for example, `C:\\\\temp\\\\WRLClassicCOM\\\\Debug\\\\CalculatorComponent.dll`."},{"content":"Run RegScript.reg or add it to your project’s <bpt id=\"p1\">**</bpt>Post-Build Event<ept id=\"p1\">**</ept>.","pos":[5186,5253],"source":"Run RegScript.reg or add it to your project’s **Post-Build Event**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Pre-build Event/Post-build Event Command Line Dialog Box<ept id=\"p1\">](/visualstudio/ide/reference/pre-build-event-post-build-event-command-line-dialog-box)</ept>.","pos":[5254,5425],"source":" For more information, see [Pre-build Event/Post-build Event Command Line Dialog Box](/visualstudio/ide/reference/pre-build-event-post-build-event-command-line-dialog-box)."},{"content":"Add a <bpt id=\"p1\">**</bpt>Win32 Console Application<ept id=\"p1\">**</ept> project to the solution.","pos":[5435,5495],"source":"Add a **Win32 Console Application** project to the solution."},{"content":"Name the project, for example, <ph id=\"ph1\">`Calculator`</ph>.","pos":[5496,5540],"source":" Name the project, for example, `Calculator`."},{"content":"Use this code to replace the contents of Calculator.cpp:","pos":[5550,5606]},{"pos":[5628,5655],"content":"wrl-classic-com-component#6"},{"content":"Robust Programming","pos":[5748,5766]},{"content":"This document uses standard COM functions to demonstrate that you can use the <ph id=\"ph1\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> to author a COM component and make it available to any COM-enabled technology.","pos":[5770,5991],"source":"This document uses standard COM functions to demonstrate that you can use the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] to author a COM component and make it available to any COM-enabled technology."},{"content":"You can also use <ph id=\"ph1\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> types such as <bpt id=\"p1\">[</bpt>Microsoft::WRL::ComPtr<ept id=\"p1\">](../windows/comptr-class.md)</ept> in your desktop app to manage the lifetime of COM and other objects.","pos":[5992,6209],"source":" You can also use [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] types such as [Microsoft::WRL::ComPtr](../windows/comptr-class.md) in your desktop app to manage the lifetime of COM and other objects."},{"content":"The following code uses the <ph id=\"ph1\">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> to manage the lifetime of the <ph id=\"ph2\">`ICalculatorComponent`</ph> pointer.","pos":[6210,6364],"source":" The following code uses the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] to manage the lifetime of the `ICalculatorComponent` pointer."},{"content":"The <ph id=\"ph1\">`CoInitializeWrapper`</ph> class is an RAII wrapper that guarantees that the COM library is freed and also guarantees that the lifetime of the COM library outlives the <ph id=\"ph2\">`ComPtr`</ph> smart pointer object.","pos":[6365,6562],"source":" The `CoInitializeWrapper` class is an RAII wrapper that guarantees that the COM library is freed and also guarantees that the lifetime of the COM library outlives the `ComPtr` smart pointer object."},{"pos":[6580,6607],"content":"wrl-classic-com-component#7"},{"content":"See Also","pos":[6700,6708]},{"content":"Windows Runtime C++ Template Library (WRL)","pos":[6713,6755]}],"content":"---\ntitle: \"How to: Create a Classic COM Component Using WRL | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nms.assetid: 5efe7690-90d5-4c3c-9e53-11a14cefcb19\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Create a Classic COM Component Using WRL\nYou can use the [!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)] ([!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]) to create basic classic COM components for use in desktop apps, in addition to using it for [!INCLUDE[win8_appstore_long](../build/reference/includes/win8_appstore_long_md.md)] apps. For the creation of COM components, the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] may require less code than the ATL. For information about the subset of COM that the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] supports, see [Windows Runtime C++ Template Library (WRL)](../windows/windows-runtime-cpp-template-library-wrl.md).  \n  \n This document shows how to use the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] to create a basic COM component. Although you can use the deployment mechanism that best fits your needs, this document also shows a basic way to register and consume the COM component from a desktop app.  \n  \n### To use the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] to create a basic classic COM component  \n  \n1.  In Visual Studio, create a **Blank Solution** project. Name the project, for example, `WRLClassicCOM`.  \n  \n2.  Add a **Win32 Project** to the solution. Name the project, for example, `CalculatorComponent`. On the **Application Settings** tab, select **DLL**.  \n  \n3.  Add a **Midl File (.idl)** file to the project. Name the file, for example, `CalculatorComponent.idl`.  \n  \n4.  Add this code to CalculatorComponent.idl:  \n  \n     [!code-cpp[wrl-classic-com-component#1](../windows/codesnippet/CPP/how-to-create-a-classic-com-component-using-wrl_1.idl)]  \n  \n5.  In CalculatorComponent.cpp, define the `CalculatorComponent` class. The `CalculatorComponent` class inherits from [Microsoft::WRL::RuntimeClass](../windows/runtimeclass-class.md). [Microsoft::WRL::RuntimeClassFlags\\<ClassicCom>](../windows/runtimeclassflags-structure.md) specifies that the class derives from [IUnknown](http://msdn.microsoft.com/library/windows/desktop/ms680509\\(v=vs.85\\).aspx) and not [IInspectable](http://msdn.microsoft.com/library/br205821\\(v=vs.85\\).aspx). (`IInspectable` is available only to [!INCLUDE[win8_appstore_short](../windows/includes/win8_appstore_short_md.md)] app components.) `CoCreatableClass` creates a factory for the class that can be used with functions such as [CoCreateInstance](http://msdn.microsoft.com/library/windows/desktop/ms686615\\(v=vs.85\\).aspx).  \n  \n     [!code-cpp[wrl-classic-com-component#2](../windows/codesnippet/CPP/how-to-create-a-classic-com-component-using-wrl_2.cpp)]  \n  \n6.  Use the following code to replace the code in dllmain.cpp. This file defines the DLL export functions. These functions use the [Microsoft::WRL::Module](../windows/module-class.md) class to manage the class factories for the module.  \n  \n     [!code-cpp[wrl-classic-com-component#3](../windows/codesnippet/CPP/how-to-create-a-classic-com-component-using-wrl_3.cpp)]  \n  \n7.  Add a **Module-Definition File (.def)** file to the project. Name the file, for example, `CalculatorComponent.def`. This file gives the linker the names of the functions to be exported.  \n  \n8.  Add this code to CalculatorComponent.def:  \n  \n    ```\n    LIBRARY\n\n    EXPORTS\n        DllGetActivationFactory PRIVATE\n        DllGetClassObject       PRIVATE\n        DllCanUnloadNow         PRIVATE  \n    ```\n\n9. Add runtimeobject.lib to the linker line. To learn how, see [.Lib Files as Linker Input](../build/reference/dot-lib-files-as-linker-input.md).  \n  \n### To consume the COM component from a desktop app  \n  \n1.  Register the COM component with the Windows Registry. To do so, create a registration entries file, name it `RegScript.reg`, and add the following text. Replace *\\<dll-path>* with the path of your DLL—for example, `C:\\\\temp\\\\WRLClassicCOM\\\\Debug\\\\CalculatorComponent.dll`.  \n  \n    ```\n    Windows Registry Editor Version 5.00\n\n    [HKEY_CLASSES_ROOT\\Wow6432Node\\CLSID\\{E68F5EDD-6257-4E72-A10B-4067ED8E85F2}]\n    @=\"CalculatorComponent Class\"\n\n    [HKEY_CLASSES_ROOT\\Wow6432Node\\CLSID\\{E68F5EDD-6257-4E72-A10B-4067ED8E85F2}\\InprocServer32]\n    @=\"<dll-path>\"\n    \"ThreadingModel\"=\"Apartment\"\n\n    [HKEY_CLASSES_ROOT\\Wow6432Node\\CLSID\\{E68F5EDD-6257-4E72-A10B-4067ED8E85F2}\\Programmable]\n\n    [HKEY_CLASSES_ROOT\\Wow6432Node\\CLSID\\{E68F5EDD-6257-4E72-A10B-4067ED8E85F2}\\TypeLib]\n    @=\"{9D3E6826-CB8E-4D86-8B14-89F0D7EFCD01}\"\n\n    [HKEY_CLASSES_ROOT\\Wow6432Node\\CLSID\\{E68F5EDD-6257-4E72-A10B-4067ED8E85F2}\\Version]\n    @=\"1.0\"\n    ```  \n  \n2.  Run RegScript.reg or add it to your project’s **Post-Build Event**. For more information, see [Pre-build Event/Post-build Event Command Line Dialog Box](/visualstudio/ide/reference/pre-build-event-post-build-event-command-line-dialog-box).  \n  \n3.  Add a **Win32 Console Application** project to the solution. Name the project, for example, `Calculator`.  \n  \n4.  Use this code to replace the contents of Calculator.cpp:  \n  \n     [!code-cpp[wrl-classic-com-component#6](../windows/codesnippet/CPP/how-to-create-a-classic-com-component-using-wrl_6.cpp)]  \n  \n## Robust Programming  \n This document uses standard COM functions to demonstrate that you can use the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] to author a COM component and make it available to any COM-enabled technology. You can also use [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] types such as [Microsoft::WRL::ComPtr](../windows/comptr-class.md) in your desktop app to manage the lifetime of COM and other objects. The following code uses the [!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)] to manage the lifetime of the `ICalculatorComponent` pointer. The `CoInitializeWrapper` class is an RAII wrapper that guarantees that the COM library is freed and also guarantees that the lifetime of the COM library outlives the `ComPtr` smart pointer object.  \n  \n [!code-cpp[wrl-classic-com-component#7](../windows/codesnippet/CPP/how-to-create-a-classic-com-component-using-wrl_7.cpp)]  \n  \n## See Also  \n [Windows Runtime C++ Template Library (WRL)](../windows/windows-runtime-cpp-template-library-wrl.md)"}