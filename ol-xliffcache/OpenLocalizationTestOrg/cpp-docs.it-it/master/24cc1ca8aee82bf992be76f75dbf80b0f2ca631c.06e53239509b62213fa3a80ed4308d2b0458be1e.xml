{"nodes":[{"pos":[12,69],"content":"CAtlServiceModuleT::ServiceMain Function | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAtlServiceModuleT::ServiceMain Function | Microsoft Docs","pos":[0,57]}]},{"content":"CAtlServiceModuleT::ServiceMain Function","pos":[696,736]},{"pos":[737,885],"content":"The service control manager (SCM) calls <ph id=\"ph1\">`ServiceMain`</ph> when you open the Services Control Panel application, select the service, and click <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept>.","source":"The service control manager (SCM) calls `ServiceMain` when you open the Services Control Panel application, select the service, and click **Start**."},{"content":"After the SCM calls <ph id=\"ph1\">`ServiceMain`</ph>, a service must give the SCM a handler function.","pos":[892,974],"source":"After the SCM calls `ServiceMain`, a service must give the SCM a handler function."},{"content":"This function lets the SCM obtain the service's status and pass specific instructions (such as pausing or stopping).","pos":[975,1091]},{"content":"The SCM gets this function when the service passes <bpt id=\"p1\">**</bpt>_Handler<ept id=\"p1\">**</ept> to the Win32 API function, <bpt id=\"p2\">[</bpt>RegisterServiceCtrlHandler<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms685054)</ept>.","pos":[1092,1272],"source":" The SCM gets this function when the service passes **_Handler** to the Win32 API function, [RegisterServiceCtrlHandler](http://msdn.microsoft.com/library/windows/desktop/ms685054)."},{"content":"(<bpt id=\"p1\">**</bpt>_Handler<ept id=\"p1\">**</ept> is a static member function that calls the non-static member function <bpt id=\"p2\">[</bpt>Handler<ept id=\"p2\">](../atl/reference/catlservicemodulet-class.md#catlservicemodulet__handler)</ept>.)","pos":[1273,1442],"source":" (**_Handler** is a static member function that calls the non-static member function [Handler](../atl/reference/catlservicemodulet-class.md#catlservicemodulet__handler).)"},{"content":"At startup, a service should also inform the SCM of its current status.","pos":[1449,1520]},{"content":"It does this by passing <bpt id=\"p1\">**</bpt>SERVICE_START_PENDING<ept id=\"p1\">**</ept> to the Win32 API function, <bpt id=\"p2\">[</bpt>SetServiceStatus<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms686241)</ept>.","pos":[1521,1677],"source":" It does this by passing **SERVICE_START_PENDING** to the Win32 API function, [SetServiceStatus](http://msdn.microsoft.com/library/windows/desktop/ms686241)."},{"content":"then calls <ph id=\"ph1\">`CAtlExeModuleT::InitializeCom`</ph>, which calls the Win32 API function <bpt id=\"p1\">[</bpt>CoInitializeEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms695279)</ept>.","pos":[1698,1854],"source":" then calls `CAtlExeModuleT::InitializeCom`, which calls the Win32 API function [CoInitializeEx](http://msdn.microsoft.com/library/windows/desktop/ms695279)."},{"content":"By default, <ph id=\"ph1\">`InitializeCom`</ph> passes the <bpt id=\"p1\">**</bpt>COINIT_MULTITHREADED<ept id=\"p1\">**</ept> flag to the function.","pos":[1855,1940],"source":" By default, `InitializeCom` passes the **COINIT_MULTITHREADED** flag to the function."},{"content":"This flag indicates that the program is to be a free-threaded server.","pos":[1941,2010]},{"content":"Now, <ph id=\"ph1\">`CAtlServiceModuleT::Run`</ph> is called to perform the main work of the service.","pos":[2017,2098],"source":"Now, `CAtlServiceModuleT::Run` is called to perform the main work of the service."},{"content":"<bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> continues to execute until the service is stopped.","pos":[2099,2157],"source":"**Run** continues to execute until the service is stopped."},{"content":"See Also","pos":[2166,2174]},{"content":"Services","pos":[2179,2187]},{"content":"CAtlServiceModuleT::ServiceMain","pos":[2218,2249]}],"content":"---\ntitle: \"CAtlServiceModuleT::ServiceMain Function | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ServiceMain\"\n  - \"CServiceModule::ServiceMain\"\n  - \"CServiceModule.ServiceMain\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ServiceMain method\"\nms.assetid: f21408c1-1919-4dec-88d8-bf5b39ac9808\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAtlServiceModuleT::ServiceMain Function\nThe service control manager (SCM) calls `ServiceMain` when you open the Services Control Panel application, select the service, and click **Start**.  \n  \n After the SCM calls `ServiceMain`, a service must give the SCM a handler function. This function lets the SCM obtain the service's status and pass specific instructions (such as pausing or stopping). The SCM gets this function when the service passes **_Handler** to the Win32 API function, [RegisterServiceCtrlHandler](http://msdn.microsoft.com/library/windows/desktop/ms685054). (**_Handler** is a static member function that calls the non-static member function [Handler](../atl/reference/catlservicemodulet-class.md#catlservicemodulet__handler).)  \n  \n At startup, a service should also inform the SCM of its current status. It does this by passing **SERVICE_START_PENDING** to the Win32 API function, [SetServiceStatus](http://msdn.microsoft.com/library/windows/desktop/ms686241).  \n  \n `ServiceMain` then calls `CAtlExeModuleT::InitializeCom`, which calls the Win32 API function [CoInitializeEx](http://msdn.microsoft.com/library/windows/desktop/ms695279). By default, `InitializeCom` passes the **COINIT_MULTITHREADED** flag to the function. This flag indicates that the program is to be a free-threaded server.  \n  \n Now, `CAtlServiceModuleT::Run` is called to perform the main work of the service. **Run** continues to execute until the service is stopped.  \n  \n## See Also  \n [Services](../atl/atl-services.md)   \n [CAtlServiceModuleT::ServiceMain](../atl/reference/catlservicemodulet-class.md#catlservicemodulet__servicemain)\n\n"}