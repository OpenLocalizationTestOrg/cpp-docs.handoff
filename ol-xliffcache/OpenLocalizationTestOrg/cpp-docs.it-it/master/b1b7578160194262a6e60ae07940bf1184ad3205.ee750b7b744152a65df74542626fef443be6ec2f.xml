{"nodes":[{"pos":[12,57],"content":"Logical Negation Operator: ! | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Logical Negation Operator: ! | Microsoft Docs","pos":[0,45],"nodes":[{"content":"Logical Negation Operator: !","pos":[0,28]},{"content":"| Microsoft Docs","pos":[29,45]}]}]},{"content":"Logical Negation Operator: !","pos":[661,689]},{"content":"Syntax","pos":[693,699]},{"content":"Remarks","pos":[746,753]},{"content":"The logical negation operator (<bpt id=\"p1\">**</bpt>!<ept id=\"p1\">**</ept>) reverses the meaning of its operand.","pos":[757,831],"source":"The logical negation operator (**!**) reverses the meaning of its operand."},{"content":"The operand must be of arithmetic or pointer type (or an expression that evaluates to arithmetic or pointer type).","pos":[832,946]},{"content":"The operand is implicitly converted to type <ph id=\"ph1\">`bool`</ph>.","pos":[947,998],"source":" The operand is implicitly converted to type `bool`."},{"content":"The result is <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the converted operand is <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>; the result is <bpt id=\"p3\">**</bpt>false<ept id=\"p3\">**</ept> if the converted operand is <bpt id=\"p4\">**</bpt>true<ept id=\"p4\">**</ept>.","pos":[999,1122],"source":" The result is **true** if the converted operand is **false**; the result is **false** if the converted operand is **true**."},{"content":"The result is of type <ph id=\"ph1\">`bool`</ph>.","pos":[1123,1152],"source":" The result is of type `bool`."},{"content":"For an expression <bpt id=\"p1\">*</bpt>e<ept id=\"p1\">*</ept>, the unary expression <bpt id=\"p2\">**</bpt>!<ept id=\"p2\">**</ept><bpt id=\"p3\">*</bpt>e<ept id=\"p3\">*</ept>","pos":[1159,1211],"source":"For an expression *e*, the unary expression **!***e*"},{"content":"is equivalent to the expression <bpt id=\"p1\">**</bpt>(<ept id=\"p1\">**</ept><bpt id=\"p2\">*</bpt>e<ept id=\"p2\">*</ept> <ph id=\"ph1\">`==`</ph> 0), except where overloaded operators are involved.","pos":[1212,1309],"source":" is equivalent to the expression **(***e* `==` 0), except where overloaded operators are involved."},{"content":"Operator Keyword for !","pos":[1318,1340]},{"content":"The <bpt id=\"p1\">**</bpt>not<ept id=\"p1\">**</ept> operator is the text equivalent of <bpt id=\"p2\">**</bpt>!<ept id=\"p2\">**</ept>.","pos":[1344,1397],"source":"The **not** operator is the text equivalent of **!**."},{"content":"There are two ways to access the <bpt id=\"p1\">**</bpt>not<ept id=\"p1\">**</ept> operator in your programs: include the header file <ph id=\"ph1\">`iso646.h`</ph>, or compile with the <bpt id=\"p2\">[</bpt>/Za<ept id=\"p2\">](../build/reference/za-ze-disable-language-extensions.md)</ept> (Disable language extensions) compiler option.","pos":[1398,1631],"source":" There are two ways to access the **not** operator in your programs: include the header file `iso646.h`, or compile with the [/Za](../build/reference/za-ze-disable-language-extensions.md) (Disable language extensions) compiler option."},{"content":"Example","pos":[1640,1647]},{"content":"See Also","pos":[1865,1873]},{"content":"Expressions with Unary Operators","pos":[1878,1910]},{"content":"C++ Built-in Operators, Precedence and Associativity","pos":[1961,2013]},{"content":"Unary Arithmetic Operators","pos":[2083,2109]}],"content":"---\ntitle: \"Logical Negation Operator: ! | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"!\"\n  - \"Not\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"! operator\"\n  - \"NOT operator\"\n  - \"logical negation\"\nms.assetid: 650add9f-a7bc-426c-b01d-5fc6a81c8b62\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Logical Negation Operator: !\n## Syntax  \n  \n```  \n  \n! cast-expression  \n```  \n  \n## Remarks  \n The logical negation operator (**!**) reverses the meaning of its operand. The operand must be of arithmetic or pointer type (or an expression that evaluates to arithmetic or pointer type). The operand is implicitly converted to type `bool`. The result is **true** if the converted operand is **false**; the result is **false** if the converted operand is **true**. The result is of type `bool`.  \n  \n For an expression *e*, the unary expression **!***e* is equivalent to the expression **(***e* `==` 0), except where overloaded operators are involved.  \n  \n## Operator Keyword for !  \n The **not** operator is the text equivalent of **!**. There are two ways to access the **not** operator in your programs: include the header file `iso646.h`, or compile with the [/Za](../build/reference/za-ze-disable-language-extensions.md) (Disable language extensions) compiler option.  \n  \n## Example  \n  \n```  \n// expre_Logical_NOT_Operator.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nint main() {  \n   int i = 0;  \n   if (!i)  \n      cout << \"i is zero\" << endl;  \n}  \n```  \n  \n## See Also  \n [Expressions with Unary Operators](../cpp/expressions-with-unary-operators.md)   \n [C++ Built-in Operators, Precedence and Associativity](../cpp/cpp-built-in-operators-precedence-and-associativity.md)   \n [Unary Arithmetic Operators](../c-language/unary-arithmetic-operators.md)"}