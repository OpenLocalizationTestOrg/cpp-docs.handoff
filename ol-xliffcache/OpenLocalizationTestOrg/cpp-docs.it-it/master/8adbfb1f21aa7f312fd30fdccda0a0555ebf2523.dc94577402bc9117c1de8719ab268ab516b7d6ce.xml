{"nodes":[{"pos":[12,40],"content":"CSize Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CSize Class | Microsoft Docs","pos":[0,28]}]},{"pos":[639,650],"content":"CSize Class","linkify":"CSize Class","nodes":[{"content":"CSize Class","pos":[0,11]}]},{"pos":[651,803],"content":"Similar to the Windows <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure, which implements a relative coordinate or position.","source":"Similar to the Windows [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure, which implements a relative coordinate or position."},{"pos":[812,818],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[873,880],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[890,909],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[916,920]},{"content":"Description","pos":[921,932]},{"pos":[970,999],"content":"<bpt id=\"p1\">[</bpt>CSize::CSize<ept id=\"p1\">](#csize__csize)</ept>","source":"[CSize::CSize](#csize__csize)"},{"pos":[1000,1028],"content":"Constructs a <ph id=\"ph1\">`CSize`</ph> object.","source":"Constructs a `CSize` object."},{"pos":[1039,1055],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1062,1066]},{"content":"Description","pos":[1067,1078]},{"pos":[1116,1155],"content":"<bpt id=\"p1\">[</bpt>CSize::operator -<ept id=\"p1\">](#csize__operator_-)</ept>","source":"[CSize::operator -](#csize__operator_-)"},{"content":"Subtracts two sizes.","pos":[1156,1176]},{"pos":[1181,1224],"content":"<bpt id=\"p1\">[</bpt>CSize::operator !=<ept id=\"p1\">](#csize__operator__neq)</ept>","source":"[CSize::operator !=](#csize__operator__neq)"},{"pos":[1225,1274],"content":"Checks for inequality between <ph id=\"ph1\">`CSize`</ph> and a size.","source":"Checks for inequality between `CSize` and a size."},{"pos":[1279,1321],"content":"<bpt id=\"p1\">[</bpt>CSize::operator +<ept id=\"p1\">](#csize__operator__add)</ept>","source":"[CSize::operator +](#csize__operator__add)"},{"content":"Adds two sizes.","pos":[1322,1337]},{"pos":[1342,1388],"content":"<bpt id=\"p1\">[</bpt>CSize::operator +=<ept id=\"p1\">](#csize__operator__add_eq)</ept>","source":"[CSize::operator +=](#csize__operator__add_eq)"},{"pos":[1389,1412],"content":"Adds a size to <ph id=\"ph1\">`CSize`</ph>.","source":"Adds a size to `CSize`."},{"pos":[1417,1460],"content":"<bpt id=\"p1\">[</bpt>CSize::operator -=<ept id=\"p1\">](#csize__operator_-_eq)</ept>","source":"[CSize::operator -=](#csize__operator_-_eq)"},{"pos":[1461,1491],"content":"Subtracts a size from <ph id=\"ph1\">`CSize`</ph>.","source":"Subtracts a size from `CSize`."},{"pos":[1496,1541],"content":"<bpt id=\"p1\">[</bpt>CSize::operator ==<ept id=\"p1\">](#csize__operator__eq_eq)</ept>","source":"[CSize::operator ==](#csize__operator__eq_eq)"},{"pos":[1542,1589],"content":"Checks for equality between <ph id=\"ph1\">`CSize`</ph> and a size.","source":"Checks for equality between `CSize` and a size."},{"pos":[1599,1606],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class is derived from the <bpt id=\"p1\">**</bpt>SIZE<ept id=\"p1\">**</ept> structure.","pos":[1610,1660],"source":"This class is derived from the **SIZE** structure."},{"content":"This means you can pass a <ph id=\"ph1\">`CSize`</ph> in a parameter that calls for a <bpt id=\"p1\">**</bpt>SIZE<ept id=\"p1\">**</ept> and that the data members of the <bpt id=\"p2\">**</bpt>SIZE<ept id=\"p2\">**</ept> structure are accessible data members of <ph id=\"ph2\">`CSize`</ph>.","pos":[1661,1827],"source":" This means you can pass a `CSize` in a parameter that calls for a **SIZE** and that the data members of the **SIZE** structure are accessible data members of `CSize`."},{"content":"The <bpt id=\"p1\">**</bpt>cx<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>cy<ept id=\"p2\">**</ept> members of <bpt id=\"p3\">**</bpt>SIZE<ept id=\"p3\">**</ept> (and <ph id=\"ph1\">`CSize`</ph>) are public.","pos":[1834,1901],"source":"The **cx** and **cy** members of **SIZE** (and `CSize`) are public."},{"content":"In addition, <ph id=\"ph1\">`CSize`</ph> implements member functions to manipulate the <bpt id=\"p1\">**</bpt>SIZE<ept id=\"p1\">**</ept> structure.","pos":[1902,1988],"source":" In addition, `CSize` implements member functions to manipulate the **SIZE** structure."},{"pos":[1996,2139],"content":"[!NOTE]\n For more information on shared utility classes (like `CSize`), see [Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md).","leadings":["","> "],"nodes":[{"content":"For more information on shared utility classes (like <ph id=\"ph1\">`CSize`</ph>), see <bpt id=\"p1\">[</bpt>Shared Classes<ept id=\"p1\">](../../atl-mfc-shared/atl-mfc-shared-classes.md)</ept>.","pos":[9,141],"source":" For more information on shared utility classes (like `CSize`), see [Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md)."}]},{"pos":[2148,2169],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2205,2217],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2221,2243],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atltypes.h","source":"**Header:** atltypes.h"},{"pos":[2253,2294],"content":"<bpt id=\"p1\">&lt;a name=\"csize__csize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSize::CSize","linkify":"<a name=\"csize__csize\"></a>  CSize::CSize","source":"<a name=\"csize__csize\"></a>  CSize::CSize"},{"pos":[2298,2326],"content":"Constructs a <ph id=\"ph1\">`CSize`</ph> object.","source":"Constructs a `CSize` object."},{"pos":[2556,2566],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>initCX<ept id=\"p1\">*</ept>","pos":[2570,2578],"source":"*initCX*"},{"content":"Sets the <bpt id=\"p1\">**</bpt>cx<ept id=\"p1\">**</ept> member for the <ph id=\"ph1\">`CSize`</ph>.","pos":[2582,2621],"source":" Sets the **cx** member for the `CSize`."},{"content":"<bpt id=\"p1\">*</bpt>initCY<ept id=\"p1\">*</ept>","pos":[2628,2636],"source":"*initCY*"},{"content":"Sets the <bpt id=\"p1\">**</bpt>cy<ept id=\"p1\">**</ept> member for the <ph id=\"ph1\">`CSize`</ph>.","pos":[2640,2679],"source":" Sets the **cy** member for the `CSize`."},{"content":"<bpt id=\"p1\"> [</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure or <ph id=\"ph1\">`CSize`</ph> object used to initialize <ph id=\"ph2\">`CSize`</ph>.","pos":[2699,2822],"source":" [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or `CSize` object used to initialize `CSize`."},{"content":"<bpt id=\"p1\"> [</bpt>POINT<ept id=\"p1\">](../../mfc/reference/point-structure1.md)</ept> structure or <ph id=\"ph1\">`CPoint`</ph> object used to initialize <ph id=\"ph2\">`CSize`</ph>.","pos":[2840,2946],"source":" [POINT](../../mfc/reference/point-structure1.md) structure or `CPoint` object used to initialize `CSize`."},{"content":"<ph id=\"ph1\"> `DWORD`</ph> used to initialize <ph id=\"ph2\">`CSize`</ph>.","pos":[2964,3000],"source":" `DWORD` used to initialize `CSize`."},{"content":"The low-order word is the <bpt id=\"p1\">**</bpt>cx<ept id=\"p1\">**</ept> member and the high-order word is the <bpt id=\"p2\">**</bpt>cy<ept id=\"p2\">**</ept> member.","pos":[3001,3086],"source":" The low-order word is the **cx** member and the high-order word is the **cy** member."},{"pos":[3096,3103],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3107,3176],"content":"If no arguments are given, <bpt id=\"p1\">**</bpt>cx<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>cy<ept id=\"p2\">**</ept> are initialized to zero.","source":"If no arguments are given, **cx** and **cy** are initialized to zero."},{"pos":[3186,3193],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3197,3289],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#97<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/csize-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#97](../../atl-mfc-shared/codesnippet/cpp/csize-class_1.cpp)]"},{"pos":[3299,3356],"content":"<bpt id=\"p1\">&lt;a name=\"csize__operator__eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSize::operator ==","linkify":"<a name=\"csize__operator__eq_eq\"></a>  CSize::operator ==","source":"<a name=\"csize__operator__eq_eq\"></a>  CSize::operator =="},{"content":"Checks for equality between two sizes.","pos":[3360,3398]},{"pos":[3474,3481],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Returns nonzero if the sizes are equal, otherwize 0.","pos":[3485,3537]},{"pos":[3547,3554],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3558,3650],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#98<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/csize-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#98](../../atl-mfc-shared/codesnippet/cpp/csize-class_2.cpp)]"},{"pos":[3660,3715],"content":"<bpt id=\"p1\">&lt;a name=\"csize__operator__neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSize::operator !=","linkify":"<a name=\"csize__operator__neq\"></a>  CSize::operator !=","source":"<a name=\"csize__operator__neq\"></a>  CSize::operator !="},{"content":"Checks for inequality between two sizes.","pos":[3719,3759]},{"pos":[3835,3842],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Returns nonzero if the sizes are not equal, otherwise 0.","pos":[3846,3902]},{"pos":[3912,3919],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3923,4015],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#99<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/csize-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#99](../../atl-mfc-shared/codesnippet/cpp/csize-class_3.cpp)]"},{"pos":[4025,4083],"content":"<bpt id=\"p1\">&lt;a name=\"csize__operator__add_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSize::operator +=","linkify":"<a name=\"csize__operator__add_eq\"></a>  CSize::operator +=","source":"<a name=\"csize__operator__add_eq\"></a>  CSize::operator +="},{"pos":[4087,4115],"content":"Adds a size to this <ph id=\"ph1\">`CSize`</ph>.","source":"Adds a size to this `CSize`."},{"pos":[4185,4192],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4196,4289],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#100<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/csize-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#100](../../atl-mfc-shared/codesnippet/cpp/csize-class_4.cpp)]"},{"pos":[4299,4354],"content":"<bpt id=\"p1\">&lt;a name=\"csize__operator_-_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSize::operator -=","linkify":"<a name=\"csize__operator_-_eq\"></a>  CSize::operator -=","source":"<a name=\"csize__operator_-_eq\"></a>  CSize::operator -="},{"pos":[4358,4393],"content":"Subtracts a size from this <ph id=\"ph1\">`CSize`</ph>.","source":"Subtracts a size from this `CSize`."},{"pos":[4463,4470],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4474,4567],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#101<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/csize-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#101](../../atl-mfc-shared/codesnippet/cpp/csize-class_5.cpp)]"},{"pos":[4577,4631],"content":"<bpt id=\"p1\">&lt;a name=\"csize__operator__add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSize::operator +","linkify":"<a name=\"csize__operator__add\"></a>  CSize::operator +","source":"<a name=\"csize__operator__add\"></a>  CSize::operator +"},{"pos":[4635,4700],"content":"These operators add this <ph id=\"ph1\">`CSize`</ph> value to the value of parameter.","source":"These operators add this `CSize` value to the value of parameter."},{"pos":[4880,4887],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"See the following descriptions of the individual operators:","pos":[4891,4950]},{"pos":[4958,5025],"content":"<bpt id=\"p1\">**</bpt>operator +(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`size`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>This operation adds two <ph id=\"ph2\">`CSize`</ph> values.","source":"**operator +(** `size` **)**This operation adds two `CSize` values."},{"content":"<bpt id=\"p1\">**</bpt>operator +(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`point`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>This operation offsets (moves) a <bpt id=\"p3\">[</bpt>POINT<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> (or <bpt id=\"p4\">[</bpt>CPoint<ept id=\"p4\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept>) value by this <ph id=\"ph2\">`CSize`</ph> value.","pos":[5033,5253],"source":"**operator +(** `point` **)**This operation offsets (moves) a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) (or [CPoint](../../atl-mfc-shared/reference/cpoint-class.md)) value by this `CSize` value."},{"content":"The <bpt id=\"p1\">**</bpt>cx<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>cy<ept id=\"p2\">**</ept> members of this <ph id=\"ph1\">`CSize`</ph> value are added to the <bpt id=\"p3\">**</bpt>x<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>y<ept id=\"p4\">**</ept> data members of the <bpt id=\"p5\">**</bpt>POINT<ept id=\"p5\">**</ept> value.","pos":[5254,5375],"source":" The **cx** and **cy** members of this `CSize` value are added to the **x** and **y** data members of the **POINT** value."},{"content":"It is analogous to the version of <bpt id=\"p1\">[</bpt>CPoint::operator +<ept id=\"p1\">](../../atl-mfc-shared/reference/cpoint-class.md#cpoint__operator__add)</ept> that takes a <bpt id=\"p2\">[</bpt>SIZE<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> parameter.","pos":[5376,5591],"source":" It is analogous to the version of [CPoint::operator +](../../atl-mfc-shared/reference/cpoint-class.md#cpoint__operator__add) that takes a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) parameter."},{"content":"<bpt id=\"p1\">**</bpt>operator +(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`lpRect`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>This operation offsets (moves) a <bpt id=\"p3\">[</bpt>RECT<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> (or <bpt id=\"p4\">[</bpt>CRect<ept id=\"p4\">](../../atl-mfc-shared/reference/crect-class.md)</ept>) value by this <ph id=\"ph2\">`CSize`</ph> value.","pos":[5599,5817],"source":"**operator +(** `lpRect` **)**This operation offsets (moves) a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) (or [CRect](../../atl-mfc-shared/reference/crect-class.md)) value by this `CSize` value."},{"content":"The <bpt id=\"p1\">**</bpt>cx<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>cy<ept id=\"p2\">**</ept> members of this <ph id=\"ph1\">`CSize`</ph> value are added to the <bpt id=\"p3\">**</bpt>left<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>top<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>right<ept id=\"p5\">**</ept>, and <bpt id=\"p6\">**</bpt>bottom<ept id=\"p6\">**</ept> data members of the <ph id=\"ph2\">`RECT`</ph> value.","pos":[5818,5965],"source":" The **cx** and **cy** members of this `CSize` value are added to the **left**, **top**, **right**, and **bottom** data members of the `RECT` value."},{"content":"It is analogous to the version of <bpt id=\"p1\">[</bpt>CRect::operator +<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md#crect__operator__add)</ept> that takes a <bpt id=\"p2\">[</bpt>SIZE<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> parameter.","pos":[5966,6178],"source":" It is analogous to the version of [CRect::operator +](../../atl-mfc-shared/reference/crect-class.md#crect__operator__add) that takes a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) parameter."},{"pos":[6188,6195],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6199,6292],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#102<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/csize-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#102](../../atl-mfc-shared/codesnippet/cpp/csize-class_6.cpp)]"},{"pos":[6302,6353],"content":"<bpt id=\"p1\">&lt;a name=\"csize__operator_-\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CSize::operator -","linkify":"<a name=\"csize__operator_-\"></a>  CSize::operator -","source":"<a name=\"csize__operator_-\"></a>  CSize::operator -"},{"pos":[6357,6446],"content":"The first three of these operators subtract this <ph id=\"ph1\">`CSize`</ph> value to the value of parameter.","source":"The first three of these operators subtract this `CSize` value to the value of parameter."},{"pos":[6660,6667],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The fourth operator, the unary minus, changes the sign of the <ph id=\"ph1\">`CSize`</ph> value.","pos":[6671,6747],"source":"The fourth operator, the unary minus, changes the sign of the `CSize` value."},{"content":"See the following descriptions of the individual operators:","pos":[6748,6807]},{"pos":[6815,6887],"content":"<bpt id=\"p1\">**</bpt>operator -(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`size`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>This operation subtracts two <ph id=\"ph2\">`CSize`</ph> values.","source":"**operator -(** `size` **)**This operation subtracts two `CSize` values."},{"content":"<bpt id=\"p1\">**</bpt>operator -(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`point`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>This operation offsets (moves) a <bpt id=\"p3\">[</bpt>POINT<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/dd162805)</ept> or <bpt id=\"p4\">[</bpt>CPoint<ept id=\"p4\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept> value by the additive inverse of this <ph id=\"ph2\">`CSize`</ph> value.","pos":[6895,7137],"source":"**operator -(** `point` **)**This operation offsets (moves) a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) or [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) value by the additive inverse of this `CSize` value."},{"content":"The <bpt id=\"p1\">**</bpt>cx<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>cy<ept id=\"p2\">**</ept> of this <ph id=\"ph1\">`CSize`</ph> value are subtracted from the <bpt id=\"p3\">**</bpt>x<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>y<ept id=\"p4\">**</ept> data members of the <bpt id=\"p5\">**</bpt>POINT<ept id=\"p5\">**</ept> value.","pos":[7138,7258],"source":" The **cx** and **cy** of this `CSize` value are subtracted from the **x** and **y** data members of the **POINT** value."},{"content":"It is analogous to the version of <bpt id=\"p1\">[</bpt>CPoint::operator -<ept id=\"p1\">](../../atl-mfc-shared/reference/cpoint-class.md#cpoint__operator_-)</ept> that takes a <bpt id=\"p2\">[</bpt>SIZE<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> parameter.","pos":[7259,7471],"source":" It is analogous to the version of [CPoint::operator -](../../atl-mfc-shared/reference/cpoint-class.md#cpoint__operator_-) that takes a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) parameter."},{"content":"<bpt id=\"p1\">**</bpt>operator -(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`lpRect`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept>This operation offsets (moves) a <bpt id=\"p3\">[</bpt>RECT<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> or <bpt id=\"p4\">[</bpt>CRect<ept id=\"p4\">](../../atl-mfc-shared/reference/crect-class.md)</ept> value by the additive inverse of this <ph id=\"ph2\">`CSize`</ph> value.","pos":[7479,7719],"source":"**operator -(** `lpRect` **)**This operation offsets (moves) a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) or [CRect](../../atl-mfc-shared/reference/crect-class.md) value by the additive inverse of this `CSize` value."},{"content":"The <bpt id=\"p1\">**</bpt>cx<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>cy<ept id=\"p2\">**</ept> members of this <ph id=\"ph1\">`CSize`</ph> value are subtracted from the <bpt id=\"p3\">**</bpt>left<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>top<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>right<ept id=\"p5\">**</ept>, and <bpt id=\"p6\">**</bpt>bottom<ept id=\"p6\">**</ept> data members of the <ph id=\"ph2\">`RECT`</ph> value.","pos":[7720,7874],"source":" The **cx** and **cy** members of this `CSize` value are subtracted from the **left**, **top**, **right**, and **bottom** data members of the `RECT` value."},{"content":"It is analogous to the version of <bpt id=\"p1\">[</bpt>CRect::operator -<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md#crect__operator_-)</ept> that takes a <bpt id=\"p2\">[</bpt>SIZE<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> parameter.","pos":[7875,8084],"source":" It is analogous to the version of [CRect::operator -](../../atl-mfc-shared/reference/crect-class.md#crect__operator_-) that takes a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) parameter."},{"pos":[8092,8175],"content":"<bpt id=\"p1\">**</bpt>operator -( )<ept id=\"p1\">**</ept>This operation returns the additive inverse of this <ph id=\"ph1\">`CSize`</ph> value.","source":"**operator -( )**This operation returns the additive inverse of this `CSize` value."},{"pos":[8185,8192],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8196,8289],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#103<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/csize-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#103](../../atl-mfc-shared/codesnippet/cpp/csize-class_7.cpp)]"},{"pos":[8298,8306],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>MFC Sample MDI<ept id=\"p1\">](../../visual-cpp-samples.md)</ept><ph id=\"ph1\"> </ph>","pos":[8310,8356],"source":"[MFC Sample MDI](../../visual-cpp-samples.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[8359,8408],"source":" [Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CRect Class<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[8411,8473],"source":" [CRect Class](../../atl-mfc-shared/reference/crect-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CPoint Class<ept id=\"p1\">](../../atl-mfc-shared/reference/cpoint-class.md)</ept>","pos":[8476,8539],"source":" [CPoint Class](../../atl-mfc-shared/reference/cpoint-class.md)"}],"content":"---\ntitle: \"CSize Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CSize\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"SIZE\"\n  - \"dimensions, MFC\"\n  - \"dimensions\"\n  - \"CSize class\"\nms.assetid: fb2cf85a-0bc1-46f8-892b-309c108b52ae\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CSize Class\nSimilar to the Windows [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure, which implements a relative coordinate or position.  \n  \n## Syntax  \n  \n```  \nclass CSize : public tagSIZE  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSize::CSize](#csize__csize)|Constructs a `CSize` object.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSize::operator -](#csize__operator_-)|Subtracts two sizes.|  \n|[CSize::operator !=](#csize__operator__neq)|Checks for inequality between `CSize` and a size.|  \n|[CSize::operator +](#csize__operator__add)|Adds two sizes.|  \n|[CSize::operator +=](#csize__operator__add_eq)|Adds a size to `CSize`.|  \n|[CSize::operator -=](#csize__operator_-_eq)|Subtracts a size from `CSize`.|  \n|[CSize::operator ==](#csize__operator__eq_eq)|Checks for equality between `CSize` and a size.|  \n  \n## Remarks  \n This class is derived from the **SIZE** structure. This means you can pass a `CSize` in a parameter that calls for a **SIZE** and that the data members of the **SIZE** structure are accessible data members of `CSize`.  \n  \n The **cx** and **cy** members of **SIZE** (and `CSize`) are public. In addition, `CSize` implements member functions to manipulate the **SIZE** structure.  \n  \n> [!NOTE]\n>  For more information on shared utility classes (like `CSize`), see [Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md).  \n  \n## Inheritance Hierarchy  \n `tagSIZE`  \n  \n `CSize`  \n  \n## Requirements  \n **Header:** atltypes.h  \n  \n##  <a name=\"csize__csize\"></a>  CSize::CSize  \n Constructs a `CSize` object.  \n  \n```  \n \n    CSize() throw();\nCSize(\n int    \n    initCX ,  \n    int \n    initCY) throw();\nCSize(\n SIZE    \n    initSize) throw();\nCSize(\n POINT    \n    initPt) throw();\nCSize(\n DWORD    \n    dwSize) throw();\n\n \n```  \n  \n### Parameters  \n *initCX*  \n Sets the **cx** member for the `CSize`.  \n  \n *initCY*  \n Sets the **cy** member for the `CSize`.  \n  \n `initSize`  \n [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure or `CSize` object used to initialize `CSize`.  \n  \n `initPt`  \n [POINT](../../mfc/reference/point-structure1.md) structure or `CPoint` object used to initialize `CSize`.  \n  \n `dwSize`  \n `DWORD` used to initialize `CSize`. The low-order word is the **cx** member and the high-order word is the **cy** member.  \n  \n### Remarks  \n If no arguments are given, **cx** and **cy** are initialized to zero.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#97](../../atl-mfc-shared/codesnippet/cpp/csize-class_1.cpp)]  \n  \n##  <a name=\"csize__operator__eq_eq\"></a>  CSize::operator ==  \n Checks for equality between two sizes.  \n  \n```  \n \nBOOL operator==(\nSIZE   \nsize) const throw();\n\n \n```  \n  \n### Remarks  \n Returns nonzero if the sizes are equal, otherwize 0.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#98](../../atl-mfc-shared/codesnippet/cpp/csize-class_2.cpp)]  \n  \n##  <a name=\"csize__operator__neq\"></a>  CSize::operator !=  \n Checks for inequality between two sizes.  \n  \n```  \n \nBOOL operator!=(\nSIZE   \nsize) const throw();\n\n \n```  \n  \n### Remarks  \n Returns nonzero if the sizes are not equal, otherwise 0.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#99](../../atl-mfc-shared/codesnippet/cpp/csize-class_3.cpp)]  \n  \n##  <a name=\"csize__operator__add_eq\"></a>  CSize::operator +=  \n Adds a size to this `CSize`.  \n  \n```  \n \nvoid operator+=(\nSIZE   \nsize) throw();\n\n \n```  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#100](../../atl-mfc-shared/codesnippet/cpp/csize-class_4.cpp)]  \n  \n##  <a name=\"csize__operator_-_eq\"></a>  CSize::operator -=  \n Subtracts a size from this `CSize`.  \n  \n```  \n \nvoid operator-=(\nSIZE   \nsize) throw();\n\n \n```  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#101](../../atl-mfc-shared/codesnippet/cpp/csize-class_5.cpp)]  \n  \n##  <a name=\"csize__operator__add\"></a>  CSize::operator +  \n These operators add this `CSize` value to the value of parameter.  \n  \n```  \n \nCSize operator+(\nSIZE   \nsize) const throw();\n\nCPoint operator+(\nPOINT   \npoint) const throw();\n\nCRect operator+(\nconst RECT* \nlpRect) const throw();\n\n \n```  \n  \n### Remarks  \n See the following descriptions of the individual operators:  \n  \n- **operator +(** `size` **)**This operation adds two `CSize` values.  \n  \n- **operator +(** `point` **)**This operation offsets (moves) a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) (or [CPoint](../../atl-mfc-shared/reference/cpoint-class.md)) value by this `CSize` value. The **cx** and **cy** members of this `CSize` value are added to the **x** and **y** data members of the **POINT** value. It is analogous to the version of [CPoint::operator +](../../atl-mfc-shared/reference/cpoint-class.md#cpoint__operator__add) that takes a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) parameter.  \n  \n- **operator +(** `lpRect` **)**This operation offsets (moves) a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) (or [CRect](../../atl-mfc-shared/reference/crect-class.md)) value by this `CSize` value. The **cx** and **cy** members of this `CSize` value are added to the **left**, **top**, **right**, and **bottom** data members of the `RECT` value. It is analogous to the version of [CRect::operator +](../../atl-mfc-shared/reference/crect-class.md#crect__operator__add) that takes a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) parameter.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#102](../../atl-mfc-shared/codesnippet/cpp/csize-class_6.cpp)]  \n  \n##  <a name=\"csize__operator_-\"></a>  CSize::operator -  \n The first three of these operators subtract this `CSize` value to the value of parameter.  \n  \n```  \n \nCSize operator-(\nSIZE   \nsize) const throw();\n\nCPoint operator-(\nPOINT   \npoint) const throw();\n\nCRect operator-(\nconst RECT* \nlpRect) const throw();\n\nCSize operator-() const throw();\n\n \n```  \n  \n### Remarks  \n The fourth operator, the unary minus, changes the sign of the `CSize` value. See the following descriptions of the individual operators:  \n  \n- **operator -(** `size` **)**This operation subtracts two `CSize` values.  \n  \n- **operator -(** `point` **)**This operation offsets (moves) a [POINT](http://msdn.microsoft.com/library/windows/desktop/dd162805) or [CPoint](../../atl-mfc-shared/reference/cpoint-class.md) value by the additive inverse of this `CSize` value. The **cx** and **cy** of this `CSize` value are subtracted from the **x** and **y** data members of the **POINT** value. It is analogous to the version of [CPoint::operator -](../../atl-mfc-shared/reference/cpoint-class.md#cpoint__operator_-) that takes a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) parameter.  \n  \n- **operator -(** `lpRect` **)**This operation offsets (moves) a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) or [CRect](../../atl-mfc-shared/reference/crect-class.md) value by the additive inverse of this `CSize` value. The **cx** and **cy** members of this `CSize` value are subtracted from the **left**, **top**, **right**, and **bottom** data members of the `RECT` value. It is analogous to the version of [CRect::operator -](../../atl-mfc-shared/reference/crect-class.md#crect__operator_-) that takes a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) parameter.  \n  \n- **operator -( )**This operation returns the additive inverse of this `CSize` value.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#103](../../atl-mfc-shared/codesnippet/cpp/csize-class_7.cpp)]  \n  \n## See Also  \n [MFC Sample MDI](../../visual-cpp-samples.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CRect Class](../../atl-mfc-shared/reference/crect-class.md)   \n [CPoint Class](../../atl-mfc-shared/reference/cpoint-class.md)\n\n"}