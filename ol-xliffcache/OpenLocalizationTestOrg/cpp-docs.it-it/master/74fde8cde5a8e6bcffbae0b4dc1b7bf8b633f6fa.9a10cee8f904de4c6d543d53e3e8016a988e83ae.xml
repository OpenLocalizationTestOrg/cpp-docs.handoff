{"nodes":[{"pos":[12,50],"content":"CMFCRibbonPanel Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCRibbonPanel Class | Microsoft Docs","pos":[0,38]}]},{"pos":[619,640],"content":"CMFCRibbonPanel Class","linkify":"CMFCRibbonPanel Class","nodes":[{"content":"CMFCRibbonPanel Class","pos":[0,21]}]},{"content":"Implements a panel that contains a set of ribbon elements.","pos":[641,699]},{"content":"When the panel is drawn, it displays as many elements as possible, given the size of the panel.","pos":[700,795]},{"pos":[804,810],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[875,882],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[892,914],"content":"Protected Constructors","linkify":"Protected Constructors","nodes":[{"content":"Protected Constructors","pos":[0,22]}]},{"content":"Name","pos":[921,925]},{"content":"Description","pos":[926,937]},{"pos":[975,1044],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::CMFCRibbonPanel<ept id=\"p1\">](#cmfcribbonpanel__cmfcribbonpanel)</ept>","source":"[CMFCRibbonPanel::CMFCRibbonPanel](#cmfcribbonpanel__cmfcribbonpanel)"},{"pos":[1045,1099],"content":"Constructs and initializes a <ph id=\"ph1\">`CMFCRibbonPanel`</ph> object.","source":"Constructs and initializes a `CMFCRibbonPanel` object."},{"pos":[1110,1124],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1131,1135]},{"content":"Description","pos":[1136,1147]},{"pos":[1185,1230],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::Add<ept id=\"p1\">](#cmfcribbonpanel__add)</ept>","source":"[CMFCRibbonPanel::Add](#cmfcribbonpanel__add)"},{"content":"Adds a ribbon element to the panel.","pos":[1231,1266]},{"pos":[1271,1334],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::AddSeparator<ept id=\"p1\">](#cmfcribbonpanel__addseparator)</ept>","source":"[CMFCRibbonPanel::AddSeparator](#cmfcribbonpanel__addseparator)"},{"content":"Adds a separator to the ribbon panel.","pos":[1335,1372]},{"pos":[1377,1436],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::AddToolBar<ept id=\"p1\">](#cmfcribbonpanel__addtoolbar)</ept>","source":"[CMFCRibbonPanel::AddToolBar](#cmfcribbonpanel__addtoolbar)"},{"content":"Adds a toolbar to the ribbon panel.","pos":[1437,1472]},{"pos":[1477,1536],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::FindByData<ept id=\"p1\">](#cmfcribbonpanel__findbydata)</ept>","source":"[CMFCRibbonPanel::FindByData](#cmfcribbonpanel__findbydata)"},{"pos":[1542,1597],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::FindByID<ept id=\"p1\">](#cmfcribbonpanel__findbyid)</ept>","source":"[CMFCRibbonPanel::FindByID](#cmfcribbonpanel__findbyid)"},{"content":"Returns an element identified by a specified command ID.","pos":[1598,1654]},{"pos":[1659,1730],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetCaptionHeight<ept id=\"p1\">](#cmfcribbonpanel__getcaptionheight)</ept>","source":"[CMFCRibbonPanel::GetCaptionHeight](#cmfcribbonpanel__getcaptionheight)"},{"pos":[1736,1791],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetCount<ept id=\"p1\">](#cmfcribbonpanel__getcount)</ept>","source":"[CMFCRibbonPanel::GetCount](#cmfcribbonpanel__getcount)"},{"content":"Returns the number of elements in the ribbon panel.","pos":[1792,1843]},{"pos":[1848,1901],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetData<ept id=\"p1\">](#cmfcribbonpanel__getdata)</ept>","source":"[CMFCRibbonPanel::GetData](#cmfcribbonpanel__getdata)"},{"content":"Returns the user-defined data associated with the panel.","pos":[1902,1958]},{"pos":[1963,2034],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetDefaultButton<ept id=\"p1\">](#cmfcribbonpanel__getdefaultbutton)</ept>","source":"[CMFCRibbonPanel::GetDefaultButton](#cmfcribbonpanel__getdefaultbutton)"},{"pos":[2040,2107],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetDroppedDown<ept id=\"p1\">](#cmfcribbonpanel__getdroppeddown)</ept>","source":"[CMFCRibbonPanel::GetDroppedDown](#cmfcribbonpanel__getdroppeddown)"},{"pos":[2113,2172],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetElement<ept id=\"p1\">](#cmfcribbonpanel__getelement)</ept>","source":"[CMFCRibbonPanel::GetElement](#cmfcribbonpanel__getelement)"},{"content":"Returns the ribbon element located at a specified index.","pos":[2173,2229]},{"pos":[2234,2295],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetElements<ept id=\"p1\">](#cmfcribbonpanel__getelements)</ept>","source":"[CMFCRibbonPanel::GetElements](#cmfcribbonpanel__getelements)"},{"content":"Retrieves all elements that are contained in the ribbon panel.","pos":[2296,2358]},{"pos":[2363,2432],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetElementsByID<ept id=\"p1\">](#cmfcribbonpanel__getelementsbyid)</ept>","source":"[CMFCRibbonPanel::GetElementsByID](#cmfcribbonpanel__getelementsbyid)"},{"pos":[2438,2497],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetFocused<ept id=\"p1\">](#cmfcribbonpanel__getfocused)</ept>","source":"[CMFCRibbonPanel::GetFocused](#cmfcribbonpanel__getfocused)"},{"content":"Returns a focused element.","pos":[2498,2524]},{"pos":[2529,2596],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetGalleryRect<ept id=\"p1\">](#cmfcribbonpanel__getgalleryrect)</ept>","source":"[CMFCRibbonPanel::GetGalleryRect](#cmfcribbonpanel__getgalleryrect)"},{"content":"Returns a bounding rectangle of Gallery element.","pos":[2597,2645]},{"pos":[2650,2717],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetHighlighted<ept id=\"p1\">](#cmfcribbonpanel__gethighlighted)</ept>","source":"[CMFCRibbonPanel::GetHighlighted](#cmfcribbonpanel__gethighlighted)"},{"pos":[2723,2778],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetIndex<ept id=\"p1\">](#cmfcribbonpanel__getindex)</ept>","source":"[CMFCRibbonPanel::GetIndex](#cmfcribbonpanel__getindex)"},{"pos":[2784,2851],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetItemIDsList<ept id=\"p1\">](#cmfcribbonpanel__getitemidslist)</ept>","source":"[CMFCRibbonPanel::GetItemIDsList](#cmfcribbonpanel__getitemidslist)"},{"pos":[2857,2910],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetName<ept id=\"p1\">](#cmfcribbonpanel__getname)</ept>","source":"[CMFCRibbonPanel::GetName](#cmfcribbonpanel__getname)"},{"pos":[2916,2985],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetParentButton<ept id=\"p1\">](#cmfcribbonpanel__getparentbutton)</ept>","source":"[CMFCRibbonPanel::GetParentButton](#cmfcribbonpanel__getparentbutton)"},{"pos":[2991,3064],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetParentCategory<ept id=\"p1\">](#cmfcribbonpanel__getparentcategory)</ept>","source":"[CMFCRibbonPanel::GetParentCategory](#cmfcribbonpanel__getparentcategory)"},{"content":"Returns the parent category of the ribbon panel.","pos":[3065,3113]},{"pos":[3118,3189],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetParentMenuBar<ept id=\"p1\">](#cmfcribbonpanel__getparentmenubar)</ept>","source":"[CMFCRibbonPanel::GetParentMenuBar](#cmfcribbonpanel__getparentmenubar)"},{"pos":[3195,3280],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetPreferedMenuLocation<ept id=\"p1\">](#cmfcribbonpanel__getpreferedmenulocation)</ept>","source":"[CMFCRibbonPanel::GetPreferedMenuLocation](#cmfcribbonpanel__getpreferedmenulocation)"},{"pos":[3286,3345],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetPressed<ept id=\"p1\">](#cmfcribbonpanel__getpressed)</ept>","source":"[CMFCRibbonPanel::GetPressed](#cmfcribbonpanel__getpressed)"},{"pos":[3351,3404],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetRect<ept id=\"p1\">](#cmfcribbonpanel__getrect)</ept>","source":"[CMFCRibbonPanel::GetRect](#cmfcribbonpanel__getrect)"},{"pos":[3410,3485],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::GetVisibleElements<ept id=\"p1\">](#cmfcribbonpanel__getvisibleelements)</ept>","source":"[CMFCRibbonPanel::GetVisibleElements](#cmfcribbonpanel__getvisibleelements)"},{"content":"Obtains an array of visible elements.","pos":[3486,3523]},{"pos":[3528,3587],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::HasElement<ept id=\"p1\">](#cmfcribbonpanel__haselement)</ept>","source":"[CMFCRibbonPanel::HasElement](#cmfcribbonpanel__haselement)"},{"pos":[3593,3646],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::HitTest<ept id=\"p1\">](#cmfcribbonpanel__hittest)</ept>","source":"[CMFCRibbonPanel::HitTest](#cmfcribbonpanel__hittest)"},{"pos":[3652,3709],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::HitTestEx<ept id=\"p1\">](#cmfcribbonpanel__hittestex)</ept>","source":"[CMFCRibbonPanel::HitTestEx](#cmfcribbonpanel__hittestex)"},{"pos":[3715,3766],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::Insert<ept id=\"p1\">](#cmfcribbonpanel__insert)</ept>","source":"[CMFCRibbonPanel::Insert](#cmfcribbonpanel__insert)"},{"content":"Inserts a ribbon element at the given position.","pos":[3767,3814]},{"pos":[3819,3888],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::InsertSeparator<ept id=\"p1\">](#cmfcribbonpanel__insertseparator)</ept>","source":"[CMFCRibbonPanel::InsertSeparator](#cmfcribbonpanel__insertseparator)"},{"content":"Inserts a separator at the given position.","pos":[3889,3931]},{"pos":[3936,4011],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::IsCenterColumnVert<ept id=\"p1\">](#cmfcribbonpanel__iscentercolumnvert)</ept>","source":"[CMFCRibbonPanel::IsCenterColumnVert](#cmfcribbonpanel__iscentercolumnvert)"},{"content":"Specifies whether all panel elements should be centered (aligned) vertically, by column.","pos":[4012,4100]},{"pos":[4105,4166],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::IsCollapsed<ept id=\"p1\">](#cmfcribbonpanel__iscollapsed)</ept>","source":"[CMFCRibbonPanel::IsCollapsed](#cmfcribbonpanel__iscollapsed)"},{"pos":[4172,4237],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::IsHighlighted<ept id=\"p1\">](#cmfcribbonpanel__ishighlighted)</ept>","source":"[CMFCRibbonPanel::IsHighlighted](#cmfcribbonpanel__ishighlighted)"},{"pos":[4243,4314],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::IsJustifyColumns<ept id=\"p1\">](#cmfcribbonpanel__isjustifycolumns)</ept>","source":"[CMFCRibbonPanel::IsJustifyColumns](#cmfcribbonpanel__isjustifycolumns)"},{"content":"Specifies whether all panel columns have the same width.","pos":[4315,4371]},{"pos":[4376,4437],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::IsMainPanel<ept id=\"p1\">](#cmfcribbonpanel__ismainpanel)</ept>","source":"[CMFCRibbonPanel::IsMainPanel](#cmfcribbonpanel__ismainpanel)"},{"pos":[4443,4502],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::IsMenuMode<ept id=\"p1\">](#cmfcribbonpanel__ismenumode)</ept>","source":"[CMFCRibbonPanel::IsMenuMode](#cmfcribbonpanel__ismenumode)"},{"pos":[4508,4591],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::MakeGalleryItemVisible<ept id=\"p1\">](#cmfcribbonpanel__makegalleryitemvisible)</ept>","source":"[CMFCRibbonPanel::MakeGalleryItemVisible](#cmfcribbonpanel__makegalleryitemvisible)"},{"content":"Scrolls the gallery to make the specified Ribbon element visible.","pos":[4592,4657]},{"pos":[4662,4711],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::OnKey<ept id=\"p1\">](#cmfcribbonpanel__onkey)</ept>","source":"[CMFCRibbonPanel::OnKey](#cmfcribbonpanel__onkey)"},{"pos":[4717,4780],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::RecalcWidths<ept id=\"p1\">](#cmfcribbonpanel__recalcwidths)</ept>","source":"[CMFCRibbonPanel::RecalcWidths](#cmfcribbonpanel__recalcwidths)"},{"pos":[4786,4837],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::Remove<ept id=\"p1\">](#cmfcribbonpanel__remove)</ept>","source":"[CMFCRibbonPanel::Remove](#cmfcribbonpanel__remove)"},{"content":"Removes and optionally deletes an element located at the specified index.","pos":[4838,4911]},{"pos":[4916,4973],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::RemoveAll<ept id=\"p1\">](#cmfcribbonpanel__removeall)</ept>","source":"[CMFCRibbonPanel::RemoveAll](#cmfcribbonpanel__removeall)"},{"content":"Removes all elements from the ribbon panel.","pos":[4974,5017]},{"pos":[5022,5075],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::Replace<ept id=\"p1\">](#cmfcribbonpanel__replace)</ept>","source":"[CMFCRibbonPanel::Replace](#cmfcribbonpanel__replace)"},{"content":"Replaces one element with another based on their respective index values.","pos":[5076,5149]},{"pos":[5154,5215],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::ReplaceByID<ept id=\"p1\">](#cmfcribbonpanel__replacebyid)</ept>","source":"[CMFCRibbonPanel::ReplaceByID](#cmfcribbonpanel__replacebyid)"},{"content":"Replaces one element with another based on a specified command ID.","pos":[5216,5282]},{"pos":[5287,5364],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::SetCenterColumnVert<ept id=\"p1\">](#cmfcribbonpanel__setcentercolumnvert)</ept>","source":"[CMFCRibbonPanel::SetCenterColumnVert](#cmfcribbonpanel__setcentercolumnvert)"},{"content":"Orders the panel to align elements vertically, by column.","pos":[5365,5422]},{"pos":[5427,5480],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::SetData<ept id=\"p1\">](#cmfcribbonpanel__setdata)</ept>","source":"[CMFCRibbonPanel::SetData](#cmfcribbonpanel__setdata)"},{"content":"Associates user-defined data with the ribbon panel.","pos":[5481,5532]},{"pos":[5537,5604],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::SetElementMenu<ept id=\"p1\">](#cmfcribbonpanel__setelementmenu)</ept>","source":"[CMFCRibbonPanel::SetElementMenu](#cmfcribbonpanel__setelementmenu)"},{"content":"Assigns a popup menu to the element that has the given command ID.","pos":[5605,5671]},{"pos":[5676,5741],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::SetElementRTC<ept id=\"p1\">](#cmfcribbonpanel__setelementrtc)</ept>","source":"[CMFCRibbonPanel::SetElementRTC](#cmfcribbonpanel__setelementrtc)"},{"content":"Adds a ribbon element specified by the provided runtime class information to the ribbon panel.","pos":[5742,5836]},{"pos":[5841,5914],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::SetElementRTCByID<ept id=\"p1\">](#cmfcribbonpanel__setelementrtcbyid)</ept>","source":"[CMFCRibbonPanel::SetElementRTCByID](#cmfcribbonpanel__setelementrtcbyid)"},{"content":"Adds a ribbon element specified by the provided runtime class information to the ribbon panel.","pos":[5915,6009]},{"pos":[6014,6073],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::SetFocused<ept id=\"p1\">](#cmfcribbonpanel__setfocused)</ept>","source":"[CMFCRibbonPanel::SetFocused](#cmfcribbonpanel__setfocused)"},{"content":"Sets focus to the specified Ribbon element.","pos":[6074,6117]},{"pos":[6122,6195],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::SetJustifyColumns<ept id=\"p1\">](#cmfcribbonpanel__setjustifycolumns)</ept>","source":"[CMFCRibbonPanel::SetJustifyColumns](#cmfcribbonpanel__setjustifycolumns)"},{"content":"Enables or disables column justification.","pos":[6196,6237]},{"pos":[6242,6295],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::SetKeys<ept id=\"p1\">](#cmfcribbonpanel__setkeys)</ept>","source":"[CMFCRibbonPanel::SetKeys](#cmfcribbonpanel__setkeys)"},{"content":"Sets the keyboard shortcut that displays the ribbon panel.","pos":[6296,6354]},{"pos":[6359,6416],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel::ShowPopup<ept id=\"p1\">](#cmfcribbonpanel__showpopup)</ept>","source":"[CMFCRibbonPanel::ShowPopup](#cmfcribbonpanel__showpopup)"},{"pos":[6427,6434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Ribbon panels are logical groupings of related tasks that you create within ribbon categories.","pos":[6438,6532]},{"content":"As the size of the ribbon changes, the panel layout automatically adjusts to display as many elements as possible.","pos":[6533,6647]},{"pos":[6654,6852],"content":"You can get a ribbon panels that is contained in a ribbon category by calling the <bpt id=\"p1\">[</bpt>CMFCRibbonCategory::GetPanel<ept id=\"p1\">](../../mfc/reference/cmfcribboncategory-class.md#cmfcribboncategory__getpanel)</ept> method.","source":"You can get a ribbon panels that is contained in a ribbon category by calling the [CMFCRibbonCategory::GetPanel](../../mfc/reference/cmfcribboncategory-class.md#cmfcribboncategory__getpanel) method."},{"pos":[6861,6868],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates how to configure a <ph id=\"ph1\">`CMFCRibbonPanel`</ph> object by using various methods in the <ph id=\"ph2\">`CMFCRibbonPanel`</ph> class.","pos":[6872,7007],"source":"The following example demonstrates how to configure a `CMFCRibbonPanel` object by using various methods in the `CMFCRibbonPanel` class."},{"content":"The example shows how to set the keyboard shortcut that displays the ribbon panel, align elements in the panel vertically by column, and enable column justification.","pos":[7008,7173]},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>MS Office 2007 Demo sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[7174,7265],"source":" This code snippet is part of the [MS Office 2007 Demo sample](../../visual-cpp-samples.md)."},{"pos":[7272,7377],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFC_MSOffice2007Demo#10<ept id=\"p2\">](../../mfc/reference/codesnippet/cpp/cmfcribbonpanel-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFC_MSOffice2007Demo#10](../../mfc/reference/codesnippet/cpp/cmfcribbonpanel-class_1.cpp)]"},{"pos":[7386,7407],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[7411,7458],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[7465,7528],"content":"<bpt id=\"p1\">[</bpt>CMFCRibbonPanel<ept id=\"p1\">](../../mfc/reference/cmfcribbonpanel-class.md)</ept>","source":"[CMFCRibbonPanel](../../mfc/reference/cmfcribbonpanel-class.md)"},{"pos":[7537,7549],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[7553,7581],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxRibbonPanel.h","source":"**Header:** afxRibbonPanel.h"},{"pos":[7591,7648],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::Add","linkify":"<a name=\"cmfcribbonpanel__add\"></a>  CMFCRibbonPanel::Add","source":"<a name=\"cmfcribbonpanel__add\"></a>  CMFCRibbonPanel::Add"},{"content":"Appends the specified ribbon element to the array of ribbon elements that is contained in the ribbon panel.","pos":[7652,7759]},{"pos":[7835,7845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in, out] <ph id=\"ph1\">`pElem`</ph>","pos":[7849,7866],"source":"[in, out] `pElem`"},{"content":"Pointer to a ribbon element.","pos":[7870,7898]},{"pos":[7908,7915],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7925,8000],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__addseparator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::AddSeparator","linkify":"<a name=\"cmfcribbonpanel__addseparator\"></a>  CMFCRibbonPanel::AddSeparator","source":"<a name=\"cmfcribbonpanel__addseparator\"></a>  CMFCRibbonPanel::AddSeparator"},{"content":"Adds a separator to the ribbon panel.","pos":[8004,8041]},{"pos":[8095,8102],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to add a separator to the ribbon panel.","pos":[8106,8162]},{"content":"The separator will be added next to the ribbon element that was added by the previous call to <bpt id=\"p1\">[</bpt>CMFCRibbonPanel::Add<ept id=\"p1\">](#cmfcribbonpanel__add)</ept>.","pos":[8163,8303],"source":" The separator will be added next to the ribbon element that was added by the previous call to [CMFCRibbonPanel::Add](#cmfcribbonpanel__add)."},{"content":"To insert a separator at a given position, call <bpt id=\"p1\">[</bpt>CMFCRibbonPanel::InsertSeparator<ept id=\"p1\">](#cmfcribbonpanel__insertseparator)</ept>.","pos":[8304,8422],"source":" To insert a separator at a given position, call [CMFCRibbonPanel::InsertSeparator](#cmfcribbonpanel__insertseparator)."},{"pos":[8432,8503],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__addtoolbar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::AddToolBar","linkify":"<a name=\"cmfcribbonpanel__addtoolbar\"></a>  CMFCRibbonPanel::AddToolBar","source":"<a name=\"cmfcribbonpanel__addtoolbar\"></a>  CMFCRibbonPanel::AddToolBar"},{"content":"Adds a toolbar to the ribbon panel.","pos":[8507,8542]},{"pos":[8702,8712],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiToolbarResID`</ph>","pos":[8716,8737],"source":"[in] `uiToolbarResID`"},{"content":"Specifies the resource ID of the toolbar to add.","pos":[8741,8789]},{"content":"[in] <ph id=\"ph1\">`uiColdResID`</ph>","pos":[8796,8814],"source":"[in] `uiColdResID`"},{"content":"Specifies the resource ID of the toolbar's cold images.","pos":[8818,8873]},{"content":"[in] <ph id=\"ph1\">`uiHotResID`</ph>","pos":[8880,8897],"source":"[in] `uiHotResID`"},{"content":"Specifies the resource ID of the toolbar's hot images.","pos":[8901,8955]},{"content":"[in] <ph id=\"ph1\">`uiDisabledResID`</ph>","pos":[8962,8984],"source":"[in] `uiDisabledResID`"},{"content":"Specifies the resource ID of the toolbar's disabled images.","pos":[8988,9047]},{"pos":[9057,9069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Call this method to add a toolbar to the ribbon panel.","pos":[9073,9127]},{"content":"The toolbar will be added next to the ribbon element added by the previous call to <bpt id=\"p1\">[</bpt>CMFCRibbonPanel::Add<ept id=\"p1\">](#cmfcribbonpanel__add)</ept>.","pos":[9128,9257],"source":" The toolbar will be added next to the ribbon element added by the previous call to [CMFCRibbonPanel::Add](#cmfcribbonpanel__add)."},{"pos":[9267,9274],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9278,9427],"content":"For more information about toolbars, hot images, cold images, and disabled images, see <bpt id=\"p1\">[</bpt>CMFCToolBar Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md)</ept>.","source":"For more information about toolbars, hot images, cold images, and disabled images, see [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md)."},{"pos":[9437,9518],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__cmfcribbonpanel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::CMFCRibbonPanel","linkify":"<a name=\"cmfcribbonpanel__cmfcribbonpanel\"></a>  CMFCRibbonPanel::CMFCRibbonPanel","source":"<a name=\"cmfcribbonpanel__cmfcribbonpanel\"></a>  CMFCRibbonPanel::CMFCRibbonPanel"},{"pos":[9522,9622],"content":"Constructs and initializes a <bpt id=\"p1\">[</bpt>CMFCRibbonPanel<ept id=\"p1\">](../../mfc/reference/cmfcribbonpanel-class.md)</ept> object.","source":"Constructs and initializes a [CMFCRibbonPanel](../../mfc/reference/cmfcribbonpanel-class.md) object."},{"pos":[9770,9780],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszName`</ph>","pos":[9784,9799],"source":"[in] `lpszName`"},{"content":"The name of the ribbon panel.","pos":[9803,9832]},{"content":"[in] <ph id=\"ph1\">`hIcon`</ph>","pos":[9839,9851],"source":"[in] `hIcon`"},{"content":"Handle to the icon of the default button for the ribbon panel.","pos":[9855,9917]},{"content":"[in] <ph id=\"ph1\">`pPaletteButton`</ph>","pos":[9924,9945],"source":"[in] `pPaletteButton`"},{"content":"Pointer to a ribbon gallery for the ribbon panel.","pos":[9949,9998]},{"pos":[10008,10079],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__findbydata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::FindByData","linkify":"<a name=\"cmfcribbonpanel__findbydata\"></a>  CMFCRibbonPanel::FindByData","source":"<a name=\"cmfcribbonpanel__findbydata\"></a>  CMFCRibbonPanel::FindByData"},{"content":"Retrieves the ribbon element that is associated with the specified data.","pos":[10083,10155]},{"pos":[10245,10255],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwData`</ph>","pos":[10259,10272],"source":"[in] `dwData`"},{"content":"The data associated with a ribbon element.","pos":[10276,10318]},{"pos":[10328,10340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10344,10419],"content":"Pointer to a ribbon element if the method was successful; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"Pointer to a ribbon element if the method was successful; otherwise `NULL`."},{"pos":[10429,10436],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10446,10513],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__findbyid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::FindByID","linkify":"<a name=\"cmfcribbonpanel__findbyid\"></a>  CMFCRibbonPanel::FindByID","source":"<a name=\"cmfcribbonpanel__findbyid\"></a>  CMFCRibbonPanel::FindByID"},{"content":"Retrieves the ribbon element that is identified by the specified command ID.","pos":[10517,10593]},{"pos":[10677,10687],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiCmdID`</ph>","pos":[10691,10705],"source":"[in] `uiCmdID`"},{"content":"The command ID of a ribbon element.","pos":[10709,10744]},{"pos":[10754,10766],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10770,10919],"content":"The ribbon element that is identified by the specified command ID; otherwise <ph id=\"ph1\">`NULL`</ph> if no ribbon element is identified with the specified command ID.","source":"The ribbon element that is identified by the specified command ID; otherwise `NULL` if no ribbon element is identified with the specified command ID."},{"pos":[10929,11012],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getcaptionheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetCaptionHeight","linkify":"<a name=\"cmfcribbonpanel__getcaptionheight\"></a>  CMFCRibbonPanel::GetCaptionHeight","source":"<a name=\"cmfcribbonpanel__getcaptionheight\"></a>  CMFCRibbonPanel::GetCaptionHeight"},{"content":"Retrieves the height of a caption for the ribbon panel.","pos":[11016,11071]},{"pos":[11129,11141],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height, in pixels, of a caption for the ribbon panel.","pos":[11145,11202]},{"pos":[11212,11219],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11229,11296],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetCount","linkify":"<a name=\"cmfcribbonpanel__getcount\"></a>  CMFCRibbonPanel::GetCount","source":"<a name=\"cmfcribbonpanel__getcount\"></a>  CMFCRibbonPanel::GetCount"},{"content":"Retrieves the number of ribbon elements that are contained in the ribbon panel.","pos":[11300,11379]},{"pos":[11429,11441],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of ribbon elements that are contained in the ribbon panel.","pos":[11445,11514]},{"pos":[11524,11589],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetData","linkify":"<a name=\"cmfcribbonpanel__getdata\"></a>  CMFCRibbonPanel::GetData","source":"<a name=\"cmfcribbonpanel__getdata\"></a>  CMFCRibbonPanel::GetData"},{"content":"Returns the user-defined data associated with the panel.","pos":[11593,11649]},{"pos":[11704,11716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user-defined data associated with the panel.","pos":[11720,11768]},{"pos":[11778,11861],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getdefaultbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetDefaultButton","linkify":"<a name=\"cmfcribbonpanel__getdefaultbutton\"></a>  CMFCRibbonPanel::GetDefaultButton","source":"<a name=\"cmfcribbonpanel__getdefaultbutton\"></a>  CMFCRibbonPanel::GetDefaultButton"},{"content":"Retrieves the default button for the ribbon panel.","pos":[11865,11915]},{"pos":[11978,11990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The default button for the ribbon panel.","pos":[11994,12034]},{"pos":[12044,12051],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default button is displayed when a ribbon panel has insufficient space to display its ribbon elements.","pos":[12055,12161]},{"pos":[12171,12250],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getdroppeddown\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetDroppedDown","linkify":"<a name=\"cmfcribbonpanel__getdroppeddown\"></a>  CMFCRibbonPanel::GetDroppedDown","source":"<a name=\"cmfcribbonpanel__getdroppeddown\"></a>  CMFCRibbonPanel::GetDroppedDown"},{"content":"Retrieves a pointer to a ribbon element if its pop-up menu is dropped down.","pos":[12254,12329]},{"pos":[12404,12416],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12420,12560],"content":"Pointer to the ribbon element that has its pop-up menu dropped down; otherwise <ph id=\"ph1\">`NULL`</ph> if no ribbon element has its pop-up menu dropped down.","source":"Pointer to the ribbon element that has its pop-up menu dropped down; otherwise `NULL` if no ribbon element has its pop-up menu dropped down."},{"pos":[12570,12577],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Only ribbon elements that are contained in the ribbon panel are tested.","pos":[12581,12652]},{"pos":[12662,12733],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getelement\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetElement","linkify":"<a name=\"cmfcribbonpanel__getelement\"></a>  CMFCRibbonPanel::GetElement","source":"<a name=\"cmfcribbonpanel__getelement\"></a>  CMFCRibbonPanel::GetElement"},{"content":"Returns the ribbon element located at a specified index.","pos":[12737,12793]},{"pos":[12877,12887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nIndex`</ph>","pos":[12891,12904],"source":"[in] `nIndex`"},{"content":"Specifies the zero-based index of the element to retrieve.","pos":[12908,12966]},{"pos":[12976,12988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12992,13141],"content":"A valid pointer to the base ribbon element located at position <ph id=\"ph1\">`nIndex`</ph> in the ribbon panel, or <ph id=\"ph2\">`NULL`</ph> if there is no element at the specified index.","source":"A valid pointer to the base ribbon element located at position `nIndex` in the ribbon panel, or `NULL` if there is no element at the specified index."},{"pos":[13151,13224],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getelements\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetElements","linkify":"<a name=\"cmfcribbonpanel__getelements\"></a>  CMFCRibbonPanel::GetElements","source":"<a name=\"cmfcribbonpanel__getelements\"></a>  CMFCRibbonPanel::GetElements"},{"content":"Retrieves all ribbon elements that are contained in the ribbon panel.","pos":[13228,13297]},{"pos":[13411,13421],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`arElements`</ph>","pos":[13425,13443],"source":"[out] `arElements`"},{"content":"An array to fill with all the ribbon elements that are contained in the ribbon panel.","pos":[13447,13532]},{"pos":[13542,13549],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13559,13640],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getelementsbyid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetElementsByID","linkify":"<a name=\"cmfcribbonpanel__getelementsbyid\"></a>  CMFCRibbonPanel::GetElementsByID","source":"<a name=\"cmfcribbonpanel__getelementsbyid\"></a>  CMFCRibbonPanel::GetElementsByID"},{"content":"Adds ribbon elements that have the specified command ID to the specified array.","pos":[13644,13723]},{"pos":[13857,13867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiCmdID`</ph>","pos":[13871,13885],"source":"[in] `uiCmdID`"},{"content":"Command ID for a ribbon element.","pos":[13889,13921]},{"content":"[in] <ph id=\"ph1\">`arElements`</ph>","pos":[13928,13945],"source":"[in] `arElements`"},{"content":"Array of ribbon elements.","pos":[13949,13974]},{"pos":[13984,13991],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Only ribbon elements that are contained in the ribbon panel are tested.","pos":[13995,14066]},{"pos":[14076,14155],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__gethighlighted\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetHighlighted","linkify":"<a name=\"cmfcribbonpanel__gethighlighted\"></a>  CMFCRibbonPanel::GetHighlighted","source":"<a name=\"cmfcribbonpanel__gethighlighted\"></a>  CMFCRibbonPanel::GetHighlighted"},{"content":"Retrieves the ribbon element that is highlighted on the ribbon panel.","pos":[14159,14228]},{"pos":[14303,14315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Pointer to the ribbon element that is highlighted on the ribbon panel.","pos":[14319,14389]},{"pos":[14399,14406],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14416,14483],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getindex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetIndex","linkify":"<a name=\"cmfcribbonpanel__getindex\"></a>  CMFCRibbonPanel::GetIndex","source":"<a name=\"cmfcribbonpanel__getindex\"></a>  CMFCRibbonPanel::GetIndex"},{"content":"Retrieves the zero-based index of the specified ribbon element from the array of ribbon elements that are contained in the ribbon panel.","pos":[14487,14623]},{"pos":[14712,14722],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pElem`</ph>","pos":[14726,14738],"source":"[in] `pElem`"},{"content":"Pointer to a ribbon element.","pos":[14742,14770]},{"pos":[14780,14792],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero-based index of the specified ribbon element if the method was successful; otherwise -1.","pos":[14796,14888]},{"pos":[14898,14905],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14915,14994],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getitemidslist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetItemIDsList","linkify":"<a name=\"cmfcribbonpanel__getitemidslist\"></a>  CMFCRibbonPanel::GetItemIDsList","source":"<a name=\"cmfcribbonpanel__getitemidslist\"></a>  CMFCRibbonPanel::GetItemIDsList"},{"content":"Retrieves the command IDs for all ribbon elements in the ribbon panel.","pos":[14998,15068]},{"pos":[15155,15165],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`lstItems`</ph>","pos":[15169,15185],"source":"[out] `lstItems`"},{"content":"The list of command IDs for ribbon elements that are contained in the ribbon panel.","pos":[15189,15272]},{"pos":[15282,15289],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15299,15364],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getname\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetName","linkify":"<a name=\"cmfcribbonpanel__getname\"></a>  CMFCRibbonPanel::GetName","source":"<a name=\"cmfcribbonpanel__getname\"></a>  CMFCRibbonPanel::GetName"},{"content":"Retrieves the name of the ribbon panel.","pos":[15368,15407]},{"pos":[15460,15472],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the ribbon panel.","pos":[15476,15505]},{"pos":[15515,15522],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15532,15613],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getparentbutton\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetParentButton","linkify":"<a name=\"cmfcribbonpanel__getparentbutton\"></a>  CMFCRibbonPanel::GetParentButton","source":"<a name=\"cmfcribbonpanel__getparentbutton\"></a>  CMFCRibbonPanel::GetParentButton"},{"pos":[15792,15804],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15814,15821],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15831,15916],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getparentcategory\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetParentCategory","linkify":"<a name=\"cmfcribbonpanel__getparentcategory\"></a>  CMFCRibbonPanel::GetParentCategory","source":"<a name=\"cmfcribbonpanel__getparentcategory\"></a>  CMFCRibbonPanel::GetParentCategory"},{"content":"Returns the parent category of the ribbon panel.","pos":[15920,15968]},{"pos":[16043,16055],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A pointer to the ribbon category that contains this ribbon panel.","pos":[16059,16124]},{"pos":[16134,16217],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getparentmenubar\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetParentMenuBar","linkify":"<a name=\"cmfcribbonpanel__getparentmenubar\"></a>  CMFCRibbonPanel::GetParentMenuBar","source":"<a name=\"cmfcribbonpanel__getparentmenubar\"></a>  CMFCRibbonPanel::GetParentMenuBar"},{"pos":[16398,16410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16420,16427],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16437,16534],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getpreferedmenulocation\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetPreferedMenuLocation","linkify":"<a name=\"cmfcribbonpanel__getpreferedmenulocation\"></a>  CMFCRibbonPanel::GetPreferedMenuLocation","source":"<a name=\"cmfcribbonpanel__getpreferedmenulocation\"></a>  CMFCRibbonPanel::GetPreferedMenuLocation"},{"content":"Retrieves the preferred display rectangle for the pop-up menu of the ribbon panel.","pos":[16538,16620]},{"pos":[16699,16709],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`rect`</ph>","pos":[16713,16725],"source":"[out] `rect`"},{"content":"This parameter is not used.","pos":[16729,16756]},{"pos":[16766,16778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16782,16805],"content":"Always returns <ph id=\"ph1\">`FALSE`</ph>.","source":"Always returns `FALSE`."},{"pos":[16815,16822],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method always returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[16826,16861],"source":"This method always returns `FALSE`."},{"content":"Override this method to retrieve the preferred display rectangle for the pop-up menu of the ribbon panel.","pos":[16862,16967]},{"pos":[16977,17048],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getpressed\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetPressed","linkify":"<a name=\"cmfcribbonpanel__getpressed\"></a>  CMFCRibbonPanel::GetPressed","source":"<a name=\"cmfcribbonpanel__getpressed\"></a>  CMFCRibbonPanel::GetPressed"},{"content":"Retrieves a pointer to a ribbon element on the ribbon panel if the user currently presses it.","pos":[17052,17145]},{"pos":[17216,17228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17232,17313],"content":"A pointer to a ribbon element if the user currently presses it; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to a ribbon element if the user currently presses it; otherwise `NULL`."},{"pos":[17323,17330],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17340,17405],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetRect","linkify":"<a name=\"cmfcribbonpanel__getrect\"></a>  CMFCRibbonPanel::GetRect","source":"<a name=\"cmfcribbonpanel__getrect\"></a>  CMFCRibbonPanel::GetRect"},{"content":"Retrieves the display rectangle for the ribbon panel.","pos":[17409,17462]},{"pos":[17520,17532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The display rectangle for the ribbon panel.","pos":[17536,17579]},{"pos":[17589,17596],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17606,17677],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__haselement\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::HasElement","linkify":"<a name=\"cmfcribbonpanel__haselement\"></a>  CMFCRibbonPanel::HasElement","source":"<a name=\"cmfcribbonpanel__haselement\"></a>  CMFCRibbonPanel::HasElement"},{"content":"Indicates whether the ribbon panel contains the specified ribbon element.","pos":[17681,17754]},{"pos":[17844,17854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pElem`</ph>","pos":[17858,17870],"source":"[in] `pElem`"},{"content":"Pointer to a ribbon element.","pos":[17874,17902]},{"pos":[17912,17924],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17928,18012],"content":"<ph id=\"ph1\">`TRUE`</ph> if the ribbon panel contains the specified ribbon element; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the ribbon panel contains the specified ribbon element; otherwise `FALSE`."},{"pos":[18022,18029],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18039,18108],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__highlight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::Highlight","linkify":"<a name=\"cmfcribbonpanel__highlight\"></a>  CMFCRibbonPanel::Highlight","source":"<a name=\"cmfcribbonpanel__highlight\"></a>  CMFCRibbonPanel::Highlight"},{"content":"Sets the highlight color for the selected ribbon panel and for the ribbon element specified by the point.","pos":[18112,18217]},{"pos":[18302,18312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bHighlight`</ph>","pos":[18316,18333],"source":"[in] `bHighlight`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to highlight the ribbon panel; <ph id=\"ph2\">`FALSE`</ph> to unhighlight the ribbon panel.","pos":[18336,18415],"source":" `TRUE` to highlight the ribbon panel; `FALSE` to unhighlight the ribbon panel."},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[18422,18434],"source":"[in] `point`"},{"content":"The x and y coordinates of the pointer, relative to the upper-left corner of the window.","pos":[18438,18526]},{"pos":[18536,18543],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18553,18618],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__hittest\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::HitTest","linkify":"<a name=\"cmfcribbonpanel__hittest\"></a>  CMFCRibbonPanel::HitTest","source":"<a name=\"cmfcribbonpanel__hittest\"></a>  CMFCRibbonPanel::HitTest"},{"content":"Retrieves a ribbon element if the specified point is located in it.","pos":[18622,18689]},{"pos":[18806,18816],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[18820,18832],"source":"[in] `point`"},{"content":"The x and y coordinates of the pointer, relative to the upper-left corner of the window.","pos":[18836,18924]},{"content":"[in] <ph id=\"ph1\">`bCheckPanelCaption`</ph>","pos":[18931,18956],"source":"[in] `bCheckPanelCaption`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to test the ribbon panel caption; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[18959,19019],"source":" `TRUE` to test the ribbon panel caption; otherwise `FALSE`."},{"pos":[19029,19041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19045,19131],"content":"Pointer to a ribbon element if the specified point is located in it; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"Pointer to a ribbon element if the specified point is located in it; otherwise `NULL`."},{"pos":[19141,19148],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Only ribbon elements that are contained in the ribbon panel are tested.","pos":[19152,19223]},{"pos":[19233,19302],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__hittestex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::HitTestEx","linkify":"<a name=\"cmfcribbonpanel__hittestex\"></a>  CMFCRibbonPanel::HitTestEx","source":"<a name=\"cmfcribbonpanel__hittestex\"></a>  CMFCRibbonPanel::HitTestEx"},{"content":"Retrieves the zero-based index of the ribbon element that has the specified point located in it.","pos":[19306,19402]},{"pos":[19476,19486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[19490,19502],"source":"[in] `point`"},{"content":"The x and y coordinates of the pointer, relative to the upper-left corner of the window.","pos":[19506,19594]},{"pos":[19604,19616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The zero-based index of the ribbon element that has the specified point located in it; otherwise -1.","pos":[19620,19720]},{"pos":[19730,19737],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Only ribbon elements that are contained in the ribbon panel are tested.","pos":[19741,19812]},{"pos":[19822,19885],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__insert\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::Insert","linkify":"<a name=\"cmfcribbonpanel__insert\"></a>  CMFCRibbonPanel::Insert","source":"<a name=\"cmfcribbonpanel__insert\"></a>  CMFCRibbonPanel::Insert"},{"content":"Inserts the specified ribbon element at the specified position in the array of ribbon elements that is contained in the ribbon panel.","pos":[19889,20022]},{"pos":[20115,20125],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in, out] <ph id=\"ph1\">`pElem`</ph>","pos":[20129,20146],"source":"[in, out] `pElem`"},{"content":"Pointer to a ribbon element.","pos":[20150,20178]},{"content":"[in] <ph id=\"ph1\">`nIndex`</ph>","pos":[20185,20198],"source":"[in] `nIndex`"},{"content":"Zero-based value, ranging from -1 to the number of ribbon elements that are contained in the array.","pos":[20202,20301]},{"pos":[20311,20323],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20327,20401],"content":"<ph id=\"ph1\">`TRUE`</ph> if the ribbon element was inserted successfully; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the ribbon element was inserted successfully; otherwise `FALSE`."},{"pos":[20411,20418],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the value of <ph id=\"ph1\">`nIndex`</ph> is -1, or if <ph id=\"ph2\">`nIndex`</ph> equals the number of ribbon elements in the array, the specified ribbon element is added to the end of the array.","pos":[20422,20582],"source":"If the value of `nIndex` is -1, or if `nIndex` equals the number of ribbon elements in the array, the specified ribbon element is added to the end of the array."},{"content":"If the value of <ph id=\"ph1\">`nIndex`</ph> is out of range, the method will fail.","pos":[20583,20646],"source":" If the value of `nIndex` is out of range, the method will fail."},{"pos":[20656,20737],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__insertseparator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::InsertSeparator","linkify":"<a name=\"cmfcribbonpanel__insertseparator\"></a>  CMFCRibbonPanel::InsertSeparator","source":"<a name=\"cmfcribbonpanel__insertseparator\"></a>  CMFCRibbonPanel::InsertSeparator"},{"content":"Inserts a separator at the given position.","pos":[20741,20783]},{"pos":[20853,20863],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nIndex`</ph>","pos":[20867,20880],"source":"[in] `nIndex`"},{"content":"Specifies the zero-based index where the separator is inserted.","pos":[20884,20947]},{"pos":[20957,20969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20973,21048],"content":"<ph id=\"ph1\">`TRUE`</ph> if the separator has been inserted successfully; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the separator has been inserted successfully; otherwise, `FALSE`."},{"pos":[21058,21065],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to insert a separator at the position specified by <ph id=\"ph1\">`nIndex`</ph>.","pos":[21069,21146],"source":"Call this method to insert a separator at the position specified by `nIndex`."},{"content":"To insert a separator next to the most recently added ribbon element, call <bpt id=\"p1\">[</bpt>CMFCRibbonPanel::AddSeparator<ept id=\"p1\">](#cmfcribbonpanel__addseparator)</ept>.","pos":[21147,21286],"source":" To insert a separator next to the most recently added ribbon element, call [CMFCRibbonPanel::AddSeparator](#cmfcribbonpanel__addseparator)."},{"pos":[21296,21383],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__iscentercolumnvert\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::IsCenterColumnVert","linkify":"<a name=\"cmfcribbonpanel__iscentercolumnvert\"></a>  CMFCRibbonPanel::IsCenterColumnVert","source":"<a name=\"cmfcribbonpanel__iscentercolumnvert\"></a>  CMFCRibbonPanel::IsCenterColumnVert"},{"content":"Indicates whether the vertical positions of ribbon elements are centered within their display rectangle.","pos":[21387,21491]},{"pos":[21552,21564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21568,21683],"content":"<ph id=\"ph1\">`TRUE`</ph> if the vertical positions of ribbon elements are centered within their display rectangle; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the vertical positions of ribbon elements are centered within their display rectangle; otherwise `FALSE`."},{"pos":[21693,21766],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__iscollapsed\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::IsCollapsed","linkify":"<a name=\"cmfcribbonpanel__iscollapsed\"></a>  CMFCRibbonPanel::IsCollapsed","source":"<a name=\"cmfcribbonpanel__iscollapsed\"></a>  CMFCRibbonPanel::IsCollapsed"},{"content":"Indicates whether the display size of the ribbon panel is minimized in the horizontal direction.","pos":[21770,21866]},{"pos":[21920,21932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21936,22043],"content":"<ph id=\"ph1\">`TRUE`</ph> if the display size of the ribbon panel is minimized in the horizontal direction; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the display size of the ribbon panel is minimized in the horizontal direction; otherwise `FALSE`."},{"pos":[22053,22060],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a ribbon panel is collapsed, it only displays its default button, its name, and a drop-down arrow.","pos":[22064,22167]},{"pos":[22177,22254],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__ishighlighted\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::IsHighlighted","linkify":"<a name=\"cmfcribbonpanel__ishighlighted\"></a>  CMFCRibbonPanel::IsHighlighted","source":"<a name=\"cmfcribbonpanel__ishighlighted\"></a>  CMFCRibbonPanel::IsHighlighted"},{"content":"Indicates whether the display of the ribbon panel is highlighted.","pos":[22258,22323]},{"pos":[22379,22391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22395,22471],"content":"<ph id=\"ph1\">`TRUE`</ph> if the display of the ribbon panel is highlighted; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the display of the ribbon panel is highlighted; otherwise `FALSE`."},{"pos":[22481,22488],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The display of a ribbon panel is highlighted when the pointer is over it.","pos":[22492,22565]},{"pos":[22575,22658],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__isjustifycolumns\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::IsJustifyColumns","linkify":"<a name=\"cmfcribbonpanel__isjustifycolumns\"></a>  CMFCRibbonPanel::IsJustifyColumns","source":"<a name=\"cmfcribbonpanel__isjustifycolumns\"></a>  CMFCRibbonPanel::IsJustifyColumns"},{"content":"Indicates whether the display dimensions of ribbon elements that are in the same column in the ribbon panel are set to the same width.","pos":[22662,22796]},{"pos":[22855,22867],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22871,23016],"content":"<ph id=\"ph1\">`TRUE`</ph> if the display dimensions of ribbon elements that are in the same column in the ribbon panel are set to the same width; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the display dimensions of ribbon elements that are in the same column in the ribbon panel are set to the same width; otherwise `FALSE`."},{"pos":[23026,23099],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__ismainpanel\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::IsMainPanel","linkify":"<a name=\"cmfcribbonpanel__ismainpanel\"></a>  CMFCRibbonPanel::IsMainPanel","source":"<a name=\"cmfcribbonpanel__ismainpanel\"></a>  CMFCRibbonPanel::IsMainPanel"},{"content":"Indicates whether the ribbon panel is the main ribbon panel.","pos":[23103,23163]},{"pos":[23225,23237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23241,23264],"content":"Always returns <ph id=\"ph1\">`FALSE`</ph>.","source":"Always returns `FALSE`."},{"pos":[23274,23281],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method always returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[23285,23320],"source":"This method always returns `FALSE`."},{"content":"Override this method to indicate whether the ribbon panel is the main ribbon panel.","pos":[23321,23404]},{"content":"The main ribbon panel is displayed when the user selects the application button.","pos":[23411,23491]},{"pos":[23501,23572],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__ismenumode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::IsMenuMode","linkify":"<a name=\"cmfcribbonpanel__ismenumode\"></a>  CMFCRibbonPanel::IsMenuMode","source":"<a name=\"cmfcribbonpanel__ismenumode\"></a>  CMFCRibbonPanel::IsMenuMode"},{"pos":[23728,23740],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23750,23757],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23767,23828],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__onkey\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::OnKey","linkify":"<a name=\"cmfcribbonpanel__onkey\"></a>  CMFCRibbonPanel::OnKey","source":"<a name=\"cmfcribbonpanel__onkey\"></a>  CMFCRibbonPanel::OnKey"},{"pos":[23991,24001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[24005,24017],"content":"[in] <ph id=\"ph1\">`nChar`</ph>","source":"[in] `nChar`"},{"pos":[24027,24039],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24049,24056],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24066,24141],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__recalcwidths\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::RecalcWidths","linkify":"<a name=\"cmfcribbonpanel__recalcwidths\"></a>  CMFCRibbonPanel::RecalcWidths","source":"<a name=\"cmfcribbonpanel__recalcwidths\"></a>  CMFCRibbonPanel::RecalcWidths"},{"content":"Recalculates the width of each display layout configuration for the ribbon panel.","pos":[24145,24226]},{"pos":[24306,24316],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[24320,24330],"source":"[in] `pDC`"},{"content":"Pointer to a device context for the ribbon panel.","pos":[24334,24383]},{"content":"[in] <ph id=\"ph1\">`nHeight`</ph>","pos":[24390,24404],"source":"[in] `nHeight`"},{"content":"The height of the ribbon panel.","pos":[24408,24439]},{"pos":[24449,24456],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A ribbon panel changes its layout configuration as the available width changes.","pos":[24460,24539]},{"pos":[24549,24612],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__remove\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::Remove","linkify":"<a name=\"cmfcribbonpanel__remove\"></a>  CMFCRibbonPanel::Remove","source":"<a name=\"cmfcribbonpanel__remove\"></a>  CMFCRibbonPanel::Remove"},{"content":"Removes and optionally deletes an element located at the specified index.","pos":[24616,24689]},{"pos":[24765,24775],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nIndex`</ph>","pos":[24779,24792],"source":"[in] `nIndex`"},{"content":"Specifies the zero-based index of the element that is removed from the ribbon panel.","pos":[24796,24880]},{"content":"[in] <ph id=\"ph1\">`bDelete`</ph>","pos":[24887,24901],"source":"[in] `bDelete`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to delete the element being removed; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[24904,24968],"source":" `TRUE` to delete the element being removed; otherwise, `FALSE`."},{"pos":[24978,24990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24994,25163],"content":"<ph id=\"ph1\">`TRUE`</ph> if the element has been removed and deleted (if <ph id=\"ph2\">`bDelete`</ph> is <ph id=\"ph3\">`TRUE`</ph>); <ph id=\"ph4\">`FALSE`</ph> if the element was not removed or if there is no ribbon element located at <ph id=\"ph5\">`nIndex`</ph>.","source":"`TRUE` if the element has been removed and deleted (if `bDelete` is `TRUE`); `FALSE` if the element was not removed or if there is no ribbon element located at `nIndex`."},{"pos":[25173,25180],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to remove an element from the ribbon panel.","pos":[25184,25244]},{"pos":[25254,25323],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__removeall\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::RemoveAll","linkify":"<a name=\"cmfcribbonpanel__removeall\"></a>  CMFCRibbonPanel::RemoveAll","source":"<a name=\"cmfcribbonpanel__removeall\"></a>  CMFCRibbonPanel::RemoveAll"},{"content":"Deletes all ribbon elements from the ribbon panel.","pos":[25327,25377]},{"pos":[25420,25427],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"All ribbon elements are deleted from the ribbon panel and destroyed.","pos":[25431,25499]},{"pos":[25509,25574],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__replace\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::Replace","linkify":"<a name=\"cmfcribbonpanel__replace\"></a>  CMFCRibbonPanel::Replace","source":"<a name=\"cmfcribbonpanel__replace\"></a>  CMFCRibbonPanel::Replace"},{"content":"Replaces one element with another based on their index value.","pos":[25578,25639]},{"pos":[25725,25735],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nIndex`</ph>","pos":[25739,25752],"source":"[in] `nIndex`"},{"content":"Specifies the zero-based index of the element to replace.","pos":[25756,25813]},{"content":"[in] [out] <ph id=\"ph1\">`pElem`</ph>","pos":[25820,25838],"source":"[in] [out] `pElem`"},{"content":"A valid pointer to the element that replaces the original element.","pos":[25842,25908]},{"pos":[25918,25930],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25934,26126],"content":"<ph id=\"ph1\">`TRUE`</ph> if the original ribbon element has been replaced successfully by the new ribbon element; <ph id=\"ph2\">`FALSE`</ph> if the ribbon element was not replaced or if there is no element at the specified index.","source":"`TRUE` if the original ribbon element has been replaced successfully by the new ribbon element; `FALSE` if the ribbon element was not replaced or if there is no element at the specified index."},{"pos":[26136,26143],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26147,26257],"content":"To replace a ribbon element by command ID, call <bpt id=\"p1\">[</bpt>CMFCRibbonPanel::ReplaceByID<ept id=\"p1\">](#cmfcribbonpanel__replacebyid)</ept>.","source":"To replace a ribbon element by command ID, call [CMFCRibbonPanel::ReplaceByID](#cmfcribbonpanel__replacebyid)."},{"pos":[26267,26340],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__replacebyid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::ReplaceByID","linkify":"<a name=\"cmfcribbonpanel__replacebyid\"></a>  CMFCRibbonPanel::ReplaceByID","source":"<a name=\"cmfcribbonpanel__replacebyid\"></a>  CMFCRibbonPanel::ReplaceByID"},{"content":"Replaces one element with another based on a specified command ID.","pos":[26344,26410]},{"pos":[26502,26512],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiCmdID`</ph>","pos":[26516,26530],"source":"[in] `uiCmdID`"},{"content":"Specifies the command ID of the element to replace.","pos":[26534,26585]},{"content":"[in] [out] <ph id=\"ph1\">`pElem`</ph>","pos":[26592,26610],"source":"[in] [out] `pElem`"},{"content":"A valid pointer to the element that will replace the original element.","pos":[26614,26684]},{"pos":[26694,26706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26710,26916],"content":"<ph id=\"ph1\">`TRUE`</ph> if the original ribbon element has been replaced successfully by the new ribbon element; <ph id=\"ph2\">`FALSE`</ph> if the ribbon element was not replaced or if no element with the specified command ID actually exists.","source":"`TRUE` if the original ribbon element has been replaced successfully by the new ribbon element; `FALSE` if the ribbon element was not replaced or if no element with the specified command ID actually exists."},{"pos":[26926,26933],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26937,27043],"content":"To replace a ribbon element based on position, call <bpt id=\"p1\">[</bpt>CMFCRibbonPanel::Replace<ept id=\"p1\">](#cmfcribbonpanel__replace)</ept>.","source":"To replace a ribbon element based on position, call [CMFCRibbonPanel::Replace](#cmfcribbonpanel__replace)."},{"pos":[27053,27142],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__setcentercolumnvert\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::SetCenterColumnVert","linkify":"<a name=\"cmfcribbonpanel__setcentercolumnvert\"></a>  CMFCRibbonPanel::SetCenterColumnVert","source":"<a name=\"cmfcribbonpanel__setcentercolumnvert\"></a>  CMFCRibbonPanel::SetCenterColumnVert"},{"content":"Enables or disables the centering of the vertical positions of ribbon elements within their display rectangle.","pos":[27146,27256]},{"pos":[27328,27338],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bSet`</ph>","pos":[27342,27353],"source":"[in] `bSet`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to center the vertical positions of ribbon elements within their display rectangle; <ph id=\"ph2\">`FALSE`</ph> to disable this feature.","pos":[27356,27480],"source":" `TRUE` to center the vertical positions of ribbon elements within their display rectangle; `FALSE` to disable this feature."},{"pos":[27490,27497],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27507,27572],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__setdata\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::SetData","linkify":"<a name=\"cmfcribbonpanel__setdata\"></a>  CMFCRibbonPanel::SetData","source":"<a name=\"cmfcribbonpanel__setdata\"></a>  CMFCRibbonPanel::SetData"},{"content":"Associates user-defined data with the ribbon panel.","pos":[27576,27627]},{"pos":[27687,27697],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwData`</ph>","pos":[27701,27714],"source":"[in] `dwData`"},{"content":"Specifies the user-defined data to set.","pos":[27718,27757]},{"pos":[27767,27774],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to associate user-defined data with the ribbon panel.","pos":[27778,27848]},{"pos":[27858,27937],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__setelementmenu\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::SetElementMenu","linkify":"<a name=\"cmfcribbonpanel__setelementmenu\"></a>  CMFCRibbonPanel::SetElementMenu","source":"<a name=\"cmfcribbonpanel__setelementmenu\"></a>  CMFCRibbonPanel::SetElementMenu"},{"content":"Assigns a popup menu to the element that has the given command ID.","pos":[27941,28007]},{"pos":[28266,28276],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiCmdID`</ph>","pos":[28280,28294],"source":"[in] `uiCmdID`"},{"content":"Specifies the command ID of the ribbon element where the menu is added.","pos":[28298,28369]},{"content":"[in] <ph id=\"ph1\">`hMenu`</ph>","pos":[28376,28388],"source":"[in] `hMenu`"},{"content":"Specifies the handle to the Windows menu to add to the ribbon panel.","pos":[28392,28460]},{"content":"[in] <ph id=\"ph1\">`bIsDefautCommand`</ph>","pos":[28467,28490],"source":"[in] `bIsDefautCommand`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to specify that the command associated with the ribbon element should be executed if the ribbon element is clicked.","pos":[28493,28616],"source":" `TRUE` to specify that the command associated with the ribbon element should be executed if the ribbon element is clicked."},{"content":"In this case, the menu is only opened when the user clicks the arrow next to the ribbon element.","pos":[28617,28713]},{"content":"<ph id=\"ph1\">`FALSE`</ph> to specify that the command associated with the ribbon element should not be executed if the ribbon element is clicked.","pos":[28714,28841],"source":"`FALSE` to specify that the command associated with the ribbon element should not be executed if the ribbon element is clicked."},{"content":"In this case, the popup menu appears regardless of where the user clicks on the element.","pos":[28842,28930]},{"content":"[in] <ph id=\"ph1\">`bRightAlign`</ph>","pos":[28937,28955],"source":"[in] `bRightAlign`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to specify that the popup menu is right-aligned; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[28958,29034],"source":" `TRUE` to specify that the popup menu is right-aligned; otherwise, `FALSE`."},{"content":"[in] <ph id=\"ph1\">`uiMenuResID`</ph>","pos":[29041,29059],"source":"[in] `uiMenuResID`"},{"content":"Specifies the resource ID of the menu to add to the ribbon panel.","pos":[29063,29128]},{"pos":[29138,29150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29154,29233],"content":"<ph id=\"ph1\">`TRUE`</ph> if the menu has been assigned to the ribbon element; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the menu has been assigned to the ribbon element; otherwise, `FALSE`."},{"pos":[29243,29250],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to assign a popup menu to the ribbon element that has the given command ID.","pos":[29254,29346]},{"pos":[29356,29433],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__setelementrtc\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::SetElementRTC","linkify":"<a name=\"cmfcribbonpanel__setelementrtc\"></a>  CMFCRibbonPanel::SetElementRTC","source":"<a name=\"cmfcribbonpanel__setelementrtc\"></a>  CMFCRibbonPanel::SetElementRTC"},{"content":"Adds the ribbon element that is specified by the provided runtime class information to the ribbon panel.","pos":[29437,29541]},{"pos":[29642,29652],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nIndex`</ph>","pos":[29656,29669],"source":"[in] `nIndex`"},{"content":"Specifies the zero-based index of the ribbon element to add.","pos":[29673,29733]},{"content":"[in] [out] <ph id=\"ph1\">`pRTC`</ph>","pos":[29740,29757],"source":"[in] [out] `pRTC`"},{"content":"A pointer to the runtime class information for the ribbon element that is added to the ribbon panel.","pos":[29761,29861]},{"pos":[29871,29883],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ribbon element that was created by using the specified runtime class information.","pos":[29887,29972]},{"pos":[29982,29989],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you want to add a custom element (for example, a color button) to the ribbon panel, you must specify the custom element's runtime class information.","pos":[29993,30144]},{"content":"The ribbon stores this information, creates the custom element, and replaces an existing element that is located (identified by) the specified command ID.","pos":[30145,30299]},{"content":"The ribbon then returns a pointer to the newly created element.","pos":[30300,30363]},{"pos":[30373,30458],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__setelementrtcbyid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::SetElementRTCByID","linkify":"<a name=\"cmfcribbonpanel__setelementrtcbyid\"></a>  CMFCRibbonPanel::SetElementRTCByID","source":"<a name=\"cmfcribbonpanel__setelementrtcbyid\"></a>  CMFCRibbonPanel::SetElementRTCByID"},{"content":"Adds a ribbon element that is specified by the provided runtime class information to the ribbon panel.","pos":[30462,30564]},{"pos":[30671,30681],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`uiCmdID`</ph>","pos":[30685,30699],"source":"[in] `uiCmdID`"},{"content":"Specifies the command ID of the ribbon element to add.","pos":[30703,30757]},{"content":"[in] [out] <ph id=\"ph1\">`pRTC`</ph>","pos":[30764,30781],"source":"[in] [out] `pRTC`"},{"content":"A pointer to the runtime class information associated with the ribbon element that is added to the ribbon panel.","pos":[30785,30897]},{"pos":[30907,30919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ribbon element that was created by using the specified runtime class information.","pos":[30923,31008]},{"pos":[31018,31025],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you want to add a custom element (for example, a color button) to the ribbon panel, you must specify the custom element's runtime class information.","pos":[31029,31180]},{"content":"The ribbon stores this information, creates the custom element, and replaces an existing element located by the specified command ID.","pos":[31181,31314]},{"content":"It then returns a pointer to the newly created element.","pos":[31315,31370]},{"pos":[31380,31387],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31391,31461],"content":"The following example shows how to use the <ph id=\"ph1\">`SetElementRTCByID`</ph> method:","source":"The following example shows how to use the `SetElementRTCByID` method:"},{"pos":[32053,32138],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__setjustifycolumns\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::SetJustifyColumns","linkify":"<a name=\"cmfcribbonpanel__setjustifycolumns\"></a>  CMFCRibbonPanel::SetJustifyColumns","source":"<a name=\"cmfcribbonpanel__setjustifycolumns\"></a>  CMFCRibbonPanel::SetJustifyColumns"},{"content":"Enables or disables the adjustment of the width of ribbon elements in the same column.","pos":[32142,32228]},{"pos":[32298,32308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`bSet`</ph>","pos":[32312,32323],"source":"[in] `bSet`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to adjust the width of ribbon elements in the same column to the width of the largest ribbon element in the column; <ph id=\"ph2\">`FALSE`</ph> to disable this width adjustment.","pos":[32326,32491],"source":" `TRUE` to adjust the width of ribbon elements in the same column to the width of the largest ribbon element in the column; `FALSE` to disable this width adjustment."},{"pos":[32501,32508],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this feature is enabled in a ribbon panel, the widths of ribbon elements in the same column are adjusted to the width of the largest ribbon element in the same column.","pos":[32512,32684]},{"pos":[32694,32759],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__setkeys\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::SetKeys","linkify":"<a name=\"cmfcribbonpanel__setkeys\"></a>  CMFCRibbonPanel::SetKeys","source":"<a name=\"cmfcribbonpanel__setkeys\"></a>  CMFCRibbonPanel::SetKeys"},{"content":"Sets the keytip for the default button of the ribbon panel.","pos":[32763,32822]},{"pos":[32882,32892],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszKeys`</ph>","pos":[32896,32911],"source":"[in] `lpszKeys`"},{"content":"The keytip for the default button of the ribbon panel.","pos":[32915,32969]},{"pos":[32979,32986],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default button is displayed when a ribbon panel has insufficient space to display its ribbon elements.","pos":[32990,33096]},{"pos":[33106,33175],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__showpopup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::ShowPopup","linkify":"<a name=\"cmfcribbonpanel__showpopup\"></a>  CMFCRibbonPanel::ShowPopup","source":"<a name=\"cmfcribbonpanel__showpopup\"></a>  CMFCRibbonPanel::ShowPopup"},{"content":"Creates and displays a pop-up menu for the ribbon panel.","pos":[33179,33235]},{"pos":[33341,33351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pButton`</ph>","pos":[33355,33369],"source":"[in] `pButton`"},{"content":"Pointer to the default button for the ribbon panel.","pos":[33373,33424]},{"pos":[33434,33446],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33450,33545],"content":"Pointer to the pop-up menu for the ribbon panel if the method was successful; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"Pointer to the pop-up menu for the ribbon panel if the method was successful; otherwise `NULL`."},{"pos":[33555,33562],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The pop-up menu for the ribbon panel is only available when the display of the ribbon panel is collapsed.","pos":[33566,33671]},{"pos":[33681,33752],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__setfocused\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::SetFocused","linkify":"<a name=\"cmfcribbonpanel__setfocused\"></a>  CMFCRibbonPanel::SetFocused","source":"<a name=\"cmfcribbonpanel__setfocused\"></a>  CMFCRibbonPanel::SetFocused"},{"content":"Sets focus to the specified Ribbon element.","pos":[33756,33799]},{"pos":[33878,33888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a Ribbon element that receives focus.","pos":[33907,33957]},{"pos":[33967,33974],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33984,34079],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__makegalleryitemvisible\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::MakeGalleryItemVisible","linkify":"<a name=\"cmfcribbonpanel__makegalleryitemvisible\"></a>  CMFCRibbonPanel::MakeGalleryItemVisible","source":"<a name=\"cmfcribbonpanel__makegalleryitemvisible\"></a>  CMFCRibbonPanel::MakeGalleryItemVisible"},{"content":"Scrolls the gallery to make the specified Ribbon element visible.","pos":[34083,34148]},{"pos":[34235,34245],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a Ribbon element to show.","pos":[34260,34298]},{"pos":[34308,34315],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[34325,34404],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__iswindows7look\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::IsWindows7Look","linkify":"<a name=\"cmfcribbonpanel__iswindows7look\"></a>  CMFCRibbonPanel::IsWindows7Look","source":"<a name=\"cmfcribbonpanel__iswindows7look\"></a>  CMFCRibbonPanel::IsWindows7Look"},{"content":"Indicates whether the parent ribbon has Windows 7 look (small rectangular application button).","pos":[34408,34502]},{"pos":[34559,34571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34575,34641],"content":"<ph id=\"ph1\">`TRUE`</ph> if the parent ribbon has Windows 7 look; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the parent ribbon has Windows 7 look; otherwise `FALSE`."},{"pos":[34651,34658],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[34668,34755],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getvisibleelements\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetVisibleElements","linkify":"<a name=\"cmfcribbonpanel__getvisibleelements\"></a>  CMFCRibbonPanel::GetVisibleElements","source":"<a name=\"cmfcribbonpanel__getvisibleelements\"></a>  CMFCRibbonPanel::GetVisibleElements"},{"content":"Retrieves an array of visible elements.","pos":[34759,34798]},{"pos":[34921,34931],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"When the function returns, this parameter contains an array of visible elements.","pos":[34951,35031]},{"pos":[35041,35048],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35058,35137],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getgalleryrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetGalleryRect","linkify":"<a name=\"cmfcribbonpanel__getgalleryrect\"></a>  CMFCRibbonPanel::GetGalleryRect","source":"<a name=\"cmfcribbonpanel__getgalleryrect\"></a>  CMFCRibbonPanel::GetGalleryRect"},{"content":"Returns a bounding rectangle of a Gallery element.","pos":[35141,35191]},{"pos":[35240,35252],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Size and position of the Gallery element within this panel.","pos":[35256,35315]},{"pos":[35325,35332],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35342,35413],"content":"<bpt id=\"p1\">&lt;a name=\"cmfcribbonpanel__getfocused\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CMFCRibbonPanel::GetFocused","linkify":"<a name=\"cmfcribbonpanel__getfocused\"></a>  CMFCRibbonPanel::GetFocused","source":"<a name=\"cmfcribbonpanel__getfocused\"></a>  CMFCRibbonPanel::GetFocused"},{"content":"Returns a focused element.","pos":[35417,35443]},{"pos":[35514,35526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35530,35571],"content":"A pointer to a focused element or <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to a focused element or `NULL`."},{"pos":[35581,35588],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35597,35605],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[35609,35657],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[35660,35707],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CObject Class<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[35710,35765],"source":" [CObject Class](../../mfc/reference/cobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMFCRibbonCategory Class<ept id=\"p1\">](../../mfc/reference/cmfcribboncategory-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[35768,35845],"source":" [CMFCRibbonCategory Class](../../mfc/reference/cmfcribboncategory-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CMFCRibbonBaseElement Class<ept id=\"p1\">](../../mfc/reference/cmfcribbonbaseelement-class.md)</ept>","pos":[35848,35930],"source":" [CMFCRibbonBaseElement Class](../../mfc/reference/cmfcribbonbaseelement-class.md)"}],"content":"---\ntitle: \"CMFCRibbonPanel Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCRibbonPanel\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCRibbonPanel class\"\nms.assetid: 51d70749-1140-4386-b103-f14082049ba6\ncaps.latest.revision: 34\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCRibbonPanel Class\nImplements a panel that contains a set of ribbon elements. When the panel is drawn, it displays as many elements as possible, given the size of the panel.  \n  \n## Syntax  \n  \n```  \nclass CMFCRibbonPanel : public CObject  \n```  \n  \n## Members  \n  \n### Protected Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCRibbonPanel::CMFCRibbonPanel](#cmfcribbonpanel__cmfcribbonpanel)|Constructs and initializes a `CMFCRibbonPanel` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCRibbonPanel::Add](#cmfcribbonpanel__add)|Adds a ribbon element to the panel.|  \n|[CMFCRibbonPanel::AddSeparator](#cmfcribbonpanel__addseparator)|Adds a separator to the ribbon panel.|  \n|[CMFCRibbonPanel::AddToolBar](#cmfcribbonpanel__addtoolbar)|Adds a toolbar to the ribbon panel.|  \n|[CMFCRibbonPanel::FindByData](#cmfcribbonpanel__findbydata)||  \n|[CMFCRibbonPanel::FindByID](#cmfcribbonpanel__findbyid)|Returns an element identified by a specified command ID.|  \n|[CMFCRibbonPanel::GetCaptionHeight](#cmfcribbonpanel__getcaptionheight)||  \n|[CMFCRibbonPanel::GetCount](#cmfcribbonpanel__getcount)|Returns the number of elements in the ribbon panel.|  \n|[CMFCRibbonPanel::GetData](#cmfcribbonpanel__getdata)|Returns the user-defined data associated with the panel.|  \n|[CMFCRibbonPanel::GetDefaultButton](#cmfcribbonpanel__getdefaultbutton)||  \n|[CMFCRibbonPanel::GetDroppedDown](#cmfcribbonpanel__getdroppeddown)||  \n|[CMFCRibbonPanel::GetElement](#cmfcribbonpanel__getelement)|Returns the ribbon element located at a specified index.|  \n|[CMFCRibbonPanel::GetElements](#cmfcribbonpanel__getelements)|Retrieves all elements that are contained in the ribbon panel.|  \n|[CMFCRibbonPanel::GetElementsByID](#cmfcribbonpanel__getelementsbyid)||  \n|[CMFCRibbonPanel::GetFocused](#cmfcribbonpanel__getfocused)|Returns a focused element.|  \n|[CMFCRibbonPanel::GetGalleryRect](#cmfcribbonpanel__getgalleryrect)|Returns a bounding rectangle of Gallery element.|  \n|[CMFCRibbonPanel::GetHighlighted](#cmfcribbonpanel__gethighlighted)||  \n|[CMFCRibbonPanel::GetIndex](#cmfcribbonpanel__getindex)||  \n|[CMFCRibbonPanel::GetItemIDsList](#cmfcribbonpanel__getitemidslist)||  \n|[CMFCRibbonPanel::GetName](#cmfcribbonpanel__getname)||  \n|[CMFCRibbonPanel::GetParentButton](#cmfcribbonpanel__getparentbutton)||  \n|[CMFCRibbonPanel::GetParentCategory](#cmfcribbonpanel__getparentcategory)|Returns the parent category of the ribbon panel.|  \n|[CMFCRibbonPanel::GetParentMenuBar](#cmfcribbonpanel__getparentmenubar)||  \n|[CMFCRibbonPanel::GetPreferedMenuLocation](#cmfcribbonpanel__getpreferedmenulocation)||  \n|[CMFCRibbonPanel::GetPressed](#cmfcribbonpanel__getpressed)||  \n|[CMFCRibbonPanel::GetRect](#cmfcribbonpanel__getrect)||  \n|[CMFCRibbonPanel::GetVisibleElements](#cmfcribbonpanel__getvisibleelements)|Obtains an array of visible elements.|  \n|[CMFCRibbonPanel::HasElement](#cmfcribbonpanel__haselement)||  \n|[CMFCRibbonPanel::HitTest](#cmfcribbonpanel__hittest)||  \n|[CMFCRibbonPanel::HitTestEx](#cmfcribbonpanel__hittestex)||  \n|[CMFCRibbonPanel::Insert](#cmfcribbonpanel__insert)|Inserts a ribbon element at the given position.|  \n|[CMFCRibbonPanel::InsertSeparator](#cmfcribbonpanel__insertseparator)|Inserts a separator at the given position.|  \n|[CMFCRibbonPanel::IsCenterColumnVert](#cmfcribbonpanel__iscentercolumnvert)|Specifies whether all panel elements should be centered (aligned) vertically, by column.|  \n|[CMFCRibbonPanel::IsCollapsed](#cmfcribbonpanel__iscollapsed)||  \n|[CMFCRibbonPanel::IsHighlighted](#cmfcribbonpanel__ishighlighted)||  \n|[CMFCRibbonPanel::IsJustifyColumns](#cmfcribbonpanel__isjustifycolumns)|Specifies whether all panel columns have the same width.|  \n|[CMFCRibbonPanel::IsMainPanel](#cmfcribbonpanel__ismainpanel)||  \n|[CMFCRibbonPanel::IsMenuMode](#cmfcribbonpanel__ismenumode)||  \n|[CMFCRibbonPanel::MakeGalleryItemVisible](#cmfcribbonpanel__makegalleryitemvisible)|Scrolls the gallery to make the specified Ribbon element visible.|  \n|[CMFCRibbonPanel::OnKey](#cmfcribbonpanel__onkey)||  \n|[CMFCRibbonPanel::RecalcWidths](#cmfcribbonpanel__recalcwidths)||  \n|[CMFCRibbonPanel::Remove](#cmfcribbonpanel__remove)|Removes and optionally deletes an element located at the specified index.|  \n|[CMFCRibbonPanel::RemoveAll](#cmfcribbonpanel__removeall)|Removes all elements from the ribbon panel.|  \n|[CMFCRibbonPanel::Replace](#cmfcribbonpanel__replace)|Replaces one element with another based on their respective index values.|  \n|[CMFCRibbonPanel::ReplaceByID](#cmfcribbonpanel__replacebyid)|Replaces one element with another based on a specified command ID.|  \n|[CMFCRibbonPanel::SetCenterColumnVert](#cmfcribbonpanel__setcentercolumnvert)|Orders the panel to align elements vertically, by column.|  \n|[CMFCRibbonPanel::SetData](#cmfcribbonpanel__setdata)|Associates user-defined data with the ribbon panel.|  \n|[CMFCRibbonPanel::SetElementMenu](#cmfcribbonpanel__setelementmenu)|Assigns a popup menu to the element that has the given command ID.|  \n|[CMFCRibbonPanel::SetElementRTC](#cmfcribbonpanel__setelementrtc)|Adds a ribbon element specified by the provided runtime class information to the ribbon panel.|  \n|[CMFCRibbonPanel::SetElementRTCByID](#cmfcribbonpanel__setelementrtcbyid)|Adds a ribbon element specified by the provided runtime class information to the ribbon panel.|  \n|[CMFCRibbonPanel::SetFocused](#cmfcribbonpanel__setfocused)|Sets focus to the specified Ribbon element.|  \n|[CMFCRibbonPanel::SetJustifyColumns](#cmfcribbonpanel__setjustifycolumns)|Enables or disables column justification.|  \n|[CMFCRibbonPanel::SetKeys](#cmfcribbonpanel__setkeys)|Sets the keyboard shortcut that displays the ribbon panel.|  \n|[CMFCRibbonPanel::ShowPopup](#cmfcribbonpanel__showpopup)||  \n  \n## Remarks  \n Ribbon panels are logical groupings of related tasks that you create within ribbon categories. As the size of the ribbon changes, the panel layout automatically adjusts to display as many elements as possible.  \n  \n You can get a ribbon panels that is contained in a ribbon category by calling the [CMFCRibbonCategory::GetPanel](../../mfc/reference/cmfcribboncategory-class.md#cmfcribboncategory__getpanel) method.  \n  \n## Example  \n The following example demonstrates how to configure a `CMFCRibbonPanel` object by using various methods in the `CMFCRibbonPanel` class. The example shows how to set the keyboard shortcut that displays the ribbon panel, align elements in the panel vertically by column, and enable column justification. This code snippet is part of the [MS Office 2007 Demo sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_MSOffice2007Demo#10](../../mfc/reference/codesnippet/cpp/cmfcribbonpanel-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CMFCRibbonPanel](../../mfc/reference/cmfcribbonpanel-class.md)  \n  \n## Requirements  \n **Header:** afxRibbonPanel.h  \n  \n##  <a name=\"cmfcribbonpanel__add\"></a>  CMFCRibbonPanel::Add  \n Appends the specified ribbon element to the array of ribbon elements that is contained in the ribbon panel.  \n  \n```  \n \nvirtual void Add(\nCMFCRibbonBaseElement* pElem);\n```  \n  \n### Parameters  \n [in, out] `pElem`  \n Pointer to a ribbon element.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__addseparator\"></a>  CMFCRibbonPanel::AddSeparator  \n Adds a separator to the ribbon panel.  \n  \n```  \nvirtual void AddSeparator();\n```  \n  \n### Remarks  \n Call this method to add a separator to the ribbon panel. The separator will be added next to the ribbon element that was added by the previous call to [CMFCRibbonPanel::Add](#cmfcribbonpanel__add). To insert a separator at a given position, call [CMFCRibbonPanel::InsertSeparator](#cmfcribbonpanel__insertseparator).  \n  \n##  <a name=\"cmfcribbonpanel__addtoolbar\"></a>  CMFCRibbonPanel::AddToolBar  \n Adds a toolbar to the ribbon panel.  \n  \n```  \n \nCMFCRibbonButtonsGroup* AddToolBar(\nUINT uiToolbarResID,  \nUINT uiColdResID = 0,  \nUINT uiHotResID = 0,  \nUINT uiDisabledResID = 0);\n```  \n  \n### Parameters  \n [in] `uiToolbarResID`  \n Specifies the resource ID of the toolbar to add.  \n  \n [in] `uiColdResID`  \n Specifies the resource ID of the toolbar's cold images.  \n  \n [in] `uiHotResID`  \n Specifies the resource ID of the toolbar's hot images.  \n  \n [in] `uiDisabledResID`  \n Specifies the resource ID of the toolbar's disabled images.  \n  \n### Return Value  \n Call this method to add a toolbar to the ribbon panel. The toolbar will be added next to the ribbon element added by the previous call to [CMFCRibbonPanel::Add](#cmfcribbonpanel__add).  \n  \n### Remarks  \n For more information about toolbars, hot images, cold images, and disabled images, see [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md).  \n  \n##  <a name=\"cmfcribbonpanel__cmfcribbonpanel\"></a>  CMFCRibbonPanel::CMFCRibbonPanel  \n Constructs and initializes a [CMFCRibbonPanel](../../mfc/reference/cmfcribbonpanel-class.md) object.  \n  \n```  \n \nCMFCRibbonPanel(\nLPCTSTR lpszName = NULL,  \nHICON hIcon = NULL);\n\n \nCMFCRibbonPanel(\nCMFCRibbonGallery* pPaletteButton);\n```  \n  \n### Parameters  \n [in] `lpszName`  \n The name of the ribbon panel.  \n  \n [in] `hIcon`  \n Handle to the icon of the default button for the ribbon panel.  \n  \n [in] `pPaletteButton`  \n Pointer to a ribbon gallery for the ribbon panel.  \n  \n##  <a name=\"cmfcribbonpanel__findbydata\"></a>  CMFCRibbonPanel::FindByData  \n Retrieves the ribbon element that is associated with the specified data.  \n  \n```  \n \nCMFCRibbonBaseElement* FindByData(\nDWORD_PTR dwData) const;\n\n \n```  \n  \n### Parameters  \n [in] `dwData`  \n The data associated with a ribbon element.  \n  \n### Return Value  \n Pointer to a ribbon element if the method was successful; otherwise `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__findbyid\"></a>  CMFCRibbonPanel::FindByID  \n Retrieves the ribbon element that is identified by the specified command ID.  \n  \n```  \n \nCMFCRibbonBaseElement* FindByID(\nUINT uiCmdID) const;\n\n \n```  \n  \n### Parameters  \n [in] `uiCmdID`  \n The command ID of a ribbon element.  \n  \n### Return Value  \n The ribbon element that is identified by the specified command ID; otherwise `NULL` if no ribbon element is identified with the specified command ID.  \n  \n##  <a name=\"cmfcribbonpanel__getcaptionheight\"></a>  CMFCRibbonPanel::GetCaptionHeight  \n Retrieves the height of a caption for the ribbon panel.  \n  \n```  \nint GetCaptionHeight() const;\n\n \n```  \n  \n### Return Value  \n The height, in pixels, of a caption for the ribbon panel.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__getcount\"></a>  CMFCRibbonPanel::GetCount  \n Retrieves the number of ribbon elements that are contained in the ribbon panel.  \n  \n```  \nint GetCount() const;\n\n \n```  \n  \n### Return Value  \n The number of ribbon elements that are contained in the ribbon panel.  \n  \n##  <a name=\"cmfcribbonpanel__getdata\"></a>  CMFCRibbonPanel::GetData  \n Returns the user-defined data associated with the panel.  \n  \n```  \nDWORD_PTR GetData() const;\n\n \n```  \n  \n### Return Value  \n The user-defined data associated with the panel.  \n  \n##  <a name=\"cmfcribbonpanel__getdefaultbutton\"></a>  CMFCRibbonPanel::GetDefaultButton  \n Retrieves the default button for the ribbon panel.  \n  \n```  \nCMFCRibbonButton& GetDefaultButton();\n```  \n  \n### Return Value  \n The default button for the ribbon panel.  \n  \n### Remarks  \n The default button is displayed when a ribbon panel has insufficient space to display its ribbon elements.  \n  \n##  <a name=\"cmfcribbonpanel__getdroppeddown\"></a>  CMFCRibbonPanel::GetDroppedDown  \n Retrieves a pointer to a ribbon element if its pop-up menu is dropped down.  \n  \n```  \nCMFCRibbonBaseElement* GetDroppedDown() const;\n\n \n```  \n  \n### Return Value  \n Pointer to the ribbon element that has its pop-up menu dropped down; otherwise `NULL` if no ribbon element has its pop-up menu dropped down.  \n  \n### Remarks  \n Only ribbon elements that are contained in the ribbon panel are tested.  \n  \n##  <a name=\"cmfcribbonpanel__getelement\"></a>  CMFCRibbonPanel::GetElement  \n Returns the ribbon element located at a specified index.  \n  \n```  \n \nCMFCRibbonBaseElement* GetElement(\nint nIndex) const;\n\n \n```  \n  \n### Parameters  \n [in] `nIndex`  \n Specifies the zero-based index of the element to retrieve.  \n  \n### Return Value  \n A valid pointer to the base ribbon element located at position `nIndex` in the ribbon panel, or `NULL` if there is no element at the specified index.  \n  \n##  <a name=\"cmfcribbonpanel__getelements\"></a>  CMFCRibbonPanel::GetElements  \n Retrieves all ribbon elements that are contained in the ribbon panel.  \n  \n```  \n \nvoid GetElements(\nCArray<CMFCRibbonBaseElement*, CMFCRibbonBaseElement*>& arElements);\n```  \n  \n### Parameters  \n [out] `arElements`  \n An array to fill with all the ribbon elements that are contained in the ribbon panel.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__getelementsbyid\"></a>  CMFCRibbonPanel::GetElementsByID  \n Adds ribbon elements that have the specified command ID to the specified array.  \n  \n```  \n \nvoid GetElementsByID(\nUINT uiCmdID,  \nCArray<CMFCRibbonBaseElement*, CMFCRibbonBaseElement*>& arElements);\n```  \n  \n### Parameters  \n [in] `uiCmdID`  \n Command ID for a ribbon element.  \n  \n [in] `arElements`  \n Array of ribbon elements.  \n  \n### Remarks  \n Only ribbon elements that are contained in the ribbon panel are tested.  \n  \n##  <a name=\"cmfcribbonpanel__gethighlighted\"></a>  CMFCRibbonPanel::GetHighlighted  \n Retrieves the ribbon element that is highlighted on the ribbon panel.  \n  \n```  \nCMFCRibbonBaseElement* GetHighlighted() const;\n\n \n```  \n  \n### Return Value  \n Pointer to the ribbon element that is highlighted on the ribbon panel.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__getindex\"></a>  CMFCRibbonPanel::GetIndex  \n Retrieves the zero-based index of the specified ribbon element from the array of ribbon elements that are contained in the ribbon panel.  \n  \n```  \n \nvirtual int GetIndex(\nCMFCRibbonBaseElement* pElem) const;\n\n \n```  \n  \n### Parameters  \n [in] `pElem`  \n Pointer to a ribbon element.  \n  \n### Return Value  \n Zero-based index of the specified ribbon element if the method was successful; otherwise -1.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__getitemidslist\"></a>  CMFCRibbonPanel::GetItemIDsList  \n Retrieves the command IDs for all ribbon elements in the ribbon panel.  \n  \n```  \n \nvoid GetItemIDsList(\nCList<UINT, UINT>& lstItems) const;\n\n \n```  \n  \n### Parameters  \n [out] `lstItems`  \n The list of command IDs for ribbon elements that are contained in the ribbon panel.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__getname\"></a>  CMFCRibbonPanel::GetName  \n Retrieves the name of the ribbon panel.  \n  \n```  \nLPCTSTR GetName() const;\n\n \n```  \n  \n### Return Value  \n The name of the ribbon panel.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__getparentbutton\"></a>  CMFCRibbonPanel::GetParentButton  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCMFCRibbonBaseElement* GetParentButton() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__getparentcategory\"></a>  CMFCRibbonPanel::GetParentCategory  \n Returns the parent category of the ribbon panel.  \n  \n```  \nCMFCRibbonCategory* GetParentCategory() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the ribbon category that contains this ribbon panel.  \n  \n##  <a name=\"cmfcribbonpanel__getparentmenubar\"></a>  CMFCRibbonPanel::GetParentMenuBar  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCMFCRibbonPanelMenuBar* GetParentMenuBar() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__getpreferedmenulocation\"></a>  CMFCRibbonPanel::GetPreferedMenuLocation  \n Retrieves the preferred display rectangle for the pop-up menu of the ribbon panel.  \n  \n```  \n \nvirtual BOOL GetPreferedMenuLocation(\nCRect& rect);\n```  \n  \n### Parameters  \n [out] `rect`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns `FALSE`.  \n  \n### Remarks  \n This method always returns `FALSE`. Override this method to retrieve the preferred display rectangle for the pop-up menu of the ribbon panel.  \n  \n##  <a name=\"cmfcribbonpanel__getpressed\"></a>  CMFCRibbonPanel::GetPressed  \n Retrieves a pointer to a ribbon element on the ribbon panel if the user currently presses it.  \n  \n```  \nCMFCRibbonBaseElement* GetPressed() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a ribbon element if the user currently presses it; otherwise `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__getrect\"></a>  CMFCRibbonPanel::GetRect  \n Retrieves the display rectangle for the ribbon panel.  \n  \n```  \nconst CRect& GetRect() const;\n\n \n```  \n  \n### Return Value  \n The display rectangle for the ribbon panel.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__haselement\"></a>  CMFCRibbonPanel::HasElement  \n Indicates whether the ribbon panel contains the specified ribbon element.  \n  \n```  \n \nBOOL HasElement(\nconst CMFCRibbonBaseElement* pElem) const;\n\n \n```  \n  \n### Parameters  \n [in] `pElem`  \n Pointer to a ribbon element.  \n  \n### Return Value  \n `TRUE` if the ribbon panel contains the specified ribbon element; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__highlight\"></a>  CMFCRibbonPanel::Highlight  \n Sets the highlight color for the selected ribbon panel and for the ribbon element specified by the point.  \n  \n```  \n \nvirtual void Highlight(\nBOOL bHighlight,  \nCPoint point);\n```  \n  \n### Parameters  \n [in] `bHighlight`  \n `TRUE` to highlight the ribbon panel; `FALSE` to unhighlight the ribbon panel.  \n  \n [in] `point`  \n The x and y coordinates of the pointer, relative to the upper-left corner of the window.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__hittest\"></a>  CMFCRibbonPanel::HitTest  \n Retrieves a ribbon element if the specified point is located in it.  \n  \n```  \n \nvirtual CMFCRibbonBaseElement* HitTest(\nCPoint point,  \nBOOL bCheckPanelCaption = FALSE);\n```  \n  \n### Parameters  \n [in] `point`  \n The x and y coordinates of the pointer, relative to the upper-left corner of the window.  \n  \n [in] `bCheckPanelCaption`  \n `TRUE` to test the ribbon panel caption; otherwise `FALSE`.  \n  \n### Return Value  \n Pointer to a ribbon element if the specified point is located in it; otherwise `NULL`.  \n  \n### Remarks  \n Only ribbon elements that are contained in the ribbon panel are tested.  \n  \n##  <a name=\"cmfcribbonpanel__hittestex\"></a>  CMFCRibbonPanel::HitTestEx  \n Retrieves the zero-based index of the ribbon element that has the specified point located in it.  \n  \n```  \n \nvirtual int HitTestEx(\nCPoint point) const;\n\n \n```  \n  \n### Parameters  \n [in] `point`  \n The x and y coordinates of the pointer, relative to the upper-left corner of the window.  \n  \n### Return Value  \n The zero-based index of the ribbon element that has the specified point located in it; otherwise -1.  \n  \n### Remarks  \n Only ribbon elements that are contained in the ribbon panel are tested.  \n  \n##  <a name=\"cmfcribbonpanel__insert\"></a>  CMFCRibbonPanel::Insert  \n Inserts the specified ribbon element at the specified position in the array of ribbon elements that is contained in the ribbon panel.  \n  \n```  \n \nvirtual BOOL Insert(\nCMFCRibbonBaseElement* pElem,  \nint nIndex);\n```  \n  \n### Parameters  \n [in, out] `pElem`  \n Pointer to a ribbon element.  \n  \n [in] `nIndex`  \n Zero-based value, ranging from -1 to the number of ribbon elements that are contained in the array.  \n  \n### Return Value  \n `TRUE` if the ribbon element was inserted successfully; otherwise `FALSE`.  \n  \n### Remarks  \n If the value of `nIndex` is -1, or if `nIndex` equals the number of ribbon elements in the array, the specified ribbon element is added to the end of the array. If the value of `nIndex` is out of range, the method will fail.  \n  \n##  <a name=\"cmfcribbonpanel__insertseparator\"></a>  CMFCRibbonPanel::InsertSeparator  \n Inserts a separator at the given position.  \n  \n```  \n \nvirtual BOOL InsertSeparator(\nint nIndex);\n```  \n  \n### Parameters  \n [in] `nIndex`  \n Specifies the zero-based index where the separator is inserted.  \n  \n### Return Value  \n `TRUE` if the separator has been inserted successfully; otherwise, `FALSE`.  \n  \n### Remarks  \n Call this method to insert a separator at the position specified by `nIndex`. To insert a separator next to the most recently added ribbon element, call [CMFCRibbonPanel::AddSeparator](#cmfcribbonpanel__addseparator).  \n  \n##  <a name=\"cmfcribbonpanel__iscentercolumnvert\"></a>  CMFCRibbonPanel::IsCenterColumnVert  \n Indicates whether the vertical positions of ribbon elements are centered within their display rectangle.  \n  \n```  \nBOOL IsCenterColumnVert() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the vertical positions of ribbon elements are centered within their display rectangle; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcribbonpanel__iscollapsed\"></a>  CMFCRibbonPanel::IsCollapsed  \n Indicates whether the display size of the ribbon panel is minimized in the horizontal direction.  \n  \n```  \nBOOL IsCollapsed() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the display size of the ribbon panel is minimized in the horizontal direction; otherwise `FALSE`.  \n  \n### Remarks  \n When a ribbon panel is collapsed, it only displays its default button, its name, and a drop-down arrow.  \n  \n##  <a name=\"cmfcribbonpanel__ishighlighted\"></a>  CMFCRibbonPanel::IsHighlighted  \n Indicates whether the display of the ribbon panel is highlighted.  \n  \n```  \nBOOL IsHighlighted() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the display of the ribbon panel is highlighted; otherwise `FALSE`.  \n  \n### Remarks  \n The display of a ribbon panel is highlighted when the pointer is over it.  \n  \n##  <a name=\"cmfcribbonpanel__isjustifycolumns\"></a>  CMFCRibbonPanel::IsJustifyColumns  \n Indicates whether the display dimensions of ribbon elements that are in the same column in the ribbon panel are set to the same width.  \n  \n```  \nBOOL IsJustifyColumns() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the display dimensions of ribbon elements that are in the same column in the ribbon panel are set to the same width; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcribbonpanel__ismainpanel\"></a>  CMFCRibbonPanel::IsMainPanel  \n Indicates whether the ribbon panel is the main ribbon panel.  \n  \n```  \nvirtual BOOL IsMainPanel() const;\n\n \n```  \n  \n### Return Value  \n Always returns `FALSE`.  \n  \n### Remarks  \n This method always returns `FALSE`. Override this method to indicate whether the ribbon panel is the main ribbon panel.  \n  \n The main ribbon panel is displayed when the user selects the application button.  \n  \n##  <a name=\"cmfcribbonpanel__ismenumode\"></a>  CMFCRibbonPanel::IsMenuMode  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsMenuMode() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__onkey\"></a>  CMFCRibbonPanel::OnKey  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \n \nvirtual BOOL OnKey(\nUINT nChar);\n```  \n  \n### Parameters  \n [in] `nChar`  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__recalcwidths\"></a>  CMFCRibbonPanel::RecalcWidths  \n Recalculates the width of each display layout configuration for the ribbon panel.  \n  \n```  \n \nvirtual void RecalcWidths(\nCDC* pDC,  \nint nHeight);\n```  \n  \n### Parameters  \n [in] `pDC`  \n Pointer to a device context for the ribbon panel.  \n  \n [in] `nHeight`  \n The height of the ribbon panel.  \n  \n### Remarks  \n A ribbon panel changes its layout configuration as the available width changes.  \n  \n##  <a name=\"cmfcribbonpanel__remove\"></a>  CMFCRibbonPanel::Remove  \n Removes and optionally deletes an element located at the specified index.  \n  \n```  \n \nBOOL Remove(\nint nIndex,  \nBOOL bDelete = TRUE);\n```  \n  \n### Parameters  \n [in] `nIndex`  \n Specifies the zero-based index of the element that is removed from the ribbon panel.  \n  \n [in] `bDelete`  \n `TRUE` to delete the element being removed; otherwise, `FALSE`.  \n  \n### Return Value  \n `TRUE` if the element has been removed and deleted (if `bDelete` is `TRUE`); `FALSE` if the element was not removed or if there is no ribbon element located at `nIndex`.  \n  \n### Remarks  \n Call this method to remove an element from the ribbon panel.  \n  \n##  <a name=\"cmfcribbonpanel__removeall\"></a>  CMFCRibbonPanel::RemoveAll  \n Deletes all ribbon elements from the ribbon panel.  \n  \n```  \nvoid RemoveAll();\n```  \n  \n### Remarks  \n All ribbon elements are deleted from the ribbon panel and destroyed.  \n  \n##  <a name=\"cmfcribbonpanel__replace\"></a>  CMFCRibbonPanel::Replace  \n Replaces one element with another based on their index value.  \n  \n```  \n \nBOOL Replace(\nint nIndex,  \nCMFCRibbonBaseElement* pElem);\n```  \n  \n### Parameters  \n [in] `nIndex`  \n Specifies the zero-based index of the element to replace.  \n  \n [in] [out] `pElem`  \n A valid pointer to the element that replaces the original element.  \n  \n### Return Value  \n `TRUE` if the original ribbon element has been replaced successfully by the new ribbon element; `FALSE` if the ribbon element was not replaced or if there is no element at the specified index.  \n  \n### Remarks  \n To replace a ribbon element by command ID, call [CMFCRibbonPanel::ReplaceByID](#cmfcribbonpanel__replacebyid).  \n  \n##  <a name=\"cmfcribbonpanel__replacebyid\"></a>  CMFCRibbonPanel::ReplaceByID  \n Replaces one element with another based on a specified command ID.  \n  \n```  \n \nBOOL ReplaceByID(\nUINT uiCmdID,  \nCMFCRibbonBaseElement* pElem);\n```  \n  \n### Parameters  \n [in] `uiCmdID`  \n Specifies the command ID of the element to replace.  \n  \n [in] [out] `pElem`  \n A valid pointer to the element that will replace the original element.  \n  \n### Return Value  \n `TRUE` if the original ribbon element has been replaced successfully by the new ribbon element; `FALSE` if the ribbon element was not replaced or if no element with the specified command ID actually exists.  \n  \n### Remarks  \n To replace a ribbon element based on position, call [CMFCRibbonPanel::Replace](#cmfcribbonpanel__replace).  \n  \n##  <a name=\"cmfcribbonpanel__setcentercolumnvert\"></a>  CMFCRibbonPanel::SetCenterColumnVert  \n Enables or disables the centering of the vertical positions of ribbon elements within their display rectangle.  \n  \n```  \n \nvoid SetCenterColumnVert(\nBOOL bSet = TRUE);\n```  \n  \n### Parameters  \n [in] `bSet`  \n `TRUE` to center the vertical positions of ribbon elements within their display rectangle; `FALSE` to disable this feature.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__setdata\"></a>  CMFCRibbonPanel::SetData  \n Associates user-defined data with the ribbon panel.  \n  \n```  \n \nvoid SetData(\nDWORD_PTR dwData);\n```  \n  \n### Parameters  \n [in] `dwData`  \n Specifies the user-defined data to set.  \n  \n### Remarks  \n Call this method to associate user-defined data with the ribbon panel.  \n  \n##  <a name=\"cmfcribbonpanel__setelementmenu\"></a>  CMFCRibbonPanel::SetElementMenu  \n Assigns a popup menu to the element that has the given command ID.  \n  \n```  \n \nBOOL SetElementMenu(\nUINT uiCmdID,  \nHMENU hMenu,  \nBOOL bIsDefautCommand = FALSE,  \nBOOL bRightAlign = FALSE);\n\n \nBOOL SetElementMenu(\nUINT uiCmdID,  \nUINT uiMenuResID,  \nBOOL bIsDefautCommand = FALSE,  \nBOOL bRightAlign = FALSE);\n```  \n  \n### Parameters  \n [in] `uiCmdID`  \n Specifies the command ID of the ribbon element where the menu is added.  \n  \n [in] `hMenu`  \n Specifies the handle to the Windows menu to add to the ribbon panel.  \n  \n [in] `bIsDefautCommand`  \n `TRUE` to specify that the command associated with the ribbon element should be executed if the ribbon element is clicked. In this case, the menu is only opened when the user clicks the arrow next to the ribbon element. `FALSE` to specify that the command associated with the ribbon element should not be executed if the ribbon element is clicked. In this case, the popup menu appears regardless of where the user clicks on the element.  \n  \n [in] `bRightAlign`  \n `TRUE` to specify that the popup menu is right-aligned; otherwise, `FALSE`.  \n  \n [in] `uiMenuResID`  \n Specifies the resource ID of the menu to add to the ribbon panel.  \n  \n### Return Value  \n `TRUE` if the menu has been assigned to the ribbon element; otherwise, `FALSE`.  \n  \n### Remarks  \n Call this method to assign a popup menu to the ribbon element that has the given command ID.  \n  \n##  <a name=\"cmfcribbonpanel__setelementrtc\"></a>  CMFCRibbonPanel::SetElementRTC  \n Adds the ribbon element that is specified by the provided runtime class information to the ribbon panel.  \n  \n```  \n \nCMFCRibbonBaseElement* SetElementRTC(\nint nIndex,  \nCRuntimeClass* pRTC);\n```  \n  \n### Parameters  \n [in] `nIndex`  \n Specifies the zero-based index of the ribbon element to add.  \n  \n [in] [out] `pRTC`  \n A pointer to the runtime class information for the ribbon element that is added to the ribbon panel.  \n  \n### Return Value  \n The ribbon element that was created by using the specified runtime class information.  \n  \n### Remarks  \n If you want to add a custom element (for example, a color button) to the ribbon panel, you must specify the custom element's runtime class information. The ribbon stores this information, creates the custom element, and replaces an existing element that is located (identified by) the specified command ID. The ribbon then returns a pointer to the newly created element.  \n  \n##  <a name=\"cmfcribbonpanel__setelementrtcbyid\"></a>  CMFCRibbonPanel::SetElementRTCByID  \n Adds a ribbon element that is specified by the provided runtime class information to the ribbon panel.  \n  \n```  \n \nCMFCRibbonBaseElement* SetElementRTCByID(\nUINT uiCmdID,  \nCRuntimeClass* pRTC);\n```  \n  \n### Parameters  \n [in] `uiCmdID`  \n Specifies the command ID of the ribbon element to add.  \n  \n [in] [out] `pRTC`  \n A pointer to the runtime class information associated with the ribbon element that is added to the ribbon panel.  \n  \n### Return Value  \n The ribbon element that was created by using the specified runtime class information.  \n  \n### Remarks  \n If you want to add a custom element (for example, a color button) to the ribbon panel, you must specify the custom element's runtime class information. The ribbon stores this information, creates the custom element, and replaces an existing element located by the specified command ID. It then returns a pointer to the newly created element.  \n  \n### Example  \n The following example shows how to use the `SetElementRTCByID` method:  \n  \n```  \n \n// Load and add toolbar with standard buttons. This toolbar  \n// should display a custom color button with id ID_CHAR_COLOR:  \n \npPanel->AddToolBar(IDR_MAINFRAME,\n    IDB_MAINFRAME256);\n\nCMFCRibbonColorButton* pColorButton = \n(CMFCRibbonColorButton*)pPanel->SetElementRTCByID(\nID_CHAR_COLOR,\n    RUNTIME_CLASS (CMFCRibbonColorButton));\n\n \n// SetElementRTCByID sets runtime class and returns a pointer  \n// to the newly created custom button,\n    which can be set up immediately:  \npColorButton->EnableAutomaticButton(_T(\"Automatic\"),\n    RGB (0,\n    0,\n    0));\n\n \n```  \n  \n##  <a name=\"cmfcribbonpanel__setjustifycolumns\"></a>  CMFCRibbonPanel::SetJustifyColumns  \n Enables or disables the adjustment of the width of ribbon elements in the same column.  \n  \n```  \n \nvoid SetJustifyColumns(\nBOOL bSet = TRUE);\n```  \n  \n### Parameters  \n [in] `bSet`  \n `TRUE` to adjust the width of ribbon elements in the same column to the width of the largest ribbon element in the column; `FALSE` to disable this width adjustment.  \n  \n### Remarks  \n When this feature is enabled in a ribbon panel, the widths of ribbon elements in the same column are adjusted to the width of the largest ribbon element in the same column.  \n  \n##  <a name=\"cmfcribbonpanel__setkeys\"></a>  CMFCRibbonPanel::SetKeys  \n Sets the keytip for the default button of the ribbon panel.  \n  \n```  \n \nvoid SetKeys(\nLPCTSTR lpszKeys);\n```  \n  \n### Parameters  \n [in] `lpszKeys`  \n The keytip for the default button of the ribbon panel.  \n  \n### Remarks  \n The default button is displayed when a ribbon panel has insufficient space to display its ribbon elements.  \n  \n##  <a name=\"cmfcribbonpanel__showpopup\"></a>  CMFCRibbonPanel::ShowPopup  \n Creates and displays a pop-up menu for the ribbon panel.  \n  \n```  \n \nCMFCRibbonPanelMenu* ShowPopup(\nCMFCRibbonDefaultPanelButton* pButton = NULL);\n```  \n  \n### Parameters  \n [in] `pButton`  \n Pointer to the default button for the ribbon panel.  \n  \n### Return Value  \n Pointer to the pop-up menu for the ribbon panel if the method was successful; otherwise `NULL`.  \n  \n### Remarks  \n The pop-up menu for the ribbon panel is only available when the display of the ribbon panel is collapsed.  \n  \n##  <a name=\"cmfcribbonpanel__setfocused\"></a>  CMFCRibbonPanel::SetFocused  \n Sets focus to the specified Ribbon element.  \n  \n```  \n \nvoid SetFocused(\nCMFCRibbonBaseElement* pNewFocus);\n```  \n  \n### Parameters  \n `pNewFocus`  \n A pointer to a Ribbon element that receives focus.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__makegalleryitemvisible\"></a>  CMFCRibbonPanel::MakeGalleryItemVisible  \n Scrolls the gallery to make the specified Ribbon element visible.  \n  \n```  \n \nvoid MakeGalleryItemVisible(\nCMFCRibbonBaseElement* pItem);\n```  \n  \n### Parameters  \n `pItem`  \n A pointer to a Ribbon element to show.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__iswindows7look\"></a>  CMFCRibbonPanel::IsWindows7Look  \n Indicates whether the parent ribbon has Windows 7 look (small rectangular application button).  \n  \n```  \nBOOL IsWindows7Look() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the parent ribbon has Windows 7 look; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__getvisibleelements\"></a>  CMFCRibbonPanel::GetVisibleElements  \n Retrieves an array of visible elements.  \n  \n```  \n \nvoid GetVisibleElements(\nCArray<CMFCRibbonBaseElement*,  \nCMFCRibbonBaseElement*>& arElements);\n```  \n  \n### Parameters  \n `arElements`  \n When the function returns, this parameter contains an array of visible elements.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__getgalleryrect\"></a>  CMFCRibbonPanel::GetGalleryRect  \n Returns a bounding rectangle of a Gallery element.  \n  \n```  \nCRect GetGalleryRect();\n```  \n  \n### Return Value  \n Size and position of the Gallery element within this panel.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonpanel__getfocused\"></a>  CMFCRibbonPanel::GetFocused  \n Returns a focused element.  \n  \n```  \nCMFCRibbonBaseElement* GetFocused() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a focused element or `NULL`.  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [CMFCRibbonCategory Class](../../mfc/reference/cmfcribboncategory-class.md)   \n [CMFCRibbonBaseElement Class](../../mfc/reference/cmfcribbonbaseelement-class.md)\n"}