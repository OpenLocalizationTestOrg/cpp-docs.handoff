{"nodes":[{"pos":[12,53],"content":"&lt;vector&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>vector<ph id=\"ph2\">&amp;gt;</ph> functions | Microsoft Docs","pos":[0,41],"source":"&lt;vector&gt; functions | Microsoft Docs"}]},{"pos":[256,280],"content":"&lt;vector&gt; functions","linkify":"&lt;vector&gt; functions","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>vector<ph id=\"ph2\">&amp;gt;</ph> functions","pos":[0,24],"source":"&lt;vector&gt; functions"}]},{"pos":[289,314],"content":"<bpt id=\"p1\">&lt;a name=\"swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  swap","linkify":"<a name=\"swap\"></a>  swap","source":"<a name=\"swap\"></a>  swap"},{"content":"Exchanges the elements of two vectors.","pos":[318,356]},{"pos":[496,506],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The vector providing the elements to be swapped, or the vector whose elements are to be exchanged with those of the vector <ph id=\"ph1\">` left`</ph>.","pos":[522,653],"source":" The vector providing the elements to be swapped, or the vector whose elements are to be exchanged with those of the vector ` left`."},{"content":"The vector whose elements are to be exchanged with those of the vector <ph id=\"ph1\">` right`</ph>.","pos":[671,751],"source":" The vector whose elements are to be exchanged with those of the vector ` right`."},{"pos":[761,768],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template function is an algorithm specialized on the container class vector to execute the member function <ph id=\"ph1\">` left.`</ph> <bpt id=\"p1\">[</bpt>vector::swap<ept id=\"p1\">](../standard-library/vector-class.md)</ept> <bpt id=\"p2\">*</bpt>( right<ept id=\"p2\">*</ept>).","pos":[772,955],"source":"The template function is an algorithm specialized on the container class vector to execute the member function ` left.` [vector::swap](../standard-library/vector-class.md) *( right*)."},{"content":"These are instances of the partial ordering of function templates by the compiler.","pos":[956,1038]},{"content":"When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function.","pos":[1039,1245]},{"content":"The general version of the template function, <bpt id=\"p1\">**</bpt>template<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p2\">**</bpt>class T<ept id=\"p2\">**</ept><ph id=\"ph2\">&gt; </ph><bpt id=\"p3\">**</bpt>void swap<ept id=\"p3\">**</ept>( <bpt id=\"p4\">**</bpt>T&amp;<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>T&amp;<ept id=\"p5\">**</ept>), in the algorithm class works by assignment and is a slow operation.","pos":[1246,1420],"source":" The general version of the template function, **template** \\< **class T**> **void swap**( **T&**, **T&**), in the algorithm class works by assignment and is a slow operation."},{"content":"The specialized version in each container is much faster as it can work with the internal representation of the container class.","pos":[1421,1549]},{"pos":[1559,1566],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1571,1720],"content":"See the code example for member function <bpt id=\"p1\">[</bpt>vector::swap<ept id=\"p1\">](../standard-library/vector-class.md)</ept> for an example that uses the template version of <ph id=\"ph1\">`swap`</ph>.","source":"See the code example for member function [vector::swap](../standard-library/vector-class.md) for an example that uses the template version of `swap`."},{"pos":[1729,1737],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1741,1783],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>vector&gt;<ept id=\"p1\">](../standard-library/vector.md)</ept>","source":"[\\<vector>](../standard-library/vector.md)"}],"content":"---\ntitle: \"&lt;vector&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 6cdcf043-eef6-4330-83f0-4596fb9f968a\ncaps.latest.revision: 10\nmanager: \"ghogen\"\n---\n# &lt;vector&gt; functions\n\n  \n##  <a name=\"swap\"></a>  swap  \n Exchanges the elements of two vectors.  \n  \n```  \ntemplate <class Type, class Allocator>  \nvoid swap(vector<Type, Allocator>& left, vector<Type, Allocator>& right);\n```  \n  \n### Parameters  \n ` right`  \n The vector providing the elements to be swapped, or the vector whose elements are to be exchanged with those of the vector ` left`.  \n  \n ` left`  \n The vector whose elements are to be exchanged with those of the vector ` right`.  \n  \n### Remarks  \n The template function is an algorithm specialized on the container class vector to execute the member function ` left.` [vector::swap](../standard-library/vector-class.md) *( right*). These are instances of the partial ordering of function templates by the compiler. When template functions are overloaded in such a way that the match of the template with the function call is not unique, then the compiler will select the most specialized version of the template function. The general version of the template function, **template** \\< **class T**> **void swap**( **T&**, **T&**), in the algorithm class works by assignment and is a slow operation. The specialized version in each container is much faster as it can work with the internal representation of the container class.  \n  \n### Example  \n  See the code example for member function [vector::swap](../standard-library/vector-class.md) for an example that uses the template version of `swap`.  \n  \n## See Also  \n [\\<vector>](../standard-library/vector.md)\n\n"}