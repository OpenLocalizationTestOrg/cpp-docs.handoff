{"nodes":[{"pos":[12,45],"content":"result_of Class2 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"result_of Class2 | Microsoft Docs","pos":[0,33]}]},{"content":"result_of Class","pos":[693,708]},{"content":"The return type of a wrapped callable object.","pos":[709,754]},{"content":"Syntax","pos":[763,769]},{"content":"struct result_of {","pos":[775,793]},{"content":"typedef T0 type;","pos":[799,815]},{"content":"};","pos":[821,823]},{"content":"Parameters","pos":[834,844]},{"content":"A description of a function call (see Remarks section).","pos":[856,911]},{"content":"Remarks","pos":[920,927]},{"content":"The template class defines its member <ph id=\"ph1\">`type`</ph> as a synonym for the return type of a function call described by its template argument <ph id=\"ph2\">`Ty`</ph>.","pos":[931,1068],"source":"The template class defines its member `type` as a synonym for the return type of a function call described by its template argument `Ty`."},{"content":"The template argument must be of the form <ph id=\"ph1\">`Fty(T1, T2, ..., TN)`</ph>, where <ph id=\"ph2\">`Fty`</ph> is a callable type.","pos":[1069,1166],"source":" The template argument must be of the form `Fty(T1, T2, ..., TN)`, where `Fty` is a callable type."},{"content":"The template determines the return type according to the first of the following rules that applies:","pos":[1167,1266]},{"pos":[1276,1362],"content":"if <ph id=\"ph1\">`Fty`</ph> is a pointer to function type <ph id=\"ph2\">`R(*)(U1, U2, ..., UN)`</ph> the return type is <ph id=\"ph3\">`R`</ph>;","source":"if `Fty` is a pointer to function type `R(*)(U1, U2, ..., UN)` the return type is `R`;"},{"pos":[1372,1460],"content":"if <ph id=\"ph1\">`Fty`</ph> is a reference to function type <ph id=\"ph2\">`R(&amp;)(U1, U2, ..., UN)`</ph> the return type is <ph id=\"ph3\">`R`</ph>;","source":"if `Fty` is a reference to function type `R(&)(U1, U2, ..., UN)` the return type is `R`;"},{"pos":[1470,1563],"content":"if <ph id=\"ph1\">`Fty`</ph> is a pointer to member function type <ph id=\"ph2\">`R(U1::*)(U2, ..., UN)`</ph> the return type is <ph id=\"ph3\">`R`</ph>;","source":"if `Fty` is a pointer to member function type `R(U1::*)(U2, ..., UN)` the return type is `R`;"},{"pos":[1573,1648],"content":"if <ph id=\"ph1\">`Fty`</ph> is a pointer to data member type <ph id=\"ph2\">`R U1::*`</ph> the return type is <ph id=\"ph3\">`R`</ph>;","source":"if `Fty` is a pointer to data member type `R U1::*` the return type is `R`;"},{"pos":[1658,1752],"content":"if <ph id=\"ph1\">`Fty`</ph> is a class with a member typedef <ph id=\"ph2\">`result_type`</ph> the return type is <ph id=\"ph3\">`Fty::result_type`</ph>;","source":"if `Fty` is a class with a member typedef `result_type` the return type is `Fty::result_type`;"},{"pos":[1762,1839],"content":"if <ph id=\"ph1\">`N`</ph> is 0 (that is, <ph id=\"ph2\">`Ty`</ph> is of the form <ph id=\"ph3\">`Fty()`</ph>) the return type is <ph id=\"ph4\">`void`</ph>;","source":"if `N` is 0 (that is, `Ty` is of the form `Fty()`) the return type is `void`;"},{"pos":[1849,1963],"content":"if <ph id=\"ph1\">`Fty`</ph> is a class with a member template named <ph id=\"ph2\">`result`</ph> the return type is <ph id=\"ph3\">`Fty::result&lt;T1, T2, ..., TN&gt;::type`</ph>;","source":"if `Fty` is a class with a member template named `result` the return type is `Fty::result<T1, T2, ..., TN>::type`;"},{"content":"in all other cases it is an error.","pos":[1973,2007]},{"content":"Example","pos":[2016,2023]},{"content":"Â","pos":[2027,2028]},{"content":"Requirements","pos":[2588,2600]},{"pos":[2604,2629],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[2636,2654],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"}],"content":"---\ntitle: \"result_of Class2 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"functional/std::tr1::result_of\"\n  - \"std::tr1::result_of\"\n  - \"result_of\"\n  - \"std.tr1.result_of\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"result_of class [TR1]\"\nms.assetid: 14ec0040-07f1-45a5-80b5-d0c9f9b00c8f\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# result_of Class\nThe return type of a wrapped callable object.  \n  \n## Syntax  \n  \nstruct result_of {  \n   typedef T0 type;  \n   };  \n  \n#### Parameters  \n `Ty`  \n A description of a function call (see Remarks section).  \n  \n## Remarks  \n The template class defines its member `type` as a synonym for the return type of a function call described by its template argument `Ty`. The template argument must be of the form `Fty(T1, T2, ..., TN)`, where `Fty` is a callable type. The template determines the return type according to the first of the following rules that applies:  \n  \n-   if `Fty` is a pointer to function type `R(*)(U1, U2, ..., UN)` the return type is `R`;  \n  \n-   if `Fty` is a reference to function type `R(&)(U1, U2, ..., UN)` the return type is `R`;  \n  \n-   if `Fty` is a pointer to member function type `R(U1::*)(U2, ..., UN)` the return type is `R`;  \n  \n-   if `Fty` is a pointer to data member type `R U1::*` the return type is `R`;  \n  \n-   if `Fty` is a class with a member typedef `result_type` the return type is `Fty::result_type`;  \n  \n-   if `N` is 0 (that is, `Ty` is of the form `Fty()`) the return type is `void`;  \n  \n-   if `Fty` is a class with a member template named `result` the return type is `Fty::result<T1, T2, ..., TN>::type`;  \n  \n-   in all other cases it is an error.  \n  \n## Example  \n Â  \n  \n```  \n// std_tr1__functional__result_of.cpp   \n// compile with: /EHsc   \n#include <functional>   \n#include <iostream>   \n  \ndouble square(double x)   \n    {   \n    return (x * x);   \n    }   \n  \ntemplate<class Fun,   \n    class Arg>   \n    void test_result(const Fun& fun, Arg arg)   \n    {   \n    typename std::result_of<Fun(Arg)>::type val = fun(arg);   \n    std::cout << \"val == \" << val << std::endl;   \n    }   \n  \nint main()   \n    {   \n    test_result(&square, 3.0);   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nval == 9  \n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std\n\n"}