{"nodes":[{"pos":[12,58],"content":"_futime, _futime32, _futime64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_futime, _futime32, _futime64 | Microsoft Docs","pos":[0,46]}]},{"content":"_futime, _futime32, _futime64","pos":[1183,1212]},{"content":"Sets the modification time on an open file.","pos":[1213,1256]},{"content":"Syntax","pos":[1265,1271]},{"content":"Parameters","pos":[1505,1515]},{"content":"File descriptor to the open file.","pos":[1527,1560]},{"content":"Pointer to the structure containing the new modification date.","pos":[1581,1643]},{"content":"Return Value","pos":[1652,1664]},{"content":"Return 0 if successful.","pos":[1668,1691]},{"content":"If an error occurs, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1692,1842],"source":" If an error occurs, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the function returns –1 and <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EBADF`</ph>, indicating an invalid file descriptor, or <ph id=\"ph3\">`EINVAL`</ph>, indicating an invalid parameter.","pos":[1843,2019],"source":" If execution is allowed to continue, the function returns –1 and `errno` is set to `EBADF`, indicating an invalid file descriptor, or `EINVAL`, indicating an invalid parameter."},{"content":"Remarks","pos":[2028,2035]},{"content":"The <ph id=\"ph1\">`_futime`</ph> routine sets the modification date and the access time on the open file associated with <ph id=\"ph2\">`fd`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[2039,2148],"source":"The `_futime` routine sets the modification date and the access time on the open file associated with `fd`*.*"},{"content":"is identical to <bpt id=\"p1\">[</bpt>_utime<ept id=\"p1\">](../../c-runtime-library/reference/utime-utime32-utime64-wutime-wutime32-wutime64.md)</ept>, except that its argument is the file descriptor of an open file, rather than the name of a file or a path to a file.","pos":[2159,2386],"source":" is identical to [_utime](../../c-runtime-library/reference/utime-utime32-utime64-wutime-wutime32-wutime64.md), except that its argument is the file descriptor of an open file, rather than the name of a file or a path to a file."},{"content":"The <ph id=\"ph1\">`_utimbuf`</ph> structure contains fields for the new modification date and access time.","pos":[2387,2474],"source":" The `_utimbuf` structure contains fields for the new modification date and access time."},{"content":"Both fields must contain valid values.","pos":[2475,2513]},{"content":"and <ph id=\"ph1\">`_utimbuf64`</ph> are identical to <ph id=\"ph2\">`_utimbuf`</ph> except for the use of the 32-bit and 64-bit time types, respectively.","pos":[2527,2641],"source":" and `_utimbuf64` are identical to `_utimbuf` except for the use of the 32-bit and 64-bit time types, respectively."},{"content":"and <ph id=\"ph1\">`_utimbuf`</ph> use a 64-bit time type and <ph id=\"ph2\">`_futime`</ph> is identical in behavior to <ph id=\"ph3\">`_futime64`</ph>.","pos":[2652,2744],"source":" and `_utimbuf` use a 64-bit time type and `_futime` is identical in behavior to `_futime64`."},{"content":"If you need to force the old behavior, define <ph id=\"ph1\">`_USE_32BIT_TIME_T`</ph>.","pos":[2745,2811],"source":" If you need to force the old behavior, define `_USE_32BIT_TIME_T`."},{"content":"Doing this causes <ph id=\"ph1\">`_futime`</ph> to be identical in behavior to <ph id=\"ph2\">`_futime32`</ph> and causes the <ph id=\"ph3\">`_utimbuf`</ph> structure to use the 32-bit time type, making it equivalent to <ph id=\"ph4\">`__utimbuf32`</ph>.","pos":[2812,2986],"source":" Doing this causes `_futime` to be identical in behavior to `_futime32` and causes the `_utimbuf` structure to use the 32-bit time type, making it equivalent to `__utimbuf32`."},{"content":", which uses the <ph id=\"ph1\">`__utimbuf64`</ph> structure, can read and modify file dates through 23:59:59, December 31, 3000, UTC; whereas a call to <ph id=\"ph2\">`_futime32`</ph> fails if the date on the file is later than 23:59:59 January 18, 2038, UTC.","pos":[3004,3224],"source":", which uses the `__utimbuf64` structure, can read and modify file dates through 23:59:59, December 31, 3000, UTC; whereas a call to `_futime32` fails if the date on the file is later than 23:59:59 January 18, 2038, UTC."},{"content":"Midnight, January 1, 1970, is the lower bound of the date range for these functions.","pos":[3225,3309]},{"content":"Requirements","pos":[3318,3330]},{"content":"Function","pos":[3337,3345]},{"content":"Required header","pos":[3346,3361]},{"content":"Optional header","pos":[3362,3377]},{"content":"sys/utime.h&gt;","pos":[3457,3469],"source":"sys/utime.h>"},{"content":"errno.h&gt;","pos":[3472,3480],"source":"errno.h>"},{"content":"sys/utime.h&gt;","pos":[3499,3511],"source":"sys/utime.h>"},{"content":"errno.h&gt;","pos":[3514,3522],"source":"errno.h>"},{"content":"sys/utime.h&gt;","pos":[3541,3553],"source":"sys/utime.h>"},{"content":"errno.h&gt;","pos":[3556,3564],"source":"errno.h>"},{"pos":[3572,3690],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[3699,3706]},{"content":"Input: crt_futime.c_input","pos":[4426,4451]},{"content":"Sample Output","pos":[4503,4516]},{"content":".NET Framework Equivalent","pos":[5084,5109]},{"content":"System::IO::File::SetLastAccessTime","pos":[5120,5155]},{"content":"System::IO::File::SetLastWriteTime","pos":[5247,5281]},{"content":"System::IO::File::SetCreationTime","pos":[5372,5405]},{"content":"See Also","pos":[5493,5501]},{"content":"Time Management","pos":[5506,5521]}],"content":"---\ntitle: \"_futime, _futime32, _futime64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_futime64\"\n  - \"_futime32\"\n  - \"_futime\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-time-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"futime\"\n  - \"_futime\"\n  - \"futime64\"\n  - \"_futime64\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_futime function\"\n  - \"futime32 function\"\n  - \"futime64 function\"\n  - \"file modification time [C++]\"\n  - \"_futime64 function\"\n  - \"futime function\"\n  - \"_futime32 function\"\nms.assetid: b942ce8f-5cc7-4fa8-ab47-de5965eded53\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _futime, _futime32, _futime64\nSets the modification time on an open file.  \n  \n## Syntax  \n  \n```  \nint _futime(   \n   int fd,  \n   struct _utimbuf *filetime   \n);  \nint _futime32(   \n   int fd,  \n   struct __utimbuf32 *filetime   \n);  \nint _futime64(   \n   int fd,  \n   struct __utimbuf64 *filetime   \n);  \n```  \n  \n#### Parameters  \n `fd`  \n File descriptor to the open file.  \n  \n `filetime`  \n Pointer to the structure containing the new modification date.  \n  \n## Return Value  \n Return 0 if successful. If an error occurs, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the function returns –1 and `errno` is set to `EBADF`, indicating an invalid file descriptor, or `EINVAL`, indicating an invalid parameter.  \n  \n## Remarks  \n The `_futime` routine sets the modification date and the access time on the open file associated with `fd`*.* `_futime` is identical to [_utime](../../c-runtime-library/reference/utime-utime32-utime64-wutime-wutime32-wutime64.md), except that its argument is the file descriptor of an open file, rather than the name of a file or a path to a file. The `_utimbuf` structure contains fields for the new modification date and access time. Both fields must contain valid values. `_utimbuf32` and `_utimbuf64` are identical to `_utimbuf` except for the use of the 32-bit and 64-bit time types, respectively. `_futime` and `_utimbuf` use a 64-bit time type and `_futime` is identical in behavior to `_futime64`. If you need to force the old behavior, define `_USE_32BIT_TIME_T`. Doing this causes `_futime` to be identical in behavior to `_futime32` and causes the `_utimbuf` structure to use the 32-bit time type, making it equivalent to `__utimbuf32`.  \n  \n `_futime64`, which uses the `__utimbuf64` structure, can read and modify file dates through 23:59:59, December 31, 3000, UTC; whereas a call to `_futime32` fails if the date on the file is later than 23:59:59 January 18, 2038, UTC. Midnight, January 1, 1970, is the lower bound of the date range for these functions.  \n  \n## Requirements  \n  \n|Function|Required header|Optional header|  \n|--------------|---------------------|---------------------|  \n|`_futime`|\\<sys/utime.h>|\\<errno.h>|  \n|`_futime32`|\\<sys/utime.h>|\\<errno.h>|  \n|`_futime64`|\\<sys/utime.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_futime.c  \n// This program uses _futime to set the  \n// file-modification time to the current time.  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <fcntl.h>  \n#include <io.h>  \n#include <sys/types.h>  \n#include <sys/stat.h>  \n#include <sys/utime.h>  \n#include <share.h>  \n  \nint main( void )  \n{  \n   int hFile;  \n  \n   // Show file time before and after.   \n   system( \"dir crt_futime.c_input\" );  \n  \n   _sopen_s( &hFile, \"crt_futime.c_input\", _O_RDWR, _SH_DENYNO, 0 );  \n  \n   if( _futime( hFile, NULL ) == -1 )  \n      perror( \"_futime failed\\n\" );  \n   else  \n      printf( \"File time modified\\n\" );  \n  \n   _close (hFile);  \n  \n   system( \"dir crt_futime.c_input\" );  \n}  \n```  \n  \n## Input: crt_futime.c_input  \n  \n```  \nArbitrary file contents.  \n```  \n  \n### Sample Output  \n  \n```  \nVolume in drive Z has no label.  \n Volume Serial Number is 5C68-57C1  \n  \n Directory of Z:\\crt  \n  \n03/25/2004  10:40 AM                24 crt_futime.c_input  \n               1 File(s)             24 bytes  \n               0 Dir(s)  24,268,476,416 bytes free  \n Volume in drive Z has no label.  \n Volume Serial Number is 5C68-57C1  \n  \n Directory of Z:\\crt  \n  \n03/25/2004  10:41 AM                24 crt_futime.c_input  \n               1 File(s)             24 bytes  \n               0 Dir(s)  24,268,476,416 bytes free  \nFile time modified  \n```  \n  \n## .NET Framework Equivalent  \n  \n-   [System::IO::File::SetLastAccessTime](https://msdn.microsoft.com/en-us/library/system.io.file.setlastaccesstime.aspx)  \n  \n-   [System::IO::File::SetLastWriteTime](https://msdn.microsoft.com/en-us/library/system.io.file.setlastwritetime.aspx)  \n  \n-   [System::IO::File::SetCreationTime](https://msdn.microsoft.com/en-us/library/system.io.file.setcreationtime.aspx)  \n  \n## See Also  \n [Time Management](../../c-runtime-library/time-management.md)"}