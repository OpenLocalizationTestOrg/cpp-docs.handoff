{"nodes":[{"pos":[12,44],"content":"pow, powf, powl | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"pow, powf, powl | Microsoft Docs","pos":[0,32]}]},{"pos":[1126,1141],"content":"pow, powf, powl","linkify":"pow, powf, powl","nodes":[{"content":"pow, powf, powl","pos":[0,15]}]},{"pos":[1142,1184],"content":"Calculates <ph id=\"ph1\">`x`</ph> raised to the power of <ph id=\"ph2\">`y`</ph>.","source":"Calculates `x` raised to the power of `y`."},{"pos":[1193,1199],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1702,1712],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Base.","pos":[1723,1728]},{"content":"Exponent.","pos":[1742,1751]},{"pos":[1760,1772],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the value of <ph id=\"ph1\">`x`</ph><bpt id=\"p1\">&lt;sup&gt;</bpt>y<ept id=\"p1\">&lt;/sup&gt;</ept>.","pos":[1776,1813],"source":"Returns the value of `x`<sup>y</sup>."},{"content":"No error message is printed on overflow or underflow.","pos":[1814,1867]},{"content":"Values of x and y","pos":[1874,1891]},{"content":"Return value of pow","pos":[1892,1911]},{"pos":[1970,1994],"content":"<ph id=\"ph1\">`x`</ph> <ph id=\"ph2\">\\&lt;</ph> &gt; 0 and <ph id=\"ph3\">`y`</ph> = 0.0","source":"`x` \\< > 0 and `y` = 0.0"},{"content":"1","pos":[1995,1996]},{"pos":[2001,2024],"content":"<ph id=\"ph1\">`x`</ph> = 0.0 and <ph id=\"ph2\">`y`</ph> = 0.0","source":"`x` = 0.0 and `y` = 0.0"},{"content":"1","pos":[2025,2026]},{"pos":[2031,2052],"content":"<ph id=\"ph1\">`x`</ph> = 0.0 and <ph id=\"ph2\">`y`</ph> &lt; 0","source":"`x` = 0.0 and `y` < 0"},{"content":"INF","pos":[2053,2056]},{"pos":[2066,2073],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2077,2186],"content":"<ph id=\"ph1\">`pow`</ph> does not recognize integral floating-point values greater than 2<bpt id=\"p1\">&lt;sup&gt;</bpt>64<ept id=\"p1\">&lt;/sup&gt;</ept> (for example, <ph id=\"ph2\">`1.0E100`</ph>).","source":"`pow` does not recognize integral floating-point values greater than 2<sup>64</sup> (for example, `1.0E100`)."},{"content":"<ph id=\"ph1\">`pow`</ph> has an implementation that uses Streaming SIMD Extensions 2 (SSE2).","pos":[2193,2266],"source":"`pow` has an implementation that uses Streaming SIMD Extensions 2 (SSE2)."},{"content":"For information and restrictions about using the SSE2 implementation, see <bpt id=\"p1\">[</bpt>_set_SSE2_enable<ept id=\"p1\">](../../c-runtime-library/reference/set-sse2-enable.md)</ept>.","pos":[2267,2414],"source":" For information and restrictions about using the SSE2 implementation, see [_set_SSE2_enable](../../c-runtime-library/reference/set-sse2-enable.md)."},{"content":"Because C++ allows overloading, you can call any of the various overloads of <ph id=\"ph1\">`pow`</ph>.","pos":[2421,2504],"source":"Because C++ allows overloading, you can call any of the various overloads of `pow`."},{"content":"In a C program, <ph id=\"ph1\">`pow`</ph> always takes two double values and returns a double value.","pos":[2505,2585],"source":" In a C program, `pow` always takes two double values and returns a double value."},{"content":"The <ph id=\"ph1\">`pow(int, int)`</ph> overload is no longer available.","pos":[2592,2644],"source":"The `pow(int, int)` overload is no longer available."},{"content":"If you use this overload, the compiler may emit C2668.","pos":[2645,2699]},{"content":"To avoid this problem, cast the first parameter to <ph id=\"ph1\">`double`</ph>, <ph id=\"ph2\">`float`</ph>, or <ph id=\"ph3\">`long double`</ph>.","pos":[2700,2787],"source":" To avoid this problem, cast the first parameter to `double`, `float`, or `long double`."},{"pos":[2796,2808],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2815,2822]},{"content":"Required header","pos":[2823,2838]},{"pos":[2883,2904],"content":"<ph id=\"ph1\">`pow`</ph>, <ph id=\"ph2\">`powf`</ph>, <ph id=\"ph3\">`powl`</ph>","source":"`pow`, `powf`, `powl`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt;","pos":[2905,2914],"source":"\\<math.h>"},{"pos":[2922,3026],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[3035,3044],"content":"Libraries","linkify":"Libraries","nodes":[{"content":"Libraries","pos":[0,9]}]},{"pos":[3048,3140],"content":"All versions of the <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept>.","source":"All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md)."},{"pos":[3149,3156],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3390,3396],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[3453,3478],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[3482,3564],"content":"<bpt id=\"p1\">[</bpt>System::Math::Pow<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.math.pow.aspx)</ept>","source":"[System::Math::Pow](https://msdn.microsoft.com/en-us/library/system.math.pow.aspx)"},{"pos":[3573,3581],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[3585,3661],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>exp, expf<ept id=\"p1\">](../../c-runtime-library/reference/exp-expf.md)</ept><ph id=\"ph1\"> </ph>","pos":[3664,3724],"source":" [exp, expf](../../c-runtime-library/reference/exp-expf.md) "},{"content":"<bpt id=\"p1\"> [</bpt>log, logf, log10, log10f<ept id=\"p1\">](../../c-runtime-library/reference/log-logf-log10-log10f.md)</ept><ph id=\"ph1\"> </ph>","pos":[3727,3815],"source":" [log, logf, log10, log10f](../../c-runtime-library/reference/log-logf-log10-log10f.md) "},{"content":"<bpt id=\"p1\"> [</bpt>sqrt, sqrtf, sqrtl<ept id=\"p1\">](../../c-runtime-library/reference/sqrt-sqrtf-sqrtl.md)</ept><ph id=\"ph1\"> </ph>","pos":[3818,3895],"source":" [sqrt, sqrtf, sqrtl](../../c-runtime-library/reference/sqrt-sqrtf-sqrtl.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_CIpow<ept id=\"p1\">](../../c-runtime-library/cipow.md)</ept>","pos":[3898,3941],"source":" [_CIpow](../../c-runtime-library/cipow.md)"}],"content":"---\ntitle: \"pow, powf, powl | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"powl\"\n  - \"pow\"\n  - \"powf\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"powl\"\n  - \"pow\"\n  - \"_powl\"\n  - \"powf\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"exponential calculations\"\n  - \"powl function\"\n  - \"_powl function\"\n  - \"exponentiation\"\n  - \"powers, calculating\"\n  - \"calculating exponentials\"\n  - \"powf function\"\n  - \"pow function\"\nms.assetid: e75c33ed-2e59-48b1-be40-81da917324f1\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# pow, powf, powl\nCalculates `x` raised to the power of `y`.  \n  \n## Syntax  \n  \n```  \ndouble pow(  \n   double x,  \n   double y   \n);  \ndouble pow(  \n   double x,  \n   int y  \n);  // C++ only  \nfloat pow(  \n   float x,  \n   float y   \n);  // C++ only  \nfloat pow(  \n   float x,  \n   int y  \n);  // C++ only  \nlong double pow(  \n   long double x,  \n   long double y  \n);  // C++ only  \nlong double pow(  \n   long double x,  \n   int y  \n);  // C++ only  \nfloat powf(  \n   float x,  \n   float y   \n);  \nlong double powl(  \n   long double x,  \n   long double y  \n);  \n```  \n  \n#### Parameters  \n `x`  \n Base.  \n  \n `y`  \n Exponent.  \n  \n## Return Value  \n Returns the value of `x`<sup>y</sup>. No error message is printed on overflow or underflow.  \n  \n|Values of x and y|Return value of pow|  \n|-----------------------|-------------------------|  \n|`x` \\< > 0 and `y` = 0.0|1|  \n|`x` = 0.0 and `y` = 0.0|1|  \n|`x` = 0.0 and `y` < 0|INF|  \n  \n## Remarks  \n `pow` does not recognize integral floating-point values greater than 2<sup>64</sup> (for example, `1.0E100`).  \n  \n `pow` has an implementation that uses Streaming SIMD Extensions 2 (SSE2). For information and restrictions about using the SSE2 implementation, see [_set_SSE2_enable](../../c-runtime-library/reference/set-sse2-enable.md).  \n  \n Because C++ allows overloading, you can call any of the various overloads of `pow`. In a C program, `pow` always takes two double values and returns a double value.  \n  \n The `pow(int, int)` overload is no longer available. If you use this overload, the compiler may emit C2668. To avoid this problem, cast the first parameter to `double`, `float`, or `long double`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`pow`, `powf`, `powl`|\\<math.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Libraries  \n All versions of the [C run-time libraries](../../c-runtime-library/crt-library-features.md).  \n  \n## Example  \n  \n```  \n// crt_pow.c  \n  \n#include <math.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   double x = 2.0, y = 3.0, z;  \n  \n   z = pow( x, y );  \n   printf( \"%.1f to the power of %.1f is %.1f\\n\", x, y, z );  \n}  \n```  \n  \n## Output  \n  \n```  \n2.0 to the power of 3.0 is 8.0  \n```  \n  \n## .NET Framework Equivalent  \n [System::Math::Pow](https://msdn.microsoft.com/en-us/library/system.math.pow.aspx)  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [exp, expf](../../c-runtime-library/reference/exp-expf.md)   \n [log, logf, log10, log10f](../../c-runtime-library/reference/log-logf-log10-log10f.md)   \n [sqrt, sqrtf, sqrtl](../../c-runtime-library/reference/sqrt-sqrtf-sqrtl.md)   \n [_CIpow](../../c-runtime-library/cipow.md)"}