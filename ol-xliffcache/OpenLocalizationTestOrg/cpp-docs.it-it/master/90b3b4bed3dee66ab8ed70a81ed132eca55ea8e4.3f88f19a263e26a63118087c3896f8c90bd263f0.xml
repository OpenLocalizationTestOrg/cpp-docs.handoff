{"nodes":[{"pos":[12,48],"content":"C Integer Constants | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C Integer Constants | Microsoft Docs","pos":[0,36]}]},{"content":"C Integer Constants","pos":[583,602]},{"content":"An \"integer constant\" is a decimal (base 10), octal (base 8), or hexadecimal (base 16) number that represents an integral value.","pos":[603,731]},{"content":"Use integer constants to represent integer values that cannot be changed.","pos":[732,805]},{"content":"Syntax","pos":[814,820]},{"content":"<bpt id=\"p1\">*</bpt>integer-constant<ept id=\"p1\">*</ept>:","pos":[824,843],"source":"*integer-constant*:"},{"content":"<bpt id=\"p1\"> *</bpt>decimal-constant integer-suffix<ept id=\"p1\">*</ept> opt","pos":[846,884],"source":" *decimal-constant integer-suffix* opt"},{"pos":[891,926],"content":"<bpt id=\"p1\">*</bpt>octal-constant integer-suffix<ept id=\"p1\">*</ept> opt","source":"*octal-constant integer-suffix* opt"},{"pos":[933,974],"content":"<bpt id=\"p1\">*</bpt>hexadecimal-constant integer-suffix<ept id=\"p1\">*</ept> opt","source":"*hexadecimal-constant integer-suffix* opt"},{"content":"<bpt id=\"p1\">*</bpt>decimal-constant<ept id=\"p1\">*</ept>:","pos":[981,1000],"source":"*decimal-constant*:"},{"content":"nonzero-digit","pos":[1005,1018]},{"content":"decimal-constant digit","pos":[1027,1049]},{"content":"<bpt id=\"p1\">*</bpt>octal-constant<ept id=\"p1\">*</ept>:","pos":[1057,1074],"source":"*octal-constant*:"},{"content":"0","pos":[1080,1081]},{"content":"octal-constant octal-digit","pos":[1091,1117]},{"content":"<bpt id=\"p1\">*</bpt>hexadecimal-constant<ept id=\"p1\">*</ept>:","pos":[1125,1148],"source":"*hexadecimal-constant*:"},{"content":"<bpt id=\"p1\"> **</bpt>0x<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>hexadecimal-digit<ept id=\"p2\">*</ept>","pos":[1151,1179],"source":" **0x**  *hexadecimal-digit*"},{"pos":[1186,1213],"content":"<bpt id=\"p1\">**</bpt>0X<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>hexadecimal-digit<ept id=\"p2\">*</ept>","source":"**0X**  *hexadecimal-digit*"},{"content":"hexadecimal-constant hexadecimal-digit","pos":[1221,1259]},{"content":"<bpt id=\"p1\">*</bpt>nonzero-digit<ept id=\"p1\">*</ept>: one of","pos":[1267,1290],"source":"*nonzero-digit*: one of"},{"content":"1 2 3 4 5 6 7 8 9","pos":[1296,1313]},{"content":"<bpt id=\"p1\">*</bpt>octal-digit<ept id=\"p1\">*</ept>: one of","pos":[1322,1343],"source":"*octal-digit*: one of"},{"content":"0 1 2 3 4 5 6 7","pos":[1349,1364]},{"content":"<bpt id=\"p1\">*</bpt>hexadecimal-digit<ept id=\"p1\">*</ept>: one of","pos":[1373,1400],"source":"*hexadecimal-digit*: one of"},{"content":"0 1 2 3 4 5 6 7 8 9","pos":[1406,1425]},{"content":"a b c d e f","pos":[1436,1447]},{"content":"A B C D E F","pos":[1458,1469]},{"content":"<bpt id=\"p1\">*</bpt>integer-suffix<ept id=\"p1\">*</ept>:","pos":[1478,1495],"source":"*integer-suffix*:"},{"content":"<bpt id=\"p1\"> *</bpt>unsigned-suffix long-suffix<ept id=\"p1\">*</ept> opt","pos":[1498,1532],"source":" *unsigned-suffix long-suffix* opt"},{"pos":[1539,1572],"content":"<bpt id=\"p1\">*</bpt>long-suffix unsigned-suffix<ept id=\"p1\">*</ept> opt","source":"*long-suffix unsigned-suffix* opt"},{"content":"<bpt id=\"p1\">*</bpt>unsigned-suffix<ept id=\"p1\">*</ept>: one of","pos":[1579,1604],"source":"*unsigned-suffix*: one of"},{"content":"u U","pos":[1610,1613]},{"content":"<bpt id=\"p1\">*</bpt>long-suffix<ept id=\"p1\">*</ept>: one of","pos":[1622,1643],"source":"*long-suffix*: one of"},{"content":"l L","pos":[1649,1652]},{"content":"<bpt id=\"p1\">*</bpt>64-bit integer-suffix<ept id=\"p1\">*</ept>:","pos":[1661,1685],"source":"*64-bit integer-suffix*:"},{"content":"i64","pos":[1691,1694]},{"content":"Integer constants are positive unless they are preceded by a minus sign (<bpt id=\"p1\">**</bpt>–<ept id=\"p1\">**</ept>).","pos":[1703,1783],"source":"Integer constants are positive unless they are preceded by a minus sign (**–**)."},{"content":"The minus sign is interpreted as the unary arithmetic negation operator.","pos":[1784,1856]},{"content":"(See <bpt id=\"p1\">[</bpt>Unary Arithmetic Operators<ept id=\"p1\">](../c-language/unary-arithmetic-operators.md)</ept> for information about this operator.)","pos":[1857,1973],"source":" (See [Unary Arithmetic Operators](../c-language/unary-arithmetic-operators.md) for information about this operator.)"},{"content":"If an integer constant begins with <bpt id=\"p1\">**</bpt>0x<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>0X<ept id=\"p2\">**</ept>, it is hexadecimal.","pos":[1980,2051],"source":"If an integer constant begins with **0x** or **0X**, it is hexadecimal."},{"content":"If it begins with the digit <bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept>, it is octal.","pos":[2052,2099],"source":" If it begins with the digit **0**, it is octal."},{"content":"Otherwise, it is assumed to be decimal.","pos":[2100,2139]},{"content":"The following lines are equivalent:","pos":[2146,2181]},{"content":"No white-space characters can separate the digits of an integer constant.","pos":[2315,2388]},{"content":"These examples show valid decimal, octal, and hexadecimal constants.","pos":[2389,2457]},{"content":"See Also","pos":[2647,2655]},{"content":"C Constants","pos":[2660,2671]}],"content":"---\ntitle: \"C Integer Constants | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"integer constants\"\nms.assetid: fcf6b83c-2038-49ec-91ca-3d5ca1f83037\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C Integer Constants\nAn \"integer constant\" is a decimal (base 10), octal (base 8), or hexadecimal (base 16) number that represents an integral value. Use integer constants to represent integer values that cannot be changed.  \n  \n## Syntax  \n *integer-constant*:  \n *decimal-constant integer-suffix* opt  \n  \n *octal-constant integer-suffix* opt  \n  \n *hexadecimal-constant integer-suffix* opt  \n  \n *decimal-constant*:  \n *nonzero-digit*  \n  \n *decimal-constant digit*  \n  \n *octal-constant*:  \n **0**  \n  \n *octal-constant octal-digit*  \n  \n *hexadecimal-constant*:  \n **0x**  *hexadecimal-digit*  \n  \n **0X**  *hexadecimal-digit*  \n  \n *hexadecimal-constant hexadecimal-digit*  \n  \n *nonzero-digit*: one of  \n **1 2 3 4 5 6 7 8 9**  \n  \n *octal-digit*: one of  \n **0 1 2 3 4 5 6 7**  \n  \n *hexadecimal-digit*: one of  \n **0 1 2 3 4 5 6 7 8 9**  \n  \n **a b c d e f**  \n  \n **A B C D E F**  \n  \n *integer-suffix*:  \n *unsigned-suffix long-suffix* opt  \n  \n *long-suffix unsigned-suffix* opt  \n  \n *unsigned-suffix*: one of  \n **u U**  \n  \n *long-suffix*: one of  \n **l L**  \n  \n *64-bit integer-suffix*:  \n **i64**  \n  \n Integer constants are positive unless they are preceded by a minus sign (**–**). The minus sign is interpreted as the unary arithmetic negation operator. (See [Unary Arithmetic Operators](../c-language/unary-arithmetic-operators.md) for information about this operator.)  \n  \n If an integer constant begins with **0x** or **0X**, it is hexadecimal. If it begins with the digit **0**, it is octal. Otherwise, it is assumed to be decimal.  \n  \n The following lines are equivalent:  \n  \n```  \n0x1C   /* = Hexadecimal representation for decimal 28 */  \n034    /* = Octal representation for decimal 28 */  \n```  \n  \n No white-space characters can separate the digits of an integer constant. These examples show valid decimal, octal, and hexadecimal constants.  \n  \n```  \n/* Decimal Constants */  \n10  \n132  \n32179  \n  \n/* Octal Constants */  \n012  \n0204  \n076663  \n  \n/* Hexadecimal Constants */  \n0xa or 0xA  \n0x84  \n0x7dB3 or 0X7DB3  \n```  \n  \n## See Also  \n [C Constants](../c-language/c-constants.md)"}