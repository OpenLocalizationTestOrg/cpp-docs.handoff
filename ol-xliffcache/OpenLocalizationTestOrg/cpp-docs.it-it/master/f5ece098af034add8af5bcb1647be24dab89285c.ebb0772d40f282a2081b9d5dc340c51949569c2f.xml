{"nodes":[{"pos":[12,55],"content":"Improper Access to a Union | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Improper Access to a Union | Microsoft Docs","pos":[0,43]}]},{"content":"Improper Access to a Union","pos":[543,569]},{"pos":[570,660],"content":"<bpt id=\"p1\">**</bpt>ANSI 3.3.2.3<ept id=\"p1\">**</ept> A member of a union object is accessed using a member of a different type","source":"**ANSI 3.3.2.3** A member of a union object is accessed using a member of a different type"},{"content":"If a union of two types is declared and one value is stored, but the union is accessed with the other type, the results are unreliable.","pos":[667,802]},{"content":"For example, a union of <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`int`</ph> is declared.","pos":[809,865],"source":"For example, a union of **float** and `int` is declared."},{"content":"A <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> value is stored, but the program later accesses the value as an <ph id=\"ph1\">`int`</ph>.","pos":[866,948],"source":" A **float** value is stored, but the program later accesses the value as an `int`."},{"content":"In such a situation, the value would depend on the internal storage of <bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept> values.","pos":[949,1037],"source":" In such a situation, the value would depend on the internal storage of **float** values."},{"content":"The integer value would not be reliable.","pos":[1038,1078]},{"content":"See Also","pos":[1087,1095]},{"content":"Structures, Unions, Enumerations, and Bit Fields","pos":[1100,1148]}],"content":"---\ntitle: \"Improper Access to a Union | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nms.assetid: b273d984-62a8-4003-9a87-bf0149d3f2dd\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Improper Access to a Union\n**ANSI 3.3.2.3** A member of a union object is accessed using a member of a different type  \n  \n If a union of two types is declared and one value is stored, but the union is accessed with the other type, the results are unreliable.  \n  \n For example, a union of **float** and `int` is declared. A **float** value is stored, but the program later accesses the value as an `int`. In such a situation, the value would depend on the internal storage of **float** values. The integer value would not be reliable.  \n  \n## See Also  \n [Structures, Unions, Enumerations, and Bit Fields](../c-language/structures-unions-enumerations-and-bit-fields.md)"}