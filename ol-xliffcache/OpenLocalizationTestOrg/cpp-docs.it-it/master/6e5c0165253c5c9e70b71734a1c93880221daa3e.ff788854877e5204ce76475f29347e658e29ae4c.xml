{"nodes":[{"pos":[12,85],"content":"Implementation of a Custom String Manager (Basic Method) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Implementation of a Custom String Manager (Basic Method) | Microsoft Docs","pos":[0,73]}]},{"content":"Implementation of a Custom String Manager (Basic Method)","pos":[623,679]},{"content":"The easiest way to customize the memory allocation scheme for string data is to use the ATL-provided <bpt id=\"p1\">**</bpt>CAtlStringMgr<ept id=\"p1\">**</ept> class but provide your own memory allocation routines.","pos":[680,853],"source":"The easiest way to customize the memory allocation scheme for string data is to use the ATL-provided **CAtlStringMgr** class but provide your own memory allocation routines."},{"content":"The constructor for <bpt id=\"p1\">**</bpt>CAtlStringMgr<ept id=\"p1\">**</ept> takes a single parameter: a pointer to an <ph id=\"ph1\">`IAtlMemMgr`</ph> object.","pos":[854,954],"source":" The constructor for **CAtlStringMgr** takes a single parameter: a pointer to an `IAtlMemMgr` object."},{"content":"is an abstract base class that provides a generic interface to a heap.","pos":[968,1038]},{"content":"Using the <ph id=\"ph1\">`IAtlMemMgr`</ph> interface, the <bpt id=\"p1\">**</bpt>CAtlStringMgr<ept id=\"p1\">**</ept> allocates, reallocates, and frees the memory used to store string data.","pos":[1039,1166],"source":" Using the `IAtlMemMgr` interface, the **CAtlStringMgr** allocates, reallocates, and frees the memory used to store string data."},{"content":"You can either implement the <ph id=\"ph1\">`IAtlMemMgr`</ph> interface yourself, or use one of the five ATL-provided memory manager classes.","pos":[1167,1288],"source":" You can either implement the `IAtlMemMgr` interface yourself, or use one of the five ATL-provided memory manager classes."},{"content":"The ATL-provided memory managers simply wrap existing memory allocation facilities:","pos":[1289,1372]},{"pos":[1382,1625],"content":"<bpt id=\"p1\">[</bpt>CCRTHeap<ept id=\"p1\">](../atl/reference/ccrtheap-class.md)</ept> Wraps the standard CRT heap functions (<bpt id=\"p2\">[</bpt>malloc<ept id=\"p2\">](../c-runtime-library/reference/malloc.md)</ept>, <bpt id=\"p3\">[</bpt>free<ept id=\"p3\">](../c-runtime-library/reference/free.md)</ept>, and <bpt id=\"p4\">[</bpt>realloc<ept id=\"p4\">](../c-runtime-library/reference/realloc.md)</ept>)","source":"[CCRTHeap](../atl/reference/ccrtheap-class.md) Wraps the standard CRT heap functions ([malloc](../c-runtime-library/reference/malloc.md), [free](../c-runtime-library/reference/free.md), and [realloc](../c-runtime-library/reference/realloc.md))"},{"pos":[1635,1941],"content":"<bpt id=\"p1\">[</bpt>CWin32Heap<ept id=\"p1\">](../atl/reference/cwin32heap-class.md)</ept> Wraps a Win32 heap handle, using <bpt id=\"p2\">[</bpt>HeapAlloc<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/aa366597)</ept>, <bpt id=\"p3\">[</bpt>HeapFree<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/aa366701)</ept>, and <bpt id=\"p4\">[</bpt>HeapRealloc<ept id=\"p4\">](http://msdn.microsoft.com/library/windows/desktop/aa366704)</ept>","source":"[CWin32Heap](../atl/reference/cwin32heap-class.md) Wraps a Win32 heap handle, using [HeapAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366597), [HeapFree](http://msdn.microsoft.com/library/windows/desktop/aa366701), and [HeapRealloc](http://msdn.microsoft.com/library/windows/desktop/aa366704)"},{"pos":[1951,2249],"content":"<bpt id=\"p1\">[</bpt>CLocalHeap<ept id=\"p1\">](../atl/reference/clocalheap-class.md)</ept> Wraps the Win32 APIs: <bpt id=\"p2\">[</bpt>LocalAlloc<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/aa366723)</ept>, <bpt id=\"p3\">[</bpt>LocalFree<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/aa366730)</ept>, and <bpt id=\"p4\">[</bpt>LocalRealloc<ept id=\"p4\">](http://msdn.microsoft.com/library/windows/desktop/aa366742)</ept>","source":"[CLocalHeap](../atl/reference/clocalheap-class.md) Wraps the Win32 APIs: [LocalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366723), [LocalFree](http://msdn.microsoft.com/library/windows/desktop/aa366730), and [LocalRealloc](http://msdn.microsoft.com/library/windows/desktop/aa366742)"},{"pos":[2259,2563],"content":"<bpt id=\"p1\">[</bpt>CGlobalHeap<ept id=\"p1\">](../atl/reference/cglobalheap-class.md)</ept> Wraps the Win32 APIs: <bpt id=\"p2\">[</bpt>GlobalAlloc<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/aa366574)</ept>, <bpt id=\"p3\">[</bpt>GlobalFree<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/aa366579)</ept>, and <bpt id=\"p4\">[</bpt>GlobalRealloc<ept id=\"p4\">](http://msdn.microsoft.com/library/windows/desktop/aa366590)</ept>.","source":"[CGlobalHeap](../atl/reference/cglobalheap-class.md) Wraps the Win32 APIs: [GlobalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366574), [GlobalFree](http://msdn.microsoft.com/library/windows/desktop/aa366579), and [GlobalRealloc](http://msdn.microsoft.com/library/windows/desktop/aa366590)."},{"pos":[2573,2892],"content":"<bpt id=\"p1\">[</bpt>CComHeap<ept id=\"p1\">](../atl/reference/ccomheap-class.md)</ept> Wraps the COM Task Allocator APIs: <bpt id=\"p2\">[</bpt>CoTaskMemAlloc<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms692727)</ept>, <bpt id=\"p3\">[</bpt>CoTaskMemFree<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms680722)</ept>, and <bpt id=\"p4\">[</bpt>CoTaskMemRealloc<ept id=\"p4\">](http://msdn.microsoft.com/library/windows/desktop/ms687280)</ept>","source":"[CComHeap](../atl/reference/ccomheap-class.md) Wraps the COM Task Allocator APIs: [CoTaskMemAlloc](http://msdn.microsoft.com/library/windows/desktop/ms692727), [CoTaskMemFree](http://msdn.microsoft.com/library/windows/desktop/ms680722), and [CoTaskMemRealloc](http://msdn.microsoft.com/library/windows/desktop/ms687280)"},{"content":"For the purpose of string memory management, the most useful class is <ph id=\"ph1\">`CWin32Heap`</ph> because it allows you to create multiple independent heaps.","pos":[2899,3041],"source":"For the purpose of string memory management, the most useful class is `CWin32Heap` because it allows you to create multiple independent heaps."},{"content":"For example, if you wanted to use a separate heap just for strings, you could do the following:","pos":[3042,3137]},{"pos":[3155,3179],"content":"NVC_ATLMFC_Utilities#180"},{"pos":[3284,3447],"content":"To use this private string manager to manage memory for a <ph id=\"ph1\">`CString`</ph> variable, pass a pointer to the manager as a parameter to the <ph id=\"ph2\">`CString`</ph> variable's constructor:","source":"To use this private string manager to manage memory for a `CString` variable, pass a pointer to the manager as a parameter to the `CString` variable's constructor:"},{"pos":[3465,3489],"content":"NVC_ATLMFC_Utilities#181"},{"content":"See Also","pos":[3596,3604]},{"content":"Memory Management with CStringT","pos":[3609,3640]}],"content":"---\ntitle: \"Implementation of a Custom String Manager (Basic Method) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"IAtlStringMgr class, using\"\nms.assetid: eac5d13e-cbb4-4e82-b01e-f5f2dbcb962a\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Implementation of a Custom String Manager (Basic Method)\nThe easiest way to customize the memory allocation scheme for string data is to use the ATL-provided **CAtlStringMgr** class but provide your own memory allocation routines. The constructor for **CAtlStringMgr** takes a single parameter: a pointer to an `IAtlMemMgr` object. `IAtlMemMgr` is an abstract base class that provides a generic interface to a heap. Using the `IAtlMemMgr` interface, the **CAtlStringMgr** allocates, reallocates, and frees the memory used to store string data. You can either implement the `IAtlMemMgr` interface yourself, or use one of the five ATL-provided memory manager classes. The ATL-provided memory managers simply wrap existing memory allocation facilities:  \n  \n-   [CCRTHeap](../atl/reference/ccrtheap-class.md) Wraps the standard CRT heap functions ([malloc](../c-runtime-library/reference/malloc.md), [free](../c-runtime-library/reference/free.md), and [realloc](../c-runtime-library/reference/realloc.md))  \n  \n-   [CWin32Heap](../atl/reference/cwin32heap-class.md) Wraps a Win32 heap handle, using [HeapAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366597), [HeapFree](http://msdn.microsoft.com/library/windows/desktop/aa366701), and [HeapRealloc](http://msdn.microsoft.com/library/windows/desktop/aa366704)  \n  \n-   [CLocalHeap](../atl/reference/clocalheap-class.md) Wraps the Win32 APIs: [LocalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366723), [LocalFree](http://msdn.microsoft.com/library/windows/desktop/aa366730), and [LocalRealloc](http://msdn.microsoft.com/library/windows/desktop/aa366742)  \n  \n-   [CGlobalHeap](../atl/reference/cglobalheap-class.md) Wraps the Win32 APIs: [GlobalAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366574), [GlobalFree](http://msdn.microsoft.com/library/windows/desktop/aa366579), and [GlobalRealloc](http://msdn.microsoft.com/library/windows/desktop/aa366590).  \n  \n-   [CComHeap](../atl/reference/ccomheap-class.md) Wraps the COM Task Allocator APIs: [CoTaskMemAlloc](http://msdn.microsoft.com/library/windows/desktop/ms692727), [CoTaskMemFree](http://msdn.microsoft.com/library/windows/desktop/ms680722), and [CoTaskMemRealloc](http://msdn.microsoft.com/library/windows/desktop/ms687280)  \n  \n For the purpose of string memory management, the most useful class is `CWin32Heap` because it allows you to create multiple independent heaps. For example, if you wanted to use a separate heap just for strings, you could do the following:  \n  \n [!code-cpp[NVC_ATLMFC_Utilities#180](../atl-mfc-shared/codesnippet/cpp/implementation-of-a-custom-string-manager-basic-method_1.cpp)]  \n  \n To use this private string manager to manage memory for a `CString` variable, pass a pointer to the manager as a parameter to the `CString` variable's constructor:  \n  \n [!code-cpp[NVC_ATLMFC_Utilities#181](../atl-mfc-shared/codesnippet/cpp/implementation-of-a-custom-string-manager-basic-method_2.cpp)]  \n  \n## See Also  \n [Memory Management with CStringT](../atl-mfc-shared/memory-management-with-cstringt.md)\n\n"}