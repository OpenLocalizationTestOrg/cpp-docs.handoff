{"nodes":[{"pos":[12,67],"content":"-H (Restrict Length of External Names) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-H (Restrict Length of External Names) | Microsoft Docs","pos":[0,55]}]},{"content":"/H (Restrict Length of External Names)","pos":[731,769]},{"content":"Restricts the length of external names.","pos":[770,809]},{"content":"Syntax","pos":[818,824]},{"content":"Arguments","pos":[859,868]},{"content":"Specifies the maximum length of external names allowed in a program.","pos":[884,952]},{"content":"Remarks","pos":[961,968]},{"content":"By default, the length of external (public) names is 2,047 characters.","pos":[972,1042]},{"content":"This is true for C and C++ programs.","pos":[1043,1079]},{"content":"Using <bpt id=\"p1\">**</bpt>/H<ept id=\"p1\">**</ept> can only decrease the maximum allowable length of identifiers, not increase it.","pos":[1080,1172],"source":" Using **/H** can only decrease the maximum allowable length of identifiers, not increase it."},{"content":"A space between <bpt id=\"p1\">**</bpt>/H<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`number`</ph> is optional.","pos":[1173,1221],"source":" A space between **/H** and `number` is optional."},{"content":"If a program contains external names longer than <ph id=\"ph1\">`number`</ph>, the extra characters are ignored.","pos":[1228,1320],"source":"If a program contains external names longer than `number`, the extra characters are ignored."},{"content":"If you compile a program without <bpt id=\"p1\">**</bpt>/H<ept id=\"p1\">**</ept> and if an identifier contains more than 2,047 characters, the compiler will generate <bpt id=\"p2\">[</bpt>Fatal Error C1064<ept id=\"p2\">](../../error-messages/compiler-errors-1/fatal-error-c1064.md)</ept>.","pos":[1321,1527],"source":" If you compile a program without **/H** and if an identifier contains more than 2,047 characters, the compiler will generate [Fatal Error C1064](../../error-messages/compiler-errors-1/fatal-error-c1064.md)."},{"content":"The limit on length includes any compiler-created leading underscore (_) or at sign (@).","pos":[1534,1622]},{"content":"These characters are part of the identifier and take a significant location.","pos":[1623,1699]},{"pos":[1709,1917],"content":"The compiler adds a leading underscore (_) to names modified by the <ph id=\"ph1\">`__cdecl`</ph> (default) and <ph id=\"ph2\">`__stdcall`</ph> calling conventions, and a leading at sign (@) to names modified by the <ph id=\"ph3\">`__fastcall`</ph> calling convention.","source":"The compiler adds a leading underscore (_) to names modified by the `__cdecl` (default) and `__stdcall` calling conventions, and a leading at sign (@) to names modified by the `__fastcall` calling convention."},{"pos":[1927,2088],"content":"The compiler appends argument size information to names modified by the <ph id=\"ph1\">`__fastcall`</ph> and <ph id=\"ph2\">`__stdcall`</ph> calling conventions, and adds type information to C++ names.","source":"The compiler appends argument size information to names modified by the `__fastcall` and `__stdcall` calling conventions, and adds type information to C++ names."},{"pos":[2095,2122],"content":"You may find <bpt id=\"p1\">**</bpt>/H<ept id=\"p1\">**</ept> useful:","source":"You may find **/H** useful:"},{"content":"When you create mixed-language or portable programs.","pos":[2132,2184]},{"content":"When you use tools that impose limits on the length of external identifiers.","pos":[2194,2270]},{"content":"When you want to restrict the amount of space that symbols use in a debug build.","pos":[2280,2360]},{"pos":[2367,2485],"content":"The following example shows how using <bpt id=\"p1\">**</bpt>/H<ept id=\"p1\">**</ept> can actually introduce errors if identifier lengths are limited too much:","source":"The following example shows how using **/H** can actually introduce errors if identifier lengths are limited too much:"},{"content":"You must also be careful when using the <bpt id=\"p1\">**</bpt>/H<ept id=\"p1\">**</ept> option because of predefined compiler identifiers.","pos":[2715,2812],"source":"You must also be careful when using the **/H** option because of predefined compiler identifiers."},{"content":"If the maximum identifier length is too small, certain predefined identifiers will be unresolved as well as certain library function calls.","pos":[2813,2952]},{"content":"For example, if the <ph id=\"ph1\">`printf`</ph> function is used and the option <bpt id=\"p1\">**</bpt>/H5<ept id=\"p1\">**</ept> is specified at compile time, the symbol <bpt id=\"p2\">**</bpt>_prin<ept id=\"p2\">**</ept> will be created in order to reference <ph id=\"ph2\">`printf`</ph>, and this will not be found in the library.","pos":[2953,3163],"source":" For example, if the `printf` function is used and the option **/H5** is specified at compile time, the symbol **_prin** will be created in order to reference `printf`, and this will not be found in the library."},{"pos":[3170,3296],"content":"Use of <bpt id=\"p1\">**</bpt>/H<ept id=\"p1\">**</ept> is incompatible with <bpt id=\"p2\">[</bpt>/GL (Whole Program Optimization)<ept id=\"p2\">](../../build/reference/gl-whole-program-optimization.md)</ept>.","source":"Use of **/H** is incompatible with [/GL (Whole Program Optimization)](../../build/reference/gl-whole-program-optimization.md)."},{"content":"<bpt id=\"p1\">**</bpt>/H<ept id=\"p1\">**</ept> is deprecated; the maximum length limits have been increased and <bpt id=\"p2\">**</bpt>/H<ept id=\"p2\">**</ept> is no longer needed.","pos":[3303,3402],"source":"**/H** is deprecated; the maximum length limits have been increased and **/H** is no longer needed."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Deprecated Compiler Options in Visual C++ 2005<ept id=\"p1\">](http://msdn.microsoft.com/en-us/aa59fce3-50b8-4f66-9aeb-ce09a7a84cce)</ept>.","pos":[3404,3549],"source":"  For more information, see [Deprecated Compiler Options in Visual C++ 2005](http://msdn.microsoft.com/en-us/aa59fce3-50b8-4f66-9aeb-ce09a7a84cce)."},{"content":"To set this compiler option in the Visual Studio development environment","pos":[3559,3631]},{"content":"Open the project's <bpt id=\"p1\">**</bpt>Property Pages<ept id=\"p1\">**</ept> dialog box.","pos":[3641,3690],"source":"Open the project's **Property Pages** dialog box."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Working with Project Properties<ept id=\"p1\">](../../ide/working-with-project-properties.md)</ept>.","pos":[3691,3788],"source":" For details, see [Working with Project Properties](../../ide/working-with-project-properties.md)."},{"pos":[3798,3825],"content":"Click the <bpt id=\"p1\">**</bpt>C/C++<ept id=\"p1\">**</ept> folder.","source":"Click the **C/C++** folder."},{"pos":[3835,3876],"content":"Click the <bpt id=\"p1\">**</bpt>Command Line<ept id=\"p1\">**</ept> property page.","source":"Click the **Command Line** property page."},{"pos":[3886,3945],"content":"Type the compiler option in the <bpt id=\"p1\">**</bpt>Additional Options<ept id=\"p1\">**</ept> box.","source":"Type the compiler option in the **Additional Options** box."},{"content":"To set this compiler option programmatically","pos":[3955,3999]},{"content":"See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.AdditionalOptions%2A&gt;.","pos":[4009,4097],"source":"See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.AdditionalOptions%2A>."},{"content":"See Also","pos":[4106,4114]},{"content":"Compiler Options","pos":[4119,4135]},{"content":"Setting Compiler Options","pos":[4185,4209]}],"content":"---\ntitle: \"-H (Restrict Length of External Names) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"/h\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"public name length\"\n  - \"/H compiler option [C++]\"\n  - \"H compiler option [C++]\"\n  - \"external names\"\n  - \"-H compiler option [C++]\"\nms.assetid: de701dd3-ed04-4c88-8195-960d2520ec2e\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# /H (Restrict Length of External Names)\nRestricts the length of external names.  \n  \n## Syntax  \n  \n```  \n/Hnumber  \n```  \n  \n## Arguments  \n `number`  \n Specifies the maximum length of external names allowed in a program.  \n  \n## Remarks  \n By default, the length of external (public) names is 2,047 characters. This is true for C and C++ programs. Using **/H** can only decrease the maximum allowable length of identifiers, not increase it. A space between **/H** and `number` is optional.  \n  \n If a program contains external names longer than `number`, the extra characters are ignored. If you compile a program without **/H** and if an identifier contains more than 2,047 characters, the compiler will generate [Fatal Error C1064](../../error-messages/compiler-errors-1/fatal-error-c1064.md).  \n  \n The limit on length includes any compiler-created leading underscore (_) or at sign (@). These characters are part of the identifier and take a significant location.  \n  \n-   The compiler adds a leading underscore (_) to names modified by the `__cdecl` (default) and `__stdcall` calling conventions, and a leading at sign (@) to names modified by the `__fastcall` calling convention.  \n  \n-   The compiler appends argument size information to names modified by the `__fastcall` and `__stdcall` calling conventions, and adds type information to C++ names.  \n  \n You may find **/H** useful:  \n  \n-   When you create mixed-language or portable programs.  \n  \n-   When you use tools that impose limits on the length of external identifiers.  \n  \n-   When you want to restrict the amount of space that symbols use in a debug build.  \n  \n The following example shows how using **/H** can actually introduce errors if identifier lengths are limited too much:  \n  \n```  \n// compiler_option_H.cpp  \n// compile with: /H5  \n// processor: x86  \n// LNK2005 expected  \nvoid func1(void);  \nvoid func2(void);  \n  \nint main() { func1(); }  \n  \nvoid func1(void) {}  \nvoid func2(void) {}  \n```  \n  \n You must also be careful when using the **/H** option because of predefined compiler identifiers. If the maximum identifier length is too small, certain predefined identifiers will be unresolved as well as certain library function calls. For example, if the `printf` function is used and the option **/H5** is specified at compile time, the symbol **_prin** will be created in order to reference `printf`, and this will not be found in the library.  \n  \n Use of **/H** is incompatible with [/GL (Whole Program Optimization)](../../build/reference/gl-whole-program-optimization.md).  \n  \n **/H** is deprecated; the maximum length limits have been increased and **/H** is no longer needed.  For more information, see [Deprecated Compiler Options in Visual C++ 2005](http://msdn.microsoft.com/en-us/aa59fce3-50b8-4f66-9aeb-ce09a7a84cce).  \n  \n### To set this compiler option in the Visual Studio development environment  \n  \n1.  Open the project's **Property Pages** dialog box. For details, see [Working with Project Properties](../../ide/working-with-project-properties.md).  \n  \n2.  Click the **C/C++** folder.  \n  \n3.  Click the **Command Line** property page.  \n  \n4.  Type the compiler option in the **Additional Options** box.  \n  \n### To set this compiler option programmatically  \n  \n-   See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.AdditionalOptions%2A>.  \n  \n## See Also  \n [Compiler Options](../../build/reference/compiler-options.md)   \n [Setting Compiler Options](../../build/reference/setting-compiler-options.md)"}