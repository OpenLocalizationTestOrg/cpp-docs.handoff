{"nodes":[{"pos":[12,46],"content":"CHotKeyCtrl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CHotKeyCtrl Class | Microsoft Docs","pos":[0,34]}]},{"content":"CHotKeyCtrl Class","pos":[679,696]},{"content":"Provides the functionality of the Windows common hot key control.","pos":[697,762]},{"content":"Syntax","pos":[771,777]},{"content":"Members","pos":[835,842]},{"content":"Public Constructors","pos":[852,871]},{"content":"Name","pos":[878,882]},{"content":"Description","pos":[883,894]},{"content":"CHotKeyCtrl::CHotKeyCtrl","pos":[933,957]},{"pos":[986,1020],"content":"Constructs a <ph id=\"ph1\">`CHotKeyCtrl`</ph> object.","source":"Constructs a `CHotKeyCtrl` object."},{"content":"Public Methods","pos":[1031,1045]},{"content":"Name","pos":[1052,1056]},{"content":"Description","pos":[1057,1068]},{"content":"CHotKeyCtrl::Create","pos":[1107,1126]},{"pos":[1150,1218],"content":"Creates a hot key control and attaches it to a <ph id=\"ph1\">`CHotKeyCtrl`</ph> object.","source":"Creates a hot key control and attaches it to a `CHotKeyCtrl` object."},{"content":"CHotKeyCtrl::CreateEx","pos":[1224,1245]},{"pos":[1271,1382],"content":"Creates a hot key control with the specified Windows extended styles and attaches it to a <ph id=\"ph1\">`CHotKeyCtrl`</ph> object.","source":"Creates a hot key control with the specified Windows extended styles and attaches it to a `CHotKeyCtrl` object."},{"content":"CHotKeyCtrl::GetHotKey","pos":[1388,1410]},{"content":"Retrieves the virtual key code and modifier flags of a hot key from a hot key control.","pos":[1437,1523]},{"content":"CHotKeyCtrl::GetHotKeyName","pos":[1529,1555]},{"content":"Retrieves the key name, in the local character set, assigned to a hot key.","pos":[1586,1660]},{"content":"CHotKeyCtrl::GetKeyName","pos":[1666,1689]},{"content":"Retrieves the key name, in the local character set, assigned to the specified virtual key code.","pos":[1717,1812]},{"content":"CHotKeyCtrl::SetHotKey","pos":[1818,1840]},{"content":"Sets the hot key combination for a hot key control.","pos":[1867,1918]},{"content":"CHotKeyCtrl::SetRules","pos":[1924,1945]},{"content":"Defines the invalid combinations and the default modifier combination for a hot key control.","pos":[1971,2063]},{"content":"Remarks","pos":[2073,2080]},{"content":"A \"hot key control\" is a window that enables the user to create a hot key.","pos":[2084,2158]},{"content":"A \"hot key\" is a key combination that the user can press to perform an action quickly.","pos":[2159,2245]},{"content":"(For example, a user can create a hot key that activates a given window and brings it to the top of the Z order.) The hot key control displays the user's choices and ensures that the user selects a valid key combination.","pos":[2246,2466]},{"pos":[2473,2622],"content":"This control (and therefore the <ph id=\"ph1\">`CHotKeyCtrl`</ph> class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later.","source":"This control (and therefore the `CHotKeyCtrl` class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later."},{"content":"When the user has chosen a key combination, the application can retrieve the specified key combination from the control and use the <bpt id=\"p1\">**</bpt>WM_SETHOTKEY<ept id=\"p1\">**</ept> message to set up the hot key in the system.","pos":[2629,2822],"source":"When the user has chosen a key combination, the application can retrieve the specified key combination from the control and use the **WM_SETHOTKEY** message to set up the hot key in the system."},{"content":"Whenever the user presses the hot key thereafter, from any part of the system, the window specified in the <bpt id=\"p1\">**</bpt>WM_SETHOTKEY<ept id=\"p1\">**</ept> message receives a <ph id=\"ph1\">`WM_SYSCOMMAND`</ph> message specifying <bpt id=\"p2\">**</bpt>SC_HOTKEY<ept id=\"p2\">**</ept>.","pos":[2823,3015],"source":" Whenever the user presses the hot key thereafter, from any part of the system, the window specified in the **WM_SETHOTKEY** message receives a `WM_SYSCOMMAND` message specifying **SC_HOTKEY**."},{"content":"This message activates the window that receives it.","pos":[3016,3067]},{"content":"The hot key remains valid until the application that called <bpt id=\"p1\">**</bpt>WM_SETHOTKEY<ept id=\"p1\">**</ept> exits.","pos":[3068,3151],"source":" The hot key remains valid until the application that called **WM_SETHOTKEY** exits."},{"pos":[3158,3439],"content":"This mechanism is different from the hot key support that depends on the <bpt id=\"p1\">**</bpt>WM_HOTKEY<ept id=\"p1\">**</ept> message and the Windows <bpt id=\"p2\">[</bpt>RegisterHotKey<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms646309)</ept> and <bpt id=\"p3\">[</bpt>UnregisterHotKey<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms646327)</ept> functions.","source":"This mechanism is different from the hot key support that depends on the **WM_HOTKEY** message and the Windows [RegisterHotKey](http://msdn.microsoft.com/library/windows/desktop/ms646309) and [UnregisterHotKey](http://msdn.microsoft.com/library/windows/desktop/ms646327) functions."},{"pos":[3446,3589],"content":"For more information on using <ph id=\"ph1\">`CHotKeyCtrl`</ph>, see <bpt id=\"p1\">[</bpt>Controls<ept id=\"p1\">](../../mfc/controls-mfc.md)</ept> and <bpt id=\"p2\">[</bpt>Using CHotKeyCtrl<ept id=\"p2\">](../../mfc/using-chotkeyctrl.md)</ept>.","source":"For more information on using `CHotKeyCtrl`, see [Controls](../../mfc/controls-mfc.md) and [Using CHotKeyCtrl](../../mfc/using-chotkeyctrl.md)."},{"content":"Inheritance Hierarchy","pos":[3598,3619]},{"content":"CObject","pos":[3624,3631]},{"content":"CCmdTarget","pos":[3678,3688]},{"content":"CWnd","pos":[3738,3742]},{"content":"Requirements","pos":[3807,3819]},{"pos":[3823,3843],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcmn.h","source":"**Header:** afxcmn.h"},{"pos":[3894,3918],"content":"CHotKeyCtrl::CHotKeyCtrl"},{"pos":[3922,3956],"content":"Constructs a <ph id=\"ph1\">`CHotKeyCtrl`</ph> object.","source":"Constructs a `CHotKeyCtrl` object."},{"pos":[4032,4051],"content":"CHotKeyCtrl::Create"},{"pos":[4055,4123],"content":"Creates a hot key control and attaches it to a <ph id=\"ph1\">`CHotKeyCtrl`</ph> object.","source":"Creates a hot key control and attaches it to a `CHotKeyCtrl` object."},{"content":"Parameters","pos":[4253,4263]},{"content":"Specifies the hot key control's style.","pos":[4280,4318]},{"content":"Apply any combination of control styles.","pos":[4319,4359]},{"content":"See <bpt id=\"p1\">[</bpt>Common Control Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775498)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph> for more information.","pos":[4360,4528],"source":" See [Common Control Styles](http://msdn.microsoft.com/library/windows/desktop/bb775498) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information."},{"content":"Specifies the hot key control's size and position.","pos":[4545,4595]},{"content":"It can be either a <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or a <bpt id=\"p2\">[</bpt>RECT structure<ept id=\"p2\">](../../mfc/reference/rect-structure1.md)</ept>.","pos":[4596,4739],"source":" It can be either a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or a [RECT structure](../../mfc/reference/rect-structure1.md)."},{"content":"Specifies the hot key control's parent window, usually a <bpt id=\"p1\">[</bpt>CDialog<ept id=\"p1\">](../../mfc/reference/cdialog-class.md)</ept>.","pos":[4762,4867],"source":" Specifies the hot key control's parent window, usually a [CDialog](../../mfc/reference/cdialog-class.md)."},{"content":"It must not be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[4868,4892],"source":" It must not be **NULL**."},{"content":"Specifies the hot key control's ID.","pos":[4908,4943]},{"content":"Return Value","pos":[4953,4965]},{"content":"Nonzero, if initialization was successful; otherwise 0.","pos":[4969,5024]},{"content":"Remarks","pos":[5034,5041]},{"content":"You construct a <ph id=\"ph1\">`CHotKeyCtrl`</ph> object in two steps.","pos":[5045,5095],"source":"You construct a `CHotKeyCtrl` object in two steps."},{"content":"First, call the constructor and then call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, which creates the hot key control and attaches it to the <ph id=\"ph1\">`CHotKeyCtrl`</ph> object.","pos":[5096,5228],"source":" First, call the constructor and then call **Create**, which creates the hot key control and attaches it to the `CHotKeyCtrl` object."},{"pos":[5235,5359],"content":"If you want to use extended windows styles with your control, call <bpt id=\"p1\">[</bpt>CreateEx<ept id=\"p1\">](#chotkeyctrl__createex)</ept> instead of <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>.","source":"If you want to use extended windows styles with your control, call [CreateEx](#chotkeyctrl__createex) instead of **Create**."},{"pos":[5407,5428],"content":"CHotKeyCtrl::CreateEx"},{"pos":[5432,5535],"content":"Call this function to create a control (a child window) and associate it with the <ph id=\"ph1\">`CHotKeyCtrl`</ph> object.","source":"Call this function to create a control (a child window) and associate it with the `CHotKeyCtrl` object."},{"content":"Parameters","pos":[5690,5700]},{"content":"Specifies the extended style of the control being created.","pos":[5719,5777]},{"content":"For a list of extended Windows styles, see the <ph id=\"ph1\">`dwExStyle`</ph> parameter for <bpt id=\"p1\">[</bpt>CreateWindowEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[5778,5987],"source":" For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Specifies the hot key control's style.","pos":[6007,6045]},{"content":"Apply any combination of control styles.","pos":[6046,6086]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Common Control Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775498)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[6087,6256],"source":" For more information, see [Common Control Styles](http://msdn.microsoft.com/library/windows/desktop/bb775498) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"A reference to a <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure describing the size and position of the window to be created, in client coordinates of <ph id=\"ph1\">`pParentWnd`</ph>.","pos":[6273,6467],"source":" A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`."},{"content":"A pointer to the window that is the control's parent.","pos":[6490,6543]},{"content":"The control's child-window ID.","pos":[6559,6589]},{"content":"Return Value","pos":[6599,6611]},{"content":"Nonzero if successful; otherwise 0.","pos":[6615,6650]},{"content":"Remarks","pos":[6660,6667]},{"pos":[6671,6821],"content":"Use <ph id=\"ph1\">`CreateEx`</ph> instead of <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#chotkeyctrl__create)</ept> to apply extended Windows styles, specified by the Windows extended style preface <bpt id=\"p2\">**</bpt>WS_EX_<ept id=\"p2\">**</ept>.","source":"Use `CreateEx` instead of [Create](#chotkeyctrl__create) to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**."},{"pos":[6870,6892],"content":"CHotKeyCtrl::GetHotKey"},{"content":"Retrieves the virtual key code and modifier flags of a keyboard shortcut from a hot key control.","pos":[6896,6992]},{"content":"Parameters","pos":[7122,7132]},{"content":"[out]","pos":[7136,7141]},{"content":"Virtual key code of the keyboard shortcut.","pos":[7163,7205]},{"content":"For a list of standard virtual key codes, see Winuser.h.","pos":[7206,7262]},{"content":"[out]","pos":[7269,7274]},{"content":"A bitwise combination (OR) of flags that indicate the modifier keys in the keyboard shortcut.","pos":[7291,7384]},{"content":"The modifier flags are as follows:","pos":[7391,7425]},{"content":"Flag","pos":[7432,7436]},{"content":"Corresponding Key","pos":[7437,7454]},{"content":"ALT key","pos":[7512,7519]},{"content":"CTRL key","pos":[7542,7550]},{"content":"Extended key","pos":[7569,7581]},{"content":"SHIFT key","pos":[7602,7611]},{"content":"Return Value","pos":[7622,7634]},{"content":"In the first overloaded method, a <ph id=\"ph1\">`DWORD`</ph> that contains the virtual key code and modifier flags.","pos":[7638,7734],"source":"In the first overloaded method, a `DWORD` that contains the virtual key code and modifier flags."},{"content":"The low-order byte of the low-order word contains the virtual key code, the high-order byte of the low-order word contains the modifier flags, and the high-order word is zero.","pos":[7735,7910]},{"content":"Remarks","pos":[7920,7927]},{"content":"The virtual key code and the modifier keys together define the keyboard shortcut.","pos":[7931,8012]},{"pos":[8065,8091],"content":"CHotKeyCtrl::GetHotKeyName"},{"content":"Call this member function to get the localized name of the hot key.","pos":[8095,8162]},{"content":"Return Value","pos":[8221,8233]},{"content":"The localized name of the currently selected hot key.","pos":[8237,8290]},{"content":"If there is no selected hot key, <ph id=\"ph1\">`GetHotKeyName`</ph> returns an empty string.","pos":[8291,8364],"source":" If there is no selected hot key, `GetHotKeyName` returns an empty string."},{"content":"Remarks","pos":[8374,8381]},{"content":"The name that this member function returns comes from the keyboard driver.","pos":[8385,8459]},{"content":"You can install a non-localized keyboard driver in a localized version of Windows, and vice versa.","pos":[8460,8558]},{"pos":[8608,8631],"content":"CHotKeyCtrl::GetKeyName"},{"content":"Call this member function to get the localized name of the key assigned to a specified virtual key code.","pos":[8635,8739]},{"content":"Parameters","pos":[8827,8837]},{"content":"The virtual key code.","pos":[8849,8870]},{"content":"fExtended","pos":[8878,8887]},{"content":"If the virtual key code is an extended key, <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[8892,8966],"source":" If the virtual key code is an extended key, **TRUE**; otherwise **FALSE**."},{"content":"Return Value","pos":[8976,8988]},{"content":"The localized name of the key specified by the <ph id=\"ph1\">`vk`</ph> parameter.","pos":[8992,9054],"source":"The localized name of the key specified by the `vk` parameter."},{"content":"If the key has no mapped name, <ph id=\"ph1\">`GetKeyName`</ph> returns an empty string.","pos":[9055,9123],"source":" If the key has no mapped name, `GetKeyName` returns an empty string."},{"content":"Remarks","pos":[9133,9140]},{"content":"The key name that this function returns comes from the keyboard driver, so you can install a non-localized keyboard driver in a localized version of Windows, and vice versa.","pos":[9144,9317]},{"content":"Example","pos":[9327,9334]},{"pos":[9349,9377],"content":"NVC_MFCControlLadenDialog#69"},{"pos":[9479,9501],"content":"CHotKeyCtrl::SetHotKey"},{"content":"Sets the keyboard shortcut for a hot key control.","pos":[9505,9554]},{"content":"Parameters","pos":[9645,9655]},{"content":"[in]","pos":[9659,9663]},{"content":"Virtual key code of the keyboard shortcut.","pos":[9685,9727]},{"content":"For a list of standard virtual key codes, see Winuser.h.","pos":[9728,9784]},{"content":"[in]","pos":[9791,9795]},{"content":"A bitwise combination (OR) of flags that indicate the modifier keys in the keyboard shortcut.","pos":[9812,9905]},{"content":"The modifier flags are as follows:","pos":[9912,9946]},{"content":"Flag","pos":[9953,9957]},{"content":"Corresponding Key","pos":[9958,9975]},{"content":"ALT key","pos":[10033,10040]},{"content":"CTRL key","pos":[10063,10071]},{"content":"Extended key","pos":[10090,10102]},{"content":"SHIFT key","pos":[10123,10132]},{"content":"Remarks","pos":[10143,10150]},{"content":"The virtual key code and the modifier keys together define the keyboard shortcut.","pos":[10154,10235]},{"pos":[10283,10304],"content":"CHotKeyCtrl::SetRules"},{"content":"Call this function to define the invalid combinations and the default modifier combination for a hot key control.","pos":[10308,10421]},{"content":"Parameters","pos":[10508,10518]},{"content":"Array of flags that specifies invalid key combinations.","pos":[10540,10595]},{"content":"It can be a combination of the following values:","pos":[10596,10644]},{"pos":[10663,10666],"content":"ALT"},{"pos":[10685,10689],"content":"CTRL"},{"pos":[10709,10717],"content":"CTRL+ALT"},{"pos":[10739,10754],"content":"Unmodified keys"},{"pos":[10773,10778],"content":"SHIFT"},{"pos":[10798,10807],"content":"SHIFT+ALT"},{"pos":[10827,10837],"content":"SHIFT+CTRL"},{"pos":[10858,10872],"content":"SHIFT+CTRL+ALT"},{"pos":[10879,11082],"content":"`wModifiers`  \nArray of flags that specifies the key combination to use when the user enters an invalid combination. For more information on the modifier flags, see [GetHotKey](#chotkeyctrl__gethotkey).","leadings":[""," "],"nodes":[{"content":"Array of flags that specifies the key combination to use when the user enters an invalid combination. For more information on the modifier flags, see [GetHotKey](#chotkeyctrl__gethotkey).","pos":[15,202],"nodes":[{"content":"Array of flags that specifies the key combination to use when the user enters an invalid combination.","pos":[0,101]},{"content":"For more information on the modifier flags, see <bpt id=\"p1\">[</bpt>GetHotKey<ept id=\"p1\">](#chotkeyctrl__gethotkey)</ept>.","pos":[102,187],"source":" For more information on the modifier flags, see [GetHotKey](#chotkeyctrl__gethotkey)."}]}]},{"content":"Remarks","pos":[11092,11099]},{"content":"When a user enters an invalid key combination, as defined by flags specified in <ph id=\"ph1\">`wInvalidComb`</ph>, the system uses the OR operator to combine the keys entered by the user with the flags specified in <ph id=\"ph2\">`wModifiers`</ph>.","pos":[11103,11312],"source":"When a user enters an invalid key combination, as defined by flags specified in `wInvalidComb`, the system uses the OR operator to combine the keys entered by the user with the flags specified in `wModifiers`."},{"content":"The resulting key combination is converted into a string and then displayed in the hot key control.","pos":[11313,11412]},{"content":"See Also","pos":[11421,11429]},{"content":"CWnd Class","pos":[11434,11444]},{"content":"Hierarchy Chart","pos":[11486,11501]}],"content":"---\ntitle: \"CHotKeyCtrl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CHotKeyCtrl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"hot key controls\"\n  - \"CHotKeyCtrl class\"\n  - \"Windows common controls [C++], CHotKeyCtrl\"\nms.assetid: 896f9766-0718-4f58-aab2-20325e118ca6\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CHotKeyCtrl Class\nProvides the functionality of the Windows common hot key control.  \n  \n## Syntax  \n  \n```  \nclass CHotKeyCtrl : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHotKeyCtrl::CHotKeyCtrl](#chotkeyctrl__chotkeyctrl)|Constructs a `CHotKeyCtrl` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CHotKeyCtrl::Create](#chotkeyctrl__create)|Creates a hot key control and attaches it to a `CHotKeyCtrl` object.|  \n|[CHotKeyCtrl::CreateEx](#chotkeyctrl__createex)|Creates a hot key control with the specified Windows extended styles and attaches it to a `CHotKeyCtrl` object.|  \n|[CHotKeyCtrl::GetHotKey](#chotkeyctrl__gethotkey)|Retrieves the virtual key code and modifier flags of a hot key from a hot key control.|  \n|[CHotKeyCtrl::GetHotKeyName](#chotkeyctrl__gethotkeyname)|Retrieves the key name, in the local character set, assigned to a hot key.|  \n|[CHotKeyCtrl::GetKeyName](#chotkeyctrl__getkeyname)|Retrieves the key name, in the local character set, assigned to the specified virtual key code.|  \n|[CHotKeyCtrl::SetHotKey](#chotkeyctrl__sethotkey)|Sets the hot key combination for a hot key control.|  \n|[CHotKeyCtrl::SetRules](#chotkeyctrl__setrules)|Defines the invalid combinations and the default modifier combination for a hot key control.|  \n  \n## Remarks  \n A \"hot key control\" is a window that enables the user to create a hot key. A \"hot key\" is a key combination that the user can press to perform an action quickly. (For example, a user can create a hot key that activates a given window and brings it to the top of the Z order.) The hot key control displays the user's choices and ensures that the user selects a valid key combination.  \n  \n This control (and therefore the `CHotKeyCtrl` class) is available only to programs running under Windows 95/98 and Windows NT version 3.51 and later.  \n  \n When the user has chosen a key combination, the application can retrieve the specified key combination from the control and use the **WM_SETHOTKEY** message to set up the hot key in the system. Whenever the user presses the hot key thereafter, from any part of the system, the window specified in the **WM_SETHOTKEY** message receives a `WM_SYSCOMMAND` message specifying **SC_HOTKEY**. This message activates the window that receives it. The hot key remains valid until the application that called **WM_SETHOTKEY** exits.  \n  \n This mechanism is different from the hot key support that depends on the **WM_HOTKEY** message and the Windows [RegisterHotKey](http://msdn.microsoft.com/library/windows/desktop/ms646309) and [UnregisterHotKey](http://msdn.microsoft.com/library/windows/desktop/ms646327) functions.  \n  \n For more information on using `CHotKeyCtrl`, see [Controls](../../mfc/controls-mfc.md) and [Using CHotKeyCtrl](../../mfc/using-chotkeyctrl.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n `CHotKeyCtrl`  \n  \n## Requirements  \n **Header:** afxcmn.h  \n  \n##  <a name=\"chotkeyctrl__chotkeyctrl\"></a>  CHotKeyCtrl::CHotKeyCtrl  \n Constructs a `CHotKeyCtrl` object.  \n  \n```  \nCHotKeyCtrl();\n```  \n  \n##  <a name=\"chotkeyctrl__create\"></a>  CHotKeyCtrl::Create  \n Creates a hot key control and attaches it to a `CHotKeyCtrl` object.  \n  \n```  \nvirtual BOOL Create(\n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwStyle`  \n Specifies the hot key control's style. Apply any combination of control styles. See [Common Control Styles](http://msdn.microsoft.com/library/windows/desktop/bb775498) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)] for more information.  \n  \n `rect`  \n Specifies the hot key control's size and position. It can be either a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or a [RECT structure](../../mfc/reference/rect-structure1.md).  \n  \n `pParentWnd`  \n Specifies the hot key control's parent window, usually a [CDialog](../../mfc/reference/cdialog-class.md). It must not be **NULL**.  \n  \n `nID`  \n Specifies the hot key control's ID.  \n  \n### Return Value  \n Nonzero, if initialization was successful; otherwise 0.  \n  \n### Remarks  \n You construct a `CHotKeyCtrl` object in two steps. First, call the constructor and then call **Create**, which creates the hot key control and attaches it to the `CHotKeyCtrl` object.  \n  \n If you want to use extended windows styles with your control, call [CreateEx](#chotkeyctrl__createex) instead of **Create**.  \n  \n##  <a name=\"chotkeyctrl__createex\"></a>  CHotKeyCtrl::CreateEx  \n Call this function to create a control (a child window) and associate it with the `CHotKeyCtrl` object.  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwExStyle,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwExStyle`  \n Specifies the extended style of the control being created. For a list of extended Windows styles, see the `dwExStyle` parameter for [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `dwStyle`  \n Specifies the hot key control's style. Apply any combination of control styles. For more information, see [Common Control Styles](http://msdn.microsoft.com/library/windows/desktop/bb775498) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `rect`  \n A reference to a [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure describing the size and position of the window to be created, in client coordinates of `pParentWnd`.  \n  \n `pParentWnd`  \n A pointer to the window that is the control's parent.  \n  \n `nID`  \n The control's child-window ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Use `CreateEx` instead of [Create](#chotkeyctrl__create) to apply extended Windows styles, specified by the Windows extended style preface **WS_EX_**.  \n  \n##  <a name=\"chotkeyctrl__gethotkey\"></a>  CHotKeyCtrl::GetHotKey  \n Retrieves the virtual key code and modifier flags of a keyboard shortcut from a hot key control.  \n  \n```  \nDWORD GetHotKey() const;\n\n \nvoid GetHotKey(\n    WORD& wVirtualKeyCode,  \n    WORD& wModifiers) const;\n\n \n```  \n  \n### Parameters  \n [out] `wVirtualKeyCode`  \n Virtual key code of the keyboard shortcut. For a list of standard virtual key codes, see Winuser.h.  \n  \n [out] `wModifiers`  \n A bitwise combination (OR) of flags that indicate the modifier keys in the keyboard shortcut.  \n  \n The modifier flags are as follows:  \n  \n|Flag|Corresponding Key|  \n|----------|-----------------------|  \n|`HOTKEYF_ALT`|ALT key|  \n|`HOTKEYF_CONTROL`|CTRL key|  \n|`HOTKEYF_EXT`|Extended key|  \n|`HOTKEYF_SHIFT`|SHIFT key|  \n  \n### Return Value  \n In the first overloaded method, a `DWORD` that contains the virtual key code and modifier flags. The low-order byte of the low-order word contains the virtual key code, the high-order byte of the low-order word contains the modifier flags, and the high-order word is zero.  \n  \n### Remarks  \n The virtual key code and the modifier keys together define the keyboard shortcut.  \n  \n##  <a name=\"chotkeyctrl__gethotkeyname\"></a>  CHotKeyCtrl::GetHotKeyName  \n Call this member function to get the localized name of the hot key.  \n  \n```  \nCString GetHotKeyName() const;\n\n \n```  \n  \n### Return Value  \n The localized name of the currently selected hot key. If there is no selected hot key, `GetHotKeyName` returns an empty string.  \n  \n### Remarks  \n The name that this member function returns comes from the keyboard driver. You can install a non-localized keyboard driver in a localized version of Windows, and vice versa.  \n  \n##  <a name=\"chotkeyctrl__getkeyname\"></a>  CHotKeyCtrl::GetKeyName  \n Call this member function to get the localized name of the key assigned to a specified virtual key code.  \n  \n```  \nstatic CString GetKeyName(\n    UINT vk,  \n    BOOL fExtended);\n```  \n  \n### Parameters  \n `vk`  \n The virtual key code.  \n  \n *fExtended*  \n If the virtual key code is an extended key, **TRUE**; otherwise **FALSE**.  \n  \n### Return Value  \n The localized name of the key specified by the `vk` parameter. If the key has no mapped name, `GetKeyName` returns an empty string.  \n  \n### Remarks  \n The key name that this function returns comes from the keyboard driver, so you can install a non-localized keyboard driver in a localized version of Windows, and vice versa.  \n  \n### Example  \n [!code-cpp[NVC_MFCControlLadenDialog#69](../../mfc/codesnippet/cpp/chotkeyctrl-class_1.cpp)]  \n  \n##  <a name=\"chotkeyctrl__sethotkey\"></a>  CHotKeyCtrl::SetHotKey  \n Sets the keyboard shortcut for a hot key control.  \n  \n```  \nvoid SetHotKey(\n    WORD wVirtualKeyCode,  \n    WORD wModifiers);\n```  \n  \n### Parameters  \n [in] `wVirtualKeyCode`  \n Virtual key code of the keyboard shortcut. For a list of standard virtual key codes, see Winuser.h.  \n  \n [in] `wModifiers`  \n A bitwise combination (OR) of flags that indicate the modifier keys in the keyboard shortcut.  \n  \n The modifier flags are as follows:  \n  \n|Flag|Corresponding Key|  \n|----------|-----------------------|  \n|`HOTKEYF_ALT`|ALT key|  \n|`HOTKEYF_CONTROL`|CTRL key|  \n|`HOTKEYF_EXT`|Extended key|  \n|`HOTKEYF_SHIFT`|SHIFT key|  \n  \n### Remarks  \n The virtual key code and the modifier keys together define the keyboard shortcut.  \n  \n##  <a name=\"chotkeyctrl__setrules\"></a>  CHotKeyCtrl::SetRules  \n Call this function to define the invalid combinations and the default modifier combination for a hot key control.  \n  \n```  \nvoid SetRules(\n    WORD wInvalidComb,  \n    WORD wModifiers);\n```  \n  \n### Parameters  \n `wInvalidComb`  \n Array of flags that specifies invalid key combinations. It can be a combination of the following values:  \n  \n- `HKCOMB_A` ALT  \n  \n- `HKCOMB_C` CTRL  \n  \n- `HKCOMB_CA` CTRL+ALT  \n  \n- `HKCOMB_NONE` Unmodified keys  \n  \n- `HKCOMB_S` SHIFT  \n  \n- `HKCOMB_SA` SHIFT+ALT  \n  \n- `HKCOMB_SC` SHIFT+CTRL  \n  \n- `HKCOMB_SCA` SHIFT+CTRL+ALT  \n  \n `wModifiers`  \n Array of flags that specifies the key combination to use when the user enters an invalid combination. For more information on the modifier flags, see [GetHotKey](#chotkeyctrl__gethotkey).  \n  \n### Remarks  \n When a user enters an invalid key combination, as defined by flags specified in `wInvalidComb`, the system uses the OR operator to combine the keys entered by the user with the flags specified in `wModifiers`. The resulting key combination is converted into a string and then displayed in the hot key control.  \n  \n## See Also  \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}