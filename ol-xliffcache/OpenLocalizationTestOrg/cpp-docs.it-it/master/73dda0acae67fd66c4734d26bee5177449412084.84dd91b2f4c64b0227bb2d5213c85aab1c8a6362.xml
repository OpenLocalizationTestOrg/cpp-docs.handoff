{"nodes":[{"pos":[12,60],"content":"ordered_message_processor Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ordered_message_processor Class | Microsoft Docs","pos":[0,48]}]},{"content":"ordered_message_processor Class","pos":[667,698]},{"pos":[699,834],"content":"An <ph id=\"ph1\">`ordered_message_processor`</ph> is a <ph id=\"ph2\">`message_processor`</ph> that allows message blocks to process messages in the order they were received.","source":"An `ordered_message_processor` is a `message_processor` that allows message blocks to process messages in the order they were received."},{"content":"Syntax","pos":[843,849]},{"content":"Parameters","pos":[954,964]},{"content":"The payload type of messages handled by the processor.","pos":[975,1029]},{"content":"Members","pos":[1038,1045]},{"content":"Public Typedefs","pos":[1055,1070]},{"content":"Name","pos":[1077,1081]},{"content":"Description","pos":[1082,1093]},{"pos":[1138,1159],"content":"A type alias for <ph id=\"ph1\">`T`</ph>.","source":"A type alias for `T`."},{"content":"Public Constructors","pos":[1170,1189]},{"content":"Name","pos":[1196,1200]},{"content":"Description","pos":[1201,1212]},{"content":"ordered_message_processor::ordered_message_processor Constructor","pos":[1251,1315]},{"pos":[1324,1373],"content":"Constructs an <ph id=\"ph1\">`ordered_message_processor`</ph> object.","source":"Constructs an `ordered_message_processor` object."},{"content":"ordered_message_processor::~ordered_message_processor Destructor","pos":[1379,1443]},{"pos":[1452,1500],"content":"Destroys the <ph id=\"ph1\">`ordered_message_processor`</ph> object.","source":"Destroys the `ordered_message_processor` object."},{"content":"Public Methods","pos":[1511,1525]},{"content":"Name","pos":[1532,1536]},{"content":"Description","pos":[1537,1548]},{"content":"ordered_message_processor::async_send Method","pos":[1587,1631]},{"content":"Asynchronously queues up messages and starts a processing task, if this has not been done already.","pos":[1646,1744]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>message_processor::async_send<ept id=\"p1\">](message-processor-class.md#async_send)</ept>.)","pos":[1745,1828],"source":" (Overrides [message_processor::async_send](message-processor-class.md#async_send).)"},{"content":"ordered_message_processor::initialize Method","pos":[1834,1878]},{"pos":[1893,2013],"content":"Initializes the <ph id=\"ph1\">`ordered_message_processor`</ph> object with the appropriate callback function, scheduler and schedule group.","source":"Initializes the `ordered_message_processor` object with the appropriate callback function, scheduler and schedule group."},{"content":"ordered_message_processor::initialize_batched_processing Method","pos":[2019,2082]},{"content":"Initialize batched message processing","pos":[2116,2153]},{"content":"ordered_message_processor::sync_send Method","pos":[2159,2202]},{"content":"Synchronously queues up messages and starts a processing task, if this has not been done already.","pos":[2216,2313]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>message_processor::sync_send<ept id=\"p1\">](message-processor-class.md#sync_send)</ept>.)","pos":[2314,2395],"source":" (Overrides [message_processor::sync_send](message-processor-class.md#sync_send).)"},{"content":"ordered_message_processor::wait Method","pos":[2401,2439]},{"content":"A processor-specific spin wait used in destructors of message blocks to make sure that all asynchronous processing tasks have time to finish before destroying the block.","pos":[2448,2617]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>message_processor::wait<ept id=\"p1\">](message-processor-class.md#wait)</ept>.)","pos":[2618,2689],"source":" (Overrides [message_processor::wait](message-processor-class.md#wait).)"},{"content":"Protected Methods","pos":[2700,2717]},{"content":"Name","pos":[2724,2728]},{"content":"Description","pos":[2729,2740]},{"content":"ordered_message_processor::process_incoming_message Method","pos":[2779,2837]},{"content":"The processing function that is called asynchronously.","pos":[2866,2920]},{"content":"It dequeues messages and begins processing them.","pos":[2921,2969]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>message_processor::process_incoming_message<ept id=\"p1\">](message-processor-class.md#process_incoming_message)</ept>.)","pos":[2970,3081],"source":" (Overrides [message_processor::process_incoming_message](message-processor-class.md#process_incoming_message).)"},{"content":"Inheritance Hierarchy","pos":[3091,3112]},{"content":"message_processor","pos":[3117,3134]},{"content":"Requirements","pos":[3206,3218]},{"pos":[3222,3242],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[3249,3275],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[3312,3356],"content":"ordered_message_processor::async_send Method"},{"content":"Asynchronously queues up messages and starts a processing task, if this has not been done already.","pos":[3360,3458]},{"content":"Parameters","pos":[3536,3546]},{"content":"A pointer to a message.","pos":[3560,3583]},{"pos":[3620,3664],"content":"ordered_message_processor::initialize Method"},{"pos":[3668,3788],"content":"Initializes the <ph id=\"ph1\">`ordered_message_processor`</ph> object with the appropriate callback function, scheduler and schedule group.","source":"Initializes the `ordered_message_processor` object with the appropriate callback function, scheduler and schedule group."},{"content":"Parameters","pos":[3954,3964]},{"content":"A pointer to the scheduler to be used for scheduling light-weight tasks.","pos":[3985,4057]},{"content":"A pointer to the schedule group to be used for scheduling light-weight tasks.","pos":[4085,4162]},{"content":"The handler functor invoked during callback.","pos":[4183,4227]},{"pos":[4283,4346],"content":"ordered_message_processor::initialize_batched_processing Method"},{"content":"Initialize batched message processing","pos":[4350,4387]},{"content":"Parameters","pos":[4537,4547]},{"content":"The processor functor invoked during callback.","pos":[4567,4613]},{"content":"The propagator functor invoked during callback.","pos":[4637,4684]},{"pos":[4715,4779],"content":"ordered_message_processor::ordered_message_processor Constructor"},{"pos":[4783,4832],"content":"Constructs an <ph id=\"ph1\">`ordered_message_processor`</ph> object.","source":"Constructs an `ordered_message_processor` object."},{"content":"Remarks","pos":[4884,4891]},{"pos":[4895,5025],"content":"This <ph id=\"ph1\">`ordered_message_processor`</ph> will not schedule asynchronous or synchronous handlers until the <ph id=\"ph2\">`initialize`</ph> function is called.","source":"This `ordered_message_processor` will not schedule asynchronous or synchronous handlers until the `initialize` function is called."},{"pos":[5056,5120],"content":"ordered_message_processor::~ordered_message_processor Destructor"},{"pos":[5124,5172],"content":"Destroys the <ph id=\"ph1\">`ordered_message_processor`</ph> object.","source":"Destroys the `ordered_message_processor` object."},{"content":"Remarks","pos":[5233,5240]},{"content":"Waits for all outstanding asynchronous operations before destroying the processor.","pos":[5244,5326]},{"pos":[5377,5435],"content":"ordered_message_processor::process_incoming_message Method"},{"content":"The processing function that is called asynchronously.","pos":[5439,5493]},{"content":"It dequeues messages and begins processing them.","pos":[5494,5542]},{"pos":[5632,5675],"content":"ordered_message_processor::sync_send Method"},{"content":"Synchronously queues up messages and starts a processing task, if this has not been done already.","pos":[5679,5776]},{"content":"Parameters","pos":[5853,5863]},{"content":"A pointer to a message.","pos":[5877,5900]},{"pos":[5931,5969],"content":"ordered_message_processor::wait Method"},{"content":"A processor-specific spin wait used in destructors of message blocks to make sure that all asynchronous processing tasks have time to finish before destroying the block.","pos":[5973,6142]},{"content":"See Also","pos":[6185,6193]},{"content":"concurrency Namespace","pos":[6198,6219]}],"content":"---\ntitle: \"ordered_message_processor Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::ordered_message_processor\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ordered_message_processor class\"\nms.assetid: 787adfb7-7f79-4a70-864a-80e3b64088cd\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ordered_message_processor Class\nAn `ordered_message_processor` is a `message_processor` that allows message blocks to process messages in the order they were received.  \n  \n## Syntax  \n  \n```\ntemplate<class T>\nclass ordered_message_processor : public message_processor<T>;\n```  \n  \n#### Parameters  \n `T`  \n The payload type of messages handled by the processor.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`type`|A type alias for `T`.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ordered_message_processor::ordered_message_processor Constructor](#ctor)|Constructs an `ordered_message_processor` object.|  \n|[ordered_message_processor::~ordered_message_processor Destructor](#dtor)|Destroys the `ordered_message_processor` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ordered_message_processor::async_send Method](#async_send)|Asynchronously queues up messages and starts a processing task, if this has not been done already. (Overrides [message_processor::async_send](message-processor-class.md#async_send).)|  \n|[ordered_message_processor::initialize Method](#initialize)|Initializes the `ordered_message_processor` object with the appropriate callback function, scheduler and schedule group.|  \n|[ordered_message_processor::initialize_batched_processing Method](#initialize_batched_processing)|Initialize batched message processing|  \n|[ordered_message_processor::sync_send Method](#sync_send)|Synchronously queues up messages and starts a processing task, if this has not been done already. (Overrides [message_processor::sync_send](message-processor-class.md#sync_send).)|  \n|[ordered_message_processor::wait Method](#wait)|A processor-specific spin wait used in destructors of message blocks to make sure that all asynchronous processing tasks have time to finish before destroying the block. (Overrides [message_processor::wait](message-processor-class.md#wait).)|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[ordered_message_processor::process_incoming_message Method](#process_incoming_message)|The processing function that is called asynchronously. It dequeues messages and begins processing them. (Overrides [message_processor::process_incoming_message](message-processor-class.md#process_incoming_message).)|  \n  \n## Inheritance Hierarchy  \n [message_processor](message-processor-class.md)  \n  \n `ordered_message_processor`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"async_send\"></a>  ordered_message_processor::async_send Method  \n Asynchronously queues up messages and starts a processing task, if this has not been done already.  \n  \n```\nvirtual void async_send(_Inout_opt_ message<T>* _Msg);\n```  \n  \n### Parameters  \n `_Msg`  \n A pointer to a message.  \n  \n##  <a name=\"initialize\"></a>  ordered_message_processor::initialize Method  \n Initializes the `ordered_message_processor` object with the appropriate callback function, scheduler and schedule group.  \n  \n```\nvoid initialize(\n    _Inout_opt_ Scheduler* _PScheduler,\n    _Inout_opt_ ScheduleGroup* _PScheduleGroup,\n    _Handler_method const& _Handler);\n```  \n  \n### Parameters  \n `_PScheduler`  \n A pointer to the scheduler to be used for scheduling light-weight tasks.  \n  \n `_PScheduleGroup`  \n A pointer to the schedule group to be used for scheduling light-weight tasks.  \n  \n `_Handler`  \n The handler functor invoked during callback.  \n  \n##  <a name=\"initialize_batched_processing\"></a>  ordered_message_processor::initialize_batched_processing Method  \n Initialize batched message processing  \n  \n```\nvirtual void initialize_batched_processing(\n    _Handler_method const& _Processor,\n    _Propagator_method const& _Propagator);\n```  \n  \n### Parameters  \n `_Processor`  \n The processor functor invoked during callback.  \n  \n `_Propagator`  \n The propagator functor invoked during callback.  \n  \n##  <a name=\"ctor\"></a>  ordered_message_processor::ordered_message_processor Constructor  \n Constructs an `ordered_message_processor` object.  \n  \n```\nordered_message_processor();\n```  \n  \n### Remarks  \n This `ordered_message_processor` will not schedule asynchronous or synchronous handlers until the `initialize` function is called.  \n  \n##  <a name=\"dtor\"></a>  ordered_message_processor::~ordered_message_processor Destructor  \n Destroys the `ordered_message_processor` object.  \n  \n```\nvirtual ~ordered_message_processor();\n```  \n  \n### Remarks  \n Waits for all outstanding asynchronous operations before destroying the processor.  \n  \n##  <a name=\"process_incoming_message\"></a>  ordered_message_processor::process_incoming_message Method  \n The processing function that is called asynchronously. It dequeues messages and begins processing them.  \n  \n```\nvirtual void process_incoming_message();\n```  \n  \n##  <a name=\"sync_send\"></a>  ordered_message_processor::sync_send Method  \n Synchronously queues up messages and starts a processing task, if this has not been done already.  \n  \n```\nvirtual void sync_send(_Inout_opt_ message<T>* _Msg);\n```  \n  \n### Parameters  \n `_Msg`  \n A pointer to a message.  \n  \n##  <a name=\"wait\"></a>  ordered_message_processor::wait Method  \n A processor-specific spin wait used in destructors of message blocks to make sure that all asynchronous processing tasks have time to finish before destroying the block.  \n  \n```\nvirtual void wait();\n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)\n"}