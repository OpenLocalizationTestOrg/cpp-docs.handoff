{"nodes":[{"pos":[12,40],"content":"_fpieee_flt | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_fpieee_flt | Microsoft Docs","pos":[0,28]}]},{"pos":[1073,1084],"content":"_fpieee_flt","linkify":"_fpieee_flt","nodes":[{"content":"_fpieee_flt","pos":[0,11]}]},{"content":"Invokes a user-defined trap handler for IEEE floating-point exceptions.","pos":[1085,1156]},{"pos":[1165,1171],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1328,1338],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Exception code.","pos":[1355,1370]},{"content":"Pointer to the Windows NT exception information structure.","pos":[1390,1448]},{"content":"Pointer to the user's IEEE trap-handler routine.","pos":[1468,1516]},{"pos":[1525,1537],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The return value of <ph id=\"ph1\">`_fpieee_flt`</ph> is the value returned by <ph id=\"ph2\">`handler`</ph>.","pos":[1541,1610],"source":"The return value of `_fpieee_flt` is the value returned by `handler`."},{"content":"As such, the IEEE filter routine might be used in the except clause of a structured exception-handling (SEH) mechanism.","pos":[1611,1730]},{"pos":[1739,1746],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`_fpieee_flt`</ph> function invokes a user-defined trap handler for IEEE floating-point exceptions and provides it with all relevant information.","pos":[1750,1894],"source":"The `_fpieee_flt` function invokes a user-defined trap handler for IEEE floating-point exceptions and provides it with all relevant information."},{"content":"This routine serves as an exception filter in the SEH mechanism, which invokes your own IEEE exception handler when necessary.","pos":[1895,2021]},{"content":"The <ph id=\"ph1\">`_FPIEEE_RECORD`</ph> structure, defined in Fpieee.h, contains information pertaining to an IEEE floating-point exception.","pos":[2028,2149],"source":"The `_FPIEEE_RECORD` structure, defined in Fpieee.h, contains information pertaining to an IEEE floating-point exception."},{"content":"This structure is passed to the user-defined trap handler by <ph id=\"ph1\">`_fpieee_flt`</ph>.","pos":[2150,2225],"source":" This structure is passed to the user-defined trap handler by `_fpieee_flt`."},{"content":"_FPIEEE_RECORD field","pos":[2232,2252]},{"content":"Description","pos":[2253,2264]},{"pos":[2320,2373],"content":"<ph id=\"ph1\">`unsigned int RoundingMode`</ph>, <ph id=\"ph2\">`unsigned int Precision`</ph>","source":"`unsigned int RoundingMode`, `unsigned int Precision`"},{"content":"These fields contain information about the floating-point environment at the time the exception occurred.","pos":[2374,2479]},{"content":"Indicates the type of operation that caused the trap.","pos":[2509,2562]},{"content":"If the type is a comparison (<ph id=\"ph1\">`_FpCodeCompare`</ph>), you can supply one of the special <ph id=\"ph2\">`_FPIEEE_COMPARE_RESULT`</ph> values (as defined in Fpieee.h) in the <ph id=\"ph3\">`Result.Value`</ph> field.","pos":[2563,2730],"source":" If the type is a comparison (`_FpCodeCompare`), you can supply one of the special `_FPIEEE_COMPARE_RESULT` values (as defined in Fpieee.h) in the `Result.Value` field."},{"content":"The conversion type (<ph id=\"ph1\">`_FpCodeConvert`</ph>) indicates that the trap occurred during a floating-point conversion operation.","pos":[2731,2848],"source":" The conversion type (`_FpCodeConvert`) indicates that the trap occurred during a floating-point conversion operation."},{"content":"You can look at the <ph id=\"ph1\">`Operand1`</ph> and <ph id=\"ph2\">`Result`</ph> types to determine the type of conversion being attempted.","pos":[2849,2951],"source":" You can look at the `Operand1` and `Result` types to determine the type of conversion being attempted."},{"pos":[2956,3030],"content":"<ph id=\"ph1\">`_FPIEEE_VALUE Operand1`</ph>, <ph id=\"ph2\">`_FPIEEE_VALUE Operand2`</ph>, <ph id=\"ph3\">`_FPIEEE_VALUE Result`</ph>","source":"`_FPIEEE_VALUE Operand1`, `_FPIEEE_VALUE Operand2`, `_FPIEEE_VALUE Result`"},{"content":"These structures indicate the types and values of the proposed result and operands:","pos":[3031,3114]},{"content":"<ph id=\"ph1\">`OperandValid`</ph> Flag indicating whether the responding value is valid.","pos":[3127,3196],"source":"`OperandValid` Flag indicating whether the responding value is valid."},{"content":"<ph id=\"ph1\">`Format`</ph> Data type of the corresponding value.","pos":[3209,3255],"source":"`Format` Data type of the corresponding value."},{"content":"The format type might be returned even if the corresponding value is not valid.","pos":[3256,3335]},{"content":"<ph id=\"ph1\">`Value`</ph> Result or operand data value.","pos":[3348,3385],"source":"`Value` Result or operand data value."},{"pos":[3390,3489],"content":"<ph id=\"ph1\">`_FPIEEE_EXCEPTION_FLAGS Cause`</ph>, <ph id=\"ph2\">`_FPIEEE_EXCEPTION_FLAGS Enable`</ph>, <ph id=\"ph3\">`_FPIEEE_EXCEPTION_FLAGS Status`</ph>","source":"`_FPIEEE_EXCEPTION_FLAGS Cause`, `_FPIEEE_EXCEPTION_FLAGS Enable`, `_FPIEEE_EXCEPTION_FLAGS Status`"},{"content":"_FPIEEE_EXCEPTION_FLAGS contains one bit field per type of floating point exception.","pos":[3490,3574]},{"content":"There is a correspondence between these fields and the arguments used to mask the exceptions supplied to <bpt id=\"p1\">[</bpt>_controlfp<ept id=\"p1\">](../../c-runtime-library/reference/control87-controlfp-control87-2.md)</ept>.","pos":[3587,3775],"source":" There is a correspondence between these fields and the arguments used to mask the exceptions supplied to [_controlfp](../../c-runtime-library/reference/control87-controlfp-control87-2.md)."},{"content":"The exact meaning of each bit depends on context:","pos":[3788,3837]},{"content":"<ph id=\"ph1\">`Cause`</ph> Each set bit indicates the particular exception that was raised.","pos":[3850,3922],"source":"`Cause` Each set bit indicates the particular exception that was raised."},{"content":"<ph id=\"ph1\">`Enable`</ph> Each set bit indicates that the particular exception is currently unmasked.","pos":[3935,4019],"source":"`Enable` Each set bit indicates that the particular exception is currently unmasked."},{"content":"<ph id=\"ph1\">`Status`</ph> Each set bit indicates that the particular exception is currently pending.","pos":[4032,4115],"source":"`Status` Each set bit indicates that the particular exception is currently pending."},{"content":"This includes exceptions that have not been raised because they were masked by <ph id=\"ph1\">`_controlfp`</ph>.","pos":[4116,4208],"source":" This includes exceptions that have not been raised because they were masked by `_controlfp`."},{"content":"Pending exceptions that are disabled are raised when you enable them.","pos":[4216,4285]},{"content":"This can result in undefined behavior when using <ph id=\"ph1\">`_fpieee_flt`</ph> as an exception filter.","pos":[4286,4372],"source":" This can result in undefined behavior when using `_fpieee_flt` as an exception filter."},{"content":"Always call <bpt id=\"p1\">[</bpt>_clearfp<ept id=\"p1\">](../../c-runtime-library/reference/clear87-clearfp.md)</ept> before enabling floating point exceptions.","pos":[4373,4492],"source":" Always call [_clearfp](../../c-runtime-library/reference/clear87-clearfp.md) before enabling floating point exceptions."},{"pos":[4501,4513],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[4520,4528]},{"content":"Required header","pos":[4529,4544]},{"content":"<ph id=\"ph1\">\\&lt;</ph>fpieee.h&gt;","pos":[4604,4615],"source":"\\<fpieee.h>"},{"pos":[4623,4741],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[4750,4757],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6220,6245],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"Not applicable.","pos":[6249,6264]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[6265,6312],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[6313,6438],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"pos":[6447,6455],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[6459,6535],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_control87, _controlfp, <ph id=\"ph1\">\\_</ph>_control87_2<ept id=\"p1\">](../../c-runtime-library/reference/control87-controlfp-control87-2.md)</ept><ph id=\"ph2\"> </ph>","pos":[6538,6650],"source":" [_control87, _controlfp, \\__control87_2](../../c-runtime-library/reference/control87-controlfp-control87-2.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_controlfp_s<ept id=\"p1\">](../../c-runtime-library/reference/controlfp-s.md)</ept>","pos":[6653,6718],"source":" [_controlfp_s](../../c-runtime-library/reference/controlfp-s.md)"}],"content":"---\ntitle: \"_fpieee_flt | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_fpieee_flt\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"fpieee_flt\"\n  - \"_fpieee_flt\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_fpieee_flt function\"\n  - \"exception handling, floating-point\"\n  - \"floating-point exception handling\"\n  - \"fpieee_flt function\"\nms.assetid: 2bc4801e-0eed-4e73-b518-215da8cc9740\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _fpieee_flt\nInvokes a user-defined trap handler for IEEE floating-point exceptions.  \n  \n## Syntax  \n  \n```  \nint _fpieee_flt(   \n   unsigned long excCode,  \n   struct _EXCEPTION_POINTERS *excInfo,  \n   int handler(_FPIEEE_RECORD *)   \n);  \n```  \n  \n#### Parameters  \n `excCode`  \n Exception code.  \n  \n `excInfo`  \n Pointer to the Windows NT exception information structure.  \n  \n `handler`  \n Pointer to the user's IEEE trap-handler routine.  \n  \n## Return Value  \n The return value of `_fpieee_flt` is the value returned by `handler`. As such, the IEEE filter routine might be used in the except clause of a structured exception-handling (SEH) mechanism.  \n  \n## Remarks  \n The `_fpieee_flt` function invokes a user-defined trap handler for IEEE floating-point exceptions and provides it with all relevant information. This routine serves as an exception filter in the SEH mechanism, which invokes your own IEEE exception handler when necessary.  \n  \n The `_FPIEEE_RECORD` structure, defined in Fpieee.h, contains information pertaining to an IEEE floating-point exception. This structure is passed to the user-defined trap handler by `_fpieee_flt`.  \n  \n|_FPIEEE_RECORD field|Description|  \n|----------------------------|-----------------|  \n|`unsigned int RoundingMode`, `unsigned int Precision`|These fields contain information about the floating-point environment at the time the exception occurred.|  \n|`unsigned int Operation`|Indicates the type of operation that caused the trap. If the type is a comparison (`_FpCodeCompare`), you can supply one of the special `_FPIEEE_COMPARE_RESULT` values (as defined in Fpieee.h) in the `Result.Value` field. The conversion type (`_FpCodeConvert`) indicates that the trap occurred during a floating-point conversion operation. You can look at the `Operand1` and `Result` types to determine the type of conversion being attempted.|  \n|`_FPIEEE_VALUE Operand1`, `_FPIEEE_VALUE Operand2`, `_FPIEEE_VALUE Result`|These structures indicate the types and values of the proposed result and operands:<br /><br /> `OperandValid` Flag indicating whether the responding value is valid.<br /><br /> `Format` Data type of the corresponding value. The format type might be returned even if the corresponding value is not valid.<br /><br /> `Value` Result or operand data value.|  \n|`_FPIEEE_EXCEPTION_FLAGS Cause`, `_FPIEEE_EXCEPTION_FLAGS Enable`, `_FPIEEE_EXCEPTION_FLAGS Status`|_FPIEEE_EXCEPTION_FLAGS contains one bit field per type of floating point exception.<br /><br /> There is a correspondence between these fields and the arguments used to mask the exceptions supplied to [_controlfp](../../c-runtime-library/reference/control87-controlfp-control87-2.md).<br /><br /> The exact meaning of each bit depends on context:<br /><br /> `Cause` Each set bit indicates the particular exception that was raised.<br /><br /> `Enable` Each set bit indicates that the particular exception is currently unmasked.<br /><br /> `Status` Each set bit indicates that the particular exception is currently pending. This includes exceptions that have not been raised because they were masked by `_controlfp`.|  \n  \n Pending exceptions that are disabled are raised when you enable them. This can result in undefined behavior when using `_fpieee_flt` as an exception filter. Always call [_clearfp](../../c-runtime-library/reference/clear87-clearfp.md) before enabling floating point exceptions.  \n  \n## Requirements  \n  \n|Function|Required header|  \n|--------------|---------------------|  \n|`_fpieee_flt`|\\<fpieee.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_fpieee.c  \n// This program demonstrates the implementation of  \n// a user-defined floating-point exception handler using the  \n// _fpieee_flt function.  \n  \n#include <fpieee.h>  \n#include <excpt.h>  \n#include <float.h>  \n#include <stddef.h>  \n  \nint fpieee_handler( _FPIEEE_RECORD * );  \n  \nint fpieee_handler( _FPIEEE_RECORD *pieee )  \n{  \n   // user-defined ieee trap handler routine:  \n   // there is one handler for all   \n   // IEEE exceptions  \n  \n   // Assume the user wants all invalid   \n   // operations to return 0.  \n  \n   if ((pieee->Cause.InvalidOperation) &&   \n       (pieee->Result.Format == _FpFormatFp32))   \n   {  \n        pieee->Result.Value.Fp32Value = 0.0F;  \n  \n        return EXCEPTION_CONTINUE_EXECUTION;  \n   }  \n   else  \n      return EXCEPTION_EXECUTE_HANDLER;  \n}  \n  \n#define _EXC_MASK    \\  \n    _EM_UNDERFLOW  + \\  \n    _EM_OVERFLOW   + \\  \n    _EM_ZERODIVIDE + \\  \n    _EM_INEXACT  \n  \nint main( void )  \n{  \n   // ...  \n  \n   __try {  \n      // unmask invalid operation exception  \n      _controlfp_s(NULL, _EXC_MASK, _MCW_EM);   \n  \n      // code that may generate   \n      // fp exceptions goes here  \n   }  \n   __except ( _fpieee_flt( GetExceptionCode(),  \n                GetExceptionInformation(),  \n                fpieee_handler ) ){  \n  \n      // code that gets control   \n  \n      // if fpieee_handler returns  \n      // EXCEPTION_EXECUTE_HANDLER goes here  \n  \n   }  \n  \n   // ...  \n}  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [_control87, _controlfp, \\__control87_2](../../c-runtime-library/reference/control87-controlfp-control87-2.md)   \n [_controlfp_s](../../c-runtime-library/reference/controlfp-s.md)"}