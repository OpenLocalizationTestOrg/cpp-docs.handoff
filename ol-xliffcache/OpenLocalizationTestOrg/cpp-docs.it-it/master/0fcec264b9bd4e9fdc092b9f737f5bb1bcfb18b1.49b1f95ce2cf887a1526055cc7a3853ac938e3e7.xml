{"nodes":[{"pos":[12,49],"content":"Demotion of Integers | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Demotion of Integers | Microsoft Docs","pos":[0,37]}]},{"content":"Demotion of Integers","pos":[583,603]},{"pos":[604,805],"content":"<bpt id=\"p1\">**</bpt>ANSI 3.2.1.2<ept id=\"p1\">**</ept> The result of converting an integer to a shorter signed integer, or the result of converting an unsigned integer to a signed integer of equal length, if the value cannot be represented","source":"**ANSI 3.2.1.2** The result of converting an integer to a shorter signed integer, or the result of converting an unsigned integer to a signed integer of equal length, if the value cannot be represented"},{"pos":[812,937],"content":"When a <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept> integer is cast to <bpt id=\"p2\">**</bpt>a short<ept id=\"p2\">**</ept>, or a <bpt id=\"p3\">**</bpt>short<ept id=\"p3\">**</ept> is cast to a <ph id=\"ph1\">`char`</ph>, the least-significant bytes are retained.","source":"When a **long** integer is cast to **a short**, or a **short** is cast to a `char`, the least-significant bytes are retained."},{"content":"For example, this line","pos":[944,966]},{"pos":[1020,1066],"content":"assigns the value 0x5678 to <ph id=\"ph1\">`x`</ph>, and this line","source":"assigns the value 0x5678 to `x`, and this line"},{"pos":[1113,1143],"content":"assigns the value 0x34 to <ph id=\"ph1\">`y`</ph>.","source":"assigns the value 0x34 to `y`."},{"content":"When signed variables are converted to unsigned and vice versa, the bit patterns remain the same.","pos":[1150,1247]},{"content":"For example, casting –2 (0xFE) to an unsigned value yields 254 (also 0xFE).","pos":[1248,1323]},{"content":"See Also","pos":[1332,1340]},{"content":"Integers","pos":[1345,1353]}],"content":"---\ntitle: \"Demotion of Integers | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"demoting integers\"\nms.assetid: 51fb3654-60b0-4de7-80eb-bd910086c18a\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Demotion of Integers\n**ANSI 3.2.1.2** The result of converting an integer to a shorter signed integer, or the result of converting an unsigned integer to a signed integer of equal length, if the value cannot be represented  \n  \n When a **long** integer is cast to **a short**, or a **short** is cast to a `char`, the least-significant bytes are retained.  \n  \n For example, this line  \n  \n```  \nshort x = (short)0x12345678L;  \n```  \n  \n assigns the value 0x5678 to `x`, and this line  \n  \n```  \nchar y = (char)0x1234;  \n```  \n  \n assigns the value 0x34 to `y`.  \n  \n When signed variables are converted to unsigned and vice versa, the bit patterns remain the same. For example, casting –2 (0xFE) to an unsigned value yields 254 (also 0xFE).  \n  \n## See Also  \n [Integers](../c-language/integers.md)"}