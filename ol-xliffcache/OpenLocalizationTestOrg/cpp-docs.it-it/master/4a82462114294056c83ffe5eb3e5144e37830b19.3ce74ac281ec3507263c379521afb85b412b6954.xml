{"nodes":[{"pos":[12,51],"content":"unary_negate (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"unary_negate (STL-CLR) | Microsoft Docs","pos":[0,39]}]},{"content":"unary_negate (STL/CLR)","pos":[635,657]},{"content":"The template class describes a functor that, when called, returns the logical NOT of its stored one-argument functor.","pos":[658,775]},{"content":"You use it specify a function object in terms of its stored functor.","pos":[776,844]},{"content":"Syntax","pos":[853,859]},{"content":"Parameters","pos":[1403,1413]},{"content":"Fun","pos":[1417,1420]},{"content":"The type of the stored functor.","pos":[1424,1455]},{"content":"Member Functions","pos":[1464,1480]},{"content":"Type Definition","pos":[1487,1502]},{"content":"Description","pos":[1503,1514]},{"content":"argument_type","pos":[1563,1576]},{"content":"The type of the functor argument.","pos":[1577,1610]},{"content":"delegate_type","pos":[1615,1628]},{"content":"The type of the generic delegate.","pos":[1629,1662]},{"content":"result_type","pos":[1667,1678]},{"content":"The type of the functor result.","pos":[1679,1710]},{"content":"Member","pos":[1718,1724]},{"content":"Description","pos":[1725,1736]},{"content":"unary_negate","pos":[1776,1788]},{"content":"Constructs the functor.","pos":[1789,1812]},{"content":"Operator","pos":[1820,1828]},{"content":"Description","pos":[1829,1840]},{"content":"operator()","pos":[1882,1892]},{"content":"Computes the desired function.","pos":[1893,1923]},{"content":"delegate_type^","pos":[1928,1942]},{"content":"Casts the functor to a delegate.","pos":[1943,1975]},{"content":"Remarks","pos":[1985,1992]},{"content":"The template class describes a one-argument functor that stores another one-argument functor.","pos":[1996,2089]},{"content":"It defines the member operator <ph id=\"ph1\">`operator()`</ph> so that, when the object is called as a function, it returns the logical NOT of the stored functor called with the argument.","pos":[2090,2258],"source":" It defines the member operator `operator()` so that, when the object is called as a function, it returns the logical NOT of the stored functor called with the argument."},{"pos":[2265,2387],"content":"You can also pass the object as a function argument whose type is <ph id=\"ph1\">`delegate_type^`</ph> and it will be converted appropriately.","source":"You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately."},{"content":"Example","pos":[2396,2403]},{"content":"Requirements","pos":[3553,3565]},{"pos":[3569,3601],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[3608,3629],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[3638,3646]},{"content":"not1 (STL/CLR)","pos":[3651,3665]}],"content":"---\ntitle: \"unary_negate (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::unary_negate\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"unary_negate function [STL/CLR]\"\nms.assetid: 83bbdd86-199c-4451-9f70-72f9ade2264a\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# unary_negate (STL/CLR)\nThe template class describes a functor that, when called, returns the logical NOT of its stored one-argument functor. You use it specify a function object in terms of its stored functor.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Fun>  \n    ref class unary_negate  \n    { // wrap operator()  \npublic:  \n    typedef Fun stored_function_type;  \n    typedef typename Fun::argument_type argument_type;  \n    typedef bool result_type;  \n    typedef Microsoft::VisualC::StlClr::UnaryDelegate<  \n        argument_type, result_type>  \n        delegate_type;  \n  \n    unary_negate(Fun% functor);  \n    unary_negate(unary_negate<Fun>% right);  \n  \n    result_type operator()(argument_type left);  \n    operator delegate_type^();  \n    };  \n```  \n  \n#### Parameters  \n Fun  \n The type of the stored functor.  \n  \n## Member Functions  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|argument_type|The type of the functor argument.|  \n|delegate_type|The type of the generic delegate.|  \n|result_type|The type of the functor result.|  \n  \n|Member|Description|  \n|------------|-----------------|  \n|unary_negate|Constructs the functor.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|operator()|Computes the desired function.|  \n|delegate_type^|Casts the functor to a delegate.|  \n  \n## Remarks  \n The template class describes a one-argument functor that stores another one-argument functor. It defines the member operator `operator()` so that, when the object is called as a function, it returns the logical NOT of the stored functor called with the argument.  \n  \n You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately.  \n  \n## Example  \n  \n```  \n// cliext_unary_negate.cpp   \n// compile with: /clr   \n#include <cliext/algorithm>   \n#include <cliext/functional>   \n#include <cliext/vector>   \n  \ntypedef cliext::vector<int> Myvector;   \nint main()   \n    {   \n    Myvector c1;   \n    c1.push_back(4);   \n    c1.push_back(0);   \n    Myvector c3(2, 0);   \n  \n// display initial contents \" 4 0\"   \n    for each (int elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display   \n    cliext::logical_not<int> not_op;   \n  \n    cliext::transform(c1.begin(), c1.begin() + 2, c3.begin(),   \n        cliext::unary_negate<cliext::logical_not<int> >(not_op));   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display with function   \n    cliext::transform(c1.begin(), c1.begin() + 2, c3.begin(),   \n        cliext::not1(not_op));   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n4 0  \n1 0  \n1 0  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [not1 (STL/CLR)](../dotnet/not1-stl-clr.md)"}