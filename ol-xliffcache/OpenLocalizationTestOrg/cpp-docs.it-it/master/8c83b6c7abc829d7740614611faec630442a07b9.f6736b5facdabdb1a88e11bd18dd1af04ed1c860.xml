{"nodes":[{"pos":[12,54],"content":"Filename Search Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Filename Search Functions | Microsoft Docs","pos":[0,42]}]},{"content":"Filename Search Functions","pos":[885,910]},{"content":"These functions search for and close searches for specified file names:","pos":[911,982]},{"content":"_findnext, _wfindnext","pos":[993,1014]},{"content":"_findfirst, _wfindfirst","pos":[1080,1103]},{"content":"_findclose","pos":[1170,1180]},{"content":"Remarks","pos":[1235,1242]},{"content":"The <ph id=\"ph1\">`_findfirst`</ph> function provides information about the first instance of a file name that matches the file specified in the <ph id=\"ph2\">`filespec`</ph> argument.","pos":[1246,1392],"source":"The `_findfirst` function provides information about the first instance of a file name that matches the file specified in the `filespec` argument."},{"content":"You can use in <ph id=\"ph1\">`filespec`</ph> any combination of wildcard characters that is supported by the host operating system.","pos":[1393,1505],"source":" You can use in `filespec` any combination of wildcard characters that is supported by the host operating system."},{"content":"The functions return file information in a _<ph id=\"ph1\">`finddata_t`</ph> structure, which is defined in IO.h.","pos":[1512,1605],"source":"The functions return file information in a _`finddata_t` structure, which is defined in IO.h."},{"content":"Various functions in the family use many variations on the <ph id=\"ph1\">`_finddata_t`</ph> structure.","pos":[1606,1689],"source":" Various functions in the family use many variations on the `_finddata_t` structure."},{"content":"The basic <ph id=\"ph1\">`_finddata_t`</ph> structure includes the following elements:","pos":[1690,1756],"source":" The basic `_finddata_t` structure includes the following elements:"},{"content":"File attribute.","pos":[1784,1799]},{"content":"Time of file creation (–1L for FAT file systems).","pos":[1830,1879]},{"content":"This time is stored in UTC format.","pos":[1880,1914]},{"content":"To convert to the local time, use <bpt id=\"p1\">[</bpt>localtime_s<ept id=\"p1\">](../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md)</ept>.","pos":[1915,2038],"source":" To convert to the local time, use [localtime_s](../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md)."},{"content":"Time of the last file access (–1L for FAT file systems).","pos":[2069,2125]},{"content":"This time is stored in UTC format.","pos":[2126,2160]},{"content":"To convert to the local time, use <ph id=\"ph1\">`localtime_s`</ph>.","pos":[2161,2209],"source":" To convert to the local time, use `localtime_s`."},{"content":"Time of the last write to file.","pos":[2239,2270]},{"content":"This time is stored in UTC format.","pos":[2271,2305]},{"content":"To convert to the local time, use <ph id=\"ph1\">`localtime_s`</ph>.","pos":[2306,2354],"source":" To convert to the local time, use `localtime_s`."},{"content":"Length of the file in bytes.","pos":[2380,2408]},{"content":"[ <ph id=\"ph1\">`_MAX_PATH`</ph>]","pos":[2426,2440],"source":"[ `_MAX_PATH`]"},{"content":"Null-terminated name of matched file or directory, without the path.","pos":[2444,2512]},{"pos":[2519,2683],"content":"In file systems that do not support the creation and last access times of a file, such as the FAT system, the <ph id=\"ph1\">`time_create`</ph> and <ph id=\"ph2\">`time_access`</ph> fields are always –1L.","source":"In file systems that do not support the creation and last access times of a file, such as the FAT system, the `time_create` and `time_access` fields are always –1L."},{"pos":[2702,2738],"content":"is defined in Stdlib.h as 260 bytes."},{"content":"You cannot specify target attributes (such as <ph id=\"ph1\">`_A_RDONLY`</ph>) to limit the find operation.","pos":[2745,2832],"source":"You cannot specify target attributes (such as `_A_RDONLY`) to limit the find operation."},{"content":"These attributes are returned in the <ph id=\"ph1\">`attrib`</ph> field of the <ph id=\"ph2\">`_finddata_t`</ph> structure and can have the following values (defined in IO.h).","pos":[2833,2968],"source":" These attributes are returned in the `attrib` field of the `_finddata_t` structure and can have the following values (defined in IO.h)."},{"content":"Users should not rely on these being the only values possible for the <ph id=\"ph1\">`attrib`</ph> field.","pos":[2969,3054],"source":" Users should not rely on these being the only values possible for the `attrib` field."},{"content":"Archive.","pos":[3074,3082]},{"content":"Set whenever the file is changed and cleared by the <bpt id=\"p1\">**</bpt>BACKUP<ept id=\"p1\">**</ept> command.","pos":[3083,3154],"source":" Set whenever the file is changed and cleared by the **BACKUP** command."},{"content":"Value: 0x20.","pos":[3155,3167]},{"content":"Hidden file.","pos":[3189,3201]},{"content":"Not generally seen with the DIR command, unless you use the <bpt id=\"p1\">**</bpt>/AH<ept id=\"p1\">**</ept> option.","pos":[3202,3277],"source":" Not generally seen with the DIR command, unless you use the **/AH** option."},{"content":"Returns information about normal files and files that have this attribute.","pos":[3278,3352]},{"content":"Value: 0x02.","pos":[3353,3365]},{"content":"Normal.","pos":[3387,3394]},{"content":"File has no other attributes set and can be read or written to without restriction.","pos":[3395,3478]},{"content":"Value: 0x00.","pos":[3479,3491]},{"content":"Read-only.","pos":[3513,3523]},{"content":"File cannot be opened for writing and a file that has the same name cannot be created.","pos":[3524,3610]},{"content":"Value: 0x01.","pos":[3611,3623]},{"content":"Subdirectory.","pos":[3645,3658]},{"content":"Value: 0x10.","pos":[3659,3671]},{"content":"System file.","pos":[3693,3705]},{"content":"Not ordinarily seen with the <bpt id=\"p1\">**</bpt>DIR<ept id=\"p1\">**</ept> command, unless the <bpt id=\"p2\">**</bpt>/A<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>/A:S<ept id=\"p3\">**</ept> option is used.","pos":[3706,3797],"source":" Not ordinarily seen with the **DIR** command, unless the **/A** or **/A:S** option is used."},{"content":"Value: 0x04.","pos":[3798,3810]},{"content":"finds the next name, if any, that matches the <ph id=\"ph1\">`filespec`</ph> argument specified in an earlier call to <ph id=\"ph2\">`_findfirst`</ph>.","pos":[3829,3940],"source":" finds the next name, if any, that matches the `filespec` argument specified in an earlier call to `_findfirst`."},{"content":"The <ph id=\"ph1\">`fileinfo`</ph> argument should point to a structure initialized by the previous call to <ph id=\"ph2\">`_findfirst`</ph>.","pos":[3941,4042],"source":" The `fileinfo` argument should point to a structure initialized by the previous call to `_findfirst`."},{"content":"If a match is found, the <ph id=\"ph1\">`fileinfo`</ph> structure contents are changed as described earlier.","pos":[4043,4131],"source":" If a match is found, the `fileinfo` structure contents are changed as described earlier."},{"content":"Otherwise, it is left unchanged.","pos":[4132,4164]},{"content":"closes the specified search handle and releases all associated resources for both <ph id=\"ph1\">`_findfirst`</ph> and <ph id=\"ph2\">`_findnext`</ph>.","pos":[4178,4289],"source":" closes the specified search handle and releases all associated resources for both `_findfirst` and `_findnext`."},{"content":"The handle returned by either <ph id=\"ph1\">`_findfirst`</ph> or <ph id=\"ph2\">`_findnext`</ph> must first be passed to <ph id=\"ph3\">`_findclose`</ph>, before modification operations, such as deleting, can be performed on the directories that form the paths passed to them.","pos":[4290,4507],"source":" The handle returned by either `_findfirst` or `_findnext` must first be passed to `_findclose`, before modification operations, such as deleting, can be performed on the directories that form the paths passed to them."},{"content":"You can nest the <ph id=\"ph1\">`_find`</ph> functions.","pos":[4514,4549],"source":"You can nest the `_find` functions."},{"content":"For example, if a call to <ph id=\"ph1\">`_findfirst`</ph> or <ph id=\"ph2\">`_findnext`</ph> finds the file that is a subdirectory, a new search can be initiated with another call to <ph id=\"ph3\">`_findfirst`</ph> or <ph id=\"ph4\">`_findnext`</ph>.","pos":[4550,4722],"source":" For example, if a call to `_findfirst` or `_findnext` finds the file that is a subdirectory, a new search can be initiated with another call to `_findfirst` or `_findnext`."},{"content":"and <ph id=\"ph1\">`_wfindnext`</ph> are wide-character versions of <ph id=\"ph2\">`_findfirst`</ph> and <ph id=\"ph3\">`_findnext`</ph>.","pos":[4743,4820],"source":" and `_wfindnext` are wide-character versions of `_findfirst` and `_findnext`."},{"content":"The structure argument of the wide-character versions has the <ph id=\"ph1\">`_wfinddata_t`</ph> data type, which is defined in IO.h and in Wchar.h.","pos":[4821,4949],"source":" The structure argument of the wide-character versions has the `_wfinddata_t` data type, which is defined in IO.h and in Wchar.h."},{"content":"The fields of this data type are the same as those of the <ph id=\"ph1\">`_finddata_t`</ph> data type, except that in <ph id=\"ph2\">`_wfinddata_t`</ph> the name field is of type <ph id=\"ph3\">`wchar_t`</ph> instead of type <ph id=\"ph4\">`char`</ph>.","pos":[4950,5122],"source":" The fields of this data type are the same as those of the `_finddata_t` data type, except that in `_wfinddata_t` the name field is of type `wchar_t` instead of type `char`."},{"content":"Otherwise <ph id=\"ph1\">`_wfindfirst`</ph> and <ph id=\"ph2\">`_wfindnext`</ph> behave identically to <ph id=\"ph3\">`_findfirst`</ph> and <ph id=\"ph4\">`_findnext`</ph>.","pos":[5123,5215],"source":" Otherwise `_wfindfirst` and `_wfindnext` behave identically to `_findfirst` and `_findnext`."},{"content":"and <ph id=\"ph1\">`_findnext`</ph> use the 64-bit time type.","pos":[5235,5276],"source":" and `_findnext` use the 64-bit time type."},{"content":"If you must use the old 32-bit time type, you can define <ph id=\"ph1\">`_USE_32BIT_TIME_T`</ph>.","pos":[5277,5354],"source":" If you must use the old 32-bit time type, you can define `_USE_32BIT_TIME_T`."},{"content":"The versions of these functions that have the <ph id=\"ph1\">`32`</ph> suffix in their names use the 32-bit time type, and those with the <ph id=\"ph2\">`64`</ph> suffix use the 64-bit time type.","pos":[5355,5510],"source":" The versions of these functions that have the `32` suffix in their names use the 32-bit time type, and those with the `64` suffix use the 64-bit time type."},{"content":"Functions <ph id=\"ph1\">`_findfirst32i64`</ph>, <ph id=\"ph2\">`_findnext32i64`</ph>, <ph id=\"ph3\">`_wfindfirst32i64`</ph>, and <ph id=\"ph4\">`_wfindnext32i64`</ph> also behave identically to the 32-bit time type versions of these functions except they use and return 64-bit file lengths.","pos":[5517,5729],"source":"Functions `_findfirst32i64`, `_findnext32i64`, `_wfindfirst32i64`, and `_wfindnext32i64` also behave identically to the 32-bit time type versions of these functions except they use and return 64-bit file lengths."},{"content":"Functions <ph id=\"ph1\">`_findfirst64i32`</ph>, <ph id=\"ph2\">`_findnext64i32`</ph>, <ph id=\"ph3\">`_wfindfirst64i32`</ph>, and <ph id=\"ph4\">`_wfindnext64i32`</ph>use the 64-bit time type but use 32-bit file lengths.","pos":[5730,5871],"source":" Functions `_findfirst64i32`, `_findnext64i32`, `_wfindfirst64i32`, and `_wfindnext64i32`use the 64-bit time type but use 32-bit file lengths."},{"content":"These functions use appropriate variations of the <ph id=\"ph1\">`_finddata_t`</ph> type in which the fields have different types for the time and the file size.","pos":[5872,6013],"source":" These functions use appropriate variations of the `_finddata_t` type in which the fields have different types for the time and the file size."},{"content":"is actually a macro that evaluates to <ph id=\"ph1\">`_finddata64i32_t`</ph> (or <ph id=\"ph2\">`_finddata32_t`</ph> if <ph id=\"ph3\">`_USE_32BIT_TIME_T`</ph> is defined).","pos":[6034,6146],"source":" is actually a macro that evaluates to `_finddata64i32_t` (or `_finddata32_t` if `_USE_32BIT_TIME_T` is defined)."},{"content":"The following table summarizes the variations on <ph id=\"ph1\">`_finddata_t`</ph>:","pos":[6147,6210],"source":" The following table summarizes the variations on `_finddata_t`:"},{"content":"Structure","pos":[6217,6226]},{"content":"Time type","pos":[6227,6236]},{"content":"File size type","pos":[6237,6251]},{"pos":[6326,6327],"content":","},{"pos":[6386,6387],"content":","},{"pos":[6449,6450],"content":","},{"pos":[6514,6515],"content":","},{"pos":[6581,6582],"content":","},{"pos":[6645,6690],"content":"is a <ph id=\"ph1\">`typedef`</ph> for <ph id=\"ph2\">`unsigned long`</ph> (32 bits).","source":" is a `typedef` for `unsigned long` (32 bits)."},{"content":"Example","pos":[6699,6706]},{"content":"See Also","pos":[8335,8343]},{"content":"System Calls","pos":[8348,8360]}],"content":"---\ntitle: \"Filename Search Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napilocation: \n  - \"msvcr100.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\napitype: \"DLLExport\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"file names [C++], searching for\"\n  - \"_find function\"\n  - \"wfind function\"\n  - \"find function\"\n  - \"_wfind function\"\nms.assetid: 2bc2f8ef-44e4-4271-b3e8-666d36fde828\ncaps.latest.revision: 26\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Filename Search Functions\nThese functions search for and close searches for specified file names:  \n  \n-   [_findnext, _wfindnext](../c-runtime-library/reference/findnext-functions.md)  \n  \n-   [_findfirst, _wfindfirst](../c-runtime-library/reference/findfirst-functions.md)  \n  \n-   [_findclose](../c-runtime-library/reference/findclose.md)  \n  \n## Remarks  \n The `_findfirst` function provides information about the first instance of a file name that matches the file specified in the `filespec` argument. You can use in `filespec` any combination of wildcard characters that is supported by the host operating system.  \n  \n The functions return file information in a _`finddata_t` structure, which is defined in IO.h. Various functions in the family use many variations on the `_finddata_t` structure. The basic `_finddata_t` structure includes the following elements:  \n  \n `unsigned attrib`  \n File attribute.  \n  \n `time_t time_create`  \n Time of file creation (–1L for FAT file systems). This time is stored in UTC format. To convert to the local time, use [localtime_s](../c-runtime-library/reference/localtime-s-localtime32-s-localtime64-s.md).  \n  \n `time_t time_access`  \n Time of the last file access (–1L for FAT file systems). This time is stored in UTC format. To convert to the local time, use `localtime_s`.  \n  \n `time_t time_write`  \n Time of the last write to file. This time is stored in UTC format. To convert to the local time, use `localtime_s`.  \n  \n `_fsize_t size`  \n Length of the file in bytes.  \n  \n `char name`[ `_MAX_PATH`]  \n Null-terminated name of matched file or directory, without the path.  \n  \n In file systems that do not support the creation and last access times of a file, such as the FAT system, the `time_create` and `time_access` fields are always –1L.  \n  \n `_MAX_PATH` is defined in Stdlib.h as 260 bytes.  \n  \n You cannot specify target attributes (such as `_A_RDONLY`) to limit the find operation. These attributes are returned in the `attrib` field of the `_finddata_t` structure and can have the following values (defined in IO.h). Users should not rely on these being the only values possible for the `attrib` field.  \n  \n `_A_ARCH`  \n Archive. Set whenever the file is changed and cleared by the **BACKUP** command. Value: 0x20.  \n  \n `_A_HIDDEN`  \n Hidden file. Not generally seen with the DIR command, unless you use the **/AH** option. Returns information about normal files and files that have this attribute. Value: 0x02.  \n  \n `_A_NORMAL`  \n Normal. File has no other attributes set and can be read or written to without restriction. Value: 0x00.  \n  \n `_A_RDONLY`  \n Read-only. File cannot be opened for writing and a file that has the same name cannot be created. Value: 0x01.  \n  \n `_A_SUBDIR`  \n Subdirectory. Value: 0x10.  \n  \n `_A_SYSTEM`  \n System file. Not ordinarily seen with the **DIR** command, unless the **/A** or **/A:S** option is used. Value: 0x04.  \n  \n `_findnext` finds the next name, if any, that matches the `filespec` argument specified in an earlier call to `_findfirst`. The `fileinfo` argument should point to a structure initialized by the previous call to `_findfirst`. If a match is found, the `fileinfo` structure contents are changed as described earlier. Otherwise, it is left unchanged. `_findclose` closes the specified search handle and releases all associated resources for both `_findfirst` and `_findnext`. The handle returned by either `_findfirst` or `_findnext` must first be passed to `_findclose`, before modification operations, such as deleting, can be performed on the directories that form the paths passed to them.  \n  \n You can nest the `_find` functions. For example, if a call to `_findfirst` or `_findnext` finds the file that is a subdirectory, a new search can be initiated with another call to `_findfirst` or `_findnext`.  \n  \n `_wfindfirst` and `_wfindnext` are wide-character versions of `_findfirst` and `_findnext`. The structure argument of the wide-character versions has the `_wfinddata_t` data type, which is defined in IO.h and in Wchar.h. The fields of this data type are the same as those of the `_finddata_t` data type, except that in `_wfinddata_t` the name field is of type `wchar_t` instead of type `char`. Otherwise `_wfindfirst` and `_wfindnext` behave identically to `_findfirst` and `_findnext`.  \n  \n `_findfirst` and `_findnext` use the 64-bit time type. If you must use the old 32-bit time type, you can define `_USE_32BIT_TIME_T`. The versions of these functions that have the `32` suffix in their names use the 32-bit time type, and those with the `64` suffix use the 64-bit time type.  \n  \n Functions `_findfirst32i64`, `_findnext32i64`, `_wfindfirst32i64`, and `_wfindnext32i64` also behave identically to the 32-bit time type versions of these functions except they use and return 64-bit file lengths. Functions `_findfirst64i32`, `_findnext64i32`, `_wfindfirst64i32`, and `_wfindnext64i32`use the 64-bit time type but use 32-bit file lengths. These functions use appropriate variations of the `_finddata_t` type in which the fields have different types for the time and the file size.  \n  \n `_finddata_t` is actually a macro that evaluates to `_finddata64i32_t` (or `_finddata32_t` if `_USE_32BIT_TIME_T` is defined). The following table summarizes the variations on `_finddata_t`:  \n  \n|Structure|Time type|File size type|  \n|---------------|---------------|--------------------|  \n|`_finddata_t`, `_wfinddata_t`|`__time64_t`|`_fsize_t`|  \n|`_finddata32_t`, `_wfinddata32_t`|`__time32_t`|`_fsize_t`|  \n|`__finddata64_t`, `__wfinddata64_t`|`__time64_t`|`__int64`|  \n|`_finddata32i64_t`, `_wfinddata32i64_t`|`__time32_t`|`__int64`|  \n|`_finddata64i32_t`, `_wfinddata64i32_t`|`__time64_t`|`_fsize_t`|  \n  \n `_fsize_t` is a `typedef` for `unsigned long` (32 bits).  \n  \n## Example  \n  \n```  \n// crt_find.c  \n// This program uses the 32-bit _find functions to print  \n// a list of all files (and their attributes) with a .C extension  \n// in the current directory.  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <io.h>  \n#include <time.h>  \n  \nint main( void )  \n{  \n   struct _finddata_t c_file;  \n   intptr_t hFile;  \n  \n   // Find first .c file in current directory   \n   if( (hFile = _findfirst( \"*.c\", &c_file )) == -1L )  \n      printf( \"No *.c files in current directory!\\n\" );  \n   else  \n   {  \n      printf( \"Listing of .c files\\n\\n\" );  \n      printf( \"RDO HID SYS ARC  FILE         DATE %25c SIZE\\n\", ' ' );  \n      printf( \"--- --- --- ---  ----         ---- %25c ----\\n\", ' ' );  \n      do {  \n         char buffer[30];  \n         printf( ( c_file.attrib & _A_RDONLY ) ? \" Y  \" : \" N  \" );  \n         printf( ( c_file.attrib & _A_HIDDEN ) ? \" Y  \" : \" N  \" );  \n         printf( ( c_file.attrib & _A_SYSTEM ) ? \" Y  \" : \" N  \" );  \n         printf( ( c_file.attrib & _A_ARCH )   ? \" Y  \" : \" N  \" );  \n         ctime_s( buffer, _countof(buffer), &c_file.time_write );  \n         printf( \" %-12s %.24s  %9ld\\n\",  \n            c_file.name, buffer, c_file.size );  \n      } while( _findnext( hFile, &c_file ) == 0 );  \n      _findclose( hFile );  \n   }  \n}  \n```  \n  \n```Output  \nListing of .c files  \n  \nRDO HID SYS ARC  FILE         DATE                           SIZE  \n--- --- --- ---  ----         ----                           ----  \n N   N   N   Y   blah.c       Wed Feb 13 09:21:42 2002       1715  \n N   N   N   Y   test.c       Wed Feb 06 14:30:44 2002        312  \n```  \n  \n## See Also  \n [System Calls](../c-runtime-library/system-calls.md)"}