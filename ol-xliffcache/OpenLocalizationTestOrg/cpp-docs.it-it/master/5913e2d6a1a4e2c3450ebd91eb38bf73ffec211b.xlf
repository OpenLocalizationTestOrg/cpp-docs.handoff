<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5913e2d6a1a4e2c3450ebd91eb38bf73ffec211b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\registry-macros.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28b3c8d221c4cdeae7f8ac81466568b32604f43e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">42379458863a5057ea23cc465a45cb690e1188b8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Registry Macros | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Registry Macros</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These macros define useful type library and registry facilities.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>_ATL_STATIC_REGISTRY</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Indicates that you want the registration code for your object to be in the object to avoid a dependency on ATL.DLL.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>DECLARE_LIBID</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Provides a way for ATL to obtain the <bpt id="p1">*</bpt>libid<ept id="p1">*</ept> of the type library.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>DECLARE_NO_REGISTRY</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Avoids default ATL registration.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>DECLARE_REGISTRY</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Enters or removes the main object's entry in the system registry.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>DECLARE_REGISTRY_APPID_RESOURCEID</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Specifies the information required to automatically register the <bpt id="p1">*</bpt>appid<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>DECLARE_REGISTRY_RESOURCE</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Finds the named resource and runs the registry script within it.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>DECLARE_REGISTRY_RESOURCEID</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Finds the resource identified by an ID number and runs the registry script within it.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>_ATL_STATIC_REGISTRY</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A symbol that indicates you want the registration code for your object to be in the object to avoid a dependency on ATL.DLL.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When you define <bpt id="p1">**</bpt>ATL_STATIC_REGISTRY<ept id="p1">**</ept>, you should use the following code:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>NVC_ATL_EventHandlingSample#5</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>DECLARE_LIBID</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Provides a way for ATL to obtain the <bpt id="p1">*</bpt>libid<ept id="p1">*</ept> of the type library.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>libid</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The GUID of the type library.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`DECLARE_LIBID`</ph> in a <ph id="ph2">`CAtlModuleT`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Non-attributed wizard-generated ATL projects will have a sample of using this macro.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>DECLARE_NO_REGISTRY</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`DECLARE_NO_REGISTRY`</ph> if you want to avoid any default ATL registration for the class in which this macro appears.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>DECLARE_REGISTRY</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Enters the standard class registration into the system registry or removes it from the system registry.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>[in] Included for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>[in] An <ph id="ph1">`LPCTSTR`</ph> that is a version-specific program identifier.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>vpid</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>[in] An <ph id="ph1">`LPCTSTR`</ph> that is a version-independent program identifier.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>nid</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>[in] A <bpt id="p1">**</bpt>UINT<ept id="p1">**</ept> that is an index of the resource string in the registry to use as the description of the program.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>[in] A <ph id="ph1">`DWORD`</ph> containing the program's threading model in the registry.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Must be one of the following values: <bpt id="p1">**</bpt>THREADFLAGS_APARTMENT<ept id="p1">**</ept>, <bpt id="p2">**</bpt>THREADFLAGS_BOTH<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>AUTPRXFLAG<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The standard registration consists of the CLSID, program ID, version-independent program ID, description string, and thread model.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When you create an object or control using the ATL Add Class Wizard, the wizard automatically implements script-based registry support and adds the <bpt id="p1">[</bpt>DECLARE_REGISTRY_RESOURCEID<ept id="p1">](#declare_registry_resourceid)</ept> macro to your files.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you do not want script-based registry support, you need to replace this macro with <ph id="ph1">`DECLARE_REGISTRY`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>only inserts the five basic keys described above into the registry.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You must manually write code to insert other keys into the registry.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>DECLARE_REGISTRY_APPID_RESOURCEID</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Specifies the information required to automatically register the <bpt id="p1">*</bpt>appid<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>resid</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The resource id of the .rgs file that contains information about the <bpt id="p1">*</bpt>appid<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>appid</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A GUID.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`DECLARE_REGISTRY_APPID_RESOURCEID`</ph> in a <ph id="ph2">`CAtlModuleT`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Classes added to ATL projects with the Add Class code wizard will have a sample of using this macro.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>DECLARE_REGISTRY_RESOURCE</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Gets the named resource containing the registry file and runs the script to either enter objects into the system registry or remove them from the system registry.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>[in] String identifier of your resource.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When you create an object or control using the ATL Project Wizard, the wizard will automatically implement script-based registry support and add the <bpt id="p1">[</bpt>DECLARE_REGISTRY_RESOURCEID<ept id="p1">](#declare_registry_resourceid)</ept> macro, which is similar to <ph id="ph1">`DECLARE_REGISTRY_RESOURCE`</ph>, to your files.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can statically link with the ATL Registry Component (Registrar) for optimized registry access.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To statically link to the Registrar code, add the following line to your stdafx.h file:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#56</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If you want ATL to substitute replacement values at run time, do not specify the <ph id="ph1">`DECLARE_REGISTRY_RESOURCE`</ph> or <ph id="ph2">`DECLARE_REGISTRY_RESOURCEID`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Instead, create an array of <bpt id="p1">**</bpt>_ATL_REGMAP_ENTRIES<ept id="p1">**</ept> structures, where each entry contains a variable placeholder paired with a value to replace the placeholder at run time.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Then call <bpt id="p1">[</bpt>CAtlModule::UpdateRegistryFromResourceD<ept id="p1">](catlmodule-class.md#catlmodule__updateregistryfromresourced)</ept> or <bpt id="p2">[</bpt>CAtlModule::UpdateRegistryFromResourceS<ept id="p2">](catlmodule-class.md#catlmodule__updateregistryfromresources)</ept>, passing the array.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This adds all of the replacement values in the <bpt id="p1">**</bpt>_ATL_REGMAP_ENTRIES<ept id="p1">**</ept> structures to the Registrar's replacement map.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information about replaceable parameters and scripting, see the article <bpt id="p1">[</bpt>The ATL Registry Component (Registrar)<ept id="p1">](../../atl/atl-registry-component-registrar.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>DECLARE_REGISTRY_RESOURCEID</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Same as <bpt id="p1">[</bpt>DECLARE_REGISTRY_RESOURCE<ept id="p1">](#declare_registry_resource)</ept> except that it uses a wizard-generated <bpt id="p2">**</bpt>UINT<ept id="p2">**</ept> to identify the resource, rather than a string name.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>[in] Wizard-generated identifier of your resource.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When you create an object or control using the ATL Project Wizard, the wizard will automatically implement script-based registry support and add the <ph id="ph1">`DECLARE_REGISTRY_RESOURCEID`</ph> macro to your files.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can statically link with the ATL Registry Component (Registrar) for optimized registry access.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To statically link to the Registrar code, add the following line to your stdafx.h file:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#56</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If you want ATL to substitute replacement values at run time, do not specify the <ph id="ph1">`DECLARE_REGISTRY_RESOURCE`</ph> or <ph id="ph2">`DECLARE_REGISTRY_RESOURCEID`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Instead, create an array of <bpt id="p1">**</bpt>_ATL_REGMAP_ENTRIES<ept id="p1">**</ept> structures, where each entry contains a variable placeholder paired with a value to replace the placeholder at run time.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Then call <bpt id="p1">[</bpt>CAtlModule::UpdateRegistryFromResourceD<ept id="p1">](catlmodule-class.md#catlmodule__updateregistryfromresourced)</ept> or <bpt id="p2">[</bpt>CAtlModule::UpdateRegistryFromResourceS<ept id="p2">](catlmodule-class.md#catlmodule__updateregistryfromresources)</ept>, passing the array.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This adds all of the replacement values in the <bpt id="p1">**</bpt>_ATL_REGMAP_ENTRIES<ept id="p1">**</ept> structures to the Registrar's replacement map.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For more information about replaceable parameters and scripting, see the article <bpt id="p1">[</bpt>The ATL Registry Component (Registrar)<ept id="p1">](../../atl/atl-registry-component-registrar.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Macros</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>