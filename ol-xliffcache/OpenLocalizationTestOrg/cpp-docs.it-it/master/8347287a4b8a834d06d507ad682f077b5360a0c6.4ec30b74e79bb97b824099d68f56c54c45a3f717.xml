{"nodes":[{"pos":[12,88],"content":"Transaction: Performing a Transaction in a Recordset (ODBC) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Transaction: Performing a Transaction in a Recordset (ODBC) | Microsoft Docs","pos":[0,76]}]},{"content":"Transaction: Performing a Transaction in a Recordset (ODBC)","pos":[630,689]},{"content":"This topic explains how to perform a transaction in a recordset.","pos":[690,754]},{"pos":[762,847],"content":"[!NOTE]\n Only one level of transactions is supported; you cannot nest transactions.","leadings":["","> "],"nodes":[{"content":"Only one level of transactions is supported; you cannot nest transactions.","pos":[9,83]}]},{"content":"To perform a transaction in a recordset","pos":[858,897]},{"pos":[907,968],"content":"Call the <ph id=\"ph1\">`CDatabase`</ph> object's <bpt id=\"p1\">**</bpt>BeginTrans<ept id=\"p1\">**</ept> member function.","source":"Call the `CDatabase` object's **BeginTrans** member function."},{"content":"If you have not implemented bulk row fetching, call the <bpt id=\"p1\">**</bpt>AddNew/Update<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Edit/Update<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>Delete<ept id=\"p3\">**</ept> member functions of one or more recordset objects of the same database as many times as needed.","pos":[978,1180],"source":"If you have not implemented bulk row fetching, call the **AddNew/Update**, **Edit/Update**, and **Delete** member functions of one or more recordset objects of the same database as many times as needed."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Recordset: Adding, Updating, and Deleting Records (ODBC)<ept id=\"p1\">](../../data/odbc/recordset-adding-updating-and-deleting-records-odbc.md)</ept>.","pos":[1181,1338],"source":" For more information, see [Recordset: Adding, Updating, and Deleting Records (ODBC)](../../data/odbc/recordset-adding-updating-and-deleting-records-odbc.md)."},{"content":"If you have implemented bulk row fetching, you must write your own functions to update the data source.","pos":[1339,1442]},{"content":"Finally, call the <ph id=\"ph1\">`CDatabase`</ph> object's <bpt id=\"p1\">**</bpt>CommitTrans<ept id=\"p1\">**</ept> member function.","pos":[1452,1523],"source":"Finally, call the `CDatabase` object's **CommitTrans** member function."},{"content":"If an error occurs in one of the updates or you decide to cancel the changes, call its <bpt id=\"p1\">**</bpt>Rollback<ept id=\"p1\">**</ept> member function.","pos":[1524,1640],"source":" If an error occurs in one of the updates or you decide to cancel the changes, call its **Rollback** member function."},{"content":"The following example uses two recordsets to delete a student's enrollment from a school registration database, removing the student from all classes in which the student is enrolled.","pos":[1647,1830]},{"content":"Because the <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> calls in both recordsets must succeed, a transaction is required.","pos":[1831,1919],"source":" Because the **Delete** calls in both recordsets must succeed, a transaction is required."},{"content":"The example assumes the existence of <ph id=\"ph1\">`m_dbStudentReg`</ph>, a member variable of type <ph id=\"ph2\">`CDatabase`</ph> already connected to the data source, and the recordset classes <ph id=\"ph3\">`CEnrollmentSet`</ph> and <ph id=\"ph4\">`CStudentSet`</ph>.","pos":[1920,2112],"source":" The example assumes the existence of `m_dbStudentReg`, a member variable of type `CDatabase` already connected to the data source, and the recordset classes `CEnrollmentSet` and `CStudentSet`."},{"content":"The <ph id=\"ph1\">`strStudentID`</ph> variable contains a value obtained from the user.","pos":[2113,2181],"source":" The `strStudentID` variable contains a value obtained from the user."},{"pos":[3336,3436],"content":"[!NOTE]\n Calling **BeginTrans** again without calling **CommitTrans** or **Rollback** is an error.","leadings":["","> "],"nodes":[{"content":"Calling <bpt id=\"p1\">**</bpt>BeginTrans<ept id=\"p1\">**</ept> again without calling <bpt id=\"p2\">**</bpt>CommitTrans<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Rollback<ept id=\"p3\">**</ept> is an error.","pos":[9,98],"source":" Calling **BeginTrans** again without calling **CommitTrans** or **Rollback** is an error."}]},{"content":"See Also","pos":[3445,3453]},{"content":"Transaction (ODBC)","pos":[3458,3476]},{"content":"Transaction: How Transactions Affect Updates (ODBC)","pos":[3520,3571]},{"content":"CDatabase Class","pos":[3647,3662]},{"content":"CRecordset Class","pos":[3709,3725]}],"content":"---\ntitle: \"Transaction: Performing a Transaction in a Recordset (ODBC) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"transactions, updating recordsets\"\nms.assetid: cf1d6b48-7fb8-4903-84f7-a1822054534d\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Transaction: Performing a Transaction in a Recordset (ODBC)\nThis topic explains how to perform a transaction in a recordset.  \n  \n> [!NOTE]\n>  Only one level of transactions is supported; you cannot nest transactions.  \n  \n#### To perform a transaction in a recordset  \n  \n1.  Call the `CDatabase` object's **BeginTrans** member function.  \n  \n2.  If you have not implemented bulk row fetching, call the **AddNew/Update**, **Edit/Update**, and **Delete** member functions of one or more recordset objects of the same database as many times as needed. For more information, see [Recordset: Adding, Updating, and Deleting Records (ODBC)](../../data/odbc/recordset-adding-updating-and-deleting-records-odbc.md). If you have implemented bulk row fetching, you must write your own functions to update the data source.  \n  \n3.  Finally, call the `CDatabase` object's **CommitTrans** member function. If an error occurs in one of the updates or you decide to cancel the changes, call its **Rollback** member function.  \n  \n The following example uses two recordsets to delete a student's enrollment from a school registration database, removing the student from all classes in which the student is enrolled. Because the **Delete** calls in both recordsets must succeed, a transaction is required. The example assumes the existence of `m_dbStudentReg`, a member variable of type `CDatabase` already connected to the data source, and the recordset classes `CEnrollmentSet` and `CStudentSet`. The `strStudentID` variable contains a value obtained from the user.  \n  \n```  \nBOOL CEnrollDoc::RemoveStudent( CString strStudentID )  \n{  \n    // remove student from all the classes  \n    // the student is enrolled in  \n  \n    if ( !m_dbStudentReg.BeginTrans( ) )  \n        return FALSE;  \n  \n    CEnrollmentSet rsEnrollmentSet(&m_dbStudentReg);  \n    rsEnrollmentSet.m_strFilter = \"StudentID = \" + strStudentID;  \n  \n    if ( !rsEnrollmentSet.Open(CRecordset::dynaset) )  \n        return FALSE;  \n  \n    CStudentSet rsStudentSet(&m_dbStudentReg);  \n    rsStudentSet.m_strFilter = \"StudentID = \" + strStudentID;  \n  \n    if ( !rsStudentSet.Open(CRecordset::dynaset) )  \n        return FALSE;  \n  \n    TRY  \n    {  \n        while ( !rsEnrollmentSet.IsEOF( ) )  \n        {  \n            rsEnrollmentSet.Delete( );  \n            rsEnrollmentSet.MoveNext( );  \n        }  \n  \n        // delete the student record  \n        rsStudentSet.Delete( );  \n  \n        m_dbStudentReg.CommitTrans( );  \n    }  \n  \n    CATCH_ALL(e)  \n    {  \n        m_dbStudentReg.Rollback( );  \n        return FALSE;  \n    }  \n    END_CATCH_ALL  \n  \n    rsEnrollmentSet.Close( );  \n    rsStudentSet.Close( );  \n  \n    return TRUE;  \n  \n}  \n```  \n  \n> [!NOTE]\n>  Calling **BeginTrans** again without calling **CommitTrans** or **Rollback** is an error.  \n  \n## See Also  \n [Transaction (ODBC)](../../data/odbc/transaction-odbc.md)   \n [Transaction: How Transactions Affect Updates (ODBC)](../../data/odbc/transaction-how-transactions-affect-updates-odbc.md)   \n [CDatabase Class](../../mfc/reference/cdatabase-class.md)   \n [CRecordset Class](../../mfc/reference/crecordset-class.md)"}