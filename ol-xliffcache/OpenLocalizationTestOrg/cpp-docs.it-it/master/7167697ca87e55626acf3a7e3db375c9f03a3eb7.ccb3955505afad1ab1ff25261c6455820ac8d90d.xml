{"nodes":[{"pos":[12,52],"content":"&lt;tuple&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>tuple<ph id=\"ph2\">&amp;gt;</ph> functions | Microsoft Docs","pos":[0,40],"source":"&lt;tuple&gt; functions | Microsoft Docs"}]},{"pos":[255,278],"content":"&lt;tuple&gt; functions","linkify":"&lt;tuple&gt; functions","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>tuple<ph id=\"ph2\">&amp;gt;</ph> functions","pos":[0,23],"source":"&lt;tuple&gt; functions"}]},{"pos":[297,326],"content":"<bpt id=\"p1\">[</bpt>get Function<ept id=\"p1\">](#get_function)</ept>","source":"[get Function](#get_function)"},{"pos":[327,370],"content":"<bpt id=\"p1\">[</bpt>make_tuple Function<ept id=\"p1\">](#make_tuple_function)</ept>","source":"[make_tuple Function](#make_tuple_function)"},{"pos":[371,400],"content":"<bpt id=\"p1\">[</bpt>tie Function<ept id=\"p1\">](#tie_function)</ept>","source":"[tie Function](#tie_function)"},{"pos":[411,452],"content":"<bpt id=\"p1\">&lt;a name=\"get_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  get Function","linkify":"<a name=\"get_function\"></a>  get Function","source":"<a name=\"get_function\"></a>  get Function"},{"pos":[456,526],"content":"Gets an element from a <ph id=\"ph1\">`tuple`</ph> object, by index or (in C++14) by type.","source":"Gets an element from a `tuple` object, by index or (in C++14) by type."},{"pos":[1550,1560],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index of the element to get.","pos":[1575,1607]},{"content":"The sequence of types declared in the tuple, in declaration order.","pos":[1625,1691]},{"content":"The type of the element to get.","pos":[1705,1736]},{"content":"A std::tuple that contains any number of elements.","pos":[1754,1804]},{"pos":[1814,1821],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1825,1935],"content":"The template functions return a reference to the value at index <ph id=\"ph1\">`Index`</ph>, or of type <ph id=\"ph2\">`T`</ph> in the <ph id=\"ph3\">`tuple`</ph> object.","source":"The template functions return a reference to the value at index `Index`, or of type `T` in the `tuple` object."},{"pos":[1942,2054],"content":"Calling <ph id=\"ph1\">`get&lt;T&gt;(Tuple)`</ph> will produce a compiler error if Tuple contains more or less than one element of type T.","source":"Calling `get<T>(Tuple)` will produce a compiler error if Tuple contains more or less than one element of type T."},{"pos":[2064,2071],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2649,2704],"content":"<bpt id=\"p1\">&lt;a name=\"make_tuple_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  make_tuple Function","linkify":"<a name=\"make_tuple_function\"></a>  make_tuple Function","source":"<a name=\"make_tuple_function\"></a>  make_tuple Function"},{"pos":[2708,2744],"content":"Makes a <ph id=\"ph1\">`tuple`</ph> from element values.","source":"Makes a `tuple` from element values."},{"pos":[2898,2908],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The type of the Nth function parameter.","pos":[2920,2959]},{"content":"The value of the Nth function parameter.","pos":[2974,3014]},{"pos":[3024,3031],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3035,3224],"content":"The template function returns <ph id=\"ph1\">`tuple&lt;V1, V2, ..., VN&gt;(t1, t2, ..., tN)`</ph>, where each type <ph id=\"ph2\">`Vi`</ph> is <ph id=\"ph3\">`X&amp;`</ph> when the corresponding type <ph id=\"ph4\">`Ti`</ph> is <ph id=\"ph5\">`cv`</ph> <ph id=\"ph6\">`reference_wrapper&lt;X&gt;`</ph>; otherwise, it is <ph id=\"ph7\">`Ti`</ph>.","source":"The template function returns `tuple<V1, V2, ..., VN>(t1, t2, ..., tN)`, where each type `Vi` is `X&` when the corresponding type `Ti` is `cv` `reference_wrapper<X>`; otherwise, it is `Ti`."},{"content":"One advantage of <ph id=\"ph1\">`make_tuple`</ph> is that the types of objects that are being stored are determined automatically by the compiler and do not have to be explicitly specified.","pos":[3231,3400],"source":"One advantage of `make_tuple` is that the types of objects that are being stored are determined automatically by the compiler and do not have to be explicitly specified."},{"content":"Don't use explicit template arguments such as <ph id=\"ph1\">`make_tuple&lt;int, int&gt;(1, 2)`</ph> when you use <ph id=\"ph2\">`make_tuple`</ph> because it is unnecessarily verbose and adds complex rvalue reference problems that might cause compilation failure.","pos":[3401,3618],"source":" Don't use explicit template arguments such as `make_tuple<int, int>(1, 2)` when you use `make_tuple` because it is unnecessarily verbose and adds complex rvalue reference problems that might cause compilation failure."},{"pos":[3628,3635],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4480,4521],"content":"<bpt id=\"p1\">&lt;a name=\"tie_function\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  tie Function","linkify":"<a name=\"tie_function\"></a>  tie Function","source":"<a name=\"tie_function\"></a>  tie Function"},{"pos":[4525,4565],"content":"Makes a <ph id=\"ph1\">`tuple`</ph> from element references.","source":"Makes a `tuple` from element references."},{"pos":[4697,4707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The base type of the Nth tuple element.","pos":[4719,4758]},{"pos":[4768,4775],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4779,4854],"content":"The template function returns <ph id=\"ph1\">`tuple&lt;T1&amp;, T2&amp;, ..., TN&amp;&gt;(t1, t2, ..., tN)`</ph>.","source":"The template function returns `tuple<T1&, T2&, ..., TN&>(t1, t2, ..., tN)`."},{"pos":[4864,4871],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5743,5751],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[5755,5795],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>tuple&gt;<ept id=\"p1\">](../standard-library/tuple.md)</ept>","source":"[\\<tuple>](../standard-library/tuple.md)"}],"content":"---\ntitle: \"&lt;tuple&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: bc6be38f-5258-4c14-b81b-63caa335fd44\ncaps.latest.revision: 13\nmanager: \"ghogen\"\n---\n# &lt;tuple&gt; functions\n||||  \n|-|-|-|  \n|[get Function](#get_function)|[make_tuple Function](#make_tuple_function)|[tie Function](#tie_function)|  \n  \n##  <a name=\"get_function\"></a>  get Function  \n Gets an element from a `tuple` object, by index or (in C++14) by type.  \n  \n```  \n \n// by index:\n// get reference to Index element of tuple\ntemplate <size_t Index, class... Types>  \nconstexpr tuple_element_t<Index, tuple<Types...>>& get(tuple<Types...>& Tuple) noexcept;\n\n// get const reference to Index element of tuple\ntemplate <size_t Index, class... Types>  \nconstexpr const tuple_element_t<Index, tuple<Types...>>& get(const tuple<Types...>& Tuple) noexcept;\n\n// get rvalue reference to Index element of tuple\ntemplate <size_t Index, class... Types>  \nconstexpr tuple_element_t<Index, tuple<Types...>>&& get(tuple<Types...>&& Tuple) noexcept;\n\n// (C++14) by type:\n// get reference to T element of tuple\ntemplate <class T, class... Types>  \nconstexpr T& get(tuple<Types...>& Tuple) noexcept;\n\n// get const reference to T element of tuple\ntemplate <class T, class... Types>  \nconstexpr const T& get(const tuple<Types...>& Tuple) noexcept;\n\n// get rvalue reference to T element of tuple\ntemplate <class T, class... Types>  \nconstexpr T&& get(tuple<Types...>&& Tuple) noexcept;  \n```  \n  \n### Parameters  \n `Index`  \n The index of the element to get.  \n  \n `Types`  \n The sequence of types declared in the tuple, in declaration order.  \n  \n `T`  \n The type of the element to get.  \n  \n `Tuple`  \n A std::tuple that contains any number of elements.  \n  \n### Remarks  \n The template functions return a reference to the value at index `Index`, or of type `T` in the `tuple` object.  \n  \n Calling `get<T>(Tuple)` will produce a compiler error if Tuple contains more or less than one element of type T.  \n  \n### Example  \n  \n```cpp  \n#include <tuple>   \n#include <iostream>   \n#include <string>  \n  \nusing namespace std;  \n  \nint main()  \n{  \n    tuple<int, double, string> tup(0, 1.42, \"Call me Tuple\");  \n  \n    // get elements by index  \n    cout << \" \" << get<0>(tup);  \n    cout << \" \" << get<1>(tup);  \n    cout << \" \" << get<2>(tup) << endl;  \n  \n    // get elements by type  \n    cout << \" \" << get<int>(tup);  \n    cout << \" \" << get<double>(tup);  \n    cout << \" \" << get<string>(tup) << endl;    \n}  \n  \n/*  \nOutput:  \n0 1.42 Call me Tuple  \n0 1.42 Call me Tuple  \n*/  \n  \n```  \n  \n##  <a name=\"make_tuple_function\"></a>  make_tuple Function  \n Makes a `tuple` from element values.  \n  \n```  \ntemplate <class T1, class T2, ..., class TN>  \ntuple<V1, V2, ..., VN> make_tuple(const T1& t1, const T2& t2, ..., const TN& tN);\n```  \n  \n### Parameters  \n `TN`  \n The type of the Nth function parameter.  \n  \n `tN`  \n The value of the Nth function parameter.  \n  \n### Remarks  \n The template function returns `tuple<V1, V2, ..., VN>(t1, t2, ..., tN)`, where each type `Vi` is `X&` when the corresponding type `Ti` is `cv` `reference_wrapper<X>`; otherwise, it is `Ti`.  \n  \n One advantage of `make_tuple` is that the types of objects that are being stored are determined automatically by the compiler and do not have to be explicitly specified. Don't use explicit template arguments such as `make_tuple<int, int>(1, 2)` when you use `make_tuple` because it is unnecessarily verbose and adds complex rvalue reference problems that might cause compilation failure.  \n  \n### Example  \n  \n```cpp  \n  \n// std_tr1__tuple__make_tuple.cpp   \n// compile by using: /EHsc   \n#include <tuple>   \n#include <iostream>   \n  \ntypedef std::tuple<int, double, int, double> Mytuple;   \nint main()   \n    {   \n    Mytuple c0(0, 1, 2, 3);   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n    c0 = std::make_tuple(4, 5, 6, 7);   \n  \n// display contents \" 4 5 6 7\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n `0 1 2 3  4 5 6 7`  \n  \n##  <a name=\"tie_function\"></a>  tie Function  \n Makes a `tuple` from element references.  \n  \n```  \ntemplate <class T1, class T2, ..., class TN>  \ntuple<T1&, T2&, ..., TN&> tie(T1& t1, T2& t2, ..., TN& tN);\n```  \n  \n### Parameters  \n `TN`  \n The base type of the Nth tuple element.  \n  \n### Remarks  \n The template function returns `tuple<T1&, T2&, ..., TN&>(t1, t2, ..., tN)`.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__tuple__tie.cpp   \n// compile with: /EHsc   \n#include <tuple>   \n#include <iostream>   \n  \ntypedef std::tuple<int, double, int, double> Mytuple;   \nint main()   \n    {   \n    Mytuple c0(0, 1, 2, 3);   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << std::get<0>(c0);   \n    std::cout << \" \" << std::get<1>(c0);   \n    std::cout << \" \" << std::get<2>(c0);   \n    std::cout << \" \" << std::get<3>(c0);   \n    std::cout << std::endl;   \n  \n    int v4 = 4;   \n    double v5 = 5;   \n    int v6 = 6;   \n    double v7 = 7;   \n    std::tie(v4, v5, v6, v7) = c0;   \n  \n// display contents \" 0 1 2 3\"   \n    std::cout << \" \" << v4;   \n    std::cout << \" \" << v5;   \n    std::cout << \" \" << v6;   \n    std::cout << \" \" << v7;   \n    std::cout << std::endl;   \n  \n    return (0);   \n    }    \n```  \n  \n```Output  \n0 1 2 3  \n0 1 2 3  \n```  \n  \n## See Also  \n [\\<tuple>](../standard-library/tuple.md)\n\n"}