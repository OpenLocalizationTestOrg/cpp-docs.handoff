{"nodes":[{"pos":[12,57],"content":"Internet URL Parsing Globals | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Internet URL Parsing Globals | Microsoft Docs","pos":[0,45]}]},{"pos":[640,668],"content":"Internet URL Parsing Globals","linkify":"Internet URL Parsing Globals","nodes":[{"content":"Internet URL Parsing Globals","pos":[0,28]}]},{"content":"When a client sends a query to the Internet server, you can use one of the URL parsing globals to extract information about the client.","pos":[669,804]},{"pos":[814,842],"content":"Internet URL Parsing Globals","linkify":"Internet URL Parsing Globals","nodes":[{"content":"Internet URL Parsing Globals","pos":[0,28]}]},{"pos":[863,890],"content":"<bpt id=\"p1\">[</bpt>AfxParseURL<ept id=\"p1\">](#afxparseurl)</ept>","source":"[AfxParseURL](#afxparseurl)"},{"content":"Parses a URL string and returns the type of service and its components.","pos":[891,962]},{"pos":[967,998],"content":"<bpt id=\"p1\">[</bpt>AfxParseURLEx<ept id=\"p1\">](#afxparseurlex)</ept>","source":"[AfxParseURLEx](#afxparseurlex)"},{"content":"Parses a URL string and returns the type of service and its components, as well as providing the user name and password.","pos":[999,1119]},{"pos":[1130,1169],"content":"<bpt id=\"p1\">&lt;a name=\"afxparseurl\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxParseURL","linkify":"<a name=\"afxparseurl\"></a>  AfxParseURL","source":"<a name=\"afxparseurl\"></a>  AfxParseURL"},{"pos":[1173,1297],"content":"This global is used in <bpt id=\"p1\">[</bpt>CInternetSession::OpenURL<ept id=\"p1\">](../../mfc/reference/cinternetsession-class.md#cinternetsession__openurl)</ept>.","source":"This global is used in [CInternetSession::OpenURL](../../mfc/reference/cinternetsession-class.md#cinternetsession__openurl)."},{"pos":[1479,1489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pstrURL<ept id=\"p1\">*</ept>","pos":[1493,1502],"source":"*pstrURL*"},{"content":"A pointer to a string containing the URL to be parsed.","pos":[1506,1560]},{"content":"Indicates the type of Internet service.","pos":[1586,1625]},{"content":"Possible values are as follows:","pos":[1626,1657]},{"content":"AFX_INET_SERVICE_FTP","pos":[1667,1687]},{"content":"AFX_INET_SERVICE_HTTP","pos":[1697,1718]},{"content":"AFX_INET_SERVICE_HTTPS","pos":[1728,1750]},{"content":"AFX_INET_SERVICE_GOPHER","pos":[1760,1783]},{"content":"AFX_INET_SERVICE_FILE","pos":[1793,1814]},{"content":"AFX_INET_SERVICE_MAILTO","pos":[1824,1847]},{"content":"AFX_INET_SERVICE_NEWS","pos":[1857,1878]},{"content":"AFX_INET_SERVICE_NNTP","pos":[1888,1909]},{"content":"AFX_INET_SERVICE_TELNET","pos":[1919,1942]},{"content":"AFX_INET_SERVICE_WAIS","pos":[1952,1973]},{"content":"AFX_INET_SERVICE_MID","pos":[1983,2003]},{"content":"AFX_INET_SERVICE_CID","pos":[2013,2033]},{"content":"AFX_INET_SERVICE_PROSPERO","pos":[2043,2068]},{"content":"AFX_INET_SERVICE_AFS","pos":[2078,2098]},{"content":"AFX_INET_SERVICE_UNK","pos":[2108,2128]},{"pos":[2135,2206],"content":"`strServer`  \nThe first segment of the URL following the service type.","leadings":[""," "],"nodes":[{"content":"The first segment of the URL following the service type.","pos":[14,70]}]},{"pos":[2213,2276],"content":"`strObject`  \nAn object that the URL refers to (may be empty).","leadings":[""," "],"nodes":[{"content":"An object that the URL refers to (may be empty).","pos":[14,62]}]},{"pos":[2283,2376],"content":"`nPort`  \nDetermined from either the Server or Object portions of the URL, if either exists.","leadings":[""," "],"nodes":[{"content":"Determined from either the Server or Object portions of the URL, if either exists.","pos":[10,92]}]},{"pos":[2386,2398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the URL was successfully parsed; otherwise, 0 if it is empty or does not contain a known Internet service type.","pos":[2402,2524]},{"pos":[2534,2541],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It parses a URL string and returns the type of service and its components.","pos":[2545,2619]},{"pos":[2626,2767],"content":"For example, <ph id=\"ph1\">`AfxParseURL`</ph> parses URLs of the form <bpt id=\"p1\">**</bpt>service://server/dir/dir/object.ext:port<ept id=\"p1\">**</ept> and returns its components stored as follows:","source":"For example, `AfxParseURL` parses URLs of the form **service://server/dir/dir/object.ext:port** and returns its components stored as follows:"},{"pos":[2774,2797],"content":"<ph id=\"ph1\">`strServer`</ph> == \"server\"","source":"`strServer` == \"server\""},{"pos":[2804,2847],"content":"<ph id=\"ph1\">`strObject`</ph> == \"/dir/dir/object/object.ext\"","source":"`strObject` == \"/dir/dir/object/object.ext\""},{"pos":[2854,2870],"content":"<ph id=\"ph1\">`nPort`</ph> == #port","source":"`nPort` == #port"},{"pos":[2877,2904],"content":"<ph id=\"ph1\">`dwServiceType`</ph> == #service","source":"`dwServiceType` == #service"},{"pos":[2912,2982],"content":"[!NOTE]\n To call this function, your project must include AFXINET.H.","leadings":["","> "],"nodes":[{"content":"To call this function, your project must include AFXINET.H.","pos":[9,68]}]},{"pos":[2992,3035],"content":"<bpt id=\"p1\">&lt;a name=\"afxparseurlex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  AfxParseURLEx","linkify":"<a name=\"afxparseurlex\"></a>  AfxParseURLEx","source":"<a name=\"afxparseurlex\"></a>  AfxParseURLEx"},{"pos":[3039,3231],"content":"This global function is the extended version of <bpt id=\"p1\">[</bpt>AfxParseURL<ept id=\"p1\">](#afxparseurl)</ept> and is used in <bpt id=\"p2\">[</bpt>CInternetSession::OpenURL<ept id=\"p2\">](../../mfc/reference/cinternetsession-class.md#cinternetsession__openurl)</ept>.","source":"This global function is the extended version of [AfxParseURL](#afxparseurl) and is used in [CInternetSession::OpenURL](../../mfc/reference/cinternetsession-class.md#cinternetsession__openurl)."},{"pos":[3496,3506],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>pstrURL<ept id=\"p1\">*</ept>","pos":[3510,3519],"source":"*pstrURL*"},{"content":"A pointer to a string containing the URL to be parsed.","pos":[3523,3577]},{"content":"Indicates the type of Internet service.","pos":[3603,3642]},{"content":"Possible values are as follows:","pos":[3643,3674]},{"content":"AFX_INET_SERVICE_FTP","pos":[3684,3704]},{"content":"AFX_INET_SERVICE_HTTP","pos":[3714,3735]},{"content":"AFX_INET_SERVICE_HTTPS","pos":[3745,3767]},{"content":"AFX_INET_SERVICE_GOPHER","pos":[3777,3800]},{"content":"AFX_INET_SERVICE_FILE","pos":[3810,3831]},{"content":"AFX_INET_SERVICE_MAILTO","pos":[3841,3864]},{"content":"AFX_INET_SERVICE_NEWS","pos":[3874,3895]},{"content":"AFX_INET_SERVICE_NNTP","pos":[3905,3926]},{"content":"AFX_INET_SERVICE_TELNET","pos":[3936,3959]},{"content":"AFX_INET_SERVICE_WAIS","pos":[3969,3990]},{"content":"AFX_INET_SERVICE_MID","pos":[4000,4020]},{"content":"AFX_INET_SERVICE_CID","pos":[4030,4050]},{"content":"AFX_INET_SERVICE_PROSPERO","pos":[4060,4085]},{"content":"AFX_INET_SERVICE_AFS","pos":[4095,4115]},{"content":"AFX_INET_SERVICE_UNK","pos":[4125,4145]},{"pos":[4152,4223],"content":"`strServer`  \nThe first segment of the URL following the service type.","leadings":[""," "],"nodes":[{"content":"The first segment of the URL following the service type.","pos":[14,70]}]},{"pos":[4230,4293],"content":"`strObject`  \nAn object that the URL refers to (may be empty).","leadings":[""," "],"nodes":[{"content":"An object that the URL refers to (may be empty).","pos":[14,62]}]},{"pos":[4300,4393],"content":"`nPort`  \nDetermined from either the Server or Object portions of the URL, if either exists.","leadings":[""," "],"nodes":[{"content":"Determined from either the Server or Object portions of the URL, if either exists.","pos":[10,92]}]},{"pos":[4400,4483],"content":"*strUsername*  \nA reference to a `CString` object containing the name of the user.","leadings":[""," "],"nodes":[{"content":"<bpt id=\"p1\">*</bpt>strUsername<ept id=\"p1\">*</ept>","pos":[0,13],"source":"*strUsername*"},{"content":"A reference to a <ph id=\"ph1\">`CString`</ph> object containing the name of the user.","pos":[16,82],"source":"A reference to a `CString` object containing the name of the user."}]},{"pos":[4490,4577],"content":"`strPassword`  \nA reference to a `CString` object containing the password of the user.","leadings":[""," "],"nodes":[{"content":"A reference to a <ph id=\"ph1\">`CString`</ph> object containing the password of the user.","pos":[16,86],"source":"A reference to a `CString` object containing the password of the user."}]},{"pos":[4584,4686],"content":"`dwFlags`  \nThe flags controlling how to parse the URL. Can be a combination of the following values:","leadings":[""," "],"nodes":[{"content":"The flags controlling how to parse the URL. Can be a combination of the following values:","pos":[12,101],"nodes":[{"content":"The flags controlling how to parse the URL.","pos":[0,43]},{"content":"Can be a combination of the following values:","pos":[44,89]}]}]},{"content":"Value","pos":[4693,4698]},{"content":"Meaning","pos":[4699,4706]},{"pos":[4741,4755],"content":"<bpt id=\"p1\">**</bpt>ICU_DECODE<ept id=\"p1\">**</ept>","source":"**ICU_DECODE**"},{"content":"Convert %XX escape sequences to characters.","pos":[4756,4799]},{"pos":[4804,4821],"content":"<bpt id=\"p1\">**</bpt>ICU_NO_ENCODE<ept id=\"p1\">**</ept>","source":"**ICU_NO_ENCODE**"},{"content":"Do not convert unsafe characters to escape sequence.","pos":[4822,4874]},{"pos":[4879,4894],"content":"<bpt id=\"p1\">**</bpt>ICU_NO_META<ept id=\"p1\">**</ept>","source":"**ICU_NO_META**"},{"content":"Do not remove meta sequences (such as \"\\ .\"","pos":[4895,4938]},{"content":"and \"\\ ..\") from the URL.","pos":[4939,4964]},{"pos":[4969,4995],"content":"<bpt id=\"p1\">**</bpt>ICU_ENCODE_SPACES_ONLY<ept id=\"p1\">**</ept>","source":"**ICU_ENCODE_SPACES_ONLY**"},{"content":"Encode spaces only.","pos":[4996,5015]},{"pos":[5020,5040],"content":"<bpt id=\"p1\">**</bpt>ICU_BROWSER_MODE<ept id=\"p1\">**</ept>","source":"**ICU_BROWSER_MODE**"},{"content":"Do not encode or decode characters after '#' or '', and do not remove trailing white space after ''.","pos":[5041,5141]},{"content":"If this value is not specified, the entire URL is encoded and trailing white space is removed.","pos":[5142,5236]},{"content":"If you use the MFC default, which is no flags, the function converts all unsafe characters and meta sequences (such as <ph id=\"ph1\">\\\\</ph>.,\\ .., and <ph id=\"ph2\">\\\\</ph>...) to escape sequences.","pos":[5244,5404],"source":"If you use the MFC default, which is no flags, the function converts all unsafe characters and meta sequences (such as \\\\.,\\ .., and \\\\...) to escape sequences."},{"pos":[5414,5426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the URL was successfully parsed; otherwise, 0 if it is empty or does not contain a known Internet service type.","pos":[5430,5552]},{"pos":[5562,5569],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It parses a URL string and returns the type of service and its components, as well as providing the user's name and password.","pos":[5573,5698]},{"content":"The flags indicate how unsafe characters are handled.","pos":[5699,5752]},{"pos":[5760,5830],"content":"[!NOTE]\n To call this function, your project must include AFXINET.H.","leadings":["","> "],"nodes":[{"content":"To call this function, your project must include AFXINET.H.","pos":[9,68]}]},{"pos":[5839,5847],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[5851,5918],"content":"<bpt id=\"p1\">[</bpt>Macros and Globals<ept id=\"p1\">](../../mfc/reference/mfc-macros-and-globals.md)</ept>","source":"[Macros and Globals](../../mfc/reference/mfc-macros-and-globals.md)"}],"content":"---\ntitle: \"Internet URL Parsing Globals | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc.mfc.macros.isapi\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"parsing, URLs\"\n  - \"URLs, parsing\"\nms.assetid: 46c6384f-e4a6-4dbd-9196-219c19040ec5\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Internet URL Parsing Globals\nWhen a client sends a query to the Internet server, you can use one of the URL parsing globals to extract information about the client.  \n  \n### Internet URL Parsing Globals  \n  \n|||  \n|-|-|  \n|[AfxParseURL](#afxparseurl)|Parses a URL string and returns the type of service and its components.|  \n|[AfxParseURLEx](#afxparseurlex)|Parses a URL string and returns the type of service and its components, as well as providing the user name and password.|  \n  \n##  <a name=\"afxparseurl\"></a>  AfxParseURL  \n This global is used in [CInternetSession::OpenURL](../../mfc/reference/cinternetsession-class.md#cinternetsession__openurl).  \n  \n```   \nBOOL AFXAPI AfxParseURL(\n    LPCTSTR pstrURL,  \n    DWORD& dwServiceType,  \n    CString& strServer,  \n    CString& strObject,  \n    INTERNET_PORT& nPort); \n```  \n  \n### Parameters  \n *pstrURL*  \n A pointer to a string containing the URL to be parsed.  \n  \n `dwServiceType`  \n Indicates the type of Internet service. Possible values are as follows:  \n  \n-   AFX_INET_SERVICE_FTP  \n  \n-   AFX_INET_SERVICE_HTTP  \n  \n-   AFX_INET_SERVICE_HTTPS  \n  \n-   AFX_INET_SERVICE_GOPHER  \n  \n-   AFX_INET_SERVICE_FILE  \n  \n-   AFX_INET_SERVICE_MAILTO  \n  \n-   AFX_INET_SERVICE_NEWS  \n  \n-   AFX_INET_SERVICE_NNTP  \n  \n-   AFX_INET_SERVICE_TELNET  \n  \n-   AFX_INET_SERVICE_WAIS  \n  \n-   AFX_INET_SERVICE_MID  \n  \n-   AFX_INET_SERVICE_CID  \n  \n-   AFX_INET_SERVICE_PROSPERO  \n  \n-   AFX_INET_SERVICE_AFS  \n  \n-   AFX_INET_SERVICE_UNK  \n  \n `strServer`  \n The first segment of the URL following the service type.  \n  \n `strObject`  \n An object that the URL refers to (may be empty).  \n  \n `nPort`  \n Determined from either the Server or Object portions of the URL, if either exists.  \n  \n### Return Value  \n Nonzero if the URL was successfully parsed; otherwise, 0 if it is empty or does not contain a known Internet service type.  \n  \n### Remarks  \n It parses a URL string and returns the type of service and its components.  \n  \n For example, `AfxParseURL` parses URLs of the form **service://server/dir/dir/object.ext:port** and returns its components stored as follows:  \n  \n `strServer` == \"server\"  \n  \n `strObject` == \"/dir/dir/object/object.ext\"  \n  \n `nPort` == #port  \n  \n `dwServiceType` == #service  \n  \n> [!NOTE]\n>  To call this function, your project must include AFXINET.H.  \n  \n##  <a name=\"afxparseurlex\"></a>  AfxParseURLEx  \n This global function is the extended version of [AfxParseURL](#afxparseurl) and is used in [CInternetSession::OpenURL](../../mfc/reference/cinternetsession-class.md#cinternetsession__openurl).  \n  \n```   \nBOOL AFXAPI AfxParseURLEx(\n    LPCTSTR pstrURL,  \n    DWORD& dwServiceType,  \n    CString& strServer,  \n    CString& strObject,  \n    INTERNET_PORT& nPort,  \n    CString& strUsername,  \n    CString& strPassword,  \n    DWORD dwFlags = 0); \n```  \n  \n### Parameters  \n *pstrURL*  \n A pointer to a string containing the URL to be parsed.  \n  \n `dwServiceType`  \n Indicates the type of Internet service. Possible values are as follows:  \n  \n-   AFX_INET_SERVICE_FTP  \n  \n-   AFX_INET_SERVICE_HTTP  \n  \n-   AFX_INET_SERVICE_HTTPS  \n  \n-   AFX_INET_SERVICE_GOPHER  \n  \n-   AFX_INET_SERVICE_FILE  \n  \n-   AFX_INET_SERVICE_MAILTO  \n  \n-   AFX_INET_SERVICE_NEWS  \n  \n-   AFX_INET_SERVICE_NNTP  \n  \n-   AFX_INET_SERVICE_TELNET  \n  \n-   AFX_INET_SERVICE_WAIS  \n  \n-   AFX_INET_SERVICE_MID  \n  \n-   AFX_INET_SERVICE_CID  \n  \n-   AFX_INET_SERVICE_PROSPERO  \n  \n-   AFX_INET_SERVICE_AFS  \n  \n-   AFX_INET_SERVICE_UNK  \n  \n `strServer`  \n The first segment of the URL following the service type.  \n  \n `strObject`  \n An object that the URL refers to (may be empty).  \n  \n `nPort`  \n Determined from either the Server or Object portions of the URL, if either exists.  \n  \n *strUsername*  \n A reference to a `CString` object containing the name of the user.  \n  \n `strPassword`  \n A reference to a `CString` object containing the password of the user.  \n  \n `dwFlags`  \n The flags controlling how to parse the URL. Can be a combination of the following values:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|**ICU_DECODE**|Convert %XX escape sequences to characters.|  \n|**ICU_NO_ENCODE**|Do not convert unsafe characters to escape sequence.|  \n|**ICU_NO_META**|Do not remove meta sequences (such as \"\\ .\" and \"\\ ..\") from the URL.|  \n|**ICU_ENCODE_SPACES_ONLY**|Encode spaces only.|  \n|**ICU_BROWSER_MODE**|Do not encode or decode characters after '#' or '', and do not remove trailing white space after ''. If this value is not specified, the entire URL is encoded and trailing white space is removed.|  \n  \n If you use the MFC default, which is no flags, the function converts all unsafe characters and meta sequences (such as \\\\.,\\ .., and \\\\...) to escape sequences.  \n  \n### Return Value  \n Nonzero if the URL was successfully parsed; otherwise, 0 if it is empty or does not contain a known Internet service type.  \n  \n### Remarks  \n It parses a URL string and returns the type of service and its components, as well as providing the user's name and password. The flags indicate how unsafe characters are handled.  \n  \n> [!NOTE]\n>  To call this function, your project must include AFXINET.H.  \n  \n## See Also  \n [Macros and Globals](../../mfc/reference/mfc-macros-and-globals.md)\n"}