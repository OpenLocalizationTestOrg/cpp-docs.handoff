{"nodes":[{"pos":[12,51],"content":"&lt;list&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"list<ph id=\"ph1\">&amp;gt;</ph> operators | Microsoft Docs","pos":[4,39],"source":"list&gt; operators | Microsoft Docs"}]},{"content":"list<ph id=\"ph1\">&amp;gt;</ph> operators","pos":[257,275],"source":"list&gt; operators"},{"content":"operator!=","pos":[295,305]},{"content":"operator","pos":[323,331]},{"content":"operator","pos":[353,361]},{"content":"operator","pos":[391,399]},{"content":"operator","pos":[421,429]},{"content":"operator==","pos":[455,465]},{"pos":[523,533],"content":"operator!="},{"content":"Tests if the list object on the left side of the operator is not equal to the list object on the right side.","pos":[537,645]},{"content":"Parameters","pos":[765,775]},{"content":"An object of type <bpt id=\"p1\">**</bpt>list<ept id=\"p1\">**</ept>.","pos":[789,816],"source":" An object of type **list**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>list<ept id=\"p1\">**</ept>.","pos":[834,861],"source":" An object of type **list**."},{"content":"Return Value","pos":[871,883]},{"pos":[887,957],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the lists are not equal; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if the lists are equal.","source":"**true** if the lists are not equal; **false** if the lists are equal."},{"content":"Remarks","pos":[967,974]},{"content":"The comparison between list objects is based on a pairwise comparison of their elements.","pos":[978,1066]},{"content":"Two lists are equal if they have the same number of elements and their respective elements have the same values.","pos":[1067,1179]},{"content":"Otherwise, they are unequal.","pos":[1180,1208]},{"content":"Example","pos":[1218,1225]},{"pos":[1618,1626],"content":"operator"},{"content":"Tests if the list object on the left side of the operator is less than the list object on the right side.","pos":[1634,1739]},{"content":"Parameters","pos":[1858,1868]},{"content":"An object of type <bpt id=\"p1\">**</bpt>list<ept id=\"p1\">**</ept>.","pos":[1882,1909],"source":" An object of type **list**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>list<ept id=\"p1\">**</ept>.","pos":[1927,1954],"source":" An object of type **list**."},{"content":"Return Value","pos":[1964,1976]},{"pos":[1980,2128],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the list on the left side of the operator is less than but not equal to the list on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the list on the left side of the operator is less than but not equal to the list on the right side of the operator; otherwise **false**."},{"content":"Remarks","pos":[2138,2145]},{"content":"The comparison between list objects is based on a pairwise comparison of their elements.","pos":[2149,2237]},{"content":"The less-than relationship between two objects is based on a comparison of the first pair of unequal elements.","pos":[2238,2348]},{"content":"Example","pos":[2358,2365]},{"pos":[2913,2921],"content":"operator"},{"content":"Tests if the list object on the left side of the operator is less than or equal to the list object on the right side.","pos":[2930,3047]},{"content":"Parameters","pos":[3167,3177]},{"content":"An object of type <bpt id=\"p1\">**</bpt>list<ept id=\"p1\">**</ept>.","pos":[3191,3218],"source":" An object of type **list**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>list<ept id=\"p1\">**</ept>.","pos":[3236,3263],"source":" An object of type **list**."},{"content":"Return Value","pos":[3273,3285]},{"pos":[3289,3432],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the list on the left side of the operator is less than or equal to the list on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the list on the left side of the operator is less than or equal to the list on the right side of the operator; otherwise **false**."},{"content":"Remarks","pos":[3442,3449]},{"content":"The comparison between list objects is based on a pairwise comparison of their elements.","pos":[3453,3541]},{"content":"The less than or equal to relationship between two objects is based on a comparison of the first pair of unequal elements.","pos":[3542,3664]},{"content":"Example","pos":[3674,3681]},{"pos":[4251,4261],"content":"operator=="},{"content":"Tests if the list object on the left side of the operator is equal to the list object on the right side.","pos":[4265,4369]},{"content":"Parameters","pos":[4489,4499]},{"content":"An object of type <bpt id=\"p1\">**</bpt>list<ept id=\"p1\">**</ept>.","pos":[4513,4540],"source":" An object of type **list**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>list<ept id=\"p1\">**</ept>.","pos":[4558,4585],"source":" An object of type **list**."},{"content":"Return Value","pos":[4595,4607]},{"pos":[4611,4741],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the list on the left side of the operator is equal to the list on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the list on the left side of the operator is equal to the list on the right side of the operator; otherwise **false**."},{"content":"Remarks","pos":[4751,4758]},{"content":"The comparison between list objects is based on a pairwise comparison of their elements.","pos":[4762,4850]},{"content":"Two lists are equal if they have the same number of elements and their respective elements have the same values.","pos":[4851,4963]},{"content":"Otherwise, they are unequal.","pos":[4964,4992]},{"content":"Example","pos":[5002,5009]},{"pos":[5452,5460],"content":"operator"},{"content":"Tests if the list object on the left side of the operator is greater than the list object on the right side.","pos":[5468,5576]},{"content":"Parameters","pos":[5695,5705]},{"content":"An object of type <bpt id=\"p1\">**</bpt>list<ept id=\"p1\">**</ept>.","pos":[5719,5746],"source":" An object of type **list**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>list<ept id=\"p1\">**</ept>.","pos":[5764,5791],"source":" An object of type **list**."},{"content":"Return Value","pos":[5801,5813]},{"pos":[5817,5951],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the list on the left side of the operator is greater than the list on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the list on the left side of the operator is greater than the list on the right side of the operator; otherwise **false**."},{"content":"Remarks","pos":[5961,5968]},{"content":"The comparison between list objects is based on a pairwise comparison of their elements.","pos":[5972,6060]},{"content":"The greater-than relationship between two objects is based on a comparison of the first pair of unequal elements.","pos":[6061,6174]},{"content":"Example","pos":[6184,6191]},{"pos":[6768,6776],"content":"operator"},{"content":"Tests if the list object on the left side of the operator is greater than or equal to the list object on the right side.","pos":[6785,6905]},{"content":"Parameters","pos":[7025,7035]},{"content":"An object of type <bpt id=\"p1\">**</bpt>list<ept id=\"p1\">**</ept>.","pos":[7049,7076],"source":" An object of type **list**."},{"content":"An object of type <bpt id=\"p1\">**</bpt>list<ept id=\"p1\">**</ept>.","pos":[7094,7121],"source":" An object of type **list**."},{"content":"Return Value","pos":[7131,7143]},{"pos":[7147,7293],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the list on the left side of the operator is greater than or equal to the list on the right side of the operator; otherwise <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"**true** if the list on the left side of the operator is greater than or equal to the list on the right side of the operator; otherwise **false**."},{"content":"Remarks","pos":[7303,7310]},{"content":"The comparison between list objects is based on a pairwise comparison of their elements.","pos":[7314,7402]},{"content":"The greater than or equal to relationship between two objects is based on a comparison of the first pair of unequal elements.","pos":[7403,7528]},{"content":"Example","pos":[7538,7545]},{"content":"See Also","pos":[8110,8118]},{"content":"list&gt;","pos":[8125,8130],"source":"list>"}],"content":"---\ntitle: \"&lt;list&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 8103d8f2-c30f-49ad-ac50-b3ba6a907ebe\ncaps.latest.revision: 7\nmanager: \"ghogen\"\n---\n# &lt;list&gt; operators\n||||  \n|-|-|-|  \n|[operator!=](#operator_neq)|[operator&gt;](#operator_gt_)|[operator&gt;=](#operator_gt__eq)|  \n|[operator&lt;](#operator_lt_)|[operator&lt;=](#operator_lt__eq)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests if the list object on the left side of the operator is not equal to the list object on the right side.  \n  \n```\nbool operator!=(\n    const list<Type, Allocator>& left,\n    const list<Type, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type **list**.  \n  \n `right`  \n An object of type **list**.  \n  \n### Return Value  \n **true** if the lists are not equal; **false** if the lists are equal.  \n  \n### Remarks  \n The comparison between list objects is based on a pairwise comparison of their elements. Two lists are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n  \n// list_op_ne.cpp  \n// compile with: /EHsc  \n#include <list>  \n#include <iostream>  \n  \nint main( )  \n{  \nusing namespace std;  \nlist <int> c1, c2;  \nc1.push_back( 1 );  \nc2.push_back( 2 );  \n  \nif ( c1 != c2 )  \ncout << \"Lists not equal.\" << endl;  \nelse  \ncout << \"Lists equal.\" << endl;  \n}  \n\\* Output:  \nLists not equal.  \n*\\  \n```  \n  \n##  <a name=\"operator_lt_\"></a>  operator&lt;  \n Tests if the list object on the left side of the operator is less than the list object on the right side.  \n  \n```\nbool operator<(\n    const list<Type, Allocator>& left,\n    const list<Type, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type **list**.  \n  \n `right`  \n An object of type **list**.  \n  \n### Return Value  \n **true** if the list on the left side of the operator is less than but not equal to the list on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between list objects is based on a pairwise comparison of their elements. The less-than relationship between two objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// list_op_lt.cpp  \n// compile with: /EHsc  \n#include <list>  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;   \n   list <int> c1, c2;  \n   c1.push_back( 1 );  \n   c1.push_back( 2 );  \n   c1.push_back( 4 );  \n  \n   c2.push_back( 1 );  \n   c2.push_back( 3 );  \n  \n   if ( c1 < c2 )  \n      cout << \"List c1 is less than list c2.\" << endl;  \n   else  \n      cout << \"List c1 is not less than list c2.\" << endl;  \n}  \n\\* Output:   \nList c1 is less than list c2.  \n*\\   \n```  \n  \n##  <a name=\"operator_lt__eq\"></a>  operator&lt;=  \n Tests if the list object on the left side of the operator is less than or equal to the list object on the right side.  \n  \n```\nbool operator<=(\n    const list<Type, Allocator>& left,\n    const list<Type, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type **list**.  \n  \n `right`  \n An object of type **list**.  \n  \n### Return Value  \n **true** if the list on the left side of the operator is less than or equal to the list on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between list objects is based on a pairwise comparison of their elements. The less than or equal to relationship between two objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// list_op_le.cpp  \n// compile with: /EHsc  \n#include <list>  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;   \n   list <int> c1, c2;  \n   c1.push_back( 1 );  \n   c1.push_back( 2 );  \n   c1.push_back( 4 );  \n  \n   c2.push_back( 1 );  \n   c2.push_back( 3 );  \n  \n   if ( c1 <= c2 )  \n      cout << \"List c1 is less than or equal to list c2.\" << endl;  \n   else  \n      cout << \"List c1 is greater than list c2.\" << endl;  \n}  \n\\* Output:   \nList c1 is less than or equal to list c2.  \n*\\  \n```  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests if the list object on the left side of the operator is equal to the list object on the right side.  \n  \n```\nbool operator==(\n    const list<Type, Allocator>& left,\n    const list<Type, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type **list**.  \n  \n `right`  \n An object of type **list**.  \n  \n### Return Value  \n **true** if the list on the left side of the operator is equal to the list on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between list objects is based on a pairwise comparison of their elements. Two lists are equal if they have the same number of elements and their respective elements have the same values. Otherwise, they are unequal.  \n  \n### Example  \n  \n```cpp  \n// list_op_eq.cpp  \n// compile with: /EHsc  \n#include <list>  \n#include <iostream>  \nint main( )   \n{  \n   using namespace std;   \n  \n   list <int> c1, c2;  \n   c1.push_back( 1 );  \n   c2.push_back( 1 );  \n  \n   if ( c1 == c2 )  \n      cout << \"The lists are equal.\" << endl;  \n   else  \n      cout << \"The lists are not equal.\" << endl;  \n}  \n\\* Output:   \nThe lists are equal.  \n*\\  \n```  \n  \n##  <a name=\"operator_gt_\"></a>  operator&gt;  \n Tests if the list object on the left side of the operator is greater than the list object on the right side.  \n  \n```\nbool operator>(\n    const list<Type, Allocator>& left,\n    const list<Type, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type **list**.  \n  \n `right`  \n An object of type **list**.  \n  \n### Return Value  \n **true** if the list on the left side of the operator is greater than the list on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between list objects is based on a pairwise comparison of their elements. The greater-than relationship between two objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// list_op_gt.cpp  \n// compile with: /EHsc  \n#include <list>  \n#include <iostream>  \nint main( )   \n{  \n   using namespace std;   \n   list <int> c1, c2;  \n   c1.push_back( 1 );  \n   c1.push_back( 3 );  \n   c1.push_back( 1 );  \n  \n   c2.push_back( 1 );  \n   c2.push_back( 2 );  \n   c2.push_back( 2 );  \n  \n   if ( c1 > c2 )  \n      cout << \"List c1 is greater than list c2.\" << endl;  \n   else  \n      cout << \"List c1 is not greater than list c2.\" << endl;  \n}  \n\\* Output:   \nList c1 is greater than list c2.  \n*\\  \n```  \n  \n##  <a name=\"operator_gt__eq\"></a>  operator&gt;=  \n Tests if the list object on the left side of the operator is greater than or equal to the list object on the right side.  \n  \n```\nbool operator>=(\n    const list<Type, Allocator>& left,\n    const list<Type, Allocator>& right);\n```  \n  \n### Parameters  \n `left`  \n An object of type **list**.  \n  \n `right`  \n An object of type **list**.  \n  \n### Return Value  \n **true** if the list on the left side of the operator is greater than or equal to the list on the right side of the operator; otherwise **false**.  \n  \n### Remarks  \n The comparison between list objects is based on a pairwise comparison of their elements. The greater than or equal to relationship between two objects is based on a comparison of the first pair of unequal elements.  \n  \n### Example  \n  \n```cpp  \n// list_op_ge.cpp  \n// compile with: /EHsc  \n#include <list>  \n#include <iostream>  \n  \nint main( )   \n{  \n   using namespace std;   \n   list <int> c1, c2;  \n   c1.push_back( 1 );  \n   c1.push_back( 3 );  \n   c1.push_back( 1 );  \n  \n   c2.push_back( 1 );  \n   c2.push_back( 2 );  \n   c2.push_back( 2 );  \n  \n   if ( c1 >= c2 )  \n      cout << \"List c1 is greater than or equal to list c2.\" << endl;  \n   else  \n      cout << \"List c1 is less than list c2.\" << endl;  \n}  \n\\* Output:   \nList c1 is greater than or equal to list c2.  \n*\\  \n```  \n  \n## See Also  \n [\\<list>](../standard-library/list.md)\n\n\n\n"}