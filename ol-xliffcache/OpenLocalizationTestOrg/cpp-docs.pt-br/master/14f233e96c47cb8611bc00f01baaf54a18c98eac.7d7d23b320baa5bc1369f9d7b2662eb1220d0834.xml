{"nodes":[{"pos":[12,84],"content":"Trackers: Implementing Trackers in Your OLE Application | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Trackers: Implementing Trackers in Your OLE Application | Microsoft Docs","pos":[0,72]}]},{"content":"Trackers: Implementing Trackers in Your OLE Application","pos":[780,835]},{"content":"Trackers provide a graphical interface to enable users to interact with OLE client items.","pos":[836,925]},{"content":"By using different tracker styles, OLE client items can be displayed with hatched borders, resize handles, or a variety of other visual effects.","pos":[926,1070]},{"content":"This article describes:","pos":[1071,1094]},{"pos":[1104,1195],"content":"<bpt id=\"p1\">[</bpt>How to Implement Tracking in Your Code<ept id=\"p1\">](../mfc/how-to-implement-tracking-in-your-code.md)</ept>.","source":"[How to Implement Tracking in Your Code](../mfc/how-to-implement-tracking-in-your-code.md)."},{"pos":[1205,1274],"content":"<bpt id=\"p1\">[</bpt>Rubber-Banding and Trackers<ept id=\"p1\">](../mfc/rubber-banding-and-trackers.md)</ept>.","source":"[Rubber-Banding and Trackers](../mfc/rubber-banding-and-trackers.md)."},{"content":"The article also covers the use of styles with trackers.","pos":[1281,1337]},{"content":"In addition, it makes several references to the MFC OLE sample <bpt id=\"p1\">[</bpt>OCLIENT<ept id=\"p1\">](../visual-cpp-samples.md)</ept>.","pos":[1338,1437],"source":" In addition, it makes several references to the MFC OLE sample [OCLIENT](../visual-cpp-samples.md)."},{"content":"See Also","pos":[1446,1454]},{"content":"Trackers","pos":[1459,1467]}],"content":"---\ntitle: \"Trackers: Implementing Trackers in Your OLE Application | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"trackers\"\n  - \"OLE applications [C++], trackers\"\n  - \"applications [OLE], trackers\"\n  - \"tracking OLE items\"\n  - \"OLE containers, trackers\"\n  - \"CRectTracker class, implementing trackers\"\nms.assetid: 5103a517-65bd-441a-8a53-02915ff3ef08\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Trackers: Implementing Trackers in Your OLE Application\nTrackers provide a graphical interface to enable users to interact with OLE client items. By using different tracker styles, OLE client items can be displayed with hatched borders, resize handles, or a variety of other visual effects. This article describes:  \n  \n-   [How to Implement Tracking in Your Code](../mfc/how-to-implement-tracking-in-your-code.md).  \n  \n-   [Rubber-Banding and Trackers](../mfc/rubber-banding-and-trackers.md).  \n  \n The article also covers the use of styles with trackers. In addition, it makes several references to the MFC OLE sample [OCLIENT](../visual-cpp-samples.md).  \n  \n## See Also  \n [Trackers](../mfc/trackers.md)\n\n"}