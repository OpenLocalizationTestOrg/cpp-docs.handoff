{"nodes":[{"pos":[12,57],"content":"Unwind Data Definitions in C | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Unwind Data Definitions in C | Microsoft Docs","pos":[0,45]}]},{"content":"Unwind Data Definitions in C","pos":[537,565]},{"content":"The following is a C description of the unwind data:","pos":[566,618]},{"content":"See Also","pos":[2884,2892]},{"content":"Exception Handling (x64)","pos":[2897,2921]}],"content":"---\ntitle: \"Unwind Data Definitions in C | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 93cb6430-e4cf-43f5-ab60-3b57d1273b2c\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Unwind Data Definitions in C\nThe following is a C description of the unwind data:  \n  \n```  \ntypedef enum _UNWIND_OP_CODES {  \n    UWOP_PUSH_NONVOL = 0, /* info == register number */  \n    UWOP_ALLOC_LARGE,     /* no info, alloc size in next 2 slots */  \n    UWOP_ALLOC_SMALL,     /* info == size of allocation / 8 - 1 */  \n    UWOP_SET_FPREG,       /* no info, FP = RSP + UNWIND_INFO.FPRegOffset*16 */  \n    UWOP_SAVE_NONVOL,     /* info == register number, offset in next slot */  \n    UWOP_SAVE_NONVOL_FAR, /* info == register number, offset in next 2 slots */  \n    UWOP_SAVE_XMM128,     /* info == XMM reg number, offset in next slot */  \n    UWOP_SAVE_XMM128_FAR, /* info == XMM reg number, offset in next 2 slots */  \n    UWOP_PUSH_MACHFRAME   /* info == 0: no error-code, 1: error-code */  \n} UNWIND_CODE_OPS;  \n  \ntypedef union _UNWIND_CODE {  \n    struct {  \n        UBYTE CodeOffset;  \n        UBYTE UnwindOp : 4;  \n        UBYTE OpInfo   : 4;  \n    };  \n    USHORT FrameOffset;  \n} UNWIND_CODE, *PUNWIND_CODE;  \n  \n#define UNW_FLAG_EHANDLER  0x01  \n#define UNW_FLAG_UHANDLER  0x02  \n#define UNW_FLAG_CHAININFO 0x04  \n  \ntypedef struct _UNWIND_INFO {  \n    UBYTE Version       : 3;  \n    UBYTE Flags         : 5;  \n    UBYTE SizeOfProlog;  \n    UBYTE CountOfCodes;  \n    UBYTE FrameRegister : 4;  \n    UBYTE FrameOffset   : 4;  \n    UNWIND_CODE UnwindCode[1];  \n/*  UNWIND_CODE MoreUnwindCode[((CountOfCodes + 1) & ~1) - 1];  \n*   union {  \n*       OPTIONAL ULONG ExceptionHandler;  \n*       OPTIONAL ULONG FunctionEntry;  \n*   };  \n*   OPTIONAL ULONG ExceptionData[]; */  \n} UNWIND_INFO, *PUNWIND_INFO;  \n  \ntypedef struct _RUNTIME_FUNCTION {  \n    ULONG BeginAddress;  \n    ULONG EndAddress;  \n    ULONG UnwindData;  \n} RUNTIME_FUNCTION, *PRUNTIME_FUNCTION;  \n  \n#define GetUnwindCodeEntry(info, index) \\  \n    ((info)->UnwindCode[index])  \n  \n#define GetLanguageSpecificDataPtr(info) \\  \n    ((PVOID)&GetUnwindCodeEntry((info),((info)->CountOfCodes + 1) & ~1))  \n  \n#define GetExceptionHandler(base, info) \\  \n    ((PEXCEPTION_HANDLER)((base) + *(PULONG)GetLanguageSpecificDataPtr(info)))  \n  \n#define GetChainedFunctionEntry(base, info) \\  \n    ((PRUNTIME_FUNCTION)((base) + *(PULONG)GetLanguageSpecificDataPtr(info)))  \n  \n#define GetExceptionDataPtr(info) \\  \n    ((PVOID)((PULONG)GetLanguageSpecificData(info) + 1)  \n```  \n  \n## See Also  \n [Exception Handling (x64)](../build/exception-handling-x64.md)"}