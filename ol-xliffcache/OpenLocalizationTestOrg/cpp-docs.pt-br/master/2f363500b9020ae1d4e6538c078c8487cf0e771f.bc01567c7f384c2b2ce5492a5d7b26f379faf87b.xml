{"nodes":[{"pos":[12,81],"content":"Postfix Increment and Decrement Operators: ++ and -- | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Postfix Increment and Decrement Operators: ++ and -- | Microsoft Docs","pos":[0,69]}]},{"content":"Postfix Increment and Decrement Operators: ++ and --","pos":[902,954]},{"content":"Syntax","pos":[958,964]},{"content":"Remarks","pos":[1036,1043]},{"content":"C++ provides prefix and postfix increment and decrement operators; this section describes only the postfix increment and decrement operators.","pos":[1047,1188]},{"content":"(For more information, see <bpt id=\"p1\">[</bpt>Prefix Increment and Decrement Operators<ept id=\"p1\">](../cpp/prefix-increment-and-decrement-operators-increment-and-decrement.md)</ept>.) The difference between the two is that in the postfix notation, the operator appears after <bpt id=\"p2\">*</bpt>postfix-expression<ept id=\"p2\">*</ept>, whereas in the prefix notation, the operator appears before <bpt id=\"p3\">*</bpt>expression.<ept id=\"p3\">*</ept>","pos":[1189,1523],"source":" (For more information, see [Prefix Increment and Decrement Operators](../cpp/prefix-increment-and-decrement-operators-increment-and-decrement.md).) The difference between the two is that in the postfix notation, the operator appears after *postfix-expression*, whereas in the prefix notation, the operator appears before *expression.*"},{"content":"The following example shows a postfix-increment operator:","pos":[1524,1581]},{"content":"The effect of applying the postfix increment operator (<ph id=\"ph1\">`++`</ph>) is that the operand's value is increased by one unit of the appropriate type.","pos":[1610,1748],"source":"The effect of applying the postfix increment operator (`++`) is that the operand's value is increased by one unit of the appropriate type."},{"content":"Similarly, the effect of applying the postfix decrement operator (<bpt id=\"p1\">**</bpt>––<ept id=\"p1\">**</ept>) is that the operand's value is decreased by one unit of the appropriate type.","pos":[1749,1900],"source":" Similarly, the effect of applying the postfix decrement operator (**––**) is that the operand's value is decreased by one unit of the appropriate type."},{"content":"It is important to note that a postfix increment or decrement expression evaluates to the value of the expression <bpt id=\"p1\">**</bpt>prior to<ept id=\"p1\">**</ept> application of the respective operator.","pos":[1907,2073],"source":"It is important to note that a postfix increment or decrement expression evaluates to the value of the expression **prior to** application of the respective operator."},{"content":"The increment or decrement operation occurs <bpt id=\"p1\">**</bpt>after<ept id=\"p1\">**</ept> the operand is evaluated.","pos":[2074,2153],"source":" The increment or decrement operation occurs **after** the operand is evaluated."},{"content":"This issue arises only when the postfix increment or decrement operation occurs in the context of a larger expression.","pos":[2154,2272]},{"content":"When a postfix operator is applied to a function argument, the value of the argument is not guaranteed to be incremented or decremented before it is passed to the function.","pos":[2279,2451]},{"content":"See section 1.9.17 in the C++ standard for more information.","pos":[2453,2513]},{"content":"Applying the postfix increment operator to a pointer to an array of objects of type <bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept> actually adds four to the internal representation of the pointer.","pos":[2520,2678],"source":"Applying the postfix increment operator to a pointer to an array of objects of type **long** actually adds four to the internal representation of the pointer."},{"content":"This behavior causes the pointer, which previously referred to the <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>th element of the array, to refer to the (<bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept>+1)th element.","pos":[2679,2808],"source":" This behavior causes the pointer, which previously referred to the *n*th element of the array, to refer to the (*n*+1)th element."},{"content":"The operands to postfix increment and postfix decrement operators must be modifiable (not <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>) l-values of arithmetic or pointer type.","pos":[2815,2955],"source":"The operands to postfix increment and postfix decrement operators must be modifiable (not **const**) l-values of arithmetic or pointer type."},{"content":"The type of the result is the same as that of the <bpt id=\"p1\">*</bpt>postfix-expression<ept id=\"p1\">*</ept>, but it is no longer an l-value.","pos":[2956,3059],"source":" The type of the result is the same as that of the *postfix-expression*, but it is no longer an l-value."},{"content":"The operand of a postfix increment operator may also be of type <ph id=\"ph1\">`bool`</ph>, in which case the operand is evaluated and then set to <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","pos":[3066,3202],"source":"The operand of a postfix increment operator may also be of type `bool`, in which case the operand is evaluated and then set to **true**."},{"content":"The operand of a postfix decrement operator cannot be of type <ph id=\"ph1\">`bool`</ph>.","pos":[3203,3272],"source":" The operand of a postfix decrement operator cannot be of type `bool`."},{"content":"The following code illustrates the postfix increment operator:","pos":[3279,3341]},{"content":"Postincrement and postdecrement operations on enumerated types are not supported:","pos":[3579,3660]},{"content":"See Also","pos":[3818,3826]},{"content":"Postfix Expressions","pos":[3831,3850]},{"content":"C++ Built-in Operators, Precedence and Associativity","pos":[3888,3940]},{"content":"C Postfix Increment and Decrement Operators","pos":[4010,4053]}],"content":"---\ntitle: \"Postfix Increment and Decrement Operators: ++ and -- | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"--\"\n  - \"++\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"increment operators, syntax\"\n  - \"member-selection operators\"\n  - \"-- operator, postfix decrement operators\"\n  - \"postfix operators\"\n  - \"++ operator, postfix increment operators\"\n  - \"decrement operators, syntax\"\n  - \"operators [C++], postfix\"\n  - \"decrement operators\"\nms.assetid: 0204d5c8-51b0-4108-b8a1-074c5754d89c\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Postfix Increment and Decrement Operators: ++ and --\n## Syntax  \n  \n```  \npostfix-expression ++  \npostfix-expression ––  \n```  \n  \n## Remarks  \n C++ provides prefix and postfix increment and decrement operators; this section describes only the postfix increment and decrement operators. (For more information, see [Prefix Increment and Decrement Operators](../cpp/prefix-increment-and-decrement-operators-increment-and-decrement.md).) The difference between the two is that in the postfix notation, the operator appears after *postfix-expression*, whereas in the prefix notation, the operator appears before *expression.* The following example shows a postfix-increment operator:  \n  \n```  \ni++;  \n```  \n  \n The effect of applying the postfix increment operator (`++`) is that the operand's value is increased by one unit of the appropriate type. Similarly, the effect of applying the postfix decrement operator (**––**) is that the operand's value is decreased by one unit of the appropriate type.  \n  \n It is important to note that a postfix increment or decrement expression evaluates to the value of the expression **prior to** application of the respective operator. The increment or decrement operation occurs **after** the operand is evaluated. This issue arises only when the postfix increment or decrement operation occurs in the context of a larger expression.  \n  \n When a postfix operator is applied to a function argument, the value of the argument is not guaranteed to be incremented or decremented before it is passed to the function.  See section 1.9.17 in the C++ standard for more information.  \n  \n Applying the postfix increment operator to a pointer to an array of objects of type **long** actually adds four to the internal representation of the pointer. This behavior causes the pointer, which previously referred to the *n*th element of the array, to refer to the (*n*+1)th element.  \n  \n The operands to postfix increment and postfix decrement operators must be modifiable (not **const**) l-values of arithmetic or pointer type. The type of the result is the same as that of the *postfix-expression*, but it is no longer an l-value.  \n  \n The operand of a postfix increment operator may also be of type `bool`, in which case the operand is evaluated and then set to **true**. The operand of a postfix decrement operator cannot be of type `bool`.  \n  \n The following code illustrates the postfix increment operator:  \n  \n```  \n// expre_Postfix_Increment_and_Decrement_Operators.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nint main() {  \n   int i = 10;  \n   cout << i++ << endl;  \n   cout << i << endl;  \n}  \n```  \n  \n Postincrement and postdecrement operations on enumerated types are not supported:  \n  \n```  \nenum Compass { North, South, East, West );  \nCompass myCompass;  \nfor( myCompass = North; myCompass != West; myCompass++ ) // Error  \n```  \n  \n## See Also  \n [Postfix Expressions](../cpp/postfix-expressions.md)   \n [C++ Built-in Operators, Precedence and Associativity](../cpp/cpp-built-in-operators-precedence-and-associativity.md)   \n [C Postfix Increment and Decrement Operators](../c-language/c-postfix-increment-and-decrement-operators.md)"}