<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc390a09b9177fbaa0f50d14087e940057429a0c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\assembler\inline\writing-functions-with-inline-assembly.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">535b7cddf17231b77ad9dcf463afc3c6399a6c5b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">092a81d26bebdfb3d92e9049db42443e7d6fb67e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Writing Functions with Inline Assembly | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Writing Functions with Inline Assembly</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you write a function with inline assembly code, it's easy to pass arguments to the function and return a value from it.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following examples compare a function first written for a separate assembler and then rewritten for the inline assembler.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The function, called <ph id="ph1">`power2`</ph>, receives two parameters, multiplying the first parameter by 2 to the power of the second parameter.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Written for a separate assembler, the function might look like this:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Since it's written for a separate assembler, the function requires a separate source file and assembly and link steps.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>C and C++ function arguments are usually passed on the stack, so this version of the <ph id="ph1">`power2`</ph> function accesses its arguments by their positions on the stack.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>(Note that the <bpt id="p1">**</bpt>MODEL<ept id="p1">**</ept> directive, available in MASM and some other assemblers, also allows you to access stack arguments and local stack variables by name.)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This program writes the <ph id="ph1">`power2`</ph> function with inline assembly code:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The inline version of the <ph id="ph1">`power2`</ph> function refers to its arguments by name and appears in the same source file as the rest of the program.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This version also requires fewer assembly instructions.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Because the inline version of <ph id="ph1">`power2`</ph> doesn't execute a C <ph id="ph2">`return`</ph> statement, it causes a harmless warning if you compile at warning level 2 or higher.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The function does return a value, but the compiler cannot tell that in the absence of a <ph id="ph1">`return`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">[</bpt>#pragma warning<ept id="p1">](../../preprocessor/warning.md)</ept> to disable the generation of this warning.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Using C or C++ in __asm Blocks</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>