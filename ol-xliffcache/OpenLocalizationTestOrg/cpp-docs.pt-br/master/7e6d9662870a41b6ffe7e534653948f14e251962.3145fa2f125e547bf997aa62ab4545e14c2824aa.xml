{"nodes":[{"pos":[12,51],"content":"continue Statement (C) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"continue Statement (C) | Microsoft Docs","pos":[0,39]}]},{"content":"continue Statement (C)","pos":[657,679]},{"pos":[680,903],"content":"The <ph id=\"ph1\">`continue`</ph> statement passes control to the next iteration of the nearest enclosing <ph id=\"ph2\">`do`</ph>, <ph id=\"ph3\">`for`</ph>, or <ph id=\"ph4\">`while`</ph> statement in which it appears, bypassing any remaining statements in the <ph id=\"ph5\">`do`</ph>, <ph id=\"ph6\">`for`</ph>, or <ph id=\"ph7\">`while`</ph> statement body.","source":"The `continue` statement passes control to the next iteration of the nearest enclosing `do`, `for`, or `while` statement in which it appears, bypassing any remaining statements in the `do`, `for`, or `while` statement body."},{"content":"Syntax","pos":[912,918]},{"content":":","pos":[938,939]},{"pos":[961,1044],"content":"The next iteration of a <ph id=\"ph1\">`do`</ph>, <ph id=\"ph2\">`for`</ph>, or <ph id=\"ph3\">`while`</ph> statement is determined as follows:","source":"The next iteration of a `do`, `for`, or `while` statement is determined as follows:"},{"pos":[1054,1182],"content":"Within a <ph id=\"ph1\">`do`</ph> or a <ph id=\"ph2\">`while`</ph> statement, the next iteration starts by reevaluating the expression of the <ph id=\"ph3\">`do`</ph> or <ph id=\"ph4\">`while`</ph> statement.","source":"Within a `do` or a `while` statement, the next iteration starts by reevaluating the expression of the `do` or `while` statement."},{"content":"A <ph id=\"ph1\">`continue`</ph> statement in a <ph id=\"ph2\">`for`</ph> statement causes the loop expression of the <ph id=\"ph3\">`for`</ph> statement to be evaluated.","pos":[1192,1302],"source":"A `continue` statement in a `for` statement causes the loop expression of the `for` statement to be evaluated."},{"content":"Then the compiler reevaluates the conditional expression and, depending on the result, either terminates or iterates the statement body.","pos":[1303,1439]},{"content":"See <bpt id=\"p1\">[</bpt>The for Statement<ept id=\"p1\">](../c-language/for-statement-c.md)</ept> for more information on the <ph id=\"ph1\">`for`</ph> statement and its nonterminals.","pos":[1440,1563],"source":" See [The for Statement](../c-language/for-statement-c.md) for more information on the `for` statement and its nonterminals."},{"pos":[1570,1617],"content":"This is an example of the <ph id=\"ph1\">`continue`</ph> statement:","source":"This is an example of the `continue` statement:"},{"content":"In this example, the statement body is executed while <ph id=\"ph1\">`i`</ph> is greater than 0.","pos":[1744,1820],"source":"In this example, the statement body is executed while `i` is greater than 0."},{"content":"First <ph id=\"ph1\">`f(i)`</ph> is assigned to <ph id=\"ph2\">`x`</ph>; then, if <ph id=\"ph3\">`x`</ph> is equal to 1, the <ph id=\"ph4\">`continue`</ph> statement is executed.","pos":[1821,1919],"source":" First `f(i)` is assigned to `x`; then, if `x` is equal to 1, the `continue` statement is executed."},{"content":"The rest of the statements in the body are ignored, and execution resumes at the top of the loop with the evaluation of the loop's test.","pos":[1920,2056]},{"content":"See Also","pos":[2065,2073]},{"content":"continue Statement","pos":[2078,2096]}],"content":"---\ntitle: \"continue Statement (C) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"continue\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"loop structures, continue keyword\"\n  - \"continue keyword [C]\"\nms.assetid: 969f293a-45fe-48a7-b4c6-287ba27a631d\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# continue Statement (C)\nThe `continue` statement passes control to the next iteration of the nearest enclosing `do`, `for`, or `while` statement in which it appears, bypassing any remaining statements in the `do`, `for`, or `while` statement body.  \n  \n## Syntax  \n `jump-statement`:  \n `continue;`  \n  \n The next iteration of a `do`, `for`, or `while` statement is determined as follows:  \n  \n-   Within a `do` or a `while` statement, the next iteration starts by reevaluating the expression of the `do` or `while` statement.  \n  \n-   A `continue` statement in a `for` statement causes the loop expression of the `for` statement to be evaluated. Then the compiler reevaluates the conditional expression and, depending on the result, either terminates or iterates the statement body. See [The for Statement](../c-language/for-statement-c.md) for more information on the `for` statement and its nonterminals.  \n  \n This is an example of the `continue` statement:  \n  \n```  \nwhile ( i-- > 0 )   \n{  \n    x = f( i );  \n    if ( x == 1 )  \n        continue;  \n    y += x * x;  \n}  \n```  \n  \n In this example, the statement body is executed while `i` is greater than 0. First `f(i)` is assigned to `x`; then, if `x` is equal to 1, the `continue` statement is executed. The rest of the statements in the body are ignored, and execution resumes at the top of the loop with the evaluation of the loop's test.  \n  \n## See Also  \n [continue Statement](../cpp/continue-statement-cpp.md)"}