<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0043721abe48347dfeb67600bed1149c70319ea9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\restrict-cpp-amp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0037cc2851bcce3e41e4f782dae1db66cd88651</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8a7a00aea91c290aca73ff360c91c2c90ed048b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>restrict (C++ AMP) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>restrict (C++ AMP)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The restriction specifier can be applied to function and lambda declarations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It enforces restrictions on the code in the function and on the behavior of the function in applications that use the C++ Accelerated Massive Parallelism (C++ AMP) runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about the <ph id="ph1">`restrict`</ph> keyword that is part of the <ph id="ph2">`__declspec`</ph> storage-class attributes, see <bpt id="p1">[</bpt>restrict<ept id="p1">](../cpp/restrict.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`restrict`</ph> clause takes the following forms:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Clause</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The function can use the full C++ language.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Only other functions that are declared by using restrict(cpu) functions can call the function.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The function can only use the subset of the C++ language that C++ AMP can accelerate.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">`restrict(cpu)`</ph> and <ph id="ph2">`restrict(amp)`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The function must adhere to the limitations of both <ph id="ph1">`restrict(cpu)`</ph> and   <ph id="ph2">`restrict(amp)`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The function can be called by functions that are declared by using <ph id="ph1">`restrict(cpu)`</ph>,  <ph id="ph2">`restrict(amp)`</ph>, <ph id="ph3">`restrict(cpu, amp)`</ph>, or <ph id="ph4">`restrict(amp, cpu)`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The form <ph id="ph1">`restrict(A) restrict(B)`</ph> can be written as <ph id="ph2">`restrict(A,B)`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`restrict`</ph> keyword is a contextual keyword.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The restriction specifiers, <ph id="ph1">`cpu`</ph> and <ph id="ph2">`amp`</ph> are not reserved words.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The list of specifiers is not extensible.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A function that does not have a <ph id="ph1">`restrict`</ph> clause is the same as a function that has the <ph id="ph2">`restrict(cpu)`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A function that has the <ph id="ph1">`restrict(amp)`</ph> clause has the following limitations:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The function can call only functions that have the <ph id="ph1">`restrict(amp)`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The function must be inlinable.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The function can declare only <ph id="ph1">`int`</ph>, <ph id="ph2">`unsigned int`</ph>, <ph id="ph3">`float`</ph>, and <ph id="ph4">`double`</ph> variables, and classes and structures that contain only these types.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>is also allowed, but it must be 4-byte-aligned if you use it in a compound type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Lambda functions cannot capture by reference and cannot capture pointers.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>References and single-indirection pointers are supported only as local variables, function arguments, and return types.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following are not allowed:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Recursion.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Variables declared with the <bpt id="p1">[</bpt>volatile<ept id="p1">](../cpp/volatile-cpp.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Virtual functions.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Pointers to functions.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Pointers to member functions.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Pointers in structures.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Pointers to pointers.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>statements.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Labeled statements.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`catch`</ph>, or <ph id="ph2">`throw`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Global variables.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Static variables.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>tile_static Keyword<ept id="p1">](../cpp/tile-static-keyword.md)</ept> instead.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>casts.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`typeid`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>asm declarations.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Varargs.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For a discussion of function limitations, see <bpt id="p1">[</bpt>restrict(amp) Restrictions<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=251089)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the <ph id="ph1">`restrict(amp)`</ph>clause.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>C++ AMP (C++ Accelerated Massive Parallelism)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>