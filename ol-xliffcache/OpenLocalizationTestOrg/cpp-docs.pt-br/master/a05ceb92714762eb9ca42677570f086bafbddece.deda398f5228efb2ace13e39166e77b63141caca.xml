{"nodes":[{"pos":[12,40],"content":"__ll_lshift | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__ll_lshift | Microsoft Docs","pos":[0,28]}]},{"content":"__ll_lshift","pos":[677,688]},{"content":"Microsoft Specific","pos":[691,709]},{"content":"Shifts the supplied 64-bit value to the left by the specified number of bits.","pos":[718,795]},{"content":"Syntax","pos":[804,810]},{"content":"Parameters","pos":[915,925]},{"content":"[in]","pos":[929,933]},{"content":"The 64-bit integer value to shift left.","pos":[944,983]},{"content":"[in]","pos":[990,994]},{"content":"The number of bits to shift.","pos":[1005,1033]},{"content":"Return Value","pos":[1042,1054]},{"pos":[1058,1095],"content":"The mask shifted left by <ph id=\"ph1\">`nBit`</ph> bits.","source":"The mask shifted left by `nBit` bits."},{"content":"Requirements","pos":[1104,1116]},{"content":"Intrinsic","pos":[1123,1132]},{"content":"Architecture","pos":[1133,1145]},{"pos":[1203,1207],"content":"x86,"},{"pos":[1279,1306],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>intrin.h&gt;","source":"**Header file** \\<intrin.h>"},{"content":"Remarks","pos":[1315,1322]},{"content":"If you compile your program using the 64 bit architecture and <ph id=\"ph1\">`nBit`</ph> is larger than 63, the number of bits to shift is <ph id=\"ph2\">`nBit`</ph> modulo 64.","pos":[1326,1462],"source":"If you compile your program using the 64 bit architecture and `nBit` is larger than 63, the number of bits to shift is `nBit` modulo 64."},{"content":"If you compile your program using the 32 bit architecture and <ph id=\"ph1\">`nBit`</ph> is larger than 31, the number of bits to shift is <ph id=\"ph2\">`nBit`</ph> modulo 32.","pos":[1463,1599],"source":" If you compile your program using the 32 bit architecture and `nBit` is larger than 31, the number of bits to shift is `nBit` modulo 32."},{"pos":[1606,1690],"content":"The <ph id=\"ph1\">`ll`</ph> in the name indicates that this is an operation on <ph id=\"ph2\">`long long`</ph> (<ph id=\"ph3\">`__int64`</ph>).","source":"The `ll` in the name indicates that this is an operation on `long long` (`__int64`)."},{"content":"Example","pos":[1699,1706]},{"content":"Output","pos":[2052,2058]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> There is no unsigned version of the left shift operation.","pos":[2088,2154],"source":"**Note** There is no unsigned version of the left shift operation."},{"content":"This is because <ph id=\"ph1\">`__ll_lshift`</ph> already uses an unsigned input parameter.","pos":[2155,2226],"source":" This is because `__ll_lshift` already uses an unsigned input parameter."},{"content":"Unlike the right shift, there is no sign dependence for the left shift, because the least significant bit in the result is always set to zero regardless of the sign of the value shifted.","pos":[2227,2413]},{"content":"END Microsoft Specific","pos":[2423,2445]},{"content":"See Also","pos":[2454,2462]},{"content":"__ll_rshift","pos":[2467,2478]},{"content":"__ull_rshift","pos":[2513,2525]},{"content":"Compiler Intrinsics","pos":[2561,2580]}],"content":"---\ntitle: \"__ll_lshift | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"__ll_lshift_cpp\"\n  - \"__ll_lshift\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ll_lshift intrinsic\"\n  - \"__ll_lshift intrinsic\"\nms.assetid: fe98f733-426d-44b3-8f24-5d0d6d44bd94\ncaps.latest.revision: 16\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# __ll_lshift\n**Microsoft Specific**  \n  \n Shifts the supplied 64-bit value to the left by the specified number of bits.  \n  \n## Syntax  \n  \n```  \nunsigned __int64 __ll_lshift(  \n   unsigned __int64 Mask,  \n   int nBit  \n);  \n```  \n  \n#### Parameters  \n [in] `Mask`  \n The 64-bit integer value to shift left.  \n  \n [in] `nBit`  \n The number of bits to shift.  \n  \n## Return Value  \n The mask shifted left by `nBit` bits.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`__ll_lshift`|x86, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n  \n **Header file** \\<intrin.h>  \n  \n## Remarks  \n If you compile your program using the 64 bit architecture and `nBit` is larger than 63, the number of bits to shift is `nBit` modulo 64. If you compile your program using the 32 bit architecture and `nBit` is larger than 31, the number of bits to shift is `nBit` modulo 32.  \n  \n The `ll` in the name indicates that this is an operation on `long long` (`__int64`).  \n  \n## Example  \n  \n```  \n// ll_lshift.cpp  \n// compile with: /EHsc  \n// processor: x86, x64  \n#include <iostream>  \n#include <intrin.h>  \nusing namespace std;  \n  \n#pragma intrinsic(__ll_lshift)  \n  \nint main()  \n{  \n   unsigned __int64 Mask = 0x100;  \n   int nBit = 8;  \n   Mask = __ll_lshift(Mask, nBit);  \n   cout << hex << Mask << endl;  \n}  \n```  \n  \n## Output  \n  \n```  \n10000  \n```  \n  \n **Note** There is no unsigned version of the left shift operation. This is because `__ll_lshift` already uses an unsigned input parameter. Unlike the right shift, there is no sign dependence for the left shift, because the least significant bit in the result is always set to zero regardless of the sign of the value shifted.  \n  \n### END Microsoft Specific  \n  \n## See Also  \n [__ll_rshift](../intrinsics/ll-rshift.md)   \n [__ull_rshift](../intrinsics/ull-rshift.md)   \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)"}