{"nodes":[{"pos":[12,49],"content":"CMapStringToOb Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMapStringToOb Class | Microsoft Docs","pos":[0,37]}]},{"content":"CMapStringToOb Class","pos":[696,716]},{"pos":[717,804],"content":"A dictionary collection class that maps unique <ph id=\"ph1\">`CString`</ph> objects to <ph id=\"ph2\">`CObject`</ph> pointers.","source":"A dictionary collection class that maps unique `CString` objects to `CObject` pointers."},{"content":"Syntax","pos":[813,819]},{"content":"Members","pos":[883,890]},{"content":"Public Constructors","pos":[900,919]},{"content":"Name","pos":[926,930]},{"content":"Description","pos":[931,942]},{"content":"CMapStringToOb::CMapStringToOb","pos":[981,1011]},{"content":"Constructor.","pos":[1046,1058]},{"content":"Public Methods","pos":[1069,1083]},{"content":"Name","pos":[1090,1094]},{"content":"Description","pos":[1095,1106]},{"content":"CMapStringToOb::GetCount","pos":[1145,1169]},{"content":"Returns the number of elements in this map.","pos":[1198,1241]},{"content":"CMapStringToOb::GetHashTableSize","pos":[1247,1279]},{"content":"Determines the current number of elements in the hash table.","pos":[1316,1376]},{"content":"CMapStringToOb::GetNextAssoc","pos":[1382,1410]},{"content":"Gets the next element for iterating.","pos":[1443,1479]},{"content":"CMapStringToOb::GetSize","pos":[1485,1508]},{"content":"Returns the number of elements in this map.","pos":[1536,1579]},{"content":"CMapStringToOb::GetStartPosition","pos":[1585,1617]},{"content":"Returns the position of the first element.","pos":[1654,1696]},{"content":"CMapStringToOb::HashKey","pos":[1702,1725]},{"content":"Calculates the hash value of a specified key.","pos":[1753,1798]},{"content":"CMapStringToOb::InitHashTable","pos":[1804,1833]},{"content":"Initializes the hash table.","pos":[1867,1894]},{"content":"CMapStringToOb::IsEmpty","pos":[1900,1923]},{"content":"Tests for the empty-map condition (no elements).","pos":[1951,1999]},{"content":"CMapStringToOb::Lookup","pos":[2005,2027]},{"content":"Looks up a void pointer based on the void pointer key.","pos":[2054,2108]},{"content":"The pointer value, not the entity it points to, is used for the key comparison.","pos":[2109,2188]},{"content":"CMapStringToOb::LookupKey","pos":[2194,2219]},{"content":"Returns a reference to the key associated with the specified key value.","pos":[2249,2320]},{"content":"CMapStringToOb::RemoveAll","pos":[2326,2351]},{"content":"Removes all the elements from this map.","pos":[2381,2420]},{"content":"CMapStringToOb::RemoveKey","pos":[2426,2451]},{"content":"Removes an element specified by a key.","pos":[2481,2519]},{"content":"CMapStringToOb::SetAt","pos":[2525,2546]},{"content":"Inserts an element into the map; replaces an existing element if a matching key is found.","pos":[2572,2661]},{"content":"Public Operators","pos":[2672,2688]},{"content":"Name","pos":[2695,2699]},{"content":"Description","pos":[2700,2711]},{"content":"CMapStringToOb::operator [ ]","pos":[2750,2778]},{"pos":[2810,2878],"content":"Inserts an element into the map — operator substitution for <ph id=\"ph1\">`SetAt`</ph>.","source":"Inserts an element into the map — operator substitution for `SetAt`."},{"content":"Remarks","pos":[2888,2895]},{"content":"Once you have inserted a <ph id=\"ph1\">`CString`- `CObject*`</ph> pair (element) into the map, you can efficiently retrieve or delete the pair using a string or a <ph id=\"ph2\">`CString`</ph> value as a key.","pos":[2899,3068],"source":"Once you have inserted a `CString`- `CObject*` pair (element) into the map, you can efficiently retrieve or delete the pair using a string or a `CString` value as a key."},{"content":"You can also iterate over all the elements in the map.","pos":[3069,3123]},{"content":"A variable of type <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> is used for alternate entry access in all map variations.","pos":[3130,3219],"source":"A variable of type **POSITION** is used for alternate entry access in all map variations."},{"content":"You can use a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> to \"remember\" an entry and to iterate through the map.","pos":[3220,3301],"source":" You can use a **POSITION** to \"remember\" an entry and to iterate through the map."},{"content":"You might think that this iteration is sequential by key value; it is not.","pos":[3302,3376]},{"content":"The sequence of retrieved elements is indeterminate.","pos":[3377,3429]},{"content":"incorporates the <ph id=\"ph1\">`IMPLEMENT_SERIAL`</ph> macro to support serialization and dumping of its elements.","pos":[3453,3548],"source":" incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements."},{"content":"Each element is serialized in turn if a map is stored to an archive, either with the overloaded insertion ( <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&lt;&lt;</ph><ept id=\"p1\">**</ept>) operator or with the <ph id=\"ph2\">`Serialize`</ph> member function.","pos":[3549,3714],"source":" Each element is serialized in turn if a map is stored to an archive, either with the overloaded insertion ( **<<**) operator or with the `Serialize` member function."},{"pos":[3721,3898],"content":"If you need a diagnostic dump of the individual elements in the map (the <ph id=\"ph1\">`CString`</ph> value and the <ph id=\"ph2\">`CObject`</ph> contents), you must set the depth of the dump context to 1 or greater.","source":"If you need a diagnostic dump of the individual elements in the map (the `CString` value and the `CObject` contents), you must set the depth of the dump context to 1 or greater."},{"content":"When a <ph id=\"ph1\">`CMapStringToOb`</ph> object is deleted, or when its elements are removed, the <ph id=\"ph2\">`CString`</ph> objects and the <ph id=\"ph3\">`CObject`</ph> pointers are removed.","pos":[3905,4043],"source":"When a `CMapStringToOb` object is deleted, or when its elements are removed, the `CString` objects and the `CObject` pointers are removed."},{"content":"The objects referenced by the <ph id=\"ph1\">`CObject`</ph> pointers are not destroyed.","pos":[4044,4111],"source":" The objects referenced by the `CObject` pointers are not destroyed."},{"content":"Map class derivation is similar to list derivation.","pos":[4118,4169]},{"content":"See the article <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept> for an illustration of the derivation of a special-purpose list class.","pos":[4170,4296],"source":" See the article [Collections](../../mfc/collections.md) for an illustration of the derivation of a special-purpose list class."},{"content":"Inheritance Hierarchy","pos":[4305,4326]},{"content":"CObject","pos":[4331,4338]},{"content":"Requirements","pos":[4409,4421]},{"pos":[4425,4446],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcoll.h","source":"**Header:** afxcoll.h"},{"pos":[4503,4533],"content":"CMapStringToOb::CMapStringToOb"},{"pos":[4537,4586],"content":"Constructs an empty <ph id=\"ph1\">`CString`</ph>-to- <ph id=\"ph2\">`CObject*`</ph> map.","source":"Constructs an empty `CString`-to- `CObject*` map."},{"content":"Parameters","pos":[4652,4662]},{"content":"Specifies the memory-allocation granularity for extending the map.","pos":[4682,4748]},{"content":"Remarks","pos":[4758,4765]},{"pos":[4769,4840],"content":"As the map grows, memory is allocated in units of <ph id=\"ph1\">`nBlockSize`</ph> entries.","source":"As the map grows, memory is allocated in units of `nBlockSize` entries."},{"pos":[4847,4952],"content":"The following table shows other member functions that are similar to <bpt id=\"p1\">**</bpt>CMapStringToOb:: CMapStringToOb<ept id=\"p1\">**</ept>.","source":"The following table shows other member functions that are similar to **CMapStringToOb:: CMapStringToOb**."},{"content":"Class","pos":[4959,4964]},{"content":"Member Function","pos":[4965,4980]},{"content":"CMapPtrToPtr","pos":[5024,5036]},{"pos":[5081,5131],"content":"<bpt id=\"p1\">**</bpt>CMapPtrToPtr( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nBlockSize`</ph> <bpt id=\"p2\">**</bpt>= 10 );<ept id=\"p2\">**</ept>","source":"**CMapPtrToPtr( INT_PTR** `nBlockSize` **= 10 );**"},{"content":"CMapPtrToWord","pos":[5137,5150]},{"pos":[5196,5247],"content":"<bpt id=\"p1\">**</bpt>CMapPtrToWord( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nBlockSize`</ph> <bpt id=\"p2\">**</bpt>= 10 );<ept id=\"p2\">**</ept>","source":"**CMapPtrToWord( INT_PTR** `nBlockSize` **= 10 );**"},{"content":"CMapStringToPtr","pos":[5253,5268]},{"pos":[5316,5369],"content":"<bpt id=\"p1\">**</bpt>CMapStringToPtr( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nBlockSize`</ph> <bpt id=\"p2\">**</bpt>= 10 );<ept id=\"p2\">**</ept>","source":"**CMapStringToPtr( INT_PTR** `nBlockSize` **= 10 );**"},{"content":"CMapStringToString","pos":[5375,5393]},{"pos":[5444,5500],"content":"<bpt id=\"p1\">**</bpt>CMapStringToString( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nBlockSize`</ph> <bpt id=\"p2\">**</bpt>= 10 );<ept id=\"p2\">**</ept>","source":"**CMapStringToString( INT_PTR** `nBlockSize` **= 10 );**"},{"content":"CMapWordToOb","pos":[5506,5518]},{"pos":[5563,5613],"content":"<bpt id=\"p1\">**</bpt>CMapWordToOb( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nBlockSize`</ph> <bpt id=\"p2\">**</bpt>= 10 );<ept id=\"p2\">**</ept>","source":"**CMapWordToOb( INT_PTR** `nBlockSize` **= 10 );**"},{"content":"CMapWordToPtr","pos":[5619,5632]},{"pos":[5678,5728],"content":"<bpt id=\"p1\">**</bpt>MapWordToPtr( INT_PTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`nBlockSize`</ph> <bpt id=\"p2\">**</bpt>= 10 );<ept id=\"p2\">**</ept>","source":"**MapWordToPtr( INT_PTR** `nBlockSize` **= 10 );**"},{"content":"Example","pos":[5739,5746]},{"pos":[5761,5782],"content":"NVC_MFCCollections#63"},{"pos":[5845,5989],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[6040,6064],"content":"CMapStringToOb::GetCount"},{"content":"Determines how many elements are in the map.","pos":[6068,6112]},{"content":"Return Value","pos":[6166,6178]},{"content":"The number of elements in this map.","pos":[6182,6217]},{"content":"Remarks","pos":[6227,6234]},{"pos":[6238,6334],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CMapStringToOb::GetCount`</ph>.","source":"The following table shows other member functions that are similar to `CMapStringToOb::GetCount`."},{"content":"Class","pos":[6341,6346]},{"content":"Member Function","pos":[6347,6362]},{"content":"CMapPtrToPtr","pos":[6406,6418]},{"content":"INT_PTR GetCount( ) const;","pos":[6465,6491]},{"content":"CMapPtrToWord","pos":[6499,6512]},{"content":"INT_PTR GetCount( ) const;","pos":[6560,6586]},{"content":"CMapStringToPtr","pos":[6594,6609]},{"content":"INT_PTR GetCount( ) const;","pos":[6659,6685]},{"content":"CMapStringToString","pos":[6693,6711]},{"content":"INT_PTR GetCount( ) const;","pos":[6764,6790]},{"content":"CMapWordToOb","pos":[6798,6810]},{"content":"INT_PTR GetCount( ) const;","pos":[6857,6883]},{"content":"CMapWordToPtr","pos":[6891,6904]},{"content":"INT_PTR GetCount( ) const;","pos":[6952,6978]},{"content":"Example","pos":[6991,6998]},{"pos":[7002,7146],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[7164,7185],"content":"NVC_MFCCollections#64"},{"pos":[7300,7332],"content":"CMapStringToOb::GetHashTableSize"},{"content":"Determines the current number of elements in the hash table.","pos":[7336,7396]},{"content":"Return Value","pos":[7455,7467]},{"content":"Returns the number of elements in the hash table.","pos":[7471,7520]},{"content":"Remarks","pos":[7530,7537]},{"pos":[7541,7645],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CMapStringToOb::GetHashTableSize`</ph>.","source":"The following table shows other member functions that are similar to `CMapStringToOb::GetHashTableSize`."},{"content":"Class","pos":[7652,7657]},{"content":"Member Function","pos":[7658,7673]},{"content":"CMapPtrToPtr","pos":[7717,7729]},{"content":"UINT GetHashTableSize( ) const;","pos":[7776,7807]},{"content":"CMapPtrToWord","pos":[7815,7828]},{"content":"UINT GetHashTableSize( ) const;","pos":[7876,7907]},{"content":"CMapStringToPtr","pos":[7915,7930]},{"content":"UINT GetHashTableSize( ) const;","pos":[7980,8011]},{"content":"CMapStringToString","pos":[8019,8037]},{"content":"UINT GetHashTableSize( ) const;","pos":[8090,8121]},{"content":"CMapWordToOb","pos":[8129,8141]},{"content":"UINT GetHashTableSize( ) const;","pos":[8188,8219]},{"content":"CMapWordToPtr","pos":[8227,8240]},{"content":"UINT GetHashTableSize( ) const;","pos":[8288,8319]},{"pos":[8377,8405],"content":"CMapStringToOb::GetNextAssoc"},{"pos":[8409,8524],"content":"Retrieves the map element at <bpt id=\"p1\">*</bpt>rNextPosition<ept id=\"p1\">*</ept>, then updates <bpt id=\"p2\">*</bpt>rNextPosition<ept id=\"p2\">*</ept> to refer to the next element in the map.","source":"Retrieves the map element at *rNextPosition*, then updates *rNextPosition* to refer to the next element in the map."},{"content":"Parameters","pos":[8652,8662]},{"content":"rNextPosition","pos":[8667,8680]},{"content":"Specifies a reference to a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value returned by a previous <bpt id=\"p2\">**</bpt>GetNextAssoc<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>GetStartPosition<ept id=\"p3\">**</ept> call.","pos":[8685,8800],"source":" Specifies a reference to a **POSITION** value returned by a previous **GetNextAssoc** or **GetStartPosition** call."},{"content":"rKey","pos":[8808,8812]},{"content":"Specifies the returned key of the retrieved element (a string).","pos":[8817,8880]},{"content":"rValue","pos":[8888,8894]},{"content":"Specifies the returned value of the retrieved element (a <bpt id=\"p1\">**</bpt>CObject<ept id=\"p1\">**</ept> pointer).","pos":[8899,8977],"source":" Specifies the returned value of the retrieved element (a **CObject** pointer)."},{"content":"See Remarks for more about this parameter.","pos":[8978,9020]},{"content":"Remarks","pos":[9030,9037]},{"content":"This function is most useful for iterating through all the elements in the map.","pos":[9041,9120]},{"content":"Note that the position sequence is not necessarily the same as the key value sequence.","pos":[9121,9207]},{"pos":[9214,9320],"content":"If the retrieved element is the last in the map, then the new value of <bpt id=\"p1\">*</bpt>rNextPosition<ept id=\"p1\">*</ept> is set to <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","source":"If the retrieved element is the last in the map, then the new value of *rNextPosition* is set to **NULL**."},{"pos":[9327,9478],"content":"For the <bpt id=\"p1\">*</bpt>rValue<ept id=\"p1\">*</ept> parameter, be sure to cast your object type to <bpt id=\"p2\">**</bpt>CObject<ph id=\"ph1\">\\*&amp;</ph><ept id=\"p2\">**</ept>, which is what the compiler requires, as shown in the following example:","source":"For the *rValue* parameter, be sure to cast your object type to **CObject\\*&**, which is what the compiler requires, as shown in the following example:"},{"pos":[9496,9517],"content":"NVC_MFCCollections#65"},{"pos":[9580,9645],"content":"This is not true of <bpt id=\"p1\">**</bpt>GetNextAssoc<ept id=\"p1\">**</ept> for maps based on templates.","source":"This is not true of **GetNextAssoc** for maps based on templates."},{"pos":[9652,9754],"content":"The following table shows other member functions that are similar to <bpt id=\"p1\">**</bpt>CMapStringToOb::GetNextAssoc<ept id=\"p1\">**</ept>.","source":"The following table shows other member functions that are similar to **CMapStringToOb::GetNextAssoc**."},{"content":"Class","pos":[9761,9766]},{"content":"Member Function","pos":[9767,9782]},{"content":"CMapPtrToPtr","pos":[9826,9838]},{"pos":[9883,9988],"content":"<bpt id=\"p1\">**</bpt>void GetNextAssoc( POSITION&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>rNextPosition<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>, void<ph id=\"ph1\">\\*&amp;</ph><ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>rKey<ept id=\"p4\">*</ept> <bpt id=\"p5\">**</bpt>, void<ph id=\"ph2\">\\*&amp;</ph><ept id=\"p5\">**</ept> <bpt id=\"p6\">*</bpt>rValue<ept id=\"p6\">*</ept> <bpt id=\"p7\">**</bpt>) const;<ept id=\"p7\">**</ept>","source":"**void GetNextAssoc( POSITION&** *rNextPosition* **, void\\*&** *rKey* **, void\\*&** *rValue* **) const;**"},{"content":"CMapPtrToWord","pos":[9994,10007]},{"pos":[10053,10156],"content":"<bpt id=\"p1\">**</bpt>void GetNextAssoc( POSITION&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>rNextPosition<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>, void<ph id=\"ph1\">\\*&amp;</ph><ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>rKey<ept id=\"p4\">*</ept> <bpt id=\"p5\">**</bpt>, WORD&amp;<ept id=\"p5\">**</ept> <bpt id=\"p6\">*</bpt>rValue<ept id=\"p6\">*</ept> <bpt id=\"p7\">**</bpt>) const;<ept id=\"p7\">**</ept>","source":"**void GetNextAssoc( POSITION&** *rNextPosition* **, void\\*&** *rKey* **, WORD&** *rValue* **) const;**"},{"content":"CMapStringToPtr","pos":[10162,10177]},{"pos":[10225,10331],"content":"<bpt id=\"p1\">**</bpt>void GetNextAssoc( POSITION&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>rNextPosition<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>, CString&amp;<ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>rKey<ept id=\"p4\">*</ept> <bpt id=\"p5\">**</bpt>, void<ph id=\"ph1\">\\*&amp;</ph><ept id=\"p5\">**</ept> <bpt id=\"p6\">*</bpt>rValue<ept id=\"p6\">*</ept> <bpt id=\"p7\">**</bpt>) const;<ept id=\"p7\">**</ept>","source":"**void GetNextAssoc( POSITION&** *rNextPosition* **, CString&** *rKey* **, void\\*&** *rValue* **) const;**"},{"content":"CMapStringToString","pos":[10337,10355]},{"pos":[10406,10513],"content":"<bpt id=\"p1\">**</bpt>void GetNextAssoc( POSITION&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>rNextPosition<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>, CString&amp;<ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>rKey<ept id=\"p4\">*</ept> <bpt id=\"p5\">**</bpt>, CString&amp;<ept id=\"p5\">**</ept> <bpt id=\"p6\">*</bpt>rValue<ept id=\"p6\">*</ept> <bpt id=\"p7\">**</bpt>) const;<ept id=\"p7\">**</ept>","source":"**void GetNextAssoc( POSITION&** *rNextPosition* **, CString&** *rKey* **, CString&** *rValue* **) const;**"},{"content":"CMapWordToOb","pos":[10519,10531]},{"pos":[10576,10682],"content":"<bpt id=\"p1\">**</bpt>void GetNextAssoc( POSITION&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>rNextPosition<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>, WORD&amp;<ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>rKey<ept id=\"p4\">*</ept> <bpt id=\"p5\">**</bpt>, CObject<ph id=\"ph1\">\\*&amp;</ph><ept id=\"p5\">**</ept> <bpt id=\"p6\">*</bpt>rValue<ept id=\"p6\">*</ept> <bpt id=\"p7\">**</bpt>) const;<ept id=\"p7\">**</ept>","source":"**void GetNextAssoc( POSITION&** *rNextPosition* **, WORD&** *rKey* **, CObject\\*&** *rValue* **) const;**"},{"content":"CMapWordToPtr","pos":[10688,10701]},{"pos":[10747,10850],"content":"<bpt id=\"p1\">**</bpt>void GetNextAssoc( POSITION&amp;<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>rNextPosition<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>, WORD&amp;<ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>rKey<ept id=\"p4\">*</ept> <bpt id=\"p5\">**</bpt>, void<ph id=\"ph1\">\\*&amp;</ph><ept id=\"p5\">**</ept> <bpt id=\"p6\">*</bpt>rValue<ept id=\"p6\">*</ept> <bpt id=\"p7\">**</bpt>) const;<ept id=\"p7\">**</ept>","source":"**void GetNextAssoc( POSITION&** *rNextPosition* **, WORD&** *rKey* **, void\\*&** *rValue* **) const;**"},{"content":"Example","pos":[10861,10868]},{"pos":[10872,11016],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[11034,11055],"content":"NVC_MFCCollections#66"},{"content":"The results from this program are as follows:","pos":[11118,11163]},{"pos":[11351,11374],"content":"CMapStringToOb::GetSize"},{"content":"Returns the number of map elements.","pos":[11378,11413]},{"content":"Return Value","pos":[11466,11478]},{"content":"The number of items in the map.","pos":[11482,11513]},{"content":"Remarks","pos":[11523,11530]},{"content":"Call this method to retrieve the number of elements in the map.","pos":[11534,11597]},{"pos":[11604,11699],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CMapStringToOb::GetSize`</ph>.","source":"The following table shows other member functions that are similar to `CMapStringToOb::GetSize`."},{"content":"Class","pos":[11706,11711]},{"content":"Member Function","pos":[11712,11727]},{"content":"CMapPtrToPtr","pos":[11771,11783]},{"content":"INT_PTR GetSize( ) const;","pos":[11830,11855]},{"content":"CMapPtrToWord","pos":[11863,11876]},{"content":"INT_PTR GetSize( ) const;","pos":[11924,11949]},{"content":"CMapStringToPtr","pos":[11957,11972]},{"content":"INT_PTR GetSize( ) const;","pos":[12022,12047]},{"content":"CMapStringToString","pos":[12055,12073]},{"content":"INT_PTR GetSize( ) const;","pos":[12126,12151]},{"content":"CMapWordToOb","pos":[12159,12171]},{"content":"INT_PTR GetSize( ) const;","pos":[12218,12243]},{"content":"CMapWordToPtr","pos":[12251,12264]},{"content":"INT_PTR GetSize( ) const;","pos":[12312,12337]},{"content":"Example","pos":[12350,12357]},{"pos":[12372,12393],"content":"NVC_MFCCollections#67"},{"pos":[12508,12540],"content":"CMapStringToOb::GetStartPosition"},{"pos":[12544,12645],"content":"Starts a map iteration by returning a <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that can be passed to a <ph id=\"ph1\">`GetNextAssoc`</ph> call.","source":"Starts a map iteration by returning a **POSITION** value that can be passed to a `GetNextAssoc` call."},{"content":"Return Value","pos":[12708,12720]},{"pos":[12724,12835],"content":"A <bpt id=\"p1\">**</bpt>POSITION<ept id=\"p1\">**</ept> value that indicates a starting position for iterating the map; or <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept> if the map is empty.","source":"A **POSITION** value that indicates a starting position for iterating the map; or **NULL** if the map is empty."},{"content":"Remarks","pos":[12845,12852]},{"content":"The iteration sequence is not predictable; therefore, the \"first element in the map\" has no special significance.","pos":[12856,12969]},{"pos":[12976,13080],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CMapStringToOb::GetStartPosition`</ph>.","source":"The following table shows other member functions that are similar to `CMapStringToOb::GetStartPosition`."},{"content":"Class","pos":[13087,13092]},{"content":"Member Function","pos":[13093,13108]},{"content":"CMapPtrToPtr","pos":[13152,13164]},{"content":"POSITION GetStartPosition( ) const;","pos":[13211,13246]},{"content":"CMapPtrToWord","pos":[13254,13267]},{"content":"POSITION GetStartPosition( ) const;","pos":[13315,13350]},{"content":"CMapStringToPtr","pos":[13358,13373]},{"content":"POSITION GetStartPosition( ) const;","pos":[13423,13458]},{"content":"CMapStringToString","pos":[13466,13484]},{"content":"POSITION GetStartPosition( ) const;","pos":[13537,13572]},{"content":"CMapWordToOb","pos":[13580,13592]},{"content":"POSITION GetStartPosition( ) const;","pos":[13639,13674]},{"content":"CMapWordToPtr","pos":[13682,13695]},{"content":"POSITION GetStartPosition( ) const;","pos":[13743,13778]},{"content":"Example","pos":[13791,13798]},{"pos":[13802,13884],"content":"See the example for <bpt id=\"p1\">[</bpt>CMapStringToOb::GetNextAssoc<ept id=\"p1\">](#cmapstringtoob__getnextassoc)</ept>.","source":"See the example for [CMapStringToOb::GetNextAssoc](#cmapstringtoob__getnextassoc)."},{"pos":[13934,13957],"content":"CMapStringToOb::HashKey"},{"content":"Calculates the hash value of a specified key.","pos":[13961,14006]},{"content":"Parameters","pos":[14067,14077]},{"content":"The key whose hash value is to be calculated.","pos":[14090,14135]},{"content":"Return Value","pos":[14145,14157]},{"content":"The Key's hash value","pos":[14161,14181]},{"content":"Remarks","pos":[14191,14198]},{"pos":[14202,14297],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CMapStringToOb::HashKey`</ph>.","source":"The following table shows other member functions that are similar to `CMapStringToOb::HashKey`."},{"content":"Class","pos":[14304,14309]},{"content":"Member Function","pos":[14310,14325]},{"content":"CMapPtrToPtr","pos":[14369,14381]},{"pos":[14426,14469],"content":"<bpt id=\"p1\">**</bpt>UINT HashKey( void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`key`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**UINT HashKey( void\\*** `key` **) const;**"},{"content":"CMapPtrToWord","pos":[14475,14488]},{"pos":[14534,14577],"content":"<bpt id=\"p1\">**</bpt>UINT HashKey( void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`key`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**UINT HashKey( void\\*** `key` **) const;**"},{"content":"CMapStringToString","pos":[14583,14601]},{"pos":[14652,14696],"content":"<bpt id=\"p1\">**</bpt>UINT HashKey( LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**UINT HashKey( LPCTSTR** `key` **) const;**"},{"content":"CMapStringToPtr","pos":[14702,14717]},{"pos":[14765,14809],"content":"<bpt id=\"p1\">**</bpt>UINT HashKey( LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**UINT HashKey( LPCTSTR** `key` **) const;**"},{"content":"CMapWordToOb","pos":[14815,14827]},{"pos":[14872,14913],"content":"<bpt id=\"p1\">**</bpt>UINT HashKey( WORD<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**UINT HashKey( WORD** `key` **) const;**"},{"content":"CMapWordToPtr","pos":[14919,14932]},{"pos":[14978,15019],"content":"<bpt id=\"p1\">**</bpt>UINT HashKey( WORD<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>) const;<ept id=\"p2\">**</ept>","source":"**UINT HashKey( WORD** `key` **) const;**"},{"pos":[15076,15105],"content":"CMapStringToOb::InitHashTable"},{"content":"Initializes the hash table.","pos":[15109,15136]},{"content":"Parameters","pos":[15230,15240]},{"content":"Number of entries in the hash table.","pos":[15258,15294]},{"content":"If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, allocates the hash table upon initialization; otherwise the table is allocated when needed.","pos":[15316,15420],"source":" If **TRUE**, allocates the hash table upon initialization; otherwise the table is allocated when needed."},{"content":"Remarks","pos":[15430,15437]},{"content":"For best performance, the hash table size should be a prime number.","pos":[15441,15508]},{"content":"To minimize collisions, the size should be roughly 20 percent larger than the largest anticipated data set.","pos":[15509,15616]},{"pos":[15623,15724],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CMapStringToOb::InitHashTable`</ph>.","source":"The following table shows other member functions that are similar to `CMapStringToOb::InitHashTable`."},{"content":"Class","pos":[15731,15736]},{"content":"Member Function","pos":[15737,15752]},{"content":"CMapPtrToPtr","pos":[15796,15808]},{"pos":[15853,15929],"content":"<bpt id=\"p1\">**</bpt>void InitHashTable( UINT<ept id=\"p1\">**</ept> <ph id=\"ph1\">`hashSize`</ph> <bpt id=\"p2\">**</bpt>, BOOL<ept id=\"p2\">**</ept> <ph id=\"ph2\">`bAllocNow`</ph> <bpt id=\"p3\">**</bpt>= TRUE );<ept id=\"p3\">**</ept>","source":"**void InitHashTable( UINT** `hashSize` **, BOOL** `bAllocNow` **= TRUE );**"},{"content":"CMapPtrToWord","pos":[15935,15948]},{"pos":[15994,16070],"content":"<bpt id=\"p1\">**</bpt>void InitHashTable( UINT<ept id=\"p1\">**</ept> <ph id=\"ph1\">`hashSize`</ph> <bpt id=\"p2\">**</bpt>, BOOL<ept id=\"p2\">**</ept> <ph id=\"ph2\">`bAllocNow`</ph> <bpt id=\"p3\">**</bpt>= TRUE );<ept id=\"p3\">**</ept>","source":"**void InitHashTable( UINT** `hashSize` **, BOOL** `bAllocNow` **= TRUE );**"},{"content":"CMapStringToString","pos":[16076,16094]},{"pos":[16145,16221],"content":"<bpt id=\"p1\">**</bpt>void InitHashTable( UINT<ept id=\"p1\">**</ept> <ph id=\"ph1\">`hashSize`</ph> <bpt id=\"p2\">**</bpt>, BOOL<ept id=\"p2\">**</ept> <ph id=\"ph2\">`bAllocNow`</ph> <bpt id=\"p3\">**</bpt>= TRUE );<ept id=\"p3\">**</ept>","source":"**void InitHashTable( UINT** `hashSize` **, BOOL** `bAllocNow` **= TRUE );**"},{"content":"CMapStringToPtr","pos":[16227,16242]},{"pos":[16290,16366],"content":"<bpt id=\"p1\">**</bpt>void InitHashTable( UINT<ept id=\"p1\">**</ept> <ph id=\"ph1\">`hashSize`</ph> <bpt id=\"p2\">**</bpt>, BOOL<ept id=\"p2\">**</ept> <ph id=\"ph2\">`bAllocNow`</ph> <bpt id=\"p3\">**</bpt>= TRUE );<ept id=\"p3\">**</ept>","source":"**void InitHashTable( UINT** `hashSize` **, BOOL** `bAllocNow` **= TRUE );**"},{"content":"CMapWordToOb","pos":[16372,16384]},{"pos":[16429,16505],"content":"<bpt id=\"p1\">**</bpt>void InitHashTable( UINT<ept id=\"p1\">**</ept> <ph id=\"ph1\">`hashSize`</ph> <bpt id=\"p2\">**</bpt>, BOOL<ept id=\"p2\">**</ept> <ph id=\"ph2\">`bAllocNow`</ph> <bpt id=\"p3\">**</bpt>= TRUE );<ept id=\"p3\">**</ept>","source":"**void InitHashTable( UINT** `hashSize` **, BOOL** `bAllocNow` **= TRUE );**"},{"content":"CMapWordToPtr","pos":[16511,16524]},{"pos":[16570,16646],"content":"<bpt id=\"p1\">**</bpt>void InitHashTable( UINT<ept id=\"p1\">**</ept> <ph id=\"ph1\">`hashSize`</ph> <bpt id=\"p2\">**</bpt>, BOOL<ept id=\"p2\">**</ept> <ph id=\"ph2\">`bAllocNow`</ph> <bpt id=\"p3\">**</bpt>= TRUE );<ept id=\"p3\">**</ept>","source":"**void InitHashTable( UINT** `hashSize` **, BOOL** `bAllocNow` **= TRUE );**"},{"pos":[16697,16720],"content":"CMapStringToOb::IsEmpty"},{"content":"Determines whether the map is empty.","pos":[16724,16760]},{"content":"Return Value","pos":[16810,16822]},{"content":"Nonzero if this map contains no elements; otherwise 0.","pos":[16826,16880]},{"content":"Example","pos":[16890,16897]},{"pos":[16901,16961],"content":"See the example for <bpt id=\"p1\">[</bpt>RemoveAll<ept id=\"p1\">](#cmapstringtoob__removeall)</ept>.","source":"See the example for [RemoveAll](#cmapstringtoob__removeall)."},{"content":"Remarks","pos":[16971,16978]},{"pos":[16982,17080],"content":"The following table shows other member functions that are similar to <bpt id=\"p1\">**</bpt>CMapStringToOb:: IsEmpty<ept id=\"p1\">**</ept>.","source":"The following table shows other member functions that are similar to **CMapStringToOb:: IsEmpty**."},{"content":"Class","pos":[17087,17092]},{"content":"Member Function","pos":[17093,17108]},{"content":"CMapPtrToPtr","pos":[17152,17164]},{"content":"BOOL IsEmpty( ) const;","pos":[17211,17233]},{"content":"CMapPtrToWord","pos":[17241,17254]},{"content":"BOOL IsEmpty( ) const;","pos":[17302,17324]},{"content":"CMapStringToPtr","pos":[17332,17347]},{"content":"BOOL IsEmpty( ) const;","pos":[17397,17419]},{"content":"CMapStringToString","pos":[17427,17445]},{"content":"BOOL IsEmpty( ) const;","pos":[17498,17520]},{"content":"CMapWordToOb","pos":[17528,17540]},{"content":"BOOL IsEmpty( ) const;","pos":[17587,17609]},{"content":"CMapWordToPtr","pos":[17617,17630]},{"content":"BOOL IsEmpty( ) const;","pos":[17678,17700]},{"pos":[17752,17774],"content":"CMapStringToOb::Lookup"},{"pos":[17778,17833],"content":"Returns a <ph id=\"ph1\">`CObject`</ph> pointer based on a <ph id=\"ph2\">`CString`</ph> value.","source":"Returns a `CObject` pointer based on a `CString` value."},{"content":"Parameters","pos":[17922,17932]},{"content":"Specifies the string key that identifies the element to be looked up.","pos":[17945,18014]},{"content":"Specifies the returned value from the looked-up element.","pos":[18033,18089]},{"content":"Return Value","pos":[18099,18111]},{"content":"Nonzero if the element was found; otherwise 0.","pos":[18115,18161]},{"content":"Remarks","pos":[18171,18178]},{"pos":[18191,18299],"content":"uses a hashing algorithm to quickly find the map element with a key that matches exactly ( <ph id=\"ph1\">`CString`</ph> value).","source":" uses a hashing algorithm to quickly find the map element with a key that matches exactly ( `CString` value)."},{"pos":[18306,18400],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CMapStringToOb::LookUp`</ph>.","source":"The following table shows other member functions that are similar to `CMapStringToOb::LookUp`."},{"content":"Class","pos":[18407,18412]},{"content":"Member Function","pos":[18413,18428]},{"content":"CMapPtrToPtr","pos":[18472,18484]},{"pos":[18529,18594],"content":"<bpt id=\"p1\">**</bpt>BOOL Lookup( void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`key`</ph> <bpt id=\"p2\">**</bpt>, void<ph id=\"ph3\">\\*&amp;</ph><ept id=\"p2\">**</ept> <ph id=\"ph4\">`rValue`</ph> <bpt id=\"p3\">**</bpt>) const;<ept id=\"p3\">**</ept>","source":"**BOOL Lookup( void\\*** `key` **, void\\*&** `rValue` **) const;**"},{"content":"CMapPtrToWord","pos":[18600,18613]},{"pos":[18659,18722],"content":"<bpt id=\"p1\">**</bpt>BOOL Lookup( void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`key`</ph> <bpt id=\"p2\">**</bpt>, WORD&amp;<ept id=\"p2\">**</ept> <ph id=\"ph3\">`rValue`</ph> <bpt id=\"p3\">**</bpt>) const;<ept id=\"p3\">**</ept>","source":"**BOOL Lookup( void\\*** `key` **, WORD&** `rValue` **) const;**"},{"content":"CMapStringToPtr","pos":[18728,18743]},{"pos":[18791,18857],"content":"<bpt id=\"p1\">**</bpt>BOOL Lookup( LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>, void<ph id=\"ph2\">\\*&amp;</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`rValue`</ph> <bpt id=\"p3\">**</bpt>) const;<ept id=\"p3\">**</ept>","source":"**BOOL Lookup( LPCTSTR** `key` **, void\\*&** `rValue` **) const;**"},{"content":"CMapStringToString","pos":[18863,18881]},{"pos":[18932,18999],"content":"<bpt id=\"p1\">**</bpt>BOOL Lookup( LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>, CString&amp;<ept id=\"p2\">**</ept> <ph id=\"ph2\">`rValue`</ph> <bpt id=\"p3\">**</bpt>) const;<ept id=\"p3\">**</ept>","source":"**BOOL Lookup( LPCTSTR** `key` **, CString&** `rValue` **) const;**"},{"content":"CMapWordToOb","pos":[19005,19017]},{"pos":[19062,19128],"content":"<bpt id=\"p1\">**</bpt>BOOL Lookup( WORD<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>, CObject<ph id=\"ph2\">\\*&amp;</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`rValue`</ph> <bpt id=\"p3\">**</bpt>) const;<ept id=\"p3\">**</ept>","source":"**BOOL Lookup( WORD** `key` **, CObject\\*&** `rValue` **) const;**"},{"content":"CMapWordToPtr","pos":[19134,19147]},{"pos":[19193,19256],"content":"<bpt id=\"p1\">**</bpt>BOOL Lookup( WORD<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>, void<ph id=\"ph2\">\\*&amp;</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`rValue`</ph> <bpt id=\"p3\">**</bpt>) const;<ept id=\"p3\">**</ept>","source":"**BOOL Lookup( WORD** `key` **, void\\*&** `rValue` **) const;**"},{"content":"Example","pos":[19267,19274]},{"pos":[19278,19422],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[19440,19461],"content":"NVC_MFCCollections#68"},{"pos":[19569,19594],"content":"CMapStringToOb::LookupKey"},{"content":"Returns a reference to the key associated with the specified key value.","pos":[19598,19669]},{"content":"Parameters","pos":[19758,19768]},{"content":"Specifies the string key that identifies the element to be looked up.","pos":[19781,19850]},{"content":"The reference to the associated key.","pos":[19867,19903]},{"content":"Return Value","pos":[19913,19925]},{"content":"Nonzero if the key was found; otherwise 0.","pos":[19929,19971]},{"content":"Remarks","pos":[19981,19988]},{"content":"Using a reference to a key is unsafe if used after the associated element was removed from the map or after the map was destroyed.","pos":[19992,20122]},{"pos":[20129,20229],"content":"The following table shows other member functions that are similar to <bpt id=\"p1\">**</bpt>CMapStringToOb:: LookupKey<ept id=\"p1\">**</ept>.","source":"The following table shows other member functions that are similar to **CMapStringToOb:: LookupKey**."},{"content":"Class","pos":[20236,20241]},{"content":"Member Function","pos":[20242,20257]},{"content":"CMapStringToPtr","pos":[20301,20316]},{"pos":[20364,20432],"content":"<bpt id=\"p1\">**</bpt>BOOL LookupKey( LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>, LPCTSTR&amp;<ept id=\"p2\">**</ept> <ph id=\"ph2\">`rKey`</ph> <bpt id=\"p3\">**</bpt>) const;<ept id=\"p3\">**</ept>","source":"**BOOL LookupKey( LPCTSTR** `key` **, LPCTSTR&** `rKey` **) const;**"},{"content":"CMapStringToString","pos":[20438,20456]},{"pos":[20507,20575],"content":"<bpt id=\"p1\">**</bpt>BOOL LookupKey( LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>, LPCTSTR&amp;<ept id=\"p2\">**</ept> <ph id=\"ph2\">`rKey`</ph> <bpt id=\"p3\">**</bpt>) const;<ept id=\"p3\">**</ept>","source":"**BOOL LookupKey( LPCTSTR** `key` **, LPCTSTR&** `rKey` **) const;**"},{"pos":[20630,20658],"content":"CMapStringToOb::operator [ ]"},{"pos":[20662,20718],"content":"A convenient substitute for the <ph id=\"ph1\">`SetAt`</ph> member function.","source":"A convenient substitute for the `SetAt` member function."},{"content":"Return Value","pos":[20779,20791]},{"pos":[20795,20900],"content":"A reference to a pointer to a <ph id=\"ph1\">`CObject`</ph> object; or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the map is empty or <ph id=\"ph2\">`key`</ph> is out of range.","source":"A reference to a pointer to a `CObject` object; or **NULL** if the map is empty or `key` is out of range."},{"content":"Remarks","pos":[20910,20917]},{"content":"Thus it can be used only on the left side of an assignment statement (an l-value).","pos":[20921,21003]},{"content":"If there is no map element with the specified key, then a new element is created.","pos":[21004,21085]},{"content":"There is no \"right side\" (r-value) equivalent to this operator because there is a possibility that a key may not be found in the map.","pos":[21092,21225]},{"content":"Use the <ph id=\"ph1\">`Lookup`</ph> member function for element retrieval.","pos":[21226,21281],"source":" Use the `Lookup` member function for element retrieval."},{"pos":[21288,21389],"content":"The following table shows other member functions that are similar to <bpt id=\"p1\">**</bpt>CMapStringToOb::operator []<ept id=\"p1\">**</ept>.","source":"The following table shows other member functions that are similar to **CMapStringToOb::operator []**."},{"content":"Class","pos":[21396,21401]},{"content":"Member Function","pos":[21402,21417]},{"content":"CMapPtrToPtr","pos":[21461,21473]},{"pos":[21518,21561],"content":"<bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph>&amp; operator[](void<ph id=\"ph2\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph3\">`key`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph4\">\\)</ph>;<ept id=\"p2\">**</ept>","source":"**void\\*& operator[](void\\*** `key` **\\);**"},{"content":"CMapPtrToWord","pos":[21567,21580]},{"pos":[21626,21667],"content":"<bpt id=\"p1\">**</bpt>WORD&amp; operator[](void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`key`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph3\">\\)</ph>;<ept id=\"p2\">**</ept>","source":"**WORD& operator[](void\\*** `key` **\\);**"},{"content":"CMapStringToPtr","pos":[21673,21688]},{"pos":[21736,21780],"content":"<bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph>&amp; operator[](lpctstr<ept id=\"p1\">**</ept> <ph id=\"ph2\">`key`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph3\">\\)</ph>;<ept id=\"p2\">**</ept>","source":"**void\\*& operator[](lpctstr** `key` **\\);**"},{"content":"CMapStringToString","pos":[21786,21804]},{"pos":[21855,21900],"content":"<bpt id=\"p1\">**</bpt>CString&amp; operator[](lpctstr<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\)</ph>;<ept id=\"p2\">**</ept>","source":"**CString& operator[](lpctstr** `key` **\\);**"},{"content":"CMapWordToOb","pos":[21906,21918]},{"pos":[21963,22007],"content":"<bpt id=\"p1\">**</bpt>CObject<ph id=\"ph1\">\\*</ph>&amp; operator[](word<ept id=\"p1\">**</ept> <ph id=\"ph2\">`key`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph3\">\\)</ph>;<ept id=\"p2\">**</ept>","source":"**CObject\\*& operator[](word** `key` **\\);**"},{"content":"CMapWordToPtr","pos":[22013,22026]},{"pos":[22072,22113],"content":"<bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph>&amp; operator[](word<ept id=\"p1\">**</ept> <ph id=\"ph2\">`key`</ph> <bpt id=\"p2\">**</bpt><ph id=\"ph3\">\\)</ph>;<ept id=\"p2\">**</ept>","source":"**void\\*& operator[](word** `key` **\\);**"},{"content":"Example","pos":[22124,22131]},{"pos":[22135,22279],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[22297,22318],"content":"NVC_MFCCollections#72"},{"content":"The results from this program are as follows:","pos":[22381,22426]},{"pos":[22612,22637],"content":"CMapStringToOb::RemoveAll"},{"pos":[22641,22719],"content":"Removes all the elements from this map and destroys the <ph id=\"ph1\">`CString`</ph> key objects.","source":"Removes all the elements from this map and destroys the `CString` key objects."},{"content":"Remarks","pos":[22762,22769]},{"content":"The <ph id=\"ph1\">`CObject`</ph> objects referenced by each key are not destroyed.","pos":[22773,22836],"source":"The `CObject` objects referenced by each key are not destroyed."},{"content":"The <ph id=\"ph1\">`RemoveAll`</ph> function can cause memory leaks if you do not ensure that the referenced <ph id=\"ph2\">`CObject`</ph> objects are destroyed.","pos":[22837,22958],"source":" The `RemoveAll` function can cause memory leaks if you do not ensure that the referenced `CObject` objects are destroyed."},{"content":"The function works correctly if the map is already empty.","pos":[22965,23022]},{"pos":[23029,23126],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CMapStringToOb::RemoveAll`</ph>.","source":"The following table shows other member functions that are similar to `CMapStringToOb::RemoveAll`."},{"content":"Class","pos":[23133,23138]},{"content":"Member Function","pos":[23139,23154]},{"content":"CMapPtrToPtr","pos":[23198,23210]},{"content":"void RemoveAll( );","pos":[23257,23275]},{"content":"CMapPtrToWord","pos":[23283,23296]},{"content":"void RemoveAll( );","pos":[23344,23362]},{"content":"CMapStringToPtr","pos":[23370,23385]},{"content":"void RemoveAll( );","pos":[23435,23453]},{"content":"CMapStringToString","pos":[23461,23479]},{"content":"void RemoveAll( );","pos":[23532,23550]},{"content":"CMapWordToOb","pos":[23558,23570]},{"content":"void RemoveAll( );","pos":[23617,23635]},{"content":"CMapWordToPtr","pos":[23643,23656]},{"content":"void RemoveAll( );","pos":[23704,23722]},{"content":"Example","pos":[23735,23742]},{"pos":[23746,23890],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[23908,23929],"content":"NVC_MFCCollections#69"},{"pos":[24037,24062],"content":"CMapStringToOb::RemoveKey"},{"content":"Looks up the map entry corresponding to the supplied key; then, if the key is found, removes the entry.","pos":[24066,24169]},{"content":"Parameters","pos":[24223,24233]},{"content":"Specifies the string used for map lookup.","pos":[24246,24287]},{"content":"Return Value","pos":[24297,24309]},{"content":"Nonzero if the entry was found and successfully removed; otherwise 0.","pos":[24313,24382]},{"content":"Remarks","pos":[24392,24399]},{"pos":[24403,24480],"content":"This can cause memory leaks if the <ph id=\"ph1\">`CObject`</ph> object is not deleted elsewhere.","source":"This can cause memory leaks if the `CObject` object is not deleted elsewhere."},{"pos":[24487,24584],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CMapStringToOb::RemoveKey`</ph>.","source":"The following table shows other member functions that are similar to `CMapStringToOb::RemoveKey`."},{"content":"Class","pos":[24591,24596]},{"content":"Member Function","pos":[24597,24612]},{"content":"CMapPtrToPtr","pos":[24656,24668]},{"pos":[24713,24752],"content":"<bpt id=\"p1\">**</bpt>BOOL RemoveKey( void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`key`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**BOOL RemoveKey( void\\*** `key` **);**"},{"content":"CMapPtrToWord","pos":[24758,24771]},{"pos":[24817,24856],"content":"<bpt id=\"p1\">**</bpt>BOOL RemoveKey( void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`key`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**BOOL RemoveKey( void\\*** `key` **);**"},{"content":"CMapStringToPtr","pos":[24862,24877]},{"pos":[24925,24965],"content":"<bpt id=\"p1\">**</bpt>BOOL RemoveKey( LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**BOOL RemoveKey( LPCTSTR** `key` **);**"},{"content":"CMapStringToString","pos":[24971,24989]},{"pos":[25040,25080],"content":"<bpt id=\"p1\">**</bpt>BOOL RemoveKey( LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**BOOL RemoveKey( LPCTSTR** `key` **);**"},{"content":"CMapWordToOb","pos":[25086,25098]},{"pos":[25143,25180],"content":"<bpt id=\"p1\">**</bpt>BOOL RemoveKey( WORD<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**BOOL RemoveKey( WORD** `key` **);**"},{"content":"CMapWordToPtr","pos":[25186,25199]},{"pos":[25245,25282],"content":"<bpt id=\"p1\">**</bpt>BOOL RemoveKey( WORD<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>);<ept id=\"p2\">**</ept>","source":"**BOOL RemoveKey( WORD** `key` **);**"},{"content":"Example","pos":[25293,25300]},{"pos":[25304,25448],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[25466,25487],"content":"NVC_MFCCollections#70"},{"content":"The results from this program are as follows:","pos":[25550,25595]},{"pos":[25813,25834],"content":"CMapStringToOb::SetAt"},{"content":"The primary means to insert an element in a map.","pos":[25838,25886]},{"content":"Parameters","pos":[25966,25976]},{"content":"Specifies the string that is the key of the new element.","pos":[25989,26045]},{"content":"Specifies the <ph id=\"ph1\">`CObject`</ph> pointer that is the value of the new element.","pos":[26066,26135],"source":" Specifies the `CObject` pointer that is the value of the new element."},{"content":"Remarks","pos":[26145,26152]},{"content":"First, the key is looked up.","pos":[26156,26184]},{"content":"If the key is found, then the corresponding value is changed; otherwise a new key-value element is created.","pos":[26185,26292]},{"pos":[26299,26392],"content":"The following table shows other member functions that are similar to <ph id=\"ph1\">`CMapStringToOb::SetAt`</ph>.","source":"The following table shows other member functions that are similar to `CMapStringToOb::SetAt`."},{"content":"Class","pos":[26399,26404]},{"content":"Member Function","pos":[26405,26420]},{"content":"CMapPtrToPtr","pos":[26464,26476]},{"pos":[26521,26580],"content":"<bpt id=\"p1\">**</bpt>void SetAt( void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`key`</ph> <bpt id=\"p2\">**</bpt>, void<ph id=\"ph3\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph4\">`newValue`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( void\\*** `key` **, void\\*** `newValue` **);**"},{"content":"CMapPtrToWord","pos":[26586,26599]},{"pos":[26645,26702],"content":"<bpt id=\"p1\">**</bpt>void SetAt( void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept> <ph id=\"ph2\">`key`</ph> <bpt id=\"p2\">**</bpt>, WORD<ept id=\"p2\">**</ept> <ph id=\"ph3\">`newValue`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( void\\*** `key` **, WORD** `newValue` **);**"},{"content":"CMapStringToPtr","pos":[26708,26723]},{"pos":[26771,26831],"content":"<bpt id=\"p1\">**</bpt>void SetAt( LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>, void<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`newValue`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( LPCTSTR** `key` **, void\\*** `newValue` **);**"},{"content":"CMapStringToString","pos":[26837,26855]},{"pos":[26906,26967],"content":"<bpt id=\"p1\">**</bpt>void SetAt( LPCTSTR<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>, LPCTSTR<ept id=\"p2\">**</ept> <ph id=\"ph2\">`newValue`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( LPCTSTR** `key` **, LPCTSTR** `newValue` **);**"},{"content":"CMapWordToOb","pos":[26973,26985]},{"pos":[27030,27090],"content":"<bpt id=\"p1\">**</bpt>void SetAt( WORD<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>, CObject<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`newValue`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( WORD** `key` **, CObject\\*** `newValue` **);**"},{"content":"CMapWordToPtr","pos":[27096,27109]},{"pos":[27155,27212],"content":"<bpt id=\"p1\">**</bpt>void SetAt( WORD<ept id=\"p1\">**</ept> <ph id=\"ph1\">`key`</ph> <bpt id=\"p2\">**</bpt>, void<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept> <ph id=\"ph3\">`newValue`</ph> <bpt id=\"p3\">**</bpt>);<ept id=\"p3\">**</ept>","source":"**void SetAt( WORD** `key` **, void\\*** `newValue` **);**"},{"content":"Example","pos":[27223,27230]},{"pos":[27234,27378],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all collection examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples."},{"pos":[27396,27417],"content":"NVC_MFCCollections#71"},{"content":"The results from this program are as follows:","pos":[27481,27526]},{"content":"See Also","pos":[27808,27816]},{"content":"CObject Class","pos":[27821,27834]},{"content":"Hierarchy Chart","pos":[27879,27894]},{"content":"CMapPtrToPtr Class","pos":[27931,27949]},{"content":"CMapPtrToWord Class","pos":[27999,28018]},{"content":"CMapStringToPtr Class","pos":[28069,28090]},{"content":"CMapStringToString Class","pos":[28143,28167]},{"content":"CMapWordToOb Class","pos":[28223,28241]},{"content":"CMapWordToPtr Class","pos":[28291,28310]}],"content":"---\ntitle: \"CMapStringToOb Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMapStringToOb\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"collection classes, string mapping\"\n  - \"CMapStringToOb class\"\n  - \"strings [C++], class for mapping\"\nms.assetid: 09653980-b885-4f3a-8594-0aeb7f94c601\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMapStringToOb Class\nA dictionary collection class that maps unique `CString` objects to `CObject` pointers.  \n  \n## Syntax  \n  \n```  \nclass CMapStringToOb : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::CMapStringToOb](#cmapstringtoob__cmapstringtoob)|Constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::GetCount](#cmapstringtoob__getcount)|Returns the number of elements in this map.|  \n|[CMapStringToOb::GetHashTableSize](#cmapstringtoob__gethashtablesize)|Determines the current number of elements in the hash table.|  \n|[CMapStringToOb::GetNextAssoc](#cmapstringtoob__getnextassoc)|Gets the next element for iterating.|  \n|[CMapStringToOb::GetSize](#cmapstringtoob__getsize)|Returns the number of elements in this map.|  \n|[CMapStringToOb::GetStartPosition](#cmapstringtoob__getstartposition)|Returns the position of the first element.|  \n|[CMapStringToOb::HashKey](#cmapstringtoob__hashkey)|Calculates the hash value of a specified key.|  \n|[CMapStringToOb::InitHashTable](#cmapstringtoob__inithashtable)|Initializes the hash table.|  \n|[CMapStringToOb::IsEmpty](#cmapstringtoob__isempty)|Tests for the empty-map condition (no elements).|  \n|[CMapStringToOb::Lookup](#cmapstringtoob__lookup)|Looks up a void pointer based on the void pointer key. The pointer value, not the entity it points to, is used for the key comparison.|  \n|[CMapStringToOb::LookupKey](#cmapstringtoob__lookupkey)|Returns a reference to the key associated with the specified key value.|  \n|[CMapStringToOb::RemoveAll](#cmapstringtoob__removeall)|Removes all the elements from this map.|  \n|[CMapStringToOb::RemoveKey](#cmapstringtoob__removekey)|Removes an element specified by a key.|  \n|[CMapStringToOb::SetAt](#cmapstringtoob__setat)|Inserts an element into the map; replaces an existing element if a matching key is found.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMapStringToOb::operator [ ]](#cmapstringtoob__operator_at)|Inserts an element into the map — operator substitution for `SetAt`.|  \n  \n## Remarks  \n Once you have inserted a `CString`- `CObject*` pair (element) into the map, you can efficiently retrieve or delete the pair using a string or a `CString` value as a key. You can also iterate over all the elements in the map.  \n  \n A variable of type **POSITION** is used for alternate entry access in all map variations. You can use a **POSITION** to \"remember\" an entry and to iterate through the map. You might think that this iteration is sequential by key value; it is not. The sequence of retrieved elements is indeterminate.  \n  \n `CMapStringToOb` incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements. Each element is serialized in turn if a map is stored to an archive, either with the overloaded insertion ( **<<**) operator or with the `Serialize` member function.  \n  \n If you need a diagnostic dump of the individual elements in the map (the `CString` value and the `CObject` contents), you must set the depth of the dump context to 1 or greater.  \n  \n When a `CMapStringToOb` object is deleted, or when its elements are removed, the `CString` objects and the `CObject` pointers are removed. The objects referenced by the `CObject` pointers are not destroyed.  \n  \n Map class derivation is similar to list derivation. See the article [Collections](../../mfc/collections.md) for an illustration of the derivation of a special-purpose list class.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CMapStringToOb`  \n  \n## Requirements  \n **Header:** afxcoll.h  \n  \n##  <a name=\"cmapstringtoob__cmapstringtoob\"></a>  CMapStringToOb::CMapStringToOb  \n Constructs an empty `CString`-to- `CObject*` map.  \n  \n```  \nCMapStringToOb(INT_PTR nBlockSize = 10);\n```  \n  \n### Parameters  \n `nBlockSize`  \n Specifies the memory-allocation granularity for extending the map.  \n  \n### Remarks  \n As the map grows, memory is allocated in units of `nBlockSize` entries.  \n  \n The following table shows other member functions that are similar to **CMapStringToOb:: CMapStringToOb**.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**CMapPtrToPtr( INT_PTR** `nBlockSize` **= 10 );**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**CMapPtrToWord( INT_PTR** `nBlockSize` **= 10 );**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**CMapStringToPtr( INT_PTR** `nBlockSize` **= 10 );**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**CMapStringToString( INT_PTR** `nBlockSize` **= 10 );**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**CMapWordToOb( INT_PTR** `nBlockSize` **= 10 );**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**MapWordToPtr( INT_PTR** `nBlockSize` **= 10 );**|  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#63](../../mfc/codesnippet/cpp/cmapstringtoob-class_1.cpp)]  \n  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n##  <a name=\"cmapstringtoob__getcount\"></a>  CMapStringToOb::GetCount  \n Determines how many elements are in the map.  \n  \n```  \nINT_PTR GetCount() const;\n\n \n```  \n  \n### Return Value  \n The number of elements in this map.  \n  \n### Remarks  \n The following table shows other member functions that are similar to `CMapStringToOb::GetCount`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**INT_PTR GetCount( ) const;**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**INT_PTR GetCount( ) const;**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**INT_PTR GetCount( ) const;**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**INT_PTR GetCount( ) const;**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**INT_PTR GetCount( ) const;**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**INT_PTR GetCount( ) const;**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#64](../../mfc/codesnippet/cpp/cmapstringtoob-class_2.cpp)]  \n  \n##  <a name=\"cmapstringtoob__gethashtablesize\"></a>  CMapStringToOb::GetHashTableSize  \n Determines the current number of elements in the hash table.  \n  \n```  \nUINT GetHashTableSize() const;\n\n \n```  \n  \n### Return Value  \n Returns the number of elements in the hash table.  \n  \n### Remarks  \n The following table shows other member functions that are similar to `CMapStringToOb::GetHashTableSize`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**UINT GetHashTableSize( ) const;**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**UINT GetHashTableSize( ) const;**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**UINT GetHashTableSize( ) const;**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**UINT GetHashTableSize( ) const;**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**UINT GetHashTableSize( ) const;**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**UINT GetHashTableSize( ) const;**|  \n  \n##  <a name=\"cmapstringtoob__getnextassoc\"></a>  CMapStringToOb::GetNextAssoc  \n Retrieves the map element at *rNextPosition*, then updates *rNextPosition* to refer to the next element in the map.  \n  \n```  \nvoid GetNextAssoc(\n    POSITION& rNextPosition,  \n    CString& rKey,  \n    CObject*& rValue) const;\n\n \n```  \n  \n### Parameters  \n *rNextPosition*  \n Specifies a reference to a **POSITION** value returned by a previous **GetNextAssoc** or **GetStartPosition** call.  \n  \n *rKey*  \n Specifies the returned key of the retrieved element (a string).  \n  \n *rValue*  \n Specifies the returned value of the retrieved element (a **CObject** pointer). See Remarks for more about this parameter.  \n  \n### Remarks  \n This function is most useful for iterating through all the elements in the map. Note that the position sequence is not necessarily the same as the key value sequence.  \n  \n If the retrieved element is the last in the map, then the new value of *rNextPosition* is set to **NULL**.  \n  \n For the *rValue* parameter, be sure to cast your object type to **CObject\\*&**, which is what the compiler requires, as shown in the following example:  \n  \n [!code-cpp[NVC_MFCCollections#65](../../mfc/codesnippet/cpp/cmapstringtoob-class_3.cpp)]  \n  \n This is not true of **GetNextAssoc** for maps based on templates.  \n  \n The following table shows other member functions that are similar to **CMapStringToOb::GetNextAssoc**.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**void GetNextAssoc( POSITION&** *rNextPosition* **, void\\*&** *rKey* **, void\\*&** *rValue* **) const;**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**void GetNextAssoc( POSITION&** *rNextPosition* **, void\\*&** *rKey* **, WORD&** *rValue* **) const;**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**void GetNextAssoc( POSITION&** *rNextPosition* **, CString&** *rKey* **, void\\*&** *rValue* **) const;**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**void GetNextAssoc( POSITION&** *rNextPosition* **, CString&** *rKey* **, CString&** *rValue* **) const;**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**void GetNextAssoc( POSITION&** *rNextPosition* **, WORD&** *rKey* **, CObject\\*&** *rValue* **) const;**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**void GetNextAssoc( POSITION&** *rNextPosition* **, WORD&** *rKey* **, void\\*&** *rValue* **) const;**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#66](../../mfc/codesnippet/cpp/cmapstringtoob-class_4.cpp)]  \n  \n The results from this program are as follows:  \n  \n `Lisa : a CAge at $4724 11`  \n  \n `Marge : a CAge at $47A8 35`  \n  \n `Homer : a CAge at $4766 36`  \n  \n `Bart : a CAge at $45D4 13`  \n  \n##  <a name=\"cmapstringtoob__getsize\"></a>  CMapStringToOb::GetSize  \n Returns the number of map elements.  \n  \n```  \nINT_PTR GetSize() const;\n\n \n```  \n  \n### Return Value  \n The number of items in the map.  \n  \n### Remarks  \n Call this method to retrieve the number of elements in the map.  \n  \n The following table shows other member functions that are similar to `CMapStringToOb::GetSize`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**INT_PTR GetSize( ) const;**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**INT_PTR GetSize( ) const;**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**INT_PTR GetSize( ) const;**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**INT_PTR GetSize( ) const;**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**INT_PTR GetSize( ) const;**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**INT_PTR GetSize( ) const;**|  \n  \n### Example  \n [!code-cpp[NVC_MFCCollections#67](../../mfc/codesnippet/cpp/cmapstringtoob-class_5.cpp)]  \n  \n##  <a name=\"cmapstringtoob__getstartposition\"></a>  CMapStringToOb::GetStartPosition  \n Starts a map iteration by returning a **POSITION** value that can be passed to a `GetNextAssoc` call.  \n  \n```  \nPOSITION GetStartPosition() const;\n\n \n```  \n  \n### Return Value  \n A **POSITION** value that indicates a starting position for iterating the map; or **NULL** if the map is empty.  \n  \n### Remarks  \n The iteration sequence is not predictable; therefore, the \"first element in the map\" has no special significance.  \n  \n The following table shows other member functions that are similar to `CMapStringToOb::GetStartPosition`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**POSITION GetStartPosition( ) const;**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**POSITION GetStartPosition( ) const;**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**POSITION GetStartPosition( ) const;**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**POSITION GetStartPosition( ) const;**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**POSITION GetStartPosition( ) const;**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**POSITION GetStartPosition( ) const;**|  \n  \n### Example  \n See the example for [CMapStringToOb::GetNextAssoc](#cmapstringtoob__getnextassoc).  \n  \n##  <a name=\"cmapstringtoob__hashkey\"></a>  CMapStringToOb::HashKey  \n Calculates the hash value of a specified key.  \n  \n```  \nUINT HashKey(LPCTSTR key) const;\n\n \n```  \n  \n### Parameters  \n `key`  \n The key whose hash value is to be calculated.  \n  \n### Return Value  \n The Key's hash value  \n  \n### Remarks  \n The following table shows other member functions that are similar to `CMapStringToOb::HashKey`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**UINT HashKey( void\\*** `key` **) const;**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**UINT HashKey( void\\*** `key` **) const;**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**UINT HashKey( LPCTSTR** `key` **) const;**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**UINT HashKey( LPCTSTR** `key` **) const;**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**UINT HashKey( WORD** `key` **) const;**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**UINT HashKey( WORD** `key` **) const;**|  \n  \n##  <a name=\"cmapstringtoob__inithashtable\"></a>  CMapStringToOb::InitHashTable  \n Initializes the hash table.  \n  \n```  \nvoid InitHashTable(\n    UINT hashSize,  \n    BOOL bAllocNow = TRUE);\n```  \n  \n### Parameters  \n `hashSize`  \n Number of entries in the hash table.  \n  \n `bAllocNow`  \n If **TRUE**, allocates the hash table upon initialization; otherwise the table is allocated when needed.  \n  \n### Remarks  \n For best performance, the hash table size should be a prime number. To minimize collisions, the size should be roughly 20 percent larger than the largest anticipated data set.  \n  \n The following table shows other member functions that are similar to `CMapStringToOb::InitHashTable`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**void InitHashTable( UINT** `hashSize` **, BOOL** `bAllocNow` **= TRUE );**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**void InitHashTable( UINT** `hashSize` **, BOOL** `bAllocNow` **= TRUE );**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**void InitHashTable( UINT** `hashSize` **, BOOL** `bAllocNow` **= TRUE );**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**void InitHashTable( UINT** `hashSize` **, BOOL** `bAllocNow` **= TRUE );**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**void InitHashTable( UINT** `hashSize` **, BOOL** `bAllocNow` **= TRUE );**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**void InitHashTable( UINT** `hashSize` **, BOOL** `bAllocNow` **= TRUE );**|  \n  \n##  <a name=\"cmapstringtoob__isempty\"></a>  CMapStringToOb::IsEmpty  \n Determines whether the map is empty.  \n  \n```  \nBOOL IsEmpty() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if this map contains no elements; otherwise 0.  \n  \n### Example  \n See the example for [RemoveAll](#cmapstringtoob__removeall).  \n  \n### Remarks  \n The following table shows other member functions that are similar to **CMapStringToOb:: IsEmpty**.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**BOOL IsEmpty( ) const;**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**BOOL IsEmpty( ) const;**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**BOOL IsEmpty( ) const;**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**BOOL IsEmpty( ) const;**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**BOOL IsEmpty( ) const;**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**BOOL IsEmpty( ) const;**|  \n  \n##  <a name=\"cmapstringtoob__lookup\"></a>  CMapStringToOb::Lookup  \n Returns a `CObject` pointer based on a `CString` value.  \n  \n```  \nBOOL Lookup(\n    LPCTSTR key,  \n    CObject*& rValue) const;\n\n \n```  \n  \n### Parameters  \n `key`  \n Specifies the string key that identifies the element to be looked up.  \n  \n `rValue`  \n Specifies the returned value from the looked-up element.  \n  \n### Return Value  \n Nonzero if the element was found; otherwise 0.  \n  \n### Remarks  \n `Lookup` uses a hashing algorithm to quickly find the map element with a key that matches exactly ( `CString` value).  \n  \n The following table shows other member functions that are similar to `CMapStringToOb::LookUp`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**BOOL Lookup( void\\*** `key` **, void\\*&** `rValue` **) const;**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**BOOL Lookup( void\\*** `key` **, WORD&** `rValue` **) const;**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**BOOL Lookup( LPCTSTR** `key` **, void\\*&** `rValue` **) const;**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**BOOL Lookup( LPCTSTR** `key` **, CString&** `rValue` **) const;**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**BOOL Lookup( WORD** `key` **, CObject\\*&** `rValue` **) const;**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**BOOL Lookup( WORD** `key` **, void\\*&** `rValue` **) const;**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#68](../../mfc/codesnippet/cpp/cmapstringtoob-class_6.cpp)]  \n  \n##  <a name=\"cmapstringtoob__lookupkey\"></a>  CMapStringToOb::LookupKey  \n Returns a reference to the key associated with the specified key value.  \n  \n```  \nBOOL LookupKey(\n    LPCTSTR key,  \n    LPCTSTR& rKey) const;\n\n \n```  \n  \n### Parameters  \n `key`  \n Specifies the string key that identifies the element to be looked up.  \n  \n `rKey`  \n The reference to the associated key.  \n  \n### Return Value  \n Nonzero if the key was found; otherwise 0.  \n  \n### Remarks  \n Using a reference to a key is unsafe if used after the associated element was removed from the map or after the map was destroyed.  \n  \n The following table shows other member functions that are similar to **CMapStringToOb:: LookupKey**.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**BOOL LookupKey( LPCTSTR** `key` **, LPCTSTR&** `rKey` **) const;**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**BOOL LookupKey( LPCTSTR** `key` **, LPCTSTR&** `rKey` **) const;**|  \n  \n##  <a name=\"cmapstringtoob__operator_at\"></a>  CMapStringToOb::operator [ ]  \n A convenient substitute for the `SetAt` member function.  \n  \n```  \nCObject*& operator[ ](lpctstr key);\n```  \n  \n### Return Value  \n A reference to a pointer to a `CObject` object; or **NULL** if the map is empty or `key` is out of range.  \n  \n### Remarks  \n Thus it can be used only on the left side of an assignment statement (an l-value). If there is no map element with the specified key, then a new element is created.  \n  \n There is no \"right side\" (r-value) equivalent to this operator because there is a possibility that a key may not be found in the map. Use the `Lookup` member function for element retrieval.  \n  \n The following table shows other member functions that are similar to **CMapStringToOb::operator []**.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**void\\*& operator[](void\\*** `key` **\\);**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**WORD& operator[](void\\*** `key` **\\);**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**void\\*& operator[](lpctstr** `key` **\\);**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**CString& operator[](lpctstr** `key` **\\);**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**CObject\\*& operator[](word** `key` **\\);**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**void\\*& operator[](word** `key` **\\);**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#72](../../mfc/codesnippet/cpp/cmapstringtoob-class_7.cpp)]  \n  \n The results from this program are as follows:  \n  \n `Operator [] example: A CMapStringToOb with 2 elements`  \n  \n `[Lisa] = a CAge at $4A02 11`  \n  \n `[Bart] = a CAge at $497E 13`  \n  \n##  <a name=\"cmapstringtoob__removeall\"></a>  CMapStringToOb::RemoveAll  \n Removes all the elements from this map and destroys the `CString` key objects.  \n  \n```  \nvoid RemoveAll();\n```  \n  \n### Remarks  \n The `CObject` objects referenced by each key are not destroyed. The `RemoveAll` function can cause memory leaks if you do not ensure that the referenced `CObject` objects are destroyed.  \n  \n The function works correctly if the map is already empty.  \n  \n The following table shows other member functions that are similar to `CMapStringToOb::RemoveAll`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**void RemoveAll( );**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**void RemoveAll( );**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**void RemoveAll( );**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**void RemoveAll( );**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**void RemoveAll( );**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**void RemoveAll( );**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#69](../../mfc/codesnippet/cpp/cmapstringtoob-class_8.cpp)]  \n  \n##  <a name=\"cmapstringtoob__removekey\"></a>  CMapStringToOb::RemoveKey  \n Looks up the map entry corresponding to the supplied key; then, if the key is found, removes the entry.  \n  \n```  \nBOOL RemoveKey(LPCTSTR key);\n```  \n  \n### Parameters  \n `key`  \n Specifies the string used for map lookup.  \n  \n### Return Value  \n Nonzero if the entry was found and successfully removed; otherwise 0.  \n  \n### Remarks  \n This can cause memory leaks if the `CObject` object is not deleted elsewhere.  \n  \n The following table shows other member functions that are similar to `CMapStringToOb::RemoveKey`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**BOOL RemoveKey( void\\*** `key` **);**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**BOOL RemoveKey( void\\*** `key` **);**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**BOOL RemoveKey( LPCTSTR** `key` **);**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**BOOL RemoveKey( LPCTSTR** `key` **);**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**BOOL RemoveKey( WORD** `key` **);**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**BOOL RemoveKey( WORD** `key` **);**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#70](../../mfc/codesnippet/cpp/cmapstringtoob-class_9.cpp)]  \n  \n The results from this program are as follows:  \n  \n `RemoveKey example: A CMapStringToOb with 3 elements`  \n  \n `[Marge] = a CAge at $49A0 35`  \n  \n `[Homer] = a CAge at $495E 36`  \n  \n `[Bart] = a CAge at $4634 13`  \n  \n##  <a name=\"cmapstringtoob__setat\"></a>  CMapStringToOb::SetAt  \n The primary means to insert an element in a map.  \n  \n```  \nvoid SetAt(\n    LPCTSTR key,  \n    CObject* newValue);\n```  \n  \n### Parameters  \n `key`  \n Specifies the string that is the key of the new element.  \n  \n `newValue`  \n Specifies the `CObject` pointer that is the value of the new element.  \n  \n### Remarks  \n First, the key is looked up. If the key is found, then the corresponding value is changed; otherwise a new key-value element is created.  \n  \n The following table shows other member functions that are similar to `CMapStringToOb::SetAt`.  \n  \n|Class|Member Function|  \n|-----------|---------------------|  \n|[CMapPtrToPtr](../../mfc/reference/cmapptrtoptr-class.md)|**void SetAt( void\\*** `key` **, void\\*** `newValue` **);**|  \n|[CMapPtrToWord](../../mfc/reference/cmapptrtoword-class.md)|**void SetAt( void\\*** `key` **, WORD** `newValue` **);**|  \n|[CMapStringToPtr](../../mfc/reference/cmapstringtoptr-class.md)|**void SetAt( LPCTSTR** `key` **, void\\*** `newValue` **);**|  \n|[CMapStringToString](../../mfc/reference/cmapstringtostring-class.md)|**void SetAt( LPCTSTR** `key` **, LPCTSTR** `newValue` **);**|  \n|[CMapWordToOb](../../mfc/reference/cmapwordtoob-class.md)|**void SetAt( WORD** `key` **, CObject\\*** `newValue` **);**|  \n|[CMapWordToPtr](../../mfc/reference/cmapwordtoptr-class.md)|**void SetAt( WORD** `key` **, void\\*** `newValue` **);**|  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all collection examples.  \n  \n [!code-cpp[NVC_MFCCollections#71](../../mfc/codesnippet/cpp/cmapstringtoob-class_10.cpp)]  \n  \n The results from this program are as follows:  \n  \n `before Lisa's birthday: A CMapStringToOb with 2 elements`  \n  \n `[Lisa] = a CAge at $493C 11`  \n  \n `[Bart] = a CAge at $4654 13`  \n  \n `after Lisa's birthday: A CMapStringToOb with 2 elements`  \n  \n `[Lisa] = a CAge at $49C0 12`  \n  \n `[Bart] = a CAge at $4654 13`  \n  \n## See Also  \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CMapPtrToPtr Class](../../mfc/reference/cmapptrtoptr-class.md)   \n [CMapPtrToWord Class](../../mfc/reference/cmapptrtoword-class.md)   \n [CMapStringToPtr Class](../../mfc/reference/cmapstringtoptr-class.md)   \n [CMapStringToString Class](../../mfc/reference/cmapstringtostring-class.md)   \n [CMapWordToOb Class](../../mfc/reference/cmapwordtoob-class.md)   \n [CMapWordToPtr Class](../../mfc/reference/cmapwordtoptr-class.md)\n"}