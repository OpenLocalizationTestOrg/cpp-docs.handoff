{"nodes":[{"pos":[12,50],"content":"pointer_traits Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"pointer_traits Struct | Microsoft Docs","pos":[0,38]}]},{"content":"pointer_traits Struct","pos":[981,1002]},{"pos":[1003,1138],"content":"Supplies information that is needed by an object of template class <ph id=\"ph1\">`allocator_traits`</ph> to describe an allocator with pointer type <ph id=\"ph2\">`Ptr`</ph>.","source":"Supplies information that is needed by an object of template class `allocator_traits` to describe an allocator with pointer type `Ptr`."},{"content":"Syntax","pos":[1147,1153]},{"content":"Remarks","pos":[1222,1229]},{"pos":[1233,1314],"content":"Ptr can be a raw pointer of type <ph id=\"ph1\">`Ty *`</ph> or a class with the following properties.","source":"Ptr can be a raw pointer of type `Ty *` or a class with the following properties."},{"content":"Typedefs","pos":[1661,1669]},{"content":"Name","pos":[1676,1680]},{"content":"Description","pos":[1681,1692]},{"content":"The type <ph id=\"ph1\">`T2`</ph> is <ph id=\"ph2\">`Ptr::difference_type`</ph> if that type exists, otherwise <ph id=\"ph3\">`ptrdiff_t`</ph>.","pos":[1759,1842],"source":"The type `T2` is `Ptr::difference_type` if that type exists, otherwise `ptrdiff_t`."},{"content":"If <ph id=\"ph1\">`Ptr`</ph> is a raw pointer, the type is <ph id=\"ph2\">`ptrdiff_t`</ph>.","pos":[1843,1894],"source":" If `Ptr` is a raw pointer, the type is `ptrdiff_t`."},{"content":"The type <ph id=\"ph1\">`T1`</ph> is <ph id=\"ph2\">`Ptr::element_type`</ph> if that type exists, otherwise <ph id=\"ph3\">`Ty`</ph>.","pos":[1925,1998],"source":"The type `T1` is `Ptr::element_type` if that type exists, otherwise `Ty`."},{"content":"If <ph id=\"ph1\">`Ptr`</ph> is a raw pointer, the type is <ph id=\"ph2\">`Ty`</ph>.","pos":[1999,2043],"source":" If `Ptr` is a raw pointer, the type is `Ty`."},{"pos":[2070,2088],"content":"The type is <ph id=\"ph1\">`Ptr`</ph>.","source":"The type is `Ptr`."},{"content":"Structs","pos":[2099,2106]},{"content":"Name","pos":[2113,2117]},{"content":"Description","pos":[2118,2129]},{"content":"Attempts to convert the underlying pointer type to a specified type.","pos":[2192,2260]},{"content":"Methods","pos":[2271,2278]},{"content":"Name","pos":[2285,2289]},{"content":"Description","pos":[2290,2301]},{"content":"pointer_to","pos":[2340,2350]},{"pos":[2388,2448],"content":"Converts an arbitrary reference to an object of class <ph id=\"ph1\">`Ptr`</ph>.","source":"Converts an arbitrary reference to an object of class `Ptr`."},{"content":"Requirements","pos":[2458,2470]},{"pos":[2474,2495],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>memory&gt;","source":"**Header:** \\<memory>"},{"pos":[2502,2520],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2580,2590],"content":"pointer_to"},{"content":"Static method that returns <ph id=\"ph1\">`Ptr::pointer_to(obj)`</ph>, if that function exists.","pos":[2594,2669],"source":"Static method that returns `Ptr::pointer_to(obj)`, if that function exists."},{"content":"Otherwise, it is not possible to convert an arbitrary reference to an object of class <ph id=\"ph1\">`Ptr`</ph>.","pos":[2670,2762],"source":" Otherwise, it is not possible to convert an arbitrary reference to an object of class `Ptr`."},{"content":"If <ph id=\"ph1\">`Ptr`</ph> is a raw pointer, this method returns <ph id=\"ph2\">`addressof(obj)`</ph>.","pos":[2763,2827],"source":" If `Ptr` is a raw pointer, this method returns `addressof(obj)`."},{"content":"See Also","pos":[2898,2906]},{"content":"memory&gt;","pos":[2913,2920],"source":"memory>"},{"content":"allocator_traits Class","pos":[2958,2980]}],"content":"---\ntitle: \"pointer_traits Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"memory/std::pointer_traits::element_type\"\n  - \"memory/std::pointer_traits::pointer\"\n  - \"memory/std::pointer_traits\"\n  - \"memory/std::pointer_traits::difference_type\"\n  - \"memory/std::pointer_traits::rebind\"\n  - \"xmemory0/std::pointer_traits::element_type\"\n  - \"xmemory0/std::pointer_traits::pointer\"\n  - \"xmemory0/std::pointer_traits\"\n  - \"xmemory0/std::pointer_traits::difference_type\"\n  - \"xmemory0/std::pointer_traits::rebind\"\ndev_langs: \n  - \"C++\"\nms.assetid: 545aecf1-3561-4859-8b34-603c079fe1b3\ncaps.latest.revision: 13\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# pointer_traits Struct\nSupplies information that is needed by an object of template class `allocator_traits` to describe an allocator with pointer type `Ptr`.  \n  \n## Syntax  \n  \n```cpp\ntemplate <class Ptr>\nstruct pointer_traits;\n```  \n  \n## Remarks  \n Ptr can be a raw pointer of type `Ty *` or a class with the following properties.  \n```  \nstruct Ptr\n   { // describes a pointer type usable by allocators\n   typedef Ptr pointer;\n   typedef T1 element_type; // optional\n   typedef T2 difference_type; // optional\n   template <class Other>\n   using rebind = typename Ptr<Other, Rest...>; // optional\n   static pointer pointer_to(element_type& obj);\n   // optional\n   };  \n```\n### Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`typedef T2 difference_type`|The type `T2` is `Ptr::difference_type` if that type exists, otherwise `ptrdiff_t`. If `Ptr` is a raw pointer, the type is `ptrdiff_t`.|  \n|`typedef T1 element_type`|The type `T1` is `Ptr::element_type` if that type exists, otherwise `Ty`. If `Ptr` is a raw pointer, the type is `Ty`.|  \n|`typedef Ptr pointer`|The type is `Ptr`.|  \n  \n### Structs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`pointer_traits::rebind`|Attempts to convert the underlying pointer type to a specified type.|  \n  \n### Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[pointer_to](#pointer_traits__pointer_to_method)|Converts an arbitrary reference to an object of class `Ptr`.|  \n  \n## Requirements  \n **Header:** \\<memory>  \n  \n **Namespace:** std  \n  \n##  <a name=\"pointer_traits__pointer_to_method\"></a>  pointer_to  \n Static method that returns `Ptr::pointer_to(obj)`, if that function exists. Otherwise, it is not possible to convert an arbitrary reference to an object of class `Ptr`. If `Ptr` is a raw pointer, this method returns `addressof(obj)`.  \n  \n```cpp\nstatic pointer pointer_to(element_type& obj);\n```  \n  \n## See Also  \n [\\<memory>](../standard-library/memory.md)   \n [allocator_traits Class](../standard-library/allocator-traits-class.md)\n\n"}