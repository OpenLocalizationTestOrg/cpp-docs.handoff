{"nodes":[{"pos":[12,46],"content":"for Statement (C) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"for Statement (C) | Microsoft Docs","pos":[0,34]}]},{"content":"for Statement (C)","pos":[604,621]},{"content":"The <ph id=\"ph1\">`for`</ph> statement lets you repeat a statement or compound statement a specified number of times.","pos":[622,720],"source":"The `for` statement lets you repeat a statement or compound statement a specified number of times."},{"content":"The body of a <ph id=\"ph1\">`for`</ph> statement is executed zero or more times until an optional condition becomes false.","pos":[721,824],"source":" The body of a `for` statement is executed zero or more times until an optional condition becomes false."},{"content":"You can use optional expressions within the <ph id=\"ph1\">`for`</ph> statement to initialize and change values during the <ph id=\"ph2\">`for`</ph> statement's execution.","pos":[825,956],"source":" You can use optional expressions within the `for` statement to initialize and change values during the `for` statement's execution."},{"content":"Syntax","pos":[965,971]},{"content":"<bpt id=\"p1\">*</bpt>iteration-statement<ept id=\"p1\">*</ept>:","pos":[975,997],"source":"*iteration-statement*:"},{"content":"( <ph id=\"ph1\">`init-expression`</ph>opt ; <ph id=\"ph2\">`cond-expression`</ph>opt ; <ph id=\"ph3\">`loop-expression`</ph>opt )","pos":[1007,1077],"source":" ( `init-expression`opt ; `cond-expression`opt ; `loop-expression`opt )"},{"pos":[1095,1146],"content":"Execution of a <ph id=\"ph1\">`for`</ph> statement proceeds as follows:","source":"Execution of a `for` statement proceeds as follows:"},{"content":"The <ph id=\"ph1\">`init-expression`</ph>, if any, is evaluated.","pos":[1156,1200],"source":"The `init-expression`, if any, is evaluated."},{"content":"This specifies the initialization for the loop.","pos":[1201,1248]},{"content":"There is no restriction on the type of <ph id=\"ph1\">`init-expression`</ph>.","pos":[1249,1306],"source":" There is no restriction on the type of `init-expression`."},{"content":"The <ph id=\"ph1\">`cond-expression`</ph>, if any, is evaluated.","pos":[1316,1360],"source":"The `cond-expression`, if any, is evaluated."},{"content":"This expression must have arithmetic or pointer type.","pos":[1361,1414]},{"content":"It is evaluated before each iteration.","pos":[1415,1453]},{"content":"Three results are possible:","pos":[1454,1481]},{"content":"If <ph id=\"ph1\">`cond-expression`</ph> is true (nonzero), <ph id=\"ph2\">`statement`</ph> is executed; then <ph id=\"ph3\">`loop-expression`</ph>, if any, is evaluated.","pos":[1495,1605],"source":"If `cond-expression` is true (nonzero), `statement` is executed; then `loop-expression`, if any, is evaluated."},{"content":"The <ph id=\"ph1\">`loop-expression`</ph> is evaluated after each iteration.","pos":[1606,1662],"source":" The `loop-expression` is evaluated after each iteration."},{"content":"There is no restriction on its type.","pos":[1663,1699]},{"content":"Side effects will execute in order.","pos":[1700,1735]},{"content":"The process then begins again with the evaluation of <ph id=\"ph1\">`cond-expression`</ph>.","pos":[1736,1807],"source":" The process then begins again with the evaluation of `cond-expression`."},{"content":"If <ph id=\"ph1\">`cond-expression`</ph> is omitted, <ph id=\"ph2\">`cond-expression`</ph> is considered true, and execution proceeds exactly as described in the previous paragraph.","pos":[1821,1962],"source":"If `cond-expression` is omitted, `cond-expression` is considered true, and execution proceeds exactly as described in the previous paragraph."},{"content":"A <ph id=\"ph1\">`for`</ph> statement without a <ph id=\"ph2\">`cond-expression`</ph> argument terminates only when a <ph id=\"ph3\">`break`</ph> or <ph id=\"ph4\">`return`</ph> statement within the statement body is executed, or when a <ph id=\"ph5\">`goto`</ph> (to a labeled statement outside the <ph id=\"ph6\">`for`</ph> statement body) is executed.","pos":[1963,2197],"source":" A `for` statement without a `cond-expression` argument terminates only when a `break` or `return` statement within the statement body is executed, or when a `goto` (to a labeled statement outside the `for` statement body) is executed."},{"pos":[2211,2348],"content":"If <ph id=\"ph1\">`cond-expression`</ph> is <ph id=\"ph2\">`false`</ph> (0), execution of the <ph id=\"ph3\">`for`</ph> statement terminates and control passes to the next statement in the program.","source":"If `cond-expression` is `false` (0), execution of the `for` statement terminates and control passes to the next statement in the program."},{"content":"A <ph id=\"ph1\">`for`</ph> statement also terminates when a <ph id=\"ph2\">`break`</ph>, <ph id=\"ph3\">`goto`</ph>, or <ph id=\"ph4\">`return`</ph> statement within the statement body is executed.","pos":[2355,2473],"source":"A `for` statement also terminates when a `break`, `goto`, or `return` statement within the statement body is executed."},{"content":"A <ph id=\"ph1\">`continue`</ph> statement in a <ph id=\"ph2\">`for`</ph> loop causes <ph id=\"ph3\">`loop-expression`</ph> to be evaluated.","pos":[2474,2554],"source":" A `continue` statement in a `for` loop causes `loop-expression` to be evaluated."},{"content":"When a <ph id=\"ph1\">`break`</ph> statement is executed inside a <ph id=\"ph2\">`for`</ph> loop, <ph id=\"ph3\">`loop-expression`</ph> is not evaluated or executed.","pos":[2555,2660],"source":" When a `break` statement is executed inside a `for` loop, `loop-expression` is not evaluated or executed."},{"content":"This statement","pos":[2661,2675]},{"pos":[2709,2829],"content":"is the customary way to produce an infinite loop which can only be exited with a <ph id=\"ph1\">`break`</ph>, <ph id=\"ph2\">`goto`</ph>, or <ph id=\"ph3\">`return`</ph> statement.","source":"is the customary way to produce an infinite loop which can only be exited with a `break`, `goto`, or `return` statement."},{"content":"Code","pos":[2838,2842]},{"pos":[2846,2891],"content":"This example illustrates the <ph id=\"ph1\">`for`</ph> statement:","source":"This example illustrates the `for` statement:"},{"content":"Output","pos":[3364,3370]},{"content":"See Also","pos":[3436,3444]},{"content":"Statements","pos":[3449,3459]}],"content":"---\ntitle: \"for Statement (C) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"for keyword [C]\"\nms.assetid: 560a8de4-19db-4868-9f18-dbe51b17900d\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# for Statement (C)\nThe `for` statement lets you repeat a statement or compound statement a specified number of times. The body of a `for` statement is executed zero or more times until an optional condition becomes false. You can use optional expressions within the `for` statement to initialize and change values during the `for` statement's execution.  \n  \n## Syntax  \n *iteration-statement*:  \n `for` ( `init-expression`opt ; `cond-expression`opt ; `loop-expression`opt )`statement`  \n  \n Execution of a `for` statement proceeds as follows:  \n  \n1.  The `init-expression`, if any, is evaluated. This specifies the initialization for the loop. There is no restriction on the type of `init-expression`.  \n  \n2.  The `cond-expression`, if any, is evaluated. This expression must have arithmetic or pointer type. It is evaluated before each iteration. Three results are possible:  \n  \n    -   If `cond-expression` is true (nonzero), `statement` is executed; then `loop-expression`, if any, is evaluated. The `loop-expression` is evaluated after each iteration. There is no restriction on its type. Side effects will execute in order. The process then begins again with the evaluation of `cond-expression`.  \n  \n    -   If `cond-expression` is omitted, `cond-expression` is considered true, and execution proceeds exactly as described in the previous paragraph. A `for` statement without a `cond-expression` argument terminates only when a `break` or `return` statement within the statement body is executed, or when a `goto` (to a labeled statement outside the `for` statement body) is executed.  \n  \n    -   If `cond-expression` is `false` (0), execution of the `for` statement terminates and control passes to the next statement in the program.  \n  \n A `for` statement also terminates when a `break`, `goto`, or `return` statement within the statement body is executed. A `continue` statement in a `for` loop causes `loop-expression` to be evaluated. When a `break` statement is executed inside a `for` loop, `loop-expression` is not evaluated or executed. This statement  \n  \n```  \nfor( ;; )  \n```  \n  \n is the customary way to produce an infinite loop which can only be exited with a `break`, `goto`, or `return` statement.  \n  \n## Code  \n This example illustrates the `for` statement:  \n  \n```  \n// c_for.c  \nint main()  \n{  \n   char* line = \"H e  \\tl\\tlo World\\0\";  \n   int space = 0;  \n   int tab = 0;  \n   int i;  \n   int max = strlen(line);  \n   for (i = 0; i < max; i++ )   \n   {  \n      if ( line[i] == ' ' )  \n      {  \n          space++;  \n      }  \n      if ( line[i] == '\\t' )  \n      {  \n          tab++;  \n      }  \n   }  \n  \n   printf(\"Number of spaces: %i\\n\", space);  \n   printf(\"Number of tabs: %i\\n\", tab);  \n   return 0;  \n}  \n```  \n  \n## Output  \n  \n```  \nNumber of spaces: 4  \nNumber of tabs: 2  \n```  \n  \n## See Also  \n [Statements](../c-language/statements-c.md)"}