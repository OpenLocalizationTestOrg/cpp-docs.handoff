{"nodes":[{"pos":[12,55],"content":"CComCompositeControl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComCompositeControl Class | Microsoft Docs","pos":[0,43]}]},{"content":"CComCompositeControl Class","pos":[819,845]},{"content":"This class provides the methods required to implement a composite control.","pos":[846,920]},{"pos":[928,1038],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Syntax","pos":[1047,1053]},{"content":"Parameters","pos":[1166,1176]},{"content":"Your class, derived from <bpt id=\"p1\">[</bpt>CComObjectRoot<ept id=\"p1\">](../../atl/reference/ccomobjectroot-class.md)</ept> or <bpt id=\"p2\">[</bpt>CComObjectRootEx<ept id=\"p2\">](../../atl/reference/ccomobjectrootex-class.md)</ept>, as well as from any other interfaces you want to support for your composite control.","pos":[1187,1428],"source":" Your class, derived from [CComObjectRoot](../../atl/reference/ccomobjectroot-class.md) or [CComObjectRootEx](../../atl/reference/ccomobjectrootex-class.md), as well as from any other interfaces you want to support for your composite control."},{"content":"Members","pos":[1437,1444]},{"content":"Public Constructors","pos":[1454,1473]},{"content":"Name","pos":[1480,1484]},{"content":"Description","pos":[1485,1496]},{"content":"CComCompositeControl::CComCompositeControl","pos":[1535,1577]},{"content":"The constructor.","pos":[1624,1640]},{"content":"CComCompositeControl::~CComCompositeControl","pos":[1646,1689]},{"content":"The destructor.","pos":[1741,1756]},{"content":"Public Methods","pos":[1767,1781]},{"content":"Name","pos":[1788,1792]},{"content":"Description","pos":[1793,1804]},{"content":"CComCompositeControl::AdviseSinkMap","pos":[1843,1878]},{"content":"Call this method to advise or unadvise all controls hosted by the composite control.","pos":[1918,2002]},{"content":"CComCompositeControl::CalcExtent","pos":[2008,2040]},{"pos":[2077,2196],"content":"Call this method to calculate the size in <bpt id=\"p1\">**</bpt>HIMETRIC<ept id=\"p1\">**</ept> units of the dialog resource used to host the composite control.","source":"Call this method to calculate the size in **HIMETRIC** units of the dialog resource used to host the composite control."},{"content":"CComCompositeControl::Create","pos":[2202,2230]},{"content":"This method is called to create the control window for the composite control.","pos":[2263,2340]},{"content":"CComCompositeControl::CreateControlWindow","pos":[2346,2387]},{"content":"Call this method to create the control window and advise any hosted control.","pos":[2433,2509]},{"content":"CComCompositeControl::SetBackgroundColorFromAmbient","pos":[2515,2566]},{"content":"Call this method to set the background color of the composite control using the container's background color.","pos":[2622,2731]},{"content":"Public Data Members","pos":[2742,2761]},{"content":"Name","pos":[2768,2772]},{"content":"Description","pos":[2773,2784]},{"content":"CComCompositeControl::m_hbrBackground","pos":[2823,2860]},{"content":"The background brush.","pos":[2902,2923]},{"content":"CComCompositeControl::m_hWndFocus","pos":[2929,2962]},{"content":"The handle of the window that currently has focus.","pos":[3000,3050]},{"content":"Remarks","pos":[3060,3067]},{"content":"Classes derived from class <ph id=\"ph1\">`CComCompositeControl`</ph> inherit the functionality of an ActiveX composite control.","pos":[3071,3179],"source":"Classes derived from class `CComCompositeControl` inherit the functionality of an ActiveX composite control."},{"content":"ActiveX controls derived from <ph id=\"ph1\">`CComCompositeControl`</ph> are hosted by a standard dialog box.","pos":[3180,3269],"source":" ActiveX controls derived from `CComCompositeControl` are hosted by a standard dialog box."},{"content":"These types of controls are called composite controls because they are able to host other controls (native Windows controls and ActiveX controls).","pos":[3270,3416]},{"content":"identifies the dialog resource to use in creating the composite control by looking for an enumerated data member in the child class.","pos":[3446,3578]},{"content":"The member IDD of this child class is set to the resource ID of the dialog resource that will be used as the control's window.","pos":[3579,3705]},{"content":"The following is an example of the data member that the class derived from <ph id=\"ph1\">`CComCompositeControl`</ph> should contain to identify the dialog resource to be used for the control's window:","pos":[3706,3887],"source":" The following is an example of the data member that the class derived from `CComCompositeControl` should contain to identify the dialog resource to be used for the control's window:"},{"pos":[3905,3919],"content":"NVC_ATL_COM#13"},{"pos":[3987,4093],"content":"[!NOTE]\n Composite controls are always windowed controls, although they can contain windowless controls.","leadings":["","> "],"nodes":[{"content":"Composite controls are always windowed controls, although they can contain windowless controls.","pos":[9,104]}]},{"content":"A control implemented by a <ph id=\"ph1\">`CComCompositeControl`</ph>-derived class has default tabbing behavior built in.","pos":[4100,4202],"source":"A control implemented by a `CComCompositeControl`-derived class has default tabbing behavior built in."},{"content":"When the control receives focus by being tabbed to in a containing application, successively pressing the TAB key will cause the focus to be cycled through all of the composite control's contained controls, then out of the composite control and on to the next item in the tab order of the container.","pos":[4203,4502]},{"content":"The tab order of the hosted controls is determined by the dialog resource and determines the order in which tabbing will occur.","pos":[4503,4630]},{"pos":[4638,5020],"content":"[!NOTE]\n In order for accelerators to work properly with a `CComCompositeControl`, it is necessary to load an accelerator table as the control is created, pass the handle and number of accelerators back into [IOleControlImpl::GetControlInfo](../../atl/reference/iolecontrolimpl-class.md#iolecontrolimpl__getcontrolinfo), and finally destroy the table when the control is released.","leadings":["","> "],"nodes":[{"content":"In order for accelerators to work properly with a <ph id=\"ph1\">`CComCompositeControl`</ph>, it is necessary to load an accelerator table as the control is created, pass the handle and number of accelerators back into <bpt id=\"p1\">[</bpt>IOleControlImpl::GetControlInfo<ept id=\"p1\">](../../atl/reference/iolecontrolimpl-class.md#iolecontrolimpl__getcontrolinfo)</ept>, and finally destroy the table when the control is released.","pos":[9,380],"source":" In order for accelerators to work properly with a `CComCompositeControl`, it is necessary to load an accelerator table as the control is created, pass the handle and number of accelerators back into [IOleControlImpl::GetControlInfo](../../atl/reference/iolecontrolimpl-class.md#iolecontrolimpl__getcontrolinfo), and finally destroy the table when the control is released."}]},{"content":"Example","pos":[5029,5036]},{"pos":[5051,5065],"content":"NVC_ATL_COM#14"},{"content":"Inheritance Hierarchy","pos":[5134,5155]},{"content":"CComControlBase","pos":[5176,5191]},{"content":"CComControl","pos":[5246,5257]},{"content":"Requirements","pos":[5338,5350]},{"pos":[5354,5374],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlctl.h","source":"**Header:** atlctl.h"},{"pos":[5436,5471],"content":"CComCompositeControl::AdviseSinkMap"},{"content":"Call this method to advise or unadvise all controls hosted by the composite control.","pos":[5475,5559]},{"content":"Parameters","pos":[5619,5629]},{"content":"True if all controls are to be advised; otherwise false.","pos":[5646,5702]},{"content":"Return Value","pos":[5712,5724]},{"content":"All controls in the event sink map were connected or disconnected from their event source successfully.","pos":[5738,5841]},{"content":"E_FAIL","pos":[5850,5856]},{"content":"Not all controls in the event sink map could be connected or disconnected from their event source successfully.","pos":[5862,5973]},{"content":"This error usually indicates a problem with an entry in the control's event sink map or a problem with a template argument used in an <ph id=\"ph1\">`IDispEventImpl`</ph> or <ph id=\"ph2\">`IDispEventSimpleImpl`</ph> base class.","pos":[5995,6183],"source":" This error usually indicates a problem with an entry in the control's event sink map or a problem with a template argument used in an `IDispEventImpl` or `IDispEventSimpleImpl` base class."},{"content":"CONNECT_E_ADVISELIMIT","pos":[6192,6213]},{"content":"The connection point has already reached its limit of connections and cannot accept any more.","pos":[6219,6312]},{"content":"CONNECT_E_CANNOTCONNECT","pos":[6321,6344]},{"content":"The sink does not support the interface required by this connection point.","pos":[6350,6424]},{"content":"CONNECT_E_NOCONNECTION","pos":[6433,6455]},{"content":"The cookie value does not represent a valid connection.","pos":[6461,6516]},{"content":"This error usually indicates a problem with an entry in the control's event sink map or a problem with a template argument used in an <ph id=\"ph1\">`IDispEventImpl`</ph> or <ph id=\"ph2\">`IDispEventSimpleImpl`</ph> base class.","pos":[6517,6705],"source":" This error usually indicates a problem with an entry in the control's event sink map or a problem with a template argument used in an `IDispEventImpl` or `IDispEventSimpleImpl` base class."},{"content":"Remarks","pos":[6715,6722]},{"content":"The base implementation of this method searches through the entries in the event sink map.","pos":[6726,6816]},{"content":"It then advises or unadvises the connection points to the COM objects described by the event sink map's sink entries.","pos":[6817,6934]},{"content":"This member method also relies on the fact that the derived class inherits from one instance of <ph id=\"ph1\">`IDispEventImpl`</ph> for every control in the sink map that is to be advised or unadvised.","pos":[6935,7117],"source":" This member method also relies on the fact that the derived class inherits from one instance of `IDispEventImpl` for every control in the sink map that is to be advised or unadvised."},{"pos":[7176,7208],"content":"CComCompositeControl::CalcExtent"},{"pos":[7212,7331],"content":"Call this method to calculate the size in <bpt id=\"p1\">**</bpt>HIMETRIC<ept id=\"p1\">**</ept> units of the dialog resource used to host the composite control.","source":"Call this method to calculate the size in **HIMETRIC** units of the dialog resource used to host the composite control."},{"content":"Parameters","pos":[7383,7393]},{"content":"A reference to a <bpt id=\"p1\">**</bpt>SIZE<ept id=\"p1\">**</ept> structure to be filled by this method.","pos":[7407,7471],"source":" A reference to a **SIZE** structure to be filled by this method."},{"content":"Return Value","pos":[7481,7493]},{"content":"TRUE if the control is hosted by a dialog box; otherwise FALSE.","pos":[7497,7560]},{"content":"Remarks","pos":[7570,7577]},{"pos":[7581,7626],"content":"The size is returned in the <ph id=\"ph1\">`size`</ph> parameter.","source":"The size is returned in the `size` parameter."},{"pos":[7681,7709],"content":"CComCompositeControl::Create"},{"content":"This method is called to create the control window for the composite control.","pos":[7713,7790]},{"content":"Parameters","pos":[7897,7907]},{"content":"A handle to the parent window of the control.","pos":[7927,7972]},{"content":"Reserved.","pos":[7990,7999]},{"content":"Data to be passed to the control during control creation.","pos":[8023,8080]},{"content":"The data passed as <ph id=\"ph1\">`dwInitParam`</ph> will show up as the <bpt id=\"p1\">**</bpt>LPARAM<ept id=\"p1\">**</ept> parameter of the <bpt id=\"p2\">[</bpt>WM_INITDIALOG<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms645428)</ept> message, which will be sent to the composite control when it gets created.","pos":[8081,8312],"source":" The data passed as `dwInitParam` will show up as the **LPARAM** parameter of the [WM_INITDIALOG](http://msdn.microsoft.com/library/windows/desktop/ms645428) message, which will be sent to the composite control when it gets created."},{"content":"Return Value","pos":[8322,8334]},{"content":"A handle to the newly created composite control dialog box.","pos":[8338,8397]},{"content":"Remarks","pos":[8407,8414]},{"content":"This method is usually called during in-place activation of the control.","pos":[8418,8490]},{"pos":[8559,8601],"content":"CComCompositeControl::CComCompositeControl"},{"content":"The constructor.","pos":[8605,8621]},{"content":"Remarks","pos":[8668,8675]},{"pos":[8679,8872],"content":"Initializes the <bpt id=\"p1\">[</bpt>CComCompositeControl::m_hbrBackground<ept id=\"p1\">](#ccomcompositecontrol__m_hbrbackground)</ept> and <bpt id=\"p2\">[</bpt>CComCompositeControl::m_hWndFocus<ept id=\"p2\">](#ccomcompositecontrol__m_hwndfocus)</ept> data members to NULL.","source":"Initializes the [CComCompositeControl::m_hbrBackground](#ccomcompositecontrol__m_hbrbackground) and [CComCompositeControl::m_hWndFocus](#ccomcompositecontrol__m_hwndfocus) data members to NULL."},{"pos":[8946,8989],"content":"CComCompositeControl::~CComCompositeControl"},{"content":"The destructor.","pos":[8993,9008]},{"content":"Remarks","pos":[9056,9063]},{"content":"Deletes the background object, if it exists.","pos":[9067,9111]},{"pos":[9179,9220],"content":"CComCompositeControl::CreateControlWindow"},{"content":"Call this method to create the control window and advise any hosted controls.","pos":[9224,9301]},{"content":"Parameters","pos":[9392,9402]},{"content":"A handle to the parent window of the control.","pos":[9422,9467]},{"content":"The position rectangle of the composite control in client coordinates relative to <ph id=\"ph1\">`hWndParent`</ph>.","pos":[9485,9580],"source":" The position rectangle of the composite control in client coordinates relative to `hWndParent`."},{"content":"Return Value","pos":[9590,9602]},{"content":"Returns a handle to the newly created composite control dialog box.","pos":[9606,9673]},{"content":"Remarks","pos":[9683,9690]},{"pos":[9694,9854],"content":"This method calls <bpt id=\"p1\">[</bpt>CComCompositeControl::Create<ept id=\"p1\">](#ccomcompositecontrol__create)</ept> and <bpt id=\"p2\">[</bpt>CComCompositeControl::AdviseSinkMap<ept id=\"p2\">](#ccomcompositecontrol__advisesinkmap)</ept>.","source":"This method calls [CComCompositeControl::Create](#ccomcompositecontrol__create) and [CComCompositeControl::AdviseSinkMap](#ccomcompositecontrol__advisesinkmap)."},{"pos":[9918,9955],"content":"CComCompositeControl::m_hbrBackground"},{"content":"The background brush.","pos":[9959,9980]},{"pos":[10077,10110],"content":"CComCompositeControl::m_hWndFocus"},{"content":"The handle of the window that currently has focus.","pos":[10114,10164]},{"pos":[10273,10324],"content":"CComCompositeControl::SetBackgroundColorFromAmbient"},{"content":"Call this method to set the background color of the composite control using the container's background color.","pos":[10328,10437]},{"content":"Return Value","pos":[10501,10513]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[10517,10573]},{"content":"See Also","pos":[10582,10590]},{"content":"CComControl Class","pos":[10595,10612]},{"content":"Composite Control Fundamentals","pos":[10661,10691]},{"content":"Class Overview","pos":[10747,10761]}],"content":"---\ntitle: \"CComCompositeControl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CComCompositeControl\"\n  - \"ATL::CComCompositeControl\"\n  - \"ATL.CComCompositeControl<T>\"\n  - \"ATL.CComCompositeControl\"\n  - \"ATL::CComCompositeControl<T>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CComCompositeControl class\"\n  - \"composite controls, CComCompositeControl class\"\nms.assetid: 1304b931-27e8-4fbc-be8e-bb226ad887fb\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComCompositeControl Class\nThis class provides the methods required to implement a composite control.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\ntemplate <class T>  class CComCompositeControl :  public CComControl<T,CAxDialogImpl<T>>\n```  \n  \n#### Parameters  \n `T`  \n Your class, derived from [CComObjectRoot](../../atl/reference/ccomobjectroot-class.md) or [CComObjectRootEx](../../atl/reference/ccomobjectrootex-class.md), as well as from any other interfaces you want to support for your composite control.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComCompositeControl::CComCompositeControl](#ccomcompositecontrol__ccomcompositecontrol)|The constructor.|  \n|[CComCompositeControl::~CComCompositeControl](#ccomcompositecontrol___dtorccomcompositecontrol)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComCompositeControl::AdviseSinkMap](#ccomcompositecontrol__advisesinkmap)|Call this method to advise or unadvise all controls hosted by the composite control.|  \n|[CComCompositeControl::CalcExtent](#ccomcompositecontrol__calcextent)|Call this method to calculate the size in **HIMETRIC** units of the dialog resource used to host the composite control.|  \n|[CComCompositeControl::Create](#ccomcompositecontrol__create)|This method is called to create the control window for the composite control.|  \n|[CComCompositeControl::CreateControlWindow](#ccomcompositecontrol__createcontrolwindow)|Call this method to create the control window and advise any hosted control.|  \n|[CComCompositeControl::SetBackgroundColorFromAmbient](#ccomcompositecontrol__setbackgroundcolorfromambient)|Call this method to set the background color of the composite control using the container's background color.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComCompositeControl::m_hbrBackground](#ccomcompositecontrol__m_hbrbackground)|The background brush.|  \n|[CComCompositeControl::m_hWndFocus](#ccomcompositecontrol__m_hwndfocus)|The handle of the window that currently has focus.|  \n  \n## Remarks  \n Classes derived from class `CComCompositeControl` inherit the functionality of an ActiveX composite control. ActiveX controls derived from `CComCompositeControl` are hosted by a standard dialog box. These types of controls are called composite controls because they are able to host other controls (native Windows controls and ActiveX controls).  \n  \n `CComCompositeControl` identifies the dialog resource to use in creating the composite control by looking for an enumerated data member in the child class. The member IDD of this child class is set to the resource ID of the dialog resource that will be used as the control's window. The following is an example of the data member that the class derived from `CComCompositeControl` should contain to identify the dialog resource to be used for the control's window:  \n  \n [!code-cpp[NVC_ATL_COM#13](../../atl/codesnippet/cpp/ccomcompositecontrol-class_1.h)]  \n  \n> [!NOTE]\n>  Composite controls are always windowed controls, although they can contain windowless controls.  \n  \n A control implemented by a `CComCompositeControl`-derived class has default tabbing behavior built in. When the control receives focus by being tabbed to in a containing application, successively pressing the TAB key will cause the focus to be cycled through all of the composite control's contained controls, then out of the composite control and on to the next item in the tab order of the container. The tab order of the hosted controls is determined by the dialog resource and determines the order in which tabbing will occur.  \n  \n> [!NOTE]\n>  In order for accelerators to work properly with a `CComCompositeControl`, it is necessary to load an accelerator table as the control is created, pass the handle and number of accelerators back into [IOleControlImpl::GetControlInfo](../../atl/reference/iolecontrolimpl-class.md#iolecontrolimpl__getcontrolinfo), and finally destroy the table when the control is released.  \n  \n## Example  \n [!code-cpp[NVC_ATL_COM#14](../../atl/codesnippet/cpp/ccomcompositecontrol-class_2.h)]  \n  \n## Inheritance Hierarchy  \n `WinBase`  \n  \n [CComControlBase](../../atl/reference/ccomcontrolbase-class.md)  \n  \n [CComControl](../../atl/reference/ccomcontrol-class.md)  \n  \n `CComCompositeControl`  \n  \n## Requirements  \n **Header:** atlctl.h  \n  \n##  <a name=\"ccomcompositecontrol__advisesinkmap\"></a>  CComCompositeControl::AdviseSinkMap  \n Call this method to advise or unadvise all controls hosted by the composite control.  \n  \n```\nHRESULT AdviseSinkMap(bool bAdvise);\n```  \n  \n### Parameters  \n `bAdvise`  \n True if all controls are to be advised; otherwise false.  \n  \n### Return Value  \n `S_OK`  \n All controls in the event sink map were connected or disconnected from their event source successfully.  \n  \n **E_FAIL**  \n Not all controls in the event sink map could be connected or disconnected from their event source successfully.  \n  \n `E_POINTER`  \n This error usually indicates a problem with an entry in the control's event sink map or a problem with a template argument used in an `IDispEventImpl` or `IDispEventSimpleImpl` base class.  \n  \n **CONNECT_E_ADVISELIMIT**  \n The connection point has already reached its limit of connections and cannot accept any more.  \n  \n **CONNECT_E_CANNOTCONNECT**  \n The sink does not support the interface required by this connection point.  \n  \n **CONNECT_E_NOCONNECTION**  \n The cookie value does not represent a valid connection. This error usually indicates a problem with an entry in the control's event sink map or a problem with a template argument used in an `IDispEventImpl` or `IDispEventSimpleImpl` base class.  \n  \n### Remarks  \n The base implementation of this method searches through the entries in the event sink map. It then advises or unadvises the connection points to the COM objects described by the event sink map's sink entries. This member method also relies on the fact that the derived class inherits from one instance of `IDispEventImpl` for every control in the sink map that is to be advised or unadvised.  \n  \n##  <a name=\"ccomcompositecontrol__calcextent\"></a>  CComCompositeControl::CalcExtent  \n Call this method to calculate the size in **HIMETRIC** units of the dialog resource used to host the composite control.  \n  \n```\nBOOL CalcExtent(SIZE& size);\n```  \n  \n### Parameters  \n `size`  \n A reference to a **SIZE** structure to be filled by this method.  \n  \n### Return Value  \n TRUE if the control is hosted by a dialog box; otherwise FALSE.  \n  \n### Remarks  \n The size is returned in the `size` parameter.  \n  \n##  <a name=\"ccomcompositecontrol__create\"></a>  CComCompositeControl::Create  \n This method is called to create the control window for the composite control.  \n  \n```\nHWND Create(HWND hWndParent,\n    RECT& /* rcPos */,\n    LPARAM dwInitParam = NULL);\n```  \n  \n### Parameters  \n `hWndParent`  \n A handle to the parent window of the control.  \n  \n `rcPos`  \n Reserved.  \n  \n `dwInitParam`  \n Data to be passed to the control during control creation. The data passed as `dwInitParam` will show up as the **LPARAM** parameter of the [WM_INITDIALOG](http://msdn.microsoft.com/library/windows/desktop/ms645428) message, which will be sent to the composite control when it gets created.  \n  \n### Return Value  \n A handle to the newly created composite control dialog box.  \n  \n### Remarks  \n This method is usually called during in-place activation of the control.  \n  \n##  <a name=\"ccomcompositecontrol__ccomcompositecontrol\"></a>  CComCompositeControl::CComCompositeControl  \n The constructor.  \n  \n```\nCComCompositeControl();\n```  \n  \n### Remarks  \n Initializes the [CComCompositeControl::m_hbrBackground](#ccomcompositecontrol__m_hbrbackground) and [CComCompositeControl::m_hWndFocus](#ccomcompositecontrol__m_hwndfocus) data members to NULL.  \n  \n##  <a name=\"ccomcompositecontrol___dtorccomcompositecontrol\"></a>  CComCompositeControl::~CComCompositeControl  \n The destructor.  \n  \n```\n~CComCompositeControl();\n```  \n  \n### Remarks  \n Deletes the background object, if it exists.  \n  \n##  <a name=\"ccomcompositecontrol__createcontrolwindow\"></a>  CComCompositeControl::CreateControlWindow  \n Call this method to create the control window and advise any hosted controls.  \n  \n```\nvirtual HWND CreateControlWindow(HWND hWndParent,\n    RECT& rcPos);\n```  \n  \n### Parameters  \n `hWndParent`  \n A handle to the parent window of the control.  \n  \n `rcPos`  \n The position rectangle of the composite control in client coordinates relative to `hWndParent`.  \n  \n### Return Value  \n Returns a handle to the newly created composite control dialog box.  \n  \n### Remarks  \n This method calls [CComCompositeControl::Create](#ccomcompositecontrol__create) and [CComCompositeControl::AdviseSinkMap](#ccomcompositecontrol__advisesinkmap).  \n  \n##  <a name=\"ccomcompositecontrol__m_hbrbackground\"></a>  CComCompositeControl::m_hbrBackground  \n The background brush.  \n  \n```\nHBRUSH m_hbrBackground;\n```  \n  \n##  <a name=\"ccomcompositecontrol__m_hwndfocus\"></a>  CComCompositeControl::m_hWndFocus  \n The handle of the window that currently has focus.  \n  \n```\nHWND m_hWndFocus;\n```  \n  \n##  <a name=\"ccomcompositecontrol__setbackgroundcolorfromambient\"></a>  CComCompositeControl::SetBackgroundColorFromAmbient  \n Call this method to set the background color of the composite control using the container's background color.  \n  \n```\nHRESULT SetBackgroundColorFromAmbient();\n```  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n## See Also  \n [CComControl Class](../../atl/reference/ccomcontrol-class.md)   \n [Composite Control Fundamentals](../../atl/atl-composite-control-fundamentals.md)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}