{"nodes":[{"pos":[12,48],"content":"CComSafeArray Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComSafeArray Class | Microsoft Docs","pos":[0,36]}]},{"content":"CComSafeArray Class","pos":[639,658]},{"pos":[659,715],"content":"This class is a wrapper for the <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure.","source":"This class is a wrapper for the **SAFEARRAY** structure."},{"content":"Syntax","pos":[724,730]},{"content":"Parameters","pos":[850,860]},{"content":"The type of data to be stored in the array.","pos":[871,914]},{"content":"Members","pos":[923,930]},{"content":"Public Constructors","pos":[940,959]},{"content":"Name","pos":[966,970]},{"content":"Description","pos":[971,982]},{"content":"CComSafeArray::CComSafeArray","pos":[1021,1049]},{"content":"The constructor.","pos":[1082,1098]},{"content":"CComSafeArray::~CComSafeArray","pos":[1104,1133]},{"content":"The destructor.","pos":[1171,1186]},{"content":"Public Methods","pos":[1197,1211]},{"content":"Name","pos":[1218,1222]},{"content":"Description","pos":[1223,1234]},{"content":"CComSafeArray::Add","pos":[1273,1291]},{"pos":[1314,1392],"content":"Adds one or more elements, or a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure, to a <ph id=\"ph1\">`CComSafeArray`</ph>.","source":"Adds one or more elements, or a **SAFEARRAY** structure, to a `CComSafeArray`."},{"content":"CComSafeArray::Attach","pos":[1398,1419]},{"pos":[1445,1508],"content":"Attaches a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure to a <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"Attaches a **SAFEARRAY** structure to a `CComSafeArray` object."},{"content":"CComSafeArray::CopyFrom","pos":[1514,1537]},{"pos":[1565,1646],"content":"Copies the contents of a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure into the <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"Copies the contents of a **SAFEARRAY** structure into the `CComSafeArray` object."},{"content":"CComSafeArray::CopyTo","pos":[1652,1673]},{"pos":[1699,1744],"content":"Creates a copy of the <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"Creates a copy of the `CComSafeArray` object."},{"content":"CComSafeArray::Create","pos":[1750,1771]},{"pos":[1797,1830],"content":"Creates a <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"Creates a `CComSafeArray` object."},{"content":"CComSafeArray::Destroy","pos":[1836,1858]},{"pos":[1885,1919],"content":"Destroys a <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"Destroys a `CComSafeArray` object."},{"content":"CComSafeArray::Detach","pos":[1925,1946]},{"pos":[1972,2027],"content":"Detaches a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> from a <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"Detaches a **SAFEARRAY** from a `CComSafeArray` object."},{"content":"CComSafeArray::GetAt","pos":[2033,2053]},{"content":"Retrieves a single element from a single-dimensional array.","pos":[2078,2137]},{"content":"CComSafeArray::GetCount","pos":[2143,2166]},{"content":"Returns the number of elements in the array.","pos":[2194,2238]},{"content":"CComSafeArray::GetDimensions","pos":[2244,2272]},{"content":"Returns the number of dimensions in the array.","pos":[2305,2351]},{"content":"CComSafeArray::GetLowerBound","pos":[2357,2385]},{"content":"Returns the lower bound for a given dimension of the array.","pos":[2418,2477]},{"content":"CComSafeArray::GetSafeArrayPtr","pos":[2483,2513]},{"pos":[2548,2595],"content":"Returns the address of the <ph id=\"ph1\">`m_psa`</ph> data member.","source":"Returns the address of the `m_psa` data member."},{"content":"CComSafeArray::GetType","pos":[2601,2623]},{"content":"Returns the type of data stored in the array.","pos":[2650,2695]},{"content":"CComSafeArray::GetUpperBound","pos":[2701,2729]},{"content":"Returns the upper bound for any dimension of the array.","pos":[2762,2817]},{"content":"CComSafeArray::IsSizable","pos":[2823,2847]},{"pos":[2876,2925],"content":"Tests if a <ph id=\"ph1\">`CComSafeArray`</ph> object can be resized.","source":"Tests if a `CComSafeArray` object can be resized."},{"content":"CComSafeArray::MultiDimGetAt","pos":[2931,2959]},{"content":"Retrieves a single element from a multidimensional array.","pos":[2992,3049]},{"content":"CComSafeArray::MultiDimSetAt","pos":[3055,3083]},{"content":"Sets the value of an element in a multidimensional array.","pos":[3116,3173]},{"content":"CComSafeArray::Resize","pos":[3179,3200]},{"pos":[3226,3259],"content":"Resizes a <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"Resizes a `CComSafeArray` object."},{"content":"CComSafeArray::SetAt","pos":[3265,3285]},{"content":"Sets the value of an element in a single-dimensional array.","pos":[3310,3369]},{"content":"Public Operators","pos":[3380,3396]},{"content":"Name","pos":[3403,3407]},{"content":"Description","pos":[3408,3419]},{"content":"CComSafeArray::operator LPSAFEARRAY","pos":[3458,3493]},{"pos":[3533,3574],"content":"Casts a value to a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> pointer.","source":"Casts a value to a **SAFEARRAY** pointer."},{"content":"CComSafeArray::operator","pos":[3580,3603]},{"content":"Retrieves an element from the array.","pos":[3660,3696]},{"content":"CComSafeArray::operator =","pos":[3702,3727]},{"content":"Assignment operator.","pos":[3758,3778]},{"content":"Public Data Members","pos":[3790,3809]},{"content":"Name","pos":[3816,3820]},{"content":"Description","pos":[3821,3832]},{"content":"CComSafeArray::m_psa","pos":[3871,3891]},{"pos":[3916,3982],"content":"This data member holds the address of the <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure.","source":"This data member holds the address of the **SAFEARRAY** structure."},{"content":"Remarks","pos":[3992,3999]},{"pos":[4019,4273],"content":"provides a wrapper for the <bpt id=\"p1\">[</bpt>SAFEARRAY Data Type<ept id=\"p1\">](http://msdn.microsoft.com/en-us/9ec8025b-4763-4526-ab45-390c5d8b3b1e)</ept> class, making it a simple matter to create and manage single- and multidimensional arrays of almost any of the VARIANT-supported types.","source":" provides a wrapper for the [SAFEARRAY Data Type](http://msdn.microsoft.com/en-us/9ec8025b-4763-4526-ab45-390c5d8b3b1e) class, making it a simple matter to create and manage single- and multidimensional arrays of almost any of the VARIANT-supported types."},{"pos":[4296,4443],"content":"simplifies passing arrays between processes, and in addition provides extra security by checking array index values against upper and lower bounds."},{"content":"The lower bound of a <ph id=\"ph1\">`CComSafeArray`</ph> can start at any user-defined value; however, arrays that are accessed through C++ should use a lower bound of 0.","pos":[4450,4600],"source":"The lower bound of a `CComSafeArray` can start at any user-defined value; however, arrays that are accessed through C++ should use a lower bound of 0."},{"content":"Other languages such as Visual Basic may use other bounding values (for example, -10 to 10).","pos":[4601,4693]},{"pos":[4700,4855],"content":"Use <bpt id=\"p1\">[</bpt>CComSafeArray::Create<ept id=\"p1\">](#ccomsafearray__create)</ept> to create a <ph id=\"ph1\">`CComSafeArray`</ph> object, and <bpt id=\"p2\">[</bpt>CComSafeArray::Destroy<ept id=\"p2\">](#ccomsafearray__destroy)</ept> to delete it.","source":"Use [CComSafeArray::Create](#ccomsafearray__create) to create a `CComSafeArray` object, and [CComSafeArray::Destroy](#ccomsafearray__destroy) to delete it."},{"pos":[4862,4935],"content":"A <ph id=\"ph1\">`CComSafeArray`</ph> can contain the following subset of VARIANT data types:","source":"A `CComSafeArray` can contain the following subset of VARIANT data types:"},{"content":"VARTYPE","pos":[4942,4949]},{"content":"Description","pos":[4950,4961]},{"content":"VT_I1","pos":[5002,5007]},{"content":"char","pos":[5008,5012]},{"content":"VT_I2","pos":[5017,5022]},{"content":"short","pos":[5023,5028]},{"content":"VT_I4","pos":[5033,5038]},{"content":"int","pos":[5039,5042]},{"content":"VT_I4","pos":[5047,5052]},{"content":"long","pos":[5053,5057]},{"content":"VT_I8","pos":[5062,5067]},{"content":"longlong","pos":[5068,5076]},{"content":"VT_UI1","pos":[5081,5087]},{"content":"byte","pos":[5088,5092]},{"content":"VT_UI2","pos":[5097,5103]},{"content":"ushort","pos":[5104,5110]},{"content":"VT_UI4","pos":[5115,5121]},{"content":"uint","pos":[5122,5126]},{"content":"VT_UI4","pos":[5131,5137]},{"content":"ulong","pos":[5138,5143]},{"content":"VT_UI8","pos":[5148,5154]},{"content":"ulonglong","pos":[5155,5164]},{"content":"VT_R4","pos":[5169,5174]},{"content":"float","pos":[5175,5180]},{"content":"VT_R8","pos":[5185,5190]},{"content":"double","pos":[5191,5197]},{"content":"VT_DECIMAL","pos":[5202,5212]},{"content":"decimal pointer","pos":[5213,5228]},{"content":"VT_VARIANT","pos":[5233,5243]},{"content":"variant pointer","pos":[5244,5259]},{"content":"VT_CY","pos":[5264,5269]},{"content":"Currency data type","pos":[5270,5288]},{"content":"Requirements","pos":[5298,5310]},{"pos":[5314,5335],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsafe.h","source":"**Header:** atlsafe.h"},{"content":"Example","pos":[5344,5351]},{"pos":[5366,5386],"content":"NVC_ATL_Utilities#75"},{"pos":[5486,5504],"content":"CComSafeArray::Add"},{"pos":[5508,5586],"content":"Adds one or more elements, or a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure, to a <ph id=\"ph1\">`CComSafeArray`</ph>.","source":"Adds one or more elements, or a **SAFEARRAY** structure, to a `CComSafeArray`."},{"content":"Parameters","pos":[5788,5798]},{"content":"A pointer to a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> object.","pos":[5814,5850],"source":" A pointer to a **SAFEARRAY** object."},{"content":"The number of objects to add to the array.","pos":[5870,5912]},{"content":"pT","pos":[5920,5922]},{"content":"A pointer to one or more objects to be added to the array.","pos":[5927,5985]},{"content":"t","pos":[5993,5994]},{"content":"A reference to the object to be added to the array.","pos":[5999,6050]},{"content":"Indicates whether a copy of the data should be created.","pos":[6068,6123]},{"content":"The default value is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>.","pos":[6124,6154],"source":" The default value is **TRUE**."},{"content":"Return Value","pos":[6164,6176]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[6180,6236]},{"content":"Remarks","pos":[6246,6253]},{"content":"The new objects are appended to the end of the existing <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> object.","pos":[6257,6334],"source":"The new objects are appended to the end of the existing **SAFEARRAY** object."},{"content":"Adding an object to a multidimensional <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> object is not supported.","pos":[6335,6412],"source":" Adding an object to a multidimensional **SAFEARRAY** object is not supported."},{"content":"When adding an existing array of objects, both arrays must contain elements of the same type.","pos":[6413,6506]},{"content":"The <ph id=\"ph1\">`bCopy`</ph> flag is taken into account when elements of type <ph id=\"ph2\">`BSTR`</ph> or <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> are added to an array.","pos":[6513,6618],"source":"The `bCopy` flag is taken into account when elements of type `BSTR` or **VARIANT** are added to an array."},{"content":"The default value of <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> ensures that a new copy is made of the data when the element is added to the array.","pos":[6619,6732],"source":" The default value of **TRUE** ensures that a new copy is made of the data when the element is added to the array."},{"pos":[6780,6801],"content":"CComSafeArray::Attach"},{"pos":[6805,6868],"content":"Attaches a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure to a <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"Attaches a **SAFEARRAY** structure to a `CComSafeArray` object."},{"content":"Parameters","pos":[6932,6942]},{"content":"A pointer to the <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure.","pos":[6958,6999],"source":" A pointer to the **SAFEARRAY** structure."},{"content":"Return Value","pos":[7009,7021]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[7025,7081]},{"content":"Remarks","pos":[7091,7098]},{"pos":[7102,7220],"content":"Attaches a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure to a <ph id=\"ph1\">`CComSafeArray`</ph> object, making the existing <ph id=\"ph2\">`CComSafeArray`</ph> methods available.","source":"Attaches a **SAFEARRAY** structure to a `CComSafeArray` object, making the existing `CComSafeArray` methods available."},{"pos":[7275,7303],"content":"CComSafeArray::CComSafeArray"},{"content":"The constructor.","pos":[7307,7323]},{"content":"Parameters","pos":[7684,7694]},{"content":"A <bpt id=\"p1\">**</bpt>SAFEARRAYBOUND<ept id=\"p1\">**</ept> structure.","pos":[7709,7740],"source":" A **SAFEARRAYBOUND** structure."},{"content":"The number of elements in the array.","pos":[7760,7796]},{"content":"The lower bound value; that is, the index of the first element in the array.","pos":[7816,7892]},{"content":"A pointer to a <bpt id=\"p1\">**</bpt>SAFEARRAYBOUND<ept id=\"p1\">**</ept> structure.","pos":[7911,7955],"source":" A pointer to a **SAFEARRAYBOUND** structure."},{"content":"The count of dimensions in the array.","pos":[7973,8010]},{"content":"A reference to a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure or <ph id=\"ph1\">`CComSafeArray`</ph> object.","pos":[8028,8095],"source":" A reference to a **SAFEARRAY** structure or `CComSafeArray` object."},{"content":"In either case the constructor uses this reference to make a copy of the array, so the array is not referenced after construction.","pos":[8096,8226]},{"content":"A pointer to a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure.","pos":[8245,8284],"source":" A pointer to a **SAFEARRAY** structure."},{"content":"The constructor uses this address to make a copy of the array, so the array is not referenced after construction.","pos":[8285,8398]},{"content":"Remarks","pos":[8408,8415]},{"pos":[8419,8452],"content":"Creates a <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"Creates a `CComSafeArray` object."},{"pos":[8512,8541],"content":"CComSafeArray::~CComSafeArray"},{"content":"The destructor.","pos":[8545,8560]},{"content":"Remarks","pos":[8608,8615]},{"content":"Frees all allocated resources.","pos":[8619,8649]},{"pos":[8699,8722],"content":"CComSafeArray::CopyFrom"},{"pos":[8726,8807],"content":"Copies the contents of a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure into the <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"Copies the contents of a **SAFEARRAY** structure into the `CComSafeArray` object."},{"content":"Parameters","pos":[8870,8880]},{"content":"Pointer to the <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> to copy.","pos":[8897,8934],"source":" Pointer to the **SAFEARRAY** to copy."},{"content":"Return Value","pos":[8944,8956]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[8960,9016]},{"content":"Remarks","pos":[9026,9033]},{"content":"This method copies the contents of a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> into the current <ph id=\"ph1\">`CComSafeArray`</ph> object.","pos":[9037,9128],"source":"This method copies the contents of a **SAFEARRAY** into the current `CComSafeArray` object."},{"content":"The existing contents of the array are replaced.","pos":[9129,9177]},{"pos":[9225,9246],"content":"CComSafeArray::CopyTo"},{"pos":[9250,9295],"content":"Creates a copy of the <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"Creates a copy of the `CComSafeArray` object."},{"content":"Parameters","pos":[9356,9366]},{"content":"A pointer to a location in which to create the new <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept>.","pos":[9383,9448],"source":" A pointer to a location in which to create the new **SAFEARRAY**."},{"content":"Return Value","pos":[9458,9470]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[9474,9530]},{"content":"Remarks","pos":[9540,9547]},{"pos":[9551,9642],"content":"This method copies the contents of a <ph id=\"ph1\">`CComSafeArray`</ph> object into a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure.","source":"This method copies the contents of a `CComSafeArray` object into a **SAFEARRAY** structure."},{"pos":[9690,9711],"content":"CComSafeArray::Create"},{"pos":[9715,9741],"content":"Creates a <ph id=\"ph1\">`CComSafeArray`</ph>.","source":"Creates a `CComSafeArray`."},{"content":"Parameters","pos":[9902,9912]},{"content":"A pointer to a <bpt id=\"p1\">**</bpt>SAFEARRAYBOUND<ept id=\"p1\">**</ept> object.","pos":[9928,9969],"source":" A pointer to a **SAFEARRAYBOUND** object."},{"content":"The number of dimensions in the array.","pos":[9987,10025]},{"content":"The number of elements in the array.","pos":[10045,10081]},{"content":"The lower bound value; that is, the index of the first element in the array.","pos":[10101,10177]},{"content":"Return Value","pos":[10187,10199]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[10203,10259]},{"content":"Remarks","pos":[10269,10276]},{"content":"A <ph id=\"ph1\">`CComSafeArray`</ph> object can be created from an existing <bpt id=\"p1\">**</bpt>SAFEARRAYBOUND<ept id=\"p1\">**</ept> structure and the number of dimensions, or by specifying the number of elements in the array and the lower bound.","pos":[10280,10469],"source":"A `CComSafeArray` object can be created from an existing **SAFEARRAYBOUND** structure and the number of dimensions, or by specifying the number of elements in the array and the lower bound."},{"content":"If the array is to be accessed from Visual C++, the lower bound should be 0.","pos":[10470,10546]},{"content":"Other languages may allow other values for the lower bound (for example, Visual Basic supports arrays with elements with a range such as -10 to 10).","pos":[10547,10695]},{"pos":[10744,10766],"content":"CComSafeArray::Destroy"},{"pos":[10770,10804],"content":"Destroys a <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"Destroys a `CComSafeArray` object."},{"content":"Return Value","pos":[10846,10858]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[10862,10918]},{"content":"Remarks","pos":[10928,10935]},{"pos":[10939,11015],"content":"Destroys an existing <ph id=\"ph1\">`CComSafeArray`</ph> object and all of the data it contains.","source":"Destroys an existing `CComSafeArray` object and all of the data it contains."},{"pos":[11063,11084],"content":"CComSafeArray::Detach"},{"pos":[11088,11143],"content":"Detaches a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> from a <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"Detaches a **SAFEARRAY** from a `CComSafeArray` object."},{"content":"Return Value","pos":[11188,11200]},{"pos":[11204,11248],"content":"Returns a pointer to a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> object.","source":"Returns a pointer to a **SAFEARRAY** object."},{"content":"Remarks","pos":[11258,11265]},{"pos":[11269,11347],"content":"This method detaches the <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> object from the <ph id=\"ph1\">`CComSafeArray`</ph> object.","source":"This method detaches the **SAFEARRAY** object from the `CComSafeArray` object."},{"pos":[11394,11414],"content":"CComSafeArray::GetAt"},{"content":"Retrieves a single element from a single-dimensional array.","pos":[11418,11477]},{"content":"Parameters","pos":[11531,11541]},{"content":"The index number of the value in the array to return.","pos":[11557,11610]},{"content":"Return Value","pos":[11620,11632]},{"content":"Returns a reference to the required array element.","pos":[11636,11686]},{"pos":[11736,11759],"content":"CComSafeArray::GetCount"},{"content":"Returns the number of elements in the array.","pos":[11763,11807]},{"content":"Parameters","pos":[11869,11879]},{"content":"The array dimension.","pos":[11893,11913]},{"content":"Return Value","pos":[11923,11935]},{"content":"Returns the number of elements in the array.","pos":[11939,11983]},{"content":"Remarks","pos":[11993,12000]},{"content":"When used with a multidimensional array, this method will return the number of elements in a specific dimension only.","pos":[12004,12121]},{"pos":[12176,12204],"content":"CComSafeArray::GetDimensions"},{"content":"Returns the number of dimensions in the array.","pos":[12208,12254]},{"content":"Return Value","pos":[12305,12317]},{"content":"Returns the number of dimensions in the array.","pos":[12321,12367]},{"pos":[12422,12450],"content":"CComSafeArray::GetLowerBound"},{"content":"Returns the lower bound for a given dimension of the array.","pos":[12454,12513]},{"content":"Parameters","pos":[12579,12589]},{"content":"The array dimension for which to get the lower bound.","pos":[12603,12656]},{"content":"If omitted, the default is 0.","pos":[12657,12686]},{"content":"Return Value","pos":[12696,12708]},{"content":"Returns the lower bound.","pos":[12712,12736]},{"content":"Remarks","pos":[12746,12753]},{"content":"If the lower bound is 0, this indicates a C-like array whose first element is element number 0.","pos":[12757,12852]},{"content":"In the event of an error, for example, an invalid dimension argument, this method calls <ph id=\"ph1\">`AtlThrow`</ph> with an HRESULT describing the error.","pos":[12853,12989],"source":" In the event of an error, for example, an invalid dimension argument, this method calls `AtlThrow` with an HRESULT describing the error."},{"pos":[13046,13076],"content":"CComSafeArray::GetSafeArrayPtr"},{"pos":[13080,13127],"content":"Returns the address of the <ph id=\"ph1\">`m_psa`</ph> data member.","source":"Returns the address of the `m_psa` data member."},{"content":"Return Value","pos":[13190,13202]},{"pos":[13206,13289],"content":"Returns a pointer to the <bpt id=\"p1\">[</bpt>CComSafeArray::m_psa<ept id=\"p1\">](#ccomsafearray__m_psa)</ept> data member.","source":"Returns a pointer to the [CComSafeArray::m_psa](#ccomsafearray__m_psa) data member."},{"pos":[13338,13360],"content":"CComSafeArray::GetType"},{"content":"Returns the type of data stored in the array.","pos":[13364,13409]},{"content":"Return Value","pos":[13457,13469]},{"content":"Returns the type of data stored in the array, which could be any of the following types:","pos":[13473,13561]},{"content":"VARTYPE","pos":[13568,13575]},{"content":"Description","pos":[13576,13587]},{"content":"VT_I1","pos":[13628,13633]},{"content":"char","pos":[13634,13638]},{"content":"VT_I2","pos":[13643,13648]},{"content":"short","pos":[13649,13654]},{"content":"VT_I4","pos":[13659,13664]},{"content":"int","pos":[13665,13668]},{"content":"VT_I4","pos":[13673,13678]},{"content":"long","pos":[13679,13683]},{"content":"VT_I8","pos":[13688,13693]},{"content":"longlong","pos":[13694,13702]},{"content":"VT_UI1","pos":[13707,13713]},{"content":"byte","pos":[13714,13718]},{"content":"VT_UI2","pos":[13723,13729]},{"content":"ushort","pos":[13730,13736]},{"content":"VT_UI4","pos":[13741,13747]},{"content":"uint","pos":[13748,13752]},{"content":"VT_UI4","pos":[13757,13763]},{"content":"ulong","pos":[13764,13769]},{"content":"VT_UI8","pos":[13774,13780]},{"content":"ulonglong","pos":[13781,13790]},{"content":"VT_R4","pos":[13795,13800]},{"content":"float","pos":[13801,13806]},{"content":"VT_R8","pos":[13811,13816]},{"content":"double","pos":[13817,13823]},{"content":"VT_DECIMAL","pos":[13828,13838]},{"content":"decimal pointer","pos":[13839,13854]},{"content":"VT_VARIANT","pos":[13859,13869]},{"content":"variant pointer","pos":[13870,13885]},{"content":"VT_CY","pos":[13890,13895]},{"content":"Currency data type","pos":[13896,13914]},{"pos":[13970,13998],"content":"CComSafeArray::GetUpperBound"},{"content":"Returns the upper bound for any dimension of the array.","pos":[14002,14057]},{"content":"Parameters","pos":[14123,14133]},{"content":"The array dimension for which to get the upper bound.","pos":[14147,14200]},{"content":"If omitted, the default is 0.","pos":[14201,14230]},{"content":"Return Value","pos":[14240,14252]},{"content":"Returns the upper bound.","pos":[14256,14280]},{"content":"This value is inclusive, the maximum valid index for this dimension.","pos":[14281,14349]},{"content":"Remarks","pos":[14359,14366]},{"pos":[14370,14506],"content":"In the event of an error, for example, an invalid dimension argument, this method calls <ph id=\"ph1\">`AtlThrow`</ph> with an HRESULT describing the error.","source":"In the event of an error, for example, an invalid dimension argument, this method calls `AtlThrow` with an HRESULT describing the error."},{"pos":[14557,14581],"content":"CComSafeArray::IsSizable"},{"pos":[14585,14634],"content":"Tests if a <ph id=\"ph1\">`CComSafeArray`</ph> object can be resized.","source":"Tests if a `CComSafeArray` object can be resized."},{"content":"Return Value","pos":[14681,14693]},{"pos":[14697,14776],"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the <ph id=\"ph1\">`CComSafeArray`</ph> can be resized, <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if it cannot.","source":"Returns **true** if the `CComSafeArray` can be resized, **false** if it cannot."},{"pos":[14823,14843],"content":"CComSafeArray::m_psa"},{"pos":[14847,14905],"content":"Holds the address of the <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> structure accessed.","source":"Holds the address of the **SAFEARRAY** structure accessed."},{"pos":[14992,15020],"content":"CComSafeArray::MultiDimGetAt"},{"content":"Retrieves a single element from a multidimensional array.","pos":[15024,15081]},{"content":"Parameters","pos":[15163,15173]},{"content":"Pointer to a vector of indexes for each dimension in the array.","pos":[15190,15253]},{"content":"The leftmost (most significant) dimension is <ph id=\"ph1\">`alIndex`</ph>[0] <bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[15254,15315],"source":" The leftmost (most significant) dimension is `alIndex`[0] *.*"},{"content":"t","pos":[15323,15324]},{"content":"A reference to the data returned.","pos":[15329,15362]},{"content":"Return Value","pos":[15372,15384]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[15388,15444]},{"pos":[15499,15527],"content":"CComSafeArray::MultiDimSetAt"},{"content":"Sets the value of an element in a multidimensional array.","pos":[15531,15588]},{"content":"Parameters","pos":[15676,15686]},{"content":"Pointer to a vector of indexes for each dimension in the array.","pos":[15703,15766]},{"content":"The rightmost (least significant) dimension is <ph id=\"ph1\">`alIndex`</ph>[0].","pos":[15767,15827],"source":" The rightmost (least significant) dimension is `alIndex`[0]."},{"content":"T","pos":[15835,15836]},{"content":"Specifies the value of the new element.","pos":[15841,15880]},{"content":"Return Value","pos":[15890,15902]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[15906,15962]},{"content":"Remarks","pos":[15972,15979]},{"pos":[15983,16067],"content":"This is a multidimensional version of <bpt id=\"p1\">[</bpt>CComSafeArray::SetAt<ept id=\"p1\">](#ccomsafearray__setat)</ept>.","source":"This is a multidimensional version of [CComSafeArray::SetAt](#ccomsafearray__setat)."},{"pos":[16120,16143],"content":"CComSafeArray::operator"},{"content":"Retrieves an element from the array.","pos":[16152,16188]},{"content":"Parameters","pos":[16287,16297]},{"content":"lIndex, nIndex","pos":[16302,16316]},{"content":"The index number of the required element in the array.","pos":[16321,16375]},{"content":"Return Value","pos":[16385,16397]},{"content":"Returns the appropriate array element.","pos":[16401,16439]},{"content":"Remarks","pos":[16449,16456]},{"pos":[16460,16602],"content":"Performs a similar function to <bpt id=\"p1\">[</bpt>CComSafeArray::GetAt<ept id=\"p1\">](#ccomsafearray__getat)</ept>, however this operator only works with single-dimensional arrays.","source":"Performs a similar function to [CComSafeArray::GetAt](#ccomsafearray__getat), however this operator only works with single-dimensional arrays."},{"pos":[16655,16680],"content":"CComSafeArray::operator ="},{"content":"Assignment operator.","pos":[16684,16704]},{"content":"Parameters","pos":[16858,16868]},{"content":"A reference to a <ph id=\"ph1\">`CComSafeArray`</ph> object.","pos":[16883,16923],"source":" A reference to a `CComSafeArray` object."},{"content":"A pointer to a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> object.","pos":[16942,16978],"source":" A pointer to a **SAFEARRAY** object."},{"content":"Return Value","pos":[16988,17000]},{"content":"Returns the type of data stored in the array.","pos":[17004,17049]},{"pos":[17111,17146],"content":"CComSafeArray::operator LPSAFEARRAY"},{"pos":[17150,17191],"content":"Casts a value to a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> pointer.","source":"Casts a value to a **SAFEARRAY** pointer."},{"content":"```operator LPSAFEARRAY() const;","pos":[17197,17229]},{"pos":[17416,17466],"content":"HRESULT Resize( const SAFEARRAYBOUND* pBound);","source":"HRESULT Resize(\n    const SAFEARRAYBOUND* pBound);"},{"pos":[18166,18237],"content":"HRESULT SetAt( LONG lIndex, const T&amp; t, BOOL bCopy = TRUE);","source":"HRESULT SetAt(\n    LONG lIndex,\n    const T& t,\n    BOOL bCopy = TRUE);"}],"content":"---\ntitle: \"CComSafeArray Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CComSafeArray\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CComSafeArray class\"\nms.assetid: ee349aef-33db-4c85-bd08-5d86a3c9d53a\ncaps.latest.revision: 26\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# CComSafeArray Class\nThis class is a wrapper for the **SAFEARRAY** structure.  \n  \n## Syntax  \n  \n```\ntemplate <typename  T,\n    VARTYPE _vartype = _ATL_AutomationType<T>::type>\nclass CComSafeArray\n```  \n  \n#### Parameters  \n `T`  \n The type of data to be stored in the array.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComSafeArray::CComSafeArray](#ccomsafearray__ccomsafearray)|The constructor.|  \n|[CComSafeArray::~CComSafeArray](#ccomsafearray___dtorccomsafearray)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComSafeArray::Add](#ccomsafearray__add)|Adds one or more elements, or a **SAFEARRAY** structure, to a `CComSafeArray`.|  \n|[CComSafeArray::Attach](#ccomsafearray__attach)|Attaches a **SAFEARRAY** structure to a `CComSafeArray` object.|  \n|[CComSafeArray::CopyFrom](#ccomsafearray__copyfrom)|Copies the contents of a **SAFEARRAY** structure into the `CComSafeArray` object.|  \n|[CComSafeArray::CopyTo](#ccomsafearray__copyto)|Creates a copy of the `CComSafeArray` object.|  \n|[CComSafeArray::Create](#ccomsafearray__create)|Creates a `CComSafeArray` object.|  \n|[CComSafeArray::Destroy](#ccomsafearray__destroy)|Destroys a `CComSafeArray` object.|  \n|[CComSafeArray::Detach](#ccomsafearray__detach)|Detaches a **SAFEARRAY** from a `CComSafeArray` object.|  \n|[CComSafeArray::GetAt](#ccomsafearray__getat)|Retrieves a single element from a single-dimensional array.|  \n|[CComSafeArray::GetCount](#ccomsafearray__getcount)|Returns the number of elements in the array.|  \n|[CComSafeArray::GetDimensions](#ccomsafearray__getdimensions)|Returns the number of dimensions in the array.|  \n|[CComSafeArray::GetLowerBound](#ccomsafearray__getlowerbound)|Returns the lower bound for a given dimension of the array.|  \n|[CComSafeArray::GetSafeArrayPtr](#ccomsafearray__getsafearrayptr)|Returns the address of the `m_psa` data member.|  \n|[CComSafeArray::GetType](#ccomsafearray__gettype)|Returns the type of data stored in the array.|  \n|[CComSafeArray::GetUpperBound](#ccomsafearray__getupperbound)|Returns the upper bound for any dimension of the array.|  \n|[CComSafeArray::IsSizable](#ccomsafearray__issizable)|Tests if a `CComSafeArray` object can be resized.|  \n|[CComSafeArray::MultiDimGetAt](#ccomsafearray__multidimgetat)|Retrieves a single element from a multidimensional array.|  \n|[CComSafeArray::MultiDimSetAt](#ccomsafearray__multidimsetat)|Sets the value of an element in a multidimensional array.|  \n|[CComSafeArray::Resize](#ccomsafearray__resize)|Resizes a `CComSafeArray` object.|  \n|[CComSafeArray::SetAt](#ccomsafearray__setat)|Sets the value of an element in a single-dimensional array.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComSafeArray::operator LPSAFEARRAY](#ccomsafearray__operator_lpsafearray)|Casts a value to a **SAFEARRAY** pointer.|  \n|[CComSafeArray::operator\\[\\]](ccomsafearray-class.md#ccomsafearray__operator_at)|Retrieves an element from the array.|  \n|[CComSafeArray::operator =](#ccomsafearray__operator_eq)|Assignment operator.|  \n\n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComSafeArray::m_psa](#ccomsafearray__m_psa)|This data member holds the address of the **SAFEARRAY** structure.|  \n  \n## Remarks  \n `CComSafeArray` provides a wrapper for the [SAFEARRAY Data Type](http://msdn.microsoft.com/en-us/9ec8025b-4763-4526-ab45-390c5d8b3b1e) class, making it a simple matter to create and manage single- and multidimensional arrays of almost any of the VARIANT-supported types.  \n  \n `CComSafeArray` simplifies passing arrays between processes, and in addition provides extra security by checking array index values against upper and lower bounds.  \n  \n The lower bound of a `CComSafeArray` can start at any user-defined value; however, arrays that are accessed through C++ should use a lower bound of 0. Other languages such as Visual Basic may use other bounding values (for example, -10 to 10).  \n  \n Use [CComSafeArray::Create](#ccomsafearray__create) to create a `CComSafeArray` object, and [CComSafeArray::Destroy](#ccomsafearray__destroy) to delete it.  \n  \n A `CComSafeArray` can contain the following subset of VARIANT data types:  \n  \n|VARTYPE|Description|  \n|-------------|-----------------|  \n|VT_I1|char|  \n|VT_I2|short|  \n|VT_I4|int|  \n|VT_I4|long|  \n|VT_I8|longlong|  \n|VT_UI1|byte|  \n|VT_UI2|ushort|  \n|VT_UI4|uint|  \n|VT_UI4|ulong|  \n|VT_UI8|ulonglong|  \n|VT_R4|float|  \n|VT_R8|double|  \n|VT_DECIMAL|decimal pointer|  \n|VT_VARIANT|variant pointer|  \n|VT_CY|Currency data type|  \n  \n## Requirements  \n **Header:** atlsafe.h  \n  \n## Example  \n [!code-cpp[NVC_ATL_Utilities#75](../../atl/codesnippet/cpp/ccomsafearray-class_1.cpp)]  \n  \n##  <a name=\"ccomsafearray__add\"></a>  CComSafeArray::Add  \n Adds one or more elements, or a **SAFEARRAY** structure, to a `CComSafeArray`.  \n  \n```\nHRESULT Add(\n    const SAFEARRAY* psaSrc);\n\n    HRESULT Add(\n    ULONG ulCount,\n    const T* pT,\n    BOOL bCopy = TRUE);\n\n    HRESULT Add(\n    const T& t,\n    BOOL bCopy = TRUE);\n```  \n  \n### Parameters  \n `psaSrc`  \n A pointer to a **SAFEARRAY** object.  \n  \n `ulCount`  \n The number of objects to add to the array.  \n  \n *pT*  \n A pointer to one or more objects to be added to the array.  \n  \n *t*  \n A reference to the object to be added to the array.  \n  \n `bCopy`  \n Indicates whether a copy of the data should be created. The default value is **TRUE**.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n The new objects are appended to the end of the existing **SAFEARRAY** object. Adding an object to a multidimensional **SAFEARRAY** object is not supported. When adding an existing array of objects, both arrays must contain elements of the same type.  \n  \n The `bCopy` flag is taken into account when elements of type `BSTR` or **VARIANT** are added to an array. The default value of **TRUE** ensures that a new copy is made of the data when the element is added to the array.  \n  \n##  <a name=\"ccomsafearray__attach\"></a>  CComSafeArray::Attach  \n Attaches a **SAFEARRAY** structure to a `CComSafeArray` object.  \n  \n```\nHRESULT Attach(const SAFEARRAY* psaSrc);\n```  \n  \n### Parameters  \n `psaSrc`  \n A pointer to the **SAFEARRAY** structure.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n Attaches a **SAFEARRAY** structure to a `CComSafeArray` object, making the existing `CComSafeArray` methods available.  \n  \n##  <a name=\"ccomsafearray__ccomsafearray\"></a>  CComSafeArray::CComSafeArray  \n The constructor.  \n  \n```\nCComSafeArray();\nCComSafeArray(\n const SAFEARRAYBOUND& bound);\n\n    CComSafeArray(\n ULONG  ulCount,\n    LONG lLBound = 0);\n\n    CComSafeArray(\n const SAFEARRAYBOUND* pBound,\n    UINT uDims = 1);\n\n    CComSafeArray(\n const CComSafeArray& saSrc);\n\n    CComSafeArray(\n const SAFEARRAY& saSrc);\n\n    CComSafeArray(\n const SAFEARRAY* psaSrc);\n```  \n  \n### Parameters  \n `bound`  \n A **SAFEARRAYBOUND** structure.  \n  \n `ulCount`  \n The number of elements in the array.  \n  \n `lLBound`  \n The lower bound value; that is, the index of the first element in the array.  \n  \n `pBound`  \n A pointer to a **SAFEARRAYBOUND** structure.  \n  \n `uDims`  \n The count of dimensions in the array.  \n  \n `saSrc`  \n A reference to a **SAFEARRAY** structure or `CComSafeArray` object. In either case the constructor uses this reference to make a copy of the array, so the array is not referenced after construction.  \n  \n `psaSrc`  \n A pointer to a **SAFEARRAY** structure. The constructor uses this address to make a copy of the array, so the array is not referenced after construction.  \n  \n### Remarks  \n Creates a `CComSafeArray` object.  \n  \n##  <a name=\"ccomsafearray___dtorccomsafearray\"></a>  CComSafeArray::~CComSafeArray  \n The destructor.  \n  \n```\n~CComSafeArray() throw()\n```  \n  \n### Remarks  \n Frees all allocated resources.  \n  \n##  <a name=\"ccomsafearray__copyfrom\"></a>  CComSafeArray::CopyFrom  \n Copies the contents of a **SAFEARRAY** structure into the `CComSafeArray` object.  \n  \n```\nHRESULT CopyFrom(LPSAFEARRAY* ppArray);\n```  \n  \n### Parameters  \n `ppArray`  \n Pointer to the **SAFEARRAY** to copy.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n This method copies the contents of a **SAFEARRAY** into the current `CComSafeArray` object. The existing contents of the array are replaced.  \n  \n##  <a name=\"ccomsafearray__copyto\"></a>  CComSafeArray::CopyTo  \n Creates a copy of the `CComSafeArray` object.  \n  \n```\nHRESULT CopyTo(LPSAFEARRAY* ppArray);\n```  \n  \n### Parameters  \n `ppArray`  \n A pointer to a location in which to create the new **SAFEARRAY**.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n This method copies the contents of a `CComSafeArray` object into a **SAFEARRAY** structure.  \n  \n##  <a name=\"ccomsafearray__create\"></a>  CComSafeArray::Create  \n Creates a `CComSafeArray`.  \n  \n```\nHRESULT Create(\n    const SAFEARRAYBOUND* pBound,\n    UINT uDims = 1);\n\n    HRESULT Create(\n    ULONG ulCount = 0,\n    LONG lLBound = 0);\n```  \n  \n### Parameters  \n `pBound`  \n A pointer to a **SAFEARRAYBOUND** object.  \n  \n `uDims`  \n The number of dimensions in the array.  \n  \n `ulCount`  \n The number of elements in the array.  \n  \n `lLBound`  \n The lower bound value; that is, the index of the first element in the array.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n A `CComSafeArray` object can be created from an existing **SAFEARRAYBOUND** structure and the number of dimensions, or by specifying the number of elements in the array and the lower bound. If the array is to be accessed from Visual C++, the lower bound should be 0. Other languages may allow other values for the lower bound (for example, Visual Basic supports arrays with elements with a range such as -10 to 10).  \n  \n##  <a name=\"ccomsafearray__destroy\"></a>  CComSafeArray::Destroy  \n Destroys a `CComSafeArray` object.  \n  \n```\nHRESULT Destroy();\n```  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n Destroys an existing `CComSafeArray` object and all of the data it contains.  \n  \n##  <a name=\"ccomsafearray__detach\"></a>  CComSafeArray::Detach  \n Detaches a **SAFEARRAY** from a `CComSafeArray` object.  \n  \n```\nLPSAFEARRAY Detach();\n```  \n  \n### Return Value  \n Returns a pointer to a **SAFEARRAY** object.  \n  \n### Remarks  \n This method detaches the **SAFEARRAY** object from the `CComSafeArray` object.  \n  \n##  <a name=\"ccomsafearray__getat\"></a>  CComSafeArray::GetAt  \n Retrieves a single element from a single-dimensional array.  \n  \n```\nT& GetAt(LONG   lIndex) const;\n```  \n  \n### Parameters  \n `lIndex`  \n The index number of the value in the array to return.  \n  \n### Return Value  \n Returns a reference to the required array element.  \n  \n##  <a name=\"ccomsafearray__getcount\"></a>  CComSafeArray::GetCount  \n Returns the number of elements in the array.  \n  \n```\nULONG GetCount(UINT   uDim = 0) const;\n```  \n  \n### Parameters  \n `uDim`  \n The array dimension.  \n  \n### Return Value  \n Returns the number of elements in the array.  \n  \n### Remarks  \n When used with a multidimensional array, this method will return the number of elements in a specific dimension only.  \n  \n##  <a name=\"ccomsafearray__getdimensions\"></a>  CComSafeArray::GetDimensions  \n Returns the number of dimensions in the array.  \n  \n```\nUINT GetDimensions() const;\n```  \n  \n### Return Value  \n Returns the number of dimensions in the array.  \n  \n##  <a name=\"ccomsafearray__getlowerbound\"></a>  CComSafeArray::GetLowerBound  \n Returns the lower bound for a given dimension of the array.  \n  \n```\nLONG GetLowerBound(UINT   uDim = 0) const;\n```  \n  \n### Parameters  \n `uDim`  \n The array dimension for which to get the lower bound. If omitted, the default is 0.  \n  \n### Return Value  \n Returns the lower bound.  \n  \n### Remarks  \n If the lower bound is 0, this indicates a C-like array whose first element is element number 0. In the event of an error, for example, an invalid dimension argument, this method calls `AtlThrow` with an HRESULT describing the error.  \n  \n##  <a name=\"ccomsafearray__getsafearrayptr\"></a>  CComSafeArray::GetSafeArrayPtr  \n Returns the address of the `m_psa` data member.  \n  \n```\nLPSAFEARRAY* GetSafeArrayPtr() throw();\n```  \n  \n### Return Value  \n Returns a pointer to the [CComSafeArray::m_psa](#ccomsafearray__m_psa) data member.  \n  \n##  <a name=\"ccomsafearray__gettype\"></a>  CComSafeArray::GetType  \n Returns the type of data stored in the array.  \n  \n```\nVARTYPE GetType() const;\n```  \n  \n### Return Value  \n Returns the type of data stored in the array, which could be any of the following types:  \n  \n|VARTYPE|Description|  \n|-------------|-----------------|  \n|VT_I1|char|  \n|VT_I2|short|  \n|VT_I4|int|  \n|VT_I4|long|  \n|VT_I8|longlong|  \n|VT_UI1|byte|  \n|VT_UI2|ushort|  \n|VT_UI4|uint|  \n|VT_UI4|ulong|  \n|VT_UI8|ulonglong|  \n|VT_R4|float|  \n|VT_R8|double|  \n|VT_DECIMAL|decimal pointer|  \n|VT_VARIANT|variant pointer|  \n|VT_CY|Currency data type|  \n  \n##  <a name=\"ccomsafearray__getupperbound\"></a>  CComSafeArray::GetUpperBound  \n Returns the upper bound for any dimension of the array.  \n  \n```\nLONG GetUpperBound(UINT   uDim = 0) const;\n```  \n  \n### Parameters  \n `uDim`  \n The array dimension for which to get the upper bound. If omitted, the default is 0.  \n  \n### Return Value  \n Returns the upper bound. This value is inclusive, the maximum valid index for this dimension.  \n  \n### Remarks  \n In the event of an error, for example, an invalid dimension argument, this method calls `AtlThrow` with an HRESULT describing the error.  \n  \n##  <a name=\"ccomsafearray__issizable\"></a>  CComSafeArray::IsSizable  \n Tests if a `CComSafeArray` object can be resized.  \n  \n```\nbool IsSizable() const;\n```  \n  \n### Return Value  \n Returns **true** if the `CComSafeArray` can be resized, **false** if it cannot.  \n  \n##  <a name=\"ccomsafearray__m_psa\"></a>  CComSafeArray::m_psa  \n Holds the address of the **SAFEARRAY** structure accessed.  \n  \n```\nLPSAFEARRAY m_psa;\n```  \n  \n##  <a name=\"ccomsafearray__multidimgetat\"></a>  CComSafeArray::MultiDimGetAt  \n Retrieves a single element from a multidimensional array.  \n  \n```\nHRESULT MultiDimGetAt(\n    const LONG* alIndex,\n    T& t);\n```  \n  \n### Parameters  \n `alIndex`  \n Pointer to a vector of indexes for each dimension in the array. The leftmost (most significant) dimension is `alIndex`[0] *.*  \n  \n *t*  \n A reference to the data returned.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"ccomsafearray__multidimsetat\"></a>  CComSafeArray::MultiDimSetAt  \n Sets the value of an element in a multidimensional array.  \n  \n```\nHRESULT MultiDimSetAt(\n    const LONG* alIndex,\n    const T& t);\n```  \n  \n### Parameters  \n `alIndex`  \n Pointer to a vector of indexes for each dimension in the array. The rightmost (least significant) dimension is `alIndex`[0].  \n  \n *T*  \n Specifies the value of the new element.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n This is a multidimensional version of [CComSafeArray::SetAt](#ccomsafearray__setat).  \n  \n##  <a name=\"ccomsafearray__operator_at\"></a>  CComSafeArray::operator \\[\\]  \n Retrieves an element from the array.  \n  \n```\nT& operator[](long   lindex) const;\n\n    T& operator[](int   nindex) const;\n```  \n  \n### Parameters  \n *lIndex, nIndex*  \n The index number of the required element in the array.  \n  \n### Return Value  \n Returns the appropriate array element.  \n  \n### Remarks  \n Performs a similar function to [CComSafeArray::GetAt](#ccomsafearray__getat), however this operator only works with single-dimensional arrays.  \n  \n##  <a name=\"ccomsafearray__operator_eq\"></a>  CComSafeArray::operator =  \n Assignment operator.  \n  \n```\nATL::CComSafeArray<T>& operator=(const ATL::CComSafeArray& saSrc);\n\n    ATL::CComSafeArray<T>& operator=(const SAFEARRAY* psaSrc);\n```  \n  \n### Parameters  \n `saSrc`  \n A reference to a `CComSafeArray` object.  \n  \n `psaSrc`  \n A pointer to a **SAFEARRAY** object.  \n  \n### Return Value  \n Returns the type of data stored in the array.  \n  \n##  <a name=\"ccomsafearray__operator_lpsafearray\"></a>  CComSafeArray::operator LPSAFEARRAY  \n Casts a value to a **SAFEARRAY** pointer.  \n  \n```operator LPSAFEARRAY() const;\n```  \n  \n### Return Value  \n Casts a value to a **SAFEARRAY** pointer.  \n  \n##  <a name=\"ccomsafearray__resize\"></a>  CComSafeArray::Resize  \n Resizes a `CComSafeArray` object.  \n  \n```\nHRESULT Resize(\n    const SAFEARRAYBOUND* pBound);\n\n    HRESULT Resize(\n    ULONG ulCount,\n    LONG lLBound = 0);\n```  \n  \n### Parameters  \n `pBound`  \n A pointer to a **SAFEARRAYBOUND** structure that contains information on the number of elements and the lower bound of an array.  \n  \n `ulCount`  \n The requested number of objects in the resized array.  \n  \n `lLBound`  \n The lower bound.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n This method only resizes the rightmost dimension. It will not resize arrays that return **IsResizable** as **false**.  \n  \n##  <a name=\"ccomsafearray__setat\"></a>  CComSafeArray::SetAt  \n Sets the value of an element in a single-dimensional array.  \n  \n```\nHRESULT SetAt(\n    LONG lIndex,\n    const T& t,\n    BOOL bCopy = TRUE);\n```  \n  \n### Parameters  \n `lIndex`  \n The index number of the array element to set.  \n  \n *t*  \n The new value of the specified element.  \n  \n `bCopy`  \n Indicates whether a copy of the data should be created. The default value is **TRUE**.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n The `bCopy` flag is taken into account when elements of type `BSTR` or **VARIANT** are added to an array. The default value of **TRUE** ensures that a new copy is made of the data when the element is added to the array.  \n  \n## See Also  \n [SAFEARRAY Data Type](http://msdn.microsoft.com/en-us/9ec8025b-4763-4526-ab45-390c5d8b3b1e)   \n [CComSafeArray::Create](#ccomsafearray__create)   \n [CComSafeArray::Destroy](#ccomsafearray__destroy)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}