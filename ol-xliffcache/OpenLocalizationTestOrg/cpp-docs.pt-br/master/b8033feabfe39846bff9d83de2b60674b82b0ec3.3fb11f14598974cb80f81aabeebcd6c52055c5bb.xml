{"nodes":[{"pos":[12,36],"content":"bss_seg | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"bss_seg | Microsoft Docs","pos":[0,24]}]},{"content":"bss_seg","pos":[646,653]},{"content":"Specifies the segment where uninitialized variables are stored in the .obj file.","pos":[654,734]},{"content":"Syntax","pos":[743,749]},{"content":"Remarks","pos":[875,882]},{"content":"Obj files can be viewed with the <bpt id=\"p1\">[</bpt>dumpbin<ept id=\"p1\">](../build/reference/dumpbin-command-line.md)</ept> application.","pos":[886,985],"source":"Obj files can be viewed with the [dumpbin](../build/reference/dumpbin-command-line.md) application."},{"content":"The default segment in the .obj file for uninitialized data is .bss.","pos":[986,1054]},{"content":"In some cases use of <bpt id=\"p1\">**</bpt>bss_seg<ept id=\"p1\">**</ept> can speed load times by grouping uninitialized data into one section.","pos":[1055,1157],"source":" In some cases use of **bss_seg** can speed load times by grouping uninitialized data into one section."},{"pos":[1164,1222],"content":"<bpt id=\"p1\">**</bpt>bss_seg<ept id=\"p1\">**</ept> with no parameters resets the segment to .bss.","source":"**bss_seg** with no parameters resets the segment to .bss."},{"content":"<bpt id=\"p1\">**</bpt>push<ept id=\"p1\">**</ept>(optional)","pos":[1229,1247],"source":"**push**(optional)"},{"content":"Puts a record on the internal compiler stack.","pos":[1251,1296]},{"content":"A <bpt id=\"p1\">**</bpt>push<ept id=\"p1\">**</ept> can have an <bpt id=\"p2\">*</bpt>identifier<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>segment-name<ept id=\"p3\">*</ept>.","pos":[1297,1352],"source":" A **push** can have an *identifier* and *segment-name*."},{"content":"<bpt id=\"p1\">**</bpt>pop<ept id=\"p1\">**</ept> (optional)","pos":[1359,1377],"source":"**pop** (optional)"},{"content":"Removes a record from the top of the internal compiler stack.","pos":[1381,1442]},{"content":"<bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept> (optional)","pos":[1449,1472],"source":"*identifier* (optional)"},{"content":"When used with <bpt id=\"p1\">**</bpt>push<ept id=\"p1\">**</ept>, assigns a name to the record on the internal compiler stack.","pos":[1476,1561],"source":" When used with **push**, assigns a name to the record on the internal compiler stack."},{"content":"When used with <bpt id=\"p1\">**</bpt>pop<ept id=\"p1\">**</ept>, pops records off the internal stack until <bpt id=\"p2\">*</bpt>identifier<ept id=\"p2\">*</ept> is removed; if <bpt id=\"p3\">*</bpt>identifier<ept id=\"p3\">*</ept> is not found on the internal stack, nothing is popped.","pos":[1562,1723],"source":" When used with **pop**, pops records off the internal stack until *identifier* is removed; if *identifier* is not found on the internal stack, nothing is popped."},{"pos":[1730,1811],"content":"<bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept> enables multiple records to be popped with a single <bpt id=\"p2\">**</bpt>pop<ept id=\"p2\">**</ept> command.","source":"*identifier* enables multiple records to be popped with a single **pop** command."},{"content":"<bpt id=\"p1\">*</bpt>\"segment-name\"<ept id=\"p1\">*</ept>(optional)","pos":[1818,1844],"source":"*\"segment-name\"*(optional)"},{"content":"The name of a segment<bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[1848,1872],"source":" The name of a segment*.*"},{"content":"When used with <bpt id=\"p1\">**</bpt>pop<ept id=\"p1\">**</ept>, the stack is popped and <bpt id=\"p2\">*</bpt>segment-name<ept id=\"p2\">*</ept> becomes the active segment name.","pos":[1873,1968],"source":" When used with **pop**, the stack is popped and *segment-name* becomes the active segment name."},{"content":"<bpt id=\"p1\">*</bpt>\"segment-class\"<ept id=\"p1\">*</ept> (optional)","pos":[1975,2003],"source":"*\"segment-class\"* (optional)"},{"content":"Included for compatibility with C++ prior to version 2.0.","pos":[2007,2064]},{"content":"It is ignored.","pos":[2065,2079]},{"content":"Example","pos":[2088,2095]},{"pos":[2525,2736],"content":"You can also specify sections for initialized data (<bpt id=\"p1\">[</bpt>data_seg<ept id=\"p1\">](../preprocessor/data-seg.md)</ept>), functions (<bpt id=\"p2\">[</bpt>code_seg<ept id=\"p2\">](../preprocessor/code-seg.md)</ept>), and const variables (<bpt id=\"p3\">[</bpt>const_seg<ept id=\"p3\">](../preprocessor/const-seg.md)</ept>).","source":"You can also specify sections for initialized data ([data_seg](../preprocessor/data-seg.md)), functions ([code_seg](../preprocessor/code-seg.md)), and const variables ([const_seg](../preprocessor/const-seg.md))."},{"pos":[2743,2838],"content":"Data allocated using the <bpt id=\"p1\">**</bpt>bss_seg<ept id=\"p1\">**</ept> pragma does not retain any information about its location.","source":"Data allocated using the **bss_seg** pragma does not retain any information about its location."},{"pos":[2845,2981],"content":"See <bpt id=\"p1\">[</bpt>/SECTION<ept id=\"p1\">](../build/reference/section-specify-section-attributes.md)</ept> for a list of names you should not use when creating a section.","source":"See [/SECTION](../build/reference/section-specify-section-attributes.md) for a list of names you should not use when creating a section."},{"content":"See Also","pos":[2990,2998]},{"content":"Pragma Directives and the __Pragma Keyword","pos":[3003,3045]}],"content":"---\ntitle: \"bss_seg | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"vc-pragma.bss_seg\"\n  - \"bss_seg_CPP\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"pragmas, bss_seg\"\n  - \"bss_seg pragma\"\nms.assetid: 755f0154-de51-4778-97d3-c9b24e445079\ncaps.latest.revision: 6\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# bss_seg\nSpecifies the segment where uninitialized variables are stored in the .obj file.  \n  \n## Syntax  \n  \n```  \n  \n#pragma bss_seg( [ [ { push | pop }, ] [ identifier, ] ] [ \"segment-name\" [, \"segment-class\" ] )  \n```  \n  \n## Remarks  \n Obj files can be viewed with the [dumpbin](../build/reference/dumpbin-command-line.md) application. The default segment in the .obj file for uninitialized data is .bss. In some cases use of **bss_seg** can speed load times by grouping uninitialized data into one section.  \n  \n **bss_seg** with no parameters resets the segment to .bss.  \n  \n **push**(optional)  \n Puts a record on the internal compiler stack. A **push** can have an *identifier* and *segment-name*.  \n  \n **pop** (optional)  \n Removes a record from the top of the internal compiler stack.  \n  \n *identifier* (optional)  \n When used with **push**, assigns a name to the record on the internal compiler stack. When used with **pop**, pops records off the internal stack until *identifier* is removed; if *identifier* is not found on the internal stack, nothing is popped.  \n  \n *identifier* enables multiple records to be popped with a single **pop** command.  \n  \n *\"segment-name\"*(optional)  \n The name of a segment*.* When used with **pop**, the stack is popped and *segment-name* becomes the active segment name.  \n  \n *\"segment-class\"* (optional)  \n Included for compatibility with C++ prior to version 2.0. It is ignored.  \n  \n## Example  \n  \n```  \n// pragma_directive_bss_seg.cpp  \nint i;                     // stored in .bss  \n#pragma bss_seg(\".my_data1\")  \nint j;                     // stored in \"my_data1\"  \n  \n#pragma bss_seg(push, stack1, \".my_data2\")     \nint l;                     // stored in \"my_data2\"  \n  \n#pragma bss_seg(pop, stack1)   // pop stack1 from stack  \nint m;                     // stored in \"stack_data1\"  \n  \nint main() {  \n}  \n```  \n  \n You can also specify sections for initialized data ([data_seg](../preprocessor/data-seg.md)), functions ([code_seg](../preprocessor/code-seg.md)), and const variables ([const_seg](../preprocessor/const-seg.md)).  \n  \n Data allocated using the **bss_seg** pragma does not retain any information about its location.  \n  \n See [/SECTION](../build/reference/section-specify-section-attributes.md) for a list of names you should not use when creating a section.  \n  \n## See Also  \n [Pragma Directives and the __Pragma Keyword](../preprocessor/pragma-directives-and-the-pragma-keyword.md)"}