<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e79d0443d3e0c947abf54f15213c71a4824c2566</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\compiler-warnings\compiler-warning-level-1-c4789.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38057a01f56ab6bc74a75f989f8c2bcb55d67411</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9710d396cdfef0151708b02deb7ee86ef802eddf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compiler Warning (Level 1) C4789 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiler Warning (Level 1) C4789</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>buffer 'identifier' of size N bytes will be overrun; M bytes will be written starting at offset L</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Warns about buffer overrun when specific C run-time (CRT) functions are used, parameters are passed, and assignments are performed, such that the data sizes are known at compile time.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This warning is for situations that might elude typical data-size mismatch detection.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The warning appears when data, whose length is known at compile time, is copied and put into a data block whose size is known at compile time to be too small for the data.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The copy must be done by using the intrinsic form of one of the following CRT functions:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>strcpy</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>memset</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>memcpy<ept id="p1">](../../c-runtime-library/reference/memcpy-wmemcpy.md)</ept>, <bpt id="p2">[</bpt>wmemcpy<ept id="p2">](../../c-runtime-library/reference/memcpy-wmemcpy.md)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The warning also appears when a parameter datatype is mismatched by using a cast, and then a copy assignment from an lvalue reference is attempted.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Visual C++ might generate this warning for a code path that does not ever execute.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can temporarily disable the warning by using <ph id="ph1">`#pragma`</ph>, as shown in this example:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This keeps Visual C++ from generating the warning for that specific block of code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`#pragma(push)`</ph> preserves the existing state before <ph id="ph2">`#pragma warning(disable: 4789)`</ph> changes it.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`#pragma(pop)`</ph> restores the pushed state, and removes the effects of the <ph id="ph2">`#pragma warning(disable:4789)`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about the C++ preprocessor directive <ph id="ph1">`#pragma`</ph>, see <bpt id="p1">[</bpt>warning<ept id="p1">](../../preprocessor/warning.md)</ept> and <bpt id="p2">[</bpt>Pragma Directives and the __Pragma Keyword<ept id="p2">](../../preprocessor/pragma-directives-and-the-pragma-keyword.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following sample generates C4789.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following sample also generates C4789.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>