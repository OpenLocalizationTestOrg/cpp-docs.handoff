{"nodes":[{"pos":[12,66],"content":"&lt;mutex&gt; functions and variables | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"mutex<ph id=\"ph1\">&amp;gt;</ph> functions and variables | Microsoft Docs","pos":[4,54],"source":"mutex&gt; functions and variables | Microsoft Docs"}]},{"content":"mutex<ph id=\"ph1\">&amp;gt;</ph> functions and variables","pos":[273,306],"source":"mutex&gt; functions and variables"},{"content":"adopt_lock Variable","pos":[326,345]},{"content":"call_once Function","pos":[370,388]},{"content":"defer_lock Variable","pos":[412,431]},{"content":"lock Function","pos":[460,473]},{"content":"try_to_lock Variable","pos":[492,512]},{"pos":[583,602],"content":"adopt_lock Variable"},{"pos":[606,869],"content":"Represents an object that can be passed to constructors for <bpt id=\"p1\">[</bpt>lock_guard<ept id=\"p1\">](../standard-library/lock-guard-class.md)</ept> and <bpt id=\"p2\">[</bpt>unique_lock<ept id=\"p2\">](../standard-library/unique-lock-class.md)</ept> to indicate that the mutex object that is also being passed to the constructor is locked.","source":"Represents an object that can be passed to constructors for [lock_guard](../standard-library/lock-guard-class.md) and [unique_lock](../standard-library/unique-lock-class.md) to indicate that the mutex object that is also being passed to the constructor is locked."},{"pos":[961,970],"content":"call_once"},{"content":"Provides a mechanism for calling a specified callable object exactly once during execution.","pos":[974,1065]},{"content":"Parameters","pos":[1193,1203]},{"content":"A <bpt id=\"p1\">[</bpt>once_flag<ept id=\"p1\">](../standard-library/once-flag-structure.md)</ept> object that ensures that the callable object is only called once.","pos":[1217,1340],"source":" A [once_flag](../standard-library/once-flag-structure.md) object that ensures that the callable object is only called once."},{"content":"A callable object.","pos":[1354,1372]},{"content":"An argument list.","pos":[1386,1403]},{"content":"Remarks","pos":[1413,1420]},{"content":"If <ph id=\"ph1\">`Flag`</ph> is not valid, the function throws a <bpt id=\"p1\">[</bpt>system_error<ept id=\"p1\">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id=\"ph2\">`invalid_argument`</ph>.","pos":[1424,1573],"source":"If `Flag` is not valid, the function throws a [system_error](../standard-library/system-error-class.md) that has an error code of `invalid_argument`."},{"content":"Otherwise, the template function uses its <ph id=\"ph1\">`Flag`</ph> argument to ensure that it calls <ph id=\"ph2\">`F(A...)`</ph> successfully exactly once, regardless of how many times the template function is called.","pos":[1574,1754],"source":" Otherwise, the template function uses its `Flag` argument to ensure that it calls `F(A...)` successfully exactly once, regardless of how many times the template function is called."},{"content":"If <ph id=\"ph1\">`F(A...)`</ph> exits by throwing an exception, the call was not successful.","pos":[1755,1828],"source":" If `F(A...)` exits by throwing an exception, the call was not successful."},{"pos":[1874,1893],"content":"defer_lock Variable"},{"content":"Represents an object that can be passed to the constructor for <bpt id=\"p1\">[</bpt>unique_lock<ept id=\"p1\">](../standard-library/unique-lock-class.md)</ept>.","pos":[1897,2016],"source":"Represents an object that can be passed to the constructor for [unique_lock](../standard-library/unique-lock-class.md)."},{"content":"This indicates that the constructor should not lock the mutex object that's also being passed to it.","pos":[2017,2117]},{"pos":[2204,2208],"content":"lock"},{"content":"Attempts to lock all arguments without deadlock.","pos":[2212,2260]},{"content":"Remarks","pos":[2358,2365]},{"pos":[2369,2486],"content":"The arguments to the template function must be <bpt id=\"p1\">*</bpt>mutex types<ept id=\"p1\">*</ept>, except that calls to <ph id=\"ph1\">`try_lock`</ph> might throw exceptions.","source":"The arguments to the template function must be *mutex types*, except that calls to `try_lock` might throw exceptions."},{"content":"The function locks all of its arguments without deadlock by calls to <ph id=\"ph1\">`lock`</ph>, <ph id=\"ph2\">`try_lock`</ph>, and <ph id=\"ph3\">`unlock`</ph>.","pos":[2493,2595],"source":"The function locks all of its arguments without deadlock by calls to `lock`, `try_lock`, and `unlock`."},{"content":"If a call to <ph id=\"ph1\">`lock`</ph> or <ph id=\"ph2\">`try_lock`</ph> throws an exception, the function calls <ph id=\"ph3\">`unlock`</ph> on any of the mutex objects that were successfully locked before rethrowing the exception.","pos":[2596,2769],"source":" If a call to `lock` or `try_lock` throws an exception, the function calls `unlock` on any of the mutex objects that were successfully locked before rethrowing the exception."},{"pos":[2816,2836],"content":"try_to_lock Variable"},{"pos":[2840,3074],"content":"Represents an object that can be passed to the constructor for <bpt id=\"p1\">[</bpt>unique_lock<ept id=\"p1\">](../standard-library/unique-lock-class.md)</ept> to indicate that the constructor should try to unlock the <ph id=\"ph1\">`mutex`</ph> that is also being passed to it without blocking.","source":"Represents an object that can be passed to the constructor for [unique_lock](../standard-library/unique-lock-class.md) to indicate that the constructor should try to unlock the `mutex` that is also being passed to it without blocking."},{"content":"See Also","pos":[3132,3140]},{"content":"mutex&gt;","pos":[3147,3153],"source":"mutex>"}],"content":"---\ntitle: \"&lt;mutex&gt; functions and variables | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 78ab3c8b-c7db-4226-ac93-e2e78ff8b964\ncaps.latest.revision: 11\nmanager: \"ghogen\"\n---\n# &lt;mutex&gt; functions and variables\n||||  \n|-|-|-|  \n|[adopt_lock Variable](#adopt_lock_variable)|[call_once Function](#call_once_function)|[defer_lock Variable](#defer_lock_variable)|  \n|[lock Function](#lock_function)|[try_to_lock Variable](#try_to_lock_variable)|  \n  \n##  <a name=\"adopt_lock_variable\"></a>  adopt_lock Variable  \n Represents an object that can be passed to constructors for [lock_guard](../standard-library/lock-guard-class.md) and [unique_lock](../standard-library/unique-lock-class.md) to indicate that the mutex object that is also being passed to the constructor is locked.  \n  \n```cpp\nconst adopt_lock_t adopt_lock;\n```  \n  \n##  <a name=\"call_once_function\"></a>  call_once  \n Provides a mechanism for calling a specified callable object exactly once during execution.  \n  \n```\ntemplate <class Callable, class... Args>\nvoid call_once(once_flag& Flag,\n    Callable F&&, Args&&... A);\n```  \n  \n### Parameters  \n `Flag`  \n A [once_flag](../standard-library/once-flag-structure.md) object that ensures that the callable object is only called once.  \n  \n `F`  \n A callable object.  \n  \n `A`  \n An argument list.  \n  \n### Remarks  \n If `Flag` is not valid, the function throws a [system_error](../standard-library/system-error-class.md) that has an error code of `invalid_argument`. Otherwise, the template function uses its `Flag` argument to ensure that it calls `F(A...)` successfully exactly once, regardless of how many times the template function is called. If `F(A...)` exits by throwing an exception, the call was not successful.  \n  \n##  <a name=\"defer_lock_variable\"></a>  defer_lock Variable  \n Represents an object that can be passed to the constructor for [unique_lock](../standard-library/unique-lock-class.md). This indicates that the constructor should not lock the mutex object that's also being passed to it.  \n  \n```cpp\nconst defer_lock_t defer_lock;\n```  \n  \n##  <a name=\"lock_function\"></a>  lock  \n Attempts to lock all arguments without deadlock.  \n  \n```cpp\ntemplate <class L1, class L2, class... L3>\nvoid lock(L1&, L2&, L3&...);\n```  \n  \n### Remarks  \n The arguments to the template function must be *mutex types*, except that calls to `try_lock` might throw exceptions.  \n  \n The function locks all of its arguments without deadlock by calls to `lock`, `try_lock`, and `unlock`. If a call to `lock` or `try_lock` throws an exception, the function calls `unlock` on any of the mutex objects that were successfully locked before rethrowing the exception.  \n  \n##  <a name=\"try_to_lock_variable\"></a>  try_to_lock Variable  \n Represents an object that can be passed to the constructor for [unique_lock](../standard-library/unique-lock-class.md) to indicate that the constructor should try to unlock the `mutex` that is also being passed to it without blocking.  \n  \n```cpp\nconst try_to_lock_t try_to_lock;\n```  \n  \n## See Also  \n [\\<mutex>](../standard-library/mutex.md)\n\n\n\n"}