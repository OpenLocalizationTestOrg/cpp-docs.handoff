{"nodes":[{"pos":[12,45],"content":"function (C-C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"function (C-C++) | Microsoft Docs","pos":[0,33]}]},{"content":"function (C/C++)","pos":[660,676]},{"content":"Specifies that calls to functions specified in the pragma's argument list be generated.","pos":[677,764]},{"content":"Syntax","pos":[773,779]},{"content":"Remarks","pos":[857,864]},{"content":"If you use the <bpt id=\"p1\">**</bpt>intrinsic<ept id=\"p1\">**</ept> pragma (or /Oi) to tell the compiler to generate intrinsic functions (intrinsic functions are generated as inline code, not as function calls), you can use the <bpt id=\"p2\">**</bpt>function<ept id=\"p2\">**</ept> pragma to explicitly force a function call.","pos":[868,1113],"source":"If you use the **intrinsic** pragma (or /Oi) to tell the compiler to generate intrinsic functions (intrinsic functions are generated as inline code, not as function calls), you can use the **function** pragma to explicitly force a function call."},{"content":"Once a function pragma is seen, it takes effect at the first function definition containing a specified intrinsic function.","pos":[1114,1237]},{"content":"The effect continues to the end of the source file or to the appearance of an <bpt id=\"p1\">**</bpt>intrinsic<ept id=\"p1\">**</ept> pragma specifying the same intrinsic function.","pos":[1238,1376],"source":" The effect continues to the end of the source file or to the appearance of an **intrinsic** pragma specifying the same intrinsic function."},{"content":"The <bpt id=\"p1\">**</bpt>function<ept id=\"p1\">**</ept> pragma can be used only outside of a function — at the global level.","pos":[1377,1462],"source":" The **function** pragma can be used only outside of a function — at the global level."},{"pos":[1469,1577],"content":"For lists of the functions that have intrinsic forms, see <bpt id=\"p1\">[</bpt>#pragma intrinsic<ept id=\"p1\">](../preprocessor/intrinsic.md)</ept>.","source":"For lists of the functions that have intrinsic forms, see [#pragma intrinsic](../preprocessor/intrinsic.md)."},{"content":"Example","pos":[1586,1593]},{"content":"See Also","pos":[2862,2870]},{"content":"Pragma Directives and the __Pragma Keyword","pos":[2875,2917]}],"content":"---\ntitle: \"function (C-C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"function_CPP\"\n  - \"vc-pragma.function\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"function pragma\"\n  - \"pragmas, function\"\nms.assetid: cbd1bd60-fabf-4b5a-9c3d-2d9f4b871365\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# function (C/C++)\nSpecifies that calls to functions specified in the pragma's argument list be generated.  \n  \n## Syntax  \n  \n```  \n  \n#pragma function( function1 [, function2, ...] )  \n```  \n  \n## Remarks  \n If you use the **intrinsic** pragma (or /Oi) to tell the compiler to generate intrinsic functions (intrinsic functions are generated as inline code, not as function calls), you can use the **function** pragma to explicitly force a function call. Once a function pragma is seen, it takes effect at the first function definition containing a specified intrinsic function. The effect continues to the end of the source file or to the appearance of an **intrinsic** pragma specifying the same intrinsic function. The **function** pragma can be used only outside of a function — at the global level.  \n  \n For lists of the functions that have intrinsic forms, see [#pragma intrinsic](../preprocessor/intrinsic.md).  \n  \n## Example  \n  \n```  \n// pragma_directive_function.cpp  \n#include <ctype.h>  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <string.h>  \n  \n// use intrinsic forms of memset and strlen  \n#pragma intrinsic(memset, strlen)  \n  \n// Find first word break in string, and set remaining  \n// chars in string to specified char value.  \nchar *set_str_after_word(char *string, char ch) {  \n   int i;  \n   int len = strlen(string);  /* NOTE: uses intrinsic for strlen */  \n  \n   for(i = 0; i < len; i++) {  \n      if (isspace(*(string + i)))   \n         break;  \n   }  \n  \n   for(; i < len; i++)   \n      *(string + i) = ch;  \n  \n   return string;  \n}  \n  \n// do not use strlen intrinsic  \n#pragma function(strlen)  \n  \n// Set all chars in string to specified char value.  \nchar *set_str(char *string, char ch) {  \n   // Uses intrinsic for memset, but calls strlen library function  \n   return (char *) memset(string, ch, strlen(string));  \n}  \n  \nint main() {  \n   char *str = (char *) malloc(20 * sizeof(char));  \n  \n   strcpy_s(str, sizeof(\"Now is the time\"), \"Now is the time\");  \n   printf(\"str is '%s'\\n\", set_str_after_word(str, '*'));  \n   printf(\"str is '%s'\\n\", set_str(str, '!'));  \n}  \n```  \n  \n```Output  \nstr is 'Now************'  \nstr is '!!!!!!!!!!!!!!!'  \n```  \n  \n## See Also  \n [Pragma Directives and the __Pragma Keyword](../preprocessor/pragma-directives-and-the-pragma-keyword.md)"}