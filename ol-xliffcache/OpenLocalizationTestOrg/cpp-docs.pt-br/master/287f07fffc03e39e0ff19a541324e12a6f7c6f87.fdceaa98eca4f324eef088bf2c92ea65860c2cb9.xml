{"nodes":[{"pos":[12,37],"content":"_heapadd | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_heapadd | Microsoft Docs","pos":[0,25]}]},{"content":"_heapadd","pos":[918,926]},{"content":"Adds memory to the heap.","pos":[927,951]},{"pos":[959,1066],"content":"[!IMPORTANT]\n This function is obsolete. Beginning in Visual Studio 2015, it is not available in the CRT.","leadings":["","> "],"nodes":[{"content":" This function is obsolete. Beginning in Visual Studio 2015, it is not available in the CRT.","pos":[13,105],"nodes":[{"content":"This function is obsolete.","pos":[1,27]},{"content":"Beginning in Visual Studio 2015, it is not available in the CRT.","pos":[28,92]}]}]},{"content":"Syntax","pos":[1075,1081]},{"content":"Parameters","pos":[1168,1178]},{"content":"Pointer to the heap memory.","pos":[1196,1223]},{"content":"Size of memory to add, in bytes.","pos":[1240,1272]},{"content":"Return Value","pos":[1281,1293]},{"pos":[1297,1398],"content":"If successful, <ph id=\"ph1\">`_heapadd`</ph> returns 0; otherwise, the function returns –1 and sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`ENOSYS`</ph>.","source":"If successful, `_heapadd` returns 0; otherwise, the function returns –1 and sets `errno` to `ENOSYS`."},{"pos":[1405,1578],"content":"For more information about this and other return codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about this and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[1587,1594]},{"content":"Beginning with Visual C++ version 4.0, the underlying heap structure was moved to the C run-time libraries to support the new debugging features.","pos":[1598,1743]},{"content":"As a result, <ph id=\"ph1\">`_heapadd`</ph> is no longer supported on any platform that is based on the Win32 API.","pos":[1744,1838],"source":" As a result, `_heapadd` is no longer supported on any platform that is based on the Win32 API."},{"content":"Requirements","pos":[1847,1859]},{"content":"Routine","pos":[1866,1873]},{"content":"Required header","pos":[1874,1889]},{"content":"Optional header","pos":[1890,1905]},{"content":"malloc.h&gt;","pos":[1985,1994],"source":"malloc.h>"},{"content":"errno.h&gt;","pos":[1997,2005],"source":"errno.h>"},{"pos":[2013,2128],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../c-runtime-library/compatibility.md) in the Introduction."},{"content":".NET Framework Equivalent","pos":[2137,2162]},{"content":"Not applicable.","pos":[2166,2181]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[2182,2229],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[2230,2355],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[2364,2372]},{"content":"Memory Allocation","pos":[2377,2394]},{"content":"free","pos":[2444,2448]},{"content":"_heapchk","pos":[2495,2503]},{"content":"_heapmin","pos":[2553,2561]},{"content":"_heapset","pos":[2611,2619]},{"content":"_heapwalk","pos":[2659,2668]},{"content":"malloc","pos":[2719,2725]},{"content":"realloc","pos":[2774,2781]}],"content":"---\ntitle: \"_heapadd | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_heapadd\"\napilocation: \n  - \"msvcr100.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcrt.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr90.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"heapadd\"\n  - \"_heapadd\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_heapadd function\"\n  - \"memory, adding to heaps\"\n  - \"heaps, adding memory\"\n  - \"heapadd function\"\nms.assetid: 4d691fe2-2763-49f4-afb1-62738b7cd3ff\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _heapadd\nAdds memory to the heap.  \n  \n> [!IMPORTANT]\n>  This function is obsolete. Beginning in Visual Studio 2015, it is not available in the CRT.  \n  \n## Syntax  \n  \n```  \nint _heapadd(   \n   void *memblock,  \n   size_t size   \n);  \n```  \n  \n#### Parameters  \n `memblock`  \n Pointer to the heap memory.  \n  \n `size`  \n Size of memory to add, in bytes.  \n  \n## Return Value  \n If successful, `_heapadd` returns 0; otherwise, the function returns –1 and sets `errno` to `ENOSYS`.  \n  \n For more information about this and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n Beginning with Visual C++ version 4.0, the underlying heap structure was moved to the C run-time libraries to support the new debugging features. As a result, `_heapadd` is no longer supported on any platform that is based on the Win32 API.  \n  \n## Requirements  \n  \n|Routine|Required header|Optional header|  \n|-------------|---------------------|---------------------|  \n|`_heapadd`|\\<malloc.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Memory Allocation](../c-runtime-library/memory-allocation.md)   \n [free](../c-runtime-library/reference/free.md)   \n [_heapchk](../c-runtime-library/reference/heapchk.md)   \n [_heapmin](../c-runtime-library/reference/heapmin.md)   \n [_heapset](../c-runtime-library/heapset.md)   \n [_heapwalk](../c-runtime-library/reference/heapwalk.md)   \n [malloc](../c-runtime-library/reference/malloc.md)   \n [realloc](../c-runtime-library/reference/realloc.md)"}