{"nodes":[{"pos":[12,60],"content":"L-Value and R-Value Expressions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"L-Value and R-Value Expressions | Microsoft Docs","pos":[0,48]}]},{"content":"L-Value and R-Value Expressions","pos":[674,705]},{"content":"Expressions that refer to memory locations are called \"l-value\" expressions.","pos":[706,782]},{"content":"An l-value represents a storage region's \"locator\" value, or a \"left\" value, implying that it can appear on the left of the equal sign (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">=</ph><ept id=\"p1\">**</ept>).","pos":[783,926],"source":" An l-value represents a storage region's \"locator\" value, or a \"left\" value, implying that it can appear on the left of the equal sign (**=**)."},{"content":"L-values are often identifiers.","pos":[927,958]},{"content":"Expressions referring to modifiable locations are called \"modifiable l-values.\"","pos":[965,1044]},{"content":"A modifiable l-value cannot have an array type, an incomplete type, or a type with the <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> attribute.","pos":[1045,1152],"source":" A modifiable l-value cannot have an array type, an incomplete type, or a type with the **const** attribute."},{"content":"For structures and unions to be modifiable l-values, they must not have any members with the <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> attribute.","pos":[1153,1266],"source":" For structures and unions to be modifiable l-values, they must not have any members with the **const** attribute."},{"content":"The name of the identifier denotes a storage location, while the value of the variable is the value stored at that location.","pos":[1267,1391]},{"content":"An identifier is a modifiable l-value if it refers to a memory location and if its type is arithmetic, structure, union, or pointer.","pos":[1398,1530]},{"content":"For example, if <ph id=\"ph1\">`ptr`</ph> is a pointer to a storage region, then <ph id=\"ph2\">`*ptr`</ph> is a modifiable l-value that designates the storage region to which <ph id=\"ph3\">`ptr`</ph> points.","pos":[1531,1680],"source":" For example, if `ptr` is a pointer to a storage region, then `*ptr` is a modifiable l-value that designates the storage region to which `ptr` points."},{"content":"Any of the following C expressions can be l-value expressions:","pos":[1687,1749]},{"content":"An identifier of integral, floating, pointer, structure, or union type","pos":[1759,1829]},{"pos":[1839,1906],"content":"A subscript (<bpt id=\"p1\">**</bpt>[ ]<ept id=\"p1\">**</ept>) expression that does not evaluate to an array","source":"A subscript (**[ ]**) expression that does not evaluate to an array"},{"pos":[1916,1963],"content":"A member-selection expression (<bpt id=\"p1\">**</bpt>–&gt;<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>.<ept id=\"p2\">**</ept>)","source":"A member-selection expression (**–>** or **.**)"},{"pos":[1973,2044],"content":"A unary-indirection (<bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>) expression that does not refer to an array","source":"A unary-indirection (**\\***) expression that does not refer to an array"},{"content":"An l-value expression in parentheses","pos":[2054,2090]},{"pos":[2100,2144],"content":"A <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> object (a nonmodifiable l-value)","source":"A **const** object (a nonmodifiable l-value)"},{"content":"The term \"r-value\" is sometimes used to describe the value of an expression and to distinguish it from an l-value.","pos":[2151,2265]},{"content":"All l-values are r-values but not all r-values are l-values.","pos":[2266,2326]},{"content":"Microsoft Specific","pos":[2335,2353]},{"content":"Microsoft C includes an extension to the ANSI C standard that allows casts of l-values to be used as l-values, as long as the size of the object is not lengthened through the cast.","pos":[2362,2542]},{"content":"(See <bpt id=\"p1\">[</bpt>Type-Cast Conversions<ept id=\"p1\">](../c-language/type-cast-conversions.md)</ept> for more information.) The following example illustrates this feature:","pos":[2543,2682],"source":" (See [Type-Cast Conversions](../c-language/type-cast-conversions.md) for more information.) The following example illustrates this feature:"},{"content":"The default for Microsoft C is that the Microsoft extensions are enabled.","pos":[2831,2904]},{"content":"Use the /Za compiler option to disable these extensions.","pos":[2905,2961]},{"content":"END Microsoft Specific","pos":[2970,2992]},{"content":"See Also","pos":[3003,3011]},{"content":"Operands and Expressions","pos":[3016,3040]}],"content":"---\ntitle: \"L-Value and R-Value Expressions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"L-values\"\n  - \"member-selection expressions\"\n  - \"R-value expressions\"\n  - \"subscript expressions\"\nms.assetid: b790303e-ec6f-4d0d-bc55-df42da267172\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# L-Value and R-Value Expressions\nExpressions that refer to memory locations are called \"l-value\" expressions. An l-value represents a storage region's \"locator\" value, or a \"left\" value, implying that it can appear on the left of the equal sign (**=**). L-values are often identifiers.  \n  \n Expressions referring to modifiable locations are called \"modifiable l-values.\" A modifiable l-value cannot have an array type, an incomplete type, or a type with the **const** attribute. For structures and unions to be modifiable l-values, they must not have any members with the **const** attribute. The name of the identifier denotes a storage location, while the value of the variable is the value stored at that location.  \n  \n An identifier is a modifiable l-value if it refers to a memory location and if its type is arithmetic, structure, union, or pointer. For example, if `ptr` is a pointer to a storage region, then `*ptr` is a modifiable l-value that designates the storage region to which `ptr` points.  \n  \n Any of the following C expressions can be l-value expressions:  \n  \n-   An identifier of integral, floating, pointer, structure, or union type  \n  \n-   A subscript (**[ ]**) expression that does not evaluate to an array  \n  \n-   A member-selection expression (**–>** or **.**)  \n  \n-   A unary-indirection (**\\***) expression that does not refer to an array  \n  \n-   An l-value expression in parentheses  \n  \n-   A **const** object (a nonmodifiable l-value)  \n  \n The term \"r-value\" is sometimes used to describe the value of an expression and to distinguish it from an l-value. All l-values are r-values but not all r-values are l-values.  \n  \n **Microsoft Specific**  \n  \n Microsoft C includes an extension to the ANSI C standard that allows casts of l-values to be used as l-values, as long as the size of the object is not lengthened through the cast. (See [Type-Cast Conversions](../c-language/type-cast-conversions.md) for more information.) The following example illustrates this feature:  \n  \n```  \nchar *p ;  \nshort  i;  \nlong l;  \n  \n(long *) p = &l ;       /* Legal cast   */  \n(long) i = l ;          /* Illegal cast */  \n```  \n  \n The default for Microsoft C is that the Microsoft extensions are enabled. Use the /Za compiler option to disable these extensions.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Operands and Expressions](../c-language/operands-and-expressions.md)"}