<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf909cc3aed5d3d156f767a2951f95474a1990e5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl-mfc-shared\cfixedstringt-example-of-a-custom-string-manager.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50811c687afdafed69339a9a4f9aaa08eb39dce6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">774974167abf1cd778062547a8b2327bef1b204e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CFixedStringT: Example of a Custom String Manager | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CFixedStringT: Example of a Custom String Manager</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The ATL library implements one example of a custom string manager used by class <bpt id="p1">[</bpt>CFixedStringT<ept id="p1">](../atl-mfc-shared/reference/cfixedstringt-class.md)</ept>, called <bpt id="p2">**</bpt>CFixedStringMgr<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>is derived from <bpt id="p1">[</bpt>CStringT<ept id="p1">](../atl-mfc-shared/reference/cstringt-class.md)</ept> and implements a string that allocates its character data as part of the <ph id="ph1">`CFixedStringT`</ph> object itself as long as the string is less than the length specified by the <bpt id="p2">**</bpt>t_nChars<ept id="p2">**</ept> template parameter of <ph id="ph2">`CFixedStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>With this approach, the string does not need the heap at all, unless the length of the string grows beyond the size of the fixed buffer.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`CFixedStringT`</ph> does not always use a heap to allocate its string data, it cannot use <bpt id="p1">**</bpt>CAtlStringMgr<ept id="p1">**</ept> as its string manager.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It uses a custom string manager (<bpt id="p1">**</bpt>CFixedStringMgr<ept id="p1">**</ept>), implementing the <bpt id="p2">[</bpt>IAtlStringMgr<ept id="p2">](../atl-mfc-shared/reference/iatlstringmgr-class.md)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This interface is discussed in <bpt id="p1">[</bpt>Implementation of a Custom String Manager (Advanced Method)<ept id="p1">](../atl-mfc-shared/implementation-of-a-custom-string-manager-advanced-method.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The constructor for <bpt id="p1">**</bpt>CFixedStringMgr<ept id="p1">**</ept> takes three parameters:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>pData:<ept id="p1">**</ept> A pointer to the fixed <ph id="ph1">`CStringData`</ph> structure to be used.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>nChars:<ept id="p1">**</ept> The maximum number of characters the <ph id="ph1">`CStringData`</ph> structure can hold.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>pMgr:<ept id="p1">**</ept> A pointer to the <ph id="ph1">`IAtlStringMgr`</ph> interface of a "backup string manager."</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The constructor stores the values of <ph id="ph1">`pData`</ph> and <bpt id="p1">**</bpt>pMgr<ept id="p1">**</ept> in their respective member variables (<ph id="ph2">`m_pData`</ph> and <bpt id="p2">**</bpt>m_pMgr<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It then sets the length of the buffer to zero, the available length equal to the maximum size of the fixed buffer, and the reference count to â€“1.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The reference count value indicates the buffer is locked and to use this instance of <bpt id="p1">**</bpt>CFixedStringMgr<ept id="p1">**</ept> as the string manager.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Marking the buffer as locked prevents other <ph id="ph1">`CStringT`</ph> instances from holding a shared reference to the buffer.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If other <ph id="ph1">`CStringT`</ph> instances were allowed to share the buffer it would be possible for the buffer contained by <ph id="ph2">`CFixedStringT`</ph> to be deleted while other strings were still using the buffer.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CFixedStringMgr<ept id="p1">**</ept> is a full implementation of the <ph id="ph1">`IAtlStringMgr`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The implementation of each method is discussed separately.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Implementation of CFixedStringMgr::Allocate</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The implementation of <bpt id="p1">**</bpt>CFixedStringMgr::Allocate<ept id="p1">**</ept> first checks to see if the requested size of the string is less than or equal to the size of the fixed buffer (stored in the <ph id="ph1">`m_pData`</ph> member).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the fixed buffer is large enough, <bpt id="p1">**</bpt>CFixedStringMgr<ept id="p1">**</ept> locks the fixed buffer with a length of zero.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>As long as the string length does not grow beyond the size of the fixed buffer, <ph id="ph1">`CStringT`</ph> will not have to reallocate the buffer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the requested size of the string is greater than the fixed buffer <bpt id="p1">**</bpt>CFixedStringMgr<ept id="p1">**</ept> forwards the request to the backup string manager.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The backup string manager is presumed to allocate the buffer from the heap.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, before returning this buffer <bpt id="p1">**</bpt>CFixedStringMgr<ept id="p1">**</ept> locks the buffer and replaces the buffer's string manager pointer with a pointer to the <bpt id="p2">**</bpt>CFixedStringMgr<ept id="p2">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This ensures that attempts to reallocate or free the buffer by <ph id="ph1">`CStringT`</ph> will call into <bpt id="p1">**</bpt>CFixedStringMgr<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Implementation of CFixedStringMgr::ReAllocate</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The implementation of <bpt id="p1">**</bpt>CFixedStringMgr::ReAllocate<ept id="p1">**</ept> is very similar to its implementation of <bpt id="p2">**</bpt>Allocate<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the buffer being reallocated is the fixed buffer and the requested buffer size is smaller than the fixed buffer, no allocation is done.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>However, if the buffer being reallocated is not the fixed buffer, it must be a buffer allocated with the backup manager.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this case the backup manager is used to reallocate the buffer.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the buffer being reallocated is the fixed buffer and the new buffer size is too large to fit within the fixed buffer, <bpt id="p1">**</bpt>CFixedStringMgr<ept id="p1">**</ept> allocates a new buffer using the backup manager.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The contents of the fixed buffer are then copied into the new buffer.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Implementation of CFixedStringMgr::Free</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The implementation of <bpt id="p1">**</bpt>CFixedStringMgr::Free<ept id="p1">**</ept> follows the same pattern as <bpt id="p2">**</bpt>Allocate<ept id="p2">**</ept> and <ph id="ph1">`ReAllocate`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the buffer being freed is the fixed buffer, the method sets it to a zero-length locked buffer.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the buffer being freed was allocated with the backup manager, <bpt id="p1">**</bpt>CFixedStringMgr<ept id="p1">**</ept> uses the backup manager to free it.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Implementation of CFixedStringMgr::Clone</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The implementation of <bpt id="p1">**</bpt>CFixedStringMgr::Clone<ept id="p1">**</ept> always returns a pointer to the backup manager rather than the <bpt id="p2">**</bpt>CFixedStringMgr<ept id="p2">**</ept> itself.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This happens because every instance of <bpt id="p1">**</bpt>CFixedStringMgr<ept id="p1">**</ept> can only be associated with a single instance of <ph id="ph1">`CStringT`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Any other instances of <ph id="ph1">`CStringT`</ph> trying to clone the manager should get the backup manager instead.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is because the backup manager supports being shared.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Implementation of CFixedStringMgr::GetNilString</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The implementation of <bpt id="p1">**</bpt>CFixedStringMgr::GetNilString<ept id="p1">**</ept> returns the fixed buffer.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Because of the one-on-one correspondence of <bpt id="p1">**</bpt>CFixedStringMgr<ept id="p1">**</ept> and <ph id="ph1">`CStringT`</ph>, a given instance of <ph id="ph2">`CStringT`</ph> never uses more than one buffer at a time.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Therefore, a nil string and a real string buffer are never needed at the same time.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Whenever the fixed buffer is not in use, <bpt id="p1">**</bpt>CFixedStringMgr<ept id="p1">**</ept> ensures that it is initialized with a zero length.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This allows it to be used as the nil string.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>As an added bonus, the <ph id="ph1">`nAllocLength`</ph> member of the fixed buffer is always set to the full size of the fixed buffer.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This means that <ph id="ph1">`CStringT`</ph> can grow the string without calling <bpt id="p1">[</bpt>IAtlStringMgr::Reallocate<ept id="p1">](../atl-mfc-shared/reference/iatlstringmgr-class.md#iatlstringmgr__reallocate)</ept>, even for the nil string.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> cstringt.h</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Memory Management with CStringT</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>