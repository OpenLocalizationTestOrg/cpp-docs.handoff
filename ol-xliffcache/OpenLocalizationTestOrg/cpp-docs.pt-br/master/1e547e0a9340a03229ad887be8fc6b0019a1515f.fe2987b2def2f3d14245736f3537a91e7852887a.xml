{"nodes":[{"pos":[12,65],"content":"-permissive- (Standards conformance) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-permissive- (Standards conformance) | Microsoft Docs","pos":[0,53]}]},{"content":"/permissive- (Standards conformance)","pos":[767,803]},{"content":"Specify standards conformance mode to the compiler.","pos":[804,855]},{"content":"Use this option to help you identify and fix conformance issues in your code, to make it both more correct and more portable.","pos":[856,981]},{"content":"Syntax","pos":[990,996]},{"content":"Remarks","pos":[1028,1035]},{"content":"You can use the <bpt id=\"p1\">**</bpt>/permissive-<ept id=\"p1\">**</ept> compiler option to specify standards-conforming compiler behavior.","pos":[1041,1140],"source":"You can use the **/permissive-** compiler option to specify standards-conforming compiler behavior."},{"content":"This option disables permissive behaviors, and sets the <bpt id=\"p1\">[</bpt>/Zc<ept id=\"p1\">](../../build/reference/zc-conformance.md)</ept> compiler options for strict conformance.","pos":[1141,1284],"source":" This option disables permissive behaviors, and sets the [/Zc](../../build/reference/zc-conformance.md) compiler options for strict conformance."},{"content":"In the IDE, this option also makes the IntelliSense engine underline non-conforming code.","pos":[1285,1374]},{"content":"By default, the <bpt id=\"p1\">**</bpt>/permissive-<ept id=\"p1\">**</ept> option is not set.","pos":[1377,1428],"source":"By default, the **/permissive-** option is not set."},{"content":"When the option is set, the compiler generates diagnostic errors or warnings when non-standard language constructs are detected in your code, including some common bugs in pre-C++11 code.","pos":[1429,1616]},{"content":"The <bpt id=\"p1\">**</bpt>/permissive-<ept id=\"p1\">**</ept> option sets the <bpt id=\"p2\">[</bpt>/Zc:strictStrings<ept id=\"p2\">](../../build/reference/zc-conformance.md)</ept> and <bpt id=\"p3\">[</bpt>/Zc:rvalueCast<ept id=\"p3\">](../../build/reference/zc-conformance.md)</ept> options to conforming behavior.","pos":[1620,1811],"source":"The **/permissive-** option sets the [/Zc:strictStrings](../../build/reference/zc-conformance.md) and [/Zc:rvalueCast](../../build/reference/zc-conformance.md) options to conforming behavior."},{"content":"They default to non-conforming behavior.","pos":[1812,1852]},{"content":"You can pass specific <bpt id=\"p1\">**</bpt>/Zc<ept id=\"p1\">**</ept> options after <bpt id=\"p2\">**</bpt>/permissive-<ept id=\"p2\">**</ept> on the command line to override this behavior.","pos":[1853,1960],"source":" You can pass specific **/Zc** options after **/permissive-** on the command line to override this behavior."},{"content":"Environment-specific extensions and language areas that the standard leaves up to the implementation are not affected by <bpt id=\"p1\">**</bpt>/permissive-<ept id=\"p1\">**</ept>.","pos":[1966,2104],"source":"Environment-specific extensions and language areas that the standard leaves up to the implementation are not affected by **/permissive-**."},{"content":"For example, the Microsoft-specific <ph id=\"ph1\">`__declspec`</ph>, calling convention and structured exception handling keywords, and compiler-specific pragma directives or attributes are not flagged by the compiler in <bpt id=\"p1\">**</bpt>/permissive-<ept id=\"p1\">**</ept> mode.","pos":[2105,2329],"source":" For example, the Microsoft-specific `__declspec`, calling convention and structured exception handling keywords, and compiler-specific pragma directives or attributes are not flagged by the compiler in **/permissive-** mode."},{"content":"The <bpt id=\"p1\">**</bpt>/permissive-<ept id=\"p1\">**</ept> option uses the conformance support in the current compiler version to determine which language constructs are non-conforming.","pos":[2335,2482],"source":"The **/permissive-** option uses the conformance support in the current compiler version to determine which language constructs are non-conforming."},{"content":"The option does not determine if your code conforms to a specific version of the C++ standard.","pos":[2483,2577]},{"content":"To enable all implemented compiler support for the latest draft standard, use the <bpt id=\"p1\">[</bpt>/std:latest<ept id=\"p1\">](../../build/reference/std-specify-language-standard-version.md)</ept> option.","pos":[2578,2745],"source":" To enable all implemented compiler support for the latest draft standard, use the [/std:latest](../../build/reference/std-specify-language-standard-version.md) option."},{"content":"To restrict the compiler support to more closely match the C++14 standard, use the <bpt id=\"p1\">[</bpt>/std:c++14<ept id=\"p1\">](../../build/reference/std-specify-language-standard-version.md)</ept> option, which is the default.","pos":[2746,2935],"source":" To restrict the compiler support to more closely match the C++14 standard, use the [/std:c++14](../../build/reference/std-specify-language-standard-version.md) option, which is the default."},{"content":"Not all C++11, C++14, or draft C++17 standards-conforming code is supported by the Visual C++ compiler in Visual Studio 2017 RC.","pos":[2939,3067]},{"content":"The <bpt id=\"p1\">**</bpt>/permissive-<ept id=\"p1\">**</ept> option may not detect issues regarding two-phase name lookup, binding a non-const reference to a temporary, treating copy init as direct init, allowing multiple user-defined conversions in initialization, or alternative tokens for logical operators, and other non-supported conformance areas.","pos":[3068,3381],"source":" The **/permissive-** option may not detect issues regarding two-phase name lookup, binding a non-const reference to a temporary, treating copy init as direct init, allowing multiple user-defined conversions in initialization, or alternative tokens for logical operators, and other non-supported conformance areas."},{"content":"For more information about conformance issues in Visual C++, see <bpt id=\"p1\">[</bpt>Nonstandard Behavior<ept id=\"p1\">](../../cpp/nonstandard-behavior.md)</ept>.","pos":[3382,3505],"source":" For more information about conformance issues in Visual C++, see [Nonstandard Behavior](../../cpp/nonstandard-behavior.md)."},{"content":"How to fix your code","pos":[3515,3535]},{"pos":[3536,3677],"content":"Here are some examples of code that is detected as non-conforming when you use <bpt id=\"p1\">**</bpt>/permissive-<ept id=\"p1\">**</ept>, along with suggested ways to fix the issues.","source":"Here are some examples of code that is detected as non-conforming when you use **/permissive-**, along with suggested ways to fix the issues."},{"content":"Use default as an identifier in native code","pos":[3686,3729]},{"content":"Lookup members in dependent base","pos":[3880,3912]},{"content":"Use of qualified names in member declarations","pos":[4464,4509]},{"content":"Initialize multiple union members in a member initializer","pos":[4706,4763]},{"content":"Hidden friend name lookup rules","pos":[5030,5061]},{"content":"Use scoped enums in array bounds","pos":[5661,5693]},{"content":"Use for each in native code","pos":[5965,5992]},{"content":"Use of ATL Attributes","pos":[6334,6355]},{"content":"To set this compiler option in the Visual Studio development environment","pos":[8124,8196]},{"pos":[8206,8256],"content":"Open your project's <bpt id=\"p1\">**</bpt>Property Pages<ept id=\"p1\">**</ept> dialog box.","source":"Open your project's **Property Pages** dialog box."},{"pos":[8267,8377],"content":"Under <bpt id=\"p1\">**</bpt>Configuration Properties<ept id=\"p1\">**</ept>, expand the <bpt id=\"p2\">**</bpt>C/C++<ept id=\"p2\">**</ept> folder and choose the <bpt id=\"p3\">**</bpt>Command Line<ept id=\"p3\">**</ept> property page.","source":"Under **Configuration Properties**, expand the **C/C++** folder and choose the **Command Line** property page."},{"content":"Enter the <bpt id=\"p1\">**</bpt>/permissive-<ept id=\"p1\">**</ept> compiler option in the <bpt id=\"p2\">**</bpt>Additional Options<ept id=\"p2\">**</ept> box.","pos":[8387,8464],"source":"Enter the **/permissive-** compiler option in the **Additional Options** box."},{"content":"Choose <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Apply<ept id=\"p2\">**</ept> to save your changes.","pos":[8465,8513],"source":" Choose **OK** or **Apply** to save your changes."},{"content":"To set this compiler option programmatically","pos":[8522,8566]},{"content":"See &lt;xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.AdditionalOptions%2A&gt;.","pos":[8576,8664],"source":"See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.AdditionalOptions%2A>."},{"content":"See Also","pos":[8673,8681]},{"content":"Compiler Options","pos":[8686,8702]},{"content":"Setting Compiler Options","pos":[8752,8776]}],"content":"---\ntitle: \"-permissive- (Standards conformance) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/11/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"/permissive\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"/permissive compiler options [C++]\"\n  - \"-permissive compiler options [C++]\"\n  - \"Standards conformance compiler options\"\n  - \"permissive compiler options [C++]\"\nms.assetid: db1cc175-6e93-4a2e-9396-c3725d2d8f71\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# /permissive- (Standards conformance)\nSpecify standards conformance mode to the compiler. Use this option to help you identify and fix conformance issues in your code, to make it both more correct and more portable.  \n  \n## Syntax  \n```\n/permissive-  \n```  \n\n## Remarks  \n  \nYou can use the **/permissive-** compiler option to specify standards-conforming compiler behavior. This option disables permissive behaviors, and sets the [/Zc](../../build/reference/zc-conformance.md) compiler options for strict conformance. In the IDE, this option also makes the IntelliSense engine underline non-conforming code. \n\nBy default, the **/permissive-** option is not set. When the option is set, the compiler generates diagnostic errors or warnings when non-standard language constructs are detected in your code, including some common bugs in pre-C++11 code.  \n\nThe **/permissive-** option sets the [/Zc:strictStrings](../../build/reference/zc-conformance.md) and [/Zc:rvalueCast](../../build/reference/zc-conformance.md) options to conforming behavior. They default to non-conforming behavior. You can pass specific **/Zc** options after **/permissive-** on the command line to override this behavior.  \n  \nEnvironment-specific extensions and language areas that the standard leaves up to the implementation are not affected by **/permissive-**. For example, the Microsoft-specific `__declspec`, calling convention and structured exception handling keywords, and compiler-specific pragma directives or attributes are not flagged by the compiler in **/permissive-** mode.  \n  \nThe **/permissive-** option uses the conformance support in the current compiler version to determine which language constructs are non-conforming. The option does not determine if your code conforms to a specific version of the C++ standard. To enable all implemented compiler support for the latest draft standard, use the [/std:latest](../../build/reference/std-specify-language-standard-version.md) option. To restrict the compiler support to more closely match the C++14 standard, use the [/std:c++14](../../build/reference/std-specify-language-standard-version.md) option, which is the default.  \n\nNot all C++11, C++14, or draft C++17 standards-conforming code is supported by the Visual C++ compiler in Visual Studio 2017 RC. The **/permissive-** option may not detect issues regarding two-phase name lookup, binding a non-const reference to a temporary, treating copy init as direct init, allowing multiple user-defined conversions in initialization, or alternative tokens for logical operators, and other non-supported conformance areas. For more information about conformance issues in Visual C++, see [Nonstandard Behavior](../../cpp/nonstandard-behavior.md).  \n  \n### How to fix your code\nHere are some examples of code that is detected as non-conforming when you use **/permissive-**, along with suggested ways to fix the issues.\n  \n#### Use default as an identifier in native code\n```cpp  \nvoid func(int default); // Error C2321: 'default' is a keyword, and \n                        // cannot be used in this context\n```  \n  \n#### Lookup members in dependent base\n```cpp  \ntemplate <typename T> \nstruct B {\n    void f();\n};\n\ntemplate <typename T> \nstruct D : public B<T> // B is a dependent base because its type \n                       // depends on the type of T.\n{\n    // One possible fix is to uncomment the following line.  \n    // If this is a type, don't forget the 'typename' keyword.  \n    // using B<T>::f; \n    \n    void g() {\n        f(); // error C3861: 'f': identifier not found\n             // Another fix is to change it to 'this->f();'\n    }\n};\n\nvoid h() {\n    D<int> d;\n    d.g();\n}\n```  \n  \n#### Use of qualified names in member declarations\n```cpp  \nstruct A {\n    void A::f() { } // error C4596: illegal qualified name in member \n                    // declaration. \n                    // Remove redundant 'A::' to fix.\n};\n```  \n\n#### Initialize multiple union members in a member initializer\n```cpp\nunion U\n{\n    U()\n        : i(1), j(1) // error C3442: Initializing multiple members of \n                     // union: 'U::i' and 'U::j'.\n                     // Remove all but one of the initializations to fix.\n    {}\n    int i;\n    int j;\n};\n```  \n  \n#### Hidden friend name lookup rules\n```cpp  \n// Example 1\nstruct S {\n    friend void f(S *);\n};\n// Uncomment this declaration to make the hidden friend visible:\n// void f(S *); // This declaration makes the hidden friend visible\n\nusing type = void (*)(S *);\ntype p = &f; // error C2065: 'f': undeclared identifier.\n```  \n```cpp  \n// Example 2\nstruct S {\n    friend void f(S *);\n};\nvoid g() { \n    // Using nullptr instead of S prevents argument dependent lookup in S\n    f(nullptr); // error C3861: 'f': identifier not found\n    \n    S *p = nullptr;\n    f(S); // Hidden friend now found via argument-dependent lookup.\n} \n```  \n  \n#### Use scoped enums in array bounds\n```cpp  \nenum class Color { \n    Red, Green, Blue \n};\n\nint data[Color::Blue]; // error C3411: 'Color' is not valid as the size \n                       // of an array as it is not an integer type.\n                       // Cast to type size_t or int to fix.\n```  \n  \n#### Use for each in native code\n```cpp  \nvoid func() {\n    int array[] = {1, 2, 30, 40};\n    for each (int i in array) // error C4496: nonstandard extension \n                              // 'for each' used: replace with \n                              // ranged-for statement:\n                              // for (int i: array)\n    {\n        // ... \n    }\n}\n```  \n  \n#### Use of ATL Attributes\n```cpp  \n// Example 1\n[uuid(\"594382D9-44B0-461A-8DE3-E06A3E73C5EB\")]\nclass A {};\n```  \n```cpp  \n// Fix for example 1\nclass __declspec(uuid(\"594382D9-44B0-461A-8DE3-E06A3E73C5EB\")) B {};\n```  \n```cpp  \n// Example 2\n[emitidl];\n[module(name=\"Foo\")];\n\n[object, local, uuid(\"9e66a290-4365-11d2-a997-00c04fa37ddb\")]\n__interface ICustom {\n    HRESULT Custom([in] longl, [out, retval] long*pLong);\n    [local] HRESULT CustomLocal([in] longl, [out, retval] long*pLong);\n};\n\n[coclass, appobject, uuid(\"9e66a294-4365-11d2-a997-00c04fa37ddb\")]\nclass CFoo : public ICustom\n{};\n```  \n```cpp  \n// Fix for example 2\n// First, create the *.idl file. The vc140.idl generated file can be \n// used to automatically obtain a *.idl file for the interfaces with \n// annotation. Second, add a midl step to your build system to make \n// sure that the C++ interface definitions are outputted. \n// Last, adjust your existing code to use ATL directly as shown in \n// the atl implementation section.\n\n-- IDL  FILE-- \nimport \"docobj.idl\";\n\n[object, local, uuid(9e66a290-4365-11d2-a997-00c04fa37ddb)] \ninterface ICustom : IUnknown {\n    HRESULT Custom([in] longl, [out,retval] long*pLong);\n    [local] HRESULT CustomLocal([in] longl, [out,retval] long*pLong);\n};\n\n[ version(1.0), uuid(29079a2c-5f3f-3325-99a1-3ec9c40988bb) ]\nlibrary Foo {\n    importlib(\"stdole2.tlb\");\n    importlib(\"olepro32.dll\");\n\n    [version(1.0), appobject, uuid(9e66a294-4365-11d2-a997-00c04fa37ddb)] \n    coclass CFoo { interface ICustom; };\n}\n\n-- ATL IMPLEMENTATION--\n#include <idl.header.h>\n#include <atlbase.h>\n\nclass ATL_NO_VTABLE CFooImpl : public ICustom, \n    public ATL::CComObjectRootEx<CComMultiThreadModel> \n{\n    public:BEGIN_COM_MAP(CFooImpl)\n    COM_INTERFACE_ENTRY(ICustom)\n    END_COM_MAP()\n}; \n```  \n  \n### To set this compiler option in the Visual Studio development environment  \n  \n1.  Open your project's **Property Pages** dialog box.   \n  \n2.  Under **Configuration Properties**, expand the **C/C++** folder and choose the **Command Line** property page.  \n  \n4.  Enter the **/permissive-** compiler option in the **Additional Options** box. Choose **OK** or **Apply** to save your changes. \n  \n### To set this compiler option programmatically  \n  \n-   See <xref:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.AdditionalOptions%2A>.  \n  \n## See Also  \n [Compiler Options](../../build/reference/compiler-options.md)   \n [Setting Compiler Options](../../build/reference/setting-compiler-options.md)"}