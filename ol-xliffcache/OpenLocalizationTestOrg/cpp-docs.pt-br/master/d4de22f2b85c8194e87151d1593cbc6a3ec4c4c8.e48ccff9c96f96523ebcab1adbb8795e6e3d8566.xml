{"nodes":[{"pos":[12,47],"content":"Accessing XML Data | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Accessing XML Data | Microsoft Docs","pos":[0,35]}]},{"content":"Accessing XML Data","pos":[784,802]},{"pos":[803,1017],"content":"There are two separate methods of retrieving XML data from a data source: one uses <bpt id=\"p1\">[</bpt>CStreamRowset<ept id=\"p1\">](../../data/oledb/cstreamrowset-class.md)</ept> and the other uses <bpt id=\"p2\">[</bpt>CXMLAccessor<ept id=\"p2\">](../../data/oledb/cxmlaccessor-class.md)</ept>.","source":"There are two separate methods of retrieving XML data from a data source: one uses [CStreamRowset](../../data/oledb/cstreamrowset-class.md) and the other uses [CXMLAccessor](../../data/oledb/cxmlaccessor-class.md)."},{"content":"Functionality","pos":[1024,1037]},{"content":"CStreamRowset","pos":[1038,1051]},{"content":"CXMLAccessor","pos":[1052,1064]},{"content":"Amount of data transferred","pos":[1132,1158]},{"content":"Retrieves data from all columns and rows at once.","pos":[1159,1208]},{"content":"Retrieves data from all columns but only one row at a time.","pos":[1209,1268]},{"content":"You must navigate rows using methods such as <ph id=\"ph1\">`MoveNext`</ph>.","pos":[1269,1325],"source":" You must navigate rows using methods such as `MoveNext`."},{"content":"Formatting the string","pos":[1330,1351]},{"content":"SQL Server formats the XML string and sends it to the consumer.","pos":[1352,1415]},{"content":"Retrieves rowset data in its native format (requests that the provider send it as Unicode strings) and then builds the string containing the data in XML format.","pos":[1416,1576]},{"content":"Control over formatting","pos":[1581,1604]},{"content":"You have some level of control over how the XML string is formatted by setting some SQL Server 2000-specific properties.","pos":[1605,1725]},{"content":"You have no control over the format of the generated XML string.","pos":[1726,1790]},{"pos":[1798,1932],"content":"While <ph id=\"ph1\">`CStreamRowset`</ph> provides a more overall efficient way of retrieving data in XML format, it is only supported by SQL Server 2000.","source":"While `CStreamRowset` provides a more overall efficient way of retrieving data in XML format, it is only supported by SQL Server 2000."},{"content":"Retrieving XML Data Using CStreamRowset","pos":[1941,1980]},{"content":"You specify <bpt id=\"p1\">[</bpt>CStreamRowset<ept id=\"p1\">](../../data/oledb/cstreamrowset-class.md)</ept> as the rowset type in your <ph id=\"ph1\">`CCommand`</ph> or <ph id=\"ph2\">`CTable`</ph> declaration.","pos":[1984,2115],"source":"You specify [CStreamRowset](../../data/oledb/cstreamrowset-class.md) as the rowset type in your `CCommand` or `CTable` declaration."},{"content":"You can use it with your own accessor or no accessor, for example:","pos":[2116,2182]},{"content":"-or-","pos":[2261,2265]},{"content":"Normally when you call <ph id=\"ph1\">`CCommand::Open`</ph> (specifying, for example, <ph id=\"ph2\">`CRowset`</ph> as the <ph id=\"ph3\">`TRowset`</ph> class), it obtains an <ph id=\"ph4\">`IRowset`</ph>pointer.","pos":[2333,2465],"source":"Normally when you call `CCommand::Open` (specifying, for example, `CRowset` as the `TRowset` class), it obtains an `IRowset`pointer."},{"content":"returns an <ph id=\"ph1\">`IRowset`</ph>pointer, which is stored in the <ph id=\"ph2\">`m_spRowset`</ph> member of the <ph id=\"ph3\">`CRowset`</ph> object.","pos":[2486,2582],"source":" returns an `IRowset`pointer, which is stored in the `m_spRowset` member of the `CRowset` object."},{"content":"Methods such as <ph id=\"ph1\">`MoveFirst`</ph>, <ph id=\"ph2\">`MoveNext`</ph>, and <ph id=\"ph3\">`GetData`</ph> use that pointer to retrieve the data.","pos":[2583,2676],"source":" Methods such as `MoveFirst`, `MoveNext`, and `GetData` use that pointer to retrieve the data."},{"content":"By contrast, when you call <ph id=\"ph1\">`CCommand::Open`</ph> (but specify <ph id=\"ph2\">`CStreamRowset`</ph> as the <ph id=\"ph3\">`TRowset`</ph> class), <ph id=\"ph4\">`ICommand::Execute`</ph> returns an <ph id=\"ph5\">`ISequentialStream`</ph> pointer, which is stored in the <ph id=\"ph6\">`m_spStream`</ph> data member of <bpt id=\"p1\">[</bpt>CStreamRowset<ept id=\"p1\">](../../data/oledb/cstreamrowset-class.md)</ept>.","pos":[2683,2949],"source":"By contrast, when you call `CCommand::Open` (but specify `CStreamRowset` as the `TRowset` class), `ICommand::Execute` returns an `ISequentialStream` pointer, which is stored in the `m_spStream` data member of [CStreamRowset](../../data/oledb/cstreamrowset-class.md)."},{"content":"You then use the <ph id=\"ph1\">`Read`</ph> method to retrieve the (Unicode string) data in XML format.","pos":[2950,3033],"source":" You then use the `Read` method to retrieve the (Unicode string) data in XML format."},{"content":"For example:","pos":[3034,3046]},{"content":"SQL Server 2000 performs the XML formatting and returns all columns and all rows of the rowset as one XML string.","pos":[3095,3208]},{"pos":[3215,3384],"content":"For an example using the <ph id=\"ph1\">`Read`</ph> method, see \"Adding XML Support to the Consumer\" in <bpt id=\"p1\">[</bpt>Implementing a Simple Consumer<ept id=\"p1\">](../../data/oledb/implementing-a-simple-consumer.md)</ept>.","source":"For an example using the `Read` method, see \"Adding XML Support to the Consumer\" in [Implementing a Simple Consumer](../../data/oledb/implementing-a-simple-consumer.md)."},{"pos":[3392,3558],"content":"[!NOTE]\n XML support using `CStreamRowset` works with SQL Server 2000 only and requires that you have the OLE DB Provider for SQL Server 2000 (installed with MDAC).","leadings":["","> "],"nodes":[{"content":"XML support using <ph id=\"ph1\">`CStreamRowset`</ph> works with SQL Server 2000 only and requires that you have the OLE DB Provider for SQL Server 2000 (installed with MDAC).","pos":[9,164],"source":" XML support using `CStreamRowset` works with SQL Server 2000 only and requires that you have the OLE DB Provider for SQL Server 2000 (installed with MDAC)."}]},{"content":"Retrieving XML Data Using CXMLAccessor","pos":[3567,3605]},{"content":"<bpt id=\"p1\">[</bpt>CXMLAccessor<ept id=\"p1\">](../../data/oledb/cxmlaccessor-class.md)</ept> allows you to access data from a data source as string data when you have no knowledge of the data store's schema.","pos":[3609,3778],"source":"[CXMLAccessor](../../data/oledb/cxmlaccessor-class.md) allows you to access data from a data source as string data when you have no knowledge of the data store's schema."},{"content":"works like <ph id=\"ph1\">`CDynamicStringAccessorW`</ph> except that the former converts all data accessed from the data store as XML-formatted (tagged) data.","pos":[3794,3932],"source":" works like `CDynamicStringAccessorW` except that the former converts all data accessed from the data store as XML-formatted (tagged) data."},{"content":"The XML tag names match the data store's column names as closely as possible.","pos":[3933,4010]},{"pos":[4017,4136],"content":"Use <ph id=\"ph1\">`CXMLAccessor`</ph> as you would any other accessor class, passing it as a template parameter to <ph id=\"ph2\">`CCommand`</ph> or <ph id=\"ph3\">`CTable`</ph>:","source":"Use `CXMLAccessor` as you would any other accessor class, passing it as a template parameter to `CCommand` or `CTable`:"},{"pos":[4194,4377],"content":"Use <bpt id=\"p1\">[</bpt>GetXMLRowData<ept id=\"p1\">](../../data/oledb/cxmlaccessor-getxmlrowdata.md)</ept> to retrieve data from the table one row at a time, and navigate rows using methods such as <ph id=\"ph1\">`MoveNext`</ph>, for example:","source":"Use [GetXMLRowData](../../data/oledb/cxmlaccessor-getxmlrowdata.md) to retrieve data from the table one row at a time, and navigate rows using methods such as `MoveNext`, for example:"},{"pos":[4660,4818],"content":"You can use <bpt id=\"p1\">[</bpt>GetXMLColumnData<ept id=\"p1\">](../../data/oledb/cxmlaccessor-getxmlcolumndata.md)</ept> to retrieve the column (data type) information as XML-formatted string data.","source":"You can use [GetXMLColumnData](../../data/oledb/cxmlaccessor-getxmlcolumndata.md) to retrieve the column (data type) information as XML-formatted string data."},{"content":"See Also","pos":[4827,4835]},{"content":"Using Accessors","pos":[4840,4855]}],"content":"---\ntitle: \"Accessing XML Data | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"data access [C++], XML data\"\n  - \"XML [C++], accessing data\"\n  - \"CXMLAccessor class, retrieving XML data\"\n  - \"data [C++], XML data access\"\n  - \"rowsets [C++], retrieving XML data\"\n  - \"CStreamRowset class, retrieving XML data\"\nms.assetid: 6b693d55-a554-4846-8118-e8773b79b572\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Accessing XML Data\nThere are two separate methods of retrieving XML data from a data source: one uses [CStreamRowset](../../data/oledb/cstreamrowset-class.md) and the other uses [CXMLAccessor](../../data/oledb/cxmlaccessor-class.md).  \n  \n|Functionality|CStreamRowset|CXMLAccessor|  \n|-------------------|-------------------|------------------|  \n|Amount of data transferred|Retrieves data from all columns and rows at once.|Retrieves data from all columns but only one row at a time. You must navigate rows using methods such as `MoveNext`.|  \n|Formatting the string|SQL Server formats the XML string and sends it to the consumer.|Retrieves rowset data in its native format (requests that the provider send it as Unicode strings) and then builds the string containing the data in XML format.|  \n|Control over formatting|You have some level of control over how the XML string is formatted by setting some SQL Server 2000-specific properties.|You have no control over the format of the generated XML string.|  \n  \n While `CStreamRowset` provides a more overall efficient way of retrieving data in XML format, it is only supported by SQL Server 2000.  \n  \n## Retrieving XML Data Using CStreamRowset  \n You specify [CStreamRowset](../../data/oledb/cstreamrowset-class.md) as the rowset type in your `CCommand` or `CTable` declaration. You can use it with your own accessor or no accessor, for example:  \n  \n```  \nCCommand<CAccessor<CMyAccessor>, CStreamRowset> myCmd;  \n```  \n  \n -or-  \n  \n```  \nCCommand<CNoAccessor, CStreamRowset> myCmd;  \n```  \n  \n Normally when you call `CCommand::Open` (specifying, for example, `CRowset` as the `TRowset` class), it obtains an `IRowset`pointer. `ICommand::Execute` returns an `IRowset`pointer, which is stored in the `m_spRowset` member of the `CRowset` object. Methods such as `MoveFirst`, `MoveNext`, and `GetData` use that pointer to retrieve the data.  \n  \n By contrast, when you call `CCommand::Open` (but specify `CStreamRowset` as the `TRowset` class), `ICommand::Execute` returns an `ISequentialStream` pointer, which is stored in the `m_spStream` data member of [CStreamRowset](../../data/oledb/cstreamrowset-class.md). You then use the `Read` method to retrieve the (Unicode string) data in XML format. For example:  \n  \n```  \nmyCmd.m_spStream->Read()  \n```  \n  \n SQL Server 2000 performs the XML formatting and returns all columns and all rows of the rowset as one XML string.  \n  \n For an example using the `Read` method, see \"Adding XML Support to the Consumer\" in [Implementing a Simple Consumer](../../data/oledb/implementing-a-simple-consumer.md).  \n  \n> [!NOTE]\n>  XML support using `CStreamRowset` works with SQL Server 2000 only and requires that you have the OLE DB Provider for SQL Server 2000 (installed with MDAC).  \n  \n## Retrieving XML Data Using CXMLAccessor  \n [CXMLAccessor](../../data/oledb/cxmlaccessor-class.md) allows you to access data from a data source as string data when you have no knowledge of the data store's schema. `CXMLAccessor` works like `CDynamicStringAccessorW` except that the former converts all data accessed from the data store as XML-formatted (tagged) data. The XML tag names match the data store's column names as closely as possible.  \n  \n Use `CXMLAccessor` as you would any other accessor class, passing it as a template parameter to `CCommand` or `CTable`:  \n  \n```  \nCTable<CXMLAccessor, CRowset> rs;  \n```  \n  \n Use [GetXMLRowData](../../data/oledb/cxmlaccessor-getxmlrowdata.md) to retrieve data from the table one row at a time, and navigate rows using methods such as `MoveNext`, for example:  \n  \n```  \n// Open data source, session, and rowset  \nhr = rs.MoveFirst();  \nwhile( SUCCEEDED(hr) && hr != DB_S_ENDOFROWSET )  \n{  \n    CStringW strRowData;  \n    myCmd.GetXMLRowData(strRowData);  \n  \n    printf_s( \"%S\\n\", strRowData );  \n  \n    hr = rs.MoveNext();  \n}  \n```  \n  \n You can use [GetXMLColumnData](../../data/oledb/cxmlaccessor-getxmlcolumndata.md) to retrieve the column (data type) information as XML-formatted string data.  \n  \n## See Also  \n [Using Accessors](../../data/oledb/using-accessors.md)"}