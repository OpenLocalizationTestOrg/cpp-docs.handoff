{"nodes":[{"pos":[12,50],"content":"CComControlBase Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComControlBase Class | Microsoft Docs","pos":[0,38]}]},{"content":"CComControlBase Class","pos":[672,693]},{"content":"This class provides methods for creating and managing ATL controls.","pos":[694,761]},{"pos":[769,879],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Syntax","pos":[888,894]},{"content":"Members","pos":[952,959]},{"content":"Public Typedefs","pos":[969,984]},{"content":"Name","pos":[991,995]},{"content":"Description","pos":[996,1007]},{"content":"CComControlBase::AppearanceType","pos":[1046,1077]},{"pos":[1113,1183],"content":"Override if your <ph id=\"ph1\">`m_nAppearance`</ph> stock property isn't of type <ph id=\"ph2\">`short`</ph>.","source":"Override if your `m_nAppearance` stock property isn't of type `short`."},{"content":"Public Constructors","pos":[1194,1213]},{"content":"Name","pos":[1220,1224]},{"content":"Description","pos":[1225,1236]},{"content":"CComControlBase::CComControlBase","pos":[1275,1307]},{"content":"The constructor.","pos":[1344,1360]},{"content":"CComControlBase::~CComControlBase","pos":[1366,1399]},{"content":"The destructor.","pos":[1441,1456]},{"content":"Public Methods","pos":[1467,1481]},{"content":"Name","pos":[1488,1492]},{"content":"Description","pos":[1493,1504]},{"content":"CComControlBase::ControlQueryInterface","pos":[1543,1581]},{"content":"Retrieves a pointer to the requested interface.","pos":[1624,1671]},{"content":"CComControlBase::DoesVerbActivate","pos":[1677,1710]},{"pos":[1748,2133],"content":"Checks that the <ph id=\"ph1\">`iVerb`</ph> parameter used by <ph id=\"ph2\">`IOleObjectImpl::DoVerb`</ph> either activates the control's user interface ( <ph id=\"ph3\">`iVerb`</ph> equals <ph id=\"ph4\">`OLEIVERB_UIACTIVATE`</ph>), defines the action taken when the user double-clicks the control ( <ph id=\"ph5\">`iVerb`</ph> equals <ph id=\"ph6\">`OLEIVERB_PRIMARY`</ph>), displays the control ( <ph id=\"ph7\">`iVerb`</ph> equals <ph id=\"ph8\">`OLEIVERB_SHOW`</ph>), or activates the control ( <ph id=\"ph9\">`iVerb`</ph> equals <bpt id=\"p1\">**</bpt>OLEIVERB_INPLACEACTIVATE<ept id=\"p1\">**</ept>).","source":"Checks that the `iVerb` parameter used by `IOleObjectImpl::DoVerb` either activates the control's user interface ( `iVerb` equals `OLEIVERB_UIACTIVATE`), defines the action taken when the user double-clicks the control ( `iVerb` equals `OLEIVERB_PRIMARY`), displays the control ( `iVerb` equals `OLEIVERB_SHOW`), or activates the control ( `iVerb` equals **OLEIVERB_INPLACEACTIVATE**)."},{"content":"CComControlBase::DoesVerbUIActivate","pos":[2139,2174]},{"pos":[2214,2350],"content":"Checks that the <ph id=\"ph1\">`iVerb`</ph> parameter used by <ph id=\"ph2\">`IOleObjectImpl::DoVerb`</ph> causes the control's user interface to activate and returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>.","source":"Checks that the `iVerb` parameter used by `IOleObjectImpl::DoVerb` causes the control's user interface to activate and returns **TRUE**."},{"content":"CComControlBase::DoVerbProperties","pos":[2356,2389]},{"content":"Displays the control's property pages.","pos":[2427,2465]},{"content":"CComControlBase::FireViewChange","pos":[2471,2502]},{"content":"Call this method to tell the container to redraw the control, or notify the registered advise sinks that the control's view has changed.","pos":[2538,2674]},{"content":"CComControlBase::GetAmbientAppearance","pos":[2680,2717]},{"pos":[2759,2872],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_APPEARANCE<ept id=\"p1\">**</ept>, the current appearance setting for the control: 0 for flat and 1 for 3D.","source":"Retrieves **DISPID_AMBIENT_APPEARANCE**, the current appearance setting for the control: 0 for flat and 1 for 3D."},{"content":"CComControlBase::GetAmbientAutoClip","pos":[2878,2913]},{"pos":[2953,3088],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_AUTOCLIP<ept id=\"p1\">**</ept>, a flag indicating whether the container supports automatic clipping of the control display area.","source":"Retrieves **DISPID_AMBIENT_AUTOCLIP**, a flag indicating whether the container supports automatic clipping of the control display area."},{"content":"CComControlBase::GetAmbientBackColor","pos":[3094,3130]},{"pos":[3171,3283],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_BACKCOLOR<ept id=\"p1\">**</ept>, the ambient background color for all controls, defined by the container.","source":"Retrieves **DISPID_AMBIENT_BACKCOLOR**, the ambient background color for all controls, defined by the container."},{"content":"CComControlBase::GetAmbientCharSet","pos":[3289,3323]},{"pos":[3362,3469],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_CHARSET<ept id=\"p1\">**</ept>, the ambient character set for all controls, defined by the container.","source":"Retrieves **DISPID_AMBIENT_CHARSET**, the ambient character set for all controls, defined by the container."},{"content":"CComControlBase::GetAmbientCodePage","pos":[3475,3510]},{"pos":[3550,3658],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_CODEPAGE<ept id=\"p1\">**</ept>, the ambient character set for all controls, defined by the container.","source":"Retrieves **DISPID_AMBIENT_CODEPAGE**, the ambient character set for all controls, defined by the container."},{"content":"CComControlBase::GetAmbientDisplayAsDefault","pos":[3664,3707]},{"pos":[3755,3974],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_DISPLAYASDEFAULT<ept id=\"p1\">**</ept>, a flag that is <bpt id=\"p2\">**</bpt>TRUE<ept id=\"p2\">**</ept> if the container has marked the control in this site to be a default button, and therefore a button control should draw itself with a thicker frame.","source":"Retrieves **DISPID_AMBIENT_DISPLAYASDEFAULT**, a flag that is **TRUE** if the container has marked the control in this site to be a default button, and therefore a button control should draw itself with a thicker frame."},{"content":"CComControlBase::GetAmbientDisplayName","pos":[3980,4018]},{"pos":[4061,4154],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_DISPLAYNAME<ept id=\"p1\">**</ept>, the name the container has supplied to the control.","source":"Retrieves **DISPID_AMBIENT_DISPLAYNAME**, the name the container has supplied to the control."},{"content":"CComControlBase::GetAmbientFont","pos":[4160,4191]},{"pos":[4227,4292],"content":"Retrieves a pointer to the container's ambient <ph id=\"ph1\">`IFont`</ph> interface.","source":"Retrieves a pointer to the container's ambient `IFont` interface."},{"content":"CComControlBase::GetAmbientFontDisp","pos":[4298,4333]},{"pos":[4373,4453],"content":"Retrieves a pointer to the container's ambient <bpt id=\"p1\">**</bpt>IFontDisp<ept id=\"p1\">**</ept> dispatch interface.","source":"Retrieves a pointer to the container's ambient **IFontDisp** dispatch interface."},{"content":"CComControlBase::GetAmbientForeColor","pos":[4459,4495]},{"pos":[4536,4648],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_FORECOLOR<ept id=\"p1\">**</ept>, the ambient foreground color for all controls, defined by the container.","source":"Retrieves **DISPID_AMBIENT_FORECOLOR**, the ambient foreground color for all controls, defined by the container."},{"content":"CComControlBase::GetAmbientLocaleID","pos":[4654,4689]},{"pos":[4729,4821],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_LOCALEID<ept id=\"p1\">**</ept>, the identifier of the language used by the container.","source":"Retrieves **DISPID_AMBIENT_LOCALEID**, the identifier of the language used by the container."},{"content":"CComControlBase::GetAmbientMessageReflect","pos":[4827,4868]},{"pos":[4914,5066],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_MESSAGEREFLECT<ept id=\"p1\">**</ept>, a flag indicating whether the container wants to receive window messages (such as <ph id=\"ph1\">`WM_DRAWITEM`</ph>) as events.","source":"Retrieves **DISPID_AMBIENT_MESSAGEREFLECT**, a flag indicating whether the container wants to receive window messages (such as `WM_DRAWITEM`) as events."},{"content":"CComControlBase::GetAmbientPalette","pos":[5072,5106]},{"pos":[5145,5225],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_PALETTE<ept id=\"p1\">**</ept>, used to access the container's <ph id=\"ph1\">`HPALETTE`</ph>.","source":"Retrieves **DISPID_AMBIENT_PALETTE**, used to access the container's `HPALETTE`."},{"content":"CComControlBase::GetAmbientProperty","pos":[5231,5266]},{"pos":[5306,5357],"content":"Retrieves the container property specified by <ph id=\"ph1\">`id`</ph>.","source":"Retrieves the container property specified by `id`."},{"content":"CComControlBase::GetAmbientRightToLeft","pos":[5363,5401]},{"pos":[5444,5547],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_RIGHTTOLEFT<ept id=\"p1\">**</ept>, the direction in which content is displayed by the container.","source":"Retrieves **DISPID_AMBIENT_RIGHTTOLEFT**, the direction in which content is displayed by the container."},{"content":"CComControlBase::GetAmbientScaleUnits","pos":[5553,5590]},{"pos":[5632,5757],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_SCALEUNITS<ept id=\"p1\">**</ept>, the container's ambient units (such as inches or centimeters) for labeling displays.","source":"Retrieves **DISPID_AMBIENT_SCALEUNITS**, the container's ambient units (such as inches or centimeters) for labeling displays."},{"content":"CComControlBase::GetAmbientShowGrabHandles","pos":[5763,5805]},{"pos":[5852,6004],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_SHOWGRABHANDLES<ept id=\"p1\">**</ept>, a flag indicating whether the container allows the control to display grab handles for itself when active.","source":"Retrieves **DISPID_AMBIENT_SHOWGRABHANDLES**, a flag indicating whether the container allows the control to display grab handles for itself when active."},{"content":"CComControlBase::GetAmbientShowHatching","pos":[6010,6049]},{"pos":[6093,6258],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_SHOWHATCHING<ept id=\"p1\">**</ept>, a flag indicating whether the container allows the control to display itself with a hatched pattern when the UI is active.","source":"Retrieves **DISPID_AMBIENT_SHOWHATCHING**, a flag indicating whether the container allows the control to display itself with a hatched pattern when the UI is active."},{"content":"CComControlBase::GetAmbientSupportsMnemonics","pos":[6264,6308]},{"pos":[6357,6473],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_SUPPORTSMNEMONICS<ept id=\"p1\">**</ept>, a flag indicating whether the container supports keyboard mnemonics.","source":"Retrieves **DISPID_AMBIENT_SUPPORTSMNEMONICS**, a flag indicating whether the container supports keyboard mnemonics."},{"content":"CComControlBase::GetAmbientTextAlign","pos":[6479,6515]},{"pos":[6556,6767],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_TEXTALIGN<ept id=\"p1\">**</ept>, the text alignment preferred by the container: 0 for general alignment (numbers right, text left), 1 for left alignment, 2 for center alignment, and 3 for right alignment.","source":"Retrieves **DISPID_AMBIENT_TEXTALIGN**, the text alignment preferred by the container: 0 for general alignment (numbers right, text left), 1 for left alignment, 2 for center alignment, and 3 for right alignment."},{"content":"CComControlBase::GetAmbientTopToBottom","pos":[6773,6811]},{"pos":[6854,6957],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_TOPTOBOTTOM<ept id=\"p1\">**</ept>, the direction in which content is displayed by the container.","source":"Retrieves **DISPID_AMBIENT_TOPTOBOTTOM**, the direction in which content is displayed by the container."},{"content":"CComControlBase::GetAmbientUIDead","pos":[6963,6996]},{"pos":[7034,7166],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_UIDEAD<ept id=\"p1\">**</ept>, a flag indicating whether the container wants the control to respond to user-interface actions.","source":"Retrieves **DISPID_AMBIENT_UIDEAD**, a flag indicating whether the container wants the control to respond to user-interface actions."},{"content":"CComControlBase::GetAmbientUserMode","pos":[7172,7207]},{"pos":[7247,7381],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_USERMODE<ept id=\"p1\">**</ept>, a flag indicating whether the container is in run-mode ( <bpt id=\"p2\">**</bpt>TRUE<ept id=\"p2\">**</ept>) or design-mode ( <bpt id=\"p3\">**</bpt>FALSE<ept id=\"p3\">**</ept>).","source":"Retrieves **DISPID_AMBIENT_USERMODE**, a flag indicating whether the container is in run-mode ( **TRUE**) or design-mode ( **FALSE**)."},{"content":"CComControlBase::GetDirty","pos":[7387,7412]},{"pos":[7442,7493],"content":"Returns the value of data member <ph id=\"ph1\">`m_bRequiresSave`</ph>.","source":"Returns the value of data member `m_bRequiresSave`."},{"content":"CComControlBase::GetZoomInfo","pos":[7499,7527]},{"content":"Retrieves the x and y values of the numerator and denominator of the zoom factor for a control activated for in-place editing.","pos":[7560,7686]},{"content":"CComControlBase::InPlaceActivate","pos":[7692,7724]},{"pos":[7761,7866],"content":"Causes the control to transition from the inactive state to whatever state the verb in <ph id=\"ph1\">`iVerb`</ph> indicates.","source":"Causes the control to transition from the inactive state to whatever state the verb in `iVerb` indicates."},{"content":"CComControlBase::InternalGetSite","pos":[7872,7904]},{"content":"Call this method to query the control site for a pointer to the identified interface.","pos":[7941,8026]},{"content":"CComControlBase::OnDraw","pos":[8032,8055]},{"content":"Override this method to draw your control.","pos":[8083,8125]},{"content":"CComControlBase::OnDrawAdvanced","pos":[8131,8162]},{"pos":[8198,8327],"content":"The default <bpt id=\"p1\">**</bpt>OnDrawAdvanced<ept id=\"p1\">**</ept> prepares a normalized device context for drawing, then calls your control class's <ph id=\"ph1\">`OnDraw`</ph> method.","source":"The default **OnDrawAdvanced** prepares a normalized device context for drawing, then calls your control class's `OnDraw` method."},{"content":"CComControlBase::OnKillFocus","pos":[8333,8361]},{"content":"Checks that the control is in-place active and has a valid control site, then informs the container that the control has lost focus.","pos":[8394,8526]},{"content":"CComControlBase::OnMouseActivate","pos":[8532,8564]},{"content":"Checks that the UI is in user mode, then activates the control.","pos":[8601,8664]},{"content":"CComControlBase::OnPaint","pos":[8670,8694]},{"pos":[8723,8839],"content":"Prepares the container for painting, gets the control's client area, then calls the control class's <ph id=\"ph1\">`OnDraw`</ph> method.","source":"Prepares the container for painting, gets the control's client area, then calls the control class's `OnDraw` method."},{"content":"CComControlBase::OnSetFocus","pos":[8845,8872]},{"content":"Checks that the control is in-place active and has a valid control site, then informs the container the control has gained focus.","pos":[8904,9033]},{"content":"CComControlBase::PreTranslateAccelerator","pos":[9039,9079]},{"content":"Override this method to provide your own keyboard accelerator handlers.","pos":[9124,9195]},{"content":"CComControlBase::SendOnClose","pos":[9201,9229]},{"content":"Notifies all advisory sinks registered with the advise holder that the control has been closed.","pos":[9262,9357]},{"content":"CComControlBase::SendOnDataChange","pos":[9363,9396]},{"content":"Notifies all advisory sinks registered with the advise holder that the control data has changed.","pos":[9434,9530]},{"content":"CComControlBase::SendOnRename","pos":[9536,9565]},{"content":"Notifies all advisory sinks registered with the advise holder that the control has a new moniker.","pos":[9599,9696]},{"content":"CComControlBase::SendOnSave","pos":[9702,9729]},{"content":"Notifies all advisory sinks registered with the advise holder that the control has been saved.","pos":[9761,9855]},{"content":"CComControlBase::SendOnViewChange","pos":[9861,9894]},{"content":"Notifies all registered advisory sinks that the control's view has changed.","pos":[9932,10007]},{"content":"CComControlBase::SetControlFocus","pos":[10013,10045]},{"content":"Sets or removes the keyboard focus to or from the control.","pos":[10082,10140]},{"content":"CComControlBase::SetDirty","pos":[10146,10171]},{"pos":[10201,10265],"content":"Sets the data member <ph id=\"ph1\">`m_bRequiresSave`</ph> to the value in <ph id=\"ph2\">`bDirty`</ph>.","source":"Sets the data member `m_bRequiresSave` to the value in `bDirty`."},{"content":"Public Data Members","pos":[10276,10295]},{"content":"Name","pos":[10302,10306]},{"content":"Description","pos":[10307,10318]},{"content":"CComControlBase::m_bAutoSize","pos":[10357,10385]},{"content":"Flag indicating the control cannot be any other size.","pos":[10418,10471]},{"content":"CComControlBase::m_bDrawFromNatural","pos":[10477,10512]},{"pos":[10552,10716],"content":"Flag indicating that <ph id=\"ph1\">`IDataObjectImpl::GetData`</ph> and <ph id=\"ph2\">`CComControlBase::GetZoomInfo`</ph> should set the control size from <ph id=\"ph3\">`m_sizeNatural`</ph> rather than from <ph id=\"ph4\">`m_sizeExtent`</ph>.","source":"Flag indicating that `IDataObjectImpl::GetData` and `CComControlBase::GetZoomInfo` should set the control size from `m_sizeNatural` rather than from `m_sizeExtent`."},{"content":"CComControlBase::m_bDrawGetDataInHimetric","pos":[10722,10763]},{"pos":[10809,10911],"content":"Flag indicating that <ph id=\"ph1\">`IDataObjectImpl::GetData`</ph> should use HIMETRIC units and not pixels when drawing.","source":"Flag indicating that `IDataObjectImpl::GetData` should use HIMETRIC units and not pixels when drawing."},{"content":"CComControlBase::m_bInPlaceActive","pos":[10917,10950]},{"content":"Flag indicating the control is in-place active.","pos":[10988,11035]},{"content":"CComControlBase::m_bInPlaceSiteEx","pos":[11041,11074]},{"pos":[11112,11260],"content":"Flag indicating the container supports the <bpt id=\"p1\">**</bpt>IOleInPlaceSiteEx<ept id=\"p1\">**</ept> interface and OCX96 control features, such as windowless and flicker-free controls.","source":"Flag indicating the container supports the **IOleInPlaceSiteEx** interface and OCX96 control features, such as windowless and flicker-free controls."},{"content":"CComControlBase::m_bNegotiatedWnd","pos":[11266,11299]},{"content":"Flag indicating whether or not the control has negotiated with the container about support for OCX96 control features (such as flicker-free and windowless controls), and whether the control is windowed or windowless.","pos":[11337,11553]},{"content":"CComControlBase::m_bRecomposeOnResize","pos":[11559,11596]},{"content":"Flag indicating the control wants to recompose its presentation when the container changes the control's display size.","pos":[11638,11756]},{"content":"CComControlBase::m_bRequiresSave","pos":[11762,11794]},{"content":"Flag indicating the control has changed since it was last saved.","pos":[11831,11895]},{"content":"CComControlBase::m_bResizeNatural","pos":[11901,11934]},{"content":"Flag indicating the control wants to resize its natural extent (its unscaled physical size) when the container changes the control's display size.","pos":[11972,12118]},{"content":"CComControlBase::m_bUIActive","pos":[12124,12152]},{"content":"Flag indicating the control's user interface, such as menus and toolbars, is active.","pos":[12185,12269]},{"content":"CComControlBase::m_bUsingWindowRgn","pos":[12275,12309]},{"content":"Flag indicating the control is using the container-supplied window region.","pos":[12348,12422]},{"content":"CComControlBase::m_bWasOnceWindowless","pos":[12428,12465]},{"content":"Flag indicating the control has been windowless, but may or may not be windowless now.","pos":[12507,12593]},{"content":"CComControlBase::m_bWindowOnly","pos":[12599,12629]},{"content":"Flag indicating the control should be windowed, even if the container supports windowless controls.","pos":[12664,12763]},{"content":"CComControlBase::m_bWndLess","pos":[12769,12796]},{"content":"Flag indicating the control is windowless.","pos":[12828,12870]},{"content":"CComControlBase::m_hWndCD","pos":[12876,12901]},{"content":"Contains a reference to the window handle associated with the control.","pos":[12931,13001]},{"content":"CComControlBase::m_nFreezeEvents","pos":[13007,13039]},{"content":"A count of the number of times the container has frozen events (refused to accept events) without an intervening thaw of events (acceptance of events).","pos":[13076,13227]},{"content":"CComControlBase::m_rcPos","pos":[13233,13257]},{"content":"The position in pixels of the control, expressed in the coordinates of the container.","pos":[13286,13371]},{"content":"CComControlBase::m_sizeExtent","pos":[13377,13406]},{"content":"The extent of the control in HIMETRIC units (each unit is 0.01 millimeters) for a particular display.","pos":[13440,13541]},{"content":"CComControlBase::m_sizeNatural","pos":[13547,13577]},{"content":"The physical size of the control in HIMETRIC units (each unit is 0.01 millimeters).","pos":[13612,13695]},{"content":"CComControlBase::m_spAdviseSink","pos":[13701,13732]},{"pos":[13768,13921],"content":"A direct pointer to the advisory connection on the container (the container's <bpt id=\"p1\">[</bpt>IAdviseSink<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692513)</ept>).","source":"A direct pointer to the advisory connection on the container (the container's [IAdviseSink](http://msdn.microsoft.com/library/windows/desktop/ms692513))."},{"content":"CComControlBase::m_spAmbientDispatch","pos":[13927,13963]},{"pos":[14004,14123],"content":"A <ph id=\"ph1\">`CComDispatchDriver`</ph> object that lets you retrieve and set the container's properties through an <ph id=\"ph2\">`IDispatch`</ph> pointer.","source":"A `CComDispatchDriver` object that lets you retrieve and set the container's properties through an `IDispatch` pointer."},{"content":"CComControlBase::m_spClientSite","pos":[14129,14160]},{"content":"A pointer to the control's client site within the container.","pos":[14196,14256]},{"content":"CComControlBase::m_spDataAdviseHolder","pos":[14262,14299]},{"content":"Provides a standard means to hold advisory connections between data objects and advise sinks.","pos":[14341,14434]},{"content":"CComControlBase::m_spInPlaceSite","pos":[14440,14472]},{"pos":[14509,14807],"content":"A pointer to the container's <bpt id=\"p1\">[</bpt>IOleInPlaceSite<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686586)</ept>, <bpt id=\"p2\">[</bpt>IOleInPlaceSiteEx<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms693461)</ept>, or <bpt id=\"p3\">[</bpt>IOleInPlaceSiteWindowless<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms682300)</ept> interface pointer.","source":"A pointer to the container's [IOleInPlaceSite](http://msdn.microsoft.com/library/windows/desktop/ms686586), [IOleInPlaceSiteEx](http://msdn.microsoft.com/library/windows/desktop/ms693461), or [IOleInPlaceSiteWindowless](http://msdn.microsoft.com/library/windows/desktop/ms682300) interface pointer."},{"content":"CComControlBase::m_spOleAdviseHolder","pos":[14813,14849]},{"content":"Provides a standard implementation of a way to hold advisory connections.","pos":[14890,14963]},{"content":"Remarks","pos":[14973,14980]},{"content":"This class provides methods for creating and managing ATL controls.","pos":[14984,15051]},{"content":"<bpt id=\"p1\">[</bpt>CComControl Class<ept id=\"p1\">](../../atl/reference/ccomcontrol-class.md)</ept> derives from <ph id=\"ph1\">`CComControlBase`</ph>.","pos":[15052,15145],"source":"[CComControl Class](../../atl/reference/ccomcontrol-class.md) derives from `CComControlBase`."},{"content":"When you create a Standard Control or DHTML control using the ATL Control Wizard, the wizard will automatically derive your class from <ph id=\"ph1\">`CComControlBase`</ph>.","pos":[15146,15299],"source":" When you create a Standard Control or DHTML control using the ATL Control Wizard, the wizard will automatically derive your class from `CComControlBase`."},{"content":"For more information about creating a control, see the <bpt id=\"p1\">[</bpt>ATL Tutorial<ept id=\"p1\">](../../atl/active-template-library-atl-tutorial.md)</ept>.","pos":[15306,15427],"source":"For more information about creating a control, see the [ATL Tutorial](../../atl/active-template-library-atl-tutorial.md)."},{"content":"For more information about the ATL Project Wizard, see the article <bpt id=\"p1\">[</bpt>Creating an ATL Project<ept id=\"p1\">](../../atl/reference/creating-an-atl-project.md)</ept>.","pos":[15428,15569],"source":" For more information about the ATL Project Wizard, see the article [Creating an ATL Project](../../atl/reference/creating-an-atl-project.md)."},{"content":"Requirements","pos":[15578,15590]},{"pos":[15594,15614],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlctl.h","source":"**Header:** atlctl.h"},{"pos":[15672,15703],"content":"CComControlBase::AppearanceType"},{"pos":[15707,15781],"content":"Override if your <bpt id=\"p1\">**</bpt>m_nAppearance<ept id=\"p1\">**</ept> stock property isn't of type <bpt id=\"p2\">**</bpt>short<ept id=\"p2\">**</ept>.","source":"Override if your **m_nAppearance** stock property isn't of type **short**."},{"content":"Remarks","pos":[15834,15841]},{"content":"The ATL Control Wizard adds <bpt id=\"p1\">**</bpt>m_nAppearance<ept id=\"p1\">**</ept> stock property of type short.","pos":[15845,15920],"source":"The ATL Control Wizard adds **m_nAppearance** stock property of type short."},{"content":"Override <ph id=\"ph1\">`AppearanceType`</ph> if you use a different data type.","pos":[15921,15980],"source":" Override `AppearanceType` if you use a different data type."},{"pos":[16039,16071],"content":"CComControlBase::CComControlBase"},{"content":"The constructor.","pos":[16075,16091]},{"content":"Parameters","pos":[16140,16150]},{"content":"The handle to the window associated with the control.","pos":[16161,16214]},{"content":"Remarks","pos":[16224,16231]},{"pos":[16235,16382],"content":"Initializes the control size to 5080X5080 HIMETRIC units (2\"X2\") and initializes the <ph id=\"ph1\">`CComControlBase`</ph> data member values to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"Initializes the control size to 5080X5080 HIMETRIC units (2\"X2\") and initializes the `CComControlBase` data member values to **NULL** or **FALSE**."},{"pos":[16446,16479],"content":"CComControlBase::~CComControlBase"},{"content":"The destructor.","pos":[16483,16498]},{"content":"Remarks","pos":[16541,16548]},{"pos":[16552,16698],"content":"If the control is windowed, <ph id=\"ph1\">`~CComControlBase`</ph> destroys it by calling <bpt id=\"p1\">[</bpt>DestroyWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632682)</ept>.","source":"If the control is windowed, `~CComControlBase` destroys it by calling [DestroyWindow](http://msdn.microsoft.com/library/windows/desktop/ms632682)."},{"pos":[16763,16801],"content":"CComControlBase::ControlQueryInterface"},{"content":"Retrieves a pointer to the requested interface.","pos":[16805,16852]},{"content":"Parameters","pos":[16946,16956]},{"content":"The GUID of the interface being requested.","pos":[16969,17011]},{"content":"A pointer to the interface pointer identified by <ph id=\"ph1\">`iid`</ph>, or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the interface is not found.","pos":[17027,17125],"source":" A pointer to the interface pointer identified by `iid`, or **NULL** if the interface is not found."},{"content":"Remarks","pos":[17135,17142]},{"content":"Only handles interfaces in the COM map table.","pos":[17146,17191]},{"content":"Example","pos":[17201,17208]},{"pos":[17223,17237],"content":"NVC_ATL_COM#15"},{"pos":[17354,17387],"content":"CComControlBase::DoesVerbActivate"},{"pos":[17391,17776],"content":"Checks that the <ph id=\"ph1\">`iVerb`</ph> parameter used by <ph id=\"ph2\">`IOleObjectImpl::DoVerb`</ph> either activates the control's user interface ( <ph id=\"ph3\">`iVerb`</ph> equals <ph id=\"ph4\">`OLEIVERB_UIACTIVATE`</ph>), defines the action taken when the user double-clicks the control ( <ph id=\"ph5\">`iVerb`</ph> equals <ph id=\"ph6\">`OLEIVERB_PRIMARY`</ph>), displays the control ( <ph id=\"ph7\">`iVerb`</ph> equals <ph id=\"ph8\">`OLEIVERB_SHOW`</ph>), or activates the control ( <ph id=\"ph9\">`iVerb`</ph> equals <bpt id=\"p1\">**</bpt>OLEIVERB_INPLACEACTIVATE<ept id=\"p1\">**</ept>).","source":"Checks that the `iVerb` parameter used by `IOleObjectImpl::DoVerb` either activates the control's user interface ( `iVerb` equals `OLEIVERB_UIACTIVATE`), defines the action taken when the user double-clicks the control ( `iVerb` equals `OLEIVERB_PRIMARY`), displays the control ( `iVerb` equals `OLEIVERB_SHOW`), or activates the control ( `iVerb` equals **OLEIVERB_INPLACEACTIVATE**)."},{"content":"Parameters","pos":[17834,17844]},{"content":"Value indicating the action to be performed by <ph id=\"ph1\">`DoVerb`</ph>.","pos":[17859,17915],"source":" Value indicating the action to be performed by `DoVerb`."},{"content":"Return Value","pos":[17925,17937]},{"pos":[17941,18098],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`iVerb`</ph> equals <ph id=\"ph2\">`OLEIVERB_UIACTIVATE`</ph>, <ph id=\"ph3\">`OLEIVERB_PRIMARY`</ph>, <ph id=\"ph4\">`OLEIVERB_SHOW`</ph>, or <bpt id=\"p2\">**</bpt>OLEIVERB_INPLACEACTIVATE<ept id=\"p2\">**</ept>; otherwise, returns <bpt id=\"p3\">**</bpt>FALSE<ept id=\"p3\">**</ept>.","source":"Returns **TRUE** if `iVerb` equals `OLEIVERB_UIACTIVATE`, `OLEIVERB_PRIMARY`, `OLEIVERB_SHOW`, or **OLEIVERB_INPLACEACTIVATE**; otherwise, returns **FALSE**."},{"content":"Remarks","pos":[18108,18115]},{"content":"You can override this method to define your own activation verb.","pos":[18119,18183]},{"pos":[18245,18280],"content":"CComControlBase::DoesVerbUIActivate"},{"pos":[18284,18420],"content":"Checks that the <ph id=\"ph1\">`iVerb`</ph> parameter used by <ph id=\"ph2\">`IOleObjectImpl::DoVerb`</ph> causes the control's user interface to activate and returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>.","source":"Checks that the `iVerb` parameter used by `IOleObjectImpl::DoVerb` causes the control's user interface to activate and returns **TRUE**."},{"content":"Parameters","pos":[18480,18490]},{"content":"Value indicating the action to be performed by <ph id=\"ph1\">`DoVerb`</ph>.","pos":[18505,18561],"source":" Value indicating the action to be performed by `DoVerb`."},{"content":"Return Value","pos":[18571,18583]},{"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`iVerb`</ph> equals <ph id=\"ph2\">`OLEIVERB_UIACTIVATE`</ph>, <ph id=\"ph3\">`OLEIVERB_PRIMARY`</ph>, <ph id=\"ph4\">`OLEIVERB_SHOW`</ph>, or <bpt id=\"p2\">**</bpt>OLEIVERB_INPLACEACTIVATE<ept id=\"p2\">**</ept>.","pos":[18587,18714],"source":"Returns **TRUE** if `iVerb` equals `OLEIVERB_UIACTIVATE`, `OLEIVERB_PRIMARY`, `OLEIVERB_SHOW`, or **OLEIVERB_INPLACEACTIVATE**."},{"content":"Otherwise, the method returns <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","pos":[18715,18755],"source":" Otherwise, the method returns **FALSE**."},{"pos":[18815,18848],"content":"CComControlBase::DoVerbProperties"},{"content":"Displays the control's property pages.","pos":[18852,18890]},{"content":"Parameters","pos":[18983,18993]},{"content":"Reserved.","pos":[19012,19021]},{"content":"hwndParent","pos":[19029,19039]},{"content":"Handle of the window containing the control.","pos":[19044,19088]},{"content":"Return Value","pos":[19098,19110]},{"content":"One of the standard HRESULT values.","pos":[19114,19149]},{"content":"Example","pos":[19159,19166]},{"pos":[19181,19195],"content":"NVC_ATL_COM#19"},{"pos":[19270,19284],"content":"NVC_ATL_COM#20"},{"pos":[19397,19428],"content":"CComControlBase::FireViewChange"},{"content":"Call this method to tell the container to redraw the control, or notify the registered advise sinks that the control's view has changed.","pos":[19432,19568]},{"content":"Return Value","pos":[19617,19629]},{"content":"One of the standard HRESULT values.","pos":[19633,19668]},{"content":"Remarks","pos":[19678,19685]},{"content":"If the control is active (the control class data member <bpt id=\"p1\">[</bpt>CComControlBase::m_bInPlaceActive<ept id=\"p1\">](#ccomcontrolbase__m_binplaceactive)</ept> is <bpt id=\"p2\">**</bpt>TRUE<ept id=\"p2\">**</ept>), notifies the container that you want to redraw the entire control.","pos":[19689,19897],"source":"If the control is active (the control class data member [CComControlBase::m_bInPlaceActive](#ccomcontrolbase__m_binplaceactive) is **TRUE**), notifies the container that you want to redraw the entire control."},{"content":"If the control is inactive, notifies the control's registered advise sinks (through the control class data member <bpt id=\"p1\">[</bpt>CComControlBase::m_spAdviseSink<ept id=\"p1\">](#ccomcontrolbase__m_spadvisesink)</ept>) that the control's view has changed.","pos":[19898,20117],"source":" If the control is inactive, notifies the control's registered advise sinks (through the control class data member [CComControlBase::m_spAdviseSink](#ccomcontrolbase__m_spadvisesink)) that the control's view has changed."},{"content":"Example","pos":[20127,20134]},{"pos":[20149,20163],"content":"NVC_ATL_COM#21"},{"pos":[20284,20321],"content":"CComControlBase::GetAmbientAppearance"},{"pos":[20325,20438],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_APPEARANCE<ept id=\"p1\">**</ept>, the current appearance setting for the control: 0 for flat and 1 for 3D.","source":"Retrieves **DISPID_AMBIENT_APPEARANCE**, the current appearance setting for the control: 0 for flat and 1 for 3D."},{"content":"Parameters","pos":[20511,20521]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_APPEARANCE<ept id=\"p1\">**</ept>.","pos":[20542,20585],"source":" The property **DISPID_AMBIENT_APPEARANCE**."},{"content":"Return Value","pos":[20595,20607]},{"content":"One of the standard HRESULT values.","pos":[20611,20646]},{"content":"Example","pos":[20656,20663]},{"pos":[20678,20692],"content":"NVC_ATL_COM#22"},{"pos":[20809,20844],"content":"CComControlBase::GetAmbientAutoClip"},{"pos":[20848,20983],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_AUTOCLIP<ept id=\"p1\">**</ept>, a flag indicating whether the container supports automatic clipping of the control display area.","source":"Retrieves **DISPID_AMBIENT_AUTOCLIP**, a flag indicating whether the container supports automatic clipping of the control display area."},{"content":"Parameters","pos":[21051,21061]},{"content":"bAutoClip","pos":[21066,21075]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_AUTOCLIP<ept id=\"p1\">**</ept>.","pos":[21080,21121],"source":" The property **DISPID_AMBIENT_AUTOCLIP**."},{"content":"Return Value","pos":[21131,21143]},{"content":"One of the standard HRESULT values.","pos":[21147,21182]},{"pos":[21245,21281],"content":"CComControlBase::GetAmbientBackColor"},{"pos":[21285,21397],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_BACKCOLOR<ept id=\"p1\">**</ept>, the ambient background color for all controls, defined by the container.","source":"Retrieves **DISPID_AMBIENT_BACKCOLOR**, the ambient background color for all controls, defined by the container."},{"content":"Parameters","pos":[21471,21481]},{"content":"BackColor","pos":[21486,21495]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_BACKCOLOR<ept id=\"p1\">**</ept>.","pos":[21500,21542],"source":" The property **DISPID_AMBIENT_BACKCOLOR**."},{"content":"Return Value","pos":[21552,21564]},{"content":"One of the standard HRESULT values.","pos":[21568,21603]},{"pos":[21664,21698],"content":"CComControlBase::GetAmbientCharSet"},{"pos":[21702,21809],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_CHARSET<ept id=\"p1\">**</ept>, the ambient character set for all controls, defined by the container.","source":"Retrieves **DISPID_AMBIENT_CHARSET**, the ambient character set for all controls, defined by the container."},{"content":"Parameters","pos":[21878,21888]},{"content":"bstrCharSet","pos":[21893,21904]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_CHARSET<ept id=\"p1\">**</ept>.","pos":[21909,21949],"source":" The property **DISPID_AMBIENT_CHARSET**."},{"content":"Return Value","pos":[21959,21971]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[21975,22031]},{"pos":[22093,22128],"content":"CComControlBase::GetAmbientCodePage"},{"pos":[22132,22236],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_CODEPAGE<ept id=\"p1\">**</ept>, the ambient code page for all controls, defined by the container.","source":"Retrieves **DISPID_AMBIENT_CODEPAGE**, the ambient code page for all controls, defined by the container."},{"content":"Parameters","pos":[22306,22316]},{"content":"ulCodePage","pos":[22321,22331]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_CODEPAGE<ept id=\"p1\">**</ept>.","pos":[22336,22377],"source":" The property **DISPID_AMBIENT_CODEPAGE**."},{"content":"Return Value","pos":[22387,22399]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[22403,22459]},{"pos":[22529,22572],"content":"CComControlBase::GetAmbientDisplayAsDefault"},{"pos":[22576,22795],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_DISPLAYASDEFAULT<ept id=\"p1\">**</ept>, a flag that is <bpt id=\"p2\">**</bpt>TRUE<ept id=\"p2\">**</ept> if the container has marked the control in this site to be a default button, and therefore a button control should draw itself with a thicker frame.","source":"Retrieves **DISPID_AMBIENT_DISPLAYASDEFAULT**, a flag that is **TRUE** if the container has marked the control in this site to be a default button, and therefore a button control should draw itself with a thicker frame."},{"content":"Parameters","pos":[22879,22889]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_DISPLAYASDEFAULT<ept id=\"p1\">**</ept>.","pos":[22916,22965],"source":" The property **DISPID_AMBIENT_DISPLAYASDEFAULT**."},{"content":"Return Value","pos":[22975,22987]},{"content":"One of the standard HRESULT values.","pos":[22991,23026]},{"pos":[23091,23129],"content":"CComControlBase::GetAmbientDisplayName"},{"pos":[23133,23226],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_DISPLAYNAME<ept id=\"p1\">**</ept>, the name the container has supplied to the control.","source":"Retrieves **DISPID_AMBIENT_DISPLAYNAME**, the name the container has supplied to the control."},{"content":"Parameters","pos":[23303,23313]},{"content":"bstrDisplayName","pos":[23318,23333]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_DISPLAYNAME<ept id=\"p1\">**</ept>.","pos":[23338,23382],"source":" The property **DISPID_AMBIENT_DISPLAYNAME**."},{"content":"Return Value","pos":[23392,23404]},{"content":"One of the standard HRESULT values.","pos":[23408,23443]},{"pos":[23501,23532],"content":"CComControlBase::GetAmbientFont"},{"pos":[23536,23601],"content":"Retrieves a pointer to the container's ambient <ph id=\"ph1\">`IFont`</ph> interface.","source":"Retrieves a pointer to the container's ambient `IFont` interface."},{"content":"Parameters","pos":[23664,23674]},{"content":"A pointer to the container's ambient <bpt id=\"p1\">[</bpt>IFont<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms680673)</ept> interface.","pos":[23690,23805],"source":" A pointer to the container's ambient [IFont](http://msdn.microsoft.com/library/windows/desktop/ms680673) interface."},{"content":"Return Value","pos":[23815,23827]},{"content":"One of the standard HRESULT values.","pos":[23831,23866]},{"content":"Remarks","pos":[23876,23883]},{"content":"If the property is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the pointer is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","pos":[23887,23940],"source":"If the property is **NULL**, the pointer is **NULL**."},{"content":"If the pointer is not <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the caller must release the pointer.","pos":[23941,24009],"source":" If the pointer is not **NULL**, the caller must release the pointer."},{"pos":[24071,24106],"content":"CComControlBase::GetAmbientFontDisp"},{"pos":[24110,24190],"content":"Retrieves a pointer to the container's ambient <bpt id=\"p1\">**</bpt>IFontDisp<ept id=\"p1\">**</ept> dispatch interface.","source":"Retrieves a pointer to the container's ambient **IFontDisp** dispatch interface."},{"content":"Parameters","pos":[24261,24271]},{"content":"A pointer to the container's ambient <bpt id=\"p1\">[</bpt>IFontDisp<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692695)</ept> dispatch interface.","pos":[24287,24415],"source":" A pointer to the container's ambient [IFontDisp](http://msdn.microsoft.com/library/windows/desktop/ms692695) dispatch interface."},{"content":"Return Value","pos":[24425,24437]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[24441,24497]},{"content":"Remarks","pos":[24507,24514]},{"content":"If the property is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the pointer is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","pos":[24518,24571],"source":"If the property is **NULL**, the pointer is **NULL**."},{"content":"If the pointer is not <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the caller must release the pointer.","pos":[24572,24640],"source":" If the pointer is not **NULL**, the caller must release the pointer."},{"pos":[24703,24739],"content":"CComControlBase::GetAmbientForeColor"},{"pos":[24743,24855],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_FORECOLOR<ept id=\"p1\">**</ept>, the ambient foreground color for all controls, defined by the container.","source":"Retrieves **DISPID_AMBIENT_FORECOLOR**, the ambient foreground color for all controls, defined by the container."},{"content":"Parameters","pos":[24929,24939]},{"content":"ForeColor","pos":[24944,24953]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_FORECOLOR<ept id=\"p1\">**</ept>.","pos":[24958,25000],"source":" The property **DISPID_AMBIENT_FORECOLOR**."},{"content":"Return Value","pos":[25010,25022]},{"content":"One of the standard HRESULT values.","pos":[25026,25061]},{"pos":[25123,25158],"content":"CComControlBase::GetAmbientLocaleID"},{"pos":[25162,25254],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_LOCALEID<ept id=\"p1\">**</ept>, the identifier of the language used by the container.","source":"Retrieves **DISPID_AMBIENT_LOCALEID**, the identifier of the language used by the container."},{"content":"Parameters","pos":[25317,25327]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_LOCALEID<ept id=\"p1\">**</ept>.","pos":[25341,25382],"source":" The property **DISPID_AMBIENT_LOCALEID**."},{"content":"Return Value","pos":[25392,25404]},{"content":"One of the standard HRESULT values.","pos":[25408,25443]},{"content":"Remarks","pos":[25453,25460]},{"content":"The control can use this identifier to adapt its user interface to different languages.","pos":[25464,25551]},{"pos":[25619,25660],"content":"CComControlBase::GetAmbientMessageReflect"},{"pos":[25664,25816],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_MESSAGEREFLECT<ept id=\"p1\">**</ept>, a flag indicating whether the container wants to receive window messages (such as <ph id=\"ph1\">`WM_DRAWITEM`</ph>) as events.","source":"Retrieves **DISPID_AMBIENT_MESSAGEREFLECT**, a flag indicating whether the container wants to receive window messages (such as `WM_DRAWITEM`) as events."},{"content":"Parameters","pos":[25896,25906]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_MESSAGEREFLECT<ept id=\"p1\">**</ept>.","pos":[25931,25978],"source":" The property **DISPID_AMBIENT_MESSAGEREFLECT**."},{"content":"Return Value","pos":[25988,26000]},{"content":"One of the standard HRESULT values.","pos":[26004,26039]},{"pos":[26100,26134],"content":"CComControlBase::GetAmbientPalette"},{"pos":[26138,26218],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_PALETTE<ept id=\"p1\">**</ept>, used to access the container's <ph id=\"ph1\">`HPALETTE`</ph>.","source":"Retrieves **DISPID_AMBIENT_PALETTE**, used to access the container's `HPALETTE`."},{"content":"Parameters","pos":[26288,26298]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_PALETTE<ept id=\"p1\">**</ept>.","pos":[26316,26356],"source":" The property **DISPID_AMBIENT_PALETTE**."},{"content":"Return Value","pos":[26366,26378]},{"content":"One of the standard HRESULT values.","pos":[26382,26417]},{"pos":[26479,26514],"content":"CComControlBase::GetAmbientProperty"},{"pos":[26518,26573],"content":"Retrieves the container property specified by <ph id=\"ph1\">`dispid`</ph>.","source":"Retrieves the container property specified by `dispid`."},{"content":"Parameters","pos":[26657,26667]},{"content":"Identifier of the container property to be retrieved.","pos":[26683,26736]},{"content":"Variable to receive the property.","pos":[26752,26785]},{"content":"Return Value","pos":[26795,26807]},{"content":"One of the standard HRESULT values.","pos":[26811,26846]},{"content":"Remarks","pos":[26856,26863]},{"content":"ATL has provided a set of helper functions to retrieve specific properties, for example, <bpt id=\"p1\">[</bpt>CComControlBase::GetAmbientBackColor<ept id=\"p1\">](#ccomcontrolbase__getambientbackcolor)</ept>.","pos":[26867,27034],"source":"ATL has provided a set of helper functions to retrieve specific properties, for example, [CComControlBase::GetAmbientBackColor](#ccomcontrolbase__getambientbackcolor)."},{"content":"If there is no suitable method available, use <ph id=\"ph1\">`GetAmbientProperty`</ph>.","pos":[27035,27102],"source":" If there is no suitable method available, use `GetAmbientProperty`."},{"pos":[27167,27205],"content":"CComControlBase::GetAmbientRightToLeft"},{"pos":[27209,27312],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_RIGHTTOLEFT<ept id=\"p1\">**</ept>, the direction in which content is displayed by the container.","source":"Retrieves **DISPID_AMBIENT_RIGHTTOLEFT**, the direction in which content is displayed by the container."},{"content":"Parameters","pos":[27386,27396]},{"content":"bRightToLeft","pos":[27401,27413]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_RIGHTTOLEFT<ept id=\"p1\">**</ept>.","pos":[27418,27462],"source":" The property **DISPID_AMBIENT_RIGHTTOLEFT**."},{"content":"Set to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if content is displayed right to left, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> if it is displayed left to right.","pos":[27463,27561],"source":" Set to **TRUE** if content is displayed right to left, **FALSE** if it is displayed left to right."},{"content":"Return Value","pos":[27571,27583]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[27587,27643]},{"pos":[27707,27744],"content":"CComControlBase::GetAmbientScaleUnits"},{"pos":[27748,27873],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_SCALEUNITS<ept id=\"p1\">**</ept>, the container's ambient units (such as inches or centimeters) for labeling displays.","source":"Retrieves **DISPID_AMBIENT_SCALEUNITS**, the container's ambient units (such as inches or centimeters) for labeling displays."},{"content":"Parameters","pos":[27948,27958]},{"content":"bstrScaleUnits","pos":[27963,27977]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_SCALEUNITS<ept id=\"p1\">**</ept>.","pos":[27982,28025],"source":" The property **DISPID_AMBIENT_SCALEUNITS**."},{"content":"Return Value","pos":[28035,28047]},{"content":"One of the standard HRESULT values.","pos":[28051,28086]},{"pos":[28155,28197],"content":"CComControlBase::GetAmbientShowGrabHandles"},{"pos":[28201,28353],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_SHOWGRABHANDLES<ept id=\"p1\">**</ept>, a flag indicating whether the container allows the control to display grab handles for itself when active.","source":"Retrieves **DISPID_AMBIENT_SHOWGRABHANDLES**, a flag indicating whether the container allows the control to display grab handles for itself when active."},{"content":"Parameters","pos":[28435,28445]},{"content":"bShowGrabHandles","pos":[28450,28466]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_SHOWGRABHANDLES<ept id=\"p1\">**</ept>.","pos":[28471,28519],"source":" The property **DISPID_AMBIENT_SHOWGRABHANDLES**."},{"content":"Return Value","pos":[28529,28541]},{"content":"One of the standard HRESULT values.","pos":[28545,28580]},{"pos":[28646,28685],"content":"CComControlBase::GetAmbientShowHatching"},{"pos":[28689,28876],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_SHOWHATCHING<ept id=\"p1\">**</ept>, a flag indicating whether the container allows the control to display itself with a hatched pattern when the control's user interface is active.","source":"Retrieves **DISPID_AMBIENT_SHOWHATCHING**, a flag indicating whether the container allows the control to display itself with a hatched pattern when the control's user interface is active."},{"content":"Parameters","pos":[28952,28962]},{"content":"bShowHatching","pos":[28967,28980]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_SHOWHATCHING<ept id=\"p1\">**</ept>.","pos":[28985,29030],"source":" The property **DISPID_AMBIENT_SHOWHATCHING**."},{"content":"Return Value","pos":[29040,29052]},{"content":"One of the standard HRESULT values.","pos":[29056,29091]},{"pos":[29162,29206],"content":"CComControlBase::GetAmbientSupportsMnemonics"},{"pos":[29210,29326],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_SUPPORTSMNEMONICS<ept id=\"p1\">**</ept>, a flag indicating whether the container supports keyboard mnemonics.","source":"Retrieves **DISPID_AMBIENT_SUPPORTSMNEMONICS**, a flag indicating whether the container supports keyboard mnemonics."},{"content":"Parameters","pos":[29412,29422]},{"content":"bSupportsMnemonics","pos":[29427,29445]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_SUPPORTSMNEMONICS<ept id=\"p1\">**</ept>.","pos":[29450,29500],"source":" The property **DISPID_AMBIENT_SUPPORTSMNEMONICS**."},{"content":"Return Value","pos":[29510,29522]},{"content":"One of the standard HRESULT values.","pos":[29526,29561]},{"pos":[29624,29660],"content":"CComControlBase::GetAmbientTextAlign"},{"pos":[29664,29875],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_TEXTALIGN<ept id=\"p1\">**</ept>, the text alignment preferred by the container: 0 for general alignment (numbers right, text left), 1 for left alignment, 2 for center alignment, and 3 for right alignment.","source":"Retrieves **DISPID_AMBIENT_TEXTALIGN**, the text alignment preferred by the container: 0 for general alignment (numbers right, text left), 1 for left alignment, 2 for center alignment, and 3 for right alignment."},{"content":"Parameters","pos":[29946,29956]},{"content":"nTextAlign","pos":[29961,29971]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_TEXTALIGN<ept id=\"p1\">**</ept>.","pos":[29976,30018],"source":" The property **DISPID_AMBIENT_TEXTALIGN**."},{"content":"Return Value","pos":[30028,30040]},{"content":"One of the standard HRESULT values.","pos":[30044,30079]},{"pos":[30144,30182],"content":"CComControlBase::GetAmbientTopToBottom"},{"pos":[30186,30289],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_TOPTOBOTTOM<ept id=\"p1\">**</ept>, the direction in which content is displayed by the container.","source":"Retrieves **DISPID_AMBIENT_TOPTOBOTTOM**, the direction in which content is displayed by the container."},{"content":"Parameters","pos":[30363,30373]},{"content":"bTopToBottom","pos":[30378,30390]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_TOPTOBOTTOM<ept id=\"p1\">**</ept>.","pos":[30395,30439],"source":" The property **DISPID_AMBIENT_TOPTOBOTTOM**."},{"content":"Set to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if text is displayed top to bottom, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> if it is displayed bottom to top.","pos":[30440,30535],"source":" Set to **TRUE** if text is displayed top to bottom, **FALSE** if it is displayed bottom to top."},{"content":"Return Value","pos":[30545,30557]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[30561,30617]},{"pos":[30677,30710],"content":"CComControlBase::GetAmbientUIDead"},{"pos":[30714,30846],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_UIDEAD<ept id=\"p1\">**</ept>, a flag indicating whether the container wants the control to respond to user-interface actions.","source":"Retrieves **DISPID_AMBIENT_UIDEAD**, a flag indicating whether the container wants the control to respond to user-interface actions."},{"content":"Parameters","pos":[30910,30920]},{"content":"bUIDead","pos":[30925,30932]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_UIDEAD<ept id=\"p1\">**</ept>.","pos":[30937,30976],"source":" The property **DISPID_AMBIENT_UIDEAD**."},{"content":"Return Value","pos":[30986,30998]},{"content":"One of the standard HRESULT values.","pos":[31002,31037]},{"content":"Remarks","pos":[31047,31054]},{"content":"If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the control should not respond.","pos":[31058,31102],"source":"If **TRUE**, the control should not respond."},{"content":"This flag applies regardless of the <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_USERMODE<ept id=\"p1\">**</ept> flag.","pos":[31103,31172],"source":" This flag applies regardless of the **DISPID_AMBIENT_USERMODE** flag."},{"content":"See <bpt id=\"p1\">[</bpt>CComControlBase::GetAmbientUserMode<ept id=\"p1\">](#ccomcontrolbase__getambientusermode)</ept>.","pos":[31173,31253],"source":" See [CComControlBase::GetAmbientUserMode](#ccomcontrolbase__getambientusermode)."},{"pos":[31315,31350],"content":"CComControlBase::GetAmbientUserMode"},{"pos":[31354,31488],"content":"Retrieves <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_USERMODE<ept id=\"p1\">**</ept>, a flag indicating whether the container is in run-mode ( <bpt id=\"p2\">**</bpt>TRUE<ept id=\"p2\">**</ept>) or design-mode ( <bpt id=\"p3\">**</bpt>FALSE<ept id=\"p3\">**</ept>).","source":"Retrieves **DISPID_AMBIENT_USERMODE**, a flag indicating whether the container is in run-mode ( **TRUE**) or design-mode ( **FALSE**)."},{"content":"Parameters","pos":[31556,31566]},{"content":"The property <bpt id=\"p1\">**</bpt>DISPID_AMBIENT_USERMODE<ept id=\"p1\">**</ept>.","pos":[31585,31626],"source":" The property **DISPID_AMBIENT_USERMODE**."},{"content":"Return Value","pos":[31636,31648]},{"content":"One of the standard HRESULT values.","pos":[31652,31687]},{"pos":[31739,31764],"content":"CComControlBase::GetDirty"},{"pos":[31768,31819],"content":"Returns the value of data member <ph id=\"ph1\">`m_bRequiresSave`</ph>.","source":"Returns the value of data member `m_bRequiresSave`."},{"content":"Return Value","pos":[31859,31871]},{"pos":[31875,31961],"content":"Returns the value of data member <bpt id=\"p1\">[</bpt>m_bRequiresSave<ept id=\"p1\">](#ccomcontrolbase__m_brequiressave)</ept>.","source":"Returns the value of data member [m_bRequiresSave](#ccomcontrolbase__m_brequiressave)."},{"content":"Remarks","pos":[31971,31978]},{"pos":[31982,32062],"content":"This value is set using <bpt id=\"p1\">[</bpt>CComControlBase::SetDirty<ept id=\"p1\">](#ccomcontrolbase__setdirty)</ept>.","source":"This value is set using [CComControlBase::SetDirty](#ccomcontrolbase__setdirty)."},{"pos":[32117,32145],"content":"CComControlBase::GetZoomInfo"},{"content":"Retrieves the x and y values of the numerator and denominator of the zoom factor for a control activated for in-place editing.","pos":[32149,32275]},{"content":"Parameters","pos":[32334,32344]},{"content":"The structure that will hold the zoom factor's numerator and denominator.","pos":[32356,32429]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>ATL_DRAWINFO<ept id=\"p1\">](../../atl/reference/atl-drawinfo-structure.md)</ept>.","pos":[32430,32518],"source":" For more information, see [ATL_DRAWINFO](../../atl/reference/atl-drawinfo-structure.md)."},{"content":"Remarks","pos":[32528,32535]},{"content":"The zoom factor is the proportion of the control's natural size to its current extent.","pos":[32539,32625]},{"pos":[32684,32716],"content":"CComControlBase::InPlaceActivate"},{"pos":[32720,32825],"content":"Causes the control to transition from the inactive state to whatever state the verb in <ph id=\"ph1\">`iVerb`</ph> indicates.","source":"Causes the control to transition from the inactive state to whatever state the verb in `iVerb` indicates."},{"content":"Parameters","pos":[32917,32927]},{"content":"Value indicating the action to be performed by <bpt id=\"p1\">[</bpt>IOleObjectImpl::DoVerb<ept id=\"p1\">](../../atl/reference/ioleobjectimpl-class.md#ioleobjectimpl__doverb)</ept>.","pos":[32942,33082],"source":" Value indicating the action to be performed by [IOleObjectImpl::DoVerb](../../atl/reference/ioleobjectimpl-class.md#ioleobjectimpl__doverb)."},{"content":"prcPosRect","pos":[33090,33100]},{"content":"Pointer to the position of the in-place control.","pos":[33105,33153]},{"content":"Return Value","pos":[33163,33175]},{"content":"One of the standard HRESULT values.","pos":[33179,33214]},{"content":"Remarks","pos":[33224,33231]},{"content":"Before activation, this method checks that the control has a client site, checks how much of the control is visible, and gets the control's location in the parent window.","pos":[33235,33405]},{"content":"After the control is activated, this method activates the control's user interface and tells the container to make the control visible.","pos":[33406,33541]},{"content":"This method also retrieves an <ph id=\"ph1\">`IOleInPlaceSite`</ph>, <bpt id=\"p1\">**</bpt>IOleInPlaceSiteEx<ept id=\"p1\">**</ept>, or <bpt id=\"p2\">**</bpt>IOleInPlaceSiteWindowless<ept id=\"p2\">**</ept> interface pointer for the control and stores it in the control class's data member <bpt id=\"p3\">[</bpt>CComControlBase::m_spInPlaceSite<ept id=\"p3\">](#ccomcontrolbase__m_spinplacesite)</ept>.","pos":[33548,33806],"source":"This method also retrieves an `IOleInPlaceSite`, **IOleInPlaceSiteEx**, or **IOleInPlaceSiteWindowless** interface pointer for the control and stores it in the control class's data member [CComControlBase::m_spInPlaceSite](#ccomcontrolbase__m_spinplacesite)."},{"content":"The control class data members <bpt id=\"p1\">[</bpt>CComControlBase::m_bInPlaceSiteEx<ept id=\"p1\">](#ccomcontrolbase__m_binplacesiteex)</ept>, <bpt id=\"p2\">[</bpt>CComControlBase::m_bWndLess<ept id=\"p2\">](#ccomcontrolbase__m_bwndless)</ept>, <bpt id=\"p3\">[</bpt>CComControlBase::m_bWasOnceWindowless<ept id=\"p3\">](#ccomcontrolbase__m_bwasoncewindowless)</ept>, and <bpt id=\"p4\">[</bpt>CComControlBase::m_bNegotiatedWnd<ept id=\"p4\">](#ccomcontrolbase__m_bnegotiatedwnd)</ept> are set to true as appropriate.","pos":[33807,34160],"source":" The control class data members [CComControlBase::m_bInPlaceSiteEx](#ccomcontrolbase__m_binplacesiteex), [CComControlBase::m_bWndLess](#ccomcontrolbase__m_bwndless), [CComControlBase::m_bWasOnceWindowless](#ccomcontrolbase__m_bwasoncewindowless), and [CComControlBase::m_bNegotiatedWnd](#ccomcontrolbase__m_bnegotiatedwnd) are set to true as appropriate."},{"pos":[34219,34251],"content":"CComControlBase::InternalGetSite"},{"content":"Call this method to query the control site for a pointer to the identified interface.","pos":[34255,34340]},{"content":"Parameters","pos":[34423,34433]},{"content":"The IID of the interface pointer that should be returned in <ph id=\"ph1\">`ppUnkSite`</ph>.","pos":[34447,34519],"source":" The IID of the interface pointer that should be returned in `ppUnkSite`."},{"content":"Address of the pointer variable that receives the interface pointer requested in <ph id=\"ph1\">`riid`</ph>.","pos":[34541,34629],"source":" Address of the pointer variable that receives the interface pointer requested in `riid`."},{"content":"Return Value","pos":[34639,34651]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[34655,34711]},{"content":"Remarks","pos":[34721,34728]},{"content":"If the site supports the interface requested in <ph id=\"ph1\">`riid`</ph>, the pointer is returned by means of <ph id=\"ph2\">`ppUnkSite`</ph>.","pos":[34732,34836],"source":"If the site supports the interface requested in `riid`, the pointer is returned by means of `ppUnkSite`."},{"content":"Otherwise, <ph id=\"ph1\">`ppUnkSite`</ph> is set to NULL.","pos":[34837,34875],"source":" Otherwise, `ppUnkSite` is set to NULL."},{"pos":[34930,34958],"content":"CComControlBase::m_bAutoSize"},{"content":"Flag indicating the control cannot be any other size.","pos":[34962,35015]},{"content":"Remarks","pos":[35062,35069]},{"pos":[35073,35184],"content":"This flag is checked by <ph id=\"ph1\">`IOleObjectImpl::SetExtent`</ph> and, if <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, causes the function to return <bpt id=\"p2\">**</bpt>E_FAIL<ept id=\"p2\">**</ept>.","source":"This flag is checked by `IOleObjectImpl::SetExtent` and, if **TRUE**, causes the function to return **E_FAIL**."},{"pos":[35192,35443],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[35450,35881],"content":"If you add the <bpt id=\"p1\">**</bpt>Auto Size<ept id=\"p1\">**</ept> option on the <bpt id=\"p2\">[</bpt>Stock Properties<ept id=\"p2\">](../../atl/reference/stock-properties-atl-control-wizard.md)</ept> tab of the ATL Control Wizard, the wizard automatically creates this data member in your control class, creates put and get methods for the property, and supports <bpt id=\"p3\">[</bpt>IPropertyNotifySink<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms692638)</ept> to automatically notify the container when the property changes.","source":"If you add the **Auto Size** option on the [Stock Properties](../../atl/reference/stock-properties-atl-control-wizard.md) tab of the ATL Control Wizard, the wizard automatically creates this data member in your control class, creates put and get methods for the property, and supports [IPropertyNotifySink](http://msdn.microsoft.com/library/windows/desktop/ms692638) to automatically notify the container when the property changes."},{"pos":[35943,35978],"content":"CComControlBase::m_bDrawFromNatural"},{"pos":[35982,36146],"content":"Flag indicating that <ph id=\"ph1\">`IDataObjectImpl::GetData`</ph> and <ph id=\"ph2\">`CComControlBase::GetZoomInfo`</ph> should set the control size from <ph id=\"ph3\">`m_sizeNatural`</ph> rather than from <ph id=\"ph4\">`m_sizeExtent`</ph>.","source":"Flag indicating that `IDataObjectImpl::GetData` and `CComControlBase::GetZoomInfo` should set the control size from `m_sizeNatural` rather than from `m_sizeExtent`."},{"content":"Remarks","pos":[36200,36207]},{"pos":[36215,36466],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[36534,36575],"content":"CComControlBase::m_bDrawGetDataInHimetric"},{"pos":[36579,36681],"content":"Flag indicating that <ph id=\"ph1\">`IDataObjectImpl::GetData`</ph> should use HIMETRIC units and not pixels when drawing.","source":"Flag indicating that `IDataObjectImpl::GetData` should use HIMETRIC units and not pixels when drawing."},{"content":"Remarks","pos":[36741,36748]},{"content":"Each logical HIMETRIC unit is 0.01 millimeter.","pos":[36752,36798]},{"pos":[36806,37057],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[37117,37150],"content":"CComControlBase::m_bInPlaceActive"},{"content":"Flag indicating the control is in-place active.","pos":[37154,37201]},{"content":"Remarks","pos":[37253,37260]},{"content":"This means the control is visible and its window, if any, is visible, but its menus and toolbars may not be active.","pos":[37264,37379]},{"content":"The <ph id=\"ph1\">`m_bUIActive`</ph> flag indicates the control's user interface, such as menus, is also active.","pos":[37380,37473],"source":" The `m_bUIActive` flag indicates the control's user interface, such as menus, is also active."},{"pos":[37481,37732],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[37792,37825],"content":"CComControlBase::m_bInPlaceSiteEx"},{"pos":[37829,37977],"content":"Flag indicating the container supports the <bpt id=\"p1\">**</bpt>IOleInPlaceSiteEx<ept id=\"p1\">**</ept> interface and OCX96 control features, such as windowless and flicker-free controls.","source":"Flag indicating the container supports the **IOleInPlaceSiteEx** interface and OCX96 control features, such as windowless and flicker-free controls."},{"content":"Remarks","pos":[38029,38036]},{"pos":[38044,38295],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"content":"The data member <ph id=\"ph1\">`m_spInPlaceSite`</ph> points to an <bpt id=\"p1\">[</bpt>IOleInPlaceSite<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686586)</ept>, <bpt id=\"p2\">[</bpt>IOleInPlaceSiteEx<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms693461)</ept>, or <bpt id=\"p3\">[</bpt>IOleInPlaceSiteWindowless<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms682300)</ept> interface, depending on the value of the <ph id=\"ph2\">`m_bWndLess`</ph> and <ph id=\"ph3\">`m_bInPlaceSiteEx`</ph> flags.","pos":[38302,38683],"source":"The data member `m_spInPlaceSite` points to an [IOleInPlaceSite](http://msdn.microsoft.com/library/windows/desktop/ms686586), [IOleInPlaceSiteEx](http://msdn.microsoft.com/library/windows/desktop/ms693461), or [IOleInPlaceSiteWindowless](http://msdn.microsoft.com/library/windows/desktop/ms682300) interface, depending on the value of the `m_bWndLess` and `m_bInPlaceSiteEx` flags."},{"content":"(The data member <ph id=\"ph1\">`m_bNegotiatedWnd`</ph> must be <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> for the <ph id=\"ph2\">`m_spInPlaceSite`</ph> pointer to be valid.)","pos":[38684,38784],"source":" (The data member `m_bNegotiatedWnd` must be **TRUE** for the `m_spInPlaceSite` pointer to be valid.)"},{"content":"If <ph id=\"ph1\">`m_bWndLess`</ph> is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> and <ph id=\"ph2\">`m_bInPlaceSiteEx`</ph> is <bpt id=\"p2\">**</bpt>TRUE<ept id=\"p2\">**</ept>, <ph id=\"ph3\">`m_spInPlaceSite`</ph> is an <bpt id=\"p3\">**</bpt>IOleInPlaceSiteEx<ept id=\"p3\">**</ept> interface pointer.","pos":[38791,38920],"source":"If `m_bWndLess` is **FALSE** and `m_bInPlaceSiteEx` is **TRUE**, `m_spInPlaceSite` is an **IOleInPlaceSiteEx** interface pointer."},{"content":"See <bpt id=\"p1\">[</bpt>m_spInPlaceSite<ept id=\"p1\">](#ccomcontrolbase__m_spinplacesite)</ept> for a table showing the relationship among these three data members.","pos":[38921,39046],"source":" See [m_spInPlaceSite](#ccomcontrolbase__m_spinplacesite) for a table showing the relationship among these three data members."},{"pos":[39106,39139],"content":"CComControlBase::m_bNegotiatedWnd"},{"content":"Flag indicating whether or not the control has negotiated with the container about support for OCX96 control features (such as flicker-free and windowless controls), and whether the control is windowed or windowless.","pos":[39143,39359]},{"content":"Remarks","pos":[39411,39418]},{"pos":[39426,39677],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[39684,39775],"content":"The <ph id=\"ph1\">`m_bNegotiatedWnd`</ph> flag must be <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> for the <ph id=\"ph2\">`m_spInPlaceSite`</ph> pointer to be valid.","source":"The `m_bNegotiatedWnd` flag must be **TRUE** for the `m_spInPlaceSite` pointer to be valid."},{"pos":[39839,39876],"content":"CComControlBase::m_bRecomposeOnResize"},{"content":"Flag indicating the control wants to recompose its presentation when the container changes the control's display size.","pos":[39880,39998]},{"content":"Remarks","pos":[40054,40061]},{"pos":[40069,40320],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"content":"This flag is checked by <bpt id=\"p1\">[</bpt>IOleObjectImpl::SetExtent<ept id=\"p1\">](../../atl/reference/ioleobjectimpl-class.md#ioleobjectimpl__setextent)</ept> and, if <bpt id=\"p2\">**</bpt>TRUE<ept id=\"p2\">**</ept>, <ph id=\"ph1\">`SetExtent`</ph> notifies the container of view changes.","pos":[40327,40519],"source":"This flag is checked by [IOleObjectImpl::SetExtent](../../atl/reference/ioleobjectimpl-class.md#ioleobjectimpl__setextent) and, if **TRUE**, `SetExtent` notifies the container of view changes."},{"content":"if this flag is set, the <bpt id=\"p1\">**</bpt>OLEMISC_RECOMPOSEONRESIZE<ept id=\"p1\">**</ept> bit in the <bpt id=\"p2\">[</bpt>OLEMISC<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms678497)</ept> enumeration should also be set.","pos":[40520,40687],"source":" if this flag is set, the **OLEMISC_RECOMPOSEONRESIZE** bit in the [OLEMISC](http://msdn.microsoft.com/library/windows/desktop/ms678497) enumeration should also be set."},{"pos":[40746,40778],"content":"CComControlBase::m_bRequiresSave"},{"content":"Flag indicating the control has changed since it was last saved.","pos":[40782,40846]},{"content":"Remarks","pos":[40897,40904]},{"pos":[40908,41086],"content":"The value of <ph id=\"ph1\">`m_bRequiresSave`</ph> can be set with <bpt id=\"p1\">[</bpt>CComControlBase::SetDirty<ept id=\"p1\">](#ccomcontrolbase__setdirty)</ept> and retrieved with <bpt id=\"p2\">[</bpt>CComControlBase::GetDirty<ept id=\"p2\">](#ccomcontrolbase__getdirty)</ept>.","source":"The value of `m_bRequiresSave` can be set with [CComControlBase::SetDirty](#ccomcontrolbase__setdirty) and retrieved with [CComControlBase::GetDirty](#ccomcontrolbase__getdirty)."},{"pos":[41094,41345],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[41405,41438],"content":"CComControlBase::m_bResizeNatural"},{"content":"Flag indicating the control wants to resize its natural extent (its unscaled physical size) when the container changes the control's display size.","pos":[41442,41588]},{"content":"Remarks","pos":[41640,41647]},{"pos":[41651,41785],"content":"This flag is checked by <ph id=\"ph1\">`IOleObjectImpl::SetExtent`</ph> and, if <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the size passed into <ph id=\"ph2\">`SetExtent`</ph> is assigned to <ph id=\"ph3\">`m_sizeNatural`</ph>.","source":"This flag is checked by `IOleObjectImpl::SetExtent` and, if **TRUE**, the size passed into `SetExtent` is assigned to `m_sizeNatural`."},{"pos":[41792,41909],"content":"The size passed into <ph id=\"ph1\">`SetExtent`</ph> is always assigned to <ph id=\"ph2\">`m_sizeExtent`</ph>, regardless of the value of <ph id=\"ph3\">`m_bResizeNatural`</ph>.","source":"The size passed into `SetExtent` is always assigned to `m_sizeExtent`, regardless of the value of `m_bResizeNatural`."},{"pos":[41917,42168],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[42223,42251],"content":"CComControlBase::m_bUIActive"},{"content":"Flag indicating the control's user interface, such as menus and toolbars, is active.","pos":[42255,42339]},{"content":"Remarks","pos":[42386,42393]},{"pos":[42397,42505],"content":"The <ph id=\"ph1\">`m_bInPlaceActive`</ph> flag indicates that the control is active, but not that its user interface is active.","source":"The `m_bInPlaceActive` flag indicates that the control is active, but not that its user interface is active."},{"pos":[42513,42764],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[42825,42859],"content":"CComControlBase::m_bUsingWindowRgn"},{"content":"Flag indicating the control is using the container-supplied window region.","pos":[42863,42937]},{"content":"Remarks","pos":[42990,42997]},{"pos":[43005,43256],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[43320,43357],"content":"CComControlBase::m_bWasOnceWindowless"},{"content":"Flag indicating the control has been windowless, but may or may not be windowless now.","pos":[43361,43447]},{"content":"Remarks","pos":[43503,43510]},{"pos":[43518,43769],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[43826,43856],"content":"CComControlBase::m_bWindowOnly"},{"content":"Flag indicating the control should be windowed, even if the container supports windowless controls.","pos":[43860,43959]},{"content":"Remarks","pos":[44008,44015]},{"pos":[44023,44274],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[44328,44355],"content":"CComControlBase::m_bWndLess"},{"content":"Flag indicating the control is windowless.","pos":[44359,44401]},{"content":"Remarks","pos":[44447,44454]},{"pos":[44462,44713],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"content":"The data member <ph id=\"ph1\">`m_spInPlaceSite`</ph> points to an <bpt id=\"p1\">[</bpt>IOleInPlaceSite<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686586)</ept>, <bpt id=\"p2\">[</bpt>IOleInPlaceSiteEx<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms693461)</ept>, or <bpt id=\"p3\">[</bpt>IOleInPlaceSiteWindowless<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms682300)</ept> interface, depending on the value of the <ph id=\"ph2\">`m_bWndLess`</ph> and <bpt id=\"p4\">[</bpt>CComControlBase::m_bInPlaceSiteEx<ept id=\"p4\">](#ccomcontrolbase__m_binplacesiteex)</ept> flags.","pos":[44720,45154],"source":"The data member `m_spInPlaceSite` points to an [IOleInPlaceSite](http://msdn.microsoft.com/library/windows/desktop/ms686586), [IOleInPlaceSiteEx](http://msdn.microsoft.com/library/windows/desktop/ms693461), or [IOleInPlaceSiteWindowless](http://msdn.microsoft.com/library/windows/desktop/ms682300) interface, depending on the value of the `m_bWndLess` and [CComControlBase::m_bInPlaceSiteEx](#ccomcontrolbase__m_binplacesiteex) flags."},{"content":"(The data member <bpt id=\"p1\">[</bpt>CComControlBase::m_bNegotiatedWnd<ept id=\"p1\">](#ccomcontrolbase__m_bnegotiatedwnd)</ept> must be <bpt id=\"p2\">**</bpt>TRUE<ept id=\"p2\">**</ept> for the <bpt id=\"p3\">[</bpt>CComControlBase::m_spInPlaceSite<ept id=\"p3\">](#ccomcontrolbase__m_spinplacesite)</ept> pointer to be valid.)","pos":[45155,45360],"source":" (The data member [CComControlBase::m_bNegotiatedWnd](#ccomcontrolbase__m_bnegotiatedwnd) must be **TRUE** for the [CComControlBase::m_spInPlaceSite](#ccomcontrolbase__m_spinplacesite) pointer to be valid.)"},{"content":"If <ph id=\"ph1\">`m_bWndLess`</ph> is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, <ph id=\"ph2\">`m_spInPlaceSite`</ph> is an <bpt id=\"p2\">**</bpt>IOleInPlaceSiteWindowless<ept id=\"p2\">**</ept> interface pointer.","pos":[45367,45468],"source":"If `m_bWndLess` is **TRUE**, `m_spInPlaceSite` is an **IOleInPlaceSiteWindowless** interface pointer."},{"content":"See <bpt id=\"p1\">[</bpt>CComControlBase::m_spInPlaceSite<ept id=\"p1\">](#ccomcontrolbase__m_spinplacesite)</ept> for a table showing the complete relationship between these data members.","pos":[45469,45616],"source":" See [CComControlBase::m_spInPlaceSite](#ccomcontrolbase__m_spinplacesite) for a table showing the complete relationship between these data members."},{"pos":[45668,45693],"content":"CComControlBase::m_hWndCD"},{"content":"Contains a reference to the window handle associated with the control.","pos":[45697,45767]},{"content":"Remarks","pos":[45806,45813]},{"pos":[45821,46072],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[46131,46163],"content":"CComControlBase::m_nFreezeEvents"},{"content":"A count of the number of times the container has frozen events (refused to accept events) without an intervening thaw of events (acceptance of events).","pos":[46167,46318]},{"content":"Remarks","pos":[46364,46371]},{"pos":[46379,46630],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[46681,46705],"content":"CComControlBase::m_rcPos"},{"content":"The position in pixels of the control, expressed in the coordinates of the container.","pos":[46709,46794]},{"content":"Remarks","pos":[46831,46838]},{"pos":[46846,47097],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[47153,47182],"content":"CComControlBase::m_sizeExtent"},{"content":"The extent of the control in HIMETRIC units (each unit is 0.01 millimeters) for a particular display.","pos":[47186,47287]},{"content":"Remarks","pos":[47329,47336]},{"pos":[47344,47595],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"content":"This size is scaled by the display.","pos":[47602,47637]},{"content":"The control's physical size is specified in the <ph id=\"ph1\">`m_sizeNatural`</ph> data member and is fixed.","pos":[47638,47727],"source":" The control's physical size is specified in the `m_sizeNatural` data member and is fixed."},{"pos":[47734,47887],"content":"You can convert the size to pixels with the global function <bpt id=\"p1\">[</bpt>AtlHiMetricToPixel<ept id=\"p1\">](http://msdn.microsoft.com/library/00c3af58-7298-4082-9a2e-5b68a8cec6fd)</ept>.","source":"You can convert the size to pixels with the global function [AtlHiMetricToPixel](http://msdn.microsoft.com/library/00c3af58-7298-4082-9a2e-5b68a8cec6fd)."},{"pos":[47944,47974],"content":"CComControlBase::m_sizeNatural"},{"content":"The physical size of the control in HIMETRIC units (each unit is 0.01 millimeters).","pos":[47978,48061]},{"content":"Remarks","pos":[48104,48111]},{"pos":[48119,48370],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[48377,48455],"content":"This size is fixed, while the size in <ph id=\"ph1\">`m_sizeExtent`</ph> is scaled by the display.","source":"This size is fixed, while the size in `m_sizeExtent` is scaled by the display."},{"pos":[48462,48615],"content":"You can convert the size to pixels with the global function <bpt id=\"p1\">[</bpt>AtlHiMetricToPixel<ept id=\"p1\">](http://msdn.microsoft.com/library/00c3af58-7298-4082-9a2e-5b68a8cec6fd)</ept>.","source":"You can convert the size to pixels with the global function [AtlHiMetricToPixel](http://msdn.microsoft.com/library/00c3af58-7298-4082-9a2e-5b68a8cec6fd)."},{"pos":[48673,48704],"content":"CComControlBase::m_spAdviseSink"},{"pos":[48708,48861],"content":"A direct pointer to the advisory connection on the container (the container's <bpt id=\"p1\">[</bpt>IAdviseSink<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692513)</ept>).","source":"A direct pointer to the advisory connection on the container (the container's [IAdviseSink](http://msdn.microsoft.com/library/windows/desktop/ms692513))."},{"content":"Remarks","pos":[48928,48935]},{"pos":[48943,49194],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[49257,49293],"content":"CComControlBase::m_spAmbientDispatch"},{"pos":[49297,49412],"content":"A <ph id=\"ph1\">`CComDispatchDriver`</ph> object that lets you retrieve and set an object's properties through an <ph id=\"ph2\">`IDispatch`</ph> pointer.","source":"A `CComDispatchDriver` object that lets you retrieve and set an object's properties through an `IDispatch` pointer."},{"content":"Remarks","pos":[49475,49482]},{"pos":[49490,49741],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[49799,49830],"content":"CComControlBase::m_spClientSite"},{"content":"A pointer to the control's client site within the container.","pos":[49834,49894]},{"content":"Remarks","pos":[49964,49971]},{"pos":[49979,50230],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[50294,50331],"content":"CComControlBase::m_spDataAdviseHolder"},{"content":"Provides a standard means to hold advisory connections between data objects and advise sinks.","pos":[50335,50428]},{"content":"Remarks","pos":[50507,50514]},{"pos":[50522,50773],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[50780,50990],"content":"A data object is a control that can transfer data and that implements <bpt id=\"p1\">[</bpt>IDataObject<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms688421)</ept>, whose methods specify the format and transfer medium of the data.","source":"A data object is a control that can transfer data and that implements [IDataObject](http://msdn.microsoft.com/library/windows/desktop/ms688421), whose methods specify the format and transfer medium of the data."},{"content":"The interface <ph id=\"ph1\">`m_spDataAdviseHolder`</ph> implements the <bpt id=\"p1\">[</bpt>IDataObject::DAdvise<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692579)</ept> and <bpt id=\"p2\">[</bpt>IDataObject::DUnadvise<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms692448)</ept> methods to establish and delete advisory connections to the container.","pos":[50997,51291],"source":"The interface `m_spDataAdviseHolder` implements the [IDataObject::DAdvise](http://msdn.microsoft.com/library/windows/desktop/ms692579) and [IDataObject::DUnadvise](http://msdn.microsoft.com/library/windows/desktop/ms692448) methods to establish and delete advisory connections to the container."},{"content":"The control's container must implement an advise sink by supporting the <bpt id=\"p1\">[</bpt>IAdviseSink<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692513)</ept> interface.","pos":[51292,51448],"source":" The control's container must implement an advise sink by supporting the [IAdviseSink](http://msdn.microsoft.com/library/windows/desktop/ms692513) interface."},{"pos":[51507,51539],"content":"CComControlBase::m_spInPlaceSite"},{"pos":[51543,51841],"content":"A pointer to the container's <bpt id=\"p1\">[</bpt>IOleInPlaceSite<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686586)</ept>, <bpt id=\"p2\">[</bpt>IOleInPlaceSiteEx<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms693461)</ept>, or <bpt id=\"p3\">[</bpt>IOleInPlaceSiteWindowless<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms682300)</ept> interface pointer.","source":"A pointer to the container's [IOleInPlaceSite](http://msdn.microsoft.com/library/windows/desktop/ms686586), [IOleInPlaceSiteEx](http://msdn.microsoft.com/library/windows/desktop/ms693461), or [IOleInPlaceSiteWindowless](http://msdn.microsoft.com/library/windows/desktop/ms682300) interface pointer."},{"content":"Remarks","pos":[51923,51930]},{"pos":[51938,52189],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"pos":[52196,52319],"content":"The <ph id=\"ph1\">`m_spInPlaceSite`</ph> pointer is valid only if the <bpt id=\"p1\">[</bpt>m_bNegotiatedWnd<ept id=\"p1\">](#ccomcontrolbase__m_bnegotiatedwnd)</ept> flag is <bpt id=\"p2\">**</bpt>TRUE<ept id=\"p2\">**</ept>.","source":"The `m_spInPlaceSite` pointer is valid only if the [m_bNegotiatedWnd](#ccomcontrolbase__m_bnegotiatedwnd) flag is **TRUE**."},{"pos":[52326,52526],"content":"The following table shows how the <ph id=\"ph1\">`m_spInPlaceSite`</ph> pointer type depends on the <bpt id=\"p1\">[</bpt>m_bWndLess<ept id=\"p1\">](#ccomcontrolbase__m_bwndless)</ept> and <bpt id=\"p2\">[</bpt>m_bInPlaceSiteEx<ept id=\"p2\">](#ccomcontrolbase__m_binplacesiteex)</ept> data member flags:","source":"The following table shows how the `m_spInPlaceSite` pointer type depends on the [m_bWndLess](#ccomcontrolbase__m_bwndless) and [m_bInPlaceSiteEx](#ccomcontrolbase__m_binplacesiteex) data member flags:"},{"content":"m_spInPlaceSite Type","pos":[52533,52553]},{"content":"m_bWndLess Value","pos":[52554,52570]},{"content":"m_bInPlaceSiteEx Value","pos":[52571,52593]},{"content":"IOleInPlaceSiteWindowless","pos":[52686,52711]},{"content":"TRUE","pos":[52716,52720]},{"pos":[52723,52744],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>","source":"**TRUE** or **FALSE**"},{"content":"IOleInPlaceSiteEx","pos":[52751,52768]},{"content":"FALSE","pos":[52773,52778]},{"content":"TRUE","pos":[52783,52787]},{"content":"FALSE","pos":[52814,52819]},{"content":"FALSE","pos":[52824,52829]},{"pos":[52895,52931],"content":"CComControlBase::m_spOleAdviseHolder"},{"content":"Provides a standard implementation of a way to hold advisory connections.","pos":[52935,53008]},{"content":"Remarks","pos":[53085,53092]},{"pos":[53100,53351],"content":"[!NOTE]\n To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","leadings":["","> "],"nodes":[{"content":" To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[8,249],"nodes":[{"content":"To use this data member within your control class, you must declare it as a data member in your control class.","pos":[1,111]},{"content":"Your control class will not inherit this data member from the base class because it is declared within a union in the base class.","pos":[112,241]}]}]},{"content":"The interface <ph id=\"ph1\">`m_spOleAdviseHolder`</ph> implements the <bpt id=\"p1\">[</bpt>IOleObject::Advise<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686573)</ept> and <bpt id=\"p2\">[</bpt>IOleObject::Unadvise<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms693749)</ept> methods to establish and delete advisory connections to the container.","pos":[53358,53647],"source":"The interface `m_spOleAdviseHolder` implements the [IOleObject::Advise](http://msdn.microsoft.com/library/windows/desktop/ms686573) and [IOleObject::Unadvise](http://msdn.microsoft.com/library/windows/desktop/ms693749) methods to establish and delete advisory connections to the container."},{"content":"The control's container must implement an advise sink by supporting the <bpt id=\"p1\">[</bpt>IAdviseSink<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692513)</ept> interface.","pos":[53648,53804],"source":" The control's container must implement an advise sink by supporting the [IAdviseSink](http://msdn.microsoft.com/library/windows/desktop/ms692513) interface."},{"pos":[53854,53877],"content":"CComControlBase::OnDraw"},{"content":"Override this method to draw your control.","pos":[53881,53923]},{"content":"Parameters","pos":[53988,53998]},{"content":"A reference to the <bpt id=\"p1\">[</bpt>ATL_DRAWINFO<ept id=\"p1\">](../../atl/reference/atl-drawinfo-structure.md)</ept> structure that contains drawing information such as the draw aspect, the control bounds, and whether the drawing is optimized or not.","pos":[54010,54224],"source":" A reference to the [ATL_DRAWINFO](../../atl/reference/atl-drawinfo-structure.md) structure that contains drawing information such as the draw aspect, the control bounds, and whether the drawing is optimized or not."},{"content":"Return Value","pos":[54234,54246]},{"pos":[54250,54277],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[54287,54294]},{"pos":[54298,54469],"content":"The default <ph id=\"ph1\">`OnDraw`</ph> deletes or restores the device context or does nothing, depending on flags set in <bpt id=\"p1\">[</bpt>CComControlBase::OnDrawAdvanced<ept id=\"p1\">](#ccomcontrolbase__ondrawadvanced)</ept>.","source":"The default `OnDraw` deletes or restores the device context or does nothing, depending on flags set in [CComControlBase::OnDrawAdvanced](#ccomcontrolbase__ondrawadvanced)."},{"content":"An <ph id=\"ph1\">`OnDraw`</ph> method is automatically added to your control class when you create your control with the ATL Control Wizard.","pos":[54476,54597],"source":"An `OnDraw` method is automatically added to your control class when you create your control with the ATL Control Wizard."},{"content":"The wizard's default <ph id=\"ph1\">`OnDraw`</ph> draws a rectangle with the label \"ATL 8.0\".","pos":[54598,54671],"source":" The wizard's default `OnDraw` draws a rectangle with the label \"ATL 8.0\"."},{"content":"Example","pos":[54681,54688]},{"pos":[54692,54792],"content":"See the example for <bpt id=\"p1\">[</bpt>CComControlBase::GetAmbientAppearance<ept id=\"p1\">](#ccomcontrolbase__getambientappearance)</ept>.","source":"See the example for [CComControlBase::GetAmbientAppearance](#ccomcontrolbase__getambientappearance)."},{"pos":[54850,54881],"content":"CComControlBase::OnDrawAdvanced"},{"pos":[54885,55012],"content":"The default <ph id=\"ph1\">`OnDrawAdvanced`</ph> prepares a normalized device context for drawing, then calls your control class's <ph id=\"ph2\">`OnDraw`</ph> method.","source":"The default `OnDrawAdvanced` prepares a normalized device context for drawing, then calls your control class's `OnDraw` method."},{"content":"Parameters","pos":[55085,55095]},{"content":"A reference to the <bpt id=\"p1\">[</bpt>ATL_DRAWINFO<ept id=\"p1\">](../../atl/reference/atl-drawinfo-structure.md)</ept> structure that contains drawing information such as the draw aspect, the control bounds, and whether the drawing is optimized or not.","pos":[55107,55321],"source":" A reference to the [ATL_DRAWINFO](../../atl/reference/atl-drawinfo-structure.md) structure that contains drawing information such as the draw aspect, the control bounds, and whether the drawing is optimized or not."},{"content":"Return Value","pos":[55331,55343]},{"pos":[55347,55374],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[55384,55391]},{"content":"Override this method if you want to accept the device context passed by the container without normalizing it.","pos":[55395,55504]},{"pos":[55511,55584],"content":"See <bpt id=\"p1\">[</bpt>CComControlBase::OnDraw<ept id=\"p1\">](#ccomcontrolbase__ondraw)</ept> for more details.","source":"See [CComControlBase::OnDraw](#ccomcontrolbase__ondraw) for more details."},{"pos":[55639,55667],"content":"CComControlBase::OnKillFocus"},{"content":"Checks that the control is in-place active and has a valid control site, then informs the container that the control has lost focus.","pos":[55671,55803]},{"content":"Parameters","pos":[55934,55944]},{"content":"Reserved.","pos":[55958,55967]},{"content":"Reserved.","pos":[55986,55995]},{"content":"Reserved.","pos":[56014,56023]},{"content":"Flag that indicates whether the window message was successfully handled.","pos":[56044,56116]},{"content":"The default is <ph id=\"ph1\">`FALSE`</ph>.","pos":[56117,56140],"source":" The default is `FALSE`."},{"content":"Return Value","pos":[56150,56162]},{"content":"Always returns 1.","pos":[56166,56183]},{"pos":[56242,56274],"content":"CComControlBase::OnMouseActivate"},{"content":"Checks that the UI is in user mode, then activates the control.","pos":[56278,56341]},{"content":"Parameters","pos":[56476,56486]},{"content":"Reserved.","pos":[56500,56509]},{"content":"Reserved.","pos":[56528,56537]},{"content":"Reserved.","pos":[56556,56565]},{"content":"Flag that indicates whether the window message was successfully handled.","pos":[56586,56658]},{"content":"The default is <ph id=\"ph1\">`FALSE`</ph>.","pos":[56659,56682],"source":" The default is `FALSE`."},{"content":"Return Value","pos":[56692,56704]},{"content":"Always returns 1.","pos":[56708,56725]},{"pos":[56776,56800],"content":"CComControlBase::OnPaint"},{"pos":[56804,56928],"content":"Prepares the container for painting, gets the control's client area, then calls the control class's <ph id=\"ph1\">`OnDrawAdvanced`</ph> method.","source":"Prepares the container for painting, gets the control's client area, then calls the control class's `OnDrawAdvanced` method."},{"content":"Parameters","pos":[57054,57064]},{"content":"Reserved.","pos":[57078,57087]},{"content":"An existing HDC.","pos":[57106,57122]},{"content":"Reserved.","pos":[57141,57150]},{"content":"Reserved.","pos":[57170,57179]},{"content":"Return Value","pos":[57189,57201]},{"content":"Always returns zero.","pos":[57205,57225]},{"content":"Remarks","pos":[57235,57242]},{"pos":[57246,57392],"content":"If <ph id=\"ph1\">`wParam`</ph> is not NULL, <ph id=\"ph2\">`OnPaint`</ph> assumes it contains a valid HDC and uses it instead of <bpt id=\"p1\">[</bpt>CComControlBase::m_hWndCD<ept id=\"p1\">](#ccomcontrolbase__m_hwndcd)</ept>.","source":"If `wParam` is not NULL, `OnPaint` assumes it contains a valid HDC and uses it instead of [CComControlBase::m_hWndCD](#ccomcontrolbase__m_hwndcd)."},{"pos":[57446,57473],"content":"CComControlBase::OnSetFocus"},{"content":"Checks that the control is in-place active and has a valid control site, then informs the container the control has gained focus.","pos":[57477,57606]},{"content":"Parameters","pos":[57736,57746]},{"content":"Reserved.","pos":[57760,57769]},{"content":"Reserved.","pos":[57788,57797]},{"content":"Reserved.","pos":[57816,57825]},{"content":"Flag that indicates whether the window message was successfully handled.","pos":[57846,57918]},{"content":"The default is <ph id=\"ph1\">`FALSE`</ph>.","pos":[57919,57942],"source":" The default is `FALSE`."},{"content":"Return Value","pos":[57952,57964]},{"content":"Always returns 1.","pos":[57968,57985]},{"content":"Remarks","pos":[57995,58002]},{"content":"Sends a notification to the container that the control has received focus.","pos":[58006,58080]},{"pos":[58147,58187],"content":"CComControlBase::PreTranslateAccelerator"},{"content":"Override this method to provide your own keyboard accelerator handlers.","pos":[58191,58262]},{"content":"Parameters","pos":[58358,58368]},{"content":"Reserved.","pos":[58382,58391]},{"content":"hRet","pos":[58399,58403]},{"content":"Reserved.","pos":[58408,58417]},{"content":"Return Value","pos":[58427,58439]},{"pos":[58443,58472],"content":"By default returns <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","source":"By default returns **FALSE**."},{"pos":[58527,58555],"content":"CComControlBase::SendOnClose"},{"content":"Notifies all advisory sinks registered with the advise holder that the control has been closed.","pos":[58559,58654]},{"content":"Return Value","pos":[58700,58712]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[58716,58772]},{"content":"Remarks","pos":[58782,58789]},{"content":"Sends a notification that the control has closed its advisory sinks.","pos":[58793,58861]},{"pos":[58921,58954],"content":"CComControlBase::SendOnDataChange"},{"content":"Notifies all advisory sinks registered with the advise holder that the control data has changed.","pos":[58958,59054]},{"content":"Parameters","pos":[59119,59129]},{"content":"advf","pos":[59134,59138]},{"content":"Advise flags that specify how the call to <bpt id=\"p1\">[</bpt>IAdviseSink::OnDataChange<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms687283)</ept> is made.","pos":[59143,59281],"source":" Advise flags that specify how the call to [IAdviseSink::OnDataChange](http://msdn.microsoft.com/library/windows/desktop/ms687283) is made."},{"content":"Values are from the <bpt id=\"p1\">[</bpt>ADVF<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms693742)</ept> enumeration.","pos":[59282,59381],"source":" Values are from the [ADVF](http://msdn.microsoft.com/library/windows/desktop/ms693742) enumeration."},{"content":"Return Value","pos":[59391,59403]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[59407,59463]},{"pos":[59519,59548],"content":"CComControlBase::SendOnRename"},{"content":"Notifies all advisory sinks registered with the advise holder that the control has a new moniker.","pos":[59552,59649]},{"content":"Parameters","pos":[59709,59719]},{"content":"pmk","pos":[59724,59727]},{"content":"Pointer to the new moniker of the control.","pos":[59732,59774]},{"content":"Return Value","pos":[59784,59796]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[59800,59856]},{"content":"Remarks","pos":[59866,59873]},{"content":"Sends a notification that the moniker for the control has changed.","pos":[59877,59943]},{"pos":[59997,60024],"content":"CComControlBase::SendOnSave"},{"content":"Notifies all advisory sinks registered with the advise holder that the control has been saved.","pos":[60028,60122]},{"content":"Return Value","pos":[60167,60179]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[60183,60239]},{"content":"Remarks","pos":[60249,60256]},{"content":"Sends a notification that the control has just saved its data.","pos":[60260,60322]},{"pos":[60382,60415],"content":"CComControlBase::SendOnViewChange"},{"content":"Notifies all registered advisory sinks that the control's view has changed.","pos":[60419,60494]},{"content":"Parameters","pos":[60578,60588]},{"content":"The aspect or view of the control.","pos":[60606,60640]},{"content":"lindex","pos":[60648,60654]},{"content":"The portion of the view that has changed.","pos":[60659,60700]},{"content":"Only -1 is valid.","pos":[60701,60718]},{"content":"Return Value","pos":[60728,60740]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[60744,60800]},{"content":"Remarks","pos":[60810,60817]},{"content":"calls <bpt id=\"p1\">[</bpt>IAdviseSink::OnViewChange<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms694337)</ept>.","pos":[60840,60934],"source":" calls [IAdviseSink::OnViewChange](http://msdn.microsoft.com/library/windows/desktop/ms694337)."},{"content":"The only value of <bpt id=\"p1\">*</bpt>lindex<ept id=\"p1\">*</ept> currently supported is -1, which indicates that the entire view is of interest.","pos":[60935,61041],"source":" The only value of *lindex* currently supported is -1, which indicates that the entire view is of interest."},{"pos":[61100,61132],"content":"CComControlBase::SetControlFocus"},{"content":"Sets or removes the keyboard focus to or from the control.","pos":[61136,61194]},{"content":"Parameters","pos":[61251,61261]},{"content":"bGrab","pos":[61266,61271]},{"content":"If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, sets the keyboard focus to the calling control.","pos":[61276,61336],"source":" If **TRUE**, sets the keyboard focus to the calling control."},{"content":"If <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, removes the keyboard focus from the calling control, provided it has the focus.","pos":[61337,61430],"source":" If **FALSE**, removes the keyboard focus from the calling control, provided it has the focus."},{"content":"Return Value","pos":[61440,61452]},{"pos":[61456,61538],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the control successfully receives focus; otherwise, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"Returns **TRUE** if the control successfully receives focus; otherwise, **FALSE**."},{"content":"Remarks","pos":[61548,61555]},{"content":"For a windowed control, the Windows API function <bpt id=\"p1\">[</bpt>SetFocus<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms646312)</ept> is called.","pos":[61559,61689],"source":"For a windowed control, the Windows API function [SetFocus](http://msdn.microsoft.com/library/windows/desktop/ms646312) is called."},{"content":"For a windowless control, <bpt id=\"p1\">[</bpt>IOleInPlaceSiteWindowless::SetFocus<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679745)</ept> is called.","pos":[61690,61824],"source":" For a windowless control, [IOleInPlaceSiteWindowless::SetFocus](http://msdn.microsoft.com/library/windows/desktop/ms679745) is called."},{"content":"Through this call, a windowless control obtains the keyboard focus and can respond to window messages.","pos":[61825,61927]},{"pos":[61979,62004],"content":"CComControlBase::SetDirty"},{"pos":[62008,62072],"content":"Sets the data member <ph id=\"ph1\">`m_bRequiresSave`</ph> to the value in <ph id=\"ph2\">`bDirty`</ph>.","source":"Sets the data member `m_bRequiresSave` to the value in `bDirty`."},{"content":"Parameters","pos":[62123,62133]},{"content":"Value of the data member <bpt id=\"p1\">[</bpt>CComControlBase::m_bRequiresSave<ept id=\"p1\">](#ccomcontrolbase__m_brequiressave)</ept>.","pos":[62149,62244],"source":" Value of the data member [CComControlBase::m_bRequiresSave](#ccomcontrolbase__m_brequiressave)."},{"content":"Remarks","pos":[62254,62261]},{"content":"<bpt id=\"p1\">**</bpt>SetDirty(TRUE)<ept id=\"p1\">**</ept> should be called to flag that the control has changed since it was last saved.","pos":[62265,62362],"source":"**SetDirty(TRUE)** should be called to flag that the control has changed since it was last saved."},{"content":"The value of <ph id=\"ph1\">`m_bRequiresSave`</ph> is retrieved with <bpt id=\"p1\">[</bpt>CComControlBase::GetDirty<ept id=\"p1\">](#ccomcontrolbase__getdirty)</ept>.","pos":[62363,62468],"source":" The value of `m_bRequiresSave` is retrieved with [CComControlBase::GetDirty](#ccomcontrolbase__getdirty)."},{"content":"See Also","pos":[62477,62485]},{"content":"CComControl Class","pos":[62490,62507]},{"content":"Class Overview","pos":[62556,62570]}],"content":"---\ntitle: \"CComControlBase Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CComControlBase\"\n  - \"ATL.CComControlBase\"\n  - \"ATL::CComControlBase\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CComControlBase class\"\nms.assetid: 3d1bf022-acf2-4092-8283-ff8cee6332f3\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComControlBase Class\nThis class provides methods for creating and managing ATL controls.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\nclass ATL_NO_VTABLE CComControlBase\n```  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComControlBase::AppearanceType](#ccomcontrolbase__appearancetype)|Override if your `m_nAppearance` stock property isn't of type `short`.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComControlBase::CComControlBase](#ccomcontrolbase__ccomcontrolbase)|The constructor.|  \n|[CComControlBase::~CComControlBase](#ccomcontrolbase___dtorccomcontrolbase)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComControlBase::ControlQueryInterface](#ccomcontrolbase__controlqueryinterface)|Retrieves a pointer to the requested interface.|  \n|[CComControlBase::DoesVerbActivate](#ccomcontrolbase__doesverbactivate)|Checks that the `iVerb` parameter used by `IOleObjectImpl::DoVerb` either activates the control's user interface ( `iVerb` equals `OLEIVERB_UIACTIVATE`), defines the action taken when the user double-clicks the control ( `iVerb` equals `OLEIVERB_PRIMARY`), displays the control ( `iVerb` equals `OLEIVERB_SHOW`), or activates the control ( `iVerb` equals **OLEIVERB_INPLACEACTIVATE**).|  \n|[CComControlBase::DoesVerbUIActivate](#ccomcontrolbase__doesverbuiactivate)|Checks that the `iVerb` parameter used by `IOleObjectImpl::DoVerb` causes the control's user interface to activate and returns **TRUE**.|  \n|[CComControlBase::DoVerbProperties](#ccomcontrolbase__doverbproperties)|Displays the control's property pages.|  \n|[CComControlBase::FireViewChange](#ccomcontrolbase__fireviewchange)|Call this method to tell the container to redraw the control, or notify the registered advise sinks that the control's view has changed.|  \n|[CComControlBase::GetAmbientAppearance](#ccomcontrolbase__getambientappearance)|Retrieves **DISPID_AMBIENT_APPEARANCE**, the current appearance setting for the control: 0 for flat and 1 for 3D.|  \n|[CComControlBase::GetAmbientAutoClip](#ccomcontrolbase__getambientautoclip)|Retrieves **DISPID_AMBIENT_AUTOCLIP**, a flag indicating whether the container supports automatic clipping of the control display area.|  \n|[CComControlBase::GetAmbientBackColor](#ccomcontrolbase__getambientbackcolor)|Retrieves **DISPID_AMBIENT_BACKCOLOR**, the ambient background color for all controls, defined by the container.|  \n|[CComControlBase::GetAmbientCharSet](#ccomcontrolbase__getambientcharset)|Retrieves **DISPID_AMBIENT_CHARSET**, the ambient character set for all controls, defined by the container.|  \n|[CComControlBase::GetAmbientCodePage](#ccomcontrolbase__getambientcodepage)|Retrieves **DISPID_AMBIENT_CODEPAGE**, the ambient character set for all controls, defined by the container.|  \n|[CComControlBase::GetAmbientDisplayAsDefault](#ccomcontrolbase__getambientdisplayasdefault)|Retrieves **DISPID_AMBIENT_DISPLAYASDEFAULT**, a flag that is **TRUE** if the container has marked the control in this site to be a default button, and therefore a button control should draw itself with a thicker frame.|  \n|[CComControlBase::GetAmbientDisplayName](#ccomcontrolbase__getambientdisplayname)|Retrieves **DISPID_AMBIENT_DISPLAYNAME**, the name the container has supplied to the control.|  \n|[CComControlBase::GetAmbientFont](#ccomcontrolbase__getambientfont)|Retrieves a pointer to the container's ambient `IFont` interface.|  \n|[CComControlBase::GetAmbientFontDisp](#ccomcontrolbase__getambientfontdisp)|Retrieves a pointer to the container's ambient **IFontDisp** dispatch interface.|  \n|[CComControlBase::GetAmbientForeColor](#ccomcontrolbase__getambientforecolor)|Retrieves **DISPID_AMBIENT_FORECOLOR**, the ambient foreground color for all controls, defined by the container.|  \n|[CComControlBase::GetAmbientLocaleID](#ccomcontrolbase__getambientlocaleid)|Retrieves **DISPID_AMBIENT_LOCALEID**, the identifier of the language used by the container.|  \n|[CComControlBase::GetAmbientMessageReflect](#ccomcontrolbase__getambientmessagereflect)|Retrieves **DISPID_AMBIENT_MESSAGEREFLECT**, a flag indicating whether the container wants to receive window messages (such as `WM_DRAWITEM`) as events.|  \n|[CComControlBase::GetAmbientPalette](#ccomcontrolbase__getambientpalette)|Retrieves **DISPID_AMBIENT_PALETTE**, used to access the container's `HPALETTE`.|  \n|[CComControlBase::GetAmbientProperty](#ccomcontrolbase__getambientproperty)|Retrieves the container property specified by `id`.|  \n|[CComControlBase::GetAmbientRightToLeft](#ccomcontrolbase__getambientrighttoleft)|Retrieves **DISPID_AMBIENT_RIGHTTOLEFT**, the direction in which content is displayed by the container.|  \n|[CComControlBase::GetAmbientScaleUnits](#ccomcontrolbase__getambientscaleunits)|Retrieves **DISPID_AMBIENT_SCALEUNITS**, the container's ambient units (such as inches or centimeters) for labeling displays.|  \n|[CComControlBase::GetAmbientShowGrabHandles](#ccomcontrolbase__getambientshowgrabhandles)|Retrieves **DISPID_AMBIENT_SHOWGRABHANDLES**, a flag indicating whether the container allows the control to display grab handles for itself when active.|  \n|[CComControlBase::GetAmbientShowHatching](#ccomcontrolbase__getambientshowhatching)|Retrieves **DISPID_AMBIENT_SHOWHATCHING**, a flag indicating whether the container allows the control to display itself with a hatched pattern when the UI is active.|  \n|[CComControlBase::GetAmbientSupportsMnemonics](#ccomcontrolbase__getambientsupportsmnemonics)|Retrieves **DISPID_AMBIENT_SUPPORTSMNEMONICS**, a flag indicating whether the container supports keyboard mnemonics.|  \n|[CComControlBase::GetAmbientTextAlign](#ccomcontrolbase__getambienttextalign)|Retrieves **DISPID_AMBIENT_TEXTALIGN**, the text alignment preferred by the container: 0 for general alignment (numbers right, text left), 1 for left alignment, 2 for center alignment, and 3 for right alignment.|  \n|[CComControlBase::GetAmbientTopToBottom](#ccomcontrolbase__getambienttoptobottom)|Retrieves **DISPID_AMBIENT_TOPTOBOTTOM**, the direction in which content is displayed by the container.|  \n|[CComControlBase::GetAmbientUIDead](#ccomcontrolbase__getambientuidead)|Retrieves **DISPID_AMBIENT_UIDEAD**, a flag indicating whether the container wants the control to respond to user-interface actions.|  \n|[CComControlBase::GetAmbientUserMode](#ccomcontrolbase__getambientusermode)|Retrieves **DISPID_AMBIENT_USERMODE**, a flag indicating whether the container is in run-mode ( **TRUE**) or design-mode ( **FALSE**).|  \n|[CComControlBase::GetDirty](#ccomcontrolbase__getdirty)|Returns the value of data member `m_bRequiresSave`.|  \n|[CComControlBase::GetZoomInfo](#ccomcontrolbase__getzoominfo)|Retrieves the x and y values of the numerator and denominator of the zoom factor for a control activated for in-place editing.|  \n|[CComControlBase::InPlaceActivate](#ccomcontrolbase__inplaceactivate)|Causes the control to transition from the inactive state to whatever state the verb in `iVerb` indicates.|  \n|[CComControlBase::InternalGetSite](#ccomcontrolbase__internalgetsite)|Call this method to query the control site for a pointer to the identified interface.|  \n|[CComControlBase::OnDraw](#ccomcontrolbase__ondraw)|Override this method to draw your control.|  \n|[CComControlBase::OnDrawAdvanced](#ccomcontrolbase__ondrawadvanced)|The default **OnDrawAdvanced** prepares a normalized device context for drawing, then calls your control class's `OnDraw` method.|  \n|[CComControlBase::OnKillFocus](#ccomcontrolbase__onkillfocus)|Checks that the control is in-place active and has a valid control site, then informs the container that the control has lost focus.|  \n|[CComControlBase::OnMouseActivate](#ccomcontrolbase__onmouseactivate)|Checks that the UI is in user mode, then activates the control.|  \n|[CComControlBase::OnPaint](#ccomcontrolbase__onpaint)|Prepares the container for painting, gets the control's client area, then calls the control class's `OnDraw` method.|  \n|[CComControlBase::OnSetFocus](#ccomcontrolbase__onsetfocus)|Checks that the control is in-place active and has a valid control site, then informs the container the control has gained focus.|  \n|[CComControlBase::PreTranslateAccelerator](#ccomcontrolbase__pretranslateaccelerator)|Override this method to provide your own keyboard accelerator handlers.|  \n|[CComControlBase::SendOnClose](#ccomcontrolbase__sendonclose)|Notifies all advisory sinks registered with the advise holder that the control has been closed.|  \n|[CComControlBase::SendOnDataChange](#ccomcontrolbase__sendondatachange)|Notifies all advisory sinks registered with the advise holder that the control data has changed.|  \n|[CComControlBase::SendOnRename](#ccomcontrolbase__sendonrename)|Notifies all advisory sinks registered with the advise holder that the control has a new moniker.|  \n|[CComControlBase::SendOnSave](#ccomcontrolbase__sendonsave)|Notifies all advisory sinks registered with the advise holder that the control has been saved.|  \n|[CComControlBase::SendOnViewChange](#ccomcontrolbase__sendonviewchange)|Notifies all registered advisory sinks that the control's view has changed.|  \n|[CComControlBase::SetControlFocus](#ccomcontrolbase__setcontrolfocus)|Sets or removes the keyboard focus to or from the control.|  \n|[CComControlBase::SetDirty](#ccomcontrolbase__setdirty)|Sets the data member `m_bRequiresSave` to the value in `bDirty`.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComControlBase::m_bAutoSize](#ccomcontrolbase__m_bautosize)|Flag indicating the control cannot be any other size.|  \n|[CComControlBase::m_bDrawFromNatural](#ccomcontrolbase__m_bdrawfromnatural)|Flag indicating that `IDataObjectImpl::GetData` and `CComControlBase::GetZoomInfo` should set the control size from `m_sizeNatural` rather than from `m_sizeExtent`.|  \n|[CComControlBase::m_bDrawGetDataInHimetric](#ccomcontrolbase__m_bdrawgetdatainhimetric)|Flag indicating that `IDataObjectImpl::GetData` should use HIMETRIC units and not pixels when drawing.|  \n|[CComControlBase::m_bInPlaceActive](#ccomcontrolbase__m_binplaceactive)|Flag indicating the control is in-place active.|  \n|[CComControlBase::m_bInPlaceSiteEx](#ccomcontrolbase__m_binplacesiteex)|Flag indicating the container supports the **IOleInPlaceSiteEx** interface and OCX96 control features, such as windowless and flicker-free controls.|  \n|[CComControlBase::m_bNegotiatedWnd](#ccomcontrolbase__m_bnegotiatedwnd)|Flag indicating whether or not the control has negotiated with the container about support for OCX96 control features (such as flicker-free and windowless controls), and whether the control is windowed or windowless.|  \n|[CComControlBase::m_bRecomposeOnResize](#ccomcontrolbase__m_brecomposeonresize)|Flag indicating the control wants to recompose its presentation when the container changes the control's display size.|  \n|[CComControlBase::m_bRequiresSave](#ccomcontrolbase__m_brequiressave)|Flag indicating the control has changed since it was last saved.|  \n|[CComControlBase::m_bResizeNatural](#ccomcontrolbase__m_bresizenatural)|Flag indicating the control wants to resize its natural extent (its unscaled physical size) when the container changes the control's display size.|  \n|[CComControlBase::m_bUIActive](#ccomcontrolbase__m_buiactive)|Flag indicating the control's user interface, such as menus and toolbars, is active.|  \n|[CComControlBase::m_bUsingWindowRgn](#ccomcontrolbase__m_busingwindowrgn)|Flag indicating the control is using the container-supplied window region.|  \n|[CComControlBase::m_bWasOnceWindowless](#ccomcontrolbase__m_bwasoncewindowless)|Flag indicating the control has been windowless, but may or may not be windowless now.|  \n|[CComControlBase::m_bWindowOnly](#ccomcontrolbase__m_bwindowonly)|Flag indicating the control should be windowed, even if the container supports windowless controls.|  \n|[CComControlBase::m_bWndLess](#ccomcontrolbase__m_bwndless)|Flag indicating the control is windowless.|  \n|[CComControlBase::m_hWndCD](#ccomcontrolbase__m_hwndcd)|Contains a reference to the window handle associated with the control.|  \n|[CComControlBase::m_nFreezeEvents](#ccomcontrolbase__m_nfreezeevents)|A count of the number of times the container has frozen events (refused to accept events) without an intervening thaw of events (acceptance of events).|  \n|[CComControlBase::m_rcPos](#ccomcontrolbase__m_rcpos)|The position in pixels of the control, expressed in the coordinates of the container.|  \n|[CComControlBase::m_sizeExtent](#ccomcontrolbase__m_sizeextent)|The extent of the control in HIMETRIC units (each unit is 0.01 millimeters) for a particular display.|  \n|[CComControlBase::m_sizeNatural](#ccomcontrolbase__m_sizenatural)|The physical size of the control in HIMETRIC units (each unit is 0.01 millimeters).|  \n|[CComControlBase::m_spAdviseSink](#ccomcontrolbase__m_spadvisesink)|A direct pointer to the advisory connection on the container (the container's [IAdviseSink](http://msdn.microsoft.com/library/windows/desktop/ms692513)).|  \n|[CComControlBase::m_spAmbientDispatch](#ccomcontrolbase__m_spambientdispatch)|A `CComDispatchDriver` object that lets you retrieve and set the container's properties through an `IDispatch` pointer.|  \n|[CComControlBase::m_spClientSite](#ccomcontrolbase__m_spclientsite)|A pointer to the control's client site within the container.|  \n|[CComControlBase::m_spDataAdviseHolder](#ccomcontrolbase__m_spdataadviseholder)|Provides a standard means to hold advisory connections between data objects and advise sinks.|  \n|[CComControlBase::m_spInPlaceSite](#ccomcontrolbase__m_spinplacesite)|A pointer to the container's [IOleInPlaceSite](http://msdn.microsoft.com/library/windows/desktop/ms686586), [IOleInPlaceSiteEx](http://msdn.microsoft.com/library/windows/desktop/ms693461), or [IOleInPlaceSiteWindowless](http://msdn.microsoft.com/library/windows/desktop/ms682300) interface pointer.|  \n|[CComControlBase::m_spOleAdviseHolder](#ccomcontrolbase__m_spoleadviseholder)|Provides a standard implementation of a way to hold advisory connections.|  \n  \n## Remarks  \n This class provides methods for creating and managing ATL controls. [CComControl Class](../../atl/reference/ccomcontrol-class.md) derives from `CComControlBase`. When you create a Standard Control or DHTML control using the ATL Control Wizard, the wizard will automatically derive your class from `CComControlBase`.  \n  \n For more information about creating a control, see the [ATL Tutorial](../../atl/active-template-library-atl-tutorial.md). For more information about the ATL Project Wizard, see the article [Creating an ATL Project](../../atl/reference/creating-an-atl-project.md).  \n  \n## Requirements  \n **Header:** atlctl.h  \n  \n##  <a name=\"ccomcontrolbase__appearancetype\"></a>  CComControlBase::AppearanceType  \n Override if your **m_nAppearance** stock property isn't of type **short**.  \n  \n```\ntypedef short AppearanceType;\n```  \n  \n### Remarks  \n The ATL Control Wizard adds **m_nAppearance** stock property of type short. Override `AppearanceType` if you use a different data type.  \n  \n##  <a name=\"ccomcontrolbase__ccomcontrolbase\"></a>  CComControlBase::CComControlBase  \n The constructor.  \n  \n```\nCComControlBase(HWND& h);\n```  \n  \n### Parameters  \n `h`  \n The handle to the window associated with the control.  \n  \n### Remarks  \n Initializes the control size to 5080X5080 HIMETRIC units (2\"X2\") and initializes the `CComControlBase` data member values to **NULL** or **FALSE**.  \n  \n##  <a name=\"ccomcontrolbase___dtorccomcontrolbase\"></a>  CComControlBase::~CComControlBase  \n The destructor.  \n  \n```\n~CComControlBase();\n```  \n  \n### Remarks  \n If the control is windowed, `~CComControlBase` destroys it by calling [DestroyWindow](http://msdn.microsoft.com/library/windows/desktop/ms632682).  \n  \n##  <a name=\"ccomcontrolbase__controlqueryinterface\"></a>  CComControlBase::ControlQueryInterface  \n Retrieves a pointer to the requested interface.  \n  \n```\nvirtual HRESULT ControlQueryInterface(const IID& iid,\n    void** ppv);\n```  \n  \n### Parameters  \n `iid`  \n The GUID of the interface being requested.  \n  \n `ppv`  \n A pointer to the interface pointer identified by `iid`, or **NULL** if the interface is not found.  \n  \n### Remarks  \n Only handles interfaces in the COM map table.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#15](../../atl/codesnippet/cpp/ccomcontrolbase-class_1.cpp)]  \n  \n##  <a name=\"ccomcontrolbase__doesverbactivate\"></a>  CComControlBase::DoesVerbActivate  \n Checks that the `iVerb` parameter used by `IOleObjectImpl::DoVerb` either activates the control's user interface ( `iVerb` equals `OLEIVERB_UIACTIVATE`), defines the action taken when the user double-clicks the control ( `iVerb` equals `OLEIVERB_PRIMARY`), displays the control ( `iVerb` equals `OLEIVERB_SHOW`), or activates the control ( `iVerb` equals **OLEIVERB_INPLACEACTIVATE**).  \n  \n```\nBOOL DoesVerbActivate(LONG iVerb);\n```  \n  \n### Parameters  \n `iVerb`  \n Value indicating the action to be performed by `DoVerb`.  \n  \n### Return Value  \n Returns **TRUE** if `iVerb` equals `OLEIVERB_UIACTIVATE`, `OLEIVERB_PRIMARY`, `OLEIVERB_SHOW`, or **OLEIVERB_INPLACEACTIVATE**; otherwise, returns **FALSE**.  \n  \n### Remarks  \n You can override this method to define your own activation verb.  \n  \n##  <a name=\"ccomcontrolbase__doesverbuiactivate\"></a>  CComControlBase::DoesVerbUIActivate  \n Checks that the `iVerb` parameter used by `IOleObjectImpl::DoVerb` causes the control's user interface to activate and returns **TRUE**.  \n  \n```\nBOOL DoesVerbUIActivate(LONG iVerb);\n```  \n  \n### Parameters  \n `iVerb`  \n Value indicating the action to be performed by `DoVerb`.  \n  \n### Return Value  \n Returns **TRUE** if `iVerb` equals `OLEIVERB_UIACTIVATE`, `OLEIVERB_PRIMARY`, `OLEIVERB_SHOW`, or **OLEIVERB_INPLACEACTIVATE**. Otherwise, the method returns **FALSE**.  \n  \n##  <a name=\"ccomcontrolbase__doverbproperties\"></a>  CComControlBase::DoVerbProperties  \n Displays the control's property pages.  \n  \n```\nHRESULT DoVerbProperties(LPCRECT /* prcPosRect */,  HWND hwndParent);\n```  \n  \n### Parameters  \n `prcPosRec`  \n Reserved.  \n  \n *hwndParent*  \n Handle of the window containing the control.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#19](../../atl/codesnippet/cpp/ccomcontrolbase-class_2.cpp)]  \n  \n [!code-cpp[NVC_ATL_COM#20](../../atl/codesnippet/cpp/ccomcontrolbase-class_3.h)]  \n  \n##  <a name=\"ccomcontrolbase__fireviewchange\"></a>  CComControlBase::FireViewChange  \n Call this method to tell the container to redraw the control, or notify the registered advise sinks that the control's view has changed.  \n  \n```\nHRESULT FireViewChange();\n```  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n If the control is active (the control class data member [CComControlBase::m_bInPlaceActive](#ccomcontrolbase__m_binplaceactive) is **TRUE**), notifies the container that you want to redraw the entire control. If the control is inactive, notifies the control's registered advise sinks (through the control class data member [CComControlBase::m_spAdviseSink](#ccomcontrolbase__m_spadvisesink)) that the control's view has changed.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#21](../../atl/codesnippet/cpp/ccomcontrolbase-class_4.cpp)]  \n  \n##  <a name=\"ccomcontrolbase__getambientappearance\"></a>  CComControlBase::GetAmbientAppearance  \n Retrieves **DISPID_AMBIENT_APPEARANCE**, the current appearance setting for the control: 0 for flat and 1 for 3D.  \n  \n```\nHRESULT GetAmbientAppearance(short& nAppearance);\n```  \n  \n### Parameters  \n `nAppearance`  \n The property **DISPID_AMBIENT_APPEARANCE**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#22](../../atl/codesnippet/cpp/ccomcontrolbase-class_5.h)]  \n  \n##  <a name=\"ccomcontrolbase__getambientautoclip\"></a>  CComControlBase::GetAmbientAutoClip  \n Retrieves **DISPID_AMBIENT_AUTOCLIP**, a flag indicating whether the container supports automatic clipping of the control display area.  \n  \n```\nHRESULT GetAmbientAutoClip(BOOL& bAutoClip);\n```  \n  \n### Parameters  \n *bAutoClip*  \n The property **DISPID_AMBIENT_AUTOCLIP**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"ccomcontrolbase__getambientbackcolor\"></a>  CComControlBase::GetAmbientBackColor  \n Retrieves **DISPID_AMBIENT_BACKCOLOR**, the ambient background color for all controls, defined by the container.  \n  \n```\nHRESULT GetAmbientBackColor(OLE_COLOR& BackColor);\n```  \n  \n### Parameters  \n *BackColor*  \n The property **DISPID_AMBIENT_BACKCOLOR**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"ccomcontrolbase__getambientcharset\"></a>  CComControlBase::GetAmbientCharSet  \n Retrieves **DISPID_AMBIENT_CHARSET**, the ambient character set for all controls, defined by the container.  \n  \n```\nHRESULT GetAmbientCharSet(BSTR& bstrCharSet);\n```  \n  \n### Parameters  \n *bstrCharSet*  \n The property **DISPID_AMBIENT_CHARSET**.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"ccomcontrolbase__getambientcodepage\"></a>  CComControlBase::GetAmbientCodePage  \n Retrieves **DISPID_AMBIENT_CODEPAGE**, the ambient code page for all controls, defined by the container.  \n  \n```\nHRESULT GetAmbientCodePage(ULONG& ulCodePage);\n```  \n  \n### Parameters  \n *ulCodePage*  \n The property **DISPID_AMBIENT_CODEPAGE**.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"ccomcontrolbase__getambientdisplayasdefault\"></a>  CComControlBase::GetAmbientDisplayAsDefault  \n Retrieves **DISPID_AMBIENT_DISPLAYASDEFAULT**, a flag that is **TRUE** if the container has marked the control in this site to be a default button, and therefore a button control should draw itself with a thicker frame.  \n  \n```\nHRESULT GetAmbientDisplayAsDefault(BOOL& bDisplayAsDefault);\n```  \n  \n### Parameters  \n `bDisplayAsDefault`  \n The property **DISPID_AMBIENT_DISPLAYASDEFAULT**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"ccomcontrolbase__getambientdisplayname\"></a>  CComControlBase::GetAmbientDisplayName  \n Retrieves **DISPID_AMBIENT_DISPLAYNAME**, the name the container has supplied to the control.  \n  \n```\nHRESULT GetAmbientDisplayName(BSTR& bstrDisplayName);\n```  \n  \n### Parameters  \n *bstrDisplayName*  \n The property **DISPID_AMBIENT_DISPLAYNAME**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"ccomcontrolbase__getambientfont\"></a>  CComControlBase::GetAmbientFont  \n Retrieves a pointer to the container's ambient `IFont` interface.  \n  \n```\nHRESULT GetAmbientFont(IFont** ppFont);\n```  \n  \n### Parameters  \n `ppFont`  \n A pointer to the container's ambient [IFont](http://msdn.microsoft.com/library/windows/desktop/ms680673) interface.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n If the property is **NULL**, the pointer is **NULL**. If the pointer is not **NULL**, the caller must release the pointer.  \n  \n##  <a name=\"ccomcontrolbase__getambientfontdisp\"></a>  CComControlBase::GetAmbientFontDisp  \n Retrieves a pointer to the container's ambient **IFontDisp** dispatch interface.  \n  \n```\nHRESULT GetAmbientFontDisp(IFontDisp** ppFont);\n```  \n  \n### Parameters  \n `ppFont`  \n A pointer to the container's ambient [IFontDisp](http://msdn.microsoft.com/library/windows/desktop/ms692695) dispatch interface.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n If the property is **NULL**, the pointer is **NULL**. If the pointer is not **NULL**, the caller must release the pointer.  \n  \n##  <a name=\"ccomcontrolbase__getambientforecolor\"></a>  CComControlBase::GetAmbientForeColor  \n Retrieves **DISPID_AMBIENT_FORECOLOR**, the ambient foreground color for all controls, defined by the container.  \n  \n```\nHRESULT GetAmbientForeColor(OLE_COLOR& ForeColor);\n```  \n  \n### Parameters  \n *ForeColor*  \n The property **DISPID_AMBIENT_FORECOLOR**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"ccomcontrolbase__getambientlocaleid\"></a>  CComControlBase::GetAmbientLocaleID  \n Retrieves **DISPID_AMBIENT_LOCALEID**, the identifier of the language used by the container.  \n  \n```\nHRESULT GetAmbientLocaleID(LCID& lcid);\n```  \n  \n### Parameters  \n `lcid`  \n The property **DISPID_AMBIENT_LOCALEID**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n The control can use this identifier to adapt its user interface to different languages.  \n  \n##  <a name=\"ccomcontrolbase__getambientmessagereflect\"></a>  CComControlBase::GetAmbientMessageReflect  \n Retrieves **DISPID_AMBIENT_MESSAGEREFLECT**, a flag indicating whether the container wants to receive window messages (such as `WM_DRAWITEM`) as events.  \n  \n```\nHRESULT GetAmbientMessageReflect(BOOL& bMessageReflect);\n```  \n  \n### Parameters  \n `bMessageReflect`  \n The property **DISPID_AMBIENT_MESSAGEREFLECT**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"ccomcontrolbase__getambientpalette\"></a>  CComControlBase::GetAmbientPalette  \n Retrieves **DISPID_AMBIENT_PALETTE**, used to access the container's `HPALETTE`.  \n  \n```\nHRESULT GetAmbientPalette(HPALETTE& hPalette);\n```  \n  \n### Parameters  \n `hPalette`  \n The property **DISPID_AMBIENT_PALETTE**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"ccomcontrolbase__getambientproperty\"></a>  CComControlBase::GetAmbientProperty  \n Retrieves the container property specified by `dispid`.  \n  \n```\nHRESULT GetAmbientProperty(DISPID dispid,\n    VARIANT& var);\n```  \n  \n### Parameters  \n `dispid`  \n Identifier of the container property to be retrieved.  \n  \n `var`  \n Variable to receive the property.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n ATL has provided a set of helper functions to retrieve specific properties, for example, [CComControlBase::GetAmbientBackColor](#ccomcontrolbase__getambientbackcolor). If there is no suitable method available, use `GetAmbientProperty`.  \n  \n##  <a name=\"ccomcontrolbase__getambientrighttoleft\"></a>  CComControlBase::GetAmbientRightToLeft  \n Retrieves **DISPID_AMBIENT_RIGHTTOLEFT**, the direction in which content is displayed by the container.  \n  \n```\nHRESULT GetAmbientRightToLeft(BOOL& bRightToLeft);\n```  \n  \n### Parameters  \n *bRightToLeft*  \n The property **DISPID_AMBIENT_RIGHTTOLEFT**. Set to **TRUE** if content is displayed right to left, **FALSE** if it is displayed left to right.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"ccomcontrolbase__getambientscaleunits\"></a>  CComControlBase::GetAmbientScaleUnits  \n Retrieves **DISPID_AMBIENT_SCALEUNITS**, the container's ambient units (such as inches or centimeters) for labeling displays.  \n  \n```\nHRESULT GetAmbientScaleUnits(BSTR& bstrScaleUnits);\n```  \n  \n### Parameters  \n *bstrScaleUnits*  \n The property **DISPID_AMBIENT_SCALEUNITS**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"ccomcontrolbase__getambientshowgrabhandles\"></a>  CComControlBase::GetAmbientShowGrabHandles  \n Retrieves **DISPID_AMBIENT_SHOWGRABHANDLES**, a flag indicating whether the container allows the control to display grab handles for itself when active.  \n  \n```\nHRESULT GetAmbientShowGrabHandles(BOOL& bShowGrabHandles);\n```  \n  \n### Parameters  \n *bShowGrabHandles*  \n The property **DISPID_AMBIENT_SHOWGRABHANDLES**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"ccomcontrolbase__getambientshowhatching\"></a>  CComControlBase::GetAmbientShowHatching  \n Retrieves **DISPID_AMBIENT_SHOWHATCHING**, a flag indicating whether the container allows the control to display itself with a hatched pattern when the control's user interface is active.  \n  \n```\nHRESULT GetAmbientShowHatching(BOOL& bShowHatching);\n```  \n  \n### Parameters  \n *bShowHatching*  \n The property **DISPID_AMBIENT_SHOWHATCHING**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"ccomcontrolbase__getambientsupportsmnemonics\"></a>  CComControlBase::GetAmbientSupportsMnemonics  \n Retrieves **DISPID_AMBIENT_SUPPORTSMNEMONICS**, a flag indicating whether the container supports keyboard mnemonics.  \n  \n```\nHRESULT GetAmbientSupportsMnemonics(BOOL& bSupportsMnemonics);\n```  \n  \n### Parameters  \n *bSupportsMnemonics*  \n The property **DISPID_AMBIENT_SUPPORTSMNEMONICS**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"ccomcontrolbase__getambienttextalign\"></a>  CComControlBase::GetAmbientTextAlign  \n Retrieves **DISPID_AMBIENT_TEXTALIGN**, the text alignment preferred by the container: 0 for general alignment (numbers right, text left), 1 for left alignment, 2 for center alignment, and 3 for right alignment.  \n  \n```\nHRESULT GetAmbientTextAlign(short& nTextAlign);\n```  \n  \n### Parameters  \n *nTextAlign*  \n The property **DISPID_AMBIENT_TEXTALIGN**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"ccomcontrolbase__getambienttoptobottom\"></a>  CComControlBase::GetAmbientTopToBottom  \n Retrieves **DISPID_AMBIENT_TOPTOBOTTOM**, the direction in which content is displayed by the container.  \n  \n```\nHRESULT GetAmbientTopToBottom(BOOL& bTopToBottom);\n```  \n  \n### Parameters  \n *bTopToBottom*  \n The property **DISPID_AMBIENT_TOPTOBOTTOM**. Set to **TRUE** if text is displayed top to bottom, **FALSE** if it is displayed bottom to top.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"ccomcontrolbase__getambientuidead\"></a>  CComControlBase::GetAmbientUIDead  \n Retrieves **DISPID_AMBIENT_UIDEAD**, a flag indicating whether the container wants the control to respond to user-interface actions.  \n  \n```\nHRESULT GetAmbientUIDead(BOOL& bUIDead);\n```  \n  \n### Parameters  \n *bUIDead*  \n The property **DISPID_AMBIENT_UIDEAD**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n If **TRUE**, the control should not respond. This flag applies regardless of the **DISPID_AMBIENT_USERMODE** flag. See [CComControlBase::GetAmbientUserMode](#ccomcontrolbase__getambientusermode).  \n  \n##  <a name=\"ccomcontrolbase__getambientusermode\"></a>  CComControlBase::GetAmbientUserMode  \n Retrieves **DISPID_AMBIENT_USERMODE**, a flag indicating whether the container is in run-mode ( **TRUE**) or design-mode ( **FALSE**).  \n  \n```\nHRESULT GetAmbientUserMode(BOOL& bUserMode);\n```  \n  \n### Parameters  \n `bUserMode`  \n The property **DISPID_AMBIENT_USERMODE**.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n##  <a name=\"ccomcontrolbase__getdirty\"></a>  CComControlBase::GetDirty  \n Returns the value of data member `m_bRequiresSave`.  \n  \n```\nBOOL GetDirty();\n```  \n  \n### Return Value  \n Returns the value of data member [m_bRequiresSave](#ccomcontrolbase__m_brequiressave).  \n  \n### Remarks  \n This value is set using [CComControlBase::SetDirty](#ccomcontrolbase__setdirty).  \n  \n##  <a name=\"ccomcontrolbase__getzoominfo\"></a>  CComControlBase::GetZoomInfo  \n Retrieves the x and y values of the numerator and denominator of the zoom factor for a control activated for in-place editing.  \n  \n```\nvoid GetZoomInfo(ATL_DRAWINFO& di);\n```  \n  \n### Parameters  \n `di`  \n The structure that will hold the zoom factor's numerator and denominator. For more information, see [ATL_DRAWINFO](../../atl/reference/atl-drawinfo-structure.md).  \n  \n### Remarks  \n The zoom factor is the proportion of the control's natural size to its current extent.  \n  \n##  <a name=\"ccomcontrolbase__inplaceactivate\"></a>  CComControlBase::InPlaceActivate  \n Causes the control to transition from the inactive state to whatever state the verb in `iVerb` indicates.  \n  \n```\nHRESULT InPlaceActivate(LONG iVerb,  const RECT* prcPosRect = NULL);\n```  \n  \n### Parameters  \n `iVerb`  \n Value indicating the action to be performed by [IOleObjectImpl::DoVerb](../../atl/reference/ioleobjectimpl-class.md#ioleobjectimpl__doverb).  \n  \n *prcPosRect*  \n Pointer to the position of the in-place control.  \n  \n### Return Value  \n One of the standard HRESULT values.  \n  \n### Remarks  \n Before activation, this method checks that the control has a client site, checks how much of the control is visible, and gets the control's location in the parent window. After the control is activated, this method activates the control's user interface and tells the container to make the control visible.  \n  \n This method also retrieves an `IOleInPlaceSite`, **IOleInPlaceSiteEx**, or **IOleInPlaceSiteWindowless** interface pointer for the control and stores it in the control class's data member [CComControlBase::m_spInPlaceSite](#ccomcontrolbase__m_spinplacesite). The control class data members [CComControlBase::m_bInPlaceSiteEx](#ccomcontrolbase__m_binplacesiteex), [CComControlBase::m_bWndLess](#ccomcontrolbase__m_bwndless), [CComControlBase::m_bWasOnceWindowless](#ccomcontrolbase__m_bwasoncewindowless), and [CComControlBase::m_bNegotiatedWnd](#ccomcontrolbase__m_bnegotiatedwnd) are set to true as appropriate.  \n  \n##  <a name=\"ccomcontrolbase__internalgetsite\"></a>  CComControlBase::InternalGetSite  \n Call this method to query the control site for a pointer to the identified interface.  \n  \n```\nHRESULT InternalGetSite(REFIID riid,\n    void** ppUnkSite);\n```  \n  \n### Parameters  \n `riid`  \n The IID of the interface pointer that should be returned in `ppUnkSite`.  \n  \n `ppUnkSite`  \n Address of the pointer variable that receives the interface pointer requested in `riid`.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n If the site supports the interface requested in `riid`, the pointer is returned by means of `ppUnkSite`. Otherwise, `ppUnkSite` is set to NULL.  \n  \n##  <a name=\"ccomcontrolbase__m_bautosize\"></a>  CComControlBase::m_bAutoSize  \n Flag indicating the control cannot be any other size.  \n  \n```\nunsigned m_bAutoSize:1;\n```  \n  \n### Remarks  \n This flag is checked by `IOleObjectImpl::SetExtent` and, if **TRUE**, causes the function to return **E_FAIL**.  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n If you add the **Auto Size** option on the [Stock Properties](../../atl/reference/stock-properties-atl-control-wizard.md) tab of the ATL Control Wizard, the wizard automatically creates this data member in your control class, creates put and get methods for the property, and supports [IPropertyNotifySink](http://msdn.microsoft.com/library/windows/desktop/ms692638) to automatically notify the container when the property changes.  \n  \n##  <a name=\"ccomcontrolbase__m_bdrawfromnatural\"></a>  CComControlBase::m_bDrawFromNatural  \n Flag indicating that `IDataObjectImpl::GetData` and `CComControlBase::GetZoomInfo` should set the control size from `m_sizeNatural` rather than from `m_sizeExtent`.  \n  \n```\nunsigned m_bDrawFromNatural:1;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_bdrawgetdatainhimetric\"></a>  CComControlBase::m_bDrawGetDataInHimetric  \n Flag indicating that `IDataObjectImpl::GetData` should use HIMETRIC units and not pixels when drawing.  \n  \n```\nunsigned m_bDrawGetDataInHimetric:1;\n```  \n  \n### Remarks  \n Each logical HIMETRIC unit is 0.01 millimeter.  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_binplaceactive\"></a>  CComControlBase::m_bInPlaceActive  \n Flag indicating the control is in-place active.  \n  \n```\nunsigned m_bInPlaceActive:1;\n```  \n  \n### Remarks  \n This means the control is visible and its window, if any, is visible, but its menus and toolbars may not be active. The `m_bUIActive` flag indicates the control's user interface, such as menus, is also active.  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_binplacesiteex\"></a>  CComControlBase::m_bInPlaceSiteEx  \n Flag indicating the container supports the **IOleInPlaceSiteEx** interface and OCX96 control features, such as windowless and flicker-free controls.  \n  \n```\nunsigned m_bInPlaceSiteEx:1;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n The data member `m_spInPlaceSite` points to an [IOleInPlaceSite](http://msdn.microsoft.com/library/windows/desktop/ms686586), [IOleInPlaceSiteEx](http://msdn.microsoft.com/library/windows/desktop/ms693461), or [IOleInPlaceSiteWindowless](http://msdn.microsoft.com/library/windows/desktop/ms682300) interface, depending on the value of the `m_bWndLess` and `m_bInPlaceSiteEx` flags. (The data member `m_bNegotiatedWnd` must be **TRUE** for the `m_spInPlaceSite` pointer to be valid.)  \n  \n If `m_bWndLess` is **FALSE** and `m_bInPlaceSiteEx` is **TRUE**, `m_spInPlaceSite` is an **IOleInPlaceSiteEx** interface pointer. See [m_spInPlaceSite](#ccomcontrolbase__m_spinplacesite) for a table showing the relationship among these three data members.  \n  \n##  <a name=\"ccomcontrolbase__m_bnegotiatedwnd\"></a>  CComControlBase::m_bNegotiatedWnd  \n Flag indicating whether or not the control has negotiated with the container about support for OCX96 control features (such as flicker-free and windowless controls), and whether the control is windowed or windowless.  \n  \n```\nunsigned m_bNegotiatedWnd:1;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n The `m_bNegotiatedWnd` flag must be **TRUE** for the `m_spInPlaceSite` pointer to be valid.  \n  \n##  <a name=\"ccomcontrolbase__m_brecomposeonresize\"></a>  CComControlBase::m_bRecomposeOnResize  \n Flag indicating the control wants to recompose its presentation when the container changes the control's display size.  \n  \n```\nunsigned m_bRecomposeOnResize:1;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n This flag is checked by [IOleObjectImpl::SetExtent](../../atl/reference/ioleobjectimpl-class.md#ioleobjectimpl__setextent) and, if **TRUE**, `SetExtent` notifies the container of view changes. if this flag is set, the **OLEMISC_RECOMPOSEONRESIZE** bit in the [OLEMISC](http://msdn.microsoft.com/library/windows/desktop/ms678497) enumeration should also be set.  \n  \n##  <a name=\"ccomcontrolbase__m_brequiressave\"></a>  CComControlBase::m_bRequiresSave  \n Flag indicating the control has changed since it was last saved.  \n  \n```\nunsigned m_bRequiresSave:1;\n```  \n  \n### Remarks  \n The value of `m_bRequiresSave` can be set with [CComControlBase::SetDirty](#ccomcontrolbase__setdirty) and retrieved with [CComControlBase::GetDirty](#ccomcontrolbase__getdirty).  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_bresizenatural\"></a>  CComControlBase::m_bResizeNatural  \n Flag indicating the control wants to resize its natural extent (its unscaled physical size) when the container changes the control's display size.  \n  \n```\nunsigned m_bResizeNatural:1;\n```  \n  \n### Remarks  \n This flag is checked by `IOleObjectImpl::SetExtent` and, if **TRUE**, the size passed into `SetExtent` is assigned to `m_sizeNatural`.  \n  \n The size passed into `SetExtent` is always assigned to `m_sizeExtent`, regardless of the value of `m_bResizeNatural`.  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_buiactive\"></a>  CComControlBase::m_bUIActive  \n Flag indicating the control's user interface, such as menus and toolbars, is active.  \n  \n```\nunsigned m_bUIActive:1;\n```  \n  \n### Remarks  \n The `m_bInPlaceActive` flag indicates that the control is active, but not that its user interface is active.  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_busingwindowrgn\"></a>  CComControlBase::m_bUsingWindowRgn  \n Flag indicating the control is using the container-supplied window region.  \n  \n```\nunsigned m_bUsingWindowRgn:1;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_bwasoncewindowless\"></a>  CComControlBase::m_bWasOnceWindowless  \n Flag indicating the control has been windowless, but may or may not be windowless now.  \n  \n```\nunsigned m_bWasOnceWindowless:1;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_bwindowonly\"></a>  CComControlBase::m_bWindowOnly  \n Flag indicating the control should be windowed, even if the container supports windowless controls.  \n  \n```\nunsigned m_bWindowOnly:1;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_bwndless\"></a>  CComControlBase::m_bWndLess  \n Flag indicating the control is windowless.  \n  \n```\nunsigned m_bWndLess:1;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n The data member `m_spInPlaceSite` points to an [IOleInPlaceSite](http://msdn.microsoft.com/library/windows/desktop/ms686586), [IOleInPlaceSiteEx](http://msdn.microsoft.com/library/windows/desktop/ms693461), or [IOleInPlaceSiteWindowless](http://msdn.microsoft.com/library/windows/desktop/ms682300) interface, depending on the value of the `m_bWndLess` and [CComControlBase::m_bInPlaceSiteEx](#ccomcontrolbase__m_binplacesiteex) flags. (The data member [CComControlBase::m_bNegotiatedWnd](#ccomcontrolbase__m_bnegotiatedwnd) must be **TRUE** for the [CComControlBase::m_spInPlaceSite](#ccomcontrolbase__m_spinplacesite) pointer to be valid.)  \n  \n If `m_bWndLess` is **TRUE**, `m_spInPlaceSite` is an **IOleInPlaceSiteWindowless** interface pointer. See [CComControlBase::m_spInPlaceSite](#ccomcontrolbase__m_spinplacesite) for a table showing the complete relationship between these data members.  \n  \n##  <a name=\"ccomcontrolbase__m_hwndcd\"></a>  CComControlBase::m_hWndCD  \n Contains a reference to the window handle associated with the control.  \n  \n```\nHWND& m_hWndCD;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_nfreezeevents\"></a>  CComControlBase::m_nFreezeEvents  \n A count of the number of times the container has frozen events (refused to accept events) without an intervening thaw of events (acceptance of events).  \n  \n```\nshort m_nFreezeEvents;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_rcpos\"></a>  CComControlBase::m_rcPos  \n The position in pixels of the control, expressed in the coordinates of the container.  \n  \n```\nRECT m_rcPos;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_sizeextent\"></a>  CComControlBase::m_sizeExtent  \n The extent of the control in HIMETRIC units (each unit is 0.01 millimeters) for a particular display.  \n  \n```\nSIZE m_sizeExtent;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n This size is scaled by the display. The control's physical size is specified in the `m_sizeNatural` data member and is fixed.  \n  \n You can convert the size to pixels with the global function [AtlHiMetricToPixel](http://msdn.microsoft.com/library/00c3af58-7298-4082-9a2e-5b68a8cec6fd).  \n  \n##  <a name=\"ccomcontrolbase__m_sizenatural\"></a>  CComControlBase::m_sizeNatural  \n The physical size of the control in HIMETRIC units (each unit is 0.01 millimeters).  \n  \n```\nSIZE m_sizeNatural;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n This size is fixed, while the size in `m_sizeExtent` is scaled by the display.  \n  \n You can convert the size to pixels with the global function [AtlHiMetricToPixel](http://msdn.microsoft.com/library/00c3af58-7298-4082-9a2e-5b68a8cec6fd).  \n  \n##  <a name=\"ccomcontrolbase__m_spadvisesink\"></a>  CComControlBase::m_spAdviseSink  \n A direct pointer to the advisory connection on the container (the container's [IAdviseSink](http://msdn.microsoft.com/library/windows/desktop/ms692513)).  \n  \n```\nCComPtr<IAdviseSink>\n    m_spAdviseSink;\n```     \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_spambientdispatch\"></a>  CComControlBase::m_spAmbientDispatch  \n A `CComDispatchDriver` object that lets you retrieve and set an object's properties through an `IDispatch` pointer.  \n  \n```\nCComDispatchDriver m_spAmbientDispatch;\n```  \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_spclientsite\"></a>  CComControlBase::m_spClientSite  \n A pointer to the control's client site within the container.  \n  \n```\nCComPtr<IOleClientSite>\n    m_spClientSite;\n```     \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n##  <a name=\"ccomcontrolbase__m_spdataadviseholder\"></a>  CComControlBase::m_spDataAdviseHolder  \n Provides a standard means to hold advisory connections between data objects and advise sinks.  \n  \n```\nCComPtr<IDataAdviseHolder>\n    m_spDataAdviseHolder;\n```     \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n A data object is a control that can transfer data and that implements [IDataObject](http://msdn.microsoft.com/library/windows/desktop/ms688421), whose methods specify the format and transfer medium of the data.  \n  \n The interface `m_spDataAdviseHolder` implements the [IDataObject::DAdvise](http://msdn.microsoft.com/library/windows/desktop/ms692579) and [IDataObject::DUnadvise](http://msdn.microsoft.com/library/windows/desktop/ms692448) methods to establish and delete advisory connections to the container. The control's container must implement an advise sink by supporting the [IAdviseSink](http://msdn.microsoft.com/library/windows/desktop/ms692513) interface.  \n  \n##  <a name=\"ccomcontrolbase__m_spinplacesite\"></a>  CComControlBase::m_spInPlaceSite  \n A pointer to the container's [IOleInPlaceSite](http://msdn.microsoft.com/library/windows/desktop/ms686586), [IOleInPlaceSiteEx](http://msdn.microsoft.com/library/windows/desktop/ms693461), or [IOleInPlaceSiteWindowless](http://msdn.microsoft.com/library/windows/desktop/ms682300) interface pointer.  \n  \n```\nCComPtr<IOleInPlaceSiteWindowless>\n    m_spInPlaceSite;\n```     \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n The `m_spInPlaceSite` pointer is valid only if the [m_bNegotiatedWnd](#ccomcontrolbase__m_bnegotiatedwnd) flag is **TRUE**.  \n  \n The following table shows how the `m_spInPlaceSite` pointer type depends on the [m_bWndLess](#ccomcontrolbase__m_bwndless) and [m_bInPlaceSiteEx](#ccomcontrolbase__m_binplacesiteex) data member flags:  \n  \n|m_spInPlaceSite Type|m_bWndLess Value|m_bInPlaceSiteEx Value|  \n|---------------------------|-----------------------|-----------------------------|  \n|**IOleInPlaceSiteWindowless**|**TRUE**|**TRUE** or **FALSE**|  \n|**IOleInPlaceSiteEx**|**FALSE**|**TRUE**|  \n|`IOleInPlaceSite`|**FALSE**|**FALSE**|  \n  \n##  <a name=\"ccomcontrolbase__m_spoleadviseholder\"></a>  CComControlBase::m_spOleAdviseHolder  \n Provides a standard implementation of a way to hold advisory connections.  \n  \n```\nCComPtr<IOleAdviseHolder>\n    m_spOleAdviseHolder;\n```     \n  \n### Remarks  \n  \n> [!NOTE]\n>  To use this data member within your control class, you must declare it as a data member in your control class. Your control class will not inherit this data member from the base class because it is declared within a union in the base class.  \n  \n The interface `m_spOleAdviseHolder` implements the [IOleObject::Advise](http://msdn.microsoft.com/library/windows/desktop/ms686573) and [IOleObject::Unadvise](http://msdn.microsoft.com/library/windows/desktop/ms693749) methods to establish and delete advisory connections to the container. The control's container must implement an advise sink by supporting the [IAdviseSink](http://msdn.microsoft.com/library/windows/desktop/ms692513) interface.  \n  \n##  <a name=\"ccomcontrolbase__ondraw\"></a>  CComControlBase::OnDraw  \n Override this method to draw your control.  \n  \n```\nvirtual HRESULT OnDraw(ATL_DRAWINFO& di);\n```  \n  \n### Parameters  \n `di`  \n A reference to the [ATL_DRAWINFO](../../atl/reference/atl-drawinfo-structure.md) structure that contains drawing information such as the draw aspect, the control bounds, and whether the drawing is optimized or not.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The default `OnDraw` deletes or restores the device context or does nothing, depending on flags set in [CComControlBase::OnDrawAdvanced](#ccomcontrolbase__ondrawadvanced).  \n  \n An `OnDraw` method is automatically added to your control class when you create your control with the ATL Control Wizard. The wizard's default `OnDraw` draws a rectangle with the label \"ATL 8.0\".  \n  \n### Example  \n See the example for [CComControlBase::GetAmbientAppearance](#ccomcontrolbase__getambientappearance).  \n  \n##  <a name=\"ccomcontrolbase__ondrawadvanced\"></a>  CComControlBase::OnDrawAdvanced  \n The default `OnDrawAdvanced` prepares a normalized device context for drawing, then calls your control class's `OnDraw` method.  \n  \n```\nvirtual HRESULT OnDrawAdvanced(ATL_DRAWINFO& di);\n```  \n  \n### Parameters  \n `di`  \n A reference to the [ATL_DRAWINFO](../../atl/reference/atl-drawinfo-structure.md) structure that contains drawing information such as the draw aspect, the control bounds, and whether the drawing is optimized or not.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n Override this method if you want to accept the device context passed by the container without normalizing it.  \n  \n See [CComControlBase::OnDraw](#ccomcontrolbase__ondraw) for more details.  \n  \n##  <a name=\"ccomcontrolbase__onkillfocus\"></a>  CComControlBase::OnKillFocus  \n Checks that the control is in-place active and has a valid control site, then informs the container that the control has lost focus.  \n  \n```\nLRESULT OnKillFocus(UINT /* nMsg */,\n    WPARAM /* wParam */,\n    LPARAM /* lParam */,\n    BOOL& bHandled);\n```  \n  \n### Parameters  \n `nMsg`  \n Reserved.  \n  \n `wParam`  \n Reserved.  \n  \n `lParam`  \n Reserved.  \n  \n `bHandled`  \n Flag that indicates whether the window message was successfully handled. The default is `FALSE`.  \n  \n### Return Value  \n Always returns 1.  \n  \n##  <a name=\"ccomcontrolbase__onmouseactivate\"></a>  CComControlBase::OnMouseActivate  \n Checks that the UI is in user mode, then activates the control.  \n  \n```\nLRESULT OnMouseActivate(UINT /* nMsg */,\n    WPARAM /* wParam */,\n    LPARAM /* lParam */,\n    BOOL& bHandled);\n```  \n  \n### Parameters  \n `nMsg`  \n Reserved.  \n  \n `wParam`  \n Reserved.  \n  \n `lParam`  \n Reserved.  \n  \n `bHandled`  \n Flag that indicates whether the window message was successfully handled. The default is `FALSE`.  \n  \n### Return Value  \n Always returns 1.  \n  \n##  <a name=\"ccomcontrolbase__onpaint\"></a>  CComControlBase::OnPaint  \n Prepares the container for painting, gets the control's client area, then calls the control class's `OnDrawAdvanced` method.  \n  \n```\nLRESULT OnPaint(UINT /* nMsg */,\n    WPARAM wParam,\n    LPARAM /* lParam */,\n    BOOL& /* lResult */);\n```  \n  \n### Parameters  \n `nMsg`  \n Reserved.  \n  \n `wParam`  \n An existing HDC.  \n  \n `lParam`  \n Reserved.  \n  \n `lResult`  \n Reserved.  \n  \n### Return Value  \n Always returns zero.  \n  \n### Remarks  \n If `wParam` is not NULL, `OnPaint` assumes it contains a valid HDC and uses it instead of [CComControlBase::m_hWndCD](#ccomcontrolbase__m_hwndcd).  \n  \n##  <a name=\"ccomcontrolbase__onsetfocus\"></a>  CComControlBase::OnSetFocus  \n Checks that the control is in-place active and has a valid control site, then informs the container the control has gained focus.  \n  \n```\nLRESULT OnSetFocus(UINT /* nMsg */,\n    WPARAM /* wParam */,\n    LPARAM /* lParam */,\n    BOOL& bHandled);\n```  \n  \n### Parameters  \n `nMsg`  \n Reserved.  \n  \n `wParam`  \n Reserved.  \n  \n `lParam`  \n Reserved.  \n  \n `bHandled`  \n Flag that indicates whether the window message was successfully handled. The default is `FALSE`.  \n  \n### Return Value  \n Always returns 1.  \n  \n### Remarks  \n Sends a notification to the container that the control has received focus.  \n  \n##  <a name=\"ccomcontrolbase__pretranslateaccelerator\"></a>  CComControlBase::PreTranslateAccelerator  \n Override this method to provide your own keyboard accelerator handlers.  \n  \n```\nBOOL PreTranslateAccelerator(LPMSG /* pMsg */,\n    HRESULT& /* hRet */);\n```  \n  \n### Parameters  \n `pMsg`  \n Reserved.  \n  \n *hRet*  \n Reserved.  \n  \n### Return Value  \n By default returns **FALSE**.  \n  \n##  <a name=\"ccomcontrolbase__sendonclose\"></a>  CComControlBase::SendOnClose  \n Notifies all advisory sinks registered with the advise holder that the control has been closed.  \n  \n```\nHRESULT SendOnClose();\n```  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n Sends a notification that the control has closed its advisory sinks.  \n  \n##  <a name=\"ccomcontrolbase__sendondatachange\"></a>  CComControlBase::SendOnDataChange  \n Notifies all advisory sinks registered with the advise holder that the control data has changed.  \n  \n```\nHRESULT SendOnDataChange(DWORD advf = 0);\n```  \n  \n### Parameters  \n *advf*  \n Advise flags that specify how the call to [IAdviseSink::OnDataChange](http://msdn.microsoft.com/library/windows/desktop/ms687283) is made. Values are from the [ADVF](http://msdn.microsoft.com/library/windows/desktop/ms693742) enumeration.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n##  <a name=\"ccomcontrolbase__sendonrename\"></a>  CComControlBase::SendOnRename  \n Notifies all advisory sinks registered with the advise holder that the control has a new moniker.  \n  \n```\nHRESULT SendOnRename(IMoniker* pmk);\n```  \n  \n### Parameters  \n *pmk*  \n Pointer to the new moniker of the control.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n Sends a notification that the moniker for the control has changed.  \n  \n##  <a name=\"ccomcontrolbase__sendonsave\"></a>  CComControlBase::SendOnSave  \n Notifies all advisory sinks registered with the advise holder that the control has been saved.  \n  \n```\nHRESULT SendOnSave();\n```  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n Sends a notification that the control has just saved its data.  \n  \n##  <a name=\"ccomcontrolbase__sendonviewchange\"></a>  CComControlBase::SendOnViewChange  \n Notifies all registered advisory sinks that the control's view has changed.  \n  \n```\nHRESULT SendOnViewChange(DWORD dwAspect,  LONG lindex = -1);\n```  \n  \n### Parameters  \n `dwAspect`  \n The aspect or view of the control.  \n  \n *lindex*  \n The portion of the view that has changed. Only -1 is valid.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n `SendOnViewChange` calls [IAdviseSink::OnViewChange](http://msdn.microsoft.com/library/windows/desktop/ms694337). The only value of *lindex* currently supported is -1, which indicates that the entire view is of interest.  \n  \n##  <a name=\"ccomcontrolbase__setcontrolfocus\"></a>  CComControlBase::SetControlFocus  \n Sets or removes the keyboard focus to or from the control.  \n  \n```\nBOOL SetControlFocus(BOOL bGrab);\n```  \n  \n### Parameters  \n *bGrab*  \n If **TRUE**, sets the keyboard focus to the calling control. If **FALSE**, removes the keyboard focus from the calling control, provided it has the focus.  \n  \n### Return Value  \n Returns **TRUE** if the control successfully receives focus; otherwise, **FALSE**.  \n  \n### Remarks  \n For a windowed control, the Windows API function [SetFocus](http://msdn.microsoft.com/library/windows/desktop/ms646312) is called. For a windowless control, [IOleInPlaceSiteWindowless::SetFocus](http://msdn.microsoft.com/library/windows/desktop/ms679745) is called. Through this call, a windowless control obtains the keyboard focus and can respond to window messages.  \n  \n##  <a name=\"ccomcontrolbase__setdirty\"></a>  CComControlBase::SetDirty  \n Sets the data member `m_bRequiresSave` to the value in `bDirty`.  \n  \n```\nvoid SetDirty(BOOL bDirty);\n```  \n  \n### Parameters  \n `bDirty`  \n Value of the data member [CComControlBase::m_bRequiresSave](#ccomcontrolbase__m_brequiressave).  \n  \n### Remarks  \n **SetDirty(TRUE)** should be called to flag that the control has changed since it was last saved. The value of `m_bRequiresSave` is retrieved with [CComControlBase::GetDirty](#ccomcontrolbase__getdirty).  \n  \n## See Also  \n [CComControl Class](../../atl/reference/ccomcontrol-class.md)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}