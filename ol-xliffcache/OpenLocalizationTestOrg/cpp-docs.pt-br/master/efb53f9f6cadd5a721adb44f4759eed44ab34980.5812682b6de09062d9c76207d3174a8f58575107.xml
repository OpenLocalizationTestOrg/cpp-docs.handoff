{"nodes":[{"pos":[12,62],"content":"JScript Functions for C++ Wizards | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"JScript Functions for C++ Wizards | Microsoft Docs","pos":[0,50]}]},{"content":"JScript Functions for C++ Wizards","pos":[644,677]},{"content":"AddATLSupportToProject","pos":[694,716]},{"content":"Adds ATL support to an MFC project.","pos":[752,787]},{"content":"AddCoclassFromFile","pos":[793,811]},{"content":"Renders and inserts into the project's .idl file a template file that contains a coclass.","pos":[843,932]},{"content":"AddCommonConfig","pos":[938,953]},{"content":"Adds the default configurations to the project.","pos":[982,1029]},{"content":"AddFilesToProject","pos":[1035,1052]},{"content":"Adds all the files to the project based on the list in the file Templates.inf.","pos":[1083,1161]},{"content":"AddInterfaceFromFile","pos":[1167,1187]},{"content":"Renders and inserts into the project's IDL file a template file that contains an interface.","pos":[1221,1312]},{"content":"CanAddATLClass","pos":[1318,1332]},{"content":"Called by the wizard to verify if the project is compatible with the code wizard that is about to be run (in other words, it can accept an ATL class).","pos":[1360,1510]},{"content":"The wizard calls this function when the parameter PREPROCESS_FUNCTION is in the <bpt id=\"p1\">[</bpt>project control's .vsz file<ept id=\"p1\">](../ide/dot-vsz-file-project-control.md)</ept> and checks if the <bpt id=\"p2\">[</bpt>Visual C++ Code Model<ept id=\"p2\">](http://msdn.microsoft.com/en-us/dd6452c2-1054-44a1-b0eb-639a94a1216b)</ept> is available.","pos":[1523,1798],"source":" The wizard calls this function when the parameter PREPROCESS_FUNCTION is in the [project control's .vsz file](../ide/dot-vsz-file-project-control.md) and checks if the [Visual C++ Code Model](http://msdn.microsoft.com/en-us/dd6452c2-1054-44a1-b0eb-639a94a1216b) is available."},{"content":"If the code model is not available, the function reports an error and returns <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","pos":[1799,1887],"source":" If the code model is not available, the function reports an error and returns **false**."},{"content":"CanAddClass","pos":[1893,1904]},{"content":"The wizard calls this function when the parameter PREPROCESS_FUNCTION is in the project control's .vsz file.","pos":[1929,2037]},{"content":"It verifies if the Visual C++ Code Model object is available.","pos":[2050,2111]},{"content":"If the code model is not available, the function reports an error and returns <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","pos":[2112,2200],"source":" If the code model is not available, the function reports an error and returns **false**."},{"content":"CanAddMFCClass","pos":[2206,2220]},{"content":"Called by the wizard to verify if the project is compatible with the Code Wizard that is about to be run (in other words, it can accept an MFC class).","pos":[2248,2398]},{"content":"The wizard calls this function when the parameter PREPROCESS_FUNCTION is in the project control's .vsz file and checks if the Visual C++ Code Model object is available.","pos":[2411,2579]},{"content":"If the code model is not available, the function reports an error and returns <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","pos":[2580,2668],"source":" If the code model is not available, the function reports an error and returns **false**."},{"content":"CanAddNonAttributed","pos":[2674,2693]},{"content":"Indicates whether the project supports both attributed and nonattributed ATL objects.","pos":[2726,2811]},{"content":"CanUseFileName","pos":[2817,2831]},{"content":"Checks if a file exists.","pos":[2859,2883]},{"content":"If so, the wizard prompts the user to merge the code to be added to the existing file.","pos":[2884,2970]},{"content":"ConvertProjectToAttributed","pos":[2976,3002]},{"content":"Converts an ATL project to attributed.","pos":[3042,3080]},{"content":"CreateInfFile","pos":[3086,3099]},{"content":"Creates the Templates.inf file.","pos":[3126,3157]},{"content":"CreateProject","pos":[3163,3176]},{"content":"Creates a C++ project.","pos":[3203,3225]},{"content":"CreateSafeName","pos":[3231,3245]},{"content":"Generates a C++ friendly name.","pos":[3273,3303]},{"content":"DeleteFile","pos":[3309,3319]},{"content":"Deletes the specified file.","pos":[3343,3370]},{"content":"DoesIncludeExist","pos":[3376,3392]},{"pos":[3422,3480],"content":"Indicates whether a <ph id=\"ph1\">`#include`</ph> statement exists in a file.","source":"Indicates whether a `#include` statement exists in a file."},{"content":"GetCodeForDllCanUnloadNow","pos":[3486,3511]},{"content":"Retrieves code needed to unload the DLL.","pos":[3550,3590]},{"content":"GetCodeForDllGetClassObject","pos":[3596,3623]},{"content":"Retrieves the code for the DLL class object.","pos":[3664,3708]},{"content":"GetCodeForDllRegisterServer","pos":[3714,3741]},{"content":"Retrieves the code to register a server.","pos":[3782,3822]},{"content":"GetCodeForDllUnregisterServer","pos":[3828,3857]},{"content":"Retrieves the code to unregister a server.","pos":[3900,3942]},{"content":"GetCodeForExitInstance","pos":[3948,3970]},{"pos":[4006,4057],"content":"Helper function to get the text for <ph id=\"ph1\">`ExitInstance`</ph>.","source":"Helper function to get the text for `ExitInstance`."},{"content":"GetCodeForInitInstance","pos":[4063,4085]},{"pos":[4121,4220],"content":"Helper function to get the text for <bpt id=\"p1\">[</bpt>InitInstance<ept id=\"p1\">](../mfc/reference/cwinapp-class.md#initinstance)</ept>.","source":"Helper function to get the text for [InitInstance](../mfc/reference/cwinapp-class.md#initinstance)."},{"content":"GetExportPragmas","pos":[4226,4242]},{"content":"Retrieves the pragmas for exporting functions.","pos":[4272,4318]},{"content":"GetInterfaceClasses","pos":[4324,4343]},{"pos":[4376,4438],"content":"Returns the <ph id=\"ph1\">`VCCodeClass`</ph> object associated with an interface.","source":"Returns the `VCCodeClass` object associated with an interface."},{"content":"GetInterfaceType","pos":[4444,4460]},{"content":"Returns the type of interface (for example, custom, dual, dispinterface, oleautomation).","pos":[4490,4578]},{"content":"GetMaxID","pos":[4584,4592]},{"pos":[4614,4695],"content":"Returns the highest <ph id=\"ph1\">`dispid`</ph> from members of this interface and all of its bases.","source":"Returns the highest `dispid` from members of this interface and all of its bases."},{"content":"GetMemberfunction","pos":[4701,4718]},{"content":"Returns a function object based on the given name.","pos":[4749,4799]},{"content":"GetProjectFile","pos":[4805,4819]},{"content":"Returns the file name of per-project type of files (.rc, .idl, and so on).","pos":[4847,4921]},{"content":"GetProjectPath","pos":[4927,4941]},{"content":"Returns the project's directory path.","pos":[4969,5006]},{"content":"GetRuntimeErrorDesc","pos":[5012,5031]},{"content":"Returns a description for the type of exception.","pos":[5064,5112]},{"content":"GetUniqueFileName","pos":[5118,5135]},{"content":"Returns a unique file name.","pos":[5166,5193]},{"content":"IncludeCodeElementDeclaration","pos":[5199,5228]},{"pos":[5271,5416],"content":"Adds the include statement to <ph id=\"ph1\">`strInFile`</ph>, including the header where <ph id=\"ph2\">`strCodeElemName`</ph> is implemented, if such a header found is in the project.","source":"Adds the include statement to `strInFile`, including the header where `strCodeElemName` is implemented, if such a header found is in the project."},{"content":"InsertIntoFunction","pos":[5422,5440]},{"pos":[5472,5558],"content":"Helper function called in <ph id=\"ph1\">`AddATLSupportToProject`</ph> to insert code into <ph id=\"ph2\">`InitInstance`</ph>.","source":"Helper function called in `AddATLSupportToProject` to insert code into `InitInstance`."},{"content":"IsATLProject","pos":[5564,5576]},{"content":"Indicates whether project is ATL based.","pos":[5602,5641]},{"content":"IsAttributedProject","pos":[5647,5666]},{"content":"Indicates whether a project is attributed.","pos":[5699,5741]},{"content":"IsMFCProject","pos":[5747,5759]},{"content":"Checks if a project is MFC based.","pos":[5785,5818]},{"content":"LineBeginsWith","pos":[5824,5838]},{"pos":[5866,5967],"content":"Helper function called in <ph id=\"ph1\">`InsertIntoFunction`</ph> to determine if a line begins with a particular string","source":"Helper function called in `InsertIntoFunction` to determine if a line begins with a particular string"},{"content":"OffsetToLineNumber","pos":[5973,5991]},{"content":"Finds the line number for a given position in a function body.","pos":[6023,6085]},{"content":"OnWizFinish","pos":[6091,6102]},{"content":"Called from the wizard HTML script when the user clicks <bpt id=\"p1\">**</bpt>Finish<ept id=\"p1\">**</ept>.","pos":[6127,6194],"source":"Called from the wizard HTML script when the user clicks **Finish**."},{"content":"Calls the wizard control's <bpt id=\"p1\">**</bpt>Finish<ept id=\"p1\">**</ept> method.","pos":[6195,6240],"source":" Calls the wizard control's **Finish** method."},{"content":"RenderAddTemplate","pos":[6246,6263]},{"content":"Renders a template file and optionally adds it to the project.","pos":[6294,6356]},{"content":"SetCommonPchSettings","pos":[6362,6382]},{"content":"Sets up the precompiled header for the project.","pos":[6416,6463]},{"content":"SetErrorInfo","pos":[6469,6481]},{"content":"Provides error information.","pos":[6507,6534]},{"content":"SetFilters","pos":[6540,6550]},{"content":"Adds source, include, and resource filters for project folders.","pos":[6574,6637]},{"content":"SetMergeProxySymbol","pos":[6643,6662]},{"content":"Called by the wizard to add the _MERGE_PROXYSTUB symbol if needed.","pos":[6695,6761]},{"content":"SetNoPchSettings","pos":[6767,6783]},{"content":"Sets up the project configuration properties when no precompiled header is used.","pos":[6813,6893]},{"content":"See Also","pos":[6903,6911]},{"content":"Customizing C++ Wizards with Common JScript Functions","pos":[6916,6969]},{"content":"Creating a Custom Wizard","pos":[7041,7065]},{"content":"Designing a Wizard","pos":[7108,7126]}],"content":"---\ntitle: \"JScript Functions for C++ Wizards | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"wizard JScript methods\"\n  - \"wizard JScript methods, creating C++ wizards\"\nms.assetid: f3046c56-cf67-4aaa-919e-8c066bfb6760\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# JScript Functions for C++ Wizards\n|||  \n|-|-|  \n|[AddATLSupportToProject](../ide/addatlsupporttoproject.md)|Adds ATL support to an MFC project.|  \n|[AddCoclassFromFile](../ide/addcoclassfromfile.md)|Renders and inserts into the project's .idl file a template file that contains a coclass.|  \n|[AddCommonConfig](../ide/addcommonconfig.md)|Adds the default configurations to the project.|  \n|[AddFilesToProject](../ide/addfilestoproject.md)|Adds all the files to the project based on the list in the file Templates.inf.|  \n|[AddInterfaceFromFile](../ide/addinterfacefromfile.md)|Renders and inserts into the project's IDL file a template file that contains an interface.|  \n|[CanAddATLClass](../ide/canaddatlclass.md)|Called by the wizard to verify if the project is compatible with the code wizard that is about to be run (in other words, it can accept an ATL class).<br /><br /> The wizard calls this function when the parameter PREPROCESS_FUNCTION is in the [project control's .vsz file](../ide/dot-vsz-file-project-control.md) and checks if the [Visual C++ Code Model](http://msdn.microsoft.com/en-us/dd6452c2-1054-44a1-b0eb-639a94a1216b) is available. If the code model is not available, the function reports an error and returns **false**.|  \n|[CanAddClass](../ide/canaddclass.md)|The wizard calls this function when the parameter PREPROCESS_FUNCTION is in the project control's .vsz file.<br /><br /> It verifies if the Visual C++ Code Model object is available. If the code model is not available, the function reports an error and returns **false**.|  \n|[CanAddMFCClass](../ide/canaddmfcclass.md)|Called by the wizard to verify if the project is compatible with the Code Wizard that is about to be run (in other words, it can accept an MFC class).<br /><br /> The wizard calls this function when the parameter PREPROCESS_FUNCTION is in the project control's .vsz file and checks if the Visual C++ Code Model object is available. If the code model is not available, the function reports an error and returns **false**.|  \n|[CanAddNonAttributed](../ide/canaddnonattributed.md)|Indicates whether the project supports both attributed and nonattributed ATL objects.|  \n|[CanUseFileName](../ide/canusefilename.md)|Checks if a file exists. If so, the wizard prompts the user to merge the code to be added to the existing file.|  \n|[ConvertProjectToAttributed](../ide/convertprojecttoattributed.md)|Converts an ATL project to attributed.|  \n|[CreateInfFile](../ide/createinffile.md)|Creates the Templates.inf file.|  \n|[CreateProject](../ide/createproject.md)|Creates a C++ project.|  \n|[CreateSafeName](../ide/createsafename.md)|Generates a C++ friendly name.|  \n|[DeleteFile](../ide/deletefile.md)|Deletes the specified file.|  \n|[DoesIncludeExist](../ide/doesincludeexist.md)|Indicates whether a `#include` statement exists in a file.|  \n|[GetCodeForDllCanUnloadNow](../ide/getcodefordllcanunloadnow.md)|Retrieves code needed to unload the DLL.|  \n|[GetCodeForDllGetClassObject](../ide/getcodefordllgetclassobject.md)|Retrieves the code for the DLL class object.|  \n|[GetCodeForDllRegisterServer](../ide/getcodefordllregisterserver.md)|Retrieves the code to register a server.|  \n|[GetCodeForDllUnregisterServer](../ide/getcodefordllunregisterserver.md)|Retrieves the code to unregister a server.|  \n|[GetCodeForExitInstance](../ide/getcodeforexitinstance.md)|Helper function to get the text for `ExitInstance`.|  \n|[GetCodeForInitInstance](../ide/getcodeforinitinstance.md)|Helper function to get the text for [InitInstance](../mfc/reference/cwinapp-class.md#initinstance).|  \n|[GetExportPragmas](../ide/getexportpragmas.md)|Retrieves the pragmas for exporting functions.|  \n|[GetInterfaceClasses](../ide/getinterfaceclasses.md)|Returns the `VCCodeClass` object associated with an interface.|  \n|[GetInterfaceType](../ide/getinterfacetype.md)|Returns the type of interface (for example, custom, dual, dispinterface, oleautomation).|  \n|[GetMaxID](../ide/getmaxid.md)|Returns the highest `dispid` from members of this interface and all of its bases.|  \n|[GetMemberfunction](../ide/getmemberfunction.md)|Returns a function object based on the given name.|  \n|[GetProjectFile](../ide/getprojectfile.md)|Returns the file name of per-project type of files (.rc, .idl, and so on).|  \n|[GetProjectPath](../ide/getprojectpath.md)|Returns the project's directory path.|  \n|[GetRuntimeErrorDesc](../ide/getruntimeerrordesc.md)|Returns a description for the type of exception.|  \n|[GetUniqueFileName](../ide/getuniquefilename.md)|Returns a unique file name.|  \n|[IncludeCodeElementDeclaration](../ide/includecodeelementdeclaration.md)|Adds the include statement to `strInFile`, including the header where `strCodeElemName` is implemented, if such a header found is in the project.|  \n|[InsertIntoFunction](../ide/insertintofunction.md)|Helper function called in `AddATLSupportToProject` to insert code into `InitInstance`.|  \n|[IsATLProject](../ide/isatlproject.md)|Indicates whether project is ATL based.|  \n|[IsAttributedProject](../ide/isattributedproject.md)|Indicates whether a project is attributed.|  \n|[IsMFCProject](../ide/ismfcproject.md)|Checks if a project is MFC based.|  \n|[LineBeginsWith](../ide/linebeginswith.md)|Helper function called in `InsertIntoFunction` to determine if a line begins with a particular string|  \n|[OffsetToLineNumber](../ide/offsettolinenumber.md)|Finds the line number for a given position in a function body.|  \n|[OnWizFinish](../ide/onwizfinish.md)|Called from the wizard HTML script when the user clicks **Finish**. Calls the wizard control's **Finish** method.|  \n|[RenderAddTemplate](../ide/renderaddtemplate.md)|Renders a template file and optionally adds it to the project.|  \n|[SetCommonPchSettings](../ide/setcommonpchsettings.md)|Sets up the precompiled header for the project.|  \n|[SetErrorInfo](../ide/seterrorinfo.md)|Provides error information.|  \n|[SetFilters](../ide/setfilters.md)|Adds source, include, and resource filters for project folders.|  \n|[SetMergeProxySymbol](../ide/setmergeproxysymbol.md)|Called by the wizard to add the _MERGE_PROXYSTUB symbol if needed.|  \n|[SetNoPchSettings](../ide/setnopchsettings.md)|Sets up the project configuration properties when no precompiled header is used.|  \n  \n## See Also  \n [Customizing C++ Wizards with Common JScript Functions](../ide/customizing-cpp-wizards-with-common-jscript-functions.md)   \n [Creating a Custom Wizard](../ide/creating-a-custom-wizard.md)   \n [Designing a Wizard](../ide/designing-a-wizard.md)"}