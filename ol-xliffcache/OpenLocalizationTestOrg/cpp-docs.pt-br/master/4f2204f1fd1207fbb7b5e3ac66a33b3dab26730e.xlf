<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f2204f1fd1207fbb7b5e3ac66a33b3dab26730e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\oledb\consumer-wizard-generated-methods.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe6f9f71d988f2d2ee33e87ac5d78aa8a340a9a2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">632501a7e0425dc9303ff0a7e55f3a84d1b42f18</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Consumer Wizard-Generated Methods | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Consumer Wizard-Generated Methods</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The ATL OLE DB Consumer Wizard and the MFC Application Wizard generate certain functions of which you should be aware.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Note that some methods are implemented differently in attributed projects, so there are a few caveats; each case is covered below.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about viewing injected code, see <bpt id="p1">[</bpt>Debugging Injected Code<ept id="p1">](http://msdn.microsoft.com/library/a1b4104d-d49e-451f-a91e-e39ceaf35875)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>opens the data source, rowsets, and turns on bookmarks if they are available.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>closes all open rowsets and releases all command executions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>is called by OpenAll to open the consumer's rowset or rowsets.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>retrieves a pointer to the rowset's property set with which properties can be set.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>opens the data source using the initialization string you specified in the <bpt id="p1">**</bpt>Data Link Properties<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>closes the data source in an appropriate manner.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>OpenAll and CloseAll</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example shows how you can call <ph id="ph1">`OpenAll`</ph> and <ph id="ph2">`CloseAll`</ph> when you execute the same command repeatedly.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Compare the code example in <bpt id="p1">[</bpt>CCommand::Close<ept id="p1">](../../data/oledb/ccommand-close.md)</ept>, which shows a variation that calls <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> and <ph id="ph1">`ReleaseCommand`</ph> instead of <ph id="ph2">`CloseAll`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Note that if you define a <ph id="ph1">`HasBookmark`</ph> method, the <ph id="ph2">`OpenAll`</ph> code sets the DBPROP_IRowsetLocate property; make sure you only do this if your provider supports that property.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>OpenRowset</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OpenAll<ept id="p1">**</ept> calls this method to open the rowset or rowsets in the consumer.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Typically, you do not need to call <ph id="ph1">`OpenRowset`</ph> unless you want to work with multiple data sources/sessions/rowsets.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>is declared in the command or table class header file:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The attributes implement this method differently.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This version takes a session object and a command string that defaults to the command string specified in db_command, although you can pass a different one.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that if you define a <ph id="ph1">`HasBookmark`</ph> method, the <ph id="ph2">`OpenRowset`</ph> code sets the DBPROP_IRowsetLocate property; make sure you only do this if your provider supports that property.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>GetRowsetProperties</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This method retrieves a pointer to the rowset's property set; you can use this pointer to set properties such as DBPROP_IRowsetChange.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>is used in the user record class as follows.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can modify this code to set additional rowset properties:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You should not define a global <ph id="ph1">`GetRowsetProperties`</ph> method because it could conflict with the one defined by the wizard.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Note that this is a wizard-generated method that you get with templated and attributed projects; the attributes do not inject this code.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>OpenDataSource and CloseDataSource</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The wizard defines the methods <ph id="ph1">`OpenDataSource`</ph> and <ph id="ph2">`CloseDataSource`</ph>; <ph id="ph3">`OpenDataSource`</ph> calls <bpt id="p1">[</bpt>CDataSource::OpenFromInitializationString<ept id="p1">](../../data/oledb/cdatasource-openfrominitializationstring.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Creating an OLE DB Consumer Using a Wizard</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>