{"nodes":[{"pos":[12,81],"content":"_sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l | Microsoft Docs","pos":[0,69]}]},{"content":"_sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l","pos":[1458,1510]},{"content":"Write formatted data to a string with the ability to specify the order that the parameters are used in the format string.","pos":[1511,1632]},{"content":"Syntax","pos":[1641,1647]},{"content":"Parameters","pos":[2191,2201]},{"content":"Storage location for output","pos":[2217,2244]},{"content":"Maximum number of characters to store.","pos":[2269,2307]},{"content":"Format-control string","pos":[2326,2347]},{"content":"Optional arguments","pos":[2368,2386]},{"content":"The locale to use.","pos":[2405,2423]},{"pos":[2430,2565],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"content":"Return Value","pos":[2574,2586]},{"content":"The number of characters written, or â€“1 if an error occurred.","pos":[2590,2651]},{"content":"Remarks","pos":[2660,2667]},{"content":"The <ph id=\"ph1\">`_sprintf_p`</ph> function formats and stores a series of characters and values in <ph id=\"ph2\">`buffer`</ph>.","pos":[2671,2762],"source":"The `_sprintf_p` function formats and stores a series of characters and values in `buffer`."},{"content":"Each <ph id=\"ph1\">`argument`</ph> (if any) is converted and output according to the corresponding format specification in <ph id=\"ph2\">`format`</ph>.","pos":[2763,2876],"source":" Each `argument` (if any) is converted and output according to the corresponding format specification in `format`."},{"content":"The format consists of ordinary characters and has the same form and function as the <ph id=\"ph1\">`format`</ph> argument for <ph id=\"ph2\">`printf_p`</ph>.","pos":[2877,2995],"source":" The format consists of ordinary characters and has the same form and function as the `format` argument for `printf_p`."},{"content":"A <ph id=\"ph1\">`NULL`</ph> character is appended after the last character written.","pos":[2996,3060],"source":" A `NULL` character is appended after the last character written."},{"content":"If copying occurs between strings that overlap, the behavior is undefined.","pos":[3061,3135]},{"content":"The difference between <ph id=\"ph1\">`_sprintf_p`</ph> and <ph id=\"ph2\">`sprintf_s`</ph> is that <ph id=\"ph3\">`_sprintf_p`</ph> supports positional parameters, which allows specifying the order in which the arguments are used in the format string.","pos":[3136,3328],"source":" The difference between `_sprintf_p` and `sprintf_s` is that `_sprintf_p` supports positional parameters, which allows specifying the order in which the arguments are used in the format string."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>printf_p Positional Parameters<ept id=\"p1\">](../../c-runtime-library/printf-p-positional-parameters.md)</ept>.","pos":[3329,3447],"source":" For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)."},{"content":"is a wide-character version of <ph id=\"ph1\">`_sprintf_p`</ph>; the pointer arguments to <ph id=\"ph2\">`_swprintf_p`</ph> are wide-character strings.","pos":[3468,3579],"source":" is a wide-character version of `_sprintf_p`; the pointer arguments to `_swprintf_p` are wide-character strings."},{"content":"Detection of encoding errors in <ph id=\"ph1\">`_swprintf_p`</ph> may differ from that in <ph id=\"ph2\">`_sprintf_p`</ph>.","pos":[3580,3663],"source":" Detection of encoding errors in `_swprintf_p` may differ from that in `_sprintf_p`."},{"content":"and <ph id=\"ph1\">`fwprintf_p`</ph> behave identically except that <ph id=\"ph2\">`_swprintf_p`</ph> writes output to a string rather than to a destination of type <ph id=\"ph3\">`FILE`</ph>, and <ph id=\"ph4\">`_swprintf_p`</ph> requires the <ph id=\"ph5\">`count`</ph>parameter to specify the maximum number of characters to be written.","pos":[3678,3917],"source":" and `fwprintf_p` behave identically except that `_swprintf_p` writes output to a string rather than to a destination of type `FILE`, and `_swprintf_p` requires the `count`parameter to specify the maximum number of characters to be written."},{"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","pos":[3918,4074],"source":" The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"content":"returns the number of bytes stored in <ph id=\"ph1\">`buffer`</ph>, not counting the terminating <ph id=\"ph2\">`NULL`</ph> character.","pos":[4094,4188],"source":" returns the number of bytes stored in `buffer`, not counting the terminating `NULL` character."},{"content":"returns the number of wide characters stored in <ph id=\"ph1\">`buffer`</ph>, not counting the terminating <ph id=\"ph2\">`NULL`</ph> wide character.","pos":[4202,4311],"source":"returns the number of wide characters stored in `buffer`, not counting the terminating `NULL` wide character."},{"content":"If <ph id=\"ph1\">`buffer`</ph> or <ph id=\"ph2\">`format`</ph> is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[4312,4549],"source":" If `buffer` or `format` is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[4550,4641],"source":" If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`."},{"content":"Generic-Text Routine Mappings","pos":[4651,4680]},{"content":"TCHAR.H routine","pos":[4687,4702]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[4703,4731],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[4732,4745]},{"content":"_UNICODE defined","pos":[4746,4762]},{"content":"Requirements","pos":[5004,5016]},{"content":"Routine","pos":[5023,5030]},{"content":"Required header","pos":[5031,5046]},{"pos":[5103,5104],"content":","},{"content":"stdio.h&gt;","pos":[5122,5130],"source":"stdio.h>"},{"pos":[5148,5149],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[5168,5190],"source":"stdio.h> or \\<wchar.h>"},{"pos":[5198,5322],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[5331,5338]},{"content":"Example","pos":[6332,6339]},{"content":".NET Framework Equivalent","pos":[7076,7101]},{"content":"System::String::Format","pos":[7106,7128]},{"content":"See Also","pos":[7206,7214]},{"content":"Stream I/O","pos":[7219,7229]},{"content":"_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l","pos":[7275,7327]},{"content":"fprintf, _fprintf_l, fwprintf, _fwprintf_l","pos":[7418,7460]},{"content":"_printf_p, _printf_p_l, _wprintf_p, _wprintf_p_l","pos":[7543,7591]},{"content":"printf, _printf_l, wprintf, _wprintf_l","pos":[7678,7716]},{"content":"scanf, _scanf_l, wscanf, _wscanf_l","pos":[7795,7829]},{"content":"sscanf, _sscanf_l, swscanf, _swscanf_l","pos":[7904,7942]},{"content":"sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l","pos":[8021,8067]},{"content":"vprintf Functions","pos":[8154,8171]},{"content":"printf_p Positional Parameters","pos":[8224,8254]}],"content":"---\ntitle: \"_sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_sprintf_p\"\n  - \"_swprintf_p_l\"\n  - \"_swprintf_p\"\n  - \"_sprintf_p_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_sprintf_p\"\n  - \"_swprintf_p_l\"\n  - \"_sprintf_p_l\"\n  - \"_swprintf_p\"\n  - \"sprintf_p\"\n  - \"swprint_p_l\"\n  - \"swprintf_p\"\n  - \"swprintf_p_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"sprintf_p_l function\"\n  - \"swprintf_p function\"\n  - \"swprintf_p_l function\"\n  - \"_sprintf_p function\"\n  - \"_sprintf_p_l function\"\n  - \"_swprintf_p function\"\n  - \"sprintf_p function\"\n  - \"_stprintf_p function\"\n  - \"stprintf_p function\"\n  - \"_swprintf_p_l function\"\n  - \"stprintf_p_l function\"\n  - \"formatted text [C++]\"\n  - \"_stprintf_p_l function\"\nms.assetid: a2ae78e8-6b0c-48d5-87a9-ea2365b0693d\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l\nWrite formatted data to a string with the ability to specify the order that the parameters are used in the format string.  \n  \n## Syntax  \n  \n```  \nint _sprintf_p(  \n   char *buffer,  \n   size_t sizeOfBuffer,  \n   const char *format [,  \n   argument] ...   \n);  \nint _sprintf_p_l(  \n   char *buffer,  \n   size_t sizeOfBuffer,  \n   const char *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \nint _swprintf_p(  \n   wchar_t *buffer,  \n   size_t sizeOfBuffer,  \n   const wchar_t *format [,  \n   argument]...  \n);  \nint _swprintf_p_l(  \n   wchar_t *buffer,  \n   size_t sizeOfBuffer,  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument] â€¦   \n);  \n```  \n  \n#### Parameters  \n `buffer`  \n Storage location for output  \n  \n `sizeOfBuffer`  \n Maximum number of characters to store.  \n  \n `format`  \n Format-control string  \n  \n `argument`  \n Optional arguments  \n  \n `locale`  \n The locale to use.  \n  \n For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n## Return Value  \n The number of characters written, or â€“1 if an error occurred.  \n  \n## Remarks  \n The `_sprintf_p` function formats and stores a series of characters and values in `buffer`. Each `argument` (if any) is converted and output according to the corresponding format specification in `format`. The format consists of ordinary characters and has the same form and function as the `format` argument for `printf_p`. A `NULL` character is appended after the last character written. If copying occurs between strings that overlap, the behavior is undefined. The difference between `_sprintf_p` and `sprintf_s` is that `_sprintf_p` supports positional parameters, which allows specifying the order in which the arguments are used in the format string. For more information, see [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md).  \n  \n `_swprintf_p` is a wide-character version of `_sprintf_p`; the pointer arguments to `_swprintf_p` are wide-character strings. Detection of encoding errors in `_swprintf_p` may differ from that in `_sprintf_p`. `_swprintf_p` and `fwprintf_p` behave identically except that `_swprintf_p` writes output to a string rather than to a destination of type `FILE`, and `_swprintf_p` requires the `count`parameter to specify the maximum number of characters to be written. The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n `_sprintf_p` returns the number of bytes stored in `buffer`, not counting the terminating `NULL` character. `_swprintf_p`returns the number of wide characters stored in `buffer`, not counting the terminating `NULL` wide character. If `buffer` or `format` is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`.  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_stprintf_p`|`_sprintf_p`|`_sprintf_p`|`_swprintf_p`|  \n|`_stprintf_p_l`|`_sprintf_p_l`|`_sprintf_p_l`|`_swprintf_p_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_sprintf_p`, `_sprintf_p_l`|\\<stdio.h>|  \n|`_swprintf_p`, `_swprintf_p_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_sprintf_p.c  \n// This program uses _sprintf_p to format various  \n// data and place them in the string named buffer.  \n//  \n  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n    char     buffer[200],  \n            s[] = \"computer\", c = 'l';  \n    int      i = 35,  \n            j;  \n    float    fp = 1.7320534f;  \n  \n    // Format and print various data:   \n    j  = _sprintf_p( buffer, 200,  \n                     \"   String:    %s\\n\", s );  \n    j += _sprintf_p( buffer + j, 200 - j,   \n                     \"   Character: %c\\n\", c );  \n    j += _sprintf_p( buffer + j, 200 - j,   \n                     \"   Integer:   %d\\n\", i );  \n    j += _sprintf_p( buffer + j, 200 - j,   \n                     \"   Real:      %f\\n\", fp );  \n  \n    printf( \"Output:\\n%s\\ncharacter count = %d\\n\",   \n            buffer, j );  \n}  \n```  \n  \n```Output  \nOutput:  \n   String:    computer  \n   Character: l  \n   Integer:   35  \n   Real:      1.732053  \n  \ncharacter count = 79  \n```  \n  \n## Example  \n  \n```  \n// crt_swprintf_p.c  \n// This is the wide character example which  \n// also demonstrates _swprintf_p returning  \n// error code.  \n#include <stdio.h>  \n  \n#define BUFFER_SIZE 100  \n  \nint main( void )  \n{  \n    wchar_t buffer[BUFFER_SIZE];  \n    int     len;  \n  \n    len = _swprintf_p(buffer, BUFFER_SIZE, L\"%2$s %1$d\",  \n                      0, L\" marbles in your head.\");  \n    _printf_p( \"Wrote %d characters\\n\", len );  \n  \n    // _swprintf_p fails because string contains WEOF (\\xffff)  \n    len = _swprintf_p(buffer, BUFFER_SIZE, L\"%s\",   \n                      L\"Hello\\xffff world\" );  \n    _printf_p( \"Wrote %d characters\\n\", len );  \n}  \n```  \n  \n```Output  \nWrote 24 characters  \nWrote -1 characters  \n```  \n  \n## .NET Framework Equivalent  \n [System::String::Format](https://msdn.microsoft.com/en-us/library/system.string.format.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l](../../c-runtime-library/reference/fprintf-p-fprintf-p-l-fwprintf-p-fwprintf-p-l.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [_printf_p, _printf_p_l, _wprintf_p, _wprintf_p_l](../../c-runtime-library/reference/printf-p-printf-p-l-wprintf-p-wprintf-p-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)   \n [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)   \n [sscanf_s, _sscanf_s_l, swscanf_s, _swscanf_s_l](../../c-runtime-library/reference/sscanf-s-sscanf-s-l-swscanf-s-swscanf-s-l.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)   \n [printf_p Positional Parameters](../../c-runtime-library/printf-p-positional-parameters.md)"}