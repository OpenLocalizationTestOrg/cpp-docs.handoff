{"nodes":[{"pos":[12,103],"content":"strncat_s, _strncat_s_l, wcsncat_s, _wcsncat_s_l, _mbsncat_s, _mbsncat_s_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"strncat_s, _strncat_s_l, wcsncat_s, _wcsncat_s_l, _mbsncat_s, _mbsncat_s_l | Microsoft Docs","pos":[0,91]}]},{"content":"strncat_s, _strncat_s_l, wcsncat_s, _wcsncat_s_l, _mbsncat_s, _mbsncat_s_l","pos":[1590,1664]},{"content":"Appends characters to a string.","pos":[1665,1696]},{"content":"These versions of <bpt id=\"p1\">[</bpt>strncat, _strncat_l, wcsncat, _wcsncat_l, _mbsncat, _mbsncat_l<ept id=\"p1\">](../../c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l.md)</ept> have security enhancements, as described in <bpt id=\"p2\">[</bpt>Security Features in the CRT<ept id=\"p2\">](../../c-runtime-library/security-features-in-the-crt.md)</ept>.","pos":[1697,2004],"source":" These versions of [strncat, _strncat_l, wcsncat, _wcsncat_l, _mbsncat, _mbsncat_l](../../c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md)."},{"pos":[2012,2255],"content":"[!IMPORTANT]\n `_mbsncat_s` and `_mbsncat_s_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" and `_mbsncat_s_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[26,241],"nodes":[{"content":"and <ph id=\"ph1\">`_mbsncat_s_l`</ph> cannot be used in applications that execute in the Windows Runtime.","pos":[1,87],"source":" and `_mbsncat_s_l` cannot be used in applications that execute in the Windows Runtime."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[88,215],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"content":"Syntax","pos":[2264,2270]},{"content":"Parameters","pos":[4106,4116]},{"content":"[out]","pos":[4120,4125]},{"content":"Null-terminated destination string.","pos":[4139,4174]},{"content":"[in]","pos":[4181,4185]},{"content":"Size of the destination buffer.","pos":[4207,4238]},{"content":"[in]","pos":[4245,4249]},{"content":"Null-terminated source string.","pos":[4264,4294]},{"content":"[in]","pos":[4301,4305]},{"content":"Number of characters to append, or <bpt id=\"p1\">[</bpt>_TRUNCATE<ept id=\"p1\">](../../c-runtime-library/truncate.md)</ept>.","pos":[4316,4400],"source":" Number of characters to append, or [_TRUNCATE](../../c-runtime-library/truncate.md)."},{"content":"[in]","pos":[4407,4411]},{"content":"Locale to use.","pos":[4424,4438]},{"content":"Return Value","pos":[4447,4459]},{"content":"Returns 0 if successful, an error code on failure.","pos":[4463,4513]},{"content":"Error Conditions","pos":[4523,4539]},{"content":"Return value","pos":[4594,4606]},{"pos":[4607,4618],"content":"Contents of"},{"pos":[4771,4786],"content":"or unterminated"},{"content":"any","pos":[4787,4790]},{"content":"any","pos":[4791,4794]},{"content":"not modified","pos":[4804,4816]},{"content":"any","pos":[4821,4824]},{"content":"any","pos":[4825,4828]},{"content":"not modified","pos":[4845,4857]},{"content":"any","pos":[4862,4865]},{"content":"0, or too small","pos":[4866,4881]},{"content":"any","pos":[4882,4885]},{"content":"not modified","pos":[4895,4907]},{"content":"Remarks","pos":[4917,4924]},{"content":"These functions try to append the first <ph id=\"ph1\">`D`</ph> characters of <ph id=\"ph2\">`strSource`</ph> to the end of <ph id=\"ph3\">`strDest`</ph>, where <ph id=\"ph4\">`D`</ph> is the lesser of <ph id=\"ph5\">`count`</ph> and the length of <ph id=\"ph6\">`strSource`</ph>.","pos":[4928,5088],"source":"These functions try to append the first `D` characters of `strSource` to the end of `strDest`, where `D` is the lesser of `count` and the length of `strSource`."},{"content":"If appending those <ph id=\"ph1\">`D`</ph> characters will fit within <ph id=\"ph2\">`strDest`</ph> (whose size is given as <ph id=\"ph3\">`numberOfElements`</ph>) and still leave room for a null terminator, then those characters are appended, starting at the original terminating null of <ph id=\"ph4\">`strDest`</ph>, and a new terminating null is appended; otherwise, <ph id=\"ph5\">`strDest`</ph>[0] is set to the null character and the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[5089,5556],"source":" If appending those `D` characters will fit within `strDest` (whose size is given as `numberOfElements`) and still leave room for a null terminator, then those characters are appended, starting at the original terminating null of `strDest`, and a new terminating null is appended; otherwise, `strDest`[0] is set to the null character and the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"There is an exception to the above paragraph.","pos":[5563,5608]},{"content":"If <ph id=\"ph1\">`count`</ph> is <bpt id=\"p1\">[</bpt>_TRUNCATE<ept id=\"p1\">](../../c-runtime-library/truncate.md)</ept> then as much of <ph id=\"ph2\">`strSource`</ph> as will fit is appended to <ph id=\"ph3\">`strDest`</ph> while still leaving room to append a terminating null.","pos":[5609,5791],"source":" If `count` is [_TRUNCATE](../../c-runtime-library/truncate.md) then as much of `strSource` as will fit is appended to `strDest` while still leaving room to append a terminating null."},{"content":"For example,","pos":[5798,5810]},{"pos":[5937,6184],"content":"means that we are asking <ph id=\"ph1\">`strncat_s`</ph> to append three characters to two characters in a buffer five characters long; this would leave no space for the null terminator, hence <ph id=\"ph2\">`strncat_s`</ph> zeroes out the string and calls the invalid parameter handler.","source":"means that we are asking `strncat_s` to append three characters to two characters in a buffer five characters long; this would leave no space for the null terminator, hence `strncat_s` zeroes out the string and calls the invalid parameter handler."},{"pos":[6191,6284],"content":"If truncation behavior is needed, use <ph id=\"ph1\">`_TRUNCATE`</ph> or adjust the <ph id=\"ph2\">`size`</ph> parameter accordingly:","source":"If truncation behavior is needed, use `_TRUNCATE` or adjust the `size` parameter accordingly:"},{"content":"or","pos":[6350,6352]},{"content":"In all cases, the resulting string is terminated with a null character.","pos":[6436,6507]},{"content":"If copying takes place between strings that overlap, the behavior is undefined.","pos":[6508,6587]},{"content":"If <ph id=\"ph1\">`strSource`</ph> or <ph id=\"ph2\">`strDest`</ph> is <ph id=\"ph3\">`NULL`</ph>, or is <ph id=\"ph4\">`numberOfElements`</ph> is zero, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept> .","pos":[6594,6798],"source":"If `strSource` or `strDest` is `NULL`, or is `numberOfElements` is zero, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) ."},{"content":"If execution is allowed to continue, the function returns <ph id=\"ph1\">`EINVAL`</ph> without modifying its parameters.","pos":[6799,6899],"source":" If execution is allowed to continue, the function returns `EINVAL` without modifying its parameters."},{"content":"and <ph id=\"ph1\">`_mbsncat_s`</ph> are wide-character and multibyte-character versions of <ph id=\"ph2\">`strncat_s`</ph>.","pos":[6918,7002],"source":" and `_mbsncat_s` are wide-character and multibyte-character versions of `strncat_s`."},{"content":"The string arguments and return value of <ph id=\"ph1\">`wcsncat_s`</ph> are wide-character strings; those of <ph id=\"ph2\">`_mbsncat_s`</ph> are multibyte-character strings.","pos":[7003,7138],"source":" The string arguments and return value of `wcsncat_s` are wide-character strings; those of `_mbsncat_s` are multibyte-character strings."},{"content":"These three functions behave identically otherwise.","pos":[7139,7190]},{"content":"The output value is affected by the setting of the <ph id=\"ph1\">`LC_CTYPE`</ph> category setting of the locale; see <bpt id=\"p1\">[</bpt>setlocale<ept id=\"p1\">](../../c-runtime-library/reference/setlocale-wsetlocale.md)</ept> for more information.","pos":[7197,7387],"source":"The output value is affected by the setting of the `LC_CTYPE` category setting of the locale; see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md) for more information."},{"content":"The versions of these functions without the <ph id=\"ph1\">`_l`</ph> suffix use the current locale for this locale-dependent behavior; the versions with the <ph id=\"ph2\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead.","pos":[7388,7611],"source":" The versions of these functions without the `_l` suffix use the current locale for this locale-dependent behavior; the versions with the `_l` suffix are identical except that they use the locale parameter passed in instead."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[7612,7682],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"content":"In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts.","pos":[7689,7959]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[7960,8068],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"The debug versions of these functions first fill the buffer with 0xFD.","pos":[8075,8145]},{"content":"To disable this behavior, use <bpt id=\"p1\">[</bpt>_CrtSetDebugFillThreshold<ept id=\"p1\">](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)</ept>.","pos":[8146,8267],"source":" To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md)."},{"content":"Generic-Text Routine Mappings","pos":[8277,8306]},{"content":"TCHAR.H routine","pos":[8313,8328]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[8329,8357],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[8358,8371]},{"content":"_UNICODE defined","pos":[8372,8388]},{"pos":[8639,8727],"content":"and <ph id=\"ph1\">`_wcsncat_s_l`</ph> have no locale dependence; they are only provided for <ph id=\"ph2\">`_tcsncat_s_l`</ph>.","source":" and `_wcsncat_s_l` have no locale dependence; they are only provided for `_tcsncat_s_l`."},{"content":"Requirements","pos":[8736,8748]},{"content":"Routine","pos":[8755,8762]},{"content":"Required header","pos":[8763,8778]},{"content":"string.h&gt;","pos":[8837,8846],"source":"string.h>"},{"content":"string.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[8865,8888],"source":"string.h> or \\<wchar.h>"},{"pos":[8905,8906],"content":","},{"content":"mbstring.h&gt;","pos":[8924,8935],"source":"mbstring.h>"},{"pos":[8943,9047],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[9056,9063]},{"content":".NET Framework Equivalent","pos":[13328,13353]},{"content":"System::String::Concat","pos":[13358,13380]},{"content":"See Also","pos":[13458,13466]},{"content":"String Manipulation","pos":[13471,13490]},{"content":"Locale","pos":[13549,13555]},{"content":"Interpretation of Multibyte-Character Sequences","pos":[13597,13644]},{"content":"_mbsnbcat, _mbsnbcat_l","pos":[13727,13749]},{"content":"strcat, wcscat, _mbscat","pos":[13814,13837]},{"content":"strcmp, wcscmp, _mbscmp","pos":[13903,13926]},{"content":"strcpy, wcscpy, _mbscpy","pos":[13992,14015]},{"content":"strncmp, wcsncmp, _mbsncmp, _mbsncmp_l","pos":[14081,14119]},{"content":"strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l","pos":[14198,14260]},{"content":"_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l","pos":[14359,14429]},{"content":"strrchr, wcsrchr, _mbsrchr, _mbsrchr_l","pos":[14534,14572]},{"content":"_strset, _strset_l, _wcsset, _wcsset_l, _mbsset, _mbsset_l","pos":[14651,14709]},{"content":"strspn, wcsspn, _mbsspn, _mbsspn_l","pos":[14802,14836]}],"content":"---\ntitle: \"strncat_s, _strncat_s_l, wcsncat_s, _wcsncat_s_l, _mbsncat_s, _mbsncat_s_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wcsncat_s_l\"\n  - \"wcsncat_s\"\n  - \"_mbsncat_s_l\"\n  - \"_mbsncat_s\"\n  - \"strncat_s\"\n  - \"_strncat_s_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-multibyte-l1-1-0.dll\"\n  - \"api-ms-win-crt-string-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"strncat_s_l\"\n  - \"_mbsncat_s_l\"\n  - \"_tcsncat_s\"\n  - \"wcsncat_s\"\n  - \"wcsncat_s_l\"\n  - \"strncat_s\"\n  - \"_mbsncat_s\"\n  - \"_tcsncat_s_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"concatenating strings\"\n  - \"_mbsncat_s function\"\n  - \"mbsncat_s_l function\"\n  - \"_tcsncat_s function\"\n  - \"_mbsncat_s_l function\"\n  - \"strncat_s function\"\n  - \"strings [C++], appending\"\n  - \"strncat_s_l function\"\n  - \"string concatenation [C++]\"\n  - \"_tcsncat_s_l function\"\n  - \"wcsncat_s function\"\n  - \"appending strings\"\n  - \"wcsncat_s_l function\"\n  - \"mbsncat_s function\"\nms.assetid: de77eca2-4d9c-4e66-abf2-a95fefc21e5a\ncaps.latest.revision: 42\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# strncat_s, _strncat_s_l, wcsncat_s, _wcsncat_s_l, _mbsncat_s, _mbsncat_s_l\nAppends characters to a string. These versions of [strncat, _strncat_l, wcsncat, _wcsncat_l, _mbsncat, _mbsncat_l](../../c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l.md) have security enhancements, as described in [Security Features in the CRT](../../c-runtime-library/security-features-in-the-crt.md).  \n  \n> [!IMPORTANT]\n>  `_mbsncat_s` and `_mbsncat_s_l` cannot be used in applications that execute in the Windows Runtime. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nerrno_t strncat_s(  \n   char *strDest,  \n   size_t numberOfElements,  \n   const char *strSource,  \n   size_t count  \n);  \nerrno_t _strncat_s_l(  \n   char *strDest,  \n   size_t numberOfElements,  \n   const char *strSource,  \n   size_t count,  \n   _locale_t locale  \n);  \nerrno_t wcsncat_s(  \n   wchar_t *strDest,  \n   size_t numberOfElements,  \n   const wchar_t *strSource,  \n   size_t count   \n);  \nerrno_t _wcsncat_s_l(  \n   wchar_t *strDest,  \n   size_t numberOfElements,  \n   const wchar_t *strSource,  \n   size_t count,  \n   _locale_t locale  \n);  \nerrno_t _mbsncat_s(  \n   unsigned char *strDest,  \n   size_t numberOfElements,  \n   const unsigned char *strSource,  \n   size_t count  \n);  \nerrno_t _mbsncat_s_l(  \n   unsigned char *strDest,  \n   size_t numberOfElements,  \n   const unsigned char *strSource,  \n   size_t count,  \n   _locale_t locale  \n);  \ntemplate <size_t size>  \nerrno_t strncat_s(  \n   char (&strDest)[size],  \n   const char *strSource,  \n   size_t count  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _strncat_s_l(  \n   char (&strDest)[size],  \n   const char *strSource,  \n   size_t count,  \n   _locale_t locale  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t wcsncat_s(  \n   wchar_t (&strDest)[size],  \n   const wchar_t *strSource,  \n   size_t count   \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _wcsncat_s_l(  \n   wchar_t (&strDest)[size],  \n   const wchar_t *strSource,  \n   size_t count,  \n   _locale_t locale  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _mbsncat_s(  \n   unsigned char (&strDest)[size],  \n   const unsigned char *strSource,  \n   size_t count  \n); // C++ only  \ntemplate <size_t size>  \nerrno_t _mbsncat_s_l(  \n   unsigned char (&strDest)[size],  \n   const unsigned char *strSource,  \n   size_t count,  \n   _locale_t locale  \n); // C++ only  \n```  \n  \n#### Parameters  \n [out] `strDest`  \n Null-terminated destination string.  \n  \n [in]`numberOfElements`  \n Size of the destination buffer.  \n  \n [in]`strSource`  \n Null-terminated source string.  \n  \n [in]`count`  \n Number of characters to append, or [_TRUNCATE](../../c-runtime-library/truncate.md).  \n  \n [in] `locale`  \n Locale to use.  \n  \n## Return Value  \n Returns 0 if successful, an error code on failure.  \n  \n### Error Conditions  \n  \n|`strDestination`|`numberOfElements`|`strSource`|Return value|Contents of `strDestination`|  \n|----------------------|------------------------|-----------------|------------------|----------------------------------|  \n|`NULL` or unterminated|any|any|`EINVAL`|not modified|  \n|any|any|`NULL`|`EINVAL`|not modified|  \n|any|0, or too small|any|`ERANGE`|not modified|  \n  \n## Remarks  \n These functions try to append the first `D` characters of `strSource` to the end of `strDest`, where `D` is the lesser of `count` and the length of `strSource`. If appending those `D` characters will fit within `strDest` (whose size is given as `numberOfElements`) and still leave room for a null terminator, then those characters are appended, starting at the original terminating null of `strDest`, and a new terminating null is appended; otherwise, `strDest`[0] is set to the null character and the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md).  \n  \n There is an exception to the above paragraph. If `count` is [_TRUNCATE](../../c-runtime-library/truncate.md) then as much of `strSource` as will fit is appended to `strDest` while still leaving room to append a terminating null.  \n  \n For example,  \n  \n `char dst[5];`  \n  \n `strncpy_s(dst, _countof(dst), \"12\", 2);`  \n  \n `strncat_s(dst, _countof(dst), \"34567\", 3);`  \n  \n means that we are asking `strncat_s` to append three characters to two characters in a buffer five characters long; this would leave no space for the null terminator, hence `strncat_s` zeroes out the string and calls the invalid parameter handler.  \n  \n If truncation behavior is needed, use `_TRUNCATE` or adjust the `size` parameter accordingly:  \n  \n `strncat_s(dst, _countof(dst), \"34567\", _TRUNCATE);`  \n  \n or  \n  \n `strncat_s(dst, _countof(dst), \"34567\", _countof(dst)-strlen(dst)-1);`  \n  \n In all cases, the resulting string is terminated with a null character. If copying takes place between strings that overlap, the behavior is undefined.  \n  \n If `strSource` or `strDest` is `NULL`, or is `numberOfElements` is zero, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) . If execution is allowed to continue, the function returns `EINVAL` without modifying its parameters.  \n  \n `wcsncat_s` and `_mbsncat_s` are wide-character and multibyte-character versions of `strncat_s`. The string arguments and return value of `wcsncat_s` are wide-character strings; those of `_mbsncat_s` are multibyte-character strings. These three functions behave identically otherwise.  \n  \n The output value is affected by the setting of the `LC_CTYPE` category setting of the locale; see [setlocale](../../c-runtime-library/reference/setlocale-wsetlocale.md) for more information. The versions of these functions without the `_l` suffix use the current locale for this locale-dependent behavior; the versions with the `_l` suffix are identical except that they use the locale parameter passed in instead. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n In C++, using these functions is simplified by template overloads; the overloads can infer buffer length automatically (eliminating the need to specify a size argument) and they can automatically replace older, non-secure functions with their newer, secure counterparts. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n The debug versions of these functions first fill the buffer with 0xFD. To disable this behavior, use [_CrtSetDebugFillThreshold](../../c-runtime-library/reference/crtsetdebugfillthreshold.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_tcsncat_s`|`strncat_s`|`_mbsnbcat_s`|`wcsncat_s`|  \n|`_tcsncat_s_l`|`_strncat_s_l`|`_mbsnbcat_s_l`|`_wcsncat_s_l`|  \n  \n `_strncat_s_l` and `_wcsncat_s_l` have no locale dependence; they are only provided for `_tcsncat_s_l`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`strncat_s`|\\<string.h>|  \n|`wcsncat_s`|\\<string.h> or \\<wchar.h>|  \n|`_mbsncat_s`, `_mbsncat_s_l`|\\<mbstring.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_strncat_s.cpp  \n// compile with: /MTd  \n  \n// These #defines enable secure template overloads  \n// (see last part of Examples() below)  \n#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 1   \n#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT 1  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <string.h>  \n#include <crtdbg.h>  // For _CrtSetReportMode  \n#include <errno.h>  \n  \n// This example uses a 10-byte destination buffer.  \n  \nerrno_t strncat_s_tester( const char * initialDest,  \n                          const char * src,  \n                          int count )  \n{  \n   char dest[10];  \n   strcpy_s( dest, _countof(dest), initialDest );  \n  \n   printf_s( \"\\n\" );  \n  \n   if ( count == _TRUNCATE )  \n      printf_s( \"Appending '%s' to %d-byte buffer dest with truncation semantics\\n\",  \n               src, _countof(dest) );  \n   else  \n      printf_s( \"Appending %d chars of '%s' to %d-byte buffer dest\\n\",  \n              count, src, _countof(dest) );  \n  \n   printf_s( \"    old contents of dest: '%s'\\n\", dest );  \n  \n   errno_t err = strncat_s( dest, _countof(dest), src, count );  \n  \n   printf_s( \"    new contents of dest: '%s'\\n\", dest );  \n  \n   return err;  \n}  \n  \nvoid Examples()  \n{  \n   strncat_s_tester( \"hi \", \"there\", 4 );  \n   strncat_s_tester( \"hi \", \"there\", 5 );  \n   strncat_s_tester( \"hi \", \"there\", 6 );  \n  \n   printf_s( \"\\nDestination buffer too small:\\n\" );  \n   strncat_s_tester( \"hello \", \"there\", 4 );  \n  \n   printf_s( \"\\nTruncation examples:\\n\" );  \n  \n   errno_t err = strncat_s_tester( \"hello \", \"there\", _TRUNCATE );  \n   printf_s( \"    truncation %s occur\\n\", err == STRUNCATE ? \"did\"  \n                                                       : \"did not\" );  \n  \n   err = strncat_s_tester( \"hello \", \"!\", _TRUNCATE );  \n   printf_s( \"    truncation %s occur\\n\", err == STRUNCATE ? \"did\"  \n                                                       : \"did not\" );  \n  \n   printf_s( \"\\nSecure template overload example:\\n\" );  \n  \n   char dest[10] = \"cats and \";  \n   strncat( dest, \"dachshunds\", 15 );  \n   // With secure template overloads enabled (see #define  \n   // at top of file), the preceding line is replaced by  \n   //    strncat_s( dest, _countof(dest), \"dachshunds\", 15 );  \n   // Instead of causing a buffer overrun, strncat_s invokes  \n   // the invalid parameter handler.  \n   // If secure template overloads were disabled, strncat would  \n   // append \"dachshunds\" and overrun the dest buffer.  \n   printf_s( \"    new contents of dest: '%s'\\n\", dest );  \n}  \n  \nvoid myInvalidParameterHandler(  \n   const wchar_t* expression,  \n   const wchar_t* function,   \n   const wchar_t* file,   \n   unsigned int line,   \n   uintptr_t pReserved)  \n{  \n   wprintf_s(L\"Invalid parameter handler invoked: %s\\n\", expression);  \n}  \n  \nint main( void )  \n{  \n   _invalid_parameter_handler oldHandler, newHandler;  \n  \n   newHandler = myInvalidParameterHandler;  \n   oldHandler = _set_invalid_parameter_handler(newHandler);  \n   // Disable the message box for assertions.  \n   _CrtSetReportMode(_CRT_ASSERT, 0);  \n  \n   Examples();  \n}  \n```  \n  \n```Output  \nAppending 4 chars of 'there' to 10-byte buffer dest  \n    old contents of dest: 'hi '  \n    new contents of dest: 'hi ther'  \n  \nAppending 5 chars of 'there' to 10-byte buffer dest  \n    old contents of dest: 'hi '  \n    new contents of dest: 'hi there'  \n  \nAppending 6 chars of 'there' to 10-byte buffer dest  \n    old contents of dest: 'hi '  \n    new contents of dest: 'hi there'  \n  \nDestination buffer too small:  \n  \nAppending 4 chars of 'there' to 10-byte buffer dest  \n    old contents of dest: 'hello '  \nInvalid parameter handler invoked: (L\"Buffer is too small\" && 0)  \n    new contents of dest: ''  \n  \nTruncation examples:  \n  \nAppending 'there' to 10-byte buffer dest with truncation semantics  \n    old contents of dest: 'hello '  \n    new contents of dest: 'hello the'  \n    truncation did occur  \n  \nAppending '!' to 10-byte buffer dest with truncation semantics  \n    old contents of dest: 'hello '  \n    new contents of dest: 'hello !'  \n    truncation did not occur  \n  \nSecure template overload example:  \nInvalid parameter handler invoked: (L\"Buffer is too small\" && 0)  \n    new contents of dest: ''  \n```  \n  \n## .NET Framework Equivalent  \n [System::String::Concat](https://msdn.microsoft.com/en-us/library/system.string.concat.aspx)  \n  \n## See Also  \n [String Manipulation](../../c-runtime-library/string-manipulation-crt.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [Interpretation of Multibyte-Character Sequences](../../c-runtime-library/interpretation-of-multibyte-character-sequences.md)   \n [_mbsnbcat, _mbsnbcat_l](../../c-runtime-library/reference/mbsnbcat-mbsnbcat-l.md)   \n [strcat, wcscat, _mbscat](../../c-runtime-library/reference/strcat-wcscat-mbscat.md)   \n [strcmp, wcscmp, _mbscmp](../../c-runtime-library/reference/strcmp-wcscmp-mbscmp.md)   \n [strcpy, wcscpy, _mbscpy](../../c-runtime-library/reference/strcpy-wcscpy-mbscpy.md)   \n [strncmp, wcsncmp, _mbsncmp, _mbsncmp_l](../../c-runtime-library/reference/strncmp-wcsncmp-mbsncmp-mbsncmp-l.md)   \n [strncpy, _strncpy_l, wcsncpy, _wcsncpy_l, _mbsncpy, _mbsncpy_l](../../c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l.md)   \n [_strnicmp, _wcsnicmp, _mbsnicmp, _strnicmp_l, _wcsnicmp_l, _mbsnicmp_l](../../c-runtime-library/reference/strnicmp-wcsnicmp-mbsnicmp-strnicmp-l-wcsnicmp-l-mbsnicmp-l.md)   \n [strrchr, wcsrchr, _mbsrchr, _mbsrchr_l](../../c-runtime-library/reference/strrchr-wcsrchr-mbsrchr-mbsrchr-l.md)   \n [_strset, _strset_l, _wcsset, _wcsset_l, _mbsset, _mbsset_l](../../c-runtime-library/reference/strset-strset-l-wcsset-wcsset-l-mbsset-mbsset-l.md)   \n [strspn, wcsspn, _mbsspn, _mbsspn_l](../../c-runtime-library/reference/strspn-wcsspn-mbsspn-mbsspn-l.md)"}