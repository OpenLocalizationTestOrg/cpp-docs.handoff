{"nodes":[{"pos":[12,51],"content":"C Function Definitions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C Function Definitions | Microsoft Docs","pos":[0,39]}]},{"content":"C Function Definitions","pos":[876,898]},{"content":"A function definition specifies the name of the function, the types and number of parameters it expects to receive, and its return type.","pos":[899,1035]},{"content":"A function definition also includes a function body with the declarations of its local variables, and the statements that determine what the function does.","pos":[1036,1191]},{"content":"Syntax","pos":[1200,1206]},{"content":"<bpt id=\"p1\">*</bpt>translation-unit<ept id=\"p1\">*</ept>:","pos":[1210,1229],"source":"*translation-unit*:"},{"content":"external-declaration","pos":[1234,1254]},{"content":"translation-unit external-declaration","pos":[1263,1300]},{"content":"<bpt id=\"p1\">*</bpt>external-declaration<ept id=\"p1\">*</ept>: /<ph id=\"ph1\">\\*</ph> Allowed only at external (file) scope","pos":[1308,1373],"source":"*external-declaration*: /\\* Allowed only at external (file) scope "},{"content":"function-definition","pos":[1382,1401]},{"content":"<bpt id=\"p1\">*</bpt>function-definition<ept id=\"p1\">*</ept>: /<ph id=\"ph1\">\\*</ph> Declarator here is the function declarator","pos":[1429,1498],"source":"*function-definition*: /\\* Declarator here is the function declarator "},{"content":"<bpt id=\"p1\"> *</bpt>declaration-specifiers<ept id=\"p1\">*</ept> opt<bpt id=\"p2\">*</bpt>attribute-seq<ept id=\"p2\">*</ept> opt<bpt id=\"p3\">*</bpt>declarator declaration-list<ept id=\"p3\">*</ept> opt<bpt id=\"p4\">*</bpt>compound-statement<ept id=\"p4\">*</ept>","pos":[1505,1606],"source":" *declaration-specifiers* opt*attribute-seq* opt*declarator declaration-list* opt*compound-statement*"},{"pos":[1617,1657],"content":"<bpt id=\"p1\">*</bpt>attribute-seq<ept id=\"p1\">*</ept> is Microsoft Specific */","source":"*attribute-seq* is Microsoft Specific */"},{"content":"Prototype parameters are:","pos":[1664,1689]},{"content":"<bpt id=\"p1\">*</bpt>declaration-specifiers<ept id=\"p1\">*</ept>:","pos":[1696,1721],"source":"*declaration-specifiers*:"},{"content":"<bpt id=\"p1\"> *</bpt>storage-class-specifier declaration-specifiers<ept id=\"p1\">*</ept> opt","pos":[1724,1777],"source":" *storage-class-specifier declaration-specifiers* opt"},{"pos":[1784,1827],"content":"<bpt id=\"p1\">*</bpt>type-specifier declaration-specifiers<ept id=\"p1\">*</ept> opt","source":"*type-specifier declaration-specifiers* opt"},{"pos":[1834,1877],"content":"<bpt id=\"p1\">*</bpt>type-qualifier declaration-specifiers<ept id=\"p1\">*</ept> opt","source":"*type-qualifier declaration-specifiers* opt"},{"content":"<bpt id=\"p1\">*</bpt>declaration-list<ept id=\"p1\">*</ept>:","pos":[1884,1903],"source":"*declaration-list*:"},{"content":"declaration","pos":[1908,1919]},{"content":"declaration-list declaration","pos":[1928,1956]},{"content":":","pos":[1976,1977]},{"content":"<bpt id=\"p1\"> *</bpt>pointer<ept id=\"p1\">*</ept> opt<bpt id=\"p2\">*</bpt>direct-declarator<ept id=\"p2\">*</ept>","pos":[1980,2013],"source":" *pointer* opt*direct-declarator*"},{"content":"<bpt id=\"p1\">*</bpt>direct-declarator<ept id=\"p1\">*</ept>: /<ph id=\"ph1\">\\*</ph> A function declarator","pos":[2020,2066],"source":"*direct-declarator*: /\\* A function declarator "},{"content":"<bpt id=\"p1\"> *</bpt>direct-declarator<ept id=\"p1\">*</ept>  <bpt id=\"p2\">**</bpt>(<ept id=\"p2\">**</ept>  <bpt id=\"p3\">*</bpt>parameter-type-list<ept id=\"p3\">*</ept>  <bpt id=\"p4\">**</bpt>)<ept id=\"p4\">**</ept> /* New-style declarator","pos":[2073,2154],"source":" *direct-declarator*  **(**  *parameter-type-list*  **)** /* New-style declarator "},{"pos":[2165,2248],"content":"<bpt id=\"p1\">*</bpt>direct-declarator<ept id=\"p1\">*</ept>  <bpt id=\"p2\">**</bpt>(<ept id=\"p2\">**</ept>  <bpt id=\"p3\">*</bpt>identifier-list<ept id=\"p3\">*</ept> opt<bpt id=\"p4\">**</bpt>)<ept id=\"p4\">**</ept> /* Obsolete-style declarator","source":"*direct-declarator*  **(**  *identifier-list* opt**)** /* Obsolete-style declarator "},{"content":"The parameter list in a definition uses this syntax:","pos":[2259,2311]},{"content":"<bpt id=\"p1\">*</bpt>parameter-type-list<ept id=\"p1\">*</ept>: /<ph id=\"ph1\">\\*</ph> The parameter list","pos":[2318,2363],"source":"*parameter-type-list*: /\\* The parameter list "},{"content":"parameter-list","pos":[2372,2386]},{"pos":[2394,2420],"content":"<bpt id=\"p1\">*</bpt>parameter-list<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>, ...<ept id=\"p2\">**</ept>","source":"*parameter-list* **, ...**"},{"content":"<bpt id=\"p1\">*</bpt>parameter-list<ept id=\"p1\">*</ept>:","pos":[2427,2444],"source":"*parameter-list*:"},{"content":"parameter-declaration","pos":[2449,2470]},{"pos":[2478,2525],"content":"<bpt id=\"p1\">*</bpt>parameter-list<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept>  <bpt id=\"p3\">*</bpt>parameter-declaration<ept id=\"p3\">*</ept>","source":"*parameter-list* **,**  *parameter-declaration*"},{"content":"<bpt id=\"p1\">*</bpt>parameter-declaration<ept id=\"p1\">*</ept>:","pos":[2532,2556],"source":"*parameter-declaration*:"},{"content":"declaration-specifiers declarator","pos":[2561,2594]},{"pos":[2602,2650],"content":"<bpt id=\"p1\">*</bpt>declaration-specifiers abstract declarator<ept id=\"p1\">*</ept> opt","source":"*declaration-specifiers abstract declarator* opt"},{"content":"The parameter list in an old-style function definition uses this syntax:","pos":[2657,2729]},{"content":"<bpt id=\"p1\">*</bpt>identifier-list<ept id=\"p1\">*</ept>: /<ph id=\"ph1\">\\*</ph> Used in obsolete-style function definitions and declarations","pos":[2736,2819],"source":"*identifier-list*: /\\* Used in obsolete-style function definitions and declarations "},{"content":"identifier","pos":[2828,2838]},{"pos":[2846,2883],"content":"<bpt id=\"p1\">*</bpt>identifier-list<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>,<ept id=\"p2\">**</ept>  <bpt id=\"p3\">*</bpt>identifier<ept id=\"p3\">*</ept>","source":"*identifier-list* **,**  *identifier*"},{"content":"The syntax for the function body is:","pos":[2890,2926]},{"content":"<bpt id=\"p1\">*</bpt>compound-statement<ept id=\"p1\">*</ept>: /<ph id=\"ph1\">\\*</ph> The function body","pos":[2933,2976],"source":"*compound-statement*: /\\* The function body "},{"content":"<bpt id=\"p1\"> **</bpt>{<ept id=\"p1\">**</ept>  <ph id=\"ph1\">`declaration`-</ph><bpt id=\"p2\">*</bpt>list<ept id=\"p2\">*</ept> opt<bpt id=\"p3\">*</bpt>statement-list<ept id=\"p3\">*</ept> opt<bpt id=\"p4\">**</bpt>}<ept id=\"p4\">**</ept>","pos":[2983,3040],"source":" **{**  `declaration`-*list* opt*statement-list* opt**}**"},{"content":"The only storage-class specifiers that can modify a function declaration are <ph id=\"ph1\">`extern`</ph> and <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept>.","pos":[3047,3148],"source":"The only storage-class specifiers that can modify a function declaration are `extern` and **static**."},{"content":"The <ph id=\"ph1\">`extern`</ph> specifier signifies that the function can be referenced from other files; that is, the function name is exported to the linker.","pos":[3149,3289],"source":" The `extern` specifier signifies that the function can be referenced from other files; that is, the function name is exported to the linker."},{"content":"The <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> specifier signifies that the function cannot be referenced from other files; that is, the name is not exported by the linker.","pos":[3290,3430],"source":" The **static** specifier signifies that the function cannot be referenced from other files; that is, the name is not exported by the linker."},{"content":"If no storage class appears in a function definition, <ph id=\"ph1\">`extern`</ph> is assumed.","pos":[3431,3505],"source":" If no storage class appears in a function definition, `extern` is assumed."},{"content":"In any case, the function is always visible from the definition point to the end of the file.","pos":[3506,3599]},{"content":"The optional <bpt id=\"p1\">*</bpt>declaration-specifiers<ept id=\"p1\">*</ept> and mandatory <ph id=\"ph1\">`declarator`</ph> together specify the function's return type and name.","pos":[3606,3724],"source":"The optional *declaration-specifiers* and mandatory `declarator` together specify the function's return type and name."},{"content":"The <ph id=\"ph1\">`declarator`</ph> is a combination of the identifier that names the function and the parentheses following the function name.","pos":[3725,3849],"source":" The `declarator` is a combination of the identifier that names the function and the parentheses following the function name."},{"content":"The optional <bpt id=\"p1\">*</bpt>attribute-seq<ept id=\"p1\">*</ept> nonterminal is a Microsoft-specific feature defined in <bpt id=\"p2\">[</bpt>Function Attributes<ept id=\"p2\">](../c-language/function-attributes.md)</ept>.","pos":[3850,3994],"source":" The optional *attribute-seq* nonterminal is a Microsoft-specific feature defined in [Function Attributes](../c-language/function-attributes.md)."},{"content":"The <bpt id=\"p1\">*</bpt>direct-declarator<ept id=\"p1\">*</ept> (in the <ph id=\"ph1\">`declarator`</ph> syntax) specifies the name of the function being defined and the identifiers of its parameters.","pos":[4001,4141],"source":"The *direct-declarator* (in the `declarator` syntax) specifies the name of the function being defined and the identifiers of its parameters."},{"content":"If the <bpt id=\"p1\">*</bpt>direct-declarator<ept id=\"p1\">*</ept> includes a <bpt id=\"p2\">*</bpt>parameter-type-list<ept id=\"p2\">*</ept>, the list specifies the types of all the parameters.","pos":[4142,4254],"source":" If the *direct-declarator* includes a *parameter-type-list*, the list specifies the types of all the parameters."},{"content":"Such a declarator also serves as a function prototype for later calls to the function.","pos":[4255,4341]},{"content":"A <ph id=\"ph1\">`declaration`</ph> in the <bpt id=\"p1\">*</bpt>declaration-list<ept id=\"p1\">*</ept> in function definitions cannot contain a <bpt id=\"p2\">*</bpt>storage-class-specifier<ept id=\"p2\">*</ept> other than <bpt id=\"p3\">**</bpt>register<ept id=\"p3\">**</ept>.","pos":[4348,4481],"source":"A `declaration` in the *declaration-list* in function definitions cannot contain a *storage-class-specifier* other than **register**."},{"content":"The <bpt id=\"p1\">*</bpt>type-specifier<ept id=\"p1\">*</ept> in the <bpt id=\"p2\">*</bpt>declaration-specifiers<ept id=\"p2\">*</ept> syntax can be omitted only if the <bpt id=\"p3\">**</bpt>register<ept id=\"p3\">**</ept> storage class is specified for a value of <ph id=\"ph1\">`int`</ph> type.","pos":[4482,4635],"source":" The *type-specifier* in the *declaration-specifiers* syntax can be omitted only if the **register** storage class is specified for a value of `int` type."},{"pos":[4642,4784],"content":"The <bpt id=\"p1\">*</bpt>compound-statement<ept id=\"p1\">*</ept> is the function body containing local variable declarations, references to externally declared items, and statements.","source":"The *compound-statement* is the function body containing local variable declarations, references to externally declared items, and statements."},{"pos":[4791,5115],"content":"The sections <bpt id=\"p1\">[</bpt>Function Attributes<ept id=\"p1\">](../c-language/function-attributes.md)</ept>, <bpt id=\"p2\">[</bpt>Storage Class<ept id=\"p2\">](../c-language/storage-class.md)</ept>, <bpt id=\"p3\">[</bpt>Return Type<ept id=\"p3\">](../c-language/return-type.md)</ept>, <bpt id=\"p4\">[</bpt>Parameters<ept id=\"p4\">](../c-language/parameters.md)</ept>, and <bpt id=\"p5\">[</bpt>Function Body<ept id=\"p5\">](../c-language/function-body.md)</ept> describe the components of the function definition in detail.","source":"The sections [Function Attributes](../c-language/function-attributes.md), [Storage Class](../c-language/storage-class.md), [Return Type](../c-language/return-type.md), [Parameters](../c-language/parameters.md), and [Function Body](../c-language/function-body.md) describe the components of the function definition in detail."},{"content":"See Also","pos":[5124,5132]},{"content":"Functions","pos":[5137,5146]}],"content":"---\ntitle: \"C Function Definitions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"function declarators\"\n  - \"function definitions\"\n  - \"declaring functions, about function declarations\"\n  - \"declaring functions, declarators\"\n  - \"functions [C], parameters\"\n  - \"declarators, functions\"\n  - \"function parameters, function definitions\"\n  - \"function body\"\n  - \"declaring functions, variables\"\nms.assetid: ebab23c8-6eb8-46f3-b21d-570cd8457a80\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C Function Definitions\nA function definition specifies the name of the function, the types and number of parameters it expects to receive, and its return type. A function definition also includes a function body with the declarations of its local variables, and the statements that determine what the function does.  \n  \n## Syntax  \n *translation-unit*:  \n *external-declaration*  \n  \n *translation-unit external-declaration*  \n  \n *external-declaration*: /\\* Allowed only at external (file) scope \\*/  \n *function-definition*  \n  \n `declaration`  \n  \n *function-definition*: /\\* Declarator here is the function declarator \\*/  \n *declaration-specifiers* opt*attribute-seq* opt*declarator declaration-list* opt*compound-statement*  \n  \n /\\* *attribute-seq* is Microsoft Specific */  \n  \n Prototype parameters are:  \n  \n *declaration-specifiers*:  \n *storage-class-specifier declaration-specifiers* opt  \n  \n *type-specifier declaration-specifiers* opt  \n  \n *type-qualifier declaration-specifiers* opt  \n  \n *declaration-list*:  \n *declaration*  \n  \n *declaration-list declaration*  \n  \n `declarator`:  \n *pointer* opt*direct-declarator*  \n  \n *direct-declarator*: /\\* A function declarator \\*/  \n *direct-declarator*  **(**  *parameter-type-list*  **)** /* New-style declarator \\*/  \n  \n *direct-declarator*  **(**  *identifier-list* opt**)** /* Obsolete-style declarator \\*/  \n  \n The parameter list in a definition uses this syntax:  \n  \n *parameter-type-list*: /\\* The parameter list \\*/  \n *parameter-list*  \n  \n *parameter-list* **, ...**  \n  \n *parameter-list*:  \n *parameter-declaration*  \n  \n *parameter-list* **,**  *parameter-declaration*  \n  \n *parameter-declaration*:  \n *declaration-specifiers declarator*  \n  \n *declaration-specifiers abstract declarator* opt  \n  \n The parameter list in an old-style function definition uses this syntax:  \n  \n *identifier-list*: /\\* Used in obsolete-style function definitions and declarations \\*/  \n *identifier*  \n  \n *identifier-list* **,**  *identifier*  \n  \n The syntax for the function body is:  \n  \n *compound-statement*: /\\* The function body \\*/  \n **{**  `declaration`-*list* opt*statement-list* opt**}**  \n  \n The only storage-class specifiers that can modify a function declaration are `extern` and **static**. The `extern` specifier signifies that the function can be referenced from other files; that is, the function name is exported to the linker. The **static** specifier signifies that the function cannot be referenced from other files; that is, the name is not exported by the linker. If no storage class appears in a function definition, `extern` is assumed. In any case, the function is always visible from the definition point to the end of the file.  \n  \n The optional *declaration-specifiers* and mandatory `declarator` together specify the function's return type and name. The `declarator` is a combination of the identifier that names the function and the parentheses following the function name. The optional *attribute-seq* nonterminal is a Microsoft-specific feature defined in [Function Attributes](../c-language/function-attributes.md).  \n  \n The *direct-declarator* (in the `declarator` syntax) specifies the name of the function being defined and the identifiers of its parameters. If the *direct-declarator* includes a *parameter-type-list*, the list specifies the types of all the parameters. Such a declarator also serves as a function prototype for later calls to the function.  \n  \n A `declaration` in the *declaration-list* in function definitions cannot contain a *storage-class-specifier* other than **register**. The *type-specifier* in the *declaration-specifiers* syntax can be omitted only if the **register** storage class is specified for a value of `int` type.  \n  \n The *compound-statement* is the function body containing local variable declarations, references to externally declared items, and statements.  \n  \n The sections [Function Attributes](../c-language/function-attributes.md), [Storage Class](../c-language/storage-class.md), [Return Type](../c-language/return-type.md), [Parameters](../c-language/parameters.md), and [Function Body](../c-language/function-body.md) describe the components of the function definition in detail.  \n  \n## See Also  \n [Functions](../c-language/functions-c.md)"}