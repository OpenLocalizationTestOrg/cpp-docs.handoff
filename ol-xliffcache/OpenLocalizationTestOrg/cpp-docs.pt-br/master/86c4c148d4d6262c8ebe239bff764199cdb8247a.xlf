<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86c4c148d4d6262c8ebe239bff764199cdb8247a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\debug-routines.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4745ef3e52a6b75d830505cd0114fd651d6b1b04</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9140321d8ddb63ccc4f5ddcd41addfad4e617714</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Debug Routines | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Debug Routines</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The debug version of the C run-time library supplies many diagnostic services that make debugging programs easier and allow developers to:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Step directly into run-time functions during debugging</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Resolve assertions, errors, and exceptions</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Trace heap allocations and prevent memory leaks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Report debug messages to the user</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To use these routines, the <bpt id="p1">[</bpt>_DEBUG<ept id="p1">](../c-runtime-library/debug.md)</ept> flag must be defined.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>All of these routines do nothing in a retail build of an application.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information on how to use the new debug routines, see <bpt id="p1">[</bpt>CRT Debugging Techniques<ept id="p1">](/visualstudio/debugger/crt-debugging-techniques)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Debug Versions of the C Run-Time Library Routines</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>.NET Framework equivalent</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>_ASSERT</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Evaluate an expression and generates a debug report when the result is FALSE</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Debug::Assert</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>_ASSERTE</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Similar to <ph id="ph1">`_ASSERT`</ph>, but includes the failed expression in the generated report</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::Debug::Assert</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>_CrtCheckMemory</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Confirm the integrity of the memory blocks allocated on the debug heap</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::PerformanceCounter</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>_CrtDbgBreak</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Sets a break point.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>_CrtDbgReport, _CrtDbgReportW</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Generate a debug report with a user message and send the report to three possible destinations</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System::Diagnostics::Debug::Write<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.diagnostics.debug.write.aspx)</ept>, <bpt id="p2">[</bpt>System::Diagnostics::Debug::Writeline<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.diagnostics.debug.writeline.aspx)</ept>, <bpt id="p3">[</bpt>System::Diagnostics::Debug::WriteIf<ept id="p3">](https://msdn.microsoft.com/en-us/library/system.diagnostics.debug.writeif.aspx)</ept>, <bpt id="p4">[</bpt>System::Diagnostics::Debug::WriteLineIf<ept id="p4">](https://msdn.microsoft.com/en-us/library/system.diagnostics.debug.writelineif.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>_CrtDoForAllClientObjects</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Call an application-supplied function for all <ph id="ph1">`_CLIENT_BLOCK`</ph> types on the heap</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>_CrtDumpMemoryLeaks</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Dump all of the memory blocks on the debug heap when a significant memory leak has occurred</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>_CrtIsMemoryBlock</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Verify that a specified memory block is located within the local heap and that it has a valid debug heap block type identifier</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>_CrtIsValidHeapPointer</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Verifies that a specified pointer is in the local heap</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>_CrtIsValidPointer</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Verify that a specified memory range is valid for reading and writing</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>_CrtMemCheckpoint</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Obtain the current state of the debug heap and store it in an application-supplied <ph id="ph1">`_CrtMemState`</ph> structure</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>_CrtMemDifference</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Compare two memory states for significant differences and return the results</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>_CrtMemDumpAllObjectsSince</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Dump information about objects on the heap since a specified checkpoint was taken or from the start of program execution</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>_CrtMemDumpStatistics</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Dump the debug header information for a specified memory state in a user-readable form</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>System::Diagnostics::PerformanceCounter</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>_CrtReportBlockType</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Returns the block type/subtype associated with a given debug heap block pointer.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>_CrtSetAllocHook</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Install a client-defined allocation function by hooking it into the C run-time debug memory allocation process</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>_CrtSetBreakAlloc</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Set a breakpoint on a specified object allocation order number</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>_CrtSetDbgFlag</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Retrieve or modify the state of the <ph id="ph1">`_crtDbgFlag`</ph> flag to control the allocation behavior of the debug heap manager</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>_CrtSetDumpClient</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Install an application-defined function that is called every time a debug dump function is called to dump <ph id="ph1">`_CLIENT_BLOCK`</ph> type memory blocks</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>_CrtSetReportFile</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Identify the file or stream to be used as a destination for a specific report type by</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>_CrtSetReportHook</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Install a client-defined reporting function by hooking it into the C run-time debug reporting process</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>_CrtSetReportHook2, _CrtSetReportHookW2</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Installs or uninstalls a client-defined reporting function by hooking it into the C run-time debug reporting process.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>_CrtSetReportMode</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Specify the general destination(s) for a specific report type generated by</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>_RPT&amp;#91;0,1,2,3,4&amp;#93;</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Track the application's progress by generating a debug report by calling <ph id="ph1">`_CrtDbgReport`</ph> with a format string and a variable number of arguments.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Provides no source file and line number information.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>_RPTF&amp;#91;0,1,2,3,4&amp;#93;</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Similar to the <ph id="ph1">`_RPTn`</ph> macros, but provides the source file name and line number where the report request originated</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>_calloc_dbg</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Allocate a specified number of memory blocks on the heap with additional space for a debugging header and overwrite buffers</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>_expand_dbg</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Resize a specified block of memory on the heap by expanding or contracting the block</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>_free_dbg</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Free a block of memory on the heap</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>_fullpath_dbg, _wfullpath_dbg</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Create an absolute or full path name for the specified relative path name, using <bpt id="p1">[</bpt>_malloc_dbg<ept id="p1">](../c-runtime-library/reference/malloc-dbg.md)</ept> to allocate memory.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>System::IO::File::Create</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>_getcwd_dbg, _wgetcwd_dbg</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Get the current working directory, using <bpt id="p1">[</bpt>_malloc_dbg<ept id="p1">](../c-runtime-library/reference/malloc-dbg.md)</ept> to allocate memory.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>_malloc_dbg</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Allocate a block of memory on the heap with additional space for a debugging header and overwrite buffers</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>_msize_dbg</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Calculate the size of a block of memory on the heap</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>_realloc_dbg</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Reallocate a specified block of memory on the heap by moving and/or resizing the block</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>_strdup_dbg, _wcsdup_dbg</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Duplicates a string, using <bpt id="p1">[</bpt>_malloc_dbg<ept id="p1">](../c-runtime-library/reference/malloc-dbg.md)</ept> to allocate memory.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>System::String::Clone</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>_tempnam_dbg, _wtempnam_dbg</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Generate names you can use to create temporary files, using <bpt id="p1">[</bpt>_malloc_dbg<ept id="p1">](../c-runtime-library/reference/malloc-dbg.md)</ept> to allocate memory.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The debug routines can be used to step through the source code for most of the other C run-time routines during the debugging process.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>However, Microsoft considers some technology to be proprietary and, therefore, does not provide the source code for these routines.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Most of these routines belong to either the exception handling or floating-point processing groups, but a few others are included as well.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The following table lists these routines.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>C Run-Time Routines That Are Not Available in Source Code Form</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>acos, acosf, acosl</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>_fpclass</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>_nextafter</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>asin</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>_fpieee_flt</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>pow</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>atan, atan2</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>_fpreset</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>printf, _printf_l, wprintf, _wprintf_l<ept id="p1">](../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept>, <bpt id="p2">[</bpt>printf_s, _printf_s_l, wprintf_s, _wprintf_s_l<ept id="p2">](../c-runtime-library/reference/printf-s-printf-s-l-wprintf-s-wprintf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>_cabs</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>frexp</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>_scalb</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>ceil</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>_hypot</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>scanf, _scanf_l, wscanf, _wscanf_l<ept id="p1">](../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)</ept>, <bpt id="p2">[</bpt>scanf_s, _scanf_s_l, wscanf_s, _wscanf_s_l<ept id="p2">](../c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l.md)</ept></source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>_chgsign, _chgsignf, _chgsignl</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>_isnan</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>setjmp</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>_clear87, _clearfp</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>_j0</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>sin</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>_control87, _controlfp, <ph id="ph1">\_</ph>_control87_2</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>_j1</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>sinh</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>copysign, copysignf, copysignl, _copysign, _copysignf, _copysignl</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>_jn</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>sqrt</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>cos</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>ldexp</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>_status87, _statusfp</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>cosh</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>log</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>tan</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Exp</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>log10</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>tanh</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>fabs</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>_logb</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>_y0</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>_finite</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>longjmp</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>_y1</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>floor</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>_matherr</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>_yn</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>fmod</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>modf</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Although source code is available for most of this routine, it makes an internal call to another routine for which source code is not provided.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Some C run-time functions and C++ operators behave differently when called from a debug build of an application.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>(Note that a debug build of an application can be done by either defining the <ph id="ph1">`_DEBUG`</ph> flag or by linking with a debug version of the C run-time library.) The behavioral differences usually consist of extra features or information provided by the routine to support the debugging process.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The following table lists these routines.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Routines that Behave Differently in a Debug Build of an Application</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>C <bpt id="p1">[</bpt>abort<ept id="p1">](../c-runtime-library/reference/abort.md)</ept> routine</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>C++ <bpt id="p1">[</bpt>delete<ept id="p1">](../cpp/delete-operator-cpp.md)</ept> operator</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>C <bpt id="p1">[</bpt>assert<ept id="p1">](../c-runtime-library/reference/assert-macro-assert-wassert.md)</ept> routine</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>C++ <bpt id="p1">[</bpt>new<ept id="p1">](../cpp/new-operator-cpp.md)</ept> operator</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Run-Time Routines by Category</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Run-Time Error Checking</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>