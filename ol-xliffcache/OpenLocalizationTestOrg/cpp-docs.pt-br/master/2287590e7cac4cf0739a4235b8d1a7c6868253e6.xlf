<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2287590e7cac4cf0739a4235b8d1a7c6868253e6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\activex-controls-on-the-internet.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">baad2484b18618b0d407c10f80f4910f65c63ebf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">81a3c9207c99f944483a23755d2909c45a56ee16</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ActiveX Controls on the Internet | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ActiveX Controls on the Internet</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ActiveX controls are the updated version of the OLE control specification.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Controls are a primary architecture for developing programmable software components that can be used in a variety of different containers, including COM-aware Web browsers on the Internet.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Any ActiveX control can be an Internet control and can add its functionality to an Active document or be part of a Web page.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Controls on a Web page can communicate with each other using scripting.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>ActiveX controls are not limited to the Internet.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An ActiveX control can also be used in any container, as long as the control supports the interfaces required by that container.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>ActiveX controls have several advantages, including:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Fewer required interfaces than previous OLE controls.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The ability to be windowless and always in-place active.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In order to be an ActiveX control, a control must:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Support the <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Be a COM object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Export <bpt id="p1">**</bpt>DLLRegisterServer<ept id="p1">**</ept> and <bpt id="p2">**</bpt>DLLUnRegisterServer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Support additional interfaces as needed for functionality.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Making Your Existing Controls Internet-Friendly</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Designing a control that will work well in an Internet environment requires consideration for the relatively low transmission rates on the Internet.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can use your existing controls; however, there are steps you should take to make your code size smaller and to make your control properties download asynchronously.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To improve performance of your controls, follow these tips on efficiency considerations:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Implement the techniques described in the article <bpt id="p1">[</bpt>ActiveX Controls: Optimization<ept id="p1">](../mfc/mfc-activex-controls-optimization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Consider how a control is instantiated.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Be asynchronous; don't hold up other programs.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Download data in small blocks.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When downloading large streams such as bitmaps or video data, access a control's data asynchronously in cooperation with the container.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Retrieve the data in an incremental or progressive fashion, working cooperatively with other controls that may also be retrieving data.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Code can also be downloading asynchronously.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Download code and properties in the background.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Become user-interface active as quickly as possible.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Consider how persistent data is stored, both properties and large data BLOBs (such as a bitmap image or video data).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Controls with significant amounts of persistent data, such as large bitmaps or AVI files, require careful attention to downloading method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A document or page can become visible as soon as possible, and allow the user to interact with the page while controls retrieve data in the background.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Write efficient routines to keep code size and run time down.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Small button and label controls, with only a few bytes of persistent data, are suitable for use in the Internet environment and work well inside browsers.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Consider progress is communicated to the container.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Notify the container of progress in the asynchronous download, including when the user can start to interact with a page, and when the download is complete.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The container can display progress (such as percent complete) to the user.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Consider how controls are registered on the client computer.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Creating a New ActiveX Control</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When creating a new control using the Application Wizard, you can choose to enable support for asynchronous monikers as well as other optimizations.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To add support to download control properties asynchronously, follow these steps:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To create your project using the MFC ActiveX Control Wizard</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Click <ph id="ph1">`New`</ph> on the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>MFC ActiveX Control Wizard<ept id="p1">**</ept> from the Visual C++ projects and name your project.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Control Settings<ept id="p1">**</ept> page, select <bpt id="p2">**</bpt>Loads properties asynchronously<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Selecting this option sets up the ready state property and the ready state changed event for you.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can also select other optimizations, such as <bpt id="p1">**</bpt>Windowless activation<ept id="p1">**</ept>, which is described in <bpt id="p2">[</bpt>ActiveX Controls: Optimization<ept id="p2">](../mfc/mfc-activex-controls-optimization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept> to create the project.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To create a class derived from CDataPathProperty</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Create a class derived from <ph id="ph1">`CDataPathProperty`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In each of your source files that includes the header file for your control, add the header file for this class before it.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this class, override <ph id="ph1">`OnDataAvailable`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This function is called whenever data is available for display.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>As data becomes available, you can handle it any way you choose, for example by progressively rendering it.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The code excerpt below is a simple example of progressively displaying data in an edit control.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Note the use of flag <bpt id="p1">**</bpt>BSCF_FIRSTDATANOTIFICATION<ept id="p1">**</ept> to clear the edit control.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>NVC_MFCActiveXControl#1</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Note that you must include AFXCMN.H to use the <ph id="ph1">`CListCtrl`</ph> class.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When your control's overall state changes (for example, from loading to initialized or user interactive), call <ph id="ph1">`COleControl::InternalSetReadyState`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If your control has only one data path property, you can add code on <bpt id="p1">**</bpt>BSCF_LASTDATANOTIFICATION<ept id="p1">**</ept> to notify the container that your download is complete.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>NVC_MFCActiveXControl#2</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`OnProgress`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`OnProgress`</ph>, you are passed a number showing the maximum range and a number showing how far along the current download is.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can use these numbers to display status such as percent complete to the user.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The next procedure adds a property to the control to use the class just derived.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To add a property</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Class View<ept id="p1">**</ept>, right-click the interface underneath the library node and select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>Add Property<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This will start the <bpt id="p1">**</bpt>Add Property Wizard<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add Property Wizard<ept id="p1">**</ept>, select the <bpt id="p2">**</bpt>Set/Get Methods<ept id="p2">**</ept> radio button, type the <bpt id="p3">**</bpt>Property Name<ept id="p3">**</ept>, for example, EditControlText, and select BSTR as the <bpt id="p4">**</bpt>Property type<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Declare a member variable of your <ph id="ph1">`CDataPathProperty`</ph>-derived class to your ActiveX control class.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>NVC_MFCActiveXControl#3</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Implement the <bpt id="p1">**</bpt>Get/Set<ept id="p1">**</ept> methods.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>Get<ept id="p1">**</ept>, return the string.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`Set`</ph>, load the property and call <ph id="ph2">`SetModifiedFlag`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>NVC_MFCActiveXControl#4</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">[</bpt>DoPropExchange<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__dopropexchange)</ept>, add the following line:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>NVC_MFCActiveXControl#5</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Override <bpt id="p1">[</bpt>ResetData<ept id="p1">](../mfc/reference/cdatapathproperty-class.md#cdatapathproperty__resetdata)</ept> to notify the property to reset its control by adding this line:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>NVC_MFCActiveXControl#6</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Deciding Whether to Derive from CDataPathProperty or CCachedDataPathProperty</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The previous example describes steps for deriving your control's property from <ph id="ph1">`CDataPathProperty`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This is a good choice if you are downloading real-time data that frequently changes, and for which you do not need to keep all the data, but only the current value.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>An example is a stock ticker control.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can also derive from <ph id="ph1">`CCachedDataPathProperty`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In this case, the downloaded data is cached in a memory file.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This is a good choice if you need to keep all the downloaded data — for example, a control that progressively renders a bitmap.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In this case, the class has a member variable containing your data:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In your ActiveX control class, you can use this memory mapped file in <ph id="ph1">`OnDraw`</ph> to display the data.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In your ActiveX control <ph id="ph1">`CCachedDataPathProperty`</ph>-derived class, override the member function <ph id="ph2">`OnDataAvailable`</ph> and invalidate the control, after calling the base class implementation.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>NVC_MFCActiveXControl#7</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Downloading Data Asynchronously Using ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Downloading data over a network should be done asynchronously.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The advantage of doing so is that if a large amount of data is transferred or if the connection is slow, the download process will not block other processes on the client.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Asynchronous monikers provide a way to download data asynchronously over a network.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A Read operation on an Asynchronous moniker returns immediately, even if the operation has not been completed.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example, if only 10 bytes are available and Read is called asynchronously on a 1K file, Read does not block, but returns with the currently available 10 bytes.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You implement <bpt id="p1">[</bpt>asynchronous monikers<ept id="p1">](../mfc/asynchronous-monikers-on-the-internet.md)</ept> using the <ph id="ph1">`CAsyncMonikerFile`</ph> class.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>However, ActiveX controls can use the <ph id="ph1">`CDataPathProperty`</ph> class, which is derived from <ph id="ph2">`CAsyncMonikerFile`</ph>, to help implement asynchronous control properties.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The ASYNDOWN sample demonstrates how to set up an asynchronous loop using timers to read the data.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>ASYNDOWN is described in detail in the Knowledge Base article "HOWTO: AsyncDown Demonstrates Asynchronous Data Download" (Q177244) and is available for download from the Microsoft Download Center.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>(For more information about downloading files from the Microsoft Download Center, see the article "How to Obtain Microsoft Support Files from Online Services" (Q119591) in the Microsoft Knowledge Base.) You can find Knowledge Base articles on the MSDN Library CD-ROM or at <bpt id="p1">[</bpt>http://support.microsoft.com/support<ept id="p1">](http://support.microsoft.com/support)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The basic technique used in ASYNDOWN is to set a timer in <bpt id="p1">**</bpt>CDataPathProperty::OnDataAvailable<ept id="p1">**</ept> to indicate when data is available.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>When the timer message is received, the application reads in 128-byte blocks of data and fills an edit control.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If data is not available when the timer message is handled, the timer is turned off.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>turns on the timer if more data arrives later.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Displaying a Control on a Web Page</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Here is an example of an object tag and attributes for inserting a control on a Web page.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Updating an Existing OLE Control to Use New ActiveX Control Features</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If your OLE control was created with a version of Visual C++ prior to 4.2, there are steps you can take to improve its performance and enhance its functionality.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For a detailed discussion of these changes, see <bpt id="p1">[</bpt>ActiveX Controls: Optimization<ept id="p1">](../mfc/mfc-activex-controls-optimization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If you are adding asynchronous property support to an existing control, you will need to add the ready state property and the <ph id="ph1">`ReadyStateChange`</ph> event yourself.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In the constructor for your control, add:</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>NVC_MFCActiveXControl#8</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>You will update the ready state as your code is downloaded by calling <bpt id="p1">[</bpt>COleControl::InternalSetReadyState<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__internalsetreadystate)</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>One place you could call <ph id="ph1">`InternalSetReadyState`</ph> is from the <ph id="ph2">`OnProgress`</ph> override of <ph id="ph3">`CDataPathProperty`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>MFC Internet Programming Tasks</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>MFC Internet Programming Basics</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>