{"nodes":[{"pos":[12,38],"content":".SETFRAME | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":".SETFRAME | Microsoft Docs","pos":[0,26]}]},{"content":".SETFRAME","pos":[596,605]},{"content":"Fills in the frame register field and offset in the unwind information using the specified register (<ph id=\"ph1\">`reg`</ph>) and offset (<ph id=\"ph2\">`offset`</ph>).","pos":[606,736],"source":"Fills in the frame register field and offset in the unwind information using the specified register (`reg`) and offset (`offset`)."},{"content":"The offset must be a multiple of 16 and less than or equal to 240.","pos":[737,803]},{"content":"This directive also generates a <ph id=\"ph1\">`UWOP_SET_FPREG`</ph> unwind code entry for the specified register using the current prologue offset.","pos":[804,932],"source":" This directive also generates a `UWOP_SET_FPREG` unwind code entry for the specified register using the current prologue offset."},{"content":"Syntax","pos":[941,947]},{"content":"Remarks","pos":[995,1002]},{"content":".SETFRAME allows ml64.exe users to specify how a frame function unwinds, and is only allowed within the prologue, which extends from the <bpt id=\"p1\">[</bpt>PROC<ept id=\"p1\">](../../assembler/masm/proc.md)</ept> FRAME declaration to the <bpt id=\"p2\">[</bpt>.ENDPROLOG<ept id=\"p2\">](../../assembler/masm/dot-endprolog.md)</ept> directive.","pos":[1006,1267],"source":".SETFRAME allows ml64.exe users to specify how a frame function unwinds, and is only allowed within the prologue, which extends from the [PROC](../../assembler/masm/proc.md) FRAME declaration to the [.ENDPROLOG](../../assembler/masm/dot-endprolog.md) directive."},{"content":"These directives do not generate code; they only generate <ph id=\"ph1\">`.xdata`</ph> and <ph id=\"ph2\">`.pdata`</ph>.","pos":[1268,1348],"source":" These directives do not generate code; they only generate `.xdata` and `.pdata`."},{"content":".SETFRAME should be preceded by instructions that actually implement the actions to be unwound.","pos":[1349,1444]},{"content":"It is a good practice to wrap both the unwind directives and the code they are meant to unwind in a macro to ensure agreement.","pos":[1445,1571]},{"pos":[1578,1677],"content":"For more information, see <bpt id=\"p1\">[</bpt>MASM for x64 (ml64.exe)<ept id=\"p1\">](../../assembler/masm/masm-for-x64-ml64-exe.md)</ept>.","source":"For more information, see [MASM for x64 (ml64.exe)](../../assembler/masm/masm-for-x64-ml64-exe.md)."},{"content":"Sample","pos":[1686,1692]},{"content":"Description","pos":[1702,1713]},{"content":"The following sample shows how to use a frame pointer:","pos":[1717,1771]},{"content":"Code","pos":[1781,1785]},{"content":"See Also","pos":[2332,2340]},{"content":"Directives Reference","pos":[2345,2365]}],"content":"---\ntitle: \".SETFRAME | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \".SETFRAME\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \".SETFRAME directive\"\nms.assetid: eaa9b5ed-4daa-4f1e-bdb6-100758007ab3\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# .SETFRAME\nFills in the frame register field and offset in the unwind information using the specified register (`reg`) and offset (`offset`). The offset must be a multiple of 16 and less than or equal to 240. This directive also generates a `UWOP_SET_FPREG` unwind code entry for the specified register using the current prologue offset.  \n  \n## Syntax  \n  \n```  \n.SETFRAME reg, offset  \n```  \n  \n## Remarks  \n .SETFRAME allows ml64.exe users to specify how a frame function unwinds, and is only allowed within the prologue, which extends from the [PROC](../../assembler/masm/proc.md) FRAME declaration to the [.ENDPROLOG](../../assembler/masm/dot-endprolog.md) directive. These directives do not generate code; they only generate `.xdata` and `.pdata`. .SETFRAME should be preceded by instructions that actually implement the actions to be unwound. It is a good practice to wrap both the unwind directives and the code they are meant to unwind in a macro to ensure agreement.  \n  \n For more information, see [MASM for x64 (ml64.exe)](../../assembler/masm/masm-for-x64-ml64-exe.md).  \n  \n## Sample  \n  \n### Description  \n The following sample shows how to use a frame pointer:  \n  \n### Code  \n  \n```  \n; ml64 frmex2.asm /link /entry:frmex2 /SUBSYSTEM:CONSOLE  \n_text SEGMENT  \nfrmex2 PROC FRAME  \n   push rbp  \n.pushreg rbp  \n   sub rsp, 010h  \n.allocstack 010h  \n   mov rbp, rsp  \n.setframe rbp, 0  \n.endprolog  \n   ; modify the stack pointer outside of the prologue (similar to alloca)  \n   sub rsp, 060h  \n  \n   ; we can unwind from the following AV because of the frame pointer     \n   mov rax, 0  \n   mov rax, [rax] ; AV!  \n  \n   add rsp, 060h  \n   add rsp, 010h  \n   pop rbp  \n   ret  \nfrmex2 ENDP  \n_text ENDS  \nEND  \n```  \n  \n## See Also  \n [Directives Reference](../../assembler/masm/directives-reference.md)"}