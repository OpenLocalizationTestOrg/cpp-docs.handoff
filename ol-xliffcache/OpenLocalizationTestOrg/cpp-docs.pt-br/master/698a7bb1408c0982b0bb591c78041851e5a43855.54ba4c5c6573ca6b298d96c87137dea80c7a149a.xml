{"nodes":[{"pos":[12,85],"content":"How to: Use Alloc and Free to Improve Memory Performance | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Use Alloc and Free to Improve Memory Performance | Microsoft Docs","pos":[0,73]}]},{"content":"How to: Use Alloc and Free to Improve Memory Performance","pos":[713,769]},{"content":"This document shows how to use the <bpt id=\"p1\">[</bpt>concurrency::Alloc<ept id=\"p1\">](reference/concurrency-namespace-functions.md#alloc)</ept> and <bpt id=\"p2\">[</bpt>concurrency::Free<ept id=\"p2\">](reference/concurrency-namespace-functions.md#free)</ept> functions to improve memory performance.","pos":[771,994],"source":"This document shows how to use the [concurrency::Alloc](reference/concurrency-namespace-functions.md#alloc) and [concurrency::Free](reference/concurrency-namespace-functions.md#free) functions to improve memory performance."},{"content":"It compares the time that is required to reverse the elements of an array in parallel for three different types that each specify the <ph id=\"ph1\">`new`</ph> and <ph id=\"ph2\">`delete`</ph> operators.","pos":[995,1158],"source":" It compares the time that is required to reverse the elements of an array in parallel for three different types that each specify the `new` and `delete` operators."},{"content":"The <ph id=\"ph1\">`Alloc`</ph> and <ph id=\"ph2\">`Free`</ph> functions are most useful when multiple threads frequently call both <ph id=\"ph3\">`Alloc`</ph> and <ph id=\"ph4\">`Free`</ph>.","pos":[1166,1277],"source":"The `Alloc` and `Free` functions are most useful when multiple threads frequently call both `Alloc` and `Free`."},{"content":"The runtime holds a separate memory cache for each thread; therefore, the runtime manages memory without the use of locks or memory barriers.","pos":[1278,1419]},{"content":"Example","pos":[1428,1435]},{"content":"The following example shows three types that each specify the <ph id=\"ph1\">`new`</ph> and <ph id=\"ph2\">`delete`</ph> operators.","pos":[1439,1530],"source":"The following example shows three types that each specify the `new` and `delete` operators."},{"content":"The <ph id=\"ph1\">`new_delete`</ph> class uses the global <ph id=\"ph2\">`new`</ph> and <ph id=\"ph3\">`delete`</ph> operators, the <ph id=\"ph4\">`malloc_free`</ph> class uses the C Runtime <bpt id=\"p1\">[</bpt>malloc<ept id=\"p1\">](../../c-runtime-library/reference/malloc.md)</ept> and <bpt id=\"p2\">[</bpt>free<ept id=\"p2\">](../../c-runtime-library/reference/free.md)</ept> functions, and the <ph id=\"ph5\">`Alloc_Free`</ph> class uses the Concurrency Runtime <ph id=\"ph6\">`Alloc`</ph> and <ph id=\"ph7\">`Free`</ph> functions.","pos":[1531,1847],"source":" The `new_delete` class uses the global `new` and `delete` operators, the `malloc_free` class uses the C Runtime [malloc](../../c-runtime-library/reference/malloc.md) and [free](../../c-runtime-library/reference/free.md) functions, and the `Alloc_Free` class uses the Concurrency Runtime `Alloc` and `Free` functions."},{"pos":[1865,1884],"content":"concrt-allocators#1"},{"content":"Example","pos":[1996,2003]},{"content":"The following example shows the <ph id=\"ph1\">`swap`</ph> and <ph id=\"ph2\">`reverse_array`</ph> functions.","pos":[2007,2076],"source":"The following example shows the `swap` and `reverse_array` functions."},{"content":"The <ph id=\"ph1\">`swap`</ph> function exchanges the contents of the array at the specified indices.","pos":[2077,2158],"source":" The `swap` function exchanges the contents of the array at the specified indices."},{"content":"It allocates memory from the heap for the temporary variable.","pos":[2159,2220]},{"content":"The <ph id=\"ph1\">`reverse_array`</ph> function creates a large array and computes the time that is required to reverse that array several times in parallel.","pos":[2221,2359],"source":" The `reverse_array` function creates a large array and computes the time that is required to reverse that array several times in parallel."},{"pos":[2377,2396],"content":"concrt-allocators#2"},{"content":"Example","pos":[2508,2515]},{"pos":[2519,2766],"content":"The following example shows the <ph id=\"ph1\">`wmain`</ph> function, which computes the time that is required for the <ph id=\"ph2\">`reverse_array`</ph> function to act on the <ph id=\"ph3\">`new_delete`</ph>, <ph id=\"ph4\">`malloc_free`</ph>, and <ph id=\"ph5\">`Alloc_Free`</ph> types, each of which uses a different memory allocation scheme.","source":"The following example shows the `wmain` function, which computes the time that is required for the `reverse_array` function to act on the `new_delete`, `malloc_free`, and `Alloc_Free` types, each of which uses a different memory allocation scheme."},{"pos":[2784,2803],"content":"concrt-allocators#3"},{"content":"Example","pos":[2915,2922]},{"content":"The complete example follows.","pos":[2926,2955]},{"pos":[2973,2992],"content":"concrt-allocators#4"},{"content":"This example produces the following sample output for a computer that has four processors.","pos":[3102,3192]},{"pos":[3316,3554],"content":"In this example, the type that uses the <ph id=\"ph1\">`Alloc`</ph> and <ph id=\"ph2\">`Free`</ph> functions provides the best memory performance because the <ph id=\"ph3\">`Alloc`</ph> and <ph id=\"ph4\">`Free`</ph> functions are optimized for frequently allocating and freeing blocks of memory from multiple threads.","source":"In this example, the type that uses the `Alloc` and `Free` functions provides the best memory performance because the `Alloc` and `Free` functions are optimized for frequently allocating and freeing blocks of memory from multiple threads."},{"content":"Compiling the Code","pos":[3563,3581]},{"pos":[3585,3777],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`allocators.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `allocators.cpp` and then run the following command in a Visual Studio Command Prompt window."},{"content":"cl.exe /EHsc allocators.cpp","pos":[3786,3813]},{"content":"See Also","pos":[3824,3832]},{"content":"Memory Management Functions","pos":[3837,3864]},{"content":"Alloc Function","pos":[3925,3939]},{"content":"Free Function","pos":[3998,4011]}],"content":"---\ntitle: \"How to: Use Alloc and Free to Improve Memory Performance | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"Alloc and Free, using [Concurrency Runtime]\"\n  - \"Using Alloc and Free [Concurrency Runtime]\"\nms.assetid: e1fab9e8-a97d-4104-bead-e95958db79f9\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Use Alloc and Free to Improve Memory Performance\n\nThis document shows how to use the [concurrency::Alloc](reference/concurrency-namespace-functions.md#alloc) and [concurrency::Free](reference/concurrency-namespace-functions.md#free) functions to improve memory performance. It compares the time that is required to reverse the elements of an array in parallel for three different types that each specify the `new` and `delete` operators.  \n\n  \n The `Alloc` and `Free` functions are most useful when multiple threads frequently call both `Alloc` and `Free`. The runtime holds a separate memory cache for each thread; therefore, the runtime manages memory without the use of locks or memory barriers.  \n  \n## Example  \n The following example shows three types that each specify the `new` and `delete` operators. The `new_delete` class uses the global `new` and `delete` operators, the `malloc_free` class uses the C Runtime [malloc](../../c-runtime-library/reference/malloc.md) and [free](../../c-runtime-library/reference/free.md) functions, and the `Alloc_Free` class uses the Concurrency Runtime `Alloc` and `Free` functions.  \n  \n [!code-cpp[concrt-allocators#1](../../parallel/concrt/codesnippet/cpp/how-to-use-alloc-and-free-to-improve-memory-performance_1.cpp)]  \n  \n## Example  \n The following example shows the `swap` and `reverse_array` functions. The `swap` function exchanges the contents of the array at the specified indices. It allocates memory from the heap for the temporary variable. The `reverse_array` function creates a large array and computes the time that is required to reverse that array several times in parallel.  \n  \n [!code-cpp[concrt-allocators#2](../../parallel/concrt/codesnippet/cpp/how-to-use-alloc-and-free-to-improve-memory-performance_2.cpp)]  \n  \n## Example  \n The following example shows the `wmain` function, which computes the time that is required for the `reverse_array` function to act on the `new_delete`, `malloc_free`, and `Alloc_Free` types, each of which uses a different memory allocation scheme.  \n  \n [!code-cpp[concrt-allocators#3](../../parallel/concrt/codesnippet/cpp/how-to-use-alloc-and-free-to-improve-memory-performance_3.cpp)]  \n  \n## Example  \n The complete example follows.  \n  \n [!code-cpp[concrt-allocators#4](../../parallel/concrt/codesnippet/cpp/how-to-use-alloc-and-free-to-improve-memory-performance_4.cpp)]  \n  \n This example produces the following sample output for a computer that has four processors.  \n  \n```Output  \nTook 2031 ms with new/delete.  \nTook 1672 ms with malloc/free.  \nTook 656 ms with Alloc/Free.  \n```  \n  \n In this example, the type that uses the `Alloc` and `Free` functions provides the best memory performance because the `Alloc` and `Free` functions are optimized for frequently allocating and freeing blocks of memory from multiple threads.  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `allocators.cpp` and then run the following command in a Visual Studio Command Prompt window.  \n  \n **cl.exe /EHsc allocators.cpp**  \n  \n## See Also  \n [Memory Management Functions](../../parallel/concrt/memory-management-functions.md)   \n [Alloc Function](reference/concurrency-namespace-functions.md#alloc)   \n [Free Function](reference/concurrency-namespace-functions.md#free)\n\n"}