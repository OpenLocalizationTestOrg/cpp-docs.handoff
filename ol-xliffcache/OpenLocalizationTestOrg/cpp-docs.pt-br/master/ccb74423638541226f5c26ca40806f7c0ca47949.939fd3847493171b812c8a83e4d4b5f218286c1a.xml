{"nodes":[{"pos":[12,47],"content":"CSimpleArray Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CSimpleArray Class | Microsoft Docs","pos":[0,35]}]},{"content":"CSimpleArray Class","pos":[657,675]},{"content":"This class provides methods for managing a simple array.","pos":[676,732]},{"content":"Syntax","pos":[741,747]},{"content":"Parameters","pos":[856,866]},{"content":"The type of data to store in the array.","pos":[877,916]},{"content":"A trait object, defining the equality test for elements of type <ph id=\"ph1\">`T`</ph>.","pos":[935,1003],"source":" A trait object, defining the equality test for elements of type `T`."},{"content":"Members","pos":[1012,1019]},{"content":"Public Constructors","pos":[1029,1048]},{"content":"Name","pos":[1055,1059]},{"content":"Description","pos":[1060,1071]},{"content":"CSimpleArray::CSimpleArray","pos":[1110,1136]},{"content":"The constructor for the simple array.","pos":[1167,1204]},{"content":"CSimpleArray::~CSimpleArray","pos":[1210,1237]},{"content":"The destructor for the simple array.","pos":[1273,1309]},{"content":"Public Methods","pos":[1320,1334]},{"content":"Name","pos":[1341,1345]},{"content":"Description","pos":[1346,1357]},{"content":"CSimpleArray::Add","pos":[1396,1413]},{"content":"Adds a new element to the array.","pos":[1435,1467]},{"content":"CSimpleArray::Find","pos":[1473,1491]},{"content":"Finds an element in the array.","pos":[1514,1544]},{"content":"CSimpleArray::GetData","pos":[1550,1571]},{"content":"Returns a pointer to the data stored in the array.","pos":[1597,1647]},{"content":"CSimpleArray::GetSize","pos":[1653,1674]},{"content":"Returns the number of elements stored in the array.","pos":[1700,1751]},{"content":"CSimpleArray::Remove","pos":[1757,1777]},{"content":"Removes a given element from the array.","pos":[1802,1841]},{"content":"CSimpleArray::RemoveAll","pos":[1847,1870]},{"content":"Removes all elements from the array.","pos":[1898,1934]},{"content":"CSimpleArray::RemoveAt","pos":[1940,1962]},{"content":"Removes the specified element from the array.","pos":[1989,2034]},{"content":"CSimpleArray::SetAtIndex","pos":[2040,2064]},{"content":"Sets the specified element in the array.","pos":[2093,2133]},{"content":"Public Operators","pos":[2144,2160]},{"content":"Name","pos":[2167,2171]},{"content":"Description","pos":[2172,2183]},{"content":"CSimpleArray::operator","pos":[2222,2244]},{"content":"Retrieves an element from the array.","pos":[2278,2314]},{"content":"CSimpleArray::operator =","pos":[2320,2344]},{"content":"Assignment operator.","pos":[2374,2394]},{"content":"Remarks","pos":[2405,2412]},{"pos":[2431,2512],"content":"provides methods for creating and managing a simple array, of any given type <ph id=\"ph1\">`T`</ph>.","source":" provides methods for creating and managing a simple array, of any given type `T`."},{"content":"The parameter <ph id=\"ph1\">`TEqual`</ph> provides a means of defining an equality function for two elements of type <ph id=\"ph2\">`T`</ph>.","pos":[2519,2621],"source":"The parameter `TEqual` provides a means of defining an equality function for two elements of type `T`."},{"content":"By creating a class similar to <bpt id=\"p1\">[</bpt>CSimpleArrayEqualHelper<ept id=\"p1\">](../../atl/reference/csimplearrayequalhelper-class.md)</ept>, it is possible to alter the behavior of the equality test for any given array.","pos":[2622,2812],"source":" By creating a class similar to [CSimpleArrayEqualHelper](../../atl/reference/csimplearrayequalhelper-class.md), it is possible to alter the behavior of the equality test for any given array."},{"content":"For example, when dealing with an array of pointers, it may be useful to define the equality as depending on the values the pointers reference.","pos":[2813,2956]},{"content":"The default implementation utilizes <bpt id=\"p1\">**</bpt>operator=()<ept id=\"p1\">**</ept>.","pos":[2957,3009],"source":" The default implementation utilizes **operator=()**."},{"content":"Both <ph id=\"ph1\">`CSimpleArray`</ph> and <bpt id=\"p1\">[</bpt>CSimpleMap<ept id=\"p1\">](../../atl/reference/csimplemap-class.md)</ept> are designed for a small number of elements.","pos":[3016,3138],"source":"Both `CSimpleArray` and [CSimpleMap](../../atl/reference/csimplemap-class.md) are designed for a small number of elements."},{"content":"<bpt id=\"p1\">[</bpt>CAtlArray<ept id=\"p1\">](../../atl/reference/catlarray-class.md)</ept> and <bpt id=\"p2\">[</bpt>CAtlMap<ept id=\"p2\">](../../atl/reference/catlmap-class.md)</ept> should be used when the array contains a large number of elements.","pos":[3139,3309],"source":"[CAtlArray](../../atl/reference/catlarray-class.md) and [CAtlMap](../../atl/reference/catlmap-class.md) should be used when the array contains a large number of elements."},{"content":"Requirements","pos":[3318,3330]},{"pos":[3334,3359],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpcoll.h","source":"**Header:** atlsimpcoll.h"},{"content":"Example","pos":[3368,3375]},{"pos":[3390,3410],"content":"NVC_ATL_Utilities#86"},{"pos":[3508,3525],"content":"CSimpleArray::Add"},{"content":"Adds a new element to the array.","pos":[3529,3561]},{"content":"Parameters","pos":[3606,3616]},{"content":"t","pos":[3621,3622]},{"content":"The element to add to the array.","pos":[3627,3659]},{"content":"Return Value","pos":[3669,3681]},{"content":"Returns TRUE if the element is successfully added to the array, FALSE otherwise.","pos":[3685,3765]},{"content":"Example","pos":[3775,3782]},{"pos":[3797,3817],"content":"NVC_ATL_Utilities#87"},{"pos":[3924,3950],"content":"CSimpleArray::CSimpleArray"},{"content":"The constructor for the array object.","pos":[3954,3991]},{"content":"Parameters","pos":[4093,4103]},{"content":"src","pos":[4108,4111]},{"content":"An existing <ph id=\"ph1\">`CSimpleArray`</ph> object.","pos":[4116,4150],"source":" An existing `CSimpleArray` object."},{"content":"Remarks","pos":[4160,4167]},{"pos":[4171,4292],"content":"Initializes the data members, creating a new empty <ph id=\"ph1\">`CSimpleArray`</ph> object, or a copy of an existing <ph id=\"ph2\">`CSimpleArray`</ph> object.","source":"Initializes the data members, creating a new empty `CSimpleArray` object, or a copy of an existing `CSimpleArray` object."},{"pos":[4350,4377],"content":"CSimpleArray::~CSimpleArray"},{"content":"The destructor.","pos":[4381,4396]},{"content":"Remarks","pos":[4436,4443]},{"content":"Frees all allocated resources.","pos":[4447,4477]},{"pos":[4522,4540],"content":"CSimpleArray::Find"},{"content":"Finds an element in the array.","pos":[4544,4574]},{"content":"Parameters","pos":[4625,4635]},{"content":"t","pos":[4640,4641]},{"content":"The element for which to search.","pos":[4646,4678]},{"content":"Return Value","pos":[4688,4700]},{"content":"Returns the index of the found element, or -1 if the element is not found.","pos":[4704,4778]},{"content":"Example","pos":[4788,4795]},{"pos":[4810,4830],"content":"NVC_ATL_Utilities#88"},{"pos":[4932,4953],"content":"CSimpleArray::GetData"},{"content":"Returns a pointer to the data stored in the array.","pos":[4957,5007]},{"content":"Return Value","pos":[5050,5062]},{"content":"Returns a pointer to the data in the array.","pos":[5066,5109]},{"pos":[5157,5178],"content":"CSimpleArray::GetSize"},{"content":"Returns the number of elements stored in the array.","pos":[5182,5233]},{"content":"Return Value","pos":[5277,5289]},{"content":"Returns the number of elements stored in the array.","pos":[5293,5344]},{"pos":[5396,5418],"content":"CSimpleArray::operator"},{"content":"Retrieves an element from the array.","pos":[5427,5463]},{"content":"Parameters","pos":[5515,5525]},{"content":"The element index.","pos":[5541,5559]},{"content":"Return Value","pos":[5569,5581]},{"pos":[5585,5641],"content":"Returns the element of the array referenced by <ph id=\"ph1\">`nIndex`</ph>.","source":"Returns the element of the array referenced by `nIndex`."},{"content":"Example","pos":[5651,5658]},{"pos":[5673,5693],"content":"NVC_ATL_Utilities#89"},{"pos":[5799,5823],"content":"CSimpleArray::operator ="},{"content":"Assignment operator.","pos":[5827,5847]},{"content":"Parameters","pos":[5956,5966]},{"content":"src","pos":[5971,5974]},{"content":"The array to copy.","pos":[5979,5997]},{"content":"Return Value","pos":[6007,6019]},{"pos":[6023,6078],"content":"Returns a pointer to the updated <ph id=\"ph1\">`CSimpleArray`</ph> object.","source":"Returns a pointer to the updated `CSimpleArray` object."},{"content":"Remarks","pos":[6088,6095]},{"pos":[6099,6229],"content":"Copies all elements from the <ph id=\"ph1\">`CSimpleArray`</ph> object referenced by <bpt id=\"p1\">*</bpt>src<ept id=\"p1\">*</ept> into the current array object, replacing all existing data.","source":"Copies all elements from the `CSimpleArray` object referenced by *src* into the current array object, replacing all existing data."},{"content":"Example","pos":[6239,6246]},{"pos":[6261,6281],"content":"NVC_ATL_Utilities#90"},{"pos":[6382,6402],"content":"CSimpleArray::Remove"},{"content":"Removes a given element from the array.","pos":[6406,6445]},{"content":"Parameters","pos":[6493,6503]},{"content":"t","pos":[6508,6509]},{"content":"The element to remove from the array.","pos":[6514,6551]},{"content":"Return Value","pos":[6561,6573]},{"content":"Returns TRUE if the element is found and removed, FALSE otherwise.","pos":[6577,6643]},{"content":"Remarks","pos":[6653,6660]},{"content":"When an element is removed, the remaining elements in the array are renumbered to fill the empty space.","pos":[6664,6767]},{"pos":[6817,6840],"content":"CSimpleArray::RemoveAll"},{"content":"Removes all elements from the array.","pos":[6844,6880]},{"content":"Remarks","pos":[6921,6928]},{"content":"Removes all elements currently stored in the array.","pos":[6932,6983]},{"pos":[7032,7054],"content":"CSimpleArray::RemoveAt"},{"content":"Removes the specified element from the array.","pos":[7058,7103]},{"content":"Parameters","pos":[7155,7165]},{"content":"Index pointing to the element to remove.","pos":[7181,7221]},{"content":"Return Value","pos":[7231,7243]},{"content":"Returns TRUE if the element was removed, FALSE if the index was invalid.","pos":[7247,7319]},{"content":"Remarks","pos":[7329,7336]},{"content":"When an element is removed, the remaining elements in the array are renumbered to fill the empty space.","pos":[7340,7443]},{"pos":[7494,7518],"content":"CSimpleArray::SetAtIndex"},{"content":"Set the specified element in the array.","pos":[7522,7561]},{"content":"Parameters","pos":[7634,7644]},{"content":"The index of the element to change.","pos":[7660,7695]},{"content":"t","pos":[7703,7704]},{"content":"The value to assign to the specified element.","pos":[7709,7754]},{"content":"Return Value","pos":[7764,7776]},{"content":"Returns TRUE if successful, FALSE if the index was not valid.","pos":[7780,7841]},{"content":"See Also","pos":[7850,7858]},{"content":"Class Overview","pos":[7863,7877]}],"content":"---\ntitle: \"CSimpleArray Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CSimpleArray\"\n  - \"ATL::CSimpleArray\"\n  - \"CSimpleArray\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CSimpleArray class\"\nms.assetid: ee0c9f39-b61c-4c18-bc43-4eada21dca3a\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CSimpleArray Class\nThis class provides methods for managing a simple array.  \n  \n## Syntax  \n  \n```\ntemplate <class T, class TEqual = CSimpleArrayEqualHelper<T>>\n    class CSimpleArray\n```  \n  \n#### Parameters  \n `T`  \n The type of data to store in the array.  \n  \n `TEqual`  \n A trait object, defining the equality test for elements of type `T`.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSimpleArray::CSimpleArray](#csimplearray__csimplearray)|The constructor for the simple array.|  \n|[CSimpleArray::~CSimpleArray](#csimplearray___dtorcsimplearray)|The destructor for the simple array.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSimpleArray::Add](#csimplearray__add)|Adds a new element to the array.|  \n|[CSimpleArray::Find](#csimplearray__find)|Finds an element in the array.|  \n|[CSimpleArray::GetData](#csimplearray__getdata)|Returns a pointer to the data stored in the array.|  \n|[CSimpleArray::GetSize](#csimplearray__getsize)|Returns the number of elements stored in the array.|  \n|[CSimpleArray::Remove](#csimplearray__remove)|Removes a given element from the array.|  \n|[CSimpleArray::RemoveAll](#csimplearray__removeall)|Removes all elements from the array.|  \n|[CSimpleArray::RemoveAt](#csimplearray__removeat)|Removes the specified element from the array.|  \n|[CSimpleArray::SetAtIndex](#csimplearray__setatindex)|Sets the specified element in the array.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSimpleArray::operator\\[\\]](#csimplearray__operator_at)|Retrieves an element from the array.|  \n|[CSimpleArray::operator =](#csimplearray__operator_eq)|Assignment operator.|  \n\n  \n## Remarks  \n `CSimpleArray` provides methods for creating and managing a simple array, of any given type `T`.  \n  \n The parameter `TEqual` provides a means of defining an equality function for two elements of type `T`. By creating a class similar to [CSimpleArrayEqualHelper](../../atl/reference/csimplearrayequalhelper-class.md), it is possible to alter the behavior of the equality test for any given array. For example, when dealing with an array of pointers, it may be useful to define the equality as depending on the values the pointers reference. The default implementation utilizes **operator=()**.  \n  \n Both `CSimpleArray` and [CSimpleMap](../../atl/reference/csimplemap-class.md) are designed for a small number of elements. [CAtlArray](../../atl/reference/catlarray-class.md) and [CAtlMap](../../atl/reference/catlmap-class.md) should be used when the array contains a large number of elements.  \n  \n## Requirements  \n **Header:** atlsimpcoll.h  \n  \n## Example  \n [!code-cpp[NVC_ATL_Utilities#86](../../atl/codesnippet/cpp/csimplearray-class_1.cpp)]  \n  \n##  <a name=\"csimplearray__add\"></a>  CSimpleArray::Add  \n Adds a new element to the array.  \n  \n```\nBOOL Add(const T& t);\n```  \n  \n### Parameters  \n *t*  \n The element to add to the array.  \n  \n### Return Value  \n Returns TRUE if the element is successfully added to the array, FALSE otherwise.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#87](../../atl/codesnippet/cpp/csimplearray-class_2.cpp)]  \n  \n##  <a name=\"csimplearray__csimplearray\"></a>  CSimpleArray::CSimpleArray  \n The constructor for the array object.  \n  \n```\nCSimpleArray(\n    const CSimpleArray<T, TEqual>& src);\n\n    CSimpleArray();\n```     \n  \n### Parameters  \n *src*  \n An existing `CSimpleArray` object.  \n  \n### Remarks  \n Initializes the data members, creating a new empty `CSimpleArray` object, or a copy of an existing `CSimpleArray` object.  \n  \n##  <a name=\"csimplearray___dtorcsimplearray\"></a>  CSimpleArray::~CSimpleArray  \n The destructor.  \n  \n```\n~CSimpleArray();\n```  \n  \n### Remarks  \n Frees all allocated resources.  \n  \n##  <a name=\"csimplearray__find\"></a>  CSimpleArray::Find  \n Finds an element in the array.  \n  \n```\nint Find(const T& t) const;\n```  \n  \n### Parameters  \n *t*  \n The element for which to search.  \n  \n### Return Value  \n Returns the index of the found element, or -1 if the element is not found.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#88](../../atl/codesnippet/cpp/csimplearray-class_3.cpp)]  \n  \n##  <a name=\"csimplearray__getdata\"></a>  CSimpleArray::GetData  \n Returns a pointer to the data stored in the array.  \n  \n```\nT* GetData() const;\n```  \n  \n### Return Value  \n Returns a pointer to the data in the array.  \n  \n##  <a name=\"csimplearray__getsize\"></a>  CSimpleArray::GetSize  \n Returns the number of elements stored in the array.  \n  \n```\nint GetSize() const;\n```  \n  \n### Return Value  \n Returns the number of elements stored in the array.  \n  \n##  <a name=\"csimplearray__operator_at\"></a>  CSimpleArray::operator \\[\\]  \n Retrieves an element from the array.  \n  \n```\nT& operator[](int   nindex);\n```  \n  \n### Parameters  \n `nIndex`  \n The element index.  \n  \n### Return Value  \n Returns the element of the array referenced by `nIndex`.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#89](../../atl/codesnippet/cpp/csimplearray-class_4.cpp)]  \n  \n##  <a name=\"csimplearray__operator_eq\"></a>  CSimpleArray::operator =  \n Assignment operator.  \n  \n```\nCSimpleArray<T,\n    TEqual>\n& operator=(\n    const CSimpleArray<T,\n    TEqual>& src);\n```  \n  \n### Parameters  \n *src*  \n The array to copy.  \n  \n### Return Value  \n Returns a pointer to the updated `CSimpleArray` object.  \n  \n### Remarks  \n Copies all elements from the `CSimpleArray` object referenced by *src* into the current array object, replacing all existing data.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Utilities#90](../../atl/codesnippet/cpp/csimplearray-class_5.cpp)]  \n  \n##  <a name=\"csimplearray__remove\"></a>  CSimpleArray::Remove  \n Removes a given element from the array.  \n  \n```\nBOOL Remove(const T& t);\n```  \n  \n### Parameters  \n *t*  \n The element to remove from the array.  \n  \n### Return Value  \n Returns TRUE if the element is found and removed, FALSE otherwise.  \n  \n### Remarks  \n When an element is removed, the remaining elements in the array are renumbered to fill the empty space.  \n  \n##  <a name=\"csimplearray__removeall\"></a>  CSimpleArray::RemoveAll  \n Removes all elements from the array.  \n  \n```\nvoid RemoveAll();\n```  \n  \n### Remarks  \n Removes all elements currently stored in the array.  \n  \n##  <a name=\"csimplearray__removeat\"></a>  CSimpleArray::RemoveAt  \n Removes the specified element from the array.  \n  \n```\nBOOL RemoveAt(int   nIndex);\n```  \n  \n### Parameters  \n `nIndex`  \n Index pointing to the element to remove.  \n  \n### Return Value  \n Returns TRUE if the element was removed, FALSE if the index was invalid.  \n  \n### Remarks  \n When an element is removed, the remaining elements in the array are renumbered to fill the empty space.  \n  \n##  <a name=\"csimplearray__setatindex\"></a>  CSimpleArray::SetAtIndex  \n Set the specified element in the array.  \n  \n```\nBOOL SetAtIndex(\n    int nIndex,\n    const T& t);\n```  \n  \n### Parameters  \n `nIndex`  \n The index of the element to change.  \n  \n *t*  \n The value to assign to the specified element.  \n  \n### Return Value  \n Returns TRUE if successful, FALSE if the index was not valid.  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)\n"}