<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3542d4a47abc3616c00360f9885761d08de5e884</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\ostream-iterator-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1e9a8188a4d282e2d4011abeefe2a57daae6475</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bba322cd4034d6103482e71c7dce471f2a2c7c50</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ostream_iterator Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ostream_iterator Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class ostream_iterator describes an output iterator object that writes successive elements onto the output stream with the extraction <bpt id="p1">**</bpt>operator &lt;&lt;<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type of object to be inserted into the output stream.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type that represents the character type for the <ph id="ph1">`ostream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This argument is optional and the default value is <ph id="ph1">`char`</ph><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The type that represents the character type for the <ph id="ph1">`ostream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This argument is optional and the default value is <ph id="ph1">`char_traits`\&lt;</ph> <bpt id="p1">*</bpt>CharType&gt;.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The ostream_iterator class must satisfy the requirements for an output iterator.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Algorithms can be written directly to output streams using an <ph id="ph1">`ostream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>ostream_iterator</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Constructs an <ph id="ph1">`ostream_iterator`</ph> that is initialized and delimited to write to the output stream.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>char_type</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A type that provides for the character type of the <ph id="ph1">`ostream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>ostream_type</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A type that provides for the stream type of the <ph id="ph1">`ostream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>traits_type</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A type that provides for the character traits type of the <ph id="ph1">`ostream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>operator*</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Dereferencing operator used to implement the output iterator expression * <ph id="ph1">`i` = `x`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>operator++</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A nonfunctional increment operator that returns an <ph id="ph1">`ostream_iterator`</ph> to the same object it addressed before the operation was called.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>operator=</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Assignment operator used to implement the output iterator expression * <ph id="ph1">`i` = `x`</ph> for writing to an output stream.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>iterator&gt;</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>ostream_iterator::char_type</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A type that provides for the character type of the iterator.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>ostream_iterator::operator*</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Dereferencing operator used to implement the output iterator expression <ph id="ph1">\*</ph> <bpt id="p1">*</bpt>ii<ept id="p1">*</ept><ph id="ph2"> = </ph><bpt id="p2">*</bpt>x<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A reference to the <ph id="ph1">`ostream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The requirements for an output iterator that the <ph id="ph1">`ostream_iterator`</ph> must satisfy require only the expression <ph id="ph2">\*</ph> <bpt id="p1">*</bpt>ii<ept id="p1">*</ept><ph id="ph3"> = </ph><bpt id="p2">*</bpt>t<ept id="p2">*</ept> be valid and says nothing about the <bpt id="p3">**</bpt>operator<ept id="p3">**</ept> or the <ph id="ph4">`operator=`</ph> on their own.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The member operator in this implementation returns <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>ostream_iterator::operator++</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A nonfunctional increment operator that returns an <ph id="ph1">`ostream_iterator`</ph> to the same object it addressed before the operation was called.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A reference to the <ph id="ph1">`ostream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These member operators both return <bpt id="p1">**</bpt><ph id="ph1">\*</ph>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>ostream_iterator::operator=</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Assignment operator used to implement the output_iterator expression * <ph id="ph1">`i` = `x`</ph> for writing to an output stream.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The value of the object of type <ph id="ph1">`Type`</ph> to be inserted into the output stream.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The operator inserts <ph id="ph1">`val`</ph> into the output stream associated with the object, followed by the delimiter specified in the <bpt id="p1">[</bpt>ostream_iterator constructor<ept id="p1">](#ostream_iterator__ostream_iterator)</ept> (if any), and then returns a reference to the <ph id="ph2">`ostream_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The requirements for an output iterator that the <ph id="ph1">`ostream_iterator`</ph> must satisfy require only the expression * <ph id="ph2">`ii` = `t`</ph> be valid and says nothing about the operator or the operator= on their own.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This member operator returns <ph id="ph1">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>ostream_iterator::ostream_iterator</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Constructs an <ph id="ph1">`ostream_iterator`</ph> that is initialized and delimited to write to the output stream.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The output stream of type <bpt id="p1">[</bpt>ostream_iterator::ostream_type<ept id="p1">](#ostream_iterator__ostream_type)</ept> to be iterated over.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The delimiter that is inserted into the output stream between values.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The first constructor initializes the output stream pointer with <ph id="ph1">`&amp;_Ostr`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The delimiter string pointer designates an empty string.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The second constructor initializes the output stream pointer with <ph id="ph1">`&amp;_Ostr`</ph> and the delimiter string pointer with <ph id="ph2">`_Delimiter`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>ostream_iterator::ostream_type</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A type that provides for the stream type of the iterator.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The type is a synonym for <bpt id="p1">[</bpt>basic_ostream<ept id="p1">](../standard-library/basic-ostream-class.md)</ept><ph id="ph1">&lt; `CharType`</ph>, <ph id="ph2">`Traits`</ph>&gt;, a stream class of the iostream hierarchy that defines objects that can be used for writing.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ostream_iterator<ept id="p1">](#ostream_iterator__ostream_iterator)</ept> for an example of how to declare and use <ph id="ph1">`ostream_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>ostream_iterator::traits_type</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A type that provides for the character traits type of the iterator.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>Traits<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>iterator&gt;</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>C++ Standard Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>