{"nodes":[{"pos":[12,55],"content":"&lt;exception&gt; typedefs | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"exception<ph id=\"ph1\">&amp;gt;</ph> typedefs | Microsoft Docs","pos":[4,43],"source":"exception&gt; typedefs | Microsoft Docs"}]},{"content":"exception<ph id=\"ph1\">&amp;gt;</ph> typedefs","pos":[261,283],"source":"exception&gt; typedefs"},{"content":"exception_ptr","pos":[303,316]},{"content":"terminate_handler","pos":[335,352]},{"content":"unexpected_handler","pos":[375,393]},{"pos":[456,469],"content":"exception_ptr"},{"content":"A type that describes a pointer to an exception.","pos":[473,521]},{"content":"Remarks","pos":[582,589]},{"pos":[593,674],"content":"An unspecified internal class that is used to implement the <ph id=\"ph1\">`exception_ptr`</ph> type.","source":"An unspecified internal class that is used to implement the `exception_ptr` type."},{"content":"Use an <ph id=\"ph1\">`exception_ptr`</ph> object to reference the current exception or an instance of a user-specified exception.","pos":[681,791],"source":"Use an `exception_ptr` object to reference the current exception or an instance of a user-specified exception."},{"content":"In the Microsoft implementation, an exception is represented by an <bpt id=\"p1\">[</bpt>EXCEPTION_RECORD<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa363082)</ept> structure.","pos":[792,948],"source":" In the Microsoft implementation, an exception is represented by an [EXCEPTION_RECORD](http://msdn.microsoft.com/library/windows/desktop/aa363082) structure."},{"content":"Each <ph id=\"ph1\">`exception_ptr`</ph> object includes an exception reference field that points to a copy of the <ph id=\"ph2\">`EXCEPTION_RECORD`</ph> structure that represents the exception.","pos":[949,1103],"source":" Each `exception_ptr` object includes an exception reference field that points to a copy of the `EXCEPTION_RECORD` structure that represents the exception."},{"content":"When you declare an <ph id=\"ph1\">`exception_ptr`</ph> variable, the variable is not associated with any exception.","pos":[1110,1206],"source":"When you declare an `exception_ptr` variable, the variable is not associated with any exception."},{"content":"That is, its exception reference field is NULL.","pos":[1207,1254]},{"content":"Such an <ph id=\"ph1\">`exception_ptr`</ph> object is called a <bpt id=\"p1\">*</bpt>null exception_ptr<ept id=\"p1\">*</ept>.","pos":[1255,1319],"source":" Such an `exception_ptr` object is called a *null exception_ptr*."},{"content":"Use the <ph id=\"ph1\">`current_exception`</ph> or <ph id=\"ph2\">`make_exception_ptr`</ph> function to assign an exception to an <ph id=\"ph3\">`exception_ptr`</ph> object.","pos":[1326,1439],"source":"Use the `current_exception` or `make_exception_ptr` function to assign an exception to an `exception_ptr` object."},{"content":"When you assign an exception to an <ph id=\"ph1\">`exception_ptr`</ph> variable, the variable's exception reference field points to a copy of the exception.","pos":[1440,1576],"source":" When you assign an exception to an `exception_ptr` variable, the variable's exception reference field points to a copy of the exception."},{"content":"If there is insufficient memory to copy the exception, the exception reference field points to a copy of a <bpt id=\"p1\">[</bpt>std::bad_alloc<ept id=\"p1\">](../standard-library/bad-alloc-class.md)</ept> exception.","pos":[1577,1751],"source":" If there is insufficient memory to copy the exception, the exception reference field points to a copy of a [std::bad_alloc](../standard-library/bad-alloc-class.md) exception."},{"content":"If the <ph id=\"ph1\">`current_exception`</ph> or <ph id=\"ph2\">`make_exception_ptr`</ph> function cannot copy the exception for any other reason, the function calls the <bpt id=\"p1\">**</bpt>terminate<ept id=\"p1\">**</ept> CRT function to exit the current process.","pos":[1752,1938],"source":" If the `current_exception` or `make_exception_ptr` function cannot copy the exception for any other reason, the function calls the **terminate** CRT function to exit the current process."},{"content":"Despite its name, an <ph id=\"ph1\">`exception_ptr`</ph> object is not itself a pointer.","pos":[1945,2013],"source":"Despite its name, an `exception_ptr` object is not itself a pointer."},{"content":"It does not obey pointer semantics and cannot be used with the pointer member access ( <ph id=\"ph1\">`-&gt;`</ph>) or indirection (*) operators.","pos":[2014,2136],"source":" It does not obey pointer semantics and cannot be used with the pointer member access ( `->`) or indirection (*) operators."},{"content":"The <ph id=\"ph1\">`exception_ptr`</ph> object has no public data members or member functions.","pos":[2137,2211],"source":" The `exception_ptr` object has no public data members or member functions."},{"content":"Comparisons:","pos":[2220,2232]},{"content":"You can use the equal ( <ph id=\"ph1\">`==`</ph>) and not-equal ( <ph id=\"ph2\">`!=`</ph>) operators to compare two <ph id=\"ph3\">`exception_ptr`</ph> objects.","pos":[2241,2342],"source":"You can use the equal ( `==`) and not-equal ( `!=`) operators to compare two `exception_ptr` objects."},{"content":"The operators do not compare the binary value (bit pattern) of the <ph id=\"ph1\">`EXCEPTION_RECORD`</ph> structures that represent the exceptions.","pos":[2343,2470],"source":" The operators do not compare the binary value (bit pattern) of the `EXCEPTION_RECORD` structures that represent the exceptions."},{"content":"Instead, the operators compare the addresses in the exception reference field of the <ph id=\"ph1\">`exception_ptr`</ph> objects.","pos":[2471,2580],"source":" Instead, the operators compare the addresses in the exception reference field of the `exception_ptr` objects."},{"content":"Consequently, a null <ph id=\"ph1\">`exception_ptr`</ph> and the NULL value compare as equal.","pos":[2581,2654],"source":" Consequently, a null `exception_ptr` and the NULL value compare as equal."},{"pos":[2698,2715],"content":"terminate_handler"},{"pos":[2719,2804],"content":"The type describes a pointer to a function suitable for use as a <ph id=\"ph1\">`terminate_handler`</ph>.","source":"The type describes a pointer to a function suitable for use as a `terminate_handler`."},{"content":"Remarks","pos":[2864,2871]},{"content":"The type describes a pointer to a function suitable for use as a terminate handler.","pos":[2875,2958]},{"content":"Example","pos":[2968,2975]},{"pos":[2980,3107],"content":"See <bpt id=\"p1\">[</bpt>set_terminate<ept id=\"p1\">](../standard-library/exception-functions.md#set_terminate)</ept> for an example of the use of <ph id=\"ph1\">`terminate_handler`</ph>.","source":"See [set_terminate](../standard-library/exception-functions.md#set_terminate) for an example of the use of `terminate_handler`."},{"pos":[3152,3170],"content":"unexpected_handler"},{"pos":[3174,3261],"content":"The type describes a pointer to a function suitable for use as an <ph id=\"ph1\">`unexpected_handler`</ph>.","source":"The type describes a pointer to a function suitable for use as an `unexpected_handler`."},{"content":"Example","pos":[3322,3329]},{"pos":[3334,3464],"content":"See <bpt id=\"p1\">[</bpt>set_unexpected<ept id=\"p1\">](../standard-library/exception-functions.md#set_unexpected)</ept> for an example of the use of <ph id=\"ph1\">`unexpected_handler`</ph>.","source":"See [set_unexpected](../standard-library/exception-functions.md#set_unexpected) for an example of the use of `unexpected_handler`."},{"content":"See Also","pos":[3473,3481]},{"content":"exception&gt;","pos":[3488,3498],"source":"exception>"}],"content":"---\ntitle: \"&lt;exception&gt; typedefs | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 2a338480-35e2-46f7-b223-52d4e84a5768\ncaps.latest.revision: 7\nmanager: \"ghogen\"\n---\n# &lt;exception&gt; typedefs\n||||  \n|-|-|-|  \n|[exception_ptr](#exception_ptr)|[terminate_handler](#terminate_handler)|[unexpected_handler](#unexpected_handler)|  \n  \n##  <a name=\"exception_ptr\"></a>  exception_ptr  \n A type that describes a pointer to an exception.  \n  \n```cpp\ntypedef unspecified exception_ptr;\n```  \n  \n### Remarks  \n An unspecified internal class that is used to implement the `exception_ptr` type.  \n  \n Use an `exception_ptr` object to reference the current exception or an instance of a user-specified exception. In the Microsoft implementation, an exception is represented by an [EXCEPTION_RECORD](http://msdn.microsoft.com/library/windows/desktop/aa363082) structure. Each `exception_ptr` object includes an exception reference field that points to a copy of the `EXCEPTION_RECORD` structure that represents the exception.  \n  \n When you declare an `exception_ptr` variable, the variable is not associated with any exception. That is, its exception reference field is NULL. Such an `exception_ptr` object is called a *null exception_ptr*.  \n  \n Use the `current_exception` or `make_exception_ptr` function to assign an exception to an `exception_ptr` object. When you assign an exception to an `exception_ptr` variable, the variable's exception reference field points to a copy of the exception. If there is insufficient memory to copy the exception, the exception reference field points to a copy of a [std::bad_alloc](../standard-library/bad-alloc-class.md) exception. If the `current_exception` or `make_exception_ptr` function cannot copy the exception for any other reason, the function calls the **terminate** CRT function to exit the current process.  \n  \n Despite its name, an `exception_ptr` object is not itself a pointer. It does not obey pointer semantics and cannot be used with the pointer member access ( `->`) or indirection (*) operators. The `exception_ptr` object has no public data members or member functions.  \n  \n **Comparisons:**  \n  \n You can use the equal ( `==`) and not-equal ( `!=`) operators to compare two `exception_ptr` objects. The operators do not compare the binary value (bit pattern) of the `EXCEPTION_RECORD` structures that represent the exceptions. Instead, the operators compare the addresses in the exception reference field of the `exception_ptr` objects. Consequently, a null `exception_ptr` and the NULL value compare as equal.  \n  \n##  <a name=\"terminate_handler\"></a>  terminate_handler  \n The type describes a pointer to a function suitable for use as a `terminate_handler`.  \n  \n```\ntypedef void (*terminate_handler)();\n```  \n  \n### Remarks  \n The type describes a pointer to a function suitable for use as a terminate handler.  \n  \n### Example  \n  See [set_terminate](../standard-library/exception-functions.md#set_terminate) for an example of the use of `terminate_handler`.  \n  \n##  <a name=\"unexpected_handler\"></a>  unexpected_handler  \n The type describes a pointer to a function suitable for use as an `unexpected_handler`.  \n  \n```\ntypedef void (*unexpected_handler)();\n```  \n  \n### Example  \n  See [set_unexpected](../standard-library/exception-functions.md#set_unexpected) for an example of the use of `unexpected_handler`.  \n  \n## See Also  \n [\\<exception>](../standard-library/exception.md)\n\n\n\n"}