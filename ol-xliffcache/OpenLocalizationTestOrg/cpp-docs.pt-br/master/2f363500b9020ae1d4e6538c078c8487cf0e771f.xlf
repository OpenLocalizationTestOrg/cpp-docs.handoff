<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f363500b9020ae1d4e6538c078c8487cf0e771f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\postfix-increment-and-decrement-operators-increment-and-decrement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc01567c7f384c2b2ce5492a5d7b26f379faf87b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8a70bd8ec9bcc1187044dc72c517d2c0d02fac1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Postfix Increment and Decrement Operators: ++ and -- | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Postfix Increment and Decrement Operators: ++ and --</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>C++ provides prefix and postfix increment and decrement operators; this section describes only the postfix increment and decrement operators.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>Prefix Increment and Decrement Operators<ept id="p1">](../cpp/prefix-increment-and-decrement-operators-increment-and-decrement.md)</ept>.) The difference between the two is that in the postfix notation, the operator appears after <bpt id="p2">*</bpt>postfix-expression<ept id="p2">*</ept>, whereas in the prefix notation, the operator appears before <bpt id="p3">*</bpt>expression.<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example shows a postfix-increment operator:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The effect of applying the postfix increment operator (<ph id="ph1">`++`</ph>) is that the operand's value is increased by one unit of the appropriate type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Similarly, the effect of applying the postfix decrement operator (<bpt id="p1">**</bpt>––<ept id="p1">**</ept>) is that the operand's value is decreased by one unit of the appropriate type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It is important to note that a postfix increment or decrement expression evaluates to the value of the expression <bpt id="p1">**</bpt>prior to<ept id="p1">**</ept> application of the respective operator.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The increment or decrement operation occurs <bpt id="p1">**</bpt>after<ept id="p1">**</ept> the operand is evaluated.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This issue arises only when the postfix increment or decrement operation occurs in the context of a larger expression.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When a postfix operator is applied to a function argument, the value of the argument is not guaranteed to be incremented or decremented before it is passed to the function.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See section 1.9.17 in the C++ standard for more information.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Applying the postfix increment operator to a pointer to an array of objects of type <bpt id="p1">**</bpt>long<ept id="p1">**</ept> actually adds four to the internal representation of the pointer.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This behavior causes the pointer, which previously referred to the <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th element of the array, to refer to the (<bpt id="p2">*</bpt>n<ept id="p2">*</ept>+1)th element.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The operands to postfix increment and postfix decrement operators must be modifiable (not <bpt id="p1">**</bpt>const<ept id="p1">**</ept>) l-values of arithmetic or pointer type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The type of the result is the same as that of the <bpt id="p1">*</bpt>postfix-expression<ept id="p1">*</ept>, but it is no longer an l-value.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The operand of a postfix increment operator may also be of type <ph id="ph1">`bool`</ph>, in which case the operand is evaluated and then set to <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The operand of a postfix decrement operator cannot be of type <ph id="ph1">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following code illustrates the postfix increment operator:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Postincrement and postdecrement operations on enumerated types are not supported:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Postfix Expressions</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C++ Built-in Operators, Precedence and Associativity</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>C Postfix Increment and Decrement Operators</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>