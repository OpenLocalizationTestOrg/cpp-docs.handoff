{"nodes":[{"pos":[12,51],"content":"CMyProviderWindowsFile | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMyProviderWindowsFile | Microsoft Docs","pos":[0,39]}]},{"content":"CMyProviderWindowsFile","pos":[678,700]},{"content":"The wizard creates a class to contain one row of data; in this case, it is called <ph id=\"ph1\">`CMyProviderWindowsFile`</ph>.","pos":[701,808],"source":"The wizard creates a class to contain one row of data; in this case, it is called `CMyProviderWindowsFile`."},{"content":"The following code for <ph id=\"ph1\">`CMyProviderWindowsFile`</ph> is wizard generated and lists all the files in a directory by using the <bpt id=\"p1\">**</bpt>WIN32_FIND_DATA<ept id=\"p1\">**</ept> structure.","pos":[809,959],"source":" The following code for `CMyProviderWindowsFile` is wizard generated and lists all the files in a directory by using the **WIN32_FIND_DATA** structure."},{"content":"inherits from the <bpt id=\"p1\">**</bpt>WIN32_FIND_DATA<ept id=\"p1\">**</ept> structure:","pos":[985,1033],"source":" inherits from the **WIN32_FIND_DATA** structure:"},{"content":"is called the <bpt id=\"p1\">[</bpt>user record class<ept id=\"p1\">](../../data/oledb/user-record.md)</ept> because it also contains a map describing the columns in the provider's rowset.","pos":[1647,1793],"source":" is called the [user record class](../../data/oledb/user-record.md) because it also contains a map describing the columns in the provider's rowset."},{"content":"The provider column map contains one entry for each field in the rowset using the PROVIDER_COLUMN_ENTRY macros.","pos":[1794,1905]},{"content":"The macros specify column name, ordinal, and offset to a structure entry.","pos":[1906,1979]},{"content":"The provider column entries in the above code contain offsets into the <bpt id=\"p1\">**</bpt>WIN32_FIND_DATA<ept id=\"p1\">**</ept> structure.","pos":[1980,2081],"source":" The provider column entries in the above code contain offsets into the **WIN32_FIND_DATA** structure."},{"content":"When the consumer calls <bpt id=\"p1\">**</bpt>IRowset::GetData<ept id=\"p1\">**</ept>, data is transferred in one contiguous buffer.","pos":[2082,2173],"source":" When the consumer calls **IRowset::GetData**, data is transferred in one contiguous buffer."},{"content":"Rather than making you do pointer arithmetic, the map allows you to specify a data member.","pos":[2174,2264]},{"content":"The <ph id=\"ph1\">`CMyProviderRowset`</ph> class also contains the <ph id=\"ph2\">`Execute`</ph> method.","pos":[2271,2336],"source":"The `CMyProviderRowset` class also contains the `Execute` method."},{"content":"is what actually reads the data in from the native source.","pos":[2347,2405]},{"content":"The following code shows the wizard-generated <ph id=\"ph1\">`Execute`</ph> method.","pos":[2406,2469],"source":" The following code shows the wizard-generated `Execute` method."},{"content":"The function uses the Win32 <bpt id=\"p1\">**</bpt>FindFirstFile<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`FindNextFile`</ph> APIs to retrieve information about the files in the directory and place them in instances of the <ph id=\"ph2\">`CMyProviderWindowsFile`</ph> class.","pos":[2470,2663],"source":" The function uses the Win32 **FindFirstFile** and `FindNextFile` APIs to retrieve information about the files in the directory and place them in instances of the `CMyProviderWindowsFile` class."},{"content":"The directory to search is represented by <ph id=\"ph1\">`m_strCommandText`</ph>; this contains the text represented by the <ph id=\"ph2\">`ICommandText`</ph> interface in the command object.","pos":[3491,3642],"source":"The directory to search is represented by `m_strCommandText`; this contains the text represented by the `ICommandText` interface in the command object."},{"content":"If no directory is specified, it uses the current directory.","pos":[3643,3703]},{"content":"The method creates one entry for each file (corresponding to a row) and places it in the <bpt id=\"p1\">**</bpt>m_rgRowData<ept id=\"p1\">**</ept> data member.","pos":[3710,3827],"source":"The method creates one entry for each file (corresponding to a row) and places it in the **m_rgRowData** data member."},{"content":"The <ph id=\"ph1\">`CRowsetImpl`</ph> class defines the <bpt id=\"p1\">**</bpt>m_rgRowData<ept id=\"p1\">**</ept> data member.","pos":[3828,3892],"source":" The `CRowsetImpl` class defines the **m_rgRowData** data member."},{"content":"The data in this array represents the entire table and is used throughout the templates.","pos":[3893,3981]},{"content":"See Also","pos":[3990,3998]},{"content":"Provider Wizard-Generated Files","pos":[4003,4034]}],"content":"---\ntitle: \"CMyProviderWindowsFile | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"cmyproviderwindowsfile\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMyProviderWindowsFile class\"\n  - \"OLE DB providers, wizard-generated files\"\nms.assetid: 0e9e72ac-1e1e-445f-a7ac-690c20031f9d\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMyProviderWindowsFile\nThe wizard creates a class to contain one row of data; in this case, it is called `CMyProviderWindowsFile`. The following code for `CMyProviderWindowsFile` is wizard generated and lists all the files in a directory by using the **WIN32_FIND_DATA** structure. `CMyProviderWindowsFile` inherits from the **WIN32_FIND_DATA** structure:  \n  \n```  \n/////////////////////////////////////////////////////////////////////  \n// MyProviderRS.H  \n  \nclass CMyProviderWindowsFile:   \n   public WIN32_FIND_DATA  \n{  \npublic:  \nBEGIN_PROVIDER_COLUMN_MAP(CMyProviderWindowsFile)  \n   PROVIDER_COLUMN_ENTRY(\"FileAttributes\", 1, dwFileAttributes)  \n   PROVIDER_COLUMN_ENTRY(\"FileSizeHigh\", 2, nFileSizeHigh)  \n   PROVIDER_COLUMN_ENTRY(\"FileSizeLow\", 3, nFileSizeLow)  \n   PROVIDER_COLUMN_ENTRY_STR(\"FileName\", 4, cFileName)  \n   PROVIDER_COLUMN_ENTRY_STR(\"AltFileName\", 5, cAlternateFileName)  \nEND_PROVIDER_COLUMN_MAP()  \n};  \n```  \n  \n `CMyProviderWindowsFile` is called the [user record class](../../data/oledb/user-record.md) because it also contains a map describing the columns in the provider's rowset. The provider column map contains one entry for each field in the rowset using the PROVIDER_COLUMN_ENTRY macros. The macros specify column name, ordinal, and offset to a structure entry. The provider column entries in the above code contain offsets into the **WIN32_FIND_DATA** structure. When the consumer calls **IRowset::GetData**, data is transferred in one contiguous buffer. Rather than making you do pointer arithmetic, the map allows you to specify a data member.  \n  \n The `CMyProviderRowset` class also contains the `Execute` method. `Execute` is what actually reads the data in from the native source. The following code shows the wizard-generated `Execute` method. The function uses the Win32 **FindFirstFile** and `FindNextFile` APIs to retrieve information about the files in the directory and place them in instances of the `CMyProviderWindowsFile` class.  \n  \n```  \n/////////////////////////////////////////////////////////////////////  \n// MyProviderRS.H  \n  \nHRESULT Execute(DBPARAMS * pParams, LONG* pcRowsAffected)  \n{  \n   USES_CONVERSION;  \n   BOOL bFound = FALSE;  \n   HANDLE hFile;  \n   LPTSTR  szDir = (m_strCommandText == _T(\"\")) ? _T(\"*.*\") :  \n       OLE2T(m_strCommandText);  \n   CMyProviderWindowsFile wf;  \n   hFile = FindFirstFile(szDir, &wf);  \n   if (hFile == INVALID_HANDLE_VALUE)  \n      return DB_E_ERRORSINCOMMAND;  \n   LONG cFiles = 1;  \n   BOOL bMoreFiles = TRUE;  \n   while (bMoreFiles)  \n   {  \n      if (!m_rgRowData.Add(wf))  \n         return E_OUTOFMEMORY;  \n      bMoreFiles = FindNextFile(hFile, &wf);  \n      cFiles++;  \n   }  \n   FindClose(hFile);  \n   if (pcRowsAffected != NULL)  \n      *pcRowsAffected = cFiles;  \n   return S_OK;  \n}  \n```  \n  \n The directory to search is represented by `m_strCommandText`; this contains the text represented by the `ICommandText` interface in the command object. If no directory is specified, it uses the current directory.  \n  \n The method creates one entry for each file (corresponding to a row) and places it in the **m_rgRowData** data member. The `CRowsetImpl` class defines the **m_rgRowData** data member. The data in this array represents the entire table and is used throughout the templates.  \n  \n## See Also  \n [Provider Wizard-Generated Files](../../data/oledb/provider-wizard-generated-files.md)"}