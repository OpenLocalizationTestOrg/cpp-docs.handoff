{"nodes":[{"pos":[12,39],"content":"db_command | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"db_command | Microsoft Docs","pos":[0,27]}]},{"content":"db_command","pos":[645,655]},{"content":"Creates an OLE DB command.","pos":[656,682]},{"content":"Syntax","pos":[691,697]},{"content":"Parameters","pos":[847,857]},{"content":"A command string containing the text of an OLE DB command.","pos":[874,932]},{"content":"A simple example is:","pos":[933,953]},{"pos":[1031,1066],"content":"The <bpt id=\"p1\">*</bpt>command<ept id=\"p1\">*</ept> syntax is as follows:","source":"The *command* syntax is as follows:"},{"pos":[1234,1284],"content":"A <bpt id=\"p1\">*</bpt>binding parameter block<ept id=\"p1\">*</ept> is defined as follows:","source":"A *binding parameter block* is defined as follows:"},{"pos":[1291,1362],"content":"<bpt id=\"p1\">**</bpt>([<ept id=\"p1\">**</ept> <ph id=\"ph1\">`bindtype`</ph> <bpt id=\"p2\">**</bpt>]<ept id=\"p2\">**</ept> <bpt id=\"p3\">*</bpt>szVar1<ept id=\"p3\">*</ept> [<bpt id=\"p4\">*</bpt>, szVar2<ept id=\"p4\">*</ept> [, <bpt id=\"p5\">*</bpt>nVar3<ept id=\"p5\">*</ept> [, ...]]] <bpt id=\"p6\">**</bpt>)<ept id=\"p6\">**</ept>","source":"**([** `bindtype` **]** *szVar1* [*, szVar2* [, *nVar3* [, ...]]] **)**"},{"content":"where:","pos":[1369,1375]},{"pos":[1382,1430],"content":"<bpt id=\"p1\">**</bpt>(<ept id=\"p1\">**</ept> marks the start of the data binding block.","source":"**(** marks the start of the data binding block."},{"pos":[1437,1509],"content":"<bpt id=\"p1\">**</bpt>[<ept id=\"p1\">**</ept> <ph id=\"ph1\">`bindtype`</ph> <bpt id=\"p2\">**</bpt>]<ept id=\"p2\">**</ept> is one of the following case-insensitive strings:","source":"**[** `bindtype` **]** is one of the following case-insensitive strings:"},{"pos":[1519,1594],"content":"<bpt id=\"p1\">**</bpt>[db_column]<ept id=\"p1\">**</ept> binds each of the member variables to a column in a rowset.","source":"**[db_column]** binds each of the member variables to a column in a rowset."},{"pos":[1604,1643],"content":"<bpt id=\"p1\">**</bpt>[bindto]<ept id=\"p1\">**</ept> (same as <bpt id=\"p2\">**</bpt>[db_column]<ept id=\"p2\">**</ept>).","source":"**[bindto]** (same as **[db_column]**)."},{"pos":[1653,1705],"content":"<bpt id=\"p1\">**</bpt>[in]<ept id=\"p1\">**</ept> binds member variables as input parameters.","source":"**[in]** binds member variables as input parameters."},{"pos":[1715,1769],"content":"<bpt id=\"p1\">**</bpt>[out]<ept id=\"p1\">**</ept> binds member variables as output parameters.","source":"**[out]** binds member variables as output parameters."},{"pos":[1779,1842],"content":"<bpt id=\"p1\">**</bpt>[in,out]<ept id=\"p1\">**</ept> binds member variables as input/output parameters.","source":"**[in,out]** binds member variables as input/output parameters."},{"pos":[1849,1913],"content":"<bpt id=\"p1\">*</bpt>SzVarX<ept id=\"p1\">*</ept> resolves to a member variable within the current scope.","source":"*SzVarX* resolves to a member variable within the current scope."},{"pos":[1920,1966],"content":"<bpt id=\"p1\">**</bpt>)<ept id=\"p1\">**</ept> marks the end of the data binding block.","source":"**)** marks the end of the data binding block."},{"pos":[1973,2099],"content":"If the command string contains one or more specifiers such as [in], [out], or [in/out], <bpt id=\"p1\">**</bpt>db_command<ept id=\"p1\">**</ept> builds a parameter map.","source":"If the command string contains one or more specifiers such as [in], [out], or [in/out], **db_command** builds a parameter map."},{"content":"If the command string contains one or more parameters such as [db_column] or [bindto], <bpt id=\"p1\">**</bpt>db_command<ept id=\"p1\">**</ept> generates a rowset and an accessor map to service these bound variables.","pos":[2106,2280],"source":"If the command string contains one or more parameters such as [db_column] or [bindto], **db_command** generates a rowset and an accessor map to service these bound variables."},{"content":"See <bpt id=\"p1\">[</bpt>db_accessor<ept id=\"p1\">](../windows/db-accessor.md)</ept> for more information.","pos":[2281,2347],"source":" See [db_accessor](../windows/db-accessor.md) for more information."},{"pos":[2355,2474],"content":"[!NOTE]\n [`bindtype`] syntax and the `bindings` parameter are not valid when using **db_command** at the class level.","leadings":["","> "],"nodes":[{"content":"[<ph id=\"ph1\">`bindtype`</ph>] syntax and the <ph id=\"ph2\">`bindings`</ph> parameter are not valid when using <bpt id=\"p1\">**</bpt>db_command<ept id=\"p1\">**</ept> at the class level.","pos":[9,117],"source":" [`bindtype`] syntax and the `bindings` parameter are not valid when using **db_command** at the class level."}]},{"content":"Here are some examples of binding parameter blocks.","pos":[2481,2532]},{"content":"The following example binds the <ph id=\"ph1\">`m_au_fname`</ph> and <ph id=\"ph2\">`m_au_lname`</ph> data members to the <ph id=\"ph3\">`au_fname`</ph> and <ph id=\"ph4\">`au_lname`</ph> columns, respectively, of the authors table in the pubs database:","pos":[2533,2706],"source":" The following example binds the `m_au_fname` and `m_au_lname` data members to the `au_fname` and `au_lname` columns, respectively, of the authors table in the pubs database:"},{"content":"]","pos":[2972,2973]},{"content":"<bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept> (optional)","pos":[2980,2997],"source":"*name* (optional)"},{"content":"The name of the handle you use to work with the rowset.","pos":[3001,3056]},{"content":"If you specify <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept>, <bpt id=\"p2\">**</bpt>db_command<ept id=\"p2\">**</ept> generates a class with the specified <bpt id=\"p3\">*</bpt>name<ept id=\"p3\">*</ept>, which can be used to traverse the rowset or to execute multiple action queries.","pos":[3057,3219],"source":" If you specify *name*, **db_command** generates a class with the specified *name*, which can be used to traverse the rowset or to execute multiple action queries."},{"content":"If you do not specify <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept>, it will not be possible to return more than one row of results to the user.","pos":[3220,3325],"source":" If you do not specify *name*, it will not be possible to return more than one row of results to the user."},{"content":"<bpt id=\"p1\">*</bpt>source_name<ept id=\"p1\">*</ept> (optional)","pos":[3332,3356],"source":"*source_name* (optional)"},{"content":"The <ph id=\"ph1\">`CSession`</ph> variable or instance of a class that has the <ph id=\"ph2\">`db_source`</ph> attribute applied to it on which the command executes.","pos":[3360,3486],"source":" The `CSession` variable or instance of a class that has the `db_source` attribute applied to it on which the command executes."},{"content":"See <bpt id=\"p1\">[</bpt>db_source<ept id=\"p1\">](../windows/db-source.md)</ept>.","pos":[3487,3528],"source":" See [db_source](../windows/db-source.md)."},{"pos":[3535,3682],"content":"<bpt id=\"p1\">**</bpt>db_command<ept id=\"p1\">**</ept> checks to ensure that the variable used for <bpt id=\"p2\">*</bpt>source_name<ept id=\"p2\">*</ept> is valid, so the specified variable should be in function or global scope.","source":"**db_command** checks to ensure that the variable used for *source_name* is valid, so the specified variable should be in function or global scope."},{"content":"(optional)","pos":[3699,3709]},{"content":"Identifies the variable that will receive the <ph id=\"ph1\">`HRESULT`</ph> of this database command.","pos":[3713,3794],"source":" Identifies the variable that will receive the `HRESULT` of this database command."},{"content":"If the variable does not exist, it will be automatically injected by the attribute.","pos":[3795,3878]},{"content":"<bpt id=\"p1\">*</bpt>bindings<ept id=\"p1\">*</ept> (optional)","pos":[3885,3906],"source":"*bindings* (optional)"},{"content":"Allows you to separate the binding parameters from the OLE DB command.","pos":[3910,3980]},{"content":"If you specify a value for <ph id=\"ph1\">`bindings`</ph>, <bpt id=\"p1\">**</bpt>db_command<ept id=\"p1\">**</ept> will parse the associated value and will not parse the [<ph id=\"ph2\">`bindtype`</ph>] parameter.","pos":[3987,4119],"source":"If you specify a value for `bindings`, **db_command** will parse the associated value and will not parse the [`bindtype`] parameter."},{"content":"This usage allows you to use OLE DB provider syntax.","pos":[4120,4172]},{"content":"To disable parsing, without binding parameters, specify <bpt id=\"p1\">**</bpt>Bindings=\"\"<ept id=\"p1\">**</ept>.","pos":[4173,4245],"source":" To disable parsing, without binding parameters, specify **Bindings=\"\"**."},{"content":"If you do not specify a value for <ph id=\"ph1\">`bindings`</ph>, <bpt id=\"p1\">**</bpt>db_command<ept id=\"p1\">**</ept> will parse the binding parameter block, looking for '<bpt id=\"p2\">**</bpt>(<ept id=\"p2\">**</ept>', followed by <bpt id=\"p3\">**</bpt>[<ept id=\"p3\">**</ept><ph id=\"ph2\">`bindtype`</ph><bpt id=\"p4\">**</bpt>]<ept id=\"p4\">**</ept> in brackets, followed by one or more previously declared C++ member variables, followed by '<bpt id=\"p5\">**</bpt>)<ept id=\"p5\">**</ept>'.","pos":[4252,4506],"source":"If you do not specify a value for `bindings`, **db_command** will parse the binding parameter block, looking for '**(**', followed by **[**`bindtype`**]** in brackets, followed by one or more previously declared C++ member variables, followed by '**)**'."},{"content":"All text between the parentheses will be stripped from the resulting command, and these parameters will be used to construct column and parameter bindings for this command.","pos":[4507,4679]},{"content":"<bpt id=\"p1\">*</bpt>bulk_fetch<ept id=\"p1\">*</ept>(optional)","pos":[4686,4708],"source":"*bulk_fetch*(optional)"},{"content":"An integer value that specifies the number of rows to fetch.","pos":[4712,4772]},{"pos":[4779,4910],"content":"The default value is 1, which specifies single row fetching (the rowset will be of type <bpt id=\"p1\">[</bpt>CRowset<ept id=\"p1\">](../data/oledb/crowset-class.md)</ept>).","source":"The default value is 1, which specifies single row fetching (the rowset will be of type [CRowset](../data/oledb/crowset-class.md))."},{"content":"A value greater than 1 specifies bulk row fetching.","pos":[4917,4968]},{"content":"Bulk row fetching refers to the ability of bulk rowsets to fetch multiple row handles (the rowset will be of type <bpt id=\"p1\">[</bpt>CBulkRowset<ept id=\"p1\">](../data/oledb/cbulkrowset-class.md)</ept> and will call <ph id=\"ph1\">`SetRows`</ph> with the specified number of rows).","pos":[4969,5192],"source":" Bulk row fetching refers to the ability of bulk rowsets to fetch multiple row handles (the rowset will be of type [CBulkRowset](../data/oledb/cbulkrowset-class.md) and will call `SetRows` with the specified number of rows)."},{"pos":[5199,5260],"content":"If <bpt id=\"p1\">*</bpt>bulk_fetch<ept id=\"p1\">*</ept> is less than one, <ph id=\"ph1\">`SetRows`</ph> will return zero.","source":"If *bulk_fetch* is less than one, `SetRows` will return zero."},{"content":"Remarks","pos":[5269,5276]},{"pos":[5280,5414],"content":"<bpt id=\"p1\">**</bpt>db_command<ept id=\"p1\">**</ept> creates a <bpt id=\"p2\">[</bpt>CCommand<ept id=\"p2\">](../data/oledb/ccommand-class.md)</ept> object, which is used by an OLE DB consumer to execute a command.","source":"**db_command** creates a [CCommand](../data/oledb/ccommand-class.md) object, which is used by an OLE DB consumer to execute a command."},{"content":"You can use <bpt id=\"p1\">**</bpt>db_command<ept id=\"p1\">**</ept> with either class or function scope; the main difference is the scope of the <ph id=\"ph1\">`CCommand`</ph> object.","pos":[5421,5543],"source":"You can use **db_command** with either class or function scope; the main difference is the scope of the `CCommand` object."},{"content":"With function scope, data such as bindings terminate at function end.","pos":[5544,5613]},{"content":"Both class and function scope usages involve the OLE DB Consumer Template class <bpt id=\"p1\">**</bpt>CCommand&lt;&gt;<ept id=\"p1\">**</ept>, but the template arguments differ for the function and class cases.","pos":[5614,5777],"source":" Both class and function scope usages involve the OLE DB Consumer Template class **CCommand<>**, but the template arguments differ for the function and class cases."},{"content":"In the function case, bindings will be made to an <bpt id=\"p1\">**</bpt>Accessor<ept id=\"p1\">**</ept> that comprises local variables, while the class usage will infer a <ph id=\"ph1\">`CAccessor`</ph>-derived class as the argument.","pos":[5778,5950],"source":" In the function case, bindings will be made to an **Accessor** that comprises local variables, while the class usage will infer a `CAccessor`-derived class as the argument."},{"content":"When used as a class attribute, <bpt id=\"p1\">**</bpt>db_command<ept id=\"p1\">**</ept> works in conjunction with <bpt id=\"p2\">**</bpt>db_column<ept id=\"p2\">**</ept>.","pos":[5951,6038],"source":" When used as a class attribute, **db_command** works in conjunction with **db_column**."},{"pos":[6045,6124],"content":"<bpt id=\"p1\">**</bpt>db_command<ept id=\"p1\">**</ept> can be used to execute commands that do not return a result set.","source":"**db_command** can be used to execute commands that do not return a result set."},{"content":"When the consumer attribute provider applies this attribute to a class, the compiler will rename the class to _<bpt id=\"p1\">*</bpt>YourClassName<ept id=\"p1\">*</ept>Accessor, where <bpt id=\"p2\">*</bpt>YourClassName<ept id=\"p2\">*</ept> is the name you gave the class, and the compiler will also create a class called <bpt id=\"p3\">*</bpt>YourClassName,<ept id=\"p3\">*</ept> which derives from <ph id=\"ph1\">\\_</ph><bpt id=\"p4\">*</bpt>YourClassName<ept id=\"p4\">*</ept>Accessor.","pos":[6131,6432],"source":"When the consumer attribute provider applies this attribute to a class, the compiler will rename the class to _*YourClassName*Accessor, where *YourClassName* is the name you gave the class, and the compiler will also create a class called *YourClassName,* which derives from \\_*YourClassName*Accessor."},{"content":"In Class View, you will see both classes.","pos":[6434,6475]},{"content":"Example","pos":[6484,6491]},{"content":"This sample defines a command that selects the first and last names from a table where the state column matches 'CA'.","pos":[6495,6612]},{"content":"<bpt id=\"p1\">**</bpt>db_command<ept id=\"p1\">**</ept> creates and reads a rowset on which you can call wizard-generated functions such as <bpt id=\"p2\">[</bpt>OpenAll and CloseAll<ept id=\"p2\">](../data/oledb/consumer-wizard-generated-methods.md)</ept>, as well as <ph id=\"ph1\">`CRowset`</ph> member functions such as <bpt id=\"p3\">[</bpt>MoveNext<ept id=\"p3\">](../data/oledb/crowset-movenext.md)</ept>.","pos":[6613,6880],"source":"**db_command** creates and reads a rowset on which you can call wizard-generated functions such as [OpenAll and CloseAll](../data/oledb/consumer-wizard-generated-methods.md), as well as `CRowset` member functions such as [MoveNext](../data/oledb/crowset-movenext.md)."},{"content":"Note that this code requires you to provide your own connection string that connects to the pubs database.","pos":[6887,6993]},{"content":"For information on how to do this in the development environment, see <bpt id=\"p1\">[</bpt>How to: Connect to a Database from Server Explorer<ept id=\"p1\">](http://msdn.microsoft.com/en-us/7c1c3067-0d77-471b-872b-639f9f50db74)</ept> and <bpt id=\"p2\">[</bpt>How to: Add New Data Connections in Server Explorer/Database Explorer<ept id=\"p2\">](http://msdn.microsoft.com/en-us/fb2f513b-ddad-4142-911e-856bba0054c8)</ept>.","pos":[6994,7333],"source":" For information on how to do this in the development environment, see [How to: Connect to a Database from Server Explorer](http://msdn.microsoft.com/en-us/7c1c3067-0d77-471b-872b-639f9f50db74) and [How to: Add New Data Connections in Server Explorer/Database Explorer](http://msdn.microsoft.com/en-us/fb2f513b-ddad-4142-911e-856bba0054c8)."},{"content":"Example","pos":[8480,8487]},{"content":"Example","pos":[9176,9183]},{"pos":[9187,9316],"content":"This sample uses <ph id=\"ph1\">`db_source`</ph> on a data source class <ph id=\"ph2\">`CMySource`</ph>, and <ph id=\"ph3\">`db_command`</ph> on command classes <ph id=\"ph4\">`CCommand1`</ph> and <ph id=\"ph5\">`CCommand2`</ph>.","source":"This sample uses `db_source` on a data source class `CMySource`, and `db_command` on command classes `CCommand1` and `CCommand2`."},{"content":"Requirements","pos":[10154,10166]},{"content":"Attribute Context","pos":[10176,10193]},{"content":"Applies to","pos":[10216,10226]},{"pos":[10229,10271],"content":"<bpt id=\"p1\">**</bpt>class<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`struct`</ph>, member, method, local","source":"**class**, `struct`, member, method, local"},{"content":"Repeatable","pos":[10278,10288]},{"content":"No","pos":[10291,10293]},{"content":"Required attributes","pos":[10300,10319]},{"content":"None","pos":[10322,10326]},{"content":"Invalid attributes","pos":[10333,10351]},{"content":"None","pos":[10354,10358]},{"pos":[10366,10476],"content":"For more information about the attribute contexts, see <bpt id=\"p1\">[</bpt>Attribute Contexts<ept id=\"p1\">](../windows/attribute-contexts.md)</ept>.","source":"For more information about the attribute contexts, see [Attribute Contexts](../windows/attribute-contexts.md)."},{"content":"See Also","pos":[10485,10493]},{"content":"OLE DB Consumer Attributes","pos":[10498,10524]},{"content":"Stand-Alone Attributes","pos":[10573,10595]},{"content":"Attributes Samples","pos":[10640,10658]}],"content":"---\ntitle: \"db_command | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"vc-attr.db_command\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"db_command attribute\"\nms.assetid: 714c3e15-85d7-408b-9a7c-88505c3e5d24\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# db_command\nCreates an OLE DB command.  \n  \n## Syntax  \n  \n```  \n  \n      [ db_command(   \n   command,   \n   name,   \n   source_name,   \n   hresult,   \n   bindings,   \n   bulk_fetch)  \n]  \n```  \n  \n#### Parameters  \n `command`  \n A command string containing the text of an OLE DB command. A simple example is:  \n  \n```  \n[ db_command ( command = \"Select * from Products\" ) ]  \n```  \n  \n The *command* syntax is as follows:  \n  \n```  \nbinding parameter block 1  \n   OLE DB command  \nbinding parameter block 2  \n   continuation of OLE DB command  \nbinding parameter block 3  \n...  \n```  \n  \n A *binding parameter block* is defined as follows:  \n  \n **([** `bindtype` **]** *szVar1* [*, szVar2* [, *nVar3* [, ...]]] **)**  \n  \n where:  \n  \n **(** marks the start of the data binding block.  \n  \n **[** `bindtype` **]** is one of the following case-insensitive strings:  \n  \n-   **[db_column]** binds each of the member variables to a column in a rowset.  \n  \n-   **[bindto]** (same as **[db_column]**).  \n  \n-   **[in]** binds member variables as input parameters.  \n  \n-   **[out]** binds member variables as output parameters.  \n  \n-   **[in,out]** binds member variables as input/output parameters.  \n  \n *SzVarX* resolves to a member variable within the current scope.  \n  \n **)** marks the end of the data binding block.  \n  \n If the command string contains one or more specifiers such as [in], [out], or [in/out], **db_command** builds a parameter map.  \n  \n If the command string contains one or more parameters such as [db_column] or [bindto], **db_command** generates a rowset and an accessor map to service these bound variables. See [db_accessor](../windows/db-accessor.md) for more information.  \n  \n> [!NOTE]\n>  [`bindtype`] syntax and the `bindings` parameter are not valid when using **db_command** at the class level.  \n  \n Here are some examples of binding parameter blocks. The following example binds the `m_au_fname` and `m_au_lname` data members to the `au_fname` and `au_lname` columns, respectively, of the authors table in the pubs database:  \n  \n```  \nTCHAR m_au_fname[21];  \nTCHAR m_au_lname[41];  \nTCHAR m_state[3] = 'CA';  \n  \n[db_command (  \n   command = \"SELECT au_fname([bindto]m_au_fname), au_lname([bindto]m_au_lname) \" \\  \n   \"FROM dbo.authors \" \\  \n   \"WHERE state = ?([in]m_state)\")  \n```  \n  \n ]  \n  \n *name* (optional)  \n The name of the handle you use to work with the rowset. If you specify *name*, **db_command** generates a class with the specified *name*, which can be used to traverse the rowset or to execute multiple action queries. If you do not specify *name*, it will not be possible to return more than one row of results to the user.  \n  \n *source_name* (optional)  \n The `CSession` variable or instance of a class that has the `db_source` attribute applied to it on which the command executes. See [db_source](../windows/db-source.md).  \n  \n **db_command** checks to ensure that the variable used for *source_name* is valid, so the specified variable should be in function or global scope.  \n  \n `hresult` (optional)  \n Identifies the variable that will receive the `HRESULT` of this database command. If the variable does not exist, it will be automatically injected by the attribute.  \n  \n *bindings* (optional)  \n Allows you to separate the binding parameters from the OLE DB command.  \n  \n If you specify a value for `bindings`, **db_command** will parse the associated value and will not parse the [`bindtype`] parameter. This usage allows you to use OLE DB provider syntax. To disable parsing, without binding parameters, specify **Bindings=\"\"**.  \n  \n If you do not specify a value for `bindings`, **db_command** will parse the binding parameter block, looking for '**(**', followed by **[**`bindtype`**]** in brackets, followed by one or more previously declared C++ member variables, followed by '**)**'. All text between the parentheses will be stripped from the resulting command, and these parameters will be used to construct column and parameter bindings for this command.  \n  \n *bulk_fetch*(optional)  \n An integer value that specifies the number of rows to fetch.  \n  \n The default value is 1, which specifies single row fetching (the rowset will be of type [CRowset](../data/oledb/crowset-class.md)).  \n  \n A value greater than 1 specifies bulk row fetching. Bulk row fetching refers to the ability of bulk rowsets to fetch multiple row handles (the rowset will be of type [CBulkRowset](../data/oledb/cbulkrowset-class.md) and will call `SetRows` with the specified number of rows).  \n  \n If *bulk_fetch* is less than one, `SetRows` will return zero.  \n  \n## Remarks  \n **db_command** creates a [CCommand](../data/oledb/ccommand-class.md) object, which is used by an OLE DB consumer to execute a command.  \n  \n You can use **db_command** with either class or function scope; the main difference is the scope of the `CCommand` object. With function scope, data such as bindings terminate at function end. Both class and function scope usages involve the OLE DB Consumer Template class **CCommand<>**, but the template arguments differ for the function and class cases. In the function case, bindings will be made to an **Accessor** that comprises local variables, while the class usage will infer a `CAccessor`-derived class as the argument. When used as a class attribute, **db_command** works in conjunction with **db_column**.  \n  \n **db_command** can be used to execute commands that do not return a result set.  \n  \n When the consumer attribute provider applies this attribute to a class, the compiler will rename the class to _*YourClassName*Accessor, where *YourClassName* is the name you gave the class, and the compiler will also create a class called *YourClassName,* which derives from \\_*YourClassName*Accessor.  In Class View, you will see both classes.  \n  \n## Example  \n This sample defines a command that selects the first and last names from a table where the state column matches 'CA'. **db_command** creates and reads a rowset on which you can call wizard-generated functions such as [OpenAll and CloseAll](../data/oledb/consumer-wizard-generated-methods.md), as well as `CRowset` member functions such as [MoveNext](../data/oledb/crowset-movenext.md).  \n  \n Note that this code requires you to provide your own connection string that connects to the pubs database. For information on how to do this in the development environment, see [How to: Connect to a Database from Server Explorer](http://msdn.microsoft.com/en-us/7c1c3067-0d77-471b-872b-639f9f50db74) and [How to: Add New Data Connections in Server Explorer/Database Explorer](http://msdn.microsoft.com/en-us/fb2f513b-ddad-4142-911e-856bba0054c8).  \n  \n```  \n// db_command.h  \n#include <atlbase.h>  \n#include <atlplus.h>  \n#include <atldbcli.h>  \n  \n#pragma once  \n  \n[  db_source(L\"your connection string\"),  \n   db_command(L\" \\  \n      SELECT au_lname, au_fname \\  \n      FROM dbo.authors \\  \n      WHERE state = 'CA'\")  ]  \n  \nstruct CAuthors {  \n   // In order to fix several issues with some providers, the code below may bind  \n   // columns in a different order than reported by the provider  \n  \n   DBSTATUS m_dwau_lnameStatus;  \n   DBSTATUS m_dwau_fnameStatus;  \n   DBLENGTH m_dwau_lnameLength;  \n   DBLENGTH m_dwau_fnameLength;  \n  \n   [ db_column(\"au_lname\", status=\"m_dwau_lnameStatus\", length=\"m_dwau_lnameLength\") ] TCHAR m_au_lname[41];  \n   [ db_column(\"au_fname\", status=\"m_dwau_fnameStatus\", length=\"m_dwau_fnameLength\") ] TCHAR m_au_fname[21];  \n  \n   [ db_param(\"7\", paramtype=\"DBPARAMIO_INPUT\") ] TCHAR m_state[3];  \n  \n   void GetRowsetProperties(CDBPropSet* pPropSet) {  \n      pPropSet->AddProperty(DBPROP_CANFETCHBACKWARDS, true, DBPROPOPTIONS_OPTIONAL);  \n      pPropSet->AddProperty(DBPROP_CANSCROLLBACKWARDS, true, DBPROPOPTIONS_OPTIONAL);  \n   }  \n};  \n```  \n  \n## Example  \n  \n```  \n// db_command.cpp  \n// compile with: /c  \n#include \"db_command.h\"  \n  \nint main(int argc, _TCHAR* argv[]) {  \n   HRESULT hr = CoInitialize(NULL);  \n  \n   // Instantiate rowset  \n   CAuthors rs;  \n  \n   // Open rowset and move to first row  \n   strcpy_s(rs.m_state, sizeof(rs.m_state), _T(\"CA\"));  \n   hr = rs.OpenAll();  \n   hr = rs.MoveFirst();  \n  \n   // Iterate through the rowset  \n   while( SUCCEEDED(hr) && hr != DB_S_ENDOFROWSET ) {  \n      // Print out the column information for each row  \n      printf(\"First Name: %s, Last Name: %s\\n\", rs.m_au_fname, rs.m_au_lname);  \n      hr = rs.MoveNext();  \n   }  \n  \n   rs.CloseAll();  \n   CoUninitialize();  \n}  \n```  \n  \n## Example  \n This sample uses `db_source` on a data source class `CMySource`, and `db_command` on command classes `CCommand1` and `CCommand2`.  \n  \n```  \n// db_command_2.cpp  \n// compile with: /c  \n#include <atlbase.h>  \n#include <atlplus.h>  \n#include <atldbcli.h>  \n// class usage for both db_source and db_command  \n  \n[  db_source(L\"your connection string\"),  \n   db_command(L\" \\  \n      SELECT au_lname, au_fname \\  \n      FROM dbo.authors \\  \n      WHERE state = 'CA'\")  ]  \nstruct CMySource {  \n   HRESULT OpenDataSource() {  \n      return S_OK;  \n   }  \n};  \n  \n[db_command(command = \"SELECT * FROM Products\")]  \nclass CCommand1 {};  \n  \n[db_command(command = \"SELECT FNAME, LNAME FROM Customers\")]  \nclass CCommand2 {};  \n  \nint main() {  \n   CMySource s;  \n   HRESULT hr = s.OpenDataSource();  \n   if (SUCCEEDED(hr)) {  \n      CCommand1 c1;  \n      hr = c1.Open(s);  \n  \n      CCommand2 c2;  \n      hr = c2.Open(s);  \n   }  \n  \n   s.CloseDataSource();  \n}  \n```  \n  \n## Requirements  \n  \n### Attribute Context  \n  \n|||  \n|-|-|  \n|**Applies to**|**class**, `struct`, member, method, local|  \n|**Repeatable**|No|  \n|**Required attributes**|None|  \n|**Invalid attributes**|None|  \n  \n For more information about the attribute contexts, see [Attribute Contexts](../windows/attribute-contexts.md).  \n  \n## See Also  \n [OLE DB Consumer Attributes](../windows/ole-db-consumer-attributes.md)   \n [Stand-Alone Attributes](../windows/stand-alone-attributes.md)   \n [Attributes Samples](http://msdn.microsoft.com/en-us/558ebdb2-082f-44dc-b442-d8d33bf7bdb8)"}