<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0baff4be843033f41bca04a06f5cf5a72266201e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\ccontextmenumanager-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d8b3312ffe461acaff091de04786d83c59a7214</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e99727354e58291c666c6e2d9af4487ec6ddc7bf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CContextMenuManager Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CContextMenuManager Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CContextMenuManager`</ph> object manages shortcut menus, also known as context menus.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::CContextMenuManager</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CContextMenuManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Destructor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::AddMenu</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Adds a new shortcut menu.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::GetMenuById</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Returns a handle to the menu associated with the provided resource ID.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::GetMenuByName</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returns a handle to the menu that matches the provided menu name.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::GetMenuNames</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Returns a list of menu names.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::LoadState</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Loads shortcut menus stored in the Windows registry.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::ResetState</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Clears the shortcut menus from the context menu manager.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::SaveState</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Saves shortcut menus to the Windows registry.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::SetDontCloseActiveMenu</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Controls whether the <ph id="ph1">`CContextMenuManager`</ph> closes the active shortcut menu when it shows a new shortcut menu.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::ShowPopupMenu</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Displays the specified shortcut menu.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::TrackPopupMenu</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Displays the specified shortcut menu.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Returns the index of the selected menu command.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>manages shortcut menus and makes sure that they have a consistent appearance.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You should not create a <ph id="ph1">`CContextMenuManager`</ph> object manually.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The framework of your application creates the <ph id="ph1">`CContextMenuManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, you should call <bpt id="p1">[</bpt>CWinAppEx::InitContextMenuManager<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__initcontextmenumanager)</ept> when your application is initialized.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>After initializing the context manager, use the method <bpt id="p1">[</bpt>CWinAppEx::GetContextMenuManager<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__getcontextmenumanager)</ept> to obtain a pointer to the context manager for your application.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can create shortcut menus at runtime by calling <ph id="ph1">`AddMenu`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you want to show the menu without first receiving user input, call <ph id="ph1">`ShowPopupMenu`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>is used when you want to create a menu and wait for user input.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>returns the index of the selected command or 0 if the user exited without selecting anything.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CContextMenuManager`</ph> can also save and load its state to the Windows registry.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to add a menu to a <ph id="ph1">`CContextMenuManager`</ph> object, and how not to close the active pop-up menu when the <ph id="ph2">`CContextMenuManager`</ph> object displays a new pop-up menu.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>Custom Pages sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CustomPages#4</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CContextMenuManager</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxcontextmenumanager.h</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::AddMenu</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Adds a new shortcut menu to the <bpt id="p1">[</bpt>CContextMenuManager<ept id="p1">](../../mfc/reference/ccontextmenumanager-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A resource ID for a string that contains the name for the new menu.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The menu resource ID.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A string that contains the name for the new menu.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Nonzero if the method was successful; 0 if the method fails.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This method fails if <ph id="ph1">`uiMenuResId`</ph> is invalid or if another menu with the same name already is in the <ph id="ph2">`CContextMenuManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::CContextMenuManager</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Constructs a <bpt id="p1">[</bpt>CContextMenuManager<ept id="p1">](../../mfc/reference/ccontextmenumanager-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In most cases, you should not create a <ph id="ph1">`CContextMenuManager`</ph> manually.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The framework of your application creates the <ph id="ph1">`CContextMenuManager`</ph> object.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You should call <bpt id="p1">[</bpt>CWinAppEx::InitContextMenuManager<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__initcontextmenumanager)</ept> during the initialization of your application.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To get a pointer to the context manager, call <bpt id="p1">[</bpt>CWinAppEx::GetContextMenuManager<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__getcontextmenumanager)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::GetMenuById</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Returns a handle to the menu associated with a given resource ID.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The resource ID for the menu.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A handle to the associated menu or <ph id="ph1">`NULL`</ph> if the menu is not found.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::GetMenuByName</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Returns a handle to a specific menu.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A string that contains the name of the menu to retrieve.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A pointer to an <ph id="ph1">`UINT`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This parameter contains the resource ID of the specified menu, if found.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A handle to the menu that matches the name that was specified by <ph id="ph1">`lpszName`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>if there is no menu called <ph id="ph1">`lpszName`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If this method finds a menu that matches <ph id="ph1">`lpszName`</ph>, <ph id="ph2">`GetMenuByName`</ph> stores the menu resource ID in the parameter <ph id="ph3">`puiOrigResID`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::GetMenuNames</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns the list of menu names added to the <bpt id="p1">[</bpt>CContextMenuManager<ept id="p1">](../../mfc/reference/ccontextmenumanager-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">[</bpt>CStringList<ept id="p1">](../../mfc/reference/cstringlist-class.md)</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This method writes the list of menu names to this parameter.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::LoadState</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Loads information associated with the <bpt id="p1">[</bpt>CContextMenuManager Class<ept id="p1">](../../mfc/reference/ccontextmenumanager-class.md)</ept> from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A string that contains the relative path of a registry key.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Nonzero if the method is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszProfileName`</ph> parameter is not the absolute path for a registry entry.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>It is a relative path that is added to the end of the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](../../mfc/reference/cwinappex-class.md#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Use the method <bpt id="p1">[</bpt>CContextMenuManager::SaveState<ept id="p1">](#ccontextmenumanager__savestate)</ept> to save the shortcut menus to the registry.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::ResetState</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Clears all items from the shortcut menus associated with the <bpt id="p1">[</bpt>CContextMenuManager Class<ept id="p1">](../../mfc/reference/ccontextmenumanager-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>if the method is successful; <ph id="ph1">`FALSE`</ph> if a failure occurs.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This method clears the pop-up menus and removes them from the <ph id="ph1">`CContextMenuManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::SaveState</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Saves information associated with the <bpt id="p1">[</bpt>CContextMenuManager Class<ept id="p1">](../../mfc/reference/ccontextmenumanager-class.md)</ept> to the Windows registry.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A string that contains the relative path of a registry key.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Nonzero if the method is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lpszProfileName`</ph> parameter is not the absolute path for a registry entry.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>It is a relative path that is added to the end of the default registry key for your application.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>To get or set the default registry key, use the methods <bpt id="p1">[</bpt>CWinAppEx::GetRegistryBase<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__getregistrybase)</ept> and <bpt id="p2">[</bpt>CWinAppEx::SetRegistryBase<ept id="p2">](../../mfc/reference/cwinappex-class.md#cwinappex__setregistrybase)</ept> respectively.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Use the method <bpt id="p1">[</bpt>CContextMenuManager::LoadState<ept id="p1">](#ccontextmenumanager__loadstate)</ept> to load the shortcut menus from the registry.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::SetDontCloseActiveMenu</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Controls whether the <bpt id="p1">[</bpt>CContextMenuManager<ept id="p1">](../../mfc/reference/ccontextmenumanager-class.md)</ept> closes the active pop-up menu when it displays a new pop-up menu.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A Boolean parameter that controls whether to close the active pop-up menu.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`TRUE`</ph> indicates the active pop-up menu is not closed.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>indicates that the active pop-up menu is closed.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>By default, the <ph id="ph1">`CContextMenuManager`</ph> closes the active pop-up menu.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::ShowPopupMenu</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Displays the specified shortcut menu.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The resource ID of the menu that this method will display.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The horizontal offset for the shortcut menu in client coordinates.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The vertical offset for the shortcut menu in client coordinates</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A pointer to the parent window of the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A Boolean parameter that indicates how messages are routed.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bOwnMessage`</ph> is <ph id="ph2">`FALSE`</ph>, standard MFC routing is used.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`pWndOwner`</ph> receives the messages.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The handle of the menu that this method will display.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A Boolean parameter that indicates whether the menu will be automatically destroyed.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A Boolean parameter that indicates how the menu items are aligned.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bRightAlign`</ph> is <ph id="ph2">`TRUE`</ph>, the menu is right-aligned for right-to-left reading order.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The first method overload returns nonzero if the method shows the menu successfully; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The second method overload returns a pointer to <bpt id="p1">[</bpt>CMFCPopupMenu<ept id="p1">](../../mfc/reference/cmfcpopupmenu-class.md)</ept> if the shortcut menu displays correctly; otherwise <ph id="ph1">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>This method resembles the method <bpt id="p1">[</bpt>CContextMenuManager::TrackPopupMenu<ept id="p1">](#ccontextmenumanager__trackpopupmenu)</ept> in that both methods display a shortcut menu.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">`TrackPopupMenu`</ph> returns the index of the selected menu command.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If the parameter <ph id="ph1">`bAutoDestroy`</ph> is <ph id="ph2">`FALSE`</ph>, you must manually call the inherited <ph id="ph3">`DestroyMenu`</ph> method to release memory resources.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The default implementation of <ph id="ph1">`ShowPopupMenu`</ph> does not use the parameter <ph id="ph2">`bAutoDestroy`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>It is provided for future use or for custom classes derived from the <bpt id="p1">[</bpt>CContextMenuManager Class<ept id="p1">](../../mfc/reference/ccontextmenumanager-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>CContextMenuManager::TrackPopupMenu</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Displays the specified shortcut menu and returns the index of the selected shortcut menu command.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The handle of the shortcut menu that this method displays.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The horizontal offset for the shortcut menu in client coordinates.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The vertical offset for the shortcut menu in client coordinates.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A pointer to the parent window of the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>A Boolean parameter that indicates how menu items are aligned.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bRightAlign`</ph> is <ph id="ph2">`TRUE`</ph>, the menu is right-aligned for right-to-left reading order.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bRightAlign`</ph> is <ph id="ph2">`FALSE`</ph>, the menu is left-aligned for left-to-right reading order.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The menu command ID of the command that the user chooses; 0 if the user closes the shortcut menu without selecting a menu command.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This method functions as a modal call to display a shortcut menu.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The application will not continue to the following line in code until the user either closes the shortcut menu or selects a command.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>An alternative method that you can use to display a shortcut menu is <bpt id="p1">[</bpt>CContextMenuManager::ShowPopupMenu<ept id="p1">](#ccontextmenumanager__showpopupmenu)</ept>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>That method is not a modal call and will not return the ID of the selected command.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>CWinAppEx Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>