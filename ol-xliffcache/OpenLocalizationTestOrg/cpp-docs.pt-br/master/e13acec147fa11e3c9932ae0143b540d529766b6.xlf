<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e13acec147fa11e3c9932ae0143b540d529766b6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\component-extensions-for-runtime-platforms.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7362406581017a4ab4ae12e4e564d35a3dcdf893</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5660afd9831e33ef7fb3fa526d213c389dc69d5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Component Extensions for Runtime Platforms | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Component Extensions for Runtime Platforms</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Visual C++ provides language extensions to help you program against runtime platforms.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By using <ph id="ph1">[!INCLUDE[cppwrt](../build/reference/includes/cppwrt_md.md)]</ph> (<ph id="ph2">[!INCLUDE[cppwrt_short](../build/reference/includes/cppwrt_short_md.md)]</ph>), you can program <ph id="ph3">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> apps and components that compile to native code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Although you can create <ph id="ph1">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> apps by programming directly against the <ph id="ph2">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> COM interfaces, by using <ph id="ph3">[!INCLUDE[cppwrt_short](../build/reference/includes/cppwrt_short_md.md)]</ph>, you can work with constructors, exceptions, and other modern C++ programming idioms.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To enable C++ programming in a managed execution environment on the .NET platform, you can use <ph id="ph1">[!INCLUDE[cppcli](../build/reference/includes/cppcli_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Two runtimes, one set of extensions</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>is a subset of <ph id="ph1">[!INCLUDE[cppcli](../build/reference/includes/cppcli_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For extensions that are common to <ph id="ph1">[!INCLUDE[cppwrt_short](../build/reference/includes/cppwrt_short_md.md)]</ph> and <ph id="ph2">[!INCLUDE[cppcli](../build/reference/includes/cppcli_md.md)]</ph>, the semantics depend on whether you are targeting the common language runtime (CLR) or the <ph id="ph3">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To compile your app to run on the <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph>, specify the <bpt id="p1">**</bpt>/ZW<ept id="p1">**</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To compile it to run on the CLR, specify the <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These switches are set automatically when you use Visual Studio to create a project.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about how to create <ph id="ph1">[!INCLUDE[win8_appname_long](../build/includes/win8_appname_long_md.md)]</ph> apps in C++, see <bpt id="p1">[</bpt>Roadmap for Windows Runtime apps using C++<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/hh700360.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>extends the ISO/ANSI C++ standard, and is defined under the Ecma <ph id="ph1">[!INCLUDE[cppcli](../build/reference/includes/cppcli_md.md)]</ph> Standard.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>.NET Programming with C++/CLI (Visual C++)<ept id="p1">](../dotnet/dotnet-programming-with-cpp-cli-visual-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Data Type Keywords</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The language extensions include <bpt id="p1">*</bpt>aggregate keywords<ept id="p1">*</ept>, which are keywords that consist of two tokens separated by white space.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The tokens might have one meaning when they are used separately, and another meaning when they are used together.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, the word "ref" is an ordinary identifier, and the word "class" is a keyword that declares a native class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>But when these words are combined to form <ph id="ph1">`ref class`</ph>, the resulting aggregate keyword declares an entity that is known as a <bpt id="p1">*</bpt>runtime class<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The extensions also include <bpt id="p1">*</bpt>context-sensitive<ept id="p1">*</ept> keywords.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A keyword is treated as context-sensitive depending on the kind of statement that contains it, and its placement in that statement.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, the token "property" can be an identifier, or it can declare a special kind of public class member.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following table lists keywords in the C++ language extension.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Keyword</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Context sensitive</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Purpose</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Declares a class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Classes and Structs</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Declares a value class.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Classes and Structs</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Declares an interface.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>interface class</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Declares an enumeration.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>enum class</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Declares a property.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>property</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Declares a delegate.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>delegate  (C++ Component Extensions)</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Declares an event.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>event</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Override Specifiers</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can use the following keywords to qualify override behavior for derivation.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`new`</ph> keyword is not an extension of C++, it is listed here because it can be used in an additional context.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Some specifiers are also valid for native programming.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Declare Override Specifiers in Native Compilations (C++/CLI)<ept id="p1">](../dotnet/how-to-declare-override-specifiers-in-native-compilations-cpp-cli.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Keyword</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Context Sensitive</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Purpose</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Indicates that functions or classes are abstract.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>abstract</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Indicates that a function is not an override of a base class version.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>new (new slot in vtable)</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Indicates that a method must be an override of a base-class version.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>override</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Prevents classes from being used as base classes.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>sealed</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Keywords for Generics</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following keywords have been added to support generic types.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Generics<ept id="p1">](../windows/generics-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Keyword</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Context sensitive</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Purpose</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Declares a generic type.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Specifies the constraints that are applied to a generic type parameter.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Miscellaneous Keywords</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The following keywords have been added to the C++ extensions.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Keyword</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Context sensitive</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Purpose</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Indicates default exception handlings behavior.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Enumerates elements of a collection.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>for each, in</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Allocates types on the garbage-collected heap.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Use instead of <ph id="ph1">`new`</ph> and <ph id="ph2">`delete`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>ref new, gcnew</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Allocates a <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> type.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Use instead of <ph id="ph1">`new`</ph> and <ph id="ph2">`delete`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>ref new, gcnew</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Indicates that a member can only be initialized at declaration or in a static constructor.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>initonly (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Creates a literal variable.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>literal</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Indicates that a handle or pointer does not point at an object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>nullptr</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Template Constructs</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following language constructs are implemented as templates, instead of as keywords.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If you specify the <bpt id="p1">**</bpt>/ZW<ept id="p1">**</ept> compiler option, they are defined in the <ph id="ph1">`lang`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If you specify the <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> compiler option, they are defined in the <ph id="ph1">`cli`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Keyword</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Purpose</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Declares an array.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Arrays</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>(CLR only) Points to data in a reference type.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>interior_ptr (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>(CLR only) Points to CLR reference types to temporarily suppress the garbage-collection system.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>pin_ptr (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Determines and executes the optimal casting method for a runtime type.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>safe_cast</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>(CLR only) Retrieves a &lt;xref:System.Type?displayProperty=fullName&gt; object that describes the given type or object.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>typeid</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Declarators</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The following type declarators instruct the runtime to automatically manage the lifetime and deletion of allocated objects.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Purpose</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Declares a handle to an object; that is, a pointer to a <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> or CLR object that is automatically deleted when it is no longer usable.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Handle to Object Operator (^)</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Declares a tracking reference; that is, a reference to a <ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> or CLR object that is automatically deleted when it is no longer usable.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Tracking Reference Operator</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Additional Constructs and Related Topics</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This section lists additional programming constructs, and topics that pertain to the CLR.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Topic</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>__identifier (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> and CLR) Enables the use of keywords as identifiers.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Variable Argument Lists (...) (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> and CLR) Enables a function to take a variable number of arguments.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalents to C++ Native Types (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Lists the CLR types that are used in place of C++ integral types.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>appdomain<ept id="p1">](../cpp/appdomain.md)</ept> <ph id="ph1">`__declspec`</ph> modifier</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>modifier that mandates that static and global variables exist per appdomain.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>C-Style Casts with /clr (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Describes how C-style casts are interpreted.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>__clrcall<ept id="p1">](../cpp/clrcall.md)</ept> calling convention</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Indicates the CLR-compliant calling convention.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Predefined Macros</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Custom Attributes</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Describes how to define your own CLR attributes.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Provides an overview of exception handling.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Explicit Overrides</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Demonstrates how member functions can override arbitrary members.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Friend Assemblies (C++)</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Discusses how a client assembly can access all types in an assembly component.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Boxing</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Demonstrates the conditions in which values types are boxed.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Compiler Support for Type Traits</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Discusses how to detect characteristics of types at compile time.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>managed, unmanaged<ept id="p1">](../preprocessor/managed-unmanaged.md)</ept> pragmas</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Demonstrates how managed and unmanaged functions can co-exist in the same module.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>process<ept id="p1">](../cpp/process.md)</ept> <ph id="ph1">`__declspec`</ph> modifier</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>modifier that mandates that static and global variables exist per process.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Reflection (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Demonstrates the CLR version of run-time type information.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>String</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Discusses compiler conversion of string literals to &lt;xref:System.String&gt;.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Type Forwarding (C++/CLI)</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Enables the movement of a type in a shipping assembly to another assembly so that client code does not have to be recompiled.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>User-Defined Attributes</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Demonstrates user-defined attributes.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>using Directive</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Imports external assemblies.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>XML Documentation</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Explains XML-based code documentation by using <bpt id="p1">[</bpt>/doc (Process Documentation Comments) (C/C++)<ept id="p1">](../build/reference/doc-process-documentation-comments-c-cpp.md)</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>.NET Programming with C++/CLI (Visual C++)</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Native and .NET Interoperability</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>