{"nodes":[{"pos":[12,51],"content":"CComClassFactory Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComClassFactory Class | Microsoft Docs","pos":[0,39]}]},{"content":"CComClassFactory Class","pos":[677,699]},{"pos":[700,812],"content":"This class implements the <bpt id=\"p1\">[</bpt>IClassFactory<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms694364)</ept> interface.","source":"This class implements the [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364) interface."},{"content":"Syntax","pos":[821,827]},{"content":"Members","pos":[946,953]},{"content":"Public Methods","pos":[963,977]},{"content":"Name","pos":[984,988]},{"content":"Description","pos":[989,1000]},{"content":"CComClassFactory::CreateInstance","pos":[1039,1071]},{"content":"Creates an object of the specified CLSID.","pos":[1108,1149]},{"content":"CComClassFactory::LockServer","pos":[1155,1183]},{"content":"Locks the class factory in memory.","pos":[1216,1250]},{"content":"Remarks","pos":[1260,1267]},{"content":"implements the <bpt id=\"p1\">[</bpt>IClassFactory<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms694364)</ept> interface, which contains methods for creating an object of a particular CLSID, as well as locking the class factory in memory to allow new objects to be created more quickly.","pos":[1290,1556],"source":" implements the [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364) interface, which contains methods for creating an object of a particular CLSID, as well as locking the class factory in memory to allow new objects to be created more quickly."},{"content":"<bpt id=\"p1\">**</bpt>IClassFactory<ept id=\"p1\">**</ept> must be implemented for every class that you register in the system registry and to which you assign a CLSID.","pos":[1557,1684],"source":"**IClassFactory** must be implemented for every class that you register in the system registry and to which you assign a CLSID."},{"content":"ATL objects normally acquire a class factory by deriving from <bpt id=\"p1\">[</bpt>CComCoClass<ept id=\"p1\">](../../atl/reference/ccomcoclass-class.md)</ept>.","pos":[1691,1809],"source":"ATL objects normally acquire a class factory by deriving from [CComCoClass](../../atl/reference/ccomcoclass-class.md)."},{"content":"This class includes the macro <bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY<ept id=\"p1\">](http://msdn.microsoft.com/library/51a6b925-07c0-4d3a-9174-0b8c808975e4)</ept>, which declares <ph id=\"ph1\">`CComClassFactory`</ph> as the default class factory.","pos":[1810,1999],"source":" This class includes the macro [DECLARE_CLASSFACTORY](http://msdn.microsoft.com/library/51a6b925-07c0-4d3a-9174-0b8c808975e4), which declares `CComClassFactory` as the default class factory."},{"content":"To override this default, specify one of the <ph id=\"ph1\">`DECLARE_CLASSFACTORY`</ph><bpt id=\"p1\">*</bpt>XXX<ept id=\"p1\">*</ept> macros in your class definition.","pos":[2000,2105],"source":" To override this default, specify one of the `DECLARE_CLASSFACTORY`*XXX* macros in your class definition."},{"content":"For example, the <bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY_EX<ept id=\"p1\">](http://msdn.microsoft.com/library/4181ef00-0f30-4e19-b0ee-e7648062e926)</ept> macro uses the specified class for the class factory:","pos":[2106,2274],"source":" For example, the [DECLARE_CLASSFACTORY_EX](http://msdn.microsoft.com/library/4181ef00-0f30-4e19-b0ee-e7648062e926) macro uses the specified class for the class factory:"},{"pos":[2292,2305],"content":"NVC_ATL_COM#8"},{"content":"The above class definition specifies that <bpt id=\"p1\">**</bpt>CMyClassFactory<ept id=\"p1\">**</ept> will be used as the object's default class factory.","pos":[2368,2481],"source":"The above class definition specifies that **CMyClassFactory** will be used as the object's default class factory."},{"content":"<bpt id=\"p1\">**</bpt>CMyClassFactory<ept id=\"p1\">**</ept> must derive from <ph id=\"ph1\">`CComClassFactory`</ph> and override <ph id=\"ph2\">`CreateInstance`</ph>.","pos":[2482,2568],"source":"**CMyClassFactory** must derive from `CComClassFactory` and override `CreateInstance`."},{"content":"ATL provides three other macros that declare a class factory:","pos":[2575,2636]},{"pos":[2644,2856],"content":"<bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY2<ept id=\"p1\">](http://msdn.microsoft.com/library/38a6c969-7297-4bb1-9ba6-1fe2d355b285)</ept> Uses <bpt id=\"p2\">[</bpt>CComClassFactory2<ept id=\"p2\">](../../atl/reference/ccomclassfactory2-class.md)</ept>, which controls creation through a license.","source":"[DECLARE_CLASSFACTORY2](http://msdn.microsoft.com/library/38a6c969-7297-4bb1-9ba6-1fe2d355b285) Uses [CComClassFactory2](../../atl/reference/ccomclassfactory2-class.md), which controls creation through a license."},{"pos":[2864,3108],"content":"<bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY_AUTO_THREAD<ept id=\"p1\">](http://msdn.microsoft.com/library/19d7105e-03e8-4412-9f5e-5384c8a5e18f)</ept> Uses <bpt id=\"p2\">[</bpt>CComClassFactoryAutoThread<ept id=\"p2\">](../../atl/reference/ccomclassfactoryautothread-class.md)</ept>, which creates objects in multiple apartments.","source":"[DECLARE_CLASSFACTORY_AUTO_THREAD](http://msdn.microsoft.com/library/19d7105e-03e8-4412-9f5e-5384c8a5e18f) Uses [CComClassFactoryAutoThread](../../atl/reference/ccomclassfactoryautothread-class.md), which creates objects in multiple apartments."},{"pos":[3116,3410],"content":"<bpt id=\"p1\">[</bpt>DECLARE_CLASSFACTORY_SINGLETON<ept id=\"p1\">](http://msdn.microsoft.com/library/0e4a3964-c03d-463e-884c-fe3b416db478)</ept> Uses <bpt id=\"p2\">[</bpt>CComClassFactorySingleton<ept id=\"p2\">](../../atl/reference/ccomclassfactorysingleton-class.md)</ept>, which constructs a single <bpt id=\"p3\">[</bpt>CComObjectGlobal<ept id=\"p3\">](../../atl/reference/ccomobjectglobal-class.md)</ept> object.","source":"[DECLARE_CLASSFACTORY_SINGLETON](http://msdn.microsoft.com/library/0e4a3964-c03d-463e-884c-fe3b416db478) Uses [CComClassFactorySingleton](../../atl/reference/ccomclassfactorysingleton-class.md), which constructs a single [CComObjectGlobal](../../atl/reference/ccomobjectglobal-class.md) object."},{"content":"Requirements","pos":[3419,3431]},{"pos":[3435,3455],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcom.h","source":"**Header:** atlcom.h"},{"pos":[3514,3546],"content":"CComClassFactory::CreateInstance"},{"content":"Creates an object of the specified CLSID and retrieves an interface pointer to this object.","pos":[3550,3641]},{"content":"Parameters","pos":[3748,3758]},{"content":"[in] If the object is being created as part of an aggregate, then <ph id=\"ph1\">`pUnkOuter`</ph> must be the outer unknown.","pos":[3777,3881],"source":" [in] If the object is being created as part of an aggregate, then `pUnkOuter` must be the outer unknown."},{"content":"Otherwise, <ph id=\"ph1\">`pUnkOuter`</ph> must be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[3882,3922],"source":" Otherwise, `pUnkOuter` must be **NULL**."},{"content":"[in] The IID of the requested interface.","pos":[3939,3979]},{"content":"If <ph id=\"ph1\">`pUnkOuter`</ph> is non- <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, <ph id=\"ph2\">`riid`</ph> must be <bpt id=\"p2\">**</bpt>IID_IUnknown<ept id=\"p2\">**</ept>.","pos":[3980,4045],"source":" If `pUnkOuter` is non- **NULL**, `riid` must be **IID_IUnknown**."},{"content":"[out] A pointer to the interface pointer identified by <ph id=\"ph1\">`riid`</ph>.","pos":[4064,4126],"source":" [out] A pointer to the interface pointer identified by `riid`."},{"content":"If the object does not support this interface, <ph id=\"ph1\">`ppvObj`</ph> is set to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[4127,4202],"source":" If the object does not support this interface, `ppvObj` is set to **NULL**."},{"content":"Return Value","pos":[4212,4224]},{"pos":[4228,4255],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[4310,4338],"content":"CComClassFactory::LockServer"},{"pos":[4342,4457],"content":"Increments and decrements the module lock count by calling <bpt id=\"p1\">**</bpt>_Module::Lock<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>_Module::Unlock<ept id=\"p2\">**</ept>, respectively.","source":"Increments and decrements the module lock count by calling **_Module::Lock** and **_Module::Unlock**, respectively."},{"content":"Parameters","pos":[4515,4525]},{"content":"[in] If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the lock count is incremented; otherwise, the lock count is decremented.","pos":[4540,4630],"source":" [in] If **TRUE**, the lock count is incremented; otherwise, the lock count is decremented."},{"content":"Return Value","pos":[4640,4652]},{"pos":[4656,4683],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[4693,4700]},{"pos":[4704,4830],"content":"<bpt id=\"p1\">**</bpt>_Module<ept id=\"p1\">**</ept> refers to the global instance of <bpt id=\"p2\">[</bpt>CComModule<ept id=\"p2\">](../../atl/reference/ccommodule-class.md)</ept> or a class derived from it.","source":"**_Module** refers to the global instance of [CComModule](../../atl/reference/ccommodule-class.md) or a class derived from it."},{"pos":[4837,4951],"content":"Calling <ph id=\"ph1\">`LockServer`</ph> allows a client to hold onto a class factory so that multiple objects can be created quickly.","source":"Calling `LockServer` allows a client to hold onto a class factory so that multiple objects can be created quickly."},{"content":"See Also","pos":[4960,4968]},{"content":"CComObjectRootEx Class","pos":[4973,4995]},{"content":"CComGlobalsThreadModel","pos":[5049,5071]},{"content":"Class Overview","pos":[5118,5132]}],"content":"---\ntitle: \"CComClassFactory Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL.CComClassFactory\"\n  - \"CComClassFactory\"\n  - \"ATL::CComClassFactory\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CComClassFactory class\"\nms.assetid: e56dacf7-d5c4-4c42-aef4-a86d91981a1b\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComClassFactory Class\nThis class implements the [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364) interface.  \n  \n## Syntax  \n  \n```\nclass CComClassFactory : public IClassFactory,   public CComObjectRootEx<CComGlobalsThreadModel>\n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComClassFactory::CreateInstance](#ccomclassfactory__createinstance)|Creates an object of the specified CLSID.|  \n|[CComClassFactory::LockServer](#ccomclassfactory__lockserver)|Locks the class factory in memory.|  \n  \n## Remarks  \n `CComClassFactory` implements the [IClassFactory](http://msdn.microsoft.com/library/windows/desktop/ms694364) interface, which contains methods for creating an object of a particular CLSID, as well as locking the class factory in memory to allow new objects to be created more quickly. **IClassFactory** must be implemented for every class that you register in the system registry and to which you assign a CLSID.  \n  \n ATL objects normally acquire a class factory by deriving from [CComCoClass](../../atl/reference/ccomcoclass-class.md). This class includes the macro [DECLARE_CLASSFACTORY](http://msdn.microsoft.com/library/51a6b925-07c0-4d3a-9174-0b8c808975e4), which declares `CComClassFactory` as the default class factory. To override this default, specify one of the `DECLARE_CLASSFACTORY`*XXX* macros in your class definition. For example, the [DECLARE_CLASSFACTORY_EX](http://msdn.microsoft.com/library/4181ef00-0f30-4e19-b0ee-e7648062e926) macro uses the specified class for the class factory:  \n  \n [!code-cpp[NVC_ATL_COM#8](../../atl/codesnippet/cpp/ccomclassfactory-class_1.h)]  \n  \n The above class definition specifies that **CMyClassFactory** will be used as the object's default class factory. **CMyClassFactory** must derive from `CComClassFactory` and override `CreateInstance`.  \n  \n ATL provides three other macros that declare a class factory:  \n  \n- [DECLARE_CLASSFACTORY2](http://msdn.microsoft.com/library/38a6c969-7297-4bb1-9ba6-1fe2d355b285) Uses [CComClassFactory2](../../atl/reference/ccomclassfactory2-class.md), which controls creation through a license.  \n  \n- [DECLARE_CLASSFACTORY_AUTO_THREAD](http://msdn.microsoft.com/library/19d7105e-03e8-4412-9f5e-5384c8a5e18f) Uses [CComClassFactoryAutoThread](../../atl/reference/ccomclassfactoryautothread-class.md), which creates objects in multiple apartments.  \n  \n- [DECLARE_CLASSFACTORY_SINGLETON](http://msdn.microsoft.com/library/0e4a3964-c03d-463e-884c-fe3b416db478) Uses [CComClassFactorySingleton](../../atl/reference/ccomclassfactorysingleton-class.md), which constructs a single [CComObjectGlobal](../../atl/reference/ccomobjectglobal-class.md) object.  \n  \n## Requirements  \n **Header:** atlcom.h  \n  \n##  <a name=\"ccomclassfactory__createinstance\"></a>  CComClassFactory::CreateInstance  \n Creates an object of the specified CLSID and retrieves an interface pointer to this object.  \n  \n```\nSTDMETHOD(CreateInstance)(LPUNKNOWN pUnkOuter,\n    REFIID riid,\n    void** ppvObj);\n```  \n  \n### Parameters  \n `pUnkOuter`  \n [in] If the object is being created as part of an aggregate, then `pUnkOuter` must be the outer unknown. Otherwise, `pUnkOuter` must be **NULL**.  \n  \n `riid`  \n [in] The IID of the requested interface. If `pUnkOuter` is non- **NULL**, `riid` must be **IID_IUnknown**.  \n  \n `ppvObj`  \n [out] A pointer to the interface pointer identified by `riid`. If the object does not support this interface, `ppvObj` is set to **NULL**.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"ccomclassfactory__lockserver\"></a>  CComClassFactory::LockServer  \n Increments and decrements the module lock count by calling **_Module::Lock** and **_Module::Unlock**, respectively.  \n  \n```\nSTDMETHOD(LockServer)(BOOL fLock);\n```  \n  \n### Parameters  \n `fLock`  \n [in] If **TRUE**, the lock count is incremented; otherwise, the lock count is decremented.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n **_Module** refers to the global instance of [CComModule](../../atl/reference/ccommodule-class.md) or a class derived from it.  \n  \n Calling `LockServer` allows a client to hold onto a class factory so that multiple objects can be created quickly.  \n  \n## See Also  \n [CComObjectRootEx Class](../../atl/reference/ccomobjectrootex-class.md)   \n [CComGlobalsThreadModel](atl-typedefs.md#ccomglobalsthreadmodel)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}