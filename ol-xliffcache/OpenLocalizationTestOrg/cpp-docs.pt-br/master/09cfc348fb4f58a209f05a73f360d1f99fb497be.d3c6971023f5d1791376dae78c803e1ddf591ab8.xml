{"nodes":[{"pos":[12,54],"content":"binary_delegate (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"binary_delegate (STL-CLR) | Microsoft Docs","pos":[0,42]}]},{"content":"binary_delegate (STL/CLR)","pos":[644,669]},{"content":"The genereic class describes a two-argument delegate.","pos":[670,723]},{"content":"You use it specify a delegate in terms of its argument and return types.","pos":[724,796]},{"content":"Syntax","pos":[805,811]},{"content":"Parameters","pos":[957,967]},{"content":"Arg1","pos":[971,975]},{"content":"The type of the first argument.","pos":[979,1010]},{"content":"Arg2","pos":[1017,1021]},{"content":"The type of the second argument.","pos":[1025,1057]},{"content":"Result","pos":[1064,1070]},{"content":"The return type.","pos":[1074,1090]},{"content":"Remarks","pos":[1099,1106]},{"content":"The genereic delegate describes a two-argument function.","pos":[1110,1166]},{"content":"Note that for:","pos":[1173,1187]},{"pos":[1284,1336],"content":"the types <ph id=\"ph1\">`Fun1`</ph> and <ph id=\"ph2\">`Fun2`</ph> are synonyms, while for:","source":"the types `Fun1` and `Fun2` are synonyms, while for:"},{"content":"they are not the same type.","pos":[1417,1444]},{"content":"Example","pos":[1453,1460]},{"content":"Requirements","pos":[2292,2304]},{"pos":[2308,2340],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[2347,2368],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2377,2385]},{"content":"binary_delegate_noreturn (STL/CLR)","pos":[2390,2424]},{"content":"unary_delegate (STL/CLR)","pos":[2478,2502]},{"content":"unary_delegate_noreturn (STL/CLR)","pos":[2546,2579]}],"content":"---\ntitle: \"binary_delegate (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::binary_delegate\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"binary_delegate function [STL/CLR]\"\nms.assetid: 52a9291a-e354-4b9e-a035-78dac1179ec5\ncaps.latest.revision: 14\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# binary_delegate (STL/CLR)\nThe genereic class describes a two-argument delegate. You use it specify a delegate in terms of its argument and return types.  \n  \n## Syntax  \n  \n```  \ngeneric<typename Arg1,  \n    typename Arg2,  \n    typename Result>  \n    delegate Result binary_delegate(Arg1, Arg2);  \n```  \n  \n#### Parameters  \n Arg1  \n The type of the first argument.  \n  \n Arg2  \n The type of the second argument.  \n  \n Result  \n The return type.  \n  \n## Remarks  \n The genereic delegate describes a two-argument function.  \n  \n Note that for:  \n  \n `binary_delegate<int, int, int> Fun1;`  \n  \n `binary_delegate<int, int, int> Fun2;`  \n  \n the types `Fun1` and `Fun2` are synonyms, while for:  \n  \n `delegate int Fun1(int, int);`  \n  \n `delegate int Fun2(int, int);`  \n  \n they are not the same type.  \n  \n## Example  \n  \n```  \n// cliext_binary_delegate.cpp   \n// compile with: /clr   \n#include <cliext/functional>   \n  \nbool key_compare(wchar_t left, wchar_t right)   \n    {   \n    return (left < right);   \n    }   \n  \ntypedef cliext::binary_delegate<wchar_t, wchar_t, bool> Mydelegate;   \nint main()   \n    {   \n    Mydelegate^ kcomp = gcnew Mydelegate(&key_compare);   \n  \n    System::Console::WriteLine(\"compare(L'a', L'a') = {0}\",   \n        kcomp(L'a', L'a'));   \n    System::Console::WriteLine(\"compare(L'a', L'b') = {0}\",   \n        kcomp(L'a', L'b'));   \n    System::Console::WriteLine(\"compare(L'b', L'a') = {0}\",   \n        kcomp(L'b', L'a'));   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \ncompare(L'a', L'a') = False  \ncompare(L'a', L'b') = True  \ncompare(L'b', L'a') = False  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [binary_delegate_noreturn (STL/CLR)](../dotnet/binary-delegate-noreturn-stl-clr.md)   \n [unary_delegate (STL/CLR)](../dotnet/unary-delegate-stl-clr.md)   \n [unary_delegate_noreturn (STL/CLR)](../dotnet/unary-delegate-noreturn-stl-clr.md)"}