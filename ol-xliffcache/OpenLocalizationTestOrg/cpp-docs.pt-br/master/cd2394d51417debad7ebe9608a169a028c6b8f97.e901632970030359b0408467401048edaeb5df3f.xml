{"nodes":[{"pos":[12,79],"content":"3.2.3 omp_set_lock and omp_set_nest_lock Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"3.2.3 omp_set_lock and omp_set_nest_lock Functions | Microsoft Docs","pos":[0,67]}]},{"content":"3.2.3 omp_set_lock and omp_set_nest_lock Functions","pos":[559,609]},{"content":"Each of these functions blocks the thread executing the function until the specified lock is available and then sets the lock.","pos":[610,736]},{"content":"A simple lock is available if it is unlocked.","pos":[737,782]},{"content":"A nestable lock is available if it is unlocked or if it is already owned by the thread executing the function.","pos":[783,893]},{"content":"The format is as follows:","pos":[894,919]},{"content":"For a simple lock, the argument to the <ph id=\"ph1\">`omp_set_lock`</ph> function must point to an initialized lock variable.","pos":[1048,1154],"source":"For a simple lock, the argument to the `omp_set_lock` function must point to an initialized lock variable."},{"content":"Ownership of the lock is granted to the thread executing the function.","pos":[1155,1225]},{"content":"For a nestable lock, the argument to the <ph id=\"ph1\">`omp_set_nest_lock`</ph> function must point to an initialized lock variable.","pos":[1232,1345],"source":"For a nestable lock, the argument to the `omp_set_nest_lock` function must point to an initialized lock variable."},{"content":"The nesting count is incremented, and the thread is granted, or retains, ownership of the lock.","pos":[1346,1441]}],"content":"---\ntitle: \"3.2.3 omp_set_lock and omp_set_nest_lock Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: b5323879-f72e-418e-953f-3979fdda17a2\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# 3.2.3 omp_set_lock and omp_set_nest_lock Functions\nEach of these functions blocks the thread executing the function until the specified lock is available and then sets the lock. A simple lock is available if it is unlocked. A nestable lock is available if it is unlocked or if it is already owned by the thread executing the function. The format is as follows:  \n  \n```  \n#include <omp.h>  \nvoid omp_set_lock(omp_lock_t *lock);  \nvoid omp_set_nest_lock(omp_nest_lock_t *lock);  \n```  \n  \n For a simple lock, the argument to the `omp_set_lock` function must point to an initialized lock variable. Ownership of the lock is granted to the thread executing the function.  \n  \n For a nestable lock, the argument to the `omp_set_nest_lock` function must point to an initialized lock variable. The nesting count is incremented, and the thread is granted, or retains, ownership of the lock."}