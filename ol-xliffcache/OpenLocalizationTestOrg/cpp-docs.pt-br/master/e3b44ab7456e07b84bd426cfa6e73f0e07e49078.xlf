<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3b44ab7456e07b84bd426cfa6e73f0e07e49078</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdaorelationinfo-structure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6074b4a2920de0efc9f093746594e10c9af12f3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8dbeb6e6099d7fe97f50ed2591e2ef785344cb42</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDaoRelationInfo Structure | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDaoRelationInfo Structure</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CDaoRelationInfo`</ph> structure contains information about a relation defined between fields of two tables in a <bpt id="p1">[</bpt>CDaoDatabase<ept id="p1">](../../mfc/reference/cdaodatabase-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Uniquely names the relation object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see the topic "Name Property" in DAO Help.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>m_strTable</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Names the primary table in the relation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>m_strForeignTable</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Names the foreign table in the relation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A foreign table is a table used to contain foreign keys.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Generally, you use a foreign table to establish or enforce referential integrity.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The foreign table is usually on the many side of a one-to-many relationship.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Examples of foreign tables include tables containing codes for the American states or Canadian provinces or customer orders.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Contains information about the relation type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The value of this member can be any of the following:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbRelationUnique<ept id="p1">**</ept> Relationship is one-to-one.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbRelationDontEnforce<ept id="p1">**</ept> Relationship is not enforced (no referential integrity).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbRelationInherited<ept id="p1">**</ept> Relationship exists in a noncurrent database that contains the two attached tables.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbRelationLeft<ept id="p1">**</ept> The relationship is a left join.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A left outer join includes all of the records from the first (left-hand) of two tables, even if there are no matching values for records in the second (right-hand) table.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbRelationRight<ept id="p1">**</ept> The relationship is a right join.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A right outer join includes all of the records from the second (right-hand) of two tables, even if there are no matching values for records in the first (left-hand) table.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbRelationUpdateCascade<ept id="p1">**</ept> Updates will cascade.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dbRelationDeleteCascade<ept id="p1">**</ept> Deletions will cascade.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A pointer to an array of <bpt id="p1">[</bpt>CDaoRelationFieldInfo<ept id="p1">](../../mfc/reference/cdaorelationfieldinfo-structure.md)</ept> structures.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The array contains one object for each field in the relation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_nFields`</ph> data member gives a count of the array elements.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The number of <ph id="ph1">`CDaoRelationFieldInfo`</ph> objects in the <ph id="ph2">`m_pFieldInfos`</ph> data member.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The references to Primary and Secondary above indicate how the information is returned by the <bpt id="p1">[</bpt>GetRelationInfo<ept id="p1">](../../mfc/reference/cdaodatabase-class.md#cdaodatabase__getrelationinfo)</ept> member function in class <ph id="ph1">`CDaoDatabase`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Relation objects are not represented by an MFC class.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Instead, the DAO object underlying an MFC object of the <ph id="ph1">`CDaoDatabase`</ph> class maintains a collection of relation objects: <ph id="ph2">`CDaoDatabase`</ph> supplies member functions to access some individual items of relation information, or you can access them all at once with a <ph id="ph3">`CDaoRelationInfo`</ph> object by calling the <ph id="ph4">`GetRelationInfo`</ph> member function of the containing database object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Information retrieved by the <bpt id="p1">[</bpt>CDaoDatabase::GetRelationInfo<ept id="p1">](../../mfc/reference/cdaodatabase-class.md#cdaodatabase__getrelationinfo)</ept> member function is stored in a <ph id="ph1">`CDaoRelationInfo`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>also defines a <ph id="ph1">`Dump`</ph> member function in debug builds.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Dump`</ph> to dump the contents of a <ph id="ph2">`CDaoRelationInfo`</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdao.h</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CDaoRelationFieldInfo Structure</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>