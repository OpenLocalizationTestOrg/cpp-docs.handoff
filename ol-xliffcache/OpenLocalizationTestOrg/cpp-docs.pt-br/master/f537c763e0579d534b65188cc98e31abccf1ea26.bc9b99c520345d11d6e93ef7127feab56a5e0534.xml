{"nodes":[{"pos":[12,43],"content":"Function Types | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Function Types | Microsoft Docs","pos":[0,31]}]},{"content":"Function Types","pos":[523,537]},{"content":"There are basically two types of functions.","pos":[538,581]},{"content":"A function that requires a stack frame is called a frame function.","pos":[582,648]},{"content":"A function that does not require a stack frame is called a leaf function.","pos":[649,722]},{"content":"A frame function is a function that allocates stack space, calls other functions, saves nonvolatile registers, or uses exception handling.","pos":[729,867]},{"content":"It also requires a function table entry.","pos":[868,908]},{"content":"A frame function requires a prolog and an epilog.","pos":[909,958]},{"content":"A frame function can dynamically allocate stack space and can employ a frame pointer.","pos":[959,1044]},{"content":"A frame function has the full capabilities of this calling standard at its disposal.","pos":[1045,1129]},{"pos":[1136,1303],"content":"If a frame function does not call another function then it is not required to align the stack (referenced in Section <bpt id=\"p1\">[</bpt>Stack Allocation<ept id=\"p1\">](../build/stack-allocation.md)</ept>).","source":"If a frame function does not call another function then it is not required to align the stack (referenced in Section [Stack Allocation](../build/stack-allocation.md))."},{"content":"A leaf function is one that does not require a function table entry.","pos":[1310,1378]},{"content":"It cannot call any functions, allocate space, or save any nonvolatile registers.","pos":[1379,1459]},{"content":"It is allowed to leave the stack unaligned while it executes.","pos":[1460,1521]},{"content":"See Also","pos":[1530,1538]},{"content":"Stack Usage","pos":[1543,1554]}],"content":"---\ntitle: \"Function Types | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nms.assetid: 7e33d5f4-dabb-406d-afb3-13777b995028\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Function Types\nThere are basically two types of functions. A function that requires a stack frame is called a frame function. A function that does not require a stack frame is called a leaf function.  \n  \n A frame function is a function that allocates stack space, calls other functions, saves nonvolatile registers, or uses exception handling. It also requires a function table entry. A frame function requires a prolog and an epilog. A frame function can dynamically allocate stack space and can employ a frame pointer. A frame function has the full capabilities of this calling standard at its disposal.  \n  \n If a frame function does not call another function then it is not required to align the stack (referenced in Section [Stack Allocation](../build/stack-allocation.md)).  \n  \n A leaf function is one that does not require a function table entry. It cannot call any functions, allocate space, or save any nonvolatile registers. It is allowed to leave the stack unaligned while it executes.  \n  \n## See Also  \n [Stack Usage](../build/stack-usage.md)"}