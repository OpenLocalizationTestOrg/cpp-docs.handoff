{"nodes":[{"pos":[12,50],"content":"CColumnAccessor Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CColumnAccessor Class | Microsoft Docs","pos":[0,38]}]},{"content":"CColumnAccessor Class","pos":[669,690]},{"content":"Generates injected consumer code.","pos":[691,724]},{"content":"Syntax","pos":[733,739]},{"content":"Remarks","pos":[810,817]},{"content":"In the injected code, every column is bound as a separate accessor.","pos":[821,888]},{"content":"You should be aware that this class is used in the injected code (for example, you might encounter it when debugging), but you typically never have to use it or its methods directly.","pos":[889,1071]},{"pos":[1096,1209],"content":"implements the following stub methods, each of which correspond in functionality to other accessor class methods:"},{"pos":[1237,1312],"content":"The constructor; instantiates and initializes the <ph id=\"ph1\">`CColumnAccessor`</ph> object.","source":" The constructor; instantiates and initializes the `CColumnAccessor` object."},{"pos":[1339,1430],"content":"Allocates memory for the column binding structures and initializes the column data members."},{"pos":[1440,1483],"content":"<bpt id=\"p1\">**</bpt>BindColumns<ept id=\"p1\">**</ept> Binds columns to accessors.","source":"**BindColumns** Binds columns to accessors."},{"pos":[1493,1549],"content":"<bpt id=\"p1\">**</bpt>SetParameterBuffer<ept id=\"p1\">**</ept> Allocates buffers for parameters.","source":"**SetParameterBuffer** Allocates buffers for parameters."},{"pos":[1574,1631],"content":"Adds a parameter entry to the parameter entry structures."},{"pos":[1641,1712],"content":"<bpt id=\"p1\">**</bpt>HasOutputColumns<ept id=\"p1\">**</ept> Determines whether the accessor has output columns","source":"**HasOutputColumns** Determines whether the accessor has output columns"},{"pos":[1722,1787],"content":"<bpt id=\"p1\">**</bpt>HasParameters<ept id=\"p1\">**</ept> Determines whether the accessor has parameters.","source":"**HasParameters** Determines whether the accessor has parameters."},{"pos":[1814,1854],"content":"Binds the created parameters to columns."},{"content":"Requirements","pos":[1863,1875]},{"pos":[1879,1901],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atldbcli.h","source":"**Header:** atldbcli.h"},{"content":"See Also","pos":[1910,1918]},{"content":"OLE DB Consumer Templates","pos":[1923,1948]},{"content":"OLE DB Consumer Templates Reference","pos":[2006,2041]}],"content":"---\ntitle: \"CColumnAccessor Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"CColumnAccessor\"\n  - \"ATL::CColumnAccessor\"\n  - \"ATL.CColumnAccessor\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CColumnAccessor class\"\nms.assetid: 6ce1e67f-6a20-490d-9326-c168b43eee7e\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CColumnAccessor Class\nGenerates injected consumer code.  \n  \n## Syntax  \n  \n```  \nclass CColumnAccessor : public CAccessorBase  \n```  \n  \n## Remarks  \n In the injected code, every column is bound as a separate accessor. You should be aware that this class is used in the injected code (for example, you might encounter it when debugging), but you typically never have to use it or its methods directly.  \n  \n `CColumnAccessor` implements the following stub methods, each of which correspond in functionality to other accessor class methods:  \n  \n-   `CColumnAccessor` The constructor; instantiates and initializes the `CColumnAccessor` object.  \n  \n-   `CreateAccessor` Allocates memory for the column binding structures and initializes the column data members.  \n  \n-   **BindColumns** Binds columns to accessors.  \n  \n-   **SetParameterBuffer** Allocates buffers for parameters.  \n  \n-   `AddParameter` Adds a parameter entry to the parameter entry structures.  \n  \n-   **HasOutputColumns** Determines whether the accessor has output columns  \n  \n-   **HasParameters** Determines whether the accessor has parameters.  \n  \n-   `BindParameters` Binds the created parameters to columns.  \n  \n## Requirements  \n **Header:** atldbcli.h  \n  \n## See Also  \n [OLE DB Consumer Templates](../../data/oledb/ole-db-consumer-templates-cpp.md)   \n [OLE DB Consumer Templates Reference](../../data/oledb/ole-db-consumer-templates-reference.md)"}