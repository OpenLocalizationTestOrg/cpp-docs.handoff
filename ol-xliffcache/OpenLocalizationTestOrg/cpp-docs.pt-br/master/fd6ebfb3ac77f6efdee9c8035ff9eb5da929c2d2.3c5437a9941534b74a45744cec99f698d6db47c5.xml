{"nodes":[{"pos":[12,56],"content":"CMFCRibbonBaseElement Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCRibbonBaseElement Class | Microsoft Docs","pos":[0,44]}]},{"content":"CMFCRibbonBaseElement Class","pos":[637,664]},{"content":"The <ph id=\"ph1\">`CMFCRibbonBaseElement`</ph> class is the base class for all elements that you can add to a <bpt id=\"p1\">[</bpt>ribbon bar<ept id=\"p1\">](../../mfc/reference/cmfcribbonbar-class.md)</ept>.","pos":[665,813],"source":"The `CMFCRibbonBaseElement` class is the base class for all elements that you can add to a [ribbon bar](../../mfc/reference/cmfcribbonbar-class.md)."},{"content":"Examples of ribbon elements are ribbon buttons, ribbon check boxes, and ribbon combo boxes.","pos":[814,905]},{"content":"Syntax","pos":[914,920]},{"content":"Members","pos":[991,998]},{"content":"Public Constructors","pos":[1008,1027]},{"content":"Name","pos":[1034,1038]},{"content":"Description","pos":[1039,1050]},{"pos":[1112,1156],"content":"Constructs a <ph id=\"ph1\">`CMFCRibbonBaseElement`</ph> object.","source":"Constructs a `CMFCRibbonBaseElement` object."},{"content":"Public Methods","pos":[1167,1181]},{"content":"Name","pos":[1188,1192]},{"content":"Description","pos":[1193,1204]},{"content":"CMFCRibbonBaseElement::AddToKeyList","pos":[1243,1278]},{"content":"Adds a keytip for the ribbon element to an array of keytips.","pos":[1318,1378]},{"content":"CMFCRibbonBaseElement::AddToListBox","pos":[1384,1419]},{"content":"Adds a ribbon element to the specified ribbon commands list box.","pos":[1459,1523]},{"content":"CMFCRibbonBaseElement::CanBeAddedToQuickAccessToolBar","pos":[1529,1582]},{"content":"Indicates whether the ribbon element can be added to the quick access toolbar.","pos":[1640,1718]},{"content":"CMFCRibbonBaseElement::CanBeCompacted","pos":[1724,1761]},{"content":"Indicates whether the size of the ribbon element can be compact.","pos":[1803,1867]},{"content":"CMFCRibbonBaseElement::CanBeStretched","pos":[1873,1910]},{"content":"Indicates whether the height of the ribbon element can increase vertically to the height of a ribbon row.","pos":[1952,2057]},{"content":"CMFCRibbonBaseElement::CanBeStretchedHorizontally","pos":[2063,2112]},{"content":"Indicates whether the width of the ribbon element can change.","pos":[2166,2227]},{"content":"CMFCRibbonBaseElement::CleanUpSizes","pos":[2233,2268]},{"content":"Cleans up the dimension settings for the ribbon element.","pos":[2308,2364]},{"content":"CMFCRibbonBaseElement::ClosePopupMenu","pos":[2370,2407]},{"content":"Closes the popup menu for the ribbon element.","pos":[2449,2494]},{"content":"CMFCRibbonBaseElement::CopyFrom","pos":[2500,2531]},{"pos":[2567,2647],"content":"Copies the state of the specified <ph id=\"ph1\">`CMFCRibbonBaseElement`</ph> to the current object.","source":"Copies the state of the specified `CMFCRibbonBaseElement` to the current object."},{"content":"CMFCRibbonBaseElement::DestroyCtrl","pos":[2653,2687]},{"content":"Destroys the ribbon element.","pos":[2726,2754]},{"content":"CMFCRibbonBaseElement::DrawImage","pos":[2760,2792]},{"content":"Draws the image for the ribbon element.","pos":[2829,2868]},{"content":"CMFCRibbonBaseElement::Find","pos":[2874,2901]},{"content":"Returns the specified pointer to the ribbon element if it points to the current object.","pos":[2933,3020]},{"content":"CMFCRibbonBaseElement::FindByData","pos":[3026,3059]},{"content":"Retrieves a pointer to the ribbon element if it contains the specified data.","pos":[3097,3173]},{"content":"CMFCRibbonBaseElement::FindByID","pos":[3179,3210]},{"content":"Retrieves a pointer to the ribbon element if that element is identified by the specified command ID.","pos":[3246,3346]},{"content":"CMFCRibbonBaseElement::FindByOriginal","pos":[3352,3389]},{"content":"Retrieves a pointer to the ribbon element if its original ribbon element matches the specified ribbon element.","pos":[3431,3541]},{"content":"CMFCRibbonBaseElement::GetCompactSize","pos":[3547,3584]},{"content":"Returns the compact size of the ribbon element.","pos":[3626,3673]},{"content":"CMFCRibbonBaseElement::GetData","pos":[3679,3709]},{"content":"Retrieves the user-defined data associated with the ribbon element.","pos":[3744,3811]},{"content":"CMFCRibbonBaseElement::GetDescription","pos":[3817,3854]},{"content":"Returns the description of the ribbon element.","pos":[3896,3942]},{"content":"CMFCRibbonBaseElement::GetDroppedDown","pos":[3948,3985]},{"content":"Retrieves a pointer to the ribbon element if its pop-up menu is dropped down.","pos":[4027,4104]},{"content":"CMFCRibbonBaseElement::GetElements","pos":[4110,4144]},{"content":"Adds the current ribbon element to the specified array.","pos":[4183,4238]},{"content":"CMFCRibbonBaseElement::GetElementsByID","pos":[4244,4282]},{"content":"Adds the current ribbon element to the specified array if the current ribbon element contains the specified command ID.","pos":[4325,4444]},{"content":"CMFCRibbonBaseElement::GetHighlighted","pos":[4450,4487]},{"content":"Retrieves a pointer to the ribbon element if it is highlighted.","pos":[4529,4592]},{"content":"CMFCRibbonBaseElement::GetID","pos":[4598,4626]},{"content":"Returns the command ID of the ribbon element.","pos":[4659,4704]},{"content":"CMFCRibbonBaseElement::GetImageSize","pos":[4710,4745]},{"content":"Returns the image size of the ribbon element.","pos":[4785,4830]},{"content":"CMFCRibbonBaseElement::GetIntermediateSize","pos":[4836,4878]},{"content":"Returns the size of the ribbon element in its intermediate state.","pos":[4925,4990]},{"content":"CMFCRibbonBaseElement::GetKeys","pos":[4996,5026]},{"content":"Returns the keytip associated with the ribbon element.","pos":[5061,5115]},{"content":"CMFCRibbonBaseElement::GetKeyTipRect","pos":[5121,5157]},{"content":"Retrieves the keytip boundary rectangle for the ribbon element.","pos":[5198,5261]},{"content":"CMFCRibbonBaseElement::GetKeyTipSize","pos":[5267,5303]},{"content":"Retrieves the size of the keytip text.","pos":[5344,5382]},{"content":"CMFCRibbonBaseElement::GetLocationInGroup","pos":[5388,5429]},{"content":"Indicates the display location of the ribbon element in a ribbon group.","pos":[5475,5546]},{"content":"CMFCRibbonBaseElement::GetMenuKeys","pos":[5552,5586]},{"content":"Returns the keytips associated with a button.","pos":[5625,5670]},{"content":"CMFCRibbonBaseElement::GetNotifyID","pos":[5676,5710]},{"content":"Retrieves the notification command ID for the ribbon element.","pos":[5749,5810]},{"content":"CMFCRibbonBaseElement::GetOriginal","pos":[5816,5850]},{"content":"Retrieves the original ribbon element.","pos":[5889,5927]},{"content":"CMFCRibbonBaseElement::GetParentCategory","pos":[5933,5973]},{"content":"Retrieves the ribbon category for the ribbon element.","pos":[6018,6071]},{"content":"CMFCRibbonBaseElement::GetParentPanel","pos":[6077,6114]},{"content":"Retrieves the ribbon panel that contains the ribbon element.","pos":[6156,6216]},{"content":"CMFCRibbonBaseElement::GetParentRibbonBar","pos":[6222,6263]},{"content":"Retrieves the parent ribbon bar for the ribbon element.","pos":[6309,6364]},{"content":"CMFCRibbonBaseElement::GetParentWnd","pos":[6370,6405]},{"content":"Retrieves the parent window for the ribbon element.","pos":[6445,6496]},{"content":"CMFCRibbonBaseElement::GetPressed","pos":[6502,6535]},{"content":"Retrieves a pointer to the ribbon element if the user currently presses it.","pos":[6573,6648]},{"content":"CMFCRibbonBaseElement::GetQuickAccessToolBarID","pos":[6654,6700]},{"content":"Retrieves the command ID of the ribbon element when it is located in the quick access toolbar.","pos":[6751,6845]},{"content":"CMFCRibbonBaseElement::GetRect","pos":[6851,6881]},{"content":"Returns the bounding rectangle of the ribbon element.","pos":[6916,6969]},{"content":"CMFCRibbonBaseElement::GetRegularSize","pos":[6975,7012]},{"content":"Returns the regular size of the ribbon element.","pos":[7054,7101]},{"content":"CMFCRibbonBaseElement::GetSize","pos":[7107,7137]},{"content":"Returns the current size of the ribbon element.","pos":[7172,7219]},{"content":"CMFCRibbonBaseElement::GetText","pos":[7225,7255]},{"content":"Returns the text associated with the ribbon element.","pos":[7290,7342]},{"content":"CMFCRibbonBaseElement::GetToolTipText","pos":[7348,7385]},{"content":"Returns tooltip text of the ribbon element.","pos":[7427,7470]},{"content":"CMFCRibbonBaseElement::GetTopLevelRibbonBar","pos":[7476,7519]},{"content":"Retrieves the top level ribbon bar for the ribbon element.","pos":[7567,7625]},{"content":"CMFCRibbonBaseElement::HasCompactMode","pos":[7631,7668]},{"content":"Specifies whether the ribbon element has a compact mode.","pos":[7710,7766]},{"content":"CMFCRibbonBaseElement::HasFocus","pos":[7772,7803]},{"content":"Indicates whether the parent element has keyboard focus.","pos":[7839,7895]},{"content":"CMFCRibbonBaseElement::HasIntermediateMode","pos":[7901,7943]},{"content":"Specifies whether the ribbon element has an intermediate mode.","pos":[7990,8052]},{"content":"CMFCRibbonBaseElement::HasLargeMode","pos":[8058,8093]},{"content":"Specifies whether the ribbon element has a large mode.","pos":[8133,8187]},{"content":"CMFCRibbonBaseElement::HasMenu","pos":[8193,8223]},{"content":"Indicates whether the ribbon element has a menu.","pos":[8258,8306]},{"content":"CMFCRibbonBaseElement::HitTest","pos":[8312,8342]},{"content":"Retrieves a pointer to the ribbon element if the specified point is located in it.","pos":[8377,8459]},{"content":"CMFCRibbonBaseElement::IsAlignByColumn","pos":[8465,8503]},{"content":"Indicates whether the ribbon element is aligned vertically with other ribbon elements.","pos":[8546,8632]},{"content":"CMFCRibbonBaseElement::IsAlwaysLargeImage","pos":[8638,8679]},{"content":"Indicates whether the ribbon element image size is always large.","pos":[8725,8789]},{"content":"CMFCRibbonBaseElement::IsAutoRepeatMode","pos":[8795,8834]},{"content":"Indicates whether the ribbon element is in auto repeat mode.","pos":[8878,8938]},{"content":"CMFCRibbonBaseElement::IsChecked","pos":[8944,8976]},{"content":"Specifies whether the ribbon element is checked.","pos":[9013,9061]},{"content":"CMFCRibbonBaseElement::IsCompactMode","pos":[9067,9103]},{"content":"Specifies whether the ribbon element is in a compact mode.","pos":[9144,9202]},{"content":"CMFCRibbonBaseElement::IsDefaultMenuLook","pos":[9208,9248]},{"content":"CMFCRibbonBaseElement::IsDisabled","pos":[9299,9332]},{"content":"Specifies whether the ribbon element is disabled.","pos":[9370,9419]},{"content":"CMFCRibbonBaseElement::IsDroppedDown","pos":[9425,9461]},{"content":"Determines whether the ribbon element displays a popup menu and is dropped down.","pos":[9502,9582]},{"content":"CMFCRibbonBaseElement::IsFocused","pos":[9588,9620]},{"content":"Specifies whether the ribbon element has the focus.","pos":[9657,9708]},{"content":"CMFCRibbonBaseElement::IsGalleryIcon","pos":[9714,9750]},{"content":"Indicates whether the ribbon element is contained in a ribbon gallery.","pos":[9791,9861]},{"content":"CMFCRibbonBaseElement::IsHighlighted","pos":[9867,9903]},{"content":"Specifies whether ribbon element is highlighted.","pos":[9944,9992]},{"content":"CMFCRibbonBaseElement::IsIntermediateMode","pos":[9998,10039]},{"content":"Indicates whether the current image for the ribbon element is intermediate size.","pos":[10085,10165]},{"content":"CMFCRibbonBaseElement::IsLargeMode","pos":[10171,10205]},{"content":"Indicates whether the current image for the ribbon element is large sized.","pos":[10244,10318]},{"content":"CMFCRibbonBaseElement::IsMenuMode","pos":[10324,10357]},{"content":"Indicates whether the ribbon element is contained in a menu.","pos":[10395,10455]},{"content":"CMFCRibbonBaseElement::IsPressed","pos":[10461,10493]},{"content":"Indicates whether the user has clicked the ribbon element.","pos":[10530,10588]},{"content":"CMFCRibbonBaseElement::IsQATMode","pos":[10594,10626]},{"content":"Indicates whether the ribbon element is contained in the quick access toolbar.","pos":[10663,10741]},{"content":"CMFCRibbonBaseElement::IsSeparator","pos":[10747,10781]},{"content":"Indicates whether the ribbon element is a display separator.","pos":[10820,10880]},{"content":"CMFCRibbonBaseElement::IsShowGroupBorder","pos":[10886,10926]},{"content":"Indicates whether the ribbon element is contained in a group that displays a common border.","pos":[10971,11062]},{"content":"CMFCRibbonBaseElement::IsShowTooltipOnBottom","pos":[11068,11112]},{"content":"Indicates whether the tooltip is displayed under the ribbon element.","pos":[11161,11229]},{"content":"CMFCRibbonBaseElement::IsTabStop","pos":[11235,11267]},{"content":"Indicates whether the ribbon element can be selected with the keyboard.","pos":[11304,11375]},{"content":"CMFCRibbonBaseElement::IsTextAlwaysOnRight","pos":[11381,11423]},{"content":"Indicates whether the text for the ribbon element is displayed on the right.","pos":[11470,11546]},{"content":"CMFCRibbonBaseElement::IsVisible","pos":[11552,11584]},{"content":"Indicates whether the ribbon element is currently displayed.","pos":[11621,11681]},{"content":"CMFCRibbonBaseElement::IsWholeRowHeight","pos":[11687,11726]},{"content":"Indicates whether the display heigth of the ribbon element is the same as the display height of the ribbon panel that contains it.","pos":[11770,11900]},{"content":"CMFCRibbonBaseElement::NotifyCommand","pos":[11906,11942]},{"content":"Sends a command notification to the parent window of the ribbon element.","pos":[11983,12055]},{"content":"CMFCRibbonBaseElement::NotifyHighlightListItem","pos":[12061,12107]},{"content":"Notifies the parent window of the ribbon bar when a user highlights a ribbon element that is located in a list.","pos":[12158,12269]},{"content":"CMFCRibbonBaseElement::OnAddToQAToolbar","pos":[12275,12314]},{"content":"Adds the ribbon element to the specified quick access toolbar.","pos":[12358,12420]},{"content":"CMFCRibbonBaseElement::OnAfterChangeRect","pos":[12426,12466]},{"content":"Updates the tooltip for the ribbon element.","pos":[12511,12554]},{"content":"CMFCRibbonBaseElement::OnAutoRepeat","pos":[12560,12595]},{"content":"Updates the ribbon element in response to sustained user input.","pos":[12635,12698]},{"content":"CMFCRibbonBaseElement::OnCalcTextSize","pos":[12704,12741]},{"content":"Calculates the size of the text for the ribbon element.","pos":[12783,12838]},{"content":"CMFCRibbonBaseElement::OnChangeMenuHighlight","pos":[12844,12888]},{"content":"Called by the framework when the highlight changes for a ribbon element that is located in a menu.","pos":[12937,13035]},{"content":"CMFCRibbonBaseElement::OnDraw","pos":[13041,13070]},{"content":"Called by the framework to draw the ribbon element.","pos":[13104,13155]},{"content":"CMFCRibbonBaseElement::OnDrawKeyTip","pos":[13161,13196]},{"content":"Called by the framework to draw the keytip for the ribbon element.","pos":[13236,13302]},{"content":"CMFCRibbonBaseElement::OnDrawMenuImage","pos":[13308,13346]},{"content":"Called by the framework when the menu image for the ribbon element is drawn.","pos":[13389,13465]},{"content":"CMFCRibbonBaseElement::OnDrawOnList","pos":[13471,13506]},{"content":"Called by the framework to draw the ribbon element in a commands list box.","pos":[13546,13620]},{"content":"CMFCRibbonBaseElement::OnKey","pos":[13626,13654]},{"content":"Called by the framework when the user presses a keytip and the ribbon element has the focus.","pos":[13687,13779]},{"content":"CMFCRibbonBaseElement::OnMenuKey","pos":[13785,13817]},{"content":"CMFCRibbonBaseElement::OnRTLChanged","pos":[13860,13895]},{"content":"Called by the framework when the layout changes direction.","pos":[13935,13993]},{"content":"CMFCRibbonBaseElement::OnShow","pos":[13999,14028]},{"content":"Called by the framework to show or hide the ribbon element.","pos":[14062,14121]},{"content":"CMFCRibbonBaseElement::OnShowPopupMenu","pos":[14127,14165]},{"content":"Called by the framework when the ribbon element is going to display a popup menu.","pos":[14208,14289]},{"content":"CMFCRibbonBaseElement::PostMenuCommand","pos":[14295,14333]},{"content":"CMFCRibbonBaseElement::Redraw","pos":[14382,14411]},{"content":"Updates the display for the ribbon element.","pos":[14445,14488]},{"content":"CMFCRibbonBaseElement::SetACCData","pos":[14494,14527]},{"content":"Sets the accessibility data for the ribbon element.","pos":[14565,14616]},{"content":"CMFCRibbonBaseElement::SetCompactMode","pos":[14622,14659]},{"content":"Sets the display size for the ribbon element.","pos":[14701,14746]},{"content":"CMFCRibbonBaseElement::SetData","pos":[14752,14782]},{"content":"Associates a data item with the ribbon element.","pos":[14817,14864]},{"content":"CMFCRibbonBaseElement::SetDefaultMenuLook","pos":[14870,14911]},{"content":"CMFCRibbonBaseElement::SetDescription","pos":[14963,15000]},{"content":"Sets the description for the ribbon element.","pos":[15042,15086]},{"content":"CMFCRibbonBaseElement::SetID","pos":[15092,15120]},{"content":"Sets the command ID of the ribbon element.","pos":[15153,15195]},{"content":"CMFCRibbonBaseElement::SetInitialMode","pos":[15201,15238]},{"content":"Sets the initial display size for the ribbon element.","pos":[15280,15333]},{"content":"CMFCRibbonBaseElement::SetKeys","pos":[15339,15369]},{"content":"Sets a keytip for the ribbon element.","pos":[15404,15441]},{"content":"CMFCRibbonBaseElement::SetOriginal","pos":[15447,15481]},{"content":"Sets the original ribbon element for the ribbon element.","pos":[15520,15576]},{"content":"CMFCRibbonBaseElement::SetParentCategory","pos":[15582,15622]},{"content":"Sets the parent category for the ribbon element.","pos":[15667,15715]},{"content":"CMFCRibbonBaseElement::SetParentMenu","pos":[15721,15757]},{"content":"Sets the parent menu container for the ribbon element.","pos":[15798,15852]},{"content":"CMFCRibbonBaseElement::SetParentRibbonBar","pos":[15858,15899]},{"content":"Sets the parent ribbon bar for the ribbon element.","pos":[15945,15995]},{"content":"CMFCRibbonBaseElement::SetRect","pos":[16001,16031]},{"content":"Sets the dimensions fot he display rectangle for the ribbon element.","pos":[16066,16134]},{"content":"CMFCRibbonBaseElement::SetText","pos":[16140,16170]},{"content":"Sets the text for the ribbon element.","pos":[16205,16242]},{"content":"CMFCRibbonBaseElement::SetTextAlwaysOnRight","pos":[16248,16291]},{"content":"Sets the text for the ribbon element to display on the right.","pos":[16339,16400]},{"content":"CMFCRibbonBaseElement::SetToolTipText","pos":[16406,16443]},{"content":"Sets the tooltip text for the ribbon element.","pos":[16485,16530]},{"content":"CMFCRibbonBaseElement::SetVisible","pos":[16536,16569]},{"content":"Sets the visibility state of the ribbon element.","pos":[16607,16655]},{"content":"CMFCRibbonBaseElement::StretchHorizontally","pos":[16661,16703]},{"content":"Stretches the width of the ribbon element.","pos":[16750,16792]},{"content":"CMFCRibbonBaseElement::StretchToWholeRow","pos":[16798,16838]},{"content":"Changes the display height of the ribbon element to the specified row height.","pos":[16883,16960]},{"content":"CMFCRibbonBaseElement::UpdateTooltipInfo","pos":[16966,17006]},{"content":"Updates the tooltip text by using the command resource for the ribbon element.","pos":[17051,17129]},{"content":"Protected Methods","pos":[17140,17157]},{"content":"Name","pos":[17164,17168]},{"content":"Description","pos":[17169,17180]},{"content":"CMFCRibbonBaseElement::OnProcessKey","pos":[17219,17254]},{"content":"Called by the framework when the user presses a shortcut key.","pos":[17294,17355]},{"content":"CMFCRibbonBaseElement::OnSetFocus","pos":[17361,17394]},{"content":"Called by the framework when a ribbon element receives or loses the input focus.","pos":[17432,17512]},{"content":"Remarks","pos":[17522,17529]},{"pos":[17533,17792],"content":"The <ph id=\"ph1\">`CMFCRibbonBaseElement`</ph> class defines the properties that are common to all ribbon elements that include command ID, text label, tooltip text, element description, and state (which can be focused, highlighted, pressed, disabled, checked, or dropped down).","source":"The `CMFCRibbonBaseElement` class defines the properties that are common to all ribbon elements that include command ID, text label, tooltip text, element description, and state (which can be focused, highlighted, pressed, disabled, checked, or dropped down)."},{"pos":[17799,17919],"content":"The image size of a ribbon element is defined by the <ph id=\"ph1\">`RibbonImageType`</ph> member, which can be one of the following values:","source":"The image size of a ribbon element is defined by the `RibbonImageType` member, which can be one of the following values:"},{"content":"Depending on its size, a ribbon element displays either a small or large image.","pos":[17978,18057]},{"content":"Example","pos":[18066,18073]},{"content":"The following example demonstrates how to use various methods in the <ph id=\"ph1\">`CMFCRibbonBaseElement`</ph> class.","pos":[18077,18176],"source":"The following example demonstrates how to use various methods in the `CMFCRibbonBaseElement` class."},{"content":"The example shows how to get a <ph id=\"ph1\">`CMFCRibbonBaseElement`</ph> object from a <ph id=\"ph2\">`CMFCRibbonStatusBar`</ph> class, set the description for the ribbon element, set the text, set a keytip, and set the tooltip text for the ribbon element.","pos":[18177,18395],"source":" The example shows how to get a `CMFCRibbonBaseElement` object from a `CMFCRibbonStatusBar` class, set the description for the ribbon element, set the text, set a keytip, and set the tooltip text for the ribbon element."},{"content":"This code snippet is part of the <bpt id=\"p1\">[</bpt>Draw Client sample<ept id=\"p1\">](../../visual-cpp-samples.md)</ept>.","pos":[18396,18479],"source":" This code snippet is part of the [Draw Client sample](../../visual-cpp-samples.md)."},{"content":"NVC_MFC_DrawClient#8","pos":[18497,18517]},{"content":"NVC_MFC_DrawClient#9","pos":[18604,18624]},{"content":"Inheritance Hierarchy","pos":[18706,18727]},{"content":"CObject","pos":[18732,18739]},{"content":"CMFCRibbonBaseElement","pos":[18786,18807]},{"content":"Requirements","pos":[18869,18881]},{"pos":[18885,18919],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxbaseribbonelement.h","source":"**Header:** afxbaseribbonelement.h"},{"pos":[18981,19016],"content":"CMFCRibbonBaseElement::AddToKeyList"},{"content":"Adds a keytip for the ribbon element to an array of keytips.","pos":[19020,19080]},{"content":"Parameters","pos":[19192,19202]},{"content":"[in]","pos":[19206,19210]},{"content":"Reference to a <bpt id=\"p1\">[</bpt>CArray<ept id=\"p1\">](../../mfc/reference/carray-class.md)</ept> of keytips.","pos":[19224,19296],"source":" Reference to a [CArray](../../mfc/reference/carray-class.md) of keytips."},{"content":"Remarks","pos":[19306,19313]},{"content":"When the ribbon keytips feature is enabled, the framework displays ribbon keytips when the user presses the ALT key or the F10 key.","pos":[19317,19448]},{"pos":[19510,19545],"content":"CMFCRibbonBaseElement::AddToListBox"},{"content":"Adds a ribbon element to the specified ribbon commands list box.","pos":[19549,19613]},{"content":"Parameters","pos":[19727,19737]},{"content":"[in]","pos":[19741,19745]},{"content":"Pointer to a commands list box.","pos":[19763,19794]},{"content":"[in]","pos":[19801,19805]},{"content":"This parameter is not used.","pos":[19817,19844]},{"content":"Return Value","pos":[19854,19866]},{"content":"The zero-based index of the added ribbon element.","pos":[19870,19919]},{"content":"Remarks","pos":[19929,19936]},{"content":"The framework adds ribbon elements to a commands list box to enable the user to customize the user interface.","pos":[19940,20049]},{"pos":[20129,20182],"content":"CMFCRibbonBaseElement::CanBeAddedToQuickAccessToolBar"},{"content":"Indicates whether the ribbon element can be added to the quick access toolbar.","pos":[20186,20264]},{"content":"Return Value","pos":[20345,20357]},{"pos":[20368,20416],"content":"if the element can be added; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the element can be added; otherwise, `FALSE`."},{"content":"Remarks","pos":[20426,20433]},{"pos":[20497,20534],"content":"CMFCRibbonBaseElement::CanBeCompacted"},{"content":"Indicates whether the size of the ribbon element can be compact.","pos":[20538,20602]},{"content":"Return Value","pos":[20667,20679]},{"pos":[20690,20759],"content":"if the size of the ribbon element can be compact; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the size of the ribbon element can be compact; otherwise, `FALSE`."},{"content":"Remarks","pos":[20769,20776]},{"content":"The size of a ribbon element can be compact, intermediate, or large.","pos":[20780,20848]},{"pos":[20912,20949],"content":"CMFCRibbonBaseElement::CanBeStretched"},{"content":"Indicates whether the height of the ribbon element can increase vertically to the height of a ribbon row.","pos":[20953,21058]},{"content":"Return Value","pos":[21114,21126]},{"pos":[21130,21152],"content":"Always returns <ph id=\"ph1\">`TRUE`</ph>.","source":"Always returns `TRUE`."},{"content":"Remarks","pos":[21162,21169]},{"content":"By default this method always returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[21173,21218],"source":"By default this method always returns `TRUE`."},{"content":"Override this method to indicate whether the height of the ribbon element can increase vertically to the height of a ribbon row.","pos":[21219,21347]},{"pos":[21423,21472],"content":"CMFCRibbonBaseElement::CanBeStretchedHorizontally"},{"content":"Indicates whether the width of the ribbon element can change.","pos":[21476,21537]},{"content":"Return Value","pos":[21605,21617]},{"pos":[21621,21644],"content":"Always returns <ph id=\"ph1\">`FALSE`</ph>.","source":"Always returns `FALSE`."},{"content":"Remarks","pos":[21654,21661]},{"content":"By default this method always returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[21665,21711],"source":"By default this method always returns `FALSE`."},{"content":"Override this method to indicate whether the width of the ribbon element can change.","pos":[21712,21796]},{"pos":[21858,21893],"content":"CMFCRibbonBaseElement::CleanUpSizes"},{"content":"Cleans up the dimension settings for the ribbon element.","pos":[21897,21953]},{"content":"Remarks","pos":[22007,22014]},{"content":"By default this method does nothing.","pos":[22018,22054]},{"content":"Override this method in a derived class to reset the dimension settings for the ribbon element.","pos":[22055,22150]},{"pos":[22214,22251],"content":"CMFCRibbonBaseElement::ClosePopupMenu"},{"content":"Closes the pop-up menu for the ribbon element.","pos":[22255,22301]},{"content":"Remarks","pos":[22357,22364]},{"pos":[22422,22453],"content":"CMFCRibbonBaseElement::CopyFrom"},{"pos":[22457,22589],"content":"Copies the state of the specified <bpt id=\"p1\">[</bpt>CMFCRibbonBaseElement<ept id=\"p1\">](../../mfc/reference/cmfcribbonbaseelement-class.md)</ept> to the current object.","source":"Copies the state of the specified [CMFCRibbonBaseElement](../../mfc/reference/cmfcribbonbaseelement-class.md) to the current object."},{"content":"Parameters","pos":[22671,22681]},{"content":"[in]","pos":[22685,22689]},{"content":"The source <bpt id=\"p1\">[</bpt>CMFCRibbonBaseElement<ept id=\"p1\">](../../mfc/reference/cmfcribbonbaseelement-class.md)</ept> object.","pos":[22699,22793],"source":" The source [CMFCRibbonBaseElement](../../mfc/reference/cmfcribbonbaseelement-class.md) object."},{"content":"Remarks","pos":[22803,22810]},{"pos":[22871,22905],"content":"CMFCRibbonBaseElement::DestroyCtrl"},{"content":"Destroys the ribbon element.","pos":[22909,22937]},{"content":"Remarks","pos":[22990,22997]},{"content":"By default this method does nothing.","pos":[23001,23037]},{"content":"Override this method in a derived class to destroy the ribbon element.","pos":[23038,23108]},{"pos":[23167,23199],"content":"CMFCRibbonBaseElement::DrawImage"},{"content":"Draws the image for the ribbon element.","pos":[23203,23242]},{"content":"Parameters","pos":[23357,23367]},{"content":"[in]","pos":[23371,23375]},{"content":"Pointer to a device context.","pos":[23385,23413]},{"content":"[in]","pos":[23420,23424]},{"content":"An image type enumerated value.","pos":[23435,23466]},{"content":"See the Remarks section for a list of possible values.","pos":[23467,23521]},{"content":"[in]","pos":[23528,23532]},{"content":"The image rectangle.","pos":[23548,23568]},{"content":"Remarks","pos":[23578,23585]},{"content":"By default this method does nothing.","pos":[23589,23625]},{"content":"Override this method in a derived class to draw the image for the ribbon element.","pos":[23626,23707]},{"pos":[23714,23781],"content":"The following table lists possible values for the <ph id=\"ph1\">`type`</ph> parameter:","source":"The following table lists possible values for the `type` parameter:"},{"content":"Large 32x32 pixel image size.","pos":[23810,23839]},{"content":"Small 16x16 pixel image size.","pos":[23868,23897]},{"pos":[23951,23978],"content":"CMFCRibbonBaseElement::Find"},{"content":"Returns the specified pointer if it points to the current object.","pos":[23982,24047]},{"content":"Parameters","pos":[24148,24158]},{"content":"[in]","pos":[24162,24166]},{"content":"Pointer to a ribbon element.","pos":[24181,24209]},{"content":"Return Value","pos":[24219,24231]},{"pos":[24235,24328],"content":"A pointer to the ribbon element if <ph id=\"ph1\">`pElement`</ph> points to the current object; otherwise <ph id=\"ph2\">`NULL`</ph>.","source":"A pointer to the ribbon element if `pElement` points to the current object; otherwise `NULL`."},{"content":"Remarks","pos":[24338,24345]},{"pos":[24405,24438],"content":"CMFCRibbonBaseElement::FindByData"},{"content":"Retrieves a pointer to the ribbon element if it contains the specified data.","pos":[24442,24518]},{"content":"Parameters","pos":[24604,24614]},{"content":"[in]","pos":[24618,24622]},{"content":"The data associated with a ribbon element.","pos":[24635,24677]},{"content":"Return Value","pos":[24687,24699]},{"pos":[24703,24787],"content":"A pointer to the ribbon element if it contains the specified data; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the ribbon element if it contains the specified data; otherwise `NULL`."},{"content":"Remarks","pos":[24797,24804]},{"pos":[24862,24893],"content":"CMFCRibbonBaseElement::FindByID"},{"content":"Retrieves a pointer to the ribbon element if that element is identified by the specified command ID.","pos":[24897,24997]},{"content":"Parameters","pos":[25077,25087]},{"content":"[in]","pos":[25091,25095]},{"content":"Command ID for a ribbon element.","pos":[25109,25141]},{"content":"Return Value","pos":[25151,25163]},{"pos":[25167,25275],"content":"A pointer to the ribbon element if that element is identified by the specified command ID; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the ribbon element if that element is identified by the specified command ID; otherwise `NULL`."},{"content":"Remarks","pos":[25285,25292]},{"pos":[25356,25393],"content":"CMFCRibbonBaseElement::FindByOriginal"},{"content":"Retrieves a pointer to the current ribbon element if its original ribbon element matches the specified ribbon element.","pos":[25397,25515]},{"content":"Parameters","pos":[25621,25631]},{"content":"[in]","pos":[25635,25639]},{"content":"Pointer to a ribbon element.","pos":[25655,25683]},{"content":"Return Value","pos":[25693,25705]},{"pos":[25709,25827],"content":"A pointer to the ribbon element if its original ribbon element matches the specified ribbon element; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the ribbon element if its original ribbon element matches the specified ribbon element; otherwise `NULL`."},{"content":"Remarks","pos":[25837,25844]},{"content":"Ribbon elements that are copied to another container retain a pointer to the original ribbon element.","pos":[25848,25949]},{"pos":[26013,26050],"content":"CMFCRibbonBaseElement::GetCompactSize"},{"content":"Returns the compact size of the ribbon element.","pos":[26054,26101]},{"content":"Parameters","pos":[26166,26176]},{"content":"[in]","pos":[26180,26184]},{"content":"A pointer to a device context.","pos":[26194,26224]},{"content":"Return Value","pos":[26234,26246]},{"content":"The compact size of a ribbon element.","pos":[26250,26287]},{"pos":[26295,26422],"content":"[!NOTE]\n The compact size means that the ribbon element is truncated (it displays a small image, or an image without a text).","leadings":["","> "],"nodes":[{"content":"The compact size means that the ribbon element is truncated (it displays a small image, or an image without a text).","pos":[9,125]}]},{"pos":[26479,26509],"content":"CMFCRibbonBaseElement::GetData"},{"content":"Retrieves the user-defined data associated with the ribbon element.","pos":[26513,26580]},{"content":"Return Value","pos":[26635,26647]},{"content":"The user-defined data associated with the ribbon element.","pos":[26651,26708]},{"pos":[26772,26809],"content":"CMFCRibbonBaseElement::GetDescription"},{"content":"Returns the description of the ribbon element.","pos":[26813,26859]},{"content":"Return Value","pos":[26927,26939]},{"content":"The ribbon element description.","pos":[26943,26974]},{"content":"The description is displayed either on the status bar, or in a tooltip, or under the menu button if the ribbon element is located on the <bpt id=\"p1\">[</bpt>CMFCRibbonMainPanel Class<ept id=\"p1\">](../../mfc/reference/cmfcribbonmainpanel-class.md)</ept>.","pos":[26975,27190],"source":" The description is displayed either on the status bar, or in a tooltip, or under the menu button if the ribbon element is located on the [CMFCRibbonMainPanel Class](../../mfc/reference/cmfcribbonmainpanel-class.md)."},{"pos":[27254,27291],"content":"CMFCRibbonBaseElement::GetDroppedDown"},{"content":"Retrieves a pointer to the ribbon element if its pop-up menu is dropped down.","pos":[27295,27372]},{"content":"Return Value","pos":[27446,27458]},{"pos":[27462,27547],"content":"A pointer to the ribbon element if its pop-up menu is dropped down; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the ribbon element if its pop-up menu is dropped down; otherwise `NULL`."},{"content":"Remarks","pos":[27557,27564]},{"pos":[27625,27659],"content":"CMFCRibbonBaseElement::GetElements"},{"content":"Adds the current ribbon element to the specified array.","pos":[27663,27718]},{"content":"Parameters","pos":[27842,27852]},{"content":"[in, out]","pos":[27856,27865]},{"content":"An array of ribbon elements.","pos":[27882,27910]},{"content":"Remarks","pos":[27920,27927]},{"pos":[27992,28030],"content":"CMFCRibbonBaseElement::GetElementsByID"},{"content":"Adds the current ribbon element to the specified array if the current ribbon element contains the specified command ID.","pos":[28034,28153]},{"content":"Parameters","pos":[28301,28311]},{"content":"[in]","pos":[28315,28319]},{"content":"Command ID of a ribbon element.","pos":[28333,28364]},{"content":"[in]","pos":[28371,28375]},{"content":"An array of ribbon elements.","pos":[28392,28420]},{"content":"Remarks","pos":[28430,28437]},{"pos":[28501,28538],"content":"CMFCRibbonBaseElement::GetHighlighted"},{"content":"Retrieves a pointer to the ribbon element if it is highlighted.","pos":[28542,28605]},{"content":"Return Value","pos":[28679,28691]},{"pos":[28695,28766],"content":"A pointer to the ribbon element if it is highlighted; otherwise <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the ribbon element if it is highlighted; otherwise `NULL`."},{"content":"Remarks","pos":[28776,28783]},{"pos":[28838,28866],"content":"CMFCRibbonBaseElement::GetID"},{"content":"Returns the command ID of the ribbon element.","pos":[28870,28915]},{"content":"Return Value","pos":[28963,28975]},{"content":"The command ID of the ribbon element.","pos":[28979,29016]},{"pos":[29078,29113],"content":"CMFCRibbonBaseElement::GetImageSize"},{"content":"Returns the image size of the ribbon element.","pos":[29117,29162]},{"content":"Return Value","pos":[29243,29255]},{"content":"The image size of the ribbon element.","pos":[29259,29296]},{"pos":[29365,29407],"content":"CMFCRibbonBaseElement::GetIntermediateSize"},{"content":"Returns the size of the ribbon element in its intermediate state.","pos":[29411,29476]},{"content":"Parameters","pos":[29546,29556]},{"content":"[in]","pos":[29560,29564]},{"content":"A pointer to a device context.","pos":[29574,29604]},{"content":"Return Value","pos":[29614,29626]},{"content":"The size of the ribbon element in its intermediate state.","pos":[29630,29687]},{"pos":[29744,29774],"content":"CMFCRibbonBaseElement::GetKeys"},{"content":"Returns the keytip associated with the ribbon element.","pos":[29778,29832]},{"content":"Return Value","pos":[29885,29897]},{"content":"A keytip associated with the ribbon element.","pos":[29901,29945]},{"pos":[30008,30044],"content":"CMFCRibbonBaseElement::GetKeyTipRect"},{"content":"Retrieves the keytip boundary rectangle for the ribbon element.","pos":[30048,30111]},{"content":"Parameters","pos":[30200,30210]},{"content":"[in]","pos":[30214,30218]},{"content":"Pointer to a device context.","pos":[30228,30256]},{"content":"[in]","pos":[30263,30267]},{"content":"if the ribbon element displays a pop-up menu; otherwise <ph id=\"ph1\">`FALSE`</ph>.","pos":[30288,30352],"source":" if the ribbon element displays a pop-up menu; otherwise `FALSE`."},{"content":"Return Value","pos":[30362,30374]},{"content":"Always returns a rectangle with 0 values.","pos":[30378,30419]},{"content":"Remarks","pos":[30429,30436]},{"content":"Override this method in a derived class to return the keytip boundary rectangle.","pos":[30440,30520]},{"pos":[30583,30619],"content":"CMFCRibbonBaseElement::GetKeyTipSize"},{"content":"Retrieves the size of the keytip text.","pos":[30623,30661]},{"content":"Parameters","pos":[30725,30735]},{"content":"[in]","pos":[30739,30743]},{"content":"Pointer to a device context.","pos":[30753,30781]},{"content":"Return Value","pos":[30791,30803]},{"content":"The size of the keytip text.","pos":[30807,30835]},{"content":"Remarks","pos":[30845,30852]},{"pos":[30920,30961],"content":"CMFCRibbonBaseElement::GetLocationInGroup"},{"content":"Indicates the display location of the ribbon element in a ribbon group.","pos":[30965,31036]},{"content":"Return Value","pos":[31114,31126]},{"content":"A <ph id=\"ph1\">`RibbonElementLocation`</ph> enumerated value.","pos":[31130,31173],"source":"A `RibbonElementLocation` enumerated value."},{"content":"The following table lists possible values.","pos":[31174,31216]},{"content":"Value","pos":[31223,31228]},{"content":"Description","pos":[31229,31240]},{"content":"The ribbon element is not contained in a ribbon group.","pos":[31305,31359]},{"content":"The ribbon element is displayed as the only item in a ribbon group.","pos":[31393,31460]},{"content":"The ribbon element is displayed on the left end of a ribbon group.","pos":[31493,31559]},{"content":"The ribbon element is displayed on the right end of a ribbon group.","pos":[31591,31658]},{"content":"The ribbon element is not displayed on either end of a ribbon group.","pos":[31692,31760]},{"content":"Remarks","pos":[31771,31778]},{"content":"Ribbon element groups are only aligned horizontally.","pos":[31782,31834]},{"pos":[31895,31929],"content":"CMFCRibbonBaseElement::GetMenuKeys"},{"content":"Returns the menu keytip for the ribbon element.","pos":[31933,31980]},{"content":"Return Value","pos":[32037,32049]},{"content":"The menu keytip associated with the ribbon element.","pos":[32053,32104]},{"content":"Remarks","pos":[32114,32121]},{"content":"When invoked, a menu keytip displays a pop-up menu.","pos":[32125,32176]},{"pos":[32237,32271],"content":"CMFCRibbonBaseElement::GetNotifyID"},{"content":"Retrieves the notification command ID for the ribbon element.","pos":[32275,32336]},{"content":"Return Value","pos":[32389,32401]},{"content":"The notification command ID.","pos":[32405,32433]},{"content":"Remarks","pos":[32443,32450]},{"pos":[32511,32545],"content":"CMFCRibbonBaseElement::GetOriginal"},{"content":"Retrieves the original ribbon element.","pos":[32549,32587]},{"content":"Return Value","pos":[32659,32671]},{"content":"A pointer to the original ribbon element.","pos":[32675,32716]},{"content":"Remarks","pos":[32726,32733]},{"content":"Ribbon elements that are copied to another container retain a pointer to the original ribbon element.","pos":[32737,32838]},{"pos":[32905,32945],"content":"CMFCRibbonBaseElement::GetParentCategory"},{"content":"Retrieves the ribbon category for the ribbon element.","pos":[32949,33002]},{"content":"Return Value","pos":[33077,33089]},{"content":"A pointer to the ribbon category.","pos":[33093,33126]},{"content":"Remarks","pos":[33136,33143]},{"pos":[33207,33244],"content":"CMFCRibbonBaseElement::GetParentPanel"},{"content":"Retrieves the ribbon panel that contains the ribbon element.","pos":[33248,33308]},{"content":"Return Value","pos":[33385,33397]},{"content":"A pointer to the ribbon panel that contains the ribbon element.","pos":[33401,33464]},{"content":"Remarks","pos":[33474,33481]},{"pos":[33549,33590],"content":"CMFCRibbonBaseElement::GetParentRibbonBar"},{"content":"Retrieves the parent ribbon bar for the ribbon element.","pos":[33594,33649]},{"content":"Return Value","pos":[33720,33732]},{"content":"A pointer to the parent ribbon bar for the ribbon element.","pos":[33736,33794]},{"content":"Remarks","pos":[33804,33811]},{"pos":[33873,33908],"content":"CMFCRibbonBaseElement::GetParentWnd"},{"content":"Retrieves the parent window for the ribbon element.","pos":[33912,33963]},{"content":"Return Value","pos":[34027,34039]},{"pos":[34043,34145],"content":"A pointer to the parent window for the ribbon element if the method was successful; otherwise, <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the parent window for the ribbon element if the method was successful; otherwise, `NULL`."},{"content":"Remarks","pos":[34155,34162]},{"pos":[34166,34376],"content":"The parent window for a ribbon element is a <bpt id=\"p1\">[</bpt>CMFCRibbonBar Class<ept id=\"p1\">](../../mfc/reference/cmfcribbonbar-class.md)</ept> or a <bpt id=\"p2\">[</bpt>CMFCRibbonPanelMenuBar<ept id=\"p2\">](http://msdn.microsoft.com/en-us/7bd4b986-8b7b-493e-9746-bd3161b78581)</ept>.","source":"The parent window for a ribbon element is a [CMFCRibbonBar Class](../../mfc/reference/cmfcribbonbar-class.md) or a [CMFCRibbonPanelMenuBar](http://msdn.microsoft.com/en-us/7bd4b986-8b7b-493e-9746-bd3161b78581)."},{"pos":[34436,34469],"content":"CMFCRibbonBaseElement::GetPressed"},{"content":"Retrieves a pointer to the ribbon element if the user currently presses it.","pos":[34473,34548]},{"content":"Return Value","pos":[34618,34630]},{"pos":[34634,34718],"content":"A pointer to the ribbon element if the user currently presses it; otherwise, <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the ribbon element if the user currently presses it; otherwise, `NULL`."},{"content":"Remarks","pos":[34728,34735]},{"pos":[34808,34854],"content":"CMFCRibbonBaseElement::GetQuickAccessToolBarID"},{"content":"Retrieves the command ID of the ribbon element when it is located in the quick access toolbar.","pos":[34858,34952]},{"content":"Return Value","pos":[35026,35038]},{"content":"The command ID of the ribbon element when it is located in the quick access toolbar.","pos":[35042,35126]},{"content":"Remarks","pos":[35136,35143]},{"pos":[35200,35230],"content":"CMFCRibbonBaseElement::GetRect"},{"content":"Returns the bounding rectangle of the ribbon element.","pos":[35234,35287]},{"content":"Return Value","pos":[35338,35350]},{"content":"The bounding rectangle of the ribbon element.","pos":[35354,35399]},{"content":"The position of the rectangle is in the coordinates of the parent Ribbon control.","pos":[35400,35481]},{"pos":[35545,35582],"content":"CMFCRibbonBaseElement::GetRegularSize"},{"content":"Returns the regular size of the ribbon element.","pos":[35586,35633]},{"content":"Parameters","pos":[35704,35714]},{"content":"[in]","pos":[35718,35722]},{"content":"A pointer to a device context.","pos":[35732,35762]},{"content":"Return Value","pos":[35772,35784]},{"content":"The regular size of the ribbon element.","pos":[35788,35827]},{"content":"Remarks","pos":[35837,35844]},{"pos":[35852,35931],"content":"[!NOTE]\n The regular size is the maximal possible size of the ribbon element.","leadings":["","> "],"nodes":[{"content":"The regular size is the maximal possible size of the ribbon element.","pos":[9,77]}]},{"pos":[35988,36018],"content":"CMFCRibbonBaseElement::GetSize"},{"content":"Returns the current size of the ribbon element.","pos":[36022,36069]},{"content":"Parameters","pos":[36127,36137]},{"content":"[in]","pos":[36141,36145]},{"content":"A pointer to a device context.","pos":[36155,36185]},{"content":"Return Value","pos":[36195,36207]},{"content":"The current size of the ribbon element.","pos":[36211,36250]},{"pos":[36307,36337],"content":"CMFCRibbonBaseElement::GetText"},{"content":"Returns the text associated with the ribbon element.","pos":[36341,36393]},{"content":"Return Value","pos":[36446,36458]},{"content":"The text associated with the ribbon element.","pos":[36462,36506]},{"pos":[36570,36607],"content":"CMFCRibbonBaseElement::GetToolTipText"},{"content":"Returns tooltip text of the ribbon element.","pos":[36611,36654]},{"content":"Return Value","pos":[36722,36734]},{"content":"The tooltip text of the ribbon element.","pos":[36738,36777]},{"pos":[36847,36890],"content":"CMFCRibbonBaseElement::GetTopLevelRibbonBar"},{"content":"Retrieves the top level ribbon bar for the ribbon element.","pos":[36894,36952]},{"content":"Return Value","pos":[37025,37037]},{"pos":[37041,37150],"content":"A pointer to the top level ribbon bar for the ribbon element if the method was successful; otherwise, <ph id=\"ph1\">`NULL`</ph>.","source":"A pointer to the top level ribbon bar for the ribbon element if the method was successful; otherwise, `NULL`."},{"content":"Remarks","pos":[37160,37167]},{"pos":[37231,37268],"content":"CMFCRibbonBaseElement::HasCompactMode"},{"content":"Specifies whether the ribbon element has a compact mode.","pos":[37272,37328]},{"content":"Return Value","pos":[37393,37405]},{"content":"if the ribbon element has a compact mode.","pos":[37416,37457]},{"content":"otherwise.","pos":[37466,37476]},{"content":"Remarks","pos":[37486,37493]},{"pos":[37501,37572],"content":"[!NOTE]\n In the compact mode, an element displays a small image only.","leadings":["","> "],"nodes":[{"content":"In the compact mode, an element displays a small image only.","pos":[9,69]}]},{"pos":[37641,37683],"content":"CMFCRibbonBaseElement::HasIntermediateMode"},{"content":"Specifies whether the ribbon element has an intermediate mode.","pos":[37687,37749]},{"content":"Return Value","pos":[37819,37831]},{"content":"if the ribbon element has an intermediate mode, <ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[37842,37908],"source":" if the ribbon element has an intermediate mode, `FALSE` otherwise."},{"content":"In the intermediate mode, an element displays a small image and text on the right of the image.","pos":[37909,38004]},{"content":"Remarks","pos":[38014,38021]},{"pos":[38083,38118],"content":"CMFCRibbonBaseElement::HasLargeMode"},{"content":"Determines whether the ribbon element has a large mode.","pos":[38122,38177]},{"content":"Return Value","pos":[38240,38252]},{"content":"if the ribbon element has a large mode.","pos":[38263,38302]},{"content":"otherwise.","pos":[38311,38321]},{"content":"Remarks","pos":[38331,38338]},{"content":"In the large mode, an element can take the full height of the parent panel.","pos":[38342,38417]},{"pos":[38474,38504],"content":"CMFCRibbonBaseElement::HasMenu"},{"content":"Indicates whether the ribbon element has a menu.","pos":[38508,38556]},{"content":"Return Value","pos":[38614,38626]},{"pos":[38630,38653],"content":"Always returns <ph id=\"ph1\">`FALSE`</ph>.","source":"Always returns `FALSE`."},{"content":"Remarks","pos":[38663,38670]},{"content":"By default this method always returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[38674,38720],"source":"By default this method always returns `FALSE`."},{"content":"Override this method in a derived class to indicate whether the ribbon element has a menu.","pos":[38721,38811]},{"pos":[38868,38898],"content":"CMFCRibbonBaseElement::HitTest"},{"content":"Retrieves a pointer to the ribbon element if the specified point is located in it.","pos":[38902,38984]},{"content":"Parameters","pos":[39063,39073]},{"content":"[in]","pos":[39077,39081]},{"content":"This parameter is not used.","pos":[39093,39120]},{"content":"Return Value","pos":[39130,39142]},{"pos":[39146,39210],"content":"A pointer to the ribbon element if it exists; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":"A pointer to the ribbon element if it exists; otherwise `FALSE`."},{"content":"Remarks","pos":[39220,39227]},{"content":"By default this method always returns a valid pointer to the ribbon element when it exists.","pos":[39231,39322]},{"content":"Override this method to indicate if the point resides in the ribbon element.","pos":[39323,39399]},{"pos":[39464,39502],"content":"CMFCRibbonBaseElement::IsAlignByColumn"},{"content":"Indicates whether the ribbon element is aligned vertically with other ribbon elements.","pos":[39506,39592]},{"content":"Return Value","pos":[39658,39670]},{"pos":[39674,39696],"content":"Always returns <ph id=\"ph1\">`TRUE`</ph>.","source":"Always returns `TRUE`."},{"content":"Remarks","pos":[39706,39713]},{"content":"By default this method always returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[39717,39762],"source":"By default this method always returns `TRUE`."},{"content":"Override this method in a derived class to indicate whether the derived ribbon element is aligned vertically with other ribbon elements.","pos":[39763,39899]},{"pos":[39967,40008],"content":"CMFCRibbonBaseElement::IsAlwaysLargeImage"},{"content":"Indicates whether the ribbon element image size is always large.","pos":[40012,40076]},{"content":"Return Value","pos":[40145,40157]},{"pos":[40168,40236],"content":"if the ribbon element image size is always large; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element image size is always large; otherwise `FALSE`."},{"content":"Remarks","pos":[40246,40253]},{"content":"Large image size is 32 x 32 pixels.","pos":[40257,40292]},{"pos":[40358,40397],"content":"CMFCRibbonBaseElement::IsAutoRepeatMode"},{"content":"Indicates whether the ribbon element is in auto repeat mode.","pos":[40401,40461]},{"content":"Parameters","pos":[40539,40549]},{"content":"[in]","pos":[40553,40557]},{"content":"This parameter is not used.","pos":[40570,40597]},{"content":"Return Value","pos":[40607,40619]},{"pos":[40623,40646],"content":"Always returns <ph id=\"ph1\">`FALSE`</ph>.","source":"Always returns `FALSE`."},{"content":"Remarks","pos":[40656,40663]},{"content":"By default this method always returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[40667,40713],"source":"By default this method always returns `FALSE`."},{"content":"Override this method to indicate whether the ribbon element is in auto repeat mode.","pos":[40714,40797]},{"content":"In auto repeat mode, the ribbon element responds at a set interval, measured in milliseconds, to sustained user input.","pos":[40804,40922]},{"pos":[40981,41013],"content":"CMFCRibbonBaseElement::IsChecked"},{"content":"Specifies whether the ribbon element is checked.","pos":[41017,41065]},{"content":"Return Value","pos":[41125,41137]},{"pos":[41148,41200],"content":"if the ribbon element is checked; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element is checked; otherwise `FALSE`."},{"pos":[41263,41299],"content":"CMFCRibbonBaseElement::IsCompactMode"},{"content":"Specifies whether the ribbon element is in a compact mode.","pos":[41303,41361]},{"content":"Return Value","pos":[41417,41429]},{"pos":[41440,41502],"content":"if the ribbon element is in a compact mode; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element is in a compact mode; otherwise `FALSE`."},{"pos":[41569,41609],"content":"CMFCRibbonBaseElement::IsDefaultMenuLook"},{"content":"Indicates whether the ribbon element is set to appear as a pop-up command.","pos":[41613,41687]},{"content":"Return Value","pos":[41747,41759]},{"pos":[41770,41848],"content":"if the ribbon element is set to appear as a pop-up command; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element is set to appear as a pop-up command; otherwise `FALSE`."},{"content":"Remarks","pos":[41858,41865]},{"pos":[41925,41958],"content":"CMFCRibbonBaseElement::IsDisabled"},{"content":"Specifies whether the ribbon element is disabled.","pos":[41962,42011]},{"content":"Return Value","pos":[42072,42084]},{"pos":[42095,42148],"content":"if the ribbon element is disabled; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element is disabled; otherwise `FALSE`."},{"pos":[42211,42247],"content":"CMFCRibbonBaseElement::IsDroppedDown"},{"content":"Specifies whether the ribbon element displays a pop-up menu and is dropped down.","pos":[42251,42331]},{"content":"Return Value","pos":[42395,42407]},{"pos":[42418,42502],"content":"if the ribbon element is dropped down and displays a pop-up menu; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element is dropped down and displays a pop-up menu; otherwise `FALSE`."},{"pos":[42561,42593],"content":"CMFCRibbonBaseElement::IsFocused"},{"content":"Specifies whether the ribbon element has the focus.","pos":[42597,42648]},{"content":"Return Value","pos":[42708,42720]},{"pos":[42731,42786],"content":"if the ribbon element has the focus; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element has the focus; otherwise `FALSE`."},{"pos":[42849,42885],"content":"CMFCRibbonBaseElement::IsGalleryIcon"},{"content":"Indicates whether the ribbon element is contained in a ribbon gallery.","pos":[42889,42959]},{"content":"Return Value","pos":[43023,43035]},{"pos":[43039,43062],"content":"Always returns <ph id=\"ph1\">`FALSE`</ph>.","source":"Always returns `FALSE`."},{"content":"Remarks","pos":[43072,43079]},{"content":"By default this method always returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[43083,43129],"source":"By default this method always returns `FALSE`."},{"content":"Override this method in a derived class to indicate whether the ribbon element is contained in a ribbon gallery.","pos":[43130,43242]},{"pos":[43305,43341],"content":"CMFCRibbonBaseElement::IsHighlighted"},{"content":"Specifies whether ribbon element is highlighted.","pos":[43345,43393]},{"content":"Return Value","pos":[43457,43469]},{"pos":[43480,43536],"content":"if the ribbon element is highlighted; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element is highlighted; otherwise `FALSE`."},{"content":"Remarks","pos":[43546,43553]},{"pos":[43621,43662],"content":"CMFCRibbonBaseElement::IsIntermediateMode"},{"content":"Indicates whether the current image for the ribbon element is intermediate size.","pos":[43666,43746]},{"content":"Return Value","pos":[43807,43819]},{"pos":[43830,43906],"content":"if the image for the ribbon element is intermediate size; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the image for the ribbon element is intermediate size; otherwise `FALSE`."},{"content":"Remarks","pos":[43916,43923]},{"content":"Intermediate image size is 16 x 16 pixels.","pos":[43927,43969]},{"pos":[44030,44064],"content":"CMFCRibbonBaseElement::IsLargeMode"},{"content":"Indicates whether the current image for the ribbon element is large size.","pos":[44068,44141]},{"content":"Return Value","pos":[44195,44207]},{"pos":[44218,44287],"content":"if the image for the ribbon element is large size; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the image for the ribbon element is large size; otherwise `FALSE`."},{"content":"Remarks","pos":[44297,44304]},{"content":"Large image size is 32 x 32 pixels.","pos":[44308,44343]},{"pos":[44403,44436],"content":"CMFCRibbonBaseElement::IsMenuMode"},{"content":"Indicates whether the ribbon element is contained in a menu.","pos":[44440,44500]},{"content":"Return Value","pos":[44553,44565]},{"pos":[44576,44641],"content":"if the ribbon element is contained in a menu; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element is contained in a menu; otherwise, `FALSE`."},{"content":"Remarks","pos":[44651,44658]},{"pos":[44717,44749],"content":"CMFCRibbonBaseElement::IsPressed"},{"content":"Indicates whether the user has clicked the ribbon element.","pos":[44753,44811]},{"content":"Return Value","pos":[44871,44883]},{"pos":[44894,44956],"content":"if the user has clicked the ribbon element; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the user has clicked the ribbon element; otherwise `FALSE`."},{"pos":[45015,45047],"content":"CMFCRibbonBaseElement::IsQATMode"},{"content":"Indicates whether the ribbon element is contained in the quick access toolbar.","pos":[45051,45129]},{"content":"Return Value","pos":[45181,45193]},{"pos":[45204,45287],"content":"if the ribbon element is contained in the quick access toolbar; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element is contained in the quick access toolbar; otherwise, `FALSE`."},{"content":"Remarks","pos":[45297,45304]},{"pos":[45365,45399],"content":"CMFCRibbonBaseElement::IsSeparator"},{"content":"Indicates whether the ribbon element is a display separator.","pos":[45403,45463]},{"content":"Return Value","pos":[45525,45537]},{"pos":[45548,45612],"content":"if the ribbon element is a display separator; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element is a display separator; otherwise `FALSE`."},{"content":"Remarks","pos":[45622,45629]},{"pos":[45696,45736],"content":"CMFCRibbonBaseElement::IsShowGroupBorder"},{"content":"Indicates whether the ribbon element is contained in a group that displays a common border.","pos":[45740,45831]},{"content":"Return Value","pos":[45891,45903]},{"pos":[45914,46010],"content":"if the ribbon element is contained in a group that displays a common border; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element is contained in a group that displays a common border; otherwise, `FALSE`."},{"content":"Remarks","pos":[46020,46027]},{"pos":[46098,46142],"content":"CMFCRibbonBaseElement::IsShowTooltipOnBottom"},{"content":"Indicates whether the tooltip is displayed under the ribbon element.","pos":[46146,46214]},{"content":"Return Value","pos":[46286,46298]},{"pos":[46309,46416],"content":"if the tooltip is displayed under the ribbon element; <ph id=\"ph1\">`FALSE`</ph> if the tooltip is displayed near the pointer.","source":" if the tooltip is displayed under the ribbon element; `FALSE` if the tooltip is displayed near the pointer."},{"content":"Remarks","pos":[46426,46433]},{"pos":[46492,46524],"content":"CMFCRibbonBaseElement::IsTabStop"},{"content":"Indicates whether the ribbon element can be selected with the keyboard.","pos":[46528,46599]},{"content":"Return Value","pos":[46659,46671]},{"pos":[46675,46697],"content":"Always returns <ph id=\"ph1\">`TRUE`</ph>.","source":"Always returns `TRUE`."},{"content":"Remarks","pos":[46707,46714]},{"content":"By default this method always returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[46718,46763],"source":"By default this method always returns `TRUE`."},{"content":"Override this method to indicate whether the ribbon element can be selected with the keyboard.","pos":[46764,46858]},{"pos":[46927,46969],"content":"CMFCRibbonBaseElement::IsTextAlwaysOnRight"},{"content":"Indicates whether the text for the ribbon element is displayed on the right.","pos":[46973,47049]},{"content":"Return Value","pos":[47111,47123]},{"pos":[47134,47215],"content":"if the text for the ribbon element is displayed on the right; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the text for the ribbon element is displayed on the right; otherwise, `FALSE`."},{"content":"Remarks","pos":[47225,47232]},{"pos":[47291,47323],"content":"CMFCRibbonBaseElement::IsVisible"},{"content":"Indicates whether the ribbon element is currently displayed.","pos":[47327,47387]},{"content":"Return Value","pos":[47439,47451]},{"pos":[47462,47527],"content":"if the ribbon element is currently displayed; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element is currently displayed; otherwise, `FALSE`."},{"content":"Remarks","pos":[47537,47544]},{"pos":[47610,47649],"content":"CMFCRibbonBaseElement::IsWholeRowHeight"},{"content":"Indicates whether the display height of the ribbon element is the same as the display height of the ribbon panel that contains it.","pos":[47653,47783]},{"content":"Return Value","pos":[47850,47862]},{"pos":[47866,47889],"content":"Always returns <ph id=\"ph1\">`FALSE`</ph>.","source":"Always returns `FALSE`."},{"content":"Remarks","pos":[47899,47906]},{"content":"By default this method always returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[47910,47956],"source":"By default this method always returns `FALSE`."},{"content":"Override this method to indicate whether the display height of the ribbon element is the same as the display height of the ribbon panel that contains it.","pos":[47957,48110]},{"pos":[48173,48209],"content":"CMFCRibbonBaseElement::NotifyCommand"},{"content":"Sends a command notification to the parent window of the ribbon element.","pos":[48213,48285]},{"content":"Parameters","pos":[48355,48365]},{"content":"[in]","pos":[48369,48373]},{"content":"to add the command notification to the message queue of the parent window; <ph id=\"ph1\">`FALSE`</ph> to send the message immediately to the parent window.","pos":[48397,48533],"source":" to add the command notification to the message queue of the parent window; `FALSE` to send the message immediately to the parent window."},{"content":"Return Value","pos":[48543,48555]},{"pos":[48566,48610],"content":"if the message was sent; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the message was sent; otherwise, `FALSE`."},{"content":"Remarks","pos":[48620,48627]},{"pos":[48700,48746],"content":"CMFCRibbonBaseElement::NotifyHighlightListItem"},{"content":"Notifies the parent window of the ribbon bar when a user highlights a ribbon element that is located in a list.","pos":[48750,48861]},{"content":"Parameters","pos":[48936,48946]},{"content":"[in]","pos":[48950,48954]},{"content":"The index of the ribbon element in the list.","pos":[48967,49011]},{"content":"Remarks","pos":[49021,49028]},{"pos":[49094,49133],"content":"CMFCRibbonBaseElement::OnAddToQAToolbar"},{"content":"Adds the ribbon element to the specified quick access toolbar.","pos":[49137,49199]},{"content":"Parameters","pos":[49290,49300]},{"content":"[in]","pos":[49304,49308]},{"content":"The quick access toolbar.","pos":[49318,49343]},{"content":"Return Value","pos":[49353,49365]},{"pos":[49369,49459],"content":"Always returns <ph id=\"ph1\">`TRUE`</ph> indicating the ribbon element was added to the quick access toolbar.","source":"Always returns `TRUE` indicating the ribbon element was added to the quick access toolbar."},{"content":"Remarks","pos":[49469,49476]},{"pos":[49543,49583],"content":"CMFCRibbonBaseElement::OnAfterChangeRect"},{"content":"Updates the tooltip for the ribbon element.","pos":[49587,49630]},{"content":"Parameters","pos":[49697,49707]},{"content":"[in]","pos":[49711,49715]},{"content":"This parameter is not used.","pos":[49725,49752]},{"content":"Remarks","pos":[49762,49769]},{"content":"By default this method updates the tooltip for the ribbon element.","pos":[49773,49839]},{"content":"Override this method to update the ribbon element after its display rectangle has changed.","pos":[49840,49930]},{"pos":[49992,50027],"content":"CMFCRibbonBaseElement::OnAutoRepeat"},{"content":"Updates the ribbon element in response to sustained user input.","pos":[50031,50094]},{"content":"Return Value","pos":[50148,50160]},{"pos":[50164,50187],"content":"Always returns <ph id=\"ph1\">`FALSE`</ph>.","source":"Always returns `FALSE`."},{"content":"Remarks","pos":[50197,50204]},{"content":"By default this method always return <ph id=\"ph1\">`FALSE`</ph>.","pos":[50208,50253],"source":"By default this method always return `FALSE`."},{"content":"Override this method to process sustained user input.","pos":[50254,50307]},{"pos":[50371,50408],"content":"CMFCRibbonBaseElement::OnCalcTextSize"},{"content":"Calculates the size of the text for the ribbon element.","pos":[50412,50467]},{"content":"Parameters","pos":[50531,50541]},{"content":"[in]","pos":[50545,50549]},{"content":"This parameter is not used.","pos":[50559,50586]},{"content":"Remarks","pos":[50596,50603]},{"content":"By default this method does nothing.","pos":[50607,50643]},{"content":"Override this method to calculate the size of the text for the ribbon element.","pos":[50644,50722]},{"pos":[50793,50837],"content":"CMFCRibbonBaseElement::OnChangeMenuHighlight"},{"content":"Called by the framework when the highlight changes for a ribbon element that is located in a menu.","pos":[50841,50939]},{"content":"Parameters","pos":[51073,51083]},{"content":"[in]","pos":[51087,51091]},{"content":"This parameter is not used.","pos":[51111,51138]},{"content":"[in]","pos":[51145,51149]},{"content":"This parameter is not used.","pos":[51160,51187]},{"content":"Remarks","pos":[51197,51204]},{"content":"By default this method does nothing.","pos":[51208,51244]},{"content":"Override this method to update a ribbon element that is located in a menu when the highlight changes.","pos":[51245,51346]},{"pos":[51402,51431],"content":"CMFCRibbonBaseElement::OnDraw"},{"content":"Called by the framework to draw the ribbon element.","pos":[51435,51486]},{"content":"Parameters","pos":[51548,51558]},{"content":"[in]","pos":[51562,51566]},{"content":"A pointer to a device context.","pos":[51576,51606]},{"content":"Remarks","pos":[51616,51623]},{"content":"Override this method in a derived class if you want to customize the drawing of a specific ribbon element.","pos":[51627,51733]},{"pos":[51795,51830],"content":"CMFCRibbonBaseElement::OnDrawKeyTip"},{"content":"Called by the framework to draw the keytip for the ribbon element.","pos":[51834,51900]},{"content":"Parameters","pos":[52012,52022]},{"content":"[in]","pos":[52026,52030]},{"content":"Pointer to a device context.","pos":[52040,52068]},{"content":"[in]","pos":[52075,52079]},{"content":"Boundary rectangle for the keytip.","pos":[52090,52124]},{"content":"[in]","pos":[52131,52135]},{"content":"if the keytip is for a pop-up menu button; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[52156,52218],"source":" if the keytip is for a pop-up menu button; otherwise, `FALSE`."},{"content":"Remarks","pos":[52228,52235]},{"pos":[52300,52338],"content":"CMFCRibbonBaseElement::OnDrawMenuImage"},{"content":"Called by the framework when the menu image for the ribbon element is drawn.","pos":[52342,52418]},{"content":"Parameters","pos":[52506,52516]},{"content":"[in]","pos":[52520,52524]},{"content":"Pointer to a device context.","pos":[52534,52562]},{"content":"[in]","pos":[52569,52573]},{"content":"Menu image rectangle.","pos":[52584,52605]},{"content":"Return Value","pos":[52615,52627]},{"pos":[52631,52685],"content":"Always returns <ph id=\"ph1\">`TRUE`</ph> to indicate the image was drawn.","source":"Always returns `TRUE` to indicate the image was drawn."},{"content":"Remarks","pos":[52695,52702]},{"pos":[52764,52799],"content":"CMFCRibbonBaseElement::OnDrawOnList"},{"content":"Called by the framework to draw the ribbon element in a commands list box.","pos":[52803,52877]},{"content":"Parameters","pos":[53057,53067]},{"content":"[in]","pos":[53071,53075]},{"content":"Pointer to a device context for the ribbon element.","pos":[53085,53136]},{"content":"[in]","pos":[53143,53147]},{"content":"The display text.","pos":[53161,53178]},{"content":"[in]","pos":[53185,53189]},{"content":"Distance, in pixels, from the left side of the list box to the display text.","pos":[53207,53283]},{"content":"[in]","pos":[53290,53294]},{"content":"The display rectangle for the ribbon element.","pos":[53305,53350]},{"content":"[in]","pos":[53357,53361]},{"content":"This parameter is not used.","pos":[53379,53406]},{"content":"[in]","pos":[53413,53417]},{"content":"This parameter is not used.","pos":[53436,53463]},{"content":"Remarks","pos":[53473,53480]},{"content":"The commands list box displays ribbon elements to enable users to customize the quick access toolbar.","pos":[53484,53585]},{"pos":[53640,53668],"content":"CMFCRibbonBaseElement::OnKey"},{"content":"Called by the framework when the user presses a keytip and the ribbon element has the focus.","pos":[53672,53764]},{"content":"Parameters","pos":[53826,53836]},{"content":"[in]","pos":[53840,53844]},{"content":"if the keytip displays a pop-up menu; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[53868,53925],"source":" if the keytip displays a pop-up menu; otherwise, `FALSE`."},{"content":"Return Value","pos":[53935,53947]},{"pos":[53958,54002],"content":"if the event was handled; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the event was handled; otherwise `FALSE`."},{"content":"Remarks","pos":[54012,54019]},{"pos":[54078,54110],"content":"CMFCRibbonBaseElement::OnMenuKey"},{"content":"Called by the framework when the user presses a menu keytip on the main panel.","pos":[54114,54192]},{"content":"Parameters","pos":[54258,54268]},{"content":"[in]","pos":[54272,54276]},{"content":"This parameter is not used.","pos":[54293,54320]},{"content":"Return Value","pos":[54330,54342]},{"pos":[54346,54369],"content":"Always returns <ph id=\"ph1\">`FALSE`</ph>.","source":"Always returns `FALSE`."},{"content":"Remarks","pos":[54379,54386]},{"content":"By default this method always returns <ph id=\"ph1\">`FALSE`</ph>.","pos":[54390,54436],"source":"By default this method always returns `FALSE`."},{"content":"Override this method to respond when a user presses a menu keytip on the main panel.","pos":[54437,54521]},{"pos":[54583,54618],"content":"CMFCRibbonBaseElement::OnProcessKey"},{"content":"Called by the framework when the user presses a shortcut key.","pos":[54622,54683]},{"content":"Parameters","pos":[54747,54757]},{"content":"[in]","pos":[54761,54765]},{"content":"This parameter is not used.","pos":[54777,54804]},{"content":"Return Value","pos":[54814,54826]},{"pos":[54830,54853],"content":"Always returns <ph id=\"ph1\">`FALSE`</ph>.","source":"Always returns `FALSE`."},{"content":"Remarks","pos":[54863,54870]},{"content":"Override this method if you want the ribbon element to process a shortcut key.","pos":[54874,54952]},{"pos":[55014,55049],"content":"CMFCRibbonBaseElement::OnRTLChanged"},{"content":"Called by the framework when the layout changes direction.","pos":[55053,55111]},{"content":"Parameters","pos":[55176,55186]},{"content":"[in]","pos":[55190,55194]},{"content":"This parameter is not used.","pos":[55207,55234]},{"content":"Remarks","pos":[55244,55251]},{"content":"By default this method does nothing.","pos":[55255,55291]},{"content":"Override this method to adjust the ribbon element when the layout changes direction.","pos":[55292,55376]},{"content":"The default layout direction is left-to-right.","pos":[55377,55423]},{"pos":[55483,55516],"content":"CMFCRibbonBaseElement::OnSetFocus"},{"content":"Called by the framework when a ribbon element receives or loses the input focus.","pos":[55520,55600]},{"content":"Remarks","pos":[55658,55665]},{"content":"Override this method in a derived class if you want your application to handle a change in the focus of a ribbon element.","pos":[55669,55790]},{"pos":[55846,55875],"content":"CMFCRibbonBaseElement::OnShow"},{"content":"Called by the framework to show or hide the ribbon element.","pos":[55879,55938]},{"content":"Parameters","pos":[55996,56006]},{"content":"[in]","pos":[56010,56014]},{"content":"This parameter is not used.","pos":[56026,56053]},{"content":"Remarks","pos":[56063,56070]},{"content":"By default this method does nothing.","pos":[56074,56110]},{"content":"Override this method to show or hide the ribbon element.","pos":[56111,56167]},{"pos":[56232,56270],"content":"CMFCRibbonBaseElement::OnShowPopupMenu"},{"content":"Called by the framework before the ribbon element shows a pop-up menu.","pos":[56274,56344]},{"content":"Remarks","pos":[56401,56408]},{"content":"This method notifies the parent window of the ribbon bar that the ribbon element will show a pop-up menu.","pos":[56412,56517]},{"pos":[56582,56620],"content":"CMFCRibbonBaseElement::PostMenuCommand"},{"content":"Closes the pop-up menu for the ribbon element and sends a close message to the parent menu.","pos":[56624,56715]},{"content":"Parameters","pos":[56776,56786]},{"content":"[in]","pos":[56790,56794]},{"content":"The parameter is not used.","pos":[56808,56834]},{"content":"Remarks","pos":[56844,56851]},{"content":"The close message is only sent if the ribbon element is located on a pop-up menu.","pos":[56855,56936]},{"pos":[56992,57021],"content":"CMFCRibbonBaseElement::Redraw"},{"content":"Updates the display for the ribbon element.","pos":[57025,57068]},{"content":"Remarks","pos":[57116,57123]},{"pos":[57127,57354],"content":"This method redraws the display rectangle for the ribbon element by calling <bpt id=\"p1\">[</bpt>CWnd::RedrawWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162911)</ept> with the <ph id=\"ph1\">`RDW_INVALIDATE`</ph>, <ph id=\"ph2\">`RDW_ERASE`</ph>, and <ph id=\"ph3\">`RDW_UPDATENOW`</ph> flags set.","source":"This method redraws the display rectangle for the ribbon element by calling [CWnd::RedrawWindow](http://msdn.microsoft.com/library/windows/desktop/dd162911) with the `RDW_INVALIDATE`, `RDW_ERASE`, and `RDW_UPDATENOW` flags set."},{"pos":[57414,57447],"content":"CMFCRibbonBaseElement::SetACCData"},{"content":"Sets the accessibility data for the ribbon element.","pos":[57451,57502]},{"content":"Parameters","pos":[57604,57614]},{"content":"The parent window for the ribbon element.","pos":[57631,57672]},{"content":"The accessibility data for the ribbon element.","pos":[57689,57735]},{"content":"Return Value","pos":[57745,57757]},{"pos":[57761,57783],"content":"Always returns <ph id=\"ph1\">`TRUE`</ph>.","source":"Always returns `TRUE`."},{"content":"Remarks","pos":[57793,57800]},{"content":"By default this method sets the accessibility data for the ribbon element and always returns <ph id=\"ph1\">`TRUE`</ph>.","pos":[57804,57904],"source":"By default this method sets the accessibility data for the ribbon element and always returns `TRUE`."},{"content":"Override this method to set the accessibility data and return a value that indicates success or failure.","pos":[57905,58009]},{"pos":[58073,58110],"content":"CMFCRibbonBaseElement::SetCompactMode"},{"content":"Sets the display size for the ribbon element.","pos":[58114,58159]},{"content":"Parameters","pos":[58239,58249]},{"content":"[in]","pos":[58253,58257]},{"content":"to reduce the display size of the ribbon element; <ph id=\"ph1\">`FALSE`</ph> to increase the display size of the ribbon element.","pos":[58283,58392],"source":" to reduce the display size of the ribbon element; `FALSE` to increase the display size of the ribbon element."},{"content":"Remarks","pos":[58402,58409]},{"content":"The following table summarizes the logic for this method.","pos":[58413,58470]},{"content":"Current ribbon element size","pos":[58492,58519]},{"content":"New ribbon element size","pos":[58520,58543]},{"content":"Compact","pos":[58644,58651]},{"content":"No change.","pos":[58652,58662]},{"content":"Intermediate","pos":[58674,58686]},{"content":"Compact if it is possible.","pos":[58687,58713]},{"content":"Large","pos":[58725,58730]},{"content":"Intermediate if it is possible.","pos":[58731,58762]},{"content":"Compact","pos":[58775,58782]},{"content":"Intermediate if it is possible; otherwise large.","pos":[58783,58831]},{"pos":[58889,58919],"content":"CMFCRibbonBaseElement::SetData"},{"content":"Associates a data item with the ribbon element.","pos":[58923,58970]},{"content":"Parameters","pos":[59027,59037]},{"content":"[in]","pos":[59041,59045]},{"content":"The data value.","pos":[59058,59073]},{"pos":[59141,59182],"content":"CMFCRibbonBaseElement::SetDefaultMenuLook"},{"content":"Sets the ribbon element to appear as a pop-up command.","pos":[59186,59240]},{"content":"Parameters","pos":[59322,59332]},{"content":"[in]","pos":[59336,59340]},{"content":"to set the ribbon element to appear as a pop-up command; otherwise <ph id=\"ph1\">`FALSE`</ph>.","pos":[59372,59447],"source":" to set the ribbon element to appear as a pop-up command; otherwise `FALSE`."},{"content":"Remarks","pos":[59457,59464]},{"pos":[59528,59565],"content":"CMFCRibbonBaseElement::SetDescription"},{"content":"Sets the description for the ribbon element.","pos":[59569,59613]},{"content":"Parameters","pos":[59685,59695]},{"content":"[in]","pos":[59699,59703]},{"content":"The description for the ribbon element.","pos":[59718,59757]},{"content":"Remarks","pos":[59767,59774]},{"content":"The framework displays the new description either on the status bar, or in the tooltip, or under the menu button.","pos":[59778,59891]},{"pos":[59946,59974],"content":"CMFCRibbonBaseElement::SetID"},{"content":"Sets the command ID of the ribbon element.","pos":[59978,60020]},{"content":"Parameters","pos":[60075,60085]},{"content":"[in]","pos":[60089,60093]},{"content":"The command ID.","pos":[60103,60118]},{"pos":[60182,60219],"content":"CMFCRibbonBaseElement::SetInitialMode"},{"content":"Sets the initial display size for the ribbon element.","pos":[60223,60276]},{"content":"Parameters","pos":[60352,60362]},{"content":"[in]","pos":[60366,60370]},{"content":"to limit the display size for the ribbon element to compact or intermediate; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","pos":[60391,60487],"source":" to limit the display size for the ribbon element to compact or intermediate; otherwise, `FALSE`."},{"content":"Remarks","pos":[60497,60504]},{"content":"The display size of ribbon elements can be compact, intermediate, or large.","pos":[60508,60583]},{"pos":[60640,60670],"content":"CMFCRibbonBaseElement::SetKeys"},{"content":"Sets the keytips for the ribbon element.","pos":[60674,60714]},{"content":"Parameters","pos":[60817,60827]},{"content":"[in]","pos":[60831,60835]},{"content":"The keytip for the ribbon element.","pos":[60850,60884]},{"content":"[in]","pos":[60891,60895]},{"content":"The keytip for the pop-up menu of the ribbon element.","pos":[60914,60967]},{"pos":[61028,61062],"content":"CMFCRibbonBaseElement::SetOriginal"},{"content":"Sets the original ribbon element for the ribbon element.","pos":[61066,61122]},{"content":"Parameters","pos":[61207,61217]},{"content":"[in]","pos":[61221,61225]},{"content":"Pointer to a ribbon element.","pos":[61241,61269]},{"content":"Remarks","pos":[61279,61286]},{"content":"Ribbon elements that are copied to another container retain a pointer to the original ribbon element.","pos":[61290,61391]},{"pos":[61458,61498],"content":"CMFCRibbonBaseElement::SetParentCategory"},{"content":"Sets the parent category for the ribbon element.","pos":[61502,61550]},{"content":"Parameters","pos":[61636,61646]},{"content":"[in]","pos":[61650,61654]},{"content":"Pointer to a ribbon category.","pos":[61668,61697]},{"content":"Remarks","pos":[61707,61714]},{"content":"The tabbed groups in ribbon controls are called categories.","pos":[61718,61777]},{"pos":[61840,61876],"content":"CMFCRibbonBaseElement::SetParentMenu"},{"content":"Sets the parent menu container for the ribbon element.","pos":[61880,61934]},{"content":"Parameters","pos":[62021,62031]},{"content":"[in]","pos":[62035,62039]},{"content":"The parent menu.","pos":[62054,62070]},{"content":"Remarks","pos":[62080,62087]},{"pos":[62155,62196],"content":"CMFCRibbonBaseElement::SetParentRibbonBar"},{"content":"Sets the parent ribbon bar for the ribbon element.","pos":[62200,62250]},{"content":"Parameters","pos":[62335,62345]},{"content":"[in]","pos":[62349,62353]},{"content":"Pointer to the parent ribbon bar.","pos":[62370,62403]},{"content":"Remarks","pos":[62413,62420]},{"pos":[62477,62507],"content":"CMFCRibbonBaseElement::SetRect"},{"content":"Sets the dimensions of the display rectangle for the ribbon element.","pos":[62511,62579]},{"content":"Parameters","pos":[62630,62640]},{"content":"[in]","pos":[62644,62648]},{"content":"The dimensions of the rectangle.","pos":[62659,62691]},{"content":"Remarks","pos":[62701,62708]},{"pos":[62765,62795],"content":"CMFCRibbonBaseElement::SetText"},{"content":"Sets the text and keytip for the ribbon element.","pos":[62799,62847]},{"content":"Parameters","pos":[62912,62922]},{"content":"[in]","pos":[62926,62930]},{"content":"The text and keytip for the ribbon element.","pos":[62945,62988]},{"content":"Remarks","pos":[62998,63005]},{"pos":[63009,63134],"content":"To set the keytip for the ribbon element, append the newline escape sequence followed by the keytip characters to <ph id=\"ph1\">`lpszText`</ph>.","source":"To set the keytip for the ribbon element, append the newline escape sequence followed by the keytip characters to `lpszText`."},{"content":"Example","pos":[63144,63151]},{"pos":[63453,63496],"content":"CMFCRibbonBaseElement::SetTextAlwaysOnRight"},{"content":"Sets the text for the ribbon element to display on the right.","pos":[63500,63561]},{"content":"Parameters","pos":[63639,63649]},{"content":"[in]","pos":[63653,63657]},{"content":"to display the text on the right; otherwise <ph id=\"ph1\">`FALSE`</ph>.","pos":[63675,63727],"source":" to display the text on the right; otherwise `FALSE`."},{"content":"Remarks","pos":[63737,63744]},{"pos":[63808,63845],"content":"CMFCRibbonBaseElement::SetToolTipText"},{"content":"Sets the tooltip text for the ribbon element.","pos":[63849,63894]},{"content":"Parameters","pos":[63966,63976]},{"content":"[in]","pos":[63980,63984]},{"content":"The tooltip text.","pos":[63999,64016]},{"pos":[64076,64109],"content":"CMFCRibbonBaseElement::SetVisible"},{"content":"Sets the visibility of the ribbon element.","pos":[64113,64155]},{"content":"Parameters","pos":[64214,64224]},{"content":"[in]","pos":[64228,64232]},{"content":"to display the ribbon element; <ph id=\"ph1\">`FALSE`</ph> to hide the ribbon element.","pos":[64256,64322],"source":" to display the ribbon element; `FALSE` to hide the ribbon element."},{"content":"Remarks","pos":[64332,64339]},{"pos":[64408,64450],"content":"CMFCRibbonBaseElement::StretchHorizontally"},{"content":"Stretches the width of the ribbon element.","pos":[64454,64496]},{"content":"Remarks","pos":[64557,64564]},{"content":"By default this method generates an assertion failure in debug builds and therefore should not be called.","pos":[64568,64673]},{"content":"Override this method to stretch the width of the ribbon element.","pos":[64674,64738]},{"pos":[64805,64845],"content":"CMFCRibbonBaseElement::StretchToWholeRow"},{"content":"Changes the display height of the ribbon element to the specified row height.","pos":[64849,64926]},{"content":"Parameters","pos":[65017,65027]},{"content":"[in]","pos":[65031,65035]},{"content":"This parameter is not used.","pos":[65045,65072]},{"content":"[in]","pos":[65079,65083]},{"content":"The height of the row.","pos":[65097,65119]},{"content":"Return Value","pos":[65129,65141]},{"pos":[65152,65202],"content":"if the display height was set; otherwise, <ph id=\"ph1\">`FALSE`</ph>.","source":" if the display height was set; otherwise, `FALSE`."},{"content":"Remarks","pos":[65212,65219]},{"content":"Override this method to change the display height of the ribbon element to the specified row height.","pos":[65223,65323]},{"pos":[65390,65430],"content":"CMFCRibbonBaseElement::UpdateTooltipInfo"},{"content":"Updates the tooltip text by using the command resource for the ribbon element.","pos":[65434,65512]},{"content":"Remarks","pos":[65571,65578]},{"pos":[65636,65667],"content":"CMFCRibbonBaseElement::HasFocus"},{"content":"Indicates whether the parent element has keyboard focus.","pos":[65671,65727]},{"content":"Return Value","pos":[65786,65798]},{"pos":[65809,65861],"content":"if the ribbon element is focused; otherwise <ph id=\"ph1\">`FALSE`</ph>.","source":" if the ribbon element is focused; otherwise `FALSE`."},{"content":"Remarks","pos":[65871,65878]},{"content":"See Also","pos":[65887,65895]},{"content":"Hierarchy Chart","pos":[65900,65915]},{"content":"Classes","pos":[65952,65959]}],"content":"---\ntitle: \"CMFCRibbonBaseElement Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMFCRibbonBaseElement\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCRibbonBaseElement class\"\nms.assetid: 419ea91b-5062-44cc-b0a3-f87d29566f62\ncaps.latest.revision: 34\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCRibbonBaseElement Class\nThe `CMFCRibbonBaseElement` class is the base class for all elements that you can add to a [ribbon bar](../../mfc/reference/cmfcribbonbar-class.md). Examples of ribbon elements are ribbon buttons, ribbon check boxes, and ribbon combo boxes.  \n  \n## Syntax  \n  \n```  \nclass CMFCRibbonBaseElement : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`CMFCRibbonBaseElement`|Constructs a `CMFCRibbonBaseElement` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCRibbonBaseElement::AddToKeyList](#cmfcribbonbaseelement__addtokeylist)|Adds a keytip for the ribbon element to an array of keytips.|  \n|[CMFCRibbonBaseElement::AddToListBox](#cmfcribbonbaseelement__addtolistbox)|Adds a ribbon element to the specified ribbon commands list box.|  \n|[CMFCRibbonBaseElement::CanBeAddedToQuickAccessToolBar](#cmfcribbonbaseelement__canbeaddedtoquickaccesstoolbar)|Indicates whether the ribbon element can be added to the quick access toolbar.|  \n|[CMFCRibbonBaseElement::CanBeCompacted](#cmfcribbonbaseelement__canbecompacted)|Indicates whether the size of the ribbon element can be compact.|  \n|[CMFCRibbonBaseElement::CanBeStretched](#cmfcribbonbaseelement__canbestretched)|Indicates whether the height of the ribbon element can increase vertically to the height of a ribbon row.|  \n|[CMFCRibbonBaseElement::CanBeStretchedHorizontally](#cmfcribbonbaseelement__canbestretchedhorizontally)|Indicates whether the width of the ribbon element can change.|  \n|[CMFCRibbonBaseElement::CleanUpSizes](#cmfcribbonbaseelement__cleanupsizes)|Cleans up the dimension settings for the ribbon element.|  \n|[CMFCRibbonBaseElement::ClosePopupMenu](#cmfcribbonbaseelement__closepopupmenu)|Closes the popup menu for the ribbon element.|  \n|[CMFCRibbonBaseElement::CopyFrom](#cmfcribbonbaseelement__copyfrom)|Copies the state of the specified `CMFCRibbonBaseElement` to the current object.|  \n|[CMFCRibbonBaseElement::DestroyCtrl](#cmfcribbonbaseelement__destroyctrl)|Destroys the ribbon element.|  \n|[CMFCRibbonBaseElement::DrawImage](#cmfcribbonbaseelement__drawimage)|Draws the image for the ribbon element.|  \n|[CMFCRibbonBaseElement::Find](#cmfcribbonbaseelement__find)|Returns the specified pointer to the ribbon element if it points to the current object.|  \n|[CMFCRibbonBaseElement::FindByData](#cmfcribbonbaseelement__findbydata)|Retrieves a pointer to the ribbon element if it contains the specified data.|  \n|[CMFCRibbonBaseElement::FindByID](#cmfcribbonbaseelement__findbyid)|Retrieves a pointer to the ribbon element if that element is identified by the specified command ID.|  \n|[CMFCRibbonBaseElement::FindByOriginal](#cmfcribbonbaseelement__findbyoriginal)|Retrieves a pointer to the ribbon element if its original ribbon element matches the specified ribbon element.|  \n|[CMFCRibbonBaseElement::GetCompactSize](#cmfcribbonbaseelement__getcompactsize)|Returns the compact size of the ribbon element.|  \n|[CMFCRibbonBaseElement::GetData](#cmfcribbonbaseelement__getdata)|Retrieves the user-defined data associated with the ribbon element.|  \n|[CMFCRibbonBaseElement::GetDescription](#cmfcribbonbaseelement__getdescription)|Returns the description of the ribbon element.|  \n|[CMFCRibbonBaseElement::GetDroppedDown](#cmfcribbonbaseelement__getdroppeddown)|Retrieves a pointer to the ribbon element if its pop-up menu is dropped down.|  \n|[CMFCRibbonBaseElement::GetElements](#cmfcribbonbaseelement__getelements)|Adds the current ribbon element to the specified array.|  \n|[CMFCRibbonBaseElement::GetElementsByID](#cmfcribbonbaseelement__getelementsbyid)|Adds the current ribbon element to the specified array if the current ribbon element contains the specified command ID.|  \n|[CMFCRibbonBaseElement::GetHighlighted](#cmfcribbonbaseelement__gethighlighted)|Retrieves a pointer to the ribbon element if it is highlighted.|  \n|[CMFCRibbonBaseElement::GetID](#cmfcribbonbaseelement__getid)|Returns the command ID of the ribbon element.|  \n|[CMFCRibbonBaseElement::GetImageSize](#cmfcribbonbaseelement__getimagesize)|Returns the image size of the ribbon element.|  \n|[CMFCRibbonBaseElement::GetIntermediateSize](#cmfcribbonbaseelement__getintermediatesize)|Returns the size of the ribbon element in its intermediate state.|  \n|[CMFCRibbonBaseElement::GetKeys](#cmfcribbonbaseelement__getkeys)|Returns the keytip associated with the ribbon element.|  \n|[CMFCRibbonBaseElement::GetKeyTipRect](#cmfcribbonbaseelement__getkeytiprect)|Retrieves the keytip boundary rectangle for the ribbon element.|  \n|[CMFCRibbonBaseElement::GetKeyTipSize](#cmfcribbonbaseelement__getkeytipsize)|Retrieves the size of the keytip text.|  \n|[CMFCRibbonBaseElement::GetLocationInGroup](#cmfcribbonbaseelement__getlocationingroup)|Indicates the display location of the ribbon element in a ribbon group.|  \n|[CMFCRibbonBaseElement::GetMenuKeys](#cmfcribbonbaseelement__getmenukeys)|Returns the keytips associated with a button.|  \n|[CMFCRibbonBaseElement::GetNotifyID](#cmfcribbonbaseelement__getnotifyid)|Retrieves the notification command ID for the ribbon element.|  \n|[CMFCRibbonBaseElement::GetOriginal](#cmfcribbonbaseelement__getoriginal)|Retrieves the original ribbon element.|  \n|[CMFCRibbonBaseElement::GetParentCategory](#cmfcribbonbaseelement__getparentcategory)|Retrieves the ribbon category for the ribbon element.|  \n|[CMFCRibbonBaseElement::GetParentPanel](#cmfcribbonbaseelement__getparentpanel)|Retrieves the ribbon panel that contains the ribbon element.|  \n|[CMFCRibbonBaseElement::GetParentRibbonBar](#cmfcribbonbaseelement__getparentribbonbar)|Retrieves the parent ribbon bar for the ribbon element.|  \n|[CMFCRibbonBaseElement::GetParentWnd](#cmfcribbonbaseelement__getparentwnd)|Retrieves the parent window for the ribbon element.|  \n|[CMFCRibbonBaseElement::GetPressed](#cmfcribbonbaseelement__getpressed)|Retrieves a pointer to the ribbon element if the user currently presses it.|  \n|[CMFCRibbonBaseElement::GetQuickAccessToolBarID](#cmfcribbonbaseelement__getquickaccesstoolbarid)|Retrieves the command ID of the ribbon element when it is located in the quick access toolbar.|  \n|[CMFCRibbonBaseElement::GetRect](#cmfcribbonbaseelement__getrect)|Returns the bounding rectangle of the ribbon element.|  \n|[CMFCRibbonBaseElement::GetRegularSize](#cmfcribbonbaseelement__getregularsize)|Returns the regular size of the ribbon element.|  \n|[CMFCRibbonBaseElement::GetSize](#cmfcribbonbaseelement__getsize)|Returns the current size of the ribbon element.|  \n|[CMFCRibbonBaseElement::GetText](#cmfcribbonbaseelement__gettext)|Returns the text associated with the ribbon element.|  \n|[CMFCRibbonBaseElement::GetToolTipText](#cmfcribbonbaseelement__gettooltiptext)|Returns tooltip text of the ribbon element.|  \n|[CMFCRibbonBaseElement::GetTopLevelRibbonBar](#cmfcribbonbaseelement__gettoplevelribbonbar)|Retrieves the top level ribbon bar for the ribbon element.|  \n|[CMFCRibbonBaseElement::HasCompactMode](#cmfcribbonbaseelement__hascompactmode)|Specifies whether the ribbon element has a compact mode.|  \n|[CMFCRibbonBaseElement::HasFocus](#cmfcribbonbaseelement__hasfocus)|Indicates whether the parent element has keyboard focus.|  \n|[CMFCRibbonBaseElement::HasIntermediateMode](#cmfcribbonbaseelement__hasintermediatemode)|Specifies whether the ribbon element has an intermediate mode.|  \n|[CMFCRibbonBaseElement::HasLargeMode](#cmfcribbonbaseelement__haslargemode)|Specifies whether the ribbon element has a large mode.|  \n|[CMFCRibbonBaseElement::HasMenu](#cmfcribbonbaseelement__hasmenu)|Indicates whether the ribbon element has a menu.|  \n|[CMFCRibbonBaseElement::HitTest](#cmfcribbonbaseelement__hittest)|Retrieves a pointer to the ribbon element if the specified point is located in it.|  \n|[CMFCRibbonBaseElement::IsAlignByColumn](#cmfcribbonbaseelement__isalignbycolumn)|Indicates whether the ribbon element is aligned vertically with other ribbon elements.|  \n|[CMFCRibbonBaseElement::IsAlwaysLargeImage](#cmfcribbonbaseelement__isalwayslargeimage)|Indicates whether the ribbon element image size is always large.|  \n|[CMFCRibbonBaseElement::IsAutoRepeatMode](#cmfcribbonbaseelement__isautorepeatmode)|Indicates whether the ribbon element is in auto repeat mode.|  \n|[CMFCRibbonBaseElement::IsChecked](#cmfcribbonbaseelement__ischecked)|Specifies whether the ribbon element is checked.|  \n|[CMFCRibbonBaseElement::IsCompactMode](#cmfcribbonbaseelement__iscompactmode)|Specifies whether the ribbon element is in a compact mode.|  \n|[CMFCRibbonBaseElement::IsDefaultMenuLook](#cmfcribbonbaseelement__isdefaultmenulook)||  \n|[CMFCRibbonBaseElement::IsDisabled](#cmfcribbonbaseelement__isdisabled)|Specifies whether the ribbon element is disabled.|  \n|[CMFCRibbonBaseElement::IsDroppedDown](#cmfcribbonbaseelement__isdroppeddown)|Determines whether the ribbon element displays a popup menu and is dropped down.|  \n|[CMFCRibbonBaseElement::IsFocused](#cmfcribbonbaseelement__isfocused)|Specifies whether the ribbon element has the focus.|  \n|[CMFCRibbonBaseElement::IsGalleryIcon](#cmfcribbonbaseelement__isgalleryicon)|Indicates whether the ribbon element is contained in a ribbon gallery.|  \n|[CMFCRibbonBaseElement::IsHighlighted](#cmfcribbonbaseelement__ishighlighted)|Specifies whether ribbon element is highlighted.|  \n|[CMFCRibbonBaseElement::IsIntermediateMode](#cmfcribbonbaseelement__isintermediatemode)|Indicates whether the current image for the ribbon element is intermediate size.|  \n|[CMFCRibbonBaseElement::IsLargeMode](#cmfcribbonbaseelement__islargemode)|Indicates whether the current image for the ribbon element is large sized.|  \n|[CMFCRibbonBaseElement::IsMenuMode](#cmfcribbonbaseelement__ismenumode)|Indicates whether the ribbon element is contained in a menu.|  \n|[CMFCRibbonBaseElement::IsPressed](#cmfcribbonbaseelement__ispressed)|Indicates whether the user has clicked the ribbon element.|  \n|[CMFCRibbonBaseElement::IsQATMode](#cmfcribbonbaseelement__isqatmode)|Indicates whether the ribbon element is contained in the quick access toolbar.|  \n|[CMFCRibbonBaseElement::IsSeparator](#cmfcribbonbaseelement__isseparator)|Indicates whether the ribbon element is a display separator.|  \n|[CMFCRibbonBaseElement::IsShowGroupBorder](#cmfcribbonbaseelement__isshowgroupborder)|Indicates whether the ribbon element is contained in a group that displays a common border.|  \n|[CMFCRibbonBaseElement::IsShowTooltipOnBottom](#cmfcribbonbaseelement__isshowtooltiponbottom)|Indicates whether the tooltip is displayed under the ribbon element.|  \n|[CMFCRibbonBaseElement::IsTabStop](#cmfcribbonbaseelement__istabstop)|Indicates whether the ribbon element can be selected with the keyboard.|  \n|[CMFCRibbonBaseElement::IsTextAlwaysOnRight](#cmfcribbonbaseelement__istextalwaysonright)|Indicates whether the text for the ribbon element is displayed on the right.|  \n|[CMFCRibbonBaseElement::IsVisible](#cmfcribbonbaseelement__isvisible)|Indicates whether the ribbon element is currently displayed.|  \n|[CMFCRibbonBaseElement::IsWholeRowHeight](#cmfcribbonbaseelement__iswholerowheight)|Indicates whether the display heigth of the ribbon element is the same as the display height of the ribbon panel that contains it.|  \n|[CMFCRibbonBaseElement::NotifyCommand](#cmfcribbonbaseelement__notifycommand)|Sends a command notification to the parent window of the ribbon element.|  \n|[CMFCRibbonBaseElement::NotifyHighlightListItem](#cmfcribbonbaseelement__notifyhighlightlistitem)|Notifies the parent window of the ribbon bar when a user highlights a ribbon element that is located in a list.|  \n|[CMFCRibbonBaseElement::OnAddToQAToolbar](#cmfcribbonbaseelement__onaddtoqatoolbar)|Adds the ribbon element to the specified quick access toolbar.|  \n|[CMFCRibbonBaseElement::OnAfterChangeRect](#cmfcribbonbaseelement__onafterchangerect)|Updates the tooltip for the ribbon element.|  \n|[CMFCRibbonBaseElement::OnAutoRepeat](#cmfcribbonbaseelement__onautorepeat)|Updates the ribbon element in response to sustained user input.|  \n|[CMFCRibbonBaseElement::OnCalcTextSize](#cmfcribbonbaseelement__oncalctextsize)|Calculates the size of the text for the ribbon element.|  \n|[CMFCRibbonBaseElement::OnChangeMenuHighlight](#cmfcribbonbaseelement__onchangemenuhighlight)|Called by the framework when the highlight changes for a ribbon element that is located in a menu.|  \n|[CMFCRibbonBaseElement::OnDraw](#cmfcribbonbaseelement__ondraw)|Called by the framework to draw the ribbon element.|  \n|[CMFCRibbonBaseElement::OnDrawKeyTip](#cmfcribbonbaseelement__ondrawkeytip)|Called by the framework to draw the keytip for the ribbon element.|  \n|[CMFCRibbonBaseElement::OnDrawMenuImage](#cmfcribbonbaseelement__ondrawmenuimage)|Called by the framework when the menu image for the ribbon element is drawn.|  \n|[CMFCRibbonBaseElement::OnDrawOnList](#cmfcribbonbaseelement__ondrawonlist)|Called by the framework to draw the ribbon element in a commands list box.|  \n|[CMFCRibbonBaseElement::OnKey](#cmfcribbonbaseelement__onkey)|Called by the framework when the user presses a keytip and the ribbon element has the focus.|  \n|[CMFCRibbonBaseElement::OnMenuKey](#cmfcribbonbaseelement__onmenukey)||  \n|[CMFCRibbonBaseElement::OnRTLChanged](#cmfcribbonbaseelement__onrtlchanged)|Called by the framework when the layout changes direction.|  \n|[CMFCRibbonBaseElement::OnShow](#cmfcribbonbaseelement__onshow)|Called by the framework to show or hide the ribbon element.|  \n|[CMFCRibbonBaseElement::OnShowPopupMenu](#cmfcribbonbaseelement__onshowpopupmenu)|Called by the framework when the ribbon element is going to display a popup menu.|  \n|[CMFCRibbonBaseElement::PostMenuCommand](#cmfcribbonbaseelement__postmenucommand)||  \n|[CMFCRibbonBaseElement::Redraw](#cmfcribbonbaseelement__redraw)|Updates the display for the ribbon element.|  \n|[CMFCRibbonBaseElement::SetACCData](#cmfcribbonbaseelement__setaccdata)|Sets the accessibility data for the ribbon element.|  \n|[CMFCRibbonBaseElement::SetCompactMode](#cmfcribbonbaseelement__setcompactmode)|Sets the display size for the ribbon element.|  \n|[CMFCRibbonBaseElement::SetData](#cmfcribbonbaseelement__setdata)|Associates a data item with the ribbon element.|  \n|[CMFCRibbonBaseElement::SetDefaultMenuLook](#cmfcribbonbaseelement__setdefaultmenulook)||  \n|[CMFCRibbonBaseElement::SetDescription](#cmfcribbonbaseelement__setdescription)|Sets the description for the ribbon element.|  \n|[CMFCRibbonBaseElement::SetID](#cmfcribbonbaseelement__setid)|Sets the command ID of the ribbon element.|  \n|[CMFCRibbonBaseElement::SetInitialMode](#cmfcribbonbaseelement__setinitialmode)|Sets the initial display size for the ribbon element.|  \n|[CMFCRibbonBaseElement::SetKeys](#cmfcribbonbaseelement__setkeys)|Sets a keytip for the ribbon element.|  \n|[CMFCRibbonBaseElement::SetOriginal](#cmfcribbonbaseelement__setoriginal)|Sets the original ribbon element for the ribbon element.|  \n|[CMFCRibbonBaseElement::SetParentCategory](#cmfcribbonbaseelement__setparentcategory)|Sets the parent category for the ribbon element.|  \n|[CMFCRibbonBaseElement::SetParentMenu](#cmfcribbonbaseelement__setparentmenu)|Sets the parent menu container for the ribbon element.|  \n|[CMFCRibbonBaseElement::SetParentRibbonBar](#cmfcribbonbaseelement__setparentribbonbar)|Sets the parent ribbon bar for the ribbon element.|  \n|[CMFCRibbonBaseElement::SetRect](#cmfcribbonbaseelement__setrect)|Sets the dimensions fot he display rectangle for the ribbon element.|  \n|[CMFCRibbonBaseElement::SetText](#cmfcribbonbaseelement__settext)|Sets the text for the ribbon element.|  \n|[CMFCRibbonBaseElement::SetTextAlwaysOnRight](#cmfcribbonbaseelement__settextalwaysonright)|Sets the text for the ribbon element to display on the right.|  \n|[CMFCRibbonBaseElement::SetToolTipText](#cmfcribbonbaseelement__settooltiptext)|Sets the tooltip text for the ribbon element.|  \n|[CMFCRibbonBaseElement::SetVisible](#cmfcribbonbaseelement__setvisible)|Sets the visibility state of the ribbon element.|  \n|[CMFCRibbonBaseElement::StretchHorizontally](#cmfcribbonbaseelement__stretchhorizontally)|Stretches the width of the ribbon element.|  \n|[CMFCRibbonBaseElement::StretchToWholeRow](#cmfcribbonbaseelement__stretchtowholerow)|Changes the display height of the ribbon element to the specified row height.|  \n|[CMFCRibbonBaseElement::UpdateTooltipInfo](#cmfcribbonbaseelement__updatetooltipinfo)|Updates the tooltip text by using the command resource for the ribbon element.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCRibbonBaseElement::OnProcessKey](#cmfcribbonbaseelement__onprocesskey)|Called by the framework when the user presses a shortcut key.|  \n|[CMFCRibbonBaseElement::OnSetFocus](#cmfcribbonbaseelement__onsetfocus)|Called by the framework when a ribbon element receives or loses the input focus.|  \n  \n## Remarks  \n The `CMFCRibbonBaseElement` class defines the properties that are common to all ribbon elements that include command ID, text label, tooltip text, element description, and state (which can be focused, highlighted, pressed, disabled, checked, or dropped down).  \n  \n The image size of a ribbon element is defined by the `RibbonImageType` member, which can be one of the following values:  \n  \n- `RibbonImageLarge`  \n  \n- `RibbonImageSmall`  \n  \n Depending on its size, a ribbon element displays either a small or large image.  \n  \n## Example  \n The following example demonstrates how to use various methods in the `CMFCRibbonBaseElement` class. The example shows how to get a `CMFCRibbonBaseElement` object from a `CMFCRibbonStatusBar` class, set the description for the ribbon element, set the text, set a keytip, and set the tooltip text for the ribbon element. This code snippet is part of the [Draw Client sample](../../visual-cpp-samples.md).  \n  \n [!code-cpp[NVC_MFC_DrawClient#8](../../mfc/reference/codesnippet/cpp/cmfcribbonbaseelement-class_1.cpp)]  \n[!code-cpp[NVC_MFC_DrawClient#9](../../mfc/reference/codesnippet/cpp/cmfcribbonbaseelement-class_2.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CMFCRibbonBaseElement](../../mfc/reference/cmfcribbonbaseelement-class.md)  \n  \n## Requirements  \n **Header:** afxbaseribbonelement.h  \n  \n##  <a name=\"cmfcribbonbaseelement__addtokeylist\"></a>  CMFCRibbonBaseElement::AddToKeyList  \n Adds a keytip for the ribbon element to an array of keytips.  \n  \n```  \nvirtual void AddToKeyList(\n    CArray<CMFCRibbonKeyTip*, CMFCRibbonKeyTip*>& arElems);\n```  \n  \n### Parameters  \n [in] `arElems`  \n Reference to a [CArray](../../mfc/reference/carray-class.md) of keytips.  \n  \n### Remarks  \n When the ribbon keytips feature is enabled, the framework displays ribbon keytips when the user presses the ALT key or the F10 key.  \n  \n##  <a name=\"cmfcribbonbaseelement__addtolistbox\"></a>  CMFCRibbonBaseElement::AddToListBox  \n Adds a ribbon element to the specified ribbon commands list box.  \n  \n```  \nvirtual int AddToListBox(\n    CMFCRibbonCommandsListBox* pWndListBox,  \n    BOOL bDeep);\n```  \n  \n### Parameters  \n [in] `pWndListBox`  \n Pointer to a commands list box.  \n  \n [in] `bDeep`  \n This parameter is not used.  \n  \n### Return Value  \n The zero-based index of the added ribbon element.  \n  \n### Remarks  \n The framework adds ribbon elements to a commands list box to enable the user to customize the user interface.  \n  \n##  <a name=\"cmfcribbonbaseelement__canbeaddedtoquickaccesstoolbar\"></a>  CMFCRibbonBaseElement::CanBeAddedToQuickAccessToolBar  \n Indicates whether the ribbon element can be added to the quick access toolbar.  \n  \n```  \nvirtual BOOL CanBeAddedToQuickAccessToolBar() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the element can be added; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__canbecompacted\"></a>  CMFCRibbonBaseElement::CanBeCompacted  \n Indicates whether the size of the ribbon element can be compact.  \n  \n```  \nvirtual BOOL CanBeCompacted() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the size of the ribbon element can be compact; otherwise, `FALSE`.  \n  \n### Remarks  \n The size of a ribbon element can be compact, intermediate, or large.  \n  \n##  <a name=\"cmfcribbonbaseelement__canbestretched\"></a>  CMFCRibbonBaseElement::CanBeStretched  \n Indicates whether the height of the ribbon element can increase vertically to the height of a ribbon row.  \n  \n```  \nvirtual BOOL CanBeStretched();\n```  \n  \n### Return Value  \n Always returns `TRUE`.  \n  \n### Remarks  \n By default this method always returns `TRUE`. Override this method to indicate whether the height of the ribbon element can increase vertically to the height of a ribbon row.  \n  \n##  <a name=\"cmfcribbonbaseelement__canbestretchedhorizontally\"></a>  CMFCRibbonBaseElement::CanBeStretchedHorizontally  \n Indicates whether the width of the ribbon element can change.  \n  \n```  \nvirtual BOOL CanBeStretchedHorizontally();\n```  \n  \n### Return Value  \n Always returns `FALSE`.  \n  \n### Remarks  \n By default this method always returns `FALSE`. Override this method to indicate whether the width of the ribbon element can change.  \n  \n##  <a name=\"cmfcribbonbaseelement__cleanupsizes\"></a>  CMFCRibbonBaseElement::CleanUpSizes  \n Cleans up the dimension settings for the ribbon element.  \n  \n```  \nvirtual void CleanUpSizes();\n```  \n  \n### Remarks  \n By default this method does nothing. Override this method in a derived class to reset the dimension settings for the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__closepopupmenu\"></a>  CMFCRibbonBaseElement::ClosePopupMenu  \n Closes the pop-up menu for the ribbon element.  \n  \n```  \nvirtual void ClosePopupMenu();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__copyfrom\"></a>  CMFCRibbonBaseElement::CopyFrom  \n Copies the state of the specified [CMFCRibbonBaseElement](../../mfc/reference/cmfcribbonbaseelement-class.md) to the current object.  \n  \n```  \nvirtual void CopyFrom(const CMFCRibbonBaseElement& src);\n```  \n  \n### Parameters  \n [in] `src`  \n The source [CMFCRibbonBaseElement](../../mfc/reference/cmfcribbonbaseelement-class.md) object.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__destroyctrl\"></a>  CMFCRibbonBaseElement::DestroyCtrl  \n Destroys the ribbon element.  \n  \n```  \nvirtual void DestroyCtrl();\n```  \n  \n### Remarks  \n By default this method does nothing. Override this method in a derived class to destroy the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__drawimage\"></a>  CMFCRibbonBaseElement::DrawImage  \n Draws the image for the ribbon element.  \n  \n```  \nvirtual void DrawImage(\n    CDC* pDC,  \n    RibbonImageType type,  \n    CRect rectImage);\n```  \n  \n### Parameters  \n [in] `pDC`  \n Pointer to a device context.  \n  \n [in] `type`  \n An image type enumerated value. See the Remarks section for a list of possible values.  \n  \n [in] `rectImage`  \n The image rectangle.  \n  \n### Remarks  \n By default this method does nothing. Override this method in a derived class to draw the image for the ribbon element.  \n  \n The following table lists possible values for the `type` parameter:  \n  \n `RibbonImageLarge`  \n Large 32x32 pixel image size.  \n  \n `RibbonImageSmall`  \n Small 16x16 pixel image size.  \n  \n##  <a name=\"cmfcribbonbaseelement__find\"></a>  CMFCRibbonBaseElement::Find  \n Returns the specified pointer if it points to the current object.  \n  \n```  \nvirtual CMFCRibbonBaseElement* Find(const CMFCRibbonBaseElement* pElement);\n```  \n  \n### Parameters  \n [in] `pElement`  \n Pointer to a ribbon element.  \n  \n### Return Value  \n A pointer to the ribbon element if `pElement` points to the current object; otherwise `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__findbydata\"></a>  CMFCRibbonBaseElement::FindByData  \n Retrieves a pointer to the ribbon element if it contains the specified data.  \n  \n```  \nvirtual CMFCRibbonBaseElement* FindByData(DWORD_PTR dwData);\n```  \n  \n### Parameters  \n [in] `dwData`  \n The data associated with a ribbon element.  \n  \n### Return Value  \n A pointer to the ribbon element if it contains the specified data; otherwise `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__findbyid\"></a>  CMFCRibbonBaseElement::FindByID  \n Retrieves a pointer to the ribbon element if that element is identified by the specified command ID.  \n  \n```  \nvirtual CMFCRibbonBaseElement* FindByID(UINT uiCmdID);\n```  \n  \n### Parameters  \n [in] `uiCmdID`  \n Command ID for a ribbon element.  \n  \n### Return Value  \n A pointer to the ribbon element if that element is identified by the specified command ID; otherwise `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__findbyoriginal\"></a>  CMFCRibbonBaseElement::FindByOriginal  \n Retrieves a pointer to the current ribbon element if its original ribbon element matches the specified ribbon element.  \n  \n```  \nvirtual CMFCRibbonBaseElement* FindByOriginal(CMFCRibbonBaseElement* pOriginal);\n```  \n  \n### Parameters  \n [in] `pOriginal`  \n Pointer to a ribbon element.  \n  \n### Return Value  \n A pointer to the ribbon element if its original ribbon element matches the specified ribbon element; otherwise `NULL`.  \n  \n### Remarks  \n Ribbon elements that are copied to another container retain a pointer to the original ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__getcompactsize\"></a>  CMFCRibbonBaseElement::GetCompactSize  \n Returns the compact size of the ribbon element.  \n  \n```  \nvirtual CSize GetCompactSize(CDC* pDC);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n### Return Value  \n The compact size of a ribbon element.  \n  \n> [!NOTE]\n>  The compact size means that the ribbon element is truncated (it displays a small image, or an image without a text).  \n  \n##  <a name=\"cmfcribbonbaseelement__getdata\"></a>  CMFCRibbonBaseElement::GetData  \n Retrieves the user-defined data associated with the ribbon element.  \n  \n```  \nDWORD_PTR GetData() const;\n\n \n```  \n  \n### Return Value  \n The user-defined data associated with the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__getdescription\"></a>  CMFCRibbonBaseElement::GetDescription  \n Returns the description of the ribbon element.  \n  \n```  \nvirtual CString GetDescription() const;\n\n \n```  \n  \n### Return Value  \n The ribbon element description. The description is displayed either on the status bar, or in a tooltip, or under the menu button if the ribbon element is located on the [CMFCRibbonMainPanel Class](../../mfc/reference/cmfcribbonmainpanel-class.md).  \n  \n##  <a name=\"cmfcribbonbaseelement__getdroppeddown\"></a>  CMFCRibbonBaseElement::GetDroppedDown  \n Retrieves a pointer to the ribbon element if its pop-up menu is dropped down.  \n  \n```  \nvirtual CMFCRibbonBaseElement* GetDroppedDown();\n```  \n  \n### Return Value  \n A pointer to the ribbon element if its pop-up menu is dropped down; otherwise `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__getelements\"></a>  CMFCRibbonBaseElement::GetElements  \n Adds the current ribbon element to the specified array.  \n  \n```  \nvirtual void GetElements(\n    CArray<CMFCRibbonBaseElement*, CMFCRibbonBaseElement*>& arElements);\n```  \n  \n### Parameters  \n [in, out] `arElements`  \n An array of ribbon elements.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__getelementsbyid\"></a>  CMFCRibbonBaseElement::GetElementsByID  \n Adds the current ribbon element to the specified array if the current ribbon element contains the specified command ID.  \n  \n```  \nvirtual void GetElementsByID(\n    UINT uiCmdID,  \n    CArray<CMFCRibbonBaseElement*, CMFCRibbonBaseElement*>& arElements);\n```  \n  \n### Parameters  \n [in] `uiCmdID`  \n Command ID of a ribbon element.  \n  \n [in] `arElements`  \n An array of ribbon elements.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__gethighlighted\"></a>  CMFCRibbonBaseElement::GetHighlighted  \n Retrieves a pointer to the ribbon element if it is highlighted.  \n  \n```  \nvirtual CMFCRibbonBaseElement* GetHighlighted();\n```  \n  \n### Return Value  \n A pointer to the ribbon element if it is highlighted; otherwise `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__getid\"></a>  CMFCRibbonBaseElement::GetID  \n Returns the command ID of the ribbon element.  \n  \n```  \nUINT GetID() const;\n\n \n```  \n  \n### Return Value  \n The command ID of the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__getimagesize\"></a>  CMFCRibbonBaseElement::GetImageSize  \n Returns the image size of the ribbon element.  \n  \n```  \nvirtual CSize GetImageSize(RibbonImageType R) const;\n\n \n```  \n  \n### Return Value  \n The image size of the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__getintermediatesize\"></a>  CMFCRibbonBaseElement::GetIntermediateSize  \n Returns the size of the ribbon element in its intermediate state.  \n  \n```  \nvirtual CSize GetIntermediateSize(CDC* pDC);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n### Return Value  \n The size of the ribbon element in its intermediate state.  \n  \n##  <a name=\"cmfcribbonbaseelement__getkeys\"></a>  CMFCRibbonBaseElement::GetKeys  \n Returns the keytip associated with the ribbon element.  \n  \n```  \nLPCTSTR GetKeys() const;\n\n \n```  \n  \n### Return Value  \n A keytip associated with the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__getkeytiprect\"></a>  CMFCRibbonBaseElement::GetKeyTipRect  \n Retrieves the keytip boundary rectangle for the ribbon element.  \n  \n```  \nvirtual CRect GetKeyTipRect(\n    CDC* pDC,  \n    BOOL bIsMenu);\n```  \n  \n### Parameters  \n [in] `pDC`  \n Pointer to a device context.  \n  \n [in] `bIsMenu`  \n `TRUE` if the ribbon element displays a pop-up menu; otherwise `FALSE`.  \n  \n### Return Value  \n Always returns a rectangle with 0 values.  \n  \n### Remarks  \n Override this method in a derived class to return the keytip boundary rectangle.  \n  \n##  <a name=\"cmfcribbonbaseelement__getkeytipsize\"></a>  CMFCRibbonBaseElement::GetKeyTipSize  \n Retrieves the size of the keytip text.  \n  \n```  \nvirtual CSize GetKeyTipSize(CDC* pDC);\n```  \n  \n### Parameters  \n [in] `pDC`  \n Pointer to a device context.  \n  \n### Return Value  \n The size of the keytip text.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__getlocationingroup\"></a>  CMFCRibbonBaseElement::GetLocationInGroup  \n Indicates the display location of the ribbon element in a ribbon group.  \n  \n```  \nRibbonElementLocation GetLocationInGroup() const;\n\n \n```  \n  \n### Return Value  \n A `RibbonElementLocation` enumerated value. The following table lists possible values.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`RibbonElementNotInGroup`|The ribbon element is not contained in a ribbon group.|  \n|`RibbonElementSingleInGroup`|The ribbon element is displayed as the only item in a ribbon group.|  \n|`RibbonElementFirstInGroup`|The ribbon element is displayed on the left end of a ribbon group.|  \n|`RibbonElementLastInGroup`|The ribbon element is displayed on the right end of a ribbon group.|  \n|`RibbonElementMiddleInGroup`|The ribbon element is not displayed on either end of a ribbon group.|  \n  \n### Remarks  \n Ribbon element groups are only aligned horizontally.  \n  \n##  <a name=\"cmfcribbonbaseelement__getmenukeys\"></a>  CMFCRibbonBaseElement::GetMenuKeys  \n Returns the menu keytip for the ribbon element.  \n  \n```  \nLPCTSTR GetMenuKeys() const;\n\n \n```  \n  \n### Return Value  \n The menu keytip associated with the ribbon element.  \n  \n### Remarks  \n When invoked, a menu keytip displays a pop-up menu.  \n  \n##  <a name=\"cmfcribbonbaseelement__getnotifyid\"></a>  CMFCRibbonBaseElement::GetNotifyID  \n Retrieves the notification command ID for the ribbon element.  \n  \n```  \nvirtual UINT GetNotifyID();\n```  \n  \n### Return Value  \n The notification command ID.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__getoriginal\"></a>  CMFCRibbonBaseElement::GetOriginal  \n Retrieves the original ribbon element.  \n  \n```  \nCMFCRibbonBaseElement* GetOriginal() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the original ribbon element.  \n  \n### Remarks  \n Ribbon elements that are copied to another container retain a pointer to the original ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__getparentcategory\"></a>  CMFCRibbonBaseElement::GetParentCategory  \n Retrieves the ribbon category for the ribbon element.  \n  \n```  \nCMFCRibbonCategory* GetParentCategory() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the ribbon category.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__getparentpanel\"></a>  CMFCRibbonBaseElement::GetParentPanel  \n Retrieves the ribbon panel that contains the ribbon element.  \n  \n```  \nvirtual CMFCRibbonPanel* GetParentPanel() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the ribbon panel that contains the ribbon element.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__getparentribbonbar\"></a>  CMFCRibbonBaseElement::GetParentRibbonBar  \n Retrieves the parent ribbon bar for the ribbon element.  \n  \n```  \nCMFCRibbonBar* GetParentRibbonBar() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the parent ribbon bar for the ribbon element.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__getparentwnd\"></a>  CMFCRibbonBaseElement::GetParentWnd  \n Retrieves the parent window for the ribbon element.  \n  \n```  \nvirtual CWnd* GetParentWnd() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the parent window for the ribbon element if the method was successful; otherwise, `NULL`.  \n  \n### Remarks  \n The parent window for a ribbon element is a [CMFCRibbonBar Class](../../mfc/reference/cmfcribbonbar-class.md) or a [CMFCRibbonPanelMenuBar](http://msdn.microsoft.com/en-us/7bd4b986-8b7b-493e-9746-bd3161b78581).  \n  \n##  <a name=\"cmfcribbonbaseelement__getpressed\"></a>  CMFCRibbonBaseElement::GetPressed  \n Retrieves a pointer to the ribbon element if the user currently presses it.  \n  \n```  \nvirtual CMFCRibbonBaseElement* GetPressed();\n```  \n  \n### Return Value  \n A pointer to the ribbon element if the user currently presses it; otherwise, `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__getquickaccesstoolbarid\"></a>  CMFCRibbonBaseElement::GetQuickAccessToolBarID  \n Retrieves the command ID of the ribbon element when it is located in the quick access toolbar.  \n  \n```  \nvirtual UINT GetQuickAccessToolBarID() const;\n\n \n```  \n  \n### Return Value  \n The command ID of the ribbon element when it is located in the quick access toolbar.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__getrect\"></a>  CMFCRibbonBaseElement::GetRect  \n Returns the bounding rectangle of the ribbon element.  \n  \n```  \nCRect GetRect() const;\n\n \n```  \n  \n### Return Value  \n The bounding rectangle of the ribbon element. The position of the rectangle is in the coordinates of the parent Ribbon control.  \n  \n##  <a name=\"cmfcribbonbaseelement__getregularsize\"></a>  CMFCRibbonBaseElement::GetRegularSize  \n Returns the regular size of the ribbon element.  \n  \n```  \nvirtual CSize GetRegularSize(CDC* pDC) = 0;  \n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n### Return Value  \n The regular size of the ribbon element.  \n  \n### Remarks  \n  \n> [!NOTE]\n>  The regular size is the maximal possible size of the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__getsize\"></a>  CMFCRibbonBaseElement::GetSize  \n Returns the current size of the ribbon element.  \n  \n```  \nvirtual CSize GetSize(CDC* pDC);\n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n### Return Value  \n The current size of the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__gettext\"></a>  CMFCRibbonBaseElement::GetText  \n Returns the text associated with the ribbon element.  \n  \n```  \nLPCTSTR GetText() const;\n\n \n```  \n  \n### Return Value  \n The text associated with the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__gettooltiptext\"></a>  CMFCRibbonBaseElement::GetToolTipText  \n Returns tooltip text of the ribbon element.  \n  \n```  \nvirtual CString GetToolTipText() const;\n\n \n```  \n  \n### Return Value  \n The tooltip text of the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__gettoplevelribbonbar\"></a>  CMFCRibbonBaseElement::GetTopLevelRibbonBar  \n Retrieves the top level ribbon bar for the ribbon element.  \n  \n```  \nCMFCRibbonBar* GetTopLevelRibbonBar() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the top level ribbon bar for the ribbon element if the method was successful; otherwise, `NULL`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__hascompactmode\"></a>  CMFCRibbonBaseElement::HasCompactMode  \n Specifies whether the ribbon element has a compact mode.  \n  \n```  \nvirtual BOOL HasCompactMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element has a compact mode. `FALSE` otherwise.  \n  \n### Remarks  \n  \n> [!NOTE]\n>  In the compact mode, an element displays a small image only.  \n  \n##  <a name=\"cmfcribbonbaseelement__hasintermediatemode\"></a>  CMFCRibbonBaseElement::HasIntermediateMode  \n Specifies whether the ribbon element has an intermediate mode.  \n  \n```  \nvirtual BOOL HasIntermediateMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element has an intermediate mode, `FALSE` otherwise. In the intermediate mode, an element displays a small image and text on the right of the image.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__haslargemode\"></a>  CMFCRibbonBaseElement::HasLargeMode  \n Determines whether the ribbon element has a large mode.  \n  \n```  \nvirtual BOOL HasLargeMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element has a large mode. `FALSE` otherwise.  \n  \n### Remarks  \n In the large mode, an element can take the full height of the parent panel.  \n  \n##  <a name=\"cmfcribbonbaseelement__hasmenu\"></a>  CMFCRibbonBaseElement::HasMenu  \n Indicates whether the ribbon element has a menu.  \n  \n```  \nvirtual BOOL HasMenu() const;\n\n \n```  \n  \n### Return Value  \n Always returns `FALSE`.  \n  \n### Remarks  \n By default this method always returns `FALSE`. Override this method in a derived class to indicate whether the ribbon element has a menu.  \n  \n##  <a name=\"cmfcribbonbaseelement__hittest\"></a>  CMFCRibbonBaseElement::HitTest  \n Retrieves a pointer to the ribbon element if the specified point is located in it.  \n  \n```  \nvirtual CMFCRibbonBaseElement* HitTest(CPoint point);\n```  \n  \n### Parameters  \n [in] `point`  \n This parameter is not used.  \n  \n### Return Value  \n A pointer to the ribbon element if it exists; otherwise `FALSE`.  \n  \n### Remarks  \n By default this method always returns a valid pointer to the ribbon element when it exists. Override this method to indicate if the point resides in the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__isalignbycolumn\"></a>  CMFCRibbonBaseElement::IsAlignByColumn  \n Indicates whether the ribbon element is aligned vertically with other ribbon elements.  \n  \n```  \nvirtual BOOL IsAlignByColumn() const;\n\n \n```  \n  \n### Return Value  \n Always returns `TRUE`.  \n  \n### Remarks  \n By default this method always returns `TRUE`. Override this method in a derived class to indicate whether the derived ribbon element is aligned vertically with other ribbon elements.  \n  \n##  <a name=\"cmfcribbonbaseelement__isalwayslargeimage\"></a>  CMFCRibbonBaseElement::IsAlwaysLargeImage  \n Indicates whether the ribbon element image size is always large.  \n  \n```  \nvirtual BOOL IsAlwaysLargeImage() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element image size is always large; otherwise `FALSE`.  \n  \n### Remarks  \n Large image size is 32 x 32 pixels.  \n  \n##  <a name=\"cmfcribbonbaseelement__isautorepeatmode\"></a>  CMFCRibbonBaseElement::IsAutoRepeatMode  \n Indicates whether the ribbon element is in auto repeat mode.  \n  \n```  \nvirtual BOOL IsAutoRepeatMode(int& nDelay) const;\n\n \n```  \n  \n### Parameters  \n [in] `nDelay`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns `FALSE`.  \n  \n### Remarks  \n By default this method always returns `FALSE`. Override this method to indicate whether the ribbon element is in auto repeat mode.  \n  \n In auto repeat mode, the ribbon element responds at a set interval, measured in milliseconds, to sustained user input.  \n  \n##  <a name=\"cmfcribbonbaseelement__ischecked\"></a>  CMFCRibbonBaseElement::IsChecked  \n Specifies whether the ribbon element is checked.  \n  \n```  \nvirtual BOOL IsChecked() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element is checked; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcribbonbaseelement__iscompactmode\"></a>  CMFCRibbonBaseElement::IsCompactMode  \n Specifies whether the ribbon element is in a compact mode.  \n  \n```  \nBOOL IsCompactMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element is in a compact mode; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcribbonbaseelement__isdefaultmenulook\"></a>  CMFCRibbonBaseElement::IsDefaultMenuLook  \n Indicates whether the ribbon element is set to appear as a pop-up command.  \n  \n```  \nBOOL IsDefaultMenuLook() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element is set to appear as a pop-up command; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__isdisabled\"></a>  CMFCRibbonBaseElement::IsDisabled  \n Specifies whether the ribbon element is disabled.  \n  \n```  \nvirtual BOOL IsDisabled() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element is disabled; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcribbonbaseelement__isdroppeddown\"></a>  CMFCRibbonBaseElement::IsDroppedDown  \n Specifies whether the ribbon element displays a pop-up menu and is dropped down.  \n  \n```  \nvirtual BOOL IsDroppedDown() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element is dropped down and displays a pop-up menu; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcribbonbaseelement__isfocused\"></a>  CMFCRibbonBaseElement::IsFocused  \n Specifies whether the ribbon element has the focus.  \n  \n```  \nvirtual BOOL IsFocused() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element has the focus; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcribbonbaseelement__isgalleryicon\"></a>  CMFCRibbonBaseElement::IsGalleryIcon  \n Indicates whether the ribbon element is contained in a ribbon gallery.  \n  \n```  \nvirtual BOOL IsGalleryIcon() const;\n\n \n```  \n  \n### Return Value  \n Always returns `FALSE`.  \n  \n### Remarks  \n By default this method always returns `FALSE`. Override this method in a derived class to indicate whether the ribbon element is contained in a ribbon gallery.  \n  \n##  <a name=\"cmfcribbonbaseelement__ishighlighted\"></a>  CMFCRibbonBaseElement::IsHighlighted  \n Specifies whether ribbon element is highlighted.  \n  \n```  \nvirtual BOOL IsHighlighted() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element is highlighted; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__isintermediatemode\"></a>  CMFCRibbonBaseElement::IsIntermediateMode  \n Indicates whether the current image for the ribbon element is intermediate size.  \n  \n```  \nBOOL IsIntermediateMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the image for the ribbon element is intermediate size; otherwise `FALSE`.  \n  \n### Remarks  \n Intermediate image size is 16 x 16 pixels.  \n  \n##  <a name=\"cmfcribbonbaseelement__islargemode\"></a>  CMFCRibbonBaseElement::IsLargeMode  \n Indicates whether the current image for the ribbon element is large size.  \n  \n```  \nBOOL IsLargeMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the image for the ribbon element is large size; otherwise `FALSE`.  \n  \n### Remarks  \n Large image size is 32 x 32 pixels.  \n  \n##  <a name=\"cmfcribbonbaseelement__ismenumode\"></a>  CMFCRibbonBaseElement::IsMenuMode  \n Indicates whether the ribbon element is contained in a menu.  \n  \n```  \nBOOL IsMenuMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element is contained in a menu; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__ispressed\"></a>  CMFCRibbonBaseElement::IsPressed  \n Indicates whether the user has clicked the ribbon element.  \n  \n```  \nvirtual BOOL IsPressed() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the user has clicked the ribbon element; otherwise `FALSE`.  \n  \n##  <a name=\"cmfcribbonbaseelement__isqatmode\"></a>  CMFCRibbonBaseElement::IsQATMode  \n Indicates whether the ribbon element is contained in the quick access toolbar.  \n  \n```  \nBOOL IsQATMode() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element is contained in the quick access toolbar; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__isseparator\"></a>  CMFCRibbonBaseElement::IsSeparator  \n Indicates whether the ribbon element is a display separator.  \n  \n```  \nvirtual BOOL IsSeparator() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element is a display separator; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__isshowgroupborder\"></a>  CMFCRibbonBaseElement::IsShowGroupBorder  \n Indicates whether the ribbon element is contained in a group that displays a common border.  \n  \n```  \nBOOL IsShowGroupBorder() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element is contained in a group that displays a common border; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__isshowtooltiponbottom\"></a>  CMFCRibbonBaseElement::IsShowTooltipOnBottom  \n Indicates whether the tooltip is displayed under the ribbon element.  \n  \n```  \nvirtual BOOL IsShowTooltipOnBottom() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the tooltip is displayed under the ribbon element; `FALSE` if the tooltip is displayed near the pointer.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__istabstop\"></a>  CMFCRibbonBaseElement::IsTabStop  \n Indicates whether the ribbon element can be selected with the keyboard.  \n  \n```  \nvirtual BOOL IsTabStop() const;\n\n \n```  \n  \n### Return Value  \n Always returns `TRUE`.  \n  \n### Remarks  \n By default this method always returns `TRUE`. Override this method to indicate whether the ribbon element can be selected with the keyboard.  \n  \n##  <a name=\"cmfcribbonbaseelement__istextalwaysonright\"></a>  CMFCRibbonBaseElement::IsTextAlwaysOnRight  \n Indicates whether the text for the ribbon element is displayed on the right.  \n  \n```  \nBOOL IsTextAlwaysOnRight() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the text for the ribbon element is displayed on the right; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__isvisible\"></a>  CMFCRibbonBaseElement::IsVisible  \n Indicates whether the ribbon element is currently displayed.  \n  \n```  \nBOOL IsVisible() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element is currently displayed; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__iswholerowheight\"></a>  CMFCRibbonBaseElement::IsWholeRowHeight  \n Indicates whether the display height of the ribbon element is the same as the display height of the ribbon panel that contains it.  \n  \n```  \nvirtual BOOL IsWholeRowHeight() const;\n\n \n```  \n  \n### Return Value  \n Always returns `FALSE`.  \n  \n### Remarks  \n By default this method always returns `FALSE`. Override this method to indicate whether the display height of the ribbon element is the same as the display height of the ribbon panel that contains it.  \n  \n##  <a name=\"cmfcribbonbaseelement__notifycommand\"></a>  CMFCRibbonBaseElement::NotifyCommand  \n Sends a command notification to the parent window of the ribbon element.  \n  \n```  \nBOOL NotifyCommand(BOOL bWithDelay = FALSE);\n```  \n  \n### Parameters  \n [in] `bWithDelay`  \n `TRUE` to add the command notification to the message queue of the parent window; `FALSE` to send the message immediately to the parent window.  \n  \n### Return Value  \n `TRUE` if the message was sent; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__notifyhighlightlistitem\"></a>  CMFCRibbonBaseElement::NotifyHighlightListItem  \n Notifies the parent window of the ribbon bar when a user highlights a ribbon element that is located in a list.  \n  \n```  \nvirtual void NotifyHighlightListItem(int nIndex);\n```  \n  \n### Parameters  \n [in] `nIndex`  \n The index of the ribbon element in the list.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__onaddtoqatoolbar\"></a>  CMFCRibbonBaseElement::OnAddToQAToolbar  \n Adds the ribbon element to the specified quick access toolbar.  \n  \n```  \nvirtual BOOL OnAddToQAToolbar(CMFCRibbonQuickAccessToolBar& qat);\n```  \n  \n### Parameters  \n [in] `qat`  \n The quick access toolbar.  \n  \n### Return Value  \n Always returns `TRUE` indicating the ribbon element was added to the quick access toolbar.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__onafterchangerect\"></a>  CMFCRibbonBaseElement::OnAfterChangeRect  \n Updates the tooltip for the ribbon element.  \n  \n```  \nvirtual void OnAfterChangeRect(CDC* pDC);\n```  \n  \n### Parameters  \n [in] `pDC`  \n This parameter is not used.  \n  \n### Remarks  \n By default this method updates the tooltip for the ribbon element. Override this method to update the ribbon element after its display rectangle has changed.  \n  \n##  <a name=\"cmfcribbonbaseelement__onautorepeat\"></a>  CMFCRibbonBaseElement::OnAutoRepeat  \n Updates the ribbon element in response to sustained user input.  \n  \n```  \nvirtual BOOL OnAutoRepeat();\n```  \n  \n### Return Value  \n Always returns `FALSE`.  \n  \n### Remarks  \n By default this method always return `FALSE`. Override this method to process sustained user input.  \n  \n##  <a name=\"cmfcribbonbaseelement__oncalctextsize\"></a>  CMFCRibbonBaseElement::OnCalcTextSize  \n Calculates the size of the text for the ribbon element.  \n  \n```  \nvirtual void OnCalcTextSize(CDC* pDC);\n```  \n  \n### Parameters  \n [in] `pDC`  \n This parameter is not used.  \n  \n### Remarks  \n By default this method does nothing. Override this method to calculate the size of the text for the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__onchangemenuhighlight\"></a>  CMFCRibbonBaseElement::OnChangeMenuHighlight  \n Called by the framework when the highlight changes for a ribbon element that is located in a menu.  \n  \n```  \nvirtual void OnChangeMenuHighlight(CMFCRibbonPanelMenuBar* pPanelMenuBar  \n    CMFCRibbonBaseElement* pHot);\n```  \n  \n### Parameters  \n [in] `pPanelMenuBar`  \n This parameter is not used.  \n  \n [in] `pHot`  \n This parameter is not used.  \n  \n### Remarks  \n By default this method does nothing. Override this method to update a ribbon element that is located in a menu when the highlight changes.  \n  \n##  <a name=\"cmfcribbonbaseelement__ondraw\"></a>  CMFCRibbonBaseElement::OnDraw  \n Called by the framework to draw the ribbon element.  \n  \n```  \nvirtual void OnDraw(CDC* pDC) = 0;  \n```  \n  \n### Parameters  \n [in] `pDC`  \n A pointer to a device context.  \n  \n### Remarks  \n Override this method in a derived class if you want to customize the drawing of a specific ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__ondrawkeytip\"></a>  CMFCRibbonBaseElement::OnDrawKeyTip  \n Called by the framework to draw the keytip for the ribbon element.  \n  \n```  \nvirtual void OnDrawKeyTip(\n    CDC* pDC,  \n    const CRect& rect,  \n    BOOL bIsMenu);\n```  \n  \n### Parameters  \n [in] `pDC`  \n Pointer to a device context.  \n  \n [in] `rect`  \n Boundary rectangle for the keytip.  \n  \n [in] `bIsMenu`  \n `TRUE` if the keytip is for a pop-up menu button; otherwise, `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__ondrawmenuimage\"></a>  CMFCRibbonBaseElement::OnDrawMenuImage  \n Called by the framework when the menu image for the ribbon element is drawn.  \n  \n```  \nvirtual BOOL OnDrawMenuImage(\n    CDC* pDC,  \n    CRect rect);\n```  \n  \n### Parameters  \n [in] `pDC`  \n Pointer to a device context.  \n  \n [in] `rect`  \n Menu image rectangle.  \n  \n### Return Value  \n Always returns `TRUE` to indicate the image was drawn.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__ondrawonlist\"></a>  CMFCRibbonBaseElement::OnDrawOnList  \n Called by the framework to draw the ribbon element in a commands list box.  \n  \n```  \nvirtual void OnDrawOnList(\n    CDC* pDC,  \n    CString strText,  \n    int nTextOffset,  \n    CRect rect,  \n    BOOL bIsSelected,  \n    BOOL bHighlighted);\n```  \n  \n### Parameters  \n [in] `pDC`  \n Pointer to a device context for the ribbon element.  \n  \n [in] `strText`  \n The display text.  \n  \n [in] `nTextOffset`  \n Distance, in pixels, from the left side of the list box to the display text.  \n  \n [in] `rect`  \n The display rectangle for the ribbon element.  \n  \n [in] `bIsSelected`  \n This parameter is not used.  \n  \n [in] `bHighlighted`  \n This parameter is not used.  \n  \n### Remarks  \n The commands list box displays ribbon elements to enable users to customize the quick access toolbar.  \n  \n##  <a name=\"cmfcribbonbaseelement__onkey\"></a>  CMFCRibbonBaseElement::OnKey  \n Called by the framework when the user presses a keytip and the ribbon element has the focus.  \n  \n```  \nvirtual BOOL OnKey(BOOL bIsMenuKey);\n```  \n  \n### Parameters  \n [in] `bIsMenuKey`  \n `TRUE` if the keytip displays a pop-up menu; otherwise, `FALSE`.  \n  \n### Return Value  \n `TRUE` if the event was handled; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__onmenukey\"></a>  CMFCRibbonBaseElement::OnMenuKey  \n Called by the framework when the user presses a menu keytip on the main panel.  \n  \n```  \nvirtual BOOL OnMenuKey(UINT nUpperChar);\n```  \n  \n### Parameters  \n [in] `nUpperChar`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns `FALSE`.  \n  \n### Remarks  \n By default this method always returns `FALSE`. Override this method to respond when a user presses a menu keytip on the main panel.  \n  \n##  <a name=\"cmfcribbonbaseelement__onprocesskey\"></a>  CMFCRibbonBaseElement::OnProcessKey  \n Called by the framework when the user presses a shortcut key.  \n  \n```  \nvirtual BOOL OnProcessKey(UINT nChar);\n```  \n  \n### Parameters  \n [in] `nChar`  \n This parameter is not used.  \n  \n### Return Value  \n Always returns `FALSE`.  \n  \n### Remarks  \n Override this method if you want the ribbon element to process a shortcut key.  \n  \n##  <a name=\"cmfcribbonbaseelement__onrtlchanged\"></a>  CMFCRibbonBaseElement::OnRTLChanged  \n Called by the framework when the layout changes direction.  \n  \n```  \nvirtual void OnRTLChanged(BOOL bIsRTL);\n```  \n  \n### Parameters  \n [in] `bIsRTL`  \n This parameter is not used.  \n  \n### Remarks  \n By default this method does nothing. Override this method to adjust the ribbon element when the layout changes direction. The default layout direction is left-to-right.  \n  \n##  <a name=\"cmfcribbonbaseelement__onsetfocus\"></a>  CMFCRibbonBaseElement::OnSetFocus  \n Called by the framework when a ribbon element receives or loses the input focus.  \n  \n```  \nvirtual void OnSetFocus(BOOL B);\n```  \n  \n### Remarks  \n Override this method in a derived class if you want your application to handle a change in the focus of a ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__onshow\"></a>  CMFCRibbonBaseElement::OnShow  \n Called by the framework to show or hide the ribbon element.  \n  \n```  \nvirtual void OnShow(BOOL bShow);\n```  \n  \n### Parameters  \n [in] `bShow`  \n This parameter is not used.  \n  \n### Remarks  \n By default this method does nothing. Override this method to show or hide the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__onshowpopupmenu\"></a>  CMFCRibbonBaseElement::OnShowPopupMenu  \n Called by the framework before the ribbon element shows a pop-up menu.  \n  \n```  \nvirtual void OnShowPopupMenu();\n```  \n  \n### Remarks  \n This method notifies the parent window of the ribbon bar that the ribbon element will show a pop-up menu.  \n  \n##  <a name=\"cmfcribbonbaseelement__postmenucommand\"></a>  CMFCRibbonBaseElement::PostMenuCommand  \n Closes the pop-up menu for the ribbon element and sends a close message to the parent menu.  \n  \n```  \nvoid PostMenuCommand(UINT uiCmdId);\n```  \n  \n### Parameters  \n [in] `uiCmdId`  \n The parameter is not used.  \n  \n### Remarks  \n The close message is only sent if the ribbon element is located on a pop-up menu.  \n  \n##  <a name=\"cmfcribbonbaseelement__redraw\"></a>  CMFCRibbonBaseElement::Redraw  \n Updates the display for the ribbon element.  \n  \n```  \nvirtual void Redraw();\n```  \n  \n### Remarks  \n This method redraws the display rectangle for the ribbon element by calling [CWnd::RedrawWindow](http://msdn.microsoft.com/library/windows/desktop/dd162911) with the `RDW_INVALIDATE`, `RDW_ERASE`, and `RDW_UPDATENOW` flags set.  \n  \n##  <a name=\"cmfcribbonbaseelement__setaccdata\"></a>  CMFCRibbonBaseElement::SetACCData  \n Sets the accessibility data for the ribbon element.  \n  \n```  \nvirtual BOOL SetACCData(\n    CWnd* pParent,  \n    CAccessibilityData& data);\n```  \n  \n### Parameters  \n `pParent`  \n The parent window for the ribbon element.  \n  \n `data`  \n The accessibility data for the ribbon element.  \n  \n### Return Value  \n Always returns `TRUE`.  \n  \n### Remarks  \n By default this method sets the accessibility data for the ribbon element and always returns `TRUE`. Override this method to set the accessibility data and return a value that indicates success or failure.  \n  \n##  <a name=\"cmfcribbonbaseelement__setcompactmode\"></a>  CMFCRibbonBaseElement::SetCompactMode  \n Sets the display size for the ribbon element.  \n  \n```  \nvirtual void SetCompactMode(BOOL bCompactMode = TRUE);\n```  \n  \n### Parameters  \n [in] `bCompactMode`  \n `TRUE` to reduce the display size of the ribbon element; `FALSE` to increase the display size of the ribbon element.  \n  \n### Remarks  \n The following table summarizes the logic for this method.  \n  \n|`bCompactMode`|Current ribbon element size|New ribbon element size|  \n|--------------------|---------------------------------|-----------------------------|  \n|`TRUE`|Compact|No change.|  \n|`TRUE`|Intermediate|Compact if it is possible.|  \n|`TRUE`|Large|Intermediate if it is possible.|  \n|`FALSE`|Compact|Intermediate if it is possible; otherwise large.|  \n  \n##  <a name=\"cmfcribbonbaseelement__setdata\"></a>  CMFCRibbonBaseElement::SetData  \n Associates a data item with the ribbon element.  \n  \n```  \nvoid SetData(DWORD_PTR dwData);\n```  \n  \n### Parameters  \n [in] `dwData`  \n The data value.  \n  \n##  <a name=\"cmfcribbonbaseelement__setdefaultmenulook\"></a>  CMFCRibbonBaseElement::SetDefaultMenuLook  \n Sets the ribbon element to appear as a pop-up command.  \n  \n```  \nvoid SetDefaultMenuLook(BOOL bIsDefaultMenuLook = TRUE);\n```  \n  \n### Parameters  \n [in] `bIsDefaultMenuLook`  \n `TRUE` to set the ribbon element to appear as a pop-up command; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__setdescription\"></a>  CMFCRibbonBaseElement::SetDescription  \n Sets the description for the ribbon element.  \n  \n```  \nvirtual void SetDescription(LPCTSTR lpszText);\n```  \n  \n### Parameters  \n [in] `lpszText`  \n The description for the ribbon element.  \n  \n### Remarks  \n The framework displays the new description either on the status bar, or in the tooltip, or under the menu button.  \n  \n##  <a name=\"cmfcribbonbaseelement__setid\"></a>  CMFCRibbonBaseElement::SetID  \n Sets the command ID of the ribbon element.  \n  \n```  \nvirtual void SetID(UINT nID);\n```  \n  \n### Parameters  \n [in] `nID`  \n The command ID.  \n  \n##  <a name=\"cmfcribbonbaseelement__setinitialmode\"></a>  CMFCRibbonBaseElement::SetInitialMode  \n Sets the initial display size for the ribbon element.  \n  \n```  \nvirtual void SetInitialMode(BOOL bOneRow = FALSE);\n```  \n  \n### Parameters  \n [in] `bOneRow`  \n `TRUE` to limit the display size for the ribbon element to compact or intermediate; otherwise, `FALSE`.  \n  \n### Remarks  \n The display size of ribbon elements can be compact, intermediate, or large.  \n  \n##  <a name=\"cmfcribbonbaseelement__setkeys\"></a>  CMFCRibbonBaseElement::SetKeys  \n Sets the keytips for the ribbon element.  \n  \n```  \nvirtual void SetKeys(\n    LPCTSTR lpszKeys,  \n    LPCTSTR lpszMenuKeys=NULL);\n```  \n  \n### Parameters  \n [in] `lpszKeys`  \n The keytip for the ribbon element.  \n  \n [in] `lpszMenuKeys`  \n The keytip for the pop-up menu of the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__setoriginal\"></a>  CMFCRibbonBaseElement::SetOriginal  \n Sets the original ribbon element for the ribbon element.  \n  \n```  \nvirtual void SetOriginal(CMFCRibbonBaseElement* pOriginal);\n```  \n  \n### Parameters  \n [in] `pOriginal`  \n Pointer to a ribbon element.  \n  \n### Remarks  \n Ribbon elements that are copied to another container retain a pointer to the original ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__setparentcategory\"></a>  CMFCRibbonBaseElement::SetParentCategory  \n Sets the parent category for the ribbon element.  \n  \n```  \nvirtual void SetParentCategory(CMFCRibbonCategory* pParent);\n```  \n  \n### Parameters  \n [in] `pParent`  \n Pointer to a ribbon category.  \n  \n### Remarks  \n The tabbed groups in ribbon controls are called categories.  \n  \n##  <a name=\"cmfcribbonbaseelement__setparentmenu\"></a>  CMFCRibbonBaseElement::SetParentMenu  \n Sets the parent menu container for the ribbon element.  \n  \n```  \nvirtual void SetParentMenu(CMFCRibbonPanelMenuBar* pMenuBar);\n```  \n  \n### Parameters  \n [in] `pMenuBar`  \n The parent menu.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__setparentribbonbar\"></a>  CMFCRibbonBaseElement::SetParentRibbonBar  \n Sets the parent ribbon bar for the ribbon element.  \n  \n```  \nvirtual void SetParentRibbonBar(CMFCRibbonBar* pRibbonBar);\n```  \n  \n### Parameters  \n [in] `pRibbonBar`  \n Pointer to the parent ribbon bar.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__setrect\"></a>  CMFCRibbonBaseElement::SetRect  \n Sets the dimensions of the display rectangle for the ribbon element.  \n  \n```  \nvoid SetRect(CRect rect);\n```  \n  \n### Parameters  \n [in] `rect`  \n The dimensions of the rectangle.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__settext\"></a>  CMFCRibbonBaseElement::SetText  \n Sets the text and keytip for the ribbon element.  \n  \n```  \nvirtual void SetText(LPCTSTR lpszText);\n```  \n  \n### Parameters  \n [in] `lpszText`  \n The text and keytip for the ribbon element.  \n  \n### Remarks  \n To set the keytip for the ribbon element, append the newline escape sequence followed by the keytip characters to `lpszText`.  \n  \n### Example  \n  \n```  \n//Set the text for the ribbon element  \nSetText(_T(\"Margins\"))  \n//Set the text and a single-letter keytip  \nSetText(_T(\"Margins\\nm\"))  \n//Set the text and a multiple-letter keytip  \nSetText(_T(\"Line Numbers\\nln\"))  \n```  \n  \n##  <a name=\"cmfcribbonbaseelement__settextalwaysonright\"></a>  CMFCRibbonBaseElement::SetTextAlwaysOnRight  \n Sets the text for the ribbon element to display on the right.  \n  \n```  \nvirtual void SetTextAlwaysOnRight(BOOL bSet = TRUE);\n```  \n  \n### Parameters  \n [in] `bSet`  \n `TRUE` to display the text on the right; otherwise `FALSE`.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__settooltiptext\"></a>  CMFCRibbonBaseElement::SetToolTipText  \n Sets the tooltip text for the ribbon element.  \n  \n```  \nvirtual void SetToolTipText(LPCTSTR lpszText);\n```  \n  \n### Parameters  \n [in] `lpszText`  \n The tooltip text.  \n  \n##  <a name=\"cmfcribbonbaseelement__setvisible\"></a>  CMFCRibbonBaseElement::SetVisible  \n Sets the visibility of the ribbon element.  \n  \n```  \nvoid SetVisible(BOOL bIsVisible);\n```  \n  \n### Parameters  \n [in] `bIsVisible`  \n `TRUE` to display the ribbon element; `FALSE` to hide the ribbon element.  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__stretchhorizontally\"></a>  CMFCRibbonBaseElement::StretchHorizontally  \n Stretches the width of the ribbon element.  \n  \n```  \nvirtual void StretchHorizontally();\n```  \n  \n### Remarks  \n By default this method generates an assertion failure in debug builds and therefore should not be called. Override this method to stretch the width of the ribbon element.  \n  \n##  <a name=\"cmfcribbonbaseelement__stretchtowholerow\"></a>  CMFCRibbonBaseElement::StretchToWholeRow  \n Changes the display height of the ribbon element to the specified row height.  \n  \n```  \nvirtual BOOL StretchToWholeRow(\n    CDC* pDC,  \n    int nHeight);\n```  \n  \n### Parameters  \n [in] `pDC`  \n This parameter is not used.  \n  \n [in] `nHeight`  \n The height of the row.  \n  \n### Return Value  \n `TRUE` if the display height was set; otherwise, `FALSE`.  \n  \n### Remarks  \n Override this method to change the display height of the ribbon element to the specified row height.  \n  \n##  <a name=\"cmfcribbonbaseelement__updatetooltipinfo\"></a>  CMFCRibbonBaseElement::UpdateTooltipInfo  \n Updates the tooltip text by using the command resource for the ribbon element.  \n  \n```  \nvirtual void UpdateTooltipInfo();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cmfcribbonbaseelement__hasfocus\"></a>  CMFCRibbonBaseElement::HasFocus  \n Indicates whether the parent element has keyboard focus.  \n  \n```  \nvirtual BOOL HasFocus() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the ribbon element is focused; otherwise `FALSE`.  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)\n"}