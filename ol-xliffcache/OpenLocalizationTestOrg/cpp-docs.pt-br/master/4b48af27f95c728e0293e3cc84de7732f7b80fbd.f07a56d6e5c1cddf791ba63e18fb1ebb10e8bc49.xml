{"nodes":[{"pos":[12,65],"content":"How to: Select Among Completed Tasks | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Select Among Completed Tasks | Microsoft Docs","pos":[0,53]}]},{"content":"How to: Select Among Completed Tasks","pos":[715,751]},{"pos":[752,992],"content":"This example shows how to use the <bpt id=\"p1\">[</bpt>concurrency::choice<ept id=\"p1\">](../../parallel/concrt/reference/choice-class.md)</ept> and <bpt id=\"p2\">[</bpt>concurrency::join<ept id=\"p2\">](../../parallel/concrt/reference/join-class.md)</ept> classes to select the first task to complete a search algorithm.","source":"This example shows how to use the [concurrency::choice](../../parallel/concrt/reference/choice-class.md) and [concurrency::join](../../parallel/concrt/reference/join-class.md) classes to select the first task to complete a search algorithm."},{"content":"Example","pos":[1001,1008]},{"content":"The following example performs two search algorithms in parallel and selects the first algorithm to complete.","pos":[1012,1121]},{"content":"This example defines the <ph id=\"ph1\">`employee`</ph> type, which holds a numeric identifier and a salary for an employee.","pos":[1122,1226],"source":" This example defines the `employee` type, which holds a numeric identifier and a salary for an employee."},{"content":"The <ph id=\"ph1\">`find_employee`</ph> function finds the first employee that has the provided identifier or the provided salary.","pos":[1227,1337],"source":" The `find_employee` function finds the first employee that has the provided identifier or the provided salary."},{"content":"The <ph id=\"ph1\">`find_employee`</ph> function also handles the case where no employee has the provided identifier or salary.","pos":[1338,1445],"source":" The `find_employee` function also handles the case where no employee has the provided identifier or salary."},{"content":"The <ph id=\"ph1\">`wmain`</ph> function creates an array of <ph id=\"ph2\">`employee`</ph> objects and searches for several identifier and salary values.","pos":[1446,1560],"source":" The `wmain` function creates an array of `employee` objects and searches for several identifier and salary values."},{"pos":[1567,1638],"content":"The example uses a <ph id=\"ph1\">`choice`</ph> object to select among the following cases:","source":"The example uses a `choice` object to select among the following cases:"},{"content":"An employee who has the provided identifier exists.","pos":[1648,1699]},{"content":"An employee who has the provided salary exists.","pos":[1709,1756]},{"content":"No employee who has the provided identifier or salary exists.","pos":[1766,1827]},{"content":"For the first two cases, the example uses a <bpt id=\"p1\">[</bpt>concurrency::single_assignment<ept id=\"p1\">](../../parallel/concrt/reference/single-assignment-class.md)</ept> object to hold the identifier and another <ph id=\"ph1\">`single_assignment`</ph> object to hold the salary.","pos":[1834,2059],"source":"For the first two cases, the example uses a [concurrency::single_assignment](../../parallel/concrt/reference/single-assignment-class.md) object to hold the identifier and another `single_assignment` object to hold the salary."},{"content":"The example uses a <ph id=\"ph1\">`join`</ph> object for the third case.","pos":[2060,2112],"source":" The example uses a `join` object for the third case."},{"content":"The <ph id=\"ph1\">`join`</ph> object is composed of two additional <ph id=\"ph2\">`single_assignment`</ph> objects, one for the case where no employee who has the provided identifier exists, and one for the case where no employee who has the provided salary exists.","pos":[2113,2339],"source":" The `join` object is composed of two additional `single_assignment` objects, one for the case where no employee who has the provided identifier exists, and one for the case where no employee who has the provided salary exists."},{"content":"The <ph id=\"ph1\">`join`</ph> object sends a message when each of its members receives a message.","pos":[2340,2418],"source":" The `join` object sends a message when each of its members receives a message."},{"content":"In this example, the <ph id=\"ph1\">`join`</ph> object sends a message when no employee who has the provided identifier or salary exists.","pos":[2419,2536],"source":" In this example, the `join` object sends a message when no employee who has the provided identifier or salary exists."},{"content":"The example uses a <bpt id=\"p1\">[</bpt>concurrency::structured_task_group<ept id=\"p1\">](../../parallel/concrt/reference/structured-task-group-class.md)</ept> object to run both search algorithms in parallel.","pos":[2543,2712],"source":"The example uses a [concurrency::structured_task_group](../../parallel/concrt/reference/structured-task-group-class.md) object to run both search algorithms in parallel."},{"content":"Each search task writes to one of the <ph id=\"ph1\">`single_assignment`</ph> objects to indicate whether the given employee exists.","pos":[2713,2825],"source":" Each search task writes to one of the `single_assignment` objects to indicate whether the given employee exists."},{"content":"The example uses the <bpt id=\"p1\">[</bpt>concurrency::receive<ept id=\"p1\">](reference/concurrency-namespace-functions.md#receive)</ept> function to obtain the index of the first buffer that contains a message and a <ph id=\"ph1\">`switch`</ph> block to print the result.","pos":[2826,3038],"source":" The example uses the [concurrency::receive](reference/concurrency-namespace-functions.md#receive) function to obtain the index of the first buffer that contains a message and a `switch` block to print the result."},{"pos":[3056,3078],"content":"concrt-find-employee#1"},{"content":"This example produces the following output.","pos":[3168,3211]},{"pos":[3422,3702],"content":"This example uses the <bpt id=\"p1\">[</bpt>concurrency::make_choice<ept id=\"p1\">](reference/concurrency-namespace-functions.md#make_choice)</ept> helper function to create <ph id=\"ph1\">`choice`</ph> objects and the <bpt id=\"p2\">[</bpt>concurrency::make_join<ept id=\"p2\">](reference/concurrency-namespace-functions.md#make_join)</ept> helper function to create <ph id=\"ph2\">`join`</ph> objects.","source":"This example uses the [concurrency::make_choice](reference/concurrency-namespace-functions.md#make_choice) helper function to create `choice` objects and the [concurrency::make_join](reference/concurrency-namespace-functions.md#make_join) helper function to create `join` objects."},{"content":"Compiling the Code","pos":[3711,3729]},{"pos":[3733,3928],"content":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`find-employee.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.","source":"Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `find-employee.cpp` and then run the following command in a Visual Studio Command Prompt window."},{"content":"cl.exe /EHsc find-employee.cpp","pos":[3937,3967]},{"content":"See Also","pos":[3978,3986]},{"content":"Asynchronous Agents Library","pos":[3991,4018]},{"content":"Asynchronous Message Blocks","pos":[4079,4106]},{"content":"Message Passing Functions","pos":[4167,4192]},{"content":"choice Class","pos":[4251,4263]},{"content":"join Class","pos":[4319,4329]}],"content":"---\ntitle: \"How to: Select Among Completed Tasks | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"selecting among completed tasks [Concurrency Runtime]\"\n  - \"completed tasks, selecting among [Concurrency Runtime]\"\nms.assetid: c8ccc160-043f-4599-847b-32ed270bb257\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Select Among Completed Tasks\nThis example shows how to use the [concurrency::choice](../../parallel/concrt/reference/choice-class.md) and [concurrency::join](../../parallel/concrt/reference/join-class.md) classes to select the first task to complete a search algorithm.  \n  \n## Example  \n The following example performs two search algorithms in parallel and selects the first algorithm to complete. This example defines the `employee` type, which holds a numeric identifier and a salary for an employee. The `find_employee` function finds the first employee that has the provided identifier or the provided salary. The `find_employee` function also handles the case where no employee has the provided identifier or salary. The `wmain` function creates an array of `employee` objects and searches for several identifier and salary values.  \n  \n The example uses a `choice` object to select among the following cases:  \n  \n1.  An employee who has the provided identifier exists.  \n  \n2.  An employee who has the provided salary exists.  \n  \n3.  No employee who has the provided identifier or salary exists.  \n  \n For the first two cases, the example uses a [concurrency::single_assignment](../../parallel/concrt/reference/single-assignment-class.md) object to hold the identifier and another `single_assignment` object to hold the salary. The example uses a `join` object for the third case. The `join` object is composed of two additional `single_assignment` objects, one for the case where no employee who has the provided identifier exists, and one for the case where no employee who has the provided salary exists. The `join` object sends a message when each of its members receives a message. In this example, the `join` object sends a message when no employee who has the provided identifier or salary exists.  \n  \n The example uses a [concurrency::structured_task_group](../../parallel/concrt/reference/structured-task-group-class.md) object to run both search algorithms in parallel. Each search task writes to one of the `single_assignment` objects to indicate whether the given employee exists. The example uses the [concurrency::receive](reference/concurrency-namespace-functions.md#receive) function to obtain the index of the first buffer that contains a message and a `switch` block to print the result.  \n  \n [!code-cpp[concrt-find-employee#1](../../parallel/concrt/codesnippet/cpp/how-to-select-among-completed-tasks_1.cpp)]  \n  \n This example produces the following output.  \n  \n```Output  \nEmployee with id 14758 has salary 27780.00.  \nEmployee with salary 29150.00 has id 84345.  \nEmployee with id 61935 has salary 29905.00.  \nNo employee has id 899 or salary 31223.00.  \n```  \n  \n This example uses the [concurrency::make_choice](reference/concurrency-namespace-functions.md#make_choice) helper function to create `choice` objects and the [concurrency::make_join](reference/concurrency-namespace-functions.md#make_join) helper function to create `join` objects.  \n  \n## Compiling the Code  \n Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named `find-employee.cpp` and then run the following command in a Visual Studio Command Prompt window.  \n  \n **cl.exe /EHsc find-employee.cpp**  \n  \n## See Also  \n [Asynchronous Agents Library](../../parallel/concrt/asynchronous-agents-library.md)   \n [Asynchronous Message Blocks](../../parallel/concrt/asynchronous-message-blocks.md)   \n [Message Passing Functions](../../parallel/concrt/message-passing-functions.md)   \n [choice Class](../../parallel/concrt/reference/choice-class.md)   \n [join Class](../../parallel/concrt/reference/join-class.md)\n"}