<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c126bd5bde203e2c04ff008992bc5758a2b3e77e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\module-states-of-a-regular-dll-dynamically-linked-to-mfc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a504979f384fa7310129d15f40ea5d56e779fba1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aaa86bc38cd5966dbeab76842158daedd0616bb3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Module States of a Regular DLL Dynamically Linked to MFC | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Module States of a Regular DLL Dynamically Linked to MFC</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The ability to dynamically link a regular DLL to the MFC DLL allows some configurations that are very complicated.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, a regular DLL and the executable that uses it can both dynamically link to the MFC DLL and to any extension DLLs.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This configuration poses a problem with regard to the MFC global data, such as the pointer to the current <ph id="ph1">`CWinApp`</ph> object and handle maps.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Before MFC version 4.0, this global data resided in the MFC DLL itself and was shared by all the modules in the process.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because each process using a Win32 DLL gets its own copy of the DLL's data, this scheme provided an easy way to track per-process data.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Also, because the AFXDLL model presumed that there would be only one <ph id="ph1">`CWinApp`</ph> object and only one set of handle maps in the process, these items could be tracked in the MFC DLL itself.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>But with the ability to dynamically link a regular DLL to the MFC DLL, it is now possible to have two or more <ph id="ph1">`CWinApp`</ph> objects in a process â€” and also two or more sets of handle maps.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>How does MFC keep track of which ones it should be using?</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The solution is to give each module (application or regular DLL) its own copy of this global state information.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Thus, a call to <bpt id="p1">**</bpt>AfxGetApp<ept id="p1">**</ept> in the regular DLL returns a pointer to the <ph id="ph1">`CWinApp`</ph> object in the DLL, not the one in the executable.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This per-module copy of the MFC global data is known as a module state and is described in <bpt id="p1">[</bpt>MFC Tech Note 58<ept id="p1">](../mfc/tn058-mfc-module-state-implementation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The MFC common window procedure automatically switches to the correct module state, so you do not need to worry about it in any message handlers implemented in your regular DLL.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>But when your executable calls into the regular DLL, you do need to explicitly set the current module state to the one for the DLL.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To do this, use the <bpt id="p1">**</bpt>AFX_MANAGE_STATE<ept id="p1">**</ept> macro in every function exported from the DLL.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is done by adding the following line of code to the beginning of functions exported from the DLL:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>What do you want to know more about?</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Managing the state data of MFC modules</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Regular DLLs dynamically linked to MFC</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Extension DLLs</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>DLLs in Visual C++</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>