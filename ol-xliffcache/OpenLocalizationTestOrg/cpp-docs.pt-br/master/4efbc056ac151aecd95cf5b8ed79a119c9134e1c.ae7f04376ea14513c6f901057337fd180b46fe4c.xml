{"nodes":[{"pos":[12,46],"content":"CString Semantics | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CString Semantics | Microsoft Docs","pos":[0,34]}]},{"content":"CString Semantics","pos":[677,694]},{"content":"Even though <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../atl-mfc-shared/reference/cstringt-class.md)</ept> objects are dynamic objects that can grow, they act like built-in primitive types and simple classes.","pos":[695,865],"source":"Even though [CString](../atl-mfc-shared/reference/cstringt-class.md) objects are dynamic objects that can grow, they act like built-in primitive types and simple classes."},{"content":"Each <ph id=\"ph1\">`CString`</ph> object represents a unique value.","pos":[866,914],"source":" Each `CString` object represents a unique value."},{"content":"objects should be thought of as the actual strings rather than as pointers to strings.","pos":[925,1011]},{"content":"You can assign one <bpt id=\"p1\">**</bpt>CString<ept id=\"p1\">**</ept> object to another.","pos":[1018,1067],"source":"You can assign one **CString** object to another."},{"content":"However, when you modify one of the two <ph id=\"ph1\">`CString`</ph> objects, the other <ph id=\"ph2\">`CString`</ph> object is not modified, as shown by the following example:","pos":[1068,1205],"source":" However, when you modify one of the two `CString` objects, the other `CString` object is not modified, as shown by the following example:"},{"pos":[1223,1247],"content":"NVC_ATLMFC_Utilities#188"},{"content":"Note in the example that the two <ph id=\"ph1\">`CString`</ph> objects are considered \"equal\" because they represent the same character string.","pos":[1315,1438],"source":"Note in the example that the two `CString` objects are considered \"equal\" because they represent the same character string."},{"content":"The <ph id=\"ph1\">`CString`</ph> class overloads the equality operator (<ph id=\"ph2\">`==`</ph>) to compare two <ph id=\"ph3\">`CString`</ph> objects based on their value (contents) rather than their identity (address).","pos":[1439,1600],"source":" The `CString` class overloads the equality operator (`==`) to compare two `CString` objects based on their value (contents) rather than their identity (address)."},{"content":"See Also","pos":[1609,1617]},{"content":"Strings (ATL/MFC)","pos":[1622,1639]}],"content":"---\ntitle: \"CString Semantics | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"semantics in Cstring\"\n  - \"CString objects, assignment semantics\"\n  - \"assignment statements, assigning CString objects\"\nms.assetid: d4023480-526f-499a-85f6-324b4de5b85f\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CString Semantics\nEven though [CString](../atl-mfc-shared/reference/cstringt-class.md) objects are dynamic objects that can grow, they act like built-in primitive types and simple classes. Each `CString` object represents a unique value. `CString` objects should be thought of as the actual strings rather than as pointers to strings.  \n  \n You can assign one **CString** object to another. However, when you modify one of the two `CString` objects, the other `CString` object is not modified, as shown by the following example:  \n  \n [!code-cpp[NVC_ATLMFC_Utilities#188](../atl-mfc-shared/codesnippet/cpp/cstring-semantics_1.cpp)]  \n  \n Note in the example that the two `CString` objects are considered \"equal\" because they represent the same character string. The `CString` class overloads the equality operator (`==`) to compare two `CString` objects based on their value (contents) rather than their identity (address).  \n  \n## See Also  \n [Strings (ATL/MFC)](../atl-mfc-shared/strings-atl-mfc.md)\n\n"}