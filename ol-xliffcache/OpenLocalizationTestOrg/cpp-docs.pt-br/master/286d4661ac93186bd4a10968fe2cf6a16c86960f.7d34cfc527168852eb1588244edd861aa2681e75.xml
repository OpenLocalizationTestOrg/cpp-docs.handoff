{"nodes":[{"pos":[12,55],"content":"CDynamicAccessor::SetValue | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CDynamicAccessor::SetValue | Microsoft Docs","pos":[0,43]}]},{"content":"CDynamicAccessor::SetValue","pos":[860,886]},{"content":"Stores data to a specified column.","pos":[887,921]},{"content":"Syntax","pos":[930,936]},{"content":"Parameters","pos":[1312,1322]},{"content":"[in] A templated parameter that handles any data type except string types (<bpt id=\"p1\">**</bpt>CHAR<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>WCHAR<ph id=\"ph2\">\\*</ph><ept id=\"p2\">**</ept>), which require special handling.","pos":[1337,1469],"source":" [in] A templated parameter that handles any data type except string types (**CHAR\\***, **WCHAR\\***), which require special handling."},{"content":"uses the appropriate data type based on what you specify here.","pos":[1481,1543]},{"content":"[in] A pointer to a character string containing the column name.","pos":[1567,1631]},{"content":"[in] The pointer to the memory containing the data.","pos":[1648,1699]},{"content":"[in] The column number.","pos":[1719,1742]},{"content":"Column numbers start with 1.","pos":[1743,1771]},{"content":"A value of 0 refers to the bookmark column, if any.","pos":[1772,1823]},{"content":"Return Value","pos":[1832,1844]},{"content":"If you want to set string data, use the nontemplated versions of <ph id=\"ph1\">`GetValue`</ph>.","pos":[1848,1924],"source":"If you want to set string data, use the nontemplated versions of `GetValue`."},{"content":"The nontemplated versions of this method return <bpt id=\"p1\">**</bpt>void<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>, which points to the part of the buffer that contains the specified column data.","pos":[1925,2064],"source":" The nontemplated versions of this method return **void\\***, which points to the part of the buffer that contains the specified column data."},{"content":"Returns <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the column is not found.","pos":[2065,2109],"source":" Returns **NULL** if the column is not found."},{"content":"For all other data types, it is simpler to use the templated versions of <ph id=\"ph1\">`GetValue`</ph>.","pos":[2116,2200],"source":"For all other data types, it is simpler to use the templated versions of `GetValue`."},{"content":"The templated versions return <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> on success or <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> on failure.","pos":[2201,2275],"source":" The templated versions return **true** on success or **false** on failure."},{"content":"Requirements","pos":[2284,2296]},{"pos":[2300,2322],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atldbcli.h","source":"**Header:** atldbcli.h"},{"content":"See Also","pos":[2331,2339]},{"content":"CDynamicAccessor Class","pos":[2344,2366]}],"content":"---\ntitle: \"CDynamicAccessor::SetValue | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ATL.CDynamicAccessor.SetValue\"\n  - \"ATL::CDynamicAccessor::SetValue\"\n  - \"ATL::CDynamicAccessor::SetValue<ctype>\"\n  - \"CDynamicAccessor.SetValue\"\n  - \"ATL.CDynamicAccessor.SetValue<ctype>\"\n  - \"CDynamicAccessor::SetValue\"\n  - \"CDynamicAccessor::SetValue<ctype>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"SetValue method\"\nms.assetid: ecc18850-96e5-4845-abe5-ab34ad467238\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CDynamicAccessor::SetValue\nStores data to a specified column.  \n  \n## Syntax  \n  \n```  \n  \n      template < class ctype >    \nbool SetValue(   \n   DBORDINAL nColumn,   \n   const ctype& data    \n) throw( );  \ntemplate < class ctype >    \nbool SetValue(   \n   const CHAR * pColumnName,   \n   const ctype& data    \n) throw( );  \ntemplate <class ctype>   \nbool SetValue(  \n   const WCHAR *pColumnName,  \n   const ctype& data   \n) throw( );  \n```  \n  \n#### Parameters  \n `ctype`  \n [in] A templated parameter that handles any data type except string types (**CHAR\\***, **WCHAR\\***), which require special handling. `GetValue` uses the appropriate data type based on what you specify here.  \n  \n `pColumnName`  \n [in] A pointer to a character string containing the column name.  \n  \n `data`  \n [in] The pointer to the memory containing the data.  \n  \n `nColumn`  \n [in] The column number. Column numbers start with 1. A value of 0 refers to the bookmark column, if any.  \n  \n## Return Value  \n If you want to set string data, use the nontemplated versions of `GetValue`. The nontemplated versions of this method return **void\\***, which points to the part of the buffer that contains the specified column data. Returns **NULL** if the column is not found.  \n  \n For all other data types, it is simpler to use the templated versions of `GetValue`. The templated versions return **true** on success or **false** on failure.  \n  \n## Requirements  \n **Header:** atldbcli.h  \n  \n## See Also  \n [CDynamicAccessor Class](../../data/oledb/cdynamicaccessor-class.md)"}