{"nodes":[{"pos":[12,71],"content":"Memory Management: Resizable Memory Blocks | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Memory Management: Resizable Memory Blocks | Microsoft Docs","pos":[0,59]}]},{"content":"Memory Management: Resizable Memory Blocks","pos":[766,808]},{"content":"The <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>delete<ept id=\"p2\">**</ept> operators, described in the article <bpt id=\"p3\">[</bpt>Memory Management: Examples<ept id=\"p3\">](../mfc/memory-management-examples.md)</ept>, are good for allocating and deallocating fixed-size memory blocks and objects.","pos":[809,1019],"source":"The **new** and **delete** operators, described in the article [Memory Management: Examples](../mfc/memory-management-examples.md), are good for allocating and deallocating fixed-size memory blocks and objects."},{"content":"Occasionally, your application may need resizable memory blocks.","pos":[1020,1084]},{"content":"You must use the standard C run-time library functions <bpt id=\"p1\">[</bpt>malloc<ept id=\"p1\">](../c-runtime-library/reference/malloc.md)</ept>, <bpt id=\"p2\">[</bpt>realloc<ept id=\"p2\">](../c-runtime-library/reference/realloc.md)</ept>, and <bpt id=\"p3\">[</bpt>free<ept id=\"p3\">](../c-runtime-library/reference/free.md)</ept> to manage resizable memory blocks on the heap.","pos":[1085,1343],"source":" You must use the standard C run-time library functions [malloc](../c-runtime-library/reference/malloc.md), [realloc](../c-runtime-library/reference/realloc.md), and [free](../c-runtime-library/reference/free.md) to manage resizable memory blocks on the heap."},{"pos":[1351,1795],"content":"[!IMPORTANT]\n Mixing the **new** and **delete** operators with the resizable memory-allocation functions on the same memory block will result in corrupted memory in the Debug version of MFC. You should not use `realloc` on a memory block allocated with **new**. Likewise, you should not allocate a memory block with the **new** operator and delete it with **free**, or use the **delete** operator on a block of memory allocated with `malloc`.","leadings":["","> "],"nodes":[{"content":" Mixing the **new** and **delete** operators with the resizable memory-allocation functions on the same memory block will result in corrupted memory in the Debug version of MFC. You should not use `realloc` on a memory block allocated with **new**. Likewise, you should not allocate a memory block with the **new** operator and delete it with **free**, or use the **delete** operator on a block of memory allocated with `malloc`.","pos":[13,442],"nodes":[{"content":"Mixing the <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>delete<ept id=\"p2\">**</ept> operators with the resizable memory-allocation functions on the same memory block will result in corrupted memory in the Debug version of MFC.","pos":[1,177],"source":" Mixing the **new** and **delete** operators with the resizable memory-allocation functions on the same memory block will result in corrupted memory in the Debug version of MFC."},{"content":"You should not use <ph id=\"ph1\">`realloc`</ph> on a memory block allocated with <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept>.","pos":[178,248],"source":" You should not use `realloc` on a memory block allocated with **new**."},{"content":"Likewise, you should not allocate a memory block with the <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> operator and delete it with <bpt id=\"p2\">**</bpt>free<ept id=\"p2\">**</ept>, or use the <bpt id=\"p3\">**</bpt>delete<ept id=\"p3\">**</ept> operator on a block of memory allocated with <ph id=\"ph1\">`malloc`</ph>.","pos":[249,429],"source":" Likewise, you should not allocate a memory block with the **new** operator and delete it with **free**, or use the **delete** operator on a block of memory allocated with `malloc`."}]}]},{"content":"See Also","pos":[1804,1812]},{"content":"Memory Management: Heap Allocation","pos":[1817,1851]}],"content":"---\ntitle: \"Memory Management: Resizable Memory Blocks | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"memory blocks, resizable\"\n  - \"memory, corruption\"\n  - \"memory allocation, memory block size\"\n  - \"memory blocks, allocating\"\n  - \"blocks, memory allocation\"\n  - \"resizable memory blocks\"\nms.assetid: f0efe6f4-a3ed-4541-9195-51ec1291967a\ncaps.latest.revision: 9\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Memory Management: Resizable Memory Blocks\nThe **new** and **delete** operators, described in the article [Memory Management: Examples](../mfc/memory-management-examples.md), are good for allocating and deallocating fixed-size memory blocks and objects. Occasionally, your application may need resizable memory blocks. You must use the standard C run-time library functions [malloc](../c-runtime-library/reference/malloc.md), [realloc](../c-runtime-library/reference/realloc.md), and [free](../c-runtime-library/reference/free.md) to manage resizable memory blocks on the heap.  \n  \n> [!IMPORTANT]\n>  Mixing the **new** and **delete** operators with the resizable memory-allocation functions on the same memory block will result in corrupted memory in the Debug version of MFC. You should not use `realloc` on a memory block allocated with **new**. Likewise, you should not allocate a memory block with the **new** operator and delete it with **free**, or use the **delete** operator on a block of memory allocated with `malloc`.  \n  \n## See Also  \n [Memory Management: Heap Allocation](../mfc/memory-management-heap-allocation.md)\n\n"}