{"nodes":[{"pos":[12,39],"content":"C Keywords | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"C Keywords | Microsoft Docs","pos":[0,27]}]},{"content":"C Keywords","pos":[629,639]},{"content":"\"Keywords\" are words that have special meaning to the C compiler.","pos":[640,705]},{"content":"In translation phases 7 and 8, an identifier cannot have the same spelling and case as a C keyword.","pos":[706,805]},{"content":"(See a description of <bpt id=\"p1\">[</bpt>translation phases<ept id=\"p1\">](../preprocessor/phases-of-translation.md)</ept> in the <bpt id=\"p2\">*</bpt>Preprocessor Reference<ept id=\"p2\">*</ept>; for information on identifiers, see <bpt id=\"p3\">[</bpt>Identifiers<ept id=\"p3\">](../c-language/c-identifiers.md)</ept>.) The C language uses the following keywords:","pos":[806,1051],"source":" (See a description of [translation phases](../preprocessor/phases-of-translation.md) in the *Preprocessor Reference*; for information on identifiers, see [Identifiers](../c-language/c-identifiers.md).) The C language uses the following keywords:"},{"content":"auto","pos":[1080,1084]},{"content":"double","pos":[1089,1095]},{"content":"break","pos":[1119,1124]},{"content":"else","pos":[1129,1133]},{"content":"long","pos":[1138,1142]},{"content":"case","pos":[1160,1164]},{"content":"register","pos":[1176,1184]},{"content":"union","pos":[1228,1233]},{"content":"const","pos":[1242,1247]},{"content":"float","pos":[1252,1257]},{"content":"short","pos":[1262,1267]},{"content":"continue","pos":[1287,1295]},{"content":"for","pos":[1300,1303]},{"content":"signed","pos":[1308,1314]},{"content":"default","pos":[1330,1337]},{"content":"do","pos":[1373,1375]},{"content":"if","pos":[1380,1382]},{"content":"static","pos":[1387,1393]},{"content":"You cannot redefine keywords.","pos":[1411,1440]},{"content":"However, you can specify text to be substituted for keywords before compilation by using C <bpt id=\"p1\">[</bpt>preprocessor directives<ept id=\"p1\">](../preprocessor/preprocessor-directives.md)</ept>.","pos":[1441,1602],"source":" However, you can specify text to be substituted for keywords before compilation by using C [preprocessor directives](../preprocessor/preprocessor-directives.md)."},{"content":"Microsoft Specific","pos":[1611,1629]},{"content":"The ANSI C standard allows identifiers with two leading underscores to be reserved for compiler implementations.","pos":[1638,1750]},{"content":"Therefore, the Microsoft convention is to precede Microsoft-specific keyword names with double underscores.","pos":[1751,1858]},{"content":"These words cannot be used as identifier names.","pos":[1859,1906]},{"content":"For a description of the ANSI rules for naming identifiers, including the use of double underscores, see <bpt id=\"p1\">[</bpt>Identifiers<ept id=\"p1\">](../c-language/c-identifiers.md)</ept>.","pos":[1907,2058],"source":" For a description of the ANSI rules for naming identifiers, including the use of double underscores, see [Identifiers](../c-language/c-identifiers.md)."},{"content":"The following keywords and special identifiers are recognized by the Microsoft C compiler:","pos":[2065,2155]},{"pos":[2190,2204],"content":"<bpt id=\"p1\">**</bpt>dllimport<ept id=\"p1\">**</ept>2","source":"**dllimport**2"},{"pos":[2221,2222],"content":"2"},{"pos":[2236,2237],"content":"1"},{"pos":[2308,2319],"content":"<bpt id=\"p1\">**</bpt>thread<ept id=\"p1\">**</ept>2","source":"**thread**2"},{"pos":[2382,2383],"content":"2"},{"pos":[2416,2497],"content":"The <ph id=\"ph1\">`__based`</ph> keyword has limited uses for 32-bit and 64-bit target compilations.","source":"The `__based` keyword has limited uses for 32-bit and 64-bit target compilations."},{"pos":[2507,2612],"content":"These are special identifiers when used with <ph id=\"ph1\">`__declspec`</ph>; their use in other contexts is not restricted.","source":"These are special identifiers when used with `__declspec`; their use in other contexts is not restricted."},{"content":"Microsoft extensions are enabled by default.","pos":[2619,2663]},{"content":"To ensure that your programs are fully portable, you can disable Microsoft extensions by specifying the /Za option (compile for ANSI compatibility) during compilation.","pos":[2664,2831]},{"content":"When you do this, Microsoft-specific keywords are disabled.","pos":[2832,2891]},{"content":"When Microsoft extensions are enabled, you can use the keywords listed above in your programs.","pos":[2898,2992]},{"content":"For ANSI compliance, most of these keywords are prefaced by a double underscore.","pos":[2993,3073]},{"content":"The four exceptions, <ph id=\"ph1\">`dllexport`</ph>, <bpt id=\"p1\">**</bpt>dllimport<ept id=\"p1\">**</ept>, <ph id=\"ph2\">`naked`</ph>, and <bpt id=\"p2\">**</bpt>thread<ept id=\"p2\">**</ept>, are used only with <ph id=\"ph3\">`__declspec`</ph> and therefore do not require a leading double underscore.","pos":[3074,3237],"source":" The four exceptions, `dllexport`, **dllimport**, `naked`, and **thread**, are used only with `__declspec` and therefore do not require a leading double underscore."},{"content":"For backward compatibility, single-underscore versions of the rest of the keywords are supported.","pos":[3238,3335]},{"content":"END Microsoft Specific","pos":[3344,3366]},{"content":"See Also","pos":[3377,3385]},{"content":"Elements of C","pos":[3390,3403]}],"content":"---\ntitle: \"C Keywords | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"keywords [C]\"\n  - \"redefining keywords\"\n  - \"Microsoft-specific keywords\"\nms.assetid: 2d932335-97bf-45cd-b367-4ae00db0ff42\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# C Keywords\n\"Keywords\" are words that have special meaning to the C compiler. In translation phases 7 and 8, an identifier cannot have the same spelling and case as a C keyword. (See a description of [translation phases](../preprocessor/phases-of-translation.md) in the *Preprocessor Reference*; for information on identifiers, see [Identifiers](../c-language/c-identifiers.md).) The C language uses the following keywords:  \n  \n|||||  \n|-|-|-|-|  \n|**auto**|**double**|`int`|`struct`|  \n|**break**|**else**|**long**|`switch`|  \n|**case**|`enum`|**register**|`typedef`|  \n|`char`|`extern`|`return`|**union**|  \n|**const**|**float**|**short**|`unsigned`|  \n|**continue**|**for**|**signed**|`void`|  \n|**default**|`goto`|`sizeof`|`volatile`|  \n|**do**|**if**|**static**|`while`|  \n  \n You cannot redefine keywords. However, you can specify text to be substituted for keywords before compilation by using C [preprocessor directives](../preprocessor/preprocessor-directives.md).  \n  \n **Microsoft Specific**  \n  \n The ANSI C standard allows identifiers with two leading underscores to be reserved for compiler implementations. Therefore, the Microsoft convention is to precede Microsoft-specific keyword names with double underscores. These words cannot be used as identifier names. For a description of the ANSI rules for naming identifiers, including the use of double underscores, see [Identifiers](../c-language/c-identifiers.md).  \n  \n The following keywords and special identifiers are recognized by the Microsoft C compiler:  \n  \n|||||  \n|-|-|-|-|  \n|`__asm`|**dllimport**2|`__int8`|`naked`2|  \n|`__based`1|`__except`|`__int16`|`__stdcall`|  \n|`__cdecl`|`__fastcall`|`__int32`|**thread**2|  \n|`__declspec`|`__finally`|`__int64`|`__try`|  \n|`dllexport`2|`__inline`|`__leave`||  \n  \n 1. The `__based` keyword has limited uses for 32-bit and 64-bit target compilations.  \n  \n 2. These are special identifiers when used with `__declspec`; their use in other contexts is not restricted.  \n  \n Microsoft extensions are enabled by default. To ensure that your programs are fully portable, you can disable Microsoft extensions by specifying the /Za option (compile for ANSI compatibility) during compilation. When you do this, Microsoft-specific keywords are disabled.  \n  \n When Microsoft extensions are enabled, you can use the keywords listed above in your programs. For ANSI compliance, most of these keywords are prefaced by a double underscore. The four exceptions, `dllexport`, **dllimport**, `naked`, and **thread**, are used only with `__declspec` and therefore do not require a leading double underscore. For backward compatibility, single-underscore versions of the rest of the keywords are supported.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Elements of C](../c-language/elements-of-c.md)"}