{"nodes":[{"pos":[12,50],"content":"const_mem_fun_t Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"const_mem_fun_t Class | Microsoft Docs","pos":[0,38]}]},{"content":"const_mem_fun_t Class","pos":[709,730]},{"content":"An adapter class that allows a const member function that takes no arguments to be called as a unary function object when initialized with a reference argument.","pos":[731,891]},{"content":"Syntax","pos":[900,906]},{"content":"Parameters","pos":[1144,1154]},{"content":"A pointer to the member function of class <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> to be converted to a function object.","pos":[1166,1254],"source":" A pointer to the member function of class **Type** to be converted to a function object."},{"content":"The object that the <ph id=\"ph1\">`Pm`</ph> member function is called on.","pos":[1272,1326],"source":" The object that the `Pm` member function is called on."},{"content":"Return Value","pos":[1335,1347]},{"content":"An adaptable unary function.","pos":[1351,1379]},{"content":"Remarks","pos":[1388,1395]},{"content":"The template class stores a copy of <ph id=\"ph1\">`Pm`</ph>, which must be a pointer to a member function of class <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>, in a private member object.","pos":[1399,1532],"source":"The template class stores a copy of `Pm`, which must be a pointer to a member function of class **Type**, in a private member object."},{"content":"It defines its member function <ph id=\"ph1\">`operator()`</ph> as returning ( <ph id=\"ph2\">`Pleft`-&gt;\\*</ph> <ph id=\"ph3\">`Pm`</ph>)() <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>.","pos":[1533,1622],"source":" It defines its member function `operator()` as returning ( `Pleft`->\\* `Pm`)() **const**."},{"content":"Example","pos":[1631,1638]},{"content":"The constructor of <ph id=\"ph1\">`const_mem_fun_t`</ph> is not usually used directly; the helper function <ph id=\"ph2\">`mem_fun`</ph> is used to adapt member functions.","pos":[1642,1773],"source":"The constructor of `const_mem_fun_t` is not usually used directly; the helper function `mem_fun` is used to adapt member functions."},{"content":"See <bpt id=\"p1\">[</bpt>mem_fun<ept id=\"p1\">](../standard-library/functional-functions.md#mem_fun_function)</ept> for an example of how to use member function adaptors.","pos":[1774,1904],"source":" See [mem_fun](../standard-library/functional-functions.md#mem_fun_function) for an example of how to use member function adaptors."},{"content":"Requirements","pos":[1913,1925]},{"pos":[1929,1954],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[1961,1979],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[1988,1996]},{"content":"Thread Safety in the C++ Standard Library","pos":[2001,2042]},{"content":"C++ Standard Library Reference","pos":[2115,2145]}],"content":"---\ntitle: \"const_mem_fun_t Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"const_mem_fun_t\"\n  - \"std.const_mem_fun_t\"\n  - \"xfunctional/std::const_mem_fun_t\"\n  - \"std::const_mem_fun_t\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"const_mem_fun_t class\"\nms.assetid: f169d381-019b-4a0e-a9a3-54da6d948270\ncaps.latest.revision: 20\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# const_mem_fun_t Class\nAn adapter class that allows a const member function that takes no arguments to be called as a unary function object when initialized with a reference argument.  \n  \n## Syntax  \n  \n```\ntemplate <class Result, class Type>\nclass const_mem_fun_t : public unary_function <Type *, Result>  \n{\n    explicit const_mem_fun_t(Result (Type::* Pm)() const);\n    Result operator()(const Type* Pleft) const;\n };\n```  \n  \n#### Parameters  \n `Pm`  \n A pointer to the member function of class **Type** to be converted to a function object.  \n  \n `Pleft`  \n The object that the `Pm` member function is called on.  \n  \n## Return Value  \n An adaptable unary function.  \n  \n## Remarks  \n The template class stores a copy of `Pm`, which must be a pointer to a member function of class **Type**, in a private member object. It defines its member function `operator()` as returning ( `Pleft`->\\* `Pm`)() **const**.  \n  \n## Example  \n The constructor of `const_mem_fun_t` is not usually used directly; the helper function `mem_fun` is used to adapt member functions. See [mem_fun](../standard-library/functional-functions.md#mem_fun_function) for an example of how to use member function adaptors.  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}