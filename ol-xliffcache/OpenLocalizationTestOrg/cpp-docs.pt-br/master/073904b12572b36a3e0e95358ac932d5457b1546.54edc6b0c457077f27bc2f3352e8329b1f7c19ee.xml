{"nodes":[{"pos":[12,63],"content":"literal (C++ Component Extensions) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"literal (C++ Component Extensions) | Microsoft Docs","pos":[0,51]}]},{"content":"literal (C++ Component Extensions)","pos":[651,685]},{"pos":[686,811],"content":"A variable (data member) marked as <ph id=\"ph1\">`literal`</ph> in a <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> compilation is the native equivalent of a <ph id=\"ph2\">`static const`</ph> variable.","source":"A variable (data member) marked as `literal` in a **/clr** compilation is the native equivalent of a `static const` variable."},{"content":"All Platforms","pos":[820,833]},{"content":"Remarks","pos":[839,846]},{"content":"(There are no remarks for this language feature that apply to all runtimes.)","pos":[855,931]},{"content":"Remarks","pos":[998,1005]},{"content":"(There are no remarks for this language feature that apply to only the Windows Runtime.)","pos":[1014,1102]},{"content":"Requirements","pos":[1112,1124]},{"pos":[1128,1152],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/ZW<ept id=\"p1\">**</ept>","source":"Compiler option: **/ZW**"},{"content":"Common Language Runtime","pos":[1161,1184]},{"content":"Remarks","pos":[1193,1200]},{"content":"A data member marked as <ph id=\"ph1\">`literal`</ph>must be initialized when declared and the value must be a constant integral, enum, or string type.","pos":[1204,1335],"source":"A data member marked as `literal`must be initialized when declared and the value must be a constant integral, enum, or string type."},{"content":"Conversion from the type of the initialization expression to the type of the static const data-member must not require a user-defined conversion.","pos":[1336,1481]},{"content":"No memory is allocated for the literal field at runtime; the compiler only inserts its value in the metadata for the class.","pos":[1488,1611]},{"pos":[1618,1704],"content":"A variable marked <ph id=\"ph1\">`static const`</ph> will not be available in metadata to other compilers.","source":"A variable marked `static const` will not be available in metadata to other compilers."},{"pos":[1711,1810],"content":"For more information, see <bpt id=\"p1\">[</bpt>Static<ept id=\"p1\">](../cpp/storage-classes-cpp.md)</ept> and <bpt id=\"p2\">[</bpt>const<ept id=\"p2\">](../cpp/const-cpp.md)</ept>.","source":"For more information, see [Static](../cpp/storage-classes-cpp.md) and [const](../cpp/const-cpp.md)."},{"content":"is a context-sensitive keyword.","pos":[1827,1858]},{"content":"See <bpt id=\"p1\">[</bpt>Context-Sensitive Keywords<ept id=\"p1\">](../windows/context-sensitive-keywords-cpp-component-extensions.md)</ept> for more information.","pos":[1859,1980],"source":" See [Context-Sensitive Keywords](../windows/context-sensitive-keywords-cpp-component-extensions.md) for more information."},{"content":"Example","pos":[1989,1996]},{"pos":[2000,2062],"content":"This example shows that a <ph id=\"ph1\">`literal`</ph> variable implies <ph id=\"ph2\">`static`</ph>.","source":"This example shows that a `literal` variable implies `static`."},{"content":"Example","pos":[2225,2232]},{"content":"The following sample shows the affect of literal in metadata:","pos":[2236,2297]},{"pos":[2457,2603],"content":"Notice the difference in the metadata for <ph id=\"ph1\">`sc`</ph> and <ph id=\"ph2\">`lit`</ph>: the <ph id=\"ph3\">`modopt`</ph> directive is applied to <ph id=\"ph4\">`sc`</ph>, meaning it can be ignored by other compilers.","source":"Notice the difference in the metadata for `sc` and `lit`: the `modopt` directive is applied to `sc`, meaning it can be ignored by other compilers."},{"content":"Example","pos":[2813,2820]},{"pos":[2824,2980],"content":"The following sample, authored in C#, references the metadata created in the previous sample and shows the affect of <ph id=\"ph1\">`literal`</ph> and <ph id=\"ph2\">`static const`</ph> variables:","source":"The following sample, authored in C#, references the metadata created in the previous sample and shows the affect of `literal` and `static const` variables:"},{"content":"Requirements","pos":[3742,3754]},{"pos":[3758,3783],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>","source":"Compiler option: **/clr**"},{"content":"See Also","pos":[3792,3800]},{"content":"Component Extensions for Runtime Platforms","pos":[3805,3847]}],"content":"---\ntitle: \"literal (C++ Component Extensions) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"literal\"\n  - \"literal_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"literal keyword [C++]\"\nms.assetid: 6b1a1f36-2e1d-4a23-8eb6-172f4f3c477f\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# literal (C++ Component Extensions)\nA variable (data member) marked as `literal` in a **/clr** compilation is the native equivalent of a `static const` variable.  \n  \n## All Platforms  \n **Remarks**  \n  \n (There are no remarks for this language feature that apply to all runtimes.)  \n  \n## [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]  \n **Remarks**  \n  \n (There are no remarks for this language feature that apply to only the Windows Runtime.)  \n  \n### Requirements  \n Compiler option: **/ZW**  \n  \n## Common Language Runtime  \n  \n## Remarks  \n A data member marked as `literal`must be initialized when declared and the value must be a constant integral, enum, or string type. Conversion from the type of the initialization expression to the type of the static const data-member must not require a user-defined conversion.  \n  \n No memory is allocated for the literal field at runtime; the compiler only inserts its value in the metadata for the class.  \n  \n A variable marked `static const` will not be available in metadata to other compilers.  \n  \n For more information, see [Static](../cpp/storage-classes-cpp.md) and [const](../cpp/const-cpp.md).  \n  \n `literal` is a context-sensitive keyword. See [Context-Sensitive Keywords](../windows/context-sensitive-keywords-cpp-component-extensions.md) for more information.  \n  \n## Example  \n This example shows that a `literal` variable implies `static`.  \n  \n```  \n// mcppv2_literal.cpp  \n// compile with: /clr  \nref struct X {  \n   literal int i = 4;  \n};  \n  \nint main() {  \n   int value = X::i;  \n}  \n```  \n  \n## Example  \n The following sample shows the affect of literal in metadata:  \n  \n```  \n// mcppv2_literal2.cpp  \n// compile with: /clr /LD  \npublic ref struct A {  \n   literal int lit = 0;  \n   static const int sc = 1;  \n};  \n```  \n  \n Notice the difference in the metadata for `sc` and `lit`: the `modopt` directive is applied to `sc`, meaning it can be ignored by other compilers.  \n  \n```  \n.field public static int32 modopt([mscorlib]System.Runtime.CompilerServices.IsConst) sc = int32(0x0000000A)  \n```  \n  \n```  \n.field public static literal int32 lit = int32(0x0000000A)  \n```  \n  \n## Example  \n The following sample, authored in C#, references the metadata created in the previous sample and shows the affect of `literal` and `static const` variables:  \n  \n```  \n// mcppv2_literal3.cs  \n// compile with: /reference:mcppv2_literal2.dll  \n// A C# program  \nclass B {  \n   public static void Main() {  \n      // OK  \n      System.Console.WriteLine(A.lit);  \n      System.Console.WriteLine(A.sc);  \n  \n      // C# does not enforce C++ const  \n      A.sc = 9;  \n      System.Console.WriteLine(A.sc);  \n  \n      // C# enforces const for a literal  \n      A.lit = 9;   // CS0131  \n  \n      // you can assign a C++ literal variable to a C# const variable  \n      const int i = A.lit;  \n      System.Console.WriteLine(i);  \n  \n      // but you cannot assign a C++ static const variable  \n      // to a C# const variable  \n      const int j = A.sc;   // CS0133  \n      System.Console.WriteLine(j);  \n   }  \n}  \n```  \n  \n## Requirements  \n Compiler option: **/clr**  \n  \n## See Also  \n [Component Extensions for Runtime Platforms](../windows/component-extensions-for-runtime-platforms.md)"}