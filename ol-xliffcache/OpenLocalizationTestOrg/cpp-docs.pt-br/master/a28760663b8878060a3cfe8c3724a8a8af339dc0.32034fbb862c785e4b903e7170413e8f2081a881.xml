{"nodes":[{"pos":[12,50],"content":"Names with No Linkage | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Names with No Linkage | Microsoft Docs","pos":[0,38]}]},{"content":"Names with No Linkage","pos":[726,747]},{"content":"The only names that have no linkage are:","pos":[748,788]},{"content":"Function parameters.","pos":[798,818]},{"pos":[828,886],"content":"Block-scoped names not declared as <ph id=\"ph1\">`extern`</ph> or <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept>.","source":"Block-scoped names not declared as `extern` or **static**."},{"content":"Enumerators.","pos":[896,908]},{"content":"Names declared in a <ph id=\"ph1\">`typedef`</ph> statement.","pos":[918,958],"source":"Names declared in a `typedef` statement."},{"content":"An exception is when the <ph id=\"ph1\">`typedef`</ph> statement is used to provide a name for an unnamed class type.","pos":[959,1056],"source":" An exception is when the `typedef` statement is used to provide a name for an unnamed class type."},{"content":"The name may then have external linkage if the class has external linkage.","pos":[1057,1131]},{"content":"The following example shows a situation in which a <ph id=\"ph1\">`typedef`</ph> name has external linkage:","pos":[1132,1219],"source":" The following example shows a situation in which a `typedef` name has external linkage:"},{"content":"The <ph id=\"ph1\">`typedef`</ph> name, <ph id=\"ph2\">`POINT`</ph>, becomes the class name for the unnamed structure.","pos":[1444,1522],"source":"The `typedef` name, `POINT`, becomes the class name for the unnamed structure."},{"content":"It is then used to declare a function with external linkage.","pos":[1523,1583]},{"content":"Because <ph id=\"ph1\">`typedef`</ph> names have no linkage, their definitions can differ between translation units.","pos":[1590,1686],"source":"Because `typedef` names have no linkage, their definitions can differ between translation units."},{"content":"Because the compilations take place discretely, there is no way for the compiler to detect these differences.","pos":[1687,1796]},{"content":"As a result, errors of this kind are not detected until link time.","pos":[1797,1863]},{"content":"Consider the following case:","pos":[1864,1892]},{"content":"The preceding code generates an \"unresolved external\" error at link time.","pos":[2054,2127]},{"content":"Example","pos":[2136,2143]},{"content":"C++ functions can be defined only in file or class scope.","pos":[2147,2204]},{"content":"The following example illustrates how to define functions and shows an erroneous function definition:","pos":[2205,2306]},{"content":"See Also","pos":[3325,3333]},{"content":"Program and Linkage","pos":[3338,3357]}],"content":"---\ntitle: \"Names with No Linkage | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"functions [C++], parameters\"\n  - \"typedef names, linkage\"\n  - \"enumerators [C++], linkage\"\n  - \"names [C++], with no linkage\"\n  - \"function parameters [C++]\"\nms.assetid: 7174c500-12d2-4572-8c16-63c27c758fb1\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Names with No Linkage\nThe only names that have no linkage are:  \n  \n-   Function parameters.  \n  \n-   Block-scoped names not declared as `extern` or **static**.  \n  \n-   Enumerators.  \n  \n-   Names declared in a `typedef` statement. An exception is when the `typedef` statement is used to provide a name for an unnamed class type. The name may then have external linkage if the class has external linkage. The following example shows a situation in which a `typedef` name has external linkage:  \n  \n    ```  \n    // names_with_no_linkage.cpp  \n    typedef struct  \n    {  \n       short x;  \n       short y;  \n    } POINT;  \n  \n    extern int MoveTo( POINT pt );  \n  \n    int main()  \n    {  \n    }  \n    ```  \n  \n     The `typedef` name, `POINT`, becomes the class name for the unnamed structure. It is then used to declare a function with external linkage.  \n  \n Because `typedef` names have no linkage, their definitions can differ between translation units. Because the compilations take place discretely, there is no way for the compiler to detect these differences. As a result, errors of this kind are not detected until link time. Consider the following case:  \n  \n```  \n// Translation unit 1  \ntypedef int INT  \n  \nINT myInt;  \n...  \n  \n// Translation unit 2  \ntypedef short INT  \n  \nextern INT myInt;  \n...  \n```  \n  \n The preceding code generates an \"unresolved external\" error at link time.  \n  \n## Example  \n C++ functions can be defined only in file or class scope. The following example illustrates how to define functions and shows an erroneous function definition:  \n  \n```  \n// function_definitions.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \nvoid ShowChar( char ch );    // Declare function ShowChar.  \n  \nvoid ShowChar( char ch )     // Define function ShowChar.  \n{                            // Function has file scope.  \n   cout << ch;  \n}  \n  \nstruct Char                  // Define class Char.  \n{  \n    char Show();             // Declare Show function.  \n    char Get();              // Declare Get function.  \n    char ch;  \n};  \n  \nchar Char::Show()            // Define Show function  \n{                            //  with class scope.  \n    cout << ch;  \n    return ch;  \n}  \n  \nvoid GoodFuncDef( char ch )  // Define GoodFuncDef  \n{                            //  with file scope.  \n    int BadFuncDef( int i )  // C2601, Erroneous attempt to  \n    {                        //  nest functions.  \n        return i * 7;  \n    }  \n    for( int i = 0; i < BadFuncDef( 2 ); ++i )  \n        cout << ch;  \n    cout << \"\\n\";  \n}  \n```  \n  \n## See Also  \n [Program and Linkage](../cpp/program-and-linkage-cpp.md)"}