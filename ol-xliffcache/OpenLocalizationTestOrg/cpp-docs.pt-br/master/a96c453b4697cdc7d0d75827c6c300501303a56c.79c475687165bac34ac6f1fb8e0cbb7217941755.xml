{"nodes":[{"pos":[12,54],"content":"&lt;iomanip&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"iomanip<ph id=\"ph1\">&amp;gt;</ph> functions | Microsoft Docs","pos":[4,42],"source":"iomanip&gt; functions | Microsoft Docs"}]},{"content":"iomanip<ph id=\"ph1\">&amp;gt;</ph> functions","pos":[261,282],"source":"iomanip&gt; functions"},{"content":"get_money","pos":[302,311]},{"content":"get_time","pos":[334,342]},{"content":"put_money","pos":[364,373]},{"content":"put_time","pos":[400,408]},{"content":"quoted","pos":[430,436]},{"content":"resetiosflags","pos":[448,461]},{"content":"setbase","pos":[484,491]},{"content":"setfill","pos":[504,511]},{"content":"setiosflags","pos":[524,535]},{"content":"setprecision","pos":[556,568]},{"content":"setw","pos":[586,590]},{"pos":[643,652],"content":"get_money"},{"content":"Extracts a monetary value from a stream using the desired format, and returns the value in a parameter.","pos":[656,759]},{"content":"Parameters","pos":[851,861]},{"content":"_Amount","pos":[865,872]},{"content":"The extracted monetary value.","pos":[876,905]},{"content":"_Intl","pos":[912,917]},{"content":"If <ph id=\"ph1\">`true`</ph>, use international format.","pos":[921,957],"source":" If `true`, use international format."},{"content":"The default value is <ph id=\"ph1\">`false`</ph>.","pos":[958,987],"source":" The default value is `false`."},{"content":"Remarks","pos":[997,1004]},{"content":"The manipulator returns an object that, when extracted from the stream <ph id=\"ph1\">`str`</ph>, behaves as a <ph id=\"ph2\">`formatted input function`</ph> that calls the member function <ph id=\"ph3\">`get`</ph> for the locale facet <ph id=\"ph4\">`money_get`</ph> associated with <ph id=\"ph5\">`str`</ph>, using <ph id=\"ph6\">`_Intl`</ph> to indicate international format.","pos":[1008,1266],"source":"The manipulator returns an object that, when extracted from the stream `str`, behaves as a `formatted input function` that calls the member function `get` for the locale facet `money_get` associated with `str`, using `_Intl` to indicate international format."},{"content":"If successful, the call stores in <ph id=\"ph1\">`_Amount`</ph> the extracted monetary value.","pos":[1267,1340],"source":" If successful, the call stores in `_Amount` the extracted monetary value."},{"content":"The manipulator then returns <ph id=\"ph1\">`str`</ph>.","pos":[1341,1376],"source":" The manipulator then returns `str`."},{"pos":[1391,1512],"content":"must be of type <ph id=\"ph1\">`long double`</ph> or an instantiation of <ph id=\"ph2\">`basic_string`</ph> with the same element and traits parameters as <ph id=\"ph3\">`str`</ph>.","source":" must be of type `long double` or an instantiation of `basic_string` with the same element and traits parameters as `str`."},{"pos":[1555,1563],"content":"get_time"},{"content":"Extracts a time value from a stream using a desired format.","pos":[1567,1626]},{"content":"Returns the value in a parameter as a time structure.","pos":[1627,1680]},{"content":"Parameters","pos":[1779,1789]},{"content":"The time in the form of a time structure.","pos":[1804,1845]},{"content":"The desired format to use to obtain the time value.","pos":[1862,1913]},{"content":"Remarks","pos":[1923,1930]},{"content":"The manipulator returns an object that, when extracted from the stream <ph id=\"ph1\">`str`</ph>, behaves as a <ph id=\"ph2\">`formatted input function`</ph> that calls the member function <ph id=\"ph3\">`get`</ph> for the locale facet <ph id=\"ph4\">`time_get`</ph> associated with <ph id=\"ph5\">`str`</ph>, using <ph id=\"ph6\">`tptr`</ph> to indicate the time structure and <ph id=\"ph7\">`fmt`</ph> to indicate the beginning of a null-terminated format string.","pos":[1934,2259],"source":"The manipulator returns an object that, when extracted from the stream `str`, behaves as a `formatted input function` that calls the member function `get` for the locale facet `time_get` associated with `str`, using `tptr` to indicate the time structure and `fmt` to indicate the beginning of a null-terminated format string."},{"content":"If successful, the call stores in the time structure the values associated with any extracted time fields.","pos":[2260,2366]},{"content":"The manipulator then returns <ph id=\"ph1\">`str`</ph>.","pos":[2367,2402],"source":" The manipulator then returns `str`."},{"pos":[2446,2455],"content":"put_money"},{"content":"Inserts a monetary amount using the desired format into a stream.","pos":[2459,2524]},{"content":"Parameters","pos":[2622,2632]},{"content":"The monetary amount to insert into the stream.","pos":[2649,2695]},{"content":"Set to <ph id=\"ph1\">`true`</ph> if manipulator should use international format, <ph id=\"ph2\">`false`</ph> if it should not.","pos":[2713,2800],"source":" Set to `true` if manipulator should use international format, `false` if it should not."},{"content":"Return Value","pos":[2810,2822]},{"pos":[2826,2840],"content":"Returns <ph id=\"ph1\">`str`</ph>.","source":"Returns `str`."},{"content":"Remarks","pos":[2850,2857]},{"content":"The manipulator returns an object that, when inserted into the stream <ph id=\"ph1\">`str`</ph>, behaves as a formatted output function that calls the member function <ph id=\"ph2\">`put`</ph> for the locale facet <ph id=\"ph3\">`money_put`</ph> associated with <ph id=\"ph4\">`str`</ph>.","pos":[2861,3069],"source":"The manipulator returns an object that, when inserted into the stream `str`, behaves as a formatted output function that calls the member function `put` for the locale facet `money_put` associated with `str`."},{"content":"If successful, the call inserts <ph id=\"ph1\">`amount`</ph> suitably formatted, using <ph id=\"ph2\">`_Intl`</ph> to indicate international format and <ph id=\"ph3\">`str.fill()`</ph>, as the fill element.","pos":[3070,3216],"source":" If successful, the call inserts `amount` suitably formatted, using `_Intl` to indicate international format and `str.fill()`, as the fill element."},{"content":"The manipulator then returns <ph id=\"ph1\">`str`</ph>.","pos":[3217,3252],"source":" The manipulator then returns `str`."},{"pos":[3267,3388],"content":"must be of type <ph id=\"ph1\">`long double`</ph> or an instantiation of <ph id=\"ph2\">`basic_string`</ph> with the same element and traits parameters as <ph id=\"ph3\">`str`</ph>.","source":" must be of type `long double` or an instantiation of `basic_string` with the same element and traits parameters as `str`."},{"pos":[3431,3439],"content":"put_time"},{"content":"Writes a time value from a time structure to a stream by using a specified format.","pos":[3443,3525]},{"content":"Parameters","pos":[3624,3634]},{"content":"The time value to write to the stream, provided in a time structure.","pos":[3649,3717]},{"content":"The desired format to write the time value.","pos":[3734,3777]},{"content":"Remarks","pos":[3787,3794]},{"content":"The manipulator returns an object that, when inserted into the stream <ph id=\"ph1\">`str`</ph>, behaves as a <ph id=\"ph2\">`formatted output function`</ph>.","pos":[3798,3916],"source":"The manipulator returns an object that, when inserted into the stream `str`, behaves as a `formatted output function`."},{"content":"The output function calls the member function <ph id=\"ph1\">`put`</ph> for the locale facet <ph id=\"ph2\">`time_put`</ph> associated with <ph id=\"ph3\">`str`</ph>.","pos":[3917,4023],"source":" The output function calls the member function `put` for the locale facet `time_put` associated with `str`."},{"content":"The output function uses <ph id=\"ph1\">`_Tptr`</ph> to indicate the time structure and <ph id=\"ph2\">`_Fmt`</ph> to indicate the beginning of a NUL-terminated format string.","pos":[4024,4159],"source":" The output function uses `_Tptr` to indicate the time structure and `_Fmt` to indicate the beginning of a NUL-terminated format string."},{"content":"If successful, the call inserts literal text from the format string and converted values from the time structure.","pos":[4160,4273]},{"content":"The manipulator then returns <ph id=\"ph1\">`str`</ph>.","pos":[4274,4309],"source":" The manipulator then returns `str`."},{"pos":[4342,4348],"content":"quoted"},{"pos":[4352,4499],"content":"<bpt id=\"p1\">**</bpt>(New in C++14)<ept id=\"p1\">**</ept> An iostream manipulator that enables convenient round-tripping of strings into and out of streams using the &gt;&gt; and &lt;&lt; operators.","source":"**(New in C++14)** An iostream manipulator that enables convenient round-tripping of strings into and out of streams using the >> and << operators."},{"content":"Parameters","pos":[4753,4763]},{"content":"A std::string, char*, string literal or raw string literal, or a wide version of any of these (e.g. std::wstring, wchar_t<ph id=\"ph1\">\\*</ph>).","pos":[4776,4901],"source":" A std::string, char*, string literal or raw string literal, or a wide version of any of these (e.g. std::wstring, wchar_t\\*)."},{"content":"A user-specified character, or wide character, to use as the delimiter for the beginning and end of the string.","pos":[4923,5034]},{"content":"A user-specified character, or wide character, to use as the escape character for escape sequences within the string.","pos":[5053,5170]},{"content":"Remarks","pos":[5180,5187]},{"pos":[5191,5319],"content":"See <bpt id=\"p1\">[</bpt>Using Insertion Operators and Controlling Format<ept id=\"p1\">](../standard-library/using-insertion-operators-and-controlling-format.md)</ept>.","source":"See [Using Insertion Operators and Controlling Format](../standard-library/using-insertion-operators-and-controlling-format.md)."},{"content":"Example","pos":[5329,5336]},{"content":"This example shows how to use <ph id=\"ph1\">`quoted`</ph> with the default delimiter and escape character using narrow strings.","pos":[5341,5449],"source":"This example shows how to use `quoted` with the default delimiter and escape character using narrow strings."},{"content":"Wide strings are equally supported.","pos":[5450,5485]},{"content":"Example","pos":[6986,6993]},{"content":"The following example shows how to provide custom a delimiter and/or escape character:","pos":[6998,7084]},{"pos":[9771,9784],"content":"resetiosflags"},{"content":"Clears the specified flags.","pos":[9788,9815]},{"content":"Parameters","pos":[9883,9893]},{"content":"The flags to clear.","pos":[9907,9926]},{"content":"Return Value","pos":[9936,9948]},{"content":"The manipulator returns an object that, when extracted from or inserted into the stream <bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept>, calls <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept>.","pos":[9952,10063],"source":"The manipulator returns an object that, when extracted from or inserted into the stream **str**, calls **str**."},{"content":"<bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>( <ph id=\"ph1\">`ios_base::`</ph><bpt id=\"p2\">[</bpt>fmtflags<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>, _ <bpt id=\"p3\">*</bpt>Mask<ept id=\"p3\">*</ept>), and then returns <bpt id=\"p4\">**</bpt>str<ept id=\"p4\">**</ept>.","pos":[10064,10244],"source":"[setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::`[fmtflags](../standard-library/ios-base-class.md#ios_base__fmtflags), _ *Mask*), and then returns **str**."},{"content":"Example","pos":[10254,10261]},{"pos":[10266,10364],"content":"See <bpt id=\"p1\">[</bpt>setw<ept id=\"p1\">](../standard-library/iomanip-functions.md#setw)</ept> for an example of using <ph id=\"ph1\">`resetiosflags`</ph>.","source":"See [setw](../standard-library/iomanip-functions.md#setw) for an example of using `resetiosflags`."},{"pos":[10398,10405],"content":"setbase"},{"content":"Set base for integers.","pos":[10409,10431]},{"content":"Parameters","pos":[10479,10489]},{"content":"The number base.","pos":[10504,10520]},{"content":"Return Value","pos":[10530,10542]},{"content":"The manipulator returns an object that, when extracted from or inserted into the stream <bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept>, calls <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept>.","pos":[10546,10657],"source":"The manipulator returns an object that, when extracted from or inserted into the stream **str**, calls **str**."},{"content":"( <bpt id=\"p1\">**</bpt>mask<ept id=\"p1\">**</ept>, <bpt id=\"p2\">[</bpt>ios_base::basefield<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>), and then returns <bpt id=\"p3\">**</bpt>str<ept id=\"p3\">**</ept>.","pos":[10664,10783],"source":"( **mask**, [ios_base::basefield](../standard-library/ios-base-class.md#ios_base__fmtflags)), and then returns **str**."},{"content":"Here, <bpt id=\"p1\">**</bpt>mask<ept id=\"p1\">**</ept> is determined as follows:","pos":[10784,10824],"source":" Here, **mask** is determined as follows:"},{"pos":[10834,10929],"content":"If _ <bpt id=\"p1\">*</bpt>Base<ept id=\"p1\">*</ept> is 8, then <bpt id=\"p2\">**</bpt>mask<ept id=\"p2\">**</ept> is <ph id=\"ph1\">`ios_base::`</ph><bpt id=\"p3\">[</bpt>oct<ept id=\"p3\">](../standard-library/ios-functions.md#oct)</ept>.","source":"If _ *Base* is 8, then **mask** is `ios_base::`[oct](../standard-library/ios-functions.md#oct)."},{"pos":[10939,11031],"content":"If _ <bpt id=\"p1\">*</bpt>Base<ept id=\"p1\">*</ept> is 10, then mask is <ph id=\"ph1\">`ios_base::`</ph><bpt id=\"p2\">[</bpt>dec<ept id=\"p2\">](../standard-library/ios-functions.md#dec)</ept>.","source":"If _ *Base* is 10, then mask is `ios_base::`[dec](../standard-library/ios-functions.md#dec)."},{"pos":[11041,11137],"content":"If _ <bpt id=\"p1\">*</bpt>Base<ept id=\"p1\">*</ept> is 16, then <bpt id=\"p2\">**</bpt>mask<ept id=\"p2\">**</ept> is <ph id=\"ph1\">`ios_base::`</ph><bpt id=\"p3\">[</bpt>hex<ept id=\"p3\">](../standard-library/ios-functions.md#hex)</ept>.","source":"If _ *Base* is 16, then **mask** is `ios_base::`[hex](../standard-library/ios-functions.md#hex)."},{"pos":[11147,11276],"content":"If _ <bpt id=\"p1\">*</bpt>Base<ept id=\"p1\">*</ept> is any other value, then mask is <ph id=\"ph1\">`ios_base::`</ph><bpt id=\"p2\">[</bpt>fmtflags<ept id=\"p2\">](../standard-library/ios-base-class.md#ios_base__fmtflags)</ept>(0).","source":"If _ *Base* is any other value, then mask is `ios_base::`[fmtflags](../standard-library/ios-base-class.md#ios_base__fmtflags)(0)."},{"content":"Example","pos":[11286,11293]},{"pos":[11298,11390],"content":"See <bpt id=\"p1\">[</bpt>setw<ept id=\"p1\">](../standard-library/iomanip-functions.md#setw)</ept> for an example of using <ph id=\"ph1\">`setbase`</ph>.","source":"See [setw](../standard-library/iomanip-functions.md#setw) for an example of using `setbase`."},{"pos":[11424,11431],"content":"setfill"},{"content":"Sets the character that will be used to fill spaces in a right-justified display.","pos":[11435,11516]},{"content":"Parameters","pos":[11586,11596]},{"content":"The character that will be used to fill spaces in a right-justified display.","pos":[11608,11684]},{"content":"Return Value","pos":[11694,11706]},{"content":"The template manipulator returns an object that, when extracted from or inserted into the stream <bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept>, calls <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept>.","pos":[11710,11830],"source":"The template manipulator returns an object that, when extracted from or inserted into the stream **str**, calls **str**."},{"content":"<bpt id=\"p1\">[</bpt>fill<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__fill)</ept>( <ph id=\"ph1\">`Ch`</ph>), and then returns <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept>.","pos":[11831,11927],"source":"[fill](../standard-library/basic-ios-class.md#basic_ios__fill)( `Ch`), and then returns **str**."},{"content":"The type <bpt id=\"p1\">**</bpt>Elem<ept id=\"p1\">**</ept> must be the same as the element type for the stream <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept>.","pos":[11928,12006],"source":" The type **Elem** must be the same as the element type for the stream **str**."},{"content":"Example","pos":[12016,12023]},{"pos":[12028,12120],"content":"See <bpt id=\"p1\">[</bpt>setw<ept id=\"p1\">](../standard-library/iomanip-functions.md#setw)</ept> for an example of using <ph id=\"ph1\">`setfill`</ph>.","source":"See [setw](../standard-library/iomanip-functions.md#setw) for an example of using `setfill`."},{"pos":[12158,12169],"content":"setiosflags"},{"content":"Sets the specified flags.","pos":[12173,12198]},{"content":"Parameters","pos":[12264,12274]},{"content":"The flags to set.","pos":[12288,12305]},{"content":"Return Value","pos":[12315,12327]},{"content":"The manipulator returns an object that, when extracted from or inserted into the stream <bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept>, calls <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept>.","pos":[12331,12442],"source":"The manipulator returns an object that, when extracted from or inserted into the stream **str**, calls **str**."},{"content":"<bpt id=\"p1\">[</bpt>setf<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__setf)</ept>(_ <bpt id=\"p2\">*</bpt>Mask<ept id=\"p2\">*</ept>), and then returns <bpt id=\"p3\">**</bpt>str<ept id=\"p3\">**</ept>.","pos":[12443,12540],"source":"[setf](../standard-library/ios-base-class.md#ios_base__setf)(_ *Mask*), and then returns **str**."},{"content":"Example","pos":[12550,12557]},{"pos":[12562,12658],"content":"See <bpt id=\"p1\">[</bpt>setw<ept id=\"p1\">](../standard-library/iomanip-functions.md#setw)</ept> for an example of using <ph id=\"ph1\">`setiosflags`</ph>.","source":"See [setw](../standard-library/iomanip-functions.md#setw) for an example of using `setiosflags`."},{"pos":[12697,12709],"content":"setprecision"},{"content":"Sets the precision for floating-point values.","pos":[12713,12758]},{"content":"Parameters","pos":[12817,12827]},{"content":"The precision for floating-point values.","pos":[12841,12881]},{"content":"Return Value","pos":[12891,12903]},{"content":"The manipulator returns an object that, when extracted from or inserted into the stream <bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept>, calls <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept>.","pos":[12907,13018],"source":"The manipulator returns an object that, when extracted from or inserted into the stream **str**, calls **str**."},{"content":"<bpt id=\"p1\">[</bpt>precision<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__precision)</ept>( <ph id=\"ph1\">`Prec`</ph>), and then returns <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept>.","pos":[13019,13125],"source":"[precision](../standard-library/ios-base-class.md#ios_base__precision)( `Prec`), and then returns **str**."},{"content":"Example","pos":[13135,13142]},{"pos":[13147,13244],"content":"See <bpt id=\"p1\">[</bpt>setw<ept id=\"p1\">](../standard-library/iomanip-functions.md#setw)</ept> for an example of using <ph id=\"ph1\">`setprecision`</ph>.","source":"See [setw](../standard-library/iomanip-functions.md#setw) for an example of using `setprecision`."},{"pos":[13275,13279],"content":"setw"},{"content":"Specifies the width of the display field for the next element in the stream.","pos":[13283,13359]},{"content":"Parameters","pos":[13410,13420]},{"content":"The width of the display field.","pos":[13434,13465]},{"content":"Return Value","pos":[13475,13487]},{"content":"The manipulator returns an object that, when extracted from or inserted into the stream <bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept>, calls <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept>.","pos":[13491,13602],"source":"The manipulator returns an object that, when extracted from or inserted into the stream **str**, calls **str**."},{"content":"<bpt id=\"p1\">[</bpt>width<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__width)</ept>(_ <bpt id=\"p2\">*</bpt>Wide<ept id=\"p2\">*</ept>), then returns <bpt id=\"p3\">**</bpt>str<ept id=\"p3\">**</ept>.","pos":[13603,13698],"source":"[width](../standard-library/ios-base-class.md#ios_base__width)(_ *Wide*), then returns **str**."},{"content":"Remarks","pos":[13708,13715]},{"content":"setw sets the width only for the next element in the stream and must be inserted before each element whose width you want to specify.","pos":[13719,13852]},{"content":"Example","pos":[13862,13869]},{"content":"See Also","pos":[18238,18246]},{"content":"iomanip&gt;","pos":[18253,18261],"source":"iomanip>"}],"content":"---\ntitle: \"&lt;iomanip&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 3ddde610-70cc-4cfa-8a89-3e83d1d356a8\ncaps.latest.revision: 10\nmanager: \"ghogen\"\n---\n# &lt;iomanip&gt; functions\n||||  \n|-|-|-|  \n|[get_money](#iomanip_get_money)|[get_time](#iomanip_get_time)|[put_money](#iomanip_put_money)|  \n|[put_time](#iomanip_put_time)|[quoted](#quoted)|[resetiosflags](#resetiosflags)|  \n|[setbase](#setbase)|[setfill](#setfill)|[setiosflags](#setiosflags)|  \n|[setprecision](#setprecision)|[setw](#setw)|  \n  \n##  <a name=\"iomanip_get_money\"></a>  get_money  \n Extracts a monetary value from a stream using the desired format, and returns the value in a parameter.  \n  \n```  \ntemplate <class Money>  \nT7 get_money(Money& _Amount, bool _Intl);\n```  \n  \n### Parameters  \n _Amount  \n The extracted monetary value.  \n  \n _Intl  \n If `true`, use international format. The default value is `false`.  \n  \n### Remarks  \n The manipulator returns an object that, when extracted from the stream `str`, behaves as a `formatted input function` that calls the member function `get` for the locale facet `money_get` associated with `str`, using `_Intl` to indicate international format. If successful, the call stores in `_Amount` the extracted monetary value. The manipulator then returns `str`.  \n  \n `Money` must be of type `long double` or an instantiation of `basic_string` with the same element and traits parameters as `str`.  \n  \n##  <a name=\"iomanip_get_time\"></a>  get_time  \n Extracts a time value from a stream using a desired format. Returns the value in a parameter as a time structure.  \n  \n```  \ntemplate <class Elem>  \nT10 put_time(struct tm *_Tptr, const Elem *_Fmt);\n```  \n  \n### Parameters  \n `_Tptr`  \n The time in the form of a time structure.  \n  \n `_Fmt`  \n The desired format to use to obtain the time value.  \n  \n### Remarks  \n The manipulator returns an object that, when extracted from the stream `str`, behaves as a `formatted input function` that calls the member function `get` for the locale facet `time_get` associated with `str`, using `tptr` to indicate the time structure and `fmt` to indicate the beginning of a null-terminated format string. If successful, the call stores in the time structure the values associated with any extracted time fields. The manipulator then returns `str`.  \n  \n##  <a name=\"iomanip_put_money\"></a>  put_money  \n Inserts a monetary amount using the desired format into a stream.  \n  \n```  \ntemplate <class Money>  \nT8 put_money(const Money& _Amount, bool _Intl);\n```  \n  \n### Parameters  \n `_Amount`  \n The monetary amount to insert into the stream.  \n  \n `_Intl`  \n Set to `true` if manipulator should use international format, `false` if it should not.  \n  \n### Return Value  \n Returns `str`.  \n  \n### Remarks  \n The manipulator returns an object that, when inserted into the stream `str`, behaves as a formatted output function that calls the member function `put` for the locale facet `money_put` associated with `str`. If successful, the call inserts `amount` suitably formatted, using `_Intl` to indicate international format and `str.fill()`, as the fill element. The manipulator then returns `str`.  \n  \n `Money` must be of type `long double` or an instantiation of `basic_string` with the same element and traits parameters as `str`.  \n  \n##  <a name=\"iomanip_put_time\"></a>  put_time  \n Writes a time value from a time structure to a stream by using a specified format.  \n  \n```  \ntemplate <class Elem>  \nT10 put_time(struct tm* _Tptr, const Elem* _Fmt);\n```  \n  \n### Parameters  \n `_Tptr`  \n The time value to write to the stream, provided in a time structure.  \n  \n `_Fmt`  \n The desired format to write the time value.  \n  \n### Remarks  \n The manipulator returns an object that, when inserted into the stream `str`, behaves as a `formatted output function`. The output function calls the member function `put` for the locale facet `time_put` associated with `str`. The output function uses `_Tptr` to indicate the time structure and `_Fmt` to indicate the beginning of a NUL-terminated format string. If successful, the call inserts literal text from the format string and converted values from the time structure. The manipulator then returns `str`.  \n  \n##  <a name=\"quoted\"></a>  quoted  \n **(New in C++14)** An iostream manipulator that enables convenient round-tripping of strings into and out of streams using the >> and << operators.  \n  \n```  \nquoted(std::string str) // or wstring  \nquoted(const char* str) //or wchar_t* \nquoted(std::string str, char delimiter, char escape) // or wide versions  \nquoted(const char* str, char delimiter, char escape) // or wide versions  \n```  \n  \n### Parameters  \n `str`  \n A std::string, char*, string literal or raw string literal, or a wide version of any of these (e.g. std::wstring, wchar_t\\*).  \n  \n `delimiter`  \n A user-specified character, or wide character, to use as the delimiter for the beginning and end of the string.  \n  \n `escape`  \n A user-specified character, or wide character, to use as the escape character for escape sequences within the string.  \n  \n### Remarks  \n See [Using Insertion Operators and Controlling Format](../standard-library/using-insertion-operators-and-controlling-format.md).  \n  \n### Example  \n  This example shows how to use `quoted` with the default delimiter and escape character using narrow strings. Wide strings are equally supported.  \n  \n```cpp  \n  \n#include <iostream>  \n#include <iomanip>  \n#include <sstream>  \n  \nusing namespace std;  \n  \nvoid show_quoted_v_nonquoted()  \n{  \n    // Results are identical regardless of input string type:  \n    // string inserted { R\"(This is a \"sentence\".)\" }; // raw string literal  \n    // string inserted { \"This is a \\\"sentence\\\".\" };  // regular string literal  \n    const char* inserted = \"This is a \\\"sentence\\\".\";  // const char*  \n    stringstream ss, ss_quoted;  \n    string extracted, extracted_quoted;  \n  \n    ss << inserted;  \n    ss_quoted << quoted(inserted);  \n  \n    cout << \"ss.str() is storing       : \" << ss.str() << endl;  \n    cout << \"ss_quoted.str() is storing: \" << ss_quoted.str() << endl << endl;  \n  \n    // Round-trip the strings   \n    ss >> extracted;  \n    ss_quoted >> quoted(extracted_quoted);  \n  \n    cout << \"After round trip: \" << endl;  \n    cout << \"Non-quoted      : \" << extracted << endl;  \n    cout << \"Quoted          : \" << extracted_quoted << endl;  \n}  \n  \nvoid main(int argc, char* argv[])  \n{  \n    show_quoted_v_nonquoted();  \n  \n    // Keep console window open in debug mode.  \n    cout << endl << \"Press Enter to exit\" << endl;  \n    string input{};  \n    getline(cin, input);  \n}  \n  \n/* Output:  \nss.str() is storing       : This is a \"sentence\".  \nss_quoted.str() is storing: \"This is a \\\"sentence\\\".\"  \n  \nAfter round trip:  \nNon-quoted      : This  \nQuoted          : This is a \"sentence\".  \n  \nPress Enter to exit  \n*/  \n```  \n  \n### Example  \n  The following example shows how to provide custom a delimiter and/or escape character:  \n  \n```cpp  \n#include <iostream>  \n#include <iomanip>  \n#include <sstream>  \n  \nusing namespace std;  \n  \nvoid show_custom_delimiter()  \n{  \n    string inserted{ R\"(\"This\" \"is\" \"a\" \"heavily-quoted\" \"sentence\".)\" };  \n    // string inserted{ \"\\\"This\\\" \\\"is\\\" \\\"a\\\" \\\"heavily-quoted\\\" \\\"sentence\\\"\" };  \n    // const char* inserted{ \"\\\"This\\\" \\\"is\\\" \\\"a\\\" \\\"heavily-quoted\\\" \\\"sentence\\\"\" };  \n    stringstream ss, ss_quoted;  \n    string extracted;  \n  \n    ss_quoted << quoted(inserted, '*');  \n    ss << inserted;  \n    cout << \"ss_quoted.str() is storing: \" << ss_quoted.str() << endl;  \n    cout << \"ss.str() is storing       : \" << ss.str() << endl << endl;  \n  \n    // Use the same quoted arguments as on insertion.  \n    ss_quoted >> quoted(extracted, '*');  \n  \n    cout << \"After round trip: \" << endl;  \n    cout << \"Quoted          : \" << extracted << endl;  \n  \n    extracted = {};  \n    ss >> extracted;  \n    cout << \"Non-quoted      : \" << extracted << endl << endl;  \n}  \n  \nvoid show_custom_escape()  \n{  \n    string inserted{ R\"(\\\\root\\trunk\\branch\\nest\\egg\\yolk)\" };  \n    // string inserted{ \"\\\\\\\\root\\\\trunk\\\\branch\\\\nest\\\\egg\\\\yolk\" };  \n    stringstream ss, ss_quoted, ss_quoted_custom;  \n    string extracted;  \n  \n    // Use '\"' as delimiter and '~' as escape character.  \n    ss_quoted_custom << quoted(inserted, '\"', '~');  \n    ss_quoted << quoted(inserted);  \n    ss << inserted;  \n    cout << \"ss_quoted_custom.str(): \" << ss_quoted_custom.str() << endl;  \n    cout << \"ss_quoted.str()       : \" << ss_quoted.str() << endl;  \n    cout << \"ss.str()              : \" << ss.str() << endl << endl;  \n  \n    // No spaces in this string, so non-quoted behaves same as quoted  \n    // after round-tripping.  \n}  \n  \nvoid main(int argc, char* argv[])  \n{  \n    cout << \"Custom delimiter:\" << endl;  \n    show_custom_delimiter();  \n    cout << \"Custom escape character:\" << endl;  \n    show_custom_escape();  \n  \n    // Keep console window open in debug mode.  \n    cout << endl << \"Press Enter to exit\" << endl;  \n    string input{};  \n    getline(cin, input);  \n}  \n/* Output:  \nCustom delimiter:  \nss_quoted.str() is storing: *\"This\" \"is\" \"a\" \"heavily-quoted\" \"sentence\".*  \nss.str() is storing       : \"This\" \"is\" \"a\" \"heavily-quoted\" \"sentence\".  \n  \nAfter round trip:  \nQuoted          : \"This\" \"is\" \"a\" \"heavily-quoted\" \"sentence\".  \nNon-quoted      : \"This\"  \n  \nCustom escape character:  \nss_quoted_custom.str(): \"\\\\root\\trunk\\branch\\nest\\egg\\yolk\"  \nss_quoted.str()       : \"\\\\\\\\root\\\\trunk\\\\branch\\\\nest\\\\egg\\\\yolk\"  \nss.str()              : \\\\root\\trunk\\branch\\nest\\egg\\yolk  \n  \nPress Enter to exit  \n*/  \n  \n```  \n  \n##  <a name=\"resetiosflags\"></a>  resetiosflags  \n Clears the specified flags.  \n  \n```  \nT1 resetiosflags(ios_base::fmtflags Mask);\n```  \n  \n### Parameters  \n `Mask`  \n The flags to clear.  \n  \n### Return Value  \n The manipulator returns an object that, when extracted from or inserted into the stream **str**, calls **str**. [setf](../standard-library/ios-base-class.md#ios_base__setf)( `ios_base::`[fmtflags](../standard-library/ios-base-class.md#ios_base__fmtflags), _ *Mask*), and then returns **str**.  \n  \n### Example  \n  See [setw](../standard-library/iomanip-functions.md#setw) for an example of using `resetiosflags`.  \n  \n##  <a name=\"setbase\"></a>  setbase  \n Set base for integers.  \n  \n```  \nT3 setbase(int _Base);\n```  \n  \n### Parameters  \n `_Base`  \n The number base.  \n  \n### Return Value  \n The manipulator returns an object that, when extracted from or inserted into the stream **str**, calls **str**. `setf`( **mask**, [ios_base::basefield](../standard-library/ios-base-class.md#ios_base__fmtflags)), and then returns **str**. Here, **mask** is determined as follows:  \n  \n-   If _ *Base* is 8, then **mask** is `ios_base::`[oct](../standard-library/ios-functions.md#oct).  \n  \n-   If _ *Base* is 10, then mask is `ios_base::`[dec](../standard-library/ios-functions.md#dec).  \n  \n-   If _ *Base* is 16, then **mask** is `ios_base::`[hex](../standard-library/ios-functions.md#hex).  \n  \n-   If _ *Base* is any other value, then mask is `ios_base::`[fmtflags](../standard-library/ios-base-class.md#ios_base__fmtflags)(0).  \n  \n### Example  \n  See [setw](../standard-library/iomanip-functions.md#setw) for an example of using `setbase`.  \n  \n##  <a name=\"setfill\"></a>  setfill  \n Sets the character that will be used to fill spaces in a right-justified display.  \n  \n```  \ntemplate <class Elem>  \nT4 setfill(Elem Ch);\n```  \n  \n### Parameters  \n `Ch`  \n The character that will be used to fill spaces in a right-justified display.  \n  \n### Return Value  \n The template manipulator returns an object that, when extracted from or inserted into the stream **str**, calls **str**. [fill](../standard-library/basic-ios-class.md#basic_ios__fill)( `Ch`), and then returns **str**. The type **Elem** must be the same as the element type for the stream **str**.  \n  \n### Example  \n  See [setw](../standard-library/iomanip-functions.md#setw) for an example of using `setfill`.  \n  \n##  <a name=\"setiosflags\"></a>  setiosflags  \n Sets the specified flags.  \n  \n```  \nT2 setiosflags(ios_base::fmtflags Mask);\n```  \n  \n### Parameters  \n `Mask`  \n The flags to set.  \n  \n### Return Value  \n The manipulator returns an object that, when extracted from or inserted into the stream **str**, calls **str**. [setf](../standard-library/ios-base-class.md#ios_base__setf)(_ *Mask*), and then returns **str**.  \n  \n### Example  \n  See [setw](../standard-library/iomanip-functions.md#setw) for an example of using `setiosflags`.  \n  \n##  <a name=\"setprecision\"></a>  setprecision  \n Sets the precision for floating-point values.  \n  \n```  \nT5 setprecision(streamsize Prec);\n```  \n  \n### Parameters  \n `Prec`  \n The precision for floating-point values.  \n  \n### Return Value  \n The manipulator returns an object that, when extracted from or inserted into the stream **str**, calls **str**. [precision](../standard-library/ios-base-class.md#ios_base__precision)( `Prec`), and then returns **str**.  \n  \n### Example  \n  See [setw](../standard-library/iomanip-functions.md#setw) for an example of using `setprecision`.  \n  \n##  <a name=\"setw\"></a>  setw  \n Specifies the width of the display field for the next element in the stream.  \n  \n```  \nT6 setw(streamsize Wide);\n```  \n  \n### Parameters  \n `Wide`  \n The width of the display field.  \n  \n### Return Value  \n The manipulator returns an object that, when extracted from or inserted into the stream **str**, calls **str**. [width](../standard-library/ios-base-class.md#ios_base__width)(_ *Wide*), then returns **str**.  \n  \n### Remarks  \n setw sets the width only for the next element in the stream and must be inserted before each element whose width you want to specify.  \n  \n### Example  \n  \n```cpp  \n// iomanip_setw.cpp   \n// compile with: /EHsc  \n// Defines the entry point for the console application.  \n//  \n// Sample use of the following manipulators:  \n//   resetiosflags  \n//   setiosflags  \n//   setbase  \n//   setfill  \n//   setprecision  \n//   setw  \n  \n#include <iostream>  \n#include <iomanip>  \n  \nusing namespace std;  \n  \nconst double   d1 = 1.23456789;  \nconst double   d2 = 12.3456789;  \nconst double   d3 = 123.456789;  \nconst double   d4 = 1234.56789;  \nconst double   d5 = 12345.6789;  \nconst long      l1 = 16;  \nconst long      l2 = 256;  \nconst long      l3 = 1024;  \nconst long      l4 = 4096;  \nconst long      l5 = 65536;  \nint         base = 10;  \n  \nvoid DisplayDefault( )  \n{  \n   cout << endl << \"default display\" << endl;  \n   cout << \"d1 = \" << d1 << endl;  \n   cout << \"d2 = \" << d2 << endl;  \n   cout << \"d3 = \" << d3 << endl;  \n   cout << \"d4 = \" << d4 << endl;  \n   cout << \"d5 = \" << d5 << endl;  \n}  \n  \nvoid DisplayWidth( int n )  \n{  \n   cout << endl << \"fixed width display set to \" << n << \".\\n\";  \n   cout << \"d1 = \" << setw(n) << d1 << endl;  \n   cout << \"d2 = \" << setw(n) << d2 << endl;  \n   cout << \"d3 = \" << setw(n) << d3 << endl;  \n   cout << \"d4 = \" << setw(n) << d4 << endl;  \n   cout << \"d5 = \" << setw(n) << d5 << endl;  \n}  \n  \nvoid DisplayLongs( )  \n{  \n   cout << setbase(10);  \n   cout << endl << \"setbase(\" << base << \")\" << endl;  \n   cout << setbase(base);  \n   cout << \"l1 = \" << l1 << endl;  \n   cout << \"l2 = \" << l2 << endl;  \n   cout << \"l3 = \" << l3 << endl;  \n   cout << \"l4 = \" << l4 << endl;  \n   cout << \"l5 = \" << l5 << endl;  \n}  \n  \nint main( int argc, char* argv[] )  \n{  \n   DisplayDefault( );  \n  \n   cout << endl << \"setprecision(\" << 3 << \")\" << setprecision(3);  \n   DisplayDefault( );  \n  \n   cout << endl << \"setprecision(\" << 12 << \")\" << setprecision(12);  \n   DisplayDefault( );  \n  \n   cout << setiosflags(ios_base::scientific);  \n   cout << endl << \"setiosflags(\" << ios_base::scientific << \")\";  \n   DisplayDefault( );  \n  \n   cout << resetiosflags(ios_base::scientific);  \n   cout << endl << \"resetiosflags(\" << ios_base::scientific << \")\";  \n   DisplayDefault( );  \n  \n   cout << endl << \"setfill('\" << 'S' << \"')\" << setfill('S');  \n   DisplayWidth(15);  \n   DisplayDefault( );  \n  \n   cout << endl << \"setfill('\" << ' ' << \"')\" << setfill(' ');  \n   DisplayWidth(15);  \n   DisplayDefault( );  \n  \n   cout << endl << \"setprecision(\" << 8 << \")\" << setprecision(8);  \n   DisplayWidth(10);  \n   DisplayDefault( );  \n  \n   base = 16;  \n   DisplayLongs( );  \n  \n   base = 8;  \n   DisplayLongs( );  \n  \n   base = 10;  \n   DisplayLongs( );  \n  \n   return   0;  \n}  \n```  \n  \n```Output  \n  \ndefault display  \nd1 = 1.23457  \nd2 = 12.3457  \nd3 = 123.457  \nd4 = 1234.57  \nd5 = 12345.7  \n  \nsetprecision(3)  \ndefault display  \nd1 = 1.23  \nd2 = 12.3  \nd3 = 123  \nd4 = 1.23e+003  \nd5 = 1.23e+004  \n  \nsetprecision(12)  \ndefault display  \nd1 = 1.23456789  \nd2 = 12.3456789  \nd3 = 123.456789  \nd4 = 1234.56789  \nd5 = 12345.6789  \n  \nsetiosflags(4096)  \ndefault display  \nd1 = 1.234567890000e+000  \nd2 = 1.234567890000e+001  \nd3 = 1.234567890000e+002  \nd4 = 1.234567890000e+003  \nd5 = 1.234567890000e+004  \n  \nresetiosflags(4096)  \ndefault display  \nd1 = 1.23456789  \nd2 = 12.3456789  \nd3 = 123.456789  \nd4 = 1234.56789  \nd5 = 12345.6789  \n  \nsetfill('S')  \nfixed width display set to 15.  \nd1 = SSSSS1.23456789  \nd2 = SSSSS12.3456789  \nd3 = SSSSS123.456789  \nd4 = SSSSS1234.56789  \nd5 = SSSSS12345.6789  \n  \ndefault display  \nd1 = 1.23456789  \nd2 = 12.3456789  \nd3 = 123.456789  \nd4 = 1234.56789  \nd5 = 12345.6789  \n  \nsetfill(' ')  \nfixed width display set to 15.  \nd1 =      1.23456789  \nd2 =      12.3456789  \nd3 =      123.456789  \nd4 =      1234.56789  \nd5 =      12345.6789  \n  \ndefault display  \nd1 = 1.23456789  \nd2 = 12.3456789  \nd3 = 123.456789  \nd4 = 1234.56789  \nd5 = 12345.6789  \n  \nsetprecision(8)  \nfixed width display set to 10.  \nd1 =  1.2345679  \nd2 =  12.345679  \nd3 =  123.45679  \nd4 =  1234.5679  \nd5 =  12345.679  \n  \ndefault display  \nd1 = 1.2345679  \nd2 = 12.345679  \nd3 = 123.45679  \nd4 = 1234.5679  \nd5 = 12345.679  \n  \nsetbase(16)  \nl1 = 10  \nl2 = 100  \nl3 = 400  \nl4 = 1000  \nl5 = 10000  \n  \nsetbase(8)  \nl1 = 20  \nl2 = 400  \nl3 = 2000  \nl4 = 10000  \nl5 = 200000  \n  \nsetbase(10)  \nl1 = 16  \nl2 = 256  \nl3 = 1024  \nl4 = 4096  \nl5 = 65536  \n```  \n  \n## See Also  \n [\\<iomanip>](../standard-library/iomanip.md)\n\n"}