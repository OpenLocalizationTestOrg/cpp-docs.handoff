{"nodes":[{"pos":[12,50],"content":"wcstombs, _wcstombs_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"wcstombs, _wcstombs_l | Microsoft Docs","pos":[0,38]}]},{"content":"wcstombs, _wcstombs_l","pos":[1170,1191]},{"content":"Converts a sequence of wide characters to a corresponding sequence of multibyte characters.","pos":[1192,1283]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>wcstombs_s, _wcstombs_s_l<ept id=\"p1\">](../../c-runtime-library/reference/wcstombs-s-wcstombs-s-l.md)</ept>.","pos":[1284,1433],"source":" More secure versions of these functions are available; see [wcstombs_s, _wcstombs_s_l](../../c-runtime-library/reference/wcstombs-s-wcstombs-s-l.md)."},{"content":"Syntax","pos":[1442,1448]},{"content":"Parameters","pos":[1966,1976]},{"content":"The address of a sequence of multibyte characters.","pos":[1991,2041]},{"content":"The address of a sequence of wide characters.","pos":[2059,2104]},{"content":"The maximum number of bytes that can be stored in the multibyte output string.","pos":[2122,2200]},{"content":"The locale to use.","pos":[2219,2237]},{"content":"Return Value","pos":[2246,2258]},{"content":"If <ph id=\"ph1\">`wcstombs`</ph> successfully converts the multibyte string, it returns the number of bytes written into the multibyte output string, excluding the terminating <ph id=\"ph2\">`NULL`</ph> (if any).","pos":[2262,2435],"source":"If `wcstombs` successfully converts the multibyte string, it returns the number of bytes written into the multibyte output string, excluding the terminating `NULL` (if any)."},{"content":"If the <ph id=\"ph1\">`mbstr`</ph> argument is <ph id=\"ph2\">`NULL`</ph>, <ph id=\"ph3\">`wcstombs`</ph> returns the required size in bytes of the destination string.","pos":[2436,2543],"source":" If the `mbstr` argument is `NULL`, `wcstombs` returns the required size in bytes of the destination string."},{"content":"If <ph id=\"ph1\">`wcstombs`</ph> encounters a wide character it cannot convert to a multibyte character, it returns –1 cast to type <ph id=\"ph2\">`size_t`</ph> and sets <ph id=\"ph3\">`errno`</ph> to <ph id=\"ph4\">`EILSEQ`</ph>.","pos":[2544,2695],"source":" If `wcstombs` encounters a wide character it cannot convert to a multibyte character, it returns –1 cast to type `size_t` and sets `errno` to `EILSEQ`."},{"content":"Remarks","pos":[2704,2711]},{"content":"The <ph id=\"ph1\">`wcstombs`</ph> function converts the wide-character string pointed to by <ph id=\"ph2\">`wcstr`</ph> to the corresponding multibyte characters and stores the results in the <ph id=\"ph3\">`mbstr`</ph> array.","pos":[2715,2882],"source":"The `wcstombs` function converts the wide-character string pointed to by `wcstr` to the corresponding multibyte characters and stores the results in the `mbstr` array."},{"content":"The <ph id=\"ph1\">`count`</ph> parameter indicates the maximum number of bytes that can be stored in the multibyte output string (that is, the size of <ph id=\"ph2\">`mbstr`</ph>).","pos":[2883,3024],"source":" The `count` parameter indicates the maximum number of bytes that can be stored in the multibyte output string (that is, the size of `mbstr`)."},{"content":"In general, it is not known how many bytes will be required when converting a wide-character string.","pos":[3025,3125]},{"content":"Some wide characters will require only one byte in the output string; others require two.","pos":[3126,3215]},{"content":"If there are two bytes in the multibyte output string for every wide character in the input string (including the wide character <ph id=\"ph1\">`NULL`</ph>), the result is guaranteed to fit.","pos":[3216,3386],"source":" If there are two bytes in the multibyte output string for every wide character in the input string (including the wide character `NULL`), the result is guaranteed to fit."},{"content":"If <ph id=\"ph1\">`wcstombs`</ph> encounters the wide-character null character (L'\\0') either before or when <ph id=\"ph2\">`count`</ph> occurs, it converts it to an 8-bit 0 and stops.","pos":[3393,3537],"source":"If `wcstombs` encounters the wide-character null character (L'\\0') either before or when `count` occurs, it converts it to an 8-bit 0 and stops."},{"content":"Thus, the multibyte character string at <ph id=\"ph1\">`mbstr`</ph> is null-terminated only if <ph id=\"ph2\">`wcstombs`</ph> encounters a wide-character null character during conversion.","pos":[3538,3685],"source":" Thus, the multibyte character string at `mbstr` is null-terminated only if `wcstombs` encounters a wide-character null character during conversion."},{"content":"If the sequences pointed to by <ph id=\"ph1\">`wcstr`</ph> and <ph id=\"ph2\">`mbstr`</ph> overlap, the behavior of <ph id=\"ph3\">`wcstombs`</ph> is undefined.","pos":[3686,3786],"source":" If the sequences pointed to by `wcstr` and `mbstr` overlap, the behavior of `wcstombs` is undefined."},{"pos":[3793,3900],"content":"If the <ph id=\"ph1\">`mbstr`</ph> argument is <ph id=\"ph2\">`NULL`</ph>, <ph id=\"ph3\">`wcstombs`</ph> returns the required size in bytes of the destination string.","source":"If the `mbstr` argument is `NULL`, `wcstombs` returns the required size in bytes of the destination string."},{"content":"validates its parameters.","pos":[3918,3943]},{"content":"If <ph id=\"ph1\">`wcstr`</ph> is <ph id=\"ph2\">`NULL`</ph>, or if <ph id=\"ph3\">`count`</ph> is greater than<ph id=\"ph4\">`INT_MAX`</ph>, this function invokes the invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept> .","pos":[3944,4148],"source":" If `wcstr` is `NULL`, or if `count` is greater than`INT_MAX`, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) ."},{"content":"If execution is allowed to continue, the function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns -1.","pos":[4149,4239],"source":" If execution is allowed to continue, the function sets `errno` to `EINVAL` and returns -1."},{"content":"uses the current locale for any locale-dependent behavior; <ph id=\"ph1\">`_wcstombs_l`</ph> is identical except that it uses the locale passed in instead.","pos":[4257,4392],"source":" uses the current locale for any locale-dependent behavior; `_wcstombs_l` is identical except that it uses the locale passed in instead."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Locale<ept id=\"p1\">](../../c-runtime-library/locale.md)</ept>.","pos":[4393,4463],"source":" For more information, see [Locale](../../c-runtime-library/locale.md)."},{"content":"In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions.","pos":[4470,4580]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[4581,4689],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Requirements","pos":[4698,4710]},{"content":"Routine","pos":[4717,4724]},{"content":"Required header","pos":[4725,4740]},{"content":"stdlib.h&gt;","pos":[4798,4807],"source":"stdlib.h>"},{"content":"stdlib.h&gt;","pos":[4828,4837],"source":"stdlib.h>"},{"pos":[4845,4969],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[4978,4985]},{"pos":[4989,5054],"content":"This program illustrates the behavior of the <ph id=\"ph1\">`wcstombs`</ph> function.","source":"This program illustrates the behavior of the `wcstombs` function."},{"content":".NET Framework Equivalent","pos":[5991,6016]},{"content":"Not applicable.","pos":[6020,6035]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[6036,6083],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[6084,6209],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[6218,6226]},{"content":"Data Conversion","pos":[6231,6246]},{"content":"Locale","pos":[6297,6303]},{"content":"_mbclen, mblen, _mblen_l","pos":[6345,6369]},{"content":"mbstowcs, _mbstowcs_l","pos":[6435,6456]},{"content":"mbtowc, _mbtowc_l","pos":[6521,6538]},{"content":"wctomb, _wctomb_l","pos":[6599,6616]},{"content":"WideCharToMultiByte","pos":[6677,6696]}],"content":"---\ntitle: \"wcstombs, _wcstombs_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"wcstombs\"\n  - \"_wcstombs_l\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-convert-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"wcstombs\"\n  - \"_wcstombs_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_wcstombs_l function\"\n  - \"wcstombs function\"\n  - \"string conversion, wide characters\"\n  - \"wide characters, converting\"\n  - \"wcstombs_l function\"\n  - \"characters, converting\"\n  - \"string conversion, multibyte character strings\"\nms.assetid: 91234252-9ea1-423a-af99-e9d0ce4a40e3\ncaps.latest.revision: 30\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# wcstombs, _wcstombs_l\nConverts a sequence of wide characters to a corresponding sequence of multibyte characters. More secure versions of these functions are available; see [wcstombs_s, _wcstombs_s_l](../../c-runtime-library/reference/wcstombs-s-wcstombs-s-l.md).  \n  \n## Syntax  \n  \n```  \nsize_t wcstombs(  \n   char *mbstr,  \n   const wchar_t *wcstr,  \n   size_t count   \n);  \nsize_t _wcstombs_l(  \n   char *mbstr,  \n   const wchar_t *wcstr,  \n   size_t count,  \n   _locale_t locale  \n);  \ntemplate <size_t size>  \nsize_t wcstombs(  \n   char (&mbstr)[size],  \n   const wchar_t *wcstr,  \n   size_t count   \n); // C++ only  \ntemplate <size_t size>  \nsize_t _wcstombs_l(  \n   char (&mbstr)[size],  \n   const wchar_t *wcstr,  \n   size_t count,  \n   _locale_t locale  \n); // C++ only  \n```  \n  \n#### Parameters  \n `mbstr`  \n The address of a sequence of multibyte characters.  \n  \n `wcstr`  \n The address of a sequence of wide characters.  \n  \n `count`  \n The maximum number of bytes that can be stored in the multibyte output string.  \n  \n `locale`  \n The locale to use.  \n  \n## Return Value  \n If `wcstombs` successfully converts the multibyte string, it returns the number of bytes written into the multibyte output string, excluding the terminating `NULL` (if any). If the `mbstr` argument is `NULL`, `wcstombs` returns the required size in bytes of the destination string. If `wcstombs` encounters a wide character it cannot convert to a multibyte character, it returns –1 cast to type `size_t` and sets `errno` to `EILSEQ`.  \n  \n## Remarks  \n The `wcstombs` function converts the wide-character string pointed to by `wcstr` to the corresponding multibyte characters and stores the results in the `mbstr` array. The `count` parameter indicates the maximum number of bytes that can be stored in the multibyte output string (that is, the size of `mbstr`). In general, it is not known how many bytes will be required when converting a wide-character string. Some wide characters will require only one byte in the output string; others require two. If there are two bytes in the multibyte output string for every wide character in the input string (including the wide character `NULL`), the result is guaranteed to fit.  \n  \n If `wcstombs` encounters the wide-character null character (L'\\0') either before or when `count` occurs, it converts it to an 8-bit 0 and stops. Thus, the multibyte character string at `mbstr` is null-terminated only if `wcstombs` encounters a wide-character null character during conversion. If the sequences pointed to by `wcstr` and `mbstr` overlap, the behavior of `wcstombs` is undefined.  \n  \n If the `mbstr` argument is `NULL`, `wcstombs` returns the required size in bytes of the destination string.  \n  \n `wcstombs` validates its parameters. If `wcstr` is `NULL`, or if `count` is greater than`INT_MAX`, this function invokes the invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md) . If execution is allowed to continue, the function sets `errno` to `EINVAL` and returns -1.  \n  \n `wcstombs` uses the current locale for any locale-dependent behavior; `_wcstombs_l` is identical except that it uses the locale passed in instead. For more information, see [Locale](../../c-runtime-library/locale.md).  \n  \n In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`wcstombs`|\\<stdlib.h>|  \n|`_wcstombs_l`|\\<stdlib.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n This program illustrates the behavior of the `wcstombs` function.  \n  \n```  \n// crt_wcstombs.c  \n// compile with: /W3  \n// This example demonstrates the use  \n// of wcstombs, which converts a string  \n// of wide characters to a string of   \n// multibyte characters.  \n  \n#include <stdlib.h>  \n#include <stdio.h>  \n  \n#define BUFFER_SIZE 100  \n  \nint main( void )  \n{  \n    size_t  count;  \n    char    *pMBBuffer = (char *)malloc( BUFFER_SIZE );  \n    wchar_t *pWCBuffer = L\"Hello, world.\";  \n  \n    printf(\"Convert wide-character string:\\n\" );  \n  \n    count = wcstombs(pMBBuffer, pWCBuffer, BUFFER_SIZE ); // C4996  \n    // Note: wcstombs is deprecated; consider using wcstombs_s instead  \n    printf(\"   Characters converted: %u\\n\",  \n            count );  \n    printf(\"    Multibyte character: %s\\n\\n\",  \n           pMBBuffer );  \n  \n    free(pMBBuffer);  \n}  \n```  \n  \n```Output  \nConvert wide-character string:  \n   Characters converted: 13  \n    Multibyte character: Hello, world.  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Data Conversion](../../c-runtime-library/data-conversion.md)   \n [Locale](../../c-runtime-library/locale.md)   \n [_mbclen, mblen, _mblen_l](../../c-runtime-library/reference/mbclen-mblen-mblen-l.md)   \n [mbstowcs, _mbstowcs_l](../../c-runtime-library/reference/mbstowcs-mbstowcs-l.md)   \n [mbtowc, _mbtowc_l](../../c-runtime-library/reference/mbtowc-mbtowc-l.md)   \n [wctomb, _wctomb_l](../../c-runtime-library/reference/wctomb-wctomb-l.md)   \n [WideCharToMultiByte](http://msdn.microsoft.com/library/windows/desktop/dd374130)"}