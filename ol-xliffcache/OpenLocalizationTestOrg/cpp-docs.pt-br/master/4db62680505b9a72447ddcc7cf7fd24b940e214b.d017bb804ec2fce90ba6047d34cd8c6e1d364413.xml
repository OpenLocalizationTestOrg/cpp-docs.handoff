{"nodes":[{"pos":[12,53],"content":"hash_map::find (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_map::find (STL-CLR) | Microsoft Docs","pos":[0,41]}]},{"content":"hash_map::find (STL/CLR)","pos":[629,653]},{"content":"Finds an element that matches a specified key.","pos":[654,700]},{"content":"Syntax","pos":[709,715]},{"content":"Parameters","pos":[772,782]},{"content":"key","pos":[786,789]},{"content":"Key value to search for.","pos":[793,817]},{"content":"Remarks","pos":[826,833]},{"content":"If at least one element in the controlled sequence has equivalent ordering with <ph id=\"ph1\">`key`</ph>, the member function returns an iterator designating one of those elements; otherwise it returns <bpt id=\"p1\">[</bpt>hash_map::end (STL/CLR)<ept id=\"p1\">](../dotnet/hash-map-end-stl-clr.md)</ept><ph id=\"ph2\">`()`</ph>.","pos":[837,1085],"source":"If at least one element in the controlled sequence has equivalent ordering with `key`, the member function returns an iterator designating one of those elements; otherwise it returns [hash_map::end (STL/CLR)](../dotnet/hash-map-end-stl-clr.md)`()`."},{"content":"You use it to locate an element currently in the controlled sequence that matches a specified key.","pos":[1086,1184]},{"content":"Example","pos":[1193,1200]},{"content":"Description","pos":[2250,2261]},{"pos":[2265,2335],"content":"Note that <ph id=\"ph1\">`find`</ph> does not guarantee which of several element it finds.","source":"Note that `find` does not guarantee which of several element it finds."},{"content":"Requirements","pos":[2344,2356]},{"pos":[2360,2390],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_map&gt;","source":"**Header:** \\<cliext/hash_map>"},{"pos":[2397,2418],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2427,2435]},{"content":"hash_map (STL/CLR)","pos":[2440,2458]},{"content":"hash_map::equal_range (STL/CLR)","pos":[2496,2527]},{"content":"hash_map::lower_bound (STL/CLR)","pos":[2577,2608]},{"content":"hash_map::upper_bound (STL/CLR)","pos":[2658,2689]}],"content":"---\ntitle: \"hash_map::find (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_map::find\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"find member [STL/CLR]\"\nms.assetid: 53ff8d57-2ea4-485e-9419-aed5e3f5affb\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_map::find (STL/CLR)\nFinds an element that matches a specified key.  \n  \n## Syntax  \n  \n```  \niterator find(key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n If at least one element in the controlled sequence has equivalent ordering with `key`, the member function returns an iterator designating one of those elements; otherwise it returns [hash_map::end (STL/CLR)](../dotnet/hash-map-end-stl-clr.md)`()`. You use it to locate an element currently in the controlled sequence that matches a specified key.  \n  \n## Example  \n  \n```  \n// cliext_hash_map_find.cpp   \n// compile with: /clr   \n#include <cliext/hash_map>   \n  \ntypedef cliext::hash_map<wchar_t, int> Myhash_map;   \nint main()   \n    {   \n    Myhash_map c1;   \n    c1.insert(Myhash_map::make_value(L'a', 1));   \n    c1.insert(Myhash_map::make_value(L'b', 2));   \n    c1.insert(Myhash_map::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Myhash_map::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"find {0} = {1}\",   \n        L'A', c1.find(L'A') != c1.end());   \n  \n    Myhash_map::iterator it = c1.find(L'b');   \n    System::Console::WriteLine(\"find {0} = [{1} {2}]\",   \n        L'b', it->first, it->second);   \n  \n    System::Console::WriteLine(\"find {0} = {1}\",   \n        L'C', c1.find(L'C') != c1.end());   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [a 1] [b 2] [c 3]  \nfind A = False  \nfind b = [b 2]  \nfind C = False  \n```  \n  \n## Description  \n Note that `find` does not guarantee which of several element it finds.  \n  \n## Requirements  \n **Header:** \\<cliext/hash_map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_map (STL/CLR)](../dotnet/hash-map-stl-clr.md)   \n [hash_map::equal_range (STL/CLR)](../dotnet/hash-map-equal-range-stl-clr.md)   \n [hash_map::lower_bound (STL/CLR)](../dotnet/hash-map-lower-bound-stl-clr.md)   \n [hash_map::upper_bound (STL/CLR)](../dotnet/hash-map-upper-bound-stl-clr.md)"}