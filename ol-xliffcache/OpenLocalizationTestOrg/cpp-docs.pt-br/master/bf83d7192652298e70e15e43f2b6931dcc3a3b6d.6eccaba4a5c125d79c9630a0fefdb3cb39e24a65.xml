{"nodes":[{"pos":[12,43],"content":"COM Map Macros | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"COM Map Macros | Microsoft Docs","pos":[0,31]}]},{"content":"COM Map Macros","pos":[585,599]},{"content":"These macros define COM interface maps.","pos":[600,639]},{"content":"BEGIN_COM_MAP","pos":[661,674]},{"content":"Marks the beginning of the COM interface map entries.","pos":[692,745]},{"content":"COM_INTERFACE_ENTRY","pos":[751,770]},{"content":"Enters interfaces into the COM interface map.","pos":[844,889]},{"content":"COM_INTERFACE_ENTRY2","pos":[895,915]},{"content":"Use this macro to disambiguate two branches of inheritance.","pos":[940,999]},{"content":"COM_INTERFACE_ENTRY_IID","pos":[1005,1028]},{"content":"Use this macro to enter the interface into the COM map and specify its IID.","pos":[1056,1131]},{"content":"COM_INTERFACE_ENTRY2_IID","pos":[1137,1161]},{"pos":[1190,1284],"content":"Same as <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY2<ept id=\"p1\">](#com_interface_entry2)</ept>, except you can specify a different IID.","source":"Same as [COM_INTERFACE_ENTRY2](#com_interface_entry2), except you can specify a different IID."},{"content":"COM_INTERFACE_ENTRY_AGGREGATE","pos":[1290,1319]},{"pos":[1353,1459],"content":"When the interface identified by <ph id=\"ph1\">`iid`</ph> is queried for, <ph id=\"ph2\">`COM_INTERFACE_ENTRY_AGGREGATE`</ph> forwards to <ph id=\"ph3\">`punk`</ph>.","source":"When the interface identified by `iid` is queried for, `COM_INTERFACE_ENTRY_AGGREGATE` forwards to `punk`."},{"content":"COM_INTERFACE_ENTRY_AGGREGATE_BLIND","pos":[1465,1500]},{"pos":[1540,1688],"content":"Same as <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY_AGGREGATE<ept id=\"p1\">](#com_interface_entry_aggregate)</ept>, except that querying for any IID results in forwarding the query to <ph id=\"ph1\">`punk`</ph>.","source":"Same as [COM_INTERFACE_ENTRY_AGGREGATE](#com_interface_entry_aggregate), except that querying for any IID results in forwarding the query to `punk`."},{"content":"COM_INTERFACE_ENTRY_AUTOAGGREGATE","pos":[1694,1727]},{"pos":[1765,1932],"content":"Same as <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY_AGGREGATE<ept id=\"p1\">](#com_interface_entry_aggregate)</ept>, except if <ph id=\"ph1\">`punk`</ph> is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>, it automatically creates the aggregate described by the <ph id=\"ph2\">`clsid`</ph>.","source":"Same as [COM_INTERFACE_ENTRY_AGGREGATE](#com_interface_entry_aggregate), except if `punk` is **NULL**, it automatically creates the aggregate described by the `clsid`."},{"content":"COM_INTERFACE_ENTRY_AUTOAGGREGATE_BLIND","pos":[1938,1977]},{"pos":[2021,2267],"content":"Same as <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY_AUTOAGGREGATE<ept id=\"p1\">](#com_interface_entry_autoaggregate)</ept>, except that querying for any IID results in forwarding the query to <ph id=\"ph1\">`punk`</ph>, and if <ph id=\"ph2\">`punk`</ph> is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>, automatically creating the aggregate described by the <ph id=\"ph3\">`clsid`</ph>.","source":"Same as [COM_INTERFACE_ENTRY_AUTOAGGREGATE](#com_interface_entry_autoaggregate), except that querying for any IID results in forwarding the query to `punk`, and if `punk` is **NULL**, automatically creating the aggregate described by the `clsid`."},{"content":"COM_INTERFACE_ENTRY_BREAK","pos":[2273,2298]},{"pos":[2328,2473],"content":"Causes your program to call <bpt id=\"p1\">[</bpt>DebugBreak<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679297)</ept> when the specified interface is queried for.","source":"Causes your program to call [DebugBreak](http://msdn.microsoft.com/library/windows/desktop/ms679297) when the specified interface is queried for."},{"content":"COM_INTERFACE_ENTRY_CACHED_TEAR_OFF","pos":[2479,2514]},{"content":"Saves the interface-specific data for every instance.","pos":[2554,2607]},{"content":"COM_INTERFACE_ENTRY_TEAR_OFF","pos":[2613,2641]},{"content":"Exposes your tear-off interfaces.","pos":[2674,2707]},{"content":"COM_INTERFACE_ENTRY_CHAIN","pos":[2713,2738]},{"content":"Processes the COM map of the base class when the processing reaches this entry in the COM map.","pos":[2768,2862]},{"content":"COM_INTERFACE_ENTRY_FUNC","pos":[2868,2892]},{"pos":[2921,2987],"content":"A general mechanism for hooking into ATL's <ph id=\"ph1\">`QueryInterface`</ph> logic.","source":"A general mechanism for hooking into ATL's `QueryInterface` logic."},{"content":"COM_INTERFACE_ENTRY_FUNC_BLIND","pos":[2993,3023]},{"pos":[3058,3182],"content":"Same as <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY_FUNC<ept id=\"p1\">](#com_interface_entry_func)</ept>, except that querying for any IID results in a call to <ph id=\"ph1\">`func`</ph>.","source":"Same as [COM_INTERFACE_ENTRY_FUNC](#com_interface_entry_func), except that querying for any IID results in a call to `func`."},{"content":"COM_INTERFACE_ENTRY_NOINTERFACE","pos":[3188,3219]},{"pos":[3255,3359],"content":"Returns <bpt id=\"p1\">**</bpt>E_NOINTERFACE<ept id=\"p1\">**</ept> and terminates COM map processing when the specified interface is queried for.","source":"Returns **E_NOINTERFACE** and terminates COM map processing when the specified interface is queried for."},{"content":"END_COM_MAP","pos":[3365,3376]},{"content":"Marks the end of the COM interface map entries.","pos":[3392,3439]},{"pos":[3480,3493],"content":"BEGIN_COM_MAP"},{"pos":[3497,3600],"content":"The COM map is the mechanism that exposes interfaces on an object to a client through <ph id=\"ph1\">`QueryInterface`</ph>.","source":"The COM map is the mechanism that exposes interfaces on an object to a client through `QueryInterface`."},{"content":"Parameters","pos":[3640,3650]},{"content":"x","pos":[3655,3656]},{"content":"[in] The name of the class object you are exposing interfaces on.","pos":[3661,3726]},{"content":"Remarks","pos":[3736,3743]},{"content":"<bpt id=\"p1\">[</bpt>CComObjectRootEx::InternalQueryInterface<ept id=\"p1\">](ccomobjectrootex-class.md#ccomobjectrootex__internalqueryinterface)</ept> only returns pointers for interfaces in the COM map.","pos":[3747,3910],"source":"[CComObjectRootEx::InternalQueryInterface](ccomobjectrootex-class.md#ccomobjectrootex__internalqueryinterface) only returns pointers for interfaces in the COM map."},{"content":"Start your interface map with the <ph id=\"ph1\">`BEGIN_COM_MAP`</ph> macro, add entries for each of your interfaces with the <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY<ept id=\"p1\">](http://msdn.microsoft.com/library/c5363b8b-a1a2-471e-ad3a-d472f6c356c5)</ept> macro or one of its variants, and complete the map with the <bpt id=\"p2\">[</bpt>END_COM_MAP<ept id=\"p2\">](#end_com_map)</ept> macro.","pos":[3911,4205],"source":" Start your interface map with the `BEGIN_COM_MAP` macro, add entries for each of your interfaces with the [COM_INTERFACE_ENTRY](http://msdn.microsoft.com/library/c5363b8b-a1a2-471e-ad3a-d472f6c356c5) macro or one of its variants, and complete the map with the [END_COM_MAP](#end_com_map) macro."},{"content":"Example","pos":[4216,4223]},{"pos":[4227,4285],"content":"From the ATL <bpt id=\"p1\">[</bpt>BEEPER<ept id=\"p1\">](../../visual-cpp-samples.md)</ept> sample:","source":"From the ATL [BEEPER](../../visual-cpp-samples.md) sample:"},{"pos":[4303,4316],"content":"NVC_ATL_COM#1"},{"pos":[4417,4443],"content":"COM_INTERFACE_ENTRY Macros"},{"content":"These macros enter an object's interfaces into its COM map so that they can be accessed by <ph id=\"ph1\">`QueryInterface`</ph>.","pos":[4447,4555],"source":"These macros enter an object's interfaces into its COM map so that they can be accessed by `QueryInterface`."},{"content":"The order of entries in the COM map is the order interfaces will be checked for a matching <bpt id=\"p1\">**</bpt>IID<ept id=\"p1\">**</ept> during <ph id=\"ph1\">`QueryInterface`</ph>.","pos":[4556,4679],"source":" The order of entries in the COM map is the order interfaces will be checked for a matching **IID** during `QueryInterface`."},{"pos":[4729,4749],"content":"COM_INTERFACE_ENTRY2"},{"content":"Use this macro to disambiguate two branches of inheritance.","pos":[4753,4812]},{"content":"Parameters","pos":[4863,4873]},{"content":"x","pos":[4878,4879]},{"content":"[in] The name of an interface you want to expose from your object.","pos":[4884,4950]},{"content":"[in] The name of the inheritance branch from which <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> is exposed.","pos":[4965,5031],"source":" [in] The name of the inheritance branch from which *x* is exposed."},{"content":"Remarks","pos":[5041,5048]},{"pos":[5052,5243],"content":"For example, if you derive your class object from two dual interfaces, you expose <ph id=\"ph1\">`IDispatch`</ph> using <ph id=\"ph2\">`COM_INTERFACE_ENTRY2`</ph> since <ph id=\"ph3\">`IDispatch`</ph> can be obtained from either one of the interfaces.","source":"For example, if you derive your class object from two dual interfaces, you expose `IDispatch` using `COM_INTERFACE_ENTRY2` since `IDispatch` can be obtained from either one of the interfaces."},{"pos":[5250,5389],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"content":"Example","pos":[5399,5406]},{"pos":[5421,5442],"content":"NVC_ATL_Windowing#118"},{"pos":[5540,5563],"content":"COM_INTERFACE_ENTRY_IID"},{"content":"Use this macro to enter the interface into the COM map and specify its IID.","pos":[5567,5642]},{"content":"Parameters","pos":[5697,5707]},{"content":"[in] The GUID of the interface exposed.","pos":[5720,5759]},{"content":"x","pos":[5767,5768]},{"content":"[in] The name of the class whose vtable will be exposed as the interface identified by <ph id=\"ph1\">`iid`</ph>.","pos":[5773,5866],"source":" [in] The name of the class whose vtable will be exposed as the interface identified by `iid`."},{"content":"Remarks","pos":[5876,5883]},{"pos":[5887,6026],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"content":"Example","pos":[6036,6043]},{"pos":[6058,6079],"content":"NVC_ATL_Windowing#117"},{"pos":[6178,6202],"content":"COM_INTERFACE_ENTRY2_IID"},{"pos":[6206,6300],"content":"Same as <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY2<ept id=\"p1\">](#com_interface_entry2)</ept>, except you can specify a different IID.","source":"Same as [COM_INTERFACE_ENTRY2](#com_interface_entry2), except you can specify a different IID."},{"content":"Parameters","pos":[6361,6371]},{"content":"[in] The GUID you are specifying for the interface.","pos":[6384,6435]},{"content":"x","pos":[6443,6444]},{"content":"[in] The name of an interface that your class object derives from directly.","pos":[6449,6524]},{"content":"[in] The name of a second interface that your class object derives from directly.","pos":[6539,6620]},{"content":"Remarks","pos":[6630,6637]},{"pos":[6641,6780],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"pos":[6827,6847],"content":"COM_INTERFACE_ENTRY2"},{"content":"Use this macro to disambiguate two branches of inheritance.","pos":[6851,6910]},{"content":"Parameters","pos":[6961,6971]},{"content":"x","pos":[6976,6977]},{"content":"[in] The name of an interface you want to expose from your object.","pos":[6982,7048]},{"content":"[in] The name of the inheritance branch from which <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> is exposed.","pos":[7063,7129],"source":" [in] The name of the inheritance branch from which *x* is exposed."},{"content":"Remarks","pos":[7139,7146]},{"pos":[7150,7341],"content":"For example, if you derive your class object from two dual interfaces, you expose <ph id=\"ph1\">`IDispatch`</ph> using <ph id=\"ph2\">`COM_INTERFACE_ENTRY2`</ph> since <ph id=\"ph3\">`IDispatch`</ph> can be obtained from either one of the interfaces.","source":"For example, if you derive your class object from two dual interfaces, you expose `IDispatch` using `COM_INTERFACE_ENTRY2` since `IDispatch` can be obtained from either one of the interfaces."},{"pos":[7348,7487],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"content":"Example","pos":[7497,7504]},{"pos":[7519,7540],"content":"NVC_ATL_Windowing#118"},{"pos":[7645,7674],"content":"COM_INTERFACE_ENTRY_AGGREGATE"},{"pos":[7678,7784],"content":"When the interface identified by <ph id=\"ph1\">`iid`</ph> is queried for, <ph id=\"ph2\">`COM_INTERFACE_ENTRY_AGGREGATE`</ph> forwards to <ph id=\"ph3\">`punk`</ph>.","source":"When the interface identified by `iid` is queried for, `COM_INTERFACE_ENTRY_AGGREGATE` forwards to `punk`."},{"content":"Parameters","pos":[7848,7858]},{"content":"[in] The GUID of the interface queried for.","pos":[7871,7914]},{"content":"[in] The name of an <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer.","pos":[7931,7972],"source":" [in] The name of an **IUnknown** pointer."},{"content":"Remarks","pos":[7982,7989]},{"content":"The <ph id=\"ph1\">`punk`</ph> parameter is assumed to point to the inner unknown of an aggregate or to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, in which case the entry is ignored.","pos":[7993,8122],"source":"The `punk` parameter is assumed to point to the inner unknown of an aggregate or to **NULL**, in which case the entry is ignored."},{"content":"Typically, you would <bpt id=\"p1\">**</bpt>CoCreate<ept id=\"p1\">**</ept> the aggregate in <ph id=\"ph1\">`FinalConstruct`</ph>.","pos":[8123,8191],"source":" Typically, you would **CoCreate** the aggregate in `FinalConstruct`."},{"pos":[8198,8337],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"content":"Example","pos":[8347,8354]},{"pos":[8369,8390],"content":"NVC_ATL_Windowing#112"},{"pos":[8500,8535],"content":"COM_INTERFACE_ENTRY_AGGREGATE_BLIND"},{"pos":[8539,8687],"content":"Same as <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY_AGGREGATE<ept id=\"p1\">](#com_interface_entry_aggregate)</ept>, except that querying for any IID results in forwarding the query to <ph id=\"ph1\">`punk`</ph>.","source":"Same as [COM_INTERFACE_ENTRY_AGGREGATE](#com_interface_entry_aggregate), except that querying for any IID results in forwarding the query to `punk`."},{"content":"Parameters","pos":[8752,8762]},{"content":"[in] The name of an <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer.","pos":[8776,8817],"source":" [in] The name of an **IUnknown** pointer."},{"content":"Remarks","pos":[8827,8834]},{"content":"If the interface query fails, processing of the COM map continues.","pos":[8838,8904]},{"pos":[8911,9050],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"content":"Example","pos":[9060,9067]},{"pos":[9082,9103],"content":"NVC_ATL_Windowing#113"},{"pos":[9208,9237],"content":"COM_INTERFACE_ENTRY_AGGREGATE"},{"pos":[9241,9347],"content":"When the interface identified by <ph id=\"ph1\">`iid`</ph> is queried for, <ph id=\"ph2\">`COM_INTERFACE_ENTRY_AGGREGATE`</ph> forwards to <ph id=\"ph3\">`punk`</ph>.","source":"When the interface identified by `iid` is queried for, `COM_INTERFACE_ENTRY_AGGREGATE` forwards to `punk`."},{"content":"Parameters","pos":[9412,9422]},{"content":"[in] The GUID of the interface queried for.","pos":[9435,9478]},{"content":"[in] The name of an <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer.","pos":[9495,9536],"source":" [in] The name of an **IUnknown** pointer."},{"content":"Remarks","pos":[9546,9553]},{"content":"The <ph id=\"ph1\">`punk`</ph> parameter is assumed to point to the inner unknown of an aggregate or to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, in which case the entry is ignored.","pos":[9557,9686],"source":"The `punk` parameter is assumed to point to the inner unknown of an aggregate or to **NULL**, in which case the entry is ignored."},{"content":"Typically, you would <bpt id=\"p1\">**</bpt>CoCreate<ept id=\"p1\">**</ept> the aggregate in <ph id=\"ph1\">`FinalConstruct`</ph>.","pos":[9687,9755],"source":" Typically, you would **CoCreate** the aggregate in `FinalConstruct`."},{"pos":[9762,9901],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"content":"Example","pos":[9911,9918]},{"pos":[9933,9954],"content":"NVC_ATL_Windowing#112"},{"pos":[10062,10095],"content":"COM_INTERFACE_ENTRY_AUTOAGGREGATE"},{"pos":[10099,10266],"content":"Same as <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY_AGGREGATE<ept id=\"p1\">](#com_interface_entry_aggregate)</ept>, except if <ph id=\"ph1\">`punk`</ph> is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>, it automatically creates the aggregate described by the <ph id=\"ph2\">`clsid`</ph>.","source":"Same as [COM_INTERFACE_ENTRY_AGGREGATE](#com_interface_entry_aggregate), except if `punk` is **NULL**, it automatically creates the aggregate described by the `clsid`."},{"content":"Parameters","pos":[10342,10352]},{"content":"[in] The GUID of the interface queried for.","pos":[10365,10408]},{"content":"[in] The name of an <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer.","pos":[10425,10466],"source":" [in] The name of an **IUnknown** pointer."},{"content":"Must be a member of the class containing the COM map.","pos":[10467,10520]},{"content":"[in] The identifier of the aggregate that will be created if <ph id=\"ph1\">`punk`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[10538,10618],"source":" [in] The identifier of the aggregate that will be created if `punk` is **NULL**."},{"content":"Remarks","pos":[10628,10635]},{"pos":[10639,10778],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"content":"Example","pos":[10788,10795]},{"pos":[10810,10831],"content":"NVC_ATL_Windowing#114"},{"pos":[10935,10964],"content":"COM_INTERFACE_ENTRY_AGGREGATE"},{"pos":[10968,11074],"content":"When the interface identified by <ph id=\"ph1\">`iid`</ph> is queried for, <ph id=\"ph2\">`COM_INTERFACE_ENTRY_AGGREGATE`</ph> forwards to <ph id=\"ph3\">`punk`</ph>.","source":"When the interface identified by `iid` is queried for, `COM_INTERFACE_ENTRY_AGGREGATE` forwards to `punk`."},{"content":"Parameters","pos":[11138,11148]},{"content":"[in] The GUID of the interface queried for.","pos":[11161,11204]},{"content":"[in] The name of an <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer.","pos":[11221,11262],"source":" [in] The name of an **IUnknown** pointer."},{"content":"Remarks","pos":[11272,11279]},{"content":"The <ph id=\"ph1\">`punk`</ph> parameter is assumed to point to the inner unknown of an aggregate or to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, in which case the entry is ignored.","pos":[11283,11412],"source":"The `punk` parameter is assumed to point to the inner unknown of an aggregate or to **NULL**, in which case the entry is ignored."},{"content":"Typically, you would <bpt id=\"p1\">**</bpt>CoCreate<ept id=\"p1\">**</ept> the aggregate in <ph id=\"ph1\">`FinalConstruct`</ph>.","pos":[11413,11481],"source":" Typically, you would **CoCreate** the aggregate in `FinalConstruct`."},{"pos":[11488,11627],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"content":"Example","pos":[11637,11644]},{"pos":[11659,11680],"content":"NVC_ATL_Windowing#112"},{"pos":[11794,11833],"content":"COM_INTERFACE_ENTRY_AUTOAGGREGATE_BLIND"},{"pos":[11837,12083],"content":"Same as <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY_AUTOAGGREGATE<ept id=\"p1\">](#com_interface_entry_autoaggregate)</ept>, except that querying for any IID results in forwarding the query to <ph id=\"ph1\">`punk`</ph>, and if <ph id=\"ph2\">`punk`</ph> is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>, automatically creating the aggregate described by the <ph id=\"ph3\">`clsid`</ph>.","source":"Same as [COM_INTERFACE_ENTRY_AUTOAGGREGATE](#com_interface_entry_autoaggregate), except that querying for any IID results in forwarding the query to `punk`, and if `punk` is **NULL**, automatically creating the aggregate described by the `clsid`."},{"content":"Parameters","pos":[12159,12169]},{"content":"[in] The name of an <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer.","pos":[12183,12224],"source":" [in] The name of an **IUnknown** pointer."},{"content":"Must be a member of the class containing the COM map.","pos":[12225,12278]},{"content":"[in] The identifier of the aggregate that will be created if <ph id=\"ph1\">`punk`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[12296,12376],"source":" [in] The identifier of the aggregate that will be created if `punk` is **NULL**."},{"content":"Remarks","pos":[12386,12393]},{"content":"If the interface query fails, processing of the COM map continues.","pos":[12397,12463]},{"pos":[12470,12609],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"content":"Example","pos":[12619,12626]},{"pos":[12641,12662],"content":"NVC_ATL_Windowing#115"},{"pos":[12771,12804],"content":"COM_INTERFACE_ENTRY_AUTOAGGREGATE"},{"pos":[12808,12975],"content":"Same as <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY_AGGREGATE<ept id=\"p1\">](#com_interface_entry_aggregate)</ept>, except if <ph id=\"ph1\">`punk`</ph> is <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>, it automatically creates the aggregate described by the <ph id=\"ph2\">`clsid`</ph>.","source":"Same as [COM_INTERFACE_ENTRY_AGGREGATE](#com_interface_entry_aggregate), except if `punk` is **NULL**, it automatically creates the aggregate described by the `clsid`."},{"content":"Parameters","pos":[13051,13061]},{"content":"[in] The GUID of the interface queried for.","pos":[13074,13117]},{"content":"[in] The name of an <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer.","pos":[13134,13175],"source":" [in] The name of an **IUnknown** pointer."},{"content":"Must be a member of the class containing the COM map.","pos":[13176,13229]},{"content":"[in] The identifier of the aggregate that will be created if <ph id=\"ph1\">`punk`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[13247,13327],"source":" [in] The identifier of the aggregate that will be created if `punk` is **NULL**."},{"content":"Remarks","pos":[13337,13344]},{"pos":[13348,13487],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"content":"Example","pos":[13497,13504]},{"pos":[13519,13540],"content":"NVC_ATL_Windowing#114"},{"pos":[13640,13665],"content":"COM_INTERFACE_ENTRY_BREAK"},{"pos":[13669,13814],"content":"Causes your program to call <bpt id=\"p1\">[</bpt>DebugBreak<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679297)</ept> when the specified interface is queried for.","source":"Causes your program to call [DebugBreak](http://msdn.microsoft.com/library/windows/desktop/ms679297) when the specified interface is queried for."},{"content":"Parameters","pos":[13866,13876]},{"content":"x","pos":[13881,13882]},{"content":"[in] Text used to construct the interface identifier.","pos":[13887,13940]},{"content":"Remarks","pos":[13950,13957]},{"content":"The interface IID will be constructed by appending <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> to <ph id=\"ph1\">`IID_`</ph>.","pos":[13961,14026],"source":"The interface IID will be constructed by appending *x* to `IID_`."},{"content":"For example, if <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`IPersistStorage`</ph>, the IID will be <ph id=\"ph2\">`IID_IPersistStorage`</ph>.","pos":[14027,14107],"source":" For example, if *x* is `IPersistStorage`, the IID will be `IID_IPersistStorage`."},{"pos":[14114,14253],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"pos":[14315,14350],"content":"COM_INTERFACE_ENTRY_CACHED_TEAR_OFF"},{"content":"Saves the interface-specific data for every instance.","pos":[14354,14407]},{"content":"Parameters","pos":[14481,14491]},{"content":"[in] The GUID of the tear-off interface.","pos":[14504,14544]},{"content":"x","pos":[14552,14553]},{"content":"[in] The name of the class implementing the interface.","pos":[14558,14612]},{"content":"[in] The name of an <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> pointer.","pos":[14629,14670],"source":" [in] The name of an **IUnknown** pointer."},{"content":"Must be a member of the class containing the COM map.","pos":[14671,14724]},{"content":"Should be initialized to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> in the class object's constructor.","pos":[14725,14793],"source":" Should be initialized to **NULL** in the class object's constructor."},{"content":"Remarks","pos":[14803,14810]},{"content":"If the interface is not used, this lowers the overall instance size of your object.","pos":[14814,14897]},{"pos":[14904,15043],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"content":"Example","pos":[15053,15060]},{"pos":[15075,15089],"content":"NVC_ATL_COM#54"},{"pos":[15192,15220],"content":"COM_INTERFACE_ENTRY_TEAR_OFF"},{"content":"Exposes your tear-off interfaces.","pos":[15224,15257]},{"content":"Parameters","pos":[15317,15327]},{"content":"[in] The GUID of the tear-off interface.","pos":[15340,15380]},{"content":"x","pos":[15388,15389]},{"content":"[in] The name of the class implementing the interface.","pos":[15394,15448]},{"content":"Remarks","pos":[15458,15465]},{"content":"A tear-off interface is implemented as a separate object that is instantiated every time the interface it represents is queried for.","pos":[15469,15601]},{"content":"Typically, you build your interface as a tear-off if the interface is rarely used, since this saves a vtable pointer in every instance of your main object.","pos":[15602,15757]},{"content":"The tear-off is deleted when its reference count becomes zero.","pos":[15758,15820]},{"content":"The class implementing the tear-off should be derived from <ph id=\"ph1\">`CComTearOffObjectBase`</ph> and have its own COM map.","pos":[15821,15929],"source":" The class implementing the tear-off should be derived from `CComTearOffObjectBase` and have its own COM map."},{"pos":[15936,16075],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"content":"Example","pos":[16085,16092]},{"pos":[16107,16120],"content":"NVC_ATL_COM#1"},{"pos":[16220,16245],"content":"COM_INTERFACE_ENTRY_CHAIN"},{"content":"Processes the COM map of the base class when the processing reaches this entry in the COM map.","pos":[16249,16343]},{"content":"Parameters","pos":[16403,16413]},{"content":"classname","pos":[16418,16427]},{"content":"[in] A base class of the current object.","pos":[16432,16472]},{"content":"Remarks","pos":[16482,16489]},{"content":"For example, in the following code:","pos":[16493,16528]},{"pos":[16546,16567],"content":"NVC_ATL_Windowing#116"},{"content":"Note that the first entry in the COM map must be an interface on the object containing the COM map.","pos":[16622,16721]},{"content":"Thus, you cannot start your COM map entries with <ph id=\"ph1\">`COM_INTERFACE_ENTRY_CHAIN`</ph>, which causes the COM map of a different object to be searched at the point where <bpt id=\"p1\">**</bpt>COM_INTERFACE_ENTRY_CHAIN(<ept id=\"p1\">**</ept><ph id=\"ph2\">`COtherObject`</ph><bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> appears in your object's COM map.","pos":[16722,16964],"source":" Thus, you cannot start your COM map entries with `COM_INTERFACE_ENTRY_CHAIN`, which causes the COM map of a different object to be searched at the point where **COM_INTERFACE_ENTRY_CHAIN(**`COtherObject`**)** appears in your object's COM map."},{"content":"If you want to search the COM map of another object first, add an interface entry for <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> to your COM map, then chain the other object's COM map.","pos":[16965,17119],"source":" If you want to search the COM map of another object first, add an interface entry for **IUnknown** to your COM map, then chain the other object's COM map."},{"content":"For example:","pos":[17120,17132]},{"pos":[17150,17171],"content":"NVC_ATL_Windowing#111"},{"pos":[17227,17366],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"pos":[17418,17442],"content":"COM_INTERFACE_ENTRY_FUNC"},{"pos":[17446,17512],"content":"A general mechanism for hooking into ATL's <ph id=\"ph1\">`QueryInterface`</ph> logic.","source":"A general mechanism for hooking into ATL's `QueryInterface` logic."},{"content":"Parameters","pos":[17576,17586]},{"content":"[in] The GUID of the interface exposed.","pos":[17599,17638]},{"content":"[in] A parameter passed through to the <ph id=\"ph1\">`func`</ph>.","pos":[17653,17699],"source":" [in] A parameter passed through to the `func`."},{"content":"[in] The function pointer that will return <ph id=\"ph1\">`iid`</ph>.","pos":[17716,17765],"source":" [in] The function pointer that will return `iid`."},{"content":"Remarks","pos":[17775,17782]},{"content":"If <bpt id=\"p1\">*</bpt>iid<ept id=\"p1\">*</ept> matches the IID of the interface queried for, then the function specified by <ph id=\"ph1\">`func`</ph> is called.","pos":[17786,17889],"source":"If *iid* matches the IID of the interface queried for, then the function specified by `func` is called."},{"content":"The declaration for the function should be:","pos":[17890,17933]},{"content":"When your function is called, <ph id=\"ph1\">`pv`</ph> points to your class object.","pos":[18019,18082],"source":"When your function is called, `pv` points to your class object."},{"content":"The <ph id=\"ph1\">`riid`</ph> parameter refers to the interface being queried for, <ph id=\"ph2\">`ppv`</ph> is the pointer to the location where the function should store the pointer to the interface, and <ph id=\"ph3\">`dw`</ph> is the parameter you specified in the entry.","pos":[18083,18299],"source":" The `riid` parameter refers to the interface being queried for, `ppv` is the pointer to the location where the function should store the pointer to the interface, and `dw` is the parameter you specified in the entry."},{"content":"The function should set <ph id=\"ph1\">\\*</ph> <ph id=\"ph2\">`ppv`</ph> to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> and return <bpt id=\"p2\">**</bpt>E_NOINTERFACE<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>S_FALSE<ept id=\"p3\">**</ept> if it chooses not to return an interface.","pos":[18300,18430],"source":" The function should set \\* `ppv` to **NULL** and return **E_NOINTERFACE** or **S_FALSE** if it chooses not to return an interface."},{"content":"With <bpt id=\"p1\">**</bpt>E_NOINTERFACE<ept id=\"p1\">**</ept>, COM map processing terminates.","pos":[18431,18485],"source":" With **E_NOINTERFACE**, COM map processing terminates."},{"content":"With <bpt id=\"p1\">**</bpt>S_FALSE<ept id=\"p1\">**</ept>, COM map processing continues, even though no interface pointer was returned.","pos":[18486,18580],"source":" With **S_FALSE**, COM map processing continues, even though no interface pointer was returned."},{"content":"If the function returns an interface pointer, it should return <ph id=\"ph1\">`S_OK`</ph>.","pos":[18581,18651],"source":" If the function returns an interface pointer, it should return `S_OK`."},{"pos":[18658,18797],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"pos":[18854,18884],"content":"COM_INTERFACE_ENTRY_FUNC_BLIND"},{"pos":[18888,19012],"content":"Same as <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY_FUNC<ept id=\"p1\">](#com_interface_entry_func)</ept>, except that querying for any IID results in a call to <ph id=\"ph1\">`func`</ph>.","source":"Same as [COM_INTERFACE_ENTRY_FUNC](#com_interface_entry_func), except that querying for any IID results in a call to `func`."},{"content":"Parameters","pos":[19076,19086]},{"content":"[in] A parameter passed through to the <ph id=\"ph1\">`func`</ph>.","pos":[19098,19144],"source":" [in] A parameter passed through to the `func`."},{"content":"[in] The function that gets called when this entry in the COM map is processed.","pos":[19161,19240]},{"content":"Remarks","pos":[19250,19257]},{"content":"Any failure will cause processing to continue on the COM map.","pos":[19261,19322]},{"content":"If the function returns an interface pointer, it should return <ph id=\"ph1\">`S_OK`</ph>.","pos":[19323,19393],"source":" If the function returns an interface pointer, it should return `S_OK`."},{"pos":[19400,19539],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"pos":[19590,19614],"content":"COM_INTERFACE_ENTRY_FUNC"},{"pos":[19618,19684],"content":"A general mechanism for hooking into ATL's <ph id=\"ph1\">`QueryInterface`</ph> logic.","source":"A general mechanism for hooking into ATL's `QueryInterface` logic."},{"content":"Parameters","pos":[19748,19758]},{"content":"[in] The GUID of the interface exposed.","pos":[19771,19810]},{"content":"[in] A parameter passed through to the <ph id=\"ph1\">`func`</ph>.","pos":[19825,19871],"source":" [in] A parameter passed through to the `func`."},{"content":"[in] The function pointer that will return <ph id=\"ph1\">`iid`</ph>.","pos":[19888,19937],"source":" [in] The function pointer that will return `iid`."},{"content":"Remarks","pos":[19947,19954]},{"content":"If <bpt id=\"p1\">*</bpt>iid<ept id=\"p1\">*</ept> matches the IID of the interface queried for, then the function specified by <ph id=\"ph1\">`func`</ph> is called.","pos":[19958,20061],"source":"If *iid* matches the IID of the interface queried for, then the function specified by `func` is called."},{"content":"The declaration for the function should be:","pos":[20062,20105]},{"content":"When your function is called, <ph id=\"ph1\">`pv`</ph> points to your class object.","pos":[20191,20254],"source":"When your function is called, `pv` points to your class object."},{"content":"The <ph id=\"ph1\">`riid`</ph> parameter refers to the interface being queried for, <ph id=\"ph2\">`ppv`</ph> is the pointer to the location where the function should store the pointer to the interface, and <ph id=\"ph3\">`dw`</ph> is the parameter you specified in the entry.","pos":[20255,20471],"source":" The `riid` parameter refers to the interface being queried for, `ppv` is the pointer to the location where the function should store the pointer to the interface, and `dw` is the parameter you specified in the entry."},{"content":"The function should set <ph id=\"ph1\">\\*</ph> <ph id=\"ph2\">`ppv`</ph> to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> and return <bpt id=\"p2\">**</bpt>E_NOINTERFACE<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>S_FALSE<ept id=\"p3\">**</ept> if it chooses not to return an interface.","pos":[20472,20602],"source":" The function should set \\* `ppv` to **NULL** and return **E_NOINTERFACE** or **S_FALSE** if it chooses not to return an interface."},{"content":"With <bpt id=\"p1\">**</bpt>E_NOINTERFACE<ept id=\"p1\">**</ept>, COM map processing terminates.","pos":[20603,20657],"source":" With **E_NOINTERFACE**, COM map processing terminates."},{"content":"With <bpt id=\"p1\">**</bpt>S_FALSE<ept id=\"p1\">**</ept>, COM map processing continues, even though no interface pointer was returned.","pos":[20658,20752],"source":" With **S_FALSE**, COM map processing continues, even though no interface pointer was returned."},{"content":"If the function returns an interface pointer, it should return <ph id=\"ph1\">`S_OK`</ph>.","pos":[20753,20823],"source":" If the function returns an interface pointer, it should return `S_OK`."},{"pos":[20830,20969],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"pos":[21027,21058],"content":"COM_INTERFACE_ENTRY_NOINTERFACE"},{"pos":[21062,21166],"content":"Returns <bpt id=\"p1\">**</bpt>E_NOINTERFACE<ept id=\"p1\">**</ept> and terminates COM map processing when the specified interface is queried for.","source":"Returns **E_NOINTERFACE** and terminates COM map processing when the specified interface is queried for."},{"content":"Parameters","pos":[21224,21234]},{"content":"x","pos":[21239,21240]},{"content":"[in] Text used to construct the interface identifier.","pos":[21245,21298]},{"content":"Remarks","pos":[21308,21315]},{"content":"You can use this macro to prevent an interface from being used in a particular case.","pos":[21319,21403]},{"content":"For example, you can insert this macro into your COM map right before <ph id=\"ph1\">`COM_INTERFACE_ENTRY_AGGREGATE_BLIND`</ph> to prevent a query for the interface from being forwarded to the aggregate's inner unknown.","pos":[21404,21603],"source":" For example, you can insert this macro into your COM map right before `COM_INTERFACE_ENTRY_AGGREGATE_BLIND` to prevent a query for the interface from being forwarded to the aggregate's inner unknown."},{"content":"The interface IID will be constructed by appending <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> to <ph id=\"ph1\">`IID_`</ph>.","pos":[21610,21675],"source":"The interface IID will be constructed by appending *x* to `IID_`."},{"content":"For example, if <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`IPersistStorage`</ph>, the IID will be <ph id=\"ph2\">`IID_IPersistStorage`</ph>.","pos":[21676,21756],"source":" For example, if *x* is `IPersistStorage`, the IID will be `IID_IPersistStorage`."},{"pos":[21763,21902],"content":"See <bpt id=\"p1\">[</bpt>COM_INTERFACE_ENTRY Macros<ept id=\"p1\">](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)</ept> for remarks about COM map entries.","source":"See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries."},{"pos":[21940,21951],"content":"END_COM_MAP"},{"content":"Ends the definition of your COM interface map.","pos":[21955,22001]},{"content":"See Also","pos":[22037,22045]},{"content":"Macros","pos":[22050,22056]},{"content":"COM Map Global Functions","pos":[22098,22122]}],"content":"---\ntitle: \"COM Map Macros | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"COM interfaces, COM map macros\"\nms.assetid: 0f33656d-321f-4996-90cc-9a7f21ab73c3\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# COM Map Macros\nThese macros define COM interface maps.  \n  \n|||  \n|-|-|  \n|[BEGIN_COM_MAP](#begin_com_map)|Marks the beginning of the COM interface map entries.|  \n|[COM_INTERFACE_ENTRY](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00)|Enters interfaces into the COM interface map.|  \n|[COM_INTERFACE_ENTRY2](#com_interface_entry2)|Use this macro to disambiguate two branches of inheritance.|  \n|[COM_INTERFACE_ENTRY_IID](#com_interface_entry_iid)|Use this macro to enter the interface into the COM map and specify its IID.|  \n|[COM_INTERFACE_ENTRY2_IID](#com_interface_entry2_iid)|Same as [COM_INTERFACE_ENTRY2](#com_interface_entry2), except you can specify a different IID.|  \n|[COM_INTERFACE_ENTRY_AGGREGATE](#com_interface_entry_aggregate)|When the interface identified by `iid` is queried for, `COM_INTERFACE_ENTRY_AGGREGATE` forwards to `punk`.|  \n|[COM_INTERFACE_ENTRY_AGGREGATE_BLIND](#com_interface_entry_aggregate_blind)|Same as [COM_INTERFACE_ENTRY_AGGREGATE](#com_interface_entry_aggregate), except that querying for any IID results in forwarding the query to `punk`.|  \n|[COM_INTERFACE_ENTRY_AUTOAGGREGATE](#com_interface_entry_autoaggregate)|Same as [COM_INTERFACE_ENTRY_AGGREGATE](#com_interface_entry_aggregate), except if `punk` is **NULL**, it automatically creates the aggregate described by the `clsid`.|  \n|[COM_INTERFACE_ENTRY_AUTOAGGREGATE_BLIND](#com_interface_entry_autoaggregate_blind)|Same as [COM_INTERFACE_ENTRY_AUTOAGGREGATE](#com_interface_entry_autoaggregate), except that querying for any IID results in forwarding the query to `punk`, and if `punk` is **NULL**, automatically creating the aggregate described by the `clsid`.|  \n|[COM_INTERFACE_ENTRY_BREAK](#com_interface_entry_break)|Causes your program to call [DebugBreak](http://msdn.microsoft.com/library/windows/desktop/ms679297) when the specified interface is queried for.|  \n|[COM_INTERFACE_ENTRY_CACHED_TEAR_OFF](#com_interface_entry_cached_tear_off)|Saves the interface-specific data for every instance.|  \n|[COM_INTERFACE_ENTRY_TEAR_OFF](#com_interface_entry_tear_off)|Exposes your tear-off interfaces.|  \n|[COM_INTERFACE_ENTRY_CHAIN](#com_interface_entry_chain)|Processes the COM map of the base class when the processing reaches this entry in the COM map.|  \n|[COM_INTERFACE_ENTRY_FUNC](#com_interface_entry_func)|A general mechanism for hooking into ATL's `QueryInterface` logic.|  \n|[COM_INTERFACE_ENTRY_FUNC_BLIND](#com_interface_entry_func_blind)|Same as [COM_INTERFACE_ENTRY_FUNC](#com_interface_entry_func), except that querying for any IID results in a call to `func`.|  \n|[COM_INTERFACE_ENTRY_NOINTERFACE](#com_interface_entry_nointerface)|Returns **E_NOINTERFACE** and terminates COM map processing when the specified interface is queried for.|  \n|[END_COM_MAP](#end_com_map)|Marks the end of the COM interface map entries.|  \n  \n##  <a name=\"begin_com_map\"></a>  BEGIN_COM_MAP  \n The COM map is the mechanism that exposes interfaces on an object to a client through `QueryInterface`.  \n  \n```\nBEGIN_COM_MAP(x)\n```  \n  \n### Parameters  \n *x*  \n [in] The name of the class object you are exposing interfaces on.  \n  \n### Remarks  \n [CComObjectRootEx::InternalQueryInterface](ccomobjectrootex-class.md#ccomobjectrootex__internalqueryinterface) only returns pointers for interfaces in the COM map. Start your interface map with the `BEGIN_COM_MAP` macro, add entries for each of your interfaces with the [COM_INTERFACE_ENTRY](http://msdn.microsoft.com/library/c5363b8b-a1a2-471e-ad3a-d472f6c356c5) macro or one of its variants, and complete the map with the [END_COM_MAP](#end_com_map) macro.  \n\n  \n### Example  \n From the ATL [BEEPER](../../visual-cpp-samples.md) sample:  \n  \n [!code-cpp[NVC_ATL_COM#1](../../atl/codesnippet/cpp/com-map-macros_1.h)]  \n  \n##  <a name=\"com_interface_entry_macros\"></a>  COM_INTERFACE_ENTRY Macros  \n These macros enter an object's interfaces into its COM map so that they can be accessed by `QueryInterface`. The order of entries in the COM map is the order interfaces will be checked for a matching **IID** during `QueryInterface`.  \n  \n##  <a name=\"com_interface_entry2_x2\"></a>  COM_INTERFACE_ENTRY2  \n Use this macro to disambiguate two branches of inheritance.  \n  \n```\nCOM_INTERFACE_ENTRY2(x, x2)\n```  \n  \n### Parameters  \n *x*  \n [in] The name of an interface you want to expose from your object.  \n  \n `x2`  \n [in] The name of the inheritance branch from which *x* is exposed.  \n  \n### Remarks  \n For example, if you derive your class object from two dual interfaces, you expose `IDispatch` using `COM_INTERFACE_ENTRY2` since `IDispatch` can be obtained from either one of the interfaces.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#118](../../atl/codesnippet/cpp/com-map-macros_2.h)]  \n  \n##  <a name=\"com_interface_entry_iid\"></a>  COM_INTERFACE_ENTRY_IID  \n Use this macro to enter the interface into the COM map and specify its IID.  \n  \n```\nCOM_INTERFACE_ENTRY_IID(iid, x)\n```  \n  \n### Parameters  \n `iid`  \n [in] The GUID of the interface exposed.  \n  \n *x*  \n [in] The name of the class whose vtable will be exposed as the interface identified by `iid`.  \n  \n### Remarks  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#117](../../atl/codesnippet/cpp/com-map-macros_3.h)]  \n  \n##  <a name=\"com_interface_entry2_iid\"></a>  COM_INTERFACE_ENTRY2_IID  \n Same as [COM_INTERFACE_ENTRY2](#com_interface_entry2), except you can specify a different IID.  \n  \n```\nCOM_INTERFACE_ENTRY2_IID(iid, x, x2)\n```   \n  \n### Parameters  \n `iid`  \n [in] The GUID you are specifying for the interface.  \n  \n *x*  \n [in] The name of an interface that your class object derives from directly.  \n  \n `x2`  \n [in] The name of a second interface that your class object derives from directly.  \n  \n### Remarks  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n##  <a name=\"com_interface_entry2\"></a>  COM_INTERFACE_ENTRY2  \n Use this macro to disambiguate two branches of inheritance.  \n  \n```\nCOM_INTERFACE_ENTRY2(x, x2)\n```  \n  \n### Parameters  \n *x*  \n [in] The name of an interface you want to expose from your object.  \n  \n `x2`  \n [in] The name of the inheritance branch from which *x* is exposed.  \n  \n### Remarks  \n For example, if you derive your class object from two dual interfaces, you expose `IDispatch` using `COM_INTERFACE_ENTRY2` since `IDispatch` can be obtained from either one of the interfaces.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#118](../../atl/codesnippet/cpp/com-map-macros_2.h)]  \n  \n##  <a name=\"com_interface_entry_aggregate2\"></a>  COM_INTERFACE_ENTRY_AGGREGATE  \n When the interface identified by `iid` is queried for, `COM_INTERFACE_ENTRY_AGGREGATE` forwards to `punk`.  \n  \n```\nCOM_INTERFACE_ENTRY_AGGREGATE(iid, punk)\n```  \n  \n### Parameters  \n `iid`  \n [in] The GUID of the interface queried for.  \n  \n `punk`  \n [in] The name of an **IUnknown** pointer.  \n  \n### Remarks  \n The `punk` parameter is assumed to point to the inner unknown of an aggregate or to **NULL**, in which case the entry is ignored. Typically, you would **CoCreate** the aggregate in `FinalConstruct`.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#112](../../atl/codesnippet/cpp/com-map-macros_4.h)]  \n  \n##  <a name=\"com_interface_entry_aggregate_blind\"></a>  COM_INTERFACE_ENTRY_AGGREGATE_BLIND  \n Same as [COM_INTERFACE_ENTRY_AGGREGATE](#com_interface_entry_aggregate), except that querying for any IID results in forwarding the query to `punk`.  \n  \n```\nCOM_INTERFACE_ENTRY_AGGREGATE_BLIND(punk)\n```  \n  \n### Parameters  \n `punk`  \n [in] The name of an **IUnknown** pointer.  \n  \n### Remarks  \n If the interface query fails, processing of the COM map continues.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#113](../../atl/codesnippet/cpp/com-map-macros_5.h)]  \n  \n##  <a name=\"com_interface_entry_aggregate3\"></a>  COM_INTERFACE_ENTRY_AGGREGATE  \n When the interface identified by `iid` is queried for, `COM_INTERFACE_ENTRY_AGGREGATE` forwards to `punk`.  \n  \n```\nCOM_INTERFACE_ENTRY_AGGREGATE(iid,  punk)\n```  \n  \n### Parameters  \n `iid`  \n [in] The GUID of the interface queried for.  \n  \n `punk`  \n [in] The name of an **IUnknown** pointer.  \n  \n### Remarks  \n The `punk` parameter is assumed to point to the inner unknown of an aggregate or to **NULL**, in which case the entry is ignored. Typically, you would **CoCreate** the aggregate in `FinalConstruct`.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#112](../../atl/codesnippet/cpp/com-map-macros_4.h)]  \n  \n##  <a name=\"com_interface_entry_autoaggregate\"></a>  COM_INTERFACE_ENTRY_AUTOAGGREGATE  \n Same as [COM_INTERFACE_ENTRY_AGGREGATE](#com_interface_entry_aggregate), except if `punk` is **NULL**, it automatically creates the aggregate described by the `clsid`.  \n  \n```\nCOM_INTERFACE_ENTRY_AUTOAGGREGATE(iid, punk, clsid)\n```   \n  \n### Parameters  \n `iid`  \n [in] The GUID of the interface queried for.  \n  \n `punk`  \n [in] The name of an **IUnknown** pointer. Must be a member of the class containing the COM map.  \n  \n `clsid`  \n [in] The identifier of the aggregate that will be created if `punk` is **NULL**.  \n  \n### Remarks  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#114](../../atl/codesnippet/cpp/com-map-macros_6.h)]  \n  \n##  <a name=\"com_interface_entry_aggregate\"></a>  COM_INTERFACE_ENTRY_AGGREGATE  \n When the interface identified by `iid` is queried for, `COM_INTERFACE_ENTRY_AGGREGATE` forwards to `punk`.  \n  \n```\nCOM_INTERFACE_ENTRY_AGGREGATE(iid, punk)\n```  \n  \n### Parameters  \n `iid`  \n [in] The GUID of the interface queried for.  \n  \n `punk`  \n [in] The name of an **IUnknown** pointer.  \n  \n### Remarks  \n The `punk` parameter is assumed to point to the inner unknown of an aggregate or to **NULL**, in which case the entry is ignored. Typically, you would **CoCreate** the aggregate in `FinalConstruct`.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#112](../../atl/codesnippet/cpp/com-map-macros_4.h)]  \n  \n##  <a name=\"com_interface_entry_autoaggregate_blind\"></a>  COM_INTERFACE_ENTRY_AUTOAGGREGATE_BLIND  \n Same as [COM_INTERFACE_ENTRY_AUTOAGGREGATE](#com_interface_entry_autoaggregate), except that querying for any IID results in forwarding the query to `punk`, and if `punk` is **NULL**, automatically creating the aggregate described by the `clsid`.  \n  \n```\nCOM_INTERFACE_ENTRY_AUTOAGGREGATE_BLIND(punk, clsid)\n```  \n  \n### Parameters  \n `punk`  \n [in] The name of an **IUnknown** pointer. Must be a member of the class containing the COM map.  \n  \n `clsid`  \n [in] The identifier of the aggregate that will be created if `punk` is **NULL**.  \n  \n### Remarks  \n If the interface query fails, processing of the COM map continues.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#115](../../atl/codesnippet/cpp/com-map-macros_7.h)]  \n  \n##  <a name=\"com_interface_entry_autoaggregate2\"></a>  COM_INTERFACE_ENTRY_AUTOAGGREGATE  \n Same as [COM_INTERFACE_ENTRY_AGGREGATE](#com_interface_entry_aggregate), except if `punk` is **NULL**, it automatically creates the aggregate described by the `clsid`.  \n  \n```\nCOM_INTERFACE_ENTRY_AUTOAGGREGATE(iid, punk, clsid)\n```   \n  \n### Parameters  \n `iid`  \n [in] The GUID of the interface queried for.  \n  \n `punk`  \n [in] The name of an **IUnknown** pointer. Must be a member of the class containing the COM map.  \n  \n `clsid`  \n [in] The identifier of the aggregate that will be created if `punk` is **NULL**.  \n  \n### Remarks  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n### Example  \n [!code-cpp[NVC_ATL_Windowing#114](../../atl/codesnippet/cpp/com-map-macros_6.h)]  \n  \n##  <a name=\"com_interface_entry_break\"></a>  COM_INTERFACE_ENTRY_BREAK  \n Causes your program to call [DebugBreak](http://msdn.microsoft.com/library/windows/desktop/ms679297) when the specified interface is queried for.  \n  \n```\nCOM_INTERFACE_ENTRY_BREAK(x)\n```  \n  \n### Parameters  \n *x*  \n [in] Text used to construct the interface identifier.  \n  \n### Remarks  \n The interface IID will be constructed by appending *x* to `IID_`. For example, if *x* is `IPersistStorage`, the IID will be `IID_IPersistStorage`.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n##  <a name=\"com_interface_entry_cached_tear_off\"></a>  COM_INTERFACE_ENTRY_CACHED_TEAR_OFF  \n Saves the interface-specific data for every instance.  \n  \n```\nCOM_INTERFACE_ENTRY_CACHED_TEAR_OFF(iid, x, punk)\n```   \n  \n### Parameters  \n `iid`  \n [in] The GUID of the tear-off interface.  \n  \n *x*  \n [in] The name of the class implementing the interface.  \n  \n `punk`  \n [in] The name of an **IUnknown** pointer. Must be a member of the class containing the COM map. Should be initialized to **NULL** in the class object's constructor.  \n  \n### Remarks  \n If the interface is not used, this lowers the overall instance size of your object.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#54](../../atl/codesnippet/cpp/com-map-macros_8.h)]  \n  \n##  <a name=\"com_interface_entry_tear_off\"></a>  COM_INTERFACE_ENTRY_TEAR_OFF  \n Exposes your tear-off interfaces.  \n  \n```\nCOM_INTERFACE_ENTRY_TEAR_OFF(iid, x)\n```  \n  \n### Parameters  \n `iid`  \n [in] The GUID of the tear-off interface.  \n  \n *x*  \n [in] The name of the class implementing the interface.  \n  \n### Remarks  \n A tear-off interface is implemented as a separate object that is instantiated every time the interface it represents is queried for. Typically, you build your interface as a tear-off if the interface is rarely used, since this saves a vtable pointer in every instance of your main object. The tear-off is deleted when its reference count becomes zero. The class implementing the tear-off should be derived from `CComTearOffObjectBase` and have its own COM map.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n### Example  \n [!code-cpp[NVC_ATL_COM#1](../../atl/codesnippet/cpp/com-map-macros_1.h)]  \n  \n##  <a name=\"com_interface_entry_chain\"></a>  COM_INTERFACE_ENTRY_CHAIN  \n Processes the COM map of the base class when the processing reaches this entry in the COM map.  \n  \n```\nCOM_INTERFACE_ENTRY_CHAIN(classname)\n```  \n  \n### Parameters  \n *classname*  \n [in] A base class of the current object.  \n  \n### Remarks  \n For example, in the following code:  \n  \n [!code-cpp[NVC_ATL_Windowing#116](../../atl/codesnippet/cpp/com-map-macros_9.h)]  \n  \n Note that the first entry in the COM map must be an interface on the object containing the COM map. Thus, you cannot start your COM map entries with `COM_INTERFACE_ENTRY_CHAIN`, which causes the COM map of a different object to be searched at the point where **COM_INTERFACE_ENTRY_CHAIN(**`COtherObject`**)** appears in your object's COM map. If you want to search the COM map of another object first, add an interface entry for **IUnknown** to your COM map, then chain the other object's COM map. For example:  \n  \n [!code-cpp[NVC_ATL_Windowing#111](../../atl/codesnippet/cpp/com-map-macros_10.h)]  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n##  <a name=\"com_interface_entry_func2\"></a>  COM_INTERFACE_ENTRY_FUNC  \n A general mechanism for hooking into ATL's `QueryInterface` logic.  \n  \n```\nCOM_INTERFACE_ENTRY_FUNC(iid, dw, func)\n```   \n  \n### Parameters  \n `iid`  \n [in] The GUID of the interface exposed.  \n  \n `dw`  \n [in] A parameter passed through to the `func`.  \n  \n `func`  \n [in] The function pointer that will return `iid`.  \n  \n### Remarks  \n If *iid* matches the IID of the interface queried for, then the function specified by `func` is called. The declaration for the function should be:  \n  \n `HRESULT WINAPI func(void* pv, REFIID riid, LPVOID* ppv, DWORD_PTR dw);`  \n  \n When your function is called, `pv` points to your class object. The `riid` parameter refers to the interface being queried for, `ppv` is the pointer to the location where the function should store the pointer to the interface, and `dw` is the parameter you specified in the entry. The function should set \\* `ppv` to **NULL** and return **E_NOINTERFACE** or **S_FALSE** if it chooses not to return an interface. With **E_NOINTERFACE**, COM map processing terminates. With **S_FALSE**, COM map processing continues, even though no interface pointer was returned. If the function returns an interface pointer, it should return `S_OK`.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n##  <a name=\"com_interface_entry_func_blind\"></a>  COM_INTERFACE_ENTRY_FUNC_BLIND  \n Same as [COM_INTERFACE_ENTRY_FUNC](#com_interface_entry_func), except that querying for any IID results in a call to `func`.  \n  \n```\nCOM_INTERFACE_ENTRY_FUNC_BLIND(dw, func)\n```  \n  \n### Parameters  \n `dw`  \n [in] A parameter passed through to the `func`.  \n  \n `func`  \n [in] The function that gets called when this entry in the COM map is processed.  \n  \n### Remarks  \n Any failure will cause processing to continue on the COM map. If the function returns an interface pointer, it should return `S_OK`.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n##  <a name=\"com_interface_entry_func\"></a>  COM_INTERFACE_ENTRY_FUNC  \n A general mechanism for hooking into ATL's `QueryInterface` logic.  \n  \n```\nCOM_INTERFACE_ENTRY_FUNC(iid, dw, func)\n```   \n  \n### Parameters  \n `iid`  \n [in] The GUID of the interface exposed.  \n  \n `dw`  \n [in] A parameter passed through to the `func`.  \n  \n `func`  \n [in] The function pointer that will return `iid`.  \n  \n### Remarks  \n If *iid* matches the IID of the interface queried for, then the function specified by `func` is called. The declaration for the function should be:  \n  \n `HRESULT WINAPI func(void* pv, REFIID riid, LPVOID* ppv, DWORD_PTR dw);`  \n  \n When your function is called, `pv` points to your class object. The `riid` parameter refers to the interface being queried for, `ppv` is the pointer to the location where the function should store the pointer to the interface, and `dw` is the parameter you specified in the entry. The function should set \\* `ppv` to **NULL** and return **E_NOINTERFACE** or **S_FALSE** if it chooses not to return an interface. With **E_NOINTERFACE**, COM map processing terminates. With **S_FALSE**, COM map processing continues, even though no interface pointer was returned. If the function returns an interface pointer, it should return `S_OK`.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n##  <a name=\"com_interface_entry_nointerface\"></a>  COM_INTERFACE_ENTRY_NOINTERFACE  \n Returns **E_NOINTERFACE** and terminates COM map processing when the specified interface is queried for.  \n  \n```\nCOM_INTERFACE_ENTRY_NOINTERFACE(x)\n```  \n  \n### Parameters  \n *x*  \n [in] Text used to construct the interface identifier.  \n  \n### Remarks  \n You can use this macro to prevent an interface from being used in a particular case. For example, you can insert this macro into your COM map right before `COM_INTERFACE_ENTRY_AGGREGATE_BLIND` to prevent a query for the interface from being forwarded to the aggregate's inner unknown.  \n  \n The interface IID will be constructed by appending *x* to `IID_`. For example, if *x* is `IPersistStorage`, the IID will be `IID_IPersistStorage`.  \n  \n See [COM_INTERFACE_ENTRY Macros](http://msdn.microsoft.com/library/19dcb768-2e1f-4b8d-a618-453a01a4bd00) for remarks about COM map entries.  \n  \n##  <a name=\"end_com_map\"></a>  END_COM_MAP  \n Ends the definition of your COM interface map.  \n  \n```\nEND_COM_MAP()\n```  \n  \n## See Also  \n [Macros](../../atl/reference/atl-macros.md)   \n [COM Map Global Functions](../../atl/reference/com-map-global-functions.md)\n"}