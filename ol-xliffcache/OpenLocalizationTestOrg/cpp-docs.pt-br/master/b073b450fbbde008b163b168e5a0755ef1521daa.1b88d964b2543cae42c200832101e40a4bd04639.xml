{"nodes":[{"pos":[12,57],"content":"operator!= (queue) (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"operator!= (queue) (STL-CLR) | Microsoft Docs","pos":[0,45]}]},{"content":"operator!= (queue) (STL/CLR)","pos":[642,670]},{"content":"Queue not equal comparison.","pos":[671,698]},{"content":"Syntax","pos":[707,713]},{"content":"Parameters","pos":[888,898]},{"content":"left","pos":[902,906]},{"content":"Left container to compare.","pos":[910,936]},{"content":"right","pos":[943,948]},{"content":"Right container to compare.","pos":[952,979]},{"content":"Remarks","pos":[988,995]},{"content":"The operator function returns <ph id=\"ph1\">`!(``left`</ph> <ph id=\"ph2\">`==`</ph> <ph id=\"ph3\">`right``)`</ph>.","pos":[999,1056],"source":"The operator function returns `!(``left` `==` `right``)`."},{"content":"You use it to test whether <ph id=\"ph1\">`left`</ph> is not ordered the same as <ph id=\"ph2\">`right`</ph> when the two queues are compared element by element.","pos":[1057,1178],"source":" You use it to test whether `left` is not ordered the same as `right` when the two queues are compared element by element."},{"content":"Example","pos":[1187,1194]},{"content":"Requirements","pos":[2228,2240]},{"pos":[2244,2271],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/queue&gt;","source":"**Header:** \\<cliext/queue>"},{"pos":[2278,2299],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2308,2316]},{"content":"queue (STL/CLR)","pos":[2321,2336]},{"content":"operator== (queue) (STL/CLR)","pos":[2371,2399]},{"content":"operator<ph id=\"ph1\">\\&lt;</ph> (queue) (STL/CLR)","pos":[2452,2480],"source":"operator\\< (queue) (STL/CLR)"},{"content":"operator&gt;= (queue) (STL/CLR)","pos":[2534,2562],"source":"operator>= (queue) (STL/CLR)"},{"content":"operator&gt; (queue) (STL/CLR)","pos":[2623,2650],"source":"operator> (queue) (STL/CLR)"},{"content":"operator&lt;= (queue) (STL/CLR)","pos":[2707,2735],"source":"operator<= (queue) (STL/CLR)"}],"content":"---\ntitle: \"operator!= (queue) (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::queue::operator!=\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator!= member [STL/CLR]\"\nms.assetid: aa9e23e5-518e-473c-b15c-9b610bb215d6\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# operator!= (queue) (STL/CLR)\nQueue not equal comparison.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Value,  \n    typename Container>  \n    bool operator!=(queue<Value, Container>% left,  \n        queue<Value, Container>% right);  \n```  \n  \n#### Parameters  \n left  \n Left container to compare.  \n  \n right  \n Right container to compare.  \n  \n## Remarks  \n The operator function returns `!(``left` `==` `right``)`. You use it to test whether `left` is not ordered the same as `right` when the two queues are compared element by element.  \n  \n## Example  \n  \n```  \n// cliext_queue_operator_ne.cpp   \n// compile with: /clr   \n#include <cliext/queue>   \n  \ntypedef cliext::queue<wchar_t> Myqueue;   \nint main()   \n    {   \n    Myqueue c1;   \n    c1.push(L'a');   \n    c1.push(L'b');   \n    c1.push(L'c');   \n  \n// display contents \" a b c\"   \n    for each (wchar_t elem in c1.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// assign to a new container   \n    Myqueue c2;   \n    c2.push(L'a');   \n    c2.push(L'b');   \n    c2.push(L'd');   \n  \n// display contents \" a b d\"   \n    for each (wchar_t elem in c2.get_container())   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"[a b c] != [a b c] is {0}\",   \n        c1 != c1);   \n    System::Console::WriteLine(\"[a b c] != [a b d] is {0}\",   \n        c1 != c2);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n a b c  \n a b d  \n[a b c] != [a b c] is False  \n[a b c] != [a b d] is True  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/queue>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [queue (STL/CLR)](../dotnet/queue-stl-clr.md)   \n [operator== (queue) (STL/CLR)](../dotnet/operator-equality-queue-stl-clr.md)   \n [operator\\< (queue) (STL/CLR)](../dotnet/operator-less-than-queue-stl-clr.md)   \n [operator>= (queue) (STL/CLR)](../dotnet/operator-greater-or-equal-queue-stl-clr.md)   \n [operator> (queue) (STL/CLR)](../dotnet/operator-greater-than-queue-stl-clr.md)   \n [operator<= (queue) (STL/CLR)](../dotnet/operator-less-or-equal-queue-stl-clr.md)"}