{"nodes":[{"pos":[12,63],"content":"CMyProviderRowset (MyProviderRS.H) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMyProviderRowset (MyProviderRS.H) | Microsoft Docs","pos":[0,51]}]},{"content":"CMyProviderRowset (MyProviderRS.H)","pos":[719,753]},{"content":"The wizard generates an entry for the rowset object.","pos":[754,806]},{"content":"In this case, it is called <ph id=\"ph1\">`CMyProviderRowset`</ph>.","pos":[807,854],"source":" In this case, it is called `CMyProviderRowset`."},{"content":"The <ph id=\"ph1\">`CMyProviderRowset`</ph> class inherits from an OLE DB provider class called <ph id=\"ph2\">`CRowsetImpl`</ph>, which implements all the necessary interfaces for the rowset object.","pos":[855,1014],"source":" The `CMyProviderRowset` class inherits from an OLE DB provider class called `CRowsetImpl`, which implements all the necessary interfaces for the rowset object."},{"content":"The following code shows the inheritance chain for <ph id=\"ph1\">`CRowsetImpl`</ph>:","pos":[1015,1080],"source":" The following code shows the inheritance chain for `CRowsetImpl`:"},{"content":"also uses the <ph id=\"ph1\">`IAccessor`</ph> and <ph id=\"ph2\">`IColumnsInfo`</ph> interfaces.","pos":[1347,1403],"source":" also uses the `IAccessor` and `IColumnsInfo` interfaces."},{"content":"It uses these interfaces for output fields in tables.","pos":[1404,1457]},{"content":"The class also provides an implementation for <bpt id=\"p1\">**</bpt>IRowsetIdentity<ept id=\"p1\">**</ept>, which allows the consumer to determine if two rows are identical.","pos":[1458,1590],"source":" The class also provides an implementation for **IRowsetIdentity**, which allows the consumer to determine if two rows are identical."},{"content":"The <ph id=\"ph1\">`IRowsetInfo`</ph> interface implements properties for the rowset object.","pos":[1591,1663],"source":" The `IRowsetInfo` interface implements properties for the rowset object."},{"content":"The <bpt id=\"p1\">**</bpt>IConvertType<ept id=\"p1\">**</ept> interface allows the provider to resolve differences between data types requested by the consumer and those used by the provider.","pos":[1664,1814],"source":" The **IConvertType** interface allows the provider to resolve differences between data types requested by the consumer and those used by the provider."},{"content":"The <ph id=\"ph1\">`IRowset`</ph> interface actually handles data retrieval.","pos":[1821,1877],"source":"The `IRowset` interface actually handles data retrieval."},{"content":"The consumer first calls a method called <ph id=\"ph1\">`GetNextRows`</ph> to return a handle to a row, known as an <bpt id=\"p1\">**</bpt>HROW<ept id=\"p1\">**</ept>.","pos":[1878,1983],"source":" The consumer first calls a method called `GetNextRows` to return a handle to a row, known as an **HROW**."},{"content":"The consumer then calls <bpt id=\"p1\">**</bpt>IRowset::GetData<ept id=\"p1\">**</ept> with that <bpt id=\"p2\">**</bpt>HROW<ept id=\"p2\">**</ept> to retrieve the requested data.","pos":[1984,2079],"source":" The consumer then calls **IRowset::GetData** with that **HROW** to retrieve the requested data."},{"content":"also takes several template parameters.","pos":[2100,2139]},{"content":"These parameters allow you to determine how the <ph id=\"ph1\">`CRowsetImpl`</ph> class handles data.","pos":[2140,2221],"source":" These parameters allow you to determine how the `CRowsetImpl` class handles data."},{"content":"The <ph id=\"ph1\">`ArrayType`</ph> argument allows you to determine what storage mechanism is used to store the row data.","pos":[2222,2324],"source":" The `ArrayType` argument allows you to determine what storage mechanism is used to store the row data."},{"content":"The <bpt id=\"p1\">**</bpt>RowClass<ept id=\"p1\">**</ept> parameter specifies what class contains an <bpt id=\"p2\">**</bpt>HROW<ept id=\"p2\">**</ept>.","pos":[2325,2394],"source":" The **RowClass** parameter specifies what class contains an **HROW**."},{"content":"The <bpt id=\"p1\">**</bpt>RowsetInterface<ept id=\"p1\">**</ept> parameter allows you to also use the <ph id=\"ph1\">`IRowsetLocate`</ph> or <ph id=\"ph2\">`IRowsetScroll`</ph> interface.","pos":[2401,2507],"source":"The **RowsetInterface** parameter allows you to also use the `IRowsetLocate` or `IRowsetScroll` interface."},{"content":"The <ph id=\"ph1\">`IRowsetLocate`</ph> and <ph id=\"ph2\">`IRowsetScroll`</ph> interfaces both inherit from <ph id=\"ph3\">`IRowset`</ph>.","pos":[2508,2587],"source":" The `IRowsetLocate` and `IRowsetScroll` interfaces both inherit from `IRowset`."},{"content":"Therefore, the OLE DB provider templates must provide special handling for these interfaces.","pos":[2588,2680]},{"content":"If you want to use either of these interfaces, you need to use this parameter.","pos":[2681,2759]},{"content":"See Also","pos":[2768,2776]},{"content":"Provider Wizard-Generated Files","pos":[2781,2812]}],"content":"---\ntitle: \"CMyProviderRowset (MyProviderRS.H) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"cmyproviderrowset\"\n  - \"myproviderrs.h\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"OLE DB providers, wizard-generated files\"\n  - \"CMyProviderRowset class in MyProviderRS.H\"\nms.assetid: 7ba1a124-3842-40eb-a36b-302190a1af3a\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMyProviderRowset (MyProviderRS.H)\nThe wizard generates an entry for the rowset object. In this case, it is called `CMyProviderRowset`. The `CMyProviderRowset` class inherits from an OLE DB provider class called `CRowsetImpl`, which implements all the necessary interfaces for the rowset object. The following code shows the inheritance chain for `CRowsetImpl`:  \n  \n```  \ntemplate <class T, class Storage, class CreatorClass,   \n   class ArrayType = CAtlArray<Storage> >  \nclass CMyRowsetImpl:  \n   public CRowsetImpl<T, Storage, CreatorClass, ArrayType,   \n      CSimpleRow, IRowsetLocateImpl< T > >  \n```  \n  \n `CRowsetImpl` also uses the `IAccessor` and `IColumnsInfo` interfaces. It uses these interfaces for output fields in tables. The class also provides an implementation for **IRowsetIdentity**, which allows the consumer to determine if two rows are identical. The `IRowsetInfo` interface implements properties for the rowset object. The **IConvertType** interface allows the provider to resolve differences between data types requested by the consumer and those used by the provider.  \n  \n The `IRowset` interface actually handles data retrieval. The consumer first calls a method called `GetNextRows` to return a handle to a row, known as an **HROW**. The consumer then calls **IRowset::GetData** with that **HROW** to retrieve the requested data.  \n  \n `CRowsetImpl` also takes several template parameters. These parameters allow you to determine how the `CRowsetImpl` class handles data. The `ArrayType` argument allows you to determine what storage mechanism is used to store the row data. The **RowClass** parameter specifies what class contains an **HROW**.  \n  \n The **RowsetInterface** parameter allows you to also use the `IRowsetLocate` or `IRowsetScroll` interface. The `IRowsetLocate` and `IRowsetScroll` interfaces both inherit from `IRowset`. Therefore, the OLE DB provider templates must provide special handling for these interfaces. If you want to use either of these interfaces, you need to use this parameter.  \n  \n## See Also  \n [Provider Wizard-Generated Files](../../data/oledb/provider-wizard-generated-files.md)"}