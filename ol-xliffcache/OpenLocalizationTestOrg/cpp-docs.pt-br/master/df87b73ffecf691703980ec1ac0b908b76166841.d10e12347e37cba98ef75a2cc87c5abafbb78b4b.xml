{"nodes":[{"pos":[12,53],"content":"IsBaseOfStrict Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IsBaseOfStrict Structure | Microsoft Docs","pos":[0,41]}]},{"content":"IsBaseOfStrict Structure","pos":[683,707]},{"content":"Supports the WRL infrastructure and is not intended to be used directly from your code.","pos":[708,795]},{"content":"Syntax","pos":[804,810]},{"content":"Parameters","pos":[996,1006]},{"content":"The base type.","pos":[1020,1034]},{"content":"The derived type.","pos":[1054,1071]},{"content":"Remarks","pos":[1080,1087]},{"content":"Tests whether one type is the base of another.","pos":[1091,1137]},{"content":"The first template tests whether a type is derived from a base type, which might yield <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","pos":[1144,1253],"source":"The first template tests whether a type is derived from a base type, which might yield **true** or **false**."},{"content":"The second template tests whether a type is derived from itself, which always yields <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.","pos":[1254,1349],"source":" The second template tests whether a type is derived from itself, which always yields **false**."},{"content":"Members","pos":[1358,1365]},{"content":"Public Constants","pos":[1375,1391]},{"content":"Name","pos":[1398,1402]},{"content":"Description","pos":[1403,1414]},{"content":"IsBaseOfStrict::value Constant","pos":[1453,1483]},{"content":"Indicates whether one type is the base of another.","pos":[1530,1580]},{"content":"Inheritance Hierarchy","pos":[1590,1611]},{"content":"Requirements","pos":[1640,1652]},{"pos":[1656,1678],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> internal.h","source":"**Header:** internal.h"},{"pos":[1685,1723],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::WRL::Details","source":"**Namespace:** Microsoft::WRL::Details"},{"content":"See Also","pos":[1732,1740]},{"content":"Microsoft::WRL::Details Namespace","pos":[1745,1778]}],"content":"---\ntitle: \"IsBaseOfStrict Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"internal/Microsoft::WRL::Details::IsBaseOfStrict\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"IsBaseOfStrict structure\"\nms.assetid: 6fed7366-c8d4-4991-b4fb-43ed93f8e1bf\ncaps.latest.revision: 5\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# IsBaseOfStrict Structure\nSupports the WRL infrastructure and is not intended to be used directly from your code.  \n  \n## Syntax  \n  \n```  \ntemplate <  \n   typename Base,  \n   typename Derived  \n>  \n  \nstruct IsBaseOfStrict;  \ntemplate <  \n   typename Base  \n>  \nstruct IsBaseOfStrict<Base, Base>;  \n```  \n  \n#### Parameters  \n `Base`  \n The base type.  \n  \n `Derived`  \n The derived type.  \n  \n## Remarks  \n Tests whether one type is the base of another.  \n  \n The first template tests whether a type is derived from a base type, which might yield **true** or **false**. The second template tests whether a type is derived from itself, which always yields **false**.  \n  \n## Members  \n  \n### Public Constants  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[IsBaseOfStrict::value Constant](../windows/isbaseofstrict-value-constant.md)|Indicates whether one type is the base of another.|  \n  \n## Inheritance Hierarchy  \n `IsBaseOfStrict`  \n  \n## Requirements  \n **Header:** internal.h  \n  \n **Namespace:** Microsoft::WRL::Details  \n  \n## See Also  \n [Microsoft::WRL::Details Namespace](../windows/microsoft-wrl-details-namespace.md)"}