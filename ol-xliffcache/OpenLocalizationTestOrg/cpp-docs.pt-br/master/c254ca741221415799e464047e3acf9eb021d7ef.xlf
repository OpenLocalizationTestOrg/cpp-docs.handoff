<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c254ca741221415799e464047e3acf9eb021d7ef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\reference-wrapper-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">476149adbebd714a8791f181bb8f828bb345b80f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">face3608369b789b6de4415b7a5651711385a5c2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>reference_wrapper Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>reference_wrapper Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Wraps a reference.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`reference_wrapper&lt;Ty&gt;`</ph> is copy constructible and assignable, and holds a pointer that points to an object of type <ph id="ph2">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A specialization <ph id="ph1">`reference_wrapper&lt;Ty&gt;`</ph> is derived from <ph id="ph2">`std::unary_function&lt;T1, Ret&gt;`</ph> (hence defining the nested type <ph id="ph3">`result_type`</ph> as a synonym for <ph id="ph4">`Ret`</ph> and the nested type <ph id="ph5">`argument_type`</ph> as a synonym for <ph id="ph6">`T1`</ph>) only if the type <ph id="ph7">`Ty`</ph> is:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>a function type or pointer to function type taking one argument of type <ph id="ph1">`T1`</ph> and returning <ph id="ph2">`Ret`</ph>; or</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>a pointer to a member function <ph id="ph1">`Ret T::f() cv`</ph>, where <ph id="ph2">`cv`</ph> represents the member function's cv-qualifiers; the type <ph id="ph3">`T1`</ph> is <ph id="ph4">`cv``T*`</ph>; or</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>a class type that is derived from <ph id="ph1">`unary_function&lt;T1, Ret&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A specialization <ph id="ph1">`reference_wrapper&lt;Ty&gt;`</ph> is derived from <ph id="ph2">`std::binary_function&lt;T1, T2, Ret&gt;`</ph> (hence defining the nested type <ph id="ph3">`result_type`</ph> as a synonym for <ph id="ph4">`Ret`</ph>, the nested type <ph id="ph5">`first_argument_type`</ph> as a synonym for <ph id="ph6">`T1`</ph>, and the nested type <ph id="ph7">`second_argument_type`</ph> as a synonym for <ph id="ph8">`T2`</ph>) only if the type <ph id="ph9">`Ty`</ph> is:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>a function type or pointer to function type taking two arguments of types <ph id="ph1">`T1`</ph> and <ph id="ph2">`T2`</ph> and returning <ph id="ph3">`Ret`</ph>; or</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>a pointer to a member function <ph id="ph1">`Ret T::f(T2) cv`</ph>, where <ph id="ph2">`cv`</ph> represents the member function's cv-qualifiers; the type <ph id="ph3">`T1`</ph> is <ph id="ph4">`cv``T*`</ph>; or</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>a class type that is derived from <ph id="ph1">`binary_function&lt;T1, T2, Ret&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>reference_wrapper::reference_wrapper</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`reference_wrapper`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>reference_wrapper::result_type</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The weak result type of the wrapped reference.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>reference_wrapper::type</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The type of the wrapped reference.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>reference_wrapper::get</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Obtains the wrapped reference.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>reference_wrapper::operator Ty</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets a pointer to the wrapped reference.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>reference_wrapper::operator()</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Calls the wrapped reference.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>functional&gt;</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>reference_wrapper::get</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Obtains the wrapped reference.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The member function returns <ph id="ph1">`INVOKE(get(), t1, t2, ..., tN)`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>reference_wrapper::operator Ty</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets a pointer to the wrapped reference.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>```  operator Ty&amp;() const;</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>reference_wrapper::operator()</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Calls the wrapped reference.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The type of the Nth call argument.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The Nth call argument.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The template member operator returns <ph id="ph1">`INVOKE(get(), t1, t2, ..., tN)`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>reference_wrapper::reference_wrapper</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`reference_wrapper`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The type to wrap.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The value to wrap.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The constructor sets the stored value <ph id="ph1">`ptr`</ph> to <ph id="ph2">`&amp;val`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>reference_wrapper::result_type</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The weak result type of the wrapped reference.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The typedef is a synonym for the weak result type of a wrapped function.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>reference_wrapper::type</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The type of the wrapped reference.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The typedef is a synonym for the template argument <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>cref Function</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>ref Function</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>