{"nodes":[{"pos":[12,41],"content":"Subscripting | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Subscripting | Microsoft Docs","pos":[0,29]}]},{"content":"Subscripting","pos":[741,753]},{"content":"The subscript operator (<bpt id=\"p1\">**</bpt>[ ]<ept id=\"p1\">**</ept>), like the function-call operator, is considered a binary operator.","pos":[754,853],"source":"The subscript operator (**[ ]**), like the function-call operator, is considered a binary operator."},{"content":"The subscript operator must be a nonstatic member function that takes a single argument.","pos":[854,942]},{"content":"This argument can be of any type and designates the desired array subscript.","pos":[943,1019]},{"content":"Example","pos":[1028,1035]},{"pos":[1039,1143],"content":"The following example demonstrates how to create a vector of type <ph id=\"ph1\">`int`</ph> that implements bounds checking:","source":"The following example demonstrates how to create a vector of type `int` that implements bounds checking:"},{"content":"Comments","pos":[2468,2476]},{"pos":[2480,2621],"content":"When <ph id=\"ph1\">`i`</ph> reaches 10 in the preceding program, <ph id=\"ph2\">`operator[]`</ph> detects that an out-of-bounds subscript is being used and issues an error message.","source":"When `i` reaches 10 in the preceding program, `operator[]` detects that an out-of-bounds subscript is being used and issues an error message."},{"content":"Note that the function <ph id=\"ph1\">`operator[]`</ph> returns a reference type.","pos":[2628,2689],"source":"Note that the function `operator[]` returns a reference type."},{"content":"This causes it to be an l-value, allowing you to use subscripted expressions on either side of assignment operators.","pos":[2690,2806]},{"content":"See Also","pos":[2815,2823]},{"content":"Operator Overloading","pos":[2828,2848]}],"content":"---\ntitle: \"Subscripting | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"subscript operator, overloaded\"\n  - \"arrays [C++], subscripting\"\n  - \"subscripting\"\n  - \"operators [C++], overloading\"\n  - \"operator overloading, examples\"\n  - \"subscript operator\"\nms.assetid: eb151281-6733-401d-9787-39ab6754c62c\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Subscripting\nThe subscript operator (**[ ]**), like the function-call operator, is considered a binary operator. The subscript operator must be a nonstatic member function that takes a single argument. This argument can be of any type and designates the desired array subscript.  \n  \n## Example  \n The following example demonstrates how to create a vector of type `int` that implements bounds checking:  \n  \n```  \n// subscripting.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nusing namespace std;  \nclass IntVector {  \npublic:  \n   IntVector( int cElements );  \n   ~IntVector() { delete [] _iElements; }  \n   int& operator[](int nSubscript);  \nprivate:  \n   int *_iElements;  \n   int _iUpperBound;  \n};  \n  \n// Construct an IntVector.  \nIntVector::IntVector( int cElements ) {  \n   _iElements = new int[cElements];  \n   _iUpperBound = cElements;  \n}  \n  \n// Subscript operator for IntVector.  \nint& IntVector::operator[](int nSubscript) {  \n   static int iErr = -1;  \n  \n   if( nSubscript >= 0 && nSubscript < _iUpperBound )  \n      return _iElements[nSubscript];  \n   else {  \n      clog << \"Array bounds violation.\" << endl;  \n      return iErr;  \n   }  \n}  \n  \n// Test the IntVector class.  \nint main() {  \n   IntVector v( 10 );  \n   int i;  \n  \n   for( i = 0; i <= 10; ++i )  \n      v[i] = i;  \n  \n   v[3] = v[9];  \n  \n   for ( i = 0; i <= 10; ++i )  \n      cout << \"Element: [\" << i << \"] = \" << v[i] << endl;  \n}  \n```  \n  \n```Output  \nArray bounds violation.  \nElement: [0] = 0  \nElement: [1] = 1  \nElement: [2] = 2  \nElement: [3] = 9  \nElement: [4] = 4  \nElement: [5] = 5  \nElement: [6] = 6  \nElement: [7] = 7  \nElement: [8] = 8  \nElement: [9] = 9  \nArray bounds violation.  \nElement: [10] = 10  \n```  \n  \n## Comments  \n When `i` reaches 10 in the preceding program, `operator[]` detects that an out-of-bounds subscript is being used and issues an error message.  \n  \n Note that the function `operator[]` returns a reference type. This causes it to be an l-value, allowing you to use subscripted expressions on either side of assignment operators.  \n  \n## See Also  \n [Operator Overloading](../cpp/operator-overloading.md)"}