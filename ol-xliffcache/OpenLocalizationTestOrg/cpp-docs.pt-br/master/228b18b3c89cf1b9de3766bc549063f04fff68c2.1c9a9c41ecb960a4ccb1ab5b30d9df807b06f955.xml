{"nodes":[{"pos":[12,62],"content":"__int8, __int16, __int32, __int64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__int8, __int16, __int32, __int64 | Microsoft Docs","pos":[0,50]}]},{"content":"__int8, __int16, __int32, __int64","pos":[899,932]},{"content":"Microsoft Specific","pos":[936,954]},{"content":"Microsoft C/C++ features support for sized integer types.","pos":[958,1015]},{"content":"You can declare 8-, 16-, 32-, or 64-bit integer variables by using the <bpt id=\"p1\">**</bpt>__int<ept id=\"p1\">**</ept><bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept> type specifier, where <bpt id=\"p3\">*</bpt>n<ept id=\"p3\">*</ept> is 8, 16, 32, or 64.","pos":[1016,1146],"source":" You can declare 8-, 16-, 32-, or 64-bit integer variables by using the **__int***n* type specifier, where *n* is 8, 16, 32, or 64."},{"content":"The following example declares one variable for each of these types of sized integers:","pos":[1153,1239]},{"content":"The types <ph id=\"ph1\">`__int8`</ph>, <ph id=\"ph2\">`__int16`</ph>, and <ph id=\"ph3\">`__int32`</ph> are synonyms for the ANSI types that have the same size, and are useful for writing portable code that behaves identically across multiple platforms.","pos":[1456,1650],"source":"The types `__int8`, `__int16`, and `__int32` are synonyms for the ANSI types that have the same size, and are useful for writing portable code that behaves identically across multiple platforms."},{"content":"The <ph id=\"ph1\">`__int8`</ph> data type is synonymous with type <ph id=\"ph2\">`char`</ph>, <ph id=\"ph3\">`__int16`</ph> is synonymous with type <bpt id=\"p1\">**</bpt>short<ept id=\"p1\">**</ept>, and <ph id=\"ph4\">`__int32`</ph> is synonymous with type <ph id=\"ph5\">`int`</ph>.","pos":[1651,1795],"source":" The `__int8` data type is synonymous with type `char`, `__int16` is synonymous with type **short**, and `__int32` is synonymous with type `int`."},{"content":"The <ph id=\"ph1\">`__int64`</ph> type has no ANSI equivalent.","pos":[1796,1838],"source":" The `__int64` type has no ANSI equivalent."},{"content":"Example","pos":[1847,1854]},{"pos":[1858,1939],"content":"The following sample shows that an __int<bpt id=\"p1\">*</bpt>xx<ept id=\"p1\">*</ept> parameter will be promoted to <ph id=\"ph1\">`int`</ph>:","source":"The following sample shows that an __int*xx* parameter will be promoted to `int`:"},{"content":"END Microsoft Specific","pos":[2259,2281]},{"content":"See Also","pos":[2290,2298]},{"content":"Keywords","pos":[2303,2311]},{"content":"Fundamental Types","pos":[2342,2359]},{"content":"Data Type Ranges","pos":[2399,2415]}],"content":"---\ntitle: \"__int8, __int16, __int32, __int64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"__int8_cpp\"\n  - \"__int64\"\n  - \"__int8\"\n  - \"__int16\"\n  - \"__int16_cpp\"\n  - \"__int64_cpp\"\n  - \"__int32_cpp\"\n  - \"__int32\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"__int16 keyword [C++]\"\n  - \"integer data type, integer types in C++\"\n  - \"__int32 keyword [C++]\"\n  - \"integer types [C++]\"\n  - \"__int8 keyword [C++]\"\n  - \"__int64 keyword [C++]\"\nms.assetid: 8e384602-2578-4980-8cc8-da63842356b2\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# __int8, __int16, __int32, __int64\n## Microsoft Specific  \n Microsoft C/C++ features support for sized integer types. You can declare 8-, 16-, 32-, or 64-bit integer variables by using the **__int***n* type specifier, where *n* is 8, 16, 32, or 64.  \n  \n The following example declares one variable for each of these types of sized integers:  \n  \n```  \n__int8 nSmall;      // Declares 8-bit integer  \n__int16 nMedium;    // Declares 16-bit integer  \n__int32 nLarge;     // Declares 32-bit integer  \n__int64 nHuge;      // Declares 64-bit integer  \n```  \n  \n The types `__int8`, `__int16`, and `__int32` are synonyms for the ANSI types that have the same size, and are useful for writing portable code that behaves identically across multiple platforms. The `__int8` data type is synonymous with type `char`, `__int16` is synonymous with type **short**, and `__int32` is synonymous with type `int`. The `__int64` type has no ANSI equivalent.  \n  \n## Example  \n The following sample shows that an __int*xx* parameter will be promoted to `int`:  \n  \n```  \n// sized_int_types.cpp  \n  \n#include <stdio.h>  \n  \nvoid func(int i) {  \n    printf_s(\"%s\\n\", __FUNCTION__);  \n}  \n  \nint main()  \n{  \n    __int8 i8 = 100;  \n    func(i8);   // no void func(__int8 i8) function  \n                // __int8 will be promoted to int  \n}  \n```  \n  \n```Output  \nfunc  \n```  \n  \n## END Microsoft Specific  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)   \n [Fundamental Types](../cpp/fundamental-types-cpp.md)   \n [Data Type Ranges](../cpp/data-type-ranges.md)"}