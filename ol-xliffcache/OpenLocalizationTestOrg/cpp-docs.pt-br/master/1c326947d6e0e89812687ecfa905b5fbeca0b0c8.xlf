<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c326947d6e0e89812687ecfa905b5fbeca0b0c8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\function-objects-in-the-stl.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7c213ad9c8cd2d5bafacebb1f410d2b845813f5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e3920b3eb5f152a41819ffe015ad4cdac7b7e17</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Function Objects in the STL | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Function Objects in the STL</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>function object<ept id="p1">*</ept>, or <bpt id="p2">*</bpt>functor<ept id="p2">*</ept>, is any type that implements operator().</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This operator is referred to as the <bpt id="p1">*</bpt>call operator<ept id="p1">*</ept> or sometimes the <bpt id="p2">*</bpt>application operator<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Standard Template Library uses function objects primarily as sorting criteria for containers and in algorithms.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Function objects provide two main advantages over a straight function call.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The first is that a function object can contain state.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The second is that a function object is a type and therefore can be used as a template parameter.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating a Function Object</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To create a function object, create a type and implement operator(), such as:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>class Functor</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>{</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>public:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>int operator()(int a, int b)</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>{</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>return a &lt;b;</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>}</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>};</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The last line of the <ph id="ph1">`main`</ph> function shows how you call the function object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This call looks like a call to a function, but it is actually calling operator() of the Functor type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This similarity between calling a function object and a function is how the term function object came about.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Function Objects and Containers</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The Standard Template Library contains several function objects in the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>functional&gt;<ept id="p1">](../standard-library/functional.md)</ept> header file.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>One use of these function objects is as a sorting criterion for containers.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`set`</ph> container is declared as follows:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The second template argument is the function object <ph id="ph1">`less`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This function object returns <ph id="ph1">`true`</ph> if the first parameter passed to it is less than the second parameter passed.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Since some containers sort their elements, the container needs a way of comparing two elements, and this is accomplished using the function object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can define your own sorting criteria for containers by creating a function object and specifying it in the template list for the container.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Function Objects and Algorithms</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Another use of functional objects is in algorithms.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`remove_if`</ph> algorithm is declared as follows:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The last argument to <ph id="ph1">`remove_if`</ph> is a function object that returns a boolean value (a <bpt id="p1">*</bpt>predicate<ept id="p1">*</ept>).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the result of the function object is <ph id="ph1">`true`</ph>, then the element is removed from the container being accessed by the iterators <ph id="ph2">` first`</ph> and <ph id="ph3">` last`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can use any of the function objects declared in the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>functional&gt;<ept id="p1">](../standard-library/functional.md)</ept> header for the argument <ph id="ph2">` pred`</ph> or you can create your own.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>C++ Standard Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>