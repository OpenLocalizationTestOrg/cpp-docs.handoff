{"nodes":[{"pos":[12,38],"content":"set Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"set Class | Microsoft Docs","pos":[0,26]}]},{"content":"set Class","pos":[629,638]},{"content":"The STL container class set is used for the storage and retrieval of data from a collection in which the values of the elements contained are unique and serve as the key values according to which the data is automatically ordered.","pos":[639,869]},{"content":"The value of an element in a set may not be changed directly.","pos":[870,931]},{"content":"Instead, you must delete old values and insert elements with new values.","pos":[932,1004]},{"content":"Syntax","pos":[1013,1019]},{"content":"Parameters","pos":[1150,1160]},{"content":"The element data type to be stored in the set.","pos":[1173,1219]},{"content":"The type that provides a function object that can compare two element values as sort keys to determine their relative order in the set.","pos":[1238,1373]},{"content":"This argument is optional, and the binary predicate <bpt id=\"p1\">**</bpt>less<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt><ph id=\"ph1\">\\&lt;</ph>Key&gt;<ept id=\"p2\">*</ept> is the default value.","pos":[1374,1465],"source":" This argument is optional, and the binary predicate **less** *\\<Key>* is the default value."},{"content":"In C++14 you can enable heterogeneous lookup by specifying the <ph id=\"ph1\">`std::less&lt;&gt;`</ph> or <ph id=\"ph2\">`std::greater&lt;&gt;`</ph> predicate that has no type parameters.","pos":[1472,1607],"source":"In C++14 you can enable heterogeneous lookup by specifying the `std::less<>` or `std::greater<>` predicate that has no type parameters."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Heterogeneous Lookup in Associative Containers<ept id=\"p1\">](../standard-library/stl-containers.md#sequence_containers)</ept>","pos":[1608,1741],"source":" For more information, see [Heterogeneous Lookup in Associative Containers](../standard-library/stl-containers.md#sequence_containers)"},{"content":"The type that represents the stored allocator object that encapsulates details about the set's allocation and deallocation of memory.","pos":[1763,1896]},{"content":"This argument is optional, and the default value is <bpt id=\"p1\">**</bpt>allocator<ept id=\"p1\">**</ept><bpt id=\"p2\">*</bpt><ph id=\"ph1\">\\&lt;</ph>Key&gt;.<ept id=\"p2\">*</ept>","pos":[1897,1971],"source":" This argument is optional, and the default value is **allocator***\\<Key>.*"},{"content":"Remarks","pos":[1980,1987]},{"content":"An STL set is:","pos":[1991,2005]},{"content":"An associative container, which a variable size container that supports the efficient retrieval of element values based on an associated key value.","pos":[2015,2162]},{"content":"Further, it is a simple associative container because its element values are its key values.","pos":[2163,2255]},{"content":"Reversible, because it provides a bidirectional iterator to access its elements.","pos":[2265,2345]},{"content":"Sorted, because its elements are ordered by key values within the container in accordance with a specified comparison function.","pos":[2355,2482]},{"content":"Unique in the sense that each of its elements must have a unique key.","pos":[2492,2561]},{"content":"Since set is also a simple associative container, its elements are also unique.","pos":[2562,2641]},{"content":"A set is also described as a template class because the functionality it provides is generic and independent of the specific type of data contained as elements.","pos":[2648,2808]},{"content":"The data type to be used is, instead, specified as a parameter in the class template along with the comparison function and allocator.","pos":[2809,2943]},{"content":"The choice of container type should be based in general on the type of searching and inserting required by the application.","pos":[2950,3073]},{"content":"Associative containers are optimized for the operations of lookup, insertion and removal.","pos":[3074,3163]},{"content":"The member functions that explicitly support these operations are efficient, performing them in a time that is on average proportional to the logarithm of the number of elements in the container.","pos":[3164,3359]},{"content":"Inserting elements invalidates no iterators, and removing elements invalidates only those iterators that had specifically pointed at the removed elements.","pos":[3360,3514]},{"content":"The set should be the associative container of choice when the conditions associating the values with their keys are satisfied by the application.","pos":[3521,3667]},{"content":"The elements of a set are unique and serve as their own sort keys.","pos":[3668,3734]},{"content":"A model for this type of structure is an ordered list of, say, words in which the words may occur only once.","pos":[3735,3843]},{"content":"If multiple occurrences of the words were allowed, then a multiset would be the appropriate container structure.","pos":[3844,3956]},{"content":"If values need to be attached to a list of unique key words, then a map would be an appropriate structure to contain this data.","pos":[3957,4084]},{"content":"If instead the keys are not unique, then a multimap would be the container of choice.","pos":[4085,4170]},{"content":"The set orders the sequence it controls by calling a stored function object of type <bpt id=\"p1\">[</bpt>key_compare<ept id=\"p1\">](#set__key_compare)</ept>.","pos":[4177,4294],"source":"The set orders the sequence it controls by calling a stored function object of type [key_compare](#set__key_compare)."},{"content":"This stored object is a comparison function that may be accessed by calling the member function <bpt id=\"p1\">[</bpt>key_comp<ept id=\"p1\">](#set__key_comp)</ept>.","pos":[4295,4418],"source":" This stored object is a comparison function that may be accessed by calling the member function [key_comp](#set__key_comp)."},{"content":"In general, the elements need to be merely less than comparable to establish this order so that, given any two elements, it may be determined either that they are equivalent (in the sense that neither is less than the other) or that one is less than the other.","pos":[4419,4679]},{"content":"This results in an ordering between the nonequivalent elements.","pos":[4680,4743]},{"content":"On a more technical note, the comparison function is a binary predicate that induces a strict weak ordering in the standard mathematical sense.","pos":[4744,4887]},{"content":"A binary predicate <bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>( <bpt id=\"p2\">*</bpt>x,y<ept id=\"p2\">*</ept>) is a function object that has two argument objects <bpt id=\"p3\">*</bpt>x<ept id=\"p3\">*</ept> and <bpt id=\"p4\">*</bpt>y<ept id=\"p4\">*</ept> and a return value of <bpt id=\"p5\">**</bpt>true<ept id=\"p5\">**</ept> or <bpt id=\"p6\">**</bpt>false<ept id=\"p6\">**</ept>.","pos":[4888,5026],"source":" A binary predicate *f*( *x,y*) is a function object that has two argument objects *x* and *y* and a return value of **true** or **false**."},{"content":"An ordering imposed on a set is a strict weak ordering if the binary predicate is irreflexive, antisymmetric, and transitive and if equivalence is transitive, where two objects <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>y<ept id=\"p2\">*</ept> are defined to be equivalent when both <bpt id=\"p3\">*</bpt>f<ept id=\"p3\">*</ept>( <bpt id=\"p4\">*</bpt>x,y<ept id=\"p4\">*</ept>) and <bpt id=\"p5\">*</bpt>f<ept id=\"p5\">*</ept>( <bpt id=\"p6\">*</bpt>y,x<ept id=\"p6\">*</ept>) are false.","pos":[5027,5293],"source":" An ordering imposed on a set is a strict weak ordering if the binary predicate is irreflexive, antisymmetric, and transitive and if equivalence is transitive, where two objects *x* and *y* are defined to be equivalent when both *f*( *x,y*) and *f*( *y,x*) are false."},{"content":"If the stronger condition of equality between keys replaces that of equivalence, then the ordering becomes total (in the sense that all the elements are ordered with respect to each other) and the keys matched will be indiscernible from each other.","pos":[5294,5542]},{"content":"In C++14 you can enable heterogeneous lookup by specifying the <ph id=\"ph1\">`std::less&lt;&gt;`</ph> or <ph id=\"ph2\">`std::greater&lt;&gt;`</ph> predicate that has no type parameters.","pos":[5549,5684],"source":"In C++14 you can enable heterogeneous lookup by specifying the `std::less<>` or `std::greater<>` predicate that has no type parameters."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Heterogeneous Lookup in Associative Containers<ept id=\"p1\">](../standard-library/stl-containers.md#sequence_containers)</ept>","pos":[5685,5818],"source":" For more information, see [Heterogeneous Lookup in Associative Containers](../standard-library/stl-containers.md#sequence_containers)"},{"content":"The iterator provided by the set class is a bidirectional iterator, but the class member functions <bpt id=\"p1\">[</bpt>insert<ept id=\"p1\">](#set__insert)</ept> and <bpt id=\"p2\">[</bpt>set<ept id=\"p2\">](#set__set)</ept> have versions that take as template parameters a weaker input iterator, whose functionality requirements are more minimal than those guaranteed by the class of bidirectional iterators.","pos":[5825,6152],"source":"The iterator provided by the set class is a bidirectional iterator, but the class member functions [insert](#set__insert) and [set](#set__set) have versions that take as template parameters a weaker input iterator, whose functionality requirements are more minimal than those guaranteed by the class of bidirectional iterators."},{"content":"The different iterator concepts form a family related by refinements in their functionality.","pos":[6153,6245]},{"content":"Each iterator concept has its own set of requirements, and the algorithms that work with them must limit their assumptions to the requirements provided by that type of iterator.","pos":[6246,6423]},{"content":"It may be assumed that an input iterator may be dereferenced to refer to some object and that it may be incremented to the next iterator in the sequence.","pos":[6424,6577]},{"content":"This is a minimal set of functionality, but it is enough to be able to talk meaningfully about a range of iterators [ <ph id=\"ph1\">`First`</ph>, <ph id=\"ph2\">`Last`</ph>) in the context of the class's member functions.","pos":[6578,6760],"source":" This is a minimal set of functionality, but it is enough to be able to talk meaningfully about a range of iterators [ `First`, `Last`) in the context of the class's member functions."},{"content":"Constructors","pos":[6770,6782]},{"content":"set","pos":[6804,6807]},{"content":"Constructs a set that is empty or that is a copy of all or part of some other set.","pos":[6820,6902]},{"content":"Typedefs","pos":[6913,6921]},{"content":"allocator_type","pos":[6943,6957]},{"pos":[6981,7045],"content":"A type that represents the <ph id=\"ph1\">`allocator`</ph> class for the set object.","source":"A type that represents the `allocator` class for the set object."},{"content":"const_iterator","pos":[7051,7065]},{"pos":[7089,7178],"content":"A type that provides a bidirectional iterator that can read a <ph id=\"ph1\">`const`</ph> element in the set.","source":"A type that provides a bidirectional iterator that can read a `const` element in the set."},{"content":"const_pointer","pos":[7184,7197]},{"pos":[7220,7281],"content":"A type that provides a pointer to a <ph id=\"ph1\">`const`</ph> element in a set.","source":"A type that provides a pointer to a `const` element in a set."},{"content":"const_reference","pos":[7287,7302]},{"pos":[7327,7443],"content":"A type that provides a reference to a <ph id=\"ph1\">`const`</ph> element stored in a set for reading and performing <ph id=\"ph2\">`const`</ph> operations.","source":"A type that provides a reference to a `const` element stored in a set for reading and performing `const` operations."},{"content":"const_reverse_iterator","pos":[7449,7471]},{"pos":[7503,7594],"content":"A type that provides a bidirectional iterator that can read any <ph id=\"ph1\">`const`</ph> element in the set.","source":"A type that provides a bidirectional iterator that can read any `const` element in the set."},{"content":"difference_type","pos":[7600,7615]},{"content":"A signed integer type that can be used to represent the number of elements of a set in a range between elements pointed to by iterators.","pos":[7640,7776]},{"content":"iterator","pos":[7782,7790]},{"content":"A type that provides a bidirectional iterator that can read or modify any element in a set.","pos":[7808,7899]},{"content":"key_compare","pos":[7905,7916]},{"content":"A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the set.","pos":[7937,8066]},{"content":"key_type","pos":[8072,8080]},{"content":"The type describes an object stored as an element of a set in its capacity as sort key.","pos":[8098,8185]},{"content":"pointer","pos":[8191,8198]},{"content":"A type that provides a pointer to an element in a set.","pos":[8215,8269]},{"content":"reference","pos":[8275,8284]},{"content":"A type that provides a reference to an element stored in a set.","pos":[8303,8366]},{"content":"reverse_iterator","pos":[8372,8388]},{"content":"A type that provides a bidirectional iterator that can read or modify an element in a reversed set.","pos":[8414,8513]},{"content":"size_type","pos":[8519,8528]},{"content":"An unsigned integer type that can represent the number of elements in a set.","pos":[8547,8623]},{"content":"value_compare","pos":[8629,8642]},{"content":"The type that provides a function object that can compare two elements to determine their relative order in the set.","pos":[8665,8781]},{"content":"value_type","pos":[8787,8797]},{"content":"The type describes an object stored as an element of a set in its capacity as a value.","pos":[8817,8903]},{"content":"Member Functions","pos":[8914,8930]},{"content":"begin","pos":[8952,8957]},{"content":"Returns an iterator that addresses the first element in the set.","pos":[8972,9036]},{"content":"cbegin","pos":[9042,9048]},{"content":"Returns a const iterator that addresses the first element in the set.","pos":[9064,9133]},{"content":"cend","pos":[9139,9143]},{"content":"Returns a const iterator that addresses the location succeeding the last element in a set.","pos":[9157,9247]},{"content":"clear","pos":[9253,9258]},{"content":"Erases all the elements of a set.","pos":[9273,9306]},{"content":"count","pos":[9312,9317]},{"content":"Returns the number of elements in a set whose key matches a parameter-specified key.","pos":[9332,9416]},{"content":"crbegin","pos":[9422,9429]},{"content":"Returns a const iterator addressing the first element in a reversed set.","pos":[9445,9517]},{"content":"crend","pos":[9523,9528]},{"content":"Returns a const iterator that addresses the location succeeding the last element in a reversed set.","pos":[9542,9641]},{"content":"emplace","pos":[9647,9654]},{"content":"Inserts an element constructed in place into a set.","pos":[9671,9722]},{"content":"emplace_hint","pos":[9728,9740]},{"content":"Inserts an element constructed in place into a set, with a placement hint.","pos":[9762,9836]},{"content":"empty","pos":[9842,9847]},{"content":"Tests if a set is empty.","pos":[9862,9886]},{"content":"end","pos":[9892,9895]},{"content":"Returns an iterator that addresses the location succeeding the last element in a set.","pos":[9908,9993]},{"content":"equal_range","pos":[9999,10010]},{"content":"Returns a pair of iterators respectively to the first element in a set with a key that is greater than a specified key and to the first element in the set with a key that is equal to or greater than the key.","pos":[10031,10238]},{"content":"erase","pos":[10244,10249]},{"content":"Removes an element or a range of elements in a set from specified positions or removes elements that match a specified key.","pos":[10264,10387]},{"content":"find","pos":[10393,10397]},{"content":"Returns an iterator addressing the location of an element in a set that has a key equivalent to a specified key.","pos":[10411,10523]},{"content":"get_allocator","pos":[10529,10542]},{"pos":[10565,10632],"content":"Returns a copy of the <ph id=\"ph1\">`allocator`</ph> object used to construct the set.","source":"Returns a copy of the `allocator` object used to construct the set."},{"content":"insert","pos":[10638,10644]},{"content":"Inserts an element or a range of elements into a set.","pos":[10660,10713]},{"content":"key_comp","pos":[10719,10727]},{"content":"Retrieves a copy of the comparison object used to order keys in a set.","pos":[10745,10815]},{"content":"lower_bound","pos":[10821,10832]},{"content":"Returns an iterator to the first element in a set with a key that is equal to or greater than a specified key.","pos":[10853,10963]},{"content":"max_size","pos":[10969,10977]},{"content":"Returns the maximum length of the set.","pos":[10995,11033]},{"content":"rbegin","pos":[11039,11045]},{"content":"Returns an iterator addressing the first element in a reversed set.","pos":[11061,11128]},{"content":"rend","pos":[11134,11138]},{"content":"Returns an iterator that addresses the location succeeding the last element in a reversed set.","pos":[11152,11246]},{"content":"size","pos":[11252,11256]},{"content":"Returns the number of elements in the set.","pos":[11270,11312]},{"content":"swap","pos":[11318,11322]},{"content":"Exchanges the elements of two sets.","pos":[11336,11371]},{"content":"upper_bound","pos":[11377,11388]},{"content":"Returns an iterator to the first element in a set with a key that is greater than a specified key.","pos":[11409,11507]},{"content":"value_comp","pos":[11513,11523]},{"content":"Retrieves a copy of the comparison object used to order element values in a set.","pos":[11543,11623]},{"content":"Operators","pos":[11634,11643]},{"content":"operator=","pos":[11665,11674]},{"content":"Replaces the elements of a set with a copy of another set.","pos":[11695,11753]},{"content":"Requirements","pos":[11763,11775]},{"pos":[11779,11797],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>set&gt;","source":"**Header:** \\<set>"},{"pos":[11804,11822],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[11868,11887],"content":"set::allocator_type"},{"content":"A type that represents the allocator class for the set object.","pos":[11891,11953]},{"content":"Remarks","pos":[12014,12021]},{"pos":[12025,12130],"content":"<bpt id=\"p1\">**</bpt>allocator_type<ept id=\"p1\">**</ept> is a synonym for the template parameter <bpt id=\"p2\">[</bpt>Allocator<ept id=\"p2\">](../standard-library/set-class.md)</ept>.","source":"**allocator_type** is a synonym for the template parameter [Allocator](../standard-library/set-class.md)."},{"pos":[12137,12253],"content":"Returns the function object that a multiset uses to order its elements, which is the template parameter <ph id=\"ph1\">`Allocator`</ph>.","source":"Returns the function object that a multiset uses to order its elements, which is the template parameter `Allocator`."},{"pos":[12260,12380],"content":"For more information on <ph id=\"ph1\">`Allocator`</ph>, see the Remarks section of the <bpt id=\"p1\">[</bpt>set Class<ept id=\"p1\">](../standard-library/set-class.md)</ept> topic.","source":"For more information on `Allocator`, see the Remarks section of the [set Class](../standard-library/set-class.md) topic."},{"content":"Example","pos":[12390,12397]},{"pos":[12402,12501],"content":"See the example for <bpt id=\"p1\">[</bpt>get_allocator<ept id=\"p1\">](#set__get_allocator)</ept> for an example that uses <ph id=\"ph1\">`allocator_type`</ph>.","source":"See the example for [get_allocator](#set__get_allocator) for an example that uses `allocator_type`."},{"pos":[12538,12548],"content":"set::begin"},{"content":"Returns an iterator that addresses the first element in the set.","pos":[12552,12616]},{"content":"Return Value","pos":[12690,12702]},{"content":"A bidirectional iterator addressing the first element in the set or the location succeeding an empty set.","pos":[12706,12811]},{"content":"Remarks","pos":[12821,12828]},{"content":"If the return value of <bpt id=\"p1\">**</bpt>begin<ept id=\"p1\">**</ept> is assigned to a <ph id=\"ph1\">`const_iterator`</ph>, the elements in the set object cannot be modified.","pos":[12832,12950],"source":"If the return value of **begin** is assigned to a `const_iterator`, the elements in the set object cannot be modified."},{"content":"If the return value of <bpt id=\"p1\">**</bpt>begin<ept id=\"p1\">**</ept> is assigned to an <bpt id=\"p2\">**</bpt>iterator<ept id=\"p2\">**</ept>, the elements in the set object can be modified.","pos":[12951,13063],"source":" If the return value of **begin** is assigned to an **iterator**, the elements in the set object can be modified."},{"content":"Example","pos":[13073,13080]},{"pos":[13905,13916],"content":"set::cbegin"},{"pos":[13920,13993],"content":"Returns a <ph id=\"ph1\">`const`</ph> iterator that addresses the first element in the range.","source":"Returns a `const` iterator that addresses the first element in the range."},{"content":"Return Value","pos":[14049,14061]},{"pos":[14065,14249],"content":"A <ph id=\"ph1\">`const`</ph> bidirectional-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, <ph id=\"ph2\">`cbegin() == cend()`</ph>).","source":"A `const` bidirectional-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, `cbegin() == cend()`)."},{"content":"Remarks","pos":[14259,14266]},{"pos":[14270,14350],"content":"With the return value of <ph id=\"ph1\">`cbegin`</ph>, the elements in the range cannot be modified.","source":"With the return value of `cbegin`, the elements in the range cannot be modified."},{"content":"You can use this member function in place of the <ph id=\"ph1\">`begin()`</ph> member function to guarantee that the return value is <ph id=\"ph2\">`const_iterator`</ph>.","pos":[14357,14487],"source":"You can use this member function in place of the `begin()` member function to guarantee that the return value is `const_iterator`."},{"content":"Typically, it's used in conjunction with the <bpt id=\"p1\">[</bpt>auto<ept id=\"p1\">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.","pos":[14488,14618],"source":" Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example."},{"content":"In the example, consider <ph id=\"ph1\">`Container`</ph> to be a modifiable (non- <ph id=\"ph2\">`const`</ph>) container of any kind that supports <ph id=\"ph3\">`begin()`</ph> and <ph id=\"ph4\">`cbegin()`</ph>.","pos":[14619,14751],"source":" In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `begin()` and `cbegin()`."},{"pos":[14942,14951],"content":"set::cend"},{"pos":[14955,15050],"content":"Returns a <ph id=\"ph1\">`const`</ph> iterator that addresses the location just beyond the last element in a range.","source":"Returns a `const` iterator that addresses the location just beyond the last element in a range."},{"content":"Return Value","pos":[15104,15116]},{"pos":[15120,15205],"content":"A <ph id=\"ph1\">`const`</ph> bidirectional-access iterator that points just beyond the end of the range.","source":"A `const` bidirectional-access iterator that points just beyond the end of the range."},{"content":"Remarks","pos":[15215,15222]},{"pos":[15233,15301],"content":"is used to test whether an iterator has passed the end of its range."},{"content":"You can use this member function in place of the <ph id=\"ph1\">`end()`</ph> member function to guarantee that the return value is <ph id=\"ph2\">`const_iterator`</ph>.","pos":[15308,15436],"source":"You can use this member function in place of the `end()` member function to guarantee that the return value is `const_iterator`."},{"content":"Typically, it's used in conjunction with the <bpt id=\"p1\">[</bpt>auto<ept id=\"p1\">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.","pos":[15437,15567],"source":" Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example."},{"content":"In the example, consider <ph id=\"ph1\">`Container`</ph> to be a modifiable (non- <ph id=\"ph2\">`const`</ph>) container of any kind that supports <ph id=\"ph3\">`end()`</ph> and <ph id=\"ph4\">`cend()`</ph>.","pos":[15568,15696],"source":" In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `end()` and `cend()`."},{"pos":[15854,15910],"content":"The value returned by <ph id=\"ph1\">`cend`</ph> should not be dereferenced.","source":"The value returned by `cend` should not be dereferenced."},{"pos":[15947,15957],"content":"set::clear"},{"content":"Erases all the elements of a set.","pos":[15961,15994]},{"content":"Example","pos":[16033,16040]},{"pos":[16615,16634],"content":"set::const_iterator"},{"pos":[16638,16729],"content":"A type that provides a bidirectional iterator that can read a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element in the set.","source":"A type that provides a bidirectional iterator that can read a **const** element in the set."},{"content":"Remarks","pos":[16803,16810]},{"pos":[16814,16887],"content":"A type <ph id=\"ph1\">`const_iterator`</ph> cannot be used to modify the value of an element.","source":"A type `const_iterator` cannot be used to modify the value of an element."},{"content":"Example","pos":[16897,16904]},{"pos":[16909,16992],"content":"See the example for <bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#set__begin)</ept> for an example that uses <ph id=\"ph1\">`const_iterator`</ph>.","source":"See the example for [begin](#set__begin) for an example that uses `const_iterator`."},{"pos":[17037,17055],"content":"set::const_pointer"},{"pos":[17059,17122],"content":"A type that provides a pointer to a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element in a set.","source":"A type that provides a pointer to a **const** element in a set."},{"content":"Remarks","pos":[17211,17218]},{"pos":[17222,17294],"content":"A type <ph id=\"ph1\">`const_pointer`</ph> cannot be used to modify the value of an element.","source":"A type `const_pointer` cannot be used to modify the value of an element."},{"pos":[17301,17417],"content":"In most cases, a <bpt id=\"p1\">[</bpt>const_iterator<ept id=\"p1\">](#set__const_iterator)</ept> should be used to access the elements in a const set object.","source":"In most cases, a [const_iterator](#set__const_iterator) should be used to access the elements in a const set object."},{"pos":[17464,17484],"content":"set::const_reference"},{"pos":[17488,17608],"content":"A type that provides a reference to a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element stored in a set for reading and performing <bpt id=\"p2\">**</bpt>const<ept id=\"p2\">**</ept> operations.","source":"A type that provides a reference to a **const** element stored in a set for reading and performing **const** operations."},{"content":"Example","pos":[17701,17708]},{"pos":[18397,18424],"content":"set::const_reverse_iterator"},{"pos":[18428,18521],"content":"A type that provides a bidirectional iterator that can read any <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> element in the set.","source":"A type that provides a bidirectional iterator that can read any **const** element in the set."},{"content":"Remarks","pos":[18618,18625]},{"pos":[18629,18748],"content":"A type <ph id=\"ph1\">`const_reverse_iterator`</ph> cannot modify the value of an element and is use to iterate through the set in reverse.","source":"A type `const_reverse_iterator` cannot modify the value of an element and is use to iterate through the set in reverse."},{"content":"Example","pos":[18758,18765]},{"pos":[18770,18879],"content":"See the example for <bpt id=\"p1\">[</bpt>rend<ept id=\"p1\">](#set__rend)</ept> for an example of how to declare and use the <ph id=\"ph1\">`const_reverse_iterator`</ph>.","source":"See the example for [rend](#set__rend) for an example of how to declare and use the `const_reverse_iterator`."},{"pos":[18916,18926],"content":"set::count"},{"content":"Returns the number of elements in a set whose key matches a parameter-specified key.","pos":[18930,19014]},{"content":"Parameters","pos":[19078,19088]},{"content":"The key of the elements to be matched from the set.","pos":[19102,19153]},{"content":"Return Value","pos":[19163,19175]},{"content":"1 if the set contains an element whose sort key matches the parameter key.","pos":[19179,19253]},{"content":"0 if the set does not contain an element with a matching key.","pos":[19254,19315]},{"content":"Remarks","pos":[19325,19332]},{"content":"The member function returns the number of elements in the following range:","pos":[19336,19410]},{"pos":[19417,19473],"content":"[ <ph id=\"ph1\">`lower_bound`</ph> (_ <bpt id=\"p1\">*</bpt>Key<ept id=\"p1\">*</ept> ), <ph id=\"ph2\">`upper_bound`</ph> (<ph id=\"ph3\">\\_</ph> <bpt id=\"p2\">*</bpt>Key<ept id=\"p2\">*</ept> ) ).","source":"[ `lower_bound` (_ *Key* ), `upper_bound` (\\_ *Key* ) )."},{"content":"Example","pos":[19483,19490]},{"content":"The following example demonstrates the use of the set::count member function.","pos":[19495,19572]},{"pos":[20311,20323],"content":"set::crbegin"},{"content":"Returns a const iterator addressing the first element in a reversed set.","pos":[20327,20399]},{"content":"Return Value","pos":[20464,20476]},{"content":"A const reverse bidirectional iterator addressing the first element in a reversed set or addressing what had been the last element in the unreversed set.","pos":[20480,20633]},{"content":"Remarks","pos":[20643,20650]},{"pos":[20664,20740],"content":"is used with a reversed set just as <bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#set__begin)</ept> is used with a set.","source":" is used with a reversed set just as [begin](#set__begin) is used with a set."},{"pos":[20747,20817],"content":"With the return value of <ph id=\"ph1\">`crbegin`</ph>, the set object cannot be modified.","source":"With the return value of `crbegin`, the set object cannot be modified."},{"content":"Example","pos":[20827,20834]},{"pos":[21366,21376],"content":"set::crend"},{"content":"Returns a const iterator that addresses the location succeeding the last element in a reversed set.","pos":[21380,21479]},{"content":"Return Value","pos":[21542,21554]},{"content":"A const reverse bidirectional iterator that addresses the location succeeding the last element in a reversed set (the location that had preceded the first element in the unreversed set).","pos":[21558,21744]},{"content":"Remarks","pos":[21754,21761]},{"pos":[21773,21845],"content":"is used with a reversed set just as <bpt id=\"p1\">[</bpt>end<ept id=\"p1\">](#set__end)</ept> is used with a set.","source":" is used with a reversed set just as [end](#set__end) is used with a set."},{"content":"With the return value of <ph id=\"ph1\">`crend`</ph>, the set object cannot be modified.","pos":[21852,21920],"source":"With the return value of `crend`, the set object cannot be modified."},{"content":"The value returned by <ph id=\"ph1\">`crend`</ph> should not be dereferenced.","pos":[21921,21978],"source":" The value returned by `crend` should not be dereferenced."},{"pos":[21993,22074],"content":"can be used to test to whether a reverse iterator has reached the end of its set."},{"content":"Example","pos":[22084,22091]},{"pos":[22575,22595],"content":"set::difference_type"},{"content":"A signed integer type that can be used to represent the number of elements of a set in a range between elements pointed to by iterators.","pos":[22599,22735]},{"content":"Remarks","pos":[22828,22835]},{"content":"The <ph id=\"ph1\">`difference_type`</ph> is the type returned when subtracting or incrementing through iterators of the container.","pos":[22839,22950],"source":"The `difference_type` is the type returned when subtracting or incrementing through iterators of the container."},{"content":"The <ph id=\"ph1\">`difference_type`</ph> is typically used to represent the number of elements in the range <bpt id=\"p1\">*</bpt>[ first,  last)<ept id=\"p1\">*</ept> between the iterators <ph id=\"ph2\">` first`</ph> and <ph id=\"ph3\">` last`</ph>, includes the element pointed to by <ph id=\"ph4\">` first`</ph> and the range of elements up to, but not including, the element pointed to by <ph id=\"ph5\">` last`</ph>.","pos":[22951,23232],"source":" The `difference_type` is typically used to represent the number of elements in the range *[ first,  last)* between the iterators ` first` and ` last`, includes the element pointed to by ` first` and the range of elements up to, but not including, the element pointed to by ` last`."},{"pos":[23239,23587],"content":"Note that although <ph id=\"ph1\">`difference_type`</ph> is available for all iterators that satisfy the requirements of an input iterator, which includes the class of bidirectional iterators supported by reversible containers such as set, subtraction between iterators is only supported by random-access iterators provided by a random-access container such as vector.","source":"Note that although `difference_type` is available for all iterators that satisfy the requirements of an input iterator, which includes the class of bidirectional iterators supported by reversible containers such as set, subtraction between iterators is only supported by random-access iterators provided by a random-access container such as vector."},{"content":"Example","pos":[23597,23604]},{"pos":[25169,25181],"content":"set::emplace"},{"content":"Inserts an element constructed in place (no copy or move operations are performed).","pos":[25185,25268]},{"content":"Parameters","pos":[25373,25383]},{"content":"Parameter","pos":[25404,25413]},{"content":"Description","pos":[25414,25425]},{"content":"The arguments forwarded to construct an element to be inserted into the set unless it already contains an element whose value is equivalently ordered.","pos":[25437,25587]},{"content":"Return Value","pos":[25598,25610]},{"content":"A <bpt id=\"p1\">[</bpt>pair<ept id=\"p1\">](../standard-library/pair-structure.md)</ept> whose bool component returns true if an insertion was made, and false if the map already contained an element whose value had an equivalent value in the ordering.","pos":[25614,25824],"source":"A [pair](../standard-library/pair-structure.md) whose bool component returns true if an insertion was made, and false if the map already contained an element whose value had an equivalent value in the ordering."},{"content":"The iterator component of the return value pair returns the address where a new element was inserted (if the bool component is true) or where the element was already located (if the bool component is false).","pos":[25825,26032]},{"content":"Remarks","pos":[26042,26049]},{"content":"No iterators or references are invalidated by this function.","pos":[26053,26113]},{"content":"During emplacement, if an exception is thrown, the container's state is not modified.","pos":[26120,26205]},{"content":"Example","pos":[26215,26222]},{"pos":[27431,27448],"content":"set::emplace_hint"},{"content":"Inserts an element constructed in place (no copy or move operations are performed), with a placement hint.","pos":[27452,27558]},{"content":"Parameters","pos":[27682,27692]},{"content":"Parameter","pos":[27713,27722]},{"content":"Description","pos":[27723,27734]},{"content":"The arguments forwarded to construct an element to be inserted into the set unless the set already contains that element or, more generally, unless it already contains an element whose value is equivalently ordered.","pos":[27746,27961]},{"content":"The place to start searching for the correct point of insertion.","pos":[27974,28038]},{"content":"(If that point immediately precedes <ph id=\"ph1\">`where`</ph>, insertion can occur in amortized constant time instead of logarithmic time.)","pos":[28039,28160],"source":" (If that point immediately precedes `where`, insertion can occur in amortized constant time instead of logarithmic time.)"},{"content":"Return Value","pos":[28171,28183]},{"content":"An iterator to the newly inserted element.","pos":[28187,28229]},{"content":"If the insertion failed because the element already exists, returns an iterator to the existing element.","pos":[28236,28340]},{"content":"Remarks","pos":[28350,28357]},{"content":"No iterators or references are invalidated by this function.","pos":[28361,28421]},{"content":"During emplacement, if an exception is thrown, the container's state is not modified.","pos":[28428,28513]},{"content":"Example","pos":[28523,28530]},{"pos":[29394,29404],"content":"set::empty"},{"content":"Tests if a set is empty.","pos":[29408,29432]},{"content":"Return Value","pos":[29477,29489]},{"pos":[29493,29556],"content":"<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the set is empty; <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> if the set is nonempty.","source":"**true** if the set is empty; **false** if the set is nonempty."},{"content":"Example","pos":[29566,29573]},{"pos":[30150,30158],"content":"set::end"},{"content":"Returns the past-the-end iterator.","pos":[30162,30196]},{"content":"Return Value","pos":[30270,30282]},{"content":"The past-the-end iterator.","pos":[30286,30312]},{"content":"If the set is empty, then <ph id=\"ph1\">`set::end() == set::begin()`</ph>.","pos":[30313,30368],"source":" If the set is empty, then `set::end() == set::begin()`."},{"content":"Remarks","pos":[30378,30385]},{"pos":[30389,30463],"content":"<bpt id=\"p1\">**</bpt>end<ept id=\"p1\">**</ept> is used to test whether an iterator has passed the end of its set.","source":"**end** is used to test whether an iterator has passed the end of its set."},{"pos":[30470,30527],"content":"The value returned by <bpt id=\"p1\">**</bpt>end<ept id=\"p1\">**</ept> should not be dereferenced.","source":"The value returned by **end** should not be dereferenced."},{"pos":[30534,30582],"content":"For a code example, see <bpt id=\"p1\">[</bpt>set::find<ept id=\"p1\">](#set__find)</ept>.","source":"For a code example, see [set::find](#set__find)."},{"pos":[30625,30641],"content":"set::equal_range"},{"content":"Returns a pair of iterators respectively to the first element in a set with a key that is greater than or equal to a specified key and to the first element in the set with a key that is greater than the key.","pos":[30645,30852]},{"content":"Parameters","pos":[31008,31018]},{"content":"The argument key to be compared with the sort key of an element from the set being searched.","pos":[31032,31124]},{"content":"Return Value","pos":[31134,31146]},{"pos":[31150,31303],"content":"A pair of iterators where the first is the <bpt id=\"p1\">[</bpt>lower_bound<ept id=\"p1\">](#set__lower_bound)</ept> of the key and the second is the <bpt id=\"p2\">[</bpt>upper_bound<ept id=\"p2\">](#set__upper_bound)</ept> of the key.","source":"A pair of iterators where the first is the [lower_bound](#set__lower_bound) of the key and the second is the [upper_bound](#set__upper_bound) of the key."},{"content":"To access the first iterator of a pair <ph id=\"ph1\">`pr`</ph> returned by the member function, use <ph id=\"ph2\">`pr`</ph>.","pos":[31310,31396],"source":"To access the first iterator of a pair `pr` returned by the member function, use `pr`."},{"content":"<bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>, and to dereference the lower bound iterator, use <ph id=\"ph1\">\\*</ph>( <ph id=\"ph2\">`pr`</ph>.","pos":[31397,31466],"source":"**first**, and to dereference the lower bound iterator, use \\*( `pr`."},{"content":"<bpt id=\"p1\">**</bpt>first<ept id=\"p1\">**</ept>).","pos":[31467,31478],"source":"**first**)."},{"content":"To access the second iterator of a pair <ph id=\"ph1\">`pr`</ph> returned by the member function, use <ph id=\"ph2\">`pr`</ph>.","pos":[31479,31566],"source":" To access the second iterator of a pair `pr` returned by the member function, use `pr`."},{"content":"<bpt id=\"p1\">**</bpt>second<ept id=\"p1\">**</ept>, and to dereference the upper bound iterator, use <ph id=\"ph1\">\\*</ph>( <ph id=\"ph2\">`pr`</ph>.","pos":[31567,31637],"source":"**second**, and to dereference the upper bound iterator, use \\*( `pr`."},{"content":"<bpt id=\"p1\">**</bpt>second<ept id=\"p1\">**</ept>).","pos":[31638,31650],"source":"**second**)."},{"content":"Example","pos":[31660,31667]},{"pos":[33493,33503],"content":"set::erase"},{"content":"Removes an element or a range of elements in a set from specified positions or removes elements that match a specified key.","pos":[33507,33630]},{"content":"Parameters","pos":[33813,33823]},{"content":"Position of the element to be removed.","pos":[33838,33876]},{"content":"Position of the first element to be removed.","pos":[33894,33938]},{"content":"Position just beyond the last element to be removed.","pos":[33955,34007]},{"content":"The key value of the elements to be removed.","pos":[34023,34067]},{"content":"Return Value","pos":[34077,34089]},{"content":"For the first two member functions, a bidirectional iterator that designates the first element remaining beyond any elements removed, or an element that is the end of the set if no such element exists.","pos":[34093,34294]},{"content":"For the third member function, returns the number of elements that have been removed from the set.","pos":[34301,34399]},{"content":"Remarks","pos":[34409,34416]},{"content":"Example","pos":[34426,34433]},{"pos":[36712,36721],"content":"set::find"},{"content":"Returns an iterator that refers to the location of an element in a set that has a key equivalent to a specified key.","pos":[36725,36841]},{"content":"Parameters","pos":[36943,36953]},{"content":"The key value to be matched by the sort key of an element from the set being searched.","pos":[36966,37052]},{"content":"Return Value","pos":[37062,37074]},{"pos":[37078,37258],"content":"An iterator that refers to the location of an element with a specified key, or the location succeeding the last element in the set ( <ph id=\"ph1\">`set::end()`</ph>) if no match is found for the key.","source":"An iterator that refers to the location of an element with a specified key, or the location succeeding the last element in the set ( `set::end()`) if no match is found for the key."},{"content":"Remarks","pos":[37268,37275]},{"pos":[37279,37496],"content":"The member function returns an iterator that refers to an element in the set whose key is equivalent to the argument <ph id=\"ph1\">`key`</ph> under a binary predicate that induces an ordering based on a less than comparability relation.","source":"The member function returns an iterator that refers to an element in the set whose key is equivalent to the argument `key` under a binary predicate that induces an ordering based on a less than comparability relation."},{"content":"If the return value of <bpt id=\"p1\">**</bpt>find<ept id=\"p1\">**</ept> is assigned to a <bpt id=\"p2\">**</bpt>const_iterator<ept id=\"p2\">**</ept>, the set object cannot be modified.","pos":[37503,37606],"source":"If the return value of **find** is assigned to a **const_iterator**, the set object cannot be modified."},{"content":"If the return value of <bpt id=\"p1\">**</bpt>find<ept id=\"p1\">**</ept> is assigned to an <bpt id=\"p2\">**</bpt>iterator<ept id=\"p2\">**</ept>, the set object can be modified","pos":[37607,37701],"source":" If the return value of **find** is assigned to an **iterator**, the set object can be modified"},{"content":"Example","pos":[37711,37718]},{"pos":[39151,39169],"content":"set::get_allocator"},{"content":"Returns a copy of the allocator object used to construct the set.","pos":[39173,39238]},{"content":"Return Value","pos":[39301,39313]},{"pos":[39317,39409],"content":"The allocator used by the set to manage memory, which is the template parameter <ph id=\"ph1\">`Allocator`</ph>.","source":"The allocator used by the set to manage memory, which is the template parameter `Allocator`."},{"pos":[39416,39536],"content":"For more information on <ph id=\"ph1\">`Allocator`</ph>, see the Remarks section of the <bpt id=\"p1\">[</bpt>set Class<ept id=\"p1\">](../standard-library/set-class.md)</ept> topic.","source":"For more information on `Allocator`, see the Remarks section of the [set Class](../standard-library/set-class.md) topic."},{"content":"Remarks","pos":[39546,39553]},{"content":"Allocators for the set class specify how the class manages storage.","pos":[39557,39624]},{"content":"The default allocators supplied with STL container classes is sufficient for most programming needs.","pos":[39625,39725]},{"content":"Writing and using your own allocator class is an advanced C++ topic.","pos":[39726,39794]},{"content":"Example","pos":[39804,39811]},{"pos":[41334,41345],"content":"set::insert"},{"content":"Inserts an element or a range of elements into a set.","pos":[41349,41402]},{"content":"Parameters","pos":[42086,42096]},{"content":"Parameter","pos":[42117,42126]},{"content":"Description","pos":[42127,42138]},{"content":"The value of an element to be inserted into the set unless it already contains an element whose value is equivalently ordered.","pos":[42149,42275]},{"content":"The place to start searching for the correct point of insertion.","pos":[42288,42352]},{"content":"(If that point immediately precedes <ph id=\"ph1\">`Where`</ph>, insertion can occur in amortized constant time instead of logarithmic time.)","pos":[42353,42474],"source":" (If that point immediately precedes `Where`, insertion can occur in amortized constant time instead of logarithmic time.)"},{"pos":[42487,42693],"content":"Template parameter that specifies the argument type that the set can use to construct an element of <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](../standard-library/map-class.md#map__value_type)</ept>, and perfect-forwards <ph id=\"ph1\">`Val`</ph> as an argument.","source":"Template parameter that specifies the argument type that the set can use to construct an element of [value_type](../standard-library/map-class.md#map__value_type), and perfect-forwards `Val` as an argument."},{"content":"The position of the first element to be copied.","pos":[42706,42753]},{"content":"The position just beyond the last element to be copied.","pos":[42765,42820]},{"pos":[42841,43104],"content":"Template function argument that meets the requirements of an <bpt id=\"p1\">[</bpt>input iterator<ept id=\"p1\">](../standard-library/input-iterator-tag-struct.md)</ept> that points to elements of a type that can be used to construct <bpt id=\"p2\">[</bpt>value_type<ept id=\"p2\">](../standard-library/map-class.md#map__value_type)</ept> objects.","source":"Template function argument that meets the requirements of an [input iterator](../standard-library/input-iterator-tag-struct.md) that points to elements of a type that can be used to construct [value_type](../standard-library/map-class.md#map__value_type) objects."},{"pos":[43117,43213],"content":"The <bpt id=\"p1\">[</bpt>initializer_list<ept id=\"p1\">](../standard-library/initializer-list.md)</ept> from which to copy the elements.","source":"The [initializer_list](../standard-library/initializer-list.md) from which to copy the elements."},{"content":"Return Value","pos":[43224,43236]},{"content":"The single-element member functions, (1) and (2), return a <bpt id=\"p1\">[</bpt>pair<ept id=\"p1\">](../standard-library/pair-structure.md)</ept> whose <ph id=\"ph1\">`bool`</ph> component is true if an insertion was made, and false if the set already contained an element of equivalent value in the ordering.","pos":[43240,43488],"source":"The single-element member functions, (1) and (2), return a [pair](../standard-library/pair-structure.md) whose `bool` component is true if an insertion was made, and false if the set already contained an element of equivalent value in the ordering."},{"content":"The iterator component of the return-value pair points to the newly inserted element if the <ph id=\"ph1\">`bool`</ph> component is true, or to the existing element if the <ph id=\"ph2\">`bool`</ph> component is false.","pos":[43489,43667],"source":" The iterator component of the return-value pair points to the newly inserted element if the `bool` component is true, or to the existing element if the `bool` component is false."},{"content":"The single-element-with-hint member functions, (3) and (4), return an iterator that points to the position where the new element was inserted into the set or, if an element with an equivalent key already exists, to the existing element.","pos":[43674,43910]},{"content":"Remarks","pos":[43920,43927]},{"content":"No iterators, pointers, or references are invalidated by this function.","pos":[43931,44002]},{"content":"During the insertion of just one element, if an exception is thrown, the container's state is not modified.","pos":[44009,44116]},{"content":"During the insertion of multiple elements, if an exception is thrown, the container is left in an unspecified but valid state.","pos":[44117,44243]},{"content":"To access the iterator component of a <ph id=\"ph1\">`pair``pr`</ph> that's returned by the single-element member functions, use <ph id=\"ph2\">`pr.first`</ph>; to dereference the iterator within the returned pair, use <ph id=\"ph3\">`*pr.first`</ph>, giving you an element.","pos":[44250,44464],"source":"To access the iterator component of a `pair``pr` that's returned by the single-element member functions, use `pr.first`; to dereference the iterator within the returned pair, use `*pr.first`, giving you an element."},{"content":"To access the <ph id=\"ph1\">`bool`</ph> component, use <ph id=\"ph2\">`pr.second`</ph>.","pos":[44465,44513],"source":" To access the `bool` component, use `pr.second`."},{"content":"For an example, see the sample code later in this article.","pos":[44514,44572]},{"pos":[44579,44758],"content":"The <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](../standard-library/map-class.md#map__value_type)</ept> of a container is a typedef that belongs to the container, and, for set, <ph id=\"ph1\">`set&lt;V&gt;::value_type`</ph> is type <ph id=\"ph2\">`const V`</ph>.","source":"The [value_type](../standard-library/map-class.md#map__value_type) of a container is a typedef that belongs to the container, and, for set, `set<V>::value_type` is type `const V`."},{"content":"The range member function (5) inserts the sequence of element values into a set that corresponds to each element addressed by an iterator in the range <ph id=\"ph1\">`[First, Last)`</ph>; therefore, <ph id=\"ph2\">`Last`</ph> does not get inserted.","pos":[44765,44973],"source":"The range member function (5) inserts the sequence of element values into a set that corresponds to each element addressed by an iterator in the range `[First, Last)`; therefore, `Last` does not get inserted."},{"content":"The container member function <ph id=\"ph1\">`end()`</ph> refers to the position just after the last element in the container—for example, the statement <ph id=\"ph2\">`s.insert(v.begin(), v.end());`</ph> attempts to insert all elements of <ph id=\"ph3\">`v`</ph> into <ph id=\"ph4\">`s`</ph>.","pos":[44974,45187],"source":" The container member function `end()` refers to the position just after the last element in the container—for example, the statement `s.insert(v.begin(), v.end());` attempts to insert all elements of `v` into `s`."},{"content":"Only elements that have unique values in the range are inserted; duplicates are ignored.","pos":[45188,45276]},{"content":"To observe which elements are rejected, use the single-element versions of <ph id=\"ph1\">`insert`</ph>.","pos":[45277,45361],"source":" To observe which elements are rejected, use the single-element versions of `insert`."},{"pos":[45368,45507],"content":"The initializer list member function (6) uses an <bpt id=\"p1\">[</bpt>initializer_list<ept id=\"p1\">](../standard-library/initializer-list.md)</ept> to copy elements into the set.","source":"The initializer list member function (6) uses an [initializer_list](../standard-library/initializer-list.md) to copy elements into the set."},{"pos":[45514,45691],"content":"For insertion of an element constructed in place—that is, no copy or move operations are performed—see <bpt id=\"p1\">[</bpt>set::emplace<ept id=\"p1\">](#set__emplace)</ept> and <bpt id=\"p2\">[</bpt>set::emplace_hint<ept id=\"p2\">](#set__emplace_hint)</ept>.","source":"For insertion of an element constructed in place—that is, no copy or move operations are performed—see [set::emplace](#set__emplace) and [set::emplace_hint](#set__emplace_hint)."},{"content":"Example","pos":[45701,45708]},{"pos":[48197,48210],"content":"set::iterator"},{"pos":[48214,48364],"content":"A type that provides a constant <bpt id=\"p1\">[</bpt>bidirectional iterator<ept id=\"p1\">](../standard-library/bidirectional-iterator-tag-struct.md)</ept> that can read any element in a set.","source":"A type that provides a constant [bidirectional iterator](../standard-library/bidirectional-iterator-tag-struct.md) that can read any element in a set."},{"content":"Example","pos":[48432,48439]},{"pos":[48444,48542],"content":"See the example for <bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#set__begin)</ept> for an example of how to declare and use an <bpt id=\"p2\">**</bpt>iterator<ept id=\"p2\">**</ept>.","source":"See the example for [begin](#set__begin) for an example of how to declare and use an **iterator**."},{"pos":[48582,48595],"content":"set::key_comp"},{"content":"Retrieves a copy of the comparison object used to order keys in a set.","pos":[48599,48669]},{"content":"Return Value","pos":[48724,48736]},{"pos":[48740,48848],"content":"Returns the function object that a set uses to order its elements, which is the template parameter <ph id=\"ph1\">`Traits`</ph>.","source":"Returns the function object that a set uses to order its elements, which is the template parameter `Traits`."},{"pos":[48855,48948],"content":"For more information on <ph id=\"ph1\">`Traits`</ph> see the <bpt id=\"p1\">[</bpt>set Class<ept id=\"p1\">](../standard-library/set-class.md)</ept> topic.","source":"For more information on `Traits` see the [set Class](../standard-library/set-class.md) topic."},{"content":"Remarks","pos":[48958,48965]},{"content":"The stored object defines the member function:","pos":[48969,49015]},{"pos":[49022,49089],"content":"<bpt id=\"p1\">**</bpt>bool operator()<ept id=\"p1\">**</ept>( <bpt id=\"p2\">**</bpt>const Key&amp;<ept id=\"p2\">**</ept><ph id=\"ph1\">`_xVal`</ph>, <bpt id=\"p3\">**</bpt>const Key&amp;<ept id=\"p3\">**</ept><ph id=\"ph2\">`_yVal`</ph>);","source":"**bool operator()**( **const Key&**`_xVal`, **const Key&**`_yVal`);"},{"pos":[49096,49185],"content":"which returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`_xVal`</ph> precedes and is not equal to <ph id=\"ph2\">`_yVal`</ph> in the sort order.","source":"which returns **true** if `_xVal` precedes and is not equal to `_yVal` in the sort order."},{"content":"Note that both <bpt id=\"p1\">[</bpt>key_compare<ept id=\"p1\">](#set__key_compare)</ept> and <bpt id=\"p2\">[</bpt>value_compare<ept id=\"p2\">](#set__value_compare)</ept> are synonyms for the template parameter <bpt id=\"p3\">**</bpt>Traits<ept id=\"p3\">**</ept>.","pos":[49192,49332],"source":"Note that both [key_compare](#set__key_compare) and [value_compare](#set__value_compare) are synonyms for the template parameter **Traits**."},{"content":"Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.","pos":[49333,49494]},{"content":"Example","pos":[49504,49511]},{"pos":[50822,50838],"content":"set::key_compare"},{"content":"A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the set.","pos":[50842,50971]},{"content":"Remarks","pos":[51026,51033]},{"pos":[51051,51100],"content":"is a synonym for the template parameter <ph id=\"ph1\">`Traits`</ph>.","source":" is a synonym for the template parameter `Traits`."},{"pos":[51107,51200],"content":"For more information on <ph id=\"ph1\">`Traits`</ph> see the <bpt id=\"p1\">[</bpt>set Class<ept id=\"p1\">](../standard-library/set-class.md)</ept> topic.","source":"For more information on `Traits` see the [set Class](../standard-library/set-class.md) topic."},{"content":"Note that both <ph id=\"ph1\">`key_compare`</ph> and <bpt id=\"p1\">[</bpt>value_compare<ept id=\"p1\">](#set__value_compare)</ept> are synonyms for the template parameter <bpt id=\"p2\">**</bpt>Traits<ept id=\"p2\">**</ept>.","pos":[51207,51328],"source":"Note that both `key_compare` and [value_compare](#set__value_compare) are synonyms for the template parameter **Traits**."},{"content":"Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.","pos":[51329,51490]},{"content":"Example","pos":[51500,51507]},{"pos":[51512,51614],"content":"See the example for <bpt id=\"p1\">[</bpt>key_comp<ept id=\"p1\">](#set__key_comp)</ept> for an example of how to declare and use <ph id=\"ph1\">`key_compare`</ph>.","source":"See the example for [key_comp](#set__key_comp) for an example of how to declare and use `key_compare`."},{"pos":[51654,51667],"content":"set::key_type"},{"content":"A type that describes an object stored as an element of a set in its capacity as sort key.","pos":[51671,51761]},{"content":"Remarks","pos":[51810,51817]},{"pos":[51832,51878],"content":"is a synonym for the template parameter <ph id=\"ph1\">`Key`</ph>.","source":" is a synonym for the template parameter `Key`."},{"pos":[51885,51999],"content":"For more information on <ph id=\"ph1\">`Key`</ph>, see the Remarks section of the <bpt id=\"p1\">[</bpt>set Class<ept id=\"p1\">](../standard-library/set-class.md)</ept> topic.","source":"For more information on `Key`, see the Remarks section of the [set Class](../standard-library/set-class.md) topic."},{"content":"Note that both <ph id=\"ph1\">`key_type`</ph> and <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#set__value_type)</ept> are synonyms for the template parameter <bpt id=\"p2\">**</bpt>Key<ept id=\"p2\">**</ept>.","pos":[52006,52115],"source":"Note that both `key_type` and [value_type](#set__value_type) are synonyms for the template parameter **Key**."},{"content":"Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.","pos":[52116,52277]},{"content":"Example","pos":[52287,52294]},{"pos":[52299,52402],"content":"See the example for <bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](#set__value_type)</ept> for an example of how to declare and use <ph id=\"ph1\">`key_type`</ph>.","source":"See the example for [value_type](#set__value_type) for an example of how to declare and use `key_type`."},{"pos":[52445,52461],"content":"set::lower_bound"},{"content":"Returns an iterator to the first element in a set with a key that is equal to or greater than a specified key.","pos":[52465,52575]},{"content":"Parameters","pos":[52689,52699]},{"content":"The argument key to be compared with the sort key of an element from the set being searched.","pos":[52713,52805]},{"content":"Return Value","pos":[52815,52827]},{"pos":[52831,53083],"content":"An iterator or <ph id=\"ph1\">`const_iterator`</ph> that addresses the location of an element in a set that with a key that is equal to or greater than the argument key or that addresses the location succeeding the last element in the set if no match is found for the key.","source":"An iterator or `const_iterator` that addresses the location of an element in a set that with a key that is equal to or greater than the argument key or that addresses the location succeeding the last element in the set if no match is found for the key."},{"content":"Example","pos":[53093,53100]},{"pos":[54507,54520],"content":"set::max_size"},{"content":"Returns the maximum length of the set.","pos":[54524,54562]},{"content":"Return Value","pos":[54615,54627]},{"content":"The maximum possible length of the set.","pos":[54631,54670]},{"content":"Example","pos":[54680,54687]},{"pos":[55062,55076],"content":"set::operator="},{"pos":[55080,55150],"content":"Replaces the elements of this <ph id=\"ph1\">`set`</ph> using elements from another <ph id=\"ph2\">`set`</ph>.","source":"Replaces the elements of this `set` using elements from another `set`."},{"content":"Parameters","pos":[55239,55249]},{"content":"Parameter","pos":[55270,55279]},{"content":"Description","pos":[55280,55291]},{"pos":[55305,55367],"content":"The <ph id=\"ph1\">`set`</ph> providing new elements to be assigned to this <ph id=\"ph2\">`set`</ph>.","source":"The `set` providing new elements to be assigned to this `set`."},{"content":"Remarks","pos":[55378,55385]},{"pos":[55389,55551],"content":"The first version of <ph id=\"ph1\">`operator=`</ph> uses an <bpt id=\"p1\">[</bpt>lvalue reference<ept id=\"p1\">](../cpp/lvalue-reference-declarator-amp.md)</ept> for <ph id=\"ph2\">` right`</ph>, to copy elements from <ph id=\"ph3\">` right`</ph> to this <ph id=\"ph4\">`set`</ph>.","source":"The first version of `operator=` uses an [lvalue reference](../cpp/lvalue-reference-declarator-amp.md) for ` right`, to copy elements from ` right` to this `set`."},{"content":"The second version uses an <bpt id=\"p1\">[</bpt>rvalue reference<ept id=\"p1\">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept> for  right.","pos":[55558,55662],"source":"The second version uses an [rvalue reference](../cpp/rvalue-reference-declarator-amp-amp.md) for  right."},{"content":"It moves elements from <ph id=\"ph1\">` right`</ph> to this <ph id=\"ph2\">`set`</ph>.","pos":[55663,55709],"source":" It moves elements from ` right` to this `set`."},{"pos":[55716,55795],"content":"Any elements in this <ph id=\"ph1\">`set`</ph> before the operator function executes are discarded.","source":"Any elements in this `set` before the operator function executes are discarded."},{"content":"Example","pos":[55805,55812]},{"pos":[56554,56566],"content":"set::pointer"},{"content":"A type that provides a pointer to an element in a set.","pos":[56570,56624]},{"content":"Remarks","pos":[56701,56708]},{"pos":[56712,56777],"content":"A type <bpt id=\"p1\">**</bpt>pointer<ept id=\"p1\">**</ept> can be used to modify the value of an element.","source":"A type **pointer** can be used to modify the value of an element."},{"pos":[56784,56883],"content":"In most cases, an <bpt id=\"p1\">[</bpt>iterator<ept id=\"p1\">](#set__iterator)</ept> should be used to access the elements in a set object.","source":"In most cases, an [iterator](#set__iterator) should be used to access the elements in a set object."},{"pos":[56921,56932],"content":"set::rbegin"},{"content":"Returns an iterator addressing the first element in a reversed set.","pos":[56936,57003]},{"content":"Return Value","pos":[57095,57107]},{"content":"A reverse bidirectional iterator addressing the first element in a reversed set or addressing what had been the last element in the unreversed set.","pos":[57111,57258]},{"content":"Remarks","pos":[57268,57275]},{"pos":[57288,57364],"content":"is used with a reversed set just as <bpt id=\"p1\">[</bpt>begin<ept id=\"p1\">](#set__begin)</ept> is used with a set.","source":" is used with a reversed set just as [begin](#set__begin) is used with a set."},{"content":"If the return value of <ph id=\"ph1\">`rbegin`</ph> is assigned to a <ph id=\"ph2\">`const_reverse_iterator`</ph>, then the set object cannot be modified.","pos":[57371,57485],"source":"If the return value of `rbegin` is assigned to a `const_reverse_iterator`, then the set object cannot be modified."},{"content":"If the return value of <ph id=\"ph1\">`rbegin`</ph> is assigned to a <ph id=\"ph2\">`reverse_iterator`</ph>, then the set object can be modified.","pos":[57486,57591],"source":" If the return value of `rbegin` is assigned to a `reverse_iterator`, then the set object can be modified."},{"pos":[57607,57654],"content":"can be used to iterate through a set backwards."},{"content":"Example","pos":[57664,57671]},{"pos":[59133,59147],"content":"set::reference"},{"content":"A type that provides a reference to an element stored in a set.","pos":[59151,59214]},{"content":"Example","pos":[59295,59302]},{"pos":[59812,59821],"content":"set::rend"},{"content":"Returns an iterator that addresses the location succeeding the last element in a reversed set.","pos":[59825,59919]},{"content":"Return Value","pos":[60007,60019]},{"content":"A reverse bidirectional iterator that addresses the location succeeding the last element in a reversed set (the location that had preceded the first element in the unreversed set).","pos":[60023,60203]},{"content":"Remarks","pos":[60213,60220]},{"pos":[60231,60303],"content":"is used with a reversed set just as <bpt id=\"p1\">[</bpt>end<ept id=\"p1\">](#set__end)</ept> is used with a set.","source":" is used with a reversed set just as [end](#set__end) is used with a set."},{"content":"If the return value of <ph id=\"ph1\">`rend`</ph> is assigned to a <ph id=\"ph2\">`const_reverse_iterator`</ph>, then the set object cannot be modified.","pos":[60310,60422],"source":"If the return value of `rend` is assigned to a `const_reverse_iterator`, then the set object cannot be modified."},{"content":"If the return value of <ph id=\"ph1\">`rend`</ph> is assigned to a <ph id=\"ph2\">`reverse_iterator`</ph>, then the set object can be modified.","pos":[60423,60526],"source":" If the return value of `rend` is assigned to a `reverse_iterator`, then the set object can be modified."},{"content":"The value returned by <ph id=\"ph1\">`rend`</ph> should not be dereferenced.","pos":[60527,60583],"source":" The value returned by `rend` should not be dereferenced."},{"pos":[60597,60678],"content":"can be used to test to whether a reverse iterator has reached the end of its set."},{"content":"Example","pos":[60688,60695]},{"pos":[62019,62040],"content":"set::reverse_iterator"},{"content":"A type that provides a bidirectional iterator that can read or modify an element in a reversed set.","pos":[62044,62143]},{"content":"Remarks","pos":[62228,62235]},{"pos":[62239,62310],"content":"A type <ph id=\"ph1\">`reverse_iterator`</ph> is use to iterate through the set in reverse.","source":"A type `reverse_iterator` is use to iterate through the set in reverse."},{"content":"Example","pos":[62320,62327]},{"pos":[62332,62435],"content":"See the example for <bpt id=\"p1\">[</bpt>rbegin<ept id=\"p1\">](#set__rbegin)</ept> for an example of how to declare and use <ph id=\"ph1\">`reverse_iterator`</ph>.","source":"See the example for [rbegin](#set__rbegin) for an example of how to declare and use `reverse_iterator`."},{"pos":[62470,62478],"content":"set::set"},{"content":"Constructs a set that is empty or that is a copy of all or part of some other set.","pos":[62482,62564]},{"content":"Parameters","pos":[63297,63307]},{"content":"Parameter","pos":[63328,63337]},{"content":"Description","pos":[63338,63349]},{"pos":[63359,63451],"content":"The storage allocator class to be used for this set object, which defaults to <bpt id=\"p1\">**</bpt>Allocator<ept id=\"p1\">**</ept>.","source":"The storage allocator class to be used for this set object, which defaults to **Allocator**."},{"pos":[63463,63577],"content":"The comparison function of type <ph id=\"ph1\">`const Traits`</ph> used to order the elements in the set, which defaults to <ph id=\"ph2\">`Compare`</ph>.","source":"The comparison function of type `const Traits` used to order the elements in the set, which defaults to `Compare`."},{"content":"The set of which the constructed set is to be a copy.","pos":[63589,63642]},{"content":"The position of the first element in the range of elements to be copied.","pos":[63655,63727]},{"content":"The position of the first element beyond the range of elements to be copied.","pos":[63739,63815]},{"content":"The initializer_list from which to copy the elements.","pos":[63828,63881]},{"content":"Remarks","pos":[63892,63899]},{"content":"All constructors store a type of allocator object that manages memory storage for the set and that can later be returned by calling <bpt id=\"p1\">[</bpt>get_allocator<ept id=\"p1\">](#set__get_allocator)</ept>.","pos":[63903,64072],"source":"All constructors store a type of allocator object that manages memory storage for the set and that can later be returned by calling [get_allocator](#set__get_allocator)."},{"content":"The allocator parameter is often omitted in the class declarations and preprocessing macros used to substitute alternative allocators.","pos":[64073,64207]},{"content":"All constructors initialize their sets.","pos":[64214,64253]},{"pos":[64260,64450],"content":"All constructors store a function object of type <bpt id=\"p1\">**</bpt>Traits<ept id=\"p1\">**</ept> that is used to establish an order among the keys of the set and that can later be returned by calling <bpt id=\"p2\">[</bpt>key_comp<ept id=\"p2\">](#set__key_comp)</ept>.","source":"All constructors store a function object of type **Traits** that is used to establish an order among the keys of the set and that can later be returned by calling [key_comp](#set__key_comp)."},{"content":"The first three constructors specify an empty initial set, the second specifying the type of comparison function ( <ph id=\"ph1\">`comp`</ph>) to be used in establishing the order of the elements and the third explicitly specifying the allocator type ( <ph id=\"ph2\">`al`</ph>) to be used.","pos":[64457,64707],"source":"The first three constructors specify an empty initial set, the second specifying the type of comparison function ( `comp`) to be used in establishing the order of the elements and the third explicitly specifying the allocator type ( `al`) to be used."},{"content":"The keyword <bpt id=\"p1\">**</bpt>explicit<ept id=\"p1\">**</ept> suppresses certain kinds of automatic type conversion.","pos":[64708,64787],"source":" The keyword **explicit** suppresses certain kinds of automatic type conversion."},{"pos":[64794,64853],"content":"The fourth constructor specifies a copy of the set <ph id=\"ph1\">`right`</ph>.","source":"The fourth constructor specifies a copy of the set `right`."},{"content":"The next three constructors use an initializer_list to specify the elements.","pos":[64860,64936]},{"pos":[64943,65127],"content":"The next three constructors copy the range [ <ph id=\"ph1\">`first`</ph>, <ph id=\"ph2\">`last`</ph>) of a set with increasing explicitness in specifying the type of comparison function of class <bpt id=\"p1\">**</bpt>Traits<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Allocator<ept id=\"p2\">**</ept>.","source":"The next three constructors copy the range [ `first`, `last`) of a set with increasing explicitness in specifying the type of comparison function of class **Traits** and **Allocator**."},{"pos":[65134,65203],"content":"The eighth constructor specifies a copy of the set by moving <ph id=\"ph1\">`right`</ph>.","source":"The eighth constructor specifies a copy of the set by moving `right`."},{"content":"Example","pos":[65213,65220]},{"pos":[68061,68070],"content":"set::size"},{"content":"Returns the number of elements in the set.","pos":[68074,68116]},{"content":"Return Value","pos":[68165,68177]},{"content":"The current length of the set.","pos":[68181,68211]},{"content":"Example","pos":[68221,68228]},{"pos":[68745,68759],"content":"set::size_type"},{"content":"An unsigned integer type that can represent the number of elements in a set.","pos":[68763,68839]},{"content":"Example","pos":[68920,68927]},{"pos":[68932,69011],"content":"See the example for <bpt id=\"p1\">[</bpt>size<ept id=\"p1\">](#set__size)</ept> for an example of how to declare and use","source":"See the example for [size](#set__size) for an example of how to declare and use "},{"pos":[69059,69068],"content":"set::swap"},{"content":"Exchanges the elements of two sets.","pos":[69072,69107]},{"content":"Parameters","pos":[69184,69194]},{"content":"The argument set providing the elements to be swapped with the target set.","pos":[69210,69284]},{"content":"Remarks","pos":[69294,69301]},{"content":"The member function invalidates no references, pointers, or iterators that designate elements in the two sets whose elements are being exchanged.","pos":[69305,69450]},{"content":"Example","pos":[69460,69467]},{"pos":[70702,70718],"content":"set::upper_bound"},{"content":"Returns an iterator to the first element in a set that with a key that is greater than a specified key.","pos":[70722,70825]},{"content":"Parameters","pos":[70939,70949]},{"content":"The argument key to be compared with the sort key of an element from the set being searched.","pos":[70963,71055]},{"content":"Return Value","pos":[71065,71077]},{"pos":[71081,71326],"content":"An <bpt id=\"p1\">**</bpt>iterator<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`const_iterator`</ph> that addresses the location of an element in a set that with a key that is greater than the argument key, or that addresses the location succeeding the last element in the set if no match is found for the key.","source":"An **iterator** or `const_iterator` that addresses the location of an element in a set that with a key that is greater than the argument key, or that addresses the location succeeding the last element in the set if no match is found for the key."},{"content":"Example","pos":[71336,71343]},{"pos":[72839,72854],"content":"set::value_comp"},{"content":"Retrieves a copy of the comparison object used to order element values in a set.","pos":[72858,72938]},{"content":"Return Value","pos":[72997,73009]},{"pos":[73013,73121],"content":"Returns the function object that a set uses to order its elements, which is the template parameter <ph id=\"ph1\">`Traits`</ph>.","source":"Returns the function object that a set uses to order its elements, which is the template parameter `Traits`."},{"pos":[73128,73221],"content":"For more information on <ph id=\"ph1\">`Traits`</ph> see the <bpt id=\"p1\">[</bpt>set Class<ept id=\"p1\">](../standard-library/set-class.md)</ept> topic.","source":"For more information on `Traits` see the [set Class](../standard-library/set-class.md) topic."},{"content":"Remarks","pos":[73231,73238]},{"content":"The stored object defines the member function:","pos":[73242,73288]},{"pos":[73295,73360],"content":"<bpt id=\"p1\">**</bpt>bool operator<ept id=\"p1\">**</ept>( <bpt id=\"p2\">**</bpt>const Key&amp;<ept id=\"p2\">**</ept><ph id=\"ph1\">`_xVal`</ph>, <bpt id=\"p3\">**</bpt>const Key&amp;<ept id=\"p3\">**</ept><ph id=\"ph2\">`_yVal`</ph>);","source":"**bool operator**( **const Key&**`_xVal`, **const Key&**`_yVal`);"},{"pos":[73367,73456],"content":"which returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if <ph id=\"ph1\">`_xVal`</ph> precedes and is not equal to <ph id=\"ph2\">`_yVal`</ph> in the sort order.","source":"which returns **true** if `_xVal` precedes and is not equal to `_yVal` in the sort order."},{"content":"Note that both <bpt id=\"p1\">[</bpt>value_compare<ept id=\"p1\">](#set__value_compare)</ept> and <bpt id=\"p2\">[</bpt>key_compare<ept id=\"p2\">](#set__key_compare)</ept> are synonyms for the template parameter <bpt id=\"p3\">**</bpt>Traits<ept id=\"p3\">**</ept>.","pos":[73463,73603],"source":"Note that both [value_compare](#set__value_compare) and [key_compare](#set__key_compare) are synonyms for the template parameter **Traits**."},{"content":"Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.","pos":[73604,73765]},{"content":"Example","pos":[73775,73782]},{"pos":[75105,75123],"content":"set::value_compare"},{"content":"A type that provides a function object that can compare two element values to determine their relative order in the set.","pos":[75127,75247]},{"content":"Remarks","pos":[75309,75316]},{"pos":[75336,75385],"content":"is a synonym for the template parameter <ph id=\"ph1\">`Traits`</ph>.","source":" is a synonym for the template parameter `Traits`."},{"pos":[75392,75485],"content":"For more information on <ph id=\"ph1\">`Traits`</ph> see the <bpt id=\"p1\">[</bpt>set Class<ept id=\"p1\">](../standard-library/set-class.md)</ept> topic.","source":"For more information on `Traits` see the [set Class](../standard-library/set-class.md) topic."},{"content":"Note that both <bpt id=\"p1\">[</bpt>key_compare<ept id=\"p1\">](#set__key_compare)</ept> and <bpt id=\"p2\">**</bpt>value_compare<ept id=\"p2\">**</ept> are synonyms for the template parameter <bpt id=\"p3\">**</bpt>Traits<ept id=\"p3\">**</ept>.","pos":[75492,75613],"source":"Note that both [key_compare](#set__key_compare) and **value_compare** are synonyms for the template parameter **Traits**."},{"content":"Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.","pos":[75614,75775]},{"content":"Example","pos":[75785,75792]},{"pos":[75797,75905],"content":"See the example for <bpt id=\"p1\">[</bpt>value_comp<ept id=\"p1\">](#set__value_comp)</ept> for an example of how to declare and use <ph id=\"ph1\">`value_compare`</ph>.","source":"See the example for [value_comp](#set__value_comp) for an example of how to declare and use `value_compare`."},{"pos":[75947,75962],"content":"set::value_type"},{"content":"A type that describes an object stored as an element of a set in its capacity as a value.","pos":[75966,76055]},{"content":"Remarks","pos":[76106,76113]},{"pos":[76130,76176],"content":"is a synonym for the template parameter <ph id=\"ph1\">`Key`</ph>.","source":" is a synonym for the template parameter `Key`."},{"pos":[76183,76297],"content":"For more information on <ph id=\"ph1\">`Key`</ph>, see the Remarks section of the <bpt id=\"p1\">[</bpt>set Class<ept id=\"p1\">](../standard-library/set-class.md)</ept> topic.","source":"For more information on `Key`, see the Remarks section of the [set Class](../standard-library/set-class.md) topic."},{"content":"Note that both <bpt id=\"p1\">[</bpt>key_type<ept id=\"p1\">](#set__key_type)</ept> and <ph id=\"ph1\">`value_type`</ph> are synonyms for the template parameter <bpt id=\"p2\">**</bpt>Key<ept id=\"p2\">**</ept>.","pos":[76304,76411],"source":"Note that both [key_type](#set__key_type) and `value_type` are synonyms for the template parameter **Key**."},{"content":"Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.","pos":[76412,76573]},{"content":"Example","pos":[76583,76590]},{"content":"See Also","pos":[77440,77448]},{"content":"set&gt;","pos":[77455,77459],"source":"set>"},{"content":"Containers","pos":[77494,77504]},{"content":"Thread Safety in the C++ Standard Library","pos":[77544,77585]},{"content":"C++ Standard Library Reference","pos":[77658,77688]}],"content":"---\ntitle: \"set Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::set\"\n  - \"set\"\n  - \"set/std::set\"\n  - \"std.set\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"set class\"\nms.assetid: 8991f9aa-5509-4440-adc1-371512d32018\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# set Class\nThe STL container class set is used for the storage and retrieval of data from a collection in which the values of the elements contained are unique and serve as the key values according to which the data is automatically ordered. The value of an element in a set may not be changed directly. Instead, you must delete old values and insert elements with new values.  \n  \n## Syntax  \n  \n```  \ntemplate <class Key,   \n    class Traits=less<Key>,   \n    class Allocator=allocator<Key>>  \nclass set  \n```  \n  \n#### Parameters  \n `Key`  \n The element data type to be stored in the set.  \n  \n `Traits`  \n The type that provides a function object that can compare two element values as sort keys to determine their relative order in the set. This argument is optional, and the binary predicate **less** *\\<Key>* is the default value.  \n  \n In C++14 you can enable heterogeneous lookup by specifying the `std::less<>` or `std::greater<>` predicate that has no type parameters. For more information, see [Heterogeneous Lookup in Associative Containers](../standard-library/stl-containers.md#sequence_containers)  \n  \n `Allocator`  \n The type that represents the stored allocator object that encapsulates details about the set's allocation and deallocation of memory. This argument is optional, and the default value is **allocator***\\<Key>.*  \n  \n## Remarks  \n An STL set is:  \n  \n-   An associative container, which a variable size container that supports the efficient retrieval of element values based on an associated key value. Further, it is a simple associative container because its element values are its key values.  \n  \n-   Reversible, because it provides a bidirectional iterator to access its elements.  \n  \n-   Sorted, because its elements are ordered by key values within the container in accordance with a specified comparison function.  \n  \n-   Unique in the sense that each of its elements must have a unique key. Since set is also a simple associative container, its elements are also unique.  \n  \n A set is also described as a template class because the functionality it provides is generic and independent of the specific type of data contained as elements. The data type to be used is, instead, specified as a parameter in the class template along with the comparison function and allocator.  \n  \n The choice of container type should be based in general on the type of searching and inserting required by the application. Associative containers are optimized for the operations of lookup, insertion and removal. The member functions that explicitly support these operations are efficient, performing them in a time that is on average proportional to the logarithm of the number of elements in the container. Inserting elements invalidates no iterators, and removing elements invalidates only those iterators that had specifically pointed at the removed elements.  \n  \n The set should be the associative container of choice when the conditions associating the values with their keys are satisfied by the application. The elements of a set are unique and serve as their own sort keys. A model for this type of structure is an ordered list of, say, words in which the words may occur only once. If multiple occurrences of the words were allowed, then a multiset would be the appropriate container structure. If values need to be attached to a list of unique key words, then a map would be an appropriate structure to contain this data. If instead the keys are not unique, then a multimap would be the container of choice.  \n  \n The set orders the sequence it controls by calling a stored function object of type [key_compare](#set__key_compare). This stored object is a comparison function that may be accessed by calling the member function [key_comp](#set__key_comp). In general, the elements need to be merely less than comparable to establish this order so that, given any two elements, it may be determined either that they are equivalent (in the sense that neither is less than the other) or that one is less than the other. This results in an ordering between the nonequivalent elements. On a more technical note, the comparison function is a binary predicate that induces a strict weak ordering in the standard mathematical sense. A binary predicate *f*( *x,y*) is a function object that has two argument objects *x* and *y* and a return value of **true** or **false**. An ordering imposed on a set is a strict weak ordering if the binary predicate is irreflexive, antisymmetric, and transitive and if equivalence is transitive, where two objects *x* and *y* are defined to be equivalent when both *f*( *x,y*) and *f*( *y,x*) are false. If the stronger condition of equality between keys replaces that of equivalence, then the ordering becomes total (in the sense that all the elements are ordered with respect to each other) and the keys matched will be indiscernible from each other.  \n  \n In C++14 you can enable heterogeneous lookup by specifying the `std::less<>` or `std::greater<>` predicate that has no type parameters. For more information, see [Heterogeneous Lookup in Associative Containers](../standard-library/stl-containers.md#sequence_containers)  \n  \n The iterator provided by the set class is a bidirectional iterator, but the class member functions [insert](#set__insert) and [set](#set__set) have versions that take as template parameters a weaker input iterator, whose functionality requirements are more minimal than those guaranteed by the class of bidirectional iterators. The different iterator concepts form a family related by refinements in their functionality. Each iterator concept has its own set of requirements, and the algorithms that work with them must limit their assumptions to the requirements provided by that type of iterator. It may be assumed that an input iterator may be dereferenced to refer to some object and that it may be incremented to the next iterator in the sequence. This is a minimal set of functionality, but it is enough to be able to talk meaningfully about a range of iterators [ `First`, `Last`) in the context of the class's member functions.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[set](#set__set)|Constructs a set that is empty or that is a copy of all or part of some other set.|  \n  \n### Typedefs  \n  \n|||  \n|-|-|  \n|[allocator_type](#set__allocator_type)|A type that represents the `allocator` class for the set object.|  \n|[const_iterator](#set__const_iterator)|A type that provides a bidirectional iterator that can read a `const` element in the set.|  \n|[const_pointer](#set__const_pointer)|A type that provides a pointer to a `const` element in a set.|  \n|[const_reference](#set__const_reference)|A type that provides a reference to a `const` element stored in a set for reading and performing `const` operations.|  \n|[const_reverse_iterator](#set__const_reverse_iterator)|A type that provides a bidirectional iterator that can read any `const` element in the set.|  \n|[difference_type](#set__difference_type)|A signed integer type that can be used to represent the number of elements of a set in a range between elements pointed to by iterators.|  \n|[iterator](#set__iterator)|A type that provides a bidirectional iterator that can read or modify any element in a set.|  \n|[key_compare](#set__key_compare)|A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the set.|  \n|[key_type](#set__key_type)|The type describes an object stored as an element of a set in its capacity as sort key.|  \n|[pointer](#set__pointer)|A type that provides a pointer to an element in a set.|  \n|[reference](#set__reference)|A type that provides a reference to an element stored in a set.|  \n|[reverse_iterator](#set__reverse_iterator)|A type that provides a bidirectional iterator that can read or modify an element in a reversed set.|  \n|[size_type](#set__size_type)|An unsigned integer type that can represent the number of elements in a set.|  \n|[value_compare](#set__value_compare)|The type that provides a function object that can compare two elements to determine their relative order in the set.|  \n|[value_type](#set__value_type)|The type describes an object stored as an element of a set in its capacity as a value.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[begin](#set__begin)|Returns an iterator that addresses the first element in the set.|  \n|[cbegin](#set__cbegin)|Returns a const iterator that addresses the first element in the set.|  \n|[cend](#set__cend)|Returns a const iterator that addresses the location succeeding the last element in a set.|  \n|[clear](#set__clear)|Erases all the elements of a set.|  \n|[count](#set__count)|Returns the number of elements in a set whose key matches a parameter-specified key.|  \n|[crbegin](#set__rbegin)|Returns a const iterator addressing the first element in a reversed set.|  \n|[crend](#set__rend)|Returns a const iterator that addresses the location succeeding the last element in a reversed set.|  \n|[emplace](#set__emplace)|Inserts an element constructed in place into a set.|  \n|[emplace_hint](#set__emplace_hint)|Inserts an element constructed in place into a set, with a placement hint.|  \n|[empty](#set__empty)|Tests if a set is empty.|  \n|[end](#set__end)|Returns an iterator that addresses the location succeeding the last element in a set.|  \n|[equal_range](#set__equal_range)|Returns a pair of iterators respectively to the first element in a set with a key that is greater than a specified key and to the first element in the set with a key that is equal to or greater than the key.|  \n|[erase](#set__erase)|Removes an element or a range of elements in a set from specified positions or removes elements that match a specified key.|  \n|[find](#set__find)|Returns an iterator addressing the location of an element in a set that has a key equivalent to a specified key.|  \n|[get_allocator](#set__get_allocator)|Returns a copy of the `allocator` object used to construct the set.|  \n|[insert](#set__insert)|Inserts an element or a range of elements into a set.|  \n|[key_comp](#set__key_comp)|Retrieves a copy of the comparison object used to order keys in a set.|  \n|[lower_bound](#set__lower_bound)|Returns an iterator to the first element in a set with a key that is equal to or greater than a specified key.|  \n|[max_size](#set__max_size)|Returns the maximum length of the set.|  \n|[rbegin](#set__rbegin)|Returns an iterator addressing the first element in a reversed set.|  \n|[rend](#set__rend)|Returns an iterator that addresses the location succeeding the last element in a reversed set.|  \n|[size](#set__size)|Returns the number of elements in the set.|  \n|[swap](#set__swap)|Exchanges the elements of two sets.|  \n|[upper_bound](#set__upper_bound)|Returns an iterator to the first element in a set with a key that is greater than a specified key.|  \n|[value_comp](#set__value_comp)|Retrieves a copy of the comparison object used to order element values in a set.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator=](#set__operator_eq)|Replaces the elements of a set with a copy of another set.|  \n  \n## Requirements  \n **Header:** \\<set>  \n  \n **Namespace:** std  \n  \n##  <a name=\"set__allocator_type\"></a>  set::allocator_type  \n A type that represents the allocator class for the set object.  \n  \n```  \ntypedef Allocator allocator_type;  \n```  \n  \n### Remarks  \n **allocator_type** is a synonym for the template parameter [Allocator](../standard-library/set-class.md).  \n  \n Returns the function object that a multiset uses to order its elements, which is the template parameter `Allocator`.  \n  \n For more information on `Allocator`, see the Remarks section of the [set Class](../standard-library/set-class.md) topic.  \n  \n### Example  \n  See the example for [get_allocator](#set__get_allocator) for an example that uses `allocator_type`.  \n  \n##  <a name=\"set__begin\"></a>  set::begin  \n Returns an iterator that addresses the first element in the set.  \n  \n```  \nconst_iterator begin() const;\n\niterator begin();\n```  \n  \n### Return Value  \n A bidirectional iterator addressing the first element in the set or the location succeeding an empty set.  \n  \n### Remarks  \n If the return value of **begin** is assigned to a `const_iterator`, the elements in the set object cannot be modified. If the return value of **begin** is assigned to an **iterator**, the elements in the set object can be modified.  \n  \n### Example  \n  \n```cpp  \n// set_begin.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   set <int> s1;  \n   set <int>::iterator s1_Iter;  \n   set <int>::const_iterator s1_cIter;  \n  \n   s1.insert( 1 );  \n   s1.insert( 2 );  \n   s1.insert( 3 );  \n  \n   s1_Iter = s1.begin( );  \n   cout << \"The first element of s1 is \" << *s1_Iter << endl;  \n  \n   s1_Iter = s1.begin( );  \n   s1.erase( s1_Iter );  \n  \n   // The following 2 lines would err because the iterator is const  \n   // s1_cIter = s1.begin( );  \n   // s1.erase( s1_cIter );  \n  \n   s1_cIter = s1.begin( );  \n   cout << \"The first element of s1 is now \" << *s1_cIter << endl;  \n}  \n```  \n  \n```Output  \nThe first element of s1 is 1  \nThe first element of s1 is now 2  \n```  \n  \n##  <a name=\"set__cbegin\"></a>  set::cbegin  \n Returns a `const` iterator that addresses the first element in the range.  \n  \n```  \nconst_iterator cbegin() const;\n```  \n  \n### Return Value  \n A `const` bidirectional-access iterator that points at the first element of the range, or the location just beyond the end of an empty range (for an empty range, `cbegin() == cend()`).  \n  \n### Remarks  \n With the return value of `cbegin`, the elements in the range cannot be modified.  \n  \n You can use this member function in place of the `begin()` member function to guarantee that the return value is `const_iterator`. Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example. In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `begin()` and `cbegin()`.  \n  \n```cpp  \n \nauto i1 = Container.begin();\n// i1 is Container<T>::iterator   \nauto i2 = Container.cbegin();\n\n// i2 is Container<T>::const_iterator  \n```  \n  \n##  <a name=\"set__cend\"></a>  set::cend  \n Returns a `const` iterator that addresses the location just beyond the last element in a range.  \n  \n```  \nconst_iterator cend() const;\n```  \n  \n### Return Value  \n A `const` bidirectional-access iterator that points just beyond the end of the range.  \n  \n### Remarks  \n `cend` is used to test whether an iterator has passed the end of its range.  \n  \n You can use this member function in place of the `end()` member function to guarantee that the return value is `const_iterator`. Typically, it's used in conjunction with the [auto](../cpp/auto-cpp.md) type deduction keyword, as shown in the following example. In the example, consider `Container` to be a modifiable (non- `const`) container of any kind that supports `end()` and `cend()`.  \n  \n```cpp  \n \nauto i1 = Container.end();\n// i1 is Container<T>::iterator   \nauto i2 = Container.cend();\n\n// i2 is Container<T>::const_iterator  \n```  \n  \n The value returned by `cend` should not be dereferenced.  \n  \n##  <a name=\"set__clear\"></a>  set::clear  \n Erases all the elements of a set.  \n  \n```  \nvoid clear();\n```  \n  \n### Example  \n  \n```cpp  \n// set_clear.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   set <int> s1;  \n  \n   s1.insert( 1 );  \n   s1.insert( 2 );  \n  \n   cout << \"The size of the set is initially \" << s1.size( )  \n        << \".\" << endl;  \n  \n   s1.clear( );  \n   cout << \"The size of the set after clearing is \"   \n        << s1.size( ) << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe size of the set is initially 2.  \nThe size of the set after clearing is 0.  \n```  \n  \n##  <a name=\"set__const_iterator\"></a>  set::const_iterator  \n A type that provides a bidirectional iterator that can read a **const** element in the set.  \n  \n```  \ntypedef implementation-defined const_iterator;  \n```  \n  \n### Remarks  \n A type `const_iterator` cannot be used to modify the value of an element.  \n  \n### Example  \n  See the example for [begin](#set__begin) for an example that uses `const_iterator`.  \n  \n##  <a name=\"set__const_pointer\"></a>  set::const_pointer  \n A type that provides a pointer to a **const** element in a set.  \n  \n```  \ntypedef typename allocator_type::const_pointer const_pointer;  \n```  \n  \n### Remarks  \n A type `const_pointer` cannot be used to modify the value of an element.  \n  \n In most cases, a [const_iterator](#set__const_iterator) should be used to access the elements in a const set object.  \n  \n##  <a name=\"set__const_reference\"></a>  set::const_reference  \n A type that provides a reference to a **const** element stored in a set for reading and performing **const** operations.  \n  \n```  \ntypedef typename allocator_type::const_reference const_reference;  \n```  \n  \n### Example  \n  \n```cpp  \n// set_const_ref.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   set <int> s1;  \n  \n   s1.insert( 10 );  \n   s1.insert( 20 );  \n  \n   // Declare and initialize a const_reference &Ref1   \n   // to the 1st element  \n   const int &Ref1 = *s1.begin( );  \n  \n   cout << \"The first element in the set is \"  \n        << Ref1 << \".\" << endl;  \n  \n   // The following line would cause an error because the   \n   // const_reference cannot be used to modify the set  \n   // Ref1 = Ref1 + 5;  \n}  \n```  \n  \n```Output  \nThe first element in the set is 10.  \n```  \n  \n##  <a name=\"set__const_reverse_iterator\"></a>  set::const_reverse_iterator  \n A type that provides a bidirectional iterator that can read any **const** element in the set.  \n  \n```  \ntypedef std::reverse_iterator<const_iterator> const_reverse_iterator;  \n```  \n  \n### Remarks  \n A type `const_reverse_iterator` cannot modify the value of an element and is use to iterate through the set in reverse.  \n  \n### Example  \n  See the example for [rend](#set__rend) for an example of how to declare and use the `const_reverse_iterator`.  \n  \n##  <a name=\"set__count\"></a>  set::count  \n Returns the number of elements in a set whose key matches a parameter-specified key.  \n  \n```  \nsize_type count(const Key& key) const;\n```  \n  \n### Parameters  \n ` key`  \n The key of the elements to be matched from the set.  \n  \n### Return Value  \n 1 if the set contains an element whose sort key matches the parameter key. 0 if the set does not contain an element with a matching key.  \n  \n### Remarks  \n The member function returns the number of elements in the following range:  \n  \n [ `lower_bound` (_ *Key* ), `upper_bound` (\\_ *Key* ) ).  \n  \n### Example  \n  The following example demonstrates the use of the set::count member function.  \n  \n```  \n// set_count.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n    set<int> s1;  \n    set<int>::size_type i;  \n  \n    s1.insert(1);  \n    s1.insert(1);  \n  \n    // Keys must be unique in set, so duplicates are ignored  \n    i = s1.count(1);  \n    cout << \"The number of elements in s1 with a sort key of 1 is: \"  \n         << i << \".\" << endl;  \n  \n    i = s1.count(2);  \n    cout << \"The number of elements in s1 with a sort key of 2 is: \"  \n         << i << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe number of elements in s1 with a sort key of 1 is: 1.  \nThe number of elements in s1 with a sort key of 2 is: 0.  \n```  \n  \n##  <a name=\"set__crbegin\"></a>  set::crbegin  \n Returns a const iterator addressing the first element in a reversed set.  \n  \n```  \nconst_reverse_iterator crbegin() const;\n```  \n  \n### Return Value  \n A const reverse bidirectional iterator addressing the first element in a reversed set or addressing what had been the last element in the unreversed set.  \n  \n### Remarks  \n `crbegin` is used with a reversed set just as [begin](#set__begin) is used with a set.  \n  \n With the return value of `crbegin`, the set object cannot be modified.  \n  \n### Example  \n  \n```cpp  \n// set_crbegin.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   set <int> s1;  \n   set <int>::const_reverse_iterator s1_crIter;  \n  \n   s1.insert( 10 );  \n   s1.insert( 20 );  \n   s1.insert( 30 );  \n  \n   s1_crIter = s1.crbegin( );  \n   cout << \"The first element in the reversed set is \"  \n        << *s1_crIter << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe first element in the reversed set is 30.  \n```  \n  \n##  <a name=\"set__crend\"></a>  set::crend  \n Returns a const iterator that addresses the location succeeding the last element in a reversed set.  \n  \n```  \nconst_reverse_iterator crend() const;\n```  \n  \n### Return Value  \n A const reverse bidirectional iterator that addresses the location succeeding the last element in a reversed set (the location that had preceded the first element in the unreversed set).  \n  \n### Remarks  \n `crend` is used with a reversed set just as [end](#set__end) is used with a set.  \n  \n With the return value of `crend`, the set object cannot be modified. The value returned by `crend` should not be dereferenced.  \n  \n `crend` can be used to test to whether a reverse iterator has reached the end of its set.  \n  \n### Example  \n  \n```cpp  \n// set_crend.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main() {  \n   using namespace std;     \n   set <int> s1;  \n   set <int>::const_reverse_iterator s1_crIter;  \n  \n   s1.insert( 10 );  \n   s1.insert( 20 );  \n   s1.insert( 30 );  \n  \n   s1_crIter = s1.crend( );  \n   s1_crIter--;  \n   cout << \"The last element in the reversed set is \"  \n        << *s1_crIter << \".\" << endl;  \n}  \n```  \n  \n##  <a name=\"set__difference_type\"></a>  set::difference_type  \n A signed integer type that can be used to represent the number of elements of a set in a range between elements pointed to by iterators.  \n  \n```  \ntypedef typename allocator_type::difference_type difference_type;  \n```  \n  \n### Remarks  \n The `difference_type` is the type returned when subtracting or incrementing through iterators of the container. The `difference_type` is typically used to represent the number of elements in the range *[ first,  last)* between the iterators ` first` and ` last`, includes the element pointed to by ` first` and the range of elements up to, but not including, the element pointed to by ` last`.  \n  \n Note that although `difference_type` is available for all iterators that satisfy the requirements of an input iterator, which includes the class of bidirectional iterators supported by reversible containers such as set, subtraction between iterators is only supported by random-access iterators provided by a random-access container such as vector.  \n  \n### Example  \n  \n```cpp  \n// set_diff_type.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <set>  \n#include <algorithm>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   set <int> s1;  \n   set <int>::iterator s1_Iter, s1_bIter, s1_eIter;  \n  \n   s1.insert( 20 );  \n   s1.insert( 10 );  \n   s1.insert( 20 );   // won't insert as set elements are unique  \n  \n   s1_bIter = s1.begin( );  \n   s1_eIter = s1.end( );  \n  \n   set <int>::difference_type   df_typ5, df_typ10, df_typ20;  \n  \n   df_typ5 = count( s1_bIter, s1_eIter, 5 );  \n   df_typ10 = count( s1_bIter, s1_eIter, 10 );  \n   df_typ20 = count( s1_bIter, s1_eIter, 20 );  \n  \n   // the keys, and hence the elements of a set are unique,  \n   // so there is at most one of a given value  \n   cout << \"The number '5' occurs \" << df_typ5  \n        << \" times in set s1.\\n\";  \n   cout << \"The number '10' occurs \" << df_typ10  \n        << \" times in set s1.\\n\";  \n   cout << \"The number '20' occurs \" << df_typ20  \n        << \" times in set s1.\\n\";  \n  \n   // count the number of elements in a set  \n   set <int>::difference_type  df_count = 0;  \n   s1_Iter = s1.begin( );  \n   while ( s1_Iter != s1_eIter)     \n   {  \n      df_count++;  \n      s1_Iter++;  \n   }  \n  \n   cout << \"The number of elements in the set s1 is: \"   \n        << df_count << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe number '5' occurs 0 times in set s1.  \nThe number '10' occurs 1 times in set s1.  \nThe number '20' occurs 1 times in set s1.  \nThe number of elements in the set s1 is: 2.  \n```  \n  \n##  <a name=\"set__emplace\"></a>  set::emplace  \n Inserts an element constructed in place (no copy or move operations are performed).  \n  \n```  \ntemplate <class... Args>  \npair<iterator, bool>  \nemplace(\n    Args&&... args);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`args`|The arguments forwarded to construct an element to be inserted into the set unless it already contains an element whose value is equivalently ordered.|  \n  \n### Return Value  \n A [pair](../standard-library/pair-structure.md) whose bool component returns true if an insertion was made, and false if the map already contained an element whose value had an equivalent value in the ordering. The iterator component of the return value pair returns the address where a new element was inserted (if the bool component is true) or where the element was already located (if the bool component is false).  \n  \n### Remarks  \n No iterators or references are invalidated by this function.  \n  \n During emplacement, if an exception is thrown, the container's state is not modified.  \n  \n### Example  \n  \n```cpp  \n  \n// set_emplace.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <string>  \n#include <iostream>  \n  \nusing namespace std;  \n  \ntemplate <typename S> void print(const S& s) {  \n    cout << s.size() << \" elements: \";  \n  \n    for (const auto& p : s) {  \n        cout << \"(\" << p << \") \";  \n    }  \n  \n    cout << endl;  \n}  \n  \nint main()  \n{  \n    set<string> s1;  \n  \n    auto ret = s1.emplace(\"ten\");  \n  \n    if (!ret.second){  \n        cout << \"Emplace failed, element with value \\\"ten\\\" already exists.\"  \n            << endl << \"  The existing element is (\" << *ret.first << \")\"  \n            << endl;  \n        cout << \"set not modified\" << endl;  \n    }  \n    else{  \n        cout << \"set modified, now contains \";  \n        print(s1);  \n    }  \n    cout << endl;  \n  \n    ret = s1.emplace(\"ten\");  \n  \n    if (!ret.second){  \n        cout << \"Emplace failed, element with value \\\"ten\\\" already exists.\"  \n            << endl << \"  The existing element is (\" << *ret.first << \")\"  \n            << endl;  \n    }  \n    else{  \n        cout << \"set modified, now contains \";  \n        print(s1);  \n    }  \n    cout << endl;  \n}  \n  \n```  \n  \n##  <a name=\"set__emplace_hint\"></a>  set::emplace_hint  \n Inserts an element constructed in place (no copy or move operations are performed), with a placement hint.  \n  \n```  \ntemplate <class... Args>  \niterator emplace_hint(\n    const_iterator where,  \n    Args&&... args);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`args`|The arguments forwarded to construct an element to be inserted into the set unless the set already contains that element or, more generally, unless it already contains an element whose value is equivalently ordered.|  \n|`where`|The place to start searching for the correct point of insertion. (If that point immediately precedes `where`, insertion can occur in amortized constant time instead of logarithmic time.)|  \n  \n### Return Value  \n An iterator to the newly inserted element.  \n  \n If the insertion failed because the element already exists, returns an iterator to the existing element.  \n  \n### Remarks  \n No iterators or references are invalidated by this function.  \n  \n During emplacement, if an exception is thrown, the container's state is not modified.  \n  \n### Example  \n  \n```cpp  \n  \n// set_emplace.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <string>  \n#include <iostream>  \n  \nusing namespace std;  \n  \ntemplate <typename S> void print(const S& s) {  \n    cout << s.size() << \" elements: \" << endl;  \n  \n    for (const auto& p : s) {  \n        cout << \"(\" << p <<  \") \";  \n    }  \n  \n    cout << endl;  \n}  \n  \nint main()  \n{  \n    set<string> s1;  \n  \n    // Emplace some test data  \n    s1.emplace(\"Anna\");  \n    s1.emplace(\"Bob\");  \n    s1.emplace(\"Carmine\");  \n  \n    cout << \"set starting data: \";  \n    print(s1);  \n    cout << endl;  \n  \n    // Emplace with hint  \n    // s1.end() should be the \"next\" element after this emplacement  \n    s1.emplace_hint(s1.end(), \"Doug\");  \n  \n    cout << \"set modified, now contains \";  \n    print(s1);  \n    cout << endl;  \n}  \n  \n```  \n  \n##  <a name=\"set__empty\"></a>  set::empty  \n Tests if a set is empty.  \n  \n```  \nbool empty() const;\n```  \n  \n### Return Value  \n **true** if the set is empty; **false** if the set is nonempty.  \n  \n### Example  \n  \n```cpp  \n// set_empty.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   set <int> s1, s2;  \n   s1.insert ( 1 );  \n  \n   if ( s1.empty( ) )  \n      cout << \"The set s1 is empty.\" << endl;  \n   else  \n      cout << \"The set s1 is not empty.\" << endl;  \n  \n   if ( s2.empty( ) )  \n      cout << \"The set s2 is empty.\" << endl;  \n   else  \n      cout << \"The set s2 is not empty.\" << endl;  \n}  \n```  \n  \n```Output  \nThe set s1 is not empty.  \nThe set s2 is empty.  \n```  \n  \n##  <a name=\"set__end\"></a>  set::end  \n Returns the past-the-end iterator.  \n  \n```  \nconst_iterator end() const;\n\n \n \niterator end();\n```  \n  \n### Return Value  \n The past-the-end iterator. If the set is empty, then `set::end() == set::begin()`.  \n  \n### Remarks  \n **end** is used to test whether an iterator has passed the end of its set.  \n  \n The value returned by **end** should not be dereferenced.  \n  \n For a code example, see [set::find](#set__find).  \n  \n##  <a name=\"set__equal_range\"></a>  set::equal_range  \n Returns a pair of iterators respectively to the first element in a set with a key that is greater than or equal to a specified key and to the first element in the set with a key that is greater than the key.  \n  \n```  \npair <const_iterator, const_iterator> equal_range (const Key& key) const;\n\npair <iterator, iterator> equal_range (const Key& key);\n```  \n  \n### Parameters  \n ` key`  \n The argument key to be compared with the sort key of an element from the set being searched.  \n  \n### Return Value  \n A pair of iterators where the first is the [lower_bound](#set__lower_bound) of the key and the second is the [upper_bound](#set__upper_bound) of the key.  \n  \n To access the first iterator of a pair `pr` returned by the member function, use `pr`. **first**, and to dereference the lower bound iterator, use \\*( `pr`. **first**). To access the second iterator of a pair `pr` returned by the member function, use `pr`. **second**, and to dereference the upper bound iterator, use \\*( `pr`. **second**).  \n  \n### Example  \n  \n```cpp  \n// set_equal_range.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   typedef set<int, less< int > > IntSet;  \n   IntSet s1;  \n   set <int, less< int > > :: const_iterator s1_RcIter;  \n  \n   s1.insert( 10 );  \n   s1.insert( 20 );  \n   s1.insert( 30 );  \n  \n   pair <IntSet::const_iterator, IntSet::const_iterator> p1, p2;  \n   p1 = s1.equal_range( 20 );  \n  \n   cout << \"The upper bound of the element with \"  \n        << \"a key of 20 in the set s1 is: \"  \n        << *(p1.second) << \".\" << endl;  \n  \n   cout << \"The lower bound of the element with \"  \n        << \"a key of 20 in the set s1 is: \"  \n        << *(p1.first) << \".\" << endl;  \n  \n   // Compare the upper_bound called directly   \n   s1_RcIter = s1.upper_bound( 20 );  \n   cout << \"A direct call of upper_bound( 20 ) gives \"  \n        << *s1_RcIter << \",\" << endl  \n        << \"matching the 2nd element of the pair\"  \n        << \" returned by equal_range( 20 ).\" << endl;  \n  \n   p2 = s1.equal_range( 40 );  \n  \n   // If no match is found for the key,  \n   // both elements of the pair return end( )  \n   if ( ( p2.first == s1.end( ) ) && ( p2.second == s1.end( ) ) )  \n      cout << \"The set s1 doesn't have an element \"  \n           << \"with a key less than 40.\" << endl;  \n   else  \n      cout << \"The element of set s1 with a key >= 40 is: \"  \n           << *(p1.first) << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe upper bound of the element with a key of 20 in the set s1 is: 30.  \nThe lower bound of the element with a key of 20 in the set s1 is: 20.  \nA direct call of upper_bound( 20 ) gives 30,  \nmatching the 2nd element of the pair returned by equal_range( 20 ).  \nThe set s1 doesn't have an element with a key less than 40.  \n```  \n  \n##  <a name=\"set__erase\"></a>  set::erase  \n Removes an element or a range of elements in a set from specified positions or removes elements that match a specified key.  \n  \n```  \niterator erase(\n    const_iterator Where);\n\niterator erase(\n    const_iterator First,  \n    const_iterator Last);\n\nsize_type erase(\n    const key_type& Key);\n```  \n  \n### Parameters  \n `Where`  \n Position of the element to be removed.  \n  \n `First`  \n Position of the first element to be removed.  \n  \n `Last`  \n Position just beyond the last element to be removed.  \n  \n `Key`  \n The key value of the elements to be removed.  \n  \n### Return Value  \n For the first two member functions, a bidirectional iterator that designates the first element remaining beyond any elements removed, or an element that is the end of the set if no such element exists.  \n  \n For the third member function, returns the number of elements that have been removed from the set.  \n  \n### Remarks  \n  \n### Example  \n  \n```cpp  \n// set_erase.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <string>  \n#include <iostream>  \n#include <iterator> // next() and prev() helper functions  \n  \nusing namespace std;  \n  \nusing myset = set<string>;  \n  \nvoid printset(const myset& s) {  \n    for (const auto& iter : s) {  \n        cout << \" [\" << iter << \"]\";  \n    }  \n    cout << endl << \"size() == \" << s.size() << endl << endl;  \n}  \n  \nint main()  \n{  \n    myset s1;  \n  \n    // Fill in some data to test with, one at a time  \n    s1.insert(\"Bob\");  \n    s1.insert(\"Robert\");  \n    s1.insert(\"Bert\");  \n    s1.insert(\"Rob\");  \n    s1.insert(\"Bobby\");  \n  \n    cout << \"Starting data of set s1 is:\" << endl;  \n    printset(s1);  \n    // The 1st member function removes an element at a given position  \n    s1.erase(next(s1.begin()));  \n    cout << \"After the 2nd element is deleted, the set s1 is:\" << endl;  \n    printset(s1);  \n  \n    // Fill in some data to test with, one at a time, using an intializer list  \n    myset s2{ \"meow\", \"hiss\", \"purr\", \"growl\", \"yowl\" };  \n  \n    cout << \"Starting data of set s2 is:\" << endl;  \n    printset(s2);  \n    // The 2nd member function removes elements  \n    // in the range [First, Last)  \n    s2.erase(next(s2.begin()), prev(s2.end()));  \n    cout << \"After the middle elements are deleted, the set s2 is:\" << endl;  \n    printset(s2);  \n  \n    myset s3;  \n  \n    // Fill in some data to test with, one at a time, using emplace  \n    s3.emplace(\"C\");  \n    s3.emplace(\"C#\");  \n    s3.emplace(\"D\");  \n    s3.emplace(\"D#\");  \n    s3.emplace(\"E\");  \n    s3.emplace(\"E#\");  \n    s3.emplace(\"F\");  \n    s3.emplace(\"F#\");  \n    s3.emplace(\"G\");  \n    s3.emplace(\"G#\");  \n    s3.emplace(\"A\");  \n    s3.emplace(\"A#\");  \n    s3.emplace(\"B\");  \n  \n    cout << \"Starting data of set s3 is:\" << endl;  \n    printset(s3);  \n    // The 3rd member function removes elements with a given Key  \n    myset::size_type count = s3.erase(\"E#\");  \n    // The 3rd member function also returns the number of elements removed  \n    cout << \"The number of elements removed from s3 is: \" << count << \".\" << endl;  \n    cout << \"After the element with a key of \\\"E#\\\" is deleted, the set s3 is:\" << endl;  \n    printset(s3);  \n}  \n  \n```  \n  \n##  <a name=\"set__find\"></a>  set::find  \n Returns an iterator that refers to the location of an element in a set that has a key equivalent to a specified key.  \n  \n```  \niterator find(const Key& key);\n\n \nconst_iterator find(const Key& key) const;\n```  \n  \n### Parameters  \n `key`  \n The key value to be matched by the sort key of an element from the set being searched.  \n  \n### Return Value  \n An iterator that refers to the location of an element with a specified key, or the location succeeding the last element in the set ( `set::end()`) if no match is found for the key.  \n  \n### Remarks  \n The member function returns an iterator that refers to an element in the set whose key is equivalent to the argument `key` under a binary predicate that induces an ordering based on a less than comparability relation.  \n  \n If the return value of **find** is assigned to a **const_iterator**, the set object cannot be modified. If the return value of **find** is assigned to an **iterator**, the set object can be modified  \n  \n### Example  \n  \n```cpp  \n// compile with: /EHsc /W4 /MTd  \n#include <set>  \n#include <iostream>  \n#include <vector>  \n#include <string>  \n  \nusing namespace std;  \n  \ntemplate <typename T> void print_elem(const T& t) {  \n    cout << \"(\" << t << \") \";  \n}  \n  \ntemplate <typename T> void print_collection(const T& t) {  \n    cout << t.size() << \" elements: \";  \n  \n    for (const auto& p : t) {  \n        print_elem(p);  \n    }  \n    cout << endl;  \n}  \n  \ntemplate <typename C, class T> void findit(const C& c, T val) {  \n    cout << \"Trying find() on value \" << val << endl;  \n    auto result = c.find(val);  \n    if (result != c.end()) {  \n        cout << \"Element found: \"; print_elem(*result); cout << endl;  \n    } else {  \n        cout << \"Element not found.\" << endl;  \n    }  \n}  \n  \nint main()  \n{  \n    set<int> s1({ 40, 45 });  \n    cout << \"The starting set s1 is: \" << endl;  \n    print_collection(s1);  \n  \n    vector<int> v;  \n    v.push_back(43);  \n    v.push_back(41);  \n    v.push_back(46);  \n    v.push_back(42);  \n    v.push_back(44);  \n    v.push_back(44); // attempt a duplicate  \n  \n    cout << \"Inserting the following vector data into s1: \" << endl;  \n    print_collection(v);  \n  \n    s1.insert(v.begin(), v.end());  \n  \n    cout << \"The modified set s1 is: \" << endl;  \n    print_collection(s1);  \n    cout << endl;  \n    findit(s1, 45);  \n    findit(s1, 6);  \n}  \n  \n```  \n  \n##  <a name=\"set__get_allocator\"></a>  set::get_allocator  \n Returns a copy of the allocator object used to construct the set.  \n  \n```  \nallocator_type get_allocator() const;\n```  \n  \n### Return Value  \n The allocator used by the set to manage memory, which is the template parameter `Allocator`.  \n  \n For more information on `Allocator`, see the Remarks section of the [set Class](../standard-library/set-class.md) topic.  \n  \n### Remarks  \n Allocators for the set class specify how the class manages storage. The default allocators supplied with STL container classes is sufficient for most programming needs. Writing and using your own allocator class is an advanced C++ topic.  \n  \n### Example  \n  \n```cpp  \n// set_get_allocator.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   set <int>::allocator_type s1_Alloc;  \n   set <int>::allocator_type s2_Alloc;  \n   set <double>::allocator_type s3_Alloc;  \n   set <int>::allocator_type s4_Alloc;  \n  \n   // The following lines declare objects  \n   // that use the default allocator.  \n   set <int> s1;  \n   set <int, allocator<int> > s2;  \n   set <double, allocator<double> > s3;  \n  \n   s1_Alloc = s1.get_allocator( );  \n   s2_Alloc = s2.get_allocator( );  \n   s3_Alloc = s3.get_allocator( );  \n  \n   cout << \"The number of integers that can be allocated\"  \n        << endl << \"before free memory is exhausted: \"  \n        << s2.max_size( ) << \".\" << endl;  \n  \n   cout << \"\\nThe number of doubles that can be allocated\"  \n        << endl << \"before free memory is exhausted: \"  \n        << s3.max_size( ) <<  \".\" << endl;  \n  \n   // The following line creates a set s4  \n   // with the allocator of multiset s1.  \n   set <int> s4( less<int>( ), s1_Alloc );  \n  \n   s4_Alloc = s4.get_allocator( );  \n  \n   // Two allocators are interchangeable if  \n   // storage allocated from each can be  \n   // deallocated by the other  \n   if( s1_Alloc == s4_Alloc )  \n   {  \n      cout << \"\\nThe allocators are interchangeable.\"  \n           << endl;  \n   }  \n   else  \n   {  \n      cout << \"\\nThe allocators are not interchangeable.\"  \n           << endl;  \n   }  \n}  \n```  \n  \n##  <a name=\"set__insert\"></a>  set::insert  \n Inserts an element or a range of elements into a set.  \n  \n```  \n// (1) single element  \npair<iterator, bool> insert(\n    const value_type& Val);\n\n \n// (2) single element, perfect forwarded  \ntemplate <class ValTy>  \npair<iterator, bool>  \ninsert(\n    ValTy&& Val);\n\n \n// (3) single element with hint  \niterator insert(\n    const_iterator Where,  \n    const value_type& Val);\n\n \n// (4) single element, perfect forwarded, with hint  \ntemplate <class ValTy>  \niterator insert(\n    const_iterator Where,  \n    ValTy&& Val);\n\n \n// (5) range   \ntemplate <class InputIterator>   \nvoid insert(\n    InputIterator First,  \n    InputIterator Last);\n\n \n// (6) initializer list  \nvoid insert(\n    initializer_list<value_type>  \nIList);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`Val`|The value of an element to be inserted into the set unless it already contains an element whose value is equivalently ordered.|  \n|`Where`|The place to start searching for the correct point of insertion. (If that point immediately precedes `Where`, insertion can occur in amortized constant time instead of logarithmic time.)|  \n|`ValTy`|Template parameter that specifies the argument type that the set can use to construct an element of [value_type](../standard-library/map-class.md#map__value_type), and perfect-forwards `Val` as an argument.|  \n|`First`|The position of the first element to be copied.|  \n|`Last`|The position just beyond the last element to be copied.|  \n|`InputIterator`|Template function argument that meets the requirements of an [input iterator](../standard-library/input-iterator-tag-struct.md) that points to elements of a type that can be used to construct [value_type](../standard-library/map-class.md#map__value_type) objects.|  \n|`IList`|The [initializer_list](../standard-library/initializer-list.md) from which to copy the elements.|  \n  \n### Return Value  \n The single-element member functions, (1) and (2), return a [pair](../standard-library/pair-structure.md) whose `bool` component is true if an insertion was made, and false if the set already contained an element of equivalent value in the ordering. The iterator component of the return-value pair points to the newly inserted element if the `bool` component is true, or to the existing element if the `bool` component is false.  \n  \n The single-element-with-hint member functions, (3) and (4), return an iterator that points to the position where the new element was inserted into the set or, if an element with an equivalent key already exists, to the existing element.  \n  \n### Remarks  \n No iterators, pointers, or references are invalidated by this function.  \n  \n During the insertion of just one element, if an exception is thrown, the container's state is not modified. During the insertion of multiple elements, if an exception is thrown, the container is left in an unspecified but valid state.  \n  \n To access the iterator component of a `pair``pr` that's returned by the single-element member functions, use `pr.first`; to dereference the iterator within the returned pair, use `*pr.first`, giving you an element. To access the `bool` component, use `pr.second`. For an example, see the sample code later in this article.  \n  \n The [value_type](../standard-library/map-class.md#map__value_type) of a container is a typedef that belongs to the container, and, for set, `set<V>::value_type` is type `const V`.  \n  \n The range member function (5) inserts the sequence of element values into a set that corresponds to each element addressed by an iterator in the range `[First, Last)`; therefore, `Last` does not get inserted. The container member function `end()` refers to the position just after the last element in the container—for example, the statement `s.insert(v.begin(), v.end());` attempts to insert all elements of `v` into `s`. Only elements that have unique values in the range are inserted; duplicates are ignored. To observe which elements are rejected, use the single-element versions of `insert`.  \n  \n The initializer list member function (6) uses an [initializer_list](../standard-library/initializer-list.md) to copy elements into the set.  \n  \n For insertion of an element constructed in place—that is, no copy or move operations are performed—see [set::emplace](#set__emplace) and [set::emplace_hint](#set__emplace_hint).  \n  \n### Example  \n  \n```cpp  \n  \n// set_insert.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n#include <string>  \n#include <vector>  \n  \nusing namespace std;  \n  \ntemplate <typename S> void print(const S& s) {  \n    cout << s.size() << \" elements: \";  \n  \n    for (const auto& p : s) {  \n        cout << \"(\" << p << \") \";  \n    }  \n  \n    cout << endl;  \n}  \n  \nint main()  \n{  \n  \n    // insert single values   \n    set<int> s1;  \n    // call insert(const value_type&) version  \n    s1.insert({ 1, 10 });  \n    // call insert(ValTy&&) version   \n    s1.insert(20);  \n  \n    cout << \"The original set values of s1 are:\" << endl;  \n    print(s1);  \n  \n    // intentionally attempt a duplicate, single element  \n    auto ret = s1.insert(1);  \n    if (!ret.second){  \n        auto elem = *ret.first;  \n        cout << \"Insert failed, element with value 1 already exists.\"  \n            << endl << \"  The existing element is (\" << elem << \")\"  \n            << endl;  \n    }  \n    else{  \n        cout << \"The modified set values of s1 are:\" << endl;  \n        print(s1);  \n    }  \n    cout << endl;  \n  \n    // single element, with hint  \n    s1.insert(s1.end(), 30);  \n    cout << \"The modified set values of s1 are:\" << endl;  \n    print(s1);  \n    cout << endl;  \n  \n    // The templatized version inserting a jumbled range  \n    set<int> s2;  \n    vector<int> v;  \n    v.push_back(43);  \n    v.push_back(294);  \n    v.push_back(41);  \n    v.push_back(330);  \n    v.push_back(42);  \n    v.push_back(45);  \n  \n    cout << \"Inserting the following vector data into s2:\" << endl;  \n    print(v);  \n  \n    s2.insert(v.begin(), v.end());  \n  \n    cout << \"The modified set values of s2 are:\" << endl;  \n    print(s2);  \n    cout << endl;  \n  \n    // The templatized versions move-constructing elements  \n    set<string>  s3;  \n    string str1(\"blue\"), str2(\"green\");  \n  \n    // single element  \n    s3.insert(move(str1));  \n    cout << \"After the first move insertion, s3 contains:\" << endl;  \n    print(s3);  \n  \n    // single element with hint  \n    s3.insert(s3.end(), move(str2));  \n    cout << \"After the second move insertion, s3 contains:\" << endl;  \n    print(s3);  \n    cout << endl;  \n  \n    set<int> s4;  \n    // Insert the elements from an initializer_list  \n    s4.insert({ 4, 44, 2, 22, 3, 33, 1, 11, 5, 55 });  \n    cout << \"After initializer_list insertion, s4 contains:\" << endl;  \n    print(s4);  \n    cout << endl;  \n}  \n  \n```  \n  \n##  <a name=\"set__iterator\"></a>  set::iterator  \n A type that provides a constant [bidirectional iterator](../standard-library/bidirectional-iterator-tag-struct.md) that can read any element in a set.  \n  \n```  \ntypedef implementation-defined iterator;  \n```  \n  \n### Example  \n  See the example for [begin](#set__begin) for an example of how to declare and use an **iterator**.  \n  \n##  <a name=\"set__key_comp\"></a>  set::key_comp  \n Retrieves a copy of the comparison object used to order keys in a set.  \n  \n```  \nkey_compare key_comp() const;\n```  \n  \n### Return Value  \n Returns the function object that a set uses to order its elements, which is the template parameter `Traits`.  \n  \n For more information on `Traits` see the [set Class](../standard-library/set-class.md) topic.  \n  \n### Remarks  \n The stored object defines the member function:  \n  \n **bool operator()**( **const Key&**`_xVal`, **const Key&**`_yVal`);  \n  \n which returns **true** if `_xVal` precedes and is not equal to `_yVal` in the sort order.  \n  \n Note that both [key_compare](#set__key_compare) and [value_compare](#set__value_compare) are synonyms for the template parameter **Traits**. Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.  \n  \n### Example  \n  \n```cpp  \n// set_key_comp.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   set <int, less<int> > s1;  \n   set<int, less<int> >::key_compare kc1 = s1.key_comp( ) ;  \n   bool result1 = kc1( 2, 3 ) ;  \n   if( result1 == true )     \n   {  \n      cout << \"kc1( 2,3 ) returns value of true, \"  \n           << \"where kc1 is the function object of s1.\"  \n           << endl;  \n   }  \n   else     \n   {  \n      cout << \"kc1( 2,3 ) returns value of false \"  \n           << \"where kc1 is the function object of s1.\"  \n           << endl;  \n   }  \n  \n   set <int, greater<int> > s2;  \n   set<int, greater<int> >::key_compare kc2 = s2.key_comp( ) ;  \n   bool result2 = kc2( 2, 3 ) ;  \n   if(result2 == true)     \n   {  \n      cout << \"kc2( 2,3 ) returns value of true, \"  \n           << \"where kc2 is the function object of s2.\"  \n           << endl;  \n   }  \n   else     \n   {  \n      cout << \"kc2( 2,3 ) returns value of false, \"  \n           << \"where kc2 is the function object of s2.\"  \n           << endl;  \n   }  \n}  \n```  \n  \n```Output  \nkc1( 2,3 ) returns value of true, where kc1 is the function object of s1.  \nkc2( 2,3 ) returns value of false, where kc2 is the function object of s2.  \n```  \n  \n##  <a name=\"set__key_compare\"></a>  set::key_compare  \n A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the set.  \n  \n```  \ntypedef Traits key_compare;  \n```  \n  \n### Remarks  \n `key_compare` is a synonym for the template parameter `Traits`.  \n  \n For more information on `Traits` see the [set Class](../standard-library/set-class.md) topic.  \n  \n Note that both `key_compare` and [value_compare](#set__value_compare) are synonyms for the template parameter **Traits**. Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.  \n  \n### Example  \n  See the example for [key_comp](#set__key_comp) for an example of how to declare and use `key_compare`.  \n  \n##  <a name=\"set__key_type\"></a>  set::key_type  \n A type that describes an object stored as an element of a set in its capacity as sort key.  \n  \n```  \ntypedef Key key_type;  \n```  \n  \n### Remarks  \n `key_type` is a synonym for the template parameter `Key`.  \n  \n For more information on `Key`, see the Remarks section of the [set Class](../standard-library/set-class.md) topic.  \n  \n Note that both `key_type` and [value_type](#set__value_type) are synonyms for the template parameter **Key**. Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.  \n  \n### Example  \n  See the example for [value_type](#set__value_type) for an example of how to declare and use `key_type`.  \n  \n##  <a name=\"set__lower_bound\"></a>  set::lower_bound  \n Returns an iterator to the first element in a set with a key that is equal to or greater than a specified key.  \n  \n```  \nconst_iterator lower_bound(const Key& key) const;\n\niterator lower_bound(const Key& key);\n```  \n  \n### Parameters  \n ` key`  \n The argument key to be compared with the sort key of an element from the set being searched.  \n  \n### Return Value  \n An iterator or `const_iterator` that addresses the location of an element in a set that with a key that is equal to or greater than the argument key or that addresses the location succeeding the last element in the set if no match is found for the key.  \n  \n### Example  \n  \n```cpp  \n// set_lower_bound.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   set <int> s1;  \n   set <int> :: const_iterator s1_AcIter, s1_RcIter;  \n  \n   s1.insert( 10 );  \n   s1.insert( 20 );  \n   s1.insert( 30 );  \n  \n   s1_RcIter = s1.lower_bound( 20 );  \n   cout << \"The element of set s1 with a key of 20 is: \"  \n        << *s1_RcIter << \".\" << endl;  \n  \n   s1_RcIter = s1.lower_bound( 40 );  \n  \n   // If no match is found for the key, end( ) is returned  \n   if ( s1_RcIter == s1.end( ) )  \n      cout << \"The set s1 doesn't have an element \"  \n           << \"with a key of 40.\" << endl;  \n   else  \n      cout << \"The element of set s1 with a key of 40 is: \"  \n           << *s1_RcIter << \".\" << endl;  \n  \n   // The element at a specific location in the set can be found   \n   // by using a dereferenced iterator that addresses the location  \n   s1_AcIter = s1.end( );  \n   s1_AcIter--;  \n   s1_RcIter = s1.lower_bound( *s1_AcIter );  \n   cout << \"The element of s1 with a key matching \"  \n        << \"that of the last element is: \"  \n        << *s1_RcIter << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe element of set s1 with a key of 20 is: 20.  \nThe set s1 doesn't have an element with a key of 40.  \nThe element of s1 with a key matching that of the last element is: 30.  \n```  \n  \n##  <a name=\"set__max_size\"></a>  set::max_size  \n Returns the maximum length of the set.  \n  \n```  \nsize_type max_size() const;\n```  \n  \n### Return Value  \n The maximum possible length of the set.  \n  \n### Example  \n  \n```cpp  \n// set_max_size.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   set <int> s1;  \n   set <int>::size_type i;  \n  \n   i = s1.max_size( );     \n   cout << \"The maximum possible length \"  \n        << \"of the set is \" << i << \".\" << endl;  \n}  \n```  \n  \n##  <a name=\"set__operator_eq\"></a>  set::operator=  \n Replaces the elements of this `set` using elements from another `set`.  \n  \n```  \nset& operator=(const set& right);\n\nset& operator=(set&& right);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|` right`|The `set` providing new elements to be assigned to this `set`.|  \n  \n### Remarks  \n The first version of `operator=` uses an [lvalue reference](../cpp/lvalue-reference-declarator-amp.md) for ` right`, to copy elements from ` right` to this `set`.  \n  \n The second version uses an [rvalue reference](../cpp/rvalue-reference-declarator-amp-amp.md) for  right. It moves elements from ` right` to this `set`.  \n  \n Any elements in this `set` before the operator function executes are discarded.  \n  \n### Example  \n  \n```cpp  \n// set_operator_as.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n   {  \n   using namespace std;  \n   set<int> v1, v2, v3;  \n   set<int>::iterator iter;  \n  \n   v1.insert(10);  \n  \n   cout << \"v1 = \" ;  \n   for (iter = v1.begin(); iter != v1.end(); iter++)  \n      cout << *iter << \" \";  \n   cout << endl;  \n  \n   v2 = v1;  \n   cout << \"v2 = \";  \n   for (iter = v2.begin(); iter != v2.end(); iter++)  \n      cout << *iter << \" \";  \n   cout << endl;  \n  \n// move v1 into v2  \n   v2.clear();  \n   v2 = move(v1);  \n   cout << \"v2 = \";  \n   for (iter = v2.begin(); iter != v2.end(); iter++)  \n      cout << *iter << \" \";  \n   cout << endl;  \n   }  \n```  \n  \n##  <a name=\"set__pointer\"></a>  set::pointer  \n A type that provides a pointer to an element in a set.  \n  \n```  \ntypedef typename allocator_type::pointer pointer;  \n```  \n  \n### Remarks  \n A type **pointer** can be used to modify the value of an element.  \n  \n In most cases, an [iterator](#set__iterator) should be used to access the elements in a set object.  \n  \n##  <a name=\"set__rbegin\"></a>  set::rbegin  \n Returns an iterator addressing the first element in a reversed set.  \n  \n```  \nconst_reverse_iterator rbegin() const;\n\nreverse_iterator rbegin();\n```  \n  \n### Return Value  \n A reverse bidirectional iterator addressing the first element in a reversed set or addressing what had been the last element in the unreversed set.  \n  \n### Remarks  \n `rbegin` is used with a reversed set just as [begin](#set__begin) is used with a set.  \n  \n If the return value of `rbegin` is assigned to a `const_reverse_iterator`, then the set object cannot be modified. If the return value of `rbegin` is assigned to a `reverse_iterator`, then the set object can be modified.  \n  \n `rbegin` can be used to iterate through a set backwards.  \n  \n### Example  \n  \n```cpp  \n// set_rbegin.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   set <int> s1;  \n   set <int>::iterator s1_Iter;  \n   set <int>::reverse_iterator s1_rIter;  \n  \n   s1.insert( 10 );  \n   s1.insert( 20 );  \n   s1.insert( 30 );  \n  \n   s1_rIter = s1.rbegin( );  \n   cout << \"The first element in the reversed set is \"  \n        << *s1_rIter << \".\" << endl;  \n  \n   // begin can be used to start an iteration   \n   // throught a set in a forward order  \n   cout << \"The set is:\";  \n   for ( s1_Iter = s1.begin( ) ; s1_Iter != s1.end( ); s1_Iter++ )  \n      cout << \" \" << *s1_Iter;  \n   cout << endl;  \n  \n   // rbegin can be used to start an iteration   \n   // throught a set in a reverse order  \n   cout << \"The reversed set is:\";  \n   for ( s1_rIter = s1.rbegin( ) ; s1_rIter != s1.rend( ); s1_rIter++ )  \n      cout << \" \" << *s1_rIter;  \n   cout << endl;  \n  \n   // A set element can be erased by dereferencing to its key   \n   s1_rIter = s1.rbegin( );  \n   s1.erase ( *s1_rIter );  \n  \n   s1_rIter = s1.rbegin( );  \n   cout << \"After the erasure, the first element \"  \n        << \"in the reversed set is \"<< *s1_rIter << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe first element in the reversed set is 30.  \nThe set is: 10 20 30  \nThe reversed set is: 30 20 10  \nAfter the erasure, the first element in the reversed set is 20.  \n```  \n  \n##  <a name=\"set__reference\"></a>  set::reference  \n A type that provides a reference to an element stored in a set.  \n  \n```  \ntypedef typename allocator_type::reference reference;  \n```  \n  \n### Example  \n  \n```cpp  \n// set_reference.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   set <int> s1;  \n  \n   s1.insert( 10 );  \n   s1.insert( 20 );  \n  \n   // Declare and initialize a reference &Ref1 to the 1st element  \n   const int &Ref1 = *s1.begin( );  \n  \n   cout << \"The first element in the set is \"  \n        << Ref1 << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe first element in the set is 10.  \n```  \n  \n##  <a name=\"set__rend\"></a>  set::rend  \n Returns an iterator that addresses the location succeeding the last element in a reversed set.  \n  \n```  \nconst_reverse_iterator rend() const;\n\nreverse_iterator rend();\n```  \n  \n### Return Value  \n A reverse bidirectional iterator that addresses the location succeeding the last element in a reversed set (the location that had preceded the first element in the unreversed set).  \n  \n### Remarks  \n `rend` is used with a reversed set just as [end](#set__end) is used with a set.  \n  \n If the return value of `rend` is assigned to a `const_reverse_iterator`, then the set object cannot be modified. If the return value of `rend` is assigned to a `reverse_iterator`, then the set object can be modified. The value returned by `rend` should not be dereferenced.  \n  \n `rend` can be used to test to whether a reverse iterator has reached the end of its set.  \n  \n### Example  \n  \n```cpp  \n// set_rend.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main() {  \n   using namespace std;     \n   set <int> s1;  \n   set <int>::iterator s1_Iter;  \n   set <int>::reverse_iterator s1_rIter;  \n   set <int>::const_reverse_iterator s1_crIter;  \n  \n   s1.insert( 10 );  \n   s1.insert( 20 );  \n   s1.insert( 30 );  \n  \n   s1_rIter = s1.rend( );  \n   s1_rIter--;  \n   cout << \"The last element in the reversed set is \"  \n        << *s1_rIter << \".\" << endl;  \n  \n   // end can be used to terminate an iteration   \n   // throught a set in a forward order  \n   cout << \"The set is: \";  \n   for ( s1_Iter = s1.begin( ) ; s1_Iter != s1.end( ); s1_Iter++ )  \n      cout << *s1_Iter << \" \";  \n   cout << \".\" << endl;  \n  \n   // rend can be used to terminate an iteration   \n   // throught a set in a reverse order  \n   cout << \"The reversed set is: \";  \n   for ( s1_rIter = s1.rbegin( ) ; s1_rIter != s1.rend( ); s1_rIter++ )  \n      cout << *s1_rIter << \" \";  \n   cout << \".\" << endl;  \n  \n   s1_rIter = s1.rend( );  \n   s1_rIter--;  \n   s1.erase ( *s1_rIter );  \n  \n   s1_rIter = s1.rend( );  \n   --s1_rIter;  \n   cout << \"After the erasure, the last element in the \"  \n        << \"reversed set is \" << *s1_rIter << \".\" << endl;  \n}  \n```  \n  \n##  <a name=\"set__reverse_iterator\"></a>  set::reverse_iterator  \n A type that provides a bidirectional iterator that can read or modify an element in a reversed set.  \n  \n```  \ntypedef std::reverse_iterator<iterator> reverse_iterator;  \n```  \n  \n### Remarks  \n A type `reverse_iterator` is use to iterate through the set in reverse.  \n  \n### Example  \n  See the example for [rbegin](#set__rbegin) for an example of how to declare and use `reverse_iterator`.  \n  \n##  <a name=\"set__set\"></a>  set::set  \n Constructs a set that is empty or that is a copy of all or part of some other set.  \n  \n```  \nset();\n\nexplicit set(\n    const Traits& Comp);\n\nset(\n    const Traits& Comp,  \n    const Allocator& Al);\n\nset(\n    const set& Right);\n\nset(\n    set&& Right);\n\nset(\n    initializer_list<Type> IList);\n\nset(\n    initializer_list<Type> IList,  \n    const Compare& Comp);\n\nset(\n    initializer_list<Type> IList,  \n    const Compare& Comp,   \n    const Allocator& Al);\n\n \ntemplate <class InputIterator>  \nset(\n InputIterator First,  \n    InputIterator Last);\n\ntemplate <class InputIterator>  \nset(\n InputIterator First,  \n    InputIterator Last,  \n    const Traits& Comp);\n\ntemplate <class InputIterator>  \nset(\n InputIterator First,  \n    InputIterator Last,  \n    const Traits& Comp,  \n    const Allocator& Al);\n```  \n  \n### Parameters  \n  \n|||  \n|-|-|  \n|Parameter|Description|  \n|`Al`|The storage allocator class to be used for this set object, which defaults to **Allocator**.|  \n|`Comp`|The comparison function of type `const Traits` used to order the elements in the set, which defaults to `Compare`.|  \n|`Rght`|The set of which the constructed set is to be a copy.|  \n|`First`|The position of the first element in the range of elements to be copied.|  \n|`Last`|The position of the first element beyond the range of elements to be copied.|  \n|`IList`|The initializer_list from which to copy the elements.|  \n  \n### Remarks  \n All constructors store a type of allocator object that manages memory storage for the set and that can later be returned by calling [get_allocator](#set__get_allocator). The allocator parameter is often omitted in the class declarations and preprocessing macros used to substitute alternative allocators.  \n  \n All constructors initialize their sets.  \n  \n All constructors store a function object of type **Traits** that is used to establish an order among the keys of the set and that can later be returned by calling [key_comp](#set__key_comp).  \n  \n The first three constructors specify an empty initial set, the second specifying the type of comparison function ( `comp`) to be used in establishing the order of the elements and the third explicitly specifying the allocator type ( `al`) to be used. The keyword **explicit** suppresses certain kinds of automatic type conversion.  \n  \n The fourth constructor specifies a copy of the set `right`.  \n  \n The next three constructors use an initializer_list to specify the elements.  \n  \n The next three constructors copy the range [ `first`, `last`) of a set with increasing explicitness in specifying the type of comparison function of class **Traits** and **Allocator**.  \n  \n The eighth constructor specifies a copy of the set by moving `right`.  \n  \n### Example  \n  \n```cpp  \n// set_set.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main()  \n{  \n    using namespace std;  \n  \n    // Create an empty set s0 of key type integer  \n    set <int> s0;  \n  \n    // Create an empty set s1 with the key comparison  \n    // function of less than, then insert 4 elements  \n    set <int, less<int> > s1;  \n    s1.insert(10);  \n    s1.insert(20);  \n    s1.insert(30);  \n    s1.insert(40);  \n  \n    // Create an empty set s2 with the key comparison  \n    // function of less than, then insert 2 elements  \n    set <int, less<int> > s2;  \n    s2.insert(10);  \n    s2.insert(20);  \n  \n    // Create a set s3 with the   \n    // allocator of set s1  \n    set <int>::allocator_type s1_Alloc;  \n    s1_Alloc = s1.get_allocator();  \n    set <int> s3(less<int>(), s1_Alloc);  \n    s3.insert(30);  \n  \n    // Create a copy, set s4, of set s1  \n    set <int> s4(s1);  \n  \n    // Create a set s5 by copying the range s1[ first,  last)  \n    set <int>::const_iterator s1_bcIter, s1_ecIter;  \n    s1_bcIter = s1.begin();  \n    s1_ecIter = s1.begin();  \n    s1_ecIter++;  \n    s1_ecIter++;  \n    set <int> s5(s1_bcIter, s1_ecIter);  \n  \n    // Create a set s6 by copying the range s4[ first,  last)  \n    // and with the allocator of set s2  \n    set <int>::allocator_type s2_Alloc;  \n    s2_Alloc = s2.get_allocator();  \n    set <int> s6(s4.begin(), ++s4.begin(), less<int>(), s2_Alloc);  \n  \n    cout << \"s1 =\";  \n    for (auto i : s1)  \n        cout << \" \" << i;  \n    cout << endl;  \n  \n    cout << \"s2 = \" << *s2.begin() << \" \" << *++s2.begin() << endl;  \n  \n    cout << \"s3 =\";  \n    for (auto i : s3)  \n        cout << \" \" << i;  \n    cout << endl;  \n  \n    cout << \"s4 =\";  \n    for (auto i : s4)  \n        cout << \" \" << i;  \n    cout << endl;  \n  \n    cout << \"s5 =\";  \n    for (auto i : s5)  \n        cout << \" \" << i;  \n    cout << endl;  \n  \n    cout << \"s6 =\";  \n    for (auto i : s6)  \n        cout << \" \" << i;  \n    cout << endl;  \n  \n    // Create a set by moving s5  \n    set<int> s7(move(s5));  \n    cout << \"s7 =\";  \n    for (auto i : s7)  \n        cout << \" \" << i;  \n    cout << endl;  \n  \n    // Create a set with an initializer_list  \n    cout << \"s8 =\";  \n    set<int> s8{ { 1, 2, 3, 4 } };  \n    for (auto i : s8)  \n        cout << \" \" << i;  \n    cout << endl;  \n  \n    cout << \"s9 =\";  \n    set<int> s9{ { 5, 6, 7, 8 }, less<int>() };  \n    for (auto i : s9)  \n        cout << \" \" << i;  \n    cout << endl;  \n  \n    cout << \"s10 =\";  \n    set<int> s10{ { 10, 20, 30, 40 }, less<int>(), s9.get_allocator() };  \n    for (auto i : s10)  \n        cout << \" \" << i;  \n    cout << endl;  \n}  \n  \n```  \n  \n```Output  \ns1 = 10 20 30 40s2 = 10 20s3 = 30s4 = 10 20 30 40s5 = 10 20s6 = 10s7 = 10 20s8 = 1 2 3 4s9 = 5 6 7 8s10 = 10 20 30 40  \n```  \n  \n##  <a name=\"set__size\"></a>  set::size  \n Returns the number of elements in the set.  \n  \n```  \nsize_type size() const;\n```  \n  \n### Return Value  \n The current length of the set.  \n  \n### Example  \n  \n```cpp  \n// set_size.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   set <int> s1;  \n   set <int> :: size_type i;  \n  \n   s1.insert( 1 );  \n   i = s1.size( );  \n   cout << \"The set length is \" << i << \".\" << endl;  \n  \n   s1.insert( 2 );  \n   i = s1.size( );  \n   cout << \"The set length is now \" << i << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe set length is 1.  \nThe set length is now 2.  \n```  \n  \n##  <a name=\"set__size_type\"></a>  set::size_type  \n An unsigned integer type that can represent the number of elements in a set.  \n  \n```  \ntypedef typename allocator_type::size_type size_type;  \n```  \n  \n### Example  \n  See the example for [size](#set__size) for an example of how to declare and use `size_type`  \n  \n##  <a name=\"set__swap\"></a>  set::swap  \n Exchanges the elements of two sets.  \n  \n```  \nvoid swap(\n    set<Key, Traits, Allocator>& right);\n```  \n  \n### Parameters  \n ` right`  \n The argument set providing the elements to be swapped with the target set.  \n  \n### Remarks  \n The member function invalidates no references, pointers, or iterators that designate elements in the two sets whose elements are being exchanged.  \n  \n### Example  \n  \n```cpp  \n// set_swap.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   set <int> s1, s2, s3;  \n   set <int>::iterator s1_Iter;  \n  \n   s1.insert( 10 );  \n   s1.insert( 20 );  \n   s1.insert( 30 );  \n   s2.insert( 100 );  \n   s2.insert( 200 );  \n   s3.insert( 300 );  \n  \n   cout << \"The original set s1 is:\";  \n   for ( s1_Iter = s1.begin( ); s1_Iter != s1.end( ); s1_Iter++ )  \n      cout << \" \" << *s1_Iter;  \n   cout   << \".\" << endl;  \n  \n   // This is the member function version of swap  \n   s1.swap( s2 );  \n  \n   cout << \"After swapping with s2, list s1 is:\";  \n   for ( s1_Iter = s1.begin( ); s1_Iter != s1.end( ); s1_Iter++ )  \n      cout << \" \" << *s1_Iter;  \n   cout  << \".\" << endl;  \n  \n   // This is the specialized template version of swap  \n   swap( s1, s3 );  \n  \n   cout << \"After swapping with s3, list s1 is:\";  \n   for ( s1_Iter = s1.begin( ); s1_Iter != s1.end( ); s1_Iter++ )  \n      cout << \" \" << *s1_Iter;  \n   cout   << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe original set s1 is: 10 20 30.  \nAfter swapping with s2, list s1 is: 100 200.  \nAfter swapping with s3, list s1 is: 300.  \n```  \n  \n##  <a name=\"set__upper_bound\"></a>  set::upper_bound  \n Returns an iterator to the first element in a set that with a key that is greater than a specified key.  \n  \n```  \nconst_iterator upper_bound(const Key& key) const;\n\niterator upper_bound(const Key& key);\n```  \n  \n### Parameters  \n ` key`  \n The argument key to be compared with the sort key of an element from the set being searched.  \n  \n### Return Value  \n An **iterator** or `const_iterator` that addresses the location of an element in a set that with a key that is greater than the argument key, or that addresses the location succeeding the last element in the set if no match is found for the key.  \n  \n### Example  \n  \n```cpp  \n// set_upper_bound.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;     \n   set <int> s1;  \n   set <int> :: const_iterator s1_AcIter, s1_RcIter;  \n  \n   s1.insert( 10 );  \n   s1.insert( 20 );  \n   s1.insert( 30 );  \n  \n   s1_RcIter = s1.upper_bound( 20 );  \n   cout << \"The first element of set s1 with a key greater \"  \n        << \"than 20 is: \" << *s1_RcIter << \".\" << endl;  \n  \n   s1_RcIter = s1.upper_bound( 30 );  \n  \n   // If no match is found for the key, end( ) is returned  \n   if ( s1_RcIter == s1.end( ) )  \n      cout << \"The set s1 doesn't have an element \"  \n           << \"with a key greater than 30.\" << endl;  \n   else  \n      cout << \"The element of set s1 with a key > 40 is: \"  \n           << *s1_RcIter << \".\" << endl;  \n  \n   // The element at a specific location in the set can be found   \n   // by using a dereferenced iterator addressing the location  \n   s1_AcIter = s1.begin( );  \n   s1_RcIter = s1.upper_bound( *s1_AcIter );  \n   cout << \"The first element of s1 with a key greater than\"  \n        << endl << \"that of the initial element of s1 is: \"  \n        << *s1_RcIter << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe first element of set s1 with a key greater than 20 is: 30.  \nThe set s1 doesn't have an element with a key greater than 30.  \nThe first element of s1 with a key greater than  \nthat of the initial element of s1 is: 20.  \n```  \n  \n##  <a name=\"set__value_comp\"></a>  set::value_comp  \n Retrieves a copy of the comparison object used to order element values in a set.  \n  \n```  \nvalue_compare value_comp() const;\n```  \n  \n### Return Value  \n Returns the function object that a set uses to order its elements, which is the template parameter `Traits`.  \n  \n For more information on `Traits` see the [set Class](../standard-library/set-class.md) topic.  \n  \n### Remarks  \n The stored object defines the member function:  \n  \n **bool operator**( **const Key&**`_xVal`, **const Key&**`_yVal`);  \n  \n which returns **true** if `_xVal` precedes and is not equal to `_yVal` in the sort order.  \n  \n Note that both [value_compare](#set__value_compare) and [key_compare](#set__key_compare) are synonyms for the template parameter **Traits**. Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.  \n  \n### Example  \n  \n```cpp  \n// set_value_comp.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n  \n   set <int, less<int> > s1;  \n   set <int, less<int> >::value_compare vc1 = s1.value_comp( );  \n   bool result1 = vc1( 2, 3 );  \n   if( result1 == true )     \n   {  \n      cout << \"vc1( 2,3 ) returns value of true, \"  \n           << \"where vc1 is the function object of s1.\"  \n           << endl;  \n   }  \n   else     \n   {  \n      cout << \"vc1( 2,3 ) returns value of false, \"  \n           << \"where vc1 is the function object of s1.\"  \n           << endl;  \n   }  \n  \n   set <int, greater<int> > s2;  \n   set<int, greater<int> >::value_compare vc2 = s2.value_comp( );  \n   bool result2 = vc2( 2, 3 );  \n   if( result2 == true )     \n   {  \n      cout << \"vc2( 2,3 ) returns value of true, \"  \n           << \"where vc2 is the function object of s2.\"  \n           << endl;  \n   }  \n   else     \n   {  \n      cout << \"vc2( 2,3 ) returns value of false, \"  \n           << \"where vc2 is the function object of s2.\"  \n           << endl;  \n   }  \n}  \n```  \n  \n```Output  \nvc1( 2,3 ) returns value of true, where vc1 is the function object of s1.  \nvc2( 2,3 ) returns value of false, where vc2 is the function object of s2.  \n```  \n  \n##  <a name=\"set__value_compare\"></a>  set::value_compare  \n A type that provides a function object that can compare two element values to determine their relative order in the set.  \n  \n```  \ntypedef key_compare value_compare;  \n```  \n  \n### Remarks  \n `value_compare` is a synonym for the template parameter `Traits`.  \n  \n For more information on `Traits` see the [set Class](../standard-library/set-class.md) topic.  \n  \n Note that both [key_compare](#set__key_compare) and **value_compare** are synonyms for the template parameter **Traits**. Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.  \n  \n### Example  \n  See the example for [value_comp](#set__value_comp) for an example of how to declare and use `value_compare`.  \n  \n##  <a name=\"set__value_type\"></a>  set::value_type  \n A type that describes an object stored as an element of a set in its capacity as a value.  \n  \n```  \ntypedef Key value_type;  \n```  \n  \n### Remarks  \n `value_type` is a synonym for the template parameter `Key`.  \n  \n For more information on `Key`, see the Remarks section of the [set Class](../standard-library/set-class.md) topic.  \n  \n Note that both [key_type](#set__key_type) and `value_type` are synonyms for the template parameter **Key**. Both types are provided for the set and multiset classes, where they are identical, for compatibility with the map and multimap classes, where they are distinct.  \n  \n### Example  \n  \n```cpp  \n// set_value_type.cpp  \n// compile with: /EHsc  \n#include <set>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   set <int> s1;  \n   set <int>::iterator s1_Iter;  \n  \n   set <int>::value_type svt_Int;   // Declare value_type  \n   svt_Int = 10;            // Initialize value_type  \n  \n   set <int> :: key_type skt_Int;   // Declare key_type  \n   skt_Int = 20;             // Initialize key_type  \n  \n   s1.insert( svt_Int );         // Insert value into s1  \n   s1.insert( skt_Int );         // Insert key into s1  \n  \n   // A set accepts key_types or value_types as elements  \n   cout << \"The set has elements:\";  \n   for ( s1_Iter = s1.begin( ) ; s1_Iter != s1.end( ); s1_Iter++)  \n      cout << \" \" << *s1_Iter;  \n   cout << \".\" << endl;  \n}  \n```  \n  \n```Output  \nThe set has elements: 10 20.  \n```  \n  \n## See Also  \n [\\<set>](../standard-library/set.md)   \n [Containers](../cpp/containers-modern-cpp.md)   \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n"}