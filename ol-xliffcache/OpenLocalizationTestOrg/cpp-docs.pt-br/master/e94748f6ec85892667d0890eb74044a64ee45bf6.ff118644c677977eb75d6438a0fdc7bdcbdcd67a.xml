{"nodes":[{"pos":[12,55],"content":"Dual Interfaces and Events | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Dual Interfaces and Events | Microsoft Docs","pos":[0,43]}]},{"content":"Dual Interfaces and Events","pos":[624,650]},{"content":"While it is possible to design an event interface as a dual, there are a number of good design reasons not to do so.","pos":[651,767]},{"content":"The fundamental reason is that the source of the event will only fire the event via the vtable or via <ph id=\"ph1\">`Invoke`</ph>, not both.","pos":[768,889],"source":" The fundamental reason is that the source of the event will only fire the event via the vtable or via `Invoke`, not both."},{"content":"If the event source fires the event as a direct vtable method call, the <ph id=\"ph1\">`IDispatch`</ph> methods will never be used and it's clear that the interface should have been a pure vtable interface.","pos":[890,1076],"source":" If the event source fires the event as a direct vtable method call, the `IDispatch` methods will never be used and it's clear that the interface should have been a pure vtable interface."},{"content":"If the event source fires the event as a call to <ph id=\"ph1\">`Invoke`</ph>, the vtable methods will never be used and it's clear that the interface should have been a dispinterface.","pos":[1077,1241],"source":" If the event source fires the event as a call to `Invoke`, the vtable methods will never be used and it's clear that the interface should have been a dispinterface."},{"content":"If you define your event interfaces as duals, you'll be requiring clients to implement part of an interface that will never be used.","pos":[1242,1374]},{"pos":[1382,1618],"content":"[!NOTE]\n This argument does not apply to dual interfaces, in general. From an implementation perspective, duals are a quick, convenient, and well-supported way of implementing interfaces that are accessible to a wide range of clients.","leadings":["","> "],"nodes":[{"content":" This argument does not apply to dual interfaces, in general. From an implementation perspective, duals are a quick, convenient, and well-supported way of implementing interfaces that are accessible to a wide range of clients.","pos":[8,234],"nodes":[{"content":"This argument does not apply to dual interfaces, in general.","pos":[1,61]},{"content":"From an implementation perspective, duals are a quick, convenient, and well-supported way of implementing interfaces that are accessible to a wide range of clients.","pos":[62,226]}]}]},{"content":"There are further reasons to avoid dual event interfaces; neither Visual Basic nor Internet Explorer support them.","pos":[1625,1739]},{"content":"See Also","pos":[1748,1756]},{"content":"Dual Interfaces and ATL","pos":[1761,1784]}],"content":"---\ntitle: \"Dual Interfaces and Events | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"events [C++], dual interfaces\"\n  - \"dual interfaces, events\"\nms.assetid: bb382f7c-e885-4274-bf07-83f3602615d2\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Dual Interfaces and Events\nWhile it is possible to design an event interface as a dual, there are a number of good design reasons not to do so. The fundamental reason is that the source of the event will only fire the event via the vtable or via `Invoke`, not both. If the event source fires the event as a direct vtable method call, the `IDispatch` methods will never be used and it's clear that the interface should have been a pure vtable interface. If the event source fires the event as a call to `Invoke`, the vtable methods will never be used and it's clear that the interface should have been a dispinterface. If you define your event interfaces as duals, you'll be requiring clients to implement part of an interface that will never be used.  \n  \n> [!NOTE]\n>  This argument does not apply to dual interfaces, in general. From an implementation perspective, duals are a quick, convenient, and well-supported way of implementing interfaces that are accessible to a wide range of clients.  \n  \n There are further reasons to avoid dual event interfaces; neither Visual Basic nor Internet Explorer support them.  \n  \n## See Also  \n [Dual Interfaces and ATL](../atl/dual-interfaces-and-atl.md)\n\n"}