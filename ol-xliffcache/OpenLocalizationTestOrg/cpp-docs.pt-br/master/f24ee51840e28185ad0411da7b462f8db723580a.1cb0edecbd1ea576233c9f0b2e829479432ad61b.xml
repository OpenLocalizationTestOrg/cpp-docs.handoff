{"nodes":[{"pos":[12,51],"content":"CMemoryException Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMemoryException Class | Microsoft Docs","pos":[0,39]}]},{"content":"CMemoryException Class","pos":[746,768]},{"content":"Represents an out-of-memory exception condition.","pos":[769,817]},{"content":"Syntax","pos":[826,832]},{"content":"Members","pos":[907,914]},{"content":"Public Constructors","pos":[924,943]},{"content":"Name","pos":[950,954]},{"content":"Description","pos":[955,966]},{"content":"CMemoryException::CMemoryException","pos":[1005,1039]},{"pos":[1078,1117],"content":"Constructs a <ph id=\"ph1\">`CMemoryException`</ph> object.","source":"Constructs a `CMemoryException` object."},{"content":"Remarks","pos":[1127,1134]},{"content":"No further qualification is necessary or possible.","pos":[1138,1188]},{"content":"Memory exceptions are thrown automatically by <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept>.","pos":[1189,1243],"source":" Memory exceptions are thrown automatically by **new**."},{"content":"If you write your own memory functions, using <ph id=\"ph1\">`malloc`</ph>, for example, then you are responsible for throwing memory exceptions.","pos":[1244,1369],"source":" If you write your own memory functions, using `malloc`, for example, then you are responsible for throwing memory exceptions."},{"pos":[1376,1503],"content":"For more information on <ph id=\"ph1\">`CMemoryException`</ph>, see the article <bpt id=\"p1\">[</bpt>Exception Handling (MFC)<ept id=\"p1\">](../../mfc/exception-handling-in-mfc.md)</ept>.","source":"For more information on `CMemoryException`, see the article [Exception Handling (MFC)](../../mfc/exception-handling-in-mfc.md)."},{"content":"Inheritance Hierarchy","pos":[1512,1533]},{"content":"CObject","pos":[1538,1545]},{"content":"CException","pos":[1592,1602]},{"content":"CSimpleException","pos":[1652,1668]},{"content":"Requirements","pos":[1750,1762]},{"pos":[1766,1783],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afx.h","source":"**Header:** afx.h"},{"pos":[1844,1878],"content":"CMemoryException::CMemoryException"},{"pos":[1882,1921],"content":"Constructs a <ph id=\"ph1\">`CMemoryException`</ph> object.","source":"Constructs a `CMemoryException` object."},{"content":"Remarks","pos":[1968,1975]},{"content":"Do not use this constructor directly, but rather call the global function <bpt id=\"p1\">[</bpt>AfxThrowMemoryException<ept id=\"p1\">](exception-processing.md#afxthrowmemoryexception)</ept>.","pos":[1979,2128],"source":"Do not use this constructor directly, but rather call the global function [AfxThrowMemoryException](exception-processing.md#afxthrowmemoryexception)."},{"content":"this global function can succeed in an out-of-memory situation because it constructs the exception object in previously allocated memory.","pos":[2129,2266]},{"content":"for more information about exception processing, see the article <bpt id=\"p1\">[</bpt>exceptions<ept id=\"p1\">](../exception-handling-in-mfc.md)</ept>.","pos":[2267,2378],"source":" for more information about exception processing, see the article [exceptions](../exception-handling-in-mfc.md)."},{"content":"See Also","pos":[2387,2395]},{"content":"CException Class","pos":[2400,2416]},{"content":"Hierarchy Chart","pos":[2444,2459]}],"content":"---\ntitle: \"CMemoryException Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMemoryException\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMemoryException class\"\n  - \"memory exceptions\"\n  - \"exceptions, memory type\"\n  - \"C++ exception handling, memory\"\n  - \"memory, exception handling\"\nms.assetid: 9af0ed57-d12a-45ca-82b5-c910a60f7edf\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMemoryException Class\nRepresents an out-of-memory exception condition.  \n  \n## Syntax  \n  \n```  \nclass CMemoryException : public CSimpleException  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMemoryException::CMemoryException](#cmemoryexception__cmemoryexception)|Constructs a `CMemoryException` object.|  \n  \n## Remarks  \n No further qualification is necessary or possible. Memory exceptions are thrown automatically by **new**. If you write your own memory functions, using `malloc`, for example, then you are responsible for throwing memory exceptions.  \n  \n For more information on `CMemoryException`, see the article [Exception Handling (MFC)](../../mfc/exception-handling-in-mfc.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CException](../../mfc/reference/cexception-class.md)  \n  \n [CSimpleException](../../mfc/reference/csimpleexception-class.md)  \n  \n `CMemoryException`  \n  \n## Requirements  \n **Header:** afx.h  \n  \n##  <a name=\"cmemoryexception__cmemoryexception\"></a>  CMemoryException::CMemoryException  \n Constructs a `CMemoryException` object.  \n  \n```  \nCMemoryException();  \n```  \n  \n### Remarks  \n Do not use this constructor directly, but rather call the global function [AfxThrowMemoryException](exception-processing.md#afxthrowmemoryexception). this global function can succeed in an out-of-memory situation because it constructs the exception object in previously allocated memory. for more information about exception processing, see the article [exceptions](../exception-handling-in-mfc.md).  \n  \n## See Also  \n [CException Class](cexception-class.md)   \n [Hierarchy Chart](../hierarchy-chart.md)\n\n\n\n"}