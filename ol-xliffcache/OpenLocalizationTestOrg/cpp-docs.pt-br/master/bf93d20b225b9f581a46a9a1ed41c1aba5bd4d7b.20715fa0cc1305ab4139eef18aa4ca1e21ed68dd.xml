{"nodes":[{"pos":[12,65],"content":"hash_multimap::lower_bound (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"hash_multimap::lower_bound (STL-CLR) | Microsoft Docs","pos":[0,53]}]},{"content":"hash_multimap::lower_bound (STL/CLR)","pos":[660,696]},{"content":"Finds beginning of range that matches a specified key.","pos":[697,751]},{"content":"Syntax","pos":[760,766]},{"content":"Parameters","pos":[830,840]},{"content":"key","pos":[844,847]},{"content":"Key value to search for.","pos":[851,875]},{"content":"Remarks","pos":[884,891]},{"content":"The member function determines the first element <ph id=\"ph1\">`X`</ph> in the controlled sequence that hashes to the same bucket as <ph id=\"ph2\">`key`</ph> and has equivalent ordering to <ph id=\"ph3\">`key`</ph>.","pos":[895,1052],"source":"The member function determines the first element `X` in the controlled sequence that hashes to the same bucket as `key` and has equivalent ordering to `key`."},{"content":"If no such element exists, it returns <bpt id=\"p1\">[</bpt>hash_multimap::end (STL/CLR)<ept id=\"p1\">](../dotnet/hash-multimap-end-stl-clr.md)</ept><ph id=\"ph1\">`()`</ph>; otherwise it returns an iterator that designates <ph id=\"ph2\">`X`</ph>.","pos":[1053,1220],"source":" If no such element exists, it returns [hash_multimap::end (STL/CLR)](../dotnet/hash-multimap-end-stl-clr.md)`()`; otherwise it returns an iterator that designates `X`."},{"content":"You use it to locate the beginning of a sequence of elements currently in the controlled sequence that match a specified key.","pos":[1221,1346]},{"content":"Example","pos":[1355,1362]},{"content":"Requirements","pos":[2570,2582]},{"pos":[2586,2616],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/hash_map&gt;","source":"**Header:** \\<cliext/hash_map>"},{"pos":[2623,2644],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2653,2661]},{"content":"hash_multimap (STL/CLR)","pos":[2666,2689]},{"content":"hash_multimap::count (STL/CLR)","pos":[2732,2762]},{"content":"hash_multimap::equal_range (STL/CLR)","pos":[2811,2847]},{"content":"hash_multimap::find (STL/CLR)","pos":[2902,2931]},{"content":"hash_multimap::upper_bound (STL/CLR)","pos":[2979,3015]}],"content":"---\ntitle: \"hash_multimap::lower_bound (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::hash_multimap::lower_bound\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"lower_bound member [STL/CLR]\"\nms.assetid: c61091ef-8364-4447-bdd2-a402cbc05f05\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# hash_multimap::lower_bound (STL/CLR)\nFinds beginning of range that matches a specified key.  \n  \n## Syntax  \n  \n```  \niterator lower_bound(key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n The member function determines the first element `X` in the controlled sequence that hashes to the same bucket as `key` and has equivalent ordering to `key`. If no such element exists, it returns [hash_multimap::end (STL/CLR)](../dotnet/hash-multimap-end-stl-clr.md)`()`; otherwise it returns an iterator that designates `X`. You use it to locate the beginning of a sequence of elements currently in the controlled sequence that match a specified key.  \n  \n## Example  \n  \n```  \n// cliext_hash_multimap_lower_bound.cpp   \n// compile with: /clr   \n#include <cliext/hash_map>   \n  \ntypedef cliext::hash_multimap<wchar_t, int> Myhash_multimap;   \nint main()   \n    {   \n    Myhash_multimap c1;   \n    c1.insert(Myhash_multimap::make_value(L'a', 1));   \n    c1.insert(Myhash_multimap::make_value(L'b', 2));   \n    c1.insert(Myhash_multimap::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Myhash_multimap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"lower_bound(L'x')==end() = {0}\",   \n        c1.lower_bound(L'x') == c1.end());   \n  \n    Myhash_multimap::iterator it = c1.lower_bound(L'a');   \n    System::Console::WriteLine(\"*lower_bound(L'a') = [{0} {1}]\",   \n        it->first, it->second);   \n    it = c1.lower_bound(L'b');   \n    System::Console::WriteLine(\"*lower_bound(L'b') = [{0} {1}]\",   \n        it->first, it->second);   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [a 1] [b 2] [c 3]  \nlower_bound(L'x')==end() = True  \n*lower_bound(L'a') = [a 1]  \n*lower_bound(L'b') = [b 2]  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/hash_map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [hash_multimap (STL/CLR)](../dotnet/hash-multimap-stl-clr.md)   \n [hash_multimap::count (STL/CLR)](../dotnet/hash-multimap-count-stl-clr.md)   \n [hash_multimap::equal_range (STL/CLR)](../dotnet/hash-multimap-equal-range-stl-clr.md)   \n [hash_multimap::find (STL/CLR)](../dotnet/hash-multimap-find-stl-clr.md)   \n [hash_multimap::upper_bound (STL/CLR)](../dotnet/hash-multimap-upper-bound-stl-clr.md)"}