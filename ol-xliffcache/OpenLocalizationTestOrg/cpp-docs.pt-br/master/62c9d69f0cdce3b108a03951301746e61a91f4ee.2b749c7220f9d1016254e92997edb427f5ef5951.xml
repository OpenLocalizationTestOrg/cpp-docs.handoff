{"nodes":[{"pos":[12,46],"content":"Drawing in a View | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Drawing in a View | Microsoft Docs","pos":[0,34]}]},{"content":"Drawing in a View","pos":[763,780]},{"content":"Nearly all drawing in your application occurs in the view's <ph id=\"ph1\">`OnDraw`</ph> member function, which you must override in your view class.","pos":[781,910],"source":"Nearly all drawing in your application occurs in the view's `OnDraw` member function, which you must override in your view class."},{"content":"(The exception is mouse drawing, discussed in <bpt id=\"p1\">[</bpt>Interpreting User Input Through a View<ept id=\"p1\">](../mfc/interpreting-user-input-through-a-view.md)</ept>.) Your <ph id=\"ph1\">`OnDraw`</ph> override:","pos":[911,1073],"source":" (The exception is mouse drawing, discussed in [Interpreting User Input Through a View](../mfc/interpreting-user-input-through-a-view.md).) Your `OnDraw` override:"},{"content":"Gets data by calling the document member functions you provide.","pos":[1083,1146]},{"pos":[1156,1267],"content":"Displays the data by calling member functions of a device-context object that the framework passes to <ph id=\"ph1\">`OnDraw`</ph>.","source":"Displays the data by calling member functions of a device-context object that the framework passes to `OnDraw`."},{"content":"When a document's data changes in some way, the view must be redrawn to reflect the changes.","pos":[1274,1366]},{"content":"Typically, this happens when the user makes a change through a view on the document.","pos":[1367,1451]},{"content":"In this case, the view calls the document's <bpt id=\"p1\">[</bpt>UpdateAllViews<ept id=\"p1\">](../mfc/reference/cdocument-class.md#cdocument__updateallviews)</ept> member function to notify all views on the same document to update themselves.","pos":[1452,1654],"source":" In this case, the view calls the document's [UpdateAllViews](../mfc/reference/cdocument-class.md#cdocument__updateallviews) member function to notify all views on the same document to update themselves."},{"content":"calls each view's <bpt id=\"p1\">[</bpt>OnUpdate<ept id=\"p1\">](../mfc/reference/cview-class.md#cview__onupdate)</ept> member function.","pos":[1672,1766],"source":" calls each view's [OnUpdate](../mfc/reference/cview-class.md#cview__onupdate) member function."},{"content":"The default implementation of <ph id=\"ph1\">`OnUpdate`</ph> invalidates the view's entire client area.","pos":[1767,1850],"source":" The default implementation of `OnUpdate` invalidates the view's entire client area."},{"content":"You can override it to invalidate only those regions of the client area that map to the modified portions of the document.","pos":[1851,1973]},{"content":"The <ph id=\"ph1\">`UpdateAllViews`</ph> member function of class <bpt id=\"p1\">**</bpt>CDocument<ept id=\"p1\">**</ept> and the <ph id=\"ph2\">`OnUpdate`</ph> member function of class <ph id=\"ph3\">`CView`</ph> let you pass information describing what parts of the document were modified.","pos":[1980,2169],"source":"The `UpdateAllViews` member function of class **CDocument** and the `OnUpdate` member function of class `CView` let you pass information describing what parts of the document were modified."},{"content":"This \"hint\" mechanism lets you limit the area that the view must redraw.","pos":[2170,2242]},{"content":"takes two \"hint\" arguments.","pos":[2254,2281]},{"content":"The first, <ph id=\"ph1\">`lHint`</ph>, of type <bpt id=\"p1\">**</bpt>LPARAM<ept id=\"p1\">**</ept>, lets you pass any data you like, while the second, <ph id=\"ph2\">`pHint`</ph>, of type <ph id=\"ph3\">`CObject`</ph>*, lets you pass a pointer to any object derived from <ph id=\"ph4\">`CObject`</ph>.","pos":[2282,2463],"source":" The first, `lHint`, of type **LPARAM**, lets you pass any data you like, while the second, `pHint`, of type `CObject`*, lets you pass a pointer to any object derived from `CObject`."},{"content":"When a view becomes invalid, Windows sends it a <ph id=\"ph1\">`WM_PAINT`</ph> message.","pos":[2470,2537],"source":"When a view becomes invalid, Windows sends it a `WM_PAINT` message."},{"content":"The view's <bpt id=\"p1\">[</bpt>OnPaint<ept id=\"p1\">](../mfc/reference/cwnd-class.md#cwnd__onpaint)</ept> handler function responds to the message by creating a device-context object of class <bpt id=\"p2\">[</bpt>CPaintDC<ept id=\"p2\">](../mfc/reference/cpaintdc-class.md)</ept> and calls your view's <ph id=\"ph1\">`OnDraw`</ph> member function.","pos":[2538,2785],"source":" The view's [OnPaint](../mfc/reference/cwnd-class.md#cwnd__onpaint) handler function responds to the message by creating a device-context object of class [CPaintDC](../mfc/reference/cpaintdc-class.md) and calls your view's `OnDraw` member function."},{"content":"You do not normally have to write an overriding <ph id=\"ph1\">`OnPaint`</ph> handler function.","pos":[2786,2861],"source":" You do not normally have to write an overriding `OnPaint` handler function."},{"content":"A <bpt id=\"p1\">[</bpt>device context<ept id=\"p1\">](../mfc/device-contexts.md)</ept> is a Windows data structure that contains information about the drawing attributes of a device such as a display or a printer.","pos":[2868,3040],"source":"A [device context](../mfc/device-contexts.md) is a Windows data structure that contains information about the drawing attributes of a device such as a display or a printer."},{"content":"All drawing calls are made through a device-context object.","pos":[3041,3100]},{"content":"For drawing on the screen, <ph id=\"ph1\">`OnDraw`</ph> is passed a <ph id=\"ph2\">`CPaintDC`</ph> object.","pos":[3101,3167],"source":" For drawing on the screen, `OnDraw` is passed a `CPaintDC` object."},{"content":"For drawing on a printer, it is passed a <bpt id=\"p1\">[</bpt>CDC<ept id=\"p1\">](../mfc/reference/cdc-class.md)</ept> object set up for the current printer.","pos":[3168,3284],"source":" For drawing on a printer, it is passed a [CDC](../mfc/reference/cdc-class.md) object set up for the current printer."},{"content":"Your code for drawing in the view first retrieves a pointer to the document, then makes drawing calls through the device context.","pos":[3291,3420]},{"content":"The following simple <ph id=\"ph1\">`OnDraw`</ph> example illustrates the process:","pos":[3421,3483],"source":" The following simple `OnDraw` example illustrates the process:"},{"pos":[3501,3517],"content":"NVC_MFCDocView#1"},{"pos":[3574,3674],"content":"In this example, you would define the <ph id=\"ph1\">`GetData`</ph> function as a member of your derived document class.","source":"In this example, you would define the `GetData` function as a member of your derived document class."},{"content":"The example prints whatever string it gets from the document, centered in the view.","pos":[3681,3764]},{"content":"If the <ph id=\"ph1\">`OnDraw`</ph> call is for screen drawing, the <ph id=\"ph2\">`CDC`</ph> object passed in <ph id=\"ph3\">`pDC`</ph> is a <ph id=\"ph4\">`CPaintDC`</ph> whose constructor has already called <ph id=\"ph5\">`BeginPaint`</ph>.","pos":[3765,3908],"source":" If the `OnDraw` call is for screen drawing, the `CDC` object passed in `pDC` is a `CPaintDC` whose constructor has already called `BeginPaint`."},{"content":"Calls to drawing functions are made through the device-context pointer.","pos":[3909,3980]},{"content":"For information about device contexts and drawing calls, see class <bpt id=\"p1\">[</bpt>CDC<ept id=\"p1\">](../mfc/reference/cdc-class.md)</ept> in the <bpt id=\"p2\">*</bpt>MFC Reference<ept id=\"p2\">*</ept> and <bpt id=\"p3\">[</bpt>Working with Window Objects<ept id=\"p3\">](../mfc/working-with-window-objects.md)</ept>.","pos":[3981,4181],"source":" For information about device contexts and drawing calls, see class [CDC](../mfc/reference/cdc-class.md) in the *MFC Reference* and [Working with Window Objects](../mfc/working-with-window-objects.md)."},{"pos":[4188,4280],"content":"For more examples of how to write <ph id=\"ph1\">`OnDraw`</ph>, see the <bpt id=\"p1\">[</bpt>MFC Samples<ept id=\"p1\">](../visual-cpp-samples.md)</ept>.","source":"For more examples of how to write `OnDraw`, see the [MFC Samples](../visual-cpp-samples.md)."},{"content":"See Also","pos":[4289,4297]},{"content":"Using Views","pos":[4302,4313]}],"content":"---\ntitle: \"Drawing in a View | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"drawing, in views\"\n  - \"views, printing\"\n  - \"views, updating\"\n  - \"printing [MFC], views\"\n  - \"views, rendering\"\n  - \"printing views\"\n  - \"paint messages in view class\"\n  - \"device contexts, screen drawings\"\nms.assetid: e3761db6-0f19-4482-a4cd-ac38ef7c4d3a\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Drawing in a View\nNearly all drawing in your application occurs in the view's `OnDraw` member function, which you must override in your view class. (The exception is mouse drawing, discussed in [Interpreting User Input Through a View](../mfc/interpreting-user-input-through-a-view.md).) Your `OnDraw` override:  \n  \n1.  Gets data by calling the document member functions you provide.  \n  \n2.  Displays the data by calling member functions of a device-context object that the framework passes to `OnDraw`.  \n  \n When a document's data changes in some way, the view must be redrawn to reflect the changes. Typically, this happens when the user makes a change through a view on the document. In this case, the view calls the document's [UpdateAllViews](../mfc/reference/cdocument-class.md#cdocument__updateallviews) member function to notify all views on the same document to update themselves. `UpdateAllViews` calls each view's [OnUpdate](../mfc/reference/cview-class.md#cview__onupdate) member function. The default implementation of `OnUpdate` invalidates the view's entire client area. You can override it to invalidate only those regions of the client area that map to the modified portions of the document.  \n  \n The `UpdateAllViews` member function of class **CDocument** and the `OnUpdate` member function of class `CView` let you pass information describing what parts of the document were modified. This \"hint\" mechanism lets you limit the area that the view must redraw. `OnUpdate` takes two \"hint\" arguments. The first, `lHint`, of type **LPARAM**, lets you pass any data you like, while the second, `pHint`, of type `CObject`*, lets you pass a pointer to any object derived from `CObject`.  \n  \n When a view becomes invalid, Windows sends it a `WM_PAINT` message. The view's [OnPaint](../mfc/reference/cwnd-class.md#cwnd__onpaint) handler function responds to the message by creating a device-context object of class [CPaintDC](../mfc/reference/cpaintdc-class.md) and calls your view's `OnDraw` member function. You do not normally have to write an overriding `OnPaint` handler function.  \n  \n A [device context](../mfc/device-contexts.md) is a Windows data structure that contains information about the drawing attributes of a device such as a display or a printer. All drawing calls are made through a device-context object. For drawing on the screen, `OnDraw` is passed a `CPaintDC` object. For drawing on a printer, it is passed a [CDC](../mfc/reference/cdc-class.md) object set up for the current printer.  \n  \n Your code for drawing in the view first retrieves a pointer to the document, then makes drawing calls through the device context. The following simple `OnDraw` example illustrates the process:  \n  \n [!code-cpp[NVC_MFCDocView#1](../mfc/codesnippet/cpp/drawing-in-a-view_1.cpp)]  \n  \n In this example, you would define the `GetData` function as a member of your derived document class.  \n  \n The example prints whatever string it gets from the document, centered in the view. If the `OnDraw` call is for screen drawing, the `CDC` object passed in `pDC` is a `CPaintDC` whose constructor has already called `BeginPaint`. Calls to drawing functions are made through the device-context pointer. For information about device contexts and drawing calls, see class [CDC](../mfc/reference/cdc-class.md) in the *MFC Reference* and [Working with Window Objects](../mfc/working-with-window-objects.md).  \n  \n For more examples of how to write `OnDraw`, see the [MFC Samples](../visual-cpp-samples.md).  \n  \n## See Also  \n [Using Views](../mfc/using-views.md)\n\n"}