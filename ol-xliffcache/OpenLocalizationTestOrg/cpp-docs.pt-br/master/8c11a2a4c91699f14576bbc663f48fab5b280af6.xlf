<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c11a2a4c91699f14576bbc663f48fab5b280af6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\ccomdynamicunkarray-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0141476bc1ffe51476e791e40bc35f384be82e8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db79fe18b18b753de0d029ec62cacbc3bc947dd0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class stores an array of <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::CComDynamicUnkArray</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructor.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes the collection values to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> and the collection size to zero.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::~CComDynamicUnkArray</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::Add</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Call this method to add an <ph id="ph1">`IUnknown`</ph> pointer to the array.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::begin</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the first <ph id="ph1">`IUnknown`</ph> pointer in the collection.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::clear</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Empties the array.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::end</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns a pointer to one past the last <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer in the collection.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::GetAt</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Retrieves the element at the specified index.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::GetCookie</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Call this method to get the cookie associated with a given <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::GetSize</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns the length of an array.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::GetUnknown</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Call this method to get the <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer associated with a given cookie.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::Remove</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Call this method to remove an <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer from the array.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CComDynamicUnkArray<ept id="p1">**</ept> holds a dynamically allocated array of <bpt id="p2">**</bpt>IUnknown<ept id="p2">**</ept> pointers, each an interface on a connection point.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CComDynamicUnkArray<ept id="p1">**</ept> can be used as a parameter to the <bpt id="p2">[</bpt>IConnectionPointImpl<ept id="p2">](../../atl/reference/iconnectionpointimpl-class.md)</ept> template class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CComDynamicUnkArray<ept id="p1">**</ept> methods <bpt id="p2">[</bpt>begin<ept id="p2">](#ccomdynamicunkarray__begin)</ept> and <bpt id="p3">[</bpt>end<ept id="p3">](#ccomdynamicunkarray__end)</ept> can be used to loop through all connection points (for example, when an event is fired).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Adding Connection Points to an Object<ept id="p1">](../../atl/adding-connection-points-to-an-object.md)</ept> for details on automating creation of connection point proxies.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> The class <bpt id="p2">**</bpt>CComDynamicUnkArray<ept id="p2">**</ept> is used by the <bpt id="p3">**</bpt>Add Class<ept id="p3">**</ept> wizard when creating a control which has Connection Points.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you wish to specify the number of Connection Points manually, change the reference from <bpt id="p1">**</bpt>CComDynamicUnkArray<ept id="p1">**</ept> to <ph id="ph1">`CComUnkArray&lt;`</ph> <bpt id="p2">*</bpt>n<ept id="p2">*</ept> <ph id="ph2">`&gt;`</ph>, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is the number of connection points required.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlcom.h</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::Add</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Call this method to add an <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer to the array.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>pUnk</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer to add to the array.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Returns the cookie associated with the newly added pointer.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::begin</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the beginning of the collection of <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> interface pointers.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A pointer to an <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> interface pointer.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The collection contains pointers to interfaces stored locally as <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You cast each <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> interface to the real interface type and then call through it.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You do not need to query for the interface first.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Before using the <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> interface, you should check that it is not <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::clear</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Empties the array.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::CComDynamicUnkArray</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Sets the collection size to zero and initializes the values to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The destructor frees the collection, if necessary.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::~CComDynamicUnkArray</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The destructor.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Frees resources allocated by the class constructor.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::end</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Returns a pointer to one past the last <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer in the collection.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A pointer to an <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> interface pointer.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::GetAt</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Retrieves the element at the specified index.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The index of the element to retrieve.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A pointer to an <bpt id="p1">[</bpt>IUnknown<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms680509)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::GetCookie</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Call this method to get the cookie associated with a given <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer for which the associated cookie is required.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returns the cookie associated with the <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer, or zero if no matching <bpt id="p2">**</bpt>IUnknown<ept id="p2">**</ept> pointer is found.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If there is more than one instance of the same <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer, this function returns the cookie for the first one.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::GetSize</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Returns the length of an array.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The length of the array.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::GetUnknown</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Call this method to get the <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer associated with a given cookie.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The cookie for which the associated <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer is required.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer, or NULL if no matching cookie is found.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>CComDynamicUnkArray::Remove</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Call this method to remove an <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer from the array.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The cookie referencing the <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> pointer to be removed from the array.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Returns TRUE if the pointer is removed; otherwise FALSE.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>CComUnkArray Class</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Class Overview</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>