{"nodes":[{"pos":[12,41],"content":"this Pointer | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"this Pointer | Microsoft Docs","pos":[0,29]}]},{"content":"this Pointer","pos":[681,693]},{"content":"The <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer is a pointer accessible only within the nonstatic member functions of a <bpt id=\"p2\">**</bpt>class<ept id=\"p2\">**</ept>, <ph id=\"ph1\">`struct`</ph>, or <bpt id=\"p3\">**</bpt>union<ept id=\"p3\">**</ept> type.","pos":[694,826],"source":"The **this** pointer is a pointer accessible only within the nonstatic member functions of a **class**, `struct`, or **union** type."},{"content":"It points to the object for which the member function is called.","pos":[827,891]},{"content":"Static member functions do not have a <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer.","pos":[892,947],"source":" Static member functions do not have a **this** pointer."},{"content":"Syntax","pos":[956,962]},{"content":"Remarks","pos":[1029,1036]},{"content":"An object's <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer is not part of the object itself; it is not reflected in the result of a <ph id=\"ph1\">`sizeof`</ph> statement on the object.","pos":[1040,1175],"source":"An object's **this** pointer is not part of the object itself; it is not reflected in the result of a `sizeof` statement on the object."},{"content":"Instead, when a nonstatic member function is called for an object, the address of the object is passed by the compiler as a hidden argument to the function.","pos":[1176,1332]},{"content":"For example, the following function call:","pos":[1333,1374]},{"content":"can be interpreted this way:","pos":[1420,1448]},{"content":"The object's address is available from within the member function as the <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer.","pos":[1496,1586],"source":"The object's address is available from within the member function as the **this** pointer."},{"content":"Most uses of <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> are implicit.","pos":[1587,1622],"source":" Most uses of **this** are implicit."},{"content":"It is legal, though unnecessary, to explicitly use <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> when referring to members of the class.","pos":[1623,1722],"source":" It is legal, though unnecessary, to explicitly use **this** when referring to members of the class."},{"content":"For example:","pos":[1723,1735]},{"pos":[1922,2014],"content":"The expression <ph id=\"ph1\">`*this`</ph> is commonly used to return the current object from a member function:","source":"The expression `*this` is commonly used to return the current object from a member function:"},{"pos":[2052,2118],"content":"The <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer is also used to guard against self-reference:","source":"The **this** pointer is also used to guard against self-reference:"},{"pos":[2213,2375],"content":"[!NOTE]\n Because the **this** pointer is nonmodifiable, assignments to **this** are not allowed. Earlier implementations of C++ allowed assignments to **this**.","leadings":["","> "],"nodes":[{"content":" Because the **this** pointer is nonmodifiable, assignments to **this** are not allowed. Earlier implementations of C++ allowed assignments to **this**.","pos":[8,160],"nodes":[{"content":"Because the <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer is nonmodifiable, assignments to <bpt id=\"p2\">**</bpt>this<ept id=\"p2\">**</ept> are not allowed.","pos":[1,88],"source":" Because the **this** pointer is nonmodifiable, assignments to **this** are not allowed."},{"content":"Earlier implementations of C++ allowed assignments to <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept>.","pos":[89,152],"source":" Earlier implementations of C++ allowed assignments to **this**."}]}]},{"pos":[2382,2549],"content":"Occasionally, the <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer is used directly — for example, to manipulate self-referential data structures, where the address of the current object is required.","source":"Occasionally, the **this** pointer is used directly — for example, to manipulate self-referential data structures, where the address of the current object is required."},{"content":"Example","pos":[2558,2565]},{"content":"Type of the this pointer","pos":[3889,3913]},{"content":"The <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer's type can be modified in the function declaration by the <bpt id=\"p2\">**</bpt>const<ept id=\"p2\">**</ept> and <ph id=\"ph1\">`volatile`</ph> keywords.","pos":[3917,4030],"source":"The **this** pointer's type can be modified in the function declaration by the **const** and `volatile` keywords."},{"content":"To declare a function as having the attributes of one or more of these keywords, add the keyword(s) after the function argument list.","pos":[4031,4164]},{"content":"Consider this example:","pos":[4171,4193]},{"content":"The preceding code declares a member function, <ph id=\"ph1\">`X`</ph>, in which the <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer is treated as a <bpt id=\"p2\">**</bpt>const<ept id=\"p2\">**</ept> pointer to a <bpt id=\"p3\">**</bpt>const<ept id=\"p3\">**</ept> object.","pos":[4316,4454],"source":"The preceding code declares a member function, `X`, in which the **this** pointer is treated as a **const** pointer to a **const** object."},{"content":"Combinations of <bpt id=\"p1\">*</bpt>cv-mod-list<ept id=\"p1\">*</ept> options can be used, but they always modify the object pointed to by <bpt id=\"p2\">**</bpt>this<ept id=\"p2\">**</ept>, not the <bpt id=\"p3\">**</bpt>this<ept id=\"p3\">**</ept> pointer itself.","pos":[4455,4596],"source":" Combinations of *cv-mod-list* options can be used, but they always modify the object pointed to by **this**, not the **this** pointer itself."},{"content":"Therefore, the following declaration declares function <ph id=\"ph1\">`X`</ph>; the <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> pointer is a <bpt id=\"p2\">**</bpt>const<ept id=\"p2\">**</ept> pointer to a <bpt id=\"p3\">**</bpt>const<ept id=\"p3\">**</ept> object:","pos":[4597,4723],"source":" Therefore, the following declaration declares function `X`; the **this** pointer is a **const** pointer to a **const** object:"},{"pos":[4846,5093],"content":"The type of <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> in a member function is described by the following syntax, where <bpt id=\"p2\">*</bpt>cv-qualifier-list<ept id=\"p2\">*</ept> is determined from the member functions declarator and can be <bpt id=\"p3\">**</bpt>const<ept id=\"p3\">**</ept> or <bpt id=\"p4\">**</bpt>volatile<ept id=\"p4\">**</ept> (or both), and <bpt id=\"p5\">*</bpt>class-type<ept id=\"p5\">*</ept> is the name of the class:","source":"The type of **this** in a member function is described by the following syntax, where *cv-qualifier-list* is determined from the member functions declarator and can be **const** or **volatile** (or both), and *class-type* is the name of the class:"},{"pos":[5100,5151],"content":"<bpt id=\"p1\">*</bpt>[cv-qualifier-list] class-type<ept id=\"p1\">*</ept>  <bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\*</ph> const this<ept id=\"p2\">**</ept>","source":"*[cv-qualifier-list] class-type*  **\\* const this**"},{"content":"In other words, <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> is always a const pointer; it cannot be reassigned.","pos":[5158,5234],"source":"In other words, **this** is always a const pointer; it cannot be reassigned."},{"content":"The <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`volatile`</ph> qualifiers used in the member function declaration apply to the class instance pointed to by <bpt id=\"p2\">**</bpt>this<ept id=\"p2\">**</ept> in the scope of that function.","pos":[5236,5396],"source":"  The **const** or `volatile` qualifiers used in the member function declaration apply to the class instance pointed to by **this** in the scope of that function."},{"content":"The following table explains more about how these modifiers work.","pos":[5403,5468]},{"content":"Semantics of this Modifiers","pos":[5478,5505]},{"content":"Modifier","pos":[5512,5520]},{"content":"Meaning","pos":[5521,5528]},{"content":"const","pos":[5568,5573]},{"pos":[5576,5657],"content":"Cannot change member data; cannot invoke member functions that are not <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept>.","source":"Cannot change member data; cannot invoke member functions that are not **const**."},{"content":"Member data is loaded from memory each time it is accessed; disables certain optimizations.","pos":[5673,5764]},{"content":"It is an error to pass a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> object to a member function that is not <bpt id=\"p2\">**</bpt>const<ept id=\"p2\">**</ept>.","pos":[5772,5857],"source":"It is an error to pass a **const** object to a member function that is not **const**."},{"content":"Similarly, it is an error to pass a <ph id=\"ph1\">`volatile`</ph> object to a member function that is not <ph id=\"ph2\">`volatile`</ph>.","pos":[5858,5956],"source":" Similarly, it is an error to pass a `volatile` object to a member function that is not `volatile`."},{"pos":[5963,6105],"content":"Member functions declared as <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> cannot change member data — in such functions, the <bpt id=\"p2\">**</bpt>this<ept id=\"p2\">**</ept> pointer is a pointer to a <bpt id=\"p3\">**</bpt>const<ept id=\"p3\">**</ept> object.","source":"Member functions declared as **const** cannot change member data — in such functions, the **this** pointer is a pointer to a **const** object."},{"pos":[6113,6265],"content":"[!NOTE]\n Constructors and destructors cannot be declared as **const** or `volatile`. They can, however, be invoked on **const** or `volatile` objects.","leadings":["","> "],"nodes":[{"content":" Constructors and destructors cannot be declared as **const** or `volatile`. They can, however, be invoked on **const** or `volatile` objects.","pos":[8,150],"nodes":[{"content":"Constructors and destructors cannot be declared as <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`volatile`</ph>.","pos":[1,76],"source":" Constructors and destructors cannot be declared as **const** or `volatile`."},{"content":"They can, however, be invoked on <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`volatile`</ph> objects.","pos":[77,142],"source":" They can, however, be invoked on **const** or `volatile` objects."}]}]},{"content":"See Also","pos":[6274,6282]},{"content":"Keywords","pos":[6287,6295]}],"content":"---\ntitle: \"this Pointer | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"this\"\n  - \"this_cpp\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"nonstatic member functions\"\n  - \"pointers, to class instance\"\n  - \"this pointer\"\nms.assetid: 92e3256a-4ad9-4d46-8be1-d77fad90791f\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# this Pointer\nThe **this** pointer is a pointer accessible only within the nonstatic member functions of a **class**, `struct`, or **union** type. It points to the object for which the member function is called. Static member functions do not have a **this** pointer.  \n  \n## Syntax  \n  \n```  \n  \n      this   \nthis->member-identifier  \n```  \n  \n## Remarks  \n An object's **this** pointer is not part of the object itself; it is not reflected in the result of a `sizeof` statement on the object. Instead, when a nonstatic member function is called for an object, the address of the object is passed by the compiler as a hidden argument to the function. For example, the following function call:  \n  \n```  \nmyDate.setMonth( 3 );  \n```  \n  \n can be interpreted this way:  \n  \n```  \nsetMonth( &myDate, 3 );  \n```  \n  \n The object's address is available from within the member function as the **this** pointer. Most uses of **this** are implicit. It is legal, though unnecessary, to explicitly use **this** when referring to members of the class. For example:  \n  \n```  \nvoid Date::setMonth( int mn )  \n{  \n   month = mn;            // These three statements  \n   this->month = mn;      // are equivalent  \n   (*this).month = mn;  \n}  \n```  \n  \n The expression `*this` is commonly used to return the current object from a member function:  \n  \n```  \nreturn *this;  \n```  \n  \n The **this** pointer is also used to guard against self-reference:  \n  \n```  \nif (&Object != this) {  \n// do not execute in cases of self-reference  \n```  \n  \n> [!NOTE]\n>  Because the **this** pointer is nonmodifiable, assignments to **this** are not allowed. Earlier implementations of C++ allowed assignments to **this**.  \n  \n Occasionally, the **this** pointer is used directly — for example, to manipulate self-referential data structures, where the address of the current object is required.  \n  \n## Example  \n  \n```  \n// this_pointer.cpp  \n// compile with: /EHsc  \n  \n#include <iostream>  \n#include <string.h>  \n  \nusing namespace std;  \n  \nclass Buf   \n{  \npublic:  \n    Buf( char* szBuffer, size_t sizeOfBuffer );  \n    Buf& operator=( const Buf & );  \n    void Display() { cout << buffer << endl; }  \n  \nprivate:  \n    char*   buffer;  \n    size_t  sizeOfBuffer;  \n};  \n  \nBuf::Buf( char* szBuffer, size_t sizeOfBuffer )  \n{  \n    sizeOfBuffer++; // account for a NULL terminator  \n  \n    buffer = new char[ sizeOfBuffer ];  \n    if (buffer)  \n    {  \n        strcpy_s( buffer, sizeOfBuffer, szBuffer );  \n        sizeOfBuffer = sizeOfBuffer;  \n    }  \n}  \n  \nBuf& Buf::operator=( const Buf &otherbuf )   \n{  \n    if( &otherbuf != this )   \n    {  \n        if (buffer)  \n            delete [] buffer;  \n  \n        sizeOfBuffer =  strlen( otherbuf.buffer ) + 1;   \n        buffer = new char[sizeOfBuffer];  \n        strcpy_s( buffer, sizeOfBuffer, otherbuf.buffer );  \n    }  \n    return *this;  \n}  \n  \nint main()  \n{  \n    Buf myBuf( \"my buffer\", 10 );  \n    Buf yourBuf( \"your buffer\", 12 );  \n  \n    // Display 'my buffer'  \n    myBuf.Display();  \n  \n    // assignment opperator  \n    myBuf = yourBuf;  \n  \n    // Display 'your buffer'  \n    myBuf.Display();  \n}  \n```  \n  \n```Output  \nmy buffer  \nyour buffer  \n```  \n  \n## Type of the this pointer  \n The **this** pointer's type can be modified in the function declaration by the **const** and `volatile` keywords. To declare a function as having the attributes of one or more of these keywords, add the keyword(s) after the function argument list.  \n  \n Consider this example:  \n  \n```  \n// type_of_this_pointer1.cpp  \nclass Point  \n{  \n    unsigned X() const;  \n};  \nint main()  \n{  \n}  \n```  \n  \n The preceding code declares a member function, `X`, in which the **this** pointer is treated as a **const** pointer to a **const** object. Combinations of *cv-mod-list* options can be used, but they always modify the object pointed to by **this**, not the **this** pointer itself. Therefore, the following declaration declares function `X`; the **this** pointer is a **const** pointer to a **const** object:  \n  \n```  \n// type_of_this_pointer2.cpp  \nclass Point  \n{  \n    unsigned X() const;  \n};  \nint main()  \n{  \n}  \n```  \n  \n The type of **this** in a member function is described by the following syntax, where *cv-qualifier-list* is determined from the member functions declarator and can be **const** or **volatile** (or both), and *class-type* is the name of the class:  \n  \n *[cv-qualifier-list] class-type*  **\\* const this**  \n  \n In other words, **this** is always a const pointer; it cannot be reassigned.  The **const** or `volatile` qualifiers used in the member function declaration apply to the class instance pointed to by **this** in the scope of that function.  \n  \n The following table explains more about how these modifiers work.  \n  \n### Semantics of this Modifiers  \n  \n|Modifier|Meaning|  \n|--------------|-------------|  \n|**const**|Cannot change member data; cannot invoke member functions that are not **const**.|  \n|`volatile`|Member data is loaded from memory each time it is accessed; disables certain optimizations.|  \n  \n It is an error to pass a **const** object to a member function that is not **const**. Similarly, it is an error to pass a `volatile` object to a member function that is not `volatile`.  \n  \n Member functions declared as **const** cannot change member data — in such functions, the **this** pointer is a pointer to a **const** object.  \n  \n> [!NOTE]\n>  Constructors and destructors cannot be declared as **const** or `volatile`. They can, however, be invoked on **const** or `volatile` objects.  \n  \n## See Also  \n [Keywords](../cpp/keywords-cpp.md)   \n "}