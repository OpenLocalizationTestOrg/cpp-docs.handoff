{"nodes":[{"pos":[12,53],"content":"Using a Template Library | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using a Template Library | Microsoft Docs","pos":[0,41]}]},{"content":"Using a Template Library","pos":[581,605]},{"content":"A template is somewhat like a macro.","pos":[606,642]},{"content":"As with a macro, invoking a template causes it to expand (with appropriate parameter substitution) to code you have written.","pos":[643,767]},{"content":"However, a template goes further than this to allow the creation of new classes based on types that you pass as parameters.","pos":[768,891]},{"content":"These new classes implement type-safe ways of performing the operation expressed in your template code.","pos":[892,995]},{"content":"Template libraries such as ATL differ from traditional C++ class libraries in that they are typically supplied only as source code (or as source code with a little, supporting run time) and are not inherently or necessarily hierarchical in nature.","pos":[1002,1249]},{"content":"Rather than deriving from a class to get the functionality you desire, you instantiate a class from a template.","pos":[1250,1361]},{"content":"See Also","pos":[1370,1378]},{"content":"Introduction to ATL","pos":[1383,1402]}],"content":"---\ntitle: \"Using a Template Library | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"template libraries\"\nms.assetid: 5e80ec6e-a61c-41ce-b34b-9a6252c46265\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using a Template Library\nA template is somewhat like a macro. As with a macro, invoking a template causes it to expand (with appropriate parameter substitution) to code you have written. However, a template goes further than this to allow the creation of new classes based on types that you pass as parameters. These new classes implement type-safe ways of performing the operation expressed in your template code.  \n  \n Template libraries such as ATL differ from traditional C++ class libraries in that they are typically supplied only as source code (or as source code with a little, supporting run time) and are not inherently or necessarily hierarchical in nature. Rather than deriving from a class to get the functionality you desire, you instantiate a class from a template.  \n  \n## See Also  \n [Introduction to ATL](../atl/introduction-to-atl.md)\n\n"}