<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06e102191c3619220aadfbe5bc2d569e0f5e91c3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\array-declarations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9261bb63b431ce0c8683aa02e286aba4009b5cff</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05831f0b77bd6c895d73d0138abdf90b87174012</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Array Declarations | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Array Declarations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An "array declaration" names the array and specifies the type of its elements.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It can also define the number of elements in the array.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A variable with array type is considered a pointer to the type of the array elements.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>declaration-specifiers init-declarator-list<ept id="p1">*</ept> opt<bpt id="p2">**</bpt>;<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>init-declarator-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>init-declarator</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>init-declarator-list<ept id="p1">*</ept> <bpt id="p2">**</bpt>,<ept id="p2">**</ept>  <bpt id="p3">*</bpt>init-declarator<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>init-declarator<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>declarator</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt><ph id="ph1">=</ph><ept id="p2">**</ept>  <bpt id="p3">*</bpt>initializer<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>pointer<ept id="p1">*</ept> opt<bpt id="p2">*</bpt>direct-declarator<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>direct-declarator<ept id="p1">*</ept>  <bpt id="p2">**</bpt>[<ept id="p2">**</ept>  <bpt id="p3">*</bpt>constant-expression<ept id="p3">*</ept> opt<bpt id="p4">**</bpt>]<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">*</bpt>constant-expression<ept id="p1">*</ept> is optional, the syntax has two forms:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The first form defines an array variable.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>constant-expression<ept id="p1">*</ept> argument within the brackets specifies the number of elements in the array.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>constant-expression<ept id="p1">*</ept>, if present, must have integral type, and a value larger than zero.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Each element has the type given by <bpt id="p1">*</bpt>type-specifier<ept id="p1">*</ept>, which can be any type except <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An array element cannot be a function type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The second form declares a variable that has been defined elsewhere.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It omits the <bpt id="p1">*</bpt>constant-expression<ept id="p1">*</ept> argument in brackets, but not the brackets.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can use this form only if you previously have initialized the array, declared it as a parameter, or declared it as a reference to an array explicitly defined elsewhere in the program.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In both forms, <bpt id="p1">*</bpt>direct-declarator<ept id="p1">*</ept> names the variable and can modify the variable's type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The brackets (<bpt id="p1">**</bpt>[ ]<ept id="p1">**</ept>) following <bpt id="p2">*</bpt>direct-declarator<ept id="p2">*</ept> modify the declarator to an array type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Type qualifiers can appear in the declaration of an object of array type, but the qualifiers apply to the elements rather than the array itself.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can declare an array of arrays (a "multidimensional" array) by following the array declarator with a list of bracketed constant expressions in this form:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Each <bpt id="p1">*</bpt>constant-expression<ept id="p1">*</ept> in brackets defines the number of elements in a given dimension: two-dimensional arrays have two bracketed expressions, three-dimensional arrays have three, and so on.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can omit the first constant expression if you have initialized the array, declared it as a parameter, or declared it as a reference to an array explicitly defined elsewhere in the program.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can define arrays of pointers to various types of objects by using complex declarators, as described in <bpt id="p1">[</bpt>Interpreting More Complex Declarators<ept id="p1">](../c-language/interpreting-more-complex-declarators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Arrays are stored by row.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, the following array consists of two rows with three columns each:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The three columns of the first row are stored first, followed by the three columns of the second row.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This means that the last subscript varies most quickly.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To refer to an individual element of an array, use a subscript expression, as described in <bpt id="p1">[</bpt>Postfix Operators<ept id="p1">](../c-language/postfix-operators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>These examples illustrate array declarations:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The two-dimensional array named <ph id="ph1">`matrix`</ph> has 150 elements, each having <bpt id="p1">**</bpt>float<ept id="p1">**</ept> type.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is a declaration of an array of structures.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This array has 100 elements; each element is a structure containing two members.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This statement declares the type and name of an array of pointers to <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The actual definition of <ph id="ph1">`name`</ph> occurs elsewhere.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The type of integer required to hold the maximum size of an array is the size of <bpt id="p1">**</bpt>size_t<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Defined in the header file STDDEF.H, <bpt id="p1">**</bpt>size_t<ept id="p1">**</ept> is an <ph id="ph1">`unsigned int`</ph> with the range 0x00000000 to 0x7CFFFFFF.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Declarators and Variable Declarations</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>