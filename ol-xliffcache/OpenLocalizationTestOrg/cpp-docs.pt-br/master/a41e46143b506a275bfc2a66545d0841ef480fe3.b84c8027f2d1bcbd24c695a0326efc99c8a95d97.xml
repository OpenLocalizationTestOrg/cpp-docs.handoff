{"nodes":[{"pos":[12,41],"content":"__ull_rshift | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"__ull_rshift | Microsoft Docs","pos":[0,29]}]},{"content":"__ull_rshift","pos":[659,671]},{"content":"Microsoft Specific","pos":[674,692]},{"content":"on x64, shifts a 64-bit value specified by the first parameter to the right by a number of bits specified by the second parameter.","pos":[701,831]},{"content":"Syntax","pos":[840,846]},{"content":"Parameters","pos":[956,966]},{"content":"[in]","pos":[970,974]},{"content":"The 64-bit integer value to shift right.","pos":[985,1025]},{"content":"[in]","pos":[1032,1036]},{"content":"The number of bits to shift, modulo 32 on x86, and modulo 64 on x64.","pos":[1047,1115]},{"content":"Return Value","pos":[1124,1136]},{"pos":[1140,1172],"content":"The mask shifted by <ph id=\"ph1\">`nBit`</ph> bits.","source":"The mask shifted by `nBit` bits."},{"content":"Requirements","pos":[1181,1193]},{"content":"Intrinsic","pos":[1200,1209]},{"content":"Architecture","pos":[1210,1222]},{"pos":[1281,1285],"content":"x86,"},{"pos":[1357,1384],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>intrin.h&gt;","source":"**Header file** \\<intrin.h>"},{"content":"Remarks","pos":[1393,1400]},{"content":"If the second parameter is greater than 31 on x86 (63 on x64), that number is taken modulo 32 (64 on x64) to determine the number of bits to shift.","pos":[1404,1551]},{"content":"The <ph id=\"ph1\">`ull`</ph> in the name indicates <ph id=\"ph2\">`unsigned long long (unsigned __int64)`</ph>.","pos":[1552,1624],"source":" The `ull` in the name indicates `unsigned long long (unsigned __int64)`."},{"content":"Example","pos":[1633,1640]},{"content":"Output","pos":[1989,1995]},{"content":"END Microsoft Specific","pos":[2024,2046]},{"content":"See Also","pos":[2055,2063]},{"content":"__ll_lshift","pos":[2068,2079]},{"content":"__ll_rshift","pos":[2114,2125]},{"content":"Compiler Intrinsics","pos":[2160,2179]}],"content":"---\ntitle: \"__ull_rshift | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"__ull_rshift\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ull_rshift intrinsic\"\n  - \"__ull_rshift intrinsic\"\nms.assetid: b7ff5254-3540-4e6e-b57c-a6c4beb7dca2\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# __ull_rshift\n**Microsoft Specific**  \n  \n on x64, shifts a 64-bit value specified by the first parameter to the right by a number of bits specified by the second parameter.  \n  \n## Syntax  \n  \n```  \nunsigned __int64 __ull_rshift(   \n   unsigned __int64 mask,    \n   int nBit   \n);  \n```  \n  \n#### Parameters  \n [in] `mask`  \n The 64-bit integer value to shift right.  \n  \n [in] `nBit`  \n The number of bits to shift, modulo 32 on x86, and modulo 64 on x64.  \n  \n## Return Value  \n The mask shifted by `nBit` bits.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`__ull_rshift`|x86, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n  \n **Header file** \\<intrin.h>  \n  \n## Remarks  \n If the second parameter is greater than 31 on x86 (63 on x64), that number is taken modulo 32 (64 on x64) to determine the number of bits to shift. The `ull` in the name indicates `unsigned long long (unsigned __int64)`.  \n  \n## Example  \n  \n```  \n// ull_rshift.cpp  \n// compile with: /EHsc  \n// processor: x86, x64  \n#include <iostream>  \n#include <intrin.h>  \nusing namespace std;  \n  \n#pragma intrinsic(__ull_rshift)  \n  \nint main()  \n{  \n   unsigned __int64 mask = 0x100;  \n   int nBit = 8;  \n   mask = __ull_rshift(mask, nBit);  \n   cout << hex << mask << endl;  \n}  \n```  \n  \n## Output  \n  \n```  \n1  \n```  \n  \n### END Microsoft Specific  \n  \n## See Also  \n [__ll_lshift](../intrinsics/ll-lshift.md)   \n [__ll_rshift](../intrinsics/ll-rshift.md)   \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)"}