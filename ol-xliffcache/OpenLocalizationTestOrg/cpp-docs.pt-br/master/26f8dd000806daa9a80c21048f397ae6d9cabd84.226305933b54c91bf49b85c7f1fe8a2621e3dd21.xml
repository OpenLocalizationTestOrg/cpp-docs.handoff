{"nodes":[{"pos":[12,47],"content":"CStringArray Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CStringArray Class | Microsoft Docs","pos":[0,35]}]},{"content":"CStringArray Class","pos":[691,709]},{"pos":[710,786],"content":"Supports arrays of <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/using-cstring.md)</ept> objects.","source":"Supports arrays of [CString](../../atl-mfc-shared/using-cstring.md) objects."},{"content":"Syntax","pos":[795,801]},{"content":"Members","pos":[863,870]},{"content":"The member functions of <ph id=\"ph1\">`CStringArray`</ph> are similar to the member functions of class <bpt id=\"p1\">[</bpt>CObArray<ept id=\"p1\">](../../mfc/reference/cobarray-class.md)</ept>.","pos":[874,1008],"source":"The member functions of `CStringArray` are similar to the member functions of class [CObArray](../../mfc/reference/cobarray-class.md)."},{"content":"Because of this similarity, you can use the <ph id=\"ph1\">`CObArray`</ph> reference documentation for member function specifics.","pos":[1009,1118],"source":" Because of this similarity, you can use the `CObArray` reference documentation for member function specifics."},{"content":"Wherever you see a <ph id=\"ph1\">`CObject`</ph> pointer as a return value, substitute a <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/using-cstring.md)</ept> object (not a <bpt id=\"p2\">[</bpt>CString<ept id=\"p2\">](../../atl-mfc-shared/using-cstring.md)</ept> pointer).","pos":[1119,1309],"source":" Wherever you see a `CObject` pointer as a return value, substitute a [CString](../../atl-mfc-shared/using-cstring.md) object (not a [CString](../../atl-mfc-shared/using-cstring.md) pointer)."},{"content":"Wherever you see a <ph id=\"ph1\">`CObject`</ph> pointer as a function parameter, substitute a <ph id=\"ph2\">`LPCTSTR`</ph>.","pos":[1310,1395],"source":" Wherever you see a `CObject` pointer as a function parameter, substitute a `LPCTSTR`."},{"content":"for example, translates to","pos":[1458,1484]},{"content":"and","pos":[1550,1553]},{"content":"translates to","pos":[1618,1631]},{"content":"Public Constructors","pos":[1698,1717]},{"content":"Name","pos":[1724,1728]},{"content":"Description","pos":[1729,1740]},{"content":"CObArray::CObArray","pos":[1779,1797]},{"content":"Constructs an empty array.","pos":[1857,1883]},{"content":"Public Methods","pos":[1894,1908]},{"content":"Name","pos":[1915,1919]},{"content":"Description","pos":[1920,1931]},{"content":"CObArray::Add","pos":[1970,1983]},{"content":"Adds an element to the end of the array; grows the array if necessary.","pos":[2038,2108]},{"content":"CObArray::Append","pos":[2114,2130]},{"content":"Appends another array to the array; grows the array if necessary.","pos":[2188,2253]},{"content":"CObArray::Copy","pos":[2259,2273]},{"content":"Copies another array to the array; grows the array if necessary.","pos":[2329,2393]},{"content":"CObArray::ElementAt","pos":[2399,2418]},{"content":"Returns a temporary reference to the element pointer within the array.","pos":[2479,2549]},{"content":"CObArray::FreeExtra","pos":[2555,2574]},{"content":"Frees all unused memory above the current upper bound.","pos":[2635,2689]},{"content":"CObArray::GetAt","pos":[2695,2710]},{"content":"Returns the value at a given index.","pos":[2767,2802]},{"content":"CObArray::GetCount","pos":[2808,2826]},{"content":"Gets the number of elements in this array.","pos":[2886,2928]},{"content":"CObArray::GetData","pos":[2934,2951]},{"content":"Allows access to elements in the array.","pos":[3010,3049]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[3050,3066],"source":" Can be **NULL**."},{"content":"CObArray::GetSize","pos":[3072,3089]},{"content":"Gets the number of elements in this array.","pos":[3148,3190]},{"content":"CObArray::GetUpperBound","pos":[3196,3219]},{"content":"Returns the largest valid index.","pos":[3284,3316]},{"content":"CObArray::InsertAt","pos":[3322,3340]},{"content":"Inserts an element (or all the elements in another array) at a specified index.","pos":[3400,3479]},{"content":"CObArray::IsEmpty","pos":[3485,3502]},{"content":"Determines if the array is empty.","pos":[3561,3594]},{"content":"CObArray::RemoveAll","pos":[3600,3619]},{"content":"Removes all the elements from this array.","pos":[3680,3721]},{"content":"CObArray::RemoveAt","pos":[3727,3745]},{"content":"Removes an element at a specific index.","pos":[3805,3844]},{"content":"CObArray::SetAt","pos":[3850,3865]},{"content":"Sets the value for a given index; array not allowed to grow.","pos":[3922,3982]},{"content":"CObArray::SetAtGrow","pos":[3988,4007]},{"content":"Sets the value for a given index; grows the array if necessary.","pos":[4068,4131]},{"content":"CObArray::SetSize","pos":[4137,4154]},{"content":"Sets the number of elements to be contained in this array.","pos":[4213,4271]},{"content":"Public Operators","pos":[4282,4298]},{"content":"Name","pos":[4305,4309]},{"content":"Description","pos":[4310,4321]},{"content":"CObArray::operator [ ]","pos":[4360,4382]},{"content":"Sets or gets the element at the specified index.","pos":[4445,4493]},{"content":"Remarks","pos":[4503,4510]},{"content":"incorporates the <ph id=\"ph1\">`IMPLEMENT_SERIAL`</ph> macro to support serialization and dumping of its elements.","pos":[4529,4624],"source":" incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements."},{"content":"If an array of <ph id=\"ph1\">`CString`</ph> objects is stored to an archive, either with an overloaded insertion operator or with the <ph id=\"ph2\">`Serialize`</ph> member function, each element is serialized in turn.","pos":[4625,4804],"source":" If an array of `CString` objects is stored to an archive, either with an overloaded insertion operator or with the `Serialize` member function, each element is serialized in turn."},{"pos":[4812,5094],"content":"[!NOTE]\n Before using an array, use `SetSize` to establish its size and allocate memory for it. If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.","leadings":["","> "],"nodes":[{"content":" Before using an array, use `SetSize` to establish its size and allocate memory for it. If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.","pos":[8,280],"nodes":[{"content":"Before using an array, use <ph id=\"ph1\">`SetSize`</ph> to establish its size and allocate memory for it.","pos":[1,87],"source":" Before using an array, use `SetSize` to establish its size and allocate memory for it."},{"content":"If you do not use <ph id=\"ph1\">`SetSize`</ph>, adding elements to your array causes it to be frequently reallocated and copied.","pos":[88,197],"source":" If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied."},{"content":"Frequent reallocation and copying are inefficient and can fragment memory.","pos":[198,272]}]}]},{"content":"If you need a dump of individual string elements in the array, you must set the depth of the dump context to 1 or greater.","pos":[5101,5223]},{"pos":[5230,5337],"content":"When a <ph id=\"ph1\">`CString`</ph> array is deleted, or when its elements are removed, string memory is freed as appropriate.","source":"When a `CString` array is deleted, or when its elements are removed, string memory is freed as appropriate."},{"pos":[5344,5446],"content":"For more information on using <ph id=\"ph1\">`CStringArray`</ph>, see the article <bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](../../mfc/collections.md)</ept>.","source":"For more information on using `CStringArray`, see the article [Collections](../../mfc/collections.md)."},{"content":"Inheritance Hierarchy","pos":[5455,5476]},{"content":"CObject","pos":[5481,5488]},{"content":"Requirements","pos":[5557,5569]},{"pos":[5573,5594],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxcoll.h","source":"**Header:** afxcoll.h"},{"content":"See Also","pos":[5603,5611]},{"content":"CObject Class","pos":[5616,5629]},{"content":"Hierarchy Chart","pos":[5674,5689]}],"content":"---\ntitle: \"CStringArray Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CStringArray\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"string arrays\"\n  - \"arrays [C++], strings\"\n  - \"CStringArray class\"\n  - \"strings [C++], collections\"\nms.assetid: 6c637e06-bba8-4c08-b0fc-cf8cb067ce34\ncaps.latest.revision: 24\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CStringArray Class\nSupports arrays of [CString](../../atl-mfc-shared/using-cstring.md) objects.  \n  \n## Syntax  \n  \n```  \nclass CStringArray : public CObject  \n```  \n  \n## Members  \n The member functions of `CStringArray` are similar to the member functions of class [CObArray](../../mfc/reference/cobarray-class.md). Because of this similarity, you can use the `CObArray` reference documentation for member function specifics. Wherever you see a `CObject` pointer as a return value, substitute a [CString](../../atl-mfc-shared/using-cstring.md) object (not a [CString](../../atl-mfc-shared/using-cstring.md) pointer). Wherever you see a `CObject` pointer as a function parameter, substitute a `LPCTSTR`.  \n  \n `CObject* CObArray::GetAt( int <nIndex> ) const;`  \n  \n for example, translates to  \n  \n `CString CStringArray::GetAt( int <nIndex> ) const;`  \n  \n and  \n  \n `void SetAt( int <nIndex>, CObject* <newElement> )`  \n  \n translates to  \n  \n `void SetAt( int <nIndex>, LPCTSTR <newElement> )`  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObArray::CObArray](../../mfc/reference/cobarray-class.md#cobarray__cobarray)|Constructs an empty array.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObArray::Add](../../mfc/reference/cobarray-class.md#cobarray__add)|Adds an element to the end of the array; grows the array if necessary.|  \n|[CObArray::Append](../../mfc/reference/cobarray-class.md#cobarray__append)|Appends another array to the array; grows the array if necessary.|  \n|[CObArray::Copy](../../mfc/reference/cobarray-class.md#cobarray__copy)|Copies another array to the array; grows the array if necessary.|  \n|[CObArray::ElementAt](../../mfc/reference/cobarray-class.md#cobarray__elementat)|Returns a temporary reference to the element pointer within the array.|  \n|[CObArray::FreeExtra](../../mfc/reference/cobarray-class.md#cobarray__freeextra)|Frees all unused memory above the current upper bound.|  \n|[CObArray::GetAt](../../mfc/reference/cobarray-class.md#cobarray__getat)|Returns the value at a given index.|  \n|[CObArray::GetCount](../../mfc/reference/cobarray-class.md#cobarray__getcount)|Gets the number of elements in this array.|  \n|[CObArray::GetData](../../mfc/reference/cobarray-class.md#cobarray__getdata)|Allows access to elements in the array. Can be **NULL**.|  \n|[CObArray::GetSize](../../mfc/reference/cobarray-class.md#cobarray__getsize)|Gets the number of elements in this array.|  \n|[CObArray::GetUpperBound](../../mfc/reference/cobarray-class.md#cobarray__getupperbound)|Returns the largest valid index.|  \n|[CObArray::InsertAt](../../mfc/reference/cobarray-class.md#cobarray__insertat)|Inserts an element (or all the elements in another array) at a specified index.|  \n|[CObArray::IsEmpty](../../mfc/reference/cobarray-class.md#cobarray__isempty)|Determines if the array is empty.|  \n|[CObArray::RemoveAll](../../mfc/reference/cobarray-class.md#cobarray__removeall)|Removes all the elements from this array.|  \n|[CObArray::RemoveAt](../../mfc/reference/cobarray-class.md#cobarray__removeat)|Removes an element at a specific index.|  \n|[CObArray::SetAt](../../mfc/reference/cobarray-class.md#cobarray__setat)|Sets the value for a given index; array not allowed to grow.|  \n|[CObArray::SetAtGrow](../../mfc/reference/cobarray-class.md#cobarray__setatgrow)|Sets the value for a given index; grows the array if necessary.|  \n|[CObArray::SetSize](../../mfc/reference/cobarray-class.md#cobarray__setsize)|Sets the number of elements to be contained in this array.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObArray::operator [ ]](../../mfc/reference/cobarray-class.md#cobarray__operator_at)|Sets or gets the element at the specified index.|  \n  \n## Remarks  \n `CStringArray` incorporates the `IMPLEMENT_SERIAL` macro to support serialization and dumping of its elements. If an array of `CString` objects is stored to an archive, either with an overloaded insertion operator or with the `Serialize` member function, each element is serialized in turn.  \n  \n> [!NOTE]\n>  Before using an array, use `SetSize` to establish its size and allocate memory for it. If you do not use `SetSize`, adding elements to your array causes it to be frequently reallocated and copied. Frequent reallocation and copying are inefficient and can fragment memory.  \n  \n If you need a dump of individual string elements in the array, you must set the depth of the dump context to 1 or greater.  \n  \n When a `CString` array is deleted, or when its elements are removed, string memory is freed as appropriate.  \n  \n For more information on using `CStringArray`, see the article [Collections](../../mfc/collections.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CStringArray`  \n  \n## Requirements  \n **Header:** afxcoll.h  \n  \n## See Also  \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}