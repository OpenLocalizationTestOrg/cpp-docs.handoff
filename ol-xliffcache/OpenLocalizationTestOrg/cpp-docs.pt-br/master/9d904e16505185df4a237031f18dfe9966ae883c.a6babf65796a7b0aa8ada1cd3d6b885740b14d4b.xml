{"nodes":[{"pos":[12,57],"content":"&lt;functional&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"functional<ph id=\"ph1\">&amp;gt;</ph> operators | Microsoft Docs","pos":[4,45],"source":"functional&gt; operators | Microsoft Docs"}]},{"content":"functional<ph id=\"ph1\">&amp;gt;</ph> operators","pos":[264,288],"source":"functional&gt; operators"},{"content":"operator!=","pos":[305,315]},{"content":"operator==","pos":[333,343]},{"pos":[403,413],"content":"operator=="},{"content":"Tests if callable object is empty.","pos":[417,451]},{"content":"Parameters","pos":[643,653]},{"content":"The function type to wrap.","pos":[666,692]},{"content":"The function object","pos":[706,725]},{"content":"A null pointer.","pos":[741,756]},{"content":"Remarks","pos":[766,773]},{"content":"The operators both take an argument that is a reference to a <ph id=\"ph1\">`function`</ph> object and an argument that is a null pointer constant.","pos":[777,904],"source":"The operators both take an argument that is a reference to a `function` object and an argument that is a null pointer constant."},{"content":"Both return true only if the <ph id=\"ph1\">`function`</ph> object is empty.","pos":[905,961],"source":" Both return true only if the `function` object is empty."},{"content":"Example","pos":[971,978]},{"pos":[1518,1528],"content":"operator!="},{"content":"Tests if callable object is not empty.","pos":[1532,1570]},{"content":"Parameters","pos":[1762,1772]},{"content":"The function type to wrap.","pos":[1785,1811]},{"content":"The function object","pos":[1825,1844]},{"content":"A null pointer.","pos":[1860,1875]},{"content":"Remarks","pos":[1885,1892]},{"content":"The operators both take an argument that is a reference to a <ph id=\"ph1\">`function`</ph> object and an argument that is a null pointer constant.","pos":[1896,2023],"source":"The operators both take an argument that is a reference to a `function` object and an argument that is a null pointer constant."},{"content":"Both return true only if the <ph id=\"ph1\">`function`</ph> object is not empty.","pos":[2024,2084],"source":" Both return true only if the `function` object is not empty."},{"content":"Example","pos":[2094,2101]},{"content":"See Also","pos":[2697,2705]},{"content":"functional&gt;","pos":[2712,2723],"source":"functional>"}],"content":"---\ntitle: \"&lt;functional&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: d4b3c760-f3e2-4b65-bdaa-d42e8dd6f5e1\ncaps.latest.revision: 13\nmanager: \"ghogen\"\n---\n# &lt;functional&gt; operators\n|||  \n|-|-|  \n|[operator!=](#operator_neq)|[operator==](#operator_eq_eq)|  \n  \n##  <a name=\"operator_eq_eq\"></a>  operator==  \n Tests if callable object is empty.  \n  \n```  \ntemplate <class Fty>  \nbool operator==(const function<Fty>& f, null_ptr_type npc);\n\ntemplate <class Fty>  \nbool operator==(null_ptr_type npc, const function<Fty>& f);\n```  \n  \n### Parameters  \n `Fty`  \n The function type to wrap.  \n  \n `f`  \n The function object  \n  \n `npc`  \n A null pointer.  \n  \n### Remarks  \n The operators both take an argument that is a reference to a `function` object and an argument that is a null pointer constant. Both return true only if the `function` object is empty.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__functional__operator_eq.cpp\n// compile with: /EHsc   \n#include <functional>   \n#include <iostream>   \n\nint neg(int val)\n{\n    return (-val);\n}\n\nint main()\n{\n    std::function<int(int)> fn0;\n    std::cout << std::boolalpha << \"empty == \"\n        << (fn0 == 0) << std::endl;\n\n    std::function<int(int)> fn1(neg);\n    std::cout << std::boolalpha << \"empty == \"\n        << (fn1 == 0) << std::endl;\n\n    return (0);\n}\n  \n```  \n  \n```Output  \nempty == true  \nempty == false  \n```  \n  \n##  <a name=\"operator_neq\"></a>  operator!=  \n Tests if callable object is not empty.  \n  \n```  \ntemplate <class Fty>  \nbool operator!=(const function<Fty>& f, null_ptr_type npc);\n\ntemplate <class Fty>  \nbool operator!=(null_ptr_type npc, const function<Fty>& f);\n```  \n  \n### Parameters  \n `Fty`  \n The function type to wrap.  \n  \n `f`  \n The function object  \n  \n `npc`  \n A null pointer.  \n  \n### Remarks  \n The operators both take an argument that is a reference to a `function` object and an argument that is a null pointer constant. Both return true only if the `function` object is not empty.  \n  \n### Example  \n  \n```cpp  \n// std_tr1__functional__operator_ne.cpp   \n// compile with: /EHsc   \n#include <functional>   \n#include <iostream>   \n  \nint neg(int val)   \n    {   \n    return (-val);   \n    }   \n  \nint main()   \n    {   \n    std::function<int (int)> fn0;   \n    std::cout << std::boolalpha << \"not empty == \"   \n        << (fn0 != 0) << std::endl;   \n  \n    std::function<int (int)> fn1(neg);   \n    std::cout << std::boolalpha << \"not empty == \"   \n        << (fn1 != 0) << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nnot empty == false  \nnot empty == true  \n```  \n  \n## See Also  \n [\\<functional>](../standard-library/functional.md)\n\n"}