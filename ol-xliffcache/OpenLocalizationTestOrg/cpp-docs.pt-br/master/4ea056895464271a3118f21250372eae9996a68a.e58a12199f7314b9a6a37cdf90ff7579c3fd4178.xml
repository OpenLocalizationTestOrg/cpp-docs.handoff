{"nodes":[{"pos":[12,43],"content":"ptr::operator= | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ptr::operator= | Microsoft Docs","pos":[0,31]}]},{"content":"ptr::operator=","pos":[681,695]},{"pos":[696,734],"content":"Attaches a COM object to a <ph id=\"ph1\">`com::ptr`</ph>.","source":"Attaches a COM object to a `com::ptr`."},{"content":"Syntax","pos":[743,749]},{"content":"Parameters","pos":[846,856]},{"content":"The COM interface pointer to attach.","pos":[872,908]},{"content":"Return Value","pos":[917,929]},{"pos":[933,972],"content":"A tracking reference on the <ph id=\"ph1\">`com::ptr`</ph>.","source":"A tracking reference on the `com::ptr`."},{"content":"Exceptions","pos":[981,991]},{"pos":[995,1114],"content":"If the <ph id=\"ph1\">`com::ptr`</ph> already owns a reference to a COM object, <ph id=\"ph2\">`operator=`</ph> throws &lt;xref:System.InvalidOperationException&gt;.","source":"If the `com::ptr` already owns a reference to a COM object, `operator=` throws <xref:System.InvalidOperationException>."},{"content":"Remarks","pos":[1123,1130]},{"pos":[1134,1249],"content":"Assigning a COM object to a <ph id=\"ph1\">`com::ptr`</ph> references the COM object but does not release the caller's reference to it.","source":"Assigning a COM object to a `com::ptr` references the COM object but does not release the caller's reference to it."},{"pos":[1256,1302],"content":"This operator has the same effect as <ph id=\"ph1\">`Attach`</ph>.","source":"This operator has the same effect as `Attach`."},{"content":"Example","pos":[1311,1318]},{"content":"This example implements a CLR class that uses a <ph id=\"ph1\">`com::ptr`</ph> to wrap its private member <ph id=\"ph2\">`IXMLDOMDocument`</ph> object.","pos":[1322,1433],"source":"This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object."},{"content":"The <ph id=\"ph1\">`ReplaceDocument`</ph> member function first calls <ph id=\"ph2\">`Release`</ph> on any previously owned object and then uses <ph id=\"ph3\">`operator=`</ph> to attach a new document object.","pos":[1435,1584],"source":"  The `ReplaceDocument` member function first calls `Release` on any previously owned object and then uses `operator=` to attach a new document object."},{"content":"Requirements","pos":[3646,3658]},{"pos":[3662,3696],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\com\\ptr.h&gt;","source":"**Header file** \\<msclr\\com\\ptr.h>"},{"pos":[3703,3727],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr::com","source":"**Namespace** msclr::com"},{"content":"See Also","pos":[3736,3744]},{"content":"ptr Members","pos":[3749,3760]},{"content":"ptr::Attach","pos":[3793,3804]},{"content":"ptr::Detach","pos":[3836,3847]},{"content":"ptr::Release","pos":[3879,3891]}],"content":"---\ntitle: \"ptr::operator= | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ptr.operator=\"\n  - \"msclr.com.ptr.operator=\"\n  - \"msclr::com::ptr::operator=\"\n  - \"ptr::operator=\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operator=\"\nms.assetid: 58619910-46c0-4db8-b183-c811b23b2df1\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ptr::operator=\nAttaches a COM object to a `com::ptr`.  \n  \n## Syntax  \n  \n```  \nptr<_interface_type> % operator=(  \n   _interface_type * _right  \n);  \n```  \n  \n#### Parameters  \n `_right`  \n The COM interface pointer to attach.  \n  \n## Return Value  \n A tracking reference on the `com::ptr`.  \n  \n## Exceptions  \n If the `com::ptr` already owns a reference to a COM object, `operator=` throws <xref:System.InvalidOperationException>.  \n  \n## Remarks  \n Assigning a COM object to a `com::ptr` references the COM object but does not release the caller's reference to it.  \n  \n This operator has the same effect as `Attach`.  \n  \n## Example  \n This example implements a CLR class that uses a `com::ptr` to wrap its private member `IXMLDOMDocument` object.  The `ReplaceDocument` member function first calls `Release` on any previously owned object and then uses `operator=` to attach a new document object.  \n  \n```  \n// comptr_op_assign.cpp  \n// compile with: /clr /link msxml2.lib  \n#include <msxml2.h>  \n#include <msclr\\com\\ptr.h>  \n  \n#import <msxml3.dll> raw_interfaces_only  \n  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \nusing namespace msclr;  \n  \n// a ref class that uses a com::ptr to contain an   \n// IXMLDOMDocument object  \nref class XmlDocument {  \npublic:  \n   // construct the internal com::ptr with a null interface  \n   // and use CreateInstance to fill it  \n   XmlDocument(String^ progid) {  \n      m_ptrDoc.CreateInstance(progid);     \n   }  \n  \n   // replace currently held COM object with another one  \n   void ReplaceDocument(IXMLDOMDocument* pDoc) {  \n      // release current document object  \n      m_ptrDoc.Release();  \n      // attach the new document object  \n      m_ptrDoc = pDoc;  \n   }  \n  \n   // note that the destructor will call the com::ptr destructor  \n   // and automatically release the reference to the COM object  \n  \nprivate:  \n   com::ptr<IXMLDOMDocument> m_ptrDoc;  \n};  \n  \n// unmanaged function that creates a raw XML DOM Document object  \nIXMLDOMDocument* CreateDocument() {  \n   IXMLDOMDocument* pDoc = NULL;  \n   Marshal::ThrowExceptionForHR(CoCreateInstance(CLSID_DOMDocument30, NULL,  \n      CLSCTX_INPROC_SERVER, IID_IXMLDOMDocument, (void**)&pDoc));  \n   return pDoc;  \n}  \n  \n// use the ref class to handle an XML DOM Document object  \nint main() {  \n   IXMLDOMDocument* pDoc = NULL;  \n  \n   try {  \n      // create the class from a progid string  \n      XmlDocument doc(\"Msxml2.DOMDocument.3.0\");  \n  \n      // get another document object from unmanaged function and  \n      // store it in place of the one held by the ref class  \n      pDoc = CreateDocument();  \n      doc.ReplaceDocument(pDoc);  \n      // no further need for raw object reference  \n      pDoc->Release();  \n      pDoc = NULL;  \n   }  \n   catch (Exception^ e) {  \n      Console::WriteLine(e);     \n   }  \n   finally {  \n      if (NULL != pDoc) {  \n         pDoc->Release();  \n      }  \n   }  \n}  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\com\\ptr.h>  \n  \n **Namespace** msclr::com  \n  \n## See Also  \n [ptr Members](../dotnet/ptr-members.md)   \n [ptr::Attach](../dotnet/ptr-attach.md)   \n [ptr::Detach](../dotnet/ptr-detach.md)   \n [ptr::Release](../dotnet/ptr-release.md)"}