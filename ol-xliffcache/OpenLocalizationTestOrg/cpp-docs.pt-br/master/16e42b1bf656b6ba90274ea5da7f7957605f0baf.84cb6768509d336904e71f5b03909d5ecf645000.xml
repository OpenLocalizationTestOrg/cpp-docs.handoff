{"nodes":[{"pos":[12,80],"content":"How to: Modify Reference Class in a Native Function | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Modify Reference Class in a Native Function | Microsoft Docs","pos":[0,68]}]},{"content":"How to: Modify Reference Class in a Native Function","pos":[692,743]},{"content":"You can pass a reference class with a CLR array to a native function, and modify the class, using PInvoke services.","pos":[744,859]},{"content":"Example","pos":[868,875]},{"content":"Compile the following native library.","pos":[879,916]},{"content":"Example","pos":[1500,1507]},{"content":"Compile the following assembly.","pos":[1511,1542]},{"content":"See Also","pos":[2590,2598]},{"content":"Using C++ Interop (Implicit PInvoke)","pos":[2603,2639]}],"content":"---\ntitle: \"How to: Modify Reference Class in a Native Function | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"get-started-article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"platform invoke, reference class\"\n  - \"reference types, modifying in a C++ native function\"\nms.assetid: c701145b-62a0-4c4b-b32a-db8d69a59720\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Modify Reference Class in a Native Function\nYou can pass a reference class with a CLR array to a native function, and modify the class, using PInvoke services.  \n  \n## Example  \n Compile the following native library.  \n  \n```  \n// modify_ref_class_in_native_function.cpp  \n// compile with: /LD  \n#include <stdio.h>  \n#include <windows.h>  \n  \nstruct S {  \n   wchar_t* str;  \n   int intarr[2];  \n};  \n  \nextern \"C\"  {  \n   __declspec(dllexport) int bar(S* param) {  \n      printf_s(\"str: %S\\n\", param->str);  \n      fflush(stdin);  \n      fflush(stdout);  \n      printf_s(\"In native: intarr: %d, %d\\n\",  \n                param->intarr[0], param->intarr[1]);  \n      fflush(stdin);  \n      fflush(stdout);  \n      param->intarr[0]=300;param->intarr[1]=400;  \n      return 0;  \n    }  \n};  \n```  \n  \n## Example  \n Compile the following assembly.  \n  \n```  \n// modify_ref_class_in_native_function_2.cpp  \n// compile with: /clr  \nusing namespace System;  \nusing namespace System::Runtime::InteropServices;  \n  \n[StructLayout(LayoutKind::Sequential, CharSet = CharSet::Unicode)]  \nref class S  {  \npublic:  \n   [MarshalAsAttribute(UnmanagedType::LPWStr)]  \n   String ^ str;  \n   [MarshalAsAttribute(UnmanagedType::ByValArray,  \n        ArraySubType=UnmanagedType::I4, SizeConst=2)]  \n   array<Int32> ^ intarr;  \n};  \n  \n[DllImport(\"modify_ref_class_in_native_function.dll\",  \n           CharSet=CharSet::Unicode)]  \nint bar([In][Out] S ^ param);  \n  \nint main() {  \n   S ^ param = gcnew S;  \n   param->str = \"Hello\";  \n   param->intarr = gcnew array<Int32>(2);  \n   param->intarr[0] = 100;  \n   param->intarr[1] = 200;  \n   bar(param);   // Call to native function  \n   Console::WriteLine(\"In managed: intarr: {0}, {1}\",  \n                       param->intarr[0], param->intarr[1]);  \n}  \n```  \n  \n```Output  \nstr: Hello  \nIn native: intarr: 100, 200  \nIn managed: intarr: 300, 400  \n```  \n  \n## See Also  \n [Using C++ Interop (Implicit PInvoke)](../dotnet/using-cpp-interop-implicit-pinvoke.md)"}