{"nodes":[{"pos":[12,50],"content":"IRowsetNotifyCP Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IRowsetNotifyCP Class | Microsoft Docs","pos":[0,38]}]},{"content":"IRowsetNotifyCP Class","pos":[617,638]},{"pos":[639,775],"content":"Implements the provider site for the connection point interface <bpt id=\"p1\">[</bpt>IRowsetNotify<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/ms712959.aspx)</ept>.","source":"Implements the provider site for the connection point interface [IRowsetNotify](https://msdn.microsoft.com/en-us/library/ms712959.aspx)."},{"content":"Syntax","pos":[784,790]},{"content":"Parameters","pos":[1095,1105]},{"content":"A class derived from <ph id=\"ph1\">`IRowsetNotifyCP`</ph>.","pos":[1116,1155],"source":" A class derived from `IRowsetNotifyCP`."},{"content":"A mutex class that supports reentrancy (the default is <bpt id=\"p1\">**</bpt>CComSharedMutex<ept id=\"p1\">**</ept>).","pos":[1186,1262],"source":" A mutex class that supports reentrancy (the default is **CComSharedMutex**)."},{"content":"A mutex is a synchronization object that allows one thread mutually exclusive access to a resource.","pos":[1263,1362]},{"content":"A interface ID pointer (<bpt id=\"p1\">**</bpt>IID<ph id=\"ph1\">\\*</ph><ept id=\"p1\">**</ept>) for an <bpt id=\"p2\">**</bpt>IRowsetNotify<ept id=\"p2\">**</ept> connection point interface.","pos":[1379,1466],"source":" A interface ID pointer (**IID\\***) for an **IRowsetNotify** connection point interface."},{"content":"The default value is <bpt id=\"p1\">**</bpt>&amp;__uuidof(IRowsetNotify)<ept id=\"p1\">**</ept>.","pos":[1467,1517],"source":" The default value is **&__uuidof(IRowsetNotify)**."},{"content":"An array of type <bpt id=\"p1\">[</bpt>CComDynamicUnkArray<ept id=\"p1\">](../../atl/reference/ccomdynamicunkarray-class.md)</ept>, which is a dynamically allocated array of <bpt id=\"p2\">**</bpt>IUnknown<ept id=\"p2\">**</ept> pointers to the client sink interfaces.","pos":[1545,1729],"source":" An array of type [CComDynamicUnkArray](../../atl/reference/ccomdynamicunkarray-class.md), which is a dynamically allocated array of **IUnknown** pointers to the client sink interfaces."},{"content":"Members","pos":[1738,1745]},{"content":"Methods","pos":[1755,1762]},{"content":"Fire_OnFieldChange","pos":[1784,1802]},{"content":"Notifies the consumer of a change to the value of a column.","pos":[1860,1919]},{"content":"Fire_OnRowChange","pos":[1925,1941]},{"content":"Notifies the consumer of a change affecting the rows.","pos":[1997,2050]},{"content":"Fire_OnRowsetChange","pos":[2056,2075]},{"content":"Notifies the consumer of a change affecting the entire rowset.","pos":[2134,2196]},{"content":"Remarks","pos":[2206,2213]},{"pos":[2235,2373],"content":"implements broadcast functions to advise listeners on the connection point <bpt id=\"p1\">**</bpt>IID_IRowsetNotify<ept id=\"p1\">**</ept> of changes to the contents of the rowset.","source":" implements broadcast functions to advise listeners on the connection point **IID_IRowsetNotify** of changes to the contents of the rowset."},{"content":"Note that you must also implement and register <ph id=\"ph1\">`IRowsetNotify`</ph> on the consumer (also known as the \"sink\") using <bpt id=\"p1\">[</bpt>IRowsetNotifyImpl<ept id=\"p1\">](../../data/oledb/irowsetnotifyimpl-class.md)</ept> so that the consumer can handle notifications.","pos":[2380,2603],"source":"Note that you must also implement and register `IRowsetNotify` on the consumer (also known as the \"sink\") using [IRowsetNotifyImpl](../../data/oledb/irowsetnotifyimpl-class.md) so that the consumer can handle notifications."},{"content":"See <bpt id=\"p1\">[</bpt>Receiving Notifications<ept id=\"p1\">](../../data/oledb/receiving-notifications.md)</ept> about implementing the connection point interface on the consumer.","pos":[2604,2745],"source":" See [Receiving Notifications](../../data/oledb/receiving-notifications.md) about implementing the connection point interface on the consumer."},{"pos":[2752,2927],"content":"For detailed information on implementing notifications, see \"Supporting Notifications\" in <bpt id=\"p1\">[</bpt>Creating an Updatable Provider<ept id=\"p1\">](../../data/oledb/creating-an-updatable-provider.md)</ept>.","source":"For detailed information on implementing notifications, see \"Supporting Notifications\" in [Creating an Updatable Provider](../../data/oledb/creating-an-updatable-provider.md)."},{"content":"Requirements","pos":[2936,2948]},{"pos":[2952,2971],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atldb.h","source":"**Header:** atldb.h"},{"content":"See Also","pos":[2980,2988]},{"content":"OLE DB Provider Templates","pos":[2993,3018]},{"content":"OLE DB Provider Template Architecture","pos":[3076,3113]},{"content":"Notifications (COM)","pos":[3179,3198]},{"content":"Overview of Notifications (OLE DB)","pos":[3265,3299]},{"content":"BEGIN_CONNECTION_POINT_MAP","pos":[3362,3388]},{"content":"END_CONNECTION_POINT_MAP","pos":[3467,3491]},{"content":"CONNECTION_POINT_ENTRY","pos":[3570,3592]},{"content":"Creating an Updatable Provider","pos":[3671,3701]}],"content":"---\ntitle: \"IRowsetNotifyCP Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"IRowsetNotifyCP\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"IRowsetNotifyCP class\"\nms.assetid: ccef402b-94a0-4c2e-9a13-7e854ef82390\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IRowsetNotifyCP Class\nImplements the provider site for the connection point interface [IRowsetNotify](https://msdn.microsoft.com/en-us/library/ms712959.aspx).  \n  \n## Syntax  \n  \n```  \ntemplate <  \n   class T,   \n   class ReentrantEventSync = CComSharedMutex   \n>  \nclass IRowsetNotifyCP :   \n   public IConnectionPointImpl<  \n      T,   \n      piid = &__uuidof(IRowsetNotify),   \n      CComDynamicUnkArray DynamicUnkArray  \n   >,  \n   public ReentrantEventSync  \n```  \n  \n#### Parameters  \n `T`  \n A class derived from `IRowsetNotifyCP`.  \n  \n `ReentrantEventSync`  \n A mutex class that supports reentrancy (the default is **CComSharedMutex**). A mutex is a synchronization object that allows one thread mutually exclusive access to a resource.  \n  \n `piid`  \n A interface ID pointer (**IID\\***) for an **IRowsetNotify** connection point interface. The default value is **&__uuidof(IRowsetNotify)**.  \n  \n `DynamicUnkArray`  \n An array of type [CComDynamicUnkArray](../../atl/reference/ccomdynamicunkarray-class.md), which is a dynamically allocated array of **IUnknown** pointers to the client sink interfaces.  \n  \n## Members  \n  \n### Methods  \n  \n|||  \n|-|-|  \n|[Fire_OnFieldChange](../../data/oledb/irowsetnotifycp-fire-onfieldchange.md)|Notifies the consumer of a change to the value of a column.|  \n|[Fire_OnRowChange](../../data/oledb/irowsetnotifycp-fire-onrowchange.md)|Notifies the consumer of a change affecting the rows.|  \n|[Fire_OnRowsetChange](../../data/oledb/irowsetnotifycp-fire-onrowsetchange.md)|Notifies the consumer of a change affecting the entire rowset.|  \n  \n## Remarks  \n `IRowsetNotifyCP` implements broadcast functions to advise listeners on the connection point **IID_IRowsetNotify** of changes to the contents of the rowset.  \n  \n Note that you must also implement and register `IRowsetNotify` on the consumer (also known as the \"sink\") using [IRowsetNotifyImpl](../../data/oledb/irowsetnotifyimpl-class.md) so that the consumer can handle notifications. See [Receiving Notifications](../../data/oledb/receiving-notifications.md) about implementing the connection point interface on the consumer.  \n  \n For detailed information on implementing notifications, see \"Supporting Notifications\" in [Creating an Updatable Provider](../../data/oledb/creating-an-updatable-provider.md).  \n  \n## Requirements  \n **Header:** atldb.h  \n  \n## See Also  \n [OLE DB Provider Templates](../../data/oledb/ole-db-provider-templates-cpp.md)   \n [OLE DB Provider Template Architecture](../../data/oledb/ole-db-provider-template-architecture.md)   \n [Notifications (COM)](http://msdn.microsoft.com/library/windows/desktop/ms678433)   \n [Overview of Notifications (OLE DB)](https://msdn.microsoft.com/en-us/library/ms725406.aspx)   \n [BEGIN_CONNECTION_POINT_MAP](http://msdn.microsoft.com/library/3896cda6-a8e2-4ed1-ac38-befbe2352034)   \n [END_CONNECTION_POINT_MAP](http://msdn.microsoft.com/library/807c5233-b58c-49a2-a34f-3b5f4a7b1b82)   \n [CONNECTION_POINT_ENTRY](http://msdn.microsoft.com/library/0a7f3053-6433-49b2-a9b5-8a307e8efe14)   \n [Creating an Updatable Provider](../../data/oledb/creating-an-updatable-provider.md)"}