{"nodes":[{"pos":[12,35],"content":".MODEL | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":".MODEL | Microsoft Docs","pos":[0,23]}]},{"content":".MODEL","pos":[588,594]},{"content":"Initializes the program memory model.","pos":[595,632]},{"content":"Syntax","pos":[641,647]},{"content":"Parameters","pos":[727,737]},{"content":"Required parameter that determines the size of code and data pointers.","pos":[758,828]},{"content":"Optional parameter that sets the calling and naming conventions for procedures and public symbols.","pos":[849,947]},{"content":"Optional parameter.","pos":[971,990]},{"pos":[1011,1050],"content":"is not used if <ph id=\"ph1\">`memorymodel`</ph> is <ph id=\"ph2\">`FLAT`</ph>.","source":" is not used if `memorymodel` is `FLAT`."},{"content":"Specifying <ph id=\"ph1\">`NEARSTACK`</ph> groups the stack segment into a single physical segment (<ph id=\"ph2\">`DGROUP`</ph>) along with data.","pos":[1057,1163],"source":"Specifying `NEARSTACK` groups the stack segment into a single physical segment (`DGROUP`) along with data."},{"content":"The stack segment register (<ph id=\"ph1\">`SS`</ph>) is assumed to hold the same address as the data segment register (<ph id=\"ph2\">`DS`</ph>).","pos":[1164,1270],"source":" The stack segment register (`SS`) is assumed to hold the same address as the data segment register (`DS`)."},{"content":"does not group the stack with <ph id=\"ph1\">`DGROUP`</ph>; thus <ph id=\"ph2\">`SS`</ph> does not equal <ph id=\"ph3\">`DS`</ph>.","pos":[1282,1352],"source":" does not group the stack with `DGROUP`; thus `SS` does not equal `DS`."},{"content":"Remarks","pos":[1361,1368]},{"content":".","pos":[1372,1373]},{"content":"is not used in <bpt id=\"p1\">[</bpt>MASM for x64 (ml64.exe)<ept id=\"p1\">](../../assembler/masm/masm-for-x64-ml64-exe.md)</ept>.","pos":[1381,1469],"source":" is not used in [MASM for x64 (ml64.exe)](../../assembler/masm/masm-for-x64-ml64-exe.md)."},{"content":"The following table lists the possible values for each parameter when targeting 16-bit and 32-bit platforms:","pos":[1476,1584]},{"content":"Parameter","pos":[1591,1600]},{"content":"32-bit values","pos":[1601,1614]},{"content":"16-bit values (support for earlier 16-bit development)","pos":[1615,1669]},{"pos":[1807,1855],"content":", <ph id=\"ph1\">`SMALL`</ph>, <ph id=\"ph2\">`COMPACT`</ph>, <ph id=\"ph3\">`MEDIUM`</ph>, <ph id=\"ph4\">`LARGE`</ph>, <ph id=\"ph5\">`HUGE`</ph>,","source":", `SMALL`, `COMPACT`, `MEDIUM`, `LARGE`, `HUGE`, "},{"pos":[1881,1882],"content":","},{"pos":[1896,1938],"content":", <ph id=\"ph1\">`BASIC`</ph>, <ph id=\"ph2\">`FORTRAN`</ph>, <ph id=\"ph3\">`PASCAL`</ph>, <ph id=\"ph4\">`SYSCALL`</ph>,","source":", `BASIC`, `FORTRAN`, `PASCAL`, `SYSCALL`, "},{"content":"Not used","pos":[1967,1975]},{"pos":[1987,1988],"content":","},{"content":"Code","pos":[2009,2013]},{"pos":[2017,2195],"content":"For MASM-related samples, download the Compiler samples from <bpt id=\"p1\">[</bpt>Visual C++ Samples and Related Documentation for Visual Studio 2010<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=178749)</ept>.","source":"For MASM-related samples, download the Compiler samples from [Visual C++ Samples and Related Documentation for Visual Studio 2010](http://go.microsoft.com/fwlink/?LinkID=178749)."},{"pos":[2202,2271],"content":"The following example demonstrates the use of the <ph id=\"ph1\">`.MODEL`</ph> directive.","source":"The following example demonstrates the use of the `.MODEL` directive."},{"content":"Example","pos":[2280,2287]},{"content":"See Also","pos":[2814,2822]},{"content":"Directives Reference","pos":[2827,2847]},{"content":"Visual C++ Samples and Related Documentation for Visual Studio 2010","pos":[2900,2967]}],"content":"---\ntitle: \".MODEL | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \".MODEL\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \".MODEL directive\"\nms.assetid: 057f00df-1515-4c55-852a-d936c8a34b53\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# .MODEL\nInitializes the program memory model.  \n  \n## Syntax  \n  \n```  \n.MODEL memorymodel [[, langtype]] [[, stackoption]]  \n```  \n  \n#### Parameters  \n `memorymodel`  \n Required parameter that determines the size of code and data pointers.  \n  \n `langtype`  \n Optional parameter that sets the calling and naming conventions for procedures and public symbols.  \n  \n `stackoption`  \n Optional parameter.  \n  \n `stackoption` is not used if `memorymodel` is `FLAT`.  \n  \n Specifying `NEARSTACK` groups the stack segment into a single physical segment (`DGROUP`) along with data. The stack segment register (`SS`) is assumed to hold the same address as the data segment register (`DS`). `FARSTACK` does not group the stack with `DGROUP`; thus `SS` does not equal `DS`.  \n  \n## Remarks  \n .`MODEL` is not used in [MASM for x64 (ml64.exe)](../../assembler/masm/masm-for-x64-ml64-exe.md).  \n  \n The following table lists the possible values for each parameter when targeting 16-bit and 32-bit platforms:  \n  \n|Parameter|32-bit values|16-bit values (support for earlier 16-bit development)|  \n|---------------|--------------------|----------------------------------------------------------------|  \n|`memorymodel`|`FLAT`|`TINY`, `SMALL`, `COMPACT`, `MEDIUM`, `LARGE`, `HUGE`, `FLAT`|  \n|`langtype`|`C`, `STDCALL`|`C`, `BASIC`, `FORTRAN`, `PASCAL`, `SYSCALL`, `STDCALL`|  \n|`stackoption`|Not used|`NEARSTACK`, `FARSTACK`|  \n  \n## Code  \n For MASM-related samples, download the Compiler samples from [Visual C++ Samples and Related Documentation for Visual Studio 2010](http://go.microsoft.com/fwlink/?LinkID=178749).  \n  \n The following example demonstrates the use of the `.MODEL` directive.  \n  \n## Example  \n  \n```  \n; file simple.asm  \n; For x86 (32-bit), assemble with debug information:   \n;   ml -c -Zi simple.asm  \n; For x64 (64-bit), assemble with debug information:   \n;   ml64 -c -DX64 -Zi simple.asm  \n;  \n; In this sample, the 'X64' define excludes source not used   \n;  when targeting the x64 architecture  \n  \nifndef X64  \n.686p  \n.XMM  \n.model flat, C  \nendif  \n  \n.data  \n; user data  \n  \n.code  \n; user code  \n  \nfxn PROC public  \n  xor eax, eax ; zero function return value  \n  ret  \nfxn ENDP  \n  \nend  \n```  \n  \n## See Also  \n [Directives Reference](../../assembler/masm/directives-reference.md)   \n [Visual C++ Samples and Related Documentation for Visual Studio 2010](http://go.microsoft.com/fwlink/?LinkID=178749)"}