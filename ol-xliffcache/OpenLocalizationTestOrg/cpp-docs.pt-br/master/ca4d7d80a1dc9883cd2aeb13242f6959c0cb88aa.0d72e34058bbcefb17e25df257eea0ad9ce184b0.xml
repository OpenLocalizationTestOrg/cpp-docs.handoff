{"nodes":[{"pos":[12,67],"content":"Implementing a Window with CWindowImpl | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Implementing a Window with CWindowImpl | Microsoft Docs","pos":[0,55]}]},{"content":"Implementing a Window with CWindowImpl","pos":[776,814]},{"content":"To implement a window, derive a class from <ph id=\"ph1\">`CWindowImpl`</ph>.","pos":[815,872],"source":"To implement a window, derive a class from `CWindowImpl`."},{"content":"In your derived class, declare a message map and the message handler functions.","pos":[873,952]},{"content":"You can now use your class in three different ways:","pos":[953,1004]},{"content":"Create a window based on a new Windows class","pos":[1015,1059]},{"content":"Superclass an existing Windows class","pos":[1125,1161]},{"content":"Subclass an existing window","pos":[1220,1247]},{"pos":[1363,1409],"content":"Creating a Window Based on a New Windows Class"},{"content":"contains the <bpt id=\"p1\">[</bpt>DECLARE_WND_CLASS<ept id=\"p1\">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept> macro to declare Windows class information.","pos":[1427,1575],"source":" contains the [DECLARE_WND_CLASS](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971) macro to declare Windows class information."},{"content":"This macro implements the <ph id=\"ph1\">`GetWndClassInfo`</ph> function, which uses <bpt id=\"p1\">[</bpt>CWndClassInfo<ept id=\"p1\">](../atl/reference/cwndclassinfo-class.md)</ept> to define the information of a new Windows class.","pos":[1576,1747],"source":" This macro implements the `GetWndClassInfo` function, which uses [CWndClassInfo](../atl/reference/cwndclassinfo-class.md) to define the information of a new Windows class."},{"content":"When <ph id=\"ph1\">`CWindowImpl::Create`</ph> is called, this Windows class is registered and a new window is created.","pos":[1748,1847],"source":" When `CWindowImpl::Create` is called, this Windows class is registered and a new window is created."},{"pos":[1855,2081],"content":"[!NOTE]\n `CWindowImpl` passes **NULL** to the `DECLARE_WND_CLASS` macro, which means ATL will generate a Windows class name. To specify your own name, pass a string to `DECLARE_WND_CLASS` in your `CWindowImpl`-derived class.","leadings":["","> "],"nodes":[{"content":" passes **NULL** to the `DECLARE_WND_CLASS` macro, which means ATL will generate a Windows class name. To specify your own name, pass a string to `DECLARE_WND_CLASS` in your `CWindowImpl`-derived class.","pos":[22,224],"nodes":[{"content":"passes <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> to the <ph id=\"ph1\">`DECLARE_WND_CLASS`</ph> macro, which means ATL will generate a Windows class name.","pos":[1,102],"source":" passes **NULL** to the `DECLARE_WND_CLASS` macro, which means ATL will generate a Windows class name."},{"content":"To specify your own name, pass a string to <ph id=\"ph1\">`DECLARE_WND_CLASS`</ph> in your <ph id=\"ph2\">`CWindowImpl`</ph>-derived class.","pos":[103,202],"source":" To specify your own name, pass a string to `DECLARE_WND_CLASS` in your `CWindowImpl`-derived class."}]}]},{"content":"Example","pos":[2090,2097]},{"content":"Following is an example of a class that implements a window based on a new Windows class:","pos":[2101,2190]},{"pos":[2208,2228],"content":"NVC_ATL_Windowing#64"},{"pos":[2304,2394],"content":"To create a window, create an instance of <ph id=\"ph1\">`CMyWindow`</ph> and then call the <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> method.","source":"To create a window, create an instance of `CMyWindow` and then call the **Create** method."},{"pos":[2402,2590],"content":"[!NOTE]\n To override the default Windows class information, implement the `GetWndClassInfo` method in your derived class by setting the `CWndClassInfo` members to the appropriate values.","leadings":["","> "],"nodes":[{"content":"To override the default Windows class information, implement the <ph id=\"ph1\">`GetWndClassInfo`</ph> method in your derived class by setting the <ph id=\"ph2\">`CWndClassInfo`</ph> members to the appropriate values.","pos":[9,186],"source":" To override the default Windows class information, implement the `GetWndClassInfo` method in your derived class by setting the `CWndClassInfo` members to the appropriate values."}]},{"pos":[2660,2699],"content":"Superclassing an Existing Windows Class"},{"content":"The <bpt id=\"p1\">[</bpt>DECLARE_WND_SUPERCLASS<ept id=\"p1\">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro allows you to create a window that superclasses an existing Windows class.","pos":[2703,2884],"source":"The [DECLARE_WND_SUPERCLASS](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd) macro allows you to create a window that superclasses an existing Windows class."},{"content":"Specify this macro in your <ph id=\"ph1\">`CWindowImpl`</ph>-derived class.","pos":[2885,2940],"source":" Specify this macro in your `CWindowImpl`-derived class."},{"content":"Like any other ATL window, messages are handled by a message map.","pos":[2941,3006]},{"content":"When you use <ph id=\"ph1\">`DECLARE_WND_SUPERCLASS`</ph>, a new Windows class will be registered.","pos":[3013,3091],"source":"When you use `DECLARE_WND_SUPERCLASS`, a new Windows class will be registered."},{"content":"This new class will be the same as the existing class you specify, but will replace the window procedure with <ph id=\"ph1\">`CWindowImpl::WindowProc`</ph> (or with your function that overrides this method).","pos":[3092,3279],"source":" This new class will be the same as the existing class you specify, but will replace the window procedure with `CWindowImpl::WindowProc` (or with your function that overrides this method)."},{"content":"Example","pos":[3288,3295]},{"content":"Following is an example of a class that superclasses the standard Edit class:","pos":[3299,3376]},{"pos":[3394,3414],"content":"NVC_ATL_Windowing#65"},{"pos":[3490,3598],"content":"To create the superclassed Edit window, create an instance of <ph id=\"ph1\">`CMyEdit`</ph> and then call the <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> method.","source":"To create the superclassed Edit window, create an instance of `CMyEdit` and then call the **Create** method."},{"pos":[3659,3689],"content":"Subclassing an Existing Window"},{"content":"To subclass an existing window, derive a class from <ph id=\"ph1\">`CWindowImpl`</ph> and declare a message map, as in the two previous cases.","pos":[3693,3815],"source":"To subclass an existing window, derive a class from `CWindowImpl` and declare a message map, as in the two previous cases."},{"content":"Note, however, that you do not specify any Windows class information, since you will subclass an already existing window.","pos":[3816,3937]},{"content":"Instead of calling <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, call <ph id=\"ph1\">`SubclassWindow`</ph> and pass it the handle to the existing window you want to subclass.","pos":[3944,4064],"source":"Instead of calling **Create**, call `SubclassWindow` and pass it the handle to the existing window you want to subclass."},{"content":"Once the window is subclassed, it will use <ph id=\"ph1\">`CWindowImpl::WindowProc`</ph> (or your function that overrides this method) to direct messages to the message map.","pos":[4065,4218],"source":" Once the window is subclassed, it will use `CWindowImpl::WindowProc` (or your function that overrides this method) to direct messages to the message map."},{"content":"To detach a subclassed window from your object, call <ph id=\"ph1\">`UnsubclassWindow`</ph>.","pos":[4219,4291],"source":" To detach a subclassed window from your object, call `UnsubclassWindow`."},{"content":"The window's original window procedure will then be restored.","pos":[4292,4353]},{"content":"See Also","pos":[4362,4370]},{"content":"Implementing a Window","pos":[4375,4396]}],"content":"---\ntitle: \"Implementing a Window with CWindowImpl | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"CWindowImpl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ATL, windows\"\n  - \"windows [C++], subclassing\"\n  - \"windows [C++], superclassing\"\n  - \"windows [C++], ATL\"\n  - \"subclassing ATL window classes\"\n  - \"superclassing, ATL\"\nms.assetid: 3fc40550-f1d6-4702-8b7c-4cf682b6a855\ncaps.latest.revision: 10\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Implementing a Window with CWindowImpl\nTo implement a window, derive a class from `CWindowImpl`. In your derived class, declare a message map and the message handler functions. You can now use your class in three different ways:  \n  \n-   [Create a window based on a new Windows class](#_atl_creating_a_window_based_on_a_new_windows_class)  \n  \n-   [Superclass an existing Windows class](#_atl_superclassing_an_existing_windows_class)  \n  \n-   [Subclass an existing window](#_atl_subclassing_an_existing_window)  \n  \n##  <a name=\"_atl_creating_a_window_based_on_a_new_windows_class\"></a> Creating a Window Based on a New Windows Class  \n `CWindowImpl` contains the [DECLARE_WND_CLASS](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971) macro to declare Windows class information. This macro implements the `GetWndClassInfo` function, which uses [CWndClassInfo](../atl/reference/cwndclassinfo-class.md) to define the information of a new Windows class. When `CWindowImpl::Create` is called, this Windows class is registered and a new window is created.  \n  \n> [!NOTE]\n>  `CWindowImpl` passes **NULL** to the `DECLARE_WND_CLASS` macro, which means ATL will generate a Windows class name. To specify your own name, pass a string to `DECLARE_WND_CLASS` in your `CWindowImpl`-derived class.  \n  \n## Example  \n Following is an example of a class that implements a window based on a new Windows class:  \n  \n [!code-cpp[NVC_ATL_Windowing#64](../atl/codesnippet/cpp/implementing-a-window-with-cwindowimpl_1.h)]  \n  \n To create a window, create an instance of `CMyWindow` and then call the **Create** method.  \n  \n> [!NOTE]\n>  To override the default Windows class information, implement the `GetWndClassInfo` method in your derived class by setting the `CWndClassInfo` members to the appropriate values.  \n  \n##  <a name=\"_atl_superclassing_an_existing_windows_class\"></a> Superclassing an Existing Windows Class  \n The [DECLARE_WND_SUPERCLASS](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd) macro allows you to create a window that superclasses an existing Windows class. Specify this macro in your `CWindowImpl`-derived class. Like any other ATL window, messages are handled by a message map.  \n  \n When you use `DECLARE_WND_SUPERCLASS`, a new Windows class will be registered. This new class will be the same as the existing class you specify, but will replace the window procedure with `CWindowImpl::WindowProc` (or with your function that overrides this method).  \n  \n## Example  \n Following is an example of a class that superclasses the standard Edit class:  \n  \n [!code-cpp[NVC_ATL_Windowing#65](../atl/codesnippet/cpp/implementing-a-window-with-cwindowimpl_2.h)]  \n  \n To create the superclassed Edit window, create an instance of `CMyEdit` and then call the **Create** method.  \n  \n##  <a name=\"_atl_subclassing_an_existing_window\"></a> Subclassing an Existing Window  \n To subclass an existing window, derive a class from `CWindowImpl` and declare a message map, as in the two previous cases. Note, however, that you do not specify any Windows class information, since you will subclass an already existing window.  \n  \n Instead of calling **Create**, call `SubclassWindow` and pass it the handle to the existing window you want to subclass. Once the window is subclassed, it will use `CWindowImpl::WindowProc` (or your function that overrides this method) to direct messages to the message map. To detach a subclassed window from your object, call `UnsubclassWindow`. The window's original window procedure will then be restored.  \n  \n## See Also  \n [Implementing a Window](../atl/implementing-a-window.md)\n\n"}