{"nodes":[{"pos":[12,44],"content":"fma, fmaf, fmal | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"fma, fmaf, fmal | Microsoft Docs","pos":[0,32]}]},{"content":"fma, fmaf, fmal","pos":[1041,1056]},{"content":"Multiplies two values together,  adds a third value, and then rounds the result, without losing any precision due to intermediary rounding.","pos":[1057,1196]},{"content":"Syntax","pos":[1205,1211]},{"content":"Parameters","pos":[1641,1651]},{"content":"[in]","pos":[1655,1659]},{"content":"The first value to multiply.","pos":[1667,1695]},{"content":"[in]","pos":[1702,1706]},{"content":"The second value to multiply.","pos":[1714,1743]},{"content":"[in]","pos":[1750,1754]},{"content":"The value to add.","pos":[1762,1779]},{"content":"Return Value","pos":[1788,1800]},{"content":"Returns (<ph id=\"ph1\">`x`</ph> ×    <ph id=\"ph2\">`y`</ph>) + <ph id=\"ph3\">`z`</ph>.","pos":[1804,1833],"source":"Returns (`x` ×    `y`) + `z`."},{"content":"The return value is then rounded using the current rounding format.","pos":[1834,1901]},{"content":"Otherwise, may return one of the following values:","pos":[1908,1958]},{"content":"Issue","pos":[1965,1970]},{"content":"Return","pos":[1971,1977]},{"content":"= INFINITY, <ph id=\"ph1\">`y`</ph> = 0 or","pos":[2015,2037],"source":" = INFINITY, `y` = 0 or"},{"content":"= 0, <ph id=\"ph1\">`y`</ph> = INFINITY","pos":[2054,2073],"source":" = 0, `y` = INFINITY"},{"content":"NaN","pos":[2074,2077]},{"pos":[2086,2150],"content":"or <ph id=\"ph1\">`y`</ph> = exact ± INFINITY, <ph id=\"ph2\">`z`</ph> = INFINITY with the opposite sign","source":" or `y` = exact ± INFINITY, `z` = INFINITY with the opposite sign"},{"content":"NaN","pos":[2151,2154]},{"pos":[2163,2175],"content":"or <ph id=\"ph1\">`y`</ph> = NaN","source":" or `y` = NaN"},{"content":"NaN","pos":[2176,2179]},{"content":"not (<ph id=\"ph1\">`x`</ph> = 0, <ph id=\"ph2\">`y`</ph>= indefinite) and <ph id=\"ph3\">`z`</ph> = NaN","pos":[2184,2228],"source":"not (`x` = 0, `y`= indefinite) and `z` = NaN"},{"content":"not (<ph id=\"ph1\">`x`</ph>=indefinite, <ph id=\"ph2\">`y`</ph>=0) and <ph id=\"ph3\">`z`</ph> = NaN","pos":[2241,2282],"source":" not (`x`=indefinite, `y`=0) and `z` = NaN"},{"content":"NaN","pos":[2283,2286]},{"content":"Overflow range error","pos":[2291,2311]},{"content":"±HUGE_VAL, ±HUGE_VALF, or ±HUGE_VALL","pos":[2312,2348]},{"content":"Underflow range error","pos":[2353,2374]},{"content":"correct value, after rounding.","pos":[2375,2405]},{"pos":[2413,2506],"content":"Errors are reported as specified in <bpt id=\"p1\">[</bpt>_matherr<ept id=\"p1\">](../../c-runtime-library/reference/matherr.md)</ept>.","source":"Errors are reported as specified in [_matherr](../../c-runtime-library/reference/matherr.md)."},{"content":"Remarks","pos":[2515,2522]},{"content":"Because C++ allows overloading, you can call overloads of <ph id=\"ph1\">`fma`</ph> that take and return float and long double types.","pos":[2526,2639],"source":"Because C++ allows overloading, you can call overloads of `fma` that take and return float and long double types."},{"content":"In a C program, <ph id=\"ph1\">`fma`</ph> always takes and returns a double.","pos":[2640,2696],"source":" In a C program, `fma` always takes and returns a double."},{"content":"This function computes the value as though it were taken to infinite precision, and then rounds the final result.","pos":[2703,2816]},{"content":"Requirements","pos":[2825,2837]},{"content":"Function","pos":[2844,2852]},{"content":"C header","pos":[2853,2861]},{"content":"C++ header","pos":[2862,2872]},{"pos":[2935,2959],"content":",                <ph id=\"ph1\">`fmaf`</ph>,","source":",                `fmaf`,  "},{"content":"math.h&gt;","pos":[2970,2977],"source":"math.h>"},{"content":"cmath&gt;","pos":[2980,2986],"source":"cmath>"},{"pos":[2994,3098],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"See Also","pos":[3107,3115]},{"content":"Alphabetical Function Reference","pos":[3120,3151]},{"content":"remainder, remainderf, remainderl","pos":[3232,3265]},{"content":"remquo, remquof, remquol","pos":[3342,3366]}],"content":"---\ntitle: \"fma, fmaf, fmal | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"cpp\"\n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"fma\"\n  - \"fmaf\"\n  - \"fmal\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"fma\"\n  - \"fmaf\"\n  - \"fmal\"\n  - \"math/fma\"\n  - \"math/fmaf\"\n  - \"math/fmal\"\ndev_langs: \n  - \"C\"\n  - \"C++\"\nhelpviewer_keywords: \n  - \"fma function\"\n  - \"fmaf function\"\n  - \"fmal function\"\nms.assetid: 584a6037-da1e-4e86-9f0c-97aae86de0c0\ncaps.latest.revision: 10\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# fma, fmaf, fmal\nMultiplies two values together,  adds a third value, and then rounds the result, without losing any precision due to intermediary rounding.  \n  \n## Syntax  \n  \n```  \ndouble fma(  \n   double x,   \n   double y,   \n   double z  \n);  \n  \nfloat fma(  \n   float  x,   \n   float  y,   \n   float z  \n); //C++ only  \n  \nlong double fma(  \n   long double  x,   \n   long double  y,   \n   long double z  \n); //C++ only  \n  \nfloat fmaf(  \n   float  x,   \n   float  y,   \n   float z  \n);  \n  \nlong double fmal(  \n   long double  x,   \n   long double  y,   \n   long double z  \n);  \n  \n```  \n  \n#### Parameters  \n [in] `x`  \n The first value to multiply.  \n  \n [in] `y`  \n The second value to multiply.  \n  \n [in] `z`  \n The value to add.  \n  \n## Return Value  \n Returns (`x` ×    `y`) + `z`. The return value is then rounded using the current rounding format.  \n  \n Otherwise, may return one of the following values:  \n  \n|Issue|Return|  \n|-----------|------------|  \n|`x` = INFINITY, `y` = 0 or<br /><br /> `x` = 0, `y` = INFINITY|NaN|  \n|`x` or `y` = exact ± INFINITY, `z` = INFINITY with the opposite sign|NaN|  \n|`x` or `y` = NaN|NaN|  \n|not (`x` = 0, `y`= indefinite) and `z` = NaN<br /><br /> not (`x`=indefinite, `y`=0) and `z` = NaN|NaN|  \n|Overflow range error|±HUGE_VAL, ±HUGE_VALF, or ±HUGE_VALL|  \n|Underflow range error|correct value, after rounding.|  \n  \n Errors are reported as specified in [_matherr](../../c-runtime-library/reference/matherr.md).  \n  \n## Remarks  \n Because C++ allows overloading, you can call overloads of `fma` that take and return float and long double types. In a C program, `fma` always takes and returns a double.  \n  \n This function computes the value as though it were taken to infinite precision, and then rounds the final result.  \n  \n## Requirements  \n  \n|Function|C header|C++ header|  \n|--------------|--------------|------------------|  \n|`fma`,                `fmaf`,  `fmal`|\\<math.h>|\\<cmath>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## See Also  \n [Alphabetical Function Reference](../../c-runtime-library/reference/crt-alphabetical-function-reference.md)   \n [remainder, remainderf, remainderl](../../c-runtime-library/reference/remainder-remainderf-remainderl.md)   \n [remquo, remquof, remquol](../../c-runtime-library/reference/remquo-remquof-remquol.md)"}