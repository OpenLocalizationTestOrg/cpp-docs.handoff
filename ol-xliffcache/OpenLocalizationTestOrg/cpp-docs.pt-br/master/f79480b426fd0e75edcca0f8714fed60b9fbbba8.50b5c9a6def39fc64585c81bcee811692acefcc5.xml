{"nodes":[{"pos":[12,48],"content":"COleSafeArray Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"COleSafeArray Class | Microsoft Docs","pos":[0,36]}]},{"content":"COleSafeArray Class","pos":[680,699]},{"content":"A class for working with arrays of arbitrary type and dimension.","pos":[700,764]},{"content":"Syntax","pos":[773,779]},{"content":"Members","pos":[845,852]},{"content":"Public Constructors","pos":[862,881]},{"content":"Name","pos":[888,892]},{"content":"Description","pos":[893,904]},{"content":"COleSafeArray::COleSafeArray","pos":[943,971]},{"pos":[1004,1040],"content":"Constructs a <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Constructs a `COleSafeArray` object."},{"content":"Public Methods","pos":[1051,1065]},{"content":"Name","pos":[1072,1076]},{"content":"Description","pos":[1077,1088]},{"content":"COleSafeArray::AccessData","pos":[1127,1152]},{"content":"Retrieves a pointer to the array data.","pos":[1182,1220]},{"content":"COleSafeArray::AllocData","pos":[1226,1250]},{"content":"Allocates memory for the array.","pos":[1279,1310]},{"content":"COleSafeArray::AllocDescriptor","pos":[1316,1346]},{"content":"Allocates memory for the safe array descriptor.","pos":[1381,1428]},{"content":"COleSafeArray::Attach","pos":[1434,1455]},{"pos":[1481,1559],"content":"Gives control of the existing <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> array to the <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Gives control of the existing **VARIANT** array to the `COleSafeArray` object."},{"content":"COleSafeArray::Clear","pos":[1565,1585]},{"pos":[1610,1655],"content":"Frees all data in the underlying <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>.","source":"Frees all data in the underlying **VARIANT**."},{"content":"COleSafeArray::Copy","pos":[1661,1680]},{"content":"Creates a copy of an existing array.","pos":[1704,1740]},{"content":"COleSafeArray::Create","pos":[1746,1767]},{"content":"Creates a safe array.","pos":[1793,1814]},{"content":"COleSafeArray::CreateOneDim","pos":[1820,1847]},{"pos":[1879,1928],"content":"Creates a one-dimensional <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Creates a one-dimensional `COleSafeArray` object."},{"content":"COleSafeArray::Destroy","pos":[1934,1956]},{"content":"Destroys an existing array.","pos":[1983,2010]},{"content":"COleSafeArray::DestroyData","pos":[2016,2042]},{"content":"Destroys data in a safe array.","pos":[2073,2103]},{"content":"COleSafeArray::DestroyDescriptor","pos":[2109,2141]},{"content":"Destroys a descriptor of a safe array.","pos":[2178,2216]},{"content":"COleSafeArray::Detach","pos":[2222,2243]},{"pos":[2269,2369],"content":"Detaches the <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> array from the <ph id=\"ph1\">`COleSafeArray`</ph> object (so that the data will not be freed).","source":"Detaches the **VARIANT** array from the `COleSafeArray` object (so that the data will not be freed)."},{"content":"COleSafeArray::GetByteArray","pos":[2375,2402]},{"pos":[2434,2533],"content":"Copies the contents of the safe array into a <bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept>.","source":"Copies the contents of the safe array into a [CByteArray](../../mfc/reference/cbytearray-class.md)."},{"content":"COleSafeArray::GetDim","pos":[2539,2560]},{"content":"Returns the number of dimensions in the array.","pos":[2586,2632]},{"content":"COleSafeArray::GetElement","pos":[2638,2663]},{"content":"Retrieves a single element of the safe array.","pos":[2693,2738]},{"content":"COleSafeArray::GetElemSize","pos":[2744,2770]},{"content":"Returns the size, in bytes, of one element in a safe array.","pos":[2801,2860]},{"content":"COleSafeArray::GetLBound","pos":[2866,2890]},{"content":"Returns the lower bound for any dimension of a safe array.","pos":[2919,2977]},{"content":"COleSafeArray::GetOneDimSize","pos":[2983,3011]},{"pos":[3044,3121],"content":"Returns the number of elements in the one-dimensional <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Returns the number of elements in the one-dimensional `COleSafeArray` object."},{"content":"COleSafeArray::GetUBound","pos":[3127,3151]},{"content":"Returns the upper bound for any dimension of a safe array.","pos":[3180,3238]},{"content":"COleSafeArray::Lock","pos":[3244,3263]},{"content":"Increments the lock count of an array and places a pointer to the array data in the array descriptor.","pos":[3287,3388]},{"content":"COleSafeArray::PtrOfIndex","pos":[3394,3419]},{"content":"Returns a pointer to the indexed element.","pos":[3449,3490]},{"content":"COleSafeArray::PutElement","pos":[3496,3521]},{"content":"Assigns a single element into the array.","pos":[3551,3591]},{"content":"COleSafeArray::Redim","pos":[3597,3617]},{"content":"Changes the least significant (rightmost) bound of a safe array.","pos":[3642,3706]},{"content":"COleSafeArray::ResizeOneDim","pos":[3712,3739]},{"pos":[3771,3846],"content":"Changes the number of elements in a one-dimensional <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Changes the number of elements in a one-dimensional `COleSafeArray` object."},{"content":"COleSafeArray::UnaccessData","pos":[3852,3879]},{"pos":[3911,4003],"content":"Decrements the lock count of an array and invalidates the pointer retrieved by <ph id=\"ph1\">`AccessData`</ph>.","source":"Decrements the lock count of an array and invalidates the pointer retrieved by `AccessData`."},{"content":"COleSafeArray::Unlock","pos":[4009,4030]},{"content":"Decrements the lock count of an array so it can be freed or resized.","pos":[4056,4124]},{"content":"Public Operators","pos":[4135,4151]},{"content":"Name","pos":[4158,4162]},{"content":"Description","pos":[4163,4174]},{"content":"COleSafeArray::operator LPCVARIANT","pos":[4213,4247]},{"pos":[4286,4362],"content":"Accesses the underlying <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> structure of the <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Accesses the underlying **VARIANT** structure of the `COleSafeArray` object."},{"content":"COleSafeArray::operator LPVARIANT","pos":[4368,4401]},{"pos":[4439,4515],"content":"Accesses the underlying <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> structure of the <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Accesses the underlying **VARIANT** structure of the `COleSafeArray` object."},{"content":"COleSafeArray::operator =","pos":[4521,4546]},{"pos":[4578,4693],"content":"Copies values into a <ph id=\"ph1\">`COleSafeArray`</ph> object ( <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>VARIANT<ept id=\"p2\">**</ept>, <ph id=\"ph2\">`COleVariant`</ph>, or <ph id=\"ph3\">`COleSafeArray`</ph> array).","source":"Copies values into a `COleSafeArray` object ( **SAFEARRAY**, **VARIANT**, `COleVariant`, or `COleSafeArray` array)."},{"content":"COleSafeArray::operator ==","pos":[4699,4725]},{"pos":[4760,4860],"content":"Compares two variant arrays ( <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>VARIANT<ept id=\"p2\">**</ept>, <ph id=\"ph1\">`COleVariant`</ph>, or <ph id=\"ph2\">`COleSafeArray`</ph> arrays).","source":"Compares two variant arrays ( **SAFEARRAY**, **VARIANT**, `COleVariant`, or `COleSafeArray` arrays)."},{"content":"COleSafeArray::operator","pos":[4866,4889]},{"pos":[4935,5004],"content":"Outputs the contents of a <ph id=\"ph1\">`COleSafeArray`</ph> object to the dump context.","source":"Outputs the contents of a `COleSafeArray` object to the dump context."},{"content":"Remarks","pos":[5014,5021]},{"content":"derives from the OLE <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> structure.","pos":[5041,5084],"source":" derives from the OLE **VARIANT** structure."},{"content":"The OLE <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> member functions are available through <ph id=\"ph1\">`COleSafeArray`</ph>, as well as a set of member functions specifically designed for one-dimensional arrays of bytes.","pos":[5085,5258],"source":" The OLE **SAFEARRAY** member functions are available through `COleSafeArray`, as well as a set of member functions specifically designed for one-dimensional arrays of bytes."},{"content":"Inheritance Hierarchy","pos":[5267,5288]},{"content":"Requirements","pos":[5335,5347]},{"pos":[5351,5372],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxdisp.h","source":"**Header:** afxdisp.h"},{"pos":[5424,5449],"content":"COleSafeArray::AccessData"},{"content":"Retrieves a pointer to the array data.","pos":[5453,5491]},{"content":"Parameters","pos":[5549,5559]},{"content":"A pointer to a pointer to the array data.","pos":[5576,5617]},{"content":"Remarks","pos":[5627,5634]},{"pos":[5638,5799],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id=\"p2\">[</bpt>COleException<ept id=\"p2\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md)."},{"content":"Example","pos":[5809,5816]},{"pos":[5831,5853],"content":"NVC_MFCOleContainer#26"},{"pos":[5959,5983],"content":"COleSafeArray::AllocData"},{"content":"Allocates memory for a safe array.","pos":[5987,6021]},{"content":"Remarks","pos":[6064,6071]},{"pos":[6075,6236],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id=\"p2\">[</bpt>COleException<ept id=\"p2\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md)."},{"pos":[6293,6323],"content":"COleSafeArray::AllocDescriptor"},{"content":"Allocates memory for the descriptor of a safe array.","pos":[6327,6379]},{"content":"Parameters","pos":[6440,6450]},{"content":"Number of dimensions in the safe array.","pos":[6466,6505]},{"content":"Remarks","pos":[6515,6522]},{"pos":[6526,6687],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id=\"p2\">[</bpt>COleException<ept id=\"p2\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md)."},{"pos":[6735,6756],"content":"COleSafeArray::Attach"},{"pos":[6760,6849],"content":"Gives control of the data in an existing <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> array to the <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Gives control of the data in an existing **VARIANT** array to the `COleSafeArray` object."},{"content":"Parameters","pos":[6904,6914]},{"content":"varSrc","pos":[6919,6925]},{"content":"A <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> object.","pos":[6930,6951],"source":" A **VARIANT** object."},{"content":"The <bpt id=\"p1\">*</bpt>varSrc<ept id=\"p1\">*</ept> parameter must have the <bpt id=\"p2\">[</bpt>VARTYPE<ept id=\"p2\">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept><bpt id=\"p3\">**</bpt>VT_ARRAY<ept id=\"p3\">**</ept>.","pos":[6952,7081],"source":" The *varSrc* parameter must have the [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)**VT_ARRAY**."},{"content":"Remarks","pos":[7091,7098]},{"content":"The source <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept>'s type is set to <ph id=\"ph1\">`VT_EMPTY`</ph>.","pos":[7102,7153],"source":"The source **VARIANT**'s type is set to `VT_EMPTY`."},{"content":"This function clears the current array data, if any.","pos":[7154,7206]},{"content":"Example","pos":[7216,7223]},{"pos":[7228,7304],"content":"See the example for <bpt id=\"p1\">[</bpt>COleSafeArray::AccessData<ept id=\"p1\">](#colesafearray__accessdata)</ept>.","source":"See the example for [COleSafeArray::AccessData](#colesafearray__accessdata)."},{"pos":[7351,7371],"content":"COleSafeArray::Clear"},{"content":"Clears the safe array.","pos":[7375,7397]},{"content":"Remarks","pos":[7436,7443]},{"content":"The function clears a safe array by setting the <ph id=\"ph1\">`VARTYPE`</ph> of the object to <ph id=\"ph2\">`VT_EMPTY`</ph>.","pos":[7447,7533],"source":"The function clears a safe array by setting the `VARTYPE` of the object to `VT_EMPTY`."},{"content":"The current contents are released and the array is freed.","pos":[7534,7591]},{"pos":[7646,7674],"content":"COleSafeArray::COleSafeArray"},{"pos":[7678,7714],"content":"Constructs a <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Constructs a `COleSafeArray` object."},{"content":"Parameters","pos":[8070,8080]},{"content":"An existing <ph id=\"ph1\">`COleSafeArray`</ph> object or <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> to be copied into the new <ph id=\"ph2\">`COleSafeArray`</ph> object.","pos":[8095,8196],"source":" An existing `COleSafeArray` object or **SAFEARRAY** to be copied into the new `COleSafeArray` object."},{"content":"The <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept> of the new <ph id=\"ph1\">`COleSafeArray`</ph> object.","pos":[8214,8264],"source":" The **VARTYPE** of the new `COleSafeArray` object."},{"content":"A pointer to a <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept> to be copied into the new <ph id=\"ph1\">`COleSafeArray`</ph> object.","pos":[8283,8361],"source":" A pointer to a **SAFEARRAY** to be copied into the new `COleSafeArray` object."},{"content":"varSrc","pos":[8369,8375]},{"content":"An existing <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`COleVariant`</ph> object to be copied into the new <ph id=\"ph2\">`COleSafeArray`</ph> object.","pos":[8380,8477],"source":" An existing **VARIANT** or `COleVariant` object to be copied into the new `COleSafeArray` object."},{"content":"A pointer to a <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> object to be copied into the new <ph id=\"ph1\">`COleSafeArray`</ph> object.","pos":[8494,8577],"source":" A pointer to a **VARIANT** object to be copied into the new `COleSafeArray` object."},{"content":"Remarks","pos":[8587,8594]},{"content":"All of these constructors create new <ph id=\"ph1\">`COleSafeArray`</ph> objects.","pos":[8598,8659],"source":"All of these constructors create new `COleSafeArray` objects."},{"content":"If there is no parameter, an empty <ph id=\"ph1\">`COleSafeArray`</ph> object is created ( <ph id=\"ph2\">`VT_EMPTY`</ph>).","pos":[8660,8743],"source":" If there is no parameter, an empty `COleSafeArray` object is created ( `VT_EMPTY`)."},{"content":"If the <ph id=\"ph1\">`COleSafeArray`</ph> is copied from another array whose <bpt id=\"p1\">[</bpt>VARTYPE<ept id=\"p1\">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> is known implicitly (a <ph id=\"ph2\">`COleSafeArray`</ph>, <ph id=\"ph3\">`COleVariant`</ph>, or <bpt id=\"p2\">**</bpt>VARIANT<ept id=\"p2\">**</ept>), the <bpt id=\"p3\">**</bpt>VARTYPE<ept id=\"p3\">**</ept> of the source array is retained and need not be specified.","pos":[8744,9028],"source":" If the `COleSafeArray` is copied from another array whose [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) is known implicitly (a `COleSafeArray`, `COleVariant`, or **VARIANT**), the **VARTYPE** of the source array is retained and need not be specified."},{"content":"If the <ph id=\"ph1\">`COleSafeArray`</ph> is copied from another array whose <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept> is not known ( <bpt id=\"p2\">**</bpt>SAFEARRAY<ept id=\"p2\">**</ept>), the <bpt id=\"p3\">**</bpt>VARTYPE<ept id=\"p3\">**</ept> must be specified in the <ph id=\"ph2\">`vtSrc`</ph> parameter.","pos":[9029,9189],"source":" If the `COleSafeArray` is copied from another array whose **VARTYPE** is not known ( **SAFEARRAY**), the **VARTYPE** must be specified in the `vtSrc` parameter."},{"pos":[9196,9357],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id=\"p2\">[</bpt>COleException<ept id=\"p2\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md)."},{"pos":[9403,9422],"content":"COleSafeArray::Copy"},{"content":"Creates a copy of an existing safe array.","pos":[9426,9467]},{"content":"Parameters","pos":[9522,9532]},{"content":"ppsa","pos":[9537,9541]},{"content":"Pointer to a location in which to return the new array descriptor.","pos":[9546,9612]},{"content":"Remarks","pos":[9622,9629]},{"pos":[9633,9794],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id=\"p2\">[</bpt>COleException<ept id=\"p2\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md)."},{"pos":[9842,9863],"content":"COleSafeArray::Create"},{"content":"Allocates and initializes the data for the array.","pos":[9867,9916]},{"content":"Parameters","pos":[10109,10119]},{"content":"The base type of the array (that is, the <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept> of each element of the array).","pos":[10134,10217],"source":" The base type of the array (that is, the **VARTYPE** of each element of the array)."},{"content":"The <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept> is restricted to a subset of the variant types.","pos":[10218,10281],"source":" The **VARTYPE** is restricted to a subset of the variant types."},{"content":"Neither the <bpt id=\"p1\">**</bpt>VT_ARRAY<ept id=\"p1\">**</ept> nor the <bpt id=\"p2\">**</bpt>VT_BYREF<ept id=\"p2\">**</ept> flag can be set.","pos":[10282,10344],"source":" Neither the **VT_ARRAY** nor the **VT_BYREF** flag can be set."},{"content":"and <bpt id=\"p1\">**</bpt>VT_NULL<ept id=\"p1\">**</ept> are not valid base types for the array.","pos":[10356,10411],"source":" and **VT_NULL** are not valid base types for the array."},{"content":"All other types are legal.","pos":[10412,10438]},{"content":"Number of dimensions in the array.","pos":[10457,10491]},{"content":"This can be changed after the array is created with <bpt id=\"p1\">[</bpt>Redim<ept id=\"p1\">](#colesafearray__redim)</ept>.","pos":[10492,10575],"source":" This can be changed after the array is created with [Redim](#colesafearray__redim)."},{"content":"rgElements","pos":[10583,10593]},{"content":"Pointer to an array of the number of elements for each dimension in the array.","pos":[10598,10676]},{"content":"rgsabounds","pos":[10684,10694]},{"content":"Pointer to a vector of bounds (one for each dimension) to allocate for the array.","pos":[10699,10780]},{"content":"Remarks","pos":[10790,10797]},{"content":"This function will clear the current array data if necessary.","pos":[10801,10862]},{"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept>.","pos":[10863,10961],"source":" On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md)."},{"content":"Example","pos":[10971,10978]},{"pos":[10993,11015],"content":"NVC_MFCOleContainer#27"},{"pos":[11124,11151],"content":"COleSafeArray::CreateOneDim"},{"pos":[11155,11208],"content":"Creates a new one-dimensional <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Creates a new one-dimensional `COleSafeArray` object."},{"content":"Parameters","pos":[11356,11366]},{"content":"The base type of the array (that is, the <bpt id=\"p1\">**</bpt>VARTYPE<ept id=\"p1\">**</ept> of each element of the array).","pos":[11381,11464],"source":" The base type of the array (that is, the **VARTYPE** of each element of the array)."},{"content":"Number of elements in the array.","pos":[11487,11519]},{"content":"This can be changed after the array is created with <bpt id=\"p1\">[</bpt>ResizeOneDim<ept id=\"p1\">](#colesafearray__resizeonedim)</ept>.","pos":[11520,11617],"source":" This can be changed after the array is created with [ResizeOneDim](#colesafearray__resizeonedim)."},{"content":"Pointer to the data to copy into the array.","pos":[11639,11682]},{"content":"nLBound","pos":[11690,11697]},{"content":"The lower bound of the array.","pos":[11702,11731]},{"content":"Remarks","pos":[11741,11748]},{"pos":[11752,11885],"content":"The function allocates and initializes the data for the array, copying the specified data if the pointer <ph id=\"ph1\">`pvSrcData`</ph> is not <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The function allocates and initializes the data for the array, copying the specified data if the pointer `pvSrcData` is not **NULL**."},{"pos":[11892,11990],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept>.","source":"On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md)."},{"content":"Example","pos":[12000,12007]},{"pos":[12022,12044],"content":"NVC_MFCOleContainer#28"},{"pos":[12148,12170],"content":"COleSafeArray::Destroy"},{"content":"Destroys an existing array descriptor and all the data in the array.","pos":[12174,12242]},{"content":"Remarks","pos":[12283,12290]},{"content":"If objects are stored in the array, each object is released.","pos":[12294,12354]},{"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id=\"p2\">[</bpt>COleException<ept id=\"p2\">](../../mfc/reference/coleexception-class.md)</ept>.","pos":[12355,12516],"source":" On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md)."},{"pos":[12569,12595],"content":"COleSafeArray::DestroyData"},{"content":"Destroys all the data in a safe array.","pos":[12599,12637]},{"content":"Remarks","pos":[12682,12689]},{"content":"If objects are stored in the array, each object is released.","pos":[12693,12753]},{"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id=\"p2\">[</bpt>COleException<ept id=\"p2\">](../../mfc/reference/coleexception-class.md)</ept>.","pos":[12754,12915],"source":" On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md)."},{"pos":[12974,13006],"content":"COleSafeArray::DestroyDescriptor"},{"content":"Destroys a descriptor of a safe array.","pos":[13010,13048]},{"content":"Remarks","pos":[13099,13106]},{"pos":[13110,13271],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id=\"p2\">[</bpt>COleException<ept id=\"p2\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md)."},{"pos":[13319,13340],"content":"COleSafeArray::Detach"},{"pos":[13344,13406],"content":"Detaches the <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> data from the <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Detaches the **VARIANT** data from the `COleSafeArray` object."},{"content":"Return Value","pos":[13449,13461]},{"pos":[13465,13528],"content":"The underlying <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> value in the <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"The underlying **VARIANT** value in the `COleSafeArray` object."},{"content":"Remarks","pos":[13538,13545]},{"content":"The function detaches the data in a safe array by setting the <bpt id=\"p1\">[</bpt>VARTYPE<ept id=\"p1\">](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)</ept> of the object to <ph id=\"ph1\">`VT_EMPTY`</ph>.","pos":[13549,13719],"source":"The function detaches the data in a safe array by setting the [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) of the object to `VT_EMPTY`."},{"content":"It is the caller's responsibility to free the array by calling the Windows function <bpt id=\"p1\">[</bpt>VariantClear<ept id=\"p1\">](http://msdn.microsoft.com/en-us/28741d81-8404-4f85-95d3-5c209ec13835)</ept>.","pos":[13720,13889],"source":" It is the caller's responsibility to free the array by calling the Windows function [VariantClear](http://msdn.microsoft.com/en-us/28741d81-8404-4f85-95d3-5c209ec13835)."},{"pos":[13896,13988],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>COleException<ept id=\"p1\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [COleException](../../mfc/reference/coleexception-class.md)."},{"content":"Example","pos":[13998,14005]},{"pos":[14010,14086],"content":"See the example for <bpt id=\"p1\">[</bpt>COleSafeArray::PutElement<ept id=\"p1\">](#colesafearray__putelement)</ept>.","source":"See the example for [COleSafeArray::PutElement](#colesafearray__putelement)."},{"pos":[14140,14167],"content":"COleSafeArray::GetByteArray"},{"pos":[14171,14229],"content":"Copies the contents of the safe array into a <ph id=\"ph1\">`CByteArray`</ph>.","source":"Copies the contents of the safe array into a `CByteArray`."},{"content":"Parameters","pos":[14292,14302]},{"content":"A reference to a <bpt id=\"p1\">[</bpt>CByteArray<ept id=\"p1\">](../../mfc/reference/cbytearray-class.md)</ept> object.","pos":[14317,14395],"source":" A reference to a [CByteArray](../../mfc/reference/cbytearray-class.md) object."},{"pos":[14443,14464],"content":"COleSafeArray::GetDim"},{"pos":[14468,14531],"content":"Returns the number of dimensions in the <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Returns the number of dimensions in the `COleSafeArray` object."},{"content":"Return Value","pos":[14572,14584]},{"content":"The number of dimensions in the safe array.","pos":[14588,14631]},{"content":"Example","pos":[14641,14648]},{"pos":[14663,14685],"content":"NVC_MFCOleContainer#27"},{"pos":[14792,14817],"content":"COleSafeArray::GetElement"},{"content":"Retrieves a single element of the safe array.","pos":[14821,14866]},{"content":"Parameters","pos":[14950,14960]},{"content":"Pointer to an array of indexes for each dimension of the array.","pos":[14979,15042]},{"content":"Pointer to the location to place the element of the array.","pos":[15061,15119]},{"content":"Remarks","pos":[15129,15136]},{"content":"This function automatically calls the windows functions <ph id=\"ph1\">`SafeArrayLock`</ph> and <ph id=\"ph2\">`SafeArrayUnlock`</ph> before and after retrieving the element.","pos":[15140,15274],"source":"This function automatically calls the windows functions `SafeArrayLock` and `SafeArrayUnlock` before and after retrieving the element."},{"content":"If the data element is a string, object, or variant, the function copies the element in the correct way.","pos":[15275,15379]},{"content":"The parameter <ph id=\"ph1\">`pvData`</ph> should point to a large enough buffer to contain the element.","pos":[15380,15464],"source":" The parameter `pvData` should point to a large enough buffer to contain the element."},{"pos":[15471,15632],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id=\"p2\">[</bpt>COleException<ept id=\"p2\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md)."},{"content":"Example","pos":[15642,15649]},{"pos":[15664,15686],"content":"NVC_MFCOleContainer#29"},{"pos":[15794,15820],"content":"COleSafeArray::GetElemSize"},{"pos":[15824,15885],"content":"Retrieves the size of an element in a <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Retrieves the size of an element in a `COleSafeArray` object."},{"content":"Return Value","pos":[15931,15943]},{"content":"The size, in bytes, of the elements of a safe array.","pos":[15947,15999]},{"pos":[16050,16074],"content":"COleSafeArray::GetLBound"},{"pos":[16078,16148],"content":"Returns the lower bound for any dimension of a <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Returns the lower bound for any dimension of a `COleSafeArray` object."},{"content":"Parameters","pos":[16228,16238]},{"content":"The array dimension for which to get the lower bound.","pos":[16253,16306]},{"content":"pLBound","pos":[16314,16321]},{"content":"Pointer to the location to return the lower bound.","pos":[16326,16376]},{"content":"Remarks","pos":[16386,16393]},{"pos":[16397,16489],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>COleException<ept id=\"p1\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [COleException](../../mfc/reference/coleexception-class.md)."},{"content":"Example","pos":[16499,16506]},{"pos":[16521,16543],"content":"NVC_MFCOleContainer#30"},{"pos":[16653,16681],"content":"COleSafeArray::GetOneDimSize"},{"pos":[16685,16762],"content":"Returns the number of elements in the one-dimensional <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Returns the number of elements in the one-dimensional `COleSafeArray` object."},{"content":"Return Value","pos":[16810,16822]},{"content":"The number of elements in the one-dimensional safe array.","pos":[16826,16883]},{"content":"Example","pos":[16893,16900]},{"pos":[16905,16985],"content":"See the example for <bpt id=\"p1\">[</bpt>COleSafeArray::CreateOneDim<ept id=\"p1\">](#colesafearray__createonedim)</ept>.","source":"See the example for [COleSafeArray::CreateOneDim](#colesafearray__createonedim)."},{"pos":[17036,17060],"content":"COleSafeArray::GetUBound"},{"content":"Returns the upper bound for any dimension of a safe array.","pos":[17064,17122]},{"content":"Parameters","pos":[17202,17212]},{"content":"The array dimension for which to get the upper bound.","pos":[17227,17280]},{"content":"pUBound","pos":[17288,17295]},{"content":"Pointer to the location to return the upper bound.","pos":[17300,17350]},{"content":"Remarks","pos":[17360,17367]},{"pos":[17371,17463],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>COleException<ept id=\"p1\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [COleException](../../mfc/reference/coleexception-class.md)."},{"content":"Example","pos":[17473,17480]},{"pos":[17495,17517],"content":"NVC_MFCOleContainer#31"},{"pos":[17618,17637],"content":"COleSafeArray::Lock"},{"content":"Increments the lock count of an array and place a pointer to the array data in the array descriptor.","pos":[17641,17741]},{"content":"Remarks","pos":[17779,17786]},{"pos":[17790,17872],"content":"On error, it throws a <bpt id=\"p1\">[</bpt>COleException<ept id=\"p1\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, it throws a [COleException](../../mfc/reference/coleexception-class.md)."},{"content":"The pointer in the array descriptor is valid until <ph id=\"ph1\">`Unlock`</ph> is called.","pos":[17879,17949],"source":"The pointer in the array descriptor is valid until `Unlock` is called."},{"content":"Calls to <ph id=\"ph1\">`Lock`</ph> can be nested; an equal number of calls to <ph id=\"ph2\">`Unlock`</ph> are required.","pos":[17950,18031],"source":" Calls to `Lock` can be nested; an equal number of calls to `Unlock` are required."},{"content":"An array cannot be deleted while it is locked.","pos":[18038,18084]},{"pos":[18145,18179],"content":"COleSafeArray::operator LPCVARIANT"},{"pos":[18183,18289],"content":"Call this casting operator to access the underlying <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> structure for this <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Call this casting operator to access the underlying **VARIANT** structure for this `COleSafeArray` object."},{"pos":[18396,18429],"content":"COleSafeArray::operator LPVARIANT"},{"pos":[18433,18539],"content":"Call this casting operator to access the underlying <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> structure for this <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Call this casting operator to access the underlying **VARIANT** structure for this `COleSafeArray` object."},{"content":"Remarks","pos":[18587,18594]},{"pos":[18598,18759],"content":"Note that changing the value in the <bpt id=\"p1\">**</bpt>VARIANT<ept id=\"p1\">**</ept> structure accessed by the pointer returned by this function will change the value of this <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Note that changing the value in the **VARIANT** structure accessed by the pointer returned by this function will change the value of this `COleSafeArray` object."},{"pos":[18813,18838],"content":"COleSafeArray::operator ="},{"pos":[18842,18935],"content":"These overloaded assignment operators copy the source value into this <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"These overloaded assignment operators copy the source value into this `COleSafeArray` object."},{"content":"Remarks","pos":[19168,19175]},{"content":"A brief description of each operator follows:","pos":[19179,19224]},{"pos":[19232,19321],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>saSrc<ept id=\"p2\">*</ept> <bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> Copies an existing <ph id=\"ph1\">`COleSafeArray`</ph> object into this object.","source":"**operator =(** *saSrc* **)** Copies an existing `COleSafeArray` object into this object."},{"pos":[19329,19430],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>varSrc<ept id=\"p2\">*</ept><bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept> Copies an existing <bpt id=\"p4\">**</bpt>VARIANT<ept id=\"p4\">**</ept> or <ph id=\"ph1\">`COleVariant`</ph> array into this object.","source":"**operator =(** *varSrc***)** Copies an existing **VARIANT** or `COleVariant` array into this object."},{"pos":[19438,19539],"content":"<bpt id=\"p1\">**</bpt>operator =(<ept id=\"p1\">**</ept> <ph id=\"ph1\">`pSrc`</ph> <bpt id=\"p2\">**</bpt>)<ept id=\"p2\">**</ept> Copies the <bpt id=\"p3\">**</bpt>VARIANT<ept id=\"p3\">**</ept> array object accessed by <ph id=\"ph2\">`pSrc`</ph> into this object.","source":"**operator =(** `pSrc` **)** Copies the **VARIANT** array object accessed by `pSrc` into this object."},{"pos":[19596,19622],"content":"COleSafeArray::operator =="},{"pos":[19626,19783],"content":"This operator compares two arrays ( <bpt id=\"p1\">**</bpt>SAFEARRAY<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>VARIANT<ept id=\"p2\">**</ept>, <ph id=\"ph1\">`COleVariant`</ph>, or <ph id=\"ph2\">`COleSafeArray`</ph> arrays) and returns nonzero if they are equal; otherwise 0.","source":"This operator compares two arrays ( **SAFEARRAY**, **VARIANT**, `COleVariant`, or `COleSafeArray` arrays) and returns nonzero if they are equal; otherwise 0."},{"content":"Remarks","pos":[20112,20119]},{"content":"Two arrays are equal if they have an equal number of dimensions, equal size in each dimension, and equal element values.","pos":[20123,20243]},{"pos":[20302,20325],"content":"COleSafeArray::operator"},{"pos":[20338,20464],"content":"The <ph id=\"ph1\">`COleSafeArray`</ph> insertion (&lt;&lt;) operator supports diagnostic dumping and storing of a <ph id=\"ph2\">`COleSafeArray`</ph> object to an archive.","source":"The `COleSafeArray` insertion (<<) operator supports diagnostic dumping and storing of a `COleSafeArray` object to an archive."},{"pos":[20615,20640],"content":"COleSafeArray::PtrOfIndex"},{"content":"Returns a pointer to the element specified by the index values.","pos":[20644,20707]},{"content":"Parameters","pos":[20793,20803]},{"content":"An array of index values that identify an element of the array.","pos":[20822,20885]},{"content":"All indexes for the element must be specified.","pos":[20886,20932]},{"content":"On return, pointer to the element identified by the values in <ph id=\"ph1\">`rgIndices`</ph>.","pos":[20952,21026],"source":" On return, pointer to the element identified by the values in `rgIndices`."},{"pos":[21078,21103],"content":"COleSafeArray::PutElement"},{"content":"Assigns a single element into the array.","pos":[21107,21147]},{"content":"Parameters","pos":[21231,21241]},{"content":"Pointer to an array of indexes for each dimension of the array.","pos":[21260,21323]},{"content":"Pointer to the data to assign to the array.","pos":[21342,21385]},{"content":"<bpt id=\"p1\">**</bpt>VT_DISPATCH<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>VT_UNKNOWN<ept id=\"p2\">**</ept>, and <ph id=\"ph1\">`VT_BSTR`</ph> variant types are pointers and do not require another level of indirection.","pos":[21386,21508],"source":"**VT_DISPATCH**, **VT_UNKNOWN**, and `VT_BSTR` variant types are pointers and do not require another level of indirection."},{"content":"Remarks","pos":[21518,21525]},{"content":"This function automatically calls the Windows functions <bpt id=\"p1\">[</bpt>SafeArrayLock<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/ms221492.aspx)</ept> and <bpt id=\"p2\">[</bpt>SafeArrayUnlock<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/desktop/ms221246.aspx)</ept> before and after assigning the element.","pos":[21529,21794],"source":"This function automatically calls the Windows functions [SafeArrayLock](https://msdn.microsoft.com/library/windows/desktop/ms221492.aspx) and [SafeArrayUnlock](https://msdn.microsoft.com/library/windows/desktop/ms221246.aspx) before and after assigning the element."},{"content":"If the data element is a string, object, or variant, the function copies it correctly, and if the existing element is a string, object, or variant, it is cleared correctly.","pos":[21795,21967]},{"content":"Note that you can have multiple locks on an array, so you can put elements into an array while the array is locked by other operations.","pos":[21974,22109]},{"pos":[22116,22277],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>CMemoryException<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept> or <bpt id=\"p2\">[</bpt>COleException<ept id=\"p2\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md)."},{"content":"Example","pos":[22287,22294]},{"pos":[22309,22331],"content":"NVC_MFCOleContainer#32"},{"pos":[22433,22453],"content":"COleSafeArray::Redim"},{"content":"Changes the least significant (rightmost) bound of a safe array.","pos":[22457,22521]},{"content":"Parameters","pos":[22587,22597]},{"content":"psaboundNew","pos":[22602,22613]},{"content":"Pointer to a new safe array bound structure containing the new array bound.","pos":[22618,22693]},{"content":"Only the least significant dimension of an array may be changed.","pos":[22694,22758]},{"content":"Remarks","pos":[22768,22775]},{"pos":[22779,22871],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>COleException<ept id=\"p1\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [COleException](../../mfc/reference/coleexception-class.md)."},{"pos":[22925,22952],"content":"COleSafeArray::ResizeOneDim"},{"pos":[22956,23031],"content":"Changes the number of elements in a one-dimensional <ph id=\"ph1\">`COleSafeArray`</ph> object.","source":"Changes the number of elements in a one-dimensional `COleSafeArray` object."},{"content":"Parameters","pos":[23093,23103]},{"content":"Number of elements in the one-dimensional safe array.","pos":[23123,23176]},{"content":"Remarks","pos":[23186,23193]},{"pos":[23197,23289],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>COleException<ept id=\"p1\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [COleException](../../mfc/reference/coleexception-class.md)."},{"content":"Example","pos":[23299,23306]},{"pos":[23311,23391],"content":"See the example for <bpt id=\"p1\">[</bpt>COleSafeArray::CreateOneDim<ept id=\"p1\">](#colesafearray__createonedim)</ept>.","source":"See the example for [COleSafeArray::CreateOneDim](#colesafearray__createonedim)."},{"pos":[23445,23472],"content":"COleSafeArray::UnaccessData"},{"pos":[23476,23568],"content":"Decrements the lock count of an array and invalidates the pointer retrieved by <ph id=\"ph1\">`AccessData`</ph>.","source":"Decrements the lock count of an array and invalidates the pointer retrieved by `AccessData`."},{"content":"Remarks","pos":[23614,23621]},{"pos":[23625,23717],"content":"On error, the function throws a <bpt id=\"p1\">[</bpt>COleException<ept id=\"p1\">](../../mfc/reference/coleexception-class.md)</ept>.","source":"On error, the function throws a [COleException](../../mfc/reference/coleexception-class.md)."},{"content":"Example","pos":[23727,23734]},{"pos":[23739,23815],"content":"See the example for <bpt id=\"p1\">[</bpt>COleSafeArray::AccessData<ept id=\"p1\">](#colesafearray__accessdata)</ept>.","source":"See the example for [COleSafeArray::AccessData](#colesafearray__accessdata)."},{"pos":[23863,23884],"content":"COleSafeArray::Unlock"},{"content":"Decrements the lock count of an array so it can be freed or resized.","pos":[23888,23956]},{"content":"Remarks","pos":[23996,24003]},{"content":"This function is called after access to the data in an array is finished.","pos":[24007,24080]},{"content":"On error, it throws a <bpt id=\"p1\">[</bpt>COleException<ept id=\"p1\">](../../mfc/reference/coleexception-class.md)</ept>.","pos":[24081,24163],"source":" On error, it throws a [COleException](../../mfc/reference/coleexception-class.md)."},{"content":"See Also","pos":[24172,24180]},{"content":"Hierarchy Chart","pos":[24185,24200]},{"content":"COleVariant Class","pos":[24237,24254]},{"content":"CRecordset Class","pos":[24303,24319]},{"content":"CDatabase Class","pos":[24367,24382]}],"content":"---\ntitle: \"COleSafeArray Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"COleSafeArray\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"COleSafeArray class\"\n  - \"arrays [C++], safe\"\n  - \"safe arrays\"\n  - \"ODBC, safe arrays\"\nms.assetid: f45a5224-5f48-40ec-9ddd-287ef9740150\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# COleSafeArray Class\nA class for working with arrays of arbitrary type and dimension.  \n  \n## Syntax  \n  \n```  \nclass COleSafeArray : public tagVARIANT  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleSafeArray::COleSafeArray](#colesafearray__colesafearray)|Constructs a `COleSafeArray` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleSafeArray::AccessData](#colesafearray__accessdata)|Retrieves a pointer to the array data.|  \n|[COleSafeArray::AllocData](#colesafearray__allocdata)|Allocates memory for the array.|  \n|[COleSafeArray::AllocDescriptor](#colesafearray__allocdescriptor)|Allocates memory for the safe array descriptor.|  \n|[COleSafeArray::Attach](#colesafearray__attach)|Gives control of the existing **VARIANT** array to the `COleSafeArray` object.|  \n|[COleSafeArray::Clear](#colesafearray__clear)|Frees all data in the underlying **VARIANT**.|  \n|[COleSafeArray::Copy](#colesafearray__copy)|Creates a copy of an existing array.|  \n|[COleSafeArray::Create](#colesafearray__create)|Creates a safe array.|  \n|[COleSafeArray::CreateOneDim](#colesafearray__createonedim)|Creates a one-dimensional `COleSafeArray` object.|  \n|[COleSafeArray::Destroy](#colesafearray__destroy)|Destroys an existing array.|  \n|[COleSafeArray::DestroyData](#colesafearray__destroydata)|Destroys data in a safe array.|  \n|[COleSafeArray::DestroyDescriptor](#colesafearray__destroydescriptor)|Destroys a descriptor of a safe array.|  \n|[COleSafeArray::Detach](#colesafearray__detach)|Detaches the **VARIANT** array from the `COleSafeArray` object (so that the data will not be freed).|  \n|[COleSafeArray::GetByteArray](#colesafearray__getbytearray)|Copies the contents of the safe array into a [CByteArray](../../mfc/reference/cbytearray-class.md).|  \n|[COleSafeArray::GetDim](#colesafearray__getdim)|Returns the number of dimensions in the array.|  \n|[COleSafeArray::GetElement](#colesafearray__getelement)|Retrieves a single element of the safe array.|  \n|[COleSafeArray::GetElemSize](#colesafearray__getelemsize)|Returns the size, in bytes, of one element in a safe array.|  \n|[COleSafeArray::GetLBound](#colesafearray__getlbound)|Returns the lower bound for any dimension of a safe array.|  \n|[COleSafeArray::GetOneDimSize](#colesafearray__getonedimsize)|Returns the number of elements in the one-dimensional `COleSafeArray` object.|  \n|[COleSafeArray::GetUBound](#colesafearray__getubound)|Returns the upper bound for any dimension of a safe array.|  \n|[COleSafeArray::Lock](#colesafearray__lock)|Increments the lock count of an array and places a pointer to the array data in the array descriptor.|  \n|[COleSafeArray::PtrOfIndex](#colesafearray__ptrofindex)|Returns a pointer to the indexed element.|  \n|[COleSafeArray::PutElement](#colesafearray__putelement)|Assigns a single element into the array.|  \n|[COleSafeArray::Redim](#colesafearray__redim)|Changes the least significant (rightmost) bound of a safe array.|  \n|[COleSafeArray::ResizeOneDim](#colesafearray__resizeonedim)|Changes the number of elements in a one-dimensional `COleSafeArray` object.|  \n|[COleSafeArray::UnaccessData](#colesafearray__unaccessdata)|Decrements the lock count of an array and invalidates the pointer retrieved by `AccessData`.|  \n|[COleSafeArray::Unlock](#colesafearray__unlock)|Decrements the lock count of an array so it can be freed or resized.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COleSafeArray::operator LPCVARIANT](#colesafearray__operator_lpcvariant)|Accesses the underlying **VARIANT** structure of the `COleSafeArray` object.|  \n|[COleSafeArray::operator LPVARIANT](#colesafearray__operator_lpvariant)|Accesses the underlying **VARIANT** structure of the `COleSafeArray` object.|  \n|[COleSafeArray::operator =](#colesafearray__operator__eq)|Copies values into a `COleSafeArray` object ( **SAFEARRAY**, **VARIANT**, `COleVariant`, or `COleSafeArray` array).|  \n|[COleSafeArray::operator ==](#colesafearray__operator__eq_eq)|Compares two variant arrays ( **SAFEARRAY**, **VARIANT**, `COleVariant`, or `COleSafeArray` arrays).|  \n|[COleSafeArray::operator &lt;&lt;](#colesafearray__operator__lt__lt_)|Outputs the contents of a `COleSafeArray` object to the dump context.|  \n  \n## Remarks  \n `COleSafeArray` derives from the OLE **VARIANT** structure. The OLE **SAFEARRAY** member functions are available through `COleSafeArray`, as well as a set of member functions specifically designed for one-dimensional arrays of bytes.  \n  \n## Inheritance Hierarchy  \n `tagVARIANT`  \n  \n `COleSafeArray`  \n  \n## Requirements  \n **Header:** afxdisp.h  \n  \n##  <a name=\"colesafearray__accessdata\"></a>  COleSafeArray::AccessData  \n Retrieves a pointer to the array data.  \n  \n```  \nvoid AccessData(void** ppvData);\n```  \n  \n### Parameters  \n `ppvData`  \n A pointer to a pointer to the array data.  \n  \n### Remarks  \n On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#26](../../mfc/codesnippet/cpp/colesafearray-class_1.cpp)]  \n  \n##  <a name=\"colesafearray__allocdata\"></a>  COleSafeArray::AllocData  \n Allocates memory for a safe array.  \n  \n```  \nvoid AllocData();\n```  \n  \n### Remarks  \n On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md).  \n  \n##  <a name=\"colesafearray__allocdescriptor\"></a>  COleSafeArray::AllocDescriptor  \n Allocates memory for the descriptor of a safe array.  \n  \n```  \nvoid AllocDescriptor(DWORD dwDims);\n```  \n  \n### Parameters  \n `dwDims`  \n Number of dimensions in the safe array.  \n  \n### Remarks  \n On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md).  \n  \n##  <a name=\"colesafearray__attach\"></a>  COleSafeArray::Attach  \n Gives control of the data in an existing **VARIANT** array to the `COleSafeArray` object.  \n  \n```  \nvoid Attach(VARIANT& varSrc);\n```  \n  \n### Parameters  \n *varSrc*  \n A **VARIANT** object. The *varSrc* parameter must have the [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4)**VT_ARRAY**.  \n  \n### Remarks  \n The source **VARIANT**'s type is set to `VT_EMPTY`. This function clears the current array data, if any.  \n  \n### Example  \n  See the example for [COleSafeArray::AccessData](#colesafearray__accessdata).  \n  \n##  <a name=\"colesafearray__clear\"></a>  COleSafeArray::Clear  \n Clears the safe array.  \n  \n```  \nvoid Clear();\n```  \n  \n### Remarks  \n The function clears a safe array by setting the `VARTYPE` of the object to `VT_EMPTY`. The current contents are released and the array is freed.  \n  \n##  <a name=\"colesafearray__colesafearray\"></a>  COleSafeArray::COleSafeArray  \n Constructs a `COleSafeArray` object.  \n  \n```  \nCOleSafeArray();\n\n \nCOleSafeArray(\n    const SAFEARRAY& saSrc,\n    VARTYPE vtSrc);\n\n \nCOleSafeArray(\n    LPCSAFEARRAY pSrc,\n    VARTYPE vtSrc);\n\n \nCOleSafeArray(\n    const COleSafeArray& saSrc);\n\n \nCOleSafeArray(\n    const VARIANT& varSrc);\n\n \nCOleSafeArray(\n    LPCVARIANT pSrc);\n\n \nCOleSafeArray(\n    const COleVariant& varSrc);\n```  \n  \n### Parameters  \n `saSrc`  \n An existing `COleSafeArray` object or **SAFEARRAY** to be copied into the new `COleSafeArray` object.  \n  \n `vtSrc`  \n The **VARTYPE** of the new `COleSafeArray` object.  \n  \n `psaSrc`  \n A pointer to a **SAFEARRAY** to be copied into the new `COleSafeArray` object.  \n  \n *varSrc*  \n An existing **VARIANT** or `COleVariant` object to be copied into the new `COleSafeArray` object.  \n  \n `pSrc`  \n A pointer to a **VARIANT** object to be copied into the new `COleSafeArray` object.  \n  \n### Remarks  \n All of these constructors create new `COleSafeArray` objects. If there is no parameter, an empty `COleSafeArray` object is created ( `VT_EMPTY`). If the `COleSafeArray` is copied from another array whose [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) is known implicitly (a `COleSafeArray`, `COleVariant`, or **VARIANT**), the **VARTYPE** of the source array is retained and need not be specified. If the `COleSafeArray` is copied from another array whose **VARTYPE** is not known ( **SAFEARRAY**), the **VARTYPE** must be specified in the `vtSrc` parameter.  \n  \n On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md).  \n  \n##  <a name=\"colesafearray__copy\"></a>  COleSafeArray::Copy  \n Creates a copy of an existing safe array.  \n  \n```  \nvoid Copy(LPSAFEARRAY* ppsa);\n```  \n  \n### Parameters  \n *ppsa*  \n Pointer to a location in which to return the new array descriptor.  \n  \n### Remarks  \n On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md).  \n  \n##  <a name=\"colesafearray__create\"></a>  COleSafeArray::Create  \n Allocates and initializes the data for the array.  \n  \n```  \nvoid Create(\n    VARTYPE vtSrc,  \n    DWORD dwDims,  \n    DWORD* rgElements);\n\n \nvoid Create(\n    VARTYPE vtSrc,  \n    DWORD dwDims,  \n    SAFEARRAYBOUND* rgsabounds);\n```  \n  \n### Parameters  \n `vtSrc`  \n The base type of the array (that is, the **VARTYPE** of each element of the array). The **VARTYPE** is restricted to a subset of the variant types. Neither the **VT_ARRAY** nor the **VT_BYREF** flag can be set. `VT_EMPTY` and **VT_NULL** are not valid base types for the array. All other types are legal.  \n  \n `dwDims`  \n Number of dimensions in the array. This can be changed after the array is created with [Redim](#colesafearray__redim).  \n  \n *rgElements*  \n Pointer to an array of the number of elements for each dimension in the array.  \n  \n *rgsabounds*  \n Pointer to a vector of bounds (one for each dimension) to allocate for the array.  \n  \n### Remarks  \n This function will clear the current array data if necessary. On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#27](../../mfc/codesnippet/cpp/colesafearray-class_2.cpp)]  \n  \n##  <a name=\"colesafearray__createonedim\"></a>  COleSafeArray::CreateOneDim  \n Creates a new one-dimensional `COleSafeArray` object.  \n  \n```  \nvoid CreateOneDim(\n    VARTYPE vtSrc,  \n    DWORD dwElements,  \n    const void* pvSrcData = NULL,  \n    long nLBound = 0);\n```  \n  \n### Parameters  \n `vtSrc`  \n The base type of the array (that is, the **VARTYPE** of each element of the array).  \n  \n `dwElements`  \n Number of elements in the array. This can be changed after the array is created with [ResizeOneDim](#colesafearray__resizeonedim).  \n  \n `pvSrcData`  \n Pointer to the data to copy into the array.  \n  \n *nLBound*  \n The lower bound of the array.  \n  \n### Remarks  \n The function allocates and initializes the data for the array, copying the specified data if the pointer `pvSrcData` is not **NULL**.  \n  \n On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#28](../../mfc/codesnippet/cpp/colesafearray-class_3.cpp)]  \n  \n##  <a name=\"colesafearray__destroy\"></a>  COleSafeArray::Destroy  \n Destroys an existing array descriptor and all the data in the array.  \n  \n```  \nvoid Destroy();\n```  \n  \n### Remarks  \n If objects are stored in the array, each object is released. On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md).  \n  \n##  <a name=\"colesafearray__destroydata\"></a>  COleSafeArray::DestroyData  \n Destroys all the data in a safe array.  \n  \n```  \nvoid DestroyData();\n```  \n  \n### Remarks  \n If objects are stored in the array, each object is released. On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md).  \n  \n##  <a name=\"colesafearray__destroydescriptor\"></a>  COleSafeArray::DestroyDescriptor  \n Destroys a descriptor of a safe array.  \n  \n```  \nvoid DestroyDescriptor();\n```  \n  \n### Remarks  \n On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md).  \n  \n##  <a name=\"colesafearray__detach\"></a>  COleSafeArray::Detach  \n Detaches the **VARIANT** data from the `COleSafeArray` object.  \n  \n```  \nVARIANT Detach();\n```  \n  \n### Return Value  \n The underlying **VARIANT** value in the `COleSafeArray` object.  \n  \n### Remarks  \n The function detaches the data in a safe array by setting the [VARTYPE](http://msdn.microsoft.com/en-us/317b911b-1805-402d-a9cb-159546bc88b4) of the object to `VT_EMPTY`. It is the caller's responsibility to free the array by calling the Windows function [VariantClear](http://msdn.microsoft.com/en-us/28741d81-8404-4f85-95d3-5c209ec13835).  \n  \n On error, the function throws a [COleException](../../mfc/reference/coleexception-class.md).  \n  \n### Example  \n  See the example for [COleSafeArray::PutElement](#colesafearray__putelement).  \n  \n##  <a name=\"colesafearray__getbytearray\"></a>  COleSafeArray::GetByteArray  \n Copies the contents of the safe array into a `CByteArray`.  \n  \n```  \nvoid GetByteArray(CByteArray& bytes);\n```  \n  \n### Parameters  \n `bytes`  \n A reference to a [CByteArray](../../mfc/reference/cbytearray-class.md) object.  \n  \n##  <a name=\"colesafearray__getdim\"></a>  COleSafeArray::GetDim  \n Returns the number of dimensions in the `COleSafeArray` object.  \n  \n```  \nDWORD GetDim();\n```  \n  \n### Return Value  \n The number of dimensions in the safe array.  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#27](../../mfc/codesnippet/cpp/colesafearray-class_2.cpp)]  \n  \n##  <a name=\"colesafearray__getelement\"></a>  COleSafeArray::GetElement  \n Retrieves a single element of the safe array.  \n  \n```  \nvoid GetElement(\n    long* rgIndices,  \n    void* pvData);\n```  \n  \n### Parameters  \n `rgIndices`  \n Pointer to an array of indexes for each dimension of the array.  \n  \n `pvData`  \n Pointer to the location to place the element of the array.  \n  \n### Remarks  \n This function automatically calls the windows functions `SafeArrayLock` and `SafeArrayUnlock` before and after retrieving the element. If the data element is a string, object, or variant, the function copies the element in the correct way. The parameter `pvData` should point to a large enough buffer to contain the element.  \n  \n On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#29](../../mfc/codesnippet/cpp/colesafearray-class_4.cpp)]  \n  \n##  <a name=\"colesafearray__getelemsize\"></a>  COleSafeArray::GetElemSize  \n Retrieves the size of an element in a `COleSafeArray` object.  \n  \n```  \nDWORD GetElemSize();\n```  \n  \n### Return Value  \n The size, in bytes, of the elements of a safe array.  \n  \n##  <a name=\"colesafearray__getlbound\"></a>  COleSafeArray::GetLBound  \n Returns the lower bound for any dimension of a `COleSafeArray` object.  \n  \n```  \nvoid GetLBound(\n    DWORD dwDim,  \n    long* pLBound);\n```  \n  \n### Parameters  \n `dwDim`  \n The array dimension for which to get the lower bound.  \n  \n *pLBound*  \n Pointer to the location to return the lower bound.  \n  \n### Remarks  \n On error, the function throws a [COleException](../../mfc/reference/coleexception-class.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#30](../../mfc/codesnippet/cpp/colesafearray-class_5.cpp)]  \n  \n##  <a name=\"colesafearray__getonedimsize\"></a>  COleSafeArray::GetOneDimSize  \n Returns the number of elements in the one-dimensional `COleSafeArray` object.  \n  \n```  \nDWORD GetOneDimSize();\n```  \n  \n### Return Value  \n The number of elements in the one-dimensional safe array.  \n  \n### Example  \n  See the example for [COleSafeArray::CreateOneDim](#colesafearray__createonedim).  \n  \n##  <a name=\"colesafearray__getubound\"></a>  COleSafeArray::GetUBound  \n Returns the upper bound for any dimension of a safe array.  \n  \n```  \nvoid GetUBound(\n    DWORD dwDim,  \n    long* pUBound);\n```  \n  \n### Parameters  \n `dwDim`  \n The array dimension for which to get the upper bound.  \n  \n *pUBound*  \n Pointer to the location to return the upper bound.  \n  \n### Remarks  \n On error, the function throws a [COleException](../../mfc/reference/coleexception-class.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#31](../../mfc/codesnippet/cpp/colesafearray-class_6.cpp)]  \n  \n##  <a name=\"colesafearray__lock\"></a>  COleSafeArray::Lock  \n Increments the lock count of an array and place a pointer to the array data in the array descriptor.  \n  \n```  \nvoid Lock();\n```  \n  \n### Remarks  \n On error, it throws a [COleException](../../mfc/reference/coleexception-class.md).  \n  \n The pointer in the array descriptor is valid until `Unlock` is called. Calls to `Lock` can be nested; an equal number of calls to `Unlock` are required.  \n  \n An array cannot be deleted while it is locked.  \n  \n##  <a name=\"colesafearray__operator_lpcvariant\"></a>  COleSafeArray::operator LPCVARIANT  \n Call this casting operator to access the underlying **VARIANT** structure for this `COleSafeArray` object.  \n  \n```  \noperator LPCVARIANT() const;\n\n \n```  \n  \n##  <a name=\"colesafearray__operator_lpvariant\"></a>  COleSafeArray::operator LPVARIANT  \n Call this casting operator to access the underlying **VARIANT** structure for this `COleSafeArray` object.  \n  \n```  \noperator LPVARIANT();\n```   \n  \n### Remarks  \n Note that changing the value in the **VARIANT** structure accessed by the pointer returned by this function will change the value of this `COleSafeArray` object.  \n  \n##  <a name=\"colesafearray__operator__eq\"></a>  COleSafeArray::operator =  \n These overloaded assignment operators copy the source value into this `COleSafeArray` object.  \n  \n```  \nCOleSafeArray& operator=(const COleSafeArray& saSrc);\n\n \nCOleSafeArray& operator=(const VARIANT& varSrc);\n\n \nCOleSafeArray& operator=(LPCVARIANT pSrc);\n\n \nCOleSafeArray& operator=(const COleVariant& varSrc);\n```  \n  \n### Remarks  \n A brief description of each operator follows:  \n  \n- **operator =(** *saSrc* **)** Copies an existing `COleSafeArray` object into this object.  \n  \n- **operator =(** *varSrc***)** Copies an existing **VARIANT** or `COleVariant` array into this object.  \n  \n- **operator =(** `pSrc` **)** Copies the **VARIANT** array object accessed by `pSrc` into this object.  \n  \n##  <a name=\"colesafearray__operator__eq_eq\"></a>  COleSafeArray::operator ==  \n This operator compares two arrays ( **SAFEARRAY**, **VARIANT**, `COleVariant`, or `COleSafeArray` arrays) and returns nonzero if they are equal; otherwise 0.  \n  \n```  \nBOOL operator==(const SAFEARRAY& saSrc) const;\n\n \n \nBOOL operator==(LPCSAFEARRAY pSrc) const;\n\n \n \nBOOL operator==(const COleSafeArray& saSrc) const;\n\n \n \nBOOL operator==(const VARIANT& varSrc) const;\n\n \n \nBOOL operator==(LPCVARIANT pSrc) const;\n\n \n \nBOOL operator==(const COleVariant& varSrc) const;\n\n \n```  \n  \n### Remarks  \n Two arrays are equal if they have an equal number of dimensions, equal size in each dimension, and equal element values.  \n  \n##  <a name=\"colesafearray__operator__lt__lt_\"></a>  COleSafeArray::operator &lt;&lt;  \n The `COleSafeArray` insertion (<<) operator supports diagnostic dumping and storing of a `COleSafeArray` object to an archive.  \n  \n```  \nCDumpContext& AFXAPI operator<<(\n    CDumpContext& dc,  \n    COleSafeArray& saSrc);\n```  \n  \n##  <a name=\"colesafearray__ptrofindex\"></a>  COleSafeArray::PtrOfIndex  \n Returns a pointer to the element specified by the index values.  \n  \n```  \nvoid PtrOfIndex(\n    long* rgIndices,  \n    void** ppvData);\n```  \n  \n### Parameters  \n `rgIndices`  \n An array of index values that identify an element of the array. All indexes for the element must be specified.  \n  \n `ppvData`  \n On return, pointer to the element identified by the values in `rgIndices`.  \n  \n##  <a name=\"colesafearray__putelement\"></a>  COleSafeArray::PutElement  \n Assigns a single element into the array.  \n  \n```  \nvoid PutElement(\n    long* rgIndices,  \n    void* pvData);\n```  \n  \n### Parameters  \n `rgIndices`  \n Pointer to an array of indexes for each dimension of the array.  \n  \n `pvData`  \n Pointer to the data to assign to the array. **VT_DISPATCH**, **VT_UNKNOWN**, and `VT_BSTR` variant types are pointers and do not require another level of indirection.  \n  \n### Remarks  \n This function automatically calls the Windows functions [SafeArrayLock](https://msdn.microsoft.com/library/windows/desktop/ms221492.aspx) and [SafeArrayUnlock](https://msdn.microsoft.com/library/windows/desktop/ms221246.aspx) before and after assigning the element. If the data element is a string, object, or variant, the function copies it correctly, and if the existing element is a string, object, or variant, it is cleared correctly.  \n  \n Note that you can have multiple locks on an array, so you can put elements into an array while the array is locked by other operations.  \n  \n On error, the function throws a [CMemoryException](../../mfc/reference/cmemoryexception-class.md) or [COleException](../../mfc/reference/coleexception-class.md).  \n  \n### Example  \n [!code-cpp[NVC_MFCOleContainer#32](../../mfc/codesnippet/cpp/colesafearray-class_7.cpp)]  \n  \n##  <a name=\"colesafearray__redim\"></a>  COleSafeArray::Redim  \n Changes the least significant (rightmost) bound of a safe array.  \n  \n```  \nvoid Redim(SAFEARRAYBOUND* psaboundNew);\n```  \n  \n### Parameters  \n *psaboundNew*  \n Pointer to a new safe array bound structure containing the new array bound. Only the least significant dimension of an array may be changed.  \n  \n### Remarks  \n On error, the function throws a [COleException](../../mfc/reference/coleexception-class.md).  \n  \n##  <a name=\"colesafearray__resizeonedim\"></a>  COleSafeArray::ResizeOneDim  \n Changes the number of elements in a one-dimensional `COleSafeArray` object.  \n  \n```  \nvoid ResizeOneDim(DWORD dwElements);\n```  \n  \n### Parameters  \n `dwElements`  \n Number of elements in the one-dimensional safe array.  \n  \n### Remarks  \n On error, the function throws a [COleException](../../mfc/reference/coleexception-class.md).  \n  \n### Example  \n  See the example for [COleSafeArray::CreateOneDim](#colesafearray__createonedim).  \n  \n##  <a name=\"colesafearray__unaccessdata\"></a>  COleSafeArray::UnaccessData  \n Decrements the lock count of an array and invalidates the pointer retrieved by `AccessData`.  \n  \n```  \nvoid UnaccessData();\n```  \n  \n### Remarks  \n On error, the function throws a [COleException](../../mfc/reference/coleexception-class.md).  \n  \n### Example  \n  See the example for [COleSafeArray::AccessData](#colesafearray__accessdata).  \n  \n##  <a name=\"colesafearray__unlock\"></a>  COleSafeArray::Unlock  \n Decrements the lock count of an array so it can be freed or resized.  \n  \n```  \nvoid Unlock();\n```  \n  \n### Remarks  \n This function is called after access to the data in an array is finished. On error, it throws a [COleException](../../mfc/reference/coleexception-class.md).  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [COleVariant Class](../../mfc/reference/colevariant-class.md)   \n [CRecordset Class](../../mfc/reference/crecordset-class.md)   \n [CDatabase Class](../../mfc/reference/cdatabase-class.md)\n"}