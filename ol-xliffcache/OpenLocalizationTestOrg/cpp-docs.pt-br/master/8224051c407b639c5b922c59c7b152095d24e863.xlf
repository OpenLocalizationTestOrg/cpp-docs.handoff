<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8224051c407b639c5b922c59c7b152095d24e863</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\oledb\field-status-data-members-in-wizard-generated-accessors.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1092a94b93eb8ba468667ca18730b2b7f2fb98da</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db889d6e1428df887d6ef40a6ea0c253f0aa6471</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Field Status Data Members in Wizard-Generated Accessors | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Field Status Data Members in Wizard-Generated Accessors</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you use the ATL OLE DB Consumer Wizard to create a consumer, the wizard generates a data member in the user record class for each field that you specify in your column map.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Each data member is of type <ph id="ph1">`DWORD`</ph> and contains a status value corresponding to its respective field.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, for a data member <bpt id="p1">*</bpt>m_OwnerID<ept id="p1">*</ept>, the wizard generates an additional data member for field status (<bpt id="p2">*</bpt>dwOwnerIDStatus<ept id="p2">*</ept>) and another one for field length (<bpt id="p3">*</bpt>dwOwnerIDLength<ept id="p3">*</ept>).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It also generates a column map with <ph id="ph1">`COLUMN_ENTRY_LENGTH_STATUS`</ph> entries.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This is shown in the following code:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you modify the user record class or write your own consumer, the data variables must come before the status and length variables.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can use the status values for debugging purposes.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If code generated by the ATL OLE DB Consumer Wizard generates compilation errors such as <bpt id="p1">**</bpt>DB_S_ERRORSOCCURRED<ept id="p1">**</ept> or <bpt id="p2">**</bpt>DB_E_ERRORSOCCURRED<ept id="p2">**</ept>, you should first look at the current values of the field status data members.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Those that have nonzero values correspond to the offending columns.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can also use the status values to set a NULL value for a particular field.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Doing so helps you in cases in which you want to distinguish a field value as NULL rather than zero.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It is up to you to decide whether NULL is a valid value or a special value and decide how your application should handle it.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>OLE DB defines <bpt id="p1">**</bpt>DBSTATUS_S_ISNULL<ept id="p1">**</ept> as the correct means of specifying a generic NULL value.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the consumer reads data and the value is null, the status field is set to <bpt id="p1">**</bpt>DBSTATUS_S_ISNULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the consumer wants to set a NULL value, the consumer sets the status value to <bpt id="p1">**</bpt>DBSTATUS_S_ISNULL<ept id="p1">**</ept> before calling the provider.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Next, open Oledb.h and search for <bpt id="p1">**</bpt>DBSTATUSENUM<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can then match the numerical value of the nonzero status against the <bpt id="p1">**</bpt>DBSTATUSENUM<ept id="p1">**</ept> enumeration values.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the enumeration name is not sufficient to tell you what is wrong, see the "Status" topic in the "Binding Data Values" section of the <bpt id="p1">[</bpt>OLE DB Programmer's Guide<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=121548)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This topic contains tables of status values used when getting or setting data.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For information about length values, see the "Length" topic in the same section.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Retrieving the Length or Status of a Column</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can retrieve the length of a variable-length column or the status of a column (to check for <bpt id="p1">**</bpt>DBSTATUS_S_ISNULL<ept id="p1">**</ept>, for example):</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To get the length, use the <ph id="ph1">`COLUMN_ENTRY_LENGTH`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To get the status, use the <ph id="ph1">`COLUMN_ENTRY_STATUS`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To get both, use <ph id="ph1">`COLUMN_ENTRY_LENGTH_STATUS`</ph>, as shown below.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When you use <ph id="ph1">`CDynamicAccessor`</ph>, the length and status are bound for you automatically.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To retrieve the length and status values, use the <ph id="ph1">`GetLength`</ph> and <bpt id="p1">**</bpt>GetStatus<ept id="p1">**</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Working with OLE DB Consumer Templates</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>