{"nodes":[{"pos":[12,95],"content":"How to: Declare Interior Pointers with the const Keyword (C++-CLI) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Declare Interior Pointers with the const Keyword (C++-CLI) | Microsoft Docs","pos":[0,83]}]},{"content":"How to: Declare Interior Pointers with the const Keyword (C++/CLI)","pos":[634,700]},{"pos":[701,789],"content":"The following sample shows how to use <ph id=\"ph1\">`const`</ph> in the declaration of an interior pointer.","source":"The following sample shows how to use `const` in the declaration of an interior pointer."},{"pos":[797,920],"content":"[!IMPORTANT]\n This language feature is supported by the **/clr** compiler option, but not by the **/ZW** compiler option.","leadings":["","> "],"nodes":[{"content":"This language feature is supported by the <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> compiler option, but not by the <bpt id=\"p2\">**</bpt>/ZW<ept id=\"p2\">**</ept> compiler option.","pos":[14,121],"source":" This language feature is supported by the **/clr** compiler option, but not by the **/ZW** compiler option."}]},{"content":"Example","pos":[929,936]},{"content":"See Also","pos":[2514,2522]},{"content":"interior_ptr (C++/CLI)","pos":[2527,2549]}],"content":"---\ntitle: \"How to: Declare Interior Pointers with the const Keyword (C++-CLI) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"pointers, interior\"\nms.assetid: 64e08b0e-9396-4046-ab51-8f6588f32330\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Declare Interior Pointers with the const Keyword (C++/CLI)\nThe following sample shows how to use `const` in the declaration of an interior pointer.  \n  \n> [!IMPORTANT]\n>  This language feature is supported by the **/clr** compiler option, but not by the **/ZW** compiler option.  \n  \n## Example  \n  \n```  \n// interior_ptr_const.cpp  \n// compile with: /clr  \nusing namespace System;  \nvalue struct V {   \n   int i;  \n};  \n  \nref struct G {  \n   V v;  \n   String ^ msg;  \n};  \n  \ninterior_ptr<int> f( interior_ptr<V> pv ) {   \n   return &(pv->i);   \n}  \n  \nint main() {  \n   int n = -1;  \n   int o = -1;  \n   interior_ptr<int> pn1 = &n;  \n   *pn1 = 50;  \n  \n   V v;  \n   v.i = 101;  \n   V * npV = &v;   // ok: &v yields a pointer to the native heap  \n  \n   interior_ptr<int> pn2 = &n;  \n   interior_ptr<V> pV = &(v);  \n   pn2 = f(pV);  \n   *pn2 = 50;  \n  \n   G ^pG = gcnew G;  \n   pV = &(pG->v);   // ok: pV is an interior pointer  \n  \n   interior_ptr<int const> pn3 = &n;  \n   // *pn3 = 5;   error because pn3 cannot be dereferenced and changed  \n   pn3 = &o;   // OK, can change the memory location  \n  \n   interior_ptr<int> const pn4 = &n;     \n   *pn4 = 5;   // OK because you can dereference and change pn4  \n   // pn4 = &o;   error cannot change the memory location  \n  \n   const interior_ptr<const int> pn5 = &n;  \n   // *pn5 = 5;   error cannot dereference and change pn5  \n   // pn5 = &o;   error cannot change the memory location  \n  \n   const G ^ h_G = gcnew G;   // object is const, cannot modify any members of h_G or call any non-const methods  \n   // h_G->msg = \"test\";   error h_G is const  \n   interior_ptr<String^ const> int_ptr_G = &(h_G->msg);  \n  \n   G ^ const h_G2 = gcnew G;   // interior pointers to this obejct cannot be dereferenced and changed  \n   h_G2->msg = \"test\";  \n   interior_ptr<String^ const> int_ptr_G2 = &(h_G->msg);  \n};  \n```  \n  \n## See Also  \n [interior_ptr (C++/CLI)](../windows/interior-ptr-cpp-cli.md)"}