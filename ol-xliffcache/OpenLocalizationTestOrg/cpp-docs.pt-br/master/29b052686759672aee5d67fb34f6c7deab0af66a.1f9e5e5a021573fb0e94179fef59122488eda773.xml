{"nodes":[{"pos":[12,67],"content":"How to: Write a parallel_for_each Loop | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Write a parallel_for_each Loop | Microsoft Docs","pos":[0,55]}]},{"content":"How to: Write a parallel_for_each Loop","pos":[699,737]},{"pos":[738,997],"content":"This example shows how to use the <bpt id=\"p1\">[</bpt>concurrency::parallel_for_each<ept id=\"p1\">](reference/concurrency-namespace-functions.md#parallel_for_each)</ept> algorithm to compute the count of prime numbers in a <bpt id=\"p2\">[</bpt>std::array<ept id=\"p2\">](../../standard-library/array-class-stl.md)</ept> object in parallel.","source":"This example shows how to use the [concurrency::parallel_for_each](reference/concurrency-namespace-functions.md#parallel_for_each) algorithm to compute the count of prime numbers in a [std::array](../../standard-library/array-class-stl.md) object in parallel."},{"content":"Example","pos":[1006,1013]},{"content":"The following example computes the count of prime numbers in an array two times.","pos":[1017,1097]},{"content":"The example first uses the <bpt id=\"p1\">[</bpt>std::for_each<ept id=\"p1\">](http://msdn.microsoft.com/library/8cb2ae72-bef6-488b-b011-0475c0787e33)</ept> algorithm to compute the count serially.","pos":[1098,1253],"source":" The example first uses the [std::for_each](http://msdn.microsoft.com/library/8cb2ae72-bef6-488b-b011-0475c0787e33) algorithm to compute the count serially."},{"content":"The example then uses the <ph id=\"ph1\">`parallel_for_each`</ph> algorithm to perform the same task in parallel.","pos":[1254,1347],"source":" The example then uses the `parallel_for_each` algorithm to perform the same task in parallel."},{"content":"The example also prints to the console the time that is required to perform both computations.","pos":[1348,1442]},{"pos":[1460,1490],"content":"concrt-parallel-count-primes#1"},{"content":"The following sample output is for a computer that has four processors.","pos":[1582,1653]},{"content":"Compiling the Code","pos":[1809,1827]},{"pos":[1831,2046],"content":"To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`parallel-count-primes.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.","source":"To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named `parallel-count-primes.cpp` and then run the following command in a Visual Studio Command Prompt window."},{"content":"cl.exe /EHsc parallel-count-primes.cpp","pos":[2055,2093]},{"content":"Robust Programming","pos":[2104,2122]},{"content":"The lambda expression that the example passes to the <ph id=\"ph1\">`parallel_for_each`</ph> algorithm uses the <ph id=\"ph2\">`InterlockedIncrement`</ph> function to enable parallel iterations of the loop to increment the counter simultaneously.","pos":[2126,2332],"source":"The lambda expression that the example passes to the `parallel_for_each` algorithm uses the `InterlockedIncrement` function to enable parallel iterations of the loop to increment the counter simultaneously."},{"content":"If you use functions such as <ph id=\"ph1\">`InterlockedIncrement`</ph> to synchronize access to shared resources, you can present performance bottlenecks in your code.","pos":[2333,2481],"source":" If you use functions such as `InterlockedIncrement` to synchronize access to shared resources, you can present performance bottlenecks in your code."},{"content":"You can use a lock-free synchronization mechanism, for example, the <bpt id=\"p1\">[</bpt>concurrency::combinable<ept id=\"p1\">](../../parallel/concrt/reference/combinable-class.md)</ept> class, to eliminate simultaneous access to shared resources.","pos":[2482,2689],"source":" You can use a lock-free synchronization mechanism, for example, the [concurrency::combinable](../../parallel/concrt/reference/combinable-class.md) class, to eliminate simultaneous access to shared resources."},{"content":"For an example that uses the <ph id=\"ph1\">`combinable`</ph> class in this manner, see <bpt id=\"p1\">[</bpt>How to: Use combinable to Improve Performance<ept id=\"p1\">](../../parallel/concrt/how-to-use-combinable-to-improve-performance.md)</ept>.","pos":[2690,2877],"source":" For an example that uses the `combinable` class in this manner, see [How to: Use combinable to Improve Performance](../../parallel/concrt/how-to-use-combinable-to-improve-performance.md)."},{"content":"See Also","pos":[2886,2894]},{"content":"Parallel Algorithms","pos":[2899,2918]},{"content":"parallel_for_each Function","pos":[2971,2997]}],"content":"---\ntitle: \"How to: Write a parallel_for_each Loop | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"writing a parallel_for_each loop [Concurrency Runtime]\"\n  - \"parallel_for_each function, example\"\nms.assetid: fa9c0ba6-ace0-4f88-8681-c7c1f52aff20\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Write a parallel_for_each Loop\nThis example shows how to use the [concurrency::parallel_for_each](reference/concurrency-namespace-functions.md#parallel_for_each) algorithm to compute the count of prime numbers in a [std::array](../../standard-library/array-class-stl.md) object in parallel.  \n  \n## Example  \n The following example computes the count of prime numbers in an array two times. The example first uses the [std::for_each](http://msdn.microsoft.com/library/8cb2ae72-bef6-488b-b011-0475c0787e33) algorithm to compute the count serially. The example then uses the `parallel_for_each` algorithm to perform the same task in parallel. The example also prints to the console the time that is required to perform both computations.  \n  \n [!code-cpp[concrt-parallel-count-primes#1](../../parallel/concrt/codesnippet/cpp/how-to-write-a-parallel-for-each-loop_1.cpp)]  \n  \n The following sample output is for a computer that has four processors.  \n  \n```Output  \nserial version:  \nfound 17984 prime numbers  \ntook 6115 ms  \n \nparallel version:  \nfound 17984 prime numbers  \ntook 1653 ms  \n```  \n  \n## Compiling the Code  \n To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named `parallel-count-primes.cpp` and then run the following command in a Visual Studio Command Prompt window.  \n  \n **cl.exe /EHsc parallel-count-primes.cpp**  \n  \n## Robust Programming  \n The lambda expression that the example passes to the `parallel_for_each` algorithm uses the `InterlockedIncrement` function to enable parallel iterations of the loop to increment the counter simultaneously. If you use functions such as `InterlockedIncrement` to synchronize access to shared resources, you can present performance bottlenecks in your code. You can use a lock-free synchronization mechanism, for example, the [concurrency::combinable](../../parallel/concrt/reference/combinable-class.md) class, to eliminate simultaneous access to shared resources. For an example that uses the `combinable` class in this manner, see [How to: Use combinable to Improve Performance](../../parallel/concrt/how-to-use-combinable-to-improve-performance.md).  \n  \n## See Also  \n [Parallel Algorithms](../../parallel/concrt/parallel-algorithms.md)   \n [parallel_for_each Function](reference/concurrency-namespace-functions.md#parallel_for_each)\n\n\n"}