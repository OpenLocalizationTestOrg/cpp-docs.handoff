<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a35dde7c5a08591c63c7decec755310f389b171</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\const-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7cc252dc1455f6e7188f4db61ec9253de004db2f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75b251b74f899bb5dd216d61c1bcc84895c40c98</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>const (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>const (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When modifying a data declaration, the <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword specifies that the object or variable is not modifiable.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>const values</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword specifies that a variable's value is constant and tells the compiler to prevent the programmer from modifying it.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In C++, you can use the <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword instead of the <bpt id="p2">[</bpt>#define<ept id="p2">](../preprocessor/hash-define-directive-c-cpp.md)</ept> preprocessor directive to define constant values.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Values defined with <bpt id="p1">**</bpt>const<ept id="p1">**</ept> are subject to type checking, and can be used in place of constant expressions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In C++, you can specify the size of an array with a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> variable as follows:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In C, constant values default to external linkage, so they can appear only in source files.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In C++, constant values default to internal linkage, which allows them to appear in header files.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword can also be used in pointer declarations.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A pointer to a variable declared as <bpt id="p1">**</bpt>const<ept id="p1">**</ept> can be assigned only to a pointer that is also declared as <bpt id="p2">**</bpt>const<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use pointers to constant data as function parameters to prevent the function from modifying a parameter passed through a pointer.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For objects that are declared as <bpt id="p1">**</bpt>const<ept id="p1">**</ept>, you can only call constant member functions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This ensures that the constant object is never modified.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can call either constant or nonconstant member functions for a nonconstant object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also overload a member function using the <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword; this allows a different version of the function to be called for constant and nonconstant objects.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You cannot declare constructors or destructors with the <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>const member functions</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Declaring a member function with the <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword specifies that the function is a "read-only" function that does not modify the object for which it is called.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A constant member function cannot modify any non-static data members or call any member functions that aren't constant.To declare a constant member function, place the <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword after the closing parenthesis of the argument list.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword is required in both the declaration and the definition.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>C and C++ const Differences</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you declare a variable as <bpt id="p1">**</bpt>const<ept id="p1">**</ept> in a C source code file, you do so as:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can then use this variable in another module as follows:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>But to get the same behavior in C++, you must declare your <bpt id="p1">**</bpt>const<ept id="p1">**</ept> variable as:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you wish to declare an <ph id="ph1">`extern`</ph> variable in a C++ source code file for use in a C source code file, use:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>to prevent name mangling by the C++ compiler.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When following a member function's parameter list, the <bpt id="p1">**</bpt>const<ept id="p1">**</ept> keyword specifies that the function does not modify the object for which it is invoked.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information on <bpt id="p1">**</bpt>const<ept id="p1">**</ept>, see the following topics:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>const and volatile Pointers</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Type Qualifiers (C Language Reference)</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>volatile</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>#define<ept id="p1">](../preprocessor/hash-define-directive-c-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>