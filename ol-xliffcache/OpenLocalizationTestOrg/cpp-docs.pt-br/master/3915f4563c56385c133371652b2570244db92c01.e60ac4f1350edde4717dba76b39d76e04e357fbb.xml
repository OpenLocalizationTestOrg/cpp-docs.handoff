{"nodes":[{"pos":[12,48],"content":"binder2nd (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"binder2nd (STL-CLR) | Microsoft Docs","pos":[0,36]}]},{"content":"binder2nd (STL/CLR)","pos":[626,645]},{"content":"The template class describes a one-argument functor that, when called, returns its stored two-argument functor called with the supplied first argument and its stored second argument.","pos":[646,828]},{"content":"You use it specify a function object in terms of its stored functor.","pos":[829,897]},{"content":"Syntax","pos":[906,912]},{"content":"Parameters","pos":[1587,1597]},{"content":"Fun","pos":[1601,1604]},{"content":"The type of the stored functor.","pos":[1608,1639]},{"content":"Member Functions","pos":[1648,1664]},{"content":"Type Definition","pos":[1671,1686]},{"content":"Description","pos":[1687,1698]},{"content":"delegate_type","pos":[1747,1760]},{"content":"The type of the generic delegate.","pos":[1761,1794]},{"content":"first_argument_type","pos":[1799,1818]},{"content":"The type of the functor first argument.","pos":[1819,1858]},{"content":"result_type","pos":[1863,1874]},{"content":"The type of the functor result.","pos":[1875,1906]},{"content":"second_argument_type","pos":[1911,1931]},{"content":"The type of the functor second argument.","pos":[1932,1972]},{"content":"stored_function_type","pos":[1977,1997]},{"content":"The type of the functor.","pos":[1998,2022]},{"content":"Member","pos":[2030,2036]},{"content":"Description","pos":[2037,2048]},{"content":"binder2nd","pos":[2088,2097]},{"content":"Constructs the functor.","pos":[2098,2121]},{"content":"Operator","pos":[2129,2137]},{"content":"Description","pos":[2138,2149]},{"content":"operator()","pos":[2191,2201]},{"content":"Computes the desired function.","pos":[2202,2232]},{"content":"operator delegate_type^()","pos":[2237,2262]},{"content":"Casts the functor to a delegate.","pos":[2263,2295]},{"content":"Remarks","pos":[2305,2312]},{"content":"The template class describes a one-argument functor that stores a two-argument functor and a second argument.","pos":[2316,2425]},{"content":"It defines the member operator <ph id=\"ph1\">`operator()`</ph> so that, when the object is called as a function, it returns the result of calling the stored functor with the supplied first argument and the stored second argument.","pos":[2426,2636],"source":" It defines the member operator `operator()` so that, when the object is called as a function, it returns the result of calling the stored functor with the supplied first argument and the stored second argument."},{"pos":[2643,2765],"content":"You can also pass the object as a function argument whose type is <ph id=\"ph1\">`delegate_type^`</ph> and it will be converted appropriately.","source":"You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately."},{"content":"Example","pos":[2774,2781]},{"content":"Requirements","pos":[3934,3946]},{"pos":[3950,3982],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/functional&gt;","source":"**Header:** \\<cliext/functional>"},{"pos":[3989,4010],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[4019,4027]},{"content":"bind2nd (STL/CLR)","pos":[4032,4049]}],"content":"---\ntitle: \"binder2nd (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::binder2nd\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"binder2nd function [STL/CLR]\"\nms.assetid: f4be8722-1778-4cb9-9ec7-ad1443f6899f\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# binder2nd (STL/CLR)\nThe template class describes a one-argument functor that, when called, returns its stored two-argument functor called with the supplied first argument and its stored second argument. You use it specify a function object in terms of its stored functor.  \n  \n## Syntax  \n  \n```  \ntemplate<typename Fun>  \n    ref class binder2nd  \n    { // wrap operator()  \npublic:  \n    typedef Fun stored_function_type;  \n    typedef typename Fun::first_argument_type first_argument_type;  \n    typedef typename Fun::second_argument_type second_argument_type;  \n    typedef typename Fun:result_type result_type;  \n    typedef Microsoft::VisualC::StlClr::UnaryDelegate<  \n        first_argument_type, result_type>  \n        delegate_type;  \n  \n    binder2nd(Fun% functor, second_argument_type left);  \n    binder2nd(binder2nd<Arg>% right);  \n  \n    result_type operator()(first_argument_type right);  \n    operator delegate_type^();  \n    };  \n```  \n  \n#### Parameters  \n Fun  \n The type of the stored functor.  \n  \n## Member Functions  \n  \n|Type Definition|Description|  \n|---------------------|-----------------|  \n|delegate_type|The type of the generic delegate.|  \n|first_argument_type|The type of the functor first argument.|  \n|result_type|The type of the functor result.|  \n|second_argument_type|The type of the functor second argument.|  \n|stored_function_type|The type of the functor.|  \n  \n|Member|Description|  \n|------------|-----------------|  \n|binder2nd|Constructs the functor.|  \n  \n|Operator|Description|  \n|--------------|-----------------|  \n|operator()|Computes the desired function.|  \n|operator delegate_type^()|Casts the functor to a delegate.|  \n  \n## Remarks  \n The template class describes a one-argument functor that stores a two-argument functor and a second argument. It defines the member operator `operator()` so that, when the object is called as a function, it returns the result of calling the stored functor with the supplied first argument and the stored second argument.  \n  \n You can also pass the object as a function argument whose type is `delegate_type^` and it will be converted appropriately.  \n  \n## Example  \n  \n```  \n// cliext_binder2nd.cpp   \n// compile with: /clr   \n#include <cliext/algorithm>   \n#include <cliext/functional>   \n#include <cliext/vector>   \n  \ntypedef cliext::vector<int> Myvector;   \nint main()   \n    {   \n    Myvector c1;   \n    c1.push_back(4);   \n    c1.push_back(3);   \n    Myvector c3(2, 0);   \n  \n// display initial contents \" 4 3\"   \n    for each (int elem in c1)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display   \n    cliext::minus<int> sub_op;   \n    cliext::binder2nd<cliext::minus<int> > sub4(sub_op, 4);   \n  \n    cliext::transform(c1.begin(), c1.begin() + 2, c3.begin(),   \n        sub4);   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n  \n// transform and display with function   \n    cliext::transform(c1.begin(), c1.begin() + 2, c3.begin(),   \n        bind2nd(sub_op, 4));   \n    for each (int elem in c3)   \n        System::Console::Write(\" {0}\", elem);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n4 3  \n0 -1  \n0 -1  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/functional>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [bind2nd (STL/CLR)](../dotnet/bind2nd-stl-clr.md)"}