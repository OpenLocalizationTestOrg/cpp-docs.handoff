<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f7bfb3cc2964baf97b977ec544fb6b004964e5f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\using-extern-to-specify-linkage.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d3db7ee95eeb20b448d99e05ab6bf04c1edfbe4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">267c55732edd6d8596a55824f0635cecfac5a589</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using extern to Specify Linkage | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using extern to Specify Linkage</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`extern`</ph> keyword declares a variable or function and specifies that it has external linkage (its name is visible from files other than the one in which it's defined).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When modifying a variable, <ph id="ph1">`extern`</ph> specifies that the variable has static duration (it is allocated when the program begins and deallocated when the program ends).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The variable or function may be defined in another source file, or later in the same file.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Declarations of variables and functions at file scope are external by default.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In C++, when used with a string, <ph id="ph1">`extern`</ph> specifies that the linkage conventions of another language are being used for the declarator(s).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>C functions and data can be accessed only if they are previously declared as having C linkage.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, they must be defined in a separately compiled translation unit.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Microsoft C++ supports the strings <bpt id="p1">**</bpt>"C"<ept id="p1">**</ept> and <bpt id="p2">**</bpt>"C++"<ept id="p2">**</ept> in the <bpt id="p3">*</bpt>string-literal<ept id="p3">*</ept> field.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>All of the standard include files use the <ph id="ph1">`extern`</ph> "C" syntax to allow the run-time library functions to be used in C++ programs.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example shows alternative ways to declare names that have C linkage:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If a function has more than one linkage specification, they must agree; it is an error to declare functions as having both C and C++ linkage.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Furthermore, if two declarations for a function occur in a program — one with a linkage specification and one without — the declaration with the linkage specification must be first.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Any redundant declarations of functions that already have linkage specification are given the linkage specified in the first declaration.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Functions and objects explicitly declared as <bpt id="p1">**</bpt>static<ept id="p1">**</ept> within the body of a compound linkage specifier (<bpt id="p2">**</bpt>{ }<ept id="p2">**</ept>) are treated as static functions or objects; the linkage specifier is ignored.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Other functions and objects behave as if declared using the <ph id="ph1">`extern`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Using extern to Specify Linkage<ept id="p1">](../cpp/using-extern-to-specify-linkage.md)</ept> for details about the <ph id="ph1">`extern`</ph> keyword.)</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>extern Storage-Class Specifier</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Behavior of Identifiers</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Linkage</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>