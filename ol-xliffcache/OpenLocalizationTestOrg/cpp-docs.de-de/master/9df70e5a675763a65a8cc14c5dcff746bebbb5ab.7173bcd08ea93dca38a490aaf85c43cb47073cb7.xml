{"nodes":[{"pos":[12,48],"content":"lock::operator bool | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"lock::operator bool | Microsoft Docs","pos":[0,36]}]},{"content":"lock::operator bool","pos":[728,747]},{"pos":[748,802],"content":"Operator for using <ph id=\"ph1\">`lock`</ph> in a conditional expression.","source":"Operator for using `lock` in a conditional expression."},{"content":"Syntax","pos":[811,817]},{"content":"Return Value","pos":[860,872]},{"pos":[883,920],"content":"if a lock is held, <ph id=\"ph1\">`false`</ph> otherwise.","source":" if a lock is held, `false` otherwise."},{"content":"Remarks","pos":[929,936]},{"pos":[940,1081],"content":"This operator actually converts to <ph id=\"ph1\">`_detail_class::_safe_bool`</ph> which is safer than <ph id=\"ph2\">`bool`</ph> because it cannot be converted to an integral type.","source":"This operator actually converts to `_detail_class::_safe_bool` which is safer than `bool` because it cannot be converted to an integral type."},{"content":"Example","pos":[1090,1097]},{"content":"This example uses a single instance of a class across multiple threads.","pos":[1101,1172]},{"content":"The class uses a lock on itself to ensure that accesses to its internal data are consistent for each thread.","pos":[1174,1282]},{"content":"The main application thread uses a lock on the same instance of the class to periodically check to see if any worker threads still exist, and waits to exit until all worker threads have completed their tasks.","pos":[1284,1492]},{"content":"Requirements","pos":[4060,4072]},{"pos":[4076,4107],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\lock.h&gt;","source":"**Header file** \\<msclr\\lock.h>"},{"pos":[4114,4133],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr","source":"**Namespace** msclr"},{"content":"See Also","pos":[4142,4150]},{"content":"lock Members","pos":[4155,4167]},{"content":"lock::is_locked","pos":[4201,4216]}],"content":"---\ntitle: \"lock::operator bool | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"operator bool\"\n  - \"msclr.lock.operator bool\"\n  - \"lock.operator bool\"\n  - \"msclr::lock::operator bool\"\n  - \"lock::operator bool\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"lock::operator bool\"\nms.assetid: 007f0372-f812-4f1e-ba43-2584bd96eb11\ncaps.latest.revision: 13\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# lock::operator bool\nOperator for using `lock` in a conditional expression.  \n  \n## Syntax  \n  \n```  \noperator bool();  \n```  \n  \n## Return Value  \n `true` if a lock is held, `false` otherwise.  \n  \n## Remarks  \n This operator actually converts to `_detail_class::_safe_bool` which is safer than `bool` because it cannot be converted to an integral type.  \n  \n## Example  \n This example uses a single instance of a class across multiple threads.  The class uses a lock on itself to ensure that accesses to its internal data are consistent for each thread.  The main application thread uses a lock on the same instance of the class to periodically check to see if any worker threads still exist, and waits to exit until all worker threads have completed their tasks.  \n  \n```  \n// msl_lock_op_bool.cpp  \n// compile with: /clr  \n#include <msclr/lock.h>  \n  \nusing namespace System;  \nusing namespace System::Threading;  \nusing namespace msclr;  \n  \nref class CounterClass {  \nprivate:  \n   int Counter;     \n  \npublic:  \n   property int ThreadCount;  \n  \n   // function called by multiple threads, use lock to keep Counter consistent  \n   // for each thread  \n   void UseCounter() {  \n      try {  \n         lock l(this); // wait infinitely  \n  \n         Console::WriteLine(\"In thread {0}, Counter = {1}\", Thread::CurrentThread->ManagedThreadId,   \n            Counter);  \n  \n         for (int i = 0; i < 10; i++) {  \n            Counter++;  \n            Thread::Sleep(10);  \n         }  \n  \n         Console::WriteLine(\"In thread {0}, Counter = {1}\", Thread::CurrentThread->ManagedThreadId,   \n            Counter);  \n  \n         Counter = 0;  \n         // lock is automatically released when it goes out of scope and its destructor is called  \n      }  \n      catch (...) {  \n         Console::WriteLine(\"Couldn't acquire lock!\");  \n      }  \n  \n      ThreadCount--;  \n   }  \n};  \n  \nint main() {  \n   // create a few threads to contend for access to the shared data  \n   CounterClass^ cc = gcnew CounterClass;  \n   array<Thread^>^ tarr = gcnew array<Thread^>(5);  \n   ThreadStart^ startDelegate = gcnew ThreadStart(cc, &CounterClass::UseCounter);  \n   for (int i = 0; i < tarr->Length; i++) {  \n      tarr[i] = gcnew Thread(startDelegate);  \n      cc->ThreadCount++;  \n      tarr[i]->Start();  \n   }  \n  \n   // keep our main thread alive until all worker threads have completed  \n   lock l(cc, lock_later); // don't lock now, just create the object  \n   while (true) {  \n      l.try_acquire(50); // try to acquire lock, don't throw an exception if can't  \n      if (l) { // use bool operator to check for lock  \n         if (0 == cc->ThreadCount) {  \n            Console::WriteLine(\"All threads completed.\");  \n            break; // all threads are gone, exit while  \n         }  \n         else {  \n            Console::WriteLine(\"{0} threads exist, continue waiting...\", cc->ThreadCount);  \n            l.release(); // some threads exist, let them do their work  \n         }  \n      }  \n   }  \n}  \n```  \n  \n```Output  \nIn thread 3, Counter = 0  \nIn thread 3, Counter = 10  \nIn thread 5, Counter = 0  \nIn thread 5, Counter = 10  \nIn thread 7, Counter = 0  \nIn thread 7, Counter = 10  \nIn thread 4, Counter = 0  \nIn thread 4, Counter = 10  \nIn thread 6, Counter = 0  \nIn thread 6, Counter = 10  \nAll threads completed.  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\lock.h>  \n  \n **Namespace** msclr  \n  \n## See Also  \n [lock Members](../dotnet/lock-members.md)   \n [lock::is_locked](../dotnet/lock-is-locked.md)"}