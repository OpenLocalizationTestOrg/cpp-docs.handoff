{"nodes":[{"pos":[12,55],"content":"set_intersection (STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"set_intersection (STL-CLR) | Microsoft Docs","pos":[0,43]}]},{"content":"set_intersection (STL/CLR)","pos":[646,672]},{"content":"Unites all of the elements that belong to both sorted source ranges into a single, sorted destination range, where the ordering criterion may be specified by a binary predicate.","pos":[673,850]},{"content":"Syntax","pos":[859,865]},{"content":"Remarks","pos":[1265,1272]},{"content":"This function behaves the same as the STL function <ph id=\"ph1\">`set_intersection`</ph>.","pos":[1276,1346],"source":"This function behaves the same as the STL function `set_intersection`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>set_intersection<ept id=\"p1\">](http://msdn.microsoft.com/Library/49835507-0d59-4ca3-bcdb-1de1ac4eac00)</ept>.","pos":[1347,1464],"source":" For more information, see [set_intersection](http://msdn.microsoft.com/Library/49835507-0d59-4ca3-bcdb-1de1ac4eac00)."},{"content":"Requirements","pos":[1473,1485]},{"pos":[1489,1520],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/algorithm&gt;","source":"**Header:** \\<cliext/algorithm>"},{"pos":[1527,1548],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[1557,1565]},{"content":"algorithm (STL/CLR)","pos":[1570,1589]}],"content":"---\ntitle: \"set_intersection (STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::set_intersection\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"set_intersection function [STL/CLR]\"\nms.assetid: 8a799b20-55a5-4fba-a9c1-a48597cbdae6\ncaps.latest.revision: 4\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# set_intersection (STL/CLR)\nUnites all of the elements that belong to both sorted source ranges into a single, sorted destination range, where the ordering criterion may be specified by a binary predicate.  \n  \n## Syntax  \n  \n```  \ntemplate<class _InIt1, class _InIt2, class _OutIt> inline  \n    _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,  \n        _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest);  \ntemplate<class _InIt1, class _InIt2, class _OutIt, class _Pr> inline  \n    _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,  \n        _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred);  \n```  \n  \n## Remarks  \n This function behaves the same as the STL function `set_intersection`. For more information, see [set_intersection](http://msdn.microsoft.com/Library/49835507-0d59-4ca3-bcdb-1de1ac4eac00).  \n  \n## Requirements  \n **Header:** \\<cliext/algorithm>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [algorithm (STL/CLR)](../dotnet/algorithm-stl-clr.md)"}