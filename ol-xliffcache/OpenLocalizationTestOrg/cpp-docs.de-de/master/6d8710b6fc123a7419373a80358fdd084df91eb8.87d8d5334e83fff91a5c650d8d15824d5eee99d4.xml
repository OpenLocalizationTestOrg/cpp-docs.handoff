{"nodes":[{"pos":[12,40],"content":"CMenu Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMenu Class | Microsoft Docs","pos":[0,28]}]},{"content":"CMenu Class","pos":[688,699]},{"pos":[700,740],"content":"An encapsulation of the Windows <ph id=\"ph1\">`HMENU`</ph>.","source":"An encapsulation of the Windows `HMENU`."},{"content":"Syntax","pos":[749,755]},{"content":"Members","pos":[810,817]},{"content":"Public Constructors","pos":[827,846]},{"content":"Name","pos":[853,857]},{"content":"Description","pos":[858,869]},{"content":"CMenu::CMenu","pos":[908,920]},{"pos":[937,965],"content":"Constructs a <ph id=\"ph1\">`CMenu`</ph> object.","source":"Constructs a `CMenu` object."},{"content":"Public Methods","pos":[976,990]},{"content":"Name","pos":[997,1001]},{"content":"Description","pos":[1002,1013]},{"content":"CMenu::AppendMenu","pos":[1052,1069]},{"content":"Appends a new item to the end of this menu.","pos":[1091,1134]},{"content":"CMenu::Attach","pos":[1140,1153]},{"pos":[1171,1222],"content":"Attaches a Windows menu handle to a <ph id=\"ph1\">`CMenu`</ph> object.","source":"Attaches a Windows menu handle to a `CMenu` object."},{"content":"CMenu::CheckMenuItem","pos":[1228,1248]},{"content":"Places a check mark next to or removes a check mark from a menu item in the pop-up menu.","pos":[1273,1361]},{"content":"CMenu::CheckMenuRadioItem","pos":[1367,1392]},{"content":"Places a radio button next to a menu item and removes the radio button from all of the other menu items in the group.","pos":[1422,1539]},{"content":"CMenu::CreateMenu","pos":[1545,1562]},{"pos":[1584,1642],"content":"Creates an empty menu and attaches it to a <ph id=\"ph1\">`CMenu`</ph> object.","source":"Creates an empty menu and attaches it to a `CMenu` object."},{"content":"CMenu::CreatePopupMenu","pos":[1648,1670]},{"pos":[1697,1762],"content":"Creates an empty pop-up menu and attaches it to a <ph id=\"ph1\">`CMenu`</ph> object.","source":"Creates an empty pop-up menu and attaches it to a `CMenu` object."},{"content":"CMenu::DeleteMenu","pos":[1768,1785]},{"content":"Deletes a specified item from the menu.","pos":[1807,1846]},{"content":"If the menu item has an associated pop-up menu, destroys the handle to the pop-up menu and frees the memory used by it.","pos":[1847,1966]},{"content":"CMenu::DeleteTempMap","pos":[1972,1992]},{"pos":[2017,2099],"content":"Deletes any temporary <ph id=\"ph1\">`CMenu`</ph> objects created by the <ph id=\"ph2\">`FromHandle`</ph> member function.","source":"Deletes any temporary `CMenu` objects created by the `FromHandle` member function."},{"content":"CMenu::DestroyMenu","pos":[2105,2123]},{"pos":[2146,2237],"content":"Destroys the menu attached to a <ph id=\"ph1\">`CMenu`</ph> object and frees any memory that the menu occupied.","source":"Destroys the menu attached to a `CMenu` object and frees any memory that the menu occupied."},{"content":"CMenu::Detach","pos":[2243,2256]},{"pos":[2274,2350],"content":"Detaches a Windows menu handle from a <ph id=\"ph1\">`CMenu`</ph> object and returns the handle.","source":"Detaches a Windows menu handle from a `CMenu` object and returns the handle."},{"content":"CMenu::DrawItem","pos":[2356,2371]},{"content":"Called by the framework when a visual aspect of an owner-drawn menu changes.","pos":[2391,2467]},{"content":"CMenu::EnableMenuItem","pos":[2473,2494]},{"content":"Enables, disables, or dims (grays) a menu item.","pos":[2520,2567]},{"content":"CMenu::FromHandle","pos":[2573,2590]},{"pos":[2612,2678],"content":"Returns a pointer to a <ph id=\"ph1\">`CMenu`</ph> object given a Windows menu handle.","source":"Returns a pointer to a `CMenu` object given a Windows menu handle."},{"content":"CMenu::GetDefaultItem","pos":[2684,2705]},{"content":"Determines the default menu item on the specified menu.","pos":[2731,2786]},{"content":"CMenu::GetMenuContextHelpId","pos":[2792,2819]},{"content":"Retrieves the help context ID associated with the menu.","pos":[2851,2906]},{"content":"CMenu::GetMenuInfo","pos":[2912,2930]},{"content":"Retrieves information on a specific menu.","pos":[2953,2994]},{"content":"CMenu::GetMenuItemCount","pos":[3000,3023]},{"content":"Determines the number of items in a pop-up or top-level menu.","pos":[3051,3112]},{"content":"CMenu::GetMenuItemID","pos":[3118,3138]},{"content":"Obtains the menu-item identifier for a menu item located at the specified position.","pos":[3163,3246]},{"content":"CMenu::GetMenuItemInfo","pos":[3252,3274]},{"content":"Retrieves information about a menu item.","pos":[3301,3341]},{"content":"CMenu::GetMenuState","pos":[3347,3366]},{"content":"Returns the status of the specified menu item or the number of items in a pop-up menu.","pos":[3390,3476]},{"content":"CMenu::GetMenuString","pos":[3482,3502]},{"content":"Retrieves the label of the specified menu item.","pos":[3527,3574]},{"content":"CMenu::GetSafeHmenu","pos":[3580,3599]},{"pos":[3623,3676],"content":"Returns the <ph id=\"ph1\">`m_hMenu`</ph> wrapped by this <ph id=\"ph2\">`CMenu`</ph> object.","source":"Returns the `m_hMenu` wrapped by this `CMenu` object."},{"content":"CMenu::GetSubMenu","pos":[3682,3699]},{"content":"Retrieves a pointer to a pop-up menu.","pos":[3721,3758]},{"content":"CMenu::InsertMenu","pos":[3764,3781]},{"content":"Inserts a new menu item at the specified position, moving other items down the menu.","pos":[3803,3887]},{"content":"CMenu::InsertMenuItem","pos":[3893,3914]},{"content":"Inserts a new menu item at the specified position in a menu.","pos":[3940,4000]},{"content":"CMenu::LoadMenu","pos":[4006,4021]},{"pos":[4041,4124],"content":"Loads a menu resource from the executable file and attaches it to a <ph id=\"ph1\">`CMenu`</ph> object.","source":"Loads a menu resource from the executable file and attaches it to a `CMenu` object."},{"content":"CMenu::LoadMenuIndirect","pos":[4130,4153]},{"pos":[4181,4261],"content":"Loads a menu from a menu template in memory and attaches it to a <ph id=\"ph1\">`CMenu`</ph> object.","source":"Loads a menu from a menu template in memory and attaches it to a `CMenu` object."},{"content":"CMenu::MeasureItem","pos":[4267,4285]},{"content":"Called by the framework to determine menu dimensions when an owner-drawn menu is created.","pos":[4308,4397]},{"content":"CMenu::ModifyMenu","pos":[4403,4420]},{"content":"Changes an existing menu item at the specified position.","pos":[4442,4498]},{"content":"CMenu::RemoveMenu","pos":[4504,4521]},{"content":"Deletes a menu item with an associated pop-up menu from the specified menu.","pos":[4543,4618]},{"content":"CMenu::SetDefaultItem","pos":[4624,4645]},{"content":"Sets the default menu item for the specified menu.","pos":[4671,4721]},{"content":"CMenu::SetMenuContextHelpId","pos":[4727,4754]},{"content":"Sets the help context ID to be associated with the menu.","pos":[4786,4842]},{"content":"CMenu::SetMenuInfo","pos":[4848,4866]},{"content":"Sets information on a specific menu.","pos":[4889,4925]},{"content":"CMenu::SetMenuItemBitmaps","pos":[4931,4956]},{"content":"Associates the specified check-mark bitmaps with a menu item.","pos":[4986,5047]},{"content":"CMenu::SetMenuItemInfo","pos":[5053,5075]},{"content":"Changes information about a menu item.","pos":[5102,5140]},{"content":"CMenu::TrackPopupMenu","pos":[5146,5167]},{"content":"Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu.","pos":[5193,5304]},{"content":"CMenu::TrackPopupMenuEx","pos":[5310,5333]},{"content":"Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu.","pos":[5361,5472]},{"content":"Public Operators","pos":[5483,5499]},{"content":"Name","pos":[5506,5510]},{"content":"Description","pos":[5511,5522]},{"content":"CMenu::operator HMENU","pos":[5561,5582]},{"content":"Retrieves the handle of the menu object.","pos":[5608,5648]},{"content":"CMenu::operator !=","pos":[5654,5672]},{"content":"Determines if two menu objects are not equal.","pos":[5697,5742]},{"content":"CMenu::operator ==","pos":[5748,5766]},{"content":"Determines if two menu objects are equal.","pos":[5793,5834]},{"content":"Public Data Members","pos":[5845,5864]},{"content":"Name","pos":[5871,5875]},{"content":"Description","pos":[5876,5887]},{"content":"CMenu::m_hMenu","pos":[5926,5940]},{"pos":[5959,6031],"content":"Specifies the handle to the Windows menu attached to the <ph id=\"ph1\">`CMenu`</ph> object.","source":"Specifies the handle to the Windows menu attached to the `CMenu` object."},{"content":"Remarks","pos":[6041,6048]},{"content":"It provides member functions for creating, tracking, updating, and destroying a menu.","pos":[6052,6137]},{"content":"Create a <ph id=\"ph1\">`CMenu`</ph> object on the stack frame as a local, then call <ph id=\"ph2\">`CMenu`</ph>'s member functions to manipulate the new menu as needed.","pos":[6144,6273],"source":"Create a `CMenu` object on the stack frame as a local, then call `CMenu`'s member functions to manipulate the new menu as needed."},{"content":"Next, call <bpt id=\"p1\">[</bpt>CWnd::SetMenu<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__setmenu)</ept> to set the menu to a window, followed immediately by a call to the <ph id=\"ph1\">`CMenu`</ph> object's <bpt id=\"p2\">[</bpt>Detach<ept id=\"p2\">](#cmenu__detach)</ept> member function.","pos":[6274,6475],"source":" Next, call [CWnd::SetMenu](../../mfc/reference/cwnd-class.md#cwnd__setmenu) to set the menu to a window, followed immediately by a call to the `CMenu` object's [Detach](#cmenu__detach) member function."},{"content":"The <ph id=\"ph1\">`CWnd::SetMenu`</ph> member function sets the window's menu to the new menu, causes the window to be redrawn to reflect the menu change, and also passes ownership of the menu to the window.","pos":[6476,6664],"source":" The `CWnd::SetMenu` member function sets the window's menu to the new menu, causes the window to be redrawn to reflect the menu change, and also passes ownership of the menu to the window."},{"content":"The call to <bpt id=\"p1\">**</bpt>Detach<ept id=\"p1\">**</ept> detaches the <ph id=\"ph1\">`HMENU`</ph> from the <ph id=\"ph2\">`CMenu`</ph> object, so that when the local <ph id=\"ph3\">`CMenu`</ph> variable passes out of scope, the <ph id=\"ph4\">`CMenu`</ph> object destructor does not attempt to destroy a menu it no longer owns.","pos":[6665,6878],"source":" The call to **Detach** detaches the `HMENU` from the `CMenu` object, so that when the local `CMenu` variable passes out of scope, the `CMenu` object destructor does not attempt to destroy a menu it no longer owns."},{"content":"The menu itself is automatically destroyed when the window is destroyed.","pos":[6879,6951]},{"pos":[6958,7259],"content":"You can use the <bpt id=\"p1\">[</bpt>LoadMenuIndirect<ept id=\"p1\">](#cmenu__loadmenuindirect)</ept> member function to create a menu from a template in memory, but a menu created from a resource by a call to <bpt id=\"p2\">[</bpt>LoadMenu<ept id=\"p2\">](#cmenu__loadmenu)</ept> is more easily maintained, and the menu resource itself can be created and modified by the menu editor.","source":"You can use the [LoadMenuIndirect](#cmenu__loadmenuindirect) member function to create a menu from a template in memory, but a menu created from a resource by a call to [LoadMenu](#cmenu__loadmenu) is more easily maintained, and the menu resource itself can be created and modified by the menu editor."},{"content":"Inheritance Hierarchy","pos":[7268,7289]},{"content":"CObject","pos":[7294,7301]},{"content":"Requirements","pos":[7363,7375]},{"pos":[7379,7399],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[7443,7460],"content":"CMenu::AppendMenu"},{"content":"Appends a new item to the end of a menu.","pos":[7464,7504]},{"content":"Parameters","pos":[7721,7731]},{"content":"Specifies information about the state of the new menu item when it is added to the menu.","pos":[7747,7835]},{"content":"It consists of one or more of the values listed in the Remarks section.","pos":[7836,7907]},{"content":"Specifies either the command ID of the new menu item or, if <ph id=\"ph1\">`nFlags`</ph> is set to <bpt id=\"p1\">**</bpt>MF_POPUP<ept id=\"p1\">**</ept>, the menu handle ( <ph id=\"ph2\">`HMENU`</ph>) of a pop-up menu.","pos":[7930,8067],"source":" Specifies either the command ID of the new menu item or, if `nFlags` is set to **MF_POPUP**, the menu handle ( `HMENU`) of a pop-up menu."},{"content":"The <ph id=\"ph1\">`nIDNewItem`</ph> parameter is ignored (not needed) if <ph id=\"ph2\">`nFlags`</ph> is set to <bpt id=\"p1\">**</bpt>MF_SEPARATOR<ept id=\"p1\">**</ept>.","pos":[8068,8158],"source":" The `nIDNewItem` parameter is ignored (not needed) if `nFlags` is set to **MF_SEPARATOR**."},{"content":"Specifies the content of the new menu item.","pos":[8182,8225]},{"content":"The <ph id=\"ph1\">`nFlags`</ph> parameter is used to interpret <ph id=\"ph2\">`lpszNewItem`</ph> in the following way:","pos":[8226,8305],"source":" The `nFlags` parameter is used to interpret `lpszNewItem` in the following way:"},{"content":"nFlags","pos":[8312,8318]},{"content":"Interpretation of lpszNewItem","pos":[8319,8348]},{"content":"Contains an application-supplied 32-bit value that the application can use to maintain additional data associated with the menu item.","pos":[8421,8554]},{"content":"This 32-bit value is available to the application when it processes <ph id=\"ph1\">`WM_MEASUREITEM`</ph> and <ph id=\"ph2\">`WM_DRAWITEM`</ph> messages.","pos":[8555,8667],"source":" This 32-bit value is available to the application when it processes `WM_MEASUREITEM` and `WM_DRAWITEM` messages."},{"content":"The value is stored in the <bpt id=\"p1\">**</bpt>itemData<ept id=\"p1\">**</ept> member of the structure supplied with those messages.","pos":[8668,8761],"source":" The value is stored in the **itemData** member of the structure supplied with those messages."},{"content":"MF_STRING","pos":[8768,8777]},{"content":"Contains a pointer to a null-terminated string.","pos":[8780,8827]},{"content":"This is the default interpretation.","pos":[8828,8863]},{"content":"MF_SEPARATOR","pos":[8870,8882]},{"pos":[8885,8937],"content":"The <ph id=\"ph1\">`lpszNewItem`</ph> parameter is ignored (not needed).","source":"The `lpszNewItem` parameter is ignored (not needed)."},{"content":"pBmp","pos":[8946,8950]},{"content":"Points to a <ph id=\"ph1\">`CBitmap`</ph> object that will be used as the menu item.","pos":[8955,9019],"source":" Points to a `CBitmap` object that will be used as the menu item."},{"content":"Return Value","pos":[9029,9041]},{"content":"Nonzero if the function is successful; otherwise 0.","pos":[9045,9096]},{"content":"Remarks","pos":[9106,9113]},{"content":"The application can specify the state of the menu item by setting values in <ph id=\"ph1\">`nFlags`</ph>.","pos":[9117,9202],"source":"The application can specify the state of the menu item by setting values in `nFlags`."},{"content":"When <ph id=\"ph1\">`nIDNewItem`</ph> specifies a pop-up menu, it becomes part of the menu to which it is appended.","pos":[9203,9298],"source":" When `nIDNewItem` specifies a pop-up menu, it becomes part of the menu to which it is appended."},{"content":"If that menu is destroyed, the appended menu will also be destroyed.","pos":[9299,9367]},{"content":"An appended menu should be detached from a <ph id=\"ph1\">`CMenu`</ph> object to avoid conflict.","pos":[9368,9444],"source":" An appended menu should be detached from a `CMenu` object to avoid conflict."},{"content":"Note that <bpt id=\"p1\">**</bpt>MF_STRING<ept id=\"p1\">**</ept> and <ph id=\"ph1\">`MF_OWNERDRAW`</ph> are not valid for the bitmap version of <ph id=\"ph2\">`AppendMenu`</ph>.","pos":[9445,9541],"source":" Note that **MF_STRING** and `MF_OWNERDRAW` are not valid for the bitmap version of `AppendMenu`."},{"pos":[9548,9615],"content":"The following list describes the flags that may be set in <ph id=\"ph1\">`nFlags`</ph>:","source":"The following list describes the flags that may be set in `nFlags`:"},{"content":"<bpt id=\"p1\">**</bpt>MF_CHECKED<ept id=\"p1\">**</ept> Acts as a toggle with <bpt id=\"p2\">**</bpt>MF_UNCHECKED<ept id=\"p2\">**</ept> to place the default check mark next to the item.","pos":[9623,9726],"source":"**MF_CHECKED** Acts as a toggle with **MF_UNCHECKED** to place the default check mark next to the item."},{"content":"When the application supplies check-mark bitmaps (see the <bpt id=\"p1\">[</bpt>SetMenuItemBitmaps<ept id=\"p1\">](#cmenu__setmenuitembitmaps)</ept> member function), the \"check mark on\" bitmap is displayed.","pos":[9727,9892],"source":" When the application supplies check-mark bitmaps (see the [SetMenuItemBitmaps](#cmenu__setmenuitembitmaps) member function), the \"check mark on\" bitmap is displayed."},{"content":"<bpt id=\"p1\">**</bpt>MF_UNCHECKED<ept id=\"p1\">**</ept> Acts as a toggle with <bpt id=\"p2\">**</bpt>MF_CHECKED<ept id=\"p2\">**</ept> to remove a check mark next to the item.","pos":[9900,9994],"source":"**MF_UNCHECKED** Acts as a toggle with **MF_CHECKED** to remove a check mark next to the item."},{"content":"When the application supplies check-mark bitmaps (see the <ph id=\"ph1\">`SetMenuItemBitmaps`</ph> member function), the \"check mark off\" bitmap is displayed.","pos":[9995,10133],"source":" When the application supplies check-mark bitmaps (see the `SetMenuItemBitmaps` member function), the \"check mark off\" bitmap is displayed."},{"pos":[10141,10230],"content":"<bpt id=\"p1\">**</bpt>MF_DISABLED<ept id=\"p1\">**</ept> Disables the menu item so that it cannot be selected but does not dim it.","source":"**MF_DISABLED** Disables the menu item so that it cannot be selected but does not dim it."},{"pos":[10251,10338],"content":"Enables the menu item so that it can be selected and restores it from its dimmed state."},{"pos":[10346,10425],"content":"<bpt id=\"p1\">**</bpt>MF_GRAYED<ept id=\"p1\">**</ept> Disables the menu item so that it cannot be selected and dims it.","source":"**MF_GRAYED** Disables the menu item so that it cannot be selected and dims it."},{"content":"<bpt id=\"p1\">**</bpt>MF_MENUBARBREAK<ept id=\"p1\">**</ept> Places the item on a new line in static menus or in a new column in pop-up menus.","pos":[10433,10534],"source":"**MF_MENUBARBREAK** Places the item on a new line in static menus or in a new column in pop-up menus."},{"content":"The new pop-up menu column will be separated from the old column by a vertical dividing line.","pos":[10535,10628]},{"content":"<bpt id=\"p1\">**</bpt>MF_MENUBREAK<ept id=\"p1\">**</ept> Places the item on a new line in static menus or in a new column in pop-up menus.","pos":[10636,10734],"source":"**MF_MENUBREAK** Places the item on a new line in static menus or in a new column in pop-up menus."},{"content":"No dividing line is placed between the columns.","pos":[10735,10782]},{"content":"Specifies that the item is an owner-draw item.","pos":[10805,10851]},{"content":"When the menu is displayed for the first time, the window that owns the menu receives a <ph id=\"ph1\">`WM_MEASUREITEM`</ph> message, which retrieves the height and width of the menu item.","pos":[10852,11020],"source":" When the menu is displayed for the first time, the window that owns the menu receives a `WM_MEASUREITEM` message, which retrieves the height and width of the menu item."},{"content":"The <ph id=\"ph1\">`WM_DRAWITEM`</ph> message is the one sent whenever the owner must update the visual appearance of the menu item.","pos":[11021,11133],"source":" The `WM_DRAWITEM` message is the one sent whenever the owner must update the visual appearance of the menu item."},{"content":"This option is not valid for a top-level menu item.","pos":[11134,11185]},{"content":"<bpt id=\"p1\">**</bpt>MF_POPUP<ept id=\"p1\">**</ept> Specifies that the menu item has a pop-up menu associated with it.","pos":[11193,11272],"source":"**MF_POPUP** Specifies that the menu item has a pop-up menu associated with it."},{"content":"The ID parameter specifies a handle to a pop-up menu that is to be associated with the item.","pos":[11273,11365]},{"content":"This is used for adding either a top-level pop-up menu or a hierarchical pop-up menu to a pop-up menu item.","pos":[11366,11473]},{"content":"<bpt id=\"p1\">**</bpt>MF_SEPARATOR<ept id=\"p1\">**</ept> Draws a horizontal dividing line.","pos":[11481,11531],"source":"**MF_SEPARATOR** Draws a horizontal dividing line."},{"content":"Can only be used in a pop-up menu.","pos":[11532,11566]},{"content":"This line cannot be dimmed, disabled, or highlighted.","pos":[11567,11620]},{"content":"Other parameters are ignored.","pos":[11621,11650]},{"pos":[11658,11723],"content":"<bpt id=\"p1\">**</bpt>MF_STRING<ept id=\"p1\">**</ept> Specifies that the menu item is a character string.","source":"**MF_STRING** Specifies that the menu item is a character string."},{"content":"Each of the following groups lists flags that are mutually exclusive and cannot be used together:","pos":[11730,11827]},{"pos":[11835,11883],"content":"<bpt id=\"p1\">**</bpt>MF_DISABLED<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`MF_ENABLED`</ph>, and <bpt id=\"p2\">**</bpt>MF_GRAYED<ept id=\"p2\">**</ept>","source":"**MF_DISABLED**, `MF_ENABLED`, and **MF_GRAYED**"},{"pos":[11891,11962],"content":"<bpt id=\"p1\">**</bpt>MF_STRING<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`MF_OWNERDRAW`</ph>, <bpt id=\"p2\">**</bpt>MF_SEPARATOR<ept id=\"p2\">**</ept>, and the bitmap version","source":"**MF_STRING**, `MF_OWNERDRAW`, **MF_SEPARATOR**, and the bitmap version"},{"pos":[11970,12010],"content":"<bpt id=\"p1\">**</bpt>MF_MENUBARBREAK<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>MF_MENUBREAK<ept id=\"p2\">**</ept>","source":"**MF_MENUBARBREAK** and **MF_MENUBREAK**"},{"pos":[12018,12053],"content":"<bpt id=\"p1\">**</bpt>MF_CHECKED<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>MF_UNCHECKED<ept id=\"p2\">**</ept>","source":"**MF_CHECKED** and **MF_UNCHECKED**"},{"pos":[12060,12255],"content":"Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application should call <bpt id=\"p1\">[</bpt>CWnd::DrawMenuBar<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__drawmenubar)</ept>.","source":"Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application should call [CWnd::DrawMenuBar](../../mfc/reference/cwnd-class.md#cwnd__drawmenubar)."},{"content":"Example","pos":[12265,12272]},{"pos":[12277,12337],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::CreateMenu<ept id=\"p1\">](#cmenu__createmenu)</ept>.","source":"See the example for [CMenu::CreateMenu](#cmenu__createmenu)."},{"pos":[12377,12390],"content":"CMenu::Attach"},{"pos":[12394,12448],"content":"Attaches an existing Windows menu to a <ph id=\"ph1\">`CMenu`</ph> object.","source":"Attaches an existing Windows menu to a `CMenu` object."},{"content":"Parameters","pos":[12499,12509]},{"content":"Specifies a handle to a Windows menu.","pos":[12524,12561]},{"content":"Return Value","pos":[12571,12583]},{"content":"Nonzero if the operation was successful; otherwise 0.","pos":[12587,12640]},{"content":"Remarks","pos":[12650,12657]},{"content":"This function should not be called if a menu is already attached to the <ph id=\"ph1\">`CMenu`</ph> object.","pos":[12661,12748],"source":"This function should not be called if a menu is already attached to the `CMenu` object."},{"content":"The menu handle is stored in the <ph id=\"ph1\">`m_hMenu`</ph> data member.","pos":[12749,12804],"source":" The menu handle is stored in the `m_hMenu` data member."},{"pos":[12811,13001],"content":"If the menu you want to manipulate is already associated with a window, you can use the <bpt id=\"p1\">[</bpt>CWnd::GetMenu<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__getmenu)</ept> function to get a handle to the menu.","source":"If the menu you want to manipulate is already associated with a window, you can use the [CWnd::GetMenu](../../mfc/reference/cwnd-class.md#cwnd__getmenu) function to get a handle to the menu."},{"content":"Example","pos":[13011,13018]},{"pos":[13033,13052],"content":"NVC_MFCWindowing#21"},{"pos":[13156,13176],"content":"CMenu::CheckMenuItem"},{"content":"Adds check marks to or removes check marks from menu items in the pop-up menu.","pos":[13180,13258]},{"content":"Parameters","pos":[13346,13356]},{"content":"Specifies the menu item to be checked, as determined by <ph id=\"ph1\">`nCheck`</ph>.","pos":[13378,13443],"source":" Specifies the menu item to be checked, as determined by `nCheck`."},{"content":"Specifies how to check the menu item and how to determine the item's position in the menu.","pos":[13462,13552]},{"content":"The <ph id=\"ph1\">`nCheck`</ph> parameter can be a combination of <bpt id=\"p1\">**</bpt>MF_CHECKED<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>MF_UNCHECKED<ept id=\"p2\">**</ept> with <bpt id=\"p3\">**</bpt>MF_BYPOSITION<ept id=\"p3\">**</ept> or <bpt id=\"p4\">**</bpt>MF_BYCOMMAND<ept id=\"p4\">**</ept> flags.","pos":[13553,13684],"source":" The `nCheck` parameter can be a combination of **MF_CHECKED** or **MF_UNCHECKED** with **MF_BYPOSITION** or **MF_BYCOMMAND** flags."},{"content":"These flags can be combined by using the bitwise OR operator.","pos":[13685,13746]},{"content":"They have the following meanings:","pos":[13747,13780]},{"content":"<bpt id=\"p1\">**</bpt>MF_BYCOMMAND<ept id=\"p1\">**</ept> Specifies that the parameter gives the command ID of the existing menu item.","pos":[13788,13881],"source":"**MF_BYCOMMAND** Specifies that the parameter gives the command ID of the existing menu item."},{"content":"This is the default.","pos":[13882,13902]},{"content":"<bpt id=\"p1\">**</bpt>MF_BYPOSITION<ept id=\"p1\">**</ept> Specifies that the parameter gives the position of the existing menu item.","pos":[13910,14002],"source":"**MF_BYPOSITION** Specifies that the parameter gives the position of the existing menu item."},{"content":"The first item is at position 0.","pos":[14003,14035]},{"pos":[14043,14146],"content":"<bpt id=\"p1\">**</bpt>MF_CHECKED<ept id=\"p1\">**</ept> Acts as a toggle with <bpt id=\"p2\">**</bpt>MF_UNCHECKED<ept id=\"p2\">**</ept> to place the default check mark next to the item.","source":"**MF_CHECKED** Acts as a toggle with **MF_UNCHECKED** to place the default check mark next to the item."},{"pos":[14154,14248],"content":"<bpt id=\"p1\">**</bpt>MF_UNCHECKED<ept id=\"p1\">**</ept> Acts as a toggle with <bpt id=\"p2\">**</bpt>MF_CHECKED<ept id=\"p2\">**</ept> to remove a check mark next to the item.","source":"**MF_UNCHECKED** Acts as a toggle with **MF_CHECKED** to remove a check mark next to the item."},{"content":"Return Value","pos":[14258,14270]},{"pos":[14274,14387],"content":"The previous state of the item: <bpt id=\"p1\">**</bpt>MF_CHECKED<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>MF_UNCHECKED<ept id=\"p2\">**</ept>, or 0xFFFFFFFF if the menu item did not exist.","source":"The previous state of the item: **MF_CHECKED** or **MF_UNCHECKED**, or 0xFFFFFFFF if the menu item did not exist."},{"content":"Remarks","pos":[14397,14404]},{"pos":[14408,14471],"content":"The <ph id=\"ph1\">`nIDCheckItem`</ph> parameter specifies the item to be modified.","source":"The `nIDCheckItem` parameter specifies the item to be modified."},{"content":"The <ph id=\"ph1\">`nIDCheckItem`</ph> parameter may identify a pop-up menu item as well as a menu item.","pos":[14478,14562],"source":"The `nIDCheckItem` parameter may identify a pop-up menu item as well as a menu item."},{"content":"No special steps are required to check a pop-up menu item.","pos":[14563,14621]},{"content":"Top-level menu items cannot be checked.","pos":[14622,14661]},{"content":"A pop-up menu item must be checked by position since it does not have a menu-item identifier associated with it.","pos":[14662,14774]},{"content":"Example","pos":[14784,14791]},{"pos":[14796,14860],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::GetMenuState<ept id=\"p1\">](#cmenu__getmenustate)</ept>.","source":"See the example for [CMenu::GetMenuState](#cmenu__getmenustate)."},{"pos":[14912,14937],"content":"CMenu::CheckMenuRadioItem"},{"content":"Checks a specified menu item and makes it a radio item.","pos":[14941,14996]},{"content":"Parameters","pos":[15125,15135]},{"content":"Specifies (as an ID or offset, depending on the value of <ph id=\"ph1\">`nFlags`</ph>) the first menu item in the radio button group.","pos":[15153,15266],"source":" Specifies (as an ID or offset, depending on the value of `nFlags`) the first menu item in the radio button group."},{"content":"Specifies (as an ID or offset, depending on the value of <ph id=\"ph1\">`nFlags`</ph>) the last menu item in the radio button group.","pos":[15286,15398],"source":" Specifies (as an ID or offset, depending on the value of `nFlags`) the last menu item in the radio button group."},{"content":"Specifies (as an ID or offset, depending on the value of <ph id=\"ph1\">`nFlags`</ph>) the item in the group which will be checked with a radio button.","pos":[15418,15549],"source":" Specifies (as an ID or offset, depending on the value of `nFlags`) the item in the group which will be checked with a radio button."},{"content":"Specifies interpretation of <ph id=\"ph1\">`nIDFirst`</ph>, <ph id=\"ph2\">`nIDLast`</ph>, and <ph id=\"ph3\">`nIDItem`</ph> in the following way:","pos":[15568,15654],"source":" Specifies interpretation of `nIDFirst`, `nIDLast`, and `nIDItem` in the following way:"},{"content":"nFlags","pos":[15661,15667]},{"content":"Interpretation","pos":[15668,15682]},{"content":"MF_BYCOMMAND","pos":[15727,15739]},{"content":"Specifies that the parameter gives the command ID of the existing menu item.","pos":[15742,15818]},{"content":"This is the default if neither <bpt id=\"p1\">**</bpt>MF_BYCOMMAND<ept id=\"p1\">**</ept> nor <bpt id=\"p2\">**</bpt>MF_BYPOSITION<ept id=\"p2\">**</ept> is set.","pos":[15819,15896],"source":" This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set."},{"content":"MF_BYPOSITION","pos":[15903,15916]},{"content":"Specifies that the parameter gives the position of the existing menu item.","pos":[15919,15993]},{"content":"The first item is at position 0.","pos":[15994,16026]},{"content":"Return Value","pos":[16037,16049]},{"content":"Nonzero if successful; otherwise 0","pos":[16053,16087]},{"content":"Remarks","pos":[16097,16104]},{"content":"At the same time, the function unchecks all other menu items in the associated group and clears the radio-item type flag for those items.","pos":[16108,16245]},{"content":"The checked item is displayed using a radio button (or bullet) bitmap instead of a check mark bitmap.","pos":[16246,16347]},{"content":"Example","pos":[16357,16364]},{"pos":[16369,16480],"content":"See the example for <bpt id=\"p1\">[</bpt>ON_COMMAND_RANGE<ept id=\"p1\">](http://msdn.microsoft.com/library/c52719fc-dd6e-48c9-af79-383f48d608e0)</ept>.","source":"See the example for [ON_COMMAND_RANGE](http://msdn.microsoft.com/library/c52719fc-dd6e-48c9-af79-383f48d608e0)."},{"pos":[16519,16531],"content":"CMenu::CMenu"},{"pos":[16535,16593],"content":"Creates an empty menu and attaches it to a <ph id=\"ph1\">`CMenu`</ph> object.","source":"Creates an empty menu and attaches it to a `CMenu` object."},{"content":"Remarks","pos":[16627,16634]},{"pos":[16638,16733],"content":"The menu is not created until you call one of the create or load member functions of <bpt id=\"p1\">**</bpt>CMenu:<ept id=\"p1\">**</ept>","source":"The menu is not created until you call one of the create or load member functions of **CMenu:**"},{"content":"CreateMenu","pos":[16742,16752]},{"content":"CreatePopupMenu","pos":[16782,16797]},{"content":"LoadMenu","pos":[16832,16840]},{"content":"LoadMenuIndirect","pos":[16868,16884]},{"content":"Attach","pos":[16920,16926]},{"pos":[16987,17004],"content":"CMenu::CreateMenu"},{"pos":[17008,17061],"content":"Creates a menu and attaches it to the <ph id=\"ph1\">`CMenu`</ph> object.","source":"Creates a menu and attaches it to the `CMenu` object."},{"content":"Return Value","pos":[17105,17117]},{"content":"Nonzero if the menu was created successfully; otherwise 0.","pos":[17121,17179]},{"content":"Remarks","pos":[17189,17196]},{"content":"The menu is initially empty.","pos":[17200,17228]},{"content":"Menu items can be added by using the <ph id=\"ph1\">`AppendMenu`</ph> or <ph id=\"ph2\">`InsertMenu`</ph> member function.","pos":[17229,17311],"source":" Menu items can be added by using the `AppendMenu` or `InsertMenu` member function."},{"content":"If the menu is assigned to a window, it is automatically destroyed when the window is destroyed.","pos":[17318,17414]},{"content":"Before exiting, an application must free system resources associated with a menu if the menu is not assigned to a window.","pos":[17421,17542]},{"content":"An application frees a menu by calling the <bpt id=\"p1\">[</bpt>DestroyMenu<ept id=\"p1\">](#cmenu__destroymenu)</ept> member function.","pos":[17543,17637],"source":" An application frees a menu by calling the [DestroyMenu](#cmenu__destroymenu) member function."},{"content":"Example","pos":[17647,17654]},{"pos":[17669,17688],"content":"NVC_MFCWindowing#22"},{"pos":[17794,17816],"content":"CMenu::CreatePopupMenu"},{"pos":[17820,17880],"content":"Creates a pop-up menu and attaches it to the <ph id=\"ph1\">`CMenu`</ph> object.","source":"Creates a pop-up menu and attaches it to the `CMenu` object."},{"content":"Return Value","pos":[17929,17941]},{"content":"Nonzero if the pop-up menu was successfully created; otherwise 0.","pos":[17945,18010]},{"content":"Remarks","pos":[18020,18027]},{"content":"The menu is initially empty.","pos":[18031,18059]},{"content":"Menu items can be added by using the <ph id=\"ph1\">`AppendMenu`</ph> or <ph id=\"ph2\">`InsertMenu`</ph> member function.","pos":[18060,18142],"source":" Menu items can be added by using the `AppendMenu` or `InsertMenu` member function."},{"content":"The application can add the pop-up menu to an existing menu or pop-up menu.","pos":[18143,18218]},{"content":"The <ph id=\"ph1\">`TrackPopupMenu`</ph> member function may be used to display this menu as a floating pop-up menu and to track selections on the pop-up menu.","pos":[18219,18358],"source":" The `TrackPopupMenu` member function may be used to display this menu as a floating pop-up menu and to track selections on the pop-up menu."},{"content":"If the menu is assigned to a window, it is automatically destroyed when the window is destroyed.","pos":[18365,18461]},{"content":"If the menu is added to an existing menu, it is automatically destroyed when that menu is destroyed.","pos":[18462,18562]},{"content":"Before exiting, an application must free system resources associated with a pop-up menu if the menu is not assigned to a window.","pos":[18569,18697]},{"content":"An application frees a menu by calling the <bpt id=\"p1\">[</bpt>DestroyMenu<ept id=\"p1\">](#cmenu__destroymenu)</ept> member function.","pos":[18698,18792],"source":" An application frees a menu by calling the [DestroyMenu](#cmenu__destroymenu) member function."},{"content":"Example","pos":[18802,18809]},{"pos":[18814,18874],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::CreateMenu<ept id=\"p1\">](#cmenu__createmenu)</ept>.","source":"See the example for [CMenu::CreateMenu](#cmenu__createmenu)."},{"pos":[18918,18935],"content":"CMenu::DeleteMenu"},{"content":"Deletes an item from the menu.","pos":[18939,18969]},{"content":"Parameters","pos":[19051,19061]},{"content":"Specifies the menu item that is to be deleted, as determined by <ph id=\"ph1\">`nFlags`</ph>.","pos":[19080,19153],"source":" Specifies the menu item that is to be deleted, as determined by `nFlags`."},{"content":"Is used to interpret <ph id=\"ph1\">`nPosition`</ph> in the following way:","pos":[19172,19226],"source":" Is used to interpret `nPosition` in the following way:"},{"content":"nFlags","pos":[19233,19239]},{"content":"Interpretation of nPosition","pos":[19240,19267]},{"content":"MF_BYCOMMAND","pos":[19325,19337]},{"content":"Specifies that the parameter gives the command ID of the existing menu item.","pos":[19340,19416]},{"content":"This is the default if neither <bpt id=\"p1\">**</bpt>MF_BYCOMMAND<ept id=\"p1\">**</ept> nor <bpt id=\"p2\">**</bpt>MF_BYPOSITION<ept id=\"p2\">**</ept> is set.","pos":[19417,19494],"source":" This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set."},{"content":"MF_BYPOSITION","pos":[19501,19514]},{"content":"Specifies that the parameter gives the position of the existing menu item.","pos":[19517,19591]},{"content":"The first item is at position 0.","pos":[19592,19624]},{"content":"Return Value","pos":[19635,19647]},{"content":"Nonzero if the function is successful; otherwise 0.","pos":[19651,19702]},{"content":"Remarks","pos":[19712,19719]},{"pos":[19723,19868],"content":"If the menu item has an associated pop-up menu, <ph id=\"ph1\">`DeleteMenu`</ph> destroys the handle to the pop-up menu and frees the memory used by the pop-up menu.","source":"If the menu item has an associated pop-up menu, `DeleteMenu` destroys the handle to the pop-up menu and frees the memory used by the pop-up menu."},{"pos":[19875,20068],"content":"Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application must call <bpt id=\"p1\">[</bpt>CWnd::DrawMenuBar<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__drawmenubar)</ept>.","source":"Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application must call [CWnd::DrawMenuBar](../../mfc/reference/cwnd-class.md#cwnd__drawmenubar)."},{"content":"Example","pos":[20078,20085]},{"pos":[20090,20175],"content":"See the example for <bpt id=\"p1\">[</bpt>CWnd::GetMenu<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__getmenu)</ept>.","source":"See the example for [CWnd::GetMenu](../../mfc/reference/cwnd-class.md#cwnd__getmenu)."},{"pos":[20222,20242],"content":"CMenu::DeleteTempMap"},{"pos":[20246,20405],"content":"Called automatically by the <ph id=\"ph1\">`CWinApp`</ph> idle-time handler, deletes any temporary <ph id=\"ph2\">`CMenu`</ph> objects created by the <bpt id=\"p1\">[</bpt>FromHandle<ept id=\"p1\">](#cmenu__fromhandle)</ept> member function.","source":"Called automatically by the `CWinApp` idle-time handler, deletes any temporary `CMenu` objects created by the [FromHandle](#cmenu__fromhandle) member function."},{"content":"Remarks","pos":[20466,20473]},{"pos":[20493,20600],"content":"detaches the Windows menu object attached to a temporary <ph id=\"ph1\">`CMenu`</ph> object before deleting the <ph id=\"ph2\">`CMenu`</ph> object.","source":" detaches the Windows menu object attached to a temporary `CMenu` object before deleting the `CMenu` object."},{"content":"Example","pos":[20610,20617]},{"pos":[20632,20651],"content":"NVC_MFCWindowing#23"},{"pos":[20753,20771],"content":"CMenu::DestroyMenu"},{"content":"Destroys the menu and any Windows resources that were used.","pos":[20775,20834]},{"content":"Return Value","pos":[20879,20891]},{"content":"Nonzero if the menu is destroyed; otherwise 0.","pos":[20895,20941]},{"content":"Remarks","pos":[20951,20958]},{"content":"The menu is detached from the <ph id=\"ph1\">`CMenu`</ph> object before it is destroyed.","pos":[20962,21030],"source":"The menu is detached from the `CMenu` object before it is destroyed."},{"content":"The Windows <ph id=\"ph1\">`DestroyMenu`</ph> function is automatically called in the <ph id=\"ph2\">`CMenu`</ph> destructor.","pos":[21031,21116],"source":" The Windows `DestroyMenu` function is automatically called in the `CMenu` destructor."},{"content":"Example","pos":[21126,21133]},{"pos":[21138,21198],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::CreateMenu<ept id=\"p1\">](#cmenu__createmenu)</ept>.","source":"See the example for [CMenu::CreateMenu](#cmenu__createmenu)."},{"pos":[21238,21251],"content":"CMenu::Detach"},{"pos":[21255,21324],"content":"Detaches a Windows menu from a <ph id=\"ph1\">`CMenu`</ph> object and returns the handle.","source":"Detaches a Windows menu from a `CMenu` object and returns the handle."},{"content":"Return Value","pos":[21365,21377]},{"pos":[21381,21463],"content":"The handle, of type <ph id=\"ph1\">`HMENU`</ph>, to a Windows menu, if successful; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The handle, of type `HMENU`, to a Windows menu, if successful; otherwise **NULL**."},{"content":"Remarks","pos":[21473,21480]},{"pos":[21484,21529],"content":"The <ph id=\"ph1\">`m_hMenu`</ph> data member is set to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"The `m_hMenu` data member is set to **NULL**."},{"content":"Example","pos":[21539,21546]},{"pos":[21561,21580],"content":"NVC_MFCWindowing#21"},{"pos":[21679,21694],"content":"CMenu::DrawItem"},{"content":"Called by the framework when a visual aspect of an owner-drawn menu changes.","pos":[21698,21774]},{"content":"Parameters","pos":[21857,21867]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>DRAWITEMSTRUCT<ept id=\"p1\">](../../mfc/reference/drawitemstruct-structure.md)</ept> structure that contains information about the type of drawing required.","pos":[21893,22045],"source":" A pointer to a [DRAWITEMSTRUCT](../../mfc/reference/drawitemstruct-structure.md) structure that contains information about the type of drawing required."},{"content":"Remarks","pos":[22055,22062]},{"content":"The <ph id=\"ph1\">`itemAction`</ph> member of the <ph id=\"ph2\">`DRAWITEMSTRUCT`</ph> structure defines the drawing action that is to be performed.","pos":[22066,22175],"source":"The `itemAction` member of the `DRAWITEMSTRUCT` structure defines the drawing action that is to be performed."},{"content":"Override this member function to implement drawing for an owner-draw <ph id=\"ph1\">`CMenu`</ph> object.","pos":[22176,22260],"source":" Override this member function to implement drawing for an owner-draw `CMenu` object."},{"content":"The application should restore all graphics device interface (GDI) objects selected for the display context supplied in <ph id=\"ph1\">`lpDrawItemStruct`</ph> before the termination of this member function.","pos":[22261,22447],"source":" The application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct` before the termination of this member function."},{"pos":[22454,22581],"content":"See <bpt id=\"p1\">[</bpt>CWnd::OnDrawItem<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__ondrawitem)</ept> for a description of the <ph id=\"ph1\">`DRAWITEMSTRUCT`</ph> structure.","source":"See [CWnd::OnDrawItem](../../mfc/reference/cwnd-class.md#cwnd__ondrawitem) for a description of the `DRAWITEMSTRUCT` structure."},{"content":"Example","pos":[22591,22598]},{"pos":[22602,22684],"content":"The following code is from the MFC <bpt id=\"p1\">[</bpt>CTRLTEST<ept id=\"p1\">](../../visual-cpp-samples.md)</ept> sample:","source":"The following code is from the MFC [CTRLTEST](../../visual-cpp-samples.md) sample:"},{"pos":[22702,22721],"content":"NVC_MFCWindowing#24"},{"pos":[22826,22847],"content":"CMenu::EnableMenuItem"},{"content":"Enables, disables, or dims a menu item.","pos":[22851,22890]},{"content":"Parameters","pos":[22981,22991]},{"content":"nIDEnableItem","pos":[22996,23009]},{"content":"Specifies the menu item to be enabled, as determined by <ph id=\"ph1\">`nEnable`</ph>.","pos":[23014,23080],"source":" Specifies the menu item to be enabled, as determined by `nEnable`."},{"content":"This parameter can specify pop-up menu items as well as standard menu items.","pos":[23081,23157]},{"content":"Specifies the action to take.","pos":[23177,23206]},{"content":"It can be a combination of <bpt id=\"p1\">**</bpt>MF_DISABLED<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`MF_ENABLED`</ph>, or <bpt id=\"p2\">**</bpt>MF_GRAYED<ept id=\"p2\">**</ept>, with <bpt id=\"p3\">**</bpt>MF_BYCOMMAND<ept id=\"p3\">**</ept> or <bpt id=\"p4\">**</bpt>MF_BYPOSITION<ept id=\"p4\">**</ept>.","pos":[23207,23326],"source":" It can be a combination of **MF_DISABLED**, `MF_ENABLED`, or **MF_GRAYED**, with **MF_BYCOMMAND** or **MF_BYPOSITION**."},{"content":"These values can be combined by using the bitwise OR operator.","pos":[23327,23389]},{"content":"These values have the following meanings:","pos":[23390,23431]},{"content":"<bpt id=\"p1\">**</bpt>MF_BYCOMMAND<ept id=\"p1\">**</ept> Specifies that the parameter gives the command ID of the existing menu item.","pos":[23439,23532],"source":"**MF_BYCOMMAND** Specifies that the parameter gives the command ID of the existing menu item."},{"content":"This is the default.","pos":[23533,23553]},{"content":"<bpt id=\"p1\">**</bpt>MF_BYPOSITION<ept id=\"p1\">**</ept> Specifies that the parameter gives the position of the existing menu item.","pos":[23561,23653],"source":"**MF_BYPOSITION** Specifies that the parameter gives the position of the existing menu item."},{"content":"The first item is at position 0.","pos":[23654,23686]},{"pos":[23694,23783],"content":"<bpt id=\"p1\">**</bpt>MF_DISABLED<ept id=\"p1\">**</ept> Disables the menu item so that it cannot be selected but does not dim it.","source":"**MF_DISABLED** Disables the menu item so that it cannot be selected but does not dim it."},{"pos":[23804,23891],"content":"Enables the menu item so that it can be selected and restores it from its dimmed state."},{"pos":[23899,23978],"content":"<bpt id=\"p1\">**</bpt>MF_GRAYED<ept id=\"p1\">**</ept> Disables the menu item so that it cannot be selected and dims it.","source":"**MF_GRAYED** Disables the menu item so that it cannot be selected and dims it."},{"content":"Return Value","pos":[23988,24000]},{"pos":[24004,24089],"content":"Previous state ( <bpt id=\"p1\">**</bpt>MF_DISABLED<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`MF_ENABLED`</ph>, or <bpt id=\"p2\">**</bpt>MF_GRAYED<ept id=\"p2\">**</ept>) or –1 if not valid.","source":"Previous state ( **MF_DISABLED**, `MF_ENABLED`, or **MF_GRAYED**) or –1 if not valid."},{"content":"Remarks","pos":[24099,24106]},{"pos":[24110,24351],"content":"The <bpt id=\"p1\">[</bpt>CreateMenu<ept id=\"p1\">](#cmenu__createmenu)</ept>, <bpt id=\"p2\">[</bpt>InsertMenu<ept id=\"p2\">](#cmenu__insertmenu)</ept>, <bpt id=\"p3\">[</bpt>ModifyMenu<ept id=\"p3\">](#cmenu__modifymenu)</ept>, and <bpt id=\"p4\">[</bpt>LoadMenuIndirect<ept id=\"p4\">](#cmenu__loadmenuindirect)</ept> member functions can also set the state (enabled, disabled, or dimmed) of a menu item.","source":"The [CreateMenu](#cmenu__createmenu), [InsertMenu](#cmenu__insertmenu), [ModifyMenu](#cmenu__modifymenu), and [LoadMenuIndirect](#cmenu__loadmenuindirect) member functions can also set the state (enabled, disabled, or dimmed) of a menu item."},{"content":"Using the <bpt id=\"p1\">**</bpt>MF_BYPOSITION<ept id=\"p1\">**</ept> value requires an application to use the correct <ph id=\"ph1\">`CMenu`</ph>.","pos":[24358,24443],"source":"Using the **MF_BYPOSITION** value requires an application to use the correct `CMenu`."},{"content":"If the <ph id=\"ph1\">`CMenu`</ph> of the menu bar is used, a top-level menu item (an item in the menu bar) is affected.","pos":[24444,24544],"source":" If the `CMenu` of the menu bar is used, a top-level menu item (an item in the menu bar) is affected."},{"content":"To set the state of an item in a pop-up or nested pop-up menu by position, an application must specify the <ph id=\"ph1\">`CMenu`</ph> of the pop-up menu.","pos":[24545,24679],"source":" To set the state of an item in a pop-up or nested pop-up menu by position, an application must specify the `CMenu` of the pop-up menu."},{"pos":[24686,24917],"content":"When an application specifies the <bpt id=\"p1\">**</bpt>MF_BYCOMMAND<ept id=\"p1\">**</ept> flag, Windows checks all pop-up menu items that are subordinate to the <ph id=\"ph1\">`CMenu`</ph>; therefore, unless duplicate menu items are present, using the <ph id=\"ph2\">`CMenu`</ph> of the menu bar is sufficient.","source":"When an application specifies the **MF_BYCOMMAND** flag, Windows checks all pop-up menu items that are subordinate to the `CMenu`; therefore, unless duplicate menu items are present, using the `CMenu` of the menu bar is sufficient."},{"content":"Example","pos":[24927,24934]},{"pos":[24949,24968],"content":"NVC_MFCWindowing#25"},{"pos":[25069,25086],"content":"CMenu::FromHandle"},{"pos":[25090,25161],"content":"Returns a pointer to a <ph id=\"ph1\">`CMenu`</ph> object given a Windows handle to a menu.","source":"Returns a pointer to a `CMenu` object given a Windows handle to a menu."},{"content":"Parameters","pos":[25232,25242]},{"content":"A Windows handle to a menu.","pos":[25257,25284]},{"content":"Return Value","pos":[25294,25306]},{"pos":[25310,25368],"content":"A pointer to a <ph id=\"ph1\">`CMenu`</ph> that may be temporary or permanent.","source":"A pointer to a `CMenu` that may be temporary or permanent."},{"content":"Remarks","pos":[25378,25385]},{"pos":[25389,25512],"content":"If a <ph id=\"ph1\">`CMenu`</ph> object is not already attached to the Windows menu object, a temporary <ph id=\"ph2\">`CMenu`</ph> object is created and attached.","source":"If a `CMenu` object is not already attached to the Windows menu object, a temporary `CMenu` object is created and attached."},{"pos":[25519,25680],"content":"This temporary <ph id=\"ph1\">`CMenu`</ph> object is only valid until the next time the application has idle time in its event loop, at which time all temporary objects are deleted.","source":"This temporary `CMenu` object is only valid until the next time the application has idle time in its event loop, at which time all temporary objects are deleted."},{"content":"Example","pos":[25690,25697]},{"pos":[25702,25762],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::CreateMenu<ept id=\"p1\">](#cmenu__createmenu)</ept>.","source":"See the example for [CMenu::CreateMenu](#cmenu__createmenu)."},{"pos":[25810,25831],"content":"CMenu::GetDefaultItem"},{"content":"Determines the default menu item on the specified menu.","pos":[25835,25890]},{"content":"Parameters","pos":[25984,25994]},{"content":"gmdiFlags","pos":[25999,26008]},{"content":"Value specifying how the function searches for menu items.","pos":[26013,26071]},{"content":"This parameter can be none, one, or a combination of the following values:","pos":[26072,26146]},{"content":"Value","pos":[26153,26158]},{"content":"Meaning","pos":[26159,26166]},{"content":"GMDI_GOINTOPOPUPS","pos":[26203,26220]},{"content":"Specifies that, if the default item is one that opens a submenu, the function is to search in the corresponding submenu recursively.","pos":[26223,26355]},{"content":"If the submenu has no default item, the return value identifies the item that opens the submenu.","pos":[26356,26452]},{"content":"By default, the function returns the first default item on the specified menu, regardless of whether it is an item that opens a submenu.","pos":[26465,26601]},{"content":"GMDI_USEDISABLED","pos":[26608,26624]},{"content":"Specifies that the function is to return a default item, even if it is disabled.","pos":[26627,26707]},{"content":"By default, the function skips disabled or grayed items.","pos":[26720,26776]},{"content":"Value specifying whether to retrieve the menu item's identifier or its position.","pos":[26796,26876]},{"content":"If this parameter is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, the identifier is returned.","pos":[26877,26936],"source":" If this parameter is **FALSE**, the identifier is returned."},{"content":"Otherwise, the position is returned.","pos":[26937,26973]},{"content":"Return Value","pos":[26983,26995]},{"content":"If the function succeeds, the return value is the identifier or position of the menu item.","pos":[26999,27089]},{"content":"If the function fails, the return value is - 1.","pos":[27090,27137]},{"content":"Remarks","pos":[27147,27154]},{"pos":[27158,27379],"content":"This member function implements the behavior of the Win32 function <bpt id=\"p1\">[</bpt>GetMenuDefaultItem<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647976)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 function [GetMenuDefaultItem](http://msdn.microsoft.com/library/windows/desktop/ms647976), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[27389,27396]},{"pos":[27401,27461],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::InsertMenu<ept id=\"p1\">](#cmenu__insertmenu)</ept>.","source":"See the example for [CMenu::InsertMenu](#cmenu__insertmenu)."},{"pos":[27515,27542],"content":"CMenu::GetMenuContextHelpId"},{"pos":[27546,27600],"content":"Retrieves the context help ID associated with <ph id=\"ph1\">`CMenu`</ph>.","source":"Retrieves the context help ID associated with `CMenu`."},{"content":"Return Value","pos":[27664,27676]},{"pos":[27680,27764],"content":"The context help ID currently associated with <ph id=\"ph1\">`CMenu`</ph> if it has one; zero otherwise.","source":"The context help ID currently associated with `CMenu` if it has one; zero otherwise."},{"content":"Example","pos":[27774,27781]},{"pos":[27786,27846],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::InsertMenu<ept id=\"p1\">](#cmenu__insertmenu)</ept>.","source":"See the example for [CMenu::InsertMenu](#cmenu__insertmenu)."},{"pos":[27891,27909],"content":"CMenu::GetMenuInfo"},{"content":"Retrieves information for a menu.","pos":[27913,27946]},{"content":"Parameters","pos":[28016,28026]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>MENUINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647575)</ept> structure containing information for the menu.","pos":[28041,28173],"source":" A pointer to a [MENUINFO](http://msdn.microsoft.com/library/windows/desktop/ms647575) structure containing information for the menu."},{"content":"Return Value","pos":[28183,28195]},{"content":"If the function succeeds, the return value is nonzero; otherwise, the return value is zero.","pos":[28199,28290]},{"content":"Remarks","pos":[28300,28307]},{"content":"Call this function to retrieve information about the menu.","pos":[28311,28369]},{"pos":[28419,28442],"content":"CMenu::GetMenuItemCount"},{"content":"Determines the number of items in a pop-up or top-level menu.","pos":[28446,28507]},{"content":"Return Value","pos":[28566,28578]},{"content":"The number of items in the menu if the function is successful; otherwise –1.","pos":[28582,28658]},{"content":"Example","pos":[28668,28675]},{"pos":[28680,28765],"content":"See the example for <bpt id=\"p1\">[</bpt>CWnd::GetMenu<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__getmenu)</ept>.","source":"See the example for [CWnd::GetMenu](../../mfc/reference/cwnd-class.md#cwnd__getmenu)."},{"pos":[28812,28832],"content":"CMenu::GetMenuItemID"},{"pos":[28836,28927],"content":"Obtains the menu-item identifier for a menu item located at the position defined by <ph id=\"ph1\">`nPos`</ph>.","source":"Obtains the menu-item identifier for a menu item located at the position defined by `nPos`."},{"content":"Parameters","pos":[28991,29001]},{"content":"Specifies the position (zero-based) of the menu item whose ID is being retrieved.","pos":[29015,29096]},{"content":"Return Value","pos":[29106,29118]},{"content":"The item ID for the specified item in a pop-up menu if the function is successful.","pos":[29122,29204]},{"content":"If the specified item is a pop-up menu (as opposed to an item within the pop-up menu), the return value is –1.","pos":[29205,29315]},{"content":"If <ph id=\"ph1\">`nPos`</ph> corresponds to a <bpt id=\"p1\">**</bpt>SEPARATOR<ept id=\"p1\">**</ept> menu item, the return value is 0.","pos":[29316,29390],"source":" If `nPos` corresponds to a **SEPARATOR** menu item, the return value is 0."},{"content":"Example","pos":[29400,29407]},{"pos":[29412,29472],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::InsertMenu<ept id=\"p1\">](#cmenu__insertmenu)</ept>.","source":"See the example for [CMenu::InsertMenu](#cmenu__insertmenu)."},{"pos":[29521,29543],"content":"CMenu::GetMenuItemInfo"},{"content":"Retrieves information about a menu item.","pos":[29547,29587]},{"content":"Parameters","pos":[29715,29725]},{"content":"Identifier or position of the menu item to get information about.","pos":[29740,29805]},{"content":"The meaning of this parameter depends on the value of <ph id=\"ph1\">`ByPos`</ph>.","pos":[29806,29868],"source":" The meaning of this parameter depends on the value of `ByPos`."},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>MENUITEMINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647578)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>, that contains information about the menu.","pos":[29895,30100],"source":" A pointer to a [MENUITEMINFO](http://msdn.microsoft.com/library/windows/desktop/ms647578), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)], that contains information about the menu."},{"content":"Value specifying the meaning of <ph id=\"ph1\">`nIDItem`</ph>.","pos":[30119,30161],"source":" Value specifying the meaning of `nIDItem`."},{"content":"By default, <ph id=\"ph1\">`ByPos`</ph> is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, which indicates that uItem is a menu item identifier.","pos":[30162,30249],"source":" By default, `ByPos` is **FALSE**, which indicates that uItem is a menu item identifier."},{"content":"If <ph id=\"ph1\">`ByPos`</ph> is not set to <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, it indicates a menu item position.","pos":[30250,30320],"source":" If `ByPos` is not set to **FALSE**, it indicates a menu item position."},{"content":"Return Value","pos":[30330,30342]},{"content":"If the function succeeds, the return value is nonzero.","pos":[30346,30400]},{"content":"If the function fails, the return value is zero.","pos":[30401,30449]},{"content":"To get extended error information, use the Win32 function <bpt id=\"p1\">[</bpt>GetLastError<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[30450,30656],"source":" To get extended error information, use the Win32 function [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Remarks","pos":[30666,30673]},{"content":"This member function implements the behavior of the of the Win32 function <bpt id=\"p1\">[</bpt>GetMenuItemInfo<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647980)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[30677,30902],"source":"This member function implements the behavior of the of the Win32 function [GetMenuItemInfo](http://msdn.microsoft.com/library/windows/desktop/ms647980), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Note that in the MFC implementation of <ph id=\"ph1\">`GetMenuItemInfo`</ph>, you do not use a handle to a menu.","pos":[30903,30995],"source":" Note that in the MFC implementation of `GetMenuItemInfo`, you do not use a handle to a menu."},{"content":"Example","pos":[31005,31012]},{"pos":[31027,31046],"content":"NVC_MFCWindowing#26"},{"pos":[31149,31168],"content":"CMenu::GetMenuState"},{"content":"Returns the status of the specified menu item or the number of items in a pop-up menu.","pos":[31172,31258]},{"content":"Parameters","pos":[31345,31355]},{"content":"Specifies the menu item ID, as determined by <ph id=\"ph1\">`nFlags`</ph>.","pos":[31368,31422],"source":" Specifies the menu item ID, as determined by `nFlags`."},{"content":"Specifies the nature of <ph id=\"ph1\">`nID`</ph>.","pos":[31441,31471],"source":" Specifies the nature of `nID`."},{"content":"It can be one of the following values:","pos":[31472,31510]},{"content":"<bpt id=\"p1\">**</bpt>MF_BYCOMMAND<ept id=\"p1\">**</ept> Specifies that the parameter gives the command ID of the existing menu item.","pos":[31518,31611],"source":"**MF_BYCOMMAND** Specifies that the parameter gives the command ID of the existing menu item."},{"content":"This is the default.","pos":[31612,31632]},{"content":"<bpt id=\"p1\">**</bpt>MF_BYPOSITION<ept id=\"p1\">**</ept> Specifies that the parameter gives the position of the existing menu item.","pos":[31640,31732],"source":"**MF_BYPOSITION** Specifies that the parameter gives the position of the existing menu item."},{"content":"The first item is at position 0.","pos":[31733,31765]},{"content":"Return Value","pos":[31775,31787]},{"content":"The value 0xFFFFFFFF if the specified item does not exist.","pos":[31791,31849]},{"content":"If <bpt id=\"p1\">*</bpt>nId<ept id=\"p1\">*</ept> identifies a pop-up menu, the high-order byte contains the number of items in the pop-up menu and the low-order byte contains the menu flags associated with the pop-up menu.","pos":[31850,32032],"source":" If *nId* identifies a pop-up menu, the high-order byte contains the number of items in the pop-up menu and the low-order byte contains the menu flags associated with the pop-up menu."},{"content":"Otherwise the return value is a mask (Boolean OR) of the values from the following list (this mask describes the status of the menu item that <bpt id=\"p1\">*</bpt>nId<ept id=\"p1\">*</ept> identifies):","pos":[32033,32193],"source":" Otherwise the return value is a mask (Boolean OR) of the values from the following list (this mask describes the status of the menu item that *nId* identifies):"},{"content":"<bpt id=\"p1\">**</bpt>MF_CHECKED<ept id=\"p1\">**</ept> Acts as a toggle with <bpt id=\"p2\">**</bpt>MF_UNCHECKED<ept id=\"p2\">**</ept> to place the default check mark next to the item.","pos":[32201,32304],"source":"**MF_CHECKED** Acts as a toggle with **MF_UNCHECKED** to place the default check mark next to the item."},{"content":"When the application supplies check-mark bitmaps (see the <ph id=\"ph1\">`SetMenuItemBitmaps`</ph> member function), the \"check mark on\" bitmap is displayed.","pos":[32305,32442],"source":" When the application supplies check-mark bitmaps (see the `SetMenuItemBitmaps` member function), the \"check mark on\" bitmap is displayed."},{"pos":[32450,32539],"content":"<bpt id=\"p1\">**</bpt>MF_DISABLED<ept id=\"p1\">**</ept> Disables the menu item so that it cannot be selected but does not dim it.","source":"**MF_DISABLED** Disables the menu item so that it cannot be selected but does not dim it."},{"content":"Enables the menu item so that it can be selected and restores it from its dimmed state.","pos":[32560,32647]},{"content":"Note that the value of this constant is 0; an application should not test against 0 for failure when using this value.","pos":[32648,32766]},{"pos":[32774,32853],"content":"<bpt id=\"p1\">**</bpt>MF_GRAYED<ept id=\"p1\">**</ept> Disables the menu item so that it cannot be selected and dims it.","source":"**MF_GRAYED** Disables the menu item so that it cannot be selected and dims it."},{"content":"<bpt id=\"p1\">**</bpt>MF_MENUBARBREAK<ept id=\"p1\">**</ept> Places the item on a new line in static menus or in a new column in pop-up menus.","pos":[32861,32962],"source":"**MF_MENUBARBREAK** Places the item on a new line in static menus or in a new column in pop-up menus."},{"content":"The new pop-up menu column will be separated from the old column by a vertical dividing line.","pos":[32963,33056]},{"content":"<bpt id=\"p1\">**</bpt>MF_MENUBREAK<ept id=\"p1\">**</ept> Places the item on a new line in static menus or in a new column in pop-up menus.","pos":[33064,33162],"source":"**MF_MENUBREAK** Places the item on a new line in static menus or in a new column in pop-up menus."},{"content":"No dividing line is placed between the columns.","pos":[33163,33210]},{"content":"<bpt id=\"p1\">**</bpt>MF_SEPARATOR<ept id=\"p1\">**</ept> Draws a horizontal dividing line.","pos":[33218,33268],"source":"**MF_SEPARATOR** Draws a horizontal dividing line."},{"content":"Can only be used in a pop-up menu.","pos":[33269,33303]},{"content":"This line cannot be dimmed, disabled, or highlighted.","pos":[33304,33357]},{"content":"Other parameters are ignored.","pos":[33358,33387]},{"content":"<bpt id=\"p1\">**</bpt>MF_UNCHECKED<ept id=\"p1\">**</ept> Acts as a toggle with <bpt id=\"p2\">**</bpt>MF_CHECKED<ept id=\"p2\">**</ept> to remove a check mark next to the item.","pos":[33395,33489],"source":"**MF_UNCHECKED** Acts as a toggle with **MF_CHECKED** to remove a check mark next to the item."},{"content":"When the application supplies check-mark bitmaps (see the <ph id=\"ph1\">`SetMenuItemBitmaps`</ph> member function), the \"check mark off\" bitmap is displayed.","pos":[33490,33628],"source":" When the application supplies check-mark bitmaps (see the `SetMenuItemBitmaps` member function), the \"check mark off\" bitmap is displayed."},{"content":"Note that the value of this constant is 0; an application should not test against 0 for failure when using this value.","pos":[33629,33747]},{"content":"Example","pos":[33757,33764]},{"pos":[33779,33798],"content":"NVC_MFCWindowing#27"},{"pos":[33902,33922],"content":"CMenu::GetMenuString"},{"content":"Copies the label of the specified menu item to the specified buffer.","pos":[33926,33994]},{"content":"Parameters","pos":[34221,34231]},{"content":"Specifies the integer identifier of the menu item or the offset of the menu item in the menu, depending on the value of <ph id=\"ph1\">`nFlags`</ph>.","pos":[34248,34377],"source":" Specifies the integer identifier of the menu item or the offset of the menu item in the menu, depending on the value of `nFlags`."},{"content":"Points to the buffer that is to receive the label.","pos":[34398,34448]},{"content":"A reference to a <ph id=\"ph1\">`CString`</ph> object that is to receive the copied menu string.","pos":[34468,34544],"source":" A reference to a `CString` object that is to receive the copied menu string."},{"content":"Specifies the maximum length (in characters) of the label to be copied.","pos":[34566,34637]},{"content":"If the label is longer than the maximum specified in <ph id=\"ph1\">`nMaxCount`</ph>, the extra characters are truncated.","pos":[34638,34739],"source":" If the label is longer than the maximum specified in `nMaxCount`, the extra characters are truncated."},{"content":"Specifies the interpretation of the <ph id=\"ph1\">`nIDItem`</ph> parameter.","pos":[34758,34814],"source":" Specifies the interpretation of the `nIDItem` parameter."},{"content":"It can be one of the following values:","pos":[34815,34853]},{"content":"nFlags","pos":[34860,34866]},{"content":"Interpretation of nIDItem","pos":[34867,34892]},{"content":"MF_BYCOMMAND","pos":[34948,34960]},{"content":"Specifies that the parameter gives the command ID of the existing menu item.","pos":[34963,35039]},{"content":"This is the default if neither <bpt id=\"p1\">**</bpt>MF_BYCOMMAND<ept id=\"p1\">**</ept> nor <bpt id=\"p2\">**</bpt>MF_BYPOSITION<ept id=\"p2\">**</ept> is set.","pos":[35040,35117],"source":" This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set."},{"content":"MF_BYPOSITION","pos":[35124,35137]},{"content":"Specifies that the parameter gives the position of the existing menu item.","pos":[35140,35214]},{"content":"The first item is at position 0.","pos":[35215,35247]},{"content":"Return Value","pos":[35258,35270]},{"content":"Specifies the actual number of characters copied to the buffer, not including the null terminator.","pos":[35274,35372]},{"content":"Remarks","pos":[35382,35389]},{"pos":[35393,35542],"content":"The <ph id=\"ph1\">`nMaxCount`</ph> parameter should be one larger than the number of characters in the label to accommodate the null character that terminates a string.","source":"The `nMaxCount` parameter should be one larger than the number of characters in the label to accommodate the null character that terminates a string."},{"content":"Example","pos":[35552,35559]},{"pos":[35564,35624],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::InsertMenu<ept id=\"p1\">](#cmenu__insertmenu)</ept>.","source":"See the example for [CMenu::InsertMenu](#cmenu__insertmenu)."},{"pos":[35670,35689],"content":"CMenu::GetSafeHmenu"},{"pos":[35693,35774],"content":"Returns the <ph id=\"ph1\">`HMENU`</ph> wrapped by this <ph id=\"ph2\">`CMenu`</ph> object, or a <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept><ph id=\"ph3\">`CMenu`</ph> pointer.","source":"Returns the `HMENU` wrapped by this `CMenu` object, or a **NULL**`CMenu` pointer."},{"content":"Example","pos":[35830,35837]},{"pos":[35842,35898],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::LoadMenu<ept id=\"p1\">](#cmenu__loadmenu)</ept>.","source":"See the example for [CMenu::LoadMenu](#cmenu__loadmenu)."},{"pos":[35942,35959],"content":"CMenu::GetSubMenu"},{"pos":[35963,36009],"content":"Retrieves the <ph id=\"ph1\">`CMenu`</ph> object of a pop-up menu.","source":"Retrieves the `CMenu` object of a pop-up menu."},{"content":"Parameters","pos":[36072,36082]},{"content":"Specifies the position of the pop-up menu contained in the menu.","pos":[36096,36160]},{"content":"Position values start at 0 for the first menu item.","pos":[36161,36212]},{"content":"The pop-up menu's identifier cannot be used in this function.","pos":[36213,36274]},{"content":"Return Value","pos":[36284,36296]},{"content":"A pointer to a <ph id=\"ph1\">`CMenu`</ph> object whose <ph id=\"ph2\">`m_hMenu`</ph> member contains a handle to the pop-up menu if a pop-up menu exists at the given position; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[36300,36456],"source":"A pointer to a `CMenu` object whose `m_hMenu` member contains a handle to the pop-up menu if a pop-up menu exists at the given position; otherwise **NULL**."},{"content":"If a <ph id=\"ph1\">`CMenu`</ph> object does not exist, then a temporary one is created.","pos":[36457,36525],"source":" If a `CMenu` object does not exist, then a temporary one is created."},{"content":"The <ph id=\"ph1\">`CMenu`</ph> pointer returned should not be stored.","pos":[36526,36576],"source":" The `CMenu` pointer returned should not be stored."},{"content":"Example","pos":[36586,36593]},{"pos":[36598,36666],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::TrackPopupMenu<ept id=\"p1\">](#cmenu__trackpopupmenu)</ept>.","source":"See the example for [CMenu::TrackPopupMenu](#cmenu__trackpopupmenu)."},{"pos":[36710,36727],"content":"CMenu::InsertMenu"},{"pos":[36731,36832],"content":"Inserts a new menu item at the position specified by <ph id=\"ph1\">`nPosition`</ph> and moves other items down the menu.","source":"Inserts a new menu item at the position specified by `nPosition` and moves other items down the menu."},{"content":"Parameters","pos":[37093,37103]},{"content":"Specifies the menu item before which the new menu item is to be inserted.","pos":[37122,37195]},{"content":"The <ph id=\"ph1\">`nFlags`</ph> parameter can be used to interpret <ph id=\"ph2\">`nPosition`</ph> in the following ways:","pos":[37196,37278],"source":" The `nFlags` parameter can be used to interpret `nPosition` in the following ways:"},{"content":"nFlags","pos":[37285,37291]},{"content":"Interpretation of nPosition","pos":[37292,37319]},{"content":"MF_BYCOMMAND","pos":[37377,37389]},{"content":"Specifies that the parameter gives the command ID of the existing menu item.","pos":[37392,37468]},{"content":"This is the default if neither <bpt id=\"p1\">**</bpt>MF_BYCOMMAND<ept id=\"p1\">**</ept> nor <bpt id=\"p2\">**</bpt>MF_BYPOSITION<ept id=\"p2\">**</ept> is set.","pos":[37469,37546],"source":" This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set."},{"content":"MF_BYPOSITION","pos":[37553,37566]},{"content":"Specifies that the parameter gives the position of the existing menu item.","pos":[37569,37643]},{"content":"The first item is at position 0.","pos":[37644,37676]},{"content":"If <ph id=\"ph1\">`nPosition`</ph> is –1, the new menu item is appended to the end of the menu.","pos":[37677,37752],"source":" If `nPosition` is –1, the new menu item is appended to the end of the menu."},{"content":"Specifies how <ph id=\"ph1\">`nPosition`</ph> is interpreted and specifies information about the state of the new menu item when it is added to the menu.","pos":[37772,37905],"source":" Specifies how `nPosition` is interpreted and specifies information about the state of the new menu item when it is added to the menu."},{"content":"For a list of the flags that may be set, see the <bpt id=\"p1\">[</bpt>AppendMenu<ept id=\"p1\">](#cmenu__appendmenu)</ept> member function.","pos":[37906,38004],"source":" For a list of the flags that may be set, see the [AppendMenu](#cmenu__appendmenu) member function."},{"content":"To specify more than one value, use the bitwise OR operator to combine them with the <bpt id=\"p1\">**</bpt>MF_BYCOMMAND<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>MF_BYPOSITION<ept id=\"p2\">**</ept> flag.","pos":[38005,38133],"source":" To specify more than one value, use the bitwise OR operator to combine them with the **MF_BYCOMMAND** or **MF_BYPOSITION** flag."},{"content":"Specifies either the command ID of the new menu item or, if <ph id=\"ph1\">`nFlags`</ph> is set to <bpt id=\"p1\">**</bpt>MF_POPUP<ept id=\"p1\">**</ept>, the menu handle ( <ph id=\"ph2\">`HMENU`</ph>) of the pop-up menu.","pos":[38156,38295],"source":" Specifies either the command ID of the new menu item or, if `nFlags` is set to **MF_POPUP**, the menu handle ( `HMENU`) of the pop-up menu."},{"content":"The <ph id=\"ph1\">`nIDNewItem`</ph> parameter is ignored (not needed) if <ph id=\"ph2\">`nFlags`</ph> is set to <bpt id=\"p1\">**</bpt>MF_SEPARATOR<ept id=\"p1\">**</ept>.","pos":[38296,38386],"source":" The `nIDNewItem` parameter is ignored (not needed) if `nFlags` is set to **MF_SEPARATOR**."},{"content":"Specifies the content of the new menu item.","pos":[38410,38453]},{"content":"can be used to interpret <ph id=\"ph1\">`lpszNewItem`</ph> in the following ways:","pos":[38463,38524],"source":" can be used to interpret `lpszNewItem` in the following ways:"},{"content":"nFlags","pos":[38531,38537]},{"content":"Interpretation of lpszNewItem","pos":[38538,38567]},{"content":"Contains an application-supplied 32-bit value that the application can use to maintain additional data associated with the menu item.","pos":[38640,38773]},{"content":"This 32-bit value is available to the application in the <bpt id=\"p1\">**</bpt>itemData<ept id=\"p1\">**</ept> member of the structure supplied by the <bpt id=\"p2\">[</bpt>WM_MEASUREITEM<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775925)</ept> and <bpt id=\"p3\">[</bpt>WM_DRAWITEM<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/bb775923)</ept> messages.","pos":[38774,39048],"source":" This 32-bit value is available to the application in the **itemData** member of the structure supplied by the [WM_MEASUREITEM](http://msdn.microsoft.com/library/windows/desktop/bb775925) and [WM_DRAWITEM](http://msdn.microsoft.com/library/windows/desktop/bb775923) messages."},{"content":"These messages are sent when the menu item is initially displayed or is changed.","pos":[39049,39129]},{"content":"MF_STRING","pos":[39136,39145]},{"content":"Contains a long pointer to a null-terminated string.","pos":[39148,39200]},{"content":"This is the default interpretation.","pos":[39201,39236]},{"content":"MF_SEPARATOR","pos":[39243,39255]},{"pos":[39258,39310],"content":"The <ph id=\"ph1\">`lpszNewItem`</ph> parameter is ignored (not needed).","source":"The `lpszNewItem` parameter is ignored (not needed)."},{"content":"pBmp","pos":[39319,39323]},{"content":"Points to a <ph id=\"ph1\">`CBitmap`</ph> object that will be used as the menu item.","pos":[39328,39392],"source":" Points to a `CBitmap` object that will be used as the menu item."},{"content":"Return Value","pos":[39402,39414]},{"content":"Nonzero if the function is successful; otherwise 0.","pos":[39418,39469]},{"content":"Remarks","pos":[39479,39486]},{"pos":[39490,39575],"content":"The application can specify the state of the menu item by setting values in <ph id=\"ph1\">`nFlags`</ph>.","source":"The application can specify the state of the menu item by setting values in `nFlags`."},{"pos":[39582,39724],"content":"Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application should call <ph id=\"ph1\">`CWnd::DrawMenuBar`</ph>.","source":"Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application should call `CWnd::DrawMenuBar`."},{"content":"When <ph id=\"ph1\">`nIDNewItem`</ph> specifies a pop-up menu, it becomes part of the menu in which it is inserted.","pos":[39731,39826],"source":"When `nIDNewItem` specifies a pop-up menu, it becomes part of the menu in which it is inserted."},{"content":"If that menu is destroyed, the inserted menu will also be destroyed.","pos":[39827,39895]},{"content":"An inserted menu should be detached from a <ph id=\"ph1\">`CMenu`</ph> object to avoid conflict.","pos":[39896,39972],"source":" An inserted menu should be detached from a `CMenu` object to avoid conflict."},{"content":"If the active multiple document interface (MDI) child window is maximized and an application inserts a pop-up menu into the MDI application's menu by calling this function and specifying the <bpt id=\"p1\">**</bpt>MF_BYPOSITION<ept id=\"p1\">**</ept> flag, the menu is inserted one position farther left than expected.","pos":[39979,40255],"source":"If the active multiple document interface (MDI) child window is maximized and an application inserts a pop-up menu into the MDI application's menu by calling this function and specifying the **MF_BYPOSITION** flag, the menu is inserted one position farther left than expected."},{"content":"This happens because the Control menu of the active MDI child window is inserted into the first position of the MDI frame window's menu bar.","pos":[40256,40396]},{"content":"To position the menu properly, the application must add 1 to the position value that would otherwise be used.","pos":[40397,40506]},{"content":"An application can use the <bpt id=\"p1\">**</bpt>WM_MDIGETACTIVE<ept id=\"p1\">**</ept> message to determine whether the currently active child window is maximized.","pos":[40507,40630],"source":" An application can use the **WM_MDIGETACTIVE** message to determine whether the currently active child window is maximized."},{"content":"Example","pos":[40640,40647]},{"pos":[40662,40681],"content":"NVC_MFCWindowing#28"},{"pos":[40786,40807],"content":"CMenu::InsertMenuItem"},{"content":"Inserts a new menu item at the specified position in a menu.","pos":[40811,40871]},{"content":"Parameters","pos":[40998,41008]},{"content":"See description of <ph id=\"ph1\">`uItem`</ph> in <bpt id=\"p1\">[</bpt>InsertMenuItem<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647988)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[41023,41189],"source":" See description of `uItem` in [InsertMenuItem](http://msdn.microsoft.com/library/windows/desktop/ms647988) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"See description of <ph id=\"ph1\">`lpmii`</ph> in <bpt id=\"p1\">**</bpt>InsertMenuItem<ept id=\"p1\">**</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[41216,41324],"source":" See description of `lpmii` in **InsertMenuItem** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"See description of <ph id=\"ph1\">`fByPosition`</ph> in <bpt id=\"p1\">**</bpt>InsertMenuItem<ept id=\"p1\">**</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[41343,41457],"source":" See description of `fByPosition` in **InsertMenuItem** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Remarks","pos":[41467,41474]},{"pos":[41478,41645],"content":"This function wraps <bpt id=\"p1\">[</bpt>InsertMenuItem<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647988)</ept>, described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This function wraps [InsertMenuItem](http://msdn.microsoft.com/library/windows/desktop/ms647988), described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[41687,41702],"content":"CMenu::LoadMenu"},{"pos":[41706,41805],"content":"Loads a menu resource from the application's executable file and attaches it to the <ph id=\"ph1\">`CMenu`</ph> object.","source":"Loads a menu resource from the application's executable file and attaches it to the `CMenu` object."},{"content":"Parameters","pos":[41907,41917]},{"content":"Points to a null-terminated string that contains the name of the menu resource to load.","pos":[41943,42030]},{"content":"Specifies the menu ID of the menu resource to load.","pos":[42054,42105]},{"content":"Return Value","pos":[42115,42127]},{"content":"Nonzero if the menu resource was loaded successfully; otherwise 0.","pos":[42131,42197]},{"content":"Remarks","pos":[42207,42214]},{"content":"Before exiting, an application must free system resources associated with a menu if the menu is not assigned to a window.","pos":[42218,42339]},{"content":"An application frees a menu by calling the <bpt id=\"p1\">[</bpt>DestroyMenu<ept id=\"p1\">](#cmenu__destroymenu)</ept> member function.","pos":[42340,42434],"source":" An application frees a menu by calling the [DestroyMenu](#cmenu__destroymenu) member function."},{"content":"Example","pos":[42444,42451]},{"pos":[42466,42485],"content":"NVC_MFCWindowing#29"},{"pos":[42592,42615],"content":"CMenu::LoadMenuIndirect"},{"pos":[42619,42705],"content":"Loads a resource from a menu template in memory and attaches it to the <ph id=\"ph1\">`CMenu`</ph> object.","source":"Loads a resource from a menu template in memory and attaches it to the `CMenu` object."},{"content":"Parameters","pos":[42781,42791]},{"content":"lpMenuTemplate","pos":[42796,42810]},{"content":"Points to a menu template (which is a single <bpt id=\"p1\">[</bpt>MENUITEMTEMPLATEHEADER<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647583)</ept> structure and a collection of one or more <bpt id=\"p2\">[</bpt>MENUITEMTEMPLATE<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms647581)</ept> structures).","pos":[42815,43078],"source":" Points to a menu template (which is a single [MENUITEMTEMPLATEHEADER](http://msdn.microsoft.com/library/windows/desktop/ms647583) structure and a collection of one or more [MENUITEMTEMPLATE](http://msdn.microsoft.com/library/windows/desktop/ms647581) structures)."},{"content":"For more information on these two structures, see the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[43079,43185],"source":" For more information on these two structures, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Return Value","pos":[43195,43207]},{"content":"Nonzero if the menu resource was loaded successfully; otherwise 0.","pos":[43211,43277]},{"content":"Remarks","pos":[43287,43294]},{"pos":[43298,43523],"content":"A menu template is a header followed by a collection of one or more <bpt id=\"p1\">[</bpt>MENUITEMTEMPLATE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647581)</ept> structures, each of which may contain one or more menu items and pop-up menus.","source":"A menu template is a header followed by a collection of one or more [MENUITEMTEMPLATE](http://msdn.microsoft.com/library/windows/desktop/ms647581) structures, each of which may contain one or more menu items and pop-up menus."},{"content":"The version number should be 0.","pos":[43530,43561]},{"content":"The <bpt id=\"p1\">**</bpt>mtOption<ept id=\"p1\">**</ept> flags should include <bpt id=\"p2\">**</bpt>MF_END<ept id=\"p2\">**</ept> for the last item in a pop-up list and for the last item in the main list.","pos":[43568,43691],"source":"The **mtOption** flags should include **MF_END** for the last item in a pop-up list and for the last item in the main list."},{"content":"See the <ph id=\"ph1\">`AppendMenu`</ph> member function for other flags.","pos":[43692,43745],"source":" See the `AppendMenu` member function for other flags."},{"content":"The <bpt id=\"p1\">**</bpt>mtId<ept id=\"p1\">**</ept> member must be omitted from the <bpt id=\"p2\">**</bpt>MENUITEMTEMPLATE<ept id=\"p2\">**</ept> structure when <bpt id=\"p3\">**</bpt>MF_POPUP<ept id=\"p3\">**</ept> is specified in <bpt id=\"p4\">**</bpt>mtOption<ept id=\"p4\">**</ept>.","pos":[43746,43869],"source":" The **mtId** member must be omitted from the **MENUITEMTEMPLATE** structure when **MF_POPUP** is specified in **mtOption**."},{"pos":[43876,44038],"content":"The space allocated for the <bpt id=\"p1\">**</bpt>MENUITEMTEMPLATE<ept id=\"p1\">**</ept> structure must be large enough for <bpt id=\"p2\">**</bpt>mtString<ept id=\"p2\">**</ept> to contain the name of the menu item as a null-terminated string.","source":"The space allocated for the **MENUITEMTEMPLATE** structure must be large enough for **mtString** to contain the name of the menu item as a null-terminated string."},{"content":"Before exiting, an application must free system resources associated with a menu if the menu is not assigned to a window.","pos":[44045,44166]},{"content":"An application frees a menu by calling the <bpt id=\"p1\">[</bpt>DestroyMenu<ept id=\"p1\">](#cmenu__destroymenu)</ept> member function.","pos":[44167,44261],"source":" An application frees a menu by calling the [DestroyMenu](#cmenu__destroymenu) member function."},{"content":"Example","pos":[44271,44278]},{"pos":[44293,44312],"content":"NVC_MFCWindowing#30"},{"pos":[44411,44425],"content":"CMenu::m_hMenu"},{"pos":[44429,44509],"content":"Specifies the <ph id=\"ph1\">`HMENU`</ph> handle of the Windows menu attached to the <ph id=\"ph2\">`CMenu`</ph> object.","source":"Specifies the `HMENU` handle of the Windows menu attached to the `CMenu` object."},{"content":"Example","pos":[44551,44558]},{"pos":[44563,44619],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::LoadMenu<ept id=\"p1\">](#cmenu__loadmenu)</ept>.","source":"See the example for [CMenu::LoadMenu](#cmenu__loadmenu)."},{"pos":[44664,44682],"content":"CMenu::MeasureItem"},{"content":"Called by the framework when a menu with the owner-draw style is created.","pos":[44686,44759]},{"content":"Parameters","pos":[44851,44861]},{"content":"A pointer to a <ph id=\"ph1\">`MEASUREITEMSTRUCT`</ph> structure.","pos":[44890,44935],"source":" A pointer to a `MEASUREITEMSTRUCT` structure."},{"content":"Remarks","pos":[44945,44952]},{"content":"By default, this member function does nothing.","pos":[44956,45002]},{"content":"Override this member function and fill in the <ph id=\"ph1\">`MEASUREITEMSTRUCT`</ph> structure to inform Windows of the menu's dimensions.","pos":[45003,45122],"source":" Override this member function and fill in the `MEASUREITEMSTRUCT` structure to inform Windows of the menu's dimensions."},{"pos":[45129,45265],"content":"See <bpt id=\"p1\">[</bpt>CWnd::OnMeasureItem<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__onmeasureitem)</ept> for a description of the <ph id=\"ph1\">`MEASUREITEMSTRUCT`</ph> structure.","source":"See [CWnd::OnMeasureItem](../../mfc/reference/cwnd-class.md#cwnd__onmeasureitem) for a description of the `MEASUREITEMSTRUCT` structure."},{"content":"Example","pos":[45275,45282]},{"pos":[45286,45368],"content":"The following code is from the MFC <bpt id=\"p1\">[</bpt>CTRLTEST<ept id=\"p1\">](../../visual-cpp-samples.md)</ept> sample:","source":"The following code is from the MFC [CTRLTEST](../../visual-cpp-samples.md) sample:"},{"pos":[45386,45405],"content":"NVC_MFCWindowing#31"},{"pos":[45507,45524],"content":"CMenu::ModifyMenu"},{"pos":[45528,45599],"content":"Changes an existing menu item at the position specified by <ph id=\"ph1\">`nPosition`</ph>.","source":"Changes an existing menu item at the position specified by `nPosition`."},{"content":"Parameters","pos":[45860,45870]},{"content":"Specifies the menu item to be changed.","pos":[45889,45927]},{"content":"The <ph id=\"ph1\">`nFlags`</ph> parameter can be used to interpret <ph id=\"ph2\">`nPosition`</ph> in the following ways:","pos":[45928,46010],"source":" The `nFlags` parameter can be used to interpret `nPosition` in the following ways:"},{"content":"nFlags","pos":[46017,46023]},{"content":"Interpretation of nPosition","pos":[46024,46051]},{"content":"MF_BYCOMMAND","pos":[46109,46121]},{"content":"Specifies that the parameter gives the command ID of the existing menu item.","pos":[46124,46200]},{"content":"This is the default if neither <bpt id=\"p1\">**</bpt>MF_BYCOMMAND<ept id=\"p1\">**</ept> nor <bpt id=\"p2\">**</bpt>MF_BYPOSITION<ept id=\"p2\">**</ept> is set.","pos":[46201,46278],"source":" This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set."},{"content":"MF_BYPOSITION","pos":[46285,46298]},{"content":"Specifies that the parameter gives the position of the existing menu item.","pos":[46301,46375]},{"content":"The first item is at position 0.","pos":[46376,46408]},{"content":"Specifies how <ph id=\"ph1\">`nPosition`</ph> is interpreted and gives information about the changes to be made to the menu item.","pos":[46428,46537],"source":" Specifies how `nPosition` is interpreted and gives information about the changes to be made to the menu item."},{"content":"For a list of flags that may be set, see the <bpt id=\"p1\">[</bpt>AppendMenu<ept id=\"p1\">](#cmenu__appendmenu)</ept> member function.","pos":[46538,46632],"source":" For a list of flags that may be set, see the [AppendMenu](#cmenu__appendmenu) member function."},{"content":"Specifies either the command ID of the modified menu item or, if <ph id=\"ph1\">`nFlags`</ph> is set to <bpt id=\"p1\">**</bpt>MF_POPUP<ept id=\"p1\">**</ept>, the menu handle ( <ph id=\"ph2\">`HMENU`</ph>) of a pop-up menu.","pos":[46655,46797],"source":" Specifies either the command ID of the modified menu item or, if `nFlags` is set to **MF_POPUP**, the menu handle ( `HMENU`) of a pop-up menu."},{"content":"The <ph id=\"ph1\">`nIDNewItem`</ph> parameter is ignored (not needed) if <ph id=\"ph2\">`nFlags`</ph> is set to <bpt id=\"p1\">**</bpt>MF_SEPARATOR<ept id=\"p1\">**</ept>.","pos":[46798,46888],"source":" The `nIDNewItem` parameter is ignored (not needed) if `nFlags` is set to **MF_SEPARATOR**."},{"content":"Specifies the content of the new menu item.","pos":[46912,46955]},{"content":"The <ph id=\"ph1\">`nFlags`</ph> parameter can be used to interpret <ph id=\"ph2\">`lpszNewItem`</ph> in the following ways:","pos":[46956,47040],"source":" The `nFlags` parameter can be used to interpret `lpszNewItem` in the following ways:"},{"content":"nFlags","pos":[47047,47053]},{"content":"Interpretation of lpszNewItem","pos":[47054,47083]},{"content":"Contains an application-supplied 32-bit value that the application can use to maintain additional data associated with the menu item.","pos":[47156,47289]},{"content":"This 32-bit value is available to the application when it processes <bpt id=\"p1\">**</bpt>MF_MEASUREITEM<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>MF_DRAWITEM<ept id=\"p2\">**</ept>.","pos":[47290,47397],"source":" This 32-bit value is available to the application when it processes **MF_MEASUREITEM** and **MF_DRAWITEM**."},{"content":"MF_STRING","pos":[47404,47413]},{"pos":[47416,47486],"content":"Contains a long pointer to a null-terminated string or to a <ph id=\"ph1\">`CString`</ph>.","source":"Contains a long pointer to a null-terminated string or to a `CString`."},{"content":"MF_SEPARATOR","pos":[47493,47505]},{"pos":[47508,47560],"content":"The <ph id=\"ph1\">`lpszNewItem`</ph> parameter is ignored (not needed).","source":"The `lpszNewItem` parameter is ignored (not needed)."},{"content":"pBmp","pos":[47569,47573]},{"content":"Points to a <ph id=\"ph1\">`CBitmap`</ph> object that will be used as the menu item.","pos":[47578,47642],"source":" Points to a `CBitmap` object that will be used as the menu item."},{"content":"Return Value","pos":[47652,47664]},{"content":"Nonzero if the function is successful; otherwise 0.","pos":[47668,47719]},{"content":"Remarks","pos":[47729,47736]},{"content":"The application specifies the new state of the menu item by setting values in <ph id=\"ph1\">`nFlags`</ph>.","pos":[47740,47827],"source":"The application specifies the new state of the menu item by setting values in `nFlags`."},{"content":"If this function replaces a pop-up menu associated with the menu item, it destroys the old pop-up menu and frees the memory used by the pop-up menu.","pos":[47828,47976]},{"content":"When <ph id=\"ph1\">`nIDNewItem`</ph> specifies a pop-up menu, it becomes part of the menu in which it is inserted.","pos":[47983,48078],"source":"When `nIDNewItem` specifies a pop-up menu, it becomes part of the menu in which it is inserted."},{"content":"If that menu is destroyed, the inserted menu will also be destroyed.","pos":[48079,48147]},{"content":"An inserted menu should be detached from a <ph id=\"ph1\">`CMenu`</ph> object to avoid conflict.","pos":[48148,48224],"source":" An inserted menu should be detached from a `CMenu` object to avoid conflict."},{"content":"Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application should call <ph id=\"ph1\">`CWnd::DrawMenuBar`</ph>.","pos":[48231,48373],"source":"Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application should call `CWnd::DrawMenuBar`."},{"content":"To change the attributes of existing menu items, it is much faster to use the <ph id=\"ph1\">`CheckMenuItem`</ph> and <ph id=\"ph2\">`EnableMenuItem`</ph> member functions.","pos":[48374,48506],"source":" To change the attributes of existing menu items, it is much faster to use the `CheckMenuItem` and `EnableMenuItem` member functions."},{"content":"Example","pos":[48516,48523]},{"pos":[48528,48588],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::InsertMenu<ept id=\"p1\">](#cmenu__insertmenu)</ept>.","source":"See the example for [CMenu::InsertMenu](#cmenu__insertmenu)."},{"pos":[48636,48657],"content":"CMenu::operator HMENU"},{"pos":[48661,48724],"content":"Use this operator to retrieve the handle of the <ph id=\"ph1\">`CMenu`</ph> object.","source":"Use this operator to retrieve the handle of the `CMenu` object."},{"content":"Return Value","pos":[48776,48788]},{"pos":[48792,48861],"content":"If successful, the handle of the <ph id=\"ph1\">`CMenu`</ph> object; otherwise, <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"If successful, the handle of the `CMenu` object; otherwise, **NULL**."},{"content":"Remarks","pos":[48871,48878]},{"content":"You can use the handle to call Windows APIs directly.","pos":[48882,48935]},{"pos":[48982,49000],"content":"CMenu::operator !="},{"content":"Determines if two menus are logically not equal.","pos":[49004,49052]},{"content":"Parameters","pos":[49122,49132]},{"content":"A <ph id=\"ph1\">`CMenu`</ph> object for comparison.","pos":[49146,49178],"source":" A `CMenu` object for comparison."},{"content":"Remarks","pos":[49188,49195]},{"content":"Tests if a menu object on the left side is not equal to a menu object on the right side.","pos":[49199,49287]},{"pos":[49336,49354],"content":"CMenu::operator =="},{"content":"Determines if two menus are logically equal.","pos":[49358,49402]},{"content":"Parameters","pos":[49472,49482]},{"content":"A <ph id=\"ph1\">`CMenu`</ph> object for comparison.","pos":[49496,49528],"source":" A `CMenu` object for comparison."},{"content":"Remarks","pos":[49538,49545]},{"pos":[49549,49665],"content":"Tests if a menu object on the left side is equal (in terms of the <ph id=\"ph1\">`HMENU`</ph> value) to a menu object on the right side.","source":"Tests if a menu object on the left side is equal (in terms of the `HMENU` value) to a menu object on the right side."},{"pos":[49709,49726],"content":"CMenu::RemoveMenu"},{"content":"Deletes a menu item with an associated pop-up menu from the menu.","pos":[49730,49795]},{"content":"Parameters","pos":[49877,49887]},{"content":"Specifies the menu item to be removed.","pos":[49906,49944]},{"content":"The <ph id=\"ph1\">`nFlags`</ph> parameter can be used to interpret <ph id=\"ph2\">`nPosition`</ph> in the following ways:","pos":[49945,50027],"source":" The `nFlags` parameter can be used to interpret `nPosition` in the following ways:"},{"content":"nFlags","pos":[50034,50040]},{"content":"Interpretation of nPosition","pos":[50041,50068]},{"content":"MF_BYCOMMAND","pos":[50126,50138]},{"content":"Specifies that the parameter gives the command ID of the existing menu item.","pos":[50141,50217]},{"content":"This is the default if neither <bpt id=\"p1\">**</bpt>MF_BYCOMMAND<ept id=\"p1\">**</ept> nor <bpt id=\"p2\">**</bpt>MF_BYPOSITION<ept id=\"p2\">**</ept> is set.","pos":[50218,50295],"source":" This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set."},{"content":"MF_BYPOSITION","pos":[50302,50315]},{"content":"Specifies that the parameter gives the position of the existing menu item.","pos":[50318,50392]},{"content":"The first item is at position 0.","pos":[50393,50425]},{"content":"Specifies how <ph id=\"ph1\">`nPosition`</ph> is interpreted.","pos":[50445,50486],"source":" Specifies how `nPosition` is interpreted."},{"content":"Return Value","pos":[50496,50508]},{"content":"Nonzero if the function is successful; otherwise 0.","pos":[50512,50563]},{"content":"Remarks","pos":[50573,50580]},{"content":"It does not destroy the handle for a pop-up menu, so the menu can be reused.","pos":[50584,50660]},{"content":"Before calling this function, the application may call the <ph id=\"ph1\">`GetSubMenu`</ph> member function to retrieve the pop-up <ph id=\"ph2\">`CMenu`</ph> object for reuse.","pos":[50661,50797],"source":" Before calling this function, the application may call the `GetSubMenu` member function to retrieve the pop-up `CMenu` object for reuse."},{"pos":[50804,50944],"content":"Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application must call <ph id=\"ph1\">`CWnd::DrawMenuBar`</ph>.","source":"Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application must call `CWnd::DrawMenuBar`."},{"content":"Example","pos":[50954,50961]},{"pos":[50966,51026],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::InsertMenu<ept id=\"p1\">](#cmenu__insertmenu)</ept>.","source":"See the example for [CMenu::InsertMenu](#cmenu__insertmenu)."},{"pos":[51074,51095],"content":"CMenu::SetDefaultItem"},{"content":"Sets the default menu item for the specified menu.","pos":[51099,51149]},{"content":"Parameters","pos":[51239,51249]},{"content":"Identifier or position of the new default menu item or - 1 for no default item.","pos":[51264,51343]},{"content":"The meaning of this parameter depends on the value of <ph id=\"ph1\">`fByPos`</ph>.","pos":[51344,51407],"source":" The meaning of this parameter depends on the value of `fByPos`."},{"content":"Value specifying the meaning of <ph id=\"ph1\">`uItem`</ph>.","pos":[51426,51466],"source":" Value specifying the meaning of `uItem`."},{"content":"If this parameter is <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`uItem`</ph> is a menu item identifier.","pos":[51467,51533],"source":" If this parameter is **FALSE**, `uItem` is a menu item identifier."},{"content":"Otherwise, it is a menu item position.","pos":[51534,51572]},{"content":"Return Value","pos":[51582,51594]},{"content":"If the function succeeds, the return value is nonzero.","pos":[51598,51652]},{"content":"If the function fails, the return value is zero.","pos":[51653,51701]},{"content":"To get extended error information, use the Win32 function <bpt id=\"p1\">[</bpt>GetLastError<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[51702,51908],"source":" To get extended error information, use the Win32 function [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Remarks","pos":[51918,51925]},{"pos":[51929,52150],"content":"This member function implements the behavior of the Win32 function <bpt id=\"p1\">[</bpt>SetMenuDefaultItem<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647996)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function implements the behavior of the Win32 function [SetMenuDefaultItem](http://msdn.microsoft.com/library/windows/desktop/ms647996), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[52160,52167]},{"pos":[52172,52232],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::InsertMenu<ept id=\"p1\">](#cmenu__insertmenu)</ept>.","source":"See the example for [CMenu::InsertMenu](#cmenu__insertmenu)."},{"pos":[52286,52313],"content":"CMenu::SetMenuContextHelpId"},{"pos":[52317,52359],"content":"Associates a context help ID with <ph id=\"ph1\">`CMenu`</ph>.","source":"Associates a context help ID with `CMenu`."},{"content":"Parameters","pos":[52434,52444]},{"content":"Context help ID to associate with <ph id=\"ph1\">`CMenu`</ph>.","pos":[52469,52511],"source":" Context help ID to associate with `CMenu`."},{"content":"Return Value","pos":[52521,52533]},{"content":"Nonzero if successful; otherwise 0","pos":[52537,52571]},{"content":"Remarks","pos":[52581,52588]},{"content":"All items in the menu share this identifier — it is not possible to attach a help context identifier to the individual menu items.","pos":[52592,52722]},{"content":"Example","pos":[52732,52739]},{"pos":[52744,52804],"content":"See the example for <bpt id=\"p1\">[</bpt>CMenu::InsertMenu<ept id=\"p1\">](#cmenu__insertmenu)</ept>.","source":"See the example for [CMenu::InsertMenu](#cmenu__insertmenu)."},{"pos":[52849,52867],"content":"CMenu::SetMenuInfo"},{"content":"Sets information for a menu.","pos":[52871,52899]},{"content":"Parameters","pos":[52961,52971]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>MENUINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647575)</ept> structure containing information for the menu.","pos":[52986,53118],"source":" A pointer to a [MENUINFO](http://msdn.microsoft.com/library/windows/desktop/ms647575) structure containing information for the menu."},{"content":"Return Value","pos":[53128,53140]},{"content":"If the function succeeds, the return value is nonzero; otherwise, the return value is zero.","pos":[53144,53235]},{"content":"Remarks","pos":[53245,53252]},{"content":"Call this function to set specific information about the menu.","pos":[53256,53318]},{"pos":[53370,53395],"content":"CMenu::SetMenuItemBitmaps"},{"content":"Associates the specified bitmaps with a menu item.","pos":[53399,53449]},{"content":"Parameters","pos":[53609,53619]},{"content":"Specifies the menu item to be changed.","pos":[53638,53676]},{"content":"The <ph id=\"ph1\">`nFlags`</ph> parameter can be used to interpret <ph id=\"ph2\">`nPosition`</ph> in the following ways:","pos":[53677,53759],"source":" The `nFlags` parameter can be used to interpret `nPosition` in the following ways:"},{"content":"nFlags","pos":[53766,53772]},{"content":"Interpretation of nPosition","pos":[53773,53800]},{"content":"MF_BYCOMMAND","pos":[53858,53870]},{"content":"Specifies that the parameter gives the command ID of the existing menu item.","pos":[53873,53949]},{"content":"This is the default if neither <bpt id=\"p1\">**</bpt>MF_BYCOMMAND<ept id=\"p1\">**</ept> nor <bpt id=\"p2\">**</bpt>MF_BYPOSITION<ept id=\"p2\">**</ept> is set.","pos":[53950,54027],"source":" This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set."},{"content":"MF_BYPOSITION","pos":[54034,54047]},{"content":"Specifies that the parameter gives the position of the existing menu item.","pos":[54050,54124]},{"content":"The first item is at position 0.","pos":[54125,54157]},{"content":"Specifies how <ph id=\"ph1\">`nPosition`</ph> is interpreted.","pos":[54177,54218],"source":" Specifies how `nPosition` is interpreted."},{"content":"Specifies the bitmap to use for menu items that are not checked.","pos":[54244,54308]},{"content":"Specifies the bitmap to use for menu items that are checked.","pos":[54332,54392]},{"content":"Return Value","pos":[54402,54414]},{"content":"Nonzero if the function is successful; otherwise 0.","pos":[54418,54469]},{"content":"Remarks","pos":[54479,54486]},{"content":"Whether the menu item is checked or unchecked, Windows displays the appropriate bitmap next to the menu item.","pos":[54490,54599]},{"content":"If either <ph id=\"ph1\">`pBmpUnchecked`</ph> or <ph id=\"ph2\">`pBmpChecked`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, then Windows displays nothing next to the menu item for the corresponding attribute.","pos":[54606,54746],"source":"If either `pBmpUnchecked` or `pBmpChecked` is **NULL**, then Windows displays nothing next to the menu item for the corresponding attribute."},{"content":"If both parameters are <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, Windows uses the default check mark when the item is checked and removes the check mark when the item is unchecked.","pos":[54747,54895],"source":" If both parameters are **NULL**, Windows uses the default check mark when the item is checked and removes the check mark when the item is unchecked."},{"content":"When the menu is destroyed, these bitmaps are not destroyed; the application must destroy them.","pos":[54902,54997]},{"content":"The Windows <bpt id=\"p1\">**</bpt>GetMenuCheckMarkDimensions<ept id=\"p1\">**</ept> function retrieves the dimensions of the default check mark used for menu items.","pos":[55004,55127],"source":"The Windows **GetMenuCheckMarkDimensions** function retrieves the dimensions of the default check mark used for menu items."},{"content":"The application uses these values to determine the appropriate size for the bitmaps supplied with this function.","pos":[55128,55240]},{"content":"Get the size, create your bitmaps, and then set them.","pos":[55241,55294]},{"content":"Example","pos":[55304,55311]},{"pos":[55326,55345],"content":"NVC_MFCWindowing#32"},{"pos":[55421,55440],"content":"NVC_MFCWindowing#33"},{"pos":[55547,55569],"content":"CMenu::SetMenuItemInfo"},{"content":"Changes information about a menu item.","pos":[55573,55611]},{"content":"Parameters","pos":[55739,55749]},{"content":"See description of <ph id=\"ph1\">`uItem`</ph> in <bpt id=\"p1\">[</bpt>SetMenuItemInfo<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648001)</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[55764,55931],"source":" See description of `uItem` in [SetMenuItemInfo](http://msdn.microsoft.com/library/windows/desktop/ms648001) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"See description of <ph id=\"ph1\">`lpmii`</ph> in <bpt id=\"p1\">**</bpt>SetMenuItemInfo<ept id=\"p1\">**</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[55958,56067],"source":" See description of `lpmii` in **SetMenuItemInfo** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"See description of <ph id=\"ph1\">`fByPosition`</ph> in <bpt id=\"p1\">**</bpt>SetMenuItemInfo<ept id=\"p1\">**</ept> in the <ph id=\"ph2\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[56086,56201],"source":" See description of `fByPosition` in **SetMenuItemInfo** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Remarks","pos":[56211,56218]},{"pos":[56222,56390],"content":"This function wraps <bpt id=\"p1\">[</bpt>SetMenuItemInfo<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648001)</ept>, described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This function wraps [SetMenuItemInfo](http://msdn.microsoft.com/library/windows/desktop/ms648001), described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[56438,56459],"content":"CMenu::TrackPopupMenu"},{"content":"Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu.","pos":[56463,56574]},{"content":"Parameters","pos":[56708,56718]},{"content":"Specifies screen-position and mouse-position flags.","pos":[56734,56785]},{"content":"See <bpt id=\"p1\">[</bpt>TrackPopupMenu<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648002)</ept> for a list of available flags.","pos":[56786,56897],"source":" See [TrackPopupMenu](http://msdn.microsoft.com/library/windows/desktop/ms648002) for a list of available flags."},{"content":"x","pos":[56905,56906]},{"content":"Specifies the horizontal position in screen coordinates of the pop-up menu.","pos":[56911,56986]},{"content":"Depending on the value of the <ph id=\"ph1\">`nFlags`</ph> parameter, the menu can be left-aligned, right-aligned, or centered relative to this position.","pos":[56987,57120],"source":" Depending on the value of the `nFlags` parameter, the menu can be left-aligned, right-aligned, or centered relative to this position."},{"content":"y","pos":[57128,57129]},{"content":"Specifies the vertical position in screen coordinates of the top of the menu on the screen.","pos":[57134,57225]},{"content":"Identifies the window that owns the pop-up menu.","pos":[57242,57290]},{"content":"This parameter cannot be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, even if the <bpt id=\"p2\">**</bpt>TPM_NONOTIFY<ept id=\"p2\">**</ept> flag is specified.","pos":[57291,57373],"source":" This parameter cannot be **NULL**, even if the **TPM_NONOTIFY** flag is specified."},{"content":"This window receives all <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> messages from the menu.","pos":[57374,57437],"source":" This window receives all **WM_COMMAND** messages from the menu."},{"content":"In Windows versions 3.1 and later, the window does not receive <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> messages until <ph id=\"ph1\">`TrackPopupMenu`</ph> returns.","pos":[57438,57556],"source":" In Windows versions 3.1 and later, the window does not receive **WM_COMMAND** messages until `TrackPopupMenu` returns."},{"content":"In Windows 3.0, the window receives <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> messages before <ph id=\"ph1\">`TrackPopupMenu`</ph> returns.","pos":[57557,57649],"source":" In Windows 3.0, the window receives **WM_COMMAND** messages before `TrackPopupMenu` returns."},{"content":"Ignored.","pos":[57668,57676]},{"content":"Return Value","pos":[57686,57698]},{"pos":[57702,57880],"content":"This method returns the result of calling <bpt id=\"p1\">[</bpt>TrackPopupMenu<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648002)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method returns the result of calling [TrackPopupMenu](http://msdn.microsoft.com/library/windows/desktop/ms648002) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Remarks","pos":[57890,57897]},{"content":"A floating pop-up menu can appear anywhere on the screen.","pos":[57901,57958]},{"content":"Example","pos":[57968,57975]},{"pos":[57990,58009],"content":"NVC_MFCWindowing#34"},{"pos":[58117,58140],"content":"CMenu::TrackPopupMenuEx"},{"content":"Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu.","pos":[58144,58255]},{"content":"Parameters","pos":[58391,58401]},{"content":"Specifies various functions for the extended menu.","pos":[58418,58468]},{"content":"For a listing of all values and their meaning, see <bpt id=\"p1\">[</bpt>TrackPopupMenuEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648003)</ept>.","pos":[58469,58599],"source":" For a listing of all values and their meaning, see [TrackPopupMenuEx](http://msdn.microsoft.com/library/windows/desktop/ms648003)."},{"content":"x","pos":[58607,58608]},{"content":"Specifies the horizontal position in screen coordinates of the pop-up menu.","pos":[58613,58688]},{"content":"y","pos":[58696,58697]},{"content":"Specifies the vertical position in screen coordinates of the top of the menu on the screen.","pos":[58702,58793]},{"content":"A pointer to the window owning the pop-up menu and receiving the messages from the created menu.","pos":[58810,58906]},{"content":"This window can be any window from the current application but cannot be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[58907,58989],"source":" This window can be any window from the current application but cannot be **NULL**."},{"content":"If you specify <bpt id=\"p1\">**</bpt>TPM_NONOTIFY<ept id=\"p1\">**</ept> in the <ph id=\"ph1\">`fuFlags`</ph> parameter, the function does not send any messages to <ph id=\"ph2\">`pWnd`</ph>.","pos":[58990,59100],"source":" If you specify **TPM_NONOTIFY** in the `fuFlags` parameter, the function does not send any messages to `pWnd`."},{"content":"The function must return for the window pointed to by <ph id=\"ph1\">`pWnd`</ph> to receive the <bpt id=\"p1\">**</bpt>WM_COMMAND<ept id=\"p1\">**</ept> message.","pos":[59101,59200],"source":" The function must return for the window pointed to by `pWnd` to receive the **WM_COMMAND** message."},{"content":"lptpm","pos":[59208,59213]},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>TPMPARAMS<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647586)</ept> structure that specifies an area of the screen the menu should not overlap.","pos":[59218,59378],"source":" Pointer to a [TPMPARAMS](http://msdn.microsoft.com/library/windows/desktop/ms647586) structure that specifies an area of the screen the menu should not overlap."},{"content":"This parameter can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[59379,59410],"source":" This parameter can be **NULL**."},{"content":"Return Value","pos":[59420,59432]},{"content":"If you specify <bpt id=\"p1\">**</bpt>TPM_RETURNCMD<ept id=\"p1\">**</ept> in the <ph id=\"ph1\">`fuFlags`</ph> parameter, the return value is the menu-item identifier of the item that the user selected.","pos":[59436,59577],"source":"If you specify **TPM_RETURNCMD** in the `fuFlags` parameter, the return value is the menu-item identifier of the item that the user selected."},{"content":"If the user cancels the menu without making a selection, or if an error occurs, then the return value is 0.","pos":[59578,59685]},{"content":"If you do not specify <bpt id=\"p1\">**</bpt>TPM_RETURNCMD<ept id=\"p1\">**</ept> in the <ph id=\"ph1\">`fuFlags`</ph> parameter, the return value is nonzero if the function succeeds and 0 if it fails.","pos":[59692,59831],"source":"If you do not specify **TPM_RETURNCMD** in the `fuFlags` parameter, the return value is nonzero if the function succeeds and 0 if it fails."},{"content":"To get extended error information, call <bpt id=\"p1\">[</bpt>GetLastError<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679360)</ept>.","pos":[59832,59947],"source":" To get extended error information, call [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360)."},{"content":"Remarks","pos":[59957,59964]},{"content":"A floating pop-up menu can appear anywhere on the screen.","pos":[59968,60025]},{"content":"For more information on handling errors when creating the pop-up menu, see <bpt id=\"p1\">[</bpt>TrackPopupMenuEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms648003)</ept>.","pos":[60026,60180],"source":" For more information on handling errors when creating the pop-up menu, see [TrackPopupMenuEx](http://msdn.microsoft.com/library/windows/desktop/ms648003)."},{"content":"See Also","pos":[60189,60197]},{"content":"MFC Sample CTRLTEST","pos":[60202,60221]},{"content":"MFC Sample DYNAMENU","pos":[60257,60276]},{"content":"CObject Class","pos":[60312,60325]},{"content":"Hierarchy Chart","pos":[60370,60385]},{"content":"CObject Class","pos":[60422,60435]}],"content":"---\ntitle: \"CMenu Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CMenu\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"HMENU\"\n  - \"menus, class\"\n  - \"menus, base class\"\n  - \"menus, creating\"\n  - \"menus, managing\"\n  - \"CMenu class\"\nms.assetid: 40cacfdc-d45c-4ec7-bf28-991c72812499\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMenu Class\nAn encapsulation of the Windows `HMENU`.  \n  \n## Syntax  \n  \n```  \nclass CMenu : public CObject  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMenu::CMenu](#cmenu__cmenu)|Constructs a `CMenu` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMenu::AppendMenu](#cmenu__appendmenu)|Appends a new item to the end of this menu.|  \n|[CMenu::Attach](#cmenu__attach)|Attaches a Windows menu handle to a `CMenu` object.|  \n|[CMenu::CheckMenuItem](#cmenu__checkmenuitem)|Places a check mark next to or removes a check mark from a menu item in the pop-up menu.|  \n|[CMenu::CheckMenuRadioItem](#cmenu__checkmenuradioitem)|Places a radio button next to a menu item and removes the radio button from all of the other menu items in the group.|  \n|[CMenu::CreateMenu](#cmenu__createmenu)|Creates an empty menu and attaches it to a `CMenu` object.|  \n|[CMenu::CreatePopupMenu](#cmenu__createpopupmenu)|Creates an empty pop-up menu and attaches it to a `CMenu` object.|  \n|[CMenu::DeleteMenu](#cmenu__deletemenu)|Deletes a specified item from the menu. If the menu item has an associated pop-up menu, destroys the handle to the pop-up menu and frees the memory used by it.|  \n|[CMenu::DeleteTempMap](#cmenu__deletetempmap)|Deletes any temporary `CMenu` objects created by the `FromHandle` member function.|  \n|[CMenu::DestroyMenu](#cmenu__destroymenu)|Destroys the menu attached to a `CMenu` object and frees any memory that the menu occupied.|  \n|[CMenu::Detach](#cmenu__detach)|Detaches a Windows menu handle from a `CMenu` object and returns the handle.|  \n|[CMenu::DrawItem](#cmenu__drawitem)|Called by the framework when a visual aspect of an owner-drawn menu changes.|  \n|[CMenu::EnableMenuItem](#cmenu__enablemenuitem)|Enables, disables, or dims (grays) a menu item.|  \n|[CMenu::FromHandle](#cmenu__fromhandle)|Returns a pointer to a `CMenu` object given a Windows menu handle.|  \n|[CMenu::GetDefaultItem](#cmenu__getdefaultitem)|Determines the default menu item on the specified menu.|  \n|[CMenu::GetMenuContextHelpId](#cmenu__getmenucontexthelpid)|Retrieves the help context ID associated with the menu.|  \n|[CMenu::GetMenuInfo](#cmenu__getmenuinfo)|Retrieves information on a specific menu.|  \n|[CMenu::GetMenuItemCount](#cmenu__getmenuitemcount)|Determines the number of items in a pop-up or top-level menu.|  \n|[CMenu::GetMenuItemID](#cmenu__getmenuitemid)|Obtains the menu-item identifier for a menu item located at the specified position.|  \n|[CMenu::GetMenuItemInfo](#cmenu__getmenuiteminfo)|Retrieves information about a menu item.|  \n|[CMenu::GetMenuState](#cmenu__getmenustate)|Returns the status of the specified menu item or the number of items in a pop-up menu.|  \n|[CMenu::GetMenuString](#cmenu__getmenustring)|Retrieves the label of the specified menu item.|  \n|[CMenu::GetSafeHmenu](#cmenu__getsafehmenu)|Returns the `m_hMenu` wrapped by this `CMenu` object.|  \n|[CMenu::GetSubMenu](#cmenu__getsubmenu)|Retrieves a pointer to a pop-up menu.|  \n|[CMenu::InsertMenu](#cmenu__insertmenu)|Inserts a new menu item at the specified position, moving other items down the menu.|  \n|[CMenu::InsertMenuItem](#cmenu__insertmenuitem)|Inserts a new menu item at the specified position in a menu.|  \n|[CMenu::LoadMenu](#cmenu__loadmenu)|Loads a menu resource from the executable file and attaches it to a `CMenu` object.|  \n|[CMenu::LoadMenuIndirect](#cmenu__loadmenuindirect)|Loads a menu from a menu template in memory and attaches it to a `CMenu` object.|  \n|[CMenu::MeasureItem](#cmenu__measureitem)|Called by the framework to determine menu dimensions when an owner-drawn menu is created.|  \n|[CMenu::ModifyMenu](#cmenu__modifymenu)|Changes an existing menu item at the specified position.|  \n|[CMenu::RemoveMenu](#cmenu__removemenu)|Deletes a menu item with an associated pop-up menu from the specified menu.|  \n|[CMenu::SetDefaultItem](#cmenu__setdefaultitem)|Sets the default menu item for the specified menu.|  \n|[CMenu::SetMenuContextHelpId](#cmenu__setmenucontexthelpid)|Sets the help context ID to be associated with the menu.|  \n|[CMenu::SetMenuInfo](#cmenu__setmenuinfo)|Sets information on a specific menu.|  \n|[CMenu::SetMenuItemBitmaps](#cmenu__setmenuitembitmaps)|Associates the specified check-mark bitmaps with a menu item.|  \n|[CMenu::SetMenuItemInfo](#cmenu__setmenuiteminfo)|Changes information about a menu item.|  \n|[CMenu::TrackPopupMenu](#cmenu__trackpopupmenu)|Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu.|  \n|[CMenu::TrackPopupMenuEx](#cmenu__trackpopupmenuex)|Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMenu::operator HMENU](#cmenu__operator_hmenu)|Retrieves the handle of the menu object.|  \n|[CMenu::operator !=](#cmenu__operator__neq)|Determines if two menu objects are not equal.|  \n|[CMenu::operator ==](#cmenu__operator__eq_eq)|Determines if two menu objects are equal.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMenu::m_hMenu](#cmenu__m_hmenu)|Specifies the handle to the Windows menu attached to the `CMenu` object.|  \n  \n## Remarks  \n It provides member functions for creating, tracking, updating, and destroying a menu.  \n  \n Create a `CMenu` object on the stack frame as a local, then call `CMenu`'s member functions to manipulate the new menu as needed. Next, call [CWnd::SetMenu](../../mfc/reference/cwnd-class.md#cwnd__setmenu) to set the menu to a window, followed immediately by a call to the `CMenu` object's [Detach](#cmenu__detach) member function. The `CWnd::SetMenu` member function sets the window's menu to the new menu, causes the window to be redrawn to reflect the menu change, and also passes ownership of the menu to the window. The call to **Detach** detaches the `HMENU` from the `CMenu` object, so that when the local `CMenu` variable passes out of scope, the `CMenu` object destructor does not attempt to destroy a menu it no longer owns. The menu itself is automatically destroyed when the window is destroyed.  \n  \n You can use the [LoadMenuIndirect](#cmenu__loadmenuindirect) member function to create a menu from a template in memory, but a menu created from a resource by a call to [LoadMenu](#cmenu__loadmenu) is more easily maintained, and the menu resource itself can be created and modified by the menu editor.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n `CMenu`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cmenu__appendmenu\"></a>  CMenu::AppendMenu  \n Appends a new item to the end of a menu.  \n  \n```  \nBOOL AppendMenu(\n    UINT nFlags,  \n    UINT_PTR nIDNewItem = 0,  \n    LPCTSTR lpszNewItem = NULL);\n\n \nBOOL AppendMenu(\n    UINT nFlags,  \n    UINT_PTR nIDNewItem,  \n    const CBitmap* pBmp);\n```  \n  \n### Parameters  \n `nFlags`  \n Specifies information about the state of the new menu item when it is added to the menu. It consists of one or more of the values listed in the Remarks section.  \n  \n `nIDNewItem`  \n Specifies either the command ID of the new menu item or, if `nFlags` is set to **MF_POPUP**, the menu handle ( `HMENU`) of a pop-up menu. The `nIDNewItem` parameter is ignored (not needed) if `nFlags` is set to **MF_SEPARATOR**.  \n  \n `lpszNewItem`  \n Specifies the content of the new menu item. The `nFlags` parameter is used to interpret `lpszNewItem` in the following way:  \n  \n|nFlags|Interpretation of lpszNewItem|  \n|------------|-----------------------------------|  \n|`MF_OWNERDRAW`|Contains an application-supplied 32-bit value that the application can use to maintain additional data associated with the menu item. This 32-bit value is available to the application when it processes `WM_MEASUREITEM` and `WM_DRAWITEM` messages. The value is stored in the **itemData** member of the structure supplied with those messages.|  \n|**MF_STRING**|Contains a pointer to a null-terminated string. This is the default interpretation.|  \n|**MF_SEPARATOR**|The `lpszNewItem` parameter is ignored (not needed).|  \n  \n *pBmp*  \n Points to a `CBitmap` object that will be used as the menu item.  \n  \n### Return Value  \n Nonzero if the function is successful; otherwise 0.  \n  \n### Remarks  \n The application can specify the state of the menu item by setting values in `nFlags`. When `nIDNewItem` specifies a pop-up menu, it becomes part of the menu to which it is appended. If that menu is destroyed, the appended menu will also be destroyed. An appended menu should be detached from a `CMenu` object to avoid conflict. Note that **MF_STRING** and `MF_OWNERDRAW` are not valid for the bitmap version of `AppendMenu`.  \n  \n The following list describes the flags that may be set in `nFlags`:  \n  \n- **MF_CHECKED** Acts as a toggle with **MF_UNCHECKED** to place the default check mark next to the item. When the application supplies check-mark bitmaps (see the [SetMenuItemBitmaps](#cmenu__setmenuitembitmaps) member function), the \"check mark on\" bitmap is displayed.  \n  \n- **MF_UNCHECKED** Acts as a toggle with **MF_CHECKED** to remove a check mark next to the item. When the application supplies check-mark bitmaps (see the `SetMenuItemBitmaps` member function), the \"check mark off\" bitmap is displayed.  \n  \n- **MF_DISABLED** Disables the menu item so that it cannot be selected but does not dim it.  \n  \n- `MF_ENABLED` Enables the menu item so that it can be selected and restores it from its dimmed state.  \n  \n- **MF_GRAYED** Disables the menu item so that it cannot be selected and dims it.  \n  \n- **MF_MENUBARBREAK** Places the item on a new line in static menus or in a new column in pop-up menus. The new pop-up menu column will be separated from the old column by a vertical dividing line.  \n  \n- **MF_MENUBREAK** Places the item on a new line in static menus or in a new column in pop-up menus. No dividing line is placed between the columns.  \n  \n- `MF_OWNERDRAW` Specifies that the item is an owner-draw item. When the menu is displayed for the first time, the window that owns the menu receives a `WM_MEASUREITEM` message, which retrieves the height and width of the menu item. The `WM_DRAWITEM` message is the one sent whenever the owner must update the visual appearance of the menu item. This option is not valid for a top-level menu item.  \n  \n- **MF_POPUP** Specifies that the menu item has a pop-up menu associated with it. The ID parameter specifies a handle to a pop-up menu that is to be associated with the item. This is used for adding either a top-level pop-up menu or a hierarchical pop-up menu to a pop-up menu item.  \n  \n- **MF_SEPARATOR** Draws a horizontal dividing line. Can only be used in a pop-up menu. This line cannot be dimmed, disabled, or highlighted. Other parameters are ignored.  \n  \n- **MF_STRING** Specifies that the menu item is a character string.  \n  \n Each of the following groups lists flags that are mutually exclusive and cannot be used together:  \n  \n- **MF_DISABLED**, `MF_ENABLED`, and **MF_GRAYED**  \n  \n- **MF_STRING**, `MF_OWNERDRAW`, **MF_SEPARATOR**, and the bitmap version  \n  \n- **MF_MENUBARBREAK** and **MF_MENUBREAK**  \n  \n- **MF_CHECKED** and **MF_UNCHECKED**  \n  \n Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application should call [CWnd::DrawMenuBar](../../mfc/reference/cwnd-class.md#cwnd__drawmenubar).  \n  \n### Example  \n  See the example for [CMenu::CreateMenu](#cmenu__createmenu).  \n  \n##  <a name=\"cmenu__attach\"></a>  CMenu::Attach  \n Attaches an existing Windows menu to a `CMenu` object.  \n  \n```  \nBOOL Attach(HMENU hMenu);\n```  \n  \n### Parameters  \n `hMenu`  \n Specifies a handle to a Windows menu.  \n  \n### Return Value  \n Nonzero if the operation was successful; otherwise 0.  \n  \n### Remarks  \n This function should not be called if a menu is already attached to the `CMenu` object. The menu handle is stored in the `m_hMenu` data member.  \n  \n If the menu you want to manipulate is already associated with a window, you can use the [CWnd::GetMenu](../../mfc/reference/cwnd-class.md#cwnd__getmenu) function to get a handle to the menu.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#21](../../mfc/reference/codesnippet/cpp/cmenu-class_1.cpp)]  \n  \n##  <a name=\"cmenu__checkmenuitem\"></a>  CMenu::CheckMenuItem  \n Adds check marks to or removes check marks from menu items in the pop-up menu.  \n  \n```  \nUINT CheckMenuItem(\n    UINT nIDCheckItem,  \n    UINT nCheck);\n```  \n  \n### Parameters  \n `nIDCheckItem`  \n Specifies the menu item to be checked, as determined by `nCheck`.  \n  \n `nCheck`  \n Specifies how to check the menu item and how to determine the item's position in the menu. The `nCheck` parameter can be a combination of **MF_CHECKED** or **MF_UNCHECKED** with **MF_BYPOSITION** or **MF_BYCOMMAND** flags. These flags can be combined by using the bitwise OR operator. They have the following meanings:  \n  \n- **MF_BYCOMMAND** Specifies that the parameter gives the command ID of the existing menu item. This is the default.  \n  \n- **MF_BYPOSITION** Specifies that the parameter gives the position of the existing menu item. The first item is at position 0.  \n  \n- **MF_CHECKED** Acts as a toggle with **MF_UNCHECKED** to place the default check mark next to the item.  \n  \n- **MF_UNCHECKED** Acts as a toggle with **MF_CHECKED** to remove a check mark next to the item.  \n  \n### Return Value  \n The previous state of the item: **MF_CHECKED** or **MF_UNCHECKED**, or 0xFFFFFFFF if the menu item did not exist.  \n  \n### Remarks  \n The `nIDCheckItem` parameter specifies the item to be modified.  \n  \n The `nIDCheckItem` parameter may identify a pop-up menu item as well as a menu item. No special steps are required to check a pop-up menu item. Top-level menu items cannot be checked. A pop-up menu item must be checked by position since it does not have a menu-item identifier associated with it.  \n  \n### Example  \n  See the example for [CMenu::GetMenuState](#cmenu__getmenustate).  \n  \n##  <a name=\"cmenu__checkmenuradioitem\"></a>  CMenu::CheckMenuRadioItem  \n Checks a specified menu item and makes it a radio item.  \n  \n```  \nBOOL CheckMenuRadioItem(\n    UINT nIDFirst,  \n    UINT nIDLast,  \n    UINT nIDItem,  \n    UINT nFlags);\n```  \n  \n### Parameters  \n `nIDFirst`  \n Specifies (as an ID or offset, depending on the value of `nFlags`) the first menu item in the radio button group.  \n  \n `nIDLast`  \n Specifies (as an ID or offset, depending on the value of `nFlags`) the last menu item in the radio button group.  \n  \n `nIDItem`  \n Specifies (as an ID or offset, depending on the value of `nFlags`) the item in the group which will be checked with a radio button.  \n  \n `nFlags`  \n Specifies interpretation of `nIDFirst`, `nIDLast`, and `nIDItem` in the following way:  \n  \n|nFlags|Interpretation|  \n|------------|--------------------|  \n|**MF_BYCOMMAND**|Specifies that the parameter gives the command ID of the existing menu item. This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set.|  \n|**MF_BYPOSITION**|Specifies that the parameter gives the position of the existing menu item. The first item is at position 0.|  \n  \n### Return Value  \n Nonzero if successful; otherwise 0  \n  \n### Remarks  \n At the same time, the function unchecks all other menu items in the associated group and clears the radio-item type flag for those items. The checked item is displayed using a radio button (or bullet) bitmap instead of a check mark bitmap.  \n  \n### Example  \n  See the example for [ON_COMMAND_RANGE](http://msdn.microsoft.com/library/c52719fc-dd6e-48c9-af79-383f48d608e0).  \n  \n##  <a name=\"cmenu__cmenu\"></a>  CMenu::CMenu  \n Creates an empty menu and attaches it to a `CMenu` object.  \n  \n```  \nCMenu();\n```  \n  \n### Remarks  \n The menu is not created until you call one of the create or load member functions of **CMenu:**  \n  \n- [CreateMenu](#cmenu__createmenu)  \n  \n- [CreatePopupMenu](#cmenu__createpopupmenu)  \n  \n- [LoadMenu](#cmenu__loadmenu)  \n  \n- [LoadMenuIndirect](#cmenu__loadmenuindirect)  \n  \n- [Attach](#cmenu__attach)  \n  \n##  <a name=\"cmenu__createmenu\"></a>  CMenu::CreateMenu  \n Creates a menu and attaches it to the `CMenu` object.  \n  \n```  \nBOOL CreateMenu();\n```  \n  \n### Return Value  \n Nonzero if the menu was created successfully; otherwise 0.  \n  \n### Remarks  \n The menu is initially empty. Menu items can be added by using the `AppendMenu` or `InsertMenu` member function.  \n  \n If the menu is assigned to a window, it is automatically destroyed when the window is destroyed.  \n  \n Before exiting, an application must free system resources associated with a menu if the menu is not assigned to a window. An application frees a menu by calling the [DestroyMenu](#cmenu__destroymenu) member function.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#22](../../mfc/reference/codesnippet/cpp/cmenu-class_2.cpp)]  \n  \n##  <a name=\"cmenu__createpopupmenu\"></a>  CMenu::CreatePopupMenu  \n Creates a pop-up menu and attaches it to the `CMenu` object.  \n  \n```  \nBOOL CreatePopupMenu();\n```  \n  \n### Return Value  \n Nonzero if the pop-up menu was successfully created; otherwise 0.  \n  \n### Remarks  \n The menu is initially empty. Menu items can be added by using the `AppendMenu` or `InsertMenu` member function. The application can add the pop-up menu to an existing menu or pop-up menu. The `TrackPopupMenu` member function may be used to display this menu as a floating pop-up menu and to track selections on the pop-up menu.  \n  \n If the menu is assigned to a window, it is automatically destroyed when the window is destroyed. If the menu is added to an existing menu, it is automatically destroyed when that menu is destroyed.  \n  \n Before exiting, an application must free system resources associated with a pop-up menu if the menu is not assigned to a window. An application frees a menu by calling the [DestroyMenu](#cmenu__destroymenu) member function.  \n  \n### Example  \n  See the example for [CMenu::CreateMenu](#cmenu__createmenu).  \n  \n##  <a name=\"cmenu__deletemenu\"></a>  CMenu::DeleteMenu  \n Deletes an item from the menu.  \n  \n```  \nBOOL DeleteMenu(\n    UINT nPosition,  \n    UINT nFlags);\n```  \n  \n### Parameters  \n `nPosition`  \n Specifies the menu item that is to be deleted, as determined by `nFlags`.  \n  \n `nFlags`  \n Is used to interpret `nPosition` in the following way:  \n  \n|nFlags|Interpretation of nPosition|  \n|------------|---------------------------------|  \n|**MF_BYCOMMAND**|Specifies that the parameter gives the command ID of the existing menu item. This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set.|  \n|**MF_BYPOSITION**|Specifies that the parameter gives the position of the existing menu item. The first item is at position 0.|  \n  \n### Return Value  \n Nonzero if the function is successful; otherwise 0.  \n  \n### Remarks  \n If the menu item has an associated pop-up menu, `DeleteMenu` destroys the handle to the pop-up menu and frees the memory used by the pop-up menu.  \n  \n Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application must call [CWnd::DrawMenuBar](../../mfc/reference/cwnd-class.md#cwnd__drawmenubar).  \n  \n### Example  \n  See the example for [CWnd::GetMenu](../../mfc/reference/cwnd-class.md#cwnd__getmenu).  \n  \n##  <a name=\"cmenu__deletetempmap\"></a>  CMenu::DeleteTempMap  \n Called automatically by the `CWinApp` idle-time handler, deletes any temporary `CMenu` objects created by the [FromHandle](#cmenu__fromhandle) member function.  \n  \n```  \nstatic void PASCAL DeleteTempMap();\n```  \n  \n### Remarks  \n `DeleteTempMap` detaches the Windows menu object attached to a temporary `CMenu` object before deleting the `CMenu` object.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#23](../../mfc/reference/codesnippet/cpp/cmenu-class_3.cpp)]  \n  \n##  <a name=\"cmenu__destroymenu\"></a>  CMenu::DestroyMenu  \n Destroys the menu and any Windows resources that were used.  \n  \n```  \nBOOL DestroyMenu();\n```  \n  \n### Return Value  \n Nonzero if the menu is destroyed; otherwise 0.  \n  \n### Remarks  \n The menu is detached from the `CMenu` object before it is destroyed. The Windows `DestroyMenu` function is automatically called in the `CMenu` destructor.  \n  \n### Example  \n  See the example for [CMenu::CreateMenu](#cmenu__createmenu).  \n  \n##  <a name=\"cmenu__detach\"></a>  CMenu::Detach  \n Detaches a Windows menu from a `CMenu` object and returns the handle.  \n  \n```  \nHMENU Detach();\n```  \n  \n### Return Value  \n The handle, of type `HMENU`, to a Windows menu, if successful; otherwise **NULL**.  \n  \n### Remarks  \n The `m_hMenu` data member is set to **NULL**.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#21](../../mfc/reference/codesnippet/cpp/cmenu-class_1.cpp)]  \n  \n##  <a name=\"cmenu__drawitem\"></a>  CMenu::DrawItem  \n Called by the framework when a visual aspect of an owner-drawn menu changes.  \n  \n```  \nvirtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);\n```  \n  \n### Parameters  \n `lpDrawItemStruct`  \n A pointer to a [DRAWITEMSTRUCT](../../mfc/reference/drawitemstruct-structure.md) structure that contains information about the type of drawing required.  \n  \n### Remarks  \n The `itemAction` member of the `DRAWITEMSTRUCT` structure defines the drawing action that is to be performed. Override this member function to implement drawing for an owner-draw `CMenu` object. The application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct` before the termination of this member function.  \n  \n See [CWnd::OnDrawItem](../../mfc/reference/cwnd-class.md#cwnd__ondrawitem) for a description of the `DRAWITEMSTRUCT` structure.  \n  \n### Example  \n The following code is from the MFC [CTRLTEST](../../visual-cpp-samples.md) sample:  \n  \n [!code-cpp[NVC_MFCWindowing#24](../../mfc/reference/codesnippet/cpp/cmenu-class_4.cpp)]  \n  \n##  <a name=\"cmenu__enablemenuitem\"></a>  CMenu::EnableMenuItem  \n Enables, disables, or dims a menu item.  \n  \n```  \nUINT EnableMenuItem(\n    UINT nIDEnableItem,  \n    UINT nEnable);\n```  \n  \n### Parameters  \n *nIDEnableItem*  \n Specifies the menu item to be enabled, as determined by `nEnable`. This parameter can specify pop-up menu items as well as standard menu items.  \n  \n `nEnable`  \n Specifies the action to take. It can be a combination of **MF_DISABLED**, `MF_ENABLED`, or **MF_GRAYED**, with **MF_BYCOMMAND** or **MF_BYPOSITION**. These values can be combined by using the bitwise OR operator. These values have the following meanings:  \n  \n- **MF_BYCOMMAND** Specifies that the parameter gives the command ID of the existing menu item. This is the default.  \n  \n- **MF_BYPOSITION** Specifies that the parameter gives the position of the existing menu item. The first item is at position 0.  \n  \n- **MF_DISABLED** Disables the menu item so that it cannot be selected but does not dim it.  \n  \n- `MF_ENABLED` Enables the menu item so that it can be selected and restores it from its dimmed state.  \n  \n- **MF_GRAYED** Disables the menu item so that it cannot be selected and dims it.  \n  \n### Return Value  \n Previous state ( **MF_DISABLED**, `MF_ENABLED`, or **MF_GRAYED**) or –1 if not valid.  \n  \n### Remarks  \n The [CreateMenu](#cmenu__createmenu), [InsertMenu](#cmenu__insertmenu), [ModifyMenu](#cmenu__modifymenu), and [LoadMenuIndirect](#cmenu__loadmenuindirect) member functions can also set the state (enabled, disabled, or dimmed) of a menu item.  \n  \n Using the **MF_BYPOSITION** value requires an application to use the correct `CMenu`. If the `CMenu` of the menu bar is used, a top-level menu item (an item in the menu bar) is affected. To set the state of an item in a pop-up or nested pop-up menu by position, an application must specify the `CMenu` of the pop-up menu.  \n  \n When an application specifies the **MF_BYCOMMAND** flag, Windows checks all pop-up menu items that are subordinate to the `CMenu`; therefore, unless duplicate menu items are present, using the `CMenu` of the menu bar is sufficient.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#25](../../mfc/reference/codesnippet/cpp/cmenu-class_5.cpp)]  \n  \n##  <a name=\"cmenu__fromhandle\"></a>  CMenu::FromHandle  \n Returns a pointer to a `CMenu` object given a Windows handle to a menu.  \n  \n```  \nstatic CMenu* PASCAL FromHandle(HMENU hMenu);\n```  \n  \n### Parameters  \n `hMenu`  \n A Windows handle to a menu.  \n  \n### Return Value  \n A pointer to a `CMenu` that may be temporary or permanent.  \n  \n### Remarks  \n If a `CMenu` object is not already attached to the Windows menu object, a temporary `CMenu` object is created and attached.  \n  \n This temporary `CMenu` object is only valid until the next time the application has idle time in its event loop, at which time all temporary objects are deleted.  \n  \n### Example  \n  See the example for [CMenu::CreateMenu](#cmenu__createmenu).  \n  \n##  <a name=\"cmenu__getdefaultitem\"></a>  CMenu::GetDefaultItem  \n Determines the default menu item on the specified menu.  \n  \n```  \nUINT GetDefaultItem(\n    UINT gmdiFlags,  \n    BOOL fByPos = FALSE);\n```  \n  \n### Parameters  \n *gmdiFlags*  \n Value specifying how the function searches for menu items. This parameter can be none, one, or a combination of the following values:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|**GMDI_GOINTOPOPUPS**|Specifies that, if the default item is one that opens a submenu, the function is to search in the corresponding submenu recursively. If the submenu has no default item, the return value identifies the item that opens the submenu.<br /><br /> By default, the function returns the first default item on the specified menu, regardless of whether it is an item that opens a submenu.|  \n|**GMDI_USEDISABLED**|Specifies that the function is to return a default item, even if it is disabled.<br /><br /> By default, the function skips disabled or grayed items.|  \n  \n `fByPos`  \n Value specifying whether to retrieve the menu item's identifier or its position. If this parameter is **FALSE**, the identifier is returned. Otherwise, the position is returned.  \n  \n### Return Value  \n If the function succeeds, the return value is the identifier or position of the menu item. If the function fails, the return value is - 1.  \n  \n### Remarks  \n This member function implements the behavior of the Win32 function [GetMenuDefaultItem](http://msdn.microsoft.com/library/windows/desktop/ms647976), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CMenu::InsertMenu](#cmenu__insertmenu).  \n  \n##  <a name=\"cmenu__getmenucontexthelpid\"></a>  CMenu::GetMenuContextHelpId  \n Retrieves the context help ID associated with `CMenu`.  \n  \n```  \nDWORD GetMenuContextHelpId() const;\n\n \n```  \n  \n### Return Value  \n The context help ID currently associated with `CMenu` if it has one; zero otherwise.  \n  \n### Example  \n  See the example for [CMenu::InsertMenu](#cmenu__insertmenu).  \n  \n##  <a name=\"cmenu__getmenuinfo\"></a>  CMenu::GetMenuInfo  \n Retrieves information for a menu.  \n  \n```  \nBOOL GetMenuInfo(LPMENUINFO lpcmi) const;\n\n \n```  \n  \n### Parameters  \n `lpcmi`  \n A pointer to a [MENUINFO](http://msdn.microsoft.com/library/windows/desktop/ms647575) structure containing information for the menu.  \n  \n### Return Value  \n If the function succeeds, the return value is nonzero; otherwise, the return value is zero.  \n  \n### Remarks  \n Call this function to retrieve information about the menu.  \n  \n##  <a name=\"cmenu__getmenuitemcount\"></a>  CMenu::GetMenuItemCount  \n Determines the number of items in a pop-up or top-level menu.  \n  \n```  \nUINT GetMenuItemCount() const;\n\n \n```  \n  \n### Return Value  \n The number of items in the menu if the function is successful; otherwise –1.  \n  \n### Example  \n  See the example for [CWnd::GetMenu](../../mfc/reference/cwnd-class.md#cwnd__getmenu).  \n  \n##  <a name=\"cmenu__getmenuitemid\"></a>  CMenu::GetMenuItemID  \n Obtains the menu-item identifier for a menu item located at the position defined by `nPos`.  \n  \n```  \nUINT GetMenuItemID(int nPos) const;\n\n \n```  \n  \n### Parameters  \n `nPos`  \n Specifies the position (zero-based) of the menu item whose ID is being retrieved.  \n  \n### Return Value  \n The item ID for the specified item in a pop-up menu if the function is successful. If the specified item is a pop-up menu (as opposed to an item within the pop-up menu), the return value is –1. If `nPos` corresponds to a **SEPARATOR** menu item, the return value is 0.  \n  \n### Example  \n  See the example for [CMenu::InsertMenu](#cmenu__insertmenu).  \n  \n##  <a name=\"cmenu__getmenuiteminfo\"></a>  CMenu::GetMenuItemInfo  \n Retrieves information about a menu item.  \n  \n```  \nBOOL GetMenuItemInfo(\n    UINT uItem,  \n    LPMENUITEMINFO lpMenuItemInfo,  \n    BOOL fByPos = FALSE);\n```  \n  \n### Parameters  \n `uItem`  \n Identifier or position of the menu item to get information about. The meaning of this parameter depends on the value of `ByPos`.  \n  \n `lpMenuItemInfo`  \n A pointer to a [MENUITEMINFO](http://msdn.microsoft.com/library/windows/desktop/ms647578), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)], that contains information about the menu.  \n  \n `fByPos`  \n Value specifying the meaning of `nIDItem`. By default, `ByPos` is **FALSE**, which indicates that uItem is a menu item identifier. If `ByPos` is not set to **FALSE**, it indicates a menu item position.  \n  \n### Return Value  \n If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the Win32 function [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n This member function implements the behavior of the of the Win32 function [GetMenuItemInfo](http://msdn.microsoft.com/library/windows/desktop/ms647980), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. Note that in the MFC implementation of `GetMenuItemInfo`, you do not use a handle to a menu.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#26](../../mfc/reference/codesnippet/cpp/cmenu-class_6.cpp)]  \n  \n##  <a name=\"cmenu__getmenustate\"></a>  CMenu::GetMenuState  \n Returns the status of the specified menu item or the number of items in a pop-up menu.  \n  \n```  \nUINT GetMenuState(\n    UINT nID,  \n    UINT nFlags) const;\n\n \n```  \n  \n### Parameters  \n `nID`  \n Specifies the menu item ID, as determined by `nFlags`.  \n  \n `nFlags`  \n Specifies the nature of `nID`. It can be one of the following values:  \n  \n- **MF_BYCOMMAND** Specifies that the parameter gives the command ID of the existing menu item. This is the default.  \n  \n- **MF_BYPOSITION** Specifies that the parameter gives the position of the existing menu item. The first item is at position 0.  \n  \n### Return Value  \n The value 0xFFFFFFFF if the specified item does not exist. If *nId* identifies a pop-up menu, the high-order byte contains the number of items in the pop-up menu and the low-order byte contains the menu flags associated with the pop-up menu. Otherwise the return value is a mask (Boolean OR) of the values from the following list (this mask describes the status of the menu item that *nId* identifies):  \n  \n- **MF_CHECKED** Acts as a toggle with **MF_UNCHECKED** to place the default check mark next to the item. When the application supplies check-mark bitmaps (see the `SetMenuItemBitmaps` member function), the \"check mark on\" bitmap is displayed.  \n  \n- **MF_DISABLED** Disables the menu item so that it cannot be selected but does not dim it.  \n  \n- `MF_ENABLED` Enables the menu item so that it can be selected and restores it from its dimmed state. Note that the value of this constant is 0; an application should not test against 0 for failure when using this value.  \n  \n- **MF_GRAYED** Disables the menu item so that it cannot be selected and dims it.  \n  \n- **MF_MENUBARBREAK** Places the item on a new line in static menus or in a new column in pop-up menus. The new pop-up menu column will be separated from the old column by a vertical dividing line.  \n  \n- **MF_MENUBREAK** Places the item on a new line in static menus or in a new column in pop-up menus. No dividing line is placed between the columns.  \n  \n- **MF_SEPARATOR** Draws a horizontal dividing line. Can only be used in a pop-up menu. This line cannot be dimmed, disabled, or highlighted. Other parameters are ignored.  \n  \n- **MF_UNCHECKED** Acts as a toggle with **MF_CHECKED** to remove a check mark next to the item. When the application supplies check-mark bitmaps (see the `SetMenuItemBitmaps` member function), the \"check mark off\" bitmap is displayed. Note that the value of this constant is 0; an application should not test against 0 for failure when using this value.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#27](../../mfc/reference/codesnippet/cpp/cmenu-class_7.cpp)]  \n  \n##  <a name=\"cmenu__getmenustring\"></a>  CMenu::GetMenuString  \n Copies the label of the specified menu item to the specified buffer.  \n  \n```  \nint GetMenuString(\n    UINT nIDItem,  \n    LPTSTR lpString,  \n    int nMaxCount,  \n    UINT nFlags) const;\n\n \n \nint GetMenuString(\n    UINT nIDItem,  \n    CString& rString,  \n    UINT nFlags) const;\n\n \n```  \n  \n### Parameters  \n `nIDItem`  \n Specifies the integer identifier of the menu item or the offset of the menu item in the menu, depending on the value of `nFlags`.  \n  \n `lpString`  \n Points to the buffer that is to receive the label.  \n  \n `rString`  \n A reference to a `CString` object that is to receive the copied menu string.  \n  \n `nMaxCount`  \n Specifies the maximum length (in characters) of the label to be copied. If the label is longer than the maximum specified in `nMaxCount`, the extra characters are truncated.  \n  \n `nFlags`  \n Specifies the interpretation of the `nIDItem` parameter. It can be one of the following values:  \n  \n|nFlags|Interpretation of nIDItem|  \n|------------|-------------------------------|  \n|**MF_BYCOMMAND**|Specifies that the parameter gives the command ID of the existing menu item. This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set.|  \n|**MF_BYPOSITION**|Specifies that the parameter gives the position of the existing menu item. The first item is at position 0.|  \n  \n### Return Value  \n Specifies the actual number of characters copied to the buffer, not including the null terminator.  \n  \n### Remarks  \n The `nMaxCount` parameter should be one larger than the number of characters in the label to accommodate the null character that terminates a string.  \n  \n### Example  \n  See the example for [CMenu::InsertMenu](#cmenu__insertmenu).  \n  \n##  <a name=\"cmenu__getsafehmenu\"></a>  CMenu::GetSafeHmenu  \n Returns the `HMENU` wrapped by this `CMenu` object, or a **NULL**`CMenu` pointer.  \n  \n```  \nHMENU GetSafeHmenu() const;\n\n \n```  \n  \n### Example  \n  See the example for [CMenu::LoadMenu](#cmenu__loadmenu).  \n  \n##  <a name=\"cmenu__getsubmenu\"></a>  CMenu::GetSubMenu  \n Retrieves the `CMenu` object of a pop-up menu.  \n  \n```  \nCMenu* GetSubMenu(int nPos) const;\n\n \n```  \n  \n### Parameters  \n `nPos`  \n Specifies the position of the pop-up menu contained in the menu. Position values start at 0 for the first menu item. The pop-up menu's identifier cannot be used in this function.  \n  \n### Return Value  \n A pointer to a `CMenu` object whose `m_hMenu` member contains a handle to the pop-up menu if a pop-up menu exists at the given position; otherwise **NULL**. If a `CMenu` object does not exist, then a temporary one is created. The `CMenu` pointer returned should not be stored.  \n  \n### Example  \n  See the example for [CMenu::TrackPopupMenu](#cmenu__trackpopupmenu).  \n  \n##  <a name=\"cmenu__insertmenu\"></a>  CMenu::InsertMenu  \n Inserts a new menu item at the position specified by `nPosition` and moves other items down the menu.  \n  \n```  \nBOOL InsertMenu(\n    UINT nPosition,  \n    UINT nFlags,  \n    UINT_PTR nIDNewItem = 0,  \n    LPCTSTR lpszNewItem = NULL);\n\n \nBOOL InsertMenu(\n    UINT nPosition,  \n    UINT nFlags,  \n    UINT_PTR nIDNewItem,  \n    const CBitmap* pBmp);\n```  \n  \n### Parameters  \n `nPosition`  \n Specifies the menu item before which the new menu item is to be inserted. The `nFlags` parameter can be used to interpret `nPosition` in the following ways:  \n  \n|nFlags|Interpretation of nPosition|  \n|------------|---------------------------------|  \n|**MF_BYCOMMAND**|Specifies that the parameter gives the command ID of the existing menu item. This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set.|  \n|**MF_BYPOSITION**|Specifies that the parameter gives the position of the existing menu item. The first item is at position 0. If `nPosition` is –1, the new menu item is appended to the end of the menu.|  \n  \n `nFlags`  \n Specifies how `nPosition` is interpreted and specifies information about the state of the new menu item when it is added to the menu. For a list of the flags that may be set, see the [AppendMenu](#cmenu__appendmenu) member function. To specify more than one value, use the bitwise OR operator to combine them with the **MF_BYCOMMAND** or **MF_BYPOSITION** flag.  \n  \n `nIDNewItem`  \n Specifies either the command ID of the new menu item or, if `nFlags` is set to **MF_POPUP**, the menu handle ( `HMENU`) of the pop-up menu. The `nIDNewItem` parameter is ignored (not needed) if `nFlags` is set to **MF_SEPARATOR**.  \n  \n `lpszNewItem`  \n Specifies the content of the new menu item. `nFlags` can be used to interpret `lpszNewItem` in the following ways:  \n  \n|nFlags|Interpretation of lpszNewItem|  \n|------------|-----------------------------------|  \n|`MF_OWNERDRAW`|Contains an application-supplied 32-bit value that the application can use to maintain additional data associated with the menu item. This 32-bit value is available to the application in the **itemData** member of the structure supplied by the [WM_MEASUREITEM](http://msdn.microsoft.com/library/windows/desktop/bb775925) and [WM_DRAWITEM](http://msdn.microsoft.com/library/windows/desktop/bb775923) messages. These messages are sent when the menu item is initially displayed or is changed.|  \n|**MF_STRING**|Contains a long pointer to a null-terminated string. This is the default interpretation.|  \n|**MF_SEPARATOR**|The `lpszNewItem` parameter is ignored (not needed).|  \n  \n *pBmp*  \n Points to a `CBitmap` object that will be used as the menu item.  \n  \n### Return Value  \n Nonzero if the function is successful; otherwise 0.  \n  \n### Remarks  \n The application can specify the state of the menu item by setting values in `nFlags`.  \n  \n Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application should call `CWnd::DrawMenuBar`.  \n  \n When `nIDNewItem` specifies a pop-up menu, it becomes part of the menu in which it is inserted. If that menu is destroyed, the inserted menu will also be destroyed. An inserted menu should be detached from a `CMenu` object to avoid conflict.  \n  \n If the active multiple document interface (MDI) child window is maximized and an application inserts a pop-up menu into the MDI application's menu by calling this function and specifying the **MF_BYPOSITION** flag, the menu is inserted one position farther left than expected. This happens because the Control menu of the active MDI child window is inserted into the first position of the MDI frame window's menu bar. To position the menu properly, the application must add 1 to the position value that would otherwise be used. An application can use the **WM_MDIGETACTIVE** message to determine whether the currently active child window is maximized.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#28](../../mfc/reference/codesnippet/cpp/cmenu-class_8.cpp)]  \n  \n##  <a name=\"cmenu__insertmenuitem\"></a>  CMenu::InsertMenuItem  \n Inserts a new menu item at the specified position in a menu.  \n  \n```  \nBOOL InsertMenuItem(\n    UINT uItem,  \n    LPMENUITEMINFO lpMenuItemInfo,  \n    BOOL fByPos = FALSE);\n```  \n  \n### Parameters  \n `uItem`  \n See description of `uItem` in [InsertMenuItem](http://msdn.microsoft.com/library/windows/desktop/ms647988) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `lpMenuItemInfo`  \n See description of `lpmii` in **InsertMenuItem** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `fByPos`  \n See description of `fByPosition` in **InsertMenuItem** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n This function wraps [InsertMenuItem](http://msdn.microsoft.com/library/windows/desktop/ms647988), described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cmenu__loadmenu\"></a>  CMenu::LoadMenu  \n Loads a menu resource from the application's executable file and attaches it to the `CMenu` object.  \n  \n```  \nBOOL LoadMenu(LPCTSTR lpszResourceName);\n\n \nBOOL LoadMenu(UINT nIDResource);\n```  \n  \n### Parameters  \n `lpszResourceName`  \n Points to a null-terminated string that contains the name of the menu resource to load.  \n  \n `nIDResource`  \n Specifies the menu ID of the menu resource to load.  \n  \n### Return Value  \n Nonzero if the menu resource was loaded successfully; otherwise 0.  \n  \n### Remarks  \n Before exiting, an application must free system resources associated with a menu if the menu is not assigned to a window. An application frees a menu by calling the [DestroyMenu](#cmenu__destroymenu) member function.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#29](../../mfc/reference/codesnippet/cpp/cmenu-class_9.cpp)]  \n  \n##  <a name=\"cmenu__loadmenuindirect\"></a>  CMenu::LoadMenuIndirect  \n Loads a resource from a menu template in memory and attaches it to the `CMenu` object.  \n  \n```  \nBOOL LoadMenuIndirect(const void* lpMenuTemplate);\n```  \n  \n### Parameters  \n *lpMenuTemplate*  \n Points to a menu template (which is a single [MENUITEMTEMPLATEHEADER](http://msdn.microsoft.com/library/windows/desktop/ms647583) structure and a collection of one or more [MENUITEMTEMPLATE](http://msdn.microsoft.com/library/windows/desktop/ms647581) structures). For more information on these two structures, see the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Return Value  \n Nonzero if the menu resource was loaded successfully; otherwise 0.  \n  \n### Remarks  \n A menu template is a header followed by a collection of one or more [MENUITEMTEMPLATE](http://msdn.microsoft.com/library/windows/desktop/ms647581) structures, each of which may contain one or more menu items and pop-up menus.  \n  \n The version number should be 0.  \n  \n The **mtOption** flags should include **MF_END** for the last item in a pop-up list and for the last item in the main list. See the `AppendMenu` member function for other flags. The **mtId** member must be omitted from the **MENUITEMTEMPLATE** structure when **MF_POPUP** is specified in **mtOption**.  \n  \n The space allocated for the **MENUITEMTEMPLATE** structure must be large enough for **mtString** to contain the name of the menu item as a null-terminated string.  \n  \n Before exiting, an application must free system resources associated with a menu if the menu is not assigned to a window. An application frees a menu by calling the [DestroyMenu](#cmenu__destroymenu) member function.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#30](../../mfc/reference/codesnippet/cpp/cmenu-class_10.cpp)]  \n  \n##  <a name=\"cmenu__m_hmenu\"></a>  CMenu::m_hMenu  \n Specifies the `HMENU` handle of the Windows menu attached to the `CMenu` object.  \n  \n```  \nHMENU m_hMenu;  \n```  \n  \n### Example  \n  See the example for [CMenu::LoadMenu](#cmenu__loadmenu).  \n  \n##  <a name=\"cmenu__measureitem\"></a>  CMenu::MeasureItem  \n Called by the framework when a menu with the owner-draw style is created.  \n  \n```  \nvirtual void MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);\n```  \n  \n### Parameters  \n `lpMeasureItemStruct`  \n A pointer to a `MEASUREITEMSTRUCT` structure.  \n  \n### Remarks  \n By default, this member function does nothing. Override this member function and fill in the `MEASUREITEMSTRUCT` structure to inform Windows of the menu's dimensions.  \n  \n See [CWnd::OnMeasureItem](../../mfc/reference/cwnd-class.md#cwnd__onmeasureitem) for a description of the `MEASUREITEMSTRUCT` structure.  \n  \n### Example  \n The following code is from the MFC [CTRLTEST](../../visual-cpp-samples.md) sample:  \n  \n [!code-cpp[NVC_MFCWindowing#31](../../mfc/reference/codesnippet/cpp/cmenu-class_11.cpp)]  \n  \n##  <a name=\"cmenu__modifymenu\"></a>  CMenu::ModifyMenu  \n Changes an existing menu item at the position specified by `nPosition`.  \n  \n```  \nBOOL ModifyMenu(\n    UINT nPosition,  \n    UINT nFlags,  \n    UINT_PTR nIDNewItem = 0,  \n    LPCTSTR lpszNewItem = NULL);\n\n \nBOOL ModifyMenu(\n    UINT nPosition,  \n    UINT nFlags,  \n    UINT_PTR nIDNewItem,  \n    const CBitmap* pBmp);\n```  \n  \n### Parameters  \n `nPosition`  \n Specifies the menu item to be changed. The `nFlags` parameter can be used to interpret `nPosition` in the following ways:  \n  \n|nFlags|Interpretation of nPosition|  \n|------------|---------------------------------|  \n|**MF_BYCOMMAND**|Specifies that the parameter gives the command ID of the existing menu item. This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set.|  \n|**MF_BYPOSITION**|Specifies that the parameter gives the position of the existing menu item. The first item is at position 0.|  \n  \n `nFlags`  \n Specifies how `nPosition` is interpreted and gives information about the changes to be made to the menu item. For a list of flags that may be set, see the [AppendMenu](#cmenu__appendmenu) member function.  \n  \n `nIDNewItem`  \n Specifies either the command ID of the modified menu item or, if `nFlags` is set to **MF_POPUP**, the menu handle ( `HMENU`) of a pop-up menu. The `nIDNewItem` parameter is ignored (not needed) if `nFlags` is set to **MF_SEPARATOR**.  \n  \n `lpszNewItem`  \n Specifies the content of the new menu item. The `nFlags` parameter can be used to interpret `lpszNewItem` in the following ways:  \n  \n|nFlags|Interpretation of lpszNewItem|  \n|------------|-----------------------------------|  \n|`MF_OWNERDRAW`|Contains an application-supplied 32-bit value that the application can use to maintain additional data associated with the menu item. This 32-bit value is available to the application when it processes **MF_MEASUREITEM** and **MF_DRAWITEM**.|  \n|**MF_STRING**|Contains a long pointer to a null-terminated string or to a `CString`.|  \n|**MF_SEPARATOR**|The `lpszNewItem` parameter is ignored (not needed).|  \n  \n *pBmp*  \n Points to a `CBitmap` object that will be used as the menu item.  \n  \n### Return Value  \n Nonzero if the function is successful; otherwise 0.  \n  \n### Remarks  \n The application specifies the new state of the menu item by setting values in `nFlags`. If this function replaces a pop-up menu associated with the menu item, it destroys the old pop-up menu and frees the memory used by the pop-up menu.  \n  \n When `nIDNewItem` specifies a pop-up menu, it becomes part of the menu in which it is inserted. If that menu is destroyed, the inserted menu will also be destroyed. An inserted menu should be detached from a `CMenu` object to avoid conflict.  \n  \n Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application should call `CWnd::DrawMenuBar`. To change the attributes of existing menu items, it is much faster to use the `CheckMenuItem` and `EnableMenuItem` member functions.  \n  \n### Example  \n  See the example for [CMenu::InsertMenu](#cmenu__insertmenu).  \n  \n##  <a name=\"cmenu__operator_hmenu\"></a>  CMenu::operator HMENU  \n Use this operator to retrieve the handle of the `CMenu` object.  \n  \n```  \noperator HMENU() const;\n\n \n```  \n  \n### Return Value  \n If successful, the handle of the `CMenu` object; otherwise, **NULL**.  \n  \n### Remarks  \n You can use the handle to call Windows APIs directly.  \n  \n##  <a name=\"cmenu__operator__neq\"></a>  CMenu::operator !=  \n Determines if two menus are logically not equal.  \n  \n```  \nBOOL operator!=(const CMenu& menu) const;\n\n \n```  \n  \n### Parameters  \n `menu`  \n A `CMenu` object for comparison.  \n  \n### Remarks  \n Tests if a menu object on the left side is not equal to a menu object on the right side.  \n  \n##  <a name=\"cmenu__operator__eq_eq\"></a>  CMenu::operator ==  \n Determines if two menus are logically equal.  \n  \n```  \nBOOL operator==(const CMenu& menu) const;\n\n \n```  \n  \n### Parameters  \n `menu`  \n A `CMenu` object for comparison.  \n  \n### Remarks  \n Tests if a menu object on the left side is equal (in terms of the `HMENU` value) to a menu object on the right side.  \n  \n##  <a name=\"cmenu__removemenu\"></a>  CMenu::RemoveMenu  \n Deletes a menu item with an associated pop-up menu from the menu.  \n  \n```  \nBOOL RemoveMenu(\n    UINT nPosition,  \n    UINT nFlags);\n```  \n  \n### Parameters  \n `nPosition`  \n Specifies the menu item to be removed. The `nFlags` parameter can be used to interpret `nPosition` in the following ways:  \n  \n|nFlags|Interpretation of nPosition|  \n|------------|---------------------------------|  \n|**MF_BYCOMMAND**|Specifies that the parameter gives the command ID of the existing menu item. This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set.|  \n|**MF_BYPOSITION**|Specifies that the parameter gives the position of the existing menu item. The first item is at position 0.|  \n  \n `nFlags`  \n Specifies how `nPosition` is interpreted.  \n  \n### Return Value  \n Nonzero if the function is successful; otherwise 0.  \n  \n### Remarks  \n It does not destroy the handle for a pop-up menu, so the menu can be reused. Before calling this function, the application may call the `GetSubMenu` member function to retrieve the pop-up `CMenu` object for reuse.  \n  \n Whenever a menu that resides in a window is changed (whether or not the window is displayed), the application must call `CWnd::DrawMenuBar`.  \n  \n### Example  \n  See the example for [CMenu::InsertMenu](#cmenu__insertmenu).  \n  \n##  <a name=\"cmenu__setdefaultitem\"></a>  CMenu::SetDefaultItem  \n Sets the default menu item for the specified menu.  \n  \n```  \nBOOL SetDefaultItem(\n    UINT uItem,  \n    BOOL fByPos = FALSE);\n```  \n  \n### Parameters  \n `uItem`  \n Identifier or position of the new default menu item or - 1 for no default item. The meaning of this parameter depends on the value of `fByPos`.  \n  \n `fByPos`  \n Value specifying the meaning of `uItem`. If this parameter is **FALSE**, `uItem` is a menu item identifier. Otherwise, it is a menu item position.  \n  \n### Return Value  \n If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the Win32 function [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n This member function implements the behavior of the Win32 function [SetMenuDefaultItem](http://msdn.microsoft.com/library/windows/desktop/ms647996), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n  See the example for [CMenu::InsertMenu](#cmenu__insertmenu).  \n  \n##  <a name=\"cmenu__setmenucontexthelpid\"></a>  CMenu::SetMenuContextHelpId  \n Associates a context help ID with `CMenu`.  \n  \n```  \nBOOL SetMenuContextHelpId(DWORD dwContextHelpId);\n```  \n  \n### Parameters  \n `dwContextHelpId`  \n Context help ID to associate with `CMenu`.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0  \n  \n### Remarks  \n All items in the menu share this identifier — it is not possible to attach a help context identifier to the individual menu items.  \n  \n### Example  \n  See the example for [CMenu::InsertMenu](#cmenu__insertmenu).  \n  \n##  <a name=\"cmenu__setmenuinfo\"></a>  CMenu::SetMenuInfo  \n Sets information for a menu.  \n  \n```  \nBOOL SetMenuInfo(LPCMENUINFO lpcmi);\n```  \n  \n### Parameters  \n `lpcmi`  \n A pointer to a [MENUINFO](http://msdn.microsoft.com/library/windows/desktop/ms647575) structure containing information for the menu.  \n  \n### Return Value  \n If the function succeeds, the return value is nonzero; otherwise, the return value is zero.  \n  \n### Remarks  \n Call this function to set specific information about the menu.  \n  \n##  <a name=\"cmenu__setmenuitembitmaps\"></a>  CMenu::SetMenuItemBitmaps  \n Associates the specified bitmaps with a menu item.  \n  \n```  \nBOOL SetMenuItemBitmaps(\n    UINT nPosition,  \n    UINT nFlags,  \n    const CBitmap* pBmpUnchecked,  \n    const CBitmap* pBmpChecked);\n```  \n  \n### Parameters  \n `nPosition`  \n Specifies the menu item to be changed. The `nFlags` parameter can be used to interpret `nPosition` in the following ways:  \n  \n|nFlags|Interpretation of nPosition|  \n|------------|---------------------------------|  \n|**MF_BYCOMMAND**|Specifies that the parameter gives the command ID of the existing menu item. This is the default if neither **MF_BYCOMMAND** nor **MF_BYPOSITION** is set.|  \n|**MF_BYPOSITION**|Specifies that the parameter gives the position of the existing menu item. The first item is at position 0.|  \n  \n `nFlags`  \n Specifies how `nPosition` is interpreted.  \n  \n `pBmpUnchecked`  \n Specifies the bitmap to use for menu items that are not checked.  \n  \n `pBmpChecked`  \n Specifies the bitmap to use for menu items that are checked.  \n  \n### Return Value  \n Nonzero if the function is successful; otherwise 0.  \n  \n### Remarks  \n Whether the menu item is checked or unchecked, Windows displays the appropriate bitmap next to the menu item.  \n  \n If either `pBmpUnchecked` or `pBmpChecked` is **NULL**, then Windows displays nothing next to the menu item for the corresponding attribute. If both parameters are **NULL**, Windows uses the default check mark when the item is checked and removes the check mark when the item is unchecked.  \n  \n When the menu is destroyed, these bitmaps are not destroyed; the application must destroy them.  \n  \n The Windows **GetMenuCheckMarkDimensions** function retrieves the dimensions of the default check mark used for menu items. The application uses these values to determine the appropriate size for the bitmaps supplied with this function. Get the size, create your bitmaps, and then set them.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#32](../../mfc/reference/codesnippet/cpp/cmenu-class_12.cpp)]  \n  \n [!code-cpp[NVC_MFCWindowing#33](../../mfc/reference/codesnippet/cpp/cmenu-class_13.cpp)]  \n  \n##  <a name=\"cmenu__setmenuiteminfo\"></a>  CMenu::SetMenuItemInfo  \n Changes information about a menu item.  \n  \n```  \nBOOL SetMenuItemInfo(\n    UINT uItem,  \n    LPMENUITEMINFO lpMenuItemInfo,  \n    BOOL fByPos = FALSE);\n```  \n  \n### Parameters  \n `uItem`  \n See description of `uItem` in [SetMenuItemInfo](http://msdn.microsoft.com/library/windows/desktop/ms648001) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `lpMenuItemInfo`  \n See description of `lpmii` in **SetMenuItemInfo** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `fByPos`  \n See description of `fByPosition` in **SetMenuItemInfo** in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n This function wraps [SetMenuItemInfo](http://msdn.microsoft.com/library/windows/desktop/ms648001), described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cmenu__trackpopupmenu\"></a>  CMenu::TrackPopupMenu  \n Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu.  \n  \n```  \nBOOL TrackPopupMenu(\n    UINT nFlags,  \n    int x,  \n    int y,  \n    CWnd* pWnd,  \n    LPCRECT lpRect = 0);\n```  \n  \n### Parameters  \n `nFlags`  \n Specifies screen-position and mouse-position flags. See [TrackPopupMenu](http://msdn.microsoft.com/library/windows/desktop/ms648002) for a list of available flags.  \n  \n *x*  \n Specifies the horizontal position in screen coordinates of the pop-up menu. Depending on the value of the `nFlags` parameter, the menu can be left-aligned, right-aligned, or centered relative to this position.  \n  \n *y*  \n Specifies the vertical position in screen coordinates of the top of the menu on the screen.  \n  \n `pWnd`  \n Identifies the window that owns the pop-up menu. This parameter cannot be **NULL**, even if the **TPM_NONOTIFY** flag is specified. This window receives all **WM_COMMAND** messages from the menu. In Windows versions 3.1 and later, the window does not receive **WM_COMMAND** messages until `TrackPopupMenu` returns. In Windows 3.0, the window receives **WM_COMMAND** messages before `TrackPopupMenu` returns.  \n  \n `lpRect`  \n Ignored.  \n  \n### Return Value  \n This method returns the result of calling [TrackPopupMenu](http://msdn.microsoft.com/library/windows/desktop/ms648002) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Remarks  \n A floating pop-up menu can appear anywhere on the screen.  \n  \n### Example  \n [!code-cpp[NVC_MFCWindowing#34](../../mfc/reference/codesnippet/cpp/cmenu-class_14.cpp)]  \n  \n##  <a name=\"cmenu__trackpopupmenuex\"></a>  CMenu::TrackPopupMenuEx  \n Displays a floating pop-up menu at the specified location and tracks the selection of items on the pop-up menu.  \n  \n```  \nBOOL TrackPopupMenuEx(\n    UINT fuFlags,  \n    int x,  \n    int y,  \n    CWnd* pWnd,  \n    LPTPMPARAMS lptpm);\n```  \n  \n### Parameters  \n `fuFlags`  \n Specifies various functions for the extended menu. For a listing of all values and their meaning, see [TrackPopupMenuEx](http://msdn.microsoft.com/library/windows/desktop/ms648003).  \n  \n *x*  \n Specifies the horizontal position in screen coordinates of the pop-up menu.  \n  \n *y*  \n Specifies the vertical position in screen coordinates of the top of the menu on the screen.  \n  \n `pWnd`  \n A pointer to the window owning the pop-up menu and receiving the messages from the created menu. This window can be any window from the current application but cannot be **NULL**. If you specify **TPM_NONOTIFY** in the `fuFlags` parameter, the function does not send any messages to `pWnd`. The function must return for the window pointed to by `pWnd` to receive the **WM_COMMAND** message.  \n  \n *lptpm*  \n Pointer to a [TPMPARAMS](http://msdn.microsoft.com/library/windows/desktop/ms647586) structure that specifies an area of the screen the menu should not overlap. This parameter can be **NULL**.  \n  \n### Return Value  \n If you specify **TPM_RETURNCMD** in the `fuFlags` parameter, the return value is the menu-item identifier of the item that the user selected. If the user cancels the menu without making a selection, or if an error occurs, then the return value is 0.  \n  \n If you do not specify **TPM_RETURNCMD** in the `fuFlags` parameter, the return value is nonzero if the function succeeds and 0 if it fails. To get extended error information, call [GetLastError](http://msdn.microsoft.com/library/windows/desktop/ms679360).  \n  \n### Remarks  \n A floating pop-up menu can appear anywhere on the screen. For more information on handling errors when creating the pop-up menu, see [TrackPopupMenuEx](http://msdn.microsoft.com/library/windows/desktop/ms648003).  \n  \n## See Also  \n [MFC Sample CTRLTEST](../../visual-cpp-samples.md)   \n [MFC Sample DYNAMENU](../../visual-cpp-samples.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CObject Class](../../mfc/reference/cobject-class.md)\n"}