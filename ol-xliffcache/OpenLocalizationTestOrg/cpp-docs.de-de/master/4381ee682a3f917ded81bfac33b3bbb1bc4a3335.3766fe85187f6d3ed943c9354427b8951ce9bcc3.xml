{"nodes":[{"pos":[12,45],"content":"CWin32Heap Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CWin32Heap Class | Microsoft Docs","pos":[0,33]}]},{"pos":[647,663],"content":"CWin32Heap Class","linkify":"CWin32Heap Class","nodes":[{"content":"CWin32Heap Class","pos":[0,16]}]},{"pos":[664,782],"content":"This class implements <bpt id=\"p1\">[</bpt>IAtlMemMgr<ept id=\"p1\">](../../atl/reference/iatlmemmgr-class.md)</ept> using the Win32 heap allocation functions.","source":"This class implements [IAtlMemMgr](../../atl/reference/iatlmemmgr-class.md) using the Win32 heap allocation functions."},{"pos":[790,900],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"pos":[909,915],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[974,981],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[991,1010],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1017,1021]},{"content":"Description","pos":[1022,1033]},{"pos":[1071,1120],"content":"<bpt id=\"p1\">[</bpt>CWin32Heap::CWin32Heap<ept id=\"p1\">](#cwin32heap__cwin32heap)</ept>","source":"[CWin32Heap::CWin32Heap](#cwin32heap__cwin32heap)"},{"content":"The constructor.","pos":[1121,1137]},{"pos":[1142,1197],"content":"<bpt id=\"p1\">[</bpt>CWin32Heap::~CWin32Heap<ept id=\"p1\">](#cwin32heap___dtorcwin32heap)</ept>","source":"[CWin32Heap::~CWin32Heap](#cwin32heap___dtorcwin32heap)"},{"content":"The destructor.","pos":[1198,1213]},{"pos":[1224,1238],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1245,1249]},{"content":"Description","pos":[1250,1261]},{"pos":[1299,1344],"content":"<bpt id=\"p1\">[</bpt>CWin32Heap::Allocate<ept id=\"p1\">](#cwin32heap__allocate)</ept>","source":"[CWin32Heap::Allocate](#cwin32heap__allocate)"},{"content":"Allocates a block of memory from the heap object.","pos":[1345,1394]},{"pos":[1399,1440],"content":"<bpt id=\"p1\">[</bpt>CWin32Heap::Attach<ept id=\"p1\">](#cwin32heap__attach)</ept>","source":"[CWin32Heap::Attach](#cwin32heap__attach)"},{"content":"Attaches the heap object to an existing heap.","pos":[1441,1486]},{"pos":[1491,1532],"content":"<bpt id=\"p1\">[</bpt>CWin32Heap::Detach<ept id=\"p1\">](#cwin32heap__detach)</ept>","source":"[CWin32Heap::Detach](#cwin32heap__detach)"},{"content":"Detaches the heap object from an existing heap.","pos":[1533,1580]},{"pos":[1585,1622],"content":"<bpt id=\"p1\">[</bpt>CWin32Heap::Free<ept id=\"p1\">](#cwin32heap__free)</ept>","source":"[CWin32Heap::Free](#cwin32heap__free)"},{"content":"Frees memory previously allocated from the heap.","pos":[1623,1671]},{"pos":[1676,1719],"content":"<bpt id=\"p1\">[</bpt>CWin32Heap::GetSize<ept id=\"p1\">](#cwin32heap__getsize)</ept>","source":"[CWin32Heap::GetSize](#cwin32heap__getsize)"},{"content":"Returns the size of a memory block allocated from the heap object.","pos":[1720,1786]},{"pos":[1791,1840],"content":"<bpt id=\"p1\">[</bpt>CWin32Heap::Reallocate<ept id=\"p1\">](#cwin32heap__reallocate)</ept>","source":"[CWin32Heap::Reallocate](#cwin32heap__reallocate)"},{"content":"Reallocates a block of memory from the heap object.","pos":[1841,1892]},{"pos":[1903,1922],"content":"Public Data Members","linkify":"Public Data Members","nodes":[{"content":"Public Data Members","pos":[0,19]}]},{"content":"Name","pos":[1929,1933]},{"content":"Description","pos":[1934,1945]},{"pos":[1983,2032],"content":"<bpt id=\"p1\">[</bpt>CWin32Heap::m_bOwnHeap<ept id=\"p1\">](#cwin32heap__m_bownheap)</ept>","source":"[CWin32Heap::m_bOwnHeap](#cwin32heap__m_bownheap)"},{"content":"A flag used to determine current ownership of the heap handle.","pos":[2033,2095]},{"pos":[2100,2143],"content":"<bpt id=\"p1\">[</bpt>CWin32Heap::m_hHeap<ept id=\"p1\">](#cwin32heap__m_hheap)</ept>","source":"[CWin32Heap::m_hHeap](#cwin32heap__m_hheap)"},{"content":"Handle to the heap object.","pos":[2144,2170]},{"pos":[2180,2187],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CWin32Heap`</ph> implements memory allocation methods using the Win32 heap allocation functions, including <bpt id=\"p1\">[</bpt>HeapAlloc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa366597)</ept> and <bpt id=\"p2\">[</bpt>HeapFree<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/aa366701)</ept>.","pos":[2191,2441],"source":"`CWin32Heap` implements memory allocation methods using the Win32 heap allocation functions, including [HeapAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366597) and [HeapFree](http://msdn.microsoft.com/library/windows/desktop/aa366701)."},{"content":"Unlike other Heap classes, <ph id=\"ph1\">`CWin32Heap`</ph> requires a valid heap handle to be provided before memory is allocated: the other classes default to using the process heap.","pos":[2442,2606],"source":" Unlike other Heap classes, `CWin32Heap` requires a valid heap handle to be provided before memory is allocated: the other classes default to using the process heap."},{"content":"The handle can be supplied to the constructor or to the <bpt id=\"p1\">[</bpt>CWin32Heap::Attach<ept id=\"p1\">](#cwin32heap__attach)</ept> method.","pos":[2607,2712],"source":" The handle can be supplied to the constructor or to the [CWin32Heap::Attach](#cwin32heap__attach) method."},{"content":"See the <bpt id=\"p1\">[</bpt>CWin32Heap::CWin32Heap<ept id=\"p1\">](#cwin32heap__cwin32heap)</ept> method for more details.","pos":[2713,2795],"source":" See the [CWin32Heap::CWin32Heap](#cwin32heap__cwin32heap) method for more details."},{"pos":[2804,2811],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2815,2889],"content":"See the example for <bpt id=\"p1\">[</bpt>IAtlMemMgr<ept id=\"p1\">](../../atl/reference/iatlmemmgr-class.md)</ept>.","source":"See the example for [IAtlMemMgr](../../atl/reference/iatlmemmgr-class.md)."},{"pos":[2898,2919],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2963,2975],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2979,2999],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlmem.h","source":"**Header:** atlmem.h"},{"pos":[3009,3066],"content":"<bpt id=\"p1\">&lt;a name=\"cwin32heap__allocate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWin32Heap::Allocate","linkify":"<a name=\"cwin32heap__allocate\"></a>  CWin32Heap::Allocate","source":"<a name=\"cwin32heap__allocate\"></a>  CWin32Heap::Allocate"},{"content":"Allocates a block of memory from the heap object.","pos":[3070,3119]},{"pos":[3213,3223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The requested number of bytes in the new memory block.","pos":[3239,3293]},{"pos":[3303,3315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a pointer to the newly allocated memory block.","pos":[3319,3373]},{"pos":[3383,3390],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3394,3534],"content":"Call <bpt id=\"p1\">[</bpt>CWin32Heap::Free<ept id=\"p1\">](#cwin32heap__free)</ept> or <bpt id=\"p2\">[</bpt>CWin32Heap::Reallocate<ept id=\"p2\">](#cwin32heap__reallocate)</ept> to free the memory allocated by this method.","source":"Call [CWin32Heap::Free](#cwin32heap__free) or [CWin32Heap::Reallocate](#cwin32heap__reallocate) to free the memory allocated by this method."},{"pos":[3541,3631],"content":"Implemented using <bpt id=\"p1\">[</bpt>HeapAlloc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa366597)</ept>.","source":"Implemented using [HeapAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366597)."},{"pos":[3641,3694],"content":"<bpt id=\"p1\">&lt;a name=\"cwin32heap__attach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWin32Heap::Attach","linkify":"<a name=\"cwin32heap__attach\"></a>  CWin32Heap::Attach","source":"<a name=\"cwin32heap__attach\"></a>  CWin32Heap::Attach"},{"content":"Attaches the heap object to an existing heap.","pos":[3698,3743]},{"pos":[3831,3841],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An existing heap handle.","pos":[3856,3880]},{"content":"A flag indicating if the <ph id=\"ph1\">`CWin32Heap`</ph> object is to take ownership over the resources of the heap.","pos":[3907,4004],"source":" A flag indicating if the `CWin32Heap` object is to take ownership over the resources of the heap."},{"pos":[4014,4021],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4025,4122],"content":"If <ph id=\"ph1\">`bTakeOwnership`</ph> is TRUE, the <ph id=\"ph2\">`CWin32Heap`</ph> object is responsible for deleting the heap handle.","source":"If `bTakeOwnership` is TRUE, the `CWin32Heap` object is responsible for deleting the heap handle."},{"pos":[4132,4193],"content":"<bpt id=\"p1\">&lt;a name=\"cwin32heap__cwin32heap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWin32Heap::CWin32Heap","linkify":"<a name=\"cwin32heap__cwin32heap\"></a>  CWin32Heap::CWin32Heap","source":"<a name=\"cwin32heap__cwin32heap\"></a>  CWin32Heap::CWin32Heap"},{"content":"The constructor.","pos":[4197,4213]},{"pos":[4375,4385],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An existing heap object.","pos":[4400,4424]},{"content":"Flags used in creating the heap.","pos":[4444,4476]},{"content":"<bpt id=\"p1\">*</bpt>nInitialSize<ept id=\"p1\">*</ept>","pos":[4483,4497],"source":"*nInitialSize*"},{"content":"The initial size of the heap.","pos":[4501,4530]},{"content":"The maximum size of the heap.","pos":[4551,4580]},{"pos":[4590,4597],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Before allocating memory, it is necessary to provide the <ph id=\"ph1\">`CWin32Heap`</ph> object with a valid heap handle.","pos":[4601,4703],"source":"Before allocating memory, it is necessary to provide the `CWin32Heap` object with a valid heap handle."},{"content":"The simplest way to achieve this is to use the process heap:","pos":[4704,4764]},{"pos":[4771,4854],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#92<ept id=\"p2\">](../../atl/codesnippet/cpp/cwin32heap-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#92](../../atl/codesnippet/cpp/cwin32heap-class_1.cpp)]"},{"content":"It is also possible to supply an existing heap handle to the constructor, in which case the new object does not take over ownership of the heap.","pos":[4861,5005]},{"content":"The original heap handle will still be valid when the <ph id=\"ph1\">`CWin32Heap`</ph> object is deleted.","pos":[5006,5091],"source":" The original heap handle will still be valid when the `CWin32Heap` object is deleted."},{"pos":[5098,5203],"content":"An existing heap can also be attached to the new object, using <bpt id=\"p1\">[</bpt>CWin32Heap::Attach<ept id=\"p1\">](#cwin32heap__attach)</ept>.","source":"An existing heap can also be attached to the new object, using [CWin32Heap::Attach](#cwin32heap__attach)."},{"content":"If a heap is required where operations are all performed from a single thread, the best way is to create the object as follows:","pos":[5210,5337]},{"pos":[5344,5427],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#93<ept id=\"p2\">](../../atl/codesnippet/cpp/cwin32heap-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#93](../../atl/codesnippet/cpp/cwin32heap-class_2.cpp)]"},{"pos":[5434,5611],"content":"The parameter <bpt id=\"p1\">**</bpt>HEAP_NO_SERIALIZE<ept id=\"p1\">**</ept> specifies that mutual exclusion will not be used when the heap functions allocate and free memory, with an according increase in performance.","source":"The parameter **HEAP_NO_SERIALIZE** specifies that mutual exclusion will not be used when the heap functions allocate and free memory, with an according increase in performance."},{"content":"The third parameter defaults to 0, which allows the heap to grow as required.","pos":[5618,5695]},{"content":"See <bpt id=\"p1\">[</bpt>HeapCreate<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa366599\\(v=vs.85\\).aspx)</ept> for an explanation of the memory sizes and flags.","pos":[5696,5838],"source":" See [HeapCreate](http://msdn.microsoft.com/library/windows/desktop/aa366599\\(v=vs.85\\).aspx) for an explanation of the memory sizes and flags."},{"pos":[5848,5915],"content":"<bpt id=\"p1\">&lt;a name=\"cwin32heap___dtorcwin32heap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWin32Heap::~CWin32Heap","linkify":"<a name=\"cwin32heap___dtorcwin32heap\"></a>  CWin32Heap::~CWin32Heap","source":"<a name=\"cwin32heap___dtorcwin32heap\"></a>  CWin32Heap::~CWin32Heap"},{"content":"The destructor.","pos":[5919,5934]},{"pos":[5980,5987],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5991,6069],"content":"Destroys the heap handle if the <ph id=\"ph1\">`CWin32Heap`</ph> object has ownership of the heap.","source":"Destroys the heap handle if the `CWin32Heap` object has ownership of the heap."},{"pos":[6079,6132],"content":"<bpt id=\"p1\">&lt;a name=\"cwin32heap__detach\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWin32Heap::Detach","linkify":"<a name=\"cwin32heap__detach\"></a>  CWin32Heap::Detach","source":"<a name=\"cwin32heap__detach\"></a>  CWin32Heap::Detach"},{"content":"Detaches the heap object from an existing heap.","pos":[6136,6183]},{"pos":[6231,6243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the handle to the heap to which the object was previously attached.","pos":[6247,6322]},{"pos":[6332,6381],"content":"<bpt id=\"p1\">&lt;a name=\"cwin32heap__free\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWin32Heap::Free","linkify":"<a name=\"cwin32heap__free\"></a>  CWin32Heap::Free","source":"<a name=\"cwin32heap__free\"></a>  CWin32Heap::Free"},{"pos":[6385,6535],"content":"Frees memory previously allocated from the heap by <bpt id=\"p1\">[</bpt>CWin32Heap::Allocate<ept id=\"p1\">](#cwin32heap__allocate)</ept> or <bpt id=\"p2\">[</bpt>CWin32Heap::Reallocate<ept id=\"p2\">](#cwin32heap__reallocate)</ept>.","source":"Frees memory previously allocated from the heap by [CWin32Heap::Allocate](#cwin32heap__allocate) or [CWin32Heap::Reallocate](#cwin32heap__reallocate)."},{"pos":[6594,6604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the block of memory to free.","pos":[6615,6654]},{"content":"NULL is a valid value and does nothing.","pos":[6655,6694]},{"pos":[6704,6759],"content":"<bpt id=\"p1\">&lt;a name=\"cwin32heap__getsize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWin32Heap::GetSize","linkify":"<a name=\"cwin32heap__getsize\"></a>  CWin32Heap::GetSize","source":"<a name=\"cwin32heap__getsize\"></a>  CWin32Heap::GetSize"},{"content":"Returns the size of a memory block allocated from the heap object.","pos":[6763,6829]},{"pos":[6893,6903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the memory block whose size the method will obtain.","pos":[6914,6976]},{"content":"This is a pointer returned by <bpt id=\"p1\">[</bpt>CWin32Heap::Allocate<ept id=\"p1\">](#cwin32heap__allocate)</ept> or <bpt id=\"p2\">[</bpt>CWin32Heap::Reallocate<ept id=\"p2\">](#cwin32heap__reallocate)</ept>.","pos":[6977,7106],"source":" This is a pointer returned by [CWin32Heap::Allocate](#cwin32heap__allocate) or [CWin32Heap::Reallocate](#cwin32heap__reallocate)."},{"pos":[7116,7128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the size, in bytes, of the allocated memory block.","pos":[7132,7190]},{"pos":[7200,7261],"content":"<bpt id=\"p1\">&lt;a name=\"cwin32heap__m_bownheap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWin32Heap::m_bOwnHeap","linkify":"<a name=\"cwin32heap__m_bownheap\"></a>  CWin32Heap::m_bOwnHeap","source":"<a name=\"cwin32heap__m_bownheap\"></a>  CWin32Heap::m_bOwnHeap"},{"pos":[7265,7369],"content":"A flag used to determine current ownership of the heap handle stored in <bpt id=\"p1\">[</bpt>m_hHeap<ept id=\"p1\">](#cwin32heap__m_hheap)</ept>.","source":"A flag used to determine current ownership of the heap handle stored in [m_hHeap](#cwin32heap__m_hheap)."},{"pos":[7409,7464],"content":"<bpt id=\"p1\">&lt;a name=\"cwin32heap__m_hheap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWin32Heap::m_hHeap","linkify":"<a name=\"cwin32heap__m_hheap\"></a>  CWin32Heap::m_hHeap","source":"<a name=\"cwin32heap__m_hheap\"></a>  CWin32Heap::m_hHeap"},{"content":"Handle to the heap object.","pos":[7468,7494]},{"pos":[7533,7540],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A variable used to store a handle to the heap object.","pos":[7544,7597]},{"pos":[7607,7668],"content":"<bpt id=\"p1\">&lt;a name=\"cwin32heap__reallocate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CWin32Heap::Reallocate","linkify":"<a name=\"cwin32heap__reallocate\"></a>  CWin32Heap::Reallocate","source":"<a name=\"cwin32heap__reallocate\"></a>  CWin32Heap::Reallocate"},{"content":"Reallocates a block of memory from the heap object.","pos":[7672,7723]},{"pos":[7835,7845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to the block of memory to reallocate.","pos":[7856,7901]},{"content":"The new size in bytes of the allocated block.","pos":[7920,7965]},{"content":"The block can be made larger or smaller.","pos":[7966,8006]},{"pos":[8016,8028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a pointer to the newly allocated memory block.","pos":[8032,8086]},{"pos":[8096,8103],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8107,8275],"content":"If <ph id=\"ph1\">`p`</ph> is NULL, it's assumed that the memory block has not yet been allocated and <bpt id=\"p1\">[</bpt>CWin32Heap::Allocate<ept id=\"p1\">](#cwin32heap__allocate)</ept> is called, with an argument of <ph id=\"ph2\">`nBytes`</ph>.","source":"If `p` is NULL, it's assumed that the memory block has not yet been allocated and [CWin32Heap::Allocate](#cwin32heap__allocate) is called, with an argument of `nBytes`."},{"pos":[8284,8292],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Class Overview<ept id=\"p1\">](../../atl/atl-class-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[8296,8346],"source":"[Class Overview](../../atl/atl-class-overview.md) "},{"content":"<bpt id=\"p1\"> [</bpt>IAtlMemMgr Class<ept id=\"p1\">](../../atl/reference/iatlmemmgr-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[8349,8410],"source":" [IAtlMemMgr Class](../../atl/reference/iatlmemmgr-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CLocalHeap Class<ept id=\"p1\">](../../atl/reference/clocalheap-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[8413,8474],"source":" [CLocalHeap Class](../../atl/reference/clocalheap-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CGlobalHeap Class<ept id=\"p1\">](../../atl/reference/cglobalheap-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[8477,8540],"source":" [CGlobalHeap Class](../../atl/reference/cglobalheap-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CCRTHeap Class<ept id=\"p1\">](../../atl/reference/ccrtheap-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[8543,8600],"source":" [CCRTHeap Class](../../atl/reference/ccrtheap-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CComHeap Class<ept id=\"p1\">](../../atl/reference/ccomheap-class.md)</ept>","pos":[8603,8659],"source":" [CComHeap Class](../../atl/reference/ccomheap-class.md)"}],"content":"---\ntitle: \"CWin32Heap Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CWin32Heap\"\n  - \"ATL.CWin32Heap\"\n  - \"CWin32Heap\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CWin32Heap class\"\nms.assetid: 69176022-ed98-4e3b-96d8-116b0c58ac95\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CWin32Heap Class\nThis class implements [IAtlMemMgr](../../atl/reference/iatlmemmgr-class.md) using the Win32 heap allocation functions.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\nclass CWin32Heap : public IAtlMemMgr\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWin32Heap::CWin32Heap](#cwin32heap__cwin32heap)|The constructor.|  \n|[CWin32Heap::~CWin32Heap](#cwin32heap___dtorcwin32heap)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWin32Heap::Allocate](#cwin32heap__allocate)|Allocates a block of memory from the heap object.|  \n|[CWin32Heap::Attach](#cwin32heap__attach)|Attaches the heap object to an existing heap.|  \n|[CWin32Heap::Detach](#cwin32heap__detach)|Detaches the heap object from an existing heap.|  \n|[CWin32Heap::Free](#cwin32heap__free)|Frees memory previously allocated from the heap.|  \n|[CWin32Heap::GetSize](#cwin32heap__getsize)|Returns the size of a memory block allocated from the heap object.|  \n|[CWin32Heap::Reallocate](#cwin32heap__reallocate)|Reallocates a block of memory from the heap object.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWin32Heap::m_bOwnHeap](#cwin32heap__m_bownheap)|A flag used to determine current ownership of the heap handle.|  \n|[CWin32Heap::m_hHeap](#cwin32heap__m_hheap)|Handle to the heap object.|  \n  \n## Remarks  \n `CWin32Heap` implements memory allocation methods using the Win32 heap allocation functions, including [HeapAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366597) and [HeapFree](http://msdn.microsoft.com/library/windows/desktop/aa366701). Unlike other Heap classes, `CWin32Heap` requires a valid heap handle to be provided before memory is allocated: the other classes default to using the process heap. The handle can be supplied to the constructor or to the [CWin32Heap::Attach](#cwin32heap__attach) method. See the [CWin32Heap::CWin32Heap](#cwin32heap__cwin32heap) method for more details.  \n  \n## Example  \n See the example for [IAtlMemMgr](../../atl/reference/iatlmemmgr-class.md).  \n  \n## Inheritance Hierarchy  \n `IAtlMemMgr`  \n  \n `CWin32Heap`  \n  \n## Requirements  \n **Header:** atlmem.h  \n  \n##  <a name=\"cwin32heap__allocate\"></a>  CWin32Heap::Allocate  \n Allocates a block of memory from the heap object.  \n  \n```\nvirtual __declspec(allocator) void* Allocate(size_t   nBytes) throw();\n```  \n  \n### Parameters  \n `nBytes`  \n The requested number of bytes in the new memory block.  \n  \n### Return Value  \n Returns a pointer to the newly allocated memory block.  \n  \n### Remarks  \n Call [CWin32Heap::Free](#cwin32heap__free) or [CWin32Heap::Reallocate](#cwin32heap__reallocate) to free the memory allocated by this method.  \n  \n Implemented using [HeapAlloc](http://msdn.microsoft.com/library/windows/desktop/aa366597).  \n  \n##  <a name=\"cwin32heap__attach\"></a>  CWin32Heap::Attach  \n Attaches the heap object to an existing heap.  \n  \n```\nvoid Attach(\n    HANDLE hHeap,\n    bool bTakeOwnership) throw();\n```  \n  \n### Parameters  \n `hHeap`  \n An existing heap handle.  \n  \n `bTakeOwnership`  \n A flag indicating if the `CWin32Heap` object is to take ownership over the resources of the heap.  \n  \n### Remarks  \n If `bTakeOwnership` is TRUE, the `CWin32Heap` object is responsible for deleting the heap handle.  \n  \n##  <a name=\"cwin32heap__cwin32heap\"></a>  CWin32Heap::CWin32Heap  \n The constructor.  \n  \n```\nCWin32Heap() throw();\nCWin32Heap(\n HANDLE  hHeap) throw();\nCWin32Heap(\n DWORD  dwFlags,\n    size_t nInitialSize,\n    size_t nMaxSize = 0);\n```  \n  \n### Parameters  \n `hHeap`  \n An existing heap object.  \n  \n `dwFlags`  \n Flags used in creating the heap.  \n  \n *nInitialSize*  \n The initial size of the heap.  \n  \n `nMaxSize`  \n The maximum size of the heap.  \n  \n### Remarks  \n Before allocating memory, it is necessary to provide the `CWin32Heap` object with a valid heap handle. The simplest way to achieve this is to use the process heap:  \n  \n [!code-cpp[NVC_ATL_Utilities#92](../../atl/codesnippet/cpp/cwin32heap-class_1.cpp)]  \n  \n It is also possible to supply an existing heap handle to the constructor, in which case the new object does not take over ownership of the heap. The original heap handle will still be valid when the `CWin32Heap` object is deleted.  \n  \n An existing heap can also be attached to the new object, using [CWin32Heap::Attach](#cwin32heap__attach).  \n  \n If a heap is required where operations are all performed from a single thread, the best way is to create the object as follows:  \n  \n [!code-cpp[NVC_ATL_Utilities#93](../../atl/codesnippet/cpp/cwin32heap-class_2.cpp)]  \n  \n The parameter **HEAP_NO_SERIALIZE** specifies that mutual exclusion will not be used when the heap functions allocate and free memory, with an according increase in performance.  \n  \n The third parameter defaults to 0, which allows the heap to grow as required. See [HeapCreate](http://msdn.microsoft.com/library/windows/desktop/aa366599\\(v=vs.85\\).aspx) for an explanation of the memory sizes and flags.  \n  \n##  <a name=\"cwin32heap___dtorcwin32heap\"></a>  CWin32Heap::~CWin32Heap  \n The destructor.  \n  \n```\n~CWin32Heap() throw();\n```  \n  \n### Remarks  \n Destroys the heap handle if the `CWin32Heap` object has ownership of the heap.  \n  \n##  <a name=\"cwin32heap__detach\"></a>  CWin32Heap::Detach  \n Detaches the heap object from an existing heap.  \n  \n```\nHANDLE Detach() throw();\n```  \n  \n### Return Value  \n Returns the handle to the heap to which the object was previously attached.  \n  \n##  <a name=\"cwin32heap__free\"></a>  CWin32Heap::Free  \n Frees memory previously allocated from the heap by [CWin32Heap::Allocate](#cwin32heap__allocate) or [CWin32Heap::Reallocate](#cwin32heap__reallocate).  \n  \n```\nvirtual void Free(void* p) throw();\n```  \n  \n### Parameters  \n `p`  \n Pointer to the block of memory to free. NULL is a valid value and does nothing.  \n  \n##  <a name=\"cwin32heap__getsize\"></a>  CWin32Heap::GetSize  \n Returns the size of a memory block allocated from the heap object.  \n  \n```\nvirtual size_t GetSize(void* p) throw();\n```  \n  \n### Parameters  \n `p`  \n Pointer to the memory block whose size the method will obtain. This is a pointer returned by [CWin32Heap::Allocate](#cwin32heap__allocate) or [CWin32Heap::Reallocate](#cwin32heap__reallocate).  \n  \n### Return Value  \n Returns the size, in bytes, of the allocated memory block.  \n  \n##  <a name=\"cwin32heap__m_bownheap\"></a>  CWin32Heap::m_bOwnHeap  \n A flag used to determine current ownership of the heap handle stored in [m_hHeap](#cwin32heap__m_hheap).  \n  \n```\nbool m_bOwnHeap;\n```  \n  \n##  <a name=\"cwin32heap__m_hheap\"></a>  CWin32Heap::m_hHeap  \n Handle to the heap object.  \n  \n```\nHANDLE m_hHeap;\n```  \n  \n### Remarks  \n A variable used to store a handle to the heap object.  \n  \n##  <a name=\"cwin32heap__reallocate\"></a>  CWin32Heap::Reallocate  \n Reallocates a block of memory from the heap object.  \n  \n```\nvirtual __declspec(allocator) void* Reallocate(\n    void* p,\n    size_t nBytes) throw();\n```  \n  \n### Parameters  \n `p`  \n Pointer to the block of memory to reallocate.  \n  \n `nBytes`  \n The new size in bytes of the allocated block. The block can be made larger or smaller.  \n  \n### Return Value  \n Returns a pointer to the newly allocated memory block.  \n  \n### Remarks  \n If `p` is NULL, it's assumed that the memory block has not yet been allocated and [CWin32Heap::Allocate](#cwin32heap__allocate) is called, with an argument of `nBytes`.  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)   \n [IAtlMemMgr Class](../../atl/reference/iatlmemmgr-class.md)   \n [CLocalHeap Class](../../atl/reference/clocalheap-class.md)   \n [CGlobalHeap Class](../../atl/reference/cglobalheap-class.md)   \n [CCRTHeap Class](../../atl/reference/ccrtheap-class.md)   \n [CComHeap Class](../../atl/reference/ccomheap-class.md)\n"}