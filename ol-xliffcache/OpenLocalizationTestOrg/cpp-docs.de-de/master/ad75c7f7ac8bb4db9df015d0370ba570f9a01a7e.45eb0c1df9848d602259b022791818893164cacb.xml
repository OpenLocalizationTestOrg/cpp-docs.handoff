{"nodes":[{"pos":[12,42],"content":"CObject Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CObject Class | Microsoft Docs","pos":[0,30]}]},{"pos":[688,701],"content":"CObject Class","linkify":"CObject Class","nodes":[{"content":"CObject Class","pos":[0,13]}]},{"content":"The principal base class for the Microsoft Foundation Class Library.","pos":[702,770]},{"pos":[779,785],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[838,845],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[855,877],"content":"Protected Constructors","linkify":"Protected Constructors","nodes":[{"content":"Protected Constructors","pos":[0,22]}]},{"content":"Name","pos":[884,888]},{"content":"Description","pos":[889,900]},{"pos":[938,975],"content":"<bpt id=\"p1\">[</bpt>CObject::CObject<ept id=\"p1\">](#cobject__cobject)</ept>","source":"[CObject::CObject](#cobject__cobject)"},{"content":"Default constructor.","pos":[976,996]},{"pos":[1007,1021],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1028,1032]},{"content":"Description","pos":[1033,1044]},{"pos":[1082,1127],"content":"<bpt id=\"p1\">[</bpt>CObject::AssertValid<ept id=\"p1\">](#cobject__assertvalid)</ept>","source":"[CObject::AssertValid](#cobject__assertvalid)"},{"content":"Validates this object's integrity.","pos":[1128,1162]},{"pos":[1167,1198],"content":"<bpt id=\"p1\">[</bpt>CObject::Dump<ept id=\"p1\">](#cobject__dump)</ept>","source":"[CObject::Dump](#cobject__dump)"},{"content":"Produces a diagnostic dump of this object.","pos":[1199,1241]},{"pos":[1246,1299],"content":"<bpt id=\"p1\">[</bpt>CObject::GetRuntimeClass<ept id=\"p1\">](#cobject__getruntimeclass)</ept>","source":"[CObject::GetRuntimeClass](#cobject__getruntimeclass)"},{"pos":[1300,1375],"content":"Returns the <ph id=\"ph1\">`CRuntimeClass`</ph> structure corresponding to this object's class.","source":"Returns the `CRuntimeClass` structure corresponding to this object's class."},{"pos":[1380,1419],"content":"<bpt id=\"p1\">[</bpt>CObject::IsKindOf<ept id=\"p1\">](#cobject__iskindof)</ept>","source":"[CObject::IsKindOf](#cobject__iskindof)"},{"content":"Tests this object's relationship to a given class.","pos":[1420,1470]},{"pos":[1475,1526],"content":"<bpt id=\"p1\">[</bpt>CObject::IsSerializable<ept id=\"p1\">](#cobject__isserializable)</ept>","source":"[CObject::IsSerializable](#cobject__isserializable)"},{"content":"Tests to see whether this object can be serialized.","pos":[1527,1578]},{"pos":[1583,1624],"content":"<bpt id=\"p1\">[</bpt>CObject::Serialize<ept id=\"p1\">](#cobject__serialize)</ept>","source":"[CObject::Serialize](#cobject__serialize)"},{"content":"Loads or stores an object from/to an archive.","pos":[1625,1670]},{"pos":[1681,1697],"content":"Public Operators","linkify":"Public Operators","nodes":[{"content":"Public Operators","pos":[0,16]}]},{"content":"Name","pos":[1704,1708]},{"content":"Description","pos":[1709,1720]},{"pos":[1758,1811],"content":"<bpt id=\"p1\">[</bpt>CObject::operator delete<ept id=\"p1\">](#cobject__operator_delete)</ept>","source":"[CObject::operator delete](#cobject__operator_delete)"},{"pos":[1812,1840],"content":"Special <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> operator.","source":"Special **delete** operator."},{"pos":[1845,1892],"content":"<bpt id=\"p1\">[</bpt>CObject::operator new<ept id=\"p1\">](#cobject__operator_new)</ept>","source":"[CObject::operator new](#cobject__operator_new)"},{"pos":[1893,1918],"content":"Special <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> operator.","source":"Special **new** operator."},{"pos":[1928,1935],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It serves as the root not only for library classes such as <ph id=\"ph1\">`CFile`</ph> and <ph id=\"ph2\">`CObList`</ph>, but also for the classes that you write.","pos":[1939,2061],"source":"It serves as the root not only for library classes such as `CFile` and `CObList`, but also for the classes that you write."},{"content":"<ph id=\"ph1\">`CObject`</ph> provides basic services, including","pos":[2062,2106],"source":"`CObject` provides basic services, including"},{"content":"Serialization support","pos":[2116,2137]},{"content":"Run-time class information","pos":[2147,2173]},{"content":"Object diagnostic output","pos":[2183,2207]},{"content":"Compatibility with collection classes","pos":[2217,2254]},{"content":"Note that <ph id=\"ph1\">`CObject`</ph> does not support multiple inheritance.","pos":[2261,2319],"source":"Note that `CObject` does not support multiple inheritance."},{"content":"Your derived classes can have only one <ph id=\"ph1\">`CObject`</ph> base class, and that <ph id=\"ph2\">`CObject`</ph> must be leftmost in the hierarchy.","pos":[2320,2434],"source":" Your derived classes can have only one `CObject` base class, and that `CObject` must be leftmost in the hierarchy."},{"content":"It is permissible, however, to have structures and non- <ph id=\"ph1\">`CObject`</ph>-derived classes in right-hand multiple-inheritance branches.","pos":[2435,2561],"source":" It is permissible, however, to have structures and non- `CObject`-derived classes in right-hand multiple-inheritance branches."},{"pos":[2568,2711],"content":"You will realize major benefits from <ph id=\"ph1\">`CObject`</ph> derivation if you use some of the optional macros in your class implementation and declarations.","source":"You will realize major benefits from `CObject` derivation if you use some of the optional macros in your class implementation and declarations."},{"content":"The first-level macros, <bpt id=\"p1\">[</bpt>DECLARE_DYNAMIC<ept id=\"p1\">](run-time-object-model-services.md#declare_dynamic)</ept> and <bpt id=\"p2\">[</bpt>IMPLEMENT_DYNAMIC<ept id=\"p2\">](run-time-object-model-services.md#implement_dynamic)</ept>, permit run-time access to the class name and its position in the hierarchy.","pos":[2718,2964],"source":"The first-level macros, [DECLARE_DYNAMIC](run-time-object-model-services.md#declare_dynamic) and [IMPLEMENT_DYNAMIC](run-time-object-model-services.md#implement_dynamic), permit run-time access to the class name and its position in the hierarchy."},{"content":"This, in turn, allows meaningful diagnostic dumping.","pos":[2965,3017]},{"pos":[3024,3319],"content":"The second-level macros, <bpt id=\"p1\">[</bpt>DECLARE_SERIAL<ept id=\"p1\">](run-time-object-model-services.md#declare_serial)</ept> and <bpt id=\"p2\">[</bpt>IMPLEMENT_SERIAL<ept id=\"p2\">](run-time-object-model-services.md#implement_serial)</ept>, include all the functionality of the first-level macros, and they enable an object to be \"serialized\" to and from an \"archive.\"","source":"The second-level macros, [DECLARE_SERIAL](run-time-object-model-services.md#declare_serial) and [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial), include all the functionality of the first-level macros, and they enable an object to be \"serialized\" to and from an \"archive.\""},{"pos":[3326,3537],"content":"For information about deriving Microsoft Foundation classes and C++ classes in general and using <ph id=\"ph1\">`CObject`</ph>, see <bpt id=\"p1\">[</bpt>Using CObject<ept id=\"p1\">](../../mfc/using-cobject.md)</ept> and <bpt id=\"p2\">[</bpt>Serialization<ept id=\"p2\">](../../mfc/serialization-in-mfc.md)</ept>.","source":"For information about deriving Microsoft Foundation classes and C++ classes in general and using `CObject`, see [Using CObject](../../mfc/using-cobject.md) and [Serialization](../../mfc/serialization-in-mfc.md)."},{"pos":[3546,3567],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3589,3601],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3605,3622],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afx.h","source":"**Header:** afx.h"},{"pos":[3632,3689],"content":"<bpt id=\"p1\">&lt;a name=\"cobject__assertvalid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObject::AssertValid","linkify":"<a name=\"cobject__assertvalid\"></a>  CObject::AssertValid","source":"<a name=\"cobject__assertvalid\"></a>  CObject::AssertValid"},{"content":"Validates this object's integrity.","pos":[3693,3727]},{"pos":[3789,3796],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`AssertValid`</ph> performs a validity check on this object by checking its internal state.","pos":[3800,3886],"source":"`AssertValid` performs a validity check on this object by checking its internal state."},{"content":"In the Debug version of the library, <ph id=\"ph1\">`AssertValid`</ph> may assert and thus terminate the program with a message that lists the line number and filename where the assertion failed.","pos":[3887,4062],"source":" In the Debug version of the library, `AssertValid` may assert and thus terminate the program with a message that lists the line number and filename where the assertion failed."},{"content":"When you write your own class, you should override the <ph id=\"ph1\">`AssertValid`</ph> function to provide diagnostic services for yourself and other users of your class.","pos":[4069,4221],"source":"When you write your own class, you should override the `AssertValid` function to provide diagnostic services for yourself and other users of your class."},{"content":"The overridden <ph id=\"ph1\">`AssertValid`</ph> usually calls the <ph id=\"ph2\">`AssertValid`</ph> function of its base class before checking data members unique to the derived class.","pos":[4222,4367],"source":" The overridden `AssertValid` usually calls the `AssertValid` function of its base class before checking data members unique to the derived class."},{"content":"Because <ph id=\"ph1\">`AssertValid`</ph> is a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> function, you are not permitted to change the object state during the test.","pos":[4374,4486],"source":"Because `AssertValid` is a **const** function, you are not permitted to change the object state during the test."},{"content":"Your own derived class <ph id=\"ph1\">`AssertValid`</ph> functions should not throw exceptions but rather should assert whether they detect invalid object data.","pos":[4487,4627],"source":" Your own derived class `AssertValid` functions should not throw exceptions but rather should assert whether they detect invalid object data."},{"content":"The definition of \"validity\" depends on the object's class.","pos":[4634,4693]},{"content":"As a rule, the function should perform a \"shallow check.\"","pos":[4694,4751]},{"content":"That is, if an object contains pointers to other objects, it should check to see whether the pointers are not null, but it should not perform validity testing on the objects referred to by the pointers.","pos":[4752,4954]},{"pos":[4964,4971],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4975,5118],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all <ph id=\"ph2\">`CObject`</ph> examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all `CObject` examples."},{"pos":[5125,5207],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCObjectSample#7<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobject-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCObjectSample#7](../../mfc/codesnippet/cpp/cobject-class_1.cpp)]"},{"pos":[5214,5303],"content":"For another example, see <bpt id=\"p1\">[</bpt>AfxDoForAllObjects<ept id=\"p1\">](diagnostic-services.md#afxdoforallobjects)</ept>.","source":"For another example, see [AfxDoForAllObjects](diagnostic-services.md#afxdoforallobjects)."},{"pos":[5313,5362],"content":"<bpt id=\"p1\">&lt;a name=\"cobject__cobject\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObject::CObject","linkify":"<a name=\"cobject__cobject\"></a>  CObject::CObject","source":"<a name=\"cobject__cobject\"></a>  CObject::CObject"},{"pos":[5366,5422],"content":"These functions are the standard <ph id=\"ph1\">`CObject`</ph> constructors.","source":"These functions are the standard `CObject` constructors."},{"pos":[5496,5506],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>objectSrc<ept id=\"p1\">*</ept>","pos":[5510,5521],"source":"*objectSrc*"},{"content":"A reference to another <ph id=\"ph1\">`CObject`</ph>","pos":[5525,5557],"source":" A reference to another `CObject`"},{"pos":[5567,5574],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default version is automatically called by the constructor of your derived class.","pos":[5578,5663]},{"content":"If your class is serializable (it incorporates the <ph id=\"ph1\">`IMPLEMENT_SERIAL`</ph> macro), then you must have a default constructor (a constructor with no arguments) in your class declaration.","pos":[5670,5849],"source":"If your class is serializable (it incorporates the `IMPLEMENT_SERIAL` macro), then you must have a default constructor (a constructor with no arguments) in your class declaration."},{"content":"If you do not need a default constructor, declare a private or protected \"empty\" constructor.","pos":[5850,5943]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using CObject<ept id=\"p1\">](../../mfc/using-cobject.md)</ept>.","pos":[5944,6014],"source":" For more information, see [Using CObject](../../mfc/using-cobject.md)."},{"content":"The standard C++ default class copy constructor does a member-by-member copy.","pos":[6021,6098]},{"content":"The presence of the private <ph id=\"ph1\">`CObject`</ph> copy constructor guarantees a compiler error message if the copy constructor of your class is needed but not available.","pos":[6099,6256],"source":" The presence of the private `CObject` copy constructor guarantees a compiler error message if the copy constructor of your class is needed but not available."},{"content":"You must therefore provide a copy constructor if your class requires this capability.","pos":[6257,6342]},{"pos":[6352,6359],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6363,6506],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in the <ph id=\"ph2\">`CObject`</ph> examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in the `CObject` examples."},{"pos":[6513,6595],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCObjectSample#8<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobject-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCObjectSample#8](../../mfc/codesnippet/cpp/cobject-class_2.cpp)]"},{"pos":[6605,6648],"content":"<bpt id=\"p1\">&lt;a name=\"cobject__dump\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObject::Dump","linkify":"<a name=\"cobject__dump\"></a>  CObject::Dump","source":"<a name=\"cobject__dump\"></a>  CObject::Dump"},{"pos":[6652,6756],"content":"Dumps the contents of your object to a <bpt id=\"p1\">[</bpt>CDumpContext<ept id=\"p1\">](../../mfc/reference/cdumpcontext-class.md)</ept> object.","source":"Dumps the contents of your object to a [CDumpContext](../../mfc/reference/cdumpcontext-class.md) object."},{"pos":[6827,6837],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The diagnostic dump context for dumping, usually <ph id=\"ph1\">`afxDump`</ph>.","pos":[6849,6908],"source":" The diagnostic dump context for dumping, usually `afxDump`."},{"pos":[6918,6925],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When you write your own class, you should override the <ph id=\"ph1\">`Dump`</ph> function to provide diagnostic services for yourself and other users of your class.","pos":[6929,7074],"source":"When you write your own class, you should override the `Dump` function to provide diagnostic services for yourself and other users of your class."},{"content":"The overridden <ph id=\"ph1\">`Dump`</ph> usually calls the <ph id=\"ph2\">`Dump`</ph> function of its base class before printing data members unique to the derived class.","pos":[7075,7206],"source":" The overridden `Dump` usually calls the `Dump` function of its base class before printing data members unique to the derived class."},{"content":"<ph id=\"ph1\">`CObject::Dump`</ph> prints the class name if your class uses the <ph id=\"ph2\">`IMPLEMENT_DYNAMIC`</ph> or <ph id=\"ph3\">`IMPLEMENT_SERIAL`</ph> macro.","pos":[7207,7316],"source":"`CObject::Dump` prints the class name if your class uses the `IMPLEMENT_DYNAMIC` or `IMPLEMENT_SERIAL` macro."},{"pos":[7324,7418],"content":"[!NOTE]\n Your `Dump` function should not print a newline character at the end of its output.","leadings":["","> "],"nodes":[{"content":"Your <ph id=\"ph1\">`Dump`</ph> function should not print a newline character at the end of its output.","pos":[9,92],"source":" Your `Dump` function should not print a newline character at the end of its output."}]},{"content":"<ph id=\"ph1\">`Dump`</ph> calls make sense only in the Debug version of the Microsoft Foundation Class Library.","pos":[7425,7517],"source":"`Dump` calls make sense only in the Debug version of the Microsoft Foundation Class Library."},{"content":"You should bracket calls, function declarations, and function implementations with <bpt id=\"p1\">**</bpt>#ifdef _DEBUG<ept id=\"p1\">**</ept><ph id=\"ph1\">/ </ph><ph id=\"ph2\">`#endif`</ph> statements for conditional compilation.","pos":[7518,7668],"source":" You should bracket calls, function declarations, and function implementations with **#ifdef _DEBUG**/ `#endif` statements for conditional compilation."},{"pos":[7675,7778],"content":"Since <ph id=\"ph1\">`Dump`</ph> is a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> function, you are not permitted to change the object state during the dump.","source":"Since `Dump` is a **const** function, you are not permitted to change the object state during the dump."},{"pos":[7785,7953],"content":"The <bpt id=\"p1\">[</bpt>CDumpContext insertion (&lt;&lt;) operator<ept id=\"p1\">](../../mfc/reference/cdumpcontext-class.md#cdumpcontext__operator__lt__lt_)</ept> calls <ph id=\"ph1\">`Dump`</ph> when a <ph id=\"ph2\">`CObject`</ph> pointer is inserted.","source":"The [CDumpContext insertion (<<) operator](../../mfc/reference/cdumpcontext-class.md#cdumpcontext__operator__lt__lt_) calls `Dump` when a `CObject` pointer is inserted."},{"content":"<ph id=\"ph1\">`Dump`</ph> permits only \"acyclic\" dumping of objects.","pos":[7960,8009],"source":"`Dump` permits only \"acyclic\" dumping of objects."},{"content":"You can dump a list of objects, for example, but if one of the objects is the list itself, you will eventually overflow the stack.","pos":[8010,8140]},{"pos":[8150,8157],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8161,8304],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all <ph id=\"ph2\">`CObject`</ph> examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all `CObject` examples."},{"pos":[8311,8393],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCObjectSample#9<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobject-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCObjectSample#9](../../mfc/codesnippet/cpp/cobject-class_3.cpp)]"},{"pos":[8403,8468],"content":"<bpt id=\"p1\">&lt;a name=\"cobject__getruntimeclass\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObject::GetRuntimeClass","linkify":"<a name=\"cobject__getruntimeclass\"></a>  CObject::GetRuntimeClass","source":"<a name=\"cobject__getruntimeclass\"></a>  CObject::GetRuntimeClass"},{"pos":[8472,8547],"content":"Returns the <ph id=\"ph1\">`CRuntimeClass`</ph> structure corresponding to this object's class.","source":"Returns the `CRuntimeClass` structure corresponding to this object's class."},{"pos":[8623,8635],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8639,8783],"content":"A pointer to the <bpt id=\"p1\">[</bpt>CRuntimeClass<ept id=\"p1\">](../../mfc/reference/cruntimeclass-structure.md)</ept> structure corresponding to this object's class; never <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","source":"A pointer to the [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) structure corresponding to this object's class; never **NULL**."},{"pos":[8793,8800],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"There is one <ph id=\"ph1\">`CRuntimeClass`</ph> structure for each <ph id=\"ph2\">`CObject`</ph>-derived class.","pos":[8804,8876],"source":"There is one `CRuntimeClass` structure for each `CObject`-derived class."},{"content":"The structure members are as follows:","pos":[8877,8914]},{"pos":[8922,9006],"content":"<bpt id=\"p1\">**</bpt>LPCSTR m_lpszClassName<ept id=\"p1\">**</ept> A null-terminated string containing the ASCII class name.","source":"**LPCSTR m_lpszClassName** A null-terminated string containing the ASCII class name."},{"content":"<bpt id=\"p1\">**</bpt>int m_nObjectSize<ept id=\"p1\">**</ept> The size of the object, in bytes.","pos":[9014,9069],"source":"**int m_nObjectSize** The size of the object, in bytes."},{"content":"If the object has data members that point to allocated memory, the size of that memory is not included.","pos":[9070,9173]},{"content":"<bpt id=\"p1\">**</bpt>UINT m_wSchema<ept id=\"p1\">**</ept> The schema number ( – 1 for nonserializable classes).","pos":[9181,9253],"source":"**UINT m_wSchema** The schema number ( – 1 for nonserializable classes)."},{"content":"See the <bpt id=\"p1\">[</bpt>IMPLEMENT_SERIAL<ept id=\"p1\">](run-time-object-model-services.md#implement_serial)</ept> macro for a description of schema number.","pos":[9254,9374],"source":" See the [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro for a description of schema number."},{"pos":[9382,9594],"content":"<bpt id=\"p1\">**</bpt>CObject<ph id=\"ph1\">\\*</ph> ( PASCAL<ph id=\"ph2\">\\*</ph> m_pfnCreateObject )( )<ept id=\"p1\">**</ept> A function pointer to the default constructor that creates an object of your class (valid only if the class supports dynamic creation; otherwise, returns <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>).","source":"**CObject\\* ( PASCAL\\* m_pfnCreateObject )( )** A function pointer to the default constructor that creates an object of your class (valid only if the class supports dynamic creation; otherwise, returns **NULL**)."},{"pos":[9602,9814],"content":"<bpt id=\"p1\">**</bpt>CRuntimeClass<ph id=\"ph1\">\\*</ph> ( PASCAL<ph id=\"ph2\">\\*</ph> m_pfn_GetBaseClass )( )<ept id=\"p1\">**</ept> If your application is dynamically linked to the AFXDLL version of MFC, a pointer to a function that returns the <ph id=\"ph3\">`CRuntimeClass`</ph> structure of the base class.","source":"**CRuntimeClass\\* ( PASCAL\\* m_pfn_GetBaseClass )( )** If your application is dynamically linked to the AFXDLL version of MFC, a pointer to a function that returns the `CRuntimeClass` structure of the base class."},{"pos":[9822,9965],"content":"<bpt id=\"p1\">**</bpt>CRuntimeClass<ph id=\"ph1\">\\*</ph> m_pBaseClass<ept id=\"p1\">**</ept> If your application is statically linked to MFC, a pointer to the <ph id=\"ph2\">`CRuntimeClass`</ph> structure of the base class.","source":"**CRuntimeClass\\* m_pBaseClass** If your application is statically linked to MFC, a pointer to the `CRuntimeClass` structure of the base class."},{"content":"This function requires use of the <bpt id=\"p1\">[</bpt>IMPLEMENT_DYNAMIC<ept id=\"p1\">](run-time-object-model-services.md#implement_dynamic)</ept>, <bpt id=\"p2\">[</bpt>IMPLEMENT_DYNCREATE<ept id=\"p2\">](run-time-object-model-services.md#implement_dyncreate)</ept>, or <bpt id=\"p3\">[</bpt>IMPLEMENT_SERIAL<ept id=\"p3\">](run-time-object-model-services.md#implement_serial)</ept> macro in the class implementation.","pos":[9972,10266],"source":"This function requires use of the [IMPLEMENT_DYNAMIC](run-time-object-model-services.md#implement_dynamic), [IMPLEMENT_DYNCREATE](run-time-object-model-services.md#implement_dyncreate), or [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro in the class implementation."},{"content":"You will get incorrect results otherwise.","pos":[10267,10308]},{"pos":[10318,10325],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10329,10472],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all <ph id=\"ph2\">`CObject`</ph> examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all `CObject` examples."},{"pos":[10479,10562],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCObjectSample#10<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobject-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCObjectSample#10](../../mfc/codesnippet/cpp/cobject-class_4.cpp)]"},{"pos":[10572,10623],"content":"<bpt id=\"p1\">&lt;a name=\"cobject__iskindof\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObject::IsKindOf","linkify":"<a name=\"cobject__iskindof\"></a>  CObject::IsKindOf","source":"<a name=\"cobject__iskindof\"></a>  CObject::IsKindOf"},{"content":"Tests this object's relationship to a given class.","pos":[10627,10677]},{"pos":[10755,10765],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a <bpt id=\"p1\">[</bpt>CRuntimeClass<ept id=\"p1\">](../../mfc/reference/cruntimeclass-structure.md)</ept> structure associated with your <ph id=\"ph1\">`CObject`</ph>-derived class.","pos":[10781,10915],"source":" A pointer to a [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) structure associated with your `CObject`-derived class."},{"pos":[10925,10937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the object corresponds to the class; otherwise 0.","pos":[10941,11001]},{"pos":[11011,11018],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function tests <ph id=\"ph1\">`pClass`</ph> to see if (1) it is an object of the specified class or (2) it is an object of a class derived from the specified class.","pos":[11022,11171],"source":"This function tests `pClass` to see if (1) it is an object of the specified class or (2) it is an object of a class derived from the specified class."},{"content":"This function works only for classes declared with the <bpt id=\"p1\">[</bpt>DECLARE_DYNAMIC<ept id=\"p1\">](run-time-object-model-services.md#declare_dynamic)</ept>, <bpt id=\"p2\">[</bpt>DECLARE_DYNCREATE<ept id=\"p2\">](run-time-object-model-services.md#declare_dyncreate)</ept>, or <bpt id=\"p3\">[</bpt>DECLARE_SERIAL<ept id=\"p3\">](run-time-object-model-services.md#declare_serial)</ept> macro.","pos":[11172,11447],"source":" This function works only for classes declared with the [DECLARE_DYNAMIC](run-time-object-model-services.md#declare_dynamic), [DECLARE_DYNCREATE](run-time-object-model-services.md#declare_dyncreate), or [DECLARE_SERIAL](run-time-object-model-services.md#declare_serial) macro."},{"content":"Do not use this function extensively because it defeats the C++ polymorphism feature.","pos":[11454,11539]},{"content":"Use virtual functions instead.","pos":[11540,11570]},{"pos":[11580,11587],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11591,11734],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all <ph id=\"ph2\">`CObject`</ph> examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all `CObject` examples."},{"pos":[11741,11824],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCObjectSample#11<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobject-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCObjectSample#11](../../mfc/codesnippet/cpp/cobject-class_5.cpp)]"},{"pos":[11834,11897],"content":"<bpt id=\"p1\">&lt;a name=\"cobject__isserializable\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObject::IsSerializable","linkify":"<a name=\"cobject__isserializable\"></a>  CObject::IsSerializable","source":"<a name=\"cobject__isserializable\"></a>  CObject::IsSerializable"},{"content":"Tests whether this object is eligible for serialization.","pos":[11901,11957]},{"pos":[12014,12026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if this object can be serialized; otherwise 0.","pos":[12030,12084]},{"pos":[12094,12101],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12105,12361],"content":"For a class to be serializable, its declaration must contain the <bpt id=\"p1\">[</bpt>DECLARE_SERIAL<ept id=\"p1\">](run-time-object-model-services.md#declare_serial)</ept> macro, and the implementation must contain the <bpt id=\"p2\">[</bpt>IMPLEMENT_SERIAL<ept id=\"p2\">](run-time-object-model-services.md#implement_serial)</ept> macro.","source":"For a class to be serializable, its declaration must contain the [DECLARE_SERIAL](run-time-object-model-services.md#declare_serial) macro, and the implementation must contain the [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro."},{"pos":[12369,12410],"content":"[!NOTE]\n Do not override this function.","leadings":["","> "],"nodes":[{"content":"Do not override this function.","pos":[9,39]}]},{"pos":[12420,12427],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12431,12574],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all <ph id=\"ph2\">`CObject`</ph> examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all `CObject` examples."},{"pos":[12581,12664],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCObjectSample#12<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobject-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCObjectSample#12](../../mfc/codesnippet/cpp/cobject-class_6.cpp)]"},{"pos":[12674,12739],"content":"<bpt id=\"p1\">&lt;a name=\"cobject__operator_delete\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObject::operator delete","linkify":"<a name=\"cobject__operator_delete\"></a>  CObject::operator delete","source":"<a name=\"cobject__operator_delete\"></a>  CObject::operator delete"},{"pos":[12743,12850],"content":"For the Release version of the library, operator <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> frees the memory allocated by operator <bpt id=\"p2\">**</bpt>new<ept id=\"p2\">**</ept>.","source":"For the Release version of the library, operator **delete** frees the memory allocated by operator **new**."},{"pos":[13072,13079],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13083,13205],"content":"In the Debug version, operator <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> participates in an allocation-monitoring scheme designed to detect memory leaks.","source":"In the Debug version, operator **delete** participates in an allocation-monitoring scheme designed to detect memory leaks."},{"content":"If you use the code line","pos":[13212,13236]},{"pos":[13243,13326],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCObjectSample#14<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobject-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCObjectSample#14](../../mfc/codesnippet/cpp/cobject-class_7.cpp)]"},{"content":"before any of your implementations in a .CPP file, then the third version of <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> will be used, storing the filename and line number in the allocated block for later reporting.","pos":[13333,13515],"source":"before any of your implementations in a .CPP file, then the third version of **delete** will be used, storing the filename and line number in the allocated block for later reporting."},{"content":"You do not have to worry about supplying the extra parameters; a macro takes care of that for you.","pos":[13516,13614]},{"pos":[13621,13767],"content":"Even if you do not use <ph id=\"ph1\">`DEBUG_NEW`</ph> in Debug mode, you still get leak detection, but without the source-file line-number reporting described above.","source":"Even if you do not use `DEBUG_NEW` in Debug mode, you still get leak detection, but without the source-file line-number reporting described above."},{"pos":[13774,13863],"content":"If you override operators <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>delete<ept id=\"p2\">**</ept>, you forfeit this diagnostic capability.","source":"If you override operators **new** and **delete**, you forfeit this diagnostic capability."},{"pos":[13873,13880],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13884,14027],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in the <ph id=\"ph2\">`CObject`</ph> examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in the `CObject` examples."},{"pos":[14034,14117],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCObjectSample#15<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobject-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCObjectSample#15](../../mfc/codesnippet/cpp/cobject-class_8.cpp)]"},{"pos":[14127,14186],"content":"<bpt id=\"p1\">&lt;a name=\"cobject__operator_new\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObject::operator new","linkify":"<a name=\"cobject__operator_new\"></a>  CObject::operator new","source":"<a name=\"cobject__operator_new\"></a>  CObject::operator new"},{"pos":[14190,14317],"content":"For the Release version of the library, operator <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> performs an optimal memory allocation in a manner similar to <ph id=\"ph1\">`malloc`</ph>.","source":"For the Release version of the library, operator **new** performs an optimal memory allocation in a manner similar to `malloc`."},{"pos":[14538,14545],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14549,14668],"content":"In the Debug version, operator <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> participates in an allocation-monitoring scheme designed to detect memory leaks.","source":"In the Debug version, operator **new** participates in an allocation-monitoring scheme designed to detect memory leaks."},{"content":"If you use the code line","pos":[14675,14699]},{"pos":[14706,14789],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCObjectSample#14<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobject-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCObjectSample#14](../../mfc/codesnippet/cpp/cobject-class_7.cpp)]"},{"content":"before any of your implementations in a .CPP file, then the second version of <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> will be used, storing the filename and line number in the allocated block for later reporting.","pos":[14796,14976],"source":"before any of your implementations in a .CPP file, then the second version of **new** will be used, storing the filename and line number in the allocated block for later reporting."},{"content":"You do not have to worry about supplying the extra parameters; a macro takes care of that for you.","pos":[14977,15075]},{"pos":[15082,15228],"content":"Even if you do not use <ph id=\"ph1\">`DEBUG_NEW`</ph> in Debug mode, you still get leak detection, but without the source-file line-number reporting described above.","source":"Even if you do not use `DEBUG_NEW` in Debug mode, you still get leak detection, but without the source-file line-number reporting described above."},{"pos":[15236,15371],"content":"[!NOTE]\n If you override this operator, you must also override **delete**. Do not use the standard library **_new_handler** function.","leadings":["","> "],"nodes":[{"content":" If you override this operator, you must also override **delete**. Do not use the standard library **_new_handler** function.","pos":[8,133],"nodes":[{"content":"If you override this operator, you must also override <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept>.","pos":[1,66],"source":" If you override this operator, you must also override **delete**."},{"content":"Do not use the standard library <bpt id=\"p1\">**</bpt>_new_handler<ept id=\"p1\">**</ept> function.","pos":[67,125],"source":" Do not use the standard library **_new_handler** function."}]}]},{"pos":[15381,15388],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15392,15535],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in the <ph id=\"ph2\">`CObject`</ph> examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in the `CObject` examples."},{"pos":[15542,15623],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCObjectSample#16<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobject-class_9.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCObjectSample#16](../../mfc/codesnippet/cpp/cobject-class_9.h)]"},{"pos":[15633,15686],"content":"<bpt id=\"p1\">&lt;a name=\"cobject__serialize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CObject::Serialize","linkify":"<a name=\"cobject__serialize\"></a>  CObject::Serialize","source":"<a name=\"cobject__serialize\"></a>  CObject::Serialize"},{"content":"Reads or writes this object from or to an archive.","pos":[15690,15740]},{"pos":[15803,15813],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CArchive`</ph> object to serialize to or from.","pos":[15825,15869],"source":" A `CArchive` object to serialize to or from."},{"pos":[15879,15886],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must override <ph id=\"ph1\">`Serialize`</ph> for each class that you intend to serialize.","pos":[15890,15964],"source":"You must override `Serialize` for each class that you intend to serialize."},{"content":"The overridden <ph id=\"ph1\">`Serialize`</ph> must first call the <ph id=\"ph2\">`Serialize`</ph> function of its base class.","pos":[15965,16051],"source":" The overridden `Serialize` must first call the `Serialize` function of its base class."},{"pos":[16058,16300],"content":"You must also use the <bpt id=\"p1\">[</bpt>DECLARE_SERIAL<ept id=\"p1\">](run-time-object-model-services.md#declare_serial)</ept> macro in your class declaration, and you must use the <bpt id=\"p2\">[</bpt>IMPLEMENT_SERIAL<ept id=\"p2\">](run-time-object-model-services.md#implement_serial)</ept> macro in the implementation.","source":"You must also use the [DECLARE_SERIAL](run-time-object-model-services.md#declare_serial) macro in your class declaration, and you must use the [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro in the implementation."},{"pos":[16307,16531],"content":"Use <bpt id=\"p1\">[</bpt>CArchive::IsLoading<ept id=\"p1\">](../../mfc/reference/carchive-class.md#carchive__isloading)</ept> or <bpt id=\"p2\">[</bpt>CArchive::IsStoring<ept id=\"p2\">](../../mfc/reference/carchive-class.md#carchive__isstoring)</ept> to determine whether the archive is loading or storing.","source":"Use [CArchive::IsLoading](../../mfc/reference/carchive-class.md#carchive__isloading) or [CArchive::IsStoring](../../mfc/reference/carchive-class.md#carchive__isstoring) to determine whether the archive is loading or storing."},{"content":"<ph id=\"ph1\">`Serialize`</ph> is called by <bpt id=\"p1\">[</bpt>CArchive::ReadObject<ept id=\"p1\">](../../mfc/reference/carchive-class.md#carchive__readobject)</ept> and <bpt id=\"p2\">[</bpt>CArchive::WriteObject<ept id=\"p2\">](../../mfc/reference/carchive-class.md#carchive__writeobject)</ept>.","pos":[16538,16735],"source":"`Serialize` is called by [CArchive::ReadObject](../../mfc/reference/carchive-class.md#carchive__readobject) and [CArchive::WriteObject](../../mfc/reference/carchive-class.md#carchive__writeobject)."},{"content":"These functions are associated with the <ph id=\"ph1\">`CArchive`</ph> insertion operator ( <bpt id=\"p1\">**</bpt><ph id=\"ph2\">&lt;</ph><ph id=\"ph3\">\\&lt;</ph><ept id=\"p1\">**</ept>) and extraction operator ( <bpt id=\"p2\">**</bpt><ph id=\"ph4\">&gt;&gt;</ph><ept id=\"p2\">**</ept>).","pos":[16736,16851],"source":" These functions are associated with the `CArchive` insertion operator ( **<\\<**) and extraction operator ( **>>**)."},{"pos":[16858,16991],"content":"For serialization examples, see the article <bpt id=\"p1\">[</bpt>Serialization: Serializing an Object<ept id=\"p1\">](../../mfc/serialization-serializing-an-object.md)</ept>.","source":"For serialization examples, see the article [Serialization: Serializing an Object](../../mfc/serialization-serializing-an-object.md)."},{"pos":[17001,17008],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17012,17155],"content":"See <bpt id=\"p1\">[</bpt>CObList::CObList<ept id=\"p1\">](../../mfc/reference/coblist-class.md#coblist__coblist)</ept> for a listing of the <ph id=\"ph1\">`CAge`</ph> class used in all <ph id=\"ph2\">`CObject`</ph> examples.","source":"See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all `CObject` examples."},{"pos":[17162,17246],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_MFCCObjectSample#13<ept id=\"p2\">](../../mfc/codesnippet/cpp/cobject-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_MFCCObjectSample#13](../../mfc/codesnippet/cpp/cobject-class_10.cpp)]"},{"pos":[17255,17263],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[17267,17314],"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept>","source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md)"}],"content":"---\ntitle: \"CObject Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CObject\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"base classes, MFC objects\"\n  - \"objects [C++], base class for MFC\"\n  - \"object classes\"\n  - \"CObject class\"\nms.assetid: 95e9acd3-d9eb-4ac0-b52b-ca4a501a7a3a\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CObject Class\nThe principal base class for the Microsoft Foundation Class Library.  \n  \n## Syntax  \n  \n```  \nclass AFX_NOVTABLE CObject  \n```  \n  \n## Members  \n  \n### Protected Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObject::CObject](#cobject__cobject)|Default constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObject::AssertValid](#cobject__assertvalid)|Validates this object's integrity.|  \n|[CObject::Dump](#cobject__dump)|Produces a diagnostic dump of this object.|  \n|[CObject::GetRuntimeClass](#cobject__getruntimeclass)|Returns the `CRuntimeClass` structure corresponding to this object's class.|  \n|[CObject::IsKindOf](#cobject__iskindof)|Tests this object's relationship to a given class.|  \n|[CObject::IsSerializable](#cobject__isserializable)|Tests to see whether this object can be serialized.|  \n|[CObject::Serialize](#cobject__serialize)|Loads or stores an object from/to an archive.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CObject::operator delete](#cobject__operator_delete)|Special **delete** operator.|  \n|[CObject::operator new](#cobject__operator_new)|Special **new** operator.|  \n  \n## Remarks  \n It serves as the root not only for library classes such as `CFile` and `CObList`, but also for the classes that you write. `CObject` provides basic services, including  \n  \n-   Serialization support  \n  \n-   Run-time class information  \n  \n-   Object diagnostic output  \n  \n-   Compatibility with collection classes  \n  \n Note that `CObject` does not support multiple inheritance. Your derived classes can have only one `CObject` base class, and that `CObject` must be leftmost in the hierarchy. It is permissible, however, to have structures and non- `CObject`-derived classes in right-hand multiple-inheritance branches.  \n  \n You will realize major benefits from `CObject` derivation if you use some of the optional macros in your class implementation and declarations.  \n  \n The first-level macros, [DECLARE_DYNAMIC](run-time-object-model-services.md#declare_dynamic) and [IMPLEMENT_DYNAMIC](run-time-object-model-services.md#implement_dynamic), permit run-time access to the class name and its position in the hierarchy. This, in turn, allows meaningful diagnostic dumping.  \n  \n The second-level macros, [DECLARE_SERIAL](run-time-object-model-services.md#declare_serial) and [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial), include all the functionality of the first-level macros, and they enable an object to be \"serialized\" to and from an \"archive.\"  \n  \n For information about deriving Microsoft Foundation classes and C++ classes in general and using `CObject`, see [Using CObject](../../mfc/using-cobject.md) and [Serialization](../../mfc/serialization-in-mfc.md).  \n  \n## Inheritance Hierarchy  \n `CObject`  \n  \n## Requirements  \n **Header:** afx.h  \n  \n##  <a name=\"cobject__assertvalid\"></a>  CObject::AssertValid  \n Validates this object's integrity.  \n  \n```  \nvirtual void AssertValid() const;\n\n \n```  \n  \n### Remarks  \n `AssertValid` performs a validity check on this object by checking its internal state. In the Debug version of the library, `AssertValid` may assert and thus terminate the program with a message that lists the line number and filename where the assertion failed.  \n  \n When you write your own class, you should override the `AssertValid` function to provide diagnostic services for yourself and other users of your class. The overridden `AssertValid` usually calls the `AssertValid` function of its base class before checking data members unique to the derived class.  \n  \n Because `AssertValid` is a **const** function, you are not permitted to change the object state during the test. Your own derived class `AssertValid` functions should not throw exceptions but rather should assert whether they detect invalid object data.  \n  \n The definition of \"validity\" depends on the object's class. As a rule, the function should perform a \"shallow check.\" That is, if an object contains pointers to other objects, it should check to see whether the pointers are not null, but it should not perform validity testing on the objects referred to by the pointers.  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all `CObject` examples.  \n  \n [!code-cpp[NVC_MFCCObjectSample#7](../../mfc/codesnippet/cpp/cobject-class_1.cpp)]  \n  \n For another example, see [AfxDoForAllObjects](diagnostic-services.md#afxdoforallobjects).  \n  \n##  <a name=\"cobject__cobject\"></a>  CObject::CObject  \n These functions are the standard `CObject` constructors.  \n  \n```  \nCObject();\n\n \nCObject(const CObject& objectSrc);\n```  \n  \n### Parameters  \n *objectSrc*  \n A reference to another `CObject`  \n  \n### Remarks  \n The default version is automatically called by the constructor of your derived class.  \n  \n If your class is serializable (it incorporates the `IMPLEMENT_SERIAL` macro), then you must have a default constructor (a constructor with no arguments) in your class declaration. If you do not need a default constructor, declare a private or protected \"empty\" constructor. For more information, see [Using CObject](../../mfc/using-cobject.md).  \n  \n The standard C++ default class copy constructor does a member-by-member copy. The presence of the private `CObject` copy constructor guarantees a compiler error message if the copy constructor of your class is needed but not available. You must therefore provide a copy constructor if your class requires this capability.  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in the `CObject` examples.  \n  \n [!code-cpp[NVC_MFCCObjectSample#8](../../mfc/codesnippet/cpp/cobject-class_2.cpp)]  \n  \n##  <a name=\"cobject__dump\"></a>  CObject::Dump  \n Dumps the contents of your object to a [CDumpContext](../../mfc/reference/cdumpcontext-class.md) object.  \n  \n```  \nvirtual void Dump(CDumpContext& dc) const;\n\n \n```  \n  \n### Parameters  \n `dc`  \n The diagnostic dump context for dumping, usually `afxDump`.  \n  \n### Remarks  \n When you write your own class, you should override the `Dump` function to provide diagnostic services for yourself and other users of your class. The overridden `Dump` usually calls the `Dump` function of its base class before printing data members unique to the derived class. `CObject::Dump` prints the class name if your class uses the `IMPLEMENT_DYNAMIC` or `IMPLEMENT_SERIAL` macro.  \n  \n> [!NOTE]\n>  Your `Dump` function should not print a newline character at the end of its output.  \n  \n `Dump` calls make sense only in the Debug version of the Microsoft Foundation Class Library. You should bracket calls, function declarations, and function implementations with **#ifdef _DEBUG**/ `#endif` statements for conditional compilation.  \n  \n Since `Dump` is a **const** function, you are not permitted to change the object state during the dump.  \n  \n The [CDumpContext insertion (<<) operator](../../mfc/reference/cdumpcontext-class.md#cdumpcontext__operator__lt__lt_) calls `Dump` when a `CObject` pointer is inserted.  \n  \n `Dump` permits only \"acyclic\" dumping of objects. You can dump a list of objects, for example, but if one of the objects is the list itself, you will eventually overflow the stack.  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all `CObject` examples.  \n  \n [!code-cpp[NVC_MFCCObjectSample#9](../../mfc/codesnippet/cpp/cobject-class_3.cpp)]  \n  \n##  <a name=\"cobject__getruntimeclass\"></a>  CObject::GetRuntimeClass  \n Returns the `CRuntimeClass` structure corresponding to this object's class.  \n  \n```  \nvirtual CRuntimeClass* GetRuntimeClass() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) structure corresponding to this object's class; never **NULL**.  \n  \n### Remarks  \n There is one `CRuntimeClass` structure for each `CObject`-derived class. The structure members are as follows:  \n  \n- **LPCSTR m_lpszClassName** A null-terminated string containing the ASCII class name.  \n  \n- **int m_nObjectSize** The size of the object, in bytes. If the object has data members that point to allocated memory, the size of that memory is not included.  \n  \n- **UINT m_wSchema** The schema number ( – 1 for nonserializable classes). See the [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro for a description of schema number.  \n  \n- **CObject\\* ( PASCAL\\* m_pfnCreateObject )( )** A function pointer to the default constructor that creates an object of your class (valid only if the class supports dynamic creation; otherwise, returns **NULL**).  \n  \n- **CRuntimeClass\\* ( PASCAL\\* m_pfn_GetBaseClass )( )** If your application is dynamically linked to the AFXDLL version of MFC, a pointer to a function that returns the `CRuntimeClass` structure of the base class.  \n  \n- **CRuntimeClass\\* m_pBaseClass** If your application is statically linked to MFC, a pointer to the `CRuntimeClass` structure of the base class.  \n  \n This function requires use of the [IMPLEMENT_DYNAMIC](run-time-object-model-services.md#implement_dynamic), [IMPLEMENT_DYNCREATE](run-time-object-model-services.md#implement_dyncreate), or [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro in the class implementation. You will get incorrect results otherwise.  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all `CObject` examples.  \n  \n [!code-cpp[NVC_MFCCObjectSample#10](../../mfc/codesnippet/cpp/cobject-class_4.cpp)]  \n  \n##  <a name=\"cobject__iskindof\"></a>  CObject::IsKindOf  \n Tests this object's relationship to a given class.  \n  \n```  \nBOOL IsKindOf(const CRuntimeClass* pClass) const;\n\n \n```  \n  \n### Parameters  \n `pClass`  \n A pointer to a [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) structure associated with your `CObject`-derived class.  \n  \n### Return Value  \n Nonzero if the object corresponds to the class; otherwise 0.  \n  \n### Remarks  \n This function tests `pClass` to see if (1) it is an object of the specified class or (2) it is an object of a class derived from the specified class. This function works only for classes declared with the [DECLARE_DYNAMIC](run-time-object-model-services.md#declare_dynamic), [DECLARE_DYNCREATE](run-time-object-model-services.md#declare_dyncreate), or [DECLARE_SERIAL](run-time-object-model-services.md#declare_serial) macro.  \n  \n Do not use this function extensively because it defeats the C++ polymorphism feature. Use virtual functions instead.  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all `CObject` examples.  \n  \n [!code-cpp[NVC_MFCCObjectSample#11](../../mfc/codesnippet/cpp/cobject-class_5.cpp)]  \n  \n##  <a name=\"cobject__isserializable\"></a>  CObject::IsSerializable  \n Tests whether this object is eligible for serialization.  \n  \n```  \nBOOL IsSerializable() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if this object can be serialized; otherwise 0.  \n  \n### Remarks  \n For a class to be serializable, its declaration must contain the [DECLARE_SERIAL](run-time-object-model-services.md#declare_serial) macro, and the implementation must contain the [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro.  \n  \n> [!NOTE]\n>  Do not override this function.  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all `CObject` examples.  \n  \n [!code-cpp[NVC_MFCCObjectSample#12](../../mfc/codesnippet/cpp/cobject-class_6.cpp)]  \n  \n##  <a name=\"cobject__operator_delete\"></a>  CObject::operator delete  \n For the Release version of the library, operator **delete** frees the memory allocated by operator **new**.  \n  \n```  \nvoid PASCAL operator delete(\n    void* p);\n\n \nvoid PASCAL operator delete(\n    void* p,\n    void* pPlace);\n\n \nvoid PASCAL operator delete(\n    void* p,  \n    LPCSTR lpszFileName,  \n    int nLine);\n```  \n  \n### Remarks  \n In the Debug version, operator **delete** participates in an allocation-monitoring scheme designed to detect memory leaks.  \n  \n If you use the code line  \n  \n [!code-cpp[NVC_MFCCObjectSample#14](../../mfc/codesnippet/cpp/cobject-class_7.cpp)]  \n  \n before any of your implementations in a .CPP file, then the third version of **delete** will be used, storing the filename and line number in the allocated block for later reporting. You do not have to worry about supplying the extra parameters; a macro takes care of that for you.  \n  \n Even if you do not use `DEBUG_NEW` in Debug mode, you still get leak detection, but without the source-file line-number reporting described above.  \n  \n If you override operators **new** and **delete**, you forfeit this diagnostic capability.  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in the `CObject` examples.  \n  \n [!code-cpp[NVC_MFCCObjectSample#15](../../mfc/codesnippet/cpp/cobject-class_8.cpp)]  \n  \n##  <a name=\"cobject__operator_new\"></a>  CObject::operator new  \n For the Release version of the library, operator **new** performs an optimal memory allocation in a manner similar to `malloc`.  \n  \n```  \nvoid* PASCAL operator new(\n    size_t nSize);\n\n \nvoid* PASCAL operator new(\n    size_t, \n    void* p);\n\n \nvoid* PASCAL operator new(\n    size_t nSize,  \n    LPCSTR lpszFileName,  \n    int nLine);\n```  \n  \n### Remarks  \n In the Debug version, operator **new** participates in an allocation-monitoring scheme designed to detect memory leaks.  \n  \n If you use the code line  \n  \n [!code-cpp[NVC_MFCCObjectSample#14](../../mfc/codesnippet/cpp/cobject-class_7.cpp)]  \n  \n before any of your implementations in a .CPP file, then the second version of **new** will be used, storing the filename and line number in the allocated block for later reporting. You do not have to worry about supplying the extra parameters; a macro takes care of that for you.  \n  \n Even if you do not use `DEBUG_NEW` in Debug mode, you still get leak detection, but without the source-file line-number reporting described above.  \n  \n> [!NOTE]\n>  If you override this operator, you must also override **delete**. Do not use the standard library **_new_handler** function.  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in the `CObject` examples.  \n  \n [!code-cpp[NVC_MFCCObjectSample#16](../../mfc/codesnippet/cpp/cobject-class_9.h)]  \n  \n##  <a name=\"cobject__serialize\"></a>  CObject::Serialize  \n Reads or writes this object from or to an archive.  \n  \n```  \nvirtual void Serialize(CArchive& ar);\n```  \n  \n### Parameters  \n `ar`  \n A `CArchive` object to serialize to or from.  \n  \n### Remarks  \n You must override `Serialize` for each class that you intend to serialize. The overridden `Serialize` must first call the `Serialize` function of its base class.  \n  \n You must also use the [DECLARE_SERIAL](run-time-object-model-services.md#declare_serial) macro in your class declaration, and you must use the [IMPLEMENT_SERIAL](run-time-object-model-services.md#implement_serial) macro in the implementation.  \n  \n Use [CArchive::IsLoading](../../mfc/reference/carchive-class.md#carchive__isloading) or [CArchive::IsStoring](../../mfc/reference/carchive-class.md#carchive__isstoring) to determine whether the archive is loading or storing.  \n  \n `Serialize` is called by [CArchive::ReadObject](../../mfc/reference/carchive-class.md#carchive__readobject) and [CArchive::WriteObject](../../mfc/reference/carchive-class.md#carchive__writeobject). These functions are associated with the `CArchive` insertion operator ( **<\\<**) and extraction operator ( **>>**).  \n  \n For serialization examples, see the article [Serialization: Serializing an Object](../../mfc/serialization-serializing-an-object.md).  \n  \n### Example  \n See [CObList::CObList](../../mfc/reference/coblist-class.md#coblist__coblist) for a listing of the `CAge` class used in all `CObject` examples.  \n  \n [!code-cpp[NVC_MFCCObjectSample#13](../../mfc/codesnippet/cpp/cobject-class_10.cpp)]  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)\n\n\n\n"}