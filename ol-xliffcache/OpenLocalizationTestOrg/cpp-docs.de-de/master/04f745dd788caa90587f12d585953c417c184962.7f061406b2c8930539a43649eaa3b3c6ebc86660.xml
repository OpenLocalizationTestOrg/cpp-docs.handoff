{"nodes":[{"pos":[12,46],"content":"_getcwd, _wgetcwd | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_getcwd, _wgetcwd | Microsoft Docs","pos":[0,34]}]},{"content":"_getcwd, _wgetcwd","pos":[1198,1215]},{"content":"Gets the current working directory.","pos":[1216,1251]},{"content":"Syntax","pos":[1260,1266]},{"content":"Parameters","pos":[1417,1427]},{"content":"Storage location for the path.","pos":[1443,1473]},{"content":"Maximum length of the path in characters: <ph id=\"ph1\">`char`</ph> for <ph id=\"ph2\">`_getcwd`</ph> and <ph id=\"ph3\">`wchar_t`</ph> for <ph id=\"ph4\">`_wgetcwd`</ph>.","pos":[1492,1584],"source":" Maximum length of the path in characters: `char` for `_getcwd` and `wchar_t` for `_wgetcwd`."},{"content":"Return Value","pos":[1593,1605]},{"content":"Returns a pointer to <ph id=\"ph1\">`buffer`</ph>.","pos":[1609,1639],"source":"Returns a pointer to `buffer`."},{"content":"A <ph id=\"ph1\">`NULL`</ph> return value indicates an error, and <ph id=\"ph2\">`errno`</ph> is set either to <ph id=\"ph3\">`ENOMEM`</ph>, indicating that there is insufficient memory to allocate <ph id=\"ph4\">`maxlen`</ph> bytes (when a <ph id=\"ph5\">`NULL`</ph> argument is given as <ph id=\"ph6\">`buffer`</ph>), or to <ph id=\"ph7\">`ERANGE`</ph>, indicating that the path is longer than <ph id=\"ph8\">`maxlen`</ph> characters.","pos":[1640,1916],"source":" A `NULL` return value indicates an error, and `errno` is set either to `ENOMEM`, indicating that there is insufficient memory to allocate `maxlen` bytes (when a `NULL` argument is given as `buffer`), or to `ERANGE`, indicating that the path is longer than `maxlen` characters."},{"content":"If <ph id=\"ph1\">`maxlen`</ph> is less than or equal to zero, this function invokes an invalid parameter handler, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1917,2100],"source":" If `maxlen` is less than or equal to zero, this function invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"pos":[2107,2284],"content":"For more information about these and other return codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"content":"Remarks","pos":[2293,2300]},{"content":"The <ph id=\"ph1\">`_getcwd`</ph> function gets the full path of the current working directory for the default drive and stores it at <ph id=\"ph2\">`buffer`</ph>.","pos":[2304,2427],"source":"The `_getcwd` function gets the full path of the current working directory for the default drive and stores it at `buffer`."},{"content":"The integer argument <ph id=\"ph1\">`maxlen`</ph> specifies the maximum length for the path.","pos":[2428,2500],"source":" The integer argument `maxlen` specifies the maximum length for the path."},{"content":"An error occurs if the length of the path (including the terminating null character) exceeds <ph id=\"ph1\">`maxlen`</ph><bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","pos":[2501,2605],"source":" An error occurs if the length of the path (including the terminating null character) exceeds `maxlen`*.*"},{"content":"The <ph id=\"ph1\">`buffer`</ph> argument can be <ph id=\"ph2\">`NULL`</ph>; a buffer of at least size <ph id=\"ph3\">`maxlen`</ph> (more only if necessary) is automatically allocated, using <ph id=\"ph4\">`malloc`</ph>, to store the path.","pos":[2606,2765],"source":" The `buffer` argument can be `NULL`; a buffer of at least size `maxlen` (more only if necessary) is automatically allocated, using `malloc`, to store the path."},{"content":"This buffer can later be freed by calling <ph id=\"ph1\">`free`</ph> and passing it the <ph id=\"ph2\">`_getcwd`</ph> return value (a pointer to the allocated buffer).","pos":[2766,2893],"source":" This buffer can later be freed by calling `free` and passing it the `_getcwd` return value (a pointer to the allocated buffer)."},{"content":"returns a string that represents the path of the current working directory.","pos":[2910,2985]},{"content":"If the current working directory is the root, the string ends with a backslash ( <ph id=\"ph1\">`\\`</ph> ).","pos":[2986,3073],"source":" If the current working directory is the root, the string ends with a backslash ( `\\` )."},{"content":"If the current working directory is a directory other than the root, the string ends with the directory name and not with a backslash.","pos":[3074,3208]},{"content":"is a wide-character version of <ph id=\"ph1\">`_getcwd`</ph>; the <ph id=\"ph2\">`buffer`</ph> argument and return value of <ph id=\"ph3\">`_wgetcwd`</ph> are wide-character strings.","pos":[3226,3348],"source":" is a wide-character version of `_getcwd`; the `buffer` argument and return value of `_wgetcwd` are wide-character strings."},{"content":"and <ph id=\"ph1\">`_getcwd`</ph> behave identically otherwise.","pos":[3360,3403],"source":" and `_getcwd` behave identically otherwise."},{"content":"When <ph id=\"ph1\">`_DEBUG`</ph> and <ph id=\"ph2\">`_CRTDBG_MAP_ALLOC`</ph> are defined, calls to <ph id=\"ph3\">`_getcwd`</ph> and <ph id=\"ph4\">`_wgetcwd`</ph> are replaced by calls to <ph id=\"ph5\">`_getcwd_dbg`</ph> and <ph id=\"ph6\">`_wgetcwd_dbg`</ph> to allow for debugging memory allocations.","pos":[3410,3595],"source":"When `_DEBUG` and `_CRTDBG_MAP_ALLOC` are defined, calls to `_getcwd` and `_wgetcwd` are replaced by calls to `_getcwd_dbg` and `_wgetcwd_dbg` to allow for debugging memory allocations."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>_getcwd_dbg, _wgetcwd_dbg<ept id=\"p1\">](../../c-runtime-library/reference/getcwd-dbg-wgetcwd-dbg.md)</ept>.","pos":[3596,3711],"source":" For more information, see [_getcwd_dbg, _wgetcwd_dbg](../../c-runtime-library/reference/getcwd-dbg-wgetcwd-dbg.md)."},{"content":"Generic-Text Routine Mappings","pos":[3721,3750]},{"content":"Tchar.h routine","pos":[3757,3772]},{"content":"_UNICODE and _MBCS not defined","pos":[3773,3803]},{"content":"_MBCS defined","pos":[3804,3817]},{"content":"_UNICODE defined","pos":[3818,3834]},{"content":"Requirements","pos":[4000,4012]},{"content":"Routine","pos":[4019,4026]},{"content":"Required header","pos":[4027,4042]},{"content":"direct.h&gt;","pos":[4099,4108],"source":"direct.h>"},{"content":"direct.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4126,4149],"source":"direct.h> or \\<wchar.h>"},{"pos":[4157,4255],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"content":"Example","pos":[4264,4271]},{"content":".NET Framework Equivalent","pos":[5037,5062]},{"content":"System::Environment::CurrentDirectory","pos":[5067,5104]},{"content":"See Also","pos":[5197,5205]},{"content":"Directory Control","pos":[5210,5227]},{"content":"_chdir, _wchdir","pos":[5280,5295]},{"content":"_mkdir, _wmkdir","pos":[5353,5368]},{"content":"_rmdir, _wrmdir","pos":[5426,5441]}],"content":"---\ntitle: \"_getcwd, _wgetcwd | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_wgetcwd\"\n  - \"_getcwd\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-environment-l1-1-0.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_getcwd\"\n  - \"wgetcwd\"\n  - \"_wgetcwd\"\n  - \"tgetcwd\"\n  - \"_tgetcwd\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"getcwd function\"\n  - \"working directory\"\n  - \"_wgetcwd function\"\n  - \"_getcwd function\"\n  - \"current working directory\"\n  - \"wgetcwd function\"\n  - \"directories [C++], current working\"\nms.assetid: 888dc8c6-5595-4071-be55-816b38e3e739\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _getcwd, _wgetcwd\nGets the current working directory.  \n  \n## Syntax  \n  \n```  \nchar *_getcwd(   \n   char *buffer,  \n   int maxlen   \n);  \nwchar_t *_wgetcwd(   \n   wchar_t *buffer,  \n   int maxlen   \n);  \n```  \n  \n#### Parameters  \n `buffer`  \n Storage location for the path.  \n  \n `maxlen`  \n Maximum length of the path in characters: `char` for `_getcwd` and `wchar_t` for `_wgetcwd`.  \n  \n## Return Value  \n Returns a pointer to `buffer`. A `NULL` return value indicates an error, and `errno` is set either to `ENOMEM`, indicating that there is insufficient memory to allocate `maxlen` bytes (when a `NULL` argument is given as `buffer`), or to `ERANGE`, indicating that the path is longer than `maxlen` characters. If `maxlen` is less than or equal to zero, this function invokes an invalid parameter handler, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md).  \n  \n For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n The `_getcwd` function gets the full path of the current working directory for the default drive and stores it at `buffer`. The integer argument `maxlen` specifies the maximum length for the path. An error occurs if the length of the path (including the terminating null character) exceeds `maxlen`*.* The `buffer` argument can be `NULL`; a buffer of at least size `maxlen` (more only if necessary) is automatically allocated, using `malloc`, to store the path. This buffer can later be freed by calling `free` and passing it the `_getcwd` return value (a pointer to the allocated buffer).  \n  \n `_getcwd` returns a string that represents the path of the current working directory. If the current working directory is the root, the string ends with a backslash ( `\\` ). If the current working directory is a directory other than the root, the string ends with the directory name and not with a backslash.  \n  \n `_wgetcwd` is a wide-character version of `_getcwd`; the `buffer` argument and return value of `_wgetcwd` are wide-character strings. `_wgetcwd` and `_getcwd` behave identically otherwise.  \n  \n When `_DEBUG` and `_CRTDBG_MAP_ALLOC` are defined, calls to `_getcwd` and `_wgetcwd` are replaced by calls to `_getcwd_dbg` and `_wgetcwd_dbg` to allow for debugging memory allocations. For more information, see [_getcwd_dbg, _wgetcwd_dbg](../../c-runtime-library/reference/getcwd-dbg-wgetcwd-dbg.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tgetcwd`|`_getcwd`|`_getcwd`|`_wgetcwd`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_getcwd`|\\<direct.h>|  \n|`_wgetcwd`|\\<direct.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_getcwd.c  \n// This program places the name of the current directory in the   \n// buffer array, then displays the name of the current directory   \n// on the screen. Passing NULL as the buffer forces getcwd to allocate  \n// memory for the path, which allows the code to support file paths  \n// longer than _MAX_PATH, which are supported by NTFS.  \n  \n#include <direct.h>  \n#include <stdlib.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   char* buffer;  \n  \n   // Get the current working directory:   \n   if( (buffer = _getcwd( NULL, 0 )) == NULL )  \n      perror( \"_getcwd error\" );  \n   else  \n   {  \n      printf( \"%s \\nLength: %d\\n\", buffer, strnlen(buffer) );  \n      free(buffer);  \n   }  \n}  \n```  \n  \n```Output  \nC:\\Code  \n```  \n  \n## .NET Framework Equivalent  \n [System::Environment::CurrentDirectory](https://msdn.microsoft.com/en-us/library/system.environment.currentdirectory.aspx)  \n  \n## See Also  \n [Directory Control](../../c-runtime-library/directory-control.md)   \n [_chdir, _wchdir](../../c-runtime-library/reference/chdir-wchdir.md)   \n [_mkdir, _wmkdir](../../c-runtime-library/reference/mkdir-wmkdir.md)   \n [_rmdir, _wrmdir](../../c-runtime-library/reference/rmdir-wrmdir.md)"}