{"nodes":[{"pos":[12,53],"content":"gamma_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"gamma_distribution Class | Microsoft Docs","pos":[0,41]}]},{"pos":[832,856],"content":"gamma_distribution Class","linkify":"gamma_distribution Class","nodes":[{"content":"gamma_distribution Class","pos":[0,24]}]},{"content":"Generates a gamma distribution.","pos":[857,888]},{"pos":[897,903],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1631,1641],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The floating-point result type, defaults to <ph id=\"ph1\">`double`</ph>.","pos":[1659,1712],"source":" The floating-point result type, defaults to `double`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1713,1780],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"pos":[1789,1796],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class describes a distribution that produces values of a user-specified integral type, or type <ph id=\"ph1\">`double`</ph> if none is provided, distributed according to the Gamma Distribution.","pos":[1800,1986],"source":"The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Gamma Distribution."},{"content":"The following table links to articles about individual members.","pos":[1987,2050]},{"pos":[2074,2155],"content":"<bpt id=\"p1\">[</bpt>gamma_distribution::gamma_distribution<ept id=\"p1\">](#gamma_distribution__gamma_distribution)</ept>","source":"[gamma_distribution::gamma_distribution](#gamma_distribution__gamma_distribution)"},{"pos":[2276,2341],"content":"<bpt id=\"p1\">[</bpt>gamma_distribution::param_type<ept id=\"p1\">](#gamma_distribution__param_type)</ept>","source":"[gamma_distribution::param_type](#gamma_distribution__param_type)"},{"pos":[2349,2480],"content":"The property functions <ph id=\"ph1\">`alpha()`</ph> and <ph id=\"ph2\">`beta()`</ph> return their respective values for stored distribution parameters <ph id=\"ph3\">`alpha`</ph> and <ph id=\"ph4\">`beta`</ph>.","source":"The property functions `alpha()` and `beta()` return their respective values for stored distribution parameters `alpha` and `beta`."},{"pos":[2487,2601],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2608,2764],"content":"For detailed information about the gamma distribution, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>Gamma Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=401111)</ept>.","source":"For detailed information about the gamma distribution, see the Wolfram MathWorld article [Gamma Distribution](http://go.microsoft.com/fwlink/LinkId=401111)."},{"pos":[2773,2780],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4732,4738],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[5430,5442],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5446,5467],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[5474,5492],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5502,5595],"content":"<bpt id=\"p1\">&lt;a name=\"gamma_distribution__gamma_distribution\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  gamma_distribution::gamma_distribution","linkify":"<a name=\"gamma_distribution__gamma_distribution\"></a>  gamma_distribution::gamma_distribution","source":"<a name=\"gamma_distribution__gamma_distribution\"></a>  gamma_distribution::gamma_distribution"},{"content":"Constructs the distribution.","pos":[5599,5627]},{"pos":[5780,5790],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`alpha`</ph> distribution parameter.","pos":[5805,5840],"source":" The `alpha` distribution parameter."},{"content":"The <ph id=\"ph1\">`beta`</ph> distribution parameter.","pos":[5857,5891],"source":" The `beta` distribution parameter."},{"content":"The parameter structure used to construct the distribution.","pos":[5908,5967]},{"pos":[5977,5984],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5988,6036],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; alpha`</ph> and <ph id=\"ph2\">`0.0 &lt; beta`</ph>","source":"**Precondition:** `0.0 < alpha` and `0.0 < beta`"},{"pos":[6043,6190],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`alpha`</ph> value holds the value <ph id=\"ph2\">`alpha`</ph> and whose stored <ph id=\"ph3\">`beta`</ph> value holds the value <ph id=\"ph4\">`beta`</ph>.","source":"The first constructor constructs an object whose stored `alpha` value holds the value `alpha` and whose stored `beta` value holds the value `beta`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[6197,6293],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[6294,6409],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[6419,6496],"content":"<bpt id=\"p1\">&lt;a name=\"gamma_distribution__param_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  gamma_distribution::param_type","linkify":"<a name=\"gamma_distribution__param_type\"></a>  gamma_distribution::param_type","source":"<a name=\"gamma_distribution__param_type\"></a>  gamma_distribution::param_type"},{"content":"Stores the parameters of the distribution.","pos":[6500,6542]},{"pos":[6878,6888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[6892,6985],"content":"See parent topic <bpt id=\"p1\">[</bpt>gamma_distribution Class<ept id=\"p1\">](../standard-library/gamma-distribution-class.md)</ept>.","source":"See parent topic [gamma_distribution Class](../standard-library/gamma-distribution-class.md)."},{"pos":[6995,7002],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7006,7054],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; alpha`</ph> and <ph id=\"ph2\">`0.0 &lt; beta`</ph>","source":"**Precondition:** `0.0 < alpha` and `0.0 < beta`"},{"pos":[7061,7304],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"pos":[7313,7321],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7325,7367],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>","source":"[\\<random>](../standard-library/random.md)"}],"content":"---\ntitle: \"gamma_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"random/std::tr1::gamma_distribution\"\n  - \"std::tr1::gamma_distribution\"\n  - \"std.tr1.gamma_distribution\"\n  - \"tr1.gamma_distribution\"\n  - \"tr1::gamma_distribution\"\n  - \"gamma_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"gamma_distribution class [TR1]\"\n  - \"gamma_distribution class\"\nms.assetid: 2a6798ac-6152-41d7-8ef6-d684d92f1572\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# gamma_distribution Class\nGenerates a gamma distribution.  \n  \n## Syntax  \n```  \nclass gamma_distribution {\npublic:    \n    // types \n    typedef RealType result_type;    \n    struct param_type;    \n    // constructors and reset functions \n    explicit gamma_distribution(RealType alpha = 1.0, RealType beta = 1.0);\n    explicit gamma_distribution(const param_type& parm);\n    void reset();\n    // generating functions\n    template <class URNG>  \n    result_type operator()(URNG& gen);\n    template <class URNG>\n    result_type operator()(URNG& gen, const param_type& parm);\n    // property functions\n    RealType alpha() const;\n    RealType beta() const;\n    param_type param() const;\n    void param(const param_type& parm);\n    result_type min() const;\n    result_type max() const;\n};\n```    \n#### Parameters  \n `RealType`  \n The floating-point result type, defaults to `double`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type, or type `double` if none is provided, distributed according to the Gamma Distribution. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[gamma_distribution::gamma_distribution](#gamma_distribution__gamma_distribution)|`gamma_distribution::alpha`|`gamma_distribution::param`|  \n|`gamma_distribution::operator()`|`gamma_distribution::beta`|[gamma_distribution::param_type](#gamma_distribution__param_type)|  \n  \n The property functions `alpha()` and `beta()` return their respective values for stored distribution parameters `alpha` and `beta`.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the gamma distribution, see the Wolfram MathWorld article [Gamma Distribution](http://go.microsoft.com/fwlink/LinkId=401111).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const double a, const double b, const int s) {  \n  \n    // uncomment to use a non-deterministic generator  \n    //    std::random_device gen;  \n  \n    std::mt19937 gen(1701);  \n  \n    std::gamma_distribution<> distr(a, b);  \n  \n    std::cout << std::endl;  \n    std::cout << \"min() == \" << distr.min() << std::endl;  \n    std::cout << \"max() == \" << distr.max() << std::endl;  \n    std::cout << \"alpha() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.alpha() << std::endl;  \n    std::cout << \"beta() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.beta() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<double, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Distribution for \" << s << \" samples:\" << std::endl;  \n    int counter = 0;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::fixed << std::setw(11) << ++counter << \": \"  \n            << std::setw(14) << std::setprecision(10) << elem.first << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    double a_dist = 0.0;  \n    double b_dist = 1;  \n  \n    int samples = 10;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter a floating point value for the 'alpha' distribution parameter (must be greater than zero): \";  \n    std::cin >> a_dist;  \n    std::cout << \"Enter a floating point value for the 'beta' distribution parameter (must be greater than zero): \";  \n    std::cin >> b_dist;  \n    std::cout << \"Enter an integer value for the sample count: \";  \n    std::cin >> samples;  \n  \n    test(a_dist, b_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n  \n```  \nUse CTRL-Z to bypass data entry and run using default values.  \nEnter a floating point value for the 'alpha' distribution parameter (must be greater than zero): 1  \nEnter a floating point value for the 'beta' distribution parameter (must be greater than zero): 1  \nEnter an integer value for the sample count: 10  \n \nmin() == 4.94066e-324  \nmax() == 1.79769e+308  \nalpha() == 1.0000000000  \nbeta() == 1.0000000000  \nDistribution for 10 samples:  \n    1: 0.0936880533  \n    2: 0.1225944894  \n    3: 0.6443593183  \n    4: 0.6551171649  \n    5: 0.7313457551  \n    6: 0.7313557977  \n    7: 0.7590097389  \n    8: 1.4466885214  \n    9: 1.6434088411  \n    10: 2.1201210996  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"gamma_distribution__gamma_distribution\"></a>  gamma_distribution::gamma_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit gamma_distribution(RealType alpha = 1.0, RealType beta = 1.0);\n\n \nexplicit gamma_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `alpha`  \n The `alpha` distribution parameter.  \n  \n `beta`  \n The `beta` distribution parameter.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 < alpha` and `0.0 < beta`  \n  \n The first constructor constructs an object whose stored `alpha` value holds the value `alpha` and whose stored `beta` value holds the value `beta`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"gamma_distribution__param_type\"></a>  gamma_distribution::param_type  \n Stores the parameters of the distribution.  \n```cpp   \nstruct param_type {  \n   typedef gamma_distribution<RealType> distribution_type;  \n   param_type(RealType alpha = 1.0, RealType beta 1.0);\n   RealType alpha() const;\n   RealType beta() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```  \n### Parameters  \n See parent topic [gamma_distribution Class](../standard-library/gamma-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 < alpha` and `0.0 < beta`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n\n"}