{"nodes":[{"pos":[12,57],"content":"CAtlTransactionManager Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAtlTransactionManager Class | Microsoft Docs","pos":[0,45]}]},{"pos":[696,724],"content":"CAtlTransactionManager Class","linkify":"CAtlTransactionManager Class","nodes":[{"content":"CAtlTransactionManager Class","pos":[0,28]}]},{"content":"CAtlTransactionManager class provides a wrapper to Kernel Transaction Manager (KTM) functions.","pos":[725,819]},{"pos":[827,937],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"pos":[946,952],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1004,1011],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1021,1040],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1047,1051]},{"content":"Description","pos":[1052,1063]},{"pos":[1101,1204],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::~CAtlTransactionManager<ept id=\"p1\">](#catltransactionmanager___dtorcatltransactionmanager)</ept>","source":"[CAtlTransactionManager::~CAtlTransactionManager](#catltransactionmanager___dtorcatltransactionmanager)"},{"content":"CAtlTransactionManager destructor.","pos":[1205,1239]},{"pos":[1244,1341],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::CAtlTransactionManager<ept id=\"p1\">](#catltransactionmanager__catltransactionmanager)</ept>","source":"[CAtlTransactionManager::CAtlTransactionManager](#catltransactionmanager__catltransactionmanager)"},{"content":"CAtlTransactionManager constructor.","pos":[1342,1377]},{"pos":[1388,1402],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1409,1413]},{"content":"Description","pos":[1414,1425]},{"pos":[1463,1526],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::Close<ept id=\"p1\">](#catltransactionmanager__close)</ept>","source":"[CAtlTransactionManager::Close](#catltransactionmanager__close)"},{"content":"Closes one the transaction handle.","pos":[1527,1561]},{"pos":[1566,1631],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::Commit<ept id=\"p1\">](#catltransactionmanager__commit)</ept>","source":"[CAtlTransactionManager::Commit](#catltransactionmanager__commit)"},{"content":"Requests that the transaction be committed.","pos":[1632,1675]},{"pos":[1680,1745],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::Create<ept id=\"p1\">](#catltransactionmanager__create)</ept>","source":"[CAtlTransactionManager::Create](#catltransactionmanager__create)"},{"content":"Creates the transaction handle.","pos":[1746,1777]},{"pos":[1782,1855],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::CreateFile<ept id=\"p1\">](#catltransactionmanager__createfile)</ept>","source":"[CAtlTransactionManager::CreateFile](#catltransactionmanager__createfile)"},{"content":"Creates or opens a file, file stream, or directory as a transacted operation.","pos":[1856,1933]},{"pos":[1938,2011],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::DeleteFile<ept id=\"p1\">](#catltransactionmanager__deletefile)</ept>","source":"[CAtlTransactionManager::DeleteFile](#catltransactionmanager__deletefile)"},{"content":"Deletes an existing file as a transacted operation.","pos":[2012,2063]},{"pos":[2068,2147],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::FindFirstFile<ept id=\"p1\">](#catltransactionmanager__findfirstfile)</ept>","source":"[CAtlTransactionManager::FindFirstFile](#catltransactionmanager__findfirstfile)"},{"content":"Searches a directory for a file or subdirectory as a transacted operation.","pos":[2148,2222]},{"pos":[2227,2314],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::GetFileAttributes<ept id=\"p1\">](#catltransactionmanager__getfileattributes)</ept>","source":"[CAtlTransactionManager::GetFileAttributes](#catltransactionmanager__getfileattributes)"},{"content":"Retrieves file system attributes for a specified file or directory as a transacted operation.","pos":[2315,2408]},{"pos":[2413,2504],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::GetFileAttributesEx<ept id=\"p1\">](#catltransactionmanager__getfileattributesex)</ept>","source":"[CAtlTransactionManager::GetFileAttributesEx](#catltransactionmanager__getfileattributesex)"},{"content":"Retrieves file system attributes for a specified file or directory as a transacted operation.","pos":[2505,2598]},{"pos":[2603,2674],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::GetHandle<ept id=\"p1\">](#catltransactionmanager__gethandle)</ept>","source":"[CAtlTransactionManager::GetHandle](#catltransactionmanager__gethandle)"},{"content":"Returns the transaction handle.","pos":[2675,2706]},{"pos":[2711,2784],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::IsFallback<ept id=\"p1\">](#catltransactionmanager__isfallback)</ept>","source":"[CAtlTransactionManager::IsFallback](#catltransactionmanager__isfallback)"},{"content":"Determines whether the fallback calls are enabled.","pos":[2785,2835]},{"pos":[2840,2909],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::MoveFile<ept id=\"p1\">](#catltransactionmanager__movefile)</ept>","source":"[CAtlTransactionManager::MoveFile](#catltransactionmanager__movefile)"},{"content":"Moves an existing file or a directory, including its children, as a transacted operation.","pos":[2910,2999]},{"pos":[3004,3085],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::RegCreateKeyEx<ept id=\"p1\">](#catltransactionmanager__regcreatekeyex)</ept>","source":"[CAtlTransactionManager::RegCreateKeyEx](#catltransactionmanager__regcreatekeyex)"},{"content":"Creates the specified registry key and associates it with a transaction.","pos":[3086,3158]},{"content":"If the key already exists, the function opens it.","pos":[3159,3208]},{"pos":[3213,3290],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::RegDeleteKey<ept id=\"p1\">](#catltransactionmanager__regdeletekey)</ept>","source":"[CAtlTransactionManager::RegDeleteKey](#catltransactionmanager__regdeletekey)"},{"content":"Deletes a subkey and its values from the specified platform-specific view of the registry as a transacted operation.","pos":[3291,3407]},{"pos":[3412,3489],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::RegOpenKeyEx<ept id=\"p1\">](#catltransactionmanager__regopenkeyex)</ept>","source":"[CAtlTransactionManager::RegOpenKeyEx](#catltransactionmanager__regopenkeyex)"},{"content":"Opens the specified registry key and associates it with a transaction.","pos":[3490,3560]},{"pos":[3565,3634],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::Rollback<ept id=\"p1\">](#catltransactionmanager__rollback)</ept>","source":"[CAtlTransactionManager::Rollback](#catltransactionmanager__rollback)"},{"content":"Requests that the transaction be rolled back.","pos":[3635,3680]},{"pos":[3685,3772],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::SetFileAttributes<ept id=\"p1\">](#catltransactionmanager__setfileattributes)</ept>","source":"[CAtlTransactionManager::SetFileAttributes](#catltransactionmanager__setfileattributes)"},{"content":"Sets the attributes for a file or directory as a transacted operation.","pos":[3773,3843]},{"pos":[3854,3876],"content":"Protected Data Members","linkify":"Protected Data Members","nodes":[{"content":"Protected Data Members","pos":[0,22]}]},{"content":"Name","pos":[3883,3887]},{"content":"Description","pos":[3888,3899]},{"pos":[3937,4012],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::m_bFallback<ept id=\"p1\">](#catltransactionmanager__m_bfallback)</ept>","source":"[CAtlTransactionManager::m_bFallback](#catltransactionmanager__m_bfallback)"},{"pos":[4013,4068],"content":"<ph id=\"ph1\">`TRUE`</ph> if the fallback is supported; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the fallback is supported; `FALSE` otherwise."},{"pos":[4073,4154],"content":"<bpt id=\"p1\">[</bpt>CAtlTransactionManager::m_hTransaction<ept id=\"p1\">](#catltransactionmanager__m_htransaction)</ept>","source":"[CAtlTransactionManager::m_hTransaction](#catltransactionmanager__m_htransaction)"},{"content":"The transaction handle.","pos":[4155,4178]},{"pos":[4188,4195],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4204,4225],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4229,4311],"content":"<bpt id=\"p1\">[</bpt>ATL::CAtlTransactionManager<ept id=\"p1\">](../../atl/reference/catltransactionmanager-class.md)</ept>","source":"[ATL::CAtlTransactionManager](../../atl/reference/catltransactionmanager-class.md)"},{"pos":[4320,4332],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4336,4371],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atltransactionmanager.h","source":"**Header:** atltransactionmanager.h"},{"pos":[4381,4496],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager___dtorcatltransactionmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::~CAtlTransactionManager","linkify":"<a name=\"catltransactionmanager___dtorcatltransactionmanager\"></a>  CAtlTransactionManager::~CAtlTransactionManager","source":"<a name=\"catltransactionmanager___dtorcatltransactionmanager\"></a>  CAtlTransactionManager::~CAtlTransactionManager"},{"content":"CAtlTransactionManager destructor.","pos":[4500,4534]},{"pos":[4592,4599],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In normal processing, the transaction is automatically committed and closed.","pos":[4603,4679]},{"content":"If the destructor is called during an exception unwind, the transaction is rolled back and closed.","pos":[4680,4778]},{"pos":[4788,4897],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__catltransactionmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::CAtlTransactionManager","linkify":"<a name=\"catltransactionmanager__catltransactionmanager\"></a>  CAtlTransactionManager::CAtlTransactionManager","source":"<a name=\"catltransactionmanager__catltransactionmanager\"></a>  CAtlTransactionManager::CAtlTransactionManager"},{"content":"CAtlTransactionManager constructor.","pos":[4901,4936]},{"pos":[5043,5053],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<ph id=\"ph1\"> `TRUE`</ph> indicates support fallback.","pos":[5071,5106],"source":" `TRUE` indicates support fallback."},{"content":"If transacted function fails, the class automatically calls the \"non-transacted\" function.","pos":[5107,5197]},{"content":"<ph id=\"ph1\">`FALSE`</ph> indicates no \"fallback\" calls.","pos":[5198,5236],"source":"`FALSE` indicates no \"fallback\" calls."},{"content":"<ph id=\"ph1\"> `TRUE`</ph> indicates that the transaction handler is created automatically in the constructor.","pos":[5270,5361],"source":" `TRUE` indicates that the transaction handler is created automatically in the constructor."},{"content":"<ph id=\"ph1\">`FALSE`</ph> indicates that it is not.","pos":[5362,5395],"source":"`FALSE` indicates that it is not."},{"pos":[5405,5412],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5422,5497],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__close\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::Close","linkify":"<a name=\"catltransactionmanager__close\"></a>  CAtlTransactionManager::Close","source":"<a name=\"catltransactionmanager__close\"></a>  CAtlTransactionManager::Close"},{"content":"Closes the transaction handle.","pos":[5501,5531]},{"pos":[5599,5611],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5615,5655],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if successful; otherwise `FALSE`."},{"pos":[5665,5672],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This wrapper calls the <ph id=\"ph1\">`CloseHandle`</ph> function.","pos":[5676,5722],"source":"This wrapper calls the `CloseHandle` function."},{"content":"The method is automatically called in the destructor.","pos":[5723,5776]},{"pos":[5786,5863],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__commit\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::Commit","linkify":"<a name=\"catltransactionmanager__commit\"></a>  CAtlTransactionManager::Commit","source":"<a name=\"catltransactionmanager__commit\"></a>  CAtlTransactionManager::Commit"},{"content":"Requests that the transaction be committed.","pos":[5867,5910]},{"pos":[5979,5991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5995,6035],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if successful; otherwise `FALSE`."},{"pos":[6045,6052],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This wrapper calls the <ph id=\"ph1\">`CommitTransaction`</ph> function.","pos":[6056,6108],"source":"This wrapper calls the `CommitTransaction` function."},{"content":"The method is automatically called in the destructor.","pos":[6109,6162]},{"pos":[6172,6249],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::Create","linkify":"<a name=\"catltransactionmanager__create\"></a>  CAtlTransactionManager::Create","source":"<a name=\"catltransactionmanager__create\"></a>  CAtlTransactionManager::Create"},{"content":"Creates the transaction handle.","pos":[6253,6284]},{"pos":[6353,6365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6369,6409],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if successful; otherwise `FALSE`."},{"pos":[6419,6426],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This wrapper calls the <ph id=\"ph1\">`CreateTransaction`</ph> function.","pos":[6430,6482],"source":"This wrapper calls the `CreateTransaction` function."},{"content":"Check it for","pos":[6483,6495]},{"pos":[6505,6590],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__createfile\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::CreateFile","linkify":"<a name=\"catltransactionmanager__createfile\"></a>  CAtlTransactionManager::CreateFile","source":"<a name=\"catltransactionmanager__createfile\"></a>  CAtlTransactionManager::CreateFile"},{"content":"Creates or opens a file, file stream, or directory as a transacted operation.","pos":[6594,6671]},{"pos":[6953,6963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The name of an object to be created or opened.","pos":[6983,7029]},{"content":"The access to the object, which can be summarized as read, write, both, or neither (zero).","pos":[7057,7147]},{"content":"The most commonly used values are GENERIC_READ, GENERIC_WRITE, or both: GENERIC_READ &amp;#124; GENERIC_WRITE.","pos":[7148,7254],"source":" The most commonly used values are GENERIC_READ, GENERIC_WRITE, or both: GENERIC_READ &#124; GENERIC_WRITE."},{"content":"The sharing mode of an object, which can be read, write, both, delete, all of these, or none: 0, FILE_SHARE_DELETE, FILE_SHARE_READ, FILE_SHARE_WRITE.","pos":[7278,7428]},{"content":"A pointer to a SECURITY_ATTRIBUTES structure that contains an optional security descriptor and also determines whether or not the returned handle can be inherited by child processes.","pos":[7461,7643]},{"content":"The parameter can be <ph id=\"ph1\">`NULL`</ph>.","pos":[7644,7672],"source":" The parameter can be `NULL`."},{"content":"An action to take on files that exist and do not exist.","pos":[7706,7761]},{"content":"This parameter must be one of the following values, which cannot be combined: CREATE_ALWAYS, CREATE_NEW, OPEN_ALWAYS, OPEN_EXISTING, or TRUNCATE_EXISTING.","pos":[7762,7916]},{"content":"The file attributes and flags.","pos":[7949,7979]},{"content":"This parameter can include any combination of the available file attributes (FILE_ATTRIBUTE_*).","pos":[7980,8075]},{"content":"All other file attributes override FILE_ATTRIBUTE_NORMAL.","pos":[8076,8133]},{"content":"This parameter can also contain combinations of flags (FILE_FLAG_<ph id=\"ph1\">\\*</ph>) for control of buffering behavior, access modes, and other special-purpose flags.","pos":[8134,8284],"source":" This parameter can also contain combinations of flags (FILE_FLAG_\\*) for control of buffering behavior, access modes, and other special-purpose flags."},{"content":"These combine with any FILE_ATTRIBUTE_<ph id=\"ph1\">\\*</ph> values.","pos":[8285,8333],"source":" These combine with any FILE_ATTRIBUTE_\\* values."},{"content":"A valid handle to a template file with the GENERIC_READ access right.","pos":[8359,8428]},{"content":"The template file supplies file attributes and extended attributes for the file that is being created.","pos":[8429,8531]},{"content":"This parameter can be <ph id=\"ph1\">`NULL`</ph>.","pos":[8532,8561],"source":" This parameter can be `NULL`."},{"pos":[8571,8583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a handle that can be used to access the object.","pos":[8587,8642]},{"pos":[8652,8659],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8663,8718],"content":"This wrapper calls the <ph id=\"ph1\">`CreateFileTransacted`</ph> function.","source":"This wrapper calls the `CreateFileTransacted` function."},{"pos":[8728,8813],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__deletefile\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::DeleteFile","linkify":"<a name=\"catltransactionmanager__deletefile\"></a>  CAtlTransactionManager::DeleteFile","source":"<a name=\"catltransactionmanager__deletefile\"></a>  CAtlTransactionManager::DeleteFile"},{"content":"Deletes an existing file as a transacted operation.","pos":[8817,8868]},{"pos":[8959,8969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The name of the file to be deleted.","pos":[8989,9024]},{"pos":[9034,9041],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9045,9100],"content":"This wrapper calls the <ph id=\"ph1\">`DeleteFileTransacted`</ph> function.","source":"This wrapper calls the `DeleteFileTransacted` function."},{"pos":[9110,9201],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__findfirstfile\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::FindFirstFile","linkify":"<a name=\"catltransactionmanager__findfirstfile\"></a>  CAtlTransactionManager::FindFirstFile","source":"<a name=\"catltransactionmanager__findfirstfile\"></a>  CAtlTransactionManager::FindFirstFile"},{"content":"Searches a directory for a file or subdirectory as a transacted operation.","pos":[9205,9279]},{"pos":[9407,9417],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The directory or path, and the file name to search for.","pos":[9437,9492]},{"content":"This parameter can include wildcard characters, such as an asterisk (*) or a question mark ().","pos":[9493,9587]},{"content":"A pointer to the WIN32_FIND_DATA structure that receives information about a found file or subdirectory.","pos":[9609,9713]},{"pos":[9723,9735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the function succeeds, the return value is a search handle used in a subsequent call to <ph id=\"ph1\">`FindNextFile`</ph> or <ph id=\"ph2\">`FindClose`</ph>.","pos":[9739,9860],"source":"If the function succeeds, the return value is a search handle used in a subsequent call to `FindNextFile` or `FindClose`."},{"content":"If the function fails or fails to locate files from the search string in the <ph id=\"ph1\">`lpFileName`</ph> parameter, the return value is INVALID_HANDLE_VALUE.","pos":[9861,10003],"source":" If the function fails or fails to locate files from the search string in the `lpFileName` parameter, the return value is INVALID_HANDLE_VALUE."},{"pos":[10013,10020],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10024,10082],"content":"This wrapper calls the <ph id=\"ph1\">`FindFirstFileTransacted`</ph> function.","source":"This wrapper calls the `FindFirstFileTransacted` function."},{"pos":[10092,10191],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__getfileattributes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::GetFileAttributes","linkify":"<a name=\"catltransactionmanager__getfileattributes\"></a>  CAtlTransactionManager::GetFileAttributes","source":"<a name=\"catltransactionmanager__getfileattributes\"></a>  CAtlTransactionManager::GetFileAttributes"},{"content":"Retrieves file system attributes for a specified file or directory as a transacted operation.","pos":[10195,10288]},{"pos":[10387,10397],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The name of the file or directory.","pos":[10417,10451]},{"pos":[10461,10468],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10472,10534],"content":"This wrapper calls the <ph id=\"ph1\">`GetFileAttributesTransacted`</ph> function.","source":"This wrapper calls the `GetFileAttributesTransacted` function."},{"pos":[10544,10647],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__getfileattributesex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::GetFileAttributesEx","linkify":"<a name=\"catltransactionmanager__getfileattributesex\"></a>  CAtlTransactionManager::GetFileAttributesEx","source":"<a name=\"catltransactionmanager__getfileattributesex\"></a>  CAtlTransactionManager::GetFileAttributesEx"},{"content":"Retrieves file system attributes for a specified file or directory as a transacted operation.","pos":[10651,10744]},{"pos":[10915,10925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The name of the file or directory.","pos":[10945,10979]},{"content":"The level of attribute information to retrieve.","pos":[11004,11051]},{"content":"A pointer to a buffer that receives the attribute information.","pos":[11081,11143]},{"content":"The type of attribute information that is stored into this buffer is determined by the value of <ph id=\"ph1\">`fInfoLevelId`</ph>.","pos":[11144,11255],"source":" The type of attribute information that is stored into this buffer is determined by the value of `fInfoLevelId`."},{"content":"If the <ph id=\"ph1\">`fInfoLevelId`</ph> parameter is GetFileExInfoStandard then this parameter points to a WIN32_FILE_ATTRIBUTE_DATA structure.","pos":[11256,11381],"source":" If the `fInfoLevelId` parameter is GetFileExInfoStandard then this parameter points to a WIN32_FILE_ATTRIBUTE_DATA structure."},{"pos":[11391,11398],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11402,11464],"content":"This wrapper calls the <ph id=\"ph1\">`GetFileAttributesTransacted`</ph> function.","source":"This wrapper calls the `GetFileAttributesTransacted` function."},{"pos":[11474,11557],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__gethandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::GetHandle","linkify":"<a name=\"catltransactionmanager__gethandle\"></a>  CAtlTransactionManager::GetHandle","source":"<a name=\"catltransactionmanager__gethandle\"></a>  CAtlTransactionManager::GetHandle"},{"content":"Returns the transaction handle.","pos":[11561,11592]},{"pos":[11641,11653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the transaction handle for a class.","pos":[11657,11700]},{"content":"Returns <ph id=\"ph1\">`NULL`</ph> if the <ph id=\"ph2\">`CAtlTransactionManager`</ph> is not attached to a handle.","pos":[11701,11776],"source":" Returns `NULL` if the `CAtlTransactionManager` is not attached to a handle."},{"pos":[11786,11793],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11803,11888],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__isfallback\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::IsFallback","linkify":"<a name=\"catltransactionmanager__isfallback\"></a>  CAtlTransactionManager::IsFallback","source":"<a name=\"catltransactionmanager__isfallback\"></a>  CAtlTransactionManager::IsFallback"},{"content":"Determines whether the fallback calls are enabled.","pos":[11892,11942]},{"pos":[11990,12002],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns <ph id=\"ph1\">`TRUE`</ph> is the class supports fallback calls.","pos":[12006,12058],"source":"Returns `TRUE` is the class supports fallback calls."},{"content":"<ph id=\"ph1\">`FALSE`</ph> otherwise.","pos":[12059,12077],"source":"`FALSE` otherwise."},{"pos":[12087,12094],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12104,12191],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__m_bfallback\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::m_bFallback","linkify":"<a name=\"catltransactionmanager__m_bfallback\"></a>  CAtlTransactionManager::m_bFallback","source":"<a name=\"catltransactionmanager__m_bfallback\"></a>  CAtlTransactionManager::m_bFallback"},{"pos":[12195,12250],"content":"<ph id=\"ph1\">`TRUE`</ph> if the fallback is supported; <ph id=\"ph2\">`FALSE`</ph> otherwise.","source":"`TRUE` if the fallback is supported; `FALSE` otherwise."},{"pos":[12291,12298],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12308,12401],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__m_htransaction\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::m_hTransaction","linkify":"<a name=\"catltransactionmanager__m_htransaction\"></a>  CAtlTransactionManager::m_hTransaction","source":"<a name=\"catltransactionmanager__m_htransaction\"></a>  CAtlTransactionManager::m_hTransaction"},{"content":"The transaction handle.","pos":[12405,12428]},{"pos":[12474,12481],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12491,12572],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__movefile\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::MoveFile","linkify":"<a name=\"catltransactionmanager__movefile\"></a>  CAtlTransactionManager::MoveFile","source":"<a name=\"catltransactionmanager__movefile\"></a>  CAtlTransactionManager::MoveFile"},{"content":"Moves an existing file or a directory, including its children, as a transacted operation.","pos":[12576,12665]},{"pos":[12781,12791],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The current name of the existing file or directory on the local computer.","pos":[12814,12887]},{"content":"The new name for the file or directory.","pos":[12913,12952]},{"content":"This name must not already exist.","pos":[12953,12986]},{"content":"A new file may be on a different file system or drive.","pos":[12987,13041]},{"content":"A new directory must be on the same drive.","pos":[13042,13084]},{"pos":[13094,13101],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13105,13158],"content":"This wrapper calls the <ph id=\"ph1\">`MoveFileTransacted`</ph> function.","source":"This wrapper calls the `MoveFileTransacted` function."},{"pos":[13168,13261],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__regcreatekeyex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::RegCreateKeyEx","linkify":"<a name=\"catltransactionmanager__regcreatekeyex\"></a>  CAtlTransactionManager::RegCreateKeyEx","source":"<a name=\"catltransactionmanager__regcreatekeyex\"></a>  CAtlTransactionManager::RegCreateKeyEx"},{"content":"Creates the specified registry key and associates it with a transaction.","pos":[13265,13337]},{"content":"If the key already exists, the function opens it.","pos":[13338,13387]},{"pos":[13688,13698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A handle to an open registry key.","pos":[13712,13745]},{"content":"The name of a subkey that this function opens or creates.","pos":[13766,13823]},{"content":"This parameter is reserved and must be zero.","pos":[13846,13890]},{"content":"The user-defined class of this key.","pos":[13910,13945]},{"content":"This parameter may be ignored.","pos":[13946,13976]},{"content":"This parameter can be NULL.","pos":[13977,14004]},{"content":"This parameter can be one of the following values: REG_OPTION_BACKUP_RESTORE, REG_OPTION_NON_VOLATILE, or REG_OPTION_VOLATILE.","pos":[14026,14152]},{"content":"A mask that specifies the access rights for the key.","pos":[14175,14227]},{"content":"Pointer to a SECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes.","pos":[14260,14383]},{"content":"If <ph id=\"ph1\">`lpSecurityAttributes`</ph> is <ph id=\"ph2\">`NULL`</ph>, the handle cannot be inherited.","pos":[14384,14452],"source":" If `lpSecurityAttributes` is `NULL`, the handle cannot be inherited."},{"content":"A pointer to a variable that receives a handle to the opened or created key.","pos":[14474,14550]},{"content":"If the key is not one of the predefined registry keys, call the <ph id=\"ph1\">`RegCloseKey`</ph> function after you have finished using the handle.","pos":[14551,14679],"source":" If the key is not one of the predefined registry keys, call the `RegCloseKey` function after you have finished using the handle."},{"content":"A pointer to a variable that receives one of the following disposition values: REG_CREATED_NEW_KEY or REG_OPENED_EXISTING_KEY.","pos":[14707,14833]},{"pos":[14843,14855],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the function succeeds, the return value is ERROR_SUCCESS.","pos":[14859,14919]},{"content":"If the function fails, the return value is a nonzero error code defined in Winerror.h.","pos":[14920,15006]},{"pos":[15016,15023],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15027,15084],"content":"This wrapper calls the <ph id=\"ph1\">`RegCreateKeyTransacted`</ph> function.","source":"This wrapper calls the `RegCreateKeyTransacted` function."},{"pos":[15094,15183],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__regdeletekey\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::RegDeleteKey","linkify":"<a name=\"catltransactionmanager__regdeletekey\"></a>  CAtlTransactionManager::RegDeleteKey","source":"<a name=\"catltransactionmanager__regdeletekey\"></a>  CAtlTransactionManager::RegDeleteKey"},{"content":"Deletes a subkey and its values from the specified platform-specific view of the registry as a transacted operation.","pos":[15187,15303]},{"pos":[15411,15421],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[15428,15437]},{"content":"Description","pos":[15438,15449]},{"content":"A handle to an open registry key.","pos":[15499,15532]},{"content":"The name of the key to be deleted.","pos":[15548,15582]},{"pos":[15593,15605],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the function succeeds, the return value is ERROR_SUCCESS.","pos":[15609,15669]},{"content":"If the function fails, the return value is a nonzero error code defined in Winerror.h.","pos":[15670,15756]},{"pos":[15766,15773],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15777,15834],"content":"This wrapper calls the <ph id=\"ph1\">`RegDeleteKeyTransacted`</ph> function.","source":"This wrapper calls the `RegDeleteKeyTransacted` function."},{"pos":[15844,15933],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__regopenkeyex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::RegOpenKeyEx","linkify":"<a name=\"catltransactionmanager__regopenkeyex\"></a>  CAtlTransactionManager::RegOpenKeyEx","source":"<a name=\"catltransactionmanager__regopenkeyex\"></a>  CAtlTransactionManager::RegOpenKeyEx"},{"content":"Opens the specified registry key and associates it with a transaction.","pos":[15937,16007]},{"pos":[16181,16191],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A handle to an open registry key.","pos":[16205,16238]},{"content":"The name of the registry subkey to be opened.","pos":[16259,16304]},{"content":"This parameter is reserved and must be zero.","pos":[16326,16370]},{"content":"A mask that specifies the access rights for the key.","pos":[16393,16445]},{"content":"A pointer to a variable that receives a handle to the opened or created key.","pos":[16467,16543]},{"content":"If the key is not one of the predefined registry keys, call the <ph id=\"ph1\">`RegCloseKey`</ph> function after you have finished using the handle.","pos":[16544,16672],"source":" If the key is not one of the predefined registry keys, call the `RegCloseKey` function after you have finished using the handle."},{"pos":[16682,16694],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the function succeeds, the return value is ERROR_SUCCESS.","pos":[16698,16758]},{"content":"If the function fails, the return value is a nonzero error code defined in Winerror.h","pos":[16759,16844]},{"pos":[16854,16861],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[16865,16920],"content":"This wrapper calls the <ph id=\"ph1\">`RegOpenKeyTransacted`</ph> function.","source":"This wrapper calls the `RegOpenKeyTransacted` function."},{"pos":[16930,17011],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__rollback\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::Rollback","linkify":"<a name=\"catltransactionmanager__rollback\"></a>  CAtlTransactionManager::Rollback","source":"<a name=\"catltransactionmanager__rollback\"></a>  CAtlTransactionManager::Rollback"},{"content":"Requests that the transaction be rolled back.","pos":[17015,17060]},{"pos":[17131,17143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17147,17187],"content":"<ph id=\"ph1\">`TRUE`</ph> if successful; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if successful; otherwise `FALSE`."},{"pos":[17197,17204],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17208,17262],"content":"This wrapper calls the <ph id=\"ph1\">`RollbackTransaction`</ph> function.","source":"This wrapper calls the `RollbackTransaction` function."},{"pos":[17272,17371],"content":"<bpt id=\"p1\">&lt;a name=\"catltransactionmanager__setfileattributes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAtlTransactionManager::SetFileAttributes","linkify":"<a name=\"catltransactionmanager__setfileattributes\"></a>  CAtlTransactionManager::SetFileAttributes","source":"<a name=\"catltransactionmanager__setfileattributes\"></a>  CAtlTransactionManager::SetFileAttributes"},{"content":"Sets the attributes for a file or directory as a transacted operation.","pos":[17375,17445]},{"pos":[17564,17574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The name of the file or directory.","pos":[17594,17628]},{"content":"The file attributes to set for the file.","pos":[17653,17693]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>SetFileAttributesTransacted<ept id=\"p1\">](http://go.microsoft.com/fwlink/linkid=158699)</ept>.","pos":[17694,17796],"source":" For more information, see [SetFileAttributesTransacted](http://go.microsoft.com/fwlink/linkid=158699)."},{"pos":[17806,17813],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[17817,17879],"content":"This wrapper calls the <ph id=\"ph1\">`SetFileAttributesTransacted`</ph> function.","source":"This wrapper calls the `SetFileAttributesTransacted` function."},{"pos":[17888,17896],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[17900,17969],"content":"<bpt id=\"p1\">[</bpt>ATL COM Desktop Components<ept id=\"p1\">](../../atl/atl-com-desktop-components.md)</ept>","source":"[ATL COM Desktop Components](../../atl/atl-com-desktop-components.md)"}],"content":"---\ntitle: \"CAtlTransactionManager Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CAtlTransactionManager\"\n  - \"atltransactionmanager/ATL::CAtlTransactionManager\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CAtlTransactionManager class\"\nms.assetid: b01732dc-1d16-4b42-bfac-b137fca2b740\ncaps.latest.revision: 25\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAtlTransactionManager Class\nCAtlTransactionManager class provides a wrapper to Kernel Transaction Manager (KTM) functions.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\nclass CAtlTransactionManager;\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlTransactionManager::~CAtlTransactionManager](#catltransactionmanager___dtorcatltransactionmanager)|CAtlTransactionManager destructor.|  \n|[CAtlTransactionManager::CAtlTransactionManager](#catltransactionmanager__catltransactionmanager)|CAtlTransactionManager constructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlTransactionManager::Close](#catltransactionmanager__close)|Closes one the transaction handle.|  \n|[CAtlTransactionManager::Commit](#catltransactionmanager__commit)|Requests that the transaction be committed.|  \n|[CAtlTransactionManager::Create](#catltransactionmanager__create)|Creates the transaction handle.|  \n|[CAtlTransactionManager::CreateFile](#catltransactionmanager__createfile)|Creates or opens a file, file stream, or directory as a transacted operation.|  \n|[CAtlTransactionManager::DeleteFile](#catltransactionmanager__deletefile)|Deletes an existing file as a transacted operation.|  \n|[CAtlTransactionManager::FindFirstFile](#catltransactionmanager__findfirstfile)|Searches a directory for a file or subdirectory as a transacted operation.|  \n|[CAtlTransactionManager::GetFileAttributes](#catltransactionmanager__getfileattributes)|Retrieves file system attributes for a specified file or directory as a transacted operation.|  \n|[CAtlTransactionManager::GetFileAttributesEx](#catltransactionmanager__getfileattributesex)|Retrieves file system attributes for a specified file or directory as a transacted operation.|  \n|[CAtlTransactionManager::GetHandle](#catltransactionmanager__gethandle)|Returns the transaction handle.|  \n|[CAtlTransactionManager::IsFallback](#catltransactionmanager__isfallback)|Determines whether the fallback calls are enabled.|  \n|[CAtlTransactionManager::MoveFile](#catltransactionmanager__movefile)|Moves an existing file or a directory, including its children, as a transacted operation.|  \n|[CAtlTransactionManager::RegCreateKeyEx](#catltransactionmanager__regcreatekeyex)|Creates the specified registry key and associates it with a transaction. If the key already exists, the function opens it.|  \n|[CAtlTransactionManager::RegDeleteKey](#catltransactionmanager__regdeletekey)|Deletes a subkey and its values from the specified platform-specific view of the registry as a transacted operation.|  \n|[CAtlTransactionManager::RegOpenKeyEx](#catltransactionmanager__regopenkeyex)|Opens the specified registry key and associates it with a transaction.|  \n|[CAtlTransactionManager::Rollback](#catltransactionmanager__rollback)|Requests that the transaction be rolled back.|  \n|[CAtlTransactionManager::SetFileAttributes](#catltransactionmanager__setfileattributes)|Sets the attributes for a file or directory as a transacted operation.|  \n  \n### Protected Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAtlTransactionManager::m_bFallback](#catltransactionmanager__m_bfallback)|`TRUE` if the fallback is supported; `FALSE` otherwise.|  \n|[CAtlTransactionManager::m_hTransaction](#catltransactionmanager__m_htransaction)|The transaction handle.|  \n  \n## Remarks  \n  \n## Inheritance Hierarchy  \n [ATL::CAtlTransactionManager](../../atl/reference/catltransactionmanager-class.md)  \n  \n## Requirements  \n **Header:** atltransactionmanager.h  \n  \n##  <a name=\"catltransactionmanager___dtorcatltransactionmanager\"></a>  CAtlTransactionManager::~CAtlTransactionManager  \n CAtlTransactionManager destructor.  \n  \n```\nvirtual ~CAtlTransactionManager();\n```  \n  \n### Remarks  \n In normal processing, the transaction is automatically committed and closed. If the destructor is called during an exception unwind, the transaction is rolled back and closed.  \n  \n##  <a name=\"catltransactionmanager__catltransactionmanager\"></a>  CAtlTransactionManager::CAtlTransactionManager  \n CAtlTransactionManager constructor.  \n  \n```\nCAtlTransactionManager(BOOL bFallback = TRUE,  BOOL bAutoCreateTransaction = TRUE);\n```  \n  \n### Parameters  \n `bFallback`  \n `TRUE` indicates support fallback. If transacted function fails, the class automatically calls the \"non-transacted\" function. `FALSE` indicates no \"fallback\" calls.  \n  \n `bAutoCreateTransaction`  \n `TRUE` indicates that the transaction handler is created automatically in the constructor. `FALSE` indicates that it is not.  \n  \n### Remarks  \n  \n##  <a name=\"catltransactionmanager__close\"></a>  CAtlTransactionManager::Close  \n Closes the transaction handle.  \n  \n```\ninline BOOL CAtlTransactionManager::Close();\n```  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`.  \n  \n### Remarks  \n This wrapper calls the `CloseHandle` function. The method is automatically called in the destructor.  \n  \n##  <a name=\"catltransactionmanager__commit\"></a>  CAtlTransactionManager::Commit  \n Requests that the transaction be committed.  \n  \n```\ninline BOOL CAtlTransactionManager::Commit();\n```  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`.  \n  \n### Remarks  \n This wrapper calls the `CommitTransaction` function. The method is automatically called in the destructor.  \n  \n##  <a name=\"catltransactionmanager__create\"></a>  CAtlTransactionManager::Create  \n Creates the transaction handle.  \n  \n```\ninline BOOL CAtlTransactionManager::Create();\n```  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`.  \n  \n### Remarks  \n This wrapper calls the `CreateTransaction` function. Check it for  \n  \n##  <a name=\"catltransactionmanager__createfile\"></a>  CAtlTransactionManager::CreateFile  \n Creates or opens a file, file stream, or directory as a transacted operation.  \n  \n```\ninline HANDLE CAtlTransactionManager::CreateFile(LPCTSTR lpFileName,\n    DWORD dwDesiredAccess,\n    DWORD dwShareMode,\n    LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    DWORD dwCreationDisposition,\n    DWORD dwFlagsAndAttributes,\n    HANDLE hTemplateFile);\n```  \n  \n### Parameters  \n `lpFileName`  \n The name of an object to be created or opened.  \n  \n `dwDesiredAccess`  \n The access to the object, which can be summarized as read, write, both, or neither (zero). The most commonly used values are GENERIC_READ, GENERIC_WRITE, or both: GENERIC_READ &#124; GENERIC_WRITE.  \n  \n `dwShareMode`  \n The sharing mode of an object, which can be read, write, both, delete, all of these, or none: 0, FILE_SHARE_DELETE, FILE_SHARE_READ, FILE_SHARE_WRITE.  \n  \n `lpSecurityAttributes`  \n A pointer to a SECURITY_ATTRIBUTES structure that contains an optional security descriptor and also determines whether or not the returned handle can be inherited by child processes. The parameter can be `NULL`.  \n  \n `dwCreationDisposition`  \n An action to take on files that exist and do not exist. This parameter must be one of the following values, which cannot be combined: CREATE_ALWAYS, CREATE_NEW, OPEN_ALWAYS, OPEN_EXISTING, or TRUNCATE_EXISTING.  \n  \n `dwFlagsAndAttributes`  \n The file attributes and flags. This parameter can include any combination of the available file attributes (FILE_ATTRIBUTE_*). All other file attributes override FILE_ATTRIBUTE_NORMAL. This parameter can also contain combinations of flags (FILE_FLAG_\\*) for control of buffering behavior, access modes, and other special-purpose flags. These combine with any FILE_ATTRIBUTE_\\* values.  \n  \n `hTemplateFile`  \n A valid handle to a template file with the GENERIC_READ access right. The template file supplies file attributes and extended attributes for the file that is being created. This parameter can be `NULL`.  \n  \n### Return Value  \n Returns a handle that can be used to access the object.  \n  \n### Remarks  \n This wrapper calls the `CreateFileTransacted` function.  \n  \n##  <a name=\"catltransactionmanager__deletefile\"></a>  CAtlTransactionManager::DeleteFile  \n Deletes an existing file as a transacted operation.  \n  \n```\ninline BOOL CAtlTransactionManager::DeleteFile(LPCTSTR lpFileName);\n```  \n  \n### Parameters  \n `lpFileName`  \n The name of the file to be deleted.  \n  \n### Remarks  \n This wrapper calls the `DeleteFileTransacted` function.  \n  \n##  <a name=\"catltransactionmanager__findfirstfile\"></a>  CAtlTransactionManager::FindFirstFile  \n Searches a directory for a file or subdirectory as a transacted operation.  \n  \n```\ninline HANDLE CAtlTransactionManager::FindFirstFile(LPCTSTR lpFileName,\n    WIN32_FIND_DATA* pNextInfo);\n```  \n  \n### Parameters  \n `lpFileName`  \n The directory or path, and the file name to search for. This parameter can include wildcard characters, such as an asterisk (*) or a question mark ().  \n  \n `pNextInfo`  \n A pointer to the WIN32_FIND_DATA structure that receives information about a found file or subdirectory.  \n  \n### Return Value  \n If the function succeeds, the return value is a search handle used in a subsequent call to `FindNextFile` or `FindClose`. If the function fails or fails to locate files from the search string in the `lpFileName` parameter, the return value is INVALID_HANDLE_VALUE.  \n  \n### Remarks  \n This wrapper calls the `FindFirstFileTransacted` function.  \n  \n##  <a name=\"catltransactionmanager__getfileattributes\"></a>  CAtlTransactionManager::GetFileAttributes  \n Retrieves file system attributes for a specified file or directory as a transacted operation.  \n  \n```\ninline DWORD CAtlTransactionManager::GetFileAttributes(LPCTSTR lpFileName);\n```  \n  \n### Parameters  \n `lpFileName`  \n The name of the file or directory.  \n  \n### Remarks  \n This wrapper calls the `GetFileAttributesTransacted` function.  \n  \n##  <a name=\"catltransactionmanager__getfileattributesex\"></a>  CAtlTransactionManager::GetFileAttributesEx  \n Retrieves file system attributes for a specified file or directory as a transacted operation.  \n  \n```\ninline BOOL CAtlTransactionManager::GetFileAttributesEx(LPCTSTR lpFileName,\n    GET_FILEEX_INFO_LEVELS fInfoLevelId,\n    LPVOID lpFileInformation);\n```  \n  \n### Parameters  \n `lpFileName`  \n The name of the file or directory.  \n  \n `fInfoLevelId`  \n The level of attribute information to retrieve.  \n  \n `lpFileInformation`  \n A pointer to a buffer that receives the attribute information. The type of attribute information that is stored into this buffer is determined by the value of `fInfoLevelId`. If the `fInfoLevelId` parameter is GetFileExInfoStandard then this parameter points to a WIN32_FILE_ATTRIBUTE_DATA structure.  \n  \n### Remarks  \n This wrapper calls the `GetFileAttributesTransacted` function.  \n  \n##  <a name=\"catltransactionmanager__gethandle\"></a>  CAtlTransactionManager::GetHandle  \n Returns the transaction handle.  \n  \n```\nHANDLE GetHandle() const;\n```  \n  \n### Return Value  \n Returns the transaction handle for a class. Returns `NULL` if the `CAtlTransactionManager` is not attached to a handle.  \n  \n### Remarks  \n  \n##  <a name=\"catltransactionmanager__isfallback\"></a>  CAtlTransactionManager::IsFallback  \n Determines whether the fallback calls are enabled.  \n  \n```\nBOOL IsFallback() const;\n```  \n  \n### Return Value  \n Returns `TRUE` is the class supports fallback calls. `FALSE` otherwise.  \n  \n### Remarks  \n  \n##  <a name=\"catltransactionmanager__m_bfallback\"></a>  CAtlTransactionManager::m_bFallback  \n `TRUE` if the fallback is supported; `FALSE` otherwise.  \n  \n```\nBOOL m_bFallback;\n```  \n  \n### Remarks  \n  \n##  <a name=\"catltransactionmanager__m_htransaction\"></a>  CAtlTransactionManager::m_hTransaction  \n The transaction handle.  \n  \n```\nHANDLE m_hTransaction;\n```  \n  \n### Remarks  \n  \n##  <a name=\"catltransactionmanager__movefile\"></a>  CAtlTransactionManager::MoveFile  \n Moves an existing file or a directory, including its children, as a transacted operation.  \n  \n```\ninline BOOL CAtlTransactionManager::MoveFile(LPCTSTR lpOldFileName,  LPCTSTR lpNewFileName);\n```  \n  \n### Parameters  \n `lpOldFileName`  \n The current name of the existing file or directory on the local computer.  \n  \n `lpNewFileName`  \n The new name for the file or directory. This name must not already exist. A new file may be on a different file system or drive. A new directory must be on the same drive.  \n  \n### Remarks  \n This wrapper calls the `MoveFileTransacted` function.  \n  \n##  <a name=\"catltransactionmanager__regcreatekeyex\"></a>  CAtlTransactionManager::RegCreateKeyEx  \n Creates the specified registry key and associates it with a transaction. If the key already exists, the function opens it.  \n  \n```\ninline LSTATUS CAtlTransactionManager::RegCreateKeyEx(HKEY hKey,\n    LPCTSTR lpSubKey,\n    DWORD dwReserved,\n    LPTSTR lpClass,\n    DWORD dwOptions,\n    REGSAM samDesired,\n    CONST LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n    PHKEY phkResult,\n    LPDWORD lpdwDisposition);\n```  \n  \n### Parameters  \n `hKey`  \n A handle to an open registry key.  \n  \n `lpSubKey`  \n The name of a subkey that this function opens or creates.  \n  \n `dwReserved`  \n This parameter is reserved and must be zero.  \n  \n `lpClass`  \n The user-defined class of this key. This parameter may be ignored. This parameter can be NULL.  \n  \n `dwOptions`  \n This parameter can be one of the following values: REG_OPTION_BACKUP_RESTORE, REG_OPTION_NON_VOLATILE, or REG_OPTION_VOLATILE.  \n  \n `samDesired`  \n A mask that specifies the access rights for the key.  \n  \n `lpSecurityAttributes`  \n Pointer to a SECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If `lpSecurityAttributes` is `NULL`, the handle cannot be inherited.  \n  \n `phkResult`  \n A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the `RegCloseKey` function after you have finished using the handle.  \n  \n `lpdwDisposition`  \n A pointer to a variable that receives one of the following disposition values: REG_CREATED_NEW_KEY or REG_OPENED_EXISTING_KEY.  \n  \n### Return Value  \n If the function succeeds, the return value is ERROR_SUCCESS. If the function fails, the return value is a nonzero error code defined in Winerror.h.  \n  \n### Remarks  \n This wrapper calls the `RegCreateKeyTransacted` function.  \n  \n##  <a name=\"catltransactionmanager__regdeletekey\"></a>  CAtlTransactionManager::RegDeleteKey  \n Deletes a subkey and its values from the specified platform-specific view of the registry as a transacted operation.  \n  \n```\ninline LSTATUS CAtlTransactionManager::RegDeleteKeyEx(HKEY hKey,  LPCTSTR lpSubKey);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`hKey`|A handle to an open registry key.|  \n|`lpSubKey`|The name of the key to be deleted.|  \n  \n### Return Value  \n If the function succeeds, the return value is ERROR_SUCCESS. If the function fails, the return value is a nonzero error code defined in Winerror.h.  \n  \n### Remarks  \n This wrapper calls the `RegDeleteKeyTransacted` function.  \n  \n##  <a name=\"catltransactionmanager__regopenkeyex\"></a>  CAtlTransactionManager::RegOpenKeyEx  \n Opens the specified registry key and associates it with a transaction.  \n  \n```\ninline LSTATUS CAtlTransactionManager::RegOpenKeyEx(HKEY hKey,\n    LPCTSTR lpSubKey,\n    DWORD ulOptions,\n    REGSAM samDesired,\n    PHKEY phkResult);\n```  \n  \n### Parameters  \n `hKey`  \n A handle to an open registry key.  \n  \n `lpSubKey`  \n The name of the registry subkey to be opened.  \n  \n `ulOptions`  \n This parameter is reserved and must be zero.  \n  \n `samDesired`  \n A mask that specifies the access rights for the key.  \n  \n `phkResult`  \n A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the `RegCloseKey` function after you have finished using the handle.  \n  \n### Return Value  \n If the function succeeds, the return value is ERROR_SUCCESS. If the function fails, the return value is a nonzero error code defined in Winerror.h  \n  \n### Remarks  \n This wrapper calls the `RegOpenKeyTransacted` function.  \n  \n##  <a name=\"catltransactionmanager__rollback\"></a>  CAtlTransactionManager::Rollback  \n Requests that the transaction be rolled back.  \n  \n```\ninline BOOL CAtlTransactionManager::Rollback();\n```  \n  \n### Return Value  \n `TRUE` if successful; otherwise `FALSE`.  \n  \n### Remarks  \n This wrapper calls the `RollbackTransaction` function.  \n  \n##  <a name=\"catltransactionmanager__setfileattributes\"></a>  CAtlTransactionManager::SetFileAttributes  \n Sets the attributes for a file or directory as a transacted operation.  \n  \n```\ninline BOOL CAtlTransactionManager::SetFileAttributes(LPCTSTR lpFileName,  DWORD dwAttributes);\n```  \n  \n### Parameters  \n `lpFileName`  \n The name of the file or directory.  \n  \n `dwAttributes`  \n The file attributes to set for the file. For more information, see [SetFileAttributesTransacted](http://go.microsoft.com/fwlink/linkid=158699).  \n  \n### Remarks  \n This wrapper calls the `SetFileAttributesTransacted` function.  \n  \n## See Also  \n [ATL COM Desktop Components](../../atl/atl-com-desktop-components.md)\n\n\n\n\n\n\n\n\n\n"}