{"nodes":[{"pos":[12,74],"content":"How to: Use combinable to Improve Performance | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Use combinable to Improve Performance | Microsoft Docs","pos":[0,62]}]},{"content":"How to: Use combinable to Improve Performance","pos":[710,755]},{"content":"This example shows how to use the <bpt id=\"p1\">[</bpt>concurrency::combinable<ept id=\"p1\">](../../parallel/concrt/reference/combinable-class.md)</ept> class to compute the sum of the numbers in a <bpt id=\"p2\">[</bpt>std::array<ept id=\"p2\">](../../standard-library/array-class-stl.md)</ept> object that are prime.","pos":[756,992],"source":"This example shows how to use the [concurrency::combinable](../../parallel/concrt/reference/combinable-class.md) class to compute the sum of the numbers in a [std::array](../../standard-library/array-class-stl.md) object that are prime."},{"content":"The <ph id=\"ph1\">`combinable`</ph> class improves performance by eliminating shared state.","pos":[993,1065],"source":" The `combinable` class improves performance by eliminating shared state."},{"pos":[1073,1543],"content":"[!TIP]\n In some cases, parallel map ([concurrency::parallel_transform](reference/concurrency-namespace-functions.md#parallel_transform)) and reduce ([concurrency:: parallel_reduce](reference/concurrency-namespace-functions.md#parallel_reduce)) can provide performance improvements over `combinable`. For an example that uses map and reduce operations to produce the same results as this example, see [Parallel Algorithms](../../parallel/concrt/parallel-algorithms.md).","leadings":["","> "],"nodes":[{"content":" In some cases, parallel map ([concurrency::parallel_transform](reference/concurrency-namespace-functions.md#parallel_transform)) and reduce ([concurrency:: parallel_reduce](reference/concurrency-namespace-functions.md#parallel_reduce)) can provide performance improvements over `combinable`. For an example that uses map and reduce operations to produce the same results as this example, see [Parallel Algorithms](../../parallel/concrt/parallel-algorithms.md).","pos":[7,468],"nodes":[{"content":"In some cases, parallel map (<bpt id=\"p1\">[</bpt>concurrency::parallel_transform<ept id=\"p1\">](reference/concurrency-namespace-functions.md#parallel_transform)</ept>) and reduce (<bpt id=\"p2\">[</bpt>concurrency:: parallel_reduce<ept id=\"p2\">](reference/concurrency-namespace-functions.md#parallel_reduce)</ept>) can provide performance improvements over <ph id=\"ph1\">`combinable`</ph>.","pos":[1,292],"source":" In some cases, parallel map ([concurrency::parallel_transform](reference/concurrency-namespace-functions.md#parallel_transform)) and reduce ([concurrency:: parallel_reduce](reference/concurrency-namespace-functions.md#parallel_reduce)) can provide performance improvements over `combinable`."},{"content":"For an example that uses map and reduce operations to produce the same results as this example, see <bpt id=\"p1\">[</bpt>Parallel Algorithms<ept id=\"p1\">](../../parallel/concrt/parallel-algorithms.md)</ept>.","pos":[293,461],"source":" For an example that uses map and reduce operations to produce the same results as this example, see [Parallel Algorithms](../../parallel/concrt/parallel-algorithms.md)."}]}]},{"content":"Example","pos":[1552,1559]},{"content":"The following example uses the <bpt id=\"p1\">[</bpt>std::accumulate<ept id=\"p1\">](../../standard-library/numeric-functions.md#accumulate)</ept> function to compute the sum of the elements in an array that are prime.","pos":[1563,1739],"source":"The following example uses the [std::accumulate](../../standard-library/numeric-functions.md#accumulate) function to compute the sum of the elements in an array that are prime."},{"content":"In this example, <ph id=\"ph1\">`a`</ph> is an <ph id=\"ph2\">`array`</ph> object and the <ph id=\"ph3\">`is_prime`</ph> function determines whether its input value is prime.","pos":[1740,1854],"source":" In this example, `a` is an `array` object and the `is_prime` function determines whether its input value is prime."},{"pos":[1872,1903],"content":"concrt-parallel-sum-of-primes#1"},{"content":"Example","pos":[2004,2011]},{"content":"The following example shows a na√Øve way to parallelize the previous example.","pos":[2016,2092]},{"content":"This example uses the <bpt id=\"p1\">[</bpt>concurrency::parallel_for_each<ept id=\"p1\">](reference/concurrency-namespace-functions.md#parallel_for_each)</ept> algorithm to process the array in parallel and a <bpt id=\"p2\">[</bpt>concurrency::critical_section<ept id=\"p2\">](../../parallel/concrt/reference/critical-section-class.md)</ept> object to synchronize access to the <ph id=\"ph1\">`prime_sum`</ph> variable.","pos":[2093,2409],"source":" This example uses the [concurrency::parallel_for_each](reference/concurrency-namespace-functions.md#parallel_for_each) algorithm to process the array in parallel and a [concurrency::critical_section](../../parallel/concrt/reference/critical-section-class.md) object to synchronize access to the `prime_sum` variable."},{"content":"This example does not scale because each thread must wait for the shared resource to become available.","pos":[2410,2512]},{"pos":[2530,2561],"content":"concrt-parallel-sum-of-primes#2"},{"content":"Example","pos":[2662,2669]},{"content":"The following example uses a <ph id=\"ph1\">`combinable`</ph> object to improve the performance of the previous example.","pos":[2673,2773],"source":"The following example uses a `combinable` object to improve the performance of the previous example."},{"content":"This example eliminates the need for synchronization objects; it scales because the <ph id=\"ph1\">`combinable`</ph> object enables each thread to perform its task independently.","pos":[2774,2932],"source":" This example eliminates the need for synchronization objects; it scales because the `combinable` object enables each thread to perform its task independently."},{"content":"A <ph id=\"ph1\">`combinable`</ph> object is typically used in two steps.","pos":[2939,2992],"source":"A `combinable` object is typically used in two steps."},{"content":"First, produce a series of fine-grained computations by performing work in parallel.","pos":[2993,3077]},{"content":"Next, combine (or reduce) the computations into a final result.","pos":[3078,3141]},{"content":"This example uses the <bpt id=\"p1\">[</bpt>concurrency::combinable::local<ept id=\"p1\">](reference/combinable-class.md#local)</ept> method to obtain a reference to the local sum.","pos":[3142,3280],"source":" This example uses the [concurrency::combinable::local](reference/combinable-class.md#local) method to obtain a reference to the local sum."},{"content":"It then uses the <bpt id=\"p1\">[</bpt>concurrency::combinable::combine<ept id=\"p1\">](reference/combinable-class.md#combine)</ept> method and a <bpt id=\"p2\">[</bpt>std::plus<ept id=\"p2\">](../../standard-library/plus-struct.md)</ept> object to combine the local computations into the final result.","pos":[3281,3499],"source":" It then uses the [concurrency::combinable::combine](reference/combinable-class.md#combine) method and a [std::plus](../../standard-library/plus-struct.md) object to combine the local computations into the final result."},{"pos":[3518,3549],"content":"concrt-parallel-sum-of-primes#3"},{"content":"Example","pos":[3650,3657]},{"content":"The following complete example computes the sum of prime numbers both serially and in parallel.","pos":[3661,3756]},{"content":"The example prints to the console the time that is required to perform both computations.","pos":[3757,3846]},{"pos":[3864,3895],"content":"concrt-parallel-sum-of-primes#4"},{"content":"The following sample output is for a computer that has four processors.","pos":[3994,4065]},{"content":"Compiling the Code","pos":[4171,4189]},{"pos":[4193,4409],"content":"To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named <ph id=\"ph1\">`parallel-sum-of-primes.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.","source":"To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named `parallel-sum-of-primes.cpp` and then run the following command in a Visual Studio Command Prompt window."},{"content":"cl.exe /EHsc parallel-sum-of-primes.cpp","pos":[4418,4457]},{"content":"Robust Programming","pos":[4468,4486]},{"pos":[4490,4642],"content":"For an example that uses map and reduce operations to produce the same results, see <bpt id=\"p1\">[</bpt>Parallel Algorithms<ept id=\"p1\">](../../parallel/concrt/parallel-algorithms.md)</ept>.","source":"For an example that uses map and reduce operations to produce the same results, see [Parallel Algorithms](../../parallel/concrt/parallel-algorithms.md)."},{"content":"See Also","pos":[4651,4659]},{"content":"Parallel Containers and Objects","pos":[4664,4695]},{"content":"combinable Class","pos":[4760,4776]},{"content":"critical_section Class","pos":[4836,4858]}],"content":"---\ntitle: \"How to: Use combinable to Improve Performance | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"combinable class, example\"\n  - \"improving parallel performance with combinable [Concurrency Runtime]\"\nms.assetid: fa730580-1c94-4b2d-8aec-57c91dc0497e\ncaps.latest.revision: 17\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Use combinable to Improve Performance\nThis example shows how to use the [concurrency::combinable](../../parallel/concrt/reference/combinable-class.md) class to compute the sum of the numbers in a [std::array](../../standard-library/array-class-stl.md) object that are prime. The `combinable` class improves performance by eliminating shared state.  \n  \n> [!TIP]\n>  In some cases, parallel map ([concurrency::parallel_transform](reference/concurrency-namespace-functions.md#parallel_transform)) and reduce ([concurrency:: parallel_reduce](reference/concurrency-namespace-functions.md#parallel_reduce)) can provide performance improvements over `combinable`. For an example that uses map and reduce operations to produce the same results as this example, see [Parallel Algorithms](../../parallel/concrt/parallel-algorithms.md).  \n  \n## Example  \n The following example uses the [std::accumulate](../../standard-library/numeric-functions.md#accumulate) function to compute the sum of the elements in an array that are prime. In this example, `a` is an `array` object and the `is_prime` function determines whether its input value is prime.  \n  \n [!code-cpp[concrt-parallel-sum-of-primes#1](../../parallel/concrt/codesnippet/cpp/how-to-use-combinable-to-improve-performance_1.cpp)]  \n  \n## Example  \n\n The following example shows a na√Øve way to parallelize the previous example. This example uses the [concurrency::parallel_for_each](reference/concurrency-namespace-functions.md#parallel_for_each) algorithm to process the array in parallel and a [concurrency::critical_section](../../parallel/concrt/reference/critical-section-class.md) object to synchronize access to the `prime_sum` variable. This example does not scale because each thread must wait for the shared resource to become available.  \n  \n [!code-cpp[concrt-parallel-sum-of-primes#2](../../parallel/concrt/codesnippet/cpp/how-to-use-combinable-to-improve-performance_2.cpp)]  \n  \n## Example  \n The following example uses a `combinable` object to improve the performance of the previous example. This example eliminates the need for synchronization objects; it scales because the `combinable` object enables each thread to perform its task independently.  \n  \n A `combinable` object is typically used in two steps. First, produce a series of fine-grained computations by performing work in parallel. Next, combine (or reduce) the computations into a final result. This example uses the [concurrency::combinable::local](reference/combinable-class.md#local) method to obtain a reference to the local sum. It then uses the [concurrency::combinable::combine](reference/combinable-class.md#combine) method and a [std::plus](../../standard-library/plus-struct.md) object to combine the local computations into the final result.  \n\n  \n [!code-cpp[concrt-parallel-sum-of-primes#3](../../parallel/concrt/codesnippet/cpp/how-to-use-combinable-to-improve-performance_3.cpp)]  \n  \n## Example  \n The following complete example computes the sum of prime numbers both serially and in parallel. The example prints to the console the time that is required to perform both computations.  \n  \n [!code-cpp[concrt-parallel-sum-of-primes#4](../../parallel/concrt/codesnippet/cpp/how-to-use-combinable-to-improve-performance_4.cpp)]  \n  \n The following sample output is for a computer that has four processors.  \n  \n```Output  \n1709600813  \nserial time: 6178 ms  \n \n1709600813  \nparallel time: 1638 ms  \n```  \n  \n## Compiling the Code  \n To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named `parallel-sum-of-primes.cpp` and then run the following command in a Visual Studio Command Prompt window.  \n  \n **cl.exe /EHsc parallel-sum-of-primes.cpp**  \n  \n## Robust Programming  \n For an example that uses map and reduce operations to produce the same results, see [Parallel Algorithms](../../parallel/concrt/parallel-algorithms.md).  \n  \n## See Also  \n [Parallel Containers and Objects](../../parallel/concrt/parallel-containers-and-objects.md)   \n [combinable Class](../../parallel/concrt/reference/combinable-class.md)   \n [critical_section Class](../../parallel/concrt/reference/critical-section-class.md)\n"}