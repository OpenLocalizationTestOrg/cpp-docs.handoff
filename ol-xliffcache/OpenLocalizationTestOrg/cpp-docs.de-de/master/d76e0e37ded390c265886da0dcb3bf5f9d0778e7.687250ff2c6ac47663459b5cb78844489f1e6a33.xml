{"nodes":[{"pos":[12,44],"content":"_CrtCheckMemory | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_CrtCheckMemory | Microsoft Docs","pos":[0,32]}]},{"content":"_CrtCheckMemory","pos":[976,991]},{"content":"Confirms the integrity of the memory blocks allocated in the debug heap (debug version only).","pos":[992,1085]},{"content":"Syntax","pos":[1094,1100]},{"content":"Return Value","pos":[1158,1170]},{"pos":[1174,1259],"content":"If successful, <ph id=\"ph1\">`_CrtCheckMemory`</ph> returns TRUE; otherwise, the function returns FALSE.","source":"If successful, `_CrtCheckMemory` returns TRUE; otherwise, the function returns FALSE."},{"content":"Remarks","pos":[1268,1275]},{"content":"The <ph id=\"ph1\">`_CrtCheckMemory`</ph> function validates memory allocated by the debug heap manager by verifying the underlying base heap and inspecting every memory block.","pos":[1279,1435],"source":"The `_CrtCheckMemory` function validates memory allocated by the debug heap manager by verifying the underlying base heap and inspecting every memory block."},{"content":"If an error or memory inconsistency is encountered in the underlying base heap, the debug header information, or the overwrite buffers, <ph id=\"ph1\">`_CrtCheckMemory`</ph> generates a debug report with information describing the error condition.","pos":[1436,1663],"source":" If an error or memory inconsistency is encountered in the underlying base heap, the debug header information, or the overwrite buffers, `_CrtCheckMemory` generates a debug report with information describing the error condition."},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id=\"ph1\">`_CrtCheckMemory`</ph> are removed during preprocessing.","pos":[1664,1788],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtCheckMemory` are removed during preprocessing."},{"content":"The behavior of <ph id=\"ph1\">`_CrtCheckMemory`</ph> can be controlled by setting the bit fields of the <bpt id=\"p1\">[</bpt>_crtDbgFlag<ept id=\"p1\">](../../c-runtime-library/crtdbgflag.md)</ept> flag using the <bpt id=\"p2\">[</bpt>_CrtSetDbgFlag<ept id=\"p2\">](../../c-runtime-library/reference/crtsetdbgflag.md)</ept> function.","pos":[1795,2026],"source":"The behavior of `_CrtCheckMemory` can be controlled by setting the bit fields of the [_crtDbgFlag](../../c-runtime-library/crtdbgflag.md) flag using the [_CrtSetDbgFlag](../../c-runtime-library/reference/crtsetdbgflag.md) function."},{"content":"Turning the <bpt id=\"p1\">**</bpt>_CRTDBG_CHECK_ALWAYS_DF<ept id=\"p1\">**</ept> bit field ON results in <ph id=\"ph1\">`_CrtCheckMemory`</ph> being called every time a memory allocation operation is requested.","pos":[2027,2176],"source":" Turning the **_CRTDBG_CHECK_ALWAYS_DF** bit field ON results in `_CrtCheckMemory` being called every time a memory allocation operation is requested."},{"content":"Although this method slows down execution, it is useful for catching errors quickly.","pos":[2177,2261]},{"content":"Turning the <bpt id=\"p1\">**</bpt>_CRTDBG_ALLOC_MEM_DF<ept id=\"p1\">**</ept> bit field OFF causes <ph id=\"ph1\">`_CrtCheckMemory`</ph> to not verify the heap and immediately return <bpt id=\"p2\">**</bpt>TRUE<ept id=\"p2\">**</ept>.","pos":[2262,2393],"source":" Turning the **_CRTDBG_ALLOC_MEM_DF** bit field OFF causes `_CrtCheckMemory` to not verify the heap and immediately return **TRUE**."},{"content":"Because this function returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>, it can be passed to one of the <bpt id=\"p3\">[</bpt>_ASSERT<ept id=\"p3\">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> macros to create a simple debugging error handling mechanism.","pos":[2400,2627],"source":"Because this function returns **TRUE** or **FALSE**, it can be passed to one of the [_ASSERT](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) macros to create a simple debugging error handling mechanism."},{"content":"The following example causes an assertion failure if corruption is detected in the heap:","pos":[2628,2716]},{"content":"For more information about how <ph id=\"ph1\">`_CrtCheckMemory`</ph> can be used with other debug functions, see <bpt id=\"p1\">[</bpt>Heap State Reporting Functions<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2772,2945],"source":"For more information about how `_CrtCheckMemory` can be used with other debug functions, see [Heap State Reporting Functions](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"For an overview of memory management and the debug heap, see <bpt id=\"p1\">[</bpt>CRT Debug Heap Details<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2946,3079],"source":" For an overview of memory management and the debug heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"Requirements","pos":[3088,3100]},{"content":"Routine","pos":[3107,3114]},{"content":"Required header","pos":[3115,3130]},{"content":"crtdbg.h&gt;","pos":[3195,3204],"source":"crtdbg.h>"},{"pos":[3212,3330],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[3339,3348]},{"pos":[3352,3447],"content":"Debug versions of <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"content":"Example","pos":[3456,3463]},{"pos":[3467,3598],"content":"For a sample of how to use <ph id=\"ph1\">`_CrtCheckMemory`</ph>, see <bpt id=\"p1\">[</bpt>crt_dbg1<ept id=\"p1\">](http://msdn.microsoft.com/en-us/17b4b20c-e849-48f5-8eb5-dca6509cbaf9)</ept>.","source":"For a sample of how to use `_CrtCheckMemory`, see [crt_dbg1](http://msdn.microsoft.com/en-us/17b4b20c-e849-48f5-8eb5-dca6509cbaf9)."},{"content":".NET Framework Equivalent","pos":[3607,3632]},{"content":"System::Diagnostics::PerformanceCounter","pos":[3637,3676]},{"content":"See Also","pos":[3771,3779]},{"content":"Debug Routines","pos":[3784,3798]},{"content":"_crtDbgFlag","pos":[3848,3859]},{"content":"_CrtSetDbgFlag","pos":[3905,3919]}],"content":"---\ntitle: \"_CrtCheckMemory | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_CrtCheckMemory\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"CrtCheckMemory\"\n  - \"_CrtCheckMemory\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_CrtCheckMemory function\"\n  - \"CrtCheckMemory function\"\nms.assetid: 457cc72e-60fd-4177-ab5c-6ae26a420765\ncaps.latest.revision: 12\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _CrtCheckMemory\nConfirms the integrity of the memory blocks allocated in the debug heap (debug version only).  \n  \n## Syntax  \n  \n```  \n  \nint _CrtCheckMemory( void );  \n```  \n  \n## Return Value  \n If successful, `_CrtCheckMemory` returns TRUE; otherwise, the function returns FALSE.  \n  \n## Remarks  \n The `_CrtCheckMemory` function validates memory allocated by the debug heap manager by verifying the underlying base heap and inspecting every memory block. If an error or memory inconsistency is encountered in the underlying base heap, the debug header information, or the overwrite buffers, `_CrtCheckMemory` generates a debug report with information describing the error condition. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtCheckMemory` are removed during preprocessing.  \n  \n The behavior of `_CrtCheckMemory` can be controlled by setting the bit fields of the [_crtDbgFlag](../../c-runtime-library/crtdbgflag.md) flag using the [_CrtSetDbgFlag](../../c-runtime-library/reference/crtsetdbgflag.md) function. Turning the **_CRTDBG_CHECK_ALWAYS_DF** bit field ON results in `_CrtCheckMemory` being called every time a memory allocation operation is requested. Although this method slows down execution, it is useful for catching errors quickly. Turning the **_CRTDBG_ALLOC_MEM_DF** bit field OFF causes `_CrtCheckMemory` to not verify the heap and immediately return **TRUE**.  \n  \n Because this function returns **TRUE** or **FALSE**, it can be passed to one of the [_ASSERT](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md) macros to create a simple debugging error handling mechanism. The following example causes an assertion failure if corruption is detected in the heap:  \n  \n```  \n_ASSERTE( _CrtCheckMemory( ) );  \n```  \n  \n For more information about how `_CrtCheckMemory` can be used with other debug functions, see [Heap State Reporting Functions](/visualstudio/debugger/crt-debug-heap-details). For an overview of memory management and the debug heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_CrtCheckMemory`|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n## Example  \n For a sample of how to use `_CrtCheckMemory`, see [crt_dbg1](http://msdn.microsoft.com/en-us/17b4b20c-e849-48f5-8eb5-dca6509cbaf9).  \n  \n## .NET Framework Equivalent  \n [System::Diagnostics::PerformanceCounter](https://msdn.microsoft.com/en-us/library/system.diagnostics.performancecounter.aspx)  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)   \n [_crtDbgFlag](../../c-runtime-library/crtdbgflag.md)   \n [_CrtSetDbgFlag](../../c-runtime-library/reference/crtsetdbgflag.md)"}