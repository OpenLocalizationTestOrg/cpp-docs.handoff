<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99164b383c0ce792b62280d570e96d49d0f02d71</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\mfc-activex-controls-painting-an-activex-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0aca09fa796c17547d8d52474c4ff20061a8a93</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7485f2b9fa05bf5d13ea0ae2a1d9c46194e00c65</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Painting an ActiveX Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Painting an ActiveX Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article describes the ActiveX control painting process and how you can alter paint code to optimize the process.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Optimizing Control Drawing<ept id="p1">](../mfc/optimizing-control-drawing.md)</ept> for techniques on how to optimize drawing by not having controls individually restore previously selected GDI objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>After all of the controls have been drawn, the container can automatically restore the original objects.)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Examples in this article are from a control created by the MFC ActiveX Control Wizard with default settings.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information on creating a skeleton control application using the MFC ActiveX Control Wizard, see the article <bpt id="p1">[</bpt>MFC ActiveX Control Wizard<ept id="p1">](../mfc/reference/mfc-activex-control-wizard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following topics are covered:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The overall process for painting a control and the code created by the ActiveX Control Wizard to support painting</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>How to optimize the painting process</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>How to paint your control using metafiles</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Painting Process of an ActiveX Control</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When ActiveX controls are initially displayed or are redrawn, they follow a painting process similar to other applications developed using MFC, with one important distinction: ActiveX controls can be in an active or an inactive state.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An active control is represented in an ActiveX control container by a child window.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Like other windows, it is responsible for painting itself when a <ph id="ph1">`WM_PAINT`</ph> message is received.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The control's base class, <bpt id="p1">[</bpt>COleControl<ept id="p1">](../mfc/reference/colecontrol-class.md)</ept>, handles this message in its <ph id="ph1">`OnPaint`</ph> function.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This default implementation calls the <ph id="ph1">`OnDraw`</ph> function of your control.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An inactive control is painted differently.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the control is inactive, its window is either invisible or nonexistent, so it can not receive a paint message.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Instead, the control container directly calls the <ph id="ph1">`OnDraw`</ph> function of the control.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This differs from an active control's painting process in that the <ph id="ph1">`OnPaint`</ph> member function is never called.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>As discussed in the preceding paragraphs, how an ActiveX control is updated depends on the state of the control.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, because the framework calls the <ph id="ph1">`OnDraw`</ph> member function in both cases, you add the majority of your painting code in this member function.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OnDraw`</ph> member function handles control painting.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When a control is inactive, the control container calls <ph id="ph1">`OnDraw`</ph>, passing the device context of the control container and the coordinates of the rectangular area occupied by the control.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The rectangle passed by the framework to the <ph id="ph1">`OnDraw`</ph> member function contains the area occupied by the control.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the control is active, the upper-left corner is (0, 0) and the device context passed is for the child window that contains the control.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the control is inactive, the upper-left coordinate is not necessarily (0, 0) and the device context passed is for the control container containing the control.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It is important that your modifications to <ph id="ph1">`OnDraw`</ph> do not depend on the rectangle's upper left point being equal to (0, 0) and that you draw only inside the rectangle passed to <ph id="ph2">`OnDraw`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Unexpected results can occur if you draw beyond the rectangle's area.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The default implementation provided by the MFC ActiveX Control Wizard in the control implementation file (.CPP), shown below, paints the rectangle with a white brush and fills the ellipse with the current background color.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#1</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When painting a control, you should not make assumptions about the state of the device context that is passed as the <bpt id="p1">*</bpt>pdc<ept id="p1">*</ept> parameter to the <ph id="ph1">`OnDraw`</ph> function.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Occasionally the device context is supplied by the container application and will not necessarily be initialized to the default state.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In particular, explicitly select the pens, brushes, colors, fonts, and other resources that your drawing code depends upon.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Optimizing Your Paint Code</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>After the control is successfully painting itself, the next step is to optimize the <ph id="ph1">`OnDraw`</ph> function.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default implementation of ActiveX control painting paints the entire control area.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This is sufficient for simple controls, but in many cases repainting the control would be faster if only the portion that needed updating was repainted, instead of the entire control.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OnDraw`</ph> function provides an easy method of optimization by passing <ph id="ph2">`rcInvalid`</ph>, the rectangular area of the control that needs redrawing.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use this area, usually smaller than the entire control area, to speed up the painting process.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Painting Your Control Using Metafiles</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In most cases the <ph id="ph1">`pdc`</ph> parameter to the <ph id="ph2">`OnDraw`</ph> function points to a screen device context (DC).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, when printing images of the control or during a print preview session, the DC received for rendering is a special type called a "metafile DC".</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Unlike a screen DC, which immediately handles requests sent to it, a metafile DC stores requests to be played back at a later time.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Some container applications may also choose to render the control image using a metafile DC when in design mode.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Metafile drawing requests can be made by the container through two interface functions: <bpt id="p1">**</bpt>IViewObject::Draw<ept id="p1">**</ept> (this function can also be called for non-metafile drawing) and <bpt id="p2">**</bpt>IDataObject::GetData<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When a metafile DC is passed as one of the parameters, the MFC framework makes a call to <bpt id="p1">[</bpt>COleControl::OnDrawMetafile<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__ondrawmetafile)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because this is a virtual member function, override this function in the control class to do any special processing.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The default behavior calls <ph id="ph1">`COleControl::OnDraw`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To make sure the control can be drawn in both screen and metafile device contexts, you must use only member functions that are supported in both a screen and a metafile DC.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Be aware that the coordinate system may not be measured in pixels.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because the default implementation of <ph id="ph1">`OnDrawMetafile`</ph> calls the control's <ph id="ph2">`OnDraw`</ph> function, use only member functions that are suitable for both a metafile and a screen device context, unless you override <ph id="ph3">`OnDrawMetafile`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following lists the subset of <ph id="ph1">`CDC`</ph> member functions that can be used in both a metafile and a screen device context.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information on these functions, see class <bpt id="p1">[</bpt>CDC<ept id="p1">](../mfc/reference/cdc-class.md)</ept> in the <bpt id="p2">*</bpt>MFC Reference<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Arc</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>BibBlt</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Chord</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Ellipse</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Escape</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Polygon</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In addition to <ph id="ph1">`CDC`</ph> member functions, there are several other functions that are compatible in a metafile DC.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>These include <bpt id="p1">[</bpt>CPalette::AnimatePalette<ept id="p1">](../mfc/reference/cpalette-class.md#cpalette__animatepalette)</ept>, <bpt id="p2">[</bpt>CFont::CreateFontIndirect<ept id="p2">](../mfc/reference/cfont-class.md#cfont__createfontindirect)</ept>, and three member functions of <ph id="ph1">`CBrush`</ph>: <bpt id="p3">[</bpt>CreateBrushIndirect<ept id="p3">](../mfc/reference/cbrush-class.md#cbrush__createbrushindirect)</ept>, <bpt id="p4">[</bpt>CreateDIBPatternBrush<ept id="p4">](../mfc/reference/cbrush-class.md#cbrush__createdibpatternbrush)</ept>, and <bpt id="p5">[</bpt>CreatePatternBrush<ept id="p5">](../mfc/reference/cbrush-class.md#cbrush__createpatternbrush)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Functions that are not recorded in a metafile are: <bpt id="p1">[</bpt>DrawFocusRect<ept id="p1">](../mfc/reference/cdc-class.md#cdc__drawfocusrect)</ept>, <bpt id="p2">[</bpt>DrawIcon<ept id="p2">](../mfc/reference/cdc-class.md#cdc__drawicon)</ept>, <bpt id="p3">[</bpt>DrawText<ept id="p3">](../mfc/reference/cdc-class.md#cdc__drawtext)</ept>, <bpt id="p4">[</bpt>ExcludeUpdateRgn<ept id="p4">](../mfc/reference/cdc-class.md#cdc__excludeupdatergn)</ept>, <bpt id="p5">[</bpt>FillRect<ept id="p5">](../mfc/reference/cdc-class.md#cdc__fillrect)</ept>, <bpt id="p6">[</bpt>FrameRect<ept id="p6">](../mfc/reference/cdc-class.md#cdc__framerect)</ept>, <bpt id="p7">[</bpt>GrayString<ept id="p7">](../mfc/reference/cdc-class.md#cdc__graystring)</ept>, <bpt id="p8">[</bpt>InvertRect<ept id="p8">](../mfc/reference/cdc-class.md#cdc__invertrect)</ept>, <bpt id="p9">[</bpt>ScrollDC<ept id="p9">](../mfc/reference/cdc-class.md#cdc__scrolldc)</ept>, and <bpt id="p10">[</bpt>TabbedTextOut<ept id="p10">](../mfc/reference/cdc-class.md#cdc__tabbedtextout)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Because a metafile DC is not actually associated with a device, you cannot use SetDIBits, GetDIBits, and CreateDIBitmap with a metafile DC.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can use SetDIBitsToDevice and StretchDIBits with a metafile DC as the destination.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CreateCompatibleDC<ept id="p1">](../mfc/reference/cdc-class.md#cdc__createcompatibledc)</ept>, <bpt id="p2">[</bpt>CreateCompatibleBitmap<ept id="p2">](../mfc/reference/cbitmap-class.md#cbitmap__createcompatiblebitmap)</ept>, and <bpt id="p3">[</bpt>CreateDiscardableBitmap<ept id="p3">](../mfc/reference/cbitmap-class.md#cbitmap__creatediscardablebitmap)</ept> are not meaningful with a metafile DC.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Another point to consider when using a metafile DC is that the coordinate system may not be measured in pixels.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For this reason, all your drawing code should be adjusted to fit in the rectangle passed to <ph id="ph1">`OnDraw`</ph> in the <ph id="ph2">`rcBounds`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This prevents accidental painting outside the control because <ph id="ph1">`rcBounds`</ph> represents the size of the control's window.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>After you have implemented metafile rendering for the control, use Test Container to test the metafile.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Testing Properties and Events with Test Container<ept id="p1">](../mfc/testing-properties-and-events-with-test-container.md)</ept> for information on how to access the test container.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To test the control's metafile using Test Container</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>On the Test Container's <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Insert New Control<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Insert New Control<ept id="p1">**</ept> box, select the control and click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The control will appear in Test container.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Control<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Draw Metafile<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A separate window appears in which the metafile is displayed.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can change the size of this window to see how scaling affects the control's metafile.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You can close this window at any time.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>