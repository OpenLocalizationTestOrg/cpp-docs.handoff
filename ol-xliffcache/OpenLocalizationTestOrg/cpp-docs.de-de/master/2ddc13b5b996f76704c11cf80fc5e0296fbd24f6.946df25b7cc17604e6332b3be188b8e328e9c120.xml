{"nodes":[{"pos":[12,75],"content":"_bittestandcomplement, _bittestandcomplement64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_bittestandcomplement, _bittestandcomplement64 | Microsoft Docs","pos":[0,63]}]},{"content":"_bittestandcomplement, _bittestandcomplement64","pos":[816,862]},{"content":"Microsoft Specific","pos":[865,883]},{"pos":[892,1021],"content":"Generate an instruction which examines bit <ph id=\"ph1\">`b`</ph> of the address <ph id=\"ph2\">`a`</ph>, returns its current value, and sets the bit to its complement.","source":"Generate an instruction which examines bit `b` of the address `a`, returns its current value, and sets the bit to its complement."},{"content":"Syntax","pos":[1030,1036]},{"content":"Parameters","pos":[1210,1220]},{"content":"[in, out]","pos":[1224,1233]},{"content":"A pointer to the memory to examine.","pos":[1241,1276]},{"content":"[in]","pos":[1283,1287]},{"content":"The bit position to test.","pos":[1295,1320]},{"content":"Return Value","pos":[1329,1341]},{"content":"The bit at the position specified.","pos":[1345,1379]},{"content":"Requirements","pos":[1388,1400]},{"content":"Intrinsic","pos":[1407,1416]},{"content":"Architecture","pos":[1417,1429]},{"pos":[1497,1506],"content":"x86, ARM,"},{"pos":[1672,1699],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>intrin.h&gt;","source":"**Header file** \\<intrin.h>"},{"content":"Remarks","pos":[1708,1715]},{"content":"This routine is only available as an intrinsic.","pos":[1719,1766]},{"content":"Example","pos":[1775,1782]},{"content":"Sample Output","pos":[2471,2484]},{"content":"END Microsoft Specific","pos":[2624,2646]},{"content":"See Also","pos":[2655,2663]},{"content":"Compiler Intrinsics","pos":[2668,2687]}],"content":"---\ntitle: \"_bittestandcomplement, _bittestandcomplement64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"_bittestandcomplement64\"\n  - \"_bittestandcomplement64_cpp\"\n  - \"_bittestandcomplement_cpp\"\n  - \"_bittestandcomplement\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"btc instruction\"\n  - \"_bittestandcomplement intrinsic\"\n  - \"_bittestandcomplement64 intrinsic\"\nms.assetid: 53fa12dd-835e-4e5d-baec-a431c8678806\ncaps.latest.revision: 15\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _bittestandcomplement, _bittestandcomplement64\n**Microsoft Specific**  \n  \n Generate an instruction which examines bit `b` of the address `a`, returns its current value, and sets the bit to its complement.  \n  \n## Syntax  \n  \n```  \nunsigned char _bittestandcomplement(  \n   long *a,  \n   long b  \n);  \nunsigned char _bittestandcomplement64(  \n   __int64 *a,  \n   __int64 b  \n);  \n```  \n  \n#### Parameters  \n [in, out] `a`  \n A pointer to the memory to examine.  \n  \n [in] `b`  \n The bit position to test.  \n  \n## Return Value  \n The bit at the position specified.  \n  \n## Requirements  \n  \n|Intrinsic|Architecture|  \n|---------------|------------------|  \n|`_bittestandcomplement`|x86, ARM, [!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n|`_bittestandcomplement64`|[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]|  \n  \n **Header file** \\<intrin.h>  \n  \n## Remarks  \n This routine is only available as an intrinsic.  \n  \n## Example  \n  \n```  \n// bittestandcomplement.cpp  \n// processor: x86, IPF, x64  \n#include <stdio.h>  \n#include <intrin.h>  \n  \n#pragma intrinsic(_bittestandcomplement)  \n#ifdef _M_AMD64  \n#pragma intrinsic(_bittestandcomplement64)  \n#endif  \n  \nint main()  \n{  \n   long i = 1;  \n   __int64 i64 = 0x1I64;  \n   unsigned char result;  \n   printf(\"Initial value: %d\\n\", i);  \n   printf(\"Testing bit 1\\n\");  \n   result = _bittestandcomplement(&i, 1);  \n   printf(\"Value changed to %d, Result: %d\\n\", i, result);  \n#ifdef _M_AMD64  \n   printf(\"Testing bit 0\\n\");  \n   result = _bittestandcomplement64(&i64, 0);  \n   printf(\"Value changed to %I64d, Result: %d\\n\", i64, result);  \n#endif  \n}  \n```  \n  \n## Sample Output  \n  \n```  \nInitial value: 1  \nTesting bit 1  \nValue changed to 3, Result: 0  \nTesting bit 0  \nValue changed to 0, Result: 1  \n```  \n  \n### END Microsoft Specific  \n  \n## See Also  \n [Compiler Intrinsics](../intrinsics/compiler-intrinsics.md)"}