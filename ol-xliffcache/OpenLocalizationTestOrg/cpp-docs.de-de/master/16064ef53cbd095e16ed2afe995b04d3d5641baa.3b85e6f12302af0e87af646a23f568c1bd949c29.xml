{"nodes":[{"pos":[12,46],"content":"-clr Restrictions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-clr Restrictions | Microsoft Docs","pos":[0,34]}]},{"content":"/clr Restrictions","pos":[596,613]},{"pos":[614,669],"content":"Note the following restrictions on the use of <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>:","source":"Note the following restrictions on the use of **/clr**:"},{"content":"In a structured exception handler, there are restrictions on using <ph id=\"ph1\">`_alloca`</ph> when compiling with <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>.","pos":[679,785],"source":"In a structured exception handler, there are restrictions on using `_alloca` when compiling with **/clr**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>_alloca<ept id=\"p1\">](../../c-runtime-library/reference/alloca.md)</ept>.","pos":[786,867],"source":" For more information, see [_alloca](../../c-runtime-library/reference/alloca.md)."},{"content":"The use of run-time error checks is not valid with <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>.","pos":[877,937],"source":"The use of run-time error checks is not valid with **/clr**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Run-Time Error Checks<ept id=\"p1\">](http://msdn.microsoft.com/Library/dc7b2f1e-5ff6-42e0-89b3-dc9dead83ee1)</ept>.","pos":[938,1060],"source":" For more information, see [Run-Time Error Checks](http://msdn.microsoft.com/Library/dc7b2f1e-5ff6-42e0-89b3-dc9dead83ee1)."},{"pos":[1070,1210],"content":"When <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> is used to compile a program that only uses standard C++ syntax, the following guidelines apply to the use of inline assembly:","source":"When **/clr** is used to compile a program that only uses standard C++ syntax, the following guidelines apply to the use of inline assembly:"},{"content":"Inline assembly code that assumes knowledge of the native stack layout, calling conventions outside of the current function, or other low-level information about the computer may fail if that knowledge is applied to the stack frame for a managed function.","pos":[1224,1479]},{"content":"Functions containing inline assembly code are generated as unmanaged functions, as if they were placed in a separate module that was compiled without <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>.","pos":[1480,1639],"source":" Functions containing inline assembly code are generated as unmanaged functions, as if they were placed in a separate module that was compiled without **/clr**."},{"content":"Inline assembly code in functions that pass copy-constructed function parameters is not supported.","pos":[1653,1751]},{"pos":[1761,1886],"content":"The <bpt id=\"p1\">[</bpt>vprintf Functions<ept id=\"p1\">](../../c-runtime-library/vprintf-functions.md)</ept> cannot be called from a program compiled with <bpt id=\"p2\">**</bpt>/clr<ept id=\"p2\">**</ept>.","source":"The [vprintf Functions](../../c-runtime-library/vprintf-functions.md) cannot be called from a program compiled with **/clr**."},{"pos":[1896,1999],"content":"The <bpt id=\"p1\">[</bpt>naked<ept id=\"p1\">](../../cpp/naked-cpp.md)</ept> <bpt id=\"p2\">[</bpt>__declspec<ept id=\"p2\">](../../cpp/declspec.md)</ept> modifier is ignored under /clr.","source":"The [naked](../../cpp/naked-cpp.md) [__declspec](../../cpp/declspec.md) modifier is ignored under /clr."},{"content":"The translator function set by <bpt id=\"p1\">[</bpt>_set_se_translator<ept id=\"p1\">](../../c-runtime-library/reference/set-se-translator.md)</ept> will affect only catches in unmanaged code.","pos":[2009,2160],"source":"The translator function set by [_set_se_translator](../../c-runtime-library/reference/set-se-translator.md) will affect only catches in unmanaged code."},{"content":"See <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](../../windows/exception-handling-cpp-component-extensions.md)</ept> for more information.","pos":[2161,2269],"source":" See [Exception Handling](../../windows/exception-handling-cpp-component-extensions.md) for more information."},{"pos":[2279,2347],"content":"The comparison of function pointers is not permitted under <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>.","source":"The comparison of function pointers is not permitted under **/clr**."},{"pos":[2357,2440],"content":"The use of functions that are not fully prototyped is not permitted under <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>.","source":"The use of functions that are not fully prototyped is not permitted under **/clr**."},{"pos":[2450,2513],"content":"The following compiler options are not supported with <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>:","source":"The following compiler options are not supported with **/clr**:"},{"pos":[2527,2669],"content":"<bpt id=\"p1\">**</bpt>/EHsc<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>/EHs<ept id=\"p2\">**</ept> (<bpt id=\"p3\">**</bpt>/clr<ept id=\"p3\">**</ept> implies <bpt id=\"p4\">**</bpt>/EHa<ept id=\"p4\">**</ept> (see <bpt id=\"p5\">[</bpt>/EH (Exception Handling Model)<ept id=\"p5\">](../../build/reference/eh-exception-handling-model.md)</ept>)","source":"**/EHsc** and **/EHs** (**/clr** implies **/EHa** (see [/EH (Exception Handling Model)](../../build/reference/eh-exception-handling-model.md))"},{"pos":[2683,2823],"content":"<bpt id=\"p1\">**</bpt>/fp:strict<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>/fp:except<ept id=\"p2\">**</ept> (see <bpt id=\"p3\">[</bpt>/fp (Specify Floating-Point Behavior)<ept id=\"p3\">](../../build/reference/fp-specify-floating-point-behavior.md)</ept>)","source":"**/fp:strict** and **/fp:except** (see [/fp (Specify Floating-Point Behavior)](../../build/reference/fp-specify-floating-point-behavior.md))"},{"content":"/Zd","pos":[2838,2841]},{"content":"/Gm","pos":[2917,2920]},{"content":"/MT","pos":[2988,2991]},{"content":"/RTC","pos":[3063,3067]},{"content":"/ZI","pos":[3136,3139]},{"content":"The combination of the <ph id=\"ph1\">`_STATIC_CPPLIB`</ph> preprocessor definition (<ph id=\"ph2\">`/D_STATIC_CPPLIB`</ph>) and the <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>/clr:pure<ept id=\"p2\">**</ept> compiler option is not supported.","pos":[3151,3303],"source":"The combination of the `_STATIC_CPPLIB` preprocessor definition (`/D_STATIC_CPPLIB`) and the **/clr** or **/clr:pure** compiler option is not supported."},{"content":"This is so because the definition would cause your application to link with the static multithreaded Standard C++ Library, which is not supported.","pos":[3304,3450]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>/MD, /MT, /LD (Use Run-Time Library)<ept id=\"p1\">](../../build/reference/md-mt-ld-use-run-time-library.md)</ept> topic.","pos":[3451,3582],"source":" For more information, see the [/MD, /MT, /LD (Use Run-Time Library)](../../build/reference/md-mt-ld-use-run-time-library.md) topic."},{"pos":[3592,3708],"content":"<bpt id=\"p1\">[</bpt>/J<ept id=\"p1\">](../../build/reference/j-default-char-type-is-unsigned.md)</ept> is not supported with <bpt id=\"p2\">**</bpt>/clr:safe<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>/clr:pure<ept id=\"p3\">**</ept>.","source":"[/J](../../build/reference/j-default-char-type-is-unsigned.md) is not supported with **/clr:safe** or **/clr:pure**."},{"content":"The ATL and MFC libraries are not supported by pure mode compilation (<bpt id=\"p1\">**</bpt>/clr:pure<ept id=\"p1\">**</ept>).","pos":[3718,3803],"source":"The ATL and MFC libraries are not supported by pure mode compilation (**/clr:pure**)."},{"content":"You can use <bpt id=\"p1\">**</bpt>/clr:pure<ept id=\"p1\">**</ept> with the Standard C++ Library and the CRT if you also compile with <bpt id=\"p2\">**</bpt>/MD<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>/MDd<ept id=\"p3\">**</ept>.","pos":[3804,3917],"source":" You can use **/clr:pure** with the Standard C++ Library and the CRT if you also compile with **/MD** or **/MDd**."},{"content":"When using <bpt id=\"p1\">**</bpt>/Zi<ept id=\"p1\">**</ept> with <bpt id=\"p2\">**</bpt>/clr<ept id=\"p2\">**</ept>, there are performance implications.","pos":[3927,3996],"source":"When using **/Zi** with **/clr**, there are performance implications."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>/Zi<ept id=\"p1\">](../../build/reference/z7-zi-zi-debug-information-format.md)</ept>.","pos":[3997,4089],"source":" For more information, see [/Zi](../../build/reference/z7-zi-zi-debug-information-format.md)."},{"content":"Passing a wide character to a .NET Framework output routine without also specifying <bpt id=\"p1\">[</bpt>/Zc:wchar_t<ept id=\"p1\">](../../build/reference/zc-wchar-t-wchar-t-is-native-type.md)</ept> or without casting the character to <ph id=\"ph1\">`__wchar_t`</ph> will cause the output to appear as an <ph id=\"ph2\">`unsigned short int`</ph>.","pos":[4099,4364],"source":"Passing a wide character to a .NET Framework output routine without also specifying [/Zc:wchar_t](../../build/reference/zc-wchar-t-wchar-t-is-native-type.md) or without casting the character to `__wchar_t` will cause the output to appear as an `unsigned short int`."},{"content":"For example:","pos":[4365,4377]},{"pos":[4541,4856],"content":"<bpt id=\"p1\">[</bpt>/GS<ept id=\"p1\">](../../build/reference/gs-buffer-security-check.md)</ept> is ignored when compiling with <bpt id=\"p2\">**</bpt>/clr<ept id=\"p2\">**</ept>, unless a function is under <ph id=\"ph1\">`#pragma`</ph> <bpt id=\"p3\">[</bpt>unmanaged<ept id=\"p3\">](../../preprocessor/managed-unmanaged.md)</ept> or if the function must be compiled to native, in which case the compiler will generate warning C4793, which is off by default.","source":"[/GS](../../build/reference/gs-buffer-security-check.md) is ignored when compiling with **/clr**, unless a function is under `#pragma` [unmanaged](../../preprocessor/managed-unmanaged.md) or if the function must be compiled to native, in which case the compiler will generate warning C4793, which is off by default."},{"pos":[4866,4991],"content":"See <bpt id=\"p1\">[</bpt>/ENTRY<ept id=\"p1\">](../../build/reference/entry-entry-point-symbol.md)</ept> for function signature requirements of a managed application.","source":"See [/ENTRY](../../build/reference/entry-entry-point-symbol.md) for function signature requirements of a managed application."},{"content":"Applications compiled with <bpt id=\"p1\">**</bpt>/openmp<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>/clr<ept id=\"p2\">**</ept> can only be run in a single appdomain process.","pos":[5001,5099],"source":"Applications compiled with **/openmp** and **/clr** can only be run in a single appdomain process."},{"content":"See <bpt id=\"p1\">[</bpt>/openmp (Enable OpenMP 2.0 Support)<ept id=\"p1\">](../../build/reference/openmp-enable-openmp-2-0-support.md)</ept> for more information.","pos":[5101,5223],"source":"  See [/openmp (Enable OpenMP 2.0 Support)](../../build/reference/openmp-enable-openmp-2-0-support.md) for more information."},{"content":"Functions that take a variable number of arguments (varargs) will be generated as native functions.","pos":[5233,5332]},{"content":"Any managed data types in the variable argument position will be marshaled to native types.","pos":[5333,5424]},{"content":"Note that &lt;xref:System.String?displayProperty=fullName&gt; types are actually wide-character strings, but they are marshaled to single-byte character strings.","pos":[5425,5580],"source":" Note that <xref:System.String?displayProperty=fullName> types are actually wide-character strings, but they are marshaled to single-byte character strings."},{"content":"So if a printf specifier is %S (wchar_t*), it will marshal to a %s string instead.","pos":[5581,5663]},{"content":"When using the va_arg macro, you may get unexpected results when compiling with <bpt id=\"p1\">**</bpt>/clr:pure<ept id=\"p1\">**</ept>.","pos":[5673,5767],"source":"When using the va_arg macro, you may get unexpected results when compiling with **/clr:pure**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>va_arg, va_copy, va_end, va_start<ept id=\"p1\">](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)</ept>.","pos":[5769,5900],"source":"  For more information, see [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)."},{"content":"If your application passes an argument of type <bpt id=\"p1\">[</bpt>va_list<ept id=\"p1\">](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md)</ept> to a function declared to take a variable number of arguments, and your application is compiled with <bpt id=\"p2\">**</bpt>/clr:pure<ept id=\"p2\">**</ept>, the CLR throws &lt;xref:System.NotSupportedException&gt;.","pos":[5910,6203],"source":"If your application passes an argument of type [va_list](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md) to a function declared to take a variable number of arguments, and your application is compiled with **/clr:pure**, the CLR throws <xref:System.NotSupportedException>."},{"content":"If <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>  is used instead, the affected functions are compiled to native code and execute properly.","pos":[6204,6306],"source":" If **/clr**  is used instead, the affected functions are compiled to native code and execute properly."},{"content":"If <bpt id=\"p1\">**</bpt>/clr:safe<ept id=\"p1\">**</ept> is used, an error diagnostic is emitted.","pos":[6307,6364],"source":" If **/clr:safe** is used, an error diagnostic is emitted."},{"content":"You should not call, from managed code, any functions that walk the stack to get parameter information (function arguments); the P/Invoke layer causes that information to be further down the stack.","pos":[6374,6571]},{"content":"For example, do not compile proxy/stub with <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>.","pos":[6573,6626],"source":"  For example, do not compile proxy/stub with **/clr**."},{"content":"Functions will be compiled to managed code whenever possible, but not all C++ constructs can be translated to managed code.","pos":[6636,6759]},{"content":"This determination is made on a function-by-function basis.","pos":[6761,6820]},{"content":"If any part of a function cannot be converted to managed code, the entire function will be converted to native code instead.","pos":[6821,6945]},{"content":"The following cases prevent the compiler from generating managed code.","pos":[6946,7016]},{"content":"Compiler-generated thunks or helper functions.","pos":[7030,7076]},{"content":"Native thunks are generated for any function call through a function pointer, including virtual function calls.","pos":[7077,7188]},{"pos":[7202,7244],"content":"Functions that call <ph id=\"ph1\">`setjmp`</ph> or <ph id=\"ph2\">`longjmp`</ph>.","source":"Functions that call `setjmp` or `longjmp`."},{"content":"Functions that use certain intrinsic routines to directly manipulate machine resources.","pos":[7258,7345]},{"content":"For example, the use of <ph id=\"ph1\">`__enable`</ph> and <ph id=\"ph2\">`__disable`</ph>, <ph id=\"ph3\">`_ReturnAddress`</ph> and <ph id=\"ph4\">`_AddressOfReturnAddress`</ph>, or multimedia intrinsics will all result in native code.","pos":[7346,7502],"source":" For example, the use of `__enable` and `__disable`, `_ReturnAddress` and `_AddressOfReturnAddress`, or multimedia intrinsics will all result in native code."},{"content":"Functions that follow the <ph id=\"ph1\">`#pragma unmanaged`</ph> directive.","pos":[7516,7572],"source":"Functions that follow the `#pragma unmanaged` directive."},{"content":"(Note that the inverse, <ph id=\"ph1\">`#pragma managed`</ph>, is also supported.)","pos":[7573,7635],"source":" (Note that the inverse, `#pragma managed`, is also supported.)"},{"pos":[7649,7758],"content":"A function that contains references to aligned types, that is, types declared using <ph id=\"ph1\">`__declspec(align(...))`</ph>.","source":"A function that contains references to aligned types, that is, types declared using `__declspec(align(...))`."},{"pos":[7768,7889],"content":"You cannot use the <bpt id=\"p1\">[</bpt>Compiler COM Support<ept id=\"p1\">](../../cpp/compiler-com-support.md)</ept> classes with <bpt id=\"p2\">**</bpt>/clr:pure<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>/clr:safe<ept id=\"p3\">**</ept>.","source":"You cannot use the [Compiler COM Support](../../cpp/compiler-com-support.md) classes with **/clr:pure** or **/clr:safe**."},{"content":"See Also","pos":[7898,7906]},{"content":"/clr (Common Language Runtime Compilation)","pos":[7911,7953]}],"content":"---\ntitle: \"-clr Restrictions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"/clr compiler option [C++], restrictions\"\nms.assetid: 385f6462-2c68-46d6-810e-469553ead447\ncaps.latest.revision: 27\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# /clr Restrictions\nNote the following restrictions on the use of **/clr**:  \n  \n-   In a structured exception handler, there are restrictions on using `_alloca` when compiling with **/clr**. For more information, see [_alloca](../../c-runtime-library/reference/alloca.md).  \n  \n-   The use of run-time error checks is not valid with **/clr**. For more information, see [Run-Time Error Checks](http://msdn.microsoft.com/Library/dc7b2f1e-5ff6-42e0-89b3-dc9dead83ee1).  \n  \n-   When **/clr** is used to compile a program that only uses standard C++ syntax, the following guidelines apply to the use of inline assembly:  \n  \n    -   Inline assembly code that assumes knowledge of the native stack layout, calling conventions outside of the current function, or other low-level information about the computer may fail if that knowledge is applied to the stack frame for a managed function. Functions containing inline assembly code are generated as unmanaged functions, as if they were placed in a separate module that was compiled without **/clr**.  \n  \n    -   Inline assembly code in functions that pass copy-constructed function parameters is not supported.  \n  \n-   The [vprintf Functions](../../c-runtime-library/vprintf-functions.md) cannot be called from a program compiled with **/clr**.  \n  \n-   The [naked](../../cpp/naked-cpp.md) [__declspec](../../cpp/declspec.md) modifier is ignored under /clr.  \n  \n-   The translator function set by [_set_se_translator](../../c-runtime-library/reference/set-se-translator.md) will affect only catches in unmanaged code. See [Exception Handling](../../windows/exception-handling-cpp-component-extensions.md) for more information.  \n  \n-   The comparison of function pointers is not permitted under **/clr**.  \n  \n-   The use of functions that are not fully prototyped is not permitted under **/clr**.  \n  \n-   The following compiler options are not supported with **/clr**:  \n  \n    -   **/EHsc** and **/EHs** (**/clr** implies **/EHa** (see [/EH (Exception Handling Model)](../../build/reference/eh-exception-handling-model.md))  \n  \n    -   **/fp:strict** and **/fp:except** (see [/fp (Specify Floating-Point Behavior)](../../build/reference/fp-specify-floating-point-behavior.md))  \n  \n    -   [/Zd](../../build/reference/z7-zi-zi-debug-information-format.md)  \n  \n    -   [/Gm](../../build/reference/gm-enable-minimal-rebuild.md)  \n  \n    -   [/MT](../../build/reference/md-mt-ld-use-run-time-library.md)  \n  \n    -   [/RTC](../../build/reference/rtc-run-time-error-checks.md)  \n  \n    -   **/ZI**  \n  \n-   The combination of the `_STATIC_CPPLIB` preprocessor definition (`/D_STATIC_CPPLIB`) and the **/clr** or **/clr:pure** compiler option is not supported. This is so because the definition would cause your application to link with the static multithreaded Standard C++ Library, which is not supported. For more information, see the [/MD, /MT, /LD (Use Run-Time Library)](../../build/reference/md-mt-ld-use-run-time-library.md) topic.  \n  \n-   [/J](../../build/reference/j-default-char-type-is-unsigned.md) is not supported with **/clr:safe** or **/clr:pure**.  \n  \n-   The ATL and MFC libraries are not supported by pure mode compilation (**/clr:pure**). You can use **/clr:pure** with the Standard C++ Library and the CRT if you also compile with **/MD** or **/MDd**.  \n  \n-   When using **/Zi** with **/clr**, there are performance implications. For more information, see [/Zi](../../build/reference/z7-zi-zi-debug-information-format.md).  \n  \n-   Passing a wide character to a .NET Framework output routine without also specifying [/Zc:wchar_t](../../build/reference/zc-wchar-t-wchar-t-is-native-type.md) or without casting the character to `__wchar_t` will cause the output to appear as an `unsigned short int`. For example:  \n  \n    ```  \n    Console::WriteLine(L' ')              // Will output 32.  \n    Console::WriteLine((__wchar_t)L' ')   // Will output a space.  \n    ```  \n  \n-   [/GS](../../build/reference/gs-buffer-security-check.md) is ignored when compiling with **/clr**, unless a function is under `#pragma` [unmanaged](../../preprocessor/managed-unmanaged.md) or if the function must be compiled to native, in which case the compiler will generate warning C4793, which is off by default.  \n  \n-   See [/ENTRY](../../build/reference/entry-entry-point-symbol.md) for function signature requirements of a managed application.  \n  \n-   Applications compiled with **/openmp** and **/clr** can only be run in a single appdomain process.  See [/openmp (Enable OpenMP 2.0 Support)](../../build/reference/openmp-enable-openmp-2-0-support.md) for more information.  \n  \n-   Functions that take a variable number of arguments (varargs) will be generated as native functions. Any managed data types in the variable argument position will be marshaled to native types. Note that <xref:System.String?displayProperty=fullName> types are actually wide-character strings, but they are marshaled to single-byte character strings. So if a printf specifier is %S (wchar_t*), it will marshal to a %s string instead.  \n  \n-   When using the va_arg macro, you may get unexpected results when compiling with **/clr:pure**.  For more information, see [va_arg, va_copy, va_end, va_start](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md).  \n  \n-   If your application passes an argument of type [va_list](../../c-runtime-library/reference/va-arg-va-copy-va-end-va-start.md) to a function declared to take a variable number of arguments, and your application is compiled with **/clr:pure**, the CLR throws <xref:System.NotSupportedException>. If **/clr**  is used instead, the affected functions are compiled to native code and execute properly. If **/clr:safe** is used, an error diagnostic is emitted.  \n  \n-   You should not call, from managed code, any functions that walk the stack to get parameter information (function arguments); the P/Invoke layer causes that information to be further down the stack.  For example, do not compile proxy/stub with **/clr**.  \n  \n-   Functions will be compiled to managed code whenever possible, but not all C++ constructs can be translated to managed code.  This determination is made on a function-by-function basis. If any part of a function cannot be converted to managed code, the entire function will be converted to native code instead. The following cases prevent the compiler from generating managed code.  \n  \n    -   Compiler-generated thunks or helper functions. Native thunks are generated for any function call through a function pointer, including virtual function calls.  \n  \n    -   Functions that call `setjmp` or `longjmp`.  \n  \n    -   Functions that use certain intrinsic routines to directly manipulate machine resources. For example, the use of `__enable` and `__disable`, `_ReturnAddress` and `_AddressOfReturnAddress`, or multimedia intrinsics will all result in native code.  \n  \n    -   Functions that follow the `#pragma unmanaged` directive. (Note that the inverse, `#pragma managed`, is also supported.)  \n  \n    -   A function that contains references to aligned types, that is, types declared using `__declspec(align(...))`.  \n  \n-   You cannot use the [Compiler COM Support](../../cpp/compiler-com-support.md) classes with **/clr:pure** or **/clr:safe**.  \n  \n## See Also  \n [/clr (Common Language Runtime Compilation)](../../build/reference/clr-common-language-runtime-compilation.md)"}