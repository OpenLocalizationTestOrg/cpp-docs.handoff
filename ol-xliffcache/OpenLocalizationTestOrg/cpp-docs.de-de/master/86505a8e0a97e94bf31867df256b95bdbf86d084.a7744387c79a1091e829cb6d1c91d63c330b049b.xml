{"nodes":[{"pos":[12,65],"content":"safe_cast (C++ Component Extensions) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"safe_cast (C++ Component Extensions) | Microsoft Docs","pos":[0,53]}]},{"content":"safe_cast (C++ Component Extensions)","pos":[693,729]},{"pos":[730,868],"content":"The <ph id=\"ph1\">`safe_cast`</ph> operation returns the specified expression as the specified type, if successful; otherwise, throws <ph id=\"ph2\">`InvalidCastException`</ph>.","source":"The `safe_cast` operation returns the specified expression as the specified type, if successful; otherwise, throws `InvalidCastException`."},{"content":"All Runtimes","pos":[877,889]},{"content":"(There are no remarks for this language feature that apply to all runtimes.)","pos":[893,969]},{"content":"Syntax","pos":[979,985]},{"content":"Parameters","pos":[1076,1086]},{"content":"Remarks","pos":[1096,1103]},{"content":"allows you to change the type of a specified expression.","pos":[1180,1236]},{"content":"In situations where you fully expect a variable or parameter to be convertible to a certain type, you can use safe_cast without a try-catch block to detect programming errors during development.","pos":[1237,1431]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Casting (C++/CX)<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/hh755802.aspx)</ept>.","pos":[1432,1539],"source":" For more information, see [Casting (C++/CX)](http://msdn.microsoft.com/library/windows/apps/hh755802.aspx)."},{"content":"Syntax","pos":[1549,1555]},{"content":"Parameters","pos":[1646,1656]},{"content":"type-id","pos":[1661,1668]},{"content":"The type to convert <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> to.","pos":[1673,1709],"source":" The type to convert *expression* to."},{"content":"A handle to a reference or value type, a value type, or a tracking reference to a reference or value type.","pos":[1710,1816]},{"content":"expression","pos":[1824,1834]},{"content":"An expression that evaluates to a handle to a reference or value type, a value type, or a tracking reference to a reference or value type.","pos":[1839,1977]},{"content":"Remarks","pos":[1987,1994]},{"content":"throws <ph id=\"ph1\">`InvalidCastException`</ph> if it cannot convert <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> to the type specified by <bpt id=\"p2\">*</bpt>type-id<ept id=\"p2\">*</ept>.","pos":[2010,2109],"source":" throws `InvalidCastException` if it cannot convert *expression* to the type specified by *type-id*."},{"content":"To catch <ph id=\"ph1\">`InvalidCastException`</ph>, specify the <bpt id=\"p1\">[</bpt>/EH (Exception Handling Model)<ept id=\"p1\">](../build/reference/eh-exception-handling-model.md)</ept> compiler option, and use a try/catch statement.","pos":[2110,2286],"source":" To catch `InvalidCastException`, specify the [/EH (Exception Handling Model)](../build/reference/eh-exception-handling-model.md) compiler option, and use a try/catch statement."},{"content":"Requirements","pos":[2296,2308]},{"pos":[2312,2336],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/ZW<ept id=\"p1\">**</ept>","source":"Compiler option: **/ZW**"},{"content":"Examples","pos":[2346,2354]},{"content":"Example","pos":[2360,2367]},{"pos":[2376,2501],"content":"The following code example demonstrates how to use <ph id=\"ph1\">`safe_cast`</ph> with the <ph id=\"ph2\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph>.","source":"The following code example demonstrates how to use `safe_cast` with the [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]."},{"content":"Output","pos":[3182,3188]},{"pos":[3357,3438],"content":"allows you to change the type of an expression and generate verifiable MSIL code."},{"content":"Syntax","pos":[3448,3454]},{"content":"Parameters","pos":[3541,3551]},{"content":"type-id","pos":[3556,3563]},{"content":"A handle to a reference or value type, a value type, or a tracking reference to a reference or value type.","pos":[3568,3674]},{"content":"expression","pos":[3682,3692]},{"content":"An expression that evaluates to a handle to a reference or value type, a value type, or a tracking reference to a reference or value type.","pos":[3697,3835]},{"content":"Remarks","pos":[3845,3852]},{"pos":[3856,3973],"content":"The expression <ph id=\"ph1\">`safe_cast&lt;`</ph><bpt id=\"p1\">*</bpt>type-id<ept id=\"p1\">*</ept><ph id=\"ph2\">`&gt;(`</ph><bpt id=\"p2\">*</bpt>expression<ept id=\"p2\">*</ept><ph id=\"ph3\">`)`</ph> converts the operand expression to an object of type type-id.","source":"The expression `safe_cast<`*type-id*`>(`*expression*`)` converts the operand expression to an object of type type-id."},{"content":"The compiler will accept a <bpt id=\"p1\">[</bpt>static_cast<ept id=\"p1\">](../cpp/static-cast-operator.md)</ept> in most places that it will accept a <ph id=\"ph1\">`safe_cast`</ph>.","pos":[3980,4102],"source":"The compiler will accept a [static_cast](../cpp/static-cast-operator.md) in most places that it will accept a `safe_cast`."},{"content":"However, <ph id=\"ph1\">`safe_cast`</ph> is guaranteed to produce verifiable MSIL, where as a <ph id=\"ph2\">`static_cast`</ph> could produce unverifiable MSIL.","pos":[4104,4224],"source":"  However, `safe_cast` is guaranteed to produce verifiable MSIL, where as a `static_cast` could produce unverifiable MSIL."},{"content":"See <bpt id=\"p1\">[</bpt>Pure and Verifiable Code (C++/CLI)<ept id=\"p1\">](../dotnet/pure-and-verifiable-code-cpp-cli.md)</ept> and <bpt id=\"p2\">[</bpt>Peverify.exe (PEVerify Tool)<ept id=\"p2\">](http://msdn.microsoft.com/Library/f4f46f9e-8d08-4e66-a94b-0c69c9b0bbfa)</ept> for more information on verifiable code.","pos":[4226,4461],"source":"  See [Pure and Verifiable Code (C++/CLI)](../dotnet/pure-and-verifiable-code-cpp-cli.md) and [Peverify.exe (PEVerify Tool)](http://msdn.microsoft.com/Library/f4f46f9e-8d08-4e66-a94b-0c69c9b0bbfa) for more information on verifiable code."},{"pos":[4468,4533],"content":"Like <ph id=\"ph1\">`static_cast`</ph>, <ph id=\"ph2\">`safe_cast`</ph> invokes user-defined conversions.","source":"Like `static_cast`, `safe_cast` invokes user-defined conversions."},{"pos":[4540,4627],"content":"For more information about casts, see <bpt id=\"p1\">[</bpt>Casting Operators<ept id=\"p1\">](../cpp/casting-operators.md)</ept>.","source":"For more information about casts, see [Casting Operators](../cpp/casting-operators.md)."},{"pos":[4646,4700],"content":"does not apply a <bpt id=\"p1\">**</bpt>const_cast<ept id=\"p1\">**</ept> (cast away <bpt id=\"p2\">**</bpt>const<ept id=\"p2\">**</ept>).","source":" does not apply a **const_cast** (cast away **const**)."},{"content":"is in the cli namespace.","pos":[4719,4743]},{"content":"See <bpt id=\"p1\">[</bpt>Platform, default, and cli Namespaces<ept id=\"p1\">](../windows/platform-default-and-cli-namespaces-cpp-component-extensions.md)</ept> for more information.","pos":[4745,4886],"source":"  See [Platform, default, and cli Namespaces](../windows/platform-default-and-cli-namespaces-cpp-component-extensions.md) for more information."},{"pos":[4893,4936],"content":"For more information on <bpt id=\"p1\">**</bpt>safe_cas<ept id=\"p1\">**</ept>t, see:","source":"For more information on **safe_cas**t, see:"},{"content":"C-Style Casts with /clr (C++/CLI)","pos":[4947,4980]},{"content":"How to: Use safe_cast in C++/CLI","pos":[5038,5070]},{"content":"Requirements","pos":[5125,5137]},{"pos":[5141,5166],"content":"Compiler option: <bpt id=\"p1\">**</bpt>/clr<ept id=\"p1\">**</ept>","source":"Compiler option: **/clr**"},{"content":"Examples","pos":[5176,5184]},{"content":"Example","pos":[5190,5197]},{"content":"One example of where the compiler will not accept a <ph id=\"ph1\">`static_cast`</ph> but will accept a <ph id=\"ph2\">`safe_cast`</ph> is for casts between unrelated interface types.","pos":[5206,5349],"source":"One example of where the compiler will not accept a `static_cast` but will accept a `safe_cast` is for casts between unrelated interface types."},{"content":"With <ph id=\"ph1\">`safe_cast`</ph>, the compiler will not issue a conversion error and will perform a check at runtime to see if the cast is possible","pos":[5351,5482],"source":"  With `safe_cast`, the compiler will not issue a conversion error and will perform a check at runtime to see if the cast is possible"},{"content":"Output","pos":[6080,6086]},{"content":"See Also","pos":[6146,6154]},{"content":"Component Extensions for Runtime Platforms","pos":[6159,6201]}],"content":"---\ntitle: \"safe_cast (C++ Component Extensions) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"safe_cast\"\n  - \"safe_cast_cpp\"\n  - \"stdcli::language::safe_cast\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"safe_cast keyword [C++]\"\nms.assetid: 4fa688bf-a8ec-49bc-a4c5-f48134efa4f7\ncaps.latest.revision: 26\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# safe_cast (C++ Component Extensions)\nThe `safe_cast` operation returns the specified expression as the specified type, if successful; otherwise, throws `InvalidCastException`.  \n  \n## All Runtimes  \n (There are no remarks for this language feature that apply to all runtimes.)  \n  \n### Syntax  \n  \n```cpp  \n  \n[default]:: safe_cast<  \ntype-id  \n>(  \nexpression  \n)  \n  \n```  \n  \n### Parameters  \n  \n### Remarks  \n  \n## [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]  \n `safe_cast` allows you to change the type of a specified expression. In situations where you fully expect a variable or parameter to be convertible to a certain type, you can use safe_cast without a try-catch block to detect programming errors during development. For more information, see [Casting (C++/CX)](http://msdn.microsoft.com/library/windows/apps/hh755802.aspx).  \n  \n### Syntax  \n  \n```cpp  \n  \n[default]:: safe_cast<  \ntype-id  \n>(  \nexpression  \n)  \n  \n```  \n  \n### Parameters  \n *type-id*  \n The type to convert *expression* to. A handle to a reference or value type, a value type, or a tracking reference to a reference or value type.  \n  \n *expression*  \n An expression that evaluates to a handle to a reference or value type, a value type, or a tracking reference to a reference or value type.  \n  \n### Remarks  \n `safe_cast` throws `InvalidCastException` if it cannot convert *expression* to the type specified by *type-id*. To catch `InvalidCastException`, specify the [/EH (Exception Handling Model)](../build/reference/eh-exception-handling-model.md) compiler option, and use a try/catch statement.  \n  \n### Requirements  \n Compiler option: **/ZW**  \n  \n### Examples  \n **Example**  \n  \n The following code example demonstrates how to use `safe_cast` with the [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)].  \n  \n```cpp#  \n// safe_cast_ZW.cpp  \n// compile with: /ZW /EHsc  \n  \nusing namespace default;  \nusing namespace Platform;  \n  \ninterface class I1 {};  \ninterface class I2 {};  \ninterface class I3 {};  \n  \nref class X : public I1, public I2 {};  \n  \nint main(Array<String^>^ args) {  \n   I1^ i1 = ref new X;  \n   I2^ i2 = safe_cast<I2^>(i1);   // OK, I1 and I2 have common type: X  \n   // I2^ i3 = static_cast<I2^>(i1);   C2440 use safe_cast instead  \n   try {  \n      I3^ i4 = safe_cast<I3^>(i1);   // Fails because i1 is not derived from I3.  \n   }   \n   catch(InvalidCastException^ ic) {  \n     wprintf(L\"Caught expected exception: %s\\n\", ic->Message);  \n   }  \n}  \n```  \n  \n **Output**  \n  \n```Output  \nCaught expected exception: InvalidCastException  \n```  \n  \n## [!INCLUDE[clr_for_headings](../dotnet/includes/clr_for_headings_md.md)]  \n `safe_cast` allows you to change the type of an expression and generate verifiable MSIL code.  \n  \n### Syntax  \n  \n```cpp  \n  \n[cli]:: safe_cast<  \ntype-id  \n>(  \nexpression  \n)  \n  \n```  \n  \n### Parameters  \n *type-id*  \n A handle to a reference or value type, a value type, or a tracking reference to a reference or value type.  \n  \n *expression*  \n An expression that evaluates to a handle to a reference or value type, a value type, or a tracking reference to a reference or value type.  \n  \n### Remarks  \n The expression `safe_cast<`*type-id*`>(`*expression*`)` converts the operand expression to an object of type type-id.  \n  \n The compiler will accept a [static_cast](../cpp/static-cast-operator.md) in most places that it will accept a `safe_cast`.  However, `safe_cast` is guaranteed to produce verifiable MSIL, where as a `static_cast` could produce unverifiable MSIL.  See [Pure and Verifiable Code (C++/CLI)](../dotnet/pure-and-verifiable-code-cpp-cli.md) and [Peverify.exe (PEVerify Tool)](http://msdn.microsoft.com/Library/f4f46f9e-8d08-4e66-a94b-0c69c9b0bbfa) for more information on verifiable code.  \n  \n Like `static_cast`, `safe_cast` invokes user-defined conversions.  \n  \n For more information about casts, see [Casting Operators](../cpp/casting-operators.md).  \n  \n `safe_cast` does not apply a **const_cast** (cast away **const**).  \n  \n `safe_cast` is in the cli namespace.  See [Platform, default, and cli Namespaces](../windows/platform-default-and-cli-namespaces-cpp-component-extensions.md) for more information.  \n  \n For more information on **safe_cas**t, see:  \n  \n-   [C-Style Casts with /clr (C++/CLI)](../windows/c-style-casts-with-clr-cpp-cli.md)  \n  \n-   [How to: Use safe_cast in C++/CLI](../dotnet/how-to-use-safe-cast-in-cpp-cli.md)  \n\n### Requirements  \n Compiler option: **/clr**  \n  \n### Examples  \n **Example**  \n  \n One example of where the compiler will not accept a `static_cast` but will accept a `safe_cast` is for casts between unrelated interface types.  With `safe_cast`, the compiler will not issue a conversion error and will perform a check at runtime to see if the cast is possible  \n  \n```cpp  \n// safe_cast.cpp  \n// compile with: /clr  \nusing namespace System;  \n  \ninterface class I1 {};  \ninterface class I2 {};  \ninterface class I3 {};  \n  \nref class X : public I1, public I2 {};  \n  \nint main() {  \n   I1^ i1 = gcnew X;  \n   I2^ i2 = safe_cast<I2^>(i1);   // OK, I1 and I2 have common type: X  \n   // I2^ i3 = static_cast<I2^>(i1);   C2440 use safe_cast instead  \n   try {  \n      I3^ i4 = safe_cast<I3^>(i1);   // fail at runtime, no common type  \n   }   \n   catch(InvalidCastException^) {  \n      Console::WriteLine(\"Caught expected exception\");  \n   }  \n}  \n```  \n  \n **Output**  \n  \n```Output  \nCaught expected exception  \n```  \n  \n## See Also  \n [Component Extensions for Runtime Platforms](../windows/component-extensions-for-runtime-platforms.md)"}