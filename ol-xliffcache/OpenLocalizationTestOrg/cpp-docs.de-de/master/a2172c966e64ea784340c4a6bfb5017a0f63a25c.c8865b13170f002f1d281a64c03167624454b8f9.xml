{"nodes":[{"pos":[12,51],"content":"propagator_block Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"propagator_block Class | Microsoft Docs","pos":[0,39]}]},{"content":"propagator_block Class","pos":[640,662]},{"content":"The <ph id=\"ph1\">`propagator_block`</ph> class is an abstract base class for message blocks that are both a source and target.","pos":[663,771],"source":"The `propagator_block` class is an abstract base class for message blocks that are both a source and target."},{"content":"It combines the functionality of both the <ph id=\"ph1\">`source_block`</ph> and <ph id=\"ph2\">`target_block`</ph> classes.","pos":[772,856],"source":" It combines the functionality of both the `source_block` and `target_block` classes."},{"content":"Syntax","pos":[865,871]},{"content":"Parameters","pos":[1217,1227]},{"content":"The link registry to be used for holding the target links.","pos":[1256,1314]},{"content":"The link registry to be used for holding the source links.","pos":[1346,1404]},{"content":"The processor type for message processing.","pos":[1438,1480]},{"content":"Members","pos":[1489,1496]},{"content":"Public Typedefs","pos":[1506,1521]},{"content":"Name","pos":[1528,1532]},{"content":"Description","pos":[1533,1544]},{"pos":[1600,1683],"content":"The type of the iterator for the <ph id=\"ph1\">`source_link_manager`</ph> for this <ph id=\"ph2\">`propagator_block`</ph>.","source":"The type of the iterator for the `source_link_manager` for this `propagator_block`."},{"content":"Public Constructors","pos":[1694,1713]},{"content":"Name","pos":[1720,1724]},{"content":"Description","pos":[1725,1736]},{"content":"propagator_block::propagator_block Constructor","pos":[1775,1821]},{"pos":[1830,1869],"content":"Constructs a <ph id=\"ph1\">`propagator_block`</ph> object.","source":"Constructs a `propagator_block` object."},{"content":"propagator_block::~propagator_block Destructor","pos":[1875,1921]},{"pos":[1930,1967],"content":"Destroys a <ph id=\"ph1\">`propagator_block`</ph> object.","source":"Destroys a `propagator_block` object."},{"content":"Public Methods","pos":[1978,1992]},{"content":"Name","pos":[1999,2003]},{"content":"Description","pos":[2004,2015]},{"content":"propagator_block::propagate Method","pos":[2054,2088]},{"content":"Asynchronously passes a message from a source block to this target block.","pos":[2102,2175]},{"content":"propagator_block::send Method","pos":[2181,2210]},{"content":"Synchronously initiates a message to this block.","pos":[2219,2267]},{"content":"Called by an <ph id=\"ph1\">`ISource`</ph> block.","pos":[2268,2297],"source":" Called by an `ISource` block."},{"content":"When this function completes, the message will already have propagated into the block.","pos":[2298,2384]},{"content":"Protected Methods","pos":[2395,2412]},{"content":"Name","pos":[2419,2423]},{"content":"Description","pos":[2424,2435]},{"content":"propagator_block::decline_incoming_messages Method","pos":[2474,2524]},{"content":"Indicates to the block that new messages should be declined.","pos":[2554,2614]},{"content":"propagator_block::initialize_source_and_target Method","pos":[2620,2673]},{"content":"Initializes the base object.","pos":[2706,2734]},{"content":"Specifically, the <ph id=\"ph1\">`message_processor`</ph> object needs to be initialized.","pos":[2735,2804],"source":" Specifically, the `message_processor` object needs to be initialized."},{"content":"propagator_block::link_source Method","pos":[2810,2846]},{"pos":[2862,2927],"content":"Links a specified source block to this <ph id=\"ph1\">`propagator_block`</ph> object.","source":"Links a specified source block to this `propagator_block` object."},{"content":"propagator_block::process_input_messages Method","pos":[2933,2980]},{"content":"Process input messages.","pos":[3007,3030]},{"content":"This is only useful for propagator blocks, which derive from source_block (Overrides <bpt id=\"p1\">[</bpt>source_block::process_input_messages<ept id=\"p1\">](source-block-class.md#process_input_messages)</ept>.)","pos":[3031,3202],"source":" This is only useful for propagator blocks, which derive from source_block (Overrides [source_block::process_input_messages](source-block-class.md#process_input_messages).)"},{"content":"propagator_block::propagate_message Method","pos":[3208,3250]},{"content":"When overridden in a derived class, this method asynchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`propagator_block`</ph> object.","pos":[3272,3410],"source":"When overridden in a derived class, this method asynchronously passes a message from an `ISource` block to this `propagator_block` object."},{"content":"It is invoked by the <ph id=\"ph1\">`propagate`</ph> method, when called by a source block.","pos":[3411,3482],"source":" It is invoked by the `propagate` method, when called by a source block."},{"content":"propagator_block::register_filter Method","pos":[3488,3528]},{"content":"Registers a filter method that will be invoked on every received message.","pos":[3548,3621]},{"content":"propagator_block::remove_network_links Method","pos":[3627,3672]},{"pos":[3697,3781],"content":"Removes all the source and target network links from this <ph id=\"ph1\">`propagator_block`</ph> object.","source":"Removes all the source and target network links from this `propagator_block` object."},{"content":"propagator_block::send_message Method","pos":[3787,3824]},{"content":"When overridden in a derived class, this method synchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`propagator_block`</ph> object.","pos":[3841,3978],"source":"When overridden in a derived class, this method synchronously passes a message from an `ISource` block to this `propagator_block` object."},{"content":"It is invoked by the <ph id=\"ph1\">`send`</ph> method, when called by a source block.","pos":[3979,4045],"source":" It is invoked by the `send` method, when called by a source block."},{"content":"propagator_block::unlink_source Method","pos":[4051,4089]},{"pos":[4107,4176],"content":"Unlinks a specified source block from this <ph id=\"ph1\">`propagator_block`</ph> object.","source":"Unlinks a specified source block from this `propagator_block` object."},{"content":"propagator_block::unlink_sources Method","pos":[4182,4221]},{"content":"Unlinks all source blocks from this <ph id=\"ph1\">`propagator_block`</ph> object.","pos":[4240,4302],"source":"Unlinks all source blocks from this `propagator_block` object."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>ITarget::unlink_sources<ept id=\"p1\">](itarget-class.md#unlink_sources)</ept>.)","pos":[4303,4374],"source":" (Overrides [ITarget::unlink_sources](itarget-class.md#unlink_sources).)"},{"content":"Remarks","pos":[4384,4391]},{"content":"To avoid multiple inheritance, the <ph id=\"ph1\">`propagator_block`</ph> class inherits from the <ph id=\"ph2\">`source_block`</ph> class and <ph id=\"ph3\">`ITarget`</ph> abstract class.","pos":[4395,4523],"source":"To avoid multiple inheritance, the `propagator_block` class inherits from the `source_block` class and `ITarget` abstract class."},{"content":"Most of the functionality in the <ph id=\"ph1\">`target_block`</ph> class is replicated here.","pos":[4524,4597],"source":" Most of the functionality in the `target_block` class is replicated here."},{"content":"Inheritance Hierarchy","pos":[4606,4627]},{"content":"ISource","pos":[4632,4639]},{"content":"ITarget","pos":[4666,4673]},{"content":"source_block","pos":[4700,4712]},{"content":"Requirements","pos":[4770,4782]},{"pos":[4786,4806],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[4813,4839],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[4891,4941],"content":"propagator_block::decline_incoming_messages Method"},{"content":"Indicates to the block that new messages should be declined.","pos":[4945,5005]},{"content":"Remarks","pos":[5062,5069]},{"content":"This method is called by the destructor to ensure that new messages are declined while destruction is in progress.","pos":[5073,5187]},{"pos":[5242,5295],"content":"propagator_block::initialize_source_and_target Method"},{"content":"Initializes the base object.","pos":[5299,5327]},{"content":"Specifically, the <ph id=\"ph1\">`message_processor`</ph> object needs to be initialized.","pos":[5328,5397],"source":" Specifically, the `message_processor` object needs to be initialized."},{"content":"Parameters","pos":[5558,5568]},{"content":"The scheduler to be used for scheduling tasks.","pos":[5589,5635]},{"content":"The schedule group to be used for scheduling tasks.","pos":[5663,5714]},{"pos":[5752,5788],"content":"propagator_block::link_source Method"},{"pos":[5792,5857],"content":"Links a specified source block to this <ph id=\"ph1\">`propagator_block`</ph> object.","source":"Links a specified source block to this `propagator_block` object."},{"content":"Parameters","pos":[5947,5957]},{"content":"A pointer to the <ph id=\"ph1\">`ISource`</ph> block that is to be linked.","pos":[5975,6029],"source":" A pointer to the `ISource` block that is to be linked."},{"pos":[6078,6125],"content":"propagator_block::process_input_messages Method"},{"content":"Process input messages.","pos":[6129,6152]},{"content":"This is only useful for propagator blocks, which derive from source_block","pos":[6153,6226]},{"content":"Parameters","pos":[6328,6338]},{"pos":[6389,6423],"content":"propagator_block::propagate Method"},{"content":"Asynchronously passes a message from a source block to this target block.","pos":[6427,6500]},{"content":"Parameters","pos":[6657,6667]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[6686,6720],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[6741,6792]},{"content":"Return Value","pos":[6802,6814]},{"pos":[6818,6930],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"content":"Remarks","pos":[6940,6947]},{"content":"The <ph id=\"ph1\">`propagate`</ph> method is invoked on a target block by a linked source block.","pos":[6951,7028],"source":"The `propagate` method is invoked on a target block by a linked source block."},{"content":"It queues up an asynchronous task to handle the message, if one is not already queued or executing.","pos":[7029,7128]},{"pos":[7135,7298],"content":"The method throws an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception if either the <ph id=\"ph1\">`_PMessage`</ph> or <ph id=\"ph2\">`_PSource`</ph> parameter is <ph id=\"ph3\">`NULL`</ph>.","source":"The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if either the `_PMessage` or `_PSource` parameter is `NULL`."},{"pos":[7342,7384],"content":"propagator_block::propagate_message Method"},{"content":"When overridden in a derived class, this method asynchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`propagator_block`</ph> object.","pos":[7388,7526],"source":"When overridden in a derived class, this method asynchronously passes a message from an `ISource` block to this `propagator_block` object."},{"content":"It is invoked by the <ph id=\"ph1\">`propagate`</ph> method, when called by a source block.","pos":[7527,7598],"source":" It is invoked by the `propagate` method, when called by a source block."},{"content":"Parameters","pos":[7759,7769]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[7788,7822],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[7843,7894]},{"content":"Return Value","pos":[7904,7916]},{"pos":[7920,8032],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"pos":[8063,8109],"content":"propagator_block::propagator_block Constructor"},{"pos":[8113,8152],"content":"Constructs a <ph id=\"ph1\">`propagator_block`</ph> object.","source":"Constructs a `propagator_block` object."},{"pos":[8216,8262],"content":"propagator_block::~propagator_block Destructor"},{"pos":[8266,8303],"content":"Destroys a <ph id=\"ph1\">`propagator_block`</ph> object.","source":"Destroys a `propagator_block` object."},{"pos":[8387,8427],"content":"propagator_block::register_filter Method"},{"content":"Registers a filter method that will be invoked on every received message.","pos":[8431,8504]},{"content":"Parameters","pos":[8579,8589]},{"content":"The filter method.","pos":[8606,8624]},{"pos":[8671,8716],"content":"propagator_block::remove_network_links Method"},{"pos":[8720,8804],"content":"Removes all the source and target network links from this <ph id=\"ph1\">`propagator_block`</ph> object.","source":"Removes all the source and target network links from this `propagator_block` object."},{"pos":[8877,8906],"content":"propagator_block::send Method"},{"content":"Synchronously initiates a message to this block.","pos":[8910,8958]},{"content":"Called by an <ph id=\"ph1\">`ISource`</ph> block.","pos":[8959,8988],"source":" Called by an `ISource` block."},{"content":"When this function completes, the message will already have propagated into the block.","pos":[8989,9075]},{"content":"Parameters","pos":[9219,9229]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[9248,9282],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[9303,9354]},{"content":"Return Value","pos":[9364,9376]},{"pos":[9380,9492],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"content":"Remarks","pos":[9502,9509]},{"pos":[9513,9677],"content":"This method throws an <bpt id=\"p1\">[</bpt>invalid_argument<ept id=\"p1\">](../../../standard-library/invalid-argument-class.md)</ept> exception if either the <ph id=\"ph1\">`_PMessage`</ph> or <ph id=\"ph2\">`_PSource`</ph> parameter is <ph id=\"ph3\">`NULL`</ph>.","source":"This method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if either the `_PMessage` or `_PSource` parameter is `NULL`."},{"pos":[9716,9753],"content":"propagator_block::send_message Method"},{"content":"When overridden in a derived class, this method synchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`propagator_block`</ph> object.","pos":[9757,9894],"source":"When overridden in a derived class, this method synchronously passes a message from an `ISource` block to this `propagator_block` object."},{"content":"It is invoked by the <ph id=\"ph1\">`send`</ph> method, when called by a source block.","pos":[9895,9961],"source":" It is invoked by the `send` method, when called by a source block."},{"content":"Return Value","pos":[10096,10108]},{"pos":[10112,10224],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message."},{"content":"Remarks","pos":[10234,10241]},{"pos":[10245,10324],"content":"By default, this block returns <ph id=\"ph1\">`declined`</ph> unless overridden by a derived class.","source":"By default, this block returns `declined` unless overridden by a derived class."},{"pos":[10364,10402],"content":"propagator_block::unlink_source Method"},{"pos":[10406,10475],"content":"Unlinks a specified source block from this <ph id=\"ph1\">`propagator_block`</ph> object.","source":"Unlinks a specified source block from this `propagator_block` object."},{"content":"Parameters","pos":[10567,10577]},{"content":"A pointer to the <ph id=\"ph1\">`ISource`</ph> block that is to be unlinked.","pos":[10595,10651],"source":" A pointer to the `ISource` block that is to be unlinked."},{"pos":[10692,10731],"content":"propagator_block::unlink_sources Method"},{"pos":[10735,10797],"content":"Unlinks all source blocks from this <ph id=\"ph1\">`propagator_block`</ph> object.","source":"Unlinks all source blocks from this `propagator_block` object."},{"content":"See Also","pos":[10850,10858]},{"content":"concurrency Namespace","pos":[10863,10884]},{"content":"source_block Class","pos":[10917,10935]},{"content":"ITarget Class","pos":[10965,10978]}],"content":"---\ntitle: \"propagator_block Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"agents/concurrency::propagator_block\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"propagator_block class\"\nms.assetid: 86aa75fd-eda5-42aa-aadf-25c0c1c9742d\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# propagator_block Class\nThe `propagator_block` class is an abstract base class for message blocks that are both a source and target. It combines the functionality of both the `source_block` and `target_block` classes.  \n  \n## Syntax  \n  \n```\ntemplate<class _TargetLinkRegistry, class _SourceLinkRegistry, class _MessageProcessorType = ordered_message_processor<typename _TargetLinkRegistry::type::type>>\nclass propagator_block : public source_block<_TargetLinkRegistry,\n    _MessageProcessorType>,\n public ITarget<typename _SourceLinkRegistry::type::source_type>;\n```  \n  \n#### Parameters  \n `_TargetLinkRegistry`  \n The link registry to be used for holding the target links.  \n  \n `_SourceLinkRegistry`  \n The link registry to be used for holding the source links.  \n  \n `_MessageProcessorType`  \n The processor type for message processing.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`source_iterator`|The type of the iterator for the `source_link_manager` for this `propagator_block`.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[propagator_block::propagator_block Constructor](#ctor)|Constructs a `propagator_block` object.|  \n|[propagator_block::~propagator_block Destructor](#dtor)|Destroys a `propagator_block` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[propagator_block::propagate Method](#propagate)|Asynchronously passes a message from a source block to this target block.|  \n|[propagator_block::send Method](#send)|Synchronously initiates a message to this block. Called by an `ISource` block. When this function completes, the message will already have propagated into the block.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[propagator_block::decline_incoming_messages Method](#decline_incoming_messages)|Indicates to the block that new messages should be declined.|  \n|[propagator_block::initialize_source_and_target Method](#initialize_source_and_target)|Initializes the base object. Specifically, the `message_processor` object needs to be initialized.|  \n|[propagator_block::link_source Method](#link_source)|Links a specified source block to this `propagator_block` object.|  \n|[propagator_block::process_input_messages Method](#process_input_messages)|Process input messages. This is only useful for propagator blocks, which derive from source_block (Overrides [source_block::process_input_messages](source-block-class.md#process_input_messages).)|  \n|[propagator_block::propagate_message Method](#propagate_message)|When overridden in a derived class, this method asynchronously passes a message from an `ISource` block to this `propagator_block` object. It is invoked by the `propagate` method, when called by a source block.|  \n|[propagator_block::register_filter Method](#register_filter)|Registers a filter method that will be invoked on every received message.|  \n|[propagator_block::remove_network_links Method](#remove_network_links)|Removes all the source and target network links from this `propagator_block` object.|  \n|[propagator_block::send_message Method](#send_message)|When overridden in a derived class, this method synchronously passes a message from an `ISource` block to this `propagator_block` object. It is invoked by the `send` method, when called by a source block.|  \n|[propagator_block::unlink_source Method](#unlink_source)|Unlinks a specified source block from this `propagator_block` object.|  \n|[propagator_block::unlink_sources Method](#unlink_sources)|Unlinks all source blocks from this `propagator_block` object. (Overrides [ITarget::unlink_sources](itarget-class.md#unlink_sources).)|  \n  \n## Remarks  \n To avoid multiple inheritance, the `propagator_block` class inherits from the `source_block` class and `ITarget` abstract class. Most of the functionality in the `target_block` class is replicated here.  \n  \n## Inheritance Hierarchy  \n [ISource](isource-class.md)  \n  \n [ITarget](itarget-class.md)  \n  \n [source_block](source-block-class.md)  \n  \n `propagator_block`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"decline_incoming_messages\"></a>  propagator_block::decline_incoming_messages Method  \n Indicates to the block that new messages should be declined.  \n  \n```\nvoid decline_incoming_messages();\n```  \n  \n### Remarks  \n This method is called by the destructor to ensure that new messages are declined while destruction is in progress.  \n  \n##  <a name=\"initialize_source_and_target\"></a>  propagator_block::initialize_source_and_target Method  \n Initializes the base object. Specifically, the `message_processor` object needs to be initialized.  \n  \n```\nvoid initialize_source_and_target(\n    _Inout_opt_ Scheduler* _PScheduler = NULL,\n    _Inout_opt_ ScheduleGroup* _PScheduleGroup = NULL);\n```  \n  \n### Parameters  \n `_PScheduler`  \n The scheduler to be used for scheduling tasks.  \n  \n `_PScheduleGroup`  \n The schedule group to be used for scheduling tasks.  \n  \n##  <a name=\"link_source\"></a>  propagator_block::link_source Method  \n Links a specified source block to this `propagator_block` object.  \n  \n```\nvirtual void link_source(_Inout_ ISource<_Source_type>* _PSource);\n```  \n  \n### Parameters  \n `_PSource`  \n A pointer to the `ISource` block that is to be linked.  \n  \n##  <a name=\"process_input_messages\"></a>  propagator_block::process_input_messages Method  \n Process input messages. This is only useful for propagator blocks, which derive from source_block  \n  \n```\nvirtual void process_input_messages(_Inout_ message<_Target_type>* _PMessage);\n```  \n  \n### Parameters  \n `_PMessage`  \n  \n##  <a name=\"propagate\"></a>  propagator_block::propagate Method  \n Asynchronously passes a message from a source block to this target block.  \n  \n```\nvirtual message_status propagate(\n    _Inout_opt_ message<_Source_type>* _PMessage,\n    _Inout_opt_ ISource<_Source_type>* _PSource);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n### Remarks  \n The `propagate` method is invoked on a target block by a linked source block. It queues up an asynchronous task to handle the message, if one is not already queued or executing.  \n  \n The method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if either the `_PMessage` or `_PSource` parameter is `NULL`.  \n  \n##  <a name=\"propagate_message\"></a>  propagator_block::propagate_message Method  \n When overridden in a derived class, this method asynchronously passes a message from an `ISource` block to this `propagator_block` object. It is invoked by the `propagate` method, when called by a source block.  \n  \n```\nvirtual message_status propagate_message(\n    _Inout_ message<_Source_type>* _PMessage,\n    _Inout_ ISource<_Source_type>* _PSource) = 0;\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n##  <a name=\"ctor\"></a>  propagator_block::propagator_block Constructor  \n Constructs a `propagator_block` object.  \n  \n```\npropagator_block();\n```  \n  \n##  <a name=\"dtor\"></a>  propagator_block::~propagator_block Destructor  \n Destroys a `propagator_block` object.  \n  \n```\nvirtual ~propagator_block();\n```  \n  \n##  <a name=\"register_filter\"></a>  propagator_block::register_filter Method  \n Registers a filter method that will be invoked on every received message.  \n  \n```\nvoid register_filter(filter_method const& _Filter);\n```  \n  \n### Parameters  \n `_Filter`  \n The filter method.  \n  \n##  <a name=\"remove_network_links\"></a>  propagator_block::remove_network_links Method  \n Removes all the source and target network links from this `propagator_block` object.  \n  \n```\nvoid remove_network_links();\n```  \n  \n##  <a name=\"send\"></a>  propagator_block::send Method  \n Synchronously initiates a message to this block. Called by an `ISource` block. When this function completes, the message will already have propagated into the block.  \n  \n```\nvirtual message_status send(\n    _Inout_ message<_Source_type>* _PMessage,\n    _Inout_ ISource<_Source_type>* _PSource);\n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n### Remarks  \n This method throws an [invalid_argument](../../../standard-library/invalid-argument-class.md) exception if either the `_PMessage` or `_PSource` parameter is `NULL`.  \n  \n##  <a name=\"send_message\"></a>  propagator_block::send_message Method  \n When overridden in a derived class, this method synchronously passes a message from an `ISource` block to this `propagator_block` object. It is invoked by the `send` method, when called by a source block.  \n  \n```\nvirtual message_status send_message(\n    _Inout_ message<_Source_type> *,\n    _Inout_ ISource<_Source_type> *);\n```  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md) indication of what the target decided to do with the message.  \n  \n### Remarks  \n By default, this block returns `declined` unless overridden by a derived class.  \n  \n##  <a name=\"unlink_source\"></a>  propagator_block::unlink_source Method  \n Unlinks a specified source block from this `propagator_block` object.  \n  \n```\nvirtual void unlink_source(_Inout_ ISource<_Source_type>* _PSource);\n```  \n  \n### Parameters  \n `_PSource`  \n A pointer to the `ISource` block that is to be unlinked.  \n  \n##  <a name=\"unlink_sources\"></a>  propagator_block::unlink_sources Method  \n Unlinks all source blocks from this `propagator_block` object.  \n  \n```\nvirtual void unlink_sources();\n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [source_block Class](source-block-class.md)   \n [ITarget Class](itarget-class.md)\n"}