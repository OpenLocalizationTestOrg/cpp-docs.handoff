{"nodes":[{"pos":[12,48],"content":"CCheckListBox Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CCheckListBox Class | Microsoft Docs","pos":[0,36]}]},{"content":"CCheckListBox Class","pos":[635,654]},{"content":"Provides the functionality of a Windows checklist box.","pos":[655,709]},{"content":"Syntax","pos":[718,724]},{"content":"Members","pos":[788,795]},{"content":"Public Constructors","pos":[805,824]},{"content":"Name","pos":[831,835]},{"content":"Description","pos":[836,847]},{"content":"CCheckListBox::CCheckListBox","pos":[886,914]},{"pos":[947,983],"content":"Constructs a <ph id=\"ph1\">`CCheckListBox`</ph> object.","source":"Constructs a `CCheckListBox` object."},{"content":"Public Methods","pos":[994,1008]},{"content":"Name","pos":[1015,1019]},{"content":"Description","pos":[1020,1031]},{"content":"CCheckListBox::Create","pos":[1070,1091]},{"pos":[1117,1197],"content":"Creates the Windows checklist box and attaches it to the <ph id=\"ph1\">`CCheckListBox`</ph> object.","source":"Creates the Windows checklist box and attaches it to the `CCheckListBox` object."},{"content":"CCheckListBox::DrawItem","pos":[1203,1226]},{"content":"Called by the framework when a visual aspect of an owner-draw list box changes.","pos":[1254,1333]},{"content":"CCheckListBox::Enable","pos":[1339,1360]},{"content":"Enables or disables a checklist box item.","pos":[1386,1427]},{"content":"CCheckListBox::GetCheck","pos":[1433,1456]},{"content":"Gets the state of an item's check box.","pos":[1484,1522]},{"content":"CCheckListBox::GetCheckStyle","pos":[1528,1556]},{"content":"Gets the style of the control's check boxes.","pos":[1589,1633]},{"content":"CCheckListBox::IsEnabled","pos":[1639,1663]},{"content":"Determines whether an item is enabled.","pos":[1692,1730]},{"content":"CCheckListBox::MeasureItem","pos":[1736,1762]},{"content":"Called by the framework when a list box with an owner-draw style is created.","pos":[1793,1869]},{"content":"CCheckListBox::OnGetCheckPosition","pos":[1875,1908]},{"content":"Called by the framework to get the position of an item's check box.","pos":[1946,2013]},{"content":"CCheckListBox::SetCheck","pos":[2019,2042]},{"content":"Sets the state of an item's check box.","pos":[2070,2108]},{"content":"CCheckListBox::SetCheckStyle","pos":[2114,2142]},{"content":"Sets the style of the control's check boxes.","pos":[2175,2219]},{"content":"Remarks","pos":[2229,2236]},{"content":"A \"checklist box\" displays a list of items, such as filenames.","pos":[2240,2302]},{"content":"Each item in the list has a check box next to it that the user can check or clear.","pos":[2303,2385]},{"content":"is only for owner-drawn controls because the list contains more than text strings.","pos":[2408,2490]},{"content":"At its simplest, a checklist box contains text strings and check boxes, but you do not need to have text at all.","pos":[2491,2603]},{"content":"For example, you could have a list of small bitmaps with a check box next to each item.","pos":[2604,2691]},{"content":"To create your own checklist box, you must derive your own class from <ph id=\"ph1\">`CCheckListBox`</ph>.","pos":[2698,2784],"source":"To create your own checklist box, you must derive your own class from `CCheckListBox`."},{"content":"To derive your own class, write a constructor for the derived class, then call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>.","pos":[2785,2875],"source":" To derive your own class, write a constructor for the derived class, then call **Create**."},{"pos":[2882,3144],"content":"If you want to handle Windows notification messages sent by a list box to its parent (usually a class derived from <bpt id=\"p1\">[</bpt>CDialog<ept id=\"p1\">](../../mfc/reference/cdialog-class.md)</ept>), add a message-map entry and message-handler member function to the parent class for each message.","source":"If you want to handle Windows notification messages sent by a list box to its parent (usually a class derived from [CDialog](../../mfc/reference/cdialog-class.md)), add a message-map entry and message-handler member function to the parent class for each message."},{"content":"Each message-map entry takes the following form:","pos":[3151,3199]},{"pos":[3206,3253],"content":"<bpt id=\"p1\">**</bpt>ON_<ept id=\"p1\">**</ept>Notification <bpt id=\"p2\">**</bpt>(<ept id=\"p2\">**</ept><ph id=\"ph1\">`id`</ph>, <ph id=\"ph2\">`memberFxn`</ph><bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**ON_**Notification **(**`id`, `memberFxn`**)**"},{"pos":[3260,3443],"content":"where <ph id=\"ph1\">`id`</ph> specifies the child window ID of the control sending the notification and <ph id=\"ph2\">`memberFxn`</ph> is the name of the parent member function you have written to handle the notification.","source":"where `id` specifies the child window ID of the control sending the notification and `memberFxn` is the name of the parent member function you have written to handle the notification."},{"content":"The parent's function prototype is as follows:","pos":[3450,3496]},{"pos":[3503,3542],"content":"<bpt id=\"p1\">**</bpt>afx_msg<ept id=\"p1\">**</ept> <ph id=\"ph1\">`void`</ph> <ph id=\"ph2\">`memberFxn`</ph> <bpt id=\"p2\">**</bpt>( );<ept id=\"p2\">**</ept>","source":"**afx_msg** `void` `memberFxn` **( );**"},{"pos":[3549,3726],"content":"There is only one message-map entry that pertains specifically to <bpt id=\"p1\">**</bpt>CCheckListBox<ept id=\"p1\">**</ept> (but see also the message-map entries for <bpt id=\"p2\">[</bpt>CListBox<ept id=\"p2\">](../../mfc/reference/clistbox-class.md)</ept>):","source":"There is only one message-map entry that pertains specifically to **CCheckListBox** (but see also the message-map entries for [CListBox](../../mfc/reference/clistbox-class.md)):"},{"pos":[3734,3809],"content":"<bpt id=\"p1\">**</bpt>ON_CLBN_CHKCHANGE<ept id=\"p1\">**</ept> The user has changed the state of an item's checkbox.","source":"**ON_CLBN_CHKCHANGE** The user has changed the state of an item's checkbox."},{"content":"If your checklist box is a default checklist box (a list of strings with the default-sized checkboxes to the left of each), you can use the default <bpt id=\"p1\">[</bpt>CCheckListBox::DrawItem<ept id=\"p1\">](#cchecklistbox__drawitem)</ept> to draw the checklist box.","pos":[3816,4042],"source":"If your checklist box is a default checklist box (a list of strings with the default-sized checkboxes to the left of each), you can use the default [CCheckListBox::DrawItem](#cchecklistbox__drawitem) to draw the checklist box."},{"content":"Otherwise, you must override the <bpt id=\"p1\">[</bpt>CListBox::CompareItem<ept id=\"p1\">](../../mfc/reference/clistbox-class.md#clistbox__compareitem)</ept> function and the <bpt id=\"p2\">[</bpt>CCheckListBox::DrawItem<ept id=\"p2\">](#cchecklistbox__drawitem)</ept> and <bpt id=\"p3\">[</bpt>CCheckListBox::MeasureItem<ept id=\"p3\">](#cchecklistbox__measureitem)</ept> functions.","pos":[4043,4302],"source":" Otherwise, you must override the [CListBox::CompareItem](../../mfc/reference/clistbox-class.md#clistbox__compareitem) function and the [CCheckListBox::DrawItem](#cchecklistbox__drawitem) and [CCheckListBox::MeasureItem](#cchecklistbox__measureitem) functions."},{"content":"You can create a checklist box either from a dialog template or directly in your code.","pos":[4309,4395]},{"content":"Inheritance Hierarchy","pos":[4404,4425]},{"content":"CObject","pos":[4430,4437]},{"content":"CCmdTarget","pos":[4484,4494]},{"content":"CWnd","pos":[4544,4548]},{"content":"CListBox","pos":[4592,4600]},{"content":"Requirements","pos":[4671,4683]},{"pos":[4687,4707],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[4762,4790],"content":"CCheckListBox::CCheckListBox"},{"pos":[4794,4830],"content":"Constructs a <ph id=\"ph1\">`CCheckListBox`</ph> object.","source":"Constructs a `CCheckListBox` object."},{"content":"Remarks","pos":[4872,4879]},{"content":"You construct a <ph id=\"ph1\">`CCheckListBox`</ph> object in two steps.","pos":[4883,4935],"source":"You construct a `CCheckListBox` object in two steps."},{"content":"First define a class derived from <ph id=\"ph1\">`CCheckListBox`</ph>, then call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, which initializes the Windows checklist box and attaches it to the <ph id=\"ph2\">`CCheckListBox`</ph> object.","pos":[4936,5099],"source":" First define a class derived from `CCheckListBox`, then call **Create**, which initializes the Windows checklist box and attaches it to the `CCheckListBox` object."},{"content":"Example","pos":[5109,5116]},{"pos":[5131,5159],"content":"NVC_MFCControlLadenDialog#60"},{"pos":[5262,5283],"content":"CCheckListBox::Create"},{"pos":[5287,5367],"content":"Creates the Windows checklist box and attaches it to the <ph id=\"ph1\">`CCheckListBox`</ph> object.","source":"Creates the Windows checklist box and attaches it to the `CCheckListBox` object."},{"content":"Parameters","pos":[5497,5507]},{"content":"Specifies the style of the checklist box.","pos":[5524,5565]},{"content":"The style must be <bpt id=\"p1\">**</bpt>LBS_HASSTRINGS<ept id=\"p1\">**</ept> and either <bpt id=\"p2\">**</bpt>LBS_OWNERDRAWFIXED<ept id=\"p2\">**</ept> (all items in the list are the same height) or <bpt id=\"p3\">**</bpt>LBS_OWNERDRAWVARIABLE<ept id=\"p3\">**</ept> (items in the list are of varying heights).","pos":[5566,5753],"source":" The style must be **LBS_HASSTRINGS** and either **LBS_OWNERDRAWFIXED** (all items in the list are the same height) or **LBS_OWNERDRAWVARIABLE** (items in the list are of varying heights)."},{"content":"This style can be combined with other <bpt id=\"p1\">[</bpt>list-box styles<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> except <bpt id=\"p2\">**</bpt>LBS_USETABSTOPS<ept id=\"p2\">**</ept>.","pos":[5754,5877],"source":" This style can be combined with other [list-box styles](../../mfc/reference/list-box-styles.md) except **LBS_USETABSTOPS**."},{"content":"Specifies the checklist-box size and position.","pos":[5894,5940]},{"content":"Can be either a <bpt id=\"p1\">[</bpt>CRect<ept id=\"p1\">](../../atl-mfc-shared/reference/crect-class.md)</ept> object or a <bpt id=\"p2\">[</bpt>RECT<ept id=\"p2\">](../../mfc/reference/rect-structure1.md)</ept> structure.","pos":[5941,6081],"source":" Can be either a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or a [RECT](../../mfc/reference/rect-structure1.md) structure."},{"content":"Specifies the checklist box's parent window (usually a <ph id=\"ph1\">`CDialog`</ph> object).","pos":[6104,6177],"source":" Specifies the checklist box's parent window (usually a `CDialog` object)."},{"content":"It must not be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[6178,6202],"source":" It must not be **NULL**."},{"content":"Specifies the checklist box's control ID.","pos":[6218,6259]},{"content":"Return Value","pos":[6269,6281]},{"content":"Nonzero if successful; otherwise 0.","pos":[6285,6320]},{"content":"Remarks","pos":[6330,6337]},{"content":"You construct a <ph id=\"ph1\">`CCheckListBox`</ph> object in two steps.","pos":[6341,6393],"source":"You construct a `CCheckListBox` object in two steps."},{"content":"First, define a class derived from <bpt id=\"p1\">**</bpt>CcheckListBox<ept id=\"p1\">**</ept> and then call <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>, which initializes the Windows checklist box and attaches it to the <ph id=\"ph1\">`CCheckListBox`</ph>.","pos":[6394,6556],"source":" First, define a class derived from **CcheckListBox** and then call **Create**, which initializes the Windows checklist box and attaches it to the `CCheckListBox`."},{"content":"See <bpt id=\"p1\">[</bpt>CCheckListBox::CCheckListBox<ept id=\"p1\">](#cchecklistbox__cchecklistbox)</ept> for a sample.","pos":[6557,6636],"source":" See [CCheckListBox::CCheckListBox](#cchecklistbox__cchecklistbox) for a sample."},{"pos":[6643,7006],"content":"When <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> executes, Windows sends the <bpt id=\"p2\">[</bpt>WM_NCCREATE<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id=\"p3\">[</bpt>WM_CREATE<ept id=\"p3\">](../../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept>, <bpt id=\"p4\">[</bpt>WM_NCCALCSIZE<ept id=\"p4\">](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize)</ept>, and <bpt id=\"p5\">[</bpt>WM_GETMINMAXINFO<ept id=\"p5\">](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo)</ept> messages to the checklist-box control.","source":"When **Create** executes, Windows sends the [WM_NCCREATE](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [WM_CREATE](../../mfc/reference/cwnd-class.md#cwnd__oncreate), [WM_NCCALCSIZE](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), and [WM_GETMINMAXINFO](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) messages to the checklist-box control."},{"content":"These messages are handled by default by the <bpt id=\"p1\">[</bpt>OnNcCreate<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id=\"p2\">[</bpt>OnCreate<ept id=\"p2\">](../../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept>, <bpt id=\"p3\">[</bpt>OnNcCalcSize<ept id=\"p3\">](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize)</ept>, and <bpt id=\"p4\">[</bpt>OnGetMinMaxInfo<ept id=\"p4\">](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo)</ept> member functions in the <ph id=\"ph1\">`CWnd`</ph> base class.","pos":[7013,7377],"source":"These messages are handled by default by the [OnNcCreate](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [OnCreate](../../mfc/reference/cwnd-class.md#cwnd__oncreate), [OnNcCalcSize](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), and [OnGetMinMaxInfo](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) member functions in the `CWnd` base class."},{"content":"To extend the default message handling, add a message map to the your derived class and override the preceding message-handler member functions.","pos":[7378,7522]},{"content":"Override <ph id=\"ph1\">`OnCreate`</ph>, for example, to perform needed initialization for a new class.","pos":[7523,7606],"source":" Override `OnCreate`, for example, to perform needed initialization for a new class."},{"pos":[7613,7714],"content":"Apply the following <bpt id=\"p1\">[</bpt>window styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept> to a checklist-box control:","source":"Apply the following [window styles](../../mfc/reference/window-styles.md) to a checklist-box control:"},{"pos":[7722,7741],"content":"<bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> Always","source":"**WS_CHILD** Always"},{"pos":[7749,7771],"content":"<bpt id=\"p1\">**</bpt>WS_VISIBLE<ept id=\"p1\">**</ept> Usually","source":"**WS_VISIBLE** Usually"},{"pos":[7779,7801],"content":"<bpt id=\"p1\">**</bpt>WS_DISABLED<ept id=\"p1\">**</ept> Rarely","source":"**WS_DISABLED** Rarely"},{"pos":[7809,7852],"content":"<bpt id=\"p1\">**</bpt>WS_VSCROLL<ept id=\"p1\">**</ept> To add a vertical scroll bar","source":"**WS_VSCROLL** To add a vertical scroll bar"},{"pos":[7860,7905],"content":"<bpt id=\"p1\">**</bpt>WS_HSCROLL<ept id=\"p1\">**</ept> To add a horizontal scroll bar","source":"**WS_HSCROLL** To add a horizontal scroll bar"},{"pos":[7913,7943],"content":"<bpt id=\"p1\">**</bpt>WS_GROUP<ept id=\"p1\">**</ept> To group controls","source":"**WS_GROUP** To group controls"},{"pos":[7951,7998],"content":"<bpt id=\"p1\">**</bpt>WS_TABSTOP<ept id=\"p1\">**</ept> To allow tabbing to this control","source":"**WS_TABSTOP** To allow tabbing to this control"},{"pos":[8048,8071],"content":"CCheckListBox::DrawItem"},{"content":"Called by the framework when a visual aspect of an owner-drawn checklist box changes.","pos":[8075,8160]},{"content":"Parameters","pos":[8243,8253]},{"content":"A long pointer to a <bpt id=\"p1\">[</bpt>DRAWITEMSTRUCT<ept id=\"p1\">](../../mfc/reference/drawitemstruct-structure.md)</ept> structure that contains information about the type of drawing required.","pos":[8279,8436],"source":" A long pointer to a [DRAWITEMSTRUCT](../../mfc/reference/drawitemstruct-structure.md) structure that contains information about the type of drawing required."},{"content":"Remarks","pos":[8446,8453]},{"pos":[8457,8586],"content":"The <bpt id=\"p1\">**</bpt>itemAction<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>itemState<ept id=\"p2\">**</ept> members of the <ph id=\"ph1\">`DRAWITEMSTRUCT`</ph> structure define the drawing action that is to be performed.","source":"The **itemAction** and **itemState** members of the `DRAWITEMSTRUCT` structure define the drawing action that is to be performed."},{"content":"By default, this function draws a default checkbox list, consisting of a list of strings each with a default-sized checkbox to the left.","pos":[8593,8729]},{"content":"The checkbox list size is the one specified in <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cchecklistbox__create)</ept>.","pos":[8730,8810],"source":" The checkbox list size is the one specified in [Create](#cchecklistbox__create)."},{"content":"Override this member function to implement drawing of owner-draw checklist boxes that are not the default, such as checklist boxes with lists that aren't strings, with variable-height items, or with checkboxes that aren't on the left.","pos":[8817,9051]},{"content":"The application should restore all graphics device interface (GDI) objects selected for the display context supplied in <ph id=\"ph1\">`lpDrawItemStruct`</ph> before the termination of this member function.","pos":[9052,9238],"source":" The application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct` before the termination of this member function."},{"pos":[9245,9456],"content":"If checklist box items are not all the same height, the checklist box style (specified in <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>) must be <bpt id=\"p2\">**</bpt>LBS_OWNERVARIABLE<ept id=\"p2\">**</ept>, and you must override the <bpt id=\"p3\">[</bpt>MeasureItem<ept id=\"p3\">](#cchecklistbox__measureitem)</ept> function.","source":"If checklist box items are not all the same height, the checklist box style (specified in **Create**) must be **LBS_OWNERVARIABLE**, and you must override the [MeasureItem](#cchecklistbox__measureitem) function."},{"pos":[9504,9525],"content":"CCheckListBox::Enable"},{"content":"Call this function to enable or disable a checklist box item.","pos":[9529,9590]},{"content":"Parameters","pos":[9673,9683]},{"content":"Index of the checklist box item to be enabled.","pos":[9699,9745]},{"content":"Specifies whether the item is enabled or disabled.","pos":[9766,9816]},{"pos":[9866,9889],"content":"CCheckListBox::GetCheck"},{"content":"Retrieves the state of the specified check box.","pos":[9893,9940]},{"content":"Parameters","pos":[9991,10001]},{"content":"Zero-based index of a check box that is contained in the list box.","pos":[10017,10083]},{"content":"Return Value","pos":[10093,10105]},{"content":"The state of the specified check box.","pos":[10109,10146]},{"content":"The following table lists possible values.","pos":[10147,10189]},{"content":"Value","pos":[10196,10201]},{"content":"Description","pos":[10202,10213]},{"content":"The check box is checked.","pos":[10266,10291]},{"content":"The check box is not checked.","pos":[10312,10341]},{"content":"The check box state is indeterminate.","pos":[10366,10403]},{"pos":[10459,10487],"content":"CCheckListBox::GetCheckStyle"},{"content":"Call this function to get the checklist box's style.","pos":[10491,10543]},{"content":"Return Value","pos":[10590,10602]},{"content":"The style of the control's check boxes.","pos":[10606,10645]},{"content":"Remarks","pos":[10655,10662]},{"pos":[10666,10753],"content":"For information on possible styles, see <bpt id=\"p1\">[</bpt>SetCheckStyle<ept id=\"p1\">](#cchecklistbox__setcheckstyle)</ept>.","source":"For information on possible styles, see [SetCheckStyle](#cchecklistbox__setcheckstyle)."},{"pos":[10804,10828],"content":"CCheckListBox::IsEnabled"},{"content":"Call this function to determine whether an item is enabled.","pos":[10832,10891]},{"content":"Parameters","pos":[10944,10954]},{"content":"Index of the item.","pos":[10970,10988]},{"content":"Return Value","pos":[10998,11010]},{"content":"Nonzero if the item is enabled; otherwise 0.","pos":[11014,11058]},{"pos":[11111,11137],"content":"CCheckListBox::MeasureItem"},{"content":"Called by the framework when a checklist box with a nondefault style is created.","pos":[11141,11221]},{"content":"Parameters","pos":[11313,11323]},{"content":"A long pointer to a <bpt id=\"p1\">[</bpt>MEASUREITEMSTRUCT<ept id=\"p1\">](../../mfc/reference/measureitemstruct-structure.md)</ept> structure.","pos":[11352,11454],"source":" A long pointer to a [MEASUREITEMSTRUCT](../../mfc/reference/measureitemstruct-structure.md) structure."},{"content":"Remarks","pos":[11464,11471]},{"content":"By default, this member function does nothing.","pos":[11475,11521]},{"content":"Override this member function and fill in the <ph id=\"ph1\">`MEASUREITEMSTRUCT`</ph> structure to inform Windows of the dimensions of checklist-box items.","pos":[11522,11657],"source":" Override this member function and fill in the `MEASUREITEMSTRUCT` structure to inform Windows of the dimensions of checklist-box items."},{"content":"If the checklist box is created with the <bpt id=\"p1\">[</bpt>LBS_OWNERDRAWVARIABLE<ept id=\"p1\">](../../mfc/reference/list-box-styles.md)</ept> style, the framework calls this member function for each item in the list box.","pos":[11658,11841],"source":" If the checklist box is created with the [LBS_OWNERDRAWVARIABLE](../../mfc/reference/list-box-styles.md) style, the framework calls this member function for each item in the list box."},{"content":"Otherwise, this member is called only once.","pos":[11842,11885]},{"pos":[11945,11978],"content":"CCheckListBox::OnGetCheckPosition"},{"content":"The framework calls this function to get the position and size of the check box in an item.","pos":[11982,12073]},{"content":"Parameters","pos":[12179,12189]},{"content":"rectItem","pos":[12194,12202]},{"content":"The position and size of the list item.","pos":[12207,12246]},{"content":"The default position and size of an item's check box.","pos":[12271,12324]},{"content":"Return Value","pos":[12334,12346]},{"content":"The position and size of an item's check box.","pos":[12350,12395]},{"content":"Remarks","pos":[12405,12412]},{"content":"The default implementation only returns the default position and size of the check box ( <ph id=\"ph1\">`rectCheckBox`</ph>).","pos":[12416,12521],"source":"The default implementation only returns the default position and size of the check box ( `rectCheckBox`)."},{"content":"By default, a check box is aligned in the upper-left corner of an item and is the standard check box size.","pos":[12522,12628]},{"content":"There may be cases where you want the check boxes on the right, or want a larger or smaller check box.","pos":[12629,12731]},{"content":"In these cases, override <ph id=\"ph1\">`OnGetCheckPosition`</ph> to change the check box position and size within the item.","pos":[12732,12836],"source":" In these cases, override `OnGetCheckPosition` to change the check box position and size within the item."},{"pos":[12886,12909],"content":"CCheckListBox::SetCheck"},{"content":"Sets the state of the specified check box.","pos":[12913,12955]},{"content":"Parameters","pos":[13030,13040]},{"content":"Zero-based index of a check box that is contained in the list box.","pos":[13056,13122]},{"content":"The button state for the specified check box.","pos":[13141,13186]},{"content":"See the Remarks section for possible values.","pos":[13187,13231]},{"content":"Remarks","pos":[13241,13248]},{"pos":[13252,13321],"content":"The following table lists possible values for the <ph id=\"ph1\">`nCheck`</ph> parameter.","source":"The following table lists possible values for the `nCheck` parameter."},{"content":"Value","pos":[13328,13333]},{"content":"Description","pos":[13334,13345]},{"content":"BST_CHECKED","pos":[13386,13397]},{"content":"Select the specified check box.","pos":[13400,13431]},{"content":"BST_UNCHECKED","pos":[13438,13451]},{"content":"Clear the specified check box.","pos":[13454,13484]},{"content":"BST_INDETERMINATE","pos":[13491,13508]},{"content":"Set the specified check box state to indeterminate.","pos":[13511,13562]},{"content":"This state is only available if the check box style is <ph id=\"ph1\">`BS_AUTO3STATE`</ph> or <ph id=\"ph2\">`BS_3STATE`</ph>.","pos":[13575,13661],"source":" This state is only available if the check box style is `BS_AUTO3STATE` or `BS_3STATE`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Button Styles<ept id=\"p1\">](../../mfc/reference/button-styles.md)</ept>.","pos":[13662,13742],"source":" For more information, see [Button Styles](../../mfc/reference/button-styles.md)."},{"pos":[13798,13826],"content":"CCheckListBox::SetCheckStyle"},{"content":"Call this function to set the style of check boxes in the checklist box.","pos":[13830,13902]},{"content":"Parameters","pos":[13960,13970]},{"content":"Determines the style of check boxes in the checklist box.","pos":[13986,14043]},{"content":"Remarks","pos":[14053,14060]},{"content":"Valid styles are:","pos":[14064,14081]},{"content":"BS_CHECKBOX","pos":[14091,14102]},{"content":"BS_AUTOCHECKBOX","pos":[14114,14129]},{"content":"BS_AUTO3STATE","pos":[14141,14154]},{"content":"BS_3STATE","pos":[14166,14175]},{"pos":[14184,14275],"content":"For information on these styles, see <bpt id=\"p1\">[</bpt>Button Styles<ept id=\"p1\">](../../mfc/reference/button-styles.md)</ept>.","source":"For information on these styles, see [Button Styles](../../mfc/reference/button-styles.md)."},{"content":"See Also","pos":[14284,14292]},{"content":"MFC Sample TSTCON","pos":[14297,14314]},{"content":"CListBox Class","pos":[14350,14364]},{"content":"Hierarchy Chart","pos":[14410,14425]},{"content":"CListBox Class","pos":[14462,14476]}],"content":"---\ntitle: \"CCheckListBox Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CCheckListBox\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CCheckListBox class\"\n  - \"checklist boxes\"\nms.assetid: 1dd78438-00e8-441c-b36f-9c4f9ac0d019\ncaps.latest.revision: 26\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CCheckListBox Class\nProvides the functionality of a Windows checklist box.  \n  \n## Syntax  \n  \n```  \nclass CCheckListBox : public CListBox  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CCheckListBox::CCheckListBox](#cchecklistbox__cchecklistbox)|Constructs a `CCheckListBox` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CCheckListBox::Create](#cchecklistbox__create)|Creates the Windows checklist box and attaches it to the `CCheckListBox` object.|  \n|[CCheckListBox::DrawItem](#cchecklistbox__drawitem)|Called by the framework when a visual aspect of an owner-draw list box changes.|  \n|[CCheckListBox::Enable](#cchecklistbox__enable)|Enables or disables a checklist box item.|  \n|[CCheckListBox::GetCheck](#cchecklistbox__getcheck)|Gets the state of an item's check box.|  \n|[CCheckListBox::GetCheckStyle](#cchecklistbox__getcheckstyle)|Gets the style of the control's check boxes.|  \n|[CCheckListBox::IsEnabled](#cchecklistbox__isenabled)|Determines whether an item is enabled.|  \n|[CCheckListBox::MeasureItem](#cchecklistbox__measureitem)|Called by the framework when a list box with an owner-draw style is created.|  \n|[CCheckListBox::OnGetCheckPosition](#cchecklistbox__ongetcheckposition)|Called by the framework to get the position of an item's check box.|  \n|[CCheckListBox::SetCheck](#cchecklistbox__setcheck)|Sets the state of an item's check box.|  \n|[CCheckListBox::SetCheckStyle](#cchecklistbox__setcheckstyle)|Sets the style of the control's check boxes.|  \n  \n## Remarks  \n A \"checklist box\" displays a list of items, such as filenames. Each item in the list has a check box next to it that the user can check or clear.  \n  \n `CCheckListBox` is only for owner-drawn controls because the list contains more than text strings. At its simplest, a checklist box contains text strings and check boxes, but you do not need to have text at all. For example, you could have a list of small bitmaps with a check box next to each item.  \n  \n To create your own checklist box, you must derive your own class from `CCheckListBox`. To derive your own class, write a constructor for the derived class, then call **Create**.  \n  \n If you want to handle Windows notification messages sent by a list box to its parent (usually a class derived from [CDialog](../../mfc/reference/cdialog-class.md)), add a message-map entry and message-handler member function to the parent class for each message.  \n  \n Each message-map entry takes the following form:  \n  \n **ON_**Notification **(**`id`, `memberFxn`**)**  \n  \n where `id` specifies the child window ID of the control sending the notification and `memberFxn` is the name of the parent member function you have written to handle the notification.  \n  \n The parent's function prototype is as follows:  \n  \n **afx_msg** `void` `memberFxn` **( );**  \n  \n There is only one message-map entry that pertains specifically to **CCheckListBox** (but see also the message-map entries for [CListBox](../../mfc/reference/clistbox-class.md)):  \n  \n- **ON_CLBN_CHKCHANGE** The user has changed the state of an item's checkbox.  \n  \n If your checklist box is a default checklist box (a list of strings with the default-sized checkboxes to the left of each), you can use the default [CCheckListBox::DrawItem](#cchecklistbox__drawitem) to draw the checklist box. Otherwise, you must override the [CListBox::CompareItem](../../mfc/reference/clistbox-class.md#clistbox__compareitem) function and the [CCheckListBox::DrawItem](#cchecklistbox__drawitem) and [CCheckListBox::MeasureItem](#cchecklistbox__measureitem) functions.  \n  \n You can create a checklist box either from a dialog template or directly in your code.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CListBox](../../mfc/reference/clistbox-class.md)  \n  \n `CCheckListBox`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cchecklistbox__cchecklistbox\"></a>  CCheckListBox::CCheckListBox  \n Constructs a `CCheckListBox` object.  \n  \n```  \nCCheckListBox();\n```  \n  \n### Remarks  \n You construct a `CCheckListBox` object in two steps. First define a class derived from `CCheckListBox`, then call **Create**, which initializes the Windows checklist box and attaches it to the `CCheckListBox` object.  \n  \n### Example  \n [!code-cpp[NVC_MFCControlLadenDialog#60](../../mfc/codesnippet/cpp/cchecklistbox-class_1.cpp)]  \n  \n##  <a name=\"cchecklistbox__create\"></a>  CCheckListBox::Create  \n Creates the Windows checklist box and attaches it to the `CCheckListBox` object.  \n  \n```  \nvirtual BOOL Create(\n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `dwStyle`  \n Specifies the style of the checklist box. The style must be **LBS_HASSTRINGS** and either **LBS_OWNERDRAWFIXED** (all items in the list are the same height) or **LBS_OWNERDRAWVARIABLE** (items in the list are of varying heights). This style can be combined with other [list-box styles](../../mfc/reference/list-box-styles.md) except **LBS_USETABSTOPS**.  \n  \n `rect`  \n Specifies the checklist-box size and position. Can be either a [CRect](../../atl-mfc-shared/reference/crect-class.md) object or a [RECT](../../mfc/reference/rect-structure1.md) structure.  \n  \n `pParentWnd`  \n Specifies the checklist box's parent window (usually a `CDialog` object). It must not be **NULL**.  \n  \n `nID`  \n Specifies the checklist box's control ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n You construct a `CCheckListBox` object in two steps. First, define a class derived from **CcheckListBox** and then call **Create**, which initializes the Windows checklist box and attaches it to the `CCheckListBox`. See [CCheckListBox::CCheckListBox](#cchecklistbox__cchecklistbox) for a sample.  \n  \n When **Create** executes, Windows sends the [WM_NCCREATE](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [WM_CREATE](../../mfc/reference/cwnd-class.md#cwnd__oncreate), [WM_NCCALCSIZE](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), and [WM_GETMINMAXINFO](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) messages to the checklist-box control.  \n  \n These messages are handled by default by the [OnNcCreate](../../mfc/reference/cwnd-class.md#cwnd__onnccreate), [OnCreate](../../mfc/reference/cwnd-class.md#cwnd__oncreate), [OnNcCalcSize](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize), and [OnGetMinMaxInfo](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo) member functions in the `CWnd` base class. To extend the default message handling, add a message map to the your derived class and override the preceding message-handler member functions. Override `OnCreate`, for example, to perform needed initialization for a new class.  \n  \n Apply the following [window styles](../../mfc/reference/window-styles.md) to a checklist-box control:  \n  \n- **WS_CHILD** Always  \n  \n- **WS_VISIBLE** Usually  \n  \n- **WS_DISABLED** Rarely  \n  \n- **WS_VSCROLL** To add a vertical scroll bar  \n  \n- **WS_HSCROLL** To add a horizontal scroll bar  \n  \n- **WS_GROUP** To group controls  \n  \n- **WS_TABSTOP** To allow tabbing to this control  \n  \n##  <a name=\"cchecklistbox__drawitem\"></a>  CCheckListBox::DrawItem  \n Called by the framework when a visual aspect of an owner-drawn checklist box changes.  \n  \n```  \nvirtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);\n```  \n  \n### Parameters  \n `lpDrawItemStruct`  \n A long pointer to a [DRAWITEMSTRUCT](../../mfc/reference/drawitemstruct-structure.md) structure that contains information about the type of drawing required.  \n  \n### Remarks  \n The **itemAction** and **itemState** members of the `DRAWITEMSTRUCT` structure define the drawing action that is to be performed.  \n  \n By default, this function draws a default checkbox list, consisting of a list of strings each with a default-sized checkbox to the left. The checkbox list size is the one specified in [Create](#cchecklistbox__create).  \n  \n Override this member function to implement drawing of owner-draw checklist boxes that are not the default, such as checklist boxes with lists that aren't strings, with variable-height items, or with checkboxes that aren't on the left. The application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct` before the termination of this member function.  \n  \n If checklist box items are not all the same height, the checklist box style (specified in **Create**) must be **LBS_OWNERVARIABLE**, and you must override the [MeasureItem](#cchecklistbox__measureitem) function.  \n  \n##  <a name=\"cchecklistbox__enable\"></a>  CCheckListBox::Enable  \n Call this function to enable or disable a checklist box item.  \n  \n```  \nvoid Enable(\n    int nIndex,  \n    BOOL bEnabled = TRUE);\n```  \n  \n### Parameters  \n `nIndex`  \n Index of the checklist box item to be enabled.  \n  \n `bEnabled`  \n Specifies whether the item is enabled or disabled.  \n  \n##  <a name=\"cchecklistbox__getcheck\"></a>  CCheckListBox::GetCheck  \n Retrieves the state of the specified check box.  \n  \n```  \nint GetCheck(int nIndex);\n```  \n  \n### Parameters  \n `nIndex`  \n Zero-based index of a check box that is contained in the list box.  \n  \n### Return Value  \n The state of the specified check box. The following table lists possible values.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`BST_CHECKED`|The check box is checked.|  \n|`BST_UNCHECKED`|The check box is not checked.|  \n|`BST_INDETERMINATE`|The check box state is indeterminate.|  \n  \n##  <a name=\"cchecklistbox__getcheckstyle\"></a>  CCheckListBox::GetCheckStyle  \n Call this function to get the checklist box's style.  \n  \n```  \nUINT GetCheckStyle();\n```  \n  \n### Return Value  \n The style of the control's check boxes.  \n  \n### Remarks  \n For information on possible styles, see [SetCheckStyle](#cchecklistbox__setcheckstyle).  \n  \n##  <a name=\"cchecklistbox__isenabled\"></a>  CCheckListBox::IsEnabled  \n Call this function to determine whether an item is enabled.  \n  \n```  \nBOOL IsEnabled(int nIndex);\n```  \n  \n### Parameters  \n `nIndex`  \n Index of the item.  \n  \n### Return Value  \n Nonzero if the item is enabled; otherwise 0.  \n  \n##  <a name=\"cchecklistbox__measureitem\"></a>  CCheckListBox::MeasureItem  \n Called by the framework when a checklist box with a nondefault style is created.  \n  \n```  \nvirtual void MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);\n```  \n  \n### Parameters  \n `lpMeasureItemStruct`  \n A long pointer to a [MEASUREITEMSTRUCT](../../mfc/reference/measureitemstruct-structure.md) structure.  \n  \n### Remarks  \n By default, this member function does nothing. Override this member function and fill in the `MEASUREITEMSTRUCT` structure to inform Windows of the dimensions of checklist-box items. If the checklist box is created with the [LBS_OWNERDRAWVARIABLE](../../mfc/reference/list-box-styles.md) style, the framework calls this member function for each item in the list box. Otherwise, this member is called only once.  \n  \n##  <a name=\"cchecklistbox__ongetcheckposition\"></a>  CCheckListBox::OnGetCheckPosition  \n The framework calls this function to get the position and size of the check box in an item.  \n  \n```  \nvirtual CRect OnGetCheckPosition(\n    CRect rectItem,  \n    CRect rectCheckBox);\n```  \n  \n### Parameters  \n *rectItem*  \n The position and size of the list item.  \n  \n `rectCheckBox`  \n The default position and size of an item's check box.  \n  \n### Return Value  \n The position and size of an item's check box.  \n  \n### Remarks  \n The default implementation only returns the default position and size of the check box ( `rectCheckBox`). By default, a check box is aligned in the upper-left corner of an item and is the standard check box size. There may be cases where you want the check boxes on the right, or want a larger or smaller check box. In these cases, override `OnGetCheckPosition` to change the check box position and size within the item.  \n  \n##  <a name=\"cchecklistbox__setcheck\"></a>  CCheckListBox::SetCheck  \n Sets the state of the specified check box.  \n  \n```  \nvoid SetCheck(\n    int nIndex,  \n    int nCheck);\n```  \n  \n### Parameters  \n `nIndex`  \n Zero-based index of a check box that is contained in the list box.  \n  \n `nCheck`  \n The button state for the specified check box. See the Remarks section for possible values.  \n  \n### Remarks  \n The following table lists possible values for the `nCheck` parameter.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|**BST_CHECKED**|Select the specified check box.|  \n|**BST_UNCHECKED**|Clear the specified check box.|  \n|**BST_INDETERMINATE**|Set the specified check box state to indeterminate.<br /><br /> This state is only available if the check box style is `BS_AUTO3STATE` or `BS_3STATE`. For more information, see [Button Styles](../../mfc/reference/button-styles.md).|  \n  \n##  <a name=\"cchecklistbox__setcheckstyle\"></a>  CCheckListBox::SetCheckStyle  \n Call this function to set the style of check boxes in the checklist box.  \n  \n```  \nvoid SetCheckStyle(UINT nStyle);\n```  \n  \n### Parameters  \n `nStyle`  \n Determines the style of check boxes in the checklist box.  \n  \n### Remarks  \n Valid styles are:  \n  \n- **BS_CHECKBOX**  \n  \n- **BS_AUTOCHECKBOX**  \n  \n- **BS_AUTO3STATE**  \n  \n- **BS_3STATE**  \n  \n For information on these styles, see [Button Styles](../../mfc/reference/button-styles.md).  \n  \n## See Also  \n [MFC Sample TSTCON](../../visual-cpp-samples.md)   \n [CListBox Class](../../mfc/reference/clistbox-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CListBox Class](../../mfc/reference/clistbox-class.md)\n"}