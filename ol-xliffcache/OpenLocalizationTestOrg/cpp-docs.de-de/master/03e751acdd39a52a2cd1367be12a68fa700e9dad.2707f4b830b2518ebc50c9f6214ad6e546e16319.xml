{"nodes":[{"pos":[12,33],"content":"_eof | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_eof | Microsoft Docs","pos":[0,21]}]},{"content":"_eof","pos":[1018,1022]},{"content":"Tests for end of file (EOF).","pos":[1023,1051]},{"content":"Syntax","pos":[1060,1066]},{"content":"Parameters","pos":[1123,1133]},{"content":"File descriptor referring to the open file.","pos":[1145,1188]},{"content":"Return Value","pos":[1197,1209]},{"content":"returns 1 if the current position is end of file, or 0 if it is not.","pos":[1220,1288]},{"content":"A return value of –1 indicates an error; in this case, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[1289,1474],"source":" A return value of –1 indicates an error; in this case, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EBADF`</ph>, which indicates an invalid file descriptor.","pos":[1475,1582],"source":" If execution is allowed to continue, `errno` is set to `EBADF`, which indicates an invalid file descriptor."},{"content":"Remarks","pos":[1591,1598]},{"pos":[1602,1699],"content":"The <ph id=\"ph1\">`_eof`</ph> function determines whether the end of the file associated with <ph id=\"ph2\">`fd`</ph> has been reached.","source":"The `_eof` function determines whether the end of the file associated with `fd` has been reached."},{"content":"Requirements","pos":[1708,1720]},{"content":"Function","pos":[1727,1735]},{"content":"Required header","pos":[1736,1751]},{"content":"Optional header","pos":[1752,1767]},{"content":"io.h&gt;","pos":[1844,1849],"source":"io.h>"},{"content":"errno.h&gt;","pos":[1852,1860],"source":"errno.h>"},{"pos":[1868,1986],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[1995,2002]},{"content":"Input: crt_eof.txt","pos":[2882,2900]},{"content":"Output","pos":[2957,2963]},{"content":".NET Framework Equivalent","pos":[3015,3040]},{"content":"Not applicable.","pos":[3044,3059]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3060,3107],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[3108,3233],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[3242,3250]},{"content":"Error Handling","pos":[3255,3269]},{"content":"Low-Level I/O","pos":[3323,3336]},{"content":"clearerr","pos":[3385,3393]},{"content":"feof","pos":[3447,3451]},{"content":"ferror","pos":[3501,3507]},{"content":"perror, _wperror","pos":[3559,3575]}],"content":"---\ntitle: \"_eof | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_eof\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-stdio-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_eof\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"eof function\"\n  - \"end of file, testing for\"\n  - \"_eof function\"\n  - \"files [C++], end of\"\n  - \"testing, for end-of-file\"\n  - \"end of file\"\nms.assetid: 265703f4-d07e-4005-abf3-b1d0cdd9e0b0\ncaps.latest.revision: 14\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _eof\nTests for end of file (EOF).  \n  \n## Syntax  \n  \n```  \nint _eof(   \n   int fd   \n);  \n```  \n  \n#### Parameters  \n `fd`  \n File descriptor referring to the open file.  \n  \n## Return Value  \n `_eof` returns 1 if the current position is end of file, or 0 if it is not. A return value of –1 indicates an error; in this case, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, `errno` is set to `EBADF`, which indicates an invalid file descriptor.  \n  \n## Remarks  \n The `_eof` function determines whether the end of the file associated with `fd` has been reached.  \n  \n## Requirements  \n  \n|Function|Required header|Optional header|  \n|--------------|---------------------|---------------------|  \n|`_eof`|\\<io.h>|\\<errno.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_eof.c  \n// This program reads data from a file  \n// ten bytes at a time until the end of the  \n// file is reached or an error is encountered.  \n//  \n#include <io.h>  \n#include <fcntl.h>  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <share.h>  \n  \nint main( void )  \n{  \n   int  fh, count, total = 0;  \n   char buf[10];  \n   if( _sopen_s( &fh, \"crt_eof.txt\", _O_RDONLY, _SH_DENYNO, 0 ) )  \n   {  \n        perror( \"Open failed\");  \n        exit( 1 );  \n   }  \n   // Cycle until end of file reached:   \n   while( !_eof( fh ) )  \n   {  \n      // Attempt to read in 10 bytes:   \n      if( (count = _read( fh, buf, 10 )) == -1 )  \n      {  \n         perror( \"Read error\" );  \n         break;  \n      }  \n      // Total actual bytes read   \n      total += count;  \n   }  \n   printf( \"Number of bytes read = %d\\n\", total );  \n   _close( fh );  \n}  \n```  \n  \n## Input: crt_eof.txt  \n  \n```  \nThis file contains some text.  \n```  \n  \n### Output  \n  \n```  \nNumber of bytes read = 29  \n```  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Error Handling](../../c-runtime-library/error-handling-crt.md)   \n [Low-Level I/O](../../c-runtime-library/low-level-i-o.md)   \n [clearerr](../../c-runtime-library/reference/clearerr.md)   \n [feof](../../c-runtime-library/reference/feof.md)   \n [ferror](../../c-runtime-library/reference/ferror.md)   \n [perror, _wperror](../../c-runtime-library/reference/perror-wperror.md)"}