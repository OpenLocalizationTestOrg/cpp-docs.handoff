{"nodes":[{"pos":[12,51],"content":"do-while Statement (C) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"do-while Statement (C) | Microsoft Docs","pos":[0,39]}]},{"content":"do-while Statement (C)","pos":[623,645]},{"pos":[646,764],"content":"The <ph id=\"ph1\">`do-while`</ph> statement lets you repeat a statement or compound statement until a specified expression becomes false.","source":"The `do-while` statement lets you repeat a statement or compound statement until a specified expression becomes false."},{"content":"Syntax","pos":[773,779]},{"content":"<bpt id=\"p1\">*</bpt>iteration-statement<ept id=\"p1\">*</ept>:","pos":[783,805],"source":"*iteration-statement*:"},{"content":"<bpt id=\"p1\"> **</bpt>do<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>statement<ept id=\"p2\">*</ept>  <bpt id=\"p3\">**</bpt>while (<ept id=\"p3\">**</ept>  <bpt id=\"p4\">*</bpt>expression<ept id=\"p4\">*</ept>  <bpt id=\"p5\">**</bpt>) ;<ept id=\"p5\">**</ept>","pos":[808,864],"source":" **do**  *statement*  **while (**  *expression*  **) ;**"},{"content":"The <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> in a <ph id=\"ph1\">`do-while`</ph> statement is evaluated after the body of the loop is executed.","pos":[871,966],"source":"The *expression* in a `do-while` statement is evaluated after the body of the loop is executed."},{"content":"Therefore, the body of the loop is always executed at least once.","pos":[967,1032]},{"content":"The <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> must have arithmetic or pointer type.","pos":[1039,1093],"source":"The *expression* must have arithmetic or pointer type."},{"content":"Execution proceeds as follows:","pos":[1094,1124]},{"content":"The statement body is executed.","pos":[1134,1165]},{"content":"Next, <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> is evaluated.","pos":[1175,1207],"source":"Next, *expression* is evaluated."},{"content":"If <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> is false, the <ph id=\"ph1\">`do-while`</ph> statement terminates and control passes to the next statement in the program.","pos":[1208,1326],"source":" If *expression* is false, the `do-while` statement terminates and control passes to the next statement in the program."},{"content":"If <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> is true (nonzero), the process is repeated, beginning with step 1.","pos":[1327,1409],"source":" If *expression* is true (nonzero), the process is repeated, beginning with step 1."},{"pos":[1416,1546],"content":"The <ph id=\"ph1\">`do-while`</ph> statement can also terminate when a <bpt id=\"p1\">**</bpt>break<ept id=\"p1\">**</ept>, <ph id=\"ph2\">`goto`</ph>, or <ph id=\"ph3\">`return`</ph> statement is executed within the statement body.","source":"The `do-while` statement can also terminate when a **break**, `goto`, or `return` statement is executed within the statement body."},{"pos":[1553,1600],"content":"This is an example of the <ph id=\"ph1\">`do-while`</ph> statement:","source":"This is an example of the `do-while` statement:"},{"content":"In this <ph id=\"ph1\">`do-while`</ph> statement, the two statements <ph id=\"ph2\">`y = f( x );`</ph> and <ph id=\"ph3\">`x--;`</ph> are executed, regardless of the initial value of <ph id=\"ph4\">`x`</ph>.","pos":[1682,1809],"source":"In this `do-while` statement, the two statements `y = f( x );` and `x--;` are executed, regardless of the initial value of `x`."},{"content":"Then <ph id=\"ph1\">`x &gt; 0`</ph> is evaluated.","pos":[1810,1836],"source":" Then `x > 0` is evaluated."},{"content":"If <ph id=\"ph1\">`x`</ph> is greater than 0, the statement body is executed again and <ph id=\"ph2\">`x &gt; 0`</ph> is reevaluated.","pos":[1837,1927],"source":" If `x` is greater than 0, the statement body is executed again and `x > 0` is reevaluated."},{"content":"The statement body is executed repeatedly as long as <ph id=\"ph1\">`x`</ph> remains greater than 0.","pos":[1928,2008],"source":" The statement body is executed repeatedly as long as `x` remains greater than 0."},{"content":"Execution of the <ph id=\"ph1\">`do-while`</ph> statement terminates when <ph id=\"ph2\">`x`</ph> becomes 0 or negative.","pos":[2009,2089],"source":" Execution of the `do-while` statement terminates when `x` becomes 0 or negative."},{"content":"The body of the loop is executed at least once.","pos":[2090,2137]},{"content":"See Also","pos":[2146,2154]},{"content":"do-while Statement (C++)","pos":[2159,2183]}],"content":"---\ntitle: \"do-while Statement (C) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"do\"\n  - \"while\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"do-while keyword [C]\"\nms.assetid: f2ac20a6-10c7-4a08-b5e3-c3b3639dbeaf\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# do-while Statement (C)\nThe `do-while` statement lets you repeat a statement or compound statement until a specified expression becomes false.  \n  \n## Syntax  \n *iteration-statement*:  \n **do**  *statement*  **while (**  *expression*  **) ;**  \n  \n The *expression* in a `do-while` statement is evaluated after the body of the loop is executed. Therefore, the body of the loop is always executed at least once.  \n  \n The *expression* must have arithmetic or pointer type. Execution proceeds as follows:  \n  \n1.  The statement body is executed.  \n  \n2.  Next, *expression* is evaluated. If *expression* is false, the `do-while` statement terminates and control passes to the next statement in the program. If *expression* is true (nonzero), the process is repeated, beginning with step 1.  \n  \n The `do-while` statement can also terminate when a **break**, `goto`, or `return` statement is executed within the statement body.  \n  \n This is an example of the `do-while` statement:  \n  \n```  \ndo   \n{  \n    y = f( x );  \n    x--;  \n} while ( x > 0 );  \n```  \n  \n In this `do-while` statement, the two statements `y = f( x );` and `x--;` are executed, regardless of the initial value of `x`. Then `x > 0` is evaluated. If `x` is greater than 0, the statement body is executed again and `x > 0` is reevaluated. The statement body is executed repeatedly as long as `x` remains greater than 0. Execution of the `do-while` statement terminates when `x` becomes 0 or negative. The body of the loop is executed at least once.  \n  \n## See Also  \n [do-while Statement (C++)](../cpp/do-while-statement-cpp.md)"}