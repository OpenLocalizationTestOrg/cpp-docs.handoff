<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c2a2f8c2c2b55e3c14db9e44a4b05041c0ecfc9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\istream-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">649b2801bc37d59cb005502ca646e2fe938b7ac7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88ef8a65d288e19020bcbdbc4b724fcb31aaa4da</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>istream<ph id="ph1">&amp;gt;</ph> operators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>istream<ph id="ph1">&amp;gt;</ph> operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Extracts characters and strings from the stream.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A character.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A stream.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A string.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The stream</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`basic_istream`</ph> class also defines several extraction operators.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>basic_istream::operator&gt;&gt;<ept id="p1">](../standard-library/basic-istream-class.md#basic_istream__operator_gt__gt_)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The template function:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>extracts up to <bpt id="p1">*</bpt>N<ept id="p1">*</ept> - 1 elements and stores them in the array starting at _ <bpt id="p2">*</bpt>Str<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Istr`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>width<ept id="p1">](../standard-library/ios-base-class.md#ios_base__width)</ept> is greater than zero, <bpt id="p2">*</bpt>N<ept id="p2">*</ept> is <ph id="ph1">`Istr`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>width<ept id="p1">**</ept>; otherwise, it is the size of the largest array of <bpt id="p2">**</bpt>Elem<ept id="p2">**</ept> that can be declared.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The function always stores the value <bpt id="p1">**</bpt>Elem()<ept id="p1">**</ept> after any extracted elements it stores.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Extraction stops early on end of file, on a character with value <bpt id="p1">**</bpt>Elem<ept id="p1">**</ept>(0) (which is not extracted), or on any element (which is not extracted) that would be discarded by <bpt id="p2">[</bpt>ws<ept id="p2">](../standard-library/istream-functions.md#ws)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the function extracts no elements, it calls <ph id="ph1">`Istr`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>setstate<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id="p2">**</bpt>failbit<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In any case, it calls <ph id="ph1">`Istr`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>width<ept id="p1">**</ept>(0) and returns <ph id="ph1">`Istr`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept> The null-terminated string being extracted from the input stream must not exceed the size of the destination buffer <ph id="ph1">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Avoiding Buffer Overruns<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The template function:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>extracts an element, if it is possible, and stores it in <ph id="ph1">`Ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Otherwise, it calls <bpt id="p1">**</bpt>is<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>setstate<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id="p2">**</bpt>failbit<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In any case, it returns <ph id="ph1">`Istr`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The template function:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>returns <ph id="ph1">`Istr`</ph> &gt;&gt; ( <ph id="ph2">`char`</ph><bpt id="p1">**</bpt><ph id="ph3">\*</ph><ept id="p1">**</ept>) <ph id="ph4">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The template function:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>returns <ph id="ph1">`Istr`</ph> &gt;&gt; ( <bpt id="p1">**</bpt>char&amp;<ept id="p1">**</ept>) <ph id="ph2">`Ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The template function:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>returns <ph id="ph1">`Istr`</ph> &gt;&gt; ( <bpt id="p1">**</bpt>char <ph id="ph2">\*</ph><ept id="p1">**</ept>) <ph id="ph3">` str`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The template function:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>returns <ph id="ph1">`Istr`</ph> &gt;&gt; ( <bpt id="p1">**</bpt>char&amp;<ept id="p1">**</ept>) <ph id="ph2">`Ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The template function:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>returns <ph id="ph1">`Istr`</ph> <ph id="ph2">`&gt;&gt;`</ph> <ph id="ph3">` val`</ph> (and converts an <ph id="ph4">`rvalue reference`</ph> to <ph id="ph5">`Istr`</ph> to an <ph id="ph6">`lvalue`</ph> in the process).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>istream&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>