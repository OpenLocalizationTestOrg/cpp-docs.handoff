{"nodes":[{"pos":[12,47],"content":"CRectTracker Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CRectTracker Class | Microsoft Docs","pos":[0,35]}]},{"content":"CRectTracker Class","pos":[654,672]},{"content":"Allows an item to be displayed, moved, and resized in different fashions.","pos":[673,746]},{"content":"Syntax","pos":[755,761]},{"content":"Members","pos":[806,813]},{"content":"Public Constructors","pos":[823,842]},{"content":"Name","pos":[849,853]},{"content":"Description","pos":[854,865]},{"content":"CRectTracker::CRectTracker","pos":[904,930]},{"pos":[961,996],"content":"Constructs a <ph id=\"ph1\">`CRectTracker`</ph> object.","source":"Constructs a `CRectTracker` object."},{"content":"Public Methods","pos":[1007,1021]},{"content":"Name","pos":[1028,1032]},{"content":"Description","pos":[1033,1044]},{"content":"CRectTracker::AdjustRect","pos":[1083,1107]},{"content":"Called when the rectangle is resized.","pos":[1136,1173]},{"content":"CRectTracker::Draw","pos":[1179,1197]},{"content":"Renders the rectangle.","pos":[1220,1242]},{"content":"CRectTracker::DrawTrackerRect","pos":[1248,1277]},{"pos":[1311,1369],"content":"Called when drawing the border of a <ph id=\"ph1\">`CRectTracker`</ph> object.","source":"Called when drawing the border of a `CRectTracker` object."},{"content":"CRectTracker::GetHandleMask","pos":[1375,1402]},{"pos":[1434,1498],"content":"Called to get the mask of a <ph id=\"ph1\">`CRectTracker`</ph>item's resize handles.","source":"Called to get the mask of a `CRectTracker`item's resize handles."},{"content":"CRectTracker::GetTrueRect","pos":[1504,1529]},{"content":"Returns width and height of rectangle, including resize handles.","pos":[1559,1623]},{"content":"CRectTracker::HitTest","pos":[1629,1650]},{"pos":[1676,1756],"content":"Returns the current position of the cursor related to the <ph id=\"ph1\">`CRectTracker`</ph> object.","source":"Returns the current position of the cursor related to the `CRectTracker` object."},{"content":"CRectTracker::NormalizeHit","pos":[1762,1788]},{"content":"Normalizes a hit-test code.","pos":[1819,1846]},{"content":"CRectTracker::OnChangedRect","pos":[1852,1879]},{"content":"Called when the rectangle has been resized or moved.","pos":[1911,1963]},{"content":"CRectTracker::SetCursor","pos":[1969,1992]},{"content":"Sets the cursor, depending on its position over the rectangle.","pos":[2020,2082]},{"content":"CRectTracker::Track","pos":[2088,2107]},{"content":"Allows the user to manipulate the rectangle.","pos":[2131,2175]},{"content":"CRectTracker::TrackRubberBand","pos":[2181,2210]},{"content":"Allows the user to \"rubber-band\" the selection.","pos":[2244,2291]},{"content":"Public Data Members","pos":[2302,2321]},{"content":"Name","pos":[2328,2332]},{"content":"Description","pos":[2333,2344]},{"content":"CRectTracker::m_nHandleSize","pos":[2383,2410]},{"content":"Determines size of resize handles.","pos":[2442,2476]},{"content":"CRectTracker::m_nStyle","pos":[2482,2504]},{"content":"Current style(s) of the tracker.","pos":[2531,2563]},{"content":"CRectTracker::m_rect","pos":[2569,2589]},{"content":"Current position (in pixels) of the rectangle.","pos":[2614,2660]},{"content":"CRectTracker::m_sizeMin","pos":[2666,2689]},{"content":"Determines minimum rectangle width and height.","pos":[2717,2763]},{"content":"Remarks","pos":[2773,2780]},{"pos":[2799,2826],"content":"does not have a base class."},{"content":"Although the <ph id=\"ph1\">`CRectTracker`</ph> class is designed to allow the user to interact with OLE items by using a graphical interface, its use is not restricted to OLE-enabled applications.","pos":[2833,3010],"source":"Although the `CRectTracker` class is designed to allow the user to interact with OLE items by using a graphical interface, its use is not restricted to OLE-enabled applications."},{"content":"It can be used anywhere such a user interface is required.","pos":[3011,3069]},{"content":"borders can be solid or dotted lines.","pos":[3091,3128]},{"content":"The item can be given a hatched border or overlaid with a hatched pattern to indicate different states of the item.","pos":[3129,3244]},{"content":"You can place eight resize handles on either the outside or the inside border of the item.","pos":[3245,3335]},{"content":"(For an explanation of the resize handles, see <bpt id=\"p1\">[</bpt>GetHandleMask<ept id=\"p1\">](#crecttracker__gethandlemask)</ept>.) Finally, a <ph id=\"ph1\">`CRectTracker`</ph> allows you to change the orientation of an item during resizing.","pos":[3336,3521],"source":" (For an explanation of the resize handles, see [GetHandleMask](#crecttracker__gethandlemask).) Finally, a `CRectTracker` allows you to change the orientation of an item during resizing."},{"content":"To use <ph id=\"ph1\">`CRectTracker`</ph>, construct a <ph id=\"ph2\">`CRectTracker`</ph> object and specify which display states are initialized.","pos":[3528,3634],"source":"To use `CRectTracker`, construct a `CRectTracker` object and specify which display states are initialized."},{"content":"You can then use this interface to give the user visual feedback on the current status of the OLE item associated with the <ph id=\"ph1\">`CRectTracker`</ph> object.","pos":[3635,3780],"source":" You can then use this interface to give the user visual feedback on the current status of the OLE item associated with the `CRectTracker` object."},{"pos":[3787,3883],"content":"For more information on using <ph id=\"ph1\">`CRectTracker`</ph>, see the article <bpt id=\"p1\">[</bpt>Trackers<ept id=\"p1\">](../../mfc/trackers.md)</ept>.","source":"For more information on using `CRectTracker`, see the article [Trackers](../../mfc/trackers.md)."},{"content":"Inheritance Hierarchy","pos":[3892,3913]},{"content":"Requirements","pos":[3940,3952]},{"pos":[3956,3976],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxext.h","source":"**Header:** afxext.h"},{"pos":[4027,4051],"content":"CRectTracker::AdjustRect"},{"content":"Called by the framework when the tracking rectangle is resized by using a resize handle.","pos":[4055,4143]},{"content":"Parameters","pos":[4232,4242]},{"content":"Index of handle used.","pos":[4259,4280]},{"content":"Pointer to the current size of the rectangle.","pos":[4299,4344]},{"content":"(The size of a rectangle is given by its height and width.)","pos":[4345,4404]},{"content":"Remarks","pos":[4414,4421]},{"pos":[4425,4582],"content":"The default behavior of this function allows the rectangle's orientation to change only when <ph id=\"ph1\">`Track`</ph> and <ph id=\"ph2\">`TrackRubberBand`</ph> are called with inverting allowed.","source":"The default behavior of this function allows the rectangle's orientation to change only when `Track` and `TrackRubberBand` are called with inverting allowed."},{"content":"Override this function to control the adjustment of the tracking rectangle during a dragging operation.","pos":[4589,4692]},{"content":"One method is to adjust the coordinates specified by <ph id=\"ph1\">`lpRect`</ph> before returning.","pos":[4693,4772],"source":" One method is to adjust the coordinates specified by `lpRect` before returning."},{"pos":[4779,4937],"content":"Special features that are not directly supported by <ph id=\"ph1\">`CRectTracker`</ph>, such as snap-to-grid or keep-aspect-ratio, can be implemented by overriding this function.","source":"Special features that are not directly supported by `CRectTracker`, such as snap-to-grid or keep-aspect-ratio, can be implemented by overriding this function."},{"pos":[4990,5016],"content":"CRectTracker::CRectTracker"},{"pos":[5020,5068],"content":"Creates and initializes a <ph id=\"ph1\">`CRectTracker`</ph> object.","source":"Creates and initializes a `CRectTracker` object."},{"content":"Parameters","pos":[5169,5179]},{"content":"The coordinates of the rectangle object.","pos":[5198,5238]},{"content":"Specifies the style of the <ph id=\"ph1\">`CRectTracker`</ph> object.","pos":[5257,5306],"source":" Specifies the style of the `CRectTracker` object."},{"content":"The following styles are supported:","pos":[5307,5342]},{"pos":[5350,5420],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::solidLine<ept id=\"p1\">**</ept> Use a solid line for the rectangle border.","source":"**CRectTracker::solidLine** Use a solid line for the rectangle border."},{"pos":[5428,5500],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::dottedLine<ept id=\"p1\">**</ept> Use a dotted line for the rectangle border.","source":"**CRectTracker::dottedLine** Use a dotted line for the rectangle border."},{"pos":[5508,5587],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::hatchedBorder<ept id=\"p1\">**</ept> Use a hatched pattern for the rectangle border.","source":"**CRectTracker::hatchedBorder** Use a hatched pattern for the rectangle border."},{"pos":[5595,5670],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::resizeInside<ept id=\"p1\">**</ept> Resize handles located inside the rectangle.","source":"**CRectTracker::resizeInside** Resize handles located inside the rectangle."},{"pos":[5678,5755],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::resizeOutside<ept id=\"p1\">**</ept> Resize handles located outside the rectangle.","source":"**CRectTracker::resizeOutside** Resize handles located outside the rectangle."},{"pos":[5763,5837],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::hatchInside<ept id=\"p1\">**</ept> Hatched pattern covers the entire rectangle.","source":"**CRectTracker::hatchInside** Hatched pattern covers the entire rectangle."},{"content":"Remarks","pos":[5847,5854]},{"content":"The default constructor initializes the <ph id=\"ph1\">`CRectTracker`</ph> object with the values from <ph id=\"ph2\">`lpSrcRect`</ph> and initializes other sizes to system defaults.","pos":[5858,6000],"source":"The default constructor initializes the `CRectTracker` object with the values from `lpSrcRect` and initializes other sizes to system defaults."},{"content":"If the object is created with no parameters, the <ph id=\"ph1\">`m_rect`</ph> and <ph id=\"ph2\">`m_nStyle`</ph> data members are uninitialized.","pos":[6001,6105],"source":" If the object is created with no parameters, the `m_rect` and `m_nStyle` data members are uninitialized."},{"pos":[6150,6168],"content":"CRectTracker::Draw"},{"content":"Call this function to draw the rectangle's outer lines and inner region.","pos":[6172,6244]},{"content":"Parameters","pos":[6299,6309]},{"content":"Pointer to the device context on which to draw.","pos":[6322,6369]},{"content":"Remarks","pos":[6379,6386]},{"content":"The style of the tracker determines how the drawing is done.","pos":[6390,6450]},{"content":"See the constructor for <ph id=\"ph1\">`CRectTracker`</ph> for more information on the styles available.","pos":[6451,6535],"source":" See the constructor for `CRectTracker` for more information on the styles available."},{"pos":[6591,6620],"content":"CRectTracker::DrawTrackerRect"},{"pos":[6624,6759],"content":"Called by the framework whenever the position of the tracker has changed while inside the <ph id=\"ph1\">`Track`</ph> or <ph id=\"ph2\">`TrackRubberBand`</ph> member function.","source":"Called by the framework whenever the position of the tracker has changed while inside the `Track` or `TrackRubberBand` member function."},{"content":"Parameters","pos":[6893,6903]},{"content":"Pointer to the <ph id=\"ph1\">`RECT`</ph> that contains the rectangle to draw.","pos":[6919,6977],"source":" Pointer to the `RECT` that contains the rectangle to draw."},{"content":"Pointer to the window to use in clipping the rectangle.","pos":[7000,7055]},{"content":"Pointer to the device context on which to draw.","pos":[7071,7118]},{"content":"Pointer to the window on which the drawing will occur.","pos":[7135,7189]},{"content":"Remarks","pos":[7199,7206]},{"pos":[7210,7306],"content":"The default implementation makes a call to <ph id=\"ph1\">`CDC::DrawFocusRect`</ph>, which draws a dotted rectangle.","source":"The default implementation makes a call to `CDC::DrawFocusRect`, which draws a dotted rectangle."},{"content":"Override this function to provide different feedback during the tracking operation.","pos":[7313,7396]},{"pos":[7450,7477],"content":"CRectTracker::GetHandleMask"},{"content":"The framework calls this member function to retrieve the mask for a rectangle's resize handles.","pos":[7481,7576]},{"content":"Return Value","pos":[7640,7652]},{"pos":[7656,7707],"content":"The mask of a <ph id=\"ph1\">`CRectTracker`</ph> item's resize handles.","source":"The mask of a `CRectTracker` item's resize handles."},{"content":"Remarks","pos":[7717,7724]},{"content":"The resize handles appear on the sides and corners of the rectangle and allow the user to control the shape and size of the rectangle.","pos":[7728,7862]},{"content":"A rectangle has 8 resize handles numbered 0–7.","pos":[7869,7915]},{"content":"Each resize handle is represented by a bit in the mask; the value of that bit is 2^ <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>, where <bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept> is the resize handle number.","pos":[7916,8043],"source":" Each resize handle is represented by a bit in the mask; the value of that bit is 2^ *n*, where *n* is the resize handle number."},{"content":"Bits 0–3 correspond to the corner resize handles, starting at the top left moving clockwise.","pos":[8044,8136]},{"content":"Bits 4–7 correspond to the side resize handles starting at the top moving clockwise.","pos":[8137,8221]},{"content":"The following illustration shows a rectangle's resize handles and their corresponding resize handle numbers and values:","pos":[8222,8341]},{"content":"Resize handle numbers","pos":[8350,8371]},{"content":"The default implementation of <bpt id=\"p1\">**</bpt>GetHandleMask<ept id=\"p1\">**</ept> returns the mask of the bits so that the resize handles appear.","pos":[8428,8539],"source":"The default implementation of **GetHandleMask** returns the mask of the bits so that the resize handles appear."},{"content":"If the single bit is on, the corresponding resize handle will be drawn.","pos":[8540,8611]},{"content":"Override this member function to hide or show the indicated resize handles.","pos":[8618,8693]},{"pos":[8745,8770],"content":"CRectTracker::GetTrueRect"},{"content":"Call this function to retrieve the coordinates of the rectangle.","pos":[8774,8838]},{"content":"Parameters","pos":[8909,8919]},{"content":"Pointer to the <ph id=\"ph1\">`RECT`</ph> structure that will contain the device coordinates of the <ph id=\"ph2\">`CRectTracker`</ph> object.","pos":[8939,9041],"source":" Pointer to the `RECT` structure that will contain the device coordinates of the `CRectTracker` object."},{"content":"Remarks","pos":[9051,9058]},{"content":"The dimensions of the rectangle include the height and width of any resize handles located on the outer border.","pos":[9062,9173]},{"content":"Upon returning, <ph id=\"ph1\">`lpTrueRect`</ph> is always a normalized rectangle in device coordinates.","pos":[9174,9258],"source":" Upon returning, `lpTrueRect` is always a normalized rectangle in device coordinates."},{"pos":[9306,9327],"content":"CRectTracker::HitTest"},{"content":"Call this function to find out whether the user has grabbed a resize handle.","pos":[9331,9407]},{"content":"Parameters","pos":[9468,9478]},{"content":"The point, in device coordinates, to test.","pos":[9493,9535]},{"content":"Return Value","pos":[9545,9557]},{"pos":[9561,9682],"content":"The value returned is based on the enumerated type <bpt id=\"p1\">**</bpt>CRectTracker::TrackerHit<ept id=\"p1\">**</ept> and can have one of the following values:","source":"The value returned is based on the enumerated type **CRectTracker::TrackerHit** and can have one of the following values:"},{"pos":[9690,9721],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::hitNothing<ept id=\"p1\">**</ept> –1","source":"**CRectTracker::hitNothing** –1"},{"pos":[9729,9759],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::hitTopLeft<ept id=\"p1\">**</ept> 0","source":"**CRectTracker::hitTopLeft** 0"},{"pos":[9767,9798],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::hitTopRight<ept id=\"p1\">**</ept> 1","source":"**CRectTracker::hitTopRight** 1"},{"pos":[9806,9840],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::hitBottomRight<ept id=\"p1\">**</ept> 2","source":"**CRectTracker::hitBottomRight** 2"},{"pos":[9848,9881],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::hitBottomLeft<ept id=\"p1\">**</ept> 3","source":"**CRectTracker::hitBottomLeft** 3"},{"pos":[9889,9915],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::hitTop<ept id=\"p1\">**</ept> 4","source":"**CRectTracker::hitTop** 4"},{"pos":[9923,9951],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::hitRight<ept id=\"p1\">**</ept> 5","source":"**CRectTracker::hitRight** 5"},{"pos":[9959,9988],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::hitBottom<ept id=\"p1\">**</ept> 6","source":"**CRectTracker::hitBottom** 6"},{"pos":[9996,10023],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::hitLeft<ept id=\"p1\">**</ept> 7","source":"**CRectTracker::hitLeft** 7"},{"pos":[10031,10060],"content":"<bpt id=\"p1\">**</bpt>CRectTracker::hitMiddle<ept id=\"p1\">**</ept> 8","source":"**CRectTracker::hitMiddle** 8"},{"pos":[10114,10141],"content":"CRectTracker::m_nHandleSize"},{"pos":[10145,10203],"content":"The size, in pixels, of the <ph id=\"ph1\">`CRectTracker`</ph> resize handles.","source":"The size, in pixels, of the `CRectTracker` resize handles."},{"content":"Remarks","pos":[10249,10256]},{"content":"Initialized with the default system value.","pos":[10260,10302]},{"pos":[10349,10369],"content":"CRectTracker::m_rect"},{"content":"The current position of the rectangle in client coordinates (pixels).","pos":[10373,10442]},{"pos":[10523,10546],"content":"CRectTracker::m_sizeMin"},{"content":"The minimum size of the rectangle.","pos":[10550,10584]},{"content":"Remarks","pos":[10628,10635]},{"content":"Both default values, <bpt id=\"p1\">**</bpt>cx<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>cy<ept id=\"p2\">**</ept>, are calculated from the default system value for the border width.","pos":[10639,10745],"source":"Both default values, **cx** and **cy**, are calculated from the default system value for the border width."},{"content":"This data member is used only by the <ph id=\"ph1\">`AdjustRect`</ph> member function.","pos":[10746,10812],"source":" This data member is used only by the `AdjustRect` member function."},{"pos":[10861,10883],"content":"CRectTracker::m_nStyle"},{"content":"Current style of the rectangle.","pos":[10887,10918]},{"content":"Remarks","pos":[10960,10967]},{"pos":[10971,11063],"content":"See <bpt id=\"p1\">[</bpt>CRectTracker::CRectTracker<ept id=\"p1\">](#crecttracker__crecttracker)</ept> for a list of possible styles.","source":"See [CRectTracker::CRectTracker](#crecttracker__crecttracker) for a list of possible styles."},{"pos":[11116,11142],"content":"CRectTracker::NormalizeHit"},{"content":"Call this function to convert a potentially inverted handle.","pos":[11146,11206]},{"content":"Parameters","pos":[11271,11281]},{"content":"Handle selected by the user.","pos":[11298,11326]},{"content":"Return Value","pos":[11336,11348]},{"content":"The index of the normalized handle.","pos":[11352,11387]},{"content":"Remarks","pos":[11397,11404]},{"content":"When <ph id=\"ph1\">`CRectTracker::Track`</ph> or <ph id=\"ph2\">`CRectTracker::TrackRubberBand`</ph> is called with inverting allowed, it is possible for the rectangle to be inverted on the x-axis, the y-axis, or both.","pos":[11408,11587],"source":"When `CRectTracker::Track` or `CRectTracker::TrackRubberBand` is called with inverting allowed, it is possible for the rectangle to be inverted on the x-axis, the y-axis, or both."},{"content":"When this happens, <ph id=\"ph1\">`HitTest`</ph> will return handles that are also inverted with respect to the rectangle.","pos":[11588,11690],"source":" When this happens, `HitTest` will return handles that are also inverted with respect to the rectangle."},{"content":"This is inappropriate for drawing cursor feedback because the feedback depends on the screen position of the rectangle, not the portion of the rectangle data structure that will be modified.","pos":[11691,11881]},{"pos":[11935,11962],"content":"CRectTracker::OnChangedRect"},{"pos":[11966,12058],"content":"Called by the framework whenever the tracker rectangle has changed during a call to <ph id=\"ph1\">`Track`</ph>.","source":"Called by the framework whenever the tracker rectangle has changed during a call to `Track`."},{"content":"Parameters","pos":[12133,12143]},{"content":"rectOld","pos":[12148,12155]},{"content":"Contains the old device coordinates of the <ph id=\"ph1\">`CRectTracker`</ph> object.","pos":[12160,12225],"source":" Contains the old device coordinates of the `CRectTracker` object."},{"content":"Remarks","pos":[12235,12242]},{"content":"At the time this function is called, all feedback drawn with <ph id=\"ph1\">`DrawTrackerRect`</ph> has been removed.","pos":[12246,12342],"source":"At the time this function is called, all feedback drawn with `DrawTrackerRect` has been removed."},{"content":"The default implementation of this function does nothing.","pos":[12343,12400]},{"content":"Override this function when you want to perform any actions after the rectangle has been resized.","pos":[12407,12504]},{"pos":[12554,12577],"content":"CRectTracker::SetCursor"},{"pos":[12581,12679],"content":"Call this function to change the cursor shape while it is over the <ph id=\"ph1\">`CRectTracker`</ph> object's region.","source":"Call this function to change the cursor shape while it is over the `CRectTracker` object's region."},{"content":"Parameters","pos":[12767,12777]},{"content":"Points to the window that currently contains the cursor.","pos":[12791,12847]},{"content":"Results of the previous hit test, from the <ph id=\"ph1\">`WM_SETCURSOR`</ph> message.","pos":[12868,12934],"source":" Results of the previous hit test, from the `WM_SETCURSOR` message."},{"content":"Return Value","pos":[12944,12956]},{"content":"Nonzero if the previous hit was over the tracker rectangle; otherwise 0.","pos":[12960,13032]},{"content":"Remarks","pos":[13042,13049]},{"pos":[13053,13178],"content":"Call this function from inside the function of your window that handles the <ph id=\"ph1\">`WM_SETCURSOR`</ph> message (typically <ph id=\"ph2\">`OnSetCursor`</ph>).","source":"Call this function from inside the function of your window that handles the `WM_SETCURSOR` message (typically `OnSetCursor`)."},{"pos":[13224,13243],"content":"CRectTracker::Track"},{"content":"Call this function to display the user interface for resizing the rectangle.","pos":[13247,13323]},{"content":"Parameters","pos":[13461,13471]},{"content":"The window object that contains the rectangle.","pos":[13485,13531]},{"content":"Device coordinates of the current mouse position relative to the client area.","pos":[13549,13626]},{"content":"If <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the rectangle can be inverted along the x-axis or y-axis; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[13651,13742],"source":" If **TRUE**, the rectangle can be inverted along the x-axis or y-axis; otherwise **FALSE**."},{"content":"The window that drawing operations will be clipped to.","pos":[13765,13819]},{"content":"If <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`pWnd`</ph> is used as the clipping rectangle.","pos":[13820,13874],"source":" If **NULL**, `pWnd` is used as the clipping rectangle."},{"content":"Return Value","pos":[13884,13896]},{"content":"If the ESC key is pressed, the tracking process is halted, the rectangle stored in the tracker is not altered, and 0 is returned.","pos":[13900,14029]},{"content":"If the change is committed, by moving the mouse and releasing the left mouse button, the new position and/or size is recorded in the tracker's rectangle and nonzero is returned.","pos":[14030,14207]},{"content":"Remarks","pos":[14217,14224]},{"pos":[14228,14366],"content":"This is usually called from inside the function of your application that handles the <ph id=\"ph1\">`WM_LBUTTONDOWN`</ph> message (typically <ph id=\"ph2\">`OnLButtonDown`</ph>).","source":"This is usually called from inside the function of your application that handles the `WM_LBUTTONDOWN` message (typically `OnLButtonDown`)."},{"content":"This function will capture the mouse until the user releases the left mouse button, presses the ESC key, or presses the right mouse button.","pos":[14373,14512]},{"content":"As the user moves the mouse cursor, the feedback is updated by calling <ph id=\"ph1\">`DrawTrackerRect`</ph> and <ph id=\"ph2\">`OnChangedRect`</ph>.","pos":[14513,14622],"source":" As the user moves the mouse cursor, the feedback is updated by calling `DrawTrackerRect` and `OnChangedRect`."},{"pos":[14629,14730],"content":"If <ph id=\"ph1\">`bAllowInvert`</ph> is <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, the tracking rectangle can be inverted on either the x-axis or y-axis.","source":"If `bAllowInvert` is **TRUE**, the tracking rectangle can be inverted on either the x-axis or y-axis."},{"pos":[14786,14815],"content":"CRectTracker::TrackRubberBand"},{"content":"Call this function to do rubber-band selection.","pos":[14819,14866]},{"content":"Parameters","pos":[14982,14992]},{"content":"The window object that contains the rectangle.","pos":[15006,15052]},{"content":"Device coordinates of the current mouse position relative to the client area.","pos":[15070,15147]},{"content":"If <bpt id=\"p1\">**</bpt>TRUE,<ept id=\"p1\">**</ept> the rectangle can be inverted along the x-axis or y-axis; otherwise <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","pos":[15172,15263],"source":" If **TRUE,** the rectangle can be inverted along the x-axis or y-axis; otherwise **FALSE**."},{"content":"Return Value","pos":[15273,15285]},{"content":"Nonzero if the mouse has moved and the rectangle is not empty; otherwise 0.","pos":[15289,15364]},{"content":"Remarks","pos":[15374,15381]},{"pos":[15385,15521],"content":"It is usually called from inside the function of your application that handles the <ph id=\"ph1\">`WM_LBUTTONDOWN`</ph> message (typically <ph id=\"ph2\">`OnLButtonDown`</ph>).","source":"It is usually called from inside the function of your application that handles the `WM_LBUTTONDOWN` message (typically `OnLButtonDown`)."},{"content":"This function will capture the mouse until the user releases the left mouse button, presses the ESC key, or presses the right mouse button.","pos":[15528,15667]},{"content":"As the user moves the mouse cursor, the feedback is updated by calling <ph id=\"ph1\">`DrawTrackerRect`</ph> and <ph id=\"ph2\">`OnChangedRect`</ph>.","pos":[15668,15777],"source":" As the user moves the mouse cursor, the feedback is updated by calling `DrawTrackerRect` and `OnChangedRect`."},{"content":"Tracking is performed with a rubber-band-type selection from the lower-right handle.","pos":[15784,15868]},{"content":"If inverting is allowed, the rectangle can be sized by dragging either up and to the left or down and to the right.","pos":[15869,15984]},{"content":"See Also","pos":[15993,16001]},{"content":"MFC Sample TRACKER","pos":[16006,16024]},{"content":"MFC Sample DRAWCLI","pos":[16060,16078]},{"content":"Hierarchy Chart","pos":[16114,16129]},{"content":"COleResizeBar Class","pos":[16166,16185]},{"content":"CRect Class","pos":[16236,16247]}],"content":"---\ntitle: \"CRectTracker Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CRectTracker\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"displaying items\"\n  - \"CRectTracker class\"\n  - \"resizing items\"\nms.assetid: 99caa7f2-3c0d-4a42-bbee-e5d1d342d4ee\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CRectTracker Class\nAllows an item to be displayed, moved, and resized in different fashions.  \n  \n## Syntax  \n  \n```  \nclass CRectTracker  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRectTracker::CRectTracker](#crecttracker__crecttracker)|Constructs a `CRectTracker` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRectTracker::AdjustRect](#crecttracker__adjustrect)|Called when the rectangle is resized.|  \n|[CRectTracker::Draw](#crecttracker__draw)|Renders the rectangle.|  \n|[CRectTracker::DrawTrackerRect](#crecttracker__drawtrackerrect)|Called when drawing the border of a `CRectTracker` object.|  \n|[CRectTracker::GetHandleMask](#crecttracker__gethandlemask)|Called to get the mask of a `CRectTracker`item's resize handles.|  \n|[CRectTracker::GetTrueRect](#crecttracker__gettruerect)|Returns width and height of rectangle, including resize handles.|  \n|[CRectTracker::HitTest](#crecttracker__hittest)|Returns the current position of the cursor related to the `CRectTracker` object.|  \n|[CRectTracker::NormalizeHit](#crecttracker__normalizehit)|Normalizes a hit-test code.|  \n|[CRectTracker::OnChangedRect](#crecttracker__onchangedrect)|Called when the rectangle has been resized or moved.|  \n|[CRectTracker::SetCursor](#crecttracker__setcursor)|Sets the cursor, depending on its position over the rectangle.|  \n|[CRectTracker::Track](#crecttracker__track)|Allows the user to manipulate the rectangle.|  \n|[CRectTracker::TrackRubberBand](#crecttracker__trackrubberband)|Allows the user to \"rubber-band\" the selection.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CRectTracker::m_nHandleSize](#crecttracker__m_nhandlesize)|Determines size of resize handles.|  \n|[CRectTracker::m_nStyle](#crecttracker__m_nstyle)|Current style(s) of the tracker.|  \n|[CRectTracker::m_rect](#crecttracker__m_rect)|Current position (in pixels) of the rectangle.|  \n|[CRectTracker::m_sizeMin](#crecttracker__m_sizemin)|Determines minimum rectangle width and height.|  \n  \n## Remarks  \n `CRectTracker` does not have a base class.  \n  \n Although the `CRectTracker` class is designed to allow the user to interact with OLE items by using a graphical interface, its use is not restricted to OLE-enabled applications. It can be used anywhere such a user interface is required.  \n  \n `CRectTracker` borders can be solid or dotted lines. The item can be given a hatched border or overlaid with a hatched pattern to indicate different states of the item. You can place eight resize handles on either the outside or the inside border of the item. (For an explanation of the resize handles, see [GetHandleMask](#crecttracker__gethandlemask).) Finally, a `CRectTracker` allows you to change the orientation of an item during resizing.  \n  \n To use `CRectTracker`, construct a `CRectTracker` object and specify which display states are initialized. You can then use this interface to give the user visual feedback on the current status of the OLE item associated with the `CRectTracker` object.  \n  \n For more information on using `CRectTracker`, see the article [Trackers](../../mfc/trackers.md).  \n  \n## Inheritance Hierarchy  \n `CRectTracker`  \n  \n## Requirements  \n **Header:** afxext.h  \n  \n##  <a name=\"crecttracker__adjustrect\"></a>  CRectTracker::AdjustRect  \n Called by the framework when the tracking rectangle is resized by using a resize handle.  \n  \n```  \nvirtual void AdjustRect(\n    int nHandle,  \n    LPRECT lpRect);\n```  \n  \n### Parameters  \n `nHandle`  \n Index of handle used.  \n  \n `lpRect`  \n Pointer to the current size of the rectangle. (The size of a rectangle is given by its height and width.)  \n  \n### Remarks  \n The default behavior of this function allows the rectangle's orientation to change only when `Track` and `TrackRubberBand` are called with inverting allowed.  \n  \n Override this function to control the adjustment of the tracking rectangle during a dragging operation. One method is to adjust the coordinates specified by `lpRect` before returning.  \n  \n Special features that are not directly supported by `CRectTracker`, such as snap-to-grid or keep-aspect-ratio, can be implemented by overriding this function.  \n  \n##  <a name=\"crecttracker__crecttracker\"></a>  CRectTracker::CRectTracker  \n Creates and initializes a `CRectTracker` object.  \n  \n```  \nCRectTracker();\n\n \nCRectTracker(\n    LPCRECT lpSrcRect,  \n    UINT nStyle);\n```  \n  \n### Parameters  \n `lpSrcRect`  \n The coordinates of the rectangle object.  \n  \n `nStyle`  \n Specifies the style of the `CRectTracker` object. The following styles are supported:  \n  \n- **CRectTracker::solidLine** Use a solid line for the rectangle border.  \n  \n- **CRectTracker::dottedLine** Use a dotted line for the rectangle border.  \n  \n- **CRectTracker::hatchedBorder** Use a hatched pattern for the rectangle border.  \n  \n- **CRectTracker::resizeInside** Resize handles located inside the rectangle.  \n  \n- **CRectTracker::resizeOutside** Resize handles located outside the rectangle.  \n  \n- **CRectTracker::hatchInside** Hatched pattern covers the entire rectangle.  \n  \n### Remarks  \n The default constructor initializes the `CRectTracker` object with the values from `lpSrcRect` and initializes other sizes to system defaults. If the object is created with no parameters, the `m_rect` and `m_nStyle` data members are uninitialized.  \n  \n##  <a name=\"crecttracker__draw\"></a>  CRectTracker::Draw  \n Call this function to draw the rectangle's outer lines and inner region.  \n  \n```  \nvoid Draw(CDC* pDC) const;\n\n \n```  \n  \n### Parameters  \n `pDC`  \n Pointer to the device context on which to draw.  \n  \n### Remarks  \n The style of the tracker determines how the drawing is done. See the constructor for `CRectTracker` for more information on the styles available.  \n  \n##  <a name=\"crecttracker__drawtrackerrect\"></a>  CRectTracker::DrawTrackerRect  \n Called by the framework whenever the position of the tracker has changed while inside the `Track` or `TrackRubberBand` member function.  \n  \n```  \nvirtual void DrawTrackerRect(\n    LPCRECT lpRect,  \n    CWnd* pWndClipTo,  \n    CDC* pDC,  \n    CWnd* pWnd);\n```  \n  \n### Parameters  \n `lpRect`  \n Pointer to the `RECT` that contains the rectangle to draw.  \n  \n `pWndClipTo`  \n Pointer to the window to use in clipping the rectangle.  \n  \n `pDC`  \n Pointer to the device context on which to draw.  \n  \n `pWnd`  \n Pointer to the window on which the drawing will occur.  \n  \n### Remarks  \n The default implementation makes a call to `CDC::DrawFocusRect`, which draws a dotted rectangle.  \n  \n Override this function to provide different feedback during the tracking operation.  \n  \n##  <a name=\"crecttracker__gethandlemask\"></a>  CRectTracker::GetHandleMask  \n The framework calls this member function to retrieve the mask for a rectangle's resize handles.  \n  \n```  \nvirtual UINT GetHandleMask() const;\n\n \n```  \n  \n### Return Value  \n The mask of a `CRectTracker` item's resize handles.  \n  \n### Remarks  \n The resize handles appear on the sides and corners of the rectangle and allow the user to control the shape and size of the rectangle.  \n  \n A rectangle has 8 resize handles numbered 0–7. Each resize handle is represented by a bit in the mask; the value of that bit is 2^ *n*, where *n* is the resize handle number. Bits 0–3 correspond to the corner resize handles, starting at the top left moving clockwise. Bits 4–7 correspond to the side resize handles starting at the top moving clockwise. The following illustration shows a rectangle's resize handles and their corresponding resize handle numbers and values:  \n  \n ![Resize handle numbers](../../mfc/reference/media/vc35dp1.gif \"vc35dp1\")  \n  \n The default implementation of **GetHandleMask** returns the mask of the bits so that the resize handles appear. If the single bit is on, the corresponding resize handle will be drawn.  \n  \n Override this member function to hide or show the indicated resize handles.  \n  \n##  <a name=\"crecttracker__gettruerect\"></a>  CRectTracker::GetTrueRect  \n Call this function to retrieve the coordinates of the rectangle.  \n  \n```  \nvoid GetTrueRect(LPRECT lpTrueRect) const;\n\n \n```  \n  \n### Parameters  \n `lpTrueRect`  \n Pointer to the `RECT` structure that will contain the device coordinates of the `CRectTracker` object.  \n  \n### Remarks  \n The dimensions of the rectangle include the height and width of any resize handles located on the outer border. Upon returning, `lpTrueRect` is always a normalized rectangle in device coordinates.  \n  \n##  <a name=\"crecttracker__hittest\"></a>  CRectTracker::HitTest  \n Call this function to find out whether the user has grabbed a resize handle.  \n  \n```  \nint HitTest(CPoint point) const;\n\n \n```  \n  \n### Parameters  \n `point`  \n The point, in device coordinates, to test.  \n  \n### Return Value  \n The value returned is based on the enumerated type **CRectTracker::TrackerHit** and can have one of the following values:  \n  \n- **CRectTracker::hitNothing** –1  \n  \n- **CRectTracker::hitTopLeft** 0  \n  \n- **CRectTracker::hitTopRight** 1  \n  \n- **CRectTracker::hitBottomRight** 2  \n  \n- **CRectTracker::hitBottomLeft** 3  \n  \n- **CRectTracker::hitTop** 4  \n  \n- **CRectTracker::hitRight** 5  \n  \n- **CRectTracker::hitBottom** 6  \n  \n- **CRectTracker::hitLeft** 7  \n  \n- **CRectTracker::hitMiddle** 8  \n  \n##  <a name=\"crecttracker__m_nhandlesize\"></a>  CRectTracker::m_nHandleSize  \n The size, in pixels, of the `CRectTracker` resize handles.  \n  \n```  \nint m_nHandleSize;  \n```  \n  \n### Remarks  \n Initialized with the default system value.  \n  \n##  <a name=\"crecttracker__m_rect\"></a>  CRectTracker::m_rect  \n The current position of the rectangle in client coordinates (pixels).  \n  \n```  \nCRect m_rect;  \n```  \n  \n##  <a name=\"crecttracker__m_sizemin\"></a>  CRectTracker::m_sizeMin  \n The minimum size of the rectangle.  \n  \n```  \nCSize m_sizeMin;  \n```  \n  \n### Remarks  \n Both default values, **cx** and **cy**, are calculated from the default system value for the border width. This data member is used only by the `AdjustRect` member function.  \n  \n##  <a name=\"crecttracker__m_nstyle\"></a>  CRectTracker::m_nStyle  \n Current style of the rectangle.  \n  \n```  \nUINT m_nStyle;  \n```  \n  \n### Remarks  \n See [CRectTracker::CRectTracker](#crecttracker__crecttracker) for a list of possible styles.  \n  \n##  <a name=\"crecttracker__normalizehit\"></a>  CRectTracker::NormalizeHit  \n Call this function to convert a potentially inverted handle.  \n  \n```  \nint NormalizeHit(int nHandle) const;\n\n \n```  \n  \n### Parameters  \n `nHandle`  \n Handle selected by the user.  \n  \n### Return Value  \n The index of the normalized handle.  \n  \n### Remarks  \n When `CRectTracker::Track` or `CRectTracker::TrackRubberBand` is called with inverting allowed, it is possible for the rectangle to be inverted on the x-axis, the y-axis, or both. When this happens, `HitTest` will return handles that are also inverted with respect to the rectangle. This is inappropriate for drawing cursor feedback because the feedback depends on the screen position of the rectangle, not the portion of the rectangle data structure that will be modified.  \n  \n##  <a name=\"crecttracker__onchangedrect\"></a>  CRectTracker::OnChangedRect  \n Called by the framework whenever the tracker rectangle has changed during a call to `Track`.  \n  \n```  \nvirtual void OnChangedRect(const CRect& rectOld);\n```  \n  \n### Parameters  \n *rectOld*  \n Contains the old device coordinates of the `CRectTracker` object.  \n  \n### Remarks  \n At the time this function is called, all feedback drawn with `DrawTrackerRect` has been removed. The default implementation of this function does nothing.  \n  \n Override this function when you want to perform any actions after the rectangle has been resized.  \n  \n##  <a name=\"crecttracker__setcursor\"></a>  CRectTracker::SetCursor  \n Call this function to change the cursor shape while it is over the `CRectTracker` object's region.  \n  \n```  \nBOOL SetCursor(\n    CWnd* pWnd,  \n    UINT nHitTest) const;\n\n \n```  \n  \n### Parameters  \n `pWnd`  \n Points to the window that currently contains the cursor.  \n  \n `nHitTest`  \n Results of the previous hit test, from the `WM_SETCURSOR` message.  \n  \n### Return Value  \n Nonzero if the previous hit was over the tracker rectangle; otherwise 0.  \n  \n### Remarks  \n Call this function from inside the function of your window that handles the `WM_SETCURSOR` message (typically `OnSetCursor`).  \n  \n##  <a name=\"crecttracker__track\"></a>  CRectTracker::Track  \n Call this function to display the user interface for resizing the rectangle.  \n  \n```  \nBOOL Track(\n    CWnd* pWnd,  \n    CPoint point,  \n    BOOL bAllowInvert = FALSE,  \n    CWnd* pWndClipTo = NULL);\n```  \n  \n### Parameters  \n `pWnd`  \n The window object that contains the rectangle.  \n  \n `point`  \n Device coordinates of the current mouse position relative to the client area.  \n  \n `bAllowInvert`  \n If **TRUE**, the rectangle can be inverted along the x-axis or y-axis; otherwise **FALSE**.  \n  \n `pWndClipTo`  \n The window that drawing operations will be clipped to. If **NULL**, `pWnd` is used as the clipping rectangle.  \n  \n### Return Value  \n If the ESC key is pressed, the tracking process is halted, the rectangle stored in the tracker is not altered, and 0 is returned. If the change is committed, by moving the mouse and releasing the left mouse button, the new position and/or size is recorded in the tracker's rectangle and nonzero is returned.  \n  \n### Remarks  \n This is usually called from inside the function of your application that handles the `WM_LBUTTONDOWN` message (typically `OnLButtonDown`).  \n  \n This function will capture the mouse until the user releases the left mouse button, presses the ESC key, or presses the right mouse button. As the user moves the mouse cursor, the feedback is updated by calling `DrawTrackerRect` and `OnChangedRect`.  \n  \n If `bAllowInvert` is **TRUE**, the tracking rectangle can be inverted on either the x-axis or y-axis.  \n  \n##  <a name=\"crecttracker__trackrubberband\"></a>  CRectTracker::TrackRubberBand  \n Call this function to do rubber-band selection.  \n  \n```  \nBOOL TrackRubberBand(\n    CWnd* pWnd,  \n    CPoint point,  \n    BOOL bAllowInvert = TRUE);\n```  \n  \n### Parameters  \n `pWnd`  \n The window object that contains the rectangle.  \n  \n `point`  \n Device coordinates of the current mouse position relative to the client area.  \n  \n `bAllowInvert`  \n If **TRUE,** the rectangle can be inverted along the x-axis or y-axis; otherwise **FALSE**.  \n  \n### Return Value  \n Nonzero if the mouse has moved and the rectangle is not empty; otherwise 0.  \n  \n### Remarks  \n It is usually called from inside the function of your application that handles the `WM_LBUTTONDOWN` message (typically `OnLButtonDown`).  \n  \n This function will capture the mouse until the user releases the left mouse button, presses the ESC key, or presses the right mouse button. As the user moves the mouse cursor, the feedback is updated by calling `DrawTrackerRect` and `OnChangedRect`.  \n  \n Tracking is performed with a rubber-band-type selection from the lower-right handle. If inverting is allowed, the rectangle can be sized by dragging either up and to the left or down and to the right.  \n  \n## See Also  \n [MFC Sample TRACKER](../../visual-cpp-samples.md)   \n [MFC Sample DRAWCLI](../../visual-cpp-samples.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [COleResizeBar Class](../../mfc/reference/coleresizebar-class.md)   \n [CRect Class](../../atl-mfc-shared/reference/crect-class.md)\n"}