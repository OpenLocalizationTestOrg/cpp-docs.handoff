<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">211377883d926be50a1e4e536e02ea45d87d4377</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\ccriticalsection-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fce2787d4cb908e21ca875dafc33d42cd3a35c4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">517a275c29df661d312439cd4945433769250cc6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CCriticalSection Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CCriticalSection Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents a "critical section" â€” a synchronization object that allows one thread at a time to access a resource or section of code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CCriticalSection::CCriticalSection</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CCriticalSection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CCriticalSection::Lock</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use to gain access to the <ph id="ph1">`CCriticalSection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CCriticalSection::Unlock</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Releases the <ph id="ph1">`CCriticalSection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CCriticalSection::operator CRITICAL_SECTION*</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the internal <bpt id="p1">**</bpt>CRITICAL_SECTION<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CCriticalSection::m_sect</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>CRITICAL_SECTION<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Critical sections are useful when only one thread at a time can be allowed to modify data or some other controlled resource.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, adding nodes to a linked list is a process that should only be allowed by one thread at a time.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>By using a <ph id="ph1">`CCriticalSection`</ph> object to control the linked list, only one thread at a time can gain access to the list.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The functionality of the <ph id="ph1">`CCriticalSection`</ph> class is provided by an actual Win32 <bpt id="p1">**</bpt>CRITICAL_SECTION<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Critical sections are used instead of mutexes (see <bpt id="p1">[</bpt>CMutex<ept id="p1">](../../mfc/reference/cmutex-class.md)</ept>) when speed is critical and the resource will not be used across process boundaries.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>There are two methods for using a <ph id="ph1">`CCriticalSection`</ph> object: stand-alone and embedded in a class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Stand-alone method   To use a stand-alone <ph id="ph1">`CCriticalSection`</ph> object, construct the <ph id="ph2">`CCriticalSection`</ph> object when it is needed.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>After a successful return from the constructor, explicitly lock the object with a call to <bpt id="p1">[</bpt>Lock<ept id="p1">](#ccriticalsection__lock)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>Unlock<ept id="p1">](#ccriticalsection__unlock)</ept> when you are done accessing the critical section.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This method, while clearer to someone reading your source code, is more prone to error as you must remember to lock and unlock the critical section before and after access.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A more preferable method is to use the <bpt id="p1">[</bpt>CSingleLock<ept id="p1">](../../mfc/reference/csinglelock-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It also has a <ph id="ph1">`Lock`</ph> and <ph id="ph2">`Unlock`</ph> method, but you don't have to worry about unlocking the resource if an exception occurs.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Embedded method   You can also share a class with multiple threads by adding a <ph id="ph1">`CCriticalSection`</ph>-type data member to the class and locking the data member when needed.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CCriticalSection`</ph> objects, see the article <bpt id="p1">[</bpt>Multithreading: How to Use the Synchronization Classes<ept id="p1">](../../parallel/multithreading-how-to-use-the-synchronization-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CSyncObject</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxmt.h</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CCriticalSection::CCriticalSection</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CCriticalSection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To access or release a <ph id="ph1">`CCriticalSection`</ph> object, create a <bpt id="p1">[</bpt>CSingleLock<ept id="p1">](../../mfc/reference/csinglelock-class.md)</ept> object and call its <bpt id="p2">[</bpt>Lock<ept id="p2">](../../mfc/reference/csinglelock-class.md#csinglelock__lock)</ept> and <bpt id="p3">[</bpt>Unlock<ept id="p3">](../../mfc/reference/csinglelock-class.md#csinglelock__unlock)</ept> member functions.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CCriticalSection`</ph> object is being used stand-alone, call its <bpt id="p1">[</bpt>Unlock<ept id="p1">](#ccriticalsection__unlock)</ept> member function to release it.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If the constructor fails to allocate the required system memory, a memory exception (of type <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept>) is automatically thrown.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CCriticalSection::Lock<ept id="p1">](#ccriticalsection__lock)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CCriticalSection::Lock</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Call this member function to gain access to the critical section object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>ignores this parameter value.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Nonzero if the function was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>is a blocking call that will not return until the critical section object is signaled (becomes available).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If timed waits are necessary, you can use a <bpt id="p1">[</bpt>CMutex<ept id="p1">](../../mfc/reference/cmutex-class.md)</ept> object instead of a <ph id="ph1">`CCriticalSection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Lock`</ph> fails to allocate the necessary system memory, a memory exception (of type <bpt id="p1">[</bpt>CMemoryException<ept id="p1">](../../mfc/reference/cmemoryexception-class.md)</ept>) is automatically thrown.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This example demonstrates the nested critical section approach by controlling access to a shared resource (the static <ph id="ph1">`_strShared`</ph> object) using a shared <ph id="ph2">`CCriticalSection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SomeMethod`</ph> function demonstrates updating a shared resource in a safe manner.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>NVC_MFC_Utilities#11</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CCriticalSection::m_sect</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Contains a critical section object that is used by all <ph id="ph1">`CCriticalSection`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CCriticalSection::operator CRITICAL_SECTION*</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Retrieves a <bpt id="p1">**</bpt>CRITICAL_SECTION<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve a pointer to the internal <bpt id="p1">**</bpt>CRITICAL_SECTION<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CCriticalSection::Unlock</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Releases the <ph id="ph1">`CCriticalSection`</ph> object for use by another thread.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Nonzero if the <ph id="ph1">`CCriticalSection`</ph> object was owned by the thread and the release was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`CCriticalSection`</ph> is being used stand-alone, <ph id="ph2">`Unlock`</ph> must be called immediately after completing use of the resource controlled by the critical section.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">[</bpt>CSingleLock<ept id="p1">](../../mfc/reference/csinglelock-class.md)</ept> object is being used, <ph id="ph1">`CCriticalSection::Unlock`</ph> will be called by the lock object's <ph id="ph2">`Unlock`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CCriticalSection::Lock<ept id="p1">](#ccriticalsection__lock)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CSyncObject Class</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CMutex Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>