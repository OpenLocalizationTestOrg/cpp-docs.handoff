{"nodes":[{"pos":[12,53],"content":"Unhandled C++ Exceptions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Unhandled C++ Exceptions | Microsoft Docs","pos":[0,41]}]},{"content":"Unhandled C++ Exceptions","pos":[760,784]},{"content":"If a matching handler (or ellipsis <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> handler) cannot be found for the current exception, the predefined <ph id=\"ph1\">`terminate`</ph> run-time function is called.","pos":[785,937],"source":"If a matching handler (or ellipsis **catch** handler) cannot be found for the current exception, the predefined `terminate` run-time function is called."},{"content":"(You can also explicitly call <ph id=\"ph1\">`terminate`</ph> in any of your handlers.) The default action of <ph id=\"ph2\">`terminate`</ph> is to call <ph id=\"ph3\">`abort`</ph>.","pos":[938,1059],"source":" (You can also explicitly call `terminate` in any of your handlers.) The default action of `terminate` is to call `abort`."},{"content":"If you want <ph id=\"ph1\">`terminate`</ph> to call some other function in your program before exiting the application, call the <ph id=\"ph2\">`set_terminate`</ph> function with the name of the function to be called as its single argument.","pos":[1060,1260],"source":" If you want `terminate` to call some other function in your program before exiting the application, call the `set_terminate` function with the name of the function to be called as its single argument."},{"content":"You can call <ph id=\"ph1\">`set_terminate`</ph> at any point in your program.","pos":[1261,1319],"source":" You can call `set_terminate` at any point in your program."},{"content":"The <ph id=\"ph1\">`terminate`</ph> routine always calls the last function given as an argument to <ph id=\"ph2\">`set_terminate`</ph>.","pos":[1320,1415],"source":" The `terminate` routine always calls the last function given as an argument to `set_terminate`."},{"content":"Example","pos":[1424,1431]},{"content":"The following example throws a <ph id=\"ph1\">`char *`</ph> exception, but does not contain a handler designated to catch exceptions of type <ph id=\"ph2\">`char *`</ph>.","pos":[1435,1565],"source":"The following example throws a `char *` exception, but does not contain a handler designated to catch exceptions of type `char *`."},{"content":"The call to <ph id=\"ph1\">`set_terminate`</ph> instructs <ph id=\"ph2\">`terminate`</ph> to call <ph id=\"ph3\">`term_func`</ph>.","pos":[1566,1636],"source":" The call to `set_terminate` instructs `terminate` to call `term_func`."},{"content":"Output","pos":[2121,2127]},{"content":"The <ph id=\"ph1\">`term_func`</ph> function should terminate the program or current thread, ideally by calling <ph id=\"ph2\">`exit`</ph>.","pos":[2186,2285],"source":"The `term_func` function should terminate the program or current thread, ideally by calling `exit`."},{"content":"If it doesn't, and instead returns to its caller, <ph id=\"ph1\">`abort`</ph> is called.","pos":[2286,2354],"source":" If it doesn't, and instead returns to its caller, `abort` is called."},{"content":"See Also","pos":[2363,2371]},{"content":"C++ Exception Handling","pos":[2376,2398]}],"content":"---\ntitle: \"Unhandled C++ Exceptions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"event handlers, unhandled exceptions\"\n  - \"catch keyword [C++], handler not found\"\n  - \"exceptions, unhandled\"\n  - \"C++ exception handling, unhandled exceptions\"\n  - \"unhandled exceptions\"\nms.assetid: 13f09c53-9254-4407-9db9-14e730e047cc\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Unhandled C++ Exceptions\nIf a matching handler (or ellipsis **catch** handler) cannot be found for the current exception, the predefined `terminate` run-time function is called. (You can also explicitly call `terminate` in any of your handlers.) The default action of `terminate` is to call `abort`. If you want `terminate` to call some other function in your program before exiting the application, call the `set_terminate` function with the name of the function to be called as its single argument. You can call `set_terminate` at any point in your program. The `terminate` routine always calls the last function given as an argument to `set_terminate`.  \n  \n## Example  \n The following example throws a `char *` exception, but does not contain a handler designated to catch exceptions of type `char *`. The call to `set_terminate` instructs `terminate` to call `term_func`.  \n  \n```  \n// exceptions_Unhandled_Exceptions.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \nvoid term_func() {  \n   cout << \"term_func was called by terminate.\" << endl;  \n   exit( -1 );  \n}  \nint main() {  \n   try  \n   {  \n      set_terminate( term_func );  \n      throw \"Out of memory!\"; // No catch handler for this exception  \n   }  \n   catch( int )  \n   {  \n      cout << \"Integer exception raised.\" << endl;  \n   }  \n   return 0;  \n}  \n```  \n  \n## Output  \n  \n```  \nterm_func was called by terminate.  \n```  \n  \n The `term_func` function should terminate the program or current thread, ideally by calling `exit`. If it doesn't, and instead returns to its caller, `abort` is called.  \n  \n## See Also  \n [C++ Exception Handling](../cpp/cpp-exception-handling.md)"}