{"nodes":[{"pos":[12,46],"content":"CWindowImpl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CWindowImpl Class | Microsoft Docs","pos":[0,34]}]},{"content":"CWindowImpl Class","pos":[683,700]},{"content":"Provides methods for creating or subclassing a window.","pos":[701,755]},{"pos":[763,913],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)].","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[14,148],"source":" This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."}]},{"content":"Syntax","pos":[922,928]},{"content":"Parameters","pos":[1125,1135]},{"content":"Your new class, derived from <ph id=\"ph1\">`CWindowImpl`</ph>.","pos":[1146,1189],"source":" Your new class, derived from `CWindowImpl`."},{"content":"TBase","pos":[1197,1202]},{"content":"The base class of your class.","pos":[1207,1236]},{"content":"By default, the base class is <bpt id=\"p1\">[</bpt>CWindow<ept id=\"p1\">](../../atl/reference/cwindow-class.md)</ept>.","pos":[1237,1315],"source":" By default, the base class is [CWindow](../../atl/reference/cwindow-class.md)."},{"content":"A <bpt id=\"p1\">[</bpt>traits class<ept id=\"p1\">](../../atl/understanding-window-traits.md)</ept> that defines styles for your window.","pos":[1338,1433],"source":" A [traits class](../../atl/understanding-window-traits.md) that defines styles for your window."},{"content":"The default is <ph id=\"ph1\">`CControlWinTraits`</ph>.","pos":[1434,1469],"source":" The default is `CControlWinTraits`."},{"content":"Members","pos":[1478,1485]},{"content":"Public Methods","pos":[1495,1509]},{"content":"Name","pos":[1516,1520]},{"content":"Description","pos":[1521,1532]},{"content":"CWindowImpl::Create","pos":[1571,1590]},{"content":"Creates a window.","pos":[1614,1631]},{"content":"CWindowImplBaseT Methods","pos":[1642,1666]},{"content":"DefWindowProc","pos":[1688,1701]},{"content":"Provides default message processing.","pos":[1732,1768]},{"content":"GetCurrentMessage","pos":[1774,1791]},{"content":"Returns the current message.","pos":[1826,1854]},{"content":"GetWindowProc","pos":[1860,1873]},{"content":"Returns the current window procedure.","pos":[1904,1941]},{"content":"OnFinalMessage","pos":[1947,1961]},{"pos":[1993,2062],"content":"Called after the last message is received (typically <ph id=\"ph1\">`WM_NCDESTROY`</ph>).","source":"Called after the last message is received (typically `WM_NCDESTROY`)."},{"content":"SubclassWindow","pos":[2068,2082]},{"content":"Subclasses a window.","pos":[2114,2134]},{"content":"UnsubclassWindow","pos":[2140,2156]},{"content":"Restores a previously subclassed window.","pos":[2190,2230]},{"content":"Static Methods","pos":[2241,2255]},{"content":"GetWndClassInfo","pos":[2277,2292]},{"pos":[2325,2458],"content":"Returns a static instance of <bpt id=\"p1\">[</bpt>CWndClassInfo<ept id=\"p1\">](../../atl/reference/cwndclassinfo-class.md)</ept>, which manages the window class information.","source":"Returns a static instance of [CWndClassInfo](../../atl/reference/cwndclassinfo-class.md), which manages the window class information."},{"content":"WindowProc","pos":[2464,2474]},{"content":"Processes messages sent to the window.","pos":[2502,2540]},{"content":"Data Members","pos":[2551,2563]},{"content":"m_pfnSuperWindowProc","pos":[2585,2605]},{"content":"Points to the window class's original window procedure.","pos":[2643,2698]},{"content":"Remarks","pos":[2708,2715]},{"content":"You can use <ph id=\"ph1\">`CWindowImpl`</ph> to create a window or subclass an existing window.","pos":[2719,2795],"source":"You can use `CWindowImpl` to create a window or subclass an existing window."},{"content":"the <ph id=\"ph1\">`CWindowImpl`</ph> window procedure uses a message map to direct messages to the appropriate handlers.","pos":[2796,2897],"source":" the `CWindowImpl` window procedure uses a message map to direct messages to the appropriate handlers."},{"content":"creates a window based on the window class information that's managed by <bpt id=\"p1\">[</bpt>CWndClassInfo<ept id=\"p1\">](../../atl/reference/cwndclassinfo-class.md)</ept>.","pos":[2926,3059],"source":" creates a window based on the window class information that's managed by [CWndClassInfo](../../atl/reference/cwndclassinfo-class.md)."},{"content":"contains the <bpt id=\"p1\">[</bpt>DECLARE_WND_CLASS<ept id=\"p1\">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept> macro, which means <ph id=\"ph1\">`CWndClassInfo`</ph> registers a new window class.","pos":[3074,3243],"source":" contains the [DECLARE_WND_CLASS](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971) macro, which means `CWndClassInfo` registers a new window class."},{"content":"If you want to superclass an existing window class, derive your class from <ph id=\"ph1\">`CWindowImpl`</ph> and include the <bpt id=\"p1\">[</bpt>DECLARE_WND_SUPERCLASS<ept id=\"p1\">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro.","pos":[3244,3452],"source":" If you want to superclass an existing window class, derive your class from `CWindowImpl` and include the [DECLARE_WND_SUPERCLASS](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd) macro."},{"content":"In this case, <ph id=\"ph1\">`CWndClassInfo`</ph> registers a window class that's based on an existing class but uses <ph id=\"ph2\">`CWindowImpl::WindowProc`</ph>.","pos":[3453,3577],"source":" In this case, `CWndClassInfo` registers a window class that's based on an existing class but uses `CWindowImpl::WindowProc`."},{"content":"For example:","pos":[3578,3590]},{"pos":[3608,3628],"content":"NVC_ATL_Windowing#43"},{"pos":[3687,3864],"content":"[!NOTE]\n Because `CWndClassInfo` manages the information for just one window class, each window created through an instance of `CWindowImpl` is based on the same window class.","leadings":["","> "],"nodes":[{"content":"Because <ph id=\"ph1\">`CWndClassInfo`</ph> manages the information for just one window class, each window created through an instance of <ph id=\"ph2\">`CWindowImpl`</ph> is based on the same window class.","pos":[9,175],"source":" Because `CWndClassInfo` manages the information for just one window class, each window created through an instance of `CWindowImpl` is based on the same window class."}]},{"content":"also supports window subclassing.","pos":[3885,3918]},{"content":"The <ph id=\"ph1\">`SubclassWindow`</ph> method attaches an existing window to the <ph id=\"ph2\">`CWindowImpl`</ph> object and changes the window procedure to <ph id=\"ph3\">`CWindowImpl::WindowProc`</ph>.","pos":[3919,4065],"source":" The `SubclassWindow` method attaches an existing window to the `CWindowImpl` object and changes the window procedure to `CWindowImpl::WindowProc`."},{"content":"Each instance of <ph id=\"ph1\">`CWindowImpl`</ph> can subclass a different window.","pos":[4066,4129],"source":" Each instance of `CWindowImpl` can subclass a different window."},{"pos":[4137,4273],"content":"[!NOTE]\n For any given `CWindowImpl` object, call either **Create** or `SubclassWindow`. Don't invoke both methods on the same object.","leadings":["","> "],"nodes":[{"content":" For any given `CWindowImpl` object, call either **Create** or `SubclassWindow`. Don't invoke both methods on the same object.","pos":[8,134],"nodes":[{"content":"For any given <ph id=\"ph1\">`CWindowImpl`</ph> object, call either <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> or <ph id=\"ph2\">`SubclassWindow`</ph>.","pos":[1,80],"source":" For any given `CWindowImpl` object, call either **Create** or `SubclassWindow`."},{"content":"Don't invoke both methods on the same object.","pos":[81,126]}]}]},{"pos":[4280,4444],"content":"In addition to <ph id=\"ph1\">`CWindowImpl`</ph>, ATL provides <bpt id=\"p1\">[</bpt>CContainedWindow<ept id=\"p1\">](../../atl/reference/ccontainedwindowt-class.md)</ept> to create a window that's contained in another object.","source":"In addition to `CWindowImpl`, ATL provides [CContainedWindow](../../atl/reference/ccontainedwindowt-class.md) to create a window that's contained in another object."},{"pos":[4451,4564],"content":"The base class destructor (~ <bpt id=\"p1\">**</bpt>CWindowImplRoot<ept id=\"p1\">**</ept>) ensures that the window is gone before the object is destroyed.","source":"The base class destructor (~ **CWindowImplRoot**) ensures that the window is gone before the object is destroyed."},{"pos":[4585,4749],"content":"derives from <bpt id=\"p1\">**</bpt>CWindowImplBaseT<ept id=\"p1\">**</ept>, which derives from <bpt id=\"p2\">**</bpt>CWindowImplRoot<ept id=\"p2\">**</ept>, which derives from <bpt id=\"p3\">**</bpt>TBase<ept id=\"p3\">**</ept> and <bpt id=\"p4\">[</bpt>CMessageMap<ept id=\"p4\">](../../atl/reference/cmessagemap-class.md)</ept>.","source":" derives from **CWindowImplBaseT**, which derives from **CWindowImplRoot**, which derives from **TBase** and [CMessageMap](../../atl/reference/cmessagemap-class.md)."},{"content":"For more information about","pos":[4756,4782]},{"content":"See","pos":[4783,4786]},{"content":"Creating controls","pos":[4838,4855]},{"content":"ATL Tutorial","pos":[4857,4869]},{"content":"Using windows in ATL","pos":[4926,4946]},{"content":"ATL Window Classes","pos":[4948,4966]},{"content":"ATL Project Wizard","pos":[5005,5023]},{"content":"Creating an ATL Project","pos":[5025,5048]},{"content":"Inheritance Hierarchy","pos":[5107,5128]},{"content":"CMessageMap","pos":[5133,5144]},{"content":"Requirements","pos":[5279,5291]},{"pos":[5295,5315],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlwin.h","source":"**Header:** atlwin.h"},{"pos":[5361,5380],"content":"CWindowImpl::Create"},{"content":"Creates a window based on a new window class.","pos":[5384,5429]},{"content":"Parameters","pos":[5657,5667]},{"content":"[in] The handle to the parent or owner window.","pos":[5687,5733]},{"content":"[in] A <bpt id=\"p1\">[</bpt>RECT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd162897)</ept> structure specifying the position of the window.","pos":[5750,5872],"source":" [in] A [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure specifying the position of the window."},{"content":"The <ph id=\"ph1\">`RECT`</ph> can be passed by pointer or by reference.","pos":[5873,5925],"source":" The `RECT` can be passed by pointer or by reference."},{"content":"[in] Specifies the name of the window.","pos":[5950,5988]},{"content":"The default value is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[5989,6019],"source":" The default value is **NULL**."},{"content":"[in] The style of the window.","pos":[6039,6068]},{"content":"This value is combined with the style provided by the traits class for the window.","pos":[6069,6151]},{"content":"The default value gives the traits class full control over the style.","pos":[6152,6221]},{"content":"For a list of possible values, see <bpt id=\"p1\">[</bpt>CreateWindow<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632679)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[6222,6391],"source":" For a list of possible values, see [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"[in] The extended window style.","pos":[6413,6444]},{"content":"This value is combined with the style provided by the traits class for the window.","pos":[6445,6527]},{"content":"The default value gives the traits class full control over the style.","pos":[6528,6597]},{"content":"For a list of possible values, see <bpt id=\"p1\">[</bpt>CreateWindowEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[6598,6769],"source":" For a list of possible values, see [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"[in] For a child window, the window identifier.","pos":[6790,6837]},{"content":"For a top-level window, a menu handle for the window.","pos":[6838,6891]},{"content":"The default value is <bpt id=\"p1\">**</bpt>0U<ept id=\"p1\">**</ept>.","pos":[6892,6920],"source":" The default value is **0U**."},{"content":"[in] A pointer to window-creation data.","pos":[6946,6985]},{"content":"For a full description, see the description for the final parameter to <bpt id=\"p1\">[</bpt>CreateWindowEx<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms632680)</ept>.","pos":[6986,7134],"source":" For a full description, see the description for the final parameter to [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680)."},{"content":"Return Value","pos":[7144,7156]},{"content":"If successful, the handle to the newly created window.","pos":[7160,7214]},{"content":"Otherwise, <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[7215,7235],"source":" Otherwise, **NULL**."},{"content":"Remarks","pos":[7245,7252]},{"content":"<bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> first registers the window class if it has not yet been registered.","pos":[7256,7334],"source":"**Create** first registers the window class if it has not yet been registered."},{"content":"The newly created window is automatically attached to the <ph id=\"ph1\">`CWindowImpl`</ph> object.","pos":[7335,7414],"source":" The newly created window is automatically attached to the `CWindowImpl` object."},{"pos":[7422,7530],"content":"[!NOTE]\n Do not call **Create** if you have already called [SubclassWindow](#cwindowimpl__subclasswindow).","leadings":["","> "],"nodes":[{"content":"Do not call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> if you have already called <bpt id=\"p2\">[</bpt>SubclassWindow<ept id=\"p2\">](#cwindowimpl__subclasswindow)</ept>.","pos":[9,106],"source":" Do not call **Create** if you have already called [SubclassWindow](#cwindowimpl__subclasswindow)."}]},{"content":"To use a window class that is based on an existing window class, derive your class from <ph id=\"ph1\">`CWindowImpl`</ph> and include the <bpt id=\"p1\">[</bpt>DECLARE_WND_SUPERCLASS<ept id=\"p1\">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro.","pos":[7537,7758],"source":"To use a window class that is based on an existing window class, derive your class from `CWindowImpl` and include the [DECLARE_WND_SUPERCLASS](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd) macro."},{"content":"The existing window class's window procedure is saved in <bpt id=\"p1\">[</bpt>m_pfnSuperWindowProc<ept id=\"p1\">](#cwindowimpl__m_pfnsuperwindowproc)</ept>.","pos":[7759,7875],"source":" The existing window class's window procedure is saved in [m_pfnSuperWindowProc](#cwindowimpl__m_pfnsuperwindowproc)."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>CWindowImpl<ept id=\"p1\">](../../atl/reference/cwindowimpl-class.md)</ept> overview.","pos":[7876,7971],"source":" For more information, see the [CWindowImpl](../../atl/reference/cwindowimpl-class.md) overview."},{"pos":[7979,8119],"content":"[!NOTE]\n If 0 is used as the value for the `MenuOrID` parameter, it must be specified as 0U (the default value) to avoid a compiler error.","leadings":["","> "],"nodes":[{"content":"If 0 is used as the value for the <ph id=\"ph1\">`MenuOrID`</ph> parameter, it must be specified as 0U (the default value) to avoid a compiler error.","pos":[9,138],"source":" If 0 is used as the value for the `MenuOrID` parameter, it must be specified as 0U (the default value) to avoid a compiler error."}]},{"pos":[8172,8198],"content":"CWindowImpl::DefWindowProc"},{"pos":[8202,8302],"content":"Called by <bpt id=\"p1\">[</bpt>WindowProc<ept id=\"p1\">](#cwindowimpl__windowproc)</ept> to process messages not handled by the message map.","source":"Called by [WindowProc](#cwindowimpl__windowproc) to process messages not handled by the message map."},{"content":"Parameters","pos":[8432,8442]},{"content":"[in] The message sent to the window.","pos":[8456,8492]},{"content":"[in] Additional message-specific information.","pos":[8511,8556]},{"content":"[in] Additional message-specific information.","pos":[8575,8620]},{"content":"Return Value","pos":[8630,8642]},{"content":"The result of the message processing.","pos":[8646,8683]},{"content":"Remarks","pos":[8693,8700]},{"pos":[8704,8962],"content":"By default, <ph id=\"ph1\">`DefWindowProc`</ph> calls the <bpt id=\"p1\">[</bpt>CallWindowProc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633571)</ept> Win32 function to send the message information to the window procedure specified in <bpt id=\"p2\">[</bpt>m_pfnSuperWindowProc<ept id=\"p2\">](#cwindowimpl__m_pfnsuperwindowproc)</ept>.","source":"By default, `DefWindowProc` calls the [CallWindowProc](http://msdn.microsoft.com/library/windows/desktop/ms633571) Win32 function to send the message information to the window procedure specified in [m_pfnSuperWindowProc](#cwindowimpl__m_pfnsuperwindowproc)."},{"content":"The function with no parameters automatically retrieves the needed parameters from the current message.","pos":[8969,9072]},{"pos":[9129,9159],"content":"CWindowImpl::GetCurrentMessage"},{"pos":[9163,9224],"content":"Returns the current message, packaged in the <ph id=\"ph1\">`MSG`</ph> structure.","source":"Returns the current message, packaged in the `MSG` structure."},{"content":"Return Value","pos":[9279,9291]},{"content":"The current message.","pos":[9295,9315]},{"pos":[9368,9394],"content":"CWindowImpl::GetWindowProc"},{"pos":[9398,9449],"content":"Returns <ph id=\"ph1\">`WindowProc`</ph>, the current window procedure.","source":"Returns `WindowProc`, the current window procedure."},{"content":"Return Value","pos":[9505,9517]},{"content":"The current window procedure.","pos":[9521,9550]},{"content":"Remarks","pos":[9560,9567]},{"content":"Override this method to replace the window procedure with your own.","pos":[9571,9638]},{"pos":[9693,9721],"content":"CWindowImpl::GetWndClassInfo"},{"pos":[9725,9805],"content":"Called by <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cwindowimpl__create)</ept> to access the window class information.","source":"Called by [Create](#cwindowimpl__create) to access the window class information."},{"content":"Return Value","pos":[9869,9881]},{"pos":[9885,9966],"content":"A static instance of <bpt id=\"p1\">[</bpt>CWndClassInfo<ept id=\"p1\">](../../atl/reference/cwndclassinfo-class.md)</ept>.","source":"A static instance of [CWndClassInfo](../../atl/reference/cwndclassinfo-class.md)."},{"content":"Remarks","pos":[9976,9983]},{"pos":[9987,10179],"content":"By default, <ph id=\"ph1\">`CWindowImpl`</ph> obtains this method through the <bpt id=\"p1\">[</bpt>DECLARE_WND_CLASS<ept id=\"p1\">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept> macro, which specifies a new window class.","source":"By default, `CWindowImpl` obtains this method through the [DECLARE_WND_CLASS](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971) macro, which specifies a new window class."},{"content":"To superclass an existing window class, derive your class from <ph id=\"ph1\">`CWindowImpl`</ph> and include the <bpt id=\"p1\">[</bpt>DECLARE_WND_SUPERCLASS<ept id=\"p1\">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro to override <ph id=\"ph2\">`GetWndClassInfo`</ph>.","pos":[10186,10412],"source":"To superclass an existing window class, derive your class from `CWindowImpl` and include the [DECLARE_WND_SUPERCLASS](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd) macro to override `GetWndClassInfo`."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>CWindowImpl<ept id=\"p1\">](../../atl/reference/cwindowimpl-class.md)</ept> overview.","pos":[10413,10508],"source":" For more information, see the [CWindowImpl](../../atl/reference/cwindowimpl-class.md) overview."},{"pos":[10515,10654],"content":"Besides using the <ph id=\"ph1\">`DECLARE_WND_CLASS`</ph> and <ph id=\"ph2\">`DECLARE_WND_SUPERCLASS`</ph> macros, you can override <ph id=\"ph3\">`GetWndClassInfo`</ph> with your own implementation.","source":"Besides using the `DECLARE_WND_CLASS` and `DECLARE_WND_SUPERCLASS` macros, you can override `GetWndClassInfo` with your own implementation."},{"pos":[10714,10747],"content":"CWindowImpl::m_pfnSuperWindowProc"},{"content":"Depending on the window, points to one of the following window procedures.","pos":[10751,10825]},{"content":"Remarks","pos":[10878,10885]},{"content":"Type of window","pos":[10892,10906]},{"content":"Window procedure","pos":[10907,10923]},{"pos":[10976,11134],"content":"A window based on a new window class, specified through the <bpt id=\"p1\">[</bpt>DECLARE_WND_CLASS<ept id=\"p1\">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept> macro.","source":"A window based on a new window class, specified through the [DECLARE_WND_CLASS](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971) macro."},{"pos":[11135,11230],"content":"The <bpt id=\"p1\">[</bpt>DefWindowProc<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms633572)</ept> Win32 function.","source":"The [DefWindowProc](http://msdn.microsoft.com/library/windows/desktop/ms633572) Win32 function."},{"pos":[11235,11426],"content":"A window based on a window class that modifies an existing class, specified through the <bpt id=\"p1\">[</bpt>DECLARE_WND_SUPERCLASS<ept id=\"p1\">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro.","source":"A window based on a window class that modifies an existing class, specified through the [DECLARE_WND_SUPERCLASS](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd) macro."},{"content":"The existing window class's window procedure.","pos":[11427,11472]},{"content":"A subclassed window.","pos":[11477,11497]},{"content":"The subclassed window's original window procedure.","pos":[11498,11548]},{"pos":[11556,11696],"content":"<bpt id=\"p1\">[</bpt>CWindowImpl::DefWindowProc<ept id=\"p1\">](#cwindowimpl__defwindowproc)</ept> sends message information to the window procedure saved in <ph id=\"ph1\">`m_pfnSuperWindowProc`</ph>.","source":"[CWindowImpl::DefWindowProc](#cwindowimpl__defwindowproc) sends message information to the window procedure saved in `m_pfnSuperWindowProc`."},{"pos":[11750,11777],"content":"CWindowImpl::OnFinalMessage"},{"pos":[11781,11848],"content":"Called after receiving the last message (typically <ph id=\"ph1\">`WM_NCDESTROY`</ph>).","source":"Called after receiving the last message (typically `WM_NCDESTROY`)."},{"content":"Parameters","pos":[11913,11923]},{"content":"[in] A handle to the window being destroyed.","pos":[11937,11981]},{"content":"Remarks","pos":[11991,11998]},{"content":"The default implementation of <ph id=\"ph1\">`OnFinalMessage`</ph> does nothing, but you can override this function to handle cleanup before destroying a window.","pos":[12002,12143],"source":"The default implementation of `OnFinalMessage` does nothing, but you can override this function to handle cleanup before destroying a window."},{"content":"If you want to automatically delete your object upon the window destruction, you can call <ph id=\"ph1\">`delete this;`</ph> in this function.","pos":[12144,12266],"source":" If you want to automatically delete your object upon the window destruction, you can call `delete this;` in this function."},{"pos":[12320,12347],"content":"CWindowImpl::SubclassWindow"},{"pos":[12351,12438],"content":"Subclasses the window identified by <ph id=\"ph1\">`hWnd`</ph> and attaches it to the <ph id=\"ph2\">`CWindowImpl`</ph> object.","source":"Subclasses the window identified by `hWnd` and attaches it to the `CWindowImpl` object."},{"content":"Parameters","pos":[12495,12505]},{"content":"[in] The handle to the window being subclassed.","pos":[12519,12566]},{"content":"Return Value","pos":[12576,12588]},{"pos":[12592,12664],"content":"<bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> if the window is successfully subclassed; otherwise, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept>.","source":"**TRUE** if the window is successfully subclassed; otherwise, **FALSE**."},{"content":"Remarks","pos":[12674,12681]},{"content":"The subclassed window now uses <bpt id=\"p1\">[</bpt>CWindowImpl::WindowProc<ept id=\"p1\">](#cwindowimpl__windowproc)</ept>.","pos":[12685,12768],"source":"The subclassed window now uses [CWindowImpl::WindowProc](#cwindowimpl__windowproc)."},{"content":"The original window procedure is saved in <bpt id=\"p1\">[</bpt>m_pfnSuperWindowProc<ept id=\"p1\">](#cwindowimpl__m_pfnsuperwindowproc)</ept>.","pos":[12769,12870],"source":" The original window procedure is saved in [m_pfnSuperWindowProc](#cwindowimpl__m_pfnsuperwindowproc)."},{"pos":[12878,12976],"content":"[!NOTE]\n Do not call `SubclassWindow` if you have already called [Create](#cwindowimpl__create).","leadings":["","> "],"nodes":[{"content":"Do not call <ph id=\"ph1\">`SubclassWindow`</ph> if you have already called <bpt id=\"p1\">[</bpt>Create<ept id=\"p1\">](#cwindowimpl__create)</ept>.","pos":[9,96],"source":" Do not call `SubclassWindow` if you have already called [Create](#cwindowimpl__create)."}]},{"pos":[13032,13061],"content":"CWindowImpl::UnsubclassWindow"},{"pos":[13065,13238],"content":"Detaches the subclassed window from the <ph id=\"ph1\">`CWindowImpl`</ph> object and restores the original window procedure, saved in <bpt id=\"p1\">[</bpt>m_pfnSuperWindowProc<ept id=\"p1\">](#cwindowimpl__m_pfnsuperwindowproc)</ept>.","source":"Detaches the subclassed window from the `CWindowImpl` object and restores the original window procedure, saved in [m_pfnSuperWindowProc](#cwindowimpl__m_pfnsuperwindowproc)."},{"content":"Return Value","pos":[13286,13298]},{"content":"The handle to the window previously subclassed.","pos":[13302,13349]},{"pos":[13399,13422],"content":"CWindowImpl::WindowProc"},{"content":"This static function implements the window procedure.","pos":[13426,13479]},{"content":"Parameters","pos":[13607,13617]},{"content":"[in] The handle to the window.","pos":[13631,13661]},{"content":"[in] The message sent to the window.","pos":[13678,13714]},{"content":"[in] Additional message-specific information.","pos":[13733,13778]},{"content":"[in] Additional message-specific information.","pos":[13797,13842]},{"content":"Return Value","pos":[13852,13864]},{"content":"The result of the message processing.","pos":[13868,13905]},{"content":"Remarks","pos":[13915,13922]},{"content":"uses the default message map (declared with <bpt id=\"p1\">[</bpt>BEGIN_MSG_MAP<ept id=\"p1\">](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)</ept>) to direct messages to the appropriate handlers.","pos":[13939,14119],"source":" uses the default message map (declared with [BEGIN_MSG_MAP](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)) to direct messages to the appropriate handlers."},{"content":"If necessary, <ph id=\"ph1\">`WindowProc`</ph> calls <bpt id=\"p1\">[</bpt>DefWindowProc<ept id=\"p1\">](#cwindowimpl__defwindowproc)</ept> for additional message processing.","pos":[14120,14232],"source":" If necessary, `WindowProc` calls [DefWindowProc](#cwindowimpl__defwindowproc) for additional message processing."},{"content":"If the final message is not handled, <ph id=\"ph1\">`WindowProc`</ph> does the following:","pos":[14233,14302],"source":" If the final message is not handled, `WindowProc` does the following:"},{"content":"Performs unsubclassing if the window was unsubclassed.","pos":[14312,14366]},{"pos":[14376,14392],"content":"Clears <ph id=\"ph1\">`m_hWnd`</ph>.","source":"Clears `m_hWnd`."},{"pos":[14402,14486],"content":"Calls <bpt id=\"p1\">[</bpt>OnFinalMessage<ept id=\"p1\">](#cwindowimpl__onfinalmessage)</ept> before the window is destroyed.","source":"Calls [OnFinalMessage](#cwindowimpl__onfinalmessage) before the window is destroyed."},{"pos":[14493,14578],"content":"You can override <ph id=\"ph1\">`WindowProc`</ph> to provide a different mechanism for handling messages.","source":"You can override `WindowProc` to provide a different mechanism for handling messages."},{"content":"See Also","pos":[14587,14595]},{"content":"BEGIN_MSG_MAP","pos":[14600,14613]},{"content":"CComControl Class","pos":[14692,14709]},{"content":"Class Overview","pos":[14758,14772]}],"content":"---\ntitle: \"CWindowImpl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CWindowImpl\"\n  - \"ATL.CWindowImpl\"\n  - \"CWindowImpl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CWindowImpl class\"\n  - \"subclassing windows, ATL\"\nms.assetid: 02eefd45-a0a6-4d1b-99f6-dbf627e2cc2f\ncaps.latest.revision: 22\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CWindowImpl Class\nProvides methods for creating or subclassing a window.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)].  \n  \n## Syntax  \n  \n```\ntemplate <class   T, class TBase = CWindow, class TWinTraits = CControlWinTraits>\n    class ATL_NO_VTABLE CWindowImpl :\n    public CWindowImplBaseT<TBase,\n    TWinTraits>\n```    \n  \n#### Parameters  \n `T`  \n Your new class, derived from `CWindowImpl`.  \n  \n *TBase*  \n The base class of your class. By default, the base class is [CWindow](../../atl/reference/cwindow-class.md).  \n  \n `TWinTraits`  \n A [traits class](../../atl/understanding-window-traits.md) that defines styles for your window. The default is `CControlWinTraits`.  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CWindowImpl::Create](#cwindowimpl__create)|Creates a window.|  \n  \n### CWindowImplBaseT Methods  \n  \n|||  \n|-|-|  \n|[DefWindowProc](#cwindowimpl__defwindowproc)|Provides default message processing.|  \n|[GetCurrentMessage](#cwindowimpl__getcurrentmessage)|Returns the current message.|  \n|[GetWindowProc](#cwindowimpl__getwindowproc)|Returns the current window procedure.|  \n|[OnFinalMessage](#cwindowimpl__onfinalmessage)|Called after the last message is received (typically `WM_NCDESTROY`).|  \n|[SubclassWindow](#cwindowimpl__subclasswindow)|Subclasses a window.|  \n|[UnsubclassWindow](#cwindowimpl__unsubclasswindow)|Restores a previously subclassed window.|  \n  \n### Static Methods  \n  \n|||  \n|-|-|  \n|[GetWndClassInfo](#cwindowimpl__getwndclassinfo)|Returns a static instance of [CWndClassInfo](../../atl/reference/cwndclassinfo-class.md), which manages the window class information.|  \n|[WindowProc](#cwindowimpl__windowproc)|Processes messages sent to the window.|  \n  \n### Data Members  \n  \n|||  \n|-|-|  \n|[m_pfnSuperWindowProc](#cwindowimpl__m_pfnsuperwindowproc)|Points to the window class's original window procedure.|  \n  \n## Remarks  \n You can use `CWindowImpl` to create a window or subclass an existing window. the `CWindowImpl` window procedure uses a message map to direct messages to the appropriate handlers.  \n  \n `CWindowImpl::Create` creates a window based on the window class information that's managed by [CWndClassInfo](../../atl/reference/cwndclassinfo-class.md). `CWindowImpl` contains the [DECLARE_WND_CLASS](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971) macro, which means `CWndClassInfo` registers a new window class. If you want to superclass an existing window class, derive your class from `CWindowImpl` and include the [DECLARE_WND_SUPERCLASS](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd) macro. In this case, `CWndClassInfo` registers a window class that's based on an existing class but uses `CWindowImpl::WindowProc`. For example:  \n  \n [!code-cpp[NVC_ATL_Windowing#43](../../atl/codesnippet/cpp/cwindowimpl-class_1.h)]  \n  \n> [!NOTE]\n>  Because `CWndClassInfo` manages the information for just one window class, each window created through an instance of `CWindowImpl` is based on the same window class.  \n  \n `CWindowImpl` also supports window subclassing. The `SubclassWindow` method attaches an existing window to the `CWindowImpl` object and changes the window procedure to `CWindowImpl::WindowProc`. Each instance of `CWindowImpl` can subclass a different window.  \n  \n> [!NOTE]\n>  For any given `CWindowImpl` object, call either **Create** or `SubclassWindow`. Don't invoke both methods on the same object.  \n  \n In addition to `CWindowImpl`, ATL provides [CContainedWindow](../../atl/reference/ccontainedwindowt-class.md) to create a window that's contained in another object.  \n  \n The base class destructor (~ **CWindowImplRoot**) ensures that the window is gone before the object is destroyed.  \n  \n `CWindowImpl` derives from **CWindowImplBaseT**, which derives from **CWindowImplRoot**, which derives from **TBase** and [CMessageMap](../../atl/reference/cmessagemap-class.md).  \n  \n|For more information about|See|  \n|--------------------------------|---------|  \n|Creating controls|[ATL Tutorial](../../atl/active-template-library-atl-tutorial.md)|  \n|Using windows in ATL|[ATL Window Classes](../../atl/atl-window-classes.md)|  \n|ATL Project Wizard|[Creating an ATL Project](../../atl/reference/creating-an-atl-project.md)|  \n  \n## Inheritance Hierarchy  \n [CMessageMap](../../atl/reference/cmessagemap-class.md)  \n  \n `TBase`  \n  \n `CWindowImplRoot`  \n  \n `CWindowImplBaseT`  \n  \n `CWindowImpl`  \n  \n## Requirements  \n **Header:** atlwin.h  \n  \n##  <a name=\"cwindowimpl__create\"></a>  CWindowImpl::Create  \n Creates a window based on a new window class.  \n  \n```\nHWND Create(\n    HWND hWndParent,\n    _U_RECT rect = NULL,\n    LPCTSTR szWindowName = NULL,\n    DWORD dwStyle = 0,\n    DWORD dwExStyle = 0,\n    _U_MENUorID MenuOrID = 0U,\n    LPVOID lpCreateParam = NULL);\n```  \n  \n### Parameters  \n `hWndParent`  \n [in] The handle to the parent or owner window.  \n  \n `rect`  \n [in] A [RECT](http://msdn.microsoft.com/library/windows/desktop/dd162897) structure specifying the position of the window. The `RECT` can be passed by pointer or by reference.  \n  \n `szWindowName`  \n [in] Specifies the name of the window. The default value is **NULL**.  \n  \n `dwStyle`  \n [in] The style of the window. This value is combined with the style provided by the traits class for the window. The default value gives the traits class full control over the style. For a list of possible values, see [CreateWindow](http://msdn.microsoft.com/library/windows/desktop/ms632679) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `dwExStyle`  \n [in] The extended window style. This value is combined with the style provided by the traits class for the window. The default value gives the traits class full control over the style. For a list of possible values, see [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n `MenuOrID`  \n [in] For a child window, the window identifier. For a top-level window, a menu handle for the window. The default value is **0U**.  \n  \n `lpCreateParam`  \n [in] A pointer to window-creation data. For a full description, see the description for the final parameter to [CreateWindowEx](http://msdn.microsoft.com/library/windows/desktop/ms632680).  \n  \n### Return Value  \n If successful, the handle to the newly created window. Otherwise, **NULL**.  \n  \n### Remarks  \n **Create** first registers the window class if it has not yet been registered. The newly created window is automatically attached to the `CWindowImpl` object.  \n  \n> [!NOTE]\n>  Do not call **Create** if you have already called [SubclassWindow](#cwindowimpl__subclasswindow).  \n  \n To use a window class that is based on an existing window class, derive your class from `CWindowImpl` and include the [DECLARE_WND_SUPERCLASS](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd) macro. The existing window class's window procedure is saved in [m_pfnSuperWindowProc](#cwindowimpl__m_pfnsuperwindowproc). For more information, see the [CWindowImpl](../../atl/reference/cwindowimpl-class.md) overview.  \n  \n> [!NOTE]\n>  If 0 is used as the value for the `MenuOrID` parameter, it must be specified as 0U (the default value) to avoid a compiler error.  \n  \n##  <a name=\"cwindowimpl__defwindowproc\"></a>  CWindowImpl::DefWindowProc  \n Called by [WindowProc](#cwindowimpl__windowproc) to process messages not handled by the message map.  \n  \n```\nLRESULT DefWindowProc(\n    UINT uMsg,\n    WPARAM wParam,\n    LPARAM lParam);\n\n    LRESULT DefWindowProc();\n```  \n  \n### Parameters  \n `uMsg`  \n [in] The message sent to the window.  \n  \n `wParam`  \n [in] Additional message-specific information.  \n  \n `lParam`  \n [in] Additional message-specific information.  \n  \n### Return Value  \n The result of the message processing.  \n  \n### Remarks  \n By default, `DefWindowProc` calls the [CallWindowProc](http://msdn.microsoft.com/library/windows/desktop/ms633571) Win32 function to send the message information to the window procedure specified in [m_pfnSuperWindowProc](#cwindowimpl__m_pfnsuperwindowproc).  \n  \n The function with no parameters automatically retrieves the needed parameters from the current message.  \n  \n##  <a name=\"cwindowimpl__getcurrentmessage\"></a>  CWindowImpl::GetCurrentMessage  \n Returns the current message, packaged in the `MSG` structure.  \n  \n```\nconst MSG* GetCurrentMessage();\n```  \n  \n### Return Value  \n The current message.  \n  \n##  <a name=\"cwindowimpl__getwindowproc\"></a>  CWindowImpl::GetWindowProc  \n Returns `WindowProc`, the current window procedure.  \n  \n```\nvirtual WNDPROC GetWindowProc();\n```  \n  \n### Return Value  \n The current window procedure.  \n  \n### Remarks  \n Override this method to replace the window procedure with your own.  \n  \n##  <a name=\"cwindowimpl__getwndclassinfo\"></a>  CWindowImpl::GetWndClassInfo  \n Called by [Create](#cwindowimpl__create) to access the window class information.  \n  \n```\nstatic CWndClassInfo& GetWndClassInfo();\n```  \n  \n### Return Value  \n A static instance of [CWndClassInfo](../../atl/reference/cwndclassinfo-class.md).  \n  \n### Remarks  \n By default, `CWindowImpl` obtains this method through the [DECLARE_WND_CLASS](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971) macro, which specifies a new window class.  \n  \n To superclass an existing window class, derive your class from `CWindowImpl` and include the [DECLARE_WND_SUPERCLASS](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd) macro to override `GetWndClassInfo`. For more information, see the [CWindowImpl](../../atl/reference/cwindowimpl-class.md) overview.  \n  \n Besides using the `DECLARE_WND_CLASS` and `DECLARE_WND_SUPERCLASS` macros, you can override `GetWndClassInfo` with your own implementation.  \n  \n##  <a name=\"cwindowimpl__m_pfnsuperwindowproc\"></a>  CWindowImpl::m_pfnSuperWindowProc  \n Depending on the window, points to one of the following window procedures.  \n  \n```\nWNDPROC m_pfnSuperWindowProc;\n```  \n  \n### Remarks  \n  \n|Type of window|Window procedure|  \n|--------------------|----------------------|  \n|A window based on a new window class, specified through the [DECLARE_WND_CLASS](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971) macro.|The [DefWindowProc](http://msdn.microsoft.com/library/windows/desktop/ms633572) Win32 function.|  \n|A window based on a window class that modifies an existing class, specified through the [DECLARE_WND_SUPERCLASS](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd) macro.|The existing window class's window procedure.|  \n|A subclassed window.|The subclassed window's original window procedure.|  \n  \n [CWindowImpl::DefWindowProc](#cwindowimpl__defwindowproc) sends message information to the window procedure saved in `m_pfnSuperWindowProc`.  \n  \n##  <a name=\"cwindowimpl__onfinalmessage\"></a>  CWindowImpl::OnFinalMessage  \n Called after receiving the last message (typically `WM_NCDESTROY`).  \n  \n```\nvirtual void OnFinalMessage(HWND   hWnd);\n```  \n  \n### Parameters  \n `hWnd`  \n [in] A handle to the window being destroyed.  \n  \n### Remarks  \n The default implementation of `OnFinalMessage` does nothing, but you can override this function to handle cleanup before destroying a window. If you want to automatically delete your object upon the window destruction, you can call `delete this;` in this function.  \n  \n##  <a name=\"cwindowimpl__subclasswindow\"></a>  CWindowImpl::SubclassWindow  \n Subclasses the window identified by `hWnd` and attaches it to the `CWindowImpl` object.  \n  \n```\nBOOL SubclassWindow(HWND   hWnd);\n```  \n  \n### Parameters  \n `hWnd`  \n [in] The handle to the window being subclassed.  \n  \n### Return Value  \n **TRUE** if the window is successfully subclassed; otherwise, **FALSE**.  \n  \n### Remarks  \n The subclassed window now uses [CWindowImpl::WindowProc](#cwindowimpl__windowproc). The original window procedure is saved in [m_pfnSuperWindowProc](#cwindowimpl__m_pfnsuperwindowproc).  \n  \n> [!NOTE]\n>  Do not call `SubclassWindow` if you have already called [Create](#cwindowimpl__create).  \n  \n##  <a name=\"cwindowimpl__unsubclasswindow\"></a>  CWindowImpl::UnsubclassWindow  \n Detaches the subclassed window from the `CWindowImpl` object and restores the original window procedure, saved in [m_pfnSuperWindowProc](#cwindowimpl__m_pfnsuperwindowproc).  \n  \n```\nHWND UnsubclassWindow();\n```  \n  \n### Return Value  \n The handle to the window previously subclassed.  \n  \n##  <a name=\"cwindowimpl__windowproc\"></a>  CWindowImpl::WindowProc  \n This static function implements the window procedure.  \n  \n```\nstatic LRESULT CALLBACK WindowProc(\n    HWND hWnd,\n    UINT uMsg,\n    WPARAM wParam,\n    LPARAM lParam);\n```  \n  \n### Parameters  \n `hWnd`  \n [in] The handle to the window.  \n  \n `uMsg`  \n [in] The message sent to the window.  \n  \n `wParam`  \n [in] Additional message-specific information.  \n  \n `lParam`  \n [in] Additional message-specific information.  \n  \n### Return Value  \n The result of the message processing.  \n  \n### Remarks  \n `WindowProc` uses the default message map (declared with [BEGIN_MSG_MAP](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)) to direct messages to the appropriate handlers. If necessary, `WindowProc` calls [DefWindowProc](#cwindowimpl__defwindowproc) for additional message processing. If the final message is not handled, `WindowProc` does the following:  \n  \n-   Performs unsubclassing if the window was unsubclassed.  \n  \n-   Clears `m_hWnd`.  \n  \n-   Calls [OnFinalMessage](#cwindowimpl__onfinalmessage) before the window is destroyed.  \n  \n You can override `WindowProc` to provide a different mechanism for handling messages.  \n  \n## See Also  \n [BEGIN_MSG_MAP](http://msdn.microsoft.com/library/8bbb5af9-18b1-48c6-880e-166f599ee554)   \n [CComControl Class](../../atl/reference/ccomcontrol-class.md)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}