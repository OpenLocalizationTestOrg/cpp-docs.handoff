{"nodes":[{"pos":[12,44],"content":"_set_error_mode | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_set_error_mode | Microsoft Docs","pos":[0,32]}]},{"pos":[990,1005],"content":"_set_error_mode","linkify":"_set_error_mode","nodes":[{"content":"_set_error_mode","pos":[0,15]}]},{"pos":[1006,1150],"content":"Modifies <ph id=\"ph1\">`__error_mode`</ph> to determine a non-default location where the C runtime writes an error message for an error that might end the program.","source":"Modifies `__error_mode` to determine a non-default location where the C runtime writes an error message for an error that might end the program."},{"pos":[1158,1418],"content":"[!IMPORTANT]\n This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","leadings":["","> "],"nodes":[{"content":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).","pos":[13,258],"nodes":[{"content":"This API cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[1,117],"source":" This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CRT functions not supported with /ZW<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)</ept>.","pos":[118,245],"source":" For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx)."}]}]},{"pos":[1427,1433],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1505,1515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Destination of error messages.","pos":[1532,1562]},{"pos":[1571,1583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the old setting or -1 if an error occurs.","pos":[1587,1636]},{"pos":[1645,1652],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls the error output sink by setting the value of <ph id=\"ph1\">`__error_mode`</ph>.","pos":[1656,1726],"source":"Controls the error output sink by setting the value of `__error_mode`."},{"content":"For example, you can direct output to a standard error or use the <ph id=\"ph1\">`MessageBox`</ph> API.","pos":[1727,1810],"source":" For example, you can direct output to a standard error or use the `MessageBox` API."},{"pos":[1817,1883],"content":"The <ph id=\"ph1\">`modeval`</ph> parameter can be set to one of the following values.","source":"The `modeval` parameter can be set to one of the following values."},{"content":"Parameter","pos":[1890,1899]},{"content":"Description","pos":[1900,1911]},{"pos":[1972,2013],"content":"Error sink is determined by <ph id=\"ph1\">`__app_type`</ph>.","source":"Error sink is determined by `__app_type`."},{"content":"Error sink is a standard error.","pos":[2035,2066]},{"content":"Error sink is a message box.","pos":[2088,2116]},{"pos":[2139,2179],"content":"Report the current <ph id=\"ph1\">`__error_mode`</ph> value.","source":"Report the current `__error_mode` value."},{"content":"If a value other than those listed is passed in, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2187,2366],"source":"If a value other than those listed is passed in, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue,<ph id=\"ph1\">`_set_error_mode`</ph> sets <ph id=\"ph2\">`errno`</ph> to <ph id=\"ph3\">`EINVAL`</ph> and returns -1.","pos":[2367,2461],"source":" If execution is allowed to continue,`_set_error_mode` sets `errno` to `EINVAL` and returns -1."},{"pos":[2468,2734],"content":"When it's used with an <bpt id=\"p1\">[</bpt>assert<ept id=\"p1\">](../../c-runtime-library/reference/assert-macro-assert-wassert.md)</ept>, <ph id=\"ph1\">`_set_error_mode`</ph> displays the failed statement in the dialog box and gives you the option of choosing the <ph id=\"ph2\">`Ignore`</ph> button so that you can continue to run the program.","source":"When it's used with an [assert](../../c-runtime-library/reference/assert-macro-assert-wassert.md), `_set_error_mode` displays the failed statement in the dialog box and gives you the option of choosing the `Ignore` button so that you can continue to run the program."},{"pos":[2743,2755],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2762,2769]},{"content":"Required header","pos":[2770,2785]},{"content":"<ph id=\"ph1\">\\&lt;</ph>stdlib.h&gt;","pos":[2848,2859],"source":"\\<stdlib.h>"},{"pos":[2869,2876],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3320,3328],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3332,3431],"content":"<bpt id=\"p1\">[</bpt>assert Macro, _assert, _wassert<ept id=\"p1\">](../../c-runtime-library/reference/assert-macro-assert-wassert.md)</ept>","source":"[assert Macro, _assert, _wassert](../../c-runtime-library/reference/assert-macro-assert-wassert.md)"}],"content":"---\ntitle: \"_set_error_mode | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_set_error_mode\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-runtime-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"set_error_mode\"\n  - \"_set_error_mode\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_set_error_mode function\"\n  - \"set_error_mode function\"\nms.assetid: f0807be5-73d1-4a32-a701-3c9bdd139c5c\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _set_error_mode\nModifies `__error_mode` to determine a non-default location where the C runtime writes an error message for an error that might end the program.  \n  \n> [!IMPORTANT]\n>  This API cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]. For more information, see [CRT functions not supported with /ZW](http://msdn.microsoft.com/library/windows/apps/jj606124.aspx).  \n  \n## Syntax  \n  \n```  \nint _set_error_mode(  \n   int modeval   \n);  \n```  \n  \n#### Parameters  \n `modeval`  \n Destination of error messages.  \n  \n## Return Value  \n Returns the old setting or -1 if an error occurs.  \n  \n## Remarks  \n Controls the error output sink by setting the value of `__error_mode`. For example, you can direct output to a standard error or use the `MessageBox` API.  \n  \n The `modeval` parameter can be set to one of the following values.  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|`_OUT_TO_DEFAULT`|Error sink is determined by `__app_type`.|  \n|`_OUT_TO_STDERR`|Error sink is a standard error.|  \n|`_OUT_TO_MSGBOX`|Error sink is a message box.|  \n|`_REPORT_ERRMODE`|Report the current `__error_mode` value.|  \n  \n If a value other than those listed is passed in, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue,`_set_error_mode` sets `errno` to `EINVAL` and returns -1.  \n  \n When it's used with an [assert](../../c-runtime-library/reference/assert-macro-assert-wassert.md), `_set_error_mode` displays the failed statement in the dialog box and gives you the option of choosing the `Ignore` button so that you can continue to run the program.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_set_error_mode`|\\<stdlib.h>|  \n  \n## Example  \n  \n```  \n  \n      // crt_set_error_mode.c  \n// compile with: /c  \n#include <stdlib.h>  \n#include <assert.h>  \n  \nint main()  \n{  \n   _set_error_mode(_OUT_TO_STDERR);  \n   assert(2+2==5);  \n}  \n```  \n  \n```Output  \nAssertion failed: 2+2==5, file crt_set_error_mode.c, line 8  \n  \nThis application has requested the Runtime to terminate it in an unusual way.  \nPlease contact the application's support team for more information.  \n```  \n  \n## See Also  \n [assert Macro, _assert, _wassert](../../c-runtime-library/reference/assert-macro-assert-wassert.md)"}