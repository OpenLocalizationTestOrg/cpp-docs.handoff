{"nodes":[{"pos":[12,47],"content":"logical_not Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"logical_not Struct | Microsoft Docs","pos":[0,35]}]},{"pos":[737,755],"content":"logical_not Struct","linkify":"logical_not Struct","nodes":[{"content":"logical_not Struct","pos":[0,18]}]},{"pos":[756,856],"content":"A predefined function object that performs the logical not operation ( <ph id=\"ph1\">`operator!`</ph>) on its argument.","source":"A predefined function object that performs the logical not operation ( `operator!`) on its argument."},{"pos":[865,871],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1233,1243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Any type that supports an <ph id=\"ph1\">`operator!`</ph> that takes an operand of the specified or inferred type.","pos":[1257,1351],"source":" Any type that supports an `operator!` that takes an operand of the specified or inferred type."},{"content":"The operand of the logical not operation.","pos":[1368,1409]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1410,1487],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`Type`</ph>.","pos":[1488,1602],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `Type`."},{"pos":[1611,1623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The result of <ph id=\"ph1\">`!``Left`</ph>.","pos":[1627,1651],"source":"The result of `!``Left`."},{"content":"The specialized template does perfect forwarding of the result, which has the type that's returned by <ph id=\"ph1\">`operator!`</ph>.","pos":[1652,1766],"source":" The specialized template does perfect forwarding of the result, which has the type that's returned by `operator!`."},{"pos":[1775,1782],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2946,2958],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2962,2987],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[2994,3012],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[3021,3029],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[3033,3143],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C++ Standard Library Reference<ept id=\"p1\">](../standard-library/cpp-standard-library-reference.md)</ept>","pos":[3146,3234],"source":" [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)"}],"content":"---\ntitle: \"logical_not Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.logical_not\"\n  - \"logical_not\"\n  - \"xfunctional/std::logical_not\"\n  - \"std::logical_not\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"logical_not class\"\n  - \"logical_not struct\"\nms.assetid: 892db678-31da-4540-974b-17b05efc0849\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# logical_not Struct\nA predefined function object that performs the logical not operation ( `operator!`) on its argument.  \n  \n## Syntax  \n  \n```\ntemplate <class Type = void>\nstruct logical_not : public unary_function<Type, bool>  \n{\n    bool operator()(const Type& Left) const;\n};\n\n// specialized transparent functor for operator!\ntemplate <>\nstruct logical_not<void>  \n{\n  template <class Type>\n  auto operator()(Type&& Left) const`\n     -> decltype(!std::forward<Type>(Left));\n };\n```  \n  \n#### Parameters  \n `Type`  \n Any type that supports an `operator!` that takes an operand of the specified or inferred type.  \n  \n `Left`  \n The operand of the logical not operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `Type`.  \n  \n## Return Value  \n The result of `!``Left`. The specialized template does perfect forwarding of the result, which has the type that's returned by `operator!`.  \n  \n## Example  \n  \n```cpp  \n// functional_logical_not.cpp  \n// compile with: /EHsc  \n#include <deque>  \n#include <algorithm>  \n#include <functional>  \n#include <iostream>  \n  \nint main( )  \n{  \n   using namespace std;  \n   deque<bool> d1, d2 ( 7 );  \n   deque<bool>::iterator iter1, iter2;  \n  \n   int i;  \n   for ( i = 0 ; i < 7 ; i++ )  \n   {  \n      d1.push_back((bool)((i % 2) != 0));  \n   }  \n  \n   cout << boolalpha;    // boolalpha I/O flag on  \n  \n   cout << \"Original deque:\\n d1 = ( \" ;  \n   for ( iter1 = d1.begin( ) ; iter1 != d1.end( ) ; iter1++ )  \n      cout << *iter1 << \" \";  \n   cout << \")\" << endl;  \n  \n   // To flip all the truth values of the elements,  \n   // use the logical_not function object  \n   transform( d1.begin( ), d1.end( ), d2.begin( ),logical_not<bool>( ) );  \n   cout << \"The deque with its values negated is:\\n d2 = ( \" ;  \n   for ( iter2 = d2.begin( ) ; iter2 != d2.end( ) ; iter2++ )  \n      cout << *iter2 << \" \";  \n   cout << \")\" << endl;  \n}  \n/* Output:  \nOriginal deque:  \n d1 = ( false true false true false true false )  \nThe deque with its values negated is:  \n d2 = ( true false true false true false true )  \n */  \n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}