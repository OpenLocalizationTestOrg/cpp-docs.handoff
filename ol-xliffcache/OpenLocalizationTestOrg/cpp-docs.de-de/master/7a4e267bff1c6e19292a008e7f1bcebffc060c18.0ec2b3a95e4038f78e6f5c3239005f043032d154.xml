{"nodes":[{"pos":[12,46],"content":"task_handle Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"task_handle Class | Microsoft Docs","pos":[0,34]}]},{"content":"task_handle Class","pos":[622,639]},{"content":"The <ph id=\"ph1\">`task_handle`</ph> class represents an individual parallel work item.","pos":[640,708],"source":"The `task_handle` class represents an individual parallel work item."},{"content":"It encapsulates the instructions and the data required to execute a piece of work.","pos":[709,791]},{"content":"Syntax","pos":[800,806]},{"content":"Parameters","pos":[942,952]},{"content":"The type of the function object that will be invoked to execute the work represented by the <ph id=\"ph1\">`task_handle`</ph> object.","pos":[971,1084],"source":" The type of the function object that will be invoked to execute the work represented by the `task_handle` object."},{"content":"Members","pos":[1093,1100]},{"content":"Public Constructors","pos":[1110,1129]},{"content":"Name","pos":[1136,1140]},{"content":"Description","pos":[1141,1152]},{"content":"task_handle::task_handle Constructor","pos":[1191,1227]},{"content":"Constructs a new <ph id=\"ph1\">`task_handle`</ph> object.","pos":[1236,1274],"source":"Constructs a new `task_handle` object."},{"content":"The work of the task is performed by invoking the function specified as a parameter to the constructor.","pos":[1275,1378]},{"content":"task_handle::~task_handle Destructor","pos":[1384,1420]},{"pos":[1429,1463],"content":"Destroys the <ph id=\"ph1\">`task_handle`</ph> object.","source":"Destroys the `task_handle` object."},{"content":"Public Operators","pos":[1474,1490]},{"content":"Name","pos":[1497,1501]},{"content":"Description","pos":[1502,1513]},{"content":"task_handle::operator() Operator","pos":[1552,1584]},{"content":"The function call operator that the runtime invokes to perform the work of the task handle.","pos":[1615,1706]},{"content":"Remarks","pos":[1716,1723]},{"content":"objects can be used in conjunction with a <ph id=\"ph1\">`structured_task_group`</ph> or a more general <ph id=\"ph2\">`task_group`</ph> object, to decompose work into parallel tasks.","pos":[1741,1884],"source":" objects can be used in conjunction with a `structured_task_group` or a more general `task_group` object, to decompose work into parallel tasks."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Task Parallelism<ept id=\"p1\">](../../../parallel/concrt/task-parallelism-concurrency-runtime.md)</ept>.","pos":[1885,1996],"source":" For more information, see [Task Parallelism](../../../parallel/concrt/task-parallelism-concurrency-runtime.md)."},{"content":"Note that the creator of a <ph id=\"ph1\">`task_handle`</ph> object is responsible for maintaining the lifetime of the created <ph id=\"ph2\">`task_handle`</ph> object until it is no longer required by the Concurrency Runtime.","pos":[2003,2189],"source":"Note that the creator of a `task_handle` object is responsible for maintaining the lifetime of the created `task_handle` object until it is no longer required by the Concurrency Runtime."},{"content":"Typically, this means that the <ph id=\"ph1\">`task_handle`</ph> object must not destruct until either the <ph id=\"ph2\">`wait`</ph> or <ph id=\"ph3\">`run_and_wait`</ph> method of the <ph id=\"ph4\">`task_group`</ph> or <ph id=\"ph5\">`structured_task_group`</ph> to which it is queued has been called.","pos":[2190,2394],"source":" Typically, this means that the `task_handle` object must not destruct until either the `wait` or `run_and_wait` method of the `task_group` or `structured_task_group` to which it is queued has been called."},{"content":"objects are typically used in conjunction with C++ lambdas.","pos":[2415,2474]},{"content":"Because you do not know the true type of the lambda, the <bpt id=\"p1\">[</bpt>make_task<ept id=\"p1\">](concurrency-namespace-functions.md#make_task)</ept> function is typically used to create a <ph id=\"ph1\">`task_handle`</ph> object.","pos":[2475,2650],"source":" Because you do not know the true type of the lambda, the [make_task](concurrency-namespace-functions.md#make_task) function is typically used to create a `task_handle` object."},{"content":"The runtime creates a copy of the work function that you pass to a <ph id=\"ph1\">`task_handle`</ph> object.","pos":[2657,2745],"source":"The runtime creates a copy of the work function that you pass to a `task_handle` object."},{"content":"Therefore, any state changes that occur in a function object that you pass to a <ph id=\"ph1\">`task_handle`</ph> object will not appear in your copy of that function object.","pos":[2746,2900],"source":" Therefore, any state changes that occur in a function object that you pass to a `task_handle` object will not appear in your copy of that function object."},{"content":"Inheritance Hierarchy","pos":[2909,2930]},{"content":"Requirements","pos":[2956,2968]},{"pos":[2972,2989],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> ppl.h","source":"**Header:** ppl.h"},{"pos":[2996,3022],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[3075,3107],"content":"task_handle::operator() Operator"},{"content":"The function call operator that the runtime invokes to perform the work of the task handle.","pos":[3111,3202]},{"pos":[3289,3325],"content":"task_handle::task_handle Constructor"},{"content":"Constructs a new <ph id=\"ph1\">`task_handle`</ph> object.","pos":[3329,3367],"source":"Constructs a new `task_handle` object."},{"content":"The work of the task is performed by invoking the function specified as a parameter to the constructor.","pos":[3368,3471]},{"content":"Parameters","pos":[3533,3543]},{"content":"The function that will be invoked to execute the work represented by the <ph id=\"ph1\">`task_handle`</ph> object.","pos":[3558,3652],"source":" The function that will be invoked to execute the work represented by the `task_handle` object."},{"content":"This may be a lambda functor, a pointer to a function, or any object that supports a version of the function call operator with the signature <ph id=\"ph1\">`void operator()()`</ph>.","pos":[3653,3815],"source":" This may be a lambda functor, a pointer to a function, or any object that supports a version of the function call operator with the signature `void operator()()`."},{"content":"Remarks","pos":[3825,3832]},{"content":"The runtime creates a copy of the work function that you pass to the constructor.","pos":[3836,3917]},{"content":"Therefore, any state changes that occur in a function object that you pass to a <ph id=\"ph1\">`task_handle`</ph> object will not appear in your copy of that function object.","pos":[3918,4072],"source":" Therefore, any state changes that occur in a function object that you pass to a `task_handle` object will not appear in your copy of that function object."},{"pos":[4103,4139],"content":"task_handle::~task_handle Destructor"},{"pos":[4143,4177],"content":"Destroys the <ph id=\"ph1\">`task_handle`</ph> object.","source":"Destroys the `task_handle` object."},{"content":"See Also","pos":[4217,4225]},{"content":"concurrency Namespace","pos":[4230,4251]},{"content":"task_group Class","pos":[4284,4300]},{"content":"structured_task_group Class","pos":[4328,4355]}],"content":"---\ntitle: \"task_handle Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"ppl/concurrency::task_handle\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"task_handle class\"\nms.assetid: 74a34b15-708b-4231-a509-947874292b13\ncaps.latest.revision: 23\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# task_handle Class\nThe `task_handle` class represents an individual parallel work item. It encapsulates the instructions and the data required to execute a piece of work.  \n  \n## Syntax  \n  \n```  \ntemplate<\n    typename _Function  \n>  \nclass task_handle : public ::Concurrency::details::_UnrealizedChore;  \n```  \n  \n#### Parameters  \n `_Function`  \n The type of the function object that will be invoked to execute the work represented by the `task_handle` object.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[task_handle::task_handle Constructor](#ctor)|Constructs a new `task_handle` object. The work of the task is performed by invoking the function specified as a parameter to the constructor.|  \n|[task_handle::~task_handle Destructor](#dtor)|Destroys the `task_handle` object.|  \n  \n### Public Operators  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[task_handle::operator() Operator](#task_handle__operator_call)|The function call operator that the runtime invokes to perform the work of the task handle.|  \n  \n## Remarks  \n `task_handle` objects can be used in conjunction with a `structured_task_group` or a more general `task_group` object, to decompose work into parallel tasks. For more information, see [Task Parallelism](../../../parallel/concrt/task-parallelism-concurrency-runtime.md).  \n  \n Note that the creator of a `task_handle` object is responsible for maintaining the lifetime of the created `task_handle` object until it is no longer required by the Concurrency Runtime. Typically, this means that the `task_handle` object must not destruct until either the `wait` or `run_and_wait` method of the `task_group` or `structured_task_group` to which it is queued has been called.  \n  \n `task_handle` objects are typically used in conjunction with C++ lambdas. Because you do not know the true type of the lambda, the [make_task](concurrency-namespace-functions.md#make_task) function is typically used to create a `task_handle` object.  \n  \n The runtime creates a copy of the work function that you pass to a `task_handle` object. Therefore, any state changes that occur in a function object that you pass to a `task_handle` object will not appear in your copy of that function object.  \n  \n## Inheritance Hierarchy  \n `task_handle`  \n  \n## Requirements  \n **Header:** ppl.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"task_handle__operator_call\"></a>  task_handle::operator() Operator  \n The function call operator that the runtime invokes to perform the work of the task handle.  \n  \n```  \nvoid operator()() const;\n\n \n```  \n  \n##  <a name=\"task_handle__ctor\"></a>  task_handle::task_handle Constructor  \n Constructs a new `task_handle` object. The work of the task is performed by invoking the function specified as a parameter to the constructor.  \n  \n```  \ntask_handle(const _Function& _Func);\n```  \n  \n### Parameters  \n `_Func`  \n The function that will be invoked to execute the work represented by the `task_handle` object. This may be a lambda functor, a pointer to a function, or any object that supports a version of the function call operator with the signature `void operator()()`.  \n  \n### Remarks  \n The runtime creates a copy of the work function that you pass to the constructor. Therefore, any state changes that occur in a function object that you pass to a `task_handle` object will not appear in your copy of that function object.  \n  \n##  <a name=\"dtor\"></a>  task_handle::~task_handle Destructor  \n Destroys the `task_handle` object.  \n  \n```  \n~task_handle();\n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [task_group Class](task-group-class.md)   \n [structured_task_group Class](structured-task-group-class.md)\n"}