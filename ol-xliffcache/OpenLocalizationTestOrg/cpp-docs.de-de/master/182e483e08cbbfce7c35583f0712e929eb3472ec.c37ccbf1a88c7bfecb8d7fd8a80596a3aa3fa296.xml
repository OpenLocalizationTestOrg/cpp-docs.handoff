{"nodes":[{"pos":[12,52],"content":"Receiving Notifications | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Receiving Notifications | Microsoft Docs","pos":[0,40]}]},{"content":"Receiving Notifications","pos":[827,850]},{"content":"OLE DB provides interfaces for receiving notifications when events occur.","pos":[851,924]},{"content":"These are described in <bpt id=\"p1\">[</bpt>OLE DB Object Notifications<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/ms725406.aspx)</ept> in the <bpt id=\"p2\">*</bpt>OLE DB Programmer's Reference<ept id=\"p2\">*</ept>.","pos":[925,1073],"source":" These are described in [OLE DB Object Notifications](https://msdn.microsoft.com/en-us/library/ms725406.aspx) in the *OLE DB Programmer's Reference*."},{"content":"Setup of these events uses the standard COM connection-point mechanism.","pos":[1074,1145]},{"content":"For example, an ATL object that wants to retrieve events through <ph id=\"ph1\">`IRowsetNotify`</ph> implements the <ph id=\"ph2\">`IRowsetNotify`</ph> interface by adding <ph id=\"ph3\">`IRowsetNotify`</ph> to the class-derived list and exposing it through a <bpt id=\"p1\">**</bpt>COM_INTERFACE_ENTRY<ept id=\"p1\">**</ept> macro.","pos":[1146,1376],"source":" For example, an ATL object that wants to retrieve events through `IRowsetNotify` implements the `IRowsetNotify` interface by adding `IRowsetNotify` to the class-derived list and exposing it through a **COM_INTERFACE_ENTRY** macro."},{"content":"has three methods, which can be called at various times.","pos":[1399,1455]},{"content":"If you want to respond to only one of these methods, you can use the <bpt id=\"p1\">[</bpt>IRowsetNotifyImpl<ept id=\"p1\">](../../data/oledb/irowsetnotifyimpl-class.md)</ept> class, which returns <bpt id=\"p2\">**</bpt>E_NOTIMPL<ept id=\"p2\">**</ept> for the methods you are not interested in.","pos":[1456,1667],"source":" If you want to respond to only one of these methods, you can use the [IRowsetNotifyImpl](../../data/oledb/irowsetnotifyimpl-class.md) class, which returns **E_NOTIMPL** for the methods you are not interested in."},{"pos":[1674,1855],"content":"When you create the rowset, you must tell the provider that you want the returned rowset object to support <bpt id=\"p1\">**</bpt>IConnectionPointContainer<ept id=\"p1\">**</ept>, which is needed to set up the notification.","source":"When you create the rowset, you must tell the provider that you want the returned rowset object to support **IConnectionPointContainer**, which is needed to set up the notification."},{"content":"The following code shows how to open the rowset from an ATL object and use the <ph id=\"ph1\">`AtlAdvise`</ph> function to set up the notification sink.","pos":[1862,1994],"source":"The following code shows how to open the rowset from an ATL object and use the `AtlAdvise` function to set up the notification sink."},{"content":"returns a cookie that is used when you call <ph id=\"ph1\">`AtlUnadvise`</ph>.","pos":[2007,2065],"source":" returns a cookie that is used when you call `AtlUnadvise`."},{"content":"See Also","pos":[2328,2336]},{"content":"Using Accessors","pos":[2341,2356]}],"content":"---\ntitle: \"Receiving Notifications | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"notifications [C++], OLE DB consumers\"\n  - \"receiving notifications in OLE DB\"\n  - \"events [C++], notifications in OLE DB\"\n  - \"notifications [C++], events\"\n  - \"OLE DB consumers, notifications\"\n  - \"rowsets, event notifications\"\n  - \"OLE DB providers, notifications\"\nms.assetid: 305a1103-0c87-40c8-94bc-7fbbdd52ae32\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Receiving Notifications\nOLE DB provides interfaces for receiving notifications when events occur. These are described in [OLE DB Object Notifications](https://msdn.microsoft.com/en-us/library/ms725406.aspx) in the *OLE DB Programmer's Reference*. Setup of these events uses the standard COM connection-point mechanism. For example, an ATL object that wants to retrieve events through `IRowsetNotify` implements the `IRowsetNotify` interface by adding `IRowsetNotify` to the class-derived list and exposing it through a **COM_INTERFACE_ENTRY** macro.  \n  \n `IRowsetNotify` has three methods, which can be called at various times. If you want to respond to only one of these methods, you can use the [IRowsetNotifyImpl](../../data/oledb/irowsetnotifyimpl-class.md) class, which returns **E_NOTIMPL** for the methods you are not interested in.  \n  \n When you create the rowset, you must tell the provider that you want the returned rowset object to support **IConnectionPointContainer**, which is needed to set up the notification.  \n  \n The following code shows how to open the rowset from an ATL object and use the `AtlAdvise` function to set up the notification sink. `AtlAdvise` returns a cookie that is used when you call `AtlUnadvise`.  \n  \n```  \nCDBPropSet propset(DBPROPSET_ROWSET);  \npropset.AddProperty(DBPROP_IConnectionPointContainer, true);  \n  \nproduct.Open(session, _T(\"Products\"), &propset);  \n  \nAtlAdvise(product.m_spRowset, GetUnknown(), IID_IRowsetNotify, &m_dwCookie);  \n```  \n  \n## See Also  \n [Using Accessors](../../data/oledb/using-accessors.md)"}