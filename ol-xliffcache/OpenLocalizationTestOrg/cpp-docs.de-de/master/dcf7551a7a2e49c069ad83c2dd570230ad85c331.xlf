<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dcf7551a7a2e49c069ad83c2dd570230ad85c331</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\odbc\record-field-exchange-how-rfx-works.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b12ee2acc3b62838ab1cfae42d61927160d06655</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">913d198a04b85db4ae7c4b2ba2b3839c8252e591</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Record Field Exchange: How RFX Works | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Record Field Exchange: How RFX Works</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic explains the RFX process.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is an advanced topic covering:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>RFX and the recordset</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The RFX process</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic applies to classes derived from <ph id="ph1">`CRecordset`</ph> in which bulk row fetching has not been implemented.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you are using bulk row fetching, bulk record field exchange (Bulk RFX) is implemented.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Bulk RFX is similar to RFX.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To understand the differences, see <bpt id="p1">[</bpt>Recordset: Fetching Records in Bulk (ODBC)<ept id="p1">](../../data/odbc/recordset-fetching-records-in-bulk-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>RFX and the Recordset</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The recordset object's field data members, taken together, constitute an edit buffer that holds the selected columns of one record.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When the recordset is first opened and is about to read the first record, RFX binds (associates) each selected column to the address of the appropriate field data member.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When the recordset updates a record, RFX calls ODBC API functions to send a SQL <bpt id="p1">**</bpt>UPDATE<ept id="p1">**</ept> or <bpt id="p2">**</bpt>INSERT<ept id="p2">**</ept> statement to the driver.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>RFX uses its knowledge of the field data members to specify the columns to write.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The framework backs up the edit buffer at certain stages so it can restore its contents if necessary.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>RFX backs up the edit buffer before adding a new record and before editing an existing record.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It restores the edit buffer in some cases, for example, after an <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> call following <ph id="ph1">`AddNew`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The edit buffer is not restored if you abandon a newly changed edit buffer by, for example, moving to another record before calling <bpt id="p1">**</bpt>Update<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Besides exchanging data between the data source and the recordset's field data members, RFX manages binding parameters.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When the recordset is opened, any parameter data members are bound in the order of the "?" placeholders in the SQL statement that <ph id="ph1">`CRecordset::Open`</ph> constructs.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Recordset: Parameterizing a Recordset (ODBC)<ept id="p1">](../../data/odbc/recordset-parameterizing-a-recordset-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Your recordset class's override of <ph id="ph1">`DoFieldExchange`</ph> does all the work, moving data in both directions.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Like dialog data exchange (DDX), RFX needs information about the data members of your class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The wizard provides the necessary information by writing a recordset-specific implementation of <ph id="ph1">`DoFieldExchange`</ph> for you, based on the field data member names and data types you specify with the wizard.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Record Field Exchange Process</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This section describes the sequence of RFX events as a recordset object is opened and as you add, update, and delete records.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The table <bpt id="p1">[</bpt>Sequence of RFX Operations During Recordset Open<ept id="p1">](#_core_sequence_of_rfx_operations_during_recordset_open)</ept> and the table <bpt id="p2">[</bpt>Sequence of RFX Operations During Scrolling<ept id="p2">](#_core_sequence_of_rfx_operations_during_scrolling)</ept> in this topic show the process as RFX processes a <bpt id="p3">**</bpt>Move<ept id="p3">**</ept> command in the recordset and as RFX manages an update.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>During these processes, <bpt id="p1">[</bpt>DoFieldExchange<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__dofieldexchange)</ept> is called to perform many different operations.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>m_nOperation<ept id="p1">**</ept> data member of the <bpt id="p2">[</bpt>CFieldExchange<ept id="p2">](../../mfc/reference/cfieldexchange-class.md)</ept> object determines which operation is requested.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You might find it helpful to read <bpt id="p1">[</bpt>Recordset: How Recordsets Select Records (ODBC)<ept id="p1">](../../data/odbc/recordset-how-recordsets-select-records-odbc.md)</ept> and <bpt id="p2">[</bpt>Recordset: How Recordsets Update Records (ODBC)<ept id="p2">](../../data/odbc/recordset-how-recordsets-update-records-odbc.md)</ept> before you read this material.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>RFX: Initial Binding of Columns and Parameters</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following RFX activities occur, in the order shown, when you call a recordset object's <bpt id="p1">[</bpt>Open<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__open)</ept> member function:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the recordset has parameter data members, the framework calls <ph id="ph1">`DoFieldExchange`</ph> to bind the parameters to parameter placeholders in the recordset's SQL statement string.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A data type-dependent representation of the value of the parameter is used for each placeholder found in the <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This occurs after the SQL statement is prepared but before it is executed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For information about statement preparation, see the <bpt id="p1">**</bpt>::SQLPrepare<ept id="p1">**</ept> function in the ODBC <bpt id="p2">*</bpt>Programmer's Reference<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The framework calls <ph id="ph1">`DoFieldExchange`</ph> a second time to bind the values of selected columns to corresponding field data members in the recordset.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This establishes the recordset object as an edit buffer containing the columns of the first record.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The recordset executes the SQL statement and the data source selects the first record.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The record's columns are loaded into the recordset's field data members.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following table shows the sequence of RFX operations when you open a recordset.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Sequence of RFX Operations During Recordset Open</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Your operation</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>DoFieldExchange operation</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Database/SQL operation</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>1. Open recordset.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>2. Build a SQL statement.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>3. Send the SQL.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>4. Bind parameter data members.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>5. Bind field data members to columns.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>6. ODBC does the move and fills in the data.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>7. Fix up the data for C++.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Recordsets use ODBC's prepared execution to allow for fast requerying with the same SQL statement.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information about prepared execution, see the ODBC SDK <bpt id="p1">*</bpt>Programmer's Reference<ept id="p1">*</ept> in the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>RFX: Scrolling</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When you scroll from one record to another, the framework calls <ph id="ph1">`DoFieldExchange`</ph> to replace the values previously stored in the field data members with values for the new record.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following table shows the sequence of RFX operations when the user moves from record to record.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Sequence of RFX Operations During Scrolling</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Your operation</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>DoFieldExchange operation</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Database/SQL operation</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>1. Call <ph id="ph1">`MoveNext`</ph> or one of the other Move functions.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>2. ODBC does the move and fills in the data.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>3. Fix up the data for C++.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>RFX: Adding New Records and Editing Existing Records</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If you add a new record, the recordset operates as an edit buffer to build up the contents of the new record.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>As with adding records, editing records involves changing the values of the recordset's field data members.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>From the RFX perspective, the sequence is as follows:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Your call to the recordset's <bpt id="p1">[</bpt>AddNew<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__addnew)</ept> or <bpt id="p2">[</bpt>Edit<ept id="p2">](../../mfc/reference/crecordset-class.md#crecordset__edit)</ept> member function causes RFX to store the current edit buffer so it can be restored later.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>or <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> prepares the fields in the edit buffer so RFX can detect changed field data members.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Because a new record has no previous values to compare new ones with, <ph id="ph1">`AddNew`</ph> sets the value of each field data member to a <bpt id="p1">**</bpt>PSEUDO_NULL<ept id="p1">**</ept> value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Later, when you call <bpt id="p1">**</bpt>Update<ept id="p1">**</ept>, RFX compares each data member's value with the <bpt id="p2">**</bpt>PSEUDO_NULL<ept id="p2">**</ept> value.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If there is a difference, the data member has been set.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">**</bpt>PSEUDO_NULL<ept id="p1">**</ept> is not the same as a record column with a true Null value nor is either of these the same as C++ <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>.)</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Unlike the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> call for <ph id="ph1">`AddNew`</ph>, the <bpt id="p2">**</bpt>Update<ept id="p2">**</ept> call for <bpt id="p3">**</bpt>Edit<ept id="p3">**</ept> compares updated values with previously stored values rather than using <bpt id="p4">**</bpt>PSEUDO_NULL<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The difference is that <ph id="ph1">`AddNew`</ph> has no previously stored values for comparison.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You directly set the values of field data members whose values you want to edit or that you want filled for a new record.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This can include calling <ph id="ph1">`SetFieldNull`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Your call to <bpt id="p1">[</bpt>Update<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__update)</ept> checks for changed field data members, as described in step 2 (see the table <bpt id="p2">[</bpt>Sequence of RFX Operations During Scrolling<ept id="p2">](#_core_sequence_of_rfx_operations_during_scrolling)</ept>).</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If none have changed, <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> returns 0.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If some field data members have changed, <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> prepares and executes a SQL <bpt id="p2">**</bpt>INSERT<ept id="p2">**</ept> statement that contains values for all updated fields in the record.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`AddNew`</ph>, <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> concludes by restoring the previously stored values of the record that was current before the <ph id="ph2">`AddNew`</ph> call.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, the new, edited values remain in place.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following table shows the sequence of RFX operations when you add a new record or edit an existing record.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Sequence of RFX Operations During AddNew and Edit</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Your operation</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>DoFieldExchange operation</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Database/SQL operation</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>1. Call <ph id="ph1">`AddNew`</ph> or <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>2. Back up the edit buffer.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>3. For <ph id="ph1">`AddNew`</ph>, mark field data members as "clean" and Null.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>4. Assign values to recordset field data members.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>5. Call <bpt id="p1">**</bpt>Update<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>6. Check for changed fields.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>7. Build SQL <bpt id="p1">**</bpt>INSERT<ept id="p1">**</ept> statement for <ph id="ph1">`AddNew`</ph> or <bpt id="p2">**</bpt>UPDATE<ept id="p2">**</ept> statement for <bpt id="p3">**</bpt>Edit<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>8. Send the SQL.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>9. For <ph id="ph1">`AddNew`</ph>, restore the edit buffer to its backed-up contents.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, delete the backup.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>RFX: Deleting Existing Records</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>When you delete a record, RFX sets all the fields to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> as a reminder that the record is deleted and you must move off it.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You do not need any other RFX sequence information.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Record Field Exchange (RFX)</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>MFC ODBC Consume</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Macros, Global Functions, and Global Variables</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>CFieldExchange Class</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>CRecordset::DoFieldExchange</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>