{"nodes":[{"pos":[12,43],"content":"property (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"property (C++) | Microsoft Docs","pos":[0,31]}]},{"content":"property (C++)","pos":[679,693]},{"content":"Microsoft Specific","pos":[696,714]},{"content":"This attribute can be applied to non-static \"virtual data members\" in a class or structure definition.","pos":[723,825]},{"content":"The compiler treats these \"virtual data members\" as data members by changing their references into function calls.","pos":[826,940]},{"content":"Syntax","pos":[949,955]},{"content":"Remarks","pos":[1178,1185]},{"content":"When the compiler sees a data member declared with this attribute on the right of a member-selection operator (\"<bpt id=\"p1\">**</bpt>.<ept id=\"p1\">**</ept>\" or \"<bpt id=\"p2\">**</bpt><ph id=\"ph1\">-&gt;</ph><ept id=\"p2\">**</ept>\"), it converts the operation to a <bpt id=\"p3\">**</bpt>get<ept id=\"p3\">**</ept> or <bpt id=\"p4\">**</bpt>put<ept id=\"p4\">**</ept> function, depending on whether such an expression is an l-value or an r-value.","pos":[1189,1450],"source":"When the compiler sees a data member declared with this attribute on the right of a member-selection operator (\"**.**\" or \"**->**\"), it converts the operation to a **get** or **put** function, depending on whether such an expression is an l-value or an r-value."},{"content":"In more complicated contexts, such as \"<ph id=\"ph1\">`+=`</ph>\", a rewrite is performed by doing both <bpt id=\"p1\">**</bpt>get<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>put<ept id=\"p2\">**</ept>.","pos":[1451,1554],"source":" In more complicated contexts, such as \"`+=`\", a rewrite is performed by doing both **get** and **put**."},{"content":"This attribute can also be used in the declaration of an empty array in a class or structure definition.","pos":[1561,1665]},{"content":"For example:","pos":[1666,1678]},{"content":"The above statement indicates that <ph id=\"ph1\">`x[]`</ph> can be used with one or more array indices.","pos":[1752,1836],"source":"The above statement indicates that `x[]` can be used with one or more array indices."},{"content":"In this case, <ph id=\"ph1\">`i=p-&gt;x[a][b]`</ph> will be turned into <ph id=\"ph2\">`i=p-&gt;GetX(a, b)`</ph>, and <ph id=\"ph3\">`p-&gt;x[a][b] = i`</ph> will be turned into","pos":[1837,1945],"source":" In this case, `i=p->x[a][b]` will be turned into `i=p->GetX(a, b)`, and `p->x[a][b] = i` will be turned into "},{"content":"END Microsoft Specific","pos":[1974,1996]},{"content":"Example","pos":[2007,2014]},{"content":"See Also","pos":[2344,2352]},{"content":"__declspec","pos":[2357,2367]},{"content":"Keywords","pos":[2394,2402]}],"content":"---\ntitle: \"property (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"property_cpp\"\n  - \"Property\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"property __declspec keyword\"\n  - \"__declspec keyword [C++], property\"\nms.assetid: f3b850ba-bf48-4df7-a1d6-8259d97309ce\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# property (C++)\n**Microsoft Specific**  \n  \n This attribute can be applied to non-static \"virtual data members\" in a class or structure definition. The compiler treats these \"virtual data members\" as data members by changing their references into function calls.  \n  \n## Syntax  \n  \n```  \n  \n      __declspec( property( get=get_func_name ) ) declarator  \n__declspec( property( put=put_func_name ) ) declarator  \n__declspec( property( get=get_func_name, put=put_func_name ) ) declarator  \n```  \n  \n## Remarks  \n When the compiler sees a data member declared with this attribute on the right of a member-selection operator (\"**.**\" or \"**->**\"), it converts the operation to a **get** or **put** function, depending on whether such an expression is an l-value or an r-value. In more complicated contexts, such as \"`+=`\", a rewrite is performed by doing both **get** and **put**.  \n  \n This attribute can also be used in the declaration of an empty array in a class or structure definition. For example:  \n  \n```  \n__declspec(property(get=GetX, put=PutX)) int x[];  \n```  \n  \n The above statement indicates that `x[]` can be used with one or more array indices. In this case, `i=p->x[a][b]` will be turned into `i=p->GetX(a, b)`, and `p->x[a][b] = i` will be turned into `p->PutX(a, b, i);`  \n  \n **END Microsoft Specific**  \n  \n## Example  \n  \n```  \n// declspec_property.cpp  \nstruct S {  \n   int i;  \n   void putprop(int j) {   \n      i = j;  \n   }  \n  \n   int getprop() {  \n      return i;  \n   }  \n  \n   __declspec(property(get = getprop, put = putprop)) int the_prop;  \n};  \n  \nint main() {  \n   S s;  \n   s.the_prop = 5;  \n   return s.the_prop;  \n}  \n```  \n  \n## See Also  \n [__declspec](../cpp/declspec.md)   \n [Keywords](../cpp/keywords-cpp.md)"}