{"nodes":[{"pos":[12,60],"content":"Conditional-Expression Operator | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Conditional-Expression Operator | Microsoft Docs","pos":[0,48]}]},{"content":"Conditional-Expression Operator","pos":[670,701]},{"pos":[702,776],"content":"C has one ternary operator: the conditional-expression operator (<bpt id=\"p1\">**</bpt>? :<ept id=\"p1\">**</ept>).","source":"C has one ternary operator: the conditional-expression operator (**? :**)."},{"content":"Syntax","pos":[785,791]},{"content":"<bpt id=\"p1\">*</bpt>conditional-expression<ept id=\"p1\">*</ept>:","pos":[795,820],"source":"*conditional-expression*:"},{"content":"logical-OR-expression","pos":[825,846]},{"content":"<bpt id=\"p1\">*</bpt>logical-OR expression<ept id=\"p1\">*</ept>  <bpt id=\"p2\">**</bpt>?<ept id=\"p2\">**</ept>","pos":[854,884],"source":"*logical-OR expression*  **?**"},{"content":"<bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept>  <bpt id=\"p2\">**</bpt>:<ept id=\"p2\">**</ept>  <bpt id=\"p3\">*</bpt>conditional-expression<ept id=\"p3\">*</ept>","pos":[886,931],"source":"*expression*  **:**  *conditional-expression*"},{"content":"The <bpt id=\"p1\">*</bpt>logical-OR-expression<ept id=\"p1\">*</ept> must have integral, floating, or pointer type.","pos":[938,1012],"source":"The *logical-OR-expression* must have integral, floating, or pointer type."},{"content":"It is evaluated in terms of its equivalence to 0.","pos":[1013,1062]},{"content":"A sequence point follows <bpt id=\"p1\">*</bpt>logical-OR-expression<ept id=\"p1\">*</ept>.","pos":[1063,1112],"source":" A sequence point follows *logical-OR-expression*."},{"content":"Evaluation of the operands proceeds as follows:","pos":[1113,1160]},{"content":"If <bpt id=\"p1\">*</bpt>logical-OR-expression<ept id=\"p1\">*</ept> is not equal to 0, <bpt id=\"p2\">*</bpt>expression<ept id=\"p2\">*</ept> is evaluated.","pos":[1170,1242],"source":"If *logical-OR-expression* is not equal to 0, *expression* is evaluated."},{"content":"The result of evaluating the expression is given by the nonterminal <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept>.","pos":[1243,1324],"source":" The result of evaluating the expression is given by the nonterminal *expression*."},{"content":"(This means <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> is evaluated only if <bpt id=\"p2\">*</bpt>logical-OR-expression<ept id=\"p2\">*</ept> is true.)","pos":[1325,1404],"source":" (This means *expression* is evaluated only if *logical-OR-expression* is true.)"},{"content":"If <bpt id=\"p1\">*</bpt>logical-OR-expression<ept id=\"p1\">*</ept> equals 0, <bpt id=\"p2\">*</bpt>conditional-expression<ept id=\"p2\">*</ept> is evaluated.","pos":[1414,1489],"source":"If *logical-OR-expression* equals 0, *conditional-expression* is evaluated."},{"content":"The result of the expression is the value of <bpt id=\"p1\">*</bpt>conditional-expression<ept id=\"p1\">*</ept>.","pos":[1490,1560],"source":" The result of the expression is the value of *conditional-expression*."},{"content":"(This means <bpt id=\"p1\">*</bpt>conditional-expression<ept id=\"p1\">*</ept> is evaluated only if <bpt id=\"p2\">*</bpt>logical-OR-expression<ept id=\"p2\">*</ept> is false.)","pos":[1561,1653],"source":" (This means *conditional-expression* is evaluated only if *logical-OR-expression* is false.)"},{"pos":[1660,1745],"content":"Note that either <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>conditional-expression<ept id=\"p2\">*</ept> is evaluated, but not both.","source":"Note that either *expression* or *conditional-expression* is evaluated, but not both."},{"pos":[1752,1890],"content":"The type of the result of a conditional operation depends on the type of the <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>conditional-expression<ept id=\"p2\">*</ept> operand, as follows:","source":"The type of the result of a conditional operation depends on the type of the *expression* or *conditional-expression* operand, as follows:"},{"content":"If <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>conditional-expression<ept id=\"p2\">*</ept> has integral or floating type (their types can be different), the operator performs the usual arithmetic conversions.","pos":[1900,2061],"source":"If *expression* or *conditional-expression* has integral or floating type (their types can be different), the operator performs the usual arithmetic conversions."},{"content":"The type of the result is the type of the operands after conversion.","pos":[2062,2130]},{"pos":[2140,2308],"content":"If both <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>conditional-expression<ept id=\"p2\">*</ept> have the same structure, union, or pointer type, the type of the result is the same structure, union, or pointer type.","source":"If both *expression* and *conditional-expression* have the same structure, union, or pointer type, the type of the result is the same structure, union, or pointer type."},{"pos":[2318,2380],"content":"If both operands have type <ph id=\"ph1\">`void`</ph>, the result has type <ph id=\"ph2\">`void`</ph>.","source":"If both operands have type `void`, the result has type `void`."},{"pos":[2390,2593],"content":"If either operand is a pointer to an object of any type, and the other operand is a pointer to <ph id=\"ph1\">`void`</ph>, the pointer to the object is converted to a pointer to <ph id=\"ph2\">`void`</ph> and the result is a pointer to <ph id=\"ph3\">`void`</ph>.","source":"If either operand is a pointer to an object of any type, and the other operand is a pointer to `void`, the pointer to the object is converted to a pointer to `void` and the result is a pointer to `void`."},{"pos":[2603,2775],"content":"If either <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>conditional-expression<ept id=\"p2\">*</ept> is a pointer and the other operand is a constant expression with the value 0, the type of the result is the pointer type.","source":"If either *expression* or *conditional-expression* is a pointer and the other operand is a constant expression with the value 0, the type of the result is the pointer type."},{"pos":[2782,3008],"content":"In the type comparison for pointers, any type qualifiers (<bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> or <ph id=\"ph1\">`volatile`</ph>) in the type to which the pointer points are insignificant, but the result type inherits the qualifiers from both components of the conditional.","source":"In the type comparison for pointers, any type qualifiers (**const** or `volatile`) in the type to which the pointer points are insignificant, but the result type inherits the qualifiers from both components of the conditional."},{"content":"Examples","pos":[3017,3025]},{"content":"The following examples show uses of the conditional operator:","pos":[3029,3090]},{"content":"This example assigns the absolute value of <ph id=\"ph1\">`i`</ph> to <ph id=\"ph2\">`j`</ph>.","pos":[3146,3200],"source":"This example assigns the absolute value of `i` to `j`."},{"content":"If <ph id=\"ph1\">`i`</ph> is less than 0, <ph id=\"ph2\">`-i`</ph> is assigned to <ph id=\"ph3\">`j`</ph>.","pos":[3201,3248],"source":" If `i` is less than 0, `-i` is assigned to `j`."},{"content":"If <ph id=\"ph1\">`i`</ph> is greater than or equal to 0, <ph id=\"ph2\">`i`</ph> is assigned to <ph id=\"ph3\">`j`</ph>.","pos":[3249,3310],"source":" If `i` is greater than or equal to 0, `i` is assigned to `j`."},{"content":"In this example, two functions, <ph id=\"ph1\">`f1`</ph> and <ph id=\"ph2\">`f2`</ph>, and two variables, <ph id=\"ph3\">`x`</ph> and <ph id=\"ph4\">`y`</ph>, are declared.","pos":[3448,3540],"source":"In this example, two functions, `f1` and `f2`, and two variables, `x` and `y`, are declared."},{"content":"Later in the program, if the two variables have the same value, the function <ph id=\"ph1\">`f1`</ph> is called.","pos":[3541,3633],"source":" Later in the program, if the two variables have the same value, the function `f1` is called."},{"content":"Otherwise, <ph id=\"ph1\">`f2`</ph> is called.","pos":[3634,3660],"source":" Otherwise, `f2` is called."},{"content":"See Also","pos":[3669,3677]},{"content":"Conditional Operator: ?","pos":[3682,3705]},{"content":":","pos":[3706,3707]}],"content":"---\ntitle: \"Conditional-Expression Operator | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"conditional operators\"\n  - \"operators [C++], conditional\"\n  - \"expressions [C++], conditional\"\nms.assetid: c4f1a5ca-0844-44a7-a384-eca584d4e3dd\ncaps.latest.revision: 8\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Conditional-Expression Operator\nC has one ternary operator: the conditional-expression operator (**? :**).  \n  \n## Syntax  \n *conditional-expression*:  \n *logical-OR-expression*  \n  \n *logical-OR expression*  **?**  *expression*  **:**  *conditional-expression*  \n  \n The *logical-OR-expression* must have integral, floating, or pointer type. It is evaluated in terms of its equivalence to 0. A sequence point follows *logical-OR-expression*. Evaluation of the operands proceeds as follows:  \n  \n-   If *logical-OR-expression* is not equal to 0, *expression* is evaluated. The result of evaluating the expression is given by the nonterminal *expression*. (This means *expression* is evaluated only if *logical-OR-expression* is true.)  \n  \n-   If *logical-OR-expression* equals 0, *conditional-expression* is evaluated. The result of the expression is the value of *conditional-expression*. (This means *conditional-expression* is evaluated only if *logical-OR-expression* is false.)  \n  \n Note that either *expression* or *conditional-expression* is evaluated, but not both.  \n  \n The type of the result of a conditional operation depends on the type of the *expression* or *conditional-expression* operand, as follows:  \n  \n-   If *expression* or *conditional-expression* has integral or floating type (their types can be different), the operator performs the usual arithmetic conversions. The type of the result is the type of the operands after conversion.  \n  \n-   If both *expression* and *conditional-expression* have the same structure, union, or pointer type, the type of the result is the same structure, union, or pointer type.  \n  \n-   If both operands have type `void`, the result has type `void`.  \n  \n-   If either operand is a pointer to an object of any type, and the other operand is a pointer to `void`, the pointer to the object is converted to a pointer to `void` and the result is a pointer to `void`.  \n  \n-   If either *expression* or *conditional-expression* is a pointer and the other operand is a constant expression with the value 0, the type of the result is the pointer type.  \n  \n In the type comparison for pointers, any type qualifiers (**const** or `volatile`) in the type to which the pointer points are insignificant, but the result type inherits the qualifiers from both components of the conditional.  \n  \n## Examples  \n The following examples show uses of the conditional operator:  \n  \n```  \nj = ( i < 0 ) ? ( -i ) : ( i );  \n```  \n  \n This example assigns the absolute value of `i` to `j`. If `i` is less than 0, `-i` is assigned to `j`. If `i` is greater than or equal to 0, `i` is assigned to `j`.  \n  \n```  \nvoid f1( void );  \nvoid f2( void );  \nint x;  \nint y;  \n    .  \n    .  \n    .  \n( x == y ) ? ( f1() ) : ( f2() );  \n```  \n  \n In this example, two functions, `f1` and `f2`, and two variables, `x` and `y`, are declared. Later in the program, if the two variables have the same value, the function `f1` is called. Otherwise, `f2` is called.  \n  \n## See Also  \n [Conditional Operator: ? :](../cpp/conditional-operator-q.md)"}