{"nodes":[{"pos":[12,57],"content":"geometric_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"geometric_distribution Class | Microsoft Docs","pos":[0,45]}]},{"pos":[868,896],"content":"geometric_distribution Class","linkify":"geometric_distribution Class","nodes":[{"content":"geometric_distribution Class","pos":[0,28]}]},{"content":"Generates a geometric distribution.","pos":[897,932]},{"pos":[941,947],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1613,1623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The integer result type, defaults to <ph id=\"ph1\">`int`</ph>.","pos":[1640,1683],"source":" The integer result type, defaults to `int`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[1684,1751],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"pos":[1760,1767],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The template class describes a distribution that produces values of a user-specified integral type with a geometric distribution.","pos":[1771,1900]},{"content":"The following table links to articles about individual members.","pos":[1901,1964]},{"pos":[1988,2085],"content":"<bpt id=\"p1\">[</bpt>geometric_distribution::geometric_distribution<ept id=\"p1\">](#geometric_distribution__geometric_distribution)</ept>","source":"[geometric_distribution::geometric_distribution](#geometric_distribution__geometric_distribution)"},{"pos":[2188,2261],"content":"<bpt id=\"p1\">[</bpt>geometric_distribution::param_type<ept id=\"p1\">](#geometric_distribution__param_type)</ept>","source":"[geometric_distribution::param_type](#geometric_distribution__param_type)"},{"pos":[2269,2353],"content":"The property function <ph id=\"ph1\">`p()`</ph> returns the value for stored distribution parameter <ph id=\"ph2\">`p`</ph>.","source":"The property function `p()` returns the value for stored distribution parameter `p`."},{"pos":[2360,2474],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[2481,2647],"content":"For detailed information about the chi-squared distribution, see the Wolfram MathWorld article <bpt id=\"p1\">[</bpt>Geometric Distribution<ept id=\"p1\">](http://go.microsoft.com/fwlink/LinkId=400529)</ept>.","source":"For detailed information about the chi-squared distribution, see the Wolfram MathWorld article [Geometric Distribution](http://go.microsoft.com/fwlink/LinkId=400529)."},{"pos":[2656,2663],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4186,4192],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"content":"First test:","pos":[4196,4207]},{"content":"Second test:","pos":[4633,4645]},{"pos":[5199,5211],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5215,5236],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[5243,5261],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5271,5380],"content":"<bpt id=\"p1\">&lt;a name=\"geometric_distribution__geometric_distribution\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  geometric_distribution::geometric_distribution","linkify":"<a name=\"geometric_distribution__geometric_distribution\"></a>  geometric_distribution::geometric_distribution","source":"<a name=\"geometric_distribution__geometric_distribution\"></a>  geometric_distribution::geometric_distribution"},{"content":"Constructs the distribution.","pos":[5384,5412]},{"pos":[5548,5558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The <ph id=\"ph1\">`p`</ph> distribution parameter.","pos":[5569,5600],"source":" The `p` distribution parameter."},{"content":"The parameter structure used to construct the distribution.","pos":[5617,5676]},{"pos":[5686,5693],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5697,5735],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; p &amp;&amp; p &lt; 1.0`</ph>","source":"**Precondition:** `0.0 < p && p < 1.0`"},{"pos":[5742,5828],"content":"The first constructor constructs an object whose stored <ph id=\"ph1\">`p`</ph> value holds the value <ph id=\"ph2\">`p`</ph>.","source":"The first constructor constructs an object whose stored `p` value holds the value `p`."},{"content":"The second constructor constructs an object whose stored parameters are initialized from <ph id=\"ph1\">`parm`</ph>.","pos":[5835,5931],"source":"The second constructor constructs an object whose stored parameters are initialized from `parm`."},{"content":"You can obtain and set the current parameters of an existing distribution by calling the <ph id=\"ph1\">`param()`</ph> member function.","pos":[5932,6047],"source":" You can obtain and set the current parameters of an existing distribution by calling the `param()` member function."},{"pos":[6057,6142],"content":"<bpt id=\"p1\">&lt;a name=\"geometric_distribution__param_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  geometric_distribution::param_type","linkify":"<a name=\"geometric_distribution__param_type\"></a>  geometric_distribution::param_type","source":"<a name=\"geometric_distribution__param_type\"></a>  geometric_distribution::param_type"},{"content":"Stores the parameters of the distribution.","pos":[6146,6188]},{"content":"struct param_type {","pos":[6194,6213]},{"content":"typedef geometric_distribution<ph id=\"ph1\">\\&lt;</ph>IntType, RealType&gt; distribution_type;","pos":[6219,6288],"source":"   typedef geometric_distribution\\<IntType, RealType> distribution_type;"},{"content":"param_type(RealType p = 0.5); RealType p() const; .....","pos":[6294,6355],"source":"   param_type(RealType p = 0.5);\n   RealType p() const;\n   ....."},{"content":"bool operator==(const param_type&amp; right) const; bool operator!=(const param_type&amp; right) const; };","pos":[6361,6465],"source":"   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };"},{"pos":[6475,6485],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[6489,6590],"content":"See parent topic <bpt id=\"p1\">[</bpt>geometric_distribution Class<ept id=\"p1\">](../standard-library/geometric-distribution-class.md)</ept>.","source":"See parent topic [geometric_distribution Class](../standard-library/geometric-distribution-class.md)."},{"pos":[6600,6607],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6611,6649],"content":"<bpt id=\"p1\">**</bpt>Precondition:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`0.0 &lt; p &amp;&amp; p &lt; 1.0`</ph>","source":"**Precondition:** `0.0 < p && p < 1.0`"},{"pos":[6656,6899],"content":"This structure can be passed to the distribution's class constructor at instantiation, to the <ph id=\"ph1\">`param()`</ph> member function to set the stored parameters of an existing distribution, and to <ph id=\"ph2\">`operator()`</ph> to be used in place of the stored parameters.","source":"This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters."},{"pos":[6908,6916],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6920,6962],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>","source":"[\\<random>](../standard-library/random.md)"}],"content":"---\ntitle: \"geometric_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.geometric_distribution\"\n  - \"random/std::tr1::geometric_distribution\"\n  - \"tr1::geometric_distribution\"\n  - \"tr1.geometric_distribution\"\n  - \"geometric_distribution\"\n  - \"std::tr1::geometric_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"geometric_distribution class\"\n  - \"geometric_distribution class [TR1]\"\nms.assetid: 38f933af-3b49-492e-9d26-b6b272a60013\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# geometric_distribution Class\nGenerates a geometric distribution.  \n  \n## Syntax  \n```  \nclass geometric_distribution {\npublic:    \n    // types \n    typedef IntType result_type; \n    struct param_type;   \n    // constructors and reset functions \n    explicit geometric_distribution(double p = 0.5);\n    explicit geometric_distribution(const param_type& parm);\n    void reset();\n    // generating functions template <class URNG>  \n    result_type operator()(URNG& gen);\n    template <class URNG>\n    result_type operator()(URNG& gen, const param_type& parm);\n    // property functions double p() const;\n    param_type param() const;\n    void param(const param_type& parm);\n    result_type min() const;\n    result_type max() const;\n}; \n```  \n#### Parameters  \n `IntType`  \n The integer result type, defaults to `int`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n The template class describes a distribution that produces values of a user-specified integral type with a geometric distribution. The following table links to articles about individual members.  \n  \n||||  \n|-|-|-|  \n|[geometric_distribution::geometric_distribution](#geometric_distribution__geometric_distribution)|`geometric_distribution::p`|`geometric_distribution::param`|  \n|`geometric_distribution::operator()`||[geometric_distribution::param_type](#geometric_distribution__param_type)|  \n  \n The property function `p()` returns the value for stored distribution parameter `p`.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n For detailed information about the chi-squared distribution, see the Wolfram MathWorld article [Geometric Distribution](http://go.microsoft.com/fwlink/LinkId=400529).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nvoid test(const double p, const int s) {  \n  \n    // uncomment to use a non-deterministic generator  \n    //    std::random_device gen;  \n    std::mt19937 gen(1701);  \n  \n    std::geometric_distribution<> distr(p);  \n  \n    std::cout << std::endl;  \n    std::cout << \"min() == \" << distr.min() << std::endl;  \n    std::cout << \"max() == \" << distr.max() << std::endl;  \n    std::cout << \"p() == \" << std::fixed << std::setw(11) << std::setprecision(10) << distr.p() << std::endl;  \n  \n    // generate the distribution as a histogram  \n    std::map<int, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    std::cout << \"Distribution for \" << s << \" samples:\" << std::endl;  \n    for (const auto& elem : histogram) {  \n        std::cout << std::setw(5) << elem.first << ' ' << std::string(elem.second, ':') << std::endl;  \n    }  \n    std::cout << std::endl;  \n}  \n  \nint main()  \n{  \n    double p_dist = 0.5;  \n  \n    int samples = 100;  \n  \n    std::cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << std::endl;  \n    std::cout << \"Enter a floating point value for the \\'p\\' distribution parameter: \";  \n    std::cin >> p_dist;  \n    std::cout << \"Enter an integer value for the sample count: \";  \n    std::cin >> samples;  \n  \n    test(p_dist, samples);  \n}  \n  \n```  \n  \n## Output  \n First test:  \n  \n```Output  \nUse CTRL-Z to bypass data entry and run using default values.Enter a floating point value for the 'p' distribution parameter: .5Enter an integer value for the sample count: 100min() == 0max() == 2147483647p() == 0.5000000000Distribution for 100 samples:    0 ::::::::::::::::::::::::::::::::::::::::::::::::::::    1 ::::::::::::::::::::::::    2 ::::::::::::::    3 :::::    4 ::    5 ::    6 :  \n```  \n  \n Second test:  \n  \n```Output  \nUse CTRL-Z to bypass data entry and run using default values.Enter a floating point value for the 'p' distribution parameter: .1Enter an integer value for the sample count: 100min() == 0max() == 2147483647p() == 0.1000000000Distribution for 100 samples:    0 :::::::::    1 :::::::::::    2 :::::::    3 ::::::::    4 ::::::::    5 ::::::    6 :::::    7 ::::::    8 :::::    9 ::::   10 ::::   11 ::   12 :   13 :   14 :::   15 ::::   16 :::   17 :   18 :   19 :   20 ::   21 :   22 :   23 :   28 ::   33 :   35 :   40 :  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"geometric_distribution__geometric_distribution\"></a>  geometric_distribution::geometric_distribution  \n Constructs the distribution.  \n  \n```  \nexplicit geometric_distribution(RealType p = 0.5);\n\n \nexplicit geometric_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `p`  \n The `p` distribution parameter.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n **Precondition:** `0.0 < p && p < 1.0`  \n  \n The first constructor constructs an object whose stored `p` value holds the value `p`.  \n  \n The second constructor constructs an object whose stored parameters are initialized from `parm`. You can obtain and set the current parameters of an existing distribution by calling the `param()` member function.  \n  \n##  <a name=\"geometric_distribution__param_type\"></a>  geometric_distribution::param_type  \n Stores the parameters of the distribution.  \n  \nstruct param_type {  \n   typedef geometric_distribution\\<IntType, RealType> distribution_type;  \n   param_type(RealType p = 0.5);\n   RealType p() const;\n   .....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n  \n### Parameters  \n See parent topic [geometric_distribution Class](../standard-library/geometric-distribution-class.md).  \n  \n### Remarks  \n **Precondition:** `0.0 < p && p < 1.0`  \n  \n This structure can be passed to the distribution's class constructor at instantiation, to the `param()` member function to set the stored parameters of an existing distribution, and to `operator()` to be used in place of the stored parameters.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n"}