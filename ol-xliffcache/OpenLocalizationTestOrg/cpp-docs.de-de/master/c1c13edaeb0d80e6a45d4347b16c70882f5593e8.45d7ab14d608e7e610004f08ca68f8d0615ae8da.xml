{"nodes":[{"pos":[12,49],"content":"CreatorMap Structure | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CreatorMap Structure | Microsoft Docs","pos":[0,37]}]},{"content":"CreatorMap Structure","pos":[722,742]},{"pos":[743,879],"content":"Supports the <ph id=\"ph1\">[!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)]</ph> infrastructure and is not intended to be used directly from your code.","source":"Supports the [!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)] infrastructure and is not intended to be used directly from your code."},{"content":"Syntax","pos":[888,894]},{"content":"Remarks","pos":[939,946]},{"content":"Contains information about how to initialize, register, and unregister objects.","pos":[950,1029]},{"content":"CreatorMap contains the following information:","pos":[1036,1082]},{"content":"How to initialize, register, and unregister objects.","pos":[1092,1144]},{"pos":[1154,1276],"content":"How to compare activation data depending on a classic COM or <ph id=\"ph1\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> factory.","source":"How to compare activation data depending on a classic COM or [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] factory."},{"content":"Information about the factory cache and server name for an interface.","pos":[1286,1355]},{"content":"Members","pos":[1364,1371]},{"content":"Public Data Members","pos":[1381,1400]},{"content":"Name","pos":[1407,1411]},{"content":"Description","pos":[1412,1423]},{"content":"CreatorMap::activationId Data Member","pos":[1462,1498]},{"pos":[1551,1690],"content":"Represents an object ID that is identified either by a classic COM class ID or a <ph id=\"ph1\">[!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)]</ph> name.","source":"Represents an object ID that is identified either by a classic COM class ID or a [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] name."},{"content":"CreatorMap::factoryCache Data Member","pos":[1696,1732]},{"content":"Stores the pointer to the factory cache for the CreatorMap.","pos":[1785,1844]},{"content":"CreatorMap::factoryCreator Data Member","pos":[1850,1888]},{"content":"Creates a factory for the specified CreatorMap.","pos":[1943,1990]},{"content":"CreatorMap::serverName Data Member","pos":[1996,2030]},{"content":"Stores the server name for the CreatorMap.","pos":[2081,2123]},{"content":"Inheritance Hierarchy","pos":[2133,2154]},{"content":"Requirements","pos":[2179,2191]},{"pos":[2195,2215],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> module.h","source":"**Header:** module.h"},{"pos":[2222,2260],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::WRL::Details","source":"**Namespace:** Microsoft::WRL::Details"},{"content":"See Also","pos":[2269,2277]},{"content":"Microsoft::WRL::Details Namespace","pos":[2282,2315]}],"content":"---\ntitle: \"CreatorMap Structure | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"module/Microsoft::WRL::Details::CreatorMap\"\n  - \"implements/Microsoft::WRL::Details::CreatorMap\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CreatorMap structure\"\nms.assetid: 94e40927-90c3-4107-bca3-3ad2dc4beda9\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# CreatorMap Structure\nSupports the [!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)] infrastructure and is not intended to be used directly from your code.  \n  \n## Syntax  \n  \n```  \nstruct CreatorMap;  \n```  \n  \n## Remarks  \n Contains information about how to initialize, register, and unregister objects.  \n  \n CreatorMap contains the following information:  \n  \n-   How to initialize, register, and unregister objects.  \n  \n-   How to compare activation data depending on a classic COM or [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] factory.  \n  \n-   Information about the factory cache and server name for an interface.  \n  \n## Members  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CreatorMap::activationId Data Member](../windows/creatormap-activationid-data-member.md)|Represents an object ID that is identified either by a classic COM class ID or a [!INCLUDE[wrt](../atl/reference/includes/wrt_md.md)] name.|  \n|[CreatorMap::factoryCache Data Member](../windows/creatormap-factorycache-data-member.md)|Stores the pointer to the factory cache for the CreatorMap.|  \n|[CreatorMap::factoryCreator Data Member](../windows/creatormap-factorycreator-data-member.md)|Creates a factory for the specified CreatorMap.|  \n|[CreatorMap::serverName Data Member](../windows/creatormap-servername-data-member.md)|Stores the server name for the CreatorMap.|  \n  \n## Inheritance Hierarchy  \n `CreatorMap`  \n  \n## Requirements  \n **Header:** module.h  \n  \n **Namespace:** Microsoft::WRL::Details  \n  \n## See Also  \n [Microsoft::WRL::Details Namespace](../windows/microsoft-wrl-details-namespace.md)"}