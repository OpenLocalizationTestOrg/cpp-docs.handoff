<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8203b4dcab7aa178c5d14336a2b5267dea89887b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\ostream-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16cce774bbb857af348f8b12affddd798bd226ca</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15e6ab807e20e0c69aaba746361f7159b47200a5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ostream<ph id="ph1">&amp;gt;</ph> operators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ostream<ph id="ph1">&amp;gt;</ph> operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Writes various types to the stream.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A character.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The element type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`basic_ostream`</ph> object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A character string.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Character traits.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The type</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The stream.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`basic_ostream`</ph> class also defines several insertion operators.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>basic_ostream::operator<ph id="ph1">&amp;lt;&amp;lt;</ph><ept id="p1">](../standard-library/basic-ostream-class.md#basic_ostream_operator_lt_lt_)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The template function</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>determines the length N = <ph id="ph1">`traits_type::`</ph><bpt id="p1">[</bpt>length<ept id="p1">](../standard-library/char-traits-struct.md#char_traits__length)</ept>( <ph id="ph2">`str`</ph>) of the sequence beginning at <ph id="ph3">`str`</ph>, and inserts the sequence.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If N &lt; <ph id="ph1">`_Ostr.`</ph><bpt id="p1">[</bpt>width<ept id="p1">](../standard-library/ios-base-class.md#ios_base__width)</ept>, then the function also inserts a repetition of <ph id="ph2">`_Ostr.``width`</ph> - N fill characters.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The repetition precedes the sequence if ( <ph id="ph1">`_Ostr`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>flags<ept id="p1">](../standard-library/ios-base-class.md#ios_base__flags)</ept><ph id="ph1"> &amp; `adjustfield`</ph> != <bpt id="p2">[</bpt>left<ept id="p2">](../standard-library/ios-functions.md#left)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Otherwise, the repetition follows the sequence.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The function returns <ph id="ph1">`_Ostr`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The template function</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>inserts the element <ph id="ph1">`_Ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If 1 &lt; <ph id="ph1">`_Ostr.width`</ph>, then the function also inserts a repetition of <ph id="ph2">`_Ostr.width`</ph> - 1 fill characters.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The repetition precedes the sequence if <ph id="ph1">`_Ostr.flags &amp; adjustfield != left`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Otherwise, the repetition follows the sequence.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It returns <ph id="ph1">`_Ostr`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The template function</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>behaves the same as</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>except that each element <ph id="ph1">`_Ch`</ph> of the sequence beginning at <ph id="ph2">`str`</ph> is converted to an object of type <ph id="ph3">`Elem`</ph> by calling <ph id="ph4">`_Ostr.`</ph><bpt id="p1">[</bpt>put<ept id="p1">](../standard-library/basic-ostream-class.md#basic_ostream__put)</ept>( <ph id="ph5">`_Ostr.`</ph><bpt id="p2">[</bpt>widen<ept id="p2">](../standard-library/basic-ios-class.md#basic_ios__widen)</ept>( <ph id="ph6">`_Ch`</ph>)).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The template function</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>``cpp template &lt;class _Elem, class _Tr&gt; basic_ostream&lt;Elem, _Tr&gt;&amp; operator&lt;&lt;( basic_ostream&lt;Elem, _Tr&gt;&amp; _Ostr, char _Ch);</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>except that <ph id="ph1">`_Ch`</ph> is converted to an object of type <ph id="ph2">`Elem`</ph> by calling <ph id="ph3">`_Ostr.put`</ph>( <ph id="ph4">`_Ostr.widen`</ph>( <ph id="ph5">`_Ch`</ph>)).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The template function</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>behaves the same as</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>(It does not have to widen the elements before inserting them.)</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The template function</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>behaves the same as</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>(It does not have to widen <ph id="ph1">`_Ch`</ph> before inserting it.)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The template function</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>returns <ph id="ph1">`_Ostr`</ph> &lt;&lt; ( <ph id="ph2">`const char *`</ph>) <ph id="ph3">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The template function</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>returns <ph id="ph1">`_Ostr`</ph> &lt;&lt; ( <ph id="ph2">`char`</ph>) <ph id="ph3">`_Ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The template function:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>returns <ph id="ph1">`_Ostr`</ph> &lt;&lt; ( <ph id="ph2">`const char *`</ph>) <ph id="ph3">`str`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The template function:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>returns <ph id="ph1">`_Ostr`</ph> &lt;&lt; ( <ph id="ph2">`char`</ph>) <ph id="ph3">`_Ch`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The template function:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>returns <ph id="ph1">`_Ostr`</ph> <ph id="ph2">`&lt;&lt;`</ph> <ph id="ph3">`val`</ph> (and converts a <bpt id="p1">[</bpt>RValue Reference<ept id="p1">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept> to <ph id="ph4">`_Ostr`</ph> to an lvalue in the process).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>flush<ept id="p1">](../standard-library/ostream-functions.md#flush)</ept> for an example using <ph id="ph1">`operator&lt;&lt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>ostream&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>