{"nodes":[{"pos":[12,44],"content":"CJumpList Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CJumpList Class | Microsoft Docs","pos":[0,32]}]},{"content":"CJumpList Class","pos":[624,639]},{"pos":[640,736],"content":"A <ph id=\"ph1\">`CJumpList`</ph> is the list of shortcuts revealed when you right click on an icon in the task bar.","source":"A `CJumpList` is the list of shortcuts revealed when you right click on an icon in the task bar."},{"content":"Syntax","pos":[745,751]},{"content":"Members","pos":[794,801]},{"content":"Public Constructors","pos":[811,830]},{"content":"Name","pos":[837,841]},{"content":"Description","pos":[842,853]},{"content":"CJumpList::CJumpList","pos":[892,912]},{"pos":[937,969],"content":"Constructs a <ph id=\"ph1\">`CJumpList`</ph> object.","source":"Constructs a `CJumpList` object."},{"content":"CJumpList::~CJumpList","pos":[975,996]},{"pos":[1022,1052],"content":"Destroys a <ph id=\"ph1\">`CJumpList`</ph> object.","source":"Destroys a `CJumpList` object."},{"content":"Name","pos":[1060,1064]},{"content":"Description","pos":[1065,1076]},{"content":"CJumpList::AbortList","pos":[1115,1135]},{"content":"Aborts a list-building transaction without committing.","pos":[1160,1214]},{"content":"CJumpList::AddDestination","pos":[1220,1245]},{"content":"Overloaded.","pos":[1275,1286]},{"content":"Adds destination to the list.","pos":[1287,1316]},{"content":"CJumpList::AddKnownCategory","pos":[1322,1349]},{"content":"Appends a Known Category to the list.","pos":[1381,1418]},{"content":"CJumpList::AddTask","pos":[1424,1442]},{"content":"Overloaded.","pos":[1465,1476]},{"content":"Adds items to the canonical Tasks category.","pos":[1477,1520]},{"content":"CJumpList::AddTasks","pos":[1526,1545]},{"content":"Adds items to the canonical Tasks category.","pos":[1569,1612]},{"content":"CJumpList::AddTaskSeparator","pos":[1618,1645]},{"content":"Adds a separator between tasks.","pos":[1677,1708]},{"content":"CJumpList::ClearAll","pos":[1714,1733]},{"pos":[1757,1859],"content":"Removes all tasks and destinations that have been added to the current instance of <ph id=\"ph1\">`CJumpList`</ph> so far.","source":"Removes all tasks and destinations that have been added to the current instance of `CJumpList` so far."},{"content":"CJumpList::ClearAllDestinations","pos":[1865,1896]},{"pos":[1932,2024],"content":"Removes all destinations that have been added to the current instance of <ph id=\"ph1\">`CJumpList`</ph> so far.","source":"Removes all destinations that have been added to the current instance of `CJumpList` so far."},{"content":"CJumpList::CommitList","pos":[2030,2051]},{"content":"Ends a list-building transaction and commits the reported list to the associated store (the registry in this case.)","pos":[2077,2192]},{"content":"CJumpList::GetDestinationList","pos":[2198,2227]},{"content":"Retrieves an interface pointer to destination list.","pos":[2261,2312]},{"content":"CJumpList::GetMaxSlots","pos":[2318,2340]},{"content":"Retrieves the maximum number of items, including category headers that can display in the calling application's destination menu.","pos":[2367,2496]},{"content":"CJumpList::GetRemovedItems","pos":[2502,2528]},{"content":"Returns array of items that represent removed destinations.","pos":[2559,2618]},{"content":"CJumpList::InitializeList","pos":[2624,2649]},{"content":"Begins a list-building transaction.","pos":[2679,2714]},{"content":"CJumpList::SetAppID","pos":[2720,2739]},{"content":"Sets the Application User Model ID for the list that will be built.","pos":[2763,2830]},{"content":"Inheritance Hierarchy","pos":[2840,2861]},{"content":"CJumpList","pos":[2866,2875]},{"content":"Requirements","pos":[2925,2937]},{"pos":[2941,2961],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxadv.h","source":"**Header:** afxadv.h"},{"pos":[3013,3034],"content":"CJumpList::~CJumpList"},{"pos":[3038,3068],"content":"Destroys a <ph id=\"ph1\">`CJumpList`</ph> object.","source":"Destroys a `CJumpList` object."},{"pos":[3144,3164],"content":"CJumpList::AbortList"},{"content":"Aborts a list-building transaction without committing.","pos":[3168,3222]},{"content":"Remarks","pos":[3265,3272]},{"pos":[3276,3371],"content":"Calling this method has the same effect as destroying <ph id=\"ph1\">`CJumpList`</ph> without calling <ph id=\"ph2\">`CommitList`</ph>.","source":"Calling this method has the same effect as destroying `CJumpList` without calling `CommitList`."},{"pos":[3423,3448],"content":"CJumpList::AddDestination"},{"content":"Adds destination to the list.","pos":[3452,3481]},{"content":"Parameters","pos":[3761,3771]},{"content":"Specifies a category name.","pos":[3798,3824]},{"content":"If the specified category does not exist, it will be created.","pos":[3825,3886]},{"content":"Specifies a path to destination file.","pos":[3917,3954]},{"content":"Specifies a category name.","pos":[3982,4008]},{"content":"If the specified category does not exist, it will be created.","pos":[4009,4070]},{"content":"Specifies a Shell Item representing the destination being added.","pos":[4093,4157]},{"content":"Specifies a Shell Link representing the destination being added.","pos":[4180,4244]},{"content":"Return Value","pos":[4254,4266]},{"content":"Remarks","pos":[4276,4283]},{"pos":[4287,4395],"content":"The instance of <ph id=\"ph1\">`CJumpList`</ph> internally accumulates added destinations and then commits them in <ph id=\"ph2\">`CommitList`</ph>.","source":"The instance of `CJumpList` internally accumulates added destinations and then commits them in `CommitList`."},{"pos":[4449,4476],"content":"CJumpList::AddKnownCategory"},{"content":"Appends a Known Category to the list.","pos":[4480,4517]},{"content":"Parameters","pos":[4593,4603]},{"content":"Specifies a known category type.","pos":[4621,4653]},{"content":"Can be either <ph id=\"ph1\">`KDC_RECENT`</ph>, or <ph id=\"ph2\">`KDC_KNOWN`</ph>.","pos":[4654,4697],"source":" Can be either `KDC_RECENT`, or `KDC_KNOWN`."},{"content":"Return Value","pos":[4707,4719]},{"content":"Remarks","pos":[4729,4736]},{"pos":[4740,4985],"content":"Known Categories are the Frequent and Recent categories that we will automatically calculate for every application that utilizes <ph id=\"ph1\">`SHAddToRecentDocs`</ph> (or indirectly uses it as the shell will call it on the application's behalf in some scenarios).","source":"Known Categories are the Frequent and Recent categories that we will automatically calculate for every application that utilizes `SHAddToRecentDocs` (or indirectly uses it as the shell will call it on the application's behalf in some scenarios)."},{"pos":[5030,5048],"content":"CJumpList::AddTask"},{"content":"Adds items to the canonical Tasks category.","pos":[5052,5095]},{"content":"Parameters","pos":[5329,5339]},{"content":"Specifies the target task path.","pos":[5372,5403]},{"content":"Specifies command line arguments of the executable specified by strTargetExecutablePath.","pos":[5434,5522]},{"content":"Task name that will be displayed in the Destination List.","pos":[5543,5600]},{"content":"Location of icon that will be displayed in the Destination List along with the title.","pos":[5628,5713]},{"content":"Icon index.","pos":[5736,5747]},{"content":"Shell Link that represents a task to be added.","pos":[5770,5816]},{"content":"Return Value","pos":[5826,5838]},{"content":"Remarks","pos":[5848,5855]},{"content":"The instance of <ph id=\"ph1\">`CJumpList`</ph> accumulates specified tasks and adds them to the Destination List during <ph id=\"ph2\">`CommitList`</ph>.","pos":[5859,5973],"source":"The instance of `CJumpList` accumulates specified tasks and adds them to the Destination List during `CommitList`."},{"content":"Task items will appear in a category at the bottom of the application's destination menu.","pos":[5974,6063]},{"content":"This category takes precedence over all other categories when it is filled in the UI.","pos":[6064,6149]},{"pos":[6195,6214],"content":"CJumpList::AddTasks"},{"content":"Adds items to the canonical Tasks category.","pos":[6218,6261]},{"content":"Parameters","pos":[6334,6344]},{"content":"A collection of tasks to be added.","pos":[6371,6405]},{"content":"Return Value","pos":[6415,6427]},{"content":"Remarks","pos":[6437,6444]},{"content":"The instance of CJumpList accumulates specified tasks and adds them to the Destination List during <ph id=\"ph1\">`CommitList`</ph>.","pos":[6448,6560],"source":"The instance of CJumpList accumulates specified tasks and adds them to the Destination List during `CommitList`."},{"content":"Task items will appear in a category at the bottom of the application's destination menu.","pos":[6561,6650]},{"content":"This category takes precedence over all other categories when it is filled in the UI.","pos":[6651,6736]},{"pos":[6790,6817],"content":"CJumpList::AddTaskSeparator"},{"content":"Adds a separator between tasks.","pos":[6821,6852]},{"content":"Return Value","pos":[6902,6914]},{"content":"Nonzero if it is successful, 0 if it is not.","pos":[6918,6962]},{"pos":[7009,7029],"content":"CJumpList::CJumpList"},{"pos":[7033,7065],"content":"Constructs a <ph id=\"ph1\">`CJumpList`</ph> object.","source":"Constructs a `CJumpList` object."},{"content":"Parameters","pos":[7126,7136]},{"content":"If this parameter is FALSE the list is not automatically committed in  destructor.","pos":[7157,7239]},{"pos":[7285,7304],"content":"CJumpList::ClearAll"},{"pos":[7308,7410],"content":"Removes all tasks and destinations that have been added to the current instance of <ph id=\"ph1\">`CJumpList`</ph> so far.","source":"Removes all tasks and destinations that have been added to the current instance of `CJumpList` so far."},{"content":"Remarks","pos":[7452,7459]},{"content":"This method clears and releases all data and internal interfaces.","pos":[7463,7528]},{"pos":[7586,7617],"content":"CJumpList::ClearAllDestinations"},{"content":"Removes all destinations that have been added to the current instance of CJumpList so far.","pos":[7621,7711]},{"content":"Remarks","pos":[7765,7772]},{"content":"Call this function if you need to remove all destinations that have been added so far in the current session of destination list building and add other destinations again.","pos":[7776,7947]},{"content":"If the internal <ph id=\"ph1\">`ICustomDestinationList`</ph> has been initialized, it's left alive.","pos":[7948,8027],"source":" If the internal `ICustomDestinationList` has been initialized, it's left alive."},{"pos":[8075,8096],"content":"CJumpList::CommitList"},{"content":"Ends a list-building transaction and commits the reported list to the associated store (the registry in this case).","pos":[8100,8215]},{"content":"Return Value","pos":[8259,8271]},{"content":"Remarks","pos":[8281,8288]},{"content":"The commit is atomic.","pos":[8292,8313]},{"content":"An error will be returned if the commit fails.","pos":[8314,8360]},{"content":"When <ph id=\"ph1\">`CommitList`</ph> is called, the current list of removed items will be cleaned up.","pos":[8362,8444],"source":"  When `CommitList` is called, the current list of removed items will be cleaned up."},{"content":"Calling this method resets the object so that it does not have an active list-building transaction.","pos":[8445,8544]},{"content":"To update the list, <ph id=\"ph1\">`BeginList`</ph> needs to be called again.","pos":[8545,8602],"source":" To update the list, `BeginList` needs to be called again."},{"pos":[8658,8687],"content":"CJumpList::GetDestinationList"},{"content":"Retrieves an interface pointer to destination list.","pos":[8691,8742]},{"content":"Return Value","pos":[8813,8825]},{"content":"Remarks","pos":[8835,8842]},{"pos":[8846,8957],"content":"If the jump list has not been initialized, or has been committed or aborted, the returned value will be <ph id=\"ph1\">`NULL`</ph>.","source":"If the jump list has not been initialized, or has been committed or aborted, the returned value will be `NULL`."},{"pos":[9006,9028],"content":"CJumpList::GetMaxSlots"},{"content":"Retrieves the maximum number of items, including category headers that can display in the calling application's destination menu.","pos":[9032,9161]},{"content":"Return Value","pos":[9215,9227]},{"content":"Remarks","pos":[9237,9244]},{"content":"Applications may only report a number of items and category headers combined up to this value.","pos":[9248,9342]},{"content":"If calls to <ph id=\"ph1\">`AppendCategory`</ph>, <ph id=\"ph2\">`AppendKnownCategory`</ph>, or <ph id=\"ph3\">`AddUserTasks`</ph> exceed this number, they will return failure.","pos":[9343,9459],"source":" If calls to `AppendCategory`, `AppendKnownCategory`, or `AddUserTasks` exceed this number, they will return failure."},{"pos":[9512,9538],"content":"CJumpList::GetRemovedItems"},{"content":"Returns array of items that represent removed destinations.","pos":[9542,9601]},{"content":"Return Value","pos":[9659,9671]},{"content":"Remarks","pos":[9681,9688]},{"content":"The removed destinations are retrieved during initialization of jump list.","pos":[9692,9766]},{"content":"When generating a new destination list, applications are expected to first process the removed destinations list, clearing their tracking data for any item returned by the removed list enumerator.","pos":[9767,9963]},{"content":"If an application attempts to provide an item that was just removed in the transaction that the current call to <ph id=\"ph1\">`BeginList`</ph> started, the method call that re-added that item will fail, to ensure that applications are respecting the removed list.","pos":[9964,10208],"source":" If an application attempts to provide an item that was just removed in the transaction that the current call to `BeginList` started, the method call that re-added that item will fail, to ensure that applications are respecting the removed list."},{"pos":[10260,10285],"content":"CJumpList::InitializeList"},{"content":"Begins a list-building transaction.","pos":[10289,10324]},{"content":"Return Value","pos":[10372,10384]},{"content":"Remarks","pos":[10394,10401]},{"pos":[10405,10645],"content":"You don't need to call this method explicitly unless you wish to retrieve a pointer to <ph id=\"ph1\">`ICustomDestinationList`</ph> using <ph id=\"ph2\">`GetDestinationList`</ph>, the number of available slots using <ph id=\"ph3\">`GetMaxSlots`</ph>, or list of removed items using <ph id=\"ph4\">`GetRemovedItems`</ph>.","source":"You don't need to call this method explicitly unless you wish to retrieve a pointer to `ICustomDestinationList` using `GetDestinationList`, the number of available slots using `GetMaxSlots`, or list of removed items using `GetRemovedItems`."},{"pos":[10691,10710],"content":"CJumpList::SetAppID"},{"content":"Sets the Application User Model ID for the list that will be built.","pos":[10714,10781]},{"content":"Parameters","pos":[10839,10849]},{"content":"A string that specifies the Application User Model ID.","pos":[10867,10921]},{"content":"See Also","pos":[10930,10938]},{"content":"Classes","pos":[10943,10950]}],"content":"---\ntitle: \"CJumpList Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"afxadv/CJumpList\"\n  - \"CJumpList\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CJumpList class\"\nms.assetid: d364d27e-f512-4b12-9872-c2a17c78ab1f\ncaps.latest.revision: 15\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CJumpList Class\nA `CJumpList` is the list of shortcuts revealed when you right click on an icon in the task bar.  \n  \n## Syntax  \n  \n```  \nclass CJumpList;  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CJumpList::CJumpList](#cjumplist__cjumplist)|Constructs a `CJumpList` object.|  \n|[CJumpList::~CJumpList](#cjumplist__~cjumplist)|Destroys a `CJumpList` object.|  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CJumpList::AbortList](#cjumplist__abortlist)|Aborts a list-building transaction without committing.|  \n|[CJumpList::AddDestination](#cjumplist__adddestination)|Overloaded. Adds destination to the list.|  \n|[CJumpList::AddKnownCategory](#cjumplist__addknowncategory)|Appends a Known Category to the list.|  \n|[CJumpList::AddTask](#cjumplist__addtask)|Overloaded. Adds items to the canonical Tasks category.|  \n|[CJumpList::AddTasks](#cjumplist__addtasks)|Adds items to the canonical Tasks category.|  \n|[CJumpList::AddTaskSeparator](#cjumplist__addtaskseparator)|Adds a separator between tasks.|  \n|[CJumpList::ClearAll](#cjumplist__clearall)|Removes all tasks and destinations that have been added to the current instance of `CJumpList` so far.|  \n|[CJumpList::ClearAllDestinations](#cjumplist__clearalldestinations)|Removes all destinations that have been added to the current instance of `CJumpList` so far.|  \n|[CJumpList::CommitList](#cjumplist__commitlist)|Ends a list-building transaction and commits the reported list to the associated store (the registry in this case.)|  \n|[CJumpList::GetDestinationList](#cjumplist__getdestinationlist)|Retrieves an interface pointer to destination list.|  \n|[CJumpList::GetMaxSlots](#cjumplist__getmaxslots)|Retrieves the maximum number of items, including category headers that can display in the calling application's destination menu.|  \n|[CJumpList::GetRemovedItems](#cjumplist__getremoveditems)|Returns array of items that represent removed destinations.|  \n|[CJumpList::InitializeList](#cjumplist__initializelist)|Begins a list-building transaction.|  \n|[CJumpList::SetAppID](#cjumplist__setappid)|Sets the Application User Model ID for the list that will be built.|  \n  \n## Inheritance Hierarchy  \n [CJumpList](../../mfc/reference/cjumplist-class.md)  \n  \n## Requirements  \n **Header:** afxadv.h  \n  \n##  <a name=\"cjumplist___dtorcjumplist\"></a>  CJumpList::~CJumpList  \n Destroys a `CJumpList` object.  \n  \n```  \n~CJumpList();\n```  \n  \n##  <a name=\"cjumplist__abortlist\"></a>  CJumpList::AbortList  \n Aborts a list-building transaction without committing.  \n  \n```  \nvoid AbortList();\n```  \n  \n### Remarks  \n Calling this method has the same effect as destroying `CJumpList` without calling `CommitList`.  \n  \n##  <a name=\"cjumplist__adddestination\"></a>  CJumpList::AddDestination  \n Adds destination to the list.  \n  \n```  \nBOOL AddDestination(\n    LPCTSTR lpcszCategoryName,  \n    LPCTSTR strDestinationPath);\n\n \nBOOL AddDestination(\n    LPCTSTR strCategoryName,  \n    IShellItem* pShellItem);\n\n \nBOOL AddDestination(\n    LPCTSTR strCategoryName,  \n    IShellLink* pShellLink);\n```  \n  \n### Parameters  \n `lpcszCategoryName`  \n Specifies a category name. If the specified category does not exist, it will be created.  \n  \n `strDestinationPath`  \n Specifies a path to destination file.  \n  \n `strCategoryName`  \n Specifies a category name. If the specified category does not exist, it will be created.  \n  \n `pShellItem`  \n Specifies a Shell Item representing the destination being added.  \n  \n `pShellLink`  \n Specifies a Shell Link representing the destination being added.  \n  \n### Return Value  \n  \n### Remarks  \n The instance of `CJumpList` internally accumulates added destinations and then commits them in `CommitList`.  \n  \n##  <a name=\"cjumplist__addknowncategory\"></a>  CJumpList::AddKnownCategory  \n Appends a Known Category to the list.  \n  \n```  \nBOOL AddKnownCategory(KNOWNDESTCATEGORY category);\n```  \n  \n### Parameters  \n `category`  \n Specifies a known category type. Can be either `KDC_RECENT`, or `KDC_KNOWN`.  \n  \n### Return Value  \n  \n### Remarks  \n Known Categories are the Frequent and Recent categories that we will automatically calculate for every application that utilizes `SHAddToRecentDocs` (or indirectly uses it as the shell will call it on the application's behalf in some scenarios).  \n  \n##  <a name=\"cjumplist__addtask\"></a>  CJumpList::AddTask  \n Adds items to the canonical Tasks category.  \n  \n```  \nBOOL AddTask(\n    LPCTSTR strTargetExecutablePath,  \n    LPCTSTR strCommandLineArgs,  \n    LPCTSTR strTitle,  \n    LPCTSTR strIconLocation,  \n    int iIconIndex);\n\n \nBOOL AddTask(\n    IShellLink* pShellLink);\n```  \n  \n### Parameters  \n `strTargetExecutablePath`  \n Specifies the target task path.  \n  \n `strCommandLineArgs`  \n Specifies command line arguments of the executable specified by strTargetExecutablePath.  \n  \n `strTitle`  \n Task name that will be displayed in the Destination List.  \n  \n `strIconLocation`  \n Location of icon that will be displayed in the Destination List along with the title.  \n  \n `iIconIndex`  \n Icon index.  \n  \n `pShellLink`  \n Shell Link that represents a task to be added.  \n  \n### Return Value  \n  \n### Remarks  \n The instance of `CJumpList` accumulates specified tasks and adds them to the Destination List during `CommitList`. Task items will appear in a category at the bottom of the application's destination menu. This category takes precedence over all other categories when it is filled in the UI.  \n  \n##  <a name=\"cjumplist__addtasks\"></a>  CJumpList::AddTasks  \n Adds items to the canonical Tasks category.  \n  \n```  \nBOOL AddTasks(IObjectArray* pObjectCollection);\n```  \n  \n### Parameters  \n `pObjectCollection`  \n A collection of tasks to be added.  \n  \n### Return Value  \n  \n### Remarks  \n The instance of CJumpList accumulates specified tasks and adds them to the Destination List during `CommitList`. Task items will appear in a category at the bottom of the application's destination menu. This category takes precedence over all other categories when it is filled in the UI.  \n  \n##  <a name=\"cjumplist__addtaskseparator\"></a>  CJumpList::AddTaskSeparator  \n Adds a separator between tasks.  \n  \n```  \nBOOL AddTaskSeparator();\n```  \n  \n### Return Value  \n Nonzero if it is successful, 0 if it is not.  \n  \n##  <a name=\"cjumplist__cjumplist\"></a>  CJumpList::CJumpList  \n Constructs a `CJumpList` object.  \n  \n```  \nCJumpList(BOOL bAutoCommit = TRUE);\n```  \n  \n### Parameters  \n `bAutoCommit`  \n If this parameter is FALSE the list is not automatically committed in  destructor.  \n  \n##  <a name=\"cjumplist__clearall\"></a>  CJumpList::ClearAll  \n Removes all tasks and destinations that have been added to the current instance of `CJumpList` so far.  \n  \n```  \nvoid ClearAll();\n```  \n  \n### Remarks  \n This method clears and releases all data and internal interfaces.  \n  \n##  <a name=\"cjumplist__clearalldestinations\"></a>  CJumpList::ClearAllDestinations  \n Removes all destinations that have been added to the current instance of CJumpList so far.  \n  \n```  \nvoid ClearAllDestinations();\n```  \n  \n### Remarks  \n Call this function if you need to remove all destinations that have been added so far in the current session of destination list building and add other destinations again. If the internal `ICustomDestinationList` has been initialized, it's left alive.  \n  \n##  <a name=\"cjumplist__commitlist\"></a>  CJumpList::CommitList  \n Ends a list-building transaction and commits the reported list to the associated store (the registry in this case).  \n  \n```  \nBOOL CommitList();\n```  \n  \n### Return Value  \n  \n### Remarks  \n The commit is atomic. An error will be returned if the commit fails.  When `CommitList` is called, the current list of removed items will be cleaned up. Calling this method resets the object so that it does not have an active list-building transaction. To update the list, `BeginList` needs to be called again.  \n  \n##  <a name=\"cjumplist__getdestinationlist\"></a>  CJumpList::GetDestinationList  \n Retrieves an interface pointer to destination list.  \n  \n```  \nICustomDestinationList* GetDestinationList();\n```  \n  \n### Return Value  \n  \n### Remarks  \n If the jump list has not been initialized, or has been committed or aborted, the returned value will be `NULL`.  \n  \n##  <a name=\"cjumplist__getmaxslots\"></a>  CJumpList::GetMaxSlots  \n Retrieves the maximum number of items, including category headers that can display in the calling application's destination menu.  \n  \n```  \nUINT GetMaxSlots() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n Applications may only report a number of items and category headers combined up to this value. If calls to `AppendCategory`, `AppendKnownCategory`, or `AddUserTasks` exceed this number, they will return failure.  \n  \n##  <a name=\"cjumplist__getremoveditems\"></a>  CJumpList::GetRemovedItems  \n Returns array of items that represent removed destinations.  \n  \n```  \nIObjectArray* GetRemovedItems();\n```  \n  \n### Return Value  \n  \n### Remarks  \n The removed destinations are retrieved during initialization of jump list. When generating a new destination list, applications are expected to first process the removed destinations list, clearing their tracking data for any item returned by the removed list enumerator. If an application attempts to provide an item that was just removed in the transaction that the current call to `BeginList` started, the method call that re-added that item will fail, to ensure that applications are respecting the removed list.  \n  \n##  <a name=\"cjumplist__initializelist\"></a>  CJumpList::InitializeList  \n Begins a list-building transaction.  \n  \n```  \nBOOL InitializeList();\n```  \n  \n### Return Value  \n  \n### Remarks  \n You don't need to call this method explicitly unless you wish to retrieve a pointer to `ICustomDestinationList` using `GetDestinationList`, the number of available slots using `GetMaxSlots`, or list of removed items using `GetRemovedItems`.  \n  \n##  <a name=\"cjumplist__setappid\"></a>  CJumpList::SetAppID  \n Sets the Application User Model ID for the list that will be built.  \n  \n```  \nvoid SetAppID(LPCTSTR strAppID);\n```  \n  \n### Parameters  \n `strAppID`  \n A string that specifies the Application User Model ID.  \n  \n## See Also  \n [Classes](../../mfc/reference/mfc-classes.md)\n"}