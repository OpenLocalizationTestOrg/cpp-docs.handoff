<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f304dc82d9f91bf3c9d6a35a525a2eeb5c95dc3f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\vfprintf-p-vfprintf-p-l-vfwprintf-p-vfwprintf-p-l.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bd70c3b8bf0c1b5a7567be7b24e36f5ca8bc4f1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac48b4f147b4877c271820f5f777466c4203d0c9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_vfprintf_p, _vfprintf_p_l, _vfwprintf_p, _vfwprintf_p_l</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Write formatted output using a pointer to a list of arguments, with the ability to specify the order that arguments are used in the format string.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Pointer to <ph id="ph1">`FILE`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Format specification.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Pointer to list of arguments.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The locale to use.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Format Specifications<ept id="p1">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_vfwprintf_p`</ph> return the number of characters written, not including the terminating null character, or a negative value if an output error occurs.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Each of these functions takes a pointer to an argument list, then formats and writes the given data to <ph id="ph1">`stream`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These functions differ from the <ph id="ph1">`_vfprint_s`</ph> and <ph id="ph2">`_vfwprint_s`</ph> versions only in that they support positional parameters.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>printf_p Positional Parameters<ept id="p1">](../../c-runtime-library/printf-p-positional-parameters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>is the wide-character version of <ph id="ph1">`_vprintf_p`</ph>; the two functions behave identically if the stream is opened in ANSI mode.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>doesn't currently support output into a UNICODE stream.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The versions of these functions with the <ph id="ph1">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Ensure that <ph id="ph1">`format`</ph> is not a user-defined string.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Avoiding Buffer Overruns<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If either <ph id="ph1">`stream`</ph> or <ph id="ph2">`format`</ph> is a null pointer, or if the format string contains invalid formatting characters, the invalid parameter handler is invoked, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, the functions return -1 and set <ph id="ph1">`errno`</ph> to <ph id="ph2">`EINVAL`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>TCHAR.H routine</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>_UNICODE &amp; _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Optional headers</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>stdio.h&gt; and <ph id="ph1">\&lt;</ph>stdarg.h&gt;</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>varargs.h&gt;*</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>stdio.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;, and <ph id="ph2">\&lt;</ph>stdarg.h&gt;</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>varargs.h&gt;*</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Required for UNIX V compatibility.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Stream I/O</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>vprintf Functions</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>fprintf, _fprintf_l, fwprintf, _fwprintf_l</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>printf, _printf_l, wprintf, _wprintf_l</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>sprintf, _sprintf_l, swprintf, _swprintf_l, <ph id="ph1">\_</ph>_swprintf_l</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>va_arg, va_copy, va_end, va_start</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>printf_p Positional Parameters</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>_fprintf_p, _fprintf_p_l, _fwprintf_p, _fwprintf_p_l</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>_vsprintf_p, _vsprintf_p_l, _vswprintf_p, _vswprintf_p_l</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>_sprintf_p, _sprintf_p_l, _swprintf_p, _swprintf_p_l</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>