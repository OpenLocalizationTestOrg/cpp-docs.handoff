{"nodes":[{"pos":[12,60],"content":"&lt;unordered_set&gt; functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>unordered_set<ph id=\"ph2\">&amp;gt;</ph> functions | Microsoft Docs","pos":[0,48],"source":"&lt;unordered_set&gt; functions | Microsoft Docs"}]},{"pos":[263,294],"content":"&lt;unordered_set&gt; functions","linkify":"&lt;unordered_set&gt; functions","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>unordered_set<ph id=\"ph2\">&amp;gt;</ph> functions","pos":[0,31],"source":"&lt;unordered_set&gt; functions"}]},{"pos":[310,329],"content":"<bpt id=\"p1\">[</bpt>swap (set)<ept id=\"p1\">](#swap)</ept>","source":"[swap (set)](#swap)"},{"pos":[330,383],"content":"<bpt id=\"p1\">[</bpt>swap (unordered_multiset)<ept id=\"p1\">](#swap_unordered_multiset)</ept>","source":"[swap (unordered_multiset)](#swap_unordered_multiset)"},{"pos":[394,435],"content":"<bpt id=\"p1\">&lt;a name=\"swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  swap (unordered_set)","linkify":"<a name=\"swap\"></a>  swap (unordered_set)","source":"<a name=\"swap\"></a>  swap (unordered_set)"},{"content":"Swaps the contents of two containers.","pos":[439,476]},{"pos":[676,686],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key type.","pos":[699,712]},{"content":"The hash function object type.","pos":[729,759]},{"content":"The equality comparison function object type.","pos":[776,821]},{"content":"The allocator class.","pos":[839,859]},{"content":"The first container to swap.","pos":[876,904]},{"content":"The second container to swap.","pos":[922,951]},{"pos":[961,968],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[972,1105],"content":"The template function executes <ph id=\"ph1\">`left.`</ph><bpt id=\"p1\">[</bpt>unordered_set::swap<ept id=\"p1\">](../standard-library/unordered-set-class.md#unordered_set__swap)</ept><ph id=\"ph2\">`(right)`</ph>.","source":"The template function executes `left.`[unordered_set::swap](../standard-library/unordered-set-class.md#unordered_set__swap)`(right)`."},{"pos":[1115,1122],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2048,2113],"content":"<bpt id=\"p1\">&lt;a name=\"swap_unordered_multiset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  swap (unordered_multiset)","linkify":"<a name=\"swap_unordered_multiset\"></a>  swap (unordered_multiset)","source":"<a name=\"swap_unordered_multiset\"></a>  swap (unordered_multiset)"},{"content":"Swaps the contents of two containers.","pos":[2116,2153]},{"pos":[2363,2373],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The key type.","pos":[2386,2399]},{"content":"The hash function object type.","pos":[2416,2446]},{"content":"The equality comparison function object type.","pos":[2463,2508]},{"content":"The allocator class.","pos":[2526,2546]},{"content":"The first container to swap.","pos":[2563,2591]},{"content":"The second container to swap.","pos":[2609,2638]},{"pos":[2648,2655],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2659,2807],"content":"The template function executes <ph id=\"ph1\">`left.`</ph><bpt id=\"p1\">[</bpt>unordered_multiset::swap<ept id=\"p1\">](../standard-library/unordered-multiset-class.md#unordered_multiset__swap)</ept><ph id=\"ph2\">`(right)`</ph>.","source":"The template function executes `left.`[unordered_multiset::swap](../standard-library/unordered-multiset-class.md#unordered_multiset__swap)`(right)`."},{"pos":[2817,2824],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3878,3886],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3890,3945],"content":"<bpt id=\"p1\">[</bpt>&lt;unordered_set&gt;<ept id=\"p1\">](../standard-library/unordered-set.md)</ept>","source":"[<unordered_set>](../standard-library/unordered-set.md)"}],"content":"---\ntitle: \"&lt;unordered_set&gt; functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 66b35671-4023-4411-ad50-83786580d8ee\ncaps.latest.revision: 10\nmanager: \"ghogen\"\n---\n# &lt;unordered_set&gt; functions\n|||  \n|-|-|  \n|[swap (set)](#swap)|[swap (unordered_multiset)](#swap_unordered_multiset)|  \n  \n##  <a name=\"swap\"></a>  swap (unordered_set)  \n Swaps the contents of two containers.  \n  \n```  \n \ntemplate <class Key, class Hash, class Pred, class Alloc>  \nvoid swap(\n   unordered_set <Key, Hash, Pred, Alloc>& left,  \n   unordered_set <Key, Hash, Pred, Alloc>& right);\n```  \n  \n### Parameters  \n `Key`  \n The key type.  \n  \n `Hash`  \n The hash function object type.  \n  \n `Pred`  \n The equality comparison function object type.  \n  \n `Alloc`  \n The allocator class.  \n  \n `left`  \n The first container to swap.  \n  \n `right`  \n The second container to swap.  \n  \n### Remarks  \n The template function executes `left.`[unordered_set::swap](../standard-library/unordered-set-class.md#unordered_set__swap)`(right)`.  \n  \n### Example  \n  \n```cpp  \n  \n#include <unordered_set>  \n#include <iostream>  \n  \ntypedef std::unordered_set<char> Myset;  \nint main()  \n{  \nMyset c1;  \n  \nc1.insert('a');  \nc1.insert('b');  \nc1.insert('c');  \n  \n// display contents \" [c] [b] [a]\"  \nfor (Myset::const_iterator it = c1.begin();  \nit != c1.end(); ++it)  \nstd::cout << \" [\" << *it << \"]\";  \nstd::cout << std::endl;  \n  \nMyset c2;  \n  \nc2.insert('d');  \nc2.insert('e');  \nc2.insert('f');  \n  \nc1.swap(c2);  \n  \n// display contents \" [f] [e] [d]\"  \nfor (Myset::const_iterator it = c1.begin();  \nit != c1.end(); ++it)  \nstd::cout << \" [\" << *it << \"]\";  \nstd::cout << std::endl;  \n  \nswap(c1, c2);  \n  \n// display contents \" [c] [b] [a]\"  \nfor (Myset::const_iterator it = c1.begin();  \nit != c1.end(); ++it)  \nstd::cout << \" [\" << *it << \"]\";  \nstd::cout << std::endl;  \n  \nreturn (0);  \n}  \n  \n```  \n  \n```Output  \n  \n[c] [b] [a]  \n[f] [e] [d]  \n[c] [b] [a]  \n  \n```  \n  \n##  <a name=\"swap_unordered_multiset\"></a>  swap (unordered_multiset) \n Swaps the contents of two containers.  \n  \n```  \n \ntemplate <class Key, class Hash, class Pred, class Alloc>  \nvoid swap(\n   unordered_multiset <Key, Hash, Pred, Alloc>& left,  \n   unordered_multiset <Key, Hash, Pred, Alloc>& right);\n```  \n  \n### Parameters  \n `Key`  \n The key type.  \n  \n `Hash`  \n The hash function object type.  \n  \n `Pred`  \n The equality comparison function object type.  \n  \n `Alloc`  \n The allocator class.  \n  \n `left`  \n The first container to swap.  \n  \n `right`  \n The second container to swap.  \n  \n### Remarks  \n The template function executes `left.`[unordered_multiset::swap](../standard-library/unordered-multiset-class.md#unordered_multiset__swap)`(right)`.  \n  \n### Example  \n  \n```cpp  \n  \n// std_tr1__unordered_set__u_ms_swap.cpp  \n// compile with: /EHsc  \n#include <unordered_set>  \n#include <iostream>  \n  \ntypedef std::unordered_multiset<char> Myset;\nint main()\n{\n    Myset c1;\n\n    c1.insert('a');\n    c1.insert('b');\n    c1.insert('c');\n\n    // display contents \" [c] [b] [a]\"  \n    for (Myset::const_iterator it = c1.begin();\n        it != c1.end(); ++it)\n        std::cout << \" [\" << *it << \"]\";\n    std::cout << std::endl;\n\n    Myset c2;\n\n    c2.insert('d');\n    c2.insert('e');\n    c2.insert('f');\n\n    c1.swap(c2);\n\n    // display contents \" [f] [e] [d]\"  \n    for (Myset::const_iterator it = c1.begin();\n        it != c1.end(); ++it)\n        std::cout << \" [\" << *it << \"]\";\n    std::cout << std::endl;\n\n    swap(c1, c2);\n\n    // display contents \" [c] [b] [a]\"  \n    for (Myset::const_iterator it = c1.begin();\n        it != c1.end(); ++it)\n        std::cout << \" [\" << *it << \"]\";\n    std::cout << std::endl;\n\n    return (0);\n}\n  \n```  \n  \n```Output  \n  \n[c] [b] [a]  \n[f] [e] [d]  \n[c] [b] [a]  \n  \n```  \n  \n## See Also  \n [<unordered_set>](../standard-library/unordered-set.md)\n\n"}