{"nodes":[{"pos":[12,65],"content":"Interpretation of Subscript Operator | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Interpretation of Subscript Operator | Microsoft Docs","pos":[0,53]}]},{"content":"Interpretation of Subscript Operator","pos":[745,781]},{"content":"Like other operators, the subscript operator (<bpt id=\"p1\">**</bpt>[ ]<ept id=\"p1\">**</ept>) can be redefined by the user.","pos":[782,866],"source":"Like other operators, the subscript operator (**[ ]**) can be redefined by the user."},{"content":"The default behavior of the subscript operator, if not overloaded, is to combine the array name and the subscript using the following method:","pos":[867,1008]},{"pos":[1017,1049],"content":"((<bpt id=\"p1\">*</bpt>array-name<ept id=\"p1\">*</ept>) + (<bpt id=\"p2\">*</bpt>subscript<ept id=\"p2\">*</ept>))","source":"((*array-name*) + (*subscript*))"},{"content":"As in all addition that involves pointer types, scaling is performed automatically to adjust for the size of the type.","pos":[1056,1174]},{"content":"Therefore, the resultant value is not <bpt id=\"p1\">*</bpt>subscript<ept id=\"p1\">*</ept> bytes from the origin of <bpt id=\"p2\">*</bpt>array-name<ept id=\"p2\">*</ept>; rather, it is the <bpt id=\"p3\">*</bpt>subscript<ept id=\"p3\">*</ept>th element of the array.","pos":[1175,1317],"source":" Therefore, the resultant value is not *subscript* bytes from the origin of *array-name*; rather, it is the *subscript*th element of the array."},{"content":"(For more information about this conversion, see <bpt id=\"p1\">[</bpt>Additive Operators<ept id=\"p1\">](../cpp/additive-operators-plus-and.md)</ept>.)","pos":[1318,1428],"source":" (For more information about this conversion, see [Additive Operators](../cpp/additive-operators-plus-and.md).)"},{"content":"Similarly, for multidimensional arrays, the address is derived using the following method:","pos":[1435,1525]},{"content":"((","pos":[1534,1536]},{"content":"<bpt id=\"p1\">*</bpt>array-name<ept id=\"p1\">*</ept> ) + (","pos":[1545,1563],"source":"*array-name* ) + ("},{"content":"<bpt id=\"p1\"> **</bpt><bpt id=\"p2\">*</bpt>subscript<ept id=\"p2\">*</ept> 1<ept id=\"p1\">**</ept>  <bpt id=\"p3\">*</bpt>max<ept id=\"p3\">*</ept>2 <bpt id=\"p4\">*</bpt><ph id=\"ph1\">\\*</ph> max<ept id=\"p4\">*</ept>3<bpt id=\"p5\">*</bpt>...max<ept id=\"p5\">*</ept>n)               <bpt id=\"p6\">**</bpt><ph id=\"ph2\">+</ph><ept id=\"p6\">**</ept> <bpt id=\"p7\">*</bpt>subscript<ept id=\"p7\">*</ept>2 <bpt id=\"p8\">*</bpt><ph id=\"ph3\">\\*</ph> max<ept id=\"p8\">*</ept>3<bpt id=\"p9\">*</bpt>...max<ept id=\"p9\">*</ept>n)                    .","pos":[1569,1689],"source":" ***subscript* 1**  *max*2 *\\* max*3*...max*n)               **+** *subscript*2 *\\* max*3*...max*n)                    ."},{"content":".","pos":[1690,1691]},{"content":".","pos":[1692,1693]},{"content":"<bpt id=\"p1\">*</bpt><ph id=\"ph1\">+</ph><ept id=\"p1\">*</ept> <bpt id=\"p2\">*</bpt>subscript<ept id=\"p2\">*</ept>n))","pos":[1694,1712],"source":"*+* *subscript*n))"},{"content":"See Also","pos":[1721,1729]},{"content":"Arrays","pos":[1734,1740]}],"content":"---\ntitle: \"Interpretation of Subscript Operator | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"subscript operator, interpretation of\"\n  - \"arrays [C++], subscripting\"\n  - \"interpreting subscript operators\"\n  - \"operators [C++], interpretation of subscript\"\nms.assetid: 8852ca18-9d5b-43f7-b8bd-abc89364fbf2\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Interpretation of Subscript Operator\nLike other operators, the subscript operator (**[ ]**) can be redefined by the user. The default behavior of the subscript operator, if not overloaded, is to combine the array name and the subscript using the following method:  \n  \n \\*((*array-name*) + (*subscript*))  \n  \n As in all addition that involves pointer types, scaling is performed automatically to adjust for the size of the type. Therefore, the resultant value is not *subscript* bytes from the origin of *array-name*; rather, it is the *subscript*th element of the array. (For more information about this conversion, see [Additive Operators](../cpp/additive-operators-plus-and.md).)  \n  \n Similarly, for multidimensional arrays, the address is derived using the following method:  \n  \n **((**   \n ***array-name* ) + (**   \n ***subscript* 1**  *max*2 *\\* max*3*...max*n)               **+** *subscript*2 *\\* max*3*...max*n)                    . . . *+* *subscript*n))  \n  \n## See Also  \n [Arrays](../cpp/arrays-cpp.md)"}