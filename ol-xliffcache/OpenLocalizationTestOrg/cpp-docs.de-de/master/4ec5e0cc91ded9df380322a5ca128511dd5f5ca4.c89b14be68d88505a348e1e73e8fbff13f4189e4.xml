{"nodes":[{"pos":[12,36],"content":"mbsinit | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"mbsinit | Microsoft Docs","pos":[0,24]}]},{"content":"mbsinit","pos":[867,874]},{"content":"Tracks the state of a multibyte character conversion.","pos":[875,928]},{"content":"Syntax","pos":[937,943]},{"content":"Parameters","pos":[1023,1033]},{"content":"A pointer to an <bpt id=\"p1\">[</bpt>mbstate_t<ept id=\"p1\">](../../c-runtime-library/standard-types.md)</ept> variable.","pos":[1045,1125],"source":" A pointer to an [mbstate_t](../../c-runtime-library/standard-types.md) variable."},{"content":"Return Value","pos":[1134,1146]},{"pos":[1150,1214],"content":"Nonzero if <ph id=\"ph1\">`ps`</ph> is NULL or if not in the middle of a conversion.","source":"Nonzero if `ps` is NULL or if not in the middle of a conversion."},{"content":"Remarks","pos":[1223,1230]},{"pos":[1234,1428],"content":"When using one of the ANSI functions that takes an <bpt id=\"p1\">**</bpt>mbstate_t<ept id=\"p1\">**</ept> pointer, passing the address of your <ph id=\"ph1\">`mbstate_t`</ph> will return information about whether the last byte in the buffer was converted.","source":"When using one of the ANSI functions that takes an **mbstate_t** pointer, passing the address of your `mbstate_t` will return information about whether the last byte in the buffer was converted."},{"content":"The appropriate code page needs to be installed to support your multibyte characters.","pos":[1435,1520]},{"content":"Example","pos":[1529,1536]},{"content":"Sample Output","pos":[4095,4108]},{"content":"See Also","pos":[4399,4407]},{"content":"Byte Classification","pos":[4412,4431]}],"content":"---\ntitle: \"mbsinit | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"mbsinit\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"mbsinit\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"mbsinit function\"\nms.assetid: 4618555b-baaa-4d04-93fa-36abae411034\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# mbsinit\nTracks the state of a multibyte character conversion.  \n  \n## Syntax  \n  \n```  \n  \n      int mbsinit(  \n   const mbstate_t* ps  \n);  \n```  \n  \n#### Parameters  \n `ps`  \n A pointer to an [mbstate_t](../../c-runtime-library/standard-types.md) variable.  \n  \n## Return Value  \n Nonzero if `ps` is NULL or if not in the middle of a conversion.  \n  \n## Remarks  \n When using one of the ANSI functions that takes an **mbstate_t** pointer, passing the address of your `mbstate_t` will return information about whether the last byte in the buffer was converted.  \n  \n The appropriate code page needs to be installed to support your multibyte characters.  \n  \n## Example  \n  \n```  \n// crt_mbsinit.cpp  \n#include <stdio.h>  \n#include <mbctype.h>  \n#include <string.h>  \n#include <locale.h>  \n#include <cwchar>  \n#include <xlocinfo.h>  \n  \n#define   BUF_SIZE   0x40  \n  \nwchar_t      g_wcBuf[BUF_SIZE] = L\"This a wc buffer that will be over written...\";  \nchar      g_mbBuf[BUF_SIZE] = \"AaBbCc\\x9A\\x8B\\xE0\\xEF\\xF0xXyYzZ\";  \nint      g_nInit = strlen(g_mbBuf);  \n  \nint MbsinitSample(char* szIn, wchar_t* wcOut, int nMax)  \n{  \n   mbstate_t   state = {0};  \n   size_t      nConvResult, nmbLen = 0, nwcLen = 0;  \n   wchar_t*   wcCur = wcOut;  \n   wchar_t*   wcEnd = wcCur + nMax;  \n   const char*   mbCur = szIn;  \n   const char*   mbEnd = mbCur + strlen(mbCur) + 1;  \n   char*      szLocal = setlocale(LC_ALL, \"japanese\");  \n  \n   printf(\"Locale set to: \\\"%s\\\"\\n\", szLocal);  \n  \n   if   (_setmbcp(_MB_CP_LOCALE) != -1)  \n   {  \n      while   ((mbCur < mbEnd) && (wcCur < wcEnd))  \n      {  \n         nConvResult = mbrtowc(wcCur, mbCur, 1, &state);   \n  \n         switch   (nConvResult)  \n         {  \n            case 0:  \n            {   // done  \n               printf(\"Conversion succeeded!\\nMB String: \");  \n               printf(szIn);  \n               printf(\"\\nWC String: \");  \n               wprintf(wcOut);  \n               printf(\"\\n\");  \n               mbCur = mbEnd;  \n               break;  \n            }  \n  \n            case -1:  \n            {   // encoding error  \n               printf(\"ERROR: The call to mbrtowc has detected an encoding error.\\n\");  \n               mbCur = mbEnd;  \n               break;  \n            }  \n  \n            case -2:  \n            {   // incomplete character  \n               if   (!mbsinit(&state))  \n               {  \n                  printf(\"Currently in middle of mb conversion, state = %x\\n\", state);  \n                  // state will contain data regarding lead byte of mb character  \n               }  \n  \n               ++nmbLen;  \n               ++mbCur;  \n               break;  \n            }  \n  \n            default:  \n            {  \n               if   (nConvResult > 2)   // Microsoft mb should never be larger than 2  \n                  printf(\"ERROR: nConvResult = %d\\n\", nConvResult);  \n  \n               ++nmbLen;  \n               ++nwcLen;  \n               ++wcCur;  \n               ++mbCur;  \n               break;  \n            }  \n         }  \n      }  \n   }  \n   else  \n      printf(\"ERROR: _setmbcp(932) failed!\");  \n  \n   return 0;  \n}  \n  \nint main(int argc, char* argv[])  \n{  \n   return MbsinitSample(g_mbBuf, g_wcBuf, BUF_SIZE);  \n}  \n```  \n  \n## Sample Output  \n  \n```  \nLocale set to: \"Japanese_Japan.932\"  \nCurrently in middle of mb conversion, state = 9a  \nCurrently in middle of mb conversion, state = e0  \nCurrently in middle of mb conversion, state = f0  \nConversion succeeded!  \nMB String: AaBbCcxXyYzZ  \nWC String: AaBbCcxXyYzZ  \n```  \n  \n## See Also  \n [Byte Classification](../../c-runtime-library/byte-classification.md)"}