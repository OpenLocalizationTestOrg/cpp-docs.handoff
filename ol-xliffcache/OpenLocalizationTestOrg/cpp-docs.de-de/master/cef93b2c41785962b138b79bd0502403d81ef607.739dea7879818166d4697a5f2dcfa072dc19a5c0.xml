{"nodes":[{"pos":[12,46],"content":"_access, _waccess | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_access, _waccess | Microsoft Docs","pos":[0,34]}]},{"pos":[1109,1126],"content":"_access, _waccess","linkify":"_access, _waccess","nodes":[{"content":"_access, _waccess","pos":[0,17]}]},{"content":"Determines if a file is read-only or not.","pos":[1127,1168]},{"content":"More secure versions are available; see <bpt id=\"p1\">[</bpt>_access_s, _waccess_s<ept id=\"p1\">](../../c-runtime-library/reference/access-s-waccess-s.md)</ept>.","pos":[1169,1290],"source":" More secure versions are available; see [_access_s, _waccess_s](../../c-runtime-library/reference/access-s-waccess-s.md)."},{"pos":[1299,1305],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1455,1465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"File or directory path.","pos":[1479,1502]},{"content":"Read/write attribute.","pos":[1519,1540]},{"pos":[1549,1561],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Each function returns 0 if the file has the given mode.","pos":[1565,1620]},{"content":"The function returns –1 if the named file does not exist or does not have the given mode; in this case, <ph id=\"ph1\">`errno`</ph> is set as shown in the following table.","pos":[1621,1772],"source":" The function returns –1 if the named file does not exist or does not have the given mode; in this case, `errno` is set as shown in the following table."},{"content":"Access denied: the file's permission setting does not allow specified access.","pos":[1791,1868]},{"content":"File name or path not found.","pos":[1887,1915]},{"content":"Invalid parameter.","pos":[1934,1952]},{"pos":[1959,2136],"content":"For more information about these and other return codes, see <bpt id=\"p1\">[</bpt>_doserrno, errno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2145,2152],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When used with files, the <ph id=\"ph1\">`_access`</ph> function determines whether the specified file or directory exists and has the attributes specified by the value of <ph id=\"ph2\">`mode`</ph>.","pos":[2156,2315],"source":"When used with files, the `_access` function determines whether the specified file or directory exists and has the attributes specified by the value of `mode`."},{"content":"When used with directories, <ph id=\"ph1\">`_access`</ph> determines only whether the specified directory exists; in <ph id=\"ph2\">[!INCLUDE[Win2kFamily](../../c-runtime-library/includes/win2kfamily_md.md)]</ph> and later operating systems, all directories have read and write access.","pos":[2316,2561],"source":" When used with directories, `_access` determines only whether the specified directory exists; in [!INCLUDE[Win2kFamily](../../c-runtime-library/includes/win2kfamily_md.md)] and later operating systems, all directories have read and write access."},{"pos":[2568,2580],"content":"<ph id=\"ph1\">`mode`</ph> value","source":"`mode` value"},{"content":"Checks file for","pos":[2581,2596]},{"content":"00","pos":[2646,2648]},{"content":"Existence only","pos":[2649,2663]},{"content":"02","pos":[2668,2670]},{"content":"Write-only","pos":[2671,2681]},{"content":"04","pos":[2686,2688]},{"content":"Read-only","pos":[2689,2698]},{"content":"06","pos":[2703,2705]},{"content":"Read and write","pos":[2706,2720]},{"content":"This function only checks whether the file and directory are read-only or not, it does not check the filesystem security settings.","pos":[2728,2858]},{"content":"For that you need an access token.","pos":[2859,2893]},{"content":"For more information on filesystem security, see <bpt id=\"p1\">[</bpt>Access Tokens<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa374909)</ept>.","pos":[2894,3019],"source":" For more information on filesystem security, see [Access Tokens](http://msdn.microsoft.com/library/windows/desktop/aa374909)."},{"content":"An ATL class exists to provide this functionality; see <bpt id=\"p1\">[</bpt>CAccessToken Class<ept id=\"p1\">](../../atl/reference/caccesstoken-class.md)</ept>.","pos":[3020,3139],"source":" An ATL class exists to provide this functionality; see [CAccessToken Class](../../atl/reference/caccesstoken-class.md)."},{"content":"<ph id=\"ph1\">`_waccess`</ph> is a wide-character version of <ph id=\"ph2\">`_access`</ph>; the <ph id=\"ph3\">`path`</ph> argument to <ph id=\"ph4\">`_waccess`</ph> is a wide-character string.","pos":[3146,3260],"source":"`_waccess` is a wide-character version of `_access`; the `path` argument to `_waccess` is a wide-character string."},{"content":"<ph id=\"ph1\">`_waccess`</ph> and <ph id=\"ph2\">`_access`</ph> behave identically otherwise.","pos":[3261,3315],"source":"`_waccess` and `_access` behave identically otherwise."},{"content":"This function validates its parameters.","pos":[3322,3361]},{"content":"If <ph id=\"ph1\">`path`</ph> is <ph id=\"ph2\">`NULL`</ph> or <ph id=\"ph3\">`mode`</ph> does not specify a valid mode, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3362,3553],"source":" If `path` is `NULL` or `mode` does not specify a valid mode, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, the function sets <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph> and returns -1.","pos":[3554,3644],"source":" If execution is allowed to continue, the function sets `errno` to `EINVAL` and returns -1."},{"pos":[3654,3683],"content":"Generic-Text Routine Mappings","linkify":"Generic-Text Routine Mappings","nodes":[{"content":"Generic-Text Routine Mappings","pos":[0,29]}]},{"content":"Tchar.h routine","pos":[3690,3705]},{"content":"_UNICODE and _MBCS not defined","pos":[3706,3736]},{"content":"_MBCS defined","pos":[3737,3750]},{"content":"_UNICODE defined","pos":[3751,3767]},{"pos":[3933,3945],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[3952,3959]},{"content":"Required header","pos":[3960,3975]},{"content":"Optional headers","pos":[3976,3992]},{"content":"<ph id=\"ph1\">\\&lt;</ph>io.h&gt;","pos":[4070,4077],"source":"\\<io.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[4078,4088],"source":"\\<errno.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>wchar.h&gt; or <ph id=\"ph2\">\\&lt;</ph>io.h&gt;","pos":[4104,4125],"source":"\\<wchar.h> or \\<io.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>errno.h&gt;","pos":[4126,4136],"source":"\\<errno.h>"},{"pos":[4146,4153],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4157,4287],"content":"The following example uses <ph id=\"ph1\">`_access`</ph> to check the file named crt_ACCESS.C to see whether it exists and whether writing is allowed.","source":"The following example uses `_access` to check the file named crt_ACCESS.C to see whether it exists and whether writing is allowed."},{"pos":[5035,5060],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"content":"&lt;xref:System.IO.FileAccess?displayProperty=fullName&gt;","pos":[5064,5116],"source":"<xref:System.IO.FileAccess?displayProperty=fullName>"},{"pos":[5125,5133],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>File Handling<ept id=\"p1\">](../../c-runtime-library/file-handling.md)</ept><ph id=\"ph1\"> </ph>","pos":[5137,5195],"source":"[File Handling](../../c-runtime-library/file-handling.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_chmod, _wchmod<ept id=\"p1\">](../../c-runtime-library/reference/chmod-wchmod.md)</ept><ph id=\"ph1\"> </ph>","pos":[5198,5268],"source":" [_chmod, _wchmod](../../c-runtime-library/reference/chmod-wchmod.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32<ept id=\"p1\">](../../c-runtime-library/reference/fstat-fstat32-fstat64-fstati64-fstat32i64-fstat64i32.md)</ept><ph id=\"ph1\"> </ph>","pos":[5271,5429],"source":" [_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32](../../c-runtime-library/reference/fstat-fstat32-fstat64-fstati64-fstat32i64-fstat64i32.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_open, _wopen<ept id=\"p1\">](../../c-runtime-library/reference/open-wopen.md)</ept><ph id=\"ph1\"> </ph>","pos":[5432,5498],"source":" [_open, _wopen](../../c-runtime-library/reference/open-wopen.md) "},{"content":"<bpt id=\"p1\"> [</bpt>_stat, _wstat Functions<ept id=\"p1\">](../../c-runtime-library/reference/stat-functions.md)</ept>","pos":[5501,5580],"source":" [_stat, _wstat Functions](../../c-runtime-library/reference/stat-functions.md)"}],"content":"---\ntitle: \"_access, _waccess | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_access\"\n  - \"_waccess\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-filesystem-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_waccess\"\n  - \"_access\"\n  - \"taccess\"\n  - \"waccess\"\n  - \"_taccess\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"access function\"\n  - \"_taccess function\"\n  - \"waccess function\"\n  - \"_access function\"\n  - \"_waccess function\"\n  - \"taccess function\"\nms.assetid: ba34f745-85c3-49e5-a7d4-3590bd249dd3\ncaps.latest.revision: 27\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _access, _waccess\nDetermines if a file is read-only or not. More secure versions are available; see [_access_s, _waccess_s](../../c-runtime-library/reference/access-s-waccess-s.md).  \n  \n## Syntax  \n  \n```  \nint _access(   \n   const char *path,   \n   int mode   \n);  \nint _waccess(   \n   const wchar_t *path,   \n   int mode   \n);  \n```  \n  \n#### Parameters  \n `path`  \n File or directory path.  \n  \n `mode`  \n Read/write attribute.  \n  \n## Return Value  \n Each function returns 0 if the file has the given mode. The function returns –1 if the named file does not exist or does not have the given mode; in this case, `errno` is set as shown in the following table.  \n  \n `EACCES`  \n Access denied: the file's permission setting does not allow specified access.  \n  \n `ENOENT`  \n File name or path not found.  \n  \n `EINVAL`  \n Invalid parameter.  \n  \n For more information about these and other return codes, see [_doserrno, errno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n When used with files, the `_access` function determines whether the specified file or directory exists and has the attributes specified by the value of `mode`. When used with directories, `_access` determines only whether the specified directory exists; in [!INCLUDE[Win2kFamily](../../c-runtime-library/includes/win2kfamily_md.md)] and later operating systems, all directories have read and write access.  \n  \n|`mode` value|Checks file for|  \n|------------------|---------------------|  \n|00|Existence only|  \n|02|Write-only|  \n|04|Read-only|  \n|06|Read and write|  \n  \n This function only checks whether the file and directory are read-only or not, it does not check the filesystem security settings. For that you need an access token. For more information on filesystem security, see [Access Tokens](http://msdn.microsoft.com/library/windows/desktop/aa374909). An ATL class exists to provide this functionality; see [CAccessToken Class](../../atl/reference/caccesstoken-class.md).  \n  \n `_waccess` is a wide-character version of `_access`; the `path` argument to `_waccess` is a wide-character string. `_waccess` and `_access` behave identically otherwise.  \n  \n This function validates its parameters. If `path` is `NULL` or `mode` does not specify a valid mode, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, the function sets `errno` to `EINVAL` and returns -1.  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_taccess`|`_access`|`_access`|`_waccess`|  \n  \n## Requirements  \n  \n|Routine|Required header|Optional headers|  \n|-------------|---------------------|----------------------|  \n|`_access`|\\<io.h>|\\<errno.h>|  \n|`_waccess`|\\<wchar.h> or \\<io.h>|\\<errno.h>|  \n  \n## Example  \n The following example uses `_access` to check the file named crt_ACCESS.C to see whether it exists and whether writing is allowed.  \n  \n```  \n// crt_access.c  \n// compile with: /W1  \n// This example uses _access to check the file named  \n// crt_ACCESS.C to see if it exists and if writing is allowed.  \n  \n#include  <io.h>  \n#include  <stdio.h>  \n#include  <stdlib.h>  \n  \nint main( void )  \n{  \n    // Check for existence.  \n    if( (_access( \"crt_ACCESS.C\", 0 )) != -1 )  \n    {  \n        printf_s( \"File crt_ACCESS.C exists.\\n\" );  \n  \n        // Check for write permission.  \n        // Assume file is read-only.  \n        if( (_access( \"crt_ACCESS.C\", 2 )) == -1 )  \n            printf_s( \"File crt_ACCESS.C does not have write permission.\\n\" );  \n    }  \n}  \n```  \n  \n```Output  \nFile crt_ACCESS.C exists.  \nFile crt_ACCESS.C does not have write permission.  \n```  \n  \n## .NET Framework Equivalent  \n <xref:System.IO.FileAccess?displayProperty=fullName>  \n  \n## See Also  \n [File Handling](../../c-runtime-library/file-handling.md)   \n [_chmod, _wchmod](../../c-runtime-library/reference/chmod-wchmod.md)   \n [_fstat, _fstat32, _fstat64, _fstati64, _fstat32i64, _fstat64i32](../../c-runtime-library/reference/fstat-fstat32-fstat64-fstati64-fstat32i64-fstat64i32.md)   \n [_open, _wopen](../../c-runtime-library/reference/open-wopen.md)   \n [_stat, _wstat Functions](../../c-runtime-library/reference/stat-functions.md)"}