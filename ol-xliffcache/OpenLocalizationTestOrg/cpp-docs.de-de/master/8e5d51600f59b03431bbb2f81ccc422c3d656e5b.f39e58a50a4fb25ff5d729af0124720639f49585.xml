{"nodes":[{"pos":[12,53],"content":"auto_gcroot::auto_gcroot | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"auto_gcroot::auto_gcroot | Microsoft Docs","pos":[0,41]}]},{"content":"auto_gcroot::auto_gcroot","pos":[738,762]},{"pos":[763,793],"content":"The <ph id=\"ph1\">`auto_gcroot`</ph> constructor.","source":"The `auto_gcroot` constructor."},{"content":"Syntax","pos":[802,808]},{"content":"Parameters","pos":[1041,1051]},{"content":"The object to own.","pos":[1065,1083]},{"content":"An existing <ph id=\"ph1\">`auto_gcroot`</ph>.","pos":[1102,1128],"source":" An existing `auto_gcroot`."},{"content":"Remarks","pos":[1137,1144]},{"pos":[1148,1331],"content":"When constructing an <ph id=\"ph1\">`auto_gcroot`</ph> from an existing <ph id=\"ph2\">`auto_gcroot`</ph>, the existing <ph id=\"ph3\">`auto_gcroot`</ph> releases its object before transferring ownership of the object to the new <ph id=\"ph4\">`auto_gcroot`</ph>.","source":"When constructing an `auto_gcroot` from an existing `auto_gcroot`, the existing `auto_gcroot` releases its object before transferring ownership of the object to the new `auto_gcroot`."},{"content":"Example","pos":[1340,1347]},{"content":"Requirements","pos":[3297,3309]},{"pos":[3313,3351],"content":"<bpt id=\"p1\">**</bpt>Header file<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>msclr\\auto_gcroot.h&gt;","source":"**Header file** \\<msclr\\auto_gcroot.h>"},{"pos":[3358,3377],"content":"<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> msclr","source":"**Namespace** msclr"},{"content":"See Also","pos":[3386,3394]},{"content":"auto_gcroot Members","pos":[3399,3418]},{"content":"auto_gcroot::attach","pos":[3459,3478]},{"content":"auto_gcroot::operator=","pos":[3518,3540]},{"content":"auto_gcroot::~auto_gcroot","pos":[3589,3614]}],"content":"---\ntitle: \"auto_gcroot::auto_gcroot | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"msclr::auto_gcroot::auto_gcroot\"\n  - \"auto_gcroot::auto_gcroot\"\n  - \"auto_gcroot.auto_gcroot\"\n  - \"msclr.auto_gcroot.auto_gcroot\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"auto_gcroot::auto_gcroot\"\nms.assetid: 27faa42a-64ea-4d31-836f-073a55145735\ncaps.latest.revision: 12\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# auto_gcroot::auto_gcroot\nThe `auto_gcroot` constructor.  \n  \n## Syntax  \n  \n```  \nauto_gcroot(  \n   _element_type _ptr = nullptr  \n);  \nauto_gcroot(  \n   auto_gcroot<_element_type> & _right  \n);  \ntemplate<typename _other_type>  \nauto_gcroot(  \n   auto_gcroot<_other_type> & _right  \n);  \n```  \n  \n#### Parameters  \n `_ptr`  \n The object to own.  \n  \n `_right`  \n An existing `auto_gcroot`.  \n  \n## Remarks  \n When constructing an `auto_gcroot` from an existing `auto_gcroot`, the existing `auto_gcroot` releases its object before transferring ownership of the object to the new `auto_gcroot`.  \n  \n## Example  \n  \n```  \n// msl_auto_gcroot_auto_gcroot.cpp  \n// compile with: /clr  \n#include <msclr\\auto_gcroot.h>  \n  \nusing namespace System;  \nusing namespace msclr;  \n  \nref class RefClassA {  \nprotected:  \n   String^ m_s;     \npublic:  \n   RefClassA(String^ s) : m_s(s) {  \n      Console::WriteLine( \"in RefClassA constructor: \" + m_s );  \n   }  \n   ~RefClassA() {  \n      Console::WriteLine( \"in RefClassA destructor: \" + m_s );  \n   }  \n  \n   virtual void PrintHello() {  \n      Console::WriteLine( \"Hello from {0} A!\", m_s );  \n   }  \n};  \n  \nref class RefClassB : RefClassA {  \npublic:     \n   RefClassB( String^ s ) : RefClassA( s ) {}  \n   virtual void PrintHello() new {  \n      Console::WriteLine( \"Hello from {0} B!\", m_s );  \n   }  \n};  \n  \nclass ClassA { //unmanaged class  \nprivate:     \n   auto_gcroot<RefClassA^> m_a;  \n  \npublic:  \n   ClassA() : m_a( gcnew RefClassA( \"unmanaged\" ) ) {}  \n   ~ClassA() {} //no need to delete m_a  \n  \n   void DoSomething() {  \n      m_a->PrintHello();  \n   }  \n};  \n  \nint main()  \n{  \n   {  \n      ClassA a;  \n      a.DoSomething();  \n   } // a.m_a is automatically destroyed as a goes out of scope  \n  \n   {  \n      auto_gcroot<RefClassA^> a(gcnew RefClassA( \"first\" ) );  \n      a->PrintHello();  \n   }  \n  \n   {  \n      auto_gcroot<RefClassB^> b(gcnew RefClassB( \"second\" ) );  \n      b->PrintHello();  \n      auto_gcroot<RefClassA^> a(b); //construct from derived type  \n      a->PrintHello();  \n      auto_gcroot<RefClassA^> a2(a); //construct from same type  \n      a2->PrintHello();  \n   }  \n  \n   Console::WriteLine(\"done\");  \n}  \n```  \n  \n```Output  \nin RefClassA constructor: unmanaged  \nHello from unmanaged A!  \nin RefClassA destructor: unmanaged  \nin RefClassA constructor: first  \nHello from first A!  \nin RefClassA destructor: first  \nin RefClassA constructor: second  \nHello from second B!  \nHello from second A!  \nHello from second A!  \nin RefClassA destructor: second  \ndone  \n```  \n  \n## Requirements  \n **Header file** \\<msclr\\auto_gcroot.h>  \n  \n **Namespace** msclr  \n  \n## See Also  \n [auto_gcroot Members](../dotnet/auto-gcroot-members.md)   \n [auto_gcroot::attach](../dotnet/auto-gcroot-attach.md)   \n [auto_gcroot::operator=](../dotnet/auto-gcroot-operator-assign.md)   \n [auto_gcroot::~auto_gcroot](../dotnet/auto-gcroot-tilde-auto-gcroot.md)"}