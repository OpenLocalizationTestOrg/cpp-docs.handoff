<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6202ee748a3a68c11aecee403d6ea1217545dc0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\purpose-of-attributes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2565e41ea33ad715279a84bcc90b141d8549873c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05d8214c2cd1838acac3f424f1d0bd577c12ccfb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Purpose of Attributes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Purpose of Attributes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Attributes extend C++ in directions not currently possible without breaking the classic structure of the language.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Attributes allow providers (separate DLLs) to extend language functionality dynamically.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The primary goal of attributes is to simplify the authoring of COM components, in addition to increasing the productivity level of the component developer.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Attributes can be applied to nearly any C++ construct, such as classes, data members, or member functions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following is a highlight of benefits provided by this new technology:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Exposes a familiar and simple calling convention.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Uses inserted code, which, unlike macros, is recognized by the debugger.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Allows easy derivation from base classes without burdensome implementation details.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Replaces the large amount of IDL code required by a COM component with a few concise attributes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, to implement a simple event sink for a generic ATL class, you could apply the <bpt id="p1">[</bpt>event_receiver<ept id="p1">](../windows/event-receiver.md)</ept> attribute to a specific class such as <ph id="ph1">`CMyReceiver`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>event_receiver<ept id="p1">**</ept> attribute is then compiled by the Visual C++ compiler, which inserts the proper code into the object file.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can then set up the <bpt id="p1">**</bpt>CMyReceiver<ept id="p1">**</ept> methods <ph id="ph1">`handler1`</ph> and <ph id="ph2">`handler2`</ph> to handle events (using the intrinsic function <bpt id="p2">[</bpt>__hook<ept id="p2">](../cpp/hook.md)</ept>) from an event source, which you can create using <bpt id="p3">[</bpt>event_source<ept id="p3">](../windows/event-source.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Concepts</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>