{"nodes":[{"pos":[12,62],"content":"CAnimationTimerEventHandler Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CAnimationTimerEventHandler Class | Microsoft Docs","pos":[0,50]}]},{"pos":[712,745],"content":"CAnimationTimerEventHandler Class","linkify":"CAnimationTimerEventHandler Class","nodes":[{"content":"CAnimationTimerEventHandler Class","pos":[0,33]}]},{"content":"Implements a callback, which is called by the Animation API when timing events occur.","pos":[746,831]},{"pos":[840,846],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[979,986],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[996,1010],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1017,1021]},{"content":"Description","pos":[1022,1033]},{"pos":[1071,1162],"content":"<bpt id=\"p1\">[</bpt>CAnimationTimerEventHandler::CreateInstance<ept id=\"p1\">](#canimationtimereventhandler__createinstance)</ept>","source":"[CAnimationTimerEventHandler::CreateInstance](#canimationtimereventhandler__createinstance)"},{"pos":[1163,1225],"content":"Creates an instance of <ph id=\"ph1\">`CAnimationTimerEventHandler`</ph> callback.","source":"Creates an instance of `CAnimationTimerEventHandler` callback."},{"pos":[1230,1317],"content":"<bpt id=\"p1\">[</bpt>CAnimationTimerEventHandler::OnPostUpdate<ept id=\"p1\">](#canimationtimereventhandler__onpostupdate)</ept>","source":"[CAnimationTimerEventHandler::OnPostUpdate](#canimationtimereventhandler__onpostupdate)"},{"content":"Handles events that occur after an animation update is finished.","pos":[1318,1382]},{"content":"(Overrides <ph id=\"ph1\">`CUIAnimationTimerEventHandlerBase::OnPostUpdate`</ph>.)","pos":[1383,1445],"source":" (Overrides `CUIAnimationTimerEventHandlerBase::OnPostUpdate`.)"},{"pos":[1450,1535],"content":"<bpt id=\"p1\">[</bpt>CAnimationTimerEventHandler::OnPreUpdate<ept id=\"p1\">](#canimationtimereventhandler__onpreupdate)</ept>","source":"[CAnimationTimerEventHandler::OnPreUpdate](#canimationtimereventhandler__onpreupdate)"},{"content":"Handles events that occur before an animation update begins.","pos":[1536,1596]},{"content":"(Overrides <ph id=\"ph1\">`CUIAnimationTimerEventHandlerBase::OnPreUpdate`</ph>.)","pos":[1597,1658],"source":" (Overrides `CUIAnimationTimerEventHandlerBase::OnPreUpdate`.)"},{"pos":[1663,1762],"content":"<bpt id=\"p1\">[</bpt>CAnimationTimerEventHandler::OnRenderingTooSlow<ept id=\"p1\">](#canimationtimereventhandler__onrenderingtooslow)</ept>","source":"[CAnimationTimerEventHandler::OnRenderingTooSlow](#canimationtimereventhandler__onrenderingtooslow)"},{"content":"Handles events that occur when the rendering frame rate for an animation falls below the minimum desirable frame rate.","pos":[1763,1881]},{"content":"(Overrides <ph id=\"ph1\">`CUIAnimationTimerEventHandlerBase::OnRenderingTooSlow`</ph>.)","pos":[1882,1950],"source":" (Overrides `CUIAnimationTimerEventHandlerBase::OnRenderingTooSlow`.)"},{"pos":[1955,2062],"content":"<bpt id=\"p1\">[</bpt>CAnimationTimerEventHandler::SetAnimationController<ept id=\"p1\">](#canimationtimereventhandler__setanimationcontroller)</ept>","source":"[CAnimationTimerEventHandler::SetAnimationController](#canimationtimereventhandler__setanimationcontroller)"},{"content":"Stores a pointer to animation controller to route events.","pos":[2063,2120]},{"pos":[2130,2137],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event handler is created and passed to IUIAnimationTimer::SetTimerEventHandler when you call CAnimationController::EnableAnimationTimerEventHandler.","pos":[2141,2294]},{"pos":[2303,2324],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[2441,2453],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2457,2493],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxanimationcontroller.h","source":"**Header:** afxanimationcontroller.h"},{"pos":[2503,2606],"content":"<bpt id=\"p1\">&lt;a name=\"canimationtimereventhandler__createinstance\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationTimerEventHandler::CreateInstance","linkify":"<a name=\"canimationtimereventhandler__createinstance\"></a>  CAnimationTimerEventHandler::CreateInstance","source":"<a name=\"canimationtimereventhandler__createinstance\"></a>  CAnimationTimerEventHandler::CreateInstance"},{"content":"Creates an instance of CAnimationTimerEventHandler callback.","pos":[2610,2670]},{"pos":[2855,2865],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to animation controller, which will receive events.","pos":[2895,2956]},{"pos":[2994,3006],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If the method succeeds, it returns S_OK.","pos":[3010,3050]},{"content":"Otherwise, it returns an HRESULT error code.","pos":[3051,3095]},{"pos":[3105,3204],"content":"<bpt id=\"p1\">&lt;a name=\"canimationtimereventhandler__onpostupdate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationTimerEventHandler::OnPostUpdate","linkify":"<a name=\"canimationtimereventhandler__onpostupdate\"></a>  CAnimationTimerEventHandler::OnPostUpdate","source":"<a name=\"canimationtimereventhandler__onpostupdate\"></a>  CAnimationTimerEventHandler::OnPostUpdate"},{"content":"Handles events that occur after an animation update is finished.","pos":[3208,3272]},{"pos":[3326,3338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if the method succeeds; otherwise E_FAIL.","pos":[3342,3388]},{"pos":[3398,3495],"content":"<bpt id=\"p1\">&lt;a name=\"canimationtimereventhandler__onpreupdate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationTimerEventHandler::OnPreUpdate","linkify":"<a name=\"canimationtimereventhandler__onpreupdate\"></a>  CAnimationTimerEventHandler::OnPreUpdate","source":"<a name=\"canimationtimereventhandler__onpreupdate\"></a>  CAnimationTimerEventHandler::OnPreUpdate"},{"content":"Handles events that occur before an animation update begins.","pos":[3499,3559]},{"pos":[3612,3624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if the method succeeds; otherwise E_FAIL.","pos":[3628,3674]},{"pos":[3684,3795],"content":"<bpt id=\"p1\">&lt;a name=\"canimationtimereventhandler__onrenderingtooslow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationTimerEventHandler::OnRenderingTooSlow","linkify":"<a name=\"canimationtimereventhandler__onrenderingtooslow\"></a>  CAnimationTimerEventHandler::OnRenderingTooSlow","source":"<a name=\"canimationtimereventhandler__onrenderingtooslow\"></a>  CAnimationTimerEventHandler::OnRenderingTooSlow"},{"content":"Handles events that occur when the rendering frame rate for an animation falls below the minimum desirable frame rate.","pos":[3799,3917]},{"pos":[3987,3997],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[4016,4028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if the method succeeds; otherwise E_FAIL.","pos":[4032,4078]},{"pos":[4088,4207],"content":"<bpt id=\"p1\">&lt;a name=\"canimationtimereventhandler__setanimationcontroller\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CAnimationTimerEventHandler::SetAnimationController","linkify":"<a name=\"canimationtimereventhandler__setanimationcontroller\"></a>  CAnimationTimerEventHandler::SetAnimationController","source":"<a name=\"canimationtimereventhandler__setanimationcontroller\"></a>  CAnimationTimerEventHandler::SetAnimationController"},{"content":"Stores a pointer to animation controller to route events.","pos":[4211,4268]},{"pos":[4366,4376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to animation controller, which will receive events.","pos":[4406,4467]},{"pos":[4476,4484],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4488,4533],"content":"<bpt id=\"p1\">[</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept>","source":"[Classes](../../mfc/reference/mfc-classes.md)"}],"content":"---\ntitle: \"CAnimationTimerEventHandler Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"afxanimationcontroller/CAnimationTimerEventHandler\"\n  - \"CAnimationTimerEventHandler\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CAnimationTimerEventHandler class\"\nms.assetid: 188dea3b-4b5e-4f6b-8df9-09d993a21619\ncaps.latest.revision: 18\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CAnimationTimerEventHandler Class\nImplements a callback, which is called by the Animation API when timing events occur.  \n  \n## Syntax  \n  \n```  \nclass CAnimationTimerEventHandler : public CUIAnimationTimerEventHandlerBase<CAnimationTimerEventHandler>;  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CAnimationTimerEventHandler::CreateInstance](#canimationtimereventhandler__createinstance)|Creates an instance of `CAnimationTimerEventHandler` callback.|  \n|[CAnimationTimerEventHandler::OnPostUpdate](#canimationtimereventhandler__onpostupdate)|Handles events that occur after an animation update is finished. (Overrides `CUIAnimationTimerEventHandlerBase::OnPostUpdate`.)|  \n|[CAnimationTimerEventHandler::OnPreUpdate](#canimationtimereventhandler__onpreupdate)|Handles events that occur before an animation update begins. (Overrides `CUIAnimationTimerEventHandlerBase::OnPreUpdate`.)|  \n|[CAnimationTimerEventHandler::OnRenderingTooSlow](#canimationtimereventhandler__onrenderingtooslow)|Handles events that occur when the rendering frame rate for an animation falls below the minimum desirable frame rate. (Overrides `CUIAnimationTimerEventHandlerBase::OnRenderingTooSlow`.)|  \n|[CAnimationTimerEventHandler::SetAnimationController](#canimationtimereventhandler__setanimationcontroller)|Stores a pointer to animation controller to route events.|  \n  \n## Remarks  \n This event handler is created and passed to IUIAnimationTimer::SetTimerEventHandler when you call CAnimationController::EnableAnimationTimerEventHandler.  \n  \n## Inheritance Hierarchy  \n `CUIAnimationCallbackBase`  \n  \n `CUIAnimationTimerEventHandlerBase`  \n  \n `CAnimationTimerEventHandler`  \n  \n## Requirements  \n **Header:** afxanimationcontroller.h  \n  \n##  <a name=\"canimationtimereventhandler__createinstance\"></a>  CAnimationTimerEventHandler::CreateInstance  \n Creates an instance of CAnimationTimerEventHandler callback.  \n  \n```  \nstatic COM_DECLSPEC_NOTHROW HRESULT CreateInstance(\n    CAnimationController* pAnimationController,  \n    IUIAnimationTimerEventHandler** ppTimerEventHandler);\n```  \n  \n### Parameters  \n `pAnimationController`  \n A pointer to animation controller, which will receive events.  \n  \n `ppTimerEventHandler`  \n  \n### Return Value  \n If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.  \n  \n##  <a name=\"canimationtimereventhandler__onpostupdate\"></a>  CAnimationTimerEventHandler::OnPostUpdate  \n Handles events that occur after an animation update is finished.  \n  \n```  \nIFACEMETHOD(OnPostUpdate)();\n```  \n  \n### Return Value  \n S_OK if the method succeeds; otherwise E_FAIL.  \n  \n##  <a name=\"canimationtimereventhandler__onpreupdate\"></a>  CAnimationTimerEventHandler::OnPreUpdate  \n Handles events that occur before an animation update begins.  \n  \n```  \nIFACEMETHOD(OnPreUpdate)();\n```  \n  \n### Return Value  \n S_OK if the method succeeds; otherwise E_FAIL.  \n  \n##  <a name=\"canimationtimereventhandler__onrenderingtooslow\"></a>  CAnimationTimerEventHandler::OnRenderingTooSlow  \n Handles events that occur when the rendering frame rate for an animation falls below the minimum desirable frame rate.  \n  \n```  \nIFACEMETHOD(OnRenderingTooSlow)(UINT32 fps);\n```  \n  \n### Parameters  \n `fps`  \n  \n### Return Value  \n S_OK if the method succeeds; otherwise E_FAIL.  \n  \n##  <a name=\"canimationtimereventhandler__setanimationcontroller\"></a>  CAnimationTimerEventHandler::SetAnimationController  \n Stores a pointer to animation controller to route events.  \n  \n```  \nvoid SetAnimationController(CAnimationController* pAnimationController);\n```  \n  \n### Parameters  \n `pAnimationController`  \n A pointer to animation controller, which will receive events.  \n  \n## See Also  \n [Classes](../../mfc/reference/mfc-classes.md)\n"}