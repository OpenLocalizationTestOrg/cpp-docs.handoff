{"nodes":[{"pos":[12,85],"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, __swprintf_l | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, __swprintf_l | Microsoft Docs","pos":[0,73]}]},{"content":"sprintf, _sprintf_l, swprintf, _swprintf_l, __swprintf_l","pos":[1456,1512]},{"content":"Write formatted data to a string.","pos":[1513,1546]},{"content":"More secure versions of some of these functions are available; see <bpt id=\"p1\">[</bpt>sprintf_s, _sprintf_s_l, swprintf_s, _swprintf_s_l<ept id=\"p1\">](../../c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l.md)</ept>.","pos":[1547,1751],"source":" More secure versions of some of these functions are available; see [sprintf_s, _sprintf_s_l, swprintf_s, _swprintf_s_l](../../c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l.md)."},{"content":"The secure versions of <ph id=\"ph1\">`swprintf`</ph> and <ph id=\"ph2\">`_swprintf_l`</ph> do not take a <ph id=\"ph3\">`count`</ph> parameter.","pos":[1752,1836],"source":" The secure versions of `swprintf` and `_swprintf_l` do not take a `count` parameter."},{"content":"Syntax","pos":[1845,1851]},{"content":"Parameters","pos":[2730,2740]},{"content":"Storage location for output","pos":[2756,2783]},{"content":"Maximum number of characters to store in the Unicode version of this function.","pos":[2801,2879]},{"content":"Format-control string","pos":[2898,2919]},{"content":"Optional arguments","pos":[2940,2958]},{"content":"The locale to use.","pos":[2977,2995]},{"pos":[3002,3137],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specifications<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"content":"Return Value","pos":[3146,3158]},{"content":"The number of characters written, or â€“1 if an error occurred.","pos":[3162,3223]},{"content":"If <ph id=\"ph1\">`buffer`</ph> or <ph id=\"ph2\">`format`</ph> is a null pointer, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[3224,3397],"source":" If `buffer` or `format` is a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return -1 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[3398,3489],"source":" If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`."},{"content":"returns the number of bytes stored in <ph id=\"ph1\">`buffer`</ph>, not counting the terminating null character.","pos":[3506,3598],"source":" returns the number of bytes stored in `buffer`, not counting the terminating null character."},{"content":"returns the number of wide characters stored in <ph id=\"ph1\">`buffer`</ph>, not counting the terminating null wide character.","pos":[3609,3716],"source":"returns the number of wide characters stored in `buffer`, not counting the terminating null wide character."},{"content":"Remarks","pos":[3725,3732]},{"content":"The <ph id=\"ph1\">`sprintf`</ph> function formats and stores a series of characters and values in <ph id=\"ph2\">`buffer`</ph>.","pos":[3736,3824],"source":"The `sprintf` function formats and stores a series of characters and values in `buffer`."},{"content":"Each <ph id=\"ph1\">`argument`</ph> (if any) is converted and output according to the corresponding format specification in <ph id=\"ph2\">`format`</ph>.","pos":[3825,3938],"source":" Each `argument` (if any) is converted and output according to the corresponding format specification in `format`."},{"content":"The format consists of ordinary characters and has the same form and function as the <ph id=\"ph1\">`format`</ph> argument for <bpt id=\"p1\">[</bpt>printf<ept id=\"p1\">](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)</ept>.","pos":[3939,4127],"source":" The format consists of ordinary characters and has the same form and function as the `format` argument for [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)."},{"content":"A null character is appended after the last character written.","pos":[4128,4190]},{"content":"If copying occurs between strings that overlap, the behavior is undefined.","pos":[4191,4265]},{"pos":[4273,4850],"content":"[!IMPORTANT]\n Using `sprintf`, there is no way to limit the number of characters written, which means that code using `sprintf` is susceptible to buffer overruns. Consider using the related function [_snprintf](../../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md), which specifies a maximum number of characters to be written to `buffer`, or use [_scprintf](../../c-runtime-library/reference/scprintf-scprintf-l-scwprintf-scwprintf-l.md) to determine how large a buffer is required. Also, ensure that `format` is not a user-defined string.","leadings":["","> "],"nodes":[{"content":" Using `sprintf`, there is no way to limit the number of characters written, which means that code using `sprintf` is susceptible to buffer overruns. Consider using the related function [_snprintf](../../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md), which specifies a maximum number of characters to be written to `buffer`, or use [_scprintf](../../c-runtime-library/reference/scprintf-scprintf-l-scwprintf-scwprintf-l.md) to determine how large a buffer is required. Also, ensure that `format` is not a user-defined string.","pos":[13,575],"nodes":[{"content":"Using <ph id=\"ph1\">`sprintf`</ph>, there is no way to limit the number of characters written, which means that code using <ph id=\"ph2\">`sprintf`</ph> is susceptible to buffer overruns.","pos":[1,149],"source":" Using `sprintf`, there is no way to limit the number of characters written, which means that code using `sprintf` is susceptible to buffer overruns."},{"content":"Consider using the related function <bpt id=\"p1\">[</bpt>_snprintf<ept id=\"p1\">](../../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md)</ept>, which specifies a maximum number of characters to be written to <ph id=\"ph1\">`buffer`</ph>, or use <bpt id=\"p2\">[</bpt>_scprintf<ept id=\"p2\">](../../c-runtime-library/reference/scprintf-scprintf-l-scwprintf-scwprintf-l.md)</ept> to determine how large a buffer is required.","pos":[150,505],"source":" Consider using the related function [_snprintf](../../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md), which specifies a maximum number of characters to be written to `buffer`, or use [_scprintf](../../c-runtime-library/reference/scprintf-scprintf-l-scwprintf-scwprintf-l.md) to determine how large a buffer is required."},{"content":"Also, ensure that <ph id=\"ph1\">`format`</ph> is not a user-defined string.","pos":[506,562],"source":" Also, ensure that `format` is not a user-defined string."}]}]},{"content":"is a wide-character version of <ph id=\"ph1\">`sprintf`</ph>; the pointer arguments to <ph id=\"ph2\">`swprintf`</ph> are wide-character strings.","pos":[4868,4973],"source":" is a wide-character version of `sprintf`; the pointer arguments to `swprintf` are wide-character strings."},{"content":"Detection of encoding errors in <ph id=\"ph1\">`swprintf`</ph> may differ from that in <ph id=\"ph2\">`sprintf`</ph>.","pos":[4974,5051],"source":" Detection of encoding errors in `swprintf` may differ from that in `sprintf`."},{"content":"and <ph id=\"ph1\">`fwprintf`</ph> behave identically except that <ph id=\"ph2\">`swprintf`</ph> writes output to a string rather than to a destination of type <ph id=\"ph3\">`FILE`</ph>, and <ph id=\"ph4\">`swprintf`</ph> requires the <ph id=\"ph5\">`count`</ph> parameter to specify the maximum number of characters to be written.","pos":[5063,5295],"source":" and `fwprintf` behave identically except that `swprintf` writes output to a string rather than to a destination of type `FILE`, and `swprintf` requires the `count` parameter to specify the maximum number of characters to be written."},{"content":"The versions of these functions with the <ph id=\"ph1\">`_l`</ph> suffix are identical except that they use the locale parameter passed in instead of the current thread locale.","pos":[5296,5452],"source":" The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale."},{"content":"conforms to the ISO C Standard, which requires the second parameter, <ph id=\"ph1\">`count`</ph>, of type <ph id=\"ph2\">`size_t`</ph>.","pos":[5470,5565],"source":" conforms to the ISO C Standard, which requires the second parameter, `count`, of type `size_t`."},{"content":"To force the old nonstandard behavior, define <ph id=\"ph1\">`_CRT_NON_CONFORMING_SWPRINTFS`</ph>.","pos":[5566,5644],"source":" To force the old nonstandard behavior, define `_CRT_NON_CONFORMING_SWPRINTFS`."},{"content":"In a future version, the old behavior may be removed, so code should be changed to use the new conformant behavior.","pos":[5645,5760]},{"content":"In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions.","pos":[5767,5877]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Secure Template Overloads<ept id=\"p1\">](../../c-runtime-library/secure-template-overloads.md)</ept>.","pos":[5878,5986],"source":" For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md)."},{"content":"Generic-Text Routine Mappings","pos":[5996,6025]},{"content":"TCHAR.H routine","pos":[6032,6047]},{"content":"_UNICODE &amp; _MBCS not defined","pos":[6048,6076],"source":"_UNICODE & _MBCS not defined"},{"content":"_MBCS defined","pos":[6077,6090]},{"content":"_UNICODE defined","pos":[6091,6107]},{"content":"Requirements","pos":[6332,6344]},{"content":"Routine","pos":[6351,6358]},{"content":"Required header","pos":[6359,6374]},{"pos":[6428,6429],"content":","},{"content":"stdio.h&gt;","pos":[6445,6453],"source":"stdio.h>"},{"pos":[6468,6469],"content":","},{"content":"stdio.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[6486,6508],"source":"stdio.h> or \\<wchar.h>"},{"pos":[6516,6640],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[6649,6656]},{"content":"Example","pos":[7572,7579]},{"content":".NET Framework Equivalent","pos":[8116,8141]},{"content":"System::String::Format","pos":[8146,8168]},{"content":"See Also","pos":[8246,8254]},{"content":"Stream I/O","pos":[8259,8269]},{"content":"fprintf, _fprintf_l, fwprintf, _fwprintf_l","pos":[8315,8357]},{"content":"printf, _printf_l, wprintf, _wprintf_l","pos":[8440,8478]},{"content":"scanf, _scanf_l, wscanf, _wscanf_l","pos":[8557,8591]},{"content":"sscanf, _sscanf_l, swscanf, _swscanf_l","pos":[8666,8704]},{"content":"vprintf Functions","pos":[8783,8800]}],"content":"---\ntitle: \"sprintf, _sprintf_l, swprintf, _swprintf_l, __swprintf_l | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"__swprintf_l\"\n  - \"sprintf\"\n  - \"_sprintf_l\"\n  - \"_swprintf_l\"\n  - \"swprintf\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_stprintf_l\"\n  - \"__swprintf_l\"\n  - \"sprintf_l\"\n  - \"swprintf\"\n  - \"_sprintf_l\"\n  - \"sprintf\"\n  - \"_stprintf\"\n  - \"stprintf_l\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_swprintf_l function\"\n  - \"_stprintf function\"\n  - \"__swprintf_l function\"\n  - \"stprintf function\"\n  - \"sprintf function\"\n  - \"_sprintf_l function\"\n  - \"_stprintf_l function\"\n  - \"swprintf function\"\n  - \"strings [C++], writing to\"\n  - \"_CRT_NON_CONFORMING_SWPRINTFS\"\n  - \"swprintf_l function\"\n  - \"stprintf_l function\"\n  - \"sprintf_l function\"\n  - \"formatted text [C++]\"\nms.assetid: f6efe66f-3563-4c74-9455-5411ed939b81\ncaps.latest.revision: 36\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# sprintf, _sprintf_l, swprintf, _swprintf_l, __swprintf_l\nWrite formatted data to a string. More secure versions of some of these functions are available; see [sprintf_s, _sprintf_s_l, swprintf_s, _swprintf_s_l](../../c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l.md). The secure versions of `swprintf` and `_swprintf_l` do not take a `count` parameter.  \n  \n## Syntax  \n  \n```  \nint sprintf(  \n   char *buffer,  \n   const char *format [,  \n   argument] ...   \n);  \nint _sprintf_l(  \n   char *buffer,  \n   const char *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \nint swprintf(  \n   wchar_t *buffer,  \n   size_t count,  \n   const wchar_t *format [,  \n   argument]...  \n);  \nint _swprintf_l(  \n   wchar_t *buffer,  \n   size_t count,  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \nint __swprintf_l(  \n   wchar_t *buffer,  \n   const wchar_t *format,  \n   locale_t locale [,  \n   argument] ...   \n);  \ntemplate <size_t size>  \nint sprintf(  \n   char (&buffer)[size],  \n   const char *format [,  \n   argument] ...   \n); // C++ only  \ntemplate <size_t size>  \nint _sprintf_l(  \n   char (&buffer)[size],  \n   const char *format,  \n   locale_t locale [,  \n   argument] ...   \n); // C++ only  \n  \n```  \n  \n#### Parameters  \n `buffer`  \n Storage location for output  \n  \n `count`  \n Maximum number of characters to store in the Unicode version of this function.  \n  \n `format`  \n Format-control string  \n  \n `argument`  \n Optional arguments  \n  \n `locale`  \n The locale to use.  \n  \n For more information, see [Format Specifications](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n## Return Value  \n The number of characters written, or â€“1 if an error occurred. If `buffer` or `format` is a null pointer, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return -1 and set `errno` to `EINVAL`.  \n  \n `sprintf` returns the number of bytes stored in `buffer`, not counting the terminating null character. `swprintf`returns the number of wide characters stored in `buffer`, not counting the terminating null wide character.  \n  \n## Remarks  \n The `sprintf` function formats and stores a series of characters and values in `buffer`. Each `argument` (if any) is converted and output according to the corresponding format specification in `format`. The format consists of ordinary characters and has the same form and function as the `format` argument for [printf](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md). A null character is appended after the last character written. If copying occurs between strings that overlap, the behavior is undefined.  \n  \n> [!IMPORTANT]\n>  Using `sprintf`, there is no way to limit the number of characters written, which means that code using `sprintf` is susceptible to buffer overruns. Consider using the related function [_snprintf](../../c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l.md), which specifies a maximum number of characters to be written to `buffer`, or use [_scprintf](../../c-runtime-library/reference/scprintf-scprintf-l-scwprintf-scwprintf-l.md) to determine how large a buffer is required. Also, ensure that `format` is not a user-defined string.  \n  \n `swprintf` is a wide-character version of `sprintf`; the pointer arguments to `swprintf` are wide-character strings. Detection of encoding errors in `swprintf` may differ from that in `sprintf`. `swprintf` and `fwprintf` behave identically except that `swprintf` writes output to a string rather than to a destination of type `FILE`, and `swprintf` requires the `count` parameter to specify the maximum number of characters to be written. The versions of these functions with the `_l` suffix are identical except that they use the locale parameter passed in instead of the current thread locale.  \n  \n `swprintf` conforms to the ISO C Standard, which requires the second parameter, `count`, of type `size_t`. To force the old nonstandard behavior, define `_CRT_NON_CONFORMING_SWPRINTFS`. In a future version, the old behavior may be removed, so code should be changed to use the new conformant behavior.  \n  \n In C++, these functions have template overloads that invoke the newer, secure counterparts of these functions. For more information, see [Secure Template Overloads](../../c-runtime-library/secure-template-overloads.md).  \n  \n### Generic-Text Routine Mappings  \n  \n|TCHAR.H routine|_UNICODE & _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|------------------------------------|--------------------|-----------------------|  \n|`_stprintf`|`sprintf`|`sprintf`|`_swprintf`|  \n|`_stprintf_l`|`_sprintf_l`|`_sprintf_l`|`__swprintf_l`|  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`sprintf`, `_sprintf_l`|\\<stdio.h>|  \n|`swprintf`, `_swprintf_l`|\\<stdio.h> or \\<wchar.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_sprintf.c  \n// compile with: /W3  \n// This program uses sprintf to format various  \n// data and place them in the string named buffer.  \n  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   char  buffer[200], s[] = \"computer\", c = 'l';  \n   int   i = 35, j;  \n   float fp = 1.7320534f;  \n  \n   // Format and print various data:   \n   j  = sprintf( buffer,     \"   String:    %s\\n\", s ); // C4996  \n   j += sprintf( buffer + j, \"   Character: %c\\n\", c ); // C4996  \n   j += sprintf( buffer + j, \"   Integer:   %d\\n\", i ); // C4996  \n   j += sprintf( buffer + j, \"   Real:      %f\\n\", fp );// C4996  \n   // Note: sprintf is deprecated; consider using sprintf_s instead  \n  \n   printf( \"Output:\\n%s\\ncharacter count = %d\\n\", buffer, j );  \n}  \n```  \n  \n```Output  \nOutput:  \n   String:    computer  \n   Character: l  \n   Integer:   35  \n   Real:      1.732053  \n  \ncharacter count = 79  \n```  \n  \n## Example  \n  \n```  \n// crt_swprintf.c  \n// wide character example  \n// also demonstrates swprintf returning error code  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   wchar_t buf[100];  \n   int len = swprintf( buf, 100, L\"%s\", L\"Hello world\" );  \n   printf( \"wrote %d characters\\n\", len );  \n   len = swprintf( buf, 100, L\"%s\", L\"Hello\\xffff world\" );  \n   // swprintf fails because string contains WEOF (\\xffff)  \n   printf( \"wrote %d characters\\n\", len );  \n}  \n```  \n  \n```Output  \nwrote 11 characters  \nwrote -1 characters  \n```  \n  \n## .NET Framework Equivalent  \n [System::String::Format](https://msdn.microsoft.com/en-us/library/system.string.format.aspx)  \n  \n## See Also  \n [Stream I/O](../../c-runtime-library/stream-i-o.md)   \n [fprintf, _fprintf_l, fwprintf, _fwprintf_l](../../c-runtime-library/reference/fprintf-fprintf-l-fwprintf-fwprintf-l.md)   \n [printf, _printf_l, wprintf, _wprintf_l](../../c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l.md)   \n [scanf, _scanf_l, wscanf, _wscanf_l](../../c-runtime-library/reference/scanf-scanf-l-wscanf-wscanf-l.md)   \n [sscanf, _sscanf_l, swscanf, _swscanf_l](../../c-runtime-library/reference/sscanf-sscanf-l-swscanf-swscanf-l.md)   \n [vprintf Functions](../../c-runtime-library/vprintf-functions.md)"}