{"nodes":[{"pos":[12,50],"content":"CNoWorkerThread Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CNoWorkerThread Class | Microsoft Docs","pos":[0,38]}]},{"content":"CNoWorkerThread Class","pos":[672,693]},{"pos":[694,833],"content":"Use this class as the argument for the <ph id=\"ph1\">`MonitorClass`</ph> template parameter to cache classes if you want to disable dynamic cache maintenance.","source":"Use this class as the argument for the `MonitorClass` template parameter to cache classes if you want to disable dynamic cache maintenance."},{"pos":[841,951],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the Windows Runtime.","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the Windows Runtime.","pos":[14,108]}]},{"content":"Syntax","pos":[960,966]},{"content":"Members","pos":[1010,1017]},{"content":"Public Methods","pos":[1027,1041]},{"content":"Name","pos":[1048,1052]},{"content":"Description","pos":[1053,1064]},{"content":"CNoWorkerThread::AddHandle","pos":[1103,1129]},{"pos":[1160,1285],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::AddHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)</ept>.","source":"Non-functional equivalent of [CWorkerThread::AddHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)."},{"content":"CNoWorkerThread::AddTimer","pos":[1291,1316]},{"pos":[1346,1469],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::AddTimer<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__addtimer)</ept>.","source":"Non-functional equivalent of [CWorkerThread::AddTimer](../../atl/reference/cworkerthread-class.md#cworkerthread__addtimer)."},{"content":"CNoWorkerThread::GetThreadHandle","pos":[1475,1507]},{"pos":[1544,1681],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::GetThreadHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadhandle)</ept>.","source":"Non-functional equivalent of [CWorkerThread::GetThreadHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadhandle)."},{"content":"CNoWorkerThread::GetThreadId","pos":[1687,1715]},{"pos":[1748,1877],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::GetThreadId<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadid)</ept>.","source":"Non-functional equivalent of [CWorkerThread::GetThreadId](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadid)."},{"content":"CNoWorkerThread::Initialize","pos":[1883,1910]},{"pos":[1942,2069],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::Initialize<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__initialize)</ept>.","source":"Non-functional equivalent of [CWorkerThread::Initialize](../../atl/reference/cworkerthread-class.md#cworkerthread__initialize)."},{"content":"CNoWorkerThread::RemoveHandle","pos":[2075,2104]},{"pos":[2138,2269],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::RemoveHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__removehandle)</ept>.","source":"Non-functional equivalent of [CWorkerThread::RemoveHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__removehandle)."},{"content":"CNoWorkerThread::Shutdown","pos":[2275,2300]},{"pos":[2330,2453],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::Shutdown<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__shutdown)</ept>.","source":"Non-functional equivalent of [CWorkerThread::Shutdown](../../atl/reference/cworkerthread-class.md#cworkerthread__shutdown)."},{"content":"Remarks","pos":[2463,2470]},{"content":"This class provides the same public interface as <bpt id=\"p1\">[</bpt>CWorkerThread<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md)</ept>.","pos":[2474,2583],"source":"This class provides the same public interface as [CWorkerThread](../../atl/reference/cworkerthread-class.md)."},{"content":"This interface is expected to be provided by the <ph id=\"ph1\">`MonitorClass`</ph> template parameter to cache classes.","pos":[2584,2684],"source":" This interface is expected to be provided by the `MonitorClass` template parameter to cache classes."},{"content":"The methods in this class are implemented to do nothing.","pos":[2691,2747]},{"content":"The methods that return an HRESULT always return S_OK, and the methods that return a HANDLE or thread ID always return 0.","pos":[2748,2869]},{"content":"Requirements","pos":[2878,2890]},{"pos":[2894,2915],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlutil.h","source":"**Header:** atlutil.h"},{"pos":[2968,2994],"content":"CNoWorkerThread::AddHandle"},{"pos":[2998,3123],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::AddHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)</ept>.","source":"Non-functional equivalent of [CWorkerThread::AddHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)."},{"content":"Return Value","pos":[3267,3279]},{"content":"Always returns S_OK.","pos":[3283,3303]},{"content":"Remarks","pos":[3313,3320]},{"content":"The implementation provided by this class does nothing.","pos":[3324,3379]},{"pos":[3431,3456],"content":"CNoWorkerThread::AddTimer"},{"pos":[3460,3583],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::AddTimer<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__addtimer)</ept>.","source":"Non-functional equivalent of [CWorkerThread::AddTimer](../../atl/reference/cworkerthread-class.md#cworkerthread__addtimer)."},{"content":"Return Value","pos":[3756,3768]},{"content":"Always returns S_OK.","pos":[3772,3792]},{"content":"Remarks","pos":[3802,3809]},{"content":"The implementation provided by this class does nothing.","pos":[3813,3868]},{"pos":[3927,3959],"content":"CNoWorkerThread::GetThreadHandle"},{"pos":[3963,4100],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::GetThreadHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadhandle)</ept>.","source":"Non-functional equivalent of [CWorkerThread::GetThreadHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadhandle)."},{"content":"Return Value","pos":[4157,4169]},{"content":"Always returns NULL.","pos":[4173,4193]},{"content":"Remarks","pos":[4203,4210]},{"content":"The implementation provided by this class does nothing.","pos":[4214,4269]},{"pos":[4324,4352],"content":"CNoWorkerThread::GetThreadId"},{"pos":[4356,4485],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::GetThreadId<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadid)</ept>.","source":"Non-functional equivalent of [CWorkerThread::GetThreadId](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadid)."},{"content":"Return Value","pos":[4537,4549]},{"content":"Always returns 0.","pos":[4553,4570]},{"content":"Remarks","pos":[4580,4587]},{"content":"The implementation provided by this class does nothing.","pos":[4591,4646]},{"pos":[4700,4727],"content":"CNoWorkerThread::Initialize"},{"pos":[4731,4858],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::Initialize<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__initialize)</ept>.","source":"Non-functional equivalent of [CWorkerThread::Initialize](../../atl/reference/cworkerthread-class.md#cworkerthread__initialize)."},{"content":"Return Value","pos":[4911,4923]},{"content":"Always returns S_OK.","pos":[4927,4947]},{"content":"Remarks","pos":[4957,4964]},{"content":"The implementation provided by this class does nothing.","pos":[4968,5023]},{"pos":[5079,5108],"content":"CNoWorkerThread::RemoveHandle"},{"pos":[5112,5243],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::RemoveHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__removehandle)</ept>.","source":"Non-functional equivalent of [CWorkerThread::RemoveHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__removehandle)."},{"content":"Return Value","pos":[5319,5331]},{"content":"Always returns S_OK.","pos":[5335,5355]},{"content":"Remarks","pos":[5365,5372]},{"content":"The implementation provided by this class does nothing.","pos":[5376,5431]},{"pos":[5483,5508],"content":"CNoWorkerThread::Shutdown"},{"pos":[5512,5635],"content":"Non-functional equivalent of <bpt id=\"p1\">[</bpt>CWorkerThread::Shutdown<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__shutdown)</ept>.","source":"Non-functional equivalent of [CWorkerThread::Shutdown](../../atl/reference/cworkerthread-class.md#cworkerthread__shutdown)."},{"content":"Return Value","pos":[5723,5735]},{"content":"Always returns S_OK.","pos":[5739,5759]},{"content":"Remarks","pos":[5769,5776]},{"content":"The implementation provided by this class does nothing.","pos":[5780,5835]}],"content":"---\ntitle: \"CNoWorkerThread Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CNoWorkerThread\"\n  - \"ATL.CNoWorkerThread\"\n  - \"CNoWorkerThread\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CNoWorkerThread class\"\nms.assetid: 29f06bae-b658-4aac-9c14-331e996d25d1\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CNoWorkerThread Class\nUse this class as the argument for the `MonitorClass` template parameter to cache classes if you want to disable dynamic cache maintenance.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the Windows Runtime.  \n  \n## Syntax  \n  \n```\nclass CNoWorkerThread\n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CNoWorkerThread::AddHandle](#cnoworkerthread__addhandle)|Non-functional equivalent of [CWorkerThread::AddHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle).|  \n|[CNoWorkerThread::AddTimer](#cnoworkerthread__addtimer)|Non-functional equivalent of [CWorkerThread::AddTimer](../../atl/reference/cworkerthread-class.md#cworkerthread__addtimer).|  \n|[CNoWorkerThread::GetThreadHandle](#cnoworkerthread__getthreadhandle)|Non-functional equivalent of [CWorkerThread::GetThreadHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadhandle).|  \n|[CNoWorkerThread::GetThreadId](#cnoworkerthread__getthreadid)|Non-functional equivalent of [CWorkerThread::GetThreadId](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadid).|  \n|[CNoWorkerThread::Initialize](#cnoworkerthread__initialize)|Non-functional equivalent of [CWorkerThread::Initialize](../../atl/reference/cworkerthread-class.md#cworkerthread__initialize).|  \n|[CNoWorkerThread::RemoveHandle](#cnoworkerthread__removehandle)|Non-functional equivalent of [CWorkerThread::RemoveHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__removehandle).|  \n|[CNoWorkerThread::Shutdown](#cnoworkerthread__shutdown)|Non-functional equivalent of [CWorkerThread::Shutdown](../../atl/reference/cworkerthread-class.md#cworkerthread__shutdown).|  \n  \n## Remarks  \n This class provides the same public interface as [CWorkerThread](../../atl/reference/cworkerthread-class.md). This interface is expected to be provided by the `MonitorClass` template parameter to cache classes.  \n  \n The methods in this class are implemented to do nothing. The methods that return an HRESULT always return S_OK, and the methods that return a HANDLE or thread ID always return 0.  \n  \n## Requirements  \n **Header:** atlutil.h  \n  \n##  <a name=\"cnoworkerthread__addhandle\"></a>  CNoWorkerThread::AddHandle  \n Non-functional equivalent of [CWorkerThread::AddHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle).  \n  \n```\nHRESULT AddHandle(HANDLE /* hObject\n */,\n    IWorkerThreadClient* /* pClient\n */,\n    DWORD_PTR /* dwParam\n */) throw();\n```  \n  \n### Return Value  \n Always returns S_OK.  \n  \n### Remarks  \n The implementation provided by this class does nothing.  \n  \n##  <a name=\"cnoworkerthread__addtimer\"></a>  CNoWorkerThread::AddTimer  \n Non-functional equivalent of [CWorkerThread::AddTimer](../../atl/reference/cworkerthread-class.md#cworkerthread__addtimer).  \n  \n```\nHRESULT AddTimer(DWORD /* dwInterval\n */,\n    IWorkerThreadClient* /* pClient\n */,\n    DWORD_PTR /* dwParam\n */,\n    HANDLE* /* phTimer\n */) throw();\n```  \n  \n### Return Value  \n Always returns S_OK.  \n  \n### Remarks  \n The implementation provided by this class does nothing.  \n  \n##  <a name=\"cnoworkerthread__getthreadhandle\"></a>  CNoWorkerThread::GetThreadHandle  \n Non-functional equivalent of [CWorkerThread::GetThreadHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadhandle).  \n  \n```\nHANDLE GetThreadHandle() throw();\n```  \n  \n### Return Value  \n Always returns NULL.  \n  \n### Remarks  \n The implementation provided by this class does nothing.  \n  \n##  <a name=\"cnoworkerthread__getthreadid\"></a>  CNoWorkerThread::GetThreadId  \n Non-functional equivalent of [CWorkerThread::GetThreadId](../../atl/reference/cworkerthread-class.md#cworkerthread__getthreadid).  \n  \n```\nDWORD GetThreadId() throw();\n```  \n  \n### Return Value  \n Always returns 0.  \n  \n### Remarks  \n The implementation provided by this class does nothing.  \n  \n##  <a name=\"cnoworkerthread__initialize\"></a>  CNoWorkerThread::Initialize  \n Non-functional equivalent of [CWorkerThread::Initialize](../../atl/reference/cworkerthread-class.md#cworkerthread__initialize).  \n  \n```\nHRESULT Initialize() throw();\n```  \n  \n### Return Value  \n Always returns S_OK.  \n  \n### Remarks  \n The implementation provided by this class does nothing.  \n  \n##  <a name=\"cnoworkerthread__removehandle\"></a>  CNoWorkerThread::RemoveHandle  \n Non-functional equivalent of [CWorkerThread::RemoveHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__removehandle).  \n  \n```\nHRESULT RemoveHandle(HANDLE /* hObject\n */) throw();\n```  \n  \n### Return Value  \n Always returns S_OK.  \n  \n### Remarks  \n The implementation provided by this class does nothing.  \n  \n##  <a name=\"cnoworkerthread__shutdown\"></a>  CNoWorkerThread::Shutdown  \n Non-functional equivalent of [CWorkerThread::Shutdown](../../atl/reference/cworkerthread-class.md#cworkerthread__shutdown).  \n  \n```\nHRESULT Shutdown(DWORD dwWait = ATL_WORKER_THREAD_WAIT) throw();\n```  \n  \n### Return Value  \n Always returns S_OK.  \n  \n### Remarks  \n The implementation provided by this class does nothing.\n\n\n\n\n\n\n\n\n\n"}