{"nodes":[{"pos":[12,82],"content":"scalbn, scalbnf, scalbnl, scalbln, scalblnf, scalblnl | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"scalbn, scalbnf, scalbnl, scalbln, scalblnf, scalblnl | Microsoft Docs","pos":[0,70]}]},{"pos":[1199,1252],"content":"scalbn, scalbnf, scalbnl, scalbln, scalblnf, scalblnl","linkify":"scalbn, scalbnf, scalbnl, scalbln, scalblnf, scalblnl","nodes":[{"content":"scalbn, scalbnf, scalbnl, scalbln, scalblnf, scalblnl","pos":[0,53]}]},{"content":"Multiplies a floating-point number by an integral power of FLT_RADIX.","pos":[1253,1322]},{"pos":[1331,1337],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1967,1977],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Floating-point value.","pos":[1988,2009]},{"content":"Integer exponent.","pos":[2025,2042]},{"pos":[2051,2063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The <ph id=\"ph1\">`scalbn`</ph> functions return the value of <ph id=\"ph2\">`x`</ph><ph id=\"ph3\"> * </ph><ph id=\"ph4\">`FLT_RADIX`</ph><bpt id=\"p1\">&lt;sup&gt;</bpt>exp<ept id=\"p1\">&lt;/sup&gt;</ept> when successful.","pos":[2067,2158],"source":"The `scalbn` functions return the value of `x` * `FLT_RADIX`<sup>exp</sup> when successful."},{"content":"On overflow (depending on the sign of <ph id=\"ph1\">`x`</ph>), <ph id=\"ph2\">`scalbn`</ph> returns +/– <ph id=\"ph3\">`HUGE_VAL`</ph>; the <ph id=\"ph4\">`errno`</ph> value is set to <ph id=\"ph5\">`ERANGE`</ph>.","pos":[2159,2273],"source":" On overflow (depending on the sign of `x`), `scalbn` returns +/– `HUGE_VAL`; the `errno` value is set to `ERANGE`."},{"pos":[2280,2469],"content":"For more information about <ph id=\"ph1\">`errno`</ph> and possible error return values, see <bpt id=\"p1\">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id=\"p1\">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.","source":"For more information about `errno` and possible error return values, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)."},{"pos":[2478,2485],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2489,2684],"content":"<ph id=\"ph1\">`FLT_RADIX`</ph> is defined in <ph id=\"ph2\">\\&lt;</ph>float.h&gt; as the native floating-point radix; on binary systems, it has a value of 2, and <ph id=\"ph3\">`scalbn`</ph> is equivalent to <bpt id=\"p1\">[</bpt>ldexp<ept id=\"p1\">](../../c-runtime-library/reference/ldexp.md)</ept>.","source":"`FLT_RADIX` is defined in \\<float.h> as the native floating-point radix; on binary systems, it has a value of 2, and `scalbn` is equivalent to [ldexp](../../c-runtime-library/reference/ldexp.md)."},{"content":"Because C++ allows overloading, you can call overloads of <ph id=\"ph1\">`scalbn`</ph> and <ph id=\"ph2\">`scalbln`</ph> that take and return <ph id=\"ph3\">`float`</ph> or <ph id=\"ph4\">`long double`</ph> types.","pos":[2691,2824],"source":"Because C++ allows overloading, you can call overloads of `scalbn` and `scalbln` that take and return `float` or `long double` types."},{"content":"In a C program, <ph id=\"ph1\">`scalbn`</ph> always takes a <ph id=\"ph2\">`double`</ph> and an <ph id=\"ph3\">`int`</ph> and returns a <ph id=\"ph4\">`double`</ph>, and <ph id=\"ph5\">`scalbln`</ph> always takes a <ph id=\"ph6\">`double`</ph> and a <ph id=\"ph7\">`long`</ph> and returns a <ph id=\"ph8\">`double`</ph>.","pos":[2825,2985],"source":" In a C program, `scalbn` always takes a `double` and an `int` and returns a `double`, and `scalbln` always takes a `double` and a `long` and returns a `double`."},{"pos":[2994,3006],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Function","pos":[3013,3021]},{"content":"C header","pos":[3022,3030]},{"content":"C++ header","pos":[3031,3041]},{"pos":[3099,3164],"content":"<ph id=\"ph1\">`scalbn`</ph>, <ph id=\"ph2\">`scalbnf`</ph>, <ph id=\"ph3\">`scalbnl`</ph>, <ph id=\"ph4\">`scalbln`</ph>, <ph id=\"ph5\">`scalblnf`</ph>, <ph id=\"ph6\">`scalblnl`</ph>","source":"`scalbn`, `scalbnf`, `scalbnl`, `scalbln`, `scalblnf`, `scalblnl`"},{"content":"<ph id=\"ph1\">\\&lt;</ph>math.h&gt;","pos":[3165,3174],"source":"\\<math.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>cmath&gt;","pos":[3175,3183],"source":"\\<cmath>"},{"pos":[3191,3295],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept>.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md)."},{"pos":[3304,3311],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3611,3617],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[3689,3714],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[3718,3800],"content":"<bpt id=\"p1\">[</bpt>System::Math::Pow<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.math.pow.aspx)</ept>","source":"[System::Math::Pow](https://msdn.microsoft.com/en-us/library/system.math.pow.aspx)"},{"pos":[3809,3817],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[3821,3897],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>frexp<ept id=\"p1\">](../../c-runtime-library/reference/frexp.md)</ept><ph id=\"ph1\"> </ph>","pos":[3900,3953],"source":" [frexp](../../c-runtime-library/reference/frexp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ldexp<ept id=\"p1\">](../../c-runtime-library/reference/ldexp.md)</ept><ph id=\"ph1\"> </ph>","pos":[3956,4009],"source":" [ldexp](../../c-runtime-library/reference/ldexp.md) "},{"content":"<bpt id=\"p1\"> [</bpt>modf, modff, modfl<ept id=\"p1\">](../../c-runtime-library/reference/modf-modff-modfl.md)</ept>","pos":[4012,4088],"source":" [modf, modff, modfl](../../c-runtime-library/reference/modf-modff-modfl.md)"}],"content":"---\ntitle: \"scalbn, scalbnf, scalbnl, scalbln, scalblnf, scalblnl | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"scalblnl\"\n  - \"scalbnl\"\n  - \"scalbnf\"\n  - \"scalblnf\"\n  - \"scalbn\"\n  - \"scalbln\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-math-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"scalblnf\"\n  - \"scalbnl\"\n  - \"scalblnl\"\n  - \"scalbln\"\n  - \"scalbn\"\n  - \"scalbnf\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"scalbn function\"\n  - \"scalbln function\"\n  - \"scalblnl function\"\n  - \"scalbnl function\"\n  - \"scalbnf function\"\n  - \"scalblnf function\"\nms.assetid: df2f1543-8e39-4af4-a5cf-29307e64807d\ncaps.latest.revision: 5\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# scalbn, scalbnf, scalbnl, scalbln, scalblnf, scalblnl\nMultiplies a floating-point number by an integral power of FLT_RADIX.  \n  \n## Syntax  \n  \n```  \ndouble scalbn(  \n   double x,  \n   int exp   \n);  \nfloat scalbn(  \n   float x,  \n   int exp  \n);  // C++ only  \nlong double scalbn(  \n   long double x,  \n   int exp  \n);  // C++ only   \nfloat scalbnf(  \n   float x,  \n   int exp  \n);   \nlong double scalbnl(  \n   long double x,  \n   int exp  \n);  \ndouble scalbln(  \n   double x,  \n   long exp   \n);  \nfloat scalbln(  \n   float x,  \n   long exp  \n);  // C++ only  \nlong double scalbln(  \n   long double x,  \n   long exp  \n);  // C++ only   \nfloat scalblnf(  \n   float x,  \n   long exp  \n);   \nlong double scalblnl(  \n   long double x,  \n   long exp  \n);  \n```  \n  \n#### Parameters  \n `x`  \n Floating-point value.  \n  \n `exp`  \n Integer exponent.  \n  \n## Return Value  \n The `scalbn` functions return the value of `x` * `FLT_RADIX`<sup>exp</sup> when successful. On overflow (depending on the sign of `x`), `scalbn` returns +/– `HUGE_VAL`; the `errno` value is set to `ERANGE`.  \n  \n For more information about `errno` and possible error return values, see [errno, _doserrno, _sys_errlist, and _sys_nerr](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md).  \n  \n## Remarks  \n `FLT_RADIX` is defined in \\<float.h> as the native floating-point radix; on binary systems, it has a value of 2, and `scalbn` is equivalent to [ldexp](../../c-runtime-library/reference/ldexp.md).  \n  \n Because C++ allows overloading, you can call overloads of `scalbn` and `scalbln` that take and return `float` or `long double` types. In a C program, `scalbn` always takes a `double` and an `int` and returns a `double`, and `scalbln` always takes a `double` and a `long` and returns a `double`.  \n  \n## Requirements  \n  \n|Function|C header|C++ header|  \n|--------------|--------------|------------------|  \n|`scalbn`, `scalbnf`, `scalbnl`, `scalbln`, `scalblnf`, `scalblnl`|\\<math.h>|\\<cmath>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md).  \n  \n## Example  \n  \n```  \n// crt_scalbn.c  \n// Compile using: cl /W4 crt_scalbn.c  \n#include <math.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   double x = 6.4, y;  \n   int p = 3;  \n  \n   y = scalbn( x, p );  \n   printf( \"%2.1f times FLT_RADIX to the power of %d is %2.1f\\n\", x, p, y );  \n}  \n```  \n  \n## Output  \n  \n```  \n6.4 times FLT_RADIX to the power of 3 is 51.2  \n```  \n  \n## .NET Framework Equivalent  \n [System::Math::Pow](https://msdn.microsoft.com/en-us/library/system.math.pow.aspx)  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [frexp](../../c-runtime-library/reference/frexp.md)   \n [ldexp](../../c-runtime-library/reference/ldexp.md)   \n [modf, modff, modfl](../../c-runtime-library/reference/modf-modff-modfl.md)"}