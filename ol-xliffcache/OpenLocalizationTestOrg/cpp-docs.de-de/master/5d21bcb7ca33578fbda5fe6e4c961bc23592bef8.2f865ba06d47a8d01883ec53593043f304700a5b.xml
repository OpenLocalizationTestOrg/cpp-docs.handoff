{"nodes":[{"pos":[12,56],"content":"allocator&lt;void&gt; Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"allocator<ph id=\"ph1\">&amp;lt;</ph>void<ph id=\"ph2\">&amp;gt;</ph> Class | Microsoft Docs","pos":[0,44],"source":"allocator&lt;void&gt; Class | Microsoft Docs"}]},{"content":"allocator<ph id=\"ph1\">&amp;lt;</ph>void<ph id=\"ph2\">&amp;gt;</ph> Class","pos":[710,737],"source":"allocator&lt;void&gt; Class"},{"pos":[738,854],"content":"A specialization of the template class allocator to type <ph id=\"ph1\">`void`</ph>, defining the types that make sense in this context.","source":"A specialization of the template class allocator to type `void`, defining the types that make sense in this context."},{"content":"Syntax","pos":[863,869]},{"content":"Remarks","pos":[1280,1287]},{"content":"The class explicitly specializes template class <bpt id=\"p1\">[</bpt>allocator<ept id=\"p1\">](../standard-library/allocator-class.md)</ept> for type <bpt id=\"p2\">*</bpt>void.<ept id=\"p2\">*</ept>","pos":[1291,1407],"source":"The class explicitly specializes template class [allocator](../standard-library/allocator-class.md) for type *void.*"},{"content":"Its constructors and assignment operator behave the same as for the template class, but it defines only the following types:","pos":[1408,1532]},{"pos":[1540,1621],"content":"<bpt id=\"p1\">[</bpt>const_pointer<ept id=\"p1\">](../standard-library/allocator-class.md#allocator__const_pointer)</ept>.","source":"[const_pointer](../standard-library/allocator-class.md#allocator__const_pointer)."},{"pos":[1629,1698],"content":"<bpt id=\"p1\">[</bpt>pointer<ept id=\"p1\">](../standard-library/allocator-class.md#allocator__pointer)</ept>.","source":"[pointer](../standard-library/allocator-class.md#allocator__pointer)."},{"pos":[1706,1781],"content":"<bpt id=\"p1\">[</bpt>value_type<ept id=\"p1\">](../standard-library/allocator-class.md#allocator__value_type)</ept>.","source":"[value_type](../standard-library/allocator-class.md#allocator__value_type)."},{"pos":[1789,1881],"content":"<bpt id=\"p1\">[</bpt>rebind<ept id=\"p1\">](../standard-library/allocator-class.md#allocator__rebind)</ept>, a nested template class.","source":"[rebind](../standard-library/allocator-class.md#allocator__rebind), a nested template class."},{"content":"Requirements","pos":[1890,1902]},{"pos":[1906,1927],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>memory&gt;","source":"**Header:** \\<memory>"},{"pos":[1934,1952],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[1961,1969]},{"content":"Thread Safety in the C++ Standard Library","pos":[1974,2015]}],"content":"---\ntitle: \"allocator&lt;void&gt; Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"memory/std::allocator<void>\"\n  - \"std::allocator<void>\"\n  - \"std.allocator<void>\"\n  - \"allocator<void>\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"allocator<void> class\"\nms.assetid: abfb40f5-c600-46a6-b130-f42c6535b2bd\ncaps.latest.revision: 18\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# allocator&lt;void&gt; Class\nA specialization of the template class allocator to type `void`, defining the types that make sense in this context.  \n  \n## Syntax  \n  \n```\ntemplate <>\nclass allocator<void> {\n    typedef void *pointer;\n    typedef const void *const_pointer;\n    typedef void value_type;\n    template <class Other>\n    struct rebind;\n    allocator();\n    allocator(const allocator<void>&);\n\n    template <class Other>\n    allocator(const allocator<Other>&);\n\n    template <class Other>\n    allocator<void>& operator=(const allocator<Other>&);\n};\n```  \n  \n## Remarks  \n The class explicitly specializes template class [allocator](../standard-library/allocator-class.md) for type *void.* Its constructors and assignment operator behave the same as for the template class, but it defines only the following types:  \n  \n- [const_pointer](../standard-library/allocator-class.md#allocator__const_pointer).  \n  \n- [pointer](../standard-library/allocator-class.md#allocator__pointer).  \n  \n- [value_type](../standard-library/allocator-class.md#allocator__value_type).  \n  \n- [rebind](../standard-library/allocator-class.md#allocator__rebind), a nested template class.  \n  \n## Requirements  \n **Header:** \\<memory>  \n  \n **Namespace:** std  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)\n\n\n\n"}