{"nodes":[{"pos":[12,51],"content":"unbounded_buffer Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"unbounded_buffer Class | Microsoft Docs","pos":[0,39]}]},{"pos":[594,743],"content":"An <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block is a multi-target, multi-source, ordered <ph id=\"ph2\">`propagator_block`</ph> capable of storing an unbounded number of messages.","source":"An `unbounded_buffer` messaging block is a multi-target, multi-source, ordered `propagator_block` capable of storing an unbounded number of messages."},{"content":"Syntax","pos":[752,758]},{"content":"Parameters","pos":[979,989]},{"content":"The payload type of the messages stored and propagated by the buffer.","pos":[1004,1073]},{"content":"Members","pos":[1082,1089]},{"content":"Public Constructors","pos":[1099,1118]},{"content":"Name","pos":[1125,1129]},{"content":"Description","pos":[1130,1141]},{"content":"unbounded_buffer::unbounded_buffer Constructor","pos":[1180,1226]},{"content":"Overloaded.","pos":[1235,1246]},{"content":"Constructs an <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block.","pos":[1247,1296],"source":" Constructs an `unbounded_buffer` messaging block."},{"content":"unbounded_buffer::~unbounded_buffer Destructor","pos":[1302,1348]},{"pos":[1357,1405],"content":"Destroys the <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block.","source":"Destroys the `unbounded_buffer` messaging block."},{"content":"Public Methods","pos":[1416,1430]},{"content":"Name","pos":[1437,1441]},{"content":"Description","pos":[1442,1453]},{"content":"unbounded_buffer::dequeue Method","pos":[1492,1524]},{"pos":[1536,1596],"content":"Removes an item from the <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block.","source":"Removes an item from the `unbounded_buffer` messaging block."},{"content":"unbounded_buffer::enqueue Method","pos":[1602,1634]},{"pos":[1646,1701],"content":"Adds an item to the <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block.","source":"Adds an item to the `unbounded_buffer` messaging block."},{"content":"Protected Methods","pos":[1712,1729]},{"content":"Name","pos":[1736,1740]},{"content":"Description","pos":[1741,1752]},{"content":"unbounded_buffer::accept_message Method","pos":[1791,1830]},{"pos":[1849,1965],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block, transferring ownership to the caller.","source":"Accepts a message that was offered by this `unbounded_buffer` messaging block, transferring ownership to the caller."},{"content":"unbounded_buffer::consume_message Method","pos":[1971,2011]},{"pos":[2031,2176],"content":"Consumes a message previously offered by the <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block and reserved by the target, transferring ownership to the caller.","source":"Consumes a message previously offered by the `unbounded_buffer` messaging block and reserved by the target, transferring ownership to the caller."},{"content":"unbounded_buffer::link_target_notification Method","pos":[2182,2231]},{"pos":[2260,2362],"content":"A callback that notifies that a new target has been linked to this <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block.","source":"A callback that notifies that a new target has been linked to this `unbounded_buffer` messaging block."},{"content":"unbounded_buffer::process_input_messages Method","pos":[2368,2415]},{"pos":[2442,2568],"content":"Places the <ph id=\"ph1\">`message``_PMessage`</ph> in this <ph id=\"ph2\">`unbounded_buffer`</ph> messaging block and tries to offer it to all of the linked targets.","source":"Places the `message``_PMessage` in this `unbounded_buffer` messaging block and tries to offer it to all of the linked targets."},{"content":"unbounded_buffer::propagate_message Method","pos":[2574,2616]},{"content":"Asynchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`unbounded_buffer`</ph> messaging block.","pos":[2638,2737],"source":"Asynchronously passes a message from an `ISource` block to this `unbounded_buffer` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`propagate`</ph> method, when called by a source block.","pos":[2738,2809],"source":" It is invoked by the `propagate` method, when called by a source block."},{"content":"unbounded_buffer::propagate_output_messages Method","pos":[2815,2865]},{"content":"Places the <ph id=\"ph1\">`message``_PMessage`</ph> in this <ph id=\"ph2\">`unbounded_buffer`</ph> messaging block and tries to offer it to all of the linked targets.","pos":[2895,3021],"source":"Places the `message``_PMessage` in this `unbounded_buffer` messaging block and tries to offer it to all of the linked targets."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>source_block::propagate_output_messages<ept id=\"p1\">](source-block-class.md#propagate_output_messages)</ept>.)","pos":[3022,3125],"source":" (Overrides [source_block::propagate_output_messages](source-block-class.md#propagate_output_messages).)"},{"content":"unbounded_buffer::release_message Method","pos":[3131,3171]},{"content":"Releases a previous message reservation.","pos":[3191,3231]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>source_block::release_message<ept id=\"p1\">](source-block-class.md#release_message)</ept>.)","pos":[3232,3315],"source":" (Overrides [source_block::release_message](source-block-class.md#release_message).)"},{"content":"unbounded_buffer::reserve_message Method","pos":[3321,3361]},{"content":"Reserves a message previously offered by this <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block.","pos":[3381,3462],"source":"Reserves a message previously offered by this `unbounded_buffer` messaging block."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>source_block::reserve_message<ept id=\"p1\">](source-block-class.md#reserve_message)</ept>.)","pos":[3463,3546],"source":" (Overrides [source_block::reserve_message](source-block-class.md#reserve_message).)"},{"content":"unbounded_buffer::resume_propagation Method","pos":[3552,3595]},{"content":"Resumes propagation after a reservation has been released.","pos":[3618,3676]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>source_block::resume_propagation<ept id=\"p1\">](source-block-class.md#resume_propagation)</ept>.)","pos":[3677,3766],"source":" (Overrides [source_block::resume_propagation](source-block-class.md#resume_propagation).)"},{"content":"unbounded_buffer::send_message Method","pos":[3772,3809]},{"content":"Synchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`unbounded_buffer`</ph> messaging block.","pos":[3826,3924],"source":"Synchronously passes a message from an `ISource` block to this `unbounded_buffer` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`send`</ph> method, when called by a source block.","pos":[3925,3991],"source":" It is invoked by the `send` method, when called by a source block."},{"content":"unbounded_buffer::supports_anonymous_source Method","pos":[3997,4047]},{"content":"Overrides the <ph id=\"ph1\">`supports_anonymous_source`</ph> method to indicate that this block can accept messages offered to it by a source that is not linked.","pos":[4077,4219],"source":"Overrides the `supports_anonymous_source` method to indicate that this block can accept messages offered to it by a source that is not linked."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>ITarget::supports_anonymous_source<ept id=\"p1\">](itarget-class.md#supports_anonymous_source)</ept>.)","pos":[4220,4313],"source":" (Overrides [ITarget::supports_anonymous_source](itarget-class.md#supports_anonymous_source).)"},{"pos":[4319,4410],"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Message Blocks<ept id=\"p1\">](../asynchronous-message-blocks.md)</ept>.","source":"For more information, see [Asynchronous Message Blocks](../asynchronous-message-blocks.md)."},{"content":"Inheritance Hierarchy","pos":[4419,4440]},{"content":"ISource","pos":[4445,4452]},{"content":"ITarget","pos":[4479,4486]},{"content":"source_block","pos":[4513,4525]},{"content":"propagator_block","pos":[4557,4573]},{"content":"Requirements","pos":[4635,4647]},{"pos":[4651,4671],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> agents.h","source":"**Header:** agents.h"},{"pos":[4678,4704],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> concurrency","source":"**Namespace:** concurrency"},{"pos":[4745,4784],"content":"unbounded_buffer::accept_message Method"},{"pos":[4788,4904],"content":"Accepts a message that was offered by this <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block, transferring ownership to the caller.","source":"Accepts a message that was offered by this `unbounded_buffer` messaging block, transferring ownership to the caller."},{"content":"Parameters","pos":[5029,5039]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the offered <ph id=\"ph2\">`message`</ph> object.","pos":[5055,5117],"source":" The `runtime_object_identity` of the offered `message` object."},{"content":"Return Value","pos":[5127,5139]},{"pos":[5143,5214],"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object that the caller now has ownership of.","source":"A pointer to the `message` object that the caller now has ownership of."},{"pos":[5256,5296],"content":"unbounded_buffer::consume_message Method"},{"pos":[5300,5445],"content":"Consumes a message previously offered by the <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block and reserved by the target, transferring ownership to the caller.","source":"Consumes a message previously offered by the `unbounded_buffer` messaging block and reserved by the target, transferring ownership to the caller."},{"content":"Parameters","pos":[5571,5581]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being consumed.","pos":[5597,5666],"source":" The `runtime_object_identity` of the `message` object being consumed."},{"content":"Return Value","pos":[5676,5688]},{"pos":[5692,5763],"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object that the caller now has ownership of.","source":"A pointer to the `message` object that the caller now has ownership of."},{"content":"Remarks","pos":[5773,5780]},{"pos":[5784,5851],"content":"Similar to <ph id=\"ph1\">`accept`</ph>, but is always preceded by a call to <ph id=\"ph2\">`reserve`</ph>.","source":"Similar to `accept`, but is always preceded by a call to `reserve`."},{"pos":[5885,5917],"content":"unbounded_buffer::dequeue Method"},{"pos":[5921,5981],"content":"Removes an item from the <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block.","source":"Removes an item from the `unbounded_buffer` messaging block."},{"content":"Return Value","pos":[6025,6037]},{"pos":[6041,6104],"content":"The payload of the message removed from the <ph id=\"ph1\">`unbounded_buffer`</ph>.","source":"The payload of the message removed from the `unbounded_buffer`."},{"pos":[6138,6170],"content":"unbounded_buffer::enqueue Method"},{"pos":[6174,6229],"content":"Adds an item to the <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block.","source":"Adds an item to the `unbounded_buffer` messaging block."},{"content":"Parameters","pos":[6315,6325]},{"content":"The item to add.","pos":[6340,6356]},{"content":"Return Value","pos":[6366,6378]},{"pos":[6389,6433],"content":"if the item was accepted, <ph id=\"ph1\">`false`</ph> otherwise.","source":" if the item was accepted, `false` otherwise."},{"pos":[6484,6533],"content":"unbounded_buffer::link_target_notification Method"},{"pos":[6537,6639],"content":"A callback that notifies that a new target has been linked to this <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block.","source":"A callback that notifies that a new target has been linked to this `unbounded_buffer` messaging block."},{"content":"Parameters","pos":[6765,6775]},{"content":"A pointer to the newly linked target.","pos":[6793,6830]},{"pos":[6874,6916],"content":"unbounded_buffer::propagate_message Method"},{"content":"Asynchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`unbounded_buffer`</ph> messaging block.","pos":[6920,7019],"source":"Asynchronously passes a message from an `ISource` block to this `unbounded_buffer` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`propagate`</ph> method, when called by a source block.","pos":[7020,7091],"source":" It is invoked by the `propagate` method, when called by a source block."},{"content":"Parameters","pos":[7277,7287]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[7306,7340],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[7361,7412]},{"content":"Return Value","pos":[7422,7434]},{"pos":[7438,7565],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md#message_status)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md#message_status) indication of what the target decided to do with the message."},{"pos":[7617,7667],"content":"unbounded_buffer::propagate_output_messages Method"},{"pos":[7671,7797],"content":"Places the <ph id=\"ph1\">`message``_PMessage`</ph> in this <ph id=\"ph2\">`unbounded_buffer`</ph> messaging block and tries to offer it to all of the linked targets.","source":"Places the `message``_PMessage` in this `unbounded_buffer` messaging block and tries to offer it to all of the linked targets."},{"content":"Remarks","pos":[7866,7873]},{"content":"If another message is already ahead of this one in the <ph id=\"ph1\">`unbounded_buffer`</ph>, propagation to linked targets will not occur until any earlier messages have been accepted or consumed.","pos":[7877,8055],"source":"If another message is already ahead of this one in the `unbounded_buffer`, propagation to linked targets will not occur until any earlier messages have been accepted or consumed."},{"content":"The first linked target to successfully <ph id=\"ph1\">`accept`</ph> or <ph id=\"ph2\">`consume`</ph> the message takes ownership, and no other target can then get the message.","pos":[8056,8192],"source":" The first linked target to successfully `accept` or `consume` the message takes ownership, and no other target can then get the message."},{"pos":[8241,8288],"content":"unbounded_buffer::process_input_messages Method"},{"pos":[8292,8418],"content":"Places the <ph id=\"ph1\">`message``_PMessage`</ph> in this <ph id=\"ph2\">`unbounded_buffer`</ph> messaging block and tries to offer it to all of the linked targets.","source":"Places the `message``_PMessage` in this `unbounded_buffer` messaging block and tries to offer it to all of the linked targets."},{"content":"Parameters","pos":[8543,8553]},{"pos":[8610,8650],"content":"unbounded_buffer::release_message Method"},{"content":"Releases a previous message reservation.","pos":[8654,8694]},{"content":"Parameters","pos":[8808,8818]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being released.","pos":[8834,8903],"source":" The `runtime_object_identity` of the `message` object being released."},{"pos":[8945,8985],"content":"unbounded_buffer::reserve_message Method"},{"pos":[8989,9070],"content":"Reserves a message previously offered by this <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block.","source":"Reserves a message previously offered by this `unbounded_buffer` messaging block."},{"content":"Parameters","pos":[9184,9194]},{"content":"The <ph id=\"ph1\">`runtime_object_identity`</ph> of the <ph id=\"ph2\">`message`</ph> object being reserved.","pos":[9210,9279],"source":" The `runtime_object_identity` of the `message` object being reserved."},{"content":"Return Value","pos":[9289,9301]},{"pos":[9312,9372],"content":"if the message was successfully reserved, <ph id=\"ph1\">`false`</ph> otherwise.","source":" if the message was successfully reserved, `false` otherwise."},{"content":"Remarks","pos":[9382,9389]},{"pos":[9393,9538],"content":"After <ph id=\"ph1\">`reserve`</ph> is called, if it returns <ph id=\"ph2\">`true`</ph>, either <ph id=\"ph3\">`consume`</ph> or <ph id=\"ph4\">`release`</ph> must be called to either take or release ownership of the message.","source":"After `reserve` is called, if it returns `true`, either `consume` or `release` must be called to either take or release ownership of the message."},{"pos":[9583,9626],"content":"unbounded_buffer::resume_propagation Method"},{"content":"Resumes propagation after a reservation has been released.","pos":[9630,9688]},{"pos":[9779,9816],"content":"unbounded_buffer::send_message Method"},{"content":"Synchronously passes a message from an <ph id=\"ph1\">`ISource`</ph> block to this <ph id=\"ph2\">`unbounded_buffer`</ph> messaging block.","pos":[9820,9918],"source":"Synchronously passes a message from an `ISource` block to this `unbounded_buffer` messaging block."},{"content":"It is invoked by the <ph id=\"ph1\">`send`</ph> method, when called by a source block.","pos":[9919,9985],"source":" It is invoked by the `send` method, when called by a source block."},{"content":"Parameters","pos":[10166,10176]},{"content":"A pointer to the <ph id=\"ph1\">`message`</ph> object.","pos":[10195,10229],"source":" A pointer to the `message` object."},{"content":"A pointer to the source block offering the message.","pos":[10250,10301]},{"content":"Return Value","pos":[10311,10323]},{"pos":[10327,10454],"content":"A <bpt id=\"p1\">[</bpt>message_status<ept id=\"p1\">](concurrency-namespace-enums.md#message_status)</ept> indication of what the target decided to do with the message.","source":"A [message_status](concurrency-namespace-enums.md#message_status) indication of what the target decided to do with the message."},{"pos":[10506,10556],"content":"unbounded_buffer::supports_anonymous_source Method"},{"pos":[10560,10702],"content":"Overrides the <ph id=\"ph1\">`supports_anonymous_source`</ph> method to indicate that this block can accept messages offered to it by a source that is not linked.","source":"Overrides the `supports_anonymous_source` method to indicate that this block can accept messages offered to it by a source that is not linked."},{"content":"Return Value","pos":[10771,10783]},{"pos":[10794,10847],"content":"because the block does not postpone offered messages."},{"pos":[10878,10924],"content":"unbounded_buffer::unbounded_buffer Constructor"},{"pos":[10928,10977],"content":"Constructs an <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block.","source":"Constructs an `unbounded_buffer` messaging block."},{"content":"Parameters","pos":[11508,11518]},{"content":"A filter function which determines whether offered messages should be accepted.","pos":[11535,11614]},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object within which the propagation task for the <ph id=\"ph2\">`unbounded_buffer`</ph> messaging block is scheduled.","pos":[11638,11751],"source":" The `Scheduler` object within which the propagation task for the `unbounded_buffer` messaging block is scheduled."},{"content":"The <ph id=\"ph1\">`ScheduleGroup`</ph> object within which the propagation task for the <ph id=\"ph2\">`unbounded_buffer`</ph> messaging block is scheduled.","pos":[11779,11896],"source":" The `ScheduleGroup` object within which the propagation task for the `unbounded_buffer` messaging block is scheduled."},{"content":"The <ph id=\"ph1\">`Scheduler`</ph> object used is implied by the schedule group.","pos":[11897,11958],"source":" The `Scheduler` object used is implied by the schedule group."},{"content":"Remarks","pos":[11968,11975]},{"pos":[11979,12090],"content":"The runtime uses the default scheduler if you do not specify the <ph id=\"ph1\">`_PScheduler`</ph> or <ph id=\"ph2\">`_PScheduleGroup`</ph> parameters.","source":"The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PScheduleGroup` parameters."},{"pos":[12097,12297],"content":"The type <ph id=\"ph1\">`filter_method`</ph> is a functor with signature <ph id=\"ph2\">`bool (_Type const &amp;)`</ph> which is invoked by this <ph id=\"ph3\">`unbounded_buffer`</ph> messaging block to determine whether or not it should accept an offered message.","source":"The type `filter_method` is a functor with signature `bool (_Type const &)` which is invoked by this `unbounded_buffer` messaging block to determine whether or not it should accept an offered message."},{"pos":[12328,12374],"content":"unbounded_buffer::~unbounded_buffer Destructor"},{"pos":[12378,12426],"content":"Destroys the <ph id=\"ph1\">`unbounded_buffer`</ph> messaging block.","source":"Destroys the `unbounded_buffer` messaging block."},{"content":"See Also","pos":[12473,12481]},{"content":"concurrency Namespace","pos":[12486,12507]},{"content":"overwrite_buffer Class","pos":[12540,12562]},{"content":"single_assignment Class","pos":[12596,12619]}],"content":"---\ntitle: \"unbounded_buffer Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"unbounded_buffer\"\ndev_langs: \n  - \"C++\"\nms.assetid: 6b1a939a-1819-4385-b1d8-708f83d4ec47\ncaps.latest.revision: 6\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n\n\nAn `unbounded_buffer` messaging block is a multi-target, multi-source, ordered `propagator_block` capable of storing an unbounded number of messages.  \n  \n## Syntax  \n  \n```  \ntemplate<  \n   class             _Type  \n>  \nclass unbounded_buffer : public propagator_block<multi_link_registry<ITarget<            _Type>>, multi_link_registry<ISource<            _Type>>>;  \n```  \n  \n#### Parameters  \n `_Type`  \n The payload type of the messages stored and propagated by the buffer.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[unbounded_buffer::unbounded_buffer Constructor](#ctor)|Overloaded. Constructs an `unbounded_buffer` messaging block.|  \n|[unbounded_buffer::~unbounded_buffer Destructor](#dtor)|Destroys the `unbounded_buffer` messaging block.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[unbounded_buffer::dequeue Method](#dequeue)|Removes an item from the `unbounded_buffer` messaging block.|  \n|[unbounded_buffer::enqueue Method](#enqueue)|Adds an item to the `unbounded_buffer` messaging block.|  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[unbounded_buffer::accept_message Method](#accept_message)|Accepts a message that was offered by this `unbounded_buffer` messaging block, transferring ownership to the caller.|  \n|[unbounded_buffer::consume_message Method](#consume_message)|Consumes a message previously offered by the `unbounded_buffer` messaging block and reserved by the target, transferring ownership to the caller.|  \n|[unbounded_buffer::link_target_notification Method](#link_target_notification)|A callback that notifies that a new target has been linked to this `unbounded_buffer` messaging block.|  \n|[unbounded_buffer::process_input_messages Method](#process_input_messages)|Places the `message``_PMessage` in this `unbounded_buffer` messaging block and tries to offer it to all of the linked targets.|  \n|[unbounded_buffer::propagate_message Method](#propagate_message)|Asynchronously passes a message from an `ISource` block to this `unbounded_buffer` messaging block. It is invoked by the `propagate` method, when called by a source block.|  \n|[unbounded_buffer::propagate_output_messages Method](#propagate_output_messages)|Places the `message``_PMessage` in this `unbounded_buffer` messaging block and tries to offer it to all of the linked targets. (Overrides [source_block::propagate_output_messages](source-block-class.md#propagate_output_messages).)|  \n|[unbounded_buffer::release_message Method](#release_message)|Releases a previous message reservation. (Overrides [source_block::release_message](source-block-class.md#release_message).)|  \n|[unbounded_buffer::reserve_message Method](#reserve_message)|Reserves a message previously offered by this `unbounded_buffer` messaging block. (Overrides [source_block::reserve_message](source-block-class.md#reserve_message).)|  \n|[unbounded_buffer::resume_propagation Method](#resume_propagation)|Resumes propagation after a reservation has been released. (Overrides [source_block::resume_propagation](source-block-class.md#resume_propagation).)|  \n|[unbounded_buffer::send_message Method](#send_message)|Synchronously passes a message from an `ISource` block to this `unbounded_buffer` messaging block. It is invoked by the `send` method, when called by a source block.|  \n|[unbounded_buffer::supports_anonymous_source Method](#supports_anonymous_source)|Overrides the `supports_anonymous_source` method to indicate that this block can accept messages offered to it by a source that is not linked. (Overrides [ITarget::supports_anonymous_source](itarget-class.md#supports_anonymous_source).)|  \n\n For more information, see [Asynchronous Message Blocks](../asynchronous-message-blocks.md).  \n  \n## Inheritance Hierarchy  \n [ISource](isource-class.md)  \n  \n [ITarget](itarget-class.md)  \n  \n [source_block](source-block-class.md)  \n  \n [propagator_block](propagator-block-class.md)  \n  \n `unbounded_buffer`  \n  \n## Requirements  \n **Header:** agents.h  \n  \n **Namespace:** concurrency  \n  \n##  <a name=\"accept_message\"></a>  unbounded_buffer::accept_message Method  \n Accepts a message that was offered by this `unbounded_buffer` messaging block, transferring ownership to the caller.  \n  \n```  \nvirtual message<_Type> * accept_message(  \n   runtime_object_identity                 _MsgId  \n);  \n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the offered `message` object.  \n  \n### Return Value  \n A pointer to the `message` object that the caller now has ownership of.  \n  \n##  <a name=\"consume_message\"></a>  unbounded_buffer::consume_message Method  \n Consumes a message previously offered by the `unbounded_buffer` messaging block and reserved by the target, transferring ownership to the caller.  \n  \n```  \nvirtual message<_Type> * consume_message(  \n   runtime_object_identity                 _MsgId  \n);  \n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being consumed.  \n  \n### Return Value  \n A pointer to the `message` object that the caller now has ownership of.  \n  \n### Remarks  \n Similar to `accept`, but is always preceded by a call to `reserve`.  \n  \n##  <a name=\"dequeue\"></a>  unbounded_buffer::dequeue Method  \n Removes an item from the `unbounded_buffer` messaging block.  \n  \n```  \n_Type dequeue();  \n```  \n  \n### Return Value  \n The payload of the message removed from the `unbounded_buffer`.  \n  \n##  <a name=\"enqueue\"></a>  unbounded_buffer::enqueue Method  \n Adds an item to the `unbounded_buffer` messaging block.  \n  \n```  \nbool enqueue(  \n   _Type const&                 _Item  \n);  \n```  \n  \n### Parameters  \n `_Item`  \n The item to add.  \n  \n### Return Value  \n `true` if the item was accepted, `false` otherwise.  \n  \n##  <a name=\"link_target_notification\"></a>  unbounded_buffer::link_target_notification Method  \n A callback that notifies that a new target has been linked to this `unbounded_buffer` messaging block.  \n  \n```  \nvirtual void link_target_notification(  \n   _Inout_ ITarget<_Type> *                 _PTarget  \n);  \n```  \n  \n### Parameters  \n `_PTarget`  \n A pointer to the newly linked target.  \n  \n##  <a name=\"propagate_message\"></a>  unbounded_buffer::propagate_message Method  \n Asynchronously passes a message from an `ISource` block to this `unbounded_buffer` messaging block. It is invoked by the `propagate` method, when called by a source block.  \n  \n```  \nvirtual message_status propagate_message(  \n   _Inout_ message<_Type> *                 _PMessage,  \n   _Inout_ ISource<_Type> *                 _PSource  \n);  \n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md#message_status) indication of what the target decided to do with the message.  \n  \n##  <a name=\"propagate_output_messages\"></a>  unbounded_buffer::propagate_output_messages Method  \n Places the `message``_PMessage` in this `unbounded_buffer` messaging block and tries to offer it to all of the linked targets.  \n  \n```  \nvirtual void propagate_output_messages();  \n```  \n  \n### Remarks  \n If another message is already ahead of this one in the `unbounded_buffer`, propagation to linked targets will not occur until any earlier messages have been accepted or consumed. The first linked target to successfully `accept` or `consume` the message takes ownership, and no other target can then get the message.  \n  \n##  <a name=\"process_input_messages\"></a>  unbounded_buffer::process_input_messages Method  \n Places the `message``_PMessage` in this `unbounded_buffer` messaging block and tries to offer it to all of the linked targets.  \n  \n```  \nvirtual void process_input_messages(  \n   _Inout_ message<_Type> *                 _PMessage  \n);  \n```  \n  \n### Parameters  \n `_PMessage`  \n  \n##  <a name=\"release_message\"></a>  unbounded_buffer::release_message Method  \n Releases a previous message reservation.  \n  \n```  \nvirtual void release_message(  \n   runtime_object_identity                 _MsgId  \n);  \n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being released.  \n  \n##  <a name=\"reserve_message\"></a>  unbounded_buffer::reserve_message Method  \n Reserves a message previously offered by this `unbounded_buffer` messaging block.  \n  \n```  \nvirtual bool reserve_message(  \n   runtime_object_identity                 _MsgId  \n);  \n```  \n  \n### Parameters  \n `_MsgId`  \n The `runtime_object_identity` of the `message` object being reserved.  \n  \n### Return Value  \n `true` if the message was successfully reserved, `false` otherwise.  \n  \n### Remarks  \n After `reserve` is called, if it returns `true`, either `consume` or `release` must be called to either take or release ownership of the message.  \n  \n##  <a name=\"resume_propagation\"></a>  unbounded_buffer::resume_propagation Method  \n Resumes propagation after a reservation has been released.  \n  \n```  \nvirtual void resume_propagation();  \n```  \n  \n##  <a name=\"send_message\"></a>  unbounded_buffer::send_message Method  \n Synchronously passes a message from an `ISource` block to this `unbounded_buffer` messaging block. It is invoked by the `send` method, when called by a source block.  \n  \n```  \nvirtual message_status send_message(  \n   _Inout_ message<_Type> *                 _PMessage,  \n   _Inout_ ISource<_Type> *                 _PSource  \n);  \n```  \n  \n### Parameters  \n `_PMessage`  \n A pointer to the `message` object.  \n  \n `_PSource`  \n A pointer to the source block offering the message.  \n  \n### Return Value  \n A [message_status](concurrency-namespace-enums.md#message_status) indication of what the target decided to do with the message.  \n  \n##  <a name=\"supports_anonymous_source\"></a>  unbounded_buffer::supports_anonymous_source Method  \n Overrides the `supports_anonymous_source` method to indicate that this block can accept messages offered to it by a source that is not linked.  \n  \n```  \nvirtual bool supports_anonymous_source();  \n```  \n  \n### Return Value  \n `true` because the block does not postpone offered messages.  \n  \n##  <a name=\"ctor\"></a>  unbounded_buffer::unbounded_buffer Constructor  \n Constructs an `unbounded_buffer` messaging block.  \n  \n```  \nunbounded_buffer();  \n  \nunbounded_buffer(  \n   filter_method const&                 _Filter  \n);  \n  \nunbounded_buffer(  \n   Scheduler&                 _PScheduler  \n);  \n  \nunbounded_buffer(  \n   Scheduler&                 _PScheduler,  \n   filter_method const&                 _Filter  \n);  \n  \nunbounded_buffer(  \n   ScheduleGroup&                 _PScheduleGroup  \n);  \n  \nunbounded_buffer(  \n   ScheduleGroup&                 _PScheduleGroup,  \n   filter_method const&                 _Filter  \n);  \n```  \n  \n### Parameters  \n `_Filter`  \n A filter function which determines whether offered messages should be accepted.  \n  \n `_PScheduler`  \n The `Scheduler` object within which the propagation task for the `unbounded_buffer` messaging block is scheduled.  \n  \n `_PScheduleGroup`  \n The `ScheduleGroup` object within which the propagation task for the `unbounded_buffer` messaging block is scheduled. The `Scheduler` object used is implied by the schedule group.  \n  \n### Remarks  \n The runtime uses the default scheduler if you do not specify the `_PScheduler` or `_PScheduleGroup` parameters.  \n  \n The type `filter_method` is a functor with signature `bool (_Type const &)` which is invoked by this `unbounded_buffer` messaging block to determine whether or not it should accept an offered message.  \n  \n##  <a name=\"dtor\"></a>  unbounded_buffer::~unbounded_buffer Destructor  \n Destroys the `unbounded_buffer` messaging block.  \n  \n```  \n~unbounded_buffer();  \n```  \n  \n## See Also  \n [concurrency Namespace](concurrency-namespace.md)   \n [overwrite_buffer Class](overwrite-buffer-class.md)   \n [single_assignment Class](single-assignment-class.md)\n\n\n"}