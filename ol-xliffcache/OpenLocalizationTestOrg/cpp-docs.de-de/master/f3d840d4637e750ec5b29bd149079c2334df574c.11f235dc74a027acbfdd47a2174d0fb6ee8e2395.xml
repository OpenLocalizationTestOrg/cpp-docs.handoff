{"nodes":[{"pos":[12,50],"content":"_makepath, _wmakepath | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_makepath, _wmakepath | Microsoft Docs","pos":[0,38]}]},{"content":"_makepath, _wmakepath","pos":[1166,1187]},{"content":"Create a path name from components.","pos":[1188,1223]},{"content":"More secure versions of these functions are available; see <bpt id=\"p1\">[</bpt>_makepath_s, _wmakepath_s<ept id=\"p1\">](../../c-runtime-library/reference/makepath-s-wmakepath-s.md)</ept>.","pos":[1224,1372],"source":" More secure versions of these functions are available; see [_makepath_s, _wmakepath_s](../../c-runtime-library/reference/makepath-s-wmakepath-s.md)."},{"content":"Syntax","pos":[1381,1387]},{"content":"Parameters","pos":[1693,1703]},{"content":"Full path buffer.","pos":[1717,1734]},{"content":"Contains a letter (A, B, and so on) corresponding to the desired drive and an optional trailing colon.","pos":[1752,1854]},{"content":"inserts the colon automatically in the composite path if it is missing.","pos":[1867,1938]},{"content":"If <ph id=\"ph1\">`drive`</ph> is <ph id=\"ph2\">`NULL`</ph> or points to an empty string, no drive letter appears in the composite <ph id=\"ph3\">`path`</ph> string.","pos":[1939,2045],"source":" If `drive` is `NULL` or points to an empty string, no drive letter appears in the composite `path` string."},{"content":"Contains the path of directories, not including the drive designator or the actual file name.","pos":[2061,2154]},{"content":"The trailing slash is optional, and either a forward slash (/) or a backslash (<ph id=\"ph1\">\\\\</ph>) or both might be used in a single <ph id=\"ph2\">`dir`</ph> argument.","pos":[2155,2287],"source":" The trailing slash is optional, and either a forward slash (/) or a backslash (\\\\) or both might be used in a single `dir` argument."},{"content":"If no trailing slash (/ or <ph id=\"ph1\">\\\\</ph>) is specified, it is inserted automatically.","pos":[2288,2362],"source":" If no trailing slash (/ or \\\\) is specified, it is inserted automatically."},{"content":"If <ph id=\"ph1\">`dir`</ph> is <ph id=\"ph2\">`NULL`</ph> or points to an empty string, no directory path is inserted in the composite <ph id=\"ph3\">`path`</ph> string.","pos":[2363,2473],"source":" If `dir` is `NULL` or points to an empty string, no directory path is inserted in the composite `path` string."},{"content":"Contains the base file name without any file name extensions.","pos":[2491,2552]},{"content":"If <ph id=\"ph1\">`fname`</ph> is <ph id=\"ph2\">`NULL`</ph> or points to an empty string, no filename is inserted in the composite <ph id=\"ph3\">`path`</ph> string.","pos":[2553,2659],"source":" If `fname` is `NULL` or points to an empty string, no filename is inserted in the composite `path` string."},{"content":"Contains the actual file name extension, with or without a leading period (.).","pos":[2675,2753]},{"content":"inserts the period automatically if it does not appear in <ph id=\"ph1\">`ext`</ph>.","pos":[2766,2830],"source":" inserts the period automatically if it does not appear in `ext`."},{"content":"If <ph id=\"ph1\">`ext`</ph> is <ph id=\"ph2\">`NULL`</ph> or points to an empty string, no extension is inserted in the composite <ph id=\"ph3\">`path`</ph> string.","pos":[2831,2936],"source":" If `ext` is `NULL` or points to an empty string, no extension is inserted in the composite `path` string."},{"content":"Remarks","pos":[2945,2952]},{"content":"The <ph id=\"ph1\">`_makepath`</ph> function creates a composite path string from individual components, storing the result in <ph id=\"ph2\">`path`</ph>.","pos":[2956,3070],"source":"The `_makepath` function creates a composite path string from individual components, storing the result in `path`."},{"content":"The <ph id=\"ph1\">`path`</ph> might include a drive letter, directory path, filename, and filename extension.","pos":[3071,3161],"source":" The `path` might include a drive letter, directory path, filename, and filename extension."},{"content":"is a wide-character version of <ph id=\"ph1\">`_makepath`</ph>; the arguments to <ph id=\"ph2\">`_wmakepath`</ph> are wide-character strings.","pos":[3175,3276],"source":" is a wide-character version of `_makepath`; the arguments to `_wmakepath` are wide-character strings."},{"content":"and <ph id=\"ph1\">`_makepath`</ph> behave identically otherwise.","pos":[3290,3335],"source":" and `_makepath` behave identically otherwise."},{"content":"<bpt id=\"p1\">**</bpt>Security Note<ept id=\"p1\">**</ept> Use a null-terminated string.","pos":[3342,3389],"source":"**Security Note** Use a null-terminated string."},{"content":"To avoid buffer overrun, the null-terminated string must not exceed the size of the <ph id=\"ph1\">`path`</ph> buffer.","pos":[3390,3488],"source":" To avoid buffer overrun, the null-terminated string must not exceed the size of the `path` buffer."},{"content":"does not ensure that the length of the composite path string does not exceed <ph id=\"ph1\">`_MAX_PATH`</ph>.","pos":[3501,3590],"source":" does not ensure that the length of the composite path string does not exceed `_MAX_PATH`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[3591,3704],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."},{"content":"Generic-Text Routine Mappings","pos":[3714,3743]},{"content":"Tchar.h routine","pos":[3750,3765]},{"content":"_UNICODE and _MBCS not defined","pos":[3766,3796]},{"content":"_MBCS defined","pos":[3797,3810]},{"content":"_UNICODE defined","pos":[3811,3827]},{"content":"The <ph id=\"ph1\">`path`</ph> argument must point to an empty buffer large enough to hold the complete path.","pos":[3999,4088],"source":"The `path` argument must point to an empty buffer large enough to hold the complete path."},{"content":"The composite <ph id=\"ph1\">`path`</ph> must be no larger than the <ph id=\"ph2\">`_MAX_PATH`</ph> constant, defined in Stdlib.h.","pos":[4089,4179],"source":" The composite `path` must be no larger than the `_MAX_PATH` constant, defined in Stdlib.h."},{"content":"If path is <ph id=\"ph1\">`NULL`</ph>, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[4186,4335],"source":"If path is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"In addition, <ph id=\"ph1\">`errno`</ph> is set to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[4336,4376],"source":" In addition, `errno` is set to `EINVAL`."},{"content":"values are allowed for all other parameters.","pos":[4384,4428]},{"content":"Requirements","pos":[4437,4449]},{"content":"Routine","pos":[4456,4463]},{"content":"Required header","pos":[4464,4479]},{"content":"stdlib.h&gt;","pos":[4538,4547],"source":"stdlib.h>"},{"content":"stdlib.h&gt; or <ph id=\"ph1\">\\&lt;</ph>wchar.h&gt;","pos":[4567,4590],"source":"stdlib.h> or \\<wchar.h>"},{"pos":[4598,4716],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Example","pos":[4725,4732]},{"content":".NET Framework Equivalent","pos":[5745,5770]},{"content":"System::IO::File::Create","pos":[5775,5799]},{"content":"See Also","pos":[5878,5886]},{"content":"File Handling","pos":[5891,5904]},{"content":"_fullpath, _wfullpath","pos":[5953,5974]},{"content":"_splitpath, _wsplitpath","pos":[6038,6061]},{"content":"_makepath_s, _wmakepath_s","pos":[6127,6152]}],"content":"---\ntitle: \"_makepath, _wmakepath | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_makepath\"\n  - \"_wmakepath\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-filesystem-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_wmakepath\"\n  - \"_tmakepath\"\n  - \"makepath\"\n  - \"tmakepath\"\n  - \"wmakepath\"\n  - \"_makepath\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_makepath function\"\n  - \"wmakepath function\"\n  - \"makepath function\"\n  - \"_tmakepath function\"\n  - \"paths\"\n  - \"_wmakepath function\"\n  - \"tmakepath function\"\nms.assetid: 5930b197-a7b8-46eb-8519-2841a58cd026\ncaps.latest.revision: 22\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# _makepath, _wmakepath\nCreate a path name from components. More secure versions of these functions are available; see [_makepath_s, _wmakepath_s](../../c-runtime-library/reference/makepath-s-wmakepath-s.md).  \n  \n## Syntax  \n  \n```  \nvoid _makepath(  \n   char *path,  \n   const char *drive,  \n   const char *dir,  \n   const char *fname,  \n   const char *ext   \n);  \nvoid _wmakepath(  \n   wchar_t *path,  \n   const wchar_t *drive,  \n   const wchar_t *dir,  \n   const wchar_t *fname,  \n   const wchar_t *ext   \n);  \n```  \n  \n#### Parameters  \n `path`  \n Full path buffer.  \n  \n `drive`  \n Contains a letter (A, B, and so on) corresponding to the desired drive and an optional trailing colon. `_makepath` inserts the colon automatically in the composite path if it is missing. If `drive` is `NULL` or points to an empty string, no drive letter appears in the composite `path` string.  \n  \n `dir`  \n Contains the path of directories, not including the drive designator or the actual file name. The trailing slash is optional, and either a forward slash (/) or a backslash (\\\\) or both might be used in a single `dir` argument. If no trailing slash (/ or \\\\) is specified, it is inserted automatically. If `dir` is `NULL` or points to an empty string, no directory path is inserted in the composite `path` string.  \n  \n `fname`  \n Contains the base file name without any file name extensions. If `fname` is `NULL` or points to an empty string, no filename is inserted in the composite `path` string.  \n  \n `ext`  \n Contains the actual file name extension, with or without a leading period (.). `_makepath` inserts the period automatically if it does not appear in `ext`. If `ext` is `NULL` or points to an empty string, no extension is inserted in the composite `path` string.  \n  \n## Remarks  \n The `_makepath` function creates a composite path string from individual components, storing the result in `path`. The `path` might include a drive letter, directory path, filename, and filename extension. `_wmakepath` is a wide-character version of `_makepath`; the arguments to `_wmakepath` are wide-character strings. `_wmakepath` and `_makepath` behave identically otherwise.  \n  \n **Security Note** Use a null-terminated string. To avoid buffer overrun, the null-terminated string must not exceed the size of the `path` buffer. `_makepath` does not ensure that the length of the composite path string does not exceed `_MAX_PATH`. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n### Generic-Text Routine Mappings  \n  \n|Tchar.h routine|_UNICODE and _MBCS not defined|_MBCS defined|_UNICODE defined|  \n|---------------------|--------------------------------------|--------------------|-----------------------|  \n|`_tmakepath`|`_makepath`|`_makepath`|`_wmakepath`|  \n  \n The `path` argument must point to an empty buffer large enough to hold the complete path. The composite `path` must be no larger than the `_MAX_PATH` constant, defined in Stdlib.h.  \n  \n If path is `NULL`, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). In addition, `errno` is set to `EINVAL`. `NULL` values are allowed for all other parameters.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`_makepath`|\\<stdlib.h>|  \n|`_wmakepath`|\\<stdlib.h> or \\<wchar.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```  \n// crt_makepath.c  \n#include <stdlib.h>  \n#include <stdio.h>  \n  \nint main( void )  \n{  \n   char path_buffer[_MAX_PATH];  \n   char drive[_MAX_DRIVE];  \n   char dir[_MAX_DIR];  \n   char fname[_MAX_FNAME];  \n   char ext[_MAX_EXT];  \n  \n   _makepath( path_buffer, \"c\", \"\\\\sample\\\\crt\\\\\", \"makepath\", \"c\" ); // C4996  \n   // Note: _makepath is deprecated; consider using _makepath_s instead  \n   printf( \"Path created with _makepath: %s\\n\\n\", path_buffer );  \n   _splitpath( path_buffer, drive, dir, fname, ext ); // C4996  \n   // Note: _splitpath is deprecated; consider using _splitpath_s instead  \n   printf( \"Path extracted with _splitpath:\\n\" );  \n   printf( \"  Drive: %s\\n\", drive );  \n   printf( \"  Dir: %s\\n\", dir );  \n   printf( \"  Filename: %s\\n\", fname );  \n   printf( \"  Ext: %s\\n\", ext );  \n}  \n```  \n  \n```Output  \nPath created with _makepath: c:\\sample\\crt\\makepath.c  \n  \nPath extracted with _splitpath:  \n  Drive: c:  \n  Dir: \\sample\\crt\\  \n  Filename: makepath  \n  Ext: .c  \n```  \n  \n## .NET Framework Equivalent  \n [System::IO::File::Create](https://msdn.microsoft.com/en-us/library/system.io.file.create.aspx)  \n  \n## See Also  \n [File Handling](../../c-runtime-library/file-handling.md)   \n [_fullpath, _wfullpath](../../c-runtime-library/reference/fullpath-wfullpath.md)   \n [_splitpath, _wsplitpath](../../c-runtime-library/reference/splitpath-wsplitpath.md)   \n [_makepath_s, _wmakepath_s](../../c-runtime-library/reference/makepath-s-wmakepath-s.md)"}