{"nodes":[{"pos":[12,44],"content":"is_scalar Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"is_scalar Class | Microsoft Docs","pos":[0,32]}]},{"content":"is_scalar Class","pos":[745,760]},{"content":"Tests if type is scalar.","pos":[761,785]},{"content":"Syntax","pos":[794,800]},{"content":"Parameters","pos":[868,878]},{"content":"The type to query.","pos":[890,908]},{"content":"Remarks","pos":[917,924]},{"pos":[928,1166],"content":"An instance of the type predicate holds true if the type <ph id=\"ph1\">`Ty`</ph> is an integral type, a floating point type, an enumeration type, a pointer type, or a pointer to member type, or a <ph id=\"ph2\">`cv-qualified`</ph> form of one of them, otherwise it holds false.","source":"An instance of the type predicate holds true if the type `Ty` is an integral type, a floating point type, an enumeration type, a pointer type, or a pointer to member type, or a `cv-qualified` form of one of them, otherwise it holds false."},{"content":"Example","pos":[1175,1182]},{"content":"Requirements","pos":[2055,2067]},{"pos":[2071,2096],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> &lt;type_traits&gt;","source":"**Header:** <type_traits>"},{"pos":[2103,2121],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[2130,2138]},{"content":"&lt;type_traits&gt;","pos":[2143,2156],"source":"<type_traits>"},{"content":"is_compound Class","pos":[2199,2216]}],"content":"---\ntitle: \"is_scalar Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std.tr1.is_scalar\"\n  - \"std::tr1::is_scalar\"\n  - \"is_scalar\"\n  - \"std.is_scalar\"\n  - \"std::is_scalar\"\n  - \"type_traits/std::is_scalar\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"is_scalar class [TR1]\"\n  - \"is_scalar\"\nms.assetid: a0cdfc9a-f27e-4808-890f-6ed7942db60c\ncaps.latest.revision: 19\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# is_scalar Class\nTests if type is scalar.  \n  \n## Syntax  \n  \n```  \ntemplate <class Ty>  \nstruct is_scalar;  \n```  \n  \n#### Parameters  \n `Ty`  \n The type to query.  \n  \n## Remarks  \n An instance of the type predicate holds true if the type `Ty` is an integral type, a floating point type, an enumeration type, a pointer type, or a pointer to member type, or a `cv-qualified` form of one of them, otherwise it holds false.  \n  \n## Example  \n  \n```cpp  \n// std_tr1__type_traits__is_scalar.cpp   \n// compile with: /EHsc   \n#include <type_traits>   \n#include <iostream>   \n  \nstruct trivial   \n    {   \n    int val;   \n    };   \n  \nint main()   \n    {   \n    std::cout << \"is_scalar<trivial> == \" << std::boolalpha   \n        << std::is_scalar<trivial>::value << std::endl;   \n    std::cout << \"is_scalar<trivial *> == \" << std::boolalpha   \n        << std::is_scalar<trivial *>::value << std::endl;   \n    std::cout << \"is_scalar<int> == \" << std::boolalpha   \n        << std::is_scalar<int>::value << std::endl;   \n    std::cout << \"is_scalar<float> == \" << std::boolalpha   \n        << std::is_scalar<float>::value << std::endl;   \n  \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \nis_scalar<trivial> == false  \nis_scalar<trivial *> == true  \nis_scalar<int> == true  \nis_scalar<float> == true  \n```  \n  \n## Requirements  \n **Header:** <type_traits>  \n  \n **Namespace:** std  \n  \n## See Also  \n [<type_traits>](../standard-library/type-traits.md)   \n [is_compound Class](../standard-library/is-compound-class.md)\n"}