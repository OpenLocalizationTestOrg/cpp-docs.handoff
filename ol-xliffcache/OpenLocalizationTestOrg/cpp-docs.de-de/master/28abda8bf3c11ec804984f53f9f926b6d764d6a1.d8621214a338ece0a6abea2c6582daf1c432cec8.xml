{"nodes":[{"pos":[12,58],"content":"Equality Operators: == and != | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Equality Operators: == and != | Microsoft Docs","pos":[0,46]}]},{"content":"Equality Operators: == and !=","pos":[793,822]},{"content":"Syntax","pos":[826,832]},{"content":"Remarks","pos":[910,917]},{"content":"The binary equality operators compare their operands for strict equality or inequality.","pos":[921,1008]},{"content":"The equality operators, equal to (<ph id=\"ph1\">`==`</ph>) and not equal to (<ph id=\"ph2\">`!=`</ph>), have lower precedence than the relational operators, but they behave similarly.","pos":[1015,1159],"source":"The equality operators, equal to (`==`) and not equal to (`!=`), have lower precedence than the relational operators, but they behave similarly."},{"content":"The result type for these operators is <ph id=\"ph1\">`bool`</ph>.","pos":[1160,1206],"source":" The result type for these operators is `bool`."},{"content":"The equal-to operator (<ph id=\"ph1\">`==`</ph>) returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> (1) if both operands have the same value; otherwise, it returns <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> (0).","pos":[1213,1337],"source":"The equal-to operator (`==`) returns **true** (1) if both operands have the same value; otherwise, it returns **false** (0)."},{"content":"The not-equal-to operator (<ph id=\"ph1\">`!=`</ph>) returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> if the operands do not have the same value; otherwise, it returns <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","pos":[1338,1464],"source":" The not-equal-to operator (`!=`) returns **true** if the operands do not have the same value; otherwise, it returns **false**."},{"content":"Operator Keyword for !=","pos":[1473,1496]},{"content":"The <ph id=\"ph1\">`not_eq`</ph> operator is the text equivalent of <ph id=\"ph2\">`!=`</ph>.","pos":[1500,1553],"source":"The `not_eq` operator is the text equivalent of `!=`."},{"content":"There are two ways to access the <ph id=\"ph1\">`not_eq`</ph> operator in your programs: include the header file <ph id=\"ph2\">`iso646.h`</ph>, or compile with the <bpt id=\"p1\">[</bpt>/Za<ept id=\"p1\">](../build/reference/za-ze-disable-language-extensions.md)</ept> (Disable language extensions) compiler option.","pos":[1554,1788],"source":" There are two ways to access the `not_eq` operator in your programs: include the header file `iso646.h`, or compile with the [/Za](../build/reference/za-ze-disable-language-extensions.md) (Disable language extensions) compiler option."},{"content":"Example","pos":[1797,1804]},{"content":"Equality operators can compare pointers to members of the same type.","pos":[2151,2219]},{"content":"In such a comparison, pointer-to-member conversions are performed.","pos":[2220,2286]},{"content":"Pointers to members can also be compared to a constant expression that evaluates to 0.","pos":[2287,2373]},{"content":"See Also","pos":[2382,2390]},{"content":"Expressions with Binary Operators","pos":[2395,2428]},{"content":"C++ Built-in Operators, Precedence and Associativity","pos":[2480,2532]},{"content":"C Relational and Equality Operators","pos":[2602,2637]}],"content":"---\ntitle: \"Equality Operators: == and != | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"not_eq\"\n  - \"!=\"\n  - \"==\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"!= operator\"\n  - \"equality operator\"\n  - \"not equal to comparison operator\"\n  - \"equality operator, syntax\"\n  - \"== operator\"\n  - \"not_eq operator\"\n  - \"equal to operator\"\nms.assetid: ba4e9659-2392-4fb4-be5a-910a2a6df45a\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Equality Operators: == and !=\n## Syntax  \n  \n```  \nexpression == expression  \nexpression != expression  \n```  \n  \n## Remarks  \n The binary equality operators compare their operands for strict equality or inequality.  \n  \n The equality operators, equal to (`==`) and not equal to (`!=`), have lower precedence than the relational operators, but they behave similarly. The result type for these operators is `bool`.  \n  \n The equal-to operator (`==`) returns **true** (1) if both operands have the same value; otherwise, it returns **false** (0). The not-equal-to operator (`!=`) returns **true** if the operands do not have the same value; otherwise, it returns **false**.  \n  \n## Operator Keyword for !=  \n The `not_eq` operator is the text equivalent of `!=`. There are two ways to access the `not_eq` operator in your programs: include the header file `iso646.h`, or compile with the [/Za](../build/reference/za-ze-disable-language-extensions.md) (Disable language extensions) compiler option.  \n  \n## Example  \n  \n```  \n// expre_Equality_Operators.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nusing namespace std;  \n  \nint main() {  \n   cout  << boolalpha  \n         << \"The true expression 3 != 2 yields: \"  \n         << (3 != 2) << endl  \n         << \"The false expression 20 == 10 yields: \"  \n         << (20 == 10) << endl;  \n}  \n```  \n  \n Equality operators can compare pointers to members of the same type. In such a comparison, pointer-to-member conversions are performed. Pointers to members can also be compared to a constant expression that evaluates to 0.  \n  \n## See Also  \n [Expressions with Binary Operators](../cpp/expressions-with-binary-operators.md)   \n [C++ Built-in Operators, Precedence and Associativity](../cpp/cpp-built-in-operators-precedence-and-associativity.md)   \n [C Relational and Equality Operators](../c-language/c-relational-and-equality-operators.md)"}