{"nodes":[{"pos":[12,44],"content":"SafeGreaterThan | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"SafeGreaterThan | Microsoft Docs","pos":[0,32]}]},{"content":"SafeGreaterThan","pos":[621,636]},{"content":"Compares two numbers.","pos":[637,658]},{"content":"Syntax","pos":[667,673]},{"content":"Parameters","pos":[811,821]},{"content":"[in]","pos":[825,829]},{"content":"The first number to compare.","pos":[837,865]},{"content":"This must be of type T.","pos":[866,889]},{"content":"[in]","pos":[896,900]},{"content":"The second number to compare.","pos":[908,937]},{"content":"This must be of type U.","pos":[938,961]},{"content":"Return Value","pos":[970,982]},{"pos":[993,1039],"content":"if <ph id=\"ph1\">`t`</ph> is greater than <ph id=\"ph2\">`u`</ph>; otherwise <ph id=\"ph3\">`false`</ph>.","source":" if `t` is greater than `u`; otherwise `false`."},{"content":"Remarks","pos":[1048,1055]},{"pos":[1077,1175],"content":"extends the regular comparison operator by enabling you to compare two different types of numbers."},{"pos":[1182,1385],"content":"This method is part of <bpt id=\"p1\">[</bpt>SafeInt Library<ept id=\"p1\">](../windows/safeint-library.md)</ept> and is designed for a single comparison operation without creating an instance of the <bpt id=\"p2\">[</bpt>SafeInt Class<ept id=\"p2\">](../windows/safeint-class.md)</ept>.","source":"This method is part of [SafeInt Library](../windows/safeint-library.md) and is designed for a single comparison operation without creating an instance of the [SafeInt Class](../windows/safeint-class.md)."},{"pos":[1393,1617],"content":"[!NOTE]\n This method should only be used when a single mathematical operation must be protected. If there are multiple operations, you should use the `SafeInt` class instead of calling the individual stand-alone functions.","leadings":["","> "],"nodes":[{"content":" This method should only be used when a single mathematical operation must be protected. If there are multiple operations, you should use the `SafeInt` class instead of calling the individual stand-alone functions.","pos":[8,222],"nodes":[{"content":"This method should only be used when a single mathematical operation must be protected.","pos":[1,88]},{"content":"If there are multiple operations, you should use the <ph id=\"ph1\">`SafeInt`</ph> class instead of calling the individual stand-alone functions.","pos":[89,214],"source":" If there are multiple operations, you should use the `SafeInt` class instead of calling the individual stand-alone functions."}]}]},{"pos":[1624,1736],"content":"For more information about the template types T and U, see <bpt id=\"p1\">[</bpt>SafeInt Functions<ept id=\"p1\">](../windows/safeint-functions.md)</ept>.","source":"For more information about the template types T and U, see [SafeInt Functions](../windows/safeint-functions.md)."},{"content":"Requirements","pos":[1745,1757]},{"pos":[1761,1782],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> safeint.h","source":"**Header:** safeint.h"},{"pos":[1789,1824],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> Microsoft::Utilities","source":"**Namespace:** Microsoft::Utilities"},{"content":"See Also","pos":[1833,1841]},{"content":"SafeInt Functions","pos":[1846,1863]},{"content":"SafeInt Library","pos":[1903,1918]},{"content":"SafeInt Class","pos":[1956,1969]},{"content":"SafeLessThan","pos":[2005,2017]},{"content":"SafeLessThanEquals","pos":[2052,2070]},{"content":"SafeGreaterThanEquals","pos":[2111,2132]}],"content":"---\ntitle: \"SafeGreaterThan | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\nf1_keywords: \n  - \"SafeGreaterThan\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"SafeGreaterThan function\"\nms.assetid: 32cecac9-ba88-43eb-a7a4-30e390456739\ncaps.latest.revision: 6\nauthor: \"ghogen\"\nms.author: \"ghogen\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# SafeGreaterThan\nCompares two numbers.  \n  \n## Syntax  \n  \n```  \ntemplate<typename T, typename U>  \ninline bool SafeGreaterThan (  \n   const T t,  \n   const U u  \n) throw ();  \n```  \n  \n#### Parameters  \n [in] `t`  \n The first number to compare. This must be of type T.  \n  \n [in] `u`  \n The second number to compare. This must be of type U.  \n  \n## Return Value  \n `true` if `t` is greater than `u`; otherwise `false`.  \n  \n## Remarks  \n `SafeGreaterThan` extends the regular comparison operator by enabling you to compare two different types of numbers.  \n  \n This method is part of [SafeInt Library](../windows/safeint-library.md) and is designed for a single comparison operation without creating an instance of the [SafeInt Class](../windows/safeint-class.md).  \n  \n> [!NOTE]\n>  This method should only be used when a single mathematical operation must be protected. If there are multiple operations, you should use the `SafeInt` class instead of calling the individual stand-alone functions.  \n  \n For more information about the template types T and U, see [SafeInt Functions](../windows/safeint-functions.md).  \n  \n## Requirements  \n **Header:** safeint.h  \n  \n **Namespace:** Microsoft::Utilities  \n  \n## See Also  \n [SafeInt Functions](../windows/safeint-functions.md)   \n [SafeInt Library](../windows/safeint-library.md)   \n [SafeInt Class](../windows/safeint-class.md)   \n [SafeLessThan](../windows/safelessthan.md)   \n [SafeLessThanEquals](../windows/safelessthanequals.md)   \n [SafeGreaterThanEquals](../windows/safegreaterthanequals.md)"}