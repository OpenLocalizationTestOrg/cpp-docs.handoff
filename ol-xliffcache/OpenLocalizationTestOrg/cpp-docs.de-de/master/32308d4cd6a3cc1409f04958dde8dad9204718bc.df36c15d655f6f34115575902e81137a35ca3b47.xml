{"nodes":[{"pos":[12,48],"content":"basic_istream Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"basic_istream Class | Microsoft Docs","pos":[0,36]}]},{"pos":[693,712],"content":"basic_istream Class","linkify":"basic_istream Class","nodes":[{"content":"basic_istream Class","pos":[0,19]}]},{"pos":[713,1077],"content":"Describes an object that controls extraction of elements and encoded objects from a stream buffer with elements of type <ph id=\"ph1\">`Elem`</ph>, also known as <bpt id=\"p1\">[</bpt>char_type<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__char_type)</ept>, whose character traits are determined by the class <bpt id=\"p2\">*</bpt>Tr<ept id=\"p2\">*</ept>, also known as <bpt id=\"p3\">[</bpt>traits_type<ept id=\"p3\">](../standard-library/basic-ios-class.md#basic_ios__traits_type)</ept>.","source":"Describes an object that controls extraction of elements and encoded objects from a stream buffer with elements of type `Elem`, also known as [char_type](../standard-library/basic-ios-class.md#basic_ios__char_type), whose character traits are determined by the class *Tr*, also known as [traits_type](../standard-library/basic-ios-class.md#basic_ios__traits_type)."},{"pos":[1086,1092],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1229,1236],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Most of the member functions that overload <bpt id=\"p1\">[</bpt>operator&gt;&gt;<ept id=\"p1\">](#basic_istream__operator_gt__gt_)</ept> are formatted input functions.","pos":[1240,1360],"source":"Most of the member functions that overload [operator>>](#basic_istream__operator_gt__gt_) are formatted input functions."},{"content":"They follow the pattern:","pos":[1361,1385]},{"content":"Many other member functions are unformatted input functions.","pos":[1839,1899]},{"content":"They follow the pattern:","pos":[1900,1924]},{"pos":[2420,2590],"content":"Both groups of functions call <bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p2\">**</bpt>eofbit<ept id=\"p2\">**</ept>) if they encounter end of file while extracting elements.","source":"Both groups of functions call [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **eofbit**) if they encounter end of file while extracting elements."},{"pos":[2597,2654],"content":"An object of class <ph id=\"ph1\">`basic_istream`</ph><ph id=\"ph2\">&lt; </ph><ph id=\"ph3\">`Elem`</ph>, <bpt id=\"p1\">*</bpt>Tr<ept id=\"p1\">*</ept>&gt; stores:","source":"An object of class `basic_istream`< `Elem`, *Tr*> stores:"},{"pos":[2664,2772],"content":"A virtual public base object of class <bpt id=\"p1\">[</bpt>basic_ios<ept id=\"p1\">](../standard-library/basic-ios-class.md)</ept><ph id=\"ph1\">&lt; </ph><ph id=\"ph2\">`Elem`</ph>, <bpt id=\"p2\">*</bpt>Tr<ept id=\"p2\">*</ept><ph id=\"ph3\">&gt; </ph><ph id=\"ph4\">`.`</ph>","source":"A virtual public base object of class [basic_ios](../standard-library/basic-ios-class.md)< `Elem`, *Tr*> `.`"},{"pos":[2782,2883],"content":"An extraction count for the last unformatted input operation (called <bpt id=\"p1\">**</bpt>count<ept id=\"p1\">**</ept> in the previous code).","source":"An extraction count for the last unformatted input operation (called **count** in the previous code)."},{"pos":[2892,2899],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2903,3025],"content":"See the example for <bpt id=\"p1\">[</bpt>basic_ifstream Class<ept id=\"p1\">](../standard-library/basic-ifstream-class.md)</ept> to learn more about input streams.","source":"See the example for [basic_ifstream Class](../standard-library/basic-ifstream-class.md) to learn more about input streams."},{"pos":[3035,3047],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"pos":[3068,3114],"content":"<bpt id=\"p1\">[</bpt>basic_istream<ept id=\"p1\">](#basic_istream__basic_istream)</ept>","source":"[basic_istream](#basic_istream__basic_istream)"},{"pos":[3115,3160],"content":"Constructs an object of type <ph id=\"ph1\">`basic_istream`</ph>.","source":"Constructs an object of type `basic_istream`."},{"pos":[3171,3187],"content":"Member Functions","linkify":"Member Functions","nodes":[{"content":"Member Functions","pos":[0,16]}]},{"pos":[3208,3240],"content":"<bpt id=\"p1\">[</bpt>gcount<ept id=\"p1\">](#basic_istream__gcount)</ept>","source":"[gcount](#basic_istream__gcount)"},{"content":"Returns the number of characters read during the last unformatted input.","pos":[3241,3313]},{"pos":[3318,3344],"content":"<bpt id=\"p1\">[</bpt>get<ept id=\"p1\">](#basic_istream__get)</ept>","source":"[get](#basic_istream__get)"},{"content":"Reads one or more characters from the input stream.","pos":[3345,3396]},{"pos":[3401,3435],"content":"<bpt id=\"p1\">[</bpt>getline<ept id=\"p1\">](#basic_istream__getline)</ept>","source":"[getline](#basic_istream__getline)"},{"content":"Reads a line from the input stream.","pos":[3436,3471]},{"pos":[3476,3508],"content":"<bpt id=\"p1\">[</bpt>ignore<ept id=\"p1\">](#basic_istream__ignore)</ept>","source":"[ignore](#basic_istream__ignore)"},{"content":"Causes a number of elements to be skipped from the current read position.","pos":[3509,3582]},{"pos":[3587,3615],"content":"<bpt id=\"p1\">[</bpt>peek<ept id=\"p1\">](#basic_istream__peek)</ept>","source":"[peek](#basic_istream__peek)"},{"content":"Returns the next character to be read.","pos":[3616,3654]},{"pos":[3659,3693],"content":"<bpt id=\"p1\">[</bpt>putback<ept id=\"p1\">](#basic_istream__putback)</ept>","source":"[putback](#basic_istream__putback)"},{"content":"Puts a specified character into the stream.","pos":[3694,3737]},{"pos":[3742,3770],"content":"<bpt id=\"p1\">[</bpt>read<ept id=\"p1\">](#basic_istream__read)</ept>","source":"[read](#basic_istream__read)"},{"content":"Reads a specified number of characters from the stream and stores them in an array.","pos":[3771,3854]},{"pos":[3859,3895],"content":"<bpt id=\"p1\">[</bpt>readsome<ept id=\"p1\">](#basic_istream__readsome)</ept>","source":"[readsome](#basic_istream__readsome)"},{"content":"Read from buffer only.","pos":[3896,3918]},{"pos":[3923,3953],"content":"<bpt id=\"p1\">[</bpt>seekg<ept id=\"p1\">](#basic_istream__seekg)</ept>","source":"[seekg](#basic_istream__seekg)"},{"content":"Moves the read position in a stream.","pos":[3954,3990]},{"pos":[3995,4027],"content":"<bpt id=\"p1\">[</bpt>sentry<ept id=\"p1\">](#basic_istream__sentry)</ept>","source":"[sentry](#basic_istream__sentry)"},{"content":"The nested class describes an object whose declaration structures the formatted input functions and the unformatted input functions.","pos":[4028,4160]},{"pos":[4165,4193],"content":"<bpt id=\"p1\">[</bpt>swap<ept id=\"p1\">](#basic_istream__swap)</ept>","source":"[swap](#basic_istream__swap)"},{"pos":[4194,4282],"content":"Exchanges this <ph id=\"ph1\">`basic_istream`</ph> object for the provided <ph id=\"ph2\">`basic_istream`</ph> object parameter.","source":"Exchanges this `basic_istream` object for the provided `basic_istream` object parameter."},{"pos":[4287,4315],"content":"<bpt id=\"p1\">[</bpt>sync<ept id=\"p1\">](#basic_istream__sync)</ept>","source":"[sync](#basic_istream__sync)"},{"content":"Synchronizes the input device associated with the stream with the stream's buffer.","pos":[4316,4398]},{"pos":[4403,4433],"content":"<bpt id=\"p1\">[</bpt>tellg<ept id=\"p1\">](#basic_istream__tellg)</ept>","source":"[tellg](#basic_istream__tellg)"},{"content":"Reports the current read position in the stream.","pos":[4434,4482]},{"pos":[4487,4517],"content":"<bpt id=\"p1\">[</bpt>unget<ept id=\"p1\">](#basic_istream__unget)</ept>","source":"[unget](#basic_istream__unget)"},{"content":"Puts the most recently read character back into the stream.","pos":[4518,4577]},{"pos":[4588,4597],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"pos":[4618,4664],"content":"<bpt id=\"p1\">[</bpt>operator&gt;&gt;<ept id=\"p1\">](#basic_istream__operator_gt__gt_)</ept>","source":"[operator>>](#basic_istream__operator_gt__gt_)"},{"content":"Calls a function on the input stream or reads formatted data from the input stream.","pos":[4665,4748]},{"pos":[4753,4793],"content":"<bpt id=\"p1\">[</bpt>operator=<ept id=\"p1\">](#basic_istream__operator_eq)</ept>","source":"[operator=](#basic_istream__operator_eq)"},{"content":"Assigns the <ph id=\"ph1\">`basic_istream`</ph> on the right side of the operator to this object.","pos":[4794,4871],"source":"Assigns the `basic_istream` on the right side of the operator to this object."},{"content":"This is a move assignment involving an <ph id=\"ph1\">`rvalue`</ph> reference that does not leave a copy behind.","pos":[4872,4964],"source":" This is a move assignment involving an `rvalue` reference that does not leave a copy behind."},{"pos":[4974,4986],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4990,5012],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>istream&gt;","source":"**Header:** \\<istream>"},{"pos":[5019,5037],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5047,5120],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__basic_istream\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::basic_istream","linkify":"<a name=\"basic_istream__basic_istream\"></a>  basic_istream::basic_istream","source":"<a name=\"basic_istream__basic_istream\"></a>  basic_istream::basic_istream"},{"pos":[5124,5169],"content":"Constructs an object of type <ph id=\"ph1\">`basic_istream`</ph>.","source":"Constructs an object of type `basic_istream`."},{"pos":[5324,5334],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An object of type <bpt id=\"p1\">[</bpt>basic_streambuf<ept id=\"p1\">](../standard-library/basic-streambuf-class.md)</ept>.","pos":[5351,5433],"source":" An object of type [basic_streambuf](../standard-library/basic-streambuf-class.md)."},{"content":"<ph id=\"ph1\"> `true`</ph> if this is a standard stream; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[5451,5508],"source":" `true` if this is a standard stream; otherwise, `false`."},{"content":"A <ph id=\"ph1\">`basic_istream`</ph> object to copy.","pos":[5527,5560],"source":" A `basic_istream` object to copy."},{"pos":[5570,5577],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first constructor initializes the base class by calling <bpt id=\"p1\">[</bpt>init<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__init)</ept>(_S <ph id=\"ph1\">`trbuf`</ph>).","pos":[5581,5716],"source":"The first constructor initializes the base class by calling [init](../standard-library/basic-ios-class.md#basic_ios__init)(_S `trbuf`)."},{"content":"It also stores zero in the extraction count.","pos":[5717,5761]},{"content":"For more information about this extraction count, see the Remarks section of the <bpt id=\"p1\">[</bpt>basic_istream Class<ept id=\"p1\">](../standard-library/basic-istream-class.md)</ept> overview topic.","pos":[5762,5924],"source":" For more information about this extraction count, see the Remarks section of the [basic_istream Class](../standard-library/basic-istream-class.md) overview topic."},{"content":"The second constructor initializes the base class by calling <ph id=\"ph1\">`move``( right)`</ph>.","pos":[5931,6009],"source":"The second constructor initializes the base class by calling `move``( right)`."},{"content":"It also stores _R <ph id=\"ph1\">`ight.gcount()`</ph> in the extraction count and stores zero in the extraction count for _R <ph id=\"ph2\">`ight`</ph>.","pos":[6010,6122],"source":" It also stores _R `ight.gcount()` in the extraction count and stores zero in the extraction count for _R `ight`."},{"pos":[6132,6139],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6144,6307],"content":"See the example for <bpt id=\"p1\">[</bpt>basic_ifstream::basic_ifstream<ept id=\"p1\">](../standard-library/basic-ifstream-class.md#basic_ifstream__basic_ifstream)</ept> to learn more about input streams.","source":"See the example for [basic_ifstream::basic_ifstream](../standard-library/basic-ifstream-class.md#basic_ifstream__basic_ifstream) to learn more about input streams."},{"pos":[6317,6376],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__gcount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::gcount","linkify":"<a name=\"basic_istream__gcount\"></a>  basic_istream::gcount","source":"<a name=\"basic_istream__gcount\"></a>  basic_istream::gcount"},{"content":"Returns the number of characters read during the last unformatted input.","pos":[6380,6452]},{"pos":[6504,6516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The extraction count.","pos":[6520,6541]},{"pos":[6551,6558],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6562,6639],"content":"Use <bpt id=\"p1\">[</bpt>basic_istream::get<ept id=\"p1\">](#basic_istream__get)</ept> to read unformatted characters.","source":"Use [basic_istream::get](#basic_istream__get) to read unformatted characters."},{"pos":[6649,6656],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7068,7121],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__get\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::get","linkify":"<a name=\"basic_istream__get\"></a>  basic_istream::get","source":"<a name=\"basic_istream__get\"></a>  basic_istream::get"},{"content":"Reads one or more characters from the input stream.","pos":[7125,7176]},{"pos":[7531,7541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of characters to read from <ph id=\"ph1\">`strbuf`</ph>.","pos":[7557,7604],"source":" The number of characters to read from `strbuf`."},{"content":"The character that should terminate the read if it is encountered before <ph id=\"ph1\">` count`</ph>.","pos":[7622,7704],"source":" The character that should terminate the read if it is encountered before ` count`."},{"content":"A string in which to write.","pos":[7721,7748]},{"content":"A character to get.","pos":[7763,7782]},{"content":"A buffer in which to write.","pos":[7802,7829]},{"pos":[7839,7851],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parameterless form of get returns the element read as an integer or end of file.","pos":[7855,7939]},{"content":"The remaining forms return the stream (* <ph id=\"ph1\">`this`</ph>).","pos":[7940,7989],"source":" The remaining forms return the stream (* `this`)."},{"pos":[7999,8006],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first of these unformatted input functions extracts an element, if possible, as if by returning <ph id=\"ph1\">`rdbuf`</ph><ph id=\"ph2\">-&gt; </ph><ph id=\"ph3\">`sbumpc`</ph>.","pos":[8010,8129],"source":"The first of these unformatted input functions extracts an element, if possible, as if by returning `rdbuf`-> `sbumpc`."},{"content":"Otherwise, it returns <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>eof<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>.","pos":[8130,8235],"source":" Otherwise, it returns **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof)."},{"content":"If the function extracts no element, it calls <bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p2\">**</bpt>failbit<ept id=\"p2\">**</ept>).","pos":[8236,8367],"source":" If the function extracts no element, it calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**)."},{"content":"The second function extracts the <bpt id=\"p1\">[</bpt>int_type<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__int_type)</ept> element <ph id=\"ph1\">`meta`</ph> the same way.","pos":[8374,8506],"source":"The second function extracts the [int_type](../standard-library/basic-ios-class.md#basic_ios__int_type) element `meta` the same way."},{"content":"If <ph id=\"ph1\">`meta`</ph> compares equal to <bpt id=\"p1\">**</bpt>traits_type::eof<ept id=\"p1\">**</ept>, the function calls <ph id=\"ph2\">`setstate`</ph>( <bpt id=\"p2\">**</bpt>failbit<ept id=\"p2\">**</ept>).","pos":[8507,8601],"source":" If `meta` compares equal to **traits_type::eof**, the function calls `setstate`( **failbit**)."},{"content":"Otherwise, it stores <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>to_char_type<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__to_char_type)</ept>( <ph id=\"ph1\">`meta`</ph>) in <ph id=\"ph2\">`Ch`</ph>.","pos":[8602,8741],"source":" Otherwise, it stores **traits_type::**[to_char_type](../standard-library/char-traits-struct.md#char_traits__to_char_type)( `meta`) in `Ch`."},{"content":"The function returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[8742,8774],"source":" The function returns **\\*this**."},{"pos":[8781,8855],"content":"The third function returns <bpt id=\"p1\">**</bpt>get<ept id=\"p1\">**</ept>(_ <bpt id=\"p2\">*</bpt>Str<ept id=\"p2\">*</ept>, <ph id=\"ph1\">` count`</ph>, <ph id=\"ph2\">`widen`</ph>('\\ <bpt id=\"p3\">**</bpt>n<ept id=\"p3\">**</ept>')).","source":"The third function returns **get**(_ *Str*, ` count`, `widen`('\\ **n**'))."},{"content":"The fourth function extracts up to <ph id=\"ph1\">` count`</ph> - 1 elements and stores them in the array beginning at _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept>.","pos":[8862,8969],"source":"The fourth function extracts up to ` count` - 1 elements and stores them in the array beginning at _ *Str*."},{"content":"It always stores <ph id=\"ph1\">`char_type`</ph> after any extracted elements it stores.","pos":[8970,9038],"source":" It always stores `char_type` after any extracted elements it stores."},{"content":"In order of testing, extraction stops:","pos":[9039,9077]},{"content":"At end of file.","pos":[9087,9102]},{"pos":[9112,9248],"content":"After the function extracts an element that compares equal to <ph id=\"ph1\">`Delim`</ph>, in which case the element is put back to the controlled sequence.","source":"After the function extracts an element that compares equal to `Delim`, in which case the element is put back to the controlled sequence."},{"pos":[9258,9308],"content":"After the function extracts <ph id=\"ph1\">` count`</ph> - 1 elements.","source":"After the function extracts ` count` - 1 elements."},{"content":"If the function extracts no elements, it calls <ph id=\"ph1\">`setstate`</ph>( <bpt id=\"p1\">**</bpt>failbit<ept id=\"p1\">**</ept>).","pos":[9315,9387],"source":"If the function extracts no elements, it calls `setstate`( **failbit**)."},{"content":"In any case, it returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[9388,9423],"source":" In any case, it returns **\\*this**."},{"pos":[9430,9498],"content":"The fifth function returns <bpt id=\"p1\">**</bpt>get<ept id=\"p1\">**</ept>( <bpt id=\"p2\">**</bpt>strbuf<ept id=\"p2\">**</ept>, <ph id=\"ph1\">`widen`</ph>('\\ <bpt id=\"p3\">**</bpt>n<ept id=\"p3\">**</ept>')).","source":"The fifth function returns **get**( **strbuf**, `widen`('\\ **n**'))."},{"content":"The sixth function extracts elements and inserts them in <bpt id=\"p1\">**</bpt>strbuf<ept id=\"p1\">**</ept>.","pos":[9505,9573],"source":"The sixth function extracts elements and inserts them in **strbuf**."},{"content":"Extraction stops on end-of-file or on an element that compares equal to _ <bpt id=\"p1\">*</bpt>Delim,<ept id=\"p1\">*</ept> which is not extracted.","pos":[9574,9680],"source":" Extraction stops on end-of-file or on an element that compares equal to _ *Delim,* which is not extracted."},{"content":"It also stops, without extracting the element in question, if an insertion fails or throws an exception (which is caught but not rethrown).","pos":[9681,9820]},{"content":"If the function extracts no elements, it calls <ph id=\"ph1\">`setstate`</ph>( <bpt id=\"p1\">**</bpt>failbit<ept id=\"p1\">**</ept>).","pos":[9821,9893],"source":" If the function extracts no elements, it calls `setstate`( **failbit**)."},{"content":"In any case, the function returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[9894,9939],"source":" In any case, the function returns **\\*this**."},{"pos":[9949,9956],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10287,10348],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__getline\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::getline","linkify":"<a name=\"basic_istream__getline\"></a>  basic_istream::getline","source":"<a name=\"basic_istream__getline\"></a>  basic_istream::getline"},{"content":"Gets a line from the input stream.","pos":[10352,10386]},{"pos":[10596,10606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of characters to read from <bpt id=\"p1\">**</bpt>strbuf<ept id=\"p1\">**</ept>.","pos":[10622,10671],"source":" The number of characters to read from **strbuf**."},{"content":"The character that should terminate the read if it is encountered before <ph id=\"ph1\">` count`</ph>.","pos":[10689,10771],"source":" The character that should terminate the read if it is encountered before ` count`."},{"content":"A string in which to write.","pos":[10788,10815]},{"pos":[10825,10837],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10841,10866],"content":"The stream ( <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>).","source":"The stream ( **\\*this**)."},{"pos":[10876,10883],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10887,10995],"content":"The first of these unformatted input functions returns <bpt id=\"p1\">**</bpt>getline<ept id=\"p1\">**</ept>(_ <bpt id=\"p2\">*</bpt>Str<ept id=\"p2\">*</ept>, <ph id=\"ph1\">` count`</ph>, <ph id=\"ph2\">`widen`</ph>(' <ph id=\"ph3\">`\\`</ph><bpt id=\"p3\">**</bpt>n<ept id=\"p3\">**</ept>')).","source":"The first of these unformatted input functions returns **getline**(_ *Str*, ` count`, `widen`(' `\\`**n**'))."},{"content":"The second function extracts up to <ph id=\"ph1\">` count`</ph> - 1 elements and stores them in the array beginning at _ <bpt id=\"p1\">*</bpt>Str<ept id=\"p1\">*</ept>.","pos":[11002,11109],"source":"The second function extracts up to ` count` - 1 elements and stores them in the array beginning at _ *Str*."},{"content":"It always stores the string termination character after any extracted elements it stores.","pos":[11110,11199]},{"content":"In order of testing, extraction stops:","pos":[11200,11238]},{"content":"At end of file.","pos":[11248,11263]},{"pos":[11273,11430],"content":"After the function extracts an element that compares equal to <ph id=\"ph1\">`Delim`</ph>, in which case the element is neither put back nor appended to the controlled sequence.","source":"After the function extracts an element that compares equal to `Delim`, in which case the element is neither put back nor appended to the controlled sequence."},{"pos":[11440,11490],"content":"After the function extracts <ph id=\"ph1\">` count`</ph> - 1 elements.","source":"After the function extracts ` count` - 1 elements."},{"content":"If the function extracts no elements or <ph id=\"ph1\">` count`</ph> - 1 elements, it calls <bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p2\">**</bpt>failbit<ept id=\"p2\">**</ept>).","pos":[11497,11654],"source":"If the function extracts no elements or ` count` - 1 elements, it calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**)."},{"content":"In any case, it returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[11655,11690],"source":" In any case, it returns **\\*this**."},{"pos":[11700,11707],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11971,12030],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__ignore\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::ignore","linkify":"<a name=\"basic_istream__ignore\"></a>  basic_istream::ignore","source":"<a name=\"basic_istream__ignore\"></a>  basic_istream::ignore"},{"content":"Causes a number of elements to be skipped from the current read position.","pos":[12034,12107]},{"pos":[12235,12245],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of elements to skip from the current read position.","pos":[12261,12323]},{"content":"The element that, if encountered before count, causes <bpt id=\"p1\">**</bpt>ignore<ept id=\"p1\">**</ept> to return and allowing all elements after <ph id=\"ph1\">`Delim`</ph> to be read.","pos":[12341,12467],"source":" The element that, if encountered before count, causes **ignore** to return and allowing all elements after `Delim` to be read."},{"pos":[12477,12489],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12493,12518],"content":"The stream ( <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>).","source":"The stream ( **\\*this**)."},{"pos":[12528,12535],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The unformatted input function extracts up to <ph id=\"ph1\">` count`</ph> elements and discards them.","pos":[12539,12621],"source":"The unformatted input function extracts up to ` count` elements and discards them."},{"content":"If <ph id=\"ph1\">` count`</ph> equals <bpt id=\"p1\">**</bpt>numeric_limits<ph id=\"ph2\">\\&lt;</ph>int&gt;::max<ept id=\"p1\">**</ept>, however, it is taken as arbitrarily large.","pos":[12622,12714],"source":" If ` count` equals **numeric_limits\\<int>::max**, however, it is taken as arbitrarily large."},{"content":"Extraction stops early on end of file or on an element <ph id=\"ph1\">`Ch`</ph> such that <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>to_int_type<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <ph id=\"ph2\">`Ch`</ph>) compares equal to _ <bpt id=\"p3\">*</bpt>Delim<ept id=\"p3\">*</ept> (which is also extracted).","pos":[12715,12945],"source":" Extraction stops early on end of file or on an element `Ch` such that **traits_type::**[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( `Ch`) compares equal to _ *Delim* (which is also extracted)."},{"content":"The function returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[12946,12978],"source":" The function returns **\\*this**."},{"pos":[12988,12995],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13352,13431],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__operator_gt__gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">&amp;gt;</ph>","linkify":"<a name=\"basic_istream__operator_gt__gt_\"></a>  basic_istream::operator&gt;&gt;","source":"<a name=\"basic_istream__operator_gt__gt_\"></a>  basic_istream::operator&gt;&gt;"},{"content":"Calls a function on the input stream or reads formatted data from the input stream.","pos":[13435,13518]},{"pos":[14364,14374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A function pointer.","pos":[14387,14406]},{"content":"An object of type <bpt id=\"p1\">**</bpt>stream_buf<ept id=\"p1\">**</ept>.","pos":[14426,14459],"source":" An object of type **stream_buf**."},{"content":"The value to read from the stream.","pos":[14476,14510]},{"pos":[14520,14532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14536,14561],"content":"The stream ( <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>).","source":"The stream ( **\\*this**)."},{"pos":[14571,14578],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`&lt;istream&gt;`</ph> header also defines several global extraction operators.","pos":[14582,14654],"source":"The `<istream>` header also defines several global extraction operators."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>operator&gt;&gt; (<ph id=\"ph1\">\\&lt;</ph>istream&gt;)<ept id=\"p1\">](../standard-library/istream-operators.md#operator_gt__gt_)</ept>.","pos":[14655,14766],"source":" For more information, see [operator>> (\\<istream>)](../standard-library/istream-operators.md#operator_gt__gt_)."},{"content":"The first member function ensures that an expression of the form <bpt id=\"p1\">**</bpt>istr<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt;&gt; </ph><ph id=\"ph2\">`ws`</ph> calls <bpt id=\"p2\">[</bpt>ws<ept id=\"p2\">](../standard-library/istream-functions.md#ws)</ept>( <bpt id=\"p3\">**</bpt>istr<ept id=\"p3\">**</ept>), and then returns <bpt id=\"p4\">**</bpt><ph id=\"ph3\">\\*</ph>this<ept id=\"p4\">**</ept>.","pos":[14773,14951],"source":"The first member function ensures that an expression of the form **istr** >> `ws` calls [ws](../standard-library/istream-functions.md#ws)( **istr**), and then returns **\\*this**."},{"content":"The second and third functions ensure that other manipulators, such as <bpt id=\"p1\">[</bpt>hex<ept id=\"p1\">](../standard-library/ios-functions.md#hex)</ept>, behave similarly.","pos":[14952,15089],"source":" The second and third functions ensure that other manipulators, such as [hex](../standard-library/ios-functions.md#hex), behave similarly."},{"content":"The remaining functions constitute the formatted input functions.","pos":[15090,15155]},{"content":"The function:","pos":[15162,15175]},{"content":"extracts elements, if _ <bpt id=\"p1\">*</bpt>Strbuf<ept id=\"p1\">*</ept> is not a null pointer, and inserts them in <ph id=\"ph1\">` strbuf`</ph>.","pos":[15264,15350],"source":"extracts elements, if _ *Strbuf* is not a null pointer, and inserts them in ` strbuf`."},{"content":"Extraction stops on end of file.","pos":[15351,15383]},{"content":"It also stops without extracting the element in question, if an insertion fails or throws an exception (which is caught but not rethrown).","pos":[15384,15522]},{"content":"If the function extracts no elements, it calls <bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p2\">**</bpt>failbit<ept id=\"p2\">**</ept>).","pos":[15523,15655],"source":" If the function extracts no elements, it calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**)."},{"content":"In any case, the function returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[15656,15701],"source":" In any case, the function returns **\\*this**."},{"content":"The function:","pos":[15708,15721]},{"content":"extracts a field and converts it to a Boolean value by calling <bpt id=\"p1\">[</bpt>use_facet<ept id=\"p1\">](../standard-library/basic-filebuf-class.md#basic_filebuf__open)</ept><ph id=\"ph1\"> &lt; </ph><ph id=\"ph2\">`num_get`</ph><ph id=\"ph3\">\\&lt;</ph> <bpt id=\"p2\">**</bpt>Elem<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>InIt<ept id=\"p3\">**</ept>&gt;( <bpt id=\"p4\">[</bpt>getloc<ept id=\"p4\">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>).","pos":[15781,16021],"source":"extracts a field and converts it to a Boolean value by calling [use_facet](../standard-library/basic-filebuf-class.md#basic_filebuf__open) < `num_get`\\< **Elem**, **InIt**>( [getloc](../standard-library/ios-base-class.md#ios_base__getloc))."},{"content":"<bpt id=\"p1\">[</bpt>get<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>( <bpt id=\"p2\">**</bpt>InIt<ept id=\"p2\">**</ept>( <bpt id=\"p3\">[</bpt>rdbuf<ept id=\"p3\">](../standard-library/basic-ios-class.md#basic_ios__rdbuf)</ept>), <ph id=\"ph1\">`Init`</ph>(0), <bpt id=\"p4\">**</bpt><ph id=\"ph2\">\\*</ph>this<ept id=\"p4\">**</ept>, <ph id=\"ph3\">`getloc`</ph>, <ph id=\"ph4\">` val`</ph>).","pos":[16022,16203],"source":"[get](../standard-library/ios-base-class.md#ios_base__getloc)( **InIt**( [rdbuf](../standard-library/basic-ios-class.md#basic_ios__rdbuf)), `Init`(0), **\\*this**, `getloc`, ` val`)."},{"content":"Here, <bpt id=\"p1\">**</bpt>InIt<ept id=\"p1\">**</ept> is defined as <bpt id=\"p2\">[</bpt>istreambuf_iterator<ept id=\"p2\">](../standard-library/istreambuf-iterator-class.md)</ept><ph id=\"ph1\">\\&lt;</ph> <bpt id=\"p3\">**</bpt>Elem<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>Tr<ept id=\"p4\">**</ept>&gt;.","pos":[16204,16325],"source":" Here, **InIt** is defined as [istreambuf_iterator](../standard-library/istreambuf-iterator-class.md)\\< **Elem**, **Tr**>."},{"content":"The function returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[16326,16358],"source":" The function returns **\\*this**."},{"content":"The functions:","pos":[16365,16379]},{"content":"each extract a field and convert it to a numeric value by calling <ph id=\"ph1\">`use_facet`</ph><ph id=\"ph2\">&lt; </ph><ph id=\"ph3\">`num_get`</ph><ph id=\"ph4\">\\&lt;</ph> <bpt id=\"p1\">**</bpt>Elem<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>InIt<ept id=\"p2\">**</ept>&gt;( <ph id=\"ph5\">`getloc`</ph>).","pos":[16793,16915],"source":"each extract a field and convert it to a numeric value by calling `use_facet`< `num_get`\\< **Elem**, **InIt**>( `getloc`)."},{"content":"<bpt id=\"p1\">[</bpt>get<ept id=\"p1\">](#basic_istream__get)</ept>( <bpt id=\"p2\">**</bpt>InIt<ept id=\"p2\">**</ept>( <ph id=\"ph1\">`rdbuf`</ph>), <ph id=\"ph2\">`Init`</ph>(0), <bpt id=\"p3\">**</bpt><ph id=\"ph3\">\\*</ph>this<ept id=\"p3\">**</ept>, <ph id=\"ph4\">`getloc`</ph>, <ph id=\"ph5\">` val`</ph>).","pos":[16916,17005],"source":"[get](#basic_istream__get)( **InIt**( `rdbuf`), `Init`(0), **\\*this**, `getloc`, ` val`)."},{"content":"Here, <bpt id=\"p1\">**</bpt>InIt<ept id=\"p1\">**</ept> is defined as <ph id=\"ph1\">`istreambuf_iterator`</ph><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p2\">**</bpt>Elem<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Tr<ept id=\"p3\">**</ept>&gt;, and <ph id=\"ph3\">` val`</ph> has type <bpt id=\"p4\">**</bpt>long<ept id=\"p4\">**</ept><bpt id=\"p5\">*</bpt>,<ept id=\"p5\">*</ept><ph id=\"ph4\">`unsigned long`</ph><bpt id=\"p6\">*</bpt>,<ept id=\"p6\">*</ept> or <bpt id=\"p7\">**</bpt>void <ph id=\"ph5\">\\*</ph><ept id=\"p7\">**</ept> as needed.","pos":[17006,17153],"source":" Here, **InIt** is defined as `istreambuf_iterator`\\< **Elem**, **Tr**>, and ` val` has type **long***,*`unsigned long`*,* or **void \\*** as needed."},{"content":"If the converted value cannot be represented as the type of <ph id=\"ph1\">` val`</ph>, the function calls <bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p2\">**</bpt>failbit<ept id=\"p2\">**</ept>).","pos":[17160,17332],"source":"If the converted value cannot be represented as the type of ` val`, the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**)."},{"content":"In any case, the function returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[17333,17378],"source":" In any case, the function returns **\\*this**."},{"content":"The functions:","pos":[17385,17399]},{"content":"each extract a field and convert it to a numeric value by calling <ph id=\"ph1\">`use_facet`</ph><ph id=\"ph2\">&lt; </ph><ph id=\"ph3\">`num_get`</ph><ph id=\"ph4\">\\&lt;</ph> <bpt id=\"p1\">**</bpt>Elem<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>InIt<ept id=\"p2\">**</ept>&gt;( <ph id=\"ph5\">`getloc`</ph>).","pos":[17545,17667],"source":"each extract a field and convert it to a numeric value by calling `use_facet`< `num_get`\\< **Elem**, **InIt**>( `getloc`)."},{"content":"<bpt id=\"p1\">**</bpt>get<ept id=\"p1\">**</ept>( <bpt id=\"p2\">**</bpt>InIt<ept id=\"p2\">**</ept>( <ph id=\"ph1\">`rdbuf`</ph>), <ph id=\"ph2\">`Init`</ph>(0), <bpt id=\"p3\">**</bpt><ph id=\"ph3\">\\*</ph>this<ept id=\"p3\">**</ept>, <ph id=\"ph4\">`getloc`</ph>, <ph id=\"ph5\">` val`</ph>).","pos":[17668,17738],"source":"**get**( **InIt**( `rdbuf`), `Init`(0), **\\*this**, `getloc`, ` val`)."},{"content":"Here, <bpt id=\"p1\">**</bpt>InIt<ept id=\"p1\">**</ept> is defined as <ph id=\"ph1\">`istreambuf_iterator`</ph><ph id=\"ph2\">\\&lt;</ph> <bpt id=\"p2\">**</bpt>Elem<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Tr<ept id=\"p3\">**</ept>&gt;, and <ph id=\"ph3\">` val`</ph> has type <bpt id=\"p4\">**</bpt>double<ept id=\"p4\">**</ept> or <ph id=\"ph4\">`long double`</ph> as needed.","pos":[17739,17869],"source":" Here, **InIt** is defined as `istreambuf_iterator`\\< **Elem**, **Tr**>, and ` val` has type **double** or `long double` as needed."},{"content":"If the converted value cannot be represented as the type of <ph id=\"ph1\">` val`</ph>, the function calls <ph id=\"ph2\">`setstate`</ph>( <bpt id=\"p1\">**</bpt>failbit<ept id=\"p1\">**</ept>).","pos":[17876,17988],"source":"If the converted value cannot be represented as the type of ` val`, the function calls `setstate`( **failbit**)."},{"content":"In any case, it returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[17989,18024],"source":" In any case, it returns **\\*this**."},{"pos":[18034,18041],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18658,18725],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__operator_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::operator=","linkify":"<a name=\"basic_istream__operator_eq\"></a>  basic_istream::operator=","source":"<a name=\"basic_istream__operator_eq\"></a>  basic_istream::operator="},{"content":"Assigns the <ph id=\"ph1\">`basic_istream`</ph> on the right side of the operator to this object.","pos":[18729,18806],"source":"Assigns the `basic_istream` on the right side of the operator to this object."},{"content":"This is a move assignment involving an <ph id=\"ph1\">`rvalue`</ph> reference that does not leave a copy behind.","pos":[18807,18899],"source":" This is a move assignment involving an `rvalue` reference that does not leave a copy behind."},{"pos":[18973,18983],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An <ph id=\"ph1\">`rvalue`</ph> reference to a <ph id=\"ph2\">`basic_ifstream`</ph> object.","pos":[18999,19050],"source":" An `rvalue` reference to a `basic_ifstream` object."},{"pos":[19060,19072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns *this.","pos":[19076,19090]},{"pos":[19100,19107],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19111,19153],"content":"The member operator calls swap <ph id=\"ph1\">`( right)`</ph>.","source":"The member operator calls swap `( right)`."},{"pos":[19163,19218],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__peek\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::peek","linkify":"<a name=\"basic_istream__peek\"></a>  basic_istream::peek","source":"<a name=\"basic_istream__peek\"></a>  basic_istream::peek"},{"content":"Returns the next character to be read.","pos":[19222,19260]},{"pos":[19302,19314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The next character that will be read.","pos":[19318,19355]},{"pos":[19365,19372],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The unformatted input function extracts an element, if possible, as if by returning <ph id=\"ph1\">`rdbuf`</ph><ph id=\"ph2\"> -&gt; </ph><bpt id=\"p1\">[</bpt>sgetc<ept id=\"p1\">](../standard-library/basic-streambuf-class.md#basic_streambuf__sgetc)</ept>.","pos":[19376,19548],"source":"The unformatted input function extracts an element, if possible, as if by returning `rdbuf` -> [sgetc](../standard-library/basic-streambuf-class.md#basic_streambuf__sgetc)."},{"content":"Otherwise, it returns <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>eof<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>.","pos":[19549,19654],"source":" Otherwise, it returns **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof)."},{"pos":[19664,19671],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20073,20134],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__putback\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::putback","linkify":"<a name=\"basic_istream__putback\"></a>  basic_istream::putback","source":"<a name=\"basic_istream__putback\"></a>  basic_istream::putback"},{"content":"Puts a specified character into the stream.","pos":[20138,20181]},{"pos":[20259,20269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A character to put back into the stream.","pos":[20281,20321]},{"pos":[20331,20343],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20347,20372],"content":"The stream ( <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>).","source":"The stream ( **\\*this**)."},{"pos":[20382,20389],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">[</bpt>unformatted input function<ept id=\"p1\">](../standard-library/basic-istream-class.md)</ept> puts back <ph id=\"ph1\">`Ch`</ph>, if possible, as if by calling <bpt id=\"p2\">[</bpt>rdbuf<ept id=\"p2\">](../standard-library/basic-ios-class.md#basic_ios__rdbuf)</ept><ph id=\"ph2\">`-&gt;`</ph><bpt id=\"p3\">[</bpt>sputbackc<ept id=\"p3\">](../standard-library/basic-streambuf-class.md#basic_streambuf__sputbackc)</ept>.","pos":[20393,20669],"source":"The [unformatted input function](../standard-library/basic-istream-class.md) puts back `Ch`, if possible, as if by calling [rdbuf](../standard-library/basic-ios-class.md#basic_ios__rdbuf)`->`[sputbackc](../standard-library/basic-streambuf-class.md#basic_streambuf__sputbackc)."},{"content":"If rdbuf is a null pointer, or if the call to <ph id=\"ph1\">`sputbackc`</ph> returns <bpt id=\"p1\">**</bpt>traits_type::<ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt>eof<ept id=\"p2\">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>, the function calls <bpt id=\"p3\">[</bpt>setstate<ept id=\"p3\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p4\">**</bpt>badbit<ept id=\"p4\">**</ept>).","pos":[20670,20923],"source":" If rdbuf is a null pointer, or if the call to `sputbackc` returns **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof), the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **badbit**)."},{"content":"In any case, it returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[20924,20959],"source":" In any case, it returns **\\*this**."},{"pos":[20969,20976],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[21311,21366],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__read\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::read","linkify":"<a name=\"basic_istream__read\"></a>  basic_istream::read","source":"<a name=\"basic_istream__read\"></a>  basic_istream::read"},{"content":"Reads a specified number of characters from the stream and stores them in an array.","pos":[21370,21453]},{"content":"This method is potentially unsafe, as it relies on the caller to check that the passed values are correct.","pos":[21460,21566]},{"pos":[21668,21678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The array in which to read the characters.","pos":[21692,21734]},{"content":"The number of characters to read.","pos":[21753,21786]},{"pos":[21796,21808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21812,21834],"content":"The stream ( <ph id=\"ph1\">`*this`</ph>).","source":"The stream ( `*this`)."},{"pos":[21844,21851],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The unformatted input function extracts up to <ph id=\"ph1\">`count`</ph> elements and stores them in the array beginning at _ <ph id=\"ph2\">`Str`</ph>.","pos":[21855,21968],"source":"The unformatted input function extracts up to `count` elements and stores them in the array beginning at _ `Str`."},{"content":"Extraction stops early on end of file, in which case the function calls <bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <ph id=\"ph1\">`failbit`</ph>).","pos":[21969,22124],"source":" Extraction stops early on end of file, in which case the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( `failbit`)."},{"content":"In any case, it returns <ph id=\"ph1\">`*this`</ph>.","pos":[22125,22157],"source":" In any case, it returns `*this`."},{"pos":[22167,22174],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22673,22736],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__readsome\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::readsome","linkify":"<a name=\"basic_istream__readsome\"></a>  basic_istream::readsome","source":"<a name=\"basic_istream__readsome\"></a>  basic_istream::readsome"},{"content":"Reads the specified number of character values.","pos":[22740,22787]},{"content":"This method is potentially unsafe, as it relies on the caller to check that the passed values are correct.","pos":[22794,22900]},{"pos":[22991,23001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The array in which <ph id=\"ph1\">`readsome`</ph> stores the characters it reads.","pos":[23014,23075],"source":" The array in which `readsome` stores the characters it reads."},{"content":"The number of characters to read.","pos":[23093,23126]},{"pos":[23136,23148],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23152,23225],"content":"The number of characters actually read, <bpt id=\"p1\">[</bpt>gcount<ept id=\"p1\">](#basic_istream__gcount)</ept>.","source":"The number of characters actually read, [gcount](#basic_istream__gcount)."},{"pos":[23235,23242],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23246,23367],"content":"This unformatted input function extracts up to <ph id=\"ph1\">`count`</ph> elements from the input stream and stores them in the array <ph id=\"ph2\">`str`</ph>.","source":"This unformatted input function extracts up to `count` elements from the input stream and stores them in the array `str`."},{"content":"This function does not wait for input.","pos":[23374,23412]},{"content":"It reads whatever data is available.","pos":[23413,23449]},{"pos":[23459,23466],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24106,24163],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__seekg\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::seekg","linkify":"<a name=\"basic_istream__seekg\"></a>  basic_istream::seekg","source":"<a name=\"basic_istream__seekg\"></a>  basic_istream::seekg"},{"content":"Moves the read position in a stream.","pos":[24167,24203]},{"pos":[24344,24354],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The absolute position in which to move the read pointer.","pos":[24367,24423]},{"content":"An offset to move the read pointer relative to <ph id=\"ph1\">`way`</ph>.","pos":[24439,24492],"source":" An offset to move the read pointer relative to `way`."},{"content":"One of the <bpt id=\"p1\">[</bpt>ios_base::seekdir<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__seekdir)</ept> enumerations.","pos":[24508,24609],"source":" One of the [ios_base::seekdir](../standard-library/ios-base-class.md#ios_base__seekdir) enumerations."},{"pos":[24619,24631],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24635,24660],"content":"The stream ( <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>).","source":"The stream ( **\\*this**)."},{"pos":[24670,24677],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first member function performs an absolute seek, the second member function performs a relative seek.","pos":[24681,24786]},{"pos":[24794,24927],"content":"[!NOTE]\n Do not use the second member function with text files, because Standard C++ does not support relative seeks in text files.","leadings":["","> "],"nodes":[{"content":"Do not use the second member function with text files, because Standard C++ does not support relative seeks in text files.","pos":[9,131]}]},{"content":"If <bpt id=\"p1\">[</bpt>fail<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__fail)</ept> is false, the first member function calls <bpt id=\"p2\">**</bpt>newpos<ept id=\"p2\">**</ept><ph id=\"ph1\"> = </ph><bpt id=\"p3\">[</bpt>rdbuf<ept id=\"p3\">](../standard-library/basic-ios-class.md#basic_ios__rdbuf)</ept><ph id=\"ph2\"> -&gt; </ph><bpt id=\"p4\">[</bpt>pubseekpos<ept id=\"p4\">](../standard-library/basic-streambuf-class.md#basic_streambuf__pubseekpos)</ept>( <ph id=\"ph3\">`pos`</ph>), for some <bpt id=\"p5\">**</bpt>pos_type<ept id=\"p5\">**</ept> temporary object <bpt id=\"p6\">**</bpt>newpos<ept id=\"p6\">**</ept>.","pos":[24934,25269],"source":"If [fail](../standard-library/basic-ios-class.md#basic_ios__fail) is false, the first member function calls **newpos** = [rdbuf](../standard-library/basic-ios-class.md#basic_ios__rdbuf) -> [pubseekpos](../standard-library/basic-streambuf-class.md#basic_streambuf__pubseekpos)( `pos`), for some **pos_type** temporary object **newpos**."},{"content":"If <bpt id=\"p1\">**</bpt>fail<ept id=\"p1\">**</ept> is false, the second function calls <bpt id=\"p2\">**</bpt>newpos<ept id=\"p2\">**</ept><ph id=\"ph1\"> = </ph><bpt id=\"p3\">**</bpt>rdbuf<ept id=\"p3\">**</ept><ph id=\"ph2\"> -&gt; </ph><bpt id=\"p4\">[</bpt>pubseekoff<ept id=\"p4\">](../standard-library/basic-streambuf-class.md#basic_streambuf__pubseekoff)</ept>( <ph id=\"ph3\">`off`</ph>, <ph id=\"ph4\">`way`</ph>).","pos":[25270,25446],"source":" If **fail** is false, the second function calls **newpos** = **rdbuf** -> [pubseekoff](../standard-library/basic-streambuf-class.md#basic_streambuf__pubseekoff)( `off`, `way`)."},{"content":"In either case, if ( <ph id=\"ph1\">`off_type`</ph>) <bpt id=\"p1\">**</bpt>newpos<ept id=\"p1\">**</ept> == ( <ph id=\"ph2\">`off_type`</ph>)(-1) (the positioning operation fails), the function calls <bpt id=\"p2\">**</bpt>istr<ept id=\"p2\">**</ept>.","pos":[25447,25575],"source":" In either case, if ( `off_type`) **newpos** == ( `off_type`)(-1) (the positioning operation fails), the function calls **istr**."},{"content":"<bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p2\">**</bpt>failbit<ept id=\"p2\">**</ept>).","pos":[25576,25661],"source":"[setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**)."},{"content":"Both functions return <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[25662,25695],"source":" Both functions return **\\*this**."},{"pos":[25702,25809],"content":"If <bpt id=\"p1\">[</bpt>fail<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__fail)</ept> is true, the member functions do nothing.","source":"If [fail](../standard-library/basic-ios-class.md#basic_ios__fail) is true, the member functions do nothing."},{"pos":[25819,25826],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[26173,26232],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__sentry\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::sentry","linkify":"<a name=\"basic_istream__sentry\"></a>  basic_istream::sentry","source":"<a name=\"basic_istream__sentry\"></a>  basic_istream::sentry"},{"content":"The nested class describes an object whose declaration structures the formatted and unformatted input functions.","pos":[26236,26348]},{"content":"class sentry {","pos":[26354,26368]},{"content":"public:","pos":[26374,26381]},{"content":"explicit sentry( basic_istream<ph id=\"ph1\">\\&lt;</ph>Elem, Tr&gt;&amp; _Istr,","pos":[26387,26439],"source":"   explicit sentry(\n   basic_istream\\<Elem, Tr>& _Istr,"},{"content":"bool _Noskip = false); operator bool() const; };","pos":[26445,26499],"source":"   bool _Noskip = false);\n   operator bool() const;\n   };"},{"pos":[26509,26516],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26520,26621],"content":"If <ph id=\"ph1\">`_Istr``.`</ph><bpt id=\"p1\">[</bpt>good<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__good)</ept> is true, the constructor:","source":"If `_Istr``.`[good](../standard-library/basic-ios-class.md#basic_ios__good) is true, the constructor:"},{"content":"Calls <ph id=\"ph1\">`_Istr`</ph>.","pos":[26631,26645],"source":"Calls `_Istr`."},{"content":"<bpt id=\"p1\">[</bpt>tie<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__tie)</ept><ph id=\"ph1\"> -&gt; </ph><bpt id=\"p2\">[</bpt>flush<ept id=\"p2\">](../standard-library/basic-ostream-class.md#basic_ostream__flush)</ept> if <ph id=\"ph2\">`_Istr`</ph>.","pos":[26646,26794],"source":"[tie](../standard-library/basic-ios-class.md#basic_ios__tie) -> [flush](../standard-library/basic-ostream-class.md#basic_ostream__flush) if `_Istr`."},{"content":"<ph id=\"ph1\">`tie`</ph> is not a null pointer","pos":[26795,26822],"source":"`tie` is not a null pointer"},{"content":"Effectively calls <bpt id=\"p1\">[</bpt>ws<ept id=\"p1\">](../standard-library/istream-functions.md#ws)</ept>( <ph id=\"ph1\">`_Istr`</ph>) if <ph id=\"ph2\">`_Istr`</ph>.","pos":[26832,26921],"source":"Effectively calls [ws](../standard-library/istream-functions.md#ws)( `_Istr`) if `_Istr`."},{"content":"<bpt id=\"p1\">[</bpt>flags<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__flags)</ept><bpt id=\"p2\">**</bpt><ph id=\"ph1\">&amp;</ph><ept id=\"p2\">**</ept><bpt id=\"p3\">[</bpt>skipws<ept id=\"p3\">](../standard-library/ios-functions.md#skipws)</ept> is nonzero","pos":[26922,27053],"source":"[flags](../standard-library/ios-base-class.md#ios_base__flags)**&**[skipws](../standard-library/ios-functions.md#skipws) is nonzero"},{"content":"If, after any such preparation, <ph id=\"ph1\">`_Istr`</ph>.","pos":[27060,27100],"source":"If, after any such preparation, `_Istr`."},{"content":"<bpt id=\"p1\">**</bpt>good<ept id=\"p1\">**</ept> is false, the constructor calls <ph id=\"ph1\">`_Istr`</ph>.","pos":[27101,27150],"source":"**good** is false, the constructor calls `_Istr`."},{"content":"<bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p2\">**</bpt>failbit<ept id=\"p2\">**</ept>).","pos":[27151,27236],"source":"[setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**)."},{"content":"In any case, the constructor stores the value returned by <ph id=\"ph1\">`_Istr`</ph>.","pos":[27237,27303],"source":" In any case, the constructor stores the value returned by `_Istr`."},{"content":"<bpt id=\"p1\">**</bpt>good<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>status<ept id=\"p2\">**</ept>.","pos":[27304,27327],"source":"**good** in **status**."},{"content":"A later call to <bpt id=\"p1\">**</bpt>operator bool<ept id=\"p1\">**</ept> delivers this stored value.","pos":[27328,27389],"source":" A later call to **operator bool** delivers this stored value."},{"pos":[27399,27454],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__swap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::swap","linkify":"<a name=\"basic_istream__swap\"></a>  basic_istream::swap","source":"<a name=\"basic_istream__swap\"></a>  basic_istream::swap"},{"pos":[27458,27512],"content":"Exchanges the contents of two <ph id=\"ph1\">`basic_istream`</ph> objects.","source":"Exchanges the contents of two `basic_istream` objects."},{"pos":[27570,27580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An lvalue reference to a <ph id=\"ph1\">`basic_istream`</ph> object.","pos":[27596,27644],"source":" An lvalue reference to a `basic_istream` object."},{"pos":[27654,27661],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The member function calls <bpt id=\"p1\">[</bpt>basic_ios::swap<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__swap)</ept><ph id=\"ph1\">`(`` right``)`</ph>.","pos":[27665,27779],"source":"The member function calls [basic_ios::swap](../standard-library/basic-ios-class.md#basic_ios__swap)`(`` right``)`."},{"content":"It also exchanges the extraction count with the extraction count for <ph id=\"ph1\">` right`</ph>.","pos":[27780,27858],"source":" It also exchanges the extraction count with the extraction count for ` right`."},{"pos":[27868,27923],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__sync\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::sync","linkify":"<a name=\"basic_istream__sync\"></a>  basic_istream::sync","source":"<a name=\"basic_istream__sync\"></a>  basic_istream::sync"},{"content":"Synchronizes the input device associated with the stream with the stream's buffer.","pos":[27927,28009]},{"pos":[28046,28058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"If <bpt id=\"p1\">[</bpt>rdbuf<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__rdbuf)</ept> is a null pointer, the function returns -1.","pos":[28062,28173],"source":"If [rdbuf](../standard-library/basic-ios-class.md#basic_ios__rdbuf) is a null pointer, the function returns -1."},{"content":"Otherwise, it calls <ph id=\"ph1\">`rdbuf`</ph><ph id=\"ph2\"> -&gt; </ph><bpt id=\"p1\">[</bpt>pubsync<ept id=\"p1\">](../standard-library/basic-streambuf-class.md#basic_streambuf__pubsync)</ept>.","pos":[28174,28286],"source":" Otherwise, it calls `rdbuf` -> [pubsync](../standard-library/basic-streambuf-class.md#basic_streambuf__pubsync)."},{"content":"If that returns -1, the function calls <bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p2\">**</bpt>badbit<ept id=\"p2\">**</ept>) and returns -1.","pos":[28287,28425],"source":" If that returns -1, the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **badbit**) and returns -1."},{"content":"Otherwise, the function returns zero.","pos":[28426,28463]},{"pos":[28473,28530],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__tellg\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::tellg","linkify":"<a name=\"basic_istream__tellg\"></a>  basic_istream::tellg","source":"<a name=\"basic_istream__tellg\"></a>  basic_istream::tellg"},{"content":"Reports the current read position in the stream.","pos":[28534,28582]},{"pos":[28625,28637],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current position in the stream.","pos":[28641,28676]},{"pos":[28686,28693],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <bpt id=\"p1\">[</bpt>fail<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__fail)</ept> is false, the member function returns <bpt id=\"p2\">[</bpt>rdbuf<ept id=\"p2\">](../standard-library/basic-ios-class.md#basic_ios__rdbuf)</ept><ph id=\"ph1\"> -&gt; </ph><bpt id=\"p3\">[</bpt>pubseekoff<ept id=\"p3\">](../standard-library/basic-streambuf-class.md#basic_streambuf__pubseekoff)</ept>(0, <ph id=\"ph2\">`cur`</ph>, <bpt id=\"p4\">**</bpt>in<ept id=\"p4\">**</ept>).","pos":[28697,28974],"source":"If [fail](../standard-library/basic-ios-class.md#basic_ios__fail) is false, the member function returns [rdbuf](../standard-library/basic-ios-class.md#basic_ios__rdbuf) -> [pubseekoff](../standard-library/basic-streambuf-class.md#basic_streambuf__pubseekoff)(0, `cur`, **in**)."},{"content":"Otherwise, it returns <ph id=\"ph1\">`pos_type`</ph>(-1).","pos":[28975,29012],"source":" Otherwise, it returns `pos_type`(-1)."},{"pos":[29022,29029],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[29465,29522],"content":"<bpt id=\"p1\">&lt;a name=\"basic_istream__unget\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  basic_istream::unget","linkify":"<a name=\"basic_istream__unget\"></a>  basic_istream::unget","source":"<a name=\"basic_istream__unget\"></a>  basic_istream::unget"},{"content":"Puts the most recently read character back into the stream.","pos":[29526,29585]},{"pos":[29644,29656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29660,29685],"content":"The stream ( <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>).","source":"The stream ( **\\*this**)."},{"pos":[29695,29702],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">[</bpt>unformatted input function<ept id=\"p1\">](../standard-library/basic-istream-class.md)</ept> puts back the previous element in the stream, if possible, as if by calling <ph id=\"ph1\">`rdbuf`</ph><ph id=\"ph2\"> -&gt; </ph><bpt id=\"p2\">[</bpt>sungetc<ept id=\"p2\">](../standard-library/basic-streambuf-class.md#basic_streambuf__sungetc)</ept>.","pos":[29706,29951],"source":"The [unformatted input function](../standard-library/basic-istream-class.md) puts back the previous element in the stream, if possible, as if by calling `rdbuf` -> [sungetc](../standard-library/basic-streambuf-class.md#basic_streambuf__sungetc)."},{"content":"If <bpt id=\"p1\">[</bpt>rdbuf<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__rdbuf)</ept> is a null pointer, or if the call to <ph id=\"ph1\">`sungetc`</ph> returns <bpt id=\"p2\">**</bpt>traits_type::<ept id=\"p2\">**</ept><bpt id=\"p3\">[</bpt>eof<ept id=\"p3\">](../standard-library/basic-ios-class.md#basic_ios__eof)</ept>, the function calls <bpt id=\"p4\">[</bpt>setstate<ept id=\"p4\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p5\">**</bpt>badbit<ept id=\"p5\">**</ept>).","pos":[29952,30257],"source":" If [rdbuf](../standard-library/basic-ios-class.md#basic_ios__rdbuf) is a null pointer, or if the call to `sungetc` returns **traits_type::**[eof](../standard-library/basic-ios-class.md#basic_ios__eof), the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **badbit**)."},{"content":"In any case, it returns <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>this<ept id=\"p1\">**</ept>.","pos":[30258,30293],"source":" In any case, it returns **\\*this**."},{"pos":[30300,30445],"content":"For information on how <ph id=\"ph1\">`unget`</ph> might fail, see <bpt id=\"p1\">[</bpt>basic_streambuf::sungetc<ept id=\"p1\">](../standard-library/basic-streambuf-class.md#basic_streambuf__sungetc)</ept>.","source":"For information on how `unget` might fail, see [basic_streambuf::sungetc](../standard-library/basic-streambuf-class.md#basic_streambuf__sungetc)."},{"pos":[30455,30462],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30852,30860],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Thread Safety in the C++ Standard Library<ept id=\"p1\">](../standard-library/thread-safety-in-the-cpp-standard-library.md)</ept><ph id=\"ph1\"> </ph>","pos":[30864,30974],"source":"[Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md) "},{"content":"<bpt id=\"p1\"> [</bpt>iostream Programming<ept id=\"p1\">](../standard-library/iostream-programming.md)</ept><ph id=\"ph1\"> </ph>","pos":[30977,31046],"source":" [iostream Programming](../standard-library/iostream-programming.md) "},{"content":"<bpt id=\"p1\"> [</bpt>iostreams Conventions<ept id=\"p1\">](../standard-library/iostreams-conventions.md)</ept>","pos":[31049,31119],"source":" [iostreams Conventions](../standard-library/iostreams-conventions.md)"}],"content":"---\ntitle: \"basic_istream Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"basic_istream\"\n  - \"istream/std::basic_istream\"\n  - \"std::basic_istream\"\n  - \"std.basic_istream\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"basic_istream class\"\nms.assetid: c7c27111-de6d-42b4-95a3-a7e65259bf17\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# basic_istream Class\nDescribes an object that controls extraction of elements and encoded objects from a stream buffer with elements of type `Elem`, also known as [char_type](../standard-library/basic-ios-class.md#basic_ios__char_type), whose character traits are determined by the class *Tr*, also known as [traits_type](../standard-library/basic-ios-class.md#basic_ios__traits_type).  \n  \n## Syntax  \n  \n```  \ntemplate <class Elem, class Tr = char_traits<Elem>>  \nclass basic_istream : virtual public basic_ios<Elem, Tr>  \n```  \n  \n## Remarks  \n Most of the member functions that overload [operator>>](#basic_istream__operator_gt__gt_) are formatted input functions. They follow the pattern:  \n  \n```cpp  \niostate state = goodbit;\nconst sentry ok(*this);\n\nif (ok)\n{\n    try\n    {\n        /*extract elements and convert\n            accumulate flags in state.\n            store a successful conversion*/\n    }\n    catch (...)\n    {\n        try\n        {\n            setstate(badbit);\n\n        }\n        catch (...)\n        {\n        }\n        if ((exceptions()& badbit) != 0)\n            throw;\n    }\n}\nsetstate(state);\n\nreturn (*this);\n```  \n  \n Many other member functions are unformatted input functions. They follow the pattern:  \n  \n```cpp  \niostate state = goodbit;\ncount = 0;    // the value returned by gcount  \nconst sentry ok(*this, true);\n\nif (ok)\n{\n    try\n    {\n        /* extract elements and deliver\n            count extracted elements in count\n            accumulate flags in state */\n    }\n    catch (...)\n    {\n        try\n        {\n            setstate(badbit);\n\n        }\n        catch (...)\n        {\n        }\n        if ((exceptions()& badbit) != 0)\n            throw;\n    }\n}\nsetstate(state);\n```  \n  \n Both groups of functions call [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **eofbit**) if they encounter end of file while extracting elements.  \n  \n An object of class `basic_istream`< `Elem`, *Tr*> stores:  \n  \n-   A virtual public base object of class [basic_ios](../standard-library/basic-ios-class.md)< `Elem`, *Tr*> `.`  \n  \n-   An extraction count for the last unformatted input operation (called **count** in the previous code).  \n  \n## Example  \n See the example for [basic_ifstream Class](../standard-library/basic-ifstream-class.md) to learn more about input streams.  \n  \n### Constructors  \n  \n|||  \n|-|-|  \n|[basic_istream](#basic_istream__basic_istream)|Constructs an object of type `basic_istream`.|  \n  \n### Member Functions  \n  \n|||  \n|-|-|  \n|[gcount](#basic_istream__gcount)|Returns the number of characters read during the last unformatted input.|  \n|[get](#basic_istream__get)|Reads one or more characters from the input stream.|  \n|[getline](#basic_istream__getline)|Reads a line from the input stream.|  \n|[ignore](#basic_istream__ignore)|Causes a number of elements to be skipped from the current read position.|  \n|[peek](#basic_istream__peek)|Returns the next character to be read.|  \n|[putback](#basic_istream__putback)|Puts a specified character into the stream.|  \n|[read](#basic_istream__read)|Reads a specified number of characters from the stream and stores them in an array.|  \n|[readsome](#basic_istream__readsome)|Read from buffer only.|  \n|[seekg](#basic_istream__seekg)|Moves the read position in a stream.|  \n|[sentry](#basic_istream__sentry)|The nested class describes an object whose declaration structures the formatted input functions and the unformatted input functions.|  \n|[swap](#basic_istream__swap)|Exchanges this `basic_istream` object for the provided `basic_istream` object parameter.|  \n|[sync](#basic_istream__sync)|Synchronizes the input device associated with the stream with the stream's buffer.|  \n|[tellg](#basic_istream__tellg)|Reports the current read position in the stream.|  \n|[unget](#basic_istream__unget)|Puts the most recently read character back into the stream.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator>>](#basic_istream__operator_gt__gt_)|Calls a function on the input stream or reads formatted data from the input stream.|  \n|[operator=](#basic_istream__operator_eq)|Assigns the `basic_istream` on the right side of the operator to this object. This is a move assignment involving an `rvalue` reference that does not leave a copy behind.|  \n  \n## Requirements  \n **Header:** \\<istream>  \n  \n **Namespace:** std  \n  \n##  <a name=\"basic_istream__basic_istream\"></a>  basic_istream::basic_istream  \n Constructs an object of type `basic_istream`.  \n  \n```  \nexplicit basic_istream(\n    basic_streambuf<Elem, Tr>* strbuf,  \n    bool _Isstd = false);\n\nbasic_istream(basic_istream&& right);\n```  \n  \n### Parameters  \n ` strbuf`  \n An object of type [basic_streambuf](../standard-library/basic-streambuf-class.md).  \n  \n `_Isstd`  \n `true` if this is a standard stream; otherwise, `false`.  \n  \n ` right`  \n A `basic_istream` object to copy.  \n  \n### Remarks  \n The first constructor initializes the base class by calling [init](../standard-library/basic-ios-class.md#basic_ios__init)(_S `trbuf`). It also stores zero in the extraction count. For more information about this extraction count, see the Remarks section of the [basic_istream Class](../standard-library/basic-istream-class.md) overview topic.  \n  \n The second constructor initializes the base class by calling `move``( right)`. It also stores _R `ight.gcount()` in the extraction count and stores zero in the extraction count for _R `ight`.  \n  \n### Example  \n  See the example for [basic_ifstream::basic_ifstream](../standard-library/basic-ifstream-class.md#basic_ifstream__basic_ifstream) to learn more about input streams.  \n  \n##  <a name=\"basic_istream__gcount\"></a>  basic_istream::gcount  \n Returns the number of characters read during the last unformatted input.  \n  \n```  \nstreamsize gcount() const;\n```  \n  \n### Return Value  \n The extraction count.  \n  \n### Remarks  \n Use [basic_istream::get](#basic_istream__get) to read unformatted characters.  \n  \n### Example  \n  \n```cpp  \n// basic_istream_gcount.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )   \n{  \n   cout << \"Type the letter 'a': \";  \n  \n   ws( cin );  \n   char c[10];  \n  \n   cin.get( &c[0],9 );  \n   cout << c << endl;  \n  \n   cout << cin.gcount( ) << endl;  \n}  \n```  \n  \n```Output  \n  \na  \n  \n```  \n  \n```Output  \n  \n      aType the letter 'a':  \na  \n1  \n```  \n  \n##  <a name=\"basic_istream__get\"></a>  basic_istream::get  \n Reads one or more characters from the input stream.  \n  \n```  \nint_type get();\n\nbasic_istream<Elem, Tr>& get(Elem& Ch);\nbasic_istream<Elem, Tr>& get(Elem* str, streamsize count);\nbasic_istream<Elem, Tr>& get(Elem* str, streamsize count, Elem Delim);\n\nbasic_istream<Elem, Tr>& get(basic_streambuf<Elem, Tr>& strbuf);\nbasic_istream<Elem, Tr>& get(basic_streambuf<Elem, Tr>& strbuf, Elem Delim);\n```  \n  \n### Parameters  \n ` count`  \n The number of characters to read from `strbuf`.  \n  \n `Delim`  \n The character that should terminate the read if it is encountered before ` count`.  \n  \n ` str`  \n A string in which to write.  \n  \n `Ch`  \n A character to get.  \n  \n ` strbuf`  \n A buffer in which to write.  \n  \n### Return Value  \n The parameterless form of get returns the element read as an integer or end of file. The remaining forms return the stream (* `this`).  \n  \n### Remarks  \n The first of these unformatted input functions extracts an element, if possible, as if by returning `rdbuf`-> `sbumpc`. Otherwise, it returns **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof). If the function extracts no element, it calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**).  \n  \n The second function extracts the [int_type](../standard-library/basic-ios-class.md#basic_ios__int_type) element `meta` the same way. If `meta` compares equal to **traits_type::eof**, the function calls `setstate`( **failbit**). Otherwise, it stores **traits_type::**[to_char_type](../standard-library/char-traits-struct.md#char_traits__to_char_type)( `meta`) in `Ch`. The function returns **\\*this**.  \n  \n The third function returns **get**(_ *Str*, ` count`, `widen`('\\ **n**')).  \n  \n The fourth function extracts up to ` count` - 1 elements and stores them in the array beginning at _ *Str*. It always stores `char_type` after any extracted elements it stores. In order of testing, extraction stops:  \n  \n-   At end of file.  \n  \n-   After the function extracts an element that compares equal to `Delim`, in which case the element is put back to the controlled sequence.  \n  \n-   After the function extracts ` count` - 1 elements.  \n  \n If the function extracts no elements, it calls `setstate`( **failbit**). In any case, it returns **\\*this**.  \n  \n The fifth function returns **get**( **strbuf**, `widen`('\\ **n**')).  \n  \n The sixth function extracts elements and inserts them in **strbuf**. Extraction stops on end-of-file or on an element that compares equal to _ *Delim,* which is not extracted. It also stops, without extracting the element in question, if an insertion fails or throws an exception (which is caught but not rethrown). If the function extracts no elements, it calls `setstate`( **failbit**). In any case, the function returns **\\*this**.  \n  \n### Example  \n  \n```cpp  \n// basic_istream_get.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )   \n{  \n   char c[10];  \n  \n   c[0] = cin.get( );  \n   cin.get( c[1] );  \n   cin.get( &c[2],3 );  \n   cin.get( &c[4], 4, '7' );  \n  \n   cout << c << endl;  \n}  \n```  \n  \n```Output  \n  \n1111  \n```  \n  \n##  <a name=\"basic_istream__getline\"></a>  basic_istream::getline  \n Gets a line from the input stream.  \n  \n```  \nbasic_istream<Elem, Tr>& getline(\n    char_type* str,   \n    streamsize count);\n\nbasic_istream<Elem, Tr>& getline(\n    char_type* str,   \n    streamsize count,   \n    char_type Delim);\n```  \n  \n### Parameters  \n ` count`  \n The number of characters to read from **strbuf**.  \n  \n `Delim`  \n The character that should terminate the read if it is encountered before ` count`.  \n  \n ` str`  \n A string in which to write.  \n  \n### Return Value  \n The stream ( **\\*this**).  \n  \n### Remarks  \n The first of these unformatted input functions returns **getline**(_ *Str*, ` count`, `widen`(' `\\`**n**')).  \n  \n The second function extracts up to ` count` - 1 elements and stores them in the array beginning at _ *Str*. It always stores the string termination character after any extracted elements it stores. In order of testing, extraction stops:  \n  \n-   At end of file.  \n  \n-   After the function extracts an element that compares equal to `Delim`, in which case the element is neither put back nor appended to the controlled sequence.  \n  \n-   After the function extracts ` count` - 1 elements.  \n  \n If the function extracts no elements or ` count` - 1 elements, it calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**). In any case, it returns **\\*this**.  \n  \n### Example  \n  \n```cpp  \n// basic_istream_getline.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )   \n{  \n   char c[10];  \n  \n   cin.getline( &c[0], 5, '2' );  \n   cout << c << endl;  \n}  \n```  \n  \n```Output  \n  \n121  \n```  \n  \n##  <a name=\"basic_istream__ignore\"></a>  basic_istream::ignore  \n Causes a number of elements to be skipped from the current read position.  \n  \n```  \nbasic_istream<Elem, Tr>& ignore(\n    streamsize count = 1,  \n    int_type Delim = traits_type::eof());\n```  \n  \n### Parameters  \n ` count`  \n The number of elements to skip from the current read position.  \n  \n `Delim`  \n The element that, if encountered before count, causes **ignore** to return and allowing all elements after `Delim` to be read.  \n  \n### Return Value  \n The stream ( **\\*this**).  \n  \n### Remarks  \n The unformatted input function extracts up to ` count` elements and discards them. If ` count` equals **numeric_limits\\<int>::max**, however, it is taken as arbitrarily large. Extraction stops early on end of file or on an element `Ch` such that **traits_type::**[to_int_type](../standard-library/char-traits-struct.md#char_traits__to_int_type)( `Ch`) compares equal to _ *Delim* (which is also extracted). The function returns **\\*this**.  \n  \n### Example  \n  \n```cpp  \n// basic_istream_ignore.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nint main( )   \n{  \n   using namespace std;  \n   char chararray[10];  \n   cout << \"Type 'abcdef': \";  \n   cin.ignore( 5, 'c' );  \n   cin >> chararray;  \n   cout << chararray;  \n}  \n```  \n  \n```Output  \n  \nabcdef  \n  \n```  \n  \n```Output  \n  \nabcdefdef  \n```  \n  \n##  <a name=\"basic_istream__operator_gt__gt_\"></a>  basic_istream::operator&gt;&gt;\n  \nCalls a function on the input stream or reads formatted data from the input stream.  \n    \n```  \nbasic_istream& operator>>(basic_istream& (* Pfn)(basic_istream&));\nbasic_istream& operator>>(ios_base& (* Pfn)(ios_base&));\nbasic_istream& operator>>(basic_ios<Elem, Tr>& (* Pfn)(basic_ios<Elem, Tr>&));  \nbasic_istream& operator>>(basic_streambuf<Elem, Tr>* strbuf);\nbasic_istream& operator>>(bool& val);\nbasic_istream& operator>>(short& val);\nbasic_istream& operator>>(unsigned short& val);\nbasic_istream& operator>>(int& val);\nbasic_istream& operator>>(unsigned int& val);\nbasic_istream& operator>>(long& val);\nbasic_istream& operator>>(unsigned long& val);\nbasic_istream& operator>>(long long& val);\nbasic_istream& operator>>(unsigned long long& val);\nbasic_istream& operator>>(void *& val);\nbasic_istream& operator>>(float& val);\nbasic_istream& operator>>(double& val);\nbasic_istream& operator>>(long double& val);\n```  \n  \n### Parameters  \n `Pfn`  \n A function pointer.  \n  \n ` strbuf`  \n An object of type **stream_buf**.  \n  \n ` val`  \n The value to read from the stream.  \n  \n### Return Value  \n The stream ( **\\*this**).  \n  \n### Remarks  \n The `<istream>` header also defines several global extraction operators. For more information, see [operator>> (\\<istream>)](../standard-library/istream-operators.md#operator_gt__gt_).  \n  \n The first member function ensures that an expression of the form **istr** >> `ws` calls [ws](../standard-library/istream-functions.md#ws)( **istr**), and then returns **\\*this**. The second and third functions ensure that other manipulators, such as [hex](../standard-library/ios-functions.md#hex), behave similarly. The remaining functions constitute the formatted input functions.  \n  \n The function:  \n  \n```  \nbasic_istream& operator>>(\n    basic_streambuf<Elem, Tr>* strbuf);\n```  \n  \n extracts elements, if _ *Strbuf* is not a null pointer, and inserts them in ` strbuf`. Extraction stops on end of file. It also stops without extracting the element in question, if an insertion fails or throws an exception (which is caught but not rethrown). If the function extracts no elements, it calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**). In any case, the function returns **\\*this**.  \n  \n The function:  \n  \n```  \nbasic_istream& operator>>(bool& val);\n```  \n  \n extracts a field and converts it to a Boolean value by calling [use_facet](../standard-library/basic-filebuf-class.md#basic_filebuf__open) < `num_get`\\< **Elem**, **InIt**>( [getloc](../standard-library/ios-base-class.md#ios_base__getloc)). [get](../standard-library/ios-base-class.md#ios_base__getloc)( **InIt**( [rdbuf](../standard-library/basic-ios-class.md#basic_ios__rdbuf)), `Init`(0), **\\*this**, `getloc`, ` val`). Here, **InIt** is defined as [istreambuf_iterator](../standard-library/istreambuf-iterator-class.md)\\< **Elem**, **Tr**>. The function returns **\\*this**.  \n  \n The functions:  \n  \n```  \nbasic_istream& operator>>(short& val);\nbasic_istream& operator>>(unsigned short& val);\nbasic_istream& operator>>(int& val);\nbasic_istream& operator>>(unsigned int& val);\nbasic_istream& operator>>(long& val);\nbasic_istream& operator>>(unsigned long& val); \nbasic_istream& operator>>(long long& val);\nbasic_istream& operator>>(unsigned long long& val); \nbasic_istream& operator>>(void *& val);\n```  \n  \n each extract a field and convert it to a numeric value by calling `use_facet`< `num_get`\\< **Elem**, **InIt**>( `getloc`). [get](#basic_istream__get)( **InIt**( `rdbuf`), `Init`(0), **\\*this**, `getloc`, ` val`). Here, **InIt** is defined as `istreambuf_iterator`\\< **Elem**, **Tr**>, and ` val` has type **long***,*`unsigned long`*,* or **void \\*** as needed.  \n  \n If the converted value cannot be represented as the type of ` val`, the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**). In any case, the function returns **\\*this**.  \n  \n The functions:  \n  \n```  \nbasic_istream& operator>>(float& val);\nbasic_istream& operator>>(double& val);\nbasic_istream& operator>>(long double& val);\n```  \n  \n each extract a field and convert it to a numeric value by calling `use_facet`< `num_get`\\< **Elem**, **InIt**>( `getloc`). **get**( **InIt**( `rdbuf`), `Init`(0), **\\*this**, `getloc`, ` val`). Here, **InIt** is defined as `istreambuf_iterator`\\< **Elem**, **Tr**>, and ` val` has type **double** or `long double` as needed.  \n  \n If the converted value cannot be represented as the type of ` val`, the function calls `setstate`( **failbit**). In any case, it returns **\\*this**.  \n  \n### Example  \n  \n```cpp  \n// istream_basic_istream_op_is.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n  \nusing namespace std;  \n  \nios_base& hex2( ios_base& ib )   \n{  \n   ib.unsetf( ios_base::dec );  \n   ib.setf( ios_base::hex );  \n   return ib;  \n}  \n  \nbasic_istream<char, char_traits<char> >& somefunc(basic_istream<char, char_traits<char> > &i)  \n{  \n   if ( i == cin )   \n   {  \n      cerr << \"i is cin\" << endl;  \n   }  \n   return i;  \n}  \n  \nint main( )   \n{  \n   int i = 0;  \n   cin >> somefunc;  \n   cin >> i;  \n   cout << i << endl;  \n   cin >> hex2;  \n   cin >> i;  \n   cout << i << endl;  \n}  \n```  \n  \n##  <a name=\"basic_istream__operator_eq\"></a>  basic_istream::operator=  \n Assigns the `basic_istream` on the right side of the operator to this object. This is a move assignment involving an `rvalue` reference that does not leave a copy behind.  \n  \n```  \nbasic_istream& operator=(basic_istream&& right);\n```  \n  \n### Parameters  \n ` right`  \n An `rvalue` reference to a `basic_ifstream` object.  \n  \n### Return Value  \n Returns *this.  \n  \n### Remarks  \n The member operator calls swap `( right)`.  \n  \n##  <a name=\"basic_istream__peek\"></a>  basic_istream::peek  \n Returns the next character to be read.  \n  \n```  \nint_type peek();\n```  \n  \n### Return Value  \n The next character that will be read.  \n  \n### Remarks  \n The unformatted input function extracts an element, if possible, as if by returning `rdbuf` -> [sgetc](../standard-library/basic-streambuf-class.md#basic_streambuf__sgetc). Otherwise, it returns **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof).  \n  \n### Example  \n  \n```cpp  \n// basic_istream_peek.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )   \n{  \n   char c[10], c2;  \n   cout << \"Type 'abcde': \";  \n  \n   c2 = cin.peek( );  \n   cin.getline( &c[0], 9 );  \n  \n   cout << c2 << \" \" << c << endl;  \n}  \n```  \n  \n```Output  \n  \nabcde  \n  \n```  \n  \n```Output  \n  \n      abcdeType 'abcde': abcde  \na abcde  \n```  \n  \n##  <a name=\"basic_istream__putback\"></a>  basic_istream::putback  \n Puts a specified character into the stream.  \n  \n```  \nbasic_istream<Elem, Tr>& putback(\n    char_type Ch);\n```  \n  \n### Parameters  \n `Ch`  \n A character to put back into the stream.  \n  \n### Return Value  \n The stream ( **\\*this**).  \n  \n### Remarks  \n The [unformatted input function](../standard-library/basic-istream-class.md) puts back `Ch`, if possible, as if by calling [rdbuf](../standard-library/basic-ios-class.md#basic_ios__rdbuf)`->`[sputbackc](../standard-library/basic-streambuf-class.md#basic_streambuf__sputbackc). If rdbuf is a null pointer, or if the call to `sputbackc` returns **traits_type::**[eof](../standard-library/char-traits-struct.md#char_traits__eof), the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **badbit**). In any case, it returns **\\*this**.  \n  \n### Example  \n  \n```cpp  \n// basic_istream_putback.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )   \n{  \n   char c[10], c2, c3;  \n  \n   c2 = cin.get( );  \n   c3 = cin.get( );  \n   cin.putback( c2 );  \n   cin.getline( &c[0], 9 );  \n   cout << c << endl;  \n}  \n```  \n  \n```Output  \n  \nqwq  \n```  \n  \n##  <a name=\"basic_istream__read\"></a>  basic_istream::read  \n Reads a specified number of characters from the stream and stores them in an array.  \n  \n This method is potentially unsafe, as it relies on the caller to check that the passed values are correct.  \n  \n```  \nbasic_istream<Elem, Tr>& read(\n    char_type* str,   \n    streamsize count);\n```  \n  \n### Parameters  \n ` str`  \n The array in which to read the characters.  \n  \n ` count`  \n The number of characters to read.  \n  \n### Return Value  \n The stream ( `*this`).  \n  \n### Remarks  \n The unformatted input function extracts up to `count` elements and stores them in the array beginning at _ `Str`. Extraction stops early on end of file, in which case the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( `failbit`). In any case, it returns `*this`.  \n  \n### Example  \n  \n```cpp  \n// basic_istream_read.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nint main()  \n{  \n    char c[10];  \n    int count = 5;  \n  \n    cout << \"Type 'abcde': \";  \n  \n    // Note: cin::read is potentially unsafe, consider  \n    // using cin::_Read_s instead.  \n    cin.read(&c[0], count);  \n    c[count] = 0;  \n  \n    cout << c << endl;  \n}  \n```  \n  \n```Output  \n  \nabcde  \n  \n```  \n  \n```Output  \n  \n      abcdeType 'abcde': abcde  \nabcde  \n```  \n  \n##  <a name=\"basic_istream__readsome\"></a>  basic_istream::readsome  \n Reads the specified number of character values.  \n  \n This method is potentially unsafe, as it relies on the caller to check that the passed values are correct.  \n  \n```  \nstreamsize readsome(\n    char_type* str,  \n    streamsize count);\n```  \n  \n### Parameters  \n `str`  \n The array in which `readsome` stores the characters it reads.  \n  \n `count`  \n The number of characters to read.  \n  \n### Return Value  \n The number of characters actually read, [gcount](#basic_istream__gcount).  \n  \n### Remarks  \n This unformatted input function extracts up to `count` elements from the input stream and stores them in the array `str`.  \n  \n This function does not wait for input. It reads whatever data is available.  \n  \n### Example  \n  \n```cpp  \n// basic_istream_readsome.cpp  \n// compile with: /EHsc /W3  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )  \n{  \n   char c[10];  \n   int count = 5;  \n  \n   cout << \"Type 'abcdefgh': \";  \n  \n   // cin.read blocks until user types input.  \n   // Note: cin::read is potentially unsafe, consider  \n   // using cin::_Read_s instead.  \n   cin.read(&c[0], 2);  \n  \n   // Note: cin::readsome is potentially unsafe, consider  \n   // using cin::_Readsome_s instead.  \n   int n = cin.readsome(&c[0], count);  // C4996  \n   c[n] = 0;  \n   cout << n << \" characters read\" << endl;  \n   cout << c << endl;  \n}  \n```  \n  \n##  <a name=\"basic_istream__seekg\"></a>  basic_istream::seekg  \n Moves the read position in a stream.  \n  \n```  \nbasic_istream<Elem, Tr>& seekg(pos_type pos);\n\nbasic_istream<Elem, Tr>& seekg(off_type off, ios_base::seekdir way);\n```  \n  \n### Parameters  \n `pos`  \n The absolute position in which to move the read pointer.  \n  \n `off`  \n An offset to move the read pointer relative to `way`.  \n  \n `way`  \n One of the [ios_base::seekdir](../standard-library/ios-base-class.md#ios_base__seekdir) enumerations.  \n  \n### Return Value  \n The stream ( **\\*this**).  \n  \n### Remarks  \n The first member function performs an absolute seek, the second member function performs a relative seek.  \n  \n> [!NOTE]\n>  Do not use the second member function with text files, because Standard C++ does not support relative seeks in text files.  \n  \n If [fail](../standard-library/basic-ios-class.md#basic_ios__fail) is false, the first member function calls **newpos** = [rdbuf](../standard-library/basic-ios-class.md#basic_ios__rdbuf) -> [pubseekpos](../standard-library/basic-streambuf-class.md#basic_streambuf__pubseekpos)( `pos`), for some **pos_type** temporary object **newpos**. If **fail** is false, the second function calls **newpos** = **rdbuf** -> [pubseekoff](../standard-library/basic-streambuf-class.md#basic_streambuf__pubseekoff)( `off`, `way`). In either case, if ( `off_type`) **newpos** == ( `off_type`)(-1) (the positioning operation fails), the function calls **istr**. [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**). Both functions return **\\*this**.  \n  \n If [fail](../standard-library/basic-ios-class.md#basic_ios__fail) is true, the member functions do nothing.  \n  \n### Example  \n  \n```cpp  \n// basic_istream_seekg.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nint main ( )   \n{  \n   using namespace std;  \n   ifstream file;  \n   char c, c1;  \n  \n   file.open( \"basic_istream_seekg.txt\" );  \n   file.seekg(2);   // seek to position 2  \n   file >> c;  \n   cout << c << endl;  \n}  \n```  \n  \n##  <a name=\"basic_istream__sentry\"></a>  basic_istream::sentry  \n The nested class describes an object whose declaration structures the formatted and unformatted input functions.  \n  \nclass sentry {  \n   public:  \n   explicit sentry(\n   basic_istream\\<Elem, Tr>& _Istr,  \n   bool _Noskip = false);\n   operator bool() const;\n   };  \n  \n### Remarks  \n If `_Istr``.`[good](../standard-library/basic-ios-class.md#basic_ios__good) is true, the constructor:  \n  \n-   Calls `_Istr`. [tie](../standard-library/basic-ios-class.md#basic_ios__tie) -> [flush](../standard-library/basic-ostream-class.md#basic_ostream__flush) if `_Istr`. `tie` is not a null pointer  \n  \n-   Effectively calls [ws](../standard-library/istream-functions.md#ws)( `_Istr`) if `_Istr`. [flags](../standard-library/ios-base-class.md#ios_base__flags)**&**[skipws](../standard-library/ios-functions.md#skipws) is nonzero  \n  \n If, after any such preparation, `_Istr`. **good** is false, the constructor calls `_Istr`. [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**). In any case, the constructor stores the value returned by `_Istr`. **good** in **status**. A later call to **operator bool** delivers this stored value.  \n  \n##  <a name=\"basic_istream__swap\"></a>  basic_istream::swap  \n Exchanges the contents of two `basic_istream` objects.  \n  \n```  \nvoid swap(basic_istream& right);\n```  \n  \n### Parameters  \n ` right`  \n An lvalue reference to a `basic_istream` object.  \n  \n### Remarks  \n The member function calls [basic_ios::swap](../standard-library/basic-ios-class.md#basic_ios__swap)`(`` right``)`. It also exchanges the extraction count with the extraction count for ` right`.  \n  \n##  <a name=\"basic_istream__sync\"></a>  basic_istream::sync  \n Synchronizes the input device associated with the stream with the stream's buffer.  \n  \n```  \nint sync();\n```  \n  \n### Return Value  \n If [rdbuf](../standard-library/basic-ios-class.md#basic_ios__rdbuf) is a null pointer, the function returns -1. Otherwise, it calls `rdbuf` -> [pubsync](../standard-library/basic-streambuf-class.md#basic_streambuf__pubsync). If that returns -1, the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **badbit**) and returns -1. Otherwise, the function returns zero.  \n  \n##  <a name=\"basic_istream__tellg\"></a>  basic_istream::tellg  \n Reports the current read position in the stream.  \n  \n```  \npos_type tellg();\n```  \n  \n### Return Value  \n The current position in the stream.  \n  \n### Remarks  \n If [fail](../standard-library/basic-ios-class.md#basic_ios__fail) is false, the member function returns [rdbuf](../standard-library/basic-ios-class.md#basic_ios__rdbuf) -> [pubseekoff](../standard-library/basic-streambuf-class.md#basic_streambuf__pubseekoff)(0, `cur`, **in**). Otherwise, it returns `pos_type`(-1).  \n  \n### Example  \n  \n```cpp  \n// basic_istream_tellg.cpp  \n// compile with: /EHsc  \n#include <iostream>  \n#include <fstream>  \n  \nint main()  \n{  \n    using namespace std;  \n    ifstream file;  \n    char c;  \n    streamoff i;  \n  \n    file.open(\"basic_istream_tellg.txt\");  \n    i = file.tellg();  \n    file >> c;  \n    cout << c << \" \" << i << endl;  \n  \n    i = file.tellg();  \n    file >> c;  \n    cout << c << \" \" << i << endl;  \n}  \n```  \n  \n##  <a name=\"basic_istream__unget\"></a>  basic_istream::unget  \n Puts the most recently read character back into the stream.  \n  \n```  \nbasic_istream<Elem, Tr>& unget();\n```  \n  \n### Return Value  \n The stream ( **\\*this**).  \n  \n### Remarks  \n The [unformatted input function](../standard-library/basic-istream-class.md) puts back the previous element in the stream, if possible, as if by calling `rdbuf` -> [sungetc](../standard-library/basic-streambuf-class.md#basic_streambuf__sungetc). If [rdbuf](../standard-library/basic-ios-class.md#basic_ios__rdbuf) is a null pointer, or if the call to `sungetc` returns **traits_type::**[eof](../standard-library/basic-ios-class.md#basic_ios__eof), the function calls [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **badbit**). In any case, it returns **\\*this**.  \n  \n For information on how `unget` might fail, see [basic_streambuf::sungetc](../standard-library/basic-streambuf-class.md#basic_streambuf__sungetc).  \n  \n### Example  \n  \n```cpp  \n// basic_istream_unget.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )   \n{  \n   char c[10], c2;  \n  \n   cout << \"Type 'abc': \";  \n   c2 = cin.get( );  \n   cin.unget( );  \n   cin.getline( &c[0], 9 );  \n   cout << c << endl;  \n}  \n```  \n  \n```Output  \n  \nabc  \n  \n```  \n  \n```Output  \n  \n      abcType 'abc': abc  \nabc  \n```  \n  \n## See Also  \n [Thread Safety in the C++ Standard Library](../standard-library/thread-safety-in-the-cpp-standard-library.md)   \n [iostream Programming](../standard-library/iostream-programming.md)   \n [iostreams Conventions](../standard-library/iostreams-conventions.md)\n\n"}