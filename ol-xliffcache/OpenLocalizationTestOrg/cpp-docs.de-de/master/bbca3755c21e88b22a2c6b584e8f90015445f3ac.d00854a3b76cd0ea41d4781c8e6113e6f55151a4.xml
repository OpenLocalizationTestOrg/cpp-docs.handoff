{"nodes":[{"pos":[12,81],"content":"-Zc:implicitNoexcept (Implicit Exception Specifiers) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"-Zc:implicitNoexcept (Implicit Exception Specifiers) | Microsoft Docs","pos":[0,69]}]},{"content":"/Zc:implicitNoexcept (Implicit Exception Specifiers)","pos":[704,756]},{"content":"When the <bpt id=\"p1\">**</bpt>/Zc:implicitNoexcept<ept id=\"p1\">**</ept> option is specified, the compiler adds an implicit <bpt id=\"p2\">[</bpt>noexcept<ept id=\"p2\">](../../cpp/noexcept-cpp.md)</ept> exception specifier to compiler-defined special member functions and to user-defined destructors and deallocators.","pos":[757,994],"source":"When the **/Zc:implicitNoexcept** option is specified, the compiler adds an implicit [noexcept](../../cpp/noexcept-cpp.md) exception specifier to compiler-defined special member functions and to user-defined destructors and deallocators."},{"content":"By default, <bpt id=\"p1\">**</bpt>/Zc:implicitNoexcept<ept id=\"p1\">**</ept> is enabled to conform to the ISO C++11 standard.","pos":[995,1080],"source":" By default, **/Zc:implicitNoexcept** is enabled to conform to the ISO C++11 standard."},{"content":"Turning this option off disables implicit <ph id=\"ph1\">`noexcept`</ph> on user-defined destructors and dealloacators and compiler-defined special member functions.","pos":[1081,1226],"source":" Turning this option off disables implicit `noexcept` on user-defined destructors and dealloacators and compiler-defined special member functions."},{"content":"Syntax","pos":[1235,1241]},{"content":"Parameters","pos":[1296,1306]},{"content":"Remarks","pos":[1315,1322]},{"content":"By default, and if <bpt id=\"p1\">**</bpt>/Zc:implicitNoexcept<ept id=\"p1\">**</ept> is specified, the compiler follows section 15.4 of the ISO C++11 standard and implicitly adds a <ph id=\"ph1\">`noexcept`</ph> exception specifier to each implicitly-declared or explicitly defaulted special member function—the default constructor, copy constructor, move constructor, destructor, copy assignment operator, or move assignment operator—and each user-defined destructor or deallocator function.","pos":[1326,1757],"source":"By default, and if **/Zc:implicitNoexcept** is specified, the compiler follows section 15.4 of the ISO C++11 standard and implicitly adds a `noexcept` exception specifier to each implicitly-declared or explicitly defaulted special member function—the default constructor, copy constructor, move constructor, destructor, copy assignment operator, or move assignment operator—and each user-defined destructor or deallocator function."},{"content":"A user-defined deallocator has an implicit <ph id=\"ph1\">`noexcept(true)`</ph> exception specifier.","pos":[1758,1838],"source":" A user-defined deallocator has an implicit `noexcept(true)` exception specifier."},{"content":"For user-defined destructors, the implicit exception specifier is <ph id=\"ph1\">`noexcept(true)`</ph> unless a contained member class or base class has a destructor that is not <ph id=\"ph2\">`noexcept(true)`</ph>.","pos":[1839,2014],"source":" For user-defined destructors, the implicit exception specifier is `noexcept(true)` unless a contained member class or base class has a destructor that is not `noexcept(true)`."},{"content":"For compiler-generated special member functions, if any function directly invoked by this function is effectively <ph id=\"ph1\">`noexcept(false)`</ph>, the implicit exception specifier is <ph id=\"ph2\">`noexcept(false)`</ph>.","pos":[2015,2202],"source":" For compiler-generated special member functions, if any function directly invoked by this function is effectively `noexcept(false)`, the implicit exception specifier is `noexcept(false)`."},{"content":"Otherwise, the implicit exception specifier is <ph id=\"ph1\">`noexcept(true)`</ph>.","pos":[2203,2267],"source":" Otherwise, the implicit exception specifier is `noexcept(true)`."},{"pos":[2274,2448],"content":"The compiler does not generate an implicit exception specifier for functions declared by using explicit <ph id=\"ph1\">`noexcept`</ph> or <ph id=\"ph2\">`throw`</ph> specifiers or a <ph id=\"ph3\">`__declspec(nothrow)`</ph> attribute.","source":"The compiler does not generate an implicit exception specifier for functions declared by using explicit `noexcept` or `throw` specifiers or a `__declspec(nothrow)` attribute."},{"content":"If the option is disabled by specifying <bpt id=\"p1\">**</bpt>/Zc:implicitNoexcept-<ept id=\"p1\">**</ept>, no implicit exception specifiers are generated by the compiler.","pos":[2455,2585],"source":"If the option is disabled by specifying **/Zc:implicitNoexcept-**, no implicit exception specifiers are generated by the compiler."},{"content":"This behavior is the same as Visual Studio 2013, where destructors and deallocators that did not have exception specifiers could have <ph id=\"ph1\">`throw`</ph> statements.","pos":[2586,2739],"source":" This behavior is the same as Visual Studio 2013, where destructors and deallocators that did not have exception specifiers could have `throw` statements."},{"content":"By default, and when <bpt id=\"p1\">**</bpt>/Zc:implicitNoexcept<ept id=\"p1\">**</ept> is specified, if a <ph id=\"ph1\">`throw`</ph> statement is encountered at run time in a function with an implicit <ph id=\"ph2\">`noexcept(true)`</ph> specifier, it causes an immediate invocation of <ph id=\"ph3\">`std::terminate`</ph>, and normal unwinding behavior for exception handlers is not guaranteed.","pos":[2740,3035],"source":" By default, and when **/Zc:implicitNoexcept** is specified, if a `throw` statement is encountered at run time in a function with an implicit `noexcept(true)` specifier, it causes an immediate invocation of `std::terminate`, and normal unwinding behavior for exception handlers is not guaranteed."},{"content":"To help identify this situation, the compiler generates <bpt id=\"p1\">[</bpt>Compiler Warning (level 1) C4297<ept id=\"p1\">](../../error-messages/compiler-warnings/compiler-warning-level-1-c4297.md)</ept>.","pos":[3036,3201],"source":" To help identify this situation, the compiler generates [Compiler Warning (level 1) C4297](../../error-messages/compiler-warnings/compiler-warning-level-1-c4297.md)."},{"content":"If the <ph id=\"ph1\">`throw`</ph> is intentional, we recommend you change your function declaration to have an explicit <ph id=\"ph2\">`noexcept(false)`</ph> specifier instead of using <bpt id=\"p1\">**</bpt>/Zc:implicitNoexcept-<ept id=\"p1\">**</ept>.","pos":[3202,3374],"source":" If the `throw` is intentional, we recommend you change your function declaration to have an explicit `noexcept(false)` specifier instead of using **/Zc:implicitNoexcept-**."},{"content":"This sample shows how a user-defined destructor that has no explicit exception specifier behaves when the <bpt id=\"p1\">**</bpt>/Zc:implicitNoexcept<ept id=\"p1\">**</ept> option is set or disabled.","pos":[3381,3538],"source":"This sample shows how a user-defined destructor that has no explicit exception specifier behaves when the **/Zc:implicitNoexcept** option is set or disabled."},{"content":"To show the behavior when set, compile by using <ph id=\"ph1\">`cl /EHsc /W4 implicitNoexcept.cpp`</ph>.","pos":[3539,3623],"source":" To show the behavior when set, compile by using `cl /EHsc /W4 implicitNoexcept.cpp`."},{"content":"To show the behavior when disabled, compile by using <ph id=\"ph1\">`cl /EHsc /W4 /Zc:implicitNoexcept- implicitNoexcept.cpp`</ph>.","pos":[3624,3735],"source":" To show the behavior when disabled, compile by using `cl /EHsc /W4 /Zc:implicitNoexcept- implicitNoexcept.cpp`."},{"pos":[5637,5739],"content":"When compiled by using the default setting <bpt id=\"p1\">**</bpt>/Zc:implicitNoexcept<ept id=\"p1\">**</ept>, the sample generates this output:","source":"When compiled by using the default setting **/Zc:implicitNoexcept**, the sample generates this output:"},{"pos":[5860,5955],"content":"When compiled by using the setting <bpt id=\"p1\">**</bpt>/Zc:implicitNoexcept-<ept id=\"p1\">**</ept>, the sample generates this output:","source":"When compiled by using the setting **/Zc:implicitNoexcept-**, the sample generates this output:"},{"pos":[6057,6180],"content":"For more information about conformance issues in Visual C++, see <bpt id=\"p1\">[</bpt>Nonstandard Behavior<ept id=\"p1\">](../../cpp/nonstandard-behavior.md)</ept>.","source":"For more information about conformance issues in Visual C++, see [Nonstandard Behavior](../../cpp/nonstandard-behavior.md)."},{"content":"To set this compiler option in the Visual Studio development environment","pos":[6190,6262]},{"content":"Open the project's <bpt id=\"p1\">**</bpt>Property Pages<ept id=\"p1\">**</ept> dialog box.","pos":[6272,6321],"source":"Open the project's **Property Pages** dialog box."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Working with Project Properties<ept id=\"p1\">](../../ide/working-with-project-properties.md)</ept>.","pos":[6322,6419],"source":" For details, see [Working with Project Properties](../../ide/working-with-project-properties.md)."},{"pos":[6429,6457],"content":"Select the <bpt id=\"p1\">**</bpt>C/C++<ept id=\"p1\">**</ept> folder.","source":"Select the **C/C++** folder."},{"pos":[6467,6509],"content":"Select the <bpt id=\"p1\">**</bpt>Command Line<ept id=\"p1\">**</ept> property page.","source":"Select the **Command Line** property page."},{"pos":[6519,6650],"content":"Modify the <bpt id=\"p1\">**</bpt>Additional Options<ept id=\"p1\">**</ept> property to include <bpt id=\"p2\">**</bpt>/Zc:implicitNoexcept<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>/Zc:implicitNoexcept-<ept id=\"p3\">**</ept> and then choose <bpt id=\"p4\">**</bpt>OK<ept id=\"p4\">**</ept>.","source":"Modify the **Additional Options** property to include **/Zc:implicitNoexcept** or **/Zc:implicitNoexcept-** and then choose **OK**."},{"content":"See Also","pos":[6659,6667]},{"content":"/Zc (Conformance)","pos":[6672,6689]},{"content":"noexcept","pos":[6737,6745]},{"content":"Exception Specifications (throw)","pos":[6779,6811]},{"content":"terminate","pos":[6867,6876]}],"content":"---\ntitle: \"-Zc:implicitNoexcept (Implicit Exception Specifiers) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"/Zc:implicitNoexcept\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"/Zc:implicitNoexcept\"\n  - \"Zc:implicitNoexcept\"\n  - \"-Zc:implicitNoexcept\"\nms.assetid: 71807652-6f9d-436b-899e-f52daa6f500b\ncaps.latest.revision: 8\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# /Zc:implicitNoexcept (Implicit Exception Specifiers)\nWhen the **/Zc:implicitNoexcept** option is specified, the compiler adds an implicit [noexcept](../../cpp/noexcept-cpp.md) exception specifier to compiler-defined special member functions and to user-defined destructors and deallocators. By default, **/Zc:implicitNoexcept** is enabled to conform to the ISO C++11 standard. Turning this option off disables implicit `noexcept` on user-defined destructors and dealloacators and compiler-defined special member functions.  \n  \n## Syntax  \n  \n```cpp  \n/Zc:implicitNoexcept[-]  \n```  \n  \n#### Parameters  \n  \n## Remarks  \n By default, and if **/Zc:implicitNoexcept** is specified, the compiler follows section 15.4 of the ISO C++11 standard and implicitly adds a `noexcept` exception specifier to each implicitly-declared or explicitly defaulted special member function—the default constructor, copy constructor, move constructor, destructor, copy assignment operator, or move assignment operator—and each user-defined destructor or deallocator function. A user-defined deallocator has an implicit `noexcept(true)` exception specifier. For user-defined destructors, the implicit exception specifier is `noexcept(true)` unless a contained member class or base class has a destructor that is not `noexcept(true)`. For compiler-generated special member functions, if any function directly invoked by this function is effectively `noexcept(false)`, the implicit exception specifier is `noexcept(false)`. Otherwise, the implicit exception specifier is `noexcept(true)`.  \n  \n The compiler does not generate an implicit exception specifier for functions declared by using explicit `noexcept` or `throw` specifiers or a `__declspec(nothrow)` attribute.  \n  \n If the option is disabled by specifying **/Zc:implicitNoexcept-**, no implicit exception specifiers are generated by the compiler. This behavior is the same as Visual Studio 2013, where destructors and deallocators that did not have exception specifiers could have `throw` statements. By default, and when **/Zc:implicitNoexcept** is specified, if a `throw` statement is encountered at run time in a function with an implicit `noexcept(true)` specifier, it causes an immediate invocation of `std::terminate`, and normal unwinding behavior for exception handlers is not guaranteed. To help identify this situation, the compiler generates [Compiler Warning (level 1) C4297](../../error-messages/compiler-warnings/compiler-warning-level-1-c4297.md). If the `throw` is intentional, we recommend you change your function declaration to have an explicit `noexcept(false)` specifier instead of using **/Zc:implicitNoexcept-**.  \n  \n This sample shows how a user-defined destructor that has no explicit exception specifier behaves when the **/Zc:implicitNoexcept** option is set or disabled. To show the behavior when set, compile by using `cl /EHsc /W4 implicitNoexcept.cpp`. To show the behavior when disabled, compile by using `cl /EHsc /W4 /Zc:implicitNoexcept- implicitNoexcept.cpp`.  \n  \n```  \n// implicitNoexcept.cpp  \n// Compile by using: cl /EHsc /W4 implicitNoexcept.cpp  \n// Compile by using: cl /EHsc /W4 /Zc:implicitNoexcept- implicitNoexcept.cpp  \n  \n#include <iostream>  \n#include <cstdlib>      // for std::exit, EXIT_FAILURE, EXIT_SUCCESS  \n#include <exception>    // for std::set_terminate  \n  \nvoid my_terminate()  \n{  \n    std::cout << \"Unexpected throw caused std::terminate\" << std::endl;  \n    std::cout << \"Exit returning EXIT_FAILURE\" << std::endl;  \n    std::exit(EXIT_FAILURE);  \n}  \n  \nstruct A {  \n    // Explicit noexcept overrides implicit exception specification  \n    ~A() noexcept(false) {  \n        throw 1;  \n    }  \n};  \n  \nstruct B : public A {  \n    // Compiler-generated ~B() definition inherits noexcept(false)  \n    ~B() = default;  \n};  \n  \nstruct C {  \n    // By default, the compiler generates an implicit noexcept(true)  \n    // specifier for this user-defined destructor. To enable it to  \n    // throw an exception, use an explicit noexcept(false) specifier,  \n    // or compile by using /Zc:implicitNoexcept-  \n    ~C() {    \n        throw 1; // C4297, calls std::terminate() at run time  \n    }  \n};  \n  \nstruct D : public C {  \n    // This destructor gets the implicit specifier of its base.  \n    ~D() = default;  \n};  \n  \nint main()  \n{  \n    std::set_terminate(my_terminate);  \n  \n    try  \n    {  \n        {  \n            B b;   \n        }  \n    }  \n    catch (...)  \n    {  \n        // exception should reach here in all cases  \n        std::cout << \"~B Exception caught\" << std::endl;  \n    }  \n    try  \n    {  \n        {  \n            D d;  \n        }  \n    }  \n    catch (...)  \n    {  \n        // exception should not reach here if /Zc:implicitNoexcept  \n        std::cout << \"~D Exception caught\" << std::endl;  \n    }  \n    std::cout << \"Exit returning EXIT_SUCCESS\" << std::endl;  \n    return EXIT_SUCCESS;  \n}  \n  \n```  \n  \n When compiled by using the default setting **/Zc:implicitNoexcept**, the sample generates this output:  \n  \n```Output  \n~B Exception caught  \nUnexpected throw caused std::terminate  \nExit returning EXIT_FAILURE  \n```  \n  \n When compiled by using the setting **/Zc:implicitNoexcept-**, the sample generates this output:  \n  \n```Output  \n~B Exception caught  \n~D Exception caught  \nExit returning EXIT_SUCCESS  \n```  \n  \n For more information about conformance issues in Visual C++, see [Nonstandard Behavior](../../cpp/nonstandard-behavior.md).  \n  \n### To set this compiler option in the Visual Studio development environment  \n  \n1.  Open the project's **Property Pages** dialog box. For details, see [Working with Project Properties](../../ide/working-with-project-properties.md).  \n  \n2.  Select the **C/C++** folder.  \n  \n3.  Select the **Command Line** property page.  \n  \n4.  Modify the **Additional Options** property to include **/Zc:implicitNoexcept** or **/Zc:implicitNoexcept-** and then choose **OK**.  \n  \n## See Also  \n [/Zc (Conformance)](../../build/reference/zc-conformance.md)   \n [noexcept](../../cpp/noexcept-cpp.md)   \n [Exception Specifications (throw)](../../cpp/exception-specifications-throw-cpp.md)   \n [terminate](../../standard-library/exception-functions.md#terminate)"}