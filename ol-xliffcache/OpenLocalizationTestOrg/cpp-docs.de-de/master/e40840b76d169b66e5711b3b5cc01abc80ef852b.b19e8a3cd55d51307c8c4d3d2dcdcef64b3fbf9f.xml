{"nodes":[{"pos":[12,46],"content":"timed_mutex Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"timed_mutex Class | Microsoft Docs","pos":[0,34]}]},{"content":"timed_mutex Class","pos":[569,586]},{"content":"Represents a <bpt id=\"p1\">*</bpt>timed mutex type<ept id=\"p1\">*</ept>.","pos":[587,619],"source":"Represents a *timed mutex type*."},{"content":"Objects of this type are used to enforce mutual exclusion through time-limited blocking within a program.","pos":[620,725]},{"content":"Syntax","pos":[734,740]},{"content":"Members","pos":[781,788]},{"content":"Public Constructors","pos":[798,817]},{"content":"Name","pos":[824,828]},{"content":"Description","pos":[829,840]},{"content":"timed_mutex::timed_mutex Constructor","pos":[879,915]},{"pos":[956,1008],"content":"Constructs a <ph id=\"ph1\">`timed_mutex`</ph> object that's not locked.","source":"Constructs a `timed_mutex` object that's not locked."},{"content":"timed_mutex::~timed_mutex Destructor","pos":[1014,1050]},{"pos":[1095,1160],"content":"Releases any resources that are used by the <ph id=\"ph1\">`timed_mutex`</ph> object.","source":"Releases any resources that are used by the `timed_mutex` object."},{"content":"Public Methods","pos":[1171,1185]},{"content":"Name","pos":[1192,1196]},{"content":"Description","pos":[1197,1208]},{"content":"timed_mutex::lock Method","pos":[1247,1271]},{"pos":[1300,1376],"content":"Blocks the calling thread until the thread obtains ownership of the <ph id=\"ph1\">`mutex`</ph>.","source":"Blocks the calling thread until the thread obtains ownership of the `mutex`."},{"content":"timed_mutex::try_lock Method","pos":[1382,1410]},{"pos":[1443,1504],"content":"Attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the `mutex` without blocking."},{"content":"timed_mutex::try_lock_for Method","pos":[1510,1542]},{"pos":[1579,1653],"content":"Attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph> for a specified time interval.","source":"Attempts to obtain ownership of the `mutex` for a specified time interval."},{"content":"timed_mutex::try_lock_until Method","pos":[1659,1693]},{"pos":[1732,1799],"content":"Attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph> until a specified time.","source":"Attempts to obtain ownership of the `mutex` until a specified time."},{"content":"timed_mutex::unlock Method","pos":[1805,1831]},{"pos":[1862,1896],"content":"Releases ownership of the <ph id=\"ph1\">`mutex`</ph>.","source":"Releases ownership of the `mutex`."},{"content":"Requirements","pos":[1906,1918]},{"pos":[1922,1939],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> mutex","source":"**Header:** mutex"},{"pos":[1946,1964],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[2015,2039],"content":"timed_mutex::lock Method"},{"pos":[2043,2119],"content":"Blocks the calling thread until the thread obtains ownership of the <ph id=\"ph1\">`mutex`</ph>.","source":"Blocks the calling thread until the thread obtains ownership of the `mutex`."},{"content":"Remarks","pos":[2158,2165]},{"pos":[2169,2243],"content":"If the calling thread already owns the <ph id=\"ph1\">`mutex`</ph>, the behavior is undefined.","source":"If the calling thread already owns the `mutex`, the behavior is undefined."},{"pos":[2306,2342],"content":"timed_mutex::timed_mutex Constructor"},{"pos":[2346,2399],"content":"Constructs a <ph id=\"ph1\">`timed_mutex`</ph> object that is not locked.","source":"Constructs a `timed_mutex` object that is not locked."},{"pos":[2497,2533],"content":"timed_mutex::~timed_mutex Destructor"},{"pos":[2537,2596],"content":"Releases any resources that are used by the <ph id=\"ph1\">`mutex`</ph> object.","source":"Releases any resources that are used by the `mutex` object."},{"content":"Remarks","pos":[2638,2645]},{"content":"If the object is locked when the destructor runs, the behavior is undefined.","pos":[2649,2725]},{"pos":[2780,2808],"content":"timed_mutex::try_lock Method"},{"pos":[2812,2873],"content":"Attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the `mutex` without blocking."},{"content":"Return Value","pos":[2916,2928]},{"pos":[2939,3019],"content":"if the method successfully obtains ownership of the <ph id=\"ph1\">`mutex`</ph>; otherwise, <ph id=\"ph2\">`false`</ph>.","source":" if the method successfully obtains ownership of the `mutex`; otherwise, `false`."},{"content":"Remarks","pos":[3029,3036]},{"pos":[3040,3114],"content":"If the calling thread already owns the <ph id=\"ph1\">`mutex`</ph>, the behavior is undefined.","source":"If the calling thread already owns the `mutex`, the behavior is undefined."},{"pos":[3173,3205],"content":"timed_mutex::try_lock_for Method"},{"pos":[3209,3270],"content":"Attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the `mutex` without blocking."},{"content":"Parameters","pos":[3397,3407]},{"content":"A <bpt id=\"p1\">[</bpt>chrono::duration<ept id=\"p1\">](../standard-library/duration-class.md)</ept> object that specifies the maximum amount of time that the method attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph>.","pos":[3425,3594],"source":" A [chrono::duration](../standard-library/duration-class.md) object that specifies the maximum amount of time that the method attempts to obtain ownership of the `mutex`."},{"content":"Return Value","pos":[3604,3616]},{"pos":[3627,3707],"content":"if the method successfully obtains ownership of the <ph id=\"ph1\">`mutex`</ph>; otherwise, <ph id=\"ph2\">`false`</ph>.","source":" if the method successfully obtains ownership of the `mutex`; otherwise, `false`."},{"content":"Remarks","pos":[3717,3724]},{"pos":[3728,3802],"content":"If the calling thread already owns the <ph id=\"ph1\">`mutex`</ph>, the behavior is undefined.","source":"If the calling thread already owns the `mutex`, the behavior is undefined."},{"pos":[3863,3897],"content":"timed_mutex::try_lock_until Method"},{"pos":[3901,3962],"content":"Attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph> without blocking.","source":"Attempts to obtain ownership of the `mutex` without blocking."},{"content":"Parameters","pos":[4144,4154]},{"content":"A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the <ph id=\"ph1\">`mutex`</ph>.","pos":[4172,4294],"source":" A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the `mutex`."},{"content":"Return Value","pos":[4304,4316]},{"pos":[4327,4407],"content":"if the method successfully obtains ownership of the <ph id=\"ph1\">`mutex`</ph>; otherwise, <ph id=\"ph2\">`false`</ph>.","source":" if the method successfully obtains ownership of the `mutex`; otherwise, `false`."},{"content":"Remarks","pos":[4417,4424]},{"pos":[4428,4502],"content":"If the calling thread already owns the <ph id=\"ph1\">`mutex`</ph>, the behavior is undefined.","source":"If the calling thread already owns the `mutex`, the behavior is undefined."},{"pos":[4555,4581],"content":"timed_mutex::unlock Method"},{"pos":[4585,4619],"content":"Releases ownership of the <ph id=\"ph1\">`mutex`</ph>.","source":"Releases ownership of the `mutex`."},{"content":"Remarks","pos":[4660,4667]},{"pos":[4671,4745],"content":"If the calling thread does not own the <ph id=\"ph1\">`mutex`</ph>, the behavior is undefined.","source":"If the calling thread does not own the `mutex`, the behavior is undefined."},{"content":"See Also","pos":[4754,4762]},{"content":"Header Files Reference","pos":[4767,4789]},{"content":"mutex&gt;","pos":[4856,4862],"source":"mutex>"}],"content":"---\ntitle: \"timed_mutex Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"mutex/std::timed_mutex\"\ndev_langs: \n  - \"C++\"\nms.assetid: cd198081-6f38-447a-9dba-e06dfbfafe59\ncaps.latest.revision: 9\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# timed_mutex Class\nRepresents a *timed mutex type*. Objects of this type are used to enforce mutual exclusion through time-limited blocking within a program.  \n  \n## Syntax  \n  \n```\nclass timed_mutex;\n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[timed_mutex::timed_mutex Constructor](#timed_mutex__timed_mutex_constructor)|Constructs a `timed_mutex` object that's not locked.|  \n|[timed_mutex::~timed_mutex Destructor](#timed_mutex___dtortimed_mutex_destructor)|Releases any resources that are used by the `timed_mutex` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[timed_mutex::lock Method](#timed_mutex__lock_method)|Blocks the calling thread until the thread obtains ownership of the `mutex`.|  \n|[timed_mutex::try_lock Method](#timed_mutex__try_lock_method)|Attempts to obtain ownership of the `mutex` without blocking.|  \n|[timed_mutex::try_lock_for Method](#timed_mutex__try_lock_for_method)|Attempts to obtain ownership of the `mutex` for a specified time interval.|  \n|[timed_mutex::try_lock_until Method](#timed_mutex__try_lock_until_method)|Attempts to obtain ownership of the `mutex` until a specified time.|  \n|[timed_mutex::unlock Method](#timed_mutex__unlock_method)|Releases ownership of the `mutex`.|  \n  \n## Requirements  \n **Header:** mutex  \n  \n **Namespace:** std  \n  \n##  <a name=\"timed_mutex__lock_method\"></a>  timed_mutex::lock Method  \n Blocks the calling thread until the thread obtains ownership of the `mutex`.  \n  \n```cpp\nvoid lock();\n```  \n  \n### Remarks  \n If the calling thread already owns the `mutex`, the behavior is undefined.  \n  \n##  <a name=\"timed_mutex__timed_mutex_constructor\"></a>  timed_mutex::timed_mutex Constructor  \n Constructs a `timed_mutex` object that is not locked.  \n  \n```cpp\ntimed_mutex();\n```  \n  \n##  <a name=\"timed_mutex___dtortimed_mutex_destructor\"></a>  timed_mutex::~timed_mutex Destructor  \n Releases any resources that are used by the `mutex` object.  \n  \n```cpp\n~timed_mutex();\n```  \n  \n### Remarks  \n If the object is locked when the destructor runs, the behavior is undefined.  \n  \n##  <a name=\"timed_mutex__try_lock_method\"></a>  timed_mutex::try_lock Method  \n Attempts to obtain ownership of the `mutex` without blocking.  \n  \n```cpp\nbool try_lock();\n```  \n  \n### Return Value  \n `true` if the method successfully obtains ownership of the `mutex`; otherwise, `false`.  \n  \n### Remarks  \n If the calling thread already owns the `mutex`, the behavior is undefined.  \n  \n##  <a name=\"timed_mutex__try_lock_for_method\"></a>  timed_mutex::try_lock_for Method  \n Attempts to obtain ownership of the `mutex` without blocking.  \n  \n```cpp\ntemplate <class Rep, class Period>\nbool try_lock_for(const chrono::duration<Rep, Period>& Rel_time);\n```  \n  \n### Parameters  \n `Rel_time`  \n A [chrono::duration](../standard-library/duration-class.md) object that specifies the maximum amount of time that the method attempts to obtain ownership of the `mutex`.  \n  \n### Return Value  \n `true` if the method successfully obtains ownership of the `mutex`; otherwise, `false`.  \n  \n### Remarks  \n If the calling thread already owns the `mutex`, the behavior is undefined.  \n  \n##  <a name=\"timed_mutex__try_lock_until_method\"></a>  timed_mutex::try_lock_until Method  \n Attempts to obtain ownership of the `mutex` without blocking.  \n  \n```cpp\ntemplate <class Clock, class Duration>\nbool try_lock_for(const chrono::time_point<Clock, Duration>& Abs_time);\n\nbool try_lock_until(const xtime* Abs_time);\n```  \n  \n### Parameters  \n `Abs_time`  \n A point in time that specifies the threshold after which the method no longer attempts to obtain ownership of the `mutex`.  \n  \n### Return Value  \n `true` if the method successfully obtains ownership of the `mutex`; otherwise, `false`.  \n  \n### Remarks  \n If the calling thread already owns the `mutex`, the behavior is undefined.  \n  \n##  <a name=\"timed_mutex__unlock_method\"></a>  timed_mutex::unlock Method  \n Releases ownership of the `mutex`.  \n  \n```cpp\nvoid unlock();\n```  \n  \n### Remarks  \n If the calling thread does not own the `mutex`, the behavior is undefined.  \n  \n## See Also  \n [Header Files Reference](../standard-library/cpp-standard-library-header-files.md)   \n [\\<mutex>](../standard-library/mutex.md)\n\n\n\n"}