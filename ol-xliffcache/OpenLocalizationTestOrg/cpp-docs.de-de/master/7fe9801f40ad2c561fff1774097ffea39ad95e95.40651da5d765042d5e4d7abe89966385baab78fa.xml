{"nodes":[{"pos":[12,45],"content":"CSimpleMap Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CSimpleMap Class | Microsoft Docs","pos":[0,33]}]},{"content":"CSimpleMap Class","pos":[647,663]},{"content":"This class provides support for a simple mapping array.","pos":[664,719]},{"content":"Syntax","pos":[728,734]},{"content":"Parameters","pos":[863,873]},{"content":"The key element type.","pos":[887,908]},{"content":"The value element type.","pos":[925,948]},{"content":"A trait object, defining the equality test for elements of type <ph id=\"ph1\">`T`</ph>.","pos":[967,1035],"source":" A trait object, defining the equality test for elements of type `T`."},{"content":"Members","pos":[1044,1051]},{"content":"Public Typedefs","pos":[1061,1076]},{"content":"Name","pos":[1083,1087]},{"content":"Description","pos":[1088,1099]},{"content":"CSimpleMap::_ArrayElementType","pos":[1138,1167]},{"content":"Typedef for the value type.","pos":[1201,1228]},{"content":"CSimpleMap::_ArrayKeyType","pos":[1234,1259]},{"content":"Typedef for the key type.","pos":[1289,1314]},{"content":"Public Constructors","pos":[1325,1344]},{"content":"Name","pos":[1351,1355]},{"content":"Description","pos":[1356,1367]},{"content":"CSimpleMap::CSimpleMap","pos":[1406,1428]},{"content":"The constructor.","pos":[1455,1471]},{"content":"CSimpleMap::~CSimpleMap","pos":[1477,1500]},{"content":"The destructor.","pos":[1532,1547]},{"content":"Public Methods","pos":[1558,1572]},{"content":"Name","pos":[1579,1583]},{"content":"Description","pos":[1584,1595]},{"content":"CSimpleMap::Add","pos":[1634,1649]},{"content":"Adds a key and associated value to the map array.","pos":[1669,1718]},{"content":"CSimpleMap::FindKey","pos":[1724,1743]},{"content":"Finds a specific key.","pos":[1767,1788]},{"content":"CSimpleMap::FindVal","pos":[1794,1813]},{"content":"Finds a specific value.","pos":[1837,1860]},{"content":"CSimpleMap::GetKeyAt","pos":[1866,1886]},{"content":"Retrieves the specified key.","pos":[1911,1939]},{"content":"CSimpleMap::GetSize","pos":[1945,1964]},{"content":"Returns the number of entries in the mapping array.","pos":[1988,2039]},{"content":"CSimpleMap::GetValueAt","pos":[2045,2067]},{"content":"Retrieves the specified value.","pos":[2094,2124]},{"content":"CSimpleMap::Lookup","pos":[2130,2148]},{"content":"Returns the value associated with the given key.","pos":[2171,2219]},{"content":"CSimpleMap::Remove","pos":[2225,2243]},{"content":"Removes a key and matching value.","pos":[2266,2299]},{"content":"CSimpleMap::RemoveAll","pos":[2305,2326]},{"content":"Removes all keys and values.","pos":[2352,2380]},{"content":"CSimpleMap::RemoveAt","pos":[2386,2406]},{"content":"Removes a specific key and matching value.","pos":[2431,2473]},{"content":"CSimpleMap::ReverseLookup","pos":[2479,2504]},{"content":"Returns the key associated with the given value.","pos":[2534,2582]},{"content":"CSimpleMap::SetAt","pos":[2588,2605]},{"content":"Sets the value associated with the given key.","pos":[2627,2672]},{"content":"CSimpleMap::SetAtIndex","pos":[2678,2700]},{"content":"Sets the specific key and value.","pos":[2727,2759]},{"content":"Remarks","pos":[2769,2776]},{"pos":[2793,2932],"content":"provides support for a simple mapping array of any given type <ph id=\"ph1\">`T`</ph>, managing an unordered array of key elements and their associated values.","source":" provides support for a simple mapping array of any given type `T`, managing an unordered array of key elements and their associated values."},{"content":"The parameter <ph id=\"ph1\">`TEqual`</ph> provides a means of defining an equality function for two elements of type <ph id=\"ph2\">`T`</ph>.","pos":[2939,3041],"source":"The parameter `TEqual` provides a means of defining an equality function for two elements of type `T`."},{"content":"By creating a class similar to <bpt id=\"p1\">[</bpt>CSimpleMapEqualHelper<ept id=\"p1\">](../../atl/reference/csimplemapequalhelper-class.md)</ept>, it is possible to alter the behavior of the equality test for any given array.","pos":[3042,3228],"source":" By creating a class similar to [CSimpleMapEqualHelper](../../atl/reference/csimplemapequalhelper-class.md), it is possible to alter the behavior of the equality test for any given array."},{"content":"For example, when dealing with an array of pointers, it may be useful to define the equality as depending on the values the pointers reference.","pos":[3229,3372]},{"content":"The default implementation utilizes <bpt id=\"p1\">**</bpt>operator==()<ept id=\"p1\">**</ept>.","pos":[3373,3426],"source":" The default implementation utilizes **operator==()**."},{"pos":[3433,3751],"content":"Both <ph id=\"ph1\">`CSimpleMap`</ph> and <bpt id=\"p1\">[</bpt>CSimpleArray<ept id=\"p1\">](../../atl/reference/csimplearray-class.md)</ept> are provided for compatibility with previous ATL releases, and more complete and efficient collection implementations are provided by <bpt id=\"p2\">[</bpt>CAtlArray<ept id=\"p2\">](../../atl/reference/catlarray-class.md)</ept> and <bpt id=\"p3\">[</bpt>CAtlMap<ept id=\"p3\">](../../atl/reference/catlmap-class.md)</ept>.","source":"Both `CSimpleMap` and [CSimpleArray](../../atl/reference/csimplearray-class.md) are provided for compatibility with previous ATL releases, and more complete and efficient collection implementations are provided by [CAtlArray](../../atl/reference/catlarray-class.md) and [CAtlMap](../../atl/reference/catlmap-class.md)."},{"content":"Unlike other map collections in ATL and MFC, this class is implemented with a simple array, and lookup searches require a linear search.","pos":[3758,3894]},{"content":"should be used when the array contains a large number of elements.","pos":[3905,3971]},{"content":"Requirements","pos":[3980,3992]},{"pos":[3996,4021],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlsimpcoll.h","source":"**Header:** atlsimpcoll.h"},{"content":"Example","pos":[4030,4037]},{"pos":[4052,4072],"content":"NVC_ATL_Utilities#91"},{"pos":[4166,4181],"content":"CSimpleMap::Add"},{"content":"Adds a key and associated value to the map array.","pos":[4185,4234]},{"content":"Parameters","pos":[4302,4312]},{"content":"The key.","pos":[4325,4333]},{"content":"val","pos":[4341,4344]},{"content":"The associated value.","pos":[4349,4370]},{"content":"Return Value","pos":[4380,4392]},{"content":"Returns TRUE if the key and value were successfully added, FALSE otherwise.","pos":[4396,4471]},{"content":"Remarks","pos":[4481,4488]},{"content":"Each key and value pair added causes the mapping array memory to be freed and reallocated, in order to ensure the data for each is always stored contiguously.","pos":[4492,4650]},{"content":"That is, the second key element always directly follows the first key element in memory and so on.","pos":[4651,4749]},{"pos":[4805,4834],"content":"CSimpleMap::_ArrayElementType"},{"content":"A typedef for the key type.","pos":[4838,4865]},{"pos":[4962,4987],"content":"CSimpleMap::_ArrayKeyType"},{"content":"A typedef for the value type.","pos":[4991,5020]},{"pos":[5110,5132],"content":"CSimpleMap::CSimpleMap"},{"content":"The constructor.","pos":[5136,5152]},{"content":"Remarks","pos":[5189,5196]},{"content":"Initializes the data members.","pos":[5200,5229]},{"pos":[5283,5306],"content":"CSimpleMap::~CSimpleMap"},{"content":"The destructor.","pos":[5310,5325]},{"content":"Remarks","pos":[5363,5370]},{"content":"Frees all allocated resources.","pos":[5374,5404]},{"pos":[5450,5469],"content":"CSimpleMap::FindKey"},{"content":"Finds a specific key.","pos":[5473,5494]},{"content":"Parameters","pos":[5553,5563]},{"content":"The key to search for.","pos":[5576,5598]},{"content":"Return Value","pos":[5608,5620]},{"content":"Returns the index of the key if found, otherwise returns -1.","pos":[5624,5684]},{"pos":[5730,5749],"content":"CSimpleMap::FindVal"},{"content":"Finds a specific value.","pos":[5753,5776]},{"content":"Parameters","pos":[5835,5845]},{"content":"val","pos":[5850,5853]},{"content":"The value for which to search.","pos":[5858,5888]},{"content":"Return Value","pos":[5898,5910]},{"content":"Returns the index of the value if it is found, otherwise returns -1.","pos":[5914,5982]},{"pos":[6029,6049],"content":"CSimpleMap::GetKeyAt"},{"content":"Retrieves the key at the specified index.","pos":[6053,6094]},{"content":"Parameters","pos":[6151,6161]},{"content":"The index of the key to return.","pos":[6177,6208]},{"content":"Return Value","pos":[6218,6230]},{"pos":[6234,6273],"content":"Returns the key referenced by <ph id=\"ph1\">`nIndex`</ph>.","source":"Returns the key referenced by `nIndex`."},{"content":"Remarks","pos":[6283,6290]},{"pos":[6294,6375],"content":"The index passed by <ph id=\"ph1\">`nIndex`</ph> must be valid for the return value to be meaningful.","source":"The index passed by `nIndex` must be valid for the return value to be meaningful."},{"pos":[6421,6440],"content":"CSimpleMap::GetSize"},{"content":"Returns the number of entries in the mapping array.","pos":[6444,6495]},{"content":"Return Value","pos":[6539,6551]},{"content":"Returns the number of entries (a key and value is one entry) in the mapping array.","pos":[6555,6637]},{"pos":[6686,6708],"content":"CSimpleMap::GetValueAt"},{"content":"Retrieves the value at the specific index.","pos":[6712,6754]},{"content":"Parameters","pos":[6813,6823]},{"content":"The index of the value to return.","pos":[6839,6872]},{"content":"Return Value","pos":[6882,6894]},{"pos":[6898,6939],"content":"Returns the value referenced by <ph id=\"ph1\">`nIndex`</ph>.","source":"Returns the value referenced by `nIndex`."},{"content":"Remarks","pos":[6949,6956]},{"pos":[6960,7041],"content":"The index passed by <ph id=\"ph1\">`nIndex`</ph> must be valid for the return value to be meaningful.","source":"The index passed by `nIndex` must be valid for the return value to be meaningful."},{"pos":[7086,7104],"content":"CSimpleMap::Lookup"},{"content":"Returns the value associated with the given key.","pos":[7108,7156]},{"content":"Parameters","pos":[7215,7225]},{"content":"The key.","pos":[7238,7246]},{"content":"Return Value","pos":[7256,7268]},{"content":"Returns the associated value.","pos":[7272,7301]},{"content":"If no matching key is found, NULL is returned.","pos":[7302,7348]},{"pos":[7393,7411],"content":"CSimpleMap::Remove"},{"content":"Removes a key and matching value.","pos":[7415,7448]},{"content":"Parameters","pos":[7501,7511]},{"content":"The key.","pos":[7524,7532]},{"content":"Return Value","pos":[7542,7554]},{"content":"Returns TRUE if the key, and matching value, were successfully removed, FALSE otherwise.","pos":[7558,7646]},{"pos":[7694,7715],"content":"CSimpleMap::RemoveAll"},{"content":"Removes all keys and values.","pos":[7719,7747]},{"content":"Remarks","pos":[7788,7795]},{"content":"Removes all keys and values from the mapping array object.","pos":[7799,7857]},{"pos":[7904,7924],"content":"CSimpleMap::RemoveAt"},{"content":"Removes a key and associated value at the specified index.","pos":[7928,7986]},{"content":"Parameters","pos":[8036,8046]},{"content":"The index of the key and associated value to remove.","pos":[8062,8114]},{"content":"Return Value","pos":[8124,8136]},{"content":"Returns TRUE on success, FALSE if the index specified is an invalid index.","pos":[8140,8214]},{"pos":[8266,8291],"content":"CSimpleMap::ReverseLookup"},{"content":"Returns the key associated with the given value.","pos":[8295,8343]},{"content":"Parameters","pos":[8409,8419]},{"content":"val","pos":[8424,8427]},{"content":"The value.","pos":[8432,8442]},{"content":"Return Value","pos":[8452,8464]},{"content":"Returns the associated key.","pos":[8468,8495]},{"content":"If no matching key is found, NULL is returned.","pos":[8496,8542]},{"pos":[8586,8603],"content":"CSimpleMap::SetAt"},{"content":"Sets the value associated with the given key.","pos":[8607,8652]},{"content":"Parameters","pos":[8722,8732]},{"content":"The key.","pos":[8745,8753]},{"content":"val","pos":[8761,8764]},{"content":"The new value to assign.","pos":[8769,8793]},{"content":"Return Value","pos":[8803,8815]},{"content":"Returns TRUE if the key was found, and the value was successfully changed, FALSE otherwise.","pos":[8819,8910]},{"pos":[8959,8981],"content":"CSimpleMap::SetAtIndex"},{"content":"Sets the key and value at a specified index.","pos":[8985,9029]},{"content":"Parameters","pos":[9123,9133]},{"content":"The index, referencing the key and value pairing to change.","pos":[9149,9208]},{"content":"The new key.","pos":[9224,9236]},{"content":"val","pos":[9244,9247]},{"content":"The new value.","pos":[9252,9266]},{"content":"Return Value","pos":[9276,9288]},{"content":"Returns TRUE if successful, FALSE if the index was not valid.","pos":[9292,9353]},{"content":"Remarks","pos":[9363,9370]},{"pos":[9374,9428],"content":"Updates both the key and value pointed to by <ph id=\"ph1\">`nIndex`</ph>.","source":"Updates both the key and value pointed to by `nIndex`."},{"content":"See Also","pos":[9437,9445]},{"content":"Class Overview","pos":[9450,9464]}],"content":"---\ntitle: \"CSimpleMap Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CSimpleMap\"\n  - \"ATL.CSimpleMap\"\n  - \"CSimpleMap\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CSimpleMap class\"\nms.assetid: 61b06eb4-ae73-44b0-a305-0afb5a33e8b1\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CSimpleMap Class\nThis class provides support for a simple mapping array.  \n  \n## Syntax  \n  \n```\ntemplate <class TKey, class TVal, class TEqual = CSimpleMapEqualHelper<TKey,\n    TVal>> class CSimpleMap\n```  \n  \n#### Parameters  \n `TKey`  \n The key element type.  \n  \n `TVal`  \n The value element type.  \n  \n `TEqual`  \n A trait object, defining the equality test for elements of type `T`.  \n  \n## Members  \n  \n### Public Typedefs  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSimpleMap::_ArrayElementType](#csimplemap___arrayelementtype)|Typedef for the value type.|  \n|[CSimpleMap::_ArrayKeyType](#csimplemap___arraykeytype)|Typedef for the key type.|  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSimpleMap::CSimpleMap](#csimplemap__csimplemap)|The constructor.|  \n|[CSimpleMap::~CSimpleMap](#csimplemap___dtorcsimplemap)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CSimpleMap::Add](#csimplemap__add)|Adds a key and associated value to the map array.|  \n|[CSimpleMap::FindKey](#csimplemap__findkey)|Finds a specific key.|  \n|[CSimpleMap::FindVal](#csimplemap__findval)|Finds a specific value.|  \n|[CSimpleMap::GetKeyAt](#csimplemap__getkeyat)|Retrieves the specified key.|  \n|[CSimpleMap::GetSize](#csimplemap__getsize)|Returns the number of entries in the mapping array.|  \n|[CSimpleMap::GetValueAt](#csimplemap__getvalueat)|Retrieves the specified value.|  \n|[CSimpleMap::Lookup](#csimplemap__lookup)|Returns the value associated with the given key.|  \n|[CSimpleMap::Remove](#csimplemap__remove)|Removes a key and matching value.|  \n|[CSimpleMap::RemoveAll](#csimplemap__removeall)|Removes all keys and values.|  \n|[CSimpleMap::RemoveAt](#csimplemap__removeat)|Removes a specific key and matching value.|  \n|[CSimpleMap::ReverseLookup](#csimplemap__reverselookup)|Returns the key associated with the given value.|  \n|[CSimpleMap::SetAt](#csimplemap__setat)|Sets the value associated with the given key.|  \n|[CSimpleMap::SetAtIndex](#csimplemap__setatindex)|Sets the specific key and value.|  \n  \n## Remarks  \n `CSimpleMap` provides support for a simple mapping array of any given type `T`, managing an unordered array of key elements and their associated values.  \n  \n The parameter `TEqual` provides a means of defining an equality function for two elements of type `T`. By creating a class similar to [CSimpleMapEqualHelper](../../atl/reference/csimplemapequalhelper-class.md), it is possible to alter the behavior of the equality test for any given array. For example, when dealing with an array of pointers, it may be useful to define the equality as depending on the values the pointers reference. The default implementation utilizes **operator==()**.  \n  \n Both `CSimpleMap` and [CSimpleArray](../../atl/reference/csimplearray-class.md) are provided for compatibility with previous ATL releases, and more complete and efficient collection implementations are provided by [CAtlArray](../../atl/reference/catlarray-class.md) and [CAtlMap](../../atl/reference/catlmap-class.md).  \n  \n Unlike other map collections in ATL and MFC, this class is implemented with a simple array, and lookup searches require a linear search. `CAtlMap` should be used when the array contains a large number of elements.  \n  \n## Requirements  \n **Header:** atlsimpcoll.h  \n  \n## Example  \n [!code-cpp[NVC_ATL_Utilities#91](../../atl/codesnippet/cpp/csimplemap-class_1.cpp)]  \n  \n##  <a name=\"csimplemap__add\"></a>  CSimpleMap::Add  \n Adds a key and associated value to the map array.  \n  \n```\nBOOL Add(const TKey& key,  const TVal& val);\n```  \n  \n### Parameters  \n `key`  \n The key.  \n  \n *val*  \n The associated value.  \n  \n### Return Value  \n Returns TRUE if the key and value were successfully added, FALSE otherwise.  \n  \n### Remarks  \n Each key and value pair added causes the mapping array memory to be freed and reallocated, in order to ensure the data for each is always stored contiguously. That is, the second key element always directly follows the first key element in memory and so on.  \n  \n##  <a name=\"csimplemap___arrayelementtype\"></a>  CSimpleMap::_ArrayElementType  \n A typedef for the key type.  \n  \n```\ntypedef TVal _ArrayElementType;\n```  \n  \n##  <a name=\"csimplemap___arraykeytype\"></a>  CSimpleMap::_ArrayKeyType  \n A typedef for the value type.  \n  \n```\ntypedef TKey _ArrayKeyType;\n```  \n  \n##  <a name=\"csimplemap__csimplemap\"></a>  CSimpleMap::CSimpleMap  \n The constructor.  \n  \n```\nCSimpleMap();\n```  \n  \n### Remarks  \n Initializes the data members.  \n  \n##  <a name=\"csimplemap___dtorcsimplemap\"></a>  CSimpleMap::~CSimpleMap  \n The destructor.  \n  \n```\n~CSimpleMap();\n```  \n  \n### Remarks  \n Frees all allocated resources.  \n  \n##  <a name=\"csimplemap__findkey\"></a>  CSimpleMap::FindKey  \n Finds a specific key.  \n  \n```\nint FindKey(const TKey& key) const;\n```  \n  \n### Parameters  \n `key`  \n The key to search for.  \n  \n### Return Value  \n Returns the index of the key if found, otherwise returns -1.  \n  \n##  <a name=\"csimplemap__findval\"></a>  CSimpleMap::FindVal  \n Finds a specific value.  \n  \n```\nint FindVal(const TVal& val) const;\n```  \n  \n### Parameters  \n *val*  \n The value for which to search.  \n  \n### Return Value  \n Returns the index of the value if it is found, otherwise returns -1.  \n  \n##  <a name=\"csimplemap__getkeyat\"></a>  CSimpleMap::GetKeyAt  \n Retrieves the key at the specified index.  \n  \n```\nTKey& GetKeyAt(int nIndex) const;\n```  \n  \n### Parameters  \n `nIndex`  \n The index of the key to return.  \n  \n### Return Value  \n Returns the key referenced by `nIndex`.  \n  \n### Remarks  \n The index passed by `nIndex` must be valid for the return value to be meaningful.  \n  \n##  <a name=\"csimplemap__getsize\"></a>  CSimpleMap::GetSize  \n Returns the number of entries in the mapping array.  \n  \n```\nint GetSize() const;\n```  \n  \n### Return Value  \n Returns the number of entries (a key and value is one entry) in the mapping array.  \n  \n##  <a name=\"csimplemap__getvalueat\"></a>  CSimpleMap::GetValueAt  \n Retrieves the value at the specific index.  \n  \n```\nTVal& GetValueAt(int nIndex) const;\n```  \n  \n### Parameters  \n `nIndex`  \n The index of the value to return.  \n  \n### Return Value  \n Returns the value referenced by `nIndex`.  \n  \n### Remarks  \n The index passed by `nIndex` must be valid for the return value to be meaningful.  \n  \n##  <a name=\"csimplemap__lookup\"></a>  CSimpleMap::Lookup  \n Returns the value associated with the given key.  \n  \n```\nTVal Lookup(const TKey& key) const;\n```  \n  \n### Parameters  \n `key`  \n The key.  \n  \n### Return Value  \n Returns the associated value. If no matching key is found, NULL is returned.  \n  \n##  <a name=\"csimplemap__remove\"></a>  CSimpleMap::Remove  \n Removes a key and matching value.  \n  \n```\nBOOL Remove(const TKey& key);\n```  \n  \n### Parameters  \n `key`  \n The key.  \n  \n### Return Value  \n Returns TRUE if the key, and matching value, were successfully removed, FALSE otherwise.  \n  \n##  <a name=\"csimplemap__removeall\"></a>  CSimpleMap::RemoveAll  \n Removes all keys and values.  \n  \n```\nvoid RemoveAll();\n```  \n  \n### Remarks  \n Removes all keys and values from the mapping array object.  \n  \n##  <a name=\"csimplemap__removeat\"></a>  CSimpleMap::RemoveAt  \n Removes a key and associated value at the specified index.  \n  \n```\nBOOL RemoveAt(int nIndex);\n```  \n  \n### Parameters  \n `nIndex`  \n The index of the key and associated value to remove.  \n  \n### Return Value  \n Returns TRUE on success, FALSE if the index specified is an invalid index.  \n  \n##  <a name=\"csimplemap__reverselookup\"></a>  CSimpleMap::ReverseLookup  \n Returns the key associated with the given value.  \n  \n```\nTKey ReverseLookup(const TVal& val) const;\n```  \n  \n### Parameters  \n *val*  \n The value.  \n  \n### Return Value  \n Returns the associated key. If no matching key is found, NULL is returned.  \n  \n##  <a name=\"csimplemap__setat\"></a>  CSimpleMap::SetAt  \n Sets the value associated with the given key.  \n  \n```\nBOOL SetAt(const TKey& key,  const TVal& val);\n```  \n  \n### Parameters  \n `key`  \n The key.  \n  \n *val*  \n The new value to assign.  \n  \n### Return Value  \n Returns TRUE if the key was found, and the value was successfully changed, FALSE otherwise.  \n  \n##  <a name=\"csimplemap__setatindex\"></a>  CSimpleMap::SetAtIndex  \n Sets the key and value at a specified index.  \n  \n```\nBOOL SetAtIndex(int nIndex,\n    const TKey& key,\n    const TVal& val);\n```  \n  \n### Parameters  \n `nIndex`  \n The index, referencing the key and value pairing to change.  \n  \n `key`  \n The new key.  \n  \n *val*  \n The new value.  \n  \n### Return Value  \n Returns TRUE if successful, FALSE if the index was not valid.  \n  \n### Remarks  \n Updates both the key and value pointed to by `nIndex`.  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)\n"}