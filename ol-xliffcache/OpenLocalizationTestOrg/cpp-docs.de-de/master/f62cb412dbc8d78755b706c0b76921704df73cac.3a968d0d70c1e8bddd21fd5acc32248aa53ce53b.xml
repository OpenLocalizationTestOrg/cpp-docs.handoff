{"nodes":[{"pos":[12,56],"content":"discrete_distribution Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"discrete_distribution Class | Microsoft Docs","pos":[0,44]}]},{"pos":[819,846],"content":"discrete_distribution Class","linkify":"discrete_distribution Class","nodes":[{"content":"discrete_distribution Class","pos":[0,27]}]},{"content":"Generates a discrete integer distribution that has uniform-width intervals with uniform probability in each interval.","pos":[847,964]},{"pos":[973,979],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1951,1961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The integer result type, defaults to <ph id=\"ph1\">`int`</ph>.","pos":[1978,2021],"source":" The integer result type, defaults to `int`."},{"content":"For possible types, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","pos":[2022,2089],"source":" For possible types, see [\\<random>](../standard-library/random.md)."},{"pos":[2098,2105],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This sampling distribution has uniform-width intervals with uniform probability in each interval.","pos":[2109,2206]},{"content":"For information about other sampling distributions, see <bpt id=\"p1\">[</bpt>piecewise_linear_distribution Class<ept id=\"p1\">](../standard-library/piecewise-linear-distribution-class.md)</ept> and <bpt id=\"p2\">[</bpt>piecewise_constant_distribution Class<ept id=\"p2\">](../standard-library/piecewise-constant-distribution-class.md)</ept>.","pos":[2207,2467],"source":" For information about other sampling distributions, see [piecewise_linear_distribution Class](../standard-library/piecewise-linear-distribution-class.md) and [piecewise_constant_distribution Class](../standard-library/piecewise-constant-distribution-class.md)."},{"content":"The following table links to articles about individual members:","pos":[2474,2537]},{"pos":[2558,2651],"content":"<bpt id=\"p1\">[</bpt>discrete_distribution::discrete_distribution<ept id=\"p1\">](#discrete_distribution__discrete_distribution)</ept>","source":"[discrete_distribution::discrete_distribution](#discrete_distribution__discrete_distribution)"},{"pos":[2723,2794],"content":"<bpt id=\"p1\">[</bpt>discrete_distribution::param_type<ept id=\"p1\">](#discrete_distribution__param_type)</ept>","source":"[discrete_distribution::param_type](#discrete_distribution__param_type)"},{"pos":[2802,2921],"content":"The property function <ph id=\"ph1\">`vector&lt;double&gt; probabilities()`</ph> returns the individual probabilities for each integer generated.","source":"The property function `vector<double> probabilities()` returns the individual probabilities for each integer generated."},{"pos":[2928,3042],"content":"For more information about distribution classes and their members, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>.","source":"For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md)."},{"pos":[3051,3058],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4568,4574],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[5065,5077],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5081,5102],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>random&gt;","source":"**Header:** \\<random>"},{"pos":[5109,5127],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"pos":[5137,5242],"content":"<bpt id=\"p1\">&lt;a name=\"discrete_distribution__discrete_distribution\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  discrete_distribution::discrete_distribution","linkify":"<a name=\"discrete_distribution__discrete_distribution\"></a>  discrete_distribution::discrete_distribution","source":"<a name=\"discrete_distribution__discrete_distribution\"></a>  discrete_distribution::discrete_distribution"},{"content":"Constructs the distribution.","pos":[5246,5274]},{"pos":[5926,5936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The first iterator in the list from which to construct the distribution.","pos":[5952,6024]},{"content":"The last iterator in the list from which to construct the distribution (non-inclusive because iterators use an empty element for the end).","pos":[6042,6180]},{"content":"The <bpt id=\"p1\">[</bpt>initializer_list<ept id=\"p1\">](../cpp/initializers.md)</ept> from which to construct the distribution.","pos":[6203,6291],"source":" The [initializer_list](../cpp/initializers.md) from which to construct the distribution."},{"content":"The number of elements in the distribution range.","pos":[6309,6358]},{"content":"If <ph id=\"ph1\">`count==0`</ph>, equivalent to the default constructor (always generates zero).","pos":[6359,6436],"source":" If `count==0`, equivalent to the default constructor (always generates zero)."},{"content":"The lowest value in the distribution range.","pos":[6453,6496]},{"content":"The highest value in the distribution range.","pos":[6513,6557]},{"content":"The object representing the probability function for the distribution.","pos":[6580,6650]},{"content":"Both the parameter and the return value must be convertible to <ph id=\"ph1\">`double`</ph>.","pos":[6651,6723],"source":" Both the parameter and the return value must be convertible to `double`."},{"content":"The parameter structure used to construct the distribution.","pos":[6740,6799]},{"pos":[6809,6816],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default constructor constructs an object whose stored probability value has one element with value 1.","pos":[6820,6925]},{"content":"This will result in a distribution that always generates a zero.","pos":[6926,6990]},{"content":"The iterator range constructor,","pos":[6997,7028]},{"pos":[7149,7258],"content":"constructs a distribution object with weights from iterators over the interval sequence [ <ph id=\"ph1\">`firstI`</ph>, <ph id=\"ph2\">`lastI`</ph>).","source":"constructs a distribution object with weights from iterators over the interval sequence [ `firstI`, `lastI`)."},{"content":"The initializer list constructor","pos":[7265,7297]},{"pos":[7379,7463],"content":"constructs a distribution object with weights from the intializer list <ph id=\"ph1\">`weightlist`</ph>.","source":"constructs a distribution object with weights from the intializer list `weightlist`."},{"content":"The constructor defined as","pos":[7470,7496]},{"content":"constructs a distribution object whose stored probability value is initialized based on the following rules.","pos":[7642,7750]},{"content":"If <ph id=\"ph1\">`count &lt; 1`</ph>, <ph id=\"ph2\">`n`</ph><ph id=\"ph3\"> = </ph><ph id=\"ph4\">`1`</ph>, and as such is equivalent to the default constructor, always generating zero.","pos":[7751,7855],"source":" If `count < 1`, `n` = `1`, and as such is equivalent to the default constructor, always generating zero."},{"content":"If <ph id=\"ph1\">`count &gt; 0`</ph>, <ph id=\"ph2\">`n`</ph><ph id=\"ph3\"> = </ph><ph id=\"ph4\">`count`</ph>.","pos":[7856,7886],"source":" If `count > 0`, `n` = `count`."},{"content":"Provided <ph id=\"ph1\">`0`</ph><ph id=\"ph2\"> &lt; </ph><ph id=\"ph3\">`d`</ph> = ( <ph id=\"ph4\">`maxw - minw`</ph>)/ <ph id=\"ph5\">`n`</ph>, using <ph id=\"ph6\">`d`</ph> uniform subranges each weight is assigned as follows: <ph id=\"ph7\">`weight`</ph>k = <ph id=\"ph8\">`weightfunc(x)`</ph>, where <ph id=\"ph9\">`x`</ph><ph id=\"ph10\"> = </ph><ph id=\"ph11\">`xmin`</ph><ph id=\"ph12\"> + </ph><ph id=\"ph13\">`k`</ph><ph id=\"ph14\"> * </ph><ph id=\"ph15\">`d`</ph><ph id=\"ph16\"> + </ph><ph id=\"ph17\">`d`</ph><ph id=\"ph18\">/ </ph><ph id=\"ph19\">`2`</ph>, for <ph id=\"ph20\">`k`</ph><ph id=\"ph21\"> = </ph><ph id=\"ph22\">`0`</ph>, ..., <ph id=\"ph23\">`n - 1`</ph>.","pos":[7887,8095],"source":" Provided `0` < `d` = ( `maxw - minw`)/ `n`, using `d` uniform subranges each weight is assigned as follows: `weight`k = `weightfunc(x)`, where `x` = `xmin` + `k` * `d` + `d`/ `2`, for `k` = `0`, ..., `n - 1`."},{"content":"The constructor defined as","pos":[8102,8128]},{"pos":[8206,8286],"content":"constructs a distribution object using <ph id=\"ph1\">`parm`</ph> as the stored parameter structure.","source":"constructs a distribution object using `parm` as the stored parameter structure."},{"pos":[8296,8379],"content":"<bpt id=\"p1\">&lt;a name=\"discrete_distribution__param_type\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  discrete_distribution::param_type","linkify":"<a name=\"discrete_distribution__param_type\"></a>  discrete_distribution::param_type","source":"<a name=\"discrete_distribution__param_type\"></a>  discrete_distribution::param_type"},{"content":"Stores all the parameters of the distribution.","pos":[8383,8429]},{"pos":[8843,8853],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[8857,8956],"content":"See parent topic <bpt id=\"p1\">[</bpt>discrete_distribution Class<ept id=\"p1\">](../standard-library/discrete-distribution-class.md)</ept>.","source":"See parent topic [discrete_distribution Class](../standard-library/discrete-distribution-class.md)."},{"pos":[8966,8973],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8977,9059],"content":"This parameter package can be passed to <ph id=\"ph1\">`operator()`</ph> to generate the return value.","source":"This parameter package can be passed to `operator()` to generate the return value."},{"pos":[9068,9076],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[9080,9122],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>random&gt;<ept id=\"p1\">](../standard-library/random.md)</ept>","source":"[\\<random>](../standard-library/random.md)"}],"content":"---\ntitle: \"discrete_distribution Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"random/std::tr1::discrete_distribution\"\n  - \"std::tr1::discrete_distribution\"\n  - \"tr1.discrete_distribution\"\n  - \"std.tr1.discrete_distribution\"\n  - \"discrete_distribution\"\n  - \"tr1::discrete_distribution\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"discrete_distribution class\"\nms.assetid: 8c8ba8f8-c06f-4f07-b354-f53950142fcf\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# discrete_distribution Class\nGenerates a discrete integer distribution that has uniform-width intervals with uniform probability in each interval.  \n  \n## Syntax  \n```    \nclass discrete_distribution  \n   {  \n   public:  // types  \n   typedef IntType result_type;  \n   struct param_type;  // constructor and reset functions  \n   discrete_distribution();\n   template <class InputIterator>  \n   discrete_distribution(InputIterator firstW, InputIterator lastW);\n   discrete_distribution(initializer_list<double>  \n   weightlist);\n   template <class UnaryOperation>  \n   discrete_distribution(size_t count, double xmin, double xmax, UnaryOperation funcweight);\n   explicit discrete_distribution(const param_type& parm);\n   void reset();\n   // generating functions  \n   template <class URNG>  \n   result_type operator()(URNG& gen);\n   template <class URNG>  \n   result_type operator()(URNG& gen, const param_type& parm);\n   // property functions  \n   vector<double>  \n   probabilities() const;\n   param_type param() const;\n   void param(const param_type& parm);\n   result_type min() const;\n   result_type max() const;\n   };  \n```   \n#### Parameters  \n `IntType`  \n The integer result type, defaults to `int`. For possible types, see [\\<random>](../standard-library/random.md).  \n  \n## Remarks  \n This sampling distribution has uniform-width intervals with uniform probability in each interval. For information about other sampling distributions, see [piecewise_linear_distribution Class](../standard-library/piecewise-linear-distribution-class.md) and [piecewise_constant_distribution Class](../standard-library/piecewise-constant-distribution-class.md).  \n  \n The following table links to articles about individual members:  \n  \n|||  \n|-|-|  \n|[discrete_distribution::discrete_distribution](#discrete_distribution__discrete_distribution)|`discrete_distribution::param`|  \n|`discrete_distribution::operator()`|[discrete_distribution::param_type](#discrete_distribution__param_type)|  \n  \n The property function `vector<double> probabilities()` returns the individual probabilities for each integer generated.  \n  \n For more information about distribution classes and their members, see [\\<random>](../standard-library/random.md).  \n  \n## Example  \n  \n```cpp  \n// compile with: /EHsc /W4  \n#include <random>   \n#include <iostream>  \n#include <iomanip>  \n#include <string>  \n#include <map>  \n  \nusing namespace std;  \n  \nvoid test(const int s) {  \n  \n    // uncomment to use a non-deterministic generator  \n    // random_device rd;  \n    // mt19937 gen(rd());  \n    mt19937 gen(1701);  \n  \n    discrete_distribution<> distr({ 1, 2, 3, 4, 5 });  \n  \n    cout << endl;  \n    cout << \"min() == \" << distr.min() << endl;  \n    cout << \"max() == \" << distr.max() << endl;  \n    cout << \"probabilities (value: probability):\" << endl;  \n    vector<double> p = distr.probabilities();  \n    int counter = 0;  \n    for (const auto& n : p) {  \n        cout << fixed << setw(11) << counter << \": \" << setw(14) << setprecision(10) << n << endl;  \n        ++counter;  \n    }  \n    cout << endl;  \n  \n    // generate the distribution as a histogram  \n    map<int, int> histogram;  \n    for (int i = 0; i < s; ++i) {  \n        ++histogram[distr(gen)];  \n    }  \n  \n    // print results  \n    cout << \"Distribution for \" << s << \" samples:\" << endl;  \n    for (const auto& elem : histogram) {  \n        cout << setw(5) << elem.first << ' ' << string(elem.second, ':') << endl;  \n    }  \n    cout << endl;  \n}  \n  \nint main()  \n{  \n    int samples = 100;  \n  \n    cout << \"Use CTRL-Z to bypass data entry and run using default values.\" << endl;  \n    cout << \"Enter an integer value for the sample count: \";  \n    cin >> samples;  \n  \n    test(samples);  \n}  \n  \n```  \n  \n## Output  \n  \n```Output  \nUse CTRL-Z to bypass data entry and run using default values.Enter an integer value for the sample count: 100min() == 0max() == 4probabilities (value: probability):          0:   0.0666666667          1:   0.1333333333          2:   0.2000000000          3:   0.2666666667          4:   0.3333333333Distribution for 100 samples:    0 :::::    1 ::::::::::::::    2 :::::::::::::::::    3 ::::::::::::::::::::::::::::::    4 ::::::::::::::::::::::::::::::::::  \n```  \n  \n## Requirements  \n **Header:** \\<random>  \n  \n **Namespace:** std  \n  \n##  <a name=\"discrete_distribution__discrete_distribution\"></a>  discrete_distribution::discrete_distribution  \n Constructs the distribution.  \n  \n```  \n \n// default constructor  \ndiscrete_distribution();\n\n \n// constructs using a range of weights, [firstW, lastW)  \ntemplate <class InputIterator>  \ndiscrete_distribution(InputIterator firstW, InputIterator lastW);\n\n \n// constructs using an initializer list for range of weights  \ndiscrete_distribution(initializer_list<double>  \nweightlist);\n\n \n// constructs using unary operation function  \ntemplate <class UnaryOperation>  \ndiscrete_distribution(size_t count, double xmin, double xmax, UnaryOperation weightfunc);\n\n \n// constructs from an existing param_type structure  \nexplicit discrete_distribution(const param_type& parm);\n```  \n  \n### Parameters  \n `firstW`  \n The first iterator in the list from which to construct the distribution.  \n  \n `lastW`  \n The last iterator in the list from which to construct the distribution (non-inclusive because iterators use an empty element for the end).  \n  \n `weightlist`  \n The [initializer_list](../cpp/initializers.md) from which to construct the distribution.  \n  \n `count`  \n The number of elements in the distribution range. If `count==0`, equivalent to the default constructor (always generates zero).  \n  \n `minx`  \n The lowest value in the distribution range.  \n  \n `maxw`  \n The highest value in the distribution range.  \n  \n `weightfunc`  \n The object representing the probability function for the distribution. Both the parameter and the return value must be convertible to `double`.  \n  \n `parm`  \n The parameter structure used to construct the distribution.  \n  \n### Remarks  \n The default constructor constructs an object whose stored probability value has one element with value 1. This will result in a distribution that always generates a zero.  \n  \n The iterator range constructor,  \n  \n```  \ntemplate <class InputIterator>  \ndiscrete_distribution(InputIterator firstW, InputIterator lastW);\n```  \n  \n constructs a distribution object with weights from iterators over the interval sequence [ `firstI`, `lastI`).  \n  \n The initializer list constructor  \n  \n```  \ndiscrete_distribution(initializer_list<double> weightlist);\n```  \n  \n constructs a distribution object with weights from the intializer list `weightlist`.  \n  \n The constructor defined as  \n  \n```  \ntemplate <class UnaryOperation>  \ndiscrete_distribution(size_t count, double xmin, double xmax, UnaryOperation funcweight);\n```  \n  \n constructs a distribution object whose stored probability value is initialized based on the following rules. If `count < 1`, `n` = `1`, and as such is equivalent to the default constructor, always generating zero. If `count > 0`, `n` = `count`. Provided `0` < `d` = ( `maxw - minw`)/ `n`, using `d` uniform subranges each weight is assigned as follows: `weight`k = `weightfunc(x)`, where `x` = `xmin` + `k` * `d` + `d`/ `2`, for `k` = `0`, ..., `n - 1`.  \n  \n The constructor defined as  \n  \n```  \nexplicit discrete_distribution(const param_type& parm);\n```  \n  \n constructs a distribution object using `parm` as the stored parameter structure.  \n  \n##  <a name=\"discrete_distribution__param_type\"></a>  discrete_distribution::param_type  \n Stores all the parameters of the distribution.  \n```cpp  \nstruct param_type {  \n   typedef discrete_distribution<IntType> distribution_type;  \n   param_type();\n   template <class UnaryOperation>  \n   param_type(size_t count, double low, double high, UnaryOperation weightfunc);\n   std::vector<double>  \n   probabilities() const;\n   ....  \n   bool operator==(const param_type& right) const;\n   bool operator!=(const param_type& right) const;\n   };  \n```   \n### Parameters  \n See parent topic [discrete_distribution Class](../standard-library/discrete-distribution-class.md).  \n  \n### Remarks  \n This parameter package can be passed to `operator()` to generate the return value.  \n  \n## See Also  \n [\\<random>](../standard-library/random.md)\n\n\n\n\n\n"}