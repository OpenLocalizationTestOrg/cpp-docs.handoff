{"nodes":[{"pos":[12,51],"content":"map::operator(STL-CLR) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"map::operator(STL-CLR) | Microsoft Docs","pos":[0,39]}]},{"content":"map::operator(STL/CLR)","pos":[634,656]},{"content":"Maps a key to its associated mapped value.","pos":[657,699]},{"content":"Syntax","pos":[708,714]},{"content":"Parameters","pos":[780,790]},{"content":"key","pos":[794,797]},{"content":"Key value to search for.","pos":[801,825]},{"content":"Remarks","pos":[834,841]},{"content":"The member functions endeavors to find an element with equivalent ordering to <ph id=\"ph1\">`key`</ph>.","pos":[845,929],"source":"The member functions endeavors to find an element with equivalent ordering to `key`."},{"content":"If it finds one, it returns the associated mapped value; otherwise, it inserts <ph id=\"ph1\">`value_type(``key``, mapped_type())`</ph> and returns the associated (default) mapped value.","pos":[930,1096],"source":" If it finds one, it returns the associated mapped value; otherwise, it inserts `value_type(``key``, mapped_type())` and returns the associated (default) mapped value."},{"content":"You use it to look up a mapped value given its associated key, or to ensure that an entry exists for the key if none is found.","pos":[1097,1223]},{"content":"Example","pos":[1232,1239]},{"content":"Requirements","pos":[2535,2547]},{"pos":[2551,2576],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>cliext/map&gt;","source":"**Header:** \\<cliext/map>"},{"pos":[2583,2604],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> cliext","source":"**Namespace:** cliext"},{"content":"See Also","pos":[2613,2621]},{"content":"map (STL/CLR)","pos":[2626,2639]},{"content":"map::find (STL/CLR)","pos":[2672,2691]},{"content":"map::insert (STL/CLR)","pos":[2729,2750]}],"content":"---\ntitle: \"map::operator(STL-CLR) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"cliext::map::operator[]\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"operatormember [] [STL/CLR]\"\nms.assetid: 50e494c5-62d4-4469-8da3-7432ee4dff97\ncaps.latest.revision: 16\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# map::operator(STL/CLR)\nMaps a key to its associated mapped value.  \n  \n## Syntax  \n  \n```  \nmapped_type operator[](key_type key);  \n```  \n  \n#### Parameters  \n key  \n Key value to search for.  \n  \n## Remarks  \n The member functions endeavors to find an element with equivalent ordering to `key`. If it finds one, it returns the associated mapped value; otherwise, it inserts `value_type(``key``, mapped_type())` and returns the associated (default) mapped value. You use it to look up a mapped value given its associated key, or to ensure that an entry exists for the key if none is found.  \n  \n## Example  \n  \n```  \n// cliext_map_operator_sub.cpp   \n// compile with: /clr   \n#include <cliext/map>   \n  \ntypedef cliext::map<wchar_t, int> Mymap;   \nint main()   \n    {   \n    Mymap c1;   \n    c1.insert(Mymap::make_value(L'a', 1));   \n    c1.insert(Mymap::make_value(L'b', 2));   \n    c1.insert(Mymap::make_value(L'c', 3));   \n  \n// display contents \" [a 1] [b 2] [c 3]\"   \n    for each (Mymap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n    System::Console::WriteLine(\"c1[{0}] = {1}\",   \n        L'A', c1[L'A']);   \n    System::Console::WriteLine(\"c1[{0}] = {1}\",   \n        L'b', c1[L'b']);   \n  \n// redisplay altered contents   \n    for each (Mymap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n  \n// alter mapped values and redisplay   \n    c1[L'A'] = 10;   \n    c1[L'c'] = 13;   \n    for each (Mymap::value_type elem in c1)   \n        System::Console::Write(\" [{0} {1}]\", elem->first, elem->second);   \n    System::Console::WriteLine();   \n    return (0);   \n    }  \n  \n```  \n  \n```Output  \n [a 1] [b 2] [c 3]  \nc1[A] = 0  \nc1[b] = 2  \n [A 0] [a 1] [b 2] [c 3]  \n [A 10] [a 1] [b 2] [c 13]  \n```  \n  \n## Requirements  \n **Header:** \\<cliext/map>  \n  \n **Namespace:** cliext  \n  \n## See Also  \n [map (STL/CLR)](../dotnet/map-stl-clr.md)   \n [map::find (STL/CLR)](../dotnet/map-find-stl-clr.md)   \n [map::insert (STL/CLR)](../dotnet/map-insert-stl-clr.md)"}