{"nodes":[{"pos":[12,46],"content":"Identifiers (C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Identifiers (C++) | Microsoft Docs","pos":[0,34]}]},{"content":"Identifiers (C++)","pos":[732,749]},{"content":"An identifier is a sequence of characters used to denote one of the following:","pos":[750,828]},{"content":"Object or variable name","pos":[838,861]},{"content":"Class, structure, or union name","pos":[871,902]},{"content":"Enumerated type name","pos":[912,932]},{"content":"Member of a class, structure, union, or enumeration","pos":[942,993]},{"content":"Function or class-member function","pos":[1003,1036]},{"content":"typedef name","pos":[1046,1058]},{"content":"Label name","pos":[1068,1078]},{"content":"Macro name","pos":[1088,1098]},{"content":"Macro parameter","pos":[1108,1123]},{"content":"The following characters are allowed as any character of an identifier:","pos":[1130,1201]},{"content":"Certain ranges of universal character names are also allowed in an identifier.","pos":[1337,1415]},{"content":"A universal character name in an identifier cannot designate a control character or a character in the basic source character set.","pos":[1417,1547]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Character Sets<ept id=\"p1\">](../cpp/character-sets2.md)</ept>.","pos":[1548,1618],"source":" For more information, see [Character Sets](../cpp/character-sets2.md)."},{"content":"These Unicode code point number ranges are allowed as universal character names for any character in an identifier:","pos":[1619,1734]},{"content":"00A8, 00AA, 00AD, 00AF, 00B2-00B5, 00B7-00BA, 00BC-00BE, 00C0-00D6, 00D8-00F6, 00F8-00FF, 0100-02FF, 0370-167F, 1681-180D, 180F-1DBF, 1E00-1FFF, 200B-200D, 202A-202E, 203F-2040, 2054, 2060-206F, 2070-20CF, 2100-218F, 2460-24FF, 2776-2793, 2C00-2DFF, 2E80-2FFF, 3004-3007, 3021-302F, 3031-303F, 3040-D7FF, F900-FD3D, FD40-FDCF, FDF0-FE1F, FE30-FE44, FE47-FFFD, 10000-1FFFD, 20000-2FFFD, 30000-3FFFD, 40000-4FFFD, 50000-5FFFD, 60000-6FFFD, 70000-7FFFD, 80000-8FFFD, 90000-9FFFD, A0000-AFFFD, B0000-BFFFD, C0000-CFFFD, D0000-DFFFD, E0000-EFFFD","pos":[1744,2284]},{"content":"The following characters are allowed as any character in an identifier except the first:","pos":[2291,2379]},{"content":"These  Unicode code point number ranges are also allowed as universal character names for any character in an identifier except the first:","pos":[2423,2561]},{"content":"0300-036F, 1DC0-1DFF, 20D0-20FF, FE20-FE2F","pos":[2571,2613]},{"content":"Microsoft Specific","pos":[2622,2640]},{"content":"Only the first 2048 characters of Microsoft C++ identifiers are significant.","pos":[2649,2725]},{"content":"Names for user-defined types are \"decorated\" by the compiler to preserve type information.","pos":[2726,2816]},{"content":"The resultant name, including the type information, cannot be longer than 2048 characters.","pos":[2817,2907]},{"content":"(See <bpt id=\"p1\">[</bpt>Decorated Names<ept id=\"p1\">](../build/reference/decorated-names.md)</ept> for more information.) Factors that can influence the length of a decorated identifier are:","pos":[2908,3061],"source":" (See [Decorated Names](../build/reference/decorated-names.md) for more information.) Factors that can influence the length of a decorated identifier are:"},{"content":"Whether the identifier denotes an object of user-defined type or a type derived from a user-defined type.","pos":[3071,3176]},{"content":"Whether the identifier denotes a function or a type derived from a function.","pos":[3186,3262]},{"content":"The number of arguments to a function.","pos":[3272,3310]},{"content":"The dollar sign <ph id=\"ph1\">`$`</ph> is a valid identifier character in Visual C++.","pos":[3317,3383],"source":"The dollar sign `$` is a valid identifier character in Visual C++."},{"content":"Visual C++ also allows you to use the actual characters represented by the allowed ranges of universal character names in identifiers.","pos":[3384,3518]},{"content":"To use these characters, you must save the file by using a file encoding codepage that includes them.","pos":[3519,3620]},{"content":"This example shows how both extended characters and universal character names can be used interchangeably in your code.","pos":[3622,3741]},{"content":"The range of characters allowed in an identifier is less restrictive when compiling C++/CLI code.","pos":[4140,4237]},{"content":"Identifiers in code compiled by using /clr should follow  <bpt id=\"p1\">[</bpt>Standard ECMA-335: Common Language Infrastructure (CLI)<ept id=\"p1\">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept>.","pos":[4238,4425],"source":" Identifiers in code compiled by using /clr should follow  [Standard ECMA-335: Common Language Infrastructure (CLI)](http://www.ecma-international.org/publications/standards/Ecma-335.htm)."},{"content":"END Microsoft Specific","pos":[4434,4456]},{"content":"The first character of an identifier must be an alphabetic character, either uppercase or lowercase, or an underscore ( <bpt id=\"p1\">**</bpt>_<ept id=\"p1\">**</ept> ).","pos":[4465,4593],"source":"The first character of an identifier must be an alphabetic character, either uppercase or lowercase, or an underscore ( **_** )."},{"content":"Because C++ identifiers are case sensitive, <ph id=\"ph1\">`fileName`</ph> is different from <ph id=\"ph2\">`FileName`</ph>.","pos":[4594,4678],"source":" Because C++ identifiers are case sensitive, `fileName` is different from `FileName`."},{"content":"Identifiers cannot be exactly the same spelling and case as keywords.","pos":[4685,4754]},{"content":"Identifiers that contain keywords are legal.","pos":[4755,4799]},{"content":"For example, <ph id=\"ph1\">`Pint`</ph> is a legal identifier, even though it contains <ph id=\"ph2\">`int`</ph>, which is a keyword.","pos":[4800,4893],"source":" For example, `Pint` is a legal identifier, even though it contains `int`, which is a keyword."},{"content":"Use of two sequential underscore characters ( <bpt id=\"p1\">**</bpt>__<ept id=\"p1\">**</ept> ) at the beginning of an identifier, or a single leading underscore followed by a capital letter, is reserved for C++ implementations in all scopes.","pos":[4900,5101],"source":"Use of two sequential underscore characters ( **__** ) at the beginning of an identifier, or a single leading underscore followed by a capital letter, is reserved for C++ implementations in all scopes."},{"content":"You should avoid using one leading underscore followed by a lowercase letter for names with file scope because of possible conflicts with current or future reserved identifiers.","pos":[5102,5279]},{"content":"See Also","pos":[5288,5296]},{"content":"Lexical Conventions","pos":[5301,5320]}],"content":"---\ntitle: \"Identifiers (C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"decorated names\"\n  - \"decorated names, about decorated names\"\n  - \"identifiers, C++\"\n  - \"white space, in C++ identifiers\"\n  - \"identifiers\"\nms.assetid: 03a0dfb1-4530-4cdf-8295-5ea4dca4c1b8\ncaps.latest.revision: 11\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Identifiers (C++)\nAn identifier is a sequence of characters used to denote one of the following:  \n  \n-   Object or variable name  \n  \n-   Class, structure, or union name  \n  \n-   Enumerated type name  \n  \n-   Member of a class, structure, union, or enumeration  \n  \n-   Function or class-member function  \n  \n-   typedef name  \n  \n-   Label name  \n  \n-   Macro name  \n  \n-   Macro parameter  \n  \n The following characters are allowed as any character of an identifier:  \n  \n```  \n_ a b c d e f g h i j k l m  \nn o p q r s t u v w x y z  \nA B C D E F G H I J K L M  \nN O P Q R S T U V W X Y Z  \n```  \n  \n Certain ranges of universal character names are also allowed in an identifier.  A universal character name in an identifier cannot designate a control character or a character in the basic source character set. For more information, see [Character Sets](../cpp/character-sets2.md). These Unicode code point number ranges are allowed as universal character names for any character in an identifier:  \n  \n-   00A8, 00AA, 00AD, 00AF, 00B2-00B5, 00B7-00BA, 00BC-00BE, 00C0-00D6, 00D8-00F6, 00F8-00FF, 0100-02FF, 0370-167F, 1681-180D, 180F-1DBF, 1E00-1FFF, 200B-200D, 202A-202E, 203F-2040, 2054, 2060-206F, 2070-20CF, 2100-218F, 2460-24FF, 2776-2793, 2C00-2DFF, 2E80-2FFF, 3004-3007, 3021-302F, 3031-303F, 3040-D7FF, F900-FD3D, FD40-FDCF, FDF0-FE1F, FE30-FE44, FE47-FFFD, 10000-1FFFD, 20000-2FFFD, 30000-3FFFD, 40000-4FFFD, 50000-5FFFD, 60000-6FFFD, 70000-7FFFD, 80000-8FFFD, 90000-9FFFD, A0000-AFFFD, B0000-BFFFD, C0000-CFFFD, D0000-DFFFD, E0000-EFFFD  \n  \n The following characters are allowed as any character in an identifier except the first:  \n  \n```  \n0 1 2 3 4 5 6 7 8 9  \n```  \n  \n These  Unicode code point number ranges are also allowed as universal character names for any character in an identifier except the first:  \n  \n-   0300-036F, 1DC0-1DFF, 20D0-20FF, FE20-FE2F  \n  \n **Microsoft Specific**  \n  \n Only the first 2048 characters of Microsoft C++ identifiers are significant. Names for user-defined types are \"decorated\" by the compiler to preserve type information. The resultant name, including the type information, cannot be longer than 2048 characters. (See [Decorated Names](../build/reference/decorated-names.md) for more information.) Factors that can influence the length of a decorated identifier are:  \n  \n-   Whether the identifier denotes an object of user-defined type or a type derived from a user-defined type.  \n  \n-   Whether the identifier denotes a function or a type derived from a function.  \n  \n-   The number of arguments to a function.  \n  \n The dollar sign `$` is a valid identifier character in Visual C++. Visual C++ also allows you to use the actual characters represented by the allowed ranges of universal character names in identifiers. To use these characters, you must save the file by using a file encoding codepage that includes them.  This example shows how both extended characters and universal character names can be used interchangeably in your code.  \n  \n```  \n// extended_identifier.cpp  \n// In Visual Studio, use File, Advanced Save Options to set  \n// the file encoding to Unicode codepage 1200  \nstruct テスト         // Japanese 'test'  \n{  \n    void トスト() {}  // Japanese 'toast'  \n};  \n  \nint main() {  \n    テスト \\u30D1\\u30F3;  // Japanese パン 'bread' in UCN form  \n    パン.トスト();        // compiler recognizes UCN or literal form  \n}  \n```  \n  \n The range of characters allowed in an identifier is less restrictive when compiling C++/CLI code. Identifiers in code compiled by using /clr should follow  [Standard ECMA-335: Common Language Infrastructure (CLI)](http://www.ecma-international.org/publications/standards/Ecma-335.htm).  \n  \n **END Microsoft Specific**  \n  \n The first character of an identifier must be an alphabetic character, either uppercase or lowercase, or an underscore ( **_** ). Because C++ identifiers are case sensitive, `fileName` is different from `FileName`.  \n  \n Identifiers cannot be exactly the same spelling and case as keywords. Identifiers that contain keywords are legal. For example, `Pint` is a legal identifier, even though it contains `int`, which is a keyword.  \n  \n Use of two sequential underscore characters ( **__** ) at the beginning of an identifier, or a single leading underscore followed by a capital letter, is reserved for C++ implementations in all scopes. You should avoid using one leading underscore followed by a lowercase letter for names with file scope because of possible conflicts with current or future reserved identifiers.  \n  \n## See Also  \n [Lexical Conventions](../cpp/lexical-conventions.md)"}