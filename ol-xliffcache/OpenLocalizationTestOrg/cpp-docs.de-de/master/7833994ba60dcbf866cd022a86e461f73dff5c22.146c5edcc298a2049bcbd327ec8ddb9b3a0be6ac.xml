{"nodes":[{"pos":[12,59],"content":"CMFCToolBarEditBoxButton Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CMFCToolBarEditBoxButton Class | Microsoft Docs","pos":[0,47]}]},{"content":"CMFCToolBarEditBoxButton Class","pos":[1320,1350]},{"pos":[1351,1451],"content":"A toolbar button that contains an edit control ( <bpt id=\"p1\">[</bpt>CEdit Class<ept id=\"p1\">](../../mfc/reference/cedit-class.md)</ept>).","source":"A toolbar button that contains an edit control ( [CEdit Class](../../mfc/reference/cedit-class.md))."},{"content":"Syntax","pos":[1460,1466]},{"content":"Members","pos":[1550,1557]},{"content":"Public Constructors","pos":[1567,1586]},{"content":"Name","pos":[1593,1597]},{"content":"Description","pos":[1598,1609]},{"content":"CMFCToolBarEditBoxButton::CMFCToolBarEditBoxButton","pos":[1648,1698]},{"pos":[1753,1800],"content":"Constructs a <ph id=\"ph1\">`CMFCToolBarEditBoxButton`</ph> object.","source":"Constructs a `CMFCToolBarEditBoxButton` object."},{"content":"Destructor.","pos":[1859,1870]},{"content":"Public Methods","pos":[1881,1895]},{"content":"Name","pos":[1902,1906]},{"content":"Description","pos":[1907,1918]},{"content":"CMFCToolBarEditBoxButton::CanBeStretched","pos":[1957,1997]},{"content":"Specifies whether a user can stretch the button during customization.","pos":[2042,2111]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::CanBeStretched<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__canbestretched)</ept>.)","pos":[2112,2242],"source":" (Overrides [CMFCToolBarButton::CanBeStretched](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__canbestretched).)"},{"content":"CMFCToolBarEditBoxButton::CopyFrom","pos":[2248,2282]},{"content":"Copies the properties of another toolbar button to the current button.","pos":[2321,2391]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::CopyFrom<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__copyfrom)</ept>.)","pos":[2392,2510],"source":" (Overrides [CMFCToolBarButton::CopyFrom](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__copyfrom).)"},{"pos":[2545,2581],"content":"CMFCToolBarEditBoxButton::CreateEdit"},{"content":"Creates a new edit control in the button.","pos":[2622,2663]},{"content":"Used by the framework to create a dynamic instance of this class type.","pos":[2709,2779]},{"content":"CMFCToolBarEditBoxButton::GetByCmd","pos":[2785,2819]},{"pos":[2858,2965],"content":"Retrieves the first <ph id=\"ph1\">`CMFCToolBarEditBoxButton`</ph> object in the application that has the specified command ID.","source":"Retrieves the first `CMFCToolBarEditBoxButton` object in the application that has the specified command ID."},{"content":"CMFCToolBarEditBoxButton::GetContentsAll","pos":[2971,3011]},{"content":"Retrieves the text of the first edit box toolbar control that has the specified command ID.","pos":[3056,3147]},{"content":"CMFCToolBarEditBoxButton::GetContextMenuID","pos":[3153,3195]},{"content":"Retrieves the resource ID of the shortcut menu that is associated with the button.","pos":[3242,3324]},{"content":"CMFCToolBarEditBoxButton::GetEditBorder","pos":[3330,3369]},{"content":"Retrieves the bounding rectangle of the edit part of the edit box button.","pos":[3413,3486]},{"pos":[3521,3557],"content":"CMFCToolBarEditBoxButton::GetEditBox"},{"content":"Returns a pointer to the edit control that is embedded in the button.","pos":[3598,3667]},{"content":"CMFCToolBarEditBoxButton::GetHwnd","pos":[3673,3706]},{"content":"Retrieves the window handle that is associated with the toolbar button.","pos":[3744,3815]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetHwnd<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__gethwnd)</ept>.)","pos":[3816,3932],"source":" (Overrides [CMFCToolBarButton::GetHwnd](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__gethwnd).)"},{"content":"CMFCToolBarEditBoxButton::GetInvalidateRect","pos":[3938,3981]},{"content":"Retrieves the region of the client area of the button that must be redrawn.","pos":[4029,4104]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetInvalidateRect<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__getinvalidaterect)</ept>.)","pos":[4105,4241],"source":" (Overrides [CMFCToolBarButton::GetInvalidateRect](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__getinvalidaterect).)"},{"pos":[4287,4447],"content":"Used by the framework to obtain a pointer to the <bpt id=\"p1\">[</bpt>CRuntimeClass<ept id=\"p1\">](../../mfc/reference/cruntimeclass-structure.md)</ept> object that is associated with this class type.","source":"Used by the framework to obtain a pointer to the [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) object that is associated with this class type."},{"content":"CMFCToolBarEditBoxButton::HaveHotBorder","pos":[4453,4492]},{"content":"Determines whether a border of the button is displayed when a user clicks the button.","pos":[4536,4621]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::HaveHotBorder<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__havehotborder)</ept>.)","pos":[4622,4750],"source":" (Overrides [CMFCToolBarButton::HaveHotBorder](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__havehotborder).)"},{"content":"CMFCToolBarEditBoxButton::IsFlatMode","pos":[4756,4792]},{"content":"Determines whether edit box buttons have a flat style.","pos":[4833,4887]},{"content":"CMFCToolBarEditBoxButton::NotifyCommand","pos":[4893,4932]},{"content":"Specifies whether the button processes the <bpt id=\"p1\">[</bpt>WM_COMMAND<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message.","pos":[4976,5100],"source":"Specifies whether the button processes the [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::NotifyCommand<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__notifycommand)</ept>.)","pos":[5101,5229],"source":" (Overrides [CMFCToolBarButton::NotifyCommand](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__notifycommand).)"},{"content":"CMFCToolBarEditBoxButton::OnAddToCustomizePage","pos":[5235,5281]},{"content":"Called by the framework when the button is added to a <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box.","pos":[5332,5411],"source":"Called by the framework when the button is added to a **Customize** dialog box."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnAddToCustomizePage<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onaddtocustomizepage)</ept>.)","pos":[5412,5554],"source":" (Overrides [CMFCToolBarButton::OnAddToCustomizePage](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onaddtocustomizepage).)"},{"content":"Called by the framework to calculate the size of the button for the specified device context and docking state.","pos":[5603,5714]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnCalculateSize<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncalculatesize)</ept>.)","pos":[5715,5847],"source":" (Overrides [CMFCToolBarButton::OnCalculateSize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncalculatesize).)"},{"content":"CMFCToolBarEditBoxButton::OnChangeParentWnd","pos":[5853,5896]},{"content":"Called by the framework when the button is inserted into a new toolbar.","pos":[5944,6015]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd)</ept>.)","pos":[6016,6152],"source":" (Overrides [CMFCToolBarButton::OnChangeParentWnd](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd).)"},{"content":"CMFCToolBarEditBoxButton::OnClick","pos":[6158,6191]},{"content":"Called by the framework when the user clicks the mouse button.","pos":[6229,6291]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnClick<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onclick)</ept>.)","pos":[6292,6408],"source":" (Overrides [CMFCToolBarButton::OnClick](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onclick).)"},{"content":"CMFCToolBarEditBoxButton::OnCtlColor","pos":[6414,6450]},{"content":"Called by the framework when the parent toolbar handles a <ph id=\"ph1\">`WM_CTLCOLOR`</ph> message.","pos":[6491,6571],"source":"Called by the framework when the parent toolbar handles a `WM_CTLCOLOR` message."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnCtlColor<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onctlcolor)</ept>.)","pos":[6572,6694],"source":" (Overrides [CMFCToolBarButton::OnCtlColor](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onctlcolor).)"},{"content":"Called by the framework to draw the button by using the specified styles and options.","pos":[6734,6819]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnDraw<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondraw)</ept>.)","pos":[6820,6934],"source":" (Overrides [CMFCToolBarButton::OnDraw](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondraw).)"},{"content":"Called by the framework to draw the button in the <bpt id=\"p1\">**</bpt>Commands<ept id=\"p1\">**</ept> pane of the <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept> dialog box.","pos":[6989,7089],"source":"Called by the framework to draw the button in the **Commands** pane of the **Customize** dialog box."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnDrawOnCustomizeList<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondrawoncustomizelist)</ept>.)","pos":[7090,7234],"source":" (Overrides [CMFCToolBarButton::OnDrawOnCustomizeList](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondrawoncustomizelist).)"},{"content":"CMFCToolBarEditBoxButton::OnGlobalFontsChanged","pos":[7240,7286]},{"content":"Called by the framework when the global font has changed.","pos":[7337,7394]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnGlobalFontsChanged<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onglobalfontschanged)</ept>.)","pos":[7395,7537],"source":" (Overrides [CMFCToolBarButton::OnGlobalFontsChanged](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onglobalfontschanged).)"},{"content":"CMFCToolBarEditBoxButton::OnMove","pos":[7543,7575]},{"content":"Called by the framework when the parent toolbar moves.","pos":[7612,7666]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnMove<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onmove)</ept>.)","pos":[7667,7781],"source":" (Overrides [CMFCToolBarButton::OnMove](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onmove).)"},{"content":"CMFCToolBarEditBoxButton::OnShow","pos":[7787,7819]},{"content":"Called by the framework when the button becomes visible or invisible.","pos":[7856,7925]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnShow<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onshow)</ept>.)","pos":[7926,8040],"source":" (Overrides [CMFCToolBarButton::OnShow](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onshow).)"},{"content":"CMFCToolBarEditBoxButton::OnSize","pos":[8046,8078]},{"content":"Called by the framework when the parent toolbar changes its size or position and this change causes the button to change size.","pos":[8115,8241]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnSize<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onsize)</ept>.)","pos":[8242,8356],"source":" (Overrides [CMFCToolBarButton::OnSize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onsize).)"},{"content":"CMFCToolBarEditBoxButton::OnUpdateToolTip","pos":[8362,8403]},{"content":"Called by the framework when the parent toolbar updates its tooltip text.","pos":[8449,8522]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnUpdateToolTip<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onupdatetooltip)</ept>.)","pos":[8523,8655],"source":" (Overrides [CMFCToolBarButton::OnUpdateToolTip](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onupdatetooltip).)"},{"content":"Reads this object from an archive or writes it to an archive.","pos":[8698,8759]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::Serialize<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__serialize)</ept>.)","pos":[8760,8880],"source":" (Overrides [CMFCToolBarButton::Serialize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__serialize).)"},{"content":"Populates the provided <ph id=\"ph1\">`CAccessibilityData`</ph> object with accessibility data from the toolbar button.","pos":[8924,9023],"source":"Populates the provided `CAccessibilityData` object with accessibility data from the toolbar button."},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetACCData<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__setaccdata)</ept>.)","pos":[9024,9146],"source":" (Overrides [CMFCToolBarButton::SetACCData](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__setaccdata).)"},{"pos":[9181,9218],"content":"CMFCToolBarEditBoxButton::SetContents"},{"content":"Sets the text in the edit control of the button.","pos":[9260,9308]},{"pos":[9343,9383],"content":"CMFCToolBarEditBoxButton::SetContentsAll"},{"content":"Finds the edit control button that has a specified command ID, and sets the text in the edit control of that button.","pos":[9428,9544]},{"content":"CMFCToolBarEditBoxButton::SetContextMenuID","pos":[9550,9592]},{"content":"Specifies the resource ID of the shortcut menu that is associated with the button.","pos":[9639,9721]},{"content":"CMFCToolBarEditBoxButton::SetFlatMode","pos":[9727,9764]},{"content":"Specifies the flat style appearance of edit box buttons in the application.","pos":[9806,9881]},{"pos":[9916,9950],"content":"CMFCToolBarEditBoxButton::SetStyle"},{"content":"Specifies the style of the button.","pos":[9989,10023]},{"content":"(Overrides <bpt id=\"p1\">[</bpt>CMFCToolBarButton::SetStyle<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__setstyle)</ept>.)","pos":[10024,10142],"source":" (Overrides [CMFCToolBarButton::SetStyle](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__setstyle).)"},{"content":"Remarks","pos":[10152,10159]},{"content":"To add an edit box button to a toolbar, follow these steps:","pos":[10163,10222]},{"content":"Reserve a dummy resource ID for the button in the parent toolbar resource.","pos":[10232,10306]},{"pos":[10316,10362],"content":"Construct a <ph id=\"ph1\">`CMFCToolBarEditBoxButton`</ph> object.","source":"Construct a `CMFCToolBarEditBoxButton` object."},{"pos":[10372,10607],"content":"In the message handler that processes the <ph id=\"ph1\">`AFX_WM_RESETTOOLBAR`</ph> message, replace the dummy button with the new combo box button by using <bpt id=\"p1\">[</bpt>CMFCToolBar::ReplaceButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__replacebutton)</ept>.","source":"In the message handler that processes the `AFX_WM_RESETTOOLBAR` message, replace the dummy button with the new combo box button by using [CMFCToolBar::ReplaceButton](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__replacebutton)."},{"pos":[10614,10739],"content":"For more information, see <bpt id=\"p1\">[</bpt>Walkthrough: Putting Controls On Toolbars<ept id=\"p1\">](../../mfc/walkthrough-putting-controls-on-toolbars.md)</ept>.","source":"For more information, see [Walkthrough: Putting Controls On Toolbars](../../mfc/walkthrough-putting-controls-on-toolbars.md)."},{"content":"Example","pos":[10748,10755]},{"content":"The following example demonstrates how to use various methods in the <ph id=\"ph1\">`CMFCToolBarEditBoxButton`</ph> class.","pos":[10759,10861],"source":"The following example demonstrates how to use various methods in the `CMFCToolBarEditBoxButton` class."},{"content":"The example shows how to specify that a user can stretch the button during customization, specify that a border of the button is displayed when a user clicks the button, set the text in the text box control, specify the flat style appearance of edit box buttons in the application, and specify the style of a toolbar edit box control.","pos":[10862,11196]},{"pos":[11214,11234],"content":"NVC_MFC_RibbonApp#40"},{"content":"Inheritance Hierarchy","pos":[11319,11340]},{"content":"CObject","pos":[11345,11352]},{"content":"CMFCToolBarButton","pos":[11399,11416]},{"content":"CMFCToolBarEditBoxButton","pos":[11473,11497]},{"content":"Requirements","pos":[11562,11574]},{"pos":[11578,11615],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxtoolbareditboxbutton.h","source":"**Header:** afxtoolbareditboxbutton.h"},{"pos":[11682,11722],"content":"CMFCToolBarEditBoxButton::CanBeStretched"},{"content":"Specifies whether a user can stretch the button during customization.","pos":[11726,11795]},{"content":"Return Value","pos":[11860,11872]},{"pos":[11876,11903],"content":"This method returns <ph id=\"ph1\">`TRUE`</ph>.","source":"This method returns `TRUE`."},{"content":"Remarks","pos":[11913,11920]},{"content":"By default, the framework does not allow the user to stretch a toolbar button during customization.","pos":[11924,12023]},{"content":"This method extends the base class implementation ( <bpt id=\"p1\">[</bpt>CMFCToolBarButton::CanBeStretched<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__canbestretched)</ept>) by allowing the user to stretch an edit box toolbar button during customization.","pos":[12024,12275],"source":" This method extends the base class implementation ( [CMFCToolBarButton::CanBeStretched](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__canbestretched)) by allowing the user to stretch an edit box toolbar button during customization."},{"pos":[12352,12402],"content":"CMFCToolBarEditBoxButton::CMFCToolBarEditBoxButton"},{"pos":[12406,12508],"content":"Constructs a <bpt id=\"p1\">[</bpt>CMFCToolBarEditBoxButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept> object.","source":"Constructs a [CMFCToolBarEditBoxButton](../../mfc/reference/cmfctoolbareditboxbutton-class.md) object."},{"content":"Parameters","pos":[12649,12659]},{"content":"[in]","pos":[12663,12667]},{"content":"Specifies the control ID.","pos":[12678,12703]},{"content":"[in]","pos":[12710,12714]},{"content":"Specifies the zero-based index of a toolbar image.","pos":[12727,12777]},{"content":"The image is located in the <bpt id=\"p1\">[</bpt>CMFCToolBarImages Class<ept id=\"p1\">](../../mfc/reference/cmfctoolbarimages-class.md)</ept> object that <bpt id=\"p2\">[</bpt>CMFCToolBar Class<ept id=\"p2\">](../../mfc/reference/cmfctoolbar-class.md)</ept> class maintains.","pos":[12778,12970],"source":" The image is located in the [CMFCToolBarImages Class](../../mfc/reference/cmfctoolbarimages-class.md) object that [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md) class maintains."},{"content":"[in]","pos":[12977,12981]},{"content":"Specifies the edit control style.","pos":[12995,13028]},{"content":"[in]","pos":[13035,13039]},{"content":"Specifies the width in pixels of the edit control.","pos":[13052,13102]},{"content":"Remarks","pos":[13112,13119]},{"content":"The default constructor sets the edit control style to the following combination:","pos":[13123,13204]},{"content":"The default width of the control is 150 pixels.","pos":[13258,13305]},{"pos":[13366,13400],"content":"CMFCToolBarEditBoxButton::CopyFrom"},{"content":"Copies the properties of another toolbar button to the current button.","pos":[13404,13474]},{"content":"Parameters","pos":[13552,13562]},{"content":"[in]","pos":[13566,13570]},{"content":"A reference to the source button from which to copy.","pos":[13580,13632]},{"content":"Remarks","pos":[13642,13649]},{"content":"Call this method to copy another toolbar button to this toolbar button.","pos":[13653,13724]},{"content":"must be of type <ph id=\"ph1\">`CMFCToolBarEditBoxButton`</ph>.","pos":[13731,13774],"source":" must be of type `CMFCToolBarEditBoxButton`."},{"pos":[13837,13873],"content":"CMFCToolBarEditBoxButton::CreateEdit"},{"content":"Creates a new edit control in the button.","pos":[13877,13918]},{"content":"Parameters","pos":[14018,14028]},{"content":"Specifies the parent window of the edit control.","pos":[14053,14101]},{"content":"It must not be NULL.","pos":[14102,14122]},{"content":"Specifies the edit control's size and position.","pos":[14144,14191]},{"content":"Return Value","pos":[14201,14213]},{"pos":[14217,14321],"content":"A pointer to the newly created edit control; it is <ph id=\"ph1\">`NULL`</ph> if the control's creation and attachment fail.","source":"A pointer to the newly created edit control; it is `NULL` if the control's creation and attachment fail."},{"content":"Remarks","pos":[14331,14338]},{"content":"You construct a <bpt id=\"p1\">[</bpt>CMFCToolBarEditBoxButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept> object in two steps.","pos":[14342,14460],"source":"You construct a [CMFCToolBarEditBoxButton](../../mfc/reference/cmfctoolbareditboxbutton-class.md) object in two steps."},{"content":"First call the constructor, and then call <ph id=\"ph1\">`CreateEdit,`</ph> which creates the Windows edit control and attaches it to the <ph id=\"ph2\">`CMFCToolBarEditBoxButton`</ph> object.","pos":[14461,14613],"source":" First call the constructor, and then call `CreateEdit,` which creates the Windows edit control and attaches it to the `CMFCToolBarEditBoxButton` object."},{"pos":[14674,14708],"content":"CMFCToolBarEditBoxButton::GetByCmd"},{"pos":[14712,14819],"content":"Retrieves the first <ph id=\"ph1\">`CMFCToolBarEditBoxButton`</ph> object in the application that has the specified command ID.","source":"Retrieves the first `CMFCToolBarEditBoxButton` object in the application that has the specified command ID."},{"content":"Parameters","pos":[14909,14919]},{"content":"[in]","pos":[14923,14927]},{"content":"The command ID of the button to retrieve.","pos":[14939,14980]},{"content":"Return Value","pos":[14990,15002]},{"pos":[15006,15139],"content":"The first <ph id=\"ph1\">`CMFCToolBarEditBoxButton`</ph> object in the application that has the specified command ID, or <ph id=\"ph2\">`NULL`</ph> if no such object exists.","source":"The first `CMFCToolBarEditBoxButton` object in the application that has the specified command ID, or `NULL` if no such object exists."},{"content":"Remarks","pos":[15149,15156]},{"pos":[15160,15485],"content":"This shared utility method is used by methods such as <bpt id=\"p1\">[</bpt>CMFCToolBarEditBoxButton::SetContentsAll<ept id=\"p1\">](#cmfctoolbareditboxbutton__setcontentsall)</ept> and <bpt id=\"p2\">[</bpt>CMFCToolBarEditBoxButton::GetContentsAll<ept id=\"p2\">](#cmfctoolbareditboxbutton__getcontentsall)</ept> to set or get the text of the first edit box toolbar control that has the specified command ID.","source":"This shared utility method is used by methods such as [CMFCToolBarEditBoxButton::SetContentsAll](#cmfctoolbareditboxbutton__setcontentsall) and [CMFCToolBarEditBoxButton::GetContentsAll](#cmfctoolbareditboxbutton__getcontentsall) to set or get the text of the first edit box toolbar control that has the specified command ID."},{"pos":[15552,15592],"content":"CMFCToolBarEditBoxButton::GetContentsAll"},{"content":"Retrieves the text of the first edit box toolbar control that has the specified command ID.","pos":[15596,15687]},{"content":"Parameters","pos":[15765,15775]},{"content":"[in]","pos":[15779,15783]},{"content":"The command ID of the button from which to retrieve contents.","pos":[15795,15856]},{"content":"Return Value","pos":[15866,15878]},{"pos":[15882,15996],"content":"A <ph id=\"ph1\">`CString`</ph> object that contains the text of the first edit box toolbar control that has the specified command ID.","source":"A `CString` object that contains the text of the first edit box toolbar control that has the specified command ID."},{"content":"Remarks","pos":[16006,16013]},{"pos":[16017,16125],"content":"This method returns the empty string if no <ph id=\"ph1\">`CMFCToolBarEditBoxButton`</ph> objects have the specified command ID.","source":"This method returns the empty string if no `CMFCToolBarEditBoxButton` objects have the specified command ID."},{"pos":[16194,16236],"content":"CMFCToolBarEditBoxButton::GetContextMenuID"},{"content":"Retrieves the resource ID of the shortcut menu that is associated with the button.","pos":[16240,16322]},{"content":"Return Value","pos":[16372,16384]},{"content":"The resource ID of the shortcut menu that is associated with the button or 0 if the button has no associated shortcut menu.","pos":[16388,16511]},{"content":"Remarks","pos":[16521,16528]},{"content":"The framework uses the resource ID to create the shortcut menu when the user right-clicks on the button.","pos":[16532,16636]},{"pos":[16702,16741],"content":"CMFCToolBarEditBoxButton::GetEditBorder"},{"content":"Retrieves the bounding rectangle of the edit part of the edit box button.","pos":[16745,16818]},{"content":"Parameters","pos":[16890,16900]},{"content":"[out]","pos":[16904,16909]},{"content":"A reference to the <ph id=\"ph1\">`CRect`</ph> object that receives the bounding rectangle.","pos":[16926,16997],"source":" A reference to the `CRect` object that receives the bounding rectangle."},{"content":"Remarks","pos":[17007,17014]},{"content":"This method retrieves the bounding rectangle of the edit control in client coordinates.","pos":[17018,17105]},{"content":"It expands the size of the rectangle in each direction by one pixel.","pos":[17106,17174]},{"pos":[17181,17400],"content":"The <bpt id=\"p1\">[</bpt>CMFCVisualManager::OnDrawEditBorder<ept id=\"p1\">](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__ondraweditborder)</ept> method calls this method when it draws the border around a <ph id=\"ph1\">`CMFCToolBarEditBoxButton`</ph> object.","source":"The [CMFCVisualManager::OnDrawEditBorder](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__ondraweditborder) method calls this method when it draws the border around a `CMFCToolBarEditBoxButton` object."},{"pos":[17463,17499],"content":"CMFCToolBarEditBoxButton::GetEditBox"},{"pos":[17503,17617],"content":"Returns a pointer to the <bpt id=\"p1\">[</bpt>CEdit Class<ept id=\"p1\">](../../mfc/reference/cedit-class.md)</ept> control that is embedded in the button.","source":"Returns a pointer to the [CEdit Class](../../mfc/reference/cedit-class.md) control that is embedded in the button."},{"content":"Return Value","pos":[17672,17684]},{"content":"A pointer to the <bpt id=\"p1\">[</bpt>CEdit Class<ept id=\"p1\">](../../mfc/reference/cedit-class.md)</ept> control that the button contains.","pos":[17688,17788],"source":"A pointer to the [CEdit Class](../../mfc/reference/cedit-class.md) control that the button contains."},{"content":"It is <ph id=\"ph1\">`NULL`</ph> if the <ph id=\"ph2\">`CEdit`</ph> control has not been created yet.","pos":[17789,17850],"source":" It is `NULL` if the `CEdit` control has not been created yet."},{"content":"Remarks","pos":[17860,17867]},{"pos":[17871,17991],"content":"You create the <ph id=\"ph1\">`CEdit`</ph> control by calling <bpt id=\"p1\">[</bpt>CMFCToolBarEditBoxButton::CreateEdit<ept id=\"p1\">](#cmfctoolbareditboxbutton__createedit)</ept>.","source":"You create the `CEdit` control by calling [CMFCToolBarEditBoxButton::CreateEdit](#cmfctoolbareditboxbutton__createedit)."},{"pos":[18051,18084],"content":"CMFCToolBarEditBoxButton::GetHwnd"},{"content":"Retrieves the window handle that is associated with the toolbar button.","pos":[18088,18159]},{"content":"Return Value","pos":[18208,18220]},{"content":"The window handle that is associated with the button.","pos":[18224,18277]},{"content":"Remarks","pos":[18287,18294]},{"pos":[18298,18514],"content":"This method overrides the <bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetHwnd<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__gethwnd)</ept> method by returning the window handle of the edit control part of the edit box button.","source":"This method overrides the [CMFCToolBarButton::GetHwnd](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__gethwnd) method by returning the window handle of the edit control part of the edit box button."},{"pos":[18584,18627],"content":"CMFCToolBarEditBoxButton::GetInvalidateRect"},{"content":"Retrieves the region of the client area of the button that must be redrawn.","pos":[18631,18706]},{"content":"Return Value","pos":[18781,18793]},{"pos":[18797,18861],"content":"A <ph id=\"ph1\">`CRect`</ph> object that specifies the region that must be redrawn.","source":"A `CRect` object that specifies the region that must be redrawn."},{"content":"Remarks","pos":[18871,18878]},{"pos":[18882,19112],"content":"This method extends the base class implementation, <bpt id=\"p1\">[</bpt>CMFCToolBarButton::GetInvalidateRect<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__getinvalidaterect)</ept>, by including in the region the area of the text label.","source":"This method extends the base class implementation, [CMFCToolBarButton::GetInvalidateRect](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__getinvalidaterect), by including in the region the area of the text label."},{"pos":[19178,19217],"content":"CMFCToolBarEditBoxButton::HaveHotBorder"},{"content":"Determines whether a border of the button is displayed when a user clicks the button.","pos":[19221,19306]},{"content":"Return Value","pos":[19370,19382]},{"content":"Nonzero if a button displays its border when selected; otherwise 0.","pos":[19386,19453]},{"content":"Remarks","pos":[19463,19470]},{"pos":[19474,19697],"content":"This method extends the base class implementation, <bpt id=\"p1\">[</bpt>CMFCToolBarButton::HaveHotBorder<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__havehotborder)</ept>, by returning a nonzero value if the control is visible.","source":"This method extends the base class implementation, [CMFCToolBarButton::HaveHotBorder](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__havehotborder), by returning a nonzero value if the control is visible."},{"pos":[19760,19796],"content":"CMFCToolBarEditBoxButton::IsFlatMode"},{"content":"Determines whether edit box buttons have a flat style.","pos":[19800,19854]},{"content":"Return Value","pos":[19915,19927]},{"content":"Nonzero if the buttons have a flat style; otherwise, 0.","pos":[19931,19986]},{"content":"Remarks","pos":[19996,20003]},{"content":"By default, edit box buttons have a flat style.","pos":[20007,20054]},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCToolBarEditBoxButton::SetFlatMode<ept id=\"p1\">](#cmfctoolbareditboxbutton__setflatmode)</ept> method to change the flat style appearance for your application.","pos":[20055,20207],"source":" Use the [CMFCToolBarEditBoxButton::SetFlatMode](#cmfctoolbareditboxbutton__setflatmode) method to change the flat style appearance for your application."},{"pos":[20273,20312],"content":"CMFCToolBarEditBoxButton::NotifyCommand"},{"pos":[20316,20440],"content":"Specifies whether the button processes the <bpt id=\"p1\">[</bpt>WM_COMMAND<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message.","source":"Specifies whether the button processes the [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message."},{"content":"Parameters","pos":[20510,20520]},{"content":"[in]","pos":[20524,20528]},{"content":"The notification message that is associated with the command.","pos":[20546,20607]},{"content":"Return Value","pos":[20617,20629]},{"pos":[20640,20768],"content":"if the button processes the <ph id=\"ph1\">`WM_COMMAND`</ph> message, or <ph id=\"ph2\">`FALSE`</ph> to indicate that the message must be handled by the parent toolbar.","source":" if the button processes the `WM_COMMAND` message, or `FALSE` to indicate that the message must be handled by the parent toolbar."},{"content":"Remarks","pos":[20778,20785]},{"pos":[20789,20950],"content":"The framework calls this method when it is about to send a <bpt id=\"p1\">[</bpt>WM_COMMAND<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms647591)</ept> message to the parent window.","source":"The framework calls this method when it is about to send a [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message to the parent window."},{"content":"This method extends the base class implementation ( <bpt id=\"p1\">[</bpt>CMFCToolBarButton::NotifyCommand<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__notifycommand)</ept>) by processing the <bpt id=\"p2\">[</bpt>EN_UPDATE<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb761687)</ept> notification.","pos":[20957,21229],"source":"This method extends the base class implementation ( [CMFCToolBarButton::NotifyCommand](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__notifycommand)) by processing the [EN_UPDATE](http://msdn.microsoft.com/library/windows/desktop/bb761687) notification."},{"content":"For each edit box with the same command ID as this object, it sets its text label to the text label of this object.","pos":[21230,21345]},{"pos":[21418,21464],"content":"CMFCToolBarEditBoxButton::OnAddToCustomizePage"},{"pos":[21468,21547],"content":"Called by the framework when the button is added to a <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box.","source":"Called by the framework when the button is added to a **Customize** dialog box."},{"content":"Remarks","pos":[21609,21616]},{"content":"This method extends the base class implementation ( <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnAddToCustomizePage<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onaddtocustomizepage)</ept>) by copying the properties from the edit box control in any toolbar that has the same command ID as this object.","pos":[21620,21914],"source":"This method extends the base class implementation ( [CMFCToolBarButton::OnAddToCustomizePage](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onaddtocustomizepage)) by copying the properties from the edit box control in any toolbar that has the same command ID as this object."},{"content":"This method does nothing if no toolbar has an edit box control that has the same command ID as this object.","pos":[21915,22022]},{"pos":[22029,22184],"content":"For more information about the <bpt id=\"p1\">**</bpt>Customize<ept id=\"p1\">**</ept> dialog box, see <bpt id=\"p2\">[</bpt>CMFCToolBarsCustomizeDialog Class<ept id=\"p2\">](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept>.","source":"For more information about the **Customize** dialog box, see [CMFCToolBarsCustomizeDialog Class](../../mfc/reference/cmfctoolbarscustomizedialog-class.md)."},{"pos":[22254,22297],"content":"CMFCToolBarEditBoxButton::OnChangeParentWnd"},{"content":"Called by the framework when the button is inserted into a new toolbar.","pos":[22301,22372]},{"content":"Parameters","pos":[22447,22457]},{"content":"[in]","pos":[22461,22465]},{"content":"A pointer to the new parent window.","pos":[22482,22517]},{"content":"Remarks","pos":[22527,22534]},{"pos":[22538,22759],"content":"This method overrides the base class implementation ( <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnChangeParentWnd<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd)</ept>) by recreating the internal <ph id=\"ph1\">`CEdit`</ph> object.","source":"This method overrides the base class implementation ( [CMFCToolBarButton::OnChangeParentWnd](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd)) by recreating the internal `CEdit` object."},{"pos":[22819,22852],"content":"CMFCToolBarEditBoxButton::OnClick"},{"content":"Called by the framework when the user clicks the mouse button.","pos":[22856,22918]},{"content":"Parameters","pos":[23008,23018]},{"content":"[in]","pos":[23022,23026]},{"content":"Unused.","pos":[23037,23044]},{"content":"[in]","pos":[23051,23055]},{"content":"Unused.","pos":[23068,23075]},{"content":"Return Value","pos":[23085,23097]},{"content":"Nonzero if the button processes the click message; otherwise 0.","pos":[23101,23164]},{"content":"Remarks","pos":[23174,23181]},{"pos":[23185,23415],"content":"This method overrides the base class implementation ( <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnClick<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onclick)</ept>) by returning a nonzero value if the internal <ph id=\"ph1\">`CEdit`</ph> object is visible.","source":"This method overrides the base class implementation ( [CMFCToolBarButton::OnClick](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onclick)) by returning a nonzero value if the internal `CEdit` object is visible."},{"pos":[23478,23514],"content":"CMFCToolBarEditBoxButton::OnCtlColor"},{"pos":[23518,23598],"content":"Called by the framework when the parent toolbar handles a <ph id=\"ph1\">`WM_CTLCOLOR`</ph> message.","source":"Called by the framework when the parent toolbar handles a `WM_CTLCOLOR` message."},{"content":"Parameters","pos":[23687,23697]},{"content":"[in]","pos":[23701,23705]},{"content":"The device context that displays the button.","pos":[23715,23759]},{"content":"[in]","pos":[23766,23770]},{"content":"Unused.","pos":[23786,23793]},{"content":"Return Value","pos":[23803,23815]},{"content":"A handle to the global window brush.","pos":[23819,23855]},{"content":"Remarks","pos":[23865,23872]},{"pos":[23876,24169],"content":"This method overrides the base class implementation ( <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnCtlColor<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onctlcolor)</ept>) by setting the text and background colors of the provided device context to the global text and background colors, respectively.","source":"This method overrides the base class implementation ( [CMFCToolBarButton::OnCtlColor](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onctlcolor)) by setting the text and background colors of the provided device context to the global text and background colors, respectively."},{"pos":[24176,24340],"content":"For more information about global options that are available to your application, see <bpt id=\"p1\">[</bpt>AFX_GLOBAL_DATA Structure<ept id=\"p1\">](../../mfc/reference/afx-global-data-structure.md)</ept>.","source":"For more information about global options that are available to your application, see [AFX_GLOBAL_DATA Structure](../../mfc/reference/afx-global-data-structure.md)."},{"pos":[24413,24459],"content":"CMFCToolBarEditBoxButton::OnGlobalFontsChanged"},{"content":"Called by the framework when the global font has changed.","pos":[24463,24520]},{"content":"Remarks","pos":[24582,24589]},{"pos":[24593,24839],"content":"This method extends the base class implementation ( <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnGlobalFontsChanged<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onglobalfontschanged)</ept>) by changing the font of the control to that of the global font.","source":"This method extends the base class implementation ( [CMFCToolBarButton::OnGlobalFontsChanged](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onglobalfontschanged)) by changing the font of the control to that of the global font."},{"pos":[24846,25010],"content":"For more information about global options that are available to your application, see <bpt id=\"p1\">[</bpt>AFX_GLOBAL_DATA Structure<ept id=\"p1\">](../../mfc/reference/afx-global-data-structure.md)</ept>.","source":"For more information about global options that are available to your application, see [AFX_GLOBAL_DATA Structure](../../mfc/reference/afx-global-data-structure.md)."},{"pos":[25069,25101],"content":"CMFCToolBarEditBoxButton::OnMove"},{"content":"Called by the framework when the parent toolbar moves.","pos":[25105,25159]},{"content":"Remarks","pos":[25207,25214]},{"pos":[25218,25433],"content":"This method overrides the default class implementation ( <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnMove<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onmove)</ept>) by updating the position of the internal <ph id=\"ph1\">`CEdit`</ph> object","source":"This method overrides the default class implementation ( [CMFCToolBarButton::OnMove](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onmove)) by updating the position of the internal `CEdit` object"},{"pos":[25492,25524],"content":"CMFCToolBarEditBoxButton::OnShow"},{"content":"Called by the framework when the button becomes visible or invisible.","pos":[25528,25597]},{"content":"Parameters","pos":[25655,25665]},{"content":"[in]","pos":[25669,25673]},{"content":"Specifies whether the button is visible.","pos":[25685,25725]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the button is visible.","pos":[25726,25777],"source":" If this parameter is `TRUE`, the button is visible."},{"content":"Otherwise, the button is not visible.","pos":[25778,25815]},{"content":"Remarks","pos":[25825,25832]},{"content":"This method extends the base class implementation ( <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnShow<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onshow)</ept>) by displaying the button if <ph id=\"ph1\">`bShow`</ph> is <ph id=\"ph2\">`TRUE`</ph>.","pos":[25836,26037],"source":"This method extends the base class implementation ( [CMFCToolBarButton::OnShow](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onshow)) by displaying the button if `bShow` is `TRUE`."},{"content":"Otherwise, this method hides the button.","pos":[26038,26078]},{"pos":[26137,26169],"content":"CMFCToolBarEditBoxButton::OnSize"},{"content":"Called by the framework when the parent toolbar changes its size or position and this change causes the button to change size.","pos":[26173,26299]},{"content":"Parameters","pos":[26356,26366]},{"content":"[in]","pos":[26370,26374]},{"content":"The new width of the button, in pixels.","pos":[26386,26425]},{"content":"Remarks","pos":[26435,26442]},{"pos":[26446,26670],"content":"This method overrides the default class implementation, <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnSize<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onsize)</ept>, by updating the size and position of the internal <ph id=\"ph1\">`CEdit`</ph> object.","source":"This method overrides the default class implementation, [CMFCToolBarButton::OnSize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onsize), by updating the size and position of the internal `CEdit` object."},{"pos":[26738,26779],"content":"CMFCToolBarEditBoxButton::OnUpdateToolTip"},{"content":"Called by the framework when the parent toolbar updates its tooltip text.","pos":[26783,26856]},{"content":"Parameters","pos":[27010,27020]},{"content":"[in]","pos":[27024,27028]},{"content":"Unused.","pos":[27045,27052]},{"content":"[in]","pos":[27059,27063]},{"content":"Unused.","pos":[27082,27089]},{"content":"[in]","pos":[27096,27100]},{"content":"The control that displays the tooltip text.","pos":[27117,27160]},{"content":"[out]","pos":[27167,27172]},{"content":"A <ph id=\"ph1\">`CString`</ph> object that receives the updated tooltip text.","pos":[27182,27240],"source":" A `CString` object that receives the updated tooltip text."},{"content":"Return Value","pos":[27250,27262]},{"content":"Nonzero if the method updates the tooltip text; otherwise 0.","pos":[27266,27326]},{"content":"Remarks","pos":[27336,27343]},{"content":"This method extends the base class implementation ( <bpt id=\"p1\">[</bpt>CMFCToolBarButton::OnUpdateToolTip<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onupdatetooltip)</ept>) by displaying the tooltip text that is associated with the edit part of the button.","pos":[27347,27603],"source":"This method extends the base class implementation ( [CMFCToolBarButton::OnUpdateToolTip](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onupdatetooltip)) by displaying the tooltip text that is associated with the edit part of the button."},{"content":"If the internal <ph id=\"ph1\">`CEdit`</ph> object is <ph id=\"ph2\">`NULL`</ph> or the window handle of the <ph id=\"ph3\">`CEdit`</ph> object does not identify an existing window, this method does nothing and returns <ph id=\"ph4\">`FALSE`</ph>.","pos":[27604,27771],"source":" If the internal `CEdit` object is `NULL` or the window handle of the `CEdit` object does not identify an existing window, this method does nothing and returns `FALSE`."},{"pos":[27835,27872],"content":"CMFCToolBarEditBoxButton::SetContents"},{"content":"Sets the text in the text box control.","pos":[27876,27914]},{"content":"Parameters","pos":[27991,28001]},{"content":"Specifies the new text to set.","pos":[28025,28055]},{"pos":[28122,28162],"content":"CMFCToolBarEditBoxButton::SetContentsAll"},{"pos":[28166,28343],"content":"Finds a <bpt id=\"p1\">[</bpt>CMFCToolBarEditBoxButton<ept id=\"p1\">](../../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept> object that has a specified command ID and sets the specified text within its text box.","source":"Finds a [CMFCToolBarEditBoxButton](../../mfc/reference/cmfctoolbareditboxbutton-class.md) object that has a specified command ID and sets the specified text within its text box."},{"content":"Parameters","pos":[28447,28457]},{"content":"[in]","pos":[28461,28465]},{"content":"Specifies the command ID of the control for which the text will be changed.","pos":[28477,28552]},{"content":"[in]","pos":[28559,28563]},{"content":"Specifies the new text to set.","pos":[28581,28611]},{"content":"Return Value","pos":[28621,28633]},{"pos":[28637,28755],"content":"Nonzero if the text was set; 0 if the <ph id=\"ph1\">`CMFCToolBarEditBoxButton`</ph> control with the specified command ID does not exist.","source":"Nonzero if the text was set; 0 if the `CMFCToolBarEditBoxButton` control with the specified command ID does not exist."},{"pos":[28824,28866],"content":"CMFCToolBarEditBoxButton::SetContextMenuID"},{"content":"Specifies the resource ID of the shortcut menu that is associated with the button.","pos":[28870,28952]},{"content":"Parameters","pos":[29014,29024]},{"content":"[in]","pos":[29028,29032]},{"content":"The resource ID of the shortcut menu.","pos":[29044,29081]},{"content":"Remarks","pos":[29091,29098]},{"content":"The framework uses the resource ID to create the shortcut menu when the user right-clicks the toolbar button.","pos":[29102,29211]},{"pos":[29275,29312],"content":"CMFCToolBarEditBoxButton::SetFlatMode"},{"content":"Specifies the flat style appearance of edit box buttons in the application.","pos":[29316,29391]},{"content":"Parameters","pos":[29470,29480]},{"content":"[in]","pos":[29484,29488]},{"content":"The flat style for edit box buttons.","pos":[29500,29536]},{"content":"If this parameter is <ph id=\"ph1\">`TRUE`</ph>, the flat style appearance is enabled; otherwise the flat style appearance is disabled.","pos":[29537,29652],"source":" If this parameter is `TRUE`, the flat style appearance is enabled; otherwise the flat style appearance is disabled."},{"content":"Remarks","pos":[29662,29669]},{"content":"The default flat style for edit box buttons is <ph id=\"ph1\">`TRUE`</ph>.","pos":[29673,29727],"source":"The default flat style for edit box buttons is `TRUE`."},{"content":"Use the <bpt id=\"p1\">[</bpt>CMFCToolBarEditBoxButton::IsFlatMode<ept id=\"p1\">](#cmfctoolbareditboxbutton__isflatmode)</ept> method to retrieve the flat style appearance for your application.","pos":[29728,29880],"source":" Use the [CMFCToolBarEditBoxButton::IsFlatMode](#cmfctoolbareditboxbutton__isflatmode) method to retrieve the flat style appearance for your application."},{"pos":[29941,29975],"content":"CMFCToolBarEditBoxButton::SetStyle"},{"content":"Specifies the style of a toolbar edit box control.","pos":[29979,30029]},{"content":"Parameters","pos":[30090,30100]},{"content":"[in]","pos":[30104,30108]},{"content":"A new style to set.","pos":[30121,30140]},{"content":"Remarks","pos":[30150,30157]},{"content":"This method sets <bpt id=\"p1\">[</bpt>CMFCToolBarButton::m_nStyle<ept id=\"p1\">](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__m_nstyle)</ept> to <ph id=\"ph1\">`nStyle`</ph> It also disables the text box when the application is in Customize mode, and enables it when the application is not in Customize mode (see <bpt id=\"p2\">[</bpt>CMFCToolBar::SetCustomizeMode<ept id=\"p2\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setcustomizemode)</ept> and <bpt id=\"p3\">[</bpt>CMFCToolBar::IsCustomizeMode<ept id=\"p3\">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__iscustomizemode)</ept>).","pos":[30161,30646],"source":"This method sets [CMFCToolBarButton::m_nStyle](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__m_nstyle) to `nStyle` It also disables the text box when the application is in Customize mode, and enables it when the application is not in Customize mode (see [CMFCToolBar::SetCustomizeMode](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setcustomizemode) and [CMFCToolBar::IsCustomizeMode](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__iscustomizemode))."},{"content":"See <bpt id=\"p1\">[</bpt>ToolBar Control Styles<ept id=\"p1\">](../../mfc/reference/toolbar-control-styles.md)</ept> for a list of valid style flags.","pos":[30647,30755],"source":" See [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md) for a list of valid style flags."},{"content":"See Also","pos":[30764,30772]},{"content":"Hierarchy Chart","pos":[30777,30792]},{"content":"Classes","pos":[30829,30836]},{"content":"CMFCToolBarButton Class","pos":[30879,30902]},{"content":"CEdit Class","pos":[30957,30968]},{"content":"CMFCToolBar::ReplaceButton","pos":[31011,31037]},{"content":"Walkthrough: Putting Controls On Toolbars","pos":[31113,31154]}],"content":"---\ntitle: \"CMFCToolBarEditBoxButton Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"OnDrawOnCustomizeList\"\n  - \"OnDraw\"\n  - \"CMFCToolBarEditBoxButton::OnDrawOnCustomizeList\"\n  - \"CMFCToolBarEditBoxButton.SetACCData\"\n  - \"CMFCToolBarEditBoxButton::OnDraw\"\n  - \"OnCalculateSize\"\n  - \"SetACCData\"\n  - \"CMFCToolBarEditBoxButton\"\n  - \"CMFCToolBarEditBoxButton::SetACCData\"\n  - \"CMFCToolBarEditBoxButton::Serialize\"\n  - \"CMFCToolBarEditBoxButton.OnDraw\"\n  - \"CMFCToolBarEditBoxButton.OnDrawOnCustomizeList\"\n  - \"CMFCToolBarEditBoxButton::OnCalculateSize\"\n  - \"Serialize\"\n  - \"CMFCToolBarEditBoxButton.Serialize\"\n  - \"CMFCToolBarEditBoxButton.OnCalculateSize\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CMFCToolBarEditBoxButton class\"\n  - \"SetACCData method\"\n  - \"OnCalculateSize method\"\n  - \"OnDraw method\"\n  - \"OnDrawOnCustomizeList method\"\n  - \"Serialize method\"\nms.assetid: b21d9b67-6bf7-4ca9-bd62-b237756e0ab3\ncaps.latest.revision: 28\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CMFCToolBarEditBoxButton Class\nA toolbar button that contains an edit control ( [CEdit Class](../../mfc/reference/cedit-class.md)).  \n  \n## Syntax  \n  \n```  \nclass CMFCToolBarEditBoxButton : public CMFCToolBarButton  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarEditBoxButton::CMFCToolBarEditBoxButton](#cmfctoolbareditboxbutton__cmfctoolbareditboxbutton)|Constructs a `CMFCToolBarEditBoxButton` object.|  \n|`CMFCToolBarEditBoxButton::~CMFCToolBarEditBoxButton`|Destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CMFCToolBarEditBoxButton::CanBeStretched](#cmfctoolbareditboxbutton__canbestretched)|Specifies whether a user can stretch the button during customization. (Overrides [CMFCToolBarButton::CanBeStretched](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__canbestretched).)|  \n|[CMFCToolBarEditBoxButton::CopyFrom](#cmfctoolbareditboxbutton__copyfrom)|Copies the properties of another toolbar button to the current button. (Overrides [CMFCToolBarButton::CopyFrom](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__copyfrom).)|  \n|`CMFCToolBarEditBoxButton::` [CMFCToolBarEditBoxButton::CreateEdit](#cmfctoolbareditboxbutton__createedit)|Creates a new edit control in the button.|  \n|`CMFCToolBarEditBoxButton::CreateObject`|Used by the framework to create a dynamic instance of this class type.|  \n|[CMFCToolBarEditBoxButton::GetByCmd](#cmfctoolbareditboxbutton__getbycmd)|Retrieves the first `CMFCToolBarEditBoxButton` object in the application that has the specified command ID.|  \n|[CMFCToolBarEditBoxButton::GetContentsAll](#cmfctoolbareditboxbutton__getcontentsall)|Retrieves the text of the first edit box toolbar control that has the specified command ID.|  \n|[CMFCToolBarEditBoxButton::GetContextMenuID](#cmfctoolbareditboxbutton__getcontextmenuid)|Retrieves the resource ID of the shortcut menu that is associated with the button.|  \n|[CMFCToolBarEditBoxButton::GetEditBorder](#cmfctoolbareditboxbutton__geteditborder)|Retrieves the bounding rectangle of the edit part of the edit box button.|  \n|`CMFCToolBarEditBoxButton::` [CMFCToolBarEditBoxButton::GetEditBox](#cmfctoolbareditboxbutton__geteditbox)|Returns a pointer to the edit control that is embedded in the button.|  \n|[CMFCToolBarEditBoxButton::GetHwnd](#cmfctoolbareditboxbutton__gethwnd)|Retrieves the window handle that is associated with the toolbar button. (Overrides [CMFCToolBarButton::GetHwnd](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__gethwnd).)|  \n|[CMFCToolBarEditBoxButton::GetInvalidateRect](#cmfctoolbareditboxbutton__getinvalidaterect)|Retrieves the region of the client area of the button that must be redrawn. (Overrides [CMFCToolBarButton::GetInvalidateRect](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__getinvalidaterect).)|  \n|`CMFCToolBarEditBoxButton::GetThisClass`|Used by the framework to obtain a pointer to the [CRuntimeClass](../../mfc/reference/cruntimeclass-structure.md) object that is associated with this class type.|  \n|[CMFCToolBarEditBoxButton::HaveHotBorder](#cmfctoolbareditboxbutton__havehotborder)|Determines whether a border of the button is displayed when a user clicks the button. (Overrides [CMFCToolBarButton::HaveHotBorder](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__havehotborder).)|  \n|[CMFCToolBarEditBoxButton::IsFlatMode](#cmfctoolbareditboxbutton__isflatmode)|Determines whether edit box buttons have a flat style.|  \n|[CMFCToolBarEditBoxButton::NotifyCommand](#cmfctoolbareditboxbutton__notifycommand)|Specifies whether the button processes the [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message. (Overrides [CMFCToolBarButton::NotifyCommand](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__notifycommand).)|  \n|[CMFCToolBarEditBoxButton::OnAddToCustomizePage](#cmfctoolbareditboxbutton__onaddtocustomizepage)|Called by the framework when the button is added to a **Customize** dialog box. (Overrides [CMFCToolBarButton::OnAddToCustomizePage](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onaddtocustomizepage).)|  \n|`CMFCToolBarEditBoxButton::OnCalculateSize`|Called by the framework to calculate the size of the button for the specified device context and docking state. (Overrides [CMFCToolBarButton::OnCalculateSize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__oncalculatesize).)|  \n|[CMFCToolBarEditBoxButton::OnChangeParentWnd](#cmfctoolbareditboxbutton__onchangeparentwnd)|Called by the framework when the button is inserted into a new toolbar. (Overrides [CMFCToolBarButton::OnChangeParentWnd](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd).)|  \n|[CMFCToolBarEditBoxButton::OnClick](#cmfctoolbareditboxbutton__onclick)|Called by the framework when the user clicks the mouse button. (Overrides [CMFCToolBarButton::OnClick](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onclick).)|  \n|[CMFCToolBarEditBoxButton::OnCtlColor](#cmfctoolbareditboxbutton__onctlcolor)|Called by the framework when the parent toolbar handles a `WM_CTLCOLOR` message. (Overrides [CMFCToolBarButton::OnCtlColor](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onctlcolor).)|  \n|`CMFCToolBarEditBoxButton::OnDraw`|Called by the framework to draw the button by using the specified styles and options. (Overrides [CMFCToolBarButton::OnDraw](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondraw).)|  \n|`CMFCToolBarEditBoxButton::OnDrawOnCustomizeList`|Called by the framework to draw the button in the **Commands** pane of the **Customize** dialog box. (Overrides [CMFCToolBarButton::OnDrawOnCustomizeList](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__ondrawoncustomizelist).)|  \n|[CMFCToolBarEditBoxButton::OnGlobalFontsChanged](#cmfctoolbareditboxbutton__onglobalfontschanged)|Called by the framework when the global font has changed. (Overrides [CMFCToolBarButton::OnGlobalFontsChanged](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onglobalfontschanged).)|  \n|[CMFCToolBarEditBoxButton::OnMove](#cmfctoolbareditboxbutton__onmove)|Called by the framework when the parent toolbar moves. (Overrides [CMFCToolBarButton::OnMove](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onmove).)|  \n|[CMFCToolBarEditBoxButton::OnShow](#cmfctoolbareditboxbutton__onshow)|Called by the framework when the button becomes visible or invisible. (Overrides [CMFCToolBarButton::OnShow](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onshow).)|  \n|[CMFCToolBarEditBoxButton::OnSize](#cmfctoolbareditboxbutton__onsize)|Called by the framework when the parent toolbar changes its size or position and this change causes the button to change size. (Overrides [CMFCToolBarButton::OnSize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onsize).)|  \n|[CMFCToolBarEditBoxButton::OnUpdateToolTip](#cmfctoolbareditboxbutton__onupdatetooltip)|Called by the framework when the parent toolbar updates its tooltip text. (Overrides [CMFCToolBarButton::OnUpdateToolTip](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onupdatetooltip).)|  \n|`CMFCToolBarEditBoxButton::Serialize`|Reads this object from an archive or writes it to an archive. (Overrides [CMFCToolBarButton::Serialize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__serialize).)|  \n|`CMFCToolBarEditBoxButton::SetACCData`|Populates the provided `CAccessibilityData` object with accessibility data from the toolbar button. (Overrides [CMFCToolBarButton::SetACCData](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__setaccdata).)|  \n|`CMFCToolBarEditBoxButton::` [CMFCToolBarEditBoxButton::SetContents](#cmfctoolbareditboxbutton__setcontents)|Sets the text in the edit control of the button.|  \n|`CMFCToolBarEditBoxButton::` [CMFCToolBarEditBoxButton::SetContentsAll](#cmfctoolbareditboxbutton__setcontentsall)|Finds the edit control button that has a specified command ID, and sets the text in the edit control of that button.|  \n|[CMFCToolBarEditBoxButton::SetContextMenuID](#cmfctoolbareditboxbutton__setcontextmenuid)|Specifies the resource ID of the shortcut menu that is associated with the button.|  \n|[CMFCToolBarEditBoxButton::SetFlatMode](#cmfctoolbareditboxbutton__setflatmode)|Specifies the flat style appearance of edit box buttons in the application.|  \n|`CMFCToolBarEditBoxButton::` [CMFCToolBarEditBoxButton::SetStyle](#cmfctoolbareditboxbutton__setstyle)|Specifies the style of the button. (Overrides [CMFCToolBarButton::SetStyle](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__setstyle).)|  \n  \n## Remarks  \n To add an edit box button to a toolbar, follow these steps:  \n  \n 1. Reserve a dummy resource ID for the button in the parent toolbar resource.  \n  \n 2. Construct a `CMFCToolBarEditBoxButton` object.  \n  \n 3. In the message handler that processes the `AFX_WM_RESETTOOLBAR` message, replace the dummy button with the new combo box button by using [CMFCToolBar::ReplaceButton](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__replacebutton).  \n  \n For more information, see [Walkthrough: Putting Controls On Toolbars](../../mfc/walkthrough-putting-controls-on-toolbars.md).  \n  \n## Example  \n The following example demonstrates how to use various methods in the `CMFCToolBarEditBoxButton` class. The example shows how to specify that a user can stretch the button during customization, specify that a border of the button is displayed when a user clicks the button, set the text in the text box control, specify the flat style appearance of edit box buttons in the application, and specify the style of a toolbar edit box control.  \n  \n [!code-cpp[NVC_MFC_RibbonApp#40](../../mfc/reference/codesnippet/cpp/cmfctoolbareditboxbutton-class_1.cpp)]  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CMFCToolBarButton](../../mfc/reference/cmfctoolbarbutton-class.md)  \n  \n [CMFCToolBarEditBoxButton](../../mfc/reference/cmfctoolbareditboxbutton-class.md)  \n  \n## Requirements  \n **Header:** afxtoolbareditboxbutton.h  \n  \n##  <a name=\"cmfctoolbareditboxbutton__canbestretched\"></a>  CMFCToolBarEditBoxButton::CanBeStretched  \n Specifies whether a user can stretch the button during customization.  \n  \n```  \nvirtual BOOL CanBeStretched() const;\n\n \n```  \n  \n### Return Value  \n This method returns `TRUE`.  \n  \n### Remarks  \n By default, the framework does not allow the user to stretch a toolbar button during customization. This method extends the base class implementation ( [CMFCToolBarButton::CanBeStretched](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__canbestretched)) by allowing the user to stretch an edit box toolbar button during customization.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__cmfctoolbareditboxbutton\"></a>  CMFCToolBarEditBoxButton::CMFCToolBarEditBoxButton  \n Constructs a [CMFCToolBarEditBoxButton](../../mfc/reference/cmfctoolbareditboxbutton-class.md) object.  \n  \n```  \nCMFCToolBarEditBoxButton(\n    UINT uiID,  \n    int iImage,  \n    DWORD dwStyle=ES_AUTOHSCROLL,  \n    int iWidth=0);\n```  \n  \n### Parameters  \n [in] `uiID`  \n Specifies the control ID.  \n  \n [in] `iImage`  \n Specifies the zero-based index of a toolbar image. The image is located in the [CMFCToolBarImages Class](../../mfc/reference/cmfctoolbarimages-class.md) object that [CMFCToolBar Class](../../mfc/reference/cmfctoolbar-class.md) class maintains.  \n  \n [in] `dwStyle`  \n Specifies the edit control style.  \n  \n [in] `iWidth`  \n Specifies the width in pixels of the edit control.  \n  \n### Remarks  \n The default constructor sets the edit control style to the following combination:  \n  \n `WS_CHILD | WS_VISIBLE | ES_AUTOHSCROLL`  \n  \n The default width of the control is 150 pixels.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__copyfrom\"></a>  CMFCToolBarEditBoxButton::CopyFrom  \n Copies the properties of another toolbar button to the current button.  \n  \n```  \nvirtual void CopyFrom(const CMFCToolBarButton& src);\n```  \n  \n### Parameters  \n [in] `src`  \n A reference to the source button from which to copy.  \n  \n### Remarks  \n Call this method to copy another toolbar button to this toolbar button. `src` must be of type `CMFCToolBarEditBoxButton`.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__createedit\"></a>  CMFCToolBarEditBoxButton::CreateEdit  \n Creates a new edit control in the button.  \n  \n```  \nvirtual CEdit* CreateEdit(\n    CWnd* pWndParent,  \n    const CRect& rect);\n```  \n  \n### Parameters  \n `[in] pWndParent`  \n Specifies the parent window of the edit control. It must not be NULL.  \n  \n `[in] rect`  \n Specifies the edit control's size and position.  \n  \n### Return Value  \n A pointer to the newly created edit control; it is `NULL` if the control's creation and attachment fail.  \n  \n### Remarks  \n You construct a [CMFCToolBarEditBoxButton](../../mfc/reference/cmfctoolbareditboxbutton-class.md) object in two steps. First call the constructor, and then call `CreateEdit,` which creates the Windows edit control and attaches it to the `CMFCToolBarEditBoxButton` object.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__getbycmd\"></a>  CMFCToolBarEditBoxButton::GetByCmd  \n Retrieves the first `CMFCToolBarEditBoxButton` object in the application that has the specified command ID.  \n  \n```  \nstatic CMFCToolBarEditBoxButton* __stdcall GetByCmd(UINT uiCmd);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The command ID of the button to retrieve.  \n  \n### Return Value  \n The first `CMFCToolBarEditBoxButton` object in the application that has the specified command ID, or `NULL` if no such object exists.  \n  \n### Remarks  \n This shared utility method is used by methods such as [CMFCToolBarEditBoxButton::SetContentsAll](#cmfctoolbareditboxbutton__setcontentsall) and [CMFCToolBarEditBoxButton::GetContentsAll](#cmfctoolbareditboxbutton__getcontentsall) to set or get the text of the first edit box toolbar control that has the specified command ID.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__getcontentsall\"></a>  CMFCToolBarEditBoxButton::GetContentsAll  \n Retrieves the text of the first edit box toolbar control that has the specified command ID.  \n  \n```  \nstatic CString __stdcall GetContentsAll(UINT uiCmd);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The command ID of the button from which to retrieve contents.  \n  \n### Return Value  \n A `CString` object that contains the text of the first edit box toolbar control that has the specified command ID.  \n  \n### Remarks  \n This method returns the empty string if no `CMFCToolBarEditBoxButton` objects have the specified command ID.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__getcontextmenuid\"></a>  CMFCToolBarEditBoxButton::GetContextMenuID  \n Retrieves the resource ID of the shortcut menu that is associated with the button.  \n  \n```  \nUINT GetContextMenuID();\n```  \n  \n### Return Value  \n The resource ID of the shortcut menu that is associated with the button or 0 if the button has no associated shortcut menu.  \n  \n### Remarks  \n The framework uses the resource ID to create the shortcut menu when the user right-clicks on the button.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__geteditborder\"></a>  CMFCToolBarEditBoxButton::GetEditBorder  \n Retrieves the bounding rectangle of the edit part of the edit box button.  \n  \n```  \nvirtual void GetEditBorder(CRect& rectBorder);\n```  \n  \n### Parameters  \n [out] `rectBorder`  \n A reference to the `CRect` object that receives the bounding rectangle.  \n  \n### Remarks  \n This method retrieves the bounding rectangle of the edit control in client coordinates. It expands the size of the rectangle in each direction by one pixel.  \n  \n The [CMFCVisualManager::OnDrawEditBorder](../../mfc/reference/cmfcvisualmanager-class.md#cmfcvisualmanager__ondraweditborder) method calls this method when it draws the border around a `CMFCToolBarEditBoxButton` object.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__geteditbox\"></a>  CMFCToolBarEditBoxButton::GetEditBox  \n Returns a pointer to the [CEdit Class](../../mfc/reference/cedit-class.md) control that is embedded in the button.  \n  \n```  \nCEdit* GetEditBox() const;\n\n \n```  \n  \n### Return Value  \n A pointer to the [CEdit Class](../../mfc/reference/cedit-class.md) control that the button contains. It is `NULL` if the `CEdit` control has not been created yet.  \n  \n### Remarks  \n You create the `CEdit` control by calling [CMFCToolBarEditBoxButton::CreateEdit](#cmfctoolbareditboxbutton__createedit).  \n  \n##  <a name=\"cmfctoolbareditboxbutton__gethwnd\"></a>  CMFCToolBarEditBoxButton::GetHwnd  \n Retrieves the window handle that is associated with the toolbar button.  \n  \n```  \nvirtual HWND GetHwnd();\n```  \n  \n### Return Value  \n The window handle that is associated with the button.  \n  \n### Remarks  \n This method overrides the [CMFCToolBarButton::GetHwnd](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__gethwnd) method by returning the window handle of the edit control part of the edit box button.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__getinvalidaterect\"></a>  CMFCToolBarEditBoxButton::GetInvalidateRect  \n Retrieves the region of the client area of the button that must be redrawn.  \n  \n```  \nvirtual const CRect GetInvalidateRect() const;\n\n \n```  \n  \n### Return Value  \n A `CRect` object that specifies the region that must be redrawn.  \n  \n### Remarks  \n This method extends the base class implementation, [CMFCToolBarButton::GetInvalidateRect](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__getinvalidaterect), by including in the region the area of the text label.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__havehotborder\"></a>  CMFCToolBarEditBoxButton::HaveHotBorder  \n Determines whether a border of the button is displayed when a user clicks the button.  \n  \n```  \nvirtual BOOL HaveHotBorder() const;\n\n \n```  \n  \n### Return Value  \n Nonzero if a button displays its border when selected; otherwise 0.  \n  \n### Remarks  \n This method extends the base class implementation, [CMFCToolBarButton::HaveHotBorder](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__havehotborder), by returning a nonzero value if the control is visible.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__isflatmode\"></a>  CMFCToolBarEditBoxButton::IsFlatMode  \n Determines whether edit box buttons have a flat style.  \n  \n```  \nstatic BOOL __stdcall IsFlatMode();\n```  \n  \n### Return Value  \n Nonzero if the buttons have a flat style; otherwise, 0.  \n  \n### Remarks  \n By default, edit box buttons have a flat style. Use the [CMFCToolBarEditBoxButton::SetFlatMode](#cmfctoolbareditboxbutton__setflatmode) method to change the flat style appearance for your application.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__notifycommand\"></a>  CMFCToolBarEditBoxButton::NotifyCommand  \n Specifies whether the button processes the [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message.  \n  \n```  \nvirtual BOOL NotifyCommand(int iNotifyCode);\n```  \n  \n### Parameters  \n [in] `iNotifyCode`  \n The notification message that is associated with the command.  \n  \n### Return Value  \n `TRUE` if the button processes the `WM_COMMAND` message, or `FALSE` to indicate that the message must be handled by the parent toolbar.  \n  \n### Remarks  \n The framework calls this method when it is about to send a [WM_COMMAND](http://msdn.microsoft.com/library/windows/desktop/ms647591) message to the parent window.  \n  \n This method extends the base class implementation ( [CMFCToolBarButton::NotifyCommand](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__notifycommand)) by processing the [EN_UPDATE](http://msdn.microsoft.com/library/windows/desktop/bb761687) notification. For each edit box with the same command ID as this object, it sets its text label to the text label of this object.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__onaddtocustomizepage\"></a>  CMFCToolBarEditBoxButton::OnAddToCustomizePage  \n Called by the framework when the button is added to a **Customize** dialog box.  \n  \n```  \nvirtual void OnAddToCustomizePage();\n```  \n  \n### Remarks  \n This method extends the base class implementation ( [CMFCToolBarButton::OnAddToCustomizePage](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onaddtocustomizepage)) by copying the properties from the edit box control in any toolbar that has the same command ID as this object. This method does nothing if no toolbar has an edit box control that has the same command ID as this object.  \n  \n For more information about the **Customize** dialog box, see [CMFCToolBarsCustomizeDialog Class](../../mfc/reference/cmfctoolbarscustomizedialog-class.md).  \n  \n##  <a name=\"cmfctoolbareditboxbutton__onchangeparentwnd\"></a>  CMFCToolBarEditBoxButton::OnChangeParentWnd  \n Called by the framework when the button is inserted into a new toolbar.  \n  \n```  \nvirtual void OnChangeParentWnd(CWnd* pWndParent);\n```  \n  \n### Parameters  \n [in] `pWndParent`  \n A pointer to the new parent window.  \n  \n### Remarks  \n This method overrides the base class implementation ( [CMFCToolBarButton::OnChangeParentWnd](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onchangeparentwnd)) by recreating the internal `CEdit` object.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__onclick\"></a>  CMFCToolBarEditBoxButton::OnClick  \n Called by the framework when the user clicks the mouse button.  \n  \n```  \nvirtual BOOL OnClick(\n    CWnd* pWnd,  \n    BOOL bDelay = TRUE);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n Unused.  \n  \n [in] `bDelay`  \n Unused.  \n  \n### Return Value  \n Nonzero if the button processes the click message; otherwise 0.  \n  \n### Remarks  \n This method overrides the base class implementation ( [CMFCToolBarButton::OnClick](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onclick)) by returning a nonzero value if the internal `CEdit` object is visible.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__onctlcolor\"></a>  CMFCToolBarEditBoxButton::OnCtlColor  \n Called by the framework when the parent toolbar handles a `WM_CTLCOLOR` message.  \n  \n```  \nvirtual HBRUSH OnCtlColor(\n    CDC* pDC,  \n    UINT nCtlColor);\n```  \n  \n### Parameters  \n [in] `pDC`  \n The device context that displays the button.  \n  \n [in] `nCtlColor`  \n Unused.  \n  \n### Return Value  \n A handle to the global window brush.  \n  \n### Remarks  \n This method overrides the base class implementation ( [CMFCToolBarButton::OnCtlColor](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onctlcolor)) by setting the text and background colors of the provided device context to the global text and background colors, respectively.  \n  \n For more information about global options that are available to your application, see [AFX_GLOBAL_DATA Structure](../../mfc/reference/afx-global-data-structure.md).  \n  \n##  <a name=\"cmfctoolbareditboxbutton__onglobalfontschanged\"></a>  CMFCToolBarEditBoxButton::OnGlobalFontsChanged  \n Called by the framework when the global font has changed.  \n  \n```  \nvirtual void OnGlobalFontsChanged();\n```  \n  \n### Remarks  \n This method extends the base class implementation ( [CMFCToolBarButton::OnGlobalFontsChanged](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onglobalfontschanged)) by changing the font of the control to that of the global font.  \n  \n For more information about global options that are available to your application, see [AFX_GLOBAL_DATA Structure](../../mfc/reference/afx-global-data-structure.md).  \n  \n##  <a name=\"cmfctoolbareditboxbutton__onmove\"></a>  CMFCToolBarEditBoxButton::OnMove  \n Called by the framework when the parent toolbar moves.  \n  \n```  \nvirtual void OnMove();\n```  \n  \n### Remarks  \n This method overrides the default class implementation ( [CMFCToolBarButton::OnMove](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onmove)) by updating the position of the internal `CEdit` object  \n  \n##  <a name=\"cmfctoolbareditboxbutton__onshow\"></a>  CMFCToolBarEditBoxButton::OnShow  \n Called by the framework when the button becomes visible or invisible.  \n  \n```  \nvirtual void OnShow(BOOL bShow);\n```  \n  \n### Parameters  \n [in] `bShow`  \n Specifies whether the button is visible. If this parameter is `TRUE`, the button is visible. Otherwise, the button is not visible.  \n  \n### Remarks  \n This method extends the base class implementation ( [CMFCToolBarButton::OnShow](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onshow)) by displaying the button if `bShow` is `TRUE`. Otherwise, this method hides the button.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__onsize\"></a>  CMFCToolBarEditBoxButton::OnSize  \n Called by the framework when the parent toolbar changes its size or position and this change causes the button to change size.  \n  \n```  \nvirtual void OnSize(int iSize);\n```  \n  \n### Parameters  \n [in] `iSize`  \n The new width of the button, in pixels.  \n  \n### Remarks  \n This method overrides the default class implementation, [CMFCToolBarButton::OnSize](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onsize), by updating the size and position of the internal `CEdit` object.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__onupdatetooltip\"></a>  CMFCToolBarEditBoxButton::OnUpdateToolTip  \n Called by the framework when the parent toolbar updates its tooltip text.  \n  \n```  \nvirtual BOOL OnUpdateToolTip(\n    CWnd* pWndParent,  \n    int iButtonIndex,  \n    CToolTipCtrl& wndToolTip,  \n    CString& str);\n```  \n  \n### Parameters  \n [in] `pWndParent`  \n Unused.  \n  \n [in] `iButtonIndex`  \n Unused.  \n  \n [in] `wndToolTip`  \n The control that displays the tooltip text.  \n  \n [out] `str`  \n A `CString` object that receives the updated tooltip text.  \n  \n### Return Value  \n Nonzero if the method updates the tooltip text; otherwise 0.  \n  \n### Remarks  \n This method extends the base class implementation ( [CMFCToolBarButton::OnUpdateToolTip](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__onupdatetooltip)) by displaying the tooltip text that is associated with the edit part of the button. If the internal `CEdit` object is `NULL` or the window handle of the `CEdit` object does not identify an existing window, this method does nothing and returns `FALSE`.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__setcontents\"></a>  CMFCToolBarEditBoxButton::SetContents  \n Sets the text in the text box control.  \n  \n```  \nvirtual void SetContents(const CString& sContents);\n```  \n  \n### Parameters  \n `[in] sContents`  \n Specifies the new text to set.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__setcontentsall\"></a>  CMFCToolBarEditBoxButton::SetContentsAll  \n Finds a [CMFCToolBarEditBoxButton](../../mfc/reference/cmfctoolbareditboxbutton-class.md) object that has a specified command ID and sets the specified text within its text box.  \n  \n```  \nstatic BOOL SetContentsAll(\n    UINT uiCmd,  \n    const CString& strContents);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n Specifies the command ID of the control for which the text will be changed.  \n  \n [in] `strContents`  \n Specifies the new text to set.  \n  \n### Return Value  \n Nonzero if the text was set; 0 if the `CMFCToolBarEditBoxButton` control with the specified command ID does not exist.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__setcontextmenuid\"></a>  CMFCToolBarEditBoxButton::SetContextMenuID  \n Specifies the resource ID of the shortcut menu that is associated with the button.  \n  \n```  \nvoid SetContextMenuID(UINT uiResID);\n```  \n  \n### Parameters  \n [in] `uiCmd`  \n The resource ID of the shortcut menu.  \n  \n### Remarks  \n The framework uses the resource ID to create the shortcut menu when the user right-clicks the toolbar button.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__setflatmode\"></a>  CMFCToolBarEditBoxButton::SetFlatMode  \n Specifies the flat style appearance of edit box buttons in the application.  \n  \n```  \nstatic void __stdcall SetFlatMode(BOOL bFlat = TRUE);\n```  \n  \n### Parameters  \n [in] `bFlat`  \n The flat style for edit box buttons. If this parameter is `TRUE`, the flat style appearance is enabled; otherwise the flat style appearance is disabled.  \n  \n### Remarks  \n The default flat style for edit box buttons is `TRUE`. Use the [CMFCToolBarEditBoxButton::IsFlatMode](#cmfctoolbareditboxbutton__isflatmode) method to retrieve the flat style appearance for your application.  \n  \n##  <a name=\"cmfctoolbareditboxbutton__setstyle\"></a>  CMFCToolBarEditBoxButton::SetStyle  \n Specifies the style of a toolbar edit box control.  \n  \n```  \nvirtual void SetStyle(UINT nStyle);\n```  \n  \n### Parameters  \n [in] `nStyle`  \n A new style to set.  \n  \n### Remarks  \n This method sets [CMFCToolBarButton::m_nStyle](../../mfc/reference/cmfctoolbarbutton-class.md#cmfctoolbarbutton__m_nstyle) to `nStyle` It also disables the text box when the application is in Customize mode, and enables it when the application is not in Customize mode (see [CMFCToolBar::SetCustomizeMode](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__setcustomizemode) and [CMFCToolBar::IsCustomizeMode](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__iscustomizemode)). See [ToolBar Control Styles](../../mfc/reference/toolbar-control-styles.md) for a list of valid style flags.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CMFCToolBarButton Class](../../mfc/reference/cmfctoolbarbutton-class.md)   \n [CEdit Class](../../mfc/reference/cedit-class.md)   \n [CMFCToolBar::ReplaceButton](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__replacebutton)   \n [Walkthrough: Putting Controls On Toolbars](../../mfc/walkthrough-putting-controls-on-toolbars.md)\n\n\n\n"}