<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04506c2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e080752747ebd4b5deda264f673745f97066be3d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn040-mfc-ole-in-place-resizing-and-zooming.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6859e69e1fe12f168d33a63e626cc1635e6ec2d5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0333100f7978c6e1a4ab20663699db05b07ffa83</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN040: MFC-OLE In-Place Resizing and Zooming | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN040: MFC/OLE In-Place Resizing and Zooming</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following technical note has not been updated since it was first included in the online documentation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a result, some procedures and topics might be out of date or incorrect.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the latest information, it is recommended that you search for the topic of interest in the online documentation index.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This note will discuss the issues relating to in-place editing and how a server should accomplish correct zooming and in-place resizing.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>With in-place activation, the WYSIWYG concept is taken one step further in that containers and servers cooperate with each other, and in particular interpret the OLE specification in much the same way.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because of the close interaction between a container and server supporting in-place activation there are a number of expectations from the end-user that should be maintained:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The presentation display (the metafile drawn in the <ph id="ph1">`COleServerItem::OnDraw`</ph> override) should look exactly the same as when it is drawn for editing (except that editing tools are not visible).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When the container zooms, the server window should too!</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Both the container and server should display objects for editing using the same metrics.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This means using a mapping mode based on the number of <bpt id="p1">*</bpt>logical<ept id="p1">*</ept> pixels per inch â€” not physical pixels per inch, when rendering on the display device.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Because in-place activation only applies to items that are embedded (not linked), zooming only applies to embedded objects.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You will see APIs in both <ph id="ph1">`COleServerDoc`</ph> and <ph id="ph2">`COleServerItem`</ph> that are used for zooming.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The reason for this dichotomy is that only functions that are valid for both linked and embedded items are in <ph id="ph1">`COleServerItem`</ph> (this allows you to have a common implementation) and functions that are valid only for embedded objects are located in the <ph id="ph2">`COleServerDoc`</ph> class (from the server's perspective, it is the <ph id="ph3">`document`</ph> which is embedded).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Most of the burden is placed on the server implementer, in that the server must be aware of the container's zoom factor and modify its editing interface as appropriate.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>But how does the server determine the zoom factor that the container is using</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>MFC Support for Zooming</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The current zoom factor can be determined by calling <ph id="ph1">`COleServerDoc::GetZoomFactor`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Calling this when the document is not in-place active will always result in a 100% zoom factor (or 1:1 ratio).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Calling it while in-place active may return something other than 100%.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For an example of zooming correctly see the MFC OLE sample <bpt id="p1">[</bpt>HIERSVR<ept id="p1">](../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Zooming in HIERSVR is complicated by the fact that it displays text, and text, in general, does not scale in a linear fashion (hints, typographic conventions, design widths, and heights all complicate the matter).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Still, HIERSVR is a reasonable reference for implementing zooming correctly, and so is the MFC Tutorial <bpt id="p1">[</bpt>SCRIBBLE<ept id="p1">](../visual-cpp-samples.md)</ept> (step 7).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>determines the zoom factor based on a number of different metrics available either from the container or from the implementation of your <ph id="ph1">`COleServerItem`</ph> and <ph id="ph2">`COleServerDoc`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In short, the current zoom factor is determined by the following formula:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The POSITION RECTANGLE is determined by the container.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It is returned to the server during in-place activation when <ph id="ph1">`COleClientItem::OnGetItemPosition`</ph> is called and is updated when the container calls the server's <ph id="ph2">`COleServerDoc::OnSetItemRects`</ph> (with a call to <ph id="ph3">`COleClientItem::SetItemRects`</ph>).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The CONTAINER EXTENT is slightly more complex to calculate.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the container has called <ph id="ph1">`COleServerItem::OnSetExtent`</ph> (with a call to <ph id="ph2">`COleClientItem::SetExtent`</ph>), then the CONTAINER EXTENT is this value converted to pixels based on the number of pixels per logical inch.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the container has not called SetExtent (which is usually the case), then the CONTAINER EXTENT is the size returned from <ph id="ph1">`COleServerItem::OnGetExtent`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>So, if the container has not called SetExtent, the framework assumes that if it did the container would have called it with 100% of the natural extent (the value returned from <bpt id="p1">**</bpt>COleServerItem::GetExtent<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Stated another way, the framework assumes that the container is displaying 100% (no more, no less) of the item.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It is important to note that although <ph id="ph1">`COleServerItem::OnSetExtent`</ph> and <ph id="ph2">`COleServerItem::OnGetExtent`</ph> have similar names, they do not manipulate the same attribute of the item.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>is called to let the server know how much of the object is visible in the container (regardless of the zoom factor) and <ph id="ph1">`OnGetExtent`</ph> is called by the container to determine ideal size of the object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>By looking at each of the APIs involved, you can get a clearer picture:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>COleServerItem::OnGetExtent</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This function should return the "natural size" in HIMETRIC units of the item.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The best way to think of the "natural size" is to define it as the size it might appear when printed.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The size returned here is constant for a particular item contents (much like the metafile, which is constant for a particular item).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This size does not change when zooming is applied to the item.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It usually does not change when the container gives the item more or less space by calling <ph id="ph1">`OnSetExtent`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An example of a change might be that of a simple text editor with no "margin" capability that wrapped text based on the last extent sent by the container.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If a server does change, the server should probably set the OLEMISC_RECOMPOSEONRESIZE bit in the system registry (see the OLE SDK documentation for more information on this option).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>COleServerItem::OnSetExtent</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This function is called when the container shows "more or less" of the object.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Most containers will not call this at all.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The default implementation stores the last value received from the container in 'm_sizeExtent', which is used in <ph id="ph1">`COleServerDoc::GetZoomFactor`</ph> when computing the CONTAINER EXTENT value described above.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>COleServerDoc::OnSetItemRects</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This function is called only when the document is in-place active.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It is called when the container updates either the item's position or the clipping applied to the item.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The POSITION RECTANGLE, as discussed above, provides the numerator for the zoom factor calculation.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A server can request that the item position be changed by calling <ph id="ph1">`COleServerDoc::RequestPositionChange`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The container may or may not respond to this request by calling <ph id="ph1">`OnSetItemRects`</ph> (with a call to <bpt id="p1">**</bpt>COleServerItem::SetItemRects<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>COleServerDoc::OnDraw</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It is important to realize that the metafile created by overriding of <ph id="ph1">`COleServerItem::OnDraw`</ph> produces exactly the same metafile, regardless of the current zoom factor.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The container will scale the metafile as appropriate.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This is an important distinction between the view's <ph id="ph1">`OnDraw`</ph> and the server item's <ph id="ph2">`OnDraw`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The view handles zooming, the item just creates a <bpt id="p1">*</bpt>zoomable<ept id="p1">*</ept> metafile and leaves it up to the container to do the appropriate zooming.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The best way to insure that your server behaves correctly is to use the implementation of <ph id="ph1">`COleServerDoc::GetZoomFactor`</ph> if your document is in-place active.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>MFC Support for In-Place Resizing</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>MFC fully implements the in-place resizing interface as described in the OLE 2 specification.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The user-interface is supported by the <ph id="ph1">`COleResizeBar`</ph> class, a custom message <bpt id="p1">**</bpt>WM_SIZECHILD<ept id="p1">**</ept>, and special handling of this message in <ph id="ph2">`COleIPFrameWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You may want to implement different handling of this message than what is provided by the framework.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>As described above, the framework leaves the results of in-place resizing up to the container â€” the server responds to the change in the zoom factor.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the container reacts by setting the both CONTAINER EXTENT and POSITION RECTANGLE during the processing of its <ph id="ph1">`COleClientItem::OnChangeItemPosition`</ph> (called as a result of a call to <ph id="ph2">`COleServerDoc::RequestPositionChange`</ph>) then the in-place resize will result in showing "more or less" of the item in the editing window.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If the container reacts by just setting the POSITION RECTANGLE during the processing of <ph id="ph1">`COleClientItem::OnChangeItemPosition`</ph>, the zoom factor will change and the item will be shown "zoomed in or out."</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A server can control (to some degree) what happens during this negotiation.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A spreadsheet, for example might elect to show more or fewer cells when the user resizes the window while editing the item in-place.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A word-processor might elect to change the "page margins" so they are the same as the window and rewrap the text to the new margin.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Servers implement this by changing the natural extent (the size returned from <ph id="ph1">`COleServerItem::OnGetExtent`</ph>) when the resizing is done.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This will cause both the POSITION RECTANGLE and the CONTAINER EXTENT to change by the same amount, resulting in the same zoom factor, but a bigger or smaller viewing area.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In addition, more or less of the document will be visible in the metafile generated by <ph id="ph1">`OnDraw`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In this case, the document itself is changing when the user resizes the item, instead of just the viewing area.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can implement custom resizing and still leverage the user interface provided by <ph id="ph1">`COleResizeBar`</ph> by overriding the <bpt id="p1">**</bpt>WM_SIZECHILD<ept id="p1">**</ept> message in your <ph id="ph2">`COleIPFrameWnd`</ph> class.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information on the specifics of <bpt id="p1">**</bpt>WM_SIZECHILD<ept id="p1">**</ept>, see <bpt id="p2">[</bpt>Technical Note 24<ept id="p2">](../mfc/tn024-mfc-defined-messages-and-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>