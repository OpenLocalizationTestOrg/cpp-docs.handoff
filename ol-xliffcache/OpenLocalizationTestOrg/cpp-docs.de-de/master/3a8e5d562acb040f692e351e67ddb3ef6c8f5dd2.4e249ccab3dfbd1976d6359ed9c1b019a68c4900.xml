{"nodes":[{"pos":[12,48],"content":"CPaneFrameWnd Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CPaneFrameWnd Class | Microsoft Docs","pos":[0,36]}]},{"pos":[879,898],"content":"CPaneFrameWnd Class","linkify":"CPaneFrameWnd Class","nodes":[{"content":"CPaneFrameWnd Class","pos":[0,19]}]},{"content":"Implements a mini-frame window that contains one pane.","pos":[1005,1059]},{"content":"The pane fills the client area of the window.","pos":[1060,1105]},{"pos":[1114,1120],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1180,1187],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1197,1211],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1218,1222]},{"content":"Description","pos":[1223,1234]},{"pos":[1272,1321],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::AddPane<ept id=\"p1\">](#cpaneframewnd__addpane)</ept>","source":"[CPaneFrameWnd::AddPane](#cpaneframewnd__addpane)"},{"content":"Adds a pane.","pos":[1322,1334]},{"pos":[1339,1428],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::AddRemovePaneFromGlobalList<ept id=\"p1\">](#cpaneframewnd__addremovepanefromgloballist)</ept>","source":"[CPaneFrameWnd::AddRemovePaneFromGlobalList](#cpaneframewnd__addremovepanefromgloballist)"},{"content":"Adds or removes a pane from the global list.","pos":[1429,1473]},{"pos":[1478,1537],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::AdjustLayout<ept id=\"p1\">](#cpaneframewnd__adjustlayout)</ept>","source":"[CPaneFrameWnd::AdjustLayout](#cpaneframewnd__adjustlayout)"},{"content":"Adjusts the layout of the mini-frame window.","pos":[1538,1582]},{"pos":[1587,1654],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::AdjustPaneFrames<ept id=\"p1\">](#cpaneframewnd__adjustpaneframes)</ept>","source":"[CPaneFrameWnd::AdjustPaneFrames](#cpaneframewnd__adjustpaneframes)"},{"pos":[1660,1723],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::CalcBorderSize<ept id=\"p1\">](#cpaneframewnd__calcbordersize)</ept>","source":"[CPaneFrameWnd::CalcBorderSize](#cpaneframewnd__calcbordersize)"},{"content":"Calculates the size of the borders for a mini-frame window.","pos":[1724,1783]},{"pos":[1788,1867],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::CalcExpectedDockedRect<ept id=\"p1\">](#cpaneframewnd__calcexpecteddockedrect)</ept>","source":"[CPaneFrameWnd::CalcExpectedDockedRect](#cpaneframewnd__calcexpecteddockedrect)"},{"content":"Calculate the expected rectangle of a docked window.","pos":[1868,1920]},{"pos":[1925,1986],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::CanBeAttached<ept id=\"p1\">](#cpaneframewnd__canbeattached)</ept>","source":"[CPaneFrameWnd::CanBeAttached](#cpaneframewnd__canbeattached)"},{"content":"Determines whether the current pane can be docked to another pane or frame window.","pos":[1987,2069]},{"pos":[2074,2143],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::CanBeDockedToPane<ept id=\"p1\">](#cpaneframewnd__canbedockedtopane)</ept>","source":"[CPaneFrameWnd::CanBeDockedToPane](#cpaneframewnd__canbedockedtopane)"},{"content":"Determines whether the mini-frame window can be docked to a pane.","pos":[2144,2209]},{"pos":[2214,2293],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::CheckGripperVisibility<ept id=\"p1\">](#cpaneframewnd__checkgrippervisibility)</ept>","source":"[CPaneFrameWnd::CheckGripperVisibility](#cpaneframewnd__checkgrippervisibility)"},{"pos":[2299,2380],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::ConvertToTabbedDocument<ept id=\"p1\">](#cpaneframewnd__converttotabbeddocument)</ept>","source":"[CPaneFrameWnd::ConvertToTabbedDocument](#cpaneframewnd__converttotabbeddocument)"},{"content":"Converts the pane to a tabbed document.","pos":[2381,2420]},{"pos":[2425,2472],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::Create<ept id=\"p1\">](#cpaneframewnd__create)</ept>","source":"[CPaneFrameWnd::Create](#cpaneframewnd__create)"},{"pos":[2473,2547],"content":"Creates a mini-frame window and attaches it to the <ph id=\"ph1\">`CPaneFrameWnd`</ph> object.","source":"Creates a mini-frame window and attaches it to the `CPaneFrameWnd` object."},{"pos":[2552,2603],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::CreateEx<ept id=\"p1\">](#cpaneframewnd__createex)</ept>","source":"[CPaneFrameWnd::CreateEx](#cpaneframewnd__createex)"},{"pos":[2604,2678],"content":"Creates a mini-frame window and attaches it to the <ph id=\"ph1\">`CPaneFrameWnd`</ph> object.","source":"Creates a mini-frame window and attaches it to the `CPaneFrameWnd` object."},{"pos":[2683,2734],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::DockPane<ept id=\"p1\">](#cpaneframewnd__dockpane)</ept>","source":"[CPaneFrameWnd::DockPane](#cpaneframewnd__dockpane)"},{"content":"Docks the pane.","pos":[2735,2750]},{"pos":[2755,2830],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::FindFloatingPaneByID<ept id=\"p1\">](#cpaneframewnd__findfloatingpanebyid)</ept>","source":"[CPaneFrameWnd::FindFloatingPaneByID](#cpaneframewnd__findfloatingpanebyid)"},{"content":"Finds a pane with the specified control ID in the global list of floating panes.","pos":[2831,2911]},{"pos":[2916,2979],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::FrameFromPoint<ept id=\"p1\">](#cpaneframewnd__framefrompoint)</ept>","source":"[CPaneFrameWnd::FrameFromPoint](#cpaneframewnd__framefrompoint)"},{"content":"Finds the mini-frame window containing a user-supplied point.","pos":[2980,3041]},{"pos":[3046,3113],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetCaptionHeight<ept id=\"p1\">](#cpaneframewnd__getcaptionheight)</ept>","source":"[CPaneFrameWnd::GetCaptionHeight](#cpaneframewnd__getcaptionheight)"},{"content":"Returns the height of the mini-frame window caption.","pos":[3114,3166]},{"pos":[3171,3234],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetCaptionRect<ept id=\"p1\">](#cpaneframewnd__getcaptionrect)</ept>","source":"[CPaneFrameWnd::GetCaptionRect](#cpaneframewnd__getcaptionrect)"},{"content":"Calculates the bounding rectangle of a mini-frame window caption.","pos":[3235,3300]},{"pos":[3305,3368],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetCaptionText<ept id=\"p1\">](#cpaneframewnd__getcaptiontext)</ept>","source":"[CPaneFrameWnd::GetCaptionText](#cpaneframewnd__getcaptiontext)"},{"content":"Returns the caption text.","pos":[3369,3394]},{"pos":[3399,3468],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetDockingManager<ept id=\"p1\">](#cpaneframewnd__getdockingmanager)</ept>","source":"[CPaneFrameWnd::GetDockingManager](#cpaneframewnd__getdockingmanager)"},{"pos":[3474,3537],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetDockingMode<ept id=\"p1\">](#cpaneframewnd__getdockingmode)</ept>","source":"[CPaneFrameWnd::GetDockingMode](#cpaneframewnd__getdockingmode)"},{"content":"Returns the docking mode.","pos":[3538,3563]},{"pos":[3568,3641],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetFirstVisiblePane<ept id=\"p1\">](#cpaneframewnd__getfirstvisiblepane)</ept>","source":"[CPaneFrameWnd::GetFirstVisiblePane](#cpaneframewnd__getfirstvisiblepane)"},{"content":"Returns the first visible pane that is contained in a mini-frame window.","pos":[3642,3714]},{"pos":[3719,3776],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetHotPoint<ept id=\"p1\">](#cpaneframewnd__gethotpoint)</ept>","source":"[CPaneFrameWnd::GetHotPoint](#cpaneframewnd__gethotpoint)"},{"pos":[3782,3831],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetPane<ept id=\"p1\">](#cpaneframewnd__getpane)</ept>","source":"[CPaneFrameWnd::GetPane](#cpaneframewnd__getpane)"},{"content":"Returns a pane that is contained in the mini-frame window.","pos":[3832,3890]},{"pos":[3895,3954],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetPaneCount<ept id=\"p1\">](#cpaneframewnd__getpanecount)</ept>","source":"[CPaneFrameWnd::GetPaneCount](#cpaneframewnd__getpanecount)"},{"content":"Returns the number of panes that are contained in a mini-frame window.","pos":[3955,4025]},{"pos":[4030,4083],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetParent<ept id=\"p1\">](#cpaneframewnd__getparent)</ept>","source":"[CPaneFrameWnd::GetParent](#cpaneframewnd__getparent)"},{"pos":[4089,4146],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetPinState<ept id=\"p1\">](#cpaneframewnd__getpinstate)</ept>","source":"[CPaneFrameWnd::GetPinState](#cpaneframewnd__getpinstate)"},{"pos":[4152,4229],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetRecentFloatingRect<ept id=\"p1\">](#cpaneframewnd__getrecentfloatingrect)</ept>","source":"[CPaneFrameWnd::GetRecentFloatingRect](#cpaneframewnd__getrecentfloatingrect)"},{"pos":[4235,4308],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::GetVisiblePaneCount<ept id=\"p1\">](#cpaneframewnd__getvisiblepanecount)</ept>","source":"[CPaneFrameWnd::GetVisiblePaneCount](#cpaneframewnd__getvisiblepanecount)"},{"content":"Returns the number of visible panes that are contained in a mini-frame window.","pos":[4309,4387]},{"pos":[4392,4441],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::HitTest<ept id=\"p1\">](#cpaneframewnd__hittest)</ept>","source":"[CPaneFrameWnd::HitTest](#cpaneframewnd__hittest)"},{"content":"Determines what part of a mini-frame window is at a given point.","pos":[4442,4506]},{"pos":[4511,4566],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::IsCaptured<ept id=\"p1\">](#cpaneframewnd__iscaptured)</ept>","source":"[CPaneFrameWnd::IsCaptured](#cpaneframewnd__iscaptured)"},{"pos":[4572,4629],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::IsDelayShow<ept id=\"p1\">](#cpaneframewnd__isdelayshow)</ept>","source":"[CPaneFrameWnd::IsDelayShow](#cpaneframewnd__isdelayshow)"},{"pos":[4635,4690],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::IsRollDown<ept id=\"p1\">](#cpaneframewnd__isrolldown)</ept>","source":"[CPaneFrameWnd::IsRollDown](#cpaneframewnd__isrolldown)"},{"content":"Determines whether a mini-frame window should be rolled down.","pos":[4691,4752]},{"pos":[4757,4808],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::IsRollUp<ept id=\"p1\">](#cpaneframewnd__isrollup)</ept>","source":"[CPaneFrameWnd::IsRollUp](#cpaneframewnd__isrollup)"},{"content":"Determines whether a mini-frame window should be rolled up.","pos":[4809,4868]},{"pos":[4873,4940],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::KillDockingTimer<ept id=\"p1\">](#cpaneframewnd__killdockingtimer)</ept>","source":"[CPaneFrameWnd::KillDockingTimer](#cpaneframewnd__killdockingtimer)"},{"content":"Stops the docking timer.","pos":[4941,4965]},{"pos":[4970,5023],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::LoadState<ept id=\"p1\">](#cpaneframewnd__loadstate)</ept>","source":"[CPaneFrameWnd::LoadState](#cpaneframewnd__loadstate)"},{"content":"Loads the pane's state from the registry.","pos":[5024,5065]},{"pos":[5070,5129],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnBeforeDock<ept id=\"p1\">](#cpaneframewnd__onbeforedock)</ept>","source":"[CPaneFrameWnd::OnBeforeDock](#cpaneframewnd__onbeforedock)"},{"content":"Determines if docking is possible.","pos":[5130,5164]},{"pos":[5169,5238],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnDockToRecentPos<ept id=\"p1\">](#cpaneframewnd__ondocktorecentpos)</ept>","source":"[CPaneFrameWnd::OnDockToRecentPos](#cpaneframewnd__ondocktorecentpos)"},{"content":"Docks the mini-frame window at its most recent position.","pos":[5239,5295]},{"pos":[5300,5369],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnKillRollUpTimer<ept id=\"p1\">](#cpaneframewnd__onkillrolluptimer)</ept>","source":"[CPaneFrameWnd::OnKillRollUpTimer](#cpaneframewnd__onkillrolluptimer)"},{"content":"Stops the rollup timer.","pos":[5370,5393]},{"pos":[5398,5453],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnMovePane<ept id=\"p1\">](#cpaneframewnd__onmovepane)</ept>","source":"[CPaneFrameWnd::OnMovePane](#cpaneframewnd__onmovepane)"},{"content":"Moves the mini-frame window by a specified offset.","pos":[5454,5504]},{"pos":[5509,5580],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnPaneRecalcLayout<ept id=\"p1\">](#cpaneframewnd__onpanerecalclayout)</ept>","source":"[CPaneFrameWnd::OnPaneRecalcLayout](#cpaneframewnd__onpanerecalclayout)"},{"content":"Adjusts the layout of a contained pane.","pos":[5581,5620]},{"pos":[5625,5692],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnSetRollUpTimer<ept id=\"p1\">](#cpaneframewnd__onsetrolluptimer)</ept>","source":"[CPaneFrameWnd::OnSetRollUpTimer](#cpaneframewnd__onsetrolluptimer)"},{"content":"Sets the rollup timer.","pos":[5693,5715]},{"pos":[5720,5775],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnShowPane<ept id=\"p1\">](#cpaneframewnd__onshowpane)</ept>","source":"[CPaneFrameWnd::OnShowPane](#cpaneframewnd__onshowpane)"},{"content":"Called by the framework when a pane in the mini-frame window is hidden or displayed.","pos":[5776,5860]},{"pos":[5865,5926],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::PaneFromPoint<ept id=\"p1\">](#cpaneframewnd__panefrompoint)</ept>","source":"[CPaneFrameWnd::PaneFromPoint](#cpaneframewnd__panefrompoint)"},{"content":"Returns a pane if it contains a user-supplied point inside a mini-frame window.","pos":[5927,6006]},{"pos":[6011,6052],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::Pin<ept id=\"p1\">](#cpaneframewnd__pin)</ept>","source":"[CPaneFrameWnd::Pin](#cpaneframewnd__pin)"},{"pos":[6095,6399],"content":"Used by class <bpt id=\"p1\">[</bpt>CWinApp<ept id=\"p1\">](../../mfc/reference/cwinapp-class.md)</ept> to translate window messages before they are dispatched to the <bpt id=\"p2\">[</bpt>TranslateMessage<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id=\"p3\">[</bpt>DispatchMessage<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept> Windows functions.","source":"Used by class [CWinApp](../../mfc/reference/cwinapp-class.md) to translate window messages before they are dispatched to the [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934) Windows functions."},{"pos":[6404,6457],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::RedrawAll<ept id=\"p1\">](#cpaneframewnd__redrawall)</ept>","source":"[CPaneFrameWnd::RedrawAll](#cpaneframewnd__redrawall)"},{"content":"Redraws all mini-frame windows.","pos":[6458,6489]},{"pos":[6494,6567],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::RemoveNonValidPanes<ept id=\"p1\">](#cpaneframewnd__removenonvalidpanes)</ept>","source":"[CPaneFrameWnd::RemoveNonValidPanes](#cpaneframewnd__removenonvalidpanes)"},{"content":"Called by the framework to remove non-valid panes.","pos":[6568,6618]},{"pos":[6623,6678],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::RemovePane<ept id=\"p1\">](#cpaneframewnd__removepane)</ept>","source":"[CPaneFrameWnd::RemovePane](#cpaneframewnd__removepane)"},{"content":"Removes a pane from the mini-frame window.","pos":[6679,6721]},{"pos":[6726,6783],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::ReplacePane<ept id=\"p1\">](#cpaneframewnd__replacepane)</ept>","source":"[CPaneFrameWnd::ReplacePane](#cpaneframewnd__replacepane)"},{"content":"Replaces one pane with another.","pos":[6784,6815]},{"pos":[6820,6873],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::SaveState<ept id=\"p1\">](#cpaneframewnd__savestate)</ept>","source":"[CPaneFrameWnd::SaveState](#cpaneframewnd__savestate)"},{"content":"Saves the pane's state to the registry.","pos":[6874,6913]},{"content":"Reads or writes this object from or to an archive.","pos":[6945,6995]},{"pos":[7000,7069],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::SetCaptionButtons<ept id=\"p1\">](#cpaneframewnd__setcaptionbuttons)</ept>","source":"[CPaneFrameWnd::SetCaptionButtons](#cpaneframewnd__setcaptionbuttons)"},{"content":"Sets caption buttons.","pos":[7070,7091]},{"pos":[7096,7155],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::SetDelayShow<ept id=\"p1\">](#cpaneframewnd__setdelayshow)</ept>","source":"[CPaneFrameWnd::SetDelayShow](#cpaneframewnd__setdelayshow)"},{"pos":[7161,7230],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::SetDockingManager<ept id=\"p1\">](#cpaneframewnd__setdockingmanager)</ept>","source":"[CPaneFrameWnd::SetDockingManager](#cpaneframewnd__setdockingmanager)"},{"pos":[7236,7301],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::SetDockingTimer<ept id=\"p1\">](#cpaneframewnd__setdockingtimer)</ept>","source":"[CPaneFrameWnd::SetDockingTimer](#cpaneframewnd__setdockingtimer)"},{"content":"Sets the docking timer.","pos":[7302,7325]},{"pos":[7330,7389],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::SetDockState<ept id=\"p1\">](#cpaneframewnd__setdockstate)</ept>","source":"[CPaneFrameWnd::SetDockState](#cpaneframewnd__setdockstate)"},{"content":"Sets the docking state.","pos":[7390,7413]},{"pos":[7418,7475],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::SetHotPoint<ept id=\"p1\">](#cpaneframewnd__sethotpoint)</ept>","source":"[CPaneFrameWnd::SetHotPoint](#cpaneframewnd__sethotpoint)"},{"pos":[7481,7546],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::SetPreDockState<ept id=\"p1\">](#cpaneframewnd__setpredockstate)</ept>","source":"[CPaneFrameWnd::SetPreDockState](#cpaneframewnd__setpredockstate)"},{"content":"Called by the framework to set the predocking state.","pos":[7547,7599]},{"pos":[7604,7665],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::SizeToContent<ept id=\"p1\">](#cpaneframewnd__sizetocontent)</ept>","source":"[CPaneFrameWnd::SizeToContent](#cpaneframewnd__sizetocontent)"},{"content":"Adjusts the size of a mini-frame window so that it is equivalent in size to a contained pane.","pos":[7666,7759]},{"pos":[7764,7823],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::StartTearOff<ept id=\"p1\">](#cpaneframewnd__starttearoff)</ept>","source":"[CPaneFrameWnd::StartTearOff](#cpaneframewnd__starttearoff)"},{"content":"Tears off a menu.","pos":[7824,7841]},{"pos":[7846,7927],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::StoreRecentDockSiteInfo<ept id=\"p1\">](#cpaneframewnd__storerecentdocksiteinfo)</ept>","source":"[CPaneFrameWnd::StoreRecentDockSiteInfo](#cpaneframewnd__storerecentdocksiteinfo)"},{"pos":[7933,8018],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::StoreRecentTabRelatedInfo<ept id=\"p1\">](#cpaneframewnd__storerecenttabrelatedinfo)</ept>","source":"[CPaneFrameWnd::StoreRecentTabRelatedInfo](#cpaneframewnd__storerecenttabrelatedinfo)"},{"pos":[8030,8047],"content":"Protected Methods","linkify":"Protected Methods","nodes":[{"content":"Protected Methods","pos":[0,17]}]},{"content":"Name","pos":[8054,8058]},{"content":"Description","pos":[8059,8070]},{"pos":[8108,8175],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnCheckRollState<ept id=\"p1\">](#cpaneframewnd__oncheckrollstate)</ept>","source":"[CPaneFrameWnd::OnCheckRollState](#cpaneframewnd__oncheckrollstate)"},{"content":"Determines whether a mini-frame window should be rolled up or down.","pos":[8176,8243]},{"pos":[8248,8307],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::OnDrawBorder<ept id=\"p1\">](#cpaneframewnd__ondrawborder)</ept>","source":"[CPaneFrameWnd::OnDrawBorder](#cpaneframewnd__ondrawborder)"},{"content":"Draws the borders of a mini-frame window.","pos":[8308,8349]},{"pos":[8360,8372],"content":"Data Members","linkify":"Data Members","nodes":[{"content":"Data Members","pos":[0,12]}]},{"content":"Name","pos":[8379,8383]},{"content":"Description","pos":[8384,8395]},{"pos":[8433,8496],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd::m_bUseSaveBits<ept id=\"p1\">](#cpaneframewnd__m_busesavebits)</ept>","source":"[CPaneFrameWnd::m_bUseSaveBits](#cpaneframewnd__m_busesavebits)"},{"pos":[8497,8579],"content":"Specifies whether to register the window class with the <ph id=\"ph1\">`CS_SAVEBITS`</ph> class style.","source":"Specifies whether to register the window class with the `CS_SAVEBITS` class style."},{"pos":[8589,8596],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8600,8725],"content":"The framework automatically creates a <ph id=\"ph1\">`CPaneFrameWnd`</ph> object when a pane is switched from a docked state to a floating state.","source":"The framework automatically creates a `CPaneFrameWnd` object when a pane is switched from a docked state to a floating state."},{"content":"A mini-frame window can be dragged with its contents visible (immediate docking) or using a drag rectangle (standard docking).","pos":[8732,8858]},{"content":"The docking mode of the mini-frame's container pane determines the mini-frame's dragging behavior.","pos":[8859,8957]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CBasePane::GetDockingMode<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__getdockingmode)</ept>.","pos":[8958,9078],"source":" For more information, see [CBasePane::GetDockingMode](../../mfc/reference/cbasepane-class.md#cbasepane__getdockingmode)."},{"content":"A mini-frame window displays buttons on the caption in accordance with the contained pane style.","pos":[9085,9181]},{"content":"If the pane can be closed ( <bpt id=\"p1\">[</bpt>CBasePane::CanBeClosed<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__canbeclosed)</ept>), it displays a Close button.","pos":[9182,9327],"source":" If the pane can be closed ( [CBasePane::CanBeClosed](../../mfc/reference/cbasepane-class.md#cbasepane__canbeclosed)), it displays a Close button."},{"content":"If the pane has the <ph id=\"ph1\">`AFX_CBRS_AUTO_ROLLUP`</ph> style, it displays a pin.","pos":[9328,9396],"source":" If the pane has the `AFX_CBRS_AUTO_ROLLUP` style, it displays a pin."},{"content":"If you derive a class from <ph id=\"ph1\">`CPaneFrameWnd`</ph>, you must tell the framework how to create it.","pos":[9403,9492],"source":"If you derive a class from `CPaneFrameWnd`, you must tell the framework how to create it."},{"content":"Either create the class by overriding <bpt id=\"p1\">[</bpt>CPane::CreateDefaultMiniframe<ept id=\"p1\">](../../mfc/reference/cpane-class.md#cpane__createdefaultminiframe)</ept>, or set the <ph id=\"ph1\">`CPane::m_pMiniFrameRTC`</ph> member so that it points to the runtime class information for your class.","pos":[9493,9739],"source":" Either create the class by overriding [CPane::CreateDefaultMiniframe](../../mfc/reference/cpane-class.md#cpane__createdefaultminiframe), or set the `CPane::m_pMiniFrameRTC` member so that it points to the runtime class information for your class."},{"pos":[9748,9769],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[9773,9820],"content":"<bpt id=\"p1\">[</bpt>CObject<ept id=\"p1\">](../../mfc/reference/cobject-class.md)</ept>","source":"[CObject](../../mfc/reference/cobject-class.md)"},{"pos":[9827,9880],"content":"<bpt id=\"p1\">[</bpt>CCmdTarget<ept id=\"p1\">](../../mfc/reference/ccmdtarget-class.md)</ept>","source":"[CCmdTarget](../../mfc/reference/ccmdtarget-class.md)"},{"pos":[9887,9928],"content":"<bpt id=\"p1\">[</bpt>CWnd<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","source":"[CWnd](../../mfc/reference/cwnd-class.md)"},{"pos":[9935,9994],"content":"<bpt id=\"p1\">[</bpt>CPaneFrameWnd<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept>","source":"[CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md)"},{"pos":[10003,10015],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[10019,10048],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxPaneFrameWnd.h","source":"**Header:** afxPaneFrameWnd.h"},{"pos":[10058,10119],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__addpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::AddPane","linkify":"<a name=\"cpaneframewnd__addpane\"></a>  CPaneFrameWnd::AddPane","source":"<a name=\"cpaneframewnd__addpane\"></a>  CPaneFrameWnd::AddPane"},{"content":"Adds a pane.","pos":[10123,10135]},{"pos":[10199,10209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[10213,10224],"source":"[in] `pWnd`"},{"content":"The pane to add.","pos":[10228,10244]},{"pos":[10254,10355],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__addremovepanefromgloballist\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::AddRemovePaneFromGlobalList","linkify":"<a name=\"cpaneframewnd__addremovepanefromgloballist\"></a>  CPaneFrameWnd::AddRemovePaneFromGlobalList","source":"<a name=\"cpaneframewnd__addremovepanefromgloballist\"></a>  CPaneFrameWnd::AddRemovePaneFromGlobalList"},{"content":"Adds or removes a pane from the global list.","pos":[10359,10403]},{"pos":[10518,10528],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[10532,10543],"source":"[in] `pWnd`"},{"content":"The pane to add or remove.","pos":[10547,10573]},{"content":"[in] <ph id=\"ph1\">`bAdd`</ph>","pos":[10580,10591],"source":"[in] `bAdd`"},{"content":"If non-zero, add the pane.","pos":[10595,10621]},{"content":"If 0, remove the pane.","pos":[10622,10644]},{"pos":[10654,10666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if the method was successful; otherwise 0.","pos":[10670,10720]},{"pos":[10730,10801],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__adjustlayout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::AdjustLayout","linkify":"<a name=\"cpaneframewnd__adjustlayout\"></a>  CPaneFrameWnd::AdjustLayout","source":"<a name=\"cpaneframewnd__adjustlayout\"></a>  CPaneFrameWnd::AdjustLayout"},{"content":"Adjusts the layout of the mini-frame window.","pos":[10805,10849]},{"pos":[10903,10982],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__adjustpaneframes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::AdjustPaneFrames","linkify":"<a name=\"cpaneframewnd__adjustpaneframes\"></a>  CPaneFrameWnd::AdjustPaneFrames","source":"<a name=\"cpaneframewnd__adjustpaneframes\"></a>  CPaneFrameWnd::AdjustPaneFrames"},{"pos":[11143,11150],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11160,11235],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__calcbordersize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::CalcBorderSize","linkify":"<a name=\"cpaneframewnd__calcbordersize\"></a>  CPaneFrameWnd::CalcBorderSize","source":"<a name=\"cpaneframewnd__calcbordersize\"></a>  CPaneFrameWnd::CalcBorderSize"},{"content":"Calculates the size of the borders for a miniframe window.","pos":[11239,11297]},{"pos":[11383,11393],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`rectBorderSize`</ph>","pos":[11397,11419],"source":"[out] `rectBorderSize`"},{"content":"Contains the size, in pixels, of the border of the miniframe window.","pos":[11423,11491]},{"pos":[11501,11508],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework to calculate the size of the border of a miniframe window.","pos":[11512,11609]},{"content":"The returned size depends on whether a miniframe window contains a toolbar or a <bpt id=\"p1\">[</bpt>CDockablePane<ept id=\"p1\">](../../mfc/reference/cdockablepane-class.md)</ept>.","pos":[11610,11750],"source":" The returned size depends on whether a miniframe window contains a toolbar or a [CDockablePane](../../mfc/reference/cdockablepane-class.md)."},{"pos":[11760,11851],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__calcexpecteddockedrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::CalcExpectedDockedRect","linkify":"<a name=\"cpaneframewnd__calcexpecteddockedrect\"></a>  CPaneFrameWnd::CalcExpectedDockedRect","source":"<a name=\"cpaneframewnd__calcexpecteddockedrect\"></a>  CPaneFrameWnd::CalcExpectedDockedRect"},{"content":"Calculate the expected rectangle of a docked window.","pos":[11855,11907]},{"pos":[12096,12106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWndToDock`</ph>","pos":[12110,12127],"source":"[in] `pWndToDock`"},{"content":"A pointer to the window to dock.","pos":[12131,12163]},{"content":"[in] <ph id=\"ph1\">`ptMouse`</ph>","pos":[12170,12184],"source":"[in] `ptMouse`"},{"content":"The mouse location.","pos":[12188,12207]},{"content":"[out] <ph id=\"ph1\">`rectResult`</ph>","pos":[12214,12232],"source":"[out] `rectResult`"},{"content":"The calculated rectangle.","pos":[12236,12261]},{"content":"[out] <ph id=\"ph1\">`bDrawTab`</ph>","pos":[12268,12284],"source":"[out] `bDrawTab`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, draw a tab.","pos":[12288,12310],"source":" If `TRUE`, draw a tab."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, do not draw a tab.","pos":[12311,12341],"source":" If `FALSE`, do not draw a tab."},{"content":"[out] <ph id=\"ph1\">`ppTargetBar`</ph>","pos":[12348,12367],"source":"[out] `ppTargetBar`"},{"content":"A pointer to the target pane.","pos":[12371,12400]},{"pos":[12410,12417],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12421,12570],"content":"This method calculates the rectangle that a window would occupy if a user dragged the window to the point specified by <ph id=\"ph1\">`ptMouse`</ph> and docked it there.","source":"This method calculates the rectangle that a window would occupy if a user dragged the window to the point specified by `ptMouse` and docked it there."},{"pos":[12580,12653],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__canbeattached\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::CanBeAttached","linkify":"<a name=\"cpaneframewnd__canbeattached\"></a>  CPaneFrameWnd::CanBeAttached","source":"<a name=\"cpaneframewnd__canbeattached\"></a>  CPaneFrameWnd::CanBeAttached"},{"content":"Determines whether the current pane can be docked to another pane or frame window.","pos":[12657,12739]},{"pos":[12803,12815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12819,12903],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane can be docked to another pane or frame window; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane can be docked to another pane or frame window; otherwise `FALSE`."},{"pos":[12913,12994],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__canbedockedtopane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::CanBeDockedToPane","linkify":"<a name=\"cpaneframewnd__canbedockedtopane\"></a>  CPaneFrameWnd::CanBeDockedToPane","source":"<a name=\"cpaneframewnd__canbedockedtopane\"></a>  CPaneFrameWnd::CanBeDockedToPane"},{"content":"Determines whether the mini-frame window can be docked to a pane.","pos":[12998,13063]},{"pos":[13163,13173],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDockingBar`</ph>","pos":[13177,13195],"source":"[in] `pDockingBar`"},{"content":"A pane.","pos":[13199,13206]},{"pos":[13216,13228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13232,13302],"content":"Nonzero if the mini-frame can be docked to <ph id=\"ph1\">`pDockingBar`</ph>; otherwise 0.","source":"Nonzero if the mini-frame can be docked to `pDockingBar`; otherwise 0."},{"pos":[13312,13403],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__checkgrippervisibility\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::CheckGripperVisibility","linkify":"<a name=\"cpaneframewnd__checkgrippervisibility\"></a>  CPaneFrameWnd::CheckGripperVisibility","source":"<a name=\"cpaneframewnd__checkgrippervisibility\"></a>  CPaneFrameWnd::CheckGripperVisibility"},{"pos":[13570,13577],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13587,13680],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__converttotabbeddocument\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::ConvertToTabbedDocument","linkify":"<a name=\"cpaneframewnd__converttotabbeddocument\"></a>  CPaneFrameWnd::ConvertToTabbedDocument","source":"<a name=\"cpaneframewnd__converttotabbeddocument\"></a>  CPaneFrameWnd::ConvertToTabbedDocument"},{"content":"Converts the pane to a tabbed document.","pos":[13684,13723]},{"pos":[13788,13847],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__create\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::Create","linkify":"<a name=\"cpaneframewnd__create\"></a>  CPaneFrameWnd::Create","source":"<a name=\"cpaneframewnd__create\"></a>  CPaneFrameWnd::Create"},{"pos":[13851,13968],"content":"Creates a miniframe window and attaches it to the <bpt id=\"p1\">[</bpt>CPaneFrameWnd<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> object.","source":"Creates a miniframe window and attaches it to the [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object."},{"pos":[14151,14161],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszWindowName`</ph>","pos":[14165,14186],"source":"[in] `lpszWindowName`"},{"content":"Specifies the text to display on the miniframe window.","pos":[14190,14244]},{"content":"[in] <ph id=\"ph1\">`dwStyle`</ph>","pos":[14251,14265],"source":"[in] `dwStyle`"},{"content":"Specifies the window style.","pos":[14269,14296]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Window Styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept>.","pos":[14297,14377],"source":" For more information, see [Window Styles](../../mfc/reference/window-styles.md)."},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[14384,14395],"source":"[in] `rect`"},{"content":"Specifies the initial size and position of the miniframe window.","pos":[14399,14463]},{"content":"[in] [out] <ph id=\"ph1\">`pParentWnd`</ph>","pos":[14470,14493],"source":"[in] [out] `pParentWnd`"},{"content":"Specifies the parent frame of the miniframe window.","pos":[14497,14548]},{"content":"This value must not be <ph id=\"ph1\">`NULL`</ph>.","pos":[14549,14579],"source":" This value must not be `NULL`."},{"content":"[in] [out] <ph id=\"ph1\">`pContext`</ph>","pos":[14586,14607],"source":"[in] [out] `pContext`"},{"content":"Specifies user-defined context.","pos":[14611,14642]},{"pos":[14652,14664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14668,14734],"content":"<ph id=\"ph1\">`TRUE`</ph> if the window was created successfully; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the window was created successfully; otherwise, `FALSE`."},{"pos":[14744,14751],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A miniframe window is created in two steps.","pos":[14755,14798]},{"content":"First, the framework creates a <bpt id=\"p1\">[</bpt>CPaneFrameWnd<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> object.","pos":[14799,14897],"source":" First, the framework creates a [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object."},{"content":"Second, it calls <ph id=\"ph1\">`Create`</ph> to create the Windows miniframe window and attach it to the <ph id=\"ph2\">`CPaneFrameWnd`</ph> object.","pos":[14898,15007],"source":" Second, it calls `Create` to create the Windows miniframe window and attach it to the `CPaneFrameWnd` object."},{"pos":[15017,15080],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__createex\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::CreateEx","linkify":"<a name=\"cpaneframewnd__createex\"></a>  CPaneFrameWnd::CreateEx","source":"<a name=\"cpaneframewnd__createex\"></a>  CPaneFrameWnd::CreateEx"},{"pos":[15084,15201],"content":"Creates a miniframe window and attaches it to the <bpt id=\"p1\">[</bpt>CPaneFrameWnd<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> object.","source":"Creates a miniframe window and attaches it to the [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object."},{"pos":[15407,15417],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwStyleEx`</ph>","pos":[15421,15437],"source":"[in] `dwStyleEx`"},{"content":"Specifies the extended window style.","pos":[15441,15477]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Extended Window Styles<ept id=\"p1\">](../../mfc/reference/extended-window-styles.md)</ept>","pos":[15478,15575],"source":" For more information, see [Extended Window Styles](../../mfc/reference/extended-window-styles.md)"},{"content":"[in] <ph id=\"ph1\">`lpszWindowName`</ph>","pos":[15582,15603],"source":"[in] `lpszWindowName`"},{"content":"Specifies the text to display on the miniframe window.","pos":[15607,15661]},{"content":"[in] <ph id=\"ph1\">`dwStyle`</ph>","pos":[15668,15682],"source":"[in] `dwStyle`"},{"content":"Specifies the window style.","pos":[15686,15713]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Window Styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept>.","pos":[15714,15794],"source":" For more information, see [Window Styles](../../mfc/reference/window-styles.md)."},{"content":"[in] <ph id=\"ph1\">`rect`</ph>","pos":[15801,15812],"source":"[in] `rect`"},{"content":"Specifies the initial size and position of the miniframe window.","pos":[15816,15880]},{"content":"[in] [out] <ph id=\"ph1\">`pParentWnd`</ph>","pos":[15887,15910],"source":"[in] [out] `pParentWnd`"},{"content":"Specifies the parent frame of the miniframe window.","pos":[15914,15965]},{"content":"This value must not be <ph id=\"ph1\">`NULL`</ph>.","pos":[15966,15996],"source":" This value must not be `NULL`."},{"content":"[in] [out] <ph id=\"ph1\">`pContext`</ph>","pos":[16003,16024],"source":"[in] [out] `pContext`"},{"content":"Specifies user-defined context.","pos":[16028,16059]},{"pos":[16069,16081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16085,16151],"content":"<ph id=\"ph1\">`TRUE`</ph> if the window was created successfully; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the window was created successfully; otherwise, `FALSE`."},{"pos":[16161,16168],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A miniframe window is created in two steps.","pos":[16172,16215]},{"content":"First, the framework creates a <bpt id=\"p1\">[</bpt>CPaneFrameWnd<ept id=\"p1\">](../../mfc/reference/cpaneframewnd-class.md)</ept> object.","pos":[16216,16314],"source":" First, the framework creates a [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object."},{"content":"Second, it calls <ph id=\"ph1\">`Create`</ph> to create the Windows miniframe window and attach it to the <ph id=\"ph2\">`CPaneFrameWnd`</ph> object.","pos":[16315,16424],"source":" Second, it calls `Create` to create the Windows miniframe window and attach it to the `CPaneFrameWnd` object."},{"pos":[16434,16497],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__dockpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::DockPane","linkify":"<a name=\"cpaneframewnd__dockpane\"></a>  CPaneFrameWnd::DockPane","source":"<a name=\"cpaneframewnd__dockpane\"></a>  CPaneFrameWnd::DockPane"},{"content":"Docks the pane.","pos":[16501,16516]},{"pos":[16592,16602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`bWasDocked`</ph>","pos":[16606,16624],"source":"[out] `bWasDocked`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the pane was already docked; otherwise <ph id=\"ph2\">`FALSE`</ph>.","pos":[16627,16685],"source":" `TRUE` if the pane was already docked; otherwise `FALSE`."},{"pos":[16695,16707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16711,16810],"content":"If the operation was successful, the <ph id=\"ph1\">`CDockablePane`</ph> that the pane was docked to; otherwise <ph id=\"ph2\">`NULL`</ph>.","source":"If the operation was successful, the `CDockablePane` that the pane was docked to; otherwise `NULL`."},{"pos":[16820,16907],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__findfloatingpanebyid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::FindFloatingPaneByID","linkify":"<a name=\"cpaneframewnd__findfloatingpanebyid\"></a>  CPaneFrameWnd::FindFloatingPaneByID","source":"<a name=\"cpaneframewnd__findfloatingpanebyid\"></a>  CPaneFrameWnd::FindFloatingPaneByID"},{"content":"Finds a pane with the specified control ID in the global list of floating panes.","pos":[16911,16991]},{"pos":[17066,17076],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nID`</ph>","pos":[17080,17090],"source":"[in] `nID`"},{"content":"Represents the control ID of the pane to find.","pos":[17094,17140]},{"pos":[17150,17162],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17166,17265],"content":"The pane with the specified control ID; otherwise, <ph id=\"ph1\">`NULL`</ph>, if no pane has the specified control ID.","source":"The pane with the specified control ID; otherwise, `NULL`, if no pane has the specified control ID."},{"pos":[17275,17350],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__framefrompoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::FrameFromPoint","linkify":"<a name=\"cpaneframewnd__framefrompoint\"></a>  CPaneFrameWnd::FrameFromPoint","source":"<a name=\"cpaneframewnd__framefrompoint\"></a>  CPaneFrameWnd::FrameFromPoint"},{"content":"Finds the mini-frame window that contains the specified point.","pos":[17354,17416]},{"pos":[17610,17620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pt`</ph>","pos":[17624,17633],"source":"[in] `pt`"},{"content":"The point, in screen coordinates.","pos":[17637,17670]},{"content":"[in] <ph id=\"ph1\">`nSensitivity`</ph>","pos":[17677,17696],"source":"[in] `nSensitivity`"},{"content":"Increase the search area of the mini-frame window by this size.","pos":[17700,17763]},{"content":"A mini-frame window satisfies the search criteria if the given point falls in the increased area.","pos":[17764,17861]},{"content":"[in] <ph id=\"ph1\">`pFrameToExclude`</ph>","pos":[17868,17890],"source":"[in] `pFrameToExclude`"},{"content":"Specifies a mini-frame window to exclude from the search.","pos":[17894,17951]},{"content":"[in] <ph id=\"ph1\">`bFloatMultiOnly`</ph>","pos":[17958,17980],"source":"[in] `bFloatMultiOnly`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, only search mini-frame windows that have the <ph id=\"ph2\">`CBRS_FLOAT_MULTI`</ph> style.","pos":[17984,18065],"source":" If `TRUE`, only search mini-frame windows that have the `CBRS_FLOAT_MULTI` style."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, search all mini-frame windows.","pos":[18066,18108],"source":" If `FALSE`, search all mini-frame windows."},{"pos":[18118,18130],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18134,18206],"content":"A pointer to the mini-frame window that contains <ph id=\"ph1\">`pt`</ph>; otherwise <ph id=\"ph2\">`NULL`</ph>.","source":"A pointer to the mini-frame window that contains `pt`; otherwise `NULL`."},{"pos":[18216,18295],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__getcaptionheight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::GetCaptionHeight","linkify":"<a name=\"cpaneframewnd__getcaptionheight\"></a>  CPaneFrameWnd::GetCaptionHeight","source":"<a name=\"cpaneframewnd__getcaptionheight\"></a>  CPaneFrameWnd::GetCaptionHeight"},{"content":"Returns the height of the mini-frame window caption.","pos":[18299,18351]},{"pos":[18417,18429],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height, in pixels, of the mini-frame window.","pos":[18433,18481]},{"pos":[18491,18498],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to determine the height of a mini-frame window.","pos":[18502,18566]},{"content":"By default, the height is set to <ph id=\"ph1\">`SM_CYSMCAPTION`</ph>.","pos":[18567,18617],"source":" By default, the height is set to `SM_CYSMCAPTION`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>GetSystemMetrics Function<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms724385)</ept>.","pos":[18618,18732],"source":" For more information, see [GetSystemMetrics Function](http://msdn.microsoft.com/library/windows/desktop/ms724385)."},{"pos":[18742,18817],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__getcaptionrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::GetCaptionRect","linkify":"<a name=\"cpaneframewnd__getcaptionrect\"></a>  CPaneFrameWnd::GetCaptionRect","source":"<a name=\"cpaneframewnd__getcaptionrect\"></a>  CPaneFrameWnd::GetCaptionRect"},{"content":"Calculates the bounding rectangle of a mini-frame window caption.","pos":[18821,18886]},{"pos":[18969,18979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] <ph id=\"ph1\">`rectCaption`</ph>","pos":[18983,19002],"source":"[out] `rectCaption`"},{"content":"Contains the size and position of the mini-frame window caption, in screen coordinates.","pos":[19006,19093]},{"pos":[19103,19110],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework to calculate the bounding rectangle of a mini-frame window caption.","pos":[19114,19220]},{"pos":[19230,19305],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__getcaptiontext\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::GetCaptionText","linkify":"<a name=\"cpaneframewnd__getcaptiontext\"></a>  CPaneFrameWnd::GetCaptionText","source":"<a name=\"cpaneframewnd__getcaptiontext\"></a>  CPaneFrameWnd::GetCaptionText"},{"content":"Returns the caption text.","pos":[19309,19334]},{"pos":[19393,19405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The caption text of the mini-frame window.","pos":[19409,19451]},{"pos":[19461,19468],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework when it displays the caption text.","pos":[19472,19545]},{"pos":[19555,19636],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__getdockingmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::GetDockingManager","linkify":"<a name=\"cpaneframewnd__getdockingmanager\"></a>  CPaneFrameWnd::GetDockingManager","source":"<a name=\"cpaneframewnd__getdockingmanager\"></a>  CPaneFrameWnd::GetDockingManager"},{"pos":[19811,19823],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19833,19840],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19850,19925],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__getdockingmode\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::GetDockingMode","linkify":"<a name=\"cpaneframewnd__getdockingmode\"></a>  CPaneFrameWnd::GetDockingMode","source":"<a name=\"cpaneframewnd__getdockingmode\"></a>  CPaneFrameWnd::GetDockingMode"},{"content":"Returns the docking mode.","pos":[19929,19954]},{"pos":[20028,20040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The docking mode.","pos":[20044,20061]},{"content":"One of the following values:","pos":[20062,20090]},{"pos":[20161,20246],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__getfirstvisiblepane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::GetFirstVisiblePane","linkify":"<a name=\"cpaneframewnd__getfirstvisiblepane\"></a>  CPaneFrameWnd::GetFirstVisiblePane","source":"<a name=\"cpaneframewnd__getfirstvisiblepane\"></a>  CPaneFrameWnd::GetFirstVisiblePane"},{"content":"Returns the first visible pane that is contained in a mini-frame window.","pos":[20250,20322]},{"pos":[20393,20405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20409,20503],"content":"The first pane in the mini-frame window, or <ph id=\"ph1\">`NULL`</ph> if the mini-frame window contains no panes.","source":"The first pane in the mini-frame window, or `NULL` if the mini-frame window contains no panes."},{"pos":[20513,20582],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__gethotpoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::GetHotPoint","linkify":"<a name=\"cpaneframewnd__gethotpoint\"></a>  CPaneFrameWnd::GetHotPoint","source":"<a name=\"cpaneframewnd__gethotpoint\"></a>  CPaneFrameWnd::GetHotPoint"},{"pos":[20741,20753],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20763,20770],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[20780,20841],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__getpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::GetPane","linkify":"<a name=\"cpaneframewnd__getpane\"></a>  CPaneFrameWnd::GetPane","source":"<a name=\"cpaneframewnd__getpane\"></a>  CPaneFrameWnd::GetPane"},{"content":"Returns a pane that is contained in the mini-frame window.","pos":[20845,20903]},{"pos":[20962,20974],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20978,21077],"content":"The pane that is contained in the mini-frame, or <ph id=\"ph1\">`NULL`</ph> if the mini-frame window contains no panes.","source":"The pane that is contained in the mini-frame, or `NULL` if the mini-frame window contains no panes."},{"pos":[21087,21094],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21104,21175],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__getpanecount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::GetPaneCount","linkify":"<a name=\"cpaneframewnd__getpanecount\"></a>  CPaneFrameWnd::GetPaneCount","source":"<a name=\"cpaneframewnd__getpanecount\"></a>  CPaneFrameWnd::GetPaneCount"},{"content":"Returns the number of panes that are contained in a mini-frame window.","pos":[21179,21249]},{"pos":[21311,21323],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of panes in the mini-frame window.","pos":[21327,21372]},{"content":"This value can be zero.","pos":[21373,21396]},{"pos":[21406,21413],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21423,21488],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__getparent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::GetParent","linkify":"<a name=\"cpaneframewnd__getparent\"></a>  CPaneFrameWnd::GetParent","source":"<a name=\"cpaneframewnd__getparent\"></a>  CPaneFrameWnd::GetParent"},{"pos":[21635,21647],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21657,21664],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21674,21743],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__getpinstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::GetPinState","linkify":"<a name=\"cpaneframewnd__getpinstate\"></a>  CPaneFrameWnd::GetPinState","source":"<a name=\"cpaneframewnd__getpinstate\"></a>  CPaneFrameWnd::GetPinState"},{"pos":[21900,21912],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21922,21929],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[21939,22028],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__getrecentfloatingrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::GetRecentFloatingRect","linkify":"<a name=\"cpaneframewnd__getrecentfloatingrect\"></a>  CPaneFrameWnd::GetRecentFloatingRect","source":"<a name=\"cpaneframewnd__getrecentfloatingrect\"></a>  CPaneFrameWnd::GetRecentFloatingRect"},{"pos":[22196,22208],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22218,22225],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22235,22320],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__getvisiblepanecount\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::GetVisiblePaneCount","linkify":"<a name=\"cpaneframewnd__getvisiblepanecount\"></a>  CPaneFrameWnd::GetVisiblePaneCount","source":"<a name=\"cpaneframewnd__getvisiblepanecount\"></a>  CPaneFrameWnd::GetVisiblePaneCount"},{"content":"Returns the number of visible panes that are contained in a mini-frame window.","pos":[22324,22402]},{"pos":[22471,22483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of visible panes.","pos":[22487,22515]},{"pos":[22525,22532],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22542,22603],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__hittest\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::HitTest","linkify":"<a name=\"cpaneframewnd__hittest\"></a>  CPaneFrameWnd::HitTest","source":"<a name=\"cpaneframewnd__hittest\"></a>  CPaneFrameWnd::HitTest"},{"content":"Determines what part of a mini-frame window is at a given point.","pos":[22607,22671]},{"pos":[22767,22777],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[22781,22793],"source":"[in] `point`"},{"content":"The point to test.","pos":[22797,22815]},{"content":"[in] <ph id=\"ph1\">`bDetectCaption`</ph>","pos":[22822,22843],"source":"[in] `bDetectCaption`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, check the point against the caption.","pos":[22847,22894],"source":" If `TRUE`, check the point against the caption."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, ignore the caption.","pos":[22895,22926],"source":" If `FALSE`, ignore the caption."},{"pos":[22936,22948],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"One of the following values:","pos":[22952,22980]},{"content":"Value","pos":[22987,22992]},{"content":"Meaning","pos":[22993,23000]},{"content":"The point is outside the mini-frame window.","pos":[23047,23090]},{"content":"The point is in the client area.","pos":[23106,23138]},{"content":"The point is on the caption.","pos":[23155,23183]},{"content":"The point is at the top.","pos":[23196,23220]},{"content":"The point is at the top left.","pos":[23237,23266]},{"content":"The point is at the top right.","pos":[23284,23314]},{"content":"The point is at the left.","pos":[23328,23353]},{"content":"The point is at the right.","pos":[23368,23394]},{"content":"The point is at the bottom.","pos":[23410,23437]},{"content":"The point is at the bottom left.","pos":[23457,23489]},{"content":"The point is at the bottom right.","pos":[23510,23543]},{"pos":[23554,23621],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__iscaptured\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::IsCaptured","linkify":"<a name=\"cpaneframewnd__iscaptured\"></a>  CPaneFrameWnd::IsCaptured","source":"<a name=\"cpaneframewnd__iscaptured\"></a>  CPaneFrameWnd::IsCaptured"},{"pos":[23777,23789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23799,23806],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23816,23885],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__isdelayshow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::IsDelayShow","linkify":"<a name=\"cpaneframewnd__isdelayshow\"></a>  CPaneFrameWnd::IsDelayShow","source":"<a name=\"cpaneframewnd__isdelayshow\"></a>  CPaneFrameWnd::IsDelayShow"},{"pos":[24042,24054],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24064,24071],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24081,24148],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__isrolldown\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::IsRollDown","linkify":"<a name=\"cpaneframewnd__isrolldown\"></a>  CPaneFrameWnd::IsRollDown","source":"<a name=\"cpaneframewnd__isrolldown\"></a>  CPaneFrameWnd::IsRollDown"},{"content":"Determines whether a mini-frame window should be rolled down.","pos":[24152,24213]},{"pos":[24274,24286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24290,24362],"content":"<ph id=\"ph1\">`TRUE`</ph> if the mini-frame window must be rolled down; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the mini-frame window must be rolled down; otherwise, `FALSE`."},{"pos":[24372,24379],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework to determine whether a mini-frame window should be rolled down.","pos":[24383,24485]},{"content":"The rollup/rolldown feature is enabled for a mini-frame window if it contains at least one pane that has the <ph id=\"ph1\">`AFX_CBRS_AUTO_ROLLUP`</ph> flag.","pos":[24486,24623],"source":" The rollup/rolldown feature is enabled for a mini-frame window if it contains at least one pane that has the `AFX_CBRS_AUTO_ROLLUP` flag."},{"content":"This flag is set when a pane is created.","pos":[24624,24664]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CBasePane::CreateEx<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__createex)</ept>.","pos":[24665,24773],"source":" For more information, see [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex)."},{"content":"By default, the framework checks whether the mouse pointer is inside the mini-frame window bounding rectangle to determine whether the window has to be rolled down.","pos":[24780,24944]},{"content":"You can override this behavior in a derived class.","pos":[24945,24995]},{"pos":[25005,25068],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__isrollup\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::IsRollUp","linkify":"<a name=\"cpaneframewnd__isrollup\"></a>  CPaneFrameWnd::IsRollUp","source":"<a name=\"cpaneframewnd__isrollup\"></a>  CPaneFrameWnd::IsRollUp"},{"content":"Determines whether a mini-frame window should be rolled up.","pos":[25072,25131]},{"pos":[25190,25202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25206,25276],"content":"<ph id=\"ph1\">`TRUE`</ph> if the mini-frame window must be rolled up; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the mini-frame window must be rolled up; otherwise, `FALSE`."},{"pos":[25286,25293],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework to determine whether a mini-frame window should be rolled up.","pos":[25297,25397]},{"content":"The rollup/rolldown feature is enabled for a mini-frame window if it contains at least one pane that has the <ph id=\"ph1\">`AFX_CBRS_AUTO_ROLLUP`</ph> flag.","pos":[25398,25535],"source":" The rollup/rolldown feature is enabled for a mini-frame window if it contains at least one pane that has the `AFX_CBRS_AUTO_ROLLUP` flag."},{"content":"This flag is set when a pane is created.","pos":[25536,25576]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CBasePane::CreateEx<ept id=\"p1\">](../../mfc/reference/cbasepane-class.md#cbasepane__createex)</ept>.","pos":[25577,25685],"source":" For more information, see [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex)."},{"content":"By default, the framework checks whether the mouse pointer is inside the mini-frame window bounding rectangle to determine whether the window has to be rolled up.","pos":[25692,25854]},{"content":"You can override this behavior in a derived class.","pos":[25855,25905]},{"pos":[25915,25994],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__killdockingtimer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::KillDockingTimer","linkify":"<a name=\"cpaneframewnd__killdockingtimer\"></a>  CPaneFrameWnd::KillDockingTimer","source":"<a name=\"cpaneframewnd__killdockingtimer\"></a>  CPaneFrameWnd::KillDockingTimer"},{"content":"Stops the docking timer.","pos":[25998,26022]},{"pos":[26072,26137],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__loadstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::LoadState","linkify":"<a name=\"cpaneframewnd__loadstate\"></a>  CPaneFrameWnd::LoadState","source":"<a name=\"cpaneframewnd__loadstate\"></a>  CPaneFrameWnd::LoadState"},{"content":"Loads the pane's state from the registry.","pos":[26141,26182]},{"pos":[26297,26307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszProfileName`</ph>","pos":[26311,26333],"source":"[in] `lpszProfileName`"},{"content":"The profile name.","pos":[26337,26354]},{"content":"[in] <ph id=\"ph1\">`uiID`</ph>","pos":[26361,26372],"source":"[in] `uiID`"},{"content":"The pane ID.","pos":[26376,26388]},{"pos":[26398,26410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26414,26482],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane state was loaded successfully; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane state was loaded successfully; otherwise `FALSE`."},{"pos":[26492,26567],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__m_busesavebits\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::m_bUseSaveBits","linkify":"<a name=\"cpaneframewnd__m_busesavebits\"></a>  CPaneFrameWnd::m_bUseSaveBits","source":"<a name=\"cpaneframewnd__m_busesavebits\"></a>  CPaneFrameWnd::m_bUseSaveBits"},{"pos":[26571,26657],"content":"Specifies whether to register the window class that has the <ph id=\"ph1\">`CS_SAVEBITS`</ph> class style.","source":"Specifies whether to register the window class that has the `CS_SAVEBITS` class style."},{"pos":[26728,26735],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set this static member to <ph id=\"ph1\">`TRUE`</ph> to register the mini-frame window class that has the <ph id=\"ph2\">`CS_SAVEBITS`</ph> style.","pos":[26739,26845],"source":"Set this static member to `TRUE` to register the mini-frame window class that has the `CS_SAVEBITS` style."},{"content":"This may help reduce flickering when a user drags the mini-frame window.","pos":[26846,26918]},{"pos":[26928,26999],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__onbeforedock\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::OnBeforeDock","linkify":"<a name=\"cpaneframewnd__onbeforedock\"></a>  CPaneFrameWnd::OnBeforeDock","source":"<a name=\"cpaneframewnd__onbeforedock\"></a>  CPaneFrameWnd::OnBeforeDock"},{"content":"Determines if docking is possible.","pos":[27003,27037]},{"pos":[27091,27103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27107,27157],"content":"<ph id=\"ph1\">`TRUE`</ph> if docking is possible; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if docking is possible; otherwise, `FALSE`."},{"pos":[27167,27246],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__oncheckrollstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::OnCheckRollState","linkify":"<a name=\"cpaneframewnd__oncheckrollstate\"></a>  CPaneFrameWnd::OnCheckRollState","source":"<a name=\"cpaneframewnd__oncheckrollstate\"></a>  CPaneFrameWnd::OnCheckRollState"},{"content":"Determines whether a mini-frame window should be rolled up or down.","pos":[27250,27317]},{"pos":[27375,27382],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework to determine whether a mini-frame window should be rolled up or down.","pos":[27386,27494]},{"content":"By default, the framework calls <bpt id=\"p1\">[</bpt>CPaneFrameWnd::IsRollUp<ept id=\"p1\">](#cpaneframewnd__isrollup)</ept> and <bpt id=\"p2\">[</bpt>CPaneFrameWnd::IsRollDown<ept id=\"p2\">](#cpaneframewnd__isrolldown)</ept> and just stretches or restores the mini-frame window.","pos":[27501,27698],"source":"By default, the framework calls [CPaneFrameWnd::IsRollUp](#cpaneframewnd__isrollup) and [CPaneFrameWnd::IsRollDown](#cpaneframewnd__isrolldown) and just stretches or restores the mini-frame window."},{"content":"You can override this method in a derived class to use a different visual effect.","pos":[27699,27780]},{"pos":[27790,27871],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__ondocktorecentpos\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::OnDockToRecentPos","linkify":"<a name=\"cpaneframewnd__ondocktorecentpos\"></a>  CPaneFrameWnd::OnDockToRecentPos","source":"<a name=\"cpaneframewnd__ondocktorecentpos\"></a>  CPaneFrameWnd::OnDockToRecentPos"},{"content":"Docks the mini-frame window at its most recent position.","pos":[27875,27931]},{"pos":[27990,28061],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__ondrawborder\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::OnDrawBorder","linkify":"<a name=\"cpaneframewnd__ondrawborder\"></a>  CPaneFrameWnd::OnDrawBorder","source":"<a name=\"cpaneframewnd__ondrawborder\"></a>  CPaneFrameWnd::OnDrawBorder"},{"content":"Draws the borders of a mini-frame window.","pos":[28065,28106]},{"pos":[28168,28178],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDC`</ph>","pos":[28182,28192],"source":"[in] `pDC`"},{"content":"The device context used to draw the border.","pos":[28196,28239]},{"pos":[28249,28256],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called by the framework to draw the borders of the mini-frame window.","pos":[28260,28344]},{"pos":[28354,28435],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__onkillrolluptimer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::OnKillRollUpTimer","linkify":"<a name=\"cpaneframewnd__onkillrolluptimer\"></a>  CPaneFrameWnd::OnKillRollUpTimer","source":"<a name=\"cpaneframewnd__onkillrolluptimer\"></a>  CPaneFrameWnd::OnKillRollUpTimer"},{"content":"Stops the rollup timer.","pos":[28439,28462]},{"pos":[28521,28588],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__onmovepane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::OnMovePane","linkify":"<a name=\"cpaneframewnd__onmovepane\"></a>  CPaneFrameWnd::OnMovePane","source":"<a name=\"cpaneframewnd__onmovepane\"></a>  CPaneFrameWnd::OnMovePane"},{"content":"Moves the mini-frame window by a specified offset.","pos":[28592,28642]},{"pos":[28733,28743],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[28747,28758],"source":"[in] `pBar`"},{"content":"A pointer to a pane (ignored).","pos":[28762,28792]},{"content":"[in] <ph id=\"ph1\">`ptOffset`</ph>","pos":[28799,28814],"source":"[in] `ptOffset`"},{"content":"The offset by which to move the pane.","pos":[28818,28855]},{"pos":[28865,28948],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__onpanerecalclayout\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::OnPaneRecalcLayout","linkify":"<a name=\"cpaneframewnd__onpanerecalclayout\"></a>  CPaneFrameWnd::OnPaneRecalcLayout","source":"<a name=\"cpaneframewnd__onpanerecalclayout\"></a>  CPaneFrameWnd::OnPaneRecalcLayout"},{"content":"Adjusts the layout of a pane inside a mini-frame window.","pos":[28952,29008]},{"pos":[29068,29075],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework calls this method when it must adjust the layout of a pane inside the mini-frame window.","pos":[29079,29181]},{"content":"By default, the pane is positioned to cover the complete client area of the mini-frame window.","pos":[29188,29282]},{"pos":[29292,29371],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__onsetrolluptimer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::OnSetRollUpTimer","linkify":"<a name=\"cpaneframewnd__onsetrolluptimer\"></a>  CPaneFrameWnd::OnSetRollUpTimer","source":"<a name=\"cpaneframewnd__onsetrolluptimer\"></a>  CPaneFrameWnd::OnSetRollUpTimer"},{"content":"Sets the rollup timer.","pos":[29375,29397]},{"pos":[29455,29522],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__onshowpane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::OnShowPane","linkify":"<a name=\"cpaneframewnd__onshowpane\"></a>  CPaneFrameWnd::OnShowPane","source":"<a name=\"cpaneframewnd__onshowpane\"></a>  CPaneFrameWnd::OnShowPane"},{"content":"Called by the framework when a pane in the mini-frame window is hidden or displayed.","pos":[29526,29610]},{"pos":[29704,29714],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBar`</ph>","pos":[29718,29729],"source":"[in] `pBar`"},{"content":"The pane that is being shown or hidden.","pos":[29733,29772]},{"content":"[in] <ph id=\"ph1\">`bShow`</ph>","pos":[29779,29791],"source":"[in] `bShow`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> if the pane is being shown; <ph id=\"ph2\">`FALSE`</ph> if the pane is being hidden.","pos":[29794,29866],"source":" `TRUE` if the pane is being shown; `FALSE` if the pane is being hidden."},{"pos":[29876,29883],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Called by the framework when a pane in the mini-frame window is shown or hidden.","pos":[29887,29967]},{"content":"The default implementation does nothing.","pos":[29968,30008]},{"pos":[30018,30071],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__pin\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::Pin","linkify":"<a name=\"cpaneframewnd__pin\"></a>  CPaneFrameWnd::Pin","source":"<a name=\"cpaneframewnd__pin\"></a>  CPaneFrameWnd::Pin"},{"pos":[30227,30237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[30241,30252],"content":"[in] <ph id=\"ph1\">`bPin`</ph>","source":"[in] `bPin`"},{"pos":[30262,30269],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30279,30352],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__panefrompoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::PaneFromPoint","linkify":"<a name=\"cpaneframewnd__panefrompoint\"></a>  CPaneFrameWnd::PaneFromPoint","source":"<a name=\"cpaneframewnd__panefrompoint\"></a>  CPaneFrameWnd::PaneFromPoint"},{"content":"Returns a pane if it contains a user-supplied point inside a mini-frame window.","pos":[30356,30435]},{"pos":[30566,30576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`point`</ph>","pos":[30580,30592],"source":"[in] `point`"},{"content":"The point that the user clicked, in screen coordinates.","pos":[30596,30651]},{"content":"[in] <ph id=\"ph1\">`nSensitivity`</ph>","pos":[30658,30677],"source":"[in] `nSensitivity`"},{"content":"This parameter is not used.","pos":[30681,30708]},{"content":"[in] <ph id=\"ph1\">`bCheckVisibility`</ph>","pos":[30715,30738],"source":"[in] `bCheckVisibility`"},{"content":"<ph id=\"ph1\"> `TRUE`</ph> to specify that only visible panes should be returned; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","pos":[30741,30823],"source":" `TRUE` to specify that only visible panes should be returned; otherwise, `FALSE`."},{"pos":[30833,30845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30849,30926],"content":"The pane that the user clicked, or <ph id=\"ph1\">`NULL`</ph> if no pane exists at that location.","source":"The pane that the user clicked, or `NULL` if no pane exists at that location."},{"pos":[30936,30943],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to obtain a pane that contains the given point.","pos":[30947,31011]},{"pos":[31021,31086],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__redrawall\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::RedrawAll","linkify":"<a name=\"cpaneframewnd__redrawall\"></a>  CPaneFrameWnd::RedrawAll","source":"<a name=\"cpaneframewnd__redrawall\"></a>  CPaneFrameWnd::RedrawAll"},{"content":"Redraws all mini-frame windows.","pos":[31090,31121]},{"pos":[31171,31178],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31182,31327],"content":"This method updates all mini-frame windows by calling <bpt id=\"p1\">[</bpt>CWnd::RedrawWindow<ept id=\"p1\">](../../mfc/reference/cwnd-class.md#cwnd__redrawwindow)</ept> for each window.","source":"This method updates all mini-frame windows by calling [CWnd::RedrawWindow](../../mfc/reference/cwnd-class.md#cwnd__redrawwindow) for each window."},{"pos":[31337,31422],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__removenonvalidpanes\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::RemoveNonValidPanes","linkify":"<a name=\"cpaneframewnd__removenonvalidpanes\"></a>  CPaneFrameWnd::RemoveNonValidPanes","source":"<a name=\"cpaneframewnd__removenonvalidpanes\"></a>  CPaneFrameWnd::RemoveNonValidPanes"},{"content":"Called by the framework to remove non-valid panes.","pos":[31426,31476]},{"pos":[31537,31604],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__removepane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::RemovePane","linkify":"<a name=\"cpaneframewnd__removepane\"></a>  CPaneFrameWnd::RemovePane","source":"<a name=\"cpaneframewnd__removepane\"></a>  CPaneFrameWnd::RemovePane"},{"content":"Removes a pane from the mini-frame window.","pos":[31608,31650]},{"pos":[31789,31799],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pWnd`</ph>","pos":[31803,31814],"source":"[in] `pWnd`"},{"content":"A pointer to the pane to remove.","pos":[31818,31850]},{"content":"[in] <ph id=\"ph1\">`bDestroy`</ph>","pos":[31857,31872],"source":"[in] `bDestroy`"},{"content":"Specifies what happens to the mini-frame window.","pos":[31876,31924]},{"content":"If <ph id=\"ph1\">`bDestroy`</ph> is <ph id=\"ph2\">`TRUE`</ph>, this method destroys the mini-frame window immediately.","pos":[31925,32005],"source":" If `bDestroy` is `TRUE`, this method destroys the mini-frame window immediately."},{"content":"If it is <ph id=\"ph1\">`FALSE`</ph>, this method destroys the mini-frame window after a certain delay.","pos":[32006,32089],"source":" If it is `FALSE`, this method destroys the mini-frame window after a certain delay."},{"content":"[in] <ph id=\"ph1\">`bNoDelayedDestroy`</ph>","pos":[32096,32120],"source":"[in] `bNoDelayedDestroy`"},{"content":"If <ph id=\"ph1\">`TRUE`</ph>, delayed destruction is disabled.","pos":[32124,32167],"source":" If `TRUE`, delayed destruction is disabled."},{"content":"If <ph id=\"ph1\">`FALSE`</ph>, delayed destruction is enabled.","pos":[32168,32211],"source":" If `FALSE`, delayed destruction is enabled."},{"pos":[32221,32228],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The framework can destroy mini-frame windows immediately or after a certain delay.","pos":[32232,32314]},{"content":"If you want to delay destruction of mini-frame windows, pass <ph id=\"ph1\">`FALSE`</ph> in the <ph id=\"ph2\">`bNoDelayedDestroy`</ph> parameter.","pos":[32315,32421],"source":" If you want to delay destruction of mini-frame windows, pass `FALSE` in the `bNoDelayedDestroy` parameter."},{"content":"Delayed destruction occurs when the framework processes the <ph id=\"ph1\">`AFX_WM_CHECKEMPTYMINIFRAME`</ph> message.","pos":[32422,32519],"source":" Delayed destruction occurs when the framework processes the `AFX_WM_CHECKEMPTYMINIFRAME` message."},{"pos":[32529,32598],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__replacepane\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::ReplacePane","linkify":"<a name=\"cpaneframewnd__replacepane\"></a>  CPaneFrameWnd::ReplacePane","source":"<a name=\"cpaneframewnd__replacepane\"></a>  CPaneFrameWnd::ReplacePane"},{"content":"Replaces one pane with another.","pos":[32602,32633]},{"pos":[32743,32753],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pBarOrg`</ph>","pos":[32757,32771],"source":"[in] `pBarOrg`"},{"content":"A pointer to the original pane.","pos":[32775,32806]},{"content":"[in] <ph id=\"ph1\">`pBarReplaceWith`</ph>","pos":[32813,32835],"source":"[in] `pBarReplaceWith`"},{"content":"A pointer to the pane that replaces the original pane.","pos":[32839,32893]},{"pos":[32903,32968],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__savestate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::SaveState","linkify":"<a name=\"cpaneframewnd__savestate\"></a>  CPaneFrameWnd::SaveState","source":"<a name=\"cpaneframewnd__savestate\"></a>  CPaneFrameWnd::SaveState"},{"content":"Saves the pane's state to the registry.","pos":[32972,33011]},{"pos":[33126,33136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`lpszProfileName`</ph>","pos":[33140,33162],"source":"[in] `lpszProfileName`"},{"content":"The profile name.","pos":[33166,33183]},{"content":"[in] <ph id=\"ph1\">`uiID`</ph>","pos":[33190,33201],"source":"[in] `uiID`"},{"content":"The pane ID.","pos":[33205,33217]},{"pos":[33227,33239],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33243,33310],"content":"<ph id=\"ph1\">`TRUE`</ph> if the pane state was saved successfully; otherwise <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the pane state was saved successfully; otherwise `FALSE`."},{"pos":[33320,33401],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__setcaptionbuttons\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::SetCaptionButtons","linkify":"<a name=\"cpaneframewnd__setcaptionbuttons\"></a>  CPaneFrameWnd::SetCaptionButtons","source":"<a name=\"cpaneframewnd__setcaptionbuttons\"></a>  CPaneFrameWnd::SetCaptionButtons"},{"content":"Sets caption buttons.","pos":[33405,33426]},{"pos":[33500,33510],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`dwButtons`</ph>","pos":[33514,33530],"source":"[in] `dwButtons`"},{"content":"Bitwise-OR combination of the following values:","pos":[33534,33581]},{"pos":[33716,33787],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__setdelayshow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::SetDelayShow","linkify":"<a name=\"cpaneframewnd__setdelayshow\"></a>  CPaneFrameWnd::SetDelayShow","source":"<a name=\"cpaneframewnd__setdelayshow\"></a>  CPaneFrameWnd::SetDelayShow"},{"pos":[33951,33961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[33965,33982],"content":"[in] <ph id=\"ph1\">`bDelayShow`</ph>","source":"[in] `bDelayShow`"},{"pos":[33992,33999],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[34009,34090],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__setdockingmanager\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::SetDockingManager","linkify":"<a name=\"cpaneframewnd__setdockingmanager\"></a>  CPaneFrameWnd::SetDockingManager","source":"<a name=\"cpaneframewnd__setdockingmanager\"></a>  CPaneFrameWnd::SetDockingManager"},{"pos":[34269,34279],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[34283,34298],"content":"[in] <ph id=\"ph1\">`pManager`</ph>","source":"[in] `pManager`"},{"pos":[34308,34315],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[34325,34402],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__setdockingtimer\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::SetDockingTimer","linkify":"<a name=\"cpaneframewnd__setdockingtimer\"></a>  CPaneFrameWnd::SetDockingTimer","source":"<a name=\"cpaneframewnd__setdockingtimer\"></a>  CPaneFrameWnd::SetDockingTimer"},{"content":"Sets the docking timer.","pos":[34406,34429]},{"pos":[34491,34501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`nTimeOut`</ph>","pos":[34505,34520],"source":"[in] `nTimeOut`"},{"content":"Timeout value in milliseconds.","pos":[34524,34554]},{"pos":[34564,34635],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__setdockstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::SetDockState","linkify":"<a name=\"cpaneframewnd__setdockstate\"></a>  CPaneFrameWnd::SetDockState","source":"<a name=\"cpaneframewnd__setdockstate\"></a>  CPaneFrameWnd::SetDockState"},{"content":"Sets the docking state.","pos":[34639,34662]},{"pos":[34745,34755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDockManager`</ph>","pos":[34759,34778],"source":"[in] `pDockManager`"},{"content":"A pointer to a docking manager.","pos":[34782,34813]},{"pos":[34823,34892],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__sethotpoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::SetHotPoint","linkify":"<a name=\"cpaneframewnd__sethotpoint\"></a>  CPaneFrameWnd::SetHotPoint","source":"<a name=\"cpaneframewnd__sethotpoint\"></a>  CPaneFrameWnd::SetHotPoint"},{"pos":[35053,35063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[35067,35079],"content":"[in] <ph id=\"ph1\">`ptNew`</ph>","source":"[in] `ptNew`"},{"pos":[35089,35096],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35106,35183],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__setpredockstate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::SetPreDockState","linkify":"<a name=\"cpaneframewnd__setpredockstate\"></a>  CPaneFrameWnd::SetPreDockState","source":"<a name=\"cpaneframewnd__setpredockstate\"></a>  CPaneFrameWnd::SetPreDockState"},{"content":"Called by the framework to set the predocking state.","pos":[35187,35239]},{"pos":[35412,35422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`preDockState`</ph>","pos":[35426,35445],"source":"[in] `preDockState`"},{"content":"Possible values:","pos":[35449,35465]},{"pos":[35473,35487],"content":"<ph id=\"ph1\">`PDS_NOTHING`</ph>,","source":"`PDS_NOTHING`,"},{"pos":[35495,35514],"content":"<ph id=\"ph1\">`PDS_DOCK_REGULAR`</ph>,","source":"`PDS_DOCK_REGULAR`,"},{"pos":[35546,35597],"content":"[in] `pBarToDock`  \nA pointer to the pane to dock.","leadings":[""," "],"nodes":[{"content":"[in] <ph id=\"ph1\">`pBarToDock`</ph>","pos":[0,17],"source":"[in] `pBarToDock`"},{"content":"A pointer to the pane to dock.","pos":[20,50]}]},{"pos":[35604,35673],"content":"[in] `dockMethod`  \nThe docking method. (This parameter is ignored.)","leadings":[""," "],"nodes":[{"content":"[in] <ph id=\"ph1\">`dockMethod`</ph>","pos":[0,17],"source":"[in] `dockMethod`"},{"content":"The docking method. (This parameter is ignored.)","pos":[20,68],"nodes":[{"content":"The docking method.","pos":[0,19]},{"content":"(This parameter is ignored.)","pos":[20,48]}]}]},{"pos":[35683,35695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35699,35768],"content":"<ph id=\"ph1\">`TRUE`</ph> if the mini-frame window is undocked; <ph id=\"ph2\">`FALSE`</ph> if it is docked.","source":"`TRUE` if the mini-frame window is undocked; `FALSE` if it is docked."},{"pos":[35778,35851],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__sizetocontent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::SizeToContent","linkify":"<a name=\"cpaneframewnd__sizetocontent\"></a>  CPaneFrameWnd::SizeToContent","source":"<a name=\"cpaneframewnd__sizetocontent\"></a>  CPaneFrameWnd::SizeToContent"},{"content":"Adjusts the size of a mini-frame window so that it is equivalent to a contained pane.","pos":[35855,35940]},{"pos":[35995,36002],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to adjust the size of a mini-frame window to the size of a contained pane.","pos":[36006,36097]},{"pos":[36107,36178],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__starttearoff\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::StartTearOff","linkify":"<a name=\"cpaneframewnd__starttearoff\"></a>  CPaneFrameWnd::StartTearOff","source":"<a name=\"cpaneframewnd__starttearoff\"></a>  CPaneFrameWnd::StartTearOff"},{"content":"Tears off a menu.","pos":[36182,36199]},{"pos":[36260,36270],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pMenu`</ph>","pos":[36274,36286],"source":"[in] `pMenu`"},{"content":"A pointer to a menu.","pos":[36290,36310]},{"pos":[36320,36332],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36336,36392],"content":"<ph id=\"ph1\">`TRUE`</ph> if the method was successful; otherwise, <ph id=\"ph2\">`FALSE`</ph>.","source":"`TRUE` if the method was successful; otherwise, `FALSE`."},{"pos":[36402,36495],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__storerecentdocksiteinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::StoreRecentDockSiteInfo","linkify":"<a name=\"cpaneframewnd__storerecentdocksiteinfo\"></a>  CPaneFrameWnd::StoreRecentDockSiteInfo","source":"<a name=\"cpaneframewnd__storerecentdocksiteinfo\"></a>  CPaneFrameWnd::StoreRecentDockSiteInfo"},{"pos":[36674,36684],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[36688,36699],"content":"[in] <ph id=\"ph1\">`pBar`</ph>","source":"[in] `pBar`"},{"pos":[36709,36716],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[36726,36823],"content":"<bpt id=\"p1\">&lt;a name=\"cpaneframewnd__storerecenttabrelatedinfo\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CPaneFrameWnd::StoreRecentTabRelatedInfo","linkify":"<a name=\"cpaneframewnd__storerecenttabrelatedinfo\"></a>  CPaneFrameWnd::StoreRecentTabRelatedInfo","source":"<a name=\"cpaneframewnd__storerecenttabrelatedinfo\"></a>  CPaneFrameWnd::StoreRecentTabRelatedInfo"},{"pos":[37057,37067],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] <ph id=\"ph1\">`pDockingBar`</ph>","pos":[37071,37089],"source":"[in] `pDockingBar`"},{"content":"[in] <ph id=\"ph1\">`pTabbedBar`</ph>","pos":[37093,37110],"source":" [in] `pTabbedBar`"},{"pos":[37120,37127],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37136,37144],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[37148,37196],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Classes<ept id=\"p1\">](../../mfc/reference/mfc-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[37199,37246],"source":" [Classes](../../mfc/reference/mfc-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CWnd Class<ept id=\"p1\">](../../mfc/reference/cwnd-class.md)</ept>","pos":[37249,37297],"source":" [CWnd Class](../../mfc/reference/cwnd-class.md)"}],"content":"---\ntitle: \"CPaneFrameWnd Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CPaneFrameWnd.Serialize\"\n  - \"CPaneFrameWnd.PreTranslateMessage\"\n  - \"CPaneFrameWnd\"\n  - \"CPaneFrameWnd::Serialize\"\n  - \"PreTranslateMessage\"\n  - \"CPaneFrameWnd::PreTranslateMessage\"\n  - \"Serialize\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CPaneFrameWnd class\"\n  - \"Serialize method\"\n  - \"PreTranslateMessage method\"\nms.assetid: ea3423a3-2763-482e-b763-817036ded10d\ncaps.latest.revision: 28\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# CPaneFrameWnd Class\n[!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n Implements a mini-frame window that contains one pane. The pane fills the client area of the window.  \n  \n## Syntax  \n  \n```  \nclass CPaneFrameWnd : public CWnd  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneFrameWnd::AddPane](#cpaneframewnd__addpane)|Adds a pane.|  \n|[CPaneFrameWnd::AddRemovePaneFromGlobalList](#cpaneframewnd__addremovepanefromgloballist)|Adds or removes a pane from the global list.|  \n|[CPaneFrameWnd::AdjustLayout](#cpaneframewnd__adjustlayout)|Adjusts the layout of the mini-frame window.|  \n|[CPaneFrameWnd::AdjustPaneFrames](#cpaneframewnd__adjustpaneframes)||  \n|[CPaneFrameWnd::CalcBorderSize](#cpaneframewnd__calcbordersize)|Calculates the size of the borders for a mini-frame window.|  \n|[CPaneFrameWnd::CalcExpectedDockedRect](#cpaneframewnd__calcexpecteddockedrect)|Calculate the expected rectangle of a docked window.|  \n|[CPaneFrameWnd::CanBeAttached](#cpaneframewnd__canbeattached)|Determines whether the current pane can be docked to another pane or frame window.|  \n|[CPaneFrameWnd::CanBeDockedToPane](#cpaneframewnd__canbedockedtopane)|Determines whether the mini-frame window can be docked to a pane.|  \n|[CPaneFrameWnd::CheckGripperVisibility](#cpaneframewnd__checkgrippervisibility)||  \n|[CPaneFrameWnd::ConvertToTabbedDocument](#cpaneframewnd__converttotabbeddocument)|Converts the pane to a tabbed document.|  \n|[CPaneFrameWnd::Create](#cpaneframewnd__create)|Creates a mini-frame window and attaches it to the `CPaneFrameWnd` object.|  \n|[CPaneFrameWnd::CreateEx](#cpaneframewnd__createex)|Creates a mini-frame window and attaches it to the `CPaneFrameWnd` object.|  \n|[CPaneFrameWnd::DockPane](#cpaneframewnd__dockpane)|Docks the pane.|  \n|[CPaneFrameWnd::FindFloatingPaneByID](#cpaneframewnd__findfloatingpanebyid)|Finds a pane with the specified control ID in the global list of floating panes.|  \n|[CPaneFrameWnd::FrameFromPoint](#cpaneframewnd__framefrompoint)|Finds the mini-frame window containing a user-supplied point.|  \n|[CPaneFrameWnd::GetCaptionHeight](#cpaneframewnd__getcaptionheight)|Returns the height of the mini-frame window caption.|  \n|[CPaneFrameWnd::GetCaptionRect](#cpaneframewnd__getcaptionrect)|Calculates the bounding rectangle of a mini-frame window caption.|  \n|[CPaneFrameWnd::GetCaptionText](#cpaneframewnd__getcaptiontext)|Returns the caption text.|  \n|[CPaneFrameWnd::GetDockingManager](#cpaneframewnd__getdockingmanager)||  \n|[CPaneFrameWnd::GetDockingMode](#cpaneframewnd__getdockingmode)|Returns the docking mode.|  \n|[CPaneFrameWnd::GetFirstVisiblePane](#cpaneframewnd__getfirstvisiblepane)|Returns the first visible pane that is contained in a mini-frame window.|  \n|[CPaneFrameWnd::GetHotPoint](#cpaneframewnd__gethotpoint)||  \n|[CPaneFrameWnd::GetPane](#cpaneframewnd__getpane)|Returns a pane that is contained in the mini-frame window.|  \n|[CPaneFrameWnd::GetPaneCount](#cpaneframewnd__getpanecount)|Returns the number of panes that are contained in a mini-frame window.|  \n|[CPaneFrameWnd::GetParent](#cpaneframewnd__getparent)||  \n|[CPaneFrameWnd::GetPinState](#cpaneframewnd__getpinstate)||  \n|[CPaneFrameWnd::GetRecentFloatingRect](#cpaneframewnd__getrecentfloatingrect)||  \n|[CPaneFrameWnd::GetVisiblePaneCount](#cpaneframewnd__getvisiblepanecount)|Returns the number of visible panes that are contained in a mini-frame window.|  \n|[CPaneFrameWnd::HitTest](#cpaneframewnd__hittest)|Determines what part of a mini-frame window is at a given point.|  \n|[CPaneFrameWnd::IsCaptured](#cpaneframewnd__iscaptured)||  \n|[CPaneFrameWnd::IsDelayShow](#cpaneframewnd__isdelayshow)||  \n|[CPaneFrameWnd::IsRollDown](#cpaneframewnd__isrolldown)|Determines whether a mini-frame window should be rolled down.|  \n|[CPaneFrameWnd::IsRollUp](#cpaneframewnd__isrollup)|Determines whether a mini-frame window should be rolled up.|  \n|[CPaneFrameWnd::KillDockingTimer](#cpaneframewnd__killdockingtimer)|Stops the docking timer.|  \n|[CPaneFrameWnd::LoadState](#cpaneframewnd__loadstate)|Loads the pane's state from the registry.|  \n|[CPaneFrameWnd::OnBeforeDock](#cpaneframewnd__onbeforedock)|Determines if docking is possible.|  \n|[CPaneFrameWnd::OnDockToRecentPos](#cpaneframewnd__ondocktorecentpos)|Docks the mini-frame window at its most recent position.|  \n|[CPaneFrameWnd::OnKillRollUpTimer](#cpaneframewnd__onkillrolluptimer)|Stops the rollup timer.|  \n|[CPaneFrameWnd::OnMovePane](#cpaneframewnd__onmovepane)|Moves the mini-frame window by a specified offset.|  \n|[CPaneFrameWnd::OnPaneRecalcLayout](#cpaneframewnd__onpanerecalclayout)|Adjusts the layout of a contained pane.|  \n|[CPaneFrameWnd::OnSetRollUpTimer](#cpaneframewnd__onsetrolluptimer)|Sets the rollup timer.|  \n|[CPaneFrameWnd::OnShowPane](#cpaneframewnd__onshowpane)|Called by the framework when a pane in the mini-frame window is hidden or displayed.|  \n|[CPaneFrameWnd::PaneFromPoint](#cpaneframewnd__panefrompoint)|Returns a pane if it contains a user-supplied point inside a mini-frame window.|  \n|[CPaneFrameWnd::Pin](#cpaneframewnd__pin)||  \n|`CPaneFrameWnd::PreTranslateMessage`|Used by class [CWinApp](../../mfc/reference/cwinapp-class.md) to translate window messages before they are dispatched to the [TranslateMessage](http://msdn.microsoft.com/library/windows/desktop/ms644955) and [DispatchMessage](http://msdn.microsoft.com/library/windows/desktop/ms644934) Windows functions.|  \n|[CPaneFrameWnd::RedrawAll](#cpaneframewnd__redrawall)|Redraws all mini-frame windows.|  \n|[CPaneFrameWnd::RemoveNonValidPanes](#cpaneframewnd__removenonvalidpanes)|Called by the framework to remove non-valid panes.|  \n|[CPaneFrameWnd::RemovePane](#cpaneframewnd__removepane)|Removes a pane from the mini-frame window.|  \n|[CPaneFrameWnd::ReplacePane](#cpaneframewnd__replacepane)|Replaces one pane with another.|  \n|[CPaneFrameWnd::SaveState](#cpaneframewnd__savestate)|Saves the pane's state to the registry.|  \n|`CPaneFrameWnd::Serialize`|Reads or writes this object from or to an archive.|  \n|[CPaneFrameWnd::SetCaptionButtons](#cpaneframewnd__setcaptionbuttons)|Sets caption buttons.|  \n|[CPaneFrameWnd::SetDelayShow](#cpaneframewnd__setdelayshow)||  \n|[CPaneFrameWnd::SetDockingManager](#cpaneframewnd__setdockingmanager)||  \n|[CPaneFrameWnd::SetDockingTimer](#cpaneframewnd__setdockingtimer)|Sets the docking timer.|  \n|[CPaneFrameWnd::SetDockState](#cpaneframewnd__setdockstate)|Sets the docking state.|  \n|[CPaneFrameWnd::SetHotPoint](#cpaneframewnd__sethotpoint)||  \n|[CPaneFrameWnd::SetPreDockState](#cpaneframewnd__setpredockstate)|Called by the framework to set the predocking state.|  \n|[CPaneFrameWnd::SizeToContent](#cpaneframewnd__sizetocontent)|Adjusts the size of a mini-frame window so that it is equivalent in size to a contained pane.|  \n|[CPaneFrameWnd::StartTearOff](#cpaneframewnd__starttearoff)|Tears off a menu.|  \n|[CPaneFrameWnd::StoreRecentDockSiteInfo](#cpaneframewnd__storerecentdocksiteinfo)||  \n|[CPaneFrameWnd::StoreRecentTabRelatedInfo](#cpaneframewnd__storerecenttabrelatedinfo)||  \n  \n### Protected Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneFrameWnd::OnCheckRollState](#cpaneframewnd__oncheckrollstate)|Determines whether a mini-frame window should be rolled up or down.|  \n|[CPaneFrameWnd::OnDrawBorder](#cpaneframewnd__ondrawborder)|Draws the borders of a mini-frame window.|  \n  \n### Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CPaneFrameWnd::m_bUseSaveBits](#cpaneframewnd__m_busesavebits)|Specifies whether to register the window class with the `CS_SAVEBITS` class style.|  \n  \n## Remarks  \n The framework automatically creates a `CPaneFrameWnd` object when a pane is switched from a docked state to a floating state.  \n  \n A mini-frame window can be dragged with its contents visible (immediate docking) or using a drag rectangle (standard docking). The docking mode of the mini-frame's container pane determines the mini-frame's dragging behavior. For more information, see [CBasePane::GetDockingMode](../../mfc/reference/cbasepane-class.md#cbasepane__getdockingmode).  \n  \n A mini-frame window displays buttons on the caption in accordance with the contained pane style. If the pane can be closed ( [CBasePane::CanBeClosed](../../mfc/reference/cbasepane-class.md#cbasepane__canbeclosed)), it displays a Close button. If the pane has the `AFX_CBRS_AUTO_ROLLUP` style, it displays a pin.  \n  \n If you derive a class from `CPaneFrameWnd`, you must tell the framework how to create it. Either create the class by overriding [CPane::CreateDefaultMiniframe](../../mfc/reference/cpane-class.md#cpane__createdefaultminiframe), or set the `CPane::m_pMiniFrameRTC` member so that it points to the runtime class information for your class.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md)  \n  \n## Requirements  \n **Header:** afxPaneFrameWnd.h  \n  \n##  <a name=\"cpaneframewnd__addpane\"></a>  CPaneFrameWnd::AddPane  \n Adds a pane.  \n  \n```  \nvirtual void AddPane(CBasePane* pWnd);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n The pane to add.  \n  \n##  <a name=\"cpaneframewnd__addremovepanefromgloballist\"></a>  CPaneFrameWnd::AddRemovePaneFromGlobalList  \n Adds or removes a pane from the global list.  \n  \n```  \nstatic BOOL __stdcall AddRemovePaneFromGlobalList(\n    CBasePane* pWnd,  \n    BOOL bAdd);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n The pane to add or remove.  \n  \n [in] `bAdd`  \n If non-zero, add the pane. If 0, remove the pane.  \n  \n### Return Value  \n Nonzero if the method was successful; otherwise 0.  \n  \n##  <a name=\"cpaneframewnd__adjustlayout\"></a>  CPaneFrameWnd::AdjustLayout  \n Adjusts the layout of the mini-frame window.  \n  \n```  \nvirtual void AdjustLayout();\n```  \n  \n##  <a name=\"cpaneframewnd__adjustpaneframes\"></a>  CPaneFrameWnd::AdjustPaneFrames  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void AdjustPaneFrames();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__calcbordersize\"></a>  CPaneFrameWnd::CalcBorderSize  \n Calculates the size of the borders for a miniframe window.  \n  \n```  \nvirtual void CalcBorderSize(CRect& rectBorderSize) const;\n\n \n```  \n  \n### Parameters  \n [out] `rectBorderSize`  \n Contains the size, in pixels, of the border of the miniframe window.  \n  \n### Remarks  \n This method is called by the framework to calculate the size of the border of a miniframe window. The returned size depends on whether a miniframe window contains a toolbar or a [CDockablePane](../../mfc/reference/cdockablepane-class.md).  \n  \n##  <a name=\"cpaneframewnd__calcexpecteddockedrect\"></a>  CPaneFrameWnd::CalcExpectedDockedRect  \n Calculate the expected rectangle of a docked window.  \n  \n```  \nvirtual void CalcExpectedDockedRect(\n    CWnd* pWndToDock,  \n    CPoint ptMouse,  \n    CRect& rectResult,  \n    BOOL& bDrawTab,  \n    CDockablePane** ppTargetBar);\n```  \n  \n### Parameters  \n [in] `pWndToDock`  \n A pointer to the window to dock.  \n  \n [in] `ptMouse`  \n The mouse location.  \n  \n [out] `rectResult`  \n The calculated rectangle.  \n  \n [out] `bDrawTab`  \n If `TRUE`, draw a tab. If `FALSE`, do not draw a tab.  \n  \n [out] `ppTargetBar`  \n A pointer to the target pane.  \n  \n### Remarks  \n This method calculates the rectangle that a window would occupy if a user dragged the window to the point specified by `ptMouse` and docked it there.  \n  \n##  <a name=\"cpaneframewnd__canbeattached\"></a>  CPaneFrameWnd::CanBeAttached  \n Determines whether the current pane can be docked to another pane or frame window.  \n  \n```  \nvirtual BOOL CanBeAttached() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the pane can be docked to another pane or frame window; otherwise `FALSE`.  \n  \n##  <a name=\"cpaneframewnd__canbedockedtopane\"></a>  CPaneFrameWnd::CanBeDockedToPane  \n Determines whether the mini-frame window can be docked to a pane.  \n  \n```  \nvirtual BOOL CanBeDockedToPane(const CDockablePane* pDockingBar) const;\n\n \n```  \n  \n### Parameters  \n [in] `pDockingBar`  \n A pane.  \n  \n### Return Value  \n Nonzero if the mini-frame can be docked to `pDockingBar`; otherwise 0.  \n  \n##  <a name=\"cpaneframewnd__checkgrippervisibility\"></a>  CPaneFrameWnd::CheckGripperVisibility  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void CheckGripperVisibility();\n```  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__converttotabbeddocument\"></a>  CPaneFrameWnd::ConvertToTabbedDocument  \n Converts the pane to a tabbed document.  \n  \n```  \nvirtual void ConvertToTabbedDocument();\n```  \n  \n##  <a name=\"cpaneframewnd__create\"></a>  CPaneFrameWnd::Create  \n Creates a miniframe window and attaches it to the [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object.  \n  \n```  \nvirtual BOOL Create(\n    LPCTSTR lpszWindowName,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    CCreateContext* pContext = NULL);\n```  \n  \n### Parameters  \n [in] `lpszWindowName`  \n Specifies the text to display on the miniframe window.  \n  \n [in] `dwStyle`  \n Specifies the window style. For more information, see [Window Styles](../../mfc/reference/window-styles.md).  \n  \n [in] `rect`  \n Specifies the initial size and position of the miniframe window.  \n  \n [in] [out] `pParentWnd`  \n Specifies the parent frame of the miniframe window. This value must not be `NULL`.  \n  \n [in] [out] `pContext`  \n Specifies user-defined context.  \n  \n### Return Value  \n `TRUE` if the window was created successfully; otherwise, `FALSE`.  \n  \n### Remarks  \n A miniframe window is created in two steps. First, the framework creates a [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object. Second, it calls `Create` to create the Windows miniframe window and attach it to the `CPaneFrameWnd` object.  \n  \n##  <a name=\"cpaneframewnd__createex\"></a>  CPaneFrameWnd::CreateEx  \n Creates a miniframe window and attaches it to the [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object.  \n  \n```  \nvirtual BOOL CreateEx(\n    DWORD dwStyleEx,  \n    LPCTSTR lpszWindowName,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    CCreateContext* pContext=NULL);\n```  \n  \n### Parameters  \n [in] `dwStyleEx`  \n Specifies the extended window style. For more information, see [Extended Window Styles](../../mfc/reference/extended-window-styles.md)  \n  \n [in] `lpszWindowName`  \n Specifies the text to display on the miniframe window.  \n  \n [in] `dwStyle`  \n Specifies the window style. For more information, see [Window Styles](../../mfc/reference/window-styles.md).  \n  \n [in] `rect`  \n Specifies the initial size and position of the miniframe window.  \n  \n [in] [out] `pParentWnd`  \n Specifies the parent frame of the miniframe window. This value must not be `NULL`.  \n  \n [in] [out] `pContext`  \n Specifies user-defined context.  \n  \n### Return Value  \n `TRUE` if the window was created successfully; otherwise, `FALSE`.  \n  \n### Remarks  \n A miniframe window is created in two steps. First, the framework creates a [CPaneFrameWnd](../../mfc/reference/cpaneframewnd-class.md) object. Second, it calls `Create` to create the Windows miniframe window and attach it to the `CPaneFrameWnd` object.  \n  \n##  <a name=\"cpaneframewnd__dockpane\"></a>  CPaneFrameWnd::DockPane  \n Docks the pane.  \n  \n```  \nvirtual CDockablePane* DockPane(BOOL& bWasDocked);\n```  \n  \n### Parameters  \n [out] `bWasDocked`  \n `TRUE` if the pane was already docked; otherwise `FALSE`.  \n  \n### Return Value  \n If the operation was successful, the `CDockablePane` that the pane was docked to; otherwise `NULL`.  \n  \n##  <a name=\"cpaneframewnd__findfloatingpanebyid\"></a>  CPaneFrameWnd::FindFloatingPaneByID  \n Finds a pane with the specified control ID in the global list of floating panes.  \n  \n```  \nstatic CBasePane* FindFloatingPaneByID(UINT nID);\n```  \n  \n### Parameters  \n [in] `nID`  \n Represents the control ID of the pane to find.  \n  \n### Return Value  \n The pane with the specified control ID; otherwise, `NULL`, if no pane has the specified control ID.  \n  \n##  <a name=\"cpaneframewnd__framefrompoint\"></a>  CPaneFrameWnd::FrameFromPoint  \n Finds the mini-frame window that contains the specified point.  \n  \n```  \nstatic CPaneFrameWnd* __stdcall FrameFromPoint(\n    CPoint pt,  \n    int nSensitivity,  \n    CPaneFrameWnd* pFrameToExclude = NULL,  \n    BOOL bFloatMultiOnly = FALSE);\n```  \n  \n### Parameters  \n [in] `pt`  \n The point, in screen coordinates.  \n  \n [in] `nSensitivity`  \n Increase the search area of the mini-frame window by this size. A mini-frame window satisfies the search criteria if the given point falls in the increased area.  \n  \n [in] `pFrameToExclude`  \n Specifies a mini-frame window to exclude from the search.  \n  \n [in] `bFloatMultiOnly`  \n If `TRUE`, only search mini-frame windows that have the `CBRS_FLOAT_MULTI` style. If `FALSE`, search all mini-frame windows.  \n  \n### Return Value  \n A pointer to the mini-frame window that contains `pt`; otherwise `NULL`.  \n  \n##  <a name=\"cpaneframewnd__getcaptionheight\"></a>  CPaneFrameWnd::GetCaptionHeight  \n Returns the height of the mini-frame window caption.  \n  \n```  \nvirtual int GetCaptionHeight() const;\n\n \n```  \n  \n### Return Value  \n The height, in pixels, of the mini-frame window.  \n  \n### Remarks  \n Call this method to determine the height of a mini-frame window. By default, the height is set to `SM_CYSMCAPTION`. For more information, see [GetSystemMetrics Function](http://msdn.microsoft.com/library/windows/desktop/ms724385).  \n  \n##  <a name=\"cpaneframewnd__getcaptionrect\"></a>  CPaneFrameWnd::GetCaptionRect  \n Calculates the bounding rectangle of a mini-frame window caption.  \n  \n```  \nvirtual void GetCaptionRect(CRect& rectCaption) const;\n\n \n```  \n  \n### Parameters  \n [out] `rectCaption`  \n Contains the size and position of the mini-frame window caption, in screen coordinates.  \n  \n### Remarks  \n This method is called by the framework to calculate the bounding rectangle of a mini-frame window caption.  \n  \n##  <a name=\"cpaneframewnd__getcaptiontext\"></a>  CPaneFrameWnd::GetCaptionText  \n Returns the caption text.  \n  \n```  \nvirtual CString GetCaptionText();\n```  \n  \n### Return Value  \n The caption text of the mini-frame window.  \n  \n### Remarks  \n This method is called by the framework when it displays the caption text.  \n  \n##  <a name=\"cpaneframewnd__getdockingmanager\"></a>  CPaneFrameWnd::GetDockingManager  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCDockingManager* GetDockingManager() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getdockingmode\"></a>  CPaneFrameWnd::GetDockingMode  \n Returns the docking mode.  \n  \n```  \nvirtual AFX_DOCK_TYPE GetDockingMode() const;\n\n \n```  \n  \n### Return Value  \n The docking mode. One of the following values:  \n  \n- `DT_STANDARD`  \n  \n- `DT_IMMEDIATE`  \n  \n- `DT_SMART`  \n  \n##  <a name=\"cpaneframewnd__getfirstvisiblepane\"></a>  CPaneFrameWnd::GetFirstVisiblePane  \n Returns the first visible pane that is contained in a mini-frame window.  \n  \n```  \nvirtual CWnd* GetFirstVisiblePane() const;\n\n \n```  \n  \n### Return Value  \n The first pane in the mini-frame window, or `NULL` if the mini-frame window contains no panes.  \n  \n##  <a name=\"cpaneframewnd__gethotpoint\"></a>  CPaneFrameWnd::GetHotPoint  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCPoint GetHotPoint() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getpane\"></a>  CPaneFrameWnd::GetPane  \n Returns a pane that is contained in the mini-frame window.  \n  \n```  \nvirtual CWnd* GetPane() const;\n\n \n```  \n  \n### Return Value  \n The pane that is contained in the mini-frame, or `NULL` if the mini-frame window contains no panes.  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getpanecount\"></a>  CPaneFrameWnd::GetPaneCount  \n Returns the number of panes that are contained in a mini-frame window.  \n  \n```  \nvirtual int GetPaneCount() const;\n\n \n```  \n  \n### Return Value  \n The number of panes in the mini-frame window. This value can be zero.  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getparent\"></a>  CPaneFrameWnd::GetParent  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCWnd* GetParent();\n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getpinstate\"></a>  CPaneFrameWnd::GetPinState  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL GetPinState() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getrecentfloatingrect\"></a>  CPaneFrameWnd::GetRecentFloatingRect  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nCRect GetRecentFloatingRect() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__getvisiblepanecount\"></a>  CPaneFrameWnd::GetVisiblePaneCount  \n Returns the number of visible panes that are contained in a mini-frame window.  \n  \n```  \nvirtual int GetVisiblePaneCount() const;\n\n \n```  \n  \n### Return Value  \n The number of visible panes.  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__hittest\"></a>  CPaneFrameWnd::HitTest  \n Determines what part of a mini-frame window is at a given point.  \n  \n```  \nvirtual LRESULT HitTest(\n    CPoint point,  \n    BOOL bDetectCaption);\n```  \n  \n### Parameters  \n [in] `point`  \n The point to test.  \n  \n [in] `bDetectCaption`  \n If `TRUE`, check the point against the caption. If `FALSE`, ignore the caption.  \n  \n### Return Value  \n One of the following values:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|`HTNOWHERE`|The point is outside the mini-frame window.|  \n|`HTCLIENT`|The point is in the client area.|  \n|`HTCAPTION`|The point is on the caption.|  \n|`HTTOP`|The point is at the top.|  \n|`HTTOPLEFT`|The point is at the top left.|  \n|`HTTOPRIGHT`|The point is at the top right.|  \n|`HTLEFT`|The point is at the left.|  \n|`HTRIGHT`|The point is at the right.|  \n|`HTBOTTOM`|The point is at the bottom.|  \n|`HTBOTTOMLEFT`|The point is at the bottom left.|  \n|`HTBOTTOMRIGHT`|The point is at the bottom right.|  \n  \n##  <a name=\"cpaneframewnd__iscaptured\"></a>  CPaneFrameWnd::IsCaptured  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsCaptured() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__isdelayshow\"></a>  CPaneFrameWnd::IsDelayShow  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nBOOL IsDelayShow() const;\n\n \n```  \n  \n### Return Value  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__isrolldown\"></a>  CPaneFrameWnd::IsRollDown  \n Determines whether a mini-frame window should be rolled down.  \n  \n```  \nvirtual BOOL IsRollDown() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the mini-frame window must be rolled down; otherwise, `FALSE`.  \n  \n### Remarks  \n This method is called by the framework to determine whether a mini-frame window should be rolled down. The rollup/rolldown feature is enabled for a mini-frame window if it contains at least one pane that has the `AFX_CBRS_AUTO_ROLLUP` flag. This flag is set when a pane is created. For more information, see [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex).  \n  \n By default, the framework checks whether the mouse pointer is inside the mini-frame window bounding rectangle to determine whether the window has to be rolled down. You can override this behavior in a derived class.  \n  \n##  <a name=\"cpaneframewnd__isrollup\"></a>  CPaneFrameWnd::IsRollUp  \n Determines whether a mini-frame window should be rolled up.  \n  \n```  \nvirtual BOOL IsRollUp() const;\n\n \n```  \n  \n### Return Value  \n `TRUE` if the mini-frame window must be rolled up; otherwise, `FALSE`.  \n  \n### Remarks  \n This method is called by the framework to determine whether a mini-frame window should be rolled up. The rollup/rolldown feature is enabled for a mini-frame window if it contains at least one pane that has the `AFX_CBRS_AUTO_ROLLUP` flag. This flag is set when a pane is created. For more information, see [CBasePane::CreateEx](../../mfc/reference/cbasepane-class.md#cbasepane__createex).  \n  \n By default, the framework checks whether the mouse pointer is inside the mini-frame window bounding rectangle to determine whether the window has to be rolled up. You can override this behavior in a derived class.  \n  \n##  <a name=\"cpaneframewnd__killdockingtimer\"></a>  CPaneFrameWnd::KillDockingTimer  \n Stops the docking timer.  \n  \n```  \nvoid KillDockingTimer();\n```  \n  \n##  <a name=\"cpaneframewnd__loadstate\"></a>  CPaneFrameWnd::LoadState  \n Loads the pane's state from the registry.  \n  \n```  \nvirtual BOOL LoadState(\n    LPCTSTR lpszProfileName = NULL,  \n    UINT uiID = (UINT) -1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n The profile name.  \n  \n [in] `uiID`  \n The pane ID.  \n  \n### Return Value  \n `TRUE` if the pane state was loaded successfully; otherwise `FALSE`.  \n  \n##  <a name=\"cpaneframewnd__m_busesavebits\"></a>  CPaneFrameWnd::m_bUseSaveBits  \n Specifies whether to register the window class that has the `CS_SAVEBITS` class style.  \n  \n```  \nAFX_IMPORT_DATA static BOOL m_bUseSaveBits;  \n```  \n  \n### Remarks  \n Set this static member to `TRUE` to register the mini-frame window class that has the `CS_SAVEBITS` style. This may help reduce flickering when a user drags the mini-frame window.  \n  \n##  <a name=\"cpaneframewnd__onbeforedock\"></a>  CPaneFrameWnd::OnBeforeDock  \n Determines if docking is possible.  \n  \n```  \nvirtual BOOL OnBeforeDock();\n```  \n  \n### Return Value  \n `TRUE` if docking is possible; otherwise, `FALSE`.  \n  \n##  <a name=\"cpaneframewnd__oncheckrollstate\"></a>  CPaneFrameWnd::OnCheckRollState  \n Determines whether a mini-frame window should be rolled up or down.  \n  \n```  \nvirtual void OnCheckRollState();\n```  \n  \n### Remarks  \n This method is called by the framework to determine whether a mini-frame window should be rolled up or down.  \n  \n By default, the framework calls [CPaneFrameWnd::IsRollUp](#cpaneframewnd__isrollup) and [CPaneFrameWnd::IsRollDown](#cpaneframewnd__isrolldown) and just stretches or restores the mini-frame window. You can override this method in a derived class to use a different visual effect.  \n  \n##  <a name=\"cpaneframewnd__ondocktorecentpos\"></a>  CPaneFrameWnd::OnDockToRecentPos  \n Docks the mini-frame window at its most recent position.  \n  \n```  \nvirtual void OnDockToRecentPos();\n```  \n  \n##  <a name=\"cpaneframewnd__ondrawborder\"></a>  CPaneFrameWnd::OnDrawBorder  \n Draws the borders of a mini-frame window.  \n  \n```  \nvirtual void OnDrawBorder(CDC* pDC);\n```  \n  \n### Parameters  \n [in] `pDC`  \n The device context used to draw the border.  \n  \n### Remarks  \n This method is called by the framework to draw the borders of the mini-frame window.  \n  \n##  <a name=\"cpaneframewnd__onkillrolluptimer\"></a>  CPaneFrameWnd::OnKillRollUpTimer  \n Stops the rollup timer.  \n  \n```  \nvirtual void OnKillRollUpTimer();\n```  \n  \n##  <a name=\"cpaneframewnd__onmovepane\"></a>  CPaneFrameWnd::OnMovePane  \n Moves the mini-frame window by a specified offset.  \n  \n```  \nvirtual void OnMovePane(\n    CPane* pBar,  \n    CPoint ptOffset);\n```  \n  \n### Parameters  \n [in] `pBar`  \n A pointer to a pane (ignored).  \n  \n [in] `ptOffset`  \n The offset by which to move the pane.  \n  \n##  <a name=\"cpaneframewnd__onpanerecalclayout\"></a>  CPaneFrameWnd::OnPaneRecalcLayout  \n Adjusts the layout of a pane inside a mini-frame window.  \n  \n```  \nvirtual void OnPaneRecalcLayout();\n```  \n  \n### Remarks  \n The framework calls this method when it must adjust the layout of a pane inside the mini-frame window.  \n  \n By default, the pane is positioned to cover the complete client area of the mini-frame window.  \n  \n##  <a name=\"cpaneframewnd__onsetrolluptimer\"></a>  CPaneFrameWnd::OnSetRollUpTimer  \n Sets the rollup timer.  \n  \n```  \nvirtual void OnSetRollUpTimer();\n```  \n  \n##  <a name=\"cpaneframewnd__onshowpane\"></a>  CPaneFrameWnd::OnShowPane  \n Called by the framework when a pane in the mini-frame window is hidden or displayed.  \n  \n```  \nvirtual void OnShowPane(\n    CDockablePane* pBar,  \n    BOOL bShow);\n```  \n  \n### Parameters  \n [in] `pBar`  \n The pane that is being shown or hidden.  \n  \n [in] `bShow`  \n `TRUE` if the pane is being shown; `FALSE` if the pane is being hidden.  \n  \n### Remarks  \n Called by the framework when a pane in the mini-frame window is shown or hidden. The default implementation does nothing.  \n  \n##  <a name=\"cpaneframewnd__pin\"></a>  CPaneFrameWnd::Pin  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid Pin(BOOL bPin = TRUE);\n```  \n  \n### Parameters  \n [in] `bPin`  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__panefrompoint\"></a>  CPaneFrameWnd::PaneFromPoint  \n Returns a pane if it contains a user-supplied point inside a mini-frame window.  \n  \n```  \nvirtual CBasePane* PaneFromPoint(\n    CPoint point,  \n    int nSensitivity,  \n    BOOL bCheckVisibility);\n```  \n  \n### Parameters  \n [in] `point`  \n The point that the user clicked, in screen coordinates.  \n  \n [in] `nSensitivity`  \n This parameter is not used.  \n  \n [in] `bCheckVisibility`  \n `TRUE` to specify that only visible panes should be returned; otherwise, `FALSE`.  \n  \n### Return Value  \n The pane that the user clicked, or `NULL` if no pane exists at that location.  \n  \n### Remarks  \n Call this method to obtain a pane that contains the given point.  \n  \n##  <a name=\"cpaneframewnd__redrawall\"></a>  CPaneFrameWnd::RedrawAll  \n Redraws all mini-frame windows.  \n  \n```  \nstatic void RedrawAll();\n```  \n  \n### Remarks  \n This method updates all mini-frame windows by calling [CWnd::RedrawWindow](../../mfc/reference/cwnd-class.md#cwnd__redrawwindow) for each window.  \n  \n##  <a name=\"cpaneframewnd__removenonvalidpanes\"></a>  CPaneFrameWnd::RemoveNonValidPanes  \n Called by the framework to remove non-valid panes.  \n  \n```  \nvirtual void RemoveNonValidPanes();\n```  \n  \n##  <a name=\"cpaneframewnd__removepane\"></a>  CPaneFrameWnd::RemovePane  \n Removes a pane from the mini-frame window.  \n  \n```  \nvirtual void RemovePane(\n    CBasePane* pWnd,  \n    BOOL bDestroy = FALSE,  \n    BOOL bNoDelayedDestroy = FALSE);\n```  \n  \n### Parameters  \n [in] `pWnd`  \n A pointer to the pane to remove.  \n  \n [in] `bDestroy`  \n Specifies what happens to the mini-frame window. If `bDestroy` is `TRUE`, this method destroys the mini-frame window immediately. If it is `FALSE`, this method destroys the mini-frame window after a certain delay.  \n  \n [in] `bNoDelayedDestroy`  \n If `TRUE`, delayed destruction is disabled. If `FALSE`, delayed destruction is enabled.  \n  \n### Remarks  \n The framework can destroy mini-frame windows immediately or after a certain delay. If you want to delay destruction of mini-frame windows, pass `FALSE` in the `bNoDelayedDestroy` parameter. Delayed destruction occurs when the framework processes the `AFX_WM_CHECKEMPTYMINIFRAME` message.  \n  \n##  <a name=\"cpaneframewnd__replacepane\"></a>  CPaneFrameWnd::ReplacePane  \n Replaces one pane with another.  \n  \n```  \nvirtual void ReplacePane(\n    CBasePane* pBarOrg,  \n    CBasePane* pBarReplaceWith);\n```  \n  \n### Parameters  \n [in] `pBarOrg`  \n A pointer to the original pane.  \n  \n [in] `pBarReplaceWith`  \n A pointer to the pane that replaces the original pane.  \n  \n##  <a name=\"cpaneframewnd__savestate\"></a>  CPaneFrameWnd::SaveState  \n Saves the pane's state to the registry.  \n  \n```  \nvirtual BOOL SaveState(\n    LPCTSTR lpszProfileName = NULL,  \n    UINT uiID = (UINT) -1);\n```  \n  \n### Parameters  \n [in] `lpszProfileName`  \n The profile name.  \n  \n [in] `uiID`  \n The pane ID.  \n  \n### Return Value  \n `TRUE` if the pane state was saved successfully; otherwise `FALSE`.  \n  \n##  <a name=\"cpaneframewnd__setcaptionbuttons\"></a>  CPaneFrameWnd::SetCaptionButtons  \n Sets caption buttons.  \n  \n```  \nvirtual void SetCaptionButtons(DWORD dwButtons);\n```  \n  \n### Parameters  \n [in] `dwButtons`  \n Bitwise-OR combination of the following values:  \n  \n- `AFX_CAPTION_BTN_CLOSE`  \n  \n- `AFX_CAPTION_BTN_PIN`  \n  \n- `AFX_CAPTION_BTN_MENU`  \n  \n- `AFX_CAPTION_BTN_CUSTOMIZE`  \n  \n##  <a name=\"cpaneframewnd__setdelayshow\"></a>  CPaneFrameWnd::SetDelayShow  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetDelayShow(BOOL bDelayShow);\n```  \n  \n### Parameters  \n [in] `bDelayShow`  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__setdockingmanager\"></a>  CPaneFrameWnd::SetDockingManager  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetDockingManager(CDockingManager* pManager);\n```  \n  \n### Parameters  \n [in] `pManager`  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__setdockingtimer\"></a>  CPaneFrameWnd::SetDockingTimer  \n Sets the docking timer.  \n  \n```  \nvoid SetDockingTimer(UINT nTimeOut);\n```  \n  \n### Parameters  \n [in] `nTimeOut`  \n Timeout value in milliseconds.  \n  \n##  <a name=\"cpaneframewnd__setdockstate\"></a>  CPaneFrameWnd::SetDockState  \n Sets the docking state.  \n  \n```  \nvirtual void SetDockState(CDockingManager* pDockManager);\n```  \n  \n### Parameters  \n [in] `pDockManager`  \n A pointer to a docking manager.  \n  \n##  <a name=\"cpaneframewnd__sethotpoint\"></a>  CPaneFrameWnd::SetHotPoint  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvoid SetHotPoint(CPoint& ptNew);\n```  \n  \n### Parameters  \n [in] `ptNew`  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__setpredockstate\"></a>  CPaneFrameWnd::SetPreDockState  \n Called by the framework to set the predocking state.  \n  \n```  \nvirtual BOOL SetPreDockState(\n    AFX_PREDOCK_STATE preDockState,  \n    CBasePane* pBarToDock = NULL,  \n    AFX_DOCK_METHOD dockMethod = DM_MOUSE);\n```  \n  \n### Parameters  \n [in] `preDockState`  \n Possible values:  \n  \n- `PDS_NOTHING`,  \n  \n- `PDS_DOCK_REGULAR`,  \n  \n- `PDS_DOCK_TO_TAB`  \n  \n [in] `pBarToDock`  \n A pointer to the pane to dock.  \n  \n [in] `dockMethod`  \n The docking method. (This parameter is ignored.)  \n  \n### Return Value  \n `TRUE` if the mini-frame window is undocked; `FALSE` if it is docked.  \n  \n##  <a name=\"cpaneframewnd__sizetocontent\"></a>  CPaneFrameWnd::SizeToContent  \n Adjusts the size of a mini-frame window so that it is equivalent to a contained pane.  \n  \n```  \nvirtual void SizeToContent();\n```  \n  \n### Remarks  \n Call this method to adjust the size of a mini-frame window to the size of a contained pane.  \n  \n##  <a name=\"cpaneframewnd__starttearoff\"></a>  CPaneFrameWnd::StartTearOff  \n Tears off a menu.  \n  \n```  \nBOOL StartTearOff(CMFCPopu* pMenu);\n```  \n  \n### Parameters  \n [in] `pMenu`  \n A pointer to a menu.  \n  \n### Return Value  \n `TRUE` if the method was successful; otherwise, `FALSE`.  \n  \n##  <a name=\"cpaneframewnd__storerecentdocksiteinfo\"></a>  CPaneFrameWnd::StoreRecentDockSiteInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void StoreRecentDockSiteInfo(CPane* pBar);\n```  \n  \n### Parameters  \n [in] `pBar`  \n  \n### Remarks  \n  \n##  <a name=\"cpaneframewnd__storerecenttabrelatedinfo\"></a>  CPaneFrameWnd::StoreRecentTabRelatedInfo  \n [!INCLUDE[cpp_fp_under_construction](../../mfc/reference/includes/cpp_fp_under_construction_md.md)]  \n  \n```  \nvirtual void StoreRecentTabRelatedInfo(\n    CDockablePane* pDockingBar,  \n    CDockablePane* pTabbedBar);\n```  \n  \n### Parameters  \n [in] `pDockingBar`  \n [in] `pTabbedBar`  \n  \n### Remarks  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [Classes](../../mfc/reference/mfc-classes.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)\n"}