{"nodes":[{"pos":[12,55],"content":"_CrtMemDumpAllObjectsSince | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"_CrtMemDumpAllObjectsSince | Microsoft Docs","pos":[0,43]}]},{"content":"_CrtMemDumpAllObjectsSince","pos":[1042,1068]},{"content":"Dumps information about objects in the heap from the start of program execution or from a specified heap state (debug version only).","pos":[1069,1201]},{"content":"Syntax","pos":[1210,1216]},{"content":"Parameters","pos":[1324,1334]},{"content":"Pointer to the heap state to begin dumping from or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[1349,1409],"source":" Pointer to the heap state to begin dumping from or **NULL**."},{"content":"Remarks","pos":[1418,1425]},{"content":"The <ph id=\"ph1\">`_CrtMemDumpAllObjectsSince`</ph> function dumps the debug header information of objects allocated in the heap in a user-readable form.","pos":[1429,1563],"source":"The `_CrtMemDumpAllObjectsSince` function dumps the debug header information of objects allocated in the heap in a user-readable form."},{"content":"The dump information can be used by the application to track allocations and detect memory problems.","pos":[1564,1664]},{"content":"When <bpt id=\"p1\">[</bpt>_DEBUG<ept id=\"p1\">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id=\"ph1\">`_CrtMemDumpAllObjectsSince`</ph> are removed during preprocessing.","pos":[1665,1800],"source":" When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtMemDumpAllObjectsSince` are removed during preprocessing."},{"content":"uses the value of the <ph id=\"ph1\">`state`</ph> parameter to determine where to initiate the dump operation.","pos":[1836,1926],"source":" uses the value of the `state` parameter to determine where to initiate the dump operation."},{"content":"To begin dumping from a specified heap state, the <ph id=\"ph1\">`state`</ph> parameter must be a pointer to a <bpt id=\"p1\">**</bpt>_CrtMemState<ept id=\"p1\">**</ept> structure that has been filled in by <bpt id=\"p2\">[</bpt>_CrtMemCheckpoint<ept id=\"p2\">](../../c-runtime-library/reference/crtmemcheckpoint.md)</ept> before <ph id=\"ph2\">`_CrtMemDumpAllObjectsSince`</ph> was called.","pos":[1927,2194],"source":" To begin dumping from a specified heap state, the `state` parameter must be a pointer to a **_CrtMemState** structure that has been filled in by [_CrtMemCheckpoint](../../c-runtime-library/reference/crtmemcheckpoint.md) before `_CrtMemDumpAllObjectsSince` was called."},{"content":"When <ph id=\"ph1\">`state`</ph> is <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, the function begins the dump from the start of program execution.","pos":[2195,2286],"source":" When `state` is **NULL**, the function begins the dump from the start of program execution."},{"content":"If the application has installed a dump hook function by calling <bpt id=\"p1\">[</bpt>_CrtSetDumpClient<ept id=\"p1\">](../../c-runtime-library/reference/crtsetdumpclient.md)</ept>, then every time <ph id=\"ph1\">`_CrtMemDumpAllObjectsSince`</ph> dumps information about a <ph id=\"ph2\">`_CLIENT_BLOCK`</ph> type of block, it calls the application-supplied dump function as well.","pos":[2293,2592],"source":"If the application has installed a dump hook function by calling [_CrtSetDumpClient](../../c-runtime-library/reference/crtsetdumpclient.md), then every time `_CrtMemDumpAllObjectsSince` dumps information about a `_CLIENT_BLOCK` type of block, it calls the application-supplied dump function as well."},{"content":"By default, internal C run-time blocks (<ph id=\"ph1\">`_CRT_BLOCK`</ph>) are not included in memory dump operations.","pos":[2593,2690],"source":" By default, internal C run-time blocks (`_CRT_BLOCK`) are not included in memory dump operations."},{"content":"The <bpt id=\"p1\">[</bpt>_CrtSetDbgFlag<ept id=\"p1\">](../../c-runtime-library/reference/crtsetdbgflag.md)</ept> function can be used to turn on the <ph id=\"ph1\">`_CRTDBG_CHECK_CRT_DF`</ph> bit of <bpt id=\"p2\">**</bpt>_crtDbgFlag<ept id=\"p2\">**</ept> to include these blocks.","pos":[2691,2870],"source":" The [_CrtSetDbgFlag](../../c-runtime-library/reference/crtsetdbgflag.md) function can be used to turn on the `_CRTDBG_CHECK_CRT_DF` bit of **_crtDbgFlag** to include these blocks."},{"content":"In addition, blocks marked as freed or ignored (<bpt id=\"p1\">**</bpt>_FREE_BLOCK<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>_IGNORE_BLOCK<ept id=\"p2\">**</ept>) are not included in the memory dump.","pos":[2871,2991],"source":" In addition, blocks marked as freed or ignored (**_FREE_BLOCK**, **_IGNORE_BLOCK**) are not included in the memory dump."},{"content":"For more information about heap state functions and the <ph id=\"ph1\">`_CrtMemState`</ph> structure, see <bpt id=\"p1\">[</bpt>Heap State Reporting Functions<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[2998,3164],"source":"For more information about heap state functions and the `_CrtMemState` structure, see [Heap State Reporting Functions](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"For more information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <bpt id=\"p1\">[</bpt>CRT Debug Heap Details<ept id=\"p1\">](/visualstudio/debugger/crt-debug-heap-details)</ept>.","pos":[3165,3365],"source":" For more information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details)."},{"content":"Requirements","pos":[3374,3386]},{"content":"Routine","pos":[3393,3400]},{"content":"Required header","pos":[3401,3416]},{"content":"_CrtMemDumpAll-ObjectsSince","pos":[3463,3490]},{"content":"crtdbg.h&gt;","pos":[3495,3504],"source":"crtdbg.h>"},{"pos":[3512,3630],"content":"For more compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"content":"Libraries","pos":[3639,3648]},{"pos":[3652,3747],"content":"Debug versions of <bpt id=\"p1\">[</bpt>C run-time libraries<ept id=\"p1\">](../../c-runtime-library/crt-library-features.md)</ept> only.","source":"Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only."},{"content":"Example","pos":[3756,3763]},{"pos":[3767,3909],"content":"For a sample of how to use <ph id=\"ph1\">`_CrtMemDumpAllObjectsSince`</ph>, see <bpt id=\"p1\">[</bpt>crt_dbg2<ept id=\"p1\">](http://msdn.microsoft.com/en-us/21e1346a-6a17-4f57-b275-c76813089167)</ept>.","source":"For a sample of how to use `_CrtMemDumpAllObjectsSince`, see [crt_dbg2](http://msdn.microsoft.com/en-us/21e1346a-6a17-4f57-b275-c76813089167)."},{"content":".NET Framework Equivalent","pos":[3918,3943]},{"content":"Not applicable.","pos":[3947,3962]},{"content":"To call the standard C function, use <ph id=\"ph1\">`PInvoke`</ph>.","pos":[3963,4010],"source":" To call the standard C function, use `PInvoke`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.","pos":[4011,4136],"source":" For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)."},{"content":"See Also","pos":[4145,4153]},{"content":"Debug Routines","pos":[4158,4172]},{"content":"_crtDbgFlag","pos":[4222,4233]}],"content":"---\ntitle: \"_CrtMemDumpAllObjectsSince | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_CrtMemDumpAllObjectsSince\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"CrtMemDumpAllObjectsSince\"\n  - \"_CrtMemDumpAllObjectsSince\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_CrtMemDumpAllObjectsSince function\"\n  - \"CrtMemDumpAllObjectsSince function\"\nms.assetid: c48a447a-e6bb-475c-9271-a3021182a0dc\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# _CrtMemDumpAllObjectsSince\nDumps information about objects in the heap from the start of program execution or from a specified heap state (debug version only).  \n  \n## Syntax  \n  \n```  \n  \n      void _CrtMemDumpAllObjectsSince(   \n   const _CrtMemState *state   \n);  \n```  \n  \n#### Parameters  \n `state`  \n Pointer to the heap state to begin dumping from or **NULL**.  \n  \n## Remarks  \n The `_CrtMemDumpAllObjectsSince` function dumps the debug header information of objects allocated in the heap in a user-readable form. The dump information can be used by the application to track allocations and detect memory problems. When [_DEBUG](../../c-runtime-library/debug.md) is not defined, calls to `_CrtMemDumpAllObjectsSince` are removed during preprocessing.  \n  \n `_CrtMemDumpAllObjectsSince` uses the value of the `state` parameter to determine where to initiate the dump operation. To begin dumping from a specified heap state, the `state` parameter must be a pointer to a **_CrtMemState** structure that has been filled in by [_CrtMemCheckpoint](../../c-runtime-library/reference/crtmemcheckpoint.md) before `_CrtMemDumpAllObjectsSince` was called. When `state` is **NULL**, the function begins the dump from the start of program execution.  \n  \n If the application has installed a dump hook function by calling [_CrtSetDumpClient](../../c-runtime-library/reference/crtsetdumpclient.md), then every time `_CrtMemDumpAllObjectsSince` dumps information about a `_CLIENT_BLOCK` type of block, it calls the application-supplied dump function as well. By default, internal C run-time blocks (`_CRT_BLOCK`) are not included in memory dump operations. The [_CrtSetDbgFlag](../../c-runtime-library/reference/crtsetdbgflag.md) function can be used to turn on the `_CRTDBG_CHECK_CRT_DF` bit of **_crtDbgFlag** to include these blocks. In addition, blocks marked as freed or ignored (**_FREE_BLOCK**, **_IGNORE_BLOCK**) are not included in the memory dump.  \n  \n For more information about heap state functions and the `_CrtMemState` structure, see [Heap State Reporting Functions](/visualstudio/debugger/crt-debug-heap-details). For more information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see [CRT Debug Heap Details](/visualstudio/debugger/crt-debug-heap-details).  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|**_CrtMemDumpAll-ObjectsSince**|\\<crtdbg.h>|  \n  \n For more compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Libraries  \n Debug versions of [C run-time libraries](../../c-runtime-library/crt-library-features.md) only.  \n  \n## Example  \n For a sample of how to use `_CrtMemDumpAllObjectsSince`, see [crt_dbg2](http://msdn.microsoft.com/en-us/21e1346a-6a17-4f57-b275-c76813089167).  \n  \n## .NET Framework Equivalent  \n Not applicable. To call the standard C function, use `PInvoke`. For more information, see [Platform Invoke Examples](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f).  \n  \n## See Also  \n [Debug Routines](../../c-runtime-library/debug-routines.md)   \n [_crtDbgFlag](../../c-runtime-library/crtdbgflag.md)"}