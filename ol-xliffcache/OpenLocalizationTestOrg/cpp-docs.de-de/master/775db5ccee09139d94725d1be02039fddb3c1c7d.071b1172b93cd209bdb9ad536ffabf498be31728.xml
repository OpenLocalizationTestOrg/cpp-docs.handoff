{"nodes":[{"pos":[12,63],"content":"difftime, _difftime32, _difftime64 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"difftime, _difftime32, _difftime64 | Microsoft Docs","pos":[0,51]}]},{"pos":[1181,1215],"content":"difftime, _difftime32, _difftime64","linkify":"difftime, _difftime32, _difftime64","nodes":[{"content":"difftime, _difftime32, _difftime64","pos":[0,34]}]},{"content":"Finds the difference between two times.","pos":[1216,1255]},{"pos":[1264,1270],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1513,1523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Ending time.","pos":[1539,1551]},{"content":"Beginning time.","pos":[1570,1585]},{"pos":[1594,1606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`difftime`</ph> returns the elapsed time in seconds, from <ph id=\"ph2\">`timer0`</ph> to <ph id=\"ph3\">`timer1`</ph>.","pos":[1610,1684],"source":"`difftime` returns the elapsed time in seconds, from `timer0` to `timer1`."},{"content":"The value returned is a double precision floating-point number.","pos":[1685,1748]},{"content":"The return value may be 0, indicating an error.","pos":[1749,1796]},{"pos":[1805,1812],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1816,1923],"content":"The <ph id=\"ph1\">`difftime`</ph> function computes the difference between the two supplied time values <ph id=\"ph2\">`timer0`</ph> and <ph id=\"ph3\">`timer1`</ph>.","source":"The `difftime` function computes the difference between the two supplied time values `timer0` and `timer1`."},{"content":"The time value supplied must fit within the range of <ph id=\"ph1\">`time_t`</ph>.","pos":[1930,1992],"source":"The time value supplied must fit within the range of `time_t`."},{"content":"<ph id=\"ph1\">`time_t`</ph> is a 64-bit value.","pos":[1993,2020],"source":"`time_t` is a 64-bit value."},{"content":"Thus, the end of the range was extended from 23:59:59 January 18, 2038, UTC to 23:59:59, December 31, 3000.","pos":[2021,2128]},{"content":"The lower range of <ph id=\"ph1\">`time_t`</ph> is still midnight, January 1, 1970.","pos":[2129,2192],"source":" The lower range of `time_t` is still midnight, January 1, 1970."},{"content":"<ph id=\"ph1\">`difftime`</ph> is an inline function that evaluates to either <ph id=\"ph2\">`_difftime32`</ph> or <ph id=\"ph3\">`_difftime64`</ph> depending on whether <ph id=\"ph4\">`_USE_32BIT_TIME_T`</ph> is defined.","pos":[2199,2340],"source":"`difftime` is an inline function that evaluates to either `_difftime32` or `_difftime64` depending on whether `_USE_32BIT_TIME_T` is defined."},{"content":"_difftime32 and _difftime64 can be used directly to force the use of a particular size of the time type.","pos":[2341,2445]},{"content":"These functions validate their parameters.","pos":[2452,2494]},{"content":"If either of the parameters is zero or negative, the invalid parameter handler is invoked, as described in <bpt id=\"p1\">[</bpt>Parameter Validation<ept id=\"p1\">](../../c-runtime-library/parameter-validation.md)</ept>.","pos":[2495,2674],"source":" If either of the parameters is zero or negative, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md)."},{"content":"If execution is allowed to continue, these functions return 0 and set <ph id=\"ph1\">`errno`</ph> to <ph id=\"ph2\">`EINVAL`</ph>.","pos":[2675,2765],"source":" If execution is allowed to continue, these functions return 0 and set `errno` to `EINVAL`."},{"pos":[2774,2786],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Routine","pos":[2793,2800]},{"content":"Required header","pos":[2801,2816]},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt;","pos":[2872,2881],"source":"\\<time.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt;","pos":[2900,2909],"source":"\\<time.h>"},{"content":"<ph id=\"ph1\">\\&lt;</ph>time.h&gt;","pos":[2928,2937],"source":"\\<time.h>"},{"pos":[2945,3069],"content":"For additional compatibility information, see <bpt id=\"p1\">[</bpt>Compatibility<ept id=\"p1\">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.","source":"For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction."},{"pos":[3078,3085],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4795,4820],"content":".NET Framework Equivalent","linkify":".NET Framework Equivalent","nodes":[{"content":".NET Framework Equivalent","pos":[0,25]}]},{"pos":[4824,4924],"content":"<bpt id=\"p1\">[</bpt>System::DateTime::Subtract<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.datetime.subtract.aspx)</ept>","source":"[System::DateTime::Subtract](https://msdn.microsoft.com/en-us/library/system.datetime.subtract.aspx)"},{"pos":[4933,4941],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Floating-Point Support<ept id=\"p1\">](../../c-runtime-library/floating-point-support.md)</ept><ph id=\"ph1\"> </ph>","pos":[4945,5021],"source":"[Floating-Point Support](../../c-runtime-library/floating-point-support.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Time Management<ept id=\"p1\">](../../c-runtime-library/time-management.md)</ept><ph id=\"ph1\"> </ph>","pos":[5024,5087],"source":" [Time Management](../../c-runtime-library/time-management.md) "},{"content":"<bpt id=\"p1\"> [</bpt>time, _time32, _time64<ept id=\"p1\">](../../c-runtime-library/reference/time-time32-time64.md)</ept>","pos":[5090,5172],"source":" [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md)"}],"content":"---\ntitle: \"difftime, _difftime32, _difftime64 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\napiname: \n  - \"_difftime32\"\n  - \"difftime\"\n  - \"_difftime64\"\napilocation: \n  - \"msvcrt.dll\"\n  - \"msvcr80.dll\"\n  - \"msvcr90.dll\"\n  - \"msvcr100.dll\"\n  - \"msvcr100_clr0400.dll\"\n  - \"msvcr110.dll\"\n  - \"msvcr110_clr0400.dll\"\n  - \"msvcr120.dll\"\n  - \"msvcr120_clr0400.dll\"\n  - \"ucrtbase.dll\"\n  - \"api-ms-win-crt-time-l1-1-0.dll\"\napitype: \"DLLExport\"\nf1_keywords: \n  - \"_difftime64\"\n  - \"difftime\"\n  - \"difftime64\"\n  - \"_difftime32\"\n  - \"difftime32\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"_difftime32 function\"\n  - \"difftime function\"\n  - \"time, finding the difference\"\n  - \"difftime64 function\"\n  - \"_difftime64 function\"\n  - \"difftime32 function\"\nms.assetid: 4cc0ac2b-fc7b-42c0-8283-8c9d10c566d0\ncaps.latest.revision: 21\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# difftime, _difftime32, _difftime64\nFinds the difference between two times.  \n  \n## Syntax  \n  \n```  \ndouble difftime(   \n   time_t timer1,  \n   time_t timer0   \n);  \ndouble _difftime32(   \n   __time32_t timer1,  \n   __time32_t timer0   \n);  \ndouble _difftime64(   \n   __time64_t timer1,  \n   __time64_t timer0   \n);  \n```  \n  \n#### Parameters  \n `timer1`  \n Ending time.  \n  \n `timer0`  \n Beginning time.  \n  \n## Return Value  \n `difftime` returns the elapsed time in seconds, from `timer0` to `timer1`. The value returned is a double precision floating-point number. The return value may be 0, indicating an error.  \n  \n## Remarks  \n The `difftime` function computes the difference between the two supplied time values `timer0` and `timer1`.  \n  \n The time value supplied must fit within the range of `time_t`. `time_t` is a 64-bit value. Thus, the end of the range was extended from 23:59:59 January 18, 2038, UTC to 23:59:59, December 31, 3000. The lower range of `time_t` is still midnight, January 1, 1970.  \n  \n `difftime` is an inline function that evaluates to either `_difftime32` or `_difftime64` depending on whether `_USE_32BIT_TIME_T` is defined. _difftime32 and _difftime64 can be used directly to force the use of a particular size of the time type.  \n  \n These functions validate their parameters. If either of the parameters is zero or negative, the invalid parameter handler is invoked, as described in [Parameter Validation](../../c-runtime-library/parameter-validation.md). If execution is allowed to continue, these functions return 0 and set `errno` to `EINVAL`.  \n  \n## Requirements  \n  \n|Routine|Required header|  \n|-------------|---------------------|  \n|`difftime`|\\<time.h>|  \n|`_difftime32`|\\<time.h>|  \n|`_difftime64`|\\<time.h>|  \n  \n For additional compatibility information, see [Compatibility](../../c-runtime-library/compatibility.md) in the Introduction.  \n  \n## Example  \n  \n```cpp  \n// crt_difftime.c  \n// This program calculates the amount of time  \n// needed to do a floating-point multiply 100 million times.  \n//  \n  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <time.h>  \n#include <float.h>  \n  \ndouble RangedRand( float range_min, float range_max)  \n{  \n   // Generate random numbers in the half-closed interval  \n   // [range_min, range_max). In other words,  \n   // range_min <= random number < range_max  \n   return ((double)rand() / (RAND_MAX + 1) * (range_max - range_min)  \n            + range_min);  \n}  \n  \nint main( void )  \n{  \n   time_t   start, finish;  \n   long     loop;  \n   double   result, elapsed_time;  \n   double   arNums[3];  \n  \n   // Seed the random-number generator with the current time so that  \n   // the numbers will be different every time we run.  \n   srand( (unsigned)time( NULL ) );  \n  \n   arNums[0] = RangedRand(1, FLT_MAX);  \n   arNums[1] = RangedRand(1, FLT_MAX);  \n   arNums[2] = RangedRand(1, FLT_MAX);  \n   printf( \"Using floating point numbers %.5e %.5e %.5e\\n\", arNums[0], arNums[1], arNums[2] );  \n  \n   printf( \"Multiplying 2 numbers 100 million times...\\n\" );  \n  \n   time( &start );  \n   for( loop = 0; loop < 100000000; loop++ )  \n      result = arNums[loop%3] * arNums[(loop+1)%3];   \n   time( &finish );  \n  \n   elapsed_time = difftime( finish, start );  \n   printf( \"\\nProgram takes %6.0f seconds.\\n\", elapsed_time );  \n}  \n  \n```  \n  \n```Output  \nUsing random floating point numbers 1.04749e+038 2.01482e+038 1.72737e+038Multiplying 2 floating point numbers 100 million times...Program takes      3 seconds.Multiplying 2 floating point numbers 500 million times...  \n  \nProgram takes      5 seconds.  \n```  \n  \n## .NET Framework Equivalent  \n [System::DateTime::Subtract](https://msdn.microsoft.com/en-us/library/system.datetime.subtract.aspx)  \n  \n## See Also  \n [Floating-Point Support](../../c-runtime-library/floating-point-support.md)   \n [Time Management](../../c-runtime-library/time-management.md)   \n [time, _time32, _time64](../../c-runtime-library/reference/time-time32-time64.md)"}