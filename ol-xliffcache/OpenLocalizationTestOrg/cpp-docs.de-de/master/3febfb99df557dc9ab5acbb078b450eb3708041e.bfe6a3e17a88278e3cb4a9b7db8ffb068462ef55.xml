{"nodes":[{"pos":[12,52],"content":"IViewObjectExImpl Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IViewObjectExImpl Class | Microsoft Docs","pos":[0,40]}]},{"pos":[841,864],"content":"IViewObjectExImpl Class","linkify":"IViewObjectExImpl Class","nodes":[{"content":"IViewObjectExImpl Class","pos":[0,23]}]},{"pos":[865,1186],"content":"This class implements <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> and provides default implementations of the <bpt id=\"p2\">[</bpt>IViewObject<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms680763)</ept>, <bpt id=\"p3\">[</bpt>IViewObject2<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms691318)</ept>, and <bpt id=\"p4\">[</bpt>IViewObjectEx<ept id=\"p4\">](http://msdn.microsoft.com/library/windows/desktop/ms682375)</ept> interfaces.","source":"This class implements **IUnknown** and provides default implementations of the [IViewObject](http://msdn.microsoft.com/library/windows/desktop/ms680763), [IViewObject2](http://msdn.microsoft.com/library/windows/desktop/ms691318), and [IViewObjectEx](http://msdn.microsoft.com/library/windows/desktop/ms682375) interfaces."},{"pos":[1194,1344],"content":"[!IMPORTANT]\n This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)].","leadings":["","> "],"nodes":[{"content":"This class and its members cannot be used in applications that execute in the <ph id=\"ph1\">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.","pos":[14,148],"source":" This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]."}]},{"pos":[1353,1359],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1464,1474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Your class, derived from <ph id=\"ph1\">`IViewObjectExImpl`</ph>.","pos":[1485,1530],"source":" Your class, derived from `IViewObjectExImpl`."},{"pos":[1539,1546],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1556,1570],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1577,1581]},{"content":"Description","pos":[1582,1593]},{"pos":[1631,1682],"content":"<bpt id=\"p1\">[</bpt>IViewObjectExImpl::Draw<ept id=\"p1\">](#iviewobjecteximpl__draw)</ept>","source":"[IViewObjectExImpl::Draw](#iviewobjecteximpl__draw)"},{"content":"Draws a representation of the control onto a device context.","pos":[1683,1743]},{"pos":[1748,1803],"content":"<bpt id=\"p1\">[</bpt>IViewObjectExImpl::Freeze<ept id=\"p1\">](#iviewobjecteximpl__freeze)</ept>","source":"[IViewObjectExImpl::Freeze](#iviewobjecteximpl__freeze)"},{"content":"Freezes the drawn representation of a control so it won't change until an <ph id=\"ph1\">`Unfreeze`</ph>.","pos":[1804,1889],"source":"Freezes the drawn representation of a control so it won't change until an `Unfreeze`."},{"content":"The ATL implementation returns <bpt id=\"p1\">**</bpt>E_NOTIMPL<ept id=\"p1\">**</ept>.","pos":[1890,1935],"source":" The ATL implementation returns **E_NOTIMPL**."},{"pos":[1940,2001],"content":"<bpt id=\"p1\">[</bpt>IViewObjectExImpl::GetAdvise<ept id=\"p1\">](#iviewobjecteximpl__getadvise)</ept>","source":"[IViewObjectExImpl::GetAdvise](#iviewobjecteximpl__getadvise)"},{"content":"Retrieves an existing advisory sink connection on the control, if there is one.","pos":[2002,2081]},{"pos":[2086,2151],"content":"<bpt id=\"p1\">[</bpt>IViewObjectExImpl::GetColorSet<ept id=\"p1\">](#iviewobjecteximpl__getcolorset)</ept>","source":"[IViewObjectExImpl::GetColorSet](#iviewobjecteximpl__getcolorset)"},{"content":"Returns the logical palette used by the control for drawing.","pos":[2152,2212]},{"content":"The ATL implementation returns <bpt id=\"p1\">**</bpt>E_NOTIMPL<ept id=\"p1\">**</ept>.","pos":[2213,2258],"source":" The ATL implementation returns **E_NOTIMPL**."},{"pos":[2263,2324],"content":"<bpt id=\"p1\">[</bpt>IViewObjectExImpl::GetExtent<ept id=\"p1\">](#iviewobjecteximpl__getextent)</ept>","source":"[IViewObjectExImpl::GetExtent](#iviewobjecteximpl__getextent)"},{"pos":[2325,2550],"content":"Retrieves the control's display size in HIMETRIC units (0.01 millimeter per unit) from the control class data member <bpt id=\"p1\">[</bpt>CComControlBase::m_sizeExtent<ept id=\"p1\">](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_sizeextent)</ept>.","source":"Retrieves the control's display size in HIMETRIC units (0.01 millimeter per unit) from the control class data member [CComControlBase::m_sizeExtent](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_sizeextent)."},{"pos":[2555,2630],"content":"<bpt id=\"p1\">[</bpt>IViewObjectExImpl::GetNaturalExtent<ept id=\"p1\">](#iviewobjecteximpl__getnaturalextent)</ept>","source":"[IViewObjectExImpl::GetNaturalExtent](#iviewobjecteximpl__getnaturalextent)"},{"content":"Provides sizing hints from the container for the object to use as the user resizes it.","pos":[2631,2717]},{"pos":[2722,2779],"content":"<bpt id=\"p1\">[</bpt>IViewObjectExImpl::GetRect<ept id=\"p1\">](#iviewobjecteximpl__getrect)</ept>","source":"[IViewObjectExImpl::GetRect](#iviewobjecteximpl__getrect)"},{"content":"Returns a rectangle describing a requested drawing aspect.","pos":[2780,2838]},{"content":"The ATL implementation returns <bpt id=\"p1\">**</bpt>E_NOTIMPL<ept id=\"p1\">**</ept>.","pos":[2839,2884],"source":" The ATL implementation returns **E_NOTIMPL**."},{"pos":[2889,2958],"content":"<bpt id=\"p1\">[</bpt>IViewObjectExImpl::GetViewStatus<ept id=\"p1\">](#iviewobjecteximpl__getviewstatus)</ept>","source":"[IViewObjectExImpl::GetViewStatus](#iviewobjecteximpl__getviewstatus)"},{"content":"Returns information about the opacity of the object and what drawing aspects are supported.","pos":[2959,3050]},{"pos":[3055,3124],"content":"<bpt id=\"p1\">[</bpt>IViewObjectExImpl::QueryHitPoint<ept id=\"p1\">](#iviewobjecteximpl__queryhitpoint)</ept>","source":"[IViewObjectExImpl::QueryHitPoint](#iviewobjecteximpl__queryhitpoint)"},{"pos":[3125,3293],"content":"Checks if the specified point is in the specified rectangle and returns a <bpt id=\"p1\">[</bpt>HITRESULT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms682187)</ept> value in <ph id=\"ph1\">`pHitResult`</ph>.","source":"Checks if the specified point is in the specified rectangle and returns a [HITRESULT](http://msdn.microsoft.com/library/windows/desktop/ms682187) value in `pHitResult`."},{"pos":[3298,3365],"content":"<bpt id=\"p1\">[</bpt>IViewObjectExImpl::QueryHitRect<ept id=\"p1\">](#iviewobjecteximpl__queryhitrect)</ept>","source":"[IViewObjectExImpl::QueryHitRect](#iviewobjecteximpl__queryhitrect)"},{"pos":[3366,3518],"content":"Checks whether the control's display rectangle overlaps any point in the specified location rectangle and returns a <bpt id=\"p1\">**</bpt>HITRESULT<ept id=\"p1\">**</ept> value in <ph id=\"ph1\">`pHitResult`</ph>.","source":"Checks whether the control's display rectangle overlaps any point in the specified location rectangle and returns a **HITRESULT** value in `pHitResult`."},{"pos":[3523,3584],"content":"<bpt id=\"p1\">[</bpt>IViewObjectExImpl::SetAdvise<ept id=\"p1\">](#iviewobjecteximpl__setadvise)</ept>","source":"[IViewObjectExImpl::SetAdvise](#iviewobjecteximpl__setadvise)"},{"content":"Sets up a connection between the control and an advise sink so the sink can be notified about changes in the control's view.","pos":[3585,3709]},{"pos":[3714,3773],"content":"<bpt id=\"p1\">[</bpt>IViewObjectExImpl::Unfreeze<ept id=\"p1\">](#iviewobjecteximpl__unfreeze)</ept>","source":"[IViewObjectExImpl::Unfreeze](#iviewobjecteximpl__unfreeze)"},{"content":"Unfreezes the drawn representation of the control.","pos":[3774,3824]},{"content":"The ATL implementation returns <bpt id=\"p1\">**</bpt>E_NOTIMPL<ept id=\"p1\">**</ept>.","pos":[3825,3870],"source":" The ATL implementation returns **E_NOTIMPL**."},{"pos":[3880,3887],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">[</bpt>IViewObject<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms680763)</ept>, <bpt id=\"p2\">[</bpt>IViewObject2<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms691318)</ept>, and <bpt id=\"p3\">[</bpt>IViewObjectEx<ept id=\"p3\">](http://msdn.microsoft.com/library/windows/desktop/ms682375)</ept> interfaces enable a control to display itself directly, and to create and manage an advise sink to notify the container of changes in the control display.","pos":[3891,4280],"source":"The [IViewObject](http://msdn.microsoft.com/library/windows/desktop/ms680763), [IViewObject2](http://msdn.microsoft.com/library/windows/desktop/ms691318), and [IViewObjectEx](http://msdn.microsoft.com/library/windows/desktop/ms682375) interfaces enable a control to display itself directly, and to create and manage an advise sink to notify the container of changes in the control display."},{"content":"The <bpt id=\"p1\">**</bpt>IViewObjectEx<ept id=\"p1\">**</ept> interface provides support for extended control features such as flicker-free drawing, non-rectangular and transparent controls, and hit-testing (for example, how close a mouse click must be to be considered on the control).","pos":[4281,4527],"source":" The **IViewObjectEx** interface provides support for extended control features such as flicker-free drawing, non-rectangular and transparent controls, and hit-testing (for example, how close a mouse click must be to be considered on the control)."},{"content":"Class <ph id=\"ph1\">`IViewObjectExImpl`</ph> provides a default implementation of these interfaces and implements <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> by sending information to the dump device in debug builds.","pos":[4528,4694],"source":" Class `IViewObjectExImpl` provides a default implementation of these interfaces and implements **IUnknown** by sending information to the dump device in debug builds."},{"pos":[4703,4724],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[4778,4790],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4794,4814],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlctl.h","source":"**Header:** atlctl.h"},{"pos":[4824,4887],"content":"<bpt id=\"p1\">&lt;a name=\"iviewobjecteximpl__draw\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IViewObjectExImpl::Draw","linkify":"<a name=\"iviewobjecteximpl__draw\"></a>  IViewObjectExImpl::Draw","source":"<a name=\"iviewobjecteximpl__draw\"></a>  IViewObjectExImpl::Draw"},{"content":"Draws a representation of the control onto a device context.","pos":[4891,4951]},{"pos":[5237,5244],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method calls <bpt id=\"p1\">**</bpt>CComControl::OnDrawAdvanced<ept id=\"p1\">**</ept> which in turn calls your control class's <ph id=\"ph1\">`OnDraw`</ph> method.","pos":[5248,5355],"source":"This method calls **CComControl::OnDrawAdvanced** which in turn calls your control class's `OnDraw` method."},{"content":"An <ph id=\"ph1\">`OnDraw`</ph> method is automatically added to your control class when you create your control with the ATL Control Wizard.","pos":[5356,5477],"source":" An `OnDraw` method is automatically added to your control class when you create your control with the ATL Control Wizard."},{"content":"The Wizard's default <ph id=\"ph1\">`OnDraw`</ph> draws a rectangle with the label \"ATL 3.0\".","pos":[5478,5551],"source":" The Wizard's default `OnDraw` draws a rectangle with the label \"ATL 3.0\"."},{"pos":[5558,5701],"content":"See <bpt id=\"p1\">[</bpt>IViewObject::Draw<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms688655)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IViewObject::Draw](http://msdn.microsoft.com/library/windows/desktop/ms688655) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[5711,5778],"content":"<bpt id=\"p1\">&lt;a name=\"iviewobjecteximpl__freeze\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IViewObjectExImpl::Freeze","linkify":"<a name=\"iviewobjecteximpl__freeze\"></a>  IViewObjectExImpl::Freeze","source":"<a name=\"iviewobjecteximpl__freeze\"></a>  IViewObjectExImpl::Freeze"},{"content":"Freezes the drawn representation of a control so it won't change until an <ph id=\"ph1\">`Unfreeze`</ph>.","pos":[5782,5867],"source":"Freezes the drawn representation of a control so it won't change until an `Unfreeze`."},{"content":"The ATL implementation returns <bpt id=\"p1\">**</bpt>E_NOTIMPL<ept id=\"p1\">**</ept>.","pos":[5868,5913],"source":" The ATL implementation returns **E_NOTIMPL**."},{"pos":[6054,6061],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6065,6210],"content":"See <bpt id=\"p1\">[</bpt>IViewObject::Freeze<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms688728)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IViewObject::Freeze](http://msdn.microsoft.com/library/windows/desktop/ms688728) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[6220,6293],"content":"<bpt id=\"p1\">&lt;a name=\"iviewobjecteximpl__getadvise\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IViewObjectExImpl::GetAdvise","linkify":"<a name=\"iviewobjecteximpl__getadvise\"></a>  IViewObjectExImpl::GetAdvise","source":"<a name=\"iviewobjecteximpl__getadvise\"></a>  IViewObjectExImpl::GetAdvise"},{"content":"Retrieves an existing advisory sink connection on the control, if there is one.","pos":[6297,6376]},{"pos":[6508,6515],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6519,6692],"content":"The advisory sink is stored in the control class data member <bpt id=\"p1\">[</bpt>CComControlBase::m_spAdviseSink<ept id=\"p1\">](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_spadvisesink)</ept>.","source":"The advisory sink is stored in the control class data member [CComControlBase::m_spAdviseSink](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_spadvisesink)."},{"pos":[6699,6847],"content":"See <bpt id=\"p1\">[</bpt>IViewObject::GetAdvise<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692772)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IViewObject::GetAdvise](http://msdn.microsoft.com/library/windows/desktop/ms692772) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[6857,6934],"content":"<bpt id=\"p1\">&lt;a name=\"iviewobjecteximpl__getcolorset\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IViewObjectExImpl::GetColorSet","linkify":"<a name=\"iviewobjecteximpl__getcolorset\"></a>  IViewObjectExImpl::GetColorSet","source":"<a name=\"iviewobjecteximpl__getcolorset\"></a>  IViewObjectExImpl::GetColorSet"},{"content":"Returns the logical palette used by the control for drawing.","pos":[6938,6998]},{"content":"The ATL implementation returns <bpt id=\"p1\">**</bpt>E_NOTIMPL<ept id=\"p1\">**</ept>.","pos":[6999,7044],"source":" The ATL implementation returns **E_NOTIMPL**."},{"pos":[7259,7266],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7270,7420],"content":"See <bpt id=\"p1\">[</bpt>IViewObject::GetColorSet<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686553)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IViewObject::GetColorSet](http://msdn.microsoft.com/library/windows/desktop/ms686553) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[7430,7503],"content":"<bpt id=\"p1\">&lt;a name=\"iviewobjecteximpl__getextent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IViewObjectExImpl::GetExtent","linkify":"<a name=\"iviewobjecteximpl__getextent\"></a>  IViewObjectExImpl::GetExtent","source":"<a name=\"iviewobjecteximpl__getextent\"></a>  IViewObjectExImpl::GetExtent"},{"pos":[7507,7732],"content":"Retrieves the control's display size in HIMETRIC units (0.01 millimeter per unit) from the control class data member <bpt id=\"p1\">[</bpt>CComControlBase::m_sizeExtent<ept id=\"p1\">](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_sizeextent)</ept>.","source":"Retrieves the control's display size in HIMETRIC units (0.01 millimeter per unit) from the control class data member [CComControlBase::m_sizeExtent](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_sizeextent)."},{"pos":[7879,7886],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7890,8039],"content":"See <bpt id=\"p1\">[</bpt>IViewObject2::GetExtent<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms684032)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IViewObject2::GetExtent](http://msdn.microsoft.com/library/windows/desktop/ms684032) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[8049,8136],"content":"<bpt id=\"p1\">&lt;a name=\"iviewobjecteximpl__getnaturalextent\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IViewObjectExImpl::GetNaturalExtent","linkify":"<a name=\"iviewobjecteximpl__getnaturalextent\"></a>  IViewObjectExImpl::GetNaturalExtent","source":"<a name=\"iviewobjecteximpl__getnaturalextent\"></a>  IViewObjectExImpl::GetNaturalExtent"},{"content":"Provides sizing hints from the container for the object to use as the user resizes it.","pos":[8140,8226]},{"pos":[8430,8437],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <ph id=\"ph1\">`dwAspect`</ph> is <ph id=\"ph2\">`DVASPECT_CONTENT`</ph> and <bpt id=\"p1\">*</bpt>pExtentInfo-&gt;dwExtentMode<ept id=\"p1\">*</ept> is <bpt id=\"p2\">**</bpt>DVEXTENT_CONTENT<ept id=\"p2\">**</ept>, sets * <ph id=\"ph3\">`psizel`</ph> to the control class's data member <bpt id=\"p3\">[</bpt>CComControlBase::m_sizeNatural<ept id=\"p3\">](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_sizenatural)</ept>.","pos":[8441,8695],"source":"If `dwAspect` is `DVASPECT_CONTENT` and *pExtentInfo->dwExtentMode* is **DVEXTENT_CONTENT**, sets * `psizel` to the control class's data member [CComControlBase::m_sizeNatural](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_sizenatural)."},{"content":"Otherwise, returns an error <ph id=\"ph1\">`HRESULT`</ph>.","pos":[8696,8734],"source":" Otherwise, returns an error `HRESULT`."},{"pos":[8741,8898],"content":"See <bpt id=\"p1\">[</bpt>IViewObjectEx::GetNaturalExtent<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683718)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IViewObjectEx::GetNaturalExtent](http://msdn.microsoft.com/library/windows/desktop/ms683718) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[8908,8977],"content":"<bpt id=\"p1\">&lt;a name=\"iviewobjecteximpl__getrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IViewObjectExImpl::GetRect","linkify":"<a name=\"iviewobjecteximpl__getrect\"></a>  IViewObjectExImpl::GetRect","source":"<a name=\"iviewobjecteximpl__getrect\"></a>  IViewObjectExImpl::GetRect"},{"content":"Returns a rectangle describing a requested drawing aspect.","pos":[8981,9039]},{"content":"The ATL implementation returns <bpt id=\"p1\">**</bpt>E_NOTIMPL<ept id=\"p1\">**</ept>.","pos":[9040,9085],"source":" The ATL implementation returns **E_NOTIMPL**."},{"pos":[9172,9179],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9183,9331],"content":"See <bpt id=\"p1\">[</bpt>IViewObjectEx::GetRect<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms695246)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IViewObjectEx::GetRect](http://msdn.microsoft.com/library/windows/desktop/ms695246) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[9341,9422],"content":"<bpt id=\"p1\">&lt;a name=\"iviewobjecteximpl__getviewstatus\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IViewObjectExImpl::GetViewStatus","linkify":"<a name=\"iviewobjecteximpl__getviewstatus\"></a>  IViewObjectExImpl::GetViewStatus","source":"<a name=\"iviewobjecteximpl__getviewstatus\"></a>  IViewObjectExImpl::GetViewStatus"},{"content":"Returns information about the opacity of the object and what drawing aspects are supported.","pos":[9426,9517]},{"pos":[9584,9591],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9595,9802],"content":"By default, ATL sets <ph id=\"ph1\">`pdwStatus`</ph> to indicate that the control supports <bpt id=\"p1\">**</bpt>VIEWSTATUS_OPAQUE<ept id=\"p1\">**</ept> (possible values are in the <bpt id=\"p2\">[</bpt>VIEWSTATUS<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms687201)</ept> enumeration).","source":"By default, ATL sets `pdwStatus` to indicate that the control supports **VIEWSTATUS_OPAQUE** (possible values are in the [VIEWSTATUS](http://msdn.microsoft.com/library/windows/desktop/ms687201) enumeration)."},{"pos":[9809,9963],"content":"See <bpt id=\"p1\">[</bpt>IViewObjectEx::GetViewStatus<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms693371)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IViewObjectEx::GetViewStatus](http://msdn.microsoft.com/library/windows/desktop/ms693371) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[9973,10054],"content":"<bpt id=\"p1\">&lt;a name=\"iviewobjecteximpl__queryhitpoint\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IViewObjectExImpl::QueryHitPoint","linkify":"<a name=\"iviewobjecteximpl__queryhitpoint\"></a>  IViewObjectExImpl::QueryHitPoint","source":"<a name=\"iviewobjecteximpl__queryhitpoint\"></a>  IViewObjectExImpl::QueryHitPoint"},{"pos":[10058,10226],"content":"Checks if the specified point is in the specified rectangle and returns a <bpt id=\"p1\">[</bpt>HITRESULT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms682187)</ept> value in <ph id=\"ph1\">`pHitResult`</ph>.","source":"Checks if the specified point is in the specified rectangle and returns a [HITRESULT](http://msdn.microsoft.com/library/windows/desktop/ms682187) value in `pHitResult`."},{"pos":[10389,10396],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[10400,10467],"content":"The value can be either <bpt id=\"p1\">**</bpt>HITRESULT_HIT<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>HITRESULT_OUTSIDE<ept id=\"p2\">**</ept>.","source":"The value can be either **HITRESULT_HIT** or **HITRESULT_OUTSIDE**."},{"content":"If <ph id=\"ph1\">`dwAspect`</ph> equals <bpt id=\"p1\">[</bpt>DVASPECT_CONTENT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms690318)</ept>, the method returns <ph id=\"ph2\">`S_OK`</ph>.","pos":[10474,10601],"source":"If `dwAspect` equals [DVASPECT_CONTENT](http://msdn.microsoft.com/library/windows/desktop/ms690318), the method returns `S_OK`."},{"content":"Otherwise, the method returns <bpt id=\"p1\">**</bpt>E_FAIL<ept id=\"p1\">**</ept>.","pos":[10602,10643],"source":" Otherwise, the method returns **E_FAIL**."},{"pos":[10650,10804],"content":"See <bpt id=\"p1\">[</bpt>IViewObjectEx::QueryHitPoint<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms691209)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IViewObjectEx::QueryHitPoint](http://msdn.microsoft.com/library/windows/desktop/ms691209) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[10814,10893],"content":"<bpt id=\"p1\">&lt;a name=\"iviewobjecteximpl__queryhitrect\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IViewObjectExImpl::QueryHitRect","linkify":"<a name=\"iviewobjecteximpl__queryhitrect\"></a>  IViewObjectExImpl::QueryHitRect","source":"<a name=\"iviewobjecteximpl__queryhitrect\"></a>  IViewObjectExImpl::QueryHitRect"},{"pos":[10897,11107],"content":"Checks whether the control's display rectangle overlaps any point in the specified location rectangle and returns a <bpt id=\"p1\">[</bpt>HITRESULT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms682187)</ept> value in <ph id=\"ph1\">`pHitResult`</ph>.","source":"Checks whether the control's display rectangle overlaps any point in the specified location rectangle and returns a [HITRESULT](http://msdn.microsoft.com/library/windows/desktop/ms682187) value in `pHitResult`."},{"pos":[11270,11277],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11281,11348],"content":"The value can be either <bpt id=\"p1\">**</bpt>HITRESULT_HIT<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>HITRESULT_OUTSIDE<ept id=\"p2\">**</ept>.","source":"The value can be either **HITRESULT_HIT** or **HITRESULT_OUTSIDE**."},{"content":"If <ph id=\"ph1\">`dwAspect`</ph> equals <bpt id=\"p1\">[</bpt>DVASPECT_CONTENT<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms690318)</ept>, the method returns <ph id=\"ph2\">`S_OK`</ph>.","pos":[11355,11482],"source":"If `dwAspect` equals [DVASPECT_CONTENT](http://msdn.microsoft.com/library/windows/desktop/ms690318), the method returns `S_OK`."},{"content":"Otherwise, the method returns <bpt id=\"p1\">**</bpt>E_FAIL<ept id=\"p1\">**</ept>.","pos":[11483,11524],"source":" Otherwise, the method returns **E_FAIL**."},{"pos":[11531,11684],"content":"See <bpt id=\"p1\">[</bpt>IViewObjectEx::QueryHitRect<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms693797)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IViewObjectEx::QueryHitRect](http://msdn.microsoft.com/library/windows/desktop/ms693797) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[11694,11767],"content":"<bpt id=\"p1\">&lt;a name=\"iviewobjecteximpl__setadvise\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IViewObjectExImpl::SetAdvise","linkify":"<a name=\"iviewobjecteximpl__setadvise\"></a>  IViewObjectExImpl::SetAdvise","source":"<a name=\"iviewobjecteximpl__setadvise\"></a>  IViewObjectExImpl::SetAdvise"},{"content":"Sets up a connection between the control and an advise sink so the sink can be notified about changes in the control's view.","pos":[11771,11895]},{"pos":[12010,12017],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12022,12279],"content":"The pointer to the <bpt id=\"p1\">[</bpt>IAdviseSink<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692513)</ept> interface on the advise sink is stored in the control class data member <bpt id=\"p2\">[</bpt>CComControlBase::m_spAdviseSink<ept id=\"p2\">](ccomcontrolbase-class.md#ccomcontrolbase__m_spadvisesink)</ept>.","source":"The pointer to the [IAdviseSink](http://msdn.microsoft.com/library/windows/desktop/ms692513) interface on the advise sink is stored in the control class data member [CComControlBase::m_spAdviseSink](ccomcontrolbase-class.md#ccomcontrolbase__m_spadvisesink)."},{"pos":[12287,12435],"content":"See <bpt id=\"p1\">[</bpt>IViewObject::SetAdvise<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms683950)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IViewObject::SetAdvise](http://msdn.microsoft.com/library/windows/desktop/ms683950) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[12445,12516],"content":"<bpt id=\"p1\">&lt;a name=\"iviewobjecteximpl__unfreeze\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IViewObjectExImpl::Unfreeze","linkify":"<a name=\"iviewobjecteximpl__unfreeze\"></a>  IViewObjectExImpl::Unfreeze","source":"<a name=\"iviewobjecteximpl__unfreeze\"></a>  IViewObjectExImpl::Unfreeze"},{"content":"Unfreezes the drawn representation of the control.","pos":[12520,12570]},{"content":"The ATL implementation returns <bpt id=\"p1\">**</bpt>E_NOTIMPL<ept id=\"p1\">**</ept>.","pos":[12571,12616],"source":" The ATL implementation returns **E_NOTIMPL**."},{"pos":[12682,12689],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12693,12840],"content":"See <bpt id=\"p1\">[</bpt>IViewObject::Unfreeze<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms686641)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"See [IViewObject::Unfreeze](http://msdn.microsoft.com/library/windows/desktop/ms686641) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[12850,12931],"content":"<bpt id=\"p1\">&lt;a name=\"iworkerthreadclient__closehandle\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IWorkerThreadClient::CloseHandle","linkify":"<a name=\"iworkerthreadclient__closehandle\"></a>  IWorkerThreadClient::CloseHandle","source":"<a name=\"iworkerthreadclient__closehandle\"></a>  IWorkerThreadClient::CloseHandle"},{"content":"Implement this method to close the handle associated with this object.","pos":[12935,13005]},{"pos":[13065,13075],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>hHandle<ept id=\"p1\">*</ept>","pos":[13079,13088],"source":"*hHandle*"},{"content":"The handle to be closed.","pos":[13092,13116]},{"pos":[13126,13138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Return S_OK on success, or an error HRESULT on failure.","pos":[13142,13197]},{"pos":[13207,13214],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13218,13403],"content":"The handle passed to this method was previously associated with this object by a call to <bpt id=\"p1\">[</bpt>CWorkerThread::AddHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)</ept>.","source":"The handle passed to this method was previously associated with this object by a call to [CWorkerThread::AddHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)."},{"pos":[13413,13420],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13424,13511],"content":"The following code shows a simple implementation of <ph id=\"ph1\">`IWorkerThreadClient::CloseHandle`</ph>.","source":"The following code shows a simple implementation of `IWorkerThreadClient::CloseHandle`."},{"pos":[13518,13609],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#135<ept id=\"p2\">](../../atl/codesnippet/cpp/iviewobjecteximpl-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#135](../../atl/codesnippet/cpp/iviewobjecteximpl-class_1.cpp)]"},{"pos":[13619,13692],"content":"<bpt id=\"p1\">&lt;a name=\"iworkerthreadclient__execute\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  IWorkerThreadClient::Execute","linkify":"<a name=\"iworkerthreadclient__execute\"></a>  IWorkerThreadClient::Execute","source":"<a name=\"iworkerthreadclient__execute\"></a>  IWorkerThreadClient::Execute"},{"content":"Implement this method to execute code when the handle associated with this object becomes signaled.","pos":[13696,13795]},{"pos":[13871,13881],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The user parameter.","pos":[13898,13917]},{"content":"The handle that has become signaled.","pos":[13937,13973]},{"pos":[13983,13995],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Return S_OK on success, or an error HRESULT on failure.","pos":[13999,14054]},{"pos":[14064,14071],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14075,14279],"content":"The handle and DWORD/pointer passed to this method were previously associated with this object by a call to <bpt id=\"p1\">[</bpt>CWorkerThread::AddHandle<ept id=\"p1\">](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)</ept>.","source":"The handle and DWORD/pointer passed to this method were previously associated with this object by a call to [CWorkerThread::AddHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle)."},{"pos":[14289,14296],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14300,14383],"content":"The following code shows a simple implementation of <ph id=\"ph1\">`IWorkerThreadClient::Execute`</ph>.","source":"The following code shows a simple implementation of `IWorkerThreadClient::Execute`."},{"pos":[14390,14481],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_Utilities#136<ept id=\"p2\">](../../atl/codesnippet/cpp/iviewobjecteximpl-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_Utilities#136](../../atl/codesnippet/cpp/iviewobjecteximpl-class_2.cpp)]"},{"pos":[14490,14498],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CComControl Class<ept id=\"p1\">](../../atl/reference/ccomcontrol-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[14502,14564],"source":"[CComControl Class](../../atl/reference/ccomcontrol-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ActiveX Controls Interfaces<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms692724)</ept><ph id=\"ph1\"> </ph>","pos":[14567,14658],"source":" [ActiveX Controls Interfaces](http://msdn.microsoft.com/library/windows/desktop/ms692724) "},{"content":"<bpt id=\"p1\"> [</bpt>Tutorial<ept id=\"p1\">](../../atl/active-template-library-atl-tutorial.md)</ept><ph id=\"ph1\"> </ph>","pos":[14661,14724],"source":" [Tutorial](../../atl/active-template-library-atl-tutorial.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Creating an ATL Project<ept id=\"p1\">](../../atl/reference/creating-an-atl-project.md)</ept><ph id=\"ph1\"> </ph>","pos":[14727,14802],"source":" [Creating an ATL Project](../../atl/reference/creating-an-atl-project.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Class Overview<ept id=\"p1\">](../../atl/atl-class-overview.md)</ept>","pos":[14805,14855],"source":" [Class Overview](../../atl/atl-class-overview.md)"}],"content":"---\ntitle: \"IViewObjectExImpl Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::IViewObjectExImpl<T>\"\n  - \"ATL.IViewObjectExImpl\"\n  - \"ATL::IViewObjectExImpl\"\n  - \"ATL.IViewObjectExImpl<T>\"\n  - \"IViewObjectExImpl\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ActiveX controls [C++], drawing\"\n  - \"IViewObjectEx ATL implementation\"\n  - \"advise sinks\"\n  - \"IViewObjectExImpl class\"\nms.assetid: ad6de760-1ee5-4883-b033-ae57beffc369\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IViewObjectExImpl Class\nThis class implements **IUnknown** and provides default implementations of the [IViewObject](http://msdn.microsoft.com/library/windows/desktop/ms680763), [IViewObject2](http://msdn.microsoft.com/library/windows/desktop/ms691318), and [IViewObjectEx](http://msdn.microsoft.com/library/windows/desktop/ms682375) interfaces.  \n  \n> [!IMPORTANT]\n>  This class and its members cannot be used in applications that execute in the [!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)].  \n  \n## Syntax  \n  \n```\ntemplate<class T>  class ATL_NO_VTABLE IViewObjectExImpl :  public IViewObjectEx\n```  \n  \n#### Parameters  \n `T`  \n Your class, derived from `IViewObjectExImpl`.  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[IViewObjectExImpl::Draw](#iviewobjecteximpl__draw)|Draws a representation of the control onto a device context.|  \n|[IViewObjectExImpl::Freeze](#iviewobjecteximpl__freeze)|Freezes the drawn representation of a control so it won't change until an `Unfreeze`. The ATL implementation returns **E_NOTIMPL**.|  \n|[IViewObjectExImpl::GetAdvise](#iviewobjecteximpl__getadvise)|Retrieves an existing advisory sink connection on the control, if there is one.|  \n|[IViewObjectExImpl::GetColorSet](#iviewobjecteximpl__getcolorset)|Returns the logical palette used by the control for drawing. The ATL implementation returns **E_NOTIMPL**.|  \n|[IViewObjectExImpl::GetExtent](#iviewobjecteximpl__getextent)|Retrieves the control's display size in HIMETRIC units (0.01 millimeter per unit) from the control class data member [CComControlBase::m_sizeExtent](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_sizeextent).|  \n|[IViewObjectExImpl::GetNaturalExtent](#iviewobjecteximpl__getnaturalextent)|Provides sizing hints from the container for the object to use as the user resizes it.|  \n|[IViewObjectExImpl::GetRect](#iviewobjecteximpl__getrect)|Returns a rectangle describing a requested drawing aspect. The ATL implementation returns **E_NOTIMPL**.|  \n|[IViewObjectExImpl::GetViewStatus](#iviewobjecteximpl__getviewstatus)|Returns information about the opacity of the object and what drawing aspects are supported.|  \n|[IViewObjectExImpl::QueryHitPoint](#iviewobjecteximpl__queryhitpoint)|Checks if the specified point is in the specified rectangle and returns a [HITRESULT](http://msdn.microsoft.com/library/windows/desktop/ms682187) value in `pHitResult`.|  \n|[IViewObjectExImpl::QueryHitRect](#iviewobjecteximpl__queryhitrect)|Checks whether the control's display rectangle overlaps any point in the specified location rectangle and returns a **HITRESULT** value in `pHitResult`.|  \n|[IViewObjectExImpl::SetAdvise](#iviewobjecteximpl__setadvise)|Sets up a connection between the control and an advise sink so the sink can be notified about changes in the control's view.|  \n|[IViewObjectExImpl::Unfreeze](#iviewobjecteximpl__unfreeze)|Unfreezes the drawn representation of the control. The ATL implementation returns **E_NOTIMPL**.|  \n  \n## Remarks  \n The [IViewObject](http://msdn.microsoft.com/library/windows/desktop/ms680763), [IViewObject2](http://msdn.microsoft.com/library/windows/desktop/ms691318), and [IViewObjectEx](http://msdn.microsoft.com/library/windows/desktop/ms682375) interfaces enable a control to display itself directly, and to create and manage an advise sink to notify the container of changes in the control display. The **IViewObjectEx** interface provides support for extended control features such as flicker-free drawing, non-rectangular and transparent controls, and hit-testing (for example, how close a mouse click must be to be considered on the control). Class `IViewObjectExImpl` provides a default implementation of these interfaces and implements **IUnknown** by sending information to the dump device in debug builds.  \n  \n## Inheritance Hierarchy  \n `IViewObjectEx`  \n  \n `IViewObjectExImpl`  \n  \n## Requirements  \n **Header:** atlctl.h  \n  \n##  <a name=\"iviewobjecteximpl__draw\"></a>  IViewObjectExImpl::Draw  \n Draws a representation of the control onto a device context.  \n  \n```\nSTDMETHOD(Draw)(DWORD dwDrawAspect,\n    LONG lindex,\n    void* pvAspect,\n    DVTARGETDEVICE* ptd,\n    HDC hicTargetDev,\n    LPCRECTL prcBounds,\n    LPCRECTL prcWBounds,\n    BOOL(_stdcall* /* pfnContinue*/) (DWORD_PTR dwContinue),\n    DWORD_PTR /* dwContinue */);\n```  \n  \n### Remarks  \n This method calls **CComControl::OnDrawAdvanced** which in turn calls your control class's `OnDraw` method. An `OnDraw` method is automatically added to your control class when you create your control with the ATL Control Wizard. The Wizard's default `OnDraw` draws a rectangle with the label \"ATL 3.0\".  \n  \n See [IViewObject::Draw](http://msdn.microsoft.com/library/windows/desktop/ms688655) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"iviewobjecteximpl__freeze\"></a>  IViewObjectExImpl::Freeze  \n Freezes the drawn representation of a control so it won't change until an `Unfreeze`. The ATL implementation returns **E_NOTIMPL**.  \n  \n```\nSTDMETHOD(Freeze)(DWORD /* dwAspect */,\n    LONG /* lindex */,\n    void* /* pvAspect */,\n    DWORD* /* pdwFreeze */);\n```  \n  \n### Remarks  \n See [IViewObject::Freeze](http://msdn.microsoft.com/library/windows/desktop/ms688728) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"iviewobjecteximpl__getadvise\"></a>  IViewObjectExImpl::GetAdvise  \n Retrieves an existing advisory sink connection on the control, if there is one.  \n  \n```\nSTDMETHOD(GetAdvise)(\n    DWORD* /* pAspects */,\n    DWORD* /* pAdvf */,\n    IAdviseSink** /* ppAdvSink */);\n```  \n  \n### Remarks  \n The advisory sink is stored in the control class data member [CComControlBase::m_spAdviseSink](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_spadvisesink).  \n  \n See [IViewObject::GetAdvise](http://msdn.microsoft.com/library/windows/desktop/ms692772) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"iviewobjecteximpl__getcolorset\"></a>  IViewObjectExImpl::GetColorSet  \n Returns the logical palette used by the control for drawing. The ATL implementation returns **E_NOTIMPL**.  \n  \n```\nSTDMETHOD(GetColorSet)(DWORD /* dwAspect */,\n    LONG /* lindex */,\n    void* /* pvAspect */,\n    DVTARGETDEVICE* /* ptd */,\n    HDC /* hicTargetDevice */,\n    LOGPALETTE** /* ppColorSet */);\n```  \n  \n### Remarks  \n See [IViewObject::GetColorSet](http://msdn.microsoft.com/library/windows/desktop/ms686553) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"iviewobjecteximpl__getextent\"></a>  IViewObjectExImpl::GetExtent  \n Retrieves the control's display size in HIMETRIC units (0.01 millimeter per unit) from the control class data member [CComControlBase::m_sizeExtent](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_sizeextent).  \n  \n```\nSTDMETHOD(GetExtent)(DWORD /* dwDrawAspect */,\n    LONG /* lindex */,\n    DVTARGETDEVICE* /* ptd */,\n    LPSIZEL* lpsizel);\n```  \n  \n### Remarks  \n See [IViewObject2::GetExtent](http://msdn.microsoft.com/library/windows/desktop/ms684032) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"iviewobjecteximpl__getnaturalextent\"></a>  IViewObjectExImpl::GetNaturalExtent  \n Provides sizing hints from the container for the object to use as the user resizes it.  \n  \n```\nSTDMETHOD(GetNaturalExtent)(DWORD dwAspect,\n    LONG /* lindex */,\n    DVTARGETDEVICE* /* ptd */,\n    HDC /* hicTargetDevice */,\n    DVEXTENTINFO* pExtentInfo,\n    LPSIZEL psizel);\n```  \n  \n### Remarks  \n If `dwAspect` is `DVASPECT_CONTENT` and *pExtentInfo->dwExtentMode* is **DVEXTENT_CONTENT**, sets * `psizel` to the control class's data member [CComControlBase::m_sizeNatural](../../atl/reference/ccomcontrolbase-class.md#ccomcontrolbase__m_sizenatural). Otherwise, returns an error `HRESULT`.  \n  \n See [IViewObjectEx::GetNaturalExtent](http://msdn.microsoft.com/library/windows/desktop/ms683718) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"iviewobjecteximpl__getrect\"></a>  IViewObjectExImpl::GetRect  \n Returns a rectangle describing a requested drawing aspect. The ATL implementation returns **E_NOTIMPL**.  \n  \n```\nSTDMETHOD(GetRect)(DWORD /* dwAspect */,  LPRECTL /* pRect */);\n```  \n  \n### Remarks  \n See [IViewObjectEx::GetRect](http://msdn.microsoft.com/library/windows/desktop/ms695246) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"iviewobjecteximpl__getviewstatus\"></a>  IViewObjectExImpl::GetViewStatus  \n Returns information about the opacity of the object and what drawing aspects are supported.  \n  \n```\nSTDMETHOD(GetViewStatus)(DWORD* pdwStatus);\n```  \n  \n### Remarks  \n By default, ATL sets `pdwStatus` to indicate that the control supports **VIEWSTATUS_OPAQUE** (possible values are in the [VIEWSTATUS](http://msdn.microsoft.com/library/windows/desktop/ms687201) enumeration).  \n  \n See [IViewObjectEx::GetViewStatus](http://msdn.microsoft.com/library/windows/desktop/ms693371) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"iviewobjecteximpl__queryhitpoint\"></a>  IViewObjectExImpl::QueryHitPoint  \n Checks if the specified point is in the specified rectangle and returns a [HITRESULT](http://msdn.microsoft.com/library/windows/desktop/ms682187) value in `pHitResult`.  \n  \n```\nSTDMETHOD(QueryHitPoint)(DWORD dwAspect,\n    LPCRECT pRectBounds,\n    POINT ptlLoc,\n    LONG /* lCloseHit */,\n    DWORD* /* pHitResult */);\n```  \n  \n### Remarks  \n The value can be either **HITRESULT_HIT** or **HITRESULT_OUTSIDE**.  \n  \n If `dwAspect` equals [DVASPECT_CONTENT](http://msdn.microsoft.com/library/windows/desktop/ms690318), the method returns `S_OK`. Otherwise, the method returns **E_FAIL**.  \n  \n See [IViewObjectEx::QueryHitPoint](http://msdn.microsoft.com/library/windows/desktop/ms691209) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"iviewobjecteximpl__queryhitrect\"></a>  IViewObjectExImpl::QueryHitRect  \n Checks whether the control's display rectangle overlaps any point in the specified location rectangle and returns a [HITRESULT](http://msdn.microsoft.com/library/windows/desktop/ms682187) value in `pHitResult`.  \n  \n```\nSTDMETHOD(QueryHitRect)(DWORD dwAspect,\n    LPCRECT pRectBounds,\n    LPRECT prcLoc,\n    LONG /* lCloseHit */,\n    DWORD* /* pHitResult */);\n```  \n  \n### Remarks  \n The value can be either **HITRESULT_HIT** or **HITRESULT_OUTSIDE**.  \n  \n If `dwAspect` equals [DVASPECT_CONTENT](http://msdn.microsoft.com/library/windows/desktop/ms690318), the method returns `S_OK`. Otherwise, the method returns **E_FAIL**.  \n  \n See [IViewObjectEx::QueryHitRect](http://msdn.microsoft.com/library/windows/desktop/ms693797) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"iviewobjecteximpl__setadvise\"></a>  IViewObjectExImpl::SetAdvise  \n Sets up a connection between the control and an advise sink so the sink can be notified about changes in the control's view.  \n  \n```\nSTDMETHOD(SetAdvise)(DWORD /* aspects */,\n    DWORD /* advf */,\n    IAdviseSink* pAdvSink);\n```  \n  \n### Remarks  \n\n The pointer to the [IAdviseSink](http://msdn.microsoft.com/library/windows/desktop/ms692513) interface on the advise sink is stored in the control class data member [CComControlBase::m_spAdviseSink](ccomcontrolbase-class.md#ccomcontrolbase__m_spadvisesink).  \n\n  \n See [IViewObject::SetAdvise](http://msdn.microsoft.com/library/windows/desktop/ms683950) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"iviewobjecteximpl__unfreeze\"></a>  IViewObjectExImpl::Unfreeze  \n Unfreezes the drawn representation of the control. The ATL implementation returns **E_NOTIMPL**.  \n  \n```\nSTDMETHOD(Unfreeze)(DWORD /* dwFreeze */);\n```  \n  \n### Remarks  \n See [IViewObject::Unfreeze](http://msdn.microsoft.com/library/windows/desktop/ms686641) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"iworkerthreadclient__closehandle\"></a>  IWorkerThreadClient::CloseHandle  \n Implement this method to close the handle associated with this object.  \n  \n```\nHRESULT CloseHandle(HANDLE hHandle);\n```  \n  \n### Parameters  \n *hHandle*  \n The handle to be closed.  \n  \n### Return Value  \n Return S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n The handle passed to this method was previously associated with this object by a call to [CWorkerThread::AddHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle).  \n  \n### Example  \n The following code shows a simple implementation of `IWorkerThreadClient::CloseHandle`.  \n  \n [!code-cpp[NVC_ATL_Utilities#135](../../atl/codesnippet/cpp/iviewobjecteximpl-class_1.cpp)]  \n  \n##  <a name=\"iworkerthreadclient__execute\"></a>  IWorkerThreadClient::Execute  \n Implement this method to execute code when the handle associated with this object becomes signaled.  \n  \n```\nHRESULT Execute(DWORD_PTR dwParam,  HANDLE hObject);\n```  \n  \n### Parameters  \n `dwParam`  \n The user parameter.  \n  \n `hObject`  \n The handle that has become signaled.  \n  \n### Return Value  \n Return S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n The handle and DWORD/pointer passed to this method were previously associated with this object by a call to [CWorkerThread::AddHandle](../../atl/reference/cworkerthread-class.md#cworkerthread__addhandle).  \n  \n### Example  \n The following code shows a simple implementation of `IWorkerThreadClient::Execute`.  \n  \n [!code-cpp[NVC_ATL_Utilities#136](../../atl/codesnippet/cpp/iviewobjecteximpl-class_2.cpp)]  \n  \n## See Also  \n [CComControl Class](../../atl/reference/ccomcontrol-class.md)   \n [ActiveX Controls Interfaces](http://msdn.microsoft.com/library/windows/desktop/ms692724)   \n [Tutorial](../../atl/active-template-library-atl-tutorial.md)   \n [Creating an ATL Project](../../atl/reference/creating-an-atl-project.md)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}