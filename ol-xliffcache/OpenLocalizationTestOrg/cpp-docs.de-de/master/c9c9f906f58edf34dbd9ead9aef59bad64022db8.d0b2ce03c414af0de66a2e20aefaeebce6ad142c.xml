{"nodes":[{"pos":[12,45],"content":"IAtlMemMgr Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"IAtlMemMgr Class | Microsoft Docs","pos":[0,33]}]},{"content":"IAtlMemMgr Class","pos":[656,672]},{"content":"This class represents the interface to a memory manager.","pos":[673,729]},{"content":"Syntax","pos":[738,744]},{"content":"Members","pos":[846,853]},{"content":"Methods","pos":[863,870]},{"content":"Allocate","pos":[892,900]},{"content":"Call this method to allocate a block of memory.","pos":[925,972]},{"content":"Free","pos":[978,982]},{"content":"Call this method to free a block of memory.","pos":[1003,1046]},{"content":"GetSize","pos":[1052,1059]},{"content":"Call this method to retrieve the size of an allocated memory block.","pos":[1083,1150]},{"content":"Reallocate","pos":[1156,1166]},{"content":"Call this method to reallocate a block of memory.","pos":[1193,1242]},{"content":"Remarks","pos":[1252,1259]},{"pos":[1263,1567],"content":"This interface is implemented by <bpt id=\"p1\">[</bpt>CComHeap<ept id=\"p1\">](../../atl/reference/ccomheap-class.md)</ept>, <bpt id=\"p2\">[</bpt>CCRTHeap<ept id=\"p2\">](../../atl/reference/ccrtheap-class.md)</ept>, <bpt id=\"p3\">[</bpt>CLocalHeap<ept id=\"p3\">](../../atl/reference/clocalheap-class.md)</ept>, <bpt id=\"p4\">[</bpt>CGlobalHeap<ept id=\"p4\">](../../atl/reference/cglobalheap-class.md)</ept>, or <bpt id=\"p5\">[</bpt>CWin32Heap<ept id=\"p5\">](../../atl/reference/cwin32heap-class.md)</ept>.","source":"This interface is implemented by [CComHeap](../../atl/reference/ccomheap-class.md), [CCRTHeap](../../atl/reference/ccrtheap-class.md), [CLocalHeap](../../atl/reference/clocalheap-class.md), [CGlobalHeap](../../atl/reference/cglobalheap-class.md), or [CWin32Heap](../../atl/reference/cwin32heap-class.md)."},{"pos":[1575,1918],"content":"[!NOTE]\n The local and global heap functions are slower than other memory management functions, and do not provide as many features. Therefore, new applications should use the [heap functions](http://msdn.microsoft.com/library/windows/desktop/aa366711). These are available in the [CWin32Heap](../../atl/reference/cwin32heap-class.md) class.","leadings":["","> "],"nodes":[{"content":" The local and global heap functions are slower than other memory management functions, and do not provide as many features. Therefore, new applications should use the [heap functions](http://msdn.microsoft.com/library/windows/desktop/aa366711). These are available in the [CWin32Heap](../../atl/reference/cwin32heap-class.md) class.","pos":[8,341],"nodes":[{"content":"The local and global heap functions are slower than other memory management functions, and do not provide as many features.","pos":[1,124]},{"content":"Therefore, new applications should use the <bpt id=\"p1\">[</bpt>heap functions<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa366711)</ept>.","pos":[125,245],"source":" Therefore, new applications should use the [heap functions](http://msdn.microsoft.com/library/windows/desktop/aa366711)."},{"content":"These are available in the <bpt id=\"p1\">[</bpt>CWin32Heap<ept id=\"p1\">](../../atl/reference/cwin32heap-class.md)</ept> class.","pos":[246,333],"source":" These are available in the [CWin32Heap](../../atl/reference/cwin32heap-class.md) class."}]}]},{"content":"Example","pos":[1927,1934]},{"pos":[1949,1969],"content":"NVC_ATL_Utilities#94"},{"content":"Requirements","pos":[2030,2042]},{"pos":[2046,2066],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlmem.h","source":"**Header:** atlmem.h"},{"pos":[2113,2133],"content":"IAtlMemMgr::Allocate"},{"content":"Call this method to allocate a block of memory.","pos":[2137,2184]},{"content":"Parameters","pos":[2246,2256]},{"content":"The requested number of bytes in the new memory block.","pos":[2272,2326]},{"content":"Return Value","pos":[2336,2348]},{"content":"Returns a pointer to the start of the newly allocated memory block.","pos":[2352,2419]},{"content":"Remarks","pos":[2429,2436]},{"pos":[2440,2580],"content":"Call <bpt id=\"p1\">[</bpt>IAtlMemMgr::Free<ept id=\"p1\">](#iatlmemmgr__free)</ept> or <bpt id=\"p2\">[</bpt>IAtlMemMgr::Reallocate<ept id=\"p2\">](#iatlmemmgr__reallocate)</ept> to free the memory allocated by this method.","source":"Call [IAtlMemMgr::Free](#iatlmemmgr__free) or [IAtlMemMgr::Reallocate](#iatlmemmgr__reallocate) to free the memory allocated by this method."},{"content":"Example","pos":[2590,2597]},{"pos":[2601,2688],"content":"For an example, see the <bpt id=\"p1\">[</bpt>IAtlMemMgr Overview<ept id=\"p1\">](../../atl/reference/iatlmemmgr-class.md)</ept>.","source":"For an example, see the [IAtlMemMgr Overview](../../atl/reference/iatlmemmgr-class.md)."},{"pos":[2731,2747],"content":"IAtlMemMgr::Free"},{"content":"Call this method to free a block of memory.","pos":[2751,2794]},{"content":"Parameters","pos":[2845,2855]},{"content":"Pointer to memory previously allocated by this memory manager.","pos":[2866,2928]},{"content":"Remarks","pos":[2938,2945]},{"pos":[2949,3091],"content":"Use this method to free memory obtained by <bpt id=\"p1\">[</bpt>IAtlMemMgr::Allocate<ept id=\"p1\">](#iatlmemmgr__allocate)</ept> or <bpt id=\"p2\">[</bpt>IAtlMemMgr::Reallocate<ept id=\"p2\">](#iatlmemmgr__reallocate)</ept>.","source":"Use this method to free memory obtained by [IAtlMemMgr::Allocate](#iatlmemmgr__allocate) or [IAtlMemMgr::Reallocate](#iatlmemmgr__reallocate)."},{"content":"Example","pos":[3101,3108]},{"pos":[3112,3199],"content":"For an example, see the <bpt id=\"p1\">[</bpt>IAtlMemMgr Overview<ept id=\"p1\">](../../atl/reference/iatlmemmgr-class.md)</ept>.","source":"For an example, see the [IAtlMemMgr Overview](../../atl/reference/iatlmemmgr-class.md)."},{"pos":[3245,3264],"content":"IAtlMemMgr::GetSize"},{"content":"Call this method to retrieve the size of an allocated memory block.","pos":[3268,3335]},{"content":"Parameters","pos":[3391,3401]},{"content":"Pointer to memory previously allocated by this memory manager.","pos":[3412,3474]},{"content":"Return Value","pos":[3484,3496]},{"content":"Returns the size of the memory block in bytes.","pos":[3500,3546]},{"content":"Example","pos":[3556,3563]},{"pos":[3567,3654],"content":"For an example, see the <bpt id=\"p1\">[</bpt>IAtlMemMgr Overview<ept id=\"p1\">](../../atl/reference/iatlmemmgr-class.md)</ept>.","source":"For an example, see the [IAtlMemMgr Overview](../../atl/reference/iatlmemmgr-class.md)."},{"pos":[3703,3725],"content":"IAtlMemMgr::Reallocate"},{"content":"Call this method to reallocate memory allocated by this memory manager.","pos":[3729,3800]},{"content":"Parameters","pos":[3879,3889]},{"content":"Pointer to memory previously allocated by this memory manager.","pos":[3900,3962]},{"content":"The requested number of bytes in the new memory block.","pos":[3981,4035]},{"content":"Return Value","pos":[4045,4057]},{"content":"Returns a pointer to the start of the newly allocated memory block.","pos":[4061,4128]},{"content":"Remarks","pos":[4138,4145]},{"pos":[4149,4289],"content":"Call <bpt id=\"p1\">[</bpt>IAtlMemMgr::Free<ept id=\"p1\">](#iatlmemmgr__free)</ept> or <bpt id=\"p2\">[</bpt>IAtlMemMgr::Reallocate<ept id=\"p2\">](#iatlmemmgr__reallocate)</ept> to free the memory allocated by this method.","source":"Call [IAtlMemMgr::Free](#iatlmemmgr__free) or [IAtlMemMgr::Reallocate](#iatlmemmgr__reallocate) to free the memory allocated by this method."},{"content":"Conceptually this method frees the existing memory and allocates a new memory block.","pos":[4296,4380]},{"content":"In reality, the existing memory may be extended or otherwise reused.","pos":[4381,4449]},{"content":"Example","pos":[4459,4466]},{"pos":[4470,4557],"content":"For an example, see the <bpt id=\"p1\">[</bpt>IAtlMemMgr Overview<ept id=\"p1\">](../../atl/reference/iatlmemmgr-class.md)</ept>.","source":"For an example, see the [IAtlMemMgr Overview](../../atl/reference/iatlmemmgr-class.md)."},{"pos":[4627,4670],"content":"IAxWinAmbientDispatch::get_AllowContextMenu"},{"pos":[4674,4788],"content":"The <bpt id=\"p1\">**</bpt>AllowContextMenu<ept id=\"p1\">**</ept> property specifies whether the hosted control is allowed to display its own context menu.","source":"The **AllowContextMenu** property specifies whether the hosted control is allowed to display its own context menu."},{"content":"Parameters","pos":[4878,4888]},{"content":"pbAllowContextMenu","pos":[4893,4911]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[4916,4994]},{"content":"Return Value","pos":[5004,5016]},{"pos":[5020,5047],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[5057,5064]},{"pos":[5068,5161],"content":"The ATL host object implementation uses <ph id=\"ph1\">`VARIANT_TRUE`</ph> as the default value of this property.","source":"The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property."},{"pos":[5226,5264],"content":"IAxWinAmbientDispatch::get_AllowShowUI"},{"pos":[5268,5379],"content":"The <bpt id=\"p1\">**</bpt>AllowShowUI<ept id=\"p1\">**</ept> property specifies whether the hosted control is allowed to display its own user interface.","source":"The **AllowShowUI** property specifies whether the hosted control is allowed to display its own user interface."},{"content":"Parameters","pos":[5459,5469]},{"content":"pbAllowShowUI","pos":[5474,5487]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[5492,5570]},{"content":"Return Value","pos":[5580,5592]},{"pos":[5596,5623],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[5633,5640]},{"pos":[5644,5740],"content":"The ATL host object implementation uses <bpt id=\"p1\">**</bpt>VARIANT_FALSE<ept id=\"p1\">**</ept> as the default value of this property.","source":"The ATL host object implementation uses **VARIANT_FALSE** as the default value of this property."},{"pos":[5819,5871],"content":"IAxWinAmbientDispatch::get_AllowWindowlessActivation"},{"pos":[5875,5983],"content":"The <bpt id=\"p1\">**</bpt>AllowWindowlessActivation<ept id=\"p1\">**</ept> property specifies whether the container will allow windowless activation.","source":"The **AllowWindowlessActivation** property specifies whether the container will allow windowless activation."},{"content":"Parameters","pos":[6081,6091]},{"content":"pbAllowWindowless","pos":[6096,6113]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[6118,6196]},{"content":"Return Value","pos":[6206,6218]},{"pos":[6222,6249],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[6259,6266]},{"pos":[6270,6363],"content":"The ATL host object implementation uses <ph id=\"ph1\">`VARIANT_TRUE`</ph> as the default value of this property.","source":"The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property."},{"pos":[6426,6462],"content":"IAxWinAmbientDispatch::get_BackColor"},{"pos":[6466,6547],"content":"The <ph id=\"ph1\">`BackColor`</ph> property specifies the ambient background color of the container.","source":"The `BackColor` property specifies the ambient background color of the container."},{"content":"Parameters","pos":[6623,6633]},{"content":"pclrBackground","pos":[6638,6652]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[6657,6735]},{"content":"Return Value","pos":[6745,6757]},{"pos":[6761,6788],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[6798,6805]},{"pos":[6809,6997],"content":"The ATL host object implementation uses <bpt id=\"p1\">**</bpt>COLOR_BTNFACE<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>COLOR_WINDOW<ept id=\"p2\">**</ept> as the default value of this property (depending on whether the parent of the host window is a dialog or not).","source":"The ATL host object implementation uses **COLOR_BTNFACE** or **COLOR_WINDOW** as the default value of this property (depending on whether the parent of the host window is a dialog or not)."},{"pos":[7067,7110],"content":"IAxWinAmbientDispatch::get_DisplayAsDefault"},{"pos":[7114,7221],"content":"<bpt id=\"p1\">**</bpt>DisplayAsDefault<ept id=\"p1\">**</ept> is an ambient property that allows a control to find out if it is the default control.","source":"**DisplayAsDefault** is an ambient property that allows a control to find out if it is the default control."},{"content":"Parameters","pos":[7311,7321]},{"content":"pbDisplayAsDefault","pos":[7326,7344]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[7349,7427]},{"content":"Return Value","pos":[7437,7449]},{"pos":[7453,7480],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[7490,7497]},{"pos":[7501,7597],"content":"The ATL host object implementation uses <bpt id=\"p1\">**</bpt>VARIANT_FALSE<ept id=\"p1\">**</ept> as the default value of this property.","source":"The ATL host object implementation uses **VARIANT_FALSE** as the default value of this property."},{"pos":[7674,7724],"content":"IAxWinAmbientDispatch::get_DocHostDoubleClickFlags"},{"pos":[7728,7846],"content":"The <bpt id=\"p1\">**</bpt>DocHostDoubleClickFlags<ept id=\"p1\">**</ept> property specifies the operation that should take place in response to a double-click.","source":"The **DocHostDoubleClickFlags** property specifies the operation that should take place in response to a double-click."},{"content":"Parameters","pos":[7944,7954]},{"content":"pdwDocHostDoubleClickFlags","pos":[7959,7985]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[7990,8068]},{"content":"Return Value","pos":[8078,8090]},{"pos":[8094,8121],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[8131,8138]},{"pos":[8142,8248],"content":"The ATL host object implementation uses <bpt id=\"p1\">**</bpt>DOCHOSTUIDBLCLK_DEFAULT<ept id=\"p1\">**</ept> as the default value of this property.","source":"The ATL host object implementation uses **DOCHOSTUIDBLCLK_DEFAULT** as the default value of this property."},{"pos":[8314,8353],"content":"IAxWinAmbientDispatch::get_DocHostFlags"},{"pos":[8357,8448],"content":"The <bpt id=\"p1\">**</bpt>DocHostFlags<ept id=\"p1\">**</ept> property specifies the user interface capabilities of the host object.","source":"The **DocHostFlags** property specifies the user interface capabilities of the host object."},{"content":"Parameters","pos":[8524,8534]},{"content":"pdwDocHostFlags","pos":[8539,8554]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[8559,8637]},{"content":"Return Value","pos":[8647,8659]},{"pos":[8663,8690],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[8700,8707]},{"pos":[8711,8818],"content":"The ATL host object implementation uses <bpt id=\"p1\">**</bpt>DOCHOSTUIFLAG_NO3DBORDER<ept id=\"p1\">**</ept> as the default value of this property.","source":"The ATL host object implementation uses **DOCHOSTUIFLAG_NO3DBORDER** as the default value of this property."},{"pos":[8876,8907],"content":"IAxWinAmbientDispatch::get_Font"},{"pos":[8911,8977],"content":"The <bpt id=\"p1\">**</bpt>Font<ept id=\"p1\">**</ept> property specifies the ambient font of the container.","source":"The **Font** property specifies the ambient font of the container."},{"content":"Parameters","pos":[9040,9050]},{"content":"[out] The address of an <bpt id=\"p1\">**</bpt>IFontDisp<ept id=\"p1\">**</ept> interface pointer used to receive the current value of this property.","pos":[9065,9172],"source":" [out] The address of an **IFontDisp** interface pointer used to receive the current value of this property."},{"content":"Return Value","pos":[9182,9194]},{"pos":[9198,9225],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[9235,9242]},{"content":"The ATL host object implementation uses the default GUI font or the system font as the default value of this property.","pos":[9246,9364]},{"pos":[9427,9463],"content":"IAxWinAmbientDispatch::get_ForeColor"},{"pos":[9467,9548],"content":"The <ph id=\"ph1\">`ForeColor`</ph> property specifies the ambient foreground color of the container.","source":"The `ForeColor` property specifies the ambient foreground color of the container."},{"content":"Parameters","pos":[9624,9634]},{"content":"pclrForeground","pos":[9639,9653]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[9658,9736]},{"content":"Return Value","pos":[9746,9758]},{"pos":[9762,9789],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[9799,9806]},{"content":"The ATL host object implementation uses the system window text color as the default value of this property.","pos":[9810,9917]},{"pos":[9979,10014],"content":"IAxWinAmbientDispatch::get_LocaleID"},{"pos":[10018,10093],"content":"The <bpt id=\"p1\">**</bpt>LocaleID<ept id=\"p1\">**</ept> property specifies the ambient locale ID of the container.","source":"The **LocaleID** property specifies the ambient locale ID of the container."},{"content":"Parameters","pos":[10162,10172]},{"content":"plcidLocaleID","pos":[10177,10190]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[10195,10273]},{"content":"Return Value","pos":[10283,10295]},{"pos":[10299,10326],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[10336,10343]},{"content":"The ATL host object implementation uses the user's default locale as the default value of this property.","pos":[10347,10451]},{"content":"With this method you can discover the Ambient LocalID, that is, the LocaleID of the program your control is being used in.","pos":[10458,10580]},{"content":"Once you know the LocaleID, you can call code to load locale-specific captions, error message text, and so forth from a resource file or satellite DLL.","pos":[10581,10732]},{"pos":[10800,10841],"content":"IAxWinAmbientDispatch::get_MessageReflect"},{"pos":[10845,10961],"content":"The <bpt id=\"p1\">**</bpt>MessageReflect<ept id=\"p1\">**</ept> ambient property specifies whether the container will reflect messages to the hosted control.","source":"The **MessageReflect** ambient property specifies whether the container will reflect messages to the hosted control."},{"content":"Parameters","pos":[11047,11057]},{"content":"pbMessageReflect","pos":[11062,11078]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[11083,11161]},{"content":"Return Value","pos":[11171,11183]},{"pos":[11187,11214],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[11224,11231]},{"pos":[11235,11328],"content":"The ATL host object implementation uses <ph id=\"ph1\">`VARIANT_TRUE`</ph> as the default value of this property.","source":"The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property."},{"pos":[11395,11435],"content":"IAxWinAmbientDispatch::get_OptionKeyPath"},{"pos":[11439,11519],"content":"The <bpt id=\"p1\">**</bpt>OptionKeyPath<ept id=\"p1\">**</ept> property specifies the registry key path to user settings.","source":"The **OptionKeyPath** property specifies the registry key path to user settings."},{"content":"Parameters","pos":[11598,11608]},{"content":"pbstrOptionKeyPath","pos":[11613,11631]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[11636,11714]},{"content":"Return Value","pos":[11724,11736]},{"pos":[11740,11767],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[11836,11878],"content":"IAxWinAmbientDispatch::get_ShowGrabHandles"},{"pos":[11882,11997],"content":"The <bpt id=\"p1\">**</bpt>ShowGrabHandles<ept id=\"p1\">**</ept> ambient property allows the control to find out if it should draw itself with grab handles.","source":"The **ShowGrabHandles** ambient property allows the control to find out if it should draw itself with grab handles."},{"content":"Parameters","pos":[12085,12095]},{"content":"pbShowGrabHandles","pos":[12100,12117]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[12122,12200]},{"content":"Return Value","pos":[12210,12222]},{"pos":[12226,12253],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[12263,12270]},{"pos":[12274,12372],"content":"The ATL host object implementation always returns <bpt id=\"p1\">**</bpt>VARIANT_FALSE<ept id=\"p1\">**</ept> as the value of this property.","source":"The ATL host object implementation always returns **VARIANT_FALSE** as the value of this property."},{"pos":[12438,12477],"content":"IAxWinAmbientDispatch::get_ShowHatching"},{"pos":[12481,12583],"content":"The <bpt id=\"p1\">**</bpt>ShowHatching<ept id=\"p1\">**</ept> ambient property allows the control to find out if it should draw itself hatched.","source":"The **ShowHatching** ambient property allows the control to find out if it should draw itself hatched."},{"content":"Parameters","pos":[12665,12675]},{"content":"pbShowHatching","pos":[12680,12694]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[12699,12777]},{"content":"Return Value","pos":[12787,12799]},{"pos":[12803,12830],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[12840,12847]},{"pos":[12851,12949],"content":"The ATL host object implementation always returns <bpt id=\"p1\">**</bpt>VARIANT_FALSE<ept id=\"p1\">**</ept> as the value of this property.","source":"The ATL host object implementation always returns **VARIANT_FALSE** as the value of this property."},{"pos":[13011,13046],"content":"IAxWinAmbientDispatch::get_UserMode"},{"pos":[13050,13125],"content":"The <bpt id=\"p1\">**</bpt>UserMode<ept id=\"p1\">**</ept> property specifies the ambient user mode of the container.","source":"The **UserMode** property specifies the ambient user mode of the container."},{"content":"Parameters","pos":[13199,13209]},{"content":"pbUserMode","pos":[13214,13224]},{"content":"[out] The address of a variable to receive the current value of this property.","pos":[13229,13307]},{"content":"Return Value","pos":[13317,13329]},{"pos":[13333,13360],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[13370,13377]},{"pos":[13381,13474],"content":"The ATL host object implementation uses <ph id=\"ph1\">`VARIANT_TRUE`</ph> as the default value of this property.","source":"The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property."},{"pos":[13544,13587],"content":"IAxWinAmbientDispatch::put_AllowContextMenu"},{"pos":[13591,13705],"content":"The <bpt id=\"p1\">**</bpt>AllowContextMenu<ept id=\"p1\">**</ept> property specifies whether the hosted control is allowed to display its own context menu.","source":"The **AllowContextMenu** property specifies whether the hosted control is allowed to display its own context menu."},{"content":"Parameters","pos":[13793,13803]},{"content":"bAllowContextMenu","pos":[13808,13825]},{"content":"[in] The new value of this property.","pos":[13830,13866]},{"content":"Return Value","pos":[13876,13888]},{"pos":[13892,13919],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[13929,13936]},{"pos":[13940,14033],"content":"The ATL host object implementation uses <ph id=\"ph1\">`VARIANT_TRUE`</ph> as the default value of this property.","source":"The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property."},{"pos":[14098,14136],"content":"IAxWinAmbientDispatch::put_AllowShowUI"},{"pos":[14140,14251],"content":"The <bpt id=\"p1\">**</bpt>AllowShowUI<ept id=\"p1\">**</ept> property specifies whether the hosted control is allowed to display its own user interface.","source":"The **AllowShowUI** property specifies whether the hosted control is allowed to display its own user interface."},{"content":"Parameters","pos":[14329,14339]},{"content":"bAllowShowUI","pos":[14344,14356]},{"content":"[in] The new value of this property.","pos":[14361,14397]},{"content":"Return Value","pos":[14407,14419]},{"pos":[14423,14450],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[14460,14467]},{"pos":[14471,14567],"content":"The ATL host object implementation uses <bpt id=\"p1\">**</bpt>VARIANT_FALSE<ept id=\"p1\">**</ept> as the default value of this property.","source":"The ATL host object implementation uses **VARIANT_FALSE** as the default value of this property."},{"pos":[14646,14698],"content":"IAxWinAmbientDispatch::put_AllowWindowlessActivation"},{"pos":[14702,14810],"content":"The <bpt id=\"p1\">**</bpt>AllowWindowlessActivation<ept id=\"p1\">**</ept> property specifies whether the container will allow windowless activation.","source":"The **AllowWindowlessActivation** property specifies whether the container will allow windowless activation."},{"content":"Parameters","pos":[14906,14916]},{"content":"bAllowWindowless","pos":[14921,14937]},{"content":"[in] The new value of this property.","pos":[14942,14978]},{"content":"Return Value","pos":[14988,15000]},{"pos":[15004,15031],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[15041,15048]},{"pos":[15052,15145],"content":"The ATL host object implementation uses <ph id=\"ph1\">`VARIANT_TRUE`</ph> as the default value of this property.","source":"The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property."},{"pos":[15208,15244],"content":"IAxWinAmbientDispatch::put_BackColor"},{"pos":[15248,15329],"content":"The <ph id=\"ph1\">`BackColor`</ph> property specifies the ambient background color of the container.","source":"The `BackColor` property specifies the ambient background color of the container."},{"content":"Parameters","pos":[15403,15413]},{"content":"clrBackground","pos":[15418,15431]},{"content":"[in] The new value of this property.","pos":[15436,15472]},{"content":"Return Value","pos":[15482,15494]},{"pos":[15498,15525],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[15535,15542]},{"pos":[15546,15734],"content":"The ATL host object implementation uses <bpt id=\"p1\">**</bpt>COLOR_BTNFACE<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>COLOR_WINDOW<ept id=\"p2\">**</ept> as the default value of this property (depending on whether the parent of the host window is a dialog or not).","source":"The ATL host object implementation uses **COLOR_BTNFACE** or **COLOR_WINDOW** as the default value of this property (depending on whether the parent of the host window is a dialog or not)."},{"pos":[15804,15847],"content":"IAxWinAmbientDispatch::put_DisplayAsDefault"},{"pos":[15851,15958],"content":"<bpt id=\"p1\">**</bpt>DisplayAsDefault<ept id=\"p1\">**</ept> is an ambient property that allows a control to find out if it is the default control.","source":"**DisplayAsDefault** is an ambient property that allows a control to find out if it is the default control."},{"content":"Parameters","pos":[16046,16056]},{"content":"[in] The new value of this property.","pos":[16083,16119]},{"content":"Return Value","pos":[16129,16141]},{"pos":[16145,16172],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[16182,16189]},{"pos":[16193,16289],"content":"The ATL host object implementation uses <bpt id=\"p1\">**</bpt>VARIANT_FALSE<ept id=\"p1\">**</ept> as the default value of this property.","source":"The ATL host object implementation uses **VARIANT_FALSE** as the default value of this property."},{"pos":[16366,16416],"content":"IAxWinAmbientDispatch::put_DocHostDoubleClickFlags"},{"pos":[16420,16538],"content":"The <bpt id=\"p1\">**</bpt>DocHostDoubleClickFlags<ept id=\"p1\">**</ept> property specifies the operation that should take place in response to a double-click.","source":"The **DocHostDoubleClickFlags** property specifies the operation that should take place in response to a double-click."},{"content":"Parameters","pos":[16634,16644]},{"content":"dwDocHostDoubleClickFlags","pos":[16649,16674]},{"content":"[in] The new value of this property.","pos":[16679,16715]},{"content":"Return Value","pos":[16725,16737]},{"pos":[16741,16768],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[16778,16785]},{"pos":[16789,16895],"content":"The ATL host object implementation uses <bpt id=\"p1\">**</bpt>DOCHOSTUIDBLCLK_DEFAULT<ept id=\"p1\">**</ept> as the default value of this property.","source":"The ATL host object implementation uses **DOCHOSTUIDBLCLK_DEFAULT** as the default value of this property."},{"pos":[16961,17000],"content":"IAxWinAmbientDispatch::put_DocHostFlags"},{"pos":[17004,17095],"content":"The <bpt id=\"p1\">**</bpt>DocHostFlags<ept id=\"p1\">**</ept> property specifies the user interface capabilities of the host object.","source":"The **DocHostFlags** property specifies the user interface capabilities of the host object."},{"content":"Parameters","pos":[17169,17179]},{"content":"dwDocHostFlags","pos":[17184,17198]},{"content":"[in] The new value of this property.","pos":[17203,17239]},{"content":"Return Value","pos":[17249,17261]},{"pos":[17265,17292],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[17302,17309]},{"pos":[17313,17420],"content":"The ATL host object implementation uses <bpt id=\"p1\">**</bpt>DOCHOSTUIFLAG_NO3DBORDER<ept id=\"p1\">**</ept> as the default value of this property.","source":"The ATL host object implementation uses **DOCHOSTUIFLAG_NO3DBORDER** as the default value of this property."},{"pos":[17478,17509],"content":"IAxWinAmbientDispatch::put_Font"},{"pos":[17513,17579],"content":"The <bpt id=\"p1\">**</bpt>Font<ept id=\"p1\">**</ept> property specifies the ambient font of the container.","source":"The **Font** property specifies the ambient font of the container."},{"content":"Parameters","pos":[17641,17651]},{"content":"[in] The new value of this property.","pos":[17666,17702]},{"content":"Return Value","pos":[17712,17724]},{"pos":[17728,17755],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[17765,17772]},{"content":"The ATL host object implementation uses the default GUI font or the system font as the default value of this property.","pos":[17776,17894]},{"pos":[17957,17993],"content":"IAxWinAmbientDispatch::put_ForeColor"},{"pos":[17997,18078],"content":"The <ph id=\"ph1\">`ForeColor`</ph> property specifies the ambient foreground color of the container.","source":"The `ForeColor` property specifies the ambient foreground color of the container."},{"content":"Parameters","pos":[18152,18162]},{"content":"clrForeground","pos":[18167,18180]},{"content":"[in] The new value of this property.","pos":[18185,18221]},{"content":"Return Value","pos":[18231,18243]},{"pos":[18247,18274],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[18284,18291]},{"content":"The ATL host object implementation uses the system window text color as the default value of this property.","pos":[18295,18402]},{"pos":[18464,18499],"content":"IAxWinAmbientDispatch::put_LocaleID"},{"pos":[18503,18578],"content":"The <bpt id=\"p1\">**</bpt>LocaleID<ept id=\"p1\">**</ept> property specifies the ambient locale ID of the container.","source":"The **LocaleID** property specifies the ambient locale ID of the container."},{"content":"Parameters","pos":[18645,18655]},{"content":"lcidLocaleID","pos":[18660,18672]},{"content":"[in] The new value of this property.","pos":[18677,18713]},{"content":"Return Value","pos":[18723,18735]},{"pos":[18739,18766],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[18776,18783]},{"content":"The ATL host object implementation uses the user's default locale as the default value of this property.","pos":[18787,18891]},{"pos":[18959,19000],"content":"IAxWinAmbientDispatch::put_MessageReflect"},{"pos":[19004,19120],"content":"The <bpt id=\"p1\">**</bpt>MessageReflect<ept id=\"p1\">**</ept> ambient property specifies whether the container will reflect messages to the hosted control.","source":"The **MessageReflect** ambient property specifies whether the container will reflect messages to the hosted control."},{"content":"Parameters","pos":[19204,19214]},{"content":"[in] The new value of this property.","pos":[19239,19275]},{"content":"Return Value","pos":[19285,19297]},{"pos":[19301,19328],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[19338,19345]},{"pos":[19349,19442],"content":"The ATL host object implementation uses <ph id=\"ph1\">`VARIANT_TRUE`</ph> as the default value of this property.","source":"The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property."},{"pos":[19509,19549],"content":"IAxWinAmbientDispatch::put_OptionKeyPath"},{"pos":[19553,19633],"content":"The <bpt id=\"p1\">**</bpt>OptionKeyPath<ept id=\"p1\">**</ept> property specifies the registry key path to user settings.","source":"The **OptionKeyPath** property specifies the registry key path to user settings."},{"content":"Parameters","pos":[19710,19720]},{"content":"bstrOptionKeyPath","pos":[19725,19742]},{"content":"[in] The new value of this property.","pos":[19747,19783]},{"content":"Return Value","pos":[19793,19805]},{"pos":[19809,19836],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[19898,19933],"content":"IAxWinAmbientDispatch::put_UserMode"},{"pos":[19937,20012],"content":"The <bpt id=\"p1\">**</bpt>UserMode<ept id=\"p1\">**</ept> property specifies the ambient user mode of the container.","source":"The **UserMode** property specifies the ambient user mode of the container."},{"content":"Parameters","pos":[20084,20094]},{"content":"[in] The new value of this property.","pos":[20113,20149]},{"content":"Return Value","pos":[20159,20171]},{"pos":[20175,20202],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[20212,20219]},{"pos":[20223,20316],"content":"The ATL host object implementation uses <ph id=\"ph1\">`VARIANT_TRUE`</ph> as the default value of this property.","source":"The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property."},{"pos":[20386,20429],"content":"IAxWinAmbientDispatchEx::SetAmbientDispatch"},{"content":"This method is called to supplement the default ambient property interface with a user-defined interface.","pos":[20433,20538]},{"content":"Parameters","pos":[20641,20651]},{"content":"pDispatch","pos":[20656,20665]},{"content":"Pointer to the new interface.","pos":[20670,20699]},{"content":"Return Value","pos":[20709,20721]},{"content":"Returns S_OK on success, or an error HRESULT on failure.","pos":[20725,20781]},{"content":"Remarks","pos":[20791,20798]},{"pos":[20802,21103],"content":"When <ph id=\"ph1\">`SetAmbientDispatch`</ph> is called with a pointer to a new interface, this new interface will be used to invoke any properties or methods asked for by the hosted control — if those properties are not already provided by <bpt id=\"p1\">[</bpt>IAxWinAmbientDispatch<ept id=\"p1\">](../../atl/reference/iaxwinambientdispatch-interface.md)</ept>.","source":"When `SetAmbientDispatch` is called with a pointer to a new interface, this new interface will be used to invoke any properties or methods asked for by the hosted control — if those properties are not already provided by [IAxWinAmbientDispatch](../../atl/reference/iaxwinambientdispatch-interface.md)."},{"pos":[21161,21192],"content":"IAxWinHostWindow::AttachControl"},{"pos":[21196,21311],"content":"Attaches an existing (and previously initialized) control to the host object using the window identified by <ph id=\"ph1\">`hWnd`</ph>.","source":"Attaches an existing (and previously initialized) control to the host object using the window identified by `hWnd`."},{"content":"Parameters","pos":[21400,21410]},{"content":"pUnkControl","pos":[21415,21426]},{"content":"[in] A pointer to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> interface of the control to be attached to the host object.","pos":[21431,21525],"source":" [in] A pointer to the **IUnknown** interface of the control to be attached to the host object."},{"content":"[in] A handle to the window to be used for hosting.","pos":[21542,21593]},{"content":"Return Value","pos":[21603,21615]},{"pos":[21619,21646],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[21704,21735],"content":"IAxWinHostWindow::CreateControl"},{"pos":[21739,21822],"content":"Creates a control, initializes it, and hosts it in the window identified by <ph id=\"ph1\">`hWnd`</ph>.","source":"Creates a control, initializes it, and hosts it in the window identified by `hWnd`."},{"content":"Parameters","pos":[21931,21941]},{"content":"[in] A string identifying the control to create.","pos":[21962,22010]},{"content":"Can be a CLSID (must include the braces), ProgID, URL, or raw HTML (prefixed by <bpt id=\"p1\">**</bpt>MSHTML:<ept id=\"p1\">**</ept>).","pos":[22011,22104],"source":" Can be a CLSID (must include the braces), ProgID, URL, or raw HTML (prefixed by **MSHTML:**)."},{"content":"[in] A handle to the window to be used for hosting.","pos":[22121,22172]},{"content":"[in] An interface pointer for a stream containing initialization data for the control.","pos":[22192,22278]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[22279,22295],"source":" Can be **NULL**."},{"content":"Return Value","pos":[22305,22317]},{"pos":[22321,22348],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[22358,22365]},{"content":"This window will be subclassed by the host object exposing this interface so that messages can be reflected to the control and other container features will work.","pos":[22369,22531]},{"pos":[22538,22655],"content":"Calling this method is equivalent to calling <bpt id=\"p1\">[</bpt>IAxWinHostWindow::CreateControlEx<ept id=\"p1\">](#iaxwinhostwindow__createcontrolex)</ept>.","source":"Calling this method is equivalent to calling [IAxWinHostWindow::CreateControlEx](#iaxwinhostwindow__createcontrolex)."},{"pos":[22662,22786],"content":"To create a licensed ActiveX control, see <bpt id=\"p1\">[</bpt>IAxWinHostWindowLic::CreateControlLic<ept id=\"p1\">](#iaxwinhostwindowlic__createcontrollicex)</ept>.","source":"To create a licensed ActiveX control, see [IAxWinHostWindowLic::CreateControlLic](#iaxwinhostwindowlic__createcontrollicex)."},{"pos":[22846,22879],"content":"IAxWinHostWindow::CreateControlEx"},{"pos":[22883,23044],"content":"Creates an ActiveX control, initializes it, and hosts it in the specified window, similar to <bpt id=\"p1\">[</bpt>IAxWinHostWindow::CreateControl<ept id=\"p1\">](#iaxwinhostwindow__createcontrol)</ept>.","source":"Creates an ActiveX control, initializes it, and hosts it in the specified window, similar to [IAxWinHostWindow::CreateControl](#iaxwinhostwindow__createcontrol)."},{"content":"Parameters","pos":[23228,23238]},{"content":"[in] A string identifying the control to create.","pos":[23259,23307]},{"content":"Can be a CLSID (must include the braces), ProgID, URL, or raw HTML (prefixed with <bpt id=\"p1\">**</bpt>MSHTML:<ept id=\"p1\">**</ept>).","pos":[23308,23403],"source":" Can be a CLSID (must include the braces), ProgID, URL, or raw HTML (prefixed with **MSHTML:**)."},{"content":"[in] A handle to the window to be used for hosting.","pos":[23420,23471]},{"content":"[in] An interface pointer for a stream containing initialization data for the control.","pos":[23491,23577]},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[23578,23594],"source":" Can be **NULL**."},{"content":"[out] The address of a pointer that will receive the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> interface of the created control.","pos":[23612,23711],"source":" [out] The address of a pointer that will receive the **IUnknown** interface of the created control."},{"content":"Can be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[23712,23728],"source":" Can be **NULL**."},{"content":"riidAdvise","pos":[23736,23746]},{"content":"[in] The interface identifier of an outgoing interface on the contained object.","pos":[23751,23830]},{"content":"Can be <bpt id=\"p1\">**</bpt>IID_NULL<ept id=\"p1\">**</ept>.","pos":[23831,23851],"source":" Can be **IID_NULL**."},{"content":"punkAdvise","pos":[23859,23869]},{"content":"[in] A pointer to the <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept> interface of the sink object to be connected to the connection point on the contained object specified by <ph id=\"ph1\">`iidSink`</ph>.","pos":[23874,24025],"source":" [in] A pointer to the **IUnknown** interface of the sink object to be connected to the connection point on the contained object specified by `iidSink`."},{"content":"Return Value","pos":[24035,24047]},{"pos":[24051,24078],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[24088,24095]},{"pos":[24099,24293],"content":"Unlike the <ph id=\"ph1\">`CreateControl`</ph> method, <ph id=\"ph2\">`CreateControlEx`</ph> also allows you to receive an interface pointer to the newly created control and set up an event sink to receive events fired by the control.","source":"Unlike the `CreateControl` method, `CreateControlEx` also allows you to receive an interface pointer to the newly created control and set up an event sink to receive events fired by the control."},{"pos":[24300,24426],"content":"To create a licensed ActiveX control, see <bpt id=\"p1\">[</bpt>IAxWinHostWindowLic::CreateControlLicEx<ept id=\"p1\">](#iaxwinhostwindowlic__createcontrollicex)</ept>.","source":"To create a licensed ActiveX control, see [IAxWinHostWindowLic::CreateControlLicEx](#iaxwinhostwindowlic__createcontrollicex)."},{"pos":[24483,24513],"content":"IAxWinHostWindow::QueryControl"},{"content":"Returns the specified interface pointer provided by the hosted control.","pos":[24517,24588]},{"content":"Parameters","pos":[24671,24681]},{"content":"[in] The ID of an interface on the control being requested.","pos":[24695,24754]},{"content":"[out] The address of a pointer that will receive the specified interface of the created control.","pos":[24776,24872]},{"content":"Return Value","pos":[24882,24894]},{"pos":[24898,24925],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[24989,25026],"content":"IAxWinHostWindow::SetExternalDispatch"},{"pos":[25030,25224],"content":"Sets the external dispinterface, which is available to contained controls through the <bpt id=\"p1\">[</bpt>IDocHostUIHandlerDispatch::GetExternal<ept id=\"p1\">](../../atl/reference/idochostuihandlerdispatch-interface.md)</ept> method.","source":"Sets the external dispinterface, which is available to contained controls through the [IDocHostUIHandlerDispatch::GetExternal](../../atl/reference/idochostuihandlerdispatch-interface.md) method."},{"content":"Parameters","pos":[25297,25307]},{"content":"[in] A pointer to an <ph id=\"ph1\">`IDispatch`</ph> interface.","pos":[25322,25365],"source":" [in] A pointer to an `IDispatch` interface."},{"content":"Return Value","pos":[25375,25387]},{"pos":[25391,25418],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[25483,25521],"content":"IAxWinHostWindow::SetExternalUIHandler"},{"pos":[25525,25689],"content":"Call this function to set the external <bpt id=\"p1\">[</bpt>IDocHostUIHandlerDispatch<ept id=\"p1\">](../../atl/reference/idochostuihandlerdispatch-interface.md)</ept> interface for the <ph id=\"ph1\">`CAxWindow`</ph> object.","source":"Call this function to set the external [IDocHostUIHandlerDispatch](../../atl/reference/idochostuihandlerdispatch-interface.md) interface for the `CAxWindow` object."},{"content":"Parameters","pos":[25779,25789]},{"content":"[in] A pointer to an <bpt id=\"p1\">**</bpt>IDocHostUIHandlerDispatch<ept id=\"p1\">**</ept> interface.","pos":[25804,25865],"source":" [in] A pointer to an **IDocHostUIHandlerDispatch** interface."},{"content":"Return Value","pos":[25875,25887]},{"pos":[25891,25918],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"content":"Remarks","pos":[25928,25935]},{"pos":[25939,26080],"content":"This function is used by controls (such as the Web browser control) that query the host's site for the <ph id=\"ph1\">`IDocHostUIHandlerDispatch`</ph> interface.","source":"This function is used by controls (such as the Web browser control) that query the host's site for the `IDocHostUIHandlerDispatch` interface."},{"pos":[26144,26181],"content":"IAxWinHostWindowLic::CreateControlLic"},{"pos":[26185,26277],"content":"Creates a licensed control, initializes it, and hosts it in the window identified by <ph id=\"ph1\">`hWnd`</ph>.","source":"Creates a licensed control, initializes it, and hosts it in the window identified by `hWnd`."},{"content":"Parameters","pos":[26407,26417]},{"content":"[in] The BSTR that contains the license key for the control.","pos":[26434,26494]},{"content":"Remarks","pos":[26504,26511]},{"pos":[26515,26650],"content":"See <bpt id=\"p1\">[</bpt>IAxWinHostWindow::CreateControl<ept id=\"p1\">](#iaxwinhostwindow__createcontrol)</ept> for a description of the remaining parameters and return value.","source":"See [IAxWinHostWindow::CreateControl](#iaxwinhostwindow__createcontrol) for a description of the remaining parameters and return value."},{"pos":[26657,26785],"content":"Calling this method is equivalent to calling <bpt id=\"p1\">[</bpt>IAxWinHostWindowLic::CreateControlLicEx<ept id=\"p1\">](#iaxwinhostwindowlic__createcontrollicex)</ept>","source":"Calling this method is equivalent to calling [IAxWinHostWindowLic::CreateControlLicEx](#iaxwinhostwindowlic__createcontrollicex)"},{"content":"Example","pos":[26795,26802]},{"pos":[26806,26973],"content":"See <bpt id=\"p1\">[</bpt>Hosting ActiveX Controls Using ATL AXHost<ept id=\"p1\">](../../atl/hosting-activex-controls-using-atl-axhost.md)</ept> for a sample that uses <ph id=\"ph1\">`IAxWinHostWindowLic::CreateControlLic`</ph>.","source":"See [Hosting ActiveX Controls Using ATL AXHost](../../atl/hosting-activex-controls-using-atl-axhost.md) for a sample that uses `IAxWinHostWindowLic::CreateControlLic`."},{"pos":[27039,27078],"content":"IAxWinHostWindowLic::CreateControlLicEx"},{"pos":[27082,27251],"content":"Creates a licensed ActiveX control, initializes it, and hosts it in the specified window, similar to <bpt id=\"p1\">[</bpt>IAxWinHostWindow::CreateControl<ept id=\"p1\">](#iaxwinhostwindow__createcontrol)</ept>.","source":"Creates a licensed ActiveX control, initializes it, and hosts it in the specified window, similar to [IAxWinHostWindow::CreateControl](#iaxwinhostwindow__createcontrol)."},{"content":"Parameters","pos":[27456,27466]},{"content":"[in] The BSTR that contains the license key for the control.","pos":[27483,27543]},{"content":"Remarks","pos":[27553,27560]},{"pos":[27564,27703],"content":"See <bpt id=\"p1\">[</bpt>IAxWinHostWindow::CreateControlEx<ept id=\"p1\">](#iaxwinhostwindow__createcontrolex)</ept> for a description of the remaining parameters and return value.","source":"See [IAxWinHostWindow::CreateControlEx](#iaxwinhostwindow__createcontrolex) for a description of the remaining parameters and return value."},{"content":"Example","pos":[27713,27720]},{"pos":[27724,27893],"content":"See <bpt id=\"p1\">[</bpt>Hosting ActiveX Controls Using ATL AXHost<ept id=\"p1\">](../../atl/hosting-activex-controls-using-atl-axhost.md)</ept> for a sample that uses <ph id=\"ph1\">`IAxWinHostWindowLic::CreateControlLicEx`</ph>.","source":"See [Hosting ActiveX Controls Using ATL AXHost](../../atl/hosting-activex-controls-using-atl-axhost.md) for a sample that uses `IAxWinHostWindowLic::CreateControlLicEx`."},{"content":"See Also","pos":[27902,27910]},{"content":"Class Overview","pos":[27915,27929]}],"content":"---\ntitle: \"IAtlMemMgr Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"IAtlMemMgr\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"IAtlMemMgr class\"\n  - \"memory, managing\"\n  - \"memory, memory manager\"\nms.assetid: 18b2c569-25fe-4464-bdb6-3b1abef7154a\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IAtlMemMgr Class\nThis class represents the interface to a memory manager.  \n  \n## Syntax  \n  \n```\n__interface __declspec(uuid(\"654F7EF5-CFDF-4df9-A450-6C6A13C622C0\")) IAtlMemMgr\n```  \n  \n## Members  \n  \n### Methods  \n  \n|||  \n|-|-|  \n|[Allocate](#iatlmemmgr__allocate)|Call this method to allocate a block of memory.|  \n|[Free](#iatlmemmgr__free)|Call this method to free a block of memory.|  \n|[GetSize](#iatlmemmgr__getsize)|Call this method to retrieve the size of an allocated memory block.|  \n|[Reallocate](#iatlmemmgr__reallocate)|Call this method to reallocate a block of memory.|  \n  \n## Remarks  \n This interface is implemented by [CComHeap](../../atl/reference/ccomheap-class.md), [CCRTHeap](../../atl/reference/ccrtheap-class.md), [CLocalHeap](../../atl/reference/clocalheap-class.md), [CGlobalHeap](../../atl/reference/cglobalheap-class.md), or [CWin32Heap](../../atl/reference/cwin32heap-class.md).  \n  \n> [!NOTE]\n>  The local and global heap functions are slower than other memory management functions, and do not provide as many features. Therefore, new applications should use the [heap functions](http://msdn.microsoft.com/library/windows/desktop/aa366711). These are available in the [CWin32Heap](../../atl/reference/cwin32heap-class.md) class.  \n  \n## Example  \n [!code-cpp[NVC_ATL_Utilities#94](../../atl/codesnippet/cpp/iatlmemmgr-class_1.cpp)]  \n  \n## Requirements  \n **Header:** atlmem.h  \n  \n##  <a name=\"iatlmemmgr__allocate\"></a>  IAtlMemMgr::Allocate  \n Call this method to allocate a block of memory.  \n  \n```\nvoid* Allocate(size_t nBytes) throw();\n```  \n  \n### Parameters  \n `nBytes`  \n The requested number of bytes in the new memory block.  \n  \n### Return Value  \n Returns a pointer to the start of the newly allocated memory block.  \n  \n### Remarks  \n Call [IAtlMemMgr::Free](#iatlmemmgr__free) or [IAtlMemMgr::Reallocate](#iatlmemmgr__reallocate) to free the memory allocated by this method.  \n  \n### Example  \n For an example, see the [IAtlMemMgr Overview](../../atl/reference/iatlmemmgr-class.md).  \n  \n##  <a name=\"iatlmemmgr__free\"></a>  IAtlMemMgr::Free  \n Call this method to free a block of memory.  \n  \n```\nvoid Free(void* p) throw();\n```  \n  \n### Parameters  \n `p`  \n Pointer to memory previously allocated by this memory manager.  \n  \n### Remarks  \n Use this method to free memory obtained by [IAtlMemMgr::Allocate](#iatlmemmgr__allocate) or [IAtlMemMgr::Reallocate](#iatlmemmgr__reallocate).  \n  \n### Example  \n For an example, see the [IAtlMemMgr Overview](../../atl/reference/iatlmemmgr-class.md).  \n  \n##  <a name=\"iatlmemmgr__getsize\"></a>  IAtlMemMgr::GetSize  \n Call this method to retrieve the size of an allocated memory block.  \n  \n```\nsize_t GetSize(void* p) throw();\n```  \n  \n### Parameters  \n `p`  \n Pointer to memory previously allocated by this memory manager.  \n  \n### Return Value  \n Returns the size of the memory block in bytes.  \n  \n### Example  \n For an example, see the [IAtlMemMgr Overview](../../atl/reference/iatlmemmgr-class.md).  \n  \n##  <a name=\"iatlmemmgr__reallocate\"></a>  IAtlMemMgr::Reallocate  \n Call this method to reallocate memory allocated by this memory manager.  \n  \n```\nvoid* Reallocate(\n    void* p,  size_t nBytes) throw();\n```  \n  \n### Parameters  \n `p`  \n Pointer to memory previously allocated by this memory manager.  \n  \n `nBytes`  \n The requested number of bytes in the new memory block.  \n  \n### Return Value  \n Returns a pointer to the start of the newly allocated memory block.  \n  \n### Remarks  \n Call [IAtlMemMgr::Free](#iatlmemmgr__free) or [IAtlMemMgr::Reallocate](#iatlmemmgr__reallocate) to free the memory allocated by this method.  \n  \n Conceptually this method frees the existing memory and allocates a new memory block. In reality, the existing memory may be extended or otherwise reused.  \n  \n### Example  \n For an example, see the [IAtlMemMgr Overview](../../atl/reference/iatlmemmgr-class.md).  \n  \n##  <a name=\"iaxwinambientdispatch__get_allowcontextmenu\"></a>  IAxWinAmbientDispatch::get_AllowContextMenu  \n The **AllowContextMenu** property specifies whether the hosted control is allowed to display its own context menu.  \n  \n```\nSTDMETHOD(get_AllowContextMenu)(VARIANT_BOOL* pbAllowContextMenu);\n```  \n  \n### Parameters  \n *pbAllowContextMenu*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__get_allowshowui\"></a>  IAxWinAmbientDispatch::get_AllowShowUI  \n The **AllowShowUI** property specifies whether the hosted control is allowed to display its own user interface.  \n  \n```\nSTDMETHOD(get_AllowShowUI)(VARIANT_BOOL* pbAllowShowUI);\n```  \n  \n### Parameters  \n *pbAllowShowUI*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses **VARIANT_FALSE** as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__get_allowwindowlessactivation\"></a>  IAxWinAmbientDispatch::get_AllowWindowlessActivation  \n The **AllowWindowlessActivation** property specifies whether the container will allow windowless activation.  \n  \n```\nSTDMETHOD(get_AllowWindowlessActivation)(VARIANT_BOOL* pbAllowWindowless);\n```  \n  \n### Parameters  \n *pbAllowWindowless*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__get_backcolor\"></a>  IAxWinAmbientDispatch::get_BackColor  \n The `BackColor` property specifies the ambient background color of the container.  \n  \n```\nSTDMETHOD(get_BackColor)(OLE_COLOR* pclrBackground);\n```  \n  \n### Parameters  \n *pclrBackground*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses **COLOR_BTNFACE** or **COLOR_WINDOW** as the default value of this property (depending on whether the parent of the host window is a dialog or not).  \n  \n##  <a name=\"iaxwinambientdispatch__get_displayasdefault\"></a>  IAxWinAmbientDispatch::get_DisplayAsDefault  \n **DisplayAsDefault** is an ambient property that allows a control to find out if it is the default control.  \n  \n```\nSTDMETHOD(get_DisplayAsDefault)(VARIANT_BOOL* pbDisplayAsDefault);\n```  \n  \n### Parameters  \n *pbDisplayAsDefault*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses **VARIANT_FALSE** as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__get_dochostdoubleclickflags\"></a>  IAxWinAmbientDispatch::get_DocHostDoubleClickFlags  \n The **DocHostDoubleClickFlags** property specifies the operation that should take place in response to a double-click.  \n  \n```\nSTDMETHOD(get_DocHostDoubleClickFlags)(DWORD* pdwDocHostDoubleClickFlags);\n```  \n  \n### Parameters  \n *pdwDocHostDoubleClickFlags*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses **DOCHOSTUIDBLCLK_DEFAULT** as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__get_dochostflags\"></a>  IAxWinAmbientDispatch::get_DocHostFlags  \n The **DocHostFlags** property specifies the user interface capabilities of the host object.  \n  \n```\nSTDMETHOD(get_DocHostFlags)(DWORD* pdwDocHostFlags);\n```  \n  \n### Parameters  \n *pdwDocHostFlags*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses **DOCHOSTUIFLAG_NO3DBORDER** as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__get_font\"></a>  IAxWinAmbientDispatch::get_Font  \n The **Font** property specifies the ambient font of the container.  \n  \n```\nSTDMETHOD(get_Font)(IFontDisp** pFont);\n```  \n  \n### Parameters  \n `pFont`  \n [out] The address of an **IFontDisp** interface pointer used to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses the default GUI font or the system font as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__get_forecolor\"></a>  IAxWinAmbientDispatch::get_ForeColor  \n The `ForeColor` property specifies the ambient foreground color of the container.  \n  \n```\nSTDMETHOD(get_ForeColor)(OLE_COLOR* pclrForeground);\n```  \n  \n### Parameters  \n *pclrForeground*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses the system window text color as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__get_localeid\"></a>  IAxWinAmbientDispatch::get_LocaleID  \n The **LocaleID** property specifies the ambient locale ID of the container.  \n  \n```\nSTDMETHOD(get_LocaleID)(LCID* plcidLocaleID);\n```  \n  \n### Parameters  \n *plcidLocaleID*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses the user's default locale as the default value of this property.  \n  \n With this method you can discover the Ambient LocalID, that is, the LocaleID of the program your control is being used in. Once you know the LocaleID, you can call code to load locale-specific captions, error message text, and so forth from a resource file or satellite DLL.  \n  \n##  <a name=\"iaxwinambientdispatch__get_messagereflect\"></a>  IAxWinAmbientDispatch::get_MessageReflect  \n The **MessageReflect** ambient property specifies whether the container will reflect messages to the hosted control.  \n  \n```\nSTDMETHOD(get_MessageReflect)(VARIANT_BOOL* pbMessageReflect);\n```  \n  \n### Parameters  \n *pbMessageReflect*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__get_optionkeypath\"></a>  IAxWinAmbientDispatch::get_OptionKeyPath  \n The **OptionKeyPath** property specifies the registry key path to user settings.  \n  \n```\nSTDMETHOD(get_OptionKeyPath)(BSTR* pbstrOptionKeyPath);\n```  \n  \n### Parameters  \n *pbstrOptionKeyPath*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"iaxwinambientdispatch__get_showgrabhandles\"></a>  IAxWinAmbientDispatch::get_ShowGrabHandles  \n The **ShowGrabHandles** ambient property allows the control to find out if it should draw itself with grab handles.  \n  \n```\nSTDMETHOD(get_ShowGrabHandles)(VARIANT_BOOL* pbShowGrabHandles);\n```  \n  \n### Parameters  \n *pbShowGrabHandles*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation always returns **VARIANT_FALSE** as the value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__get_showhatching\"></a>  IAxWinAmbientDispatch::get_ShowHatching  \n The **ShowHatching** ambient property allows the control to find out if it should draw itself hatched.  \n  \n```\nSTDMETHOD(get_ShowHatching)(VARIANT_BOOL* pbShowHatching);\n```  \n  \n### Parameters  \n *pbShowHatching*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation always returns **VARIANT_FALSE** as the value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__get_usermode\"></a>  IAxWinAmbientDispatch::get_UserMode  \n The **UserMode** property specifies the ambient user mode of the container.  \n  \n```\nSTDMETHOD(get_UserMode)(VARIANT_BOOL* pbUserMode);\n```  \n  \n### Parameters  \n *pbUserMode*  \n [out] The address of a variable to receive the current value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__put_allowcontextmenu\"></a>  IAxWinAmbientDispatch::put_AllowContextMenu  \n The **AllowContextMenu** property specifies whether the hosted control is allowed to display its own context menu.  \n  \n```\nSTDMETHOD(put_AllowContextMenu)(VARIANT_BOOL bAllowContextMenu);\n```  \n  \n### Parameters  \n *bAllowContextMenu*  \n [in] The new value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__put_allowshowui\"></a>  IAxWinAmbientDispatch::put_AllowShowUI  \n The **AllowShowUI** property specifies whether the hosted control is allowed to display its own user interface.  \n  \n```\nSTDMETHOD(put_AllowShowUI)(VARIANT_BOOL bAllowShowUI);\n```  \n  \n### Parameters  \n *bAllowShowUI*  \n [in] The new value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses **VARIANT_FALSE** as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__put_allowwindowlessactivation\"></a>  IAxWinAmbientDispatch::put_AllowWindowlessActivation  \n The **AllowWindowlessActivation** property specifies whether the container will allow windowless activation.  \n  \n```\nSTDMETHOD(put_AllowWindowlessActivation)(VARIANT_BOOL bAllowWindowless);\n```  \n  \n### Parameters  \n *bAllowWindowless*  \n [in] The new value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__put_backcolor\"></a>  IAxWinAmbientDispatch::put_BackColor  \n The `BackColor` property specifies the ambient background color of the container.  \n  \n```\nSTDMETHOD(put_BackColor)(OLE_COLOR clrBackground);\n```  \n  \n### Parameters  \n *clrBackground*  \n [in] The new value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses **COLOR_BTNFACE** or **COLOR_WINDOW** as the default value of this property (depending on whether the parent of the host window is a dialog or not).  \n  \n##  <a name=\"iaxwinambientdispatch__put_displayasdefault\"></a>  IAxWinAmbientDispatch::put_DisplayAsDefault  \n **DisplayAsDefault** is an ambient property that allows a control to find out if it is the default control.  \n  \n```\nSTDMETHOD(put_DisplayAsDefault)(VARIANT_BOOL bDisplayAsDefault);\n```  \n  \n### Parameters  \n `bDisplayAsDefault`  \n [in] The new value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses **VARIANT_FALSE** as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__put_dochostdoubleclickflags\"></a>  IAxWinAmbientDispatch::put_DocHostDoubleClickFlags  \n The **DocHostDoubleClickFlags** property specifies the operation that should take place in response to a double-click.  \n  \n```\nSTDMETHOD(put_DocHostDoubleClickFlags)(DWORD dwDocHostDoubleClickFlags);\n```  \n  \n### Parameters  \n *dwDocHostDoubleClickFlags*  \n [in] The new value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses **DOCHOSTUIDBLCLK_DEFAULT** as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__put_dochostflags\"></a>  IAxWinAmbientDispatch::put_DocHostFlags  \n The **DocHostFlags** property specifies the user interface capabilities of the host object.  \n  \n```\nSTDMETHOD(put_DocHostFlags)(DWORD dwDocHostFlags);\n```  \n  \n### Parameters  \n *dwDocHostFlags*  \n [in] The new value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses **DOCHOSTUIFLAG_NO3DBORDER** as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__put_font\"></a>  IAxWinAmbientDispatch::put_Font  \n The **Font** property specifies the ambient font of the container.  \n  \n```\nSTDMETHOD(put_Font)(IFontDisp* pFont);\n```  \n  \n### Parameters  \n `pFont`  \n [in] The new value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses the default GUI font or the system font as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__put_forecolor\"></a>  IAxWinAmbientDispatch::put_ForeColor  \n The `ForeColor` property specifies the ambient foreground color of the container.  \n  \n```\nSTDMETHOD(put_ForeColor)(OLE_COLOR clrForeground);\n```  \n  \n### Parameters  \n *clrForeground*  \n [in] The new value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses the system window text color as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__put_localeid\"></a>  IAxWinAmbientDispatch::put_LocaleID  \n The **LocaleID** property specifies the ambient locale ID of the container.  \n  \n```\nSTDMETHOD(put_LocaleID)(LCID lcidLocaleID);\n```  \n  \n### Parameters  \n *lcidLocaleID*  \n [in] The new value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses the user's default locale as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__put_messagereflect\"></a>  IAxWinAmbientDispatch::put_MessageReflect  \n The **MessageReflect** ambient property specifies whether the container will reflect messages to the hosted control.  \n  \n```\nSTDMETHOD(put_MessageReflect)(VARIANT_BOOL bMessageReflect);\n```  \n  \n### Parameters  \n `bMessageReflect`  \n [in] The new value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatch__put_optionkeypath\"></a>  IAxWinAmbientDispatch::put_OptionKeyPath  \n The **OptionKeyPath** property specifies the registry key path to user settings.  \n  \n```\nSTDMETHOD(put_OptionKeyPath)(BSTR bstrOptionKeyPath);\n```  \n  \n### Parameters  \n *bstrOptionKeyPath*  \n [in] The new value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"iaxwinambientdispatch__put_usermode\"></a>  IAxWinAmbientDispatch::put_UserMode  \n The **UserMode** property specifies the ambient user mode of the container.  \n  \n```\nSTDMETHOD(put_UserMode)(VARIANT_BOOL bUserMode);\n```  \n  \n### Parameters  \n `bUserMode`  \n [in] The new value of this property.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n The ATL host object implementation uses `VARIANT_TRUE` as the default value of this property.  \n  \n##  <a name=\"iaxwinambientdispatchex__setambientdispatch\"></a>  IAxWinAmbientDispatchEx::SetAmbientDispatch  \n This method is called to supplement the default ambient property interface with a user-defined interface.  \n  \n```\nvirtual HRESULT STDMETHODCALLTYPE SetAmbientDispatch(IDispatch* pDispatch) = 0;\n```  \n  \n### Parameters  \n *pDispatch*  \n Pointer to the new interface.  \n  \n### Return Value  \n Returns S_OK on success, or an error HRESULT on failure.  \n  \n### Remarks  \n When `SetAmbientDispatch` is called with a pointer to a new interface, this new interface will be used to invoke any properties or methods asked for by the hosted control — if those properties are not already provided by [IAxWinAmbientDispatch](../../atl/reference/iaxwinambientdispatch-interface.md).  \n  \n##  <a name=\"iaxwinhostwindow__attachcontrol\"></a>  IAxWinHostWindow::AttachControl  \n Attaches an existing (and previously initialized) control to the host object using the window identified by `hWnd`.  \n  \n```\nSTDMETHOD(AttachControl)(\n    IUnknown* pUnkControl,  HWND hWnd);\n```  \n  \n### Parameters  \n *pUnkControl*  \n [in] A pointer to the **IUnknown** interface of the control to be attached to the host object.  \n  \n `hWnd`  \n [in] A handle to the window to be used for hosting.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"iaxwinhostwindow__createcontrol\"></a>  IAxWinHostWindow::CreateControl  \n Creates a control, initializes it, and hosts it in the window identified by `hWnd`.  \n  \n```\nSTDMETHOD(CreateControl)(LPCOLESTR lpTricsData,\n    HWND hWnd,\n    IStream* pStream);\n```  \n  \n### Parameters  \n `lpTricsData`  \n [in] A string identifying the control to create. Can be a CLSID (must include the braces), ProgID, URL, or raw HTML (prefixed by **MSHTML:**).  \n  \n `hWnd`  \n [in] A handle to the window to be used for hosting.  \n  \n `pStream`  \n [in] An interface pointer for a stream containing initialization data for the control. Can be **NULL**.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n This window will be subclassed by the host object exposing this interface so that messages can be reflected to the control and other container features will work.  \n  \n Calling this method is equivalent to calling [IAxWinHostWindow::CreateControlEx](#iaxwinhostwindow__createcontrolex).  \n  \n To create a licensed ActiveX control, see [IAxWinHostWindowLic::CreateControlLic](#iaxwinhostwindowlic__createcontrollicex).  \n  \n##  <a name=\"iaxwinhostwindow__createcontrolex\"></a>  IAxWinHostWindow::CreateControlEx  \n Creates an ActiveX control, initializes it, and hosts it in the specified window, similar to [IAxWinHostWindow::CreateControl](#iaxwinhostwindow__createcontrol).  \n  \n```\nSTDMETHOD(CreateControlEx)(LPCOLESTR lpszTricsData,\n    HWND hWnd,\n    IStream* pStream,\n    IUnknown** ppUnk,\n    REFIID riidAdvise,\n    IUnknown* punkAdvise);\n```  \n  \n### Parameters  \n `lpTricsData`  \n [in] A string identifying the control to create. Can be a CLSID (must include the braces), ProgID, URL, or raw HTML (prefixed with **MSHTML:**).  \n  \n `hWnd`  \n [in] A handle to the window to be used for hosting.  \n  \n `pStream`  \n [in] An interface pointer for a stream containing initialization data for the control. Can be **NULL**.  \n  \n `ppUnk`  \n [out] The address of a pointer that will receive the **IUnknown** interface of the created control. Can be **NULL**.  \n  \n *riidAdvise*  \n [in] The interface identifier of an outgoing interface on the contained object. Can be **IID_NULL**.  \n  \n *punkAdvise*  \n [in] A pointer to the **IUnknown** interface of the sink object to be connected to the connection point on the contained object specified by `iidSink`.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n Unlike the `CreateControl` method, `CreateControlEx` also allows you to receive an interface pointer to the newly created control and set up an event sink to receive events fired by the control.  \n  \n To create a licensed ActiveX control, see [IAxWinHostWindowLic::CreateControlLicEx](#iaxwinhostwindowlic__createcontrollicex).  \n  \n##  <a name=\"iaxwinhostwindow__querycontrol\"></a>  IAxWinHostWindow::QueryControl  \n Returns the specified interface pointer provided by the hosted control.  \n  \n```\nSTDMETHOD(QueryControl)(REFIID riid,\n    void** ppvObject);\n```  \n  \n### Parameters  \n `riid`  \n [in] The ID of an interface on the control being requested.  \n  \n `ppvObject`  \n [out] The address of a pointer that will receive the specified interface of the created control.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"iaxwinhostwindow__setexternaldispatch\"></a>  IAxWinHostWindow::SetExternalDispatch  \n Sets the external dispinterface, which is available to contained controls through the [IDocHostUIHandlerDispatch::GetExternal](../../atl/reference/idochostuihandlerdispatch-interface.md) method.  \n  \n```\nSTDMETHOD(SetExternalDispatch)(IDispatch* pDisp);\n```  \n  \n### Parameters  \n `pDisp`  \n [in] A pointer to an `IDispatch` interface.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n##  <a name=\"iaxwinhostwindow__setexternaluihandler\"></a>  IAxWinHostWindow::SetExternalUIHandler  \n Call this function to set the external [IDocHostUIHandlerDispatch](../../atl/reference/idochostuihandlerdispatch-interface.md) interface for the `CAxWindow` object.  \n  \n```\nSTDMETHOD(SetExternalUIHandler)(IDocHostUIHandlerDispatch* pDisp);\n```  \n  \n### Parameters  \n `pDisp`  \n [in] A pointer to an **IDocHostUIHandlerDispatch** interface.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n This function is used by controls (such as the Web browser control) that query the host's site for the `IDocHostUIHandlerDispatch` interface.  \n  \n##  <a name=\"iaxwinhostwindowlic__createcontrollic\"></a>  IAxWinHostWindowLic::CreateControlLic  \n Creates a licensed control, initializes it, and hosts it in the window identified by `hWnd`.  \n  \n```\nSTDMETHOD(CreateControlLic)(LPCOLESTR lpTricsData,\n    HWND hWnd,\n    IStream* pStream,\n    BSTR bstrLic);\n```  \n  \n### Parameters  \n `bstrLic`  \n [in] The BSTR that contains the license key for the control.  \n  \n### Remarks  \n See [IAxWinHostWindow::CreateControl](#iaxwinhostwindow__createcontrol) for a description of the remaining parameters and return value.  \n  \n Calling this method is equivalent to calling [IAxWinHostWindowLic::CreateControlLicEx](#iaxwinhostwindowlic__createcontrollicex)  \n  \n### Example  \n See [Hosting ActiveX Controls Using ATL AXHost](../../atl/hosting-activex-controls-using-atl-axhost.md) for a sample that uses `IAxWinHostWindowLic::CreateControlLic`.  \n  \n##  <a name=\"iaxwinhostwindowlic__createcontrollicex\"></a>  IAxWinHostWindowLic::CreateControlLicEx  \n Creates a licensed ActiveX control, initializes it, and hosts it in the specified window, similar to [IAxWinHostWindow::CreateControl](#iaxwinhostwindow__createcontrol).  \n  \n```\nSTDMETHOD(CreateControlLicEx)(LPCOLESTR lpszTricsData,\n    HWND hWnd,\n    IStream* pStream,\n    IUnknown** ppUnk,\n    REFIID riidAdvise,\n    IUnknown* punkAdvise,\n    BSTR bstrLic);\n```  \n  \n### Parameters  \n `bstrLic`  \n [in] The BSTR that contains the license key for the control.  \n  \n### Remarks  \n See [IAxWinHostWindow::CreateControlEx](#iaxwinhostwindow__createcontrolex) for a description of the remaining parameters and return value.  \n  \n### Example  \n See [Hosting ActiveX Controls Using ATL AXHost](../../atl/hosting-activex-controls-using-atl-axhost.md) for a sample that uses `IAxWinHostWindowLic::CreateControlLicEx`.  \n  \n## See Also  \n [Class Overview](../../atl/atl-class-overview.md)\n"}