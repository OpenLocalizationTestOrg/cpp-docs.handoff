{"nodes":[{"pos":[12,42],"content":"CButton Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CButton Class | Microsoft Docs","pos":[0,30]}]},{"content":"CButton Class","pos":[764,777]},{"content":"Provides the functionality of Windows button controls.","pos":[778,832]},{"content":"Syntax","pos":[841,847]},{"content":"Members","pos":[901,908]},{"content":"Public Constructors","pos":[918,937]},{"content":"Name","pos":[944,948]},{"content":"Description","pos":[949,960]},{"content":"CButton::CButton","pos":[999,1015]},{"pos":[1036,1066],"content":"Constructs a <ph id=\"ph1\">`CButton`</ph> object.","source":"Constructs a `CButton` object."},{"content":"Public Methods","pos":[1077,1091]},{"content":"Name","pos":[1098,1102]},{"content":"Description","pos":[1103,1114]},{"content":"CButton::Create","pos":[1153,1168]},{"pos":[1188,1263],"content":"Creates the Windows button control and attaches it to the <ph id=\"ph1\">`CButton`</ph> object.","source":"Creates the Windows button control and attaches it to the `CButton` object."},{"content":"CButton::DrawItem","pos":[1269,1286]},{"pos":[1308,1357],"content":"Override to draw an owner-drawn <ph id=\"ph1\">`CButton`</ph> object.","source":"Override to draw an owner-drawn `CButton` object."},{"content":"CButton::GetBitmap","pos":[1363,1381]},{"pos":[1404,1492],"content":"Retrieves the handle of the bitmap previously set with <bpt id=\"p1\">[</bpt>SetBitmap<ept id=\"p1\">](#cbutton__setbitmap)</ept>.","source":"Retrieves the handle of the bitmap previously set with [SetBitmap](#cbutton__setbitmap)."},{"content":"CButton::GetButtonStyle","pos":[1498,1521]},{"content":"Retrieves information about the button control style.","pos":[1549,1602]},{"content":"CButton::GetCheck","pos":[1608,1625]},{"content":"Retrieves the check state of a button control.","pos":[1647,1693]},{"content":"CButton::GetCursor","pos":[1699,1717]},{"pos":[1740,1834],"content":"Retrieves the handle of the cursor image previously set with <bpt id=\"p1\">[</bpt>SetCursor<ept id=\"p1\">](#cbutton__setcursor)</ept>.","source":"Retrieves the handle of the cursor image previously set with [SetCursor](#cbutton__setcursor)."},{"content":"CButton::GetIcon","pos":[1840,1856]},{"pos":[1877,1959],"content":"Retrieves the handle of the icon previously set with <bpt id=\"p1\">[</bpt>SetIcon<ept id=\"p1\">](#cbutton__seticon)</ept>.","source":"Retrieves the handle of the icon previously set with [SetIcon](#cbutton__seticon)."},{"content":"CButton::GetIdealSize","pos":[1965,1986]},{"content":"Retrieves the ideal size of the button control.","pos":[2012,2059]},{"content":"CButton::GetImageList","pos":[2065,2086]},{"content":"Retrieves the image list of the button control.","pos":[2112,2159]},{"content":"CButton::GetNote","pos":[2165,2181]},{"content":"Retrieves the note component of the current command link control.","pos":[2202,2267]},{"content":"CButton::GetNoteLength","pos":[2273,2295]},{"content":"Retrieves the length of the note text for the current command link control.","pos":[2322,2397]},{"content":"CButton::GetSplitGlyph","pos":[2403,2425]},{"content":"Retrieves the glyph associated with the current split button control.","pos":[2452,2521]},{"content":"CButton::GetSplitImageList","pos":[2527,2553]},{"content":"Retrieves the image list for the current split button control.","pos":[2584,2646]},{"content":"CButton::GetSplitInfo","pos":[2652,2673]},{"content":"Retrieves information that defines the current split button control.","pos":[2699,2767]},{"content":"CButton::GetSplitSize","pos":[2773,2794]},{"content":"Retrieves the bounding rectangle of the drop-down component of the current split button control.","pos":[2820,2916]},{"content":"CButton::GetSplitStyle","pos":[2922,2944]},{"content":"Retrieves the split button styles that define the current split button control.","pos":[2971,3050]},{"content":"CButton::GetState","pos":[3056,3073]},{"content":"Retrieves the check state, highlight state, and focus state of a button control.","pos":[3095,3175]},{"content":"CButton::GetTextMargin","pos":[3181,3203]},{"content":"Retrieves the text margin of the button control.","pos":[3230,3278]},{"content":"CButton::SetBitmap","pos":[3284,3302]},{"content":"Specifies a bitmap to be displayed on the button.","pos":[3325,3374]},{"content":"CButton::SetButtonStyle","pos":[3380,3403]},{"content":"Changes the style of a button.","pos":[3431,3461]},{"content":"CButton::SetCheck","pos":[3467,3484]},{"content":"Sets the check state of a button control.","pos":[3506,3547]},{"content":"CButton::SetCursor","pos":[3553,3571]},{"content":"Specifies a cursor image to be displayed on the button.","pos":[3594,3649]},{"content":"CButton::SetDropDownState","pos":[3655,3680]},{"content":"Sets the drop-down state of the current split button control.","pos":[3710,3771]},{"content":"CButton::SetIcon","pos":[3777,3793]},{"content":"Specifies an icon to be displayed on the button.","pos":[3814,3862]},{"content":"CButton::SetImageList","pos":[3868,3889]},{"content":"Sets the image list of the button control.","pos":[3915,3957]},{"content":"CButton::SetNote","pos":[3963,3979]},{"content":"Sets the note on the current command link control.","pos":[4000,4050]},{"content":"CButton::SetSplitGlyph","pos":[4056,4078]},{"content":"Associates a specified glyph with the current split button control.","pos":[4105,4172]},{"content":"CButton::SetSplitImageList","pos":[4178,4204]},{"content":"Associates an image list with the current split button control.","pos":[4235,4298]},{"content":"CButton::SetSplitInfo","pos":[4304,4325]},{"content":"Specifies information that defines the current split button control.","pos":[4351,4419]},{"content":"CButton::SetSplitSize","pos":[4425,4446]},{"content":"Sets the bounding rectangle of the drop-down component of the current split button control.","pos":[4472,4563]},{"content":"CButton::SetSplitStyle","pos":[4569,4591]},{"content":"Sets the style of the current split button control.","pos":[4618,4669]},{"content":"CButton::SetState","pos":[4675,4692]},{"content":"Sets the highlighting state of a button control.","pos":[4714,4762]},{"content":"CButton::SetTextMargin","pos":[4768,4790]},{"content":"Sets the text margin of the button control.","pos":[4817,4860]},{"content":"Remarks","pos":[4870,4877]},{"content":"A button control is a small, rectangular child window that can be clicked on and off.","pos":[4881,4966]},{"content":"Buttons can be used alone or in groups and can either be labeled or appear without text.","pos":[4967,5055]},{"content":"A button typically changes appearance when the user clicks it.","pos":[5056,5118]},{"content":"Typical buttons are the check box, radio button, and pushbutton.","pos":[5125,5189]},{"content":"A <ph id=\"ph1\">`CButton`</ph> object can become any of these, according to the <bpt id=\"p1\">[</bpt>button style<ept id=\"p1\">](../../mfc/reference/button-styles.md)</ept> specified at its initialization by the <bpt id=\"p2\">[</bpt>Create<ept id=\"p2\">](#cbutton__create)</ept> member function.","pos":[5190,5386],"source":" A `CButton` object can become any of these, according to the [button style](../../mfc/reference/button-styles.md) specified at its initialization by the [Create](#cbutton__create) member function."},{"content":"In addition, the <bpt id=\"p1\">[</bpt>CBitmapButton<ept id=\"p1\">](../../mfc/reference/cbitmapbutton-class.md)</ept> class derived from <ph id=\"ph1\">`CButton`</ph> supports creation of button controls labeled with bitmap images instead of text.","pos":[5393,5579],"source":"In addition, the [CBitmapButton](../../mfc/reference/cbitmapbutton-class.md) class derived from `CButton` supports creation of button controls labeled with bitmap images instead of text."},{"content":"A <ph id=\"ph1\">`CBitmapButton`</ph> can have separate bitmaps for a button's up, down, focused, and disabled states.","pos":[5580,5678],"source":" A `CBitmapButton` can have separate bitmaps for a button's up, down, focused, and disabled states."},{"content":"You can create a button control either from a dialog template or directly in your code.","pos":[5685,5772]},{"content":"In both cases, first call the constructor <ph id=\"ph1\">`CButton`</ph> to construct the <ph id=\"ph2\">`CButton`</ph> object; then call the <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> member function to create the Windows button control and attach it to the <ph id=\"ph3\">`CButton`</ph> object.","pos":[5773,5976],"source":" In both cases, first call the constructor `CButton` to construct the `CButton` object; then call the **Create** member function to create the Windows button control and attach it to the `CButton` object."},{"content":"Construction can be a one-step process in a class derived from <ph id=\"ph1\">`CButton`</ph>.","pos":[5983,6056],"source":"Construction can be a one-step process in a class derived from `CButton`."},{"content":"Write a constructor for the derived class and call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> from within the constructor.","pos":[6057,6147],"source":" Write a constructor for the derived class and call **Create** from within the constructor."},{"pos":[6154,6422],"content":"If you want to handle Windows notification messages sent by a button control to its parent (usually a class derived from <bpt id=\"p1\">[</bpt>CDialog<ept id=\"p1\">](../../mfc/reference/cdialog-class.md)</ept>), add a message-map entry and message-handler member function to the parent class for each message.","source":"If you want to handle Windows notification messages sent by a button control to its parent (usually a class derived from [CDialog](../../mfc/reference/cdialog-class.md)), add a message-map entry and message-handler member function to the parent class for each message."},{"content":"Each message-map entry takes the following form:","pos":[6429,6477]},{"pos":[6484,6531],"content":"<bpt id=\"p1\">**</bpt>ON_<ept id=\"p1\">**</ept>Notification <bpt id=\"p2\">**</bpt>(<ept id=\"p2\">**</ept><ph id=\"ph1\">`id`</ph>, <ph id=\"ph2\">`memberFxn`</ph><bpt id=\"p3\">**</bpt>)<ept id=\"p3\">**</ept>","source":"**ON_**Notification **(**`id`, `memberFxn`**)**"},{"pos":[6538,6721],"content":"where <ph id=\"ph1\">`id`</ph> specifies the child window ID of the control sending the notification and <ph id=\"ph2\">`memberFxn`</ph> is the name of the parent member function you have written to handle the notification.","source":"where `id` specifies the child window ID of the control sending the notification and `memberFxn` is the name of the parent member function you have written to handle the notification."},{"content":"The parent's function prototype is as follows:","pos":[6728,6774]},{"pos":[6781,6820],"content":"<bpt id=\"p1\">**</bpt>afx_msg<ept id=\"p1\">**</ept> <ph id=\"ph1\">`void`</ph> <ph id=\"ph2\">`memberFxn`</ph> <bpt id=\"p2\">**</bpt>( );<ept id=\"p2\">**</ept>","source":"**afx_msg** `void` `memberFxn` **( );**"},{"content":"Potential message-map entries are as follows:","pos":[6827,6872]},{"content":"Map entry","pos":[6879,6888]},{"content":"Sent to parent when...","pos":[6889,6911]},{"content":"ON_BN_CLICKED","pos":[6967,6980]},{"content":"The user clicks a button.","pos":[6983,7008]},{"content":"ON_BN_DOUBLECLICKED","pos":[7015,7034]},{"content":"The user double-clicks a button.","pos":[7037,7069]},{"pos":[7077,7218],"content":"If you create a <ph id=\"ph1\">`CButton`</ph> object from a dialog resource, the <ph id=\"ph2\">`CButton`</ph> object is automatically destroyed when the user closes the dialog box.","source":"If you create a `CButton` object from a dialog resource, the `CButton` object is automatically destroyed when the user closes the dialog box."},{"content":"If you create a <ph id=\"ph1\">`CButton`</ph> object within a window, you may need to destroy it.","pos":[7225,7302],"source":"If you create a `CButton` object within a window, you may need to destroy it."},{"content":"If you create the <ph id=\"ph1\">`CButton`</ph> object on the heap by using the <bpt id=\"p1\">**</bpt>new<ept id=\"p1\">**</ept> function, you must call <bpt id=\"p2\">**</bpt>delete<ept id=\"p2\">**</ept> on the object to destroy it when the user closes the Windows button control.","pos":[7303,7482],"source":" If you create the `CButton` object on the heap by using the **new** function, you must call **delete** on the object to destroy it when the user closes the Windows button control."},{"content":"If you create the <ph id=\"ph1\">`CButton`</ph> object on the stack, or it is embedded in the parent dialog object, it is destroyed automatically.","pos":[7483,7609],"source":" If you create the `CButton` object on the stack, or it is embedded in the parent dialog object, it is destroyed automatically."},{"content":"Inheritance Hierarchy","pos":[7618,7639]},{"content":"CObject","pos":[7644,7651]},{"content":"CCmdTarget","pos":[7698,7708]},{"content":"CWnd","pos":[7758,7762]},{"content":"Requirements","pos":[7823,7835]},{"pos":[7839,7859],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxwin.h","source":"**Header:** afxwin.h"},{"pos":[7902,7918],"content":"CButton::CButton"},{"pos":[7922,7952],"content":"Constructs a <ph id=\"ph1\">`CButton`</ph> object.","source":"Constructs a `CButton` object."},{"content":"Example","pos":[7988,7995]},{"pos":[8010,8027],"content":"NVC_MFC_CButton#1"},{"pos":[8128,8143],"content":"CButton::Create"},{"pos":[8147,8222],"content":"Creates the Windows button control and attaches it to the <ph id=\"ph1\">`CButton`</ph> object.","source":"Creates the Windows button control and attaches it to the `CButton` object."},{"content":"Parameters","pos":[8379,8389]},{"content":"Specifies the button control's text.","pos":[8410,8446]},{"content":"Specifies the button control's style.","pos":[8466,8503]},{"content":"Apply any combination of <bpt id=\"p1\">[</bpt>button styles<ept id=\"p1\">](../../mfc/reference/button-styles.md)</ept> to the button.","pos":[8504,8597],"source":" Apply any combination of [button styles](../../mfc/reference/button-styles.md) to the button."},{"content":"Specifies the button control's size and position.","pos":[8614,8663]},{"content":"It can be either a <ph id=\"ph1\">`CRect`</ph> object or a <ph id=\"ph2\">`RECT`</ph> structure.","pos":[8664,8720],"source":" It can be either a `CRect` object or a `RECT` structure."},{"content":"Specifies the button control's parent window, usually a <ph id=\"ph1\">`CDialog`</ph>.","pos":[8743,8809],"source":" Specifies the button control's parent window, usually a `CDialog`."},{"content":"It must not be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[8810,8834],"source":" It must not be **NULL**."},{"content":"Specifies the button control's ID.","pos":[8850,8884]},{"content":"Return Value","pos":[8894,8906]},{"content":"Nonzero if successful; otherwise 0.","pos":[8910,8945]},{"content":"Remarks","pos":[8955,8962]},{"content":"You construct a <ph id=\"ph1\">`CButton`</ph> object in two steps.","pos":[8966,9012],"source":"You construct a `CButton` object in two steps."},{"content":"First, call the constructor and then call <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>, which creates the Windows button control and attaches it to the <ph id=\"ph1\">`CButton`</ph> object.","pos":[9013,9148],"source":" First, call the constructor and then call **Create**, which creates the Windows button control and attaches it to the `CButton` object."},{"pos":[9155,9284],"content":"If the <bpt id=\"p1\">**</bpt>WS_VISIBLE<ept id=\"p1\">**</ept> style is given, Windows sends the button control all the messages required to activate and show the button.","source":"If the **WS_VISIBLE** style is given, Windows sends the button control all the messages required to activate and show the button."},{"pos":[9291,9385],"content":"Apply the following <bpt id=\"p1\">[</bpt>window styles<ept id=\"p1\">](../../mfc/reference/window-styles.md)</ept> to a button control:","source":"Apply the following [window styles](../../mfc/reference/window-styles.md) to a button control:"},{"pos":[9393,9412],"content":"<bpt id=\"p1\">**</bpt>WS_CHILD<ept id=\"p1\">**</ept> Always","source":"**WS_CHILD** Always"},{"pos":[9420,9442],"content":"<bpt id=\"p1\">**</bpt>WS_VISIBLE<ept id=\"p1\">**</ept> Usually","source":"**WS_VISIBLE** Usually"},{"pos":[9450,9472],"content":"<bpt id=\"p1\">**</bpt>WS_DISABLED<ept id=\"p1\">**</ept> Rarely","source":"**WS_DISABLED** Rarely"},{"pos":[9480,9510],"content":"<bpt id=\"p1\">**</bpt>WS_GROUP<ept id=\"p1\">**</ept> To group controls","source":"**WS_GROUP** To group controls"},{"pos":[9518,9575],"content":"<bpt id=\"p1\">**</bpt>WS_TABSTOP<ept id=\"p1\">**</ept> To include the button in the tabbing order","source":"**WS_TABSTOP** To include the button in the tabbing order"},{"content":"Example","pos":[9585,9592]},{"pos":[9607,9624],"content":"NVC_MFC_CButton#2"},{"pos":[9727,9744],"content":"CButton::DrawItem"},{"content":"Called by the framework when a visual aspect of an owner-drawn button has changed.","pos":[9748,9830]},{"content":"Parameters","pos":[9913,9923]},{"content":"A long pointer to a <bpt id=\"p1\">[</bpt>DRAWITEMSTRUCT<ept id=\"p1\">](../../mfc/reference/drawitemstruct-structure.md)</ept> structure.","pos":[9949,10045],"source":" A long pointer to a [DRAWITEMSTRUCT](../../mfc/reference/drawitemstruct-structure.md) structure."},{"content":"The structure contains information about the item to be drawn and the type of drawing required.","pos":[10046,10141]},{"content":"Remarks","pos":[10151,10158]},{"content":"An owner-drawn button has the <bpt id=\"p1\">**</bpt>BS_OWNERDRAW<ept id=\"p1\">**</ept> style set.","pos":[10162,10219],"source":"An owner-drawn button has the **BS_OWNERDRAW** style set."},{"content":"Override this member function to implement drawing for an owner-drawn <ph id=\"ph1\">`CButton`</ph> object.","pos":[10220,10307],"source":" Override this member function to implement drawing for an owner-drawn `CButton` object."},{"content":"The application should restore all graphics device interface (GDI) objects selected for the display context supplied in <ph id=\"ph1\">`lpDrawItemStruct`</ph> before the member function terminates.","pos":[10308,10485],"source":" The application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct` before the member function terminates."},{"pos":[10492,10562],"content":"Also see the <bpt id=\"p1\">[</bpt>BS_<ept id=\"p1\">](../../mfc/reference/button-styles.md)</ept> style values.","source":"Also see the [BS_](../../mfc/reference/button-styles.md) style values."},{"content":"Example","pos":[10572,10579]},{"pos":[10594,10611],"content":"NVC_MFC_CButton#3"},{"pos":[10715,10733],"content":"CButton::GetBitmap"},{"pos":[10737,10881],"content":"Call this member function to get the handle of a bitmap, previously set with <bpt id=\"p1\">[</bpt>SetBitmap<ept id=\"p1\">](#cbutton__setbitmap)</ept>, that is associated with a button.","source":"Call this member function to get the handle of a bitmap, previously set with [SetBitmap](#cbutton__setbitmap), that is associated with a button."},{"content":"Return Value","pos":[10936,10948]},{"content":"A handle to a bitmap.","pos":[10952,10973]},{"content":"<bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no bitmap is previously specified.","pos":[10974,11020],"source":"**NULL** if no bitmap is previously specified."},{"content":"Example","pos":[11030,11037]},{"pos":[11052,11069],"content":"NVC_MFC_CButton#4"},{"pos":[11178,11201],"content":"CButton::GetButtonStyle"},{"content":"Retrieves information about the button control style.","pos":[11205,11258]},{"content":"Return Value","pos":[11315,11327]},{"content":"Returns the button styles for this <ph id=\"ph1\">`CButton`</ph> object.","pos":[11331,11383],"source":"Returns the button styles for this `CButton` object."},{"content":"This function returns only the <bpt id=\"p1\">[</bpt>BS_<ept id=\"p1\">](../../mfc/reference/button-styles.md)</ept> style values, not any of the other window styles.","pos":[11384,11508],"source":" This function returns only the [BS_](../../mfc/reference/button-styles.md) style values, not any of the other window styles."},{"content":"Example","pos":[11518,11525]},{"pos":[11540,11557],"content":"NVC_MFC_CButton#5"},{"pos":[11660,11677],"content":"CButton::GetCheck"},{"content":"Retrieves the check state of a radio button or check box.","pos":[11681,11738]},{"content":"Return Value","pos":[11788,11800]},{"pos":[11804,12015],"content":"The return value from a button control created with the <bpt id=\"p1\">**</bpt>BS_AUTOCHECKBOX<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>BS_AUTORADIOBUTTON<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>BS_AUTO3STATE<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>BS_CHECKBOX<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>BS_RADIOBUTTON<ept id=\"p5\">**</ept>, or <bpt id=\"p6\">**</bpt>BS_3STATE<ept id=\"p6\">**</ept> style is one of the following values:","source":"The return value from a button control created with the **BS_AUTOCHECKBOX**, **BS_AUTORADIOBUTTON**, **BS_AUTO3STATE**, **BS_CHECKBOX**, **BS_RADIOBUTTON**, or **BS_3STATE** style is one of the following values:"},{"content":"Value","pos":[12022,12027]},{"content":"Meaning","pos":[12028,12035]},{"content":"BST_UNCHECKED","pos":[12072,12085]},{"content":"Button state is unchecked.","pos":[12088,12114]},{"content":"BST_CHECKED","pos":[12121,12132]},{"content":"Button state is checked.","pos":[12135,12159]},{"content":"BST_INDETERMINATE","pos":[12166,12183]},{"pos":[12186,12294],"content":"Button state is indeterminate (applies only if the button has the <bpt id=\"p1\">**</bpt>BS_3STATE<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>BS_AUTO3STATE<ept id=\"p2\">**</ept> style).","source":"Button state is indeterminate (applies only if the button has the **BS_3STATE** or **BS_AUTO3STATE** style)."},{"pos":[12302,12375],"content":"If the button has any other style, the return value is <bpt id=\"p1\">**</bpt>BST_UNCHECKED<ept id=\"p1\">**</ept>.","source":"If the button has any other style, the return value is **BST_UNCHECKED**."},{"content":"Example","pos":[12385,12392]},{"pos":[12407,12424],"content":"NVC_MFC_CButton#6"},{"pos":[12528,12546],"content":"CButton::GetCursor"},{"pos":[12550,12694],"content":"Call this member function to get the handle of a cursor, previously set with <bpt id=\"p1\">[</bpt>SetCursor<ept id=\"p1\">](#cbutton__setcursor)</ept>, that is associated with a button.","source":"Call this member function to get the handle of a cursor, previously set with [SetCursor](#cbutton__setcursor), that is associated with a button."},{"content":"Return Value","pos":[12743,12755]},{"content":"A handle to a cursor image.","pos":[12759,12786]},{"content":"<bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no cursor is previously specified.","pos":[12787,12833],"source":"**NULL** if no cursor is previously specified."},{"content":"Example","pos":[12843,12850]},{"pos":[12865,12882],"content":"NVC_MFC_CButton#7"},{"pos":[12984,13000],"content":"CButton::GetIcon"},{"pos":[13004,13143],"content":"Call this member function to get the handle of an icon, previously set with <bpt id=\"p1\">[</bpt>SetIcon<ept id=\"p1\">](#cbutton__seticon)</ept>, that is associated with a button.","source":"Call this member function to get the handle of an icon, previously set with [SetIcon](#cbutton__seticon), that is associated with a button."},{"content":"Return Value","pos":[13194,13206]},{"content":"A handle to an icon.","pos":[13210,13230]},{"content":"<bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if no icon is previously specified.","pos":[13231,13275],"source":"**NULL** if no icon is previously specified."},{"content":"Example","pos":[13285,13292]},{"pos":[13307,13324],"content":"NVC_MFC_CButton#8"},{"pos":[13431,13452],"content":"CButton::GetIdealSize"},{"content":"Retrieves the ideal size for the button control.","pos":[13456,13504]},{"content":"Parameters","pos":[13561,13571]},{"content":"psize","pos":[13576,13581]},{"content":"A pointer to the current size of the button.","pos":[13586,13630]},{"content":"Return Value","pos":[13640,13652]},{"content":"Nonzero if successful; otherwise 0.","pos":[13656,13691]},{"content":"Remarks","pos":[13701,13708]},{"pos":[13712,13954],"content":"This member function emulates the functionality of the <bpt id=\"p1\">**</bpt>BCM_GETIDEALSIZE<ept id=\"p1\">**</ept> message, as described in the <bpt id=\"p2\">[</bpt>Buttons<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775943)</ept> section of the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the **BCM_GETIDEALSIZE** message, as described in the [Buttons](http://msdn.microsoft.com/library/windows/desktop/bb775943) section of the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[14002,14023],"content":"CButton::GetImageList"},{"content":"Call this method to get the image list from the button control.","pos":[14027,14090]},{"content":"Parameters","pos":[14170,14180]},{"content":"A pointer to the image list of the <ph id=\"ph1\">`CButton`</ph> object.","pos":[14206,14258],"source":" A pointer to the image list of the `CButton` object."},{"content":"Return Value","pos":[14268,14280]},{"content":"Nonzero if successful; otherwise 0.","pos":[14284,14319]},{"content":"Remarks","pos":[14329,14336]},{"pos":[14340,14582],"content":"This member function emulates the functionality of the <bpt id=\"p1\">**</bpt>BCM_GETIMAGELIST<ept id=\"p1\">**</ept> message, as described in the <bpt id=\"p2\">[</bpt>Buttons<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775943)</ept> section of the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the **BCM_GETIMAGELIST** message, as described in the [Buttons](http://msdn.microsoft.com/library/windows/desktop/bb775943) section of the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[14625,14641],"content":"CButton::GetNote"},{"content":"Retrieves the note text associated with the current command link control.","pos":[14645,14718]},{"content":"Parameters","pos":[14838,14848]},{"content":"Parameter","pos":[14855,14864]},{"content":"Description","pos":[14865,14876]},{"pos":[14919,14924],"content":"[out]"},{"content":"Pointer to a buffer, which the caller is responsible for allocating and deallocating.","pos":[14936,15021]},{"content":"If the return value is <ph id=\"ph1\">`true`</ph>, the buffer contains the note text that is associated with the current command link control; otherwise, the buffer is unchanged.","pos":[15022,15180],"source":" If the return value is `true`, the buffer contains the note text that is associated with the current command link control; otherwise, the buffer is unchanged."},{"pos":[15185,15194],"content":"[in, out]"},{"content":"A pointer to an unsigned integer variable.","pos":[15205,15247]},{"content":"When this method is called, the variable contains the size of the buffer specified by the <ph id=\"ph1\">`lpszNote`</ph> parameter.","pos":[15260,15371],"source":" When this method is called, the variable contains the size of the buffer specified by the `lpszNote` parameter."},{"content":"When this method returns, if the return value is <ph id=\"ph1\">`true`</ph> the variable contains the size of the note associated with the current command link control.","pos":[15384,15532],"source":" When this method returns, if the return value is `true` the variable contains the size of the note associated with the current command link control."},{"content":"If the return value is <ph id=\"ph1\">`false`</ph>, the variable contains the buffer size required to contain the note.","pos":[15533,15632],"source":" If the return value is `false`, the variable contains the buffer size required to contain the note."},{"content":"Return Value","pos":[15643,15655]},{"pos":[15659,15817],"content":"In the first overload, a <bpt id=\"p1\">[</bpt>CString<ept id=\"p1\">](../../atl-mfc-shared/using-cstring.md)</ept> object that contains the note text associated with the current command link control.","source":"In the first overload, a [CString](../../atl-mfc-shared/using-cstring.md) object that contains the note text associated with the current command link control."},{"content":"-or-","pos":[15824,15828]},{"pos":[15835,15915],"content":"In the second overload, <ph id=\"ph1\">`true`</ph> if this method is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"In the second overload, `true` if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[15925,15932]},{"pos":[15936,16033],"content":"Use this method only with controls whose button style is <ph id=\"ph1\">`BS_COMMANDLINK`</ph> or <ph id=\"ph2\">`BS_DEFCOMMANDLINK`</ph>.","source":"Use this method only with controls whose button style is `BS_COMMANDLINK` or `BS_DEFCOMMANDLINK`."},{"pos":[16040,16223],"content":"This method sends the <bpt id=\"p1\">[</bpt>BCM_GETNOTE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775965)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [BCM_GETNOTE](http://msdn.microsoft.com/library/windows/desktop/bb775965) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[16272,16294],"content":"CButton::GetNoteLength"},{"content":"Retrieves the length of the note text for the current command link control.","pos":[16298,16373]},{"content":"Return Value","pos":[16429,16441]},{"content":"The length of the note text, in 16-bit Unicode characters, for the current command link control.","pos":[16445,16541]},{"content":"Remarks","pos":[16551,16558]},{"pos":[16562,16659],"content":"Use this method only with controls whose button style is <ph id=\"ph1\">`BS_COMMANDLINK`</ph> or <ph id=\"ph2\">`BS_DEFCOMMANDLINK`</ph>.","source":"Use this method only with controls whose button style is `BS_COMMANDLINK` or `BS_DEFCOMMANDLINK`."},{"pos":[16666,16855],"content":"This method sends the <bpt id=\"p1\">[</bpt>BCM_GETNOTELENGTH<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775967)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [BCM_GETNOTELENGTH](http://msdn.microsoft.com/library/windows/desktop/bb775967) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[16904,16926],"content":"CButton::GetSplitGlyph"},{"content":"Retrieves the glyph associated with the current split button control.","pos":[16930,16999]},{"content":"Return Value","pos":[17056,17068]},{"content":"The glyph character associated with the current split button control.","pos":[17072,17141]},{"content":"Remarks","pos":[17151,17158]},{"content":"A glyph is the physical representation of a character in a particular font.","pos":[17162,17237]},{"content":"For example, a split button control might be decorated with the glyph of the Unicode check mark character (U+2713).","pos":[17238,17353]},{"pos":[17360,17457],"content":"Use this method only with controls whose button style is <ph id=\"ph1\">`BS_SPLITBUTTON`</ph> or <ph id=\"ph2\">`BS_DEFSPLITBUTTON`</ph>.","source":"Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`."},{"content":"This method initializes the <ph id=\"ph1\">`mask`</ph> member of a <bpt id=\"p1\">[</bpt>BUTTON_SPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id=\"ph2\">`BCSIF_GLYPH`</ph> flag, and then sends that structure in the <bpt id=\"p2\">[</bpt>BCM_GETSPLITINFO<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id=\"ph3\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[17464,17830],"source":"This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_GLYPH` flag, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"When the message function returns, this method retrieves the glyph from the <ph id=\"ph1\">`himlGlyph`</ph> member of the structure.","pos":[17831,17943],"source":" When the message function returns, this method retrieves the glyph from the `himlGlyph` member of the structure."},{"pos":[17996,18022],"content":"CButton::GetSplitImageList"},{"pos":[18026,18131],"content":"Retrieves the <bpt id=\"p1\">[</bpt>image list<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> for the current split button control.","source":"Retrieves the [image list](../../mfc/reference/cimagelist-class.md) for the current split button control."},{"content":"Return Value","pos":[18198,18210]},{"pos":[18214,18290],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> object.","source":"A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object."},{"content":"Remarks","pos":[18300,18307]},{"pos":[18311,18408],"content":"Use this method only with controls whose button style is <ph id=\"ph1\">`BS_SPLITBUTTON`</ph> or <ph id=\"ph2\">`BS_DEFSPLITBUTTON`</ph>.","source":"Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`."},{"content":"This method initializes the <ph id=\"ph1\">`mask`</ph> member of a <bpt id=\"p1\">[</bpt>BUTTON_SPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id=\"ph2\">`BCSIF_IMAGE`</ph> flag, and then sends that structure in the <bpt id=\"p2\">[</bpt>BCM_GETSPLITINFO<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id=\"ph3\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[18415,18781],"source":"This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_IMAGE` flag, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"When the message function returns, this method retrieves the image list from the <ph id=\"ph1\">`himlGlyph`</ph> member of the structure.","pos":[18782,18899],"source":" When the message function returns, this method retrieves the image list from the `himlGlyph` member of the structure."},{"pos":[18947,18968],"content":"CButton::GetSplitInfo"},{"content":"Retrieves parameters that determine how Windows draws the current split button control.","pos":[18972,19059]},{"content":"Parameters","pos":[19137,19147]},{"content":"Parameter","pos":[19154,19163]},{"content":"Description","pos":[19164,19175]},{"pos":[19218,19223],"content":"[out]"},{"content":"Pointer to a <bpt id=\"p1\">[</bpt>BUTTON_SPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure that receives information about the current split button control.","pos":[19232,19399],"source":"Pointer to a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure that receives information about the current split button control."},{"content":"The caller is responsible for allocating the structure.","pos":[19400,19455]},{"content":"Return Value","pos":[19466,19478]},{"pos":[19489,19538],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[19548,19555]},{"pos":[19559,19656],"content":"Use this method only with controls whose button style is <ph id=\"ph1\">`BS_SPLITBUTTON`</ph> or <ph id=\"ph2\">`BS_DEFSPLITBUTTON`</ph>.","source":"Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`."},{"pos":[19663,19851],"content":"This method sends the <bpt id=\"p1\">[</bpt>BCM_GETSPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[19899,19920],"content":"CButton::GetSplitSize"},{"content":"Retrieves the bounding rectangle of the drop-down component of the current split button control.","pos":[19924,20020]},{"content":"Parameters","pos":[20087,20097]},{"content":"Parameter","pos":[20104,20113]},{"content":"Description","pos":[20114,20125]},{"pos":[20168,20173],"content":"[out]"},{"pos":[20182,20317],"content":"Pointer to a <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure that receives the description of a rectangle.","source":"Pointer to a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure that receives the description of a rectangle."},{"content":"Return Value","pos":[20328,20340]},{"pos":[20351,20400],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[20410,20417]},{"pos":[20421,20518],"content":"Use this method only with controls whose button style is <ph id=\"ph1\">`BS_SPLITBUTTON`</ph> or <ph id=\"ph2\">`BS_DEFSPLITBUTTON`</ph>.","source":"Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`."},{"content":"When the split button control is expanded, it can display a drop-down component such as a list control or pager control.","pos":[20525,20645]},{"content":"This method retrieves the bounding rectangle that contains the drop-down component.","pos":[20646,20729]},{"content":"This method initializes the <ph id=\"ph1\">`mask`</ph> member of a <bpt id=\"p1\">[</bpt>BUTTON_SPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id=\"ph2\">`BCSIF_SIZE`</ph> flag, and then sends that structure in the <bpt id=\"p2\">[</bpt>BCM_GETSPLITINFO<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id=\"ph3\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[20736,21101],"source":"This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_SIZE` flag, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"When the message function returns, this method retrieves the bounding rectangle from the <ph id=\"ph1\">`size`</ph> member of the structure.","pos":[21102,21222],"source":" When the message function returns, this method retrieves the bounding rectangle from the `size` member of the structure."},{"pos":[21271,21293],"content":"CButton::GetSplitStyle"},{"content":"Retrieves the split button styles that define the current split button control.","pos":[21297,21376]},{"content":"Return Value","pos":[21432,21444]},{"content":"A bitwise combination of split button styles.","pos":[21448,21493]},{"content":"For more information, see the <ph id=\"ph1\">`uSplitStyle`</ph> member of the <bpt id=\"p1\">[</bpt>BUTTON_SPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure.","pos":[21494,21641],"source":" For more information, see the `uSplitStyle` member of the [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure."},{"content":"Remarks","pos":[21651,21658]},{"pos":[21662,21759],"content":"Use this method only with controls whose button style is <ph id=\"ph1\">`BS_SPLITBUTTON`</ph> or <ph id=\"ph2\">`BS_DEFSPLITBUTTON`</ph>.","source":"Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`."},{"content":"The split button styles specify the alignment, aspect ratio, and graphical format with which Windows draws a split button icon.","pos":[21766,21893]},{"content":"This method initializes the <ph id=\"ph1\">`mask`</ph> member of a <bpt id=\"p1\">[</bpt>BUTTON_SPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id=\"ph2\">`BCSIF_STYLE`</ph> flag, and then sends that structure in the <bpt id=\"p2\">[</bpt>BCM_GETSPLITINFO<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id=\"ph3\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[21900,22266],"source":"This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_STYLE` flag, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"When the message function returns, this method retrieves the split button styles from the <ph id=\"ph1\">`uSplitStyle`</ph> member of the structure.","pos":[22267,22395],"source":" When the message function returns, this method retrieves the split button styles from the `uSplitStyle` member of the structure."},{"pos":[22439,22456],"content":"CButton::GetState"},{"content":"Retrieves the state of a button control.","pos":[22460,22500]},{"content":"Return Value","pos":[22551,22563]},{"content":"A bit field that contains the combination of values that indicate the current state of a button control.","pos":[22567,22671]},{"content":"The following table lists possible values.","pos":[22672,22714]},{"content":"Button State","pos":[22721,22733]},{"content":"Value","pos":[22734,22739]},{"content":"Description","pos":[22740,22751]},{"content":"0x0000","pos":[22825,22831]},{"content":"The initial state.","pos":[22832,22850]},{"content":"0x0001","pos":[22869,22875]},{"content":"The button control is checked.","pos":[22876,22906]},{"content":"0x0002","pos":[22931,22937]},{"content":"The state is indeterminate (only possible when the button control has three states).","pos":[22938,23022]},{"content":"0x0004","pos":[23040,23046]},{"content":"The button control is pressed.","pos":[23047,23077]},{"content":"0x0008","pos":[23094,23100]},{"content":"The button control has the focus.","pos":[23101,23134]},{"content":"Remarks","pos":[23145,23152]},{"content":"A button control with the <ph id=\"ph1\">`BS_3STATE`</ph> or <ph id=\"ph2\">`BS_AUTO3STATE`</ph> button style creates a check box that has a third state that is named the indeterminate state.","pos":[23156,23307],"source":"A button control with the `BS_3STATE` or `BS_AUTO3STATE` button style creates a check box that has a third state that is named the indeterminate state."},{"content":"The indeterminate state indicates that the check box is neither checked nor unchecked.","pos":[23308,23394]},{"content":"Example","pos":[23404,23411]},{"pos":[23426,23443],"content":"NVC_MFC_CButton#9"},{"pos":[23551,23573],"content":"CButton::GetTextMargin"},{"pos":[23577,23641],"content":"Call this method to get the text margin of the <ph id=\"ph1\">`CButton`</ph> object.","source":"Call this method to get the text margin of the `CButton` object."},{"content":"Parameters","pos":[23701,23711]},{"content":"A pointer to the text margin of the <ph id=\"ph1\">`CButton`</ph> object.","pos":[23728,23781],"source":" A pointer to the text margin of the `CButton` object."},{"content":"Return Value","pos":[23791,23803]},{"content":"Returns the text margin.","pos":[23807,23831]},{"content":"Remarks","pos":[23841,23848]},{"content":"Nonzero if successful; otherwise 0.","pos":[23852,23887]},{"content":"Remarks","pos":[23897,23904]},{"pos":[23908,24151],"content":"This member function emulates the functionality of the <bpt id=\"p1\">**</bpt>BCM_GETTEXTMARGIN<ept id=\"p1\">**</ept> message, as described in the <bpt id=\"p2\">[</bpt>Buttons<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775943)</ept> section of the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the **BCM_GETTEXTMARGIN** message, as described in the [Buttons](http://msdn.microsoft.com/library/windows/desktop/bb775943) section of the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[24196,24214],"content":"CButton::SetBitmap"},{"content":"Call this member function to associate a new bitmap with the button.","pos":[24218,24286]},{"content":"Parameters","pos":[24347,24357]},{"content":"The handle of a bitmap.","pos":[24374,24397]},{"content":"Return Value","pos":[24407,24419]},{"content":"The handle of a bitmap previously associated with the button.","pos":[24423,24484]},{"content":"Remarks","pos":[24494,24501]},{"content":"The bitmap will be automatically placed on the face of the button, centered by default.","pos":[24505,24592]},{"content":"If the bitmap is too large for the button, it will be clipped on either side.","pos":[24593,24670]},{"content":"You can choose other alignment options, including the following:","pos":[24671,24735]},{"content":"BS_TOP","pos":[24745,24751]},{"content":"BS_LEFT","pos":[24763,24770]},{"content":"BS_RIGHT","pos":[24782,24790]},{"content":"BS_CENTER","pos":[24802,24811]},{"content":"BS_BOTTOM","pos":[24823,24832]},{"content":"BS_VCENTER","pos":[24844,24854]},{"content":"Unlike <bpt id=\"p1\">[</bpt>CBitmapButton<ept id=\"p1\">](../../mfc/reference/cbitmapbutton-class.md)</ept>, which uses four bitmaps per button, <ph id=\"ph1\">`SetBitmap`</ph> uses only one bitmap per the button.","pos":[24863,25015],"source":"Unlike [CBitmapButton](../../mfc/reference/cbitmapbutton-class.md), which uses four bitmaps per button, `SetBitmap` uses only one bitmap per the button."},{"content":"When the button is pressed, the bitmap appears to shift down and to the right.","pos":[25016,25094]},{"content":"You are responsible for releasing the bitmap when you are done with it.","pos":[25101,25172]},{"content":"Example","pos":[25182,25189]},{"pos":[25204,25221],"content":"NVC_MFC_CButton#4"},{"pos":[25330,25353],"content":"CButton::SetButtonStyle"},{"content":"Changes the style of a button.","pos":[25357,25387]},{"content":"Parameters","pos":[25478,25488]},{"content":"Specifies the <bpt id=\"p1\">[</bpt>button style<ept id=\"p1\">](../../mfc/reference/button-styles.md)</ept>.","pos":[25504,25571],"source":" Specifies the [button style](../../mfc/reference/button-styles.md)."},{"content":"Specifies whether the button is to be redrawn.","pos":[25591,25637]},{"content":"A nonzero value redraws the button.","pos":[25638,25673]},{"content":"A 0 value does not redraw the button.","pos":[25674,25711]},{"content":"The button is redrawn by default.","pos":[25712,25745]},{"content":"Remarks","pos":[25755,25762]},{"content":"Use the <ph id=\"ph1\">`GetButtonStyle`</ph> member function to retrieve the button style.","pos":[25766,25836],"source":"Use the `GetButtonStyle` member function to retrieve the button style."},{"content":"The low-order word of the complete button style is the button-specific style.","pos":[25837,25914]},{"content":"Example","pos":[25924,25931]},{"pos":[25946,25963],"content":"NVC_MFC_CButton#5"},{"pos":[26066,26083],"content":"CButton::SetCheck"},{"content":"Sets or resets the check state of a radio button or check box.","pos":[26087,26149]},{"content":"Parameters","pos":[26201,26211]},{"content":"Specifies the check state.","pos":[26227,26253]},{"content":"This parameter can be one of the following:","pos":[26254,26297]},{"content":"Value","pos":[26304,26309]},{"content":"Meaning","pos":[26310,26317]},{"content":"BST_UNCHECKED","pos":[26354,26367]},{"content":"Set the button state to unchecked.","pos":[26370,26404]},{"content":"BST_CHECKED","pos":[26411,26422]},{"content":"Set the button state to checked.","pos":[26425,26457]},{"content":"BST_INDETERMINATE","pos":[26464,26481]},{"content":"Set the button state to indeterminate.","pos":[26484,26522]},{"content":"This value can be used only if the button has the <bpt id=\"p1\">**</bpt>BS_3STATE<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>BS_AUTO3STATE<ept id=\"p2\">**</ept> style.","pos":[26523,26614],"source":" This value can be used only if the button has the **BS_3STATE** or **BS_AUTO3STATE** style."},{"content":"Remarks","pos":[26625,26632]},{"content":"This member function has no effect on a pushbutton.","pos":[26636,26687]},{"content":"Example","pos":[26697,26704]},{"pos":[26719,26736],"content":"NVC_MFC_CButton#6"},{"pos":[26840,26858],"content":"CButton::SetCursor"},{"content":"Call this member function to associate a new cursor with the button.","pos":[26862,26930]},{"content":"Parameters","pos":[26991,27001]},{"content":"The handle of a cursor.","pos":[27018,27041]},{"content":"Return Value","pos":[27051,27063]},{"content":"The handle of a cursor previously associated with the button.","pos":[27067,27128]},{"content":"Remarks","pos":[27138,27145]},{"content":"The cursor will be automatically placed on the face of the button, centered by default.","pos":[27149,27236]},{"content":"If the cursor is too large for the button, it will be clipped on either side.","pos":[27237,27314]},{"content":"You can choose other alignment options, including the following:","pos":[27315,27379]},{"content":"BS_TOP","pos":[27389,27395]},{"content":"BS_LEFT","pos":[27407,27414]},{"content":"BS_RIGHT","pos":[27426,27434]},{"content":"BS_CENTER","pos":[27446,27455]},{"content":"BS_BOTTOM","pos":[27467,27476]},{"content":"BS_VCENTER","pos":[27488,27498]},{"content":"Unlike <bpt id=\"p1\">[</bpt>CBitmapButton<ept id=\"p1\">](../../mfc/reference/cbitmapbutton-class.md)</ept>, which uses four bitmaps per button, <ph id=\"ph1\">`SetCursor`</ph> uses only one cursor per the button.","pos":[27507,27659],"source":"Unlike [CBitmapButton](../../mfc/reference/cbitmapbutton-class.md), which uses four bitmaps per button, `SetCursor` uses only one cursor per the button."},{"content":"When the button is pressed, the cursor appears to shift down and to the right.","pos":[27660,27738]},{"content":"Example","pos":[27748,27755]},{"pos":[27770,27787],"content":"NVC_MFC_CButton#7"},{"pos":[27898,27923],"content":"CButton::SetDropDownState"},{"content":"Sets the drop-down state of the current split button control.","pos":[27927,27988]},{"content":"Parameters","pos":[28052,28062]},{"content":"Parameter","pos":[28069,28078]},{"content":"Description","pos":[28079,28090]},{"pos":[28133,28137],"content":"[in]"},{"pos":[28157,28211],"content":"to set <ph id=\"ph1\">`BST_DROPDOWNPUSHED`</ph> state; otherwise, <ph id=\"ph2\">`false`</ph>.","source":" to set `BST_DROPDOWNPUSHED` state; otherwise, `false`."},{"content":"Return Value","pos":[28222,28234]},{"pos":[28245,28294],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[28304,28311]},{"content":"A split button control has a style of <ph id=\"ph1\">`BS_SPLITBUTTON`</ph> or <ph id=\"ph2\">`BS_DEFSPLITBUTTON`</ph> and consists of a button and a drop-down arrow to its right.","pos":[28315,28453],"source":"A split button control has a style of `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON` and consists of a button and a drop-down arrow to its right."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Button Styles<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775951)</ept>.","pos":[28454,28556],"source":" For more information, see [Button Styles](http://msdn.microsoft.com/library/windows/desktop/bb775951)."},{"content":"Usually, the drop-down state is set when the user clicks the drop-down arrow.","pos":[28557,28634]},{"content":"Use this method to programmatically set the drop-down state of the control.","pos":[28635,28710]},{"content":"The drop-down arrow is drawn shaded to indicate the state.","pos":[28711,28769]},{"pos":[28776,28968],"content":"This method sends the <bpt id=\"p1\">[</bpt>BCM_SETDROPDOWNSTATE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775973)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [BCM_SETDROPDOWNSTATE](http://msdn.microsoft.com/library/windows/desktop/bb775973) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[28978,28985]},{"content":"The following code example defines the variable, <ph id=\"ph1\">`m_splitButton`</ph>, that is used to programmatically access the split button control.","pos":[28989,29120],"source":"The following code example defines the variable, `m_splitButton`, that is used to programmatically access the split button control."},{"content":"This variable is used in the following example.","pos":[29121,29168]},{"pos":[29186,29206],"content":"NVC_MFC_CButton_s1#1"},{"content":"Example","pos":[29274,29281]},{"content":"The following code example sets the state of the split button control to indicate that the drop-down arrow is pushed.","pos":[29285,29402]},{"pos":[29420,29440],"content":"NVC_MFC_CButton_s1#6"},{"pos":[29556,29585],"content":"CButton::SetElevationRequired"},{"pos":[29589,29731],"content":"Sets the state of the current button control to <ph id=\"ph1\">`elevation required`</ph>, which is necessary for the control to display an elevated security icon.","source":"Sets the state of the current button control to `elevation required`, which is necessary for the control to display an elevated security icon."},{"content":"Parameters","pos":[29808,29818]},{"content":"Parameter","pos":[29825,29834]},{"content":"Description","pos":[29835,29846]},{"pos":[29889,29893],"content":"[in]"},{"pos":[29922,29976],"content":"to set <ph id=\"ph1\">`elevation required`</ph> state; otherwise, <ph id=\"ph2\">`false`</ph>.","source":" to set `elevation required` state; otherwise, `false`."},{"content":"Return Value","pos":[29987,29999]},{"pos":[30010,30059],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[30069,30076]},{"content":"If a button or command link control requires elevated security permission to perform an action, set the control to <ph id=\"ph1\">`elevation required`</ph> state.","pos":[30080,30222],"source":"If a button or command link control requires elevated security permission to perform an action, set the control to `elevation required` state."},{"content":"Subsequently, Windows displays the User Account Control (UAC) shield icon on the control.","pos":[30223,30312]},{"content":"For more information, see \"User Account Control\" at <bpt id=\"p1\">[</bpt>MSDN<ept id=\"p1\">](http://go.microsoft.com/fwlink/linkid=18507)</ept>.","pos":[30313,30417],"source":" For more information, see \"User Account Control\" at [MSDN](http://go.microsoft.com/fwlink/linkid=18507)."},{"pos":[30424,30609],"content":"This method sends the <bpt id=\"p1\">[</bpt>BCM_SETSHIELD<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775979)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [BCM_SETSHIELD](http://msdn.microsoft.com/library/windows/desktop/bb775979) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[30652,30668],"content":"CButton::SetIcon"},{"content":"Call this member function to associate a new icon with the button.","pos":[30672,30738]},{"content":"Parameters","pos":[30791,30801]},{"content":"The handle of an icon.","pos":[30816,30838]},{"content":"Return Value","pos":[30848,30860]},{"content":"The handle of an icon previously associated with the button.","pos":[30864,30924]},{"content":"Remarks","pos":[30934,30941]},{"content":"The icon will be automatically placed on the face of the button, centered by default.","pos":[30945,31030]},{"content":"If the icon is too large for the button, it will be clipped on either side.","pos":[31031,31106]},{"content":"You can choose other alignment options, including the following:","pos":[31107,31171]},{"content":"BS_TOP","pos":[31181,31187]},{"content":"BS_LEFT","pos":[31199,31206]},{"content":"BS_RIGHT","pos":[31218,31226]},{"content":"BS_CENTER","pos":[31238,31247]},{"content":"BS_BOTTOM","pos":[31259,31268]},{"content":"BS_VCENTER","pos":[31280,31290]},{"content":"Unlike <bpt id=\"p1\">[</bpt>CBitmapButton<ept id=\"p1\">](../../mfc/reference/cbitmapbutton-class.md)</ept>, which uses four bitmaps per button, <ph id=\"ph1\">`SetIcon`</ph> uses only one icon per the button.","pos":[31299,31447],"source":"Unlike [CBitmapButton](../../mfc/reference/cbitmapbutton-class.md), which uses four bitmaps per button, `SetIcon` uses only one icon per the button."},{"content":"When the button is pressed, the icon appears to shift down and to the right.","pos":[31448,31524]},{"content":"Example","pos":[31534,31541]},{"pos":[31556,31573],"content":"NVC_MFC_CButton#8"},{"pos":[31680,31701],"content":"CButton::SetImageList"},{"pos":[31705,31768],"content":"Call this method to set the image list of the <ph id=\"ph1\">`CButton`</ph> object.","source":"Call this method to set the image list of the `CButton` object."},{"content":"Parameters","pos":[31848,31858]},{"content":"A pointer to the new image list.","pos":[31884,31916]},{"content":"Return Value","pos":[31926,31938]},{"pos":[31942,31992],"content":"Returns <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> on success, <bpt id=\"p2\">**</bpt>FALSE<ept id=\"p2\">**</ept> on failure.","source":"Returns **TRUE** on success, **FALSE** on failure."},{"content":"Remarks","pos":[32002,32009]},{"pos":[32013,32255],"content":"This member function emulates the functionality of the <bpt id=\"p1\">**</bpt>BCM_SETIMAGELIST<ept id=\"p1\">**</ept> message, as described in the <bpt id=\"p2\">[</bpt>Buttons<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775943)</ept> section of the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the **BCM_SETIMAGELIST** message, as described in the [Buttons](http://msdn.microsoft.com/library/windows/desktop/bb775943) section of the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[32298,32314],"content":"CButton::SetNote"},{"content":"Sets the note text for the current command link control.","pos":[32318,32374]},{"content":"Parameters","pos":[32431,32441]},{"content":"Parameter","pos":[32448,32457]},{"content":"Description","pos":[32458,32469]},{"pos":[32512,32516],"content":"[in]"},{"content":"Pointer to a Unicode string that is set as the note text for the command link control.","pos":[32528,32614]},{"content":"Return Value","pos":[32625,32637]},{"pos":[32648,32697],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[32707,32714]},{"pos":[32718,32815],"content":"Use this method only with controls whose button style is <ph id=\"ph1\">`BS_COMMANDLINK`</ph> or <ph id=\"ph2\">`BS_DEFCOMMANDLINK`</ph>.","source":"Use this method only with controls whose button style is `BS_COMMANDLINK` or `BS_DEFCOMMANDLINK`."},{"pos":[32822,33005],"content":"This method sends the <bpt id=\"p1\">[</bpt>BCM_SETNOTE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775977)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [BCM_SETNOTE](http://msdn.microsoft.com/library/windows/desktop/bb775977) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[33015,33022]},{"content":"The following code example defines the variable, <ph id=\"ph1\">`m_cmdLink`</ph>, that is used to programmatically access the command link control.","pos":[33026,33153],"source":"The following code example defines the variable, `m_cmdLink`, that is used to programmatically access the command link control."},{"content":"This variable is used in the following example.","pos":[33154,33201]},{"pos":[33219,33239],"content":"NVC_MFC_CButton_s1#1"},{"content":"Example","pos":[33307,33314]},{"content":"The following code example sets the note text for the command link control.","pos":[33318,33393]},{"pos":[33411,33431],"content":"NVC_MFC_CButton_s1#7"},{"pos":[33540,33562],"content":"CButton::SetSplitGlyph"},{"content":"Associates a specified glyph with the current split button control.","pos":[33566,33633]},{"content":"Parameters","pos":[33693,33703]},{"content":"Parameter","pos":[33710,33719]},{"content":"Description","pos":[33720,33731]},{"pos":[33774,33778],"content":"[in]"},{"content":"A character that specifies the glyph to use as the split button drop-down arrow.","pos":[33789,33869]},{"content":"Return Value","pos":[33880,33892]},{"pos":[33903,33952],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[33962,33969]},{"pos":[33973,34075],"content":"Use this method only with controls that have the button style <ph id=\"ph1\">`BS_SPLITBUTTON`</ph> or <ph id=\"ph2\">`BS_DEFSPLITBUTTON`</ph>.","source":"Use this method only with controls that have the button style `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`."},{"content":"A glyph is the physical representation of a character in a particular font.","pos":[34082,34157]},{"content":"The <ph id=\"ph1\">`chGlyph`</ph>parameter is not used as the glyph, but is instead used to select a glyph from a set of system-defined glyphs.","pos":[34158,34281],"source":" The `chGlyph`parameter is not used as the glyph, but is instead used to select a glyph from a set of system-defined glyphs."},{"content":"The default drop-down arrow glyph is specified by a character '6', and resembles the Unicode character BLACK DOWN-POINTING TRIANGLE (U+25BC).","pos":[34282,34423]},{"pos":[34430,34852],"content":"This method initializes the <ph id=\"ph1\">`mask`</ph> member of a <bpt id=\"p1\">[</bpt>BUTTON_SPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id=\"ph2\">`BCSIF_GLYPH`</ph> flag and the <ph id=\"ph3\">`himlGlyph`</ph> member with the <ph id=\"ph4\">`chGlyph`</ph> parameter, and then sends that structure in the <bpt id=\"p2\">[</bpt>BCM_GETSPLITINFO<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id=\"ph5\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_GLYPH` flag and the `himlGlyph` member with the `chGlyph` parameter, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[34905,34931],"content":"CButton::SetSplitImageList"},{"pos":[34935,35041],"content":"Associates an <bpt id=\"p1\">[</bpt>image list<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> with the current split button control.","source":"Associates an [image list](../../mfc/reference/cimagelist-class.md) with the current split button control."},{"content":"Parameters","pos":[35119,35129]},{"content":"Parameter","pos":[35136,35145]},{"content":"Description","pos":[35146,35157]},{"pos":[35200,35204],"content":"[in]"},{"pos":[35223,35343],"content":"Pointer to a <bpt id=\"p1\">[</bpt>CImageList<ept id=\"p1\">](../../mfc/reference/cimagelist-class.md)</ept> object to assign to the current split button control.","source":"Pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object to assign to the current split button control."},{"content":"Return Value","pos":[35354,35366]},{"pos":[35377,35426],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[35436,35443]},{"pos":[35447,35544],"content":"Use this method only with controls whose button style is <ph id=\"ph1\">`BS_SPLITBUTTON`</ph> or <ph id=\"ph2\">`BS_DEFSPLITBUTTON`</ph>.","source":"Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`."},{"pos":[35551,35981],"content":"This method initializes the <ph id=\"ph1\">`mask`</ph> member of a <bpt id=\"p1\">[</bpt>BUTTON_SPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id=\"ph2\">`BCSIF_IMAGE`</ph> flag and the <ph id=\"ph3\">`himlGlyph`</ph> member with the <ph id=\"ph4\">`pSplitImageList`</ph> parameter, and then sends that structure in the <bpt id=\"p2\">[</bpt>BCM_GETSPLITINFO<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id=\"ph5\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_IMAGE` flag and the `himlGlyph` member with the `pSplitImageList` parameter, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[36029,36050],"content":"CButton::SetSplitInfo"},{"content":"Specifies parameters that determine how Windows draws the current split button control.","pos":[36054,36141]},{"content":"Parameters","pos":[36210,36220]},{"content":"Parameter","pos":[36227,36236]},{"content":"Description","pos":[36237,36248]},{"pos":[36291,36295],"content":"[in]"},{"pos":[36304,36452],"content":"Pointer to a <bpt id=\"p1\">[</bpt>BUTTON_SPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure that defines the current split button control.","source":"Pointer to a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure that defines the current split button control."},{"content":"Return Value","pos":[36463,36475]},{"pos":[36486,36535],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[36545,36552]},{"pos":[36556,36653],"content":"Use this method only with controls whose button style is <ph id=\"ph1\">`BS_SPLITBUTTON`</ph> or <ph id=\"ph2\">`BS_DEFSPLITBUTTON`</ph>.","source":"Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`."},{"pos":[36660,36848],"content":"This method sends the <bpt id=\"p1\">[</bpt>BCM_SETSPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775981)</ept> message, which is described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method sends the [BCM_SETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775981) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[36858,36865]},{"pos":[36869,37000],"content":"The following code example defines the variable, <ph id=\"ph1\">`m_splitButton`</ph>, that is used to programmatically access the split button control.","source":"The following code example defines the variable, `m_splitButton`, that is used to programmatically access the split button control."},{"pos":[37018,37038],"content":"NVC_MFC_CButton_s1#1"},{"content":"Example","pos":[37106,37113]},{"content":"The following code example changes the glyph that is used for the split button drop-down arrow.","pos":[37117,37212]},{"content":"The example substitutes an up-pointing triangle glyph for the default down-pointing triangle glyph.","pos":[37213,37312]},{"content":"The glyph that is displayed depends on the character that you specify in the <ph id=\"ph1\">`himlGlyph`</ph> member of the <ph id=\"ph2\">`BUTTON_SPLITINFO`</ph> structure.","pos":[37313,37445],"source":" The glyph that is displayed depends on the character that you specify in the `himlGlyph` member of the `BUTTON_SPLITINFO` structure."},{"content":"The down-pointing triangle glyph is specified by a character '6' and the up-pointing triangle glyph is specified by a character '5'.","pos":[37446,37578]},{"content":"For comparison, see the convenience method, <bpt id=\"p1\">[</bpt>CButton::SetSplitGlyph<ept id=\"p1\">](#cbutton__setsplitglyph)</ept>.","pos":[37579,37673],"source":" For comparison, see the convenience method, [CButton::SetSplitGlyph](#cbutton__setsplitglyph)."},{"pos":[37691,37711],"content":"NVC_MFC_CButton_s1#4"},{"pos":[37819,37840],"content":"CButton::SetSplitSize"},{"content":"Sets the bounding rectangle of the drop-down component of the current split button control.","pos":[37844,37935]},{"content":"Parameters","pos":[37993,38003]},{"content":"Parameter","pos":[38010,38019]},{"content":"Description","pos":[38020,38031]},{"pos":[38074,38078],"content":"[in]"},{"pos":[38087,38213],"content":"Pointer to a <bpt id=\"p1\">[</bpt>SIZE<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/dd145106)</ept> structure that describes a bounding rectangle.","source":"Pointer to a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure that describes a bounding rectangle."},{"content":"Return Value","pos":[38224,38236]},{"pos":[38247,38296],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[38306,38313]},{"pos":[38317,38414],"content":"Use this method only with controls whose button style is <ph id=\"ph1\">`BS_SPLITBUTTON`</ph> or <ph id=\"ph2\">`BS_DEFSPLITBUTTON`</ph>.","source":"Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`."},{"content":"When the split button control is expanded, it can display a drop-down component such as a list control or pager control.","pos":[38421,38541]},{"content":"This method specifies the size of the bounding rectangle that contains the drop-down component.","pos":[38542,38637]},{"pos":[38644,39058],"content":"This method initializes the <ph id=\"ph1\">`mask`</ph> member of a <bpt id=\"p1\">[</bpt>BUTTON_SPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id=\"ph2\">`BCSIF_SIZE`</ph> flag and the <ph id=\"ph3\">`size`</ph> member with the <ph id=\"ph4\">`pSize`</ph> parameter, and then sends that structure in the <bpt id=\"p2\">[</bpt>BCM_GETSPLITINFO<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id=\"ph5\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_SIZE` flag and the `size` member with the `pSize` parameter, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[39068,39075]},{"content":"The following code example defines the variable, <ph id=\"ph1\">`m_splitButton`</ph>, that is used to programmatically access the split button control.","pos":[39079,39210],"source":"The following code example defines the variable, `m_splitButton`, that is used to programmatically access the split button control."},{"content":"This variable is used in the following example.","pos":[39211,39258]},{"pos":[39276,39296],"content":"NVC_MFC_CButton_s1#1"},{"content":"Example","pos":[39364,39371]},{"content":"The following code example doubles the size of the split button drop-down arrow.","pos":[39375,39455]},{"pos":[39473,39493],"content":"NVC_MFC_CButton_s1#5"},{"pos":[39602,39624],"content":"CButton::SetSplitStyle"},{"content":"Sets the style of the current split button control.","pos":[39628,39679]},{"content":"Parameters","pos":[39742,39752]},{"content":"Parameter","pos":[39759,39768]},{"content":"Description","pos":[39769,39780]},{"pos":[39823,39827],"content":"[in]"},{"content":"A bitwise combination of split button styles.","pos":[39842,39887]},{"content":"For more information, see the <ph id=\"ph1\">`uSplitStyle`</ph> member of the <bpt id=\"p1\">[</bpt>BUTTON_SPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure.","pos":[39888,40035],"source":" For more information, see the `uSplitStyle` member of the [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure."},{"content":"Return Value","pos":[40046,40058]},{"pos":[40069,40118],"content":"if this method is successful; otherwise, <ph id=\"ph1\">`false`</ph>.","source":" if this method is successful; otherwise, `false`."},{"content":"Remarks","pos":[40128,40135]},{"pos":[40139,40236],"content":"Use this method only with controls whose button style is <ph id=\"ph1\">`BS_SPLITBUTTON`</ph> or <ph id=\"ph2\">`BS_DEFSPLITBUTTON`</ph>.","source":"Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`."},{"content":"The split button styles specify the alignment, aspect ratio, and graphical format with which Windows draws a split button icon.","pos":[40243,40370]},{"content":"For more information, see the <ph id=\"ph1\">`uSplitStyle`</ph> member of the <bpt id=\"p1\">[</bpt>BUTTON_SPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure.","pos":[40371,40518],"source":" For more information, see the `uSplitStyle` member of the [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure."},{"pos":[40525,40953],"content":"This method initializes the <ph id=\"ph1\">`mask`</ph> member of a <bpt id=\"p1\">[</bpt>BUTTON_SPLITINFO<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/bb775955)</ept> structure with the <ph id=\"ph2\">`BCSIF_STYLE`</ph> flag and the <ph id=\"ph3\">`uSplitStyle`</ph> member with the <ph id=\"ph4\">`uSplitStyle`</ph> parameter, and then sends that structure in the <bpt id=\"p2\">[</bpt>BCM_GETSPLITINFO<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775969)</ept> message that is described in the <ph id=\"ph5\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_STYLE` flag and the `uSplitStyle` member with the `uSplitStyle` parameter, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"Example","pos":[40963,40970]},{"pos":[40974,41105],"content":"The following code example defines the variable, <ph id=\"ph1\">`m_splitButton`</ph>, that is used to programmatically access the split button control.","source":"The following code example defines the variable, `m_splitButton`, that is used to programmatically access the split button control."},{"pos":[41123,41143],"content":"NVC_MFC_CButton_s1#1"},{"content":"Example","pos":[41211,41218]},{"content":"The following code example sets the style of the split button drop-down arrow.","pos":[41222,41300]},{"content":"The <ph id=\"ph1\">`BCSS_ALIGNLEFT`</ph> style displays the arrow on the left side of the button, and the <ph id=\"ph2\">`BCSS_STRETCH`</ph> style retains the drop-down arrow's proportions when you resize the button.","pos":[41301,41477],"source":" The `BCSS_ALIGNLEFT` style displays the arrow on the left side of the button, and the `BCSS_STRETCH` style retains the drop-down arrow's proportions when you resize the button."},{"pos":[41495,41515],"content":"NVC_MFC_CButton_s1#3"},{"pos":[41619,41636],"content":"CButton::SetState"},{"content":"Sets whether a button control is highlighted or not.","pos":[41640,41692]},{"content":"Parameters","pos":[41749,41759]},{"content":"bHighlight","pos":[41764,41774]},{"content":"Specifies whether the button is to be highlighted.","pos":[41779,41829]},{"content":"A nonzero value highlights the button; a 0 value removes any highlighting.","pos":[41830,41904]},{"content":"Remarks","pos":[41914,41921]},{"content":"Highlighting affects the exterior of a button control.","pos":[41925,41979]},{"content":"It has no effect on the check state of a radio button or check box.","pos":[41980,42047]},{"content":"A button control is automatically highlighted when the user clicks and holds the left mouse button.","pos":[42054,42153]},{"content":"The highlighting is removed when the user releases the mouse button.","pos":[42154,42222]},{"content":"Example","pos":[42232,42239]},{"pos":[42254,42271],"content":"NVC_MFC_CButton#9"},{"pos":[42379,42401],"content":"CButton::SetTextMargin"},{"pos":[42405,42469],"content":"Call this method to set the text margin of the <ph id=\"ph1\">`CButton`</ph> object.","source":"Call this method to set the text margin of the `CButton` object."},{"content":"Parameters","pos":[42529,42539]},{"content":"A pointer to the new text margin.","pos":[42556,42589]},{"content":"Return Value","pos":[42599,42611]},{"content":"Returns TRUE on success, FALSE on failure.","pos":[42615,42657]},{"content":"Remarks","pos":[42667,42674]},{"pos":[42678,42921],"content":"This member function emulates the functionality of the <bpt id=\"p1\">**</bpt>BCM_SETTEXTMARGIN<ept id=\"p1\">**</ept> message, as described in the <bpt id=\"p2\">[</bpt>Buttons<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/bb775943)</ept> section of the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"This member function emulates the functionality of the **BCM_SETTEXTMARGIN** message, as described in the [Buttons](http://msdn.microsoft.com/library/windows/desktop/bb775943) section of the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"See Also","pos":[42930,42938]},{"content":"CWnd Class","pos":[42943,42953]},{"content":"Hierarchy Chart","pos":[42995,43010]},{"content":"CWnd Class","pos":[43047,43057]},{"content":"CComboBox Class","pos":[43099,43114]},{"content":"CEdit Class","pos":[43161,43172]},{"content":"CListBox Class","pos":[43215,43229]},{"content":"CScrollBar Class","pos":[43275,43291]},{"content":"CStatic Class","pos":[43339,43352]},{"content":"CBitmapButton Class","pos":[43397,43416]},{"content":"CDialog Class","pos":[43467,43480]}],"content":"---\ntitle: \"CButton Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CButton\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"CButton class\"\n  - \"checkbox buttons\"\n  - \"pushbuttons\"\n  - \"button control [MFC]\"\n  - \"check boxes, button controls\"\n  - \"button objects (CButton)\"\n  - \"radio buttons, CButton class\"\nms.assetid: cdc76d5b-31da-43c5-bc43-fde4cb39de5b\ncaps.latest.revision: 19\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CButton Class\nProvides the functionality of Windows button controls.  \n  \n## Syntax  \n  \n```  \nclass CButton : public CWnd  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CButton::CButton](#cbutton__cbutton)|Constructs a `CButton` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CButton::Create](#cbutton__create)|Creates the Windows button control and attaches it to the `CButton` object.|  \n|[CButton::DrawItem](#cbutton__drawitem)|Override to draw an owner-drawn `CButton` object.|  \n|[CButton::GetBitmap](#cbutton__getbitmap)|Retrieves the handle of the bitmap previously set with [SetBitmap](#cbutton__setbitmap).|  \n|[CButton::GetButtonStyle](#cbutton__getbuttonstyle)|Retrieves information about the button control style.|  \n|[CButton::GetCheck](#cbutton__getcheck)|Retrieves the check state of a button control.|  \n|[CButton::GetCursor](#cbutton__getcursor)|Retrieves the handle of the cursor image previously set with [SetCursor](#cbutton__setcursor).|  \n|[CButton::GetIcon](#cbutton__geticon)|Retrieves the handle of the icon previously set with [SetIcon](#cbutton__seticon).|  \n|[CButton::GetIdealSize](#cbutton__getidealsize)|Retrieves the ideal size of the button control.|  \n|[CButton::GetImageList](#cbutton__getimagelist)|Retrieves the image list of the button control.|  \n|[CButton::GetNote](#cbutton__getnote)|Retrieves the note component of the current command link control.|  \n|[CButton::GetNoteLength](#cbutton__getnotelength)|Retrieves the length of the note text for the current command link control.|  \n|[CButton::GetSplitGlyph](#cbutton__getsplitglyph)|Retrieves the glyph associated with the current split button control.|  \n|[CButton::GetSplitImageList](#cbutton__getsplitimagelist)|Retrieves the image list for the current split button control.|  \n|[CButton::GetSplitInfo](#cbutton__getsplitinfo)|Retrieves information that defines the current split button control.|  \n|[CButton::GetSplitSize](#cbutton__getsplitsize)|Retrieves the bounding rectangle of the drop-down component of the current split button control.|  \n|[CButton::GetSplitStyle](#cbutton__getsplitstyle)|Retrieves the split button styles that define the current split button control.|  \n|[CButton::GetState](#cbutton__getstate)|Retrieves the check state, highlight state, and focus state of a button control.|  \n|[CButton::GetTextMargin](#cbutton__gettextmargin)|Retrieves the text margin of the button control.|  \n|[CButton::SetBitmap](#cbutton__setbitmap)|Specifies a bitmap to be displayed on the button.|  \n|[CButton::SetButtonStyle](#cbutton__setbuttonstyle)|Changes the style of a button.|  \n|[CButton::SetCheck](#cbutton__setcheck)|Sets the check state of a button control.|  \n|[CButton::SetCursor](#cbutton__setcursor)|Specifies a cursor image to be displayed on the button.|  \n|[CButton::SetDropDownState](#cbutton__setdropdownstate)|Sets the drop-down state of the current split button control.|  \n|[CButton::SetIcon](#cbutton__seticon)|Specifies an icon to be displayed on the button.|  \n|[CButton::SetImageList](#cbutton__setimagelist)|Sets the image list of the button control.|  \n|[CButton::SetNote](#cbutton__setnote)|Sets the note on the current command link control.|  \n|[CButton::SetSplitGlyph](#cbutton__setsplitglyph)|Associates a specified glyph with the current split button control.|  \n|[CButton::SetSplitImageList](#cbutton__setsplitimagelist)|Associates an image list with the current split button control.|  \n|[CButton::SetSplitInfo](#cbutton__setsplitinfo)|Specifies information that defines the current split button control.|  \n|[CButton::SetSplitSize](#cbutton__setsplitsize)|Sets the bounding rectangle of the drop-down component of the current split button control.|  \n|[CButton::SetSplitStyle](#cbutton__setsplitstyle)|Sets the style of the current split button control.|  \n|[CButton::SetState](#cbutton__setstate)|Sets the highlighting state of a button control.|  \n|[CButton::SetTextMargin](#cbutton__settextmargin)|Sets the text margin of the button control.|  \n  \n## Remarks  \n A button control is a small, rectangular child window that can be clicked on and off. Buttons can be used alone or in groups and can either be labeled or appear without text. A button typically changes appearance when the user clicks it.  \n  \n Typical buttons are the check box, radio button, and pushbutton. A `CButton` object can become any of these, according to the [button style](../../mfc/reference/button-styles.md) specified at its initialization by the [Create](#cbutton__create) member function.  \n  \n In addition, the [CBitmapButton](../../mfc/reference/cbitmapbutton-class.md) class derived from `CButton` supports creation of button controls labeled with bitmap images instead of text. A `CBitmapButton` can have separate bitmaps for a button's up, down, focused, and disabled states.  \n  \n You can create a button control either from a dialog template or directly in your code. In both cases, first call the constructor `CButton` to construct the `CButton` object; then call the **Create** member function to create the Windows button control and attach it to the `CButton` object.  \n  \n Construction can be a one-step process in a class derived from `CButton`. Write a constructor for the derived class and call **Create** from within the constructor.  \n  \n If you want to handle Windows notification messages sent by a button control to its parent (usually a class derived from [CDialog](../../mfc/reference/cdialog-class.md)), add a message-map entry and message-handler member function to the parent class for each message.  \n  \n Each message-map entry takes the following form:  \n  \n **ON_**Notification **(**`id`, `memberFxn`**)**  \n  \n where `id` specifies the child window ID of the control sending the notification and `memberFxn` is the name of the parent member function you have written to handle the notification.  \n  \n The parent's function prototype is as follows:  \n  \n **afx_msg** `void` `memberFxn` **( );**  \n  \n Potential message-map entries are as follows:  \n  \n|Map entry|Sent to parent when...|  \n|---------------|----------------------------|  \n|**ON_BN_CLICKED**|The user clicks a button.|  \n|**ON_BN_DOUBLECLICKED**|The user double-clicks a button.|  \n  \n If you create a `CButton` object from a dialog resource, the `CButton` object is automatically destroyed when the user closes the dialog box.  \n  \n If you create a `CButton` object within a window, you may need to destroy it. If you create the `CButton` object on the heap by using the **new** function, you must call **delete** on the object to destroy it when the user closes the Windows button control. If you create the `CButton` object on the stack, or it is embedded in the parent dialog object, it is destroyed automatically.  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CCmdTarget](../../mfc/reference/ccmdtarget-class.md)  \n  \n [CWnd](../../mfc/reference/cwnd-class.md)  \n  \n `CButton`  \n  \n## Requirements  \n **Header:** afxwin.h  \n  \n##  <a name=\"cbutton__cbutton\"></a>  CButton::CButton  \n Constructs a `CButton` object.  \n  \n```  \nCButton();\n```  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#1](../../mfc/reference/codesnippet/cpp/cbutton-class_1.cpp)]  \n  \n##  <a name=\"cbutton__create\"></a>  CButton::Create  \n Creates the Windows button control and attaches it to the `CButton` object.  \n  \n```  \nvirtual BOOL Create(\n    LPCTSTR lpszCaption,  \n    DWORD dwStyle,  \n    const RECT& rect,  \n    CWnd* pParentWnd,  \n    UINT nID);\n```  \n  \n### Parameters  \n `lpszCaption`  \n Specifies the button control's text.  \n  \n `dwStyle`  \n Specifies the button control's style. Apply any combination of [button styles](../../mfc/reference/button-styles.md) to the button.  \n  \n `rect`  \n Specifies the button control's size and position. It can be either a `CRect` object or a `RECT` structure.  \n  \n `pParentWnd`  \n Specifies the button control's parent window, usually a `CDialog`. It must not be **NULL**.  \n  \n `nID`  \n Specifies the button control's ID.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n You construct a `CButton` object in two steps. First, call the constructor and then call **Create**, which creates the Windows button control and attaches it to the `CButton` object.  \n  \n If the **WS_VISIBLE** style is given, Windows sends the button control all the messages required to activate and show the button.  \n  \n Apply the following [window styles](../../mfc/reference/window-styles.md) to a button control:  \n  \n- **WS_CHILD** Always  \n  \n- **WS_VISIBLE** Usually  \n  \n- **WS_DISABLED** Rarely  \n  \n- **WS_GROUP** To group controls  \n  \n- **WS_TABSTOP** To include the button in the tabbing order  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#2](../../mfc/reference/codesnippet/cpp/cbutton-class_2.cpp)]  \n  \n##  <a name=\"cbutton__drawitem\"></a>  CButton::DrawItem  \n Called by the framework when a visual aspect of an owner-drawn button has changed.  \n  \n```  \nvirtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);\n```  \n  \n### Parameters  \n `lpDrawItemStruct`  \n A long pointer to a [DRAWITEMSTRUCT](../../mfc/reference/drawitemstruct-structure.md) structure. The structure contains information about the item to be drawn and the type of drawing required.  \n  \n### Remarks  \n An owner-drawn button has the **BS_OWNERDRAW** style set. Override this member function to implement drawing for an owner-drawn `CButton` object. The application should restore all graphics device interface (GDI) objects selected for the display context supplied in `lpDrawItemStruct` before the member function terminates.  \n  \n Also see the [BS_](../../mfc/reference/button-styles.md) style values.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#3](../../mfc/reference/codesnippet/cpp/cbutton-class_3.cpp)]  \n  \n##  <a name=\"cbutton__getbitmap\"></a>  CButton::GetBitmap  \n Call this member function to get the handle of a bitmap, previously set with [SetBitmap](#cbutton__setbitmap), that is associated with a button.  \n  \n```  \nHBITMAP GetBitmap() const;\n\n \n```  \n  \n### Return Value  \n A handle to a bitmap. **NULL** if no bitmap is previously specified.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#4](../../mfc/reference/codesnippet/cpp/cbutton-class_4.cpp)]  \n  \n##  <a name=\"cbutton__getbuttonstyle\"></a>  CButton::GetButtonStyle  \n Retrieves information about the button control style.  \n  \n```  \nUINT GetButtonStyle() const;\n\n \n```  \n  \n### Return Value  \n Returns the button styles for this `CButton` object. This function returns only the [BS_](../../mfc/reference/button-styles.md) style values, not any of the other window styles.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#5](../../mfc/reference/codesnippet/cpp/cbutton-class_5.cpp)]  \n  \n##  <a name=\"cbutton__getcheck\"></a>  CButton::GetCheck  \n Retrieves the check state of a radio button or check box.  \n  \n```  \nint GetCheck() const;\n\n \n```  \n  \n### Return Value  \n The return value from a button control created with the **BS_AUTOCHECKBOX**, **BS_AUTORADIOBUTTON**, **BS_AUTO3STATE**, **BS_CHECKBOX**, **BS_RADIOBUTTON**, or **BS_3STATE** style is one of the following values:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|**BST_UNCHECKED**|Button state is unchecked.|  \n|**BST_CHECKED**|Button state is checked.|  \n|**BST_INDETERMINATE**|Button state is indeterminate (applies only if the button has the **BS_3STATE** or **BS_AUTO3STATE** style).|  \n  \n If the button has any other style, the return value is **BST_UNCHECKED**.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#6](../../mfc/reference/codesnippet/cpp/cbutton-class_6.cpp)]  \n  \n##  <a name=\"cbutton__getcursor\"></a>  CButton::GetCursor  \n Call this member function to get the handle of a cursor, previously set with [SetCursor](#cbutton__setcursor), that is associated with a button.  \n  \n```  \nHCURSOR GetCursor();\n\n \n```  \n  \n### Return Value  \n A handle to a cursor image. **NULL** if no cursor is previously specified.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#7](../../mfc/reference/codesnippet/cpp/cbutton-class_7.cpp)]  \n  \n##  <a name=\"cbutton__geticon\"></a>  CButton::GetIcon  \n Call this member function to get the handle of an icon, previously set with [SetIcon](#cbutton__seticon), that is associated with a button.  \n  \n```  \nHICON GetIcon() const;\n\n \n```  \n  \n### Return Value  \n A handle to an icon. **NULL** if no icon is previously specified.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#8](../../mfc/reference/codesnippet/cpp/cbutton-class_8.cpp)]  \n  \n##  <a name=\"cbutton__getidealsize\"></a>  CButton::GetIdealSize  \n Retrieves the ideal size for the button control.  \n  \n```  \nBOOL GetIdealSize(SIZE* psize);\n```  \n  \n### Parameters  \n *psize*  \n A pointer to the current size of the button.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This member function emulates the functionality of the **BCM_GETIDEALSIZE** message, as described in the [Buttons](http://msdn.microsoft.com/library/windows/desktop/bb775943) section of the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cbutton__getimagelist\"></a>  CButton::GetImageList  \n Call this method to get the image list from the button control.  \n  \n```  \nBOOL GetImageList(PBUTTON_IMAGELIST pbuttonImagelist);\n```  \n  \n### Parameters  \n `pbuttonImagelist`  \n A pointer to the image list of the `CButton` object.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This member function emulates the functionality of the **BCM_GETIMAGELIST** message, as described in the [Buttons](http://msdn.microsoft.com/library/windows/desktop/bb775943) section of the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cbutton__getnote\"></a>  CButton::GetNote  \n Retrieves the note text associated with the current command link control.  \n  \n```  \nCString GetNote() const;\n\n \nBOOL GetNote(\n    LPTSTR lpszNote,   \n    UINT* cchNote) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[out] `lpszNote`|Pointer to a buffer, which the caller is responsible for allocating and deallocating. If the return value is `true`, the buffer contains the note text that is associated with the current command link control; otherwise, the buffer is unchanged.|  \n|[in, out] `cchNote`|A pointer to an unsigned integer variable.<br /><br /> When this method is called, the variable contains the size of the buffer specified by the `lpszNote` parameter.<br /><br /> When this method returns, if the return value is `true` the variable contains the size of the note associated with the current command link control. If the return value is `false`, the variable contains the buffer size required to contain the note.|  \n  \n### Return Value  \n In the first overload, a [CString](../../atl-mfc-shared/using-cstring.md) object that contains the note text associated with the current command link control.  \n  \n -or-  \n  \n In the second overload, `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n Use this method only with controls whose button style is `BS_COMMANDLINK` or `BS_DEFCOMMANDLINK`.  \n  \n This method sends the [BCM_GETNOTE](http://msdn.microsoft.com/library/windows/desktop/bb775965) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cbutton__getnotelength\"></a>  CButton::GetNoteLength  \n Retrieves the length of the note text for the current command link control.  \n  \n```  \nUINT GetNoteLength() const;\n\n \n```  \n  \n### Return Value  \n The length of the note text, in 16-bit Unicode characters, for the current command link control.  \n  \n### Remarks  \n Use this method only with controls whose button style is `BS_COMMANDLINK` or `BS_DEFCOMMANDLINK`.  \n  \n This method sends the [BCM_GETNOTELENGTH](http://msdn.microsoft.com/library/windows/desktop/bb775967) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cbutton__getsplitglyph\"></a>  CButton::GetSplitGlyph  \n Retrieves the glyph associated with the current split button control.  \n  \n```  \nTCHAR GetSplitGlyph() const;\n\n \n```  \n  \n### Return Value  \n The glyph character associated with the current split button control.  \n  \n### Remarks  \n A glyph is the physical representation of a character in a particular font. For example, a split button control might be decorated with the glyph of the Unicode check mark character (U+2713).  \n  \n Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`.  \n  \n This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_GLYPH` flag, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. When the message function returns, this method retrieves the glyph from the `himlGlyph` member of the structure.  \n  \n##  <a name=\"cbutton__getsplitimagelist\"></a>  CButton::GetSplitImageList  \n Retrieves the [image list](../../mfc/reference/cimagelist-class.md) for the current split button control.  \n  \n```  \nCImageList* GetSplitImageList() const;\n\n \n```  \n  \n### Return Value  \n A pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object.  \n  \n### Remarks  \n Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`.  \n  \n This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_IMAGE` flag, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. When the message function returns, this method retrieves the image list from the `himlGlyph` member of the structure.  \n  \n##  <a name=\"cbutton__getsplitinfo\"></a>  CButton::GetSplitInfo  \n Retrieves parameters that determine how Windows draws the current split button control.  \n  \n```  \nBOOL GetSplitInfo(PBUTTON_SPLITINFO pInfo) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[out] `pInfo`|Pointer to a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure that receives information about the current split button control. The caller is responsible for allocating the structure.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`.  \n  \n This method sends the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cbutton__getsplitsize\"></a>  CButton::GetSplitSize  \n Retrieves the bounding rectangle of the drop-down component of the current split button control.  \n  \n```  \nBOOL GetSplitSize(LPSIZE pSize) const;\n\n \n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[out] `pSize`|Pointer to a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure that receives the description of a rectangle.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`.  \n  \n When the split button control is expanded, it can display a drop-down component such as a list control or pager control. This method retrieves the bounding rectangle that contains the drop-down component.  \n  \n This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_SIZE` flag, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. When the message function returns, this method retrieves the bounding rectangle from the `size` member of the structure.  \n  \n##  <a name=\"cbutton__getsplitstyle\"></a>  CButton::GetSplitStyle  \n Retrieves the split button styles that define the current split button control.  \n  \n```  \nUINT GetSplitStyle() const;\n\n \n```  \n  \n### Return Value  \n A bitwise combination of split button styles. For more information, see the `uSplitStyle` member of the [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure.  \n  \n### Remarks  \n Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`.  \n  \n The split button styles specify the alignment, aspect ratio, and graphical format with which Windows draws a split button icon.  \n  \n This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_STYLE` flag, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. When the message function returns, this method retrieves the split button styles from the `uSplitStyle` member of the structure.  \n  \n##  <a name=\"cbutton__getstate\"></a>  CButton::GetState  \n Retrieves the state of a button control.  \n  \n```  \nUINT GetState() const;\n\n \n```  \n  \n### Return Value  \n A bit field that contains the combination of values that indicate the current state of a button control. The following table lists possible values.  \n  \n|Button State|Value|Description|  \n|------------------|-----------|-----------------|  \n|`BST_UNCHECKED`|0x0000|The initial state.|  \n|`BST_CHECKED`|0x0001|The button control is checked.|  \n|`BST_INDETERMINATE`|0x0002|The state is indeterminate (only possible when the button control has three states).|  \n|`BST_PUSHED`|0x0004|The button control is pressed.|  \n|`BST_FOCUS`|0x0008|The button control has the focus.|  \n  \n### Remarks  \n A button control with the `BS_3STATE` or `BS_AUTO3STATE` button style creates a check box that has a third state that is named the indeterminate state. The indeterminate state indicates that the check box is neither checked nor unchecked.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#9](../../mfc/reference/codesnippet/cpp/cbutton-class_9.cpp)]  \n  \n##  <a name=\"cbutton__gettextmargin\"></a>  CButton::GetTextMargin  \n Call this method to get the text margin of the `CButton` object.  \n  \n```  \nBOOL GetTextMargin(RECT* pmargin);\n```  \n  \n### Parameters  \n `pmargin`  \n A pointer to the text margin of the `CButton` object.  \n  \n### Return Value  \n Returns the text margin.  \n  \n### Remarks  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n This member function emulates the functionality of the **BCM_GETTEXTMARGIN** message, as described in the [Buttons](http://msdn.microsoft.com/library/windows/desktop/bb775943) section of the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cbutton__setbitmap\"></a>  CButton::SetBitmap  \n Call this member function to associate a new bitmap with the button.  \n  \n```  \nHBITMAP SetBitmap(HBITMAP hBitmap);\n```  \n  \n### Parameters  \n `hBitmap`  \n The handle of a bitmap.  \n  \n### Return Value  \n The handle of a bitmap previously associated with the button.  \n  \n### Remarks  \n The bitmap will be automatically placed on the face of the button, centered by default. If the bitmap is too large for the button, it will be clipped on either side. You can choose other alignment options, including the following:  \n  \n- **BS_TOP**  \n  \n- **BS_LEFT**  \n  \n- **BS_RIGHT**  \n  \n- **BS_CENTER**  \n  \n- **BS_BOTTOM**  \n  \n- **BS_VCENTER**  \n  \n Unlike [CBitmapButton](../../mfc/reference/cbitmapbutton-class.md), which uses four bitmaps per button, `SetBitmap` uses only one bitmap per the button. When the button is pressed, the bitmap appears to shift down and to the right.  \n  \n You are responsible for releasing the bitmap when you are done with it.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#4](../../mfc/reference/codesnippet/cpp/cbutton-class_4.cpp)]  \n  \n##  <a name=\"cbutton__setbuttonstyle\"></a>  CButton::SetButtonStyle  \n Changes the style of a button.  \n  \n```  \nvoid SetButtonStyle(\n    UINT nStyle,  \n    BOOL bRedraw = TRUE);\n```  \n  \n### Parameters  \n `nStyle`  \n Specifies the [button style](../../mfc/reference/button-styles.md).  \n  \n `bRedraw`  \n Specifies whether the button is to be redrawn. A nonzero value redraws the button. A 0 value does not redraw the button. The button is redrawn by default.  \n  \n### Remarks  \n Use the `GetButtonStyle` member function to retrieve the button style. The low-order word of the complete button style is the button-specific style.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#5](../../mfc/reference/codesnippet/cpp/cbutton-class_5.cpp)]  \n  \n##  <a name=\"cbutton__setcheck\"></a>  CButton::SetCheck  \n Sets or resets the check state of a radio button or check box.  \n  \n```  \nvoid SetCheck(int nCheck);\n```  \n  \n### Parameters  \n `nCheck`  \n Specifies the check state. This parameter can be one of the following:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|**BST_UNCHECKED**|Set the button state to unchecked.|  \n|**BST_CHECKED**|Set the button state to checked.|  \n|**BST_INDETERMINATE**|Set the button state to indeterminate. This value can be used only if the button has the **BS_3STATE** or **BS_AUTO3STATE** style.|  \n  \n### Remarks  \n This member function has no effect on a pushbutton.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#6](../../mfc/reference/codesnippet/cpp/cbutton-class_6.cpp)]  \n  \n##  <a name=\"cbutton__setcursor\"></a>  CButton::SetCursor  \n Call this member function to associate a new cursor with the button.  \n  \n```  \nHCURSOR SetCursor(HCURSOR hCursor);\n```  \n  \n### Parameters  \n `hCursor`  \n The handle of a cursor.  \n  \n### Return Value  \n The handle of a cursor previously associated with the button.  \n  \n### Remarks  \n The cursor will be automatically placed on the face of the button, centered by default. If the cursor is too large for the button, it will be clipped on either side. You can choose other alignment options, including the following:  \n  \n- **BS_TOP**  \n  \n- **BS_LEFT**  \n  \n- **BS_RIGHT**  \n  \n- **BS_CENTER**  \n  \n- **BS_BOTTOM**  \n  \n- **BS_VCENTER**  \n  \n Unlike [CBitmapButton](../../mfc/reference/cbitmapbutton-class.md), which uses four bitmaps per button, `SetCursor` uses only one cursor per the button. When the button is pressed, the cursor appears to shift down and to the right.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#7](../../mfc/reference/codesnippet/cpp/cbutton-class_7.cpp)]  \n  \n##  <a name=\"cbutton__setdropdownstate\"></a>  CButton::SetDropDownState  \n Sets the drop-down state of the current split button control.  \n  \n```  \nBOOL SetDropDownState(BOOL fDropDown);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `fDropDown`|`true` to set `BST_DROPDOWNPUSHED` state; otherwise, `false`.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n A split button control has a style of `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON` and consists of a button and a drop-down arrow to its right. For more information, see [Button Styles](http://msdn.microsoft.com/library/windows/desktop/bb775951). Usually, the drop-down state is set when the user clicks the drop-down arrow. Use this method to programmatically set the drop-down state of the control. The drop-down arrow is drawn shaded to indicate the state.  \n  \n This method sends the [BCM_SETDROPDOWNSTATE](http://msdn.microsoft.com/library/windows/desktop/bb775973) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines the variable, `m_splitButton`, that is used to programmatically access the split button control. This variable is used in the following example.  \n  \n [!code-cpp[NVC_MFC_CButton_s1#1](../../mfc/reference/codesnippet/cpp/cbutton-class_10.h)]  \n  \n### Example  \n The following code example sets the state of the split button control to indicate that the drop-down arrow is pushed.  \n  \n [!code-cpp[NVC_MFC_CButton_s1#6](../../mfc/reference/codesnippet/cpp/cbutton-class_11.cpp)]  \n  \n##  <a name=\"cbutton__setelevationrequired\"></a>  CButton::SetElevationRequired  \n Sets the state of the current button control to `elevation required`, which is necessary for the control to display an elevated security icon.  \n  \n```  \nBOOL SetElevationRequired(BOOL fElevationRequired);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `fElevationRequired`|`true` to set `elevation required` state; otherwise, `false`.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n If a button or command link control requires elevated security permission to perform an action, set the control to `elevation required` state. Subsequently, Windows displays the User Account Control (UAC) shield icon on the control. For more information, see \"User Account Control\" at [MSDN](http://go.microsoft.com/fwlink/linkid=18507).  \n  \n This method sends the [BCM_SETSHIELD](http://msdn.microsoft.com/library/windows/desktop/bb775979) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cbutton__seticon\"></a>  CButton::SetIcon  \n Call this member function to associate a new icon with the button.  \n  \n```  \nHICON SetIcon(HICON hIcon);\n```  \n  \n### Parameters  \n `hIcon`  \n The handle of an icon.  \n  \n### Return Value  \n The handle of an icon previously associated with the button.  \n  \n### Remarks  \n The icon will be automatically placed on the face of the button, centered by default. If the icon is too large for the button, it will be clipped on either side. You can choose other alignment options, including the following:  \n  \n- **BS_TOP**  \n  \n- **BS_LEFT**  \n  \n- **BS_RIGHT**  \n  \n- **BS_CENTER**  \n  \n- **BS_BOTTOM**  \n  \n- **BS_VCENTER**  \n  \n Unlike [CBitmapButton](../../mfc/reference/cbitmapbutton-class.md), which uses four bitmaps per button, `SetIcon` uses only one icon per the button. When the button is pressed, the icon appears to shift down and to the right.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#8](../../mfc/reference/codesnippet/cpp/cbutton-class_8.cpp)]  \n  \n##  <a name=\"cbutton__setimagelist\"></a>  CButton::SetImageList  \n Call this method to set the image list of the `CButton` object.  \n  \n```  \nBOOL SetImageList(PBUTTON_IMAGELIST pbuttonImagelist);\n```  \n  \n### Parameters  \n `pbuttonImagelist`  \n A pointer to the new image list.  \n  \n### Return Value  \n Returns **TRUE** on success, **FALSE** on failure.  \n  \n### Remarks  \n This member function emulates the functionality of the **BCM_SETIMAGELIST** message, as described in the [Buttons](http://msdn.microsoft.com/library/windows/desktop/bb775943) section of the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cbutton__setnote\"></a>  CButton::SetNote  \n Sets the note text for the current command link control.  \n  \n```  \nBOOL SetNote(LPCTSTR lpszNote);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `lpszNote`|Pointer to a Unicode string that is set as the note text for the command link control.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n Use this method only with controls whose button style is `BS_COMMANDLINK` or `BS_DEFCOMMANDLINK`.  \n  \n This method sends the [BCM_SETNOTE](http://msdn.microsoft.com/library/windows/desktop/bb775977) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines the variable, `m_cmdLink`, that is used to programmatically access the command link control. This variable is used in the following example.  \n  \n [!code-cpp[NVC_MFC_CButton_s1#1](../../mfc/reference/codesnippet/cpp/cbutton-class_10.h)]  \n  \n### Example  \n The following code example sets the note text for the command link control.  \n  \n [!code-cpp[NVC_MFC_CButton_s1#7](../../mfc/reference/codesnippet/cpp/cbutton-class_12.cpp)]  \n  \n##  <a name=\"cbutton__setsplitglyph\"></a>  CButton::SetSplitGlyph  \n Associates a specified glyph with the current split button control.  \n  \n```  \nBOOL SetSplitGlyph(TCHAR chGlyph);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `chGlyph`|A character that specifies the glyph to use as the split button drop-down arrow.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n Use this method only with controls that have the button style `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`.  \n  \n A glyph is the physical representation of a character in a particular font. The `chGlyph`parameter is not used as the glyph, but is instead used to select a glyph from a set of system-defined glyphs. The default drop-down arrow glyph is specified by a character '6', and resembles the Unicode character BLACK DOWN-POINTING TRIANGLE (U+25BC).  \n  \n This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_GLYPH` flag and the `himlGlyph` member with the `chGlyph` parameter, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cbutton__setsplitimagelist\"></a>  CButton::SetSplitImageList  \n Associates an [image list](../../mfc/reference/cimagelist-class.md) with the current split button control.  \n  \n```  \nBOOL SetSplitImageList(CImageList* pSplitImageList);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `pSplitImageList`|Pointer to a [CImageList](../../mfc/reference/cimagelist-class.md) object to assign to the current split button control.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`.  \n  \n This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_IMAGE` flag and the `himlGlyph` member with the `pSplitImageList` parameter, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cbutton__setsplitinfo\"></a>  CButton::SetSplitInfo  \n Specifies parameters that determine how Windows draws the current split button control.  \n  \n```  \nBOOL SetSplitInfo(PBUTTON_SPLITINFO pInfo);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `pInfo`|Pointer to a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure that defines the current split button control.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`.  \n  \n This method sends the [BCM_SETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775981) message, which is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines the variable, `m_splitButton`, that is used to programmatically access the split button control.  \n  \n [!code-cpp[NVC_MFC_CButton_s1#1](../../mfc/reference/codesnippet/cpp/cbutton-class_10.h)]  \n  \n### Example  \n The following code example changes the glyph that is used for the split button drop-down arrow. The example substitutes an up-pointing triangle glyph for the default down-pointing triangle glyph. The glyph that is displayed depends on the character that you specify in the `himlGlyph` member of the `BUTTON_SPLITINFO` structure. The down-pointing triangle glyph is specified by a character '6' and the up-pointing triangle glyph is specified by a character '5'. For comparison, see the convenience method, [CButton::SetSplitGlyph](#cbutton__setsplitglyph).  \n  \n [!code-cpp[NVC_MFC_CButton_s1#4](../../mfc/reference/codesnippet/cpp/cbutton-class_13.cpp)]  \n  \n##  <a name=\"cbutton__setsplitsize\"></a>  CButton::SetSplitSize  \n Sets the bounding rectangle of the drop-down component of the current split button control.  \n  \n```  \nBOOL SetSplitSize(LPSIZE pSize);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `pSize`|Pointer to a [SIZE](http://msdn.microsoft.com/library/windows/desktop/dd145106) structure that describes a bounding rectangle.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`.  \n  \n When the split button control is expanded, it can display a drop-down component such as a list control or pager control. This method specifies the size of the bounding rectangle that contains the drop-down component.  \n  \n This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_SIZE` flag and the `size` member with the `pSize` parameter, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines the variable, `m_splitButton`, that is used to programmatically access the split button control. This variable is used in the following example.  \n  \n [!code-cpp[NVC_MFC_CButton_s1#1](../../mfc/reference/codesnippet/cpp/cbutton-class_10.h)]  \n  \n### Example  \n The following code example doubles the size of the split button drop-down arrow.  \n  \n [!code-cpp[NVC_MFC_CButton_s1#5](../../mfc/reference/codesnippet/cpp/cbutton-class_14.cpp)]  \n  \n##  <a name=\"cbutton__setsplitstyle\"></a>  CButton::SetSplitStyle  \n Sets the style of the current split button control.  \n  \n```  \nBOOL SetSplitStyle(UINT uSplitStyle);\n```  \n  \n### Parameters  \n  \n|Parameter|Description|  \n|---------------|-----------------|  \n|[in] `uSplitStyle`|A bitwise combination of split button styles. For more information, see the `uSplitStyle` member of the [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure.|  \n  \n### Return Value  \n `true` if this method is successful; otherwise, `false`.  \n  \n### Remarks  \n Use this method only with controls whose button style is `BS_SPLITBUTTON` or `BS_DEFSPLITBUTTON`.  \n  \n The split button styles specify the alignment, aspect ratio, and graphical format with which Windows draws a split button icon. For more information, see the `uSplitStyle` member of the [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure.  \n  \n This method initializes the `mask` member of a [BUTTON_SPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775955) structure with the `BCSIF_STYLE` flag and the `uSplitStyle` member with the `uSplitStyle` parameter, and then sends that structure in the [BCM_GETSPLITINFO](http://msdn.microsoft.com/library/windows/desktop/bb775969) message that is described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following code example defines the variable, `m_splitButton`, that is used to programmatically access the split button control.  \n  \n [!code-cpp[NVC_MFC_CButton_s1#1](../../mfc/reference/codesnippet/cpp/cbutton-class_10.h)]  \n  \n### Example  \n The following code example sets the style of the split button drop-down arrow. The `BCSS_ALIGNLEFT` style displays the arrow on the left side of the button, and the `BCSS_STRETCH` style retains the drop-down arrow's proportions when you resize the button.  \n  \n [!code-cpp[NVC_MFC_CButton_s1#3](../../mfc/reference/codesnippet/cpp/cbutton-class_15.cpp)]  \n  \n##  <a name=\"cbutton__setstate\"></a>  CButton::SetState  \n Sets whether a button control is highlighted or not.  \n  \n```  \nvoid SetState(BOOL bHighlight);\n```  \n  \n### Parameters  \n *bHighlight*  \n Specifies whether the button is to be highlighted. A nonzero value highlights the button; a 0 value removes any highlighting.  \n  \n### Remarks  \n Highlighting affects the exterior of a button control. It has no effect on the check state of a radio button or check box.  \n  \n A button control is automatically highlighted when the user clicks and holds the left mouse button. The highlighting is removed when the user releases the mouse button.  \n  \n### Example  \n [!code-cpp[NVC_MFC_CButton#9](../../mfc/reference/codesnippet/cpp/cbutton-class_9.cpp)]  \n  \n##  <a name=\"cbutton__settextmargin\"></a>  CButton::SetTextMargin  \n Call this method to set the text margin of the `CButton` object.  \n  \n```  \nBOOL SetTextMargin(RECT* pmargin);\n```  \n  \n### Parameters  \n `pmargin`  \n A pointer to the new text margin.  \n  \n### Return Value  \n Returns TRUE on success, FALSE on failure.  \n  \n### Remarks  \n This member function emulates the functionality of the **BCM_SETTEXTMARGIN** message, as described in the [Buttons](http://msdn.microsoft.com/library/windows/desktop/bb775943) section of the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n## See Also  \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CWnd Class](../../mfc/reference/cwnd-class.md)   \n [CComboBox Class](../../mfc/reference/ccombobox-class.md)   \n [CEdit Class](../../mfc/reference/cedit-class.md)   \n [CListBox Class](../../mfc/reference/clistbox-class.md)   \n [CScrollBar Class](../../mfc/reference/cscrollbar-class.md)   \n [CStatic Class](../../mfc/reference/cstatic-class.md)   \n [CBitmapButton Class](../../mfc/reference/cbitmapbutton-class.md)   \n [CDialog Class](../../mfc/reference/cdialog-class.md)\n"}