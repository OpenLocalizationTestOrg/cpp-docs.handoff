{"nodes":[{"pos":[12,52],"content":"CComTearOffObject Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CComTearOffObject Class | Microsoft Docs","pos":[0,40]}]},{"pos":[808,831],"content":"CComTearOffObject Class","linkify":"CComTearOffObject Class","nodes":[{"content":"CComTearOffObject Class","pos":[0,23]}]},{"content":"This class implements a tear-off interface.","pos":[832,875]},{"pos":[884,890],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[975,985],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Your tear-off class, derived from <ph id=\"ph1\">`CComTearOffObjectBase`</ph> and the interfaces you want your tear-off object to support.","pos":[999,1117],"source":" Your tear-off class, derived from `CComTearOffObjectBase` and the interfaces you want your tear-off object to support."},{"pos":[1124,1372],"content":"ATL implements its tear-off interfaces in two phases — the <ph id=\"ph1\">`CComTearOffObjectBase`</ph> methods handle the reference count and <ph id=\"ph2\">`QueryInterface`</ph>, while <ph id=\"ph3\">`CComTearOffObject`</ph> implements <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms680509)</ept>.","source":"ATL implements its tear-off interfaces in two phases — the `CComTearOffObjectBase` methods handle the reference count and `QueryInterface`, while `CComTearOffObject` implements [IUnknown](http://msdn.microsoft.com/library/windows/desktop/ms680509)."},{"pos":[1381,1388],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[1398,1417],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[1424,1428]},{"content":"Description","pos":[1429,1440]},{"pos":[1478,1555],"content":"<bpt id=\"p1\">[</bpt>CComTearOffObject::CComTearOffObject<ept id=\"p1\">](#ccomtearoffobject__ccomtearoffobject)</ept>","source":"[CComTearOffObject::CComTearOffObject](#ccomtearoffobject__ccomtearoffobject)"},{"content":"The constructor.","pos":[1556,1572]},{"pos":[1577,1660],"content":"<bpt id=\"p1\">[</bpt>CComTearOffObject::~CComTearOffObject<ept id=\"p1\">](#ccomtearoffobject___dtorccomtearoffobject)</ept>","source":"[CComTearOffObject::~CComTearOffObject](#ccomtearoffobject___dtorccomtearoffobject)"},{"content":"The destructor.","pos":[1661,1676]},{"pos":[1687,1701],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[1708,1712]},{"content":"Description","pos":[1713,1724]},{"pos":[1762,1817],"content":"<bpt id=\"p1\">[</bpt>CComTearOffObject::AddRef<ept id=\"p1\">](#ccomtearoffobject__addref)</ept>","source":"[CComTearOffObject::AddRef](#ccomtearoffobject__addref)"},{"pos":[1818,1882],"content":"Increments the reference count for a <ph id=\"ph1\">`CComTearOffObject`</ph> object.","source":"Increments the reference count for a `CComTearOffObject` object."},{"pos":[1887,1958],"content":"<bpt id=\"p1\">[</bpt>CComTearOffObject::QueryInterface<ept id=\"p1\">](#ccomtearoffobject__queryinterface)</ept>","source":"[CComTearOffObject::QueryInterface](#ccomtearoffobject__queryinterface)"},{"content":"Returns a pointer to the requested interface on either your tear-off class or the owner class.","pos":[1959,2053]},{"pos":[2058,2115],"content":"<bpt id=\"p1\">[</bpt>CComTearOffObject::Release<ept id=\"p1\">](#ccomtearoffobject__release)</ept>","source":"[CComTearOffObject::Release](#ccomtearoffobject__release)"},{"pos":[2116,2196],"content":"Decrements the reference count for a <ph id=\"ph1\">`CComTearOffObject`</ph> object and destroys it.","source":"Decrements the reference count for a `CComTearOffObject` object and destroys it."},{"pos":[2207,2236],"content":"CComTearOffObjectBase Methods","linkify":"CComTearOffObjectBase Methods","nodes":[{"content":"CComTearOffObjectBase Methods","pos":[0,29]}]},{"pos":[2257,2323],"content":"<bpt id=\"p1\">[</bpt>CComTearOffObjectBase<ept id=\"p1\">](#ccomtearoffobject__ccomtearoffobjectbase)</ept>","source":"[CComTearOffObjectBase](#ccomtearoffobject__ccomtearoffobjectbase)"},{"content":"Constructor.","pos":[2324,2336]},{"pos":[2347,2381],"content":"CComTearOffObjectBase Data Members","linkify":"CComTearOffObjectBase Data Members","nodes":[{"content":"CComTearOffObjectBase Data Members","pos":[0,34]}]},{"pos":[2402,2442],"content":"<bpt id=\"p1\">[</bpt>m_pOwner<ept id=\"p1\">](#ccomtearoffobject__m_powner)</ept>","source":"[m_pOwner](#ccomtearoffobject__m_powner)"},{"pos":[2443,2500],"content":"A pointer to a <ph id=\"ph1\">`CComObject`</ph> derived from the owner class.","source":"A pointer to a `CComObject` derived from the owner class."},{"pos":[2510,2517],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CComTearOffObject`</ph> implements a tear-off interface as a separate object that is instantiated only when that interface is queried for.","pos":[2521,2655],"source":"`CComTearOffObject` implements a tear-off interface as a separate object that is instantiated only when that interface is queried for."},{"content":"The tear-off is deleted when its reference count becomes zero.","pos":[2656,2718]},{"content":"Typically, you build a tear-off interface for an interface that is rarely used, since using a tear-off saves a vtable pointer in all the instances of your main object.","pos":[2719,2886]},{"content":"You should derive the class implementing the tear-off from <ph id=\"ph1\">`CComTearOffObjectBase`</ph> and from whichever interfaces you want your tear-off object to support.","pos":[2893,3047],"source":"You should derive the class implementing the tear-off from `CComTearOffObjectBase` and from whichever interfaces you want your tear-off object to support."},{"content":"<ph id=\"ph1\">`CComTearOffObjectBase`</ph> is templatized on the owner class and the thread model.","pos":[3048,3127],"source":"`CComTearOffObjectBase` is templatized on the owner class and the thread model."},{"content":"The owner class is the class of the object for which a tear-off is being implemented.","pos":[3128,3213]},{"content":"If you do not specify a thread model, the default thread model is used.","pos":[3214,3285]},{"content":"You should create a COM map for your tear-off class.","pos":[3292,3344]},{"content":"When ATL instantiates the tear-off, it will create <bpt id=\"p1\">**</bpt>CComTearOffObject<ph id=\"ph1\">\\&lt;</ph>CYourTearOffClass&gt;<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>CComCachedTearOffObject<ph id=\"ph2\">\\&lt;</ph>CYourTearOffClass&gt;<ept id=\"p2\">**</ept>.","pos":[3345,3489],"source":" When ATL instantiates the tear-off, it will create **CComTearOffObject\\<CYourTearOffClass>** or **CComCachedTearOffObject\\<CYourTearOffClass>**."},{"pos":[3496,3617],"content":"For example, in the BEEPER sample, the <ph id=\"ph1\">`CBeeper2`</ph> class is the tear-off class and the <ph id=\"ph2\">`CBeeper`</ph> class is the owner class:","source":"For example, in the BEEPER sample, the `CBeeper2` class is the tear-off class and the `CBeeper` class is the owner class:"},{"pos":[3624,3706],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATL_COM#43<ept id=\"p2\">](../../atl/codesnippet/cpp/ccomtearoffobject-class_1.h)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATL_COM#43](../../atl/codesnippet/cpp/ccomtearoffobject-class_1.h)]"},{"pos":[3715,3736],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[3781,3793],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3797,3817],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> atlcom.h","source":"**Header:** atlcom.h"},{"pos":[3827,3894],"content":"<bpt id=\"p1\">&lt;a name=\"ccomtearoffobject__addref\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComTearOffObject::AddRef","linkify":"<a name=\"ccomtearoffobject__addref\"></a>  CComTearOffObject::AddRef","source":"<a name=\"ccomtearoffobject__addref\"></a>  CComTearOffObject::AddRef"},{"pos":[3898,3970],"content":"Increments the reference count of the <ph id=\"ph1\">`CComTearOffObject`</ph> object by one.","source":"Increments the reference count of the `CComTearOffObject` object by one."},{"pos":[4022,4034],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A value that may be useful for diagnostics and testing.","pos":[4038,4093]},{"pos":[4103,4192],"content":"<bpt id=\"p1\">&lt;a name=\"ccomtearoffobject__ccomtearoffobject\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComTearOffObject::CComTearOffObject","linkify":"<a name=\"ccomtearoffobject__ccomtearoffobject\"></a>  CComTearOffObject::CComTearOffObject","source":"<a name=\"ccomtearoffobject__ccomtearoffobject\"></a>  CComTearOffObject::CComTearOffObject"},{"content":"The constructor.","pos":[4196,4212]},{"pos":[4264,4274],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Pointer that will be converted to a pointer to a <bpt id=\"p1\">**</bpt>CComObject<ph id=\"ph1\">\\&lt;</ph>Owner&gt;<ept id=\"p1\">**</ept> object.","pos":[4286,4370],"source":" [in] Pointer that will be converted to a pointer to a **CComObject\\<Owner>** object."},{"pos":[4380,4387],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Increments the owner's reference count by one.","pos":[4391,4437]},{"pos":[4447,4542],"content":"<bpt id=\"p1\">&lt;a name=\"ccomtearoffobject___dtorccomtearoffobject\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComTearOffObject::~CComTearOffObject","linkify":"<a name=\"ccomtearoffobject___dtorccomtearoffobject\"></a>  CComTearOffObject::~CComTearOffObject","source":"<a name=\"ccomtearoffobject___dtorccomtearoffobject\"></a>  CComTearOffObject::~CComTearOffObject"},{"content":"The destructor.","pos":[4546,4561]},{"pos":[4606,4613],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Frees all allocated resources, calls FinalRelease, and decrements the module lock count.","pos":[4617,4705]},{"pos":[4715,4812],"content":"<bpt id=\"p1\">&lt;a name=\"ccomtearoffobject__ccomtearoffobjectbase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComTearOffObject::CComTearOffObjectBase","linkify":"<a name=\"ccomtearoffobject__ccomtearoffobjectbase\"></a>  CComTearOffObject::CComTearOffObjectBase","source":"<a name=\"ccomtearoffobject__ccomtearoffobjectbase\"></a>  CComTearOffObject::CComTearOffObjectBase"},{"content":"The constructor.","pos":[4816,4832]},{"pos":[4880,4887],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4891,4967],"content":"Initializes the <bpt id=\"p1\">[</bpt>m_pOwner<ept id=\"p1\">](#ccomtearoffobject__m_powner)</ept> member to <bpt id=\"p2\">**</bpt>NULL<ept id=\"p2\">**</ept>.","source":"Initializes the [m_pOwner](#ccomtearoffobject__m_powner) member to **NULL**."},{"pos":[4977,5048],"content":"<bpt id=\"p1\">&lt;a name=\"ccomtearoffobject__m_powner\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComTearOffObject::m_pOwner","linkify":"<a name=\"ccomtearoffobject__m_powner\"></a>  CComTearOffObject::m_pOwner","source":"<a name=\"ccomtearoffobject__m_powner\"></a>  CComTearOffObject::m_pOwner"},{"pos":[5052,5149],"content":"A pointer to a <bpt id=\"p1\">[</bpt>CComObject<ept id=\"p1\">](../../atl/reference/ccomobject-class.md)</ept> object derived from <bpt id=\"p2\">*</bpt>Owner<ept id=\"p2\">*</ept>.","source":"A pointer to a [CComObject](../../atl/reference/ccomobject-class.md) object derived from *Owner*."},{"pos":[5201,5211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"<bpt id=\"p1\">*</bpt>Owner<ept id=\"p1\">*</ept>","pos":[5215,5222],"source":"*Owner*"},{"content":"[in] The class for which a tear-off is being implemented.","pos":[5226,5283]},{"pos":[5293,5300],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5304,5363],"content":"The pointer is initialized to <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> during construction.","source":"The pointer is initialized to **NULL** during construction."},{"pos":[5373,5456],"content":"<bpt id=\"p1\">&lt;a name=\"ccomtearoffobject__queryinterface\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComTearOffObject::QueryInterface","linkify":"<a name=\"ccomtearoffobject__queryinterface\"></a>  CComTearOffObject::QueryInterface","source":"<a name=\"ccomtearoffobject__queryinterface\"></a>  CComTearOffObject::QueryInterface"},{"content":"Retrieves a pointer to the requested interface.","pos":[5460,5507]},{"pos":[5591,5601],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The IID of the interface being requested.","pos":[5614,5660]},{"content":"[out] A pointer to the interface pointer identified by <ph id=\"ph1\">`iid`</ph>, or <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> if the interface is not found.","pos":[5682,5786],"source":" [out] A pointer to the interface pointer identified by `iid`, or **NULL** if the interface is not found."},{"pos":[5796,5808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5812,5839],"content":"A standard <ph id=\"ph1\">`HRESULT`</ph> value.","source":"A standard `HRESULT` value."},{"pos":[5849,5856],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Queries first for interfaces on your tear-off class.","pos":[5860,5912]},{"content":"If the interface is not there, queries for the interface on the owner object.","pos":[5913,5990]},{"content":"If the requested interface is <bpt id=\"p1\">**</bpt>IUnknown<ept id=\"p1\">**</ept>, returns the <bpt id=\"p2\">**</bpt>IUnknown<ept id=\"p2\">**</ept> of the owner.","pos":[5991,6073],"source":" If the requested interface is **IUnknown**, returns the **IUnknown** of the owner."},{"pos":[6083,6152],"content":"<bpt id=\"p1\">&lt;a name=\"ccomtearoffobject__release\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CComTearOffObject::Release","linkify":"<a name=\"ccomtearoffobject__release\"></a>  CComTearOffObject::Release","source":"<a name=\"ccomtearoffobject__release\"></a>  CComTearOffObject::Release"},{"pos":[6156,6263],"content":"Decrements the reference count by one and, if the reference count is zero, deletes the <ph id=\"ph1\">`CComTearOffObject`</ph>.","source":"Decrements the reference count by one and, if the reference count is zero, deletes the `CComTearOffObject`."},{"pos":[6313,6325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"In non-debug builds, always returns zero.","pos":[6329,6370]},{"content":"In debug builds, returns a value that may be useful for diagnostics or testing.","pos":[6371,6450]},{"pos":[6459,6467],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>CComCachedTearOffObject Class<ept id=\"p1\">](../../atl/reference/ccomcachedtearoffobject-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[6471,6557],"source":"[CComCachedTearOffObject Class](../../atl/reference/ccomcachedtearoffobject-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Class Overview<ept id=\"p1\">](../../atl/atl-class-overview.md)</ept>","pos":[6560,6610],"source":" [Class Overview](../../atl/atl-class-overview.md)"}],"content":"---\ntitle: \"CComTearOffObject Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"ATL::CComTearOffObject<Base>\"\n  - \"ATL::CComTearOffObject\"\n  - \"ATL.CComTearOffObject\"\n  - \"ATL.CComTearOffObject<Base>\"\n  - \"CComTearOffObject\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"tear-off interfaces, ATL\"\n  - \"tear-off interfaces\"\n  - \"CComTearOffObject class\"\nms.assetid: d974b598-c6b2-42b1-8360-9190d9d0fbf3\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CComTearOffObject Class\nThis class implements a tear-off interface.  \n  \n## Syntax  \n  \n```\ntemplate<class Base>\nclass CComTearOffObject\n :  public Base\n```  \n  \n#### Parameters  \n `Base`  \n Your tear-off class, derived from `CComTearOffObjectBase` and the interfaces you want your tear-off object to support.  \n  \n ATL implements its tear-off interfaces in two phases — the `CComTearOffObjectBase` methods handle the reference count and `QueryInterface`, while `CComTearOffObject` implements [IUnknown](http://msdn.microsoft.com/library/windows/desktop/ms680509).  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComTearOffObject::CComTearOffObject](#ccomtearoffobject__ccomtearoffobject)|The constructor.|  \n|[CComTearOffObject::~CComTearOffObject](#ccomtearoffobject___dtorccomtearoffobject)|The destructor.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CComTearOffObject::AddRef](#ccomtearoffobject__addref)|Increments the reference count for a `CComTearOffObject` object.|  \n|[CComTearOffObject::QueryInterface](#ccomtearoffobject__queryinterface)|Returns a pointer to the requested interface on either your tear-off class or the owner class.|  \n|[CComTearOffObject::Release](#ccomtearoffobject__release)|Decrements the reference count for a `CComTearOffObject` object and destroys it.|  \n  \n### CComTearOffObjectBase Methods  \n  \n|||  \n|-|-|  \n|[CComTearOffObjectBase](#ccomtearoffobject__ccomtearoffobjectbase)|Constructor.|  \n  \n### CComTearOffObjectBase Data Members  \n  \n|||  \n|-|-|  \n|[m_pOwner](#ccomtearoffobject__m_powner)|A pointer to a `CComObject` derived from the owner class.|  \n  \n## Remarks  \n `CComTearOffObject` implements a tear-off interface as a separate object that is instantiated only when that interface is queried for. The tear-off is deleted when its reference count becomes zero. Typically, you build a tear-off interface for an interface that is rarely used, since using a tear-off saves a vtable pointer in all the instances of your main object.  \n  \n You should derive the class implementing the tear-off from `CComTearOffObjectBase` and from whichever interfaces you want your tear-off object to support. `CComTearOffObjectBase` is templatized on the owner class and the thread model. The owner class is the class of the object for which a tear-off is being implemented. If you do not specify a thread model, the default thread model is used.  \n  \n You should create a COM map for your tear-off class. When ATL instantiates the tear-off, it will create **CComTearOffObject\\<CYourTearOffClass>** or **CComCachedTearOffObject\\<CYourTearOffClass>**.  \n  \n For example, in the BEEPER sample, the `CBeeper2` class is the tear-off class and the `CBeeper` class is the owner class:  \n  \n [!code-cpp[NVC_ATL_COM#43](../../atl/codesnippet/cpp/ccomtearoffobject-class_1.h)]  \n  \n## Inheritance Hierarchy  \n `Base`  \n  \n `CComTearOffObject`  \n  \n## Requirements  \n **Header:** atlcom.h  \n  \n##  <a name=\"ccomtearoffobject__addref\"></a>  CComTearOffObject::AddRef  \n Increments the reference count of the `CComTearOffObject` object by one.  \n  \n```\nSTDMETHOD_(ULONG, AddRef)();\n```  \n  \n### Return Value  \n A value that may be useful for diagnostics and testing.  \n  \n##  <a name=\"ccomtearoffobject__ccomtearoffobject\"></a>  CComTearOffObject::CComTearOffObject  \n The constructor.  \n  \n```\nCComTearOffObject(void* pv);\n```  \n  \n### Parameters  \n `pv`  \n [in] Pointer that will be converted to a pointer to a **CComObject\\<Owner>** object.  \n  \n### Remarks  \n Increments the owner's reference count by one.  \n  \n##  <a name=\"ccomtearoffobject___dtorccomtearoffobject\"></a>  CComTearOffObject::~CComTearOffObject  \n The destructor.  \n  \n```\n~CComTearOffObject();\n```  \n  \n### Remarks  \n Frees all allocated resources, calls FinalRelease, and decrements the module lock count.  \n  \n##  <a name=\"ccomtearoffobject__ccomtearoffobjectbase\"></a>  CComTearOffObject::CComTearOffObjectBase  \n The constructor.  \n  \n```\nCComTearOffObjectBase();\n```  \n  \n### Remarks  \n Initializes the [m_pOwner](#ccomtearoffobject__m_powner) member to **NULL**.  \n  \n##  <a name=\"ccomtearoffobject__m_powner\"></a>  CComTearOffObject::m_pOwner  \n A pointer to a [CComObject](../../atl/reference/ccomobject-class.md) object derived from *Owner*.  \n  \n```\nCComObject<Owner>* m_pOwner;\n```  \n  \n### Parameters  \n *Owner*  \n [in] The class for which a tear-off is being implemented.  \n  \n### Remarks  \n The pointer is initialized to **NULL** during construction.  \n  \n##  <a name=\"ccomtearoffobject__queryinterface\"></a>  CComTearOffObject::QueryInterface  \n Retrieves a pointer to the requested interface.  \n  \n```\nSTDMETHOD(QueryInterface)(REFIID iid,\n    void** ppvObject);\n```  \n  \n### Parameters  \n `iid`  \n [in] The IID of the interface being requested.  \n  \n `ppvObject`  \n [out] A pointer to the interface pointer identified by `iid`, or **NULL** if the interface is not found.  \n  \n### Return Value  \n A standard `HRESULT` value.  \n  \n### Remarks  \n Queries first for interfaces on your tear-off class. If the interface is not there, queries for the interface on the owner object. If the requested interface is **IUnknown**, returns the **IUnknown** of the owner.  \n  \n##  <a name=\"ccomtearoffobject__release\"></a>  CComTearOffObject::Release  \n Decrements the reference count by one and, if the reference count is zero, deletes the `CComTearOffObject`.  \n  \n```\nSTDMETHOD_ULONG Release();\n```  \n  \n### Return Value  \n In non-debug builds, always returns zero. In debug builds, returns a value that may be useful for diagnostics or testing.  \n  \n## See Also  \n [CComCachedTearOffObject Class](../../atl/reference/ccomcachedtearoffobject-class.md)   \n [Class Overview](../../atl/atl-class-overview.md)\n"}