{"nodes":[{"pos":[12,46],"content":"COccManager Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"COccManager Class | Microsoft Docs","pos":[0,34]}]},{"content":"COccManager Class","pos":[722,739]},{"pos":[740,846],"content":"Manages various custom control sites; implemented by <ph id=\"ph1\">`COleControlContainer`</ph> and <ph id=\"ph2\">`COleControlSite`</ph> objects.","source":"Manages various custom control sites; implemented by `COleControlContainer` and `COleControlSite` objects."},{"content":"Syntax","pos":[855,861]},{"content":"Members","pos":[929,936]},{"content":"Public Methods","pos":[946,960]},{"content":"Name","pos":[967,971]},{"content":"Description","pos":[972,983]},{"content":"COccManager::CreateContainer","pos":[1022,1050]},{"pos":[1083,1118],"content":"Creates a <bpt id=\"p1\">**</bpt>COleContainer<ept id=\"p1\">**</ept> object.","source":"Creates a **COleContainer** object."},{"content":"COccManager::CreateDlgControls","pos":[1124,1154]},{"pos":[1189,1263],"content":"Creates ActiveX controls, hosted by the associated <ph id=\"ph1\">`COleContainer`</ph> object.","source":"Creates ActiveX controls, hosted by the associated `COleContainer` object."},{"content":"COccManager::CreateSite","pos":[1269,1292]},{"pos":[1320,1354],"content":"Creates a <ph id=\"ph1\">`COleClientSite`</ph> object.","source":"Creates a `COleClientSite` object."},{"content":"COccManager::GetDefBtnCode","pos":[1360,1386]},{"content":"Retrieves the code of the default button.","pos":[1417,1458]},{"content":"COccManager::IsDialogMessage","pos":[1464,1492]},{"content":"Determines the target of a dialog message.","pos":[1525,1567]},{"content":"COccManager::IsLabelControl","pos":[1573,1600]},{"content":"Determines if the specified control is a label control.","pos":[1632,1687]},{"content":"COccManager::IsMatchingMnemonic","pos":[1693,1724]},{"content":"Determines if the current mnemonic matches the mnemonic of the specified control.","pos":[1760,1841]},{"content":"COccManager::OnEvent","pos":[1847,1867]},{"content":"Attempts to handle the specified event.","pos":[1892,1931]},{"content":"COccManager::PostCreateDialog","pos":[1937,1966]},{"content":"Frees resources allocated during dialog creation.","pos":[2000,2049]},{"content":"COccManager::PreCreateDialog","pos":[2055,2083]},{"content":"Processes a dialog template for ActiveX controls.","pos":[2116,2165]},{"content":"COccManager::SetDefaultButton","pos":[2171,2200]},{"content":"Toggles the default state of the specified control.","pos":[2234,2285]},{"content":"COccManager::SplitDialogTemplate","pos":[2291,2323]},{"content":"Separates any existing ActiveX controls from common controls in the specified dialog template.","pos":[2360,2454]},{"content":"Remarks","pos":[2464,2471]},{"content":"The base class, <bpt id=\"p1\">**</bpt>CNoTrackObject<ept id=\"p1\">**</ept>, is an undocumented base class (located in AFXTLS.H).","pos":[2475,2563],"source":"The base class, **CNoTrackObject**, is an undocumented base class (located in AFXTLS.H)."},{"content":"Designed for use by the MFC framework, classes derived from the <bpt id=\"p1\">**</bpt>CNoTrackObject<ept id=\"p1\">**</ept> class are exempt from memory leak detection.","pos":[2564,2691],"source":" Designed for use by the MFC framework, classes derived from the **CNoTrackObject** class are exempt from memory leak detection."},{"content":"It is not recommended that you derive directly from <bpt id=\"p1\">**</bpt>CNoTrackObject<ept id=\"p1\">**</ept>.","pos":[2692,2763],"source":" It is not recommended that you derive directly from **CNoTrackObject**."},{"content":"Inheritance Hierarchy","pos":[2772,2793]},{"content":"Requirements","pos":[2842,2854]},{"pos":[2858,2878],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afxocc.h","source":"**Header:** afxocc.h"},{"pos":[2933,2961],"content":"COccManager::CreateContainer"},{"content":"Called by the framework to create a control container.","pos":[2965,3019]},{"content":"Parameters","pos":[3103,3113]},{"content":"A pointer to the window object associated with the custom site container.","pos":[3127,3200]},{"content":"Return Value","pos":[3210,3222]},{"pos":[3226,3287],"content":"A pointer to the newly created container; otherwise <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","source":"A pointer to the newly created container; otherwise **NULL**."},{"content":"Remarks","pos":[3297,3304]},{"pos":[3308,3492],"content":"For more information on creating custom sites, see <bpt id=\"p1\">[</bpt>COleControlContainer::AttachControlSite<ept id=\"p1\">](../../mfc/reference/colecontrolcontainer-class.md#colecontrolcontainer__attachcontrolsite)</ept>.","source":"For more information on creating custom sites, see [COleControlContainer::AttachControlSite](../../mfc/reference/colecontrolcontainer-class.md#colecontrolcontainer__attachcontrolsite)."},{"pos":[3549,3579],"content":"COccManager::CreateDlgControls"},{"pos":[3583,3673],"content":"Call this function to create ActiveX controls specified by the <ph id=\"ph1\">`pOccDialogInfo`</ph> parameter.","source":"Call this function to create ActiveX controls specified by the `pOccDialogInfo` parameter."},{"content":"Parameters","pos":[3955,3965]},{"content":"pWndParent","pos":[3970,3980]},{"content":"A pointer to the parent of the dialog object.","pos":[3985,4030]},{"content":"The name of the resource being created.","pos":[4059,4098]},{"content":"A pointer to the dialog template used to create the dialog object.","pos":[4125,4191]},{"content":"A pointer to a resource.","pos":[4214,4238]},{"content":"Return Value","pos":[4248,4260]},{"content":"Nonzero if the control was created successfully; otherwise zero.","pos":[4264,4328]},{"pos":[4378,4401],"content":"COccManager::CreateSite"},{"pos":[4405,4505],"content":"Called by the framework to create a control site, hosted by the container pointed to by <ph id=\"ph1\">`pCtrlCont`</ph>.","source":"Called by the framework to create a control site, hosted by the container pointed to by `pCtrlCont`."},{"content":"Parameters","pos":[4600,4610]},{"content":"A pointer to the control container hosting the new control site.","pos":[4629,4693]},{"content":"Return Value","pos":[4703,4715]},{"content":"A pointer to the newly created control site.","pos":[4719,4763]},{"content":"Remarks","pos":[4773,4780]},{"pos":[4784,4929],"content":"Override this function to create a custom control site, using your <bpt id=\"p1\">[</bpt>COleControlSite<ept id=\"p1\">](../../mfc/reference/colecontrolsite-class.md)</ept>-derived class.","source":"Override this function to create a custom control site, using your [COleControlSite](../../mfc/reference/colecontrolsite-class.md)-derived class."},{"content":"Each control container can host multiple sites.","pos":[4936,4983]},{"content":"Create additional sites with multiple calls to <ph id=\"ph1\">`CreateSite`</ph>.","pos":[4984,5044],"source":" Create additional sites with multiple calls to `CreateSite`."},{"pos":[5097,5123],"content":"COccManager::GetDefBtnCode"},{"content":"Call this function to determine if the control is a default push button.","pos":[5127,5199]},{"content":"Parameters","pos":[5274,5284]},{"content":"The window object containing the button control.","pos":[5298,5346]},{"content":"Return Value","pos":[5356,5368]},{"content":"One of the following values:","pos":[5372,5400]},{"pos":[5408,5475],"content":"<bpt id=\"p1\">**</bpt>DLGC_DEFPUSHBUTTON<ept id=\"p1\">**</ept> Control is the default button in the dialog.","source":"**DLGC_DEFPUSHBUTTON** Control is the default button in the dialog."},{"pos":[5483,5556],"content":"<bpt id=\"p1\">**</bpt>DLGC_UNDEFPUSHBUTTON<ept id=\"p1\">**</ept> Control is not the default button in the dialog.","source":"**DLGC_UNDEFPUSHBUTTON** Control is not the default button in the dialog."},{"pos":[5564,5594],"content":"<bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept> Control is not a button.","source":"**0** Control is not a button."},{"pos":[5649,5677],"content":"COccManager::IsDialogMessage"},{"content":"Called by the framework to determine whether a message is intended for the specified dialog box and, if it is, processes the message.","pos":[5681,5814]},{"content":"Parameters","pos":[5908,5918]},{"content":"pWndDlg","pos":[5923,5930]},{"content":"A pointer to the intended target dialog of the message.","pos":[5935,5990]},{"content":"A pointer to an <ph id=\"ph1\">`MSG`</ph> structure that contains the message to be checked.","pos":[6008,6080],"source":" A pointer to an `MSG` structure that contains the message to be checked."},{"content":"Return Value","pos":[6090,6102]},{"content":"Nonzero if the message is processed; otherwise zero.","pos":[6106,6158]},{"content":"Remarks","pos":[6168,6175]},{"content":"The default behavior of <ph id=\"ph1\">`IsDialogMessage`</ph> is to check for keyboard messages and convert them into selections for the corresponding dialog box.","pos":[6179,6321],"source":"The default behavior of `IsDialogMessage` is to check for keyboard messages and convert them into selections for the corresponding dialog box."},{"content":"For example, the TAB key, when pressed, selects the next control or group of controls.","pos":[6322,6408]},{"content":"Override this function to provide custom behavior for messages sent to the specified dialog.","pos":[6415,6507]},{"pos":[6561,6588],"content":"COccManager::IsLabelControl"},{"content":"Call this function to determine if the specified control is a label control.","pos":[6592,6668]},{"content":"Parameters","pos":[6812,6822]},{"content":"A pointer to the window containing the control.","pos":[6836,6883]},{"content":"Return Value","pos":[6893,6905]},{"content":"Nonzero if the control is a label; otherwise zero","pos":[6909,6958]},{"content":"Remarks","pos":[6968,6975]},{"content":"A label control is one that acts like a label for whatever control is next in the ordering.","pos":[6979,7070]},{"pos":[7128,7159],"content":"COccManager::IsMatchingMnemonic"},{"content":"Call this function to determine if the current mnemonic matches that represented by the control.","pos":[7163,7259]},{"content":"Parameters","pos":[7459,7469]},{"content":"A pointer to the window containing the control.","pos":[7483,7530]},{"content":"A pointer to the message containing the mnemonic to match.","pos":[7548,7606]},{"content":"Return Value","pos":[7616,7628]},{"content":"Nonzero if the mnemonic matches the control; otherwise zero","pos":[7632,7691]},{"content":"Remarks","pos":[7701,7708]},{"pos":[7755,7775],"content":"COccManager::OnEvent"},{"content":"Called by the framework to handle the specified event.","pos":[7779,7833]},{"content":"Parameters","pos":[7993,8003]},{"content":"pCmdTarget","pos":[8008,8018]},{"content":"A pointer to the <ph id=\"ph1\">`CCmdTarget`</ph> object attempting to handle the event","pos":[8023,8090],"source":" A pointer to the `CCmdTarget` object attempting to handle the event"},{"content":"The resource ID of the control.","pos":[8109,8140]},{"content":"The event being handled.","pos":[8159,8183]},{"content":"If not <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>, <ph id=\"ph1\">`OnEvent`</ph> fills in the <bpt id=\"p2\">**</bpt>pTarget<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>pmf<ept id=\"p3\">**</ept> members of the <bpt id=\"p4\">**</bpt>AFX_CMDHANDLERINFO<ept id=\"p4\">**</ept> structure instead of dispatching the command.","pos":[8208,8355],"source":" If not **NULL**, `OnEvent` fills in the **pTarget** and **pmf** members of the **AFX_CMDHANDLERINFO** structure instead of dispatching the command."},{"content":"Typically, this parameter should be <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept>.","pos":[8356,8401],"source":" Typically, this parameter should be **NULL**."},{"content":"Return Value","pos":[8411,8423]},{"content":"Nonzero if the event was handled, otherwise zero.","pos":[8427,8476]},{"content":"Remarks","pos":[8486,8493]},{"content":"Override this function to customize the default event-handling process.","pos":[8497,8568]},{"pos":[8623,8651],"content":"COccManager::PreCreateDialog"},{"content":"Called by the framework to process a dialog template for ActiveX controls before creating the actual dialog box.","pos":[8655,8767]},{"content":"Parameters","pos":[8919,8929]},{"content":"An <bpt id=\"p1\">**</bpt>_AFX_OCC_DIALOG_INFO<ept id=\"p1\">**</ept> structure containing information on the dialog template and any ActiveX controls hosted by the dialog.","pos":[8953,9083],"source":" An **_AFX_OCC_DIALOG_INFO** structure containing information on the dialog template and any ActiveX controls hosted by the dialog."},{"content":"pOrigTemplate","pos":[9091,9104]},{"content":"A pointer to the dialog template to be used in creating the dialog box.","pos":[9109,9180]},{"content":"Return Value","pos":[9190,9202]},{"content":"A pointer to a dialog template structure used to create the dialog box.","pos":[9206,9277]},{"content":"Remarks","pos":[9287,9294]},{"pos":[9298,9459],"content":"The default behavior makes a call to <ph id=\"ph1\">`SplitDialogTemplate`</ph>, determining if there are any ActiveX controls present and then returns the resultant dialog template.","source":"The default behavior makes a call to `SplitDialogTemplate`, determining if there are any ActiveX controls present and then returns the resultant dialog template."},{"content":"Override this function to customize the process of creating a dialog box hosting ActiveX controls.","pos":[9466,9564]},{"pos":[9620,9649],"content":"COccManager::PostCreateDialog"},{"content":"Called by the framework to free memory allocated for the dialog template.","pos":[9653,9726]},{"content":"Parameters","pos":[9820,9830]},{"content":"An <bpt id=\"p1\">**</bpt>_AFX_OCC_DIALOG_INFO<ept id=\"p1\">**</ept> structure containing information on the dialog template and any ActiveX controls hosted by the dialog.","pos":[9854,9984],"source":" An **_AFX_OCC_DIALOG_INFO** structure containing information on the dialog template and any ActiveX controls hosted by the dialog."},{"content":"Remarks","pos":[9994,10001]},{"pos":[10005,10130],"content":"This memory was allocated by a call to <ph id=\"ph1\">`SplitDialogTemplate`</ph>, and was used for any hosted ActiveX controls in the dialog box.","source":"This memory was allocated by a call to `SplitDialogTemplate`, and was used for any hosted ActiveX controls in the dialog box."},{"content":"Override this function to customize the process of cleaning up any resources used by the dialog box object.","pos":[10137,10244]},{"pos":[10300,10329],"content":"COccManager::SetDefaultButton"},{"content":"Call this function to set the control as the default button.","pos":[10333,10393]},{"content":"Parameters","pos":[10496,10506]},{"content":"A pointer to the window containing the control.","pos":[10520,10567]},{"content":"Nonzero if the control should become the default button; otherwise zero.","pos":[10588,10660]},{"content":"Return Value","pos":[10670,10682]},{"content":"Nonzero if successful; otherwise zero.","pos":[10686,10724]},{"content":"Remarks","pos":[10734,10741]},{"pos":[10749,11015],"content":"[!NOTE]\n The control must have the **OLEMISC_ACTSLIKEBUTTON** status bit set. For more information on **OLEMISC** flags, see the [OLEMISC](http://msdn.microsoft.com/library/windows/desktop/ms678497) topic in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].","leadings":["","> "],"nodes":[{"content":" The control must have the **OLEMISC_ACTSLIKEBUTTON** status bit set. For more information on **OLEMISC** flags, see the [OLEMISC](http://msdn.microsoft.com/library/windows/desktop/ms678497) topic in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].","pos":[8,264],"nodes":[{"content":"The control must have the <bpt id=\"p1\">**</bpt>OLEMISC_ACTSLIKEBUTTON<ept id=\"p1\">**</ept> status bit set.","pos":[1,69],"source":" The control must have the **OLEMISC_ACTSLIKEBUTTON** status bit set."},{"content":"For more information on <bpt id=\"p1\">**</bpt>OLEMISC<ept id=\"p1\">**</ept> flags, see the <bpt id=\"p2\">[</bpt>OLEMISC<ept id=\"p2\">](http://msdn.microsoft.com/library/windows/desktop/ms678497)</ept> topic in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[70,256],"source":" For more information on **OLEMISC** flags, see the [OLEMISC](http://msdn.microsoft.com/library/windows/desktop/ms678497) topic in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."}]}]},{"pos":[11074,11106],"content":"COccManager::SplitDialogTemplate"},{"content":"Called by the framework to split the ActiveX controls from common dialog controls.","pos":[11110,11192]},{"content":"Parameters","pos":[11333,11343]},{"content":"A pointer to the dialog template to be examined.","pos":[11362,11410]},{"content":"A list of pointers to dialog box items that are ActiveX controls.","pos":[11436,11501]},{"content":"Return Value","pos":[11511,11523]},{"content":"A pointer to a dialog template structure containing only non-ActiveX controls.","pos":[11527,11605]},{"content":"If no ActiveX controls are present, <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> is returned.","pos":[11606,11663],"source":" If no ActiveX controls are present, **NULL** is returned."},{"content":"Remarks","pos":[11673,11680]},{"content":"If any ActiveX controls are found, the template is analyzed and a new template, containing only non-ActiveX controls, is created.","pos":[11684,11813]},{"content":"Any ActiveX controls found during this process are added to <ph id=\"ph1\">`ppOleDlgItems`</ph>.","pos":[11814,11890],"source":" Any ActiveX controls found during this process are added to `ppOleDlgItems`."},{"pos":[11897,11971],"content":"If there are no ActiveX controls in the template, <bpt id=\"p1\">**</bpt>NULL<ept id=\"p1\">**</ept> is returned <bpt id=\"p2\">*</bpt>.<ept id=\"p2\">*</ept>","source":"If there are no ActiveX controls in the template, **NULL** is returned *.*"},{"pos":[11979,12072],"content":"[!NOTE]\n Memory allocated for the new template is freed in the `PostCreateDialog` function.","leadings":["","> "],"nodes":[{"content":"Memory allocated for the new template is freed in the <ph id=\"ph1\">`PostCreateDialog`</ph> function.","pos":[9,91],"source":" Memory allocated for the new template is freed in the `PostCreateDialog` function."}]},{"content":"Override this function to customize this process.","pos":[12079,12128]},{"content":"See Also","pos":[12137,12145]},{"content":"Hierarchy Chart","pos":[12150,12165]},{"content":"COleControlSite Class","pos":[12202,12223]},{"content":"COleControlContainer Class","pos":[12276,12302]}],"content":"---\ntitle: \"COccManager Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"COccManager\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"custom controls [MFC], sites\"\n  - \"COccManager class\"\n  - \"CNoTrackObject class\"\n  - \"ActiveX control containers [C++], control site\"\nms.assetid: 7d47aeed-d1ab-48e3-b4cf-d429718e370a\ncaps.latest.revision: 20\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# COccManager Class\nManages various custom control sites; implemented by `COleControlContainer` and `COleControlSite` objects.  \n  \n## Syntax  \n  \n```  \nclass COccManager : public CNoTrackObject  \n```  \n  \n## Members  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[COccManager::CreateContainer](#coccmanager__createcontainer)|Creates a **COleContainer** object.|  \n|[COccManager::CreateDlgControls](#coccmanager__createdlgcontrols)|Creates ActiveX controls, hosted by the associated `COleContainer` object.|  \n|[COccManager::CreateSite](#coccmanager__createsite)|Creates a `COleClientSite` object.|  \n|[COccManager::GetDefBtnCode](#coccmanager__getdefbtncode)|Retrieves the code of the default button.|  \n|[COccManager::IsDialogMessage](#coccmanager__isdialogmessage)|Determines the target of a dialog message.|  \n|[COccManager::IsLabelControl](#coccmanager__islabelcontrol)|Determines if the specified control is a label control.|  \n|[COccManager::IsMatchingMnemonic](#coccmanager__ismatchingmnemonic)|Determines if the current mnemonic matches the mnemonic of the specified control.|  \n|[COccManager::OnEvent](#coccmanager__onevent)|Attempts to handle the specified event.|  \n|[COccManager::PostCreateDialog](#coccmanager__postcreatedialog)|Frees resources allocated during dialog creation.|  \n|[COccManager::PreCreateDialog](#coccmanager__precreatedialog)|Processes a dialog template for ActiveX controls.|  \n|[COccManager::SetDefaultButton](#coccmanager__setdefaultbutton)|Toggles the default state of the specified control.|  \n|[COccManager::SplitDialogTemplate](#coccmanager__splitdialogtemplate)|Separates any existing ActiveX controls from common controls in the specified dialog template.|  \n  \n## Remarks  \n The base class, **CNoTrackObject**, is an undocumented base class (located in AFXTLS.H). Designed for use by the MFC framework, classes derived from the **CNoTrackObject** class are exempt from memory leak detection. It is not recommended that you derive directly from **CNoTrackObject**.  \n  \n## Inheritance Hierarchy  \n `CNoTrackObject`  \n  \n `COccManager`  \n  \n## Requirements  \n **Header:** afxocc.h  \n  \n##  <a name=\"coccmanager__createcontainer\"></a>  COccManager::CreateContainer  \n Called by the framework to create a control container.  \n  \n```  \nvirtual COleControlContainer* CreateContainer(CWnd* pWnd);\n```  \n  \n### Parameters  \n `pWnd`  \n A pointer to the window object associated with the custom site container.  \n  \n### Return Value  \n A pointer to the newly created container; otherwise **NULL**.  \n  \n### Remarks  \n For more information on creating custom sites, see [COleControlContainer::AttachControlSite](../../mfc/reference/colecontrolcontainer-class.md#colecontrolcontainer__attachcontrolsite).  \n  \n##  <a name=\"coccmanager__createdlgcontrols\"></a>  COccManager::CreateDlgControls  \n Call this function to create ActiveX controls specified by the `pOccDialogInfo` parameter.  \n  \n```  \nvirtual BOOL CreateDlgControls(\n    CWnd* pWndParent,  \n    LPCTSTR lpszResourceName,  \n    _AFX_OCC_DIALOG_INFO* pOccDialogInfo);\n\n \nvirtual BOOL CreateDlgControls(\n    CWnd* pWndParent,  \n    void* lpResource,  \n    _AFX_OCC_DIALOG_INFO* pOccDialogInfo);\n```  \n  \n### Parameters  \n *pWndParent*  \n A pointer to the parent of the dialog object.  \n  \n `lpszResourceName`  \n The name of the resource being created.  \n  \n `pOccDialogInfo`  \n A pointer to the dialog template used to create the dialog object.  \n  \n `lpResource`  \n A pointer to a resource.  \n  \n### Return Value  \n Nonzero if the control was created successfully; otherwise zero.  \n  \n##  <a name=\"coccmanager__createsite\"></a>  COccManager::CreateSite  \n Called by the framework to create a control site, hosted by the container pointed to by `pCtrlCont`.  \n  \n```  \nvirtual COleControlSite* CreateSite(COleControlContainer* pCtrlCont);\n```  \n  \n### Parameters  \n `pCtrlCont`  \n A pointer to the control container hosting the new control site.  \n  \n### Return Value  \n A pointer to the newly created control site.  \n  \n### Remarks  \n Override this function to create a custom control site, using your [COleControlSite](../../mfc/reference/colecontrolsite-class.md)-derived class.  \n  \n Each control container can host multiple sites. Create additional sites with multiple calls to `CreateSite`.  \n  \n##  <a name=\"coccmanager__getdefbtncode\"></a>  COccManager::GetDefBtnCode  \n Call this function to determine if the control is a default push button.  \n  \n```  \nstatic DWORD AFX_CDECL GetDefBtnCode(CWnd* pWnd);\n```  \n  \n### Parameters  \n `pWnd`  \n The window object containing the button control.  \n  \n### Return Value  \n One of the following values:  \n  \n- **DLGC_DEFPUSHBUTTON** Control is the default button in the dialog.  \n  \n- **DLGC_UNDEFPUSHBUTTON** Control is not the default button in the dialog.  \n  \n- **0** Control is not a button.  \n  \n##  <a name=\"coccmanager__isdialogmessage\"></a>  COccManager::IsDialogMessage  \n Called by the framework to determine whether a message is intended for the specified dialog box and, if it is, processes the message.  \n  \n```  \nvirtual BOOL IsDialogMessage(\n    CWnd* pWndDlg,  \n    LPMSG lpMsg);\n```  \n  \n### Parameters  \n *pWndDlg*  \n A pointer to the intended target dialog of the message.  \n  \n `lpMsg`  \n A pointer to an `MSG` structure that contains the message to be checked.  \n  \n### Return Value  \n Nonzero if the message is processed; otherwise zero.  \n  \n### Remarks  \n The default behavior of `IsDialogMessage` is to check for keyboard messages and convert them into selections for the corresponding dialog box. For example, the TAB key, when pressed, selects the next control or group of controls.  \n  \n Override this function to provide custom behavior for messages sent to the specified dialog.  \n  \n##  <a name=\"coccmanager__islabelcontrol\"></a>  COccManager::IsLabelControl  \n Call this function to determine if the specified control is a label control.  \n  \n```  \nstatic BOOL AFX_CDECL IsLabelControl(CWnd* pWnd);\n\n \nstatic BOOL AFX_CDECL IsLabelControl(COleControlSiteOrWnd* pWnd);\n```  \n  \n### Parameters  \n `pWnd`  \n A pointer to the window containing the control.  \n  \n### Return Value  \n Nonzero if the control is a label; otherwise zero  \n  \n### Remarks  \n A label control is one that acts like a label for whatever control is next in the ordering.  \n  \n##  <a name=\"coccmanager__ismatchingmnemonic\"></a>  COccManager::IsMatchingMnemonic  \n Call this function to determine if the current mnemonic matches that represented by the control.  \n  \n```  \nstatic BOOL AFX_CDECL IsMatchingMnemonic(\n    CWnd* pWnd,  \n    LPMSG lpMsg);\n\n \nstatic BOOL AFX_CDECL IsMatchingMnemonic(\n    COleControlSiteOrWnd* pWnd,  \n    LPMSG lpMsg);\n```  \n  \n### Parameters  \n `pWnd`  \n A pointer to the window containing the control.  \n  \n `lpMsg`  \n A pointer to the message containing the mnemonic to match.  \n  \n### Return Value  \n Nonzero if the mnemonic matches the control; otherwise zero  \n  \n### Remarks  \n  \n##  <a name=\"coccmanager__onevent\"></a>  COccManager::OnEvent  \n Called by the framework to handle the specified event.  \n  \n```  \nvirtual BOOL OnEvent(\n    CCmdTarget* pCmdTarget,  \n    UINT idCtrl,  \n    AFX_EVENT* pEvent,  \n    AFX_CMDHANDLERINFO* pHandlerInfo);\n```  \n  \n### Parameters  \n *pCmdTarget*  \n A pointer to the `CCmdTarget` object attempting to handle the event  \n  \n `idCtrl`  \n The resource ID of the control.  \n  \n `pEvent`  \n The event being handled.  \n  \n `pHandlerInfo`  \n If not **NULL**, `OnEvent` fills in the **pTarget** and **pmf** members of the **AFX_CMDHANDLERINFO** structure instead of dispatching the command. Typically, this parameter should be **NULL**.  \n  \n### Return Value  \n Nonzero if the event was handled, otherwise zero.  \n  \n### Remarks  \n Override this function to customize the default event-handling process.  \n  \n##  <a name=\"coccmanager__precreatedialog\"></a>  COccManager::PreCreateDialog  \n Called by the framework to process a dialog template for ActiveX controls before creating the actual dialog box.  \n  \n```  \nvirtual const DLGTEMPLATE* PreCreateDialog(\n    _AFX_OCC_DIALOG_INFO* pOccDialogInfo,  \n    const DLGTEMPLATE* pOrigTemplate);\n```  \n  \n### Parameters  \n `pOccDialogInfo`  \n An **_AFX_OCC_DIALOG_INFO** structure containing information on the dialog template and any ActiveX controls hosted by the dialog.  \n  \n *pOrigTemplate*  \n A pointer to the dialog template to be used in creating the dialog box.  \n  \n### Return Value  \n A pointer to a dialog template structure used to create the dialog box.  \n  \n### Remarks  \n The default behavior makes a call to `SplitDialogTemplate`, determining if there are any ActiveX controls present and then returns the resultant dialog template.  \n  \n Override this function to customize the process of creating a dialog box hosting ActiveX controls.  \n  \n##  <a name=\"coccmanager__postcreatedialog\"></a>  COccManager::PostCreateDialog  \n Called by the framework to free memory allocated for the dialog template.  \n  \n```  \nvirtual void PostCreateDialog(_AFX_OCC_DIALOG_INFO* pOccDialogInfo);\n```  \n  \n### Parameters  \n `pOccDialogInfo`  \n An **_AFX_OCC_DIALOG_INFO** structure containing information on the dialog template and any ActiveX controls hosted by the dialog.  \n  \n### Remarks  \n This memory was allocated by a call to `SplitDialogTemplate`, and was used for any hosted ActiveX controls in the dialog box.  \n  \n Override this function to customize the process of cleaning up any resources used by the dialog box object.  \n  \n##  <a name=\"coccmanager__setdefaultbutton\"></a>  COccManager::SetDefaultButton  \n Call this function to set the control as the default button.  \n  \n```  \nstatic void AFX_CDECL SetDefaultButton(\n    CWnd* pWnd,  \n    BOOL bDefault);\n```  \n  \n### Parameters  \n `pWnd`  \n A pointer to the window containing the control.  \n  \n `bDefault`  \n Nonzero if the control should become the default button; otherwise zero.  \n  \n### Return Value  \n Nonzero if successful; otherwise zero.  \n  \n### Remarks  \n  \n> [!NOTE]\n>  The control must have the **OLEMISC_ACTSLIKEBUTTON** status bit set. For more information on **OLEMISC** flags, see the [OLEMISC](http://msdn.microsoft.com/library/windows/desktop/ms678497) topic in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"coccmanager__splitdialogtemplate\"></a>  COccManager::SplitDialogTemplate  \n Called by the framework to split the ActiveX controls from common dialog controls.  \n  \n```  \nvirtual DLGTEMPLATE* SplitDialogTemplate(\n    const DLGTEMPLATE* pTemplate,  \n    DLGITEMTEMPLATE** ppOleDlgItems);\n```  \n  \n### Parameters  \n `pTemplate`  \n A pointer to the dialog template to be examined.  \n  \n `ppOleDlgItems`  \n A list of pointers to dialog box items that are ActiveX controls.  \n  \n### Return Value  \n A pointer to a dialog template structure containing only non-ActiveX controls. If no ActiveX controls are present, **NULL** is returned.  \n  \n### Remarks  \n If any ActiveX controls are found, the template is analyzed and a new template, containing only non-ActiveX controls, is created. Any ActiveX controls found during this process are added to `ppOleDlgItems`.  \n  \n If there are no ActiveX controls in the template, **NULL** is returned *.*  \n  \n> [!NOTE]\n>  Memory allocated for the new template is freed in the `PostCreateDialog` function.  \n  \n Override this function to customize this process.  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [COleControlSite Class](../../mfc/reference/colecontrolsite-class.md)   \n [COleControlContainer Class](../../mfc/reference/colecontrolcontainer-class.md)\n"}