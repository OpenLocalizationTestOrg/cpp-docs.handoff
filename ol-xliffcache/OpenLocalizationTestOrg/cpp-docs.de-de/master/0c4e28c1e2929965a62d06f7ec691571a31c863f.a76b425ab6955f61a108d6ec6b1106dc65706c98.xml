{"nodes":[{"pos":[12,45],"content":"Binary Operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Binary Operators | Microsoft Docs","pos":[0,33]}]},{"content":"Binary Operators","pos":[644,660]},{"content":"The following table shows a list of operators that can be overloaded.","pos":[661,730]},{"content":"Redefinable Binary Operators","pos":[740,768]},{"content":"Operator","pos":[775,783]},{"content":"Name","pos":[784,788]},{"content":",","pos":[825,826]},{"content":"Comma","pos":[829,834]},{"content":"Inequality","pos":[844,854]},{"content":"Modulus","pos":[863,870]},{"content":"Modulus/assignment","pos":[880,898]},{"content":"Bitwise AND","pos":[909,920]},{"content":"Logical AND","pos":[932,943]},{"content":"Bitwise AND/assignment","pos":[955,977]},{"content":"Multiplication","pos":[989,1003]},{"content":"Multiplication/assignment","pos":[1016,1041]},{"content":"Addition","pos":[1052,1060]},{"content":"Addition/assignment","pos":[1070,1089]},{"content":"–","pos":[1096,1097]},{"content":"Subtraction","pos":[1100,1111]},{"content":"–=","pos":[1118,1120]},{"content":"Subtraction/assignment","pos":[1123,1145]},{"content":"–&gt;","pos":[1152,1154],"source":"–>"},{"content":"Member selection","pos":[1157,1173]},{"content":"–&gt;","pos":[1180,1182],"source":"–>"},{"content":"Pointer-to-member selection","pos":[1187,1214]},{"content":"Division","pos":[1225,1233]},{"content":"Division/assignment","pos":[1243,1262]},{"content":"Less than","pos":[1273,1282]},{"content":"Left shift","pos":[1294,1304]},{"content":"Left shift/assignment","pos":[1317,1338]},{"content":"Less than or equal to","pos":[1350,1371]},{"content":"Assignment","pos":[1382,1392]},{"content":"Equality","pos":[1402,1410]},{"content":"Greater than","pos":[1421,1433]},{"content":"Greater than or equal to","pos":[1445,1469]},{"content":"Right shift","pos":[1481,1492]},{"content":"Right shift/assignment","pos":[1505,1527]},{"content":"Exclusive OR","pos":[1538,1550]},{"content":"Exclusive OR/assignment","pos":[1560,1583]},{"content":"&amp;#124;","pos":[1590,1596],"source":"&#124;"},{"content":"Bitwise inclusive OR","pos":[1599,1619]},{"content":"Bitwise inclusive OR/assignment","pos":[1634,1665]},{"content":"Logical OR","pos":[1685,1695]},{"content":"To declare a binary operator function as a nonstatic member, you must declare it in the form:","pos":[1703,1796]},{"pos":[1803,1847],"content":"<bpt id=\"p1\">*</bpt>ret-type<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>operator<ept id=\"p2\">**</ept><ph id=\"ph1\">`op`</ph><bpt id=\"p3\">**</bpt>(<ept id=\"p3\">**</ept> <ph id=\"ph2\">`arg`</ph> <bpt id=\"p4\">**</bpt>)<ept id=\"p4\">**</ept>","source":"*ret-type* **operator**`op`**(** `arg` **)**"},{"pos":[1854,1988],"content":"where <bpt id=\"p1\">*</bpt>ret-type<ept id=\"p1\">*</ept> is the return type, <ph id=\"ph1\">`op`</ph> is one of the operators listed in the preceding table, and <ph id=\"ph2\">`arg`</ph> is an argument of any type.","source":"where *ret-type* is the return type, `op` is one of the operators listed in the preceding table, and `arg` is an argument of any type."},{"content":"To declare a binary operator function as a global function, you must declare it in the form:","pos":[1995,2087]},{"pos":[2094,2151],"content":"<bpt id=\"p1\">*</bpt>ret-type<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>operator<ept id=\"p2\">**</ept><ph id=\"ph1\">`op`</ph><bpt id=\"p3\">**</bpt>(<ept id=\"p3\">**</ept> <ph id=\"ph2\">`arg1`</ph><bpt id=\"p4\">**</bpt>,<ept id=\"p4\">**</ept> <ph id=\"ph3\">`arg2`</ph> <bpt id=\"p5\">**</bpt>)<ept id=\"p5\">**</ept>","source":"*ret-type* **operator**`op`**(** `arg1`**,** `arg2` **)**"},{"content":"where <bpt id=\"p1\">*</bpt>ret-type<ept id=\"p1\">*</ept> and <ph id=\"ph1\">`op`</ph> are as described for member operator functions and <ph id=\"ph2\">`arg1`</ph> and <ph id=\"ph3\">`arg2`</ph> are arguments.","pos":[2158,2267],"source":"where *ret-type* and `op` are as described for member operator functions and `arg1` and `arg2` are arguments."},{"content":"At least one of the arguments must be of class type.","pos":[2268,2320]},{"pos":[2328,2510],"content":"[!NOTE]\n There is no restriction on the return types of the binary operators; however, most user-defined binary operators return either a class type or a reference to a class type.","leadings":["","> "],"nodes":[{"content":"There is no restriction on the return types of the binary operators; however, most user-defined binary operators return either a class type or a reference to a class type.","pos":[9,180]}]},{"content":"See Also","pos":[2519,2527]},{"content":"Operator Overloading","pos":[2532,2552]}],"content":"---\ntitle: \"Binary Operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"language-reference\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"member-selection operators\"\n  - \"operators [C++], binary\"\n  - \"binary operators\"\nms.assetid: c0e7fbff-bc87-4708-8333-504ac09ee83e\ncaps.latest.revision: 7\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Binary Operators\nThe following table shows a list of operators that can be overloaded.  \n  \n### Redefinable Binary Operators  \n  \n|Operator|Name|  \n|--------------|----------|  \n|**,**|Comma|  \n|`!=`|Inequality|  \n|`%`|Modulus|  \n|`%=`|Modulus/assignment|  \n|**&**|Bitwise AND|  \n|**&&**|Logical AND|  \n|**&=**|Bitwise AND/assignment|  \n|**\\***|Multiplication|  \n|**\\*=**|Multiplication/assignment|  \n|**+**|Addition|  \n|`+=`|Addition/assignment|  \n|**–**|Subtraction|  \n|**–=**|Subtraction/assignment|  \n|**–>**|Member selection|  \n|**–>\\***|Pointer-to-member selection|  \n|**/**|Division|  \n|`/=`|Division/assignment|  \n|**<**|Less than|  \n|**<<**|Left shift|  \n|**<<=**|Left shift/assignment|  \n|**<=**|Less than or equal to|  \n|**=**|Assignment|  \n|`==`|Equality|  \n|**>**|Greater than|  \n|**>=**|Greater than or equal to|  \n|**>>**|Right shift|  \n|**>>=**|Right shift/assignment|  \n|**^**|Exclusive OR|  \n|`^=`|Exclusive OR/assignment|  \n|**&#124;**|Bitwise inclusive OR|  \n|`&#124;=`|Bitwise inclusive OR/assignment|  \n|`&#124;&#124;`|Logical OR|  \n  \n To declare a binary operator function as a nonstatic member, you must declare it in the form:  \n  \n *ret-type* **operator**`op`**(** `arg` **)**  \n  \n where *ret-type* is the return type, `op` is one of the operators listed in the preceding table, and `arg` is an argument of any type.  \n  \n To declare a binary operator function as a global function, you must declare it in the form:  \n  \n *ret-type* **operator**`op`**(** `arg1`**,** `arg2` **)**  \n  \n where *ret-type* and `op` are as described for member operator functions and `arg1` and `arg2` are arguments. At least one of the arguments must be of class type.  \n  \n> [!NOTE]\n>  There is no restriction on the return types of the binary operators; however, most user-defined binary operators return either a class type or a reference to a class type.  \n  \n## See Also  \n [Operator Overloading](../cpp/operator-overloading.md)"}