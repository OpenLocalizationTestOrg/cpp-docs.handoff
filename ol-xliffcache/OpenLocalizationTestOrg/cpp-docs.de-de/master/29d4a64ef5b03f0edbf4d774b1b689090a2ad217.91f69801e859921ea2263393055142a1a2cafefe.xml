{"nodes":[{"pos":[12,53],"content":"#undef Directive (C-C++) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"undef Directive (C-C++) | Microsoft Docs","pos":[1,41]}]},{"content":"undef Directive (C/C++)","pos":[676,699]},{"pos":[700,761],"content":"Removes (undefines) a name previously created with <ph id=\"ph1\">`#define`</ph>.","source":"Removes (undefines) a name previously created with `#define`."},{"content":"Syntax","pos":[770,776]},{"content":"Remarks","pos":[829,836]},{"content":"The <ph id=\"ph1\">`#undef`</ph> directive removes the current definition of <bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept>.","pos":[840,910],"source":"The `#undef` directive removes the current definition of *identifier*."},{"content":"Consequently, subsequent occurrences of <bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept> are ignored by the preprocessor.","pos":[911,996],"source":" Consequently, subsequent occurrences of *identifier* are ignored by the preprocessor."},{"content":"To remove a macro definition using <ph id=\"ph1\">`#undef`</ph>, give only the macro <bpt id=\"p1\">*</bpt>identifier<ept id=\"p1\">*</ept> ; do not give a parameter list.","pos":[997,1106],"source":" To remove a macro definition using `#undef`, give only the macro *identifier* ; do not give a parameter list."},{"content":"You can also apply the <ph id=\"ph1\">`#undef`</ph> directive to an identifier that has no previous definition.","pos":[1113,1204],"source":"You can also apply the `#undef` directive to an identifier that has no previous definition."},{"content":"This ensures that the identifier is undefined.","pos":[1205,1251]},{"content":"Macro replacement is not performed within <ph id=\"ph1\">`#undef`</ph> statements.","pos":[1252,1314],"source":" Macro replacement is not performed within `#undef` statements."},{"content":"The <ph id=\"ph1\">`#undef`</ph> directive is typically paired with a <ph id=\"ph2\">`#define`</ph> directive to create a region in a source program in which an identifier has a special meaning.","pos":[1321,1475],"source":"The `#undef` directive is typically paired with a `#define` directive to create a region in a source program in which an identifier has a special meaning."},{"content":"For example, a specific function of the source program can use manifest constants to define environment-specific values that do not affect the rest of the program.","pos":[1476,1639]},{"content":"The <ph id=\"ph1\">`#undef`</ph> directive also works with the <ph id=\"ph2\">`#if`</ph> directive to control conditional compilation of the source program.","pos":[1640,1756],"source":" The `#undef` directive also works with the `#if` directive to control conditional compilation of the source program."},{"content":"See <bpt id=\"p1\">[</bpt>The #if, #elif, #else, and #endif Directives<ept id=\"p1\">](../preprocessor/hash-if-hash-elif-hash-else-and-hash-endif-directives-c-cpp.md)</ept> for more information.","pos":[1757,1909],"source":" See [The #if, #elif, #else, and #endif Directives](../preprocessor/hash-if-hash-elif-hash-else-and-hash-endif-directives-c-cpp.md) for more information."},{"content":"In the following example, the <ph id=\"ph1\">`#undef`</ph> directive removes definitions of a symbolic constant and a macro.","pos":[1916,2020],"source":"In the following example, the `#undef` directive removes definitions of a symbolic constant and a macro."},{"content":"Note that only the identifier of the macro is given.","pos":[2021,2073]},{"content":"Microsoft Specific","pos":[2190,2208]},{"content":"Macros can be undefined from the command line using the /U option, followed by the macro names to be undefined.","pos":[2217,2328]},{"content":"The effect of issuing this command is equivalent to a sequence of <ph id=\"ph1\">`#undef`</ph> <bpt id=\"p1\">*</bpt>macro-name<ept id=\"p1\">*</ept> statements at the beginning of the file.","pos":[2329,2457],"source":" The effect of issuing this command is equivalent to a sequence of `#undef` *macro-name* statements at the beginning of the file."},{"content":"END Microsoft Specific","pos":[2466,2488]},{"content":"See Also","pos":[2499,2507]},{"content":"Preprocessor Directives","pos":[2512,2535]}],"content":"---\ntitle: \"#undef Directive (C-C++) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"#undef\"\ndev_langs: \n  - \"C++\"\n  - \"C\"\nhelpviewer_keywords: \n  - \"#undef directive\"\n  - \"undef directive (#undef)\"\n  - \"preprocessor, directives\"\nms.assetid: 88900e0e-2c19-4a63-b681-f3d3133c24ca\ncaps.latest.revision: 7\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# #undef Directive (C/C++)\nRemoves (undefines) a name previously created with `#define`.  \n  \n## Syntax  \n  \n```  \n  \n#undef   \nidentifier  \n  \n```  \n  \n## Remarks  \n The `#undef` directive removes the current definition of *identifier*. Consequently, subsequent occurrences of *identifier* are ignored by the preprocessor. To remove a macro definition using `#undef`, give only the macro *identifier* ; do not give a parameter list.  \n  \n You can also apply the `#undef` directive to an identifier that has no previous definition. This ensures that the identifier is undefined. Macro replacement is not performed within `#undef` statements.  \n  \n The `#undef` directive is typically paired with a `#define` directive to create a region in a source program in which an identifier has a special meaning. For example, a specific function of the source program can use manifest constants to define environment-specific values that do not affect the rest of the program. The `#undef` directive also works with the `#if` directive to control conditional compilation of the source program. See [The #if, #elif, #else, and #endif Directives](../preprocessor/hash-if-hash-elif-hash-else-and-hash-endif-directives-c-cpp.md) for more information.  \n  \n In the following example, the `#undef` directive removes definitions of a symbolic constant and a macro. Note that only the identifier of the macro is given.  \n  \n```  \n#define WIDTH 80  \n#define ADD( X, Y ) ((X) + (Y))  \n.  \n.  \n.  \n#undef WIDTH  \n#undef ADD  \n```  \n  \n **Microsoft Specific**  \n  \n Macros can be undefined from the command line using the /U option, followed by the macro names to be undefined. The effect of issuing this command is equivalent to a sequence of `#undef` *macro-name* statements at the beginning of the file.  \n  \n **END Microsoft Specific**  \n  \n## See Also  \n [Preprocessor Directives](../preprocessor/preprocessor-directives.md)"}