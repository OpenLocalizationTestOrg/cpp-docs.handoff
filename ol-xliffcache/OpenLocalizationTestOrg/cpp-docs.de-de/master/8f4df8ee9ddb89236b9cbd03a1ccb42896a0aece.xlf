<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f4df8ee9ddb89236b9cbd03a1ccb42896a0aece</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cwinthread-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4708cb0cf89c26716a5c59d2d0857a8e140eace4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">afaca7e5be64ebd55ee3be68538390ace43df936</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CWinThread Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CWinThread Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents a thread of execution within an application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CWinThread::CWinThread</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CWinThread`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CWinThread::CreateThread</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Starts execution of a <ph id="ph1">`CWinThread`</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CWinThread::ExitInstance</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Override to clean up when your thread terminates.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CWinThread::GetMainWnd</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the main window for the thread.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CWinThread::GetThreadPriority</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the priority of the current thread.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CWinThread::InitInstance</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Override to perform thread instance initialization.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CWinThread::IsIdleMessage</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Checks for special messages.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CWinThread::OnIdle</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Override to perform thread-specific idle-time processing.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CWinThread::PostThreadMessage</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Posts a message to another <ph id="ph1">`CWinThread`</ph> object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CWinThread::PreTranslateMessage</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Filters messages before they are dispatched to the Windows functions <bpt id="p1">[</bpt>TranslateMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id="p2">[</bpt>DispatchMessage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CWinThread::ProcessMessageFilter</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Intercepts certain messages before they reach the application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CWinThread::ProcessWndProcException</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Intercepts all unhandled exceptions thrown by the thread's message and command handlers.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CWinThread::PumpMessage</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Contains the thread's message loop.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CWinThread::ResumeThread</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Decrements a thread's suspend count.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CWinThread::Run</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Controlling function for threads with a message pump.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Override to customize the default message loop.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CWinThread::SetThreadPriority</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Sets the priority of the current thread.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CWinThread::SuspendThread</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Increments a thread's suspend count.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CWinThread::operator HANDLE</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Retrieves the handle of the <ph id="ph1">`CWinThread`</ph> object.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CWinThread::m_bAutoDelete</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Specifies whether to destroy the object at thread termination.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CWinThread::m_hThread</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Handle to the current thread.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CWinThread::m_nThreadID</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>ID of the current thread.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CWinThread::m_pActiveWnd</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Pointer to the main window of the container application when an OLE server is in-place active.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CWinThread::m_pMainWnd</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Holds a pointer to the application's main window.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The main thread of execution is usually provided by an object derived from <ph id="ph1">`CWinApp`</ph>; <ph id="ph2">`CWinApp`</ph> is derived from <ph id="ph3">`CWinThread`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Additional <ph id="ph1">`CWinThread`</ph> objects allow multiple threads within a given application.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>There are two general types of threads that <ph id="ph1">`CWinThread`</ph> supports: worker threads and user-interface threads.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Worker threads have no message pump: for example, a thread that performs background calculations in a spreadsheet application.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>User-interface threads have a message pump and process messages received from the system.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CWinApp<ept id="p1">](../../mfc/reference/cwinapp-class.md)</ept> and classes derived from it are examples of user-interface threads.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Other user-interface threads can also be derived directly from <ph id="ph1">`CWinThread`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Objects of class <ph id="ph1">`CWinThread`</ph> typically exist for the duration of the thread.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you wish to modify this behavior, set <bpt id="p1">[</bpt>m_bAutoDelete<ept id="p1">](#cwinthread__m_bautodelete)</ept> to <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CWinThread`</ph> class is necessary to make your code and MFC fully thread-safe.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Thread-local data used by the framework to maintain thread-specific information is managed by <ph id="ph1">`CWinThread`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Because of this dependence on <ph id="ph1">`CWinThread`</ph> to handle thread-local data, any thread that uses MFC must be created by MFC.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, a thread created by the run-time function <bpt id="p1">[</bpt>_beginthread, _beginthreadex<ept id="p1">](../../c-runtime-library/reference/beginthread-beginthreadex.md)</ept> cannot use any MFC APIs.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To create a thread, call <bpt id="p1">[</bpt>AfxBeginThread<ept id="p1">](application-information-and-management.md#afxbeginthread)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>There are two forms, depending on whether you want a worker or user-interface thread.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If you want a user-interface thread, pass to <ph id="ph1">`AfxBeginThread`</ph> a pointer to the <ph id="ph2">`CRuntimeClass`</ph> of your <ph id="ph3">`CWinThread`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you want to create a worker thread, pass to <ph id="ph1">`AfxBeginThread`</ph> a pointer to the controlling function and the parameter to the controlling function.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For both worker threads and user-interface threads, you can specify optional parameters that modify priority, stack size, creation flags, and security attributes.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>will return a pointer to your new <ph id="ph1">`CWinThread`</ph> object.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Instead of calling <ph id="ph1">`AfxBeginThread`</ph>, you can construct a <ph id="ph2">`CWinThread`</ph>-derived object and then call <ph id="ph3">`CreateThread`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This two-stage construction method is useful if you want to reuse the <ph id="ph1">`CWinThread`</ph> object between successive creation and terminations of thread executions.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`CWinThread`</ph>, see the articles <bpt id="p1">[</bpt>Multithreading with C++ and MFC<ept id="p1">](../../parallel/multithreading-with-cpp-and-mfc.md)</ept>, <bpt id="p2">[</bpt>Multithreading: Creating User-Interface Threads<ept id="p2">](../../parallel/multithreading-creating-user-interface-threads.md)</ept>, <bpt id="p3">[</bpt>Multithreading: Creating Worker Threads<ept id="p3">](../../parallel/multithreading-creating-worker-threads.md)</ept>, and <bpt id="p4">[</bpt>Multithreading: How to Use the Synchronization Classes<ept id="p4">](../../parallel/multithreading-how-to-use-the-synchronization-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CWinThread::CreateThread</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Creates a thread to execute within the address space of the calling process.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Specifies an additional flag that controls the creation of the thread.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This flag can contain one of two values:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CREATE_SUSPENDED<ept id="p1">**</ept> Start the thread with a suspend count of one.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>CREATE_SUSPENDED<ept id="p1">**</ept> if you want to initialize any member data of the <ph id="ph1">`CWinThread`</ph> object, such as <bpt id="p2">[</bpt>m_bAutoDelete<ept id="p2">](#cwinthread__m_bautodelete)</ept> or any members of your derived class, before the thread starts running.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Once your initialization is complete, use the <bpt id="p1">[</bpt>CWinThread::ResumeThread<ept id="p1">](#cwinthread__resumethread)</ept> to start the thread running.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The thread will not execute until <ph id="ph1">`CWinThread::ResumeThread`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>0<ept id="p1">**</ept> Start the thread immediately after creation.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Specifies the size in bytes of the stack for the new thread.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>0<ept id="p1">**</ept>, the stack size defaults to the same size as that of the process's primary thread.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>SECURITY_ATTRIBUTES<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa379560)</ept> structure that specifies the security attributes for the thread.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Nonzero if the thread is created successfully; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`AfxBeginThread`</ph> to create a thread object and execute it in one step.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`CreateThread`</ph> if you want to reuse the thread object between successive creation and termination of thread executions.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CWinThread::CWinThread</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CWinThread`</ph> object.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To begin the thread's execution, call the <bpt id="p1">[</bpt>CreateThread<ept id="p1">](#cwinthread__createthread)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You will usually create threads by calling <bpt id="p1">[</bpt>AfxBeginThread<ept id="p1">](http://msdn.microsoft.com/library/e9e8684d-24f7-4599-8fdf-1f4f560a753b)</ept>, which will call this constructor and <ph id="ph1">`CreateThread`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>CWinThread::ExitInstance</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Called by the framework from within a rarely overridden <bpt id="p1">[</bpt>Run<ept id="p1">](#cwinthread__run)</ept> member function to exit this instance of the thread, or if a call to <bpt id="p2">[</bpt>InitInstance<ept id="p2">](#cwinthread__initinstance)</ept> fails.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The thread's exit code; 0 indicates no errors, and values greater than 0 indicate an error.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This value can be retrieved by calling <bpt id="p1">[</bpt>GetExitCodeThread<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms683190)</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Do not call this member function from anywhere but within the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> member function.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This member function is used only in user-interface threads.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The default implementation of this function deletes the <ph id="ph1">`CWinThread`</ph> object if <bpt id="p1">[</bpt>m_bAutoDelete<ept id="p1">](#cwinthread__m_bautodelete)</ept> is <bpt id="p2">**</bpt>TRUE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Override this function if you wish to perform additional clean-up when your thread terminates.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Your implementation of <ph id="ph1">`ExitInstance`</ph> should call the base class's version after your code is executed.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>CWinThread::GetMainWnd</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>If your application is an OLE server, call this function to retrieve a pointer to the active main window of the application instead of directly referring to the <ph id="ph1">`m_pMainWnd`</ph> member of the application object.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This function returns a pointer to one of two types of windows.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If your thread is part of an OLE server and has an object that is in-place active inside an active container, this function returns the <bpt id="p1">[</bpt>CWinApp::m_pActiveWnd<ept id="p1">](../../mfc/reference/cwinapp-class.md#cwinapp__m_pactivewnd)</ept> data member of the <ph id="ph1">`CWinThread`</ph> object.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If there is no object that is in-place active within a container or your application is not an OLE server, this function returns the <bpt id="p1">[</bpt>m_pMainWnd<ept id="p1">](#cwinthread__m_pmainwnd)</ept> data member of your thread object.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For user-interface threads, this is equivalent to directly referring to the <ph id="ph1">`m_pActiveWnd`</ph> member of your application object.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If your application is not an OLE server, then calling this function is equivalent to directly referring to the <ph id="ph1">`m_pMainWnd`</ph> member of your application object.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Override this function to modify the default behavior.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CWinThread::GetThreadPriority</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Gets the current thread priority level of this thread.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The current thread priority level within its priority class.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The value returned will be one of the following, listed from highest priority to lowest:</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_TIME_CRITICAL</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_HIGHEST</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_ABOVE_NORMAL</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_NORMAL</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_BELOW_NORMAL</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_LOWEST</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_IDLE</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>For more information on these priorities, see <bpt id="p1">[</bpt>SetThreadPriority<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686277)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>CWinThread::InitInstance</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>must be overridden to initialize each new instance of a user-interface thread.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Nonzero if initialization is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Typically, you override <ph id="ph1">`InitInstance`</ph> to perform tasks that must be completed when a thread is first created.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This member function is used only in user-interface threads.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Perform initialization of worker threads in the controlling function passed to <bpt id="p1">[</bpt>AfxBeginThread<ept id="p1">](application-information-and-management.md#afxbeginthread)</ept>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>CWinThread::IsIdleMessage</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Override this function to keep <bpt id="p1">**</bpt>OnIdle<ept id="p1">**</ept> from being called after specific messages are generated.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Points to the current message being processed.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Nonzero if <ph id="ph1">`OnIdle`</ph> should be called after processing message; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The default implementation does not call <bpt id="p1">**</bpt>OnIdle<ept id="p1">**</ept> after redundant mouse messages and messages generated by blinking carets.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>If an application has created a short timer, <bpt id="p1">**</bpt>OnIdle<ept id="p1">**</ept> will be called frequently, causing performance problems.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>To improve such an application's performance, override <ph id="ph1">`IsIdleMessage`</ph> in the application's <ph id="ph2">`CWinApp`</ph>-derived class to check for <ph id="ph3">`WM_TIMER`</ph> messages as follows:</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#189</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Handling <ph id="ph1">`WM_TIMER`</ph> in this fashion will improve performance of applications that use short timers.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>CWinThread::m_bAutoDelete</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Specifies whether the <ph id="ph1">`CWinThread`</ph> object should be automatically deleted at thread termination.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_bAutoDelete`</ph> data member is a public variable of type <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`m_bAutoDelete`</ph> does not affect how the underlying thread handle is closed.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The thread handle is always closed when the <ph id="ph1">`CWinThread`</ph> object is destroyed.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>CWinThread::m_hThread</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Handle to the thread attached to this <ph id="ph1">`CWinThread`</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_hThread`</ph> data member is a public variable of type <ph id="ph2">`HANDLE`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>It is only valid if underlying thread currently exists.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>CWinThread::m_nThreadID</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>ID of the thread attached to this <ph id="ph1">`CWinThread`</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>m_nThreadID<ept id="p1">**</ept> data member is a public variable of type <ph id="ph1">`DWORD`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>It is only valid if underlying thread currently exists.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>AfxGetThread<ept id="p1">](application-information-and-management.md#afxgetthread)</ept>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>CWinThread::m_pActiveWnd</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Use this data member to store a pointer to your thread's active window object.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The Microsoft Foundation Class Library will automatically terminate your thread when the window referred to by <ph id="ph1">`m_pActiveWnd`</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>If this thread is the primary thread for an application, the application will also be terminated.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>If this data member is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the active window for the application's <ph id="ph1">`CWinApp`</ph> object will be inherited.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>is a public variable of type <bpt id="p1">**</bpt>CWnd<ph id="ph1">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Typically, you set this member variable when you override <ph id="ph1">`InitInstance`</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>In a worker thread, the value of this data member is inherited from its parent thread.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>CWinThread::m_pMainWnd</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Use this data member to store a pointer to your thread's main window object.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The Microsoft Foundation Class Library will automatically terminate your thread when the window referred to by <ph id="ph1">`m_pMainWnd`</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>If this thread is the primary thread for an application, the application will also be terminated.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>If this data member is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the main window for the application's <ph id="ph1">`CWinApp`</ph> object will be used to determine when to terminate the thread.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>is a public variable of type <bpt id="p1">**</bpt>CWnd<ph id="ph1">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Typically, you set this member variable when you override <ph id="ph1">`InitInstance`</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>In a worker thread, the value of this data member is inherited from its parent thread.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>CWinThread::OnIdle</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Override this member function to perform idle-time processing.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>A counter incremented each time <ph id="ph1">`OnIdle`</ph> is called when the thread's message queue is empty.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>This count is reset to 0 each time a new message is processed.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`lCount`</ph> parameter to determine the relative length of time the thread has been idle without processing a message.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Nonzero to receive more idle processing time; 0 if no more idle processing time is needed.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>is called in the default message loop when the thread's message queue is empty.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Use your override to call your own background idle-handler tasks.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>should return 0 to indicate that no additional idle processing time is required.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lCount`</ph> parameter is incremented each time <ph id="ph2">`OnIdle`</ph> is called when the message queue is empty and is reset to 0 each time a new message is processed.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>You can call your different idle routines based on this count.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The default implementation of this member function frees temporary objects and unused dynamic link libraries from memory.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>This member function is used only in user-interface threads.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Because the application cannot process messages until <ph id="ph1">`OnIdle`</ph> returns, do not perform lengthy tasks in this function.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>CWinThread::operator HANDLE</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Retrieves the handle of the <ph id="ph1">`CWinThread`</ph> object.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If successful, the handle of the thread object; otherwise, <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Use the handle to directly call Windows APIs.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>CWinThread::PostThreadMessage</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Called to post a user-defined message to another <ph id="ph1">`CWinThread`</ph> object.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>ID of the user-defined message.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>First message parameter.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Second message parameter.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The posted message is mapped to the proper message handler by the message map macro <ph id="ph1">`ON_THREAD_MESSAGE`</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>When calling the Windows <bpt id="p1">[</bpt>PostThreadMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644946)</ept> function within an MFC application, the MFC message handlers are not called.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>For more information, see the Knowledge Base article, "PRB: MFC Message Handler Not Called with PostThreadMessage()" (Q142415).</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>CWinThread::PreTranslateMessage</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Override this function to filter window messages before they are dispatched to the Windows functions <bpt id="p1">[</bpt>TranslateMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> and <bpt id="p2">[</bpt>DispatchMessage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>MSG structure<ept id="p1">](../../mfc/reference/msg-structure1.md)</ept> containing the message to process.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Nonzero if the message was fully processed in <ph id="ph1">`PreTranslateMessage`</ph> and should not be processed further.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Zero if the message should be processed in the normal way.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>This member function is used only in user-interface threads.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>CWinThread::ProcessMessageFilter</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The framework's hook function calls this member function to filter and respond to certain Windows messages.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Specifies a hook code.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>This member function uses the code to determine how to process</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>A pointer to a Windows <bpt id="p1">[</bpt>MSG structure<ept id="p1">](../../mfc/reference/msg-structure1.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Nonzero if the message is processed; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>A hook function processes events before they are sent to the application's normal message processing.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>If you override this advanced feature, be sure to call the base-class version to maintain the framework's hook processing.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>CWinThread::ProcessWndProcException</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The framework calls this member function whenever the handler does not catch an exception thrown in one of your thread's message or command handlers.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>e</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Points to an unhandled exception.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>MSG structure<ept id="p1">](../../mfc/reference/msg-structure1.md)</ept> containing information about the windows message that caused the framework to throw an exception.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>–1 if a <ph id="ph1">`WM_CREATE`</ph> exception is generated; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Do not call this member function directly.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The default implementation of this member function handles only exceptions generated from the following messages:</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Command</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Action</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Fail.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Validate the affected window, thus preventing another <ph id="ph1">`WM_PAINT`</ph> message from being generated.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Override this member function to provide global handling of your exceptions.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Call the base functionality only if you wish to display the default behavior.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>This member function is used only in threads that have a message pump.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>CWinThread::PumpMessage</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Contains the thread's message loop.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>contains the thread's message loop.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PumpMessage<ept id="p1">**</ept> is called by <ph id="ph1">`CWinThread`</ph> to pump the thread's messages.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">`PumpMessage`</ph> directly to force messages to be processed, or you can override <ph id="ph2">`PumpMessage`</ph> to change its default behavior.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`PumpMessage`</ph> directly and overriding its default behavior is recommended for advanced users only.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>CWinThread::ResumeThread</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Called to resume execution of a thread that was suspended by the <bpt id="p1">[</bpt>SuspendThread<ept id="p1">](#cwinthread__suspendthread)</ept> member function, or a thread created with the <bpt id="p2">**</bpt>CREATE_SUSPENDED<ept id="p2">**</ept> flag.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The thread's previous suspend count if successful; <ph id="ph1">`0xFFFFFFFF`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>If the return value is zero, the current thread was not suspended.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>If the return value is one, the thread was suspended, but is now restarted.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Any return value greater than one means the thread remains suspended.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The suspend count of the current thread is reduced by one.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>If the suspend count is reduced to zero, the thread resumes execution; otherwise the thread remains suspended.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>CWinThread::Run</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Provides a default message loop for user-interface threads.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`int`</ph> value that is returned by the thread.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>This value can be retrieved by calling <bpt id="p1">[</bpt>GetExitCodeThread<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms683190)</ept>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Run<ept id="p1">**</ept> acquires and dispatches Windows messages until the application receives a <bpt id="p2">[</bpt>WM_QUIT<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms632641)</ept> message.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>If the thread's message queue currently contains no messages, <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> calls <ph id="ph1">`OnIdle`</ph> to perform idle-time processing.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Incoming messages go to the <bpt id="p1">[</bpt>PreTranslateMessage<ept id="p1">](#cwinthread__pretranslatemessage)</ept> member function for special processing and then to the Windows function <bpt id="p2">[</bpt>TranslateMessage<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644955)</ept> for standard keyboard translation.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Finally, the <bpt id="p1">[</bpt>DispatchMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644934)</ept> Windows function is called.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Run<ept id="p1">**</ept> is rarely overridden, but you can override it to implement special behavior.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>This member function is used only in user-interface threads.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>CWinThread::SetThreadPriority</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>This function sets the priority level of the current thread within its priority class.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Specifies the new thread priority level within its priority class.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>This parameter must be one of the following values, listed from highest priority to lowest:</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_TIME_CRITICAL</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_HIGHEST</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_ABOVE_NORMAL</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_NORMAL</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_BELOW_NORMAL</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_LOWEST</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>THREAD_PRIORITY_IDLE</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>For more information on these priorities, see <bpt id="p1">[</bpt>SetThreadPriority<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686277)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Nonzero if function was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>It can only be called after <bpt id="p1">[</bpt>CreateThread<ept id="p1">](#cwinthread__createthread)</ept> successfully returns.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>CWinThread::SuspendThread</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Increments the current thread's suspend count.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The thread's previous suspend count if successful; <ph id="ph1">`0xFFFFFFFF`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>If any thread has a suspend count above zero, that thread does not execute.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The thread can be resumed by calling the <bpt id="p1">[</bpt>ResumeThread<ept id="p1">](#cwinthread__resumethread)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>CCmdTarget Class</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>CWinApp Class</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>CCmdTarget Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>