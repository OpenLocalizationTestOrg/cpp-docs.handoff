{"nodes":[{"pos":[12,40],"content":"less Struct | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"less Struct | Microsoft Docs","pos":[0,28]}]},{"content":"less Struct","pos":[691,702]},{"pos":[703,792],"content":"A binary predicate that performs the less-than operation ( <ph id=\"ph1\">`operator&lt;`</ph>) on its arguments.","source":"A binary predicate that performs the less-than operation ( `operator<`) on its arguments."},{"content":"Syntax","pos":[801,807]},{"content":"Parameters","pos":[1216,1226]},{"content":", <ph id=\"ph1\">`T`</ph>,","pos":[1236,1242],"source":", `T`, "},{"content":"Any type that supports an <ph id=\"ph1\">`operator&lt;`</ph> that takes operands of the specified or inferred types.","pos":[1250,1343],"source":" Any type that supports an `operator<` that takes operands of the specified or inferred types."},{"content":"The left operand of the less-than operation.","pos":[1360,1404]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1405,1482],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`T`</ph>.","pos":[1483,1594],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`."},{"content":"The right operand of the less-than operation.","pos":[1612,1657]},{"content":"The unspecialized template takes an lvalue reference argument of type <ph id=\"ph1\">`Type`</ph>.","pos":[1658,1735],"source":" The unspecialized template takes an lvalue reference argument of type `Type`."},{"content":"The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type <ph id=\"ph1\">`U`</ph>.","pos":[1736,1847],"source":" The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`."},{"content":"Return Value","pos":[1856,1868]},{"content":"The result of <ph id=\"ph1\">`Left``&lt;``Right`</ph>.","pos":[1872,1903],"source":"The result of `Left``<``Right`."},{"content":"The specialized template does perfect forwarding of the result, which has the type that's returned by <ph id=\"ph1\">`operator&lt;`</ph>.","pos":[1904,2018],"source":" The specialized template does perfect forwarding of the result, which has the type that's returned by `operator<`."},{"content":"Remarks","pos":[2027,2034]},{"content":"The binary predicate <ph id=\"ph1\">`less`&lt; `Type`</ph>&gt; provides a strict weak ordering of a set of element values of type <ph id=\"ph2\">`Type`</ph> into equivalence classes, if and only if this type satisfies the standard mathematical requirements for being so ordered.","pos":[2038,2270],"source":"The binary predicate `less`< `Type`> provides a strict weak ordering of a set of element values of type `Type` into equivalence classes, if and only if this type satisfies the standard mathematical requirements for being so ordered."},{"content":"The specializations for any pointer type yield a total ordering of elements, in that all elements of distinct values are ordered with respect to each other.","pos":[2271,2427]},{"content":"Example","pos":[2436,2443]},{"content":"Output","pos":[3456,3462]},{"content":"Requirements","pos":[3604,3616]},{"pos":[3620,3645],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\&lt;</ph>functional&gt;","source":"**Header:** \\<functional>"},{"pos":[3652,3670],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> std","source":"**Namespace:** std"},{"content":"See Also","pos":[3679,3687]},{"content":"C++ Standard Library Reference","pos":[3692,3722]}],"content":"---\ntitle: \"less Struct | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"std::less\"\n  - \"std.less\"\n  - \"less\"\n  - \"xfunctional/std::less\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"less struct\"\n  - \"less function\"\nms.assetid: 39349da3-11cd-4774-b2cc-b46af5aae5d7\ncaps.latest.revision: 24\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# less Struct\nA binary predicate that performs the less-than operation ( `operator<`) on its arguments.  \n  \n## Syntax  \n  \n```\ntemplate <class Type = void>\nstruct less : public binary_function <Type, Type, bool>  \n{\n    bool operator()(const Type& Left, const Type& Right) const;\n };\n\n// specialized transparent functor for operator<\ntemplate <>\nstruct less<void>  \n{\n  template <class T, class U>\n  auto operator()(T&& Left, U&& Right) const`\n    -> decltype(std::forward<T>(Left) <std::forward<U>(Right));\n };\n```  \n  \n#### Parameters  \n `Type`, `T`, `U`  \n Any type that supports an `operator<` that takes operands of the specified or inferred types.  \n  \n `Left`  \n The left operand of the less-than operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `T`.  \n  \n `Right`  \n The right operand of the less-than operation. The unspecialized template takes an lvalue reference argument of type `Type`. The specialized template does perfect forwarding of lvalue and rvalue reference arguments of inferred type `U`.  \n  \n## Return Value  \n The result of `Left``<``Right`. The specialized template does perfect forwarding of the result, which has the type that's returned by `operator<`.  \n  \n## Remarks  \n The binary predicate `less`< `Type`> provides a strict weak ordering of a set of element values of type `Type` into equivalence classes, if and only if this type satisfies the standard mathematical requirements for being so ordered. The specializations for any pointer type yield a total ordering of elements, in that all elements of distinct values are ordered with respect to each other.  \n  \n## Example  \n  \n```cpp  \n// functional_less.cpp  \n// compile with: /EHsc  \n#include <vector>  \n#include <algorithm>  \n#include <functional>  \n#include <iostream>  \n  \nstruct MyStruct {  \n   MyStruct(int i) : m_i(i){}  \n  \n   bool operator < (const MyStruct & rhs) const {  \n      return m_i < rhs.m_i;  \n   }     \n  \n   int m_i;  \n};  \n  \nint main() {  \n   using namespace std;  \n   vector <MyStruct> v1;  \n   vector <MyStruct>::iterator Iter1;  \n   vector <MyStruct>::reverse_iterator rIter1;  \n  \n   int i;  \n   for ( i = 0 ; i < 7 ; i++ )       \n       v1.push_back( MyStruct(rand()));  \n  \n   cout << \"Original vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin() ; Iter1 != v1.end() ; Iter1++ )   \ncout << Iter1->m_i << \" \";  \n   cout << \")\" << endl;  \n  \n   // To sort in ascending order,  \n   sort( v1.begin( ), v1.end( ), less<MyStruct>());  \n  \n   cout << \"Sorted vector v1 = ( \" ;  \n   for ( Iter1 = v1.begin() ; Iter1 != v1.end() ; Iter1++ )   \ncout << Iter1->m_i << \" \";  \n   cout << \")\" << endl;  \n }  \n```  \n  \n## Output  \n  \n```\nOriginal vector v1 = (41 18467 6334 26500 19169 15724 11478)\nSorted vector v1 = (41 6334 11478 15724 18467 19169 26500)\n```  \n  \n## Requirements  \n **Header:** \\<functional>  \n  \n **Namespace:** std  \n  \n## See Also  \n [C++ Standard Library Reference](../standard-library/cpp-standard-library-reference.md)\n\n\n\n"}