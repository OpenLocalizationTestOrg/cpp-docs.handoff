{"nodes":[{"pos":[12,43],"content":"CStringT Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CStringT Class | Microsoft Docs","pos":[0,31]}]},{"pos":[710,724],"content":"CStringT Class","linkify":"CStringT Class","nodes":[{"content":"CStringT Class","pos":[0,14]}]},{"pos":[725,767],"content":"This class represents a <ph id=\"ph1\">`CStringT`</ph> object.","source":"This class represents a `CStringT` object."},{"pos":[776,782],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1011,1021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The character type of the string class.","pos":[1039,1078]},{"content":"Can be one of the following:","pos":[1079,1107]},{"pos":[1115,1151],"content":"<ph id=\"ph1\">`char`</ph> (for ANSI character strings).","source":"`char` (for ANSI character strings)."},{"pos":[1159,1201],"content":"<ph id=\"ph1\">`wchar_t`</ph> (for Unicode character strings).","source":"`wchar_t` (for Unicode character strings)."},{"pos":[1209,1265],"content":"<bpt id=\"p1\">**</bpt>TCHAR<ept id=\"p1\">**</ept> (for both ANSI and Unicode character strings).","source":"**TCHAR** (for both ANSI and Unicode character strings)."},{"pos":[1272,1428],"content":"`StringTraits`  \nDetermines if the string class needs C Run-Time (CRT) Library support and where string resources are located. Can be one of the following:","leadings":[""," "],"nodes":[{"content":"Determines if the string class needs C Run-Time (CRT) Library support and where string resources are located. Can be one of the following:","pos":[17,155],"nodes":[{"content":"Determines if the string class needs C Run-Time (CRT) Library support and where string resources are located.","pos":[0,109]},{"content":"Can be one of the following:","pos":[110,138]}]}]},{"pos":[1436,1548],"content":"<bpt id=\"p1\">**</bpt>StrTraitATL&lt; wchar_t<ept id=\"p1\">**</ept> &amp;#124; <ph id=\"ph1\">`char`</ph> &amp;#124; <bpt id=\"p2\">**</bpt>TCHAR, ChTraitsCRT&lt; wchar_t<ept id=\"p2\">**</ept> &amp;#124; <ph id=\"ph2\">`char`</ph> &amp;#124; <bpt id=\"p3\">**</bpt>TCHAR &gt; &gt;<ept id=\"p3\">**</ept>","source":"**StrTraitATL< wchar_t** &#124; `char` &#124; **TCHAR, ChTraitsCRT< wchar_t** &#124; `char` &#124; **TCHAR > >**"},{"pos":[1559,1714],"content":"The class requires CRT support and searches for resource strings in the module specified by <ph id=\"ph1\">`m_hInstResource`</ph> (a member of the application's module class).","source":"The class requires CRT support and searches for resource strings in the module specified by `m_hInstResource` (a member of the application's module class)."},{"pos":[1722,1833],"content":"<bpt id=\"p1\">**</bpt>StrTraitATL&lt; wchar_t<ept id=\"p1\">**</ept> &amp;#124; <ph id=\"ph1\">`char`</ph> &amp;#124; <bpt id=\"p2\">**</bpt>TCHAR, ChTraitsOS&lt; wchar_t<ept id=\"p2\">**</ept> &amp;#124; <ph id=\"ph2\">`char`</ph> &amp;#124; <bpt id=\"p3\">**</bpt>TCHAR &gt; &gt;<ept id=\"p3\">**</ept>","source":"**StrTraitATL< wchar_t** &#124; `char` &#124; **TCHAR, ChTraitsOS< wchar_t** &#124; `char` &#124; **TCHAR > >**"},{"pos":[1844,2007],"content":"The class does not require CRT support and searches for resource strings in the module specified by <ph id=\"ph1\">`m_hInstResource`</ph> (a member of the application's module class).","source":"The class does not require CRT support and searches for resource strings in the module specified by `m_hInstResource` (a member of the application's module class)."},{"pos":[2015,2127],"content":"<bpt id=\"p1\">**</bpt>StrTraitMFC&lt; wchar_t<ept id=\"p1\">**</ept> &amp;#124; <ph id=\"ph1\">`char`</ph> &amp;#124; <bpt id=\"p2\">**</bpt>TCHAR, ChTraitsCRT&lt; wchar_t<ept id=\"p2\">**</ept> &amp;#124; <ph id=\"ph2\">`char`</ph> &amp;#124; <bpt id=\"p3\">**</bpt>TCHAR &gt; &gt;<ept id=\"p3\">**</ept>","source":"**StrTraitMFC< wchar_t** &#124; `char` &#124; **TCHAR, ChTraitsCRT< wchar_t** &#124; `char` &#124; **TCHAR > >**"},{"content":"The class requires CRT support and searches for resource strings using the standard MFC search algorithm.","pos":[2138,2243]},{"pos":[2251,2362],"content":"<bpt id=\"p1\">**</bpt>StrTraitMFC&lt; wchar_t<ept id=\"p1\">**</ept> &amp;#124; <ph id=\"ph1\">`char`</ph> &amp;#124; <bpt id=\"p2\">**</bpt>TCHAR, ChTraitsOS&lt; wchar_t<ept id=\"p2\">**</ept> &amp;#124; <ph id=\"ph2\">`char`</ph> &amp;#124; <bpt id=\"p3\">**</bpt>TCHAR &gt; &gt;<ept id=\"p3\">**</ept>","source":"**StrTraitMFC< wchar_t** &#124; `char` &#124; **TCHAR, ChTraitsOS< wchar_t** &#124; `char` &#124; **TCHAR > >**"},{"content":"The class does not require CRT support and searches for resource strings using the standard MFC search algorithm.","pos":[2373,2486]},{"pos":[2495,2502],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"pos":[2512,2531],"content":"Public Constructors","linkify":"Public Constructors","nodes":[{"content":"Public Constructors","pos":[0,19]}]},{"content":"Name","pos":[2538,2542]},{"content":"Description","pos":[2543,2554]},{"pos":[2592,2633],"content":"<bpt id=\"p1\">[</bpt>CStringT::CStringT<ept id=\"p1\">](#cstringt__cstringt)</ept>","source":"[CStringT::CStringT](#cstringt__cstringt)"},{"pos":[2634,2681],"content":"Constructs a <ph id=\"ph1\">`CStringT`</ph> object in various ways.","source":"Constructs a `CStringT` object in various ways."},{"pos":[2686,2733],"content":"<bpt id=\"p1\">[</bpt>CStringT::~CStringT<ept id=\"p1\">](#cstringt___dtorcstringt)</ept>","source":"[CStringT::~CStringT](#cstringt___dtorcstringt)"},{"pos":[2734,2763],"content":"Destroys a <ph id=\"ph1\">`CStringT`</ph> object.","source":"Destroys a `CStringT` object."},{"pos":[2774,2788],"content":"Public Methods","linkify":"Public Methods","nodes":[{"content":"Public Methods","pos":[0,14]}]},{"content":"Name","pos":[2795,2799]},{"content":"Description","pos":[2800,2811]},{"pos":[2849,2902],"content":"<bpt id=\"p1\">[</bpt>CStringT::AllocSysString<ept id=\"p1\">](#cstringt__allocsysstring)</ept>","source":"[CStringT::AllocSysString](#cstringt__allocsysstring)"},{"pos":[2903,2943],"content":"Allocates a <ph id=\"ph1\">`BSTR`</ph> from <ph id=\"ph2\">`CStringT`</ph> data.","source":"Allocates a `BSTR` from `CStringT` data."},{"pos":[2948,2991],"content":"<bpt id=\"p1\">[</bpt>CStringT::AnsiToOem<ept id=\"p1\">](#cstringt__ansitooem)</ept>","source":"[CStringT::AnsiToOem](#cstringt__ansitooem)"},{"content":"Makes an in-place conversion from the ANSI character set to the OEM character set.","pos":[2992,3074]},{"pos":[3079,3128],"content":"<bpt id=\"p1\">[</bpt>CStringT::AppendFormat<ept id=\"p1\">](#cstringt__appendformat)</ept>","source":"[CStringT::AppendFormat](#cstringt__appendformat)"},{"pos":[3129,3185],"content":"Appends formatted data to an existing <ph id=\"ph1\">`CStringT`</ph> object.","source":"Appends formatted data to an existing `CStringT` object."},{"pos":[3190,3229],"content":"<bpt id=\"p1\">[</bpt>CStringT::Collate<ept id=\"p1\">](#cstringt__collate)</ept>","source":"[CStringT::Collate](#cstringt__collate)"},{"content":"Compares two strings (case sensitive, uses locale-specific information).","pos":[3230,3302]},{"pos":[3307,3358],"content":"<bpt id=\"p1\">[</bpt>CStringT::CollateNoCase<ept id=\"p1\">](#cstringt__collatenocase)</ept>","source":"[CStringT::CollateNoCase](#cstringt__collatenocase)"},{"content":"Compares two strings (case insensitive, uses locale-specific information).","pos":[3359,3433]},{"pos":[3438,3477],"content":"<bpt id=\"p1\">[</bpt>CStringT::Compare<ept id=\"p1\">](#cstringt__compare)</ept>","source":"[CStringT::Compare](#cstringt__compare)"},{"content":"Compares two strings (case sensitive).","pos":[3478,3516]},{"pos":[3521,3572],"content":"<bpt id=\"p1\">[</bpt>CStringT::CompareNoCase<ept id=\"p1\">](#cstringt__comparenocase)</ept>","source":"[CStringT::CompareNoCase](#cstringt__comparenocase)"},{"content":"Compares two strings (case insensitive).","pos":[3573,3613]},{"pos":[3618,3655],"content":"<bpt id=\"p1\">[</bpt>CStringT::Delete<ept id=\"p1\">](#cstringt__delete)</ept>","source":"[CStringT::Delete](#cstringt__delete)"},{"content":"Deletes a character or characters from a string.","pos":[3656,3704]},{"pos":[3709,3742],"content":"<bpt id=\"p1\">[</bpt>CStringT::Find<ept id=\"p1\">](#cstringt__find)</ept>","source":"[CStringT::Find](#cstringt__find)"},{"content":"Finds a character or substring inside a larger string.","pos":[3743,3797]},{"pos":[3802,3845],"content":"<bpt id=\"p1\">[</bpt>CStringT::FindOneOf<ept id=\"p1\">](#cstringt__findoneof)</ept>","source":"[CStringT::FindOneOf](#cstringt__findoneof)"},{"content":"Finds the first matching character from a set.","pos":[3846,3892]},{"pos":[3897,3934],"content":"<bpt id=\"p1\">[</bpt>CStringT::Format<ept id=\"p1\">](#cstringt__format)</ept>","source":"[CStringT::Format](#cstringt__format)"},{"pos":[3935,3972],"content":"Formats the string as <ph id=\"ph1\">`sprintf`</ph> does.","source":"Formats the string as `sprintf` does."},{"pos":[3977,4028],"content":"<bpt id=\"p1\">[</bpt>CStringT::FormatMessage<ept id=\"p1\">](#cstringt__formatmessage)</ept>","source":"[CStringT::FormatMessage](#cstringt__formatmessage)"},{"content":"Formats a message string.","pos":[4029,4054]},{"pos":[4059,4112],"content":"<bpt id=\"p1\">[</bpt>CStringT::FormatMessageV<ept id=\"p1\">](#cstringt__formatmessagev)</ept>","source":"[CStringT::FormatMessageV](#cstringt__formatmessagev)"},{"content":"Formats a message string using a variable argument list.","pos":[4113,4169]},{"pos":[4174,4213],"content":"<bpt id=\"p1\">[</bpt>CStringT::FormatV<ept id=\"p1\">](#cstringt__formatv)</ept>","source":"[CStringT::FormatV](#cstringt__formatv)"},{"content":"Formats the string using a variable list of arguments.","pos":[4214,4268]},{"pos":[4273,4342],"content":"<bpt id=\"p1\">[</bpt>CStringT::GetEnvironmentVariable<ept id=\"p1\">](#cstringt__getenvironmentvariable)</ept>","source":"[CStringT::GetEnvironmentVariable](#cstringt__getenvironmentvariable)"},{"content":"Sets the string to the value of the specified environment variable.","pos":[4343,4410]},{"pos":[4415,4452],"content":"<bpt id=\"p1\">[</bpt>CStringT::Insert<ept id=\"p1\">](#cstringt__insert)</ept>","source":"[CStringT::Insert](#cstringt__insert)"},{"content":"Inserts a single character or a substring at the given index within the string.","pos":[4453,4532]},{"pos":[4537,4570],"content":"<bpt id=\"p1\">[</bpt>CStringT::Left<ept id=\"p1\">](#cstringt__left)</ept>","source":"[CStringT::Left](#cstringt__left)"},{"content":"Extracts the left part of a string.","pos":[4571,4606]},{"pos":[4611,4656],"content":"<bpt id=\"p1\">[</bpt>CStringT::LoadString<ept id=\"p1\">](#cstringt__loadstring)</ept>","source":"[CStringT::LoadString](#cstringt__loadstring)"},{"pos":[4657,4717],"content":"Loads an existing <ph id=\"ph1\">`CStringT`</ph> object from a Windows resource.","source":"Loads an existing `CStringT` object from a Windows resource."},{"pos":[4722,4765],"content":"<bpt id=\"p1\">[</bpt>CStringT::MakeLower<ept id=\"p1\">](#cstringt__makelower)</ept>","source":"[CStringT::MakeLower](#cstringt__makelower)"},{"content":"Converts all the characters in this string to lowercase characters.","pos":[4766,4833]},{"pos":[4838,4885],"content":"<bpt id=\"p1\">[</bpt>CStringT::MakeReverse<ept id=\"p1\">](#cstringt__makereverse)</ept>","source":"[CStringT::MakeReverse](#cstringt__makereverse)"},{"content":"Reverses the string.","pos":[4886,4906]},{"pos":[4911,4954],"content":"<bpt id=\"p1\">[</bpt>CStringT::MakeUpper<ept id=\"p1\">](#cstringt__makeupper)</ept>","source":"[CStringT::MakeUpper](#cstringt__makeupper)"},{"content":"Converts all the characters in this string to uppercase characters.","pos":[4955,5022]},{"pos":[5027,5058],"content":"<bpt id=\"p1\">[</bpt>CStringT::Mid<ept id=\"p1\">](#cstringt__mid)</ept>","source":"[CStringT::Mid](#cstringt__mid)"},{"content":"Extracts the middle part of a string.","pos":[5059,5096]},{"pos":[5101,5144],"content":"<bpt id=\"p1\">[</bpt>CStringT::OemToAnsi<ept id=\"p1\">](#cstringt__oemtoansi)</ept>","source":"[CStringT::OemToAnsi](#cstringt__oemtoansi)"},{"content":"Makes an in-place conversion from the OEM character set to the ANSI character set.","pos":[5145,5227]},{"pos":[5232,5269],"content":"<bpt id=\"p1\">[</bpt>CStringT::Remove<ept id=\"p1\">](#cstringt__remove)</ept>","source":"[CStringT::Remove](#cstringt__remove)"},{"content":"Removes indicated characters from a string.","pos":[5270,5313]},{"pos":[5318,5357],"content":"<bpt id=\"p1\">[</bpt>CStringT::Replace<ept id=\"p1\">](#cstringt__replace)</ept>","source":"[CStringT::Replace](#cstringt__replace)"},{"content":"Replaces indicated characters with other characters.","pos":[5358,5410]},{"pos":[5415,5462],"content":"<bpt id=\"p1\">[</bpt>CStringT::ReverseFind<ept id=\"p1\">](#cstringt__reversefind)</ept>","source":"[CStringT::ReverseFind](#cstringt__reversefind)"},{"content":"Finds a character inside a larger string; starts from the end.","pos":[5463,5525]},{"pos":[5530,5565],"content":"<bpt id=\"p1\">[</bpt>CStringT::Right<ept id=\"p1\">](#cstringt__right)</ept>","source":"[CStringT::Right](#cstringt__right)"},{"content":"Extracts the right part of a string.","pos":[5566,5602]},{"pos":[5607,5656],"content":"<bpt id=\"p1\">[</bpt>CStringT::SetSysString<ept id=\"p1\">](#cstringt__setsysstring)</ept>","source":"[CStringT::SetSysString](#cstringt__setsysstring)"},{"pos":[5657,5723],"content":"Sets an existing <ph id=\"ph1\">`BSTR`</ph> object with data from a <ph id=\"ph2\">`CStringT`</ph> object.","source":"Sets an existing `BSTR` object with data from a `CStringT` object."},{"pos":[5728,5779],"content":"<bpt id=\"p1\">[</bpt>CStringT::SpanExcluding<ept id=\"p1\">](#cstringt__spanexcluding)</ept>","source":"[CStringT::SpanExcluding](#cstringt__spanexcluding)"},{"pos":[5780,5917],"content":"Extracts characters from the string, starting with the first character, that are not in the set of characters identified by <ph id=\"ph1\">`pszCharSet`</ph>.","source":"Extracts characters from the string, starting with the first character, that are not in the set of characters identified by `pszCharSet`."},{"pos":[5922,5973],"content":"<bpt id=\"p1\">[</bpt>CStringT::SpanIncluding<ept id=\"p1\">](#cstringt__spanincluding)</ept>","source":"[CStringT::SpanIncluding](#cstringt__spanincluding)"},{"content":"Extracts a substring that contains only the characters in a set.","pos":[5974,6038]},{"pos":[6043,6084],"content":"<bpt id=\"p1\">[</bpt>CStringT::Tokenize<ept id=\"p1\">](#cstringt__tokenize)</ept>","source":"[CStringT::Tokenize](#cstringt__tokenize)"},{"content":"Extracts specified tokens in a target string.","pos":[6085,6130]},{"pos":[6135,6168],"content":"<bpt id=\"p1\">[</bpt>CStringT::Trim<ept id=\"p1\">](#cstringt__trim)</ept>","source":"[CStringT::Trim](#cstringt__trim)"},{"content":"Trims all leading and trailing whitespace characters from the string.","pos":[6169,6238]},{"pos":[6243,6284],"content":"<bpt id=\"p1\">[</bpt>CStringT::TrimLeft<ept id=\"p1\">](#cstringt__trimleft)</ept>","source":"[CStringT::TrimLeft](#cstringt__trimleft)"},{"content":"Trims leading whitespace characters from the string.","pos":[6285,6337]},{"pos":[6342,6385],"content":"<bpt id=\"p1\">[</bpt>CStringT::TrimRight<ept id=\"p1\">](#cstringt__trimright)</ept>","source":"[CStringT::TrimRight](#cstringt__trimright)"},{"content":"Trims trailing whitespace characters from the string.","pos":[6386,6439]},{"pos":[6450,6459],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"pos":[6480,6517],"content":"<bpt id=\"p1\">[</bpt>operator =<ept id=\"p1\">](#cstringt__operator__eq)</ept>","source":"[operator =](#cstringt__operator__eq)"},{"pos":[6518,6561],"content":"Assigns a new value to a <ph id=\"ph1\">`CStringT`</ph> object.","source":"Assigns a new value to a `CStringT` object."},{"pos":[6566,6614],"content":"<bpt id=\"p1\">[</bpt>CStringT::operator +<ept id=\"p1\">](#cstringt__operator__add)</ept>","source":"[CStringT::operator +](#cstringt__operator__add)"},{"content":"Concatenates two strings or a character and a string.","pos":[6615,6668]},{"pos":[6673,6725],"content":"<bpt id=\"p1\">[</bpt>CStringT::operator +=<ept id=\"p1\">](#cstringt__operator__add_eq)</ept>","source":"[CStringT::operator +=](#cstringt__operator__add_eq)"},{"content":"Concatenates a new string to the end of an existing string.","pos":[6726,6785]},{"pos":[6790,6841],"content":"<bpt id=\"p1\">[</bpt>CStringT::operator ==<ept id=\"p1\">](#cstringt__operator__eq_eq)</ept>","source":"[CStringT::operator ==](#cstringt__operator__eq_eq)"},{"content":"Determines if two strings are logically equal.","pos":[6842,6888]},{"pos":[6893,6942],"content":"<bpt id=\"p1\">[</bpt>CStringT::operator !=<ept id=\"p1\">](#cstringt__operator__neq)</ept>","source":"[CStringT::operator !=](#cstringt__operator__neq)"},{"content":"Determines if two strings are logically not equal.","pos":[6943,6993]},{"pos":[6998,7049],"content":"<bpt id=\"p1\">[</bpt>CStringT::operator <ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">](#cstringt__operator__lt_)</ept>","source":"[CStringT::operator &lt;](#cstringt__operator__lt_)"},{"content":"Determines if the string on the left side of the operator is less than to the string on the right side.","pos":[7050,7153]},{"pos":[7158,7209],"content":"<bpt id=\"p1\">[</bpt>CStringT::operator <ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">](#cstringt__operator__gt_)</ept>","source":"[CStringT::operator &gt;](#cstringt__operator__gt_)"},{"content":"Determines if the string on the left side of the operator is greater than to the string on the right side.","pos":[7210,7316]},{"pos":[7321,7376],"content":"<bpt id=\"p1\">[</bpt>CStringT::operator <ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#cstringt__operator__lt__eq)</ept>","source":"[CStringT::operator &lt;=](#cstringt__operator__lt__eq)"},{"content":"Determines if the string on the left side of the operator is less than or equal to the string on the right side.","pos":[7377,7489]},{"pos":[7494,7549],"content":"<bpt id=\"p1\">[</bpt>CStringT::operator <ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph><ept id=\"p1\">](#cstringt__operator__gt__eq)</ept>","source":"[CStringT::operator &gt;=](#cstringt__operator__gt__eq)"},{"content":"Determines if the string on the left side of the operator is greater than or equal to the string on the right side.","pos":[7550,7665]},{"pos":[7675,7682],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`CStringT`</ph> inherits from <bpt id=\"p1\">[</bpt>CSimpleStringT Class<ept id=\"p1\">](../../atl-mfc-shared/reference/csimplestringt-class.md)</ept>.","pos":[7686,7790],"source":"`CStringT` inherits from [CSimpleStringT Class](../../atl-mfc-shared/reference/csimplestringt-class.md)."},{"content":"Advanced features, such as character manipulation, ordering, and searching, are implemented by <ph id=\"ph1\">`CStringT`</ph>.","pos":[7791,7897],"source":" Advanced features, such as character manipulation, ordering, and searching, are implemented by `CStringT`."},{"pos":[7905,8041],"content":"[!NOTE]\n`CStringT` objects are capable of throwing exceptions. This occurs when a `CStringT` object runs out of memory for any reason.","leadings":["","> "],"nodes":[{"content":"`CStringT` objects are capable of throwing exceptions. This occurs when a `CStringT` object runs out of memory for any reason.","pos":[8,134],"nodes":[{"content":"<ph id=\"ph1\">`CStringT`</ph> objects are capable of throwing exceptions.","pos":[0,54],"source":"`CStringT` objects are capable of throwing exceptions."},{"content":"This occurs when a <ph id=\"ph1\">`CStringT`</ph> object runs out of memory for any reason.","pos":[55,126],"source":" This occurs when a `CStringT` object runs out of memory for any reason."}]}]},{"content":"A <ph id=\"ph1\">`CStringT`</ph> object consists of a variable-length sequence of characters.","pos":[8048,8121],"source":"A `CStringT` object consists of a variable-length sequence of characters."},{"content":"<ph id=\"ph1\">`CStringT`</ph> provides functions and operators using syntax similar to that of Basic.","pos":[8122,8204],"source":"`CStringT` provides functions and operators using syntax similar to that of Basic."},{"content":"Concatenation and comparison operators, together with simplified memory management, make <ph id=\"ph1\">`CStringT`</ph> objects easier to use than ordinary character arrays.","pos":[8205,8358],"source":" Concatenation and comparison operators, together with simplified memory management, make `CStringT` objects easier to use than ordinary character arrays."},{"pos":[8366,8617],"content":"[!NOTE]\n Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it. Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results.","leadings":["","> "],"nodes":[{"content":" Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it. Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results.","pos":[8,249],"nodes":[{"content":"Although it is possible to create <ph id=\"ph1\">`CStringT`</ph> instances that contain embedded null characters, we recommend against it.","pos":[1,119],"source":" Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it."},{"content":"Calling methods and operators on <ph id=\"ph1\">`CStringT`</ph> objects that contain embedded null characters can produce unintended results.","pos":[120,241],"source":" Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results."}]}]},{"pos":[8624,8809],"content":"By using different combinations of the <ph id=\"ph1\">`BaseType`</ph> and <ph id=\"ph2\">`StringTraits`</ph> parameters, <ph id=\"ph3\">`CStringT`</ph> objects can come in the following types, which are have been predefined by the ATL libraries.","source":"By using different combinations of the `BaseType` and `StringTraits` parameters, `CStringT` objects can come in the following types, which are have been predefined by the ATL libraries."},{"content":"If using in an ATL application:","pos":[8816,8847]},{"content":"<ph id=\"ph1\">`CString`</ph>, <ph id=\"ph2\">`CStringA`</ph>, and <ph id=\"ph3\">`CStringW`</ph> are exported from the MFC DLL (MFC90.DLL), never from user DLLs.","pos":[8854,8956],"source":"`CString`, `CStringA`, and `CStringW` are exported from the MFC DLL (MFC90.DLL), never from user DLLs."},{"content":"This is done to prevent <ph id=\"ph1\">`CStringT`</ph> from being multiply defined.","pos":[8957,9020],"source":" This is done to prevent `CStringT` from being multiply defined."},{"pos":[9028,9546],"content":"[!NOTE]\n If you encountered linker errors when exporting a `CString`-derived class from an MFC extension DLL in Visual C++ .NET 2002 and have applied the workaround as described in the Knowledge Base article, \"Linking Errors When You Import CString-Derived Classes\" (Q309801), you should remove the workaround code, because this has been fixed in Visual C++ .NET 2003. You can find Knowledge Base articles on the MSDN Library CD-ROM or at [http://support.microsoft.com/support](http://support.microsoft.com/support).","leadings":["","> "],"nodes":[{"content":" If you encountered linker errors when exporting a `CString`-derived class from an MFC extension DLL in Visual C++ .NET 2002 and have applied the workaround as described in the Knowledge Base article, \"Linking Errors When You Import CString-Derived Classes\" (Q309801), you should remove the workaround code, because this has been fixed in Visual C++ .NET 2003. You can find Knowledge Base articles on the MSDN Library CD-ROM or at [http://support.microsoft.com/support](http://support.microsoft.com/support).","pos":[8,516],"nodes":[{"content":"If you encountered linker errors when exporting a <ph id=\"ph1\">`CString`</ph>-derived class from an MFC extension DLL in Visual C++ .NET 2002 and have applied the workaround as described in the Knowledge Base article, \"Linking Errors When You Import CString-Derived Classes\" (Q309801), you should remove the workaround code, because this has been fixed in Visual C++ .NET 2003.","pos":[1,360],"source":" If you encountered linker errors when exporting a `CString`-derived class from an MFC extension DLL in Visual C++ .NET 2002 and have applied the workaround as described in the Knowledge Base article, \"Linking Errors When You Import CString-Derived Classes\" (Q309801), you should remove the workaround code, because this has been fixed in Visual C++ .NET 2003."},{"content":"You can find Knowledge Base articles on the MSDN Library CD-ROM or at <bpt id=\"p1\">[</bpt>http://support.microsoft.com/support<ept id=\"p1\">](http://support.microsoft.com/support)</ept>.","pos":[361,508],"source":" You can find Knowledge Base articles on the MSDN Library CD-ROM or at [http://support.microsoft.com/support](http://support.microsoft.com/support)."}]}]},{"content":"The following string types are available within MFC-based applications:","pos":[9553,9624]},{"content":"CStringT type","pos":[9631,9644]},{"content":"Declaration","pos":[9645,9656]},{"content":"An ANSI character type string with CRT support.","pos":[9714,9761]},{"content":"A Unicode character type string with CRT support.","pos":[9777,9826]},{"content":"Both ANSI and Unicode character types with CRT support.","pos":[9841,9896]},{"pos":[9904,9997],"content":"The following string types are available in projects where <bpt id=\"p1\">**</bpt>ATL_CSTRING_NO_CRT<ept id=\"p1\">**</ept> is defined:","source":"The following string types are available in projects where **ATL_CSTRING_NO_CRT** is defined:"},{"content":"CStringT type","pos":[10004,10017]},{"content":"Declaration","pos":[10018,10029]},{"pos":[10076,10091],"content":"<bpt id=\"p1\">**</bpt>CAtlStringA<ept id=\"p1\">**</ept>","source":"**CAtlStringA**"},{"content":"An ANSI character type string without CRT support.","pos":[10092,10142]},{"pos":[10147,10162],"content":"<bpt id=\"p1\">**</bpt>CAtlStringW<ept id=\"p1\">**</ept>","source":"**CAtlStringW**"},{"content":"A Unicode character type string without CRT support.","pos":[10163,10215]},{"pos":[10220,10234],"content":"<bpt id=\"p1\">**</bpt>CAtlString<ept id=\"p1\">**</ept>","source":"**CAtlString**"},{"content":"Both ANSI and Unicode character types without CRT support.","pos":[10235,10293]},{"pos":[10301,10398],"content":"The following string types are available in projects where <bpt id=\"p1\">**</bpt>ATL_CSTRING_NO_CRT<ept id=\"p1\">**</ept> is not defined:","source":"The following string types are available in projects where **ATL_CSTRING_NO_CRT** is not defined:"},{"content":"CStringT type","pos":[10405,10418]},{"content":"Declaration","pos":[10419,10430]},{"pos":[10477,10492],"content":"<bpt id=\"p1\">**</bpt>CAtlStringA<ept id=\"p1\">**</ept>","source":"**CAtlStringA**"},{"content":"An ANSI character type string with CRT support.","pos":[10493,10540]},{"pos":[10545,10560],"content":"<bpt id=\"p1\">**</bpt>CAtlStringW<ept id=\"p1\">**</ept>","source":"**CAtlStringW**"},{"content":"A Unicode character type string with CRT support.","pos":[10561,10610]},{"pos":[10615,10629],"content":"<bpt id=\"p1\">**</bpt>CAtlString<ept id=\"p1\">**</ept>","source":"**CAtlString**"},{"content":"Both ANSI and Unicode character types with CRT support.","pos":[10630,10685]},{"pos":[10693,10751],"content":"<ph id=\"ph1\">`CString`</ph> objects also have the following characteristics:","source":"`CString` objects also have the following characteristics:"},{"pos":[10759,10827],"content":"<ph id=\"ph1\">`CStringT`</ph> objects can grow as a result of concatenation operations.","source":"`CStringT` objects can grow as a result of concatenation operations."},{"content":"<ph id=\"ph1\">`CStringT`</ph> objects follow \"value semantics.\"","pos":[10835,10879],"source":"`CStringT` objects follow \"value semantics.\""},{"content":"Think of a <ph id=\"ph1\">`CStringT`</ph> object as an actual string, not as a pointer to a string.","pos":[10880,10959],"source":" Think of a `CStringT` object as an actual string, not as a pointer to a string."},{"pos":[10969,11046],"content":"You can freely substitute <ph id=\"ph1\">`CStringT`</ph> objects for <ph id=\"ph2\">`PCXSTR`</ph> function arguments.","source":"You can freely substitute `CStringT` objects for `PCXSTR` function arguments."},{"content":"Custom memory management for string buffers.","pos":[11056,11100]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Memory Management and CStringT<ept id=\"p1\">](../../atl-mfc-shared/memory-management-with-cstringt.md)</ept>.","pos":[11101,11217],"source":" For more information, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md)."},{"pos":[11226,11251],"content":"CStringT Predefined Types","linkify":"CStringT Predefined Types","nodes":[{"content":"CStringT Predefined Types","pos":[0,25]}]},{"content":"Because <ph id=\"ph1\">`CStringT`</ph> uses a template argument to define the character type (either <bpt id=\"p1\">[</bpt>wchar_t<ept id=\"p1\">](../../c-runtime-library/standard-types.md)</ept> or <bpt id=\"p2\">[</bpt>char<ept id=\"p2\">](../../c-runtime-library/standard-types.md)</ept>) supported, method parameter types can be complicated at times.","pos":[11255,11505],"source":"Because `CStringT` uses a template argument to define the character type (either [wchar_t](../../c-runtime-library/standard-types.md) or [char](../../c-runtime-library/standard-types.md)) supported, method parameter types can be complicated at times."},{"content":"To simplify this issue, a set of predefined types is defined and used throughout the <ph id=\"ph1\">`CStringT`</ph> class.","pos":[11506,11608],"source":" To simplify this issue, a set of predefined types is defined and used throughout the `CStringT` class."},{"content":"The following table lists the various types:","pos":[11609,11653]},{"content":"Name","pos":[11660,11664]},{"content":"Description","pos":[11665,11676]},{"pos":[11722,11824],"content":"A single character (either <ph id=\"ph1\">`wchar_t`</ph> or <ph id=\"ph2\">`char`</ph>) with the same character type as the <ph id=\"ph3\">`CStringT`</ph> object.","source":"A single character (either `wchar_t` or `char`) with the same character type as the `CStringT` object."},{"pos":[11829,11838],"content":"<bpt id=\"p1\">**</bpt>YCHAR<ept id=\"p1\">**</ept>","source":"**YCHAR**"},{"pos":[11839,11945],"content":"A single character (either <ph id=\"ph1\">`wchar_t`</ph> or <ph id=\"ph2\">`char`</ph>) with the opposite character type as the <ph id=\"ph3\">`CStringT`</ph> object.","source":"A single character (either `wchar_t` or `char`) with the opposite character type as the `CStringT` object."},{"pos":[11958,12073],"content":"A pointer to a character string (either <ph id=\"ph1\">`wchar_t`</ph> or <ph id=\"ph2\">`char`</ph>) with the same character type as the <ph id=\"ph3\">`CStringT`</ph> object.","source":"A pointer to a character string (either `wchar_t` or `char`) with the same character type as the `CStringT` object."},{"pos":[12078,12087],"content":"<bpt id=\"p1\">**</bpt>PYSTR<ept id=\"p1\">**</ept>","source":"**PYSTR**"},{"pos":[12088,12207],"content":"A pointer to a character string (either <ph id=\"ph1\">`wchar_t`</ph> or <ph id=\"ph2\">`char`</ph>) with the opposite character type as the <ph id=\"ph3\">`CStringT`</ph> object.","source":"A pointer to a character string (either `wchar_t` or `char`) with the opposite character type as the `CStringT` object."},{"pos":[12221,12346],"content":"A pointer to a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> character string (either <ph id=\"ph1\">`wchar_t`</ph> or <ph id=\"ph2\">`char`</ph>) with the same character type as the <ph id=\"ph3\">`CStringT`</ph> object.","source":"A pointer to a **const** character string (either `wchar_t` or `char`) with the same character type as the `CStringT` object."},{"pos":[12351,12361],"content":"<bpt id=\"p1\">**</bpt>PCYSTR<ept id=\"p1\">**</ept>","source":"**PCYSTR**"},{"pos":[12362,12491],"content":"A pointer to a <bpt id=\"p1\">**</bpt>const<ept id=\"p1\">**</ept> character string (either <ph id=\"ph1\">`wchar_t`</ph> or <ph id=\"ph2\">`char`</ph>) with the opposite character type as the <ph id=\"ph3\">`CStringT`</ph> object.","source":"A pointer to a **const** character string (either `wchar_t` or `char`) with the opposite character type as the `CStringT` object."},{"pos":[12500,12772],"content":"[!NOTE]\n Code that previously used undocumented methods of `CString` (such as **AssignCopy**) must be replaced with code that uses the following documented methods of `CStringT` (such as `GetBuffer` or `ReleaseBuffer`). These methods are inherited from `CSimpleStringT`.","leadings":["","> "],"nodes":[{"content":" Code that previously used undocumented methods of `CString` (such as **AssignCopy**) must be replaced with code that uses the following documented methods of `CStringT` (such as `GetBuffer` or `ReleaseBuffer`). These methods are inherited from `CSimpleStringT`.","pos":[8,270],"nodes":[{"content":"Code that previously used undocumented methods of <ph id=\"ph1\">`CString`</ph> (such as <bpt id=\"p1\">**</bpt>AssignCopy<ept id=\"p1\">**</ept>) must be replaced with code that uses the following documented methods of <ph id=\"ph2\">`CStringT`</ph> (such as <ph id=\"ph3\">`GetBuffer`</ph> or <ph id=\"ph4\">`ReleaseBuffer`</ph>).","pos":[1,211],"source":" Code that previously used undocumented methods of `CString` (such as **AssignCopy**) must be replaced with code that uses the following documented methods of `CStringT` (such as `GetBuffer` or `ReleaseBuffer`)."},{"content":"These methods are inherited from <ph id=\"ph1\">`CSimpleStringT`</ph>.","pos":[212,262],"source":" These methods are inherited from `CSimpleStringT`."}]}]},{"pos":[12781,12802],"content":"Inheritance Hierarchy","linkify":"Inheritance Hierarchy","nodes":[{"content":"Inheritance Hierarchy","pos":[0,21]}]},{"pos":[12806,12878],"content":"<bpt id=\"p1\">[</bpt>CSimpleStringT<ept id=\"p1\">](../../atl-mfc-shared/reference/csimplestringt-class.md)</ept>","source":"[CSimpleStringT](../../atl-mfc-shared/reference/csimplestringt-class.md)"},{"pos":[12904,12916],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"content":"Header","pos":[12923,12929]},{"content":"Use for","pos":[12930,12937]},{"content":"cstringt.h","pos":[12973,12983]},{"content":"MFC-only string objects","pos":[12984,13007]},{"content":"atlstr.h","pos":[13012,13020]},{"content":"Non-MFC string objects","pos":[13021,13043]},{"pos":[13054,13119],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__allocsysstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::AllocSysString","linkify":"<a name=\"cstringt__allocsysstring\"></a>  CStringT::AllocSysString","source":"<a name=\"cstringt__allocsysstring\"></a>  CStringT::AllocSysString"},{"pos":[13123,13283],"content":"Allocates an Automation-compatible string of the type <ph id=\"ph1\">`BSTR`</ph> and copies the contents of the <ph id=\"ph2\">`CStringT`</ph> object into it, including the terminating null character.","source":"Allocates an Automation-compatible string of the type `BSTR` and copies the contents of the `CStringT` object into it, including the terminating null character."},{"pos":[13340,13352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The newly allocated string.","pos":[13356,13383]},{"pos":[13393,13400],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In MFC programs, a <bpt id=\"p1\">[</bpt>CMemoryException Class<ept id=\"p1\">](../../mfc/reference/cmemoryexception-class.md)</ept> is thrown if insufficient memory exists.","pos":[13404,13535],"source":"In MFC programs, a [CMemoryException Class](../../mfc/reference/cmemoryexception-class.md) is thrown if insufficient memory exists."},{"content":"In ATL programs, a <bpt id=\"p1\">[</bpt>CAtlException<ept id=\"p1\">](../../atl/reference/catlexception-class.md)</ept> is thrown.","pos":[13536,13625],"source":" In ATL programs, a [CAtlException](../../atl/reference/catlexception-class.md) is thrown."},{"content":"This function is normally used to return strings for Automation.","pos":[13626,13690]},{"content":"Commonly, if this string is passed to a COM function as an [in] parameter, then this requires the caller to free the string.","pos":[13697,13821]},{"content":"This can be done by using <bpt id=\"p1\">[</bpt>SysFreeString<ept id=\"p1\">](http://msdn.microsoft.com/en-us/8f230ee3-5f6e-4cb9-a910-9c90b754dcd3)</ept>, as described in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[13822,14007],"source":" This can be done by using [SysFreeString](http://msdn.microsoft.com/en-us/8f230ee3-5f6e-4cb9-a910-9c90b754dcd3), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Allocating and Releasing Memory for a BSTR<ept id=\"p1\">](../../atl-mfc-shared/allocating-and-releasing-memory-for-a-bstr.md)</ept>.","pos":[14008,14147],"source":" For more information, see [Allocating and Releasing Memory for a BSTR](../../atl-mfc-shared/allocating-and-releasing-memory-for-a-bstr.md)."},{"pos":[14154,14368],"content":"For more information about OLE allocation functions in Windows, see <bpt id=\"p1\">[</bpt>SysAllocString<ept id=\"p1\">](http://msdn.microsoft.com/en-us/9e0437a2-9b4a-4576-88b0-5cb9d08ca29b)</ept> in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information about OLE allocation functions in Windows, see [SysAllocString](http://msdn.microsoft.com/en-us/9e0437a2-9b4a-4576-88b0-5cb9d08ca29b) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[14378,14385],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14389,14462],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CStringT::AllocSysString`</ph>.","source":"The following example demonstrates the use of `CStringT::AllocSysString`."},{"pos":[14469,14565],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#105<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_1.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#105](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_1.cpp)]"},{"pos":[14575,14630],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__ansitooem\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::AnsiToOem","linkify":"<a name=\"cstringt__ansitooem\"></a>  CStringT::AnsiToOem","source":"<a name=\"cstringt__ansitooem\"></a>  CStringT::AnsiToOem"},{"pos":[14634,14741],"content":"Converts all the characters in this <ph id=\"ph1\">`CStringT`</ph> object from the ANSI character set to the OEM character set.","source":"Converts all the characters in this `CStringT` object from the ANSI character set to the OEM character set."},{"pos":[14784,14791],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14795,14850],"content":"The function is not available if <ph id=\"ph1\">`_UNICODE`</ph> is defined.","source":"The function is not available if `_UNICODE` is defined."},{"pos":[14860,14867],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[14871,14967],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#106<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_2.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#106](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_2.cpp)]"},{"pos":[14977,15038],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__appendformat\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::AppendFormat","linkify":"<a name=\"cstringt__appendformat\"></a>  CStringT::AppendFormat","source":"<a name=\"cstringt__appendformat\"></a>  CStringT::AppendFormat"},{"pos":[15042,15098],"content":"Appends formatted data to an existing <ph id=\"ph1\">`CStringT`</ph> object.","source":"Appends formatted data to an existing `CStringT` object."},{"pos":[15302,15312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A format-control string.","pos":[15331,15355]},{"content":"The string resource identifier that contains the format-control string.","pos":[15377,15448]},{"content":"Optional arguments.","pos":[15469,15488]},{"pos":[15498,15505],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function formats and appends a series of characters and values in the <ph id=\"ph1\">`CStringT`</ph>.","pos":[15509,15595],"source":"This function formats and appends a series of characters and values in the `CStringT`."},{"content":"Each optional argument (if any) is converted and appended according to the corresponding format specification in <ph id=\"ph1\">`pszFormat`</ph> or from the string resource identified by <ph id=\"ph2\">`nFormatID`</ph>.","pos":[15596,15775],"source":" Each optional argument (if any) is converted and appended according to the corresponding format specification in `pszFormat` or from the string resource identified by `nFormatID`."},{"pos":[15785,15792],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15796,15892],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#107<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_3.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#107](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_3.cpp)]"},{"pos":[15902,15953],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__collate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::Collate","linkify":"<a name=\"cstringt__collate\"></a>  CStringT::Collate","source":"<a name=\"cstringt__collate\"></a>  CStringT::Collate"},{"pos":[15957,16021],"content":"Compares two strings using the generic-text function <ph id=\"ph1\">`_tcscoll`</ph>.","source":"Compares two strings using the generic-text function `_tcscoll`."},{"pos":[16085,16095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The other string used for comparison.","pos":[16108,16145]},{"pos":[16155,16167],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16171,16311],"content":"Zero if the strings are identical, &lt; 0 if this <ph id=\"ph1\">`CStringT`</ph> object is less than <ph id=\"ph2\">`psz`</ph>, or &gt; 0 if this <ph id=\"ph3\">`CStringT`</ph> object is greater than <ph id=\"ph4\">`psz`</ph>.","source":"Zero if the strings are identical, < 0 if this `CStringT` object is less than `psz`, or > 0 if this `CStringT` object is greater than `psz`."},{"pos":[16321,16328],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The generic-text function <ph id=\"ph1\">`_tcscoll`</ph>, which is defined in TCHAR.H, maps to either <ph id=\"ph2\">`strcoll`</ph>, <ph id=\"ph3\">`wcscoll`</ph>, or <ph id=\"ph4\">`_mbscoll`</ph>, depending on the character set that is defined at compile time.","pos":[16332,16514],"source":"The generic-text function `_tcscoll`, which is defined in TCHAR.H, maps to either `strcoll`, `wcscoll`, or `_mbscoll`, depending on the character set that is defined at compile time."},{"content":"Each function performs a case-sensitive comparison of the strings according to the code page currently in use.","pos":[16515,16625]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>strcoll, wcscoll, _mbscoll, _strcoll_l, _wcscoll_l, _mbscoll_l<ept id=\"p1\">](../../c-runtime-library/reference/strcoll-wcscoll-mbscoll-strcoll-l-wcscoll-l-mbscoll-l.md)</ept>.","pos":[16626,16809],"source":" For more information, see [strcoll, wcscoll, _mbscoll, _strcoll_l, _wcscoll_l, _mbscoll_l](../../c-runtime-library/reference/strcoll-wcscoll-mbscoll-strcoll-l-wcscoll-l-mbscoll-l.md)."},{"pos":[16819,16882],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__collatenocase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::CollateNoCase","linkify":"<a name=\"cstringt__collatenocase\"></a>  CStringT::CollateNoCase","source":"<a name=\"cstringt__collatenocase\"></a>  CStringT::CollateNoCase"},{"pos":[16886,16950],"content":"Compares two strings using the generic-text function <ph id=\"ph1\">`_tcscoll`</ph>.","source":"Compares two strings using the generic-text function `_tcscoll`."},{"pos":[17020,17030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The other string used for comparison.","pos":[17043,17080]},{"pos":[17090,17102],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17106,17294],"content":"Zero if the strings are identical (ignoring case), &lt; 0 if this <ph id=\"ph1\">`CStringT`</ph> object is less than <ph id=\"ph2\">`psz`</ph> (ignoring case), or &gt; 0 if this <ph id=\"ph3\">`CStringT`</ph> object is greater than <ph id=\"ph4\">`psz`</ph> (ignoring case).","source":"Zero if the strings are identical (ignoring case), < 0 if this `CStringT` object is less than `psz` (ignoring case), or > 0 if this `CStringT` object is greater than `psz` (ignoring case)."},{"pos":[17304,17311],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The generic-text function <ph id=\"ph1\">`_tcscoll`</ph>, which is defined in TCHAR.H, maps to either <ph id=\"ph2\">`stricoll`</ph>, <ph id=\"ph3\">`wcsicoll`</ph>, or <ph id=\"ph4\">`_mbsicoll`</ph>, depending on the character set that is defined at compile time.","pos":[17315,17500],"source":"The generic-text function `_tcscoll`, which is defined in TCHAR.H, maps to either `stricoll`, `wcsicoll`, or `_mbsicoll`, depending on the character set that is defined at compile time."},{"content":"Each function performs a case-insensitive comparison of the strings, according to the code page currently in use.","pos":[17501,17614]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>strcoll, wcscoll, _mbscoll, _strcoll_l, _wcscoll_l, _mbscoll_l<ept id=\"p1\">](../../c-runtime-library/reference/strcoll-wcscoll-mbscoll-strcoll-l-wcscoll-l-mbscoll-l.md)</ept>.","pos":[17615,17798],"source":" For more information, see [strcoll, wcscoll, _mbscoll, _strcoll_l, _wcscoll_l, _mbscoll_l](../../c-runtime-library/reference/strcoll-wcscoll-mbscoll-strcoll-l-wcscoll-l-mbscoll-l.md)."},{"pos":[17808,17815],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17819,17915],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#109<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_4.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#109](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_4.cpp)]"},{"pos":[17925,17976],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__compare\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::Compare","linkify":"<a name=\"cstringt__compare\"></a>  CStringT::Compare","source":"<a name=\"cstringt__compare\"></a>  CStringT::Compare"},{"content":"Compares two strings (case sensitive).","pos":[17980,18018]},{"pos":[18077,18087],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The other string used for comparison.","pos":[18100,18137]},{"pos":[18147,18159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18163,18303],"content":"Zero if the strings are identical, &lt; 0 if this <ph id=\"ph1\">`CStringT`</ph> object is less than <ph id=\"ph2\">`psz`</ph>, or &gt; 0 if this <ph id=\"ph3\">`CStringT`</ph> object is greater than <ph id=\"ph4\">`psz`</ph>.","source":"Zero if the strings are identical, < 0 if this `CStringT` object is less than `psz`, or > 0 if this `CStringT` object is greater than `psz`."},{"pos":[18313,18320],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The generic-text function <ph id=\"ph1\">`_tcscmp`</ph>, which is defined in TCHAR.H, maps to either <ph id=\"ph2\">`strcmp`</ph>, <ph id=\"ph3\">`wcscmp`</ph>, or <ph id=\"ph4\">`_mbscmp`</ph>, depending on the character set that is defined at compile time.","pos":[18324,18502],"source":"The generic-text function `_tcscmp`, which is defined in TCHAR.H, maps to either `strcmp`, `wcscmp`, or `_mbscmp`, depending on the character set that is defined at compile time."},{"content":"Each function performs a case-sensitive comparison of the strings and is not affected by locale.","pos":[18503,18599]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>strcmp, wcscmp, _mbscmp<ept id=\"p1\">](../../c-runtime-library/reference/strcmp-wcscmp-mbscmp.md)</ept>.","pos":[18600,18711],"source":" For more information, see [strcmp, wcscmp, _mbscmp](../../c-runtime-library/reference/strcmp-wcscmp-mbscmp.md)."},{"content":"If the string contains embedded nulls, for purposes of comparison the string is considered to be truncated at the first embedded null character.","pos":[18718,18862]},{"pos":[18872,18879],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18883,18949],"content":"The following example demonstrates the use of <ph id=\"ph1\">`CStringT::Compare`</ph>.","source":"The following example demonstrates the use of `CStringT::Compare`."},{"pos":[18956,19052],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#110<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_5.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#110](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_5.cpp)]"},{"pos":[19062,19125],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__comparenocase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::CompareNoCase","linkify":"<a name=\"cstringt__comparenocase\"></a>  CStringT::CompareNoCase","source":"<a name=\"cstringt__comparenocase\"></a>  CStringT::CompareNoCase"},{"content":"Compares two strings (case insensitive).","pos":[19129,19169]},{"pos":[19239,19249],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The other string used for comparison.","pos":[19262,19299]},{"pos":[19309,19321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19325,19511],"content":"Zero if the strings are identical (ignoring case), &lt;0 if this <ph id=\"ph1\">`CStringT`</ph> object is less than <ph id=\"ph2\">`psz`</ph> (ignoring case), or &gt;0 if this <ph id=\"ph3\">`CStringT`</ph> object is greater than <ph id=\"ph4\">`psz`</ph> (ignoring case).","source":"Zero if the strings are identical (ignoring case), <0 if this `CStringT` object is less than `psz` (ignoring case), or >0 if this `CStringT` object is greater than `psz` (ignoring case)."},{"pos":[19521,19528],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The generic-text function <ph id=\"ph1\">`_tcsicmp`</ph>, which is defined in TCHAR.H, maps to either <ph id=\"ph2\">`_stricmp`</ph>, <ph id=\"ph3\">`_wcsicmp`</ph> or <ph id=\"ph4\">`_mbsicmp`</ph>, depending on the character set that is defined at compile time.","pos":[19532,19715],"source":"The generic-text function `_tcsicmp`, which is defined in TCHAR.H, maps to either `_stricmp`, `_wcsicmp` or `_mbsicmp`, depending on the character set that is defined at compile time."},{"content":"Each function performs a case-insensitive comparison of the strings.","pos":[19716,19784]},{"content":"The comparison depends on the <ph id=\"ph1\">`LC_CTYPE`</ph> aspect of the locale but not <ph id=\"ph2\">`LC_COLLATE`</ph>.","pos":[19785,19868],"source":" The comparison depends on the `LC_CTYPE` aspect of the locale but not `LC_COLLATE`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>_stricmp, _wcsicmp, _mbsicmp, _stricmp_l, _wcsicmp_l, _mbsicmp_l<ept id=\"p1\">](../../c-runtime-library/reference/stricmp-wcsicmp-mbsicmp-stricmp-l-wcsicmp-l-mbsicmp-l.md)</ept>.","pos":[19869,20054],"source":" For more information, see [_stricmp, _wcsicmp, _mbsicmp, _stricmp_l, _wcsicmp_l, _mbsicmp_l](../../c-runtime-library/reference/stricmp-wcsicmp-mbsicmp-stricmp-l-wcsicmp-l-mbsicmp-l.md)."},{"pos":[20064,20071],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20075,20171],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#111<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_6.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#111](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_6.cpp)]"},{"pos":[20181,20234],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__cstringt\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::CStringT","linkify":"<a name=\"cstringt__cstringt\"></a>  CStringT::CStringT","source":"<a name=\"cstringt__cstringt\"></a>  CStringT::CStringT"},{"pos":[20238,20269],"content":"Constructs a <ph id=\"ph1\">`CStringT`</ph> object.","source":"Constructs a `CStringT` object."},{"pos":[22965,22975],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to an array of characters of length <ph id=\"ph1\">`nLength`</ph>, not null-terminated.","pos":[22988,23065],"source":" A pointer to an array of characters of length `nLength`, not null-terminated."},{"content":"A count of the number of characters in <ph id=\"ph1\">`pch`</ph>.","pos":[23085,23130],"source":" A count of the number of characters in `pch`."},{"content":"A single character.","pos":[23145,23164]},{"content":"A null-terminated string to be copied into this <ph id=\"ph1\">`CStringT`</ph> object.","pos":[23183,23249],"source":" A null-terminated string to be copied into this `CStringT` object."},{"content":"A pointer to the memory manager for the <ph id=\"ph1\">`CStringT`</ph> object.","pos":[23272,23330],"source":" A pointer to the memory manager for the `CStringT` object."},{"content":"For more information on <ph id=\"ph1\">`IAtlStringMgr`</ph> and memory management for <ph id=\"ph2\">`CStringT`</ph>, see <bpt id=\"p1\">[</bpt>Memory Management with CStringT<ept id=\"p1\">](../../atl-mfc-shared/memory-management-with-cstringt.md)</ept>.","pos":[23331,23504],"source":" For more information on `IAtlStringMgr` and memory management for `CStringT`, see [Memory Management with CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md)."},{"content":"An existing <ph id=\"ph1\">`CStringT`</ph> object to be copied into this <ph id=\"ph2\">`CStringT`</ph> object.","pos":[23523,23594],"source":" An existing `CStringT` object to be copied into this `CStringT` object."},{"content":"For more information on <ph id=\"ph1\">`CThisString`</ph> and <ph id=\"ph2\">`CThisSimpleString`</ph>, see the Remarks section.","pos":[23595,23682],"source":" For more information on `CThisString` and `CThisSimpleString`, see the Remarks section."},{"content":"A variant object to be copied into this <ph id=\"ph1\">`CStringT`</ph> object.","pos":[23701,23759],"source":" A variant object to be copied into this `CStringT` object."},{"content":"The character type of the string class.","pos":[23780,23819]},{"content":"Can be one of the following:","pos":[23820,23848]},{"pos":[23855,23891],"content":"<ph id=\"ph1\">`char`</ph> (for ANSI character strings).","source":"`char` (for ANSI character strings)."},{"pos":[23898,23940],"content":"<ph id=\"ph1\">`wchar_t`</ph> (for Unicode character strings).","source":"`wchar_t` (for Unicode character strings)."},{"pos":[23947,24001],"content":"<ph id=\"ph1\">`TCHAR`</ph> (for both ANSI and Unicode character strings).","source":"`TCHAR` (for both ANSI and Unicode character strings)."},{"content":"Boolean that specifies whether the project is an MFC DLL (TRUE) or not (FALSE).","pos":[24021,24100]},{"content":"Must be <ph id=\"ph1\">`System::String`</ph>, and the project must be compiled with /clr.","pos":[24125,24194],"source":" Must be `System::String`, and the project must be compiled with /clr."},{"content":"A handle for a <ph id=\"ph1\">`CStringT`</ph> object.","pos":[24214,24247],"source":" A handle for a `CStringT` object."},{"pos":[24257,24264],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Because the constructors copy the input data into new allocated storage, you should be aware that memory exceptions may result.","pos":[24268,24395]},{"content":"Note that some of these constructors act as conversion functions.","pos":[24396,24461]},{"content":"This allows you to substitute, for example, an <ph id=\"ph1\">`LPTSTR`</ph> where a <ph id=\"ph2\">`CStringT`</ph> object is expected.","pos":[24462,24556],"source":" This allows you to substitute, for example, an `LPTSTR` where a `CStringT` object is expected."},{"content":"<ph id=\"ph1\">`CStringT`</ph>( <ph id=\"ph2\">`LPCSTR`</ph> <ph id=\"ph3\">`lpsz`</ph> ): Constructs a Unicode <ph id=\"ph4\">`CStringT`</ph> from an ANSI string.","pos":[24564,24647],"source":"`CStringT`( `LPCSTR` `lpsz` ): Constructs a Unicode `CStringT` from an ANSI string."},{"content":"You can also use this constructor to load a string resource as shown in the example below.","pos":[24648,24738]},{"pos":[24746,24824],"content":"<ph id=\"ph1\">`CStringT(`</ph> <ph id=\"ph2\">`LPCWSTR`</ph> <ph id=\"ph3\">`lpsz`</ph> ): Constructs a <ph id=\"ph4\">`CStringT`</ph> from a Unicode string.","source":"`CStringT(` `LPCWSTR` `lpsz` ): Constructs a `CStringT` from a Unicode string."},{"pos":[24832,24947],"content":"<ph id=\"ph1\">`CStringT`</ph>( <ph id=\"ph2\">`const unsigned char*`</ph> <ph id=\"ph3\">`psz`</ph> ): Allows you to construct a <ph id=\"ph4\">`CStringT`</ph> from a pointer to <ph id=\"ph5\">`unsigned char`</ph>.","source":"`CStringT`( `const unsigned char*` `psz` ): Allows you to construct a `CStringT` from a pointer to `unsigned char`."},{"pos":[24955,25332],"content":"[!NOTE]\n Define the **_CSTRING_DISABLE_NARROW_WIDE_CONVERSION** macro to turn off implicit string conversion between [!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)] and [!INCLUDE[TLA#tla_unicode](../../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)] strings. The macro excludes from compilation constructors that support conversion.","leadings":["","> "],"nodes":[{"content":" Define the **_CSTRING_DISABLE_NARROW_WIDE_CONVERSION** macro to turn off implicit string conversion between [!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)] and [!INCLUDE[TLA#tla_unicode](../../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)] strings. The macro excludes from compilation constructors that support conversion.","pos":[8,375],"nodes":[{"content":"Define the <bpt id=\"p1\">**</bpt>_CSTRING_DISABLE_NARROW_WIDE_CONVERSION<ept id=\"p1\">**</ept> macro to turn off implicit string conversion between <ph id=\"ph1\">[!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[TLA#tla_unicode](../../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)]</ph> strings.","pos":[1,293],"source":" Define the **_CSTRING_DISABLE_NARROW_WIDE_CONVERSION** macro to turn off implicit string conversion between [!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)] and [!INCLUDE[TLA#tla_unicode](../../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)] strings."},{"content":"The macro excludes from compilation constructors that support conversion.","pos":[294,367]}]}]},{"content":"Note that the <ph id=\"ph1\">`strSrc`</ph> parameter can be either a <ph id=\"ph2\">`CStringT`</ph> or <ph id=\"ph3\">`CThisSimpleString`</ph> object.","pos":[25339,25429],"source":"Note that the `strSrc` parameter can be either a `CStringT` or `CThisSimpleString` object."},{"content":"For <ph id=\"ph1\">`CStringT`</ph>, use one of its default instantiations ( <ph id=\"ph2\">`CString`</ph>, <ph id=\"ph3\">`CStringA`</ph>, or <ph id=\"ph4\">`CStringW`</ph>); for <ph id=\"ph5\">`CThisSimpleString`</ph>, use a <ph id=\"ph6\">`this`</ph> pointer.","pos":[25430,25571],"source":" For `CStringT`, use one of its default instantiations ( `CString`, `CStringA`, or `CStringW`); for `CThisSimpleString`, use a `this` pointer."},{"content":"<ph id=\"ph1\">`CThisSimpleString`</ph> declares an instance of the <bpt id=\"p1\">[</bpt>CSimpleStringT Class<ept id=\"p1\">](../../atl-mfc-shared/reference/csimplestringt-class.md)</ept>, which is a smaller string class with less built-in functionality than the <ph id=\"ph2\">`CStringT`</ph> class.","pos":[25572,25791],"source":"`CThisSimpleString` declares an instance of the [CSimpleStringT Class](../../atl-mfc-shared/reference/csimplestringt-class.md), which is a smaller string class with less built-in functionality than the `CStringT` class."},{"pos":[25798,25909],"content":"The overload operator <ph id=\"ph1\">`CSimpleStringT&lt;&gt;&amp;()`</ph> constructs a <ph id=\"ph2\">`CStringT`</ph> object from a <ph id=\"ph3\">`CSimpleStringT`</ph> declaration.","source":"The overload operator `CSimpleStringT<>&()` constructs a `CStringT` object from a `CSimpleStringT` declaration."},{"pos":[25917,26168],"content":"[!NOTE]\n Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it. Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results.","leadings":["","> "],"nodes":[{"content":" Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it. Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results.","pos":[8,249],"nodes":[{"content":"Although it is possible to create <ph id=\"ph1\">`CStringT`</ph> instances that contain embedded null characters, we recommend against it.","pos":[1,119],"source":" Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it."},{"content":"Calling methods and operators on <ph id=\"ph1\">`CStringT`</ph> objects that contain embedded null characters can produce unintended results.","pos":[120,241],"source":" Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results."}]}]},{"pos":[26178,26185],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[26189,26285],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#112<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_7.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#112](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_7.cpp)]"},{"pos":[26295,26354],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt___dtorcstringt\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::~CStringT","linkify":"<a name=\"cstringt___dtorcstringt\"></a>  CStringT::~CStringT","source":"<a name=\"cstringt___dtorcstringt\"></a>  CStringT::~CStringT"},{"pos":[26358,26389],"content":"Destroys the <ph id=\"ph1\">`CStringT`</ph> object.","source":"Destroys the `CStringT` object."},{"pos":[26435,26442],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26446,26477],"content":"Destroys the <ph id=\"ph1\">`CStringT`</ph> object.","source":"Destroys the `CStringT` object."},{"pos":[26487,26536],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__delete\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::Delete","linkify":"<a name=\"cstringt__delete\"></a>  CStringT::Delete","source":"<a name=\"cstringt__delete\"></a>  CStringT::Delete"},{"content":"Deletes a character or characters from a string starting with the character at the given index.","pos":[26540,26635]},{"pos":[26711,26721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The zero-based index of the first character in the <ph id=\"ph1\">`CStringT`</ph> object to delete.","pos":[26737,26816],"source":" The zero-based index of the first character in the `CStringT` object to delete."},{"content":"The number of characters to be removed.","pos":[26835,26874]},{"pos":[26884,26896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The length of the changed string.","pos":[26900,26933]},{"pos":[26943,26950],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26954,27032],"content":"If <ph id=\"ph1\">`nCount`</ph> is longer than the string, the rest of the string will be removed.","source":"If `nCount` is longer than the string, the rest of the string will be removed."},{"pos":[27042,27049],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[27053,27149],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#113<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_8.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#113](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_8.cpp)]"},{"pos":[27282,27327],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__find\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::Find","linkify":"<a name=\"cstringt__find\"></a>  CStringT::Find","source":"<a name=\"cstringt__find\"></a>  CStringT::Find"},{"content":"Searches this string for the first match of a character or substring.","pos":[27331,27400]},{"pos":[27549,27559],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A substring to search for.","pos":[27575,27601]},{"content":"The index of the character in the string to begin the search with, or 0 to start from the beginning.","pos":[27620,27720]},{"content":"A single character to search for.","pos":[27735,27768]},{"pos":[27778,27790],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27794,27962],"content":"The zero-based index of the first character in this <ph id=\"ph1\">`CStringT`</ph> object that matches the requested substring or characters; -1 if the substring or character is not found.","source":"The zero-based index of the first character in this `CStringT` object that matches the requested substring or characters; -1 if the substring or character is not found."},{"pos":[27972,27979],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27983,28121],"content":"The function is overloaded to accept both single characters (similar to the run-time function <ph id=\"ph1\">`strchr`</ph>) and strings (similar to <ph id=\"ph2\">`strstr`</ph>).","source":"The function is overloaded to accept both single characters (similar to the run-time function `strchr`) and strings (similar to `strstr`)."},{"pos":[28131,28138],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28142,28238],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#114<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_9.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#114](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_9.cpp)]"},{"pos":[28248,28303],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__findoneof\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::FindOneOf","linkify":"<a name=\"cstringt__findoneof\"></a>  CStringT::FindOneOf","source":"<a name=\"cstringt__findoneof\"></a>  CStringT::FindOneOf"},{"pos":[28307,28405],"content":"Searches this string for the first character that matches any character contained in <ph id=\"ph1\">`pszCharSet`</ph>.","source":"Searches this string for the first character that matches any character contained in `pszCharSet`."},{"pos":[28478,28488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"String containing characters for matching.","pos":[28508,28550]},{"pos":[28560,28572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28576,28689],"content":"The zero-based index of the first character in this string that is also in <ph id=\"ph1\">`pszCharSet`</ph>; –1 if there is no match.","source":"The zero-based index of the first character in this string that is also in `pszCharSet`; –1 if there is no match."},{"pos":[28699,28706],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28710,28778],"content":"Finds the first occurrence of any of the characters in <ph id=\"ph1\">`pszCharSet`</ph>.","source":"Finds the first occurrence of any of the characters in `pszCharSet`."},{"pos":[28788,28795],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28799,28896],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#115<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_10.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#115](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_10.cpp)]"},{"pos":[28906,28955],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__format\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::Format","linkify":"<a name=\"cstringt__format\"></a>  CStringT::Format","source":"<a name=\"cstringt__format\"></a>  CStringT::Format"},{"pos":[28959,29158],"content":"Writes formatted data to a <ph id=\"ph1\">`CStringT`</ph> in the same way that <bpt id=\"p1\">[</bpt>sprintf_s<ept id=\"p1\">](../../c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l.md)</ept> formats data into a C-style character array.","source":"Writes formatted data to a `CStringT` in the same way that [sprintf_s](../../c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l.md) formats data into a C-style character array."},{"pos":[29350,29360],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The string resource identifier that contains the format-control string.","pos":[29379,29450]},{"content":"A format-control string.","pos":[29472,29496]},{"content":"Optional arguments.","pos":[29517,29536]},{"pos":[29546,29553],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function formats and stores a series of characters and values in the <ph id=\"ph1\">`CStringT`</ph>.","pos":[29557,29642],"source":"This function formats and stores a series of characters and values in the `CStringT`."},{"content":"Each optional argument (if any) is converted and output according to the corresponding format specification in <ph id=\"ph1\">`pszFormat`</ph> or from the string resource identified by <ph id=\"ph2\">`nFormatID`</ph>.","pos":[29643,29820],"source":" Each optional argument (if any) is converted and output according to the corresponding format specification in `pszFormat` or from the string resource identified by `nFormatID`."},{"content":"The call will fail if the string object itself is offered as a parameter to <ph id=\"ph1\">`Format`</ph>.","pos":[29827,29912],"source":"The call will fail if the string object itself is offered as a parameter to `Format`."},{"content":"For example, the following code will cause unpredictable results:","pos":[29913,29978]},{"pos":[29985,30082],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#116<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_11.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#116](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_11.cpp)]"},{"pos":[30089,30260],"content":"For more information, see <bpt id=\"p1\">[</bpt>Format Specification Syntax: printf and wprintf Functions<ept id=\"p1\">](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)</ept>.","source":"For more information, see [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md)."},{"pos":[30270,30277],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30281,30378],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#117<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_12.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#117](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_12.cpp)]"},{"pos":[30388,30451],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__formatmessage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::FormatMessage","linkify":"<a name=\"cstringt__formatmessage\"></a>  CStringT::FormatMessage","source":"<a name=\"cstringt__formatmessage\"></a>  CStringT::FormatMessage"},{"content":"Formats a message string.","pos":[30455,30480]},{"pos":[30686,30696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The string resource identifier that contains the unformatted message text.","pos":[30715,30789]},{"content":"Points to the format-control string.","pos":[30811,30847]},{"content":"It will be scanned for inserts and formatted accordingly.","pos":[30848,30905]},{"content":"The format string is similar to run-time function <ph id=\"ph1\">`printf`</ph>-style format strings, except it allows for the parameters to be inserted in an arbitrary order.","pos":[30906,31060],"source":" The format string is similar to run-time function `printf`-style format strings, except it allows for the parameters to be inserted in an arbitrary order."},{"content":"Optional arguments.","pos":[31081,31100]},{"pos":[31110,31117],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The function requires a message definition as input.","pos":[31121,31173]},{"content":"The message definition is determined by <ph id=\"ph1\">`pszFormat`</ph> or from the string resource identified by <ph id=\"ph2\">`nFormatID`</ph>.","pos":[31174,31280],"source":" The message definition is determined by `pszFormat` or from the string resource identified by `nFormatID`."},{"content":"The function copies the formatted message text to the <ph id=\"ph1\">`CStringT`</ph> object, processing any embedded insert sequences if requested.","pos":[31281,31408],"source":" The function copies the formatted message text to the `CStringT` object, processing any embedded insert sequences if requested."},{"pos":[31416,31575],"content":"[!NOTE]\n`FormatMessage` attempts to allocate system memory for the newly formatted string. If this attempt fails, a memory exception is automatically thrown.","leadings":["","> "],"nodes":[{"content":"`FormatMessage` attempts to allocate system memory for the newly formatted string. If this attempt fails, a memory exception is automatically thrown.","pos":[8,157],"nodes":[{"content":"<ph id=\"ph1\">`FormatMessage`</ph> attempts to allocate system memory for the newly formatted string.","pos":[0,82],"source":"`FormatMessage` attempts to allocate system memory for the newly formatted string."},{"content":"If this attempt fails, a memory exception is automatically thrown.","pos":[83,149]}]}]},{"content":"Each insert must have a corresponding parameter following the <ph id=\"ph1\">`pszFormat`</ph> or <ph id=\"ph2\">`nFormatID`</ph> parameter.","pos":[31582,31681],"source":"Each insert must have a corresponding parameter following the `pszFormat` or `nFormatID` parameter."},{"content":"Within the message text, several escape sequences are supported for dynamically formatting the message.","pos":[31682,31785]},{"content":"For more information, see the Windows <bpt id=\"p1\">[</bpt>FormatMessage<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679351)</ept> function in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","pos":[31786,31968],"source":" For more information, see the Windows [FormatMessage](http://msdn.microsoft.com/library/windows/desktop/ms679351) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[31978,31985],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31989,32086],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#118<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_13.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#118](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_13.cpp)]"},{"pos":[32096,32161],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__formatmessagev\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::FormatMessageV","linkify":"<a name=\"cstringt__formatmessagev\"></a>  CStringT::FormatMessageV","source":"<a name=\"cstringt__formatmessagev\"></a>  CStringT::FormatMessageV"},{"content":"Formats a message string using a variable argument list.","pos":[32165,32221]},{"pos":[32315,32325],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the format-control string.","pos":[32344,32380]},{"content":"It will be scanned for inserts and formatted accordingly.","pos":[32381,32438]},{"content":"The format string is similar to run-time function <ph id=\"ph1\">`printf`</ph>-style format strings, except it allows for the parameters to be inserted in an arbitrary order.","pos":[32439,32593],"source":" The format string is similar to run-time function `printf`-style format strings, except it allows for the parameters to be inserted in an arbitrary order."},{"content":"Pointer to a list of arguments.","pos":[32614,32645]},{"pos":[32655,32662],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The function requires a message definition as input, determined by <ph id=\"ph1\">`pszFormat`</ph>.","pos":[32666,32745],"source":"The function requires a message definition as input, determined by `pszFormat`."},{"content":"The function copies the formatted message text and a variable list of arguments to the <ph id=\"ph1\">`CStringT`</ph> object, processing any embedded insert sequences if requested.","pos":[32746,32906],"source":" The function copies the formatted message text and a variable list of arguments to the `CStringT` object, processing any embedded insert sequences if requested."},{"pos":[32914,33139],"content":"[!NOTE]\n`FormatMessageV` calls [CStringT::FormatMessage](#cstringt__formatmessage), which attempts to allocate system memory for the newly formatted string. If this attempt fails, a memory exception is automatically thrown.","leadings":["","> "],"nodes":[{"content":"`FormatMessageV` calls [CStringT::FormatMessage](#cstringt__formatmessage), which attempts to allocate system memory for the newly formatted string. If this attempt fails, a memory exception is automatically thrown.","pos":[8,223],"nodes":[{"content":"<ph id=\"ph1\">`FormatMessageV`</ph> calls <bpt id=\"p1\">[</bpt>CStringT::FormatMessage<ept id=\"p1\">](#cstringt__formatmessage)</ept>, which attempts to allocate system memory for the newly formatted string.","pos":[0,148],"source":"`FormatMessageV` calls [CStringT::FormatMessage](#cstringt__formatmessage), which attempts to allocate system memory for the newly formatted string."},{"content":"If this attempt fails, a memory exception is automatically thrown.","pos":[149,215]}]}]},{"pos":[33146,33328],"content":"For more information, see the Windows <bpt id=\"p1\">[</bpt>FormatMessage<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms679351)</ept> function in the <ph id=\"ph1\">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.","source":"For more information, see the Windows [FormatMessage](http://msdn.microsoft.com/library/windows/desktop/ms679351) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]."},{"pos":[33338,33389],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__formatv\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::FormatV","linkify":"<a name=\"cstringt__formatv\"></a>  CStringT::FormatV","source":"<a name=\"cstringt__formatv\"></a>  CStringT::FormatV"},{"content":"Formats a message string using a variable argument list.","pos":[33393,33449]},{"pos":[33531,33541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Points to the format-control string.","pos":[33560,33596]},{"content":"It will be scanned for inserts and formatted accordingly.","pos":[33597,33654]},{"content":"The format string is similar to run-time function <ph id=\"ph1\">`printf`</ph>-style format strings, except it allows for the parameters to be inserted in an arbitrary order.","pos":[33655,33809],"source":" The format string is similar to run-time function `printf`-style format strings, except it allows for the parameters to be inserted in an arbitrary order."},{"content":"Pointer to a list of arguments.","pos":[33826,33857]},{"pos":[33867,33874],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33878,34038],"content":"Writes a formatted string and a variable list of arguments to a <ph id=\"ph1\">`CStringT`</ph> string in the same way that <ph id=\"ph2\">`vsprintf_s`</ph> formats data into a C-style character array.","source":"Writes a formatted string and a variable list of arguments to a `CStringT` string in the same way that `vsprintf_s` formats data into a C-style character array."},{"pos":[34048,34055],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[34059,34156],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#119<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_14.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#119](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_14.cpp)]"},{"pos":[34163,34260],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#120<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_15.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#120](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_15.cpp)]"},{"pos":[34270,34351],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__getenvironmentvariable\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::GetEnvironmentVariable","linkify":"<a name=\"cstringt__getenvironmentvariable\"></a>  CStringT::GetEnvironmentVariable","source":"<a name=\"cstringt__getenvironmentvariable\"></a>  CStringT::GetEnvironmentVariable"},{"content":"Sets the string to the value of the specified environment variable.","pos":[34355,34422]},{"pos":[34491,34501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Pointer to a null-terminated string that specifies the environment variable.","pos":[34517,34593]},{"pos":[34603,34615],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if successful; otherwise 0.","pos":[34619,34654]},{"pos":[34664,34671],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Retrieves the value of the specified variable from the environment block of the calling process.","pos":[34675,34771]},{"content":"The value is in the form of a null-terminated string of characters.","pos":[34772,34839]},{"pos":[34849,34856],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[34860,34957],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#121<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_16.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#121](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_16.cpp)]"},{"pos":[34967,35016],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__insert\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::Insert","linkify":"<a name=\"cstringt__insert\"></a>  CStringT::Insert","source":"<a name=\"cstringt__insert\"></a>  CStringT::Insert"},{"content":"Inserts a single character or a substring at the given index within the string.","pos":[35020,35099]},{"pos":[35217,35227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The index of the character before which the insertion will take place.","pos":[35243,35313]},{"content":"A pointer to the substring to be inserted.","pos":[35329,35371]},{"content":"The character to be inserted.","pos":[35386,35415]},{"pos":[35425,35437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The length of the changed string.","pos":[35441,35474]},{"pos":[35484,35491],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`iIndex`</ph> parameter identifies the first character that will be moved to make room for the character or substring.","pos":[35495,35612],"source":"The `iIndex` parameter identifies the first character that will be moved to make room for the character or substring."},{"content":"If <ph id=\"ph1\">`nIndex`</ph> is zero, the insertion will occur before the entire string.","pos":[35613,35684],"source":" If `nIndex` is zero, the insertion will occur before the entire string."},{"content":"If <ph id=\"ph1\">`nIndex`</ph> is higher than the length of the string, the function will concatenate the present string and the new material provided by either <ph id=\"ph2\">`ch`</ph> or <ph id=\"ph3\">`psz`</ph>.","pos":[35685,35841],"source":" If `nIndex` is higher than the length of the string, the function will concatenate the present string and the new material provided by either `ch` or `psz`."},{"pos":[35851,35858],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[35862,35959],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#122<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_17.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#122](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_17.cpp)]"},{"pos":[35969,36014],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__left\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::Left","linkify":"<a name=\"cstringt__left\"></a>  CStringT::Left","source":"<a name=\"cstringt__left\"></a>  CStringT::Left"},{"pos":[36018,36134],"content":"Extracts the leftmost <ph id=\"ph1\">`nCount`</ph> characters from this <ph id=\"ph2\">`CStringT`</ph> object and returns a copy of the extracted substring.","source":"Extracts the leftmost `nCount` characters from this `CStringT` object and returns a copy of the extracted substring."},{"pos":[36195,36205],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of characters to extract from this <ph id=\"ph1\">`CStringT`</ph> object.","pos":[36221,36285],"source":" The number of characters to extract from this `CStringT` object."},{"pos":[36295,36307],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A <ph id=\"ph1\">`CStringT`</ph> object that contains a copy of the specified range of characters.","pos":[36311,36389],"source":"A `CStringT` object that contains a copy of the specified range of characters."},{"content":"The returned <ph id=\"ph1\">`CStringT`</ph> object may be empty.","pos":[36390,36434],"source":" The returned `CStringT` object may be empty."},{"pos":[36444,36451],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <ph id=\"ph1\">`nCount`</ph> exceeds the string length, then the entire string is extracted.","pos":[36455,36530],"source":"If `nCount` exceeds the string length, then the entire string is extracted."},{"content":"<ph id=\"ph1\">`Left`</ph> is similar to the Basic <ph id=\"ph2\">`Left`</ph> function.","pos":[36531,36578],"source":"`Left` is similar to the Basic `Left` function."},{"pos":[36585,36754],"content":"For multi-byte character sets (MBCS), <ph id=\"ph1\">`nCount`</ph> treats each 8-bit sequence as a character, so that <ph id=\"ph2\">`nCount`</ph> returns the number of multi-byte characters multiplied by two.","source":"For multi-byte character sets (MBCS), `nCount` treats each 8-bit sequence as a character, so that `nCount` returns the number of multi-byte characters multiplied by two."},{"pos":[36764,36771],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[36775,36872],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#123<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_18.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#123](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_18.cpp)]"},{"pos":[36882,36939],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__loadstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::LoadString","linkify":"<a name=\"cstringt__loadstring\"></a>  CStringT::LoadString","source":"<a name=\"cstringt__loadstring\"></a>  CStringT::LoadString"},{"pos":[36943,37032],"content":"Reads a Windows string resource, identified by <ph id=\"ph1\">`nID`</ph>, into an existing <ph id=\"ph2\">`CStringT`</ph> object.","source":"Reads a Windows string resource, identified by `nID`, into an existing `CStringT` object."},{"pos":[37233,37243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A handle to the instance of the module.","pos":[37262,37301]},{"content":"A Windows string resource ID.","pos":[37317,37346]},{"content":"The language of the string resource.","pos":[37370,37406]},{"pos":[37416,37428],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Nonzero if resource load was successful; otherwise 0.","pos":[37432,37485]},{"pos":[37495,37502],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[37506,37626],"content":"Loads the string resource ( <ph id=\"ph1\">`nID`</ph>) from the specified module ( <ph id=\"ph2\">`hInstance`</ph>) using the specified language ( <ph id=\"ph3\">`wLanguage`</ph>).","source":"Loads the string resource ( `nID`) from the specified module ( `hInstance`) using the specified language ( `wLanguage`)."},{"pos":[37636,37643],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[37647,37744],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#124<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_19.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#124](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_19.cpp)]"},{"pos":[37754,37809],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__makelower\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::MakeLower","linkify":"<a name=\"cstringt__makelower\"></a>  CStringT::MakeLower","source":"<a name=\"cstringt__makelower\"></a>  CStringT::MakeLower"},{"pos":[37813,37866],"content":"Converts the <ph id=\"ph1\">`CStringT`</ph> object to a lowercase string.","source":"Converts the `CStringT` object to a lowercase string."},{"pos":[37914,37926],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resulting lowercase string.","pos":[37930,37961]},{"pos":[37971,37978],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[37982,38079],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#125<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_20.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#125](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_20.cpp)]"},{"pos":[38089,38148],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__makereverse\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::MakeReverse","linkify":"<a name=\"cstringt__makereverse\"></a>  CStringT::MakeReverse","source":"<a name=\"cstringt__makereverse\"></a>  CStringT::MakeReverse"},{"pos":[38152,38214],"content":"Reverses the order of the characters in the <ph id=\"ph1\">`CStringT`</ph> object.","source":"Reverses the order of the characters in the `CStringT` object."},{"pos":[38264,38276],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resulting reversed string.","pos":[38280,38310]},{"pos":[38320,38327],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[38331,38428],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#126<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_21.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#126](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_21.cpp)]"},{"pos":[38438,38493],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__makeupper\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::MakeUpper","linkify":"<a name=\"cstringt__makeupper\"></a>  CStringT::MakeUpper","source":"<a name=\"cstringt__makeupper\"></a>  CStringT::MakeUpper"},{"pos":[38497,38551],"content":"Converts the <ph id=\"ph1\">`CStringT`</ph> object to an uppercase string.","source":"Converts the `CStringT` object to an uppercase string."},{"pos":[38599,38611],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resulting uppercase string.","pos":[38615,38646]},{"pos":[38656,38663],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38673,38680],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[38684,38781],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#127<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_22.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#127](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_22.cpp)]"},{"pos":[38791,38834],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__mid\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::Mid","linkify":"<a name=\"cstringt__mid\"></a>  CStringT::Mid","source":"<a name=\"cstringt__mid\"></a>  CStringT::Mid"},{"pos":[38838,38961],"content":"Extracts a substring of length <ph id=\"ph1\">`nCount`</ph> characters from this <ph id=\"ph2\">`CStringT`</ph> object, starting at position <ph id=\"ph3\">`iFirst`</ph> (zero-based).","source":"Extracts a substring of length `nCount` characters from this `CStringT` object, starting at position `iFirst` (zero-based)."},{"pos":[39084,39094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The zero-based index of the first character in this <ph id=\"ph1\">`CStringT`</ph> object that is to be included in the extracted substring.","pos":[39110,39230],"source":" The zero-based index of the first character in this `CStringT` object that is to be included in the extracted substring."},{"content":"The number of characters to extract from this <ph id=\"ph1\">`CStringT`</ph> object.","pos":[39249,39313],"source":" The number of characters to extract from this `CStringT` object."},{"content":"If this parameter is not supplied, then the remainder of the string is extracted.","pos":[39314,39395]},{"pos":[39405,39417],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A <ph id=\"ph1\">`CStringT`</ph> object that contains a copy of the specified range of characters.","pos":[39421,39499],"source":"A `CStringT` object that contains a copy of the specified range of characters."},{"content":"Note that the returned <ph id=\"ph1\">`CStringT`</ph> object may be empty.","pos":[39500,39554],"source":" Note that the returned `CStringT` object may be empty."},{"pos":[39564,39571],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The function returns a copy of the extracted substring.","pos":[39575,39630]},{"content":"<ph id=\"ph1\">`Mid`</ph> is similar to the Basic Mid function (except that indexes in Basic are one-based).","pos":[39631,39719],"source":"`Mid` is similar to the Basic Mid function (except that indexes in Basic are one-based)."},{"pos":[39726,39892],"content":"For multibyte character sets (MBCS), <ph id=\"ph1\">`nCount`</ph> refers to each 8-bit character; that is, a lead and trail byte in one multibyte character are counted as two characters.","source":"For multibyte character sets (MBCS), `nCount` refers to each 8-bit character; that is, a lead and trail byte in one multibyte character are counted as two characters."},{"pos":[39902,39909],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[39913,40010],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#128<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_23.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#128](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_23.cpp)]"},{"pos":[40020,40075],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__oemtoansi\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::OemToAnsi","linkify":"<a name=\"cstringt__oemtoansi\"></a>  CStringT::OemToAnsi","source":"<a name=\"cstringt__oemtoansi\"></a>  CStringT::OemToAnsi"},{"pos":[40079,40186],"content":"Converts all the characters in this <ph id=\"ph1\">`CStringT`</ph> object from the OEM character set to the ANSI character set.","source":"Converts all the characters in this `CStringT` object from the OEM character set to the ANSI character set."},{"pos":[40229,40236],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40240,40296],"content":"This function is not available if <ph id=\"ph1\">`_UNICODE`</ph> is defined.","source":"This function is not available if `_UNICODE` is defined."},{"pos":[40306,40313],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[40317,40381],"content":"See the example for <bpt id=\"p1\">[</bpt>CStringT::AnsiToOem<ept id=\"p1\">](#cstringt__ansitooem)</ept>.","source":"See the example for [CStringT::AnsiToOem](#cstringt__ansitooem)."},{"pos":[40391,40451],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__operator__add\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::operator +","linkify":"<a name=\"cstringt__operator__add\"></a>  CStringT::operator +","source":"<a name=\"cstringt__operator__add\"></a>  CStringT::operator +"},{"content":"Concatenates two strings or a character and a string.","pos":[40455,40508]},{"pos":[41053,41063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An ANSI or Unicode character to concatenate with a string.","pos":[41076,41134]},{"content":"An ANSI or Unicode character to concatenate with a string.","pos":[41150,41208]},{"content":"A <ph id=\"ph1\">`CStringT`</ph> to concatenate with a string or character.","pos":[41225,41280],"source":" A `CStringT` to concatenate with a string or character."},{"content":"A <ph id=\"ph1\">`CStringT`</ph> to concatenate with a string or character.","pos":[41297,41352],"source":" A `CStringT` to concatenate with a string or character."},{"content":"A pointer to a null-terminated string to concatenate with a string or character.","pos":[41369,41449]},{"content":"A pointer to a string to concatenate with a string or character.","pos":[41466,41530]},{"pos":[41540,41547],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"There are seven overload forms of the <ph id=\"ph1\">`CStringT::operator+`</ph> function.","pos":[41551,41620],"source":"There are seven overload forms of the `CStringT::operator+` function."},{"content":"The first version concatenates two existing <ph id=\"ph1\">`CStringT`</ph> objects.","pos":[41621,41684],"source":" The first version concatenates two existing `CStringT` objects."},{"content":"The next two concatenate a <ph id=\"ph1\">`CStringT`</ph> object and a null-terminated string.","pos":[41685,41759],"source":" The next two concatenate a `CStringT` object and a null-terminated string."},{"content":"The next two concatenate a <ph id=\"ph1\">`CStringT`</ph> object and an ANSI character.","pos":[41760,41827],"source":" The next two concatenate a `CStringT` object and an ANSI character."},{"content":"The last two concatenate a <ph id=\"ph1\">`CStringT`</ph> object and a Unicode character.","pos":[41828,41897],"source":" The last two concatenate a `CStringT` object and a Unicode character."},{"pos":[41905,42156],"content":"[!NOTE]\n Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it. Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results.","leadings":["","> "],"nodes":[{"content":" Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it. Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results.","pos":[8,249],"nodes":[{"content":"Although it is possible to create <ph id=\"ph1\">`CStringT`</ph> instances that contain embedded null characters, we recommend against it.","pos":[1,119],"source":" Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it."},{"content":"Calling methods and operators on <ph id=\"ph1\">`CStringT`</ph> objects that contain embedded null characters can produce unintended results.","pos":[120,241],"source":" Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results."}]}]},{"pos":[42166,42173],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[42177,42274],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#140<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_24.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#140](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_24.cpp)]"},{"pos":[42284,42348],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__operator__add_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::operator +=","linkify":"<a name=\"cstringt__operator__add_eq\"></a>  CStringT::operator +=","source":"<a name=\"cstringt__operator__add_eq\"></a>  CStringT::operator +="},{"content":"Concatenates characters to the end of the string.","pos":[42352,42401]},{"pos":[42958,42968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"str","pos":[42972,42975]},{"content":"A reference to a <ph id=\"ph1\">`CThisSimpleString`</ph> object.","pos":[42979,43023],"source":" A reference to a `CThisSimpleString` object."},{"content":"A boolean specifying whether the project is an MFC DLL or not.","pos":[43043,43105]},{"content":"The string base type.","pos":[43126,43147]},{"content":"A variant object to concatenate to this string.","pos":[43163,43210]},{"content":"An ANSI or Unicode character to concatenate with a string.","pos":[43225,43283]},{"content":"A pointer to the original string being concatenated.","pos":[43302,43354]},{"content":"A <ph id=\"ph1\">`CStringT`</ph> to concatenate to this string.","pos":[43373,43416],"source":" A `CStringT` to concatenate to this string."},{"pos":[43426,43433],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The operator accepts another <ph id=\"ph1\">`CStringT`</ph> object, a character pointer, or a single character.","pos":[43437,43528],"source":"The operator accepts another `CStringT` object, a character pointer, or a single character."},{"content":"You should be aware that memory exceptions can occur whenever you use this concatenation operator because new storage can be allocated for characters added to this <ph id=\"ph1\">`CStringT`</ph> object.","pos":[43529,43711],"source":" You should be aware that memory exceptions can occur whenever you use this concatenation operator because new storage can be allocated for characters added to this `CStringT` object."},{"pos":[43718,43827],"content":"For information on <ph id=\"ph1\">`CThisSimpleString`</ph>, see the Remarks section of <bpt id=\"p1\">[</bpt>CStringT::CStringT<ept id=\"p1\">](#cstringt__cstringt)</ept>.","source":"For information on `CThisSimpleString`, see the Remarks section of [CStringT::CStringT](#cstringt__cstringt)."},{"pos":[43835,44086],"content":"[!NOTE]\n Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it. Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results.","leadings":["","> "],"nodes":[{"content":" Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it. Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results.","pos":[8,249],"nodes":[{"content":"Although it is possible to create <ph id=\"ph1\">`CStringT`</ph> instances that contain embedded null characters, we recommend against it.","pos":[1,119],"source":" Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it."},{"content":"Calling methods and operators on <ph id=\"ph1\">`CStringT`</ph> objects that contain embedded null characters can produce unintended results.","pos":[120,241],"source":" Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results."}]}]},{"pos":[44096,44103],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[44107,44204],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#141<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_25.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#141](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_25.cpp)]"},{"pos":[44214,44277],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__operator__eq_eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::operator ==","linkify":"<a name=\"cstringt__operator__eq_eq\"></a>  CStringT::operator ==","source":"<a name=\"cstringt__operator__eq_eq\"></a>  CStringT::operator =="},{"content":"Determines whether two strings are logically equal.","pos":[44281,44332]},{"pos":[44912,44922],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An ANSI or Unicode character for comparison.","pos":[44935,44979]},{"content":"An ANSI or Unicode character for comparison.","pos":[44995,45039]},{"content":"A <ph id=\"ph1\">`CStringT`</ph> for comparison.","pos":[45056,45084],"source":" A `CStringT` for comparison."},{"content":"A <ph id=\"ph1\">`CStringT`</ph> for comparison.","pos":[45101,45129],"source":" A `CStringT` for comparison."},{"content":"A pointer to a null-terminated string for comparison.","pos":[45146,45199]},{"content":"A pointer to a null-terminated string for comparison.","pos":[45216,45269]},{"pos":[45279,45286],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Tests whether a string or character on the left side is equal to a string or character on the right side, and returns TRUE or FALSE accordingly.","pos":[45290,45434]},{"pos":[45444,45451],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[45455,45552],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#142<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_26.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#142](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_26.cpp)]"},{"pos":[45562,45623],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__operator__neq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::operator !=","linkify":"<a name=\"cstringt__operator__neq\"></a>  CStringT::operator !=","source":"<a name=\"cstringt__operator__neq\"></a>  CStringT::operator !="},{"content":"Determines whether two strings are logically not equal.","pos":[45627,45682]},{"pos":[46262,46272],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"An ANSI or Unicode character to concatenate with a string.","pos":[46285,46343]},{"content":"An ANSI or Unicode character to concatenate with a string.","pos":[46359,46417]},{"content":"A <ph id=\"ph1\">`CStringT`</ph> for comparison.","pos":[46434,46462],"source":" A `CStringT` for comparison."},{"content":"A <ph id=\"ph1\">`CStringT`</ph> for comparison.","pos":[46479,46507],"source":" A `CStringT` for comparison."},{"content":"A pointer to a null-terminated string for comparison.","pos":[46524,46577]},{"content":"A pointer to a null-terminated string for comparison.","pos":[46594,46647]},{"pos":[46657,46664],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Tests if a string or character on the left side is not equal to a string or character on the right side.","pos":[46668,46772]},{"pos":[46782,46789],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[46793,46890],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#143<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_27.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#143](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_27.cpp)]"},{"pos":[46900,46963],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__operator__lt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::operator <ph id=\"ph1\">&amp;lt;</ph>","linkify":"<a name=\"cstringt__operator__lt_\"></a>  CStringT::operator &lt;","source":"<a name=\"cstringt__operator__lt_\"></a>  CStringT::operator &lt;"},{"content":"Determines whether the string on the left side of the operator is less than the string on the right side.","pos":[46967,47072]},{"pos":[47337,47347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CStringT`</ph> for comparison.","pos":[47361,47389],"source":" A `CStringT` for comparison."},{"content":"A <ph id=\"ph1\">`CStringT`</ph> for comparison.","pos":[47406,47434],"source":" A `CStringT` for comparison."},{"content":"A pointer to a null-terminated string for comparison.","pos":[47451,47504]},{"content":"A pointer to a null-terminated string for comparison.","pos":[47521,47574]},{"pos":[47584,47591],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A lexicographical comparison between strings, character by character until:","pos":[47595,47670]},{"content":"It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.","pos":[47680,47823]},{"content":"It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.","pos":[47833,47975]},{"content":"It finds no inequalities and finds that the strings have the same number of characters, and so the strings are equal.","pos":[47985,48102]},{"pos":[48112,48119],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[48123,48220],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#144<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_28.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#144](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_28.cpp)]"},{"pos":[48230,48293],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__operator__gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::operator <ph id=\"ph1\">&amp;gt;</ph>","linkify":"<a name=\"cstringt__operator__gt_\"></a>  CStringT::operator &gt;","source":"<a name=\"cstringt__operator__gt_\"></a>  CStringT::operator &gt;"},{"content":"Determines whether the string on the left side of the operator is greater than the string on the right side.","pos":[48297,48405]},{"pos":[48670,48680],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CStringT`</ph> for comparison.","pos":[48694,48722],"source":" A `CStringT` for comparison."},{"content":"A <ph id=\"ph1\">`CStringT`</ph> for comparison.","pos":[48739,48767],"source":" A `CStringT` for comparison."},{"content":"A pointer to a null-terminated string for comparison.","pos":[48784,48837]},{"content":"A pointer to a null-terminated string for comparison.","pos":[48854,48907]},{"pos":[48917,48924],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A lexicographical comparison between strings, character by character until:","pos":[48928,49003]},{"content":"It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.","pos":[49013,49156]},{"content":"It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.","pos":[49166,49308]},{"content":"It finds no inequalities and finds that the strings have the same number of characters, so the strings are equal.","pos":[49318,49431]},{"pos":[49441,49448],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[49452,49549],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#145<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_29.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#145](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_29.cpp)]"},{"pos":[49559,49626],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__operator__lt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::operator <ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"cstringt__operator__lt__eq\"></a>  CStringT::operator &lt;=","source":"<a name=\"cstringt__operator__lt__eq\"></a>  CStringT::operator &lt;="},{"content":"Determines whether the string on the left side of the operator is less than or equal to the string on the right side.","pos":[49630,49747]},{"pos":[50015,50025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CStringT`</ph> for comparison.","pos":[50039,50067],"source":" A `CStringT` for comparison."},{"content":"A <ph id=\"ph1\">`CStringT`</ph> for comparison.","pos":[50084,50112],"source":" A `CStringT` for comparison."},{"content":"A pointer to a null-terminated string for comparison.","pos":[50129,50182]},{"content":"A pointer to a null-terminated string for comparison.","pos":[50199,50252]},{"pos":[50262,50269],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A lexicographical comparison between strings, character by character until:","pos":[50273,50348]},{"content":"It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.","pos":[50358,50501]},{"content":"It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.","pos":[50511,50653]},{"content":"It finds no inequalities and finds that the strings have the same number of characters, so the strings are equal.","pos":[50663,50776]},{"pos":[50786,50793],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[50797,50894],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#146<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_30.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#146](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_30.cpp)]"},{"pos":[50904,50971],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__operator__gt__eq\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::operator <ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">=</ph>","linkify":"<a name=\"cstringt__operator__gt__eq\"></a>  CStringT::operator &gt;=","source":"<a name=\"cstringt__operator__gt__eq\"></a>  CStringT::operator &gt;="},{"content":"Determines whether the string on the left side of the operator is greater than or equal to the string on the right side.","pos":[50975,51095]},{"pos":[51363,51373],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A <ph id=\"ph1\">`CStringT`</ph> for comparison.","pos":[51387,51415],"source":" A `CStringT` for comparison."},{"content":"A <ph id=\"ph1\">`CStringT`</ph> for comparison.","pos":[51432,51460],"source":" A `CStringT` for comparison."},{"content":"A pointer to a string for comparison.","pos":[51477,51514]},{"content":"A pointer to a string for comparison.","pos":[51531,51568]},{"pos":[51578,51585],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A lexicographical comparison between strings, character by character until:","pos":[51589,51664]},{"content":"It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.","pos":[51674,51817]},{"content":"It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.","pos":[51827,51969]},{"content":"It finds no inequalities and finds that the strings have the same number of characters, so the strings are equal.","pos":[51979,52092]},{"pos":[52102,52109],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[52113,52210],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#147<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_31.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#147](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_31.cpp)]"},{"pos":[52220,52269],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__remove\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::Remove","linkify":"<a name=\"cstringt__remove\"></a>  CStringT::Remove","source":"<a name=\"cstringt__remove\"></a>  CStringT::Remove"},{"content":"Removes all instances of the specified character from the string.","pos":[52273,52338]},{"pos":[52391,52401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The character to be removed from a string.","pos":[52419,52461]},{"pos":[52471,52483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The count of characters removed from the string.","pos":[52487,52535]},{"content":"Zero if the string is not changed.","pos":[52536,52570]},{"pos":[52580,52587],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Comparisons for the character are case sensitive.","pos":[52591,52640]},{"pos":[52650,52657],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[52661,52758],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#129<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_32.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#129](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_32.cpp)]"},{"pos":[52768,52819],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__replace\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::Replace","linkify":"<a name=\"cstringt__replace\"></a>  CStringT::Replace","source":"<a name=\"cstringt__replace\"></a>  CStringT::Replace"},{"content":"There are two versions of <ph id=\"ph1\">`Replace`</ph>.The first version replaces one or more copies of a substring by using another substring.","pos":[52823,52947],"source":"There are two versions of `Replace`.The first version replaces one or more copies of a substring by using another substring."},{"content":"Both substrings are null-terminated.","pos":[52948,52984]},{"content":"The second version replaces one or more copies of a character by using another character.","pos":[52985,53074]},{"content":"Both versions operate on the character data stored in <ph id=\"ph1\">`CStringT`</ph>.","pos":[53075,53140],"source":" Both versions operate on the character data stored in `CStringT`."},{"pos":[53270,53280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a null-terminated string to be replaced by <ph id=\"ph1\">`pszNew`</ph>.","pos":[53296,53361],"source":" A pointer to a null-terminated string to be replaced by `pszNew`."},{"content":"A pointer to a null-terminated string that replaces <ph id=\"ph1\">`pszOld`</ph>.","pos":[53380,53441],"source":" A pointer to a null-terminated string that replaces `pszOld`."},{"content":"The character to be replaced by <ph id=\"ph1\">`chNew`</ph>.","pos":[53459,53499],"source":" The character to be replaced by `chNew`."},{"content":"The character replacing <ph id=\"ph1\">`chOld`</ph>.","pos":[53517,53549],"source":" The character replacing `chOld`."},{"pos":[53559,53571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the number of replaced instances of the character or substring, or zero if the string is not changed.","pos":[53575,53684]},{"pos":[53694,53701],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`Replace`</ph> can change the string length because <ph id=\"ph2\">`pszNew`</ph> and <ph id=\"ph3\">`pszOld`</ph> do not have to be the same length, and several copies of the old substring can be changed to the new one.","pos":[53705,53879],"source":"`Replace` can change the string length because `pszNew` and `pszOld` do not have to be the same length, and several copies of the old substring can be changed to the new one."},{"content":"The function performs a case-sensitive match.","pos":[53880,53925]},{"pos":[53932,54007],"content":"Examples of <ph id=\"ph1\">`CStringT`</ph> instances are <ph id=\"ph2\">`CString`</ph>, <ph id=\"ph3\">`CStringA`</ph>, and <ph id=\"ph4\">`CStringW`</ph>.","source":"Examples of `CStringT` instances are `CString`, `CStringA`, and `CStringW`."},{"content":"For <ph id=\"ph1\">`CStringA`</ph>, <ph id=\"ph2\">`Replace`</ph> works with ANSI or multibyte (MBCS) characters.","pos":[54014,54087],"source":"For `CStringA`, `Replace` works with ANSI or multibyte (MBCS) characters."},{"content":"For <ph id=\"ph1\">`CStringW`</ph>, <ph id=\"ph2\">`Replace`</ph> works with wide characters.","pos":[54088,54141],"source":" For `CStringW`, `Replace` works with wide characters."},{"pos":[54148,54282],"content":"For <ph id=\"ph1\">`CString`</ph>, the character data type is selected at compile time, based on whether the constants in the following table are defined.","source":"For `CString`, the character data type is selected at compile time, based on whether the constants in the following table are defined."},{"content":"Defined Constant","pos":[54289,54305]},{"content":"Character Data Type","pos":[54306,54325]},{"content":"Wide characters","pos":[54394,54409]},{"content":"Multi-byte characters","pos":[54422,54443]},{"content":"Neither","pos":[54448,54455]},{"content":"Single-byte characters","pos":[54456,54478]},{"content":"Both","pos":[54483,54487]},{"content":"Undefined","pos":[54488,54497]},{"pos":[54508,54515],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[54519,54616],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#200<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_33.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#200](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_33.cpp)]"},{"pos":[54626,54685],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__reversefind\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::ReverseFind","linkify":"<a name=\"cstringt__reversefind\"></a>  CStringT::ReverseFind","source":"<a name=\"cstringt__reversefind\"></a>  CStringT::ReverseFind"},{"pos":[54689,54755],"content":"Searches this <ph id=\"ph1\">`CStringT`</ph> object for the last match of a character.","source":"Searches this `CStringT` object for the last match of a character."},{"pos":[54821,54831],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The character to search for.","pos":[54843,54871]},{"pos":[54881,54893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54897,55040],"content":"The zero-based index of the last character in this <ph id=\"ph1\">`CStringT`</ph> object that matches the requested character, or –1 if the character is not found.","source":"The zero-based index of the last character in this `CStringT` object that matches the requested character, or –1 if the character is not found."},{"pos":[55050,55057],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[55061,55120],"content":"The function is similar to the run-time function <ph id=\"ph1\">`strrchr`</ph>.","source":"The function is similar to the run-time function `strrchr`."},{"pos":[55130,55137],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[55141,55238],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#130<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_34.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#130](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_34.cpp)]"},{"pos":[55248,55295],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__right\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::Right","linkify":"<a name=\"cstringt__right\"></a>  CStringT::Right","source":"<a name=\"cstringt__right\"></a>  CStringT::Right"},{"pos":[55299,55432],"content":"Extracts the last (that is, rightmost) <ph id=\"ph1\">`nCount`</ph> characters from this <ph id=\"ph2\">`CStringT`</ph> object and returns a copy of the extracted substring.","source":"Extracts the last (that is, rightmost) `nCount` characters from this `CStringT` object and returns a copy of the extracted substring."},{"pos":[55494,55504],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The number of characters to extract from this <ph id=\"ph1\">`CStringT`</ph> object.","pos":[55520,55584],"source":" The number of characters to extract from this `CStringT` object."},{"pos":[55594,55606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A <ph id=\"ph1\">`CStringT`</ph> object that contains a copy of the specified range of characters.","pos":[55610,55688],"source":"A `CStringT` object that contains a copy of the specified range of characters."},{"content":"Note that the returned <ph id=\"ph1\">`CStringT`</ph> object can be empty.","pos":[55689,55743],"source":" Note that the returned `CStringT` object can be empty."},{"pos":[55753,55760],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If <ph id=\"ph1\">`nCount`</ph> exceeds the string length, then the entire string is extracted.","pos":[55764,55839],"source":"If `nCount` exceeds the string length, then the entire string is extracted."},{"content":"<ph id=\"ph1\">`Right`</ph> is similar to the Basic <ph id=\"ph2\">`Right`</ph> function (except that indexes in Basic are zero-based).","pos":[55840,55935],"source":"`Right` is similar to the Basic `Right` function (except that indexes in Basic are zero-based)."},{"pos":[55942,56108],"content":"For multibyte character sets (MBCS), <ph id=\"ph1\">`nCount`</ph> refers to each 8-bit character; that is, a lead and trail byte in one multibyte character are counted as two characters.","source":"For multibyte character sets (MBCS), `nCount` refers to each 8-bit character; that is, a lead and trail byte in one multibyte character are counted as two characters."},{"pos":[56118,56125],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[56129,56226],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#131<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_35.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#131](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_35.cpp)]"},{"pos":[56236,56297],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__setsysstring\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::SetSysString","linkify":"<a name=\"cstringt__setsysstring\"></a>  CStringT::SetSysString","source":"<a name=\"cstringt__setsysstring\"></a>  CStringT::SetSysString"},{"pos":[56301,56435],"content":"Reallocates the <ph id=\"ph1\">`BSTR`</ph> pointed to by <ph id=\"ph2\">`pbstr`</ph> and copies the contents of the <ph id=\"ph3\">`CStringT`</ph> object into it, including the <ph id=\"ph4\">`NULL`</ph> character.","source":"Reallocates the `BSTR` pointed to by `pbstr` and copies the contents of the `CStringT` object into it, including the `NULL` character."},{"pos":[56501,56511],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A pointer to a character string.","pos":[56526,56558]},{"pos":[56568,56580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new string.","pos":[56584,56599]},{"pos":[56609,56616],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Depending on the contents of the <ph id=\"ph1\">`CStringT`</ph> object, the value of the <ph id=\"ph2\">`BSTR`</ph> referenced by <ph id=\"ph3\">`pbstr`</ph> can change.","pos":[56620,56729],"source":"Depending on the contents of the `CStringT` object, the value of the `BSTR` referenced by `pbstr` can change."},{"content":"The function throws a <ph id=\"ph1\">`CMemoryException`</ph> if insufficient memory exists.","pos":[56730,56801],"source":" The function throws a `CMemoryException` if insufficient memory exists."},{"content":"This function is normally used to change the value of strings passed by reference for Automation.","pos":[56808,56905]},{"pos":[56915,56922],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[56926,57023],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#132<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_36.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#132](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_36.cpp)]"},{"pos":[57033,57096],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__spanexcluding\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::SpanExcluding","linkify":"<a name=\"cstringt__spanexcluding\"></a>  CStringT::SpanExcluding","source":"<a name=\"cstringt__spanexcluding\"></a>  CStringT::SpanExcluding"},{"pos":[57100,57237],"content":"Extracts characters from the string, starting with the first character, that are not in the set of characters identified by <ph id=\"ph1\">`pszCharSet`</ph>.","source":"Extracts characters from the string, starting with the first character, that are not in the set of characters identified by `pszCharSet`."},{"pos":[57314,57324],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A string interpreted as a set of characters.","pos":[57344,57388]},{"pos":[57398,57410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A substring that contains characters in the string that are not in <ph id=\"ph1\">`pszCharSet`</ph>, beginning with the first character in the string and ending with the first character found in the string that is also in <ph id=\"ph2\">`pszCharSet`</ph> (that is, starting with the first character in the string and up to but excluding the first character in the string that is found <ph id=\"ph3\">`pszCharSet`</ph>).","pos":[57414,57773],"source":"A substring that contains characters in the string that are not in `pszCharSet`, beginning with the first character in the string and ending with the first character found in the string that is also in `pszCharSet` (that is, starting with the first character in the string and up to but excluding the first character in the string that is found `pszCharSet`)."},{"content":"It returns the entire string if no character in <ph id=\"ph1\">`pszCharSet`</ph> is found in the string.","pos":[57774,57858],"source":" It returns the entire string if no character in `pszCharSet` is found in the string."},{"pos":[57868,57875],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`SpanExcluding`</ph> extracts and returns all characters preceding the first occurrence of a character from <ph id=\"ph2\">`pszCharSet`</ph> (in other words, the character from <ph id=\"ph3\">`pszCharSet`</ph> and all characters following it in the string, are not returned).","pos":[57879,58109],"source":"`SpanExcluding` extracts and returns all characters preceding the first occurrence of a character from `pszCharSet` (in other words, the character from `pszCharSet` and all characters following it in the string, are not returned)."},{"content":"If no character from <ph id=\"ph1\">`pszCharSet`</ph> is found in the string, then <ph id=\"ph2\">`SpanExcluding`</ph> returns the entire string.","pos":[58110,58215],"source":" If no character from `pszCharSet` is found in the string, then `SpanExcluding` returns the entire string."},{"pos":[58225,58232],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[58236,58333],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#133<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_37.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#133](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_37.cpp)]"},{"pos":[58343,58406],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__spanincluding\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::SpanIncluding","linkify":"<a name=\"cstringt__spanincluding\"></a>  CStringT::SpanIncluding","source":"<a name=\"cstringt__spanincluding\"></a>  CStringT::SpanIncluding"},{"pos":[58410,58543],"content":"Extracts characters from the string, starting with the first character, that are in the set of characters identified by <ph id=\"ph1\">`pszCharSet`</ph>.","source":"Extracts characters from the string, starting with the first character, that are in the set of characters identified by `pszCharSet`."},{"pos":[58620,58630],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A string interpreted as a set of characters.","pos":[58650,58694]},{"pos":[58704,58716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[58720,59033],"content":"A substring that contains characters in the string that are in <ph id=\"ph1\">`pszCharSet`</ph>, beginning with the first character in the string and ending when a character is found in the string that is not in <ph id=\"ph2\">`pszCharSet.``SpanIncluding`</ph> returns an empty substring if the first character in the string is not in the specified set.","source":"A substring that contains characters in the string that are in `pszCharSet`, beginning with the first character in the string and ending when a character is found in the string that is not in `pszCharSet.``SpanIncluding` returns an empty substring if the first character in the string is not in the specified set."},{"pos":[59043,59050],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the first character of the string is not in the character set, then <ph id=\"ph1\">`SpanIncluding`</ph> returns an empty string.","pos":[59054,59165],"source":"If the first character of the string is not in the character set, then `SpanIncluding` returns an empty string."},{"content":"Otherwise, it returns a sequence of consecutive characters that are in the set.","pos":[59166,59245]},{"pos":[59255,59262],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[59266,59363],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#134<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_38.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#134](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_38.cpp)]"},{"pos":[59373,59426],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__tokenize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::Tokenize","linkify":"<a name=\"cstringt__tokenize\"></a>  CStringT::Tokenize","source":"<a name=\"cstringt__tokenize\"></a>  CStringT::Tokenize"},{"content":"Finds the next token in a target string","pos":[59430,59469]},{"pos":[59564,59574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A string containing token delimiters.","pos":[59593,59630]},{"content":"The order of these delimiters is not important.","pos":[59631,59678]},{"content":"The zero-based index to begin the search.","pos":[59697,59738]},{"pos":[59748,59760],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59764,59819],"content":"A <ph id=\"ph1\">`CStringT`</ph> object containing the current token value.","source":"A `CStringT` object containing the current token value."},{"pos":[59829,59836],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Tokenize`</ph> function finds the next token in the target string.","pos":[59840,59906],"source":"The `Tokenize` function finds the next token in the target string."},{"content":"The set of characters in <ph id=\"ph1\">`pszTokens`</ph> specifies possible delimiters of the token to be found.","pos":[59907,59999],"source":" The set of characters in `pszTokens` specifies possible delimiters of the token to be found."},{"content":"On each call to <ph id=\"ph1\">`Tokenize`</ph> the function starts at <ph id=\"ph2\">`iStart`</ph>, skips leading delimiters, and returns a <ph id=\"ph3\">`CStringT`</ph> object containing the current token, which is the string of characters up to the next delimiter character.","pos":[60000,60217],"source":" On each call to `Tokenize` the function starts at `iStart`, skips leading delimiters, and returns a `CStringT` object containing the current token, which is the string of characters up to the next delimiter character."},{"content":"The value of <ph id=\"ph1\">`iStart`</ph> is updated to be the position following the ending delimiter character, or -1 if the end of the string was reached.","pos":[60218,60355],"source":" The value of `iStart` is updated to be the position following the ending delimiter character, or -1 if the end of the string was reached."},{"content":"More tokens can be broken out of the remainder of the target string by a series of calls to <ph id=\"ph1\">`Tokenize`</ph>, using <ph id=\"ph2\">`iStart`</ph> to keep track of where in the string the next token is to be read.","pos":[60356,60541],"source":" More tokens can be broken out of the remainder of the target string by a series of calls to `Tokenize`, using `iStart` to keep track of where in the string the next token is to be read."},{"content":"When there are no more tokens the function will return an empty string and <ph id=\"ph1\">`iStart`</ph> will be set to -1.","pos":[60542,60644],"source":" When there are no more tokens the function will return an empty string and `iStart` will be set to -1."},{"pos":[60651,60905],"content":"Unlike the CRT tokenize functions like <bpt id=\"p1\">[</bpt>strtok_s, _strtok_s_l, wcstok_s, _wcstok_s_l, _mbstok_s, _mbstok_s_l<ept id=\"p1\">](../../c-runtime-library/reference/strtok-s-strtok-s-l-wcstok-s-wcstok-s-l-mbstok-s-mbstok-s-l.md)</ept>, <ph id=\"ph1\">`Tokenize`</ph> does not modify the target string.","source":"Unlike the CRT tokenize functions like [strtok_s, _strtok_s_l, wcstok_s, _wcstok_s_l, _mbstok_s, _mbstok_s_l](../../c-runtime-library/reference/strtok-s-strtok-s-l-wcstok-s-wcstok-s-l-mbstok-s-mbstok-s-l.md), `Tokenize` does not modify the target string."},{"pos":[60915,60922],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[60926,61023],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#135<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_39.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#135](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_39.cpp)]"},{"pos":[61033,61040],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The output from this example is as follows:","pos":[61044,61087]},{"pos":[61191,61236],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__trim\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::Trim","linkify":"<a name=\"cstringt__trim\"></a>  CStringT::Trim","source":"<a name=\"cstringt__trim\"></a>  CStringT::Trim"},{"content":"Trims leading and trailing characters from the string.","pos":[61240,61294]},{"pos":[61406,61416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The target character to be trimmed.","pos":[61434,61469]},{"content":"A pointer to a string containing the target characters to be trimmed.","pos":[61492,61561]},{"content":"All leading and trailing occurrences of characters in <ph id=\"ph1\">`pszTarget`</ph> will be trimmed from the <ph id=\"ph2\">`CStringT`</ph> object.","pos":[61562,61671],"source":" All leading and trailing occurrences of characters in `pszTarget` will be trimmed from the `CStringT` object."},{"pos":[61681,61693],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the trimmed string.","pos":[61697,61724]},{"pos":[61734,61741],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Removes all leading and trailing occurrences of one of the following:","pos":[61745,61814]},{"pos":[61824,61862],"content":"The character specified by <ph id=\"ph1\">`chTarget.`</ph>","source":"The character specified by `chTarget.`"},{"pos":[61872,61933],"content":"All characters found in the string specified by <ph id=\"ph1\">`pszTargets.`</ph>","source":"All characters found in the string specified by `pszTargets.`"},{"content":"Whitespace.","pos":[61943,61954]},{"pos":[61964,61971],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[61975,62072],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#136<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_40.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#136](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_40.cpp)]"},{"pos":[62082,62089],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The output from this example is as follows:","pos":[62093,62136]},{"pos":[62269,62322],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__trimleft\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::TrimLeft","linkify":"<a name=\"cstringt__trimleft\"></a>  CStringT::TrimLeft","source":"<a name=\"cstringt__trimleft\"></a>  CStringT::TrimLeft"},{"content":"Trims leading characters from the string.","pos":[62326,62367]},{"pos":[62491,62501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The target character to be trimmed.","pos":[62519,62554]},{"content":"A pointer to a string containing the target characters to be trimmed.","pos":[62577,62646]},{"content":"All leading occurrences of characters in <ph id=\"ph1\">`pszTarget`</ph> will be trimmed from the <ph id=\"ph2\">`CStringT`</ph> object.","pos":[62647,62743],"source":" All leading occurrences of characters in `pszTarget` will be trimmed from the `CStringT` object."},{"pos":[62753,62765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resulting trimmed string.","pos":[62769,62798]},{"pos":[62808,62815],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Removes all leading and trailing occurrences of one of the following:","pos":[62819,62888]},{"pos":[62898,62936],"content":"The character specified by <ph id=\"ph1\">`chTarget.`</ph>","source":"The character specified by `chTarget.`"},{"pos":[62946,63007],"content":"All characters found in the string specified by <ph id=\"ph1\">`pszTargets.`</ph>","source":"All characters found in the string specified by `pszTargets.`"},{"content":"Whitespace.","pos":[63017,63028]},{"pos":[63038,63045],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[63049,63146],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#137<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_41.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#137](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_41.cpp)]"},{"pos":[63156,63211],"content":"<bpt id=\"p1\">&lt;a name=\"cstringt__trimright\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  CStringT::TrimRight","linkify":"<a name=\"cstringt__trimright\"></a>  CStringT::TrimRight","source":"<a name=\"cstringt__trimright\"></a>  CStringT::TrimRight"},{"content":"Trims trailing characters from the string.","pos":[63215,63257]},{"pos":[63384,63394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The target character to be trimmed.","pos":[63412,63447]},{"content":"A pointer to a string containing the target characters to be trimmed.","pos":[63470,63539]},{"content":"All trailing occurrences of characters in <ph id=\"ph1\">`pszTarget`</ph> will be trimmed from the <ph id=\"ph2\">`CStringT`</ph> object.","pos":[63540,63637],"source":" All trailing occurrences of characters in `pszTarget` will be trimmed from the `CStringT` object."},{"pos":[63647,63659],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63663,63726],"content":"Returns the <ph id=\"ph1\">`CStringT`</ph> object that contains the trimmed string.","source":"Returns the `CStringT` object that contains the trimmed string."},{"pos":[63736,63743],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Removes trailing occurrences of one of the following:","pos":[63747,63800]},{"pos":[63810,63848],"content":"The character specified by <ph id=\"ph1\">`chTarget.`</ph>","source":"The character specified by `chTarget.`"},{"pos":[63858,63919],"content":"All characters found in the string specified by <ph id=\"ph1\">`pszTargets.`</ph>","source":"All characters found in the string specified by `pszTargets.`"},{"content":"Whitespace.","pos":[63929,63940]},{"content":"The <ph id=\"ph1\">`CStringT&amp; TrimRight(XCHAR chTarget)`</ph> version accepts one character parameter and removes all copies of that character from the end of <ph id=\"ph2\">`CStringT`</ph> string data.","pos":[63947,64109],"source":"The `CStringT& TrimRight(XCHAR chTarget)` version accepts one character parameter and removes all copies of that character from the end of `CStringT` string data."},{"content":"It starts from the end of the string and works toward the front.","pos":[64110,64174]},{"content":"It stops when it finds a different character or when <ph id=\"ph1\">`CSTringT`</ph> runs out of character data.","pos":[64175,64266],"source":" It stops when it finds a different character or when `CSTringT` runs out of character data."},{"content":"The <ph id=\"ph1\">`CStringT&amp; TrimRight(PCXSTR pszTargets)`</ph> version accepts a null-terminated string that contains all the different characters to search for.","pos":[64273,64416],"source":"The `CStringT& TrimRight(PCXSTR pszTargets)` version accepts a null-terminated string that contains all the different characters to search for."},{"content":"It removes all copies of those characters in the <ph id=\"ph1\">`CStringT`</ph> object.","pos":[64417,64484],"source":" It removes all copies of those characters in the `CStringT` object."},{"content":"It starts at the end of the string and works toward the front.","pos":[64485,64547]},{"content":"It stops when it finds a character that is not in the target string, or when <ph id=\"ph1\">`CStringT`</ph> runs out of character data.","pos":[64548,64663],"source":" It stops when it finds a character that is not in the target string, or when `CStringT` runs out of character data."},{"content":"It does not try to match the whole target string to a substring at the end of <ph id=\"ph1\">`CStringT`</ph>.","pos":[64664,64753],"source":" It does not try to match the whole target string to a substring at the end of `CStringT`."},{"content":"The <ph id=\"ph1\">`CStringT&amp; TrimRight()`</ph> version requires no parameters.","pos":[64760,64819],"source":"The `CStringT& TrimRight()` version requires no parameters."},{"content":"It trims any trailing whitespace characters from the end of the <ph id=\"ph1\">`CStringT`</ph> string.","pos":[64820,64902],"source":" It trims any trailing whitespace characters from the end of the `CStringT` string."},{"content":"Whitespace characters can be line breaks, spaces, or tabs.","pos":[64903,64961]},{"pos":[64978,64985],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[64989,65086],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>NVC_ATLMFC_Utilities#138<ept id=\"p2\">](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_42.cpp)</ept><ept id=\"p1\">]</ept>","source":"[!code-cpp[NVC_ATLMFC_Utilities#138](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_42.cpp)]"},{"pos":[65095,65103],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hierarchy Chart<ept id=\"p1\">](../../mfc/hierarchy-chart.md)</ept><ph id=\"ph1\"> </ph>","pos":[65107,65155],"source":"[Hierarchy Chart](../../mfc/hierarchy-chart.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ATL/MFC Shared Classes<ept id=\"p1\">](../../atl-mfc-shared/atl-mfc-shared-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[65158,65232],"source":" [ATL/MFC Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>CSimpleStringT Class<ept id=\"p1\">](../../atl-mfc-shared/reference/csimplestringt-class.md)</ept>","pos":[65235,65314],"source":" [CSimpleStringT Class](../../atl-mfc-shared/reference/csimplestringt-class.md)"}],"content":"---\ntitle: \"CStringT Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CString\"\n  - \"CStringT\"\n  - \"ATL::CStringT\"\n  - \"ATL.CStringT\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"strings [C++], in ATL\"\n  - \"shared classes, CStringT\"\n  - \"CStringT class\"\nms.assetid: 7cacc59c-425f-40f1-8f5b-6db921318ec9\ncaps.latest.revision: 33\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CStringT Class\nThis class represents a `CStringT` object.  \n  \n## Syntax  \n  \n```  \n \ntemplate<typename   \nBaseType  , class   \nStringTraits>  \nclass CStringT :   \npublic CSimpleStringT<\nBaseType,   _CSTRING_IMPL_::_MFCDLLTraitsCheck<BaseType,   StringTraits>   ::c_bIsMFCDLLTraits>  \n \n```  \n  \n#### Parameters  \n `BaseType`  \n The character type of the string class. Can be one of the following:  \n  \n- `char` (for ANSI character strings).  \n  \n- `wchar_t` (for Unicode character strings).  \n  \n- **TCHAR** (for both ANSI and Unicode character strings).  \n  \n `StringTraits`  \n Determines if the string class needs C Run-Time (CRT) Library support and where string resources are located. Can be one of the following:  \n  \n- **StrTraitATL< wchar_t** &#124; `char` &#124; **TCHAR, ChTraitsCRT< wchar_t** &#124; `char` &#124; **TCHAR > >**  \n  \n     The class requires CRT support and searches for resource strings in the module specified by `m_hInstResource` (a member of the application's module class).  \n  \n- **StrTraitATL< wchar_t** &#124; `char` &#124; **TCHAR, ChTraitsOS< wchar_t** &#124; `char` &#124; **TCHAR > >**  \n  \n     The class does not require CRT support and searches for resource strings in the module specified by `m_hInstResource` (a member of the application's module class).  \n  \n- **StrTraitMFC< wchar_t** &#124; `char` &#124; **TCHAR, ChTraitsCRT< wchar_t** &#124; `char` &#124; **TCHAR > >**  \n  \n     The class requires CRT support and searches for resource strings using the standard MFC search algorithm.  \n  \n- **StrTraitMFC< wchar_t** &#124; `char` &#124; **TCHAR, ChTraitsOS< wchar_t** &#124; `char` &#124; **TCHAR > >**  \n  \n     The class does not require CRT support and searches for resource strings using the standard MFC search algorithm.  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CStringT::CStringT](#cstringt__cstringt)|Constructs a `CStringT` object in various ways.|  \n|[CStringT::~CStringT](#cstringt___dtorcstringt)|Destroys a `CStringT` object.|  \n  \n### Public Methods  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CStringT::AllocSysString](#cstringt__allocsysstring)|Allocates a `BSTR` from `CStringT` data.|  \n|[CStringT::AnsiToOem](#cstringt__ansitooem)|Makes an in-place conversion from the ANSI character set to the OEM character set.|  \n|[CStringT::AppendFormat](#cstringt__appendformat)|Appends formatted data to an existing `CStringT` object.|  \n|[CStringT::Collate](#cstringt__collate)|Compares two strings (case sensitive, uses locale-specific information).|  \n|[CStringT::CollateNoCase](#cstringt__collatenocase)|Compares two strings (case insensitive, uses locale-specific information).|  \n|[CStringT::Compare](#cstringt__compare)|Compares two strings (case sensitive).|  \n|[CStringT::CompareNoCase](#cstringt__comparenocase)|Compares two strings (case insensitive).|  \n|[CStringT::Delete](#cstringt__delete)|Deletes a character or characters from a string.|  \n|[CStringT::Find](#cstringt__find)|Finds a character or substring inside a larger string.|  \n|[CStringT::FindOneOf](#cstringt__findoneof)|Finds the first matching character from a set.|  \n|[CStringT::Format](#cstringt__format)|Formats the string as `sprintf` does.|  \n|[CStringT::FormatMessage](#cstringt__formatmessage)|Formats a message string.|  \n|[CStringT::FormatMessageV](#cstringt__formatmessagev)|Formats a message string using a variable argument list.|  \n|[CStringT::FormatV](#cstringt__formatv)|Formats the string using a variable list of arguments.|  \n|[CStringT::GetEnvironmentVariable](#cstringt__getenvironmentvariable)|Sets the string to the value of the specified environment variable.|  \n|[CStringT::Insert](#cstringt__insert)|Inserts a single character or a substring at the given index within the string.|  \n|[CStringT::Left](#cstringt__left)|Extracts the left part of a string.|  \n|[CStringT::LoadString](#cstringt__loadstring)|Loads an existing `CStringT` object from a Windows resource.|  \n|[CStringT::MakeLower](#cstringt__makelower)|Converts all the characters in this string to lowercase characters.|  \n|[CStringT::MakeReverse](#cstringt__makereverse)|Reverses the string.|  \n|[CStringT::MakeUpper](#cstringt__makeupper)|Converts all the characters in this string to uppercase characters.|  \n|[CStringT::Mid](#cstringt__mid)|Extracts the middle part of a string.|  \n|[CStringT::OemToAnsi](#cstringt__oemtoansi)|Makes an in-place conversion from the OEM character set to the ANSI character set.|  \n|[CStringT::Remove](#cstringt__remove)|Removes indicated characters from a string.|  \n|[CStringT::Replace](#cstringt__replace)|Replaces indicated characters with other characters.|  \n|[CStringT::ReverseFind](#cstringt__reversefind)|Finds a character inside a larger string; starts from the end.|  \n|[CStringT::Right](#cstringt__right)|Extracts the right part of a string.|  \n|[CStringT::SetSysString](#cstringt__setsysstring)|Sets an existing `BSTR` object with data from a `CStringT` object.|  \n|[CStringT::SpanExcluding](#cstringt__spanexcluding)|Extracts characters from the string, starting with the first character, that are not in the set of characters identified by `pszCharSet`.|  \n|[CStringT::SpanIncluding](#cstringt__spanincluding)|Extracts a substring that contains only the characters in a set.|  \n|[CStringT::Tokenize](#cstringt__tokenize)|Extracts specified tokens in a target string.|  \n|[CStringT::Trim](#cstringt__trim)|Trims all leading and trailing whitespace characters from the string.|  \n|[CStringT::TrimLeft](#cstringt__trimleft)|Trims leading whitespace characters from the string.|  \n|[CStringT::TrimRight](#cstringt__trimright)|Trims trailing whitespace characters from the string.|  \n  \n### Operators  \n  \n|||  \n|-|-|  \n|[operator =](#cstringt__operator__eq)|Assigns a new value to a `CStringT` object.|  \n|[CStringT::operator +](#cstringt__operator__add)|Concatenates two strings or a character and a string.|  \n|[CStringT::operator +=](#cstringt__operator__add_eq)|Concatenates a new string to the end of an existing string.|  \n|[CStringT::operator ==](#cstringt__operator__eq_eq)|Determines if two strings are logically equal.|  \n|[CStringT::operator !=](#cstringt__operator__neq)|Determines if two strings are logically not equal.|  \n|[CStringT::operator &lt;](#cstringt__operator__lt_)|Determines if the string on the left side of the operator is less than to the string on the right side.|  \n|[CStringT::operator &gt;](#cstringt__operator__gt_)|Determines if the string on the left side of the operator is greater than to the string on the right side.|  \n|[CStringT::operator &lt;=](#cstringt__operator__lt__eq)|Determines if the string on the left side of the operator is less than or equal to the string on the right side.|  \n|[CStringT::operator &gt;=](#cstringt__operator__gt__eq)|Determines if the string on the left side of the operator is greater than or equal to the string on the right side.|  \n  \n## Remarks  \n `CStringT` inherits from [CSimpleStringT Class](../../atl-mfc-shared/reference/csimplestringt-class.md). Advanced features, such as character manipulation, ordering, and searching, are implemented by `CStringT`.  \n  \n> [!NOTE]\n> `CStringT` objects are capable of throwing exceptions. This occurs when a `CStringT` object runs out of memory for any reason.  \n  \n A `CStringT` object consists of a variable-length sequence of characters. `CStringT` provides functions and operators using syntax similar to that of Basic. Concatenation and comparison operators, together with simplified memory management, make `CStringT` objects easier to use than ordinary character arrays.  \n  \n> [!NOTE]\n>  Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it. Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results.  \n  \n By using different combinations of the `BaseType` and `StringTraits` parameters, `CStringT` objects can come in the following types, which are have been predefined by the ATL libraries.  \n  \n If using in an ATL application:  \n  \n `CString`, `CStringA`, and `CStringW` are exported from the MFC DLL (MFC90.DLL), never from user DLLs. This is done to prevent `CStringT` from being multiply defined.  \n  \n> [!NOTE]\n>  If you encountered linker errors when exporting a `CString`-derived class from an MFC extension DLL in Visual C++ .NET 2002 and have applied the workaround as described in the Knowledge Base article, \"Linking Errors When You Import CString-Derived Classes\" (Q309801), you should remove the workaround code, because this has been fixed in Visual C++ .NET 2003. You can find Knowledge Base articles on the MSDN Library CD-ROM or at [http://support.microsoft.com/support](http://support.microsoft.com/support).  \n  \n The following string types are available within MFC-based applications:  \n  \n|CStringT type|Declaration|  \n|-------------------|-----------------|  \n|`CStringA`|An ANSI character type string with CRT support.|  \n|`CStringW`|A Unicode character type string with CRT support.|  \n|`CString`|Both ANSI and Unicode character types with CRT support.|  \n  \n The following string types are available in projects where **ATL_CSTRING_NO_CRT** is defined:  \n  \n|CStringT type|Declaration|  \n|-------------------|-----------------|  \n|**CAtlStringA**|An ANSI character type string without CRT support.|  \n|**CAtlStringW**|A Unicode character type string without CRT support.|  \n|**CAtlString**|Both ANSI and Unicode character types without CRT support.|  \n  \n The following string types are available in projects where **ATL_CSTRING_NO_CRT** is not defined:  \n  \n|CStringT type|Declaration|  \n|-------------------|-----------------|  \n|**CAtlStringA**|An ANSI character type string with CRT support.|  \n|**CAtlStringW**|A Unicode character type string with CRT support.|  \n|**CAtlString**|Both ANSI and Unicode character types with CRT support.|  \n  \n `CString` objects also have the following characteristics:  \n  \n- `CStringT` objects can grow as a result of concatenation operations.  \n  \n- `CStringT` objects follow \"value semantics.\" Think of a `CStringT` object as an actual string, not as a pointer to a string.  \n  \n-   You can freely substitute `CStringT` objects for `PCXSTR` function arguments.  \n  \n-   Custom memory management for string buffers. For more information, see [Memory Management and CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).  \n  \n## CStringT Predefined Types  \n Because `CStringT` uses a template argument to define the character type (either [wchar_t](../../c-runtime-library/standard-types.md) or [char](../../c-runtime-library/standard-types.md)) supported, method parameter types can be complicated at times. To simplify this issue, a set of predefined types is defined and used throughout the `CStringT` class. The following table lists the various types:  \n  \n|Name|Description|  \n|----------|-----------------|  \n|`XCHAR`|A single character (either `wchar_t` or `char`) with the same character type as the `CStringT` object.|  \n|**YCHAR**|A single character (either `wchar_t` or `char`) with the opposite character type as the `CStringT` object.|  \n|`PXSTR`|A pointer to a character string (either `wchar_t` or `char`) with the same character type as the `CStringT` object.|  \n|**PYSTR**|A pointer to a character string (either `wchar_t` or `char`) with the opposite character type as the `CStringT` object.|  \n|`PCXSTR`|A pointer to a **const** character string (either `wchar_t` or `char`) with the same character type as the `CStringT` object.|  \n|**PCYSTR**|A pointer to a **const** character string (either `wchar_t` or `char`) with the opposite character type as the `CStringT` object.|  \n  \n> [!NOTE]\n>  Code that previously used undocumented methods of `CString` (such as **AssignCopy**) must be replaced with code that uses the following documented methods of `CStringT` (such as `GetBuffer` or `ReleaseBuffer`). These methods are inherited from `CSimpleStringT`.  \n  \n## Inheritance Hierarchy  \n [CSimpleStringT](../../atl-mfc-shared/reference/csimplestringt-class.md)  \n  \n `CStringT`  \n  \n## Requirements  \n  \n|Header|Use for|  \n|------------|-------------|  \n|cstringt.h|MFC-only string objects|  \n|atlstr.h|Non-MFC string objects|  \n  \n##  <a name=\"cstringt__allocsysstring\"></a>  CStringT::AllocSysString  \n Allocates an Automation-compatible string of the type `BSTR` and copies the contents of the `CStringT` object into it, including the terminating null character.  \n  \n```  \nBSTR AllocSysString() const;\n\n \n```  \n  \n### Return Value  \n The newly allocated string.  \n  \n### Remarks  \n In MFC programs, a [CMemoryException Class](../../mfc/reference/cmemoryexception-class.md) is thrown if insufficient memory exists. In ATL programs, a [CAtlException](../../atl/reference/catlexception-class.md) is thrown. This function is normally used to return strings for Automation.  \n  \n Commonly, if this string is passed to a COM function as an [in] parameter, then this requires the caller to free the string. This can be done by using [SysFreeString](http://msdn.microsoft.com/en-us/8f230ee3-5f6e-4cb9-a910-9c90b754dcd3), as described in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]. For more information, see [Allocating and Releasing Memory for a BSTR](../../atl-mfc-shared/allocating-and-releasing-memory-for-a-bstr.md).  \n  \n For more information about OLE allocation functions in Windows, see [SysAllocString](http://msdn.microsoft.com/en-us/9e0437a2-9b4a-4576-88b0-5cb9d08ca29b) in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n The following example demonstrates the use of `CStringT::AllocSysString`.  \n  \n [!code-cpp[NVC_ATLMFC_Utilities#105](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_1.cpp)]  \n  \n##  <a name=\"cstringt__ansitooem\"></a>  CStringT::AnsiToOem  \n Converts all the characters in this `CStringT` object from the ANSI character set to the OEM character set.  \n  \n```  \nvoid AnsiToOem();\n```  \n  \n### Remarks  \n The function is not available if `_UNICODE` is defined.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#106](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_2.cpp)]  \n  \n##  <a name=\"cstringt__appendformat\"></a>  CStringT::AppendFormat  \n Appends formatted data to an existing `CStringT` object.  \n  \n```  \nvoid __cdecl AppendFormat(\n    PCXSTR pszFormat,  \n [,\n    argument]                ...);\n\nvoid __cdecl AppendFormat(\n    UINT nFormatID,  \n [,\n    argument]                ...);\n```  \n  \n### Parameters  \n `pszFormat`  \n A format-control string.  \n  \n `nFormatID`  \n The string resource identifier that contains the format-control string.  \n  \n `argument`  \n Optional arguments.  \n  \n### Remarks  \n This function formats and appends a series of characters and values in the `CStringT`. Each optional argument (if any) is converted and appended according to the corresponding format specification in `pszFormat` or from the string resource identified by `nFormatID`.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#107](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_3.cpp)]  \n  \n##  <a name=\"cstringt__collate\"></a>  CStringT::Collate  \n Compares two strings using the generic-text function `_tcscoll`.  \n  \n```  \nint Collate(PCXSTR psz) const throw();\n```  \n  \n### Parameters  \n `psz`  \n The other string used for comparison.  \n  \n### Return Value  \n Zero if the strings are identical, < 0 if this `CStringT` object is less than `psz`, or > 0 if this `CStringT` object is greater than `psz`.  \n  \n### Remarks  \n The generic-text function `_tcscoll`, which is defined in TCHAR.H, maps to either `strcoll`, `wcscoll`, or `_mbscoll`, depending on the character set that is defined at compile time. Each function performs a case-sensitive comparison of the strings according to the code page currently in use. For more information, see [strcoll, wcscoll, _mbscoll, _strcoll_l, _wcscoll_l, _mbscoll_l](../../c-runtime-library/reference/strcoll-wcscoll-mbscoll-strcoll-l-wcscoll-l-mbscoll-l.md).  \n  \n##  <a name=\"cstringt__collatenocase\"></a>  CStringT::CollateNoCase  \n Compares two strings using the generic-text function `_tcscoll`.  \n  \n```  \nint CollateNoCase(PCXSTR psz) const throw();\n```  \n  \n### Parameters  \n `psz`  \n The other string used for comparison.  \n  \n### Return Value  \n Zero if the strings are identical (ignoring case), < 0 if this `CStringT` object is less than `psz` (ignoring case), or > 0 if this `CStringT` object is greater than `psz` (ignoring case).  \n  \n### Remarks  \n The generic-text function `_tcscoll`, which is defined in TCHAR.H, maps to either `stricoll`, `wcsicoll`, or `_mbsicoll`, depending on the character set that is defined at compile time. Each function performs a case-insensitive comparison of the strings, according to the code page currently in use. For more information, see [strcoll, wcscoll, _mbscoll, _strcoll_l, _wcscoll_l, _mbscoll_l](../../c-runtime-library/reference/strcoll-wcscoll-mbscoll-strcoll-l-wcscoll-l-mbscoll-l.md).  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#109](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_4.cpp)]  \n  \n##  <a name=\"cstringt__compare\"></a>  CStringT::Compare  \n Compares two strings (case sensitive).  \n  \n```  \nint Compare(PCXSTR psz) const;\n\n \n```  \n  \n### Parameters  \n `psz`  \n The other string used for comparison.  \n  \n### Return Value  \n Zero if the strings are identical, < 0 if this `CStringT` object is less than `psz`, or > 0 if this `CStringT` object is greater than `psz`.  \n  \n### Remarks  \n The generic-text function `_tcscmp`, which is defined in TCHAR.H, maps to either `strcmp`, `wcscmp`, or `_mbscmp`, depending on the character set that is defined at compile time. Each function performs a case-sensitive comparison of the strings and is not affected by locale. For more information, see [strcmp, wcscmp, _mbscmp](../../c-runtime-library/reference/strcmp-wcscmp-mbscmp.md).  \n  \n If the string contains embedded nulls, for purposes of comparison the string is considered to be truncated at the first embedded null character.  \n  \n### Example  \n The following example demonstrates the use of `CStringT::Compare`.  \n  \n [!code-cpp[NVC_ATLMFC_Utilities#110](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_5.cpp)]  \n  \n##  <a name=\"cstringt__comparenocase\"></a>  CStringT::CompareNoCase  \n Compares two strings (case insensitive).  \n  \n```  \nint CompareNoCase(PCXSTR psz) const throw();\n```  \n  \n### Parameters  \n `psz`  \n The other string used for comparison.  \n  \n### Return Value  \n Zero if the strings are identical (ignoring case), <0 if this `CStringT` object is less than `psz` (ignoring case), or >0 if this `CStringT` object is greater than `psz` (ignoring case).  \n  \n### Remarks  \n The generic-text function `_tcsicmp`, which is defined in TCHAR.H, maps to either `_stricmp`, `_wcsicmp` or `_mbsicmp`, depending on the character set that is defined at compile time. Each function performs a case-insensitive comparison of the strings. The comparison depends on the `LC_CTYPE` aspect of the locale but not `LC_COLLATE`. For more information, see [_stricmp, _wcsicmp, _mbsicmp, _stricmp_l, _wcsicmp_l, _mbsicmp_l](../../c-runtime-library/reference/stricmp-wcsicmp-mbsicmp-stricmp-l-wcsicmp-l-mbsicmp-l.md).  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#111](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_6.cpp)]  \n  \n##  <a name=\"cstringt__cstringt\"></a>  CStringT::CStringT  \n Constructs a `CStringT` object.  \n  \n```  \nCStringT() throw() :   \n    CThisSimpleString(\n StringTraits::GetDefaultManager());\n\n \nexplicit CStringT(\n    IAtlStringMgr* pStringMgr) throw() :   \n    CThisSimpleString(\n pStringMgr);\n\n \nCStringT(\n    const VARIANT& varSrc);\n\n \nCStringT(\n    const VARIANT& varSrc,  \n    IAtlStringMgr* pStringMgr);\n\n \nCStringT(\n    const CStringT& strSrc) :   \n    CThisSimpleString(\n strSrc);\n\n operator CSimpleStringT<\n BaseType,   \n !_CSTRING_IMPL_::_MFCDLLTraitsCheck<\n    BaseType, \n    StringTraits>:: c_bIsMFCDLLTraits   \n> &()  \n \ntemplate <\n    bool bMFCDLL  \n>  \nCStringT(\n    const CSimpleStringT<\n    BaseType, \n    bMFCDLL>& strSrc) :   \n    CThisSimpleString(\n strSrc);\n\n \ntemplate <\n    class SystemString  \n>  \nCStringT(\n    SystemString^ pString) :   \n    CThisSimpleString(\n StringTraits::GetDefaultManager());\n\n \nCStringT(\n    const XCHAR* pszSrc) :   \n    CThisSimpleString(\n StringTraits::GetDefaultManager());\n\n \nCSTRING_EXPLICIT CStringT(\n    const YCHAR* pszSrc) :   \n    CThisSimpleString(\n StringTraits::GetDefaultManager());\n\n \nCStringT(\n    LPCSTR pszSrc,  \n    IAtlStringMgr* pStringMgr) :   \n    CThisSimpleString(\n pStringMgr);\n\n \nCStringT(\n    LPCWSTR pszSrc,  \n    IAtlStringMgr* pStringMgr) :   \n    CThisSimpleString(\n pStringMgr);\n\n \nCSTRING_EXPLICIT CStringT(\n    const unsigned char* pszSrc) :   \n    CThisSimpleString(\n StringTraits::GetDefaultManager());\n\n \n/*CSTRING_EXPLICIT*/ CStringT(\n    char* pszSrc) :   \n    CThisSimpleString(\n StringTraits::GetDefaultManager());\n\n \nCSTRING_EXPLICIT CStringT(\n    unsigned char* pszSrc) :   \n    CThisSimpleString(\n StringTraits::GetDefaultManager());\n\n \nCSTRING_EXPLICIT CStringT(\n    wchar_t* pszSrc) :   \n    CThisSimpleString(\n StringTraits::GetDefaultManager());\n\n \nCStringT(\n    const unsigned char* pszSrc,  \n    IAtlStringMgr* pStringMgr) :   \n    CThisSimpleString(\n pStringMgr);\n\n \nCSTRING_EXPLICIT CStringT(\n    char ch,  \n    int nLength = 1) :   \n    CThisSimpleString(\n StringTraits::GetDefaultManager());\n\n \nCSTRING_EXPLICIT CStringT(\n    wchar_t ch,  \n    int nLength = 1) :   \n    CThisSimpleString(\n StringTraits::GetDefaultManager());\n\n \nCStringT(\n    const XCHAR* pch,  \n    int nLength) :   \n    CThisSimpleString(\n pch,   \n    nLength, \n    StringTraits::GetDefaultManager());\n\n \nCStringT(\n    const YCHAR* pch,  \n    int nLength) :   \n    CThisSimpleString(\n StringTraits::GetDefaultManager());\n\n \nCStringT(\n    const XCHAR* pch,  \n    int nLength,  \n    IAtlStringMgr* pStringMgr) :   \n    CThisSimpleString(\n pch,   \n    nLength, \n    pStringMgr);\n\n \nCStringT(\n    const YCHAR* pch,  \n    int nLength,  \n    IAtlStringMgr* pStringMgr) :   \n    CThisSimpleString(\n pStringMgr);\n```  \n  \n### Parameters  \n `pch`  \n A pointer to an array of characters of length `nLength`, not null-terminated.  \n  \n `nLength`  \n A count of the number of characters in `pch`.  \n  \n `ch`  \n A single character.  \n  \n `pszSrc`  \n A null-terminated string to be copied into this `CStringT` object.  \n  \n `pStringMgr`  \n A pointer to the memory manager for the `CStringT` object. For more information on `IAtlStringMgr` and memory management for `CStringT`, see [Memory Management with CStringT](../../atl-mfc-shared/memory-management-with-cstringt.md).  \n  \n `strSrc`  \n An existing `CStringT` object to be copied into this `CStringT` object. For more information on `CThisString` and `CThisSimpleString`, see the Remarks section.  \n  \n `varSrc`  \n A variant object to be copied into this `CStringT` object.  \n  \n `BaseType`  \n The character type of the string class. Can be one of the following:  \n  \n `char` (for ANSI character strings).  \n  \n `wchar_t` (for Unicode character strings).  \n  \n `TCHAR` (for both ANSI and Unicode character strings).  \n  \n `bMFCDLL`  \n Boolean that specifies whether the project is an MFC DLL (TRUE) or not (FALSE).  \n  \n `SystemString`  \n Must be `System::String`, and the project must be compiled with /clr.  \n  \n `pString`  \n A handle for a `CStringT` object.  \n  \n### Remarks  \n Because the constructors copy the input data into new allocated storage, you should be aware that memory exceptions may result. Note that some of these constructors act as conversion functions. This allows you to substitute, for example, an `LPTSTR` where a `CStringT` object is expected.  \n  \n- `CStringT`( `LPCSTR` `lpsz` ): Constructs a Unicode `CStringT` from an ANSI string. You can also use this constructor to load a string resource as shown in the example below.  \n  \n- `CStringT(` `LPCWSTR` `lpsz` ): Constructs a `CStringT` from a Unicode string.  \n  \n- `CStringT`( `const unsigned char*` `psz` ): Allows you to construct a `CStringT` from a pointer to `unsigned char`.  \n  \n> [!NOTE]\n>  Define the **_CSTRING_DISABLE_NARROW_WIDE_CONVERSION** macro to turn off implicit string conversion between [!INCLUDE[vcpransi](../../atl-mfc-shared/reference/includes/vcpransi_md.md)] and [!INCLUDE[TLA#tla_unicode](../../atl-mfc-shared/reference/includes/tlasharptla_unicode_md.md)] strings. The macro excludes from compilation constructors that support conversion.  \n  \n Note that the `strSrc` parameter can be either a `CStringT` or `CThisSimpleString` object. For `CStringT`, use one of its default instantiations ( `CString`, `CStringA`, or `CStringW`); for `CThisSimpleString`, use a `this` pointer. `CThisSimpleString` declares an instance of the [CSimpleStringT Class](../../atl-mfc-shared/reference/csimplestringt-class.md), which is a smaller string class with less built-in functionality than the `CStringT` class.  \n  \n The overload operator `CSimpleStringT<>&()` constructs a `CStringT` object from a `CSimpleStringT` declaration.  \n  \n> [!NOTE]\n>  Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it. Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#112](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_7.cpp)]  \n  \n##  <a name=\"cstringt___dtorcstringt\"></a>  CStringT::~CStringT  \n Destroys the `CStringT` object.  \n  \n```  \n~CStringT() throw();\n```  \n  \n### Remarks  \n Destroys the `CStringT` object.  \n  \n##  <a name=\"cstringt__delete\"></a>  CStringT::Delete  \n Deletes a character or characters from a string starting with the character at the given index.  \n  \n```  \nint Delete(\n    int iIndex,  \n    int nCount = 1);\n```  \n  \n### Parameters  \n `iIndex`  \n The zero-based index of the first character in the `CStringT` object to delete.  \n  \n `nCount`  \n The number of characters to be removed.  \n  \n### Return Value  \n The length of the changed string.  \n  \n### Remarks  \n If `nCount` is longer than the string, the rest of the string will be removed.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#113](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_8.cpp)]  \n  \n```Output  \nBefore: Soccer is best,\n    but hockey is quicker!  \nAfter: Soccer best,\n    but hockey is quicker!  \n```  \n  \n##  <a name=\"cstringt__find\"></a>  CStringT::Find  \n Searches this string for the first match of a character or substring.  \n  \n```  \nint Find(\n    PCXSTR pszSub,  \n    int iStart=0) const throw();\n\nint Find(\n    XCHAR ch,  \n    int iStart=0) const throw();\n```  \n  \n### Parameters  \n `pszSub`  \n A substring to search for.  \n  \n `iStart`  \n The index of the character in the string to begin the search with, or 0 to start from the beginning.  \n  \n `ch`  \n A single character to search for.  \n  \n### Return Value  \n The zero-based index of the first character in this `CStringT` object that matches the requested substring or characters; -1 if the substring or character is not found.  \n  \n### Remarks  \n The function is overloaded to accept both single characters (similar to the run-time function `strchr`) and strings (similar to `strstr`).  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#114](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_9.cpp)]  \n  \n##  <a name=\"cstringt__findoneof\"></a>  CStringT::FindOneOf  \n Searches this string for the first character that matches any character contained in `pszCharSet`.  \n  \n```  \nint FindOneOf(PCXSTR pszCharSet) const throw();\n```  \n  \n### Parameters  \n `pszCharSet`  \n String containing characters for matching.  \n  \n### Return Value  \n The zero-based index of the first character in this string that is also in `pszCharSet`; –1 if there is no match.  \n  \n### Remarks  \n Finds the first occurrence of any of the characters in `pszCharSet`.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#115](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_10.cpp)]  \n  \n##  <a name=\"cstringt__format\"></a>  CStringT::Format  \n Writes formatted data to a `CStringT` in the same way that [sprintf_s](../../c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l.md) formats data into a C-style character array.  \n  \n```  \nvoid __cdecl Format(\n    UINT nFormatID,  \n [,\n    argument]                ...);\n\nvoid __cdecl Format(\n    PCXSTR pszFormat,  \n [,\n    argument]                ...);\n```  \n  \n### Parameters  \n `nFormatID`  \n The string resource identifier that contains the format-control string.  \n  \n `pszFormat`  \n A format-control string.  \n  \n `argument`  \n Optional arguments.  \n  \n### Remarks  \n This function formats and stores a series of characters and values in the `CStringT`. Each optional argument (if any) is converted and output according to the corresponding format specification in `pszFormat` or from the string resource identified by `nFormatID`.  \n  \n The call will fail if the string object itself is offered as a parameter to `Format`. For example, the following code will cause unpredictable results:  \n  \n [!code-cpp[NVC_ATLMFC_Utilities#116](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_11.cpp)]  \n  \n For more information, see [Format Specification Syntax: printf and wprintf Functions](../../c-runtime-library/format-specification-syntax-printf-and-wprintf-functions.md).  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#117](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_12.cpp)]  \n  \n##  <a name=\"cstringt__formatmessage\"></a>  CStringT::FormatMessage  \n Formats a message string.  \n  \n```  \nvoid __cdecl FormatMessage(\n    UINT nFormatID,  \n [,\n    argument]                ...);\n\nvoid __cdecl FormatMessage(\n    PCXSTR pszFormat,  \n [,\n    argument]                ...);\n```  \n  \n### Parameters  \n `nFormatID`  \n The string resource identifier that contains the unformatted message text.  \n  \n `pszFormat`  \n Points to the format-control string. It will be scanned for inserts and formatted accordingly. The format string is similar to run-time function `printf`-style format strings, except it allows for the parameters to be inserted in an arbitrary order.  \n  \n `argument`  \n Optional arguments.  \n  \n### Remarks  \n The function requires a message definition as input. The message definition is determined by `pszFormat` or from the string resource identified by `nFormatID`. The function copies the formatted message text to the `CStringT` object, processing any embedded insert sequences if requested.  \n  \n> [!NOTE]\n> `FormatMessage` attempts to allocate system memory for the newly formatted string. If this attempt fails, a memory exception is automatically thrown.  \n  \n Each insert must have a corresponding parameter following the `pszFormat` or `nFormatID` parameter. Within the message text, several escape sequences are supported for dynamically formatting the message. For more information, see the Windows [FormatMessage](http://msdn.microsoft.com/library/windows/desktop/ms679351) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#118](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_13.cpp)]  \n  \n##  <a name=\"cstringt__formatmessagev\"></a>  CStringT::FormatMessageV  \n Formats a message string using a variable argument list.  \n  \n```  \nvoid FormatMessageV(\n    PCXSTR pszFormat,  \n    va_list* pArgList);\n```  \n  \n### Parameters  \n `pszFormat`  \n Points to the format-control string. It will be scanned for inserts and formatted accordingly. The format string is similar to run-time function `printf`-style format strings, except it allows for the parameters to be inserted in an arbitrary order.  \n  \n `pArgList`  \n Pointer to a list of arguments.  \n  \n### Remarks  \n The function requires a message definition as input, determined by `pszFormat`. The function copies the formatted message text and a variable list of arguments to the `CStringT` object, processing any embedded insert sequences if requested.  \n  \n> [!NOTE]\n> `FormatMessageV` calls [CStringT::FormatMessage](#cstringt__formatmessage), which attempts to allocate system memory for the newly formatted string. If this attempt fails, a memory exception is automatically thrown.  \n  \n For more information, see the Windows [FormatMessage](http://msdn.microsoft.com/library/windows/desktop/ms679351) function in the [!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)].  \n  \n##  <a name=\"cstringt__formatv\"></a>  CStringT::FormatV  \n Formats a message string using a variable argument list.  \n  \n```  \nvoid FormatV(\n    PCXSTR pszFormat,  \n    va_list args);\n```  \n  \n### Parameters  \n `pszFormat`  \n Points to the format-control string. It will be scanned for inserts and formatted accordingly. The format string is similar to run-time function `printf`-style format strings, except it allows for the parameters to be inserted in an arbitrary order.  \n  \n `args`  \n Pointer to a list of arguments.  \n  \n### Remarks  \n Writes a formatted string and a variable list of arguments to a `CStringT` string in the same way that `vsprintf_s` formats data into a C-style character array.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#119](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_14.cpp)]  \n  \n [!code-cpp[NVC_ATLMFC_Utilities#120](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_15.cpp)]  \n  \n##  <a name=\"cstringt__getenvironmentvariable\"></a>  CStringT::GetEnvironmentVariable  \n Sets the string to the value of the specified environment variable.  \n  \n```  \nBOOL GetEnvironmentVariable(PCXSTR pszVar);\n```  \n  \n### Parameters  \n `pszVar`  \n Pointer to a null-terminated string that specifies the environment variable.  \n  \n### Return Value  \n Nonzero if successful; otherwise 0.  \n  \n### Remarks  \n Retrieves the value of the specified variable from the environment block of the calling process. The value is in the form of a null-terminated string of characters.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#121](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_16.cpp)]  \n  \n##  <a name=\"cstringt__insert\"></a>  CStringT::Insert  \n Inserts a single character or a substring at the given index within the string.  \n  \n```  \nint Insert(\n    int iIndex,  \n    PCXSTR psz);\n\nint Insert(\n    int iIndex,  \n    XCHAR ch);\n```  \n  \n### Parameters  \n `iIndex`  \n The index of the character before which the insertion will take place.  \n  \n `psz`  \n A pointer to the substring to be inserted.  \n  \n `ch`  \n The character to be inserted.  \n  \n### Return Value  \n The length of the changed string.  \n  \n### Remarks  \n The `iIndex` parameter identifies the first character that will be moved to make room for the character or substring. If `nIndex` is zero, the insertion will occur before the entire string. If `nIndex` is higher than the length of the string, the function will concatenate the present string and the new material provided by either `ch` or `psz`.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#122](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_17.cpp)]  \n  \n##  <a name=\"cstringt__left\"></a>  CStringT::Left  \n Extracts the leftmost `nCount` characters from this `CStringT` object and returns a copy of the extracted substring.  \n  \n```  \nCStringT Left(int nCount) const;\n\n \n```  \n  \n### Parameters  \n `nCount`  \n The number of characters to extract from this `CStringT` object.  \n  \n### Return Value  \n A `CStringT` object that contains a copy of the specified range of characters. The returned `CStringT` object may be empty.  \n  \n### Remarks  \n If `nCount` exceeds the string length, then the entire string is extracted. `Left` is similar to the Basic `Left` function.  \n  \n For multi-byte character sets (MBCS), `nCount` treats each 8-bit sequence as a character, so that `nCount` returns the number of multi-byte characters multiplied by two.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#123](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_18.cpp)]  \n  \n##  <a name=\"cstringt__loadstring\"></a>  CStringT::LoadString  \n Reads a Windows string resource, identified by `nID`, into an existing `CStringT` object.  \n  \n```  \nBOOL LoadString(\n    HINSTANCE hInstance,  \n    UINT nID,  \n    WORD wLanguageID);\n\nBOOL LoadString(\n    HINSTANCE hInstance,  \n    UINT nID);\n\nBOOL LoadString(\n    UINT nID);\n```  \n  \n### Parameters  \n `hInstance`  \n A handle to the instance of the module.  \n  \n `nID`  \n A Windows string resource ID.  \n  \n `wLanguageID`  \n The language of the string resource.  \n  \n### Return Value  \n Nonzero if resource load was successful; otherwise 0.  \n  \n### Remarks  \n Loads the string resource ( `nID`) from the specified module ( `hInstance`) using the specified language ( `wLanguage`).  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#124](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_19.cpp)]  \n  \n##  <a name=\"cstringt__makelower\"></a>  CStringT::MakeLower  \n Converts the `CStringT` object to a lowercase string.  \n  \n```  \nCStringT& MakeLower();\n```  \n  \n### Return Value  \n The resulting lowercase string.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#125](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_20.cpp)]  \n  \n##  <a name=\"cstringt__makereverse\"></a>  CStringT::MakeReverse  \n Reverses the order of the characters in the `CStringT` object.  \n  \n```  \nCStringT& MakeReverse();\n```  \n  \n### Return Value  \n The resulting reversed string.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#126](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_21.cpp)]  \n  \n##  <a name=\"cstringt__makeupper\"></a>  CStringT::MakeUpper  \n Converts the `CStringT` object to an uppercase string.  \n  \n```  \nCStringT& MakeUpper();\n```  \n  \n### Return Value  \n The resulting uppercase string.  \n  \n### Remarks  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#127](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_22.cpp)]  \n  \n##  <a name=\"cstringt__mid\"></a>  CStringT::Mid  \n Extracts a substring of length `nCount` characters from this `CStringT` object, starting at position `iFirst` (zero-based).  \n  \n```  \nCStringT Mid(\n    int iFirst,  \n    int nCount) const;\n\n \nCStringT Mid(\n    int iFirst) const;\n\n \n```  \n  \n### Parameters  \n `iFirst`  \n The zero-based index of the first character in this `CStringT` object that is to be included in the extracted substring.  \n  \n `nCount`  \n The number of characters to extract from this `CStringT` object. If this parameter is not supplied, then the remainder of the string is extracted.  \n  \n### Return Value  \n A `CStringT` object that contains a copy of the specified range of characters. Note that the returned `CStringT` object may be empty.  \n  \n### Remarks  \n The function returns a copy of the extracted substring. `Mid` is similar to the Basic Mid function (except that indexes in Basic are one-based).  \n  \n For multibyte character sets (MBCS), `nCount` refers to each 8-bit character; that is, a lead and trail byte in one multibyte character are counted as two characters.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#128](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_23.cpp)]  \n  \n##  <a name=\"cstringt__oemtoansi\"></a>  CStringT::OemToAnsi  \n Converts all the characters in this `CStringT` object from the OEM character set to the ANSI character set.  \n  \n```  \nvoid OemToAnsi();\n```  \n  \n### Remarks  \n This function is not available if `_UNICODE` is defined.  \n  \n### Example  \n See the example for [CStringT::AnsiToOem](#cstringt__ansitooem).  \n  \n##  <a name=\"cstringt__operator__add\"></a>  CStringT::operator +  \n Concatenates two strings or a character and a string.  \n  \n```  \nfriend CStringT operator+(\n    const CStringT& str1,  \n    const CStringT& str2);\n\nfriend CStringT operator+(\n    const CStringT& str1,  \n    PCXSTR psz2);\n\nfriend CStringT operator+(\n    PCXSTR psz1  \n    const CStringT& str2,);\n\nfriend CStringT operator+(\n    char ch1  \n    const CStringT& str2,);\n\nfriend CStringT operator+(\n    const CStringT& str1,  \n    char ch2);\n\nfriend CStringT operator+(\n    const CStringT& str1,  \n    wchar_t ch2);\n\nfriend CStringT operator+(\n    wchar_t ch1  \n    const CStringT& str2,);\n```  \n  \n### Parameters  \n `ch1`  \n An ANSI or Unicode character to concatenate with a string.  \n  \n `ch2`  \n An ANSI or Unicode character to concatenate with a string.  \n  \n `str1`  \n A `CStringT` to concatenate with a string or character.  \n  \n `str2`  \n A `CStringT` to concatenate with a string or character.  \n  \n `psz1`  \n A pointer to a null-terminated string to concatenate with a string or character.  \n  \n `psz2`  \n A pointer to a string to concatenate with a string or character.  \n  \n### Remarks  \n There are seven overload forms of the `CStringT::operator+` function. The first version concatenates two existing `CStringT` objects. The next two concatenate a `CStringT` object and a null-terminated string. The next two concatenate a `CStringT` object and an ANSI character. The last two concatenate a `CStringT` object and a Unicode character.  \n  \n> [!NOTE]\n>  Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it. Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#140](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_24.cpp)]  \n  \n##  <a name=\"cstringt__operator__add_eq\"></a>  CStringT::operator +=  \n Concatenates characters to the end of the string.  \n  \n```  \nCStringT& operator+=(\n    const CThisSimpleString& str);\n\ntemplate<\n    bool bMFCDLL  \n>  \nCStringT& operator+=(\n    const const CSimpleStringT<BaseType, bMFCDLL>& str);\n\ntemplate<\n    int t_nSize  \n>  \nCStringT& operator+=(\n    const CStaticString<XCHAR, t_nSize>& strSrc);\n\nCStringT& operator+=(\n    PCXSTR pszSrc);\n\nCStringT& operator+=(\n    PCYSTR pszSrc);\n\nCStringT& operator+=(\n    char ch);\n\nCStringT& operator+=(\n    unsigned char ch);\n\nCStringT& operator+=(\n    wchar_t ch);\n\nCStringT& operator+=(\n    const VARIANT& var);\n```  \n  \n### Parameters  \n str  \n A reference to a `CThisSimpleString` object.  \n  \n `bMFCDLL`  \n A boolean specifying whether the project is an MFC DLL or not.  \n  \n `BaseType`  \n The string base type.  \n  \n `var`  \n A variant object to concatenate to this string.  \n  \n `ch`  \n An ANSI or Unicode character to concatenate with a string.  \n  \n `pszSrc`  \n A pointer to the original string being concatenated.  \n  \n `strSrc`  \n A `CStringT` to concatenate to this string.  \n  \n### Remarks  \n The operator accepts another `CStringT` object, a character pointer, or a single character. You should be aware that memory exceptions can occur whenever you use this concatenation operator because new storage can be allocated for characters added to this `CStringT` object.  \n  \n For information on `CThisSimpleString`, see the Remarks section of [CStringT::CStringT](#cstringt__cstringt).  \n  \n> [!NOTE]\n>  Although it is possible to create `CStringT` instances that contain embedded null characters, we recommend against it. Calling methods and operators on `CStringT` objects that contain embedded null characters can produce unintended results.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#141](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_25.cpp)]  \n  \n##  <a name=\"cstringt__operator__eq_eq\"></a>  CStringT::operator ==  \n Determines whether two strings are logically equal.  \n  \n```  \nfriend bool operator==(\n    const CStringT& str1,  \n    const CStringT& str2) throw();\n\nfriend bool operator==(\n    const CStringT& str1  \n    PCXSTR psz2) throw();\n\nfriend bool operator==(\n    const CStringT& str1,  \n    PCYSTR psz2) throw();\n\nfriend bool operator==(\n    const CStringT& str1,  \n    XCHAR ch2) throw();\n\nfriend bool operator==(\n    PCXSTR psz1  \n    const CStringT& str2) throw();\n\nfriend bool operator==(\n    PCYSTR psz1  \n    const CStringT& str2,) throw();\n\nfriend bool operator==(\n    XCHAR ch1  \n    const CStringT& str2,) throw();\n```  \n  \n### Parameters  \n `ch1`  \n An ANSI or Unicode character for comparison.  \n  \n `ch2`  \n An ANSI or Unicode character for comparison.  \n  \n `str1`  \n A `CStringT` for comparison.  \n  \n `str2`  \n A `CStringT` for comparison.  \n  \n `psz1`  \n A pointer to a null-terminated string for comparison.  \n  \n `psz2`  \n A pointer to a null-terminated string for comparison.  \n  \n### Remarks  \n Tests whether a string or character on the left side is equal to a string or character on the right side, and returns TRUE or FALSE accordingly.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#142](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_26.cpp)]  \n  \n##  <a name=\"cstringt__operator__neq\"></a>  CStringT::operator !=  \n Determines whether two strings are logically not equal.  \n  \n```  \nfriend bool operator!=(\n    const CStringT& str1,  \n    const CStringT& str2) throw();\n\nfriend bool operator!=(\n    const CStringT& str1  \n    PCXSTR psz2) throw();\n\nfriend bool operator!=(\n    const CStringT& str1,  \n    PCYSTR psz2) throw();\n\nfriend bool operator!=(\n    const CStringT& str1,  \n    XCHAR ch2) throw();\n\nfriend bool operator!=(\n    PCXSTR psz1  \n    const CStringT& str2) throw();\n\nfriend bool operator!=(\n    PCYSTR psz1  \n    const CStringT& str2,) throw();\n\nfriend bool operator!=(\n    XCHAR ch1  \n    const CStringT& str2,) throw();\n```  \n  \n### Parameters  \n `ch1`  \n An ANSI or Unicode character to concatenate with a string.  \n  \n `ch2`  \n An ANSI or Unicode character to concatenate with a string.  \n  \n `str1`  \n A `CStringT` for comparison.  \n  \n `str2`  \n A `CStringT` for comparison.  \n  \n `psz1`  \n A pointer to a null-terminated string for comparison.  \n  \n `psz2`  \n A pointer to a null-terminated string for comparison.  \n  \n### Remarks  \n Tests if a string or character on the left side is not equal to a string or character on the right side.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#143](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_27.cpp)]  \n  \n##  <a name=\"cstringt__operator__lt_\"></a>  CStringT::operator &lt;  \n Determines whether the string on the left side of the operator is less than the string on the right side.  \n  \n```  \nfriend bool operator<(\n    const CStringT& str1,  \n    const CStringT& str2) throw();\n\nfriend bool operator<(\n    const CStringT& str1  \n    PCXSTR psz2) throw();\n\nfriend bool operator<(\n    PCXSTR psz1  \n    const CStringT& str2) throw();\n```  \n  \n### Parameters  \n `str1`  \n A `CStringT` for comparison.  \n  \n `str2`  \n A `CStringT` for comparison.  \n  \n `psz1`  \n A pointer to a null-terminated string for comparison.  \n  \n `psz2`  \n A pointer to a null-terminated string for comparison.  \n  \n### Remarks  \n A lexicographical comparison between strings, character by character until:  \n  \n-   It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.  \n  \n-   It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.  \n  \n-   It finds no inequalities and finds that the strings have the same number of characters, and so the strings are equal.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#144](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_28.cpp)]  \n  \n##  <a name=\"cstringt__operator__gt_\"></a>  CStringT::operator &gt;  \n Determines whether the string on the left side of the operator is greater than the string on the right side.  \n  \n```  \nfriend bool operator>(\n    const CStringT& str1,  \n    const CStringT& str2) throw();\n\nfriend bool operator>(\n    const CStringT& str1  \n    PCXSTR psz2) throw();\n\nfriend bool operator>(\n    PCXSTR psz1  \n    const CStringT& str2) throw();\n```  \n  \n### Parameters  \n `str1`  \n A `CStringT` for comparison.  \n  \n `str2`  \n A `CStringT` for comparison.  \n  \n `psz1`  \n A pointer to a null-terminated string for comparison.  \n  \n `psz2`  \n A pointer to a null-terminated string for comparison.  \n  \n### Remarks  \n A lexicographical comparison between strings, character by character until:  \n  \n-   It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.  \n  \n-   It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.  \n  \n-   It finds no inequalities and finds that the strings have the same number of characters, so the strings are equal.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#145](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_29.cpp)]  \n  \n##  <a name=\"cstringt__operator__lt__eq\"></a>  CStringT::operator &lt;=  \n Determines whether the string on the left side of the operator is less than or equal to the string on the right side.  \n  \n```  \nfriend bool operator<=(\n    const CStringT& str1,  \n    const CStringT& str2) throw();\n\nfriend bool operator<=(\n    const CStringT& str1  \n    PCXSTR psz2) throw();\n\nfriend bool operator<=(\n    PCXSTR psz1  \n    const CStringT& str2) throw();\n```  \n  \n### Parameters  \n `str1`  \n A `CStringT` for comparison.  \n  \n `str2`  \n A `CStringT` for comparison.  \n  \n `psz1`  \n A pointer to a null-terminated string for comparison.  \n  \n `psz2`  \n A pointer to a null-terminated string for comparison.  \n  \n### Remarks  \n A lexicographical comparison between strings, character by character until:  \n  \n-   It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.  \n  \n-   It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.  \n  \n-   It finds no inequalities and finds that the strings have the same number of characters, so the strings are equal.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#146](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_30.cpp)]  \n  \n##  <a name=\"cstringt__operator__gt__eq\"></a>  CStringT::operator &gt;=  \n Determines whether the string on the left side of the operator is greater than or equal to the string on the right side.  \n  \n```  \nfriend bool operator>=(\n    const CStringT& str1,  \n    const CStringT& str2) throw();\n\nfriend bool operator>=(\n    const CStringT& str1  \n    PCXSTR psz2) throw();\n\nfriend bool operator>=(\n    PCXSTR psz1  \n    const CStringT& str2) throw();\n```  \n  \n### Parameters  \n `str1`  \n A `CStringT` for comparison.  \n  \n `str2`  \n A `CStringT` for comparison.  \n  \n `psz1`  \n A pointer to a string for comparison.  \n  \n `psz2`  \n A pointer to a string for comparison.  \n  \n### Remarks  \n A lexicographical comparison between strings, character by character until:  \n  \n-   It finds two corresponding characters unequal, and the result of their comparison is taken as the result of the comparison between the strings.  \n  \n-   It finds no inequalities, but one string has more characters than the other, and the shorter string is considered less than the longer string.  \n  \n-   It finds no inequalities and finds that the strings have the same number of characters, so the strings are equal.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#147](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_31.cpp)]  \n  \n##  <a name=\"cstringt__remove\"></a>  CStringT::Remove  \n Removes all instances of the specified character from the string.  \n  \n```  \nint Remove(XCHAR chRemove);\n```  \n  \n### Parameters  \n `chRemove`  \n The character to be removed from a string.  \n  \n### Return Value  \n The count of characters removed from the string. Zero if the string is not changed.  \n  \n### Remarks  \n Comparisons for the character are case sensitive.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#129](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_32.cpp)]  \n  \n##  <a name=\"cstringt__replace\"></a>  CStringT::Replace  \n There are two versions of `Replace`.The first version replaces one or more copies of a substring by using another substring. Both substrings are null-terminated. The second version replaces one or more copies of a character by using another character. Both versions operate on the character data stored in `CStringT`.  \n  \n```  \nint Replace(\n    PCXSTR pszOld,  \n    PCXSTR pszNew);\n\nint Replace(\n    XCHAR chOld,  \n    XCHAR chNew);\n```  \n  \n### Parameters  \n `pszOld`  \n A pointer to a null-terminated string to be replaced by `pszNew`.  \n  \n `pszNew`  \n A pointer to a null-terminated string that replaces `pszOld`.  \n  \n `chOld`  \n The character to be replaced by `chNew`.  \n  \n `chNew`  \n The character replacing `chOld`.  \n  \n### Return Value  \n Returns the number of replaced instances of the character or substring, or zero if the string is not changed.  \n  \n### Remarks  \n `Replace` can change the string length because `pszNew` and `pszOld` do not have to be the same length, and several copies of the old substring can be changed to the new one. The function performs a case-sensitive match.  \n  \n Examples of `CStringT` instances are `CString`, `CStringA`, and `CStringW`.  \n  \n For `CStringA`, `Replace` works with ANSI or multibyte (MBCS) characters. For `CStringW`, `Replace` works with wide characters.  \n  \n For `CString`, the character data type is selected at compile time, based on whether the constants in the following table are defined.  \n  \n|Defined Constant|Character Data Type|  \n|----------------------|-------------------------|  \n|`_UNICODE`|Wide characters|  \n|`_MBCS`|Multi-byte characters|  \n|Neither|Single-byte characters|  \n|Both|Undefined|  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#200](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_33.cpp)]  \n  \n##  <a name=\"cstringt__reversefind\"></a>  CStringT::ReverseFind  \n Searches this `CStringT` object for the last match of a character.  \n  \n```  \nint ReverseFind(XCHAR ch) const throw();\n```  \n  \n### Parameters  \n `ch`  \n The character to search for.  \n  \n### Return Value  \n The zero-based index of the last character in this `CStringT` object that matches the requested character, or –1 if the character is not found.  \n  \n### Remarks  \n The function is similar to the run-time function `strrchr`.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#130](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_34.cpp)]  \n  \n##  <a name=\"cstringt__right\"></a>  CStringT::Right  \n Extracts the last (that is, rightmost) `nCount` characters from this `CStringT` object and returns a copy of the extracted substring.  \n  \n```  \nCStringT Right(int nCount) const;\n\n \n```  \n  \n### Parameters  \n `nCount`  \n The number of characters to extract from this `CStringT` object.  \n  \n### Return Value  \n A `CStringT` object that contains a copy of the specified range of characters. Note that the returned `CStringT` object can be empty.  \n  \n### Remarks  \n If `nCount` exceeds the string length, then the entire string is extracted. `Right` is similar to the Basic `Right` function (except that indexes in Basic are zero-based).  \n  \n For multibyte character sets (MBCS), `nCount` refers to each 8-bit character; that is, a lead and trail byte in one multibyte character are counted as two characters.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#131](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_35.cpp)]  \n  \n##  <a name=\"cstringt__setsysstring\"></a>  CStringT::SetSysString  \n Reallocates the `BSTR` pointed to by `pbstr` and copies the contents of the `CStringT` object into it, including the `NULL` character.  \n  \n```  \nBSTR SetSysString(BSTR* pbstr) const;\n\n \n```  \n  \n### Parameters  \n `pbstr`  \n A pointer to a character string.  \n  \n### Return Value  \n The new string.  \n  \n### Remarks  \n Depending on the contents of the `CStringT` object, the value of the `BSTR` referenced by `pbstr` can change. The function throws a `CMemoryException` if insufficient memory exists.  \n  \n This function is normally used to change the value of strings passed by reference for Automation.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#132](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_36.cpp)]  \n  \n##  <a name=\"cstringt__spanexcluding\"></a>  CStringT::SpanExcluding  \n Extracts characters from the string, starting with the first character, that are not in the set of characters identified by `pszCharSet`.  \n  \n```  \nCStringT SpanExcluding(PCXSTR pszCharSet) const;\n\n \n```  \n  \n### Parameters  \n `pszCharSet`  \n A string interpreted as a set of characters.  \n  \n### Return Value  \n A substring that contains characters in the string that are not in `pszCharSet`, beginning with the first character in the string and ending with the first character found in the string that is also in `pszCharSet` (that is, starting with the first character in the string and up to but excluding the first character in the string that is found `pszCharSet`). It returns the entire string if no character in `pszCharSet` is found in the string.  \n  \n### Remarks  \n `SpanExcluding` extracts and returns all characters preceding the first occurrence of a character from `pszCharSet` (in other words, the character from `pszCharSet` and all characters following it in the string, are not returned). If no character from `pszCharSet` is found in the string, then `SpanExcluding` returns the entire string.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#133](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_37.cpp)]  \n  \n##  <a name=\"cstringt__spanincluding\"></a>  CStringT::SpanIncluding  \n Extracts characters from the string, starting with the first character, that are in the set of characters identified by `pszCharSet`.  \n  \n```  \nCStringT SpanIncluding(PCXSTR pszCharSet) const;\n\n \n```  \n  \n### Parameters  \n `pszCharSet`  \n A string interpreted as a set of characters.  \n  \n### Return Value  \n A substring that contains characters in the string that are in `pszCharSet`, beginning with the first character in the string and ending when a character is found in the string that is not in `pszCharSet.``SpanIncluding` returns an empty substring if the first character in the string is not in the specified set.  \n  \n### Remarks  \n If the first character of the string is not in the character set, then `SpanIncluding` returns an empty string. Otherwise, it returns a sequence of consecutive characters that are in the set.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#134](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_38.cpp)]  \n  \n##  <a name=\"cstringt__tokenize\"></a>  CStringT::Tokenize  \n Finds the next token in a target string  \n  \n```  \nCStringT Tokenize(\n    PCXSTR pszTokens,  \n    int& iStart) const;\n\n \n```  \n  \n### Parameters  \n `pszTokens`  \n A string containing token delimiters. The order of these delimiters is not important.  \n  \n `iStart`  \n The zero-based index to begin the search.  \n  \n### Return Value  \n A `CStringT` object containing the current token value.  \n  \n### Remarks  \n The `Tokenize` function finds the next token in the target string. The set of characters in `pszTokens` specifies possible delimiters of the token to be found. On each call to `Tokenize` the function starts at `iStart`, skips leading delimiters, and returns a `CStringT` object containing the current token, which is the string of characters up to the next delimiter character. The value of `iStart` is updated to be the position following the ending delimiter character, or -1 if the end of the string was reached. More tokens can be broken out of the remainder of the target string by a series of calls to `Tokenize`, using `iStart` to keep track of where in the string the next token is to be read. When there are no more tokens the function will return an empty string and `iStart` will be set to -1.  \n  \n Unlike the CRT tokenize functions like [strtok_s, _strtok_s_l, wcstok_s, _wcstok_s_l, _mbstok_s, _mbstok_s_l](../../c-runtime-library/reference/strtok-s-strtok-s-l-wcstok-s-wcstok-s-l-mbstok-s-mbstok-s-l.md), `Tokenize` does not modify the target string.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#135](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_39.cpp)]  \n  \n### Remarks  \n The output from this example is as follows:  \n  \n `Resulting Token: First`  \n  \n `Resulting Token: Second`  \n  \n `Resulting Token: Third`  \n  \n##  <a name=\"cstringt__trim\"></a>  CStringT::Trim  \n Trims leading and trailing characters from the string.  \n  \n```  \nCStringT& Trim(XCHAR chTarget);\n\nCStringT& Trim(PCXSTR pszTargets);\n\nCStringT& Trim();\n```  \n  \n### Parameters  \n `chTarget`  \n The target character to be trimmed.  \n  \n `pszTargets`  \n A pointer to a string containing the target characters to be trimmed. All leading and trailing occurrences of characters in `pszTarget` will be trimmed from the `CStringT` object.  \n  \n### Return Value  \n Returns the trimmed string.  \n  \n### Remarks  \n Removes all leading and trailing occurrences of one of the following:  \n  \n-   The character specified by `chTarget.`  \n  \n-   All characters found in the string specified by `pszTargets.`  \n  \n-   Whitespace.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#136](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_40.cpp)]  \n  \n### Remarks  \n The output from this example is as follows:  \n  \n `Before: \"******Soccer is best, but liquor is quicker!!!!!\"`  \n  \n `After : \"Soccer is best, but liquor is quicker\"`  \n  \n##  <a name=\"cstringt__trimleft\"></a>  CStringT::TrimLeft  \n Trims leading characters from the string.  \n  \n```  \nCStringT& TrimLeft(XCHAR chTarget);\n\nCStringT& TrimLeft(PCXSTR pszTargets);\n\nCStringT& TrimLeft();\n```  \n  \n### Parameters  \n `chTarget`  \n The target character to be trimmed.  \n  \n `pszTargets`  \n A pointer to a string containing the target characters to be trimmed. All leading occurrences of characters in `pszTarget` will be trimmed from the `CStringT` object.  \n  \n### Return Value  \n The resulting trimmed string.  \n  \n### Remarks  \n Removes all leading and trailing occurrences of one of the following:  \n  \n-   The character specified by `chTarget.`  \n  \n-   All characters found in the string specified by `pszTargets.`  \n  \n-   Whitespace.  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#137](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_41.cpp)]  \n  \n##  <a name=\"cstringt__trimright\"></a>  CStringT::TrimRight  \n Trims trailing characters from the string.  \n  \n```  \nCStringT& TrimRight(XCHAR chTarget);\n\nCStringT& TrimRight(PCXSTR pszTargets);\n\nCStringT& TrimRight();\n```  \n  \n### Parameters  \n `chTarget`  \n The target character to be trimmed.  \n  \n `pszTargets`  \n A pointer to a string containing the target characters to be trimmed. All trailing occurrences of characters in `pszTarget` will be trimmed from the `CStringT` object.  \n  \n### Return Value  \n Returns the `CStringT` object that contains the trimmed string.  \n  \n### Remarks  \n Removes trailing occurrences of one of the following:  \n  \n-   The character specified by `chTarget.`  \n  \n-   All characters found in the string specified by `pszTargets.`  \n  \n-   Whitespace.  \n  \n The `CStringT& TrimRight(XCHAR chTarget)` version accepts one character parameter and removes all copies of that character from the end of `CStringT` string data. It starts from the end of the string and works toward the front. It stops when it finds a different character or when `CSTringT` runs out of character data.  \n  \n The `CStringT& TrimRight(PCXSTR pszTargets)` version accepts a null-terminated string that contains all the different characters to search for. It removes all copies of those characters in the `CStringT` object. It starts at the end of the string and works toward the front. It stops when it finds a character that is not in the target string, or when `CStringT` runs out of character data. It does not try to match the whole target string to a substring at the end of `CStringT`.  \n  \n The `CStringT& TrimRight()` version requires no parameters. It trims any trailing whitespace characters from the end of the `CStringT` string. Whitespace characters can be line breaks, spaces, or tabs.  \n  \n-  \n  \n### Example  \n [!code-cpp[NVC_ATLMFC_Utilities#138](../../atl-mfc-shared/codesnippet/cpp/cstringt-class_42.cpp)]  \n  \n## See Also  \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [ATL/MFC Shared Classes](../../atl-mfc-shared/atl-mfc-shared-classes.md)   \n [CSimpleStringT Class](../../atl-mfc-shared/reference/csimplestringt-class.md)\n\n\n"}