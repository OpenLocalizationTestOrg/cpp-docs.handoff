{"nodes":[{"pos":[12,54],"content":"&lt;istream&gt; operators | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>istream<ph id=\"ph2\">&amp;gt;</ph> operators | Microsoft Docs","pos":[0,42],"source":"&lt;istream&gt; operators | Microsoft Docs"}]},{"pos":[297,322],"content":"&lt;istream&gt; operators","linkify":"&lt;istream&gt; operators","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>istream<ph id=\"ph2\">&amp;gt;</ph> operators","pos":[0,25],"source":"&lt;istream&gt; operators"}]},{"pos":[329,378],"content":"<bpt id=\"p1\">&lt;a name=\"operator_gt__gt_\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>  operator<ph id=\"ph1\">&amp;gt;</ph><ph id=\"ph2\">&amp;gt;</ph>","linkify":"<a name=\"operator_gt__gt_\"></a>  operator&gt;&gt;","source":"<a name=\"operator_gt__gt_\"></a>  operator&gt;&gt;"},{"content":"Extracts characters and strings from the stream.","pos":[382,430]},{"pos":[1329,1339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A character.","pos":[1351,1363]},{"content":"A stream.","pos":[1380,1389]},{"content":"A string.","pos":[1406,1415]},{"content":"A type.","pos":[1432,1439]},{"pos":[1449,1461],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The stream","pos":[1465,1475]},{"pos":[1485,1492],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`basic_istream`</ph> class also defines several extraction operators.","pos":[1496,1564],"source":"The `basic_istream` class also defines several extraction operators."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>basic_istream::operator&gt;&gt;<ept id=\"p1\">](../standard-library/basic-istream-class.md#basic_istream__operator_gt__gt_)</ept>.","pos":[1565,1695],"source":" For more information, see [basic_istream::operator>>](../standard-library/basic-istream-class.md#basic_istream__operator_gt__gt_)."},{"content":"The template function:","pos":[1702,1724]},{"content":"extracts up to <bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept> - 1 elements and stores them in the array starting at _ <bpt id=\"p2\">*</bpt>Str<ept id=\"p2\">*</ept>.","pos":[1867,1948],"source":"extracts up to *N* - 1 elements and stores them in the array starting at _ *Str*."},{"content":"If <ph id=\"ph1\">`Istr`</ph>.","pos":[1949,1959],"source":" If `Istr`."},{"content":"<bpt id=\"p1\">[</bpt>width<ept id=\"p1\">](../standard-library/ios-base-class.md#ios_base__width)</ept> is greater than zero, <bpt id=\"p2\">*</bpt>N<ept id=\"p2\">*</ept> is <ph id=\"ph1\">`Istr`</ph>.","pos":[1960,2059],"source":"[width](../standard-library/ios-base-class.md#ios_base__width) is greater than zero, *N* is `Istr`."},{"content":"<bpt id=\"p1\">**</bpt>width<ept id=\"p1\">**</ept>; otherwise, it is the size of the largest array of <bpt id=\"p2\">**</bpt>Elem<ept id=\"p2\">**</ept> that can be declared.","pos":[2060,2151],"source":"**width**; otherwise, it is the size of the largest array of **Elem** that can be declared."},{"content":"The function always stores the value <bpt id=\"p1\">**</bpt>Elem()<ept id=\"p1\">**</ept> after any extracted elements it stores.","pos":[2152,2239],"source":" The function always stores the value **Elem()** after any extracted elements it stores."},{"content":"Extraction stops early on end of file, on a character with value <bpt id=\"p1\">**</bpt>Elem<ept id=\"p1\">**</ept>(0) (which is not extracted), or on any element (which is not extracted) that would be discarded by <bpt id=\"p2\">[</bpt>ws<ept id=\"p2\">](../standard-library/istream-functions.md#ws)</ept>.","pos":[2240,2463],"source":" Extraction stops early on end of file, on a character with value **Elem**(0) (which is not extracted), or on any element (which is not extracted) that would be discarded by [ws](../standard-library/istream-functions.md#ws)."},{"content":"If the function extracts no elements, it calls <ph id=\"ph1\">`Istr`</ph>.","pos":[2464,2518],"source":" If the function extracts no elements, it calls `Istr`."},{"content":"<bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p2\">**</bpt>failbit<ept id=\"p2\">**</ept>).","pos":[2519,2604],"source":"[setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**)."},{"content":"In any case, it calls <ph id=\"ph1\">`Istr`</ph>.","pos":[2605,2634],"source":" In any case, it calls `Istr`."},{"content":"<bpt id=\"p1\">**</bpt>width<ept id=\"p1\">**</ept>(0) and returns <ph id=\"ph1\">`Istr`</ph>.","pos":[2635,2667],"source":"**width**(0) and returns `Istr`."},{"content":"<bpt id=\"p1\">**</bpt>Security Note<ept id=\"p1\">**</ept> The null-terminated string being extracted from the input stream must not exceed the size of the destination buffer <ph id=\"ph1\">` str`</ph>.","pos":[2674,2815],"source":"**Security Note** The null-terminated string being extracted from the input stream must not exceed the size of the destination buffer ` str`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Avoiding Buffer Overruns<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/ms717795)</ept>.","pos":[2816,2929],"source":" For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795)."},{"content":"The template function:","pos":[2936,2958]},{"content":"extracts an element, if it is possible, and stores it in <ph id=\"ph1\">`Ch`</ph>.","pos":[3100,3162],"source":"extracts an element, if it is possible, and stores it in `Ch`."},{"content":"Otherwise, it calls <bpt id=\"p1\">**</bpt>is<ept id=\"p1\">**</ept>.","pos":[3163,3190],"source":" Otherwise, it calls **is**."},{"content":"<bpt id=\"p1\">[</bpt>setstate<ept id=\"p1\">](../standard-library/basic-ios-class.md#basic_ios__setstate)</ept>( <bpt id=\"p2\">**</bpt>failbit<ept id=\"p2\">**</ept>).","pos":[3191,3276],"source":"[setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**)."},{"content":"In any case, it returns <ph id=\"ph1\">`Istr`</ph>.","pos":[3277,3308],"source":" In any case, it returns `Istr`."},{"content":"The template function:","pos":[3315,3337]},{"pos":[3475,3516],"content":"returns <ph id=\"ph1\">`Istr`</ph> &gt;&gt; ( <ph id=\"ph2\">`char`</ph><bpt id=\"p1\">**</bpt><ph id=\"ph3\">\\*</ph><ept id=\"p1\">**</ept>) <ph id=\"ph4\">` str`</ph>.","source":"returns `Istr` >> ( `char`**\\***) ` str`."},{"content":"The template function:","pos":[3523,3545]},{"pos":[3682,3718],"content":"returns <ph id=\"ph1\">`Istr`</ph> &gt;&gt; ( <bpt id=\"p1\">**</bpt>char&amp;<ept id=\"p1\">**</ept>) <ph id=\"ph2\">`Ch`</ph>.","source":"returns `Istr` >> ( **char&**) `Ch`."},{"content":"The template function:","pos":[3725,3747]},{"pos":[3887,3927],"content":"returns <ph id=\"ph1\">`Istr`</ph> &gt;&gt; ( <bpt id=\"p1\">**</bpt>char <ph id=\"ph2\">\\*</ph><ept id=\"p1\">**</ept>) <ph id=\"ph3\">` str`</ph>.","source":"returns `Istr` >> ( **char \\***) ` str`."},{"content":"The template function:","pos":[3934,3956]},{"pos":[4095,4131],"content":"returns <ph id=\"ph1\">`Istr`</ph> &gt;&gt; ( <bpt id=\"p1\">**</bpt>char&amp;<ept id=\"p1\">**</ept>) <ph id=\"ph2\">`Ch`</ph>.","source":"returns `Istr` >> ( **char&**) `Ch`."},{"content":"The template function:","pos":[4138,4160]},{"pos":[4322,4426],"content":"returns <ph id=\"ph1\">`Istr`</ph> <ph id=\"ph2\">`&gt;&gt;`</ph> <ph id=\"ph3\">` val`</ph> (and converts an <ph id=\"ph4\">`rvalue reference`</ph> to <ph id=\"ph5\">`Istr`</ph> to an <ph id=\"ph6\">`lvalue`</ph> in the process).","source":"returns `Istr` `>>` ` val` (and converts an `rvalue reference` to `Istr` to an `lvalue` in the process)."},{"pos":[4436,4443],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4690,4698],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4702,4746],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>istream&gt;<ept id=\"p1\">](../standard-library/istream.md)</ept>","source":"[\\<istream>](../standard-library/istream.md)"}],"content":"---\ntitle: \"&lt;istream&gt; operators | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 7174da41-f301-4a34-b631-0ab918b188d2\ncaps.latest.revision: 11\nauthor: \"corob-msft\"\nms.author: \"corob\"\nmanager: \"ghogen\"\n---\n# &lt;istream&gt; operators\n \n##  <a name=\"operator_gt__gt_\"></a>  operator&gt;&gt;  \n Extracts characters and strings from the stream.  \n  \n```  \ntemplate <class Elem, class Tr>  \nbasic_istream<Elem, Tr>& operator>>(\n    basic_istream<Elem, Tr>& Istr,   \n    Elem* str);\n\ntemplate <class Elem, class Tr>  \nbasic_istream<Elem, Tr>& operator>>(\n    basic_istream<Elem, Tr>& Istr,   \n    Elem& Ch);\n\ntemplate <class Tr>  \nbasic_istream<char, Tr>& operator>>(\n    basic_istream<char, Tr>& Istr,   \n    signed char* str);\n\ntemplate <class Tr>  \nbasic_istream<char, Tr>& operator>>(\n    basic_istream<char, Tr>& Istr,   \n    signed char& Ch);\n\ntemplate <class Tr>  \nbasic_istream<char, Tr>& operator>>(\n    basic_istream<char, Tr>& Istr,   \n    unsigned char* str);\n\ntemplate <class Tr>  \nbasic_istream<char, Tr>& operator>>(\n    basic_istream<char, Tr>& Istr,   \n    unsigned char& Ch);\n\ntemplate <class Elem, class Tr, class Type>  \nbasic_istream<Elem, Tr>& operator>>(\n    basic_istream<char, Tr>&& Istr,  \n    Type& val);\n```  \n  \n### Parameters  \n `Ch`  \n A character.  \n  \n `Istr`  \n A stream.  \n  \n ` str`  \n A string.  \n  \n ` val`  \n A type.  \n  \n### Return Value  \n The stream  \n  \n### Remarks  \n The `basic_istream` class also defines several extraction operators. For more information, see [basic_istream::operator>>](../standard-library/basic-istream-class.md#basic_istream__operator_gt__gt_).  \n  \n The template function:  \n  \n```cpp  \ntemplate <class Elem, class Tr>  \nbasic_istream<Elem, Tr>& operator>>(\n    basic_istream<Elem, Tr>& Istr, Elem* str);\n```  \n  \n extracts up to *N* - 1 elements and stores them in the array starting at _ *Str*. If `Istr`. [width](../standard-library/ios-base-class.md#ios_base__width) is greater than zero, *N* is `Istr`. **width**; otherwise, it is the size of the largest array of **Elem** that can be declared. The function always stores the value **Elem()** after any extracted elements it stores. Extraction stops early on end of file, on a character with value **Elem**(0) (which is not extracted), or on any element (which is not extracted) that would be discarded by [ws](../standard-library/istream-functions.md#ws). If the function extracts no elements, it calls `Istr`. [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**). In any case, it calls `Istr`. **width**(0) and returns `Istr`.  \n  \n **Security Note** The null-terminated string being extracted from the input stream must not exceed the size of the destination buffer ` str`. For more information, see [Avoiding Buffer Overruns](http://msdn.microsoft.com/library/windows/desktop/ms717795).  \n  \n The template function:  \n  \n```cpp  \ntemplate <class Elem, class Tr>  \nbasic_istream<Elem, Tr>& operator>>(\n    basic_istream<Elem, Tr>& Istr, Elem& Ch);\n```  \n  \n extracts an element, if it is possible, and stores it in `Ch`. Otherwise, it calls **is**. [setstate](../standard-library/basic-ios-class.md#basic_ios__setstate)( **failbit**). In any case, it returns `Istr`.  \n  \n The template function:  \n  \n```cpp  \ntemplate <class Tr>  \nbasic_istream<char, Tr>& operator>>(\n    basic_istream<char, Tr>& Istr, signed char* str);\n```  \n  \n returns `Istr` >> ( `char`**\\***) ` str`.  \n  \n The template function:  \n  \n```cpp  \ntemplate <class Tr>  \nbasic_istream<char, Tr>& operator>>(\n    basic_istream<char, Tr>& Istr, signed char& Ch);\n```  \n  \n returns `Istr` >> ( **char&**) `Ch`.  \n  \n The template function:  \n  \n```cpp  \ntemplate <class Tr>  \nbasic_istream<char, Tr>& operator>>(\n    basic_istream<char, Tr>& Istr, unsigned char* str);\n```  \n  \n returns `Istr` >> ( **char \\***) ` str`.  \n  \n The template function:  \n  \n```cpp  \ntemplate <class Tr>  \nbasic_istream<char, Tr>& operator>>(\n    basic_istream<char, Tr>& Istr, unsigned char& Ch);\n```  \n  \n returns `Istr` >> ( **char&**) `Ch`.  \n  \n The template function:  \n  \n```cpp  \ntemplate <class Elem, class Tr, class Type>  \nbasic_istream<Elem, Tr>& operator>>(\n    basic_istream<char, Tr>&& Istr,  \n    Type& val);\n```  \n  \n returns `Istr` `>>` ` val` (and converts an `rvalue reference` to `Istr` to an `lvalue` in the process).  \n  \n### Example  \n  \n```cpp  \n// istream_op_extract.cpp  \n// compile with: /EHsc  \n#include <iostream>  \nusing namespace std;  \n  \nint main( )   \n{  \n   ws( cin );  \n   char c[10];  \n  \n   cin.width( 9 );  \n   cin >> c;  \n   cout << c << endl;  \n}  \n```  \n  \n## See Also  \n [\\<istream>](../standard-library/istream.md)\n\n"}