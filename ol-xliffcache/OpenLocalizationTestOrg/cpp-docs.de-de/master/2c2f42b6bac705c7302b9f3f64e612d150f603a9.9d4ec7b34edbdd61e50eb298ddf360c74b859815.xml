{"nodes":[{"pos":[12,52],"content":"CArchiveException Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"CArchiveException Class | Microsoft Docs","pos":[0,40]}]},{"content":"CArchiveException Class","pos":[764,787]},{"content":"Represents a serialization exception condition","pos":[788,834]},{"content":"Syntax","pos":[843,849]},{"content":"Members","pos":[919,926]},{"content":"Public Constructors","pos":[936,955]},{"content":"Name","pos":[962,966]},{"content":"Description","pos":[967,978]},{"content":"CArchiveException::CArchiveException","pos":[1017,1053]},{"pos":[1094,1134],"content":"Constructs a <ph id=\"ph1\">`CArchiveException`</ph> object.","source":"Constructs a `CArchiveException` object."},{"content":"Public Data Members","pos":[1145,1164]},{"content":"Name","pos":[1171,1175]},{"content":"Description","pos":[1176,1187]},{"content":"CArchiveException::m_cause","pos":[1226,1252]},{"content":"Indicates the exception cause.","pos":[1283,1313]},{"content":"CArchiveException::m_strFileName","pos":[1319,1351]},{"content":"Specifies the name of the file for this exception condition.","pos":[1388,1448]},{"content":"Remarks","pos":[1458,1465]},{"pos":[1469,1571],"content":"The <ph id=\"ph1\">`CArchiveException`</ph> class includes a public data member that indicates the cause of the exception.","source":"The `CArchiveException` class includes a public data member that indicates the cause of the exception."},{"content":"objects are constructed and thrown inside <bpt id=\"p1\">[</bpt>CArchive<ept id=\"p1\">](../../mfc/reference/carchive-class.md)</ept> member functions.","pos":[1598,1707],"source":" objects are constructed and thrown inside [CArchive](../../mfc/reference/carchive-class.md) member functions."},{"content":"You can access these objects within the scope of a <bpt id=\"p1\">**</bpt>CATCH<ept id=\"p1\">**</ept> expression.","pos":[1708,1780],"source":" You can access these objects within the scope of a **CATCH** expression."},{"content":"The cause code is independent of the operating system.","pos":[1781,1835]},{"content":"For more information about exception processing, see <bpt id=\"p1\">[</bpt>Exception Handling (MFC)<ept id=\"p1\">](../../mfc/exception-handling-in-mfc.md)</ept>.","pos":[1836,1956],"source":" For more information about exception processing, see [Exception Handling (MFC)](../../mfc/exception-handling-in-mfc.md)."},{"content":"Inheritance Hierarchy","pos":[1965,1986]},{"content":"CObject","pos":[1991,1998]},{"content":"CException","pos":[2045,2055]},{"content":"Requirements","pos":[2132,2144]},{"pos":[2148,2165],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> afx.h","source":"**Header:** afx.h"},{"pos":[2228,2264],"content":"CArchiveException::CArchiveException"},{"pos":[2268,2352],"content":"Constructs a <ph id=\"ph1\">`CArchiveException`</ph> object, storing the value of <ph id=\"ph2\">`cause`</ph> in the object.","source":"Constructs a `CArchiveException` object, storing the value of `cause` in the object."},{"content":"Parameters","pos":[2476,2486]},{"content":"An enumerated type variable that indicates the reason for the exception.","pos":[2501,2573]},{"content":"For a list of the enumerators, see the <bpt id=\"p1\">[</bpt>m_cause<ept id=\"p1\">](#carchiveexception__m_cause)</ept> data member.","pos":[2574,2664],"source":" For a list of the enumerators, see the [m_cause](#carchiveexception__m_cause) data member."},{"content":"Points to a string containing the name of the <ph id=\"ph1\">`CArchive`</ph> object causing the exception.","pos":[2692,2778],"source":" Points to a string containing the name of the `CArchive` object causing the exception."},{"content":"Remarks","pos":[2788,2795]},{"pos":[2799,3019],"content":"You can create a <ph id=\"ph1\">`CArchiveException`</ph> object on the heap and throw it yourself or let the global function <bpt id=\"p1\">[</bpt>AfxThrowArchiveException<ept id=\"p1\">](../../mfc/reference/exception-processing.md#afxthrowarchiveexception)</ept> handle it for you.","source":"You can create a `CArchiveException` object on the heap and throw it yourself or let the global function [AfxThrowArchiveException](../../mfc/reference/exception-processing.md#afxthrowarchiveexception) handle it for you."},{"pos":[3026,3125],"content":"Do not use this constructor directly; instead, call the global function <ph id=\"ph1\">`AfxThrowArchiveException`</ph>.","source":"Do not use this constructor directly; instead, call the global function `AfxThrowArchiveException`."},{"pos":[3178,3204],"content":"CArchiveException::m_cause"},{"content":"Specifies the cause of the exception.","pos":[3208,3245]},{"content":"Remarks","pos":[3285,3292]},{"content":"This data member is a public variable of type <ph id=\"ph1\">`int`</ph>.","pos":[3296,3348],"source":"This data member is a public variable of type `int`."},{"content":"Its values are defined by a <ph id=\"ph1\">`CArchiveException`</ph> enumerated type.","pos":[3349,3413],"source":" Its values are defined by a `CArchiveException` enumerated type."},{"content":"The enumerators and their meanings are as follows:","pos":[3414,3464]},{"pos":[3472,3518],"content":"<bpt id=\"p1\">**</bpt>CArchiveException::none<ept id=\"p1\">**</ept> No error occurred.","source":"**CArchiveException::none** No error occurred."},{"pos":[3526,3584],"content":"<bpt id=\"p1\">**</bpt>CArchiveException::genericException<ept id=\"p1\">**</ept> Unspecified error.","source":"**CArchiveException::genericException** Unspecified error."},{"pos":[3592,3674],"content":"<bpt id=\"p1\">**</bpt>CArchiveException::readOnly<ept id=\"p1\">**</ept> Tried to write into an archive opened for loading.","source":"**CArchiveException::readOnly** Tried to write into an archive opened for loading."},{"pos":[3682,3759],"content":"<bpt id=\"p1\">**</bpt>CArchiveException::endOfFile<ept id=\"p1\">**</ept> Reached end of file while reading an object.","source":"**CArchiveException::endOfFile** Reached end of file while reading an object."},{"pos":[3767,3849],"content":"<bpt id=\"p1\">**</bpt>CArchiveException::writeOnly<ept id=\"p1\">**</ept> Tried to read from an archive opened for storing.","source":"**CArchiveException::writeOnly** Tried to read from an archive opened for storing."},{"pos":[3857,3909],"content":"<bpt id=\"p1\">**</bpt>CArchiveException::badIndex<ept id=\"p1\">**</ept> Invalid file format.","source":"**CArchiveException::badIndex** Invalid file format."},{"pos":[3917,4006],"content":"<bpt id=\"p1\">**</bpt>CArchiveException::badClass<ept id=\"p1\">**</ept> Tried to read an object into an object of the wrong type.","source":"**CArchiveException::badClass** Tried to read an object into an object of the wrong type."},{"pos":[4014,4109],"content":"<bpt id=\"p1\">**</bpt>CArchiveException::badSchema<ept id=\"p1\">**</ept> Tried to read an object with a different version of the class.","source":"**CArchiveException::badSchema** Tried to read an object with a different version of the class."},{"pos":[4121,4237],"content":"[!NOTE]\n These `CArchiveException` cause enumerators are distinct from the `CFileException` cause enumerators.","leadings":["","    > "],"nodes":[{"content":"These <ph id=\"ph1\">`CArchiveException`</ph> cause enumerators are distinct from the <ph id=\"ph2\">`CFileException`</ph> cause enumerators.","pos":[9,110],"source":" These `CArchiveException` cause enumerators are distinct from the `CFileException` cause enumerators."}]},{"pos":[4249,4463],"content":"[!NOTE]\n**CArchiveException::generic** is deprecated. Use **genericException** instead. If **generic** is used in an application and built with /clr, there will be syntax errors that are not easy to decipher.","leadings":["","    > "],"nodes":[{"content":"**CArchiveException::generic** is deprecated. Use **genericException** instead. If **generic** is used in an application and built with /clr, there will be syntax errors that are not easy to decipher.","pos":[8,208],"nodes":[{"content":"<bpt id=\"p1\">**</bpt>CArchiveException::generic<ept id=\"p1\">**</ept> is deprecated.","pos":[0,45],"source":"**CArchiveException::generic** is deprecated."},{"content":"Use <bpt id=\"p1\">**</bpt>genericException<ept id=\"p1\">**</ept> instead.","pos":[46,79],"source":" Use **genericException** instead."},{"content":"If <bpt id=\"p1\">**</bpt>generic<ept id=\"p1\">**</ept> is used in an application and built with /clr, there will be syntax errors that are not easy to decipher.","pos":[80,200],"source":" If **generic** is used in an application and built with /clr, there will be syntax errors that are not easy to decipher."}]}]},{"pos":[4522,4554],"content":"CArchiveException::m_strFileName"},{"content":"Specifies the name of the file for this exception condition.","pos":[4558,4618]},{"content":"See Also","pos":[4667,4675]},{"content":"CException Class","pos":[4680,4696]},{"content":"Hierarchy Chart","pos":[4744,4759]},{"content":"CArchive Class","pos":[4796,4810]},{"content":"AfxThrowArchiveException","pos":[4856,4880]},{"content":"Exception Processing","pos":[4957,4977]}],"content":"---\ntitle: \"CArchiveException Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"11/04/2016\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-cpp\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\nf1_keywords: \n  - \"CArchiveException\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"exceptions [C++], serialization\"\n  - \"serialization [C++], exceptions\"\n  - \"CArchiveException class\"\n  - \"exceptions [C++], archive\"\n  - \"archive exceptions [C++]\"\nms.assetid: da31a127-e86c-41d1-b0b6-bed0865b1b49\ncaps.latest.revision: 21\nauthor: \"mikeblome\"\nms.author: \"mblome\"\nmanager: \"ghogen\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# CArchiveException Class\nRepresents a serialization exception condition  \n  \n## Syntax  \n  \n```  \nclass CArchiveException : public CException  \n```  \n  \n## Members  \n  \n### Public Constructors  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CArchiveException::CArchiveException](#carchiveexception__carchiveexception)|Constructs a `CArchiveException` object.|  \n  \n### Public Data Members  \n  \n|Name|Description|  \n|----------|-----------------|  \n|[CArchiveException::m_cause](#carchiveexception__m_cause)|Indicates the exception cause.|  \n|[CArchiveException::m_strFileName](#carchiveexception__m_strfilename)|Specifies the name of the file for this exception condition.|  \n  \n## Remarks  \n The `CArchiveException` class includes a public data member that indicates the cause of the exception.  \n  \n `CArchiveException` objects are constructed and thrown inside [CArchive](../../mfc/reference/carchive-class.md) member functions. You can access these objects within the scope of a **CATCH** expression. The cause code is independent of the operating system. For more information about exception processing, see [Exception Handling (MFC)](../../mfc/exception-handling-in-mfc.md).  \n  \n## Inheritance Hierarchy  \n [CObject](../../mfc/reference/cobject-class.md)  \n  \n [CException](../../mfc/reference/cexception-class.md)  \n  \n `CArchiveException`  \n  \n## Requirements  \n **Header:** afx.h  \n  \n##  <a name=\"carchiveexception__carchiveexception\"></a>  CArchiveException::CArchiveException  \n Constructs a `CArchiveException` object, storing the value of `cause` in the object.  \n  \n```  \nCArchiveException(\n    int cause = CArchiveException::none,  \n    LPCTSTR lpszArchiveName = NULL);\n```  \n  \n### Parameters  \n `cause`  \n An enumerated type variable that indicates the reason for the exception. For a list of the enumerators, see the [m_cause](#carchiveexception__m_cause) data member.  \n  \n `lpszArchiveName`  \n Points to a string containing the name of the `CArchive` object causing the exception.  \n  \n### Remarks  \n You can create a `CArchiveException` object on the heap and throw it yourself or let the global function [AfxThrowArchiveException](../../mfc/reference/exception-processing.md#afxthrowarchiveexception) handle it for you.  \n  \n Do not use this constructor directly; instead, call the global function `AfxThrowArchiveException`.  \n  \n##  <a name=\"carchiveexception__m_cause\"></a>  CArchiveException::m_cause  \n Specifies the cause of the exception.  \n  \n```  \nint m_cause;  \n```  \n  \n### Remarks  \n This data member is a public variable of type `int`. Its values are defined by a `CArchiveException` enumerated type. The enumerators and their meanings are as follows:  \n  \n- **CArchiveException::none** No error occurred.  \n  \n- **CArchiveException::genericException** Unspecified error.  \n  \n- **CArchiveException::readOnly** Tried to write into an archive opened for loading.  \n  \n- **CArchiveException::endOfFile** Reached end of file while reading an object.  \n  \n- **CArchiveException::writeOnly** Tried to read from an archive opened for storing.  \n  \n- **CArchiveException::badIndex** Invalid file format.  \n  \n- **CArchiveException::badClass** Tried to read an object into an object of the wrong type.  \n  \n- **CArchiveException::badSchema** Tried to read an object with a different version of the class.  \n  \n    > [!NOTE]\n    >  These `CArchiveException` cause enumerators are distinct from the `CFileException` cause enumerators.  \n  \n    > [!NOTE]\n    > **CArchiveException::generic** is deprecated. Use **genericException** instead. If **generic** is used in an application and built with /clr, there will be syntax errors that are not easy to decipher.  \n  \n##  <a name=\"carchiveexception__m_strfilename\"></a>  CArchiveException::m_strFileName  \n Specifies the name of the file for this exception condition.  \n  \n```  \nCString m_strFileName;  \n```  \n  \n## See Also  \n [CException Class](../../mfc/reference/cexception-class.md)   \n [Hierarchy Chart](../../mfc/hierarchy-chart.md)   \n [CArchive Class](../../mfc/reference/carchive-class.md)   \n [AfxThrowArchiveException](../../mfc/reference/exception-processing.md#afxthrowarchiveexception)   \n [Exception Processing](../../mfc/reference/exception-processing.md)\n\n"}